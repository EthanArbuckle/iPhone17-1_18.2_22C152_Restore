std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_2556FB740(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

uint64_t MTLCompilerObject::serializeBackendCompilationOutput(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v16 = *(void *)(a3 + 32);
  if (*(_DWORD *)(v16 + 4) || *(_DWORD *)(v16 + 216) != 1)
  {
    int v17 = *(_DWORD *)(a5 + 24);
    if (v17) {
      BOOL v18 = 1;
    }
    else {
      BOOL v18 = *(void *)a5 == 0;
    }
    if (v18) {
      goto LABEL_9;
    }
    memset(v65, 0, sizeof(v65));
    int v66 = 1065353216;
    if (a4[1]) {
      uint64_t v20 = *a4;
    }
    else {
      uint64_t v20 = 0;
    }
    CompilerOutputReflectionBlock::CompilerOutputReflectionBlock(v64, v20);
    addBlocksForOutput((unsigned __int8 *)v65, a4, (uint64_t *)a5, (uint64_t *)v64);
    buf[0] = 5;
    v67[0] = a8;
    std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType,CompilerOutputBlock>((uint64_t)v65, (char *)buf, buf, v67);
    long long v68 = 0u;
    long long v69 = 0u;
    memset(v67, 0, sizeof(v67));
    size_t v63 = 0;
    v21 = (char *)createSerializedCompileRequest(&v63, (uint64_t)v65, (uint64_t)v67);
    if (!v21)
    {
      MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Failed to serialize reply data");
      (*(void (**)(void))(*(void *)(a3 + 24) + 16))();
      uint64_t v19 = 0;
LABEL_76:
      CompilerOutputReflectionBlock::~CompilerOutputReflectionBlock(v64);
      std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::~__hash_table((uint64_t)v65);
      return v19;
    }
    int v60 = 1;
    MTLBuildRequestTypeToString(&v60, __p);
    unint64_t v22 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - a7));
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = a1 + 136;
      if (*(char *)(a1 + 159) < 0) {
        uint64_t v23 = *(void *)(a1 + 136);
      }
      v24 = __p;
      if (v62 < 0) {
        v24 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v71 = v23;
      __int16 v72 = 2082;
      v73 = v24;
      __int16 v74 = 2080;
      v75 = "pipeline";
      __int16 v76 = 2048;
      double v77 = (double)v22 * 0.000001;
      _os_log_impl(&dword_2556FA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Compilation SUCCESS (ParentProcessName=%{public}s) (TYPE=%{public}s - %s): Time %f ms ", buf, 0x2Au);
    }
    if (v62 < 0)
    {
      operator delete(__p[0]);
      if (!a8) {
        goto LABEL_70;
      }
    }
    else if (!a8)
    {
      goto LABEL_70;
    }
    v26 = *(char **)(a6 + 16);
    v27 = *(char **)(a6 + 8);
    if (v27 >= v26)
    {
      v29 = *(unsigned char **)a6;
      uint64_t v30 = (uint64_t)&v27[-*(void *)a6] >> 4;
      unint64_t v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 60) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v32 = v26 - v29;
      if (v32 >> 3 > v31) {
        unint64_t v31 = v32 >> 3;
      }
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v31;
      }
      if (v33)
      {
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>(a6 + 16, v33);
        v29 = *(unsigned char **)a6;
        v27 = *(char **)(a6 + 8);
      }
      else
      {
        v34 = 0;
      }
      v35 = &v34[16 * v30];
      v26 = &v34[16 * v33];
      *(_DWORD *)v35 = 3;
      *((void *)v35 + 1) = v22;
      v28 = v35 + 16;
      if (v27 != v29)
      {
        do
        {
          *((_OWORD *)v35 - 1) = *((_OWORD *)v27 - 1);
          v35 -= 16;
          v27 -= 16;
        }
        while (v27 != v29);
        v29 = *(unsigned char **)a6;
      }
      *(void *)a6 = v35;
      *(void *)(a6 + 8) = v28;
      *(void *)(a6 + 16) = v26;
      if (v29)
      {
        operator delete(v29);
        v26 = *(char **)(a6 + 16);
      }
    }
    else
    {
      *(_DWORD *)v27 = 3;
      *((void *)v27 + 1) = v22;
      v28 = v27 + 16;
    }
    *(void *)(a6 + 8) = v28;
    unint64_t v36 = v22 - *(void *)(a5 + 64);
    if (v28 >= v26)
    {
      v38 = *(unsigned char **)a6;
      uint64_t v39 = (uint64_t)&v28[-*(void *)a6] >> 4;
      unint64_t v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 60) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v41 = v26 - v38;
      if (v41 >> 3 > v40) {
        unint64_t v40 = v41 >> 3;
      }
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v40;
      }
      if (v42)
      {
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>(a6 + 16, v42);
        v38 = *(unsigned char **)a6;
        v28 = *(char **)(a6 + 8);
      }
      else
      {
        v43 = 0;
      }
      v44 = &v43[16 * v39];
      v45 = &v43[16 * v42];
      *(_DWORD *)v44 = 4;
      *((void *)v44 + 1) = v36;
      uint64_t v37 = (uint64_t)(v44 + 16);
      if (v28 != v38)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v28 - 1);
          v44 -= 16;
          v28 -= 16;
        }
        while (v28 != v38);
        v38 = *(unsigned char **)a6;
      }
      *(void *)a6 = v44;
      *(void *)(a6 + 8) = v37;
      *(void *)(a6 + 16) = v45;
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(_DWORD *)v28 = 4;
      *((void *)v28 + 1) = v36;
      uint64_t v37 = (uint64_t)(v28 + 16);
    }
    *(void *)(a6 + 8) = v37;
    uint64_t v46 = *((void *)&v68 + 1);
    v58 = 0;
    uint64_t v59 = 0;
    v57 = 0;
    std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(&v57, *(const void **)a6, v37, (v37 - *(void *)a6) >> 4);
    v47 = v57;
    uint64_t v48 = v58 - v57;
    if (v58 == v57)
    {
      v47 = v58;
    }
    else
    {
      v49 = &v21[v46];
      *(_WORD *)v49 = v48 >> 4;
      v49[2] = (v48 >> 4) >> 16;
      v49[3] = (v48 >> 4) >> 24;
      uint64_t v50 = (v48 >> 4);
      if (v50)
      {
        uint64_t v51 = 0;
        v52 = v49 + 4;
        uint64_t v53 = 16 * v50;
        do
        {
          *(_DWORD *)v52 = *(_DWORD *)&v47[v51];
          *(void *)(v52 + 4) = *(void *)&v47[v51 + 8];
          v52 += 12;
          v51 += 16;
        }
        while (v53 != v51);
        goto LABEL_69;
      }
    }
    if (v47)
    {
LABEL_69:
      v58 = v47;
      operator delete(v47);
    }
LABEL_70:
    int v54 = *(_DWORD *)(a5 + 24);
    if (v54)
    {
      if (v54 != 1) {
        abort();
      }
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v19 = 1;
    }
    (*(void (**)(void))(*(void *)(a3 + 24) + 16))();
    free(v21);
    uint64_t v55 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
    if (*(unsigned char *)(v55 + 138))
    {
      (*(void (**)(void))(v55 + 16))(*(void *)(v55 + 112));
      *(unsigned char *)(v55 + 138) = 0;
    }
    goto LABEL_76;
  }
  int v17 = *(_DWORD *)(a5 + 24);
LABEL_9:
  if (v17)
  {
    if (v17 != 1) {
      abort();
    }
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 1;
  }
  (*(void (**)(void))(*(void *)(a3 + 24) + 16))();
  uint64_t v25 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
  if (*(unsigned char *)(v25 + 138))
  {
    (*(void (**)(void))(v25 + 16))(*(void *)(v25 + 112));
    *(unsigned char *)(v25 + 138) = 0;
  }
  return v19;
}

void sub_2556FBD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,char a22)
{
}

uint64_t std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::~__hash_table(uint64_t a1)
{
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void CompilerOutputReflectionBlock::~CompilerOutputReflectionBlock(void **this)
{
}

void *createSerializedCompileRequest(size_t *a1, uint64_t a2, uint64_t a3)
{
  size_t v6 = sizeOfSerializedCompilerBlocks(a2);
  size_t v7 = v6;
  if (a1) {
    *a1 = v6;
  }
  memptr = 0;
  int v8 = malloc_type_posix_memalign(&memptr, 8uLL, v6, 0x777494A7uLL);
  result = 0;
  if (!v8)
  {
    bzero(memptr, v7);
    serializeCompilerBlocks(memptr, v7, a2, a3);
    return memptr;
  }
  return result;
}

uint64_t sizeOfSerializedCompilerBlocks(uint64_t a1)
{
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  uint64_t v1 = *(void **)(a1 + 16);
  if (!v1) {
    return 8;
  }
  uint64_t result = 8;
  do
  {
    result += ((v1[3] + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v1 = (void *)*v1;
  }
  while (v1);
  return result;
}

void *serializeCompilerBlocks(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t ***)(a3 + 16);
  void *result = *(void *)(a3 + 24);
  if (v4)
  {
    size_t v6 = result;
    uint64_t v7 = 8;
    do
    {
      uint64_t v8 = *((char *)v4 + 16);
      v9 = (void *)((char *)v6 + v7);
      size_t v10 = (size_t)v4[3];
      void *v9 = v8;
      v9[1] = v10;
      uint64_t v11 = v7 + 16;
      if (v10)
      {
        v12 = v4[4];
        if (v12) {
          uint64_t result = memcpy((char *)v6 + v11, v12, v10);
        }
      }
      if (a4) {
        *(void *)(a4 + 8 * v8) = v11;
      }
      uint64_t v7 = (((unint64_t)v4[3] + 7) & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v4 = (uint64_t **)*v4;
    }
    while (v4);
  }
  return result;
}

unsigned __int8 *addBlocksForOutput(unsigned __int8 *result, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t)result;
  if (a3)
  {
    uint64_t v9 = *a3;
    uint64_t v8 = a3[1];
    unsigned __int8 v23 = 0;
    if (v8)
    {
      *(void *)&long long v22 = v8;
      *((void *)&v22 + 1) = v9;
      uint64_t result = std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>((uint64_t)result, (char *)&v23, &v23, &v22);
    }
    uint64_t v11 = a3[4];
    uint64_t v10 = a3[5];
    unsigned __int8 v23 = 3;
    if (v10)
    {
      *(void *)&long long v22 = v10;
      *((void *)&v22 + 1) = v11;
      uint64_t result = std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(v6, (char *)&v23, &v23, &v22);
    }
    uint64_t v13 = a3[6];
    uint64_t v12 = a3[7];
    unsigned __int8 v23 = 4;
    if (v12)
    {
      *(void *)&long long v22 = v12;
      *((void *)&v22 + 1) = v13;
      uint64_t result = std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(v6, (char *)&v23, &v23, &v22);
    }
  }
  if (a2)
  {
    uint64_t v14 = a2[5];
    if (v14)
    {
      uint64_t v15 = a2[4];
      unsigned __int8 v23 = 1;
      *(void *)&long long v22 = v14;
      *((void *)&v22 + 1) = v15;
      uint64_t result = std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(v6, (char *)&v23, &v23, &v22);
    }
    uint64_t v16 = *a4;
    if (*a4)
    {
      uint64_t v17 = a4[1];
      unsigned __int8 v23 = 2;
      *(void *)&long long v22 = v16;
      *((void *)&v22 + 1) = v17;
      uint64_t result = std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(v6, (char *)&v23, &v23, &v22);
    }
    uint64_t v18 = a2[8];
    if (v18)
    {
      uint64_t v19 = a2[7];
      unsigned __int8 v23 = 6;
      *(void *)&long long v22 = v18;
      *((void *)&v22 + 1) = v19;
      uint64_t result = std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(v6, (char *)&v23, &v23, &v22);
    }
    uint64_t v20 = a2[19];
    if (v20)
    {
      uint64_t v21 = a2[18];
      unsigned __int8 v23 = 7;
      *(void *)&long long v22 = v20;
      *((void *)&v22 + 1) = v21;
      return std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(v6, (char *)&v23, &v23, &v22);
    }
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,CompilerOutputBlock>(uint64_t a1, char *a2, unsigned __int8 *a3, _OWORD *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (unsigned __int8 *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (v12[16] == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = (unsigned __int8 *)operator new(0x28uLL);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = v8;
  v12[16] = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)uint64_t v12 = *v21;
LABEL_38:
    void *v21 = v12;
    goto LABEL_39;
  }
  *(void *)uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v22 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_2556FC35C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,CompilerOutputBlock>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType,CompilerOutputBlock>(uint64_t a1, char *a2, unsigned __int8 *a3, _OWORD *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (unsigned __int8 *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (v12[16] == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v12 = (unsigned __int8 *)operator new(0x28uLL);
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = v8;
  v12[16] = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)uint64_t v12 = *v21;
LABEL_38:
    void *v21 = v12;
    goto LABEL_39;
  }
  *(void *)uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v22 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_2556FC58C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *uint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

char *parseFunctionConstants(llvm::LLVMContext *a1, const char *a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a3 <= 3) {
    goto LABEL_12;
  }
  uint64_t v7 = *(unsigned int *)a2;
  unint64_t v17 = (char *)malloc_type_malloc(16 * v7, 0x1020040D5A9D86FuLL);
  if (v7)
  {
    unint64_t v8 = (llvm::Constant **)(v17 + 8);
    unint64_t v9 = 4;
    uint64_t v10 = v7;
    while (a3 > v9)
    {
      if (a3 - v9 <= 1) {
        break;
      }
      if (v9 + 2 >= a3) {
        break;
      }
      int v11 = *(unsigned __int16 *)&a2[v9];
      MTLDataType v12 = (unint64_t)a2[v9 + 2];
      unint64_t v13 = v9 + 3;
      size_t v14 = _MTLConstantDataSize();
      if (v9 + 3 >= a3) {
        break;
      }
      unint64_t v9 = v14 + v13;
      if (v14 + v13 > a3 || v14 >= 0x11) {
        break;
      }
      memcpy(__dst, &a2[v13], v14);
      *((_DWORD *)v8 - 2) = v11;
      *unint64_t v8 = getLLVMConstantValue(a1, v12, __dst);
      v8 += 2;
      if (!--v10) {
        goto LABEL_11;
      }
    }
LABEL_12:
    abort();
  }
LABEL_11:
  *a4 = v7;
  return v17;
}

llvm::Constant *getLLVMConstantValue(llvm::LLVMContext *a1, MTLDataType a2, const unsigned __int8 *a3)
{
  uint64_t ComponentType = MTLDataTypeGetComponentType();
  int ComponentCount = MTLDataTypeGetComponentCount();
  if (ComponentType <= 32)
  {
    switch(ComponentType)
    {
      case 3:
        llvm::Type::getFloatTy(a1, v5);
        uint64_t result = (llvm::Constant *)llvm::ConstantDataVector::getFP();
        break;
      case 16:
        llvm::Type::getHalfTy(a1, v5);
        uint64_t result = (llvm::Constant *)llvm::ConstantDataVector::getFP();
        break;
      case 29:
LABEL_10:
        uint64_t result = (llvm::Constant *)llvm::ConstantDataVector::get();
        break;
      default:
        goto LABEL_21;
    }
  }
  else
  {
    char v7 = ComponentType - 37;
    if ((unint64_t)(ComponentType - 37) > 0x30) {
      goto LABEL_20;
    }
    if (((1 << v7) & 0x11100) != 0)
    {
      uint64_t result = (llvm::Constant *)llvm::ConstantDataVector::get();
    }
    else
    {
      if (((1 << v7) & 0x11) == 0)
      {
        if (((1 << v7) & 0x1100000000000) != 0)
        {
          uint64_t result = (llvm::Constant *)llvm::ConstantDataVector::get();
          goto LABEL_15;
        }
LABEL_20:
        if (ComponentType != 33) {
LABEL_21:
        }
          abort();
        goto LABEL_10;
      }
      uint64_t result = (llvm::Constant *)llvm::ConstantDataVector::get();
    }
  }
LABEL_15:
  if (ComponentCount == 1)
  {
    return (llvm::Constant *)llvm::Constant::getAggregateElement(result);
  }
  return result;
}

void *parseStructTypeMetadata(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  v62[4] = *MEMORY[0x263EF8340];
  int v61 = a3;
  unint64_t v9 = operator new(0x28uLL);
  void *v9 = &unk_2704540F8;
  v9[1] = a2;
  v9[2] = &v61;
  v9[3] = a5;
  v9[4] = a4;
  v62[3] = v9;
  unsigned int v10 = *(_DWORD *)(a1 + 8);
  if (v10)
  {
    unsigned int v11 = 0;
    int v12 = 0;
    do
    {
      uint64_t v13 = *(unsigned int *)(a1 + 8);
      uint64_t v14 = v11;
      float v15 = *(llvm::MDString **)(a1 - 8 * v13 + 8 * v11);
      if (*(unsigned char *)v15) {
        goto LABEL_4;
      }
      uint64_t String = llvm::MDString::getString(v15);
      if (v18 != 20)
      {
        uint64_t v16 = 0;
        uint64_t v13 = *(unsigned int *)(a1 + 8);
        goto LABEL_16;
      }
      BOOL v19 = *(void *)String == 0x757274732E726961 && *(void *)(String + 8) == 0x5F657079745F7463;
      BOOL v20 = v19 && *(_DWORD *)(String + 16) == 1868983913;
      uint64_t v13 = *(unsigned int *)(a1 + 8);
      if (v20)
      {
        uint64_t v16 = *(void *)(a1 - 8 * v13 + 8 * (v11 + 1));
        uint64_t v14 = v11 + 2;
        v11 += 2;
      }
      else
      {
LABEL_4:
        uint64_t v16 = 0;
      }
LABEL_16:
      uint64_t v21 = a1 - 8 * v13;
      uint64_t v22 = *(void *)(*(void *)(v21 + 8 * v14) + 128);
      unsigned __int8 v23 = (void *)(v22 + 24);
      if (*(_DWORD *)(v22 + 32) >= 0x41u) {
        unsigned __int8 v23 = (void *)*v23;
      }
      uint64_t v24 = *(void *)(*(void *)(v21 + 8 * (v11 + 1)) + 128);
      uint64_t v25 = (void *)(v24 + 24);
      if (*(_DWORD *)(v24 + 32) >= 0x41u) {
        uint64_t v25 = (void *)*v25;
      }
      uint64_t v26 = *(void *)(*(void *)(v21 + 8 * (v11 + 2)) + 128);
      v27 = (void *)(v26 + 24);
      if (*(_DWORD *)(v26 + 32) >= 0x41u) {
        v27 = (void *)*v27;
      }
      int v28 = *(_DWORD *)v23;
      int v29 = *(_DWORD *)v25;
      int v60 = *(_DWORD *)v27;
      uint64_t v59 = llvm::MDString::getString(*(llvm::MDString **)(v21 + 8 * (v11 + 3)));
      uint64_t v31 = v30;
      uint64_t v33 = llvm::MDString::getString(*(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * (v11 + 4)));
      uint64_t v35 = v34;
      int v56 = v29;
      int v57 = v28;
      uint64_t v58 = v16;
      v11 += 5;
      if (v11 >= v10)
      {
        uint64_t v36 = 0;
        int v39 = -1;
        int v38 = -1;
      }
      else
      {
        uint64_t v36 = 0;
        uint64_t v37 = *(unsigned int *)(a1 + 8);
        int v38 = -1;
        int v39 = -1;
        do
        {
          unint64_t v40 = *(llvm::MDString **)(a1 - 8 * v37 + 8 * v11);
          if (*(unsigned char *)v40) {
            break;
          }
          uint64_t v41 = llvm::MDString::getString(v40);
          switch(v42)
          {
            case 17:
              if (*(void *)v41 != 0x646E65722E726961
                || *(void *)(v41 + 8) != 0x65677261745F7265
                || *(unsigned char *)(v41 + 16) != 116)
              {
                goto LABEL_73;
              }
              uint64_t v37 = *(unsigned int *)(a1 + 8);
              uint64_t v45 = *(void *)(*(void *)(a1 - 8 * v37 + 8 * (v11 + 1)) + 128);
              if (*(unsigned char *)(v45 + 16) == 16)
              {
                uint64_t v46 = (void *)(v45 + 24);
                if (*(_DWORD *)(v45 + 32) >= 0x41u) {
                  uint64_t v46 = (void *)*v46;
                }
                int v38 = *(_DWORD *)v46;
              }
              else
              {
                int v38 = -1;
              }
              break;
            case 20:
              if (*(void *)v41 != 0x757274732E726961
                || *(void *)(v41 + 8) != 0x5F657079745F7463
                || *(_DWORD *)(v41 + 16) != 1868983913)
              {
                goto LABEL_73;
              }
              goto LABEL_64;
            case 21:
              if (*(void *)v41 != 0x69646E692E726961
                || *(void *)(v41 + 8) != 0x6772615F74636572
                || *(void *)(v41 + 13) != 0x746E656D75677261)
              {
                goto LABEL_73;
              }
              uint64_t v37 = *(unsigned int *)(a1 + 8);
              uint64_t v36 = *(void *)(a1 - 8 * v37 + 8 * (v11 + 1));
              break;
            case 22:
              if (*(void *)v41 != 0x747361722E726961
                || *(void *)(v41 + 8) != 0x726564726F5F7265
                || *(void *)(v41 + 14) != 0x70756F72675F7265)
              {
                goto LABEL_73;
              }
              uint64_t v37 = *(unsigned int *)(a1 + 8);
              uint64_t v51 = *(void *)(*(void *)(a1 - 8 * v37 + 8 * (v11 + 1)) + 128);
              if (*(unsigned char *)(v51 + 16) == 16)
              {
                v52 = (void *)(v51 + 24);
                if (*(_DWORD *)(v51 + 32) >= 0x41u) {
                  v52 = (void *)*v52;
                }
                int v39 = *(_DWORD *)v52;
              }
              else
              {
                int v39 = -1;
              }
              break;
            default:
LABEL_73:
              abort();
          }
          v11 += 2;
        }
        while (v11 < v10);
      }
LABEL_64:
      std::function<void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::operator()((uint64_t)v62, v12++, v57, v56, v60, v59, v31, v32, v33, v35, v58, v36, __SPAIR64__(v39, v38));
    }
    while (v11 < v10);
  }
  return std::__function::__value_func<void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::~__value_func[abi:ne180100](v62);
}

void sub_2556FCF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::operator()(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  v20[0] = a6;
  v20[1] = a7;
  v19[0] = a9;
  v19[1] = a10;
  int v18 = a2;
  int v16 = a4;
  int v17 = a3;
  int v15 = a5;
  uint64_t v13 = *(void *)(a1 + 24);
  if (!v13) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *, int *, int *, void *, void *, uint64_t *, uint64_t *, uint64_t *, char *))(*(void *)v13 + 48))(v13, &v18, &v17, &v16, &v15, v20, v19, &a11, &a12, &a13, (char *)&a13 + 4);
}

void std::__function::__func<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0,std::allocator<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0>,void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3, int *a4, int *a5, uint64_t a6, long long *a7, uint64_t *a8, uint64_t *a9, unsigned int *a10, unsigned int *a11)
{
  int v12 = *a3;
  int v13 = *a4;
  int v14 = *a5;
  int v16 = *(const char **)a6;
  uint64_t v15 = *(void *)(a6 + 8);
  uint64_t v17 = *a8;
  uint64_t v18 = *a9;
  unsigned int v19 = *a10;
  unsigned int v20 = *a11;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  int v38 = 0;
  long long v39 = 0uLL;
  int v40 = 0;
  long long v41 = xmmword_2557AA110;
  memset(v43, 0, sizeof(v43));
  uint64_t v44 = 0;
  long long v33 = *a7;
  LODWORD(v36) = v12;
  LODWORD(v37) = v14;
  uint64_t v42 = v17;
  uint64_t v34 = v16;
  uint64_t v35 = v15;
  if (v17)
  {
    int v21 = 1;
    if (!v14) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    int v21 = 57;
    if (!v14) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  size_t v30 = strlen(v16);
  int v21 = dataTypeFromString(v16, v30);
  size_t v31 = strlen(v16);
  *((void *)&v41 + 1) = pixelFormatAndALUTypeFromString(v16, v31);
  if (v37)
  {
LABEL_6:
    HIDWORD(v37) = v21;
    int v38 = v13;
    int v21 = 2;
  }
LABEL_7:
  HIDWORD(v36) = v21;
  if (v17) {
    parseStructTypeMetadata(v17, *(void *)(a1 + 8), **(_DWORD **)(a1 + 16), (uint64_t)v43, *(void *)(a1 + 24));
  }
  if (v18)
  {
    if (llvm::MDNode::classof((unsigned char *)v18))
    {
      _ZNSt3__115allocate_sharedB8ne180100I15MTLArgumentDataNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v32);
      long long v22 = v32;
      long long v32 = 0uLL;
      unsigned __int8 v23 = (std::__shared_weak_count *)*((void *)&v39 + 1);
      long long v39 = v22;
      if (v23)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        if (*((void *)&v32 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
        }
      }
      parseArgumentMetadata(v39, v18, 0, **(_DWORD **)(a1 + 16), *(void *)(a1 + 8), 0, *(uint64_t **)(a1 + 24), 7);
      int v24 = *(_DWORD *)(v39 + 4);
    }
    else
    {
      uint64_t v25 = *(void *)(v18 + 128);
      if (*(unsigned char *)(v25 + 16) == 16)
      {
        uint64_t v26 = (void *)(v25 + 24);
        if (*(_DWORD *)(v25 + 32) >= 0x41u) {
          uint64_t v26 = (void *)*v26;
        }
        int v24 = *(_DWORD *)v26;
      }
      else
      {
        int v24 = -1;
      }
    }
    int v40 = v24;
  }
  *(void *)&long long v41 = __PAIR64__(v20, v19);
  v27 = *(uint64_t **)(a1 + 32);
  unint64_t v28 = v27[1];
  if (v28 >= v27[2])
  {
    uint64_t v29 = std::vector<MTLStructMemberInfo>::__push_back_slow_path<MTLStructMemberInfo const&>(v27, &v33);
  }
  else
  {
    std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo const&>((uint64_t)(v27 + 2), v27[1], &v33);
    uint64_t v29 = v28 + 176;
    v27[1] = v28 + 176;
  }
  v27[1] = v29;
  *(void *)&long long v32 = v43;
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  if (*((void *)&v39 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
  }
}

void sub_2556FD200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(a1);
}

uint64_t dataTypeFromString(const void *a1, size_t a2)
{
  dataTypeInfoFromString(a1, a2, (uint64_t)v3);
  return v3[0];
}

uint64_t pixelFormatAndALUTypeFromString(const void *a1, size_t a2)
{
  dataTypeInfoFromString(a1, a2, (uint64_t)v3);
  return v4;
}

uint64_t std::vector<MTLStructMemberInfo>::__push_back_slow_path<MTLStructMemberInfo const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x1745D1745D1745DLL) {
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v6 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v6 = v4;
  }
  int v14 = a1 + 2;
  if (v6) {
    char v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLStructMemberInfo>>((uint64_t)(a1 + 2), v6);
  }
  else {
    char v7 = 0;
  }
  unsigned int v10 = v7;
  unsigned int v11 = &v7[176 * v3];
  int v13 = &v7[176 * v6];
  std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  int v12 = v11 + 176;
  std::vector<MTLStructMemberInfo>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<MTLStructMemberInfo>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_2556FD39C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<MTLStructMemberInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLStructMemberInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(176 * a2);
}

uint64_t std::vector<MTLStructMemberInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>,std::reverse_iterator<MTLStructMemberInfo*>,std::reverse_iterator<MTLStructMemberInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>,std::reverse_iterator<MTLStructMemberInfo*>,std::reverse_iterator<MTLStructMemberInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 176);
      long long v9 = *(_OWORD *)(a3 - 160);
      long long v10 = *(_OWORD *)(a3 - 144);
      *(_DWORD *)(v7 - 128) = *(_DWORD *)(a3 - 128);
      *(_OWORD *)(v7 - 160) = v9;
      *(_OWORD *)(v7 - 144) = v10;
      *(_OWORD *)(v7 - 176) = v8;
      *(_OWORD *)(v7 - 120) = *(_OWORD *)(a3 - 120);
      *(void *)(a3 - 120) = 0;
      *(void *)(a3 - 112) = 0;
      long long v11 = *(_OWORD *)(a3 - 104);
      *(_OWORD *)(v7 - 88) = *(_OWORD *)(a3 - 88);
      *(_OWORD *)(v7 - 104) = v11;
      *(void *)(v7 - 64) = 0;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 72) = 0;
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      *(void *)(v7 - 56) = *(void *)(a3 - 56);
      *(void *)(a3 - 72) = 0;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      long long v12 = *(_OWORD *)(a3 - 16);
      long long v13 = *(_OWORD *)(a3 - 48);
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 16) = v12;
      *(_OWORD *)(v7 - 48) = v13;
      uint64_t v7 = *((void *)&v19 + 1) - 176;
      *((void *)&v19 + 1) -= 176;
      a3 -= 176;
    }
    while (a3 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<MTLStructMemberInfo>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<MTLStructMemberInfo>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = v4 - 176;
    std::allocator_traits<std::allocator<MTLStructMemberInfo>>::destroy[abi:ne180100]<MTLStructMemberInfo,void>(v5, v4 - 176);
  }
}

void std::allocator_traits<std::allocator<MTLStructMemberInfo>>::destroy[abi:ne180100]<MTLStructMemberInfo,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 104);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void parseArgumentMetadata(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t *a7, int a8)
{
  uint64_t v10 = a2;
  if (!buildInMetadataSet) {
    operator new();
  }
  if (a3) {
    int v12 = 8 * (*(void *)(a3 + 8) != 0);
  }
  else {
    int v12 = 8;
  }
  unsigned int v13 = *(_DWORD *)(a2 + 8);
  unsigned int v14 = *(_DWORD *)a1 & 0xFFFFEFF1;
  int v15 = a6 ^ 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a2;
  *(_DWORD *)a1 = v14 | v12;
  uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a2
                                                                  - 8 * *(unsigned int *)(a2 + 8)
                                                                  + 8 * (a6 ^ 1u)));
  long long v18 = String;
  size_t v19 = v17;
  if (a6) {
    unsigned int v20 = 1;
  }
  else {
    unsigned int v20 = 2;
  }
  size_t v21 = v17 - 8;
  switch(v17)
  {
    case 8uLL:
LABEL_10:
      if (memcmp(v18, "air.mesh", v19)) {
        goto LABEL_85;
      }
      *(_DWORD *)a1 |= 4u;
      *(_DWORD *)(a1 + 12) = 24;
      parseMeshStruct(a1, *(void *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8 * v20));
      int v22 = 0;
      int v23 = 16;
      break;
    case 9uLL:
LABEL_35:
      if (!memcmp(v18, "air.byval", v19)) {
        goto LABEL_232;
      }
      goto LABEL_85;
    case 0xAuLL:
LABEL_37:
      if (*v18 != 0x666675622E726961 || *((_WORD *)v18 + 4) != 29285) {
        goto LABEL_85;
      }
      goto LABEL_233;
    case 0xBuLL:
LABEL_43:
      if (!memcmp(v18, "air.texture", v19))
      {
        int v22 = 0;
        int v23 = 1;
      }
      else if (*v18 == 0x706D61732E726961 && *(void *)((char *)v18 + 3) == 0x72656C706D61732ELL)
      {
        int v22 = 0;
        int v23 = 2;
      }
      else
      {
        if (memcmp(v18, "air.payload", v19)) {
          goto LABEL_85;
        }
        int v22 = 8;
        int v23 = 15;
      }
      break;
    case 0xCuLL:
LABEL_50:
      if (!memcmp(v18, "air.constant", v19))
      {
LABEL_232:
        int v22 = 4;
        int v23 = 9;
        break;
      }
      if (*v18 != 0x676174732E726961 || *((_DWORD *)v18 + 2) != 1852399461) {
        goto LABEL_85;
      }
LABEL_56:
      int v22 = 0;
      int v31 = *(_DWORD *)a1 | 2;
LABEL_57:
      *(_DWORD *)a1 = v31;
      goto LABEL_92;
    case 0xEuLL:
LABEL_58:
      if (memcmp(v18, "air.imageblock", v19)) {
        goto LABEL_85;
      }
      long long v32 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8 * v20));
      if (v33 != 8) {
        goto LABEL_254;
      }
      unsigned int v20 = v15 | 2;
      if (*v32 == 0x746963696C706D69)
      {
        int v22 = 0;
        *(_DWORD *)(a1 + 184) = 0;
      }
      else
      {
        if (*v32 != 0x746963696C707865) {
LABEL_254:
        }
          abort();
        int v22 = 0;
        *(_DWORD *)(a1 + 184) = 1;
      }
      int v23 = 5;
      break;
    case 0xFuLL:
      if (*String != 0x637461702E726961 || *(void *)((char *)String + 7) != 0x7475706E695F6863) {
        goto LABEL_85;
      }
      *(_DWORD *)a1 |= 0x2000u;
      goto LABEL_56;
    case 0x10uLL:
      if (*String != 0x747265762E726961 || String[1] != 0x7475706E695F7865) {
        goto LABEL_85;
      }
      goto LABEL_56;
    case 0x12uLL:
LABEL_63:
      if (!memcmp(v18, "air.command_buffer", v19)) {
        goto LABEL_77;
      }
      if (memcmp(v18, "air.fragment_input", v19)) {
        goto LABEL_85;
      }
      int v22 = 0;
      int v31 = *(_DWORD *)a1 | 0x8002;
      goto LABEL_57;
    case 0x13uLL:
LABEL_66:
      if (!memcmp(v18, "air.indirect_buffer", v19))
      {
LABEL_233:
        int v23 = 0;
        int v22 = 1;
      }
      else
      {
        if (memcmp(v18, "air.imageblock_data", v19)) {
          goto LABEL_85;
        }
        int v22 = 0;
        int v23 = 4;
      }
      break;
    case 0x14uLL:
      if (*String == 0x6C706D612E726961 && String[1] == 0x6F69746163696669 && *((_DWORD *)String + 4) == 1684627310) {
        goto LABEL_34;
      }
LABEL_31:
      if (!memcmp(v18, "air.function_pointer", v19)) {
        goto LABEL_254;
      }
      goto LABEL_85;
    case 0x15uLL:
LABEL_69:
      if (memcmp(v18, "air.indirect_constant", v19)) {
        goto LABEL_85;
      }
      int v22 = 2;
      int v23 = 3;
      break;
    case 0x17uLL:
      if (!memcmp(String, "air.amplification_count", v17))
      {
LABEL_34:
        *(_DWORD *)a1 |= 8u;
        switch(v21)
        {
          case 0uLL:
            goto LABEL_10;
          case 1uLL:
            goto LABEL_35;
          case 2uLL:
            goto LABEL_37;
          case 3uLL:
            goto LABEL_43;
          case 4uLL:
            goto LABEL_50;
          case 6uLL:
            goto LABEL_58;
          case 0xAuLL:
            goto LABEL_63;
          case 0xBuLL:
            goto LABEL_66;
          case 0xCuLL:
            goto LABEL_31;
          case 0xDuLL:
            goto LABEL_69;
          case 0x11uLL:
            goto LABEL_71;
          case 0x12uLL:
            goto LABEL_73;
          case 0x13uLL:
            goto LABEL_76;
          case 0x15uLL:
            goto LABEL_78;
          case 0x17uLL:
            goto LABEL_80;
          case 0x1BuLL:
            goto LABEL_82;
          case 0x1CuLL:
            goto LABEL_84;
          default:
            goto LABEL_85;
        }
      }
      goto LABEL_85;
    case 0x19uLL:
LABEL_71:
      if (memcmp(v18, "air.render_pipeline_state", v19)) {
        goto LABEL_85;
      }
      int v22 = 0;
      int v23 = 7;
      break;
    case 0x1AuLL:
LABEL_73:
      if (!memcmp(v18, "air.compute_pipeline_state", v19))
      {
        int v22 = 0;
        int v23 = 6;
      }
      else if (!memcmp(v18, "air.visible_function_table", v19))
      {
        int v22 = 0;
        int v23 = 11;
      }
      else
      {
LABEL_85:
        uint64_t v34 = buildInMetadataSet;
        if (v18)
        {
          std::string::basic_string[abi:ne180100](__p, v18, v19);
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v110 = 0;
        }
        uint64_t v35 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(v34, (const void **)__p);
        if (SHIBYTE(v110) < 0) {
          operator delete(__p[0]);
        }
        int v22 = 0;
        if (buildInMetadataSet + 8 != v35)
        {
          *(_DWORD *)a1 |= 4u;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(v35 + 56);
        }
LABEL_92:
        int v23 = 17;
      }
      break;
    case 0x1BuLL:
LABEL_76:
      if (memcmp(v18, "air.indirect_command_buffer", v19)) {
        goto LABEL_85;
      }
LABEL_77:
      int v22 = 0;
      int v23 = 8;
      break;
    case 0x1DuLL:
LABEL_78:
      if (memcmp(v18, "air.patch_control_point_input", v19)) {
        goto LABEL_85;
      }
      int v22 = 0;
      *(void *)(a1 + 96) = v10;
      *(_DWORD *)a1 |= 0x4002u;
      int v23 = 17;
      goto LABEL_95;
    case 0x1FuLL:
LABEL_80:
      if (memcmp(v18, "air.intersection_function_table", v19)) {
        goto LABEL_85;
      }
      int v22 = 0;
      int v23 = 12;
      break;
    case 0x23uLL:
LABEL_82:
      if (memcmp(v18, "air.instance_acceleration_structure", v19)) {
        goto LABEL_85;
      }
      int v22 = 0;
      int v23 = 14;
      break;
    case 0x24uLL:
LABEL_84:
      if (memcmp(v18, "air.primitive_acceleration_structure", v19)) {
        goto LABEL_85;
      }
      int v22 = 0;
      int v23 = 13;
      break;
    default:
      goto LABEL_85;
  }
  if (*(void *)(a1 + 96))
  {
    uint64_t v10 = *(void *)(a1 + 96);
LABEL_95:
    BOOL v36 = isPatchControlPointInputUnused(v10);
    uint64_t v37 = (*(_DWORD *)(*(void *)(a1 + 96) + 8) - v36);
    if (v36) {
      *(_DWORD *)a1 &= ~8u;
    }
    if (v20 < v37)
    {
      int v38 = a8;
      uint64_t v39 = v20;
      do
      {
        uint64_t v40 = *(void *)(*(void *)(a1 + 96) - 8 * *(unsigned int *)(*(void *)(a1 + 96) + 8) + 8 * v39);
        uint64_t v41 = *(unsigned int *)(v40 + 8);
        uint64_t v42 = v40;
        if (v41)
        {
          do
          {
            v43 = *(llvm::MDString **)(v42 - 8 * *(unsigned int *)(v40 + 8));
            if (v43 && !*(unsigned char *)v43) {
              llvm::MDString::getString(v43);
            }
            v42 += 8;
            --v41;
          }
          while (v41);
        }
        ++v39;
      }
      while (v39 != v37);
      int v44 = 0;
      int v45 = 0;
      int v46 = 0;
      int v47 = 0;
      a8 = v38;
      if (!v22) {
        goto LABEL_204;
      }
LABEL_191:
      if (*(void *)(a1 + 72))
      {
        *(_DWORD *)(a1 + 48) = 1;
      }
      else
      {
        LODWORD(__p[0]) = 0;
        LODWORD(v111) = 0;
        v87 = *(const void **)(a1 + 32);
        if (v87)
        {
          size_t v88 = strlen(*(const char **)(a1 + 32));
          int v89 = dataTypeFromString(v87, v88, __p, &v111);
        }
        else
        {
          int v89 = 0;
        }
        *(_DWORD *)(a1 + 48) = v89;
        if (!*(_DWORD *)(a1 + 52)) {
          *(_DWORD *)(a1 + 52) = __p[0];
        }
        if (!*(_DWORD *)(a1 + 56)) {
          *(_DWORD *)(a1 + 56) = v111;
        }
        v90 = *(const void **)(a1 + 32);
        if (v90)
        {
          size_t v91 = strlen(*(const char **)(a1 + 32));
          unint64_t v92 = pixelFormatAndALUTypeFromString(v90, v91);
          unint64_t v93 = HIDWORD(v92);
        }
        else
        {
          LODWORD(v92) = 0;
          LODWORD(v93) = 0;
        }
        *(_DWORD *)(a1 + 232) = v92;
        *(_DWORD *)(a1 + 236) = v93;
      }
      goto LABEL_204;
    }
LABEL_188:
    int v44 = 0;
    int v45 = 0;
    int v46 = 0;
    int v47 = 0;
    if (!v22) {
      goto LABEL_204;
    }
    goto LABEL_191;
  }
  if (v20 >= v13) {
    goto LABEL_188;
  }
  int v102 = a8;
  int v103 = 0;
  uint64_t v104 = 0;
  int v44 = 0;
  do
  {
    uint64_t v48 = *(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8 * v20);
    unsigned int v49 = v20 + 1;
    if (!*(unsigned char *)v48)
    {
      uint64_t v50 = (_DWORD *)llvm::MDString::getString(v48);
      v52 = v50;
      size_t v53 = v51;
      switch(v51)
      {
        case 8uLL:
          int v54 = "air.read";
          goto LABEL_130;
        case 9uLL:
          int v58 = memcmp(v50, "air.write", v51);
          int v59 = HIDWORD(v104);
          if (!v58) {
            int v59 = 1;
          }
          goto LABEL_167;
        case 0xAuLL:
          int v54 = "air.sample";
          goto LABEL_130;
        case 0xBuLL:
        case 0xFuLL:
        case 0x10uLL:
        case 0x13uLL:
        case 0x16uLL:
        case 0x19uLL:
        case 0x1AuLL:
        case 0x1BuLL:
        case 0x1CuLL:
          break;
        case 0xCuLL:
          if (*(void *)v50 == 0x5F6772612E726961 && v50[2] == 1701667182)
          {
            int v61 = *(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8 * v49);
            unsigned int v49 = v20 + 2;
            *(void *)(a1 + 16) = llvm::MDString::getString(v61);
            *(void *)(a1 + 24) = v62;
          }
          break;
        case 0xDuLL:
          int v54 = "air.read_only";
LABEL_130:
          if (!memcmp(v50, v54, v53)) {
            int v44 = 1;
          }
          break;
        case 0xEuLL:
          if (!memcmp(v50, "air.write_only", v51))
          {
            int v59 = 1;
LABEL_167:
            HIDWORD(v104) = v59;
            break;
          }
          if (*v52 == 0x646165722E726961 && *(void *)((char *)v52 + 6) == 0x65746972775F6461)
          {
            LODWORD(v104) = 1;
            break;
          }
          if (memcmp(v52, "air.arg_unused", v53)) {
            break;
          }
          unsigned int v64 = *(_DWORD *)a1 & 0xFFFFFFF7;
          goto LABEL_187;
        case 0x11uLL:
          if (!memcmp(v50, "air.arg_type_name", v51))
          {
            double v77 = *(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8 * v49);
            unsigned int v49 = v20 + 2;
            *(void *)(a1 + 32) = llvm::MDString::getString(v77);
            *(void *)(a1 + 40) = v78;
          }
          else if (!memcmp(v52, "air.arg_type_size", v53))
          {
            uint64_t v82 = *(void *)(*(void *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8 * v49) + 128);
            v83 = (void *)(v82 + 24);
            if (*(_DWORD *)(v82 + 32) >= 0x41u) {
              v83 = (void *)*v83;
            }
            *(_DWORD *)(a1 + 56) = *v83;
LABEL_184:
            unsigned int v49 = v20 + 2;
          }
          else if (!memcmp(v52, "air.address_space", v53))
          {
            uint64_t v65 = *(void *)(*(void *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8 * v49) + 128);
            int v66 = (void *)(v65 + 24);
            if (*(_DWORD *)(v65 + 32) >= 0x41u) {
              int v66 = (void *)*v66;
            }
            int v103 = *(_DWORD *)v66;
          }
          break;
        case 0x12uLL:
          if (!memcmp(v50, "air.location_index", v51))
          {
            uint64_t v67 = v10 - 8 * *(unsigned int *)(v10 + 8);
            uint64_t v68 = *(void *)(*(void *)(v67 + 8 * v49) + 128);
            if (*(unsigned char *)(v68 + 16) == 16)
            {
              long long v69 = (void *)(v68 + 24);
              if (*(_DWORD *)(v68 + 32) >= 0x41u) {
                long long v69 = (void *)*v69;
              }
              int v70 = *(_DWORD *)v69;
            }
            else
            {
              int v70 = -1;
            }
            *(_DWORD *)(a1 + 4) = v70;
            uint64_t v84 = *(void *)(*(void *)(v67 + 8 * (v20 + 2)) + 128);
            if (*(unsigned char *)(v84 + 16) == 16)
            {
              v85 = (void *)(v84 + 24);
              if (*(_DWORD *)(v84 + 32) >= 0x41u) {
                v85 = (void *)*v85;
              }
              int v86 = *(_DWORD *)v85;
            }
            else
            {
              int v86 = -1;
            }
            *(_DWORD *)(a1 + 8) = v86;
            unsigned int v49 = v20 + 3;
          }
          break;
        case 0x14uLL:
          if (memcmp(v50, "air.struct_type_info", v51)) {
            break;
          }
          v108 = *(void **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8 * v49);
          __p[0] = v108;
          unsigned int v49 = v20 + 2;
          *(void *)(a1 + 72) = v108;
          uint64_t v111 = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(a7, __p, &v111) & 1) != 0&& (uint64_t v71 = *(void *)(v111 + 8)) != 0)
          {
            *(void *)(a1 + 160) = v71;
          }
          else
          {
            uint64_t v79 = *(void *)(a1 + 160);
            llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(a7, &v108)[1] = v79;
            parseStructTypeMetadata((uint64_t)v108, a5, a4, *(void *)(a1 + 160), (uint64_t)a7);
            uint64_t NonStructMember = findNonStructMember(*(void **)(a1 + 160));
            if (NonStructMember) {
              int v81 = (*(void *)(NonStructMember + 56) != 0) << 12;
            }
            else {
              int v81 = 0;
            }
            unsigned int v64 = *(_DWORD *)a1 & 0xFFFFEFFF | v81;
LABEL_187:
            *(_DWORD *)a1 = v64;
          }
          break;
        case 0x15uLL:
          if (!memcmp(v50, "air.imageblock_master", v51))
          {
            uint64_t v72 = *(void *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8 * v49);
            unsigned int v49 = v20 + 2;
            *(void *)(a1 + 192) = v72;
            parseStructTypeMetadata(v72, a5, a4, a1 + 200, (uint64_t)a7);
          }
          break;
        case 0x17uLL:
          if (memcmp(v50, "air.arg_type_align_size", v51)) {
            break;
          }
          uint64_t v73 = *(void *)(*(void *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8 * v49) + 128);
          __int16 v74 = (void *)(v73 + 24);
          if (*(_DWORD *)(v73 + 32) >= 0x41u) {
            __int16 v74 = (void *)*v74;
          }
          *(_DWORD *)(a1 + 52) = *v74;
          goto LABEL_184;
        case 0x18uLL:
          if (memcmp(v50, "air.imageblock_data_size", v51)) {
            break;
          }
          uint64_t v75 = *(void *)(*(void *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8 * v49) + 128);
          __int16 v76 = (void *)(v75 + 24);
          if (*(_DWORD *)(v75 + 32) >= 0x41u) {
            __int16 v76 = (void *)*v76;
          }
          *(_DWORD *)(a1 + 188) = *v76;
          goto LABEL_184;
        case 0x1DuLL:
          if (!memcmp(v50, "air.alias_implicit_imageblock", v51)) {
            *(unsigned char *)(a1 + 224) = 1;
          }
          break;
        default:
          if (v51 != 43 || memcmp(v50, "air.alias_implicit_imageblock_render_target", 0x2BuLL)) {
            break;
          }
          uint64_t v55 = *(void *)(*(void *)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8 * v49) + 128);
          if (*(unsigned char *)(v55 + 16) == 16)
          {
            int v56 = (void *)(v55 + 24);
            if (*(_DWORD *)(v55 + 32) >= 0x41u) {
              int v56 = (void *)*v56;
            }
            int v57 = *(_DWORD *)v56;
          }
          else
          {
            int v57 = -1;
          }
          *(_DWORD *)(a1 + 228) = v57;
          goto LABEL_184;
      }
    }
    unsigned int v20 = v49;
  }
  while (v49 < v13);
  a8 = v102;
  int v47 = v103;
  int v46 = v104;
  int v45 = HIDWORD(v104);
  if (v22) {
    goto LABEL_191;
  }
LABEL_204:
  int v94 = *(_DWORD *)a1;
  unsigned int v95 = *(_DWORD *)a1 & 0xFFFFF00E;
  *(_DWORD *)a1 = v95 | 1;
  switch(v23)
  {
    case 0:
      if (v47 == 2)
      {
        int v99 = 17;
      }
      else
      {
        if (v47 == 3)
        {
          int v96 = 561;
          goto LABEL_225;
        }
        int v99 = 33;
      }
      int v100 = v95 | v99;
      *(_DWORD *)a1 = v100;
      int v101 = v100 | 0x400;
      if (!v45) {
        int v101 = v100;
      }
      int v98 = v100 | 0x200;
      if (!v46) {
        int v98 = v101;
      }
      goto LABEL_226;
    case 1:
      *(_DWORD *)a1 = v95 | 0x41;
      if (v46)
      {
        int v96 = 577;
        goto LABEL_225;
      }
      if (v44) {
        return;
      }
      int v96 = 1089;
      goto LABEL_225;
    case 2:
      int v96 = 81;
      goto LABEL_225;
    case 3:
      int v97 = ((a4 & 7) << 9) | 0x81;
      goto LABEL_231;
    case 4:
      int v96 = 145;
      goto LABEL_225;
    case 5:
      int v96 = 161;
      goto LABEL_225;
    case 6:
      int v96 = 177;
      goto LABEL_225;
    case 7:
      int v96 = 193;
      goto LABEL_225;
    case 8:
      int v96 = 209;
      goto LABEL_225;
    case 9:
      int v96 = 225;
      goto LABEL_225;
    case 11:
      int v96 = 257;
      goto LABEL_225;
    case 12:
      int v96 = 273;
      goto LABEL_225;
    case 13:
      int v96 = 289;
      goto LABEL_225;
    case 14:
      int v96 = 305;
      goto LABEL_225;
    case 15:
      *(_DWORD *)a1 = v95 | 0x151;
      if (v46) {
        goto LABEL_223;
      }
      if (v45)
      {
        int v96 = 1361;
      }
      else
      {
        if (v44 || a8 != 6) {
          return;
        }
LABEL_223:
        int v96 = 849;
      }
LABEL_225:
      int v98 = v95 | v96;
LABEL_226:
      *(_DWORD *)a1 = v98;
      return;
    case 16:
      int v96 = 1376;
      goto LABEL_225;
    case 17:
      if ((v94 & 4) != 0) {
        int v97 = 96;
      }
      else {
        int v97 = 112;
      }
LABEL_231:
      int v98 = v97 | v95;
      goto LABEL_226;
    default:
      return;
  }
}

void sub_2556FEC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void dataTypeInfoFromString(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 >= 0x17)
  {
    uint64_t v7 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v7 = a2 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)a2;
    int64_t v31 = v8 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v31) = a2;
    uint64_t v6 = __dst;
    if (!a2) {
      goto LABEL_9;
    }
  }
  memmove(v6, a1, a2);
LABEL_9:
  *((unsigned char *)v6 + a2) = 0;
  if (v31 >= 0) {
    long long v9 = (const char *)__dst;
  }
  else {
    long long v9 = (const char *)__dst[0];
  }
  v32[0] = 0;
  uint64_t v33 = v9;
  v32[1] = strlen(v9);
  while (1)
  {
    NextToken = BasicParser::getNextToken((BasicParser *)v32);
    if (!NextToken) {
      goto LABEL_31;
    }
    uint64_t v11 = bufferTypeMap();
    std::string::basic_string[abi:ne180100]<0>(&__p, NextToken);
    uint64_t v12 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(v11, (const void **)&__p);
    if (SHIBYTE(v27) < 0) {
      operator delete(__p);
    }
    if (bufferTypeMap() + 8 == v12) {
      break;
    }
    if (*(_DWORD *)(v12 + 56) != 1)
    {
      LODWORD(NextToken) = 0;
      int v13 = 0;
      int v14 = *(_DWORD *)(v12 + 60);
      uint64_t v15 = *(void *)(v12 + 64);
      goto LABEL_32;
    }
  }
  uint64_t v16 = pixelFormatTypeMap();
  std::string::basic_string[abi:ne180100]<0>(&__p, NextToken);
  uint64_t v17 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(v16, (const void **)&__p);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p);
  }
  if (pixelFormatTypeMap() + 8 == v17)
  {
    LODWORD(NextToken) = 0;
LABEL_31:
    int v13 = 0;
    int v14 = 0;
    uint64_t v15 = 0;
    goto LABEL_32;
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(&__p, v17 + 56);
  int v13 = (int)__p;
  if ((v28 & 0x80u) == 0) {
    long long v18 = &v26;
  }
  else {
    long long v18 = v26;
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v19 = v28;
  }
  else {
    uint64_t v19 = v27;
  }
  dataTypeInfoFromString(&v23, v18, v19);
  int v14 = v29;
  uint64_t v21 = v24;
  NextToken = BasicParser::getNextToken((BasicParser *)v32);
  size_t v20 = strlen(NextToken);
  dataTypeInfoFromString(&v22, NextToken, v20);
  LODWORD(NextToken) = v22;
  uint64_t v15 = v21;
  if ((char)v28 < 0)
  {
    operator delete(v26);
    uint64_t v15 = v21;
  }
LABEL_32:
  *(_DWORD *)a3 = v14;
  *(void *)(a3 + 4) = v15;
  *(_DWORD *)(a3 + 12) = v13;
  *(_DWORD *)(a3 + 16) = NextToken;
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_2556FEF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0) {
    operator delete(a17);
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t bufferTypeMap(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&bufferTypeMapOnce, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    v2 = &v3;
    std::__call_once(&bufferTypeMapOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<bufferTypeMap(void)::$_0 &&>>);
  }
  return bufferTypeMap(void)::nonGlobalBufferTypeMap;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

char *BasicParser::getNextToken(BasicParser *this)
{
  uint64_t v2 = *(unsigned int *)this;
  unsigned int v1 = *((_DWORD *)this + 1);
  if (v2 < v1)
  {
    int v3 = (char *)(*((void *)this + 1) + v2);
    while (1)
    {
      unsigned int v4 = *v3++;
      uint64_t v5 = (1 << v4) & 0x5000144100000001;
      if (v4 > 0x3E || v5 == 0) {
        break;
      }
      LODWORD(v2) = v2 + 1;
      *(_DWORD *)this = v2;
      if (v1 == v2)
      {
        LODWORD(v2) = v1;
        goto LABEL_10;
      }
    }
  }
  if (v2 <= v1)
  {
LABEL_10:
    uint64_t v7 = 0;
    uint64_t v8 = *((void *)this + 1);
    while (*(char *)(v8 + (v2 + v7)) > 0x3E
         || ((1 << *(unsigned char *)(v8 + (v2 + v7))) & 0x5000144100000001) == 0)
    {
      if (v7 == 63)
      {
        uint64_t v12 = (char *)this + 16;
        *((unsigned char *)this + 79) = 0;
        return v12;
      }
      int v10 = v7 + 1;
      *((unsigned char *)this + v7 + 16) = *(unsigned char *)(v8 + (v2 + v7));
      *(_DWORD *)this = v2 + v7 + 1;
      unsigned int v11 = v2 + ++v7;
      if (v11 > v1)
      {
        if (!v10) {
          return 0;
        }
        return (char *)this + 16;
      }
    }
    *((unsigned char *)this + v7 + 16) = 0;
    if (v7) {
      return (char *)this + 16;
    }
  }
  return 0;
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*,MTLStructMemberInfo*,MTLStructMemberInfo*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo&>(a1, v4, v6);
      v6 += 11;
      uint64_t v4 = v12 + 176;
      v12 += 176;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2556FF44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo&>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  long long v6 = a3[1];
  long long v7 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)a2 = v5;
  uint64_t v8 = *((void *)a3 + 8);
  *(void *)(a2 + 56) = *((void *)a3 + 7);
  *(void *)(a2 + 64) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  long long v9 = *(long long *)((char *)a3 + 72);
  long long v10 = *(long long *)((char *)a3 + 88);
  *(void *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 72) = v9;
  *(_OWORD *)(a2 + 88) = v10;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>();
  __n128 result = (__n128)a3[8];
  long long v12 = a3[10];
  *(_OWORD *)(a2 + 144) = a3[9];
  *(_OWORD *)(a2 + 160) = v12;
  *(__n128 *)(a2 + 128) = result;
  return result;
}

void sub_2556FF500(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  long long v6 = a3[1];
  long long v7 = a3[2];
  *(_DWORD *)(a2 + 48) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)a2 = v5;
  uint64_t v8 = *((void *)a3 + 8);
  *(void *)(a2 + 56) = *((void *)a3 + 7);
  *(void *)(a2 + 64) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  long long v9 = *(long long *)((char *)a3 + 72);
  long long v10 = *(long long *)((char *)a3 + 88);
  *(void *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 72) = v9;
  *(_OWORD *)(a2 + 88) = v10;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>((void *)(a2 + 104), *((long long **)a3 + 13), *((long long **)a3 + 14), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a3 + 14) - *((void *)a3 + 13)) >> 4));
  __n128 result = (__n128)a3[8];
  long long v12 = a3[10];
  *(_OWORD *)(a2 + 144) = a3[9];
  *(_OWORD *)(a2 + 160) = v12;
  *(__n128 *)(a2 + 128) = result;
  return result;
}

void sub_2556FF5B8(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<MTLStructMemberInfo>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*,MTLStructMemberInfo*,MTLStructMemberInfo*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2556FF638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<MTLStructMemberInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745ELL) {
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLStructMemberInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[176 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::__function::__value_func<void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t dataTypeFromString(const void *a1, size_t a2, _DWORD *a3, _DWORD *a4)
{
  dataTypeInfoFromString(a1, a2, (uint64_t)v7);
  uint64_t result = v7[0];
  if (a3) {
    *a3 = v7[1];
  }
  if (a4) {
    *a4 = v7[2];
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  long long v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(a1, a2, &v7);
  long long v5 = v7;
  if ((v4 & 1) == 0)
  {
    long long v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::InsertIntoBucketImpl<llvm::Function *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *long long v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    long long v7 = (void *)(*a1 + 16 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        long long v7 = (void *)(v4 + 16 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        long long v7 = v10;
      }
    }
  }
  else
  {
    long long v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::InsertIntoBucketImpl<llvm::Function *>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (void *)MEMORY[0x25A28D370](16 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::moveFromOldBuckets(a1, v4, (void *)v4 + 2 * v3);
    return (void *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        void *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t findNonStructMember(void *a1)
{
  uint64_t v1 = (void *)a1[1];
  if ((void *)*a1 == v1) {
    return 0;
  }
  for (i = (void *)(*a1 + 104); i[1] != *i; i += 22)
  {
    uint64_t result = findNonStructMember(i);
    if (result) {
      return result;
    }
    uint64_t v4 = i + 9;
    if (v4 == v1) {
      return 0;
    }
  }
  return (uint64_t)(i - 13);
}

void *MTLGenerateReflectionDataPass::generateReflectionData(uint64_t a1, llvm::Module *a2, char a3, void *a4, int a5, void *a6, const void *a7, size_t a8, uint64_t *a9)
{
  v194[15] = *MEMORY[0x263EF8340];
  if ((a3 & 1) == 0) {
    return 0;
  }
  memset(v142, 0, sizeof(v142));
  parseFunctions(a2, v142);
  uint64_t v14 = v142[0];
  uint64_t v140 = 0;
  uint64_t v139 = 0;
  uint64_t v141 = 0;
  uint64_t v15 = *(int *)(v142[0] + 48);
  uint64_t v16 = entryPointsType[v15];
  v137 = 0;
  uint64_t v136 = 0;
  unint64_t v138 = 0;
  uint64_t v17 = *(void *)(v142[0] + 24);
  BOOL v18 = v16 != 5 || v17 == 0;
  size_t __n = a8;
  uint64_t v101 = v16;
  int v99 = a4;
  if (v18)
  {
    unint64_t v104 = v16 & 0xFFFFFFFFFFFFFFFDLL;
    BOOL v18 = (v16 & 0xFFFFFFFFFFFFFFFDLL) == 1;
    uint64_t v19 = &v139;
    if (!v18) {
      uint64_t v19 = 0;
    }
    int v96 = v19;
    unint64_t v134 = 0;
    v133 = 0;
    uint64_t v132 = 0;
    uint64_t v20 = *(void *)(v142[0] + 8);
    if (v20) {
      unsigned int v21 = *(_DWORD *)(v20 + 8);
    }
    else {
      unsigned int v21 = 0;
    }
    uint64_t v26 = *(void *)v142[0];
    if (*(_WORD *)(*(void *)v142[0] + 18))
    {
      llvm::Function::BuildLazyArguments(*(llvm::Function **)v142[0]);
      LODWORD(v15) = *(_DWORD *)(v14 + 48);
    }
    if (!v21)
    {
      int v102 = -1;
LABEL_83:
      unsigned int v24 = 954437177 * (((uint64_t)v133 - v132) >> 5);
      if (v24)
      {
        uint64_t v44 = 0;
        int v45 = v137;
        do
        {
          if ((unint64_t)v45 >= v138)
          {
            int v45 = (long long *)std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(&v136, (long long *)(v132 + v44));
          }
          else
          {
            std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)&v138, (uint64_t)v45, (long long *)(v132 + v44));
            v45 += 18;
          }
          v137 = v45;
          v44 += 288;
        }
        while (288 * v24 != v44);
      }
      *(void *)&long long v172 = &v132;
      std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
      uint64_t v132 = 0;
      v133 = &v132;
      unint64_t v134 = 0x2020000000;
      if ((v101 | 2) == 3)
      {
        uint64_t v25 = 0x38E38E38E38E38E4 * ((v140 - v139) >> 5) + 16;
        uint64_t v135 = v25;
      }
      else
      {
        uint64_t v25 = 12;
      }
      goto LABEL_92;
    }
    char v92 = a3;
    uint64_t v27 = 0;
    uint64_t v28 = *(void *)(v26 + 88);
    if (v104 == 1) {
      int v29 = &v140;
    }
    else {
      int v29 = (uint64_t *)8;
    }
    if (v104 == 1) {
      uint64_t v30 = (uint64_t)&v141;
    }
    else {
      uint64_t v30 = 16;
    }
    uint64_t v31 = 8 * v21;
    int v102 = -1;
    while (1)
    {
      long long v32 = (void *)v30;
      uint64_t v33 = *(void *)(*(void *)(v14 + 8) - 8 * *(unsigned int *)(*(void *)(v14 + 8) + 8) + v27);
      DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(void *)v14 + 40));
      llvm::DataLayout::DataLayout((llvm::DataLayout *)&v172, DataLayout);
      MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v148);
      v117 = 0;
      v118 = 0;
      LODWORD(v119) = 0;
      parseArgumentMetadata((uint64_t)&v148, v33, v28, 0, (uint64_t)&v172, 0, (uint64_t *)&v117, v15);
      if ((v148 & 1) == 0)
      {
        if ((v148 & 4) != 0)
        {
          LODWORD(v148) = v148 | 8;
          uint64_t v38 = (uint64_t)v133;
          if ((unint64_t)v133 >= v134)
          {
            uint64_t v39 = std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(&v132, &v148);
          }
          else
          {
            std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)&v134, (uint64_t)v133, &v148);
            uint64_t v39 = v38 + 288;
          }
          uint64_t v30 = (uint64_t)v32;
          v133 = (uint64_t *)v39;
        }
        else
        {
          uint64_t v30 = (uint64_t)v32;
          if (v104 == 1 && (v148 & 0xA) == 0xA)
          {
            uint64_t v35 = *v29;
            if ((unint64_t)*v29 >= *v32)
            {
              uint64_t v36 = std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(v96, &v148);
            }
            else
            {
              std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)v32, *v29, &v148);
              uint64_t v36 = v35 + 288;
              uint64_t *v29 = v35 + 288;
            }
            uint64_t v30 = (uint64_t)v32;
            uint64_t *v29 = v36;
          }
        }
        goto LABEL_72;
      }
      if (((v148 >> 4) & 0x1F) - 9 <= 1) {
        LODWORD(v148) = v148 | 8;
      }
      if (!__len[0]) {
        goto LABEL_68;
      }
      std::string::basic_string[abi:ne180100](&__p, (void *)__len[0], __len[1]);
      if (SHIBYTE(v145) < 0)
      {
        if (v144 != (void *)12)
        {
          operator delete(__p);
LABEL_68:
          uint64_t v42 = v137;
          if ((unint64_t)v137 >= v138) {
            goto LABEL_70;
          }
          goto LABEL_69;
        }
        BOOL v41 = *(void *)__p != 0x75622E6563617274 || *((_DWORD *)__p + 2) != 1919247974;
        operator delete(__p);
        if (v41) {
          goto LABEL_68;
        }
      }
      else
      {
        if (SHIBYTE(v145) != 12) {
          goto LABEL_68;
        }
        if (__p != (void *)0x75622E6563617274 || v144 != 1919247974) {
          goto LABEL_68;
        }
      }
      int v102 = DWORD1(v148);
      if (v92 < 0)
      {
        uint64_t v30 = (uint64_t)v32;
        goto LABEL_72;
      }
      uint64_t v42 = v137;
      if ((unint64_t)v137 >= v138)
      {
LABEL_70:
        v43 = (long long *)std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(&v136, &v148);
        goto LABEL_71;
      }
LABEL_69:
      std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)&v138, (uint64_t)v137, &v148);
      v43 = v42 + 18;
LABEL_71:
      uint64_t v30 = (uint64_t)v32;
      v137 = v43;
LABEL_72:
      llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&v117);
      v117 = (void ***)&v164;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
      if (v160) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v160);
      }
      if (v158) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v158);
      }
      if (v156) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v156);
      }
      v28 += 40;
      MEMORY[0x25A28CD60](&v172);
      v27 += 8;
      if (v31 == v27) {
        goto LABEL_83;
      }
    }
  }
  StitchingReflection::StitchingReflection((uint64_t)&v172, v17);
  std::vector<MTLArgumentData>::__insert_with_size[abi:ne180100]<std::__wrap_iter<MTLArgumentData const*>,std::__wrap_iter<MTLArgumentData const*>>(&v136, v137, (long long *)v172, *((long long **)&v172 + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)&v172 + 1) - v172) >> 5));
  uint64_t v22 = v137;
  if ((unint64_t)v137 >= v138)
  {
    char v23 = (long long *)std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(&v136, (long long *)((char *)&v173 + 8));
  }
  else
  {
    std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)&v138, (uint64_t)v137, (long long *)((char *)&v173 + 8));
    char v23 = v22 + 18;
  }
  v137 = v23;
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table((uint64_t)v194);
  *(void *)&long long v148 = &v190;
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
  if ((void)v186) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v186);
  }
  if ((void)v185) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v185);
  }
  if (v183) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v183);
  }
  *(void *)&long long v148 = &v172;
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
  unsigned int v24 = 0;
  uint64_t v132 = 0;
  v133 = &v132;
  unint64_t v134 = 0x2020000000;
  uint64_t v25 = 12;
  uint64_t v135 = 12;
  int v102 = -1;
LABEL_92:
  unsigned int v105 = v24;
  uint64_t v135 = v25 + 8;
  uint64_t v145 = 0;
  v144 = 0;
  __p = &v144;
  v131[0] = MEMORY[0x263EF8330];
  v131[1] = 3221225472;
  v131[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke;
  v131[3] = &unk_2653C28C0;
  v131[4] = &v132;
  v130[0] = MEMORY[0x263EF8330];
  v130[1] = 3221225472;
  v130[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_2;
  v130[3] = &unk_2653C28E8;
  v130[4] = &v132;
  serializeArguments(&v136, (uint64_t)&__p, (uint64_t)v131, (uint64_t)v130);
  uint64_t v46 = entryPointsType[*(int *)(v14 + 48)];
  uint64_t v98 = v133[3];
  if (v46 == 2)
  {
    v133[3] += 4;
    MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v172);
    extractOutputImageBlockDataFromMetadata((FunctionDesc *)v14, (MTLArgumentData *)&v172);
    if ((v172 & 0x1F0) == 0x90)
    {
      long long v153 = v177;
      long long v154 = v178;
      long long v148 = v172;
      *(_OWORD *)__len = v173;
      long long v151 = v175;
      long long v152 = v176;
      long long v150 = v174;
      uint64_t v155 = v179;
      v156 = v180;
      if (v180) {
        atomic_fetch_add_explicit(&v180->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v157 = v181;
      v158 = v182;
      if (v182) {
        atomic_fetch_add_explicit(&v182->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v159 = v183;
      v160 = v184;
      if (v184) {
        atomic_fetch_add_explicit(&v184->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v161 = v185;
      long long v162 = v186;
      uint64_t v163 = v187;
      uint64_t v164 = 0;
      uint64_t v166 = 0;
      uint64_t v165 = 0;
      std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(&v164, v188, v189, 0x2E8BA2E8BA2E8BA3 * (v189 - v188));
      long long v167 = v190;
      long long v168 = v191;
      long long v169 = v192;
      long long v170 = v193;
      v118 = 0;
      uint64_t v119 = 0;
      v117 = 0;
      v123 = (void ***)&v117;
      LOBYTE(v124) = 0;
      v117 = (void ***)operator new(0x120uLL);
      v118 = v117;
      uint64_t v119 = (uint64_t)(v117 + 36);
      v118 = (void ***)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLArgumentData>,MTLArgumentData const*,MTLArgumentData const*,MTLArgumentData*>((uint64_t)&v119, &v148, (long long *)&v171, (uint64_t)v117);
      v123 = (void ***)&v164;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
      if (v160) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v160);
      }
      if (v158) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v158);
      }
      if (v156) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v156);
      }
      v129[0] = MEMORY[0x263EF8330];
      v129[1] = 3221225472;
      v129[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_3;
      v129[3] = &unk_2653C28C0;
      v129[4] = &v132;
      v128[0] = MEMORY[0x263EF8330];
      v128[1] = 3221225472;
      v128[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_4;
      v128[3] = &unk_2653C28E8;
      v128[4] = &v132;
      serializeArguments((uint64_t *)&v117, (uint64_t)&__p, (uint64_t)v129, (uint64_t)v128);
      *(void *)&long long v148 = &v117;
      std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
      char v93 = 1;
    }
    else
    {
      char v93 = 0;
    }
    *(void *)&long long v148 = &v188;
    std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
    if (v184) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v184);
    }
    if (v182) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v182);
    }
    if (v180) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v180);
    }
    uint64_t v46 = entryPointsType[*(int *)(v14 + 48)];
  }
  else
  {
    char v93 = 0;
  }
  if ((v46 | 2) == 3)
  {
    v133[3] += 8;
    v127[0] = MEMORY[0x263EF8330];
    v127[1] = 3221225472;
    v127[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_5;
    v127[3] = &unk_2653C28C0;
    v127[4] = &v132;
    v126[0] = MEMORY[0x263EF8330];
    v126[1] = 3221225472;
    v126[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_6;
    v126[3] = &unk_2653C28E8;
    v126[4] = &v132;
    serializePostVertexDumpOutputs(a6, (uint64_t)v127, (uint64_t)v126);
  }
  uint64_t v47 = (uint64_t)v133;
  uint64_t v48 = v133[3];
  uint64_t v49 = v48;
  if (a9)
  {
    *a9 = v48;
    uint64_t v49 = *(void *)(v47 + 24);
  }
  uint64_t v50 = __n + v49 + 8;
  *(void *)(v47 + 24) = v50;
  uint64_t v97 = entryPointsType[*(int *)(v14 + 48)];
  if (v97 == 6) {
    *(void *)(v47 + 24) = v50 + ((uint64_t)(*(void *)(v14 + 104) - *(void *)(v14 + 96)) >> 1) + 8;
  }
  v124 = 0;
  v123 = 0;
  unint64_t v125 = 0;
  *(void *)&long long v172 = "air.global_bindings";
  LOWORD(v174) = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)&v172);
  v52 = NamedMetadata;
  if (NamedMetadata)
  {
    long long v172 = 0uLL;
    LODWORD(v173) = 0;
    unsigned int NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    std::vector<MTLArgumentData>::reserve((uint64_t *)&v123, NumOperands);
    int v54 = llvm::NamedMDNode::getNumOperands(v52);
    if (v54)
    {
      for (int i = 0; i != v54; ++i)
      {
        uint64_t Operand = llvm::NamedMDNode::getOperand(v52);
        uint64_t v57 = Operand - 8 * *(unsigned int *)(Operand + 8);
        uint64_t v58 = *(void *)(v57 + 16);
        uint64_t v59 = *(void *)(*(void *)(v57 + 8) + 128);
        int v60 = v124;
        if ((unint64_t)v124 >= v125)
        {
          int v61 = (MTLArgumentData *)std::vector<MTLArgumentData>::__emplace_back_slow_path<>((uint64_t *)&v123);
        }
        else
        {
          MTLArgumentData::MTLArgumentData(v124);
          int v61 = (MTLArgumentData *)((char *)v60 + 288);
        }
        v124 = v61;
        uint64_t v62 = llvm::Module::getDataLayout(a2);
        parseArgumentMetadata((uint64_t)v61 - 288, v58, v59, 0, v62, 0, (uint64_t *)&v172, 7);
      }
    }
    llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&v172);
  }
  v133[3] += 4;
  v122[0] = MEMORY[0x263EF8330];
  v122[1] = 3221225472;
  v122[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_7;
  v122[3] = &unk_2653C28C0;
  v122[4] = &v132;
  v121[0] = MEMORY[0x263EF8330];
  v121[1] = 3221225472;
  v121[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_8;
  v121[3] = &unk_2653C28E8;
  v121[4] = &v132;
  serializeArguments((uint64_t *)&v123, (uint64_t)&__p, (uint64_t)v122, (uint64_t)v121);
  size_t v63 = v133[3];
  uint64_t v9 = malloc_type_malloc(v63, 0x8011A049uLL);
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)&__p, v144);
  uint64_t v145 = 0;
  __p = &v144;
  v144 = 0;
  v117 = 0;
  v118 = (void ***)&v117;
  uint64_t v119 = 0x2020000000;
  v120 = v9;
  void *v9 = 0x4E494253504C544DLL;
  unsigned int v64 = v118;
  ++v120;
  *(_DWORD *)v118[3] = 0x20000;
  v64[3] = (void **)((char *)v64[3] + 4);
  if ((v101 | 2) == 3)
  {
    unint64_t v65 = 0x8E38E38E38E38E39 * ((v140 - v139) >> 5);
    int v66 = v118;
    *(_DWORD *)v118[3] = v65;
    v66[3] = (void **)((char *)v66[3] + 4);
    uint64_t v67 = v65;
    if (v65)
    {
      uint64_t v68 = 0;
      uint64_t v69 = 288 * v67;
      do
      {
        int v70 = v118;
        *(_DWORD *)v118[3] = *(_DWORD *)(v139 + v68 + 4);
        v70[3] = (void **)((char *)v70[3] + 4);
        v68 += 288;
      }
      while (v69 != v68);
    }
  }
  uint64_t v71 = v118;
  *(_DWORD *)v118[3] = v105;
  v71[3] = (void **)((char *)v71[3] + 4);
  uint64_t v72 = v118;
  *(_DWORD *)v118[3] = v98;
  v72[3] = (void **)((char *)v72[3] + 4);
  v115[4] = &v117;
  v116[0] = MEMORY[0x263EF8330];
  v116[1] = 3221225472;
  v116[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_9;
  v116[3] = &unk_2653C28C0;
  v116[4] = &v117;
  v115[0] = MEMORY[0x263EF8330];
  v115[1] = 3221225472;
  v115[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_10;
  v115[3] = &unk_2653C28E8;
  serializeArguments(&v136, (uint64_t)&__p, (uint64_t)v116, (uint64_t)v115);
  if (entryPointsType[*(int *)(v14 + 48)] == 2)
  {
    uint64_t v73 = v118;
    __int16 v74 = v118[3];
    *(unsigned char *)__int16 v74 = v93;
    *(_WORD *)((char *)v74 + 1) = 0;
    *((unsigned char *)v74 + 3) = 0;
    v73[3] = (void **)((char *)v73[3] + 4);
    MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v172);
    extractOutputImageBlockDataFromMetadata((FunctionDesc *)v14, (MTLArgumentData *)&v172);
    if ((v172 & 0x1F0) == 0x90)
    {
      long long v153 = v177;
      long long v154 = v178;
      long long v148 = v172;
      *(_OWORD *)__len = v173;
      long long v151 = v175;
      long long v152 = v176;
      long long v150 = v174;
      uint64_t v155 = v179;
      v156 = v180;
      if (v180) {
        atomic_fetch_add_explicit(&v180->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v157 = v181;
      v158 = v182;
      if (v182) {
        atomic_fetch_add_explicit(&v182->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v159 = v183;
      v160 = v184;
      if (v184) {
        atomic_fetch_add_explicit(&v184->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v161 = v185;
      long long v162 = v186;
      uint64_t v163 = v187;
      uint64_t v164 = 0;
      uint64_t v166 = 0;
      uint64_t v165 = 0;
      std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(&v164, v188, v189, 0x2E8BA2E8BA2E8BA3 * (v189 - v188));
      long long v167 = v190;
      long long v168 = v191;
      long long v169 = v192;
      long long v170 = v193;
      uint64_t v113 = 0;
      v114 = 0;
      v112 = 0;
      v146 = &v112;
      char v147 = 0;
      v112 = (char *)operator new(0x120uLL);
      uint64_t v113 = (uint64_t)v112;
      v114 = v112 + 288;
      uint64_t v113 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLArgumentData>,MTLArgumentData const*,MTLArgumentData const*,MTLArgumentData*>((uint64_t)&v114, &v148, (long long *)&v171, (uint64_t)v112);
      v146 = (char **)&v164;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
      if (v160) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v160);
      }
      if (v158) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v158);
      }
      if (v156) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v156);
      }
      v111[0] = MEMORY[0x263EF8330];
      v111[1] = 3221225472;
      v111[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_11;
      v111[3] = &unk_2653C28C0;
      v111[4] = &v117;
      v110[0] = MEMORY[0x263EF8330];
      v110[1] = 3221225472;
      v110[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_12;
      v110[3] = &unk_2653C28E8;
      v110[4] = &v117;
      serializeArguments((uint64_t *)&v112, (uint64_t)&__p, (uint64_t)v111, (uint64_t)v110);
      *(void *)&long long v148 = &v112;
      std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
    }
    *(void *)&long long v148 = &v188;
    std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
    if (v184) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v184);
    }
    if (v182) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v182);
    }
    if (v180) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v180);
    }
  }
  if ((v46 | 2) == 3)
  {
    uint64_t v75 = v118;
    *(_DWORD *)v118[3] = a5;
    v75[3] = (void **)((char *)v75[3] + 4);
    __int16 v76 = v118;
    *(_DWORD *)v118[3] = v48;
    v76[3] = (void **)((char *)v76[3] + 4);
    v109[0] = MEMORY[0x263EF8330];
    v109[1] = 3221225472;
    v109[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_13;
    v109[3] = &unk_2653C28C0;
    v109[4] = &v117;
    v108[0] = MEMORY[0x263EF8330];
    v108[1] = 3221225472;
    v108[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_14;
    v108[3] = &unk_2653C28E8;
    v108[4] = &v117;
    serializePostVertexDumpOutputs(a6, (uint64_t)v109, (uint64_t)v108);
  }
  double v77 = v118;
  *(_DWORD *)v118[3] = v102;
  v77[3] = (void **)((char *)v77[3] + 4);
  uint64_t v78 = v118;
  *(_DWORD *)v118[3] = __n;
  v78[3] = (void **)((char *)v78[3] + 4);
  if (__n)
  {
    uint64_t v79 = v118;
    memcpy(v118[3], a7, __n);
    v79[3] = (void **)((char *)v79[3] + __n);
  }
  if (v97 == 6)
  {
    v80 = v118;
    int v81 = v118[3];
    *(unsigned char *)int v81 = *(unsigned char *)(v14 + 70) & 3;
    *(_WORD *)((char *)v81 + 1) = 0;
    *((unsigned char *)v81 + 3) = 0;
    v80[3] = (void **)((char *)v80[3] + 4);
    unint64_t v82 = *(void *)(v14 + 104) - *(void *)(v14 + 96);
    v83 = v118;
    uint64_t v84 = v118[3];
    *(unsigned char *)uint64_t v84 = v82 >> 3;
    *((unsigned char *)v84 + 1) = v82 >> 11;
    *((unsigned char *)v84 + 2) = v82 >> 19;
    *((unsigned char *)v84 + 3) = v82 >> 27;
    v83[3] = (void **)((char *)v83[3] + 4);
    uint64_t v85 = *(void *)(v14 + 96);
    if (*(void *)(v14 + 104) != v85)
    {
      unint64_t v86 = 0;
      unsigned int v87 = 1;
      do
      {
        uint64_t v88 = *(void *)(v85 + 8 * v86);
        int v89 = v118;
        *(_DWORD *)v118[3] = v88;
        v89[3] = (void **)((char *)v89[3] + 4);
        unint64_t v86 = v87;
        uint64_t v85 = *(void *)(v14 + 96);
        ++v87;
      }
      while (v86 < (*(void *)(v14 + 104) - v85) >> 3);
    }
  }
  v90 = v118;
  *(_DWORD *)v118[3] = v63;
  v90[3] = (void **)((char *)v90[3] + 4);
  v107[0] = MEMORY[0x263EF8330];
  v107[1] = 3221225472;
  v107[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_15;
  v107[3] = &unk_2653C28C0;
  v107[4] = &v117;
  v106[0] = MEMORY[0x263EF8330];
  v106[1] = 3221225472;
  v106[2] = ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_16;
  v106[3] = &unk_2653C28E8;
  v106[4] = &v117;
  serializeArguments((uint64_t *)&v123, (uint64_t)&__p, (uint64_t)v107, (uint64_t)v106);
  *int v99 = v133[3];
  _Block_object_dispose(&v117, 8);
  *(void *)&long long v172 = &v123;
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)&__p, v144);
  _Block_object_dispose(&v132, 8);
  *(void *)&long long v172 = &v136;
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
  *(void *)&long long v172 = &v139;
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
  *(void *)&long long v172 = v142;
  std::vector<FunctionDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
  return v9;
}

void sub_255700EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x358] = v64;
  llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&a64);
  MTLArgumentData::~MTLArgumentData((MTLArgumentData *)&STACK[0x3C0]);
  MEMORY[0x25A28CD60](&STACK[0x4E8]);
  STACK[0x4E8] = (unint64_t)&STACK[0x330];
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4E8]);
  STACK[0x3C0] = (unint64_t)&STACK[0x350];
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3C0]);
  STACK[0x3C0] = (unint64_t)&STACK[0x368];
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3C0]);
  STACK[0x3C0] = (unint64_t)&STACK[0x380];
  std::vector<FunctionDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::__shared_ptr_emplace<std::vector<MTLStructMemberInfo>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v7 = v4 - 72;
        std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v7);
        unint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 14);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 176;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void MTLArgumentData::MTLArgumentData(MTLArgumentData *this)
{
  *(_DWORD *)this &= 0x1000u;
  *(_OWORD *)((char *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *((_OWORD *)this + 6) = 0u;
  uint64_t v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v3 = v2 + 3;
  void *v2 = &unk_270453F38;
  v2[4] = 0;
  v2[5] = 0;
  *((void *)this + 14) = v2 + 3;
  *((void *)this + 15) = v2;
  uint64_t v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_270453F38;
  v4[3] = 0;
  unint64_t v5 = v4 + 3;
  v4[4] = 0;
  v4[5] = 0;
  *((void *)this + 16) = v4 + 3;
  *((void *)this + 17) = v4;
  unint64_t v6 = operator new(0x30uLL);
  v6[1] = 0;
  v6[2] = 0;
  *unint64_t v6 = &unk_270453F38;
  v6[4] = 0;
  v6[5] = 0;
  v6[3] = 0;
  *((void *)this + 18) = v6 + 3;
  *((void *)this + 19) = v6;
  *((void *)this + 20) = v3;
  *((void *)this + 21) = v5;
  *((void *)this + 22) = v6 + 3;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 209) = 0u;
  *((_DWORD *)this + 57) = -1;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 35) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
}

void sub_255701390(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (*(void *)(v1 + 120)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v1 + 120));
  }
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap(uint64_t a1)
{
  return a1;
}

llvm::DataLayout *llvm::DataLayout::DataLayout(llvm::DataLayout *this, const llvm::DataLayout *a2)
{
  *((_WORD *)this + 4) = 0;
  *((_WORD *)this + 10) = 0;
  *((void *)this + 4) = (char *)this + 56;
  *(_OWORD *)((char *)this + 40) = xmmword_2557AA0E0;
  *((void *)this + 8) = (char *)this + 80;
  *((void *)this + 26) = 0;
  *((void *)this + 9) = 0x1000000000;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = (char *)this + 248;
  *((void *)this + 30) = 0x800000000;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = (char *)this + 400;
  *((void *)this + 49) = 0x800000000;
  llvm::DataLayout::operator=((uint64_t)this, (uint64_t)a2);
  return this;
}

void sub_25570148C(_Unwind_Exception *exception_object)
{
  int v7 = v2;
  uint64_t v9 = *(void **)(v1 + 384);
  if (v9 != v7) {
    free(v9);
  }
  uint64_t v10 = *(void **)(v1 + 232);
  if (v10 != v6) {
    free(v10);
  }
  if (*(char *)(v1 + 231) < 0) {
    operator delete(*v5);
  }
  uint64_t v11 = *(void **)(v1 + 64);
  if (v11 != v4) {
    free(v11);
  }
  BOOL v12 = *(void **)(v1 + 32);
  if (v12 != v3) {
    free(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::DataLayout::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  llvm::SmallVectorImpl<unsigned char>::operator=(a1 + 32, a2 + 32);
  llvm::SmallVectorImpl<llvm::LayoutAlignElem>::operator=(a1 + 64, a2 + 64);
  llvm::SmallVectorImpl<llvm::PointerAlignElem>::operator=(a1 + 232, a2 + 232);
  llvm::SmallVectorImpl<unsigned int>::operator=(a1 + 384, a2 + 384);
  return a1;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 4 * v5);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 4 * v5), (const void *)(*(void *)a2 + 4 * v5), *(void *)a2 + 4 * v6 - (*(void *)a2 + 4 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

{
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      int v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v6)
      {
        if (v6) {
          memmove(*(void **)a1, v4, 4 * v6);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v6)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7) {
          memmove(*(void **)a1, v4, 4 * v7);
        }
        else {
          int v7 = 0;
        }
        unsigned int v8 = *(unsigned int *)(a2 + 8);
        if (v7 != v8) {
          memcpy((void *)(*(void *)a1 + 4 * v7), (const void *)(*(void *)a2 + 4 * v7), *(void *)a2 + 4 * v8 - (*(void *)a2 + 4 * v7));
        }
      }
      *(_DWORD *)(a1 + 8) = v6;
      *(_DWORD *)(a2 + 8) = 0;
    }
    else
    {
      llvm::SmallVectorImpl<unsigned int>::assignRemote(a1, a2);
    }
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<unsigned char>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    size_t v4 = *(void *)(a2 + 8);
    size_t v5 = *(void *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, v4);
      }
    }
    else
    {
      if (*(void *)(a1 + 16) < v4)
      {
        *(void *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, *(void *)(a1 + 8));
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + v5), (const void *)(*(void *)a2 + v5), *(void *)a2 + v6 - (*(void *)a2 + v5));
      }
    }
    *(void *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::PointerAlignElem>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 16 * v5);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 16 * v5), (const void *)(*(void *)a2 + 16 * v5), *(void *)a2 + 16 * v6 - (*(void *)a2 + 16 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::LayoutAlignElem>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v4 - 2);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5 - 2);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 8 * v5), (const void *)(*(void *)a2 + 8 * v5), *(void *)a2 + 8 * v6 - (*(void *)a2 + 8 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 288;
        std::allocator<MTLArgumentData>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<MTLArgumentData>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void **)(a2 + 200);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 152);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 136);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 120);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t serializeArguments(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  unint64_t v10 = 0x8E38E38E38E38E39 * ((v8 - *a1) >> 5);
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(a3 + 16))(a3, v10);
  if (v8 != v9)
  {
    uint64_t v31 = a2;
    uint64_t v12 = 0;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    unint64_t v13 = v10;
    do
    {
      uint64_t v14 = *a1;
      uint64_t v15 = (unsigned int *)(*a1 + v12);
      (*(void (**)(uint64_t, unsigned int *))(a4 + 16))(a4, v15 + 4);
      (*(void (**)(uint64_t, void))(a3 + 16))(a3, (*v15 << 6) & 0x200 | (*v15 >> 4));
      unsigned int v16 = *v15;
      if ((*v15 & 4) == 0)
      {
        (*(void (**)(uint64_t, void))(a3 + 16))(a3, v15[1]);
        (*(void (**)(uint64_t, void))(a3 + 16))(a3, v15[2]);
        unsigned int v16 = *v15;
      }
      switch((v16 >> 4) & 0x1F)
      {
        case 1u:
        case 2u:
        case 3u:
        case 8u:
        case 0xEu:
        case 0x15u:
          uint64_t v17 = (unsigned int *)(v14 + v12);
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v14 + v12 + 48));
          uint64_t v18 = *(unsigned int *)(v14 + v12 + 236);
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, v17[58]);
          (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v18);
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, v17[13]);
          uint64_t v19 = v17[14];
          goto LABEL_23;
        case 4u:
          LODWORD(v32[0]) = 0;
          unsigned __int8 v34 = 0;
          uint64_t v20 = *(char **)(v14 + v12 + 32);
          size_t v21 = strlen(v20);
          LODWORD(v20) = textureTypeFromString(v20, v21, v32, &v34);
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, LODWORD(v32[0]));
          uint64_t v19 = v20 | (v34 << 16);
          goto LABEL_23;
        case 5u:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
          break;
        case 6u:
          uint64_t v22 = v14 + v12;
          char v23 = *(const char **)(v14 + v12 + 32);
          size_t v24 = strlen(v23);
          uint64_t v25 = dataTypeFromString(v23, v24);
          (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v25);
          uint64_t v19 = *(unsigned int *)(v22 + 12);
          goto LABEL_23;
        case 9u:
          uint64_t v26 = v14 + v12;
          goto LABEL_13;
        case 0xAu:
          uint64_t v26 = v14 + v12;
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v14 + v12 + 184));
LABEL_13:
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v26 + 188));
          if (*(void *)(v26 + 192)) {
            serializeStructInfo((char *)(v26 + 200), v31, a3, a4, 0);
          }
          else {
            (*(void (**)(uint64_t, void))(a3 + 16))(a3, 0);
          }
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned __int8 *)(v14 + v12 + 224));
          uint64_t v19 = *(unsigned int *)(v14 + v12 + 228);
LABEL_23:
          (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v19);
          break;
        case 0x14u:
          v32[0] = *(_OWORD *)(v14 + v12 + 240);
          v32[1] = *(_OWORD *)(v14 + v12 + 256);
          long long v33 = *(_OWORD *)(v14 + v12 + 272);
          serializeStitchingTypeInfo((unsigned int *)v32, a3);
          if (LODWORD(v32[0]) == 1 || LODWORD(v32[0]) == 138 || LODWORD(v32[0]) == 60 && HIDWORD(v32[0]) == 1) {
            serializeStitchingStructInfo(*(void **)(v14 + v12 + 160), v33, *((uint64_t *)&v33 + 1), a3, a4);
          }
          break;
        case 0x16u:
          uint64_t v27 = dataTypeFromString("mesh", 4uLL);
          (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v27);
          uint64_t v28 = v14 + v12;
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v14 + v12 + 12));
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v14 + v12 + 60));
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v14 + v12 + 64));
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v14 + v12 + 68));
          serializeStructInfo(*(char **)(v28 + 168), v31, a3, a4, (*(_DWORD *)v28 >> 12) & 1);
          serializeStructInfo(*(char **)(v28 + 176), v31, a3, a4, (*(_DWORD *)v28 >> 12) & 1);
          break;
        default:
          abort();
      }
      v12 += 288;
      --v13;
    }
    while (v13);
    uint64_t v29 = 0;
    do
    {
      uint64_t v30 = *a1 + v29;
      if (*(void *)(v30 + 72)) {
        uint64_t result = serializeStructInfo(*(char **)(v30 + 160), v31, a3, a4, (*(_DWORD *)v30 >> 12) & 1);
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0);
      }
      v29 += 288;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t serializeStructInfo(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  *(void *)&long long v61 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void **)(a2 + 8);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = (void *)(a2 + 8);
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= (unint64_t)a1;
    if (v10 >= (unint64_t)a1) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = v8;
    }
    uint64_t v8 = (void *)*v12;
  }
  while (*v12);
  if (v9 != (void *)(a2 + 8) && v9[4] <= (unint64_t)a1)
  {
    uint64_t v37 = *((unsigned int *)v9 + 10);
    uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
    return v38(a3, v37);
  }
  else
  {
LABEL_12:
    int v13 = *(_DWORD *)(a2 + 16);
    BOOL v41 = a1;
    *(void *)&v46[0] = &v41;
    *((_DWORD *)std::__tree<std::__value_type<std::vector<MTLStructMemberInfo> const*,unsigned int>,std::__map_value_compare<std::vector<MTLStructMemberInfo> const*,std::__value_type<std::vector<MTLStructMemberInfo> const*,unsigned int>,std::less<std::vector<MTLStructMemberInfo> const*>,true>,std::allocator<std::__value_type<std::vector<MTLStructMemberInfo> const*,unsigned int>>>::__emplace_unique_key_args<std::vector<MTLStructMemberInfo> const*,std::piecewise_construct_t const&,std::tuple<std::vector<MTLStructMemberInfo> const*&&>,std::tuple<>>((uint64_t **)a2, (unint64_t *)&v41, (uint64_t)&std::piecewise_construct, (void **)v46)+ 10) = v13 + 1;
    (*(void (**)(uint64_t))(a3 + 16))(a3);
    uint64_t v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a1 + 1) - *(void *)a1) >> 4);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v14);
    if (v14)
    {
      uint64_t v16 = 0;
      do
      {
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void *)a1 + v16;
        (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a4, v18);
        (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v18 + 32));
        (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v17 + v16 + 72));
        if (*(_DWORD *)(v17 + v16 + 40))
        {
          (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, 2);
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, 0);
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, 0);
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v17 + v16 + 40));
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v17 + v16 + 44));
          (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v17 + v16 + 48));
          if (a5)
          {
            if (*(void *)(v17 + v16 + 96)) {
              uint64_t StructIndirectArgumentIndexStride = getStructIndirectArgumentIndexStride((uint64_t *)(v17 + v16 + 104));
            }
            else {
              uint64_t StructIndirectArgumentIndexStride = 1;
            }
          }
          else
          {
            uint64_t StructIndirectArgumentIndexStride = 0;
          }
        }
        else
        {
          uint64_t StructIndirectArgumentIndexStride = *(unsigned int *)(v17 + v16 + 36);
        }
        (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, StructIndirectArgumentIndexStride);
        uint64_t v20 = *(unsigned int *)(v17 + v16 + 88);
        (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v17 + v16 + 84));
        (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v20);
        uint64_t v21 = v17 + v16;
        if (*(void *)(v17 + v16 + 96)) {
          serializeStructInfo(v21 + 104, a2, a3, a4, a5);
        }
        uint64_t v22 = *(void *)(v21 + 56);
        if (v22)
        {
          long long v23 = *(_OWORD *)v22;
          long long v24 = *(_OWORD *)(v22 + 32);
          v46[1] = *(_OWORD *)(v22 + 16);
          v46[2] = v24;
          v46[0] = v23;
          long long v25 = *(_OWORD *)(v22 + 48);
          long long v26 = *(_OWORD *)(v22 + 64);
          long long v27 = *(_OWORD *)(v22 + 96);
          v46[5] = *(_OWORD *)(v22 + 80);
          v46[6] = v27;
          v46[3] = v25;
          v46[4] = v26;
          uint64_t v28 = *(std::__shared_weak_count **)(v22 + 120);
          uint64_t v47 = *(void *)(v22 + 112);
          uint64_t v48 = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v29 = *(std::__shared_weak_count **)(v22 + 136);
          uint64_t v49 = *(void *)(v22 + 128);
          uint64_t v50 = v29;
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v30 = *(std::__shared_weak_count **)(v22 + 152);
          uint64_t v51 = *(void *)(v22 + 144);
          v52 = v30;
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v31 = *(_OWORD *)(v22 + 160);
          long long v32 = *(_OWORD *)(v22 + 176);
          uint64_t v55 = *(void *)(v22 + 192);
          long long v53 = v31;
          long long v54 = v32;
          memset(v56, 0, sizeof(v56));
          std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>(v56, *(long long **)(v22 + 200), *(long long **)(v22 + 208), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v22 + 208) - *(void *)(v22 + 200)) >> 4));
          long long v33 = *(_OWORD *)(v22 + 224);
          long long v34 = *(_OWORD *)(v22 + 240);
          long long v35 = *(_OWORD *)(v22 + 272);
          long long v59 = *(_OWORD *)(v22 + 256);
          long long v60 = v35;
          long long v57 = v33;
          long long v58 = v34;
          uint64_t v42 = 0;
          v43 = 0;
          BOOL v41 = 0;
          uint64_t v44 = &v41;
          char v45 = 0;
          BOOL v41 = (char *)operator new(0x120uLL);
          uint64_t v42 = (uint64_t)v41;
          v43 = v41 + 288;
          uint64_t v42 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLArgumentData>,MTLArgumentData const*,MTLArgumentData const*,MTLArgumentData*>((uint64_t)&v43, v46, &v61, (uint64_t)v41);
          uint64_t v44 = (char **)v56;
          std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
          if (v52) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v52);
          }
          if (v50) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v50);
          }
          if (v48) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
          }
          serializeArguments(&v41, a2, a3, a4);
          *(void *)&v46[0] = &v41;
          std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
        }
        uint64_t v36 = v17 + v16;
        (*(void (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v36 + 76));
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, *(unsigned int *)(v36 + 80));
        v16 += 176;
      }
      while (176 * v14 != v16);
    }
  }
  return result;
}

void sub_25570225C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a16;
  std::vector<MTLArgumentData>::__destroy_vector::operator()[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_9(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  **(_DWORD **)(v2 + 24) = a2;
  *(void *)(v2 + 24) += 4;
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += 4;
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_2(uint64_t result, void *a2)
{
  uint64_t v2 = a2[1];
  if (!v2 || *(unsigned char *)(v2 + *a2 - 1)) {
    LODWORD(v2) = v2 + 1;
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += v2;
  return result;
}

void *___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_10(uint64_t a1, const void **a2)
{
  uint64_t v2 = (char *)*a2;
  size_t v3 = (size_t)a2[1];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t result = memcpy(*(void **)(v4 + 24), *a2, v3);
  uint64_t v6 = (unsigned char *)(*(void *)(v4 + 24) + v3);
  *(void *)(v4 + 24) = v6;
  if (!v3 || v2[v3 - 1])
  {
    *uint64_t v6 = 0;
    ++*(void *)(v4 + 24);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<std::vector<MTLStructMemberInfo> const*,unsigned int>,std::__map_value_compare<std::vector<MTLStructMemberInfo> const*,std::__value_type<std::vector<MTLStructMemberInfo> const*,unsigned int>,std::less<std::vector<MTLStructMemberInfo> const*>,true>,std::allocator<std::__value_type<std::vector<MTLStructMemberInfo> const*,unsigned int>>>::__emplace_unique_key_args<std::vector<MTLStructMemberInfo> const*,std::piecewise_construct_t const&,std::tuple<std::vector<MTLStructMemberInfo> const*&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::vector<MTLArgumentData>::__push_back_slow_path<MTLArgumentData const&>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xE38E38E38E38E3) {
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 5);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 5) >= 0x71C71C71C71C71) {
    unint64_t v6 = 0xE38E38E38E38E3;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    int v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLArgumentData>>((uint64_t)(a1 + 2), v6);
  }
  else {
    int v7 = 0;
  }
  unint64_t v10 = v7;
  BOOL v11 = &v7[288 * v3];
  int v13 = &v7[288 * v6];
  std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 288;
  std::vector<MTLArgumentData>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<MTLArgumentData>::~__split_buffer(&v10);
  return v8;
}

void sub_255702580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<MTLArgumentData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  long long v6 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)a2 = v5;
  long long v7 = a3[3];
  long long v8 = a3[4];
  long long v9 = a3[6];
  *(_OWORD *)(a2 + 80) = a3[5];
  *(_OWORD *)(a2 + 96) = v9;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v8;
  uint64_t v11 = *((void *)a3 + 14);
  uint64_t v10 = *((void *)a3 + 15);
  *(void *)(a2 + 120) = v10;
  *(void *)(a2 + 112) = v11;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *((void *)a3 + 16);
  uint64_t v12 = *((void *)a3 + 17);
  *(void *)(a2 + 136) = v12;
  *(void *)(a2 + 128) = v13;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *((void *)a3 + 19);
  *(void *)(a2 + 144) = *((void *)a3 + 18);
  *(void *)(a2 + 152) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = a3[10];
  long long v16 = a3[11];
  uint64_t v17 = *((void *)a3 + 24);
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 192) = v17;
  *(_OWORD *)(a2 + 176) = v16;
  *(_OWORD *)(a2 + 160) = v15;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  std::vector<MTLStructMemberInfo>::__init_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>((void *)(a2 + 200), *((long long **)a3 + 25), *((long long **)a3 + 26), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a3 + 26) - *((void *)a3 + 25)) >> 4));
  __n128 result = (__n128)a3[14];
  long long v19 = a3[15];
  long long v20 = a3[17];
  *(_OWORD *)(a2 + 256) = a3[16];
  *(_OWORD *)(a2 + 272) = v20;
  *(__n128 *)(a2 + 224) = result;
  *(_OWORD *)(a2 + 240) = v19;
  return result;
}

void sub_25570268C(_Unwind_Exception *a1)
{
  long long v5 = *(std::__shared_weak_count **)(v1 + 152);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData const&>(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<MTLArgumentData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLArgumentData>,std::reverse_iterator<MTLArgumentData*>,std::reverse_iterator<MTLArgumentData*>,std::reverse_iterator<MTLArgumentData*>>((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLArgumentData>,std::reverse_iterator<MTLArgumentData*>,std::reverse_iterator<MTLArgumentData*>,std::reverse_iterator<MTLArgumentData*>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    long long v9 = a3;
    do
    {
      v9 -= 18;
      std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData>(a1, v7 - 288, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 288;
      *((void *)&v16 + 1) -= 288;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,std::reverse_iterator<MTLArgumentData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<MTLArgumentData>::construct[abi:ne180100]<MTLArgumentData,MTLArgumentData>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  long long v5 = a3[3];
  long long v6 = a3[4];
  long long v7 = a3[6];
  *(_OWORD *)(a2 + 80) = a3[5];
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 112) = a3[7];
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  *(_OWORD *)(a2 + 128) = a3[8];
  *((void *)a3 + 16) = 0;
  *((void *)a3 + 17) = 0;
  *(_OWORD *)(a2 + 144) = a3[9];
  *((void *)a3 + 18) = 0;
  *((void *)a3 + 19) = 0;
  long long v8 = a3[11];
  uint64_t v9 = *((void *)a3 + 24);
  *(_OWORD *)(a2 + 160) = a3[10];
  *(_OWORD *)(a2 + 176) = v8;
  *(void *)(a2 + 192) = v9;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  *(_OWORD *)(a2 + 200) = *(long long *)((char *)a3 + 200);
  *(void *)(a2 + 216) = *((void *)a3 + 27);
  *((void *)a3 + 25) = 0;
  *((void *)a3 + 26) = 0;
  *((void *)a3 + 27) = 0;
  __n128 result = (__n128)a3[14];
  long long v11 = a3[15];
  long long v12 = a3[17];
  *(_OWORD *)(a2 + 256) = a3[16];
  *(_OWORD *)(a2 + 272) = v12;
  *(__n128 *)(a2 + 224) = result;
  *(_OWORD *)(a2 + 240) = v11;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,std::reverse_iterator<MTLArgumentData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<MTLArgumentData>,std::reverse_iterator<MTLArgumentData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLArgumentData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(288 * a2);
}

void **std::__split_buffer<MTLArgumentData>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<MTLArgumentData>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 288;
    std::allocator<MTLArgumentData>::destroy[abi:ne180100](v4, i - 288);
  }
}

void MTLCompilerObject::loadRuntimeModules(uint64_t a1, uint64_t a2)
{
  *(void *)&v59[12] = *MEMORY[0x263EF8340];
  uint64_t v4 = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.Metal"];
  if (!v4)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
      MTLCompilerObject::loadRuntimeModules();
    }
    return;
  }
  long long v5 = (void *)v4;
  v52[0] = 0;
  v52[1] = 0;
  uint64_t v51 = (uint64_t *)v52;
  if ((**(_DWORD **)(a2 + 32) & 0x1000000) != 0) {
    long long v6 = @"MTLRaytracingRuntime_instrumented";
  }
  else {
    long long v6 = @"MTLRaytracingRuntime";
  }
  uint64_t v50 = v6;
  p_p = &v50;
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>(&v51, (unint64_t *)&v50, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p)[5] = (uint64_t)"__air_raytracing_impl";
  __p = @"MTLShaderLoggingRuntime";
  p_p = &__p;
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>(&v51, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_p)[5] = (uint64_t)"__air_impl_os_log";
  p_p = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  __p = 0;
  char v45 = 0;
  uint64_t v46 = 0;
  long long v7 = v51;
  if (v51 == (uint64_t *)v52) {
    goto LABEL_67;
  }
  uint64_t v42 = v59;
  v43 = (uint64_t **)(a1 + 16);
  long long v8 = &_os_log_internal;
  do
  {
    uint64_t v9 = v7 + 4;
    uint64_t v10 = (unint64_t *)(v7 + 5);
    long long v11 = *(void **)(a1 + 24);
    if (!v11) {
      goto LABEL_15;
    }
    unint64_t v12 = *v10;
    while (1)
    {
      unint64_t v13 = v11[4];
      if (v12 >= v13) {
        break;
      }
LABEL_12:
      long long v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_15;
      }
    }
    if (v13 < v12)
    {
      ++v11;
      goto LABEL_12;
    }
    long long v53 = v7 + 5;
    if (std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>(v43, (unint64_t *)v7 + 5, (uint64_t)&std::piecewise_construct, &v53)[5] != *v9)
    {
LABEL_15:
      char v14 = v48;
      if (v48 >= v49)
      {
        uint64_t v16 = (v48 - (unsigned char *)p_p) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = (v49 - (unsigned char *)p_p) >> 2;
        if (v17 <= v16 + 1) {
          unint64_t v17 = v16 + 1;
        }
        if ((unint64_t)(v49 - (unsigned char *)p_p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v49, v18);
        }
        else {
          long long v19 = 0;
        }
        long long v20 = &v19[8 * v16];
        *(void *)long long v20 = *v10;
        long long v15 = v20 + 8;
        uint64_t v22 = (char *)p_p;
        uint64_t v21 = v48;
        if (v48 != p_p)
        {
          do
          {
            uint64_t v23 = *((void *)v21 - 1);
            v21 -= 8;
            *((void *)v20 - 1) = v23;
            v20 -= 8;
          }
          while (v21 != v22);
          uint64_t v21 = (char *)p_p;
        }
        p_p = v20;
        uint64_t v48 = v15;
        uint64_t v49 = &v19[8 * v18];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(void *)uint64_t v48 = *v10;
        long long v15 = v14 + 8;
      }
      uint64_t v48 = v15;
      uint64_t v24 = objc_msgSend((id)objc_msgSend(v5, "URLForResource:withExtension:", *v9, @"rtlib", v42), "fileSystemRepresentation");
      if (v24)
      {
        if (LLVMCreateMemoryBufferWithContentsOfFile())
        {
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
            MTLCompilerObject::loadRuntimeModules(v56, v24, &v57);
          }
        }
        else
        {
          uint64_t v25 = MTLObjectCreate();
          uint64_t v26 = v25;
          if (v25)
          {
            long long v27 = v45;
            if (v45 >= v46)
            {
              uint64_t v29 = ((char *)v45 - (unsigned char *)__p) >> 3;
              if ((unint64_t)(v29 + 1) >> 61) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v30 = ((char *)v46 - (unsigned char *)__p) >> 2;
              if (v30 <= v29 + 1) {
                unint64_t v30 = v29 + 1;
              }
              if ((unint64_t)((char *)v46 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v30;
              }
              if (v31) {
                long long v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v46, v31);
              }
              else {
                long long v32 = 0;
              }
              long long v33 = (uint64_t *)&v32[8 * v29];
              *long long v33 = v26;
              uint64_t v28 = v33 + 1;
              long long v35 = (char *)__p;
              long long v34 = (char *)v45;
              if (v45 != __p)
              {
                do
                {
                  uint64_t v36 = *((void *)v34 - 1);
                  v34 -= 8;
                  *--long long v33 = v36;
                }
                while (v34 != v35);
                long long v34 = (char *)__p;
              }
              __p = v33;
              char v45 = v28;
              uint64_t v46 = (uint64_t *)&v32[8 * v31];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              uint64_t *v45 = v25;
              uint64_t v28 = v27 + 1;
            }
            char v45 = v28;
            uint64_t v37 = *v9;
            long long v53 = v7 + 5;
            std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>(v43, (unint64_t *)v7 + 5, (uint64_t)&std::piecewise_construct, &v53)[5] = v37;
          }
          else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            MTLCompilerObject::loadRuntimeModules(v58, v7 + 4, v42);
          }
        }
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        MTLCompilerObject::loadRuntimeModules(v54, v7 + 4, &v55);
      }
    }
    uint64_t v38 = (uint64_t *)v7[1];
    if (v38)
    {
      do
      {
        uint64_t v39 = v38;
        uint64_t v38 = (uint64_t *)*v38;
      }
      while (v38);
    }
    else
    {
      do
      {
        uint64_t v39 = (uint64_t *)v7[2];
        BOOL v40 = *v39 == (void)v7;
        long long v7 = v39;
      }
      while (!v40);
    }
    long long v7 = v39;
  }
  while (v39 != (uint64_t *)v52);
  BOOL v41 = (uint64_t *)__p;
  if (p_p != v48)
  {
    MTLGPUCompilerSetLoweringRuntimes();
    BOOL v41 = (uint64_t *)__p;
  }
  if (v41)
  {
    char v45 = v41;
    operator delete(v41);
  }
LABEL_67:
  if (p_p)
  {
    uint64_t v48 = (char *)p_p;
    operator delete(p_p);
  }
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)&v51, v52[0]);
}

void sub_255702F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  long long v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        long long v6 = *v9;
        long long v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        long long v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    long long v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  long long v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      long long v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              long long v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            uint64_t *v9 = v2;
            v2[2] = (uint64_t)v9;
            long long v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            long long v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          long long v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *long long v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t extractOutputImageBlockDataFromMetadata(FunctionDesc *a1, MTLArgumentData *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  long long v3 = (uint64_t *)((char *)a1 + 16);
  DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(*(llvm::Module **)(*(void *)a1 + 40));
  llvm::DataLayout::DataLayout((llvm::DataLayout *)v42, DataLayout);
  uint64_t v5 = *v3;
  if (*v3 && *(_DWORD *)(v5 + 8))
  {
    uint64_t v6 = 0;
    while (1)
    {
      MTLArgumentData::MTLArgumentData((MTLArgumentData *)v26);
      uint64_t v7 = *(void *)(v5 - 8 * *(unsigned int *)(v5 + 8) + 8 * v6);
      v24[0] = 0;
      v24[1] = 0;
      int v25 = 0;
      parseArgumentMetadata((uint64_t)v26, v7, 0, 0, (uint64_t)v42, 1, (uint64_t *)v24, 7);
      if ((v26[0] & 0x1F0) == 0x90) {
        break;
      }
      llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)v24);
      v24[0] = (void **)&v36;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](v24);
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (++v6 >= (unint64_t)*(unsigned int *)(v5 + 8)) {
        return MEMORY[0x25A28CD60](v42);
      }
    }
    long long v8 = v26[5];
    *((_OWORD *)a2 + 4) = v26[4];
    *((_OWORD *)a2 + 5) = v8;
    *((_OWORD *)a2 + 6) = v26[6];
    long long v9 = v26[1];
    *(_OWORD *)a2 = v26[0];
    *((_OWORD *)a2 + 1) = v9;
    long long v10 = v26[3];
    *((_OWORD *)a2 + 2) = v26[2];
    *((_OWORD *)a2 + 3) = v10;
    uint64_t v12 = v27;
    uint64_t v11 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)a2 + 15);
    *((void *)a2 + 14) = v12;
    *((void *)a2 + 15) = v11;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    uint64_t v15 = v29;
    char v14 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (std::__shared_weak_count *)*((void *)a2 + 17);
    *((void *)a2 + 16) = v15;
    *((void *)a2 + 17) = v14;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    uint64_t v18 = v31;
    unint64_t v17 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v19 = (std::__shared_weak_count *)*((void *)a2 + 19);
    *((void *)a2 + 18) = v18;
    *((void *)a2 + 19) = v17;
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    long long v20 = v34;
    *((_OWORD *)a2 + 10) = v33;
    *((_OWORD *)a2 + 11) = v20;
    *((void *)a2 + 24) = v35;
    if (v26 != (_OWORD *)a2) {
      std::vector<MTLStructMemberInfo>::__assign_with_size[abi:ne180100]<MTLStructMemberInfo*,MTLStructMemberInfo*>((uint64_t)a2 + 200, v36, v37, 0x2E8BA2E8BA2E8BA3 * (v37 - v36));
    }
    long long v21 = v39;
    *((_OWORD *)a2 + 14) = v38;
    *((_OWORD *)a2 + 15) = v21;
    long long v22 = v41;
    *((_OWORD *)a2 + 16) = v40;
    *((_OWORD *)a2 + 17) = v22;
    llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)v24);
    v24[0] = (void **)&v36;
    std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](v24);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
  }
  return MEMORY[0x25A28CD60](v42);
}

void sub_255703500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

uint64_t textureTypeFromString(void *__src, size_t __len, _DWORD *a3, unsigned char *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v9 = __len | 7;
    }
    size_t v10 = v9 + 1;
    long long v8 = (void **)operator new(v9 + 1);
    __dst[1] = (void *)__len;
    int64_t v23 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v23) = __len;
  long long v8 = __dst;
  if (__len) {
LABEL_8:
  }
    memmove(v8, __src, __len);
  *((unsigned char *)v8 + __len) = 0;
  if (v23 >= 0) {
    uint64_t v11 = (const char *)__dst;
  }
  else {
    uint64_t v11 = (const char *)__dst[0];
  }
  v26[0] = 0;
  uint64_t v27 = v11;
  v26[1] = strlen(v11);
  NextToken = BasicParser::getNextToken((BasicParser *)v26);
  if (!strcmp(NextToken, "array")) {
    NextToken = BasicParser::getNextToken((BasicParser *)v26);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&textureTypeMapOnce, memory_order_acquire) != -1)
  {
    __p[0] = &v24;
    int v25 = __p;
    std::__call_once(&textureTypeMapOnce, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<textureTypeMap(void)::$_0 &&>>);
  }
  uint64_t v13 = textureTypeMap(void)::nonGlobalTextureTypeMap;
  std::string::basic_string[abi:ne180100]<0>(__p, NextToken);
  uint64_t v14 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(v13, (const void **)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = *(unsigned int *)(v14 + 56);
  *a4 = *(unsigned char *)(v14 + 60);
  uint64_t v16 = BasicParser::getNextToken((BasicParser *)v26);
  uint64_t v17 = bufferTypeMap();
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  uint64_t v18 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(v17, (const void **)__p);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  *a3 = *(_DWORD *)(v18 + 60);
  if (SHIBYTE(v23) < 0) {
    operator delete(__dst[0]);
  }
  return v15;
}

void sub_255703748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_7(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += 4;
  return result;
}

uint64_t ___ZN29MTLGenerateReflectionDataPass22generateReflectionDataEPN4llvm6ModuleEjPmjRKNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEPvmS3__block_invoke_15(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  **(_DWORD **)(v2 + 24) = a2;
  *(void *)(v2 + 24) += 4;
  return result;
}

size_t *CompilerOutputReflectionBlock::CompilerOutputReflectionBlock(size_t *a1, void *a2, size_t a3, uint64_t a4, void *a5, size_t a6)
{
  if (*(void *)(a4 + 16)) {
    uint64_t v12 = (unsigned int *)LLVMGetBufferStart();
  }
  else {
    uint64_t v12 = 0;
  }
  if (*(void *)(a4 + 8)) {
    uint64_t v13 = (unsigned int *)LLVMGetBufferStart();
  }
  else {
    uint64_t v13 = 0;
  }
  if (*(void *)(a4 + 16)) {
    size_t v14 = LLVMGetBufferSize();
  }
  else {
    size_t v14 = 0;
  }
  unint64_t v30 = v12;
  __src = a2;
  long long v32 = a5;
  if (!*(void *)(a4 + 8))
  {
    BOOL v20 = 0;
    uint64_t v16 = *(void *)(a4 + 16);
    if (v16)
    {
      size_t v15 = 0;
      goto LABEL_29;
    }
    size_t v15 = 0;
    goto LABEL_27;
  }
  size_t v15 = LLVMGetBufferSize();
  uint64_t v16 = *(void *)(a4 + 8);
  if (!*(void *)(a4 + 16))
  {
    BOOL v20 = 0;
    goto LABEL_27;
  }
  if (!v16)
  {
    BOOL v20 = 0;
    goto LABEL_29;
  }
  uint64_t v17 = (AirReflection::Reflection *)((char *)v13 + *v13);
  AirReflection::Reflection::Hash((AirReflection::Reflection *)((char *)v12 + *v12), &v35);
  AirReflection::Reflection::Hash(v17, &v33);
  uint64_t v18 = v35;
  long long v19 = v33;
  if (v36 - v35 != v34 - v33)
  {
    BOOL v20 = 0;
    if (!v33) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  BOOL v20 = memcmp(v35, v33, v36 - v35) == 0;
  if (v19)
  {
LABEL_22:
    long long v34 = v19;
    operator delete(v19);
    uint64_t v18 = v35;
  }
LABEL_23:
  if (v18)
  {
    uint64_t v36 = v18;
    operator delete(v18);
  }
  if (!*(void *)(a4 + 16))
  {
    uint64_t v16 = *(void *)(a4 + 8);
LABEL_27:
    if (v16) {
      BOOL v20 = 1;
    }
  }
LABEL_29:
  unint64_t v21 = (a3 + 87) & 0xFFFFFFFFFFFFFFF8;
  size_t v22 = ((a3 + 87) | 7) + a6;
  unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((v22 | 7) + v15) & 0xFFFFFFFFFFFFFFF8;
  if (v20) {
    unint64_t v25 = v23;
  }
  else {
    unint64_t v25 = v24;
  }
  if (v20)
  {
    size_t v14 = v15;
    size_t v26 = v24;
  }
  else
  {
    size_t v26 = (v14 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *a1 = v26;
  uint64_t v27 = malloc_type_malloc(v26, 0x1FC74800uLL);
  a1[1] = (size_t)v27;
  *(_OWORD *)uint64_t v27 = xmmword_2557AA390;
  v27[2] = 80;
  v27[3] = a3;
  v27[4] = v25;
  v27[5] = v14;
  v27[6] = v23;
  v27[7] = v15;
  v27[8] = v21;
  v27[9] = a6;
  if (a3) {
    memcpy((void *)(a1[1] + 80), __src, a3);
  }
  if (a6) {
    memcpy((void *)(a1[1] + v21), v32, a6);
  }
  if (v15) {
    memcpy((void *)(a1[1] + v23), v13, v15);
  }
  if (v14) {
    char v28 = v20;
  }
  else {
    char v28 = 1;
  }
  if ((v28 & 1) == 0) {
    memcpy((void *)(a1[1] + v25), v30, v14);
  }
  return a1;
}

void sub_255703A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AirReflection::Reflection::Hash@<X0>(AirReflection::Reflection *this@<X0>, unsigned __int8 **a2@<X8>)
{
  CC_SHA256_Init(&c);
  AirReflection::Reflection::HashImpl((int *)this, &c);
  return flatbuffers::SignatureBuilder::Create(&c, a2);
}

uint64_t AirReflection::Reflection::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Reflection", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    Air::Version::HashImpl((int *)((char *)a1 + v5), c);
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    long long v8 = (unsigned int *)((char *)a1 + v7 + *(unsigned int *)((char *)a1 + v7));
    int data = *v8;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v9 = *v8;
    if (v9)
    {
      size_t v10 = v8 + 1;
      uint64_t v11 = v8 + 1;
      do
      {
        unsigned int v12 = *v11++;
        AirReflection::Node::HashImpl((AirReflection::Node *)((char *)v10 + v12), c);
        size_t v10 = v11;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    size_t v15 = (unsigned int *)((char *)a1 + v14 + *(unsigned int *)((char *)a1 + v14));
    int data = *v15;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v16 = *v15;
    if (v16)
    {
      uint64_t v17 = (int *)(v15 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v18 = *v17++;
        int data = v18;
        CC_SHA256_Update(c, &data, 4u);
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  long long v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xBu && (uint64_t v20 = v19[5]) != 0)
  {
    unint64_t v21 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    int data = *v21;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v22 = *v21;
    if (v22)
    {
      unint64_t v23 = (int *)(v21 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v24 = *v23++;
        int data = v24;
        CC_SHA256_Update(c, &data, 4u);
        --v22;
      }
      while (v22);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  unint64_t v25 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v25 >= 0xDu && (uint64_t v26 = v25[6]) != 0)
  {
    uint64_t v27 = (unsigned int *)((char *)a1 + v26 + *(unsigned int *)((char *)a1 + v26));
    int data = *v27;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v28 = *v27;
    if (v28)
    {
      uint64_t v29 = (int *)(v27 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v30 = *v29++;
        int data = v30;
        CC_SHA256_Update(c, &data, 4u);
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 >= 0xFu && (uint64_t v32 = v31[7]) != 0)
  {
    long long v33 = (unsigned int *)((char *)a1 + v32 + *(unsigned int *)((char *)a1 + v32));
    int data = *v33;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v34 = *v33;
    if (v34)
    {
      uint64_t v35 = (int *)(v33 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v36 = *v35++;
        int data = v36;
        CC_SHA256_Update(c, &data, 4u);
        --v34;
      }
      while (v34);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v37 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v37 >= 0x11u && (uint64_t v38 = v37[8]) != 0)
  {
    long long v39 = (unsigned int *)((char *)a1 + v38 + *(unsigned int *)((char *)a1 + v38));
    int data = *v39;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v40 = *v39;
    if (v40)
    {
      long long v41 = (int *)(v39 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v42 = *v41++;
        int data = v42;
        CC_SHA256_Update(c, &data, 4u);
        --v40;
      }
      while (v40);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v43 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v43 >= 0x13u && (uint64_t v44 = v43[9]) != 0)
  {
    char v45 = (unsigned int *)((char *)a1 + v44 + *(unsigned int *)((char *)a1 + v44));
    int data = *v45;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v46 = *v45;
    if (v46)
    {
      uint64_t v47 = (int *)(v45 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v48 = *v47++;
        int data = v48;
        CC_SHA256_Update(c, &data, 4u);
        --v46;
      }
      while (v46);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v49 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v49 >= 0x15u && (uint64_t v50 = v49[10]) != 0)
  {
    uint64_t v51 = (unsigned int *)((char *)a1 + v50 + *(unsigned int *)((char *)a1 + v50));
    int data = *v51;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v52 = *v51;
    if (v52)
    {
      long long v53 = (int *)(v51 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v54 = *v53++;
        int data = v54;
        CC_SHA256_Update(c, &data, 4u);
        --v52;
      }
      while (v52);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v55 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v55 >= 0x17u && (uint64_t v56 = v55[11]) != 0)
  {
    uint64_t v57 = (unsigned int *)((char *)a1 + v56 + *(unsigned int *)((char *)a1 + v56));
    int data = *v57;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v58 = *v57;
    if (v58)
    {
      long long v59 = (int *)(v57 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v60 = *v59++;
        int data = v60;
        CC_SHA256_Update(c, &data, 4u);
        --v58;
      }
      while (v58);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  long long v61 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v61 >= 0x19u && (uint64_t v62 = v61[12]) != 0)
  {
    size_t v63 = (unsigned int *)((char *)a1 + v62 + *(unsigned int *)((char *)a1 + v62));
    int data = *v63;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v64 = *v63;
    if (v64)
    {
      unint64_t v65 = v63 + 1;
      int v66 = v63 + 1;
      do
      {
        unsigned int v67 = *v66++;
        AirReflection::LocalAllocation::HashImpl((int *)((char *)v65 + v67), c);
        unint64_t v65 = v66;
        --v64;
      }
      while (v64);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v68 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v68 >= 0x1Bu && (uint64_t v69 = v68[13]) != 0)
  {
    int v70 = (unsigned int *)((char *)a1 + v69 + *(unsigned int *)((char *)a1 + v69));
    int data = *v70;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v71 = *v70;
    if (v71)
    {
      uint64_t v72 = (int *)(v70 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v73 = *v72++;
        int data = v73;
        CC_SHA256_Update(c, &data, 4u);
        --v71;
      }
      while (v71);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  __int16 v74 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v74 >= 0x1Du && (uint64_t v75 = v74[14]) != 0)
  {
    __int16 v76 = (unsigned int *)((char *)a1 + v75 + *(unsigned int *)((char *)a1 + v75));
    int data = *v76;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v78 = *v76;
    if (v78)
    {
      uint64_t v79 = (int *)(v76 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v80 = *v79++;
        int data = v80;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v78;
      }
      while (v78);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::HashImpl(AirReflection::Node *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Node", 0x12u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(_DWORD *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v6 < 5u || (uint64_t v7 = v6[2]) == 0)
  {
LABEL_68:
    int v228 = 0;
    uint64_t v16 = (const char *)&v228;
    uint64_t v17 = c;
    CC_LONG v18 = 4;
    return CC_SHA256_Update(v17, v16, v18);
  }
  int v8 = *(_DWORD *)((char *)a1 + v7);
  if (v8 < 286720)
  {
    if (v8 >= 270336)
    {
      if (v8 < 278528)
      {
        switch(v8)
        {
          case 270336:
            size_t v15 = (int *)AirReflection::Node::node_as_BaseInstanceArg(a1);
            uint64_t result = AirReflection::BaseInstanceArg::HashImpl(v15, c);
            break;
          case 270337:
            long long v169 = (int *)AirReflection::Node::node_as_BaseVertexArg(a1);
            uint64_t result = AirReflection::BaseVertexArg::HashImpl(v169, c);
            break;
          case 270338:
            long long v170 = (int *)AirReflection::Node::node_as_InstanceIDArg(a1);
            uint64_t result = AirReflection::InstanceIDArg::HashImpl(v170, c);
            break;
          case 270339:
            uint64_t v171 = (int *)AirReflection::Node::node_as_VertexIDArg(a1);
            uint64_t result = AirReflection::VertexIDArg::HashImpl(v171, c);
            break;
          case 270340:
            long long v172 = (int *)AirReflection::Node::node_as_VertexInputArg(a1);
            uint64_t result = AirReflection::VertexInputArg::HashImpl(v172, c);
            break;
          case 270341:
            long long v173 = (int *)AirReflection::Node::node_as_ControlPointIndexBufferArg(a1);
            uint64_t result = AirReflection::ControlPointIndexBufferArg::HashImpl(v173, c);
            break;
          case 270342:
            long long v174 = (int *)AirReflection::Node::node_as_PatchIDArg(a1);
            uint64_t result = AirReflection::PatchIDArg::HashImpl(v174, c);
            break;
          case 270343:
            long long v175 = (int *)AirReflection::Node::node_as_PositionInPatchArg(a1);
            uint64_t result = AirReflection::PositionInPatchArg::HashImpl(v175, c);
            break;
          case 270344:
            long long v176 = (int *)AirReflection::Node::node_as_PatchInputArg(a1);
            uint64_t result = AirReflection::PatchInputArg::HashImpl(v176, c);
            break;
          case 270345:
            long long v177 = (int *)AirReflection::Node::node_as_ControlPointInputArg(a1);
            uint64_t result = AirReflection::ControlPointInputArg::HashImpl(v177, c);
            break;
          case 270346:
            long long v178 = (int *)AirReflection::Node::node_as_ControlPointField(a1);
            uint64_t result = AirReflection::ControlPointField::HashImpl(v178, c);
            break;
          case 270347:
          case 270348:
          case 270349:
            goto LABEL_68;
          case 270350:
            uint64_t v179 = (int *)AirReflection::Node::node_as_AmplificationCountArg(a1);
            uint64_t result = AirReflection::AmplificationCountArg::HashImpl(v179, c);
            break;
          case 270351:
            v180 = (int *)AirReflection::Node::node_as_AmplificationIDArg(a1);
            uint64_t result = AirReflection::AmplificationIDArg::HashImpl(v180, c);
            break;
          default:
            switch(v8)
            {
              case 274432:
                unint64_t v21 = (int *)AirReflection::Node::node_as_FragmentInputArg(a1);
                uint64_t result = AirReflection::FragmentInputArg::HashImpl(v21, c);
                break;
              case 274433:
                v198 = (int *)AirReflection::Node::node_as_FrontFacingArg(a1);
                uint64_t result = AirReflection::FrontFacingArg::HashImpl(v198, c);
                break;
              case 274434:
                v199 = (int *)AirReflection::Node::node_as_PositionArg(a1);
                uint64_t result = AirReflection::PositionArg::HashImpl(v199, c);
                break;
              case 274435:
                v200 = (int *)AirReflection::Node::node_as_PointCoordArg(a1);
                uint64_t result = AirReflection::PointCoordArg::HashImpl(v200, c);
                break;
              case 274436:
                v201 = (int *)AirReflection::Node::node_as_RenderTargetArg(a1);
                uint64_t result = AirReflection::RenderTargetArg::HashImpl(v201, c);
                break;
              case 274437:
                v202 = (int *)AirReflection::Node::node_as_RenderTargetArrayIndexArg(a1);
                uint64_t result = AirReflection::RenderTargetArrayIndexArg::HashImpl(v202, c);
                break;
              case 274438:
                v203 = (int *)AirReflection::Node::node_as_SampleIDArg(a1);
                uint64_t result = AirReflection::SampleIDArg::HashImpl(v203, c);
                break;
              case 274439:
                v204 = (int *)AirReflection::Node::node_as_SampleMaskArg(a1);
                uint64_t result = AirReflection::SampleMaskArg::HashImpl(v204, c);
                break;
              case 274440:
                v205 = (int *)AirReflection::Node::node_as_ViewportArrayIndexArg(a1);
                uint64_t result = AirReflection::ViewportArrayIndexArg::HashImpl(v205, c);
                break;
              case 274445:
                v206 = (int *)AirReflection::Node::node_as_BarycentricCoordArg(a1);
                uint64_t result = AirReflection::BarycentricCoordArg::HashImpl(v206, c);
                break;
              case 274446:
                v207 = (int *)AirReflection::Node::node_as_PrimitiveIDArg(a1);
                uint64_t result = AirReflection::PrimitiveIDArg::HashImpl(v207, c);
                break;
              default:
                goto LABEL_68;
            }
            break;
        }
      }
      else
      {
        switch(v8)
        {
          case 282624:
            unsigned int v12 = (int *)AirReflection::Node::node_as_PayloadArg(a1);
            uint64_t result = AirReflection::PayloadArg::HashImpl(v12, c);
            break;
          case 282625:
            v118 = (int *)AirReflection::Node::node_as_OriginArg(a1);
            uint64_t result = AirReflection::OriginArg::HashImpl(v118, c);
            break;
          case 282626:
            uint64_t v119 = (int *)AirReflection::Node::node_as_DirectionArg(a1);
            uint64_t result = AirReflection::DirectionArg::HashImpl(v119, c);
            break;
          case 282627:
            v120 = (int *)AirReflection::Node::node_as_MinDistanceArg(a1);
            uint64_t result = AirReflection::MinDistanceArg::HashImpl(v120, c);
            break;
          case 282628:
            v121 = (int *)AirReflection::Node::node_as_MaxDistanceArg(a1);
            uint64_t result = AirReflection::MaxDistanceArg::HashImpl(v121, c);
            break;
          case 282629:
            v122 = (int *)AirReflection::Node::node_as_DistanceArg(a1);
            uint64_t result = AirReflection::DistanceArg::HashImpl(v122, c);
            break;
          case 282630:
            v123 = (int *)AirReflection::Node::node_as_WorldSpaceOriginArg(a1);
            uint64_t result = AirReflection::WorldSpaceOriginArg::HashImpl(v123, c);
            break;
          case 282631:
            v124 = (int *)AirReflection::Node::node_as_WorldSpaceDirectionArg(a1);
            uint64_t result = AirReflection::WorldSpaceDirectionArg::HashImpl(v124, c);
            break;
          case 282632:
            unint64_t v125 = (int *)AirReflection::Node::node_as_GeometryIDArg(a1);
            uint64_t result = AirReflection::GeometryIDArg::HashImpl(v125, c);
            break;
          case 282633:
            v126 = (int *)AirReflection::Node::node_as_UserInstanceIDArg(a1);
            uint64_t result = AirReflection::UserInstanceIDArg::HashImpl(v126, c);
            break;
          case 282634:
            v127 = (int *)AirReflection::Node::node_as_GeometryIntersectionFunctionTableOffsetArg(a1);
            uint64_t result = AirReflection::GeometryIntersectionFunctionTableOffsetArg::HashImpl(v127, c);
            break;
          case 282635:
            v128 = (int *)AirReflection::Node::node_as_InstanceIntersectionFunctionTableOffsetArg(a1);
            uint64_t result = AirReflection::InstanceIntersectionFunctionTableOffsetArg::HashImpl(v128, c);
            break;
          case 282636:
            v129 = (int *)AirReflection::Node::node_as_OpaquePrimitiveArg(a1);
            uint64_t result = AirReflection::OpaquePrimitiveArg::HashImpl(v129, c);
            break;
          case 282637:
            v130 = (int *)AirReflection::Node::node_as_ObjectToWorldTransformArg(a1);
            uint64_t result = AirReflection::ObjectToWorldTransformArg::HashImpl(v130, c);
            break;
          case 282638:
            v131 = (int *)AirReflection::Node::node_as_WorldToObjectTransformArg(a1);
            uint64_t result = AirReflection::WorldToObjectTransformArg::HashImpl(v131, c);
            break;
          case 282639:
            uint64_t v132 = (int *)AirReflection::Node::node_as_TimeArg(a1);
            uint64_t result = AirReflection::TimeArg::HashImpl(v132, c);
            break;
          case 282640:
            v133 = (int *)AirReflection::Node::node_as_KeyFrameCountArg(a1);
            uint64_t result = AirReflection::KeyFrameCountArg::HashImpl(v133, c);
            break;
          case 282641:
            started = (int *)AirReflection::Node::node_as_MotionStartTimeArg(a1);
            uint64_t result = AirReflection::MotionStartTimeArg::HashImpl(started, c);
            break;
          case 282642:
            uint64_t v135 = (int *)AirReflection::Node::node_as_MotionEndTimeArg(a1);
            uint64_t result = AirReflection::MotionEndTimeArg::HashImpl(v135, c);
            break;
          case 282643:
            uint64_t v136 = (int *)AirReflection::Node::node_as_PrimitiveDataArg(a1);
            uint64_t result = AirReflection::PrimitiveDataArg::HashImpl(v136, c);
            break;
          case 282644:
            v137 = (int *)AirReflection::Node::node_as_InstanceIDCountArg(a1);
            uint64_t result = AirReflection::InstanceIDCountArg::HashImpl(v137, c);
            break;
          case 282645:
            unint64_t v138 = (int *)AirReflection::Node::node_as_UserInstanceIDCountArg(a1);
            uint64_t result = AirReflection::UserInstanceIDCountArg::HashImpl(v138, c);
            break;
          case 282646:
            uint64_t v139 = (int *)AirReflection::Node::node_as_CurveParameterArg(a1);
            uint64_t result = AirReflection::CurveParameterArg::HashImpl(v139, c);
            break;
          default:
            switch(v8)
            {
              case 282624:
                uint64_t v26 = (int *)AirReflection::Node::node_as_PixelPositionInTileArg(a1);
                uint64_t result = AirReflection::PixelPositionInTileArg::HashImpl(v26, c);
                break;
              case 282625:
                v219 = (int *)AirReflection::Node::node_as_PixelsPerTileArg(a1);
                uint64_t result = AirReflection::PixelsPerTileArg::HashImpl(v219, c);
                break;
              case 282626:
                v220 = (int *)AirReflection::Node::node_as_TileIndexArg(a1);
                uint64_t result = AirReflection::TileIndexArg::HashImpl(v220, c);
                break;
              case 282627:
                v221 = (int *)AirReflection::Node::node_as_ImageblockArg(a1);
                uint64_t result = AirReflection::ImageblockArg::HashImpl(v221, c);
                break;
              case 282628:
                v222 = (int *)AirReflection::Node::node_as_ImageblockDataArg(a1);
                uint64_t result = AirReflection::ImageblockDataArg::HashImpl(v222, c);
                break;
              default:
                goto LABEL_68;
            }
            break;
        }
      }
      return result;
    }
    if (v8 >= 143360)
    {
      switch(v8)
      {
        case 266240:
          uint64_t v9 = (int *)AirReflection::Node::node_as_ThreadPositionInGridArg(a1);
          uint64_t result = AirReflection::ThreadPositionInGridArg::HashImpl(v9, c);
          break;
        case 266241:
          long long v53 = (int *)AirReflection::Node::node_as_ThreadsPerGridArg(a1);
          uint64_t result = AirReflection::ThreadsPerGridArg::HashImpl(v53, c);
          break;
        case 266242:
          int v54 = (int *)AirReflection::Node::node_as_ThreadgroupPositionInGridArg(a1);
          uint64_t result = AirReflection::ThreadgroupPositionInGridArg::HashImpl(v54, c);
          break;
        case 266243:
          uint64_t v55 = (int *)AirReflection::Node::node_as_ThreadgroupsPerGridArg(a1);
          uint64_t result = AirReflection::ThreadgroupsPerGridArg::HashImpl(v55, c);
          break;
        case 266244:
          uint64_t v56 = (int *)AirReflection::Node::node_as_ThreadPositionInThreadgroupArg(a1);
          uint64_t result = AirReflection::ThreadPositionInThreadgroupArg::HashImpl(v56, c);
          break;
        case 266245:
          uint64_t v57 = (int *)AirReflection::Node::node_as_ThreadsPerThreadgroupArg(a1);
          uint64_t result = AirReflection::ThreadsPerThreadgroupArg::HashImpl(v57, c);
          break;
        case 266246:
          uint64_t v58 = (int *)AirReflection::Node::node_as_DispatchThreadsPerThreadgroupArg(a1);
          uint64_t result = AirReflection::DispatchThreadsPerThreadgroupArg::HashImpl(v58, c);
          break;
        case 266247:
          long long v59 = (int *)AirReflection::Node::node_as_ThreadIndexInThreadgroupArg(a1);
          uint64_t result = AirReflection::ThreadIndexInThreadgroupArg::HashImpl(v59, c);
          break;
        case 266248:
          int v60 = (int *)AirReflection::Node::node_as_ThreadExecutionWidthArg(a1);
          uint64_t result = AirReflection::ThreadExecutionWidthArg::HashImpl(v60, c);
          break;
        case 266249:
          long long v61 = (int *)AirReflection::Node::node_as_StageInArg(a1);
          uint64_t result = AirReflection::StageInArg::HashImpl(v61, c);
          break;
        case 266250:
          uint64_t v62 = (int *)AirReflection::Node::node_as_StageInGridOriginArg(a1);
          uint64_t result = AirReflection::StageInGridOriginArg::HashImpl(v62, c);
          break;
        case 266251:
          size_t v63 = (int *)AirReflection::Node::node_as_StageInGridSizeArg(a1);
          uint64_t result = AirReflection::StageInGridSizeArg::HashImpl(v63, c);
          break;
        case 266252:
          uint64_t v64 = (int *)AirReflection::Node::node_as_ThreadIndexInSimdgroupArg(a1);
          uint64_t result = AirReflection::ThreadIndexInSimdgroupArg::HashImpl(v64, c);
          break;
        case 266253:
          unint64_t v65 = (int *)AirReflection::Node::node_as_ThreadsPerSimdgroupArg(a1);
          uint64_t result = AirReflection::ThreadsPerSimdgroupArg::HashImpl(v65, c);
          break;
        case 266254:
          int v66 = (int *)AirReflection::Node::node_as_SimdgroupIndexInThreadgroupArg(a1);
          uint64_t result = AirReflection::SimdgroupIndexInThreadgroupArg::HashImpl(v66, c);
          break;
        case 266255:
          unsigned int v67 = (int *)AirReflection::Node::node_as_SimdgroupsPerThreadgroupArg(a1);
          uint64_t result = AirReflection::SimdgroupsPerThreadgroupArg::HashImpl(v67, c);
          break;
        case 266256:
          uint64_t v68 = (int *)AirReflection::Node::node_as_DispatchSimdgroupsPerThreadgroupArg(a1);
          uint64_t result = AirReflection::DispatchSimdgroupsPerThreadgroupArg::HashImpl(v68, c);
          break;
        case 266257:
          uint64_t v69 = (int *)AirReflection::Node::node_as_ThreadIndexInQuadgroupArg(a1);
          uint64_t result = AirReflection::ThreadIndexInQuadgroupArg::HashImpl(v69, c);
          break;
        case 266258:
          int v70 = (int *)AirReflection::Node::node_as_QuadgroupIndexInThreadgroupArg(a1);
          uint64_t result = AirReflection::QuadgroupIndexInThreadgroupArg::HashImpl(v70, c);
          break;
        case 266259:
          uint64_t v71 = (int *)AirReflection::Node::node_as_QuadgroupsPerThreadgroupArg(a1);
          uint64_t result = AirReflection::QuadgroupsPerThreadgroupArg::HashImpl(v71, c);
          break;
        case 266260:
          uint64_t v72 = (int *)AirReflection::Node::node_as_DispatchQuadgroupsPerThreadgroupArg(a1);
          uint64_t result = AirReflection::DispatchQuadgroupsPerThreadgroupArg::HashImpl(v72, c);
          break;
        default:
          switch(v8)
          {
            case 262144:
              long long v19 = (int *)AirReflection::Node::node_as_BufferArg(a1);
              uint64_t result = AirReflection::BufferArg::HashImpl(v19, c);
              break;
            case 262145:
              long long v185 = (int *)AirReflection::Node::node_as_SamplerArg(a1);
              uint64_t result = AirReflection::SamplerArg::HashImpl(v185, c);
              break;
            case 262146:
              long long v186 = (int *)AirReflection::Node::node_as_TextureArg(a1);
              uint64_t result = AirReflection::TextureArg::HashImpl(v186, c);
              break;
            case 262147:
              uint64_t v187 = (int *)AirReflection::Node::node_as_ConstantArg(a1);
              uint64_t result = AirReflection::ConstantArg::HashImpl(v187, c);
              break;
            case 262148:
              v188 = (int *)AirReflection::Node::node_as_IndirectBufferArg(a1);
              uint64_t result = AirReflection::IndirectBufferArg::HashImpl(v188, c);
              break;
            case 262149:
              v189 = (int *)AirReflection::Node::node_as_IndirectConstantArg(a1);
              uint64_t result = AirReflection::IndirectConstantArg::HashImpl(v189, c);
              break;
            case 262150:
              long long v190 = (int *)AirReflection::Node::node_as_CommandBufferArg(a1);
              uint64_t result = AirReflection::CommandBufferArg::HashImpl(v190, c);
              break;
            case 262151:
              long long v191 = (int *)AirReflection::Node::node_as_ComputePipelineStateArg(a1);
              uint64_t result = AirReflection::ComputePipelineStateArg::HashImpl(v191, c);
              break;
            case 262152:
              long long v192 = (int *)AirReflection::Node::node_as_RenderPipelineStateArg(a1);
              uint64_t result = AirReflection::RenderPipelineStateArg::HashImpl(v192, c);
              break;
            case 262153:
              long long v193 = (int *)AirReflection::Node::node_as_VisibleFunctionTableArg(a1);
              uint64_t result = AirReflection::VisibleFunctionTableArg::HashImpl(v193, c);
              break;
            case 262154:
              v194 = (int *)AirReflection::Node::node_as_IntersectionFunctionTableArg(a1);
              uint64_t result = AirReflection::IntersectionFunctionTableArg::HashImpl(v194, c);
              break;
            case 262155:
              v195 = (int *)AirReflection::Node::node_as_InstanceAccelerationStructureArg(a1);
              uint64_t result = AirReflection::InstanceAccelerationStructureArg::HashImpl(v195, c);
              break;
            case 262156:
              v196 = (int *)AirReflection::Node::node_as_PrimitiveAccelerationStructureArg(a1);
              uint64_t result = AirReflection::PrimitiveAccelerationStructureArg::HashImpl(v196, c);
              break;
            case 262157:
              v197 = (int *)AirReflection::Node::node_as_BufferStrideArg(a1);
              uint64_t result = AirReflection::BufferStrideArg::HashImpl(v197, c);
              break;
            default:
              switch(v8)
              {
                case 262144:
                  uint64_t v27 = (int *)AirReflection::Node::node_as_MeshPrimitiveDataRet(a1);
                  uint64_t result = AirReflection::MeshPrimitiveDataRet::HashImpl(v27, c);
                  break;
                case 262145:
                  v223 = (int *)AirReflection::Node::node_as_MeshVertexDataRet(a1);
                  uint64_t result = AirReflection::MeshVertexDataRet::HashImpl(v223, c);
                  break;
                case 262146:
                  v224 = (int *)AirReflection::Node::node_as_PrimitiveCulledRet(a1);
                  uint64_t result = AirReflection::PrimitiveCulledRet::HashImpl(v224, c);
                  break;
                case 262147:
                  v225 = (int *)AirReflection::Node::node_as_PrimitiveIDRet(a1);
                  uint64_t result = AirReflection::PrimitiveIDRet::HashImpl(v225, c);
                  break;
                default:
                  goto LABEL_68;
              }
              break;
          }
          break;
      }
      return result;
    }
    if (v8 < 0x20000)
    {
      switch(v8)
      {
        case 1:
          uint64_t v20 = (int *)AirReflection::Node::node_as_FragmentFunction(a1);
          uint64_t result = AirReflection::FragmentFunction::HashImpl(v20, c);
          break;
        case 2:
          uint64_t v34 = (int *)AirReflection::Node::node_as_KernelFunction(a1);
          uint64_t result = AirReflection::KernelFunction::HashImpl(v34, c);
          break;
        case 3:
          uint64_t v35 = (int *)AirReflection::Node::node_as_VertexFunction(a1);
          uint64_t result = AirReflection::VertexFunction::HashImpl(v35, c);
          break;
        case 4:
          int v36 = (int *)AirReflection::Node::node_as_VisibleFunction(a1);
          uint64_t result = AirReflection::VisibleFunction::HashImpl(v36, c);
          break;
        case 5:
          uint64_t v37 = (int *)AirReflection::Node::node_as_IntersectionFunction(a1);
          uint64_t result = AirReflection::IntersectionFunction::HashImpl(v37, c);
          break;
        case 6:
          uint64_t v38 = (int *)AirReflection::Node::node_as_MeshFunction(a1);
          uint64_t result = AirReflection::MeshFunction::HashImpl(v38, c);
          break;
        case 7:
          long long v39 = (int *)AirReflection::Node::node_as_ObjectFunction(a1);
          uint64_t result = AirReflection::ObjectFunction::HashImpl(v39, c);
          break;
        default:
          switch(v8)
          {
            case 4096:
              unint64_t v25 = (int *)AirReflection::Node::node_as_VecTypeHintFnAttr(a1);
              uint64_t result = AirReflection::VecTypeHintFnAttr::HashImpl(v25, c);
              break;
            case 4097:
              uint64_t v46 = (int *)AirReflection::Node::node_as_WorkgroupSizeFnAttr(a1);
              uint64_t result = AirReflection::WorkgroupSizeFnAttr::HashImpl(v46, c);
              break;
            case 4098:
              uint64_t v47 = (int *)AirReflection::Node::node_as_WorkgroupSizeHintFnAttr(a1);
              uint64_t result = AirReflection::WorkgroupSizeHintFnAttr::HashImpl(v47, c);
              break;
            case 4099:
              int v48 = (int *)AirReflection::Node::node_as_WorkgroupMaxSizeFnAttr(a1);
              uint64_t result = AirReflection::WorkgroupMaxSizeFnAttr::HashImpl(v48, c);
              break;
            case 4100:
              uint64_t v49 = (int *)AirReflection::Node::node_as_PatchFnAttr(a1);
              uint64_t result = AirReflection::PatchFnAttr::HashImpl(v49, c);
              break;
            case 4101:
              uint64_t v50 = (int *)AirReflection::Node::node_as_MaxMeshWorkgroupsFnAttr(a1);
              uint64_t result = AirReflection::MaxMeshWorkgroupsFnAttr::HashImpl(v50, c);
              break;
            default:
              goto LABEL_68;
          }
          break;
      }
      return result;
    }
    if (v8 < 135168)
    {
      switch(v8)
      {
        case 131072:
          int v24 = (int *)AirReflection::Node::node_as_ClipDistanceRet(a1);
          uint64_t result = AirReflection::ClipDistanceRet::HashImpl(v24, c);
          break;
        case 131073:
          long long v41 = (int *)AirReflection::Node::node_as_PointSizeRet(a1);
          uint64_t result = AirReflection::PointSizeRet::HashImpl(v41, c);
          break;
        case 131074:
          int v42 = (int *)AirReflection::Node::node_as_PositionRet(a1);
          uint64_t result = AirReflection::PositionRet::HashImpl(v42, c);
          break;
        case 131075:
          uint64_t v43 = (int *)AirReflection::Node::node_as_RenderTargetArrayIndexRet(a1);
          uint64_t result = AirReflection::RenderTargetArrayIndexRet::HashImpl(v43, c);
          break;
        case 131076:
          uint64_t v44 = (int *)AirReflection::Node::node_as_VertexOutputRet(a1);
          uint64_t result = AirReflection::VertexOutputRet::HashImpl(v44, c);
          break;
        case 131077:
          char v45 = (int *)AirReflection::Node::node_as_ViewportArrayIndexRet(a1);
          uint64_t result = AirReflection::ViewportArrayIndexRet::HashImpl(v45, c);
          break;
        default:
          goto LABEL_68;
      }
      return result;
    }
    if (v8 < 139264)
    {
      switch(v8)
      {
        case 135168:
          uint64_t v14 = (int *)AirReflection::Node::node_as_RenderTargetRet(a1);
          uint64_t result = AirReflection::RenderTargetRet::HashImpl(v14, c);
          break;
        case 135169:
          int v30 = (int *)AirReflection::Node::node_as_DepthRet(a1);
          uint64_t result = AirReflection::DepthRet::HashImpl(v30, c);
          break;
        case 135170:
          uint64_t v31 = (int *)AirReflection::Node::node_as_StencilRet(a1);
          uint64_t result = AirReflection::StencilRet::HashImpl(v31, c);
          break;
        case 135171:
          uint64_t v32 = (int *)AirReflection::Node::node_as_SampleMaskRet(a1);
          uint64_t result = AirReflection::SampleMaskRet::HashImpl(v32, c);
          break;
        case 135172:
          long long v33 = (int *)AirReflection::Node::node_as_ImageblockDataRet(a1);
          uint64_t result = AirReflection::ImageblockDataRet::HashImpl(v33, c);
          break;
        default:
          goto LABEL_68;
      }
      return result;
    }
    switch(v8)
    {
      case 139264:
        uint64_t v51 = (int *)AirReflection::Node::node_as_AcceptIntersectionRet(a1);
        return AirReflection::AcceptIntersectionRet::HashImpl(v51, c);
      case 139265:
        uint64_t v52 = (int *)AirReflection::Node::node_as_ContinueSearchRet(a1);
        return AirReflection::ContinueSearchRet::HashImpl(v52, c);
      case 139266:
        uint64_t v28 = (int *)AirReflection::Node::node_as_DistanceRet(a1);
        return AirReflection::DistanceRet::HashImpl(v28, c);
    }
    goto LABEL_68;
  }
  if (v8 < 532480)
  {
    if (v8 < 528384)
    {
      switch(v8)
      {
        case 524288:
          uint64_t v22 = (int *)AirReflection::Node::node_as_FunctionConstant(a1);
          uint64_t result = AirReflection::FunctionConstant::HashImpl(v22, c);
          break;
        case 524289:
          v208 = (int *)AirReflection::Node::node_as_StructTypeInfo(a1);
          uint64_t result = AirReflection::StructTypeInfo::HashImpl(v208, c);
          break;
        case 524290:
          v209 = (int *)AirReflection::Node::node_as_StitchingArgument(a1);
          uint64_t result = AirReflection::StitchingArgument::HashImpl(v209, c);
          break;
        case 524291:
          v210 = (int *)AirReflection::Node::node_as_MeshTypeInfo(a1);
          uint64_t result = AirReflection::MeshTypeInfo::HashImpl(v210, c);
          break;
        case 524292:
          v211 = (int *)AirReflection::Node::node_as_GlobalBinding(a1);
          uint64_t result = AirReflection::GlobalBinding::HashImpl(v211, c);
          break;
        case 524293:
          v212 = (int *)AirReflection::Node::node_as_InlineTypeInfo(a1);
          uint64_t result = AirReflection::InlineTypeInfo::HashImpl(v212, c);
          break;
        default:
          if (v8 == 286720)
          {
            v226 = (int *)AirReflection::Node::node_as_MeshArg(a1);
            uint64_t result = AirReflection::MeshArg::HashImpl(v226, c);
          }
          else
          {
            if (v8 != 290816) {
              goto LABEL_68;
            }
            uint64_t v29 = (int *)AirReflection::Node::node_as_MeshGridPropertiesArg(a1);
            uint64_t result = AirReflection::MeshGridPropertiesArg::HashImpl(v29, c);
          }
          break;
      }
    }
    else
    {
      switch(v8)
      {
        case 528384:
          uint64_t v13 = (int *)AirReflection::Node::node_as_OpaqueType(a1);
          uint64_t result = AirReflection::OpaqueType::HashImpl(v13, c);
          break;
        case 528385:
          uint64_t v140 = (int *)AirReflection::Node::node_as_VoidType(a1);
          uint64_t result = AirReflection::VoidType::HashImpl(v140, c);
          break;
        case 528386:
          uint64_t v141 = (int *)AirReflection::Node::node_as_BoolType(a1);
          uint64_t result = AirReflection::BoolType::HashImpl(v141, c);
          break;
        case 528387:
          v142 = (int *)AirReflection::Node::node_as_CharType(a1);
          uint64_t result = AirReflection::CharType::HashImpl(v142, c);
          break;
        case 528388:
          v143 = (int *)AirReflection::Node::node_as_UCharType(a1);
          uint64_t result = AirReflection::UCharType::HashImpl(v143, c);
          break;
        case 528389:
          v144 = (int *)AirReflection::Node::node_as_ShortType(a1);
          uint64_t result = AirReflection::ShortType::HashImpl(v144, c);
          break;
        case 528390:
          uint64_t v145 = (int *)AirReflection::Node::node_as_UShortType(a1);
          uint64_t result = AirReflection::UShortType::HashImpl(v145, c);
          break;
        case 528391:
          v146 = (int *)AirReflection::Node::node_as_IntType(a1);
          uint64_t result = AirReflection::IntType::HashImpl(v146, c);
          break;
        case 528392:
          char v147 = (int *)AirReflection::Node::node_as_UIntType(a1);
          uint64_t result = AirReflection::UIntType::HashImpl(v147, c);
          break;
        case 528393:
          long long v148 = (int *)AirReflection::Node::node_as_LongType(a1);
          uint64_t result = AirReflection::LongType::HashImpl(v148, c);
          break;
        case 528394:
          v149 = (int *)AirReflection::Node::node_as_ULongType(a1);
          uint64_t result = AirReflection::ULongType::HashImpl(v149, c);
          break;
        case 528395:
          long long v150 = (int *)AirReflection::Node::node_as_LLongType(a1);
          uint64_t result = AirReflection::LLongType::HashImpl(v150, c);
          break;
        case 528396:
          long long v151 = (int *)AirReflection::Node::node_as_ULLongType(a1);
          uint64_t result = AirReflection::ULLongType::HashImpl(v151, c);
          break;
        case 528397:
          long long v152 = (int *)AirReflection::Node::node_as_HalfType(a1);
          uint64_t result = AirReflection::HalfType::HashImpl(v152, c);
          break;
        case 528398:
          long long v153 = (int *)AirReflection::Node::node_as_FloatType(a1);
          uint64_t result = AirReflection::FloatType::HashImpl(v153, c);
          break;
        case 528399:
          long long v154 = (int *)AirReflection::Node::node_as_DoubleType(a1);
          uint64_t result = AirReflection::DoubleType::HashImpl(v154, c);
          break;
        case 528400:
          uint64_t v155 = (int *)AirReflection::Node::node_as_BFloatType(a1);
          uint64_t result = AirReflection::BFloatType::HashImpl(v155, c);
          break;
        case 528401:
          v156 = (int *)AirReflection::Node::node_as_VectorType(a1);
          uint64_t result = AirReflection::VectorType::HashImpl(v156, c);
          break;
        case 528402:
          uint64_t v157 = (int *)AirReflection::Node::node_as_PackedVectorType(a1);
          uint64_t result = AirReflection::PackedVectorType::HashImpl(v157, c);
          break;
        case 528403:
          v158 = (int *)AirReflection::Node::node_as_MatrixType(a1);
          uint64_t result = AirReflection::MatrixType::HashImpl(v158, c);
          break;
        case 528404:
          v159 = (int *)AirReflection::Node::node_as_FunctionType(a1);
          uint64_t result = AirReflection::FunctionType::HashImpl(v159, c);
          break;
        case 528405:
          v160 = (int *)AirReflection::Node::node_as_PointerType(a1);
          uint64_t result = AirReflection::PointerType::HashImpl(v160, c);
          break;
        case 528406:
          long long v161 = (int *)AirReflection::Node::node_as_LValueReferenceType(a1);
          uint64_t result = AirReflection::LValueReferenceType::HashImpl(v161, c);
          break;
        case 528407:
          long long v162 = (int *)AirReflection::Node::node_as_RValueReferenceType(a1);
          uint64_t result = AirReflection::RValueReferenceType::HashImpl(v162, c);
          break;
        case 528408:
          uint64_t v163 = (int *)AirReflection::Node::node_as_ArrayType(a1);
          uint64_t result = AirReflection::ArrayType::HashImpl(v163, c);
          break;
        case 528409:
          uint64_t v164 = (int *)AirReflection::Node::node_as_EnumType(a1);
          uint64_t result = AirReflection::EnumType::HashImpl(v164, c);
          break;
        case 528410:
          uint64_t v165 = (int *)AirReflection::Node::node_as_RecordBase(a1);
          uint64_t result = AirReflection::RecordBase::HashImpl(v165, c);
          break;
        case 528411:
          uint64_t v166 = (int *)AirReflection::Node::node_as_RecordField(a1);
          uint64_t result = AirReflection::RecordField::HashImpl(v166, c);
          break;
        case 528412:
          long long v167 = (int *)AirReflection::Node::node_as_StructType(a1);
          uint64_t result = AirReflection::StructType::HashImpl(v167, c);
          break;
        case 528413:
          long long v168 = (int *)AirReflection::Node::node_as_UnionType(a1);
          uint64_t result = AirReflection::UnionType::HashImpl(v168, c);
          break;
        default:
          goto LABEL_68;
      }
    }
  }
  else
  {
    if (v8 >= 536576)
    {
      switch(v8)
      {
        case 540672:
          AirReflection::Node::node_as_ClipDistanceAttr(a1);
          uint64_t v16 = "AirReflection.ClipDistanceAttr";
          uint64_t v17 = c;
          CC_LONG v18 = 30;
          return CC_SHA256_Update(v17, v16, v18);
        case 540673:
          uint64_t v181 = (int *)AirReflection::Node::node_as_FunctionConstantPredicateAttr(a1);
          return AirReflection::FunctionConstantPredicateAttr::HashImpl(v181, c);
        case 540674:
          v182 = (int *)AirReflection::Node::node_as_LocationIndexAttr(a1);
          return AirReflection::LocationIndexAttr::HashImpl(v182, c);
        case 540675:
          AirReflection::Node::node_as_PointSizeAttr(a1);
          uint64_t v16 = "AirReflection.PointSizeAttr";
          goto LABEL_222;
        case 540676:
          AirReflection::Node::node_as_PositionAttr(a1);
          uint64_t v16 = "AirReflection.PositionAttr";
          uint64_t v17 = c;
          CC_LONG v18 = 26;
          return CC_SHA256_Update(v17, v16, v18);
        case 540677:
          AirReflection::Node::node_as_PrimitiveCulledAttr(a1);
          uint64_t v16 = "AirReflection.PrimitiveCulledAttr";
          uint64_t v17 = c;
          CC_LONG v18 = 33;
          return CC_SHA256_Update(v17, v16, v18);
        case 540678:
          AirReflection::Node::node_as_PrimitiveIDAttr(a1);
          uint64_t v16 = "AirReflection.PrimitiveIDAttr";
          uint64_t v17 = c;
          CC_LONG v18 = 29;
          return CC_SHA256_Update(v17, v16, v18);
        case 540679:
          v183 = (int *)AirReflection::Node::node_as_RenderTargetAttr(a1);
          return AirReflection::RenderTargetAttr::HashImpl(v183, c);
        case 540680:
          AirReflection::Node::node_as_RenderTargetArrayIndexAttr(a1);
          uint64_t v16 = "AirReflection.RenderTargetArrayIndexAttr";
          uint64_t v17 = c;
          CC_LONG v18 = 40;
          return CC_SHA256_Update(v17, v16, v18);
        case 540681:
          AirReflection::Node::node_as_ViewportArrayIndexAttr(a1);
          uint64_t v16 = "AirReflection.ViewportArrayIndexAttr";
          uint64_t v17 = c;
          CC_LONG v18 = 36;
          return CC_SHA256_Update(v17, v16, v18);
        case 540682:
          v184 = (int *)AirReflection::Node::node_as_UserAttr(a1);
          return AirReflection::UserAttr::HashImpl(v184, c);
        case 540683:
          AirReflection::Node::node_as_InvariantAttr(a1);
          uint64_t v16 = "AirReflection.InvariantAttr";
LABEL_222:
          uint64_t v17 = c;
          CC_LONG v18 = 27;
          return CC_SHA256_Update(v17, v16, v18);
        case 540684:
          AirReflection::Node::node_as_SharedAttr(a1);
          uint64_t v16 = "AirReflection.SharedAttr";
          uint64_t v17 = c;
          CC_LONG v18 = 24;
          return CC_SHA256_Update(v17, v16, v18);
        default:
          switch(v8)
          {
            case 544768:
              unint64_t v23 = (int *)AirReflection::Node::node_as_MeshEmulationValueGroup(a1);
              uint64_t result = AirReflection::MeshEmulation::ValueGroup::HashImpl(v23, c);
              break;
            case 544769:
              v213 = (int *)AirReflection::Node::node_as_MeshEmulationBlock(a1);
              uint64_t result = AirReflection::MeshEmulation::Block::HashImpl(v213, c);
              break;
            case 544770:
              v214 = (int *)AirReflection::Node::node_as_MeshEmulationMeshLayout(a1);
              uint64_t result = AirReflection::MeshEmulation::MeshLayout::HashImpl(v214, c);
              break;
            case 544771:
              v215 = (int *)AirReflection::Node::node_as_MeshEmulationMeshKernel(a1);
              uint64_t result = AirReflection::MeshEmulation::MeshKernel::HashImpl(v215, c);
              break;
            case 544772:
              v216 = (int *)AirReflection::Node::node_as_MeshEmulationMeshVertex(a1);
              uint64_t result = AirReflection::MeshEmulation::MeshVertex::HashImpl(v216, c);
              break;
            case 544773:
              v217 = (int *)AirReflection::Node::node_as_MeshEmulationObjectKernel(a1);
              uint64_t result = AirReflection::MeshEmulation::ObjectKernel::HashImpl(v217, c);
              break;
            case 544774:
              v218 = (int *)AirReflection::Node::node_as_MeshEmulationFragmentAnalysisResult(a1);
              uint64_t result = AirReflection::MeshEmulation::FragmentAnalysisResult::HashImpl(v218, c);
              break;
            default:
              if (v8 != 536576) {
                goto LABEL_68;
              }
              uint64_t v40 = (int *)AirReflection::Node::node_as_AddressSpaceTypeQual(a1);
              uint64_t result = AirReflection::AddressSpaceTypeQual::HashImpl(v40, c);
              break;
          }
          return result;
      }
    }
    switch(v8)
    {
      case 532480:
        uint64_t v11 = (int *)AirReflection::Node::node_as_ArrayOfType(a1);
        uint64_t result = AirReflection::ArrayOfType::HashImpl(v11, c);
        break;
      case 532481:
        int v73 = (int *)AirReflection::Node::node_as_ArrayRefOfType(a1);
        uint64_t result = AirReflection::ArrayRefOfType::HashImpl(v73, c);
        break;
      case 532482:
        __int16 v74 = (int *)AirReflection::Node::node_as_Texture1dType(a1);
        uint64_t result = AirReflection::Texture1dType::HashImpl(v74, c);
        break;
      case 532483:
        uint64_t v75 = (int *)AirReflection::Node::node_as_Texture1dArrayType(a1);
        uint64_t result = AirReflection::Texture1dArrayType::HashImpl(v75, c);
        break;
      case 532484:
        __int16 v76 = (int *)AirReflection::Node::node_as_Texture2dType(a1);
        uint64_t result = AirReflection::Texture2dType::HashImpl(v76, c);
        break;
      case 532485:
        double v77 = (int *)AirReflection::Node::node_as_Texture2dArrayType(a1);
        uint64_t result = AirReflection::Texture2dArrayType::HashImpl(v77, c);
        break;
      case 532486:
        uint64_t v78 = (int *)AirReflection::Node::node_as_Texture3dType(a1);
        uint64_t result = AirReflection::Texture3dType::HashImpl(v78, c);
        break;
      case 532487:
        uint64_t v79 = (int *)AirReflection::Node::node_as_TextureCubeType(a1);
        uint64_t result = AirReflection::TextureCubeType::HashImpl(v79, c);
        break;
      case 532488:
        int v80 = (int *)AirReflection::Node::node_as_TextureCubeArrayType(a1);
        uint64_t result = AirReflection::TextureCubeArrayType::HashImpl(v80, c);
        break;
      case 532489:
        int v81 = (int *)AirReflection::Node::node_as_Texture2dMsType(a1);
        uint64_t result = AirReflection::Texture2dMsType::HashImpl(v81, c);
        break;
      case 532490:
        unint64_t v82 = (int *)AirReflection::Node::node_as_Texture2dMsArrayType(a1);
        uint64_t result = AirReflection::Texture2dMsArrayType::HashImpl(v82, c);
        break;
      case 532491:
        v83 = (int *)AirReflection::Node::node_as_TextureBuffer1dType(a1);
        uint64_t result = AirReflection::TextureBuffer1dType::HashImpl(v83, c);
        break;
      case 532492:
        uint64_t v84 = (int *)AirReflection::Node::node_as_Depth2dType(a1);
        uint64_t result = AirReflection::Depth2dType::HashImpl(v84, c);
        break;
      case 532493:
        uint64_t v85 = (int *)AirReflection::Node::node_as_Depth2dArrayType(a1);
        uint64_t result = AirReflection::Depth2dArrayType::HashImpl(v85, c);
        break;
      case 532494:
        unint64_t v86 = (int *)AirReflection::Node::node_as_DepthCubeType(a1);
        uint64_t result = AirReflection::DepthCubeType::HashImpl(v86, c);
        break;
      case 532495:
        unsigned int v87 = (int *)AirReflection::Node::node_as_DepthCubeArrayType(a1);
        uint64_t result = AirReflection::DepthCubeArrayType::HashImpl(v87, c);
        break;
      case 532496:
        uint64_t v88 = (int *)AirReflection::Node::node_as_Depth2dMsType(a1);
        uint64_t result = AirReflection::Depth2dMsType::HashImpl(v88, c);
        break;
      case 532497:
        int v89 = (int *)AirReflection::Node::node_as_Depth2dMsArrayType(a1);
        uint64_t result = AirReflection::Depth2dMsArrayType::HashImpl(v89, c);
        break;
      case 532498:
        v90 = (int *)AirReflection::Node::node_as_SamplerType(a1);
        uint64_t result = AirReflection::SamplerType::HashImpl(v90, c);
        break;
      case 532499:
        size_t v91 = (int *)AirReflection::Node::node_as_PatchControlPointType(a1);
        uint64_t result = AirReflection::PatchControlPointType::HashImpl(v91, c);
        break;
      case 532500:
        char v92 = (int *)AirReflection::Node::node_as_ImageblockType(a1);
        uint64_t result = AirReflection::ImageblockType::HashImpl(v92, c);
        break;
      case 532501:
        char v93 = (int *)AirReflection::Node::node_as_R8UNormType(a1);
        uint64_t result = AirReflection::R8UNormType::HashImpl(v93, c);
        break;
      case 532502:
        int v94 = (int *)AirReflection::Node::node_as_R8SNormType(a1);
        uint64_t result = AirReflection::R8SNormType::HashImpl(v94, c);
        break;
      case 532503:
        unsigned int v95 = (int *)AirReflection::Node::node_as_R16UNormType(a1);
        uint64_t result = AirReflection::R16UNormType::HashImpl(v95, c);
        break;
      case 532504:
        int v96 = (int *)AirReflection::Node::node_as_R16SNormType(a1);
        uint64_t result = AirReflection::R16SNormType::HashImpl(v96, c);
        break;
      case 532505:
        uint64_t v97 = (int *)AirReflection::Node::node_as_RG8UNormType(a1);
        uint64_t result = AirReflection::RG8UNormType::HashImpl(v97, c);
        break;
      case 532506:
        uint64_t v98 = (int *)AirReflection::Node::node_as_RG8SNormType(a1);
        uint64_t result = AirReflection::RG8SNormType::HashImpl(v98, c);
        break;
      case 532507:
        int v99 = (int *)AirReflection::Node::node_as_RG16UNormType(a1);
        uint64_t result = AirReflection::RG16UNormType::HashImpl(v99, c);
        break;
      case 532508:
        int v100 = (int *)AirReflection::Node::node_as_RG16SNormType(a1);
        uint64_t result = AirReflection::RG16SNormType::HashImpl(v100, c);
        break;
      case 532509:
        uint64_t v101 = (int *)AirReflection::Node::node_as_RGBA8UNormType(a1);
        uint64_t result = AirReflection::RGBA8UNormType::HashImpl(v101, c);
        break;
      case 532510:
        int v102 = (int *)AirReflection::Node::node_as_RGBA8SNormType(a1);
        uint64_t result = AirReflection::RGBA8SNormType::HashImpl(v102, c);
        break;
      case 532511:
        int v103 = (int *)AirReflection::Node::node_as_RGBA16UNormType(a1);
        uint64_t result = AirReflection::RGBA16UNormType::HashImpl(v103, c);
        break;
      case 532512:
        unint64_t v104 = (int *)AirReflection::Node::node_as_RGBA16SNormType(a1);
        uint64_t result = AirReflection::RGBA16SNormType::HashImpl(v104, c);
        break;
      case 532513:
        unsigned int v105 = (int *)AirReflection::Node::node_as_SRGBA8UNormType(a1);
        uint64_t result = AirReflection::SRGBA8UNormType::HashImpl(v105, c);
        break;
      case 532514:
        v106 = (int *)AirReflection::Node::node_as_RGB10A2Type(a1);
        uint64_t result = AirReflection::RGB10A2Type::HashImpl(v106, c);
        break;
      case 532515:
        v107 = (int *)AirReflection::Node::node_as_RG11B10FType(a1);
        uint64_t result = AirReflection::RG11B10FType::HashImpl(v107, c);
        break;
      case 532516:
        v108 = (int *)AirReflection::Node::node_as_RGB9E5Type(a1);
        uint64_t result = AirReflection::RGB9E5Type::HashImpl(v108, c);
        break;
      case 532517:
        v109 = (int *)AirReflection::Node::node_as_CommandBufferType(a1);
        uint64_t result = AirReflection::CommandBufferType::HashImpl(v109, c);
        break;
      case 532518:
        uint64_t v110 = (int *)AirReflection::Node::node_as_ComputePipelineStateType(a1);
        uint64_t result = AirReflection::ComputePipelineStateType::HashImpl(v110, c);
        break;
      case 532519:
        uint64_t v111 = (int *)AirReflection::Node::node_as_RenderPipelineStateType(a1);
        uint64_t result = AirReflection::RenderPipelineStateType::HashImpl(v111, c);
        break;
      case 532520:
        v112 = (int *)AirReflection::Node::node_as_InterpolantType(a1);
        uint64_t result = AirReflection::InterpolantType::HashImpl(v112, c);
        break;
      case 532521:
        uint64_t v113 = (int *)AirReflection::Node::node_as_VisibleFunctionTableType(a1);
        uint64_t result = AirReflection::VisibleFunctionTableType::HashImpl(v113, c);
        break;
      case 532522:
        v114 = (int *)AirReflection::Node::node_as_IntersectionFunctionTableType(a1);
        uint64_t result = AirReflection::IntersectionFunctionTableType::HashImpl(v114, c);
        break;
      case 532523:
        v115 = (int *)AirReflection::Node::node_as_AccelerationStructureType(a1);
        uint64_t result = AirReflection::AccelerationStructureType::HashImpl(v115, c);
        break;
      case 532524:
        v116 = (int *)AirReflection::Node::node_as_MeshType(a1);
        uint64_t result = AirReflection::MeshType::HashImpl(v116, c);
        break;
      case 532525:
        v117 = (int *)AirReflection::Node::node_as_MeshGridPropertiesType(a1);
        uint64_t result = AirReflection::MeshGridPropertiesType::HashImpl(v117, c);
        break;
      default:
        goto LABEL_68;
    }
  }
  return result;
}

uint64_t AirReflection::Node::node_as_StructTypeInfo(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524289) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StructTypeInfo::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.StructTypeInfo", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
    int data = *v6;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v8 = *v6;
    if (v8)
    {
      uint64_t v9 = v6 + 1;
      size_t v10 = v6 + 1;
      do
      {
        unsigned int v11 = *v10++;
        uint64_t result = AirReflection::StructTypeInfoField::HashImpl((int *)((char *)v9 + v11), c);
        uint64_t v9 = v10;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    int v13 = 0;
    return CC_SHA256_Update(c, &v13, 4u);
  }
  return result;
}

uint64_t AirReflection::StructTypeInfoField::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.StructTypeInfoField", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    uint64_t v6 = v5;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v6);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 < 7u)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    uint64_t v8 = v7[3];
    if (v8) {
      LODWORD(v8) = *(int *)((char *)a1 + v8);
    }
  }
  int data = v8;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 < 9u)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    uint64_t v10 = v9[4];
    if (v10) {
      LODWORD(v10) = *(int *)((char *)a1 + v10);
    }
  }
  int data = v10;
  CC_SHA256_Update(c, &data, 4u);
  unsigned int v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 < 0xBu)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v12 = v11[5];
    if (v12) {
      LODWORD(v12) = *(int *)((char *)a1 + v12);
    }
  }
  int data = v12;
  CC_SHA256_Update(c, &data, 4u);
  int v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 0xDu && (uint64_t v14 = v13[6]) != 0)
  {
    size_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    p_int data = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    long long v19 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    long long v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, p_data, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0xFu && (uint64_t v21 = v20[7]) != 0)
  {
    uint64_t v22 = (unsigned int *)((char *)a1 + v21);
    uint64_t v23 = *v22;
    int v24 = (int *)((char *)v22 + v23 + 4);
    CC_LONG v25 = *(unsigned int *)((char *)v22 + v23);
    uint64_t v26 = c;
  }
  else
  {
    int data = 0;
    int v24 = &data;
    uint64_t v26 = c;
    CC_LONG v25 = 4;
  }
  CC_SHA256_Update(v26, v24, v25);
  uint64_t v27 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v27 >= 0x11u && (uint64_t v28 = v27[8]) != 0)
  {
    uint64_t v29 = (unsigned int *)((char *)a1 + v28);
    uint64_t v30 = *v29;
    uint64_t v31 = (int *)((char *)v29 + v30 + 4);
    CC_LONG v32 = *(unsigned int *)((char *)v29 + v30);
    long long v33 = c;
  }
  else
  {
    int data = 0;
    uint64_t v31 = &data;
    long long v33 = c;
    CC_LONG v32 = 4;
  }
  CC_SHA256_Update(v33, v31, v32);
  uint64_t v34 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v34 >= 0x13u && (unsigned __int16 v35 = v34[9]) != 0)
  {
    uint64_t v36 = v35;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v36);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v37 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v37 >= 0x15u && (unsigned __int16 v38 = v37[10]) != 0)
  {
    uint64_t v39 = v38;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v39);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v40 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v40 >= 0x17u && (unsigned __int16 v41 = v40[11]) != 0)
  {
    uint64_t v42 = v41;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v42);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v43 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v43 >= 0x19u && (unsigned __int16 v44 = v43[12]) != 0)
  {
    uint64_t v45 = v44;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v45);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v46 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v46 >= 0x1Bu && (unsigned __int16 v47 = v46[13]) != 0)
  {
    uint64_t v48 = v47;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v48);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::BufferArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.BufferArg", 0x17u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (unsigned __int16 v13 = v12[5]) != 0)
  {
    uint64_t v14 = v13;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v14);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  size_t v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xDu)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    uint64_t v16 = v15[6];
    if (v16) {
      LODWORD(v16) = *((unsigned __int8 *)a1 + v16);
    }
  }
  int data = v16;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (uint64_t v18 = v17[7]) != 0) {
    int v19 = *((unsigned __int8 *)a1 + v18);
  }
  else {
    int v19 = 1;
  }
  int data = v19;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0x11u && (unsigned __int16 v21 = v20[8]) != 0)
  {
    uint64_t v22 = v21;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v22);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0x13u && (unsigned __int16 v24 = v23[9]) != 0)
  {
    uint64_t v25 = v24;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v25);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 >= 0x15u && (unsigned __int16 v27 = v26[10]) != 0)
  {
    uint64_t v28 = v27;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v28);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 >= 0x17u && (unsigned __int16 v30 = v29[11]) != 0)
  {
    uint64_t v31 = v30;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v31);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v32 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v32 >= 0x19u && (uint64_t v33 = v32[12]) != 0)
  {
    uint64_t v34 = (unsigned int *)((char *)a1 + v33);
    uint64_t v35 = *v34;
    p_int data = (int *)((char *)v34 + v35 + 4);
    CC_LONG v37 = *(unsigned int *)((char *)v34 + v35);
    unsigned __int16 v38 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    unsigned __int16 v38 = c;
    CC_LONG v37 = 4;
  }
  CC_SHA256_Update(v38, p_data, v37);
  uint64_t v39 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v39 >= 0x1Bu && (uint64_t v40 = v39[13]) != 0)
  {
    unsigned __int16 v41 = (unsigned int *)((char *)a1 + v40);
    uint64_t v42 = *v41;
    uint64_t v43 = (int *)((char *)v41 + v42 + 4);
    CC_LONG v44 = *(unsigned int *)((char *)v41 + v42);
    uint64_t v45 = c;
  }
  else
  {
    int data = 0;
    uint64_t v43 = &data;
    uint64_t v45 = c;
    CC_LONG v44 = 4;
  }
  CC_SHA256_Update(v45, v43, v44);
  uint64_t v46 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v46 < 0x1Du)
  {
    LOBYTE(v47) = 0;
  }
  else
  {
    uint64_t v47 = v46[14];
    if (v47) {
      LOBYTE(v47) = *((unsigned char *)a1 + v47) != 0;
    }
  }
  LOBYTE(data) = v47;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v48 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v48 >= 0x1Fu && (unsigned __int16 v49 = v48[15]) != 0)
  {
    uint64_t v50 = v49;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v50);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_BufferArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 0x40000)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_FragmentInputArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 274432)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::FragmentInputArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.FragmentInputArg", 0x1Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    p_int data = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, p_data, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (unsigned __int16 v14 = v13[4]) != 0)
  {
    uint64_t v15 = v14;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v15);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 < 0xBu)
  {
    LODWORD(v17) = 0;
  }
  else
  {
    uint64_t v17 = v16[5];
    if (v17) {
      LODWORD(v17) = *((unsigned __int8 *)a1 + v17);
    }
  }
  int data = v17;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 0xDu)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = v18[6];
    if (v19) {
      LODWORD(v19) = *((unsigned __int8 *)a1 + v19);
    }
  }
  int data = v19;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0xFu && (uint64_t v21 = v20[7]) != 0)
  {
    uint64_t v22 = (unsigned int *)((char *)a1 + v21);
    uint64_t v23 = *v22;
    unsigned __int16 v24 = (int *)((char *)v22 + v23 + 4);
    CC_LONG v25 = *(unsigned int *)((char *)v22 + v23);
    uint64_t v26 = c;
  }
  else
  {
    int data = 0;
    unsigned __int16 v24 = &data;
    uint64_t v26 = c;
    CC_LONG v25 = 4;
  }
  CC_SHA256_Update(v26, v24, v25);
  unsigned __int16 v27 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v27 >= 0x11u && (uint64_t v28 = v27[8]) != 0)
  {
    uint64_t v29 = (unsigned int *)((char *)a1 + v28);
    uint64_t v30 = *v29;
    uint64_t v31 = (int *)((char *)v29 + v30 + 4);
    CC_LONG v32 = *(unsigned int *)((char *)v29 + v30);
    uint64_t v33 = c;
  }
  else
  {
    int data = 0;
    uint64_t v31 = &data;
    uint64_t v33 = c;
    CC_LONG v32 = 4;
  }
  CC_SHA256_Update(v33, v31, v32);
  uint64_t v34 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v34 < 0x13u)
  {
    LOBYTE(v35) = 0;
  }
  else
  {
    uint64_t v35 = v34[9];
    if (v35) {
      LOBYTE(v35) = *((unsigned char *)a1 + v35) != 0;
    }
  }
  LOBYTE(data) = v35;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_PositionArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274434) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PositionArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PositionArg", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  int v6 = 1;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u)
  {
    uint64_t v8 = v7[3];
    if (v8) {
      int v6 = *((unsigned __int8 *)a1 + v8);
    }
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0) {
    int v11 = *((unsigned __int8 *)a1 + v10);
  }
  else {
    int v11 = 3;
  }
  int data = v11;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0)
  {
    unsigned __int16 v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    p_int data = (int *)((char *)v14 + v15 + 4);
    CC_LONG v17 = *(unsigned int *)((char *)v14 + v15);
    uint64_t v18 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v18 = c;
    CC_LONG v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0)
  {
    uint64_t v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    uint64_t v23 = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    CC_LONG v25 = c;
  }
  else
  {
    int data = 0;
    uint64_t v23 = &data;
    CC_LONG v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  uint64_t v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[7];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t Air::Version::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "Air.Version", 0xBu);
  int data = *a1;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = a1[1];
  CC_SHA256_Update(c, &v6, 4u);
  int v7 = a1[2];
  return CC_SHA256_Update(c, &v7, 4u);
}

uint64_t flatbuffers::SignatureBuilder::Create@<X0>(CC_SHA256_CTX *this@<X0>, unsigned __int8 **a2@<X8>)
{
  return CC_SHA256_Final(*a2, this);
}

void sub_25570679C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<signed char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    uint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_255706810(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<signed char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t AirReflection::Node::node_as_FragmentFunction(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 1) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_RenderTargetRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 135168)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_TextureArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262146) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_SamplerArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262145) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::FragmentFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.FragmentFunction", 0x1Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    int v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    uint64_t v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  int v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    uint64_t v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    int data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v13;
    if (v14)
    {
      uint64_t v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  CC_LONG v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0)
  {
    uint64_t v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    int data = *v19;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v20 = *v19;
    if (v20)
    {
      uint64_t v21 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v22 = *v21++;
        int data = v22;
        CC_SHA256_Update(c, &data, 4u);
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 < 0xBu)
  {
    LOBYTE(v24) = 0;
  }
  else
  {
    uint64_t v24 = v23[5];
    if (v24) {
      LOBYTE(v24) = *((unsigned char *)a1 + v24) != 0;
    }
  }
  LOBYTE(data) = v24;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::RenderTargetRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RenderTargetRet", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (unsigned __int16 v13 = v12[5]) != 0)
  {
    uint64_t v14 = v13;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v14);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xDu)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    uint64_t v16 = v15[6];
    if (v16) {
      LODWORD(v16) = *((unsigned __int8 *)a1 + v16);
    }
  }
  int data = v16;
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (uint64_t v18 = v17[7]) != 0)
  {
    uint64_t v19 = (unsigned int *)((char *)a1 + v18);
    uint64_t v20 = *v19;
    p_int data = (int *)((char *)v19 + v20 + 4);
    CC_LONG v22 = *(unsigned int *)((char *)v19 + v20);
    uint64_t v23 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v23 = c;
    CC_LONG v22 = 4;
  }
  CC_SHA256_Update(v23, p_data, v22);
  uint64_t v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0x11u && (uint64_t v25 = v24[8]) != 0)
  {
    uint64_t v26 = (unsigned int *)((char *)a1 + v25);
    uint64_t v27 = *v26;
    uint64_t v28 = (int *)((char *)v26 + v27 + 4);
    CC_LONG v29 = *(unsigned int *)((char *)v26 + v27);
    uint64_t v30 = c;
  }
  else
  {
    int data = 0;
    uint64_t v28 = &data;
    uint64_t v30 = c;
    CC_LONG v29 = 4;
  }
  return CC_SHA256_Update(v30, v28, v29);
}

uint64_t AirReflection::TextureArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.TextureArg", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 0xBu)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v13 = v12[5];
    if (v13) {
      LODWORD(v13) = *((unsigned __int8 *)a1 + v13);
    }
  }
  int data = v13;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xDu && (unsigned __int16 v15 = v14[6]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (uint64_t v18 = v17[7]) != 0)
  {
    uint64_t v19 = (unsigned int *)((char *)a1 + v18);
    uint64_t v20 = *v19;
    p_int data = (int *)((char *)v19 + v20 + 4);
    CC_LONG v22 = *(unsigned int *)((char *)v19 + v20);
    uint64_t v23 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v23 = c;
    CC_LONG v22 = 4;
  }
  CC_SHA256_Update(v23, p_data, v22);
  uint64_t v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0x11u && (uint64_t v25 = v24[8]) != 0)
  {
    uint64_t v26 = (unsigned int *)((char *)a1 + v25);
    uint64_t v27 = *v26;
    uint64_t v28 = (int *)((char *)v26 + v27 + 4);
    CC_LONG v29 = *(unsigned int *)((char *)v26 + v27);
    uint64_t v30 = c;
  }
  else
  {
    int data = 0;
    uint64_t v28 = &data;
    uint64_t v30 = c;
    CC_LONG v29 = 4;
  }
  CC_SHA256_Update(v30, v28, v29);
  uint64_t v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 < 0x13u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    uint64_t v32 = v31[9];
    if (v32) {
      LOBYTE(v32) = *((unsigned char *)a1 + v32) != 0;
    }
  }
  LOBYTE(data) = v32;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::SamplerArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.SamplerArg", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0)
  {
    uint64_t v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    p_int data = (int *)((char *)v14 + v15 + 4);
    CC_LONG v17 = *(unsigned int *)((char *)v14 + v15);
    uint64_t v18 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v18 = c;
    CC_LONG v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0)
  {
    uint64_t v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    uint64_t v23 = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    uint64_t v25 = c;
  }
  else
  {
    int data = 0;
    uint64_t v23 = &data;
    uint64_t v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  uint64_t v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[7];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_RenderTargetArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274436) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RenderTargetArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RenderTargetArg", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0)
  {
    uint64_t v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    p_int data = (int *)((char *)v14 + v15 + 4);
    CC_LONG v17 = *(unsigned int *)((char *)v14 + v15);
    uint64_t v18 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v18 = c;
    CC_LONG v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0)
  {
    uint64_t v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    uint64_t v23 = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    uint64_t v25 = c;
  }
  else
  {
    int data = 0;
    uint64_t v23 = &data;
    uint64_t v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  uint64_t v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[7];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_VertexOutputRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131076) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VertexOutputRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.VertexOutputRet", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    p_int data = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, p_data, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (unsigned __int16 v14 = v13[4]) != 0)
  {
    uint64_t v15 = v14;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v15);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 < 0xBu)
  {
    LOBYTE(v17) = 0;
  }
  else
  {
    uint64_t v17 = v16[5];
    if (v17) {
      LOBYTE(v17) = *((unsigned char *)a1 + v17) != 0;
    }
  }
  LOBYTE(data) = v17;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 >= 0xDu && (uint64_t v19 = v18[6]) != 0)
  {
    uint64_t v20 = (unsigned int *)((char *)a1 + v19);
    uint64_t v21 = *v20;
    uint64_t v22 = (int *)((char *)v20 + v21 + 4);
    CC_LONG v23 = *(unsigned int *)((char *)v20 + v21);
    CC_LONG v24 = c;
  }
  else
  {
    int data = 0;
    uint64_t v22 = &data;
    CC_LONG v24 = c;
    CC_LONG v23 = 4;
  }
  CC_SHA256_Update(v24, v22, v23);
  uint64_t v25 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v25 >= 0xFu && (uint64_t v26 = v25[7]) != 0)
  {
    uint64_t v27 = (unsigned int *)((char *)a1 + v26);
    uint64_t v28 = *v27;
    CC_LONG v29 = (int *)((char *)v27 + v28 + 4);
    CC_LONG v30 = *(unsigned int *)((char *)v27 + v28);
    uint64_t v31 = c;
  }
  else
  {
    int data = 0;
    CC_LONG v29 = &data;
    uint64_t v31 = c;
    CC_LONG v30 = 4;
  }
  return CC_SHA256_Update(v31, v29, v30);
}

uint64_t AirReflection::Node::node_as_VertexInputArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270340) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VertexInputArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.VertexInputArg", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0)
  {
    unsigned __int16 v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    p_int data = (int *)((char *)v14 + v15 + 4);
    CC_LONG v17 = *(unsigned int *)((char *)v14 + v15);
    uint64_t v18 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v18 = c;
    CC_LONG v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0)
  {
    uint64_t v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    CC_LONG v23 = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    uint64_t v25 = c;
  }
  else
  {
    int data = 0;
    CC_LONG v23 = &data;
    uint64_t v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  uint64_t v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[7];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_VertexFunction(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 3) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PositionRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131074) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VertexFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.VertexFunction", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    int v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    unsigned __int16 v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    unsigned __int16 v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    uint64_t v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    int data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v13;
    if (v14)
    {
      uint64_t v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  CC_LONG v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0)
  {
    uint64_t v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    int data = *v19;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v20 = *v19;
    if (v20)
    {
      uint64_t v21 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v22 = *v21++;
        int data = v22;
        CC_SHA256_Update(c, &data, 4u);
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  CC_LONG v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0xBu && (unsigned __int16 v24 = v23[5]) != 0)
  {
    uint64_t v25 = v24;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v25);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::PositionRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PositionRet", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LOBYTE(v7) = *((unsigned char *)a1 + v7) != 0;
    }
  }
  char v26 = v7;
  CC_SHA256_Update(c, &v26, 1u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 < 9u)
  {
    LOBYTE(v9) = 0;
  }
  else
  {
    uint64_t v9 = v8[4];
    if (v9) {
      LOBYTE(v9) = *((unsigned char *)a1 + v9) != 0;
    }
  }
  char v27 = v9;
  CC_SHA256_Update(c, &v27, 1u);
  unsigned __int16 v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 0xBu && (uint64_t v11 = v10[5]) != 0)
  {
    uint64_t v12 = (unsigned int *)((char *)a1 + v11);
    uint64_t v13 = *v12;
    uint64_t v14 = (int *)((char *)v12 + v13 + 4);
    CC_LONG v15 = *(unsigned int *)((char *)v12 + v13);
    int v16 = c;
  }
  else
  {
    int v28 = 0;
    uint64_t v14 = &v28;
    int v16 = c;
    CC_LONG v15 = 4;
  }
  CC_SHA256_Update(v16, v14, v15);
  CC_LONG v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xDu && (uint64_t v18 = v17[6]) != 0)
  {
    uint64_t v19 = (unsigned int *)((char *)a1 + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = (int *)((char *)v19 + v20 + 4);
    CC_LONG v22 = *(unsigned int *)((char *)v19 + v20);
    CC_LONG v23 = c;
  }
  else
  {
    int v29 = 0;
    uint64_t v21 = &v29;
    CC_LONG v23 = c;
    CC_LONG v22 = 4;
  }
  return CC_SHA256_Update(v23, v21, v22);
}

uint64_t MTLCompilerObject::loadModule(uint64_t a1, void *a2, uint64_t a3, llvm::LLVMContext *a4)
{
  if (*(unsigned char *)(a1 + 128)) {
    return 1;
  }
  uint64_t v7 = (void *)a2[6];
  uint64_t v8 = a2[4];
  if ((*(unsigned char *)(v8 + 3) & 4) != 0)
  {
    uint64_t v7 = (void *)MTLCompilerObject::invokeFunctionLoader(a1, (unsigned int *)v8, a2[1], a4, v7, *(void *)(a3 + 128), *(void *)(a3 + 136), a2[3]);
    *(_DWORD *)a2[4] &= ~0x4000000u;
  }
  BOOL v4 = v7 != 0;
  if (!v7)
  {
    free(*(void **)(a3 + 128));
    *(void *)(a3 + 128) = 0;
  }
  a2[6] = v7;
  return v4;
}

uint64_t MTLCompilerObject::invokeFunctionLoader(uint64_t a1, unsigned int *a2, unint64_t a3, llvm::LLVMContext *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v71[1] = *MEMORY[0x263EF8340];
  if (a6
    && (uint64_t v14 = [MEMORY[0x263EFF8F8] dataWithBytesNoCopy:a6 length:a7 freeWhenDone:0],
        (CC_LONG v15 = (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x263F08AC0], "propertyListWithData:options:format:error:", v14, 0, 0, 0), "objectForKeyedSubscript:", @"LinkerScript_module"), "UTF8String")) != 0))
  {
    uint64_t LoaderScript = MTLCompilerObject::createLoaderScript(a1, v15, a8);
  }
  else
  {
    uint64_t LoaderScript = 0;
  }
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v62 = a5;
  llvm::SmallVector<LLVMOpaqueModule *,1u>::SmallVector((uint64_t)&v69, &v62, 1);
  if (!MTLCompilerObject::readVisibleFunctions(a1, (uint64_t)&v69, a4, a2[37], a2[36], (uint64_t)a2, a3, (uint64_t)a2, 0))
  {
    (*(void (**)(uint64_t, void, void, void))(a8 + 16))(a8, 2 * (*(void *)(a1 + 120) != 0), 0, 0);
    uint64_t v32 = 0;
    goto LABEL_51;
  }
  if (a2[38])
  {
    unsigned __int16 v41 = a4;
    uint64_t v42 = a1;
    uint64_t v40 = a2;
    uint64_t v16 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", (char *)a2 + a2[39]);
    long long v59 = 0;
    CC_LONG v17 = (void *)MEMORY[0x263F08928];
    uint64_t v18 = (void *)MEMORY[0x263EFFA08];
    uint64_t v19 = objc_opt_class();
    uint64_t v20 = objc_opt_class();
    uint64_t v21 = objc_msgSend(v17, "unarchivedObjectOfClasses:fromData:error:", objc_msgSend(v18, "setWithObjects:", v19, v20, objc_opt_class(), 0), v16, &v59);
    uint64_t v39 = a8;
    uint64_t v62 = v64;
    uint64_t v63 = 0;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    uint64_t v22 = [v21 countByEnumeratingWithState:&v53 objects:v68 count:16];
    if (v22)
    {
      uint64_t v23 = *(void *)v54;
      do
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          if (*(void *)v54 != v23) {
            objc_enumerationMutation(v21);
          }
          uint64_t v25 = *(void **)(*((void *)&v53 + 1) + 8 * i);
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s.__r_.__value_.__r.__words[2];
          __s.__r_.__value_.__l.__size_ = 0;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          char v26 = (void *)[v21 objectForKeyedSubscript:v25];
          uint64_t v27 = [v26 countByEnumeratingWithState:&v49 objects:v67 count:16];
          if (v27)
          {
            uint64_t v28 = *(void *)v50;
            do
            {
              for (uint64_t j = 0; j != v27; ++j)
              {
                if (*(void *)v50 != v28) {
                  objc_enumerationMutation(v26);
                }
                llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&__s, [*(id *)(*((void *)&v49 + 1) + 8 * j) UTF8String]);
              }
              uint64_t v27 = [v26 countByEnumeratingWithState:&v49 objects:v67 count:16];
            }
            while (v27);
          }
          [v25 UTF8String];
          uint64_t v30 = MTLFunctionGroupCreate();
          llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&v62, v30);
          if ((std::string::size_type *)__s.__r_.__value_.__l.__data_ != &__s.__r_.__value_.__r.__words[2]) {
            free(__s.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v22 = [v21 countByEnumeratingWithState:&v53 objects:v68 count:16];
      }
      while (v22);
    }
    a1 = v42;
    MTLGPUCompilerSetFunctionGroups();
    a8 = v39;
    a2 = v40;
    a4 = v41;
    if (v62 != v64) {
      free(v62);
    }
  }
  memset(&__s, 0, sizeof(__s));
  if (MTLCompilerObject::readVisibleFunctions(a1, (uint64_t)&v69, a4, a2[41], a2[40], (uint64_t)a2, a3, (uint64_t)a2, &__s))
  {
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__s.__r_.__value_.__l.__size_)
      {
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_33;
      }
    }
    else if (*((unsigned char *)&__s.__r_.__value_.__s + 23))
    {
      p_s = &__s;
LABEL_33:
      uint64_t LoaderScript = MTLCompilerObject::createLoaderScript(a1, (char *)p_s, a8);
    }
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    v64[0] = v65;
    v64[1] = 0x400000000;
    v65[4] = v66;
    v65[5] = 0;
    v66[0] = 0;
    v66[1] = 1;
    uint64_t v47 = &v62;
    __p[0] = 0;
    llvm::SmallVector<char const*,1u>::SmallVector(&v59, v70, (uint64_t *)__p);
    uint64_t v33 = v60;
    if (v60)
    {
      uint64_t v34 = 0;
      do
      {
        std::to_string(&v44, v34);
        uint64_t v35 = std::string::insert(&v44, 0, "linked-air-blob-");
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        std::string::size_type v46 = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        *((void *)v59 + v34) = llvm::StringSaver::save();
        if (SHIBYTE(v46) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        ++v34;
      }
      while (v33 != v34);
    }
    MTLGPUCompilerSetLoadingMode();
    int Modules = MTLGPUCompilerLoadModules();
    if (LoaderScript) {
      LLVMDisposeMemoryBuffer();
    }
    if (Modules)
    {
      uint64_t v32 = v58;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, void, void, void *))(a8 + 16))(a8, 2, 0, 0, v57);
      free(v57);
      uint64_t v32 = 0;
    }
    if (v59 != &v61) {
      free(v59);
    }
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)&v62);
    goto LABEL_49;
  }
  (*(void (**)(uint64_t, void, void, void))(a8 + 16))(a8, 2 * (*(void *)(a1 + 120) != 0), 0, 0);
  uint64_t v32 = 0;
LABEL_49:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
LABEL_51:
  if (v69 != v71) {
    free(v69);
  }
  return v32;
}

void sub_2557084DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t *a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a55 != &a57) {
    free(a55);
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)&a58);
  if (a35 < 0) {
    operator delete(__p);
  }
  unsigned int v60 = *(void **)(v58 - 128);
  if (v60 != (void *)(v58 - 112)) {
    free(v60);
  }
  _Unwind_Resume(a1);
}

BOOL MTLCompilerObject::readVisibleFunctions(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3, unsigned int a4, unsigned int a5, uint64_t a6, unint64_t a7, uint64_t a8, std::string *a9)
{
  uint64_t v12 = a1;
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a5) {
    uint64_t v13 = a9;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13) {
    a1 = (uint64_t)std::string::append(v13, "STRIP { ");
  }
  if (a5)
  {
    uint64_t v14 = 0;
    BOOL v15 = 0;
    uint64_t v16 = (unsigned int *)(a6 + a4);
    unint64_t v17 = a5;
    while (1)
    {
      unsigned __int16 v26 = 0;
      long long v27 = 0u;
      long long v28 = 0u;
      memset(v29, 0, 26);
      long long v30 = 0u;
      memset(v31, 0, sizeof(v31));
      MTLCompilerObject::getReadParametersFromRequest(a1, (uint64_t)&v26, a6, a7, v16, a8);
      uint64_t v25 = 0;
      uint64_t v18 = MTLCompilerObject::readModuleFromBinaryRequest(v12, &v26, a3, (MTLFunctionType *)&v25, 0, 0, 1);
      if (!v18) {
        break;
      }
      uint64_t v19 = (uint64_t)v18;
      if (v13)
      {
        std::string::append(v13, v29[1]);
        std::string::append(v13, " { } ");
      }
      a1 = llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back(a2, v19);
      BOOL v15 = ++v14 >= v17;
      v16 += 14;
      if (v17 == v14) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    if (v13) {
      std::string::append(v13, "}\n");
    }
    return 1;
  }
  return v15;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(uint64_t a1)
{
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::DeallocateSlabs(a1, *(llvm ***)(a1 + 16), (llvm **)(*(void *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 24)));
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::DeallocateCustomSizedSlabs(a1);
  unsigned int v2 = *(void **)(a1 + 64);
  if (v2 != (void *)(a1 + 80)) {
    free(v2);
  }
  BOOL v3 = *(void **)(a1 + 16);
  if (v3 != (void *)(a1 + 32)) {
    free(v3);
  }
  return a1;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::DeallocateCustomSizedSlabs(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 72);
  if (v1)
  {
    uint64_t v2 = *(void *)(result + 64);
    uint64_t v3 = v2 + 16 * v1;
    do
    {
      BOOL v4 = *(llvm **)v2;
      uint64_t v5 = *(void **)(v2 + 8);
      v2 += 16;
      uint64_t result = llvm::deallocate_buffer(v4, v5);
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::DeallocateSlabs(uint64_t result, llvm **a2, llvm **a3)
{
  if (a2 != a3)
  {
    BOOL v4 = a2;
    uint64_t v5 = result;
    int v6 = a2;
    do
    {
      uint64_t v7 = (((unint64_t)v6 - *(void *)(v5 + 16)) >> 10) & 0x1FFFFFF;
      if (v7 >= 0x1E) {
        LOBYTE(v7) = 30;
      }
      uint64_t v8 = *v4++;
      uint64_t result = llvm::deallocate_buffer(v8, (void *)(4096 << v7));
      ++v6;
    }
    while (v4 != a3);
  }
  return result;
}

void *llvm::SmallVector<char const*,1u>::SmallVector(void *a1, unint64_t a2, uint64_t *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x100000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)a1, a2, *a3);
  return a1;
}

void sub_2557088C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(a1 + 12) < a2) {
    llvm::SmallVectorTemplateBase<llvm::Value *,true>::growAndAssign(a1);
  }
  unint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= a2) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = *(unsigned int *)(a1 + 8);
  }
  if (v4)
  {
    uint64_t v5 = *(void **)a1;
    do
    {
      *v5++ = a3;
      --v4;
    }
    while (v4);
  }
  unint64_t v6 = v3 - a2;
  if (v3 < a2)
  {
    uint64_t v7 = (void *)(*(void *)a1 + 8 * v3);
    do
      *v7++ = a3;
    while (!__CFADD__(v6++, 1));
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

uint64_t llvm::SmallVector<LLVMOpaqueModule *,1u>::SmallVector(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x100000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_255708984(_Unwind_Exception *exception_object)
{
  unint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  unint64_t v3 = result;
  size_t v4 = a3 - __src;
  uint64_t v5 = result[2];
  if (v5 + ((a3 - __src) >> 3) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (__src != a3)
  {
    uint64_t result = (unsigned int *)memcpy((void *)(*(void *)result + 8 * v5), __src, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 3);
  return result;
}

void MTLCompilerObject::buildSpecializedFunctionRequest(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  unsigned int v70 = 0;
  uint64_t v71 = 0;
  unint64_t v72 = 0;
  LODWORD(v67) = 15;
  MTLBuildRequestTypeToString(&v67, __p);
  if (logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken != -1) {
    dispatch_once(&logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken, &__block_literal_global_200);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a1 + 136;
    if (*(char *)(a1 + 159) < 0) {
      uint64_t v9 = *(void *)(a1 + 136);
    }
    unsigned __int16 v10 = __p;
    if (DiagnosticContext < 0) {
      unsigned __int16 v10 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)__int16 v74 = v9;
    *(_WORD *)&v74[8] = 2082;
    *(void *)&v74[10] = v10;
    *(_WORD *)&v74[18] = 2080;
    v75[0] = "function specialization";
    _os_log_impl(&dword_2556FA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Compilation BEGIN (ParentProcessName=%{public}s) Build request: %{public}s - %s", buf, 0x20u);
  }
  uint64_t v57 = mach_absolute_time();
  if (SHIBYTE(DiagnosticContext) < 0) {
    operator delete(__p[0]);
  }
  size_t v67 = 0;
  if ((*(unsigned char *)(a2 + 5) & 2) != 0) {
    uint64_t v57 = mach_absolute_time();
  }
  MEMORY[0x25A28CF80](&v66);
  __p[0] = &v66;
  uint64_t DiagnosticContext = llvm::LLVMContext::getDiagnosticContext((llvm::LLVMContext *)&v66);
  __p[1] = (void *)llvm::LLVMContext::getDiagnosticHandlerCallBack((llvm::LLVMContext *)&v66);
  uint64_t v11 = llvm::LLVMContext::setDiagnosticHandlerCallBack();
  *(_WORD *)buf = 0;
  *(_OWORD *)&v74[4] = 0u;
  memset(v75, 0, 42);
  long long v76 = 0u;
  memset(v77, 0, sizeof(v77));
  MTLCompilerObject::getReadParametersFromRequest(v11, (uint64_t)buf, a2, a3, (unsigned int *)(a2 + 88), a2);
  uint64_t v65 = 1;
  ModuleFromBinaryRequest = MTLCompilerObject::readModuleFromBinaryRequest(a1, (unsigned __int16 *)buf, (llvm::LLVMContext *)&v66, (MTLFunctionType *)&v65, 0, 0, 1);
  uint64_t v63 = 0;
  uint64_t v64 = ModuleFromBinaryRequest;
  uint64_t v62 = 0;
  if (!ModuleFromBinaryRequest)
  {
    (*(void (**)(uint64_t, void, void, void))(a5 + 16))(a5, 2 * (*(void *)(a1 + 120) != 0), 0, 0);
LABEL_35:
    uint64_t v25 = 0;
    int v26 = 0;
    unint64_t v22 = 0;
    goto LABEL_56;
  }
  int v13 = *(_DWORD *)(a2 + 160);
  unint64_t v14 = *(unsigned int *)(a2 + 12);
  if (!v14)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    if (!v13) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v15 = *(unsigned int *)(a2 + 8);
  if ((*(unsigned char *)(a2 + 5) & 2) != 0) {
    uint64_t v16 = mach_absolute_time();
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v19 = (const char *)(a2 + v15);
  uint64_t v20 = a2 + 236;
  if (v13)
  {
    uint64_t v18 = MTLCompilerObject::applyConstantValues(a1, (llvm::LLVMContext *)&v66, (uint64_t)ModuleFromBinaryRequest, v20, v19, v14, v76, (const char **)&v62);
    if (v18)
    {
      uint64_t v17 = 0;
      goto LABEL_26;
    }
    goto LABEL_34;
  }
  uint64_t v17 = MTLCompilerObject::applyConstantValuesToArchive(a1, (llvm::LLVMContext *)&v66, (uint64_t)ModuleFromBinaryRequest, v20, v19, v14, v76, (const char **)&v62);
  uint64_t v63 = v17;
  if (!v17)
  {
LABEL_34:
    free(v62);
    (*(void (**)(uint64_t, void, void, void))(a5 + 16))(a5, 2 * (*(void *)(a1 + 120) != 0), 0, 0);
    goto LABEL_35;
  }
  uint64_t v18 = 0;
LABEL_26:
  if (*(_DWORD *)(a2 + 160))
  {
LABEL_27:
    uint64_t v17 = MTLCompilerObject::invokeLoaderForSpecializedFunction(a1, (void **)&v64, v18, (unsigned int *)a2, a3, (llvm::LLVMContext *)&v66, a5);
    uint64_t v63 = v17;
  }
LABEL_28:
  if ((*(unsigned char *)(a2 + 2) & 0x80) != 0)
  {
    uint64_t v61 = 0;
    MTLCompilerObject::insertFunctionInArchive();
  }
  if ((*(unsigned char *)(a2 + 5) & 2) != 0)
  {
    unint64_t v22 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v16));
    uint64_t v23 = v71;
    if ((unint64_t)v71 >= v72)
    {
      long long v27 = (char *)v70;
      uint64_t v28 = (v71 - (unsigned char *)v70) >> 4;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v30 = v72 - (void)v70;
      if ((uint64_t)(v72 - (void)v70) >> 3 > v29) {
        unint64_t v29 = v30 >> 3;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31)
      {
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v72, v31);
        long long v27 = (char *)v70;
        uint64_t v23 = v71;
      }
      else
      {
        uint64_t v32 = 0;
      }
      uint64_t v33 = &v32[16 * v28];
      uint64_t v34 = &v32[16 * v31];
      *(_DWORD *)uint64_t v33 = 1;
      *((void *)v33 + 1) = v22;
      unsigned __int16 v24 = v33 + 16;
      if (v23 != v27)
      {
        do
        {
          *((_OWORD *)v33 - 1) = *((_OWORD *)v23 - 1);
          v33 -= 16;
          v23 -= 16;
        }
        while (v23 != v27);
        long long v27 = (char *)v70;
      }
      unsigned int v70 = v33;
      uint64_t v71 = v24;
      unint64_t v72 = (unint64_t)v34;
      if (v27)
      {
        operator delete(v27);
        uint64_t v17 = v63;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v71 = 1;
      *((void *)v23 + 1) = v22;
      unsigned __int16 v24 = v23 + 16;
    }
    uint64_t v71 = v24;
    if (((unint64_t)(v24 - (unsigned char *)v70) >> 4) == -2) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = 12 * (((unint64_t)(v24 - (unsigned char *)v70) >> 4) + 2) + 4;
    }
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
  }
  uint64_t v25 = MTLCompilerObject::serializeLibraryToArchiveReply(a1, &v67, (const char **)&v62, 1, 1, v17, v21);
  if (v17) {
    LLVMDisposeMemoryBuffer();
  }
  int v26 = 1;
LABEL_56:
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)__p);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&v66);
  if (v26)
  {
    if (v25)
    {
      int v66 = 15;
      MTLBuildRequestTypeToString(&v66, __p);
      unint64_t v35 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v57));
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = a1 + 136;
        if (*(char *)(a1 + 159) < 0) {
          uint64_t v36 = *(void *)(a1 + 136);
        }
        CC_LONG v37 = __p;
        if (DiagnosticContext < 0) {
          CC_LONG v37 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446978;
        *(void *)__int16 v74 = v36;
        *(_WORD *)&v74[8] = 2082;
        *(void *)&v74[10] = v37;
        *(_WORD *)&v74[18] = 2080;
        v75[0] = "function specialization";
        LOWORD(v75[1]) = 2048;
        *(double *)((char *)&v75[1] + 2) = (double)v35 * 0.000001;
        _os_log_impl(&dword_2556FA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Compilation SUCCESS (ParentProcessName=%{public}s) (TYPE=%{public}s - %s): Time %f ms ", buf, 0x2Au);
      }
      if (SHIBYTE(DiagnosticContext) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v38 = (uint64_t)v71;
      if ((*(unsigned char *)(a2 + 5) & 2) != 0)
      {
        uint64_t v39 = (char *)v72;
        if ((unint64_t)v71 >= v72)
        {
          unsigned __int16 v41 = v70;
          uint64_t v42 = (v71 - (unsigned char *)v70) >> 4;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 60) {
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v44 = v72 - (void)v70;
          if ((uint64_t)(v72 - (void)v70) >> 3 > v43) {
            unint64_t v43 = v44 >> 3;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45)
          {
            std::string::size_type v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v72, v45);
            unsigned __int16 v41 = v70;
            uint64_t v38 = (uint64_t)v71;
          }
          else
          {
            std::string::size_type v46 = 0;
          }
          uint64_t v47 = &v46[16 * v42];
          uint64_t v39 = &v46[16 * v45];
          *(_DWORD *)uint64_t v47 = 6;
          *((void *)v47 + 1) = v35;
          uint64_t v40 = v47 + 16;
          if ((void *)v38 != v41)
          {
            do
            {
              *((_OWORD *)v47 - 1) = *(_OWORD *)(v38 - 16);
              v47 -= 16;
              v38 -= 16;
            }
            while ((void *)v38 != v41);
            unsigned __int16 v41 = v70;
          }
          unsigned int v70 = v47;
          uint64_t v71 = v40;
          unint64_t v72 = (unint64_t)v39;
          if (v41)
          {
            operator delete(v41);
            uint64_t v39 = (char *)v72;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v71 = 6;
          *(void *)(v38 + 8) = v35;
          uint64_t v40 = (char *)(v38 + 16);
        }
        uint64_t v71 = v40;
        unint64_t v48 = v35 - v22;
        if (v40 >= v39)
        {
          long long v49 = (char *)v70;
          uint64_t v50 = (v40 - (unsigned char *)v70) >> 4;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 60) {
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = v39 - (unsigned char *)v70;
          if (v52 >> 3 > v51) {
            unint64_t v51 = v52 >> 3;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            long long v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v72, v53);
            long long v49 = (char *)v70;
            uint64_t v40 = v71;
          }
          else
          {
            long long v54 = 0;
          }
          long long v55 = &v54[16 * v50];
          long long v56 = &v54[16 * v53];
          *(_DWORD *)long long v55 = 4;
          *((void *)v55 + 1) = v48;
          uint64_t v38 = (uint64_t)(v55 + 16);
          if (v40 != v49)
          {
            do
            {
              *((_OWORD *)v55 - 1) = *((_OWORD *)v40 - 1);
              v55 -= 16;
              v40 -= 16;
            }
            while (v40 != v49);
            long long v49 = (char *)v70;
          }
          unsigned int v70 = v55;
          uint64_t v71 = (char *)v38;
          unint64_t v72 = (unint64_t)v56;
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v40 = 4;
          *((void *)v40 + 1) = v48;
          uint64_t v38 = (uint64_t)(v40 + 16);
        }
        uint64_t v71 = (char *)v38;
      }
      uint64_t v58 = 0;
      long long v59 = 0;
      uint64_t v60 = 0;
      std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(&v58, v70, v38, (v38 - (uint64_t)v70) >> 4);
      serializeCompileTimeDataInReply((uint64_t)v25, (uint64_t)&v58);
      if (v58)
      {
        long long v59 = v58;
        operator delete(v58);
      }
      (*(void (**)(uint64_t, void, char *, size_t, void))(a5 + 16))(a5, 0, v25, v67, 0);
      free(v25);
    }
    else
    {
      (*(void (**)(uint64_t, void, void, void))(a5 + 16))(a5, 2 * (*(void *)(a1 + 120) != 0), 0, 0);
    }
  }
  if (v70)
  {
    uint64_t v71 = (char *)v70;
    operator delete(v70);
  }
}

void sub_2557092C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLCompilerObject::runFrameworkPasses(MTLCompilerObject *a1, uint64_t *a2, void *a3, llvm::LLVMContext *a4, uint64_t a5)
{
  uint64_t v5 = (_DWORD *)a2[4];
  if ((*v5 & 0x80000000) == 0) {
    return 1;
  }
  int v8 = (int)a4;
  int v12 = v5[1];
  if ((*v5 & 0x800000) == 0 && (v12 & 2) != 0 && a3[17] == 0) {
    goto LABEL_10;
  }
  if (!MTLCompilerObject::loadModule((uint64_t)a1, a2, (uint64_t)a3, a4)) {
    return 0;
  }
  if (*((unsigned char *)a1 + 128))
  {
LABEL_10:
    if ((v12 & 0x40000000) != 0) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v14 = MTLWriteAIRReflectionToMemoryBuffer();
    std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100](a3 + 21, v14);
    if ((v12 & 0x40000000) != 0) {
      goto LABEL_14;
    }
  }
  if (MTLCompilerObject::generateReflection((uint64_t)a1, (uint64_t)a2, (uint64_t)a3)) {
    return 0;
  }
LABEL_14:
  MTLCompilerObject::deserializePluginData(a1, a2, (uint64_t)a3);
  MTLCompilerObject::runDebugInstrumentationPass((uint64_t)a1, a2, a3, a5);
  if ((v12 & 2) == 0 && !MTLCompilerObject::lowerModule((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, v8)) {
    return 0;
  }
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)__p = 0u;
  long long v20 = 0u;
  uint64_t v21 = v22;
  memset(v22, 0, sizeof(v22));
  int v23 = 0;
  if ((MTLCompilerObject::runFWPassesForFunctionType(a1, a2, v15, (MTLCompilerObject::FragmentVaryingsInfo *)v18) & 1) == 0) {
    goto LABEL_21;
  }
  if (!*((unsigned char *)a1 + 128))
  {
    uint64_t v16 = MTLWriteAIRReflectionToMemoryBuffer();
    std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100](a3 + 22, v16);
  }
  if ((v12 & 0x40000000) != 0
    && (MTLCompilerObject::generateReflection((uint64_t)a1, (uint64_t)a2, (uint64_t)a3) & 1) != 0)
  {
LABEL_21:
    uint64_t v6 = 0;
  }
  else
  {
    MTLCompilerObject::patchReflection((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
    uint64_t v6 = MTLCompilerObject::runLinkingPasses(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)v18);
  }
  std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy((uint64_t)&v21, v22[0]);
  if (__p[1])
  {
    *(void **)&long long v20 = __p[1];
    operator delete(__p[1]);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  return v6;
}

void sub_255709548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
}

void std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void MTLCompilerObject::backendCompileExecutableRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v31 = 0u;
  uint64_t v32 = 0;
  memset(v30, 0, 24);
  v30[3] = (void *)-1;
  uint64_t v33 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  uint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  uint64_t v25 = 0;
  int v26 = 0;
  uint64_t v27 = 0;
  int v22 = 1;
  MTLBuildRequestTypeToString(&v22, __p);
  if (logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken != -1) {
    dispatch_once(&logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken, &__block_literal_global_200);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1 + 136;
    if (*(char *)(a1 + 159) < 0) {
      uint64_t v4 = *(void *)(a1 + 136);
    }
    uint64_t v5 = __p;
    if (DiagnosticContext < 0) {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446722;
    *(void *)uint64_t v44 = v4;
    *(_WORD *)&v44[8] = 2082;
    *(void *)&v44[10] = v5;
    *(_WORD *)&v44[18] = 2080;
    *(void *)&long long v45 = "pipeline";
    _os_log_impl(&dword_2556FA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Compilation BEGIN (ParentProcessName=%{public}s) Build request: %{public}s - %s", buf, 0x20u);
  }
  uint64_t v6 = mach_absolute_time();
  if (SHIBYTE(DiagnosticContext) < 0) {
    operator delete(__p[0]);
  }
  MEMORY[0x25A28CF80](&v22);
  __p[0] = &v22;
  uint64_t DiagnosticContext = llvm::LLVMContext::getDiagnosticContext((llvm::LLVMContext *)&v22);
  __p[1] = (void *)llvm::LLVMContext::getDiagnosticHandlerCallBack((llvm::LLVMContext *)&v22);
  uint64_t v7 = llvm::LLVMContext::setDiagnosticHandlerCallBack();
  *(_WORD *)buf = 0;
  *(_OWORD *)&v44[4] = 0u;
  long long v45 = 0u;
  memset(v46, 0, sizeof(v46));
  long long v47 = 0u;
  memset(v48, 0, sizeof(v48));
  MTLCompilerObject::getReadParametersFromRequest(v7, (uint64_t)buf, *(void *)a2, *(void *)(a2 + 8), (unsigned int *)(*(void *)(a2 + 32) + 88), *(void *)(a2 + 32));
  ModuleFromBinaryRequest = MTLCompilerObject::readModuleFromBinaryRequest(a1, (unsigned __int16 *)buf, (llvm::LLVMContext *)&v22, (MTLFunctionType *)(a2 + 40), (void **)&v38, (unint64_t *)&v38 + 1, 1);
  *(void *)(a2 + 48) = ModuleFromBinaryRequest;
  if (!ModuleFromBinaryRequest)
  {
    (*(void (**)(void, void, void, void))(*(void *)(a2 + 24) + 16))(*(void *)(a2 + 24), 2 * (*(void *)(a1 + 120) != 0), 0, 0);
LABEL_16:
    if ((void)v38) {
      free((void *)v38);
    }
    goto LABEL_18;
  }
  if ((MTLCompilerObject::runFrameworkPasses((MTLCompilerObject *)a1, (uint64_t *)a2, v30, (llvm::LLVMContext *)&v22, (uint64_t)&v25) & 1) == 0)goto LABEL_16; {
  MTLCompilerObject::backendCompileModule(a1, (uint64_t *)a2, (uint64_t)v28, v9, (uint64_t)&v25);
  }
  uint64_t v10 = *(void *)(a2 + 32);
  if ((*(unsigned char *)(v10 + 5) & 2) != 0)
  {
    if ((v26 - (unsigned char *)v25) >> 4 == -2) {
      unint64_t v11 = 0;
    }
    else {
      unint64_t v11 = 12 * (((v26 - (unsigned char *)v25) >> 4) + 2) + 4;
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v13 = 0;
  uint64_t v21 = 0;
  if ((*(unsigned char *)(v10 + 2) & 0x80) != 0)
  {
    uint64_t v13 = MTLGPUArchiverFromId();
    uint64_t v20 = v13;
    if (!v13
      || !MTLCompilerObject::storeToBinaryArchive(a1, *(unsigned int **)(a2 + 32), *(void *)(a2 + 8), (uint64_t)buf, (uint64_t)v28, *(void *)(a2 + 40), v30, (uint64_t)&v20, (char **)&v21))
    {
      (*(void (**)(void))(*(void *)(a2 + 24) + 16))();
      if ((void)v38) {
        free((void *)v38);
      }
      free(v21);
      MTLGPUArchiverDestroy();
LABEL_18:
      int v12 = 1;
      goto LABEL_31;
    }
  }
  int v14 = MTLCompilerObject::serializeBackendCompilationOutput(a1, *(_DWORD *)(a2 + 16), a2, (uint64_t *)v30, (uint64_t)v28, (uint64_t)&v25, v6, v11);
  if (v13)
  {
    if (v14 && !MTLGPUArchiverFlush())
    {
      (*(void (**)(void))(*(void *)(a2 + 24) + 16))();
      free(v21);
    }
    MTLGPUArchiverDestroy();
  }
  int v12 = 0;
LABEL_31:
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)__p);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&v22);
  if (!v12 && (void)v38)
  {
    free((void *)v38);
    long long v38 = 0uLL;
  }
  if (v25)
  {
    int v26 = v25;
    operator delete(v25);
  }
  for (uint64_t i = 22; i != 19; --i)
    std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100]((uint64_t *)&v30[i], 0);
  uint64_t v16 = (void *)v39;
  *(void *)&long long v39 = 0;
  if (v16) {
    free(v16);
  }
  uint64_t v17 = v33;
  uint64_t v33 = 0;
  if (v17) {
    free(v17);
  }
  uint64_t v18 = (void *)v31;
  *(void *)&long long v31 = 0;
  if (v18) {
    free(v18);
  }
  uint64_t v19 = v30[0];
  v30[0] = 0;
  if (v19) {
    free(v19);
  }
}

void sub_255709A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  FrameworkPassesOutput::~FrameworkPassesOutput((FrameworkPassesOutput *)&a32);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result) {
    return LLVMDisposeMemoryBuffer();
  }
  return result;
}

void *MTLBuildRequestTypeToString@<X0>(_DWORD *a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = *a1 + 1;
  if (v4 > 0x12) {
    uint64_t v5 = "Unknown";
  }
  else {
    uint64_t v5 = off_2653C2908[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t MTLCompilerObject::getReadParametersFromRequest(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  *(_WORD *)a2 = *((_WORD *)a5 + 3);
  uint64_t v6 = a3 + a5[2];
  *(void *)(a2 + 8) = a5[3];
  *(void *)(a2 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(a6 + 4);
  *(unsigned char *)(a2 + 65) = BYTE2(v6) & 1;
  *(unsigned char *)(a2 + 64) = (v6 & 0x8000) == 0;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a6 + 268);
  long long v7 = *(_OWORD *)(a5 + 6);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a5 + 10);
  *(_OWORD *)(a2 + 84) = v7;
  uint64_t v8 = a5[5];
  *(void *)(a2 + 24) = v8;
  if (v8) {
    uint64_t v9 = a3 + a5[4];
  }
  else {
    uint64_t v9 = 0;
  }
  *(void *)(a2 + 32) = v9;
  *(void *)(a2 + 48) = a3 + *a5;
  unint64_t v10 = *(unsigned int *)(a3 + 32);
  if (v10 > a4) {
    goto LABEL_14;
  }
  size_t v13 = *(unsigned int *)(a3 + 36);
  if ((v13 + v10) > a4) {
    goto LABEL_14;
  }
  if (v13)
  {
    uint64_t v15 = a3 + v10;
    if (strnlen((const char *)(a3 + v10), *(unsigned int *)(a3 + 36)) < v13) {
      *(void *)(a2 + 56) = v15;
    }
  }
  *(void *)(a2 + 40) = *(void *)(a3 + 48);
  unint64_t v16 = *(unsigned int *)(a3 + 168);
  if (v16 > a4 || (int v17 = *(_DWORD *)(a3 + 172), (v17 + v16) > a4)) {
LABEL_14:
  }
    abort();
  if (v17) {
    *(void *)(a2 + 72) = a3 + v16;
  }
  return 1;
}

llvm::Module *MTLCompilerObject::readModuleFromBinaryRequest(uint64_t a1, unsigned __int16 *a2, llvm::LLVMContext *a3, MTLFunctionType *a4, void **a5, unint64_t *a6, int a7)
{
  v50[2] = *MEMORY[0x263EF8340];
  uint64_t v44 = 0;
  size_t v13 = (void *)*((void *)a2 + 3);
  int v14 = (const void *)*((void *)a2 + 4);
  int v15 = *a2;
  if ((v15 | 2) == 3)
  {
    unint64_t v16 = (llvm::Module *)moduleFromOpenGLBitcode(v15 == 3, a3, *((const void **)a2 + 2), *((void *)a2 + 1), v14, (unint64_t)v13, a5, a6);
    uint64_t v19 = v16;
    uint64_t v44 = v16;
    int v20 = *a2;
    *(unsigned char *)(a1 + 128) = 1;
    if (!v16)
    {
      MTLCompilerErrorObject::setFormattedErrorMessage((char **)(a1 + 120), "Failed to process function bitcode(%d) in plugin", v20);
      return 0;
    }
    goto LABEL_15;
  }
  uint64_t v21 = *((void *)a2 + 1);
  uint64_t v40 = *((void *)a2 + 2);
  uint64_t v41 = v21;
  uint64_t v42 = &unk_2557AB8A6;
  uint64_t v43 = 0;
  llvm::getLazyBitcodeModule();
  llvm::expectedToErrorOrAndEmitErrors<std::unique_ptr<llvm::Module>>(v50, (uint64_t)__p);
  llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t)v50);
  if (v46)
  {
    unint64_t v16 = (llvm::Module *)MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Failed to read function bitcode.");
    uint64_t v19 = 0;
LABEL_9:
    int v22 = 1;
    goto LABEL_10;
  }
  uint64_t v19 = (llvm::Module *)__p[0];
  uint64_t v44 = (llvm::Module *)__p[0];
  __p[0] = 0;
  unint64_t v16 = (llvm::Module *)llvm::Module::materializeAll(v37, v44);
  if (v37[0])
  {
    MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Failed to materializeAll.");
    unint64_t v16 = (llvm::Module *)v37[0];
    if (v37[0]) {
      unint64_t v16 = (llvm::Module *)(*(uint64_t (**)(uint64_t))(*(void *)v37[0] + 8))(v37[0]);
    }
    goto LABEL_9;
  }
  int v22 = 0;
LABEL_10:
  if ((v46 & 1) == 0)
  {
    unint64_t v16 = (llvm::Module *)__p[0];
    __p[0] = 0;
    if (v16)
    {
      uint64_t v23 = MEMORY[0x25A28D8E0]();
      unint64_t v16 = (llvm::Module *)MEMORY[0x25A28E250](v23, 0x10B2C407FF26C1CLL);
    }
  }
  if (v22) {
    goto LABEL_62;
  }
  int v20 = *a2;
LABEL_15:
  if (v20 == 2)
  {
    uint64_t v44 = 0;
    uint64_t v19 = (llvm::Module *)moduleFromOpenCLModule(a3, v19, (uint64_t)v14, v13, a5, (void **)a6, v17, v18, v35);
    unint64_t v16 = v44;
    uint64_t v44 = v19;
    if (v16)
    {
      uint64_t v24 = MEMORY[0x25A28D8E0]();
      unint64_t v16 = (llvm::Module *)MEMORY[0x25A28E250](v24, 0x10B2C407FF26C1CLL);
    }
    *(unsigned char *)(a1 + 129) = 1;
    if (!v19)
    {
      MTLCompilerErrorObject::setFormattedErrorMessage((char **)(a1 + 120), "Failed to process function bitcode(%d) in plugin", *a2);
      return 0;
    }
  }
  uint64_t v25 = (char *)*((void *)a2 + 7);
  if (v25)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v25);
    int v26 = (v47 & 0x80u) == 0 ? __p : (void **)__p[0];
    uint64_t v27 = (v47 & 0x80u) == 0 ? (void *)v47 : __p[1];
    llvm::Module::setTargetTriple((uint64_t)v19, v26, (size_t)v27);
    if ((char)v47 < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(unsigned char *)(a1 + 128)
    || (uint64_t v19 = v44,
        MTLCompilerObject::upgradeAIRModule(v16, v44, *((_DWORD *)a2 + 10), *((_DWORD *)a2 + 11))))
  {
    if (*((unsigned char *)a2 + 64))
    {
      uint64_t v19 = v44;
      if (*((char *)v44 + 239) < 0) {
        std::string::__init_copy_ctor_external(&v39, *((const std::string::value_type **)v44 + 27), *((void *)v44 + 28));
      }
      else {
        std::string v39 = *(std::string *)((unsigned char *)v44 + 9);
      }
      __int16 v38 = 260;
      v37[0] = (uint64_t)&v39;
      MEMORY[0x25A28D8F0](__p, v37);
      v37[0] = (uint64_t)"air.version";
      __int16 v38 = 259;
      if (llvm::Module::getNamedMetadata(v19, (const llvm::Twine *)v37)) {
        VersionMetachar data = readVersionMetadata(v19, "air.version", 0, 0, 0);
      }
      else {
        VersionMetachar data = 0;
      }
      if (((VersionMetadata > 0x20003) & ~_os_feature_enabled_impl()) == 0 && v49 != 7)
      {
        MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Target OS is incompatible.");
        if ((char)v47 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        uint64_t v44 = 0;
        goto LABEL_63;
      }
      if ((char)v47 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
    }
    if (!a7)
    {
      uint64_t v30 = 0;
      *a4 = 0xFFFFLL;
      uint64_t v19 = v44;
      while (1)
      {
        long long v31 = entryPointsMetadata[v30];
        __int16 v48 = 257;
        if (*v31)
        {
          __p[0] = v31;
          char v32 = 3;
        }
        else
        {
          char v32 = 1;
        }
        LOBYTE(v48) = v32;
        if (llvm::Module::getNamedMetadata(v19, (const llvm::Twine *)__p)) {
          break;
        }
        if (++v30 == 7) {
          return v19;
        }
      }
      *a4 = entryPointsType[v30];
      return v19;
    }
    uint64_t v29 = (const char *)*((void *)a2 + 6);
    *a4 = MTLFunctionTypeVertex;
    uint64_t v19 = v44;
    if (eliminateOtherEntryPoints(v44, v29, a4)) {
      return v19;
    }
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)(a1 + 120), "Function %s was not found in the module.", v29);
  }
  else
  {
    MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Failed to upgrade function bitcode");
  }
LABEL_62:
  uint64_t v44 = 0;
  if (v19)
  {
LABEL_63:
    uint64_t v33 = MEMORY[0x25A28D8E0](v19);
    MEMORY[0x25A28E250](v33, 0x10B2C407FF26C1CLL);
    return 0;
  }
  return v19;
}

void sub_25570A120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,char a30,int a31,__int16 a32,char a33)
{
}

uint64_t llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(void *)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    std::unique_ptr<llvm::Module>::reset[abi:ne180100]((uint64_t *)a1, 0);
  }
  return a1;
}

uint64_t std::unique_ptr<llvm::Module>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x25A28D8E0]();
    JUMPOUT(0x25A28E250);
  }
  return result;
}

void llvm::expectedToErrorOrAndEmitErrors<std::unique_ptr<llvm::Module>>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  if (a1[1])
  {
    uint64_t v4 = *a1;
    *a1 = 0;
    uint64_t v7 = v4;
    uint64_t v5 = llvm::errorToErrorCodeAndEmitErrors();
    *(unsigned char *)(a2 + 16) |= 1u;
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  else
  {
    *(unsigned char *)(a2 + 16) &= ~1u;
    uint64_t v3 = *a1;
    *a1 = 0;
    *(void *)a2 = v3;
  }
}

void sub_25570A348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MTLCompilerObject::readModuleFromBinaryRequest();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLCompilerObject::upgradeAIRModule(MTLCompilerObject *this, llvm::Module *a2, int a3, int a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a4 | a3 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109376;
    v7[1] = a3;
    __int16 v8 = 1024;
    int v9 = a4;
    _os_log_impl(&dword_2556FA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "MTLCompiler upgrade pass forced to use air version %d.%d", (uint8_t *)v7, 0xEu);
  }
  return MTLUpgradeAIRModule();
}

uint64_t readVersionMetadata(llvm::Module *a1, const char *a2, unsigned int a3, int a4, int a5)
{
  char v8 = 1;
  char v20 = 1;
  if (*a2)
  {
    uint64_t v18 = a2;
    char v8 = 3;
  }
  char v19 = v8;
  NamedMetachar data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a1, (const llvm::Twine *)&v18);
  if (!NamedMetadata) {
    return (a5 + (a4 << 16));
  }
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  uint64_t v11 = Operand - 8 * *(unsigned int *)(Operand + 8);
  uint64_t v12 = *(void *)(*(void *)(v11 + 8 * a3) + 128);
  size_t v13 = (void *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u) {
    size_t v13 = (void *)*v13;
  }
  int v14 = *(_DWORD *)v13;
  uint64_t v15 = *(void *)(*(void *)(v11 + 8 * (a3 + 1)) + 128);
  unint64_t v16 = (void *)(v15 + 24);
  if (*(_DWORD *)(v15 + 32) >= 0x41u) {
    unint64_t v16 = (void *)*v16;
  }
  return (*(_DWORD *)v16 + (v14 << 16));
}

uint64_t eliminateOtherEntryPoints(llvm::Module *this, const char *a2, MTLFunctionType *a3)
{
  uint64_t v6 = 0;
  char v20 = 0;
  do
  {
    uint64_t v7 = entryPointsMetadata[v6];
    __int16 v23 = 257;
    if (*v7)
    {
      v22[0] = v7;
      char v8 = 3;
    }
    else
    {
      char v8 = 1;
    }
    LOBYTE(v23) = v8;
    NamedMetachar data = llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v22);
    if (NamedMetadata)
    {
      uint64_t v10 = (llvm::NamedMDNode *)NamedMetadata;
      unsigned int v11 = 0;
      uint64_t v21 = 0;
      while (v11 < llvm::NamedMDNode::getNumOperands(v10))
      {
        uint64_t Operand = llvm::NamedMDNode::getOperand(v10);
        v22[0] = llvm::Value::getName(*(llvm::Value **)(*(void *)(Operand - 8 * *(unsigned int *)(Operand + 8))
                                                      + 128));
        v22[1] = v13;
        if (a2) {
          size_t v14 = strlen(a2);
        }
        else {
          size_t v14 = 0;
        }
        ++v11;
        if (!llvm::StringRef::compare((uint64_t)v22, a2, v14))
        {
          if (a3) {
            *a3 = entryPointsType[v6];
          }
          llvm::TrackingMDRef::reset(&v21, Operand);
          char v20 = 1;
          break;
        }
      }
      unint64_t v15 = entryPointsType[v6];
      BOOL v16 = v15 > 8;
      uint64_t v17 = (1 << v15) & 0x18E;
      if (!v16 && v17 != 0)
      {
        llvm::NamedMDNode::eraseFromParent(v10);
        if (v21)
        {
          if (entryPointsMetadata[v6]) {
            strlen(entryPointsMetadata[v6]);
          }
          llvm::Module::getOrInsertNamedMetadata();
          llvm::NamedMDNode::addOperand();
        }
      }
      llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)&v21);
    }
    ++v6;
  }
  while (v6 != 7);
  return v20 & 1;
}

void sub_25570A6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)va);
  _Unwind_Resume(a1);
}

uint64_t llvm::StringRef::compare(uint64_t a1, const void *a2, size_t a3)
{
  size_t v3 = a3;
  size_t v4 = *(void *)(a1 + 8);
  if (a3 >= v4) {
    a3 = *(void *)(a1 + 8);
  }
  if (a3)
  {
    int v5 = memcmp(*(const void **)a1, a2, a3);
    if (v5) {
      return (v5 >> 31) | 1u;
    }
  }
  if (v4 < v3) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 1;
  }
  if (v4 == v3) {
    return 0;
  }
  else {
    return v7;
  }
}

void llvm::TrackingMDRef::~TrackingMDRef(llvm::TrackingMDRef *this)
{
  if (*(void *)this) {
    llvm::MetadataTracking::untrack();
  }
}

void *llvm::TrackingMDRef::reset(void *result, uint64_t a2)
{
  size_t v3 = result;
  if (*result) {
    uint64_t result = (void *)llvm::MetadataTracking::untrack();
  }
  void *v3 = a2;
  if (a2)
  {
    return (void *)llvm::MetadataTracking::track();
  }
  return result;
}

void ScopedDiagnosticHandler::~ScopedDiagnosticHandler(ScopedDiagnosticHandler *this)
{
}

void MTLCompilerObject::runDebugInstrumentationPass(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2[4] + 5) & 0x10) == 0)
  {
    uint64_t Function = llvm::Module::getFunction();
    if (Function)
    {
      uint64_t v6 = (llvm::Function *)Function;
      v34[0] = *(void **)(Function + 8);
      v34[1] = 0;
      llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(buf, (uint64_t *)v34);
      unsigned int v7 = *(uint8_t **)buf;
      if (*(_DWORD *)&buf[8])
      {
        uint64_t v8 = 8 * *(unsigned int *)&buf[8];
        do
        {
          int v9 = *(llvm::Instruction **)v7;
          if (*(void *)v7 && *((unsigned char *)v9 + 16) == 84) {
            llvm::Instruction::eraseFromParent(v9);
          }
          v7 += 8;
          v8 -= 8;
        }
        while (v8);
        unsigned int v7 = *(uint8_t **)buf;
      }
      if (v7 != &buf[16]) {
        free(v7);
      }
      if (!*((void *)v6 + 1)) {
        llvm::Function::eraseFromParent(v6);
      }
    }
    return;
  }
  uint64_t v13 = mach_absolute_time();
  uint64_t v14 = a2[5];
  if (v14 == 3)
  {
    if (!MTLCompilerObject::checkVertexDescriptorAndAddVertexFetchingToKernelModule((MTLCompilerObject *)a1, (uint64_t)a2))return; {
    goto LABEL_22;
    }
  }
  if (v14 != 1)
  {
LABEL_22:
    MTLCompilerObject::addDebugInstrumentationToModule(a1, (uint64_t)a2, (uint64_t)a3);
    uint64_t v38 = 0;
    uint64_t v36 = a1 + 120;
    char v37 = 0;
    unint64_t v15 = (llvm::Module *)a2[6];
    int v16 = *(_DWORD *)(a2[4] + 4);
    memset(buf, 0, 24);
    uint64_t v17 = MTLGenerateReflectionDataPass::generateReflectionData((uint64_t)&v36, v15, v16, &v38, 0, buf, 0, 0, a3 + 3);
    v34[0] = buf;
    std::vector<PostVertexDumpOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    uint64_t v18 = (void *)*a3;
    *a3 = v17;
    if (v18) {
      free(v18);
    }
    a3[1] = v38;
    int v33 = 7;
    MTLBuildRequestTypeToString(&v33, v34);
    unint64_t v19 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v13));
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = a1 + 136;
      if (*(char *)(a1 + 159) < 0) {
        uint64_t v20 = *(void *)(a1 + 136);
      }
      uint64_t v21 = v34;
      if (v35 < 0) {
        uint64_t v21 = (void **)v34[0];
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v21;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&buf[24] = "framework instrumentation";
      LOWORD(v40) = 2048;
      *(double *)((char *)&v40 + 2) = (double)v19 * 0.000001;
      _os_log_impl(&dword_2556FA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Compilation SUCCESS (ParentProcessName=%{public}s) (TYPE=%{public}s - %s): Time %f ms ", buf, 0x2Au);
    }
    if (v35 < 0) {
      operator delete(v34[0]);
    }
    if ((*(unsigned char *)(a2[4] + 5) & 2) != 0)
    {
      unint64_t v22 = *(void *)(a4 + 16);
      __int16 v23 = *(void **)(a4 + 8);
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v25 = *(void **)a4;
        uint64_t v26 = ((uint64_t)v23 - *(void *)a4) >> 4;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60) {
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v22 - (void)v25;
        if (v28 >> 3 > v27) {
          unint64_t v27 = v28 >> 3;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>(a4 + 16, v29);
          uint64_t v25 = *(void **)a4;
          __int16 v23 = *(void **)(a4 + 8);
        }
        else
        {
          uint64_t v30 = 0;
        }
        long long v31 = &v30[16 * v26];
        char v32 = &v30[16 * v29];
        *(_DWORD *)long long v31 = 7;
        *((void *)v31 + 1) = v19;
        uint64_t v24 = v31 + 16;
        if (v23 != v25)
        {
          do
          {
            *((_OWORD *)v31 - 1) = *((_OWORD *)v23 - 1);
            v31 -= 16;
            v23 -= 2;
          }
          while (v23 != v25);
          uint64_t v25 = *(void **)a4;
        }
        *(void *)a4 = v31;
        *(void *)(a4 + 8) = v24;
        *(void *)(a4 + 16) = v32;
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(_DWORD *)__int16 v23 = 7;
        v23[1] = v19;
        uint64_t v24 = (char *)(v23 + 2);
      }
      *(void *)(a4 + 8) = v24;
    }
    return;
  }
  long long v40 = 0u;
  memset(buf, 0, sizeof(buf));
  uint64_t v41 = v42;
  memset(v42, 0, sizeof(v42));
  int v43 = 0;
  MTLCompilerObject::getFragmentVaryingsInfo((MTLCompilerObject *)a1, (*(_DWORD *)(a2[4] + 4) >> 3) & 1, (const char *)(*a2 + *(unsigned int *)(a2[4] + 16)), *(unsigned int *)(a2[4] + 20), (MTLCompilerObject::FragmentVaryingsInfo *)buf);
  if (MTLCompilerObject::checkVertexDescriptorAndAddVertexFetchingToVertexModule(a1, (uint64_t)a2, buf))
  {
    MTLCompilerObject::addPostVertexDumpingToModule(a1, (uint64_t)a2);
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy((uint64_t)&v41, v42[0]);
    if (*(void *)&buf[24])
    {
      *(void *)&long long v40 = *(void *)&buf[24];
      operator delete(*(void **)&buf[24]);
    }
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    goto LABEL_22;
  }
  std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy((uint64_t)&v41, v42[0]);
  if (*(void *)&buf[24])
  {
    *(void *)&long long v40 = *(void *)&buf[24];
    operator delete(*(void **)&buf[24]);
  }
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_25570AC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLCompilerObject::runFWPassesForFunctionType(MTLCompilerObject *a1, uint64_t *a2, int a3, MTLCompilerObject::FragmentVaryingsInfo *a4)
{
  uint64_t v4 = 1;
  switch(a2[5])
  {
    case 1:
      return MTLCompilerObject::runVertexPasses((uint64_t)a1, a2, a3, a4);
    case 2:
      return MTLCompilerObject::runFragmentPasses((uint64_t)a1, a2);
    case 3:
      return *(_DWORD *)(a2[4] + 28) < 0xCu
          || MTLCompilerObject::checkVertexDescriptorAndAddVertexFetchingToKernelModule(a1, (uint64_t)a2);
    case 5:
    case 6:
    case 7:
    case 8:
      return v4;
    default:
      return (*(unsigned __int8 *)(a2[4] + 3) >> 6) & 1;
  }
}

unsigned char *MTLCompilerObject::deserializePluginData(unsigned char *result, void *a2, uint64_t a3)
{
  uint64_t v4 = result;
  switch(a2[5])
  {
    case 1:
      uint64_t v11 = a2[4];
      uint64_t v12 = (const unsigned __int8 *)(*a2 + *(unsigned int *)(v11 + 24));
      if (*(_DWORD *)(v11 + 28) >= 0xCu)
      {
        uint64_t v13 = *(unsigned int *)v12;
        if (v13)
        {
          uint64_t result = MTLDeserializePluginDataDictionary(&v12[v13]);
          *(void *)(a3 + 112) = result;
        }
        uint64_t v14 = *((unsigned int *)v12 + 1);
        if (v14)
        {
          uint64_t result = MTLDeserializePluginDataDictionary(&v12[v14]);
          *(void *)(a3 + 120) = result;
        }
      }
      char v9 = v4[128];
      int v10 = (*((_DWORD *)v12 + 2) >> 19) & 1;
      goto LABEL_23;
    case 2:
      uint64_t v15 = a2[4];
      int v16 = (const unsigned __int8 *)(*a2 + *(unsigned int *)(v15 + 24));
      if (*(_DWORD *)(v15 + 28) >= 0x10u)
      {
        uint64_t v17 = *(unsigned int *)v16;
        if (v17)
        {
          uint64_t result = MTLDeserializePluginDataDictionary(&v16[v17]);
          *(void *)(a3 + 112) = result;
        }
        uint64_t v18 = *((unsigned int *)v16 + 1);
        if (v18)
        {
          uint64_t result = MTLDeserializePluginDataDictionary(&v16[v18]);
          *(void *)(a3 + 120) = result;
        }
      }
      char v9 = v4[128];
      int v10 = (*((_DWORD *)v16 + 2) >> 29) & 1;
      goto LABEL_23;
    case 3:
      uint64_t v19 = a2[4];
      uint64_t v20 = (const unsigned __int8 *)(*a2 + *(unsigned int *)(v19 + 24));
      if (*(_DWORD *)(v19 + 28) >= 0xCu)
      {
        uint64_t v21 = *(unsigned int *)v20;
        if (v21)
        {
          uint64_t result = MTLDeserializePluginDataDictionary(&v20[v21]);
          *(void *)(a3 + 112) = result;
        }
        uint64_t v22 = *((unsigned int *)v20 + 1);
        if (v22)
        {
          uint64_t result = MTLDeserializePluginDataDictionary(&v20[v22]);
          *(void *)(a3 + 120) = result;
        }
      }
      v4[128] |= (v20[8] & 8) != 0;
      v4[129] |= (v20[8] & 0x10) != 0;
      return result;
    case 5:
    case 6:
      goto LABEL_2;
    case 7:
    case 8:
      uint64_t v5 = a2[4];
      uint64_t v6 = (const unsigned __int8 *)(*a2 + *(unsigned int *)(v5 + 24));
      if (*(_DWORD *)(v5 + 28) >= 0xCu)
      {
        uint64_t v7 = *(unsigned int *)v6;
        if (v7)
        {
          uint64_t result = MTLDeserializePluginDataDictionary(&v6[v7]);
          *(void *)(a3 + 112) = result;
        }
        uint64_t v8 = *((unsigned int *)v6 + 1);
        if (v8)
        {
          uint64_t result = MTLDeserializePluginDataDictionary(&v6[v8]);
          *(void *)(a3 + 120) = result;
        }
      }
      char v9 = v4[128];
      int v10 = (v6[8] >> 3) & 1;
LABEL_23:
      v4[128] = v10 | v9;
      break;
    default:
      if ((*(unsigned char *)(a2[4] + 3) & 0x40) != 0)
      {
LABEL_2:
        uint64_t result = deserializePluginDataForFunctionType<MTLSerializedStatelessFunctionData>(a2, a3);
      }
      break;
  }
  return result;
}

void MTLCompilerObject::backendCompileModule(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9 = *(_DWORD *)(a2[4] + 4);
  uint64_t v10 = (v9 >> 8) & 1 | *((_DWORD *)a2 + 14);
  if ((v9 & 0x200) != 0)
  {
    uint64_t v10 = v10 | 2;
    uint64_t v11 = mach_absolute_time();
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8 * *((unsigned int *)a2 + 4));
  if (*(unsigned char *)(v12 + 137)) {
    *(void *)(*(void *)(v12 + 112) + 16) = *(void *)(a1 + 88);
  }
  uint64_t v13 = (_DWORD *)a2[4];
  unsigned int v14 = v13[56];
  if (v14 >> 3 >= 0xFA3)
  {
    *(_DWORD *)(a3 + 24) = 1;
    uint64_t v15 = "Cannot compile for given LLVM version";
LABEL_8:
    *(void *)(a3 + 16) = v15;
    return;
  }
  uint64_t v16 = *a2;
  uint64_t v17 = v13[2];
  if (v14) {
    BOOL v18 = v14 == 32023;
  }
  else {
    BOOL v18 = 1;
  }
  int v19 = !v18;
  if (v13[12])
  {
    if (!MTLDowngradeAIRModule())
    {
      *(_DWORD *)(a3 + 24) = 1;
      uint64_t v15 = *(const char **)(a1 + 120);
      goto LABEL_8;
    }
    uint64_t v58 = v11;
    uint64_t v13 = (_DWORD *)a2[4];
  }
  else
  {
    uint64_t v58 = v11;
  }
  uint64_t v59 = a5;
  int v20 = v13[1];
  BOOL v21 = (v20 & 0x3001090) != 0 || *(unsigned char *)(a1 + 128) != 0;
  uint64_t v22 = v16 + v17;
  if (v13[50])
  {
    __int16 v23 = (unsigned int *)(*a2 + v13[49]);
    BOOL v24 = Air::PipelineScript::pipeline_as_mesh_render((Air::PipelineScript *)((char *)v23 + *v23)) == 0;
    uint64_t v13 = (_DWORD *)a2[4];
  }
  else
  {
    BOOL v24 = 1;
  }
  uint64_t v25 = *(void *)(*(void *)(a1 + 64) + 8 * *((unsigned int *)a2 + 4));
  if (!*(unsigned char *)(v25 + 136)) {
    goto LABEL_29;
  }
  if (!v13[50]) {
    BOOL v24 = 1;
  }
  if (!v21 && !v24)
  {
    getSerializedModule(v14, &v67);
    uint64_t v29 = *(void *)(v67 + 8);
    uint64_t v28 = *(void *)(v67 + 16);
    uint64_t v57 = v67;
    uint64_t v30 = (unsigned int *)(*a2 + *(unsigned int *)(a2[4] + 196));
    MTLCompilerObject::AIRNTGetFunctionScriptFromPipeline((const Air::PipelineScript *)((char *)v30 + *v30), (MTLFunctionType)a2[5], (uint64_t)v65);
    long long v31 = v66;
    uint64_t v32 = *v66;
    uint64_t v33 = a2[4];
    unint64_t v34 = *(void *)(v33 + 208);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(a1 + 64) + 8
                                                                                        * *((unsigned int *)a2 + 4))
                                                     + 48))(v22, *(unsigned int *)(v33 + 12));
    uint64_t v36 = (char *)v31 + v32;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v60 = 0;
    int v37 = *(_DWORD *)(a2[4] + 4);
    uint64_t v38 = &v62;
    if ((v37 & 0x200) == 0) {
      uint64_t v38 = 0;
    }
    std::string v39 = &v61;
    if ((v37 & 0x200) == 0) {
      std::string v39 = 0;
    }
    uint64_t v40 = *(void *)(*(void *)(a1 + 64) + 8 * *((unsigned int *)a2 + 4));
    *(_DWORD *)(a3 + 24) = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const char *, unint64_t, unint64_t, char *, const char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, char **))(v40 + 40))(*(void *)(v40 + 128), v35, v10, v29, v28 - v29, "offline_module_name", HIDWORD(v34), v34, v36, "offline_script_name", &v64, &v63, v38, v39, &v60) ^ 1;
    (*(void (**)(uint64_t))(*(void *)(*(void *)(a1 + 64) + 8 * *((unsigned int *)a2 + 4)) + 56))(v35);
    uint64_t v41 = v63;
    *(void *)a3 = v64;
    *(void *)(a3 + 8) = v41;
    uint64_t v27 = v59;
    uint64_t v42 = v60;
    uint64_t v26 = v58;
    if (v60)
    {
      *(void *)(a3 + 16) = strdup(v60);
      free(v42);
    }
    else
    {
      *(void *)(a3 + 16) = 0;
    }
    uint64_t v44 = v61;
    uint64_t v43 = v62;
    if ((v37 & 0x200) == 0)
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
    }
    *(void *)(a3 + 48) = v43;
    *(void *)(a3 + 56) = v44;
    flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)v65);
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  else
  {
LABEL_29:
    *(_DWORD *)(a3 + 24) = MTLCompilerPluginInterface::compilerBuildRequest(v25, (v20 & 0x200000 | v19) != 0, v14, v22, v13[3], v10, (llvm::Module *)a2[6], (void *)a3);
    uint64_t v26 = v58;
    uint64_t v27 = v59;
  }
  if ((*(unsigned char *)(a2[4] + 5) & 2) != 0)
  {
    unint64_t v45 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v26));
    *(void *)(a3 + 64) = v45;
    unint64_t v46 = *(void *)(v27 + 16);
    unsigned __int8 v47 = *(void **)(v27 + 8);
    if ((unint64_t)v47 >= v46)
    {
      int v49 = *(void **)v27;
      uint64_t v50 = ((uint64_t)v47 - *(void *)v27) >> 4;
      unint64_t v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 60) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v52 = v46 - (void)v49;
      if (v52 >> 3 > v51) {
        unint64_t v51 = v52 >> 3;
      }
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v51;
      }
      if (v53)
      {
        long long v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>(v27 + 16, v53);
        int v49 = *(void **)v27;
        unsigned __int8 v47 = *(void **)(v27 + 8);
      }
      else
      {
        long long v54 = 0;
      }
      long long v55 = &v54[16 * v50];
      long long v56 = &v54[16 * v53];
      *(_DWORD *)long long v55 = 5;
      *((void *)v55 + 1) = v45;
      __int16 v48 = v55 + 16;
      if (v47 != v49)
      {
        do
        {
          *((_OWORD *)v55 - 1) = *((_OWORD *)v47 - 1);
          v55 -= 16;
          v47 -= 2;
        }
        while (v47 != v49);
        int v49 = *(void **)v27;
      }
      *(void *)uint64_t v27 = v55;
      *(void *)(v27 + 8) = v48;
      *(void *)(v27 + 16) = v56;
      if (v49) {
        operator delete(v49);
      }
    }
    else
    {
      *(_DWORD *)unsigned __int8 v47 = 5;
      v47[1] = v45;
      __int16 v48 = (char *)(v47 + 2);
    }
    *(void *)(v27 + 8) = v48;
  }
}

void sub_25570B3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)va);
  (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

uint64_t Air::PipelineScript::pipeline_as_mesh_render(Air::PipelineScript *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((unsigned char *)this + v1[4]) == 4) : (v3 = 0), v3 && (uint64_t v4 = v1[5]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t MTLCompilerPluginInterface::compilerBuildRequest(uint64_t a1, int a2, signed int a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::Module *a7, void *a8)
{
  if (a2)
  {
    if (a3 == 32023) {
      signed int v13 = 0;
    }
    else {
      signed int v13 = a3;
    }
    getSerializedModule(v13, &v22);
    uint64_t v14 = v22;
    if (*(void *)(v22 + 16) == *(void *)(v22 + 8))
    {
      int v19 = "Invalid serialized bitcode";
    }
    else
    {
      uint64_t v15 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(a1 + 80);
      if (v15)
      {
        *(unsigned char *)(a1 + 138) = 1;
        uint64_t v16 = v15(*(void *)(a1 + 112), a4, a5, a6);
LABEL_16:
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        return v16;
      }
      int v19 = "Driver does not support MTLCompilerBuildRequestWithSerializedBitcode, but MTLCompilerOptionCompilerPluginReq"
            "uiresSerializedBitcode was set.";
    }
    a8[2] = v19;
    uint64_t v16 = 1;
    goto LABEL_16;
  }
  *(unsigned char *)(a1 + 138) = 1;
  uint64_t v17 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, llvm::Module *, void *, void *, void *, void *, void *, void *, void *))(a1 + 32);
  if (v17) {
    return v17(*(void *)(a1 + 112), a4, a5, a6, a7, a8, a8 + 1, a8 + 4, a8 + 5, a8 + 6, a8 + 7, a8 + 2);
  }
  a8[5] = 0;
  a8[7] = 0;
  int v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::Module *, void *, void *, void *))(a1 + 24);
  uint64_t v21 = *(void *)(a1 + 112);
  return v20(v21, a4, a5, a7, a8, a8 + 1, a8 + 2);
}

void sub_25570B648(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerObject::generateReflection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  if ((v4 & 1) == 0) {
    return 0;
  }
  LODWORD(v17.__r_.__value_.__l.__data_) = 0;
  memset(v16, 0, sizeof(v16));
  if (*(void *)(a2 + 40) == 1)
  {
    uint64_t v14 = (void **)(a1 + 120);
    char v15 = 0;
    MTLAddPostVertexDumpingToModulePass::addPostVertexDumpingToModule((int)&v14, *(llvm::Module **)(a2 + 48), -1, 1, &v17, (uint64_t *)v16, (v4 >> 10) & 1);
    unsigned int v4 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
    int data = (int)v17.__r_.__value_.__l.__data_;
  }
  else
  {
    int data = 0;
  }
  uint64_t v14 = (void **)(a1 + 120);
  char v15 = 0;
  ReflectionData = MTLGenerateReflectionDataPass::generateReflectionData((uint64_t)&v14, *(llvm::Module **)(a2 + 48), v4, (void *)(a3 + 8), data, v16, *(const void **)(a3 + 128), *(void *)(a3 + 136), (uint64_t *)(a3 + 24));
  unsigned int v9 = *(void **)a3;
  *(void *)a3 = ReflectionData;
  if (v9) {
    free(v9);
  }
  uint64_t v14 = v16;
  std::vector<PostVertexDumpOutput>::__destroy_vector::operator()[abi:ne180100](&v14);
  uint64_t v10 = *(void *)(a2 + 32);
  if ((*(unsigned char *)(v10 + 4) & 2) == 0) {
    return 0;
  }
  if ((*(unsigned char *)(v10 + 2) & 0x80) != 0)
  {
    if (!*(void *)(a3 + 168) && !*(unsigned char *)(a1 + 128))
    {
      uint64_t v12 = MTLWriteAIRReflectionToMemoryBuffer();
      std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100]((uint64_t *)(a3 + 168), v12);
    }
    if (!*(void *)(a3 + 176) && !*(unsigned char *)(a1 + 128))
    {
      uint64_t v13 = MTLWriteAIRReflectionToMemoryBuffer();
      std::unique_ptr<void,LLVMMemoryBufferDeleter>::reset[abi:ne180100]((uint64_t *)(a3 + 176), v13);
    }
  }
  MTLCompilerObject::patchReflection(a1, a2, a3);
  CompilerOutputReflectionBlock::CompilerOutputReflectionBlock(v16, *(void *)a3);
  (*(void (**)(void))(*(void *)(a2 + 24) + 16))();
  CompilerOutputReflectionBlock::~CompilerOutputReflectionBlock(v16);
  return 1;
}

void sub_25570B824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  CompilerOutputReflectionBlock::~CompilerOutputReflectionBlock((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerObject::runFragmentPasses(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[4];
  if (!*(_DWORD *)(v2 + 28)) {
    return 1;
  }
  uint64_t v4 = *a2 + *(unsigned int *)(v2 + 24);
  char v5 = ((*(_DWORD *)(v4 + 8) & 0x20000000) != 0) | *(unsigned char *)(a1 + 128);
  *(unsigned char *)(a1 + 128) = v5;
  uint64_t v6 = (void *)(a1 + 120);
  uint64_t v13 = (char **)(a1 + 120);
  char v14 = v5;
  uint64_t v7 = (llvm::Module *)a2[6];
  uint64_t v8 = (unsigned __int16 *)(*(int *)(v4 + 8) >= 0 ? v4 + 16 : v4 + 24);
  if (MTLCheckPixelFormatValidPass::checkPixelFormatValid(&v13, v7, v4, v8)) {
    return 1;
  }
  uint64_t v11 = a2[6];
  if (v11)
  {
    uint64_t v12 = MEMORY[0x25A28D8E0](v11, v9);
    MEMORY[0x25A28E250](v12, 0x10B2C407FF26C1CLL);
  }
  a2[6] = 0;
  (*(void (**)(void, void, void, void))(a2[3] + 16))(a2[3], 2 * (*v6 != 0), 0, 0);
  return 0;
}

uint64_t MTLCheckPixelFormatValidPass::checkPixelFormatValid(char ***a1, llvm::Module *this, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *(void *)&v40[0] = "air.fragment";
  LOWORD(v41) = 259;
  NamedMetaint data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v40);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  uint64_t v9 = (void *)(Operand - 8 * *(unsigned int *)(Operand + 8));
  uint64_t v10 = v9[1];
  uint64_t v11 = *(llvm::Function **)(*v9 + 128);
  uint64_t v12 = **(void **)(*((void *)v11 + 3) + 16);
  uint64_t v13 = *(unsigned int *)(v10 + 8);
  uint64_t v44 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  memset(v40, 0, sizeof(v40));
  uint64_t v14 = *(unsigned __int8 *)(a3 + 8);
  if (*(unsigned char *)(a3 + 8))
  {
    do
    {
      unsigned int v15 = *a4++;
      *((void *)v40 + (v15 & 0xF)) = (unint64_t)v15 >> 4;
      --v14;
    }
    while (v14);
  }
  if (v13)
  {
    int v37 = v11;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = v12;
      if (*(unsigned char *)(v12 + 8) == 16) {
        uint64_t v19 = *(void *)(*(void *)(v12 + 16) + 8 * v16);
      }
      uint64_t result = MTLCheckPixelFormatValidPass::formatIsValid((uint64_t)a1, v10, v16, v19, (uint64_t)v40, a3, (uint64_t)v38, 1);
      if (!result) {
        break;
      }
      if (v38[0])
      {
        uint64_t v21 = 1 << v38[2];
        if (v39) {
          v17 |= v21;
        }
        else {
          v18 |= v21;
        }
      }
      if (v13 == ++v16)
      {
        uint64_t v44 = v17;
        uint64_t v11 = v37;
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v18 = 0;
LABEL_15:
    uint64_t v22 = 0;
    uint64_t v43 = v18;
    int v23 = *(_DWORD *)(a3 + 8);
    int v24 = BYTE2(v23);
    int v25 = BYTE1(v23);
    while (2)
    {
      uint64_t v26 = 0;
      char v27 = 1;
      do
      {
        char v28 = v27;
        if (v27) {
          int v29 = v25;
        }
        else {
          int v29 = v24;
        }
        if (((1 << v22) & v29) != 0 && (*(&v43 + v26) & (1 << v22)) == 0)
        {
          MTLCompilerErrorObject::setFormattedErrorMessage(*a1, "Fragment shader does not write to render target color(0), index(%u) that is required for blending", v26);
          return 0;
        }
        char v27 = 0;
        uint64_t v26 = 1;
      }
      while ((v28 & 1) != 0);
      if (++v22 != 8) {
        continue;
      }
      break;
    }
    uint64_t v30 = *(void *)(Operand - 8 * *(unsigned int *)(Operand + 8) + 16);
    if (*((_WORD *)v11 + 9)) {
      llvm::Function::BuildLazyArguments(v11);
    }
    if (v30 && (int v31 = *(_DWORD *)(v30 + 8)) != 0)
    {
      unsigned int v32 = 0;
      uint64_t v33 = (uint64_t *)*((void *)v11 + 11);
      int v34 = v31 - 1;
      do
      {
        uint64_t v35 = *v33;
        v33 += 5;
        uint64_t result = MTLCheckPixelFormatValidPass::formatIsValid((uint64_t)a1, v30, v32, v35, (uint64_t)v40, a3, (uint64_t)v38, 0);
        if (result) {
          BOOL v36 = v34 == v32;
        }
        else {
          BOOL v36 = 1;
        }
        ++v32;
      }
      while (!v36);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t MTLCheckPixelFormatValidPass::formatIsValid(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  *(unsigned char *)a7 = 0;
  uint64_t v13 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * a3);
  uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v13
                                                                  - 8 * *(unsigned int *)(v13 + 8)
                                                                  + 8 * (a8 ^ 1u)));
  if (v15 == 9)
  {
    if (memcmp(String, "air.depth", 9uLL) || *(unsigned char *)(a1 + 8)) {
      return 1;
    }
    MTLPixelFormatGetInfoForDevice();
    MTLCompilerErrorObject::setErrorMessage(*(MTLCompilerErrorObject **)a1, "depthAttachmentPixelFormat is not valid and shader writes to depth");
  }
  else
  {
    if (v15 != 17) {
      return 1;
    }
    BOOL v16 = *String == 0x646E65722E726961 && String[1] == 0x65677261745F7265;
    if (!v16 || *((unsigned char *)String + 16) != 116) {
      return 1;
    }
    *(unsigned char *)a7 = 1;
    uint64_t v18 = v13 - 8 * *(unsigned int *)(v13 + 8);
    uint64_t v19 = 16;
    if (a8) {
      uint64_t v19 = 8;
    }
    uint64_t v20 = *(void *)(*(void *)(v18 + v19) + 128);
    if (*(unsigned char *)(v20 + 16) == 16)
    {
      uint64_t v21 = (void *)(v20 + 24);
      if (*(_DWORD *)(v20 + 32) >= 0x41u) {
        uint64_t v21 = (void *)*v21;
      }
      unsigned int v22 = *(_DWORD *)v21;
    }
    else
    {
      unsigned int v22 = -1;
    }
    uint64_t v23 = *(void *)(a5 + 8 * v22);
    *(_WORD *)(a7 + 2) = v22;
    if (a8)
    {
      uint64_t v24 = *(void *)(*(void *)(v18 + 16) + 128);
      if (*(unsigned char *)(v24 + 16) == 16)
      {
        int v25 = (void *)(v24 + 24);
        if (*(_DWORD *)(v24 + 32) >= 0x41u) {
          int v25 = (void *)*v25;
        }
        __int16 v26 = *(_WORD *)v25;
      }
      else
      {
        __int16 v26 = -1;
      }
      *(_WORD *)(a7 + 4) = v26;
    }
    if (MTLCheckPixelFormatValidPass::pixelColorFormatValid((MTLCompilerErrorObject **)a1, v23, a4, v13, a8)) {
      return 1;
    }
  }
  return 0;
}

uint64_t MTLCheckPixelFormatValidPass::pixelColorFormatValid(MTLCompilerErrorObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!a2)
  {
    if (a5) {
      return 1;
    }
    MTLCompilerErrorObject::setErrorMessage(*a1, "Shaders reads from a color attachment whose pixel format is MTLPixelFormatInvalid");
    return 0;
  }
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  __srCC_SHA256_CTX c = 0;
  size_t __len = 0;
  uint64_t InfoForDevice = MTLPixelFormatGetInfoForDevice();
  if (!MTLCheckPixelFormatValidPass::getArgumentTypeName(InfoForDevice, a4, (const char **)&__src))
  {
    int v14 = *(_DWORD *)(a3 + 8);
    LOBYTE(v15) = *(_DWORD *)(a3 + 8);
    if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
      int v15 = *(_DWORD *)(**(void **)(a3 + 16) + 8);
    }
    if ((v15 | 2) == 2)
    {
      if ((BYTE10(v27) & 3) != 0) {
        goto LABEL_20;
      }
      BOOL v16 = "Floating point fragment input cannot be read from a %s color attachment";
      uint64_t v17 = *a1;
      uint64_t v18 = "Floating point fragment output cannot be written to a %s color attachment";
    }
    else
    {
      if ((BYTE10(v27) & 3) == 0) {
        goto LABEL_20;
      }
      BOOL v16 = "Integer fragment input cannot be read from a %s color attachment";
      uint64_t v17 = *a1;
      uint64_t v18 = "Integer fragment output cannot be written to a %s color attachment";
    }
    if (a5) {
      MTLCompilerErrorObject::setFormattedErrorMessage((char **)v17, v18, (void)v27);
    }
    else {
      MTLCompilerErrorObject::setFormattedErrorMessage((char **)v17, v16, (void)v27);
    }
    return 0;
  }
  unint64_t ComponentType = MTLDataTypeGetComponentType();
  if (ComponentType > 0x29) {
    goto LABEL_47;
  }
  if (((1 << ComponentType) & 0x10008) != 0)
  {
    int v12 = 196608;
    goto LABEL_18;
  }
  if (((1 << ComponentType) & 0x2020000000) != 0)
  {
    int v12 = 1310720;
    goto LABEL_18;
  }
  if (((1 << ComponentType) & 0x20200000000) == 0) {
LABEL_47:
  }
    abort();
  int v12 = 2621440;
LABEL_18:
  if ((DWORD2(v27) & v12) == 0)
  {
    if (a5) {
      uint64_t v20 = "output";
    }
    else {
      uint64_t v20 = "input";
    }
    uint64_t v21 = *a1;
    if (__src)
    {
      std::string::basic_string[abi:ne180100](__p, __src, __len);
      if (v24 >= 0) {
        unsigned int v22 = __p;
      }
      else {
        unsigned int v22 = (void **)__p[0];
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      unsigned int v22 = __p;
      uint64_t v24 = 0;
    }
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)v21, "%s of type %s is not compatible with a %s color attachment.", v20, (const char *)v22, (const char *)v27);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  int v14 = *(unsigned __int8 *)(a3 + 8);
LABEL_20:
  if (v14 == 18) {
    unsigned int v19 = *(_DWORD *)(a3 + 32);
  }
  else {
    unsigned int v19 = 1;
  }
  if (a2 == 1 && a5 && v19 <= 3)
  {
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "fragment shader color output requires 4 outputs for pixel format (%s)");
    return 0;
  }
  uint64_t result = 1;
  if (a5 && v19 < v29)
  {
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "fragment shader color output does not have enough components for the pixel format (%s)");
    return 0;
  }
  return result;
}

void sub_25570C04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLCheckPixelFormatValidPass::getArgumentTypeName(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * v6);
      if (v7)
      {
        if (!*(unsigned char *)v7)
        {
          uint64_t String = llvm::MDString::getString(v7);
          if (v9 == 17)
          {
            BOOL v10 = *(void *)String == 0x5F6772612E726961 && *(void *)(String + 8) == 0x6D616E5F65707974;
            if (v10 && *(unsigned char *)(String + 16) == 101) {
              break;
            }
          }
        }
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = v5;
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((int)v6 + 1 >= v5) {
    return 0;
  }
  int v12 = (const char *)llvm::MDString::getString(*(llvm::MDString **)(a2
                                                                   - 8 * *(unsigned int *)(a2 + 8)
                                                                   + 8 * (v6 + 1)));
  int v14 = v13;
  size_t v15 = strlen(v12);
  uint64_t result = dataTypeFromString(v12, v15);
  *a3 = v12;
  a3[1] = v14;
  return result;
}

uint64_t MTLCompilerObject::runLinkingPasses(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 40);
  if (v7 == 1)
  {
    uint64_t result = MTLCompilerObject::runVertexLinkingPass((uint64_t)a1, a2, a3, a4);
    if (!result) {
      return result;
    }
    uint64_t v7 = *(void *)(a2 + 40);
  }
  if (v7 == 2) {
    MTLCompilerObject::runFragmentLinkingPass(a1, a2, a3);
  }
  return 1;
}

void *MTLCompilerObject::runFragmentLinkingPass(void *result, uint64_t a2, uint64_t a3)
{
  v8[4] = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  if ((v3 & 4) != 0)
  {
    uint64_t v5 = result + 15;
    char v6 = 0;
    uint64_t v4 = *(llvm::Type ***)(a2 + 48);
    if ((v3 & 8) != 0)
    {
      v8[0] = &unk_270454550;
      v8[1] = a3;
      v8[3] = v8;
      MTLFragmentInputPackingPass::fragmentInputPacking((int)&v5, v4, (uint64_t)v8);
      return std::__function::__value_func<void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,std::vector<PackedInput> const&,std::vector<VaryingInfo> const&)>::~__value_func[abi:ne180100](v8);
    }
    else
    {
      v7[0] = &unk_270454598;
      v7[1] = a3;
      v7[3] = v7;
      MTLFragmentInputLinkingPass::fragmentInputLinking((int)&v5, (llvm::Module *)v4, (uint64_t)v7);
      return std::__function::__value_func<void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<VaryingInfo> const&)>::~__value_func[abi:ne180100](v7);
    }
  }
  return result;
}

void sub_25570C2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,std::vector<PackedInput> const&,std::vector<VaryingInfo> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void MTLCompilerObject::patchReflection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)(a2 + 32) + 4))
  {
    uint64_t v3 = a1 + 120;
    char v4 = 0;
    MTLGenerateReflectionDataPass::patchTraceBufferReflectionData((MTLGenerateReflectionDataPass *)&v3, *(llvm::Module **)(a2 + 48), *(char **)a3, *(void *)(a3 + 24));
  }
}

uint64_t MTLCompilerObject::lowerModule(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 128)) {
    return 1;
  }
  int v8 = a1;
  uint64_t v9 = *(llvm::Module **)(a2 + 48);
  MTLCompilerObject::loadRuntimeModules(a1, a2);
  uint64_t v10 = *(void *)(a2 + 32);
  if ((*(unsigned char *)(v10 + 3) & 2) != 0 && v9)
  {
    uint64_t v9 = (llvm::Module *)MTLCompilerObject::invokeLowerModule(v8, v10, a4, v9, *(MTLFunctionType *)(a2 + 40), *(void *)(a2 + 24));
    **(_DWORD **)(a2 + 32) &= ~0x2000000u;
  }
  BOOL v4 = v9 != 0;
  if (!v9)
  {
    free(*(void **)(a3 + 128));
    *(void *)(a3 + 128) = 0;
  }
  *(void *)(a2 + 48) = v9;
  return v4;
}

uint64_t MTLCompilerObject::invokeLowerModule(int a1, uint64_t a2, int a3, llvm::Module *a4, MTLFunctionType a5, uint64_t a6)
{
  if (*(_DWORD *)(a2 + 284))
  {
    MTLGPUCompilerHandleSPIs();
    free(0);
  }
  if (a5 <= MTLFunctionTypeObject && ((1 << a5) & 0x186) != 0)
  {
    if ((*(unsigned char *)(a2 + 5) & 8) != 0)
    {
      getMDNodeForFunctionType(a4, a5);
      MTLGPUCompilerEnableDegenerateVertexAmplificationEmulation();
    }
    if (a5 == MTLFunctionTypeFragment && (*(unsigned char *)(a2 + 5) & 0x20) != 0)
    {
      MDNodeForFunctionType = getMDNodeForFunctionType(a4, MTLFunctionTypeFragment);
      uint64_t v11 = ((void *)MDNodeForFunctionType - *((unsigned int *)MDNodeForFunctionType + 2))[2];
      if (v11)
      {
        uint64_t v12 = *(unsigned int *)(v11 + 8);
        if (v12)
        {
          uint64_t v13 = MDNodeForFunctionType;
          uint64_t v14 = -8 * v12;
          while (1)
          {
            uint64_t v15 = *(void *)(v11 + v14);
            uint64_t v16 = *(unsigned int *)(v15 + 8);
            if (v16 >= 2)
            {
              uint64_t v17 = *(llvm::MDString **)(v15 - 8 * v16 + 8);
              if (!*(unsigned char *)v17)
              {
                uint64_t String = (void *)llvm::MDString::getString(v17);
                if (v19 == (llvm::Type *)29)
                {
                  BOOL v20 = *String == 0x646E65722E726961 && String[1] == 0x65677261745F7265;
                  BOOL v21 = v20 && String[2] == 0x5F79617272615F74;
                  if (v21 && *(void *)((char *)String + 21) == 0x7865646E695F7961) {
                    break;
                  }
                }
              }
              uint64_t v23 = *(unsigned int *)(v15 + 8);
              if (v23 >= 4)
              {
                uint64_t v24 = *(llvm::MDString **)(v15 - 8 * v23 + 24);
                if (!*(unsigned char *)v24)
                {
                  int v25 = (unint64_t *)llvm::MDString::getString(v24);
                  if (v19 == (llvm::Type *)29)
                  {
                    unint64_t v26 = bswap64(*v25);
                    unint64_t v27 = 0x6169722E72656E64;
                    if (v26 != 0x6169722E72656E64) {
                      goto LABEL_33;
                    }
                    unint64_t v27 = 0x65725F7461726765;
                    unint64_t v26 = bswap64(v25[1]);
                    if (v26 == 0x65725F7461726765
                      && (v27 = 0x745F61727261795FLL, unint64_t v26 = bswap64(v25[2]), v26 == 0x745F61727261795FLL)
                      && (unint64_t v27 = 0x61795F696E646578,
                          unint64_t v26 = bswap64(*(unint64_t *)((char *)v25 + 21)),
                          v26 == 0x61795F696E646578))
                    {
                      int v28 = 0;
                    }
                    else
                    {
LABEL_33:
                      int v28 = v26 < v27 ? -1 : 1;
                    }
                    if (!v28) {
                      break;
                    }
                  }
                }
              }
            }
            v14 += 8;
            if (!v14) {
              goto LABEL_38;
            }
          }
          uint64_t v30 = *(void *)(*((void *)v13 - *((unsigned int *)v13 + 2)) + 128);
          uint64_t v31 = *(void *)(*(void *)(v15 - 8 * *(unsigned int *)(v15 + 8)) + 128);
          unsigned int v32 = (void *)(v31 + 24);
          if (*(_DWORD *)(v31 + 32) >= 0x41u) {
            unsigned int v32 = (void *)*v32;
          }
          unsigned int v33 = *(_DWORD *)v32;
          if (*(_WORD *)(v30 + 18)) {
            llvm::Function::BuildLazyArguments((llvm::Function *)v30);
          }
          llvm::Constant::getNullValue(*(llvm::Constant **)(*(void *)(v30 + 88) + 40 * v33), v19);
          llvm::Value::replaceAllUsesWith();
          llvm::MDString::get();
          llvm::MDNode::replaceOperandWith();
        }
      }
    }
  }
LABEL_38:
  MTLGPUCompilerEnableRaytracingEmulation();
  MTLGPUCompilerSetRaytracingEmulationIndirectAccelerationStructures();
  MTLGPUCompilerSetRaytracingEmulationMaxAccelerationStructureTraversalDepth();
  MTLGPUCompilerEnable16BitTextureCoordinateEmulation();
  MTLGPUCompilerEnableTLSEmulation();
  MTLGPUCompilerEnableResourcePatchingInstrumentation();
  MTLGPUCompilerEnableResourceUsageInstrumentation();
  MTLGPUCompilerEnableExternallyInitializedVariableSupport();
  MTLGPUCompilerEnableBFloatEmulation();
  MTLGPUCompilerEnableDoubleEmulation();
  MTLGPUCompilerEnableGlobalBindingInDylibSupport();
  MTLGPUCompilerEnableGlobalBuiltinInDylibSupport();
  if (!MTLGPUCompilerLowerModule()) {
    (*(void (**)(uint64_t, uint64_t, void, void, void))(a6 + 16))(a6, 2, 0, 0, 0);
  }
  free(0);
  return 0;
}

void std::vector<PostVertexDumpOutput>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<PostVertexDumpOutput>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    uint64_t result = std::vector<CompileTimeData>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25570C914(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *MTLCompilerObject::serializeLibraryToArchiveReply(uint64_t a1, size_t *a2, const char **a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  int v28 = a5;
  unint64_t v12 = 0;
  if (a4)
  {
    uint64_t v13 = a3;
    uint64_t v14 = a4;
    do
    {
      if (*v13) {
        v12 += strlen(*v13) + 1;
      }
      ++v13;
      --v14;
    }
    while (v14);
    if (v12 >= 0xFFFFFFFF) {
      return 0;
    }
    size_t v15 = v12 + 104;
    a5 = v28;
  }
  else
  {
    size_t v15 = 104;
  }
  unint64_t v27 = a2;
  uint64_t v26 = a1;
  if (a5)
  {
    unsigned int v16 = LLVMGetBufferSize();
    if (a7) {
      int v17 = v15 + v16;
    }
    else {
      int v17 = 0;
    }
    int v18 = v15;
    v15 += v16 + (unint64_t)a7;
    char v19 = 3;
  }
  else
  {
    int v18 = 0;
    unsigned int v16 = 0;
    int v17 = 0;
    LODWORD(a7) = 0;
    char v19 = 2;
  }
  BOOL v20 = (char *)malloc_type_malloc(v15, 0x9691608AuLL);
  *BOOL v20 = v19;
  *(_DWORD *)(v20 + 1) = 0;
  *(void *)(v20 + 4) = 0x6800000000;
  *((_DWORD *)v20 + 3) = v12;
  *((void *)v20 + 3) = 0;
  *((void *)v20 + 4) = 0;
  *((void *)v20 + 2) = 0;
  *((_DWORD *)v20 + 10) = v18;
  *((_DWORD *)v20 + 11) = v16;
  *((_DWORD *)v20 + 12) = v17;
  *((_DWORD *)v20 + 13) = a7;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  if (v8)
  {
    uint64_t v21 = 0;
    do
    {
      unsigned int v22 = (char *)*v9;
      if (*v9)
      {
        size_t v23 = strlen(*v9) + 1;
        if (v8 != 1) {
          v22[v23] = 10;
        }
        memcpy(&v20[v21 + 104], v22, v23);
        free(v22);
        v21 += v23;
      }
      ++v9;
      --v8;
    }
    while (v8);
  }
  if ((v28 & 1) == 0)
  {
    MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(v26 + 120), v20 + 104);
    free(v20);
    return 0;
  }
  uint64_t v24 = (const void *)LLVMGetBufferStart();
  memcpy(&v20[v18], v24, v16);
  size_t *v27 = v15;
  return v20;
}

uint64_t MTLCompilerObject::applyConstantValuesToArchive(uint64_t a1, llvm::LLVMContext *this, uint64_t a3, uint64_t a4, const char *a5, unint64_t a6, uint64_t a7, const char **a8)
{
  v18[0] = this;
  unint64_t v12 = (MTLCompilerErrorObject *)(a1 + 120);
  v18[2] = llvm::LLVMContext::getDiagnosticContext(this);
  v18[1] = llvm::LLVMContext::getDiagnosticHandlerCallBack(this);
  llvm::LLVMContext::setDiagnosticHandlerCallBack();
  unsigned int v17 = 0;
  uint64_t v13 = parseFunctionConstants(this, a5, a6, &v17);
  int v14 = MTLGPUCompilerSpecializeFunctionToBuffer();
  free(v13);
  if (!v14)
  {
    if (a8) {
      size_t v15 = *a8;
    }
    else {
      size_t v15 = "Failed to specialize function.";
    }
    MTLCompilerErrorObject::setErrorMessage(v12, v15);
  }
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)v18);
  return 0;
}

void sub_25570CC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)va);
  _Unwind_Resume(a1);
}

void serializeCompileTimeDataInReply(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 52))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 48);
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(&v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    uint64_t v4 = v11;
    if (v12 == v11)
    {
      uint64_t v4 = v12;
    }
    else
    {
      uint64_t v5 = a1 + v3;
      uint64_t v6 = (v12 - v11) >> 4;
      *(_WORD *)uint64_t v5 = v6;
      *(unsigned char *)(v5 + 2) = BYTE2(v6);
      *(unsigned char *)(v5 + 3) = BYTE3(v6);
      uint64_t v7 = v6;
      if (v6)
      {
        uint64_t v8 = 0;
        uint64_t v9 = v5 + 4;
        uint64_t v10 = 16 * v7;
        do
        {
          *(_DWORD *)uint64_t v9 = *(_DWORD *)&v4[v8];
          *(void *)(v9 + 4) = *(void *)&v4[v8 + 8];
          v9 += 12;
          v8 += 16;
        }
        while (v10 != v8);
LABEL_9:
        unint64_t v12 = v4;
        operator delete(v4);
        return;
      }
    }
    if (!v4) {
      return;
    }
    goto LABEL_9;
  }
}

void MTLGenerateReflectionDataPass::patchTraceBufferReflectionData(MTLGenerateReflectionDataPass *this, llvm::Module *a2, char *a3, uint64_t a4)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  parseFunctions(a2, &v25);
  if (v26 == v25) {
    goto LABEL_34;
  }
  if (a4 == -1) {
    goto LABEL_34;
  }
  if (!a3) {
    goto LABEL_34;
  }
  uint64_t v4 = *(void *)(v25 + 8);
  if (!v4) {
    goto LABEL_34;
  }
  uint64_t v24 = *(unsigned int *)(v4 + 8);
  if (!v24) {
    goto LABEL_34;
  }
  for (uint64_t i = 0; i != v24; ++i)
  {
    uint64_t v6 = *(void *)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8 * i);
    unsigned int v7 = *(_DWORD *)(v6 + 8);
    if (!v7) {
      continue;
    }
    unsigned int v8 = 0;
    int v9 = -1;
    while (1)
    {
      uint64_t v10 = *(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * v8);
      if (!*(unsigned char *)v10)
      {
        uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * v8));
        if (v12 == 18)
        {
          BOOL v13 = *(void *)String == 0x61636F6C2E726961 && *(void *)(String + 8) == 0x646E695F6E6F6974;
          if (v13 && *(_WORD *)(String + 16) == 30821)
          {
            uint64_t v20 = *(void *)(*(void *)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * (v8 + 1)) + 128);
            uint64_t v21 = (void *)(v20 + 24);
            if (*(_DWORD *)(v20 + 32) >= 0x41u) {
              uint64_t v21 = (void *)*v21;
            }
            int v9 = *(_DWORD *)v21;
            v8 += 2;
            goto LABEL_10;
          }
        }
        uint64_t v15 = llvm::MDString::getString(v10);
        if (v16 == 12 && *(void *)v15 == 0x5F6772612E726961 && *(_DWORD *)(v15 + 8) == 1701667182)
        {
          int v18 = (const void *)llvm::MDString::getString(*(llvm::MDString **)(v6
                                                                           - 8 * *(unsigned int *)(v6 + 8)
                                                                           + 8 * (v8 + 1)));
          if (v19 == 37 && !memcmp(v18, "__resource_tracking_impl_trace_buffer", 0x25uLL)) {
            break;
          }
        }
      }
LABEL_10:
      if (++v8 >= v7) {
        goto LABEL_33;
      }
    }
    if (v9 != -1)
    {
      *(_DWORD *)&a3[a4] = v9;
      break;
    }
LABEL_33:
    ;
  }
LABEL_34:
  int v28 = (void **)&v25;
  std::vector<FunctionDesc>::__destroy_vector::operator()[abi:ne180100](&v28);
}

void sub_25570CF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  std::vector<FunctionDesc>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void std::vector<FunctionDesc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<FunctionDesc>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<FunctionDesc>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 96);
  if (v3)
  {
    *(void *)(a2 + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)(a2 + 72);
  std::vector<FunctionConstantDesc>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void parseFunctions(llvm::Module *a1, uint64_t *a2)
{
  std::vector<FunctionDesc>::reserve(a2, 8uLL);
  uint64_t v4 = 0;
  int v5 = -1;
  while (1)
  {
    uint64_t v6 = entryPointsMetadata[v4];
    LOWORD(Name) = 257;
    if (*v6)
    {
      size_t v91 = v6;
      char v7 = 3;
    }
    else
    {
      char v7 = 1;
    }
    LOBYTE(Name) = v7;
    NamedMetaint data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a1, (const llvm::Twine *)&v91);
    if (!NamedMetadata || !llvm::NamedMDNode::getNumOperands(NamedMetadata)) {
      goto LABEL_9;
    }
    if ((unint64_t)(entryPointsType[v4] - 5) > 1) {
      break;
    }
    int v5 = v4;
LABEL_9:
    if (++v4 == 7) {
      goto LABEL_12;
    }
  }
  int v5 = v4;
LABEL_12:
  int v9 = entryPointsMetadata[v5];
  LOWORD(Name) = 257;
  if (*v9)
  {
    size_t v91 = v9;
    char v10 = 3;
  }
  else
  {
    char v10 = 1;
  }
  LOBYTE(Name) = v10;
  uint64_t v11 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a1, (const llvm::Twine *)&v91);
  uint64_t Operand = llvm::NamedMDNode::getOperand(v11);
  uint64_t v13 = 0;
  int v14 = *(llvm::Value **)(*(void *)(Operand - 8 * *(unsigned int *)(Operand + 8)) + 128);
  uint64_t Name = 0;
  uint64_t v95 = 0;
  long long v99 = 0u;
  *(_OWORD *)__p = 0u;
  long long v101 = 0u;
  size_t v91 = v14;
  uint64_t v15 = *(unsigned int *)(Operand + 8);
  uint64_t v16 = Operand - 8 * v15;
  int8x16_t v92 = vextq_s8(*(int8x16_t *)(v16 + 8), *(int8x16_t *)(v16 + 8), 8uLL);
  if (v15 >= 4) {
    uint64_t v13 = *(void *)(v16 + 24);
  }
  uint64_t v93 = v13;
  uint64_t Name = llvm::Value::getName(v14);
  uint64_t v95 = v17;
  int v96 = v5;
  uint64_t Subprogram = llvm::Function::getSubprogram(v14);
  if (Subprogram) {
    int v19 = *(_DWORD *)(Subprogram + 24);
  }
  else {
    int v19 = 0;
  }
  int v97 = v19;
  BYTE1(v98) = -4;
  if (entryPointsType[v96] == 6)
  {
    uint64_t v20 = *(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8) + 24);
    uint64_t String = llvm::MDString::getString(v20);
    if (v22 == 12
      && (*(void *)String == 0x616972742E726961 ? (BOOL v23 = *(_DWORD *)(String + 8) == 1701603182) : (BOOL v23 = 0), v23))
    {
      unsigned int v30 = v98 & 0xFFFCFFFF | 0x10000;
    }
    else
    {
      uint64_t v24 = (void *)llvm::MDString::getString(v20);
      if (v25 == 16 && (*v24 == 0x6E756F622E726961 ? (BOOL v26 = v24[1] == 0x786F625F676E6964) : (BOOL v26 = 0), v26))
      {
        unsigned int v30 = v98 & 0xFFFCFFFF | 0x20000;
      }
      else
      {
        uint64_t v27 = llvm::MDString::getString(v20);
        if (v28 != 9) {
          goto LABEL_41;
        }
        if (*(void *)v27 != 0x767275632E726961 || *(unsigned char *)(v27 + 8) != 101) {
          goto LABEL_41;
        }
        unsigned int v30 = v98 | 0x30000;
      }
    }
    unsigned int v98 = v30;
LABEL_41:
    unint64_t v31 = *(unsigned int *)(Operand + 8);
    if (v31 >= 5)
    {
      for (unint64_t i = 4; i < v31; ++i)
      {
        unsigned int v33 = *(llvm::MDString **)(Operand - 8 * v31 + 8 * i);
        if (!*(unsigned char *)v33)
        {
          uint64_t v34 = llvm::MDString::getString(*(llvm::MDString **)(Operand - 8 * v31 + 8 * i));
          if (v35 == 17
            && (*(void *)v34 == 0x616972742E726961
              ? (BOOL v36 = *(void *)(v34 + 8) == 0x7461645F656C676ELL)
              : (BOOL v36 = 0),
                v36 ? (BOOL v37 = *(unsigned char *)(v34 + 16) == 97) : (BOOL v37 = 0),
                v37))
          {
            uint64_t v65 = 2;
          }
          else
          {
            uint64_t v38 = (void *)llvm::MDString::getString(v33);
            if (v39 == 14
              && (*v38 == 0x74736E692E726961
                ? (BOOL v40 = *(void *)((char *)v38 + 6) == 0x676E69636E617473)
                : (BOOL v40 = 0),
                  v40))
            {
              uint64_t v65 = 1;
            }
            else
            {
              uint64_t v41 = llvm::MDString::getString(v33);
              if (v42 == 20
                && (*(void *)v41 == 0x6C726F772E726961
                  ? (BOOL v43 = *(void *)(v41 + 8) == 0x5F65636170735F64)
                  : (BOOL v43 = 0),
                    v43 ? (BOOL v44 = *(_DWORD *)(v41 + 16) == 1635017060) : (BOOL v44 = 0),
                    v44))
              {
                uint64_t v65 = 3;
              }
              else
              {
                uint64_t v45 = (void *)llvm::MDString::getString(v33);
                if (v46 == 19
                  && (*v45 == 0x74736E692E726961 ? (BOOL v47 = v45[1] == 0x746F6D5F65636E61) : (BOOL v47 = 0),
                      v47 ? (BOOL v48 = *(void *)((char *)v45 + 11) == 0x6E6F69746F6D5F65) : (BOOL v48 = 0),
                      v48))
                {
                  uint64_t v65 = 4;
                }
                else
                {
                  uint64_t v49 = llvm::MDString::getString(v33);
                  if (v50 == 20
                    && (*(void *)v49 == 0x6D6972702E726961
                      ? (BOOL v51 = *(void *)(v49 + 8) == 0x6F6D5F6576697469)
                      : (BOOL v51 = 0),
                        v51 ? (BOOL v52 = *(_DWORD *)(v49 + 16) == 1852795252) : (BOOL v52 = 0),
                        v52))
                  {
                    uint64_t v65 = 5;
                  }
                  else
                  {
                    unint64_t v53 = (void *)llvm::MDString::getString(v33);
                    if (v54 == 19
                      && (*v53 == 0x657478652E726961 ? (BOOL v55 = v53[1] == 0x6D696C5F6465646ELL) : (BOOL v55 = 0),
                          v55 ? (BOOL v56 = *(void *)((char *)v53 + 11) == 0x7374696D696C5F64) : (BOOL v56 = 0),
                          v56))
                    {
                      uint64_t v65 = 6;
                    }
                    else
                    {
                      uint64_t v57 = (void *)llvm::MDString::getString(v33);
                      if (v58 == 14
                        && (*v57 == 0x767275632E726961
                          ? (BOOL v59 = *(void *)((char *)v57 + 6) == 0x617461645F657672)
                          : (BOOL v59 = 0),
                            v59))
                      {
                        uint64_t v65 = 7;
                      }
                      else
                      {
                        uint64_t v60 = llvm::MDString::getString(v33);
                        if (v61 == 26
                          && (*(void *)v60 == 0x746C756D2E726961
                            ? (BOOL v62 = *(void *)(v60 + 8) == 0x5F6C6576656C5F69)
                            : (BOOL v62 = 0),
                              v62 ? (BOOL v63 = *(void *)(v60 + 16) == 0x69636E6174736E69) : (BOOL v63 = 0),
                              v63 ? (BOOL v64 = *(unsigned __int16 *)(v60 + 24) == 26478) : (BOOL v64 = 0),
                              v64))
                        {
                          uint64_t v102 = 1;
                          std::vector<MTLTagType>::push_back[abi:ne180100]((uint64_t)&__p[1], &v102);
                          uint64_t v65 = 8;
                        }
                        else
                        {
                          uint64_t v65 = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          int v66 = (char *)v101;
          if ((unint64_t)v101 >= *((void *)&v101 + 1))
          {
            uint64_t v68 = (char *)__p[1];
            uint64_t v69 = (uint64_t)(v101 - (unint64_t)__p[1]) >> 3;
            unint64_t v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 61) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            int64_t v71 = *((void *)&v101 + 1) - (unint64_t)__p[1];
            if ((uint64_t)(*((void *)&v101 + 1) - (unint64_t)__p[1]) >> 2 > v70) {
              unint64_t v70 = v71 >> 2;
            }
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v72 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v72 = v70;
            }
            if (v72)
            {
              int v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v101 + 8, v72);
              uint64_t v68 = (char *)__p[1];
              int v66 = (char *)v101;
            }
            else
            {
              int v73 = 0;
            }
            __int16 v74 = (uint64_t *)&v73[8 * v69];
            *__int16 v74 = v65;
            uint64_t v67 = v74 + 1;
            while (v66 != v68)
            {
              uint64_t v75 = *((void *)v66 - 1);
              v66 -= 8;
              *--__int16 v74 = v75;
            }
            __p[1] = v74;
            *(void *)&long long v101 = v67;
            *((void *)&v101 + 1) = &v73[8 * v72];
            if (v68) {
              operator delete(v68);
            }
          }
          else
          {
            *(void *)long long v101 = v65;
            uint64_t v67 = v66 + 8;
          }
          *(void *)&long long v101 = v67;
          unint64_t v31 = *(unsigned int *)(Operand + 8);
        }
      }
    }
  }
  if (entryPointsType[v96] == 1)
  {
    uint64_t v76 = *(unsigned int *)(Operand + 8);
    if (v76 >= 4)
    {
      uint64_t v77 = *(void *)(Operand - 8 * v76 + 24);
      uint64_t v78 = *(unsigned int *)(v77 + 8);
      if (v78 >= 2)
      {
        uint64_t v79 = llvm::MDString::getString(*(llvm::MDString **)(v77 - 8 * v78));
        if (v80 == 9 && *(void *)v79 == 0x637461702E726961 && *(unsigned char *)(v79 + 8) == 104)
        {
          unint64_t v82 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v77 - 8 * *(unsigned int *)(v77 + 8) + 8));
          if (v83 == 8 && *v82 == 0x656C676E61697274) {
            int v84 = 256;
          }
          else {
            int v84 = 512;
          }
          unsigned int v85 = v98 & 0xFFFFFCFF | v84;
          unsigned int v98 = v85;
          uint64_t v86 = *(unsigned int *)(v77 + 8);
          if (v86 >= 4)
          {
            uint64_t v87 = *(void *)(*(void *)(v77 - 8 * v86 + 24) + 128);
            uint64_t v88 = (void *)(v87 + 24);
            if (*(_DWORD *)(v87 + 32) >= 0x41u) {
              uint64_t v88 = (void *)*v88;
            }
            unsigned int v98 = v85 & 0xFFFF03FF | ((*(_DWORD *)v88 & 0x3F) << 10);
          }
        }
      }
    }
  }
  unint64_t v89 = a2[1];
  if (v89 >= a2[2])
  {
    uint64_t v90 = std::vector<FunctionDesc>::__push_back_slow_path<FunctionDesc const&>(a2, (uint64_t)&v91);
  }
  else
  {
    std::allocator<FunctionDesc>::construct[abi:ne180100]<FunctionDesc,FunctionDesc const&>((uint64_t)(a2 + 2), a2[1], (uint64_t)&v91);
    uint64_t v90 = v89 + 120;
    a2[1] = v89 + 120;
  }
  a2[1] = v90;
  if (__p[1])
  {
    *(void **)&long long v101 = __p[1];
    operator delete(__p[1]);
  }
  uint64_t v102 = (uint64_t)&v99;
  std::vector<FunctionConstantDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
}

void sub_25570D7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  FunctionDesc::~FunctionDesc((FunctionDesc *)va);
  _Unwind_Resume(a1);
}

void std::vector<FunctionConstantDesc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<FunctionConstantDesc>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::allocator<FunctionDesc>::construct[abi:ne180100]<FunctionDesc,FunctionDesc const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  long long v5 = *(_OWORD *)(a3 + 16);
  long long v6 = *(_OWORD *)(a3 + 32);
  long long v7 = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  std::vector<FunctionConstantDesc>::__init_with_size[abi:ne180100]<FunctionConstantDesc*,FunctionConstantDesc*>((std::string *)(a2 + 72), *(long long **)(a3 + 72), *(long long **)(a3 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 80) - *(void *)(a3 + 72)) >> 3));
  v4[12] = 0;
  v4[13] = 0;
  v4 += 12;
  v4[2] = 0;
  return std::vector<MTLTagType>::__init_with_size[abi:ne180100]<MTLTagType*,MTLTagType*>(v4, *(const void **)(a3 + 96), *(void *)(a3 + 104), (uint64_t)(*(void *)(a3 + 104) - *(void *)(a3 + 96)) >> 3);
}

void sub_25570D914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<FunctionConstantDesc>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<FunctionConstantDesc>::__init_with_size[abi:ne180100]<FunctionConstantDesc*,FunctionConstantDesc*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<FunctionConstantDesc>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<FunctionConstantDesc>,FunctionConstantDesc*,FunctionConstantDesc*,FunctionConstantDesc*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_25570D994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<FunctionConstantDesc>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<FunctionDesc>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<FunctionDesc>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _DWORD v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 120 * v6;
    std::vector<FunctionDesc>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<FunctionDesc>::~__split_buffer(v7);
  }
  return result;
}

void sub_25570DA54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<FunctionDesc>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<FunctionDesc>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FunctionDesc>,std::reverse_iterator<FunctionDesc*>,std::reverse_iterator<FunctionDesc*>,std::reverse_iterator<FunctionDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::vector<MTLTagType>::__init_with_size[abi:ne180100]<MTLTagType*,MTLTagType*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<llvm::Type *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_25570DB40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<FunctionDesc>,std::reverse_iterator<FunctionDesc*>,std::reverse_iterator<FunctionDesc*>,std::reverse_iterator<FunctionDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 120) = *(_OWORD *)(a3 - 120);
      long long v8 = *(_OWORD *)(a3 - 104);
      long long v9 = *(_OWORD *)(a3 - 88);
      uint64_t v10 = *(void *)(a3 - 56);
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      *(_OWORD *)(v7 - 88) = v9;
      *(_OWORD *)(v7 - 104) = v8;
      *(void *)(v7 - 56) = v10;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v16 + 1) - 120;
      *((void *)&v16 + 1) -= 120;
      a3 -= 120;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FunctionDesc>,std::reverse_iterator<FunctionDesc*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<FunctionDesc>,std::reverse_iterator<FunctionDesc*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<FunctionDesc>,std::reverse_iterator<FunctionDesc*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FunctionDesc>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(120 * a2);
}

void **std::__split_buffer<FunctionDesc>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<FunctionDesc>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 120;
    std::allocator<FunctionDesc>::destroy[abi:ne180100](v4, i - 120);
  }
}

uint64_t MTLFrameworkPass::addBuiltInParameter(llvm::Type *a1, unint64_t a2, char **a3, void **a4, uint64_t a5, int a6, int a7)
{
  int v7 = a7;
  int v8 = a6;
  uint64_t v12 = (char *)a2;
  uint64_t v13 = a1;
  char v14 = *a3;
  long long v15 = a3[1];
  if (v15 == *a3)
  {
    uint64_t v18 = 0;
    uint64_t v20 = a3[1];
  }
  else
  {
    uint64_t v18 = 0;
    unsigned int v19 = 1;
    do
    {
      if (*(void *)&v14[8 * v18] == a5)
      {
        uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(*((void *)*a4 + v18)
                                                              - 8 * *(unsigned int *)(*((void *)*a4 + v18) + 8)
                                                              + 8));
        unint64_t v23 = a2;
        if (v12)
        {
          uint64_t v24 = (const void *)String;
          size_t v25 = strlen(v12);
          if (v23 == v25 && (!v25 || !memcmp(v24, v12, v25))) {
            return v18;
          }
        }
        else if (!a2)
        {
          return v18;
        }
      }
      uint64_t v18 = v19;
      char v14 = *a3;
      uint64_t v20 = a3[1];
    }
    while ((v20 - *a3) >> 3 > (unint64_t)v19++);
    uint64_t v18 = (v20 - *a3) >> 3;
    long long v15 = *a3;
    int v7 = a7;
    int v8 = a6;
    uint64_t v13 = a1;
  }
  unint64_t v26 = (unint64_t)a3[2];
  if ((unint64_t)v20 >= v26)
  {
    if ((unint64_t)(v18 + 1) >> 61) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v28 = v26 - (void)v15;
    uint64_t v29 = v28 >> 2;
    if (v28 >> 2 <= (unint64_t)(v18 + 1)) {
      uint64_t v29 = v18 + 1;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
      a2 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      a2 = v29;
    }
    if (a2) {
      unsigned int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a3 + 2), a2);
    }
    else {
      unsigned int v30 = 0;
    }
    unint64_t v31 = &v30[8 * v18];
    unsigned int v32 = &v30[8 * a2];
    *(void *)unint64_t v31 = a5;
    uint64_t v27 = v31 + 8;
    uint64_t v34 = *a3;
    unsigned int v33 = a3[1];
    if (v33 != *a3)
    {
      do
      {
        uint64_t v35 = *((void *)v33 - 1);
        v33 -= 8;
        *((void *)v31 - 1) = v35;
        v31 -= 8;
      }
      while (v33 != v34);
      unsigned int v33 = *a3;
    }
    *a3 = v31;
    a3[1] = v27;
    a3[2] = v32;
    if (v33) {
      operator delete(v33);
    }
  }
  else
  {
    *(void *)uint64_t v20 = a5;
    uint64_t v27 = v20 + 8;
  }
  a3[1] = v27;
  uint64_t v95 = 0;
  llvm::Type::getInt32Ty(v13, (llvm::LLVMContext *)a2);
  llvm::ConstantInt::get();
  uint64_t v36 = llvm::ValueAsMetadata::get();
  BOOL v37 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v95, 1uLL);
  *BOOL v37 = v36;
  uint64_t v39 = v37 + 1;
  __p = v37;
  uint64_t v95 = &v37[v38];
  uint64_t v93 = v39;
  uint64_t v41 = llvm::MDString::get(v13, (llvm::LLVMContext *)v12, v40);
  uint64_t v42 = v41;
  if (v39 >= v95)
  {
    uint64_t v44 = v39 - __p;
    if ((unint64_t)(v44 + 1) >> 61) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v45 = ((char *)v95 - (char *)__p) >> 2;
    if (v45 <= v44 + 1) {
      unint64_t v45 = v44 + 1;
    }
    if ((unint64_t)((char *)v95 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v45;
    }
    if (v46) {
      BOOL v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v95, v46);
    }
    else {
      BOOL v47 = 0;
    }
    BOOL v48 = (uint64_t *)&v47[8 * v44];
    uint64_t v49 = &v47[8 * v46];
    *BOOL v48 = v42;
    BOOL v43 = v48 + 1;
    uint64_t v50 = v93;
    if (v93 != __p)
    {
      do
      {
        uint64_t v51 = *--v50;
        *--BOOL v48 = v51;
      }
      while (v50 != __p);
      uint64_t v50 = __p;
    }
    __p = v48;
    uint64_t v95 = (uint64_t *)v49;
    if (v50) {
      operator delete(v50);
    }
  }
  else
  {
    *uint64_t v39 = v41;
    BOOL v43 = v39 + 1;
  }
  if (v8)
  {
    uint64_t v52 = llvm::MDString::get();
    uint64_t v53 = v52;
    if (v43 >= v95)
    {
      uint64_t v55 = v43 - __p;
      if ((unint64_t)(v55 + 1) >> 61) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v56 = ((char *)v95 - (char *)__p) >> 2;
      if (v56 <= v55 + 1) {
        unint64_t v56 = v55 + 1;
      }
      if ((unint64_t)((char *)v95 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v56;
      }
      if (v57) {
        uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v95, v57);
      }
      else {
        uint64_t v58 = 0;
      }
      BOOL v59 = (uint64_t *)&v58[8 * v55];
      uint64_t v60 = &v58[8 * v57];
      *BOOL v59 = v53;
      uint64_t v54 = v59 + 1;
      uint64_t v61 = v43;
      if (v43 != __p)
      {
        do
        {
          uint64_t v62 = *--v61;
          *--BOOL v59 = v62;
        }
        while (v61 != __p);
        uint64_t v61 = __p;
      }
      __p = v59;
      uint64_t v95 = (uint64_t *)v60;
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      uint64_t *v43 = v52;
      uint64_t v54 = v43 + 1;
    }
    int v94 = v54;
    int ComponentType = MTLDataTypeGetComponentType(v8);
    ShaderTypeuint64_t Name = (llvm::LLVMContext *)MTLDataTypeGetShaderTypeName(ComponentType, v7);
    uint64_t v66 = llvm::MDString::get(v13, ShaderTypeName, v65);
    uint64_t v67 = v66;
    if (v94 >= v95)
    {
      uint64_t v68 = v94 - __p;
      if ((unint64_t)(v68 + 1) >> 61) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v69 = ((char *)v95 - (char *)__p) >> 2;
      if (v69 <= v68 + 1) {
        unint64_t v69 = v68 + 1;
      }
      if ((unint64_t)((char *)v95 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v70 = v69;
      }
      if (v70) {
        int64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v95, v70);
      }
      else {
        int64_t v71 = 0;
      }
      unint64_t v72 = (uint64_t *)&v71[8 * v68];
      int v73 = &v71[8 * v70];
      *unint64_t v72 = v67;
      __int16 v74 = v94;
      if (v94 != __p)
      {
        do
        {
          uint64_t v75 = *--v74;
          *--unint64_t v72 = v75;
        }
        while (v74 != __p);
        __int16 v74 = __p;
      }
      __p = v72;
      uint64_t v95 = (uint64_t *)v73;
      if (v74) {
        operator delete(v74);
      }
    }
    else
    {
      *int v94 = v66;
    }
  }
  uint64_t Impl = llvm::MDTuple::getImpl();
  unint64_t v77 = (unint64_t)a4[2];
  uint64_t v78 = (uint64_t *)a4[1];
  if ((unint64_t)v78 >= v77)
  {
    uint64_t v80 = ((char *)v78 - (unsigned char *)*a4) >> 3;
    if ((unint64_t)(v80 + 1) >> 61) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v81 = v77 - (void)*a4;
    uint64_t v82 = v81 >> 2;
    if (v81 >> 2 <= (unint64_t)(v80 + 1)) {
      uint64_t v82 = v80 + 1;
    }
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v83 = v82;
    }
    if (v83) {
      int v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a4 + 2), v83);
    }
    else {
      int v84 = 0;
    }
    unsigned int v85 = (uint64_t *)&v84[8 * v80];
    uint64_t v86 = &v84[8 * v83];
    uint64_t *v85 = Impl;
    uint64_t v79 = v85 + 1;
    uint64_t v88 = (char *)*a4;
    uint64_t v87 = (char *)a4[1];
    if (v87 != *a4)
    {
      do
      {
        uint64_t v89 = *((void *)v87 - 1);
        v87 -= 8;
        *--unsigned int v85 = v89;
      }
      while (v87 != v88);
      uint64_t v87 = (char *)*a4;
    }
    *a4 = v85;
    a4[1] = v79;
    a4[2] = v86;
    if (v87) {
      operator delete(v87);
    }
  }
  else
  {
    *uint64_t v78 = Impl;
    uint64_t v79 = v78 + 1;
  }
  a4[1] = v79;
  if (__p) {
    operator delete(__p);
  }
  return v18;
}

void sub_25570E334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<llvm::Value *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_25570E3C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<llvm::Metadata *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_25570E438(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<llvm::Metadata *>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v3, a2);
    int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    long long v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

char *std::vector<llvm::Type *>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t llvm::MDString::get(llvm::MDString *this, llvm::LLVMContext *__s, const char *a3)
{
  if (__s) {
    strlen((const char *)__s);
  }
  return llvm::MDString::get();
}

uint64_t llvm::IRBuilderBase::CreateGEP(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t **, uint64_t, void))(**(void **)(a1 + 72)
                                                                                              + 48))(*(void *)(a1 + 72), a2, a3, a4, a5, 0);
  if (!result)
  {
    uint64_t v13 = llvm::GetElementPtrInst::Create(a2, a3, a4, a5);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v13, a6);
  }
  return result;
}

uint64_t llvm::GetElementPtrInst::Create(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v8 = llvm::User::operator new((llvm::User *)0x50);
  llvm::GetElementPtrInst::getGEPReturnType(a1, a2, a3, a4);
  llvm::Instruction::Instruction();
  *(void *)(v8 + 64) = a1;
  *(void *)(v8 + 72) = llvm::GetElementPtrInst::getIndexedType();
  llvm::GetElementPtrInst::init();
  return v8;
}

void sub_25570E740(_Unwind_Exception *a1)
{
  llvm::Instruction::~Instruction(v1);
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::GetElementPtrInst::getGEPReturnType(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  unsigned int v8 = *(_DWORD *)(*a2 + 8);
  if ((v8 & 0xFE) == 0x12)
  {
    uint64_t v7 = **(void **)(v7 + 16);
    unsigned int v8 = *(_DWORD *)(v7 + 8);
  }
  long long v9 = (llvm::LLVMContext *)(v8 >> 8);
  llvm::GetElementPtrInst::getIndexedType();
  if (*(void *)(v7 + 24)) {
    uint64_t result = llvm::PointerType::get();
  }
  else {
    uint64_t result = llvm::PointerType::get(*(llvm::PointerType **)v7, v9);
  }
  if (!*a2 || (*(_DWORD *)(*a2 + 8) & 0xFE) != 0x12)
  {
    if (!a4) {
      return result;
    }
    uint64_t v11 = 8 * a4;
    while (1)
    {
      uint64_t v12 = **a3;
      if (v12 && (*(_DWORD *)(v12 + 8) & 0xFE) == 18) {
        break;
      }
      ++a3;
      v11 -= 8;
      if (!v11) {
        return result;
      }
    }
  }
  return llvm::VectorType::get();
}

uint64_t fetchAttributeGEPIndexList@<X0>(uint64_t a1@<X0>, llvm::LLVMContext *a2@<X1>, llvm::Value **a3@<X8>)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(llvm::Type **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(llvm::IRBuilderBase **)(a1 + 16);
  uint64_t v7 = *(uint64_t **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  long long v9 = *(llvm::Value **)(a1 + 72);
  uint64_t v54 = *(void *)(a1 + 88);
  uint64_t v55 = *(void *)(a1 + 80);
  unsigned int v10 = *(_DWORD *)(*(void *)(a1 + 40) + 4);
  int v11 = **(_DWORD **)(a1 + 40) >> 5;
  llvm::Type::getInt32Ty(*(llvm::Type **)a1, a2);
  uint64_t Int64Ty = llvm::Type::getInt64Ty(v4, v12);
  switch(v11)
  {
    case 0:
      uint64_t Add = llvm::ConstantInt::get();
      goto LABEL_24;
    case 1:
      uint64_t v36 = *v7;
      goto LABEL_26;
    case 2:
      long long v9 = *(llvm::Value **)(v8 + 8 * v7[1]);
      if (v10 < 2) {
        goto LABEL_27;
      }
      BOOL v37 = *(llvm::Value **)(v8 + 8 * v7[2]);
      uint64_t v38 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v61 = 257;
      Sub = llvm::IRBuilderBase::CreateSub(v6, v9, v37, (const llvm::Twine *)v60, 0, 0);
      __int16 v64 = 257;
      UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v6, Sub, v38, (const llvm::Twine *)&Int32Ty, 0);
      __int16 v59 = 257;
      uint64_t Add = (uint64_t)llvm::IRBuilderBase::CreateAdd(v6, UDiv, v37, (const llvm::Twine *)v58, 0, 0);
      goto LABEL_24;
    case 3:
      uint64_t v36 = v7[3];
LABEL_26:
      long long v9 = *(llvm::Value **)(v8 + 8 * v36);
      goto LABEL_27;
    case 4:
      goto LABEL_27;
    case 5:
    case 6:
    case 7:
    case 8:
      uint64_t v52 = Int64Ty;
      uint64_t v53 = v5;
      Element = *(llvm::Value **)(v8 + 8 * v7[5]);
      unint64_t v56 = *(llvm::Value **)(v8 + 8 * v7[6]);
      long long v16 = *(llvm::Value **)(v8 + 8 * v7[7]);
      if ((*(_DWORD *)(*(void *)Element + 8) & 0xFE) == 0x12)
      {
        llvm::Type::getInt32Ty(v4, v14);
        uint64_t v17 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v61 = 257;
        Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v6, Element, v17, (const llvm::Twine *)v60, v18);
      }
      if ((*(_DWORD *)(*(void *)v56 + 8) & 0xFE) == 0x12)
      {
        llvm::Type::getInt32Ty(v4, v14);
        unsigned int v19 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v61 = 257;
        unint64_t v56 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v6, v56, v19, (const llvm::Twine *)v60, v20);
      }
      if ((*(_DWORD *)(*(void *)v16 + 8) & 0xFE) == 0x12)
      {
        llvm::Type::getInt32Ty(v4, v14);
        uint64_t v21 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v61 = 257;
        long long v16 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v6, v16, v21, (const llvm::Twine *)v60, v22);
      }
      if (v10 >= 2)
      {
        unint64_t v23 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v61 = 257;
        Element = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v6, Element, v23, (const llvm::Twine *)v60, 0);
      }
      uint64_t Function = llvm::Module::getFunction();
      if (!Function)
      {
        Int32Ty = (uint64_t *)llvm::Type::getInt32Ty(v4, v24);
        BOOL v63 = Int32Ty;
        uint64_t v26 = llvm::FunctionType::get();
        v60[0] = "air.min.u.i32";
        __int16 v61 = 259;
        uint64_t Function = llvm::Function::Create(v26, 0, (uint64_t)v60, v53);
      }
      uint64_t v27 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v61 = 257;
      uint64_t v28 = llvm::IRBuilderBase::CreateSub(v6, v16, v27, (const llvm::Twine *)v60, 0, 0);
      Int32Ty = (uint64_t *)Element;
      BOOL v63 = (uint64_t *)v28;
      if (Function) {
        uint64_t v29 = *(void *)(Function + 24);
      }
      else {
        uint64_t v29 = 0;
      }
      __int16 v61 = 257;
      AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v6, v29, Function, (uint64_t)&Int32Ty, 2, (uint64_t)v60, 0);
      if ((v11 - 7) <= 1)
      {
        unint64_t v31 = *(uint64_t **)(v8 + 8 * v55);
        __int16 v61 = 257;
        Int32Ty = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v6, 39, (uint64_t)AlignedLoad, v52, (uint64_t)v60);
        __int16 v61 = 257;
        uint64_t v32 = llvm::IRBuilderBase::CreateGEP((uint64_t)v6, v54, v31, &Int32Ty, 1, (uint64_t)v60);
        unsigned int v33 = *(llvm::Type **)(v32 + 72);
        __int16 v61 = 257;
        AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v6, v33, v32, 0, 0, (uint64_t)v60);
      }
      uint64_t v34 = *(void *)v56;
      if (*(void *)AlignedLoad != *(void *)v56)
      {
        __int16 v61 = 257;
        AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v6, 39, (uint64_t)AlignedLoad, v34, (uint64_t)v60);
      }
      __int16 v61 = 257;
      uint64_t Add = (uint64_t)llvm::IRBuilderBase::CreateAdd(v6, AlignedLoad, v56, (const llvm::Twine *)v60, 0, 0);
LABEL_24:
      long long v9 = (llvm::Value *)Add;
LABEL_27:
      uint64_t v41 = *(void *)(a1 + 16);
      uint64_t v42 = llvm::Type::getInt64Ty(*(llvm::Type **)a1, v14);
      __int16 v61 = 257;
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v41, 39, (uint64_t)v9, v42, (uint64_t)v60);
      a3[2] = 0;
      a3[1] = 0;
      *a3 = Cast;
      llvm::Type::getInt32Ty(*(llvm::Type **)a1, v44);
      a3[1] = (llvm::Value *)llvm::ConstantInt::get();
      llvm::Type::getInt64Ty(*(llvm::Type **)a1, v45);
      uint64_t result = llvm::ConstantInt::get();
      a3[2] = (llvm::Value *)result;
      if (*(void *)(*(void *)(a1 + 40) + 8) == -1)
      {
        BOOL v47 = *(llvm::Value **)(*(void *)(a1 + 56) + 8 * *(void *)(a1 + 96));
        if (v47)
        {
          BOOL v48 = *(llvm::IRBuilderBase **)(a1 + 16);
          __int16 v61 = 257;
          uint64_t result = (uint64_t)llvm::IRBuilderBase::CreateMul(v48, v47, Cast, (const llvm::Twine *)v60, 0, 0);
          uint64_t v49 = (llvm::Value *)result;
          if (!*(unsigned char *)(a1 + 104))
          {
            uint64_t v50 = *(llvm::IRBuilderBase **)(a1 + 16);
            __int16 v61 = 257;
            uint64_t v51 = (llvm::Value *)llvm::ConstantInt::get();
            uint64_t result = llvm::IRBuilderBase::CreateLShr(v50, v49, v51, (const llvm::Twine *)v60, 0);
            uint64_t v49 = (llvm::Value *)result;
          }
          *a3 = v49;
        }
      }
      return result;
    default:
      abort();
  }
}

uint64_t llvm::IRBuilderBase::CreateCast(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)a3 == a4) {
    return a3;
  }
  if (*(unsigned __int8 *)(a3 + 16) > 0x14u)
  {
    uint64_t v9 = llvm::CastInst::Create();
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v9, a5);
  }
  a3 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 224))(*(void *)(a1 + 72));
  if (a3) {
    BOOL v7 = *(unsigned __int8 *)(a3 + 16) >= 0x1Cu;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    return a3;
  }
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, a3, a5);
}

uint64_t llvm::IRBuilderBase::Insert<llvm::CastInst>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  uint64_t v5 = *((unsigned int *)a1 + 2);
  if (v5)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v6 + 16 * v5;
    do
    {
      llvm::Instruction::setMetadata();
      v6 += 16;
    }
    while (v6 != v7);
  }
  return a2;
}

uint64_t MTLCompilerObject::initDriverPlugin(MTLCompilerObject *this, const char *__s2, const void *a3, size_t a4)
{
  uint64_t v7 = *((void *)this + 8);
  uint64_t v8 = *((void *)this + 9) - v7;
  if (!v8) {
LABEL_14:
  }
    operator new();
  uint64_t v9 = 0;
  unint64_t v10 = v8 >> 3;
  if (v10 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v10;
  }
  while (1)
  {
    uint64_t v12 = *(void *)(v7 + 8 * v9);
    if (strcmp(*(const char **)(v12 + 88), __s2)) {
      goto LABEL_6;
    }
    if (a3) {
      break;
    }
    if (!*(void *)(v12 + 96)) {
      return v9;
    }
LABEL_6:
    if (v11 == ++v9) {
      goto LABEL_14;
    }
  }
  if (*(void *)(v12 + 104) != a4 || memcmp(a3, *(const void **)(v12 + 96), a4)) {
    goto LABEL_6;
  }
  return v9;
}

void sub_25570F194(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10B0C402BB109C8);
  _Unwind_Resume(a1);
}

uint64_t MTLCodeGenServiceBuildRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    {
      MTLCodeGenServiceBuildRequest::guardSize = getpagesize();
    }
    uint64_t v7 = mmap(0, MTLCodeGenServiceBuildRequest::guardSize + 0x800000, 3, 4098, 503316480, 0);
    if (v7 == (void *)-1)
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, void, const char *))(a6 + 16);
      uint64_t v9 = "Cannot allocate stack";
    }
    else
    {
      if (!mprotect(v7, MTLCodeGenServiceBuildRequest::guardSize, 0)) {
        split_stack_call();
      }
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, void, const char *))(a6 + 16);
      uint64_t v9 = "Cannot set guard page protection";
    }
    uint64_t v10 = a6;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void, void, const char *))(a6 + 16);
    uint64_t v9 = "Compilation failed: compiler service missing";
    uint64_t v10 = a6;
    uint64_t v11 = 2;
  }
  return v8(v10, v11, 0, 0, v9);
}

void split_stack_call()
{
}

void sub_25570F48C(_Unwind_Exception *a1)
{
}

uint64_t split_stack_call_impl(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  return a3(a4);
}

uint64_t MTLCompilerObject::buildRequest(uint64_t a1, unsigned int a2, void *a3, unsigned int *a4, unint64_t a5, uint64_t a6)
{
  int v8 = (int)a3;
  uint64_t v266 = *MEMORY[0x263EF8340];
  llvm::install_fatal_error_handler((llvm *)fatalErrorHandler, 0, a3);
  free(*(void **)(a1 + 120));
  *(void *)(a1 + 120) = 0;
  v223 = (char **)(a1 + 120);
  *(_WORD *)(a1 + 128) = 0;
  uint64_t v12 = "MTLSpecializeFunction request type is deprecated, use MTLSpecializeFunctionToArchive";
  uint64_t v224 = a1;
  switch(v8)
  {
    case 0:
      *(_DWORD *)v262 = 0;
      MTLBuildRequestTypeToString(v262, buf);
      MTLCompilerObject::buildRequest(a1, (uint64_t)buf);
      abort();
    case 1:
      if ((*a4 & 0x30000000) != 0x10000000) {
        goto LABEL_20;
      }
      if (MTLCompilerObject::buildRequest(unsigned int,unsigned int,void const*,unsigned long,void({block_pointer})(unsigned int,void const*,unsigned long,char const*))::requestCount > 0) {
        goto LABEL_403;
      }
      ++MTLCompilerObject::buildRequest(unsigned int,unsigned int,void const*,unsigned long,void({block_pointer})(unsigned int,void const*,unsigned long,char const*))::requestCount;
LABEL_20:
      if (a2 >= (unint64_t)((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3)) {
LABEL_403:
      }
        abort();
      long long v260 = 0u;
      *(void *)buf = a4;
      *(void *)&buf[8] = a5;
      *(void *)&buf[16] = a2;
      *(void *)&buf[24] = a6;
      *(void *)&long long v259 = a4;
      *((void *)&v259 + 1) = 1;
      DWORD2(v260) = 0;
      MTLCompilerObject::backendCompileExecutableRequest(a1, (uint64_t)buf);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 3:
    case 13:
      memset(v262, 0, sizeof(v262));
      LODWORD(v249) = v8;
      MTLBuildRequestTypeToString(&v249, &__p);
      if (logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken != -1) {
        dispatch_once(&logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken, &__block_literal_global_200);
      }
      uint64_t v13 = a1 + 136;
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 159) >= 0) {
          uint64_t v14 = a1 + 136;
        }
        else {
          uint64_t v14 = *(void *)(a1 + 136);
        }
        p_p = &__p;
        if (DiagnosticContext < 0) {
          p_p = __p;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = v14;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = p_p;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = "source";
        _os_log_impl(&dword_2556FA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Compilation BEGIN (ParentProcessName=%{public}s) Build request: %{public}s - %s", buf, 0x20u);
      }
      uint64_t v16 = mach_absolute_time();
      uint64_t v221 = a6;
      if (SHIBYTE(DiagnosticContext) < 0) {
        operator delete(__p);
      }
      size_t v253 = 0;
      MEMORY[0x25A28CF80](&v252);
      uint64_t v217 = v16;
      __p = &v252;
      uint64_t DiagnosticContext = llvm::LLVMContext::getDiagnosticContext((llvm::LLVMContext *)&v252);
      uint64_t v255 = llvm::LLVMContext::getDiagnosticHandlerCallBack((llvm::LLVMContext *)&v252);
      llvm::LLVMContext::setDiagnosticHandlerCallBack();
      uint64_t v17 = a4[1];
      uint64_t v18 = (uint64_t)a4 + *a4 + 19;
      v250 = 0;
      uint64_t v251 = 0;
      v249 = &v252;
      unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v20 = (unsigned char *)((v18 & 0xFFFFFFFFFFFFFFFCLL) + v17);
      if ((v18 & 0xFFFFFFFFFFFFFFFCLL) != 0) {
        size_t v21 = strlen((const char *)((v18 & 0xFFFFFFFFFFFFFFFCLL) + v17));
      }
      else {
        size_t v21 = 0;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v249, v20, &v20[v21]);
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v249, " ", "");
      unsigned int v44 = a4[3];
      if (v44)
      {
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v249, "-Os ", "");
        unsigned int v44 = a4[3];
      }
      if ((v44 & 2) != 0) {
        uint64_t v45 = mach_absolute_time();
      }
      else {
        uint64_t v45 = 0;
      }
      __s1 = 0;
      if (v8 == 13)
      {
        uint64_t v46 = v45;
        v246 = 0;
        uint64_t v247 = 0;
        v244 = 0;
        v245 = 0;
        unint64_t v47 = a4[1];
        if (v47)
        {
          v241 = 0;
          v242 = 0;
          v243 = 0;
          v238 = 0;
          v239 = 0;
          v240 = 0;
          uint64_t v237 = 0;
          llvm::SmallVectorTemplateBase<char,true>::push_back(&v249, 0);
          --v250;
          int v48 = MTLGPUCompilerCompileFromSource();
          BOOL v49 = v48 != 0;
          if (v48)
          {
            uint64_t AsObject = MTLModuleGetAsObject();
            uint64_t v116 = ((char *)v239 - (unsigned char *)v238) >> 3;
            if ((unint64_t)(v116 + 1) >> 61) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v117 = ((char *)v240 - (unsigned char *)v238) >> 2;
            if (v117 <= v116 + 1) {
              unint64_t v117 = v116 + 1;
            }
            if ((unint64_t)((char *)v240 - (unsigned char *)v238) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v118 = v117;
            }
            if (v118) {
              uint64_t v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v240, v118);
            }
            else {
              uint64_t v119 = 0;
            }
            v120 = (uint64_t *)&v119[8 * v116];
            v121 = &v119[8 * v118];
            uint64_t *v120 = AsObject;
            v122 = v120 + 1;
            v124 = (char *)v238;
            v123 = (char *)v239;
            if (v239 != v238)
            {
              do
              {
                uint64_t v125 = *((void *)v123 - 1);
                v123 -= 8;
                *--v120 = v125;
              }
              while (v123 != v124);
              v123 = (char *)v238;
            }
            v238 = v120;
            v239 = v122;
            v240 = (uint64_t *)v121;
            if (v123) {
              operator delete(v123);
            }
            v239 = v122;
            if (v47 < 5)
            {
              int v166 = 1;
            }
            else
            {
              char v126 = 1;
              do
              {
                v127 = (unsigned int *)((v19 + 3) & 0xFFFFFFFFFFFFFFFCLL);
                if (v126) {
                  unint64_t v128 = 0;
                }
                else {
                  unint64_t v128 = v19 - (void)v127;
                }
                unsigned int v131 = *v127;
                v130 = v127 + 1;
                uint64_t v129 = v131;
                snprintf((char *)buf, 0x20uLL, "%s%zu", "linked-air-blob-", ((char *)v242 - (unsigned char *)v241) >> 3);
                uint64_t v132 = LLVMCreateMemoryBufferWithMemoryRange();
                uint64_t v133 = v132;
                unint64_t v134 = v242;
                if (v242 >= v243)
                {
                  uint64_t v136 = ((char *)v242 - (unsigned char *)v241) >> 3;
                  if ((unint64_t)(v136 + 1) >> 61) {
                    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v137 = ((char *)v243 - (unsigned char *)v241) >> 2;
                  if (v137 <= v136 + 1) {
                    unint64_t v137 = v136 + 1;
                  }
                  if ((unint64_t)((char *)v243 - (unsigned char *)v241) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v138 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v138 = v137;
                  }
                  if (v138) {
                    uint64_t v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v243, v138);
                  }
                  else {
                    uint64_t v139 = 0;
                  }
                  uint64_t v140 = (uint64_t *)&v139[8 * v136];
                  *uint64_t v140 = v133;
                  uint64_t v135 = v140 + 1;
                  v142 = (char *)v241;
                  uint64_t v141 = (char *)v242;
                  if (v242 != v241)
                  {
                    do
                    {
                      uint64_t v143 = *((void *)v141 - 1);
                      v141 -= 8;
                      *--uint64_t v140 = v143;
                    }
                    while (v141 != v142);
                    uint64_t v141 = (char *)v241;
                  }
                  v241 = v140;
                  v242 = v135;
                  v243 = (uint64_t *)&v139[8 * v138];
                  if (v141) {
                    operator delete(v141);
                  }
                }
                else
                {
                  uint64_t *v242 = v132;
                  uint64_t v135 = v134 + 1;
                }
                v242 = v135;
                uint64_t v236 = 0;
                uint64_t v144 = MTLObjectCreate();
                uint64_t v145 = v144;
                if (v144)
                {
                  v146 = v239;
                  if (v239 >= v240)
                  {
                    uint64_t v150 = ((char *)v239 - (unsigned char *)v238) >> 3;
                    if ((unint64_t)(v150 + 1) >> 61) {
                      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v151 = ((char *)v240 - (unsigned char *)v238) >> 2;
                    if (v151 <= v150 + 1) {
                      unint64_t v151 = v150 + 1;
                    }
                    if ((unint64_t)((char *)v240 - (unsigned char *)v238) >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v152 = v151;
                    }
                    if (v152) {
                      long long v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v240, v152);
                    }
                    else {
                      long long v153 = 0;
                    }
                    v158 = (uint64_t *)&v153[8 * v150];
                    uint64_t *v158 = v145;
                    char v147 = v158 + 1;
                    v160 = (char *)v238;
                    v159 = (char *)v239;
                    if (v239 != v238)
                    {
                      do
                      {
                        uint64_t v161 = *((void *)v159 - 1);
                        v159 -= 8;
                        *--v158 = v161;
                      }
                      while (v159 != v160);
                      v159 = (char *)v238;
                    }
                    v238 = v158;
                    v239 = v147;
                    v240 = (uint64_t *)&v153[8 * v152];
                    if (v159) {
                      operator delete(v159);
                    }
                  }
                  else
                  {
                    uint64_t *v239 = v144;
                    char v147 = v146 + 1;
                  }
                  v239 = v147;
                }
                else
                {
                  long long v148 = v245;
                  if (v245 >= v246)
                  {
                    uint64_t v154 = (v245 - (unsigned char *)v244) >> 3;
                    if ((unint64_t)(v154 + 1) >> 61) {
                      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v155 = (v246 - (unsigned char *)v244) >> 2;
                    if (v155 <= v154 + 1) {
                      unint64_t v155 = v154 + 1;
                    }
                    if ((unint64_t)(v246 - (unsigned char *)v244) >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v156 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v156 = v155;
                    }
                    if (v156) {
                      uint64_t v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v246, v156);
                    }
                    else {
                      uint64_t v157 = 0;
                    }
                    long long v162 = &v157[8 * v154];
                    *(void *)long long v162 = v236;
                    v149 = v162 + 8;
                    uint64_t v164 = (char *)v244;
                    uint64_t v163 = v245;
                    if (v245 != v244)
                    {
                      do
                      {
                        uint64_t v165 = *((void *)v163 - 1);
                        v163 -= 8;
                        *((void *)v162 - 1) = v165;
                        v162 -= 8;
                      }
                      while (v163 != v164);
                      uint64_t v163 = (char *)v244;
                    }
                    v244 = v162;
                    v245 = v149;
                    v246 = &v157[8 * v156];
                    if (v163) {
                      operator delete(v163);
                    }
                  }
                  else
                  {
                    *(void *)v245 = v236;
                    v149 = v148 + 8;
                  }
                  BOOL v49 = 0;
                  v245 = v149;
                }
                int v166 = v49;
                if (!v49) {
                  break;
                }
                char v126 = 0;
                unint64_t v47 = v47 + v128 - v129 - 4;
                unint64_t v19 = (unint64_t)v130 + v129;
              }
              while (v47 > 4);
            }
            a1 = v224;
            if (v166)
            {
              llvm::SmallVectorTemplateBase<char,true>::push_back(&v249, 0);
              --v250;
              BOOL v49 = MTLGPUCompilerLinkToBuffer() != 0;
              if (__s1) {
                std::vector<char *>::push_back[abi:ne180100](&v244, &__s1);
              }
            }
          }
          else
          {
            BOOL v49 = 0;
          }
          long long v167 = (uint64_t *)v241;
          long long v168 = v242;
          while (v167 != v168)
          {
            LLVMDisposeMemoryBuffer();
            ++v167;
          }
          if (v238)
          {
            v239 = (uint64_t *)v238;
            operator delete(v238);
          }
          if (v241)
          {
            v242 = (uint64_t *)v241;
            operator delete(v241);
          }
        }
        else
        {
          llvm::SmallVectorTemplateBase<char,true>::push_back(&v249, 0);
          --v250;
          BOOL v49 = MTLGPUCompilerBuildFromSourceToBuffer() != 0;
          uint64_t v99 = (v245 - (unsigned char *)v244) >> 3;
          if ((unint64_t)(v99 + 1) >> 61) {
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v100 = (v246 - (unsigned char *)v244) >> 2;
          if (v100 <= v99 + 1) {
            unint64_t v100 = v99 + 1;
          }
          if ((unint64_t)(v246 - (unsigned char *)v244) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v101 = v100;
          }
          if (v101) {
            uint64_t v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v246, v101);
          }
          else {
            uint64_t v102 = 0;
          }
          long long v169 = (char **)&v102[8 * v99];
          long long v170 = &v102[8 * v101];
          *long long v169 = __s1;
          uint64_t v171 = (char *)(v169 + 1);
          long long v173 = (char *)v244;
          long long v172 = v245;
          if (v245 != v244)
          {
            do
            {
              long long v174 = (char *)*((void *)v172 - 1);
              v172 -= 8;
              *--long long v169 = v174;
            }
            while (v172 != v173);
            long long v172 = (char *)v244;
          }
          v244 = v169;
          v245 = v171;
          v246 = v170;
          if (v172) {
            operator delete(v172);
          }
          v245 = v171;
        }
        if ((a4[3] & 2) != 0)
        {
          unint64_t v83 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v46));
          long long v176 = *(void **)&v262[8];
          if (*(void *)&v262[8] >= *(void *)&v262[16])
          {
            long long v178 = *(void **)v262;
            uint64_t v179 = (uint64_t)(*(void *)&v262[8] - *(void *)v262) >> 4;
            unint64_t v180 = v179 + 1;
            if ((unint64_t)(v179 + 1) >> 60) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v181 = *(void *)&v262[16] - *(void *)v262;
            if ((uint64_t)(*(void *)&v262[16] - *(void *)v262) >> 3 > v180) {
              unint64_t v180 = v181 >> 3;
            }
            if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v182 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v182 = v180;
            }
            if (v182)
            {
              v183 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v262[16], v182);
              long long v178 = *(void **)v262;
              long long v176 = *(void **)&v262[8];
            }
            else
            {
              v183 = 0;
            }
            v184 = &v183[16 * v179];
            long long v185 = &v183[16 * v182];
            *(_DWORD *)v184 = 0;
            *((void *)v184 + 1) = v83;
            long long v177 = v184 + 16;
            if (v176 != v178)
            {
              do
              {
                *((_OWORD *)v184 - 1) = *((_OWORD *)v176 - 1);
                v184 -= 16;
                v176 -= 2;
              }
              while (v176 != v178);
              long long v178 = *(void **)v262;
            }
            *(void *)v262 = v184;
            *(void *)&v262[8] = v177;
            *(void *)&v262[16] = v185;
            if (v178) {
              operator delete(v178);
            }
          }
          else
          {
            **(_DWORD **)&v262[8] = 0;
            v176[1] = v83;
            long long v177 = (char *)(v176 + 2);
          }
          *(void *)&v262[8] = v177;
          if (((unint64_t)&v177[-*(void *)v262] >> 4) == -2) {
            uint64_t v175 = 0;
          }
          else {
            uint64_t v175 = 12 * (((unint64_t)&v177[-*(void *)v262] >> 4) + 2) + 4;
          }
        }
        else
        {
          uint64_t v175 = 0;
          unint64_t v83 = 0;
        }
        int v219 = v49;
        uint64_t v113 = (uint64_t)MTLCompilerObject::serializeLibraryToArchiveReply(a1, &v253, (const char **)v244, (v245 - (unsigned char *)v244) >> 3, v219, v247, v175);
        if (v247) {
          LLVMDisposeMemoryBuffer();
        }
        v114 = v244;
        if (v244)
        {
          v245 = (char *)v244;
          goto LABEL_338;
        }
      }
      else
      {
        uint64_t v215 = v45;
        memset(buf, 0, 24);
        v241 = 0;
        llvm::SmallVectorTemplateBase<char,true>::push_back(&v249, 0);
        --v250;
        int v50 = MTLGPUCompilerBuildFromSource();
        int v219 = v50 != 0;
        if (v50)
        {
          MTLObjectGetAsMetalLib();
          createLibraryInfo();
        }
        unsigned int v81 = a4[3];
        if ((v81 & 2) != 0)
        {
          unint64_t v83 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v215));
          int v84 = *(void **)&v262[8];
          if (*(void *)&v262[8] >= *(void *)&v262[16])
          {
            uint64_t v93 = *(void **)v262;
            uint64_t v94 = (uint64_t)(*(void *)&v262[8] - *(void *)v262) >> 4;
            unint64_t v95 = v94 + 1;
            if ((unint64_t)(v94 + 1) >> 60) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v96 = *(void *)&v262[16] - *(void *)v262;
            if ((uint64_t)(*(void *)&v262[16] - *(void *)v262) >> 3 > v95) {
              unint64_t v95 = v96 >> 3;
            }
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v97 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v97 = v95;
            }
            if (v97)
            {
              unsigned int v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v262[16], v97);
              uint64_t v93 = *(void **)v262;
              int v84 = *(void **)&v262[8];
            }
            else
            {
              unsigned int v98 = 0;
            }
            uint64_t v111 = &v98[16 * v94];
            v112 = &v98[16 * v97];
            *(_DWORD *)uint64_t v111 = 0;
            *((void *)v111 + 1) = v83;
            unsigned int v85 = v111 + 16;
            if (v84 != v93)
            {
              do
              {
                *((_OWORD *)v111 - 1) = *((_OWORD *)v84 - 1);
                v111 -= 16;
                v84 -= 2;
              }
              while (v84 != v93);
              uint64_t v93 = *(void **)v262;
            }
            *(void *)v262 = v111;
            *(void *)&v262[8] = v85;
            *(void *)&v262[16] = v112;
            if (v93) {
              operator delete(v93);
            }
          }
          else
          {
            **(_DWORD **)&v262[8] = 0;
            v84[1] = v83;
            unsigned int v85 = (char *)(v84 + 2);
          }
          *(void *)&v262[8] = v85;
          if (((unint64_t)&v85[-*(void *)v262] >> 4) == -2) {
            unsigned int v82 = 0;
          }
          else {
            unsigned int v82 = 12 * (((unint64_t)&v85[-*(void *)v262] >> 4) + 2) + 4;
          }
          unsigned int v81 = a4[3];
        }
        else
        {
          unsigned int v82 = 0;
          unint64_t v83 = 0;
        }
        uint64_t v113 = MTLCompilerObject::serializeLibraryReply(a1, &v253, __s1, 0, *(llvm::Module ***)buf, (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3, v82, 0, (v81 & 4) != 0, 0, 0);
        if (v241) {
          MTLObjectDestroy();
        }
        v114 = *(void **)buf;
        if (*(void *)buf)
        {
          *(void *)&buf[8] = *(void *)buf;
LABEL_338:
          operator delete(v114);
        }
      }
      if (v249 != &v252) {
        free(v249);
      }
      ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)&__p);
      llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&v252);
      int v186 = v219;
      if (!v113) {
        int v186 = 0;
      }
      if (v186 == 1)
      {
        LODWORD(v249) = v8;
        MTLBuildRequestTypeToString(&v249, &__p);
        uint64_t v187 = v13;
        unint64_t v188 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v217));
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a1 + 159) >= 0) {
            uint64_t v189 = v187;
          }
          else {
            uint64_t v189 = *(void *)(a1 + 136);
          }
          long long v190 = &__p;
          if (DiagnosticContext < 0) {
            long long v190 = __p;
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = v189;
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v190;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = "source";
          LOWORD(v259) = 2048;
          *(double *)((char *)&v259 + 2) = (double)v188 * 0.000001;
          _os_log_impl(&dword_2556FA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Compilation SUCCESS (ParentProcessName=%{public}s) (TYPE=%{public}s - %s): Time %f ms ", buf, 0x2Au);
        }
        if (SHIBYTE(DiagnosticContext) < 0) {
          operator delete(__p);
        }
        uint64_t v191 = *(void *)&v262[8];
        if ((a4[3] & 2) != 0)
        {
          long long v193 = *(char **)&v262[16];
          if (*(void *)&v262[8] >= *(void *)&v262[16])
          {
            v195 = *(void **)v262;
            uint64_t v196 = (uint64_t)(*(void *)&v262[8] - *(void *)v262) >> 4;
            unint64_t v197 = v196 + 1;
            if ((unint64_t)(v196 + 1) >> 60) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v198 = *(void *)&v262[16] - *(void *)v262;
            if ((uint64_t)(*(void *)&v262[16] - *(void *)v262) >> 3 > v197) {
              unint64_t v197 = v198 >> 3;
            }
            if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v199 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v199 = v197;
            }
            if (v199)
            {
              v200 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v262[16], v199);
              v195 = *(void **)v262;
              uint64_t v191 = *(void *)&v262[8];
            }
            else
            {
              v200 = 0;
            }
            v201 = &v200[16 * v196];
            long long v193 = &v200[16 * v199];
            *(_DWORD *)v201 = 6;
            *((void *)v201 + 1) = v188;
            v194 = v201 + 16;
            if ((void *)v191 != v195)
            {
              do
              {
                *((_OWORD *)v201 - 1) = *(_OWORD *)(v191 - 16);
                v201 -= 16;
                v191 -= 16;
              }
              while ((void *)v191 != v195);
              v195 = *(void **)v262;
            }
            *(void *)v262 = v201;
            *(void *)&v262[8] = v194;
            *(void *)&v262[16] = v193;
            if (v195)
            {
              operator delete(v195);
              long long v193 = *(char **)&v262[16];
            }
          }
          else
          {
            **(_DWORD **)&v262[8] = 6;
            *(void *)(v191 + 8) = v188;
            v194 = (char *)(v191 + 16);
          }
          *(void *)&v262[8] = v194;
          unint64_t v202 = v188 - v83;
          if (v194 >= v193)
          {
            v203 = *(char **)v262;
            uint64_t v204 = (uint64_t)&v194[-*(void *)v262] >> 4;
            unint64_t v205 = v204 + 1;
            if ((unint64_t)(v204 + 1) >> 60) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v206 = (uint64_t)&v193[-*(void *)v262];
            if (v206 >> 3 > v205) {
              unint64_t v205 = v206 >> 3;
            }
            if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v207 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v207 = v205;
            }
            if (v207)
            {
              v208 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>((uint64_t)&v262[16], v207);
              v203 = *(char **)v262;
              v194 = *(char **)&v262[8];
            }
            else
            {
              v208 = 0;
            }
            v209 = &v208[16 * v204];
            v210 = &v208[16 * v207];
            *(_DWORD *)v209 = 4;
            *((void *)v209 + 1) = v202;
            uint64_t v191 = (uint64_t)(v209 + 16);
            if (v194 == v203)
            {
              uint64_t v192 = v221;
            }
            else
            {
              uint64_t v192 = v221;
              do
              {
                *((_OWORD *)v209 - 1) = *((_OWORD *)v194 - 1);
                v209 -= 16;
                v194 -= 16;
              }
              while (v194 != v203);
              v203 = *(char **)v262;
            }
            *(void *)v262 = v209;
            *(void *)&v262[8] = v191;
            *(void *)&v262[16] = v210;
            if (v203) {
              operator delete(v203);
            }
          }
          else
          {
            *(_DWORD *)v194 = 4;
            *((void *)v194 + 1) = v202;
            uint64_t v191 = (uint64_t)(v194 + 16);
            uint64_t v192 = v221;
          }
          *(void *)&v262[8] = v191;
        }
        else
        {
          uint64_t v192 = v221;
        }
        v233 = 0;
        v234 = 0;
        uint64_t v235 = 0;
        std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(&v233, *(const void **)v262, v191, (v191 - *(void *)v262) >> 4);
        serializeCompileTimeDataInReply(v113, (uint64_t)&v233);
        if (v233)
        {
          v234 = v233;
          operator delete(v233);
        }
        (*(void (**)(uint64_t, void, uint64_t, size_t, void))(v192 + 16))(v192, 0, v113, v253, 0);
        uint64_t v110 = (void *)v113;
        goto LABEL_394;
      }
      (*(void (**)(uint64_t))(v221 + 16))(v221);
      goto LABEL_395;
    case 4:
      LODWORD(__p) = 4;
      MTLBuildRequestTypeToString(&__p, v262);
      if (logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken != -1) {
        dispatch_once(&logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken, &__block_literal_global_200);
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 159) >= 0) {
          uint64_t v37 = a1 + 136;
        }
        else {
          uint64_t v37 = *(void *)(a1 + 136);
        }
        uint64_t v38 = v262;
        if ((v262[23] & 0x80u) != 0) {
          uint64_t v38 = *(uint8_t **)v262;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = v37;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v38;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = "opaque";
        _os_log_impl(&dword_2556FA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Compilation BEGIN (ParentProcessName=%{public}s) Build request: %{public}s - %s", buf, 0x20u);
      }
      uint64_t v39 = mach_absolute_time();
      if ((char)v262[23] < 0) {
        operator delete(*(void **)v262);
      }
      uint64_t v40 = *(void *)(a1 + 64);
      if (a2 >= (unint64_t)((*(void *)(a1 + 72) - v40) >> 3)) {
        abort();
      }
      uint64_t v261 = 0;
      long long v259 = 0u;
      long long v260 = 0u;
      memset(buf, 0, sizeof(buf));
      uint64_t v41 = *(void *)(v40 + 8 * a2);
      *(unsigned char *)(v41 + 138) = 1;
      uint64_t v42 = *(uint64_t (**)(void, unsigned int *, unint64_t, void, void, uint8_t *, uint8_t *, long long *, char *, long long *, char *, uint8_t *))(v41 + 32);
      if (v42)
      {
        int v43 = v42(*(void *)(v41 + 112), a4, a5, 0, 0, buf, &buf[8], &v259, (char *)&v259 + 8, &v260, (char *)&v260 + 8, &buf[16]);
      }
      else
      {
        *((void *)&v260 + 1) = 0;
        int v43 = (*(uint64_t (**)(void, unsigned int *, unint64_t, void, uint8_t *, uint8_t *, uint8_t *))(v41 + 24))(*(void *)(v41 + 112), a4, a5, 0, buf, &buf[8], &buf[16]);
      }
      *(_DWORD *)&buf[24] = v43;
      if (v43)
      {
        if (v43 != 1) {
          abort();
        }
        uint64_t v76 = 2;
      }
      else
      {
        uint64_t v76 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, void, void, void))(a6 + 16))(a6, v76, *(void *)buf, *(void *)&buf[8], *(void *)&buf[16]);
      uint64_t v77 = *(void *)(*(void *)(a1 + 64) + 8 * a2);
      if (*(unsigned char *)(v77 + 138))
      {
        (*(void (**)(void))(v77 + 16))(*(void *)(v77 + 112));
        *(unsigned char *)(v77 + 138) = 0;
      }
      LODWORD(v249) = 4;
      MTLBuildRequestTypeToString(&v249, &__p);
      uint64_t v78 = mach_absolute_time();
      uint64_t MachO = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      if (MachO)
      {
        if (*(char *)(a1 + 159) >= 0) {
          uint64_t v79 = a1 + 136;
        }
        else {
          uint64_t v79 = *(void *)(a1 + 136);
        }
        uint64_t v80 = &__p;
        if (DiagnosticContext < 0) {
          uint64_t v80 = __p;
        }
        *(_DWORD *)v262 = 136446978;
        *(void *)&v262[4] = v79;
        *(_WORD *)&v262[12] = 2082;
        *(void *)&v262[14] = v80;
        *(_WORD *)&v262[22] = 2080;
        v263 = "opaque";
        __int16 v264 = 2048;
        double v265 = (double)(unint64_t)(*(double *)&gMachTimeToNS * (double)(v78 - v39)) * 0.000001;
        _os_log_impl(&dword_2556FA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Compilation SUCCESS (ParentProcessName=%{public}s) (TYPE=%{public}s - %s): Time %f ms ", v262, 0x2Au);
      }
      if ((SHIBYTE(DiagnosticContext) & 0x80000000) == 0) {
        return llvm::remove_fatal_error_handler((llvm *)MachO);
      }
      uint64_t MachO = (uint64_t)__p;
      goto LABEL_397;
    case 5:
      uint64_t v222 = a6;
      v238 = 0;
      memset(v262, 0, sizeof(v262));
      MEMORY[0x25A28CF80](&v253, "MTLSpecializeFunction request type is deprecated, use MTLSpecializeFunctionToArchive");
      __p = &v253;
      uint64_t DiagnosticContext = llvm::LLVMContext::getDiagnosticContext((llvm::LLVMContext *)&v253);
      uint64_t v255 = llvm::LLVMContext::getDiagnosticHandlerCallBack((llvm::LLVMContext *)&v253);
      llvm::LLVMContext::setDiagnosticHandlerCallBack();
      LODWORD(v244) = 5;
      MTLBuildRequestTypeToString(&v244, &v249);
      if (logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken != -1) {
        dispatch_once(&logCompileBegin(std::string const&,unsigned long long &,char const*,std::string const&)::onceToken, &__block_literal_global_200);
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 159) >= 0) {
          uint64_t v23 = a1 + 136;
        }
        else {
          uint64_t v23 = *(void *)(a1 + 136);
        }
        uint64_t v24 = &v249;
        if (v251 < 0) {
          uint64_t v24 = v249;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v24;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = "CI SPI";
        _os_log_impl(&dword_2556FA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Compilation BEGIN (ParentProcessName=%{public}s) Build request: %{public}s - %s", buf, 0x20u);
      }
      uint64_t v25 = mach_absolute_time();
      if (SHIBYTE(v251) < 0) {
        operator delete(v249);
      }
      uint64_t v212 = a1 + 136;
      uint64_t v213 = v25;
      unint64_t v26 = a4[2];
      uint64_t v27 = a4[3];
      std::vector<llvm::Module *>::vector(&v249, v26);
      unint64_t v214 = v26;
      if (!v26) {
        goto LABEL_90;
      }
      uint64_t v28 = 0;
      uint64_t v29 = (char *)a4 + v27;
      break;
    case 6:
      goto LABEL_77;
    case 7:
      *(void *)&buf[16] = 0;
      long long v260 = 0u;
      *(void *)buf = a4;
      *(void *)&buf[8] = a5;
      *(void *)&buf[24] = a6;
      *(void *)&long long v259 = a4;
      *((void *)&v259 + 1) = 1;
      DWORD2(v260) = 0;
      MTLCompilerObject::downgradeAndLoadModuleRequest((MTLCompilerObject *)a1, (uint64_t)buf);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 8:
      uint64_t MachO = MTLCompilerObject::logCompilerFailure(a1, a4, a5, a6);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 10:
      if (a2 >= (unint64_t)((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3)) {
        abort();
      }
      long long v260 = 0u;
      *(void *)buf = a4;
      *(void *)&buf[8] = a5;
      *(void *)&buf[16] = a2;
      *(void *)&buf[24] = a6;
      *(void *)&long long v259 = a4;
      *((void *)&v259 + 1) = 5;
      DWORD2(v260) = 4;
      MTLCompilerObject::backendCompileStatelessRequest(a1, (uint64_t)buf);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 11:
      uint64_t v12 = "MTLStitchFunctionDagRequest request type is deprecated, use MTLStitchFunctionDagToArchive";
LABEL_77:
      MTLCompilerErrorObject::setFormattedErrorMessage(v223, v12);
      uint64_t MachO = (*(uint64_t (**)(uint64_t, void, void, void))(a6 + 16))(a6, 2 * (*v223 != 0), 0, 0);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 14:
      MEMORY[0x25A28CF80](buf, "MTLSpecializeFunction request type is deprecated, use MTLSpecializeFunctionToArchive");
      MTLCompilerObject::stitchFunctionDag(a1, (llvm::LLVMContext *)buf, v36, (uint64_t)a4, a5, a6);
      llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)buf);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 15:
      MTLCompilerObject::buildSpecializedFunctionRequest(a1, (uint64_t)a4, a5, v11, a6);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 16:
      uint64_t MachO = MTLCompilerObject::generateMachO(a1, (uint64_t)a4, a5, a6);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    case 17:
      MTLCompilerObject::generateBinaryArchiveID(a1, (uint64_t)a4, a5, a6);
      return llvm::remove_fatal_error_handler((llvm *)MachO);
    default:
      *(_DWORD *)v262 = -1;
      MTLBuildRequestTypeToString(v262, buf);
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR)) {
        MTLCompilerObject::buildRequest();
      }
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t MachO = (*(uint64_t (**)(uint64_t, uint64_t, void, void, const char *))(a6 + 16))(a6, 2, 0, 0, "Internal compiler error.");
      return llvm::remove_fatal_error_handler((llvm *)MachO);
  }
  do
  {
    uint64_t v30 = *(unsigned int *)&v29[v28 + 4];
    v229 = (char *)a4 + *(unsigned int *)&v29[v28];
    uint64_t v230 = v30;
    v231 = &unk_2557AB8A6;
    uint64_t v232 = 0;
    llvm::getLazyBitcodeModule();
    llvm::expectedToErrorOrAndEmitErrors<std::unique_ptr<llvm::Module>>(v257, (uint64_t)buf);
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t)v257);
    if (buf[16])
    {
      (*(void (**)(uint64_t, uint64_t, void, void, const char *))(v222 + 16))(v222, 2, 0, 0, "Failed to read function bitcode.");
      int v32 = 1;
      goto LABEL_44;
    }
    unint64_t v31 = *(llvm::Module **)buf;
    *(void *)buf = 0;
    llvm::Module::materializeAll((uint64_t *)&v244, v31);
    if (v244)
    {
      (*(void (**)(uint64_t, uint64_t, void, void, const char *))(v222 + 16))(v222, 2, 0, 0, "Failed to materializeAll.");
LABEL_38:
      int v32 = 1;
      goto LABEL_42;
    }
    if (!MTLUpgradeAIRModule())
    {
      (*(void (**)(uint64_t, uint64_t, void, void, const char *))(v222 + 16))(v222, 2, 0, 0, "Failed to upgrade AIR version.");
      if (v31)
      {
        uint64_t v35 = MEMORY[0x25A28D8E0](v31);
        MEMORY[0x25A28E250](v35, 0x10B2C407FF26C1CLL);
      }
      goto LABEL_38;
    }
    int v32 = 0;
    *(void *)((char *)v249 + v28) = v31;
LABEL_42:
    if (v244) {
      (*(void (**)(void *))(*(void *)v244 + 8))(v244);
    }
LABEL_44:
    if ((buf[16] & 1) == 0)
    {
      uint64_t v33 = *(void *)buf;
      *(void *)buf = 0;
      if (v33)
      {
        uint64_t v34 = MEMORY[0x25A28D8E0]();
        MEMORY[0x25A28E250](v34, 0x10B2C407FF26C1CLL);
      }
    }
    if (v32)
    {
      size_t v91 = 0;
      unint64_t v89 = 0;
      int v92 = 1;
      a1 = v224;
      goto LABEL_188;
    }
    v28 += 8;
    a1 = v224;
  }
  while (8 * v214 != v28);
LABEL_90:
  std::vector<ImageFilterFunctionInfoSPI>::vector(&v244, *a4);
  std::vector<llvm::Function *>::vector(&v241, *a4);
  if (*a4)
  {
    unint64_t v51 = 0;
    uint64_t v52 = (const char *)(a4 + 5);
    uint64_t v53 = (unsigned int *)((char *)a4 + a4[1]);
    do
    {
      uint64_t v54 = v53[2];
      if (v52) {
        strlen(v52);
      }
      uint64_t Function = llvm::Module::getFunction();
      if (Function)
      {
        memset(&buf[8], 0, 24);
        unint64_t v56 = v53 + 3;
        uint8_t v57 = *v53 != 0;
        buf[0] = v57;
        if (v54)
        {
          uint64_t v216 = Function;
          v218 = v53;
          v220 = v52;
          uint64_t v58 = 0;
          for (uint64_t i = 0; i != v54; ++i)
          {
            uint64_t v60 = &v56[3 * i];
            int v62 = *v60;
            int v61 = v60[1];
            int v63 = v60[2];
            if ((unint64_t)v58 >= *(void *)&buf[24])
            {
              __int16 v64 = *(_DWORD **)&buf[8];
              unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v58 - *(void *)&buf[8]) >> 2);
              unint64_t v66 = v65 + 1;
              if (v65 + 1 > 0x1555555555555555) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(*(void *)&buf[24] - *(void *)&buf[8]) >> 2) > v66) {
                unint64_t v66 = 0x5555555555555556 * ((uint64_t)(*(void *)&buf[24] - *(void *)&buf[8]) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[24] - *(void *)&buf[8]) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v67 = 0x1555555555555555;
              }
              else {
                unint64_t v67 = v66;
              }
              if (v67)
              {
                uint64_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImageFilterFunctionArgumentInfoSPI>>((uint64_t)&buf[24], v67);
                __int16 v64 = *(_DWORD **)&buf[8];
                uint64_t v58 = *(_DWORD **)&buf[16];
              }
              else
              {
                uint64_t v68 = 0;
              }
              unint64_t v69 = &v68[12 * v65];
              *(_DWORD *)unint64_t v69 = v62;
              *((_DWORD *)v69 + 1) = v61;
              *((_DWORD *)v69 + 2) = v63;
              unint64_t v70 = v69;
              if (v58 != v64)
              {
                do
                {
                  uint64_t v71 = *(void *)(v58 - 3);
                  v58 -= 3;
                  int v72 = v58[2];
                  *(void *)(v70 - 12) = v71;
                  v70 -= 12;
                  *((_DWORD *)v70 + 2) = v72;
                }
                while (v58 != v64);
                __int16 v64 = *(_DWORD **)&buf[8];
              }
              uint64_t v58 = v69 + 12;
              *(void *)&buf[8] = v70;
              *(void *)&buf[16] = v69 + 12;
              *(void *)&buf[24] = &v68[12 * v67];
              if (v64) {
                operator delete(v64);
              }
            }
            else
            {
              _DWORD *v58 = v62;
              v58[1] = v61;
              v58[2] = v63;
              v58 += 3;
            }
            *(void *)&buf[16] = v58;
          }
          uint8_t v57 = buf[0];
          uint64_t v53 = v218;
          uint64_t v52 = v220;
          uint64_t Function = v216;
        }
        *((void *)v241 + v51) = Function;
        int v73 = (uint8_t *)v244 + 32 * v51;
        *int v73 = v57;
        a1 = v224;
        if (v73 != buf) {
          std::vector<ImageFilterFunctionArgumentInfoSPI>::__assign_with_size[abi:ne180100]<ImageFilterFunctionArgumentInfoSPI*,ImageFilterFunctionArgumentInfoSPI*>((char *)v73 + 8, *(char **)&buf[8], *(uint64_t *)&buf[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[16] - *(void *)&buf[8]) >> 2));
        }
        if (*(void *)&buf[8])
        {
          *(void *)&buf[16] = *(void *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
      }
      else
      {
        MTLCompilerErrorObject::setFormattedErrorMessage(v223, "Failed to find function %s in library", v52);
        (*(void (**)(uint64_t, uint64_t, void, void, char *))(v222 + 16))(v222, 2, 0, 0, *v223);
      }
      v52 += strlen(v52) + 1;
      v53 += 3 * v54 + 3;
      ++v51;
    }
    while (v51 < *a4);
  }
  if ((*((unsigned char *)a4 + 17) & 2) != 0)
  {
    uint64_t v75 = v222;
    uint64_t v74 = mach_absolute_time();
  }
  else
  {
    uint64_t v74 = 0;
    uint64_t v75 = v222;
  }
  uint64_t v252 = 0;
  ComposeImageFuncFromLibrariesSPI = (uint64_t (*)(void **, void **, void **, uint64_t *))MTLCompilerObject::getComposeImageFuncFromLibrariesSPI((MTLCompilerObject *)a1);
  if (ComposeImageFuncFromLibrariesSPI)
  {
    uint64_t v87 = ComposeImageFuncFromLibrariesSPI(&v249, &v241, &v244, &v252);
    goto LABEL_147;
  }
  if (v214 >= 2)
  {
    MTLCompilerErrorObject::setFormattedErrorMessage(v223, "Creating a ComputePipeline from multiple libraries is unsupported. Found functions from %d modules", v214);
    goto LABEL_162;
  }
  ComposeImageFuncSPI = (uint64_t (*)(void, void **, void **, uint64_t *))MTLCompilerObject::getComposeImageFuncSPI((MTLCompilerObject *)a1);
  if (ComposeImageFuncSPI)
  {
    uint64_t v87 = ComposeImageFuncSPI(*(void *)v249, &v241, &v244, &v252);
LABEL_147:
    uint64_t v88 = (llvm::Value *)v87;
    if (v87)
    {
      if ((*((unsigned char *)a4 + 17) & 2) != 0)
      {
        unint64_t v89 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v74));
        *(_DWORD *)buf = 2;
        *(void *)&buf[8] = v89;
        std::vector<CompileTimeData>::push_back[abi:ne180100]((void **)v262, buf);
        if (((*(void *)&v262[8] - *(void *)v262) >> 4) == -2) {
          uint64_t v90 = 0;
        }
        else {
          uint64_t v90 = 12 * (((*(void *)&v262[8] - *(void *)v262) >> 4) + 2) + 4;
        }
      }
      else
      {
        unint64_t v89 = 0;
        uint64_t v90 = 0;
      }
      LLVMExtraMakeSharedModule();
      uint64_t Name = (void *)llvm::Value::getName(v88);
      if (Name) {
        std::string::basic_string[abi:ne180100](buf, Name, v103);
      }
      else {
        memset(buf, 0, 24);
      }
      MTLMetalFunctionCreate();
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      MTLMetalLibCreateExecutableWithTriple();
      MTLMetalLibInsertFunction();
      uint64_t v106 = MTLWriteMetalLibToMemoryBuffer();
      size_t v91 = MTLCompilerObject::serializeLibraryToArchiveReply(a1, (size_t *)&v238, 0, 0, 1, v106, v90);
      if (v106) {
        LLVMDisposeMemoryBuffer();
      }
      LLVMExtraDisposeSharedModule();
      int v92 = 0;
      goto LABEL_185;
    }
    v223 = (char **)&v252;
LABEL_162:
    (*(void (**)(uint64_t, uint64_t, void, void, char *))(v75 + 16))(v75, 2, 0, 0, *v223);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void, void, const char *))(v75 + 16))(v75, 2, 0, 0, "Failed to load composeImageFunc plugin");
  }
  size_t v91 = 0;
  unint64_t v89 = 0;
  int v92 = 1;
LABEL_185:
  if (v241)
  {
    v242 = (uint64_t *)v241;
    operator delete(v241);
  }
  *(void *)buf = &v244;
  std::vector<ImageFilterFunctionInfoSPI>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_188:
  if (v249)
  {
    v250 = (char *)v249;
    operator delete(v249);
  }
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)&__p);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&v253);
  if (!v92 && v91)
  {
    LODWORD(v249) = 5;
    MTLBuildRequestTypeToString(&v249, &__p);
    unint64_t v107 = (unint64_t)(*(double *)&gMachTimeToNS * (double)(mach_absolute_time() - v213));
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v108 = v212;
      if (*(char *)(a1 + 159) < 0) {
        uint64_t v108 = *(void *)(a1 + 136);
      }
      v109 = &__p;
      if (DiagnosticContext < 0) {
        v109 = __p;
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = v108;
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v109;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&buf[24] = "CI SPI";
      LOWORD(v259) = 2048;
      *(double *)((char *)&v259 + 2) = (double)v107 * 0.000001;
      _os_log_impl(&dword_2556FA000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "Compilation SUCCESS (ParentProcessName=%{public}s) (TYPE=%{public}s - %s): Time %f ms ", buf, 0x2Au);
    }
    if (SHIBYTE(DiagnosticContext) < 0) {
      operator delete(__p);
    }
    if ((*((unsigned char *)a4 + 17) & 2) != 0)
    {
      *(_DWORD *)buf = 6;
      *(void *)&buf[8] = v107;
      std::vector<CompileTimeData>::push_back[abi:ne180100]((void **)v262, buf);
      *(_DWORD *)buf = 4;
      *(void *)&buf[8] = v107 - v89;
      std::vector<CompileTimeData>::push_back[abi:ne180100]((void **)v262, buf);
    }
    v226 = 0;
    v227 = 0;
    uint64_t v228 = 0;
    std::vector<CompileTimeData>::__init_with_size[abi:ne180100]<CompileTimeData*,CompileTimeData*>(&v226, *(const void **)v262, *(uint64_t *)&v262[8], (uint64_t)(*(void *)&v262[8] - *(void *)v262) >> 4);
    serializeCompileTimeDataInReply((uint64_t)v91, (uint64_t)&v226);
    if (v226)
    {
      v227 = v226;
      operator delete(v226);
    }
    (*(void (**)(uint64_t, void, char *, void *, void))(v222 + 16))(v222, 0, v91, v238, 0);
    uint64_t v110 = v91;
LABEL_394:
    free(v110);
  }
LABEL_395:
  uint64_t MachO = *(void *)v262;
  if (*(void *)v262)
  {
    *(void *)&v262[8] = *(void *)v262;
LABEL_397:
    operator delete((void *)MachO);
  }
  return llvm::remove_fatal_error_handler((llvm *)MachO);
}

void sub_255711678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,__int16 a53,void *a54)
{
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v54 - 240) = &a44;
  std::vector<ImageFilterFunctionInfoSPI>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 240));
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  ScopedDiagnosticHandler::~ScopedDiagnosticHandler((ScopedDiagnosticHandler *)&a54);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&a53);
  unint64_t v56 = *(void **)(v54 - 160);
  if (v56)
  {
    *(void *)(v54 - 152) = v56;
    operator delete(v56);
  }
  llvm::remove_fatal_error_handler((llvm *)v56);
  _Unwind_Resume(a1);
}

uint64_t invokeBuildRequest(unsigned int *a1)
{
  return MTLCompilerObject::buildRequest(*(void *)a1, a1[2], (void *)a1[3], *((unsigned int **)a1 + 2), *((void *)a1 + 3), *((void *)a1 + 4));
}

llvm::Value *MTLAddVertexFetchingToModulePass::convertAttributeToType(uint64_t a1, llvm::Type **a2, llvm::Type **this, uint64_t a4, int a5, llvm::Value *ShuffleVector, unsigned int a7, int a8)
{
  uint64_t v132 = *MEMORY[0x263EF8340];
  int v8 = (const char **)&(&vertexFormats)[2 * a7];
  uint64_t v123 = *((unsigned __int16 *)v8 + 5);
  if (!*((_WORD *)v8 + 5)) {
    return 0;
  }
  int v15 = *(unsigned __int8 *)(a4 + 8);
  if (v15 == 16)
  {
    uint64_t v16 = **(void **)(a4 + 16);
    uint64_t v17 = *(unsigned __int8 **)(v16 + 24);
    int v18 = *(_DWORD *)(v16 + 32);
  }
  else
  {
    uint64_t v17 = (unsigned __int8 *)a4;
    if ((v15 & 0xFE) == 0x12) {
      uint64_t v17 = **(unsigned __int8 ***)(a4 + 16);
    }
    if (v15 == 18) {
      int v18 = *(_DWORD *)(a4 + 32);
    }
    else {
      int v18 = 1;
    }
  }
  unsigned int v19 = *((_DWORD *)v8 + 3);
  if (v18 >= (int)v123) {
    int v20 = *((unsigned __int16 *)v8 + 5);
  }
  else {
    int v20 = v18;
  }
  size_t v21 = (llvm::Type *)v17;
  int v124 = v20;
  if (v20 != 1) {
    size_t v21 = (llvm::Type *)vectorTypeGet((llvm::Type *)v17);
  }
  int v122 = v18;
  if (v19 > 0xF) {
    goto LABEL_25;
  }
  if (((1 << v19) & 0xF000) == 0)
  {
    if (((1 << v19) & 0x30) != 0)
    {
      if ((*(_DWORD *)(*(void *)ShuffleVector + 8) & 0xFE) == 0x12)
      {
        if (*(_DWORD *)(*(void *)ShuffleVector + 32) == 3)
        {
          uint64_t v28 = v21;
          uint64_t v29 = llvm::UndefValue::get();
          v128[0] = xmmword_2557AA3A0;
          __int16 v131 = 257;
          ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)this, (uint64_t)ShuffleVector, v29, (uint64_t)v128, 4, (uint64_t)__str);
          size_t v21 = v28;
        }
        goto LABEL_33;
      }
      uint64_t v23 = *a2;
      uint64_t v24 = (llvm::IRBuilderBase *)this;
      uint64_t v25 = ShuffleVector;
      unint64_t v26 = v21;
      unsigned int v27 = 2;
LABEL_32:
      int v32 = expandVector(v23, v24, v25, v27);
      size_t v21 = v26;
      ShuffleVector = v32;
      goto LABEL_33;
    }
    if (((1 << v19) & 0x300) != 0)
    {
      uint64_t v22 = *(void *)ShuffleVector;
      if (*(void *)ShuffleVector && *(unsigned char *)(v22 + 8) == 18 && *(_DWORD *)(v22 + 32) == 4) {
        goto LABEL_33;
      }
      uint64_t v23 = *a2;
      uint64_t v24 = (llvm::IRBuilderBase *)this;
      uint64_t v25 = ShuffleVector;
      unint64_t v26 = v21;
      unsigned int v27 = 4;
      goto LABEL_32;
    }
LABEL_25:
    uint64_t v30 = *(void *)ShuffleVector;
    int v31 = 1;
    unint64_t v118 = v21;
    if (*(void *)ShuffleVector && *(unsigned char *)(v30 + 8) == 18) {
      int v31 = *(_DWORD *)(v30 + 32);
    }
    if (v124 < v31) {
      ShuffleVector = MTLFrameworkPass::truncateVector(*a2, (llvm::LLVMContext *)this, ShuffleVector, v124);
    }
    size_t v21 = v118;
  }
LABEL_33:
  uint64_t v33 = this[8];
  int v34 = v17[8];
  if (!v17[8]) {
    goto LABEL_36;
  }
  if (v34 == 13)
  {
    uint64_t v36 = *(void *)ShuffleVector;
    int v37 = 1;
    uint64_t v35 = v21;
    if (*(void *)ShuffleVector && *(unsigned char *)(v36 + 8) == 18) {
      int v37 = *(_DWORD *)(v36 + 32);
    }
    if (v124 < v37) {
      ShuffleVector = MTLFrameworkPass::truncateVector(this[8], (llvm::LLVMContext *)this, ShuffleVector, v124);
    }
    switch(v19)
    {
      case 0u:
      case 1u:
        if (!*(unsigned char *)(a1 + 8)
          || v17 != (unsigned __int8 *)llvm::Type::getInt32Ty(v33, (llvm::LLVMContext *)a2)
          && v17 != (unsigned __int8 *)llvm::Type::getInt16Ty(v33, v69)
          && v17 != (unsigned __int8 *)llvm::Type::getInt1Ty(v33, v70))
        {
          goto LABEL_96;
        }
        if (v124 < 2) {
          snprintf(__str, 0x40uLL, "air.convert.%s.%s.f.%s");
        }
        else {
          snprintf(__str, 0x40uLL, "air.convert.%s.v%d%s.f.v%d%s");
        }
LABEL_134:
        SExtOrTrunCC_SHA256_CTX c = (llvm::Value *)callUnpackFunction((uint64_t)a2, (uint64_t)this, __str, (uint64_t)v35, ShuffleVector);
        goto LABEL_135;
      case 2u:
      case 6u:
      case 0xAu:
        if ((a5 & 1) != 0 || *(unsigned char *)(a1 + 8)) {
          goto LABEL_117;
        }
        MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, "Cannot convert attribute from %s to an unsigned integer type", *v8);
        return 0;
      case 3u:
      case 7u:
      case 0xBu:
        if (!a5 || *(unsigned char *)(a1 + 8)) {
          goto LABEL_119;
        }
        MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, "Cannot convert attribute from %s to a signed integer type", *v8);
        return 0;
      case 8u:
        if (!*(unsigned char *)(a1 + 8)) {
          goto LABEL_96;
        }
LABEL_117:
        __int16 v129 = 257;
        SExtOrTrunCC_SHA256_CTX c = (llvm::Value *)llvm::IRBuilderBase::CreateSExtOrTrunc((llvm::IRBuilderBase *)this, (llvm::Type **)ShuffleVector, v35, (const llvm::Twine *)v128);
        goto LABEL_135;
      case 9u:
        if (!*(unsigned char *)(a1 + 8)) {
          goto LABEL_96;
        }
LABEL_119:
        __int16 v129 = 257;
        SExtOrTrunCC_SHA256_CTX c = (llvm::Value *)llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)this, (llvm::Type **)ShuffleVector, v35, (const llvm::Twine *)v128);
LABEL_135:
        ShuffleVector = SExtOrTrunc;
LABEL_136:
        if (v122 > (int)v123)
        {
          if (v124 == 1)
          {
            long long v126 = 0uLL;
            long long v127 = 0uLL;
            if (v122 >= 1)
            {
              uint64_t v91 = 0;
              do
              {
                if (v17[8] == 13) {
                  uint64_t v92 = llvm::ConstantInt::get();
                }
                else {
                  uint64_t v92 = llvm::ConstantFP::get();
                }
                *(void *)((char *)&v126 + v91) = v92;
                v91 += 8;
              }
              while (8 * v122 != v91);
            }
            uint64_t v93 = (llvm::Value *)llvm::ConstantVector::get();
            llvm::Type::getInt32Ty(v33, v94);
            unint64_t v95 = (llvm::Value *)llvm::ConstantInt::get();
            __int16 v129 = 257;
            Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)this, v93, ShuffleVector, v95, (const llvm::Twine *)v128, v96);
          }
          else
          {
            long long v126 = 0uLL;
            long long v127 = 0uLL;
            if (v122 >= 1)
            {
              uint64_t v98 = 0;
              if (v124 <= 1) {
                unsigned int v99 = 1;
              }
              else {
                unsigned int v99 = v124;
              }
              uint64_t v100 = 8 * v99;
              do
              {
                if (v17[8] == 13) {
                  uint64_t v101 = llvm::ConstantInt::get();
                }
                else {
                  uint64_t v101 = llvm::ConstantFP::get();
                }
                *(void *)((char *)&v126 + v98) = v101;
                v98 += 8;
              }
              while (v100 != v98);
            }
            uint64_t v102 = llvm::ConstantVector::get();
            if (v122 > 0)
            {
              uint64_t v103 = 0;
              uint64x2_t v104 = (uint64x2_t)vdupq_n_s64((unint64_t)v122 - 1);
              int64x2_t v105 = (int64x2_t)xmmword_2557AA3C0;
              uint64_t v106 = (_DWORD *)v125 + 1;
              int64x2_t v107 = vdupq_n_s64(2uLL);
              do
              {
                int32x2_t v108 = vmovn_s64((int64x2_t)vcgeq_u64(v104, (uint64x2_t)v105));
                if (v108.i8[0])
                {
                  if (v103 >= v124) {
                    int v109 = v124 + 1;
                  }
                  else {
                    int v109 = v103;
                  }
                  *(v106 - 1) = v109;
                }
                if (v108.i8[4])
                {
                  uint64_t v110 = v103 + 1;
                  if (v103 == 2) {
                    int v111 = v124;
                  }
                  else {
                    int v111 = v124 + 1;
                  }
                  if (v110 >= v124) {
                    LODWORD(v110) = v111;
                  }
                  _DWORD *v106 = v110;
                }
                v103 += 2;
                int64x2_t v105 = vaddq_s64(v105, v107);
                v106 += 2;
              }
              while (((v122 + 1) & 0x1FFFFFFFELL) != v103);
            }
            __int16 v129 = 257;
            Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)this, (uint64_t)ShuffleVector, v102, (uint64_t)v125, v122, (uint64_t)v128);
          }
          ShuffleVector = InsertElement;
        }
        if (*(unsigned char *)(a4 + 8) != 16) {
          return ShuffleVector;
        }
        uint64_t InsertValue = llvm::UndefValue::get();
        if (v122)
        {
          for (uint64_t i = 0; i != v122; ++i)
          {
            llvm::Type::getInt32Ty(v33, v112);
            v114 = (llvm::Value *)llvm::ConstantInt::get();
            __int16 v129 = 257;
            uint64_t Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)this, ShuffleVector, v114, (const llvm::Twine *)v128, v115);
            LODWORD(v126) = 0;
            DWORD1(v126) = i;
            __int16 v129 = 257;
            uint64_t InsertValue = llvm::IRBuilderBase::CreateInsertValue((uint64_t)this, InsertValue, Element, (uint64_t)&v126, 2, (uint64_t)v128);
          }
        }
        return (llvm::Value *)InsertValue;
      default:
LABEL_96:
        MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, "Cannot convert attribute from %s to int%d or uint%d", *v8, v122, v122);
        return 0;
    }
  }
  if (v34 != 2)
  {
    MTLCompilerErrorObject::setErrorMessage(*(MTLCompilerErrorObject **)a1, "Unsupported attribute type");
  }
  else
  {
LABEL_36:
    switch(v19)
    {
      case 0u:
        if (v17[8]) {
          goto LABEL_136;
        }
        __int16 v129 = 257;
        SExtOrTrunCC_SHA256_CTX c = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)this, ShuffleVector, v21, (const llvm::Twine *)v128);
        goto LABEL_135;
      case 1u:
        if (v34 != 2) {
          goto LABEL_136;
        }
        __int16 v129 = 257;
        SExtOrTrunCC_SHA256_CTX c = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)this, ShuffleVector, v21, (const llvm::Twine *)v128);
        goto LABEL_135;
      case 2u:
      case 3u:
        uint64_t v35 = v21;
        if (v124 < 2) {
          snprintf(__str, 0x40uLL, "air.convert.f.%s.%c.i16");
        }
        else {
          snprintf(__str, 0x40uLL, "air.convert.f.v%d%s.%c.v%di16");
        }
        goto LABEL_134;
      case 4u:
      case 5u:
        if (a8)
        {
          uint64_t v39 = "air.unpack.snorm2x16.v2f16";
          if (v19 == 5)
          {
            uint64_t v39 = "air.unpack.unorm2x16.v2f16";
            uint64_t v40 = "air.unpack.unorm2x16.v2f32";
          }
          else
          {
            uint64_t v40 = "air.unpack.snorm2x16.v2f32";
          }
          if (v17[8]) {
            uint64_t v41 = (char *)v40;
          }
          else {
            uint64_t v41 = (char *)v39;
          }
          uint64_t v42 = ShuffleVector;
          if (v123 >= 3) {
            uint64_t v42 = MTLFrameworkPass::truncateVector(this[8], (llvm::LLVMContext *)this, ShuffleVector, 2);
          }
          uint64_t Int32Ty = llvm::Type::getInt32Ty(v33, (llvm::LLVMContext *)a2);
          __int16 v129 = 257;
          Cast = (void *)llvm::IRBuilderBase::CreateCast((uint64_t)this, 49, (uint64_t)v42, Int32Ty, (uint64_t)v128);
          uint64_t v45 = vectorTypeGet((llvm::Type *)v17);
          uint64_t v46 = (llvm::Value *)callUnpackFunction((uint64_t)a2, (uint64_t)this, v41, v45, Cast);
          if (v123 > 2)
          {
            v125[0] = 0x300000002;
            __int16 v129 = 257;
            uint64_t v47 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)this, (uint64_t)ShuffleVector, (uint64_t)ShuffleVector, (uint64_t)v125, 2, (uint64_t)v128);
            uint64_t v49 = llvm::Type::getInt32Ty(v33, v48);
            __int16 v129 = 257;
            int v50 = (void *)llvm::IRBuilderBase::CreateCast((uint64_t)this, 49, v47, v49, (uint64_t)v128);
            uint64_t v51 = vectorTypeGet((llvm::Type *)v17);
            uint64_t v52 = callUnpackFunction((uint64_t)a2, (uint64_t)this, v41, v51, v50);
            long long v126 = xmmword_2557AA3A0;
            __int16 v129 = 257;
            uint64_t v46 = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)this, (uint64_t)v46, v52, (uint64_t)&v126, v123, (uint64_t)v128);
          }
          SExtOrTrunCC_SHA256_CTX c = MTLFrameworkPass::truncateVector(v33, (llvm::LLVMContext *)this, v46, v124);
        }
        else
        {
          int v71 = 2;
          if (v123 <= 2) {
            int v72 = 2;
          }
          else {
            int v72 = 4;
          }
          if (v123 > 2) {
            int v71 = 4;
          }
          uint64_t v73 = 115;
          if (v19 == 5) {
            uint64_t v73 = 117;
          }
          snprintf(__str, 0x40uLL, "air.convert.f.v%df32.%c.v%di16", v71, v73, v71);
          llvm::Type::getFloatTy(this[8], v74);
          llvm::ConstantFP::get();
          __int16 v129 = 257;
          uint64_t VectorSplat = llvm::IRBuilderBase::CreateVectorSplat();
          FloatTy = (llvm::Type *)llvm::Type::getFloatTy(this[8], v76);
          uint64_t v78 = vectorTypeGet(FloatTy);
          uint64_t v79 = callUnpackFunction((uint64_t)a2, (uint64_t)this, __str, v78, ShuffleVector);
          int v80 = *((_DWORD *)this + 24);
          unsigned int v81 = this[11];
          char v82 = *((unsigned char *)this + 100);
          char v83 = *((unsigned char *)this + 101);
          char v119 = *((unsigned char *)this + 102);
          *((_DWORD *)this + 24) = -1;
          __int16 v129 = 257;
          FDiv = (llvm::Value *)llvm::IRBuilderBase::CreateFDiv((uint64_t)this, v79, VectorSplat, (uint64_t)v128, 0);
          if (v19 == 4)
          {
            snprintf(__str, 0x40uLL, "air.fmax.v%df32", v72);
            llvm::Type::getFloatTy(this[8], v85);
            uint64_t v86 = (uint64_t)a2;
            llvm::ConstantFP::get();
            __int16 v129 = 257;
            uint64_t v87 = llvm::IRBuilderBase::CreateVectorSplat();
            *(void *)&v128[0] = FDiv;
            *((void *)&v128[0] + 1) = v87;
            uint64_t v88 = vectorTypeGet((llvm::Type *)v17);
            FDiv = (llvm::Value *)MTLFrameworkPass::callFunction((uint64_t)a2, (uint64_t)this, __str, v88, (uint64_t **)v128, 2, 0);
          }
          else
          {
            uint64_t v86 = (uint64_t)a2;
          }
          if (!v17[8])
          {
            snprintf(__str, 0x40uLL, "air.convert.f.v%df16.f.v%df32", v72, v72);
            uint64_t v90 = vectorTypeGet((llvm::Type *)v17);
            FDiv = (llvm::Value *)callUnpackFunction(v86, (uint64_t)this, __str, v90, FDiv);
          }
          *((_DWORD *)this + 24) = v80;
          this[11] = v81;
          *((unsigned char *)this + 100) = v82;
          *((unsigned char *)this + 101) = v83;
          *((unsigned char *)this + 102) = v119;
          SExtOrTrunCC_SHA256_CTX c = MTLFrameworkPass::truncateVector(v33, (llvm::LLVMContext *)this, FDiv, v124);
        }
        goto LABEL_135;
      case 6u:
      case 7u:
        uint64_t v35 = v21;
        if (v124 < 2) {
          snprintf(__str, 0x40uLL, "air.convert.f.%s.%c.i8");
        }
        else {
          snprintf(__str, 0x40uLL, "air.convert.f.v%d%s.%c.v%di8");
        }
        goto LABEL_134;
      case 8u:
      case 9u:
        uint64_t v54 = llvm::Type::getInt32Ty(this[8], (llvm::LLVMContext *)a2);
        __int16 v129 = 257;
        uint64_t v55 = (void *)llvm::IRBuilderBase::CreateCast((uint64_t)this, 49, (uint64_t)ShuffleVector, v54, (uint64_t)v128);
        unint64_t v56 = "air.unpack.snorm4x8.v4f16";
        if (v19 == 9) {
          unint64_t v56 = "air.unpack.unorm4x8.v4f16";
        }
        uint8_t v57 = "air.unpack.unorm4x8.v4f32";
        if (v19 != 9) {
          uint8_t v57 = "air.unpack.snorm4x8.v4f32";
        }
        if (v17[8]) {
          uint64_t v58 = (char *)v57;
        }
        else {
          uint64_t v58 = (char *)v56;
        }
        uint64_t v59 = vectorTypeGet((llvm::Type *)v17);
        uint64_t v60 = (llvm::Value *)callUnpackFunction((uint64_t)a2, (uint64_t)this, v58, v59, v55);
        if (a7 == 42)
        {
          long long v126 = xmmword_2557AA3D0;
          __int16 v129 = 257;
          uint64_t v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)this, (uint64_t)v60, (uint64_t)v60, (uint64_t)&v126, 4, (uint64_t)v128);
        }
        SExtOrTrunCC_SHA256_CTX c = MTLFrameworkPass::truncateVector(v33, (llvm::LLVMContext *)this, v60, v124);
        goto LABEL_135;
      case 0xAu:
      case 0xBu:
        if (*(unsigned char *)(a1 + 8))
        {
          uint64_t v35 = v21;
          if (v124 < 2) {
            snprintf(__str, 0x40uLL, "air.convert.f.%s.%c.i32");
          }
          else {
            snprintf(__str, 0x40uLL, "air.convert.f.v%d%s.%c.v%di32");
          }
          goto LABEL_134;
        }
        if (v34 == 2) {
          unint64_t v89 = "float";
        }
        else {
          unint64_t v89 = "half";
        }
LABEL_115:
        MTLCompilerErrorObject::setFormattedErrorMessage(*(char ***)a1, "Cannot convert attribute from %s to %s%d", *v8, v89, v122);
        break;
      case 0xCu:
      case 0xDu:
        if (v17[8]) {
          int v61 = "f32";
        }
        else {
          int v61 = "f16";
        }
        uint64_t v62 = 115;
        if (v19 == 13) {
          uint64_t v62 = 117;
        }
        snprintf(__str, 0x40uLL, "air.unpack.%cnorm.rgb10a2.v4%s", v62, v61);
        uint64_t v63 = vectorTypeGet((llvm::Type *)v17);
        __int16 v64 = (llvm::Value *)callUnpackFunction((uint64_t)a2, (uint64_t)this, __str, v63, ShuffleVector);
        SExtOrTrunCC_SHA256_CTX c = MTLFrameworkPass::truncateVector(v33, (llvm::LLVMContext *)this, v64, v124);
        goto LABEL_135;
      case 0xEu:
      case 0xFu:
        if (v17[8]) {
          unint64_t v65 = "f32";
        }
        else {
          unint64_t v65 = "f16";
        }
        unint64_t v66 = "rgb9e5";
        if (v19 == 14) {
          unint64_t v66 = "rg11b10f";
        }
        snprintf(__str, 0x40uLL, "air.unpack.unorm.%s.v3%s", v66, v65);
        uint64_t v67 = vectorTypeGet((llvm::Type *)v17);
        uint64_t v68 = (llvm::Value *)callUnpackFunction((uint64_t)a2, (uint64_t)this, __str, v67, ShuffleVector);
        SExtOrTrunCC_SHA256_CTX c = MTLFrameworkPass::truncateVector(v33, (llvm::LLVMContext *)this, v68, v124);
        goto LABEL_135;
      default:
        if (v34 == 2) {
          unint64_t v89 = "float";
        }
        else {
          unint64_t v89 = "half";
        }
        goto LABEL_115;
    }
  }
  return 0;
}

void sub_255712974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(_DWORD *)(v15 + 96) = v16;
  *(void *)(v15 + 88) = v19;
  *(unsigned char *)(v15 + 100) = v18;
  *(unsigned char *)(v15 + 101) = v17;
  *(unsigned char *)(v15 + 102) = a15;
  _Unwind_Resume(a1);
}

uint64_t vectorTypeGet(llvm::Type *a1)
{
  return llvm::VectorType::get();
}

llvm::Module *MTLAddVertexFetchingToModulePass::addVertexFetchingToModule(MTLCompilerErrorObject **a1, llvm::Type **this, int a3, unsigned __int16 *a4, unsigned __int16 *a5, int a6, unsigned __int8 a7, int a8, unsigned __int8 a9, char a10, unsigned int a11, void *a12)
{
  v479[39] = *MEMORY[0x263EF8340];
  v407 = *this;
  *(void *)&long long __p = "air.vertex";
  LOWORD(v467) = 259;
  v399 = (llvm::Module *)this;
  NamedMetaint data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((llvm::Module *)this, (const llvm::Twine *)&__p);
  if (NamedMetadata)
  {
    BOOL v371 = 0;
  }
  else
  {
    *(void *)&long long __p = "air.kernel";
    LOWORD(v467) = 259;
    NamedMetaint data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v399, (const llvm::Twine *)&__p);
    BOOL v371 = NamedMetadata != 0;
  }
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  uint64_t v377 = Operand;
  uint64_t v15 = (void *)(Operand - 8 * *(unsigned int *)(Operand + 8));
  v382 = *(llvm::Function **)(*v15 + 128);
  if (((a11 >> 7) & 1) == 0 || (a11 & 4) == 0 || v371 || a12[1] == *a12)
  {
    BOOL v373 = 0;
  }
  else
  {
    uint64_t v16 = **(void **)(*((void *)v382 + 3) + 16);
    uint64_t v17 = v15[1];
    long long __p = 0uLL;
    *(void *)&long long v466 = 0;
    *(void *)&v455[0] = 0;
    BOOL v373 = MTLAddVertexFetchingToModulePass::expandVertexOutputWithFragmentInput(Operand, v407, v16, v17, (uint64_t *)v455, a12, 0, (uint64_t)&__p, a7) != v16;
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  char v18 = 0;
  int v19 = 0;
  if (a4)
  {
    unsigned int v381 = 0;
    v400 = 0;
    if (a3)
    {
      char v18 = (char *)a4 + a4[2];
      v400 = (int *)((char *)a4 + a4[3]);
      unsigned int v20 = a4[1];
      int v19 = (v20 >> 6) & 0x1F;
      unsigned int v381 = v20 >> 11;
      if (v20 >= 0x800)
      {
        if (v19) {
          goto LABEL_34;
        }
      }
    }
  }
  else
  {
    unsigned int v381 = 0;
    v400 = 0;
  }
  int v389 = v19;
  uint64_t v21 = *(void *)(v377 - 8 * *(unsigned int *)(v377 + 8) + 16);
  uint64_t v22 = *(unsigned int *)(v21 + 8);
  if (*((_WORD *)v382 + 9)) {
    llvm::Function::BuildLazyArguments(v382);
  }
  if ((int)v22 >= 1)
  {
    uint64_t v23 = *((void *)v382 + 11);
    uint64_t v24 = v21;
    do
    {
      uint64_t v25 = *(void *)(v24 - 8 * *(unsigned int *)(v21 + 8));
      DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(v399);
      llvm::DataLayout::DataLayout((llvm::DataLayout *)&__p, DataLayout);
      MTLArgumentData::MTLArgumentData((MTLArgumentData *)v455);
      long long v422 = 0uLL;
      LODWORD(v423) = 0;
      parseArgumentMetadata((uint64_t)v455, v25, v23, 0, (uint64_t)&__p, 0, (uint64_t *)&v422, 7);
      if (!a3 || (~LODWORD(v455[0]) & 0xA) != 0)
      {
        v23 += 40;
        char v27 = 1;
      }
      else
      {
        MTLCompilerErrorObject::setErrorMessage(*a1, "Vertex function requires input attributes but vertex descriptor has none");
        char v27 = 0;
      }
      llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&v422);
      *(void *)&long long v422 = v463;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v422);
      if (v462) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v462);
      }
      if (v461) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v461);
      }
      if (v460) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v460);
      }
      MEMORY[0x25A28CD60](&__p);
      if ((v27 & 1) == 0) {
        return 0;
      }
      v24 += 8;
      --v22;
    }
    while (v22);
  }
  int v19 = v389;
  if (v373)
  {
LABEL_34:
    int v390 = v19;
    v385 = v18;
    if (v381)
    {
      int v28 = 0;
      uint64_t v29 = v381;
      uint64_t v30 = v400;
      do
      {
        int v31 = *v30;
        v30 += 2;
        int v32 = v31 & 0x1F;
        if (v32 > v28) {
          int v28 = v32;
        }
        --v29;
      }
      while (v29);
    }
    else
    {
      int v28 = 0;
    }
    LODWORD(__p) = 0;
    std::vector<int>::vector(&v454, (v28 + 1), (const std::vector<int>::value_type *)&__p);
    std::vector<int>::pointer begin = v454.__begin_;
    memset(v454.__begin_, 255, 4 * v28 + 4);
    if (v381)
    {
      uint64_t v34 = 0;
      size_t v35 = v381;
      uint64_t v36 = v400;
      unsigned int v37 = v390;
      do
      {
        int v38 = *v36;
        v36 += 2;
        begin[v38 & 0x1F] = v34++;
      }
      while (v381 != v34);
    }
    else
    {
      size_t v35 = 0;
      unsigned int v37 = v390;
    }
    LOBYTE(__p) = 0;
    std::vector<unsigned char>::vector(v453, v35, &__p);
    LOBYTE(__p) = 0;
    std::vector<unsigned char>::vector(v452, v35, &__p);
    LODWORD(__p) = 0;
    size_t v406 = v35;
    std::vector<int>::vector(&v451, v35, (const std::vector<int>::value_type *)&__p);
    if (v381) {
      memset(v451.__begin_, 255, 4 * v35);
    }
    std::vector<llvm::MDNode *>::vector(v450, v35);
    std::vector<llvm::Type *>::vector(v449, v35);
    LODWORD(__p) = 0;
    std::vector<unsigned int>::vector(&v448, v35, (const std::vector<unsigned int>::value_type *)&__p);
    memset(v447, 0, sizeof(v447));
    std::vector<BOOL>::reserve((char **)v447, *((void *)v382 + 12));
    v445 = 0;
    v444 = 0;
    v446 = 0;
    v442 = 0;
    v441 = 0;
    unint64_t v443 = 0;
    v439 = 0;
    v438 = 0;
    unint64_t v440 = 0;
    unsigned int v370 = (a3 ^ 1) & (a11 >> 7);
    if (v370 == 1) {
      unint64_t v39 = *((void *)v382 + 12);
    }
    else {
      unint64_t v39 = v37;
    }
    std::vector<llvm::Metadata *>::reserve(&v441, v39);
    std::vector<llvm::Metadata *>::reserve(&v438, (uint64_t)(v443 - (void)v441) >> 3);
    v436 = 0;
    v435 = 0;
    unint64_t v40 = v37;
    unint64_t v437 = 0;
    std::vector<llvm::Metadata *>::reserve(&v435, v37);
    unsigned int v388 = v28;
    if (v381)
    {
      uint64_t v41 = 0;
      int v42 = -1;
      int v43 = (unsigned int *)v400;
      unsigned int v44 = -1;
      do
      {
        unsigned int v45 = *v43;
        v43 += 2;
        unsigned int v46 = v45 >> 10;
        if (v45 >> 10 == 43) {
          int v47 = v41;
        }
        else {
          int v47 = v42;
        }
        if (v46 == 44) {
          unsigned int v44 = v41;
        }
        else {
          int v42 = v47;
        }
        ++v41;
      }
      while (v35 != v41);
    }
    else
    {
      unsigned int v44 = -1;
      int v42 = -1;
    }
    v433 = 0;
    v432 = 0;
    unint64_t v434 = 0;
    std::vector<llvm::Metadata *>::reserve(&v432, 0xAuLL);
    LOBYTE(__p) = -1;
    std::vector<signed char>::vector(v431, 0xAuLL, &__p);
    unsigned int v372 = v42;
    std::vector<unsigned int>::vector(&v430, *((void *)v382 + 12));
    MTLFrameworkPass::getArgumentMetadataIndices(*(void *)(v377 - 8 * *(unsigned int *)(v377 + 8) + 16), (uint64_t)&v430);
    uint64_t v391 = *(void *)(v377 - 8 * *(unsigned int *)(v377 + 8) + 16);
    uint64_t v48 = *((void *)v382 + 12);
    if (*((_WORD *)v382 + 9)) {
      llvm::Function::BuildLazyArguments(v382);
    }
    unsigned int v380 = v44;
    std::vector<int>::size_type __n = v37;
    if ((int)v48 >= 1)
    {
      v386 = 0;
      uint64_t v49 = 0;
      v396 = 0;
      uint64_t v50 = 0;
      int v375 = 0;
      char v397 = 0;
      uint64_t v393 = 0;
      uint64_t v394 = v48;
      uint64_t v383 = *((void *)v382 + 3);
      uint64_t v51 = (llvm::Type *)*((void *)v382 + 11);
      uint64_t v364 = v44;
      unsigned int v52 = (a11 >> 7) & 1;
      if (!a4) {
        unsigned int v52 = 0;
      }
      unsigned int v368 = v52;
      while (1)
      {
        uint64_t v53 = v430.__begin_[v50];
        v405 = v51;
        uint64_t v395 = v50 + 1;
        if (v53 == -1)
        {
          char v59 = 0;
          int v58 = 0;
          LOBYTE(v56) = 0;
          LODWORD(v57) = -1;
          char v60 = 11;
          goto LABEL_288;
        }
        uint64_t v54 = *(void *)(*(void *)(v383 + 16) + 8 * (v50 + 1));
        uint64_t v401 = *(void *)(v391 - 8 * *(unsigned int *)(v391 + 8) + 8 * v53);
        uint64_t v55 = (const llvm::DataLayout *)llvm::Module::getDataLayout(v399);
        llvm::DataLayout::DataLayout((llvm::DataLayout *)&__p, v55);
        MTLArgumentData::MTLArgumentData((MTLArgumentData *)v455);
        long long v416 = 0uLL;
        LODWORD(v417) = 0;
        parseArgumentMetadata((uint64_t)v455, v401, (uint64_t)v51, 0, (uint64_t)&__p, 0, (uint64_t *)&v416, 7);
        int v56 = (LODWORD(v455[0]) >> 3) & 1;
        if (v459 && a10)
        {
          if (v56)
          {
            int v63 = *(_DWORD *)(v459 + 8);
            int v392 = v50;
            uint64_t v398 = (v63 - isPatchControlPointInputUnused(v459));
            if (v398 >= 3)
            {
              for (uint64_t i = 2; i != v398; ++i)
              {
                uint64_t v65 = *(void *)(v459 - 8 * *(unsigned int *)(v459 + 8) + 8 * i);
                unsigned int v66 = *(_DWORD *)(v65 + 8);
                if (v66)
                {
                  int v67 = 0;
                  int v68 = 0;
                  unsigned int v69 = 0;
                  unsigned int v70 = 0;
                  unsigned int v71 = 0;
                  v403 = 0;
                  uint64_t v72 = 0;
                  do
                  {
                    uint64_t v73 = *(llvm::MDString **)(v65 - 8 * *(unsigned int *)(v65 + 8) + 8 * v71);
                    if (v73 && !*(unsigned char *)v73)
                    {
                      uint64_t String = (void *)llvm::MDString::getString(v73);
                      if (v75 == 18)
                      {
                        if (!memcmp(String, "air.location_index", 0x12uLL))
                        {
                          MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v422);
                          parseControlPointInputMetadata(v65, (uint64_t)&v422);
                          unsigned int v79 = v422;
                          unsigned int v70 = DWORD1(v422);
                          v403 = v424;
                          uint64_t v72 = v425;
                          *(void *)&long long v410 = &v429;
                          std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v410);
                          if (v428) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v428);
                          }
                          if (v427) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v427);
                          }
                          if (v426) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v426);
                          }
                          int v67 = (v79 >> 3) & 1;
                          int v68 = 1;
                          unsigned int v69 = i - 3;
                        }
                      }
                      else if (v75 == 32)
                      {
                        BOOL v76 = *String == 0x637461702E726961 && String[1] == 0x6F72746E6F635F68;
                        BOOL v77 = v76 && String[2] == 0x5F746E696F705F6CLL;
                        if (v77 && String[3] == 0x6E6F6974636E7566) {
                          uint64_t v393 = **(void **)(*(void *)(*(void *)(*(void *)(v65
                        }
                                                                                 - 8 * *(unsigned int *)(v65 + 8)
                                                                                 + 8 * ++v71)
                                                                     + 128)
                                                         + 24)
                                             + 16);
                      }
                    }
                    ++v71;
                  }
                  while (v71 < v66);
                  if (v67 & v68)
                  {
                    unsigned int v37 = v390;
                    if (v70 > v388 || (uint64_t v80 = v454.__begin_[v70], (v80 & 0x80000000) != 0))
                    {
                      MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "Vertex attribute %d is not defined in the vertex descriptor.", v70);
                      LODWORD(v57) = 0;
                      int v58 = 0;
                      char v108 = 0;
                      char v59 = 1;
                      char v60 = 11;
                      LOBYTE(v56) = 1;
                      char v397 = 1;
                      unsigned int v44 = v380;
                      goto LABEL_281;
                    }
                    *((unsigned char *)v453[0] + v80) = 1;
                    if (v72) {
                      BOOL v81 = *v403 != 117;
                    }
                    else {
                      BOOL v81 = 0;
                    }
                    *((unsigned char *)v452[0] + v80) = v81;
                    v451.__begin_[v80] = v392;
                    *((void *)v450[0] + v80) = v401;
                    *((void *)v449[0] + v80) = *(void *)(*(void *)(v393 + 16) + 8 * v69);
                    v448.__begin_[v80] = v69;
                    unsigned int v44 = v380;
                  }
                  else
                  {
                    unsigned int v44 = v380;
                    unsigned int v37 = v390;
                  }
                }
              }
            }
            LODWORD(v57) = 0;
            int v58 = 0;
            char v59 = 1;
            char v60 = 11;
            LOBYTE(v56) = 1;
            char v397 = 1;
            goto LABEL_280;
          }
          LODWORD(v57) = 0;
          int v58 = 0;
          goto LABEL_279;
        }
        if (v459) {
          int v61 = 1;
        }
        else {
          int v61 = (LODWORD(v455[0]) >> 13) & 1;
        }
        if ((v455[0] & 2) == 0) {
          int v61 = 1;
        }
        if (v61 != 1 || ((LODWORD(v455[0]) >> 13) & 1 & a9) != 0)
        {
          LODWORD(v57) = DWORD1(v455[0]);
          int v58 = DWORD2(v455[0]);
          unsigned int v62 = v368;
          if (!v56) {
            unsigned int v62 = 0;
          }
          if (v62 == 1)
          {
            if (DWORD1(v455[0]) <= v388 && v454.__begin_[DWORD1(v455[0])] != -1)
            {
              if (v370)
              {
                LOBYTE(v56) = 1;
                goto LABEL_138;
              }
LABEL_141:
              if (DWORD1(v455[0]) > v388
                || (uint64_t v88 = v454.__begin_[DWORD1(v455[0])], (v88 & 0x80000000) != 0))
              {
                MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "Vertex attribute %d is not defined in the vertex descriptor.", DWORD1(v455[0]));
                char v108 = 0;
                char v59 = 1;
                char v60 = 11;
                LOBYTE(v56) = 1;
                goto LABEL_281;
              }
              *((unsigned char *)v453[0] + v88) = 1;
              char v89 = BYTE8(v456);
              if (*((void *)&v456 + 1)) {
                char v89 = *(unsigned char *)v456 != 117;
              }
              *((unsigned char *)v452[0] + v88) = v89;
              v451.__begin_[v88] = v50;
              *((void *)v450[0] + v88) = v401;
              *((void *)v449[0] + v88) = *(void *)v51;
              char v59 = 1;
              char v60 = 11;
              LOBYTE(v56) = 1;
LABEL_280:
              char v108 = 1;
              goto LABEL_281;
            }
            int v56 = 0;
          }
          if (v370)
          {
LABEL_138:
            char v404 = v56;
            unint64_t v85 = (unint64_t)((unsigned char *)v442 - (unsigned char *)v441) >> 3;
            uint64_t v86 = v445;
            if (v445 >= v446)
            {
              uint64_t v90 = (char *)v444;
              uint64_t v91 = (v445 - (unsigned char *)v444) >> 2;
              unint64_t v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v93 = v446 - (unsigned char *)v444;
              if ((v446 - (unsigned char *)v444) >> 1 > v92) {
                unint64_t v92 = v93 >> 1;
              }
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v92;
              }
              if (v94)
              {
                unint64_t v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v446, v94);
                uint64_t v86 = v445;
                uint64_t v90 = (char *)v444;
              }
              else
              {
                unint64_t v95 = 0;
              }
              uint64_t v136 = &v95[4 * v91];
              *(_DWORD *)uint64_t v136 = v85;
              uint64_t v87 = v136 + 4;
              while (v86 != v90)
              {
                int v137 = *((_DWORD *)v86 - 1);
                v86 -= 4;
                *((_DWORD *)v136 - 1) = v137;
                v136 -= 4;
              }
              v444 = v136;
              v445 = v87;
              v446 = &v95[4 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *(_DWORD *)v445 = v85;
              uint64_t v87 = v86 + 4;
            }
            v445 = v87;
            unint64_t v138 = (char *)v442;
            if ((unint64_t)v442 >= v443)
            {
              int64_t v140 = ((unsigned char *)v442 - (unsigned char *)v441) >> 3;
              if ((unint64_t)(v140 + 1) >> 61) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v141 = (uint64_t)(v443 - (void)v441) >> 2;
              if (v141 <= v140 + 1) {
                unint64_t v141 = v140 + 1;
              }
              if (v443 - (unint64_t)v441 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v142 = v141;
              }
              if (v142) {
                uint64_t v143 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v443, v142);
              }
              else {
                uint64_t v143 = 0;
              }
              uint64_t v144 = &v143[8 * v140];
              *(void *)uint64_t v144 = v54;
              uint64_t v139 = v144 + 8;
              uint64_t v145 = (char *)v442;
              v146 = (char *)v441;
              if (v442 != v441)
              {
                do
                {
                  uint64_t v147 = *((void *)v145 - 1);
                  v145 -= 8;
                  *((void *)v144 - 1) = v147;
                  v144 -= 8;
                }
                while (v145 != v146);
                uint64_t v145 = (char *)v441;
              }
              v441 = v144;
              v442 = v139;
              unint64_t v443 = (unint64_t)&v143[8 * v142];
              if (v145) {
                operator delete(v145);
              }
            }
            else
            {
              *(void *)v442 = v54;
              uint64_t v139 = v138 + 8;
            }
            v442 = v139;
            long long v148 = (char *)v439;
            if ((unint64_t)v439 >= v440)
            {
              int64_t v150 = ((unsigned char *)v439 - (unsigned char *)v438) >> 3;
              if ((unint64_t)(v150 + 1) >> 61) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v151 = (uint64_t)(v440 - (void)v438) >> 2;
              if (v151 <= v150 + 1) {
                unint64_t v151 = v150 + 1;
              }
              if (v440 - (unint64_t)v438 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v152 = v151;
              }
              if (v152) {
                long long v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v440, v152);
              }
              else {
                long long v153 = 0;
              }
              uint64_t v154 = &v153[8 * v150];
              *(void *)uint64_t v154 = 0;
              v149 = v154 + 8;
              unint64_t v155 = (char *)v439;
              unint64_t v156 = (char *)v438;
              if (v439 != v438)
              {
                do
                {
                  uint64_t v157 = *((void *)v155 - 1);
                  v155 -= 8;
                  *((void *)v154 - 1) = v157;
                  v154 -= 8;
                }
                while (v155 != v156);
                unint64_t v155 = (char *)v438;
              }
              v438 = v154;
              v439 = v149;
              unint64_t v440 = (unint64_t)&v153[8 * v152];
              if (v155) {
                operator delete(v155);
              }
            }
            else
            {
              *(void *)v439 = 0;
              v149 = v148 + 8;
            }
            v439 = v149;
            int v158 = *(_DWORD *)(v401 + 8);
            std::vector<llvm::Metadata *>::vector(&v422, v158);
            llvm::Type::getInt32Ty(v407, v159);
            llvm::ConstantInt::get();
            *(void *)long long v422 = llvm::ValueAsMetadata::get();
            if (v158 >= 2)
            {
              uint64_t v160 = v401 - 8 * *(unsigned int *)(v401 + 8);
              uint64_t v161 = 8;
              do
              {
                *(void *)(v422 + v161) = *(void *)(v160 + v161);
                v161 += 8;
              }
              while (8 * v158 != v161);
            }
            uint64_t Impl = llvm::MDTuple::getImpl();
            LOBYTE(v56) = v404;
            uint64_t v163 = Impl;
            uint64_t v164 = (char *)v436;
            if ((unint64_t)v436 >= v437)
            {
              int64_t v166 = ((unsigned char *)v436 - (unsigned char *)v435) >> 3;
              if ((unint64_t)(v166 + 1) >> 61) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v167 = (uint64_t)(v437 - (void)v435) >> 2;
              if (v167 <= v166 + 1) {
                unint64_t v167 = v166 + 1;
              }
              if (v437 - (unint64_t)v435 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v168 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v168 = v167;
              }
              if (v168) {
                long long v169 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v437, v168);
              }
              else {
                long long v169 = 0;
              }
              long long v170 = (uint64_t *)&v169[8 * v166];
              *long long v170 = v163;
              uint64_t v165 = v170 + 1;
              uint64_t v171 = (char *)v436;
              long long v172 = (char *)v435;
              if (v436 != v435)
              {
                do
                {
                  uint64_t v173 = *((void *)v171 - 1);
                  v171 -= 8;
                  *--long long v170 = v173;
                }
                while (v171 != v172);
                uint64_t v171 = (char *)v435;
              }
              v435 = v170;
              v436 = v165;
              unint64_t v437 = (unint64_t)&v169[8 * v168];
              if (v171) {
                operator delete(v171);
              }
            }
            else
            {
              *(void *)v436 = Impl;
              uint64_t v165 = v164 + 8;
            }
            v436 = v165;
            if ((void)v422)
            {
              *((void *)&v422 + 1) = v422;
              operator delete((void *)v422);
            }
            ++v375;
          }
          else if (v56)
          {
            goto LABEL_141;
          }
LABEL_279:
          char v59 = 1;
          char v60 = 11;
          goto LABEL_280;
        }
        if ((v455[0] & 4) == 0) {
          break;
        }
        LOWORD(v422) = 11;
        DWORD1(v422) = 0;
        vertexFetchBuiltInInfo((uint64_t)&v422, (uint64_t)v455);
        char v60 = v422;
        if (!(_BYTE)v422 && (v372 & 0x80000000) == 0)
        {
          *((unsigned char *)v453[0] + v372) = 1;
          char v82 = BYTE8(v456);
          if (*((void *)&v456 + 1)) {
            char v82 = *(unsigned char *)v456 != 117;
          }
          char v83 = v452[0];
          uint64_t v84 = v372;
          goto LABEL_159;
        }
        if (v422 == 1 && (v44 & 0x80000000) == 0)
        {
          *((unsigned char *)v453[0] + v364) = 1;
          char v82 = BYTE8(v456);
          if (*((void *)&v456 + 1)) {
            char v82 = *(unsigned char *)v456 != 117;
          }
          char v83 = v452[0];
          uint64_t v84 = v364;
LABEL_159:
          v83[v84] = v82;
          v451.__begin_[v84] = v50;
          *((void *)v450[0] + v84) = v401;
          *((void *)v449[0] + v84) = *(void *)v405;
LABEL_160:
          int v96 = *(_DWORD *)(v401 + 8);
          std::vector<llvm::Metadata *>::vector(&v422, v96);
          llvm::Type::getInt32Ty(v407, v97);
          llvm::ConstantInt::get();
          *(void *)long long v422 = llvm::ValueAsMetadata::get();
          if (v96 >= 2)
          {
            uint64_t v98 = v401 - 8 * *(unsigned int *)(v401 + 8);
            uint64_t v99 = 8;
            do
            {
              *(void *)(v422 + v99) = *(void *)(v98 + v99);
              v99 += 8;
            }
            while (8 * v96 != v99);
          }
          uint64_t v100 = llvm::MDTuple::getImpl();
          uint64_t v101 = v100;
          uint64_t v102 = (char *)v436;
          if ((unint64_t)v436 >= v437)
          {
            int64_t v104 = ((unsigned char *)v436 - (unsigned char *)v435) >> 3;
            if ((unint64_t)(v104 + 1) >> 61) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v105 = (uint64_t)(v437 - (void)v435) >> 2;
            if (v105 <= v104 + 1) {
              unint64_t v105 = v104 + 1;
            }
            if (v437 - (unint64_t)v435 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v106 = v105;
            }
            if (v106) {
              int64x2_t v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v437, v106);
            }
            else {
              int64x2_t v107 = 0;
            }
            int v109 = (uint64_t *)&v107[8 * v104];
            uint64_t *v109 = v101;
            uint64_t v103 = v109 + 1;
            uint64_t v110 = (char *)v436;
            int v111 = (char *)v435;
            if (v436 != v435)
            {
              do
              {
                uint64_t v112 = *((void *)v110 - 1);
                v110 -= 8;
                *--int v109 = v112;
              }
              while (v110 != v111);
              uint64_t v110 = (char *)v435;
            }
            v435 = v109;
            v436 = v103;
            unint64_t v437 = (unint64_t)&v107[8 * v106];
            if (v110) {
              operator delete(v110);
            }
          }
          else
          {
            *(void *)v436 = v100;
            uint64_t v103 = v102 + 8;
          }
          v436 = v103;
          if ((void)v422)
          {
            *((void *)&v422 + 1) = v422;
            operator delete((void *)v422);
          }
          uint64_t v113 = *(void *)v405;
          v114 = (char *)v442;
          if ((unint64_t)v442 >= v443)
          {
            int64_t v116 = ((unsigned char *)v442 - (unsigned char *)v441) >> 3;
            if ((unint64_t)(v116 + 1) >> 61) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v117 = (uint64_t)(v443 - (void)v441) >> 2;
            if (v117 <= v116 + 1) {
              unint64_t v117 = v116 + 1;
            }
            if (v443 - (unint64_t)v441 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v118 = v117;
            }
            if (v118) {
              char v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v443, v118);
            }
            else {
              char v119 = 0;
            }
            v120 = &v119[8 * v116];
            *(void *)v120 = v113;
            v115 = v120 + 8;
            v121 = (char *)v442;
            int v122 = (char *)v441;
            if (v442 != v441)
            {
              do
              {
                uint64_t v123 = *((void *)v121 - 1);
                v121 -= 8;
                *((void *)v120 - 1) = v123;
                v120 -= 8;
              }
              while (v121 != v122);
              v121 = (char *)v441;
            }
            v441 = v120;
            v442 = v115;
            unint64_t v443 = (unint64_t)&v119[8 * v118];
            if (v121) {
              operator delete(v121);
            }
          }
          else
          {
            *(void *)v442 = v113;
            v115 = v114 + 8;
          }
          v442 = v115;
          int v124 = (char *)v439;
          if ((unint64_t)v439 >= v440)
          {
            int64_t v126 = ((unsigned char *)v439 - (unsigned char *)v438) >> 3;
            if ((unint64_t)(v126 + 1) >> 61) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v127 = (uint64_t)(v440 - (void)v438) >> 2;
            if (v127 <= v126 + 1) {
              unint64_t v127 = v126 + 1;
            }
            if (v440 - (unint64_t)v438 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v128 = v127;
            }
            if (v128) {
              __int16 v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v440, v128);
            }
            else {
              __int16 v129 = 0;
            }
            v130 = &v129[8 * v126];
            *(void *)v130 = 0;
            uint64_t v125 = v130 + 8;
            __int16 v131 = (char *)v439;
            uint64_t v132 = (char *)v438;
            if (v439 != v438)
            {
              do
              {
                uint64_t v133 = *((void *)v131 - 1);
                v131 -= 8;
                *((void *)v130 - 1) = v133;
                v130 -= 8;
              }
              while (v131 != v132);
              __int16 v131 = (char *)v438;
            }
            v438 = v130;
            v439 = v125;
            unint64_t v440 = (unint64_t)&v129[8 * v128];
            if (v131) {
              operator delete(v131);
            }
          }
          else
          {
            *(void *)v439 = 0;
            uint64_t v125 = v124 + 8;
          }
          char v59 = 0;
          int v58 = 0;
          LODWORD(v57) = v375;
          v439 = v125;
          char v108 = 1;
          ++v375;
          goto LABEL_281;
        }
        if (v422 == 11) {
          goto LABEL_160;
        }
        unint64_t v57 = (unint64_t)((unsigned char *)v433 - (unsigned char *)v432) >> 3;
        *((unsigned char *)v431[0] + (char)v422) = v57;
        unint64_t v134 = (char *)v433;
        if ((unint64_t)v433 >= v434)
        {
          int64_t v183 = ((unsigned char *)v433 - (unsigned char *)v432) >> 3;
          if ((unint64_t)(v183 + 1) >> 61) {
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v184 = (uint64_t)(v434 - (void)v432) >> 2;
          if (v184 <= v183 + 1) {
            unint64_t v184 = v183 + 1;
          }
          if (v434 - (unint64_t)v432 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v185 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v185 = v184;
          }
          if (v185) {
            int v186 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v434, v185);
          }
          else {
            int v186 = 0;
          }
          uint64_t v187 = &v186[8 * v183];
          *(void *)uint64_t v187 = v422;
          uint64_t v135 = v187 + 8;
          unint64_t v188 = (char *)v433;
          uint64_t v189 = (char *)v432;
          if (v433 != v432)
          {
            do
            {
              uint64_t v190 = *((void *)v188 - 1);
              v188 -= 8;
              *((void *)v187 - 1) = v190;
              v187 -= 8;
            }
            while (v188 != v189);
            unint64_t v188 = (char *)v432;
          }
          v432 = v187;
          v433 = v135;
          unint64_t v434 = (unint64_t)&v186[8 * v185];
          if (v188) {
            operator delete(v188);
          }
        }
        else
        {
          *(void *)v433 = v422;
          uint64_t v135 = v134 + 8;
        }
        char v59 = 0;
        int v58 = 0;
        v433 = v135;
        char v108 = 1;
LABEL_281:
        llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&v416);
        *(void *)&long long v422 = v463;
        std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v422);
        if (v462) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v462);
        }
        if (v461) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v461);
        }
        if (v460) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v460);
        }
        MEMORY[0x25A28CD60](&__p);
        if ((v108 & 1) == 0) {
          goto LABEL_456;
        }
LABEL_288:
        LOBYTE(__p) = v56;
        std::vector<BOOL>::push_back((uint64_t)v447, &__p);
        if (v49 >= v396)
        {
          unint64_t v176 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v386) >> 2) + 1;
          if (v176 > 0x1555555555555555) {
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((v396 - v386) >> 2) > v176) {
            unint64_t v176 = 0x5555555555555556 * ((v396 - v386) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v396 - v386) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v177 = 0x1555555555555555;
          }
          else {
            unint64_t v177 = v176;
          }
          if (v177)
          {
            if (v177 > 0x1555555555555555) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v178 = (char *)operator new(12 * v177);
          }
          else
          {
            long long v178 = 0;
          }
          uint64_t v179 = &v178[4 * ((v49 - v386) >> 2)];
          *uint64_t v179 = v59;
          v179[1] = v60;
          *((_DWORD *)v179 + 1) = v57;
          *((_DWORD *)v179 + 2) = v58;
          if (v49 == v386)
          {
            v386 = &v178[4 * ((v49 - v386) >> 2)];
            unint64_t v40 = __n;
            uint64_t v175 = v405;
          }
          else
          {
            unint64_t v180 = &v178[4 * ((v49 - v386) >> 2)];
            unint64_t v40 = __n;
            uint64_t v175 = v405;
            do
            {
              uint64_t v181 = *(void *)(v49 - 12);
              v49 -= 12;
              int v182 = *((_DWORD *)v49 + 2);
              *(void *)(v180 - 12) = v181;
              v180 -= 12;
              *((_DWORD *)v180 + 2) = v182;
            }
            while (v49 != v386);
            uint64_t v49 = v386;
            v386 = v180;
          }
          v396 = &v178[12 * v177];
          long long v174 = v179 + 12;
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          char *v49 = v59;
          v49[1] = v60;
          long long v174 = v49 + 12;
          *((_DWORD *)v49 + 1) = v57;
          *((_DWORD *)v49 + 2) = v58;
          unint64_t v40 = __n;
          uint64_t v175 = v405;
        }
        uint64_t v51 = (llvm::Type *)((char *)v175 + 40);
        uint64_t v49 = v174;
        uint64_t v50 = v395;
        if (v395 == v394) {
          goto LABEL_325;
        }
      }
      char v60 = 11;
      goto LABEL_160;
    }
    v386 = 0;
    char v397 = 0;
LABEL_325:
    int v384 = a11 & 0x20000;
    int v191 = 0;
    if (v37)
    {
      uint64_t v192 = v385 + 8;
      unint64_t v193 = v40;
      while (v384 || *v192 == -1 || (*v192 & 3) == 0)
      {
        if ((*(_DWORD *)(v192 - 1) & 0x1F) > v191) {
          int v191 = *(_DWORD *)(v192 - 1) & 0x1F;
        }
        v192 += 2;
        if (!--v193) {
          goto LABEL_336;
        }
      }
      MTLCompilerErrorObject::setErrorMessage(*a1, "Buffer stride is not a multiple of 4 bytes.");
LABEL_456:
      v399 = 0;
      goto LABEL_603;
    }
LABEL_336:
    LODWORD(__p) = 0;
    std::vector<int>::vector(&v421, (v191 + 1), (const std::vector<int>::value_type *)&__p);
    std::vector<int>::pointer v195 = v421.__begin_;
    memset(v421.__begin_, 255, 4 * v191 + 4);
    if (v37)
    {
      uint64_t v196 = 0;
      unint64_t v197 = (int *)v385;
      do
      {
        int v198 = *v197;
        v197 += 4;
        v195[v198 & 0x1F] = v196++;
      }
      while (v40 != v196);
    }
    memset(v420, 0, sizeof(v420));
    std::vector<std::vector<unsigned int>>::resize(v420, v40);
    if (v381)
    {
      uint64_t v199 = 0;
      v200 = "Attribute %d incompatible with MTLStepFunctionPerVertex.";
      do
      {
        if (*((unsigned char *)v453[0] + v199))
        {
          v201 = &v400[2 * v199];
          unint64_t v202 = ((unint64_t)*v201 >> 5) & 0x1F;
          if ((int)v202 > v191 || v421.__begin_[v202] == -1)
          {
            MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "Attribute %d refers to a buffer index %d that is not valid.", *v201 & 0x1F, v202);
            goto LABEL_601;
          }
          v203 = (void *)llvm::MDString::getString(*(llvm::MDString **)(*((void *)v450[0] + v199)
                                                                        - 8
                                                                        * *(unsigned int *)(*((void *)v450[0] + v199)
                                                                                          + 8)
                                                                        + 8));
          unint64_t v205 = *v201;
          uint64_t v206 = v421.__begin_[(v205 >> 5) & 0x1F];
          size_t v207 = v204;
          switch(*(_DWORD *)&v385[16 * v206] >> 5)
          {
            case 0:
            case 2:
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_345;
            case 1:
              if (v204 == 13)
              {
                uint64_t v216 = "air.vertex_id";
LABEL_383:
                if (memcmp(v203, v216, v207)) {
                  goto LABEL_600;
                }
                goto LABEL_345;
              }
              if (v204 == 15)
              {
                uint64_t v216 = "air.instance_id";
                goto LABEL_383;
              }
              if (v204 != 16) {
                goto LABEL_600;
              }
              if (*v203 != 0x747265762E726961 || v203[1] != 0x7475706E695F7865) {
                goto LABEL_600;
              }
LABEL_345:
              v208 = (std::vector<unsigned int> *)(v420[0] + 24 * (int)v206);
              v209.__i_ = v208->__begin_;
              end = v208->__end_;
              if (v208->__begin_ != end)
              {
                while (v400[2 * v199 + 1] > v400[2 * *v209.__i_ + 1])
                {
                  if (++v209.__i_ == end)
                  {
                    v209.__i_ = v208->__end_;
                    break;
                  }
                }
              }
              LODWORD(__p) = v199;
              std::vector<unsigned int>::insert(v208, v209, (std::vector<unsigned int>::value_type *)&__p);
              break;
            case 3:
              if (v204 == 29)
              {
                if (memcmp(v203, "air.patch_control_point_input", 0x1DuLL)) {
                  goto LABEL_599;
                }
              }
              else if (v204 != 15 {
                     || (*v203 == 0x637461702E726961
              }
                       ? (BOOL v211 = *(void *)((char *)v203 + 7) == 0x7475706E695F6863)
                       : (BOOL v211 = 0),
                         !v211))
              {
LABEL_599:
                v200 = "Attribute %d incompatible with MTLStepFunctionPerPatch.";
LABEL_600:
                MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, v200, v207, v205 & 0x1F);
LABEL_601:
                v399 = 0;
                *(void *)&long long __p = v420;
                std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                if (v421.__begin_)
                {
                  v421.__end_ = v421.__begin_;
                  operator delete(v421.__begin_);
                }
LABEL_603:
                if (v430.__begin_)
                {
                  v430.__end_ = v430.__begin_;
                  operator delete(v430.__begin_);
                }
                if (v431[0])
                {
                  v431[1] = v431[0];
                  operator delete(v431[0]);
                }
                if (v432)
                {
                  v433 = v432;
                  operator delete(v432);
                }
                if (v435)
                {
                  v436 = v435;
                  operator delete(v435);
                }
                if (v438)
                {
                  v439 = v438;
                  operator delete(v438);
                }
                if (v441)
                {
                  v442 = v441;
                  operator delete(v441);
                }
                if (v444)
                {
                  v445 = (char *)v444;
                  operator delete(v444);
                }
                if (v386) {
                  operator delete(v386);
                }
                if (v447[0]) {
                  operator delete(v447[0]);
                }
                if (v448.__begin_)
                {
                  v448.__end_ = v448.__begin_;
                  operator delete(v448.__begin_);
                }
                if (v449[0])
                {
                  v449[1] = v449[0];
                  operator delete(v449[0]);
                }
                if (v450[0])
                {
                  v450[1] = v450[0];
                  operator delete(v450[0]);
                }
                if (v451.__begin_)
                {
                  v451.__end_ = v451.__begin_;
                  operator delete(v451.__begin_);
                }
                if (v452[0])
                {
                  v452[1] = v452[0];
                  operator delete(v452[0]);
                }
                if (v453[0])
                {
                  v453[1] = v453[0];
                  operator delete(v453[0]);
                }
                if (v454.__begin_)
                {
                  v454.__end_ = v454.__begin_;
                  operator delete(v454.__begin_);
                }
                return v399;
              }
              goto LABEL_345;
            case 4:
              if (v204 == 29)
              {
                BOOL v213 = *v203 == 0x637461702E726961 && v203[1] == 0x6F72746E6F635F68;
                BOOL v214 = v213 && v203[2] == 0x5F746E696F705F6CLL;
                if (v214 && *(void *)((char *)v203 + 21) == 0x7475706E695F746ELL) {
                  goto LABEL_345;
                }
              }
              MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "Attribute %d incompatible with MTLStepFunctionPerPatchControlPoint.", v204);
              goto LABEL_601;
            default:
              abort();
          }
        }
        ++v199;
      }
      while (v199 != v406);
    }
    LODWORD(__p) = 0;
    std::vector<int>::vector(&v419, __n, (const std::vector<int>::value_type *)&__p);
    long long v416 = 0u;
    long long v417 = 0u;
    int v418 = 1065353216;
    LOBYTE(__p) = 0;
    std::vector<unsigned char>::vector(&v415, 0xAuLL, &__p);
    __int16 v414 = 0;
    char v413 = 0;
    long long v410 = 0u;
    long long v411 = 0u;
    int v412 = 1065353216;
    if (v390)
    {
      uint64_t v218 = 0;
      do
      {
        if (*(void *)(v420[0] + 24 * v218 + 8) == *(void *)(v420[0] + 24 * v218))
        {
          v419.__begin_[v218] = -1;
        }
        else
        {
          int v219 = &v385[16 * v218];
          uint64_t v221 = *((void *)v219 + 1);
          v220 = (uint64_t *)(v219 + 8);
          if (v221 == -1)
          {
            if (v384) {
              Int8Ty = (llvm::ArrayType *)llvm::Type::getInt8Ty(v407, v217);
            }
            else {
              Int8Ty = (llvm::ArrayType *)llvm::Type::getFloatTy(v407, v217);
            }
            uint64_t v223 = 1;
          }
          else if (v384)
          {
            Int8Ty = (llvm::ArrayType *)llvm::Type::getInt8Ty(v407, v217);
            uint64_t v223 = *v220;
          }
          else
          {
            Int8Ty = (llvm::ArrayType *)llvm::Type::getFloatTy(v407, v217);
            uint64_t v223 = (unint64_t)*v220 >> 2;
          }
          uint64_t v224 = llvm::ArrayType::get(Int8Ty, (llvm::Type *)v223);
          v225 = operator new(8uLL);
          void *v225 = v224;
          uint64_t v226 = llvm::StructType::get();
          uint64_t v227 = llvm::PointerType::get();
          unint64_t v228 = (unint64_t)((unsigned char *)v442 - (unsigned char *)v441) >> 3;
          v419.__begin_[v218] = v228;
          LODWORD(__p) = v228;
          std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)&v416, (unsigned int *)&__p, &__p);
          v229 = (char *)v442;
          if ((unint64_t)v442 >= v443)
          {
            int64_t v231 = ((unsigned char *)v442 - (unsigned char *)v441) >> 3;
            if ((unint64_t)(v231 + 1) >> 61) {
              goto LABEL_638;
            }
            unint64_t v232 = (uint64_t)(v443 - (void)v441) >> 2;
            if (v232 <= v231 + 1) {
              unint64_t v232 = v231 + 1;
            }
            if (v443 - (unint64_t)v441 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v233 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v233 = v232;
            }
            if (v233) {
              v234 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v443, v233);
            }
            else {
              v234 = 0;
            }
            uint64_t v235 = (uint64_t *)&v234[8 * v231];
            *uint64_t v235 = v227;
            uint64_t v230 = v235 + 1;
            uint64_t v236 = (char *)v442;
            uint64_t v237 = (char *)v441;
            if (v442 != v441)
            {
              do
              {
                uint64_t v238 = *((void *)v236 - 1);
                v236 -= 8;
                *--uint64_t v235 = v238;
              }
              while (v236 != v237);
              uint64_t v236 = (char *)v441;
            }
            v441 = v235;
            v442 = v230;
            unint64_t v443 = (unint64_t)&v234[8 * v233];
            if (v236) {
              operator delete(v236);
            }
          }
          else
          {
            *(void *)v442 = v227;
            uint64_t v230 = v229 + 8;
          }
          v442 = v230;
          v239 = (char *)v439;
          if ((unint64_t)v439 >= v440)
          {
            int64_t v241 = ((unsigned char *)v439 - (unsigned char *)v438) >> 3;
            if ((unint64_t)(v241 + 1) >> 61) {
LABEL_638:
            }
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            unint64_t v242 = (uint64_t)(v440 - (void)v438) >> 2;
            if (v242 <= v241 + 1) {
              unint64_t v242 = v241 + 1;
            }
            if (v440 - (unint64_t)v438 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v243 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v243 = v242;
            }
            if (v243) {
              v244 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v440, v243);
            }
            else {
              v244 = 0;
            }
            v245 = (uint64_t *)&v244[8 * v241];
            uint64_t *v245 = v226;
            v240 = v245 + 1;
            v246 = (char *)v439;
            uint64_t v247 = (char *)v438;
            if (v439 != v438)
            {
              do
              {
                uint64_t v248 = *((void *)v246 - 1);
                v246 -= 8;
                *--v245 = v248;
              }
              while (v246 != v247);
              v246 = (char *)v438;
            }
            v438 = v245;
            v439 = v240;
            unint64_t v440 = (unint64_t)&v244[8 * v243];
            if (v246) {
              operator delete(v246);
            }
          }
          else
          {
            *(void *)v439 = v226;
            v240 = v239 + 8;
          }
          v439 = v240;
          getRequiredBuiltIns((uint64_t)&v415, &v413, *(_DWORD *)&v385[16 * v218] >> 5, *(_DWORD *)&v385[16 * v218 + 4], (BOOL *)&v414 + 1, &v414, a8);
          MTLFrameworkPass::appendBufferMetadata(v407, (uint64_t **)&v435);
          operator delete(v225);
        }
        ++v218;
      }
      while (v218 != __n);
    }
    *(void *)&long long v249 = -1;
    *((void *)&v249 + 1) = -1;
    long long v457 = v249;
    long long v458 = v249;
    v455[1] = v249;
    long long v456 = v249;
    v455[0] = v249;
    uint64_t Int32Ty = llvm::Type::getInt32Ty(v407, v217);
    llvm::Type::getInt64Ty(v407, v250);
    MTLFrameworkPass::addRequiredBuiltInsToBuiltInList((char **)&v432, v431, (uint64_t *)&v415);
    size_t v253 = (char *)v432;
    v254 = (char *)v433;
    if (v432 != v433)
    {
      do
      {
        uint64_t LLVMVectorType = MTLFrameworkPass::getLLVMVectorType(v407, (llvm::LLVMContext *)*((unsigned int *)v253 + 1), v253[1]);
        uint64_t v256 = MTLFrameworkPass::addBuiltInParameter(v407, (unint64_t)MTLFrameworkPass::vertexFetchbuiltInAIRString[*v253], (char **)&v441, &v435, LLVMVectorType, *((_DWORD *)v253 + 1), v253[1]);
        v257 = (char *)v439;
        int64_t v258 = ((unsigned char *)v439 - (unsigned char *)v438) >> 3;
        if (v258 != ((unsigned char *)v442 - (unsigned char *)v441) >> 3)
        {
          if ((unint64_t)v439 >= v440)
          {
            if ((unint64_t)(v258 + 1) >> 61) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v260 = (uint64_t)(v440 - (void)v438) >> 2;
            if (v260 <= v258 + 1) {
              unint64_t v260 = v258 + 1;
            }
            if (v440 - (unint64_t)v438 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v261 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v261 = v260;
            }
            if (v261) {
              v262 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v440, v261);
            }
            else {
              v262 = 0;
            }
            v263 = (uint64_t *)&v262[8 * v258];
            uint64_t *v263 = LLVMVectorType;
            long long v259 = v263 + 1;
            __int16 v264 = (char *)v439;
            double v265 = (char *)v438;
            if (v439 != v438)
            {
              do
              {
                uint64_t v266 = *((void *)v264 - 1);
                v264 -= 8;
                *--v263 = v266;
              }
              while (v264 != v265);
              __int16 v264 = (char *)v438;
            }
            v438 = v263;
            v439 = v259;
            unint64_t v440 = (unint64_t)&v262[8 * v261];
            if (v264) {
              operator delete(v264);
            }
          }
          else
          {
            *(void *)v439 = LLVMVectorType;
            long long v259 = v257 + 8;
          }
          v439 = v259;
        }
        *((void *)v455 + *v253) = v256;
        LODWORD(__p) = v256;
        uint64_t v251 = (uint64_t)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)&v416, (unsigned int *)&__p, &__p);
        v253 += 8;
      }
      while (v253 != v254);
    }
    if (HIBYTE(v414))
    {
      int v267 = v390;
      uint64_t v268 = Int32Ty;
      if (a8 == 2)
      {
        uint64_t Int32PtrTy = llvm::Type::getInt32PtrTy(v407, (llvm::LLVMContext *)1);
        int v272 = 33;
        uint64_t Int16Ty = Int32Ty;
      }
      else
      {
        if (a8 != 1) {
          abort();
        }
        uint64_t Int32PtrTy = llvm::Type::getInt16PtrTy(v407, (llvm::LLVMContext *)1);
        uint64_t Int16Ty = llvm::Type::getInt16Ty(v407, v270);
        int v272 = 41;
      }
      int v273 = MTLFrameworkPass::addBuiltInParameter(v407, (unint64_t)"air.control_point_index_buffer", (char **)&v441, &v435, Int32PtrTy, v272, 1);
      v274 = (char *)v439;
      int64_t v275 = ((unsigned char *)v439 - (unsigned char *)v438) >> 3;
      if (v275 != ((unsigned char *)v442 - (unsigned char *)v441) >> 3)
      {
        if ((unint64_t)v439 >= v440)
        {
          if ((unint64_t)(v275 + 1) >> 61) {
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v277 = (uint64_t)(v440 - (void)v438) >> 2;
          if (v277 <= v275 + 1) {
            unint64_t v277 = v275 + 1;
          }
          if (v440 - (unint64_t)v438 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v278 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v278 = v277;
          }
          if (v278) {
            v279 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v440, v278);
          }
          else {
            v279 = 0;
          }
          v280 = (uint64_t *)&v279[8 * v275];
          v281 = &v279[8 * v278];
          uint64_t *v280 = Int16Ty;
          v276 = v280 + 1;
          v282 = (char *)v439;
          v283 = (char *)v438;
          if (v439 != v438)
          {
            do
            {
              uint64_t v284 = *((void *)v282 - 1);
              v282 -= 8;
              *--v280 = v284;
            }
            while (v282 != v283);
            v282 = (char *)v438;
          }
          v438 = v280;
          v439 = v276;
          unint64_t v440 = (unint64_t)v281;
          if (v282) {
            operator delete(v282);
          }
        }
        else
        {
          *(void *)v439 = Int16Ty;
          v276 = v274 + 8;
        }
        v439 = v276;
      }
      LODWORD(__p) = v273;
      uint64_t v251 = (uint64_t)std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)&v416, (unsigned int *)&__p, &__p);
    }
    else
    {
      int v267 = v390;
      uint64_t v268 = Int32Ty;
    }
    if (!v413)
    {
LABEL_516:
      if (v267)
      {
        uint64_t v310 = 0;
        do
        {
          v311 = &v385[16 * v310];
          if (*((void *)v311 + 1) == -1)
          {
            v312 = v442;
            v313 = v441;
            *(void *)&long long __p = *(_DWORD *)v311 & 0x1F;
            *(void *)&long long v422 = &__p;
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v410, (unint64_t *)&__p, (uint64_t)&std::piecewise_construct, (void **)&v422)[3] = (v312 - v313) >> 3;
            uint64_t Int64Ty = llvm::Type::getInt64Ty(v407, v314);
            uint64_t v317 = Int64Ty;
            v318 = (char *)v442;
            if ((unint64_t)v442 >= v443)
            {
              int64_t v320 = ((unsigned char *)v442 - (unsigned char *)v441) >> 3;
              if ((unint64_t)(v320 + 1) >> 61) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v321 = (uint64_t)(v443 - (void)v441) >> 2;
              if (v321 <= v320 + 1) {
                unint64_t v321 = v320 + 1;
              }
              if (v443 - (unint64_t)v441 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v316 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v316 = v321;
              }
              if (v316) {
                v322 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v443, v316);
              }
              else {
                v322 = 0;
              }
              v323 = (uint64_t *)&v322[8 * v320];
              uint64_t *v323 = v317;
              v319 = v323 + 1;
              v324 = (char *)v442;
              v325 = (char *)v441;
              if (v442 != v441)
              {
                do
                {
                  uint64_t v326 = *((void *)v324 - 1);
                  v324 -= 8;
                  *--v323 = v326;
                }
                while (v324 != v325);
                v324 = (char *)v441;
              }
              v441 = v323;
              v442 = v319;
              unint64_t v443 = (unint64_t)&v322[8 * v316];
              if (v324) {
                operator delete(v324);
              }
            }
            else
            {
              *(void *)v442 = Int64Ty;
              v319 = v318 + 8;
            }
            v442 = v319;
            uint64_t v327 = llvm::Type::getInt64Ty(v407, (llvm::LLVMContext *)v316);
            uint64_t v329 = v327;
            v330 = (char *)v439;
            if ((unint64_t)v439 >= v440)
            {
              int64_t v332 = ((unsigned char *)v439 - (unsigned char *)v438) >> 3;
              if ((unint64_t)(v332 + 1) >> 61) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v333 = (uint64_t)(v440 - (void)v438) >> 2;
              if (v333 <= v332 + 1) {
                unint64_t v333 = v332 + 1;
              }
              if (v440 - (unint64_t)v438 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v328 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v328 = v333;
              }
              if (v328) {
                v334 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v440, v328);
              }
              else {
                v334 = 0;
              }
              v335 = (uint64_t *)&v334[8 * v332];
              uint64_t *v335 = v329;
              v331 = v335 + 1;
              v336 = (char *)v439;
              v337 = (char *)v438;
              if (v439 != v438)
              {
                do
                {
                  uint64_t v338 = *((void *)v336 - 1);
                  v336 -= 8;
                  *--v335 = v338;
                }
                while (v336 != v337);
                v336 = (char *)v438;
              }
              v438 = v335;
              v439 = v331;
              unint64_t v440 = (unint64_t)&v334[8 * v328];
              if (v336) {
                operator delete(v336);
              }
            }
            else
            {
              *(void *)v439 = v327;
              v331 = v330 + 8;
            }
            v439 = v331;
            v469 = 0;
            long long v468 = 0u;
            long long v467 = 0u;
            long long v466 = 0u;
            long long __p = 0u;
            llvm::Type::getInt32Ty(v407, (llvm::LLVMContext *)v328);
            llvm::ConstantInt::get();
            *(void *)&long long __p = llvm::ValueAsMetadata::get();
            *((void *)&__p + 1) = llvm::MDString::get();
            *(void *)&long long v466 = llvm::MDString::get();
            llvm::Type::getInt32Ty(v407, v339);
            llvm::ConstantInt::get();
            *((void *)&v466 + 1) = llvm::ValueAsMetadata::get();
            llvm::Type::getInt32Ty(v407, v340);
            llvm::ConstantInt::get();
            *(void *)&long long v467 = llvm::ValueAsMetadata::get();
            *((void *)&v467 + 1) = llvm::MDString::get();
            *(void *)&long long v468 = llvm::MDString::get();
            *((void *)&v468 + 1) = llvm::MDString::get();
            std::string::basic_string[abi:ne180100]<0>(&v464, "stride");
            std::to_string(&v409, *(_DWORD *)v311 & 0x1F);
            if ((v409.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v341 = &v409;
            }
            else {
              v341 = (std::string *)v409.__r_.__value_.__r.__words[0];
            }
            if ((v409.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v409.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v409.__r_.__value_.__l.__size_;
            }
            v343 = std::string::append(&v464, (const std::string::value_type *)v341, size);
            long long v344 = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
            std::string::size_type v423 = v343->__r_.__value_.__r.__words[2];
            long long v422 = v344;
            v343->__r_.__value_.__l.__size_ = 0;
            v343->__r_.__value_.__r.__words[2] = 0;
            v343->__r_.__value_.__r.__words[0] = 0;
            v469 = (llvm::ReturnInst *)llvm::MDString::get();
            if (SHIBYTE(v423) < 0) {
              operator delete((void *)v422);
            }
            if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v409.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v464.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v464.__r_.__value_.__l.__data_);
            }
            uint64_t v251 = llvm::MDTuple::getImpl();
            uint64_t v345 = v251;
            v346 = (char *)v436;
            if ((unint64_t)v436 >= v437)
            {
              int64_t v348 = ((unsigned char *)v436 - (unsigned char *)v435) >> 3;
              if ((unint64_t)(v348 + 1) >> 61) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v349 = (uint64_t)(v437 - (void)v435) >> 2;
              if (v349 <= v348 + 1) {
                unint64_t v349 = v348 + 1;
              }
              if (v437 - (unint64_t)v435 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v252 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v252 = v349;
              }
              if (v252) {
                uint64_t v251 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v437, v252);
              }
              else {
                uint64_t v251 = 0;
              }
              v350 = (uint64_t *)(v251 + 8 * v348);
              uint64_t *v350 = v345;
              v347 = v350 + 1;
              v351 = (char *)v436;
              v352 = (char *)v435;
              if (v436 != v435)
              {
                do
                {
                  uint64_t v353 = *((void *)v351 - 1);
                  v351 -= 8;
                  *--v350 = v353;
                }
                while (v351 != v352);
                v351 = (char *)v435;
              }
              v435 = v350;
              v436 = v347;
              unint64_t v437 = v251 + 8 * v252;
              if (v351) {
                operator delete(v351);
              }
            }
            else
            {
              *(void *)v436 = v251;
              v347 = v346 + 8;
            }
            v436 = v347;
          }
          ++v310;
        }
        while (v310 != __n);
      }
      if (v397) {
        uint64_t v251 = llvm::StructType::get();
      }
      uint64_t v369 = **(void **)(*((void *)v382 + 3) + 16);
      uint64_t v408 = 0;
      memset(&v409, 0, sizeof(v409));
      if (a6)
      {
        llvm::Type::getVoidTy(v407, (llvm::LLVMContext *)v252);
        uint64_t v408 = llvm::MDTuple::getImpl();
      }
      else if (a5)
      {
        uint64_t v354 = *(void *)(v377 - 8 * *(unsigned int *)(v377 + 8) + 8);
        long long __p = 0uLL;
        *(void *)&long long v466 = 0;
        MTLAddVertexFetchingToModulePass::expandVertexOutputWithFragmentInput(v251, v407, v369, v354, &v408, &__p, a5, (uint64_t)&v409, a7);
      }
      uint64_t v355 = llvm::FunctionType::get();
      *(void *)&long long __p = "air.vertexFetchFunction";
      LOWORD(v467) = 259;
      v356 = (llvm::Value *)llvm::Function::Create(v355, 0, (uint64_t)&__p, (uint64_t)v399);
      *(void *)&long long __p = &v466;
      *((void *)&__p + 1) = 0x200000000;
      v469 = v407;
      v470 = &v478;
      v471 = v479;
      uint64_t v472 = 0;
      int v473 = 0;
      __int16 v474 = 512;
      char v475 = 7;
      long long v468 = 0uLL;
      uint64_t v477 = 0;
      uint64_t v476 = 0;
      uint64_t v478 = MEMORY[0x263F8BBD0] + 16;
      v479[0] = MEMORY[0x263F8BC08] + 16;
      v379 = v356;
      createDebugInfoForWrapperFunction((uint64_t)v407, (llvm::IRBuilderBase *)&__p, v356, v382);
      v358 = v379;
      if (!v371)
      {
        v359 = v432;
        v360 = v433;
        if (v432 != v433)
        {
          while (1)
          {
            unsigned int v361 = v359[1];
            if (v361 > 0x29) {
              break;
            }
            if (((1 << v361) & 0x10008) == 0)
            {
              if (((1 << v361) & 0x2020000000) == 0 && ((1 << v361) & 0x20200000000) == 0) {
                break;
              }
              llvm::Function::addParamAttr();
              v358 = v379;
            }
            v359 += 2;
            if (v359 == v360) {
              goto LABEL_595;
            }
          }
          abort();
        }
LABEL_595:
        for (uint64_t j = (void *)v411; j; v358 = v379)
        {
          llvm::Function::addParamAttr();
          uint64_t j = (void *)*j;
        }
      }
      *(void *)&long long v422 = "Body";
      LOWORD(v424) = 259;
      llvm::BasicBlock::Create(v407, (llvm::LLVMContext *)&v422, v358, 0, v357);
    }
    long long __p = 0uLL;
    *(void *)&long long v466 = 0;
    std::vector<llvm::Metadata *>::reserve((void **)&__p, 1uLL);
    uint64_t v286 = v268;
    if ((a4[1] & 1) == 0) {
      uint64_t v286 = llvm::Type::getInt16Ty(v407, v285);
    }
    uint64_t v287 = llvm::PointerType::get();
    LODWORD(v422) = ((unsigned char *)v442 - (unsigned char *)v441) >> 3;
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)&v416, (unsigned int *)&v422, &v422);
    v288 = (char *)v442;
    if ((unint64_t)v442 >= v443)
    {
      int64_t v290 = ((unsigned char *)v442 - (unsigned char *)v441) >> 3;
      if ((unint64_t)(v290 + 1) >> 61) {
        goto LABEL_653;
      }
      unint64_t v291 = (uint64_t)(v443 - (void)v441) >> 2;
      if (v291 <= v290 + 1) {
        unint64_t v291 = v290 + 1;
      }
      if (v443 - (unint64_t)v441 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v292 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v292 = v291;
      }
      if (v292) {
        v293 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v443, v292);
      }
      else {
        v293 = 0;
      }
      v294 = (uint64_t *)&v293[8 * v290];
      v295 = &v293[8 * v292];
      uint64_t *v294 = v287;
      v289 = v294 + 1;
      v296 = (char *)v442;
      v297 = (char *)v441;
      if (v442 != v441)
      {
        do
        {
          uint64_t v298 = *((void *)v296 - 1);
          v296 -= 8;
          *--v294 = v298;
        }
        while (v296 != v297);
        v296 = (char *)v441;
      }
      v441 = v294;
      v442 = v289;
      unint64_t v443 = (unint64_t)v295;
      if (v296) {
        operator delete(v296);
      }
    }
    else
    {
      *(void *)v442 = v287;
      v289 = v288 + 8;
    }
    v442 = v289;
    v299 = (char *)v439;
    if ((unint64_t)v439 < v440)
    {
      *(void *)v439 = v286;
      v300 = v299 + 8;
LABEL_514:
      v439 = v300;
      MTLFrameworkPass::appendBufferMetadata(v407, (uint64_t **)&v435);
      uint64_t v251 = __p;
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      goto LABEL_516;
    }
    int64_t v301 = ((unsigned char *)v439 - (unsigned char *)v438) >> 3;
    if (!((unint64_t)(v301 + 1) >> 61))
    {
      unint64_t v302 = (uint64_t)(v440 - (void)v438) >> 2;
      if (v302 <= v301 + 1) {
        unint64_t v302 = v301 + 1;
      }
      if (v440 - (unint64_t)v438 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v303 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v303 = v302;
      }
      if (v303) {
        v304 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v440, v303);
      }
      else {
        v304 = 0;
      }
      v305 = (uint64_t *)&v304[8 * v301];
      v306 = &v304[8 * v303];
      uint64_t *v305 = v286;
      v300 = v305 + 1;
      v307 = (char *)v439;
      v308 = (char *)v438;
      if (v439 != v438)
      {
        do
        {
          uint64_t v309 = *((void *)v307 - 1);
          v307 -= 8;
          *--v305 = v309;
        }
        while (v307 != v308);
        v307 = (char *)v438;
      }
      v438 = v305;
      v439 = v300;
      unint64_t v440 = (unint64_t)v306;
      if (v307) {
        operator delete(v307);
      }
      goto LABEL_514;
    }
LABEL_653:
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  }
  return v399;
}

void sub_255716B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  unsigned int v44 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v44;
    operator delete(v44);
  }
  unsigned int v45 = (void *)STACK[0x330];
  if (STACK[0x330])
  {
    STACK[0x338] = (unint64_t)v45;
    operator delete(v45);
  }
  unsigned int v46 = (void *)STACK[0x348];
  if (STACK[0x348])
  {
    STACK[0x350] = (unint64_t)v46;
    operator delete(v46);
  }
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)&STACK[0x820]);
  int v47 = (void *)STACK[0x368];
  if (STACK[0x368])
  {
    STACK[0x370] = (unint64_t)v47;
    operator delete(v47);
  }
  std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::~__hash_table((uint64_t)&STACK[0x380]);
  uint64_t v48 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v48;
    operator delete(v48);
  }
  std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::~__hash_table((uint64_t)&STACK[0x3D0]);
  uint64_t v49 = (void *)STACK[0x3F8];
  if (STACK[0x3F8])
  {
    STACK[0x400] = (unint64_t)v49;
    operator delete(v49);
  }
  STACK[0x820] = (unint64_t)&STACK[0x410];
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x820]);
  uint64_t v50 = (void *)STACK[0x428];
  if (STACK[0x428])
  {
    STACK[0x430] = (unint64_t)v50;
    operator delete(v50);
  }
  uint64_t v51 = (void *)STACK[0x568];
  if (STACK[0x568])
  {
    STACK[0x570] = (unint64_t)v51;
    operator delete(v51);
  }
  unsigned int v52 = (void *)STACK[0x580];
  if (STACK[0x580])
  {
    STACK[0x588] = (unint64_t)v52;
    operator delete(v52);
  }
  uint64_t v53 = (void *)STACK[0x598];
  if (STACK[0x598])
  {
    STACK[0x5A0] = (unint64_t)v53;
    operator delete(v53);
  }
  uint64_t v54 = (void *)STACK[0x5B0];
  if (STACK[0x5B0])
  {
    STACK[0x5B8] = (unint64_t)v54;
    operator delete(v54);
  }
  uint64_t v55 = (void *)STACK[0x5C8];
  if (STACK[0x5C8])
  {
    STACK[0x5D0] = (unint64_t)v55;
    operator delete(v55);
  }
  int v56 = (void *)STACK[0x5E0];
  if (STACK[0x5E0])
  {
    STACK[0x5E8] = (unint64_t)v56;
    operator delete(v56);
  }
  unint64_t v57 = (void *)STACK[0x5F8];
  if (STACK[0x5F8])
  {
    STACK[0x600] = (unint64_t)v57;
    operator delete(v57);
  }
  if (a43) {
    operator delete(a43);
  }
  if (STACK[0x610]) {
    operator delete((void *)STACK[0x610]);
  }
  int v58 = (void *)STACK[0x628];
  if (STACK[0x628])
  {
    STACK[0x630] = (unint64_t)v58;
    operator delete(v58);
  }
  char v59 = (void *)STACK[0x640];
  if (STACK[0x640])
  {
    STACK[0x648] = (unint64_t)v59;
    operator delete(v59);
  }
  char v60 = (void *)STACK[0x658];
  if (STACK[0x658])
  {
    STACK[0x660] = (unint64_t)v60;
    operator delete(v60);
  }
  int v61 = (void *)STACK[0x670];
  if (STACK[0x670])
  {
    STACK[0x678] = (unint64_t)v61;
    operator delete(v61);
  }
  unsigned int v62 = (void *)STACK[0x688];
  if (STACK[0x688])
  {
    STACK[0x690] = (unint64_t)v62;
    operator delete(v62);
  }
  int v63 = (void *)STACK[0x6A0];
  if (STACK[0x6A0])
  {
    STACK[0x6A8] = (unint64_t)v63;
    operator delete(v63);
  }
  __int16 v64 = (void *)STACK[0x6B8];
  if (STACK[0x6B8])
  {
    STACK[0x6C0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

llvm::ArrayType *getTypeFromVertexAttribFormat(llvm::Type *this, llvm::LLVMContext *a2, void *a3, void *a4, int a5)
{
  switch((int)a2)
  {
    case 1:
    case 4:
    case 7:
    case 10:
      *a3 = 2;
      *a4 = 1;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getInt8Ty(this, a2);
      goto LABEL_38;
    case 2:
    case 5:
    case 8:
    case 11:
      *a3 = 3;
      *a4 = 1;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getInt8Ty(this, a2);
      if (!a5) {
        goto LABEL_38;
      }
      goto LABEL_19;
    case 3:
    case 6:
    case 9:
    case 12:
    case 42:
      *a3 = 4;
      *a4 = 1;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getInt8Ty(this, a2);
      goto LABEL_38;
    case 13:
    case 16:
    case 19:
    case 22:
      *a3 = 4;
      *a4 = 2;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getInt16Ty(this, a2);
      goto LABEL_38;
    case 14:
    case 17:
    case 20:
    case 23:
      *a3 = 6;
      *a4 = 2;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getInt16Ty(this, a2);
      if (!a5) {
        goto LABEL_38;
      }
      goto LABEL_19;
    case 15:
    case 18:
    case 21:
    case 24:
      *a3 = 8;
      *a4 = 2;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getInt16Ty(this, a2);
      goto LABEL_38;
    case 25:
      *a3 = 4;
      *a4 = 2;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getHalfTy(this, a2);
      goto LABEL_38;
    case 26:
      *a3 = 6;
      *a4 = 2;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getHalfTy(this, a2);
      FloatTy = result;
      if (!a5) {
        goto LABEL_38;
      }
      goto LABEL_29;
    case 27:
      *a3 = 8;
      *a4 = 2;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getHalfTy(this, a2);
      goto LABEL_38;
    case 28:
      *a3 = 4;
      *a4 = 4;
      return (llvm::ArrayType *)llvm::Type::getFloatTy(this, a2);
    case 29:
      *a3 = 8;
      *a4 = 4;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getFloatTy(this, a2);
      goto LABEL_38;
    case 30:
      *a3 = 12;
      *a4 = 4;
      FloatTy = (llvm::Type *)llvm::Type::getFloatTy(this, a2);
LABEL_29:
      return (llvm::ArrayType *)getUnpackedVectorType(this, FloatTy, 3);
    case 31:
      *a3 = 16;
      *a4 = 4;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getFloatTy(this, a2);
      goto LABEL_38;
    case 32:
    case 36:
    case 40:
    case 41:
    case 43:
    case 44:
    case 54:
    case 55:
      *a3 = 4;
      *a4 = 4;
      return (llvm::ArrayType *)llvm::Type::getInt32Ty(this, a2);
    case 33:
    case 37:
      *a3 = 8;
      *a4 = 4;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getInt32Ty(this, a2);
      goto LABEL_38;
    case 34:
    case 38:
      *a3 = 12;
      *a4 = 4;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getInt32Ty(this, a2);
LABEL_19:
      llvm::ArrayType::get(result, (llvm::Type *)3);
      return (llvm::ArrayType *)llvm::StructType::get();
    case 35:
    case 39:
      *a3 = 16;
      *a4 = 4;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getInt32Ty(this, a2);
      goto LABEL_38;
    case 45:
    case 46:
    case 47:
    case 48:
      *a3 = 1;
      *a4 = 1;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getInt8Ty(this, a2);
      if ((a5 & 1) == 0) {
        goto LABEL_38;
      }
      return result;
    case 49:
    case 50:
    case 51:
    case 52:
      *a3 = 2;
      *a4 = 2;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getInt16Ty(this, a2);
      if ((a5 & 1) == 0) {
        goto LABEL_38;
      }
      return result;
    case 53:
      *a3 = 2;
      *a4 = 2;
      uint64_t result = (llvm::ArrayType *)llvm::Type::getHalfTy(this, a2);
      if ((a5 & 1) == 0)
      {
LABEL_38:
        uint64_t result = (llvm::ArrayType *)vectorTypeGet(result);
      }
      break;
    default:
      uint64_t result = 0;
      *a3 = 0;
      *a4 = 0;
      break;
  }
  return result;
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  int v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::value_type *__x)
{
  uint64_t i = (unsigned int *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  int v8 = value;
  if (end >= value)
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    unint64_t v15 = end - this->__begin_ + 1;
    if (v15 >> 62) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = __position.__i_ - begin;
    uint64_t v17 = (char *)v8 - (char *)begin;
    if (v17 >> 1 > v15) {
      unint64_t v15 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)p_end_cap;
    if (v18) {
      int v19 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v18);
    }
    else {
      int v19 = 0;
    }
    __v.__first_ = v19;
    __v.__begin_ = &v19[v16];
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v19[v18];
    std::__split_buffer<unsigned int>::push_back(&__v, __x);
    uint64_t i = std::vector<unsigned int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
    }
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<unsigned int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    std::__wrap_iter<const unsigned int *>::iterator_type v10 = __position.__i_ + 1;
    uint64_t v11 = end - 1;
    uint64_t v12 = (unsigned int *)end;
    while (v11 < end)
    {
      unsigned int v13 = *v11++;
      *v12++ = v13;
    }
    this->__end_ = v12;
    if (end != v10) {
      memmove((void *)&end[-(end - v10)], __position.__i_, (char *)end - (char *)v10);
    }
    unsigned int *i = *__x;
  }
  return (std::vector<unsigned int>::iterator)i;
}

void sub_2557176F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<signed char>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (unsigned char *)a1[1];
    unint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_25571778C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::find<unsigned long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateAlignedLoad(uint64_t a1, llvm::Type *a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  if ((a4 & 0xFF00) == 0)
  {
    Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
    llvm::DataLayout::getABITypeAlign(DataLayout, a2);
  }
  uint64_t v11 = llvm::User::operator new((llvm::User *)0x40);
  llvm::LoadInst::LoadInst();
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v11, a6);
}

void sub_255717914(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_255717990(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  std::vector<unsigned int>::pointer begin = __v->__begin_;
  std::vector<unsigned int>::pointer v6 = this->__begin_;
  unint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<unsigned int>::pointer v8 = __p;
    unint64_t v7 = __v->__begin_;
    do
    {
      unsigned int v9 = *--v8;
      *--unint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  std::__split_buffer<unsigned int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    unint64_t v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  unsigned int v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  uint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void std::__split_buffer<unsigned int>::push_back(std::__split_buffer<unsigned int> *this, std::__split_buffer<unsigned int>::value_type *__x)
{
  std::__split_buffer<unsigned int>::pointer end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    std::__split_buffer<unsigned int>::pointer begin = this->__begin_;
    uint64_t v6 = (char *)begin - (char *)this->__first_;
    if (begin <= this->__first_)
    {
      if (end == this->__first_) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = ((char *)end - (char *)this->__first_) >> 1;
      }
      uint64_t v17 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this->__end_cap_.__value_, v16);
      int v19 = (unsigned int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
      std::__split_buffer<unsigned int>::pointer v20 = this->__begin_;
      std::__split_buffer<unsigned int>::pointer end = v19;
      uint64_t v21 = (char *)this->__end_ - (char *)v20;
      if (v21)
      {
        std::__split_buffer<unsigned int>::pointer end = (unsigned int *)((char *)v19 + (v21 & 0xFFFFFFFFFFFFFFFCLL));
        uint64_t v22 = 4 * (v21 >> 2);
        uint64_t v23 = (unsigned int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
        do
        {
          int v24 = *v20++;
          *v23++ = v24;
          v22 -= 4;
        }
        while (v22);
      }
      std::__split_buffer<unsigned int>::pointer first = this->__first_;
      this->__first_ = v17;
      this->__begin_ = v19;
      this->__end_ = end;
      this->__end_cap_.__value_ = &v17[v18];
      if (first)
      {
        operator delete(first);
        std::__split_buffer<unsigned int>::pointer end = this->__end_;
      }
    }
    else
    {
      uint64_t v7 = v6 >> 2;
      BOOL v8 = v6 >> 2 < -1;
      uint64_t v9 = (v6 >> 2) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      unsigned int v13 = &begin[-v12];
      int64_t v14 = (char *)end - (char *)begin;
      if (end != begin)
      {
        memmove(&begin[-v12], begin, (char *)end - (char *)begin);
        std::__split_buffer<unsigned int>::pointer end = this->__begin_;
      }
      unint64_t v15 = &end[v11];
      std::__split_buffer<unsigned int>::pointer end = (unsigned int *)((char *)v13 + v14);
      this->__begin_ = v15;
    }
  }
  unsigned int *end = *__x;
  this->__end_ = end + 1;
}

void *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *int v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_255717D90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    unint64_t v7 = &end[__n];
    std::vector<unsigned int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_255717E0C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_255717E84(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    std::vector<unsigned int>::size_type v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    uint8x8_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_255717F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::vector<signed char>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<signed char>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (unsigned char *)a1[1];
    int v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_2557180B0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<llvm::MDNode *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_255718128(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<llvm::Type *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2557181A0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PackedInput>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    int v17 = &v16[v14];
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<unsigned int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_255718310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::vector<unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned int>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PackedInput>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__split_buffer<std::vector<unsigned int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<unsigned int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    int v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t AirReflection::Node::node_as_VertexIDArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270339) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VertexIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.VertexIDArg", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    int v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    uint64_t v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    int v12 = c;
  }
  else
  {
    int v24 = 0;
    uint64_t v10 = &v24;
    int v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  int v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    int v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    int v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    int v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t llvm::Function::Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x25A28DAC0](v8, a1, a2, 0xFFFFFFFFLL, a3, a4);
  return v8;
}

void sub_255718A18(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::CallInst::Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8 = 0;
  if (a6)
  {
    uint64_t v9 = 48 * a6;
    uint64_t v10 = (void *)(a5 + 32);
    do
    {
      v8 += (*v10 - *(v10 - 1)) >> 3;
      v10 += 6;
      v9 -= 48;
    }
    while (v9);
  }
  uint64_t v11 = llvm::User::operator new((llvm::User *)0x50);
  if (a6)
  {
    int v12 = 0;
    uint64_t v13 = 48 * a6;
    uint64_t v14 = (void *)(a5 + 32);
    do
    {
      v12 += (*v14 - *(v14 - 1)) >> 3;
      v14 += 6;
      v13 -= 48;
    }
    while (v13);
    uint64_t v15 = 48 * a6;
    uint64_t v16 = (void *)(a5 + 32);
    do
    {
      LODWORD(v13) = v13 + ((*v16 - *(v16 - 1)) >> 3);
      v16 += 6;
      v15 -= 48;
    }
    while (v15);
  }
  llvm::Instruction::Instruction();
  *(void *)(v11 + 64) = 0;
  llvm::CallInst::init();
  return v11;
}

void sub_255718B88(_Unwind_Exception *a1)
{
  llvm::Instruction::~Instruction(v1);
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL llvm::FPMathOperator::classof(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || (unsigned int v2 = v1 - 28, v1 < 0x1C))
  {
    uint64_t v3 = 0;
    if (!a1 || v1 != 5) {
      return v3;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 18);
  }
  if (v2 > 0x39) {
    return 0;
  }
  if (((1 << v2) & 0x40000001255000) != 0) {
    return 1;
  }
  if (((1 << v2) & 0x380000000000000) == 0) {
    return 0;
  }
  do
  {
    uint64_t v4 = *(void *)a1;
    unsigned int v5 = *(unsigned __int8 *)(*(void *)a1 + 8);
    a1 = *(void *)a1 + 24;
    if (v4) {
      BOOL v6 = v5 == 17;
    }
    else {
      BOOL v6 = 0;
    }
  }
  while (v6);
  if ((v5 & 0xFE) == 0x12) {
    unsigned int v5 = *(unsigned __int8 *)(**(void **)(v4 + 16) + 8);
  }
  return v5 < 7;
}

void llvm::IRBuilderBase::SetInsertPoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = a3;
  if (a2 + 40 != a3)
  {
    uint64_t v4 = a3 - 24;
    if (!a3) {
      uint64_t v4 = 0;
    }
    uint64_t v6 = *(void *)(v4 + 48);
    if (v6)
    {
      llvm::MetadataTracking::track();
      uint64_t v5 = v6;
    }
    else
    {
      uint64_t v5 = 0;
    }
    llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(a1, 0, v5);
    llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)&v6);
  }
}

void sub_255718CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)va);
  _Unwind_Resume(a1);
}

uint64_t llvm::IRBuilderBase::CreateCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = (llvm::Value *)llvm::CallInst::Create(a2, a3, a4, a5, *(void *)(a1 + 104), *(void *)(a1 + 112));
  uint64_t v11 = (uint64_t)v10;
  if (*(unsigned char *)(a1 + 100))
  {
    llvm::Value::getContext(v10);
    *(void *)(v11 + 64) = llvm::AttributeList::addAttributeAtIndex();
  }
  if (llvm::FPMathOperator::classof(v11)) {
    llvm::IRBuilderBase::setFPAttrs(a1, v11, a7);
  }
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v11, a6);
}

uint64_t llvm::ReturnInst::Create(llvm::ReturnInst *this, llvm::LLVMContext *a2, llvm::Value *a3, llvm::Instruction *a4)
{
  uint64_t v7 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x25A28CD80](v7, this, a2, a3);
  return v7;
}

void sub_255718E0C(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

void llvm::BasicBlock::Create(llvm::BasicBlock *this, llvm::LLVMContext *a2, const llvm::Twine *a3, llvm::Function *a4, llvm::BasicBlock *a5)
{
}

void sub_255718E90(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x1020C4012B667A0);
  _Unwind_Resume(a1);
}

uint64_t MTLCompilerObject::checkVertexDescriptorAndAddVertexFetchingToVertexModule(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a2 + 32);
  unint64_t v4 = *(unsigned int *)(v3 + 28);
  if (v4 < 0xC) {
    return 1;
  }
  uint64_t v8 = *(void *)a2 + *(unsigned int *)(v3 + 24);
  uint64_t v9 = *(llvm::Module **)(a2 + 48);
  uint64_t v34 = (MTLCompilerErrorObject *)"air.vertex";
  __int16 v36 = 259;
  NamedMetachar data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v9, (const llvm::Twine *)&v34);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  BOOL v12 = (~*(_DWORD *)(*(void *)(a2 + 32) + 4) & 0x84) != 0 || *a3 == a3[1];
  BOOL v13 = !v12;
  int v14 = *(_DWORD *)(v8 + 8);
  if ((v14 & 4) == 0 && !v13) {
    return 1;
  }
  if ((v14 & 4) != 0)
  {
    uint64_t v15 = 20;
    if ((v14 & 0x100000) == 0) {
      uint64_t v15 = 12;
    }
    unint64_t v16 = v4 - v15;
    int v17 = (unsigned __int16 *)(v8 + v15);
    if ((v14 & 2) != 0)
    {
      MTLCompilerObject::validateSerializedVertexDescriptor((MTLCompilerObject *)a1, (const char *)(v8 + v15), v4 - v15);
      uint64_t v19 = *v17;
      CC_LONG v18 = (unsigned __int16 *)((char *)v17 + v19);
      v16 -= v19;
    }
    else
    {
      if ((MTLCompilerObject::checkNoStageInAttributes(a1, Operand) & 1) == 0)
      {
        uint64_t v32 = *(void *)(a2 + 24);
        uint64_t v33 = *(void *)(a1 + 120);
LABEL_44:
        (*(void (**)(uint64_t, void, void, void))(v32 + 16))(v32, 2 * (v33 != 0), 0, 0);
        return 0;
      }
      CC_LONG v18 = v17;
      int v17 = 0;
    }
  }
  else
  {
    int v17 = 0;
    CC_LONG v18 = (unsigned __int16 *)v8;
    unint64_t v16 = v4;
  }
  unsigned int v20 = *(_DWORD *)(v8 + 8);
  if ((v20 & 0x80) != 0)
  {
    if (v16 <= 1
      || (unint64_t v22 = 2 * *v18 + 2, v16 < v22)
      || ((uint64_t v23 = *(unsigned int *)(v8 + 4), v23) ? (v24 = v4 - v23) : (v24 = 0), v16 != v24 + v22))
    {
      abort();
    }
  }
  else
  {
    int v21 = (v20 & 0x82) != 0 || v13;
    if (v21 != 1) {
      return 1;
    }
    CC_LONG v18 = 0;
  }
  int v25 = *(unsigned __int8 *)(a1 + 128);
  BOOL v27 = (v20 & 1) == 0 && v25 != 0;
  int v28 = (MTLCompilerErrorObject *)(a1 + 120);
  uint64_t v34 = v28;
  char v35 = v25;
  uint64_t v29 = MTLAddVertexFetchingToModulePass::addVertexFetchingToModule(&v34, *(llvm::Type ***)(a2 + 48), (v20 >> 2) & 1, v17, v18, v27, 1u, (v20 >> 8) & 3, (~v20 & 0xC) == 0, (~v20 & 0x14) == 0, *(_DWORD *)(*(void *)(a2 + 32) + 4), a3);
  if (!v29)
  {
    if (*(void *)(a2 + 48))
    {
      uint64_t v31 = MEMORY[0x25A28D8E0]();
      MEMORY[0x25A28E250](v31, 0x10B2C407FF26C1CLL);
    }
    *(void *)(a2 + 48) = 0;
    uint64_t v32 = *(void *)(a2 + 24);
    uint64_t v33 = *(void *)v28;
    goto LABEL_44;
  }
  *(void *)(a2 + 48) = v29;
  return 1;
}

const char *MTLCompilerObject::validateSerializedVertexDescriptor(MTLCompilerObject *this, const char *a2, unint64_t a3)
{
  if (a3 <= 7) {
    MTLCompilerErrorObject::setErrorMessage((MTLCompilerObject *)((char *)this + 120), "Invalid vertex descriptor");
  }
  unint64_t v5 = *(unsigned __int16 *)a2;
  if (v5 > a3
    || v5 < 8
    || (unint64_t v6 = *((unsigned __int16 *)a2 + 1), ((v6 >> 2) & 0x1F0) + *((unsigned __int16 *)a2 + 2) > v5)
    || *((unsigned __int16 *)a2 + 3) + ((v6 >> 8) & 0xF8) > v5)
  {
    abort();
  }
  return a2;
}

uint64_t MTLCompilerObject::checkVertexRenderTargetArrayIndex(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (a2 && !a3)
  {
    MTLCompilerErrorObject::setErrorMessage((MTLCompilerErrorObject *)(a1 + 120), "Vertex shader writes render_target_array_index but inputPrimitiveTopology is not specified");
    return 0;
  }
  if (a3) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = a2 == 0;
  }
  uint64_t v5 = 1;
  if (!v4 && a3 != 1 && a4 && !*(unsigned char *)(a1 + 128))
  {
    if (a3)
    {
      if (a3 == 3)
      {
        unint64_t v6 = "MTLPrimitiveTopologyClassTriangle";
      }
      else
      {
        if (a3 != 2) {
          abort();
        }
        unint64_t v6 = "MTLPrimitiveTopologyClassLine";
      }
    }
    else
    {
      unint64_t v6 = "MTLPrimitiveTopologyClassUnspecified";
    }
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)(a1 + 120), "Vertex shader writes point size but inputPrimitiveTopology is %s", v6);
    return 0;
  }
  return v5;
}

void MTLCompilerObject::addPostVertexDumpingToModule(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD **)(a2 + 32);
  if (v2[7] >= 0xCu)
  {
    unsigned int v3 = v2[1];
    if ((v3 & 0x10) != 0)
    {
      unsigned int v4 = *(_DWORD *)(*(void *)a2 + v2[6] + 8);
      LODWORD(var14.__r_.__value_.__l.__data_) = 0;
      memset(v7, 0, sizeof(v7));
      uint64_t v5 = (void **)(a1 + 120);
      char v6 = 0;
      *(void *)(a2 + 48) = MTLAddPostVertexDumpingToModulePass::addPostVertexDumpingToModule((int)&v5, *(llvm::Module **)(a2 + 48), (v4 >> 11), 0, &var14, v7, (v3 >> 10) & 1);
      uint64_t v5 = (void **)v7;
      std::vector<PostVertexDumpOutput>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
}

void sub_2557192D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void MTLCompilerObject::getFragmentVaryingsInfo(MTLCompilerObject *this, int a2, const char *a3, unint64_t a4, MTLCompilerObject::FragmentVaryingsInfo *a5)
{
  if (a4)
  {
    __int16 v64 = a3;
    unint64_t v65 = a4;
    *((_DWORD *)a5 + 19) = *(unsigned __int8 *)a3;
    if (a4 == 1) {
      goto LABEL_71;
    }
    *((_DWORD *)a5 + 20) = *((unsigned __int8 *)a3 + 1);
    if (a4 <= 2) {
      goto LABEL_71;
    }
    *((_DWORD *)a5 + 21) = *((unsigned __int8 *)a3 + 2);
    if (a4 == 3) {
      goto LABEL_71;
    }
    unint64_t v6 = *((unsigned __int8 *)a3 + 3);
    unint64_t v66 = 4;
    *((_DWORD *)a5 + 18) = v6;
    if (a2)
    {
      char v59 = (char **)((char *)a5 + 24);
      std::vector<PackedInput>::reserve((void **)a5 + 3, v6);
      if (*((_DWORD *)a5 + 18))
      {
        int v7 = 0;
        while (1)
        {
          unint64_t v8 = v66;
          if (v66 >= v65) {
            break;
          }
          __int16 v9 = v64[v66++];
          LOWORD(v62) = v9;
          if (v8 + 1 >= v65) {
            break;
          }
          unsigned int v10 = v64[v8 + 1];
          unint64_t v66 = v8 + 2;
          WORD1(v62) = v10 & 0xF;
          unsigned int v11 = v10 >> 4;
          WORD2(v62) = v10 >> 4;
          if (v10 >= 0x10)
          {
            uint64_t v12 = 0;
            if (v11 <= 1) {
              uint64_t v13 = 1;
            }
            else {
              uint64_t v13 = v11;
            }
            int v14 = (_OWORD *)*((void *)a5 + 1);
            do
            {
              uint64_t v15 = ((uint64_t)v14 - *(void *)a5) >> 5;
              *((_WORD *)&v62 + v12 + 3) = v15;
              deserializeFragmentInput((DeserialContext *)&v64, v15, (uint64_t **)a5 + 6, (uint64_t)&v60);
              unint64_t v16 = (_OWORD *)*((void *)a5 + 1);
              unint64_t v17 = *((void *)a5 + 2);
              if ((unint64_t)v16 >= v17)
              {
                uint64_t v19 = ((uint64_t)v16 - *(void *)a5) >> 5;
                unint64_t v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 59) {
                  goto LABEL_70;
                }
                uint64_t v21 = v17 - *(void *)a5;
                if (v21 >> 4 > v20) {
                  unint64_t v20 = v21 >> 4;
                }
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v22 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v22 = v20;
                }
                if (v22) {
                  uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>((uint64_t)a5 + 16, v22);
                }
                else {
                  uint64_t v23 = 0;
                }
                uint64_t v24 = &v23[32 * v19];
                long long v25 = v61;
                *(_OWORD *)uint64_t v24 = v60;
                *((_OWORD *)v24 + 1) = v25;
                BOOL v27 = *(char **)a5;
                char v26 = (char *)*((void *)a5 + 1);
                int v28 = v24;
                if (v26 != *(char **)a5)
                {
                  do
                  {
                    long long v29 = *((_OWORD *)v26 - 2);
                    *(_OWORD *)((char *)v28 - 19) = *(_OWORD *)(v26 - 19);
                    *(v28 - 2) = v29;
                    v28 -= 2;
                    v26 -= 32;
                  }
                  while (v26 != v27);
                  char v26 = *(char **)a5;
                }
                int v14 = v24 + 32;
                *(void *)a5 = v28;
                *((void *)a5 + 1) = v24 + 32;
                *((void *)a5 + 2) = &v23[32 * v22];
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                long long v18 = v61;
                *unint64_t v16 = v60;
                v16[1] = v18;
                int v14 = v16 + 2;
              }
              *((void *)a5 + 1) = v14;
              ++v12;
            }
            while (v12 != v13);
          }
          unint64_t v31 = *((void *)a5 + 4);
          unint64_t v30 = *((void *)a5 + 5);
          if (v31 >= v30)
          {
            unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (void)*v59) >> 3);
            unint64_t v34 = v33 + 1;
            if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (void)*v59) >> 3);
            if (2 * v35 > v34) {
              unint64_t v34 = 2 * v35;
            }
            if (v35 >= 0x555555555555555) {
              unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36) {
              unsigned int v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PackedInput>>((uint64_t)a5 + 40, v36);
            }
            else {
              unsigned int v37 = 0;
            }
            int v38 = &v37[24 * v33];
            *(_OWORD *)int v38 = v62;
            *((void *)v38 + 2) = v63;
            unint64_t v40 = (char *)*((void *)a5 + 3);
            unint64_t v39 = (char *)*((void *)a5 + 4);
            uint64_t v41 = v38;
            if (v39 != v40)
            {
              do
              {
                long long v42 = *(_OWORD *)(v39 - 24);
                *((void *)v41 - 1) = *((void *)v39 - 1);
                *(_OWORD *)(v41 - 24) = v42;
                v41 -= 24;
                v39 -= 24;
              }
              while (v39 != v40);
              unint64_t v39 = *v59;
            }
            uint64_t v32 = v38 + 24;
            *((void *)a5 + 3) = v41;
            *((void *)a5 + 4) = v38 + 24;
            *((void *)a5 + 5) = &v37[24 * v36];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *(_OWORD *)unint64_t v31 = v62;
            *(void *)(v31 + 16) = v63;
            uint64_t v32 = (char *)(v31 + 24);
          }
          *((void *)a5 + 4) = v32;
          if (++v7 >= *((_DWORD *)a5 + 18)) {
            return;
          }
        }
LABEL_71:
        abort();
      }
    }
    else
    {
      std::vector<VaryingInfo>::reserve((void **)a5, v6);
      if (*((_DWORD *)a5 + 18))
      {
        unsigned int v43 = 0;
        do
        {
          deserializeFragmentInput((DeserialContext *)&v64, v43, (uint64_t **)a5 + 6, (uint64_t)&v60);
          unsigned int v44 = (_OWORD *)*((void *)a5 + 1);
          unint64_t v45 = *((void *)a5 + 2);
          if ((unint64_t)v44 >= v45)
          {
            uint64_t v48 = ((uint64_t)v44 - *(void *)a5) >> 5;
            unint64_t v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 59) {
LABEL_70:
            }
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            uint64_t v50 = v45 - *(void *)a5;
            if (v50 >> 4 > v49) {
              unint64_t v49 = v50 >> 4;
            }
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v51 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v49;
            }
            if (v51) {
              unsigned int v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>((uint64_t)a5 + 16, v51);
            }
            else {
              unsigned int v52 = 0;
            }
            uint64_t v53 = &v52[32 * v48];
            long long v54 = v61;
            *(_OWORD *)uint64_t v53 = v60;
            *((_OWORD *)v53 + 1) = v54;
            int v56 = *(char **)a5;
            uint64_t v55 = (char *)*((void *)a5 + 1);
            unint64_t v57 = v53;
            if (v55 != *(char **)a5)
            {
              do
              {
                long long v58 = *((_OWORD *)v55 - 2);
                *(_OWORD *)((char *)v57 - 19) = *(_OWORD *)(v55 - 19);
                *(v57 - 2) = v58;
                v57 -= 2;
                v55 -= 32;
              }
              while (v55 != v56);
              uint64_t v55 = *(char **)a5;
            }
            int v47 = v53 + 32;
            *(void *)a5 = v57;
            *((void *)a5 + 1) = v53 + 32;
            *((void *)a5 + 2) = &v52[32 * v51];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            long long v46 = v61;
            _OWORD *v44 = v60;
            v44[1] = v46;
            int v47 = v44 + 2;
          }
          *((void *)a5 + 1) = v47;
          ++v43;
        }
        while (v43 < *((_DWORD *)a5 + 18));
      }
    }
  }
}

uint64_t MTLCompilerObject::runVertexLinkingPass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(_DWORD **)(a2 + 32);
  int v5 = v4[1];
  if ((v5 & 4) == 0) {
    return 1;
  }
  uint64_t v8 = (*(unsigned __int8 *)(*(void *)a2 + v4[6] + 8) >> 5) & 3;
  __int16 v9 = (void *)(a1 + 120);
  if ((v5 & 8) == 0)
  {
    unsigned int v11 = (MTLCompilerErrorObject *)(a1 + 120);
    char v12 = 0;
    if ((MTLVertexOutputLinkingPass::vertexOutputLinking(&v11, *(llvm::Module **)(a2 + 48), (uint64_t *)a4, a4 + 48, *(_DWORD *)(a4 + 72), v8, *(_DWORD *)(a4 + 76), *(_DWORD *)(a4 + 80), v4[10], v4[11], *(_DWORD *)(a4 + 88), *(_DWORD *)(a4 + 84)) & 1) == 0)goto LABEL_7; {
    return 1;
    }
  }
  unsigned int v11 = (MTLCompilerErrorObject *)(a1 + 120);
  char v12 = 0;
  if (MTLVertexOutputPackingPass::vertexOutputPacking(&v11, *(llvm::Module **)(a2 + 48), (uint64_t *)a4, (uint64_t *)(a4 + 24), a4 + 48, *(unsigned int *)(a4 + 72), v8, *(_DWORD *)(a4 + 76), *(_DWORD *)(a4 + 80), v4[10], v4[11], *(_DWORD *)(a4 + 88), *(_DWORD *)(a4 + 84)))return 1; {
LABEL_7:
  }
  if (*(void *)(a2 + 48))
  {
    uint64_t v10 = MEMORY[0x25A28D8E0]();
    MEMORY[0x25A28E250](v10, 0x10B2C407FF26C1CLL);
  }
  *(void *)(a2 + 48) = 0;
  (*(void (**)(void, void, void, void))(*(void *)(a2 + 24) + 16))(*(void *)(a2 + 24), 2 * (*v9 != 0), 0, 0);
  return 0;
}

uint64_t MTLCompilerObject::runVertexPasses(uint64_t a1, uint64_t *a2, int a3, MTLCompilerObject::FragmentVaryingsInfo *a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = (_DWORD *)a2[4];
  unsigned int v9 = v8[7];
  MTLCompilerObject::getFragmentVaryingsInfo((MTLCompilerObject *)a1, (v8[1] >> 3) & 1, (const char *)(*a2 + v8[4]), v8[5], a4);
  if (v9 < 0xC) {
    return 1;
  }
  uint64_t v10 = v7 + *(unsigned int *)(a2[4] + 24);
  unsigned int v11 = (llvm::Module *)a2[6];
  unint64_t v36 = "air.vertex";
  __int16 v37 = 259;
  NamedMetachar data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v11, (const llvm::Twine *)&v36);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  uint64_t v14 = *(void *)(Operand - 8 * *(unsigned int *)(Operand + 8) + 8);
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(v14 + 8);
    BOOL v16 = *(_DWORD *)(v14 + 8) == 0;
    unsigned int v19 = *(_DWORD *)(v10 + 8);
    long long v18 = (_DWORD *)(v10 + 8);
    unsigned int v17 = v19;
    if (v15)
    {
      unsigned int v34 = v17;
      unint64_t v35 = v18;
      char v20 = 0;
      uint64_t v21 = *(void *)(Operand - 8 * *(unsigned int *)(Operand + 8) + 8);
      while (1)
      {
        uint64_t v22 = *(void *)(v21 - 8 * *(unsigned int *)(v14 + 8));
        uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v22 - 8 * *(unsigned int *)(v22 + 8)));
        if (v24 == 14)
        {
          BOOL v28 = memcmp(String, "air.point_size", 0xEuLL) == 0;
        }
        else
        {
          if (v24 == 29)
          {
            BOOL v25 = *String == 0x646E65722E726961 && String[1] == 0x65677261745F7265;
            BOOL v26 = v25 && String[2] == 0x5F79617272615F74;
            if (v26 && *(void *)((char *)String + 21) == 0x7865646E695F7961)
            {
              *((_DWORD *)a4 + 22) = dataTypeFromMetadata(1u, v22);
              goto LABEL_20;
            }
          }
          BOOL v28 = 0;
        }
        v20 |= v28;
LABEL_20:
        v21 += 8;
        if (!--v15)
        {
          BOOL v16 = 0;
          long long v18 = v35;
          unsigned int v17 = v34;
          goto LABEL_25;
        }
      }
    }
    char v20 = 0;
  }
  else
  {
    char v20 = 0;
    unsigned int v29 = *(_DWORD *)(v10 + 8);
    long long v18 = (_DWORD *)(v10 + 8);
    unsigned int v17 = v29;
    BOOL v16 = 1;
  }
LABEL_25:
  if (MTLCompilerObject::checkVertexRenderTargetArrayIndex(a1, *((_DWORD *)a4 + 22), (v17 >> 5) & 3, v20 & 1))
  {
    uint64_t result = MTLCompilerObject::checkVertexDescriptorAndAddVertexFetchingToVertexModule(a1, (uint64_t)a2, a4);
    if (!result) {
      return result;
    }
    MTLCompilerObject::addPostVertexDumpingToModule(a1, (uint64_t)a2);
    if (*(unsigned char *)(a2[4] + 4) & 0x10) != 0 || *(unsigned char *)(a1 + 128) || ((v16 ^ *v18)) {
      return 1;
    }
    if (*v18) {
      uint64_t v32 = "true";
    }
    else {
      uint64_t v32 = "false";
    }
    unint64_t v33 = "not void";
    if (v16) {
      unint64_t v33 = "void";
    }
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)(a1 + 120), "RasterizationEnabled is %s but the vertex shader's return type is %s", v32, v33);
  }
  else
  {
    if (a2[6])
    {
      uint64_t v31 = MEMORY[0x25A28D8E0]();
      MEMORY[0x25A28E250](v31, 0x10B2C407FF26C1CLL);
    }
    a2[6] = 0;
  }
  (*(void (**)(uint64_t, void, void, void))(a2[3] + 16))(a2[3], 2 * (*(void *)(a1 + 120) != 0), 0, 0);
  return 0;
}

void MTLFrameworkPass::addRequiredBuiltInsToBuiltInList(char **a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = a3[1];
  if (v3 != *a3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (uint64_t)(a1 + 2);
    do
    {
      uint64_t v10 = (char *)(v4 + v8);
      uint64_t v11 = *(unsigned __int8 *)(v4 + v8);
      if (*(unsigned char *)(v4 + v8))
      {
        if ((v8 >> 1) >= 5u) {
          abort();
        }
        uint64_t v12 = *(char *)(*a2 + (char)v8);
        uint64_t v13 = dword_2557AA3E0[(char)v8];
        uint64_t v14 = *a1;
        if (v12 == -1)
        {
          *(unsigned char *)(*a2 + (char)v8) = (*((_DWORD *)a1 + 2) - v14) >> 3;
          unsigned int v19 = (uint64_t *)a1[1];
          unint64_t v18 = (unint64_t)a1[2];
          if ((unint64_t)v19 >= v18)
          {
            uint64_t v21 = ((char *)v19 - *a1) >> 3;
            if ((unint64_t)(v21 + 1) >> 61) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v22 = v18 - (void)*a1;
            uint64_t v23 = v22 >> 2;
            if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
              uint64_t v23 = v21 + 1;
            }
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v23;
            }
            if (v24) {
              BOOL v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v9, v24);
            }
            else {
              BOOL v25 = 0;
            }
            BOOL v26 = &v25[8 * v21];
            *(void *)BOOL v26 = (v11 << 8) | (v13 << 32) | v8;
            char v20 = v26 + 8;
            BOOL v28 = *a1;
            BOOL v27 = a1[1];
            if (v27 != *a1)
            {
              do
              {
                uint64_t v29 = *((void *)v27 - 1);
                v27 -= 8;
                *((void *)v26 - 1) = v29;
                v26 -= 8;
              }
              while (v27 != v28);
              BOOL v27 = *a1;
            }
            *a1 = v26;
            a1[1] = v20;
            a1[2] = &v25[8 * v24];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            *unsigned int v19 = (v11 << 8) | (v13 << 32) | v8;
            char v20 = (char *)(v19 + 1);
          }
          a1[1] = v20;
          uint64_t v4 = *a3;
          uint64_t v3 = a3[1];
        }
        else
        {
          uint64_t v15 = &v14[8 * v12];
          unsigned int v17 = v15[1];
          BOOL v16 = v15 + 1;
          if (v17 >= v11) {
            uint64_t v10 = v16;
          }
          *BOOL v16 = *v10;
          *(_DWORD *)(v16 + 3) = v13;
        }
      }
      ++v8;
    }
    while (v8 < v3 - v4);
  }
}

void *MTLFrameworkPass::getArgumentMetadataIndices(uint64_t a1, uint64_t a2)
{
  uint64_t result = memset(*(void **)a2, 255, *(void *)(a2 + 8) - *(void *)a2);
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(_DWORD **)a2;
    do
    {
      uint64_t v8 = *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v6);
      uint64_t v9 = *(void *)(*(void *)(v8 - 8 * *(unsigned int *)(v8 + 8)) + 128);
      uint64_t v10 = (void *)(v9 + 24);
      if (*(_DWORD *)(v9 + 32) >= 0x41u) {
        uint64_t v10 = (void *)*v10;
      }
      v7[*v10] = v6++;
    }
    while (v5 != v6);
  }
  return result;
}

void MTLFrameworkPass::appendBufferMetadata(llvm::Type *a1, uint64_t **a2)
{
  uint64_t v4 = a2 + 1;
  llvm::Type::getInt32Ty(a1, (llvm::LLVMContext *)a2);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::MDString::get();
  llvm::Type::getInt32Ty(a1, v5);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::Type::getInt32Ty(a1, v6);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::MDString::get();
  llvm::MDString::get();
  llvm::MDString::get();
  llvm::MDString::get();
  uint64_t Impl = llvm::MDTuple::getImpl();
  uint64_t v8 = *v4;
  unint64_t v9 = (unint64_t)a2[2];
  if ((unint64_t)*v4 >= v9)
  {
    uint64_t v11 = v8 - *a2;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v9 - (void)*a2;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a2 + 2), v14);
    }
    else {
      uint64_t v15 = 0;
    }
    BOOL v16 = (uint64_t *)&v15[8 * v11];
    unsigned int v17 = &v15[8 * v14];
    *BOOL v16 = Impl;
    uint64_t v10 = v16 + 1;
    unsigned int v19 = *a2;
    unint64_t v18 = (char *)a2[1];
    if (v18 != (char *)*a2)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *--BOOL v16 = v20;
      }
      while (v18 != (char *)v19);
      unint64_t v18 = (char *)*a2;
    }
    *a2 = v16;
    a2[1] = v10;
    a2[2] = (uint64_t *)v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v8 = Impl;
    uint64_t v10 = v8 + 1;
  }
  a2[1] = v10;
}

uint64_t MTLFrameworkPass::getLLVMVectorType(llvm::Type *a1, llvm::LLVMContext *a2, unsigned int a3)
{
  if ((int)a2 <= 32)
  {
    switch(a2)
    {
      case 3:
        uint64_t result = llvm::Type::getFloatTy(a1, a2);
        break;
      case 0x10:
        uint64_t result = llvm::Type::getHalfTy(a1, a2);
        break;
      case 0x1D:
        goto LABEL_9;
      default:
        goto LABEL_21;
    }
  }
  else
  {
    if ((int)a2 <= 40)
    {
      if (a2 != 33)
      {
        if (a2 != 37) {
LABEL_21:
        }
          abort();
        goto LABEL_13;
      }
LABEL_9:
      uint64_t result = llvm::Type::getInt32Ty(a1, a2);
      goto LABEL_16;
    }
    if (a2 == 41)
    {
LABEL_13:
      uint64_t result = llvm::Type::getInt16Ty(a1, a2);
      goto LABEL_16;
    }
    if (a2 != 53) {
      goto LABEL_21;
    }
    uint64_t result = llvm::Type::getInt1Ty(a1, a2);
  }
LABEL_16:
  if (a3 >= 2)
  {
    return llvm::VectorType::get();
  }
  return result;
}

void createDebugInfoForWrapperFunction(uint64_t a1, llvm::IRBuilderBase *a2, llvm::Value *a3, llvm::Function *this)
{
  uint64_t Subprogram = llvm::Function::getSubprogram(this);
  if (Subprogram)
  {
    uint64_t v8 = Subprogram;
    uint64_t v9 = *(void *)(Subprogram - 8 * *(unsigned int *)(Subprogram + 8) + 8);
    uint64_t Name = llvm::Value::getName(a3);
    uint64_t v12 = *(unsigned int *)(v8 + 8);
    uint64_t v13 = *(unsigned char *)v8 == 15 ? v8 : *(void *)(v8 - 8 * v12);
    unint64_t v14 = (uint64_t *)(v8 - 8 * v12);
    uint64_t v15 = v12 < 9 ? 0 : v14[8];
    uint64_t Impl = llvm::DISubprogram::getImpl(a1, v9, Name, v10, 0, 0, v13, 0, v14[4], 0, v15, 0, 0x1C00000140, v14[5], 0, 0, 0, 0, 0,
             (uint64_t)&unk_2557AB8A6,
             0);
    llvm::Function::setSubprogram();
    llvm::IRBuilderBase::getCurrentDebugLocation(&v21, a2);
    uint64_t v17 = v21;
    llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)&v21);
    if (Impl && v17 == 0)
    {
      llvm::DebugLoc::get();
      uint64_t v20 = v21;
      if (v21)
      {
        llvm::MetadataTracking::track();
        uint64_t v19 = v20;
      }
      else
      {
        uint64_t v19 = 0;
      }
      llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((uint64_t)a2, 0, v19);
      llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)&v20);
      llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)&v21);
    }
  }
}

void sub_25571A23C(_Unwind_Exception *a1)
{
  llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)(v1 - 56));
  _Unwind_Resume(a1);
}

const char *MTLDataTypeGetShaderTypeName(int a1, int a2)
{
  switch(a2)
  {
    case 1:
      if (a1 <= 40)
      {
        if (a1 <= 28)
        {
          if (a1 == 3)
          {
            uint64_t result = "float";
          }
          else
          {
            if (a1 != 16) {
              goto LABEL_74;
            }
            uint64_t result = "half";
          }
        }
        else
        {
          switch(a1)
          {
            case 29:
              uint64_t result = "int";
              break;
            case 33:
              uint64_t result = "uint";
              break;
            case 37:
              uint64_t result = "short";
              break;
            default:
              goto LABEL_74;
          }
        }
      }
      else if (a1 > 52)
      {
        switch(a1)
        {
          case '5':
            uint64_t result = "BOOL";
            break;
          case 'Q':
            uint64_t result = "long";
            break;
          case 'U':
            uint64_t result = "ulong";
            break;
          default:
            goto LABEL_74;
        }
      }
      else
      {
        switch(a1)
        {
          case ')':
            uint64_t result = "ushort";
            break;
          case '-':
            uint64_t result = "char";
            break;
          case '1':
            uint64_t result = "uchar";
            break;
          default:
            goto LABEL_74;
        }
      }
      break;
    case 2:
      if (a1 <= 40)
      {
        if (a1 <= 28)
        {
          if (a1 == 3)
          {
            uint64_t result = "float2";
          }
          else
          {
            if (a1 != 16) {
              goto LABEL_74;
            }
            uint64_t result = "half2";
          }
        }
        else
        {
          switch(a1)
          {
            case 29:
              uint64_t result = "int2";
              break;
            case 33:
              uint64_t result = "uint2";
              break;
            case 37:
              uint64_t result = "short2";
              break;
            default:
              goto LABEL_74;
          }
        }
      }
      else if (a1 > 52)
      {
        switch(a1)
        {
          case '5':
            uint64_t result = "BOOL2";
            break;
          case 'Q':
            uint64_t result = "long2";
            break;
          case 'U':
            uint64_t result = "ulong2";
            break;
          default:
            goto LABEL_74;
        }
      }
      else
      {
        switch(a1)
        {
          case ')':
            uint64_t result = "ushort2";
            break;
          case '-':
            uint64_t result = "char2";
            break;
          case '1':
            uint64_t result = "uchar2";
            break;
          default:
            goto LABEL_74;
        }
      }
      break;
    case 3:
      if (a1 <= 40)
      {
        if (a1 <= 28)
        {
          if (a1 == 3)
          {
            uint64_t result = "float3";
          }
          else
          {
            if (a1 != 16) {
              goto LABEL_74;
            }
            uint64_t result = "half3";
          }
        }
        else
        {
          switch(a1)
          {
            case 29:
              uint64_t result = "int3";
              break;
            case 33:
              uint64_t result = "uint3";
              break;
            case 37:
              uint64_t result = "short3";
              break;
            default:
              goto LABEL_74;
          }
        }
      }
      else if (a1 > 52)
      {
        switch(a1)
        {
          case '5':
            uint64_t result = "BOOL3";
            break;
          case 'Q':
            uint64_t result = "long3";
            break;
          case 'U':
            uint64_t result = "ulong3";
            break;
          default:
            goto LABEL_74;
        }
      }
      else
      {
        switch(a1)
        {
          case ')':
            uint64_t result = "ushort3";
            break;
          case '-':
            uint64_t result = "char3";
            break;
          case '1':
            uint64_t result = "uchar3";
            break;
          default:
            goto LABEL_74;
        }
      }
      break;
    case 4:
      if (a1 <= 40)
      {
        if (a1 <= 28)
        {
          if (a1 == 3)
          {
            uint64_t result = "float4";
          }
          else
          {
            if (a1 != 16) {
              goto LABEL_74;
            }
            uint64_t result = "half4";
          }
        }
        else
        {
          switch(a1)
          {
            case 29:
              uint64_t result = "int4";
              break;
            case 33:
              uint64_t result = "uint4";
              break;
            case 37:
              uint64_t result = "short4";
              break;
            default:
              goto LABEL_74;
          }
        }
      }
      else if (a1 > 52)
      {
        switch(a1)
        {
          case '5':
            uint64_t result = "BOOL4";
            break;
          case 'Q':
            uint64_t result = "long4";
            break;
          case 'U':
            uint64_t result = "ulong4";
            break;
          default:
            goto LABEL_74;
        }
      }
      else
      {
        switch(a1)
        {
          case ')':
            uint64_t result = "ushort4";
            break;
          case '-':
            uint64_t result = "char4";
            break;
          case '1':
            uint64_t result = "uchar4";
            break;
          default:
            goto LABEL_74;
        }
      }
      break;
    default:
LABEL_74:
      uint64_t result = (const char *)&unk_2557AB8A6;
      break;
  }
  return result;
}

uint64_t MTLDataTypeGetComponentType(int a1)
{
  if ((a1 - 3) > 0x55) {
    return 0;
  }
  else {
    return dword_2557AA148[a1 - 3];
  }
}

uint64_t getRequiredBuiltIns(uint64_t result, unsigned char *a2, int a3, unsigned int a4, BOOL *a5, unsigned char *a6, int a7)
{
  uint64_t v7 = *(unsigned char **)result;
  unsigned int v8 = *(unsigned __int8 *)(*(void *)result + 5);
  char v9 = 2;
  switch(a3)
  {
    case 0:
      goto LABEL_7;
    case 1:
      goto LABEL_6;
    case 2:
      v7[1] = 1;
      if (a4 < 2) {
        goto LABEL_7;
      }
      uint64_t v7 = (unsigned char *)(*(void *)result + 2);
LABEL_6:
      *uint64_t v7 = 1;
LABEL_7:
      if (!v8) {
        return result;
      }
      uint64_t v7 = *(unsigned char **)result;
      char v9 = v8;
LABEL_14:
      _DWORD v7[5] = v9;
      *(unsigned char *)(*(void *)result + 6) = v9;
      *(unsigned char *)(*(void *)result + 7) = v9;
      return result;
    case 3:
      v7 += 3;
      goto LABEL_6;
    case 4:
      uint64_t v7[3] = 1;
      *a5 = a7 != 0;
      uint64_t v7 = a6;
      goto LABEL_6;
    case 5:
      goto LABEL_10;
    case 6:
      goto LABEL_14;
    case 7:
      *a2 = 1;
LABEL_10:
      if (v8 <= 1) {
        char v9 = 1;
      }
      else {
        char v9 = v8;
      }
      goto LABEL_14;
    case 8:
      *a2 = 1;
      goto LABEL_14;
    default:
      abort();
  }
}

uint64_t MetalModulePass::MetalModulePass(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = 4;
  *(void *)uint64_t result = &unk_2704532C8;
  *(void *)(result + 32) = *(void *)(a3 + 72);
  *(void *)(result + 64) = a3;
  *(_DWORD *)(result + 152) = 0;
  *(void *)(result + 136) = 0;
  *(void *)(result + 144) = 0;
  *(_DWORD *)(result + 176) = 0;
  *(void *)(result + 160) = 0;
  *(void *)(result + 168) = 0;
  return result;
}

uint64_t MetalModulePass::doInitialization(MetalModulePass *this, llvm::Module *a2)
{
  *((void *)this + 5) = *(void *)a2;
  *((void *)this + 7) = llvm::Module::getDataLayout(a2);
  *((void *)this + 9) = llvm::Type::getInt64Ty(*((llvm::Type **)this + 5), v4);
  *((void *)this + 10) = llvm::Type::getInt32Ty(*((llvm::Type **)this + 5), v5);
  *((void *)this + 11) = llvm::Type::getInt16Ty(*((llvm::Type **)this + 5), v6);
  *((void *)this + 12) = llvm::Type::getInt8Ty(*((llvm::Type **)this + 5), v7);
  *((void *)this + 13) = llvm::Type::getInt1Ty(*((llvm::Type **)this + 5), v8);
  *((void *)this + 14) = llvm::Type::getInt8PtrTy(*((llvm::Type **)this + 5), 0);
  *((void *)this + 6) = a2;
  return 0;
}

uint64_t MetalModulePass::runOnModule(MetalModulePass *this, llvm::Module *a2)
{
  MTLBoundsCheck::getMetalMetadata(a2, (uint64_t)&v9);
  if (v11)
  {
    *((_DWORD *)this + 30) = v9;
    uint64_t v4 = v10;
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((void *)this + 16) = v4;
  MTLBoundsCheck::getVisibleFunctionsMetadata(a2, (uint64_t)&v6);
  llvm::deallocate_buffer(*((llvm **)this + 17), (void *)(16 * *((unsigned int *)this + 38)));
  *((void *)this + 17) = v6;
  *((void *)this + 18) = v7;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  *((_DWORD *)this + 38) = v8;
  int v8 = 0;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)&v6);
  MTLBoundsCheck::getIntersectionFunctionsMetadata(a2, (uint64_t)&v6);
  llvm::deallocate_buffer(*((llvm **)this + 20), (void *)(16 * *((unsigned int *)this + 44)));
  *((void *)this + 20) = v6;
  *((void *)this + 21) = v7;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  *((_DWORD *)this + 44) = v8;
  int v8 = 0;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)&v6);
  return 0;
}

void sub_25571A920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MetalModulePass::getMetadata(llvm::MDString **this, llvm::LLVMContext *a2, const char *a3)
{
  return llvm::MDString::get(this[5], a2, a3);
}

uint64_t MetalModulePass::getMetadata()
{
  return llvm::MDString::get();
}

{
  uint64_t vars8;

  llvm::TypeSize::operator unsigned long long();
  return MetalModulePass::getMetadata<unsigned long long>();
}

uint64_t MetalModulePass::getMetadata<unsigned long long>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

uint64_t MetalModulePass::getMetadata(MetalModulePass *this, llvm::Value *a2)
{
  return llvm::ValueAsMetadata::get();
}

uint64_t MetalModulePass::getMetadata(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

{
  return a2;
}

uint64_t MetalModulePass::getTypeForStride(MetalModulePass *this, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 1:
      uint64_t result = *((void *)this + 12);
      break;
    case 2:
      uint64_t result = *((void *)this + 11);
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      return result;
    case 4:
      uint64_t result = *((void *)this + 10);
      break;
    case 8:
      goto LABEL_4;
    default:
      if (a2 == 16) {
LABEL_4:
      }
        uint64_t result = llvm::VectorType::get();
      break;
  }
  return result;
}

uint64_t MetalModulePass::getEntryFunction(MetalModulePass *this)
{
  uint64_t v1 = *((void *)this + 16);
  if (v1) {
    return *(void *)(*(void *)(v1 - 8 * *(unsigned int *)(v1 + 8)) + 128);
  }
  else {
    return 0;
  }
}

void MetalModulePass::insertFunctionArgumentMD(uint64_t a1, uint64_t a2, llvm::LLVMContext *a3, uint64_t a4, llvm::LLVMContext *a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v22 = a8;
  uint64_t v23 = a7;
  uint64_t v20 = a4;
  uint64_t v21 = a3;
  uint64_t v19 = a5;
  if (a2)
  {
    uint64_t v8 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
    if (v8)
    {
      if (a6) {
        int v10 = *(_DWORD *)(v8 + 8);
      }
      else {
        int v10 = 0;
      }
      int v18 = v10;
      unint64_t v14 = *(llvm::MDString **)(a1 + 40);
      uint64_t v15 = v17;
      uint64_t v16 = 0;
      MTLMDBuilder::emplace_back<unsigned int &,char const*&>(&v14, (uint64_t)&v18, &v21);
      if (BYTE4(v23)) {
        MTLMDBuilder::emplace_back<char const(&)[18],unsigned int &>(&v14, (llvm::LLVMContext *)"air.arg_type_size", (const char *)&v23);
      }
      if (BYTE4(v22)) {
        MTLMDBuilder::emplace_back<char const(&)[18],unsigned int &>(&v14, (llvm::LLVMContext *)"air.arg_type_align_size", (const char *)&v22);
      }
      MTLMDBuilder::emplace_back<char const(&)[18],char const*&,char const(&)[13],char const*&>(&v14, (llvm::LLVMContext *)"air.arg_type_name", (const char *)&v20, (llvm::LLVMContext *)"air.arg_name", &v19);
      uint64_t Impl = llvm::MDTuple::getImpl();
      LODWORD(v16) = 0;
      if (!a6)
      {
        __srCC_SHA256_CTX c = MetalModulePass::getMetadata((uint64_t)&v14, Impl);
        llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)&v15, &__src, &v25);
      }
      unint64_t v12 = *(unsigned int *)(v8 + 8);
      if (v12)
      {
        for (unint64_t i = 0; i < v12; ++i)
        {
          __srCC_SHA256_CTX c = MetalModulePass::getMetadata((uint64_t)&v14, *(void *)(v8 - 8 * v12 + 8 * i));
          llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)&v15, &__src, &v25);
          unint64_t v12 = *(unsigned int *)(v8 + 8);
          if (!a6 && *(void *)(v8 - 8 * v12 + 8 * i))
          {
            MTLMDBuilder::getMetadata<unsigned long long>();
            llvm::MDNode::replaceOperandWith();
            unint64_t v12 = *(unsigned int *)(v8 + 8);
          }
        }
      }
      if (a6 == 1)
      {
        __srCC_SHA256_CTX c = MetalModulePass::getMetadata((uint64_t)&v14, Impl);
        llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)&v15, &__src, &v25);
      }
      llvm::MDTuple::getImpl();
      llvm::MDNode::replaceOperandWith();
      if (v15 != v17) {
        free(v15);
      }
    }
  }
}

void sub_25571AD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11 != v11) {
    free(a11);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *MTLMDBuilder::emplace_back<unsigned int &,char const*&>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext **a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v5 = (unsigned int *)(a1 + 1);
  __src[0] = MTLMDBuilder::getMetadata<unsigned int>();
  __src[1] = MTLMDBuilder::getMetadata(a1, *a3, v6);
  return llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>(v5, __src, &v9);
}

unsigned int *MTLMDBuilder::emplace_back<char const(&)[18],unsigned int &>(llvm::MDString **a1, llvm::LLVMContext *a2, const char *a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v3 = (unsigned int *)(a1 + 1);
  __src[0] = MTLMDBuilder::getMetadata(a1, a2, a3);
  __src[1] = MTLMDBuilder::getMetadata<unsigned int>();
  return llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>(v3, __src, &v6);
}

unsigned int *MTLMDBuilder::emplace_back<char const(&)[18],char const*&,char const(&)[13],char const*&>(llvm::MDString **a1, llvm::LLVMContext *a2, const char *a3, llvm::LLVMContext *a4, llvm::LLVMContext **a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v9 = (unsigned int *)(a1 + 1);
  __src[0] = MTLMDBuilder::getMetadata(a1, a2, a3);
  __src[1] = MTLMDBuilder::getMetadata(a1, *(llvm::LLVMContext **)a3, v10);
  void __src[2] = MTLMDBuilder::getMetadata(a1, a4, v11);
  __src[3] = MTLMDBuilder::getMetadata(a1, *a5, v12);
  return llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>(v9, __src, &v15);
}

uint64_t MTLMDBuilder::getMetadata<unsigned long long>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

uint64_t MetalModulePass::insertArgumentType(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v12[4] = *MEMORY[0x263EF8340];
  uint64_t v10 = a3;
  v11[0] = v12;
  v11[1] = (void *)0x400000000;
  if (!a4) {
    llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v11, &v10);
  }
  if (*(_DWORD *)(a2 + 12) != 1)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v9 = 0;
      uint64_t v9 = *(void *)(*(void *)(a2 + 16) + 8 * v6 + 8);
      llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v11, &v9);
      ++v6;
    }
    while (v6 < (*(_DWORD *)(a2 + 12) - 1));
  }
  if (a4 == 1) {
    llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v11, &v10);
  }
  uint64_t v7 = llvm::FunctionType::get();
  if (v11[0] != v12) {
    free(v11[0]);
  }
  return v7;
}

void sub_25571B0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12 != v12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back(a1, *a2);
    unsigned int v4 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(void *)(*(void *)a1 + 8 * v3) = *a2;
    unsigned int v4 = v3 + 1;
    *(_DWORD *)(a1 + 8) = v4;
  }
  return *(void *)a1 + 8 * v4 - 8;
}

uint64_t MetalModulePass::insertArgument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6, int a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  v32[0] = a4;
  v32[1] = a5;
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t inserted = MetalModulePass::insertArgumentType(a1, v10, a3, a7);
  uint64_t v12 = *(_DWORD *)(a2 + 32) & 0xF;
  __int16 v36 = 261;
  uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)a2);
  uint64_t v34 = v13;
  uint64_t v14 = llvm::Function::Create(inserted, v12, (uint64_t)&Name, *(void *)(a2 + 40));
  llvm::GlobalObject::copyMetadata();
  __int16 v15 = *(_WORD *)(v14 + 18);
  if (a7)
  {
    if (v15) {
      llvm::Function::BuildLazyArguments((llvm::Function *)v14);
    }
    char v16 = 1;
    HIBYTE(v36) = 1;
    if (*a6)
    {
      uint64_t Name = a6;
      char v16 = 3;
    }
  }
  else
  {
    if (v15) {
      llvm::Function::BuildLazyArguments((llvm::Function *)v14);
    }
    char v16 = 1;
    HIBYTE(v36) = 1;
    if (*a6)
    {
      uint64_t Name = a6;
      char v16 = 3;
    }
  }
  LOBYTE(v36) = v16;
  llvm::Value::setName();
  llvm::Function::copyAttributesFrom((llvm::Function *)v14, (const llvm::Function *)a2);
  uint64_t Name = v35;
  uint64_t v34 = 0x800000000;
  if (!a7) {
    llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&Name, v32);
  }
  int v29 = 128;
  v28[0] = MEMORY[0x25A28D370](0x2000, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty(v28);
  LOBYTE(v30[0]) = 0;
  char v31 = 0;
  if (*(_DWORD *)(v10 + 12) != 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    do
    {
      BOOL v27 = 0;
      if (*(_WORD *)(a2 + 18)) {
        llvm::Function::BuildLazyArguments((llvm::Function *)a2);
      }
      BOOL v27 = (llvm::Value *)(*(void *)(a2 + 88) + v19);
      if (*(_WORD *)(v14 + 18)) {
        llvm::Function::BuildLazyArguments((llvm::Function *)v14);
      }
      uint64_t v21 = *(void *)(v14 + 88);
      uint64_t v25 = *(void *)(a2 + 112);
      uint64_t ParamAttrs = llvm::compat::getParamAttrs((llvm::compat *)&v25, v20, v18);
      llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&Name, &ParamAttrs);
      uint64_t v22 = (llvm::ValueHandleBase *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[](v28, &v27);
      llvm::ValueHandleBase::operator=(v22, v21 + 40 * (a7 == 0) + v19);
      uint64_t v20 = (const llvm::AttributeList *)((char *)v20 + 1);
      v19 += 40;
    }
    while ((unint64_t)v20 < (*(_DWORD *)(v10 + 12) - 1));
  }
  if (a7 == 1) {
    llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&Name, v32);
  }
  BOOL v27 = *(llvm::Value **)(a2 + 112);
  llvm::compat::getFnAttrs((llvm::compat *)&v27, v17);
  uint64_t ParamAttrs = *(void *)(a2 + 112);
  llvm::compat::getRetAttrs((llvm::compat *)&ParamAttrs, v23);
  *(void *)(v14 + 112) = llvm::AttributeList::get();
  if (*(void *)(a2 + 72) != a2 + 72) {
    llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(v14 + 72, v14 + 72, a2 + 72, *(void *)(a2 + 80), a2 + 72);
  }
  llvm::ValueMapper::ValueMapper();
  llvm::ValueMapper::remapFunction((llvm::ValueMapper *)&v27, (Function *)v14);
  MEMORY[0x25A28D030](&v27);
  if (v31)
  {
    llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap(v30);
    char v31 = 0;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::~DenseMap((unsigned int *)v28);
  if (Name != v35) {
    free(Name);
  }
  return v14;
}

void sub_25571B464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a23 != v23) {
    free(a23);
  }
  _Unwind_Resume(exception_object);
}

void *llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[](uint64_t *a1, llvm::Value **a2)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v5, *a2);
  uint64_t v5 = &unk_270453368;
  v6[3] = a1;
  uint64_t v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::FindAndConstruct(a1, (uint64_t)&v5)+ 5;
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
  return v3;
}

void sub_25571B53C(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(v1 + 8));
  _Unwind_Resume(a1);
}

unsigned int *llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::~ValueMap(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap((unsigned int *)(a1 + 24));
    *(unsigned char *)(a1 + 48) = 0;
  }
  return llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::~DenseMap((unsigned int *)a1);
}

void MetalModulePass::mutateFunctionArgumentMD(uint64_t a1, uint64_t a2, unsigned int a3, llvm::LLVMContext *a4, llvm::LLVMContext *a5, llvm::LLVMContext *a6)
{
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * a3);
      uint64_t v8 = *(void *)(v7 - 8 * *(unsigned int *)(v7 + 8));
      uint64_t v9 = *(llvm::MDString **)(a1 + 40);
      uint64_t v10 = &v12;
      uint64_t v11 = 0;
      MTLMDBuilder::getMDTuple<llvm::Metadata *,char const*,char const*,char const*,char const*,char const*>(&v9, v8, a4, (llvm::LLVMContext *)"air.arg_type_name", a5, (llvm::LLVMContext *)"air.arg_name", a6);
      llvm::MDNode::replaceOperandWith();
      if (v10 != &v12) {
        free(v10);
      }
    }
  }
}

void sub_25571B64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (a11 != v11) {
    free(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMDBuilder::getMDTuple<llvm::Metadata *,char const*,char const*,char const*,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, llvm::LLVMContext *a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7)
{
  MetalModulePass::getMetadata((uint64_t)a1, a2);
  MTLMDBuilder::getMetadata(a1, a3, v13);
  MTLMDBuilder::getMetadata(a1, a4, v14);
  MTLMDBuilder::getMetadata(a1, a5, v15);
  MTLMDBuilder::getMetadata(a1, a6, v16);
  MTLMDBuilder::getMetadata(a1, a7, v17);
  return llvm::MDTuple::getImpl();
}

void MetalModulePass::~MetalModulePass(MetalModulePass *this)
{
  *(void *)this = &unk_2704532C8;
  unsigned int v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  unsigned int v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t llvm::Pass::doFinalization()
{
  return 0;
}

void __clang_call_terminate(void *a1)
{
}

uint64_t llvm::ValueHandleBase::operator=(llvm::ValueHandleBase *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3 != a2)
  {
    if (v3 != -8192 && v3 != -4096 && v3 != 0) {
      llvm::ValueHandleBase::RemoveFromUseList(this);
    }
    *((void *)this + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2) {
      llvm::ValueHandleBase::AddToUseList(this);
    }
  }
  return a2;
}

unsigned int *llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap(unsigned int *a1)
{
  return a1;
}

unsigned int *llvm::DenseMapBase<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::destroyAll(unsigned int *result)
{
  uint64_t v1 = result[4];
  if (v1)
  {
    uint64_t v2 = 16 * v1;
    uint64_t result = (unsigned int *)(*(void *)result + 8);
    do
    {
      if ((*((void *)result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)result);
      }
      result += 4;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

unsigned int *llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::~DenseMap(unsigned int *a1)
{
  return a1;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    v10[0] = 2;
    v10[1] = 0;
    uint64_t v11 = -4096;
    uint64_t v12 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = &unk_270453368;
    v6[0] = 2;
    v6[1] = 0;
    uint64_t v7 = -8192;
    uint64_t v2 = v1 << 6;
    uint64_t v3 = (llvm::ValueHandleBase *)(*(void *)a1 + 40);
    do
    {
      uint64_t v4 = *((void *)v3 - 2);
      if (v4 != v11 && v4 != v7) {
        llvm::ValueHandleBase::~ValueHandleBase(v3);
      }
      llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)((char *)v3 - 32));
      uint64_t v3 = (llvm::ValueHandleBase *)((char *)v3 + 64);
      v2 -= 64;
    }
    while (v2);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v10);
  }
}

llvm::CallbackVH *llvm::CallbackVH::CallbackVH(llvm::CallbackVH *this, llvm::Value *a2)
{
  *((void *)this + 1) = 2;
  *((void *)this + 2) = 0;
  uint64_t v3 = (llvm::CallbackVH *)((char *)this + 8);
  *((void *)v3 + 2) = a2;
  if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2) {
    llvm::ValueHandleBase::AddToUseList(v3);
  }
  *(void *)this = MEMORY[0x263F8BBC8] + 16;
  return this;
}

void llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v4, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = &unk_270453368;
  v4[3] = v2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase(v2, (uint64_t)&v3);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v4);
}

void sub_25571BB60(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v14, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v4 = *(int32x2_t **)(v3 + 24);
  uint64_t v13 = &unk_270453368;
  __int16 v15 = v4;
  uint64_t v10 = 0;
  int v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t *)v4, (uint64_t)&v13, &v10);
  unint64_t v6 = *(void *)v4 + ((unint64_t)v4[2].u32[0] << 6);
  if (v5) {
    uint64_t v7 = v10;
  }
  else {
    uint64_t v7 = (llvm::Value *)v6;
  }
  if ((llvm::Value *)(*(void *)v15 + ((unint64_t)v15[2].u32[0] << 6)) != v7)
  {
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v12, 3u, (void *)v7 + 5);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase(v15, v7);
    uint64_t v8 = v15;
    uint64_t v10 = a2;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, 3u, v12);
    llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert((uint64_t)v8, &v10, (uint64_t)v9);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v12);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v14);
}

void sub_25571BC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v19 = v18;
  llvm::ValueHandleBase::~ValueHandleBase(v19);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&a17);
  llvm::ValueHandleBase::~ValueHandleBase(v17);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = 0;
  uint64_t v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a2, &v6);
  if (v3)
  {
    uint64_t v4 = v6;
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(v6 + 40));
    v7[0] = 2;
    v7[1] = 0;
    _DWORD v7[2] = -8192;
    uint64_t v8 = 0;
    unint64_t v6 = (char *)&unk_270453368;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 8), v7);
    *((void *)v4 + 4) = v8;
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v7);
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

void sub_25571BD94(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

llvm::ValueHandleBase *llvm::ValueHandleBase::ValueHandleBase(llvm::ValueHandleBase *this, unsigned int a2, void *a3)
{
  *(void *)this = 2 * a2;
  *((void *)this + 1) = 0;
  uint64_t v4 = a3[2];
  *((void *)this + 2) = v4;
  if (v4 != -8192 && v4 != -4096 && v4 != 0) {
    llvm::ValueHandleBase::AddToExistingUseList(this, (llvm::ValueHandleBase **)(*a3 & 0xFFFFFFFFFFFFFFF8));
  }
  return this;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    v17[0] = 2;
    v17[1] = 0;
    v17[2] = -4096;
    v17[3] = 0;
    void v16[3] = 0;
    v16[4] = &unk_270453368;
    v16[0] = 2;
    v16[1] = 0;
    v16[2] = -8192;
    uint64_t v5 = *(void *)(a2 + 24);
    unsigned int v6 = v3 - 1;
    uint64_t v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v3 - 1);
    uint64_t v8 = v4 + (v7 << 6);
    uint64_t v9 = *(void *)(v8 + 24);
    if (v5 == v9)
    {
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      uint64_t v10 = 1;
      while (v9 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v9 == -8192;
        }
        if (v14) {
          uint64_t v12 = v8;
        }
        int v15 = v7 + v13++;
        uint64_t v7 = v15 & v6;
        uint64_t v8 = v4 + (v7 << 6);
        uint64_t v9 = *(void *)(v8 + 24);
        if (v5 == v9) {
          goto LABEL_4;
        }
      }
      uint64_t v10 = 0;
      if (v12) {
        uint64_t v8 = v12;
      }
    }
LABEL_4:
    *a3 = v8;
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v16);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v17);
  }
  else
  {
    uint64_t v10 = 0;
    *a3 = 0;
  }
  return v10;
}

uint64_t llvm::ValueHandleBase::operator=(llvm::ValueHandleBase *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t result = a2[2];
  if (v3 == result) {
    return v3;
  }
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
  {
    llvm::ValueHandleBase::RemoveFromUseList(this);
    uint64_t result = a2[2];
  }
  *((void *)this + 2) = result;
  if (result != -8192 && result != -4096 && result != 0)
  {
    llvm::ValueHandleBase::AddToExistingUseList(this, (llvm::ValueHandleBase **)(*a2 & 0xFFFFFFFFFFFFFFF8));
    return *((void *)this + 2);
  }
  return result;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::erase(int32x2_t *a1, void *a2)
{
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(a2 + 5));
  v5[0] = 2;
  v5[1] = 0;
  v5[2] = -8192;
  uint64_t v6 = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 1), v5);
  a2[4] = v6;
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v5);
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

void sub_25571C054(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

double llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert@<D0>(uint64_t a1@<X0>, llvm::Value **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2 + 1;
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, *a2);
  uint64_t v7 = &unk_270453368;
  v8[3] = a1;
  std::pair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>::pair[abi:ne180100]<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,0>(&v9, (uint64_t)&v7, v5);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::try_emplace<llvm::WeakTrackingVH>(a1, (uint64_t)&v9, v11, (uint64_t)&v12);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&v10);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v8);
  double result = *(double *)&v12;
  *(_OWORD *)a3 = v12;
  *(unsigned char *)(a3 + 16) = v13;
  return result;
}

void sub_25571C12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  llvm::ValueHandleBase::~ValueHandleBase(v16);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&a16);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::try_emplace<llvm::WeakTrackingVH>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  long long v12 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a2, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucket<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>(a1, v12, a2, a3);
    uint64_t v9 = (void *)result;
    char v10 = 1;
  }
  unint64_t v11 = *(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 16) << 6);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucket<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(a1, a3, a3, a2);
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 1), (void *)(a3 + 8));
  void v6[4] = *(void *)(a3 + 32);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v6 + 5), 3u, a4);
  return v6;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::grow(a1, v7);
  char v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  v11[0] = 2;
  v11[1] = 0;
  v11[2] = -4096;
  void v11[3] = 0;
  char v10 = &unk_270453368;
  if (a4[3] != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
  return a4;
}

void llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x25A28D370]((unint64_t)v8 << 6, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::moveFromOldBuckets(a1, v4, (void *)v4 + 8 * v3);
    llvm::deallocate_buffer(v4, (void *)(v3 << 6));
  }
  else
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t *)a1);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty(uint64_t *a1)
{
  a1[1] = 0;
  v7[0] = 2;
  v7[1] = 0;
  _DWORD v7[2] = -4096;
  uint64_t v8 = 0;
  uint64_t v1 = *((unsigned int *)a1 + 4);
  if (v1)
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (char *)(*a1 + (v1 << 6));
    uint64_t v4 = (llvm::ValueHandleBase *)(*a1 + 8);
    do
    {
      unint64_t v5 = llvm::ValueHandleBase::ValueHandleBase(v4, (LODWORD(v7[0]) >> 1) & 3, v7);
      unint64_t v6 = (char *)v5 - 8;
      *((void *)v5 - 1) = &unk_270453368;
      *((void *)v5 + 3) = v8;
      uint64_t v4 = (llvm::ValueHandleBase *)((char *)v5 + 64);
      v2 += 64;
    }
    while (v6 + 64 != v3);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v7);
}

void sub_25571C4D0(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::moveFromOldBuckets(uint64_t a1, void *a2, void *a3)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t *)a1);
  v15[0] = 2;
  v15[1] = 0;
  uint64_t v16 = -4096;
  uint64_t v17 = 0;
  uint64_t v13 = 0;
  BOOL v14 = &unk_270453368;
  v11[0] = 2;
  v11[1] = 0;
  uint64_t v12 = -8192;
  if (a2 != a3)
  {
    unint64_t v6 = (llvm::ValueHandleBase *)(a2 + 5);
    do
    {
      uint64_t v7 = *((void *)v6 - 2);
      if (v7 != v16 && v7 != v12)
      {
        uint64_t v18 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, (uint64_t)v6 - 40, &v18);
        uint64_t v9 = v18;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v18 + 8), (void *)v6 - 4);
        *(void *)(v9 + 32) = *((void *)v6 - 1);
        llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v9 + 40), 3u, v6);
        ++*(_DWORD *)(a1 + 8);
        llvm::ValueHandleBase::~ValueHandleBase(v6);
      }
      llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)((char *)v6 - 32));
      char v10 = (void *)((char *)v6 + 24);
      unint64_t v6 = (llvm::ValueHandleBase *)((char *)v6 + 64);
    }
    while (v10 != a3);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v15);
}

void sub_25571C628(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v2);
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void *std::pair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>::pair[abi:ne180100]<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,0>(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a2 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 1), (*(_DWORD *)(a2 + 8) >> 1) & 3, (void *)(a2 + 8));
  *a1 = &unk_270453368;
  a1[4] = *(void *)(v5 + 24);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 5), 3u, a3);
  return a1;
}

void sub_25571C6C4(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::ValueHandleBase::~ValueHandleBase(llvm::ValueHandleBase *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 != -8192 && v1 != -4096 && v1 != 0) {
    llvm::ValueHandleBase::RemoveFromUseList(this);
  }
}

uint64_t llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap(uint64_t a1)
{
  return a1;
}

uint64_t MTLMDBuilder::getMetadata<unsigned int>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

uint64_t llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v2) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::FindAndConstruct(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t)a1, a2, a2, v7);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v5 + 1), (void *)(a2 + 8));
    v5[4] = *(void *)(a2 + 32);
    v5[5] = 6;
    v5[6] = 0;
    v5[7] = 0;
  }
  return v5;
}

void llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a5) {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList();
  }
}

void createMTLRaytracingIndirectionPass()
{
}

void sub_25571C968(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40908DD517);
  _Unwind_Resume(a1);
}

void MTLRaytracingIndirectionPass::~MTLRaytracingIndirectionPass(MTLRaytracingIndirectionPass *this)
{
  *(void *)this = &unk_2704532C8;
  unsigned int v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  unsigned int v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t MTLRaytracingIndirectionPass::runOnModule(MTLBoundsCheck::SharedPassData **this, llvm::Module *a2)
{
  v35[8] = *MEMORY[0x263EF8340];
  MetalModulePass::runOnModule((MetalModulePass *)this, a2);
  uint64_t v4 = MTLRaytracingIndirectionPass::setRaytracingNoASAN((MTLRaytracingIndirectionPass *)this, a2);
  this[23] = (MTLBoundsCheck::SharedPassData *)MTLBoundsCheck::SharedPassData::getOrInsertDeviceIndirectionTableGV(this[8]);
  llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(&v33, *((void *)a2 + 4), (uint64_t)a2 + 24);
  uint64_t v5 = (llvm::Value **)v33;
  if (v34)
  {
    unsigned int v29 = v4;
    unint64_t v6 = (llvm::Value **)((char *)v33 + 8 * v34);
    while (1)
    {
      uint64_t Name = (const void *)llvm::Value::getName(*v5);
      unint64_t v9 = v8;
      if (v8 < 0x25) {
        goto LABEL_24;
      }
      char v10 = Name;
      int v11 = memcmp(Name, "air.get_buffer_visible_function_table", 0x25uLL);
      uint64_t v12 = MTLRaytracingIndirectionPass::replaceGetBufferFunctionTable;
      if (!v11) {
        goto LABEL_15;
      }
      if (v9 >= 0x2A)
      {
        int v14 = memcmp(v10, "air.get_buffer_intersection_function_table", 0x2AuLL);
        uint64_t v12 = MTLRaytracingIndirectionPass::replaceGetBufferFunctionTable;
        if (!v14) {
          goto LABEL_15;
        }
      }
      else if (v9 < 0x28)
      {
        if (v9 == 39)
        {
          int v13 = memcmp(v10, "air.get_instance_acceleration_structure", 0x27uLL);
          uint64_t v12 = MTLRaytracingIndirectionPass::replaceGetAccelerationStructure;
          if (!v13) {
            goto LABEL_15;
          }
        }
        goto LABEL_24;
      }
      int v15 = memcmp(v10, "air.get_primitive_acceleration_structure", 0x28uLL);
      uint64_t v12 = MTLRaytracingIndirectionPass::replaceGetAccelerationStructure;
      if (!v15
        || (int v16 = memcmp(v10, "air.get_instance_acceleration_structure", 0x27uLL),
            uint64_t v12 = MTLRaytracingIndirectionPass::replaceGetAccelerationStructure,
            !v16)
        || v9 >= 0x2A
        && (int v17 = memcmp(v10, "air.get_primitive_data_intersection_result", 0x2AuLL),
            uint64_t v12 = MTLRaytracingIndirectionPass::replaceGetPrimitiveDataIntersectionResult,
            !v17))
      {
LABEL_15:
        uint64_t v18 = v12;
        llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v30, *((void *)*v5 + 1), 0);
        uint64_t v19 = (char *)v30;
        if (v31)
        {
          uint64_t v20 = 8 * v31;
          do
          {
            if (*(void *)v19 && *(unsigned char *)(*(void *)v19 + 16) == 84) {
              ((void (*)(MTLBoundsCheck::SharedPassData **))v18)(this);
            }
            v19 += 8;
            v20 -= 8;
          }
          while (v20);
          uint64_t v19 = (char *)v30;
        }
        if (v19 != v32) {
          free(v19);
        }
      }
LABEL_24:
      if (++v5 == v6)
      {
        uint64_t v5 = (llvm::Value **)v33;
        uint64_t v4 = v29;
        break;
      }
    }
  }
  if (v5 != v35) {
    free(v5);
  }
  llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(&v33, *((void *)a2 + 4), (uint64_t)a2 + 24);
  uint64_t v21 = (llvm::Value **)v33;
  if (v34)
  {
    uint64_t v22 = (llvm::Value **)((char *)v33 + 8 * v34);
    do
    {
      uint64_t v23 = (const void *)llvm::Value::getName(*v21);
      if (v24 >= 0x2A && !memcmp(v23, "air.set_buffer_intersection_function_table", 0x2AuLL))
      {
        llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v30, *((void *)*v21 + 1), 0);
        uint64_t v25 = (uint64_t *)v30;
        if (v31)
        {
          uint64_t v26 = 8 * v31;
          do
          {
            uint64_t v27 = *v25;
            if (*v25 && *(unsigned char *)(v27 + 16) == 84) {
              MTLRaytracingIndirectionPass::replaceSetBufferFunctionTable((uint64_t)this, v27);
            }
            ++v25;
            v26 -= 8;
          }
          while (v26);
          uint64_t v25 = (uint64_t *)v30;
        }
        if (v25 != (uint64_t *)v32) {
          free(v25);
        }
      }
      ++v21;
    }
    while (v21 != v22);
    uint64_t v21 = (llvm::Value **)v33;
  }
  if (v21 != v35) {
    free(v21);
  }
  return v4;
}

void sub_25571CDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

uint64_t MTLRaytracingIndirectionPass::setRaytracingNoASAN(MTLRaytracingIndirectionPass *this, llvm::Module *a2)
{
  v13[8] = *MEMORY[0x263EF8340];
  llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(&v11, *((void *)a2 + 4), (uint64_t)a2 + 24);
  unsigned int v2 = (llvm::Value **)v11;
  if (v12)
  {
    char v3 = 0;
    uint64_t v4 = 8 * v12;
    do
    {
      uint64_t Name = (void *)llvm::Value::getName(*v2);
      if (v6 >= 0x10)
      {
        BOOL v7 = *Name == 0x61725F7269615F5FLL && Name[1] == 0x676E696361727479;
        if (v7
          || v6 >= 0x17
          && (*Name == 0x697265776F6C5F5FLL ? (BOOL v8 = Name[1] == 0x6E692E62696C676ELL) : (BOOL v8 = 0),
              v8 ? (BOOL v9 = *(void *)((char *)Name + 15) == 0x2E6C616E7265746ELL) : (BOOL v9 = 0),
              v9))
        {
          llvm::MDTuple::getImpl();
          llvm::Value::setMetadata();
          llvm::MDTuple::getImpl();
          llvm::Value::setMetadata();
          char v3 = 1;
        }
      }
      ++v2;
      v4 -= 8;
    }
    while (v4);
    unsigned int v2 = (llvm::Value **)v11;
  }
  else
  {
    char v3 = 0;
  }
  if (v2 != v13) {
    free(v2);
  }
  return v3 & 1;
}

void sub_25571D000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
}

uint64_t MTLRaytracingIndirectionPass::replaceGetBufferFunctionTable(MTLRaytracingIndirectionPass *a1, llvm::Value *a2)
{
  UnwrapBufferFunctionTable = (llvm::Instruction *)MTLRaytracingIndirectionPass::createUnwrapBufferFunctionTable(a1, a2);
  llvm::Instruction::insertAfter(UnwrapBufferFunctionTable, a2);
  llvm::Value::replaceAllUsesWith();
  return llvm::CallBase::setArgOperand((uint64_t)UnwrapBufferFunctionTable, 0, (uint64_t)a2);
}

uint64_t MTLRaytracingIndirectionPass::replaceGetAccelerationStructure(MTLRaytracingIndirectionPass *a1, llvm::Value *a2)
{
  AccelerationStructure = (llvm::Instruction *)MTLRaytracingIndirectionPass::createGetAccelerationStructure(a1, a2);
  llvm::Instruction::insertAfter(AccelerationStructure, a2);
  return llvm::Value::replaceAllUsesWith();
}

uint64_t MTLRaytracingIndirectionPass::replaceGetPrimitiveDataIntersectionResult(MTLRaytracingIndirectionPass *a1, llvm::Value *a2)
{
  UnwrapPrimitiveDataIntersectionResult = (llvm::Instruction *)MTLRaytracingIndirectionPass::createUnwrapPrimitiveDataIntersectionResult(a1, a2);
  llvm::Instruction::insertAfter(UnwrapPrimitiveDataIntersectionResult, a2);
  llvm::Value::replaceAllUsesWith();
  return llvm::CallBase::setArgOperand((uint64_t)UnwrapPrimitiveDataIntersectionResult, 0, (uint64_t)a2);
}

void MTLRaytracingIndirectionPass::replaceSetBufferFunctionTable(uint64_t a1, uint64_t a2)
{
  v13[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(llvm::Type ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)v10, *(llvm::BasicBlock **)(a2 + 40), 0, 0, 0);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v10, (llvm::Instruction *)a2);
  uint64_t v5 = (llvm::Type **)MTLRaytracingIndirectionPass::createGetBufferFunctionTableCall(a1, a2);
  llvm::PointerType::get();
  unint64_t v6 = (llvm::Type *)llvm::PointerType::get();
  __int16 v9 = 257;
  PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)v10, v5, v6, (const llvm::Twine *)v8);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v10, v4, (uint64_t)PointerBitCastOrAddrSpaceCast, 0);
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v13);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v12);
  if (v10[0] != &v11) {
    free(v10[0]);
  }
}

void sub_25571D2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

void *llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<std::reference_wrapper<llvm::Function>>::append<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_25571D30C(_Unwind_Exception *exception_object)
{
  char v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<std::reference_wrapper<llvm::Function>>::append<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a2 == a3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      ++v4;
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != a3);
  }
  uint64_t v6 = *(unsigned int *)(result + 8);
  if (v4 + v6 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    BOOL v7 = (void *)(*(void *)result + 8 * v6);
    do
    {
      uint64_t v8 = v3 - 56;
      if (!v3) {
        uint64_t v8 = 0;
      }
      *v7++ = v8;
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v6 + v4;
  return result;
}

uint64_t MTLRaytracingIndirectionPass::createUnwrapBufferFunctionTable(MTLRaytracingIndirectionPass *this, llvm::Value *a2)
{
  void v12[5] = *(MTLBoundsCheck **)MEMORY[0x263EF8340];
  uint64_t Module = llvm::Instruction::getModule(a2);
  Context = (llvm::BasicBlock *)llvm::Value::getContext(a2);
  v10[0] = "mtl.unwrap_buffer_function_table";
  __int16 v11 = 259;
  uint64_t v5 = (MTLBoundsCheck *)llvm::PointerType::get();
  v12[0] = *(MTLBoundsCheck **)a2;
  uint64_t v6 = getMangledFunction<llvm::Type *>(Module, (llvm::Twine *)v10, v5, v12);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v6 + 32) = *(_DWORD *)(v6 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    __int16 v11 = 257;
    llvm::BasicBlock::Create(Context, (llvm::LLVMContext *)v10, (const llvm::Twine *)v6, 0, v7);
  }
  if (v6) {
    uint64_t v8 = *(void *)(v6 + 24);
  }
  else {
    uint64_t v8 = 0;
  }
  v12[0] = a2;
  __int16 v11 = 257;
  return llvm::CallInst::Create(v8, v6, (uint64_t)v12, 1, 0, 0);
}

void sub_25571D6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t llvm::CallBase::setArgOperand(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = result - 32 * (*(_DWORD *)(result + 20) & 0x7FFFFFF);
  uint64_t v4 = (void *)(v3 + 32 * a2);
  uint64_t v5 = v4;
  if (*v4)
  {
    BOOL v7 = (void *)v4[2];
    uint64_t v6 = v4 + 2;
    *BOOL v7 = *(v6 - 1);
    uint64_t v8 = *(v6 - 1);
    if (v8) {
      *(void *)(v8 + 16) = *v6;
    }
  }
  *uint64_t v5 = a3;
  if (a3)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    __int16 v9 = (void *)(a3 + 8);
    uint64_t v10 = v11;
    uint64_t v12 = v3 + 32 * a2;
    *(void *)(v12 + 8) = v11;
    if (v11) {
      *(void *)(v10 + 16) = v12 + 8;
    }
    *(void *)(v12 + 16) = v9;
    void *v9 = v5;
  }
  return result;
}

uint64_t getMangledFunction<llvm::Type *>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, MTLBoundsCheck **a4)
{
  llvm::Twine::str((uint64_t *)&v37, this);
  MTLBoundsCheck::getMangledTypeStr(a3, v7, &v36);
  uint64_t v8 = std::string::insert(&v36, 0, ".");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v33 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (v33 >= 0) {
    std::string::size_type v11 = HIBYTE(v33);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(&v37, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  memset(&v36, 0, sizeof(v36));
  int v13 = *a4;
  MTLBoundsCheck::getMangledTypeStr(v13, v12, &v35);
  int v14 = std::string::insert(&v35, 0, ".");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t v33 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0) {
    int v16 = __p;
  }
  else {
    int v16 = (void **)__p[0];
  }
  if (v33 >= 0) {
    std::string::size_type v17 = HIBYTE(v33);
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  std::string::append(&v37, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  std::string::size_type size = v36.__r_.__value_.__l.__size_;
  if (v36.__r_.__value_.__l.__size_ >= v36.__r_.__value_.__r.__words[2])
  {
    uint64_t v20 = (uint64_t)(v36.__r_.__value_.__l.__size_ - v36.__r_.__value_.__r.__words[0]) >> 3;
    if ((unint64_t)(v20 + 1) >> 61) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = (uint64_t)(v36.__r_.__value_.__r.__words[2] - v36.__r_.__value_.__r.__words[0]) >> 2;
    if (v21 <= v20 + 1) {
      unint64_t v21 = v20 + 1;
    }
    if (v36.__r_.__value_.__r.__words[2] - v36.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22) {
      uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v36.__r_.__value_.__r.__words[2], v22);
    }
    else {
      uint64_t v23 = 0;
    }
    unint64_t v24 = (MTLBoundsCheck **)&v23[8 * v20];
    std::string::size_type v25 = (std::string::size_type)&v23[8 * v22];
    *unint64_t v24 = v13;
    std::string::size_type v19 = (std::string::size_type)(v24 + 1);
    uint64_t v26 = (char *)v36.__r_.__value_.__l.__size_;
    std::string::size_type v27 = v36.__r_.__value_.__r.__words[0];
    if (v36.__r_.__value_.__l.__size_ != v36.__r_.__value_.__r.__words[0])
    {
      do
      {
        BOOL v28 = (MTLBoundsCheck *)*((void *)v26 - 1);
        v26 -= 8;
        *--unint64_t v24 = v28;
      }
      while (v26 != (char *)v27);
      uint64_t v26 = (char *)v36.__r_.__value_.__r.__words[0];
    }
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    v36.__r_.__value_.__l.__size_ = v19;
    v36.__r_.__value_.__r.__words[2] = v25;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *(void *)v36.__r_.__value_.__l.__size_ = v13;
    std::string::size_type v19 = size + 8;
  }
  v36.__r_.__value_.__l.__size_ = v19;
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t v30 = llvm::FunctionType::get();
    __int16 v34 = 260;
    __p[0] = &v37;
    uint64_t Function = llvm::Function::Create(v30, 0, (uint64_t)__p, a1);
  }
  if (v36.__r_.__value_.__r.__words[0])
  {
    v36.__r_.__value_.__l.__size_ = v36.__r_.__value_.__r.__words[0];
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return Function;
}

void sub_25571D9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

llvm::Type **llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*a2 == a3) {
    return a2;
  }
  if (*((unsigned __int8 *)a2 + 16) > 0x14u)
  {
    uint64_t PointerBitCastOrAddrSpaceCast = llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast();
    return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, PointerBitCastOrAddrSpaceCast, (uint64_t)a4);
  }
  a2 = (llvm::Type **)(*(uint64_t (**)(void))(**((void **)this + 9) + 240))(*((void *)this + 9));
  if (a2) {
    BOOL v6 = *((unsigned __int8 *)a2 + 16) >= 0x1Cu;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return a2;
  }
  return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)a2, (uint64_t)a4);
}

void **llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(void **a1)
{
  if (*a1 != a1 + 2) {
    free(*a1);
  }
  return a1;
}

void std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_25571DBF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder(uint64_t a1, llvm::BasicBlock *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Context = llvm::BasicBlock::getContext(this);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x200000000;
  *(void *)(a1 + 64) = Context;
  *(void *)(a1 + 72) = a1 + 120;
  *(void *)(a1 + 80) = a1 + 128;
  *(void *)(a1 + 88) = a3;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(unsigned char *)(a1 + 102) = 7;
  *(void *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = a5;
  *(void *)(a1 + 120) = MEMORY[0x263F8BBD0] + 16;
  *(void *)(a1 + 128) = MEMORY[0x263F8BC08] + 16;
  *(void *)(a1 + 48) = this;
  *(void *)(a1 + 56) = (char *)this + 40;
  return a1;
}

uint64_t MTLRaytracingIndirectionPass::createGetAccelerationStructure(MTLRaytracingIndirectionPass *this, llvm::Value *a2)
{
  v20[5] = *MEMORY[0x263EF8340];
  llvm::Instruction::getModule(a2);
  MTLBoundsCheck::getMangledTypeStr(*(MTLBoundsCheck **)a2, v4, &v18);
  uint64_t v5 = std::string::insert(&v18, 0, "mtl.get_acceleration_structure");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  std::string::size_type v17 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  v18.__r_.__value_.__r.__words[0] = *(void *)(*((void *)a2 - 4) + 24);
  uint64_t v7 = getOrInsertFunction<std::string &,llvm::FunctionType *>();
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v7))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v7 + 32) = *(_DWORD *)(v7 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    uint64_t v8 = (llvm::BasicBlock *)*((void *)this + 5);
    __int16 v19 = 257;
    llvm::BasicBlock::Create(v8, (llvm::LLVMContext *)&v18, (const llvm::Twine *)v7, 0, v9);
  }
  if (v7) {
    uint64_t v10 = *(void *)(v7 + 24);
  }
  else {
    uint64_t v10 = 0;
  }
  std::string::size_type v11 = (uint64_t *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[4];
  v20[0] = v12;
  v20[1] = v13;
  __int16 v19 = 257;
  uint64_t v14 = llvm::CallInst::Create(v10, v7, (uint64_t)v20, 2, 0, 0);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  return v14;
}

void sub_25571E0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t getOrInsertFunction<std::string &,llvm::FunctionType *>()
{
  llvm::Module::getOrInsertFunction();
  uint64_t result = v0;
  if (*(unsigned char *)(v0 + 16) == 5) {
    return *(void *)(v0 - 32 * (*(_DWORD *)(v0 + 20) & 0x7FFFFFF));
  }
  return result;
}

llvm::Value *llvm::IRBuilderBase::CreateBitOrPointerCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  uint64_t v7 = *a2;
  if (*a2 == a3) {
    return (llvm::Value *)a2;
  }
  int v8 = *((_DWORD *)v7 + 2);
  int v9 = v8;
  if ((*((_DWORD *)v7 + 2) & 0xFE) == 0x12) {
    int v9 = *(unsigned __int8 *)(**((void **)v7 + 2) + 8);
  }
  if (v9 == 15
    && ((*((_DWORD *)a3 + 2) & 0xFE) != 0x12
      ? (int v10 = *((_DWORD *)a3 + 2))
      : (int v10 = *(unsigned __int8 *)(**((void **)a3 + 2) + 8)),
        v10 == 13))
  {
    uint64_t v12 = 47;
  }
  else
  {
    if ((*((_DWORD *)v7 + 2) & 0xFE) == 0x12) {
      int v8 = *(unsigned __int8 *)(**((void **)v7 + 2) + 8);
    }
    if (v8 == 13
      && ((*((_DWORD *)a3 + 2) & 0xFE) != 0x12
        ? (int v13 = *((_DWORD *)a3 + 2))
        : (int v13 = *(unsigned __int8 *)(**((void **)a3 + 2) + 8)),
          v13 == 15))
    {
      uint64_t v12 = 48;
    }
    else
    {
      uint64_t v12 = 49;
    }
  }
  return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this, v12, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t llvm::IRBuilderBase::CreateConstInBoundsGEP1_32(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unsigned int a4, const llvm::Twine *a5)
{
  llvm::Type::getInt32Ty(this[8], a2);
  std::string::size_type v11 = (uint64_t *)llvm::ConstantInt::get();
  uint64_t result = (*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, uint64_t))(*(void *)this[9] + 48))(this[9], a2, a3, &v11, 1, 1);
  if (!result)
  {
    int v10 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, &v11, 1);
    llvm::GetElementPtrInst::setIsInBounds(v10);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)v10, (uint64_t)a5);
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateGEP(llvm::IRBuilderBase *this, llvm::Type *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::string::size_type v11 = (uint64_t *)a4;
  uint64_t v12 = a4;
  uint64_t result = (*(uint64_t (**)(void, llvm::Type *, llvm::Value *, llvm::Value **, uint64_t, void))(**((void **)this + 9) + 48))(*((void *)this + 9), a2, a3, &v12, 1, 0);
  if (!result)
  {
    __int16 v13 = 257;
    uint64_t v10 = llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, &v11, 1);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v10, (uint64_t)a5);
  }
  return result;
}

uint64_t MTLRaytracingIndirectionPass::createUnwrapPrimitiveDataIntersectionResult(MTLRaytracingIndirectionPass *this, llvm::Value *a2)
{
  v11[5] = *(MTLBoundsCheck **)MEMORY[0x263EF8340];
  uint64_t Module = llvm::Instruction::getModule(a2);
  uint64_t Context = (llvm::BasicBlock *)llvm::Value::getContext(a2);
  v9[0] = "mtl.unwrap_primitive_data_intersection_result";
  __int16 v10 = 259;
  v11[0] = *(MTLBoundsCheck **)a2;
  uint64_t v5 = getMangledFunction<llvm::Type *>(Module, (llvm::Twine *)v9, v11[0], v11);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v5))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(v5 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    __int16 v10 = 257;
    llvm::BasicBlock::Create(Context, (llvm::LLVMContext *)v9, (const llvm::Twine *)v5, 0, v6);
  }
  if (v5) {
    uint64_t v7 = *(void *)(v5 + 24);
  }
  else {
    uint64_t v7 = 0;
  }
  v11[0] = a2;
  __int16 v10 = 257;
  return llvm::CallInst::Create(v7, v5, (uint64_t)v11, 1, 0, 0);
}

void sub_25571E790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

llvm::Instruction *llvm::IRBuilderBase::CreateAdd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, uint64_t a5, uint64_t a6)
{
  int v6 = a6;
  int v7 = a5;
  uint64_t result = (llvm::Instruction *)(*(uint64_t (**)(void, llvm::Value *, llvm::Value *, uint64_t, uint64_t))(**((void **)this + 9) + 16))(*((void *)this + 9), a2, a3, a5, a6);
  if (!result)
  {
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, v7, v6);
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateAnd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 9) + 24))(*((void *)this + 9));
  if (!result)
  {
    uint64_t v7 = llvm::BinaryOperator::Create();
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v7, (uint64_t)a4);
  }
  return result;
}

llvm::Instruction *llvm::IRBuilderBase::CreateInsertNUWNSWBinOp(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v11 = llvm::BinaryOperator::Create();
  uint64_t v12 = (llvm::Instruction *)llvm::IRBuilderBase::Insert<llvm::CastInst>(a1, v11, a5);
  __int16 v13 = v12;
  if (a6) {
    llvm::Instruction::setHasNoUnsignedWrap(v12);
  }
  if (a7) {
    llvm::Instruction::setHasNoSignedWrap(v13);
  }
  return v13;
}

uint64_t llvm::IRBuilderBase::CreateICmp(uint64_t a1, uint64_t a2, llvm::CmpInst **a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72));
  if (!result)
  {
    uint64_t v9 = llvm::User::operator new((llvm::User *)0x40);
    llvm::CmpInst::makeCmpResultType(*a3, v10);
    llvm::CmpInst::CmpInst();
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v9, a5);
  }
  return result;
}

void sub_25571EA84(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::CmpInst::makeCmpResultType(llvm::CmpInst *this, llvm::Type *a2)
{
  int v3 = *((_DWORD *)this + 2);
  uint64_t result = llvm::Type::getInt1Ty(*(llvm::Type **)this, a2);
  if (this && (v3 & 0xFE) == 0x12)
  {
    return llvm::VectorType::get();
  }
  return result;
}

void *llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_25571EB40(_Unwind_Exception *exception_object)
{
  int v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a2 == a3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      ++v4;
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != a3);
  }
  uint64_t v6 = *(unsigned int *)(result + 8);
  if (v4 + v6 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v7 = (void *)(*(void *)result + 8 * v6);
    do
    {
      *v7++ = *(void *)(v3 + 24);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v6 + v4;
  return result;
}

void llvm::IRBuilderBase::SetInsertPoint(llvm::IRBuilderBase *this, llvm::Instruction *a2)
{
  *((void *)this + 6) = *((void *)a2 + 5);
  *((void *)this + 7) = (char *)a2 + 24;
  uint64_t v4 = *((void *)a2 + 6);
  if (v4)
  {
    llvm::MetadataTracking::track();
    uint64_t v3 = v4;
  }
  else
  {
    uint64_t v3 = 0;
  }
  llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((uint64_t)this, 0, v3);
  llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)&v4);
}

void sub_25571EC74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  llvm::TrackingMDRef::~TrackingMDRef((llvm::TrackingMDRef *)va);
  _Unwind_Resume(a1);
}

uint64_t MTLRaytracingIndirectionPass::createGetBufferFunctionTableCall(uint64_t a1, uint64_t a2)
{
  v26[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = (void ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[8];
  std::string::basic_string[abi:ne180100]<0>(&v20, "air.get_buffer_intersection_function_table");
  uint64_t v7 = (MTLBoundsCheck *)llvm::PointerType::get();
  MTLBoundsCheck::getMangledTypeStr(v7, v8, &v18);
  uint64_t v9 = std::string::insert(&v18, 0, ".");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v23 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v23 >= 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if (v23 >= 0) {
    std::string::size_type v12 = HIBYTE(v23);
  }
  else {
    std::string::size_type v12 = (std::string::size_type)__p[1];
  }
  std::string::append(&v20, (const std::string::value_type *)v11, v12);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    llvm::PointerType::get();
    __p[0] = *v5;
    __p[1] = *v6;
    uint64_t v14 = llvm::FunctionType::get();
    __int16 v24 = 260;
    __p[0] = &v20;
    uint64_t Function = llvm::Function::Create(v14, 0, (uint64_t)__p, *(void *)(a1 + 48));
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
  }
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)__p, *(llvm::BasicBlock **)(a2 + 40), 0, 0, 0);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)__p, (llvm::Instruction *)a2);
  if (Function) {
    uint64_t v15 = *(void *)(Function + 24);
  }
  else {
    uint64_t v15 = 0;
  }
  v21[0] = v5;
  v21[1] = v6;
  __int16 v19 = 257;
  uint64_t v16 = llvm::IRBuilderBase::CreateCall((uint64_t)__p, v15, Function, (uint64_t)v21, 2, (uint64_t)&v18, 0);
  *(_WORD *)(v16 + 18) = *(_WORD *)(v16 + 18) & 0xFFFC | 1;
  llvm::Value::getContext((llvm::Value *)v16);
  *(void *)(v16 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v16);
  *(void *)(v16 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v26);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v25);
  if (__p[0] != &v23) {
    free(__p[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_25571EF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = result;
  int v8 = a2;
  uint64_t v7 = a3;
  if (a3)
  {
    uint64_t v4 = *(unsigned int *)(result + 8);
    if (v4)
    {
      uint64_t v5 = (uint64_t *)(*(void *)result + 8);
      uint64_t v6 = 16 * v4;
      while (*((_DWORD *)v5 - 2) != a2)
      {
        v5 += 2;
        v6 -= 16;
        if (!v6) {
          return llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(result, &v8, &v7);
        }
      }
      *uint64_t v5 = a3;
    }
    else
    {
      return llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(result, &v8, &v7);
    }
  }
  else
  {
    uint64_t result = std::remove_if[abi:ne180100]<std::pair<unsigned int,llvm::MDNode *> *,llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(unsigned int,llvm::MDNode *)::{lambda(std::pair<unsigned int,llvm::MDNode *> const&)#1}>(*(void *)result, *(void *)result + 16 * *(unsigned int *)(result + 8), a2);
    *(_DWORD *)(v3 + 8) = (unint64_t)(result - *(void *)v3) >> 4;
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<std::pair<unsigned int,llvm::MDNode *>>::emplace_back<unsigned int &,llvm::MDNode *&>(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::MDNode *>,true>::push_back(a1, *a2, *a3);
    uint64_t v5 = *(void *)a1;
    unsigned int v7 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *(void *)a1 + 16 * v4;
    *(_DWORD *)uint64_t v6 = *a2;
    *(void *)(v6 + 8) = *a3;
    unsigned int v7 = v4 + 1;
    *(_DWORD *)(a1 + 8) = v7;
  }
  return v5 + 16 * v7 - 16;
}

uint64_t std::remove_if[abi:ne180100]<std::pair<unsigned int,llvm::MDNode *> *,llvm::IRBuilderBase::AddOrRemoveMetadataToCopy(unsigned int,llvm::MDNode *)::{lambda(std::pair<unsigned int,llvm::MDNode *> const&)#1}>(uint64_t result, uint64_t a2, int a3)
{
  if (result != a2)
  {
    while (*(_DWORD *)result != a3)
    {
      result += 16;
      if (result == a2) {
        return a2;
      }
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 16; i != a2; i += 16)
    {
      if (*(_DWORD *)i != a3)
      {
        *(_DWORD *)uint64_t result = *(_DWORD *)i;
        *(void *)(result + 8) = *(void *)(i + 8);
        result += 16;
      }
    }
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::MDNode *>,true>::push_back(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = (void *)(*(void *)result + 16 * v3);
  *uint64_t v4 = a2;
  v4[1] = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t llvm::IRBuilderBase::setFPAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 || *(void *)(a1 + 88)) {
    llvm::Instruction::setMetadata();
  }
  llvm::Instruction::setFastMathFlags();
  return a2;
}

uint64_t llvm::IRBuilderBase::CreateAlignedStore(uint64_t a1, llvm::Type **a2, uint64_t a3, __int16 a4)
{
  if ((a4 & 0xFF00) == 0)
  {
    uint64_t Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 48));
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
    llvm::DataLayout::getABITypeAlign(DataLayout, *a2);
  }
  uint64_t v8 = llvm::User::operator new((llvm::User *)0x40);
  llvm::StoreInst::StoreInst();
  __int16 v11 = 257;
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v8, (uint64_t)v10);
}

void sub_25571F2BC(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

void createMTLAddCustomFunctionsPass()
{
}

void sub_25571F33C(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLAddCustomFunctionsPass::~MTLAddCustomFunctionsPass(MTLAddCustomFunctionsPass *this)
{
  *(void *)this = &unk_2704532C8;
  unsigned int v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  unsigned int v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t MTLAddCustomFunctionsPass::runOnModule(MTLAddCustomFunctionsPass *this, llvm::Module *a2)
{
  return 1;
}

const llvm::Twine *MTLAddCustomFunctionsPass::getOrInsertUncheckedLoadFunction(MTLAddCustomFunctionsPass *this, llvm::BasicBlock **a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  unsigned int v3 = (uint64_t *)((char *)this + 72);
  v8[0] = (void *)llvm::PointerType::get();
  uint64_t v4 = (const llvm::Twine *)getOrInsertFunction<char const(&)[34],llvm::Type *&,llvm::PointerType *>((uint64_t)a2, "mtl.force_not_checked.load.i64.p1", v3, (uint64_t *)v8);
  if (llvm::GlobalValue::isDeclaration(v4))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *((_DWORD *)v4 + 8) = *((_DWORD *)v4 + 8) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    uint64_t v5 = *a2;
    __int16 v9 = 257;
    llvm::BasicBlock::Create(v5, (llvm::LLVMContext *)v8, v4, 0, v6);
  }
  llvm::GlobalObject::setSection();
  return v4;
}

void sub_25571F6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t getOrInsertFunction<char const(&)[34],llvm::Type *&,llvm::PointerType *>(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4)
{
  size_t v8 = strlen(__s);
  llvm::Module::getOrInsertFunction<llvm::PointerType *>(a1, (uint64_t)__s, v8, 0, *a3, *a4);
  uint64_t result = v9;
  if (*(unsigned char *)(v9 + 16) == 5) {
    return *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
  }
  return result;
}

uint64_t llvm::Module::getOrInsertFunction<llvm::PointerType *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v8 = a6;
  llvm::SmallVector<llvm::Type *,1u>::SmallVector((uint64_t)&v9, &v8, 1);
  llvm::FunctionType::get();
  uint64_t inserted = llvm::Module::getOrInsertFunction();
  if (v9 != v10) {
    free(v9);
  }
  return inserted;
}

void sub_25571F83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t llvm::SmallVector<llvm::Type *,1u>::SmallVector(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x100000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_25571F8A8(_Unwind_Exception *exception_object)
{
  unsigned int v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

void createMTLBuiltinsReportPass()
{
}

void sub_25571F934(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLBuiltinsReportPass::~MTLBuiltinsReportPass(MTLBuiltinsReportPass *this)
{
  *(void *)this = &unk_2704532C8;
  unsigned int v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  unsigned int v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t MTLBuiltinsReportPass::runOnModule(MTLBuiltinsReportPass *this, llvm::Module *a2)
{
  MetalModulePass::runOnModule(this, a2);
  if (MTLBuiltinsReportPass::handleLLVMTrap((uint64_t)this)) {
    return 1;
  }
  return MTLBuiltinsReportPass::handleLLVMTrap((uint64_t)this);
}

uint64_t MTLBuiltinsReportPass::handleLLVMTrap(uint64_t a1)
{
  v32[7] = *MEMORY[0x263EF8340];
  uint64_t Function = llvm::Module::getFunction();
  if (Function)
  {
    unsigned int v3 = (llvm::Function *)Function;
    MTLIRBuilder::MTLIRBuilder<llvm::LLVMContext &>((uint64_t)v29, *(llvm::LLVMContext **)(a1 + 40));
    v24[0] = *((void *)v3 + 1);
    v24[1] = 0;
    llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v26, v24);
    uint64_t v4 = (llvm::Instruction **)v26;
    if (v27)
    {
      char v5 = 0;
      uint64_t v6 = 8 * v27;
      do
      {
        unsigned int v7 = *v4;
        if (*v4 && *((unsigned char *)v7 + 16) == 84)
        {
          llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v29, *v4);
          uint64_t v8 = *(MTLBoundsCheck::SharedPassData **)(a1 + 64);
          NameOfParentuint64_t Function = MTLBoundsCheck::SharedPassData::getNameOfParentFunction(v8, v7);
          MTLBoundsCheck::SharedPassData::indexForString((uint64_t)v8, NameOfParentFunction, v10);
          MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), v7);
          uint64_t inserted = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV(*(llvm::Type ****)(a1 + 64));
          std::string::size_type v12 = *(llvm::Type **)(inserted + 24);
          __int16 v25 = 257;
          AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v29, v12, inserted, 0, 0, (uint64_t)v24);
          uint64_t v14 = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
          uint64_t v15 = *(llvm::Type **)(v14 + 24);
          __int16 v25 = 257;
          uint64_t v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v29, v15, v14, 0, 0, (uint64_t)v24);
          ImageIDuint64_t Function = MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64));
          if (ImageIDFunction) {
            uint64_t v18 = *(void *)(ImageIDFunction + 24);
          }
          else {
            uint64_t v18 = 0;
          }
          __int16 v25 = 257;
          __int16 v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v29, v18, ImageIDFunction, 0, 0, (uint64_t)v24, 0);
          uint64_t v20 = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV(*(llvm::Type ****)(a1 + 64));
          unint64_t v21 = *(llvm::Type **)(v20 + 24);
          __int16 v25 = 257;
          unint64_t v22 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v29, v21, v20, 0, 0, (uint64_t)v24);
          MTLIRBuilder::CreateTrapCall((MTLIRBuilder *)v29, AlignedLoad, v16, v22, v19);
          llvm::Instruction::eraseFromParent(v7);
          char v5 = 1;
        }
        ++v4;
        v6 -= 8;
      }
      while (v6);
      uint64_t v4 = (llvm::Instruction **)v26;
    }
    else
    {
      char v5 = 0;
    }
    if (v4 != (llvm::Instruction **)&v28) {
      free(v4);
    }
    if (!*((void *)v3 + 1)) {
      llvm::Function::eraseFromParent(v3);
    }
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v32);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v31);
    if (v29[0] != &v30) {
      free(v29[0]);
    }
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

void sub_25571FD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
}

uint64_t MTLIRBuilder::MTLIRBuilder<llvm::LLVMContext &>(uint64_t a1, llvm::LLVMContext *a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x200000000;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a1 + 120;
  *(void *)(a1 + 80) = a1 + 128;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(unsigned char *)(a1 + 102) = 7;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v3 = MEMORY[0x263F8BBD0] + 16;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = v3;
  *(void *)(a1 + 128) = MEMORY[0x263F8BC08] + 16;
  MTLIRBuilder::initTypeCache((MTLIRBuilder *)a1, a2);
  return a1;
}

void sub_25571FE28(_Unwind_Exception *a1)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(v1);
  _Unwind_Resume(a1);
}

void *llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(void *a1, uint64_t *a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)a1, *a2, a2[1]);
  return a1;
}

void sub_25571FE80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t arraySizeFromTypeName(void *__src, size_t __len)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v5 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v5 = __len | 7;
    }
    size_t v6 = v5 + 1;
    uint64_t v4 = operator new(v5 + 1);
    v14[1] = __len;
    int64_t v15 = v6 | 0x8000000000000000;
    v14[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v15) = __len;
  uint64_t v4 = v14;
  if (__len) {
LABEL_8:
  }
    memmove(v4, __src, __len);
  *((unsigned char *)v4 + __len) = 0;
  int v7 = SHIBYTE(v15);
  uint64_t v8 = (void *)v14[0];
  if (v15 >= 0) {
    uint64_t v9 = (const char *)v14;
  }
  else {
    uint64_t v9 = (const char *)v14[0];
  }
  v16[0] = 0;
  std::string::size_type v17 = v9;
  v16[1] = strlen(v9);
  NextToken = BasicParser::getNextToken((BasicParser *)v16);
  if (!strcmp(NextToken, "array"))
  {
    uint64_t v12 = 0;
    if ((v7 & 0x80000000) == 0) {
      return v12;
    }
    goto LABEL_15;
  }
  do
  {
    __int16 v11 = NextToken;
    NextToken = BasicParser::getNextToken((BasicParser *)v16);
  }
  while (NextToken);
  uint64_t v12 = atol(v11);
  if (v7 < 0) {
LABEL_15:
  }
    operator delete(v8);
  return v12;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<textureTypeMap(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_25572063C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a52 < 0) {
    operator delete(v80[3]);
  }
  if (a58 < 0) {
    operator delete(v80[6]);
  }
  if (a64 < 0) {
    operator delete(v80[9]);
  }
  if (a70 < 0) {
    operator delete(v80[12]);
  }
  if (a72 < 0) {
    operator delete(v80[15]);
  }
  if (a73 < 0) {
    operator delete(v80[18]);
  }
  if (a74 < 0) {
    operator delete(v80[21]);
  }
  if (a75 < 0) {
    operator delete(v80[24]);
  }
  if (a76 < 0) {
    operator delete(v80[27]);
  }
  if (a77 < 0) {
    operator delete(v80[30]);
  }
  for (; v79 != &a78; v79 -= 32)
  {
    if (*(v79 - 9) < 0) {
      operator delete(*((void **)v79 - 4));
    }
  }
  MEMORY[0x25A28E250](v78, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_2557208B0()
{
}

void sub_2557208BC()
{
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  size_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    size_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t std::map<std::string,TextureTokenData>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TextureTokenData> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_2557209CC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TextureTokenData> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__construct_node<std::pair<std::string const,TextureTokenData> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (const void **)a2[1];
      do
      {
        int64_t v15 = v14;
        uint64_t v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (const void **)a2;
      do
      {
        int64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    uint64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  __int16 v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      __int16 v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      uint64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      uint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return (const void **)std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

void std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__construct_node<std::pair<std::string const,TextureTokenData> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::string::size_type v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v6 + 7) = *(void *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_255720CA0(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void bufferTypeMap(void)::$_0::operator()(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_2557250FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a56 < 0) {
    operator delete(v81[3]);
  }
  if (a62 < 0) {
    operator delete(v81[6]);
  }
  if (a68 < 0) {
    operator delete(v81[9]);
  }
  if (a72 < 0) {
    operator delete(v81[12]);
  }
  if (a73 < 0) {
    operator delete(v81[15]);
  }
  if (a74 < 0) {
    operator delete(v81[18]);
  }
  if (a75 < 0) {
    operator delete(v81[21]);
  }
  if (a76 < 0) {
    operator delete(v81[24]);
  }
  if (a77 < 0) {
    operator delete(v81[27]);
  }
  if (a78 < 0) {
    operator delete(v81[30]);
  }
  if (a79 < 0) {
    operator delete(*v87);
  }
  if (a80 < 0) {
    operator delete(v87[3]);
  }
  if (a81 < 0) {
    operator delete(v87[6]);
  }
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(v87[9]);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete(v87[12]);
  }
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete(v87[15]);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete(v87[18]);
  }
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete(v87[21]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete(v87[24]);
  }
  if (SLOBYTE(STACK[0x29F]) < 0) {
    operator delete(v87[27]);
  }
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete(v87[30]);
  }
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete(*v86);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete(v86[3]);
  }
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete(v86[6]);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete(v86[9]);
  }
  if (SLOBYTE(STACK[0x32F]) < 0) {
    operator delete(v86[12]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete(v86[15]);
  }
  if (SLOBYTE(STACK[0x35F]) < 0) {
    operator delete(v86[18]);
  }
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete(v86[21]);
  }
  if (SLOBYTE(STACK[0x38F]) < 0) {
    operator delete(v86[24]);
  }
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    operator delete(v86[27]);
  }
  if (SLOBYTE(STACK[0x3BF]) < 0) {
    operator delete(v86[30]);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete(*v84);
  }
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete(v84[3]);
  }
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete(v84[6]);
  }
  if (SLOBYTE(STACK[0x41F]) < 0) {
    operator delete(v84[9]);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete(v84[12]);
  }
  if (SLOBYTE(STACK[0x44F]) < 0) {
    operator delete(v84[15]);
  }
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete(v84[18]);
  }
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete(v84[21]);
  }
  if (SLOBYTE(STACK[0x497]) < 0) {
    operator delete(v84[24]);
  }
  if (SLOBYTE(STACK[0x4AF]) < 0) {
    operator delete(v84[27]);
  }
  if (SLOBYTE(STACK[0x4C7]) < 0) {
    operator delete(v84[30]);
  }
  if (SLOBYTE(STACK[0x4DF]) < 0) {
    operator delete(*v85);
  }
  if (SLOBYTE(STACK[0x4F7]) < 0) {
    operator delete(v85[3]);
  }
  if (SLOBYTE(STACK[0x50F]) < 0) {
    operator delete(v85[6]);
  }
  if (SLOBYTE(STACK[0x527]) < 0) {
    operator delete(v85[9]);
  }
  if (SLOBYTE(STACK[0x53F]) < 0) {
    operator delete(v85[12]);
  }
  if (SLOBYTE(STACK[0x557]) < 0) {
    operator delete(v85[15]);
  }
  if (SLOBYTE(STACK[0x56F]) < 0) {
    operator delete(v85[18]);
  }
  if (SLOBYTE(STACK[0x587]) < 0) {
    operator delete(v85[21]);
  }
  if (SLOBYTE(STACK[0x59F]) < 0) {
    operator delete(v85[24]);
  }
  if (SLOBYTE(STACK[0x5B7]) < 0) {
    operator delete(v85[27]);
  }
  if (SLOBYTE(STACK[0x5CF]) < 0) {
    operator delete(v85[30]);
  }
  if (SLOBYTE(STACK[0x5E7]) < 0) {
    operator delete((void *)STACK[0x5D0]);
  }
  if (SLOBYTE(STACK[0x5FF]) < 0) {
    operator delete((void *)STACK[0x5E8]);
  }
  if (SLOBYTE(STACK[0x617]) < 0) {
    operator delete((void *)STACK[0x600]);
  }
  if (SLOBYTE(STACK[0x62F]) < 0) {
    operator delete((void *)STACK[0x618]);
  }
  if (SLOBYTE(STACK[0x647]) < 0) {
    operator delete((void *)STACK[0x630]);
  }
  if (SLOBYTE(STACK[0x65F]) < 0) {
    operator delete((void *)STACK[0x648]);
  }
  if (SLOBYTE(STACK[0x677]) < 0) {
    operator delete((void *)STACK[0x660]);
  }
  if (SLOBYTE(STACK[0x68F]) < 0) {
    operator delete((void *)STACK[0x678]);
  }
  if (SLOBYTE(STACK[0x6A7]) < 0) {
    operator delete((void *)STACK[0x690]);
  }
  if (SLOBYTE(STACK[0x6BF]) < 0) {
    operator delete((void *)STACK[0x6A8]);
  }
  if (SLOBYTE(STACK[0x6D7]) < 0) {
    operator delete((void *)STACK[0x6C0]);
  }
  if (SLOBYTE(STACK[0x6EF]) < 0) {
    operator delete((void *)STACK[0x6D8]);
  }
  if (SLOBYTE(STACK[0x707]) < 0) {
    operator delete((void *)STACK[0x6F0]);
  }
  if (SLOBYTE(STACK[0x71F]) < 0) {
    operator delete((void *)STACK[0x708]);
  }
  if (SLOBYTE(STACK[0x737]) < 0) {
    operator delete((void *)STACK[0x720]);
  }
  if (SLOBYTE(STACK[0x74F]) < 0) {
    operator delete((void *)STACK[0x738]);
  }
  if (SLOBYTE(STACK[0x767]) < 0) {
    operator delete((void *)STACK[0x750]);
  }
  if (SLOBYTE(STACK[0x77F]) < 0) {
    operator delete((void *)STACK[0x768]);
  }
  if (SLOBYTE(STACK[0x797]) < 0) {
    operator delete((void *)STACK[0x780]);
  }
  if (SLOBYTE(STACK[0x7AF]) < 0) {
    operator delete((void *)STACK[0x798]);
  }
  if (SLOBYTE(STACK[0x7C7]) < 0) {
    operator delete((void *)STACK[0x7B0]);
  }
  if (SLOBYTE(STACK[0x7DF]) < 0) {
    operator delete((void *)STACK[0x7C8]);
  }
  if (SLOBYTE(STACK[0x7F7]) < 0) {
    operator delete((void *)STACK[0x7E0]);
  }
  if (SLOBYTE(STACK[0x80F]) < 0) {
    operator delete((void *)STACK[0x7F8]);
  }
  if (SLOBYTE(STACK[0x827]) < 0) {
    operator delete((void *)STACK[0x810]);
  }
  if (SLOBYTE(STACK[0x83F]) < 0) {
    operator delete((void *)STACK[0x828]);
  }
  if (SLOBYTE(STACK[0x857]) < 0) {
    operator delete((void *)STACK[0x840]);
  }
  if (SLOBYTE(STACK[0x86F]) < 0) {
    operator delete((void *)STACK[0x858]);
  }
  if (SLOBYTE(STACK[0x887]) < 0) {
    operator delete((void *)STACK[0x870]);
  }
  if (SLOBYTE(STACK[0x89F]) < 0) {
    operator delete((void *)STACK[0x888]);
  }
  if (SLOBYTE(STACK[0x8B7]) < 0) {
    operator delete((void *)STACK[0x8A0]);
  }
  if (SLOBYTE(STACK[0x8CF]) < 0) {
    operator delete((void *)STACK[0x8B8]);
  }
  if (SLOBYTE(STACK[0x8E7]) < 0) {
    operator delete((void *)STACK[0x8D0]);
  }
  if (SLOBYTE(STACK[0x8FF]) < 0) {
    operator delete((void *)STACK[0x8E8]);
  }
  if (SLOBYTE(STACK[0x917]) < 0) {
    operator delete((void *)STACK[0x900]);
  }
  if (SLOBYTE(STACK[0x92F]) < 0) {
    operator delete((void *)STACK[0x918]);
  }
  if (SLOBYTE(STACK[0x947]) < 0) {
    operator delete((void *)STACK[0x930]);
  }
  if (SLOBYTE(STACK[0x95F]) < 0) {
    operator delete((void *)STACK[0x948]);
  }
  if (SLOBYTE(STACK[0x977]) < 0) {
    operator delete((void *)STACK[0x960]);
  }
  if (SLOBYTE(STACK[0x98F]) < 0) {
    operator delete((void *)STACK[0x978]);
  }
  if (SLOBYTE(STACK[0x9A7]) < 0) {
    operator delete((void *)STACK[0x990]);
  }
  if (SLOBYTE(STACK[0x9BF]) < 0) {
    operator delete((void *)STACK[0x9A8]);
  }
  if (SLOBYTE(STACK[0x9D7]) < 0) {
    operator delete((void *)STACK[0x9C0]);
  }
  if (SLOBYTE(STACK[0x9EF]) < 0) {
    operator delete((void *)STACK[0x9D8]);
  }
  if (SLOBYTE(STACK[0xA07]) < 0) {
    operator delete((void *)STACK[0x9F0]);
  }
  if (SLOBYTE(STACK[0xA1F]) < 0) {
    operator delete((void *)STACK[0xA08]);
  }
  if (SLOBYTE(STACK[0xA37]) < 0) {
    operator delete((void *)STACK[0xA20]);
  }
  if (SLOBYTE(STACK[0xA4F]) < 0) {
    operator delete((void *)STACK[0xA38]);
  }
  if (SLOBYTE(STACK[0xA67]) < 0) {
    operator delete((void *)STACK[0xA50]);
  }
  if (SLOBYTE(STACK[0xA7F]) < 0) {
    operator delete((void *)STACK[0xA68]);
  }
  if (SLOBYTE(STACK[0xA97]) < 0) {
    operator delete((void *)STACK[0xA80]);
  }
  if (SLOBYTE(STACK[0xAAF]) < 0) {
    operator delete((void *)STACK[0xA98]);
  }
  if (SLOBYTE(STACK[0xAC7]) < 0) {
    operator delete((void *)STACK[0xAB0]);
  }
  if (SLOBYTE(STACK[0xADF]) < 0) {
    operator delete((void *)STACK[0xAC8]);
  }
  if (SLOBYTE(STACK[0xAF7]) < 0) {
    operator delete((void *)STACK[0xAE0]);
  }
  if (SLOBYTE(STACK[0xB0F]) < 0) {
    operator delete((void *)STACK[0xAF8]);
  }
  if (SLOBYTE(STACK[0xB27]) < 0) {
    operator delete((void *)STACK[0xB10]);
  }
  if (SLOBYTE(STACK[0xB3F]) < 0) {
    operator delete((void *)STACK[0xB28]);
  }
  if (SLOBYTE(STACK[0xB57]) < 0) {
    operator delete((void *)STACK[0xB40]);
  }
  if (SLOBYTE(STACK[0xB6F]) < 0) {
    operator delete((void *)STACK[0xB58]);
  }
  if (SLOBYTE(STACK[0xB87]) < 0) {
    operator delete((void *)STACK[0xB70]);
  }
  if (SLOBYTE(STACK[0xB9F]) < 0) {
    operator delete((void *)STACK[0xB88]);
  }
  if (SLOBYTE(STACK[0xBB7]) < 0) {
    operator delete((void *)STACK[0xBA0]);
  }
  if (SLOBYTE(STACK[0xBCF]) < 0) {
    operator delete((void *)STACK[0xBB8]);
  }
  if (SLOBYTE(STACK[0xBE7]) < 0) {
    operator delete((void *)STACK[0xBD0]);
  }
  if (SLOBYTE(STACK[0xBFF]) < 0) {
    operator delete((void *)STACK[0xBE8]);
  }
  if (SLOBYTE(STACK[0xC17]) < 0) {
    operator delete((void *)STACK[0xC00]);
  }
  if (SLOBYTE(STACK[0xC2F]) < 0) {
    operator delete((void *)STACK[0xC18]);
  }
  if (SLOBYTE(STACK[0xC47]) < 0) {
    operator delete((void *)STACK[0xC30]);
  }
  if (SLOBYTE(STACK[0xC5F]) < 0) {
    operator delete((void *)STACK[0xC48]);
  }
  if (SLOBYTE(STACK[0xC77]) < 0) {
    operator delete((void *)STACK[0xC60]);
  }
  if (SLOBYTE(STACK[0xC8F]) < 0) {
    operator delete((void *)STACK[0xC78]);
  }
  if (SLOBYTE(STACK[0xCA7]) < 0) {
    operator delete((void *)STACK[0xC90]);
  }
  if (SLOBYTE(STACK[0xCBF]) < 0) {
    operator delete((void *)STACK[0xCA8]);
  }
  if (SLOBYTE(STACK[0xCD7]) < 0) {
    operator delete((void *)STACK[0xCC0]);
  }
  if (SLOBYTE(STACK[0xCEF]) < 0) {
    operator delete((void *)STACK[0xCD8]);
  }
  if (SLOBYTE(STACK[0xD07]) < 0) {
    operator delete((void *)STACK[0xCF0]);
  }
  if (SLOBYTE(STACK[0xD1F]) < 0) {
    operator delete((void *)STACK[0xD08]);
  }
  if (SLOBYTE(STACK[0xD37]) < 0) {
    operator delete((void *)STACK[0xD20]);
  }
  if (SLOBYTE(STACK[0xD4F]) < 0) {
    operator delete((void *)STACK[0xD38]);
  }
  if (SLOBYTE(STACK[0xD67]) < 0) {
    operator delete((void *)STACK[0xD50]);
  }
  if (SLOBYTE(STACK[0xD7F]) < 0) {
    operator delete((void *)STACK[0xD68]);
  }
  if (SLOBYTE(STACK[0xD97]) < 0) {
    operator delete((void *)STACK[0xD80]);
  }
  if (SLOBYTE(STACK[0xDAF]) < 0) {
    operator delete((void *)STACK[0xD98]);
  }
  if (SLOBYTE(STACK[0xDC7]) < 0) {
    operator delete((void *)STACK[0xDB0]);
  }
  if (SLOBYTE(STACK[0xDDF]) < 0) {
    operator delete((void *)STACK[0xDC8]);
  }
  if (SLOBYTE(STACK[0xDF7]) < 0) {
    operator delete((void *)STACK[0xDE0]);
  }
  if (SLOBYTE(STACK[0xE0F]) < 0) {
    operator delete((void *)STACK[0xDF8]);
  }
  if (SLOBYTE(STACK[0xE27]) < 0) {
    operator delete((void *)STACK[0xE10]);
  }
  if (SLOBYTE(STACK[0xE3F]) < 0) {
    operator delete((void *)STACK[0xE28]);
  }
  if (SLOBYTE(STACK[0xE57]) < 0) {
    operator delete((void *)STACK[0xE40]);
  }
  if (SLOBYTE(STACK[0xE6F]) < 0) {
    operator delete((void *)STACK[0xE58]);
  }
  if (SLOBYTE(STACK[0xE87]) < 0) {
    operator delete((void *)STACK[0xE70]);
  }
  if (SLOBYTE(STACK[0xE9F]) < 0) {
    operator delete((void *)STACK[0xE88]);
  }
  if (SLOBYTE(STACK[0xEB7]) < 0) {
    operator delete((void *)STACK[0xEA0]);
  }
  if (SLOBYTE(STACK[0xECF]) < 0) {
    operator delete((void *)STACK[0xEB8]);
  }
  if (SLOBYTE(STACK[0xEE7]) < 0) {
    operator delete((void *)STACK[0xED0]);
  }
  if (SLOBYTE(STACK[0xEFF]) < 0) {
    operator delete((void *)STACK[0xEE8]);
  }
  if (SLOBYTE(STACK[0xF17]) < 0) {
    operator delete((void *)STACK[0xF00]);
  }
  if (SLOBYTE(STACK[0xF2F]) < 0) {
    operator delete((void *)STACK[0xF18]);
  }
  if (SLOBYTE(STACK[0xF47]) < 0) {
    operator delete((void *)STACK[0xF30]);
  }
  if (SLOBYTE(STACK[0xF5F]) < 0) {
    operator delete((void *)STACK[0xF48]);
  }
  if (SLOBYTE(STACK[0xF77]) < 0) {
    operator delete((void *)STACK[0xF60]);
  }
  if (SLOBYTE(STACK[0xF8F]) < 0) {
    operator delete((void *)STACK[0xF78]);
  }
  if (SLOBYTE(STACK[0xFA7]) < 0) {
    operator delete((void *)STACK[0xF90]);
  }
  if (SLOBYTE(STACK[0xFBF]) < 0) {
    operator delete((void *)STACK[0xFA8]);
  }
  if (SLOBYTE(STACK[0xFD7]) < 0) {
    operator delete((void *)STACK[0xFC0]);
  }
  if (SLOBYTE(STACK[0xFEF]) < 0) {
    operator delete((void *)STACK[0xFD8]);
  }
  if (SLOBYTE(STACK[0x1007]) < 0) {
    operator delete((void *)STACK[0xFF0]);
  }
  if (SLOBYTE(STACK[0x101F]) < 0) {
    operator delete((void *)STACK[0x1008]);
  }
  if (*(char *)(v83 + 23) < 0) {
    operator delete(*(void **)v83);
  }
  if (*(char *)(v83 + 47) < 0) {
    operator delete(*(void **)(v83 + 24));
  }
  for (; v82 != &STACK[0x1050]; v82 -= 5)
  {
    if (*((char *)v82 - 17) < 0) {
      operator delete((void *)*(v82 - 5));
    }
  }
  MEMORY[0x25A28E250](a10, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_255726890()
{
}

void sub_25572689C()
{
}

uint64_t std::map<std::string,TokenData>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TokenData> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_255726910(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,TokenData> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__construct_node<std::pair<std::string const,TokenData> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

__n128 std::__tree<std::__value_type<std::string,TokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TokenData>>>::__construct_node<std::pair<std::string const,TokenData> const&>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_255726A38(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t pixelFormatTypeMap(void)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&pixelFormatTypeMapOnce, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    unsigned int v2 = &v3;
    std::__call_once(&pixelFormatTypeMapOnce, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<pixelFormatTypeMap(void)::$_0 &&>>);
  }
  return pixelFormatTypeMap(void)::nonGlobalPixelFormatTypeMap;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<pixelFormatTypeMap(void)::$_0 &&>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_255727238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,__int16 a63)
{
  std::__call_once_proxy[abi:ne180100]<std::tuple<pixelFormatTypeMap(void)::$_0 &&>>(v80 + 1024, (uint64_t)&STACK[0x408]);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a44 < 0) {
    operator delete(v79[1]);
  }
  if (a51 < 0) {
    operator delete(v79[5]);
  }
  if (a58 < 0) {
    operator delete(v79[9]);
  }
  if (a65 < 0) {
    operator delete(v79[13]);
  }
  if (a72 < 0) {
    operator delete(v79[17]);
  }
  if (a73 < 0) {
    operator delete(v79[21]);
  }
  if (a74 < 0) {
    operator delete(v79[25]);
  }
  if (a75 < 0) {
    operator delete(v79[29]);
  }
  if (a76 < 0) {
    operator delete(v79[33]);
  }
  if (a77 < 0) {
    operator delete(v79[37]);
  }
  if (a78 < 0) {
    operator delete(v79[41]);
  }
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(v79[45]);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete(v79[49]);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete(v79[53]);
  }
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete(v79[57]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete(v79[61]);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete(v79[65]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete(v79[69]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete(v79[73]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete(v79[77]);
  }
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete(v79[81]);
  }
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete(v79[85]);
  }
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete(v79[89]);
  }
  if (SLOBYTE(STACK[0x387]) < 0) {
    operator delete(v79[93]);
  }
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    operator delete(v79[97]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete(v79[101]);
  }
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete(v79[105]);
  }
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete(v79[109]);
  }
  MEMORY[0x25A28E250](v78, 0x1020C4062D53EE8);
  _Unwind_Resume(a1);
}

void sub_25572754C()
{
}

void sub_255727558()
{
}

void sub_255727568()
{
}

void sub_255727574()
{
}

void sub_255727584()
{
}

void sub_255727590()
{
}

void sub_2557275A0()
{
}

void sub_2557275AC()
{
}

void sub_2557275BC()
{
}

void sub_2557275C8()
{
}

void sub_2557275D8()
{
}

void sub_2557275E4()
{
}

void sub_2557275F4()
{
}

void sub_255727600()
{
}

void sub_255727610()
{
}

void sub_25572761C()
{
}

void sub_25572762C()
{
}

void sub_255727638()
{
}

void sub_255727648()
{
}

void sub_255727654()
{
}

void sub_255727660()
{
}

void sub_255727670()
{
}

void sub_255727680()
{
}

std::string *std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(&this[1], a3);
  return this;
}

void sub_2557276E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = a3 << 6;
    do
    {
      std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 8;
      v6 -= 64;
    }
    while (v6);
  }
  return a1;
}

void sub_25572776C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__construct_node<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::__construct_node<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x60uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_255727870(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_2557278E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unsigned int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_DWORD *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,Air::PixelFormat,std::string,MTLCompilerDataType>::__tuple_impl(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  long long v4 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[8] = *(_DWORD *)(a2 + 32);
  return a1;
}

void MTLFragmentInputLinkingPass::fragmentInputLinking(int a1, llvm::Module *this, uint64_t a3)
{
  *(void *)&long long v60 = "air.fragment";
  __int16 v62 = 259;
  NamedMetachar data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)&v60);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  uint64_t v7 = (void *)(Operand - 8 * *(unsigned int *)(Operand + 8));
  uint64_t v8 = v7[2];
  uint64_t v9 = *(void *)(*v7 + 128);
  long long __p = 0;
  long long v58 = 0;
  unint64_t v59 = 0;
  if (v8)
  {
    std::vector<unsigned int>::size_type v10 = *(void *)(v9 + 96);
    std::vector<unsigned int>::vector(&v56, v10);
    MTLFrameworkPass::getArgumentMetadataIndices(v8, (uint64_t)&v56);
    if (*(_WORD *)(v9 + 18)) {
      llvm::Function::BuildLazyArguments((llvm::Function *)v9);
    }
    uint64_t v11 = v10;
    if (v10)
    {
      uint64_t v12 = 0;
      int v13 = 0;
      uint64_t v14 = *(void *)(v9 + 88);
      long long v55 = 0u;
      while (1)
      {
        uint64_t v15 = v56.__begin_[v12];
        if (v15 != -1)
        {
          uint64_t v16 = *(void *)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8 * v15);
          uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v16 - 8 * *(unsigned int *)(v16 + 8) + 8));
          if (v18 > 23)
          {
            if (v18 != 24)
            {
              if (v18 == 29 && !memcmp(String, "air.render_target_array_index", 0x1DuLL))
              {
                int v13 = dataTypeFromMetadata(2u, v16);
                *((void *)&v24 + 1) = *((void *)&v55 + 1);
                *(int32x2_t *)&long long v24 = vadd_s32(*(int32x2_t *)&v55, (int32x2_t)0x100000001);
                long long v55 = v24;
              }
              goto LABEL_27;
            }
            int v31 = memcmp(String, "air.viewport_array_index", 0x18uLL);
            v32.i32[0] = 0;
            v33.i32[0] = v31;
            int8x8_t v28 = (int8x8_t)vdup_lane_s32(vceq_s32(v33, v32), 0);
            long long v29 = v55;
            int8x8_t v30 = (int8x8_t)vadd_s32(*(int32x2_t *)&v55, (int32x2_t)0x100000001);
          }
          else
          {
            if (v18 != 15)
            {
              if (v18 == 18)
              {
                BOOL v19 = *String == 0x676172662E726961 && String[1] == 0x706E695F746E656DLL;
                if (v19 && *((_WORD *)String + 8) == 29813)
                {
                  LODWORD(v60) = 0;
                  *((void *)&v60 + 1) = 0;
                  *(void *)&long long v61 = 0;
                  *(void *)((char *)&v61 + 5) = 0;
                  MTLFrameworkPass::extractVaryingInfoFromMetadata((uint64_t)&v60, v16, 2u, 0);
                  LODWORD(v60) = v12;
                  BYTE12(v61) = BYTE12(v61) & 0xFE | (*(void *)(v14 + 8) != 0);
                  unint64_t v21 = v58;
                  if ((unint64_t)v58 >= v59)
                  {
                    __int16 v34 = (char *)__p;
                    int64_t v35 = (v58 - (unsigned char *)__p) >> 5;
                    unint64_t v36 = v35 + 1;
                    if ((unint64_t)(v35 + 1) >> 59) {
                      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v37 = v59 - (void)__p;
                    if ((uint64_t)(v59 - (void)__p) >> 4 > v36) {
                      unint64_t v36 = v37 >> 4;
                    }
                    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFE0) {
                      unint64_t v38 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v38 = v36;
                    }
                    if (v38)
                    {
                      unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>((uint64_t)&v59, v38);
                      __int16 v34 = (char *)__p;
                      unint64_t v21 = v58;
                    }
                    else
                    {
                      unint64_t v39 = 0;
                    }
                    long long v40 = v61;
                    uint64_t v41 = (long long *)&v39[32 * v35];
                    *uint64_t v41 = v60;
                    v41[1] = v40;
                    if (v21 == v34)
                    {
                      unsigned int v44 = &v39[32 * v35];
                    }
                    else
                    {
                      long long v42 = &v39[32 * v35];
                      do
                      {
                        long long v43 = *((_OWORD *)v21 - 2);
                        unsigned int v44 = v42 - 32;
                        *(_OWORD *)(v42 - 19) = *(_OWORD *)(v21 - 19);
                        *((_OWORD *)v42 - 2) = v43;
                        v21 -= 32;
                        v42 -= 32;
                      }
                      while (v21 != v34);
                    }
                    int64_t v23 = v41 + 2;
                    long long __p = v44;
                    long long v58 = (char *)(v41 + 2);
                    unint64_t v59 = (unint64_t)&v39[32 * v38];
                    if (v34) {
                      operator delete(v34);
                    }
                  }
                  else
                  {
                    long long v22 = v61;
                    *(_OWORD *)long long v58 = v60;
                    *((_OWORD *)v21 + 1) = v22;
                    int64_t v23 = (long long *)(v21 + 32);
                  }
                  long long v58 = (char *)v23;
                  unsigned int ComponentCount = MTLDataTypeGetComponentCount(SDWORD2(v61));
                  *((void *)&v46 + 1) = *((void *)&v55 + 1);
                  *(int32x2_t *)&long long v46 = vadd_s32(*(int32x2_t *)&v55, (int32x2_t)(ComponentCount | 0x100000000));
                  long long v55 = v46;
                }
              }
              goto LABEL_27;
            }
            int v25 = memcmp(String, "air.point_coord", 0xFuLL);
            v26.i32[0] = 0;
            v27.i32[0] = v25;
            int8x8_t v28 = (int8x8_t)vdup_lane_s32(vceq_s32(v27, v26), 0);
            long long v29 = v55;
            int8x8_t v30 = (int8x8_t)vadd_s32(*(int32x2_t *)&v55, (int32x2_t)0x100000002);
          }
          *(int8x8_t *)&long long v29 = vbsl_s8(v28, v30, *(int8x8_t *)&v29);
          long long v55 = v29;
        }
LABEL_27:
        v14 += 40;
        if (++v12 == v11) {
          goto LABEL_48;
        }
      }
    }
    int v13 = 0;
    *(void *)&long long v55 = 0;
LABEL_48:
    unint64_t v49 = 126 - 2 * __clz((v58 - (unsigned char *)__p) >> 5);
    uint64_t v50 = *(llvm::Type **)this;
    if (v58 == __p) {
      uint64_t v51 = 0;
    }
    else {
      uint64_t v51 = v49;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *,false>((unint64_t)__p, (long long *)v58, (uint64_t)&v60, v51, 1);
    if (((v58 - (unsigned char *)__p) & 0x1FFFFFFFE0) != 0)
    {
      uint64_t v52 = 0;
      int v47 = 0;
      uint64_t v53 = ((unint64_t)(v58 - (unsigned char *)__p) >> 5);
      do
      {
        long long v54 = (char *)__p + v52;
        MTLFrameworkPass::addLocationToMetadata(v50, v8, v56.__begin_[*(int *)((char *)__p + v52)]);
        v47 += v54[28] & 1;
        v52 += 32;
        --v53;
      }
      while (v53);
    }
    else
    {
      int v47 = 0;
    }
    if (v56.__begin_)
    {
      v56.__end_ = v56.__begin_;
      operator delete(v56.__begin_);
    }
    uint64_t v48 = v55;
  }
  else
  {
    int v13 = 0;
    int v47 = 0;
    uint64_t v48 = 0;
  }
  std::function<void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<VaryingInfo> const&)>::operator()(a3, (uint64_t)this, SHIDWORD(v48), v48, v13, v47);
  if (__p)
  {
    long long v58 = (char *)__p;
    operator delete(__p);
  }
}

void sub_255727EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<VaryingInfo> const&)>::operator()(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12 = a2;
  int v11 = a3;
  int v9 = a5;
  int v10 = a4;
  int v8 = a6;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, int *, int *, int *))(*(void *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = (uint64_t)((uint64_t)a2 - v11) >> 5;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          int32x2_t v26 = *(const void **)(v11 + 8);
          size_t v27 = *(void *)(v11 + 16);
          *(_OWORD *)int8x8_t v30 = *(long long *)((char *)a2 - 24);
          if (llvm::StringRef::compare((uint64_t)v30, v26, v27) == -1)
          {
            long long v28 = *(_OWORD *)(v11 + 16);
            *(_OWORD *)int8x8_t v30 = *(_OWORD *)v11;
            *(_OWORD *)&v30[16] = v28;
            long long v29 = *(a2 - 2);
            *(_OWORD *)(v11 + 13) = *(long long *)((char *)a2 - 19);
            *(_OWORD *)unint64_t v11 = v29;
            *(a2 - 2) = *(_OWORD *)v30;
            *(long long *)((char *)a2 - 19) = *(_OWORD *)&v30[13];
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v11, v11 + 32, (uint64_t)(a2 - 2));
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v11, v11 + 32, v11 + 64, a2 - 2);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v11, v11 + 32, v11 + 64, v11 + 96, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 767)
    {
      if (a5) {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v11, a2);
      }
      else {
        std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v11, a2);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    BOOL v17 = (long long *)(v11 + 32 * (v15 >> 1));
    if ((unint64_t)v14 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v11, v11 + 32 * (v15 >> 1), (uint64_t)(a2 - 2));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v11 + 32, (uint64_t)(v17 - 2), (uint64_t)(a2 - 4));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v11 + 64, v11 + 32 + 32 * v16, (uint64_t)(a2 - 6));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>((uint64_t)(v17 - 2), (uint64_t)v17, v11 + 32 + 32 * v16);
      long long v18 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)int8x8_t v30 = *(_OWORD *)v11;
      *(_OWORD *)&v30[16] = v18;
      long long v19 = *v17;
      *(_OWORD *)(v11 + 13) = *(long long *)((char *)v17 + 13);
      *(_OWORD *)unint64_t v11 = v19;
      long long v20 = *(_OWORD *)v30;
      *(long long *)((char *)v17 + 13) = *(_OWORD *)&v30[13];
      *BOOL v17 = v20;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v11 + 32 * (v15 >> 1), v11, (uint64_t)(a2 - 2));
      if (a5) {
        goto LABEL_13;
      }
    }
    unint64_t v21 = *(const void **)(v11 + 8);
    size_t v22 = *(void *)(v11 + 16);
    *(_OWORD *)int8x8_t v30 = *(_OWORD *)(v11 - 24);
    if (llvm::StringRef::compare((uint64_t)v30, v21, v22) != -1)
    {
      unint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,VaryingInfo *,std::__less<void,void> &>((uint64_t *)v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    int64_t v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,VaryingInfo *,std::__less<void,void> &>((uint64_t *)v11, (uint64_t *)a2);
    if ((v24 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(v11, (uint64_t)v23);
    unint64_t v11 = (unint64_t)(v23 + 2);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>((uint64_t)(v23 + 2), (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v25)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *,false>(a1, v23, a3, -v13, a5 & 1);
      unint64_t v11 = (unint64_t)(v23 + 2);
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if ((long long *)v11 != a2) {
    std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *,VaryingInfo *>(v11, a2, a2, a3);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    uint64_t v22 = v2;
    uint64_t v23 = v3;
    uint64_t v5 = result;
    char v6 = (void *)(result + 32);
    if ((void *)(result + 32) != a2)
    {
      uint64_t v7 = 0;
      int v8 = (void *)result;
      do
      {
        int v9 = v6;
        int v10 = (const void *)v8[1];
        size_t v11 = v8[2];
        long long v21 = *(_OWORD *)(v8 + 5);
        __n128 result = llvm::StringRef::compare((uint64_t)&v21, v10, v11);
        if (result == -1)
        {
          uint64_t v12 = *v9;
          uint64_t v13 = v8[5];
          uint64_t v14 = v8[6];
          uint64_t v15 = v7;
          uint64_t v16 = v8[7];
          while (1)
          {
            uint64_t v17 = v5 + v15;
            *(_OWORD *)(v17 + 32) = *(_OWORD *)(v5 + v15);
            *(_OWORD *)(v17 + 45) = *(_OWORD *)(v5 + v15 + 13);
            if (!v15) {
              break;
            }
            long long v18 = *(const void **)(v17 - 24);
            size_t v19 = *(void *)(v17 - 16);
            *(void *)&long long v21 = v13;
            *((void *)&v21 + 1) = v14;
            __n128 result = llvm::StringRef::compare((uint64_t)&v21, v18, v19);
            v15 -= 32;
            if (result != -1)
            {
              uint64_t v20 = v5 + v15 + 32;
              goto LABEL_10;
            }
          }
          uint64_t v20 = v5;
LABEL_10:
          *(void *)uint64_t v20 = v12;
          *(void *)(v20 + 8) = v13;
          *(void *)(v20 + 16) = v14;
          *(_DWORD *)(v20 + 24) = v16;
          *(unsigned char *)(v20 + 28) = BYTE4(v16);
        }
        char v6 = v9 + 4;
        v7 += 32;
        int v8 = v9;
      }
      while (v9 + 4 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    uint64_t v19 = v2;
    uint64_t v20 = v3;
    uint64_t v5 = (void *)result;
    char v6 = (void *)(result + 32);
    while (v6 != a2)
    {
      uint64_t v7 = v6;
      int v8 = (const void *)v5[1];
      size_t v9 = v5[2];
      long long v18 = *(_OWORD *)(v5 + 5);
      __n128 result = llvm::StringRef::compare((uint64_t)&v18, v8, v9);
      if (result == -1)
      {
        uint64_t v10 = *v7;
        uint64_t v11 = v5[5];
        uint64_t v12 = v5[6];
        uint64_t v13 = v7;
        uint64_t v14 = v5[7];
        do
        {
          uint64_t v15 = v13 - 2;
          *uint64_t v13 = *(v13 - 2);
          *(_OWORD *)((char *)v13 + 13) = *(_OWORD *)((char *)v13 - 19);
          uint64_t v16 = (const void *)*((void *)v13 - 7);
          size_t v17 = *((void *)v13 - 6);
          *(void *)&long long v18 = v11;
          *((void *)&v18 + 1) = v12;
          __n128 result = llvm::StringRef::compare((uint64_t)&v18, v16, v17);
          uint64_t v13 = v15;
        }
        while (result == -1);
        *(void *)uint64_t v15 = v10;
        *((void *)v15 + 1) = v11;
        *((void *)v15 + 2) = v12;
        *((_DWORD *)v15 + 6) = v14;
        *((unsigned char *)v15 + 28) = BYTE4(v14);
      }
      char v6 = v7 + 4;
      uint64_t v5 = v7;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(const void **)(a1 + 8);
  size_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)int32x2_t v32 = *(_OWORD *)(a2 + 8);
  int v8 = llvm::StringRef::compare((uint64_t)v32, v6, v7);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(const void **)(a2 + 8);
  size_t v11 = *(void *)(a2 + 16);
  if (v8 == -1)
  {
    *(void *)int32x2_t v32 = *(void *)(a3 + 8);
    *(void *)&v32[8] = v9;
    if (llvm::StringRef::compare((uint64_t)v32, v10, v11) == -1)
    {
      long long v30 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)int32x2_t v32 = *(_OWORD *)a1;
      long long v29 = *(_OWORD *)v32;
      *(_OWORD *)&v32[16] = v30;
      long long v31 = *(_OWORD *)(a3 + 13);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 13) = v31;
      *(_OWORD *)a3 = v29;
      *(_OWORD *)(a3 + 13) = *(_OWORD *)&v32[13];
    }
    else
    {
      long long v14 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)int32x2_t v32 = *(_OWORD *)a1;
      long long v13 = *(_OWORD *)v32;
      *(_OWORD *)&v32[16] = v14;
      long long v15 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 13) = v15;
      *(_OWORD *)a2 = v13;
      *(_OWORD *)(a2 + 13) = *(_OWORD *)&v32[13];
      uint64_t v16 = *(const void **)(a2 + 8);
      size_t v17 = *(void *)(a2 + 16);
      *(_OWORD *)int32x2_t v32 = *(_OWORD *)(a3 + 8);
      if (llvm::StringRef::compare((uint64_t)v32, v16, v17) == -1)
      {
        long long v19 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)int32x2_t v32 = *(_OWORD *)a2;
        long long v18 = *(_OWORD *)v32;
        *(_OWORD *)&v32[16] = v19;
        long long v20 = *(_OWORD *)(a3 + 13);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 13) = v20;
        *(_OWORD *)a3 = v18;
        *(_OWORD *)(a3 + 13) = *(_OWORD *)&v32[13];
        return 2;
      }
    }
  }
  else
  {
    *(void *)int32x2_t v32 = *(void *)(a3 + 8);
    *(void *)&v32[8] = v9;
    if (llvm::StringRef::compare((uint64_t)v32, v10, v11) != -1) {
      return 0;
    }
    long long v22 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)int32x2_t v32 = *(_OWORD *)a2;
    long long v21 = *(_OWORD *)v32;
    *(_OWORD *)&v32[16] = v22;
    long long v23 = *(_OWORD *)(a3 + 13);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 13) = v23;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 13) = *(_OWORD *)&v32[13];
    char v24 = *(const void **)(a1 + 8);
    size_t v25 = *(void *)(a1 + 16);
    *(_OWORD *)int32x2_t v32 = *(_OWORD *)(a2 + 8);
    if (llvm::StringRef::compare((uint64_t)v32, v24, v25) == -1)
    {
      long long v27 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)int32x2_t v32 = *(_OWORD *)a1;
      long long v26 = *(_OWORD *)v32;
      *(_OWORD *)&v32[16] = v27;
      long long v28 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 13) = v28;
      *(_OWORD *)a2 = v26;
      *(_OWORD *)(a2 + 13) = *(_OWORD *)&v32[13];
      return 2;
    }
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,VaryingInfo *,std::__less<void,void> &>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v2 = a2;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v6 = a1[3];
  int v8 = (const void *)*((void *)a2 - 3);
  size_t v9 = *((void *)v2 - 2);
  *(void *)long long v31 = v4;
  *(void *)&v31[8] = v7;
  if (llvm::StringRef::compare((uint64_t)v31, v8, v9) == -1)
  {
    unint64_t v15 = (unint64_t)a1;
    do
    {
      unint64_t v11 = v15 + 32;
      uint64_t v16 = *(const void **)(v15 + 40);
      size_t v17 = *(void *)(v15 + 48);
      *(void *)long long v31 = v4;
      *(void *)&v31[8] = v7;
      int v18 = llvm::StringRef::compare((uint64_t)v31, v16, v17);
      unint64_t v15 = v11;
    }
    while (v18 != -1);
  }
  else
  {
    unint64_t v10 = (unint64_t)(a1 + 4);
    do
    {
      unint64_t v11 = v10;
      if (v10 >= (unint64_t)v2) {
        break;
      }
      uint64_t v12 = *(const void **)(v10 + 8);
      size_t v13 = *(void *)(v10 + 16);
      *(void *)long long v31 = v4;
      *(void *)&v31[8] = v7;
      int v14 = llvm::StringRef::compare((uint64_t)v31, v12, v13);
      unint64_t v10 = v11 + 32;
    }
    while (v14 != -1);
  }
  if (v11 >= (unint64_t)v2)
  {
    long long v19 = v2;
  }
  else
  {
    do
    {
      long long v19 = v2 - 2;
      long long v20 = (const void *)*((void *)v2 - 3);
      size_t v21 = *((void *)v2 - 2);
      *(void *)long long v31 = v4;
      *(void *)&v31[8] = v7;
      v2 -= 2;
    }
    while (llvm::StringRef::compare((uint64_t)v31, v20, v21) == -1);
  }
  while (v11 < (unint64_t)v19)
  {
    long long v22 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)long long v31 = *(_OWORD *)v11;
    *(_OWORD *)&v31[16] = v22;
    long long v23 = *v19;
    *(_OWORD *)(v11 + 13) = *(_OWORD *)((char *)v19 + 13);
    *(_OWORD *)unint64_t v11 = v23;
    long long v24 = *(_OWORD *)v31;
    *(_OWORD *)((char *)v19 + 13) = *(_OWORD *)&v31[13];
    *long long v19 = v24;
    do
    {
      size_t v25 = *(const void **)(v11 + 40);
      size_t v26 = *(void *)(v11 + 48);
      v11 += 32;
      *(void *)long long v31 = v4;
      *(void *)&v31[8] = v7;
    }
    while (llvm::StringRef::compare((uint64_t)v31, v25, v26) != -1);
    do
    {
      long long v27 = (const void *)*((void *)v19 - 3);
      size_t v28 = *((void *)v19 - 2);
      v19 -= 2;
      *(void *)long long v31 = v4;
      *(void *)&v31[8] = v7;
    }
    while (llvm::StringRef::compare((uint64_t)v31, v27, v28) == -1);
  }
  if ((uint64_t *)(v11 - 32) != a1)
  {
    long long v29 = *(_OWORD *)(v11 - 32);
    *(_OWORD *)((char *)a1 + 13) = *(_OWORD *)(v11 - 19);
    *(_OWORD *)a1 = v29;
  }
  *(void *)(v11 - 32) = v5;
  *(void *)(v11 - 24) = v4;
  *(void *)(v11 - 16) = v7;
  *(_DWORD *)(v11 - 8) = v6;
  *(unsigned char *)(v11 - 4) = BYTE4(v6);
  return v11;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,VaryingInfo *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = 0;
  uint64_t v6 = *a1;
  uint64_t v5 = (const void *)a1[1];
  size_t v7 = a1[2];
  uint64_t v8 = a1[3];
  do
  {
    *(_OWORD *)long long v20 = *(_OWORD *)&a1[v4 + 5];
    v4 += 4;
  }
  while (llvm::StringRef::compare((uint64_t)v20, v5, v7) == -1);
  size_t v9 = &a1[v4];
  if (v4 == 4)
  {
    while (v9 < a2)
    {
      unint64_t v10 = a2 - 4;
      *(_OWORD *)long long v20 = *(_OWORD *)(a2 - 3);
      a2 -= 4;
      if (llvm::StringRef::compare((uint64_t)v20, v5, v7) == -1) {
        goto LABEL_9;
      }
    }
    unint64_t v10 = a2;
  }
  else
  {
    do
    {
      unint64_t v10 = a2 - 4;
      *(_OWORD *)long long v20 = *(_OWORD *)(a2 - 3);
      a2 -= 4;
    }
    while (llvm::StringRef::compare((uint64_t)v20, v5, v7) != -1);
  }
LABEL_9:
  unint64_t v11 = v9;
  if (v9 < v10)
  {
    uint64_t v12 = v10;
    do
    {
      long long v14 = *((_OWORD *)v11 + 1);
      *(_OWORD *)long long v20 = *(_OWORD *)v11;
      long long v13 = *(_OWORD *)v20;
      *(_OWORD *)&v20[16] = v14;
      long long v15 = *(_OWORD *)((char *)v12 + 13);
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
      *(_OWORD *)((char *)v11 + 13) = v15;
      *(_OWORD *)((char *)v12 + 13) = *(_OWORD *)&v20[13];
      *(_OWORD *)uint64_t v12 = v13;
      do
      {
        long long v16 = *(_OWORD *)(v11 + 5);
        v11 += 4;
        *(_OWORD *)long long v20 = v16;
      }
      while (llvm::StringRef::compare((uint64_t)v20, v5, v7) == -1);
      do
      {
        long long v17 = *(_OWORD *)(v12 - 3);
        v12 -= 4;
        *(_OWORD *)long long v20 = v17;
      }
      while (llvm::StringRef::compare((uint64_t)v20, v5, v7) != -1);
    }
    while (v11 < v12);
  }
  __n128 result = (long long *)(v11 - 4);
  if (v11 - 4 != a1)
  {
    long long v19 = *result;
    *(_OWORD *)((char *)a1 + 13) = *(_OWORD *)((char *)v11 - 19);
    *(_OWORD *)a1 = v19;
  }
  *(v11 - 4) = v6;
  *(v11 - 3) = (uint64_t)v5;
  *(v11 - 2) = v7;
  *((_DWORD *)v11 - 2) = v8;
  *((unsigned char *)v11 - 4) = BYTE4(v8);
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(const void **)(a1 + 8);
      size_t v7 = *(void *)(a1 + 16);
      *(_OWORD *)size_t v26 = *(_OWORD *)(a2 - 24);
      if (llvm::StringRef::compare((uint64_t)v26, v6, v7) == -1)
      {
        long long v9 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)size_t v26 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)v26;
        *(_OWORD *)&v26[16] = v9;
        long long v10 = *(_OWORD *)(a2 - 19);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 13) = v10;
        *(_OWORD *)(a2 - 32) = v8;
        *(_OWORD *)(a2 - 19) = *(_OWORD *)&v26[13];
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a1 + 32, a2 - 32);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a1 + 32, a1 + 64, (_OWORD *)(a2 - 32));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a1 + 32, a1 + 64, a1 + 96, (_OWORD *)(a2 - 32));
      return 1;
    default:
      uint64_t v11 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a1 + 32, a1 + 64);
      uint64_t v12 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    long long v15 = *(const void **)(v11 + 8);
    size_t v16 = *(void *)(v11 + 16);
    *(_OWORD *)size_t v26 = *(_OWORD *)(v12 + 8);
    if (llvm::StringRef::compare((uint64_t)v26, v15, v16) == -1)
    {
      uint64_t v17 = *(void *)v12;
      uint64_t v18 = *(void *)(v12 + 8);
      uint64_t v19 = v13;
      uint64_t v21 = *(void *)(v12 + 16);
      uint64_t v20 = *(void *)(v12 + 24);
      while (1)
      {
        uint64_t v22 = a1 + v19;
        *(_OWORD *)(v22 + 96) = *(_OWORD *)(a1 + v19 + 64);
        *(_OWORD *)(v22 + 109) = *(_OWORD *)(a1 + v19 + 77);
        if (v19 == -64) {
          break;
        }
        long long v23 = *(const void **)(v22 + 40);
        size_t v24 = *(void *)(v22 + 48);
        *(void *)size_t v26 = v18;
        *(void *)&v26[8] = v21;
        v19 -= 32;
        if (llvm::StringRef::compare((uint64_t)v26, v23, v24) != -1)
        {
          uint64_t v25 = a1 + v19 + 96;
          goto LABEL_12;
        }
      }
      uint64_t v25 = a1;
LABEL_12:
      *(void *)uint64_t v25 = v17;
      *(void *)(v25 + 8) = v18;
      *(void *)(v25 + 16) = v21;
      *(_DWORD *)(v25 + 24) = v20;
      ++v14;
      *(unsigned char *)(v25 + 28) = BYTE4(v20);
      if (v14 == 8) {
        return v12 + 32 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 32;
    v12 += 32;
    if (v12 == a2) {
      return 1;
    }
  }
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a2, a3);
  long long v8 = *(const void **)(a3 + 8);
  size_t v9 = *(void *)(a3 + 16);
  *(_OWORD *)size_t v24 = *(_OWORD *)((char *)a4 + 8);
  if (llvm::StringRef::compare((uint64_t)v24, v8, v9) == -1)
  {
    long long v12 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)size_t v24 = *(_OWORD *)a3;
    long long v11 = *(_OWORD *)v24;
    *(_OWORD *)&v24[16] = v12;
    long long v13 = *(_OWORD *)((char *)a4 + 13);
    *(_OWORD *)a3 = *a4;
    *(_OWORD *)(a3 + 13) = v13;
    *a4 = v11;
    *(_OWORD *)((char *)a4 + 13) = *(_OWORD *)&v24[13];
    int v14 = *(const void **)(a2 + 8);
    size_t v15 = *(void *)(a2 + 16);
    *(_OWORD *)size_t v24 = *(_OWORD *)(a3 + 8);
    if (llvm::StringRef::compare((uint64_t)v24, v14, v15) == -1)
    {
      long long v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)size_t v24 = *(_OWORD *)a2;
      long long v16 = *(_OWORD *)v24;
      *(_OWORD *)&v24[16] = v17;
      long long v18 = *(_OWORD *)(a3 + 13);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 13) = v18;
      *(_OWORD *)a3 = v16;
      *(_OWORD *)(a3 + 13) = *(_OWORD *)&v24[13];
      uint64_t v19 = *(const void **)(a1 + 8);
      size_t v20 = *(void *)(a1 + 16);
      *(_OWORD *)size_t v24 = *(_OWORD *)(a2 + 8);
      if (llvm::StringRef::compare((uint64_t)v24, v19, v20) == -1)
      {
        long long v22 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)size_t v24 = *(_OWORD *)a1;
        long long v21 = *(_OWORD *)v24;
        *(_OWORD *)&v24[16] = v22;
        long long v23 = *(_OWORD *)(a2 + 13);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 13) = v23;
        *(_OWORD *)a2 = v21;
        double result = *(double *)&v24[13];
        *(_OWORD *)(a2 + 13) = *(_OWORD *)&v24[13];
      }
    }
  }
  return result;
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a2, a3, (_OWORD *)a4);
  long long v10 = *(const void **)(a4 + 8);
  size_t v11 = *(void *)(a4 + 16);
  *(_OWORD *)long long v31 = *(_OWORD *)((char *)a5 + 8);
  if (llvm::StringRef::compare((uint64_t)v31, v10, v11) == -1)
  {
    long long v14 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)long long v31 = *(_OWORD *)a4;
    long long v13 = *(_OWORD *)v31;
    *(_OWORD *)&v31[16] = v14;
    long long v15 = *(_OWORD *)((char *)a5 + 13);
    *(_OWORD *)a4 = *a5;
    *(_OWORD *)(a4 + 13) = v15;
    *a5 = v13;
    *(_OWORD *)((char *)a5 + 13) = *(_OWORD *)&v31[13];
    long long v16 = *(const void **)(a3 + 8);
    size_t v17 = *(void *)(a3 + 16);
    *(_OWORD *)long long v31 = *(_OWORD *)(a4 + 8);
    if (llvm::StringRef::compare((uint64_t)v31, v16, v17) == -1)
    {
      long long v19 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)long long v31 = *(_OWORD *)a3;
      long long v18 = *(_OWORD *)v31;
      *(_OWORD *)&v31[16] = v19;
      long long v20 = *(_OWORD *)(a4 + 13);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 13) = v20;
      *(_OWORD *)a4 = v18;
      *(_OWORD *)(a4 + 13) = *(_OWORD *)&v31[13];
      long long v21 = *(const void **)(a2 + 8);
      size_t v22 = *(void *)(a2 + 16);
      *(_OWORD *)long long v31 = *(_OWORD *)(a3 + 8);
      if (llvm::StringRef::compare((uint64_t)v31, v21, v22) == -1)
      {
        long long v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)long long v31 = *(_OWORD *)a2;
        long long v23 = *(_OWORD *)v31;
        *(_OWORD *)&v31[16] = v24;
        long long v25 = *(_OWORD *)(a3 + 13);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 13) = v25;
        *(_OWORD *)a3 = v23;
        *(_OWORD *)(a3 + 13) = *(_OWORD *)&v31[13];
        size_t v26 = *(const void **)(a1 + 8);
        size_t v27 = *(void *)(a1 + 16);
        *(_OWORD *)long long v31 = *(_OWORD *)(a2 + 8);
        if (llvm::StringRef::compare((uint64_t)v31, v26, v27) == -1)
        {
          long long v29 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)long long v31 = *(_OWORD *)a1;
          long long v28 = *(_OWORD *)v31;
          *(_OWORD *)&v31[16] = v29;
          long long v30 = *(_OWORD *)(a2 + 13);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 13) = v30;
          *(_OWORD *)a2 = v28;
          double result = *(double *)&v31[13];
          *(_OWORD *)(a2 + 13) = *(_OWORD *)&v31[13];
        }
      }
    }
  }
  return result;
}

_OWORD *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *,VaryingInfo *>(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  if ((_OWORD *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 5;
    if ((uint64_t)a2 - a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 32 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a4, v9, v12);
        v12 -= 32;
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        long long v15 = *(const void **)(a1 + 8);
        size_t v16 = *(void *)(a1 + 16);
        *(_OWORD *)size_t v27 = *(_OWORD *)((char *)v14 + 8);
        if (llvm::StringRef::compare((uint64_t)v27, v15, v16) == -1)
        {
          long long v18 = v14[1];
          *(_OWORD *)size_t v27 = *v14;
          long long v17 = *(_OWORD *)v27;
          *(_OWORD *)&v27[16] = v18;
          long long v19 = *(_OWORD *)(a1 + 13);
          *long long v14 = *(_OWORD *)a1;
          *(_OWORD *)((char *)v14 + 13) = v19;
          *(_OWORD *)a1 = v17;
          *(_OWORD *)(a1 + 13) = *(_OWORD *)&v27[13];
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 33)
    {
      uint64_t v20 = (unint64_t)v8 >> 5;
      long long v21 = a2 - 2;
      do
      {
        long long v22 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)size_t v27 = *(_OWORD *)a1;
        *(_OWORD *)&v27[16] = v22;
        long long v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>((_OWORD *)a1, a4, v20);
        if (v21 == v23)
        {
          *long long v23 = *(_OWORD *)v27;
          *(long long *)((char *)v23 + 13) = *(_OWORD *)&v27[13];
        }
        else
        {
          long long v24 = *v21;
          *(long long *)((char *)v23 + 13) = *(long long *)((char *)v21 + 13);
          *long long v23 = v24;
          long long *v21 = *(_OWORD *)v27;
          *(long long *)((char *)v21 + 13) = *(_OWORD *)&v27[13];
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(a1, (uint64_t)(v23 + 2), a4, ((uint64_t)v23 - a1 + 32) >> 5);
        }
        v21 -= 2;
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v32 = v4;
    uint64_t v33 = v5;
    uint64_t v7 = a4;
    uint64_t v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (a4 - result) >> 5)
    {
      uint64_t v11 = (a4 - result) >> 4;
      uint64_t v12 = v11 + 1;
      uint64_t v13 = result + 32 * (v11 + 1);
      uint64_t v14 = v11 + 2;
      if (v11 + 2 < a3)
      {
        long long v15 = *(const void **)(v13 + 40);
        size_t v16 = *(void *)(v13 + 48);
        long long v31 = *(_OWORD *)(v13 + 8);
        int v17 = llvm::StringRef::compare((uint64_t)&v31, v15, v16);
        v13 += 32 * (v17 == -1);
        if (v17 == -1) {
          uint64_t v12 = v14;
        }
      }
      long long v18 = *(const void **)(v7 + 8);
      size_t v19 = *(void *)(v7 + 16);
      long long v31 = *(_OWORD *)(v13 + 8);
      double result = llvm::StringRef::compare((uint64_t)&v31, v18, v19);
      if (result != -1)
      {
        uint64_t v20 = *(const void **)(v7 + 8);
        uint64_t v30 = *(void *)v7;
        size_t v21 = *(void *)(v7 + 16);
        uint64_t v22 = *(void *)(v7 + 24);
        do
        {
          long long v23 = (_OWORD *)v7;
          uint64_t v7 = v13;
          long long v24 = *(_OWORD *)v13;
          *(_OWORD *)((char *)v23 + 13) = *(_OWORD *)(v13 + 13);
          *long long v23 = v24;
          if (v9 < v12) {
            break;
          }
          uint64_t v25 = (2 * v12) | 1;
          uint64_t v13 = v8 + 32 * v25;
          uint64_t v26 = 2 * v12 + 2;
          if (v26 < a3)
          {
            size_t v27 = *(const void **)(v13 + 40);
            size_t v28 = *(void *)(v13 + 48);
            long long v31 = *(_OWORD *)(v13 + 8);
            int v29 = llvm::StringRef::compare((uint64_t)&v31, v27, v28);
            v13 += 32 * (v29 == -1);
            if (v29 == -1) {
              uint64_t v25 = v26;
            }
          }
          long long v31 = *(_OWORD *)(v13 + 8);
          double result = llvm::StringRef::compare((uint64_t)&v31, v20, v21);
          uint64_t v12 = v25;
        }
        while (result != -1);
        *(void *)uint64_t v7 = v30;
        *(void *)(v7 + 8) = v20;
        *(void *)(v7 + 16) = v21;
        *(_DWORD *)(v7 + 24) = v22;
        *(unsigned char *)(v7 + 28) = BYTE4(v22);
      }
    }
  }
  return result;
}

_OWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = &a1[2 * v5 + 2];
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3)
    {
      uint64_t v11 = (const void *)*((void *)v8 + 5);
      size_t v12 = *((void *)v8 + 6);
      long long v16 = *(_OWORD *)((char *)v8 + 8);
      int v13 = llvm::StringRef::compare((uint64_t)&v16, v11, v12);
      v8 += 2 * (v13 == -1);
      if (v13 == -1) {
        uint64_t v9 = v10;
      }
    }
    long long v14 = *v8;
    *(_OWORD *)((char *)a1 + 13) = *(_OWORD *)((char *)v8 + 13);
    *a1 = v14;
    a1 = v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v20 = v4;
    uint64_t v21 = v5;
    uint64_t v8 = result;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = *(const void **)(a2 - 24);
    size_t v11 = *(void *)(a2 - 16);
    long long v19 = *(_OWORD *)(result + 32 * (v6 >> 1) + 8);
    double result = llvm::StringRef::compare((uint64_t)&v19, v10, v11);
    if (result == -1)
    {
      uint64_t v14 = *(void *)(a2 - 32);
      int v13 = *(const void **)(a2 - 24);
      uint64_t v12 = a2 - 32;
      size_t v15 = *(void *)(v12 + 16);
      uint64_t v16 = *(void *)(v12 + 24);
      do
      {
        int v17 = (_OWORD *)v12;
        uint64_t v12 = v8 + 32 * v9;
        long long v18 = *(_OWORD *)v12;
        *(_OWORD *)((char *)v17 + 13) = *(_OWORD *)(v12 + 13);
        *int v17 = v18;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        long long v19 = *(_OWORD *)(v8 + 32 * v9 + 8);
        double result = llvm::StringRef::compare((uint64_t)&v19, v13, v15);
      }
      while (result == -1);
      *(void *)uint64_t v12 = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(v12 + 16) = v15;
      *(_DWORD *)(v12 + 24) = v16;
      *(unsigned char *)(v12 + 28) = BYTE4(v16);
    }
  }
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x25A28E250);
}

void createMTLStackOverflowPass()
{
}

void sub_255729398(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C409096A829);
  _Unwind_Resume(a1);
}

void MTLStackOverflowPass::~MTLStackOverflowPass(MTLStackOverflowPass *this)
{
  *(void *)this = &unk_270453620;
  uint64_t v2 = (char *)this + 160;
  llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::~DenseMap((uint64_t)this + 184);
  *(void *)this = &unk_2704532C8;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_270453620;
  uint64_t v2 = (char *)this + 160;
  llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::~DenseMap((uint64_t)this + 184);
  *(void *)this = &unk_2704532C8;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t MTLStackOverflowPass::runOnModule(MTLStackOverflowPass *this, llvm::Module *a2)
{
  uint64_t v4 = (char *)this + 184;
  llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::clear((uint64_t)this + 184);
  MetalModulePass::runOnModule(this, a2);
  MTLStackOverflowPass::loadStackDepth((llvm::Type ****)this);
  if ((*(unsigned char *)(*(void *)(*((void *)this + 8) + 72) + 24) & 4) != 0)
  {
    MTLStackOverflowPass::findRecursiveCalls(this);
    MTLStackOverflowPass::findIndirectCalls((uint64_t)this);
    uint64_t v5 = (llvm::Value **)llvm::detail::DenseSetImpl<llvm::CallInst *,llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::DenseMapInfo<llvm::CallInst *,void>>::begin((uint64_t)v4);
    if ((llvm::Value **)(*((void *)this + 23) + 8 * *((unsigned int *)this + 50)) != v5) {
      MTLStackOverflowPass::instrumentIndirectCall((uint64_t)this, *v5);
    }
  }
  return 1;
}

uint64_t llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::init(uint64_t result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(result + 16) = v4;
    double result = MEMORY[0x25A28D370](8 * v4, 8);
    *(void *)uint64_t v2 = result;
    *(void *)(v2 + 8) = 0;
    uint64_t v5 = *(unsigned int *)(v2 + 16);
    if (v5)
    {
      uint64_t v6 = 8 * v5;
      do
      {
        *(void *)double result = -4096;
        result += 8;
        v6 -= 8;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)double result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::~DenseMap(uint64_t a1)
{
  return a1;
}

void MTLStackOverflowPass::loadStackDepth(llvm::Type ****this)
{
  v14[1] = *MEMORY[0x263EF8340];
  Entryuint64_t Function = MetalModulePass::getEntryFunction((MetalModulePass *)this);
  if (EntryFunction)
  {
    uint64_t v3 = *(void *)(EntryFunction + 80);
    if (v3) {
      unint64_t v4 = (llvm::BasicBlock *)(v3 - 24);
    }
    else {
      unint64_t v4 = 0;
    }
    llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)v10, v4, 0, 0, 0);
    uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v4);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v10, (uint64_t)v4, FirstInsertionPt);
    uint64_t v7 = this[8];
    if (v7[6])
    {
LABEL_6:
      llvm::Type::getInt32Ty(v12, v6);
      uint64_t v8 = (llvm::Type **)llvm::ConstantInt::get();
      uint64_t inserted = MTLBoundsCheck::SharedPassData::getOrInsertStackDepthGV(this[8]);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v10, v8, inserted, 0);
    }
    else if (v7[5])
    {
      switch(*((_DWORD *)this + 30))
      {
        case 0:
        case 1:
        case 5:
        case 6:
          goto LABEL_6;
        default:
          break;
      }
    }
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v14);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v13);
    if (v10[0] != &v11) {
      free(v10[0]);
    }
  }
}

void sub_2557297F8(_Unwind_Exception *exception_object)
{
}

uint64_t MTLStackOverflowPass::findRecursiveCalls(MTLStackOverflowPass *this)
{
  MEMORY[0x25A28DB10](v23, *((void *)this + 6));
  llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::scc_iterator((uint64_t)&v15, v24);
  uint64_t v14 = 0;
  long long v12 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  memset(v9, 0, sizeof(v9));
  while (!llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::operator==(&v15, v9))
  {
    uint64_t v3 = (char *)v19;
    uint64_t v2 = v20;
    if ((unint64_t)(v20 - (unsigned char *)v19) <= 8)
    {
      while (v3 != v2)
      {
        uint64_t v5 = *(void *)v3;
        if (*(void *)(*(void *)v3 + 8) && (llvm::Function::hasFnAttribute() & 1) == 0)
        {
          uint64_t v6 = *(void *)(v5 + 16);
          uint64_t v7 = *(void *)(v5 + 24);
          if (v6 != v7)
          {
            while (*(void *)(v6 + 32) != v5)
            {
              v6 += 40;
              if (v6 == v7) {
                goto LABEL_18;
              }
            }
          }
          if (v6 != v7) {
            MTLStackOverflowPass::findAllCallsTo((uint64_t)this, *(llvm::Function **)(v5 + 8));
          }
        }
LABEL_18:
        v3 += 8;
      }
    }
    else
    {
      while (v3 != v2)
      {
        uint64_t v4 = *(void *)v3;
        if (*(void *)(*(void *)v3 + 8))
        {
          if ((llvm::Function::hasFnAttribute() & 1) == 0) {
            MTLStackOverflowPass::findAllCallsTo((uint64_t)this, *(llvm::Function **)(v4 + 8));
          }
        }
        v3 += 8;
      }
    }
    llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::GetNextSCC(&v15);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v11[1])
  {
    *(void **)&long long v12 = v11[1];
    operator delete(v11[1]);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap((uint64_t)v9 + 8);
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    uint64_t v20 = (char *)v19;
    operator delete(v19);
  }
  if (v17)
  {
    long long v18 = v17;
    operator delete(v17);
  }
  llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap((uint64_t)&v16);
  return MEMORY[0x25A28DB20](v23);
}

void sub_2557299DC(_Unwind_Exception *a1)
{
  MEMORY[0x25A28DB20](v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t MTLStackOverflowPass::findIndirectCalls(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v26 = v1 + 24;
  if (v2 != v1 + 24)
  {
    uint64_t v3 = this + 184;
    while (1)
    {
      uint64_t v4 = v2 ? (llvm::GlobalValue *)(v2 - 56) : 0;
      this = llvm::GlobalValue::isDeclaration(v4);
      if ((this & 1) == 0) {
        break;
      }
LABEL_7:
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 == v26) {
        return this;
      }
    }
    uint64_t v5 = (void *)((char *)v4 + 72);
    uint64_t v6 = (void *)*((void *)v4 + 10);
LABEL_10:
    if (v6 == v5) {
      goto LABEL_7;
    }
    uint64_t v7 = v6 - 3;
    if (!v6) {
      uint64_t v7 = 0;
    }
    uint64_t v8 = v7 + 5;
    for (uint64_t i = (void *)v7[6]; ; uint64_t i = (void *)i[1])
    {
      if (i == v8)
      {
        uint64_t v6 = (void *)v6[1];
        goto LABEL_10;
      }
      uint64_t v10 = i - 3;
      if (!i) {
        uint64_t v10 = 0;
      }
      int v11 = *((unsigned __int8 *)v10 + 16);
      if (v11 != 84) {
        uint64_t v10 = 0;
      }
      size_t v27 = v10;
      if (!i || v11 != 84) {
        continue;
      }
      uint64_t v12 = *(v10 - 4);
      if (!v12 || *(unsigned char *)(v12 + 16)) {
        goto LABEL_27;
      }
      uint64_t v13 = *(void *)(v12 + 24);
      uint64_t v14 = v10[9];
      uint64_t v15 = v13 == v14 ? (llvm::Value *)v12 : 0;
      if (v13 != v14) {
        goto LABEL_27;
      }
      this = llvm::Value::getName(v15);
      if (v16 < 0xD) {
        break;
      }
      if (*(void *)this != 0x65746E692E726961 || *(void *)(this + 5) != 0x746365737265746ELL) {
        goto LABEL_36;
      }
      long long v19 = v27;
      v28[0] = this;
      v28[1] = v16;
      if (llvm::StringRef::find() == -1) {
        unsigned int v20 = 5;
      }
      else {
        unsigned int v20 = 6;
      }
      this = llvm::StringRef::find();
      if (this != -1 || (this = llvm::StringRef::find(), this != -1)) {
        ++v20;
      }
      uint64_t v21 = v19[4 * v20 + -4 * (*((_DWORD *)v19 + 5) & 0x7FFFFFF)];
      int v22 = *(unsigned __int8 *)(v21 + 16);
      if (!v21 || v22 != 19)
      {
        if (!v21
          || v22 != 84
          || (uint64_t v23 = *(void *)(v21 - 32)) == 0
          || *(unsigned char *)(v23 + 16)
          || *(void *)(v23 + 24) != *(void *)(v21 + 72)
          || (uint64_t Name = (const void *)llvm::Value::getName((llvm::Value *)v23), v25 < 0x28)
          || (this = memcmp(Name, "air.get_null_intersection_function_table", 0x28uLL), this))
        {
LABEL_27:
          this = llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v3, &v27, (uint64_t)v28);
          continue;
        }
      }
LABEL_28:
      ;
    }
    if (v16 >= 4)
    {
LABEL_36:
      if (*(_DWORD *)this == 779250017) {
        goto LABEL_28;
      }
      if (v16 >= 5 && *(_DWORD *)this == 1836477548 && *(unsigned char *)(this + 4) == 46) {
        goto LABEL_28;
      }
      if (*(_DWORD *)this == 778859629) {
        goto LABEL_28;
      }
    }
    if ((*((unsigned char *)v15 + 32) & 0xF) == 0)
    {
      this = llvm::GlobalValue::isDeclaration(v15);
      if (this) {
        goto LABEL_27;
      }
    }
    goto LABEL_28;
  }
  return this;
}

void *llvm::detail::DenseSetImpl<llvm::CallInst *,llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::DenseMapInfo<llvm::CallInst *,void>>::begin(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  double result = *(void **)a1;
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = &result[v4];
  if (!v2) {
    return v5;
  }
  if (v4)
  {
    uint64_t v6 = 8 * v4;
    while ((*result | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++result;
      v6 -= 8;
      if (!v6) {
        return v5;
      }
    }
  }
  return result;
}

void MTLStackOverflowPass::instrumentIndirectCall(uint64_t a1, llvm::Value *a2)
{
  v8[17] = *MEMORY[0x263EF8340];
  uint64_t v3 = (const llvm::Twine **)*((void *)a2 + 5);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)v8, (llvm::BasicBlock *)v3, 0, 0, 0);
  llvm::BasicBlock::splitBasicBlock();
  llvm::BasicBlock::splitBasicBlock();
  uint64_t Context = (llvm::BasicBlock *)llvm::Value::getContext(a2);
  uint64_t v6 = "error";
  __int16 v7 = 259;
  llvm::BasicBlock::Create(Context, (llvm::LLVMContext *)&v6, v3[7], 0, v5);
}

void sub_25572A2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)(v9 - 232));
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::clear(uint64_t result)
{
  if (*(void *)(result + 8))
  {
    uint64_t v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if (v1)
      {
        int v2 = *(void **)result;
        uint64_t v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *(void *)(result + 8) = 0;
    }
    else
    {
      return llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::shrink_and_clear(result);
    }
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 16);
  int v3 = *(_DWORD *)(result + 8);
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *(void *)(result + 8) = 0;
    if (v2)
    {
      uint64_t v6 = *(llvm **)result;
      uint64_t v7 = 8 * v2;
      do
      {
        *(void *)uint64_t v6 = -4096;
        uint64_t v6 = (llvm *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    llvm::deallocate_buffer(*(llvm **)result, (void *)(8 * v2));
    return llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::init(v1, v5);
  }
  return result;
}

uint64_t MTLStackOverflowPass::findAllCallsTo(uint64_t this, llvm::Function *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2)
  {
    uint64_t v3 = this + 184;
    do
    {
      uint64_t v4 = *(void *)(v2 + 24);
      if (*(unsigned char *)(v4 + 16) != 84) {
        uint64_t v4 = 0;
      }
      uint64_t v5 = v4;
      if (v4) {
        this = llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v3, &v5, (uint64_t)v6);
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  return this;
}

void *llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::~scc_iterator(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap((uint64_t)(a1 + 1));
  return a1;
}

uint64_t llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::scc_iterator(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::DFSVisitOne((int *)a1, a2);
  llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::GetNextSCC((void *)a1);
  return a1;
}

void sub_25572A5C8(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void **)(v1 + 80);
  if (v6)
  {
    *(void *)(v1 + 88) = v6;
    operator delete(v6);
  }
  llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::scc_iterator(v4, v3, v1);
  llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap(v2);
  _Unwind_Resume(a1);
}

void llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::DFSVisitOne(int *a1, uint64_t a2)
{
  uint64_t v35 = a2;
  int v3 = *a1 + 1;
  *a1 = v3;
  *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::FindAndConstruct((uint64_t *)a1 + 1, &v35)+ 2) = v3;
  unint64_t v4 = *((void *)a1 + 6);
  uint64_t v5 = (void *)*((void *)a1 + 5);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *((void *)a1 + 4);
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a1 + 12), v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)uint64_t v13 = v35;
    uint64_t v6 = v13 + 8;
    unint64_t v16 = (char *)*((void *)a1 + 4);
    uint64_t v15 = (char *)*((void *)a1 + 5);
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      uint64_t v15 = (char *)*((void *)a1 + 4);
    }
    *((void *)a1 + 4) = v13;
    *((void *)a1 + 5) = v6;
    *((void *)a1 + 6) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = v35;
    uint64_t v6 = v5 + 1;
  }
  *((void *)a1 + 5) = v6;
  uint64_t v18 = v35;
  uint64_t v19 = *(void *)(v35 + 16);
  int v20 = *a1;
  unint64_t v21 = *((void *)a1 + 11);
  unint64_t v22 = *((void *)a1 + 12);
  if (v21 >= v22)
  {
    uint64_t v24 = *((void *)a1 + 10);
    uint64_t v25 = (uint64_t)(v21 - v24) >> 5;
    unint64_t v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 59) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v27 = v22 - v24;
    if (v27 >> 4 > v26) {
      unint64_t v26 = v27 >> 4;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v28) {
      int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>((uint64_t)(a1 + 24), v28);
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = &v29[32 * v25];
    long long v31 = &v29[32 * v28];
    *(void *)uint64_t v30 = v18;
    *((void *)v30 + 1) = v19;
    *((void *)v30 + 2) = llvm::GraphTraits<llvm::CallGraphNode *>::CGNGetValue;
    *((_DWORD *)v30 + 6) = v20;
    uint64_t v23 = v30 + 32;
    uint64_t v33 = (char *)*((void *)a1 + 10);
    uint64_t v32 = (char *)*((void *)a1 + 11);
    if (v32 != v33)
    {
      do
      {
        long long v34 = *((_OWORD *)v32 - 2);
        *(_OWORD *)(v30 - 20) = *(_OWORD *)(v32 - 20);
        *((_OWORD *)v30 - 2) = v34;
        v30 -= 32;
        v32 -= 32;
      }
      while (v32 != v33);
      uint64_t v32 = (char *)*((void *)a1 + 10);
    }
    *((void *)a1 + 10) = v30;
    *((void *)a1 + 11) = v23;
    *((void *)a1 + 12) = v31;
    if (v32) {
      operator delete(v32);
    }
  }
  else
  {
    *(void *)unint64_t v21 = v35;
    *(void *)(v21 + 8) = v19;
    *(void *)(v21 + 16) = llvm::GraphTraits<llvm::CallGraphNode *>::CGNGetValue;
    *(_DWORD *)(v21 + 24) = v20;
    uint64_t v23 = (char *)(v21 + 32);
  }
  *((void *)a1 + 11) = v23;
}

void *llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::GetNextSCC(void *result)
{
  uint64_t v1 = (char **)(result + 7);
  result[8] = result[7];
  if (result[10] != result[11])
  {
    uint64_t v2 = result;
    int v3 = result + 1;
    while (1)
    {
      llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::DFSVisitChildren((uint64_t)v2);
      uint64_t v20 = 0;
      uint64_t v5 = v2[10];
      uint64_t v4 = v2[11];
      uint64_t v20 = *(void *)(v4 - 32);
      unsigned int v6 = *(_DWORD *)(v4 - 8);
      v2[11] = v4 - 32;
      if (v5 != v4 - 32 && *(_DWORD *)(v4 - 40) > v6) {
        *(_DWORD *)(v4 - 40) = v6;
      }
      double result = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::FindAndConstruct(v3, &v20);
      if (v6 == *((_DWORD *)result + 2)) {
        break;
      }
      if (v2[10] == v2[11]) {
        return result;
      }
    }
    uint64_t v7 = (void *)v2[8];
    do
    {
      uint64_t v8 = v2[5];
      unint64_t v9 = v2[9];
      if ((unint64_t)v7 >= v9)
      {
        uint64_t v11 = ((char *)v7 - *v1) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v9 - (void)*v1;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(v2 + 9), v14);
        }
        else {
          uint64_t v15 = 0;
        }
        unint64_t v16 = &v15[8 * v11];
        *(void *)unint64_t v16 = *(void *)(v8 - 8);
        uint64_t v10 = v16 + 8;
        uint64_t v18 = (char *)v2[7];
        uint64_t v17 = (char *)v2[8];
        if (v17 != v18)
        {
          do
          {
            uint64_t v19 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          uint64_t v17 = *v1;
        }
        v2[7] = v16;
        v2[8] = v10;
        v2[9] = &v15[8 * v14];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *uint64_t v7 = *(void *)(v8 - 8);
        uint64_t v10 = v7 + 1;
      }
      v2[8] = v10;
      v2[5] -= 8;
      double result = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::FindAndConstruct(v3, v10 - 1);
      *((_DWORD *)result + 2) = -1;
      uint64_t v7 = (void *)v2[8];
    }
    while (*(v7 - 1) != v20);
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::FindAndConstruct(uint64_t *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::InsertIntoBucketImpl<llvm::CallGraphNode *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::InsertIntoBucketImpl<llvm::CallGraphNode *>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::grow(a1, v7);
  unint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  double result = (void *)MEMORY[0x25A28D370](16 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (void *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        void *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      double result = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>((uint64_t *)v5, (void *)a2, &v10);
      unint64_t v9 = v10;
      *uint64_t v10 = *(void *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t llvm::GraphTraits<llvm::CallGraphNode *>::CGNGetValue(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::DFSVisitChildren(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(void *)(v1 - 24);
  if (v2 != *(void *)(*(void *)(v1 - 32) + 24))
  {
    char v4 = (uint64_t *)(a1 + 8);
    do
    {
      uint64_t v5 = *(void *)(v1 - 16);
      *(void *)(v1 - 24) = v2 + 40;
      v8[0] = v2;
      v8[1] = v5;
      uint64_t v6 = llvm::mapped_iterator<std::__wrap_iter<std::pair<llvm::Optional<llvm::WeakTrackingVH>,llvm::CallGraphNode *> *>,llvm::CallGraphNode * (*)(std::pair<llvm::Optional<llvm::WeakTrackingVH>,llvm::CallGraphNode *>),llvm::CallGraphNode *>::operator*(v8);
      uint64_t v9 = v6;
      v8[0] = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(v4, &v9, v8)|| v8[0] == *(void *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::DFSVisitOne((int *)a1, v6);
        uint64_t v1 = *(void *)(a1 + 88);
      }
      else
      {
        unsigned int v7 = *(_DWORD *)(v8[0] + 8);
        uint64_t v1 = *(void *)(a1 + 88);
        if (*(_DWORD *)(v1 - 8) > v7) {
          *(_DWORD *)(v1 - 8) = v7;
        }
      }
      uint64_t v2 = *(void *)(v1 - 24);
    }
    while (v2 != *(void *)(*(void *)(v1 - 32) + 24));
  }
}

uint64_t llvm::mapped_iterator<std::__wrap_iter<std::pair<llvm::Optional<llvm::WeakTrackingVH>,llvm::CallGraphNode *> *>,llvm::CallGraphNode * (*)(std::pair<llvm::Optional<llvm::WeakTrackingVH>,llvm::CallGraphNode *>),llvm::CallGraphNode *>::operator*(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t (*)(unsigned char *))a1[1];
  llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::OptionalStorage((llvm::ValueHandleBase *)v5, *a1);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v3 = v2(v5);
  if (v5[24]) {
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v5);
  }
  return v3;
}

void sub_25572AD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13) {
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&a10);
  }
  _Unwind_Resume(exception_object);
}

llvm::ValueHandleBase *llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::OptionalStorage(llvm::ValueHandleBase *a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *((unsigned char *)a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24)) {
    llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::emplace<llvm::WeakTrackingVH const&>(a1, (void *)a2);
  }
  return a1;
}

void sub_25572ADF4(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 24))
  {
    llvm::ValueHandleBase::~ValueHandleBase(v1);
    *((unsigned char *)v1 + 24) = 0;
  }
  _Unwind_Resume(exception_object);
}

llvm::ValueHandleBase *llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::emplace<llvm::WeakTrackingVH const&>(llvm::ValueHandleBase *a1, void *a2)
{
  if (*((unsigned char *)a1 + 24))
  {
    llvm::ValueHandleBase::~ValueHandleBase(a1);
    *((unsigned char *)a1 + 24) = 0;
  }
  double result = llvm::ValueHandleBase::ValueHandleBase(a1, 3u, a2);
  *((unsigned char *)result + 24) = 1;
  return result;
}

uint64_t llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap(uint64_t a1)
{
  return a1;
}

BOOL llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::operator==(void *a1, void *a2)
{
  uint64_t v3 = a1[10];
  uint64_t v2 = a1[11];
  uint64_t v4 = a2[10];
  if (v2 - v3 != a2[11] - v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*(void *)v3 != *(void *)v4
      || *(void *)(v3 + 8) != *(void *)(v4 + 8)
      || *(_DWORD *)(v3 + 24) != *(_DWORD *)(v4 + 24))
    {
      return 0;
    }
    v3 += 32;
    v4 += 32;
  }
  uint64_t v6 = a1 + 7;
  uint64_t v5 = (const void *)a1[7];
  size_t v7 = v6[1] - (void)v5;
  uint64_t v9 = a2 + 7;
  uint64_t v8 = (const void *)a2[7];
  return v7 == v9[1] - (void)v8 && memcmp(v5, v8, v7) == 0;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::LookupBucketFor<llvm::CallInst *>((uint64_t *)a1, a2, &v10);
  size_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::InsertIntoBucketImpl<llvm::CallInst *>(a1, (uint64_t)a2, a2, v10);
    size_t v7 = (void *)result;
    *(void *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::LookupBucketFor<llvm::CallInst *>(uint64_t *a1, void *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    size_t v7 = (void *)(*a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -8192;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        size_t v7 = (void *)(v4 + 8 * (v13 & v5));
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        size_t v7 = v10;
      }
    }
  }
  else
  {
    size_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::InsertIntoBucketImpl<llvm::CallInst *>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::LookupBucketFor<llvm::CallInst *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (void *)MEMORY[0x25A28D370](8 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::moveFromOldBuckets(a1, v4, (void *)v4 + v3);
    return (void *)llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::moveFromOldBuckets(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::LookupBucketFor<llvm::CallInst *>((uint64_t *)v5, a2, &v9);
      void *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

llvm::Instruction *llvm::IRBuilderBase::CreateSub(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, uint64_t a5, uint64_t a6)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    uint64_t result = (llvm::Instruction *)(*(uint64_t (**)(void, llvm::Value *, llvm::Value *, uint64_t, uint64_t))(**((void **)this + 9) + 72))(*((void *)this + 9), a2, a3, a5, a6);
    if (result) {
      BOOL v9 = *((unsigned __int8 *)result + 16) >= 0x1Cu;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      return (llvm::Instruction *)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)result, (uint64_t)a4);
    }
  }
  else
  {
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 15, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  }
  return result;
}

uint64_t llvm::BranchInst::Create(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::Value *a4, llvm::Instruction *a5)
{
  uint64_t v9 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x25A28CD30](v9, this, a2, a3, a4);
  return v9;
}

void sub_25572B3D4(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::IRBuilderBase::CreatePHI(llvm::IRBuilderBase *this, llvm::Type *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  __int16 v10 = 257;
  int v7 = llvm::PHINode::Create(a2, a3, (const llvm::Twine *)v9, 0, a5);
  if (llvm::FPMathOperator::classof((uint64_t)v7)) {
    llvm::IRBuilderBase::setFPAttrs((uint64_t)this, (uint64_t)v7, 0);
  }
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)v7, (uint64_t)a4);
}

uint64_t llvm::PHINode::addIncoming(llvm::PHINode *this, llvm::Value *a2, llvm::BasicBlock *a3)
{
  int v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x7FFFFFF) == *((_DWORD *)this + 15))
  {
    llvm::PHINode::growOperands(this);
    int v6 = *((_DWORD *)this + 5);
  }
  int v7 = (v6 + 1) & 0x7FFFFFF;
  *((_DWORD *)this + 5) = v6 & 0xF8000000 | v7;
  uint64_t result = llvm::PHINode::setIncomingValue((uint64_t)this, v7 - 1, (uint64_t)a2);
  int v9 = *((_DWORD *)this + 5);
  uint64_t v10 = v9 & 0x7FFFFFF;
  if ((v9 & 0x40000000) != 0) {
    uint64_t v11 = (char *)*((void *)this - 1);
  }
  else {
    uint64_t v11 = (char *)this - 32 * v10;
  }
  *(void *)&v11[32 * *((unsigned int *)this + 15) + 8 * (v10 - 1)] = a3;
  return result;
}

uint64_t llvm::BranchInst::Create(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  uint64_t v3 = llvm::User::operator new((llvm::User *)0x40);
  llvm::BranchInst::BranchInst();
  return v3;
}

void sub_25572B550(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>(uint64_t a1, llvm::BasicBlock **a2)
{
  uint64_t v3 = (llvm::LLVMContext **)llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder(a1, *a2, 0, 0, 0);
  MTLIRBuilder::initTypeCache((MTLIRBuilder *)v3, v3[8]);
  return a1;
}

void sub_25572B5A4(_Unwind_Exception *a1)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(v1);
  _Unwind_Resume(a1);
}

llvm::PHINode *llvm::PHINode::Create(llvm::PHINode *this, llvm::Type *a2, const llvm::Twine *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  int v7 = (int)a2;
  int v9 = (llvm::PHINode *)llvm::User::operator new((llvm::User *)0x40);
  llvm::PHINode::PHINode(v9, this, v7, a3, a4);
  return v9;
}

void sub_25572B618(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

llvm::PHINode *llvm::PHINode::PHINode(llvm::PHINode *this, llvm::Type *a2, int a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  *(_DWORD *)(llvm::Instruction::Instruction() + 60) = a3;
  llvm::Value::setName();
  llvm::User::allocHungoffUses(this);
  return this;
}

void sub_25572B690(_Unwind_Exception *a1)
{
  llvm::Instruction::~Instruction(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::PHINode::setIncomingValue(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0) {
    uint64_t v4 = *(void *)(result - 8);
  }
  else {
    uint64_t v4 = result - 32 * (v3 & 0x7FFFFFF);
  }
  uint64_t v5 = v4 + 32 * a2;
  if (*(void *)v5)
  {
    **(void **)(v5 + 16) = *(void *)(v5 + 8);
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      *(void *)(v6 + 16) = *(void *)(v5 + 16);
    }
  }
  *(void *)uint64_t v5 = a3;
  if (a3)
  {
    uint64_t v9 = *(void *)(a3 + 8);
    int v7 = (void *)(a3 + 8);
    uint64_t v8 = v9;
    uint64_t v10 = v4 + 32 * a2;
    *(void *)(v10 + 8) = v9;
    if (v9) {
      *(void *)(v8 + 16) = v10 + 8;
    }
    *(void *)(v10 + 16) = v7;
    *int v7 = v5;
  }
  return result;
}

void createMTLForceInlinerPass()
{
}

void MTLForceInlinerPass::~MTLForceInlinerPass(MTLForceInlinerPass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t llvm::Pass::doInitialization()
{
  return 0;
}

BOOL MTLForceInlinerPass::runOnModule(MTLForceInlinerPass *this, llvm::Module *a2)
{
  v76[4] = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*((void *)this + 4) + 20) & 0x10) == 0) {
    return 0;
  }
  MTLBoundsCheck::getMetalMetadata(a2, (uint64_t)v37);
  BOOL result = v39 != 0;
  if (v39)
  {
    uint64_t v5 = v38;
    uint64_t v6 = *((void *)this + 4);
    uint64_t v7 = *((void *)this + 5);
    uint64_t v36 = v6;
    MEMORY[0x25A28DB10](v59, a2);
    uint64_t v34 = v5;
    uint64_t v35 = v7;
    uint64_t v74 = (llvm::Value **)v76;
    uint64_t v75 = 0x400000000;
    llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::scc_iterator((uint64_t)&v51, v60);
    uint64_t v50 = 0;
    long long v48 = 0u;
    long long __p = 0u;
    *(_OWORD *)long long v46 = 0u;
    *(_OWORD *)int v47 = 0u;
    memset(v45, 0, sizeof(v45));
    while (1)
    {
      if (llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::operator==(&v51, v45))
      {
        llvm::GlobalValue::setLinkage(*(void *)(*(void *)(v34 - 8 * *(unsigned int *)(v34 + 8)) + 128), 0);
        if (v75)
        {
          long long v31 = v74;
          uint64_t v32 = 8 * v75;
          do
          {
            uint64_t v33 = *v31;
            if ((llvm::Value::hasNUsesOrMore(*v31) & 1) == 0 && (*((unsigned char *)v33 + 32) & 0xF) != 0)
            {
              llvm::Function::dropAllReferences(v33);
              llvm::Function::eraseFromParent(v33);
            }
            ++v31;
            v32 -= 8;
          }
          while (v32);
        }
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if (v47[1])
        {
          *(void **)&long long v48 = v47[1];
          operator delete(v47[1]);
        }
        if (v46[0])
        {
          v46[1] = v46[0];
          operator delete(v46[0]);
        }
        llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap((uint64_t)v45 + 8);
        if (v57)
        {
          long long v58 = v57;
          operator delete(v57);
        }
        if (v55)
        {
          std::vector<unsigned int> v56 = v55;
          operator delete(v55);
        }
        if (v53)
        {
          long long v54 = v53;
          operator delete(v53);
        }
        llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::~DenseMap((uint64_t)&v52);
        if (v74 != v76) {
          free(v74);
        }
        MEMORY[0x25A28DB20](v59);
        return 1;
      }
      uint64_t v8 = v55;
      uint64_t v9 = v56;
      while (v8 != v9)
      {
        uint64_t v10 = (void *)*v8;
        if (*v8 == v60) {
          goto LABEL_80;
        }
        uint64_t v11 = (llvm::Value *)v10[1];
        unsigned int v44 = v11;
        if (!v11 || (llvm::GlobalValue::isDeclaration(v11) & 1) != 0 || (*((_DWORD *)v44 + 8) & 0xE) == 4) {
          goto LABEL_80;
        }
        uint64_t Name = (void *)llvm::Value::getName(v44);
        if (v13 >= 0x10)
        {
          if (*Name == 0x61725F7269615F5FLL && Name[1] == 0x676E696361727479) {
            goto LABEL_80;
          }
          if (v13 >= 0x17)
          {
            if (*Name == 0x697265776F6C5F5FLL
              && Name[1] == 0x6E692E62696C676ELL
              && *(void *)((char *)Name + 15) == 0x2E6C616E7265746ELL)
            {
              goto LABEL_80;
            }
          }
          else if (v13 == 16 && *Name == 0x5F7465672E6C746DLL && Name[1] == 0x64695F6567616D69)
          {
            goto LABEL_80;
          }
        }
        if (!v36 || (*(unsigned char *)(v36 + 22) & 4) == 0) {
          goto LABEL_15;
        }
        uint64_t v25 = *((void *)v44 + 3);
        if (8 * *(unsigned int *)(v25 + 12) != 8)
        {
          uint64_t v26 = *(void *)(v25 + 16) + 8;
          uint64_t v27 = 8 * ((8 * *(unsigned int *)(v25 + 12) - 8) >> 3);
          while (1)
          {
            if (*(unsigned char *)(*(void *)v26 + 8) == 15)
            {
              unint64_t v28 = **(llvm::StructType ***)(*(void *)v26 + 16);
              if (*((unsigned char *)v28 + 8) != 16 || !isSpecialStructType(v28)) {
                break;
              }
            }
            v26 += 8;
            v27 -= 8;
            if (!v27) {
              goto LABEL_80;
            }
          }
LABEL_15:
          if (v35) {
            ++*(_DWORD *)(v35 + 100);
          }
          uint64_t v15 = v10[2];
          uint64_t v14 = v10[3];
          while (2)
          {
            if (v15 == v14)
            {
              llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v74, (uint64_t *)&v44);
              break;
            }
            llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::OptionalStorage((llvm::ValueHandleBase *)v40, v15);
            uint64_t v43 = *(void *)(v15 + 32);
            uint64_t v61 = 0;
            uint64_t v62 = 0;
            uint64_t v64 = 0;
            uint64_t v65 = 0;
            uint64_t v63 = 0;
            unint64_t v66 = v68;
            uint64_t v67 = 0x400000000;
            v69[0] = (char *)&v70;
            v69[1] = (char *)0x800000000;
            unsigned int v71 = v73;
            uint64_t v72 = 0x800000000;
            v73[64] = 1;
            uint64_t v16 = *(void *)(v41 - 32);
            if (v16
              && !*(unsigned char *)(v16 + 16)
              && *(void *)(v16 + 24) == *(void *)(v41 + 72)
              && (uint64_t v17 = (void *)llvm::Value::getName((llvm::Value *)v16), v18 >= 0x10))
            {
              if (*v17 != 0x61725F7269615F5FLL || v17[1] != 0x676E696361727479)
              {
                if (v18 >= 0x17)
                {
                  if (*v17 != 0x697265776F6C5F5FLL
                    || v17[1] != 0x6E692E62696C676ELL
                    || *(void *)((char *)v17 + 15) != 0x2E6C616E7265746ELL)
                  {
                    goto LABEL_23;
                  }
                }
                else
                {
                  if (v18 != 16) {
                    goto LABEL_23;
                  }
                  if (*v17 != 0x5F7465672E6C746DLL || v17[1] != 0x64695F6567616D69) {
                    goto LABEL_23;
                  }
                }
              }
            }
            else
            {
LABEL_23:
              llvm::InlineFunction();
            }
            if (v71 != v73) {
              free(v71);
            }
            llvm::SmallVector<llvm::WeakTrackingVH,8u>::~SmallVector(v69);
            if (v66 != v68) {
              free(v66);
            }
            if (v42) {
              llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v40);
            }
            v15 += 40;
            continue;
          }
        }
LABEL_80:
        ++v8;
      }
      llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::GetNextSCC(&v51);
    }
  }
  return result;
}

void sub_25572BD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::~scc_iterator(&a23);
  llvm::scc_iterator<llvm::CallGraph *,llvm::GraphTraits<llvm::CallGraph *>>::~scc_iterator(&a36);
  uint64_t v51 = *(void **)(v49 - 168);
  if (v51 != a11) {
    free(v51);
  }
  MEMORY[0x25A28DB20](&a49);
  _Unwind_Resume(a1);
}

void llvm::InlineFunctionInfo::~InlineFunctionInfo(llvm::InlineFunctionInfo *this)
{
  uint64_t v2 = (char *)*((void *)this + 38);
  if (v2 != (char *)this + 320) {
    free(v2);
  }
  llvm::SmallVector<llvm::WeakTrackingVH,8u>::~SmallVector((char **)this + 12);
  int v3 = (char *)*((void *)this + 6);
  if (v3 != (char *)this + 64) {
    free(v3);
  }
}

uint64_t llvm::GlobalValue::setLinkage(uint64_t this, int a2)
{
  uint64_t v2 = this;
  int v3 = *(_DWORD *)(this + 32);
  if ((a2 - 7) < 2) {
    v3 &= 0xFFFFFFCF;
  }
  unsigned int v4 = v3 & 0xFFFFFFF0 | a2 & 0xF;
  *(_DWORD *)(this + 32) = v4;
  if ((a2 & 0xFu) - 7 < 2) {
    goto LABEL_7;
  }
  if ((v3 & 0x30) != 0)
  {
    this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this);
    if ((this & 1) == 0)
    {
      unsigned int v4 = *(_DWORD *)(v2 + 32);
LABEL_7:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return this;
}

char **llvm::SmallVector<llvm::WeakTrackingVH,8u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 24 * v3;
    uint64_t v5 = v2 - 24;
    do
    {
      llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)&v5[v4]);
      v4 -= 24;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void createMTLHoistStaticAllocasPass()
{
}

void sub_25572BF78(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLHoistStaticAllocasPass::~MTLHoistStaticAllocasPass(MTLHoistStaticAllocasPass *this)
{
  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t MTLHoistStaticAllocasPass::runOnModule(MTLHoistStaticAllocasPass *this, llvm::Module *a2)
{
  MetalModulePass::runOnModule(this, a2);
  uint64_t v4 = (char *)a2 + 24;
  uint64_t v5 = *((void *)a2 + 4);
  if ((char *)v5 == v4)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    int v6 = 0;
    do
    {
      if (v5) {
        uint64_t v7 = (llvm::Function *)(v5 - 56);
      }
      else {
        uint64_t v7 = 0;
      }
      v6 |= MTLHoistStaticAllocasPass::runOnFunction(this, v7);
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((char *)v5 != v4);
  }
  return v6 & 1;
}

BOOL MTLHoistStaticAllocasPass::runOnFunction(MTLHoistStaticAllocasPass *this, llvm::Function *a2)
{
  v18[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (llvm::Function *)*((void *)a2 + 10);
  if (v2 == (llvm::Function *)((char *)a2 + 72)) {
    return 0;
  }
  uint64_t v16 = v18;
  uint64_t v17 = 0x400000000;
  if (v2) {
    uint64_t v3 = (llvm::Function *)((char *)v2 - 24);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t FirstNonPHIOrDbgOrLifetime = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(v3);
  uint64_t v5 = (char *)v3 + 40;
  uint64_t v6 = FirstNonPHIOrDbgOrLifetime + 24;
  if (FirstNonPHIOrDbgOrLifetime) {
    BOOL v7 = v6 == (void)v5;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    goto LABEL_34;
  }
  while (1)
  {
    if (v6) {
      uint64_t v8 = (unsigned __int8 *)(v6 - 24);
    }
    else {
      uint64_t v8 = 0;
    }
    int v9 = v8[16];
    if (v9 != 59)
    {
      if (!llvm::DbgInfoIntrinsic::classof((uint64_t)v8)) {
        break;
      }
      int v9 = v8[16];
    }
    if (v6 && v9 == 59 && (llvm::AllocaInst::isStaticAlloca((llvm::AllocaInst *)v8) & 1) == 0) {
      break;
    }
    uint64_t v6 = *(void *)(v6 + 8);
    if ((char *)v6 == v5) {
      goto LABEL_34;
    }
  }
  if ((char *)v6 == v5) {
    goto LABEL_34;
  }
  do
  {
    if (v6) {
      uint64_t v11 = (llvm::AllocaInst *)(v6 - 24);
    }
    else {
      uint64_t v11 = 0;
    }
    if (v6 && *((unsigned char *)v11 + 16) == 59 && llvm::AllocaInst::isStaticAlloca(v11)) {
      llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&v16, (uint64_t)v11);
    }
    uint64_t v6 = *(void *)(v6 + 8);
  }
  while ((char *)v6 != v5);
  if (!v17)
  {
LABEL_34:
    BOOL v10 = 0;
  }
  else
  {
    BOOL v12 = (llvm::Instruction **)v16;
    uint64_t v13 = 8 * v17;
    do
    {
      uint64_t v14 = *v12;
      llvm::Instruction::removeFromParent(*v12);
      llvm::Instruction::insertBefore(v14, (llvm::Instruction *)v8);
      ++v12;
      v13 -= 8;
    }
    while (v13);
    BOOL v10 = v17 != 0;
  }
  if (v16 != v18) {
    free(v16);
  }
  return v10;
}

void sub_25572C29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10 != v10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL llvm::DbgInfoIntrinsic::classof(uint64_t a1)
{
  return *(unsigned char *)(a1 + 16) == 84
      && (uint64_t v1 = *(void *)(a1 - 32)) != 0
      && !*(unsigned char *)(v1 + 16)
      && *(void *)(v1 + 24) == *(void *)(a1 + 72)
      && (*(unsigned char *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 55) < 4;
}

void createMTLRemoveThreadgroupGlobalsPass()
{
}

void sub_25572C384(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLRemoveThreadgroupGlobalsPass::~MTLRemoveThreadgroupGlobalsPass(MTLRemoveThreadgroupGlobalsPass *this)
{
  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t MTLRemoveThreadgroupGlobalsPass::runOnModule(MTLRemoveThreadgroupGlobalsPass *this, llvm::Module *a2)
{
  return 1;
}

void MTLRemoveThreadgroupGlobalsPass::removeThreadgroupGlobalsFromLLVMUsedList(MTLRemoveThreadgroupGlobalsPass *this, llvm::Module *a2)
{
  uint64_t v2 = 0;
  v24[2] = *MEMORY[0x263EF8340];
  v24[0] = "llvm.used";
  v24[1] = "llvm.compiler.used";
  do
  {
    if (v24[v2]) {
      strlen((const char *)v24[v2]);
    }
    uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
    uint64_t v4 = (llvm::GlobalVariable *)GlobalVariable;
    if (GlobalVariable)
    {
      unint64_t v21 = v23;
      unint64_t v22 = (llvm::Type *)0x800000000;
      uint64_t v5 = *(_DWORD **)(GlobalVariable - 32);
      int v6 = v5[5];
      if ((v6 & 0x40000000) != 0)
      {
        uint64_t v8 = (uint64_t *)*((void *)v5 - 1);
        uint64_t v7 = v6 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v7 = v6 & 0x7FFFFFF;
        uint64_t v8 = (uint64_t *)&v5[-8 * v7];
      }
      int v9 = &v8[4 * v7];
      if (!v7) {
        goto LABEL_32;
      }
      do
      {
        unsigned int v10 = *(unsigned __int8 *)(*v8 + 16);
        uint64_t v11 = *v8;
        if (*v8) {
          BOOL v12 = v10 == 3;
        }
        else {
          BOOL v12 = 0;
        }
        if (!v12)
        {
          while (1)
          {
            int v13 = *(unsigned __int8 *)(v11 + 16);
            if (v13 != 5) {
              break;
            }
            unsigned int v14 = *(unsigned __int16 *)(v11 + 18);
            BOOL v15 = v14 > 0x32;
            uint64_t v16 = (1 << v14) & 0x6000400000000;
            if (!v15 && v16 != 0)
            {
              uint64_t v11 = *(void *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
              if (v11) {
                continue;
              }
            }
            goto LABEL_24;
          }
          if (v13 != 3) {
            goto LABEL_24;
          }
        }
        uint64_t v18 = *(void *)v11;
        int v19 = *(_DWORD *)(*(void *)v11 + 8);
        if ((v19 & 0xFE) == 0x12) {
          int v19 = *(_DWORD *)(**(void **)(v18 + 16) + 8);
        }
        if ((v19 & 0xFFFFFF00) != 0x300)
        {
LABEL_24:
          if (v10 >= 0x15) {
            uint64_t v20 = 0;
          }
          else {
            uint64_t v20 = *v8;
          }
          llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&v21, v20);
        }
        v8 += 4;
      }
      while (v8 != v9);
      if (v22)
      {
        if (v22 != (v5[5] & 0x7FFFFFF))
        {
          llvm::ArrayType::get(*(llvm::ArrayType **)(*(void *)v5 + 24), (llvm::Type *)v22);
          llvm::User::operator new((llvm::User *)0x58);
          llvm::ConstantArray::get();
          llvm::GlobalVariable::GlobalVariable();
          llvm::Value::takeName();
          llvm::GlobalObject::setSection();
          llvm::GlobalVariable::removeFromParent(v4);
        }
      }
      else
      {
LABEL_32:
        llvm::GlobalVariable::dropAllReferences(v4);
        llvm::GlobalVariable::eraseFromParent(v4);
      }
      if (v21 != v23) {
        free(v21);
      }
    }
    ++v2;
  }
  while (v2 != 2);
}

void sub_25572C750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  v17[5] = v17[5] & 0xF8000000 | 1;
  llvm::User::operator delete(v17);
  if (a17 != v18) {
    free(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t MTLVertexOutputPackingPass::vertexOutputPacking(MTLCompilerErrorObject **a1, llvm::Module *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  if (!MTLFrameworkPass::checkFragmentRenderTargetArrayIndex(a1, a12, a13)) {
    return 0;
  }
  unint64_t v17 = a3[1] - *a3;
  std::vector<unsigned int>::size_type v18 = (v17 >> 5);
  LODWORD(__x.__r_.__value_.__l.__data_) = 0;
  std::vector<unsigned int>::vector(&v83, v18, (const std::vector<unsigned int>::value_type *)&__x);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)"air.vertex";
  __int16 v88 = 259;
  NamedMetachar data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)&__x);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  unint64_t v73 = v17;
  uint64_t v75 = a3;
  uint64_t v77 = *(void *)(Operand - 8 * *(unsigned int *)(Operand + 8) + 8);
  unint64_t v21 = *(unsigned int *)(v77 + 8);
  __x.__r_.__value_.__s.__data_[0] = 0;
  std::vector<BOOL>::vector(&v82, v21, (unsigned __int8 *)&__x);
  uint64_t v69 = (uint64_t)a2;
  uint64_t v23 = *(llvm::BasicBlock **)a2;
  uint64_t v80 = 0;
  BOOL v81 = 0;
  long long __p = 0;
  unsigned int v71 = *(llvm::Function **)(*(void *)(Operand - 8 * *(unsigned int *)(Operand + 8)) + 128);
  uint64_t v72 = v23;
  uint64_t v70 = *((void *)v71 + 3);
  uint64_t v24 = **(void **)(v70 + 16);
  if (v21)
  {
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *(void *)(v77 - 8 * *(unsigned int *)(v77 + 8) + 8 * v25);
      uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v26 - 8 * *(unsigned int *)(v26 + 8)));
      if (v28 <= 16)
      {
        if (v28 == 12)
        {
          if (!memcmp(String, "air.position", 0xCuLL))
          {
            ++a8;
            a9 += 4;
          }
        }
        else if (v28 == 14 && !memcmp(String, "air.point_size", 0xEuLL))
        {
          ++a8;
          ++a9;
        }
        goto LABEL_32;
      }
      if (v28 == 29) {
        break;
      }
      if (v28 != 17) {
        goto LABEL_32;
      }
      if (*String != 0x747265762E726961 || String[1] != 0x757074756F5F7865 || *((unsigned char *)String + 16) != 116)
      {
        if (!memcmp(String, "air.clip_distance", 0x11uLL))
        {
          if (*(unsigned char *)(v24 + 8) == 16
            && (uint64_t v31 = *(void *)(*(void *)(v24 + 16) + 8 * v25)) != 0
            && *(unsigned char *)(v31 + 8) == 17)
          {
            uint64_t v32 = *(void *)(v31 + 32);
            unint64_t v33 = (unint64_t)(v32 + 3) >> 2;
          }
          else
          {
            LODWORD(v32) = 1;
            LODWORD(v33) = 1;
          }
          a9 += v32;
          a8 += v33;
        }
        goto LABEL_32;
      }
      LODWORD(__x.__r_.__value_.__l.__data_) = 0;
      int MatchingFragmentInput = MTLFrameworkPass::findMatchingFragmentInput((char ***)a1, &__x, v24, v25, v26, v75, a5);
      if (MatchingFragmentInput == 1)
      {
        v83.__begin_[LODWORD(__x.__r_.__value_.__l.__data_)] = v25 + 1;
        goto LABEL_49;
      }
      if (MatchingFragmentInput == 2)
      {
        uint64_t v66 = 0;
        goto LABEL_93;
      }
LABEL_50:
      if (++v25 == v21) {
        goto LABEL_54;
      }
    }
    if (!memcmp(String, "air.render_target_array_index", 0x1DuLL)) {
      dataTypeFromMetadata(1u, v26);
    }
LABEL_32:
    uint64_t v35 = v80;
    if (v80 >= v81)
    {
      uint64_t v37 = (char *)__p;
      uint64_t v38 = (v80 - (unsigned char *)__p) >> 2;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = v81 - (unsigned char *)__p;
      if ((v81 - (unsigned char *)__p) >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        char v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v81, v41);
        uint64_t v37 = (char *)__p;
        uint64_t v35 = v80;
      }
      else
      {
        char v42 = 0;
      }
      uint64_t v43 = &v42[4 * v38];
      *(_DWORD *)uint64_t v43 = v25;
      uint64_t v36 = v43 + 4;
      while (v35 != v37)
      {
        int v44 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v43 - 1) = v44;
        v43 -= 4;
      }
      long long __p = v43;
      uint64_t v80 = v36;
      BOOL v81 = &v42[4 * v41];
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v80 = v25;
      uint64_t v36 = v35 + 4;
    }
    uint64_t v80 = v36;
LABEL_49:
    *(void *)((char *)v82 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    goto LABEL_50;
  }
LABEL_54:
  if ((v73 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v45 = 0;
    while (v83.__begin_[v45])
    {
      ++v45;
      if (!--v18) {
        goto LABEL_58;
      }
    }
    uint64_t v48 = *v75 + 2 * v45;
    uint64_t v49 = *(void **)(v48 + 8);
    if (v49)
    {
      std::string::basic_string[abi:ne180100](__dst, v49, *(void *)(v48 + 16));
    }
    else
    {
      __dst[0] = 0;
      __dst[1] = 0;
      uint64_t v85 = 0;
    }
    MTLFrameworkPass::attribute_name((uint64_t)__dst, &__x);
    if (SHIBYTE(v85) < 0) {
      operator delete(__dst[0]);
    }
    p_x = &__x;
    if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_x = (std::string *)__x.__r_.__value_.__r.__words[0];
    }
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "Link failed: fragment input %s was not found in vertex shader outputs", (const char *)p_x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
  }
  else
  {
LABEL_58:
    int v46 = a10;
    if (a8 <= a10)
    {
      int v46 = a11;
      if (a9 <= a11)
      {
        unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
        int64_t v67 = v80 - (unsigned char *)__p;
        unint64_t v51 = (unint64_t)(v80 - (unsigned char *)__p) >> 2;
        unsigned int v68 = v51 - 1431655765 * ((a4[1] - *a4) >> 3);
        if (v68)
        {
          unint64_t v52 = (*(_DWORD *)(v70 + 12) - 1);
          std::vector<llvm::Type *>::vector(&v78, v52);
          if (v52)
          {
            uint64_t v53 = 0;
            do
            {
              *(void *)((char *)v78 + v53) = *(void *)(*(void *)(v70 + 16) + v53 + 8);
              v53 += 8;
            }
            while (8 * v52 != v53);
          }
          __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&__x.__r_.__value_.__r.__words[2];
          __x.__r_.__value_.__l.__size_ = 0x1000000000;
          if (v50)
          {
            uint64_t v54 = 0;
            do
            {
              uint64_t v55 = *a4;
              int v56 = *(unsigned __int8 *)(v24 + 8);
              uint64_t v57 = v24;
              if (v56 == 16)
              {
                uint64_t v57 = *(void *)(*(void *)(v24 + 16) + 8 * (v83.__begin_[*(unsigned __int16 *)(v55 + v54 + 6)] - 1));
                int v56 = *(_DWORD *)(v57 + 8);
              }
              if ((v56 & 0xFE) == 0x12) {
                uint64_t v57 = **(void **)(v57 + 16);
              }
              uint64_t v58 = v55 + v54;
              *(void *)(v58 + 16) = v57;
              if (*(unsigned __int16 *)(v58 + 2) >= 2uLL) {
                uint64_t v57 = llvm::VectorType::get();
              }
              llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&__x, v57);
              v54 += 24;
            }
            while (24 * v50 != v54);
          }
          if (v51)
          {
            uint64_t v59 = 0;
            do
            {
              uint64_t v60 = v24;
              if (*(unsigned char *)(v24 + 8) == 16) {
                uint64_t v60 = *(void *)(*(void *)(v24 + 16) + 8 * *(unsigned int *)((char *)__p + v59));
              }
              llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&__x, v60);
              v59 += 4;
            }
            while ((v67 & 0x3FFFFFFFCLL) != v59);
          }
          if (v68 > 1) {
            llvm::StructType::get();
          }
          uint64_t v63 = llvm::FunctionType::get();
          *((_DWORD *)v71 + 8) = *((_DWORD *)v71 + 8) & 0xFFFFBFC0 | 0x4007;
          __dst[0] = "air.packedVertexFunction";
          __int16 v86 = 259;
          uint64_t v64 = (const llvm::Twine *)llvm::Function::Create(v63, 0, (uint64_t)__dst, v69);
          __dst[0] = "Body";
          __int16 v86 = 259;
          llvm::BasicBlock::Create(v72, (llvm::LLVMContext *)__dst, v64, 0, v65);
        }
        uint64_t v66 = 1;
        goto LABEL_93;
      }
      int v47 = "varying components";
      a8 = a9;
    }
    else
    {
      int v47 = "varyings";
    }
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "Link failed: number of shader %s (%u) exceeds limit (%u). Note that on macOS the following attributes count towards the limit: [[position]], [[clip_distance]], [[point_size]], [[point_coord]], and, when read in the fragment shader, [[viewport_array_index]] & [[render_target_array_index]].", v47, a8, v46);
  }
  uint64_t v66 = 0;
LABEL_93:
  if (__p)
  {
    uint64_t v80 = (char *)__p;
    operator delete(__p);
  }
  if (v82) {
    operator delete(v82);
  }
  if (v83.__begin_)
  {
    v83.__end_ = v83.__begin_;
    operator delete(v83.__begin_);
  }
  return v66;
}

void sub_25572D760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  if (__p) {
    operator delete(__p);
  }
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a60);
  uint64_t v62 = *(void **)(v60 + 200);
  if (v62 != (void *)a18) {
    free(v62);
  }
  if (a43) {
    operator delete(a43);
  }
  if (a46) {
    operator delete(a46);
  }
  if (a49) {
    operator delete(a49);
  }
  uint64_t v63 = *(void **)v60;
  if (*(void *)v60)
  {
    *(void *)(v60 + 8) = v63;
    operator delete(v63);
  }
  _Unwind_Resume(a1);
}

uint64_t llvm::IRBuilderBase::CreateExtractValue(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2 || a2[16] > 0x14u)
  {
    __int16 v12 = 257;
    unsigned int v10 = llvm::ExtractValueInst::Create((llvm::Value *)a2, a3, a4, (uint64_t)v11, 0);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, (uint64_t)v10, a5);
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 344))(*(void *)(a1 + 72));
  if (v7) {
    BOOL v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    return v7;
  }
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v7, a5);
}

uint64_t llvm::IRBuilderBase::CreateInsertValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u || !a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u)
  {
    uint64_t v11 = llvm::InsertValueInst::Create();
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v11, a6);
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 352))(*(void *)(a1 + 72));
  if (v8) {
    BOOL v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    return v8;
  }
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v8, a6);
}

llvm::UnaryInstruction *llvm::ExtractValueInst::Create(llvm::Value *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Instruction *a5)
{
  uint64_t v7 = (llvm::UnaryInstruction *)llvm::User::operator new((llvm::User *)0x60);
  IndexedType = (llvm::Type *)llvm::ExtractValueInst::getIndexedType();
  llvm::UnaryInstruction::UnaryInstruction(v7, IndexedType, 0x40u, a1, a5);
  *((void *)v7 + 8) = (char *)v7 + 80;
  *((void *)v7 + 9) = 0x400000000;
  llvm::ExtractValueInst::init();
  return v7;
}

void sub_25572DBAC(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)*((void *)v1 + 8);
  if (v4 != v2) {
    free(v4);
  }
  llvm::Instruction::~Instruction(v1);
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::UnaryInstruction::UnaryInstruction(llvm::UnaryInstruction *this, llvm::Type *a2, unsigned int a3, llvm::Value *a4, llvm::Instruction *a5)
{
  int v6 = (void *)((char *)this - 32);
  uint64_t result = llvm::Instruction::Instruction();
  if (*(void *)(result - 32))
  {
    **(void **)(result - 16) = *(void *)(result - 24);
    uint64_t v8 = *(void *)(result - 24);
    if (v8) {
      *(void *)(v8 + 16) = *(void *)(result - 16);
    }
  }
  *int v6 = a4;
  if (a4)
  {
    uint64_t v11 = *((void *)a4 + 1);
    unsigned int v10 = (void *)((char *)a4 + 8);
    uint64_t v9 = v11;
    *(void *)(result - 24) = v11;
    if (v11) {
      *(void *)(v9 + 16) = result - 24;
    }
    *(void *)(result - 16) = v10;
    *unsigned int v10 = v6;
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateExtractElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  if (!a2 || *((unsigned __int8 *)a2 + 16) > 0x14u || !a3 || *((unsigned __int8 *)a3 + 16) > 0x14u)
  {
    __int16 v12 = 257;
    uint64_t v10 = llvm::ExtractElementInst::Create(a2, a3, (llvm::Value *)v11, 0, a5);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v10, (uint64_t)a4);
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 9) + 320))(*((void *)this + 9));
  if (v7) {
    BOOL v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    return v7;
  }
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v7, (uint64_t)a4);
}

uint64_t llvm::IRBuilderBase::CreateInsertElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  if (!a2
    || *((unsigned __int8 *)a2 + 16) > 0x14u
    || !a3
    || *((unsigned __int8 *)a3 + 16) > 0x14u
    || !a4
    || *((unsigned __int8 *)a4 + 16) > 0x14u)
  {
    __int16 v13 = 257;
    uint64_t v11 = llvm::InsertElementInst::Create(a2, a3, a4, (llvm::Value *)v12, 0, a6);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v11, (uint64_t)a5);
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 9) + 328))(*((void *)this + 9));
  if (v8) {
    BOOL v9 = *(unsigned __int8 *)(v8 + 16) >= 0x1Cu;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9) {
    return v8;
  }
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v8, (uint64_t)a5);
}

uint64_t llvm::ExtractElementInst::Create(llvm::ExtractElementInst *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  uint64_t v5 = llvm::User::operator new((llvm::User *)0x40);
  llvm::ExtractElementInst::ExtractElementInst();
  return v5;
}

void sub_25572DEB8(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::InsertElementInst::Create(llvm::InsertElementInst *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5, llvm::Instruction *a6)
{
  uint64_t v11 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x25A28D400](v11, this, a2, a3, a4, a5);
  return v11;
}

void sub_25572DF38(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::InsertValueInst::Create()
{
  uint64_t v0 = llvm::User::operator new((llvm::User *)0x60);
  llvm::Instruction::Instruction();
  *(void *)(v0 + 64) = v0 + 80;
  *(void *)(v0 + 72) = 0x400000000;
  llvm::InsertValueInst::init();
  return v0;
}

void sub_25572DFF4(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)*((void *)v1 + 8);
  if (v4 != v2) {
    free(v4);
  }
  llvm::Instruction::~Instruction(v1);
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  uint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    llvm::Instruction *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

BOOL MTLBoundsCheck::isLibraryModule(MTLBoundsCheck *this, llvm::Module *a2)
{
  v4[0] = "air.vertex";
  __int16 v5 = 259;
  if (llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v4)) {
    return 0;
  }
  v4[0] = "air.fragment";
  __int16 v5 = 259;
  if (llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v4)) {
    return 0;
  }
  v4[0] = "air.kernel";
  __int16 v5 = 259;
  if (llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v4)) {
    return 0;
  }
  v4[0] = "air.object";
  __int16 v5 = 259;
  if (llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v4)) {
    return 0;
  }
  v4[0] = "air.mesh";
  __int16 v5 = 259;
  return llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v4) == 0;
}

void MTLBoundsCheck::getMangledTypeStr(MTLBoundsCheck *this@<X0>, llvm::Type *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  unint64_t v5 = *((unsigned int *)this + 2);
  int v6 = *((_DWORD *)this + 2);
  if (this && v6 == 15)
  {
    if (v5 >= 0x100)
    {
      unint64_t v13 = v5 >> 8;
      unint64_t v7 = &v61.__r_.__value_.__s.__data_[21];
      do
      {
        *--unint64_t v7 = (v13 % 0xA) | 0x30;
        BOOL v10 = v13 > 9;
        v13 /= 0xAuLL;
      }
      while (v10);
    }
    else
    {
      unint64_t v7 = &v61.__r_.__value_.__s.__data_[20];
      v61.__r_.__value_.__s.__data_[20] = 48;
    }
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v57, v7, &v61.__r_.__value_.__s.__data_[21], (char *)&v61.__r_.__value_.__r.__words[2] + 5 - v7);
    int v14 = std::string::insert(&v57, 0, "p");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    MTLBoundsCheck::getMangledTypeStr((uint64_t *)&v61, **((MTLBoundsCheck ***)this + 2), v16);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v17 = &v61;
    }
    else {
      unint64_t v17 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v61.__r_.__value_.__l.__size_;
    }
    int v19 = std::string::append(&v58, (const std::string::value_type *)v17, size);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    int64_t v60 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v60 >= 0) {
      unint64_t v21 = __p;
    }
    else {
      unint64_t v21 = (void **)__p[0];
    }
    if (v60 >= 0) {
      std::string::size_type v22 = HIBYTE(v60);
    }
    else {
      std::string::size_type v22 = (std::string::size_type)__p[1];
    }
  }
  else if (this && v6 == 17)
  {
    unint64_t v8 = *((void *)this + 4);
    if (v8)
    {
      unint64_t v9 = &v61.__r_.__value_.__s.__data_[21];
      do
      {
        *--unint64_t v9 = (v8 % 0xA) | 0x30;
        BOOL v10 = v8 > 9;
        v8 /= 0xAuLL;
      }
      while (v10);
    }
    else
    {
      unint64_t v9 = &v61.__r_.__value_.__s.__data_[20];
      v61.__r_.__value_.__s.__data_[20] = 48;
    }
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v57, v9, &v61.__r_.__value_.__s.__data_[21], (char *)&v61.__r_.__value_.__r.__words[2] + 5 - v9);
    uint64_t v31 = std::string::insert(&v57, 0, "a");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    MTLBoundsCheck::getMangledTypeStr((uint64_t *)&v61, *((MTLBoundsCheck **)this + 3), v33);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v34 = &v61;
    }
    else {
      uint64_t v34 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v61.__r_.__value_.__l.__size_;
    }
    uint64_t v36 = std::string::append(&v58, (const std::string::value_type *)v34, v35);
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    int64_t v60 = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (v60 >= 0) {
      unint64_t v21 = __p;
    }
    else {
      unint64_t v21 = (void **)__p[0];
    }
    if (v60 >= 0) {
      std::string::size_type v22 = HIBYTE(v60);
    }
    else {
      std::string::size_type v22 = (std::string::size_type)__p[1];
    }
  }
  else
  {
    if (this && v6 == 16)
    {
      if ((v5 & 0x400) != 0)
      {
        std::string::append(a3, "sl_");
        uint64_t v47 = *((unsigned int *)this + 3);
        if (v47)
        {
          uint64_t v48 = (MTLBoundsCheck **)*((void *)this + 2);
          uint64_t v49 = 8 * v47;
          do
          {
            MTLBoundsCheck::getMangledTypeStr((uint64_t *)__p, *v48, v46);
            if (v60 >= 0) {
              unint64_t v50 = __p;
            }
            else {
              unint64_t v50 = (void **)__p[0];
            }
            if (v60 >= 0) {
              std::string::size_type v51 = HIBYTE(v60);
            }
            else {
              std::string::size_type v51 = (std::string::size_type)__p[1];
            }
            std::string::append(a3, (const std::string::value_type *)v50, v51);
            if (SHIBYTE(v60) < 0) {
              operator delete(__p[0]);
            }
            ++v48;
            v49 -= 8;
          }
          while (v49);
        }
      }
      else
      {
        std::string::append(a3, "s_");
        uint64_t Name = (const std::string::value_type *)llvm::StructType::getName(this);
        std::string::append(a3, Name, v12);
      }
      std::string::append(a3, "s");
      return;
    }
    if (this && v6 == 14)
    {
      MTLBoundsCheck::getMangledTypeStr((uint64_t *)&v58, **((MTLBoundsCheck ***)this + 2), a2);
      uint64_t v23 = std::string::insert(&v58, 0, "f_");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      int64_t v60 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (v60 >= 0) {
        unint64_t v25 = __p;
      }
      else {
        unint64_t v25 = (void **)__p[0];
      }
      if (v60 >= 0) {
        std::string::size_type v26 = HIBYTE(v60);
      }
      else {
        std::string::size_type v26 = (std::string::size_type)__p[1];
      }
      std::string::append(a3, (const std::string::value_type *)v25, v26);
      if (SHIBYTE(v60) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (*((_DWORD *)this + 3) != 1)
      {
        unint64_t v28 = 0;
        do
        {
          MTLBoundsCheck::getMangledTypeStr((uint64_t *)__p, *(MTLBoundsCheck **)(*((void *)this + 2) + 8 * v28 + 8), v27);
          if (v60 >= 0) {
            int v29 = __p;
          }
          else {
            int v29 = (void **)__p[0];
          }
          if (v60 >= 0) {
            std::string::size_type v30 = HIBYTE(v60);
          }
          else {
            std::string::size_type v30 = (std::string::size_type)__p[1];
          }
          std::string::append(a3, (const std::string::value_type *)v29, v30);
          if (SHIBYTE(v60) < 0) {
            operator delete(__p[0]);
          }
          ++v28;
        }
        while (v28 < (*((_DWORD *)this + 3) - 1));
      }
      if (*((_DWORD *)this + 2) > 0xFFu) {
        std::string::append(a3, "vararg");
      }
      std::string::append(a3, "f");
      return;
    }
    if (!this || v6 != 18)
    {
      unint64_t v52 = "isVoid";
      switch(*((_DWORD *)this + 2))
      {
        case 1u:
          unint64_t v52 = "bf16";
          goto LABEL_124;
        case 2u:
          unint64_t v52 = "f32";
          goto LABEL_124;
        case 3u:
          unint64_t v52 = "f64";
          goto LABEL_124;
        case 4u:
          unint64_t v52 = "f80";
          goto LABEL_124;
        case 5u:
          unint64_t v52 = "f128";
          goto LABEL_124;
        case 6u:
          unint64_t v52 = "ppcf128";
          goto LABEL_124;
        case 7u:
          goto LABEL_124;
        case 8u:
        case 0xBu:
        case 0xCu:
          __break(1u);
          return;
        case 9u:
          unint64_t v52 = "Metadata";
          goto LABEL_124;
        case 0xAu:
          unint64_t v52 = "x86mmx";
          goto LABEL_124;
        case 0xDu:
          llvm::utostr((llvm *)(v5 >> 8), 0, &v58);
          uint64_t v53 = std::string::insert(&v58, 0, "i");
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          int64_t v60 = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long __p = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          if (v60 >= 0) {
            uint64_t v55 = __p;
          }
          else {
            uint64_t v55 = (void **)__p[0];
          }
          if (v60 >= 0) {
            std::string::size_type v56 = HIBYTE(v60);
          }
          else {
            std::string::size_type v56 = (std::string::size_type)__p[1];
          }
          std::string::append(a3, (const std::string::value_type *)v55, v56);
          if (SHIBYTE(v60) < 0) {
            operator delete(__p[0]);
          }
          if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return;
          }
          uint64_t v38 = (void *)v58.__r_.__value_.__r.__words[0];
          goto LABEL_76;
        default:
          unint64_t v52 = "f16";
LABEL_124:
          std::string::append(a3, v52);
          return;
      }
    }
    llvm::utostr((llvm *)*((unsigned int *)this + 8), 0, &v57);
    unint64_t v39 = std::string::insert(&v57, 0, "v");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    MTLBoundsCheck::getMangledTypeStr((uint64_t *)&v61, *((MTLBoundsCheck **)this + 3), v41);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v42 = &v61;
    }
    else {
      char v42 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = v61.__r_.__value_.__l.__size_;
    }
    int v44 = std::string::append(&v58, (const std::string::value_type *)v42, v43);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    int64_t v60 = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if (v60 >= 0) {
      unint64_t v21 = __p;
    }
    else {
      unint64_t v21 = (void **)__p[0];
    }
    if (v60 >= 0) {
      std::string::size_type v22 = HIBYTE(v60);
    }
    else {
      std::string::size_type v22 = (std::string::size_type)__p[1];
    }
  }
  std::string::append(a3, (const std::string::value_type *)v21, v22);
  if (SHIBYTE(v60) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v38 = (void *)v57.__r_.__value_.__r.__words[0];
LABEL_76:
    operator delete(v38);
  }
}

void sub_25572E9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

void *llvm::utostr@<X0>(llvm *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  unint64_t v4 = (unint64_t)this;
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!this)
  {
    unint64_t v5 = &v8;
    char v8 = 48;
    if (!a2) {
      return std::string::__init_with_size[abi:ne180100]<char *,char *>(a3, v5, (char *)&v9, (char *)&v9 - v5);
    }
    goto LABEL_5;
  }
  unint64_t v5 = (char *)&v9;
  do
  {
    *--unint64_t v5 = (v4 % 0xA) | 0x30;
    BOOL v6 = v4 > 9;
    v4 /= 0xAuLL;
  }
  while (v6);
  if (a2) {
LABEL_5:
  }
    *--unint64_t v5 = 45;
  return std::string::__init_with_size[abi:ne180100]<char *,char *>(a3, v5, (char *)&v9, (char *)&v9 - v5);
}

void MTLBoundsCheck::gatherMemoryArguments(uint64_t a1, uint64_t a2)
{
  v43[10] = *MEMORY[0x263EF8340];
  unint64_t v4 = *(llvm::Module **)(a1 + 40);
  unint64_t v5 = *(llvm::Type **)v4;
  llvm::Module::getDataLayout(v4);
  if ((*(_WORD *)(a1 + 18) & 1) == 0)
  {
    BOOL v6 = *(char **)(a1 + 88);
LABEL_4:
    unint64_t v7 = v6;
    goto LABEL_6;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)a1);
  BOOL v6 = *(char **)(a1 + 88);
  if ((*(_WORD *)(a1 + 18) & 1) == 0) {
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)a1);
  unint64_t v7 = *(char **)(a1 + 88);
LABEL_6:
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t Name = llvm::Value::getName((llvm::Value *)a1);
  v40[1] = Name;
  _OWORD v40[2] = (uint64_t)v10;
  if ((unint64_t)v10 < 0xB)
  {
    if (v10 == (llvm::LLVMContext *)10)
    {
      if (*(void *)Name != 0x6D6F74612E726961 || *(_WORD *)(Name + 8) != 25449) {
        goto LABEL_48;
      }
      goto LABEL_63;
    }
    if ((unint64_t)v10 < 9) {
      goto LABEL_52;
    }
    goto LABEL_48;
  }
  BOOL v13 = *(void *)Name != 0x6D656D2E6D766C6CLL || *(void *)(Name + 3) != 0x7970636D656D2E6DLL;
  unint64_t v14 = 0x6C6C766D2E6D656DLL;
  unint64_t v15 = bswap64(*(void *)Name);
  if (v15 == 0x6C6C766D2E6D656DLL
    && (unint64_t v14 = 0x6D2E6D656D636D70, v15 = bswap64(*(void *)(Name + 3)), v15 == 0x6D2E6D656D636D70))
  {
    int v16 = 0;
    if (!v13) {
      goto LABEL_59;
    }
  }
  else
  {
    if (v15 < v14) {
      int v16 = -1;
    }
    else {
      int v16 = 1;
    }
    if (!v13) {
      goto LABEL_59;
    }
  }
  if (!v16)
  {
LABEL_59:
    unint64_t v41 = v6;
    BOOL v23 = v16 == 0;
    long long v37 = v6 + 40;
    v40[0] = (uint64_t)(v6 + 80);
    LODWORD(v38) = 1;
    int v39 = 1;
    llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v37, v40, (int *)&v38, &v39);
    if (v23) {
      int v24 = 1;
    }
    else {
      int v24 = 2;
    }
    LODWORD(v38) = v24;
    int v39 = 0;
    llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v41, v40, (int *)&v38, &v39);
    return;
  }
  if (*(void *)Name == 0x6D656D2E6D766C6CLL && *(void *)(Name + 3) == 0x7465736D656D2E6DLL)
  {
    unint64_t v41 = v6;
    long long v37 = v6 + 80;
    LODWORD(v40[0]) = 2;
    LODWORD(v38) = 0;
    llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v41, (uint64_t *)&v37, (int *)v40, (int *)&v38);
    return;
  }
  if (*(void *)Name == 0x6D6F74612E726961 && *(_WORD *)(Name + 8) == 25449)
  {
LABEL_63:
    v40[0] = (uint64_t)v6;
    unint64_t v41 = v43;
    uint64_t v42 = 0x500000000;
    llvm::StringRef::split();
    llvm::StringRef::find();
    uint64_t v36 = v41;
    if (v41 == v43) {
      return;
    }
LABEL_107:
    free(v36);
    return;
  }
  if ((unint64_t)v10 >= 0x14)
  {
    BOOL v19 = *(void *)Name == 0x646D69732E726961 && *(void *)(Name + 8) == 0x616D5F70756F7267;
    if (v19 && *(_DWORD *)(Name + 16) == 2020176500)
    {
      unint64_t v41 = v43;
      uint64_t v42 = 0x500000000;
      llvm::StringRef::split();
      if (llvm::StringRef::find() == -1)
      {
        if (llvm::StringRef::find() == -1) {
          goto LABEL_104;
        }
        int v35 = 2;
        unsigned int v34 = 1;
      }
      else
      {
        unsigned int v34 = 0;
        int v35 = 1;
      }
      LODWORD(v38) = v34;
      int v39 = v35;
      long long v37 = &v6[40 * v34];
      llvm::Type::getInt32Ty(v5, v33);
      v40[0] = llvm::ConstantInt::get();
      llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v37, v40, &v39, (int *)&v38);
LABEL_104:
      uint64_t v36 = v41;
      if (v41 == v43) {
        return;
      }
      goto LABEL_107;
    }
  }
LABEL_48:
  if (*(void *)Name != 0x776172642E726961 || *(unsigned char *)(Name + 8) != 95)
  {
LABEL_52:
    LODWORD(v40[0]) = 0;
    while (v6 != &v7[40 * v8])
    {
      unint64_t v41 = v6;
      if (*(unsigned char *)(*(void *)v6 + 8) == 15)
      {
        std::string::size_type v22 = **(llvm::StructType ***)(*(void *)v6 + 16);
        if (*((unsigned char *)v22 + 8) != 16 || !isSpecialStructType(v22))
        {
          long long v37 = 0;
          llvm::Type::getInt32Ty(v5, v10);
          long long v37 = (char *)llvm::ConstantInt::get();
          LODWORD(v38) = 0;
          llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v41, (uint64_t *)&v37, (int *)&v38, (int *)v40);
        }
      }
      v6 += 40;
      ++LODWORD(v40[0]);
    }
    return;
  }
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  v43[0] = 0;
  if ((unint64_t)v10 < 0x1B)
  {
    if ((unint64_t)v10 < 0x10) {
      goto LABEL_94;
    }
LABEL_78:
    if (*(void *)Name == 0x776172642E726961 && *(void *)(Name + 8) == 0x736568637461705FLL)
    {
      LODWORD(v37) = 5;
      std::vector<int>::push_back[abi:ne180100]((uint64_t)&v41, &v37);
      LODWORD(v37) = 8;
      std::vector<int>::push_back[abi:ne180100]((uint64_t)&v41, &v37);
    }
    else if ((unint64_t)v10 >= 0x18)
    {
      BOOL v29 = *(void *)Name == 0x776172642E726961 && *(void *)(Name + 8) == 0x64657865646E695FLL;
      if (v29 && *(void *)(Name + 16) == 0x736568637461705FLL)
      {
        LODWORD(v37) = 5;
        std::vector<int>::push_back[abi:ne180100]((uint64_t)&v41, &v37);
        LODWORD(v37) = 9;
        std::vector<int>::push_back[abi:ne180100]((uint64_t)&v41, &v37);
      }
    }
    goto LABEL_94;
  }
  if (*(void *)Name != 0x776172642E726961
    || *(void *)(Name + 8) != 0x64657865646E695FLL
    || *(void *)(Name + 16) != 0x6974696D6972705FLL
    || *(void *)(Name + 19) != 0x7365766974696D69)
  {
    goto LABEL_78;
  }
  LODWORD(v37) = 4;
  std::vector<int>::push_back[abi:ne180100]((uint64_t)&v41, &v37);
LABEL_94:
  uint64_t v31 = v41;
  long long v32 = (_DWORD *)v42;
  if (v41 != (void *)v42)
  {
    do
    {
      LODWORD(v38) = *v31;
      long long v37 = &v6[40 * (int)v38];
      v40[0] = 0;
      llvm::Type::getInt32Ty(v5, v10);
      v40[0] = llvm::ConstantInt::get();
      int v39 = 1;
      llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v37, v40, &v39, (int *)&v38);
      ++v31;
    }
    while (v31 != v32);
    uint64_t v31 = v41;
  }
  if (v31)
  {
    uint64_t v42 = (uint64_t)v31;
    operator delete(v31);
  }
}

void sub_25572F588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(uint64_t a1, void *a2, uint64_t *a3, int *a4, int *a5)
{
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12)) {
    return llvm::SmallVectorTemplateBase<MTLBoundsCheck::MemoryAccessOperand,true>::growAndEmplaceBack<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a1, a2, a3, a4, a5);
  }
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)a1 + 24 * v5;
  uint64_t v8 = *a3;
  int v9 = *a4;
  int v10 = *a5;
  *(void *)uint64_t v7 = *a2;
  *(void *)(v7 + 8) = v8;
  *(_DWORD *)(v7 + 16) = v9;
  *(_DWORD *)(v7 + 20) = v10;
  unsigned int v11 = v5 + 1;
  *(_DWORD *)(a1 + 8) = v11;
  return v6 + 24 * v11 - 24;
}

uint64_t getPtrTypeFromIntrinsicNameSuffix(uint64_t a1, llvm::LLVMContext *a2, llvm::Type *this)
{
  uint64_t Int32Ty = llvm::Type::getInt32Ty(this, a2);
  uint64_t Int16Ty = llvm::Type::getInt16Ty(this, v7);
  uint64_t FloatTy = llvm::Type::getFloatTy(this, v9);
  uint64_t Int64Ty = llvm::Type::getInt64Ty(this, v11);
  uint64_t HalfTy = llvm::Type::getHalfTy(this, v13);
  uint64_t v15 = llvm::FixedVectorType::get();
  uint64_t v16 = llvm::FixedVectorType::get();
  if ((unint64_t)a2 >= 4)
  {
    unint64_t v17 = (char *)a2 + a1;
    if (*(_DWORD *)((char *)a2 + a1 - 4) == 842230062 || *((_DWORD *)v17 - 1) == 1952805727) {
      return Int32Ty;
    }
    BOOL v18 = (unint64_t)a2 < 6;
    if ((unint64_t)a2 >= 6)
    {
      int v19 = *(_DWORD *)(v17 - 6);
      int v20 = *((unsigned __int16 *)v17 - 1);
      if (v19 == 1701602094 && v20 == 29281) {
        return Int32Ty;
      }
      BOOL v18 = 0;
    }
  }
  else
  {
    if ((unint64_t)a2 < 2) {
      return Int16Ty;
    }
    BOOL v18 = 1;
  }
  std::string::size_type v22 = (char *)a2 + a1;
  if (*(_WORD *)((char *)a2 + a1 - 2) != 29998 && *((_WORD *)v22 - 1) != 29486)
  {
    if ((unint64_t)a2 >= 4)
    {
      if (*((_DWORD *)v22 - 1) == 842229294) {
        return FloatTy;
      }
      if (*((_DWORD *)v22 - 1) == 875981102) {
        return Int64Ty;
      }
      if (v18) {
        return Int16Ty;
      }
    }
    else if (v18)
    {
      return Int16Ty;
    }
    if (*(_DWORD *)(v22 - 6) == 909207086 && *((_WORD *)v22 - 1) == 31060) {
      return HalfTy;
    }
    if (*(_DWORD *)(v22 - 6) == 1765045806 && *((_WORD *)v22 - 1) == 12851) {
      return v15;
    }
    int v25 = *(_DWORD *)(v22 - 6);
    int v26 = *((unsigned __int16 *)v22 - 1);
    if (v25 == 1714714158 && v26 == 12851) {
      return v16;
    }
    return Int16Ty;
  }
  return Int32Ty;
}

void std::vector<int>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4, v12);
      uint64_t v8 = *(_DWORD **)a1;
      uint64_t v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      BOOL v13 = 0;
    }
    unint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)unint64_t v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

void MTLBoundsCheck::gatherMemoryOperands(uint64_t a1, uint64_t a2)
{
  uint64_t Module = (llvm::Module *)llvm::Instruction::getModule((llvm::Instruction *)a1);
  unint64_t v5 = *(llvm::Type **)Module;
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
  int v8 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v8 == 84)
  {
    uint64_t v9 = *(void *)(a1 - 32);
    if (v9)
    {
      if (!*(unsigned char *)(v9 + 16) && *(void *)(v9 + 24) == *(void *)(a1 + 72))
      {
        uint64_t v10 = *(unsigned int *)(a2 + 8);
        MTLBoundsCheck::gatherMemoryArguments(v9, a2);
        uint64_t v11 = *(unsigned int *)(a2 + 8);
        if (v11 != v10)
        {
          uint64_t v12 = 0;
          unint64_t v13 = v11 - v10;
          if (v13 <= 1) {
            unint64_t v13 = 1;
          }
          uint64_t v14 = *(void *)a2 + 24 * v10;
          do
          {
            *(_DWORD *)(v14 + 20) = v12;
            if (*(void *)v14) {
              BOOL v15 = *(unsigned char *)(*(void *)v14 + 16) == 21;
            }
            else {
              BOOL v15 = 0;
            }
            if (v15) {
              *(void *)uint64_t v14 = *(void *)(a1
            }
                                         - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)
                                         + 32 * *(unsigned int *)(*(void *)v14 + 32));
            uint64_t v16 = *(void *)(v14 + 8);
            if (v16) {
              BOOL v17 = *(unsigned char *)(v16 + 16) == 21;
            }
            else {
              BOOL v17 = 0;
            }
            if (v17) {
              *(void *)(v14 + 8) = *(void *)(a1
            }
                                               - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)
                                               + 32 * *(unsigned int *)(v16 + 32));
            ++v12;
            v14 += 24;
          }
          while (v13 != v12);
        }
      }
    }
  }
  else
  {
    if (v8 == 61)
    {
      uint64_t v24 = *(void *)(a1 - 32);
      llvm::Type::getInt32Ty(v5, v6);
      llvm::DataLayout::getTypeSizeInBits(DataLayout, **(llvm::Type ***)(*(void *)v24 + 16));
      BOOL v23 = v19 == 1;
      llvm::TypeSize::operator unsigned long long();
      uint64_t v22 = llvm::ConstantInt::get();
      int v20 = 1;
      int v21 = 2;
    }
    else
    {
      if (v8 != 60) {
        return;
      }
      uint64_t v24 = *(void *)(a1 - 32);
      llvm::Type::getInt32Ty(v5, v6);
      llvm::DataLayout::getTypeSizeInBits(DataLayout, **(llvm::Type ***)(*(void *)v24 + 16));
      BOOL v23 = v18 == 1;
      llvm::TypeSize::operator unsigned long long();
      uint64_t v22 = llvm::ConstantInt::get();
      int v20 = 0;
      int v21 = 1;
    }
    llvm::SmallVectorImpl<MTLBoundsCheck::MemoryAccessOperand>::emplace_back<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(a2, &v24, &v22, &v21, &v20);
  }
}

uint64_t MTLBoundsCheck::lookThroughPointerOps(uint64_t a1, void *a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v3 >= 0x1C)
  {
    uint64_t v2 = 0;
    while (v3 - 77 >= 2)
    {
      if (v3 == 62)
      {
        int v4 = *(_DWORD *)(a1 + 20);
LABEL_9:
        unint64_t v5 = (uint64_t *)(a1 - 32 * (v4 & 0x7FFFFFF));
LABEL_10:
        uint64_t v6 = *v5;
        uint64_t v2 = a1;
        goto LABEL_12;
      }
      uint64_t v6 = a1;
LABEL_12:
      unsigned int v3 = *(unsigned __int8 *)(v6 + 16);
      if (v6)
      {
        a1 = v6;
        if (v3 > 0x1B) {
          continue;
        }
      }
      goto LABEL_16;
    }
    int v4 = *(_DWORD *)(a1 + 20);
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_9;
    }
    unint64_t v5 = *(uint64_t **)(a1 - 8);
    goto LABEL_10;
  }
  uint64_t v6 = a1;
LABEL_16:
  if (v3 == 5)
  {
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v6 + 18);
      BOOL v8 = v7 > 0x32;
      uint64_t v9 = (1 << v7) & 0x6000400000000;
      if (v8 || v9 == 0)
      {
        uint64_t result = v6;
        if (!v6) {
          break;
        }
      }
      else
      {
        uint64_t result = *(void *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
        uint64_t v2 = v6;
        if (!result) {
          break;
        }
      }
      uint64_t v6 = result;
    }
    while (*(unsigned char *)(result + 16) == 5);
  }
  else
  {
    uint64_t result = v6;
  }
  if (a2) {
    *a2 = v2;
  }
  return result;
}

BOOL MTLBoundsCheck::checkAddressSpace(MTLBoundsCheck *this)
{
  return (this - 1) < 2;
}

BOOL MTLBoundsCheck::checkAddressSpace(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(*(void *)a1 + 8);
  if ((v1 & 0xFE) == 0x12) {
    unsigned int v1 = *(_DWORD *)(**(void **)(*(void *)a1 + 16) + 8);
  }
  return (v1 >> 8) - 1 < 2;
}

uint64_t MTLBoundsCheck::gpuOperationToResourceUsage(unsigned int a1)
{
  if (a1 > 4) {
    return 3;
  }
  else {
    return dword_2557AA09C[a1];
  }
}

llvm::NamedMDNode *MTLBoundsCheck::getQualifiedFunctionsMetadata@<X0>(MTLBoundsCheck *this@<X0>, llvm::Module *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  char v5 = 1;
  char v14 = 1;
  if (*(unsigned char *)a2)
  {
    v12[0] = a2;
    char v5 = 3;
  }
  char v13 = v5;
  uint64_t result = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v12);
  unsigned int v7 = result;
  if (result)
  {
    uint64_t result = (llvm::NamedMDNode *)llvm::NamedMDNode::getNumOperands(result);
    int v8 = (int)result;
    if (result)
    {
      int v9 = 0;
      do
      {
        uint64_t Operand = llvm::NamedMDNode::getOperand(v7);
        uint64_t v11 = Operand - 8 * *(unsigned int *)(Operand + 8);
        v12[0] = 0;
        v12[0] = *(void *)(*(void *)v11 + 128);
        uint64_t result = (llvm::NamedMDNode *)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct((uint64_t *)a3, v12);
        *((void *)result + 1) = Operand;
        ++v9;
      }
      while (v8 != v9);
    }
  }
  return result;
}

void sub_25572FD7C(_Unwind_Exception *a1)
{
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap(v1);
  _Unwind_Resume(a1);
}

llvm::NamedMDNode *MTLBoundsCheck::getVisibleFunctionsMetadata@<X0>(MTLBoundsCheck *this@<X0>, uint64_t a2@<X8>)
{
  return MTLBoundsCheck::getQualifiedFunctionsMetadata(this, (llvm::Module *)"air.visible", a2);
}

llvm::NamedMDNode *MTLBoundsCheck::getIntersectionFunctionsMetadata@<X0>(MTLBoundsCheck *this@<X0>, uint64_t a2@<X8>)
{
  return MTLBoundsCheck::getQualifiedFunctionsMetadata(this, (llvm::Module *)"air.intersection", a2);
}

llvm::NamedMDNode *MTLBoundsCheck::getMetalMetadata@<X0>(MTLBoundsCheck *this@<X0>, uint64_t a2@<X8>)
{
  v14[0] = "air.vertex";
  __int16 v15 = 259;
  NamedMetachar data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  v14[0] = "air.kernel";
  __int16 v15 = 259;
  uint64_t v6 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  v14[0] = "air.fragment";
  __int16 v15 = 259;
  unsigned int v7 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  v14[0] = "air.intersection";
  __int16 v15 = 259;
  int v8 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  v14[0] = "air.visible";
  __int16 v15 = 259;
  int v9 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  v14[0] = "air.mesh";
  __int16 v15 = 259;
  uint64_t v10 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  v14[0] = "air.object";
  __int16 v15 = 259;
  uint64_t result = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v14);
  if (NamedMetadata)
  {
    uint64_t result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(NamedMetadata);
    *(void *)a2 = 0;
  }
  else
  {
    if (v6)
    {
      uint64_t result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(v6);
      uint64_t v12 = 2;
    }
    else
    {
      if (v7)
      {
        uint64_t result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(v7);
        char v13 = 1;
        *(void *)a2 = 1;
        *(void *)(a2 + 8) = result;
        goto LABEL_7;
      }
      if (v10)
      {
        uint64_t result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(v10);
        uint64_t v12 = 5;
      }
      else if (result)
      {
        uint64_t result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(result);
        uint64_t v12 = 6;
      }
      else if (v8)
      {
        uint64_t result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(v8);
        uint64_t v12 = 3;
      }
      else
      {
        if (!v9)
        {
          char v13 = 0;
          *(unsigned char *)a2 = 0;
          goto LABEL_7;
        }
        uint64_t result = (llvm::NamedMDNode *)llvm::NamedMDNode::getOperand(v9);
        uint64_t v12 = 4;
      }
    }
    *(void *)a2 = v12;
  }
  *(void *)(a2 + 8) = result;
  char v13 = 1;
LABEL_7:
  *(unsigned char *)(a2 + 16) = v13;
  return result;
}

uint64_t MTLBoundsCheck::SerializedData::fromMetaData(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  unsigned int v3 = (void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  uint64_t v6 = v3[2];
  unint64_t v7 = *(unsigned int *)(*v3 + 8);
  if (v7)
  {
    for (unint64_t i = 0; i < v7; ++i)
    {
      uint64_t v9 = *(void *)(v5 - 8 * v7 + 8 * i);
      uint64_t v10 = (void *)(v9 - 8 * *(unsigned int *)(v9 + 8));
      uint64_t v11 = *(void *)(*v10 + 128);
      uint64_t v12 = (void *)(v11 + 24);
      if (*(_DWORD *)(v11 + 32) >= 0x41u) {
        uint64_t v12 = (void *)*v12;
      }
      LODWORD(String) = *v12;
      uint64_t v13 = *(void *)(v10[1] + 128);
      char v14 = (void *)(v13 + 24);
      if (*(_DWORD *)(v13 + 32) >= 0x41u) {
        char v14 = (void *)*v14;
      }
      HIDWORD(String) = *v14;
      uint64_t v15 = *(void *)(v10[2] + 128);
      uint64_t v16 = (void *)(v15 + 24);
      if (*(_DWORD *)(v15 + 32) >= 0x41u) {
        uint64_t v16 = (void *)*v16;
      }
      LODWORD(v33) = *v16;
      uint64_t v17 = *(void *)(v10[3] + 128);
      int v18 = (void *)(v17 + 24);
      if (*(_DWORD *)(v17 + 32) >= 0x41u) {
        int v18 = (void *)*v18;
      }
      HIDWORD(v33) = *v18;
      uint64_t result = llvm::SmallVectorImpl<MTLBoundsCheck::DebugLocation>::emplace_back<MTLBoundsCheck::DebugLocation&>(v2 + 112, &String);
      unint64_t v7 = *(unsigned int *)(v5 + 8);
    }
  }
  unint64_t v19 = *(unsigned int *)(v4 + 8);
  if (v19)
  {
    for (unint64_t j = 0; j < v19; ++j)
    {
      uint64_t v21 = *(void *)(v4 - 8 * v19 + 8 * j);
      uint64_t v22 = (void *)(v21 - 8 * *(unsigned int *)(v21 + 8));
      uint64_t v23 = *(void *)(*v22 + 128);
      uint64_t v24 = (void *)(v23 + 24);
      if (*(_DWORD *)(v23 + 32) >= 0x41u) {
        uint64_t v24 = (void *)*v24;
      }
      LODWORD(String) = *v24;
      uint64_t v25 = *(void *)(v22[1] + 128);
      int v26 = (void *)(v25 + 24);
      if (*(_DWORD *)(v25 + 32) >= 0x41u) {
        int v26 = (void *)*v26;
      }
      HIDWORD(String) = *v26;
      uint64_t v27 = *(void *)(v22[2] + 128);
      uint64_t v28 = (void *)(v27 + 24);
      if (*(_DWORD *)(v27 + 32) >= 0x41u) {
        uint64_t v28 = (void *)*v28;
      }
      LODWORD(v33) = *v28;
      uint64_t result = llvm::SmallVectorImpl<MTLBoundsCheck::DebugSubProgram>::emplace_back<MTLBoundsCheck::DebugSubProgram&>(v2 + 384, (uint64_t)&String);
      unint64_t v19 = *(unsigned int *)(v4 + 8);
    }
  }
  unint64_t v29 = *(unsigned int *)(v6 + 8);
  if (v29)
  {
    for (unint64_t k = 0; k < v29; ++k)
    {
      uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * v29 + 8 * k));
      uint64_t v33 = v31;
      uint64_t result = llvm::SmallVectorImpl<std::string>::emplace_back<llvm::StringRef>(v2, (uint64_t)&String);
      unint64_t v29 = *(unsigned int *)(v6 + 8);
    }
  }
  *(unsigned char *)(v2 + 650) = 1;
  return result;
}

uint64_t llvm::SmallVectorImpl<MTLBoundsCheck::DebugLocation>::emplace_back<MTLBoundsCheck::DebugLocation&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::MDNode *>,true>::push_back(a1, *a2, a2[1]);
    unsigned int v4 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(_OWORD *)(*(void *)a1 + 16 * v3) = *(_OWORD *)a2;
    unsigned int v4 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v4;
  }
  return *(void *)a1 + 16 * v4 - 16;
}

uint64_t llvm::SmallVectorImpl<MTLBoundsCheck::DebugSubProgram>::emplace_back<MTLBoundsCheck::DebugSubProgram&>(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<MTLBoundsCheck::DebugSubProgram,true>::push_back(a1, *(void *)a2, *(_DWORD *)(a2 + 8));
    unsigned int v6 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    uint64_t v4 = *(void *)a1 + 12 * v3;
    uint64_t v5 = *(void *)a2;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)uint64_t v4 = v5;
    unsigned int v6 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v6;
  }
  return *(void *)a1 + 12 * v6 - 12;
}

uint64_t llvm::SmallVectorImpl<std::string>::emplace_back<llvm::StringRef>(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<std::string,false>::growAndEmplaceBack<llvm::StringRef>();
  }
  uint64_t v4 = (void *)(*(void *)a1 + 24 * v3);
  size_t v5 = *(void *)(a2 + 8);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unsigned int v6 = *(const void **)a2;
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    v4[1] = v5;
    v4[2] = v8 | 0x8000000000000000;
    *uint64_t v4 = v9;
    uint64_t v4 = v9;
  }
  else
  {
    *((unsigned char *)v4 + 23) = v5;
    if (!v5) {
      goto LABEL_10;
    }
  }
  memmove(v4, v6, v5);
LABEL_10:
  *((unsigned char *)v4 + v5) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v10;
  return *(void *)a1 + 24 * v10 - 24;
}

uint64_t MTLBoundsCheck::SerializedData::dump(MTLBoundsCheck::SerializedData *this)
{
  uint64_t result = printf("threadgroupArgumentOffset: %d\nthreadgroupArgumentMask: %X\nserializedFromMetadata: %d\n", *((_DWORD *)this + 158), *((_DWORD *)this + 159), *((unsigned __int8 *)this + 650));
  uint64_t v3 = *((unsigned int *)this + 30);
  if (v3)
  {
    uint64_t v4 = (unsigned int *)*((void *)this + 14);
    size_t v5 = &v4[4 * v3];
    do
    {
      uint64_t v6 = *((void *)this + 48);
      uint64_t v7 = *(void *)this + 24 * *(unsigned int *)(v6 + 12 * *v4);
      if (*(char *)(v7 + 23) < 0) {
        uint64_t v7 = *(void *)v7;
      }
      uint64_t v8 = v6 + 12 * *v4;
      uint64_t v9 = *(void *)this + 24 * *(unsigned int *)(v8 + 4);
      if (*(char *)(v9 + 23) < 0) {
        uint64_t v9 = *(void *)v9;
      }
      uint64_t result = printf("Location: %s:%d  :: %s, line: %d, col: %d, inlinedAt: %d\n", (const char *)v7, *(_DWORD *)(v8 + 8), (const char *)v9, v4[1], v4[2], v4[3]);
      v4 += 4;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t MTLBoundsCheck::SerializedData::toMetaData(MTLBoundsCheck::SerializedData *this, llvm::LLVMContext *a2)
{
  v25[16] = *MEMORY[0x263EF8340];
  llvm::IntegerType::get();
  v24[0] = v25;
  v24[1] = (void *)0x1000000000;
  v22[0] = v23;
  v22[1] = (void *)0x1000000000;
  v20[0] = v21;
  v20[1] = (void *)0x1000000000;
  uint64_t v3 = *((unsigned int *)this + 30);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 14);
    uint64_t v5 = v4 + 16 * v3;
    do
    {
      llvm::ConstantInt::get();
      uint64_t Impl = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      uint64_t v15 = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      uint64_t v16 = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      uint64_t v17 = llvm::ValueAsMetadata::get();
      llvm::SmallVector<llvm::Metadata *,4u>::SmallVector((uint64_t)&v18, &Impl, 4);
      uint64_t Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v24, &Impl);
      if (v18 != v19) {
        free(v18);
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
  unsigned int v6 = *((_DWORD *)this + 98);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 48);
    uint64_t v8 = v7 + 12 * v6;
    do
    {
      llvm::ConstantInt::get();
      uint64_t Impl = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      uint64_t v15 = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      uint64_t v16 = llvm::ValueAsMetadata::get();
      llvm::SmallVector<llvm::Metadata *,3u>::SmallVector((uint64_t)&v18, &Impl, 3);
      uint64_t Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v20, &Impl);
      if (v18 != v19) {
        free(v18);
      }
      v7 += 12;
    }
    while (v7 != v8);
  }
  uint64_t v9 = *((unsigned int *)this + 2);
  if (v9)
  {
    uint64_t v10 = *(void *)this;
    uint64_t v11 = 24 * v9;
    do
    {
      int v18 = (void *)llvm::MDString::get();
      llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v22, (uint64_t *)&v18);
      v10 += 24;
      v11 -= 24;
    }
    while (v11);
  }
  uint64_t Impl = llvm::MDTuple::getImpl();
  uint64_t v15 = llvm::MDTuple::getImpl();
  uint64_t v16 = llvm::MDTuple::getImpl();
  llvm::SmallVector<llvm::Metadata *,3u>::SmallVector((uint64_t)&v18, &Impl, 3);
  uint64_t v12 = llvm::MDTuple::getImpl();
  if (v18 != v19) {
    free(v18);
  }
  if (v20[0] != v21) {
    free(v20[0]);
  }
  if (v22[0] != v23) {
    free(v22[0]);
  }
  if (v24[0] != v25) {
    free(v24[0]);
  }
  return v12;
}

void sub_2557307C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  if (a14 != &a16) {
    free(a14);
  }
  if (a20 != v40) {
    free(a20);
  }
  if (a38 != v39) {
    free(a38);
  }
  std::string::size_type v43 = *(void **)(v41 - 232);
  if (v43 != v38) {
    free(v43);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::getLocationIndex(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 8);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = *(llvm::MDString **)(a1 - 8 * v1 + 8 * v3);
    if (!*(unsigned char *)v4) {
      break;
    }
LABEL_15:
    if (++v3 >= v1) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t String = llvm::MDString::getString(v4);
  if (v6 != 18)
  {
    unint64_t v1 = *(unsigned int *)(a1 + 8);
    goto LABEL_15;
  }
  BOOL v8 = *(void *)String == 0x61636F6C2E726961
    && *(void *)(String + 8) == 0x646E695F6E6F6974
    && *(_WORD *)(String + 16) == 30821;
  unint64_t v1 = *(unsigned int *)(a1 + 8);
  if (!v8) {
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(*(void *)(a1 - 8 * v1 + 8 * v3 + 8) + 128);
  uint64_t v11 = (unsigned int *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u) {
    uint64_t v11 = *(unsigned int **)v11;
  }
  return *v11;
}

uint64_t MTLBoundsCheck::getAddressSpace(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 8);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = *(llvm::MDString **)(a1 - 8 * v1 + 8 * v3);
    if (!*(unsigned char *)v4) {
      break;
    }
LABEL_15:
    if (++v3 >= v1) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t String = llvm::MDString::getString(v4);
  if (v6 != 17)
  {
    unint64_t v1 = *(unsigned int *)(a1 + 8);
    goto LABEL_15;
  }
  BOOL v8 = *(void *)String == 0x726464612E726961
    && *(void *)(String + 8) == 0x636170735F737365
    && *(unsigned char *)(String + 16) == 101;
  unint64_t v1 = *(unsigned int *)(a1 + 8);
  if (!v8) {
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(*(void *)(a1 - 8 * v1 + 8 * v3 + 8) + 128);
  uint64_t v11 = (unsigned int *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u) {
    uint64_t v11 = *(unsigned int **)v11;
  }
  return *v11;
}

uint64_t MTLBoundsCheck::setLocationIndex(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0;
  while (1)
  {
    uint64_t v4 = *(llvm::MDString **)(a1 - 8 * v1 + 8 * v3);
    if (!*(unsigned char *)v4)
    {
      uint64_t String = llvm::MDString::getString(v4);
      if (v6 == 18)
      {
        BOOL v7 = *(void *)String == 0x61636F6C2E726961 && *(void *)(String + 8) == 0x646E695F6E6F6974;
        if (v7 && *(_WORD *)(String + 16) == 30821) {
          break;
        }
      }
    }
    ++v3;
    unint64_t v1 = *(unsigned int *)(a1 + 8);
    if (v3 >= v1) {
      return 0;
    }
  }
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = (llvm::Type *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 4) != 0) {
    uint64_t v11 = *(llvm::Type **)v11;
  }
  llvm::Type::getInt32Ty(v11, (llvm::LLVMContext *)0x12);
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDNode::replaceOperandWith();
  return 1;
}

uint64_t MTLBoundsCheck::getArgTypeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(unsigned int *)(result + 8);
  if (v5)
  {
    uint64_t v6 = result;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t result = *(void *)(v6 - 8 * v5 + 8 * i);
      if (!*(unsigned char *)result)
      {
        uint64_t result = llvm::MDString::getString((llvm::MDString *)result);
        if (v8 == 17)
        {
          BOOL v10 = *(void *)result == 0x5F6772612E726961
             && *(void *)(result + 8) == 0x6D616E5F65707974
             && *(unsigned char *)(result + 16) == 101;
          unint64_t v5 = *(unsigned int *)(v6 + 8);
          if (v10)
          {
            uint64_t result = llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * v5 + 8 * i + 8));
            *(void *)a3 = result;
            *(void *)(a3 + 8) = v11;
            *(unsigned char *)(a3 + 16) = 1;
            return result;
          }
        }
        else
        {
          unint64_t v5 = *(unsigned int *)(v6 + 8);
        }
      }
    }
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(void *)(a3 + 16) = *(void *)(a2 + 16);
  return result;
}

unsigned int *MTLBoundsCheck::getArgName@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = result[2];
  if (v5)
  {
    uint64_t v6 = result;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t result = *(unsigned int **)&v6[2 * i + -2 * v5];
      if (!*(unsigned char *)result)
      {
        uint64_t result = (unsigned int *)llvm::MDString::getString((llvm::MDString *)result);
        if (v8 == 12)
        {
          BOOL v9 = *(void *)result == 0x5F6772612E726961 && result[2] == 1701667182;
          unint64_t v5 = v6[2];
          if (v9)
          {
            uint64_t result = (unsigned int *)llvm::MDString::getString(*(llvm::MDString **)&v6[2 * i + 2 + -2 * v5]);
            *(void *)a3 = result;
            *(void *)(a3 + 8) = v10;
            *(unsigned char *)(a3 + 16) = 1;
            return result;
          }
        }
        else
        {
          unint64_t v5 = v6[2];
        }
      }
    }
  }
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(void *)(a3 + 16) = *(void *)(a2 + 16);
  return result;
}

__n128 MTLBoundsCheck::getArgAccessType@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(unsigned int *)(a1 + 8);
  if (v5)
  {
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(llvm::MDString **)(a1 - 8 * v5 + 8 * i);
      if (!*(unsigned char *)v8)
      {
        uint64_t String = (void *)llvm::MDString::getString(v8);
        uint64_t v12 = String;
        uint64_t v13 = v10;
        if (v10 == 14)
        {
          if (!memcmp(String, "air.read_write", 0xEuLL)
            || (*v12 == 0x746972772E726961 ? (BOOL v14 = *(void *)((char *)v12 + 6) == 0x796C6E6F5F657469) : (BOOL v14 = 0),
                v14))
          {
LABEL_19:
            *(void *)a3 = v12;
            *(void *)(a3 + 8) = v13;
            *(unsigned char *)(a3 + 16) = 1;
            return result;
          }
        }
        else if (v10 == 9)
        {
          if (!memcmp(String, "air.write", 9uLL)) {
            goto LABEL_19;
          }
        }
        else if (v10 == 8 && *String == 0x646165722E726961)
        {
          goto LABEL_19;
        }
      }
      unint64_t v5 = *(unsigned int *)(a1 + 8);
    }
  }
  __n128 result = *a2;
  *(__n128 *)a3 = *a2;
  *(void *)(a3 + 16) = a2[1].n128_u64[0];
  return result;
}

uint64_t MTLBoundsCheck::getStructTypeInfo(uint64_t a1)
{
  unint64_t v1 = *(unsigned int *)(a1 + 8);
  if (v1)
  {
    for (unint64_t i = 0; i < v1; ++i)
    {
      uint64_t v4 = *(llvm::MDString **)(a1 - 8 * v1 + 8 * i);
      if (!*(unsigned char *)v4)
      {
        uint64_t String = llvm::MDString::getString(v4);
        if (v6 == 20)
        {
          BOOL v8 = *(void *)String == 0x757274732E726961
            && *(void *)(String + 8) == 0x5F657079745F7463
            && *(_DWORD *)(String + 16) == 1868983913;
          unint64_t v1 = *(unsigned int *)(a1 + 8);
          if (v8) {
            return *(void *)(a1 - 8 * v1 + 8 * i + 8);
          }
        }
        else
        {
          unint64_t v1 = *(unsigned int *)(a1 + 8);
        }
      }
    }
  }
  return 0;
}

void createMTLIndirectMemRenamePass()
{
}

void MTLAddDebugSymbolPrepassToPM()
{
}

uint64_t MTLUpdateBoundsRunPipeline(uint64_t a1, llvm::legacy::PassManager *a2, void *a3)
{
  *(void *)(GlobalSharedPassData + 32) = *(void *)(a1 + 32);
  uint64_t v6 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", @"MTLBoundsCheck::RenderPipelineData"), "bytes");
  *(void *)(GlobalSharedPassData + 40) = v6;
  uint64_t v7 = objc_msgSend((id)objc_msgSend(a3, "objectForKeyedSubscript:", @"MTLBoundsCheck::ComputePipelineData"), "bytes");
  *(void *)(GlobalSharedPassData + 48) = v7;
  uint64_t result = llvm::legacy::PassManager::run(a2, *(llvm::Module **)(a1 + 48));
  uint64_t v9 = GlobalSharedPassData;
  *(void *)(GlobalSharedPassData + 40) = 0;
  *(void *)(v9 + 48) = 0;
  return result;
}

void MTLAddBoundsCheckPipelineToPM()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_255737004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  MEMORY[0x25A28E250](v41, 0x10F3C404E915695);
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  _Unwind_Resume(a1);
}

uint64_t ___Z29MTLAddBoundsCheckPipelineToPMRN4llvm6legacy11PassManagerERKN14MTLBoundsCheck7OptionsEPNS3_10StatisticsEPNS3_14SerializedDataE_block_invoke()
{
  uint64_t v0 = getenv("MTL_BOUNDS_PRINT_PASSES");
  if (!v0) {
    uint64_t v0 = "0";
  }
  uint64_t result = strtol(v0, 0, 0);
  MTLAddBoundsCheckPipelineToPM(llvm::legacy::PassManager &,MTLBoundsCheck::Options const&,MTLBoundsCheck::Statistics *,MTLBoundsCheck::SerializedData *)::printPasses = result != 0;
  return result;
}

void *std::string::__init_with_size[abi:ne180100]<char *,char *>(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

unint64_t llvm::DataLayout::getTypeSizeInBits(llvm::DataLayout *this, llvm::Type *a2)
{
  unint64_t result = 16;
  switch(*((_DWORD *)a2 + 2))
  {
    case 2u:
      return 32;
    case 3u:
    case 0xAu:
      return 64;
    case 4u:
      return 80;
    case 5u:
    case 6u:
      return 128;
    case 7u:
    case 9u:
    case 0xCu:
    case 0xEu:
    case 0x14u:
      __break(1u);
      JUMPOUT(0x255737728);
    case 8u:
      uint64_t v6 = this;
      goto LABEL_9;
    case 0xBu:
      return 0x2000;
    case 0xDu:
      return (unint64_t)*((unsigned int *)a2 + 2) >> 8;
    case 0xFu:
      uint64_t v6 = this;
LABEL_9:
      unint64_t result = *(unsigned int *)(llvm::DataLayout::getPointerAlignElem(v6) + 4);
      break;
    case 0x10u:
      unint64_t result = 8 * *(void *)llvm::DataLayout::getStructLayout();
      break;
    case 0x11u:
      uint64_t v7 = *((void *)a2 + 4);
      unint64_t result = 8 * v7 * llvm::DataLayout::getTypeAllocSize(this, *((llvm::Type **)a2 + 3));
      break;
    case 0x12u:
    case 0x13u:
      uint64_t v4 = *((unsigned int *)a2 + 8);
      unint64_t result = llvm::DataLayout::getTypeSizeInBits(this, *((llvm::Type **)a2 + 3)) * v4;
      break;
    case 0x15u:
      unint64_t v5 = (llvm::Type *)MEMORY[0x25A28DDB0](a2);
      unint64_t result = llvm::DataLayout::getTypeSizeInBits(this, v5);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t llvm::DataLayout::getTypeAllocSize(llvm::DataLayout *this, llvm::Type *a2)
{
  unint64_t v4 = (unint64_t)(llvm::DataLayout::getTypeSizeInBits(this, a2) + 7) >> 3;
  unint64_t ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(this, a2);
  return (ABITypeAlignment + v4 - 1) / ABITypeAlignment * ABITypeAlignment;
}

void IndirectNameRenamePass::~IndirectNameRenamePass(IndirectNameRenamePass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t IndirectNameRenamePass::runOnModule(IndirectNameRenamePass *this, llvm::Module *a2)
{
  uint64_t v2 = (char *)a2 + 24;
  unint64_t v3 = (char *)*((void *)a2 + 4);
  if (v3 == (char *)a2 + 24)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    int v5 = 0;
    do
    {
      if (v3) {
        uint64_t v6 = (llvm::Function *)(v3 - 56);
      }
      else {
        uint64_t v6 = 0;
      }
      v5 |= IndirectNameRenamePass::runOnFunction(this, v6);
      unint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v5 & 1;
}

uint64_t IndirectNameRenamePass::runOnFunction(IndirectNameRenamePass *this, llvm::Function *a2)
{
  uint64_t Name = llvm::Value::getName(a2);
  if (v3 < 0x11) {
    return 0;
  }
  BOOL v4 = *(void *)Name == 0x69646E692E6C746DLL && *(void *)(Name + 8) == 0x6D656D5F74636572;
  if (!v4 || *(unsigned char *)(Name + 16) != 46) {
    return 0;
  }
  std::string::basic_string[abi:ne180100](__p, (void *)(Name + 17), v3 - 17);
  __int16 v10 = 260;
  uint64_t v9 = __p;
  llvm::Value::setName();
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_255737954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLVertexFetchAnalysisPass::~MTLVertexFetchAnalysisPass(MTLVertexFetchAnalysisPass *this)
{
  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

BOOL MTLVertexFetchAnalysisPass::runOnModule(MTLVertexFetchAnalysisPass *this, llvm::Module *a2)
{
  MTLBoundsCheck::getMetalMetadata(a2, (uint64_t)v5);
  if (v6) {
    BOOL v3 = v5[0] == 0;
  }
  else {
    BOOL v3 = 0;
  }
  return v3 && (*(unsigned char *)(*((void *)this + 4) + 20) & 0x80) != 0 && llvm::Module::getFunction() != 0;
}

uint64_t llvm::SmallVectorTemplateBase<MTLBoundsCheck::MemoryAccessOperand,true>::growAndEmplaceBack<llvm::Value *&,llvm::Value *&,MTLGPUOperation,int>(uint64_t a1, void *a2, uint64_t *a3, int *a4, int *a5)
{
  uint64_t v6 = *a3;
  int v7 = *a4;
  int v8 = *a5;
  v13[0] = *a2;
  v13[1] = v6;
  int v14 = v7;
  int v15 = v8;
  unint64_t v9 = llvm::SmallVectorTemplateCommon<MTLBoundsCheck::MemoryAccessOperand,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<MTLBoundsCheck::MemoryAccessOperand,true>>(a1, (unint64_t)v13, 1);
  uint64_t v10 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 8);
  long long v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *(void *)(v9 + 16);
  *(_OWORD *)uint64_t v10 = v11;
  LODWORD(v10) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v10;
  return *(void *)a1 + 24 * v10 - 24;
}

unint64_t llvm::SmallVectorTemplateCommon<MTLBoundsCheck::MemoryAccessOperand,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<MTLBoundsCheck::MemoryAccessOperand,true>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 24 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::moveFromOldBuckets(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v10 = 0;
      unint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>((uint64_t *)v5, a2, &v10);
      unint64_t v9 = v10;
      *uint64_t v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<MTLBoundsCheck::DebugSubProgram,true>::push_back(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = *(void *)result + 12 * v3;
  *(void *)uint64_t v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

void llvm::SmallVectorTemplateBase<std::string,false>::growAndEmplaceBack<llvm::StringRef>()
{
}

void llvm::SmallVectorTemplateBase<std::string,false>::moveElementsForGrow(long long **a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    unsigned int v3 = *a1;
    uint64_t v4 = 24 * v2;
    do
    {
      long long v5 = *v3;
      *(void *)(a2 + 16) = *((void *)v3 + 2);
      *(_OWORD *)a2 = v5;
      a2 += 24;
      *((void *)v3 + 1) = 0;
      *((void *)v3 + 2) = 0;
      *(void *)unsigned int v3 = 0;
      unsigned int v3 = (long long *)((char *)v3 + 24);
      v4 -= 24;
    }
    while (v4);
    uint64_t v6 = *((unsigned int *)a1 + 2);
    if (v6)
    {
      int v7 = *a1;
      uint64_t v8 = 24 * v6;
      do
      {
        if (*((char *)v7 + v8 - 1) < 0) {
          operator delete(*(void **)((char *)v7 + v8 - 24));
        }
        v8 -= 24;
      }
      while (v8);
    }
  }
}

uint64_t llvm::SmallVector<llvm::Metadata *,4u>::SmallVector(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x400000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_255737EC4(_Unwind_Exception *exception_object)
{
  unsigned int v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVector<llvm::Metadata *,3u>::SmallVector(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x300000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_255737F24(_Unwind_Exception *exception_object)
{
  unsigned int v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DumpModulePass::DumpModulePass(uint64_t a1, void *__src, size_t __len)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &DumpModulePass::ID;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_270453A00;
  uint64_t v4 = (void *)(a1 + 32);
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v4 = operator new(v7 + 1);
    *(void *)(a1 + 40) = __len;
    *(void *)(a1 + 48) = v8 | 0x8000000000000000;
    *(void *)(a1 + 32) = v4;
  }
  else
  {
    *(unsigned char *)(a1 + 55) = __len;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v4, __src, __len);
LABEL_9:
  *((unsigned char *)v4 + __len) = 0;
  return a1;
}

void sub_255738024(_Unwind_Exception *a1)
{
  llvm::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void DumpModulePass::~DumpModulePass(void **this)
{
  *this = &unk_270453A00;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);
}

{
  uint64_t vars8;

  *this = &unk_270453A00;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x25A28E250);
}

uint64_t DumpModulePass::runOnModule(DumpModulePass *this, llvm::Module *a2)
{
  unsigned int v3 = (void *)MTLGetShaderCachePath();
  v28[0] = "air.requestHash";
  __int16 v30 = 259;
  NamedMetachar data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)v28);
  if (NamedMetadata)
  {
    uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)));
    if (String)
    {
      std::string::basic_string[abi:ne180100](&__dst, String, v7);
    }
    else
    {
      __dst = 0;
      int v35 = 0;
      uint64_t v36 = 0;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
    size_t v8 = (const char *)[v3 UTF8String];
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/bounds-logs", 12);
    std::stringbuf::str();
    __int16 v27 = 260;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    llvm::sys::fs::create_directory();
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/", 1);
    if (v36 >= 0) {
      p_dst = (void **)&__dst;
    }
    else {
      p_dst = __dst;
    }
    if (v36 >= 0) {
      uint64_t v12 = HIBYTE(v36);
    }
    else {
      uint64_t v12 = (uint64_t)v35;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_dst, v12);
    std::stringbuf::str();
    __int16 v27 = 260;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    llvm::sys::fs::create_directory();
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    v28[0] = *(void **)MEMORY[0x263F8C2B8];
    uint64_t v13 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void **)((char *)v28 + *((void *)v28[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
    v29[0] = v13;
    v29[1] = MEMORY[0x263F8C318] + 16;
    if (v32 < 0) {
      operator delete(v31);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x25A28E1D0](&v33);
    if (SHIBYTE(v36) < 0) {
      operator delete(__dst);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, (char *)&unk_2557AB8A6);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v23.__r_.__value_.__l.__size_)
    {
LABEL_38:
      operator delete(v23.__r_.__value_.__l.__data_);
      return 0;
    }
  }
  else if (!*((unsigned char *)&v23.__r_.__value_.__s + 23))
  {
    return 0;
  }
  LODWORD(__dst) = 0;
  int v35 = std::system_category();
  std::operator+<char>();
  int v14 = std::string::append(&v26, ".ll");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29[0] = *((void *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v28 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v29[0] >= 0) {
    uint64_t v16 = v28;
  }
  else {
    uint64_t v16 = (void **)v28[0];
  }
  if (v29[0] >= 0) {
    std::string::size_type v17 = HIBYTE(v29[0]);
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v28[1];
  }
  std::string::append(&v23, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v29[0]) < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  int v18 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream();
  unint64_t v19 = (llvm::raw_ostream *)llvm::dbgs(v18);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v20 = &v23;
  }
  else {
    int v20 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  uint64_t v21 = (llvm::raw_ostream *)llvm::raw_ostream::write(v19, (const char *)v20);
  llvm::raw_ostream::operator<<(v21, "\n", 1uLL);
  llvm::Module::print();
  MEMORY[0x25A28D2A0](v28);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_38;
  }
  return 0;
}

void sub_255738520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  long long v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  size_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_255738878(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x25A28E1D0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x25A28E1D0](a1 + 128);
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x25A28E100](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x25A28E110](v13);
  return a1;
}

void sub_255738B14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x25A28E110](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x255738AF4);
}

void sub_255738B68(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_255738CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *this, const void *a2, size_t a3)
{
  uint64_t v6 = *((void *)this + 3);
  long long v5 = (void *)*((void *)this + 4);
  if (a3 <= v6 - (uint64_t)v5)
  {
    if (a3)
    {
      memcpy(v5, a2, a3);
      *((void *)this + 4) += a3;
    }
    return this;
  }
  else
  {
    return (llvm::raw_ostream *)llvm::raw_ostream::write(this, (const char *)a2);
  }
}

void *std::__function::__value_func<BOOL ()(llvm::Function const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void CallingConvFixPass::~CallingConvFixPass(CallingConvFixPass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t CallingConvFixPass::runOnFunction(CallingConvFixPass *this, Function *a2)
{
  uint64_t v2 = *((void *)a2 + 10);
  if ((Function *)v2 == (Function *)((char *)a2 + 72))
  {
    char v3 = 0;
  }
  else
  {
    char v3 = 0;
    do
    {
      if (v2) {
        uint64_t v4 = v2 - 24;
      }
      else {
        uint64_t v4 = 0;
      }
      uint64_t v5 = v4 + 40;
      for (uint64_t i = *(void *)(v4 + 48); i != v5; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v7 = i - 24;
        if (!i) {
          uint64_t v7 = 0;
        }
        int v8 = *(unsigned __int8 *)(v7 + 16);
        if (v8 != 84) {
          uint64_t v7 = 0;
        }
        if (i)
        {
          if (v8 == 84)
          {
            uint64_t v9 = *(void *)(v7 - 32);
            if (v9)
            {
              if (!*(unsigned char *)(v9 + 16) && *(void *)(v9 + 24) == *(void *)(v7 + 72))
              {
                int v10 = (*(unsigned __int16 *)(v9 + 18) >> 4) & 0x3FF;
                unsigned int v11 = *(unsigned __int16 *)(v7 + 18);
                if (v10 != ((v11 >> 2) & 0x3FF))
                {
                  *(_WORD *)(v7 + 18) = v11 & 0xF003 | (4 * v10);
                  char v3 = 1;
                }
              }
            }
          }
        }
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while ((Function *)v2 != (Function *)((char *)a2 + 72));
  }
  return v3 & 1;
}

void createMTLMemoryIndirectionPass()
{
}

void sub_25573901C(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40DE8B5DE0);
  _Unwind_Resume(a1);
}

void MemoryIndirectionPass::~MemoryIndirectionPass(MemoryIndirectionPass *this)
{
  *(void *)this = &unk_270453B40;
  uint64_t v2 = (char *)this + 160;
  llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::~DenseMap((uint64_t)this + 216);
  llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::~DenseMap((uint64_t)this + 192);
  *(void *)this = &unk_2704532C8;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_270453B40;
  uint64_t v2 = (char *)this + 160;
  llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::~DenseMap((uint64_t)this + 216);
  llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::~DenseMap((uint64_t)this + 192);
  *(void *)this = &unk_2704532C8;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t MemoryIndirectionPass::runOnModule(MTLBoundsCheck **this, llvm::Module *a2)
{
  v110[8] = *MEMORY[0x263EF8340];
  MetalModulePass::runOnModule((MetalModulePass *)this, a2);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>,llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::clear((uint64_t)(this + 24));
  this[31] = 0;
  *((_DWORD *)this + 60) = llvm::Module::getMDKindID();
  llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>,llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::clear((uint64_t)(this + 27));
  this[23] = (MTLBoundsCheck *)MTLBoundsCheck::SharedPassData::getOrInsertDeviceIndirectionTableGV(this[8]);
  MemoryIndirectionPass::replaceGlobalBindings((MemoryIndirectionPass *)this);
  MemoryIndirectionPass::markGlobalsForSkip((MemoryIndirectionPass *)this);
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    uint64_t v5 = (unint64_t *)GlobalVariable;
    uint64_t inserted = MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsHandleGV((llvm::Module **)this[8]);
    this[31] = (MTLBoundsCheck *)inserted;
    uint64_t v7 = (uint64_t)this[8] + 88;
    uint64_t Operand = (unsigned __int8 **)inserted;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v7, &Operand, (uint64_t)&v101);
    if ((*(unsigned char *)(*((void *)this[8] + 9) + 23) & 0x40) != 0 && MTLBoundsCheck::isLibraryModule(this[6], v8))
    {
      uint64_t v9 = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
      *(void *)&long long v101 = v102;
      *((void *)&v101 + 1) = 0x400000000;
      unsigned int NumOperands = llvm::NamedMDNode::getNumOperands(v9);
      if (HIDWORD(v101) < NumOperands) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v11 = llvm::NamedMDNode::getNumOperands(v9);
      if (v11)
      {
        for (int i = 0; i != v11; ++i)
        {
          uint64_t Operand = (unsigned __int8 **)llvm::NamedMDNode::getOperand(v9);
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v101, (uint64_t *)&Operand);
        }
      }
      llvm::NamedMDNode::clearOperands(v9);
      unint64_t v13 = DWORD2(v101);
      if (DWORD2(v101))
      {
        unint64_t v14 = 0;
        do
        {
          if (*(unint64_t **)(*(void *)(*(void *)(v101 + 8 * v14)
                                                - 8 * *(unsigned int *)(*(void *)(v101 + 8 * v14) + 8)
                                                + 8)
                                    + 128) != v5)
          {
            llvm::NamedMDNode::addOperand();
            unint64_t v13 = DWORD2(v101);
          }
          ++v14;
        }
        while (v14 < v13);
      }
      if ((void *)v101 != v102) {
        free((void *)v101);
      }
    }
    long long v101 = v5[1];
    llvm::SmallVector<llvm::User *,8u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&Operand, (uint64_t *)&v101);
    uint64_t v15 = Operand;
    if (v109)
    {
      uint64_t v16 = 8 * v109;
      do
      {
        std::string::size_type v17 = *v15;
        if (*v15 && v17[16] == 60)
        {
          uint64_t v18 = llvm::User::operator new((llvm::User *)0x40);
          LOWORD(v103) = 257;
          llvm::LoadInst::LoadInst();
          llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&v101, (llvm::Value *)v17, 0, 0, 0);
          uint64_t v19 = *(void *)v17;
          v100[8] = 257;
          llvm::IRBuilderBase::CreateCast((uint64_t)&v101, 48, v18, v19, (uint64_t)v99);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v17);
          llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v107);
          llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v106);
          if ((void *)v101 != v102) {
            free((void *)v101);
          }
        }
        else
        {
          llvm::UndefValue::get();
          llvm::User::replaceUsesOfWith();
          llvm::UndefValue::get();
          llvm::Value::replaceAllUsesWith();
          if (v17[16] >= 0x1Cu) {
            llvm::Instruction::eraseFromParent((llvm::Instruction *)v17);
          }
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
      uint64_t v15 = Operand;
    }
    if (v15 != v110) {
      free(v15);
    }
    llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v5);
  }
  else
  {
    this[31] = 0;
  }
  Entryuint64_t Function = MetalModulePass::getEntryFunction((MetalModulePass *)this);
  if (EntryFunction && !MTLBoundsCheck::isLibraryModule(this[6], v20))
  {
    *(void *)&long long v101 = MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsHandleGV((llvm::Module **)this[8]);
    *((void *)&v101 + 1) = MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(this[8]);
    v102[0] = MTLBoundsCheck::SharedPassData::getOrInsertDeviceIndirectionTableGV(this[8]);
    v102[1] = MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV((llvm::Type ***)this[8]);
    uint64_t v103 = MTLBoundsCheck::SharedPassData::getOrInsertStackDepthGV((llvm::Type ***)this[8]);
    uint64_t v104 = MTLBoundsCheck::SharedPassData::getOrInsertAccelerationStructurePtrGV((llvm::Type ***)this[8]);
    uint64_t v105 = MTLBoundsCheck::SharedPassData::getOrInsertBindingTableGV(this[8]);
    llvm::appendToUsed();
    if ((*(void *)(*((void *)this[8] + 9) + 20) & 0x200000001) != 0)
    {
      *(void *)&long long v101 = MTLBoundsCheck::SharedPassData::getOrInsertTextureUsageTableGV(this[8]);
      *((void *)&v101 + 1) = MTLBoundsCheck::SharedPassData::getOrInsertBufferUsageTableGV(this[8]);
      v102[0] = MTLBoundsCheck::SharedPassData::getOrInsertTextureTypeTableGV(this[8]);
      llvm::appendToUsed();
    }
    uint64_t v80 = *(void *)(EntryFunction + 24);
    uint64_t Operand = (unsigned __int8 **)v110;
    uint64_t v109 = 0x800000000;
    v99[0] = v100;
    v99[1] = (void *)0x800000000;
    v97[0] = &v98;
    v97[1] = (void *)0x800000000;
    v95[0] = &v96;
    v95[1] = (void *)0x800000000;
    v93[0] = &v94;
    v93[1] = (void *)0x800000000;
    LODWORD(v81) = 0;
    if (!*(void *)(EntryFunction + 96))
    {
LABEL_86:
      if (!*((_DWORD *)this + 30) && *(unsigned char *)(**(void **)(v80 + 16) + 8) != 7) {
        *(void *)(*((void *)this[8] + 8) + 640) &= 0x5555555555555555uLL;
      }
      uint64_t v47 = v109;
      uint64_t v48 = (llvm::Type *)llvm::ArrayType::get(this[9], (llvm::Type *)0x1F);
      *(void *)&long long v101 = 0;
      unint64_t TypeSizeInBits = llvm::DataLayout::getTypeSizeInBits(this[7], v48);
      int v51 = v50;
      uint64_t PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(this[7], v48);
      LODWORD(v79) = 2;
      *(void *)&long long v101 = MetalModulePass::getMDTuple<unsigned long,char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(this, v47, (llvm::LLVMContext *)"air.buffer", (llvm::LLVMContext *)"air.location_index", 50, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", v79, (llvm::LLVMContext *)"air.arg_type_size", (TypeSizeInBits + 7) >> 3, v51 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.user_arguments_int");
      v92[0] = (void *)llvm::PointerType::get();
      llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&Operand, (uint64_t *)v92);
      llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v95, (uint64_t *)&v101);
      uint64_t v53 = (llvm::Type *)llvm::ArrayType::get(this[9], (llvm::Type *)0x1F);
      *(void *)&long long v101 = 0;
      unint64_t v54 = llvm::DataLayout::getTypeSizeInBits(this[7], v53);
      LODWORD(TypeSizeInBits) = v55;
      uint64_t v56 = llvm::DataLayout::getPrefTypeAlignment(this[7], v53);
      *(void *)&long long v101 = MetalModulePass::getMDTuple<unsigned long,char const*,char const*,unsigned int,int,char const*,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(this, v47 + 1, (llvm::LLVMContext *)"air.buffer", (llvm::LLVMContext *)"air.location_index", 53, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.arg_type_size", (v54 + 7) >> 3, TypeSizeInBits == 1, (llvm::LLVMContext *)"air.arg_type_align_size", v56, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.user_argument_strides_int");
      v92[0] = (void *)llvm::PointerType::get();
      llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&Operand, (uint64_t *)v92);
      llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v95, (uint64_t *)&v101);
      uint64_t v57 = llvm::FunctionType::get();
      uint64_t v58 = *(_DWORD *)(EntryFunction + 32) & 0xF;
      LOWORD(v103) = 257;
      uint64_t v59 = (llvm::Value *)llvm::Function::Create(v57, v58, (uint64_t)&v101, (uint64_t)this[6]);
      llvm::Value::takeName();
      llvm::GlobalObject::copyMetadata();
      llvm::MDTuple::getImpl();
      llvm::Value::setMetadata();
      llvm::Function::setSubprogram();
      *(_DWORD *)(EntryFunction + 32) = *(_DWORD *)(EntryFunction + 32) & 0xFFFFBFC0 | 0x4007;
      *(void *)&long long v101 = *(void *)(EntryFunction + 112);
      Attributes = (unsigned int *)llvm::AttributeList::getAttributes((llvm::AttributeList *)&v101);
      uint64_t v60 = llvm::AttributeSet::begin((llvm::AttributeSet *)&Attributes);
      uint64_t v61 = llvm::AttributeSet::end((llvm::AttributeSet *)&Attributes);
      while (v60 != v61)
      {
        llvm::Function::addFnAttr();
        v60 += 8;
      }
      *(void *)&long long v101 = *(void *)(EntryFunction + 112);
      uint64_t v81 = llvm::AttributeList::getAttributes((llvm::AttributeList *)&v101);
      uint64_t v62 = llvm::AttributeSet::begin((llvm::AttributeSet *)&v81);
      uint64_t v63 = llvm::AttributeSet::end((llvm::AttributeSet *)&v81);
      while (v62 != v63)
      {
        llvm::compat::addAttribute();
        v62 += 8;
      }
      MetalModulePass::getMetadata((MetalModulePass *)this, v59);
      llvm::MDNode::replaceOperandWith();
      llvm::MDTuple::getImpl();
      llvm::MDNode::replaceOperandWith();
      uint64_t v64 = this[5];
      *(void *)&long long v101 = "entry";
      LOWORD(v103) = 259;
      llvm::BasicBlock::Create(v64, (llvm::LLVMContext *)&v101, v59, 0, v65);
    }
    unsigned int v22 = 0;
    while (1)
    {
      if (*(_WORD *)(EntryFunction + 18))
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)EntryFunction);
        unsigned int v22 = v81;
      }
      std::string v23 = (llvm::Value *)(*(void *)(EntryFunction + 88) + 40 * v22);
      v91[0] = 0;
      v91[0] = *(void *)v23;
      Attributes = 0;
      uint64_t v24 = ((void *)this[16] - *((unsigned int *)this[16] + 2))[2];
      Attributes = *(unsigned int **)(v24 - 8 * *(unsigned int *)(v24 + 8) + 8 * v22);
      uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)&Attributes[-2 * Attributes[2] + 2]);
      uint64_t v27 = v26;
      if (!isBufferMetadata((uint64_t)Attributes)) {
        goto LABEL_42;
      }
      int v28 = *(_DWORD *)(v91[0] + 8);
      if ((v28 & 0xFE) == 0x12) {
        int v28 = *(_DWORD *)(**(void **)(v91[0] + 16) + 8);
      }
      if ((v28 & 0xFFFFFF00) != 0x300)
      {
        v88[0] = &unk_2557AB8A6;
        v88[1] = 0;
        char v89 = 1;
        MTLBoundsCheck::getArgName(Attributes, (uint64_t)v88, (uint64_t)&v101);
        if (*((void *)&v101 + 1) >= 6uLL && *(_DWORD *)v101 == 1969382756 && *(_WORD *)(v101 + 4) == 11879) {
          goto LABEL_84;
        }
        llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v99, (uint64_t *)&Attributes);
        char LocationIndex = MTLBoundsCheck::getLocationIndex((uint64_t)Attributes);
        if (llvm::Value::hasNUsesOrMore(v23))
        {
          v86.n128_u64[0] = (unint64_t)"air.read_write";
          v86.n128_u64[1] = 14;
          char v87 = 1;
          MTLBoundsCheck::getArgAccessType((uint64_t)Attributes, &v86, (uint64_t)&v101);
          *(_OWORD *)unint64_t v92 = v101;
          char v44 = 2 * LocationIndex;
          if (llvm::StringRef::find() != -1) {
            *(void *)(*((void *)this[8] + 8) + 640) |= 1 << v44;
          }
          goto LABEL_72;
        }
      }
      else
      {
LABEL_42:
        unint64_t v29 = *(llvm::MDString **)&Attributes[-2 * Attributes[2] + 2];
        if (*(unsigned char *)v29
          || (uint64_t v30 = llvm::MDString::getString(v29), v31 != 17)
          || (*(void *)v30 == 0x666675622E726961 ? (BOOL v32 = *(void *)(v30 + 8) == 0x64697274735F7265) : (BOOL v32 = 0),
              v32 ? (BOOL v33 = *(unsigned char *)(v30 + 16) == 101) : (BOOL v33 = 0),
              !v33))
        {
          if (v27 == 30)
          {
            BOOL v34 = *String == 0x746E6F632E726961 && String[1] == 0x6E696F705F6C6F72;
            BOOL v35 = v34 && String[2] == 0x5F7865646E695F74;
            if (v35 && *(void *)((char *)String + 22) == 0x7265666675625F78)
            {
              uint64_t v37 = v81;
              unint64_t v38 = llvm::DataLayout::getTypeSizeInBits(this[7], **(llvm::Type ***)(v91[0] + 16));
              int v40 = v39;
              uint64_t ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(this[7], **(llvm::Type ***)(v91[0] + 16));
              LODWORD(v79) = 1;
              Attributes = (unsigned int *)MetalModulePass::getMDTuple<unsigned int,char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(this, v37, (llvm::LLVMContext *)"air.buffer", (llvm::LLVMContext *)"air.location_index", 43, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", v79, (llvm::LLVMContext *)"air.arg_type_size", (v38 + 7) >> 3, v40 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", ABITypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.control_point_index_buffer");
              v91[0] = llvm::PointerType::get();
            }
          }
LABEL_84:
          llvm::SmallVectorImpl<unsigned int>::emplace_back<unsigned int &>((uint64_t)v93, (int *)&v81);
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&Operand, v91);
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v95, (uint64_t *)&Attributes);
          MetalModulePass::getMetadata<unsigned long long>();
          llvm::MDNode::replaceOperandWith();
          goto LABEL_85;
        }
        v84[0] = &unk_2557AB8A6;
        v84[1] = 0;
        char v85 = 1;
        MTLBoundsCheck::getArgName(Attributes, (uint64_t)v84, (uint64_t)&v101);
        if (*((void *)&v101 + 1) >= 6uLL && *(_DWORD *)v101 == 1969382756 && *(_WORD *)(v101 + 4) == 11879) {
          goto LABEL_84;
        }
        llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v97, (uint64_t *)&Attributes);
        char v46 = MTLBoundsCheck::getLocationIndex((uint64_t)Attributes);
        if (llvm::Value::hasNUsesOrMore(v23))
        {
          v82.n128_u64[0] = (unint64_t)"air.read_write";
          v82.n128_u64[1] = 14;
          char v83 = 1;
          MTLBoundsCheck::getArgAccessType((uint64_t)Attributes, &v82, (uint64_t)&v101);
          *(_OWORD *)unint64_t v92 = v101;
          char v44 = 2 * v46;
          if (llvm::StringRef::find() != -1) {
            *(void *)(*((void *)this[8] + 8) + 640) |= 1 << v44;
          }
LABEL_72:
          if (llvm::StringRef::find() != -1) {
            *(void *)(*((void *)this[8] + 8) + 640) |= 2 << v44;
          }
        }
      }
LABEL_85:
      LODWORD(v81) = v81 + 1;
      unsigned int v22 = v81;
      if (*(void *)(EntryFunction + 96) <= (unint64_t)v81) {
        goto LABEL_86;
      }
    }
  }
  MemoryIndirectionPass::fixupIntersectionFunctions(this);
  llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(&v101, *((void *)a2 + 4), (uint64_t)a2 + 24);
  uint64_t v66 = (llvm::Value **)v101;
  if (DWORD2(v101))
  {
    uint64_t v67 = 8 * DWORD2(v101);
    do
    {
      unsigned int v68 = *v66;
      uint64_t Name = llvm::Value::getName(*v66);
      if (v70 >= 0x11
        && (*(void *)Name == 0x726575712E6C746DLL ? (BOOL v71 = *(void *)(Name + 8) == 0x79726F6D656D5F79) : (BOOL v71 = 0),
            v71 ? (BOOL v72 = *(unsigned char *)(Name + 16) == 46) : (BOOL v72 = 0),
            v72))
      {
        MemoryIndirectionPass::handleMemoryQueryFunction((MemoryIndirectionPass *)this, v68);
      }
      else if (MemoryIndirectionPass::shouldModifyFunction((MemoryIndirectionPass *)this, v68))
      {
        MemoryIndirectionPass::fixupInstructions((MemoryIndirectionPass *)this, v68);
      }
      ++v66;
      v67 -= 8;
    }
    while (v67);
    uint64_t v66 = (llvm::Value **)v101;
  }
  if (v66 != v102) {
    free(v66);
  }
  for (unint64_t j = (void *)*((void *)a2 + 4); j != (void *)((char *)a2 + 24); unint64_t j = (void *)j[1])
    llvm::Value::setMetadata();
  if (*((_DWORD *)this + 56))
  {
    uint64_t v74 = *((unsigned int *)this + 58);
    if (v74)
    {
      uint64_t v75 = 16 * v74;
      for (unint64_t k = this[27]; (*(void *)k | 0x1000) == 0xFFFFFFFFFFFFF000; unint64_t k = (MTLBoundsCheck *)((char *)k + 16))
      {
        v75 -= 16;
        if (!v75) {
          return 1;
        }
      }
    }
    else
    {
      unint64_t k = this[27];
    }
    uint64_t v78 = (uint64_t)this[27] + 16 * v74;
LABEL_124:
    if (k != (MTLBoundsCheck *)v78)
    {
      llvm::UndefValue::get();
      llvm::Value::replaceNonMetadataUsesWith();
      **(void **)unint64_t k = **((void **)k + 1);
      llvm::ValueAsMetadata::handleRAUW();
      llvm::Function::eraseFromParent(*(llvm::Function **)k);
      while (1)
      {
        unint64_t k = (MTLBoundsCheck *)((char *)k + 16);
        if (k == (MTLBoundsCheck *)v78) {
          break;
        }
        if ((*(void *)k | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_124;
        }
      }
    }
  }
  return 1;
}

void sub_25573A5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (a51 != &a53) {
    free(a51);
  }
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)&STACK[0x2C0]);
  if (a61 != a21) {
    free(a61);
  }
  if (a67 != a22) {
    free(a67);
  }
  if (STACK[0x220] != a23) {
    free((void *)STACK[0x220]);
  }
  if (STACK[0x270] != a24) {
    free((void *)STACK[0x270]);
  }
  uint64_t v69 = *(void **)(v67 - 184);
  if (v69 != (void *)a25) {
    free(v69);
  }
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::init(uint64_t result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(result + 16) = v4;
    unint64_t result = MEMORY[0x25A28D370](16 * v4, 8);
    *(void *)uint64_t v2 = result;
    *(void *)(v2 + 8) = 0;
    uint64_t v5 = *(unsigned int *)(v2 + 16);
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        *(void *)unint64_t result = -4096;
        result += 16;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::~DenseMap(uint64_t a1)
{
  return a1;
}

uint64_t llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::~DenseMap(uint64_t a1)
{
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>,llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::clear(uint64_t result)
{
  if (*(void *)(result + 8))
  {
    uint64_t v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if (v1)
      {
        uint64_t v2 = *(void **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          void *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *(void *)(result + 8) = 0;
    }
    else
    {
      return llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::shrink_and_clear(result);
    }
  }
  return result;
}

void MemoryIndirectionPass::replaceGlobalBindings(MemoryIndirectionPass *this)
{
  v139[7] = *MEMORY[0x263EF8340];
  uint64_t v133 = 0;
  unint64_t v134 = 0;
  uint64_t v135 = 0;
  v130 = 0;
  __int16 v131 = 0;
  uint64_t v132 = 0;
  uint64_t v1 = (llvm::Module *)*((void *)this + 6);
  *(void *)&long long v136 = "air.global_bindings";
  v137[8] = 259;
  NamedMetachar data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v1, (const llvm::Twine *)&v136);
  uint64_t v3 = NamedMetadata;
  if (NamedMetadata)
  {
    uint64_t NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    uint64_t v5 = NumOperands;
    if (NumOperands)
    {
      char v115 = 0;
      int v6 = 0;
      int64_t v116 = v3;
      unsigned int v113 = NumOperands;
      while (1)
      {
        uint64_t Operand = llvm::NamedMDNode::getOperand(v3);
        uint64_t v8 = v5;
        uint64_t v9 = Operand - 8 * *(unsigned int *)(Operand + 8);
        uint64_t v10 = *(void *)(v9 + 16);
        uint64_t v11 = *(void *)(*(void *)(v9 + 8) + 128);
        unsigned int LocationIndex = MTLBoundsCheck::getLocationIndex(v10);
        uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8));
        uint64_t v15 = v14;
        if (*(void *)(v11 + 8))
        {
          v128.n128_u64[0] = (unint64_t)"air.read_write";
          v128.n128_u64[1] = 14;
          char v129 = 1;
          MTLBoundsCheck::getArgAccessType(v10, &v128, (uint64_t)&v136);
          v122[0] = v136;
          char v16 = 2 * LocationIndex;
          if (llvm::StringRef::find() != -1) {
            *(void *)(*(void *)(*((void *)this + 8) + 64) + 640) |= 1 << v16;
          }
          if (llvm::StringRef::find() != -1) {
            *(void *)(*(void *)(*((void *)this + 8) + 64) + 640) |= 2 << v16;
          }
        }
        if (v15 == 11
          && (*String == 0x747865742E726961
            ? (BOOL v17 = *(void *)((char *)String + 3) == 0x657275747865742ELL)
            : (BOOL v17 = 0),
              v17
           || (*String == 0x706D61732E726961
             ? (BOOL v18 = *(void *)((char *)String + 3) == 0x72656C706D61732ELL)
             : (BOOL v18 = 0),
               v18)))
        {
          uint64_t v19 = v131;
          if (v131 >= (uint64_t *)v132)
          {
            uint64_t v95 = ((char *)v131 - (unsigned char *)v130) >> 3;
            if ((unint64_t)(v95 + 1) >> 61) {
LABEL_159:
            }
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            unint64_t v96 = (v132 - (unsigned char *)v130) >> 2;
            if (v96 <= v95 + 1) {
              unint64_t v96 = v95 + 1;
            }
            if ((unint64_t)(v132 - (unsigned char *)v130) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v96;
            }
            if (v22) {
              std::string v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v132, v22);
            }
            else {
              std::string v23 = 0;
            }
            unint64_t v97 = (uint64_t *)&v23[8 * v95];
            *unint64_t v97 = Operand;
            uint64_t v90 = v97 + 1;
            uint64_t v105 = (char *)v130;
            uint64_t v98 = (char *)v131;
            if (v131 == v130) {
              goto LABEL_138;
            }
            uint64_t v3 = v116;
            do
            {
              uint64_t v106 = *((void *)v98 - 1);
              v98 -= 8;
              *--unint64_t v97 = v106;
            }
            while (v98 != v105);
LABEL_137:
            uint64_t v98 = (char *)v130;
            uint64_t v5 = v8;
LABEL_139:
            v130 = v97;
            __int16 v131 = v90;
            uint64_t v132 = &v23[8 * v22];
            if (v98) {
              operator delete(v98);
            }
            goto LABEL_141;
          }
        }
        else
        {
          if (MTLBoundsCheck::getAddressSpace(v10) != 3)
          {
            long long __p = 0;
            int64_t v126 = 0;
            unint64_t v127 = 0;
            uint64_t inserted = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertBindingTableGV(*((MTLBoundsCheck::SharedPassData **)this
                                                                                                + 8));
            int v114 = v6;
            uint64_t v25 = *(void *)(v11 + 8);
            for (i = v126; v25; uint64_t v25 = *(void *)(v25 + 8))
            {
              uint64_t v27 = *(void *)(v25 + 24);
              if (i >= v127)
              {
                uint64_t v28 = (i - (unsigned char *)__p) >> 3;
                if ((unint64_t)(v28 + 1) >> 61) {
                  std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v29 = (v127 - (unsigned char *)__p) >> 2;
                if (v29 <= v28 + 1) {
                  unint64_t v29 = v28 + 1;
                }
                if ((unint64_t)(v127 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v30 = v29;
                }
                if (v30) {
                  uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v127, v30);
                }
                else {
                  uint64_t v31 = 0;
                }
                BOOL v32 = &v31[8 * v28];
                *(void *)BOOL v32 = v27;
                BOOL v33 = v32 + 8;
                BOOL v35 = (char *)__p;
                BOOL v34 = v126;
                if (v126 != __p)
                {
                  do
                  {
                    uint64_t v36 = *((void *)v34 - 1);
                    v34 -= 8;
                    *((void *)v32 - 1) = v36;
                    v32 -= 8;
                  }
                  while (v34 != v35);
                  BOOL v34 = (char *)__p;
                }
                long long __p = v32;
                int64_t v126 = v33;
                unint64_t v127 = &v31[8 * v30];
                if (v34) {
                  operator delete(v34);
                }
                int i = v33;
              }
              else
              {
                *(void *)int i = v27;
                i += 8;
              }
              int64_t v126 = i;
            }
            uint64_t v37 = (llvm::Instruction **)__p;
            unint64_t v38 = this;
            if (__p == i)
            {
LABEL_100:
              __int16 v88 = v134;
              if (v134 >= v135)
              {
                uint64_t v91 = (v134 - (unsigned char *)v133) >> 3;
                uint64_t v5 = v113;
                int v6 = v114;
                if ((unint64_t)(v91 + 1) >> 61) {
                  std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v92 = (v135 - (unsigned char *)v133) >> 2;
                if (v92 <= v91 + 1) {
                  unint64_t v92 = v91 + 1;
                }
                if ((unint64_t)(v135 - (unsigned char *)v133) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v93 = v92;
                }
                if (v93) {
                  uint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v135, v93);
                }
                else {
                  uint64_t v94 = 0;
                }
                long long v101 = &v94[8 * v91];
                *(void *)long long v101 = v11;
                char v89 = v101 + 8;
                uint64_t v103 = (char *)v133;
                uint64_t v102 = v134;
                if (v134 != v133)
                {
                  do
                  {
                    uint64_t v104 = *((void *)v102 - 1);
                    v102 -= 8;
                    *((void *)v101 - 1) = v104;
                    v101 -= 8;
                  }
                  while (v102 != v103);
                  uint64_t v102 = (char *)v133;
                }
                uint64_t v3 = v116;
                uint64_t v133 = v101;
                unint64_t v134 = v89;
                uint64_t v135 = &v94[8 * v93];
                if (v102) {
                  operator delete(v102);
                }
              }
              else
              {
                *(void *)unint64_t v134 = v11;
                char v89 = v88 + 8;
                uint64_t v3 = v116;
                uint64_t v5 = v113;
                int v6 = v114;
              }
              unint64_t v134 = v89;
              if (__p)
              {
                int64_t v126 = (char *)__p;
                operator delete(__p);
              }
              goto LABEL_142;
            }
            unint64_t v119 = LocationIndex;
            unint64_t v117 = i;
            while (2)
            {
              int v39 = *v37;
              unsigned int v40 = *((unsigned __int8 *)*v37 + 16);
              if (v40 <= 0x1B) {
                uint64_t v41 = 0;
              }
              else {
                uint64_t v41 = *v37;
              }
              int v124 = v41;
              if (v41)
              {
                MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>((uint64_t)&v136, &v124);
                uint64_t v42 = *(void *)(llvm::Instruction::getFunction(v124) + 80);
                if (v42) {
                  std::string::size_type v43 = (llvm::BasicBlock *)(v42 - 24);
                }
                else {
                  std::string::size_type v43 = 0;
                }
                FirstNonPHI = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v43);
                llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v136, FirstNonPHI);
                long long v45 = (llvm::Type *)*((void *)inserted + 3);
                __int16 v123 = 257;
                AlignedLoad = (llvm::Instruction *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&v136, v45, (uint64_t)inserted, 0, 0, (uint64_t)v122);
                uint64_t v47 = *((void *)v38 + 8) + 88;
                v121 = AlignedLoad;
                llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v47, &v121, (uint64_t)v122);
                uint64_t v48 = *((void *)v38 + 8);
                uint64_t Name = (char *)llvm::Value::getName(inserted);
                GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v48, Name, v50);
                __int16 v123 = 257;
                ConstInBoundsGEP2_64 = (llvm::Type **)llvm::IRBuilderBase::CreateConstInBoundsGEP2_64((llvm::Type **)&v136, GVBaseType, AlignedLoad, 0, v119, (const llvm::Twine *)v122);
                int v53 = *((_DWORD *)v124 + 5);
                if ((v53 & 0x40000000) != 0)
                {
                  int v55 = (char *)*((void *)v124 - 1);
                  uint64_t v54 = v53 & 0x7FFFFFF;
                  if (v54) {
                    goto LABEL_87;
                  }
                }
                else
                {
                  uint64_t v54 = v53 & 0x7FFFFFF;
                  int v55 = (char *)v124 - 32 * v54;
                  if (!v54) {
                    goto LABEL_97;
                  }
LABEL_87:
                  uint64_t v80 = 32 * v54;
                  uint64_t v81 = (void **)(v55 + 8);
                  do
                  {
                    __n128 v82 = (llvm::Value **)(v81 - 1);
                    if (*(v81 - 1) == (void *)v11)
                    {
                      char v83 = *(llvm::Type **)v11;
                      __int16 v123 = 257;
                      BitOrPointerCast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)&v136, ConstInBoundsGEP2_64, v83, (const llvm::Twine *)v122);
                      if (*v82)
                      {
                        *v81[1] = *v81;
                        if (*v81) {
                          (*v81)[2] = v81[1];
                        }
                      }
                      *__n128 v82 = BitOrPointerCast;
                      if (BitOrPointerCast)
                      {
                        char v87 = (void *)*((void *)BitOrPointerCast + 1);
                        char v85 = (llvm::Value ***)((char *)BitOrPointerCast + 8);
                        __n128 v86 = v87;
                        *uint64_t v81 = v87;
                        if (v87) {
                          v86[2] = v81;
                        }
                        v81[1] = v85;
                        llvm::LLVMContext *v85 = v82;
                      }
                    }
                    v81 += 4;
                    v80 -= 32;
                  }
                  while (v80);
                }
LABEL_97:
                llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v139);
                llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v138);
                if ((_WORD *)v136 != v137) {
                  free((void *)v136);
                }
LABEL_99:
                if (++v37 == (llvm::Instruction **)v117) {
                  goto LABEL_100;
                }
                continue;
              }
              break;
            }
            if (v40 != 5) {
              goto LABEL_99;
            }
            uint64_t v56 = *((void *)v39 + 1);
            if (!v56) {
              goto LABEL_99;
            }
            while (2)
            {
              uint64_t v57 = *(unsigned __int8 **)(v56 + 24);
              if (v57[16] <= 0x1Bu) {
                uint64_t v57 = 0;
              }
              v121 = (llvm::Instruction *)v57;
              if (v57)
              {
                MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>((uint64_t)&v136, &v121);
                uint64_t v58 = *(void *)(llvm::Instruction::getFunction(v121) + 80);
                if (v58) {
                  uint64_t v59 = (llvm::BasicBlock *)(v58 - 24);
                }
                else {
                  uint64_t v59 = 0;
                }
                uint64_t v60 = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v59);
                llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v136, v60);
                uint64_t v61 = (llvm::Type *)*((void *)inserted + 3);
                __int16 v123 = 257;
                uint64_t v62 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)&v136, v61, (uint64_t)inserted, 0, 0, (uint64_t)v122);
                uint64_t v63 = *((void *)v38 + 8) + 88;
                v120 = v62;
                llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v63, &v120, (uint64_t)v122);
                uint64_t v64 = *((void *)v38 + 8);
                uint64_t v65 = (char *)llvm::Value::getName(inserted);
                uint64_t v67 = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v64, v65, v66);
                __int16 v123 = 257;
                unsigned int v68 = (llvm::Type **)llvm::IRBuilderBase::CreateConstInBoundsGEP2_64((llvm::Type **)&v136, v67, v62, 0, v119, (const llvm::Twine *)v122);
                int v69 = *((_DWORD *)v121 + 5);
                if ((v69 & 0x40000000) != 0)
                {
                  BOOL v71 = (char *)*((void *)v121 - 1);
                  uint64_t v70 = v69 & 0x7FFFFFF;
                  if (!v70) {
                    goto LABEL_81;
                  }
                }
                else
                {
                  uint64_t v70 = v69 & 0x7FFFFFF;
                  BOOL v71 = (char *)v121 - 32 * v70;
                  if (!v70) {
                    goto LABEL_81;
                  }
                }
                uint64_t v72 = 32 * v70;
                unint64_t v73 = (void **)(v71 + 8);
                do
                {
                  uint64_t v74 = (llvm::Value **)(v73 - 1);
                  if (*(v73 - 1) == (void *)v39)
                  {
                    uint64_t v75 = *(llvm::Type **)v39;
                    __int16 v123 = 257;
                    BOOL v76 = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)&v136, v68, v75, (const llvm::Twine *)v122);
                    if (*v74)
                    {
                      *v73[1] = *v73;
                      if (*v73) {
                        (*v73)[2] = v73[1];
                      }
                    }
                    *uint64_t v74 = v76;
                    if (v76)
                    {
                      uint64_t v79 = (void *)*((void *)v76 + 1);
                      uint64_t v77 = (llvm::Value ***)((char *)v76 + 8);
                      uint64_t v78 = v79;
                      *unint64_t v73 = v79;
                      if (v79) {
                        v78[2] = v73;
                      }
                      v73[1] = v77;
                      *uint64_t v77 = v74;
                    }
                  }
                  v73 += 4;
                  v72 -= 32;
                }
                while (v72);
LABEL_81:
                llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v139);
                llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v138);
                if ((_WORD *)v136 != v137) {
                  free((void *)v136);
                }
                unint64_t v38 = this;
              }
              uint64_t v56 = *(void *)(v56 + 8);
              if (!v56) {
                goto LABEL_99;
              }
              continue;
            }
          }
          uint64_t v19 = v131;
          if (v131 >= (uint64_t *)v132)
          {
            uint64_t v20 = ((char *)v131 - (unsigned char *)v130) >> 3;
            if ((unint64_t)(v20 + 1) >> 61) {
              goto LABEL_159;
            }
            unint64_t v21 = (v132 - (unsigned char *)v130) >> 2;
            if (v21 <= v20 + 1) {
              unint64_t v21 = v20 + 1;
            }
            if ((unint64_t)(v132 - (unsigned char *)v130) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v21;
            }
            if (v22) {
              std::string v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v132, v22);
            }
            else {
              std::string v23 = 0;
            }
            unint64_t v97 = (uint64_t *)&v23[8 * v20];
            *unint64_t v97 = Operand;
            uint64_t v90 = v97 + 1;
            uint64_t v99 = (char *)v130;
            uint64_t v98 = (char *)v131;
            if (v131 != v130)
            {
              uint64_t v3 = v116;
              do
              {
                uint64_t v100 = *((void *)v98 - 1);
                v98 -= 8;
                *--unint64_t v97 = v100;
              }
              while (v98 != v99);
              goto LABEL_137;
            }
LABEL_138:
            uint64_t v5 = v8;
            uint64_t v3 = v116;
            goto LABEL_139;
          }
        }
        uint64_t v5 = v8;
        *uint64_t v19 = Operand;
        uint64_t v90 = v19 + 1;
        uint64_t v3 = v116;
LABEL_141:
        __int16 v131 = v90;
        char v115 = 1;
LABEL_142:
        if (v5 == ++v6) {
          goto LABEL_145;
        }
      }
    }
    char v115 = 0;
LABEL_145:
    uint64_t v107 = (llvm::GlobalVariable **)v133;
    char v108 = (llvm::GlobalVariable **)v134;
    while (v107 != v108)
    {
      uint64_t v109 = *v107;
      llvm::GlobalVariable::dropAllReferences(*v107);
      llvm::Constant::getNullValue(*(llvm::Constant **)v109, v110);
      llvm::Value::replaceAllUsesWith();
      llvm::GlobalVariable::eraseFromParent(v109);
      ++v107;
    }
    llvm::NamedMDNode::clearOperands(v3);
    int v111 = (char *)v130;
    uint64_t v112 = v131;
    while (v111 != (char *)v112)
    {
      llvm::NamedMDNode::addOperand();
      v111 += 8;
    }
    if ((v115 & 1) == 0)
    {
      llvm::NamedMDNode::clearOperands(v3);
      llvm::NamedMDNode::eraseFromParent(v3);
    }
  }
  if (v130)
  {
    __int16 v131 = (uint64_t *)v130;
    operator delete(v130);
  }
  if (v133)
  {
    unint64_t v134 = (char *)v133;
    operator delete(v133);
  }
}

void sub_25573B30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (__p) {
    operator delete(__p);
  }
  if (a38) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

void MemoryIndirectionPass::markGlobalsForSkip(MemoryIndirectionPass *this)
{
  v15[4] = *MEMORY[0x263EF8340];
  unint64_t v13 = v15;
  uint64_t v14 = 0x400000000;
  uint64_t v1 = *((void *)this + 6);
  uint64_t v2 = v1 + 8;
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 != v1 + 8)
  {
    do
    {
      if (v3) {
        uint64_t v5 = v3 - 56;
      }
      else {
        uint64_t v5 = 0;
      }
      if ((*(unsigned char *)(v5 + 33) & 0x1C) == 0
        && MemoryIndirectionPass::indirectAddressSpace(this, *(llvm::Type **)(v5 + 24)))
      {
        v12[0] = v5;
        llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v13, v12);
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
    while (1)
    {
      do
      {
        if (!v14) {
          goto LABEL_18;
        }
        uint64_t v10 = 0;
        uint64_t v6 = *((void *)v13 + v14 - 1);
        LODWORD(v14) = v14 - 1;
        uint64_t v10 = v6;
        uint64_t v11 = 0;
        uint64_t v7 = (uint64_t *)(*((void *)this + 8) + 88);
        v12[0] = v6;
      }
      while ((llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::LookupBucketFor<llvm::CallInst *>(v7, v12, &v11) & 1) != 0);
      llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>(*((void *)this + 8) + 88, &v10, (uint64_t)v12);
      uint64_t v8 = v10;
      int v9 = *(unsigned __int8 *)(v10 + 16);
      if (v9 == 61)
      {
        v12[0] = 0;
        v12[0] = *(void *)(v10 - 64);
        if (*(unsigned char *)(v12[0] + 16) == 59)
        {
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v13, v12);
          uint64_t v8 = v10;
        }
LABEL_16:
        llvm::SmallVectorImpl<llvm::Value *>::insert<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v13, (uint64_t)v13 + 8 * v14, *(void *)(v8 + 8), 0);
      }
      else if (v9 != 84)
      {
        goto LABEL_16;
      }
    }
  }
LABEL_18:
  if (v13 != v15) {
    free(v13);
  }
}

void sub_25573B568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a14 != v14) {
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MetalModulePass::getMDTuple<unsigned int,char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, uint64_t a5, uint64_t a6, llvm::LLVMContext *a7, llvm::LLVMContext *a8, uint64_t a9, llvm::LLVMContext *a10, uint64_t a11, uint64_t a12, llvm::LLVMContext *a13, uint64_t a14, llvm::LLVMContext *a15, llvm::LLVMContext *a16, llvm::LLVMContext *a17, llvm::LLVMContext *a18)
{
  MetalModulePass::getMetadata<unsigned int>();
  MetalModulePass::getMetadata(a1, a3, v23);
  MetalModulePass::getMetadata(a1, a4, v24);
  MetalModulePass::getMetadata<unsigned int>();
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a7, v25);
  MetalModulePass::getMetadata(a1, a8, v26);
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a10, v27);
  MetalModulePass::getMetadata();
  MetalModulePass::getMetadata(a1, a13, v28);
  MetalModulePass::getMetadata<unsigned long long>();
  MetalModulePass::getMetadata(a1, a15, v29);
  MetalModulePass::getMetadata(a1, a16, v30);
  MetalModulePass::getMetadata(a1, a17, v31);
  MetalModulePass::getMetadata(a1, a18, v32);
  return llvm::MDTuple::getImpl();
}

uint64_t llvm::SmallVectorImpl<unsigned int>::emplace_back<unsigned int &>(uint64_t a1, int *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, *a2);
    uint64_t v4 = *(void *)a1;
    unsigned int v5 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    *(_DWORD *)(*(void *)a1 + 4 * v3) = *a2;
    unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v5;
  }
  return v4 + 4 * v5 - 4;
}

uint64_t MetalModulePass::getMDTuple<unsigned long,char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, uint64_t a5, uint64_t a6, llvm::LLVMContext *a7, llvm::LLVMContext *a8, uint64_t a9, llvm::LLVMContext *a10, uint64_t a11, uint64_t a12, llvm::LLVMContext *a13, uint64_t a14, llvm::LLVMContext *a15, llvm::LLVMContext *a16, llvm::LLVMContext *a17, llvm::LLVMContext *a18)
{
  MetalModulePass::getMetadata<unsigned long long>();
  MetalModulePass::getMetadata(a1, a3, v23);
  MetalModulePass::getMetadata(a1, a4, v24);
  MetalModulePass::getMetadata<unsigned int>();
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a7, v25);
  MetalModulePass::getMetadata(a1, a8, v26);
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a10, v27);
  MetalModulePass::getMetadata();
  MetalModulePass::getMetadata(a1, a13, v28);
  MetalModulePass::getMetadata<unsigned long long>();
  MetalModulePass::getMetadata(a1, a15, v29);
  MetalModulePass::getMetadata(a1, a16, v30);
  MetalModulePass::getMetadata(a1, a17, v31);
  MetalModulePass::getMetadata(a1, a18, v32);
  return llvm::MDTuple::getImpl();
}

uint64_t MetalModulePass::getMDTuple<unsigned long,char const*,char const*,unsigned int,int,char const*,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, uint64_t a5, uint64_t a6, llvm::LLVMContext *a7, llvm::LLVMContext *a8, uint64_t a9, uint64_t a10, llvm::LLVMContext *a11, uint64_t a12, llvm::LLVMContext *a13, llvm::LLVMContext *a14, llvm::LLVMContext *a15, llvm::LLVMContext *a16)
{
  MetalModulePass::getMetadata<unsigned long long>();
  MetalModulePass::getMetadata(a1, a3, v21);
  MetalModulePass::getMetadata(a1, a4, v22);
  MetalModulePass::getMetadata<unsigned int>();
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a7, v23);
  MetalModulePass::getMetadata(a1, a8, v24);
  MetalModulePass::getMetadata();
  MetalModulePass::getMetadata(a1, a11, v25);
  MetalModulePass::getMetadata<unsigned long long>();
  MetalModulePass::getMetadata(a1, a13, v26);
  MetalModulePass::getMetadata(a1, a14, v27);
  MetalModulePass::getMetadata(a1, a15, v28);
  MetalModulePass::getMetadata(a1, a16, v29);
  return llvm::MDTuple::getImpl();
}

uint64_t llvm::IRBuilderBase::CreateConstInBoundsGEP2_64(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unint64_t a4, unint64_t a5, const llvm::Twine *a6)
{
  void v13[2] = *(uint64_t **)MEMORY[0x263EF8340];
  llvm::Type::getInt64Ty(this[8], a2);
  v13[0] = (uint64_t *)llvm::ConstantInt::get();
  llvm::Type::getInt64Ty(this[8], v10);
  v13[1] = (uint64_t *)llvm::ConstantInt::get();
  uint64_t result = (*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, uint64_t))(*(void *)this[9] + 48))(this[9], a2, a3, v13, 2, 1);
  if (!result)
  {
    int64_t v12 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, v13, 2);
    llvm::GetElementPtrInst::setIsInBounds(v12);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)v12, (uint64_t)a6);
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateRetVoid(llvm::ReturnInst **this, uint64_t a2, uint64_t a3, llvm::Instruction *a4)
{
  uint64_t v5 = llvm::ReturnInst::Create(this[8], 0, 0, a4);
  __int16 v8 = 257;
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v5, (uint64_t)v7);
}

uint64_t llvm::IRBuilderBase::CreateRet(llvm::ReturnInst **this, llvm::Value *a2, uint64_t a3, llvm::Instruction *a4)
{
  uint64_t v5 = llvm::ReturnInst::Create(this[8], a2, 0, a4);
  __int16 v8 = 257;
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v5, (uint64_t)v7);
}

void MemoryIndirectionPass::fixupIntersectionFunctions(llvm::Module **this)
{
  v35[1] = *MEMORY[0x263EF8340];
  MemoryIndirectionPass::fixIntersectCalls((MemoryIndirectionPass *)this, this[6]);
  if (*((_DWORD *)this + 42))
  {
    uint64_t v2 = *((unsigned int *)this + 44);
    if (v2)
    {
      uint64_t v3 = 16 * v2;
      for (int i = this[20]; (*(void *)i | 0x1000) == 0xFFFFFFFFFFFFF000; int i = (llvm::Module *)((char *)i + 16))
      {
        v3 -= 16;
        if (!v3) {
          return;
        }
      }
    }
    else
    {
      int i = this[20];
    }
    uint64_t v5 = (uint64_t)this[20] + 16 * v2;
    if (i != (llvm::Module *)v5)
    {
LABEL_9:
      uint64_t v6 = *(void *)i;
      unsigned int PrimitiveDataArgIndex = MemoryIndirectionPass::getPrimitiveDataArgIndex((uint64_t)this, *((void *)i + 1));
      if ((PrimitiveDataArgIndex & 0x80000000) == 0)
      {
        uint64_t v8 = *(void *)(v6 + 80);
        if (v8) {
          int v9 = (llvm::BasicBlock *)(v8 - 24);
        }
        else {
          int v9 = 0;
        }
        FirstNonPHI = (llvm::Value *)llvm::BasicBlock::getFirstNonPHI(v9);
        llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)v32, FirstNonPHI, 0, 0, 0);
        if (*(_WORD *)(v6 + 18)) {
          llvm::Function::BuildLazyArguments((llvm::Function *)v6);
        }
        MemoryIndirectionPass::synthesizeAndInsertPrimitiveDataHandle((uint64_t)this, (llvm::IRBuilderBase *)v32, (llvm::Type **)(*(void *)(v6 + 88) + 40 * PrimitiveDataArgIndex));
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v35);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v34);
        if (v32[0] != v33) {
          free(v32[0]);
        }
      }
      uint64_t v11 = llvm::Function::args((llvm::Function *)v6);
      unint64_t v13 = v12;
      if ((void *)v11 != v12)
      {
        uint64_t v14 = (llvm::Type **)(v11 + 8);
        do
        {
          if (PrimitiveDataArgIndex
            && *((unsigned char *)*(v14 - 1) + 8) == 15
            && MemoryIndirectionPass::indirectAddressSpace((MemoryIndirectionPass *)this, *(v14 - 1)))
          {
            uint64_t v15 = *(void *)(v6 + 80);
            if (v15) {
              char v16 = (llvm::BasicBlock *)(v15 - 24);
            }
            else {
              char v16 = 0;
            }
            llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)v32, v16, 0, 0, 0);
            BOOL v17 = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v16);
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v32, v17);
            uint64_t v18 = (uint64_t)this[8] + 88;
            BitOrPointerCast = (llvm::Value *)(v14 - 1);
            llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v18, &BitOrPointerCast, (uint64_t)v29);
            BitOrPointerCast = 0;
            uint64_t v19 = (llvm::Type *)llvm::PointerType::get();
            __int16 v30 = 257;
            BitOrPointerCast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v32, v14 - 1, v19, (const llvm::Twine *)v29);
            llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this[8] + 88, &BitOrPointerCast, (uint64_t)v29);
            uint64_t v20 = **(llvm::Type ***)(*(void *)BitOrPointerCast + 16);
            __int16 v30 = 257;
            uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v32, v20, (uint64_t)BitOrPointerCast, 259, 0, (uint64_t)v29);
            uint64_t v22 = (uint64_t)this[8] + 88;
            uint64_t v28 = AlignedLoad;
            llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v22, &v28, (uint64_t)v29);
            llvm::Value::replaceAllUsesWith();
            std::string v23 = BitOrPointerCast;
            uint64_t v24 = (llvm::Value *)((char *)BitOrPointerCast - 32);
            if (*((void *)BitOrPointerCast - 4))
            {
              **((void **)BitOrPointerCast - 2) = *((void *)BitOrPointerCast - 3);
              uint64_t v25 = *((void *)v23 - 3);
              if (v25) {
                *(void *)(v25 + 16) = *((void *)v23 - 2);
              }
            }
            *((void *)v23 - 4) = v14 - 1;
            uint64_t v26 = *v14;
            *((void *)v23 - 3) = *v14;
            if (v26) {
              *((void *)v26 + 2) = (char *)v23 - 24;
            }
            *((void *)v23 - 2) = v14;
            *uint64_t v14 = v24;
            llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v35);
            llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v34);
            if (v32[0] != v33) {
              free(v32[0]);
            }
          }
          uint64_t v27 = v14 + 4;
          v14 += 5;
          --PrimitiveDataArgIndex;
        }
        while (v27 != v13);
      }
      while (1)
      {
        int i = (llvm::Module *)((char *)i + 16);
        if (i == (llvm::Module *)v5) {
          break;
        }
        if ((*(void *)i | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (i != (llvm::Module *)v5) {
            goto LABEL_9;
          }
          return;
        }
      }
    }
  }
}

void sub_25573C084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MemoryIndirectionPass::handleMemoryQueryFunction(MemoryIndirectionPass *this, llvm::Function *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = llvm::GlobalValue::isDeclaration(a2);
  if (result)
  {
    uint64_t v7 = 0;
    uint64_t v6 = (llvm::BasicBlock *)*((void *)this + 5);
    __int16 v9 = 257;
    llvm::BasicBlock::Create(v6, (llvm::LLVMContext *)&v8, a2, 0, v5);
  }
  return result;
}

void sub_25573CBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
}

void sub_25573CCCC()
{
}

BOOL MemoryIndirectionPass::shouldModifyFunction(MemoryIndirectionPass *this, llvm::Function *a2)
{
  uint64_t Name = llvm::Value::getName(a2);
  if (v4 >= 0x1A)
  {
    if (*(void *)Name == 0x6C6174656D5F5F5FLL
      && *(void *)(Name + 8) == 0x6E6F635F7465675FLL
      && *(void *)(Name + 16) == 0x696F705F6C6F7274
      && *(_WORD *)(Name + 24) == 29806)
    {
      return 0;
    }
  }
  else if (v4 < 0x15)
  {
    goto LABEL_32;
  }
  unint64_t v8 = Name + v4;
  if (*(void *)(Name + v4 - 21) == 0x4E4F435F4C544D2ELL
    && *(void *)(Name + v4 - 13) == 0x494F505F4C4F5254
    && *(void *)(Name + v4 - 8) == 0x4E465F544E494F50)
  {
    return 0;
  }
  if (v4 >= 0x1B)
  {
    uint64_t v11 = *(void *)(v8 - 27);
    uint64_t v12 = *(void *)(v8 - 19);
    uint64_t v13 = *(void *)(v8 - 11);
    uint64_t v14 = *(void *)(v8 - 8);
    BOOL v15 = v11 == 0x61705F6C6174656DLL && v12 == 0x746E6F635F686374;
    BOOL v16 = v15 && v13 == 0x6E696F705F6C6F72;
    if (v16 && v14 == 0x745F746E696F705FLL) {
      return 0;
    }
  }
LABEL_32:
  if (llvm::GlobalValue::isDeclaration(a2)) {
    return 0;
  }
  return llvm::Value::getMetadata() == 0;
}

void MemoryIndirectionPass::fixupInstructions(MemoryIndirectionPass *this, llvm::Function *a2)
{
  v27[8] = *MEMORY[0x263EF8340];
  uint64_t v24 = v27;
  int v26 = 8;
  uint64_t v2 = (char *)*((void *)a2 + 10);
  uint64_t v20 = (char *)a2 + 72;
  if (v2 != (char *)a2 + 72)
  {
    do
    {
      unint64_t v4 = v2 - 24;
      if (!v2) {
        unint64_t v4 = 0;
      }
      unsigned int v25 = 0;
      uint64_t v5 = v4 + 40;
      uint64_t v6 = (char *)*((void *)v4 + 6);
      if (v6 != v4 + 40)
      {
        do
        {
          uint64_t v7 = v6 - 24;
          if (!v6) {
            uint64_t v7 = 0;
          }
          if (v7[16] == 84)
          {
            unint64_t v21 = v7;
            llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v24, (uint64_t *)&v21);
          }
          uint64_t v6 = (char *)*((void *)v6 + 1);
        }
        while (v6 != v5);
        if (v25)
        {
          unint64_t v8 = (uint64_t *)v24;
          uint64_t v9 = 8 * v25;
          do
          {
            uint64_t v10 = *v8;
            if (*(unsigned char *)(*v8 + 16) == 84)
            {
              uint64_t v11 = *(void *)(v10 - 32);
              if (!v11 || *(unsigned char *)(v11 + 16) || *(void *)(v11 + 24) != *(void *)(v10 + 72)) {
                uint64_t v11 = 0;
              }
              Checkeduint64_t Function = MemoryIndirectionPass::createCheckedFunction(this, *v8, (llvm::Value *)v11);
              uint64_t v13 = CheckedFunction;
              if (CheckedFunction)
              {
                uint64_t v14 = *(void *)(CheckedFunction + 24);
                int v15 = *(_DWORD *)(v10 + 20);
                BOOL v16 = (char *)llvm::CallBase::arg_end((llvm::CallBase *)v10);
                llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *,void>(&v21, (char *)(v10 - 32 * (v15 & 0x7FFFFFF)), v16);
                uint64_t v18 = (llvm::Instruction *)llvm::CallInst::Create(v14, v13, (uint64_t)v21, v22, 0, 0);
                if (v21 != &v23) {
                  free(v21);
                }
                __int16 v19 = *((_WORD *)v18 + 9) & 0xFFFC | *(_WORD *)(v10 + 18) & 3;
                *((_WORD *)v18 + 9) = v19;
                *((_WORD *)v18 + 9) = v19 & 0xF003 | *(_WORD *)(v10 + 18) & 0xFFC;
                llvm::ReplaceInstWithInst((llvm *)v10, v18, v17);
              }
            }
            ++v8;
            v9 -= 8;
          }
          while (v9);
        }
      }
      uint64_t v2 = (char *)*((void *)v2 + 1);
    }
    while (v2 != v20);
    if (v24 != v27) {
      free(v24);
    }
  }
}

void sub_25573D068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a23 != a10) {
    free(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 16);
  int v3 = *(_DWORD *)(result + 8);
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *(void *)(result + 8) = 0;
    if (v2)
    {
      uint64_t v6 = *(llvm **)result;
      uint64_t v7 = 16 * v2;
      do
      {
        *(void *)uint64_t v6 = -4096;
        uint64_t v6 = (llvm *)((char *)v6 + 16);
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v2));
    return llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::init(v1, v5);
  }
  return result;
}

uint64_t MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>(uint64_t a1, llvm::Value **a2)
{
  int v3 = (llvm::LLVMContext **)llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder(a1, *a2, 0, 0, 0);
  MTLIRBuilder::initTypeCache((MTLIRBuilder *)v3, v3[8]);
  return a1;
}

void sub_25573D19C(_Unwind_Exception *a1)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder(uint64_t a1, llvm::Value *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Context = llvm::Value::getContext(this);
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x200000000;
  *(void *)(a1 + 64) = Context;
  *(void *)(a1 + 72) = a1 + 120;
  *(void *)(a1 + 80) = a1 + 128;
  *(void *)(a1 + 88) = a3;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(unsigned char *)(a1 + 102) = 7;
  *(void *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = a5;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 120) = MEMORY[0x263F8BBD0] + 16;
  *(void *)(a1 + 128) = MEMORY[0x263F8BC08] + 16;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)a1, this);
  return a1;
}

void sub_25573D288(_Unwind_Exception *a1)
{
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter(v3);
  llvm::IRBuilderFolder::~IRBuilderFolder(v2);
  if (*v1 != v4) {
    free(*v1);
  }
  _Unwind_Resume(a1);
}

BOOL MemoryIndirectionPass::indirectAddressSpace(MemoryIndirectionPass *this, llvm::Type *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 2);
  if (v2 != 15) {
    return 0;
  }
  int v4 = (llvm::StructType *)**((void **)a2 + 2);
  if (*((unsigned char *)v4 + 8) == 16)
  {
    if (isSpecialStructType(v4)) {
      return 0;
    }
    unsigned int v2 = *((_DWORD *)a2 + 2);
  }
  if ((v2 & 0xFE) == 0x12) {
    unsigned int v2 = *(_DWORD *)(**((void **)a2 + 2) + 8);
  }
  return (v2 >> 8) - 1 < 2;
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::insert<llvm::Value::user_iterator_impl<llvm::User>,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = (a2 - *(void *)a1) >> 3;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (*(void *)a1 + 8 * v9 == a2)
  {
    llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>(a1, a3, a4);
    return *(void *)a1 + 8 * v8;
  }
  else
  {
    if (a3 == a4)
    {
      unint64_t v10 = 0;
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v11 = a3;
      do
      {
        ++v10;
        uint64_t v11 = *(void *)(v11 + 8);
      }
      while (v11 != a4);
    }
    if (v10 + v9 > *(unsigned int *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v12 = (unsigned char *)(v7 + 8 * v8);
    uint64_t v13 = (char *)(v7 + 8 * v9);
    unint64_t v14 = (v13 - v12) >> 3;
    if (v14 >= v10)
    {
      llvm::SmallVectorImpl<llvm::Value *>::append<std::move_iterator<llvm::Value **>,void>(a1, &v13[-8 * v10], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v10] != v12) {
        memmove(&v12[8 * v10], v12, &v13[-8 * v10] - v12);
      }
      if (v5 != a4)
      {
        BOOL v16 = v12;
        do
        {
          *v16++ = *(void *)(v5 + 24);
          uint64_t v5 = *(void *)(v5 + 8);
        }
        while (v5 != a4);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = v9 + v10;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * (v9 + v10) - 8 * v14), v12, v13 - v12);
        int v15 = v12;
        do
        {
          *v15++ = *(void *)(v5 + 24);
          uint64_t v5 = *(void *)(v5 + 8);
          --v14;
        }
        while (v14);
      }
      while (v5 != a4)
      {
        *(void *)uint64_t v13 = *(void *)(v5 + 24);
        v13 += 8;
        uint64_t v5 = *(void *)(v5 + 8);
      }
    }
  }
  return (uint64_t)v12;
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::append<std::move_iterator<llvm::Value **>,void>(uint64_t result, char *a2, char *a3)
{
  int v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *(void *)v3;
      v3 += 8;
      *v5++ = v6;
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 3);
  return result;
}

void *llvm::SmallVector<llvm::User *,8u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(void *a1, uint64_t *a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)a1, *a2, a2[1]);
  return a1;
}

void sub_25573D57C(_Unwind_Exception *exception_object)
{
  int v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MetalModulePass::getMetadata<unsigned int>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

uint64_t MetalModulePass::getMetadata<int>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

uint64_t llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v2) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

void *llvm::SmallVector<llvm::Value *,8u>::SmallVector(void *a1, unint64_t a2, uint64_t *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)a1, a2, *a3);
  return a1;
}

void sub_25573D724(_Unwind_Exception *exception_object)
{
  int v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

void llvm::SmallVectorTemplateBase<llvm::Value *,true>::growAndAssign(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  llvm::SmallVectorBase<unsigned int>::grow_pod();
}

void MemoryIndirectionPass::fixIntersectCalls(MemoryIndirectionPass *this, llvm::Module *a2)
{
  v73[10] = *MEMORY[0x263EF8340];
  uint64_t v60 = (llvm::Type *)llvm::PointerType::get();
  BOOL v71 = v73;
  uint64_t v72 = 0x500000000;
  uint64_t v4 = (char *)a2 + 24;
  uint64_t v5 = *((void *)a2 + 4);
  if ((char *)v5 == v4) {
    return;
  }
  do
  {
    if (v5) {
      uint64_t v6 = (llvm::Value *)(v5 - 56);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t Name = (void *)llvm::Value::getName(v6);
    unint64_t v64 = v7;
    if (llvm::StringRef::find() != -1 || llvm::StringRef::find() != -1)
    {
      unsigned int v68 = v6;
      v61[0] = 2;
      llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>((uint64_t)&v71, (uint64_t *)&v68, v61);
    }
    if (v64 >= 4 && *(_DWORD *)Name == 779250017)
    {
      if (v64 < 0xD) {
        goto LABEL_77;
      }
      if (*(void *)Name != 0x65746E692E726961 || *(void *)((char *)Name + 5) != 0x746365737265746ELL)
      {
        if (v64 >= 0x1C)
        {
          if (*(void *)Name == 0x657365722E726961
            && *((void *)Name + 1) == 0x737265746E695F74
            && *((void *)Name + 2) == 0x715F6E6F69746365
            && *((_DWORD *)Name + 6) == 2037540213)
          {
            unsigned int v68 = v6;
            v61[0] = 1;
            llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>((uint64_t)&v71, (uint64_t *)&v68, v61);
            goto LABEL_77;
          }
        }
        else if (v64 < 0x17)
        {
          goto LABEL_77;
        }
        if (*(void *)((char *)Name + v64 - 23) == 0x72656C656363615FLL
          && *(void *)((char *)Name + v64 - 15) == 0x74735F6E6F697461
          && *(void *)((char *)Name + v64 - 8) == 0x6572757463757274)
        {
          if (v64 >= 0x1A
            && (*(void *)Name == 0x5F7465672E726961
              ? (BOOL v17 = *((void *)Name + 1) == 0x695F657571696E75)
              : (BOOL v17 = 0),
                v17 ? (BOOL v18 = *((void *)Name + 2) == 0x65696669746E6564) : (BOOL v18 = 0),
                v18 ? (BOOL v19 = *((unsigned __int16 *)Name + 12) == 24434) : (BOOL v19 = 0),
                v19)
            || (*(void *)Name == 0x5F7465672E726961
              ? (BOOL v20 = *((void *)Name + 1) == 0x696F705F61746164)
              : (BOOL v20 = 0),
                v20 ? (BOOL v21 = *(void *)((char *)Name + 13) == 0x5F7265746E696F70) : (BOOL v21 = 0),
                v21
             || (*(void *)Name == 0x5F7465672E726961
               ? (BOOL v22 = *((void *)Name + 1) == 0x65636E6174736E69)
               : (BOOL v22 = 0),
                 v22 ? (BOOL v23 = *(void *)((char *)Name + 15) == 0x5F746E756F635F65) : (BOOL v23 = 0),
                 v23)))
          {
            unsigned int v68 = v6;
            v61[0] = 5;
            llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>((uint64_t)&v71, (uint64_t *)&v68, v61);
          }
        }
        goto LABEL_77;
      }
      if (v64 >= 0x1B
        && (*(void *)Name == 0x65746E692E726961 ? (BOOL v9 = *((void *)Name + 1) == 0x69645F7463657372) : (BOOL v9 = 0),
            v9 ? (BOOL v10 = *((void *)Name + 2) == 0x6363615F74636572) : (BOOL v10 = 0),
            v10 ? (BOOL v11 = *(void *)((char *)Name + 19) == 0x7373656363615F74) : (BOOL v11 = 0),
            v11))
      {
        unsigned int v68 = v6;
        v61[0] = 4;
        llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>((uint64_t)&v71, (uint64_t *)&v68, v61);
      }
      else
      {
        unsigned int v68 = v6;
        v61[0] = 0;
        llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>((uint64_t)&v71, (uint64_t *)&v68, v61);
      }
LABEL_77:
      if (llvm::StringRef::find() != -1)
      {
        unsigned int v68 = v6;
        v61[0] = 3;
        llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>((uint64_t)&v71, (uint64_t *)&v68, v61);
      }
    }
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while ((char *)v5 != v4);
  uint64_t v24 = v71;
  if (v72)
  {
    unsigned int v25 = &v71[2 * v72];
    uint64_t v59 = v25;
    while (2)
    {
      uint64_t v26 = *(void *)v24;
      int v27 = v24[2];
      switch(v27)
      {
        case 0:
        case 4:
          llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v68, *(void *)(v26 + 8), 0);
          uint64_t v28 = v68;
          if (v69)
          {
            uint64_t v29 = 8 * v69;
            do
            {
              uint64_t v30 = *(void *)v28;
              if (*(void *)v28
                && *(unsigned char *)(v30 + 16) == 84
                && (!*(void *)(v30 + 48) && (*(unsigned char *)(v30 + 23) & 0x20) == 0 || !llvm::Instruction::getMetadataImpl()))
              {
                llvm::MDTuple::getImpl();
                llvm::Instruction::setMetadata();
                llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, (llvm::Value *)v30, 0, 0, 0);
                uint64_t v31 = *(llvm::Type ***)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF) + 128);
                BOOL v32 = *v31;
                __int16 v62 = 257;
                uint64_t PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)&Name, v31, v60, (const llvm::Twine *)v61);
                uint64_t v34 = MemoryIndirectionPass::unpackAccelerationStructureValue(this, PointerBitCastOrAddrSpaceCast, (llvm::IRBuilderBase *)&Name);
                __int16 v62 = 257;
                uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)&Name, 48, v34, (uint64_t)v32, (uint64_t)v61);
                llvm::CallBase::setArgOperand(v30, 4u, Cast);
                if (!v27) {
                  MemoryIndirectionPass::generatePrimitiveDataHandle((uint64_t)this, (llvm::Value *)v30);
                }
                if ((*(unsigned char *)(*(void *)(*((void *)this + 8) + 72) + 24) & 0x10) != 0)
                {
                  uint64_t v36 = (llvm::Instruction *)MemoryIndirectionPass::createValidateAccelerationStructureTypeCall((uint64_t)this, (llvm::Instruction *)v30);
                  llvm::Instruction::insertBefore(v36, (llvm::Instruction *)v30);
                  llvm::CallBase::setArgOperand((uint64_t)v36, 0, (uint64_t)v31);
                }
                llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v67);
                llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v66);
                if (Name != v65) {
                  free(Name);
                }
              }
              v28 += 8;
              v29 -= 8;
            }
            while (v29);
            uint64_t v28 = v68;
            unsigned int v25 = v59;
          }
          if (v28 != v70)
          {
            uint64_t v37 = v28;
            goto LABEL_141;
          }
          goto LABEL_142;
        case 1:
          llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v68, *(void *)(v26 + 8), 0);
          unint64_t v38 = v68;
          if (!v69) {
            goto LABEL_139;
          }
          uint64_t v47 = 8 * v69;
          do
          {
            uint64_t v48 = *(void *)v38;
            if (*(void *)v38
              && *(unsigned char *)(v48 + 16) == 84
              && (!*(void *)(v48 + 48) && (*(unsigned char *)(v48 + 23) & 0x20) == 0 || !llvm::Instruction::getMetadataImpl()))
            {
              llvm::MDTuple::getImpl();
              llvm::Instruction::setMetadata();
              llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, (llvm::Value *)v48, 0, 0, 0);
              uint64_t v49 = *(llvm::Type ***)(v48 - 32 * (*(_DWORD *)(v48 + 20) & 0x7FFFFFF) + 160);
              __int16 v62 = 257;
              size_t v50 = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)&Name, v49, v60, (const llvm::Twine *)v61);
              uint64_t v51 = MemoryIndirectionPass::unpackAccelerationStructureValue(this, v50, (llvm::IRBuilderBase *)&Name);
              uint64_t v52 = **(void **)(v48 - 32 * (*(_DWORD *)(v48 + 20) & 0x7FFFFFF) + 160);
              __int16 v62 = 257;
              uint64_t v53 = llvm::IRBuilderBase::CreateCast((uint64_t)&Name, 48, v51, v52, (uint64_t)v61);
              llvm::CallBase::setArgOperand(v48, 5u, v53);
              llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v67);
              llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v66);
              if (Name != v65) {
                free(Name);
              }
            }
            v38 += 8;
            v47 -= 8;
          }
          while (v47);
          goto LABEL_138;
        case 2:
          llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v68, *(void *)(v26 + 8), 0);
          unint64_t v38 = v68;
          if (v69)
          {
            uint64_t v54 = 8 * v69;
            do
            {
              uint64_t v55 = *(void *)v38;
              if (*(void *)v38
                && *(unsigned char *)(v55 + 16) == 84
                && (!*(void *)(v55 + 48) && (*(unsigned char *)(v55 + 23) & 0x20) == 0 || !llvm::Instruction::getMetadataImpl()))
              {
                llvm::MDTuple::getImpl();
                llvm::Instruction::setMetadata();
                uint64_t v56 = *(void *)(v55 + 32);
                BOOL v57 = !v56 || v56 == *(void *)(v55 + 40) + 40;
                uint64_t v58 = v57 ? 0 : (llvm::Value *)(v56 - 24);
                llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, v58, 0, 0, 0);
                MemoryIndirectionPass::synthesizeAndInsertPrimitiveDataHandle((uint64_t)this, (llvm::IRBuilderBase *)&Name, (llvm::Type **)v55);
                llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v67);
                llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v66);
                if (Name != v65) {
                  free(Name);
                }
              }
              v38 += 8;
              v54 -= 8;
            }
            while (v54);
LABEL_138:
            unint64_t v38 = v68;
          }
          goto LABEL_139;
        case 3:
          goto LABEL_142;
        default:
          llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v68, *(void *)(v26 + 8), 0);
          unint64_t v38 = v68;
          if (v69)
          {
            uint64_t v39 = 8 * v69;
            do
            {
              uint64_t v40 = *(void *)v38;
              if (*(void *)v38
                && *(unsigned char *)(v40 + 16) == 84
                && (!*(void *)(v40 + 48) && (*(unsigned char *)(v40 + 23) & 0x20) == 0 || !llvm::Instruction::getMetadataImpl()))
              {
                llvm::MDTuple::getImpl();
                llvm::Instruction::setMetadata();
                llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, (llvm::Value *)v40, 0, 0, 0);
                uint64_t v41 = *(llvm::Type ***)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF));
                __int16 v62 = 257;
                uint64_t v42 = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)&Name, v41, v60, (const llvm::Twine *)v61);
                uint64_t v43 = MemoryIndirectionPass::unpackAccelerationStructureValue(this, v42, (llvm::IRBuilderBase *)&Name);
                uint64_t inserted = MTLBoundsCheck::SharedPassData::getOrInsertAccelerationStructurePtrGV(*((llvm::Type ****)this
                                                                                                 + 8));
                llvm::IRBuilderBase::CreateAlignedStore((uint64_t)&Name, v42, inserted, 0);
                uint64_t v45 = **(void **)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF));
                __int16 v62 = 257;
                uint64_t v46 = llvm::IRBuilderBase::CreateCast((uint64_t)&Name, 48, v43, v45, (uint64_t)v61);
                llvm::CallBase::setArgOperand(v40, 0, v46);
                llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v67);
                llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v66);
                if (Name != v65) {
                  free(Name);
                }
              }
              v38 += 8;
              v39 -= 8;
            }
            while (v39);
            unint64_t v38 = v68;
            unsigned int v25 = v59;
          }
LABEL_139:
          if (v38 != v70)
          {
            uint64_t v37 = v38;
LABEL_141:
            free(v37);
          }
LABEL_142:
          v24 += 4;
          if (v24 != (_DWORD *)v25) {
            continue;
          }
          uint64_t v24 = v71;
          break;
      }
      break;
    }
  }
  if (v24 != (_DWORD *)v73) {
    free(v24);
  }
}

void sub_25573E1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  uint64_t v39 = *(void **)(v37 - 192);
  if (v39 != a9) {
    free(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MemoryIndirectionPass::getPrimitiveDataArgIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  unint64_t v3 = *(unsigned int *)(v2 + 8);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = 0;
  uint64_t v5 = 0xFFFFFFFFLL;
  do
  {
    uint64_t v6 = *(void *)(v2 - 8 * v3 + 8 * v4);
    uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8));
    if (v8 == 18)
    {
      BOOL v9 = *(void *)String == 0x6D6972702E726961 && *(void *)(String + 8) == 0x61645F6576697469;
      if (v9 && *(_WORD *)(String + 16) == 24948)
      {
        uint64_t v11 = *(void *)(*(void *)(v6 - 8 * *(unsigned int *)(v6 + 8)) + 128);
        uint64_t v12 = (unsigned int *)(v11 + 24);
        if (*(_DWORD *)(v11 + 32) >= 0x41u) {
          uint64_t v12 = *(unsigned int **)v12;
        }
        uint64_t v5 = *v12;
      }
    }
    ++v4;
    unint64_t v3 = *(unsigned int *)(v2 + 8);
  }
  while (v4 < v3);
  return v5;
}

uint64_t MemoryIndirectionPass::synthesizeAndInsertPrimitiveDataHandle(uint64_t a1, llvm::IRBuilderBase *this, llvm::Type **a3)
{
  uint64_t v6 = *(llvm::Type **)(a1 + 72);
  __int16 v18 = 257;
  BitOrPointeruint64_t Cast = llvm::IRBuilderBase::CreateBitOrPointerCast(this, a3, v6, (const llvm::Twine *)v17);
  uint64_t v8 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v18 = 257;
  BOOL v9 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(this, BitOrPointerCast, v8, (const llvm::Twine *)v17);
  BOOL v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v18 = 257;
  llvm::IRBuilderBase::CreateAdd(this, v10, v9, (const llvm::Twine *)v17, 0, 0);
  uint64_t NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 72), v11);
  __int16 v18 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t)this, 32, (llvm::CmpInst **)BitOrPointerCast, NullValue, (uint64_t)v17);
  llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 72), v13);
  __int16 v18 = 257;
  Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
  int v15 = *a3;
  __int16 v18 = 257;
  llvm::IRBuilderBase::CreateBitOrPointerCast(this, Select, v15, (const llvm::Twine *)v17);
  llvm::Value::replaceAllUsesWith();
  return llvm::PHINode::setIncomingValue((uint64_t)BitOrPointerCast, 0, (uint64_t)a3);
}

uint64_t llvm::Function::args(llvm::Function *this)
{
  if ((*((_WORD *)this + 9) & 1) == 0) {
    return *((void *)this + 11);
  }
  llvm::Function::BuildLazyArguments(this);
  uint64_t v2 = *((void *)this + 11);
  if (*((_WORD *)this + 9)) {
    llvm::Function::BuildLazyArguments(this);
  }
  return v2;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>>::emplace_back<llvm::Function *,MemoryIndirectionPass::fixIntersectCalls(llvm::Module *)::Handling>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::MDNode *>,true>::push_back(a1, *a2, *a3);
    uint64_t v5 = *(void *)a1;
    unsigned int v7 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *(void *)a1 + 16 * v4;
    *(void *)uint64_t v6 = *a2;
    *(_DWORD *)(v6 + 8) = *a3;
    unsigned int v7 = v4 + 1;
    *(_DWORD *)(a1 + 8) = v7;
  }
  return v5 + 16 * v7 - 16;
}

uint64_t MemoryIndirectionPass::unpackAccelerationStructureValue(void *a1, llvm::Type **a2, llvm::IRBuilderBase *a3)
{
  uint64_t v6 = (llvm::Type *)llvm::PointerType::get();
  __int16 v20 = 257;
  BitOrPointeruint64_t Cast = llvm::IRBuilderBase::CreateBitOrPointerCast(a3, a2, v6, (const llvm::Twine *)v19);
  uint64_t v8 = (llvm::Type *)a1[9];
  BOOL v9 = (llvm::Type *)a1[12];
  __int16 v20 = 257;
  ConstInBoundsGEP1_32 = (llvm::Type **)llvm::IRBuilderBase::CreateConstInBoundsGEP1_32((llvm::Type **)a3, v9, BitOrPointerCast, 8u, (const llvm::Twine *)v19);
  uint64_t v11 = (llvm::Type *)llvm::PointerType::get();
  __int16 v20 = 257;
  uint64_t v12 = llvm::IRBuilderBase::CreateBitOrPointerCast(a3, ConstInBoundsGEP1_32, v11, (const llvm::Twine *)v19);
  __int16 v20 = 257;
  uint64_t AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a3, v8, (uint64_t)v12, 0, 0, (uint64_t)v19);
  if ((*(unsigned char *)(*(void *)(a1[8] + 72) + 24) & 0x10) != 0)
  {
    unint64_t v14 = (llvm::Type *)a1[12];
    __int16 v20 = 257;
    int v15 = (llvm::Type **)llvm::IRBuilderBase::CreateConstInBoundsGEP1_32((llvm::Type **)a3, v14, BitOrPointerCast, 0x10u, (const llvm::Twine *)v19);
    BOOL v16 = (llvm::Type *)llvm::PointerType::get();
    __int16 v20 = 257;
    BOOL v17 = llvm::IRBuilderBase::CreateBitOrPointerCast(a3, v15, v16, (const llvm::Twine *)v19);
    __int16 v20 = 257;
    llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a3, v8, (uint64_t)v17, 0, 0, (uint64_t)v19);
    llvm::MDTuple::getImpl();
    llvm::Instruction::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Instruction::setMetadata();
  }
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  llvm::MDTuple::getImpl();
  llvm::Instruction::setMetadata();
  return AlignedLoad;
}

void MemoryIndirectionPass::generatePrimitiveDataHandle(uint64_t a1, llvm::Value *a2)
{
  v26[1] = *MEMORY[0x263EF8340];
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)v23, a2, 0, 0, 0);
  uint64_t v4 = *((void *)a2 + 4);
  if (v4) {
    BOOL v5 = v4 == *((void *)a2 + 5) + 40;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (llvm::Instruction *)(v4 - 24);
  }
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v23, v6);
  int v20 = 4;
  __int16 v22 = 257;
  Value = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v23, (unsigned __int8 *)a2, (uint64_t)&v20, 1, (uint64_t)v21);
  uint64_t v8 = *(llvm::Type **)(a1 + 72);
  __int16 v22 = 257;
  BitOrPointeruint64_t Cast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v23, Value, v8, (const llvm::Twine *)v21);
  BOOL v10 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  uint64_t v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v23, BitOrPointerCast, v10, (const llvm::Twine *)v21);
  uint64_t v12 = (llvm::Value *)llvm::ConstantInt::get();
  __int16 v22 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v23, v12, v11, (const llvm::Twine *)v21, 0, 0);
  uint64_t NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 72), v13);
  __int16 v22 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t)v23, 32, (llvm::CmpInst **)BitOrPointerCast, NullValue, (uint64_t)v21);
  llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 72), v15);
  __int16 v22 = 257;
  Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
  BOOL v17 = *Value;
  __int16 v22 = 257;
  __int16 v18 = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v23, Select, v17, (const llvm::Twine *)v21);
  int v20 = 4;
  __int16 v22 = 257;
  uint64_t InsertValue = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v23, (uint64_t)a2, (uint64_t)v18, (uint64_t)&v20, 1, (uint64_t)v21);
  llvm::Value::replaceAllUsesWith();
  llvm::PHINode::setIncomingValue((uint64_t)Value, 0, (uint64_t)a2);
  llvm::PHINode::setIncomingValue(InsertValue, 0, (uint64_t)a2);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v26);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v25);
  if (v23[0] != &v24) {
    free(v23[0]);
  }
}

void sub_25573EA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MemoryIndirectionPass::createValidateAccelerationStructureTypeCall(uint64_t a1, llvm::Instruction *a2)
{
  void v16[5] = *MEMORY[0x263EF8340];
  llvm::PointerType::get();
  uint64_t v4 = (void *)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[16];
  uint64_t Module = llvm::Instruction::getModule(a2);
  uint64_t Context = (llvm::Type *)llvm::Value::getContext(a2);
  v14[0] = "mtl.validate_acceleration_structure_type";
  __int16 v15 = 259;
  VoidTy = (MTLBoundsCheck *)llvm::Type::getVoidTy(Context, v7);
  v16[0] = *v4;
  uint64_t v9 = getMangledFunction<llvm::Type *,llvm::Type *&>(Module, (llvm::Twine *)v14, VoidTy, v16, (uint64_t *)(a1 + 80));
  MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), a2);
  uint64_t v13 = llvm::ConstantInt::get();
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v9))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v9 + 32) = *(_DWORD *)(v9 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    v14[0] = "entryBlock";
    __int16 v15 = 259;
    llvm::BasicBlock::Create(Context, (llvm::LLVMContext *)v14, (const llvm::Twine *)v9, 0, v10);
  }
  if (v9) {
    uint64_t v11 = *(void *)(v9 + 24);
  }
  else {
    uint64_t v11 = 0;
  }
  v16[0] = v4;
  v16[1] = v13;
  __int16 v15 = 257;
  return llvm::CallInst::Create(v11, v9, (uint64_t)v16, 2, 0, 0);
}

void sub_25573F090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t getMangledFunction<llvm::Type *,llvm::Type *&>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, void *a4, uint64_t *a5)
{
  v41[2] = *MEMORY[0x263EF8340];
  llvm::Twine::str((uint64_t *)&v40, this);
  MTLBoundsCheck::getMangledTypeStr(a3, v9, &v39);
  BOOL v10 = std::string::insert(&v39, 0, ".");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t v36 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v36 >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if (v36 >= 0) {
    std::string::size_type v13 = HIBYTE(v36);
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  std::string::append(&v40, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = a1;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = 0;
  memset(&v39, 0, sizeof(v39));
  uint64_t v17 = *a5;
  v41[0] = *a4;
  v41[1] = v17;
  do
  {
    __int16 v18 = (MTLBoundsCheck *)v41[v16];
    MTLBoundsCheck::getMangledTypeStr(v18, (llvm::Type *)v14, &v38);
    BOOL v19 = std::string::insert(&v38, 0, ".");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    int64_t v36 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v36 >= 0) {
      BOOL v21 = __p;
    }
    else {
      BOOL v21 = (void **)__p[0];
    }
    if (v36 >= 0) {
      std::string::size_type v22 = HIBYTE(v36);
    }
    else {
      std::string::size_type v22 = (std::string::size_type)__p[1];
    }
    std::string::append(&v40, (const std::string::value_type *)v21, v22);
    if (SHIBYTE(v36) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
    if (v39.__r_.__value_.__l.__size_ >= v39.__r_.__value_.__r.__words[2])
    {
      uint64_t v25 = (uint64_t)(v39.__r_.__value_.__l.__size_ - v39.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v25 + 1) >> 61) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = (uint64_t)(v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0]) >> 2;
      if (v26 <= v25 + 1) {
        unint64_t v26 = v25 + 1;
      }
      if (v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v26;
      }
      if (v14) {
        int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v39.__r_.__value_.__r.__words[2], v14);
      }
      else {
        int v27 = 0;
      }
      uint64_t v28 = (MTLBoundsCheck **)&v27[8 * v25];
      unsigned char *v28 = v18;
      std::string::size_type v24 = (std::string::size_type)(v28 + 1);
      uint64_t v29 = (char *)v39.__r_.__value_.__l.__size_;
      std::string::size_type v30 = v39.__r_.__value_.__r.__words[0];
      if (v39.__r_.__value_.__l.__size_ != v39.__r_.__value_.__r.__words[0])
      {
        do
        {
          uint64_t v31 = (MTLBoundsCheck *)*((void *)v29 - 1);
          v29 -= 8;
          *--uint64_t v28 = v31;
        }
        while (v29 != (char *)v30);
        uint64_t v29 = (char *)v39.__r_.__value_.__r.__words[0];
      }
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      v39.__r_.__value_.__l.__size_ = v24;
      v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[8 * v14];
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *(void *)v39.__r_.__value_.__l.__size_ = v18;
      std::string::size_type v24 = size + 8;
    }
    v39.__r_.__value_.__l.__size_ = v24;
    ++v16;
  }
  while (v16 != 2);
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t v33 = llvm::FunctionType::get();
    __int16 v37 = 260;
    __p[0] = &v40;
    uint64_t Function = llvm::Function::Create(v33, 0, (uint64_t)__p, v15);
  }
  if (v39.__r_.__value_.__r.__words[0])
  {
    v39.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  return Function;
}

void sub_25573F3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::IRBuilderBase::CreateCondBr(uint64_t *a1, llvm::BasicBlock *a2, llvm::BranchInst *this, llvm::BasicBlock *a4, llvm::Instruction *a5, uint64_t a6)
{
  uint64_t v9 = llvm::BranchInst::Create(this, a4, a2, 0, a5);
  uint64_t v10 = llvm::IRBuilderBase::addBranchMetadata<llvm::BranchInst>((uint64_t)a1, v9, (uint64_t)a5, a6);
  __int16 v13 = 257;
  return llvm::IRBuilderBase::Insert<llvm::CastInst>(a1, v10, (uint64_t)v12);
}

uint64_t MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock * const&>(uint64_t a1, llvm::BasicBlock **a2)
{
  unint64_t v3 = (llvm::LLVMContext **)llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder(a1, *a2, 0, 0, 0);
  MTLIRBuilder::initTypeCache((MTLIRBuilder *)v3, v3[8]);
  return a1;
}

void sub_25573F55C(_Unwind_Exception *a1)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::IRBuilderBase::addBranchMetadata<llvm::BranchInst>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    llvm::Instruction::setMetadata();
  }
  if (a4) {
    llvm::Instruction::setMetadata();
  }
  return a2;
}

uint64_t MemoryIndirectionPass::createTaggedPtrToEndPtr(MemoryIndirectionPass *this, llvm::Value *a2)
{
  v13[5] = *(MTLBoundsCheck **)MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 6);
  v11[0] = "mtl.tag_ptr_to_end";
  __int16 v12 = 259;
  BOOL v5 = (MTLBoundsCheck *)*((void *)this + 9);
  v13[0] = *(MTLBoundsCheck **)a2;
  uint64_t v6 = getMangledFunction<llvm::Type *>(v4, (llvm::Twine *)v11, v5, v13);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v6 + 32) = *(_DWORD *)(v6 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    unsigned int v7 = (llvm::BasicBlock *)*((void *)this + 5);
    __int16 v12 = 257;
    llvm::BasicBlock::Create(v7, (llvm::LLVMContext *)v11, (const llvm::Twine *)v6, 0, v8);
  }
  if (v6) {
    uint64_t v9 = *(void *)(v6 + 24);
  }
  else {
    uint64_t v9 = 0;
  }
  v13[0] = a2;
  __int16 v12 = 257;
  return llvm::CallInst::Create(v9, v6, (uint64_t)v13, 1, 0, 0);
}

void sub_25573F8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MemoryIndirectionPass::createTaggedPtrToBasePtr(MemoryIndirectionPass *this, llvm::Value *a2)
{
  v13[5] = *(MTLBoundsCheck **)MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 6);
  v11[0] = "mtl.tag_ptr_to_base";
  __int16 v12 = 259;
  BOOL v5 = (MTLBoundsCheck *)*((void *)this + 9);
  v13[0] = *(MTLBoundsCheck **)a2;
  uint64_t v6 = getMangledFunction<llvm::Type *>(v4, (llvm::Twine *)v11, v5, v13);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v6 + 32) = *(_DWORD *)(v6 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    unsigned int v7 = (llvm::BasicBlock *)*((void *)this + 5);
    __int16 v12 = 257;
    llvm::BasicBlock::Create(v7, (llvm::LLVMContext *)v11, (const llvm::Twine *)v6, 0, v8);
  }
  if (v6) {
    uint64_t v9 = *(void *)(v6 + 24);
  }
  else {
    uint64_t v9 = 0;
  }
  v13[0] = a2;
  __int16 v12 = 257;
  return llvm::CallInst::Create(v9, v6, (uint64_t)v13, 1, 0, 0);
}

void sub_25573FC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t llvm::IRBuilderBase::CreateNot(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3)
{
  if (!a2 || *((unsigned __int8 *)a2 + 16) > 0x14u)
  {
    uint64_t Not = llvm::BinaryOperator::CreateNot();
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, Not, (uint64_t)a3);
  }
  uint64_t v5 = (*(uint64_t (**)(void, llvm::Value *))(**((void **)this + 9) + 208))(*((void *)this + 9), a2);
  if (v5) {
    BOOL v6 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return v5;
  }
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v5, (uint64_t)a3);
}

uint64_t llvm::IRBuilderBase::CreateLShr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, char a5)
{
  if (!a2 || *((unsigned __int8 *)a2 + 16) > 0x14u || !a3 || *((unsigned __int8 *)a3 + 16) > 0x14u)
  {
    if (a5)
    {
      uint64_t v10 = (llvm::Instruction *)llvm::BinaryOperator::Create();
      llvm::Instruction::setIsExact(v10);
      long long v11 = (uint64_t *)this;
      uint64_t v12 = (uint64_t)v10;
    }
    else
    {
      uint64_t v12 = llvm::BinaryOperator::Create();
      long long v11 = (uint64_t *)this;
    }
    return llvm::IRBuilderBase::Insert<llvm::CastInst>(v11, v12, (uint64_t)a4);
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 9) + 160))(*((void *)this + 9));
  if (v7) {
    BOOL v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    return v7;
  }
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v7, (uint64_t)a4);
}

llvm::Instruction *llvm::IRBuilderBase::CreateShl(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, uint64_t a5, uint64_t a6)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    uint64_t result = (llvm::Instruction *)(*(uint64_t (**)(void, llvm::Value *, llvm::Value *, uint64_t, uint64_t))(**((void **)this + 9) + 152))(*((void *)this + 9), a2, a3, a5, a6);
    if (result) {
      BOOL v9 = *((unsigned __int8 *)result + 16) >= 0x1Cu;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      return (llvm::Instruction *)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)result, (uint64_t)a4);
    }
  }
  else
  {
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 25, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  }
  return result;
}

uint64_t MemoryIndirectionPass::createCheckedFunction(MemoryIndirectionPass *a1, uint64_t a2, llvm::Value *this)
{
  v53[8] = *MEMORY[0x263EF8340];
  if (!this) {
    return 0;
  }
  uint64_t Name = (void *)llvm::Value::getName(this);
  uint64_t v41 = (char *)Name;
  size_t v42 = v7;
  if (v7 >= 0x17)
  {
    if (*Name == 0x5F7465732E726961
      && Name[1] == 0x746E656D67617266
      && *(void *)((char *)Name + 15) == 0x7265666675625F74)
    {
      return 0;
    }
LABEL_14:
    if (*Name == 0x5F7465732E726961
      && Name[1] == 0x625F6C656E72656BLL
      && *(void *)((char *)Name + 13) == 0x7265666675625F6CLL)
    {
      return 0;
    }
    BOOL v12 = *Name == 0x5F7465732E726961 && Name[1] == 0x625F786574726576;
    if (v12 && *(void *)((char *)Name + 13) == 0x7265666675625F78) {
      return 0;
    }
LABEL_28:
    if (*Name == 0x6C5F736F2E726961 && *((_WORD *)Name + 4) == 26479) {
      return 0;
    }
    goto LABEL_32;
  }
  if (v7 >= 0x15) {
    goto LABEL_14;
  }
  if (v7 >= 0xA) {
    goto LABEL_28;
  }
  if (v7 < 4) {
    return 0;
  }
LABEL_32:
  if (*(_DWORD *)Name != 779250017)
  {
    if (v7 < 5) {
      return 0;
    }
    if (*(_DWORD *)Name != 1836477548 || *((unsigned char *)Name + 4) != 46) {
      return 0;
    }
  }
  if ((*(void *)(a2 + 48) || (*(unsigned char *)(a2 + 23) & 0x20) != 0) && llvm::Instruction::getMetadataImpl()) {
    return 0;
  }
  uint64_t v18 = *((void *)this + 3);
  uint64_t v19 = **(void **)(v18 + 16);
  uint64_t v51 = v53;
  long long v52 = xmmword_2557AA0B0;
  llvm::raw_svector_ostream::raw_svector_ostream((uint64_t)v39, (uint64_t)&v51);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)v39, "mtl.indirect.", 0xDuLL);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)v39, v41, v42);
  uint64_t v48 = v50;
  uint64_t v49 = 0x400000000;
  llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)&v48, (*(_DWORD *)(v18 + 12) - 1));
  if (v42 >= 0xB)
  {
    if (*(void *)v41 == 0x6D656D2E6D766C6CLL && *(void *)(v41 + 3) == 0x7970636D656D2E6DLL) {
      goto LABEL_73;
    }
    if (*(void *)v41 == 0x6D656D2E6D766C6CLL && *(void *)(v41 + 3) == 0x7465736D656D2E6DLL) {
      goto LABEL_73;
    }
    if (v42 >= 0xC)
    {
      if (*(void *)v41 != 0x6D656D2E6D766C6CLL || *((_DWORD *)v41 + 2) != 1702260589)
      {
        if (v42 >= 0x11)
        {
          BOOL v23 = *(void *)v41 == 0x6D6F74612E726961 && *((void *)v41 + 1) == 0x61626F6C672E6369;
          if (v23 && v41[16] == 108)
          {
            uint64_t v25 = llvm::StringRef::find();
            uint64_t v26 = -4;
            if (v25 == -1) {
              uint64_t v26 = -3;
            }
            unint64_t v27 = v26 + v49;
            if (__CFADD__(v26, v49))
            {
              do
              {
                v48[v27] = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v27);
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)v39, ".", 1uLL);
                llvm::raw_ostream::operator<<();
                ++v27;
              }
              while (v27 < v49);
            }
          }
        }
        goto LABEL_78;
      }
LABEL_73:
      if (v49 >= 4)
      {
        uint64_t v28 = 3;
        if (v49 == 5) {
          uint64_t v28 = 4;
        }
        v48[v28] = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v28);
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)v39, ".", 1uLL);
        llvm::raw_ostream::operator<<();
        if (v49 == 5)
        {
          v48[3] = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 96);
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)v39, ".", 1uLL);
          llvm::raw_ostream::operator<<();
        }
      }
    }
  }
LABEL_78:
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t v45 = v47;
    uint64_t v46 = 0x200000000;
    MTLBoundsCheck::gatherMemoryArguments((uint64_t)this, (uint64_t)&v45);
    if (v46)
    {
      int v29 = 0;
      std::string::size_type v30 = (llvm::Type ***)v45;
      uint64_t v31 = 24 * v46;
      do
      {
        v29 += MemoryIndirectionPass::indirectAddressSpace(a1, **v30);
        v30 += 3;
        v31 -= 24;
      }
      while (v31);
      if (v29 && *(unsigned char *)(v19 + 8) != 15)
      {
        uint64_t v33 = *v40;
        uint64_t v32 = v40[1];
        __int16 v44 = 261;
        v43[0] = v33;
        v43[1] = v32;
        uint64_t v34 = llvm::Function::Create(v18, 7, (uint64_t)v43, *((void *)a1 + 6));
        llvm::MDTuple::getImpl();
        llvm::Value::setMetadata();
        llvm::Function::addFnAttr();
        llvm::Function::addFnAttr();
        if (v42 >= 0x18)
        {
          BOOL v36 = *(void *)v41 == 0x776172642E726961 && *((void *)v41 + 1) == 0x64657865646E695FLL;
          if (v36 && *((void *)v41 + 2) == 0x736568637461705FLL)
          {
            if (*(_WORD *)(v34 + 18)) {
              llvm::Function::BuildLazyArguments((llvm::Function *)v34);
            }
            v48[6] = *(void *)(v34 + 88) + 240;
          }
        }
        std::string v38 = (llvm::BasicBlock *)*((void *)a1 + 5);
        v43[0] = "entry";
        __int16 v44 = 259;
        llvm::BasicBlock::Create(v38, (llvm::LLVMContext *)v43, (const llvm::Twine *)v34, 0, v35);
      }
    }
    uint64_t Function = 0;
    if (v45 != v47) {
      free(v45);
    }
  }
  if (v48 != (void *)v50) {
    free(v48);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v39);
  if (v51 != v53) {
    free(v51);
  }
  return Function;
}

void sub_255740754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48)
{
  long long v52 = *(void **)(v50 - 232);
  if (v52 != v49) {
    free(v52);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&a20);
  uint64_t v53 = *(void **)(v50 - 184);
  if (v53 != v48) {
    free(v53);
  }
  _Unwind_Resume(a1);
}

uint64_t llvm::CallBase::arg_end(llvm::CallBase *this)
{
  int v2 = *((unsigned __int8 *)this + 16);
  if (v2 == 84)
  {
    NumSubclassExtraOperandsDynamiCC_SHA256_CTX c = 0;
  }
  else if (v2 == 39)
  {
    NumSubclassExtraOperandsDynamiCC_SHA256_CTX c = llvm::CallBase::getNumSubclassExtraOperandsDynamic(this);
  }
  else
  {
    NumSubclassExtraOperandsDynamiCC_SHA256_CTX c = 2;
  }
  return (uint64_t)this
       + -32 * llvm::CallBase::getNumTotalBundleOperands(this)
       + -32 * NumSubclassExtraOperandsDynamic
       - 32;
}

uint64_t MemoryIndirectionPass::createStripPointerTag(MemoryIndirectionPass *this, llvm::Value *a2)
{
  v13[5] = *(MTLBoundsCheck **)MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 6);
  v11[0] = "mtl.strip_ptr_tag";
  __int16 v12 = 259;
  uint64_t v5 = (MTLBoundsCheck *)*((void *)this + 9);
  v13[0] = *(MTLBoundsCheck **)a2;
  uint64_t v6 = getMangledFunction<llvm::Type *>(v4, (llvm::Twine *)v11, v5, v13);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    *(_DWORD *)(v6 + 32) = *(_DWORD *)(v6 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    size_t v7 = (llvm::BasicBlock *)*((void *)this + 5);
    __int16 v12 = 257;
    llvm::BasicBlock::Create(v7, (llvm::LLVMContext *)v11, (const llvm::Twine *)v6, 0, v8);
  }
  if (v6) {
    uint64_t v9 = *(void *)(v6 + 24);
  }
  else {
    uint64_t v9 = 0;
  }
  v13[0] = a2;
  __int16 v12 = 257;
  return llvm::CallInst::Create(v9, v6, (uint64_t)v13, 1, 0, 0);
}

void sub_255740AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t llvm::raw_svector_ostream::raw_svector_ostream(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = MEMORY[0x263F8BBF8] + 16;
  *(void *)(a1 + 64) = a2;
  llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)a1);
  return a1;
}

void sub_255740B58(_Unwind_Exception *a1)
{
  llvm::raw_ostream::~raw_ostream(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::raw_ostream::SetUnbuffered(llvm::raw_ostream *this)
{
  if (*((void *)this + 4) != *((void *)this + 2)) {
    llvm::raw_ostream::flush_nonempty(this);
  }
  return MEMORY[0x270F93438](this, 0, 0, 0);
}

void llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v2 != a2) {
        bzero((void *)(*(void *)a1 + 8 * v2), 8 * a2 - 8 * v2);
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
}

unint64_t llvm::CallBase::getNumTotalBundleOperands(llvm::CallBase *this)
{
  unint64_t result = llvm::CallBase::getNumOperandBundles(this);
  if (result)
  {
    int v3 = *(_DWORD *)(llvm::User::getDescriptor(this) + 8);
    uint64_t Descriptor = llvm::User::getDescriptor(this);
    return (*(_DWORD *)(Descriptor + v5 - 4) - v3);
  }
  return result;
}

unint64_t llvm::CallBase::getNumOperandBundles(llvm::CallBase *this)
{
  if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
  {
    uint64_t Descriptor = llvm::User::getDescriptor(this);
    if ((*((_DWORD *)this + 5) & 0x80000000) != 0)
    {
      uint64_t v5 = llvm::User::getDescriptor(this);
      uint64_t v3 = v5 + v6;
      return (unint64_t)(v3 - Descriptor) >> 4;
    }
  }
  else
  {
    uint64_t Descriptor = 0;
  }
  uint64_t v3 = 0;
  return (unint64_t)(v3 - Descriptor) >> 4;
}

void *llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *,void>(void *a1, char *a2, char *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_255740D1C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>(uint64_t result, char *a2, char *a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v5 = (void *)(*(void *)result + 8 * v4);
    do
    {
      uint64_t v6 = *(void *)v3;
      v3 += 32;
      *v5++ = v6;
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + ((unint64_t)(a3 - a2) >> 5);
  return result;
}

void createMTLICBIndirectionPass()
{
}

void sub_255740E2C(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLICBIndirectionPass::~MTLICBIndirectionPass(MTLICBIndirectionPass *this)
{
  *(void *)this = &unk_2704532C8;
  unint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  unint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t MTLICBIndirectionPass::runOnModule(MTLICBIndirectionPass *this, llvm::Module *a2)
{
  v63[8] = *MEMORY[0x263EF8340];
  MetalModulePass::runOnModule(this, a2);
  llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>(&v61, *((void *)a2 + 4), (uint64_t)a2 + 24);
  uint64_t v4 = (llvm::GlobalValue **)v61;
  if (v62)
  {
    uint64_t v5 = (llvm::GlobalValue **)((char *)v61 + 8 * v62);
    while (1)
    {
      if ((llvm::GlobalValue::isDeclaration(*v4) & 1) == 0) {
        goto LABEL_135;
      }
      uint64_t Name = (_DWORD *)llvm::Value::getName(*v4);
      if (v7 < 4 || *Name != 779250017) {
        goto LABEL_135;
      }
      BOOL v8 = (void *)llvm::Value::getName(*v4);
      uint64_t v10 = v8;
      unint64_t v11 = v9;
      if (v9 >= 0x25) {
        break;
      }
      if (v9 == 36)
      {
        int v12 = memcmp(v8, "air.set_vertex_buffer_render_command", 0x24uLL);
        __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceSetBufferWithStride;
        if (!v12) {
          goto LABEL_126;
        }
        goto LABEL_24;
      }
      if (v9 >= 0x20) {
        goto LABEL_24;
      }
      if (v9 >= 0x1B)
      {
        BOOL v32 = *v8 == 0x5F7465672E726961
           && v8[1] == 0x6D6F635F657A6973
           && v8[2] == 0x6675625F646E616DLL
           && *(void *)((char *)v8 + 19) == 0x7265666675625F64;
        __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
        if (v32)
        {
LABEL_126:
          uint64_t v54 = v13;
          llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v58, *((void *)*v4 + 1), 0);
          uint64_t v55 = (char *)v58;
          if (v59)
          {
            uint64_t v56 = 8 * v59;
            do
            {
              if (*(void *)v55 && *(unsigned char *)(*(void *)v55 + 16) == 84) {
                v54(this);
              }
              v55 += 8;
              v56 -= 8;
            }
            while (v56);
            uint64_t v55 = (char *)v58;
          }
          if (v55 != (char *)&v60) {
            free(v55);
          }
          goto LABEL_135;
        }
      }
      else if (v9 < 0x18)
      {
        if (v9 != 23) {
          goto LABEL_135;
        }
        uint64_t v19 = v8[1];
        uint64_t v20 = *(void *)((char *)v8 + 15);
        BOOL v21 = *v8 == 0x79706F632E726961;
        uint64_t v22 = 0x5F7265646E65725FLL;
        goto LABEL_76;
      }
LABEL_57:
      BOOL v34 = *v10 == 0x657365722E726961 && v10[1] == 0x7265646E65725F74 && v10[2] == 0x646E616D6D6F635FLL;
      __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
      if (v34) {
        goto LABEL_126;
      }
      if (v11 >= 0x22)
      {
        int v35 = memcmp(v10, "air.draw_primitives_render_command", 0x22uLL);
        __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
        if (!v35) {
          goto LABEL_126;
        }
      }
      BOOL v36 = *v10 == 0x79706F632E726961 && v10[1] == 0x5F7265646E65725FLL;
      BOOL v37 = v36 && *(void *)((char *)v10 + 15) == 0x646E616D6D6F635FLL;
      __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
      if (v37) {
        goto LABEL_126;
      }
      if (v11 >= 0x26)
      {
        int v40 = memcmp(v10, "air.set_pipeline_state_compute_command", 0x26uLL);
        __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
        if (!v40) {
          goto LABEL_126;
        }
      }
      else if (v11 < 0x19)
      {
        uint64_t v19 = v10[1];
        uint64_t v20 = v10[2];
        BOOL v21 = *v10 == 0x79706F632E726961;
        uint64_t v22 = 0x657475706D6F635FLL;
LABEL_76:
        BOOL v39 = v21 && v19 == v22 && v20 == 0x646E616D6D6F635FLL;
        __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
        if (v39) {
          goto LABEL_126;
        }
        goto LABEL_135;
      }
      BOOL v43 = *v10 == 0x657365722E726961
         && v10[1] == 0x7475706D6F635F74
         && v10[2] == 0x6E616D6D6F635F65
         && *((unsigned char *)v10 + 24) == 100;
      __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
      if (v43) {
        goto LABEL_126;
      }
      BOOL v44 = *v10 == 0x79706F632E726961 && v10[1] == 0x657475706D6F635FLL;
      BOOL v45 = v44 && v10[2] == 0x646E616D6D6F635FLL;
      __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
      if (v45) {
        goto LABEL_126;
      }
      if (v11 >= 0x31)
      {
        int v46 = memcmp(v10, "air.set_threadgroup_memory_length_compute_command", 0x31uLL);
        __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
        if (!v46) {
          goto LABEL_126;
        }
      }
      else if (v11 < 0x1F)
      {
        goto LABEL_135;
      }
      BOOL v49 = *v10 == 0x5F7465732E726961
         && v10[1] == 0x5F72656972726162
         && v10[2] == 0x5F657475706D6F63
         && *(void *)((char *)v10 + 23) == 0x646E616D6D6F635FLL;
      __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
      if (v49) {
        goto LABEL_126;
      }
      if (v11 >= 0x21)
      {
        int v50 = memcmp(v10, "air.clear_barrier_compute_command", 0x21uLL);
        __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
        if (!v50) {
          goto LABEL_126;
        }
        if (v11 >= 0x34)
        {
          int v51 = memcmp(v10, "air.concurrent_dispatch_threadgroups_compute_command", 0x34uLL);
          __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
          if (!v51) {
            goto LABEL_126;
          }
        }
        else if (v11 < 0x2F)
        {
          if (v11 < 0x27) {
            goto LABEL_135;
          }
          goto LABEL_125;
        }
        int v52 = memcmp(v10, "air.concurrent_dispatch_threads_compute_command", 0x2FuLL);
        __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
        if (!v52) {
          goto LABEL_126;
        }
LABEL_125:
        int v53 = memcmp(v10, "air.set_stage_in_region_compute_command", 0x27uLL);
        __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
        if (!v53) {
          goto LABEL_126;
        }
      }
LABEL_135:
      if (++v4 == v5)
      {
        uint64_t v4 = (llvm::GlobalValue **)v61;
        goto LABEL_137;
      }
    }
    int v14 = memcmp(v8, "air.set_kernel_buffer_compute_command", 0x25uLL);
    __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceSetBufferWithStride;
    if (!v14) {
      goto LABEL_126;
    }
    int v15 = memcmp(v10, "air.set_vertex_buffer_render_command", 0x24uLL);
    __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceSetBufferWithStride;
    if (!v15) {
      goto LABEL_126;
    }
    if (v11 >= 0x26)
    {
      int v16 = memcmp(v10, "air.set_fragment_buffer_render_command", 0x26uLL);
      __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceSetBuffer;
      if (!v16) {
        goto LABEL_126;
      }
      if (v11 >= 0x27)
      {
        int v17 = memcmp(v10, "air.draw_indexed_patches_render_command", 0x27uLL);
        __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceDrawIndexedPatches;
        if (!v17) {
          goto LABEL_126;
        }
        if (v11 >= 0x2A)
        {
          int v18 = memcmp(v10, "air.draw_indexed_primitives_render_command", 0x2AuLL);
          __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
          if (!v18) {
            goto LABEL_126;
          }
        }
      }
    }
LABEL_24:
    BOOL v25 = *v10 == 0x776172642E726961
       && v10[1] == 0x736568637461705FLL
       && v10[2] == 0x5F7265646E65725FLL
       && v10[3] == 0x2E646E616D6D6F63;
    __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
    if (v25) {
      goto LABEL_126;
    }
    BOOL v26 = *v10 == 0x5F7465672E726961 && v10[1] == 0x6D6F635F657A6973;
    BOOL v27 = v26 && v10[2] == 0x6675625F646E616DLL;
    BOOL v28 = v27 && *(void *)((char *)v10 + 19) == 0x7265666675625F64;
    __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
    if (v28) {
      goto LABEL_126;
    }
    if (v11 >= 0x25)
    {
      int v29 = memcmp(v10, "air.set_pipeline_state_render_command", 0x25uLL);
      __int16 v13 = (void (*)(MTLICBIndirectionPass *))MTLICBIndirectionPass::replaceICB;
      if (!v29) {
        goto LABEL_126;
      }
    }
    goto LABEL_57;
  }
LABEL_137:
  if (v4 != v63) {
    free(v4);
  }
  return 0;
}

void sub_255741728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void MTLICBIndirectionPass::replaceSetBufferWithStride(uint64_t a1, llvm::Instruction *this)
{
  uint64_t Module = llvm::Instruction::getModule(this);
  uint64_t Context = (llvm::Type *)llvm::Value::getContext(this);
  uint64_t v6 = *((void *)this - 4);
  if (!v6 || *(unsigned char *)(v6 + 16) || *(void *)(v6 + 24) != *((void *)this + 9)) {
    uint64_t v6 = 0;
  }
  uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v6);
  if (Name) {
    std::string::basic_string[abi:ne180100](&__dst, Name, v8);
  }
  else {
    memset(&__dst, 0, sizeof(__dst));
  }
  p_dst = &__dst;
  std::string::replace(&__dst, 0, 3uLL, "mtl");
  int64_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  unint64_t v11 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    int64_t size = __dst.__r_.__value_.__l.__size_;
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  size_t v12 = size - 4;
  if ((unint64_t)size >= 4)
  {
    int v14 = (char *)p_dst + size;
    if (size >= 5)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v11 = &__dst;
      }
      int v15 = (char *)v11->__r_.__value_.__r.__words + 4;
      do
      {
        int v16 = memchr(v15, 46, v12);
        if (!v16) {
          break;
        }
        if (*v16 == 46) {
          goto LABEL_20;
        }
        int v15 = v16 + 1;
        size_t v12 = v14 - (unsigned char *)v15;
      }
      while (v14 - (unsigned char *)v15 > 0);
    }
    int v16 = v14;
LABEL_20:
    if (v16 == v14) {
      std::string::size_type v13 = -1;
    }
    else {
      std::string::size_type v13 = v16 - (unsigned char *)p_dst;
    }
  }
  else
  {
    std::string::size_type v13 = -1;
  }
  std::string::erase(&__dst, v13, 0xFFFFFFFFFFFFFFFFLL);
  llvm::Instruction::getModule(this);
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t VoidTy = llvm::Type::getVoidTy(Context, v17);
    uint64_t v19 = llvm::PointerType::get();
    uint64_t Function = getOrInsertFunction<std::string &,llvm::Type *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(Module, (uint64_t)&__dst, &VoidTy, &v19, (uint64_t *)(a1 + 80), (uint64_t *)(a1 + 72), (uint64_t *)(a1 + 72), (uint64_t *)(a1 + 80));
    llvm::Function::addFnAttr();
    llvm::GlobalValue::setLinkage(Function, 0);
    *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | *(_WORD *)(v6 + 18) & 0x3FF0;
  }
  MTLICBIndirectionPass::replaceFunctionCall(a1, this, Function);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_255741988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLICBIndirectionPass::replaceSetBuffer(uint64_t a1, llvm::Instruction *this)
{
  uint64_t Module = llvm::Instruction::getModule(this);
  uint64_t Context = (llvm::Type *)llvm::Value::getContext(this);
  uint64_t v6 = *((void *)this - 4);
  if (!v6 || *(unsigned char *)(v6 + 16) || *(void *)(v6 + 24) != *((void *)this + 9)) {
    uint64_t v6 = 0;
  }
  uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v6);
  if (Name) {
    std::string::basic_string[abi:ne180100](&__dst, Name, v8);
  }
  else {
    memset(&__dst, 0, sizeof(__dst));
  }
  p_dst = &__dst;
  std::string::replace(&__dst, 0, 3uLL, "mtl");
  int64_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  unint64_t v11 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    int64_t size = __dst.__r_.__value_.__l.__size_;
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  size_t v12 = size - 4;
  if ((unint64_t)size >= 4)
  {
    int v14 = (char *)p_dst + size;
    if (size >= 5)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v11 = &__dst;
      }
      int v15 = (char *)v11->__r_.__value_.__r.__words + 4;
      do
      {
        int v16 = memchr(v15, 46, v12);
        if (!v16) {
          break;
        }
        if (*v16 == 46) {
          goto LABEL_20;
        }
        int v15 = v16 + 1;
        size_t v12 = v14 - (unsigned char *)v15;
      }
      while (v14 - (unsigned char *)v15 > 0);
    }
    int v16 = v14;
LABEL_20:
    if (v16 == v14) {
      std::string::size_type v13 = -1;
    }
    else {
      std::string::size_type v13 = v16 - (unsigned char *)p_dst;
    }
  }
  else
  {
    std::string::size_type v13 = -1;
  }
  std::string::erase(&__dst, v13, 0xFFFFFFFFFFFFFFFFLL);
  llvm::Instruction::getModule(this);
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t VoidTy = llvm::Type::getVoidTy(Context, v17);
    uint64_t v19 = llvm::PointerType::get();
    uint64_t Function = getOrInsertFunction<std::string &,llvm::Type *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&>(Module, (uint64_t)&__dst, &VoidTy, &v19, (uint64_t *)(a1 + 80), (uint64_t *)(a1 + 72), (uint64_t *)(a1 + 80));
    llvm::Function::addFnAttr();
    llvm::GlobalValue::setLinkage(Function, 0);
    *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | *(_WORD *)(v6 + 18) & 0x3FF0;
  }
  MTLICBIndirectionPass::replaceFunctionCall(a1, this, Function);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_255741BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLICBIndirectionPass::replaceDrawIndexedPatches(uint64_t a1, llvm::Instruction *this)
{
  v15[6] = *MEMORY[0x263EF8340];
  uint64_t Module = llvm::Instruction::getModule(this);
  uint64_t v5 = *((void *)this - 4);
  if (!v5 || *(unsigned char *)(v5 + 16) || (uint64_t v6 = *(void *)(v5 + 24), v6 != *((void *)this + 9)))
  {
    uint64_t v5 = 0;
    uint64_t v6 = MEMORY[0x18];
  }
  uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v5);
  if (Name) {
    std::string::basic_string[abi:ne180100](&__dst, Name, v8);
  }
  else {
    memset(&__dst, 0, sizeof(__dst));
  }
  std::string::replace(&__dst, 0, 3uLL, "mtl");
  llvm::Instruction::getModule(this);
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    llvm::SmallVector<llvm::Type *,6u>::SmallVector<llvm::Type * const*,void>((uint64_t)&v14, (unsigned char *)(*(void *)(v6 + 16) + 8), (unsigned char *)(*(void *)(v6 + 16) + 8 * *(unsigned int *)(v6 + 12)));
    *(void *)int v14 = llvm::PointerType::get();
    *((void *)v14 + 6) = *(void *)(a1 + 72);
    uint64_t v10 = llvm::FunctionType::get();
    __int16 v12 = 260;
    p_dst = &__dst;
    uint64_t Function = llvm::Function::Create(v10, 0, (uint64_t)&p_dst, Module);
    *(void *)(Function + 112) = *(void *)(v5 + 112);
    *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | *(_WORD *)(v5 + 18) & 0x3FF0;
    if (v14 != v15) {
      free(v14);
    }
  }
  MTLICBIndirectionPass::replaceFunctionCall(a1, this, Function);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_255741DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t *a21,uint64_t a22,uint64_t a23)
{
  if (a21 != &a23) {
    free(a21);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLICBIndirectionPass::replaceICB(int a1, llvm::Instruction *this)
{
  uint64_t Module = llvm::Instruction::getModule(this);
  uint64_t v5 = *((void *)this - 4);
  if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *((void *)this + 9)) {
    uint64_t v5 = 0;
  }
  uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v5);
  if (Name) {
    std::string::basic_string[abi:ne180100](&__dst, Name, v7);
  }
  else {
    memset(&__dst, 0, sizeof(__dst));
  }
  std::string::replace(&__dst, 0, 3uLL, "mtl");
  llvm::Instruction::getModule(this);
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t v9 = *(void *)(v5 + 24);
    __int16 v11 = 260;
    p_dst = &__dst;
    uint64_t Function = llvm::Function::Create(v9, 0, (uint64_t)&p_dst, Module);
    *(void *)(Function + 112) = *(void *)(v5 + 112);
    *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | *(_WORD *)(v5 + 18) & 0x3FF0;
  }
  MTLICBIndirectionPass::replaceFunctionCall(a1, this, Function);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_255741F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t getOrInsertFunction<std::string &,llvm::Type *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  LODWORD(v8) = *(char *)(a2 + 23);
  BOOL v9 = (int)v8 < 0;
  uint64_t v10 = *(void *)(a2 + 8);
  if ((int)v8 < 0) {
    a2 = *(void *)a2;
  }
  uint64_t v8 = v8;
  if (v9) {
    uint64_t v8 = v10;
  }
  llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(a1, a2, v8, 0, *a3, *a4, *a5, *a6, *a7, *a8);
  uint64_t result = v11;
  if (*(unsigned char *)(v11 + 16) == 5) {
    return *(void *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
  }
  return result;
}

void MTLICBIndirectionPass::replaceFunctionCall(int a1, llvm::CallBase *this, uint64_t a3)
{
  v16[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a3 + 24);
  v12[0] = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  v12[1] = (char *)llvm::CallBase::arg_end(this);
  llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *>(&v14, v12);
  if (v15)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v14;
      uint64_t v7 = *((void *)v14 + v5);
      uint64_t v8 = *(void *)(*(void *)(v4 + 16) + 8 * v5 + 8);
      if (*(void *)v7 != v8)
      {
        if (*(unsigned char *)(*(void *)v7 + 8) == 15 || *(unsigned char *)(v8 + 8) == 15)
        {
          __int16 v13 = 257;
          Pointeruint64_t Cast = (llvm::Instruction *)llvm::CastInst::CreatePointerCast();
          llvm::Instruction::insertBefore(PointerCast, this);
        }
        else
        {
          Pointeruint64_t Cast = (llvm::Instruction *)llvm::UndefValue::get();
        }
        v6[v5] = PointerCast;
      }
      ++v5;
    }
    while (v15 > v5);
  }
  __int16 v13 = 257;
  uint64_t v10 = (llvm::Instruction *)llvm::CallInst::Create();
  llvm::ReplaceInstWithInst(this, v10, v11);
  if (v14 != v16) {
    free(v14);
  }
}

void sub_255742174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16)
{
  if (a14 != &a16) {
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[5] = *MEMORY[0x263EF8340];
  v12[0] = a6;
  v12[1] = a7;
  v12[2] = a8;
  uint64_t v12[3] = a9;
  void v12[4] = a10;
  llvm::SmallVector<llvm::Type *,5u>::SmallVector((uint64_t)&v13, v12, 5);
  llvm::FunctionType::get();
  uint64_t inserted = llvm::Module::getOrInsertFunction();
  if (v13 != v14) {
    free(v13);
  }
  return inserted;
}

void sub_255742298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

uint64_t llvm::SmallVector<llvm::Type *,5u>::SmallVector(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x500000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_255742304(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *>(void *a1, char **a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)a1, *a2, a2[1]);
  return a1;
}

void sub_255742368(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::CallInst::Create()
{
  uint64_t v0 = llvm::User::operator new((llvm::User *)0x50);
  llvm::Instruction::Instruction();
  *(void *)(v0 + 64) = 0;
  llvm::CallInst::init();
  return v0;
}

void sub_255742434(_Unwind_Exception *a1)
{
  llvm::Instruction::~Instruction(v1);
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t getOrInsertFunction<std::string &,llvm::Type *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  LODWORD(v7) = *(char *)(a2 + 23);
  BOOL v8 = (int)v7 < 0;
  uint64_t v9 = *(void *)(a2 + 8);
  if ((int)v7 < 0) {
    a2 = *(void *)a2;
  }
  uint64_t v7 = v7;
  if (v8) {
    uint64_t v7 = v9;
  }
  llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *>(a1, a2, v7, 0, *a3, *a4, *a5, *a6, *a7);
  uint64_t result = v10;
  if (*(unsigned char *)(v10 + 16) == 5) {
    return *(void *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF));
  }
  return result;
}

uint64_t llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v13[4] = *MEMORY[0x263EF8340];
  v11[0] = a6;
  v11[1] = a7;
  void v11[2] = a8;
  void v11[3] = a9;
  llvm::SmallVector<llvm::Type *,4u>::SmallVector((uint64_t)&v12, v11, 4);
  llvm::FunctionType::get();
  uint64_t inserted = llvm::Module::getOrInsertFunction();
  if (v12 != v13) {
    free(v12);
  }
  return inserted;
}

void sub_2557425C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t llvm::SmallVector<llvm::Type *,4u>::SmallVector(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x400000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_25574262C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVector<llvm::Type *,6u>::SmallVector<llvm::Type * const*,void>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)a1, a2, a3);
  return a1;
}

void sub_255742688(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMDBuilder::getMetadata(llvm::MDString **this, llvm::LLVMContext *a2, const char *a3)
{
  return llvm::MDString::get(*this, a2, a3);
}

uint64_t MTLMDBuilder::getMetadata()
{
  return llvm::MDString::get();
}

{
  uint64_t vars8;

  llvm::TypeSize::operator unsigned long long();
  return MTLMDBuilder::getMetadata<unsigned long long>();
}

void MTLBoundsCheck::SharedPassData::skipIndirectionDeep(MTLBoundsCheck::SharedPassData *this, llvm::Value *a2)
{
  v20[4] = *MEMORY[0x263EF8340];
  __int16 v13 = a2;
  int v18 = v20;
  uint64_t v19 = 0x400000000;
  llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v18, (uint64_t *)&v13);
  for (unsigned int i = v19; v19; unsigned int i = v19)
  {
    uint64_t v12 = 0;
    uint64_t v4 = *((void *)v18 + i - 1);
    LODWORD(v19) = i - 1;
    uint64_t v12 = v4;
    uint64_t v14 = 0;
    uint64_t v15 = v4;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::LookupBucketFor<llvm::CallInst *>((uint64_t *)this + 11, &v15, &v14) & 1) == 0)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 88, &v12, (uint64_t)&v15);
      uint64_t v5 = v12;
      unsigned int v6 = *(unsigned __int8 *)(v12 + 16);
      if (v12 && v6 >= 0x1C)
      {
        uint64_t v15 = **((void **)this + 14);
        int v16 = &v18;
        uint64_t v17 = 0;
        llvm::MDTuple::getImpl();
        llvm::Instruction::setMetadata();
        llvm::MDTuple::getImpl();
        llvm::Instruction::setMetadata();
        if (v16 != &v18) {
          free(v16);
        }
        uint64_t v5 = v12;
        unsigned int v6 = *(unsigned __int8 *)(v12 + 16);
      }
      if (v6 < 0x1C)
      {
        if (v6 != 3)
        {
          if (v6 != 5) {
            continue;
          }
          unsigned int v7 = *(unsigned __int16 *)(v5 + 18);
          BOOL v8 = v7 > 0x31;
          uint64_t v9 = (1 << v7) & 0x3800500000000;
          if (v8 || v9 == 0) {
            continue;
          }
        }
        goto LABEL_19;
      }
      unsigned int v11 = v6 - 60;
      if (v11 <= 0x11)
      {
        if (((1 << v11) & 0x38005) == 0)
        {
          if (v11 == 1)
          {
            uint64_t v15 = *(void *)(v5 - 32);
            llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v18, &v15);
          }
          continue;
        }
LABEL_19:
        llvm::SmallVectorImpl<llvm::Value *>::insert<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v18, (uint64_t)v18 + 8 * v19, *(void *)(v5 + 8), 0);
      }
    }
  }
  if (v18 != v20) {
    free(v18);
  }
}

void sub_255742960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  if (a16 != v16) {
    free(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertGetImageIDFunction(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t v4 = (llvm::Type **)*((void *)this + 14);
    uint64_t v10 = *v4;
    unsigned int v11 = &v13;
    uint64_t v12 = 0;
    llvm::Type::getInt64Ty(*v4, v2);
    uint64_t v5 = llvm::FunctionType::get();
    v14[0] = "mtl.get_image_id";
    __int16 v15 = 259;
    unsigned int v6 = (const llvm::Twine *)llvm::Function::Create(v5, 7, (uint64_t)v14, *((void *)this + 14));
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    unsigned int v7 = (llvm::BasicBlock *)**((void **)this + 14);
    __int16 v15 = 257;
    llvm::BasicBlock::Create(v7, (llvm::LLVMContext *)v14, v6, 0, v8);
  }
  return Function;
}

void sub_255742DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  v27[5] = v27[5] & 0xF8000000 | 1;
  llvm::User::operator delete(v27);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a27);
  if (a19 != v28) {
    free(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t llvm::GlobalValue::setVisibility(uint64_t this, char a2)
{
  uint64_t v2 = this;
  int v3 = *(_DWORD *)(this + 32) & 0xF;
  unsigned int v4 = *(_DWORD *)(this + 32) & 0xFFFFFFCF | (16 * (a2 & 3));
  *(_DWORD *)(this + 32) = v4;
  if ((v3 - 7) < 2) {
    goto LABEL_5;
  }
  if (16 * (a2 & 3))
  {
    this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this);
    if ((this & 1) == 0)
    {
      unsigned int v4 = *(_DWORD *)(v2 + 32);
LABEL_5:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return this;
}

uint64_t MTLMDBuilder::getMDTuple<char const*,llvm::GlobalVariable *,char const*,char const*>(llvm::MDString **a1, llvm::LLVMContext *a2, const char *a3, llvm::LLVMContext *a4, llvm::LLVMContext *a5)
{
  llvm::MDString::get(*a1, a2, a3);
  llvm::ValueAsMetadata::get();
  llvm::MDString::get(*a1, a4, v8);
  llvm::MDString::get(*a1, a5, v9);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(MTLBoundsCheck::SharedPassData *this)
{
  void v9[3] = *MEMORY[0x263EF8340];
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.draw_id_buffer", 0x12uLL);
    llvm::PointerType::get();
    uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    uint64_t v5 = (llvm::MDString *)**((void **)this + 14);
    unsigned int v6 = v8;
    uint64_t v7 = 0;
    v9[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(&v5, (llvm::LLVMContext *)"air.buffer", "air.location_index", 33, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"void", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.draw_id_buffer");
    v9[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    uint64_t v4 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 88, &v4, (uint64_t)v9);
    if (v6 != v8) {
      free(v6);
    }
  }
  return GlobalVariable;
}

void sub_255743124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a16 != v16) {
    free(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::IRBuilderBase::CreateConstGEP1_64(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unint64_t a4, const llvm::Twine *a5)
{
  llvm::Type::getInt64Ty(this[8], a2);
  unsigned int v11 = (uint64_t *)llvm::ConstantInt::get();
  uint64_t result = (*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, void))(*(void *)this[9] + 48))(this[9], a2, a3, &v11, 1, 0);
  if (!result)
  {
    uint64_t v10 = llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, &v11, 1);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v10, (uint64_t)a5);
  }
  return result;
}

uint64_t MTLBoundsCheck::SharedPassData::getGVBaseType(uint64_t a1, char *__s1, size_t __n)
{
  switch(__n)
  {
    case 0x11uLL:
      if (memcmp(__s1, "mtl.binding_table", __n)) {
        goto LABEL_28;
      }
      uint64_t Int64Ty = (llvm::ArrayType *)llvm::Type::getInt64Ty(**(llvm::Type ***)(a1 + 112), v6);
      return llvm::ArrayType::get(Int64Ty, (llvm::Type *)0x1F);
    case 0x12uLL:
      if (memcmp(__s1, "mtl.draw_id_buffer", __n)) {
        goto LABEL_28;
      }
      uint64_t v10 = **(llvm::Type ***)(a1 + 112);
      return llvm::Type::getInt64Ty(v10, v9);
    case 0x14uLL:
      unsigned int v11 = "mtl.threadgroup_base";
      goto LABEL_27;
    case 0x15uLL:
      if (memcmp(__s1, "mtl.threadgroup_table", __n)) {
        goto LABEL_28;
      }
      llvm::Type::getInt32Ty(**(llvm::Type ***)(a1 + 112), v12);
      uint64_t result = llvm::StructType::get();
      break;
    case 0x16uLL:
      if (!memcmp(__s1, "mtl.texture_type_table", __n)) {
        goto LABEL_23;
      }
      unsigned int v11 = "mtl.buffer_usage_table";
LABEL_27:
      if (!memcmp(__s1, v11, __n))
      {
LABEL_23:
        __int16 v15 = **(llvm::Type ***)(a1 + 112);
        uint64_t result = llvm::Type::getInt8Ty(v15, (llvm::LLVMContext *)__s1);
      }
      else
      {
LABEL_28:
        llvm::IntegerType::get();
        llvm::IntegerType::get();
        llvm::PointerType::get();
        uint64_t result = llvm::StructType::get();
      }
      break;
    case 0x17uLL:
      if (*(void *)__s1 != 0x747865742E6C746DLL
        || *((void *)__s1 + 1) != 0x676173755F657275
        || *(void *)(__s1 + 15) != 0x656C6261745F6567)
      {
        goto LABEL_28;
      }
      goto LABEL_23;
    case 0x1AuLL:
      unsigned int v11 = "mtl.global_constants_table";
      goto LABEL_27;
    default:
      goto LABEL_28;
  }
  return result;
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertBufferUsageTableGV(MTLBoundsCheck::SharedPassData *this)
{
  void v9[3] = *MEMORY[0x263EF8340];
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.buffer_usage_table", 0x16uLL);
    llvm::PointerType::get();
    uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    uint64_t v5 = (llvm::MDString *)**((void **)this + 14);
    unsigned int v6 = v8;
    uint64_t v7 = 0;
    v9[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(&v5, (llvm::LLVMContext *)"air.buffer", "air.location_index", 35, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"void", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.buffer_usage_table");
    v9[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    uint64_t v4 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 88, &v4, (uint64_t)v9);
    if (v6 != v8) {
      free(v6);
    }
  }
  return GlobalVariable;
}

void sub_2557436D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a16 != v16) {
    free(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(llvm::MDString **a1, llvm::LLVMContext *a2, char *a3, uint64_t a4, uint64_t a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7, uint64_t a8, llvm::LLVMContext *a9, llvm::LLVMContext *a10, llvm::LLVMContext *a11, llvm::LLVMContext *a12)
{
  llvm::MDString::get(*a1, a2, a3);
  llvm::MDString::get(*a1, (llvm::LLVMContext *)a3, v16);
  MTLMDBuilder::getMetadata<unsigned int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a6, v17);
  llvm::MDString::get(*a1, a7, v18);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a9, v19);
  llvm::MDString::get(*a1, a10, v20);
  llvm::MDString::get(*a1, a11, v21);
  llvm::MDString::get(*a1, a12, v22);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertTextureUsageTableGV(MTLBoundsCheck::SharedPassData *this)
{
  void v9[3] = *MEMORY[0x263EF8340];
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.texture_usage_table", 0x17uLL);
    llvm::PointerType::get();
    uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    uint64_t v5 = (llvm::MDString *)**((void **)this + 14);
    unsigned int v6 = v8;
    uint64_t v7 = 0;
    v9[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(&v5, (llvm::LLVMContext *)"air.buffer", "air.location_index", 36, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"void", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.texture_usage_table");
    v9[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    uint64_t v4 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 88, &v4, (uint64_t)v9);
    if (v6 != v8) {
      free(v6);
    }
  }
  return GlobalVariable;
}

void sub_255743A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a16 != v16) {
    free(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertTextureTypeTableGV(MTLBoundsCheck::SharedPassData *this)
{
  void v9[3] = *MEMORY[0x263EF8340];
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.texture_type_table", 0x16uLL);
    llvm::PointerType::get();
    uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    uint64_t v5 = (llvm::MDString *)**((void **)this + 14);
    unsigned int v6 = v8;
    uint64_t v7 = 0;
    v9[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(&v5, (llvm::LLVMContext *)"air.buffer", "air.location_index", 37, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"void", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.texture_type_table");
    v9[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    uint64_t v4 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 88, &v4, (uint64_t)v9);
    if (v6 != v8) {
      free(v6);
    }
  }
  return GlobalVariable;
}

void sub_255743C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a16 != v16) {
    free(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsTableGV(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    int v3 = (llvm::Module *)*((void *)this + 14);
    uint64_t v13 = *(llvm::MDString **)v3;
    uint64_t v14 = v16;
    uint64_t v15 = 0;
    DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(v3);
    llvm::DataLayout::DataLayout((llvm::DataLayout *)v19, DataLayout);
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.global_constants_table", 0x1AuLL);
    unsigned int v6 = (llvm::Type *)llvm::PointerType::get();
    if ((*(unsigned char *)(*((void *)this + 9) + 23) & 0x40) != 0
      && MTLBoundsCheck::isLibraryModule(*((MTLBoundsCheck **)this + 14), v5))
    {
      uint64_t GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
      llvm::UndefValue::get();
      v17[0] = "mtl.global_constants_table";
      __int16 v18 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setAlignment();
      llvm::GlobalValue::setVisibility(GlobalVariable, 1);
      llvm::Module::getOrInsertNamedMetadata();
      MTLMDBuilder::getMDTuple<char const*,llvm::GlobalVariable *,char const*,char const*>(&v13, (llvm::LLVMContext *)"air.externally_initialized", (const char *)GlobalVariable, (llvm::LLVMContext *)"device uint64_t *", (llvm::LLVMContext *)"mtl.global_constants_table");
      llvm::NamedMDNode::addOperand();
    }
    else
    {
      uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
      llvm::UndefValue::get();
      llvm::GlobalVariable::setInitializer();
      llvm::GlobalObject::setAlignment();
      *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
      unint64_t TypeSizeInBits = llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)v19, v6);
      int v9 = v8;
      uint64_t PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment((llvm::DataLayout *)v19, v6);
      v17[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(&v13, (llvm::LLVMContext *)"air.buffer", "air.location_index", 42, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.arg_type_size", (TypeSizeInBits + 7) >> 3, v9 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.global_constants_table");
      v17[1] = llvm::MDString::get();
      llvm::MDTuple::getImpl();
      llvm::Value::setMetadata();
    }
    uint64_t v12 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 88, &v12, (uint64_t)v17);
    MEMORY[0x25A28CD60](v19);
    if (v14 != v16) {
      free(v14);
    }
  }
  return GlobalVariable;
}

void sub_255743F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  v28[5] = v28[5] & 0xF8000000 | 1;
  llvm::User::operator delete(v28);
  MEMORY[0x25A28CD60](&a28);
  if (a20 != v29) {
    free(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(llvm::MDString **a1, llvm::LLVMContext *a2, char *a3, uint64_t a4, uint64_t a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7, uint64_t a8, llvm::LLVMContext *a9, uint64_t a10, uint64_t a11, llvm::LLVMContext *a12, uint64_t a13, llvm::LLVMContext *a14, llvm::LLVMContext *a15, llvm::LLVMContext *a16, llvm::LLVMContext *a17)
{
  llvm::MDString::get(*a1, a2, a3);
  llvm::MDString::get(*a1, (llvm::LLVMContext *)a3, v21);
  MTLMDBuilder::getMetadata<unsigned int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a6, v22);
  llvm::MDString::get(*a1, a7, v23);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a9, v24);
  llvm::TypeSize::operator unsigned long long();
  MTLMDBuilder::getMetadata<unsigned long long>();
  llvm::MDString::get(*a1, a12, v25);
  MTLMDBuilder::getMetadata<unsigned long long>();
  llvm::MDString::get(*a1, a14, v26);
  llvm::MDString::get(*a1, a15, v27);
  llvm::MDString::get(*a1, a16, v28);
  llvm::MDString::get(*a1, a17, v29);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsHandleGV(llvm::Module **this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    int v3 = (llvm::Constant *)llvm::IntegerType::get();
    DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(this[14]);
    llvm::DataLayout::DataLayout((llvm::DataLayout *)v18, DataLayout);
    unsigned int v6 = this[14];
    uint64_t v13 = *(llvm::MDString **)v6;
    uint64_t v14 = v16;
    uint64_t v15 = 0;
    if ((*((unsigned char *)this[9] + 23) & 0x40) != 0 && MTLBoundsCheck::isLibraryModule(v6, v5))
    {
      uint64_t GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
      llvm::Constant::getNullValue(v3, v7);
      v16[0] = "mtl.global_constants_handle";
      __int16 v17 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setAlignment();
      llvm::GlobalValue::setVisibility(GlobalVariable, 1);
      llvm::Module::getOrInsertNamedMetadata();
      MTLMDBuilder::getMDTuple<char const*,llvm::GlobalVariable *,char const*,char const*>(&v13, (llvm::LLVMContext *)"air.externally_initialized", (const char *)GlobalVariable, (llvm::LLVMContext *)"uint64_t", (llvm::LLVMContext *)"mtl.global_constants_handle");
      llvm::NamedMDNode::addOperand();
    }
    else
    {
      uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
      llvm::UndefValue::get();
      llvm::GlobalVariable::setInitializer();
      llvm::GlobalObject::setAlignment();
      *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
      unint64_t TypeSizeInBits = llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)v18, v3);
      int v10 = v9;
      uint64_t PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment((llvm::DataLayout *)v18, v3);
      v16[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(&v13, (llvm::LLVMContext *)"air.buffer", "air.location_index", 42, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 1, (llvm::LLVMContext *)"air.arg_type_size", (TypeSizeInBits + 7) >> 3, v10 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"long", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.global_constants_table");
      v16[1] = llvm::MDString::get();
      llvm::MDTuple::getImpl();
      llvm::Value::setMetadata();
    }
    if (v14 != v16) {
      free(v14);
    }
    MEMORY[0x25A28CD60](v18);
  }
  return GlobalVariable;
}

void sub_2557444B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  v26[5] = v26[5] & 0xF8000000 | 1;
  llvm::User::operator delete(v26);
  if (a19 != v27) {
    free(a19);
  }
  MEMORY[0x25A28CD60](&a26);
  _Unwind_Resume(a1);
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertDeviceIndirectionTableGV(MTLBoundsCheck::SharedPassData *this)
{
  v20[3] = *MEMORY[0x263EF8340];
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.device_indirection_table", 0x1CuLL);
    llvm::PointerType::get();
    uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    uint64_t v16 = (llvm::MDString *)**((void **)this + 14);
    __int16 v17 = v19;
    uint64_t v18 = 0;
    LODWORD(v5) = 1;
    uint64_t v15 = MTLMDBuilder::getMDTuple<int,char const*,char const*,int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(&v16, 0, (llvm::LLVMContext *)"air.buffer", (llvm::LLVMContext *)"air.location_index", 0, 1, (llvm::LLVMContext *)"air.read_write", (llvm::LLVMContext *)"air.address_space", v5, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"void", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.ptr");
    int v14 = 0;
    uint64_t v10 = **((void **)this + 14);
    unsigned int v11 = v13;
    uint64_t v12 = 0;
    LODWORD(v20[0]) = 8;
    LODWORD(v9) = 0;
    MTLMDBuilder::emplace_back<unsigned int &,unsigned int,int,char const(&)[5],char const(&)[10],char const(&)[22],llvm::MDTuple *&>((uint64_t)&v10, (uint64_t)&v14, (uint64_t)v20, (uint64_t)&v9, (llvm::LLVMContext *)"void", (llvm::LLVMContext *)"debug.ptr", (llvm::LLVMContext *)"air.indirect_argument", &v15);
    v14 += 8;
    uint64_t v9 = MTLMDBuilder::getMDTuple<int,char const*,char const*,int,int,char const*,char const*,char const*,char const*,char const*>(&v16, 1, (llvm::LLVMContext *)"air.indirect_constant", (llvm::LLVMContext *)"air.location_index", 1, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.length");
    LODWORD(v20[0]) = v14 + 4;
    LODWORD(v8) = 0;
    MTLMDBuilder::emplace_back<unsigned int &,unsigned int,int,char const(&)[5],char const(&)[10],char const(&)[22],llvm::MDTuple *&>((uint64_t)&v10, (uint64_t)&v14, (uint64_t)v20, (uint64_t)&v8, (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"debug.length", (llvm::LLVMContext *)"air.indirect_argument", &v9);
    v14 += 4;
    uint64_t Impl = llvm::MDTuple::getImpl();
    LODWORD(v7) = 8;
    LODWORD(v6) = v14;
    v20[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::MDTuple *,char const*,unsigned int,char const*,int,char const*,char const*,char const*,char const*>(&v16, (llvm::LLVMContext *)"air.indirect_buffer", "air.location_index", 51, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.struct_type_info", Impl, (llvm::LLVMContext *)"air.arg_type_size", v6, (llvm::LLVMContext *)"air.arg_type_align_size", v7, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.device_indirection_table");
    v20[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    uint64_t v8 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 88, &v8, (uint64_t)v20);
    if (v11 != v13) {
      free(v11);
    }
    if (v17 != v19) {
      free(v17);
    }
  }
  return GlobalVariable;
}

void sub_2557448A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a23 != v24) {
    free(a23);
  }
  BOOL v27 = *(void **)(v25 - 120);
  if (v27 != v23) {
    free(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMDBuilder::getMDTuple<int,char const*,char const*,int,int,char const*,char const*,int,char const*,char const*,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, uint64_t a5, uint64_t a6, llvm::LLVMContext *a7, llvm::LLVMContext *a8, uint64_t a9, llvm::LLVMContext *a10, llvm::LLVMContext *a11, llvm::LLVMContext *a12, llvm::LLVMContext *a13)
{
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a3, v18);
  llvm::MDString::get(*a1, a4, v19);
  MTLMDBuilder::getMetadata<int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a7, v20);
  llvm::MDString::get(*a1, a8, v21);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a10, v22);
  llvm::MDString::get(*a1, a11, v23);
  llvm::MDString::get(*a1, a12, v24);
  llvm::MDString::get(*a1, a13, v25);
  return llvm::MDTuple::getImpl();
}

unsigned int *MTLMDBuilder::emplace_back<unsigned int &,unsigned int,int,char const(&)[5],char const(&)[10],char const(&)[22],llvm::MDTuple *&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::LLVMContext *a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7, uint64_t *a8)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  v19[0] = MTLMDBuilder::getMetadata<unsigned int>();
  v19[1] = MTLMDBuilder::getMetadata<unsigned int>();
  void v19[2] = MTLMDBuilder::getMetadata<int>();
  v19[3] = llvm::MDString::get(*(llvm::MDString **)a1, a5, v13);
  v19[4] = llvm::MDString::get(*(llvm::MDString **)a1, a6, v14);
  uint64_t v16 = llvm::MDString::get(*(llvm::MDString **)a1, a7, v15);
  uint64_t v17 = *a8;
  v19[5] = v16;
  v19[6] = v17;
  return llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)(a1 + 8), v19, &v20);
}

uint64_t MTLMDBuilder::getMDTuple<int,char const*,char const*,int,int,char const*,char const*,char const*,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, uint64_t a5, uint64_t a6, llvm::LLVMContext *a7, llvm::LLVMContext *a8, llvm::LLVMContext *a9, llvm::LLVMContext *a10, llvm::LLVMContext *a11)
{
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a3, v16);
  llvm::MDString::get(*a1, a4, v17);
  MTLMDBuilder::getMetadata<int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a7, v18);
  llvm::MDString::get(*a1, a8, v19);
  llvm::MDString::get(*a1, a9, v20);
  llvm::MDString::get(*a1, a10, v21);
  llvm::MDString::get(*a1, a11, v22);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::MDTuple *,char const*,unsigned int,char const*,int,char const*,char const*,char const*,char const*>(llvm::MDString **a1, llvm::LLVMContext *a2, char *a3, uint64_t a4, uint64_t a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7, uint64_t a8, llvm::LLVMContext *a9, uint64_t a10, llvm::LLVMContext *a11, uint64_t a12, llvm::LLVMContext *a13, uint64_t a14, llvm::LLVMContext *a15, llvm::LLVMContext *a16, llvm::LLVMContext *a17, llvm::LLVMContext *a18)
{
  llvm::MDString::get(*a1, a2, a3);
  llvm::MDString::get(*a1, (llvm::LLVMContext *)a3, v22);
  MTLMDBuilder::getMetadata<unsigned int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a6, v23);
  llvm::MDString::get(*a1, a7, v24);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a9, v25);
  llvm::MDString::get(*a1, a11, v26);
  MTLMDBuilder::getMetadata<unsigned int>();
  llvm::MDString::get(*a1, a13, v27);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a15, v28);
  llvm::MDString::get(*a1, a16, v29);
  llvm::MDString::get(*a1, a17, v30);
  llvm::MDString::get(*a1, a18, v31);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertAccelerationStructurePtrGV(llvm::Type ***this)
{
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    llvm::Type::getInt64Ty(*this[14], v2);
    llvm::PointerType::get();
    uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    uint64_t v5 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(this + 11), &v5, (uint64_t)v6);
  }
  return GlobalVariable;
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertBindingTableGV(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.binding_table", 0x11uLL);
    llvm::PointerType::get();
    uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    uint64_t v4 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)this + 88, &v4, (uint64_t)v5);
  }
  return GlobalVariable;
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertStackDepthGV(llvm::Type ***this)
{
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    llvm::Type::getInt32Ty(*this[14], v2);
    uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    uint64_t v5 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(this + 11), &v5, (uint64_t)v6);
  }
  return GlobalVariable;
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV(llvm::Type ***this)
{
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    llvm::Type::getInt8PtrTy(*this[14], 0);
    uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    uint64_t v4 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(this + 11), &v4, (uint64_t)v5);
  }
  return GlobalVariable;
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV(llvm::Type ***this)
{
  v17[3] = *MEMORY[0x263EF8340];
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    llvm::Type::getInt64Ty(*this[14], v2);
    uint64_t v4 = (llvm::Type *)llvm::PointerType::get();
    uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    uint64_t v5 = (llvm::Module *)this[14];
    uint64_t v13 = *(llvm::MDString **)v5;
    int v14 = v16;
    uint64_t v15 = 0;
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(v5);
    unint64_t TypeSizeInBits = llvm::DataLayout::getTypeSizeInBits(DataLayout, v4);
    int v9 = v8;
    uint64_t PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(DataLayout, v4);
    v17[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(&v13, (llvm::LLVMContext *)"air.buffer", "air.location_index", 32, 1, (llvm::LLVMContext *)"air.read_write", (llvm::LLVMContext *)"air.address_space", 1, (llvm::LLVMContext *)"air.arg_type_size", (TypeSizeInBits + 7) >> 3, v9 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.report_buffer");
    v17[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    uint64_t v12 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(this + 11), &v12, (uint64_t)v17);
    if (v14 != v16) {
      free(v14);
    }
  }
  return GlobalVariable;
}

void sub_2557453E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20 != v20) {
    free(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupTableGV(llvm::Module **this)
{
  v15[3] = *MEMORY[0x263EF8340];
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.threadgroup_table", 0x15uLL);
    llvm::PointerType::get();
    uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::PointerType::get();
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(this[14]);
    unsigned int v11 = *(llvm::MDString **)this[14];
    uint64_t v12 = v14;
    uint64_t v13 = 0;
    unint64_t TypeSizeInBits = llvm::DataLayout::getTypeSizeInBits(DataLayout, GVBaseType);
    int v7 = v6;
    uint64_t PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(DataLayout, GVBaseType);
    v15[0] = MTLMDBuilder::getMDTuple<char const*,char const*,unsigned int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(&v11, (llvm::LLVMContext *)"air.buffer", "air.location_index", 34, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", 2, (llvm::LLVMContext *)"air.arg_type_size", (TypeSizeInBits + 7) >> 3, v7 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.threadgroup_table");
    v15[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    uint64_t v10 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(this + 11), &v10, (uint64_t)v15);
    if (v12 != v14) {
      free(v12);
    }
  }
  return GlobalVariable;
}

void sub_255745650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20 != v20) {
    free(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupBasePointerGV(llvm::Module **this)
{
  v15[3] = *MEMORY[0x263EF8340];
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType((uint64_t)this, "mtl.threadgroup_base", 0x14uLL);
    llvm::PointerType::get();
    uint64_t GlobalVariable = llvm::Module::getOrInsertGlobal();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFA3C0 | 0x4408;
    llvm::PointerType::get();
    llvm::UndefValue::get();
    llvm::GlobalVariable::setInitializer();
    DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(this[14]);
    unsigned int v11 = *(llvm::MDString **)this[14];
    uint64_t v12 = v14;
    uint64_t v13 = 0;
    unint64_t TypeSizeInBits = llvm::DataLayout::getTypeSizeInBits(DataLayout, GVBaseType);
    int v7 = v6;
    uint64_t PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(DataLayout, GVBaseType);
    v15[0] = MTLMDBuilder::getMDTuple<char const*,char const*,int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(&v11, (llvm::LLVMContext *)"air.buffer", "air.location_index", 0, 1, (llvm::LLVMContext *)"air.read_write", (llvm::LLVMContext *)"air.address_space", 3, (llvm::LLVMContext *)"air.arg_type_size", (TypeSizeInBits + 7) >> 3, v7 == 1, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (llvm::LLVMContext *)"int", (llvm::LLVMContext *)"air.arg_name", (llvm::LLVMContext *)"debug.threadgroup_base");
    v15[1] = llvm::MDString::get();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    uint64_t v10 = GlobalVariable;
    llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(this + 11), &v10, (uint64_t)v15);
    if (v12 != v14) {
      free(v12);
    }
  }
  return GlobalVariable;
}

void sub_2557458B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20 != v20) {
    free(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMDBuilder::getMDTuple<char const*,char const*,int,int,char const*,char const*,int,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,char const*,char const*,char const*>(llvm::MDString **a1, llvm::LLVMContext *a2, char *a3, uint64_t a4, uint64_t a5, llvm::LLVMContext *a6, llvm::LLVMContext *a7, uint64_t a8, llvm::LLVMContext *a9, uint64_t a10, uint64_t a11, llvm::LLVMContext *a12, uint64_t a13, llvm::LLVMContext *a14, llvm::LLVMContext *a15, llvm::LLVMContext *a16, llvm::LLVMContext *a17)
{
  llvm::MDString::get(*a1, a2, a3);
  llvm::MDString::get(*a1, (llvm::LLVMContext *)a3, v21);
  MTLMDBuilder::getMetadata<int>();
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a6, v22);
  llvm::MDString::get(*a1, a7, v23);
  MTLMDBuilder::getMetadata<int>();
  llvm::MDString::get(*a1, a9, v24);
  llvm::TypeSize::operator unsigned long long();
  MTLMDBuilder::getMetadata<unsigned long long>();
  llvm::MDString::get(*a1, a12, v25);
  MTLMDBuilder::getMetadata<unsigned long long>();
  llvm::MDString::get(*a1, a14, v26);
  llvm::MDString::get(*a1, a15, v27);
  llvm::MDString::get(*a1, a16, v28);
  llvm::MDString::get(*a1, a17, v29);
  return llvm::MDTuple::getImpl();
}

uint64_t MTLBoundsCheck::SharedPassData::runOnModule(MTLBoundsCheck::SharedPassData *this, llvm::Module *a2)
{
  *((void *)this + 14) = a2;
  MTLBoundsCheck::SharedPassData::clear(this);
  int v7 = "asan_data";
  __int16 v8 = 259;
  NamedMetachar data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)&v7);
  if (NamedMetadata)
  {
    uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    MTLBoundsCheck::SerializedData::fromMetaData(*((void *)this + 8), Operand);
  }
  MTLBoundsCheck::SharedPassData::earlyFragmentTests(this);
  return 1;
}

uint64_t MTLBoundsCheck::SharedPassData::clear(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t v2 = *((void *)this + 8);
  llvm::SmallVectorImpl<std::string>::clear((uint64_t *)v2);
  *(_DWORD *)(v2 + 120) = 0;
  *(_DWORD *)(v2 + 392) = 0;
  *(_DWORD *)(v2 + 600) = 0;
  *(void *)(v2 + 616) = 0;
  *(_OWORD *)(v2 + 632) = 0u;
  *(_DWORD *)(v2 + 648) = 0;
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::clear((unsigned int *)this + 30);
  std::__hash_table<std::__hash_value_type<llvm::DILocation *,unsigned int>,std::__unordered_map_hasher<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::hash<llvm::DILocation *>,std::equal_to<llvm::DILocation *>,true>,std::__unordered_map_equal<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::equal_to<llvm::DILocation *>,std::hash<llvm::DILocation *>,true>,std::allocator<std::__hash_value_type<llvm::DILocation *,unsigned int>>>::clear((void *)this + 19);
  std::__hash_table<std::__hash_value_type<llvm::DILocation *,unsigned int>,std::__unordered_map_hasher<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::hash<llvm::DILocation *>,std::equal_to<llvm::DILocation *>,true>,std::__unordered_map_equal<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::equal_to<llvm::DILocation *>,std::hash<llvm::DILocation *>,true>,std::allocator<std::__hash_value_type<llvm::DILocation *,unsigned int>>>::clear((void *)this + 24);
  return llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::clear((uint64_t)this + 88);
}

void MTLBoundsCheck::SharedPassData::earlyFragmentTests(MTLBoundsCheck::SharedPassData *this)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*((void *)this + 9) + 20) & 2) != 0)
  {
    uint64_t v2 = (unsigned char *)*((void *)this + 5);
    if (v2)
    {
      if (!*v2)
      {
        MTLBoundsCheck::getMetalMetadata(*((MTLBoundsCheck **)this + 14), (uint64_t)&v46);
        if (v46 == 1)
        {
          uint64_t v45 = v47;
          uint64_t v3 = *(void *)(v47 - 8 * *(unsigned int *)(v47 + 8) + 8);
          uint64_t v4 = *(unsigned int *)(v3 + 8);
          if (v4)
          {
            char v5 = 0;
            char v6 = 0;
            int v7 = 0;
            uint64_t v8 = -8 * v4;
            while (1)
            {
              uint64_t String = (unsigned char *)llvm::MDString::getString(*(llvm::MDString **)(*(void *)(v3 + v8)
                                                                             - 8
                                                                             * *(unsigned int *)(*(void *)(v3 + v8)
                                                                                               + 8)));
              if (v10 == 15) {
                break;
              }
              if (v10 == 11)
              {
                if (!memcmp(String, "air.stencil", 0xBuLL))
                {
                  char v6 = 1;
                  goto LABEL_20;
                }
LABEL_18:
                BOOL v12 = 0;
LABEL_19:
                v7 |= v12;
                goto LABEL_20;
              }
              if (v10 != 9) {
                goto LABEL_18;
              }
              if (*(void *)String != 0x747065642E726961 || String[8] != 104) {
                goto LABEL_18;
              }
              char v5 = 1;
LABEL_20:
              v8 += 8;
              if (!v8) {
                goto LABEL_24;
              }
            }
            BOOL v12 = memcmp(String, "air.sample_mask", 0xFuLL) == 0;
            goto LABEL_19;
          }
          int v7 = 0;
          char v6 = 0;
          char v5 = 0;
LABEL_24:
          if ((v5 & 1) == 0 && (v6 & 1) == 0)
          {
            uint64_t v13 = *((void *)this + 14);
            uint64_t v14 = v13 + 24;
            uint64_t v15 = *(void *)(v13 + 32);
            if (v15 != v13 + 24)
            {
              int v16 = 0;
              while (1)
              {
                uint64_t v17 = v15 - 56;
                if (!v15) {
                  uint64_t v17 = 0;
                }
                uint64_t v18 = v17 + 72;
                for (uint64_t i = *(void *)(v17 + 80); i != v18; uint64_t i = *(void *)(i + 8))
                {
                  uint64_t v20 = i - 24;
                  if (!i) {
                    uint64_t v20 = 0;
                  }
                  uint64_t v21 = *(void *)(v20 + 48);
                  if (v21 != v20 + 40)
                  {
                    while (1)
                    {
LABEL_89:
                      if (i == v18) {
                        goto LABEL_108;
                      }
                      uint64_t v37 = v21 ? v21 - 24 : 0;
                      int v38 = *(unsigned __int8 *)(v37 + 16);
                      if (v38 == 61) {
                        break;
                      }
                      if (v38 == 84)
                      {
                        uint64_t v39 = *(void *)(v37 - 32);
                        if (v39)
                        {
                          if (!*(unsigned char *)(v39 + 16) && *(void *)(v39 + 24) == *(void *)(v37 + 72))
                          {
                            *(void *)&long long v48 = llvm::Value::getName((llvm::Value *)v39);
                            *((void *)&v48 + 1) = v40;
                            if (llvm::compat::getNumArgOperands((llvm::CallBase *)v37)) {
                              BOOL v24 = *(unsigned char *)(**(void **)(v37 - 32 * (*(_DWORD *)(v37 + 20) & 0x7FFFFFF)) + 8) == 15;
                            }
                            else {
                              BOOL v24 = 0;
                            }
                            unint64_t v25 = *((void *)&v48 + 1);
                            if (*((void *)&v48 + 1) >= 0xAuLL)
                            {
                              if (*(void *)v48 != 0x6D6F74612E726961 || *(_WORD *)(v48 + 8) != 25449) {
                                goto LABEL_52;
                              }
                              if (llvm::StringRef::find() != -1 || !v24)
                              {
                                unint64_t v25 = *((void *)&v48 + 1);
                                goto LABEL_46;
                              }
                              goto LABEL_76;
                            }
LABEL_46:
                            if (v25 < 9)
                            {
LABEL_70:
                              uint64_t v31 = 0;
                              goto LABEL_102;
                            }
LABEL_52:
                            if (*(void *)v48 == 0x726F74732E726961 && *(unsigned char *)(v48 + 8) == 101)
                            {
                              BOOL v32 = *(uint64_t **)(v37 - 32 * (*(_DWORD *)(v37 + 20) & 0x7FFFFFF) + 32);
                            }
                            else
                            {
                              if (v25 < 0xB
                                || (*(void *)v48 == 0x6D656D2E6D766C6CLL
                                  ? (BOOL v28 = *(void *)(v48 + 3) == 0x7970636D656D2E6DLL)
                                  : (BOOL v28 = 0),
                                    !v28
                                 && (*(void *)v48 == 0x6D656D2E6D766C6CLL
                                   ? (BOOL v29 = *(void *)(v48 + 3) == 0x7465736D656D2E6DLL)
                                   : (BOOL v29 = 0),
                                     !v29)))
                              {
                                if (*(void *)v48 != 0x746972772E726961 || *(unsigned char *)(v48 + 8) != 101)
                                {
                                  if (v25 < 0x14) {
                                    goto LABEL_70;
                                  }
                                  unint64_t v34 = 0x6169722E64697363;
                                  unint64_t v35 = bswap64(*(void *)v48);
                                  if (v35 == 0x6169722E64697363)
                                  {
                                    unint64_t v34 = 0x6172645F66726167;
                                    unint64_t v35 = bswap64(*(void *)(v48 + 8));
                                    if (v35 == 0x6172645F66726167)
                                    {
                                      unint64_t v35 = bswap32(*(_DWORD *)(v48 + 16));
                                      if (v35 == 1835363956)
                                      {
                                        int v36 = 0;
                                        goto LABEL_87;
                                      }
                                      unint64_t v34 = 1835363956;
                                    }
                                  }
                                  if (v35 < v34) {
                                    int v36 = -1;
                                  }
                                  else {
                                    int v36 = 1;
                                  }
LABEL_87:
                                  uint64_t v31 = 0;
                                  if (!v36) {
                                    int v16 = 1;
                                  }
                                  goto LABEL_102;
                                }
                                uint64_t v31 = 0;
                                int v16 = 1;
LABEL_102:
                                if (v31)
                                {
                                  int v41 = *(_DWORD *)(v31 + 8);
                                  if ((v41 & 0xFE) == 0x12) {
                                    int v41 = *(_DWORD *)(**(void **)(v31 + 16) + 8);
                                  }
                                  if ((v41 & 0xFFFFFF00) == 0x100) {
                                    int v16 = 1;
                                  }
                                }
                                goto LABEL_107;
                              }
LABEL_76:
                              BOOL v32 = *(uint64_t **)(v37 - 32 * (*(_DWORD *)(v37 + 20) & 0x7FFFFFF));
                            }
LABEL_101:
                            uint64_t v31 = *v32;
                            goto LABEL_102;
                          }
                        }
                      }
LABEL_107:
                      if (v16) {
                        goto LABEL_108;
                      }
                      uint64_t v21 = *(void *)(v21 + 8);
                      uint64_t v22 = i - 24;
                      if (!i) {
                        uint64_t v22 = 0;
                      }
                      if (v21 == v22 + 40)
                      {
                        while (1)
                        {
                          uint64_t i = *(void *)(i + 8);
                          if (i == v18) {
                            goto LABEL_108;
                          }
                          uint64_t v23 = i - 24;
                          if (!i) {
                            uint64_t v23 = 0;
                          }
                          uint64_t v21 = *(void *)(v23 + 48);
                          if (v21 != v23 + 40) {
                            goto LABEL_89;
                          }
                        }
                      }
                    }
                    BOOL v32 = *(uint64_t **)(v37 - 32);
                    goto LABEL_101;
                  }
                }
LABEL_108:
                if ((v16 & 1) == 0)
                {
                  uint64_t v15 = *(void *)(v15 + 8);
                  if (v15 != v14) {
                    continue;
                  }
                }
                goto LABEL_112;
              }
            }
            int v16 = 0;
LABEL_112:
            if (((v7 | v16) & 1) == 0)
            {
              size_t v42 = (long long *)(v45 - 8 * *(unsigned int *)(v45 + 8));
              uint64_t v43 = *((void *)v42 + 2);
              long long v48 = *v42;
              uint64_t v49 = v43;
              uint64_t v50 = llvm::MDString::get();
              llvm::MDTuple::getImpl();
              BOOL v44 = (llvm::Module *)*((void *)this + 14);
              *(void *)&long long v48 = "air.fragment";
              __int16 v51 = 259;
              llvm::Module::getNamedMetadata(v44, (const llvm::Twine *)&v48);
              llvm::NamedMDNode::setOperand();
            }
          }
        }
      }
    }
  }
}

void sub_255746148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

uint64_t MTLBoundsCheck::SharedPassData::indexForString(uint64_t a1, const void *a2, size_t a3)
{
  v10[0] = a2;
  v10[1] = a3;
  char v6 = (llvm::StringMapImpl *)(a1 + 120);
  int Key = llvm::StringMapImpl::FindKey();
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 128)) {
    return *(unsigned int *)(*(void *)(*(void *)(a1 + 120) + 8 * Key) + 8);
  }
  unsigned int v9 = *(_DWORD *)(*(void *)(a1 + 64) + 8);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int &>(v6, a2, a3, &v9);
  llvm::SmallVectorImpl<std::string>::emplace_back<llvm::StringRef>(*(void *)(a1 + 64), (uint64_t)v10);
  return v9;
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int &>(llvm::StringMapImpl *a1, const void *a2, size_t a3, _DWORD *a4)
{
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v9 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    while (!v9 || v9 == -8)
    {
      uint64_t v10 = i[1];
      ++i;
      uint64_t v9 = v10;
    }
    return i;
  }
  uint64_t v11 = MEMORY[0x25A28D370](a3 + 17, 8);
  uint64_t v12 = v11;
  uint64_t v13 = v11 + 16;
  if (a3) {
    memcpy((void *)(v11 + 16), a2, a3);
  }
  *(unsigned char *)(v13 + a3) = 0;
  *(void *)uint64_t v12 = a3;
  *(_DWORD *)(v12 + 8) = *a4;
  uint64_t *i = v12;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t MTLBoundsCheck::SharedPassData::indexForDISubProgram(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  BOOL v24 = a2;
  uint64_t v3 = a1 + 192;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::find<llvm::DISubprogram *>((void *)(a1 + 192), &v24);
  if (!v4)
  {
    char v5 = *(llvm::MDString **)&v24[-8 * *((unsigned int *)v24 + 2) + 16];
    if (v5)
    {
      uint64_t String = (const void *)llvm::MDString::getString(v5);
      size_t v8 = v7;
    }
    else
    {
      uint64_t String = 0;
      size_t v8 = 0;
    }
    v23[1] = MTLBoundsCheck::SharedPassData::indexForString(a1, String, v8);
    uint64_t v9 = v24;
    if (*v24 == 15 || (uint64_t v9 = *(unsigned __int8 **)&v24[-8 * *((unsigned int *)v24 + 2)]) != 0)
    {
      uint64_t v10 = *(llvm::MDString **)&v9[-8 * *((unsigned int *)v9 + 2)];
      if (v10) {
        uint64_t v10 = (llvm::MDString *)llvm::MDString::getString(v10);
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v10 = (llvm::MDString *)&unk_2557AB8A6;
    }
    v27[4] = 261;
    unint64_t v25 = v10;
    *(void *)&long long v26 = v11;
    if (llvm::sys::path::is_absolute())
    {
      uint64_t v12 = v24;
      if (*v24 == 15 || (uint64_t v12 = *(unsigned __int8 **)&v24[-8 * *((unsigned int *)v24 + 2)]) != 0)
      {
        uint64_t v13 = *(llvm::MDString **)&v12[-8 * *((unsigned int *)v12 + 2)];
        if (v13)
        {
          uint64_t v14 = (const void *)llvm::MDString::getString(v13);
          size_t v16 = v15;
        }
        else
        {
          size_t v16 = 0;
          uint64_t v14 = 0;
        }
      }
      else
      {
        size_t v16 = 0;
        uint64_t v14 = &unk_2557AB8A6;
      }
      v23[0] = MTLBoundsCheck::SharedPassData::indexForString(a1, v14, v16);
    }
    else
    {
      unint64_t v25 = v27;
      long long v26 = xmmword_2557AA0D0;
      uint64_t v17 = v24;
      int v18 = *v24;
      uint64_t v19 = v24;
      if (v18 == 15 || (uint64_t v19 = *(unsigned __int8 **)&v24[-8 * *((unsigned int *)v24 + 2)]) != 0)
      {
        uint64_t v20 = *(llvm::MDString **)&v19[-8 * *((unsigned int *)v19 + 2) + 8];
        if (v20)
        {
          llvm::MDString::getString(v20);
          uint64_t v17 = v24;
          int v18 = *v24;
        }
        if (v18 == 15) {
          goto LABEL_26;
        }
      }
      uint64_t v17 = *(unsigned __int8 **)&v17[-8 * *((unsigned int *)v17 + 2)];
      if (v17)
      {
LABEL_26:
        uint64_t v21 = *(llvm::MDString **)&v17[-8 * *((unsigned int *)v17 + 2)];
        if (v21) {
          llvm::MDString::getString(v21);
        }
      }
      llvm::sys::path::append();
      v23[0] = MTLBoundsCheck::SharedPassData::indexForString(a1, v25, v26);
      if (v25 != v27) {
        free(v25);
      }
    }
    v23[2] = *((_DWORD *)v24 + 6);
    unint64_t v25 = (void *)*(unsigned int *)(*(void *)(a1 + 64) + 392);
    uint64_t v4 = std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__emplace_unique_key_args<llvm::DISubprogram *,llvm::DISubprogram *&,unsigned long>(v3, &v24, &v24, &v25);
    llvm::SmallVectorImpl<MTLBoundsCheck::DebugSubProgram>::emplace_back<MTLBoundsCheck::DebugSubProgram&>(*(void *)(a1 + 64) + 384, (uint64_t)v23);
  }
  return *((unsigned int *)v4 + 6);
}

void sub_255746604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  if (a33 != v33) {
    free(a33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLBoundsCheck::SharedPassData::indexForDILocation(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a2;
  uint64_t v3 = a1 + 152;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::find<llvm::DISubprogram *>((void *)(a1 + 152), &v13);
  if (!v4)
  {
    uint64_t Subprogram = (unsigned __int8 *)llvm::DILocalScope::getSubprogram(*(llvm::DILocalScope **)(v13
                                                                                             - 8
                                                                                             * *(unsigned int *)(v13 + 8)));
    unsigned int v6 = MTLBoundsCheck::SharedPassData::indexForDISubProgram(a1, Subprogram);
    unint64_t v10 = __PAIR64__(*(_DWORD *)(v13 + 4), v6);
    int v11 = *(unsigned __int16 *)(v13 + 2);
    if (*(_DWORD *)(v13 + 8) == 2 && *(void *)(v13 - 8)) {
      int v7 = MTLBoundsCheck::SharedPassData::indexForDILocation(a1);
    }
    else {
      int v7 = -1;
    }
    int v12 = v7;
    uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 64) + 120);
    uint64_t v4 = std::__hash_table<std::__hash_value_type<llvm::DILocation *,unsigned int>,std::__unordered_map_hasher<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::hash<llvm::DILocation *>,std::equal_to<llvm::DILocation *>,true>,std::__unordered_map_equal<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::equal_to<llvm::DILocation *>,std::hash<llvm::DILocation *>,true>,std::allocator<std::__hash_value_type<llvm::DILocation *,unsigned int>>>::__emplace_unique_key_args<llvm::DILocation *,llvm::DILocation *&,unsigned long>(v3, &v13, &v13, &v9);
    llvm::SmallVectorImpl<MTLBoundsCheck::DebugLocation>::emplace_back<MTLBoundsCheck::DebugLocation&>(*(void *)(a1 + 64) + 112, (uint64_t *)&v10);
  }
  return *((unsigned int *)v4 + 6);
}

llvm::MDString *MTLBoundsCheck::SharedPassData::getNameOfParentFunction(MTLBoundsCheck::SharedPassData *this, llvm::Instruction *a2)
{
  uint64_t v2 = *((void *)a2 + 5);
  if (!v2) {
    return (llvm::MDString *)&unk_2557AB8A6;
  }
  uint64_t v3 = *(llvm::Value **)(v2 + 56);
  if (!v3) {
    return (llvm::MDString *)&unk_2557AB8A6;
  }
  uint64_t Subprogram = llvm::Function::getSubprogram(*(llvm::Function **)(v2 + 56));
  if (!Subprogram) {
    return (llvm::MDString *)llvm::Value::getName(v3);
  }
  uint64_t result = *(llvm::MDString **)(Subprogram - 8 * *(unsigned int *)(Subprogram + 8) + 16);
  if (result) {
    return (llvm::MDString *)llvm::MDString::getString(result);
  }
  return result;
}

uint64_t MTLBoundsCheck::SharedPassData::indexForInstruction(MTLBoundsCheck::SharedPassData *this, llvm::Instruction *a2)
{
  if (!*(unsigned char *)(*((void *)this + 8) + 650)
    && (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0)
    && (uint64_t v9 = llvm::Instruction::getMetadataImpl()) != 0)
  {
    return MTLBoundsCheck::SharedPassData::indexForDILocation((uint64_t)this, v9);
  }
  else if ((*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0) {
         && llvm::Instruction::getMetadataImpl()
  }
         && (Metadatauint64_t Impl = llvm::Instruction::getMetadataImpl(),
             (uint64_t v4 = *(void *)(MetadataImpl - 8 * *(unsigned int *)(MetadataImpl + 8))) != 0))
  {
    uint64_t v5 = *(void *)(v4 + 128);
    unsigned int v6 = (unsigned int *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u) {
      unsigned int v6 = *(unsigned int **)v6;
    }
    return *v6;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void MTLBoundsCheck::SharedPassData::expandConstantExprUsers(MTLBoundsCheck::SharedPassData *this, llvm::GlobalVariable *a2)
{
  v52[4] = *MEMORY[0x263EF8340];
  llvm::Constant::removeDeadConstantUsers(a2);
  uint64_t v39 = (uint64_t *)v43;
  uint64_t v40 = (uint64_t *)v43;
  uint64_t v41 = 8;
  int v42 = 0;
  v37[0] = 0;
  v37[1] = 0;
  int v38 = 0;
  llvm::SmallVector<llvm::User *,16u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(&v47, *((void *)a2 + 1), 0);
  while (v48)
  {
    uint64_t v3 = (unsigned __int8 *)*((void *)v47 + --v48);
    unsigned int v4 = v3[16];
    if (v3) {
      BOOL v5 = v4 >= 0x1C;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      llvm::SmallPtrSetImpl<llvm::Instruction *>::insert((llvm::SmallPtrSetImplBase *)&v39, v3, (uint64_t)&v50);
    }
    else
    {
      if (v4 == 5) {
        unsigned int v6 = v3;
      }
      else {
        unsigned int v6 = 0;
      }
      int v46 = v6;
      if (v6)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v37, &v46, (uint64_t)&v50);
        llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v47, *((void *)v46 + 1), 0);
      }
    }
  }
  if (v40 == v39) {
    int v7 = (uint64_t *)((char *)&v41 + 4);
  }
  else {
    int v7 = &v41;
  }
  uint64_t v8 = *(unsigned int *)v7;
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    unint64_t v10 = v40;
    while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9) {
        goto LABEL_67;
      }
    }
  }
  else
  {
    unint64_t v10 = v40;
  }
  int v11 = (char *)&v40[v8];
  if (v10 != (uint64_t *)v11)
  {
LABEL_23:
    uint64_t v44 = *v10;
    llvm::SmallVector<llvm::Instruction *,4u>::SmallVector(&v50, 1uLL, &v44);
    unsigned int v12 = v51;
    do
    {
      uint64_t v13 = v50[--v12];
      unsigned int v51 = v12;
      uint64_t v14 = *(_DWORD *)(v13 + 20) & 0x7FFFFFF;
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 8 * v14;
        uint64_t v17 = 8;
        do
        {
          int v18 = *(_DWORD *)(v13 + 20);
          if ((v18 & 0x40000000) != 0) {
            uint64_t v19 = *(void *)(v13 - 8);
          }
          else {
            uint64_t v19 = v13 - 32 * (v18 & 0x7FFFFFF);
          }
          uint64_t v20 = *(void *)(v19 + v17 - 8);
          if (v20) {
            BOOL v21 = *(unsigned char *)(v20 + 16) == 5;
          }
          else {
            BOOL v21 = 0;
          }
          if (v21)
          {
            uint64_t v45 = 0;
            int v46 = (unsigned __int8 *)v20;
            if (llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::LookupBucketFor<llvm::CallInst *>(v37, &v46, &v45))
            {
              uint64_t v22 = (llvm::Instruction *)v13;
              if (*(unsigned char *)(v13 + 16) == 83)
              {
                int v23 = *(_DWORD *)(v13 + 20);
                if ((v23 & 0x40000000) != 0) {
                  uint64_t v24 = *(void *)(v13 - 8);
                }
                else {
                  uint64_t v24 = v13 - 32 * (v23 & 0x7FFFFFF);
                }
                uint64_t v25 = *(void *)(v24 + 32 * *(unsigned int *)(v13 + 60) + v15);
                uint64_t v26 = *(void *)(v25 + 40);
                if (v26 == v25 + 40)
                {
                  uint64_t v22 = 0;
                }
                else
                {
                  BOOL v27 = (llvm::Instruction *)(v26 - 24);
                  if (v26) {
                    uint64_t v28 = v26 - 24;
                  }
                  else {
                    uint64_t v28 = 0;
                  }
                  if (*(unsigned __int8 *)(v28 + 16) - 29 >= 0xB) {
                    uint64_t v22 = 0;
                  }
                  else {
                    uint64_t v22 = v27;
                  }
                }
              }
              AsInstruction = (void *)llvm::ConstantExpr::getAsInstruction((llvm::ConstantExpr *)v20, 0);
              llvm::Instruction::insertBefore((llvm::Instruction *)AsInstruction, v22);
              int v30 = *(_DWORD *)(v13 + 20);
              if ((v30 & 0x40000000) != 0) {
                uint64_t v31 = *(void *)(v13 - 8);
              }
              else {
                uint64_t v31 = v13 - 32 * (v30 & 0x7FFFFFF);
              }
              BOOL v32 = (void **)(v31 + v17);
              uint64_t v33 = (void *)(v31 + v17 - 8);
              if (*v33)
              {
                *v32[1] = *v32;
                if (*v32) {
                  (*v32)[2] = v32[1];
                }
              }
              *uint64_t v33 = AsInstruction;
              if (AsInstruction)
              {
                unint64_t v34 = AsInstruction + 1;
                uint64_t v35 = AsInstruction[1];
                int v36 = (void *)(v31 + v17);
                *int v36 = v35;
                if (v35) {
                  *(void *)(v35 + 16) = v36;
                }
                v36[1] = v34;
                void *v34 = v33;
              }
              llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&v50, (uint64_t)AsInstruction);
              if (!*(void *)(v20 + 8)) {
                llvm::Constant::destroyConstant((llvm::Constant *)v20);
              }
            }
          }
          v15 += 8;
          v17 += 32;
        }
        while (v16 != v15);
        unsigned int v12 = v51;
      }
    }
    while (v12);
    if (v50 != v52) {
      free(v50);
    }
    while (++v10 != (uint64_t *)v11)
    {
      if ((unint64_t)*v10 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v10 != (uint64_t *)v11) {
          goto LABEL_23;
        }
        break;
      }
    }
  }
LABEL_67:
  if (v47 != &v49) {
    free(v47);
  }
  llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::ConstantExpr *,void>,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::~DenseMap((uint64_t)v37);
  if (v40 != v39) {
    free(v40);
  }
}

void sub_255746BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t a29)
{
  if (a27 != &a29) {
    free(a27);
  }
  llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::ConstantExpr *,void>,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::~DenseMap((uint64_t)&a9);
  if (a13 != a12) {
    free(a13);
  }
  _Unwind_Resume(a1);
}

void *llvm::SmallPtrSetImpl<llvm::Instruction *>::insert@<X0>(llvm::SmallPtrSetImplBase *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = llvm::SmallPtrSetImplBase::insert_imp(a1, a2);
  uint64_t v7 = *((void *)a1 + 1);
  uint64_t v8 = 16;
  if (v7 == *(void *)a1) {
    uint64_t v8 = 20;
  }
  uint64_t v9 = (void *)(v7 + 8 * *(unsigned int *)((char *)a1 + v8));
  if (v9 != result)
  {
    while (*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v9)
      {
        uint64_t result = v9;
        break;
      }
    }
  }
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v6;
  return result;
}

unsigned int *llvm::StringMap<unsigned int,llvm::MallocAllocator>::clear(unsigned int *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    uint64_t v2 = result[2];
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)v1;
        uint64_t result = *(unsigned int **)(*(void *)v1 + v3);
        if (result != (unsigned int *)-8 && result != 0) {
          uint64_t result = (unsigned int *)llvm::deallocate_buffer((llvm *)result, (void *)(*(void *)result + 17));
        }
        *(void *)(v5 + v3) = 0;
        v3 += 8;
      }
      while (v4 != v3);
    }
    v1[3] = 0;
    v1[4] = 0;
  }
  return result;
}

uint64_t MakeMDResolver<unsigned int>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = &unk_270453D20;
  a2[1] = result;
  a2[3] = a2;
  return result;
}

uint64_t MakeMDResolver<BOOL>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = &unk_270453D68;
  a2[1] = result;
  a2[3] = a2;
  return result;
}

uint64_t MakeMDResolver<llvm::Value *>@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = &unk_270453DB0;
  a2[1] = result;
  a2[3] = a2;
  return result;
}

BOOL isSpecialStructType(llvm::StructType *a1)
{
  if (!*((void *)a1 + 3)) {
    return 0;
  }
  uint64_t Name = llvm::StructType::getName(a1);
  uint64_t v3 = Name;
  unint64_t v4 = v2;
  if (v2 >= 0x10)
  {
    if (*(void *)Name == 0x5F2E746375727473 && *(void *)(Name + 8) == 0x5F65727574786574) {
      return 1;
    }
    if (*(void *)Name == 0x5F2E746375727473 && *(void *)(Name + 8) == 0x5F72656C706D6173) {
      return 1;
    }
  }
  else if (v2 < 0xE)
  {
    return 0;
  }
  if (*(void *)Name != 0x5F2E746375727473 || *(void *)(Name + 6) != 0x5F68747065645F2ELL)
  {
    if (v2 >= 0x18)
    {
      if (*(void *)Name == 0x5F2E746375727473
        && *(void *)(Name + 8) == 0x5F646E616D6D6F63
        && *(void *)(Name + 16) == 0x745F726566667562)
      {
        return 1;
      }
      if (v2 >= 0x1F)
      {
        if (*(void *)Name == 0x5F2E746375727473
          && *(void *)(Name + 8) == 0x705F7265646E6572
          && *(void *)(Name + 16) == 0x5F656E696C657069
          && *(void *)(Name + 23) == 0x745F65746174735FLL)
        {
          return 1;
        }
        if (v2 < 0x20)
        {
          if (*(void *)Name == 0x5F2E746375727473
            && *(void *)(Name + 8) == 0x6C6F707265746E69
            && *(void *)(Name + 13) == 0x745F746E616C6F70)
          {
            return 1;
          }
          BOOL v19 = *(void *)Name == 0x5F2E746375727473 && *(void *)(Name + 8) == 0x6365737265746E69;
          BOOL v20 = v19 && *(void *)(Name + 16) == 0x6575715F6E6F6974;
          if (v20 && *(_DWORD *)(Name + 24) == 1952414066) {
            return 1;
          }
          BOOL v22 = *(void *)Name == 0x5F2E746375727473 && *(void *)(Name + 8) == 0x6365737265746E69;
          BOOL v23 = v22 && *(void *)(Name + 16) == 0x7365725F6E6F6974;
          if (v23 && *(void *)(Name + 21) == 0x745F746C75736572) {
            return 1;
          }
          goto LABEL_97;
        }
        if (*(void *)Name == 0x5F2E746375727473
          && *(void *)(Name + 8) == 0x5F657475706D6F63
          && *(void *)(Name + 16) == 0x656E696C65706970
          && *(void *)(Name + 24) == 0x745F65746174735FLL)
        {
          return 1;
        }
        BOOL v32 = *(void *)Name == 0x5F2E746375727473 && *(void *)(Name + 8) == 0x5F656C6269736976;
        BOOL v33 = v32 && *(void *)(Name + 16) == 0x6E6F6974636E7566;
        if (v33 && *(void *)(Name + 24) == 0x745F656C6261745FLL) {
          return 1;
        }
      }
    }
    else if (v2 < 0x15)
    {
      if (v2 < 0xF) {
        return 0;
      }
      goto LABEL_38;
    }
    if (*(void *)Name == 0x5F2E746375727473
      && *(void *)(Name + 8) == 0x6C6F707265746E69
      && *(void *)(Name + 13) == 0x745F746E616C6F70)
    {
      return 1;
    }
    if (v2 >= 0x25)
    {
      if (!memcmp((const void *)Name, "struct._intersection_function_table_t", 0x25uLL)) {
        return 1;
      }
    }
    else if (v2 < 0x1C)
    {
      goto LABEL_38;
    }
    if (*(void *)v3 == 0x5F2E746375727473
      && *(void *)(v3 + 8) == 0x6365737265746E69
      && *(void *)(v3 + 16) == 0x6575715F6E6F6974
      && *(_DWORD *)(v3 + 24) == 1952414066)
    {
      return 1;
    }
    if (v4 >= 0x1D)
    {
      if (*(void *)v3 == 0x5F2E746375727473
        && *(void *)(v3 + 8) == 0x6365737265746E69
        && *(void *)(v3 + 16) == 0x7365725F6E6F6974
        && *(void *)(v3 + 21) == 0x745F746C75736572)
      {
        return 1;
      }
      if (v4 >= 0x2A)
      {
        if (!memcmp((const void *)v3, "struct._primitive_acceleration_structure_t", 0x2AuLL)) {
          return 1;
        }
      }
      else if (v4 != 41)
      {
LABEL_38:
        BOOL v13 = *(void *)v3 == 0x4D2E746375727473 && *(void *)(v3 + 7) == 0x48564257534C544DLL;
        return v13 || v4 >= 0x21 && !memcmp((const void *)v3, "struct._MTLAxisAlignedBoundingBox", 0x21uLL);
      }
      if (!memcmp((const void *)v3, "struct._instance_acceleration_structure_t", 0x29uLL)) {
        return 1;
      }
      goto LABEL_38;
    }
LABEL_97:
    if (*(void *)v3 != 0x4D2E746375727473 || *(void *)(v3 + 7) != 0x48564257534C544DLL) {
      return 0;
    }
  }
  return 1;
}

uint64_t getPointerOperand(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 5)
  {
    int v2 = *(unsigned __int16 *)(a1 + 18);
    if (v2 == 49 || v2 == 34)
    {
      int v3 = *(_DWORD *)(a1 + 20);
      goto LABEL_11;
    }
    return 0;
  }
  uint64_t v4 = 0;
  if (a1 && v1 >= 0x1C)
  {
    if (v1 == 77 || v1 == 62)
    {
      int v3 = *(_DWORD *)(a1 + 20);
      if ((v3 & 0x40000000) != 0)
      {
        uint64_t v5 = *(void *)(a1 - 8);
        return *(void *)v5;
      }
LABEL_11:
      uint64_t v5 = a1 - 32 * (v3 & 0x7FFFFFF);
      return *(void *)v5;
    }
    return 0;
  }
  return v4;
}

void MTLRAUWUtility::replaceAllUsesWith(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v59[4] = *MEMORY[0x263EF8340];
  uint64_t v52 = *(void **)(a2 + 8);
  uint64_t v53 = 0;
  llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v57, (uint64_t *)&v52);
  unsigned int v5 = v58;
  if (v58)
  {
    uint64_t v45 = a3;
    do
    {
      char v6 = (unsigned __int8 *)v57[v5 - 1];
      unsigned int v58 = v5 - 1;
      unsigned int v7 = v6[16];
      if (v7 <= 0x1B) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = (llvm::Value *)v6;
      }
      unsigned int v48 = v8;
      if (v8)
      {
        MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>((uint64_t)&v52, &v48);
        if (*((unsigned char *)v48 + 16) == 83 && v48 != 0)
        {
          int v10 = *((_DWORD *)v48 + 5);
          uint64_t v11 = v10 & 0x7FFFFFF;
          if ((v10 & 0x7FFFFFF) != 0)
          {
            uint64_t v12 = 0;
            while (1)
            {
              BOOL v13 = (char *)v48 - 32 * v11;
              if ((v10 & 0x40000000) != 0) {
                BOOL v13 = (char *)*((void *)v48 - 1);
              }
              if (*(void *)&v13[32 * v12] == a2) {
                break;
              }
              if (++v12 == v11) {
                goto LABEL_84;
              }
            }
            uint64_t v19 = *(void *)&v13[32 * *((unsigned int *)v48 + 15) + 8 * v12];
            uint64_t v20 = *(void *)(v19 + 40);
            if (v20 == v19 + 40)
            {
              BOOL v23 = 0;
            }
            else
            {
              BOOL v21 = (llvm::Instruction *)(v20 - 24);
              if (v20) {
                uint64_t v22 = v20 - 24;
              }
              else {
                uint64_t v22 = 0;
              }
              if (*(unsigned __int8 *)(v22 + 16) - 29 >= 0xB) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v21;
              }
            }
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v52, v23);
          }
        }
LABEL_84:
        uint64_t v44 = *(void *)(a3 + 24);
        if (!v44) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void **))(*(void *)v44 + 48))(v44, &v52);
        llvm::User::replaceUsesOfWith();
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v56);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v55);
        if (v52 != v54) {
          free(v52);
        }
      }
      else
      {
        if (v7 == 5) {
          uint64_t v14 = (uint64_t)v6;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v47 = (llvm::ConstantExpr *)v14;
        if (v14)
        {
          uint64_t v52 = v54;
          uint64_t v53 = 0x400000000;
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v52, (uint64_t *)&v47);
          unint64_t v15 = v53;
          if (v53)
          {
            unint64_t v16 = 0;
            do
            {
              uint64_t v17 = *(void *)(*((void *)v52 + v16) + 8);
              if (v17)
              {
                do
                {
                  int v18 = *(unsigned char **)(v17 + 24);
                  if (v18[16] != 5) {
                    int v18 = 0;
                  }
                  uint64_t v49 = v18;
                  if (v18) {
                    llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v52, (uint64_t *)&v49);
                  }
                  uint64_t v17 = *(void *)(v17 + 8);
                }
                while (v17);
                unint64_t v15 = v53;
              }
              ++v16;
            }
            while (v15 > v16);
          }
          else
          {
            unint64_t v15 = 0;
          }
          uint64_t v24 = (char *)v52;
          uint64_t v25 = (char *)v52 + 8 * v15;
          while (v25 != v24)
          {
            BOOL v27 = (llvm::ConstantExpr *)*((void *)v25 - 1);
            v25 -= 8;
            uint64_t v26 = v27;
            v46[0] = *((void *)v27 + 1);
            v46[1] = 0;
            llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v49, v46);
            uint64_t v28 = (uint64_t *)v49;
            BOOL v29 = (uint64_t *)((char *)v49 + 8 * v50);
            if (v50)
            {
              do
              {
                uint64_t v30 = *v28;
                v46[0] = 0;
                AsInstruction = (llvm::Instruction *)llvm::ConstantExpr::getAsInstruction(v26, 0);
                v46[0] = (uint64_t)AsInstruction;
                unsigned int v32 = *(unsigned __int8 *)(v30 + 16);
                if (v32 != 83 || v30 == 0)
                {
                  if (v32 < 0x1C || v30 == 0)
                  {
                    llvm::Value::dump(v26);
                    llvm::Value::dump((llvm::Value *)v30);
                  }
                  else
                  {
                    llvm::Instruction::insertBefore(AsInstruction, (llvm::Instruction *)v30);
                  }
                }
                else
                {
                  int v35 = *(_DWORD *)(v30 + 20);
                  uint64_t v36 = v35 & 0x7FFFFFF;
                  if ((v35 & 0x7FFFFFF) != 0)
                  {
                    uint64_t v37 = 0;
                    while (1)
                    {
                      uint64_t v38 = v30 - 32 * v36;
                      if ((v35 & 0x40000000) != 0) {
                        uint64_t v38 = *(void *)(v30 - 8);
                      }
                      if (*(llvm::ConstantExpr **)(v38 + 32 * v37) == v26) {
                        break;
                      }
                      if (++v37 == v36) {
                        goto LABEL_72;
                      }
                    }
                    uint64_t v39 = *(void *)(v38 + 32 * *(unsigned int *)(v30 + 60) + 8 * v37);
                    uint64_t v40 = *(void *)(v39 + 40);
                    if (v40 == v39 + 40)
                    {
                      uint64_t v43 = 0;
                    }
                    else
                    {
                      uint64_t v41 = (llvm::Instruction *)(v40 - 24);
                      if (v40) {
                        uint64_t v42 = v40 - 24;
                      }
                      else {
                        uint64_t v42 = 0;
                      }
                      if (*(unsigned __int8 *)(v42 + 16) - 29 >= 0xB) {
                        uint64_t v43 = 0;
                      }
                      else {
                        uint64_t v43 = v41;
                      }
                    }
                    llvm::Instruction::insertBefore(AsInstruction, v43);
                    llvm::PHINode::setIncomingValue(v30, v37, v46[0]);
                  }
                }
LABEL_72:
                llvm::User::replaceUsesOfWith();
                if (v26 == v47) {
                  llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v57, v46);
                }
                ++v28;
              }
              while (v28 != v29);
              uint64_t v28 = (uint64_t *)v49;
            }
            if (v28 != &v51) {
              free(v28);
            }
            llvm::User::dropAllReferences((uint64_t)v26);
          }
          if (v52 != v54) {
            free(v52);
          }
          a3 = v45;
        }
        else
        {
          llvm::Value::dump((llvm::Value *)v6);
        }
      }
      unsigned int v5 = v58;
    }
    while (v58);
  }
  if (v57 != v59) {
    free(v57);
  }
}

void sub_255747704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
}

uint64_t llvm::User::dropAllReferences(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 20);
  if ((v1 & 0x40000000) != 0)
  {
    uint64_t v3 = *(void *)(this - 8);
    uint64_t v2 = v1 & 0x7FFFFFF;
    if (!v2) {
      return this;
    }
  }
  else
  {
    uint64_t v2 = v1 & 0x7FFFFFF;
    uint64_t v3 = this - 32 * v2;
    if (!v2) {
      return this;
    }
  }
  uint64_t v4 = 32 * v2;
  unsigned int v5 = (void **)(v3 + 16);
  do
  {
    if (*(v5 - 2))
    {
      **unsigned int v5 = *(v5 - 1);
      uint64_t v6 = (uint64_t)*(v5 - 1);
      if (v6) {
        *(void *)(v6 + 16) = *v5;
      }
    }
    *(v5 - 2) = 0;
    v5 += 4;
    v4 -= 32;
  }
  while (v4);
  return this;
}

void MTLBoundsCheck::SharedPassData::~SharedPassData(MTLBoundsCheck::SharedPassData *this)
{
  *(void *)this = &unk_270453C80;
  uint64_t v2 = (char *)this + 88;
  std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::~__hash_table((uint64_t)this + 192);
  std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::~__hash_table((uint64_t)this + 152);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 120);
  llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_270453C80;
  uint64_t v2 = (char *)this + 88;
  std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::~__hash_table((uint64_t)this + 192);
  std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::~__hash_table((uint64_t)this + 152);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 120);
  llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

void *llvm::SmallVector<llvm::Instruction *,4u>::SmallVector(void *a1, unint64_t a2, uint64_t *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)a1, a2, *a3);
  return a1;
}

void sub_25574792C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::DenseMap<llvm::ConstantExpr *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::ConstantExpr *,void>,llvm::detail::DenseSetPair<llvm::ConstantExpr *>>::~DenseMap(uint64_t a1)
{
  return a1;
}

void llvm::SmallVectorImpl<std::string>::clear(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = 24 * v2;
    do
    {
      if (*(char *)(v3 + v4 - 1) < 0) {
        operator delete(*(void **)(v3 + v4 - 24));
      }
      v4 -= 24;
    }
    while (v4);
  }
  *((_DWORD *)a1 + 2) = 0;
}

uint64_t llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        unsigned int v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t llvm::DenseMap<llvm::Value *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseSetPair<llvm::Value *>>::~DenseMap(uint64_t a1)
{
  return a1;
}

uint64_t MTLMDBuilder::getMetadata<int>()
{
  llvm::IntegerType::get();
  llvm::ConstantInt::get();
  return llvm::ValueAsMetadata::get();
}

void *std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::find<llvm::DISubprogram *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__emplace_unique_key_args<llvm::DISubprogram *,llvm::DISubprogram *&,unsigned long>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    BOOL v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == *a2) {
              return v14;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v14 = operator new(0x20uLL);
  *uint64_t v14 = 0;
  v14[1] = v10;
  void v14[2] = *a3;
  *((_DWORD *)v14 + 6) = *a4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v11 || (float)(v17 * (float)v11) < v16)
  {
    BOOL v18 = 1;
    if (v11 >= 3) {
      BOOL v18 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v11);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__rehash<true>(a1, v21);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v22 = *(void *)a1;
  BOOL v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t v14 = *v23;
LABEL_38:
    *BOOL v23 = v14;
    goto LABEL_39;
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v24 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11) {
        v24 %= v11;
      }
    }
    else
    {
      v24 &= v11 - 1;
    }
    BOOL v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_255747E28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<llvm::DILocation *,unsigned int>,std::__unordered_map_hasher<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::hash<llvm::DILocation *>,std::equal_to<llvm::DILocation *>,true>,std::__unordered_map_equal<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::equal_to<llvm::DILocation *>,std::hash<llvm::DILocation *>,true>,std::allocator<std::__hash_value_type<llvm::DILocation *,unsigned int>>>::__emplace_unique_key_args<llvm::DILocation *,llvm::DILocation *&,unsigned long>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    BOOL v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == *a2) {
              return v14;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v14 = operator new(0x20uLL);
  *uint64_t v14 = 0;
  v14[1] = v10;
  void v14[2] = *a3;
  *((_DWORD *)v14 + 6) = *a4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v11 || (float)(v17 * (float)v11) < v16)
  {
    BOOL v18 = 1;
    if (v11 >= 3) {
      BOOL v18 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v11);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__rehash<true>(a1, v21);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v22 = *(void *)a1;
  BOOL v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t v14 = *v23;
LABEL_38:
    *BOOL v23 = v14;
    goto LABEL_39;
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v24 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11) {
        v24 %= v11;
      }
    }
    else
    {
      v24 &= v11 - 1;
    }
    BOOL v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_255748090(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *llvm::SmallVector<llvm::User *,16u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>,void>(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x1000000000;
  llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_2557480E0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *llvm::SmallPtrSetImplBase::insert_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 != *(void *)this) {
    return (void *)llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
  }
  uint64_t v5 = *((unsigned int *)this + 5);
  if (!v5)
  {
LABEL_12:
    if (v5 < *((_DWORD *)this + 4))
    {
      *((_DWORD *)this + 5) = v5 + 1;
      *(void *)(v2 + 8 * v5) = a2;
      return (void *)(*(void *)this + 8 * v5);
    }
    return (void *)llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
  }
  uint8x8_t v6 = 0;
  uint64_t v7 = 8 * v5;
  unint64_t v3 = (void *)*((void *)this + 1);
  while ((const void *)*v3 != a2)
  {
    if (*v3 == -2) {
      uint8x8_t v6 = v3;
    }
    ++v3;
    v7 -= 8;
    if (!v7)
    {
      if (!v6) {
        goto LABEL_12;
      }
      *uint8x8_t v6 = a2;
      --*((_DWORD *)this + 6);
      return v6;
    }
  }
  return v3;
}

void *std::__hash_table<std::__hash_value_type<llvm::DILocation *,unsigned int>,std::__unordered_map_hasher<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::hash<llvm::DILocation *>,std::equal_to<llvm::DILocation *>,true>,std::__unordered_map_equal<llvm::DILocation *,std::__hash_value_type<llvm::DILocation *,unsigned int>,std::equal_to<llvm::DILocation *>,std::hash<llvm::DILocation *>,true>,std::allocator<std::__hash_value_type<llvm::DILocation *,unsigned int>>>::clear(void *result)
{
  if (result[3])
  {
    int v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        uint64_t v2 = (void *)*result;
        operator delete(result);
        uint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0>,void ()(llvm::Metadata *)>::~__func()
{
}

void *std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270453D20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270453D20;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<unsigned int>(unsigned int &)::$_0>,void ()(llvm::Metadata *)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 128);
  uint64_t v3 = (void *)(v2 + 24);
  if (*(_DWORD *)(v2 + 32) >= 0x41u) {
    uint64_t v3 = (void *)*v3;
  }
  **(_DWORD **)(result + 8) = *v3;
  return result;
}

void std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0>,void ()(llvm::Metadata *)>::~__func()
{
}

void *std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270453D68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270453D68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<BOOL>(BOOL &)::$_0>,void ()(llvm::Metadata *)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 128);
  uint64_t v3 = (void *)(v2 + 24);
  if (*(_DWORD *)(v2 + 32) >= 0x41u) {
    uint64_t v3 = (void *)*v3;
  }
  **(unsigned char **)(result + 8) = *v3 != 0;
  return result;
}

void std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0>,void ()(llvm::Metadata *)>::~__func()
{
}

void *std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_270453DB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0>,void ()(llvm::Metadata *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270453DB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0,std::allocator<std::function<void ()(llvm::Metadata *)> MakeMDResolver<llvm::Value *>(llvm::Value * &)::$_0>,void ()(llvm::Metadata *)>::operator()(uint64_t result, uint64_t a2)
{
  **(void **)(result + 8) = *(void *)(*(void *)a2 + 128);
  return result;
}

uint64_t MTLDebugSymbolCollectionPass::runOnModule(MTLDebugSymbolCollectionPass *this, llvm::Module *a2)
{
  uint64_t v2 = (llvm::Module *)*((void *)a2 + 4);
  BOOL v18 = (llvm::Module *)((char *)a2 + 24);
  if (v2 == (llvm::Module *)((char *)a2 + 24)) {
    return 0;
  }
  char v4 = 0;
  uint64_t v5 = *(llvm::LLVMContext **)a2;
  do
  {
    uint8x8_t v6 = (char *)v2 - 56;
    if (!v2) {
      uint8x8_t v6 = 0;
    }
    unint64_t v19 = v2;
    if ((v6[33] & 0x20) == 0)
    {
      uint64_t v7 = *((void *)v6 + 10);
      for (i = v6 + 72; (char *)v7 != i; uint64_t v7 = *(void *)(v7 + 8))
      {
        uint64_t v8 = v7 - 24;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t v9 = v8 + 40;
        for (uint64_t j = *(void *)(v8 + 48); j != v9; uint64_t j = *(void *)(j + 8))
        {
          if (j) {
            uint64_t v11 = j - 24;
          }
          else {
            uint64_t v11 = 0;
          }
          unsigned int v12 = *(unsigned __int8 *)(v11 + 16) - 60;
          BOOL v13 = v12 > 0x18;
          int v14 = (1 << v12) & 0x1000003;
          BOOL v15 = v13 || v14 == 0;
          if (!v15 && (*(void *)(v11 + 48) || (*(unsigned char *)(v11 + 23) & 0x20) != 0))
          {
            Metadatauint64_t Impl = llvm::Instruction::getMetadataImpl();
            if (MetadataImpl)
            {
              MTLBoundsCheck::SharedPassData::indexForDILocation(*((void *)this + 8), MetadataImpl);
              llvm::ConstantInt::get();
              llvm::ValueAsMetadata::get();
              char v4 = 1;
              llvm::MDTuple::getImpl();
              llvm::Instruction::setMetadata();
            }
          }
        }
      }
    }
    uint64_t v2 = (llvm::Module *)*((void *)v19 + 1);
  }
  while (v2 != v18);
  if ((v4 & 1) == 0) {
    return 0;
  }
  MTLBoundsCheck::SerializedData::toMetaData(*(MTLBoundsCheck::SerializedData **)(*((void *)this + 8) + 64), v5);
  llvm::Module::getOrInsertNamedMetadata();
  llvm::NamedMDNode::addOperand();
  return 1;
}

void createMTLDebugSymbolCollectionPass(MTLBoundsCheck::SharedPassData *a1)
{
}

void sub_255748688(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLDebugSymbolCollectionPass::~MTLDebugSymbolCollectionPass(MTLDebugSymbolCollectionPass *this)
{
  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

void createMTLGVEmulationPass(MTLBoundsCheck::SharedPassData *a1)
{
}

void sub_255748824(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C407BC3077FLL);
  _Unwind_Resume(a1);
}

void MTLGVEmulation::~MTLGVEmulation(MTLGVEmulation *this)
{
  llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::~DenseMap((uint64_t)this + 304);
  llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::~DenseMap((uint64_t)this + 280);
  uint64_t v2 = (char *)*((void *)this + 29);
  if (v2 != (char *)this + 248) {
    free(v2);
  }
  llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 200);
  *(void *)this = &unk_2704532C8;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::~DenseMap((uint64_t)this + 304);
  llvm::DenseMap<llvm::Function *,llvm::Function *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Function *>>::~DenseMap((uint64_t)this + 280);
  uint64_t v2 = (char *)*((void *)this + 29);
  if (v2 != (char *)this + 248) {
    free(v2);
  }
  llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 200);
  *(void *)this = &unk_2704532C8;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t MTLGVEmulation::doInitialization(MTLGVEmulation *this, llvm::Module *a2)
{
  return 0;
}

uint64_t MTLGVEmulation::runOnModule(MTLGVEmulation *this, llvm::Module *a2)
{
  v42[8] = *MEMORY[0x263EF8340];
  char v4 = (uint64_t *)((char *)this + 280);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>,llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::clear((uint64_t)this + 280);
  MetalModulePass::runOnModule(this, a2);
  MTLGVEmulation::createFwdStructType(this);
  Entryuint64_t Function = (llvm::Function *)MetalModulePass::getEntryFunction(this);
  if (MTLBoundsCheck::isLibraryModule(a2, v6)) {
    Entryuint64_t Function = 0;
  }
  uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    uint64_t v8 = (llvm::GlobalVariable *)GlobalVariable;
    uint64_t v9 = *(void *)(GlobalVariable - 32);
    uint64_t v40 = v42;
    uint64_t v41 = 0x400000000;
    unint64_t v10 = *(_DWORD *)(v9 + 20) & 0x7FFFFFF;
    if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) != 0)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        v38[0] = *(void *)(v9 - 32 * v10 + v11);
        BOOL v13 = (llvm::Value *)MTLBoundsCheck::lookThroughPointerOps(v38[0], v38);
        uint64_t v14 = (uint64_t)v13;
        BOOL v15 = *((unsigned char *)v13 + 16) != 3 || v13 == 0;
        if (!v15 && (uint64_t Name = (_DWORD *)llvm::Value::getName(v13), v17 >= 4) && *Name == 778859629)
        {
          llvm::UndefValue::get();
          llvm::Constant::handleOperandChange();
          uint64_t v9 = *((void *)v8 - 4);
          if (!v9 || *(unsigned __int8 *)(v9 + 16) - 11 < 2) {
            break;
          }
        }
        else
        {
          uint64_t v39 = v14;
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v40, &v39);
        }
        ++v12;
        unint64_t v10 = *(_DWORD *)(v9 + 20) & 0x7FFFFFF;
        v11 += 32;
      }
      while (v12 < v10);
    }
    llvm::GlobalVariable::eraseFromParent(v8);
    if (v41) {
      llvm::appendToUsed();
    }
    if (v40 != v42) {
      free(v40);
    }
  }
  MTLGVEmulation::gatherGVs((uint64_t)this);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>,llvm::Type *,llvm::Type *,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,llvm::Type *>>::clear((uint64_t)v4);
  v38[0] = *((void *)a2 + 4);
  v38[1] = (uint64_t)a2 + 24;
  llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>>(&v40, v38);
  BOOL v18 = (llvm::Function **)v40;
  if (v41)
  {
    uint64_t v19 = 8 * v41;
    do
    {
      unint64_t v20 = *v18;
      shouldModifyuint64_t Function = MTLGVEmulation::shouldModifyFunction(this, *v18);
      if (v20 == EntryFunction) {
        char v22 = 0;
      }
      else {
        char v22 = shouldModifyFunction;
      }
      if (v22)
      {
        uint64_t v39 = (uint64_t)v20;
        v38[0] = 0;
        int v23 = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>((uint64_t *)this + 17, &v39, v38);
        if (v38[0] == *((void *)this + 17) + 16 * *((unsigned int *)this + 38)) {
          int v24 = 0;
        }
        else {
          int v24 = v23;
        }
        if (v24 == 1) {
          uint64_t v25 = *(void *)(v38[0] + 8);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t updated = MTLGVEmulation::updateFunction((uint64_t)this, (uint64_t)v20, v25);
        v38[0] = (uint64_t)v20;
        llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v4, v38)[1] = updated;
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
    BOOL v18 = (llvm::Function **)v40;
  }
  if (v18 != v42) {
    free(v18);
  }
  if (EntryFunction) {
    MTLGVEmulation::updateEntryPoint(this, EntryFunction);
  }
  MTLGVEmulation::updateIntersectionFunctions(this);
  MTLGVEmulation::updateIntersectCalls(this);
  MTLGVEmulation::updateAIRFunctionMetadata(this);
  MTLGVEmulation::removeGVUsages((uint64_t)this);
  MTLGVEmulation::updateAIRDyldTable(this);
  if (*((_DWORD *)this + 72))
  {
    BOOL v27 = (llvm::Function **)*((void *)this + 35);
    uint64_t v28 = *((unsigned int *)this + 74);
    BOOL v29 = v27;
    if (v28)
    {
      uint64_t v30 = 0;
      while (((unint64_t)v27[v30] | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v30 += 2;
        if (2 * v28 == v30)
        {
          int v31 = 1;
          goto LABEL_55;
        }
      }
      BOOL v29 = &v27[v30];
    }
    unsigned int v32 = &v27[2 * v28];
    if (v29 == v32)
    {
      BOOL v33 = 0;
    }
    else
    {
LABEL_48:
      MTLGVEmulation::updateFunctionUses(this, *v29, v29[1]);
      MTLGVEmulation::updateIndirectCalls(this, v29[1]);
      llvm::Value::takeName();
      while (1)
      {
        v29 += 2;
        if (v29 == v32) {
          break;
        }
        if (((unint64_t)*v29 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v29 != v32) {
            goto LABEL_48;
          }
          break;
        }
      }
      BOOL v27 = (llvm::Function **)*((void *)this + 35);
      uint64_t v28 = *((unsigned int *)this + 74);
      BOOL v33 = *((_DWORD *)this + 72) == 0;
    }
    int v31 = v28;
    if (!v33)
    {
LABEL_55:
      uint64_t i = v27;
      if (v31)
      {
        uint64_t v35 = 16 * v28;
        for (uint64_t i = v27; ((unint64_t)*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 2)
        {
          v35 -= 16;
          if (!v35) {
            return 1;
          }
        }
      }
      uint64_t v37 = &v27[2 * v28];
LABEL_61:
      if (i != v37)
      {
        llvm::UndefValue::get();
        llvm::Value::replaceNonMetadataUsesWith();
        *(void *)char *i = *(void *)i[1];
        llvm::ValueAsMetadata::handleRAUW();
        llvm::Function::eraseFromParent(*i);
        while (1)
        {
          i += 2;
          if (i == v37) {
            break;
          }
          if (((unint64_t)*i | 0x1000) != 0xFFFFFFFFFFFFF000) {
            goto LABEL_61;
          }
        }
      }
    }
  }
  return 1;
}

void sub_255748DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  if (a14 != a10) {
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(llvm **)(*(void *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0) {
          llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 25));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::~DenseMap(uint64_t a1)
{
  return a1;
}

void MTLGVEmulation::createFwdStructType(MTLGVEmulation *this)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  llvm::PointerType::get();
  llvm::StructType::get();
  uint64_t v38 = "mtl.device_indirection_table";
  uint64_t v39 = 28;
  v40[0] = 0;
  uint64_t v41 = llvm::PointerType::get();
  uint64_t v42 = "mtl.draw_id_buffer";
  uint64_t v43 = 18;
  int v44 = 1;
  uint64_t v45 = llvm::PointerType::get();
  int v46 = "mtl.report_buffer";
  uint64_t v47 = 17;
  int v48 = 2;
  uint64_t v49 = llvm::PointerType::get();
  unsigned int v50 = "mtl.texture_usage_table";
  uint64_t v51 = 23;
  int v52 = 3;
  uint64_t v53 = llvm::PointerType::get();
  uint64_t v2 = llvm::PointerType::get();
  uint64_t v54 = "mtl.buffer_usage_table";
  uint64_t v55 = 22;
  int v56 = 4;
  uint64_t v3 = *((void *)this + 10);
  uint64_t v57 = v2;
  unsigned int v58 = "mtl.stack_depth";
  uint64_t v59 = 15;
  int v60 = 9;
  uint64_t v61 = v3;
  unsigned int v62 = "mtl.acceleration_structure_payload";
  uint64_t v63 = 34;
  int v64 = 10;
  uint64_t v65 = llvm::PointerType::get();
  uint64_t Int8PtrTy = llvm::Type::getInt8PtrTy(**((llvm::Type ***)this + 6), 0);
  uint64_t v66 = "mtl.stack_trace";
  uint64_t v67 = 15;
  int v68 = 11;
  uint64_t v69 = Int8PtrTy;
  MTLBoundsCheck::SharedPassData::getGVBaseType(*((void *)this + 8), "mtl.binding_table", 0x11uLL);
  uint64_t v70 = "mtl.binding_table";
  uint64_t v71 = 17;
  int v72 = 12;
  uint64_t v73 = llvm::PointerType::get();
  uint64_t v74 = "mtl.texture_type_table";
  uint64_t v75 = 22;
  int v76 = 13;
  uint64_t v77 = llvm::PointerType::get();
  llvm::StringMapImpl::StringMapImpl((llvm::StringMapImpl *)&v33);
  for (uint64_t i = 0; i != 80; i += 8)
  {
    long long v6 = *(_OWORD *)&v40[i];
    long long v36 = *(_OWORD *)((char *)&v38 + i * 4);
    long long v37 = v6;
    llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<GVStructElementInfo>((llvm::StringMapImpl *)&v33, (const void *)v36, *((size_t *)&v36 + 1), &v37);
  }
  uint64_t v7 = *((void *)this + 25);
  *((void *)this + 25) = v33;
  uint64_t v33 = v7;
  uint64_t v8 = *((void *)this + 26);
  *((void *)this + 26) = v34;
  uint64_t v34 = v8;
  LODWORD(v7) = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = v35;
  int v35 = v7;
  llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)&v33);
  MTLBoundsCheck::SharedPassData::getGVBaseType(*((void *)this + 8), "mtl.threadgroup_table", 0x15uLL);
  uint64_t v9 = llvm::PointerType::get();
  if (!llvm::Module::getGlobalVariable()) {
    uint64_t v9 = llvm::PointerType::get();
  }
  uint64_t v10 = *llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<>((MTLGVEmulation *)((char *)this + 200), "mtl.threadgroup_table", 0x15uLL);
  *(_DWORD *)(v10 + 8) = 5;
  *(void *)(v10 + 16) = v9;
  MTLBoundsCheck::SharedPassData::getGVBaseType(*((void *)this + 8), "mtl.threadgroup_base", 0x14uLL);
  uint64_t v11 = llvm::PointerType::get();
  uint64_t v13 = *llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<>((MTLGVEmulation *)((char *)this + 200), "mtl.threadgroup_base", 0x14uLL);
  *(_DWORD *)(v13 + 8) = 6;
  *(void *)(v13 + 16) = v11;
  uint64_t v14 = "mtl.global_constants_handle";
  BOOL v15 = "mtl.global_constants_table";
  if ((*(unsigned char *)(*(void *)(*((void *)this + 8) + 72) + 23) & 0x40) != 0)
  {
    isLibraryuint64_t Module = MTLBoundsCheck::isLibraryModule(*((MTLBoundsCheck **)this + 6), v12);
    if (isLibraryModule) {
      size_t v17 = 33;
    }
    else {
      size_t v17 = 26;
    }
    if (isLibraryModule)
    {
      BOOL v15 = "mtl.global_constants_table.unused";
      size_t v16 = 34;
    }
    else
    {
      size_t v16 = 27;
    }
    if (isLibraryModule) {
      uint64_t v14 = "mtl.global_constants_handle.unused";
    }
  }
  else
  {
    size_t v16 = 27;
    size_t v17 = 26;
  }
  uint64_t v19 = llvm::PointerType::get();
  uint64_t v20 = *llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<>((MTLGVEmulation *)((char *)this + 200), v15, v17);
  *(_DWORD *)(v20 + 8) = 7;
  *(void *)(v20 + 16) = v19;
  uint64_t v21 = *((void *)this + 9);
  uint64_t v22 = *llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<>((MTLGVEmulation *)((char *)this + 200), v14, v16);
  *(_DWORD *)(v22 + 8) = 8;
  *(void *)(v22 + 16) = v21;
  if (!MTLBoundsCheck::isLibraryModule(*((MTLBoundsCheck **)this + 6), v23))
  {
    MTLBoundsCheck::SharedPassData::getOrInsertDeviceIndirectionTableGV(*((MTLBoundsCheck::SharedPassData **)this + 8));
    MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsHandleGV(*((llvm::Module ***)this + 8));
    int v24 = (MTLBoundsCheck::SharedPassData *)*((void *)this + 8);
    if ((*(void *)(*((void *)v24 + 9) + 20) & 0x200000001) != 0)
    {
      MTLBoundsCheck::SharedPassData::getOrInsertBufferUsageTableGV(v24);
      MTLBoundsCheck::SharedPassData::getOrInsertTextureUsageTableGV(*((MTLBoundsCheck::SharedPassData **)this + 8));
      MTLBoundsCheck::SharedPassData::getOrInsertTextureTypeTableGV(*((MTLBoundsCheck::SharedPassData **)this + 8));
      int v24 = (MTLBoundsCheck::SharedPassData *)*((void *)this + 8);
    }
    MTLBoundsCheck::SharedPassData::getOrInsertDrawIDBufferGV(v24);
    MTLBoundsCheck::SharedPassData::getOrInsertReportBufferGV(*((llvm::Type ****)this + 8));
  }
  MTLBoundsCheck::SharedPassData::getOrInsertStackDepthGV(*((llvm::Type ****)this + 8));
  MTLBoundsCheck::SharedPassData::getOrInsertAccelerationStructurePtrGV(*((llvm::Type ****)this + 8));
  MTLBoundsCheck::SharedPassData::getOrInsertBindingTableGV(*((MTLBoundsCheck::SharedPassData **)this + 8));
  uint64_t v25 = llvm::StructType::create();
  uint64_t v38 = v40;
  uint64_t v39 = 0x800000000;
  llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)&v38, *((unsigned int *)this + 53));
  uint64_t v26 = *((unsigned int *)this + 52);
  if (v26)
  {
    for (uint64_t j = (uint64_t *)*((void *)this + 25); !*j || *j == -8; ++j)
      ;
  }
  else
  {
    uint64_t j = (uint64_t *)*((void *)this + 25);
  }
  uint64_t v29 = *((void *)this + 25) + 8 * v26;
  if (j != (uint64_t *)v29)
  {
    uint64_t v30 = *j;
    do
    {
      *((void *)v38 + *(unsigned int *)(v30 + 8)) = *(void *)(v30 + 16);
      do
      {
        uint64_t v31 = j[1];
        ++j;
        uint64_t v30 = v31;
        if (v31) {
          BOOL v32 = v30 == -8;
        }
        else {
          BOOL v32 = 1;
        }
      }
      while (v32);
    }
    while (j != (uint64_t *)v29);
  }
  llvm::StructType::setBody();
  *((void *)this + 23) = v25;
  *((void *)this + 24) = llvm::PointerType::get();
  if (v38 != v40) {
    free(v38);
  }
}

void sub_2557494EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18 != v18) {
    free(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLGVEmulation::gatherGVs(uint64_t this)
{
  *(_DWORD *)(this + 240) = 0;
  uint64_t v1 = *(void *)(this + 48);
  uint64_t v2 = v1 + 8;
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 != v1 + 8)
  {
    uint64_t v4 = this;
    uint64_t v5 = this + 232;
    do
    {
      if (v3) {
        long long v6 = (llvm::Value *)(v3 - 56);
      }
      else {
        long long v6 = 0;
      }
      if ((*((unsigned char *)v6 + 33) & 0x1C) != 0)
      {
        this = llvm::Value::getName(v6);
        if (v7 >= 4 && *(_DWORD *)this == 778859629)
        {
          int Key = llvm::StringMapImpl::FindKey();
          if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v4 + 208))
          {
            this = llvm::Value::dump(v6);
            __break(1u);
            return this;
          }
          uint64_t v9 = v6;
          this = llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>(v5, (uint64_t *)&v9);
        }
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return this;
}

uint64_t MTLGVEmulation::shouldModifyFunction(MTLGVEmulation *this, llvm::Function *a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = a2;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>((uint64_t *)this + 20, &v11, &v10))return 0; {
  uint64_t Name = llvm::Value::getName(a2);
  }
  unint64_t v6 = v5;
  if (llvm::GlobalValue::isDeclaration(a2))
  {
    if (v6 >= 0x11)
    {
      if (*(void *)Name == 0x69646E692E6C746DLL
        && *(void *)(Name + 8) == 0x6D656D5F74636572
        && *(unsigned char *)(Name + 16) == 46)
      {
        return 1;
      }
    }
    else if (v6 < 4)
    {
      return 1;
    }
    if (*(_DWORD *)Name == 779250017) {
      return 0;
    }
    if (v6 >= 5 && *(_DWORD *)Name == 1836477548 && *(unsigned char *)(Name + 4) == 46) {
      return 0;
    }
    if (*(_DWORD *)Name == 778859629) {
      return 0;
    }
  }
  return 1;
}

uint64_t MTLGVEmulation::updateFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[8] = *MEMORY[0x263EF8340];
  void v15[2] = *(void *)(a1 + 40);
  size_t v16 = v18;
  uint64_t v17 = 0x800000000;
  llvm::AttrBuilder::addAttribute();
  llvm::AttrBuilder::addAttribute();
  unint64_t v6 = *(llvm::Attribute **)(a1 + 40);
  v15[0] = llvm::DataLayout::getTypeAllocSize(*(llvm::DataLayout **)(a1 + 56), *(llvm::Type **)(a1 + 184));
  v15[1] = v7;
  uint64_t v8 = (llvm::LLVMContext *)llvm::TypeSize::operator unsigned long long();
  llvm::Attribute::getWithDereferenceableBytes(v6, v8);
  llvm::AttrBuilder::addAttribute();
  uint64_t v9 = llvm::AttributeSet::get();
  uint64_t inserted = (llvm::Function *)MetalModulePass::insertArgument(a1, a2, *(void *)(a1 + 192), v9, 1, "shader_validation_args", 0);
  uint64_t v11 = inserted;
  v15[0] = inserted;
  if (*((_WORD *)inserted + 9)) {
    llvm::Function::BuildLazyArguments(inserted);
  }
  uint64_t v12 = *((void *)v11 + 11);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct((uint64_t *)(a1 + 304), v15)[1] = v12;
  if (a3) {
    MetalModulePass::insertFunctionArgumentMD(a1, a3, (llvm::LLVMContext *)"air.visible_input", (uint64_t)"mtl.shader_validation_args", (llvm::LLVMContext *)"shader_validation_args", 0, 0, 0);
  }
  uint64_t v13 = v15[0];
  if (v16 != v18) {
    free(v16);
  }
  return v13;
}

void sub_25574988C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12 != v12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

void MTLGVEmulation::updateEntryPoint(MTLGVEmulation *this, llvm::Function *a2)
{
  v23[1] = *MEMORY[0x263EF8340];
  uint64_t v19 = a2;
  uint64_t v3 = *((void *)a2 + 10);
  if (v3) {
    uint64_t v4 = (llvm::BasicBlock *)(v3 - 24);
  }
  else {
    uint64_t v4 = 0;
  }
  FirstNonPHI = (llvm::Value *)llvm::BasicBlock::getFirstNonPHI(v4);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)v20, FirstNonPHI, 0, 0, 0);
  unint64_t v6 = (llvm::Type *)*((void *)this + 23);
  v18[16] = 257;
  uint64_t Alloca = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v20, v6, 0, (const llvm::Twine *)v18);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct((uint64_t *)this + 38, &v19)[1] = Alloca;
  uint64_t v8 = (char *)v19 + 72;
  for (uint64_t i = *((void *)v19 + 10); (char *)i != v8; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v10 = i - 24;
    if (!i) {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void *)(v10 + 48);
    if (v11 != v10 + 40)
    {
LABEL_29:
      while ((char *)i != v8)
      {
        uint64_t v12 = v11 - 24;
        if (!v11) {
          uint64_t v12 = 0;
        }
        int v13 = *(unsigned __int8 *)(v12 + 16);
        if (v13 == 84) {
          uint64_t v14 = v12;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v11)
        {
          if (v13 == 84)
          {
            uint64_t v15 = *(void *)(v14 - 32);
            if (!v15
              || *(unsigned char *)(v15 + 16)
              || *(void *)(v15 + 24) != *(void *)(v14 + 72)
              || MTLGVEmulation::shouldModifyFunction(this, (llvm::Function *)v15))
            {
              *(_WORD *)(v14 + 18) &= 0xFFFCu;
            }
          }
        }
        uint64_t v11 = *(void *)(v11 + 8);
        uint64_t v16 = i - 24;
        if (!i) {
          uint64_t v16 = 0;
        }
        if (v11 == v16 + 40)
        {
          while (1)
          {
            uint64_t i = *(void *)(i + 8);
            if ((char *)i == v8) {
              goto LABEL_30;
            }
            uint64_t v17 = i - 24;
            if (!i) {
              uint64_t v17 = 0;
            }
            uint64_t v11 = *(void *)(v17 + 48);
            if (v11 != v17 + 40) {
              goto LABEL_29;
            }
          }
        }
      }
      break;
    }
  }
LABEL_30:
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v23);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v22);
  if (v20[0] != &v21) {
    free(v20[0]);
  }
}

void sub_255749A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

void MTLGVEmulation::updateIntersectionFunctions(MTLGVEmulation *this)
{
  v65[1] = *MEMORY[0x263EF8340];
  v55[1] = (llvm::Function *)((llvm::DataLayout::getTypeSizeInBits(*((llvm::DataLayout **)this + 7), *((llvm::Type **)this + 23))+ 7) >> 3);
  v55[2] = (llvm::Function *)(v3 == 1);
  unsigned int PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(*((llvm::DataLayout **)this + 7), *((llvm::Type **)this + 23));
  if (!*((_DWORD *)this + 42)) {
    return;
  }
  uint64_t v5 = *((unsigned int *)this + 44);
  if (v5)
  {
    uint64_t v6 = 16 * v5;
    for (uint64_t i = (void *)*((void *)this + 20); (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 2)
    {
      v6 -= 16;
      if (!v6) {
        return;
      }
    }
  }
  else
  {
    uint64_t i = (void *)*((void *)this + 20);
  }
  uint64_t v8 = *((void *)this + 20) + 16 * v5;
  if (i == (void *)v8) {
    return;
  }
  uint64_t v51 = (uint64_t *)((char *)this + 304);
  uint64_t v49 = PrefTypeAlignment | 0x100000000;
LABEL_10:
  uint64_t v9 = i[1];
  v55[0] = *(llvm::Function **)i;
  PayloadArg = (llvm::Type **)MTLGVEmulation::getPayloadArg((uint64_t)this, (uint64_t)v55[0], v9);
  if (!PayloadArg)
  {
    uint64_t v56 = *((void *)this + 5);
    uint64_t v57 = &v59;
    uint64_t v58 = 0x800000000;
    llvm::AttrBuilder::addAttribute();
    llvm::AttrBuilder::addAttribute();
    uint64_t v34 = (llvm::Attribute *)*((void *)this + 5);
    TypeAllocSize = (llvm::Type *)llvm::DataLayout::getTypeAllocSize(*((llvm::DataLayout **)this + 7), *((llvm::Type **)this + 23));
    uint64_t v62 = v35;
    long long v36 = (llvm::LLVMContext *)llvm::TypeSize::operator unsigned long long();
    llvm::Attribute::getWithDereferenceableBytes(v34, v36);
    llvm::AttrBuilder::addAttribute();
    uint64_t v37 = llvm::AttributeSet::get();
    uint64_t inserted = 0;
    uint64_t v38 = v55[0];
    uint64_t v39 = llvm::PointerType::get();
    uint64_t inserted = (llvm::Function *)MetalModulePass::insertArgument((uint64_t)this, (uint64_t)v38, v39, v37, 1, "shader_validation_args", 1);
    uint64_t v40 = *((void *)inserted + 10);
    if (v40) {
      uint64_t v41 = (llvm::BasicBlock *)(v40 - 24);
    }
    else {
      uint64_t v41 = 0;
    }
    FirstNonPHI = (llvm::Value *)llvm::BasicBlock::getFirstNonPHI(v41);
    llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&TypeAllocSize, FirstNonPHI, 0, 0, 0);
    if (*((_WORD *)inserted + 9)) {
      llvm::Function::BuildLazyArguments(inserted);
    }
    uint64_t v43 = (llvm::Type *)*((void *)this + 23);
    __int16 v53 = 257;
    int v44 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateAlloca(&TypeAllocSize, v43, 0, (const llvm::Twine *)v52);
    llvm::TypeSize::operator unsigned long long();
    unint64_t v47 = v47 & 0xFFFFFFFFFFFF0000 | 0x103;
    unint64_t v48 = v48 & 0xFFFFFFFFFFFF0000 | 0x103;
    llvm::IRBuilderBase::CreateMemCpy((uint64_t)&TypeAllocSize, v44);
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v51, &inserted)[1] = v44;
    unsigned int v45 = llvm::TypeSize::operator unsigned long long();
    MetalModulePass::insertFunctionArgumentMD((uint64_t)this, v9, (llvm::LLVMContext *)"air.payload", (uint64_t)"mtl.shader_validation_args", (llvm::LLVMContext *)"shader_validation_args", 1, v45 | 0x100000000, v49);
    int v46 = inserted;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct((uint64_t *)this + 35, v55)[1] = v46;
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v65);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v64);
    if (TypeAllocSize != (llvm::Type *)v63) {
      free(TypeAllocSize);
    }
    BOOL v32 = (llvm::Type *)v57;
    uint64_t v33 = (llvm::Type *)&v59;
    goto LABEL_40;
  }
  unsigned int v12 = v10;
  TypeAllocSize = (llvm::Type *)*((void *)this + 23);
  uint64_t v62 = **((void **)*PayloadArg + 2);
  int v13 = (llvm::Type *)llvm::StructType::get();
  uint64_t v14 = *(void *)(v9 - 8 * *(unsigned int *)(v9 + 8) + 16);
  uint64_t v15 = *(void *)(v14 - 8 * *(unsigned int *)(v14 + 8) + 8 * v12);
  unsigned int v16 = *(_DWORD *)(v15 + 8);
  if (!v16) {
    goto LABEL_28;
  }
  uint64_t v17 = 0;
  while (1)
  {
    BOOL v18 = *(llvm::MDString **)(v15 - 8 * v16 + 8 * v17);
    if (!*(unsigned char *)v18) {
      break;
    }
LABEL_25:
    if (++v17 >= (unint64_t)v16) {
      goto LABEL_26;
    }
  }
  uint64_t String = llvm::MDString::getString(v18);
  if (v20 != 17)
  {
    unsigned int v16 = *(_DWORD *)(v15 + 8);
    goto LABEL_25;
  }
  BOOL v22 = *(void *)String == 0x5F6772612E726961
     && *(void *)(String + 8) == 0x7A69735F65707974
     && *(unsigned char *)(String + 16) == 101;
  unsigned int v16 = *(_DWORD *)(v15 + 8);
  if (!v22) {
    goto LABEL_25;
  }
LABEL_26:
  if (v16 > v17)
  {
    TypeAllocSize = (llvm::Type *)((llvm::DataLayout::getTypeSizeInBits(*((llvm::DataLayout **)this + 7), v13) + 7) >> 3);
    uint64_t v62 = v23 == 1;
    llvm::TypeSize::operator unsigned long long();
    MetalModulePass::getMetadata<unsigned int>();
    llvm::MDNode::replaceOperandWith();
  }
LABEL_28:
  uint64_t v24 = *((void *)v55[0] + 10);
  if (v24) {
    uint64_t v25 = (llvm::BasicBlock *)(v24 - 24);
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = (llvm::Value *)llvm::BasicBlock::getFirstNonPHI(v25);
  BOOL v27 = (llvm::BasicBlock **)llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&TypeAllocSize, v26, 0, 0, 0);
  uint64_t v28 = (llvm::Type *)*((void *)this + 23);
  __int16 v60 = 257;
  uint64_t Alloca = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateAlloca(v27, v28, 0, (const llvm::Twine *)&v56);
  uint64_t v30 = (llvm::Type *)llvm::PointerType::get();
  __int16 v60 = 257;
  BitOrPointeruint64_t Cast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)&TypeAllocSize, PayloadArg, v30, (const llvm::Twine *)&v56);
  __int16 v60 = 257;
  llvm::IRBuilderBase::CreateConstInBoundsGEP2_32(&TypeAllocSize, v13, BitOrPointerCast, 0, 1u, (const llvm::Twine *)&v56);
  llvm::Value::replaceAllUsesWith();
  llvm::PHINode::setIncomingValue((uint64_t)BitOrPointerCast, 0, (uint64_t)PayloadArg);
  __int16 v60 = 257;
  llvm::IRBuilderBase::CreateConstInBoundsGEP2_32(&TypeAllocSize, v13, BitOrPointerCast, 0, 0, (const llvm::Twine *)&v56);
  llvm::TypeSize::operator unsigned long long();
  unint64_t v1 = v1 & 0xFFFFFFFFFFFF0000 | 0x103;
  unint64_t v50 = v50 & 0xFFFFFFFFFFFF0000 | 0x103;
  llvm::IRBuilderBase::CreateMemCpy((uint64_t)&TypeAllocSize, Alloca);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v51, v55)[1] = Alloca;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v65);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v64);
  BOOL v32 = TypeAllocSize;
  uint64_t v33 = (llvm::Type *)v63;
LABEL_40:
  if (v32 != v33) {
    free(v32);
  }
  MTLGVEmulation::updateIndirectCalls(this, v55[0]);
  while (1)
  {
    i += 2;
    if (i == (void *)v8) {
      break;
    }
    if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (i != (void *)v8) {
        goto LABEL_10;
      }
      return;
    }
  }
}

void sub_25574A06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)(v32 - 248));
  if (a32 != a17) {
    free(a32);
  }
  _Unwind_Resume(a1);
}

void MTLGVEmulation::updateIntersectCalls(MTLGVEmulation *this)
{
  uint8_t v54[4] = *MEMORY[0x263EF8340];
  int v52 = v54;
  uint64_t v53 = 0x400000000;
  int v46 = &v52;
  llvm::InstVisitor<MTLGVEmulation::updateIntersectCalls(void)::IntersectVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>>((uint64_t)&v46, *(void *)(*((void *)this + 6) + 32), *((void *)this + 6) + 24);
  uint64_t v2 = v52;
  if (v53)
  {
    int v3 = (uint64_t *)((char *)this + 304);
    uint64_t v4 = 8 * v53;
    do
    {
      uint64_t v5 = *v2;
      uint64_t v6 = *(void *)(*v2 - 32);
      if (!v6 || *(unsigned char *)(v6 + 16) || *(void *)(v6 + 24) != *(void *)(v5 + 72)) {
        uint64_t v6 = 0;
      }
      uint64_t Name = (void *)llvm::Value::getName((llvm::Value *)v6);
      uint64_t v48 = v7;
      if (llvm::StringRef::find() == -1) {
        unsigned int v8 = 6;
      }
      else {
        unsigned int v8 = 7;
      }
      if (llvm::StringRef::find() != -1 || llvm::StringRef::find() != -1) {
        ++v8;
      }
      uint64_t v9 = v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF);
      unsigned int v10 = *(llvm::LLVMContext **)(v9 + 32 * v8);
      if (v10) {
        BOOL v11 = *((unsigned char *)v10 + 16) == 19;
      }
      else {
        BOOL v11 = 0;
      }
      if (v11)
      {
        FirstNonPHI = (llvm::Value *)llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v5 + 40));
        llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, FirstNonPHI, 0, 0, 0);
        unint64_t v43 = *(void *)(*(void *)(v5 + 40) + 56);
        uint64_t v32 = (llvm::Type **)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v3, &v43)[1];
        uint64_t v33 = (llvm::Type *)llvm::PointerType::get();
        __int16 v45 = 257;
        BitOrPointeruint64_t Cast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)&Name, v32, v33, (const llvm::Twine *)&v43);
        unint64_t v43 = (llvm::DataLayout::getTypeSizeInBits(*((llvm::DataLayout **)this + 7), *((llvm::Type **)this + 23)) + 7) >> 3;
        BOOL v44 = v35 == 1;
        llvm::CallBase::setArgOperand(v5, v8, (uint64_t)BitOrPointerCast);
        llvm::TypeSize::operator unsigned long long();
        uint64_t v36 = llvm::ConstantInt::get();
        llvm::CallBase::setArgOperand(v5, v8 + 1, v36);
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v51);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v50);
        if (Name != v49) {
          free(Name);
        }
      }
      else
      {
        uint64_t v12 = *(void *)(v9 + 32 * (v8 + 1));
        if (*(unsigned char *)(v12 + 16) == 16) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t Name = (void *)*((void *)this + 23);
        uint64_t v14 = (llvm::Type **)(v13 + 24);
        if (*(_DWORD *)(v13 + 32) >= 0x41u) {
          uint64_t v14 = *(llvm::Type ***)(v13 + 24);
        }
        uint64_t v48 = llvm::ArrayType::get(*((llvm::ArrayType **)this + 12), *v14);
        uint64_t v15 = (llvm::Type *)llvm::StructType::get();
        uint64_t Name = *(void **)(*(void *)(v5 + 40) + 56);
        unsigned int v16 = (llvm::Type **)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v3, &Name)[1];
        uint64_t v17 = *(void *)(*(void *)(*(void *)(v5 + 40) + 56) + 80);
        if (v17) {
          BOOL v18 = (llvm::BasicBlock *)(v17 - 24);
        }
        else {
          BOOL v18 = 0;
        }
        llvm::BasicBlock::getFirstNonPHI(v18);
        uint64_t v19 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x48);
        v49[8] = 257;
        llvm::AllocaInst::AllocaInst();
        llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)&Name, (llvm::Value *)v5, 0, 0, 0);
        __int16 v45 = 257;
        ConstInBoundsGEP2_32 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateConstInBoundsGEP2_32((llvm::Type **)&Name, v15, v19, 0, 0, (const llvm::Twine *)&v43);
        uint64_t v21 = (llvm::Type *)llvm::PointerType::get();
        __int16 v45 = 257;
        llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)&Name, v16, v21, (const llvm::Twine *)&v43);
        unint64_t v43 = (llvm::DataLayout::getTypeSizeInBits(*((llvm::DataLayout **)this + 7), *((llvm::Type **)this + 23)) + 7) >> 3;
        BOOL v44 = v22 == 1;
        llvm::TypeSize::operator unsigned long long();
        unint64_t v41 = v41 & 0xFFFFFFFFFFFF0000 | 0x103;
        unint64_t v42 = v42 & 0xFFFFFFFFFFFF0000 | 0x103;
        llvm::IRBuilderBase::CreateMemCpy((uint64_t)&Name, ConstInBoundsGEP2_32);
        __int16 v45 = 257;
        int v23 = (llvm::LLVMContext *)llvm::IRBuilderBase::CreateConstInBoundsGEP2_32((llvm::Type **)&Name, v15, v19, 0, 1u, (const llvm::Twine *)&v43);
        unint64_t v39 = v39 & 0xFFFFFFFFFFFF0000 | 0x103;
        unint64_t v40 = v40 & 0xFFFFFFFFFFFF0000 | 0x103;
        llvm::IRBuilderBase::CreateMemCpy((uint64_t)&Name, v23);
        uint64_t v24 = llvm::PointerType::get();
        __int16 v45 = 257;
        uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)&Name, 49, (uint64_t)v19, v24, (uint64_t)&v43);
        llvm::CallBase::setArgOperand(v5, v8, Cast);
        unint64_t v43 = (llvm::DataLayout::getTypeSizeInBits(*((llvm::DataLayout **)this + 7), v15) + 7) >> 3;
        BOOL v44 = v26 == 1;
        llvm::TypeSize::operator unsigned long long();
        uint64_t v27 = llvm::ConstantInt::get();
        llvm::CallBase::setArgOperand(v5, v8 + 1, v27);
        uint64_t v28 = *(void *)(v5 + 32);
        if (v28) {
          BOOL v29 = v28 == *(void *)(v5 + 40) + 40;
        }
        else {
          BOOL v29 = 1;
        }
        if (v29) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = (llvm::Instruction *)(v28 - 24);
        }
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&Name, v30);
        unint64_t v37 = v37 & 0xFFFFFFFFFFFF0000 | 0x103;
        unint64_t v38 = v38 & 0xFFFFFFFFFFFF0000 | 0x103;
        llvm::IRBuilderBase::CreateMemCpy((uint64_t)&Name, v10);
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v51);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v50);
        if (Name != v49) {
          free(Name);
        }
        int v3 = (uint64_t *)((char *)this + 304);
      }
      ++v2;
      v4 -= 8;
    }
    while (v4);
    uint64_t v2 = v52;
  }
  if (v2 != v54) {
    free(v2);
  }
}

void sub_25574A6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  unint64_t v39 = *(void **)(v37 - 144);
  if (v39 != v36) {
    free(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLGVEmulation::updateAIRFunctionMetadata(MTLGVEmulation *this)
{
  uint64_t v2 = 0;
  int v3 = (uint64_t *)((char *)this + 280);
  do
  {
    uint64_t v4 = off_2653C2820[v2];
    uint64_t v5 = (llvm::Module *)*((void *)this + 6);
    __int16 v12 = 257;
    if (*v4)
    {
      v11[0] = v4;
      char v6 = 3;
    }
    else
    {
      char v6 = 1;
    }
    LOBYTE(v12) = v6;
    uint64_t result = llvm::Module::getNamedMetadata(v5, (const llvm::Twine *)v11);
    if (result)
    {
      unsigned int v8 = (llvm::NamedMDNode *)result;
      uint64_t result = llvm::NamedMDNode::getNumOperands((llvm::NamedMDNode *)result);
      if (result)
      {
        int v9 = result;
        for (int i = 0; i != v9; ++i)
        {
          uint64_t result = llvm::NamedMDNode::getOperand(v8);
          if (!*(void *)(*(void *)(result - 8 * *(unsigned int *)(result + 8)) + 128)) {
            break;
          }
          v11[0] = *(void *)(*(void *)(result - 8 * *(unsigned int *)(result + 8)) + 128);
          uint64_t v13 = 0;
          uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(v3, v11, &v13);
          if (result)
          {
            uint64_t result = *(void *)(v13 + 8);
            if (result)
            {
              llvm::ValueAsMetadata::get();
              uint64_t result = llvm::MDNode::replaceOperandWith();
            }
          }
        }
      }
    }
    ++v2;
  }
  while (v2 != 5);
  return result;
}

uint64_t MTLGVEmulation::removeGVUsages(uint64_t this)
{
  v29[8] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(unsigned int *)(this + 240);
  if (v1)
  {
    uint64_t v2 = *(llvm::Value ***)(this + 232);
    uint64_t v21 = (llvm::StringMapImpl *)(this + 200);
    int v3 = (uint64_t *)(this + 304);
    uint64_t v20 = &v2[v1];
    do
    {
      uint64_t Name = (const void *)llvm::Value::getName(*v2);
      llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<>(v21, Name, v5);
      v22[0] = *((void *)*v2 + 1);
      v22[1] = 0;
      llvm::SmallVector<llvm::User *,8u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v27, v22);
      char v6 = (char *)v27;
      if (v28)
      {
        uint64_t v7 = 8 * v28;
        do
        {
          unsigned int v8 = *(llvm::Instruction **)v6;
          int v9 = *(unsigned __int8 *)(*(void *)v6 + 16);
          if (*(void *)v6 && v9 == 61)
          {
            uint64_t v24 = *(void *)(*((void *)v8 + 5) + 56);
            unsigned int v10 = (uint64_t *)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v3, &v24)[1];
            uint64_t v11 = **(void **)(*v10 + 16);
            uint64_t v25 = (uint64_t *)llvm::ConstantInt::get();
            uint64_t v26 = llvm::ConstantInt::get();
            __int16 v23 = 257;
            __int16 v12 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(v11, v10, &v25, 2);
            llvm::GetElementPtrInst::setIsInBounds(v12);
            llvm::Instruction::insertBefore(v12, v8);
            uint64_t v13 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40);
            llvm::StoreInst::StoreInst();
            llvm::ReplaceInstWithInst(v8, v13, v14);
          }
          else
          {
            if (v9 != 60) {
              unsigned int v8 = 0;
            }
            uint64_t v24 = *(void *)(*((void *)v8 + 5) + 56);
            uint64_t v15 = (uint64_t *)llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v3, &v24)[1];
            uint64_t v16 = **(void **)(*v15 + 16);
            uint64_t v25 = (uint64_t *)llvm::ConstantInt::get();
            uint64_t v26 = llvm::ConstantInt::get();
            __int16 v23 = 257;
            uint64_t v17 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(v16, v15, &v25, 2);
            llvm::GetElementPtrInst::setIsInBounds(v17);
            llvm::Instruction::insertBefore(v17, v8);
            BOOL v18 = (llvm::Instruction *)llvm::User::operator new((llvm::User *)0x40);
            __int16 v23 = 257;
            llvm::LoadInst::LoadInst();
            llvm::ReplaceInstWithInst(v8, v18, v19);
          }
          v6 += 8;
          v7 -= 8;
        }
        while (v7);
        char v6 = (char *)v27;
      }
      if (v6 != (char *)v29) {
        free(v6);
      }
      llvm::UndefValue::get();
      llvm::Value::replaceAllUsesWith();
      this = llvm::GlobalVariable::eraseFromParent(*v2++);
    }
    while (v2 != v20);
  }
  return this;
}

void sub_25574AB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
}

void MTLGVEmulation::updateAIRDyldTable(MTLGVEmulation *this)
{
  v22[8] = *MEMORY[0x263EF8340];
  uint64_t GlobalVariable = (llvm::GlobalValue *)llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    int v3 = GlobalVariable;
    if ((llvm::GlobalValue::isDeclaration(GlobalVariable) & 1) == 0)
    {
      uint64_t v4 = (llvm::Constant *)*((void *)v3 - 4);
      int v5 = *((_DWORD *)v4 + 5);
      uint64_t v19 = 0;
      llvm::SmallVector<llvm::Constant *,8u>::SmallVector(&v20, v5 & 0x7FFFFFF, (uint64_t *)&v19);
      unint64_t v6 = *((_DWORD *)v4 + 5) & 0x7FFFFFF;
      if ((*((_DWORD *)v4 + 5) & 0x7FFFFFF) != 0)
      {
        unint64_t v7 = 0;
        unsigned int v8 = v4;
        do
        {
          *((void *)v20 + v7++) = *((void *)v8 - 4 * v6);
          unint64_t v6 = *((_DWORD *)v4 + 5) & 0x7FFFFFF;
          unsigned int v8 = (llvm::Constant *)((char *)v8 + 32);
        }
        while (v7 < v6);
      }
      int v9 = (llvm::Value **)v20;
      if (v21)
      {
        unsigned int v10 = (llvm::Value **)((char *)v20 + 8 * v21);
        uint64_t v11 = (uint64_t *)((char *)this + 280);
        do
        {
          for (int i = *v9; ; int i = (llvm::Value *)*((void *)i - 4 * (*((_DWORD *)i + 5) & 0x7FFFFFF)))
          {
            int v13 = *((unsigned __int8 *)i + 16);
            if (v13 != 5) {
              break;
            }
            isuint64_t Cast = (llvm *)llvm::ConstantExpr::isCast(i);
            if ((isCast & 1) == 0)
            {
              uint64_t v15 = (llvm::raw_ostream *)llvm::dbgs(isCast);
              llvm::raw_ostream::operator<<(v15, "non-cast constexpr in air.dyld_flat_table", 0x29uLL);
              llvm::Value::dump(i);
              int v13 = *((unsigned __int8 *)i + 16);
              break;
            }
          }
          if (!v13)
          {
            uint64_t v18 = 0;
            uint64_t v19 = i;
            uint64_t v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>,llvm::CallGraphNode *,unsigned int,llvm::DenseMapInfo<llvm::CallGraphNode *,void>,llvm::detail::DenseMapPair<llvm::CallGraphNode *,unsigned int>>::LookupBucketFor<llvm::CallGraphNode *>(v11, &v19, &v18);
            if ((v16 & 1) != 0 && (uint64_t v16 = *(void *)(v18 + 8)) != 0)
            {
              llvm::Value *v9 = (llvm::Value *)llvm::ConstantExpr::getPointerCast();
            }
            else
            {
              uint64_t v17 = (llvm::raw_ostream *)llvm::dbgs((llvm *)v16);
              llvm::raw_ostream::operator<<(v17, "Missing replacement for function in air.dyld_flat_table", 0x37uLL);
              llvm::Value::dump(v3);
              llvm::Value::dump(*v9);
            }
          }
          ++v9;
        }
        while (v9 != v10);
      }
      llvm::ConstantArray::get();
      llvm::GlobalVariable::setInitializer();
      llvm::UndefValue::get();
      llvm::Value::replaceAllUsesWith();
      llvm::Constant::destroyConstant(v4);
      if (v20 != v22) {
        free(v20);
      }
    }
  }
}

void sub_25574AE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void MTLGVEmulation::updateFunctionUses(MTLGVEmulation *this, llvm::Function *a2, llvm::Function *a3)
{
  void v43[4] = *MEMORY[0x263EF8340];
  unint64_t v38 = (void *)*((void *)a2 + 1);
  uint64_t v39 = 0;
  llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v41, (uint64_t *)&v38);
  unint64_t v6 = (llvm::CallBase **)v41;
  if (!v42) {
    goto LABEL_48;
  }
  unint64_t v7 = (llvm::CallBase **)((char *)v41 + 8 * v42);
  unsigned int v8 = (uint64_t *)((char *)this + 304);
  do
  {
    int v9 = *v6;
    unsigned int v10 = *((unsigned __int8 *)*v6 + 16);
    if (*v6 && v10 == 84)
    {
      if (*((llvm::Function **)v9 - 4) == a2)
      {
        int NumArgOperands = llvm::compat::getNumArgOperands(*v6);
        v35[0] = 0;
        llvm::SmallVector<llvm::Value *,8u>::SmallVector(&v38, (NumArgOperands + 1), v35);
        uint64_t v37 = *(void *)(*((void *)v9 + 5) + 56);
        __int16 v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct(v8, &v37);
        unint64_t v13 = 0;
        *(void *)unint64_t v38 = v12[1];
        uint64_t v14 = v9;
        while (v13 < llvm::compat::getNumArgOperands(v9))
        {
          uint64_t v15 = (char *)v38 + 8 * v13++;
          *((void *)v15 + 1) = *((void *)v14 - 4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF));
          uint64_t v14 = (llvm::CallBase *)((char *)v14 + 32);
        }
        if (a3) {
          uint64_t v21 = *((void *)a3 + 3);
        }
        else {
          uint64_t v21 = 0;
        }
        __int16 v36 = 257;
        uint64_t v32 = (llvm::Instruction *)llvm::CallInst::Create(v21, (uint64_t)a3, (uint64_t)v38, v39, 0, 0);
        __int16 v33 = *((_WORD *)v32 + 9) & 0xFFFC | *((_WORD *)v9 + 9) & 3;
        *((_WORD *)v32 + 9) = v33;
        *((_WORD *)v32 + 9) = v33 & 0xF003 | *((_WORD *)v9 + 9) & 0xFFC;
        llvm::ReplaceInstWithInst(v9, v32, v34);
        if (v38 != v40) {
          free(v38);
        }
        goto LABEL_46;
      }
LABEL_14:
      if (*((void *)a2 + 3) != *((void *)a3 + 3))
      {
        v40[8] = 257;
        Pointeruint64_t Cast = (llvm::Instruction *)llvm::CastInst::CreatePointerCast();
        uint64_t v18 = PointerCast;
        if (*((unsigned char *)v9 + 16) != 83 || v9 == 0)
        {
          llvm::Instruction::insertBefore(PointerCast, v9);
        }
        else
        {
          int v22 = *((_DWORD *)v9 + 5);
          unint64_t v23 = v22 & 0x7FFFFFF;
          if ((v22 & 0x7FFFFFF) != 0)
          {
            uint64_t v24 = 0;
            unint64_t v25 = 0;
            do
            {
              if ((v22 & 0x40000000) != 0) {
                uint64_t v26 = (char *)*((void *)v9 - 1);
              }
              else {
                uint64_t v26 = (char *)v9 - 32 * v23;
              }
              if (*(llvm::Function **)&v26[v24] == a2)
              {
                uint64_t v27 = *(void *)&v26[32 * *((unsigned int *)v9 + 15) + 8 * v25];
                uint64_t v28 = *(void *)(v27 + 40);
                if (v28 == v27 + 40)
                {
                  uint64_t v31 = 0;
                }
                else
                {
                  BOOL v29 = (llvm::Instruction *)(v28 - 24);
                  if (v28) {
                    uint64_t v30 = v28 - 24;
                  }
                  else {
                    uint64_t v30 = 0;
                  }
                  if (*(unsigned __int8 *)(v30 + 16) - 29 >= 0xB) {
                    uint64_t v31 = 0;
                  }
                  else {
                    uint64_t v31 = v29;
                  }
                }
                llvm::Instruction::insertBefore(v18, v31);
                int v22 = *((_DWORD *)v9 + 5);
              }
              ++v25;
              unint64_t v23 = v22 & 0x7FFFFFF;
              v24 += 32;
            }
            while (v25 < v23);
          }
        }
      }
      llvm::User::replaceUsesOfWith();
      goto LABEL_46;
    }
    if (v9) {
      BOOL v16 = v10 > 0x14;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16) {
      goto LABEL_14;
    }
    if (llvm::Value::hasNUsesOrMore(*v6))
    {
      llvm::ConstantExpr::getBitCast();
      llvm::Constant::handleOperandChange();
    }
LABEL_46:
    ++v6;
  }
  while (v6 != v7);
  unint64_t v6 = (llvm::CallBase **)v41;
LABEL_48:
  if (v6 != v43) {
    free(v6);
  }
}

void sub_25574B18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
}

void MTLGVEmulation::updateIndirectCalls(MTLGVEmulation *this, llvm::Function *a2)
{
  v32[4] = *MEMORY[0x263EF8340];
  uint64_t v26 = a2;
  uint64_t v30 = (char *)v32;
  uint64_t v31 = 0x400000000;
  uint64_t v2 = (char *)a2 + 72;
  int v3 = (char *)*((void *)a2 + 10);
  if (v3 != (char *)a2 + 72)
  {
    while (1)
    {
      int v5 = v3 - 24;
      if (!v3) {
        int v5 = 0;
      }
      unint64_t v6 = (char *)*((void *)v5 + 6);
      if (v6 != v5 + 40) {
        break;
      }
      int v3 = (char *)*((void *)v3 + 1);
      if (v3 == v2) {
        return;
      }
    }
    if (v3 != v2)
    {
      while (1)
      {
        unint64_t v7 = v6 - 24;
        if (!v6) {
          unint64_t v7 = 0;
        }
        if (v7[16] == 84)
        {
          uint64_t v27 = v7;
          uint64_t v8 = *((void *)v7 - 4);
          if (!v8 || *(unsigned char *)(v8 + 16) || *(void *)(v8 + 24) != *((void *)v7 + 9)) {
            llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v30, (uint64_t *)&v27);
          }
        }
        unint64_t v6 = (char *)*((void *)v6 + 1);
        int v9 = v3 - 24;
        if (!v3) {
          int v9 = 0;
        }
        if (v6 == v9 + 40) {
          break;
        }
LABEL_22:
        if (v3 == v2) {
          goto LABEL_23;
        }
      }
      while (1)
      {
        int v3 = (char *)*((void *)v3 + 1);
        if (v3 == v2) {
          break;
        }
        unsigned int v10 = v3 - 24;
        if (!v3) {
          unsigned int v10 = 0;
        }
        unint64_t v6 = (char *)*((void *)v10 + 6);
        if (v6 != v10 + 40) {
          goto LABEL_22;
        }
      }
LABEL_23:
      uint64_t v11 = v30;
      if (v31)
      {
        unint64_t v23 = &v30[8 * v31];
        do
        {
          uint64_t v12 = *(void *)v11;
          uint64_t inserted = MetalModulePass::insertArgumentType((uint64_t)this, *(void *)(*(void *)v11 + 72), *((void *)this + 24), 0);
          llvm::PointerType::get();
          v29[8] = 257;
          Pointeruint64_t Cast = (llvm::Instruction *)llvm::CastInst::CreatePointerCast();
          llvm::Instruction::insertBefore(PointerCast, (llvm::Instruction *)v12);
          int NumArgOperands = llvm::compat::getNumArgOperands((llvm::CallBase *)v12);
          v24[0] = 0;
          llvm::SmallVector<llvm::Value *,8u>::SmallVector(&v27, (NumArgOperands + 1), v24);
          BOOL v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>,llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::FindAndConstruct((uint64_t *)this + 38, &v26);
          unint64_t v17 = 0;
          *(void *)uint64_t v27 = v16[1];
          uint64_t v18 = v12;
          while (v17 < llvm::compat::getNumArgOperands((llvm::CallBase *)v12))
          {
            uint64_t v19 = (char *)v27 + 8 * v17++;
            *((void *)v19 + 1) = *(void *)(v18 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
            v18 += 32;
          }
          __int16 v25 = 257;
          uint64_t v20 = (llvm::Instruction *)llvm::CallInst::Create(inserted, (uint64_t)PointerCast, (uint64_t)v27, v28, 0, 0);
          int v21 = *((_WORD *)v20 + 9) & 0xF003 | (4 * ((*(unsigned __int16 *)(v12 + 18) >> 2) & 0x3FF));
          *((_WORD *)v20 + 9) = v21;
          *((_WORD *)v20 + 9) = v21 & 0xFFFC | *(_WORD *)(v12 + 18) & 3;
          llvm::ReplaceInstWithInst((llvm *)v12, v20, v22);
          llvm::User::replaceUsesOfWith();
          if (v27 != v29) {
            free(v27);
          }
          v11 += 8;
        }
        while (v11 != v23);
        uint64_t v11 = v30;
      }
      if (v11 != (char *)v32) {
        free(v11);
      }
    }
  }
}

void sub_25574B514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  int v21 = *(void **)(v19 - 144);
  if (v21 != a10) {
    free(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<GVStructElementInfo>(llvm::StringMapImpl *a1, const void *a2, size_t a3, _OWORD *a4)
{
  int i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v9 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    while (!v9 || v9 == -8)
    {
      uint64_t v10 = i[1];
      ++i;
      uint64_t v9 = v10;
    }
    return i;
  }
  uint64_t v11 = MEMORY[0x25A28D370](a3 + 25, 8);
  uint64_t v12 = v11;
  uint64_t v13 = v11 + 24;
  if (a3) {
    memcpy((void *)(v11 + 24), a2, a3);
  }
  *(unsigned char *)(v13 + a3) = 0;
  *(void *)uint64_t v12 = a3;
  *(_OWORD *)(v12 + 8) = *a4;
  uint64_t *i = v12;
  ++*((_DWORD *)a1 + 3);
  for (int i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t *llvm::StringMap<GVStructElementInfo,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  int i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  uint64_t v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      uint64_t v8 = i[1];
      ++i;
      uint64_t v7 = v8;
    }
    return i;
  }
  uint64_t v9 = MEMORY[0x25A28D370](a3 + 25, 8);
  uint64_t v10 = (void *)v9;
  uint64_t v11 = v9 + 24;
  if (a3) {
    memcpy((void *)(v9 + 24), a2, a3);
  }
  *(unsigned char *)(v11 + a3) = 0;
  v10[1] = 0;
  void v10[2] = 0;
  *uint64_t v10 = a3;
  uint64_t *i = (uint64_t)v10;
  ++*((_DWORD *)a1 + 3);
  for (int i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

void *llvm::SmallVector<std::reference_wrapper<llvm::Function>,8u>::SmallVector<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>>(void *a1, uint64_t *a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<std::reference_wrapper<llvm::Function>>::append<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,void>((uint64_t)a1, *a2, a2[1]);
  return a1;
}

void sub_25574B7BC(_Unwind_Exception *exception_object)
{
  int v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::IRBuilderBase::CreateAlloca(llvm::BasicBlock **this, llvm::Type *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t Module = (llvm::Module *)llvm::BasicBlock::getModule(this[6]);
  DataLayout = (llvm::DataLayout *)llvm::Module::getDataLayout(Module);
  llvm::DataLayout::getPrefTypeAlign(DataLayout, a2);
  uint64_t v9 = llvm::User::operator new((llvm::User *)0x48);
  llvm::AllocaInst::AllocaInst();
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v9, (uint64_t)a4);
}

void sub_25574B88C(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLGVEmulation::getPayloadArg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 - 8 * *(unsigned int *)(a3 + 8) + 16);
  unint64_t v4 = *(unsigned int *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(v3 - 8 * v4 + 8 * v6);
    uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8));
    if (v9 == 11 && *String == 0x6C7961702E726961 && *(void *)((char *)String + 3) == 0x64616F6C7961702ELL) {
      break;
    }
    ++v6;
    unint64_t v4 = *(unsigned int *)(v3 + 8);
    if (v6 >= v4) {
      return 0;
    }
  }
  uint64_t v12 = *(void *)(*(void *)(v7 - 8 * *(unsigned int *)(v7 + 8)) + 128);
  uint64_t v13 = (void *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u) {
    uint64_t v13 = (void *)*v13;
  }
  uint64_t v14 = (void *)*v13;
  if (*(_WORD *)(a2 + 18)) {
    llvm::Function::BuildLazyArguments((llvm::Function *)a2);
  }
  return *(void *)(a2 + 88) + 40 * (void)v14;
}

uint64_t llvm::IRBuilderBase::CreateMemCpy(uint64_t a1, llvm::LLVMContext *a2)
{
  return llvm::IRBuilderBase::CreateMemTransferInst();
}

uint64_t llvm::IRBuilderBase::CreateConstInBoundsGEP2_32(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unsigned int a4, unsigned int a5, const llvm::Twine *a6)
{
  void v13[2] = *(uint64_t **)MEMORY[0x263EF8340];
  llvm::Type::getInt32Ty(this[8], a2);
  v13[0] = (uint64_t *)llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(this[8], v10);
  v13[1] = (uint64_t *)llvm::ConstantInt::get();
  uint64_t result = (*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, uint64_t))(*(void *)this[9] + 48))(this[9], a2, a3, v13, 2, 1);
  if (!result)
  {
    uint64_t v12 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, v13, 2);
    llvm::GetElementPtrInst::setIsInBounds(v12);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)v12, (uint64_t)a6);
  }
  return result;
}

uint64_t llvm::InstVisitor<MTLGVEmulation::updateIntersectCalls(void)::IntersectVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = *(void *)(a2 + 8);
      uint64_t v6 = a2 - 56;
      if (!a2) {
        uint64_t v6 = 0;
      }
      uint64_t v7 = v6 + 72;
      uint64_t v8 = *(void *)(v6 + 80);
      if (v8 != v7)
      {
        do
        {
          uint64_t v9 = *(void *)(v8 + 8);
          if (v8) {
            uint64_t v10 = v8 - 24;
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t result = llvm::InstVisitor<MTLGVEmulation::updateIntersectCalls(void)::IntersectVisitor,void>::visit(v4, v10);
          uint64_t v8 = v9;
        }
        while (v9 != v7);
      }
      a2 = v5;
    }
    while (v5 != a3);
  }
  return result;
}

uint64_t llvm::InstVisitor<MTLGVEmulation::updateIntersectCalls(void)::IntersectVisitor,void>::visit(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = *(void *)(a2 + 48);
  if (v3 != a2 + 40)
  {
    uint64_t v4 = (uint64_t *)result;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8);
      if (v3) {
        uint64_t v6 = v3 - 24;
      }
      else {
        uint64_t v6 = 0;
      }
      if (*(unsigned char *)(v6 + 16) == 84) {
        uint64_t result = MTLGVEmulation::updateIntersectCalls(void)::IntersectVisitor::visitCallInst(v4, v6);
      }
      uint64_t v3 = v5;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t MTLGVEmulation::updateIntersectCalls(void)::IntersectVisitor::visitCallInst(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 - 32);
  if (result)
  {
    if (!*(unsigned char *)(result + 16) && *(void *)(result + 24) == *(void *)(a2 + 72))
    {
      uint64_t result = llvm::Value::getName((llvm::Value *)result);
      if (v5 >= 0xD && *(void *)result == 0x65746E692E726961 && *(void *)(result + 5) == 0x746365737265746ELL)
      {
        uint64_t v7 = *a1;
        uint64_t v8 = a2;
        return llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>(v7, &v8);
      }
    }
  }
  return result;
}

void *llvm::SmallVector<llvm::Constant *,8u>::SmallVector(void *a1, unint64_t a2, uint64_t *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)a1, a2, *a3);
  return a1;
}

void sub_25574BD54(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

llvm::Module *MTLAddPostVertexDumpingToModulePass::addPostVertexDumpingToModule(int a1, llvm::Module *this, int a3, int a4, std::string *a5, uint64_t *a6, int a7)
{
  uint64_t v227 = a5;
  LODWORD(v230) = a4;
  v291[38] = *MEMORY[0x263EF8340];
  v234 = *(llvm::Type **)this;
  v277[0] = "air.vertex";
  v278[8] = 259;
  unint64_t v228 = this;
  NamedMetaint data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v277);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  uint64_t v12 = *(unsigned int *)(Operand + 8);
  uint64_t v220 = Operand;
  uint64_t v13 = *(void *)(*(void *)(Operand - 8 * v12) + 128);
  memset(v263, 0, sizeof(v263));
  std::vector<BOOL>::reserve(v263, *(void *)(v13 + 96));
  unint64_t v261 = 0;
  unint64_t v260 = 0;
  v262 = 0;
  std::vector<llvm::Metadata *>::reserve((void **)&v260, *(void *)(v13 + 96));
  int64_t v258 = 0;
  v257 = 0;
  long long v259 = 0;
  std::vector<llvm::Metadata *>::reserve((void **)&v257, *(void *)(v13 + 96));
  uint64_t v14 = *(unsigned int *)(v220 + 8);
  if (v14 >= 4
    && (v15 = *(void *)(v220 - 8 * v14 + 24), uint64_t v16 = *(unsigned int *)(v15 + 8), v16 >= 2)
    && (uint64_t v17 = llvm::MDString::getString(*(llvm::MDString **)(v15 - 8 * v16)), v18 == 9)
    && (*(void *)v17 == 0x637461702E726961 ? (BOOL v19 = *(unsigned char *)(v17 + 8) == 104) : (BOOL v19 = 0), v19))
  {
    uint64_t String = (unint64_t *)llvm::MDString::getString(*(llvm::MDString **)(v15
                                                                              - 8 * *(unsigned int *)(v15 + 8)
                                                                              + 8));
    if (v206 == 8)
    {
      int v20 = 0;
      unint64_t v207 = bswap64(*String);
      BOOL v208 = v207 >= 0x747269616E676C65;
      int v209 = v207 > 0x747269616E676C65;
      int v210 = !v208;
      BOOL v19 = v209 == v210;
      uint64_t v211 = 1;
      if (!v19) {
        uint64_t v211 = 2;
      }
    }
    else
    {
      int v20 = 0;
      uint64_t v211 = 2;
    }
    uint64_t v215 = (llvm::IRBuilderDefaultInserter *)v211;
  }
  else
  {
    uint64_t v215 = 0;
    int v20 = 1;
  }
  v254 = 0;
  uint64_t v255 = 0;
  uint64_t v256 = 0;
  std::vector<llvm::Metadata *>::reserve((void **)&v254, 0xAuLL);
  LOBYTE(v277[0]) = -1;
  std::vector<signed char>::vector(v253, 0xAuLL, v277);
  std::vector<unsigned int>::vector(&v252, *(void *)(v13 + 96));
  BOOL v213 = NamedMetadata;
  uint64_t v21 = v220;
  MTLFrameworkPass::getArgumentMetadataIndices(*(void *)(v21 - 8 * *(unsigned int *)(v21 + 8) + 16), (uint64_t)&v252);
  uint64_t v22 = *(void *)(v21 - 8 * *(unsigned int *)(v21 + 8) + 16);
  uint64_t v23 = *(void *)(v13 + 96);
  if (*(_WORD *)(v13 + 18)) {
    llvm::Function::BuildLazyArguments((llvm::Function *)v13);
  }
  LODWORD(v217) = v20;
  LODWORD(v216) = a7;
  LODWORD(v214) = a3;
  uint64_t v224 = (llvm::Value *)v13;
  uint64_t v226 = a6;
  if ((int)v23 >= 1)
  {
    uint64_t v235 = 0;
    uint64_t v24 = 0;
    unint64_t v233 = 0;
    __int16 v25 = 0;
    uint64_t v26 = 0;
    uint64_t v229 = v23;
    uint64_t v27 = (uint64_t *)*((void *)v224 + 11);
    uint64_t v212 = &v256;
    uint64_t v218 = &v262;
    int v219 = &v259;
    uint64_t Int32Ty = &v276;
    while (1)
    {
      uint64_t v28 = v252.__begin_[(void)v25];
      if (v28 != -1) {
        break;
      }
      LOBYTE(v35) = 0;
      LODWORD(Int64Ty) = 0;
      LOBYTE(v36) = 0;
      uint64_t v231 = 0xFFFFFFFFLL;
      char v33 = 11;
LABEL_85:
      LOBYTE(v277[0]) = v36;
      std::vector<BOOL>::push_back((uint64_t)v263, v277);
      if (v24 >= v233)
      {
        unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v235) >> 2);
        unint64_t v84 = v83 + 1;
        if (v83 + 1 > 0x1555555555555555) {
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v85 = v22;
        __n128 v86 = (llvm::Value *)v26;
        if (0x5555555555555556 * ((v233 - v235) >> 2) > v84) {
          unint64_t v84 = 0x5555555555555556 * ((v233 - v235) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v233 - v235) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v87 = 0x1555555555555555;
        }
        else {
          unint64_t v87 = v84;
        }
        if (v87)
        {
          if (v87 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          __int16 v88 = (char *)operator new(12 * v87);
        }
        else
        {
          __int16 v88 = 0;
        }
        int v89 = Int64Ty;
        int v90 = v231;
        uint64_t v91 = &v88[12 * v83];
        *uint64_t v91 = v35;
        v91[1] = v33;
        *((_DWORD *)v91 + 1) = v90;
        *((_DWORD *)v91 + 2) = v89;
        if (v24 == v235)
        {
          uint64_t v235 = &v88[12 * v83];
        }
        else
        {
          unint64_t v92 = &v88[12 * v83];
          unint64_t v93 = v235;
          do
          {
            uint64_t v94 = *(void *)(v24 - 12);
            v24 -= 12;
            int v95 = *((_DWORD *)v24 + 2);
            *(void *)(v92 - 12) = v94;
            v92 -= 12;
            *((_DWORD *)v92 + 2) = v95;
          }
          while (v24 != v93);
          uint64_t v24 = v93;
          uint64_t v235 = v92;
        }
        unint64_t v233 = &v88[12 * v87];
        uint64_t v81 = v91 + 12;
        if (v24) {
          operator delete(v24);
        }
        uint64_t v26 = (uint64_t)v86;
        uint64_t v22 = v85;
      }
      else
      {
        *uint64_t v24 = v35;
        v24[1] = v33;
        uint64_t v81 = v24 + 12;
        int v82 = Int64Ty;
        *((_DWORD *)v24 + 1) = v231;
        *((_DWORD *)v24 + 2) = v82;
      }
      v27 += 5;
      ++v25;
      uint64_t v24 = v81;
      if (v25 == (unsigned char *)v229) {
        goto LABEL_108;
      }
    }
    uint64_t v29 = *(void *)(v22 - 8 * *(unsigned int *)(v22 + 8) + 8 * v28);
    DataLayout = (const llvm::DataLayout *)llvm::Module::getDataLayout(v228);
    llvm::DataLayout::DataLayout((llvm::DataLayout *)v277, DataLayout);
    MTLArgumentData::MTLArgumentData((MTLArgumentData *)&v266);
    long long v245 = 0uLL;
    LODWORD(v246) = 0;
    parseArgumentMetadata((uint64_t)&v266, v29, (uint64_t)v27, 0, (uint64_t)v277, 0, (uint64_t *)&v245, 7);
    unsigned int v32 = v266;
    if ((v266 & 2) != 0)
    {
      int v34 = DWORD2(v266);
    }
    else
    {
      if ((v266 & 4) != 0)
      {
        LOWORD(v264[0]) = 11;
        HIDWORD(v264[0]) = 0;
        uint64_t BuiltInInfo = vertexFetchBuiltInInfo((uint64_t)v264, (uint64_t)&v266);
        char v33 = v264[0];
        if (SLOBYTE(v264[0]) != 11)
        {
          uint64_t v231 = (unint64_t)(v255 - v254) >> 3;
          *((unsigned char *)v253[0] + SLOBYTE(v264[0])) = v231;
          uint64_t v56 = v255;
          if (v255 >= v256)
          {
            uint64_t v73 = (v255 - v254) >> 3;
            if ((unint64_t)(v73 + 1) >> 61) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v74 = (v256 - v254) >> 2;
            if (v74 <= v73 + 1) {
              unint64_t v74 = v73 + 1;
            }
            if ((unint64_t)(v256 - v254) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v75 = v74;
            }
            if (v75) {
              int v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)v212, v75);
            }
            else {
              int v76 = 0;
            }
            uint64_t v77 = &v76[8 * v73];
            *(void *)uint64_t v77 = v264[0];
            uint64_t v57 = v77 + 8;
            uint64_t v79 = v254;
            uint64_t v78 = v255;
            if (v255 != v254)
            {
              do
              {
                uint64_t v80 = *((void *)v78 - 1);
                v78 -= 8;
                *((void *)v77 - 1) = v80;
                v77 -= 8;
              }
              while (v78 != v79);
              uint64_t v78 = v254;
            }
            v254 = v77;
            uint64_t v255 = v57;
            uint64_t v256 = &v76[8 * v75];
            if (v78) {
              operator delete(v78);
            }
          }
          else
          {
            *(void *)uint64_t v255 = v264[0];
            uint64_t v57 = v56 + 8;
          }
          LODWORD(Int64Ty) = 0;
          uint64_t v255 = v57;
          goto LABEL_78;
        }
      }
      int v34 = 0;
    }
    LODWORD(Int64Ty) = v34;
    if (v230)
    {
      char v33 = 11;
      uint64_t v231 = v26;
      uint64_t v26 = (v26 + 1);
    }
    else
    {
      LODWORD(v223) = v26 + 1;
      LODWORD(Int8Ty) = v32;
      LODWORD(v231) = v26;
      uint64_t v222 = (llvm::Value *)&v212;
      uint64_t v37 = *(unsigned int *)(v29 + 8);
      MEMORY[0x270FA5388](BuiltInInfo);
      uint64_t v39 = (uint64_t *)((char *)&v212 - ((v38 + 15) & 0xFFFFFFFF0));
      if (v38 >= 0x200) {
        size_t v40 = 512;
      }
      else {
        size_t v40 = v38;
      }
      bzero((char *)&v212 - ((v38 + 15) & 0xFFFFFFFF0), v40);
      llvm::Type::getInt32Ty(v234, v41);
      llvm::ConstantInt::get();
      *uint64_t v39 = llvm::ValueAsMetadata::get();
      if ((int)v37 >= 2)
      {
        unsigned int v42 = (uint64_t *)(v29 + 8 - 8 * *(unsigned int *)(v29 + 8));
        unint64_t v43 = v39 + 1;
        uint64_t v44 = v37 - 1;
        do
        {
          uint64_t v45 = *v42++;
          *v43++ = v45;
          --v44;
        }
        while (v44);
      }
      uint64_t Impl = llvm::MDTuple::getImpl();
      uint64_t v47 = Impl;
      uint64_t v48 = v258;
      uint64_t v49 = v231;
      uint64_t v50 = v223;
      if (v258 >= v259)
      {
        uint64_t v52 = v258 - v257;
        if ((unint64_t)(v52 + 1) >> 61) {
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v53 = ((char *)v259 - (char *)v257) >> 2;
        if (v53 <= v52 + 1) {
          unint64_t v53 = v52 + 1;
        }
        if ((unint64_t)((char *)v259 - (char *)v257) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54) {
          uint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)v219, v54);
        }
        else {
          uint64_t v55 = 0;
        }
        uint64_t v58 = (uint64_t *)&v55[8 * v52];
        uint64_t *v58 = v47;
        uint64_t v51 = v58 + 1;
        uint64_t v59 = v258;
        __int16 v60 = v257;
        if (v258 != v257)
        {
          do
          {
            uint64_t v61 = *--v59;
            *--uint64_t v58 = v61;
          }
          while (v59 != v60);
          uint64_t v59 = v257;
        }
        v257 = v58;
        int64_t v258 = v51;
        long long v259 = (uint64_t *)&v55[8 * v54];
        if (v59) {
          operator delete(v59);
        }
      }
      else
      {
        *int64_t v258 = Impl;
        uint64_t v51 = v48 + 1;
      }
      int64_t v258 = v51;
      uint64_t v62 = *v27;
      uint64_t v63 = v261;
      if (v261 >= v262)
      {
        uint64_t v65 = v261 - v260;
        if ((unint64_t)(v65 + 1) >> 61) {
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v66 = ((char *)v262 - (char *)v260) >> 2;
        if (v66 <= v65 + 1) {
          unint64_t v66 = v65 + 1;
        }
        if ((unint64_t)((char *)v262 - (char *)v260) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v67 = v66;
        }
        if (v67) {
          int v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)v218, v67);
        }
        else {
          int v68 = 0;
        }
        uint64_t v69 = (uint64_t *)&v68[8 * v65];
        *uint64_t v69 = v62;
        uint64_t v64 = v69 + 1;
        uint64_t v70 = v261;
        uint64_t v71 = v260;
        if (v261 != v260)
        {
          do
          {
            uint64_t v72 = *--v70;
            *--uint64_t v69 = v72;
          }
          while (v70 != v71);
          uint64_t v70 = v260;
        }
        unint64_t v260 = v69;
        unint64_t v261 = v64;
        v262 = (uint64_t *)&v68[8 * v67];
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        *unint64_t v261 = v62;
        uint64_t v64 = v63 + 1;
      }
      unint64_t v261 = v64;
      char v33 = 11;
      uint64_t v231 = v49;
      uint64_t v26 = v50;
      unsigned int v32 = Int8Ty;
    }
LABEL_78:
    llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo> *,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo> *>>::~DenseMap((uint64_t)&v245);
    *(void *)&long long v245 = Int32Ty;
    std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    if (v275) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v275);
    }
    if (v274) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v274);
    }
    if (v273) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v273);
    }
    int v36 = (v32 >> 3) & 1;
    int v35 = (v32 >> 1) & 1;
    MEMORY[0x25A28CD60](v277);
    goto LABEL_85;
  }
  uint64_t v235 = 0;
LABEL_108:
  LOBYTE(v277[0]) = 0;
  std::vector<unsigned char>::vector(&v250, 0xAuLL, v277);
  v250[1] = 1;
  unint64_t v97 = v234;
  uint64_t v98 = v226;
  uint64_t v99 = v224;
  if (v217)
  {
    unsigned char *v250 = 1;
  }
  else
  {
    v250[3] = 1;
    if (v215 == (llvm::IRBuilderDefaultInserter *)1)
    {
      uint64_t v100 = v250;
      char v101 = 3;
    }
    else
    {
      if (v215 != (llvm::IRBuilderDefaultInserter *)2) {
        abort();
      }
      uint64_t v100 = v250;
      char v101 = 2;
    }
    v100[4] = v101;
  }
  if (v216) {
    v250[8] = 1;
  }
  if (v230)
  {
    Int8Ty = 0;
  }
  else
  {
    Int8Ty = (llvm::Type *)llvm::Type::getInt8Ty(v97, v96);
    uint64_t v102 = llvm::PointerType::get();
    uint64_t v103 = v102;
    uint64_t v104 = v261;
    uint64_t v105 = v261 - v260;
    if (v261 >= v262)
    {
      if ((unint64_t)(v105 + 1) >> 61) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v107 = ((char *)v262 - (char *)v260) >> 2;
      if (v107 <= v105 + 1) {
        unint64_t v107 = v105 + 1;
      }
      if ((unint64_t)((char *)v262 - (char *)v260) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v108 = v107;
      }
      if (v108) {
        uint64_t v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v262, v108);
      }
      else {
        uint64_t v109 = 0;
      }
      uint64_t v110 = (uint64_t *)&v109[8 * v105];
      int v111 = &v109[8 * v108];
      *uint64_t v110 = v103;
      uint64_t v106 = v110 + 1;
      uint64_t v112 = v261;
      unsigned int v113 = v260;
      if (v261 != v260)
      {
        do
        {
          uint64_t v114 = *--v112;
          *--uint64_t v110 = v114;
        }
        while (v112 != v113);
        uint64_t v112 = v260;
      }
      unint64_t v260 = v110;
      unint64_t v261 = v106;
      v262 = (uint64_t *)v111;
      if (v112) {
        operator delete(v112);
      }
    }
    else
    {
      *unint64_t v261 = v102;
      uint64_t v106 = v104 + 1;
    }
    unint64_t v261 = v106;
    unint64_t v97 = v234;
    MTLFrameworkPass::appendBufferMetadata(v234, &v257);
  }
  *(void *)&long long v115 = -1;
  *((void *)&v115 + 1) = -1;
  long long v248 = v115;
  long long v249 = v115;
  long long v246 = v115;
  long long v247 = v115;
  long long v245 = v115;
  uint64_t Int1Ty = llvm::Type::getInt1Ty(v97, v96);
  uint64_t Int32Ty = (uint64_t *)llvm::Type::getInt32Ty(v97, v117);
  uint64_t Int64Ty = llvm::Type::getInt64Ty(v97, v118);
  MTLFrameworkPass::addRequiredBuiltInsToBuiltInList(&v254, v253, (uint64_t *)&v250);
  uint64_t v229 = Int1Ty;
  if ((v230 & 1) == 0)
  {
    v120 = v254;
    v121 = v255;
    if (v254 != v255)
    {
      int v122 = v234;
      do
      {
        uint64_t LLVMVectorType = MTLFrameworkPass::getLLVMVectorType(v122, (llvm::LLVMContext *)*((unsigned int *)v120 + 1), v120[1]);
        uint64_t v119 = MTLFrameworkPass::addBuiltInParameter(v122, (unint64_t)MTLFrameworkPass::vertexFetchbuiltInAIRString[*v120], (char **)&v260, (void **)&v257, LLVMVectorType, *((_DWORD *)v120 + 1), v120[1]);
        uint64_t v124 = *v120;
        v120 += 8;
        *((void *)&v245 + v124) = v119;
      }
      while (v120 != v121);
    }
  }
  uint64_t v216 = &v212;
  uint64_t v125 = **(void **)(*((void *)v99 + 3) + 16);
  uint64_t v218 = (uint64_t **)v278;
  int v219 = (void *)v125;
  v277[0] = v278;
  v277[1] = (void *)0x200000000;
  v281 = v234;
  v282 = &v290;
  v283 = v291;
  uint64_t v284 = 0;
  int v285 = 0;
  __int16 v286 = 512;
  char v287 = 7;
  uint64_t v280 = 0;
  uint64_t v279 = 0;
  uint64_t v217 = (llvm::IRBuilderFolder *)&v290;
  uint64_t v289 = 0;
  uint64_t v288 = 0;
  uint64_t v290 = MEMORY[0x263F8BBD0] + 16;
  uint64_t v215 = (llvm::IRBuilderDefaultInserter *)v291;
  v291[0] = MEMORY[0x263F8BC08] + 16;
  MEMORY[0x270FA5388](v119);
  if ((v129 & 0x7FFFFFE00) != 0) {
    size_t v130 = v127;
  }
  else {
    size_t v130 = v126;
  }
  unint64_t v233 = (char *)&v212 - v128;
  bzero((char *)&v212 - v128, v130);
  uint64_t v222 = 0;
  uint64_t v223 = 0;
  uint64_t v231 = 0;
  if ((v230 & 1) == 0)
  {
    llvm::Type::getVoidTy(v234, v131);
    uint64_t v132 = llvm::FunctionType::get();
    *(void *)&long long v266 = "air.vertexDumpFunction";
    LOWORD(v268) = 259;
    uint64_t v231 = llvm::Function::Create(v132, 0, (uint64_t)&v266, (uint64_t)v228);
    createDebugInfoForWrapperFunction((uint64_t)v234, (llvm::IRBuilderBase *)v277, (llvm::Value *)v231, v99);
    unint64_t v134 = v254;
    uint64_t v135 = v255;
    if (v254 == v255)
    {
LABEL_151:
      *(void *)&long long v266 = "Body";
      LOWORD(v268) = 259;
      llvm::BasicBlock::Create(v234, (llvm::LLVMContext *)&v266, (const llvm::Twine *)v231, 0, v133);
    }
    while (1)
    {
      unsigned int v136 = *((_DWORD *)v134 + 1);
      if (v136 > 0x29) {
        break;
      }
      if (((1 << v136) & 0x10008) == 0)
      {
        if (((1 << v136) & 0x2020000000) == 0 && ((1 << v136) & 0x20200000000) == 0) {
          break;
        }
        llvm::Function::addParamAttr();
      }
      v134 += 8;
      if (v134 == v135) {
        goto LABEL_151;
      }
    }
    abort();
  }
  uint64_t v224 = 0;
  BOOL v214 = 0;
  LODWORD(v227->__r_.__value_.__l.__data_) = 0;
  uint64_t v138 = v250;
  int v137 = v251;
  if (v251 != v250)
  {
    uint64_t v139 = 0;
    unint64_t v140 = 0;
    uint64_t v229 = (uint64_t)v269;
    do
    {
      if (v138[v140])
      {
        unint64_t v141 = &v254[8 * *((char *)v253[0] + (v139 >> 56))];
        unsigned int VectorDataType = MTLDataTypeGetVectorDataType(*((_DWORD *)v141 + 1), v141[1]);
        uint64_t v143 = (llvm::Type *)MTLFrameworkPass::getLLVMVectorType(v234, (llvm::LLVMContext *)*((unsigned int *)v141 + 1), v141[1]);
        uint64_t v144 = (uint64_t)v143;
        if (v230) {
          uint64_t v145 = 0;
        }
        else {
          uint64_t v145 = *(void *)&v233[8 * *((void *)&v245 + *v141)];
        }
        *(void *)&long long v266 = llvm::Type::getPrimitiveSizeInBits(v143);
        *((void *)&v266 + 1) = v146;
        unint64_t v147 = (unint64_t)llvm::TypeSize::operator unsigned long long() >> 3;
        if (v147 <= 4) {
          LODWORD(v147) = 4;
        }
        int data = (int)v227->__r_.__value_.__l.__data_;
        LODWORD(v227->__r_.__value_.__l.__data_) += (v147 + 3) & 0xFFFFFFFC;
        std::string::basic_string[abi:ne180100]<0>(&v243, MTLFrameworkPass::vertexFetchbuiltInAIRString[*v141]);
        std::string::basic_string[abi:ne180100]<0>(&v241, (char *)&unk_2557AB8A6);
        PostVertexDumpOutput::PostVertexDumpOutput((uint64_t)&v266, v144, v145, &v243, VectorDataType, 0, VectorDataType, &v241, data);
        uint64_t v98 = v226;
        unint64_t v149 = v226[1];
        if (v149 >= v226[2])
        {
          uint64_t v153 = std::vector<PostVertexDumpOutput>::__push_back_slow_path<PostVertexDumpOutput>(v226, (uint64_t)&v266);
          int v154 = SHIBYTE(v271);
          v98[1] = v153;
          if (v154 < 0) {
            operator delete((void *)v270);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v149 = v266;
          long long v150 = v267;
          *(void *)(v149 + 32) = v268;
          *(_OWORD *)(v149 + 16) = v150;
          uint64_t v268 = 0;
          long long v267 = 0uLL;
          uint64_t v151 = *(void *)(v229 + 16);
          *(_OWORD *)(v149 + 40) = *(_OWORD *)v229;
          *(void *)(v149 + 56) = v151;
          uint64_t v152 = v271;
          *(_OWORD *)(v149 + 64) = v270;
          *(void *)(v149 + 80) = v152;
          uint64_t v271 = 0;
          long long v270 = 0uLL;
          *(_DWORD *)(v149 + 88) = v272;
          v98[1] = v149 + 96;
        }
        if (SHIBYTE(v268) < 0) {
          operator delete((void *)v267);
        }
        if (v242 < 0) {
          operator delete((void *)v241);
        }
        if (v244 < 0) {
          operator delete((void *)v243);
        }
        uint64_t v138 = v250;
        int v137 = v251;
      }
      ++v140;
      v139 += 0x100000000000000;
    }
    while (v140 < v137 - v138);
  }
  uint64_t v155 = *(void *)(v220 - 8 * *(unsigned int *)(v220 + 8) + 8);
  if (v230) {
    unint64_t v156 = 0;
  }
  else {
    unint64_t v156 = v277;
  }
  std::string::basic_string[abi:ne180100]<0>(v239, (char *)&unk_2557AB8A6);
  std::string::basic_string[abi:ne180100]<0>(v237, (char *)&unk_2557AB8A6);
  uint64_t v157 = v222;
  v236[0] = MEMORY[0x263EF8330];
  v236[1] = 3221225472;
  v236[2] = ___ZN35MTLAddPostVertexDumpingToModulePass28addPostVertexDumpingToModuleEPN4llvm6ModuleEibRjRNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEb_block_invoke;
  v236[3] = &__block_descriptor_48_e508_v96__0r__Type___LLVMContext_b8b24I___Type__8__Value___Type___Use_Cb1b7Sb27b1b1b1b1b1_16_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q______24Q48Q56Q64_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q______72l;
  v236[4] = v227;
  v236[5] = v98;
  iterateAllContainedValues((uint64_t)v156, (uint64_t)v219, v223, v155, v239, 0, 0, 0, (uint64_t)v237, (uint64_t)v236);
  if (v238 < 0) {
    operator delete(v237[0]);
  }
  if (v240 < 0) {
    operator delete((void *)v239[0]);
  }
  if ((v230 & 1) == 0)
  {
    int v158 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v268) = 257;
    GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v277, Int8Ty, v157, v158, (const llvm::Twine *)&v266);
    uint64_t v160 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v268) = 257;
    Mul = llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)v277, v224, v160, (const llvm::Twine *)&v266, 0, 0);
    long long v162 = (llvm::Type *)*((void *)GEP + 9);
    LOWORD(v268) = 257;
    uint64_t v163 = (uint64_t *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v277, v162, GEP, Mul, (const llvm::Twine *)&v266);
    uint64_t v165 = *v98;
    unint64_t v233 = (char *)v98[1];
    if ((char *)v165 != v233)
    {
      int64_t v166 = v163;
      uint64_t v229 = (uint64_t)v269;
      uint64_t v230 = (std::string *)&v267;
      uint64_t v226 = v163;
      uint64_t v227 = (std::string *)&v270;
      do
      {
        long long v266 = *(_OWORD *)v165;
        if (*(char *)(v165 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v230, *(const std::string::value_type **)(v165 + 16), *(void *)(v165 + 24));
        }
        else
        {
          long long v167 = *(_OWORD *)(v165 + 16);
          unint64_t v168 = v230;
          v230->__r_.__value_.__r.__words[2] = *(void *)(v165 + 32);
          *(_OWORD *)&v168->__r_.__value_.__l.__data_ = v167;
        }
        long long v169 = *(_OWORD *)(v165 + 40);
        long long v170 = (_OWORD *)v229;
        *(void *)(v229 + 16) = *(void *)(v165 + 56);
        *long long v170 = v169;
        if (*(char *)(v165 + 87) < 0)
        {
          std::string::__init_copy_ctor_external(v227, *(const std::string::value_type **)(v165 + 64), *(void *)(v165 + 72));
        }
        else
        {
          long long v171 = *(_OWORD *)(v165 + 64);
          long long v172 = v227;
          v227->__r_.__value_.__r.__words[2] = *(void *)(v165 + 80);
          *(_OWORD *)&v172->__r_.__value_.__l.__data_ = v171;
        }
        int v272 = *(_DWORD *)(v165 + 88);
        uint64_t v173 = (llvm::Value *)*((void *)&v266 + 1);
        long long v174 = (llvm::Type *)v166[9];
        uint64_t v175 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v265 = 257;
        uint64_t v176 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v277, v174, (llvm::Value *)v166, v175, (const llvm::Twine *)v264);
        uint64_t v177 = llvm::PointerType::get();
        __int16 v265 = 257;
        uint64_t Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v277, 49, v176, v177, (uint64_t)v264);
        uint64_t v180 = *(void *)v173;
        if ((*(_DWORD *)(*(void *)v173 + 8) & 0xFE) == 0x12)
        {
          uint64_t v181 = *(unsigned int *)(v180 + 32);
          int v182 = *(llvm::Type **)(v180 + 24);
          llvm::Type::getInt32Ty(*(llvm::Type **)v180, v178);
          uint64_t v183 = llvm::PointerType::get();
          __int16 v265 = 257;
          uint64_t v184 = llvm::IRBuilderBase::CreateCast((uint64_t)v277, 49, Cast, v183, (uint64_t)v264);
          if (v181)
          {
            unint64_t v185 = (llvm::Value *)v184;
            for (uint64_t i = 0; i != v181; ++i)
            {
              uint64_t v187 = (llvm::Value *)llvm::ConstantInt::get();
              __int16 v265 = 257;
              uint64_t Element = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v277, v173, v187, (const llvm::Twine *)v264, v188);
              __int16 v265 = 257;
              uint64_t v190 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v277, v182, v185, v187, (const llvm::Twine *)v264);
              llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v277, Element, v190, 0);
            }
          }
        }
        else
        {
          llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v277, (llvm::Type **)v173, Cast, 258);
        }
        int64_t v166 = v226;
        if (SHIBYTE(v271) < 0) {
          operator delete((void *)v270);
        }
        if (SHIBYTE(v268) < 0) {
          operator delete((void *)v267);
        }
        v165 += 96;
      }
      while ((char *)v165 != v233);
    }
    int v191 = v214;
    uint64_t v192 = llvm::BranchInst::Create(v214, 0, v164);
    LOWORD(v268) = 257;
    llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v277, v192, (uint64_t)&v266);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v277, (uint64_t)v191, (uint64_t)v191 + 40);
    uint64_t v194 = llvm::ReturnInst::Create(v281, 0, 0, v193);
    LOWORD(v268) = 257;
    uint64_t v195 = llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)v277, v194, (uint64_t)&v266);
    uint64_t v196 = *(unsigned int *)(v220 + 8);
    MEMORY[0x270FA5388](v195);
    int v198 = (uint64_t *)((char *)&v212 - ((v197 + 15) & 0xFFFFFFFF0));
    if (v197 >= 0x200) {
      size_t v199 = 512;
    }
    else {
      size_t v199 = v197;
    }
    bzero((char *)&v212 - ((v197 + 15) & 0xFFFFFFFF0), v199);
    uint64_t *v198 = llvm::ValueAsMetadata::get();
    v198[1] = llvm::MDTuple::getImpl();
    v198[2] = llvm::MDTuple::getImpl();
    if ((int)v196 >= 4)
    {
      v200 = (uint64_t *)(v220 - 8 * *(unsigned int *)(v220 + 8) + 24);
      v201 = v198 + 3;
      uint64_t v202 = v196 - 3;
      do
      {
        uint64_t v203 = *v200++;
        *v201++ = v203;
        --v202;
      }
      while (v202);
    }
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::eraseFromParent(v213);
    llvm::Module::getOrInsertNamedMetadata();
    llvm::NamedMDNode::addOperand();
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter(v215);
  llvm::IRBuilderFolder::~IRBuilderFolder(v217);
  if (v277[0] != v218) {
    free(v277[0]);
  }
  if (v250)
  {
    uint64_t v251 = v250;
    operator delete(v250);
  }
  if (v252.__begin_)
  {
    v252.__end_ = v252.__begin_;
    operator delete(v252.__begin_);
  }
  if (v253[0])
  {
    v253[1] = v253[0];
    operator delete(v253[0]);
  }
  if (v254)
  {
    uint64_t v255 = v254;
    operator delete(v254);
  }
  if (v257)
  {
    int64_t v258 = v257;
    operator delete(v257);
  }
  if (v260)
  {
    unint64_t v261 = v260;
    operator delete(v260);
  }
  if (v235) {
    operator delete(v235);
  }
  if (v263[0]) {
    operator delete(v263[0]);
  }
  return v228;
}

void sub_25574D6CC(_Unwind_Exception *exception_object)
{
  v1[23] = 0;
  uint64_t v3 = (void *)v1[64];
  if (v3)
  {
    v1[65] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)v1[67];
  if (v4)
  {
    v1[68] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)v1[23];
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)v1[70];
  if (v6) {
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void MTLArgumentData::~MTLArgumentData(MTLArgumentData *this)
{
  unint64_t v5 = (void **)((char *)this + 200);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void PostVertexDumpOutput::~PostVertexDumpOutput(void **this)
{
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void iterateAllContainedValues(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, const void **a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v95, (char *)&unk_2557AB8A6);
  std::string::basic_string[abi:ne180100]<0>(&v94, (char *)&unk_2557AB8A6);
  unint64_t v77 = a8;
  if (a4)
  {
    uint64_t v17 = *(unsigned int *)(a4 + 8);
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v80 = 0;
      uint64_t v82 = 0;
      unint64_t v78 = 0;
      uint64_t v19 = 8 * v17;
      while (1)
      {
        int v20 = *(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + v18);
        if (v20 && !*(unsigned char *)v20)
        {
          uint64_t String = (void *)llvm::MDString::getString(v20);
          uint64_t v23 = String;
          size_t v24 = v22;
          if (v22 != 17)
          {
            if (v22 == 12 && *String == 0x5F6772612E726961 && *((_DWORD *)String + 2) == 1701667182)
            {
              uint64_t v27 = (void *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + v18 + 8));
              if (v27) {
                std::string::basic_string[abi:ne180100](&__dst, v27, v26);
              }
              else {
                memset(&__dst, 0, sizeof(__dst));
              }
              if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v94.__r_.__value_.__l.__data_);
              }
              std::string v94 = __dst;
              goto LABEL_28;
            }
LABEL_16:
            if (!v18)
            {
              if (v23) {
                std::string::basic_string[abi:ne180100](&__dst, v23, v24);
              }
              else {
                memset(&__dst, 0, sizeof(__dst));
              }
              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v95.__r_.__value_.__l.__data_);
              }
              std::string v95 = __dst;
            }
            goto LABEL_28;
          }
          if (memcmp(String, "air.arg_type_name", 0x11uLL)) {
            goto LABEL_16;
          }
          uint64_t v28 = (const char *)llvm::MDString::getString(*(llvm::MDString **)(a4
                                                                           - 8 * *(unsigned int *)(a4 + 8)
                                                                           + v18
                                                                           + 8));
          size_t v29 = strlen(v28);
          unsigned int v30 = dataTypeFromString(v28, v29);
          size_t v31 = strlen(v28);
          unint64_t v32 = pixelFormatAndALUTypeFromString(v28, v31);
          unint64_t v78 = HIDWORD(v32);
          uint64_t v80 = v32;
          uint64_t v82 = v30;
        }
LABEL_28:
        v18 += 8;
        if (v19 == v18) {
          goto LABEL_31;
        }
      }
    }
  }
  unint64_t v78 = 0;
  uint64_t v80 = 0;
  uint64_t v82 = 0;
LABEL_31:
  if (*((char *)a5 + 23) < 0)
  {
    if (a5[1]) {
      goto LABEL_33;
    }
LABEL_46:
    std::string::basic_string[abi:ne180100]<0>(&__dst, (char *)&unk_2557AB8A6);
    goto LABEL_47;
  }
  if (!*((unsigned char *)a5 + 23)) {
    goto LABEL_46;
  }
LABEL_33:
  if (*((char *)a5 + 23) >= 0) {
    size_t v33 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v33 = (size_t)a5[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__dst, v33 + 1);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if (v33)
  {
    if (*((char *)a5 + 23) >= 0) {
      int v35 = (const std::string::value_type *)a5;
    }
    else {
      int v35 = (const std::string::value_type *)*a5;
    }
    memmove(p_dst, v35, v33);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v33) = 32;
LABEL_47:
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v36 = &v95;
  }
  else {
    int v36 = (std::string *)v95.__r_.__value_.__r.__words[0];
  }
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v95.__r_.__value_.__l.__size_;
  }
  unint64_t v38 = std::string::append(&__dst, (const std::string::value_type *)v36, size);
  std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
  v96.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
  char v40 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)a5 + 23) < 0) {
    operator delete((void *)*a5);
  }
  std::string::size_type v41 = v96.__r_.__value_.__r.__words[0];
  *a5 = (const void *)v39;
  a5[1] = (const void *)v41;
  *(const void **)((char *)a5 + 15) = *(const void **)((char *)v96.__r_.__value_.__r.__words + 7);
  *((unsigned char *)a5 + 23) = v40;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (a6) {
    uint64_t v42 = a6;
  }
  else {
    uint64_t v42 = v82;
  }
  uint64_t v43 = v80;
  if (a7) {
    uint64_t v43 = a7;
  }
  uint64_t v81 = v43;
  uint64_t v83 = v42;
  unint64_t v44 = v77;
  if (!v77) {
    unint64_t v44 = v78;
  }
  unint64_t v79 = v44;
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a9, (const void **)&v94.__r_.__value_.__l.__data_, (uint64_t)&__dst);
  uint64_t v45 = (char *)(a9 + 23);
  if (*(char *)(a9 + 23) < 0) {
    operator delete(*(void **)a9);
  }
  *(std::string *)a9 = __dst;
  int v46 = *(unsigned __int8 *)(a2 + 8);
  if (v46 == 7) {
    goto LABEL_170;
  }
  if (v46 == 16)
  {
    std::string::basic_string[abi:ne180100]<0>(&v96, (char *)&unk_2557AB8A6);
    if (*(void *)(a2 + 24))
    {
      uint64_t Name = (void *)llvm::StructType::getName((llvm::StructType *)a2);
      if (Name) {
        std::string::basic_string[abi:ne180100](&__dst, Name, v60);
      }
      else {
        memset(&__dst, 0, sizeof(__dst));
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      std::string v96 = __dst;
    }
    if (*v45 < 0) {
      uint64_t v63 = *(void *)(a9 + 8);
    }
    else {
      uint64_t v63 = *v45;
    }
    if (v63) {
      uint64_t v64 = (std::string *)a9;
    }
    else {
      uint64_t v64 = &v96;
    }
    if (v63) {
      uint64_t v65 = (char *)(a9 + 23);
    }
    else {
      uint64_t v65 = (char *)&v96.__r_.__value_.__r.__words[2] + 7;
    }
    if ((v64->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v66 = HIBYTE(v64->__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v66 = v64->__r_.__value_.__l.__size_;
    }
    unint64_t v67 = &v90;
    std::string::basic_string[abi:ne180100]((uint64_t)&v90, v66 + 1);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v67 = (std::string *)v90.__r_.__value_.__r.__words[0];
    }
    if (v66)
    {
      if (*v65 >= 0) {
        int v68 = v64;
      }
      else {
        int v68 = (std::string *)v64->__r_.__value_.__r.__words[0];
      }
      memmove(v67, v68, v66);
    }
    *(_WORD *)((char *)&v67->__r_.__value_.__l.__data_ + v66) = 46;
    unsigned int v69 = *(_DWORD *)(a2 + 12);
    v91[0] = 0;
    if (!v69)
    {
LABEL_165:
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_170;
      }
      uint64_t v62 = (void *)v96.__r_.__value_.__r.__words[0];
LABEL_169:
      operator delete(v62);
      goto LABEL_170;
    }
    unsigned int v70 = 0;
    while (1)
    {
      uint64_t v71 = *(void *)(*(void *)(a2 + 16) + 8 * v70);
      if (a1)
      {
        __int16 v93 = 257;
        uint64_t Value = llvm::IRBuilderBase::CreateExtractValue(a1, a3, (uint64_t)v91, 1, (uint64_t)&__dst);
        if (!a4) {
          goto LABEL_153;
        }
      }
      else
      {
        uint64_t Value = 0;
        if (!a4)
        {
LABEL_153:
          uint64_t v73 = 0;
          goto LABEL_154;
        }
      }
      uint64_t v73 = *(void *)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8 * v91[0]);
LABEL_154:
      if (*((char *)a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v87, (const std::string::value_type *)*a5, (std::string::size_type)a5[1]);
      }
      else {
        std::string v87 = *(std::string *)a5;
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v86, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
      }
      else {
        std::string v86 = v90;
      }
      iterateAllContainedValues(a1, v71, Value, v73, &v87, v83, v81, v79, &v86, a10);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v87.__r_.__value_.__l.__data_);
      }
      unsigned int v70 = v91[0] + 1;
      v91[0] = v70;
      if (v70 >= v69) {
        goto LABEL_165;
      }
    }
  }
  if (v46 != 17)
  {
    if (*((char *)a5 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v85, (const std::string::value_type *)*a5, (std::string::size_type)a5[1]);
    }
    else {
      std::string v85 = *(std::string *)a5;
    }
    if (*v45 < 0)
    {
      std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)a9, *(void *)(a9 + 8));
    }
    else
    {
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
      v84.__r_.__value_.__r.__words[2] = *(void *)(a9 + 16);
    }
    (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, std::string *, uint64_t, uint64_t, unint64_t, std::string *))(a10 + 16))(a10, a2, a3, &v85, v83, v81, v79, &v84);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_170;
    }
    uint64_t v62 = (void *)v85.__r_.__value_.__r.__words[0];
    goto LABEL_169;
  }
  uint64_t v75 = *(void *)(a2 + 32);
  if (v75)
  {
    unint64_t v47 = 0;
    uint64_t v74 = **(void **)(a2 + 16);
    do
    {
      if (a1)
      {
        LODWORD(v96.__r_.__value_.__l.__data_) = v47;
        __int16 v93 = 257;
        uint64_t v48 = llvm::IRBuilderBase::CreateExtractValue(a1, a3, (uint64_t)&v96, 1, (uint64_t)&__dst);
      }
      else
      {
        uint64_t v48 = 0;
      }
      if (*(char *)(a9 + 23) >= 0) {
        size_t v49 = *(unsigned __int8 *)(a9 + 23);
      }
      else {
        size_t v49 = *(void *)(a9 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v96, v49 + 1);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v50 = &v96;
      }
      else {
        uint64_t v50 = (std::string *)v96.__r_.__value_.__r.__words[0];
      }
      if (v49)
      {
        if (*(char *)(a9 + 23) >= 0) {
          uint64_t v51 = (const void *)a9;
        }
        else {
          uint64_t v51 = *(const void **)a9;
        }
        memmove(v50, v51, v49);
      }
      *(_WORD *)((char *)&v50->__r_.__value_.__l.__data_ + v49) = 91;
      std::to_string(&v90, v47);
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v52 = &v90;
      }
      else {
        uint64_t v52 = (std::string *)v90.__r_.__value_.__r.__words[0];
      }
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v53 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v53 = v90.__r_.__value_.__l.__size_;
      }
      unint64_t v54 = std::string::append(&v96, (const std::string::value_type *)v52, v53);
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      uint64_t v56 = std::string::append(&__dst, "]");
      uint64_t v57 = (std::string::value_type *)v56->__r_.__value_.__r.__words[0];
      std::string::size_type v58 = v56->__r_.__value_.__l.__size_;
      v91[0] = v56->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v91 + 3) = *(_DWORD *)((char *)&v56->__r_.__value_.__r.__words[2] + 3);
      int v59 = SHIBYTE(v56->__r_.__value_.__r.__words[2]);
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      if (*((char *)a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v89, (const std::string::value_type *)*a5, (std::string::size_type)a5[1]);
      }
      else {
        std::string v89 = *(std::string *)a5;
      }
      if (v59 < 0)
      {
        std::string::__init_copy_ctor_external(&v88, v57, v58);
      }
      else
      {
        v88.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
        v88.__r_.__value_.__l.__size_ = v58;
        LODWORD(v88.__r_.__value_.__r.__words[2]) = v91[0];
        *(_DWORD *)((char *)&v88.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v91 + 3);
        *((unsigned char *)&v88.__r_.__value_.__s + 23) = v59;
      }
      iterateAllContainedValues(a1, v74, v48, 0, &v89, v83, v81, v79, &v88, a10);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v89.__r_.__value_.__l.__data_);
        if (v59 < 0) {
LABEL_110:
        }
          operator delete(v57);
      }
      else if (v59 < 0)
      {
        goto LABEL_110;
      }
      ++v47;
    }
    while (v75 != v47);
  }
LABEL_170:
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
}

void sub_25574E314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 169) < 0) {
    operator delete(*(void **)(v28 - 192));
  }
  if (*(char *)(v28 - 137) < 0) {
    operator delete(*(void **)(v28 - 160));
  }
  _Unwind_Resume(a1);
}

void ___ZN35MTLAddPostVertexDumpingToModulePass28addPostVertexDumpingToModuleEPN4llvm6ModuleEibRjRNSt3__16vectorI20PostVertexDumpOutputNS4_9allocatorIS6_EEEEb_block_invoke(uint64_t a1, llvm::Type *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)&long long v29 = llvm::Type::getPrimitiveSizeInBits(this);
  *((void *)&v29 + 1) = v16;
  unint64_t v17 = (unint64_t)llvm::TypeSize::operator unsigned long long() >> 3;
  if (v17 <= 4) {
    LODWORD(v17) = 4;
  }
  uint64_t v18 = *(int **)(a1 + 32);
  int v19 = *v18;
  *v18 += (v17 + 3) & 0xFFFFFFFC;
  int v20 = *(uint64_t **)(a1 + 40);
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v28 = *(std::string *)a4;
  }
  if (*(char *)(a8 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a8, *(void *)(a8 + 8));
  }
  else {
    std::string v27 = *(std::string *)a8;
  }
  PostVertexDumpOutput::PostVertexDumpOutput((uint64_t)&v29, (uint64_t)this, a3, (long long *)&v28, a5, a6, a7, (long long *)&v27, v19);
  unint64_t v21 = v20[1];
  if (v21 >= v20[2])
  {
    uint64_t v25 = std::vector<PostVertexDumpOutput>::__push_back_slow_path<PostVertexDumpOutput>(v20, (uint64_t)&v29);
    int v26 = SHIBYTE(v35);
    v20[1] = v25;
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v21 = v29;
    long long v22 = *(_OWORD *)v30;
    *(void *)(v21 + 32) = v31;
    *(_OWORD *)(v21 + 16) = v22;
    v30[0] = 0;
    v30[1] = 0;
    uint64_t v23 = v33;
    *(_OWORD *)(v21 + 40) = v32;
    *(void *)(v21 + 56) = v23;
    uint64_t v24 = v35;
    *(_OWORD *)(v21 + 64) = *(_OWORD *)__p;
    *(void *)(v21 + 80) = v24;
    uint64_t v31 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v35 = 0;
    *(_DWORD *)(v21 + 88) = v36;
    v20[1] = v21 + 96;
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_25574E654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

llvm::Instruction *llvm::IRBuilderBase::CreateMul(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, uint64_t a5, uint64_t a6)
{
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    uint64_t result = (llvm::Instruction *)(*(uint64_t (**)(void, llvm::Value *, llvm::Value *, uint64_t, uint64_t))(**((void **)this + 9) + 88))(*((void *)this + 9), a2, a3, a5, a6);
    if (result) {
      BOOL v9 = *((unsigned __int8 *)result + 16) >= 0x1Cu;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      return (llvm::Instruction *)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)result, (uint64_t)a4);
    }
  }
  else
  {
    return llvm::IRBuilderBase::CreateInsertNUWNSWBinOp((uint64_t *)this, 17, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  }
  return result;
}

void std::__shared_ptr_emplace<std::vector<MTLStructMemberInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270453F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<MTLStructMemberInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270453F38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A28E250);
}

uint64_t PostVertexDumpOutput::PostVertexDumpOutput(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, long long *a8, int a9)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v14 = *a4;
    *(void *)(a1 + 32) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 16) = v14;
  }
  *(void *)(a1 + 40) = a5;
  *(void *)(a1 + 48) = a6;
  *(void *)(a1 + 56) = a7;
  uint64_t v15 = (std::string *)(a1 + 64);
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v16 = *a8;
    *(void *)(a1 + 80) = *((void *)a8 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  *(_DWORD *)(a1 + 88) = a9;
  return a1;
}

void sub_25574E8A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      BOOL v9 = a1;
    }
    else {
      BOOL v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t std::vector<PostVertexDumpOutput>::__push_back_slow_path<PostVertexDumpOutput>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v18[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PostVertexDumpOutput>>(v7, v9);
  uint64_t v11 = &v10[96 * v4];
  v18[0] = v10;
  v18[1] = v11;
  void v18[3] = &v10[96 * v12];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  long long v13 = *(_OWORD *)(a2 + 16);
  *((void *)v11 + 4) = *(void *)(a2 + 32);
  *((_OWORD *)v11 + 1) = v13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v14 = *(void *)(a2 + 56);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v11 + 7) = v14;
  uint64_t v15 = *(void *)(a2 + 80);
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 10) = v15;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  *((_DWORD *)v11 + 22) = *(_DWORD *)(a2 + 88);
  v18[2] = v11 + 96;
  std::vector<PostVertexDumpOutput>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<PostVertexDumpOutput>::~__split_buffer(v18);
  return v16;
}

void sub_25574EB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<PostVertexDumpOutput>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PostVertexDumpOutput>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PostVertexDumpOutput>,std::reverse_iterator<PostVertexDumpOutput*>,std::reverse_iterator<PostVertexDumpOutput*>,std::reverse_iterator<PostVertexDumpOutput*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PostVertexDumpOutput>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PostVertexDumpOutput>,std::reverse_iterator<PostVertexDumpOutput*>,std::reverse_iterator<PostVertexDumpOutput*>,std::reverse_iterator<PostVertexDumpOutput*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      long long v8 = *(_OWORD *)(a3 - 80);
      *(void *)(v7 - 64) = *(void *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(a3 - 72) = 0;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 80) = 0;
      long long v9 = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      long long v10 = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v10;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      uint64_t v7 = *((void *)&v16 + 1) - 96;
      *((void *)&v16 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PostVertexDumpOutput>,std::reverse_iterator<PostVertexDumpOutput*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<PostVertexDumpOutput>,std::reverse_iterator<PostVertexDumpOutput*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<PostVertexDumpOutput>,std::reverse_iterator<PostVertexDumpOutput*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<PostVertexDumpOutput>,std::reverse_iterator<PostVertexDumpOutput*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<PostVertexDumpOutput>::destroy[abi:ne180100](v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void std::allocator<PostVertexDumpOutput>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }
  if (*(char *)(a2 + 39) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 16);
    operator delete(v3);
  }
}

void **std::__split_buffer<PostVertexDumpOutput>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<PostVertexDumpOutput>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<PostVertexDumpOutput>::destroy[abi:ne180100](v4, i - 96);
  }
}

void createMTLThreadgroupMemoryCheckPass(MTLBoundsCheck::SharedPassData *a1)
{
}

void sub_25574EEC8(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40CBA0151CLL);
  _Unwind_Resume(a1);
}

void MTLThreadgroupMemoryCheckPass::~MTLThreadgroupMemoryCheckPass(MTLThreadgroupMemoryCheckPass *this)
{
  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

BOOL MTLThreadgroupMemoryCheckPass::runOnModule(MTLThreadgroupMemoryCheckPass *this, llvm::Module *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 8) + 64);
  if (!*(unsigned char *)(v2 + 651))
  {
    MetalModulePass::runOnModule(this, a2);
    *((_DWORD *)this + 46) = 0;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    if (!MTLBoundsCheck::isLibraryModule(*((MTLBoundsCheck **)this + 6), v5))
    {
      if ((*(unsigned char *)(*((void *)this + 4) + 23) & 2) != 0)
      {
        MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(this);
        if (*((_DWORD *)this + 30) == 5) {
          MTLThreadgroupMemoryCheckPass::createMeshThreadgroupGlobal(this);
        }
      }
      MTLThreadgroupMemoryCheckPass::replaceGlobalBindings(this);
      if ((*(unsigned char *)(*((void *)this + 4) + 23) & 4) != 0) {
        MTLThreadgroupMemoryCheckPass::mergeThreadgroupArguments(this);
      }
    }
    MTLThreadgroupMemoryCheckPass::createTagFunctions(this, a2);
  }
  return *(unsigned char *)(v2 + 651) == 0;
}

void MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(MTLThreadgroupMemoryCheckPass *this)
{
  v22[8] = *MEMORY[0x263EF8340];
  uint64_t v18 = 0;
  int v20 = v22;
  uint64_t v21 = 0x400000000;
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4 == v2 + 8)
  {
    *(_DWORD *)(*(void *)(*((void *)this + 8) + 64) + 632) = 0;
  }
  else
  {
    int v5 = 0;
    do
    {
      if (v4) {
        uint64_t v6 = v4 - 56;
      }
      else {
        uint64_t v6 = 0;
      }
      if ((*(unsigned char *)(v6 + 33) & 0x1C) == 0)
      {
        int v7 = *(_DWORD *)(*(void *)v6 + 8);
        if (v7 == 15)
        {
          if ((v7 & 0xFE) == 0x12) {
            int v7 = *(_DWORD *)(**(void **)(*(void *)v6 + 16) + 8);
          }
          if ((v7 & 0xFFFFFF00) == 0x300)
          {
            v19[0] = v6;
            llvm::SmallVectorImpl<std::pair<llvm::GlobalVariable *,unsigned long long>>::emplace_back<llvm::GlobalVariable *,unsigned long long &>((uint64_t)&v20, v19, &v18);
            v19[0] = llvm::DataLayout::getTypeAllocSize(*((llvm::DataLayout **)this + 7), *(llvm::Type **)(v6 + 24));
            v19[1] = v8;
            uint64_t v9 = llvm::TypeSize::operator unsigned long long();
            int v5 = v18 + v9;
            v18 += v9;
          }
        }
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
    int v10 = v21;
    uint64_t v11 = *((void *)this + 8);
    *(_DWORD *)(*(void *)(v11 + 64) + 632) = v5;
    if (v10)
    {
      uint64_t inserted = MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupBasePointerGV((llvm::Module **)v11);
      if (v21)
      {
        uint64_t v12 = (llvm::GlobalVariable **)v20;
        uint64_t v13 = 16 * v21;
        do
        {
          char v14 = *v12;
          long long v15 = operator new(0x20uLL);
          *long long v15 = &unk_270454010;
          v15[1] = &inserted;
          void v15[2] = this;
          void v15[3] = v12;
          v19[3] = (uint64_t)v15;
          MTLRAUWUtility::replaceAllUsesWith((uint64_t)&v16, (uint64_t)v14, (uint64_t)v19);
          std::__function::__value_func<llvm::Value * ()(MTLIRBuilder &)>::~__value_func[abi:ne180100](v19);
          llvm::GlobalVariable::dropAllReferences(*v12);
          llvm::GlobalVariable::eraseFromParent(*v12);
          v12 += 2;
          v13 -= 16;
        }
        while (v13);
      }
    }
  }
  if (v20 != v22) {
    free(v20);
  }
}

void sub_25574F27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  if (a16 != v16) {
    free(a16);
  }
  _Unwind_Resume(exception_object);
}

void MTLThreadgroupMemoryCheckPass::createMeshThreadgroupGlobal(MTLThreadgroupMemoryCheckPass *this)
{
  void v15[7] = *MEMORY[0x263EF8340];
  uint64_t v1 = (llvm::Type *)*(unsigned int *)(*(void *)(*((void *)this + 8) + 64) + 632);
  if (v1)
  {
    uint64_t v3 = *(void *)(MetalModulePass::getEntryFunction(this) + 80);
    if (v3) {
      uint64_t v4 = (llvm::BasicBlock *)(v3 - 24);
    }
    else {
      uint64_t v4 = 0;
    }
    v10[0] = v4;
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *>((uint64_t)v12, v10);
    llvm::ArrayType::get(*((llvm::ArrayType **)this + 12), v1);
    uint64_t v5 = llvm::User::operator new((llvm::User *)0x58);
    llvm::UndefValue::get();
    v10[0] = (llvm::BasicBlock *)"mtl.threadgroup_memory";
    __int16 v11 = 259;
    llvm::GlobalVariable::GlobalVariable();
    uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v4);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v12, (uint64_t)v4, FirstInsertionPt);
    uint64_t v7 = llvm::PointerType::get();
    __int16 v11 = 257;
    uint64_t Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v12, 49, v5, v7, (uint64_t)v10);
    uint64_t inserted = MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupBasePointerGV(*((llvm::Module ***)this + 8));
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v12, Cast, inserted, 0);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v15);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v14);
    if (v12[0] != &v13) {
      free(v12[0]);
    }
  }
}

void sub_25574F458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  v17[5] = v17[5] & 0xF8000000 | 1;
  llvm::User::operator delete(v17);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a17);
  _Unwind_Resume(a1);
}

void MTLThreadgroupMemoryCheckPass::replaceGlobalBindings(MTLThreadgroupMemoryCheckPass *this)
{
  v103[7] = *MEMORY[0x263EF8340];
  __int16 v93 = 0;
  std::string v94 = 0;
  std::string v95 = 0;
  long long __p = 0;
  uint64_t v91 = 0;
  unint64_t v92 = 0;
  uint64_t v2 = (llvm::Module *)*((void *)this + 6);
  v100[0] = "air.global_bindings";
  v101[8] = 259;
  NamedMetaint data = llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)v100);
  uint64_t v4 = (llvm::NamedMDNode *)NamedMetadata;
  if (!NamedMetadata) {
    goto LABEL_107;
  }
  unsigned int v5 = 0;
  char v82 = 0;
  uint64_t v81 = (llvm::NamedMDNode *)NamedMetadata;
  uint64_t v6 = v99;
  while (v5 < llvm::NamedMDNode::getNumOperands(v4))
  {
    unsigned int v83 = v5;
    uint64_t Operand = llvm::NamedMDNode::getOperand(v4);
    uint64_t v8 = Operand - 8 * *(unsigned int *)(Operand + 8);
    uint64_t v9 = *(void *)(v8 + 16);
    uint64_t v10 = *(void *)(*(void *)(v8 + 8) + 128);
    char LocationIndex = MTLBoundsCheck::getLocationIndex(v9);
    uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v9 - 8 * *(unsigned int *)(v9 + 8) + 8));
    if (v13 == 11)
    {
      BOOL v14 = *String == 0x747865742E726961 && *(void *)((char *)String + 3) == 0x657275747865742ELL;
      if (v14
        || (*String == 0x706D61732E726961
          ? (BOOL v15 = *(void *)((char *)String + 3) == 0x72656C706D61732ELL)
          : (BOOL v15 = 0),
            v15))
      {
        uint64_t v61 = v91;
        if (v91 < (uint64_t *)v92)
        {
LABEL_75:
          *uint64_t v61 = Operand;
          size_t v66 = v61 + 1;
          unsigned int v60 = v83;
LABEL_97:
          uint64_t v91 = v66;
          char v82 = 1;
          goto LABEL_98;
        }
        uint64_t v67 = ((char *)v91 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v67 + 1) >> 61) {
LABEL_113:
        }
          std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
        unint64_t v68 = (v92 - (unsigned char *)__p) >> 2;
        if (v68 <= v67 + 1) {
          unint64_t v68 = v67 + 1;
        }
        if ((unint64_t)(v92 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v68;
        }
        if (v64) {
          uint64_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v92, v64);
        }
        else {
          uint64_t v65 = 0;
        }
        unsigned int v69 = (uint64_t *)&v65[8 * v67];
        *unsigned int v69 = Operand;
        size_t v66 = v69 + 1;
        uint64_t v73 = (char *)__p;
        unsigned int v70 = (char *)v91;
        if (v91 != __p)
        {
          unsigned int v60 = v83;
          do
          {
            uint64_t v74 = *((void *)v70 - 1);
            v70 -= 8;
            *--unsigned int v69 = v74;
          }
          while (v70 != v73);
LABEL_93:
          unsigned int v70 = (char *)__p;
LABEL_95:
          long long __p = v69;
          uint64_t v91 = v66;
          unint64_t v92 = &v65[8 * v64];
          if (v70) {
            operator delete(v70);
          }
          goto LABEL_97;
        }
LABEL_94:
        unsigned int v60 = v83;
        goto LABEL_95;
      }
    }
    if (MTLBoundsCheck::getAddressSpace(v9) != 3)
    {
      uint64_t v61 = v91;
      if (v91 < (uint64_t *)v92) {
        goto LABEL_75;
      }
      uint64_t v62 = ((char *)v91 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v62 + 1) >> 61) {
        goto LABEL_113;
      }
      unint64_t v63 = (v92 - (unsigned char *)__p) >> 2;
      if (v63 <= v62 + 1) {
        unint64_t v63 = v62 + 1;
      }
      if ((unint64_t)(v92 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v63;
      }
      if (v64) {
        uint64_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v92, v64);
      }
      else {
        uint64_t v65 = 0;
      }
      unsigned int v69 = (uint64_t *)&v65[8 * v62];
      *unsigned int v69 = Operand;
      size_t v66 = v69 + 1;
      uint64_t v71 = (char *)__p;
      unsigned int v70 = (char *)v91;
      if (v91 != __p)
      {
        unsigned int v60 = v83;
        do
        {
          uint64_t v72 = *((void *)v70 - 1);
          v70 -= 8;
          *--unsigned int v69 = v72;
        }
        while (v70 != v71);
        goto LABEL_93;
      }
      goto LABEL_94;
    }
    long long v89 = 0u;
    memset(v88, 0, sizeof(v88));
    uint64_t v16 = *(void *)(v10 + 8);
    if (v16)
    {
      do
      {
        unint64_t v17 = *(unsigned __int8 **)(v16 + 24);
        v100[0] = v17;
        unsigned int v18 = v17[16];
        if (v17) {
          BOOL v19 = v18 >= 0x1C;
        }
        else {
          BOOL v19 = 0;
        }
        if (v19)
        {
          std::deque<llvm::User *>::push_back(v88, v100);
        }
        else
        {
          if (v17) {
            BOOL v20 = v18 == 5;
          }
          else {
            BOOL v20 = 0;
          }
          if (v20)
          {
            llvm::ConstantExpr::isCast((llvm::ConstantExpr *)v17);
            unint64_t v17 = (unsigned __int8 *)v100[0];
          }
          for (uint64_t i = *((void *)v17 + 1); i; uint64_t i = *(void *)(i + 8))
          {
            v85[0] = *(void *)(i + 24);
            if (v85[0]) {
              BOOL v22 = *(unsigned __int8 *)(v85[0] + 16) >= 0x1Cu;
            }
            else {
              BOOL v22 = 0;
            }
            if (v22) {
              std::deque<llvm::User *>::push_back(v88, v85);
            }
          }
        }
        uint64_t v16 = *(void *)(v16 + 8);
      }
      while (v16);
      uint64_t v23 = *((void *)&v89 + 1);
      if (*((void *)&v89 + 1))
      {
        int v84 = 1 << LocationIndex;
        do
        {
          uint64_t v24 = *(unsigned __int8 **)(*(void *)(*((void *)&v88[0] + 1)
                                                + (((unint64_t)v89 >> 6) & 0x3FFFFFFFFFFFFF8))
                                    + 8 * (v89 & 0x1FF));
          *(void *)&long long v89 = v89 + 1;
          *((void *)&v89 + 1) = v23 - 1;
          if ((unint64_t)v89 >= 0x400)
          {
            operator delete(**((void ***)&v88[0] + 1));
            *((void *)&v88[0] + 1) += 8;
            *(void *)&long long v89 = v89 - 512;
          }
          if (v24[16] <= 0x1Bu) {
            uint64_t v25 = 0;
          }
          else {
            uint64_t v25 = (llvm::Instruction *)v24;
          }
          std::string v87 = v25;
          MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>((uint64_t)v100, &v87);
          uint64_t inserted = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupBasePointerGV(*((llvm::Module ***)this + 8));
          std::string v27 = v6;
          std::string v28 = (llvm::Type *)*((void *)inserted + 3);
          __int16 v86 = 257;
          uint64_t AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v100, v28, (uint64_t)inserted, 0, 0, (uint64_t)v85);
          unsigned int v30 = (llvm::Value *)MTLBoundsCheck::SharedPassData::getOrInsertThreadgroupTableGV(*((llvm::Module ***)this + 8));
          uint64_t v31 = (llvm::Type *)*((void *)v30 + 3);
          __int16 v86 = 257;
          long long v32 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v100, v31, (uint64_t)v30, 0, 0, (uint64_t)v85);
          uint64_t v33 = *((void *)this + 8) + 88;
          std::string v96 = v32;
          llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v33, &v96, (uint64_t)v85);
          uint64_t v34 = *((void *)this + 8) + 88;
          std::string v96 = AlignedLoad;
          llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v34, &v96, (uint64_t)v85);
          uint64_t v35 = *((void *)this + 8);
          *(_DWORD *)(*(void *)(v35 + 64) + 636) |= v84;
          uint64_t Name = (char *)llvm::Value::getName(v30);
          uint64_t GVBaseType = MTLBoundsCheck::SharedPassData::getGVBaseType(v35, Name, v37);
          std::string v96 = (uint64_t *)llvm::ConstantInt::get();
          uint64_t v97 = (void *)llvm::ConstantInt::get();
          __int16 v86 = 257;
          uint64_t v39 = llvm::IRBuilderBase::CreateGEP((uint64_t)v100, GVBaseType, v32, &v96, 2, (uint64_t)v85);
          char v40 = *(llvm::Type **)(v39 + 72);
          __int16 v86 = 257;
          uint64_t v41 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v100, v40, v39, 0, 0, (uint64_t)v85);
          uint64_t v42 = *((void *)this + 8);
          uint64_t v43 = (char *)llvm::Value::getName(inserted);
          uint64_t v45 = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v42, v43, v44);
          uint64_t v46 = *((void *)this + 9);
          __int16 v86 = 257;
          uint64_t Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v100, 40, v41, v46, (uint64_t)v85);
          v99[4] = 257;
          GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v100, v45, (llvm::Value *)AlignedLoad, Cast, (const llvm::Twine *)&v96);
          std::string v96 = (uint64_t *)*((void *)this + 5);
          uint64_t v97 = v27;
          uint64_t v6 = v27;
          uint64_t v98 = 0;
          size_t v49 = *(llvm::Type **)v87;
          __int16 v86 = 257;
          llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)v100, GEP, v49, (const llvm::Twine *)v85);
          llvm::Value::replaceAllUsesWith();
          uint64_t v50 = v94;
          if (v94 >= v95)
          {
            uint64_t v52 = (v94 - (unsigned char *)v93) >> 3;
            if ((unint64_t)(v52 + 1) >> 61) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v53 = (v95 - (unsigned char *)v93) >> 2;
            if (v53 <= v52 + 1) {
              unint64_t v53 = v52 + 1;
            }
            if ((unint64_t)(v95 - (unsigned char *)v93) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v54 = v53;
            }
            if (v54) {
              long long v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v95, v54);
            }
            else {
              long long v55 = 0;
            }
            uint64_t v56 = &v55[8 * v52];
            *(void *)uint64_t v56 = v10;
            uint64_t v51 = v56 + 8;
            std::string::size_type v58 = (char *)v93;
            uint64_t v57 = v94;
            if (v94 != v93)
            {
              do
              {
                uint64_t v59 = *((void *)v57 - 1);
                v57 -= 8;
                *((void *)v56 - 1) = v59;
                v56 -= 8;
              }
              while (v57 != v58);
              uint64_t v57 = (char *)v93;
            }
            __int16 v93 = v56;
            std::string v94 = v51;
            std::string v95 = &v55[8 * v54];
            if (v57) {
              operator delete(v57);
            }
          }
          else
          {
            *(void *)std::string v94 = v10;
            uint64_t v51 = v50 + 8;
          }
          std::string v94 = v51;
          llvm::Instruction::eraseFromParent(v87);
          if (v97 != v27) {
            free(v97);
          }
          llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v103);
          llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v102);
          if (v100[0] != v101) {
            free(v100[0]);
          }
          uint64_t v23 = *((void *)&v89 + 1);
        }
        while (*((void *)&v89 + 1));
      }
    }
    std::deque<llvm::User *>::~deque[abi:ne180100](v88);
    uint64_t v4 = v81;
    unsigned int v60 = v83;
LABEL_98:
    unsigned int v5 = v60 + 1;
  }
  uint64_t v75 = (llvm::GlobalVariable **)v93;
  int v76 = (llvm::GlobalVariable **)v94;
  while (v75 != v76)
  {
    unint64_t v77 = *v75;
    llvm::GlobalVariable::dropAllReferences(*v75);
    llvm::Constant::getNullValue(*(llvm::Constant **)v77, v78);
    llvm::Value::replaceAllUsesWith();
    llvm::GlobalVariable::eraseFromParent(v77);
    ++v75;
  }
  llvm::NamedMDNode::clearOperands(v81);
  unint64_t v79 = (char *)__p;
  uint64_t v80 = v91;
  while (v79 != (char *)v80)
  {
    llvm::NamedMDNode::addOperand();
    v79 += 8;
  }
  if ((v82 & 1) == 0)
  {
    llvm::NamedMDNode::clearOperands(v81);
    llvm::NamedMDNode::eraseFromParent(v81);
  }
LABEL_107:
  if (__p)
  {
    uint64_t v91 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v93)
  {
    std::string v94 = (char *)v93;
    operator delete(v93);
  }
}

void sub_25574FC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (__p) {
    operator delete(__p);
  }
  if (a35) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void MTLThreadgroupMemoryCheckPass::mergeThreadgroupArguments(MTLThreadgroupMemoryCheckPass *this)
{
  v26[4] = *MEMORY[0x263EF8340];
  Entryuint64_t Function = MetalModulePass::getEntryFunction(this);
  uint64_t v3 = *(void *)(EntryFunction + 24);
  v25[0] = v26;
  v25[1] = (void *)0x400000000;
  v23[0] = v24;
  v23[1] = (void *)0x400000000;
  v21[0] = v22;
  v21[1] = (void *)0x400000000;
  unsigned int v18 = v20;
  uint64_t v19 = 0x400000000;
  v14[0] = 0;
  if (*(_DWORD *)(v3 + 12) != 1)
  {
    unsigned int v4 = 0;
    do
    {
      v16[0] = 0;
      uint64_t v5 = *(void *)(*((void *)this + 16) - 8 * *(unsigned int *)(*((void *)this + 16) + 8) + 16);
      uint64_t v6 = *(void **)(v5 - 8 * *(unsigned int *)(v5 + 8) + 8 * v4);
      v16[0] = v6;
      BOOL v15 = 0;
      uint64_t v7 = *(void *)(*(void *)(v3 + 16) + 8 * (v4 + 1));
      BOOL v15 = (void *)v7;
      int v8 = *(_DWORD *)(v7 + 8);
      if (v8 != 15) {
        goto LABEL_8;
      }
      if ((v8 & 0xFE) == 0x12) {
        int v8 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
      }
      if ((v8 & 0xFFFFFF00) == 0x300
        && !MTLThreadgroupMemoryCheckPass::isMeshGridPropertiesArg((uint64_t)this, (uint64_t)v6))
      {
        llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v18, (uint64_t *)v16);
      }
      else
      {
LABEL_8:
        MTLMDBuilder::getMetadata<unsigned int>();
        llvm::MDNode::replaceOperandWith();
        llvm::SmallVectorImpl<unsigned int>::emplace_back<unsigned int &>((uint64_t)v21, v14);
        llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v25, (uint64_t *)v16);
        llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v23, (uint64_t *)&v15);
      }
      unsigned int v4 = v14[0] + 1;
      v14[0] = v4;
    }
    while (v4 < *(_DWORD *)(v3 + 12) - 1);
    if (v19)
    {
      uint64_t v9 = llvm::FunctionType::get();
      uint64_t v10 = *(_DWORD *)(EntryFunction + 32) & 0xF;
      __int16 v17 = 257;
      __int16 v11 = (const llvm::Twine *)llvm::Function::Create(v9, v10, (uint64_t)v16, *((void *)this + 6));
      uint64_t v12 = (llvm::BasicBlock *)*((void *)this + 5);
      __int16 v17 = 257;
      llvm::BasicBlock::Create(v12, (llvm::LLVMContext *)v16, v11, 0, v13);
    }
  }
  if (v18 != v20) {
    free(v18);
  }
  if (v21[0] != v22) {
    free(v21[0]);
  }
  if (v23[0] != v24) {
    free(v23[0]);
  }
  if (v25[0] != v26) {
    free(v25[0]);
  }
}

void sub_25575047C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a50);
  if (STACK[0x200] != a13) {
    free((void *)STACK[0x200]);
  }
  unint64_t v53 = *(void **)(v51 - 224);
  if (v53 != (void *)a14) {
    free(v53);
  }
  unint64_t v54 = *(void **)(v51 - 192);
  if (v54 != (void *)a15) {
    free(v54);
  }
  long long v55 = *(void **)(v51 - 144);
  if (v55 != (void *)a16) {
    free(v55);
  }
  if (a28 != v50) {
    free(a28);
  }
  _Unwind_Resume(a1);
}

void MTLThreadgroupMemoryCheckPass::createTagFunctions(MTLThreadgroupMemoryCheckPass *this, llvm::Module *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v10[0] = "mtl.threadgroup.strip_tag";
  __int16 v11 = 259;
  unsigned int v4 = (MTLBoundsCheck *)llvm::PointerType::get();
  uint64_t v9 = (MTLBoundsCheck *)llvm::PointerType::get();
  *((void *)this + 24) = getMangledFunction<llvm::PointerType *>((uint64_t)a2, (llvm::Twine *)v10, v4, &v9);
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  llvm::Function::onlyWritesMemory(*((llvm::Function **)this + 24));
  llvm::Function::addFnAttr();
  *(_DWORD *)(*((void *)this + 24) + 32) = *(_DWORD *)(*((void *)this + 24) + 32) & 0xFFFFBFC0 | 0x4007;
  uint64_t v6 = (const llvm::Twine *)*((void *)this + 24);
  uint64_t v7 = v6;
  if (*((_WORD *)v6 + 9))
  {
    llvm::Function::BuildLazyArguments(v6);
    uint64_t v7 = (const llvm::Twine *)*((void *)this + 24);
  }
  int v8 = (llvm::BasicBlock *)*((void *)this + 5);
  __int16 v11 = 257;
  llvm::BasicBlock::Create(v8, (llvm::LLVMContext *)v10, v7, 0, v5);
}

void sub_255750864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

void MTLThreadgroupMemoryCheckPass::createGetLengthFunctions(MTLThreadgroupMemoryCheckPass *this, llvm::Module *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = "mtl.threadgroup.get_length";
  __int16 v6 = 259;
  *((void *)this + 26) = getMangledFunction<llvm::Type *&>((uint64_t)a2, (llvm::Twine *)v5, *((MTLBoundsCheck **)this + 10), (MTLBoundsCheck **)this + 10);
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  *(_DWORD *)(*((void *)this + 26) + 32) = *(_DWORD *)(*((void *)this + 26) + 32) & 0xFFFFBFC0 | 0x4007;
  uint64_t v3 = (llvm::BasicBlock *)*((void *)this + 5);
  v5[0] = "entry";
  __int16 v6 = 259;
  llvm::BasicBlock::Create(v3, (llvm::LLVMContext *)v5, *((const llvm::Twine **)this + 26), 0, v4);
}

void sub_255750F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
}

void MTLThreadgroupMemoryCheckPass::applyThreadgroupChecks(MTLBoundsCheck::SharedPassData **this, llvm::Module *a2)
{
  uint64_t v2 = (char *)a2 + 24;
  uint64_t v3 = (char *)*((void *)a2 + 4);
  if (v3 != (char *)a2 + 24)
  {
    do
    {
      if (v3) {
        uint64_t v5 = (llvm::Value *)(v3 - 56);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t Name = (void *)llvm::Value::getName(v5);
      if (v7 < 0x10 || (*Name == 0x657268742E6C746DLL ? (BOOL v8 = Name[1] == 0x2E70756F72676461) : (BOOL v8 = 0), !v8))
      {
        if ((llvm::GlobalValue::isDeclaration(v5) & 1) == 0) {
          MTLThreadgroupMemoryCheckPass::applyThreadgroupChecks(this, v5);
        }
      }
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::GlobalVariable *,unsigned long long>>::emplace_back<llvm::GlobalVariable *,unsigned long long &>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::MDNode *>,true>::push_back(a1, *a2, *a3);
    uint64_t v5 = *(void *)a1;
    unsigned int v8 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    uint64_t v5 = *(void *)a1;
    __int16 v6 = (uint64_t *)(*(void *)a1 + 16 * v4);
    uint64_t v7 = *a3;
    *__int16 v6 = *a2;
    v6[1] = v7;
    unsigned int v8 = v4 + 1;
    *(_DWORD *)(a1 + 8) = v8;
  }
  return v5 + 16 * v8 - 16;
}

void std::__function::__func<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1},std::allocator<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1}>,llvm::Value * ()(MTLIRBuilder &)>::~__func()
{
}

__n128 std::__function::__func<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1},std::allocator<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1}>,llvm::Value * ()(MTLIRBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_270454010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1},std::allocator<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1}>,llvm::Value * ()(MTLIRBuilder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270454010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1},std::allocator<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1}>,llvm::Value * ()(MTLIRBuilder &)>::operator()(uint64_t a1, llvm::Type **a2)
{
  return std::__invoke_void_return_wrapper<llvm::Value *,false>::__call[abi:ne180100]<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1} &,MTLIRBuilder &>(a1 + 8, a2);
}

uint64_t std::__invoke_void_return_wrapper<llvm::Value *,false>::__call[abi:ne180100]<MTLThreadgroupMemoryCheckPass::mergeThreadgroupGlobals(void)::{lambda(MTLIRBuilder &)#1} &,MTLIRBuilder &>(uint64_t a1, llvm::Type **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = **(void **)a1;
  __int16 v6 = *(llvm::Type **)(v5 + 24);
  __int16 v18 = 257;
  uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a2, v6, v5, 0, 0, (uint64_t)v17);
  uint64_t v8 = *(void *)(v4 + 64);
  uint64_t Name = (char *)llvm::Value::getName(**(llvm::Value ***)a1);
  uint64_t GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v8, Name, v10);
  unint64_t v12 = *(void *)(*(void *)(a1 + 16) + 8);
  __int16 v18 = 257;
  uint64_t ConstGEP1_64 = llvm::IRBuilderBase::CreateConstGEP1_64(a2, GVBaseType, AlignedLoad, v12, (const llvm::Twine *)v17);
  uint64_t v14 = ***(void ***)(a1 + 16);
  v16[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)a2, 49, ConstGEP1_64, v14, (uint64_t)v16);
}

void *std::__function::__value_func<llvm::Value * ()(MTLIRBuilder &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *>(uint64_t a1, llvm::BasicBlock **a2)
{
  uint64_t v3 = (llvm::LLVMContext **)llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder(a1, *a2, 0, 0, 0);
  MTLIRBuilder::initTypeCache((MTLIRBuilder *)v3, v3[8]);
  return a1;
}

void sub_255751330(_Unwind_Exception *a1)
{
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(v1);
  _Unwind_Resume(a1);
}

void std::deque<llvm::User *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<llvm::User *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<llvm::User *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      size_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<llvm::User **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<llvm::User **>::push_front((uint64_t)a1, &v54);
    size_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      size_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<llvm::User **>::push_back(&v54, &v53);
  std::string v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<llvm::User **>::push_front((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_255751698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<llvm::User **>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      std::string v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<llvm::User **>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<llvm::User *>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<llvm::User **>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<llvm::User **>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

BOOL MTLThreadgroupMemoryCheckPass::isMeshGridPropertiesArg(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  if (v2 < 2) {
    return 0;
  }
  uint64_t v3 = *(llvm::MDString **)(a2 - 8 * v2 + 8);
  if (*(unsigned char *)v3) {
    return 0;
  }
  uint64_t String = (void *)llvm::MDString::getString(v3);
  if (v5 != 24) {
    return 0;
  }
  return *String == 0x6873656D2E726961 && String[1] == 0x72705F646972675FLL && String[2] == 0x736569747265706FLL;
}

uint64_t getMangledFunction<llvm::PointerType *>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, MTLBoundsCheck **a4)
{
  llvm::Twine::str((uint64_t *)&v37, this);
  MTLBoundsCheck::getMangledTypeStr(a3, v7, &v36);
  uint64_t v8 = std::string::insert(&v36, 0, ".");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v33 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (v33 >= 0) {
    std::string::size_type v11 = HIBYTE(v33);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(&v37, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  memset(&v36, 0, sizeof(v36));
  uint64_t v13 = *a4;
  MTLBoundsCheck::getMangledTypeStr(v13, v12, &v35);
  uint64_t v14 = std::string::insert(&v35, 0, ".");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t v33 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0) {
    int64_t v16 = __p;
  }
  else {
    int64_t v16 = (void **)__p[0];
  }
  if (v33 >= 0) {
    std::string::size_type v17 = HIBYTE(v33);
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  std::string::append(&v37, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  std::string::size_type size = v36.__r_.__value_.__l.__size_;
  if (v36.__r_.__value_.__l.__size_ >= v36.__r_.__value_.__r.__words[2])
  {
    uint64_t v20 = (uint64_t)(v36.__r_.__value_.__l.__size_ - v36.__r_.__value_.__r.__words[0]) >> 3;
    if ((unint64_t)(v20 + 1) >> 61) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = (uint64_t)(v36.__r_.__value_.__r.__words[2] - v36.__r_.__value_.__r.__words[0]) >> 2;
    if (v21 <= v20 + 1) {
      unint64_t v21 = v20 + 1;
    }
    if (v36.__r_.__value_.__r.__words[2] - v36.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22) {
      uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v36.__r_.__value_.__r.__words[2], v22);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = (MTLBoundsCheck **)&v23[8 * v20];
    std::string::size_type v25 = (std::string::size_type)&v23[8 * v22];
    *uint64_t v24 = v13;
    std::string::size_type v19 = (std::string::size_type)(v24 + 1);
    uint64_t v26 = (char *)v36.__r_.__value_.__l.__size_;
    std::string::size_type v27 = v36.__r_.__value_.__r.__words[0];
    if (v36.__r_.__value_.__l.__size_ != v36.__r_.__value_.__r.__words[0])
    {
      do
      {
        uint64_t v28 = (MTLBoundsCheck *)*((void *)v26 - 1);
        v26 -= 8;
        *--uint64_t v24 = v28;
      }
      while (v26 != (char *)v27);
      uint64_t v26 = (char *)v36.__r_.__value_.__r.__words[0];
    }
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    v36.__r_.__value_.__l.__size_ = v19;
    v36.__r_.__value_.__r.__words[2] = v25;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *(void *)v36.__r_.__value_.__l.__size_ = v13;
    std::string::size_type v19 = size + 8;
  }
  v36.__r_.__value_.__l.__size_ = v19;
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t v30 = llvm::FunctionType::get();
    __int16 v34 = 260;
    __p[0] = &v37;
    uint64_t Function = llvm::Function::Create(v30, 0, (uint64_t)__p, a1);
  }
  if (v36.__r_.__value_.__r.__words[0])
  {
    v36.__r_.__value_.__l.__size_ = v36.__r_.__value_.__r.__words[0];
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return Function;
}

void sub_255751F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::Function::onlyWritesMemory(llvm::Function *this)
{
  if (llvm::Function::hasFnAttribute()) {
    return 1;
  }
  return llvm::Function::hasFnAttribute();
}

uint64_t getMangledFunction<llvm::Type *&>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, MTLBoundsCheck **a4)
{
  llvm::Twine::str((uint64_t *)&v37, this);
  MTLBoundsCheck::getMangledTypeStr(a3, v7, &v36);
  uint64_t v8 = std::string::insert(&v36, 0, ".");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v33 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (v33 >= 0) {
    std::string::size_type v11 = HIBYTE(v33);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(&v37, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  memset(&v36, 0, sizeof(v36));
  uint64_t v13 = *a4;
  MTLBoundsCheck::getMangledTypeStr(v13, v12, &v35);
  uint64_t v14 = std::string::insert(&v35, 0, ".");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t v33 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0) {
    int64_t v16 = __p;
  }
  else {
    int64_t v16 = (void **)__p[0];
  }
  if (v33 >= 0) {
    std::string::size_type v17 = HIBYTE(v33);
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  std::string::append(&v37, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  std::string::size_type size = v36.__r_.__value_.__l.__size_;
  if (v36.__r_.__value_.__l.__size_ >= v36.__r_.__value_.__r.__words[2])
  {
    uint64_t v20 = (uint64_t)(v36.__r_.__value_.__l.__size_ - v36.__r_.__value_.__r.__words[0]) >> 3;
    if ((unint64_t)(v20 + 1) >> 61) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = (uint64_t)(v36.__r_.__value_.__r.__words[2] - v36.__r_.__value_.__r.__words[0]) >> 2;
    if (v21 <= v20 + 1) {
      unint64_t v21 = v20 + 1;
    }
    if (v36.__r_.__value_.__r.__words[2] - v36.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22) {
      uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v36.__r_.__value_.__r.__words[2], v22);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v24 = (MTLBoundsCheck **)&v23[8 * v20];
    std::string::size_type v25 = (std::string::size_type)&v23[8 * v22];
    *uint64_t v24 = v13;
    std::string::size_type v19 = (std::string::size_type)(v24 + 1);
    uint64_t v26 = (char *)v36.__r_.__value_.__l.__size_;
    std::string::size_type v27 = v36.__r_.__value_.__r.__words[0];
    if (v36.__r_.__value_.__l.__size_ != v36.__r_.__value_.__r.__words[0])
    {
      do
      {
        uint64_t v28 = (MTLBoundsCheck *)*((void *)v26 - 1);
        v26 -= 8;
        *--uint64_t v24 = v28;
      }
      while (v26 != (char *)v27);
      uint64_t v26 = (char *)v36.__r_.__value_.__r.__words[0];
    }
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    v36.__r_.__value_.__l.__size_ = v19;
    v36.__r_.__value_.__r.__words[2] = v25;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    *(void *)v36.__r_.__value_.__l.__size_ = v13;
    std::string::size_type v19 = size + 8;
  }
  v36.__r_.__value_.__l.__size_ = v19;
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t v30 = llvm::FunctionType::get();
    __int16 v34 = 260;
    __p[0] = &v37;
    uint64_t Function = llvm::Function::Create(v30, 0, (uint64_t)__p, a1);
  }
  if (v36.__r_.__value_.__r.__words[0])
  {
    v36.__r_.__value_.__l.__size_ = v36.__r_.__value_.__r.__words[0];
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return Function;
}

void sub_2557522DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t getMangledFunction<llvm::Type *&,llvm::PointerType *>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, void *a4, uint64_t *a5)
{
  v41[2] = *MEMORY[0x263EF8340];
  llvm::Twine::str((uint64_t *)&v40, this);
  MTLBoundsCheck::getMangledTypeStr(a3, v9, &v39);
  uint64_t v10 = std::string::insert(&v39, 0, ".");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t v36 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v36 >= 0) {
    unint64_t v12 = __p;
  }
  else {
    unint64_t v12 = (void **)__p[0];
  }
  if (v36 >= 0) {
    std::string::size_type v13 = HIBYTE(v36);
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  std::string::append(&v40, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = a1;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = 0;
  memset(&v39, 0, sizeof(v39));
  uint64_t v17 = *a5;
  v41[0] = *a4;
  v41[1] = v17;
  do
  {
    uint64_t v18 = (MTLBoundsCheck *)v41[v16];
    MTLBoundsCheck::getMangledTypeStr(v18, (llvm::Type *)v14, &v38);
    std::string::size_type v19 = std::string::insert(&v38, 0, ".");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    int64_t v36 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v36 >= 0) {
      unint64_t v21 = __p;
    }
    else {
      unint64_t v21 = (void **)__p[0];
    }
    if (v36 >= 0) {
      std::string::size_type v22 = HIBYTE(v36);
    }
    else {
      std::string::size_type v22 = (std::string::size_type)__p[1];
    }
    std::string::append(&v40, (const std::string::value_type *)v21, v22);
    if (SHIBYTE(v36) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
    if (v39.__r_.__value_.__l.__size_ >= v39.__r_.__value_.__r.__words[2])
    {
      uint64_t v25 = (uint64_t)(v39.__r_.__value_.__l.__size_ - v39.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v25 + 1) >> 61) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = (uint64_t)(v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0]) >> 2;
      if (v26 <= v25 + 1) {
        unint64_t v26 = v25 + 1;
      }
      if (v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v26;
      }
      if (v14) {
        std::string::size_type v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v39.__r_.__value_.__r.__words[2], v14);
      }
      else {
        std::string::size_type v27 = 0;
      }
      uint64_t v28 = (MTLBoundsCheck **)&v27[8 * v25];
      MTLBoundsCheck *v28 = v18;
      std::string::size_type v24 = (std::string::size_type)(v28 + 1);
      long long v29 = (char *)v39.__r_.__value_.__l.__size_;
      std::string::size_type v30 = v39.__r_.__value_.__r.__words[0];
      if (v39.__r_.__value_.__l.__size_ != v39.__r_.__value_.__r.__words[0])
      {
        do
        {
          long long v31 = (MTLBoundsCheck *)*((void *)v29 - 1);
          v29 -= 8;
          *--uint64_t v28 = v31;
        }
        while (v29 != (char *)v30);
        long long v29 = (char *)v39.__r_.__value_.__r.__words[0];
      }
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      v39.__r_.__value_.__l.__size_ = v24;
      v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[8 * v14];
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *(void *)v39.__r_.__value_.__l.__size_ = v18;
      std::string::size_type v24 = size + 8;
    }
    v39.__r_.__value_.__l.__size_ = v24;
    ++v16;
  }
  while (v16 != 2);
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t v33 = llvm::FunctionType::get();
    __int16 v37 = 260;
    __p[0] = &v40;
    uint64_t Function = llvm::Function::Create(v33, 0, (uint64_t)__p, v15);
  }
  if (v39.__r_.__value_.__r.__words[0])
  {
    v39.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  return Function;
}

void sub_255752684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

void MTLThreadgroupMemoryCheckPass::applyThreadgroupChecks(MTLBoundsCheck::SharedPassData **this, llvm::Function *a2)
{
  v28[16] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a2 + 10);
  long long v20 = (char *)a2 + 72;
  if ((llvm::Function *)v2 != (llvm::Function *)((char *)a2 + 72))
  {
    do
    {
      uint64_t v4 = v2 - 24;
      if (!v2) {
        uint64_t v4 = 0;
      }
      unint64_t v26 = v28;
      uint64_t v27 = 0x800000000;
      uint64_t v5 = v4 + 40;
      uint64_t v6 = *(void *)(v4 + 48);
      if (v6 != v4 + 40)
      {
        do
        {
          if (v6) {
            uint64_t v7 = v6 - 24;
          }
          else {
            uint64_t v7 = 0;
          }
          int v8 = *(unsigned __int8 *)(v7 + 16);
          if ((v8 - 60) >= 2)
          {
            if (v8 == 84)
            {
              uint64_t v9 = *(void *)(v7 - 32);
              if (v9)
              {
                if (!*(unsigned char *)(v9 + 16) && *(void *)(v9 + 24) == *(void *)(v7 + 72)) {
                  llvm::Value::getName((llvm::Value *)v9);
                }
              }
            }
          }
          else
          {
            CheckedInstruction = 0;
            CheckedInstruction = (void *)MTLThreadgroupMemoryCheckPass::createCheckedInstruction((MTLThreadgroupMemoryCheckPass *)this, (llvm::Instruction *)v7);
            if (CheckedInstruction)
            {
              v21[0] = v7;
              llvm::SmallVectorImpl<std::pair<llvm::Instruction *,llvm::Function *>>::emplace_back<llvm::Instruction *,llvm::Function *&>((uint64_t)&v26, v21, (uint64_t *)&CheckedInstruction);
            }
          }
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6 != v5);
        uint64_t v10 = (llvm::Instruction **)v26;
        long long v11 = (llvm::Instruction **)((char *)v26 + 16 * v27);
        if (v27)
        {
          do
          {
            unint64_t v12 = *v10;
            int v13 = *((_DWORD *)*v10 + 5);
            if ((v13 & 0x40000000) != 0)
            {
              uint64_t v15 = (char *)*((void *)v12 - 1);
              uint64_t v14 = v13 & 0x7FFFFFF;
            }
            else
            {
              uint64_t v14 = v13 & 0x7FFFFFF;
              uint64_t v15 = (char *)v12 - 32 * v14;
            }
            uint64_t v16 = (uint64_t)v10[1];
            llvm::SmallVector<llvm::Value *,4u>::SmallVector<llvm::Use *,void>(&CheckedInstruction, v15, &v15[32 * v14]);
            MTLBoundsCheck::SharedPassData::indexForInstruction(this[8], v12);
            v21[0] = llvm::ConstantInt::get();
            llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&CheckedInstruction, v21);
            if (v16) {
              uint64_t v17 = *(void *)(v16 + 24);
            }
            else {
              uint64_t v17 = 0;
            }
            __int16 v22 = 257;
            uint64_t v18 = (llvm::Instruction *)llvm::CallInst::Create(v17, v16, (uint64_t)CheckedInstruction, v24, 0, 0);
            llvm::ReplaceInstWithInst(v12, v18, v19);
            if (CheckedInstruction != &v25) {
              free(CheckedInstruction);
            }
            v10 += 2;
          }
          while (v10 != v11);
          uint64_t v10 = (llvm::Instruction **)v26;
        }
        if (v10 != v28) {
          free(v10);
        }
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while ((char *)v2 != v20);
  }
}

void sub_255752974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21 != v21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLThreadgroupMemoryCheckPass::createCheckedInstruction(MTLThreadgroupMemoryCheckPass *this, llvm::Instruction *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 16);
  if (v2 == 60) {
    return MTLThreadgroupMemoryCheckPass::getCheckedLoadFunction(this, (uint64_t)a2);
  }
  if (v2 == 61) {
    return MTLThreadgroupMemoryCheckPass::getCheckedStoreFunction((uint64_t)this, (uint64_t)a2);
  }
  return 0;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::Instruction *,llvm::Function *>>::emplace_back<llvm::Instruction *,llvm::Function *&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<std::pair<unsigned int,llvm::MDNode *>,true>::push_back(a1, *a2, *a3);
    uint64_t v5 = *(void *)a1;
    unsigned int v7 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = (uint64_t *)(*(void *)a1 + 16 * v4);
    *uint64_t v6 = *a2;
    v6[1] = *a3;
    unsigned int v7 = v4 + 1;
    *(_DWORD *)(a1 + 8) = v7;
  }
  return v5 + 16 * v7 - 16;
}

uint64_t MTLThreadgroupMemoryCheckPass::getCheckedStoreFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = **(void **)(a2 - 32);
  uint64_t v14 = (void *)v3;
  if (!a2 || (uint64_t v4 = (llvm::Type **)a2, *(unsigned char *)(a2 + 16) != 60)) {
    uint64_t v4 = *(llvm::Type ***)(a2 - 64);
  }
  int v13 = 0;
  int v13 = *v4;
  int v5 = *(_DWORD *)(v3 + 8);
  if ((v5 & 0xFE) == 0x12) {
    int v5 = *(_DWORD *)(**(void **)(v3 + 16) + 8);
  }
  if ((v5 & 0xFFFFFF00) != 0x300) {
    return 0;
  }
  uint64_t v12 = 1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1);
  v15[0] = "mtl.threadgroup.checked_store.";
  void v15[2] = &v12;
  __int16 v16 = 3075;
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t VoidTy = (MTLBoundsCheck *)llvm::Type::getVoidTy(*(llvm::Type **)(a1 + 40), (llvm::LLVMContext *)a2);
  uint64_t v8 = getMangledFunction<llvm::Type *&,llvm::Type *&,llvm::Type *&>(v6, (llvm::Twine *)v15, VoidTy, (void **)&v13, &v14, (int64_t *)(a1 + 80));
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v8))
  {
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    *(_DWORD *)(v8 + 32) = *(_DWORD *)(v8 + 32) & 0xFFFFBFC0 | 0x4007;
    if (*(_WORD *)(v8 + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v8);
      if (*(_WORD *)(v8 + 18))
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v8);
        if (*(_WORD *)(v8 + 18)) {
          llvm::Function::BuildLazyArguments((llvm::Function *)v8);
        }
      }
    }
    uint64_t v10 = *(llvm::BasicBlock **)(a1 + 40);
    v15[0] = "entry";
    __int16 v16 = 259;
    llvm::BasicBlock::Create(v10, (llvm::LLVMContext *)v15, (const llvm::Twine *)v8, 0, v9);
  }
  return v8;
}

void sub_255753100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
}

uint64_t MTLThreadgroupMemoryCheckPass::getCheckedLoadFunction(void *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = **(void **)(a2 - 32);
  uint64_t v13 = v3;
  if (!a2 || (uint64_t v4 = (MTLBoundsCheck **)a2, *(unsigned char *)(a2 + 16) != 60)) {
    uint64_t v4 = *(MTLBoundsCheck ***)(a2 - 64);
  }
  int v5 = *(_DWORD *)(v3 + 8);
  if ((v5 & 0xFE) == 0x12) {
    int v5 = *(_DWORD *)(**(void **)(v3 + 16) + 8);
  }
  if ((v5 & 0xFFFFFF00) != 0x300) {
    return 0;
  }
  uint64_t v6 = *v4;
  uint64_t v12 = 1 << ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1);
  uint64_t v7 = a1[6];
  v14[0] = "mtl.threadgroup.checked_load.";
  void v14[2] = &v12;
  __int16 v15 = 3075;
  uint64_t v8 = getMangledFunction<llvm::Type *&,llvm::Type *&>(v7, (llvm::Twine *)v14, v6, &v13, a1 + 10);
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v8))
  {
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    *(_DWORD *)(v8 + 32) = *(_DWORD *)(v8 + 32) & 0xFFFFBFC0 | 0x4007;
    if (*(_WORD *)(v8 + 18))
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v8);
      if (*(_WORD *)(v8 + 18)) {
        llvm::Function::BuildLazyArguments((llvm::Function *)v8);
      }
    }
    uint64_t v10 = (llvm::BasicBlock *)a1[5];
    v14[0] = "entry";
    __int16 v15 = 259;
    llvm::BasicBlock::Create(v10, (llvm::LLVMContext *)v14, (const llvm::Twine *)v8, 0, v9);
  }
  return v8;
}

void sub_255753834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
}

uint64_t getMangledFunction<llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, void **a4, void **a5, int64_t *a6)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  llvm::Twine::str((uint64_t *)&v41, this);
  MTLBoundsCheck::getMangledTypeStr(a3, v11, &v40);
  uint64_t v12 = std::string::insert(&v40, 0, ".");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v43 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v43 >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if (v43 >= 0) {
    std::string::size_type v15 = HIBYTE(v43);
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  std::string::append(&v41, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(v43) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v17 = a1;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = 0;
  memset(&v40, 0, sizeof(v40));
  std::string::size_type v19 = *a5;
  __p[0] = *a4;
  __p[1] = v19;
  int64_t v43 = *a6;
  do
  {
    long long v20 = (MTLBoundsCheck *)__p[v18];
    MTLBoundsCheck::getMangledTypeStr(v20, (llvm::Type *)v16, &v37);
    unint64_t v21 = std::string::insert(&v37, 0, ".");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    int64_t v39 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string v38 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v39 >= 0) {
      uint64_t v23 = v38;
    }
    else {
      uint64_t v23 = (void **)v38[0];
    }
    if (v39 >= 0) {
      std::string::size_type v24 = HIBYTE(v39);
    }
    else {
      std::string::size_type v24 = (std::string::size_type)v38[1];
    }
    std::string::append(&v41, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(v39) < 0) {
      operator delete(v38[0]);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    std::string::size_type size = v40.__r_.__value_.__l.__size_;
    if (v40.__r_.__value_.__l.__size_ >= v40.__r_.__value_.__r.__words[2])
    {
      uint64_t v27 = (uint64_t)(v40.__r_.__value_.__l.__size_ - v40.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v27 + 1) >> 61) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v28 = (uint64_t)(v40.__r_.__value_.__r.__words[2] - v40.__r_.__value_.__r.__words[0]) >> 2;
      if (v28 <= v27 + 1) {
        unint64_t v28 = v27 + 1;
      }
      if (v40.__r_.__value_.__r.__words[2] - v40.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v28;
      }
      if (v16) {
        long long v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v40.__r_.__value_.__r.__words[2], v16);
      }
      else {
        long long v29 = 0;
      }
      std::string::size_type v30 = (MTLBoundsCheck **)&v29[8 * v27];
      *std::string::size_type v30 = v20;
      std::string::size_type v26 = (std::string::size_type)(v30 + 1);
      long long v31 = (char *)v40.__r_.__value_.__l.__size_;
      std::string::size_type v32 = v40.__r_.__value_.__r.__words[0];
      if (v40.__r_.__value_.__l.__size_ != v40.__r_.__value_.__r.__words[0])
      {
        do
        {
          uint64_t v33 = (MTLBoundsCheck *)*((void *)v31 - 1);
          v31 -= 8;
          *--std::string::size_type v30 = v33;
        }
        while (v31 != (char *)v32);
        long long v31 = (char *)v40.__r_.__value_.__r.__words[0];
      }
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      v40.__r_.__value_.__l.__size_ = v26;
      v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&v29[8 * v16];
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *(void *)v40.__r_.__value_.__l.__size_ = v20;
      std::string::size_type v26 = size + 8;
    }
    v40.__r_.__value_.__l.__size_ = v26;
    ++v18;
  }
  while (v18 != 3);
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t v35 = llvm::FunctionType::get();
    __int16 v44 = 260;
    __p[0] = &v41;
    uint64_t Function = llvm::Function::Create(v35, 0, (uint64_t)__p, v17);
  }
  if (v40.__r_.__value_.__r.__words[0])
  {
    v40.__r_.__value_.__l.__size_ = v40.__r_.__value_.__r.__words[0];
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  return Function;
}

void sub_255753BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (__p) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t getMangledFunction<llvm::Type *&,llvm::Type *&>(uint64_t a1, llvm::Twine *this, MTLBoundsCheck *a3, void *a4, uint64_t *a5)
{
  v41[2] = *MEMORY[0x263EF8340];
  llvm::Twine::str((uint64_t *)&v40, this);
  MTLBoundsCheck::getMangledTypeStr(a3, v9, &v39);
  uint64_t v10 = std::string::insert(&v39, 0, ".");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t v36 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v36 >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if (v36 >= 0) {
    std::string::size_type v13 = HIBYTE(v36);
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  std::string::append(&v40, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = a1;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = 0;
  memset(&v39, 0, sizeof(v39));
  uint64_t v17 = *a5;
  v41[0] = *a4;
  v41[1] = v17;
  do
  {
    uint64_t v18 = (MTLBoundsCheck *)v41[v16];
    MTLBoundsCheck::getMangledTypeStr(v18, (llvm::Type *)v14, &v38);
    std::string::size_type v19 = std::string::insert(&v38, 0, ".");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    int64_t v36 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (v36 >= 0) {
      unint64_t v21 = __p;
    }
    else {
      unint64_t v21 = (void **)__p[0];
    }
    if (v36 >= 0) {
      std::string::size_type v22 = HIBYTE(v36);
    }
    else {
      std::string::size_type v22 = (std::string::size_type)__p[1];
    }
    std::string::append(&v40, (const std::string::value_type *)v21, v22);
    if (SHIBYTE(v36) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
    if (v39.__r_.__value_.__l.__size_ >= v39.__r_.__value_.__r.__words[2])
    {
      uint64_t v25 = (uint64_t)(v39.__r_.__value_.__l.__size_ - v39.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v25 + 1) >> 61) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = (uint64_t)(v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0]) >> 2;
      if (v26 <= v25 + 1) {
        unint64_t v26 = v25 + 1;
      }
      if (v39.__r_.__value_.__r.__words[2] - v39.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v26;
      }
      if (v14) {
        uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v39.__r_.__value_.__r.__words[2], v14);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = (MTLBoundsCheck **)&v27[8 * v25];
      MTLBoundsCheck *v28 = v18;
      std::string::size_type v24 = (std::string::size_type)(v28 + 1);
      long long v29 = (char *)v39.__r_.__value_.__l.__size_;
      std::string::size_type v30 = v39.__r_.__value_.__r.__words[0];
      if (v39.__r_.__value_.__l.__size_ != v39.__r_.__value_.__r.__words[0])
      {
        do
        {
          long long v31 = (MTLBoundsCheck *)*((void *)v29 - 1);
          v29 -= 8;
          *--unint64_t v28 = v31;
        }
        while (v29 != (char *)v30);
        long long v29 = (char *)v39.__r_.__value_.__r.__words[0];
      }
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      v39.__r_.__value_.__l.__size_ = v24;
      v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[8 * v14];
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *(void *)v39.__r_.__value_.__l.__size_ = v18;
      std::string::size_type v24 = size + 8;
    }
    v39.__r_.__value_.__l.__size_ = v24;
    ++v16;
  }
  while (v16 != 2);
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t v33 = llvm::FunctionType::get();
    __int16 v37 = 260;
    __p[0] = &v40;
    uint64_t Function = llvm::Function::Create(v33, 0, (uint64_t)__p, v15);
  }
  if (v39.__r_.__value_.__r.__words[0])
  {
    v39.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  return Function;
}

void sub_255753F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

void MTLFragmentInputPackingPass::fragmentInputPacking(int a1, llvm::Type **this, uint64_t a3)
{
  v188[10] = *MEMORY[0x263EF8340];
  uint64_t v164 = *this;
  *(void *)&long long v182 = "air.fragment";
  LOWORD(v184) = 259;
  NamedMetaint data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((llvm::Module *)this, (const llvm::Twine *)&v182);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  uint64_t v6 = (void *)(Operand - 8 * *(unsigned int *)(Operand + 8));
  uint64_t v7 = v6[2];
  uint64_t v8 = *(void *)(*v6 + 128);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v179 = 0;
  uint64_t v180 = 0;
  unint64_t v181 = 0;
  uint64_t v176 = 0;
  uint64_t v177 = 0;
  long long v178 = 0;
  long long __p = 0;
  long long v174 = 0;
  uint64_t v175 = 0;
  if (v7)
  {
    std::vector<unsigned int>::vector(&v172, *(void *)(v8 + 96));
    MTLFrameworkPass::getArgumentMetadataIndices(v7, (uint64_t)&v172);
    uint64_t v163 = v9;
    int v158 = (llvm::Module *)this;
    if (*(_WORD *)(v8 + 18)) {
      llvm::Function::BuildLazyArguments((llvm::Function *)v8);
    }
    int v10 = 0;
    long long v162 = (llvm::Function *)v8;
    uint64_t v11 = *(void *)(v8 + 88);
    long long v160 = 0u;
    while (1)
    {
      if (*((_WORD *)v162 + 9)) {
        llvm::Function::BuildLazyArguments(v162);
      }
      if (v11 == *((void *)v162 + 11) + 40 * *((void *)v162 + 12))
      {
        unint64_t v54 = 126 - 2 * __clz((v180 - (unsigned char *)v179) >> 5);
        if (v180 == v179) {
          uint64_t v55 = 0;
        }
        else {
          uint64_t v55 = v54;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,VaryingInfo *,false>((unint64_t)v179, (long long *)v180, (uint64_t)&v182, v55, 1);
        if (((v180 - (unsigned char *)v179) & 0x1FFFFFFFE0) != 0)
        {
          uint64_t v56 = 0;
          uint64_t v57 = ((unint64_t)(v180 - (unsigned char *)v179) >> 5);
          do
          {
            std::string::size_type v58 = v179;
            uint64_t v59 = (char *)v179 + 32 * v56;
            uint64_t v61 = v176;
            unsigned int v60 = v177;
            int ComponentType = MTLDataTypeGetComponentType(v59[6]);
            int ComponentCount = MTLDataTypeGetComponentCount(v59[6]);
            __int16 v64 = ComponentCount;
            unsigned __int8 v65 = v58[32 * v56 + 28];
            uint64_t v66 = -1431655765 * ((v60 - v61) >> 3);
            if ((v65 & 0x38) == 0x20 || v66 == 0)
            {
LABEL_82:
              uint64_t v71 = *(void *)(*(void *)(v163 + 16) + 8 * (*v59 + 1));
              if ((*(_DWORD *)(v71 + 8) & 0xFE) == 0x12) {
                uint64_t v71 = **(void **)(v71 + 16);
              }
              uint64_t v72 = v177;
              if (v177 >= v178)
              {
                unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((v177 - (unsigned char *)v176) >> 3);
                unint64_t v75 = v74 + 1;
                if (v74 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * ((v178 - (unsigned char *)v176) >> 3) > v75) {
                  unint64_t v75 = 0x5555555555555556 * ((v178 - (unsigned char *)v176) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((v178 - (unsigned char *)v176) >> 3) >= 0x555555555555555) {
                  unint64_t v76 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v76 = v75;
                }
                if (v76) {
                  unint64_t v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PackedInput>>((uint64_t)&v178, v76);
                }
                else {
                  unint64_t v77 = 0;
                }
                unint64_t v79 = &v77[24 * v74];
                *(_WORD *)unint64_t v79 = ComponentType;
                *((_WORD *)v79 + 1) = v64;
                *((_WORD *)v79 + 2) = 1;
                *((_WORD *)v79 + 3) = v56;
                *((void *)v79 + 2) = v71;
                uint64_t v81 = (char *)v176;
                uint64_t v80 = v177;
                char v82 = v79;
                if (v177 != v176)
                {
                  do
                  {
                    long long v83 = *(_OWORD *)(v80 - 24);
                    *((void *)v82 - 1) = *((void *)v80 - 1);
                    *(_OWORD *)(v82 - 24) = v83;
                    v82 -= 24;
                    v80 -= 24;
                  }
                  while (v80 != v81);
                  uint64_t v80 = (char *)v176;
                }
                uint64_t v73 = v79 + 24;
                uint64_t v176 = v82;
                uint64_t v177 = v79 + 24;
                long long v178 = &v77[24 * v76];
                if (v80) {
                  operator delete(v80);
                }
              }
              else
              {
                *(_WORD *)uint64_t v177 = ComponentType;
                *((_WORD *)v72 + 1) = ComponentCount;
                *((_WORD *)v72 + 2) = 1;
                *((_WORD *)v72 + 3) = v56;
                uint64_t v73 = v72 + 24;
                *((void *)v72 + 2) = v71;
              }
              uint64_t v177 = v73;
            }
            else
            {
              unint64_t v68 = (unsigned __int16 *)((char *)v176 + 6);
              while (1)
              {
                int v69 = *(v68 - 2);
                BOOL v70 = (v69 + ComponentCount) <= 4 && ComponentType == *(v68 - 3);
                if (v70 && ((v65 ^ *((unsigned char *)v179 + 32 * *v68 + 28)) & 0x3E) == 0) {
                  break;
                }
                v68 += 12;
                if (!--v66) {
                  goto LABEL_82;
                }
              }
              *(v68 - 2) = v69 + ComponentCount;
              uint64_t v78 = *(v68 - 1);
              v68[v78] = v56;
              *(v68 - 1) = v78 + 1;
            }
            ++v56;
          }
          while (v56 != v57);
        }
        long long v170 = 0;
        long long v171 = 0;
        long long v169 = 0;
        std::vector<llvm::Metadata *>::reserve(&v169, (*(_DWORD *)(v163 + 12) - 1));
        uint64_t v84 = *((void *)v162 + 14);
        long long v167 = 0;
        uint64_t v168 = v84;
        v187[0] = v188;
        v187[1] = 0xA00000000;
        uint64_t v165 = 0;
        int64_t v166 = 0;
        std::vector<llvm::Metadata *>::reserve(&v165, (*(_DWORD *)(v163 + 12) - 1));
        uint64_t v161 = -1431655765 * ((v177 - (unsigned char *)v176) >> 3);
        if (-1431655765 * ((v177 - (unsigned char *)v176) >> 3))
        {
          uint64_t v86 = 0;
          do
          {
            std::string v87 = v176;
            std::string v88 = (char *)v176 + 24 * v86;
            uint64_t v89 = *((unsigned __int16 *)v88 + 3);
            std::string v90 = v179;
            unsigned int v91 = *((unsigned __int16 *)v88 + 1);
            int v92 = MTLDataTypeGetComponentType(*((_DWORD *)v179 + 8 * v89 + 6));
            uint64_t v93 = v87[3 * v86 + 2];
            if (v91 >= 2 && (v90[32 * v89 + 28] & 0x38) != 0x20) {
              uint64_t v93 = llvm::VectorType::get();
            }
            std::string v94 = v170;
            if (v170 >= (uint64_t *)v171)
            {
              uint64_t v96 = ((char *)v170 - (unsigned char *)v169) >> 3;
              if ((unint64_t)(v96 + 1) >> 61) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v97 = (v171 - (unsigned char *)v169) >> 2;
              if (v97 <= v96 + 1) {
                unint64_t v97 = v96 + 1;
              }
              if ((unint64_t)(v171 - (unsigned char *)v169) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v98 = v97;
              }
              if (v98) {
                uint64_t v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v171, v98);
              }
              else {
                uint64_t v99 = 0;
              }
              uint64_t v100 = (uint64_t *)&v99[8 * v96];
              *uint64_t v100 = v93;
              std::string v95 = v100 + 1;
              uint64_t v102 = (char *)v169;
              char v101 = (char *)v170;
              if (v170 != v169)
              {
                do
                {
                  uint64_t v103 = *((void *)v101 - 1);
                  v101 -= 8;
                  *--uint64_t v100 = v103;
                }
                while (v101 != v102);
                char v101 = (char *)v169;
              }
              long long v169 = v100;
              long long v170 = v95;
              long long v171 = &v99[8 * v98];
              if (v101) {
                operator delete(v101);
              }
            }
            else
            {
              *long long v170 = v93;
              std::string v95 = v94 + 1;
            }
            long long v170 = v95;
            llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)v187, 0);
            ShaderTypeuint64_t Name = MTLDataTypeGetShaderTypeName(v92, v91);
            int v186 = 0;
            long long v184 = 0u;
            long long v185 = 0u;
            long long v182 = 0u;
            long long v183 = 0u;
            llvm::Type::getInt32Ty(v164, v105);
            llvm::ConstantInt::get();
            *(void *)&long long v182 = llvm::ValueAsMetadata::get();
            *((void *)&v182 + 1) = llvm::MDString::get();
            *(void *)&long long v183 = llvm::MDString::get();
            *((void *)&v183 + 1) = llvm::MDString::get();
            llvm::Type::getInt32Ty(v164, v106);
            llvm::ConstantInt::get();
            *(void *)&long long v184 = llvm::ValueAsMetadata::get();
            *((void *)&v184 + 1) = llvm::MDString::get();
            strlen(ShaderTypeName);
            *(void *)&long long v185 = llvm::MDString::get();
            unint64_t v107 = &v90[32 * v89];
            unint64_t v108 = MTLFrameworkPass::samplingStringFromQualifier((MTLFrameworkPass *)((v107[28] >> 3) & 7));
            strlen(v108);
            *((void *)&v185 + 1) = llvm::MDString::get();
            uint64_t v109 = MTLFrameworkPass::interpolationStringFromQualifier((MTLFrameworkPass *)((v107[28] >> 1) & 3));
            strlen(v109);
            int v186 = (llvm::ReturnInst *)llvm::MDString::get();
            uint64_t Impl = llvm::MDTuple::getImpl();
            uint64_t v111 = Impl;
            uint64_t v112 = v166;
            if (v166 >= (uint64_t *)v167)
            {
              uint64_t v114 = ((char *)v166 - (unsigned char *)v165) >> 3;
              if ((unint64_t)(v114 + 1) >> 61) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v115 = (v167 - (unsigned char *)v165) >> 2;
              if (v115 <= v114 + 1) {
                unint64_t v115 = v114 + 1;
              }
              if ((unint64_t)(v167 - (unsigned char *)v165) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v116 = v115;
              }
              if (v116) {
                unint64_t v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v167, v116);
              }
              else {
                unint64_t v117 = 0;
              }
              unint64_t v118 = (uint64_t *)&v117[8 * v114];
              uint64_t *v118 = v111;
              unsigned int v113 = v118 + 1;
              v120 = (char *)v165;
              uint64_t v119 = (char *)v166;
              if (v166 != v165)
              {
                do
                {
                  uint64_t v121 = *((void *)v119 - 1);
                  v119 -= 8;
                  *--unint64_t v118 = v121;
                }
                while (v119 != v120);
                uint64_t v119 = (char *)v165;
              }
              uint64_t v165 = v118;
              int64_t v166 = v113;
              long long v167 = &v117[8 * v116];
              if (v119) {
                operator delete(v119);
              }
            }
            else
            {
              *int64_t v166 = Impl;
              unsigned int v113 = v112 + 1;
            }
            int64_t v166 = v113;
            ++v86;
          }
          while (v86 != v161);
        }
        if (((v174 - (unsigned char *)__p) & 0x3FFFFFFFCLL) != 0)
        {
          uint64_t v122 = 0;
          uint64_t v123 = ((unint64_t)(v174 - (unsigned char *)__p) >> 2);
          do
          {
            uint64_t v124 = (const llvm::AttributeList *)*((unsigned int *)__p + v122);
            uint64_t v125 = *(void *)(*(void *)(v163 + 16) + 8 * (v124 + 1));
            size_t v126 = v170;
            if (v170 >= (uint64_t *)v171)
            {
              uint64_t v128 = ((char *)v170 - (unsigned char *)v169) >> 3;
              if ((unint64_t)(v128 + 1) >> 61) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v129 = (v171 - (unsigned char *)v169) >> 2;
              if (v129 <= v128 + 1) {
                unint64_t v129 = v128 + 1;
              }
              if ((unint64_t)(v171 - (unsigned char *)v169) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v130 = v129;
              }
              if (v130) {
                __int16 v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v171, v130);
              }
              else {
                __int16 v131 = 0;
              }
              uint64_t v132 = &v131[8 * v128];
              *(void *)uint64_t v132 = v125;
              size_t v127 = (uint64_t *)(v132 + 8);
              unint64_t v134 = (char *)v169;
              uint64_t v133 = (char *)v170;
              if (v170 != v169)
              {
                do
                {
                  uint64_t v135 = *((void *)v133 - 1);
                  v133 -= 8;
                  *((void *)v132 - 1) = v135;
                  v132 -= 8;
                }
                while (v133 != v134);
                uint64_t v133 = (char *)v169;
              }
              long long v169 = v132;
              long long v170 = v127;
              long long v171 = &v131[8 * v130];
              if (v133) {
                operator delete(v133);
              }
            }
            else
            {
              *long long v170 = v125;
              size_t v127 = v126 + 1;
            }
            long long v170 = v127;
            uint64_t ParamAttrs = llvm::compat::getParamAttrs((llvm::compat *)&v168, v124, v85);
            llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)v187, ParamAttrs);
            uint64_t v137 = *(void *)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8 * v172.__begin_[(void)v124]);
            if (v137)
            {
              int v138 = *(_DWORD *)(v137 + 8);
              std::vector<llvm::Metadata *>::vector(&v182, v138);
              llvm::Type::getInt32Ty(v164, v139);
              llvm::ConstantInt::get();
              *(void *)long long v182 = llvm::ValueAsMetadata::get();
              if (v138 >= 2)
              {
                uint64_t v140 = v137 - 8 * *(unsigned int *)(v137 + 8);
                uint64_t v141 = 8;
                do
                {
                  *(void *)(v182 + v141) = *(void *)(v140 + v141);
                  v141 += 8;
                }
                while (8 * v138 != v141);
              }
              uint64_t v142 = llvm::MDTuple::getImpl();
              if ((void)v182)
              {
                *((void *)&v182 + 1) = v182;
                operator delete((void *)v182);
              }
            }
            else
            {
              uint64_t v142 = 0;
            }
            uint64_t v143 = v166;
            if (v166 >= (uint64_t *)v167)
            {
              uint64_t v145 = ((char *)v166 - (unsigned char *)v165) >> 3;
              if ((unint64_t)(v145 + 1) >> 61) {
                std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v146 = (v167 - (unsigned char *)v165) >> 2;
              if (v146 <= v145 + 1) {
                unint64_t v146 = v145 + 1;
              }
              if ((unint64_t)(v167 - (unsigned char *)v165) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v147 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v147 = v146;
              }
              if (v147) {
                long long v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v167, v147);
              }
              else {
                long long v148 = 0;
              }
              unint64_t v149 = (uint64_t *)&v148[8 * v145];
              uint64_t *v149 = v142;
              uint64_t v144 = v149 + 1;
              uint64_t v151 = (char *)v165;
              long long v150 = (char *)v166;
              if (v166 != v165)
              {
                do
                {
                  uint64_t v152 = *((void *)v150 - 1);
                  v150 -= 8;
                  *--unint64_t v149 = v152;
                }
                while (v150 != v151);
                long long v150 = (char *)v165;
              }
              uint64_t v165 = v149;
              int64_t v166 = v144;
              long long v167 = &v148[8 * v147];
              if (v150) {
                operator delete(v150);
              }
            }
            else
            {
              *int64_t v166 = v142;
              uint64_t v144 = v143 + 1;
            }
            int64_t v166 = v144;
            ++v122;
          }
          while (v122 != v123);
        }
        uint64_t v153 = llvm::FunctionType::get();
        *((_DWORD *)v162 + 8) = *((_DWORD *)v162 + 8) & 0xFFFFBFC0 | 0x4007;
        *(void *)&long long v182 = "air.packedFragmentFunction";
        LOWORD(v184) = 259;
        int v154 = (const llvm::Twine *)llvm::Function::Create(v153, 0, (uint64_t)&v182, (uint64_t)v158);
        llvm::Function::getContext(v162);
        llvm::compat::getFnAttrs((llvm::compat *)&v168, v155);
        llvm::compat::getRetAttrs((llvm::compat *)&v168, v156);
        *((void *)v154 + 14) = llvm::AttributeList::get();
        *(void *)&long long v182 = "Body";
        LOWORD(v184) = 259;
        llvm::BasicBlock::Create(v164, (llvm::LLVMContext *)&v182, v154, 0, v157);
      }
      uint64_t v12 = v172.__begin_[v10];
      if (v12 != -1)
      {
        uint64_t v13 = *(void *)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8 * v12);
        uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v13 - 8 * *(unsigned int *)(v13 + 8) + 8));
        if (v15 > 23)
        {
          if (v15 == 24)
          {
            int v28 = memcmp(String, "air.viewport_array_index", 0x18uLL);
            v29.i32[0] = 0;
            v30.i32[0] = v28;
            int8x8_t v25 = (int8x8_t)vdup_lane_s32(vceq_s32(v30, v29), 0);
            long long v26 = v160;
            int8x8_t v27 = (int8x8_t)vadd_s32(*(int32x2_t *)&v160, (int32x2_t)0x100000001);
LABEL_29:
            *(int8x8_t *)&long long v26 = vbsl_s8(v25, v27, *(int8x8_t *)&v26);
            long long v160 = v26;
          }
          else if (v15 == 29 && !memcmp(String, "air.render_target_array_index", 0x1DuLL))
          {
            dataTypeFromMetadata(2u, v13);
            *((void *)&v21 + 1) = *((void *)&v160 + 1);
            *(int32x2_t *)&long long v21 = vadd_s32(*(int32x2_t *)&v160, (int32x2_t)0x100000001);
            long long v160 = v21;
          }
LABEL_30:
          long long v31 = v174;
          if (v174 >= v175)
          {
            uint64_t v33 = (char *)__p;
            uint64_t v34 = (v174 - (unsigned char *)__p) >> 2;
            unint64_t v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 62) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v36 = v175 - (unsigned char *)__p;
            if ((v175 - (unsigned char *)__p) >> 1 > v35) {
              unint64_t v35 = v36 >> 1;
            }
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v37 = v35;
            }
            if (v37)
            {
              std::string v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v175, v37);
              uint64_t v33 = (char *)__p;
              long long v31 = v174;
            }
            else
            {
              std::string v38 = 0;
            }
            std::string v39 = &v38[4 * v34];
            *(_DWORD *)std::string v39 = v10;
            std::string::size_type v32 = v39 + 4;
            while (v31 != v33)
            {
              int v40 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v39 - 1) = v40;
              v39 -= 4;
            }
            long long __p = v39;
            long long v174 = v32;
            uint64_t v175 = &v38[4 * v37];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *(_DWORD *)long long v174 = v10;
            std::string::size_type v32 = v31 + 4;
          }
          long long v174 = v32;
          goto LABEL_47;
        }
        if (v15 == 15)
        {
          int v22 = memcmp(String, "air.point_coord", 0xFuLL);
          v23.i32[0] = 0;
          v24.i32[0] = v22;
          int8x8_t v25 = (int8x8_t)vdup_lane_s32(vceq_s32(v24, v23), 0);
          long long v26 = v160;
          int8x8_t v27 = (int8x8_t)vadd_s32(*(int32x2_t *)&v160, (int32x2_t)0x100000002);
          goto LABEL_29;
        }
        if (v15 != 18) {
          goto LABEL_30;
        }
        BOOL v16 = *String == 0x676172662E726961 && String[1] == 0x706E695F746E656DLL;
        if (!v16 || *((_WORD *)String + 8) != 29813) {
          goto LABEL_30;
        }
        if (*(void *)(v11 + 8))
        {
          LODWORD(v182) = 0;
          *((void *)&v182 + 1) = 0;
          *(void *)&long long v183 = 0;
          *(void *)((char *)&v183 + 5) = 0;
          MTLFrameworkPass::extractVaryingInfoFromMetadata((uint64_t)&v182, v13, 2u, 0);
          LODWORD(v182) = v10;
          BYTE12(v183) |= 1u;
          uint64_t v18 = v180;
          if ((unint64_t)v180 >= v181)
          {
            std::string v41 = (char *)v179;
            int64_t v42 = (v180 - (unsigned char *)v179) >> 5;
            unint64_t v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 59) {
              std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v44 = v181 - (void)v179;
            if ((uint64_t)(v181 - (void)v179) >> 4 > v43) {
              unint64_t v43 = v44 >> 4;
            }
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v45 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v45 = v43;
            }
            if (v45)
            {
              unint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>((uint64_t)&v181, v45);
              std::string v41 = (char *)v179;
              uint64_t v18 = v180;
            }
            else
            {
              unint64_t v46 = 0;
            }
            long long v47 = v183;
            uint64_t v48 = &v46[32 * v42];
            *(_OWORD *)uint64_t v48 = v182;
            *((_OWORD *)v48 + 1) = v47;
            if (v18 == v41)
            {
              uint64_t v51 = &v46[32 * v42];
            }
            else
            {
              uint64_t v49 = &v46[32 * v42];
              do
              {
                long long v50 = *((_OWORD *)v18 - 2);
                uint64_t v51 = v49 - 32;
                *(_OWORD *)(v49 - 19) = *(_OWORD *)(v18 - 19);
                *((_OWORD *)v49 - 2) = v50;
                v18 -= 32;
                v49 -= 32;
              }
              while (v18 != v41);
            }
            long long v20 = (long long *)(v48 + 32);
            uint64_t v179 = v51;
            uint64_t v180 = v48 + 32;
            unint64_t v181 = (unint64_t)&v46[32 * v45];
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            long long v19 = v183;
            *(_OWORD *)uint64_t v180 = v182;
            *((_OWORD *)v18 + 1) = v19;
            long long v20 = (long long *)(v18 + 32);
          }
          uint64_t v180 = (char *)v20;
          unsigned int v52 = MTLDataTypeGetComponentCount(SDWORD2(v183));
          *((void *)&v53 + 1) = *((void *)&v160 + 1);
          *(int32x2_t *)&long long v53 = vadd_s32(*(int32x2_t *)&v160, (int32x2_t)(v52 | 0x100000000));
          long long v160 = v53;
        }
      }
LABEL_47:
      v11 += 40;
      ++v10;
    }
  }
  std::function<void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,std::vector<PackedInput> const&,std::vector<VaryingInfo> const&)>::operator()(a3, (uint64_t)this, 0, 0, 0);
}

void sub_2557553E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62)
{
  if (__p) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a61);
  if (a37) {
    operator delete(a37);
  }
  __int16 v64 = *(void **)(v62 - 216);
  if (v64 != a14) {
    free(v64);
  }
  if (a41) {
    operator delete(a41);
  }
  if (a44) {
    operator delete(a44);
  }
  if (a47) {
    operator delete(a47);
  }
  if (a50) {
    operator delete(a50);
  }
  if (a53) {
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

uint64_t llvm::IRBuilderBase::CreateShuffleVector(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  v10[8] = *MEMORY[0x263EF8340];
  llvm::ShuffleVectorInst::getShuffleMask();
  return llvm::IRBuilderBase::CreateShuffleVector((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)v10, 0, (uint64_t)a5);
}

void sub_255755694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10 != v10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(llvm::Module *,unsigned int,unsigned int,unsigned int,std::vector<PackedInput> const&,std::vector<VaryingInfo> const&)>::operator()(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v10 = a2;
  int v9 = a3;
  int v7 = a5;
  int v8 = a4;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, int *, int *))(*(void *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t llvm::IRBuilderBase::CreateShuffleVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u || !a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u)
  {
    uint64_t v15 = llvm::User::operator new((llvm::User *)0x68);
    __int16 v17 = 257;
    MEMORY[0x25A28D420](v15, a2, a3, a4, a5, v16, 0);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v15, a6);
  }
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 336))(*(void *)(a1 + 72), a2, a3, a4, a5);
  if (v12) {
    BOOL v13 = *(unsigned __int8 *)(v12 + 16) >= 0x1Cu;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13) {
    return v12;
  }
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v12, a6);
}

void sub_255755860(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<llvm::Argument *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_255755900(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<llvm::Constant *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<llvm::Type *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_255755978(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void createMTLTextureCheckPass(MTLBoundsCheck::SharedPassData *a1)
{
}

void TextureCheckPass::~TextureCheckPass(TextureCheckPass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

BOOL TextureCheckPass::runOnModule(TextureCheckPass *this, llvm::Module *a2)
{
  v27[8] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(*(void *)(*((void *)this + 4) + 64) + 651)) {
    return 0;
  }
  unsigned int MDKindID = llvm::Module::getMDKindID();
  *((_DWORD *)this + 7) = MDKindID;
  int8x8_t v25 = v27;
  uint64_t v26 = 0x800000000;
  int v22 = &v25;
  unsigned int v23 = MDKindID;
  llvm::InstVisitor<TextureCheckPass::runOnModule(llvm::Module &)::OpVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>>((uint64_t)&v22, *((void *)a2 + 4), (uint64_t)a2 + 24);
  llvm::Type::getInt32Ty(*(llvm::Type **)a2, v6);
  int v7 = (llvm::Instruction **)v25;
  if (v26)
  {
    int v8 = (llvm::Instruction **)((char *)v25 + 8 * v26);
    do
    {
      int v9 = *v7;
      MTLBoundsCheck::SharedPassData::indexForInstruction(*((MTLBoundsCheck::SharedPassData **)this + 4), *v7);
      uint64_t v10 = llvm::ConstantInt::get();
      uint64_t v11 = *((void *)v9 - 4);
      if (!v11 || *(unsigned char *)(v11 + 16) || *(void *)(v11 + 24) != *((void *)v9 + 9)) {
        uint64_t v11 = 0;
      }
      CheckedTextureuint64_t Function = TextureCheckPass::getCheckedTextureFunction(this, (llvm::Function *)v11);
      int NumArgOperands = llvm::compat::getNumArgOperands(v9);
      v20[0] = 0;
      llvm::SmallVector<llvm::Value *,8u>::SmallVector(&v22, (NumArgOperands + 1), v20);
      unint64_t v14 = 0;
      uint64_t v15 = v9;
      while (v14 < llvm::compat::getNumArgOperands(v9))
      {
        *((void *)v22 + v14++) = *((void *)v15 - 4 * (*((_DWORD *)v9 + 5) & 0x7FFFFFF));
        uint64_t v15 = (llvm::Instruction *)((char *)v15 + 32);
      }
      *((void *)v22 + v14) = v10;
      if (CheckedTextureFunction) {
        uint64_t v16 = *(void *)(CheckedTextureFunction + 24);
      }
      else {
        uint64_t v16 = 0;
      }
      __int16 v21 = 257;
      __int16 v17 = (llvm::Instruction *)llvm::CallInst::Create(v16, CheckedTextureFunction, (uint64_t)v22, v23, 0, 0);
      llvm::ReplaceInstWithInst(v9, v17, v18);
      if (v22 != &v24) {
        free(v22);
      }
      ++v7;
    }
    while (v7 != v8);
    int v7 = (llvm::Instruction **)v25;
    BOOL v2 = v26 != 0;
  }
  else
  {
    BOOL v2 = 0;
  }
  if (v7 != v27) {
    free(v7);
  }
  return v2;
}

void sub_255755C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (a25 != v25) {
    free(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TextureCheckPass::getCheckedTextureFunction(TextureCheckPass *this, llvm::Function *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = (llvm::Type **)*((void *)a2 + 5);
  uint64_t Name = llvm::Value::getName(a2);
  uint64_t v7 = v6;
  uint64_t v21 = Name;
  uint64_t v22 = v6;
  uint64_t v8 = *((void *)a2 + 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "mtl.checked.");
  int v9 = std::string::append[abi:ne180100]<unsigned char const*,0>(&__p, (char *)(Name + 4), (char *)(Name + v7));
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    llvm::Type::getInt8Ty(*v4, v11);
    uint64_t Int32Ty = 0;
    uint64_t Int32Ty = llvm::Type::getInt32Ty(*v4, v13);
    llvm::Type::getInt64Ty(*v4, v14);
    llvm::SmallVector<llvm::Type *,8u>::SmallVector<llvm::Type * const*,void>((uint64_t)&__p, (unsigned char *)(*(void *)(v8 + 16) + 8), (unsigned char *)(*(void *)(v8 + 16) + 8 * *(unsigned int *)(v8 + 12)));
    llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__p, &Int32Ty);
    llvm::FunctionType::get();
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2]) {
      free(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = *((void *)a2 + 14);
    uint64_t v15 = (const llvm::Twine *)getOrInsertFunction<std::string const&,llvm::FunctionType *&,llvm::AttributeList>();
    llvm::Function::addFnAttr();
    *((_DWORD *)v15 + 8) = *((_DWORD *)v15 + 8) & 0xFFFFBFC0 | 0x4007;
    if ((*(unsigned char *)(*(void *)(*((void *)this + 4) + 72) + 20) & 2) != 0
      && ((llvm::Function::hasFnAttribute() & 1) != 0 || llvm::Function::hasFnAttribute()))
    {
      llvm::Function::removeFnAttr();
    }
    __int16 v17 = *v4;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"checkBlock";
    __int16 v24 = 259;
    llvm::BasicBlock::Create(v17, (llvm::LLVMContext *)&__p, v15, 0, v16);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  return Function;
}

void sub_255756BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  if (a49 != v59) {
    free(a49);
  }
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder(&a59);
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t llvm::InstVisitor<TextureCheckPass::runOnModule(llvm::Module &)::OpVisitor,void>::visit<llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = *(void *)(a2 + 8);
      uint64_t v6 = a2 - 56;
      if (!a2) {
        uint64_t v6 = 0;
      }
      uint64_t v7 = v6 + 72;
      uint64_t v8 = *(void *)(v6 + 80);
      if (v8 != v7)
      {
        do
        {
          uint64_t v9 = *(void *)(v8 + 8);
          if (v8) {
            uint64_t v10 = v8 - 24;
          }
          else {
            uint64_t v10 = 0;
          }
          __n128 result = llvm::InstVisitor<TextureCheckPass::runOnModule(llvm::Module &)::OpVisitor,void>::visit(v4, v10);
          uint64_t v8 = v9;
        }
        while (v9 != v7);
      }
      a2 = v5;
    }
    while (v5 != a3);
  }
  return result;
}

uint64_t llvm::InstVisitor<TextureCheckPass::runOnModule(llvm::Module &)::OpVisitor,void>::visit(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 40;
  uint64_t v3 = *(void *)(a2 + 48);
  if (v3 != a2 + 40)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8);
      if (v3) {
        uint64_t v6 = (llvm::Instruction *)(v3 - 24);
      }
      else {
        uint64_t v6 = 0;
      }
      if (*((unsigned char *)v6 + 16) == 84) {
        __n128 result = TextureCheckPass::TextureOpVisitor<TextureCheckPass::runOnModule(llvm::Module &)::OpVisitor>::visitCallInst(v4, v6);
      }
      uint64_t v3 = v5;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t TextureCheckPass::TextureOpVisitor<TextureCheckPass::runOnModule(llvm::Module &)::OpVisitor>::visitCallInst(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t result = *((void *)a2 - 4);
  if (!result) {
    return result;
  }
  if (*(unsigned char *)(result + 16)) {
    return result;
  }
  if (*(void *)(result + 24) != *((void *)a2 + 9)) {
    return result;
  }
  uint64_t result = llvm::Value::getName((llvm::Value *)result);
  if (v5 < 0xE) {
    return result;
  }
  uint64_t v6 = result;
  if (*(void *)result == 0x5F7465672E726961 && *(void *)(result + 6) == 0x5F68746469775F74) {
    goto LABEL_193;
  }
  if (v5 < 0xF)
  {
    if ((*(void *)result != 0x5F7465672E726961 || *(void *)(result + 6) != 0x5F68747065645F74)
      && (*(void *)result != 0x646165722E726961 || *(void *)(result + 6) != 0x68747065645F6461))
    {
      return result;
    }
LABEL_193:
    return TextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(a1, v6, v5, a2);
  }
  if (*(void *)result == 0x5F7465672E726961 && *(void *)(result + 7) == 0x5F7468676965685FLL) {
    goto LABEL_193;
  }
  if (*(void *)result == 0x5F7465672E726961 && *(void *)(result + 6) == 0x5F68747065645F74) {
    goto LABEL_193;
  }
  if (v5 < 0x13)
  {
    BOOL v12 = 1;
    BOOL v13 = 1;
    char v14 = 1;
    BOOL v15 = 1;
    if (v5 < 0x10) {
      goto LABEL_81;
    }
    goto LABEL_76;
  }
  if (*(void *)result == 0x5F7465672E726961
    && *(void *)(result + 8) == 0x69735F7961727261
    && *(void *)(result + 11) == 0x5F657A69735F7961)
  {
    goto LABEL_193;
  }
  BOOL v13 = v5 < 0x17;
  if (v5 >= 0x17)
  {
    if (*(void *)result == 0x5F7465672E726961
      && *(void *)(result + 8) == 0x5F70696D5F6D756ELL
      && *(void *)(result + 15) == 0x5F736C6576656C5FLL)
    {
      goto LABEL_193;
    }
LABEL_49:
    if (*(void *)result == 0x5F7465672E726961
      && *(void *)(result + 8) == 0x706D61735F6D756ELL
      && *(_DWORD *)(result + 16) == 1601398124)
    {
      goto LABEL_193;
    }
    BOOL v12 = v5 < 0x1A;
    if (v5 >= 0x1A)
    {
      if (*(void *)result == 0x5F7465672E726961
        && *(void *)(result + 8) == 0x5F6C656E6E616863
        && *(void *)(result + 16) == 0x7079745F61746164
        && *(_WORD *)(result + 24) == 24421)
      {
        goto LABEL_193;
      }
    }
    else if (v5 < 0x16)
    {
      BOOL v12 = 1;
      goto LABEL_76;
    }
    if (*(void *)result == 0x5F7465672E726961
      && *(void *)(result + 8) == 0x5F6C656E6E616863
      && *(void *)(result + 14) == 0x5F726564726F5F6CLL)
    {
      goto LABEL_193;
    }
    goto LABEL_76;
  }
  if (v5 >= 0x14) {
    goto LABEL_49;
  }
  BOOL v12 = 1;
  BOOL v13 = 1;
LABEL_76:
  if (*(void *)result == 0x646165722E726961 && *(void *)(result + 8) == 0x657275747865745FLL) {
    goto LABEL_193;
  }
  char v14 = 0;
  BOOL v15 = v5 < 0x13;
LABEL_81:
  if (*(void *)result == 0x646165722E726961 && *(void *)(result + 6) == 0x68747065645F6461) {
    goto LABEL_193;
  }
  if (v5 >= 0x11)
  {
    uint64_t v29 = *(void *)(result + 8);
    int v30 = *(unsigned __int8 *)(result + 16);
    BOOL v31 = *(void *)v6 == 0x746972772E726961 && v29 == 0x7275747865745F65;
    if (v31 && v30 == 101) {
      goto LABEL_193;
    }
  }
  uint64_t result = 0x68747065645F6574;
  if (*(void *)v6 == 0x746972772E726961 && *(void *)(v6 + 7) == 0x68747065645F6574) {
    goto LABEL_193;
  }
  if (v5 >= 0x12)
  {
    uint64_t result = *(unsigned __int16 *)(v6 + 16);
    BOOL v34 = *(void *)v6 == 0x706D61732E726961 && *(void *)(v6 + 8) == 0x75747865745F656CLL;
    if (v34 && result == 25970) {
      goto LABEL_193;
    }
  }
  if ((v14 & 1) == 0)
  {
    uint64_t result = 0x68747065645F656CLL;
    if (*(void *)v6 == 0x706D61732E726961 && *(void *)(v6 + 8) == 0x68747065645F656CLL) {
      goto LABEL_193;
    }
  }
  if (!v15)
  {
    BOOL v37 = *(void *)v6 == 0x706D61732E726961 && *(void *)(v6 + 8) == 0x61706D6F635F656CLL;
    if (v37 && *(void *)(v6 + 11) == 0x5F657261706D6F63) {
      goto LABEL_193;
    }
  }
  if (v5 >= 0x12)
  {
    uint64_t result = *(unsigned __int16 *)(v6 + 16);
    BOOL v39 = *(void *)v6 == 0x687461672E726961 && *(void *)(v6 + 8) == 0x75747865745F7265;
    if (v39 && result == 25970) {
      goto LABEL_193;
    }
  }
  if ((v14 & 1) == 0 && *(void *)v6 == 0x687461672E726961 && *(void *)(v6 + 8) == 0x68747065645F7265) {
    goto LABEL_193;
  }
  if (v5 >= 0x18)
  {
    uint64_t result = 0x68747065645F6572;
    BOOL v42 = *(void *)v6 == 0x687461672E726961 && *(void *)(v6 + 8) == 0x61706D6F635F7265;
    if (v42 && *(void *)(v6 + 16) == 0x68747065645F6572) {
      goto LABEL_193;
    }
  }
  if (!v12)
  {
    BOOL v44 = *(void *)v6 == 0x636C61632E726961 && *(void *)(v6 + 8) == 0x6C635F6574616C75;
    BOOL v45 = v44 && *(void *)(v6 + 16) == 0x6F6C5F6465706D61;
    if (v45 && *(_WORD *)(v6 + 24) == 24420) {
      goto LABEL_193;
    }
  }
  if (v5 >= 0x1C)
  {
    BOOL v47 = *(void *)v6 == 0x636C61632E726961 && *(void *)(v6 + 8) == 0x6E755F6574616C75;
    BOOL v48 = v47 && *(void *)(v6 + 16) == 0x5F6465706D616C63;
    if (v48 && *(_DWORD *)(v6 + 24) == 1600417644) {
      goto LABEL_193;
    }
  }
  if (v5 >= 0x11)
  {
    BOOL v50 = *(void *)v6 == 0x636E65662E726961 && *(void *)(v6 + 8) == 0x7275747865745F65;
    if (v50 && *(unsigned char *)(v6 + 16) == 101) {
      goto LABEL_193;
    }
  }
  if (*(void *)v6 == 0x636E65662E726961 && *(void *)(v6 + 7) == 0x68747065645F6563) {
    goto LABEL_193;
  }
  if (v5 >= 0x19)
  {
    BOOL v53 = *(void *)v6 == 0x5F7465672E726961 && *(void *)(v6 + 8) == 0x695F657571696E75;
    BOOL v54 = v53 && *(void *)(v6 + 16) == 0x7275747865745F64;
    if (v54 && *(unsigned char *)(v6 + 24) == 101) {
      goto LABEL_193;
    }
  }
  if (!v13)
  {
    BOOL v56 = *(void *)v6 == 0x5F7465672E726961 && *(void *)(v6 + 8) == 0x695F657571696E75;
    if (v56 && *(void *)(v6 + 15) == 0x68747065645F6469) {
      goto LABEL_193;
    }
  }
  return result;
}

uint64_t TextureCheckPass::runOnModule(llvm::Module &)::OpVisitor::visitTextureOp(uint64_t a1, int a2, int a3, llvm::Instruction *this)
{
  if (!*(_DWORD *)(a1 + 8)
    || !*((void *)this + 6) && (*((unsigned char *)this + 23) & 0x20) == 0
    || (uint64_t result = llvm::Instruction::getMetadataImpl(this)) == 0)
  {
    uint64_t v7 = *(void *)a1;
    uint64_t v8 = this;
    return llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>(v7, (uint64_t *)&v8);
  }
  return result;
}

std::string *std::string::append[abi:ne180100]<unsigned char const*,0>(std::string *this, char *a2, char *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    uint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    char v14 = this;
    if ((v6 & 0x80) != 0) {
      char v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      unsigned char *i = v16;
    }
    unsigned char *i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      BOOL v12 = __p;
    }
    else {
      BOOL v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_255757688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t getOrInsertFunction<std::string const&,llvm::FunctionType *&,llvm::AttributeList>()
{
  llvm::Module::getOrInsertFunction();
  uint64_t result = v0;
  if (*(unsigned char *)(v0 + 16) == 5) {
    return *(void *)(v0 - 32 * (*(_DWORD *)(v0 + 20) & 0x7FFFFFF));
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateOr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 9) + 32))(*((void *)this + 9));
  if (!result)
  {
    uint64_t v7 = llvm::BinaryOperator::Create();
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v7, (uint64_t)a4);
  }
  return result;
}

uint64_t llvm::SmallVector<llvm::Type *,8u>::SmallVector<llvm::Type * const*,void>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x800000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)a1, a2, a3);
  return a1;
}

void sub_2557577D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL isPatchControlPointInputUnused(uint64_t a1)
{
  uint64_t v1 = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * (*(_DWORD *)(a1 + 8) - 1));
  if (*(unsigned char *)v1) {
    return 0;
  }
  uint64_t String = (void *)llvm::MDString::getString(v1);
  if (v3 != 14) {
    return 0;
  }
  return *String == 0x5F6772612E726961 && *(void *)((char *)String + 6) == 0x646573756E755F67;
}

char *MTLCompilerErrorObject::setErrorMessage(MTLCompilerErrorObject *this, const char *__s1)
{
  uint64_t result = strdup(__s1);
  *(void *)this = result;
  return result;
}

uint64_t MTLCompilerErrorObject::setFormattedErrorMessage(char **this, const char *a2, ...)
{
  va_start(va, a2);
  return vasprintf(this, a2, va);
}

uint64_t parseControlPointInputMetadata(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a2 & 0xFFFFB005 | 0x407A;
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    uint64_t v4 = result;
    for (unsigned int i = 0; i < v2; ++i)
    {
      uint64_t result = *(void *)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8 * i);
      if (!*(unsigned char *)result)
      {
        uint64_t result = llvm::MDString::getString((llvm::MDString *)result);
        switch(v6)
        {
          case 0xCuLL:
            uint64_t result = memcmp((const void *)result, "air.arg_name", v6);
            if (!result)
            {
              uint64_t result = llvm::MDString::getString(*(llvm::MDString **)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8 * ++i));
              *(void *)(a2 + 16) = result;
              *(void *)(a2 + 24) = v7;
            }
            break;
          case 0xEuLL:
            uint64_t result = memcmp((const void *)result, "air.arg_unused", v6);
            if (!result) {
              *(_DWORD *)a2 &= ~8u;
            }
            break;
          case 0x11uLL:
            uint64_t result = memcmp((const void *)result, "air.arg_type_name", v6);
            if (!result)
            {
              uint64_t result = llvm::MDString::getString(*(llvm::MDString **)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8 * ++i));
              *(void *)(a2 + 32) = result;
              *(void *)(a2 + 40) = v8;
            }
            break;
          case 0x12uLL:
            if (*(void *)result == 0x61636F6C2E726961
              && *(void *)(result + 8) == 0x646E695F6E6F6974
              && *(_WORD *)(result + 16) == 30821)
            {
              uint64_t v11 = v4 - 8 * *(unsigned int *)(v4 + 8);
              uint64_t v12 = *(void *)(*(void *)(v11 + 8 * (i + 1)) + 128);
              std::string::size_type v13 = (void *)(v12 + 24);
              if (*(_DWORD *)(v12 + 32) >= 0x41u) {
                std::string::size_type v13 = (void *)*v13;
              }
              *(_DWORD *)(a2 + 4) = *v13;
              i += 2;
              uint64_t v14 = *(void *)(*(void *)(v11 + 8 * i) + 128);
              BOOL v15 = (void *)(v14 + 24);
              if (*(_DWORD *)(v14 + 32) >= 0x41u) {
                BOOL v15 = (void *)*v15;
              }
              *(_DWORD *)(a2 + 8) = *v15;
            }
            break;
          default:
            continue;
        }
      }
    }
  }
  return result;
}

void parseMeshStruct(uint64_t a1, uint64_t a2)
{
  if (!buildInMeshTopologySet) {
    operator new();
  }
  llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8)));
  uint64_t v4 = a2 - 8 * *(unsigned int *)(a2 + 8);
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(void *)(v4 + 16);
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = v6;
  addMeshStructMembers(v5, *(uint64_t **)(a1 + 168));
  addMeshStructMembers(v6, *(uint64_t **)(a1 + 176));
  uint64_t v7 = a2 - 8 * *(unsigned int *)(a2 + 8);
  uint64_t v8 = *(void *)(*(void *)(v7 + 24) + 128);
  if (*(unsigned char *)(v8 + 16) == 16)
  {
    std::string::size_type v9 = (void *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u) {
      std::string::size_type v9 = (void *)*v9;
    }
    int v10 = *(_DWORD *)v9;
  }
  else
  {
    int v10 = -1;
  }
  *(_DWORD *)(a1 + 60) = v10;
  uint64_t v11 = *(void *)(*(void *)(v7 + 32) + 128);
  if (*(unsigned char *)(v11 + 16) == 16)
  {
    uint64_t v12 = (void *)(v11 + 24);
    if (*(_DWORD *)(v11 + 32) >= 0x41u) {
      uint64_t v12 = (void *)*v12;
    }
    int v13 = *(_DWORD *)v12;
  }
  else
  {
    int v13 = -1;
  }
  *(_DWORD *)(a1 + 64) = v13;
  uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v7 + 40));
  uint64_t v16 = buildInMeshTopologySet;
  if (String)
  {
    std::string::basic_string[abi:ne180100](__p, String, v15);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v19 = 0;
  }
  uint64_t v17 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(v16, (const void **)__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(v17 + 56);
}

void sub_255757EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t vertexFetchBuiltInInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const char **)(a2 + 32);
  size_t v5 = strlen(v4);
  LODWORD(v4) = dataTypeFromString(v4, v5);
  *(_DWORD *)(a1 + 4) = MTLDataTypeGetComponentType((int)v4);
  uint64_t result = MTLDataTypeGetComponentCount((int)v4);
  *(unsigned char *)(a1 + 1) = result;
  int v7 = *(_DWORD *)(a2 + 12) - 1;
  if v7 <= 0x15 && ((0x30F01Bu >> v7)) {
    *(unsigned char *)a1 = byte_2557AA131[v7];
  }
  return result;
}

uint64_t MTLDataTypeGetComponentCount(int a1)
{
  if ((a1 - 3) > 0x55) {
    return 0;
  }
  else {
    return byte_2557AA2A0[a1 - 3];
  }
}

uint64_t dataTypeFromMetadata(unsigned int a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  unsigned int v3 = v2 - a1;
  if (v2 <= a1) {
    return 0;
  }
  for (uint64_t i = a1; ; ++i)
  {
    uint64_t v6 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * i);
    if (!*(unsigned char *)v6)
    {
      uint64_t String = llvm::MDString::getString(v6);
      if (v8 == 17)
      {
        BOOL v9 = *(void *)String == 0x5F6772612E726961 && *(void *)(String + 8) == 0x6D616E5F65707974;
        if (v9 && *(unsigned char *)(String + 16) == 101) {
          break;
        }
      }
    }
    if (!--v3) {
      return 0;
    }
  }
  uint64_t v12 = (const char *)llvm::MDString::getString(*(llvm::MDString **)(a2
                                                                   - 8 * *(unsigned int *)(a2 + 8)
                                                                   + 8 * (i + 1)));
  size_t v13 = strlen(v12);
  return dataTypeFromString(v12, v13);
}

uint64_t MTLDataTypeGetSignedType(uint64_t result)
{
  int v1 = result - 33;
  if (result - 33) <= 0x17 && ((0xFF0F0Fu >> v1)) {
    return dword_2557AA2F8[v1];
  }
  return result;
}

uint64_t MTLDataTypeGetVectorDataType(int a1, int a2)
{
  unsigned int v2 = a2 - 1;
  if (a1 <= 40)
  {
    unsigned int v3 = a2 + 28;
    if (v2 >= 4) {
      unsigned int v3 = 0;
    }
    unsigned int v10 = a2 + 32;
    if (v2 >= 4) {
      unsigned int v10 = 0;
    }
    unsigned int v11 = a2 + 36;
    if (v2 >= 4) {
      unsigned int v11 = 0;
    }
    if (a1 != 37) {
      unsigned int v11 = 0;
    }
    if (a1 != 33) {
      unsigned int v10 = v11;
    }
    if (a1 != 29) {
      unsigned int v3 = v10;
    }
    BOOL v12 = v2 >= 4;
    if (v2 >= 4) {
      unsigned int v8 = 0;
    }
    else {
      unsigned int v8 = a2 + 2;
    }
    unsigned int v13 = a2 + 15;
    if (v12) {
      unsigned int v13 = 0;
    }
    if (a1 != 16) {
      unsigned int v13 = 0;
    }
    if (a1 != 3) {
      unsigned int v8 = v13;
    }
    BOOL v9 = a1 <= 28;
  }
  else
  {
    unsigned int v3 = a2 + 52;
    if (v2 >= 4) {
      unsigned int v3 = 0;
    }
    unsigned int v4 = a2 + 80;
    if (v2 >= 4) {
      unsigned int v4 = 0;
    }
    unsigned int v5 = a2 + 84;
    if (v2 >= 4) {
      unsigned int v5 = 0;
    }
    if (a1 != 85) {
      unsigned int v5 = 0;
    }
    if (a1 != 81) {
      unsigned int v4 = v5;
    }
    if (a1 != 53) {
      unsigned int v3 = v4;
    }
    unsigned int v6 = a2 + 40;
    if (v2 >= 4) {
      unsigned int v6 = 0;
    }
    unsigned int v7 = a2 + 44;
    if (v2 < 4)
    {
      unsigned int v8 = a2 + 48;
    }
    else
    {
      unsigned int v7 = 0;
      unsigned int v8 = 0;
    }
    if (a1 != 49) {
      unsigned int v8 = 0;
    }
    if (a1 == 45) {
      unsigned int v8 = v7;
    }
    if (a1 == 41) {
      unsigned int v8 = v6;
    }
    BOOL v9 = a1 <= 52;
  }
  if (v9) {
    return v8;
  }
  else {
    return v3;
  }
}

unsigned char *serializeFragmentLinkingInfoInternal(uint64_t a1, char a2, char a3, char a4, char a5, uint64_t *a6, unint64_t *a7)
{
  BOOL v12 = malloc_type_malloc(0x400uLL, 0xFA8FEB0CuLL);
  unsigned char *v12 = a2;
  v12[1] = a3;
  v12[2] = a4;
  uint64_t v12[3] = a5;
  unint64_t v13 = a6[1] - *a6;
  if ((v13 & 0x1FFFFFFFE0) != 0)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (v13 >> 5);
    size_t v16 = 1024;
    unint64_t v17 = 4;
    do
    {
      uint64_t v18 = *a6;
      uint64_t v19 = *a6 + 32 * v14;
      unsigned int v20 = *(unsigned __int8 *)(v19 + 28);
      if (v20)
      {
        if (v17 == -1) {
          abort();
        }
        int v21 = *(_DWORD *)(v19 + 24);
        size_t v22 = v17 + 1;
        if (v16 <= v17)
        {
          if (!v16) {
            size_t v16 = 128;
          }
          while (v16 <= v17)
          {
            if (v16 >> 1 >= ~v16) {
              size_t v16 = v17 + 1;
            }
            else {
              v16 += v16 >> 1;
            }
          }
          BOOL v12 = malloc_type_realloc(v12, v16, 0x227314A4uLL);
          if (!v12) {
            goto LABEL_32;
          }
        }
        v12[v17] = v21;
        if (v17 == -2) {
          abort();
        }
        unint64_t v23 = v17 + 2;
        if (v16 <= v22)
        {
          do
          {
            if (v16 >> 1 >= ~v16) {
              size_t v16 = v17 + 2;
            }
            else {
              v16 += v16 >> 1;
            }
          }
          while (v16 <= v22);
          BOOL v12 = malloc_type_realloc(v12, v16, 0x227314A4uLL);
          if (!v12) {
            goto LABEL_32;
          }
        }
        v12[v22] = (2 * v20) & 0x70 | (v20 >> 1) & 3;
        uint64_t v24 = v18 + 32 * v14;
        size_t v25 = *(void *)(v24 + 16);
        size_t v26 = v25 + 1;
        if (v25 + 1 > -3 - v17) {
          abort();
        }
        int8x8_t v27 = *(const void **)(v24 + 8);
        unint64_t v17 = v26 + v23;
        if (v16 < v26 + v23)
        {
          do
          {
            if (v16 >> 1 >= ~v16) {
              size_t v16 = v26 + v23;
            }
            else {
              v16 += v16 >> 1;
            }
          }
          while (v16 < v17);
          BOOL v12 = malloc_type_realloc(v12, v16, 0x227314A4uLL);
          if (!v12) {
LABEL_32:
          }
            abort();
        }
        memcpy(&v12[v23], v27, v25);
        v12[v25 + v23] = 0;
      }
      ++v14;
    }
    while (v14 != v15);
  }
  else
  {
    unint64_t v17 = 4;
  }
  *a7 = v17;
  return v12;
}

void sub_2557583E4(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

unsigned char *serializeFragmentPackingInfoInternal(uint64_t a1, char a2, char a3, char a4, uint64_t *a5, uint64_t *a6, unint64_t *a7)
{
  unsigned int v11 = malloc_type_malloc(0x400uLL, 0xFA8FEB0CuLL);
  *unsigned int v11 = a2;
  v11[1] = a3;
  void v11[2] = a4;
  unsigned int v12 = -1431655765 * ((a5[1] - *a5) >> 3);
  void v11[3] = v12;
  uint64_t v36 = v12;
  BOOL v37 = a5;
  if (v12)
  {
    uint64_t v40 = 0;
    size_t v13 = 1024;
    unint64_t v14 = 4;
    do
    {
      if (v14 == -1) {
        abort();
      }
      uint64_t v39 = *v37;
      __int16 v15 = *(_WORD *)(*v37 + 24 * v40);
      size_t v16 = v14 + 1;
      if (v13 <= v14)
      {
        if (!v13) {
          size_t v13 = 128;
        }
        while (v13 <= v14)
        {
          if (v13 >> 1 >= ~v13) {
            size_t v13 = v14 + 1;
          }
          else {
            v13 += v13 >> 1;
          }
        }
        unsigned int v11 = malloc_type_realloc(v11, v13, 0x227314A4uLL);
        if (!v11) {
          goto LABEL_53;
        }
      }
      v11[v14] = v15;
      if (v14 == -2) {
        abort();
      }
      uint64_t v17 = v39 + 24 * v40;
      char v20 = *(unsigned char *)(v17 + 4);
      uint64_t v19 = (_WORD *)(v17 + 4);
      char v18 = v20;
      char v21 = *((unsigned char *)v19 - 2);
      v14 += 2;
      if (v13 <= v16)
      {
        do
        {
          if (v13 >> 1 >= ~v13) {
            size_t v13 = v14;
          }
          else {
            v13 += v13 >> 1;
          }
        }
        while (v13 <= v16);
        unsigned int v11 = malloc_type_realloc(v11, v13, 0x227314A4uLL);
        if (!v11) {
LABEL_53:
        }
          abort();
      }
      v11[v16] = v21 | (16 * v18);
      if (*v19)
      {
        unint64_t v22 = 0;
        do
        {
          if (v14 == -1) {
            abort();
          }
          uint64_t v23 = *(unsigned __int16 *)(v39 + 24 * v40 + 2 * v22 + 6);
          uint64_t v24 = *a6;
          uint64_t v25 = *a6 + 32 * v23;
          unsigned int v26 = *(unsigned __int8 *)(v25 + 28);
          int v27 = *(_DWORD *)(v25 + 24);
          size_t v28 = v14 + 1;
          if (v13 <= v14)
          {
            if (!v13) {
              size_t v13 = 128;
            }
            while (v13 <= v14)
            {
              if (v13 >> 1 >= ~v13) {
                size_t v13 = v14 + 1;
              }
              else {
                v13 += v13 >> 1;
              }
            }
            unsigned int v11 = malloc_type_realloc(v11, v13, 0x227314A4uLL);
            if (!v11) {
              goto LABEL_49;
            }
          }
          v11[v14] = v27;
          if (v14 == -2) {
            abort();
          }
          unint64_t v29 = v14 + 2;
          if (v13 <= v28)
          {
            do
            {
              if (v13 >> 1 >= ~v13) {
                size_t v13 = v14 + 2;
              }
              else {
                v13 += v13 >> 1;
              }
            }
            while (v13 <= v28);
            unsigned int v11 = malloc_type_realloc(v11, v13, 0x227314A4uLL);
            if (!v11) {
              goto LABEL_49;
            }
          }
          v11[v28] = (2 * v26) & 0x70 | (v26 >> 1) & 3;
          uint64_t v30 = v24 + 32 * v23;
          size_t v31 = *(void *)(v30 + 16);
          size_t v32 = v31 + 1;
          if (v31 + 1 > -3 - v14) {
            abort();
          }
          uint64_t v33 = *(const void **)(v30 + 8);
          unint64_t v14 = v32 + v29;
          if (v13 < v32 + v29)
          {
            do
            {
              if (v13 >> 1 >= ~v13) {
                size_t v13 = v32 + v29;
              }
              else {
                v13 += v13 >> 1;
              }
            }
            while (v13 < v14);
            unsigned int v11 = malloc_type_realloc(v11, v13, 0x227314A4uLL);
            if (!v11) {
LABEL_49:
            }
              abort();
          }
          memcpy(&v11[v29], v33, v31);
          v11[v31 + v29] = 0;
          ++v22;
        }
        while (v22 < (unsigned __int16)*v19);
      }
      ++v40;
    }
    while (v40 != v36);
  }
  else
  {
    unint64_t v14 = 4;
  }
  *a7 = v14;
  return v11;
}

void sub_255758778(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::compat::removeAttributes()
{
  return MEMORY[0x270F957B0]();
}

uint64_t llvm::compat::addAttribute()
{
  return MEMORY[0x270F950A0]();
}

unint64_t llvm::compat::getNumArgOperands(llvm::CallBase *a1)
{
  return (unint64_t)(llvm::CallBase::arg_end(a1) - ((void)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))) >> 5;
}

uint64_t llvm::DISubprogram::getImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a4)
  {
    uint64_t v23 = llvm::MDString::get();
    if (a6) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v24 = 0;
    if (a21) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v23 = 0;
  if (!a6) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v24 = llvm::MDString::get();
  if (a21)
  {
LABEL_4:
    uint64_t v25 = llvm::MDString::get();
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v25 = 0;
LABEL_8:
  return MEMORY[0x270F93578](a1, a2, v23, v24, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, v25);
}

void addMeshStructMembers(uint64_t a1, uint64_t *a2)
{
  uint64_t v24 = *(unsigned int *)(a1 + 8);
  if (v24)
  {
    uint64_t v3 = 0;
    uint64_t v23 = (uint64_t)(a2 + 2);
    while (1)
    {
      uint64_t v4 = *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v3);
      unint64_t v5 = *(unsigned int *)(v4 + 8);
      if (v5) {
        break;
      }
      uint64_t v8 = 0;
      uint64_t v7 = 0;
      unsigned int v10 = &unk_2557AB8A6;
      BOOL v9 = (const char *)&unk_2557AB8A6;
LABEL_27:
      int v32 = 0;
      uint64_t v29 = 0;
      int v31 = 0;
      uint64_t v33 = 0;
      BOOL v34 = 0;
      int v35 = 0;
      memset(v38, 0, sizeof(v38));
      uint64_t v39 = 0;
      int v27 = v9;
      uint64_t v28 = v8;
      *(void *)&long long v26 = v10;
      *((void *)&v26 + 1) = v7;
      int v30 = 0;
      uint64_t v37 = 0;
      long long v36 = xmmword_2557AA110;
      size_t v19 = strlen(v9);
      HIDWORD(v29) = dataTypeFromString(v9, v19);
      size_t v20 = strlen(v9);
      *((void *)&v36 + 1) = pixelFormatAndALUTypeFromString(v9, v20);
      unint64_t v21 = a2[1];
      if (v21 >= a2[2])
      {
        uint64_t v22 = std::vector<MTLStructMemberInfo>::__push_back_slow_path<MTLStructMemberInfo const&>(a2, &v26);
      }
      else
      {
        std::allocator<MTLStructMemberInfo>::construct[abi:ne180100]<MTLStructMemberInfo,MTLStructMemberInfo const&>(v23, a2[1], &v26);
        uint64_t v22 = v21 + 176;
        a2[1] = v21 + 176;
      }
      a2[1] = v22;
      uint64_t v40 = (void **)v38;
      std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v40);
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      if (++v3 == v24) {
        return;
      }
    }
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    BOOL v9 = (const char *)&unk_2557AB8A6;
    unsigned int v10 = &unk_2557AB8A6;
    while (1)
    {
      unsigned int v11 = *(llvm::MDString **)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8 * v6);
      if (!*(unsigned char *)v11)
      {
        uint64_t String = llvm::MDString::getString(v11);
        if (v13 == 12)
        {
          if (*(void *)String == 0x5F6772612E726961 && *(_DWORD *)(String + 8) == 1701667182)
          {
            ++v6;
            unsigned int v10 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v4 - 8 * *(unsigned int *)(v4 + 8) + 8 * v6));
            uint64_t v7 = v18;
            goto LABEL_7;
          }
        }
        else if (v13 == 17)
        {
          BOOL v14 = *(void *)String == 0x5F6772612E726961 && *(void *)(String + 8) == 0x6D616E5F65707974;
          if (v14 && *(unsigned char *)(String + 16) == 101)
          {
            ++v6;
            BOOL v9 = (const char *)llvm::MDString::getString(*(llvm::MDString **)(v4
                                                                            - 8 * *(unsigned int *)(v4 + 8)
                                                                            + 8 * v6));
            uint64_t v8 = v16;
            goto LABEL_7;
          }
        }
      }
      ++v6;
LABEL_7:
      if (v6 >= v5) {
        goto LABEL_27;
      }
    }
  }
}

void sub_255758BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  *(void *)(v9 + 8) = v10;
  MTLStructMemberInfo::~MTLStructMemberInfo((MTLStructMemberInfo *)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerMeshTopologyType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerMeshTopologyType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (void **)std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    _OWORD v9[2] = 0;
    void *v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void MTLStructMemberInfo::~MTLStructMemberInfo(MTLStructMemberInfo *this)
{
  uint64_t v3 = (void **)((char *)this + 104);
  std::vector<MTLStructMemberInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,MTLStructMemberInfo*>::operator()[abi:ne180100](uint64_t *a1)
{
  unsigned int v2 = (uint64_t *)a1[1];
  int v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 176;
      std::allocator_traits<std::allocator<MTLStructMemberInfo>>::destroy[abi:ne180100]<MTLStructMemberInfo,void>(v5, v3);
    }
    while (v3 != v4);
  }
}

void std::_AllocatorDestroyRangeReverse<std::allocator<MTLStructMemberInfo>,std::reverse_iterator<MTLStructMemberInfo*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator_traits<std::allocator<MTLStructMemberInfo>>::destroy[abi:ne180100]<MTLStructMemberInfo,void>(v3, v1);
      v1 += 176;
    }
    while (v1 != v2);
  }
}

void std::__function::__func<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0,std::allocator<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0>,void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0,std::allocator<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0>,void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_2704540F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0,std::allocator<parseStructTypeMetadata(llvm::MDNode *,llvm::DataLayout const&,MTLCompilerArgumentAccess,std::vector<MTLStructMemberInfo> &,llvm::DenseMap<llvm::Metadata *,std::vector<MTLStructMemberInfo>*,llvm::DenseMapInfo<llvm::Metadata *,void>,llvm::detail::DenseMapPair<llvm::Metadata *,std::vector<MTLStructMemberInfo>*>> &)::$_0>,void ()(unsigned int,unsigned int,unsigned int,unsigned int,llvm::StringRef,llvm::StringRef,llvm::Metadata *,llvm::Metadata *,unsigned int,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2704540F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t llvm::MDNode::classof(unsigned char *a1)
{
  return (*a1 < 0x23uLL) & (0x7FFFFFFF0uLL >> *a1);
}

void *_ZNSt3__115allocate_sharedB8ne180100I15MTLArgumentDataNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x138uLL);
  __n128 result = _ZNSt3__120__shared_ptr_emplaceI15MTLArgumentDataNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_255758E94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceI15MTLArgumentDataNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_270454140;
  MTLArgumentData::MTLArgumentData((MTLArgumentData *)(a1 + 3));
  return a1;
}

void sub_255758EF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MTLArgumentData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_270454140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MTLArgumentData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_270454140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A28E250);
}

void std::__shared_ptr_emplace<MTLArgumentData>::__on_zero_shared(uint64_t a1)
{
  std::allocator<MTLArgumentData>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void OGLCodeGenService::OGLCodeGenService(OGLCodeGenService *this)
{
  uint64_t v2 = dlopen("/System/Library/Frameworks/OpenGLES.framework/libGLVMPlugin.dylib", 5);
  *(void *)this = v2;
  if (v2
    && (uint64_t v3 = (void (*)(void))dlsym(v2, "oglCodeGenServiceInitialize")) != 0
    && (uint64_t v4 = v3, v5 = dlsym(*(void **)this, "oglCodeGenServiceTerminate"), (*((void *)this + 1) = v5) != 0)
    && (unint64_t v6 = dlsym(*(void **)this, "oglCodeGenServiceGenerateIR"), (*((void *)this + 2) = v6) != 0))
  {
    *((void *)this + 3) = dlsym(*(void **)this, "oglCodeGenServiceGenerateIRWithPluginData");
    *((void *)this + 4) = dlsym(*(void **)this, "oglCodeGenServiceGenerateIRWithPluginDataAndPluginReturnData");
    v4();
  }
  else
  {
    uint64_t v7 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v8 = dlerror();
    fprintf(v7, "OGLCodeGenService: ERROR: %s\n", v8);
  }
}

{
  OGLCodeGenService::OGLCodeGenService(this);
}

void OGLCodeGenService::~OGLCodeGenService(void (**this)(void))
{
  this[4] = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

uint64_t OGLCodeGenService::GenerateIR(OGLCodeGenService *this, uint64_t a2, llvm::LLVMContext *a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, void **a8, unint64_t *a9)
{
  if (this) {
    uint64_t v12 = &OGLCodeGenService::oglCodeGenServiceGLES;
  }
  else {
    uint64_t v12 = &OGLCodeGenService::oglCodeGenService;
  }
  uint64_t v13 = (void *)*v12;
  if (!*v12) {
    operator new();
  }
  if (a5 && a7 && (this & 1) == 0)
  {
    BOOL v14 = (uint64_t (*)(uint64_t, llvm::LLVMContext *, const void *, uint64_t, const void *, uint64_t, void **))v13[4];
    return v14(a2, a3, a4, a5, a6, a7, a8);
  }
  else if (!a5 || (this & 1) != 0)
  {
    uint64_t v17 = (uint64_t (*)(uint64_t, llvm::LLVMContext *, const void *))v13[2];
    return v17(a2, a3, a4);
  }
  else
  {
    uint64_t v16 = (uint64_t (*)(uint64_t, llvm::LLVMContext *, const void *, uint64_t, const void *))v13[3];
    return v16(a2, a3, a4, a5, a6);
  }
}

void sub_255759238(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x80C402FCC0CB6);
  _Unwind_Resume(a1);
}

uint64_t moduleFromOpenCLModule(llvm::LLVMContext *a1, llvm::Module *a2, uint64_t a3, void *a4, void **a5, void **a6, uint64_t a7, uint64_t a8, unint64_t *a9)
{
  return OGLCodeGenService::GenerateIR(0, (uint64_t)a1, a2, 0, a3, a4, (uint64_t)a5, a6, a9);
}

void createMTLRuntimeStackTrace(MTLBoundsCheck::SharedPassData *a1)
{
}

void sub_2557592CC(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C4006D6683FLL);
  _Unwind_Resume(a1);
}

uint64_t MTLRuntimeStackTrace::MTLRuntimeStackTrace(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MetalModulePass::MetalModulePass(a1, (uint64_t)&MTLRuntimeStackTrace::ID, a2);
  void *v3 = &unk_270454178;
  v3[25] = 0;
  v3[24] = 0;
  uint64_t v4 = v3 + 24;
  v3[23] = v3 + 24;
  uint64_t v5 = v3 + 23;
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)(v3 + 23), 0);
  *uint64_t v5 = v4;
  *(void *)(a1 + 200) = 0;
  *uint64_t v4 = 0;
  return a1;
}

void MTLRuntimeStackTrace::~MTLRuntimeStackTrace(MTLRuntimeStackTrace *this)
{
  *(void *)this = &unk_270454178;
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  *(void *)this = &unk_2704532C8;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_270454178;
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  *(void *)this = &unk_2704532C8;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 136);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t MTLRuntimeStackTrace::runOnModule(MTLRuntimeStackTrace *this, llvm::Module *a2)
{
  v29[1] = *MEMORY[0x263EF8340];
  MetalModulePass::runOnModule(this, a2);
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  *((void *)this + 23) = (char *)this + 192;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  uint64_t v4 = (void *)*((void *)this + 14);
  v26[0] = *((void **)this + 10);
  v26[1] = v4;
  uint64_t v5 = (llvm::Type *)llvm::StructType::create();
  Entryuint64_t Function = MetalModulePass::getEntryFunction(this);
  if (EntryFunction)
  {
    uint64_t v7 = *(void *)(EntryFunction + 80);
    uint64_t v8 = v7 ? (llvm::BasicBlock *)(v7 - 24) : 0;
    llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::IRBuilder((uint64_t)v26, v8, 0, 0, 0);
    uint64_t FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v8);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v26, (uint64_t)v8, FirstInsertionPt);
    uint64_t Int8PtrTy = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*((llvm::Type **)this + 5), 0);
    uint64_t v12 = (llvm::Type **)llvm::ConstantPointerNull::get(Int8PtrTy, v11);
    uint64_t inserted = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV(*((llvm::Type ****)this + 8));
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v26, v12, inserted, 0);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v29);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v28);
    if (v26[0] != &v27) {
      free(v26[0]);
    }
  }
  BOOL v14 = (char *)a2 + 24;
  for (uint64_t i = *((void *)a2 + 4); (char *)i != v14; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v16 = (llvm::Function *)(i - 56);
    }
    else {
      uint64_t v16 = 0;
    }
    if ((llvm::GlobalValue::isDeclaration(v16) & 1) == 0 && !llvm::Value::getMetadata())
    {
      for (uint64_t j = (void *)*((void *)v16 + 10); j != (void *)((char *)v16 + 72); uint64_t j = (void *)j[1])
      {
        uint64_t v18 = j - 3;
        if (!j) {
          uint64_t v18 = 0;
        }
        size_t v19 = v18 + 5;
        for (unint64_t k = (void *)v18[6]; k != v19; unint64_t k = (void *)k[1])
        {
          unint64_t v21 = (unsigned __int8 *)(k - 3);
          if (!k) {
            unint64_t v21 = 0;
          }
          int v22 = v21[16];
          if (v22 == 84) {
            uint64_t v23 = (llvm::Instruction *)v21;
          }
          else {
            uint64_t v23 = 0;
          }
          if (k && v22 == 84 && MTLRuntimeStackTrace::checkIfValidForStackTrace((uint64_t)this, (uint64_t)v23))
          {
            uint64_t v24 = (llvm::Value *)MTLRuntimeStackTrace::getOrInsertFrameAlloca(this, v16, v5);
            MTLRuntimeStackTrace::addCallStackTrace((uint64_t)this, (int)v16, v23, v5, v24);
          }
        }
      }
    }
  }
  return 1;
}

void sub_2557596D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

BOOL MTLRuntimeStackTrace::checkIfValidForStackTrace(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 - 32);
  BOOL result = 1;
  if (v2 && !*(unsigned char *)(v2 + 16) && *(void *)(v2 + 24) == *(void *)(a2 + 72))
  {
    uint64_t Name = (_DWORD *)llvm::Value::getName(*(llvm::Value **)(a2 - 32));
    if (v5 >= 4 && *Name == 779250017)
    {
      unsigned int v11 = (void *)llvm::Value::getName((llvm::Value *)v2);
      if (v12 < 0xD) {
        return 0;
      }
      if (*v11 != 0x65746E692E726961 || *(void *)((char *)v11 + 5) != 0x746365737265746ELL) {
        return 0;
      }
    }
    if (llvm::Value::getMetadata()) {
      return 0;
    }
    unint64_t v6 = (_DWORD *)llvm::Value::getName((llvm::Value *)v2);
    if (v7 >= 4 && *v6 == 778859629) {
      return 0;
    }
    uint64_t v8 = llvm::Value::getName((llvm::Value *)v2);
    if (v9 >= 5 && *(_DWORD *)v8 == 1836477548 && *(unsigned char *)(v8 + 4) == 46) {
      return 0;
    }
  }
  return result;
}

uint64_t MTLRuntimeStackTrace::getOrInsertFrameAlloca(MTLRuntimeStackTrace *this, llvm::Function *a2, llvm::Type *a3)
{
  v18[7] = *MEMORY[0x263EF8340];
  BOOL v14 = a2;
  uint64_t v4 = (uint64_t **)((char *)this + 184);
  for (uint64_t i = (void *)*((void *)this + 24); i; uint64_t i = (void *)*i)
  {
    unint64_t v6 = i[4];
    if (v6 <= (unint64_t)a2)
    {
      if (v6 >= (unint64_t)a2)
      {
        v15[0] = &v14;
        return std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>((uint64_t **)this + 23, (unint64_t *)&v14, (uint64_t)&std::piecewise_construct, (uint64_t **)v15)[5];
      }
      ++i;
    }
  }
  uint64_t v7 = *((void *)a2 + 10);
  if (v7) {
    uint64_t v8 = (llvm::BasicBlock *)(v7 - 24);
  }
  else {
    uint64_t v8 = 0;
  }
  FirstNonPHIOrDbg = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHIOrDbg(v8);
  v12[0] = (uint64_t *)v8;
  MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *>((uint64_t)v15, (llvm::BasicBlock **)v12);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v15, FirstNonPHIOrDbg);
  __int16 v13 = 257;
  uint64_t Alloca = llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)v15, a3, 0, (const llvm::Twine *)v12);
  v12[0] = (uint64_t *)&v14;
  std::__tree<std::__value_type<llvm::Function *,llvm::Value *>,std::__map_value_compare<llvm::Function *,std::__value_type<llvm::Function *,llvm::Value *>,std::less<llvm::Function *>,true>,std::allocator<std::__value_type<llvm::Function *,llvm::Value *>>>::__emplace_unique_key_args<llvm::Function *,std::piecewise_construct_t const&,std::tuple<llvm::Function * const&>,std::tuple<>>(v4, (unint64_t *)&v14, (uint64_t)&std::piecewise_construct, v12)[5] = Alloca;
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v18);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v17);
  if (v15[0] != &v16) {
    free(v15[0]);
  }
  return Alloca;
}

void sub_255759988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

void MTLRuntimeStackTrace::addCallStackTrace(uint64_t a1, int a2, llvm::Instruction *a3, llvm::Type *a4, llvm::Value *a5)
{
  _OWORD v26[7] = *MEMORY[0x263EF8340];
  if (MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), a3) != -1)
  {
    int v22 = (llvm::BasicBlock *)*((void *)a3 + 5);
    MTLIRBuilder::MTLIRBuilder<llvm::BasicBlock *&>((uint64_t)v23, &v22);
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v23, a3);
    uint64_t inserted = MTLBoundsCheck::SharedPassData::getOrInsertStackTraceGV(*(llvm::Type ****)(a1 + 64));
    __int16 v21 = 257;
    uint64_t ConstInBoundsGEP2_32 = llvm::IRBuilderBase::CreateConstInBoundsGEP2_32((llvm::Type **)v23, a4, a5, 0, 1u, (const llvm::Twine *)v20);
    unsigned int v11 = *(llvm::Type **)(inserted + 24);
    __int16 v21 = 257;
    uint64_t AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v23, v11, inserted, 0, 0, (uint64_t)v20);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v23, AlignedLoad, ConstInBoundsGEP2_32, 0);
    __int16 v21 = 257;
    uint64_t v13 = llvm::IRBuilderBase::CreateConstInBoundsGEP2_32((llvm::Type **)v23, a4, a5, 0, 0, (const llvm::Twine *)v20);
    BOOL v14 = (llvm::Type **)llvm::ConstantInt::get();
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v23, v14, v13, 0);
    __int16 v15 = *(llvm::Type **)(a1 + 112);
    __int16 v21 = 257;
    uint64_t PointerBitCastOrAddrSpaceCast = llvm::IRBuilderBase::CreatePointerBitCastOrAddrSpaceCast((llvm::IRBuilderBase *)v23, (llvm::Type **)a5, v15, (const llvm::Twine *)v20);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v23, PointerBitCastOrAddrSpaceCast, inserted, 0);
    uint64_t v17 = *((void *)a3 + 4);
    if (v17) {
      BOOL v18 = v17 == *((void *)a3 + 5) + 40;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18) {
      size_t v19 = 0;
    }
    else {
      size_t v19 = (llvm::Instruction *)(v17 - 24);
    }
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v23, v19);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t)v23, AlignedLoad, inserted, 0);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v26);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v25);
    if (v23[0] != &v24) {
      free(v23[0]);
    }
  }
}

void sub_255759BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

void createMTLMemoryCheckPass(MTLBoundsCheck::SharedPassData *a1)
{
}

void sub_255759C60(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLMemoryCheckPass::~MTLMemoryCheckPass(MTLMemoryCheckPass *this)
{
  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t MTLMemoryCheckPass::runOnModule(MTLMemoryCheckPass *this, llvm::Module *a2)
{
  MetalModulePass::runOnModule(this, a2);
  for (uint64_t i = (void *)*((void *)a2 + 4); i != (void *)((char *)a2 + 24); uint64_t i = (void *)i[1])
  {
    if (i) {
      unint64_t v5 = (llvm::Function *)(i - 7);
    }
    else {
      unint64_t v5 = 0;
    }
    if ((*((_DWORD *)v5 + 8) & 0xF) != 1
      && (llvm::GlobalValue::isDeclaration(v5) & 1) == 0
      && !llvm::Value::getMetadata())
    {
      MTLMemoryCheckPass::runOnFunction(this, v5);
    }
  }
  return 1;
}

uint64_t MTLMemoryCheckPass::runOnFunction(MTLMemoryCheckPass *this, llvm::Function *a2)
{
  v28[12] = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)a2 + 72;
  uint64_t v3 = (char *)*((void *)a2 + 10);
  if (v3 != (char *)a2 + 72)
  {
    do
    {
      unint64_t v5 = v3 - 24;
      if (!v3) {
        unint64_t v5 = 0;
      }
      uint64_t v6 = *((void *)v5 + 6);
      uint64_t v7 = (llvm *)(v6 - 24);
      if (v6) {
        uint64_t v8 = v6 - 24;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v25 = v28;
      int v27 = 4;
      if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB)
      {
        do
        {
          unsigned int v26 = 0;
          MTLBoundsCheck::gatherMemoryOperands((uint64_t)v7, (uint64_t)&v25);
          if (!v26) {
            goto LABEL_25;
          }
          unint64_t v9 = (uint64_t *)v25;
          uint64_t v10 = (char *)v25;
          while (1)
          {
            uint64_t v11 = **(void **)v10;
            unsigned int v12 = *(_DWORD *)(v11 + 8);
            if ((v12 & 0xFE) == 0x12) {
              unsigned int v12 = *(_DWORD *)(**(void **)(v11 + 16) + 8);
            }
            if ((v12 >> 8) - 1 <= 1 && *((_DWORD *)v10 + 4) != 0) {
              break;
            }
            v10 += 24;
            if (v10 == (char *)v25 + 24 * v26) {
              goto LABEL_25;
            }
          }
          uint64_t v14 = 24 * v26;
          while (1)
          {
            __int16 v15 = (uint64_t *)(*((void *)this + 8) + 88);
            uint64_t v16 = *v9;
            uint64_t v23 = 0;
            uint64_t v24 = v16;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>,llvm::CallInst *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::CallInst *,void>,llvm::detail::DenseSetPair<llvm::CallInst *>>::LookupBucketFor<llvm::CallInst *>(v15, &v24, &v23) & 1) == 0)break; {
            v9 += 3;
            }
            v14 -= 24;
            if (!v14) {
              goto LABEL_25;
            }
          }
          if (v26
            && (BOOL v18 = (llvm::Instruction *)MTLMemoryCheckPass::createCheckedInstructionCall((uint64_t)this, (uint64_t)v7)) != 0)
          {
            llvm::ReplaceInstWithInst(v7, v18, v17);
          }
          else
          {
LABEL_25:
            BOOL v18 = v7;
          }
          uint64_t v19 = *((void *)v18 + 4);
          uint64_t v7 = (llvm *)(v19 - 24);
          if (v19) {
            BOOL v20 = v19 == *((void *)v18 + 5) + 40;
          }
          else {
            BOOL v20 = 1;
          }
          if (v20) {
            uint64_t v21 = 0;
          }
          else {
            uint64_t v21 = v19 - 24;
          }
        }
        while (*(unsigned __int8 *)(v21 + 16) - 29 > 0xA);
        if (v25 != v28) {
          free(v25);
        }
      }
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return 1;
}

void sub_255759FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a12 != v12) {
    free(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLMemoryCheckPass::createCheckedInstructionCall(uint64_t a1, uint64_t a2)
{
  if ((*(void *)(a2 + 48) || (*(unsigned char *)(a2 + 23) & 0x20) != 0) && llvm::Instruction::getMetadataImpl()) {
    return 0;
  }
  int v5 = *(unsigned __int8 *)(a2 + 16);
  switch(v5)
  {
    case 'T':
      return MTLMemoryCheckPass::createCheckedFunction(a1, a2);
    case '=':
      return MTLMemoryCheckPass::createCheckedStoreCall(a1, a2);
    case '<':
      return MTLMemoryCheckPass::createCheckedLoadCall(a1, a2);
    default:
      return 0;
  }
}

uint64_t MTLMemoryCheckPass::createCheckedLoadCall(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v13 = **(void **)(a2 - 32);
  unint64_t v4 = *(unsigned __int16 *)(a2 + 18);
  uint64_t v5 = *(void *)(a1 + 48);
  v11[0] = "mtl.checked_load.";
  void v11[2] = (1 << (v4 >> 1));
  __int16 v12 = 2307;
  v16[0] = v11;
  _DWORD v16[2] = ".";
  __int16 v17 = 770;
  v14[0] = v16;
  void v14[2] = (void *)(v4 & 1);
  __int16 v15 = 2306;
  uint64_t v6 = getMangledFunction<llvm::Type *&,llvm::Type *&>(v5, (llvm::Twine *)v14, *(MTLBoundsCheck **)a2, &v13, (uint64_t *)(a1 + 80));
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v6))
  {
    *(_DWORD *)(v6 + 32) = *(_DWORD *)(v6 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    uint64_t v7 = *(llvm::BasicBlock **)(a1 + 40);
    v14[0] = "entry";
    __int16 v15 = 259;
    llvm::BasicBlock::Create(v7, (llvm::LLVMContext *)v14, (const llvm::Twine *)v6, 0, v8);
  }
  if (v6) {
    uint64_t v9 = *(void *)(v6 + 24);
  }
  else {
    uint64_t v9 = 0;
  }
  v16[0] = *(void *)(a2 - 32);
  MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), (llvm::Instruction *)a2);
  v16[1] = llvm::ConstantInt::get();
  __int16 v15 = 257;
  return llvm::CallInst::Create(v9, v6, (uint64_t)v16, 2, 0, 0);
}

void sub_25575A79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MTLMemoryCheckPass::createCheckedStoreCall(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v19 = **(void ***)(a2 - 32);
  if (!a2 || (unint64_t v4 = (llvm::Type **)a2, *(unsigned char *)(a2 + 16) != 60)) {
    unint64_t v4 = *(llvm::Type ***)(a2 - 64);
  }
  uint64_t v18 = 0;
  uint64_t v5 = *v4;
  unint64_t v6 = *(unsigned __int16 *)(a2 + 18);
  uint64_t v17 = 1 << (v6 >> 1);
  uint64_t v18 = v5;
  uint64_t v7 = *(void *)(a1 + 48);
  v15[0] = "mtl.checked_store.";
  void v15[2] = &v17;
  __int16 v16 = 3075;
  v22[0] = v15;
  uint64_t v23 = ".";
  __int16 v24 = 770;
  v20[0] = v22;
  void v20[2] = (void *)(v6 & 1);
  __int16 v21 = 2306;
  uint64_t v8 = getMangledFunction<llvm::Type *&,llvm::Type *&,llvm::Type *&>(v7, (llvm::Twine *)v20, *(MTLBoundsCheck **)a2, &v19, (void **)&v18, (int64_t *)(a1 + 80));
  if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v8))
  {
    *(_DWORD *)(v8 + 32) = *(_DWORD *)(v8 + 32) & 0xFFFFBFC0 | 0x4007;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
    uint64_t v14 = 0;
    uint64_t v9 = *(llvm::BasicBlock **)(a1 + 40);
    v20[0] = "entry";
    __int16 v21 = 259;
    llvm::BasicBlock::Create(v9, (llvm::LLVMContext *)v20, (const llvm::Twine *)v8, 0, v10);
  }
  if (v8) {
    uint64_t v11 = *(void *)(v8 + 24);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(a2 - 64);
  v22[0] = *(void *)(a2 - 32);
  v22[1] = v12;
  MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), (llvm::Instruction *)a2);
  uint64_t v23 = (const char *)llvm::ConstantInt::get();
  __int16 v21 = 257;
  return llvm::CallInst::Create(v11, v8, (uint64_t)v22, 3, 0, 0);
}

void sub_25575AEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  llvm::IRBuilder<llvm::ConstantFolder,llvm::IRBuilderDefaultInserter>::~IRBuilder((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MTLMemoryCheckPass::createCheckedFunction(uint64_t a1, uint64_t a2)
{
  v58[12] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 - 32);
  if (!v2) {
    return 0;
  }
  if (*(unsigned char *)(v2 + 16)) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4 != *(void *)(a2 + 72)) {
    return 0;
  }
  if (!llvm::GlobalValue::isDeclaration(*(llvm::GlobalValue **)(a2 - 32))) {
    return 0;
  }
  if (llvm::Value::getMetadata()) {
    return 0;
  }
  uint64_t Name = (char *)llvm::Value::getName((llvm::Value *)v2);
  unint64_t v43 = Name;
  size_t v44 = v7;
  if (v7 < 4) {
    return 0;
  }
  if (*(_DWORD *)Name != 779250017)
  {
    if (v7 < 5) {
      return 0;
    }
    if (*(_DWORD *)Name != 1836477548 || Name[4] != 46) {
      return 0;
    }
  }
  BOOL v56 = v58;
  uint64_t v57 = 0x400000000;
  MTLBoundsCheck::gatherMemoryArguments(v2, (uint64_t)&v56);
  uint64_t v11 = v56;
  if (v57)
  {
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = *(void *)v56[v12];
      unsigned int v14 = *(_DWORD *)(v13 + 8);
      if ((v14 & 0xFE) == 0x12) {
        unsigned int v14 = *(_DWORD *)(**(void **)(v13 + 16) + 8);
      }
      if ((v14 >> 8) - 1 < 2) {
        break;
      }
      v12 += 3;
      if (3 * v57 == v12) {
        goto LABEL_21;
      }
    }
    int v15 = *(_DWORD *)(v4 + 12);
    v45[0] = 0;
    llvm::SmallVector<unsigned long,6u>::SmallVector(&v54, (v15 + 62) >> 6, v45);
    unsigned int v16 = v15 - 1;
    v55[12] = v15 - 1;
    v52[0] = v53;
    v52[1] = (void *)0x400000000;
    uint64_t v49 = v51;
    long long v50 = xmmword_2557AA0B0;
    llvm::raw_svector_ostream::raw_svector_ostream((uint64_t)v41, (uint64_t)&v49);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)v41, "mtl.checked.", 0xCuLL);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)v41, v43, v44);
    if (v44 < 0xB) {
      goto LABEL_59;
    }
    if ((*(void *)v43 != 0x6D656D2E6D766C6CLL || *(void *)(v43 + 3) != 0x7970636D656D2E6DLL)
      && (*(void *)v43 != 0x6D656D2E6D766C6CLL || *(void *)(v43 + 3) != 0x7465736D656D2E6DLL))
    {
      if (v44 < 0xC)
      {
LABEL_59:
        if (!llvm::Module::getFunction())
        {
          llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::init((uint64_t)v40, 64);
          v40[24] = 0;
          v40[48] = 0;
          v47[0] = &v48;
          v47[1] = (void *)0x400000000;
          int v31 = *(_DWORD *)(v4 + 12);
          if (v31 != 1)
          {
            unint64_t v32 = 0;
            do
            {
              if (((*((void *)v54 + (v32 >> 6)) >> v32) & 1) == 0)
              {
                v45[0] = *(void *)(*(void *)(v4 + 16) + 8 * (v32 + 1));
                llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v47, v45);
                v45[0] = *(void *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v32);
                llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v52, v45);
                int v31 = *(_DWORD *)(v4 + 12);
              }
              ++v32;
            }
            while (v32 < (v31 - 1));
          }
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v47, (uint64_t *)(a1 + 80));
          MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), (llvm::Instruction *)a2);
          v45[0] = llvm::ConstantInt::get();
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v52, v45);
          uint64_t v33 = llvm::FunctionType::get();
          uint64_t v35 = *v42;
          uint64_t v34 = v42[1];
          __int16 v46 = 261;
          v45[0] = v35;
          v45[1] = v34;
          long long v36 = (const llvm::Twine *)llvm::Function::Create(v33, 7, (uint64_t)v45, *(void *)(a1 + 48));
          *((_WORD *)v36 + 9) = *((_WORD *)v36 + 9) & 0xC00F | *(_WORD *)(v2 + 18) & 0x3FF0;
          llvm::MDTuple::getImpl();
          llvm::Value::setMetadata();
          llvm::Function::addFnAttr();
          llvm::Function::addFnAttr();
          uint64_t v37 = *(llvm::BasicBlock **)(a1 + 40);
          v45[0] = (uint64_t)"entry";
          __int16 v46 = 259;
          llvm::BasicBlock::Create(v37, (llvm::LLVMContext *)v45, v36, 0, v38);
        }
        int v28 = *(_DWORD *)(v4 + 12);
        if (v28 != 1)
        {
          unint64_t v29 = 0;
          uint64_t v30 = a2;
          do
          {
            if (((*((void *)v54 + (v29 >> 6)) >> v29) & 1) == 0)
            {
              v45[0] = *(void *)(v30 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
              llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v52, v45);
              int v28 = *(_DWORD *)(v4 + 12);
            }
            ++v29;
            v30 += 32;
          }
          while (v29 < (v28 - 1));
        }
        MTLBoundsCheck::SharedPassData::indexForInstruction(*(MTLBoundsCheck::SharedPassData **)(a1 + 64), (llvm::Instruction *)a2);
        v45[0] = llvm::ConstantInt::get();
        llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v52, v45);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v41);
        if (v49 != v51) {
          free(v49);
        }
        __int16 v46 = 257;
        uint64_t v9 = llvm::CallInst::Create();
        __int16 v39 = *(_WORD *)(v9 + 18) & 0xFFFC | *(_WORD *)(a2 + 18) & 3;
        *(_WORD *)(v9 + 18) = v39;
        *(_WORD *)(v9 + 18) = v39 & 0xF003 | *(_WORD *)(a2 + 18) & 0xFFC;
        if (v52[0] != v53) {
          free(v52[0]);
        }
        if (v54 != v55) {
          free(v54);
        }
        uint64_t v11 = v56;
        goto LABEL_79;
      }
      if (*(void *)v43 != 0x6D656D2E6D766C6CLL || *((_DWORD *)v43 + 2) != 1702260589)
      {
        if (v44 >= 0x11)
        {
          BOOL v20 = *(void *)v43 == 0x6D6F74612E726961 && *((void *)v43 + 1) == 0x61626F6C672E6369;
          if (v20 && v43[16] == 108)
          {
            int v22 = llvm::StringRef::find() == -1 ? -3 : -4;
            uint64_t v23 = v22 + v16;
            if (__CFADD__(v22, v16))
            {
              uint64_t v24 = a2 + 32 * v23;
              do
              {
                *((void *)v54 + (v23 >> 6)) |= 1 << v23;
                llvm::raw_ostream::operator<<((llvm::raw_ostream *)v41, ".", 1uLL);
                llvm::raw_ostream::operator<<();
                LODWORD(v23) = v23 + 1;
                v24 += 32;
              }
              while (!__CFADD__(v22++, 1));
            }
          }
        }
        goto LABEL_59;
      }
    }
    if (v16 >= 4)
    {
      char v26 = 3;
      if (v15 == 6) {
        char v26 = 4;
      }
      *(void *)v54 |= 1 << v26;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)v41, ".", 1uLL);
      llvm::raw_ostream::operator<<();
      if (v15 == 6)
      {
        *(void *)v54 |= 8uLL;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)v41, ".", 1uLL);
        llvm::raw_ostream::operator<<();
      }
    }
    goto LABEL_59;
  }
LABEL_21:
  uint64_t v9 = 0;
LABEL_79:
  if (v11 != v58) {
    free(v11);
  }
  return v9;
}

void sub_25575BD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&a43);
  if (STACK[0x280] != a17) {
    free((void *)STACK[0x280]);
  }
  if (STACK[0x2D8] != a18) {
    free((void *)STACK[0x2D8]);
  }
  if ((unint64_t *)STACK[0x308] != &STACK[0x318]) {
    free((void *)STACK[0x308]);
  }
  BOOL v45 = *(void **)(v43 - 224);
  if (v45 != (void *)a19) {
    free(v45);
  }
  _Unwind_Resume(a1);
}

uint64_t MTLMemoryCheckPass::createQueryMemoryUsageCall(uint64_t a1, MTLBoundsCheck *a2, int a3)
{
  v14[1] = *(MTLBoundsCheck **)MEMORY[0x263EF8340];
  int v4 = a3 - 1;
  if ((a3 - 1) > 2) {
    return 0;
  }
  uint64_t v5 = qword_2557AA370[v4];
  unint64_t v6 = off_2653C2868[v4];
  uint64_t v7 = *(void *)(a1 + 48);
  __int16 v13 = 261;
  v12[0] = v6;
  v12[1] = v5;
  uint64_t v8 = *(MTLBoundsCheck **)(a1 + 96);
  v14[0] = (MTLBoundsCheck *)llvm::PointerType::get();
  uint64_t v9 = getMangledFunction<llvm::PointerType *>(v7, (llvm::Twine *)v12, v8, v14);
  if (!llvm::Value::getMetadata())
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
  }
  if (!llvm::Value::getMetadata())
  {
    llvm::MDTuple::getImpl();
    llvm::Value::setMetadata();
  }
  if (v9) {
    uint64_t v10 = *(void *)(v9 + 24);
  }
  else {
    uint64_t v10 = 0;
  }
  v14[0] = a2;
  __int16 v13 = 257;
  return llvm::CallInst::Create(v10, v9, (uint64_t)v14, 1, 0, 0);
}

uint64_t llvm::IRBuilderBase::CreateBr(llvm::IRBuilderBase *this, llvm::BasicBlock *a2, llvm::Instruction *a3)
{
  uint64_t v4 = llvm::BranchInst::Create(a2, 0, a3);
  __int16 v7 = 257;
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v4, (uint64_t)v6);
}

uint64_t llvm::BranchInst::setSuccessor(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = result - 32;
  uint64_t v4 = (void *)(result - 32 - 32 * a2);
  if (*v4)
  {
    uint64_t v5 = v3 - 32 * a2;
    __int16 v7 = *(void **)(v5 + 16);
    unint64_t v6 = (void *)(v5 + 16);
    *__int16 v7 = *(v6 - 1);
    uint64_t v8 = *(v6 - 1);
    if (v8) {
      *(void *)(v8 + 16) = *v6;
    }
  }
  *uint64_t v4 = a3;
  if (a3)
  {
    uint64_t v11 = *(void *)(a3 + 8);
    uint64_t v9 = (void *)(a3 + 8);
    uint64_t v10 = v11;
    uint64_t v12 = v3 - 32 * a2;
    *(void *)(v12 + 8) = v11;
    if (v11) {
      *(void *)(v10 + 16) = v12 + 8;
    }
    *(void *)(v12 + 16) = v9;
    void *v9 = v4;
  }
  return result;
}

uint64_t llvm::BranchInst::Create(llvm::BranchInst *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  uint64_t v5 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x25A28CD20](v5, this, a2);
  return v5;
}

void sub_25575C1E0(_Unwind_Exception *a1)
{
  llvm::User::operator delete(v1);
  _Unwind_Resume(a1);
}

void *llvm::SmallVector<unsigned long,6u>::SmallVector(void *a1, unint64_t a2, uint64_t *a3)
{
  *a1 = a1 + 2;
  a1[1] = 0x600000000;
  llvm::SmallVectorImpl<unsigned long>::assign((uint64_t)a1, a2, *a3);
  return a1;
}

void sub_25575C234(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::SmallVectorImpl<unsigned long>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(a1 + 12) < a2) {
    llvm::SmallVectorTemplateBase<llvm::Value *,true>::growAndAssign(a1);
  }
  uint64_t v3 = *(void **)a1;
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= a2) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *(unsigned int *)(a1 + 8);
  }
  if (v5)
  {
    unint64_t v6 = *(void **)a1;
    do
    {
      *v6++ = a3;
      --v5;
    }
    while (v5);
  }
  unint64_t v7 = v4 - a2;
  if (v4 < a2)
  {
    uint64_t v8 = &v3[v4];
    do
      *v8++ = a3;
    while (!__CFADD__(v7++, 1));
  }
  *(_DWORD *)(a1 + 8) = a2;
  return a1;
}

void llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::init(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v4;
    *(void *)a1 = MEMORY[0x25A28D370]((unint64_t)v4 << 6, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t *)a1);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

void createMTLLowerOSLogStructPass(MTLBoundsCheck::SharedPassData *a1)
{
}

void sub_25575C3A8(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void LowerOSLogStructPass::~LowerOSLogStructPass(LowerOSLogStructPass *this)
{
  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

BOOL LowerOSLogStructPass::runOnModule(LowerOSLogStructPass *this, llvm::Module *a2)
{
  v81[4] = *MEMORY[0x263EF8340];
  MetalModulePass::runOnModule(this, a2);
  uint64_t Function = llvm::Module::getFunction();
  if (Function)
  {
    long long v66 = 0u;
    long long v67 = 0u;
    int v68 = 1065353216;
    long long v63 = 0u;
    long long v64 = 0u;
    int v65 = 1065353216;
    uint64_t v56 = Function;
    uint64_t v3 = *(void *)(Function + 8);
    if (v3)
    {
      do
      {
        unint64_t v4 = *(llvm::Instruction **)(v3 + 24);
        if (v4 && *((unsigned char *)v4 + 16) == 84)
        {
          int v69 = (void *)llvm::Instruction::getFunction(v4);
          std::__hash_table<llvm::Function *,std::hash<llvm::Function *>,std::equal_to<llvm::Function *>,std::allocator<llvm::Function *>>::__emplace_unique_key_args<llvm::Function *,llvm::Function *>((uint64_t)&v63, &v69, &v69);
        }
        uint64_t v3 = *(void *)(v3 + 8);
      }
      while (v3);
      for (uint64_t i = (void *)v64; i; uint64_t i = (void *)*i)
      {
        uint64_t v6 = i[2];
        uint64_t v62 = (llvm::Function *)v6;
        uint64_t v7 = *(void *)(v6 + 8);
        if (!v7)
        {
LABEL_11:
          if (*(_WORD *)(v6 + 18)) {
            llvm::Function::BuildLazyArguments((llvm::Function *)v6);
          }
          int v69 = *(void **)(*(void *)(v6 + 88) + 8);
          uint64_t v70 = 0;
          llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v79, (uint64_t *)&v69);
          unint64_t v76 = v78;
          uint64_t v77 = 0x400000000;
          unsigned int v8 = v80;
          if (v80)
          {
            do
            {
              uint64_t v9 = v79[v8 - 1];
              LODWORD(v80) = v8 - 1;
              if (*(unsigned __int8 *)(v9 + 16) <= 0x1Bu) {
                uint64_t v10 = 0;
              }
              else {
                uint64_t v10 = v9;
              }
              if (*(unsigned char *)(v10 + 16) != 84 || v10 == 0)
              {
                llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&v76, v10);
                llvm::SmallVectorImpl<llvm::User *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v79, *(void *)(v9 + 8), 0);
              }
              else
              {
                uint64_t v12 = llvm::UndefValue::get();
                llvm::CallBase::setArgOperand(v10, 0, v12);
                llvm::CallBase::setArgOperand(v10, 1u, v12);
              }
              unsigned int v8 = v80;
            }
            while (v80);
            __int16 v13 = v76;
            uint64_t v14 = v77;
          }
          else
          {
            uint64_t v14 = 0;
            __int16 v13 = v78;
          }
          int v15 = v13 - 4;
          for (uint64_t j = 4 * v14; j * 2; j -= 4)
          {
            uint64_t v17 = *(llvm::Instruction **)&v15[j];
            llvm::Instruction::eraseFromParent(v17);
          }
          uint64_t v18 = *((void *)v62 + 3);
          uint64_t v19 = 24;
          if (*((void *)v62 + 12) == 3) {
            uint64_t v19 = 16;
          }
          uint64_t v20 = *(void *)(*(void *)(v18 + 16) + v19);
          v74[0] = &v75;
          v74[1] = 0x400000000;
          llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)v74, v20);
          llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)v74, v20);
          int v69 = &v71;
          uint64_t v70 = 0x800000000;
          uint64_t v21 = *((void *)v62 + 14);
          uint64_t v60 = 0;
          uint64_t v61 = v21;
          llvm::Function::getContext(v62);
          uint64_t v22 = llvm::AttributeSet::addAttribute();
          llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&v69, v22);
          llvm::Function::getContext(v62);
          uint64_t v23 = llvm::AttributeSet::addAttribute();
          llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&v69, v23);
          if ((*(_DWORD *)(v18 + 12) - 3) <= 0xFFFFFFFD)
          {
            unint64_t v24 = 2;
            do
            {
              llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)v74, *(void *)(*(void *)(v18 + 16) + 8 * v24));
              uint64_t ParamAttrs = llvm::AttributeList::getParamAttrs((llvm::AttributeList *)&v61);
              llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&v69, ParamAttrs);
            }
            while (v24++ < (*(_DWORD *)(v18 + 12) - 1));
          }
          uint64_t v27 = llvm::FunctionType::get();
          uint64_t v59 = 0;
          int v28 = *((_DWORD *)v62 + 8);
          __int16 v58 = 261;
          v57[0] = llvm::Value::getName(v62);
          v57[1] = v29;
          uint64_t v59 = (llvm::Function *)llvm::Function::Create(v27, v28 & 0xF, (uint64_t)v57, 0);
          llvm::SymbolTableListTraits<llvm::Function>::addNodeToList();
        }
        while (*(unsigned char *)(*(void *)(*(void *)(v7 + 24)
                                     - 32 * (*(_DWORD *)(*(void *)(v7 + 24) + 20) & 0x7FFFFFF))
                         + 16) == 3)
        {
          uint64_t v7 = *(void *)(v7 + 8);
          if (!v7) {
            goto LABEL_11;
          }
        }
      }
    }
    uint64_t v30 = (llvm::GlobalValue **)v73;
    int v69 = v73;
    uint64_t v70 = (uint64_t)v73;
    uint64_t v71 = 4;
    int v72 = 0;
    int v31 = (void *)v67;
    if ((void)v67)
    {
      do
      {
        unint64_t v32 = (llvm::Function *)v31[2];
        uint64_t v33 = *((void *)v32 + 1);
        if (v33)
        {
          uint64_t v34 = v31[3];
          do
          {
            uint64_t v35 = *(void *)(v33 + 24);
            uint64_t v33 = *(void *)(v33 + 8);
            uint64_t v36 = *(void *)(v35 - 32 * (*(_DWORD *)(v35 + 20) & 0x7FFFFFF));
            if (v36) {
              BOOL v37 = *(unsigned char *)(v36 + 16) == 3;
            }
            else {
              BOOL v37 = 0;
            }
            if (v37)
            {
              llvm::SmallPtrSetImpl<llvm::Instruction *>::insert((llvm::SmallPtrSetImplBase *)&v69, *(const void **)(v35 - 32 * (*(_DWORD *)(v35 + 20) & 0x7FFFFFF)), (uint64_t)&v79);
              unint64_t v79 = v81;
              uint64_t v80 = 0x400000000;
              std::string v38 = *(llvm::Constant **)(v36 - 32);
              BOOL v39 = *((unsigned char *)v38 + 16) != 9 || v38 == 0;
              if (!v39 && *(_DWORD *)(*(void *)v38 + 12))
              {
                unint64_t v40 = 0;
                do
                {
                  Aggregateuint64_t Element = llvm::Constant::getAggregateElement(v38);
                  llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&v79, AggregateElement);
                  ++v40;
                }
                while (v40 < *(unsigned int *)(*(void *)v38 + 12));
              }
              uint64_t v42 = v35 + 32;
              for (unint64_t k = 1; ; ++k)
              {
                uint64_t v44 = llvm::CallBase::arg_end((llvm::CallBase *)v35);
                uint64_t v45 = *(_DWORD *)(v35 + 20) & 0x7FFFFFF;
                if (k >= ((v44 - (v35 + 32 * (unint64_t)-(int)v45)) >> 5)) {
                  break;
                }
                llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back((uint64_t)&v79, *(void *)(v42 - 32 * v45));
                v42 += 32;
              }
              v78[8] = 257;
              uint64_t v46 = llvm::CallInst::Create();
              *(_WORD *)(v46 + 18) = *(_WORD *)(v46 + 18) & 0xFFFC | ((*(_WORD *)(v35 + 18) & 3u) - 1 < 2);
              *(void *)(v46 + 64) = *(void *)(v34 + 112);
              llvm::Value::replaceAllUsesWith();
              llvm::Instruction::copyMetadata();
              llvm::Instruction::eraseFromParent((llvm::Instruction *)v35);
              if (v79 != v81) {
                free(v79);
              }
            }
            else
            {
              llvm::Instruction::eraseFromParent((llvm::Instruction *)v35);
            }
          }
          while (v33);
        }
        llvm::Function::eraseFromParent(v32);
        int v31 = (void *)*v31;
      }
      while (v31);
      uint64_t v30 = (llvm::GlobalValue **)v69;
      BOOL v47 = (llvm::GlobalValue **)v70;
      unsigned int v49 = v71;
      LODWORD(v48) = HIDWORD(v71);
    }
    else
    {
      LODWORD(v48) = 0;
      unsigned int v49 = 4;
      BOOL v47 = (llvm::GlobalValue **)v73;
    }
    if (v47 == v30) {
      uint64_t v48 = v48;
    }
    else {
      uint64_t v48 = v49;
    }
    long long v50 = v47;
    if (v48)
    {
      uint64_t v51 = 0;
      while ((unint64_t)v47[v51] >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (v48 == ++v51) {
          goto LABEL_79;
        }
      }
      long long v50 = &v47[v51];
    }
    unsigned int v52 = &v47[v48];
    if (v50 != v52)
    {
LABEL_71:
      BOOL v53 = *v50;
      if ((llvm::GlobalValue::isDeclaration(*v50) & 1) == 0)
      {
        BOOL v54 = (llvm::Constant *)*((void *)v53 - 4);
        llvm::GlobalVariable::setInitializer();
        if (llvm::isSafeToDestroyConstant()) {
          llvm::Constant::destroyConstant(v54);
        }
      }
      llvm::Constant::removeDeadConstantUsers(v53);
      llvm::GlobalVariable::dropAllReferences(v53);
      llvm::GlobalVariable::eraseFromParent(v53);
      while (++v50 != v52)
      {
        if ((unint64_t)*v50 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v50 != v52) {
            goto LABEL_71;
          }
          break;
        }
      }
      uint64_t v30 = (llvm::GlobalValue **)v69;
      BOOL v47 = (llvm::GlobalValue **)v70;
    }
LABEL_79:
    if (v47 != v30) {
      free(v47);
    }
    std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::~__hash_table((uint64_t)&v63);
    std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::~__hash_table((uint64_t)&v66);
    uint64_t Function = v56;
  }
  return Function != 0;
}

void sub_25575CE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36)
{
  if (a36 != a35) {
    free(a36);
  }
  std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::~__hash_table((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void *std::__hash_table<llvm::Function *,std::hash<llvm::Function *>,std::equal_to<llvm::Function *>,std::allocator<llvm::Function *>>::__emplace_unique_key_args<llvm::Function *,llvm::Function *>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_25575D194(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<llvm::Function *,llvm::Function *>,std::__unordered_map_hasher<llvm::Function *,std::__hash_value_type<llvm::Function *,llvm::Function *>,std::hash<llvm::Function *>,std::equal_to<llvm::Function *>,true>,std::__unordered_map_equal<llvm::Function *,std::__hash_value_type<llvm::Function *,llvm::Function *>,std::equal_to<llvm::Function *>,std::hash<llvm::Function *>,true>,std::allocator<std::__hash_value_type<llvm::Function *,llvm::Function *>>>::__emplace_unique_key_args<llvm::Function *,llvm::Function *&,llvm::Function *&>(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v10;
  uint64_t v16 = *a4;
  i[2] = *a3;
  i[3] = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    void *i = *v24;
LABEL_38:
    *unint64_t v24 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_25575D3F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *deserializeCompilerOutputData(void *result, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = *a3 + 8;
  uint64_t v6 = *(void *)((char *)result + *a3);
  *a3 = v5;
  if (v6)
  {
    unint64_t v10 = result;
    do
    {
      uint64_t v11 = *(void *)((char *)v10 + v5);
      *a3 = v5 + 8;
      char v14 = v11;
      size_t v12 = *(void *)((char *)v10 + v5 + 8);
      *a3 = v5 + 16;
      BOOL result = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::find<CompilerOutputType>(a4, &v14);
      if (!result || !result[3])
      {
        if (v12)
        {
          dispatch_data_t v13 = dispatch_data_create((char *)v10 + *a3, v12, 0, 0);
          BOOL result = std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,NSObject  {objcproto16OS_dispatch_data}*>(a5, &v14, &v14, &v13);
        }
      }
      uint64_t v5 = *a3 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      *a3 = v5;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t **std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::find<CompilerOutputType>(void *a1, char *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (BOOL result = *v6; result; BOOL result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType&,NSObject  {objcproto16OS_dispatch_data}*>(uint64_t a1, char *a2, unsigned char *a3, void *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      size_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((unsigned __int8 *)v12 + 16) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          size_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  size_t v12 = operator new(0x20uLL);
  void *v12 = 0;
  v12[1] = v8;
  *((unsigned char *)v12 + 16) = *a3;
  uint64_t v12[3] = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *v12 = *v21;
LABEL_38:
    void *v21 = v12;
    goto LABEL_39;
  }
  void *v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    unint64_t v22 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_25575D7CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void createMTLConstantGlobalToArgPass(MTLBoundsCheck::SharedPassData *a1)
{
}

void sub_25575D84C(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void ConstantGlobalToArgPass::~ConstantGlobalToArgPass(ConstantGlobalToArgPass *this)
{
  *(void *)this = &unk_2704532C8;
  int8x8_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  int8x8_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

uint64_t ConstantGlobalToArgPass::runOnModule(llvm::Module **this, llvm::Module *a2)
{
  v113[8] = *MEMORY[0x263EF8340];
  MetalModulePass::runOnModule((MetalModulePass *)this, a2);
  v99[0] = 0;
  v99[1] = 0;
  int v100 = 0;
  uint64_t v89 = (ConstantGlobalToArgPass *)this;
  unint64_t v4 = this[6];
  v105[0] = "air.global_bindings";
  v106[8] = 259;
  NamedMetaint data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v4, (const llvm::Twine *)v105);
  uint64_t v6 = NamedMetadata;
  if (NamedMetadata)
  {
    int NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    if (NumOperands)
    {
      for (int i = 0; i != NumOperands; ++i)
      {
        uint64_t Operand = llvm::NamedMDNode::getOperand(v6);
        uint64_t v10 = Operand - 8 * *(unsigned int *)(Operand + 8);
        uint64_t v11 = *(llvm::Value **)(*(void *)(v10 + 8) + 128);
        uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(*(void *)(v10 + 16)
                                                                        - 8
                                                                        * *(unsigned int *)(*(void *)(v10 + 16) + 8)
                                                                        + 8));
        if (v13 == 11)
        {
          if (*String == 0x747865742E726961 && *(void *)((char *)String + 3) == 0x657275747865742ELL) {
            continue;
          }
          if (*String == 0x706D61732E726961 && *(void *)((char *)String + 3) == 0x72656C706D61732ELL) {
            continue;
          }
        }
        *(void *)&long long v112 = llvm::Value::getName(v11);
        *((void *)&v112 + 1) = v16;
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v99, &v112, (uint64_t)v105);
      }
    }
  }
  *(void *)&long long v112 = v113;
  *((void *)&v112 + 1) = 0x800000000;
  unint64_t v17 = (char *)a2 + 8;
  uint64_t v18 = *((void *)a2 + 2);
  if ((char *)v18 == v17)
  {
    uint64_t v33 = 0;
    goto LABEL_131;
  }
  size_t v19 = v89;
  do
  {
    if (v18) {
      uint64_t v20 = (void *)(v18 - 56);
    }
    else {
      uint64_t v20 = 0;
    }
    if (ConstantGlobalToArgPass::shouldConvertGlobal(v19, (llvm::GlobalVariable *)v20))
    {
      v105[0] = v20;
      llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v112, (uint64_t *)v105);
    }
    else if (*(unsigned char *)(*(void *)v20 + 8) == 15 && MTLBoundsCheck::checkAddressSpace((uint64_t)v20))
    {
      v105[0] = (void *)llvm::Value::getName((llvm::Value *)v20);
      v105[1] = v21;
      std::string v94 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(v99, (uint64_t)v105, &v94) & 1) == 0)MTLBoundsCheck::SharedPassData::skipIndirectionDeep(*((MTLBoundsCheck::SharedPassData **)v89 + 8), (llvm::Value *)v20); {
    }
      }
    uint64_t v18 = *(void *)(v18 + 8);
    size_t v19 = v89;
  }
  while ((char *)v18 != v17);
  if (!DWORD2(v112))
  {
    uint64_t v33 = 0;
    goto LABEL_131;
  }
  uint64_t inserted = MTLBoundsCheck::SharedPassData::getOrInsertGlobalConstantsTableGV(*((MTLBoundsCheck::SharedPassData **)v89
                                                                               + 8));
  unsigned int v96 = 128;
  std::string v94 = (char *)MEMORY[0x25A28D370](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty((uint64_t *)&v94);
  std::string v87 = (llvm::Value *)inserted;
  LOBYTE(v97[0]) = 0;
  char v98 = 0;
  if (DWORD2(v112))
  {
    unsigned int v23 = 0;
    unint64_t v24 = (llvm::Value **)v112;
    uint64_t v25 = 8 * DWORD2(v112);
    char v26 = v89;
    do
    {
      uint64_t v109 = 0;
      uint64_t v109 = *v24;
      uint64_t v27 = (llvm::Type *)*((void *)v109 + 3);
      int v28 = v26;
      unsigned int PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(*((llvm::DataLayout **)v26 + 7), v27);
      v105[0] = (void *)llvm::DataLayout::getTypeAllocSize(*((llvm::DataLayout **)v28 + 7), v27);
      v105[1] = v30;
      int v31 = llvm::TypeSize::operator unsigned long long();
      LODWORD(v101) = (v23 + (unint64_t)PrefTypeAlignment - 1) / PrefTypeAlignment * PrefTypeAlignment;
      HIDWORD(v101) = v31 - v23 + v101;
      llvm::SmallVectorImpl<MTLBoundsCheck::ConstantDataHeader>::emplace_back<MTLBoundsCheck::ConstantDataHeader&>(*(void *)(*((void *)v89 + 8) + 64) + 592, (uint64_t *)&v101);
      int v32 = (int)v101;
      *(_DWORD *)llvm::ValueMap<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t *)&v94, &v109) = v32;
      v23 += HIDWORD(v101);
      ++v24;
      v25 -= 8;
      char v26 = v89;
    }
    while (v25);
  }
  else
  {
    unsigned int v23 = 0;
    char v26 = v89;
  }
  llvm::SmallVectorImpl<unsigned char>::resizeImpl<false>((void *)(*(void *)(*((void *)v26 + 8) + 64) + 608), v23);
  uint64_t v34 = v94;
  unsigned int v35 = v96;
  if (v95)
  {
    v105[0] = v94;
    v105[1] = &v94[48 * v96];
    llvm::DenseMapIterator<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>,false>::AdvancePastEmptyBuckets((uint64_t *)v105);
    int64x2_t v36 = *(int64x2_t *)v105;
    uint64_t v34 = v94;
    unsigned int v35 = v96;
  }
  else
  {
    int64x2_t v36 = vdupq_n_s64((unint64_t)&v94[48 * v96]);
  }
  int64x2_t v93 = v36;
  uint64_t v86 = &v34[48 * v35];
LABEL_39:
  if ((char *)v93.i64[0] != v86)
  {
    BOOL v37 = *(void ***)(v93.i64[0] + 24);
    unsigned int v88 = *(_DWORD *)(v93.i64[0] + 40);
    ConstantGlobalToArgPass::serializeConstantValue((llvm::DataLayout **)v89, (llvm::Type **)*(v37 - 4), v88);
    v105[0] = v37[1];
    v105[1] = 0;
    llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v109, (uint64_t *)v105);
    while (1)
    {
      while (1)
      {
        if (!v110)
        {
          llvm::GlobalVariable::dropAllReferences((llvm::GlobalVariable *)v37);
          llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v37);
          if (v109 != (llvm::Value *)&v111) {
            free(v109);
          }
          v93.i64[0] += 48;
          llvm::DenseMapIterator<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>,false>::AdvancePastEmptyBuckets(v93.i64);
          goto LABEL_39;
        }
        std::string v38 = (unsigned __int8 *)*((void *)v109 + --v110);
        unsigned int v39 = v38[16];
        unint64_t v40 = v39 <= 0x1B ? 0 : (llvm::Value *)v38;
        int v92 = v40;
        if (!v40) {
          break;
        }
        MTLIRBuilder::MTLIRBuilder<llvm::Instruction *&>((uint64_t)v105, &v92);
        if (*((unsigned char *)v92 + 16) == 83 && v92 != 0)
        {
          int v42 = *((_DWORD *)v92 + 5);
          uint64_t v43 = v42 & 0x7FFFFFF;
          if ((v42 & 0x7FFFFFF) != 0)
          {
            uint64_t v44 = 0;
            while (1)
            {
              uint64_t v45 = (char *)v92 - 32 * v43;
              if ((v42 & 0x40000000) != 0) {
                uint64_t v45 = (char *)*((void *)v92 - 1);
              }
              if (*(void ***)&v45[32 * v44] == v37) {
                break;
              }
              if (++v44 == v43) {
                goto LABEL_123;
              }
            }
            uint64_t v71 = *(void *)&v45[32 * *((unsigned int *)v92 + 15) + 8 * v44];
            uint64_t v72 = *(void *)(v71 + 40);
            if (v72 == v71 + 40)
            {
              uint64_t v75 = 0;
            }
            else
            {
              uint64_t v73 = (llvm::Instruction *)(v72 - 24);
              if (v72) {
                uint64_t v74 = v72 - 24;
              }
              else {
                uint64_t v74 = 0;
              }
              if (*(unsigned __int8 *)(v74 + 16) - 29 >= 0xB) {
                uint64_t v75 = 0;
              }
              else {
                uint64_t v75 = v73;
              }
            }
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v105, v75);
          }
        }
LABEL_123:
        uint64_t v77 = (llvm::Type *)*((void *)v87 + 3);
        __int16 v104 = 257;
        uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)v105, v77, (uint64_t)v87, 0, 0, (uint64_t)&v101);
        uint64_t v79 = *((void *)v89 + 8);
        uint64_t Name = (char *)llvm::Value::getName(v87);
        uint64_t GVBaseType = (llvm::Type *)MTLBoundsCheck::SharedPassData::getGVBaseType(v79, Name, v81);
        __int16 v104 = 257;
        uint64_t ConstGEP1_32 = llvm::IRBuilderBase::CreateConstGEP1_32((llvm::Type **)v105, GVBaseType, AlignedLoad, v88, (const llvm::Twine *)&v101);
        uint64_t v84 = (uint64_t)*v37;
        __int16 v104 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v105, 49, ConstGEP1_32, v84, (uint64_t)&v101);
        llvm::User::replaceUsesOfWith();
        llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)&v108);
        llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v107);
        unint64_t v76 = (char *)v105[0];
        if (v105[0] != v106) {
LABEL_124:
        }
          free(v76);
      }
      if (v39 == 5) {
        uint64_t v46 = (llvm::ConstantExpr *)v38;
      }
      else {
        uint64_t v46 = 0;
      }
      unsigned int v91 = v46;
      if (v46)
      {
        v105[0] = v106;
        v105[1] = (void *)0x400000000;
        llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v105, (uint64_t *)&v91);
        unint64_t v47 = LODWORD(v105[1]);
        if (LODWORD(v105[1]))
        {
          unint64_t v48 = 0;
          do
          {
            uint64_t v49 = *(void *)(*((void *)v105[0] + v48) + 8);
            if (v49)
            {
              do
              {
                long long v50 = *(unsigned char **)(v49 + 24);
                if (v50[16] != 5) {
                  long long v50 = 0;
                }
                char v101 = v50;
                if (v50) {
                  llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v105, (uint64_t *)&v101);
                }
                uint64_t v49 = *(void *)(v49 + 8);
              }
              while (v49);
              unint64_t v47 = LODWORD(v105[1]);
            }
            ++v48;
          }
          while (v47 > v48);
          uint64_t v51 = (char *)v105[0];
          if (v47)
          {
            unsigned int v52 = (char *)v105[0] + 8 * v47;
            do
            {
              BOOL v54 = (llvm::Value *)*((void *)v52 - 1);
              v52 -= 8;
              BOOL v53 = v54;
              v90[0] = *((void *)v54 + 1);
              v90[1] = 0;
              llvm::SmallVector<llvm::User *,4u>::SmallVector<llvm::Value::user_iterator_impl<llvm::User>>(&v101, v90);
              uint64_t v55 = (uint64_t *)v101;
              if (v102)
              {
                uint64_t v56 = (uint64_t *)((char *)v101 + 8 * v102);
                do
                {
                  uint64_t v57 = *v55;
                  v90[0] = 0;
                  AsInstruction = (llvm::Instruction *)llvm::ConstantExpr::getAsInstruction(v91, 0);
                  v90[0] = (uint64_t)AsInstruction;
                  unsigned int v59 = *(unsigned __int8 *)(v57 + 16);
                  if (v59 != 83 || v57 == 0)
                  {
                    if (v59 < 0x1C || v57 == 0)
                    {
                      llvm::Value::dump(v53);
                      llvm::Value::dump((llvm::Value *)v57);
                    }
                    else
                    {
                      llvm::Instruction::insertBefore(AsInstruction, (llvm::Instruction *)v57);
                    }
                  }
                  else
                  {
                    int v62 = *(_DWORD *)(v57 + 20);
                    uint64_t v63 = v62 & 0x7FFFFFF;
                    if ((v62 & 0x7FFFFFF) != 0)
                    {
                      uint64_t v64 = 0;
                      while (1)
                      {
                        uint64_t v65 = v57 - 32 * v63;
                        if ((v62 & 0x40000000) != 0) {
                          uint64_t v65 = *(void *)(v57 - 8);
                        }
                        if (*(llvm::Value **)(v65 + 32 * v64) == v53) {
                          break;
                        }
                        if (++v64 == v63) {
                          goto LABEL_102;
                        }
                      }
                      uint64_t v66 = *(void *)(v65 + 32 * *(unsigned int *)(v57 + 60) + 8 * v64);
                      uint64_t v67 = *(void *)(v66 + 40);
                      if (v67 == v66 + 40)
                      {
                        uint64_t v70 = 0;
                      }
                      else
                      {
                        int v68 = (llvm::Instruction *)(v67 - 24);
                        if (v67) {
                          uint64_t v69 = v67 - 24;
                        }
                        else {
                          uint64_t v69 = 0;
                        }
                        if (*(unsigned __int8 *)(v69 + 16) - 29 >= 0xB) {
                          uint64_t v70 = 0;
                        }
                        else {
                          uint64_t v70 = v68;
                        }
                      }
                      llvm::Instruction::insertBefore(AsInstruction, v70);
                      llvm::PHINode::setIncomingValue(v57, v64, v90[0]);
                    }
                  }
LABEL_102:
                  llvm::User::replaceUsesOfWith();
                  if (v53 == v91) {
                    llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v109, v90);
                  }
                  ++v55;
                }
                while (v55 != v56);
                uint64_t v55 = (uint64_t *)v101;
              }
              if (v55 != &v103) {
                free(v55);
              }
            }
            while (v52 != v51);
            uint64_t v51 = (char *)v105[0];
          }
        }
        else
        {
          uint64_t v51 = (char *)v105[0];
        }
        if (v51 != (char *)v106)
        {
          unint64_t v76 = v51;
          goto LABEL_124;
        }
      }
      else
      {
        llvm::Value::dump((llvm::Value *)v38);
      }
    }
  }
  if (v98)
  {
    llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap(v97);
    char v98 = 0;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::~DenseMap((unsigned int *)&v94);
  uint64_t v33 = 1;
LABEL_131:
  if ((void *)v112 != v113) {
    free((void *)v112);
  }
  llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::~DenseMap((uint64_t)v99);
  return v33;
}

void sub_25575E1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unsigned int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  if (a32)
  {
    llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>::~DenseMap(a9);
    a32 = 0;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::~DenseMap(&a26);
  uint64_t v45 = *(void **)(v43 - 192);
  if (v45 != a10) {
    free(v45);
  }
  llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::~DenseMap((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t ConstantGlobalToArgPass::shouldConvertGlobal(ConstantGlobalToArgPass *this, llvm::GlobalVariable *a2)
{
  if ((*((unsigned char *)a2 + 33) & 0x1C) != 0
    || (*((unsigned char *)a2 + 80) & 1) == 0 && (llvm::GlobalValue::isDeclaration(a2) & 1) != 0
    || (llvm::GlobalValue::isDeclaration(a2) & 1) != 0)
  {
    return 0;
  }
  uint64_t result = llvm::Value::hasNUsesOrMore(a2);
  if (!result) {
    return result;
  }
  if ((*((unsigned char *)a2 + 80) & 2) != 0) {
    return 0;
  }
  uint64_t result = ConstantGlobalToArgPass::shouldConvertType(this, *(llvm::Type **)a2);
  if (result)
  {
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0
      || (unint64_t v5 = (void *)llvm::Value::getName(a2), v6 < 0x13)
      || (*v5 == 0x61735F7269615F5FLL ? (BOOL v7 = v5[1] == 0x74735F72656C706DLL) : (BOOL v7 = 0),
          v7 ? (BOOL v8 = *(void *)((char *)v5 + 11) == 0x65746174735F7265) : (BOOL v8 = 0),
          !v8))
    {
      uint64_t v9 = *((void *)a2 + 1);
      if (!v9) {
        return 1;
      }
      while (1)
      {
        uint64_t v10 = *(uint64_t **)(v9 + 24);
        if (v10 && *((unsigned char *)v10 + 16) == 5 && *((_WORD *)v10 + 9) == 49)
        {
          uint64_t v12 = *v10;
          if (*(unsigned char *)(v12 + 8) == 15)
          {
            uint64_t v13 = **(void **)(v12 + 16);
            if (*(unsigned char *)(v13 + 8) == 16)
            {
              if (*(void *)(v13 + 24))
              {
                uint64_t Name = llvm::StructType::getName((llvm::StructType *)v13);
                if (v15 >= 0x11)
                {
                  BOOL v16 = *(void *)Name == 0x5F2E746375727473 && *(void *)(Name + 8) == 0x5F72656C706D6173;
                  if (v16 && *(unsigned char *)(Name + 16) == 116) {
                    break;
                  }
                }
              }
            }
          }
        }
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t result = 1;
        if (!v9) {
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<MTLBoundsCheck::ConstantDataHeader>::emplace_back<MTLBoundsCheck::ConstantDataHeader&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back(a1, *a2);
    unsigned int v4 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(void *)(*(void *)a1 + 8 * v3) = *a2;
    unsigned int v4 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v4;
  }
  return *(void *)a1 + 8 * v4 - 8;
}

void *llvm::ValueMap<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>::operator[](uint64_t *a1, llvm::Value **a2)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v5, *a2);
  unint64_t v5 = &unk_2704543F8;
  v6[3] = a1;
  uint64_t v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::FindAndConstruct(a1, (uint64_t)&v5)+ 5;
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
  return v3;
}

void sub_25575E548(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t ConstantGlobalToArgPass::serializeConstantValue(llvm::DataLayout **this, llvm::Type **a2, unint64_t a3)
{
  unint64_t TypeAllocSize = llvm::DataLayout::getTypeAllocSize(this[7], *a2);
  BOOL v40 = v6;
  uint64_t v7 = llvm::TypeSize::operator unsigned long long();
  int v8 = *((unsigned __int8 *)a2 + 16);
  if ((v8 & 0xFE) == 0xE)
  {
    uint64_t RawDataValues = llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)a2);
    size_t v11 = v10;
    uint64_t v12 = (void *)(*(void *)(*((void *)this[8] + 8) + 608) + a3);
    p_srCC_SHA256_CTX c = (uint64_t ***)RawDataValues;
    size_t v14 = v11;
LABEL_11:
    memcpy(v12, p_src, v14);
    return v7;
  }
  if (v8 == 17)
  {
    unint64_t TypeAllocSize = (llvm::DataLayout::getTypeSizeInBits(this[7], *a2) + 7) >> 3;
    BOOL v40 = v17 == 1;
    llvm::APFloat::bitcastToAPInt((uint64_t *)&v36, (llvm::APFloat *)(a2 + 3));
    Limiteduint64_t Value = llvm::APInt::getLimitedValue(&v36, 0xFFFFFFFFFFFFFFFFLL);
    if (v37 >= 0x41 && v36) {
      MEMORY[0x25A28E230](v36, 0x1000C8000313F17);
    }
    __srCC_SHA256_CTX c = LimitedValue;
    BOOL v16 = (void *)(*(void *)(*((void *)this[8] + 8) + 608) + a3);
    size_t v14 = llvm::TypeSize::operator unsigned long long();
    p_srCC_SHA256_CTX c = (uint64_t ***)&__src;
    goto LABEL_10;
  }
  if (v8 == 16)
  {
    unint64_t TypeAllocSize = (llvm::DataLayout::getTypeSizeInBits(this[7], *a2) + 7) >> 3;
    BOOL v40 = v15 == 1;
    int64x2_t v36 = (uint64_t **)llvm::APInt::getLimitedValue((uint64_t ***)a2 + 3, 0xFFFFFFFFFFFFFFFFLL);
    BOOL v16 = (void *)(*(void *)(*((void *)this[8] + 8) + 608) + a3);
    size_t v14 = llvm::TypeSize::operator unsigned long long();
    p_srCC_SHA256_CTX c = &v36;
LABEL_10:
    uint64_t v12 = v16;
    goto LABEL_11;
  }
  if ((v8 - 11) <= 2)
  {
    unint64_t TypeAllocSize = (llvm::DataLayout::getTypeSizeInBits(this[7], *a2) + 7) >> 3;
    BOOL v40 = v20 == 1;
    unint64_t v21 = (void *)(*(void *)(*((void *)this[8] + 8) + 608) + a3);
    size_t v22 = llvm::TypeSize::operator unsigned long long();
    bzero(v21, v22);
    return v7;
  }
  if (v8 != 9)
  {
    if ((v8 - 11) < 0xFDu)
    {
      llvm::Value::dump((llvm::Value *)a2);
      return v7;
    }
    uint64_t v30 = *a2;
    int v31 = *((unsigned __int8 *)*a2 + 8);
    if (v31 == 16)
    {
      unsigned int v32 = *((_DWORD *)v30 + 3);
    }
    else
    {
      if (v31 != 17 && v31 != 18)
      {
        uint64_t v33 = 1;
LABEL_30:
        for (uint64_t i = 0; i != v33; ++i)
        {
          Aggregateuint64_t Element = (llvm::Constant *)llvm::Constant::getAggregateElement((llvm::Constant *)a2);
          a3 += ConstantGlobalToArgPass::serializeConstantValue((ConstantGlobalToArgPass *)this, AggregateElement, a3);
        }
        return v7;
      }
      unsigned int v32 = *((_DWORD *)v30 + 8);
    }
    if (!v32) {
      return v7;
    }
    uint64_t v33 = v32;
    goto LABEL_30;
  }
  unsigned int v23 = *a2;
  uint64_t StructLayout = llvm::DataLayout::getStructLayout();
  uint64_t v25 = *((unsigned int *)v23 + 3);
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = StructLayout + 16;
    do
    {
      uint64_t v28 = *(void *)(v27 + 8 * v26);
      uint64_t v29 = (llvm::Constant *)llvm::Constant::getAggregateElement((llvm::Constant *)a2);
      ConstantGlobalToArgPass::serializeConstantValue((ConstantGlobalToArgPass *)this, v29, v28 + a3);
      ++v26;
    }
    while (v25 != v26);
  }
  return v7;
}

void sub_25575E828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int a11)
{
  if (a11 >= 0x41) {
    ConstantGlobalToArgPass::serializeConstantValue(&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::IRBuilderBase::CreateConstGEP1_32(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unsigned int a4, const llvm::Twine *a5)
{
  llvm::Type::getInt32Ty(this[8], a2);
  size_t v11 = (uint64_t *)llvm::ConstantInt::get();
  uint64_t result = (*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, void))(*(void *)this[9] + 48))(this[9], a2, a3, &v11, 1, 0);
  if (!result)
  {
    uint64_t v10 = llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, &v11, 1);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v10, (uint64_t)a5);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)a2, &v10);
  uint64_t v7 = v10;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(a1, (uint64_t)a2, (uint64_t)a2, v10);
    uint64_t v7 = (void *)result;
    *(_OWORD *)uint64_t result = *a2;
    char v8 = 1;
  }
  uint64_t v9 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    int v7 = v4 - 1;
    unsigned int v8 = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue() & (v4 - 1);
    uint64_t v9 = v6 + 16 * v8;
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(void *)(a2 + 8), *(void **)v9, *(void *)(v9 + 8)))
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v11 = 0;
      int v12 = 1;
      while (*(void *)v9 != -1)
      {
        if (v11) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = *(void *)v9 == -2;
        }
        if (v13) {
          uint64_t v11 = v9;
        }
        uint64_t v17 = v11;
        int v14 = v12 + 1;
        unsigned int v8 = (v8 + v12) & v7;
        uint64_t v9 = v6 + 16 * v8;
        BOOL isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(void *)(a2 + 8), *(void **)v9, *(void *)(v9 + 8));
        uint64_t v11 = v17;
        BOOL v16 = isEqual;
        uint64_t result = 1;
        int v12 = v14;
        if (v16) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v11) {
        uint64_t v9 = v11;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

BOOL llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(char *a1, size_t __n, void *__s2, uint64_t a4)
{
  if (__s2 == (void *)-2) {
    return a1 + 2 == 0;
  }
  if (__s2 == (void *)-1) {
    return a1 + 1 == 0;
  }
  if (__n != a4) {
    return 0;
  }
  if (__n) {
    return memcmp(a1, __s2, __n) == 0;
  }
  return 1;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (_OWORD *)MEMORY[0x25A28D370](16 * v8, 8);
  *(void *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::moveFromOldBuckets(a1, v4, (_OWORD *)v4 + v3);
    return (_OWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *result++ = xmmword_2557AA110;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::moveFromOldBuckets(uint64_t result, _OWORD *a2, _OWORD *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *v7++ = xmmword_2557AA110;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(void *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v9 = 0;
      uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v5, (uint64_t)a2, &v9);
      _OWORD *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t ConstantGlobalToArgPass::shouldConvertType(ConstantGlobalToArgPass *this, llvm::Type *a2)
{
  while (1)
  {
    int v4 = *((_DWORD *)a2 + 2);
    if (v4 != 15) {
      break;
    }
    if ((v4 & 0xFE) == 0x12) {
      int v4 = *(_DWORD *)(**((void **)a2 + 2) + 8);
    }
    if ((v4 & 0xFFFFFF00) != 0x200) {
      return 0;
    }
LABEL_7:
    a2 = (llvm::Type *)**((void **)a2 + 2);
  }
  if (v4 == 17) {
    goto LABEL_7;
  }
  if (v4 != 16) {
    return 1;
  }
  if (*((void *)a2 + 3))
  {
    uint64_t Name = (void *)llvm::StructType::getName(a2);
    if (v6 >= 0x15)
    {
      BOOL v7 = *Name == 0x6D2E746375727473 && Name[1] == 0x61733A3A6C617465;
      if (v7 && *(void *)((char *)Name + 13) == 0x72656C706D61733ALL) {
        return 0;
      }
    }
  }
  if (!*((_DWORD *)a2 + 3)) {
    return 1;
  }
  unint64_t v9 = 0;
  do
  {
    uint64_t result = ConstantGlobalToArgPass::shouldConvertType(this, *(llvm::Type **)(*((void *)a2 + 2) + 8 * v9));
    if ((result & 1) == 0) {
      break;
    }
    ++v9;
  }
  while (v9 < *((unsigned int *)a2 + 3));
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty(uint64_t *a1)
{
  a1[1] = 0;
  v7[0] = 2;
  v7[1] = 0;
  _DWORD v7[2] = -4096;
  uint64_t v8 = 0;
  unsigned int v1 = *((_DWORD *)a1 + 4);
  if (v1)
  {
    uint64_t v2 = *a1;
    uint64_t v3 = *a1 + 48 * v1;
    int v4 = (llvm::ValueHandleBase *)(*a1 + 8);
    do
    {
      uint64_t v5 = llvm::ValueHandleBase::ValueHandleBase(v4, (LODWORD(v7[0]) >> 1) & 3, v7);
      unint64_t v6 = (char *)v5 - 8;
      *((void *)v5 - 1) = &unk_2704543F8;
      *((void *)v5 + 3) = v8;
      int v4 = (llvm::ValueHandleBase *)((char *)v5 + 48);
      v2 += 48;
    }
    while (v6 + 48 != (char *)v3);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v7);
}

void sub_25575EF2C(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v4, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = &unk_2704543F8;
  v4[3] = v2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::erase(v2, (uint64_t)&v3);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v4);
}

void sub_25575EFC0(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v10, (*(_DWORD *)(a1 + 8) >> 1) & 3, (void *)(a1 + 8));
  int v4 = *(int32x2_t **)(v3 + 24);
  unint64_t v9 = &unk_2704543F8;
  uint64_t v11 = v4;
  v7[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>((uint64_t *)v4, (uint64_t)&v9, v7))uint64_t v5 = v7[0]; {
  else
  }
    uint64_t v5 = *(void *)v4 + 48 * v4[2].u32[0];
  if (*(void *)v11 + 48 * v11[2].u32[0] != v5)
  {
    uint64_t v6 = *(unsigned int *)(v5 + 40);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::erase(v11, v5);
    v8[0] = a2;
    v8[1] = v6;
    llvm::ValueMap<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>::insert((uint64_t)v11, (uint64_t)v8, (uint64_t)v7);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v10);
}

void sub_25575F0B4(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a2, &v6);
  if (v3)
  {
    int v4 = v6;
    v7[0] = 2;
    v7[1] = 0;
    _DWORD v7[2] = -8192;
    uint64_t v8 = 0;
    uint64_t v6 = &unk_2704543F8;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v7);
    void v4[4] = v8;
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v7);
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

void sub_25575F188(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    v17[0] = 2;
    v17[1] = 0;
    v17[2] = -4096;
    v17[3] = 0;
    void v16[3] = 0;
    void v16[4] = &unk_2704543F8;
    v16[0] = 2;
    v16[1] = 0;
    _DWORD v16[2] = -8192;
    uint64_t v5 = *(void *)(a2 + 24);
    int v6 = v3 - 1;
    unsigned int v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v3 - 1);
    uint64_t v8 = v4 + 48 * v7;
    uint64_t v9 = *(void *)(v8 + 24);
    if (v5 == v9)
    {
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      uint64_t v10 = 1;
      while (v9 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v9 == -8192;
        }
        if (v14) {
          uint64_t v12 = v8;
        }
        unsigned int v15 = v7 + v13++;
        unsigned int v7 = v15 & v6;
        uint64_t v8 = v4 + 48 * (v15 & v6);
        uint64_t v9 = *(void *)(v8 + 24);
        if (v5 == v9) {
          goto LABEL_4;
        }
      }
      uint64_t v10 = 0;
      if (v12) {
        uint64_t v8 = v12;
      }
    }
LABEL_4:
    *a3 = v8;
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v16);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v17);
  }
  else
  {
    uint64_t v10 = 0;
    *a3 = 0;
  }
  return v10;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::erase(int32x2_t *a1, uint64_t a2)
{
  v5[0] = 2;
  v5[1] = 0;
  v5[2] = -8192;
  uint64_t v6 = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 8), v5);
  *(void *)(a2 + 32) = v6;
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v5);
  int32x2_t result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

void sub_25575F364(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

double llvm::ValueMap<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>::insert@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, *(llvm::Value **)a2);
  unsigned int v7 = &unk_2704543F8;
  uint64_t v9 = a1;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, (LODWORD(v8[0]) >> 1) & 3, v8);
  uint64_t v10 = &unk_2704543F8;
  void v11[3] = v9;
  int v12 = *(_DWORD *)(a2 + 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::try_emplace<unsigned int>(a1, (uint64_t)&v10, &v12, (uint64_t)&v13);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v8);
  double result = *(double *)&v13;
  *(_OWORD *)a3 = v13;
  *(unsigned char *)(a3 + 16) = v14;
  return result;
}

void sub_25575F468(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v2);
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void llvm::DenseMapIterator<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>,false>::AdvancePastEmptyBuckets(uint64_t *a1)
{
  v4[0] = 2;
  v4[1] = 0;
  v4[2] = -4096;
  v4[3] = 0;
  v3[3] = 0;
  v3[4] = &unk_2704543F8;
  v3[0] = 2;
  v3[1] = 0;
  v3[2] = -8192;
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  while (v2 != v1 && (*(void *)(v2 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    v2 += 48;
    *a1 = v2;
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v3);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::try_emplace<unsigned int>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v12 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a2, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>(a1, a2, a2, v12);
    uint64_t result = llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v9 + 1), (void *)(a2 + 8));
    void v9[4] = *(void *)(a2 + 32);
    *((_DWORD *)v9 + 10) = *a3;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 48 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::grow(a1, v7);
  char v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  v11[0] = 2;
  v11[1] = 0;
  void v11[2] = -4096;
  void v11[3] = 0;
  char v10 = &unk_2704543F8;
  if (a4[3] != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v11);
  return a4;
}

void llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    uint64_t v8 = (v7 + 1);
  }
  else {
    uint64_t v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = MEMORY[0x25A28D370]((void *)v8, 48 * v8, 8);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::moveFromOldBuckets(a1, (uint64_t)v4, (uint64_t)v4 + 48 * v3);
    llvm::deallocate_buffer(v4, (void *)(48 * v3));
  }
  else
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty((uint64_t *)a1);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty((uint64_t *)a1);
  v13[0] = 2;
  v13[1] = 0;
  uint64_t v14 = -4096;
  uint64_t v15 = 0;
  uint64_t v11 = 0;
  int v12 = &unk_2704543F8;
  v9[0] = 2;
  v9[1] = 0;
  uint64_t v10 = -8192;
  while (a2 != a3)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    if (v6 != v14 && v6 != v10)
    {
      uint64_t v16 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>((uint64_t *)a1, a2, &v16);
      uint64_t v8 = v16;
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v16 + 8), (void *)(a2 + 8));
      *(void *)(v8 + 32) = *(void *)(a2 + 32);
      *(_DWORD *)(v8 + 40) = *(_DWORD *)(a2 + 40);
      ++*(_DWORD *)(a1 + 8);
    }
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)(a2 + 8));
    a2 += 48;
  }
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v9);
  llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v13);
}

void sub_25575F8E8(_Unwind_Exception *a1)
{
  llvm::ValueHandleBase::~ValueHandleBase(v2);
  llvm::ValueHandleBase::~ValueHandleBase(v1);
  _Unwind_Resume(a1);
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::FindAndConstruct(uint64_t *a1, uint64_t a2)
{
  int v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>(a1, a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>>((uint64_t)a1, a2, a2, v7);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v5 + 1), (void *)(a2 + 8));
    _DWORD v5[4] = *(void *)(a2 + 32);
    *((_DWORD *)v5 + 10) = 0;
  }
  return v5;
}

void llvm::SmallVectorImpl<unsigned char>::resizeImpl<false>(void *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (a1[2] < a2) {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
      }
      if (a2 != v2) {
        bzero((void *)(*a1 + v2), a2 - v2);
      }
    }
    a1[1] = a2;
  }
}

uint64_t llvm::APFloat::bitcastToAPInt(llvm::APFloat *this)
{
  uint64_t v1 = (char *)this + 8;
  uint64_t v2 = *((void *)this + 1);
  if (llvm::APFloatBase::PPCDoubleDouble(this) == v2)
  {
    return MEMORY[0x270F95CB0](v1);
  }
  else
  {
    return MEMORY[0x270F95CD8](v1);
  }
}

uint64_t *llvm::APInt::getLimitedValue(uint64_t ***this, unint64_t a2)
{
  unsigned int v4 = *((_DWORD *)this + 2);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) > 0x40) {
      return (uint64_t *)a2;
    }
    unint64_t v5 = **this;
  }
  else
  {
    unint64_t v5 = (uint64_t *)*this;
  }
  if ((unint64_t)v5 <= a2) {
    return v5;
  }
  return (uint64_t *)a2;
}

unsigned int *llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::~DenseMap(unsigned int *a1)
{
  return a1;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GlobalVariable *,unsigned int,llvm::ValueMapConfig<llvm::GlobalVariable *,llvm::sys::SmartMutex<false>>>,unsigned int>>::destroyAll(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    v6[0] = 2;
    v6[1] = 0;
    void v6[2] = -4096;
    v6[3] = 0;
    void v5[3] = 0;
    _DWORD v5[4] = &unk_2704543F8;
    v5[0] = 2;
    v5[1] = 0;
    v5[2] = -8192;
    uint64_t v2 = 48 * v1;
    uint64_t v3 = (llvm::ValueHandleBase *)(*(void *)a1 + 8);
    do
    {
      llvm::ValueHandleBase::~ValueHandleBase(v3);
      uint64_t v3 = (llvm::ValueHandleBase *)(v4 + 48);
      v2 -= 48;
    }
    while (v2);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v5);
    llvm::ValueHandleBase::~ValueHandleBase((llvm::ValueHandleBase *)v6);
  }
}

uint64_t llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::~DenseMap(uint64_t a1)
{
  return a1;
}

uint64_t AirReflection::LocalAllocation::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.LocalAllocation", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int v10 = v7;
  return CC_SHA256_Update(c, &v10, 4u);
}

uint64_t AirReflection::Node::node_as_KernelFunction(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 2) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t AirReflection::KernelFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.KernelFunction", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    int v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    long long v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    int data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v13;
    if (v14)
    {
      uint64_t v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0)
  {
    size_t v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    int data = *v19;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v20 = *v19;
    if (v20)
    {
      unint64_t v21 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v22 = *v21++;
        int data = v22;
        CC_SHA256_Update(c, &data, 4u);
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  unsigned int v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0xBu && (unsigned __int16 v24 = v23[5]) != 0)
  {
    uint64_t v25 = v24;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v25);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 >= 0xDu && (unsigned __int16 v27 = v26[6]) != 0)
  {
    uint64_t v28 = v27;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v28);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 >= 0xFu && (unsigned __int16 v30 = v29[7]) != 0)
  {
    uint64_t v31 = v30;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v31);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  unsigned int v32 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v32 >= 0x11u && (unsigned __int16 v33 = v32[8]) != 0)
  {
    uint64_t v34 = v33;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v34);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_VisibleFunction(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t AirReflection::VisibleFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.VisibleFunction", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    int v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u)
  {
    uint64_t v12 = v11[3];
    if (v12) {
      return AirReflection::StitchingInfo::HashImpl((int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12)), c);
    }
  }
  int v15 = 0;
  return CC_SHA256_Update(c, &v15, 4u);
}

uint64_t AirReflection::Node::node_as_IntersectionFunction(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 5) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t AirReflection::IntersectionFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.IntersectionFunction", 0x22u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    int v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    long long v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    int data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v13;
    if (v14)
    {
      int v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0)
  {
    size_t v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    int data = *v19;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v20 = *v19;
    if (v20)
    {
      unint64_t v21 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v22 = *v21++;
        int data = v22;
        CC_SHA256_Update(c, &data, 4u);
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  unsigned int v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 < 0xBu)
  {
    LODWORD(v24) = 0;
  }
  else
  {
    uint64_t v24 = v23[5];
    if (v24) {
      LODWORD(v24) = *((unsigned __int8 *)a1 + v24);
    }
  }
  int data = v24;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v25 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v25 < 0xDu)
  {
    LOBYTE(v26) = 0;
  }
  else
  {
    uint64_t v26 = v25[6];
    if (v26) {
      LOBYTE(v26) = *((unsigned char *)a1 + v26) != 0;
    }
  }
  LOBYTE(data) = v26;
  CC_SHA256_Update(c, &data, 1u);
  unsigned __int16 v27 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v27 < 0xFu)
  {
    LOBYTE(v28) = 0;
  }
  else
  {
    uint64_t v28 = v27[7];
    if (v28) {
      LOBYTE(v28) = *((unsigned char *)a1 + v28) != 0;
    }
  }
  LOBYTE(data) = v28;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 < 0x11u)
  {
    LOBYTE(v30) = 0;
  }
  else
  {
    uint64_t v30 = v29[8];
    if (v30) {
      LOBYTE(v30) = *((unsigned char *)a1 + v30) != 0;
    }
  }
  LOBYTE(data) = v30;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 < 0x13u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    uint64_t v32 = v31[9];
    if (v32) {
      LOBYTE(v32) = *((unsigned char *)a1 + v32) != 0;
    }
  }
  LOBYTE(data) = v32;
  CC_SHA256_Update(c, &data, 1u);
  unsigned __int16 v33 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v33 < 0x15u)
  {
    LOBYTE(v34) = 0;
  }
  else
  {
    uint64_t v34 = v33[10];
    if (v34) {
      LOBYTE(v34) = *((unsigned char *)a1 + v34) != 0;
    }
  }
  LOBYTE(data) = v34;
  CC_SHA256_Update(c, &data, 1u);
  unsigned int v35 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v35 < 0x17u)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    uint64_t v36 = v35[11];
    if (v36) {
      LOBYTE(v36) = *((unsigned char *)a1 + v36) != 0;
    }
  }
  LOBYTE(data) = v36;
  CC_SHA256_Update(c, &data, 1u);
  unsigned int v37 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v37 < 0x19u)
  {
    LOBYTE(v38) = 0;
  }
  else
  {
    uint64_t v38 = v37[12];
    if (v38) {
      LOBYTE(v38) = *((unsigned char *)a1 + v38) != 0;
    }
  }
  LOBYTE(data) = v38;
  CC_SHA256_Update(c, &data, 1u);
  unsigned int v39 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v39 < 0x1Bu)
  {
    LODWORD(v40) = 0;
  }
  else
  {
    uint64_t v40 = v39[13];
    if (v40) {
      LODWORD(v40) = *(int *)((char *)a1 + v40);
    }
  }
  int data = v40;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshFunction(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 6) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t AirReflection::MeshFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshFunction", 0x1Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    int v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    long long v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    int data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v13;
    if (v14)
    {
      int v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0)
  {
    size_t v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    int data = *v19;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v20 = *v19;
    if (v20)
    {
      unint64_t v21 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v22 = *v21++;
        int data = v22;
        CC_SHA256_Update(c, &data, 4u);
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  unsigned int v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0xBu && (unsigned __int16 v24 = v23[5]) != 0)
  {
    uint64_t v25 = v24;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v25);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_ObjectFunction(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 7) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0)) {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else {
    return 0;
  }
}

uint64_t AirReflection::ObjectFunction::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ObjectFunction", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    int v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    long long v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    int data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v13;
    if (v14)
    {
      int v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0)
  {
    size_t v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    int data = *v19;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v20 = *v19;
    if (v20)
    {
      unint64_t v21 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v22 = *v21++;
        int data = v22;
        CC_SHA256_Update(c, &data, 4u);
        --v20;
      }
      while (v20);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  unsigned int v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0xBu && (unsigned __int16 v24 = v23[5]) != 0)
  {
    uint64_t v25 = v24;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v25);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 >= 0xDu && (unsigned __int16 v27 = v26[6]) != 0)
  {
    uint64_t v28 = v27;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v28);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_VecTypeHintFnAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 4096)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::VecTypeHintFnAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.VecTypeHintFnAttr", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    CC_LONG v8 = *(unsigned int *)((char *)v6 + v7);
    return CC_SHA256_Update(c, (char *)v6 + v7 + 4, v8);
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
}

uint64_t AirReflection::Node::node_as_WorkgroupSizeFnAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4097) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::WorkgroupSizeFnAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.WorkgroupSizeFnAttr", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    uint64_t v6 = v5;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v6);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (unsigned __int16 v8 = v7[3]) != 0)
  {
    uint64_t v9 = v8;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v9);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  int v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (unsigned __int16 v11 = v10[4]) != 0)
  {
    uint64_t v12 = v11;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v12);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_WorkgroupSizeHintFnAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4098) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::WorkgroupSizeHintFnAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.WorkgroupSizeHintFnAttr", 0x25u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    uint64_t v6 = v5;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v6);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (unsigned __int16 v8 = v7[3]) != 0)
  {
    uint64_t v9 = v8;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v9);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  int v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (unsigned __int16 v11 = v10[4]) != 0)
  {
    uint64_t v12 = v11;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v12);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_WorkgroupMaxSizeFnAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4099) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::WorkgroupMaxSizeFnAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.WorkgroupMaxSizeFnAttr", 0x24u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    uint64_t v6 = v5;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int v9 = *(int *)((char *)a1 + v6);
    p_int data = &v9;
  }
  else
  {
    int data = 0;
    p_int data = &data;
  }
  return CC_SHA256_Update(c, p_data, 4u);
}

uint64_t AirReflection::Node::node_as_PatchFnAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4100) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PatchFnAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PatchFnAttr", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *((unsigned __int8 *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int v12 = *(int *)((char *)a1 + v8);
    int v9 = &v12;
  }
  else
  {
    int v13 = 0;
    int v9 = &v13;
  }
  return CC_SHA256_Update(c, v9, 4u);
}

uint64_t AirReflection::Node::node_as_MaxMeshWorkgroupsFnAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 4101) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MaxMeshWorkgroupsFnAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MaxMeshWorkgroupsFnAttr", 0x25u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    uint64_t v6 = v5;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int v9 = *(int *)((char *)a1 + v6);
    p_int data = &v9;
  }
  else
  {
    int data = 0;
    p_int data = &data;
  }
  return CC_SHA256_Update(c, p_data, 4u);
}

uint64_t AirReflection::Node::node_as_ClipDistanceRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 0x20000)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::ClipDistanceRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ClipDistanceRet", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  int v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 < 9u)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    uint64_t v10 = v9[4];
    if (v10) {
      LOBYTE(v10) = *((unsigned char *)a1 + v10) != 0;
    }
  }
  LOBYTE(data) = v10;
  CC_SHA256_Update(c, &data, 1u);
  unsigned __int16 v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 0xBu && (uint64_t v12 = v11[5]) != 0)
  {
    int v13 = (unsigned int *)((char *)a1 + v12);
    uint64_t v14 = *v13;
    p_int data = (int *)((char *)v13 + v14 + 4);
    CC_LONG v16 = *(unsigned int *)((char *)v13 + v14);
    uint64_t v17 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v17 = c;
    CC_LONG v16 = 4;
  }
  CC_SHA256_Update(v17, p_data, v16);
  uint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 >= 0xDu && (uint64_t v19 = v18[6]) != 0)
  {
    uint64_t v20 = (unsigned int *)((char *)a1 + v19);
    uint64_t v21 = *v20;
    int v22 = (int *)((char *)v20 + v21 + 4);
    CC_LONG v23 = *(unsigned int *)((char *)v20 + v21);
    unsigned __int16 v24 = c;
  }
  else
  {
    int data = 0;
    int v22 = &data;
    unsigned __int16 v24 = c;
    CC_LONG v23 = 4;
  }
  return CC_SHA256_Update(v24, v22, v23);
}

uint64_t AirReflection::Node::node_as_PointSizeRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131073) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PointSizeRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PointSizeRet", 0x1Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LOBYTE(v7) = *((unsigned char *)a1 + v7) != 0;
    }
  }
  char v24 = v7;
  CC_SHA256_Update(c, &v24, 1u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9);
    uint64_t v11 = *v10;
    uint64_t v12 = (int *)((char *)v10 + v11 + 4);
    CC_LONG v13 = *(unsigned int *)((char *)v10 + v11);
    uint64_t v14 = c;
  }
  else
  {
    int v25 = 0;
    uint64_t v12 = &v25;
    uint64_t v14 = c;
    CC_LONG v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (uint64_t v16 = v15[5]) != 0)
  {
    uint64_t v17 = (unsigned int *)((char *)a1 + v16);
    uint64_t v18 = *v17;
    uint64_t v19 = (int *)((char *)v17 + v18 + 4);
    CC_LONG v20 = *(unsigned int *)((char *)v17 + v18);
    uint64_t v21 = c;
  }
  else
  {
    int v26 = 0;
    uint64_t v19 = &v26;
    uint64_t v21 = c;
    CC_LONG v20 = 4;
  }
  return CC_SHA256_Update(v21, v19, v20);
}

uint64_t AirReflection::Node::node_as_RenderTargetArrayIndexRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131075) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RenderTargetArrayIndexRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RenderTargetArrayIndexRet", 0x27u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LOBYTE(v7) = *((unsigned char *)a1 + v7) != 0;
    }
  }
  char v24 = v7;
  CC_SHA256_Update(c, &v24, 1u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9);
    uint64_t v11 = *v10;
    uint64_t v12 = (int *)((char *)v10 + v11 + 4);
    CC_LONG v13 = *(unsigned int *)((char *)v10 + v11);
    uint64_t v14 = c;
  }
  else
  {
    int v25 = 0;
    uint64_t v12 = &v25;
    uint64_t v14 = c;
    CC_LONG v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (uint64_t v16 = v15[5]) != 0)
  {
    uint64_t v17 = (unsigned int *)((char *)a1 + v16);
    uint64_t v18 = *v17;
    uint64_t v19 = (int *)((char *)v17 + v18 + 4);
    CC_LONG v20 = *(unsigned int *)((char *)v17 + v18);
    uint64_t v21 = c;
  }
  else
  {
    int v26 = 0;
    uint64_t v19 = &v26;
    uint64_t v21 = c;
    CC_LONG v20 = 4;
  }
  return CC_SHA256_Update(v21, v19, v20);
}

uint64_t AirReflection::Node::node_as_ViewportArrayIndexRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 131077) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ViewportArrayIndexRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ViewportArrayIndexRet", 0x23u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LOBYTE(v7) = *((unsigned char *)a1 + v7) != 0;
    }
  }
  char v24 = v7;
  CC_SHA256_Update(c, &v24, 1u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9);
    uint64_t v11 = *v10;
    uint64_t v12 = (int *)((char *)v10 + v11 + 4);
    CC_LONG v13 = *(unsigned int *)((char *)v10 + v11);
    uint64_t v14 = c;
  }
  else
  {
    int v25 = 0;
    uint64_t v12 = &v25;
    uint64_t v14 = c;
    CC_LONG v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (uint64_t v16 = v15[5]) != 0)
  {
    uint64_t v17 = (unsigned int *)((char *)a1 + v16);
    uint64_t v18 = *v17;
    uint64_t v19 = (int *)((char *)v17 + v18 + 4);
    CC_LONG v20 = *(unsigned int *)((char *)v17 + v18);
    uint64_t v21 = c;
  }
  else
  {
    int v26 = 0;
    uint64_t v19 = &v26;
    uint64_t v21 = c;
    CC_LONG v20 = 4;
  }
  return CC_SHA256_Update(v21, v19, v20);
}

uint64_t AirReflection::Node::node_as_DepthRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135169) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DepthRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.DepthRet", 0x16u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *((unsigned __int8 *)a1 + v7);
    }
  }
  int v24 = v7;
  CC_SHA256_Update(c, &v24, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9);
    uint64_t v11 = *v10;
    uint64_t v12 = (int *)((char *)v10 + v11 + 4);
    CC_LONG v13 = *(unsigned int *)((char *)v10 + v11);
    uint64_t v14 = c;
  }
  else
  {
    int v25 = 0;
    uint64_t v12 = &v25;
    uint64_t v14 = c;
    CC_LONG v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (uint64_t v16 = v15[5]) != 0)
  {
    uint64_t v17 = (unsigned int *)((char *)a1 + v16);
    uint64_t v18 = *v17;
    uint64_t v19 = (int *)((char *)v17 + v18 + 4);
    CC_LONG v20 = *(unsigned int *)((char *)v17 + v18);
    uint64_t v21 = c;
  }
  else
  {
    int v26 = 0;
    uint64_t v19 = &v26;
    uint64_t v21 = c;
    CC_LONG v20 = 4;
  }
  return CC_SHA256_Update(v21, v19, v20);
}

uint64_t AirReflection::Node::node_as_StencilRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135170) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StencilRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.StencilRet", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    uint64_t v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v22 = 0;
    uint64_t v10 = &v22;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  CC_LONG v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    int v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v23 = 0;
    uint64_t v17 = &v23;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  return CC_SHA256_Update(v19, v17, v18);
}

uint64_t AirReflection::Node::node_as_SampleMaskRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135171) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SampleMaskRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.SampleMaskRet", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    uint64_t v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v22 = 0;
    uint64_t v10 = &v22;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  CC_LONG v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    int v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v23 = 0;
    uint64_t v17 = &v23;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  return CC_SHA256_Update(v19, v17, v18);
}

uint64_t AirReflection::Node::node_as_ImageblockDataRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 135172) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ImageblockDataRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ImageblockDataRet", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (unsigned __int16 v13 = v12[5]) != 0)
  {
    uint64_t v14 = v13;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v14);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xDu)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    uint64_t v16 = v15[6];
    if (v16) {
      LOBYTE(v16) = *((unsigned char *)a1 + v16) != 0;
    }
  }
  LOBYTE(data) = v16;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (unsigned __int16 v18 = v17[7]) != 0)
  {
    uint64_t v19 = v18;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v19);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0x11u && (unsigned __int16 v21 = v20[8]) != 0)
  {
    uint64_t v22 = v21;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v22);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  int v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0x13u && (uint64_t v24 = v23[9]) != 0)
  {
    int v25 = (unsigned int *)((char *)a1 + v24);
    uint64_t v26 = *v25;
    p_int data = (int *)((char *)v25 + v26 + 4);
    CC_LONG v28 = *(unsigned int *)((char *)v25 + v26);
    uint64_t v29 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v29 = c;
    CC_LONG v28 = 4;
  }
  CC_SHA256_Update(v29, p_data, v28);
  uint64_t v30 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v30 >= 0x15u && (uint64_t v31 = v30[10]) != 0)
  {
    uint64_t v32 = (unsigned int *)((char *)a1 + v31);
    uint64_t v33 = *v32;
    uint64_t v34 = (int *)((char *)v32 + v33 + 4);
    CC_LONG v35 = *(unsigned int *)((char *)v32 + v33);
    uint64_t v36 = c;
  }
  else
  {
    int data = 0;
    uint64_t v34 = &data;
    uint64_t v36 = c;
    CC_LONG v35 = 4;
  }
  return CC_SHA256_Update(v36, v34, v35);
}

uint64_t AirReflection::Node::node_as_AcceptIntersectionRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 139264)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::AcceptIntersectionRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.AcceptIntersectionRet", 0x23u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v22 = 0;
    unsigned __int16 v10 = &v22;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    int v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v23 = 0;
    uint64_t v17 = &v23;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  return CC_SHA256_Update(v19, v17, v18);
}

uint64_t AirReflection::Node::node_as_ContinueSearchRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 139265) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ContinueSearchRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ContinueSearchRet", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v22 = 0;
    unsigned __int16 v10 = &v22;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    int v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v23 = 0;
    uint64_t v17 = &v23;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  return CC_SHA256_Update(v19, v17, v18);
}

uint64_t AirReflection::Node::node_as_DistanceRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 139266) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DistanceRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.DistanceRet", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v22 = 0;
    unsigned __int16 v10 = &v22;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    int v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v23 = 0;
    uint64_t v17 = &v23;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  return CC_SHA256_Update(v19, v17, v18);
}

uint64_t AirReflection::Node::node_as_MeshPrimitiveDataRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 143360)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::MeshPrimitiveDataRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshPrimitiveDataRet", 0x22u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    unsigned __int16 v10 = (unsigned int *)((char *)a1 + v9);
    uint64_t v11 = *v10;
    p_int data = (int *)((char *)v10 + v11 + 4);
    CC_LONG v13 = *(unsigned int *)((char *)v10 + v11);
    uint64_t v14 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v14 = c;
    CC_LONG v13 = 4;
  }
  CC_SHA256_Update(v14, p_data, v13);
  int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xBu)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    uint64_t v16 = v15[5];
    if (v16) {
      LOBYTE(v16) = *((unsigned char *)a1 + v16) != 0;
    }
  }
  LOBYTE(data) = v16;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xDu && (uint64_t v18 = v17[6]) != 0)
  {
    uint64_t v19 = (unsigned int *)((char *)a1 + v18);
    uint64_t v20 = *v19;
    unsigned __int16 v21 = (int *)((char *)v19 + v20 + 4);
    CC_LONG v22 = *(unsigned int *)((char *)v19 + v20);
    int v23 = c;
  }
  else
  {
    int data = 0;
    unsigned __int16 v21 = &data;
    int v23 = c;
    CC_LONG v22 = 4;
  }
  CC_SHA256_Update(v23, v21, v22);
  uint64_t v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0xFu && (uint64_t v25 = v24[7]) != 0)
  {
    uint64_t v26 = (unsigned int *)((char *)a1 + v25);
    uint64_t v27 = *v26;
    CC_LONG v28 = (int *)((char *)v26 + v27 + 4);
    CC_LONG v29 = *(unsigned int *)((char *)v26 + v27);
    uint64_t v30 = c;
  }
  else
  {
    int data = 0;
    CC_LONG v28 = &data;
    uint64_t v30 = c;
    CC_LONG v29 = 4;
  }
  return CC_SHA256_Update(v30, v28, v29);
}

uint64_t AirReflection::Node::node_as_MeshVertexDataRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 143361) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshVertexDataRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshVertexDataRet", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    unsigned __int16 v10 = (unsigned int *)((char *)a1 + v9);
    uint64_t v11 = *v10;
    p_int data = (int *)((char *)v10 + v11 + 4);
    CC_LONG v13 = *(unsigned int *)((char *)v10 + v11);
    uint64_t v14 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v14 = c;
    CC_LONG v13 = 4;
  }
  CC_SHA256_Update(v14, p_data, v13);
  int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xBu)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    uint64_t v16 = v15[5];
    if (v16) {
      LOBYTE(v16) = *((unsigned char *)a1 + v16) != 0;
    }
  }
  LOBYTE(data) = v16;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xDu && (uint64_t v18 = v17[6]) != 0)
  {
    uint64_t v19 = (unsigned int *)((char *)a1 + v18);
    uint64_t v20 = *v19;
    unsigned __int16 v21 = (int *)((char *)v19 + v20 + 4);
    CC_LONG v22 = *(unsigned int *)((char *)v19 + v20);
    int v23 = c;
  }
  else
  {
    int data = 0;
    unsigned __int16 v21 = &data;
    int v23 = c;
    CC_LONG v22 = 4;
  }
  CC_SHA256_Update(v23, v21, v22);
  uint64_t v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0xFu && (uint64_t v25 = v24[7]) != 0)
  {
    uint64_t v26 = (unsigned int *)((char *)a1 + v25);
    uint64_t v27 = *v26;
    CC_LONG v28 = (int *)((char *)v26 + v27 + 4);
    CC_LONG v29 = *(unsigned int *)((char *)v26 + v27);
    uint64_t v30 = c;
  }
  else
  {
    int data = 0;
    CC_LONG v28 = &data;
    uint64_t v30 = c;
    CC_LONG v29 = 4;
  }
  return CC_SHA256_Update(v30, v28, v29);
}

uint64_t AirReflection::Node::node_as_PrimitiveCulledRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 143362) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PrimitiveCulledRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PrimitiveCulledRet", 0x20u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LOBYTE(v7) = *((unsigned char *)a1 + v7) != 0;
    }
  }
  char v24 = v7;
  CC_SHA256_Update(c, &v24, 1u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    unsigned __int16 v10 = (unsigned int *)((char *)a1 + v9);
    uint64_t v11 = *v10;
    uint64_t v12 = (int *)((char *)v10 + v11 + 4);
    CC_LONG v13 = *(unsigned int *)((char *)v10 + v11);
    uint64_t v14 = c;
  }
  else
  {
    int v25 = 0;
    uint64_t v12 = &v25;
    uint64_t v14 = c;
    CC_LONG v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (uint64_t v16 = v15[5]) != 0)
  {
    uint64_t v17 = (unsigned int *)((char *)a1 + v16);
    uint64_t v18 = *v17;
    uint64_t v19 = (int *)((char *)v17 + v18 + 4);
    CC_LONG v20 = *(unsigned int *)((char *)v17 + v18);
    unsigned __int16 v21 = c;
  }
  else
  {
    int v26 = 0;
    uint64_t v19 = &v26;
    unsigned __int16 v21 = c;
    CC_LONG v20 = 4;
  }
  return CC_SHA256_Update(v21, v19, v20);
}

uint64_t AirReflection::Node::node_as_PrimitiveIDRet(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 143363) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PrimitiveIDRet::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PrimitiveIDRet", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LOBYTE(v7) = *((unsigned char *)a1 + v7) != 0;
    }
  }
  char v24 = v7;
  CC_SHA256_Update(c, &v24, 1u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    unsigned __int16 v10 = (unsigned int *)((char *)a1 + v9);
    uint64_t v11 = *v10;
    uint64_t v12 = (int *)((char *)v10 + v11 + 4);
    CC_LONG v13 = *(unsigned int *)((char *)v10 + v11);
    uint64_t v14 = c;
  }
  else
  {
    int v25 = 0;
    uint64_t v12 = &v25;
    uint64_t v14 = c;
    CC_LONG v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (uint64_t v16 = v15[5]) != 0)
  {
    uint64_t v17 = (unsigned int *)((char *)a1 + v16);
    uint64_t v18 = *v17;
    uint64_t v19 = (int *)((char *)v17 + v18 + 4);
    CC_LONG v20 = *(unsigned int *)((char *)v17 + v18);
    unsigned __int16 v21 = c;
  }
  else
  {
    int v26 = 0;
    uint64_t v19 = &v26;
    unsigned __int16 v21 = c;
    CC_LONG v20 = 4;
  }
  return CC_SHA256_Update(v21, v19, v20);
}

uint64_t AirReflection::Node::node_as_ConstantArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262147) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ConstantArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ConstantArg", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (unsigned __int16 v13 = v12[5]) != 0)
  {
    uint64_t v14 = v13;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v14);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xDu && (unsigned __int16 v16 = v15[6]) != 0)
  {
    uint64_t v17 = v16;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v17);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 >= 0xFu && (unsigned __int16 v19 = v18[7]) != 0)
  {
    uint64_t v20 = v19;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v20);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  unsigned __int16 v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 0x11u && (uint64_t v22 = v21[8]) != 0)
  {
    int v23 = (unsigned int *)((char *)a1 + v22);
    uint64_t v24 = *v23;
    p_int data = (int *)((char *)v23 + v24 + 4);
    CC_LONG v26 = *(unsigned int *)((char *)v23 + v24);
    uint64_t v27 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v27 = c;
    CC_LONG v26 = 4;
  }
  CC_SHA256_Update(v27, p_data, v26);
  CC_LONG v28 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v28 >= 0x13u && (uint64_t v29 = v28[9]) != 0)
  {
    uint64_t v30 = (unsigned int *)((char *)a1 + v29);
    uint64_t v31 = *v30;
    uint64_t v32 = (int *)((char *)v30 + v31 + 4);
    CC_LONG v33 = *(unsigned int *)((char *)v30 + v31);
    uint64_t v34 = c;
  }
  else
  {
    int data = 0;
    uint64_t v32 = &data;
    uint64_t v34 = c;
    CC_LONG v33 = 4;
  }
  CC_SHA256_Update(v34, v32, v33);
  CC_LONG v35 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v35 < 0x15u)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    uint64_t v36 = v35[10];
    if (v36) {
      LOBYTE(v36) = *((unsigned char *)a1 + v36) != 0;
    }
  }
  LOBYTE(data) = v36;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_IndirectBufferArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262148) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::IndirectBufferArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.IndirectBufferArg", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (unsigned __int16 v13 = v12[5]) != 0)
  {
    uint64_t v14 = v13;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v14);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xDu)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    uint64_t v16 = v15[6];
    if (v16) {
      LODWORD(v16) = *((unsigned __int8 *)a1 + v16);
    }
  }
  int data = v16;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (uint64_t v18 = v17[7]) != 0) {
    int v19 = *((unsigned __int8 *)a1 + v18);
  }
  else {
    int v19 = 1;
  }
  int data = v19;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0x11u && (unsigned __int16 v21 = v20[8]) != 0)
  {
    uint64_t v22 = v21;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v22);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  int v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0x13u && (unsigned __int16 v24 = v23[9]) != 0)
  {
    uint64_t v25 = v24;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v25);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 >= 0x15u && (unsigned __int16 v27 = v26[10]) != 0)
  {
    uint64_t v28 = v27;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v28);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 >= 0x17u && (unsigned __int16 v30 = v29[11]) != 0)
  {
    uint64_t v31 = v30;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v31);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v32 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v32 >= 0x19u && (uint64_t v33 = v32[12]) != 0)
  {
    uint64_t v34 = (unsigned int *)((char *)a1 + v33);
    uint64_t v35 = *v34;
    p_int data = (int *)((char *)v34 + v35 + 4);
    CC_LONG v37 = *(unsigned int *)((char *)v34 + v35);
    uint64_t v38 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v38 = c;
    CC_LONG v37 = 4;
  }
  CC_SHA256_Update(v38, p_data, v37);
  unsigned int v39 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v39 >= 0x1Bu && (uint64_t v40 = v39[13]) != 0)
  {
    std::string v41 = (unsigned int *)((char *)a1 + v40);
    uint64_t v42 = *v41;
    uint64_t v43 = (int *)((char *)v41 + v42 + 4);
    CC_LONG v44 = *(unsigned int *)((char *)v41 + v42);
    uint64_t v45 = c;
  }
  else
  {
    int data = 0;
    uint64_t v43 = &data;
    uint64_t v45 = c;
    CC_LONG v44 = 4;
  }
  CC_SHA256_Update(v45, v43, v44);
  uint64_t v46 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v46 < 0x1Du)
  {
    LOBYTE(v47) = 0;
  }
  else
  {
    uint64_t v47 = v46[14];
    if (v47) {
      LOBYTE(v47) = *((unsigned char *)a1 + v47) != 0;
    }
  }
  LOBYTE(data) = v47;
  CC_SHA256_Update(c, &data, 1u);
  unint64_t v48 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v48 >= 0x1Fu && (unsigned __int16 v49 = v48[15]) != 0)
  {
    uint64_t v50 = v49;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v50);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_IndirectConstantArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262149) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::IndirectConstantArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.IndirectConstantArg", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0)
  {
    uint64_t v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    p_int data = (int *)((char *)v14 + v15 + 4);
    CC_LONG v17 = *(unsigned int *)((char *)v14 + v15);
    uint64_t v18 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v18 = c;
    CC_LONG v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0)
  {
    unsigned __int16 v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    int v23 = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    uint64_t v25 = c;
  }
  else
  {
    int data = 0;
    int v23 = &data;
    uint64_t v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  CC_LONG v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[7];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_CommandBufferArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262150) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::CommandBufferArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.CommandBufferArg", 0x1Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0)
  {
    uint64_t v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    p_int data = (int *)((char *)v14 + v15 + 4);
    CC_LONG v17 = *(unsigned int *)((char *)v14 + v15);
    uint64_t v18 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v18 = c;
    CC_LONG v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0)
  {
    unsigned __int16 v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    int v23 = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    uint64_t v25 = c;
  }
  else
  {
    int data = 0;
    int v23 = &data;
    uint64_t v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  CC_LONG v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[7];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_ComputePipelineStateArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262151) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ComputePipelineStateArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ComputePipelineStateArg", 0x25u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0)
  {
    uint64_t v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    p_int data = (int *)((char *)v14 + v15 + 4);
    CC_LONG v17 = *(unsigned int *)((char *)v14 + v15);
    uint64_t v18 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v18 = c;
    CC_LONG v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0)
  {
    unsigned __int16 v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    int v23 = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    uint64_t v25 = c;
  }
  else
  {
    int data = 0;
    int v23 = &data;
    uint64_t v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  CC_LONG v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[7];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_RenderPipelineStateArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262152) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RenderPipelineStateArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RenderPipelineStateArg", 0x24u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0)
  {
    uint64_t v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    p_int data = (int *)((char *)v14 + v15 + 4);
    CC_LONG v17 = *(unsigned int *)((char *)v14 + v15);
    uint64_t v18 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v18 = c;
    CC_LONG v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0)
  {
    unsigned __int16 v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    int v23 = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    uint64_t v25 = c;
  }
  else
  {
    int data = 0;
    int v23 = &data;
    uint64_t v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  CC_LONG v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[7];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_VisibleFunctionTableArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262153) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VisibleFunctionTableArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.VisibleFunctionTableArg", 0x25u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 0xBu)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v13 = v12[5];
    if (v13) {
      LODWORD(v13) = *((unsigned __int8 *)a1 + v13);
    }
  }
  int data = v13;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xDu && (unsigned __int16 v15 = v14[6]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (uint64_t v18 = v17[7]) != 0)
  {
    int v19 = (unsigned int *)((char *)a1 + v18);
    uint64_t v20 = *v19;
    p_int data = (int *)((char *)v19 + v20 + 4);
    CC_LONG v22 = *(unsigned int *)((char *)v19 + v20);
    int v23 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v23 = c;
    CC_LONG v22 = 4;
  }
  CC_SHA256_Update(v23, p_data, v22);
  CC_LONG v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0x11u && (uint64_t v25 = v24[8]) != 0)
  {
    CC_LONG v26 = (unsigned int *)((char *)a1 + v25);
    uint64_t v27 = *v26;
    uint64_t v28 = (int *)((char *)v26 + v27 + 4);
    CC_LONG v29 = *(unsigned int *)((char *)v26 + v27);
    unsigned __int16 v30 = c;
  }
  else
  {
    int data = 0;
    uint64_t v28 = &data;
    unsigned __int16 v30 = c;
    CC_LONG v29 = 4;
  }
  CC_SHA256_Update(v30, v28, v29);
  uint64_t v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 < 0x13u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    uint64_t v32 = v31[9];
    if (v32) {
      LOBYTE(v32) = *((unsigned char *)a1 + v32) != 0;
    }
  }
  LOBYTE(data) = v32;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_IntersectionFunctionTableArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262154) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::IntersectionFunctionTableArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.IntersectionFunctionTableArg", 0x2Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 0xBu)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v13 = v12[5];
    if (v13) {
      LODWORD(v13) = *((unsigned __int8 *)a1 + v13);
    }
  }
  int data = v13;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xDu && (unsigned __int16 v15 = v14[6]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (uint64_t v18 = v17[7]) != 0)
  {
    int v19 = (unsigned int *)((char *)a1 + v18);
    uint64_t v20 = *v19;
    p_int data = (int *)((char *)v19 + v20 + 4);
    CC_LONG v22 = *(unsigned int *)((char *)v19 + v20);
    int v23 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v23 = c;
    CC_LONG v22 = 4;
  }
  CC_SHA256_Update(v23, p_data, v22);
  CC_LONG v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0x11u && (uint64_t v25 = v24[8]) != 0)
  {
    CC_LONG v26 = (unsigned int *)((char *)a1 + v25);
    uint64_t v27 = *v26;
    uint64_t v28 = (int *)((char *)v26 + v27 + 4);
    CC_LONG v29 = *(unsigned int *)((char *)v26 + v27);
    unsigned __int16 v30 = c;
  }
  else
  {
    int data = 0;
    uint64_t v28 = &data;
    unsigned __int16 v30 = c;
    CC_LONG v29 = 4;
  }
  CC_SHA256_Update(v30, v28, v29);
  uint64_t v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 < 0x13u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    uint64_t v32 = v31[9];
    if (v32) {
      LOBYTE(v32) = *((unsigned char *)a1 + v32) != 0;
    }
  }
  LOBYTE(data) = v32;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_InstanceAccelerationStructureArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262155) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::InstanceAccelerationStructureArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.InstanceAccelerationStructureArg", 0x2Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 0xBu)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v13 = v12[5];
    if (v13) {
      LODWORD(v13) = *((unsigned __int8 *)a1 + v13);
    }
  }
  int data = v13;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xDu && (unsigned __int16 v15 = v14[6]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (uint64_t v18 = v17[7]) != 0)
  {
    int v19 = (unsigned int *)((char *)a1 + v18);
    uint64_t v20 = *v19;
    p_int data = (int *)((char *)v19 + v20 + 4);
    CC_LONG v22 = *(unsigned int *)((char *)v19 + v20);
    int v23 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v23 = c;
    CC_LONG v22 = 4;
  }
  CC_SHA256_Update(v23, p_data, v22);
  CC_LONG v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0x11u && (uint64_t v25 = v24[8]) != 0)
  {
    CC_LONG v26 = (unsigned int *)((char *)a1 + v25);
    uint64_t v27 = *v26;
    uint64_t v28 = (int *)((char *)v26 + v27 + 4);
    CC_LONG v29 = *(unsigned int *)((char *)v26 + v27);
    unsigned __int16 v30 = c;
  }
  else
  {
    int data = 0;
    uint64_t v28 = &data;
    unsigned __int16 v30 = c;
    CC_LONG v29 = 4;
  }
  CC_SHA256_Update(v30, v28, v29);
  uint64_t v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 < 0x13u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    uint64_t v32 = v31[9];
    if (v32) {
      LOBYTE(v32) = *((unsigned char *)a1 + v32) != 0;
    }
  }
  LOBYTE(data) = v32;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_PrimitiveAccelerationStructureArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262156) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PrimitiveAccelerationStructureArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PrimitiveAccelerationStructureArg", 0x2Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 0xBu)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    uint64_t v13 = v12[5];
    if (v13) {
      LODWORD(v13) = *((unsigned __int8 *)a1 + v13);
    }
  }
  int data = v13;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xDu && (unsigned __int16 v15 = v14[6]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (uint64_t v18 = v17[7]) != 0)
  {
    int v19 = (unsigned int *)((char *)a1 + v18);
    uint64_t v20 = *v19;
    p_int data = (int *)((char *)v19 + v20 + 4);
    CC_LONG v22 = *(unsigned int *)((char *)v19 + v20);
    int v23 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v23 = c;
    CC_LONG v22 = 4;
  }
  CC_SHA256_Update(v23, p_data, v22);
  CC_LONG v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0x11u && (uint64_t v25 = v24[8]) != 0)
  {
    CC_LONG v26 = (unsigned int *)((char *)a1 + v25);
    uint64_t v27 = *v26;
    uint64_t v28 = (int *)((char *)v26 + v27 + 4);
    CC_LONG v29 = *(unsigned int *)((char *)v26 + v27);
    unsigned __int16 v30 = c;
  }
  else
  {
    int data = 0;
    uint64_t v28 = &data;
    unsigned __int16 v30 = c;
    CC_LONG v29 = 4;
  }
  CC_SHA256_Update(v30, v28, v29);
  uint64_t v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 < 0x13u)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    uint64_t v32 = v31[9];
    if (v32) {
      LOBYTE(v32) = *((unsigned char *)a1 + v32) != 0;
    }
  }
  LOBYTE(data) = v32;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_BufferStrideArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 262157) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::BufferStrideArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.BufferStrideArg", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0)
  {
    uint64_t v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    p_int data = (int *)((char *)v14 + v15 + 4);
    CC_LONG v17 = *(unsigned int *)((char *)v14 + v15);
    uint64_t v18 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v18 = c;
    CC_LONG v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0)
  {
    unsigned __int16 v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    int v23 = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    uint64_t v25 = c;
  }
  else
  {
    int data = 0;
    int v23 = &data;
    uint64_t v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  CC_LONG v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[7];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadPositionInGridArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 266240)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::ThreadPositionInGridArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ThreadPositionInGridArg", 0x25u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadsPerGridArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266241) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadsPerGridArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ThreadsPerGridArg", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadgroupPositionInGridArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266242) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadgroupPositionInGridArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ThreadgroupPositionInGridArg", 0x2Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadgroupsPerGridArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266243) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadgroupsPerGridArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ThreadgroupsPerGridArg", 0x24u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadPositionInThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266244) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadPositionInThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ThreadPositionInThreadgroupArg", 0x2Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadsPerThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266245) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadsPerThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ThreadsPerThreadgroupArg", 0x26u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_DispatchThreadsPerThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266246) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DispatchThreadsPerThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.DispatchThreadsPerThreadgroupArg", 0x2Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadIndexInThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266247) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadIndexInThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ThreadIndexInThreadgroupArg", 0x29u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadExecutionWidthArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266248) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadExecutionWidthArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ThreadExecutionWidthArg", 0x25u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_StageInArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266249) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StageInArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.StageInArg", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0)
  {
    uint64_t v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    p_int data = (int *)((char *)v14 + v15 + 4);
    CC_LONG v17 = *(unsigned int *)((char *)v14 + v15);
    CC_LONG v18 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    CC_LONG v18 = c;
    CC_LONG v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0)
  {
    uint64_t v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    int v23 = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    int v25 = c;
  }
  else
  {
    int data = 0;
    int v23 = &data;
    int v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  char v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[7];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_StageInGridOriginArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266250) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StageInGridOriginArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.StageInGridOriginArg", 0x22u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_StageInGridSizeArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266251) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StageInGridSizeArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.StageInGridSizeArg", 0x20u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadIndexInSimdgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266252) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadIndexInSimdgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ThreadIndexInSimdgroupArg", 0x27u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadsPerSimdgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266253) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadsPerSimdgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ThreadsPerSimdgroupArg", 0x24u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_SimdgroupIndexInThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266254) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SimdgroupIndexInThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.SimdgroupIndexInThreadgroupArg", 0x2Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_SimdgroupsPerThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266255) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SimdgroupsPerThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.SimdgroupsPerThreadgroupArg", 0x29u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_DispatchSimdgroupsPerThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266256) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DispatchSimdgroupsPerThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.DispatchSimdgroupsPerThreadgroupArg", 0x31u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ThreadIndexInQuadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266257) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ThreadIndexInQuadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ThreadIndexInQuadgroupArg", 0x27u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_QuadgroupIndexInThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266258) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::QuadgroupIndexInThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.QuadgroupIndexInThreadgroupArg", 0x2Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_QuadgroupsPerThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266259) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::QuadgroupsPerThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.QuadgroupsPerThreadgroupArg", 0x29u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_DispatchQuadgroupsPerThreadgroupArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 266260) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DispatchQuadgroupsPerThreadgroupArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.DispatchQuadgroupsPerThreadgroupArg", 0x31u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_BaseInstanceArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 270336)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::BaseInstanceArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.BaseInstanceArg", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_BaseVertexArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270337) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::BaseVertexArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.BaseVertexArg", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_InstanceIDArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270338) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::InstanceIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.InstanceIDArg", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ControlPointIndexBufferArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270341) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ControlPointIndexBufferArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ControlPointIndexBufferArg", 0x28u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PatchIDArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270342) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PatchIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PatchIDArg", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PositionInPatchArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270343) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PositionInPatchArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PositionInPatchArg", 0x20u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    int v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    int v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PatchInputArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270344) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PatchInputArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PatchInputArg", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0)
  {
    uint64_t v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    p_int data = (int *)((char *)v14 + v15 + 4);
    CC_LONG v17 = *(unsigned int *)((char *)v14 + v15);
    CC_LONG v18 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    CC_LONG v18 = c;
    CC_LONG v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0)
  {
    uint64_t v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    int v23 = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    int v25 = c;
  }
  else
  {
    int data = 0;
    int v23 = &data;
    int v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  char v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[7];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_ControlPointInputArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270345) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ControlPointInputArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ControlPointInputArg", 0x22u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7 + *(unsigned int *)((char *)a1 + v7));
    int v16 = *v8;
    CC_SHA256_Update(c, &v16, 4u);
    uint64_t v9 = *v8;
    if (v9)
    {
      unsigned __int16 v10 = (int *)(v8 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v11 = *v10++;
        int v17 = v11;
        CC_SHA256_Update(c, &v17, 4u);
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    int v18 = 0;
    CC_SHA256_Update(c, &v18, 4u);
  }
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 9u)
  {
    LOBYTE(v13) = 0;
  }
  else
  {
    uint64_t v13 = v12[4];
    if (v13) {
      LOBYTE(v13) = *((unsigned char *)a1 + v13) != 0;
    }
  }
  char v19 = v13;
  return CC_SHA256_Update(c, &v19, 1u);
}

uint64_t AirReflection::Node::node_as_ControlPointField(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270346) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ControlPointField::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ControlPointField", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0)
  {
    uint64_t v14 = (unsigned int *)((char *)a1 + v13);
    uint64_t v15 = *v14;
    p_int data = (int *)((char *)v14 + v15 + 4);
    CC_LONG v17 = *(unsigned int *)((char *)v14 + v15);
    int v18 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v18 = c;
    CC_LONG v17 = 4;
  }
  CC_SHA256_Update(v18, p_data, v17);
  char v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0xDu && (uint64_t v20 = v19[6]) != 0)
  {
    uint64_t v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    int v23 = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    int v25 = c;
  }
  else
  {
    int data = 0;
    int v23 = &data;
    int v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, v23, v24);
  char v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0xFu)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[7];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_AmplificationCountArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270350) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::AmplificationCountArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.AmplificationCountArg", 0x23u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    char v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    char v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_AmplificationIDArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 270351) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::AmplificationIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.AmplificationIDArg", 0x20u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    char v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    char v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_FrontFacingArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274433) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::FrontFacingArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.FrontFacingArg", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    char v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    char v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PointCoordArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274435) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PointCoordArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PointCoordArg", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    char v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    char v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_RenderTargetArrayIndexArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274437) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RenderTargetArrayIndexArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RenderTargetArrayIndexArg", 0x27u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    char v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    char v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_SampleIDArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274438) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SampleIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.SampleIDArg", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    char v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    char v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_SampleMaskArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274439) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SampleMaskArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.SampleMaskArg", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LOBYTE(v7) = *((unsigned char *)a1 + v7) != 0;
    }
  }
  char v26 = v7;
  CC_SHA256_Update(c, &v26, 1u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    unsigned __int16 v10 = (unsigned int *)((char *)a1 + v9);
    uint64_t v11 = *v10;
    uint64_t v12 = (int *)((char *)v10 + v11 + 4);
    CC_LONG v13 = *(unsigned int *)((char *)v10 + v11);
    uint64_t v14 = c;
  }
  else
  {
    int v27 = 0;
    uint64_t v12 = &v27;
    uint64_t v14 = c;
    CC_LONG v13 = 4;
  }
  CC_SHA256_Update(v14, v12, v13);
  uint64_t v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xBu && (uint64_t v16 = v15[5]) != 0)
  {
    CC_LONG v17 = (unsigned int *)((char *)a1 + v16);
    uint64_t v18 = *v17;
    char v19 = (int *)((char *)v17 + v18 + 4);
    CC_LONG v20 = *(unsigned int *)((char *)v17 + v18);
    uint64_t v21 = c;
  }
  else
  {
    int v28 = 0;
    char v19 = &v28;
    uint64_t v21 = c;
    CC_LONG v20 = 4;
  }
  CC_SHA256_Update(v21, v19, v20);
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v22 < 0xDu)
  {
    LOBYTE(v23) = 0;
  }
  else
  {
    uint64_t v23 = v22[6];
    if (v23) {
      LOBYTE(v23) = *((unsigned char *)a1 + v23) != 0;
    }
  }
  char v29 = v23;
  return CC_SHA256_Update(c, &v29, 1u);
}

uint64_t AirReflection::Node::node_as_ViewportArrayIndexArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274440) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ViewportArrayIndexArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ViewportArrayIndexArg", 0x23u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  CC_LONG v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    uint64_t v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    char v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    char v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_BarycentricCoordArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274445) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::BarycentricCoordArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.BarycentricCoordArg", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *((unsigned __int8 *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 < 9u)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v9 = v8[4];
    if (v9) {
      LODWORD(v9) = *((unsigned __int8 *)a1 + v9);
    }
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  unsigned __int16 v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 0xBu && (uint64_t v11 = v10[5]) != 0)
  {
    uint64_t v12 = (unsigned int *)((char *)a1 + v11);
    uint64_t v13 = *v12;
    p_int data = (int *)((char *)v12 + v13 + 4);
    CC_LONG v15 = *(unsigned int *)((char *)v12 + v13);
    uint64_t v16 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v16 = c;
    CC_LONG v15 = 4;
  }
  CC_SHA256_Update(v16, p_data, v15);
  CC_LONG v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xDu && (uint64_t v18 = v17[6]) != 0)
  {
    char v19 = (unsigned int *)((char *)a1 + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = (int *)((char *)v19 + v20 + 4);
    CC_LONG v22 = *(unsigned int *)((char *)v19 + v20);
    uint64_t v23 = c;
  }
  else
  {
    int data = 0;
    uint64_t v21 = &data;
    uint64_t v23 = c;
    CC_LONG v22 = 4;
  }
  CC_SHA256_Update(v23, v21, v22);
  int v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 < 0xFu)
  {
    LOBYTE(v25) = 0;
  }
  else
  {
    uint64_t v25 = v24[7];
    if (v25) {
      LOBYTE(v25) = *((unsigned char *)a1 + v25) != 0;
    }
  }
  LOBYTE(data) = v25;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_PrimitiveIDArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 274446) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PrimitiveIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PrimitiveIDArg", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    CC_LONG v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    char v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    char v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PixelPositionInTileArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 278528)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::PixelPositionInTileArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PixelPositionInTileArg", 0x24u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    CC_LONG v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    char v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    char v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PixelsPerTileArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 278529) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PixelsPerTileArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PixelsPerTileArg", 0x1Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    CC_LONG v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    char v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    char v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_TileIndexArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 278530) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::TileIndexArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.TileIndexArg", 0x1Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    CC_LONG v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    char v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    char v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ImageblockArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 278531) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ImageblockArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ImageblockArg", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 < 0xBu)
  {
    LOBYTE(v13) = 0;
  }
  else
  {
    uint64_t v13 = v12[5];
    if (v13) {
      LOBYTE(v13) = *((unsigned char *)a1 + v13) != 0;
    }
  }
  LOBYTE(data) = v13;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xDu && (unsigned __int16 v15 = v14[6]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (unsigned __int16 v18 = v17[7]) != 0)
  {
    uint64_t v19 = v18;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v19);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0x11u && (uint64_t v21 = v20[8]) != 0)
  {
    CC_LONG v22 = (unsigned int *)((char *)a1 + v21);
    uint64_t v23 = *v22;
    p_int data = (int *)((char *)v22 + v23 + 4);
    CC_LONG v25 = *(unsigned int *)((char *)v22 + v23);
    char v26 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    char v26 = c;
    CC_LONG v25 = 4;
  }
  CC_SHA256_Update(v26, p_data, v25);
  int v27 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v27 >= 0x13u && (uint64_t v28 = v27[9]) != 0)
  {
    char v29 = (unsigned int *)((char *)a1 + v28);
    uint64_t v30 = *v29;
    uint64_t v31 = (int *)((char *)v29 + v30 + 4);
    CC_LONG v32 = *(unsigned int *)((char *)v29 + v30);
    uint64_t v33 = c;
  }
  else
  {
    int data = 0;
    uint64_t v31 = &data;
    uint64_t v33 = c;
    CC_LONG v32 = 4;
  }
  CC_SHA256_Update(v33, v31, v32);
  uint64_t v34 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v34 < 0x15u)
  {
    LOBYTE(v35) = 0;
  }
  else
  {
    uint64_t v35 = v34[10];
    if (v35) {
      LOBYTE(v35) = *((unsigned char *)a1 + v35) != 0;
    }
  }
  LOBYTE(data) = v35;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_ImageblockDataArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 278532) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ImageblockDataArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ImageblockDataArg", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (unsigned __int16 v13 = v12[5]) != 0)
  {
    uint64_t v14 = v13;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v14);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  unsigned __int16 v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xDu)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    uint64_t v16 = v15[6];
    if (v16) {
      LOBYTE(v16) = *((unsigned char *)a1 + v16) != 0;
    }
  }
  LOBYTE(data) = v16;
  CC_SHA256_Update(c, &data, 1u);
  CC_LONG v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xFu && (unsigned __int16 v18 = v17[7]) != 0)
  {
    uint64_t v19 = v18;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v19);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0x11u && (unsigned __int16 v21 = v20[8]) != 0)
  {
    uint64_t v22 = v21;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v22);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 >= 0x13u && (uint64_t v24 = v23[9]) != 0)
  {
    CC_LONG v25 = (unsigned int *)((char *)a1 + v24);
    uint64_t v26 = *v25;
    p_int data = (int *)((char *)v25 + v26 + 4);
    CC_LONG v28 = *(unsigned int *)((char *)v25 + v26);
    char v29 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    char v29 = c;
    CC_LONG v28 = 4;
  }
  CC_SHA256_Update(v29, p_data, v28);
  uint64_t v30 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v30 >= 0x15u && (uint64_t v31 = v30[10]) != 0)
  {
    CC_LONG v32 = (unsigned int *)((char *)a1 + v31);
    uint64_t v33 = *v32;
    uint64_t v34 = (int *)((char *)v32 + v33 + 4);
    CC_LONG v35 = *(unsigned int *)((char *)v32 + v33);
    uint64_t v36 = c;
  }
  else
  {
    int data = 0;
    uint64_t v34 = &data;
    uint64_t v36 = c;
    CC_LONG v35 = 4;
  }
  CC_SHA256_Update(v36, v34, v35);
  CC_LONG v37 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v37 < 0x17u)
  {
    LOBYTE(v38) = 0;
  }
  else
  {
    uint64_t v38 = v37[11];
    if (v38) {
      LOBYTE(v38) = *((unsigned char *)a1 + v38) != 0;
    }
  }
  LOBYTE(data) = v38;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_PayloadArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 282624)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::PayloadArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PayloadArg", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (unsigned __int16 v10 = v9[4]) != 0)
  {
    uint64_t v11 = v10;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v11);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xBu && (unsigned __int16 v13 = v12[5]) != 0)
  {
    uint64_t v14 = v13;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v14);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  unsigned __int16 v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xDu && (uint64_t v16 = v15[6]) != 0)
  {
    CC_LONG v17 = (unsigned int *)((char *)a1 + v16);
    uint64_t v18 = *v17;
    p_int data = (int *)((char *)v17 + v18 + 4);
    CC_LONG v20 = *(unsigned int *)((char *)v17 + v18);
    unsigned __int16 v21 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    unsigned __int16 v21 = c;
    CC_LONG v20 = 4;
  }
  CC_SHA256_Update(v21, p_data, v20);
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v22 >= 0xFu && (uint64_t v23 = v22[7]) != 0)
  {
    uint64_t v24 = (unsigned int *)((char *)a1 + v23);
    uint64_t v25 = *v24;
    uint64_t v26 = (int *)((char *)v24 + v25 + 4);
    CC_LONG v27 = *(unsigned int *)((char *)v24 + v25);
    CC_LONG v28 = c;
  }
  else
  {
    int data = 0;
    uint64_t v26 = &data;
    CC_LONG v28 = c;
    CC_LONG v27 = 4;
  }
  CC_SHA256_Update(v28, v26, v27);
  char v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 < 0x11u)
  {
    LOBYTE(v30) = 0;
  }
  else
  {
    uint64_t v30 = v29[8];
    if (v30) {
      LOBYTE(v30) = *((unsigned char *)a1 + v30) != 0;
    }
  }
  LOBYTE(data) = v30;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 >= 0x13u && (unsigned __int16 v32 = v31[9]) != 0)
  {
    uint64_t v33 = v32;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v33);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_OriginArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282625) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::OriginArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.OriginArg", 0x17u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_DirectionArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282626) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DirectionArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.DirectionArg", 0x1Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_MinDistanceArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282627) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MinDistanceArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MinDistanceArg", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_MaxDistanceArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282628) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MaxDistanceArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MaxDistanceArg", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_DistanceArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282629) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DistanceArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.DistanceArg", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_WorldSpaceOriginArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282630) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::WorldSpaceOriginArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.WorldSpaceOriginArg", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_WorldSpaceDirectionArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282631) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::WorldSpaceDirectionArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.WorldSpaceDirectionArg", 0x24u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_GeometryIDArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282632) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::GeometryIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.GeometryIDArg", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_UserInstanceIDArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282633) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UserInstanceIDArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.UserInstanceIDArg", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_GeometryIntersectionFunctionTableOffsetArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282634) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::GeometryIntersectionFunctionTableOffsetArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.GeometryIntersectionFunctionTableOffsetArg", 0x38u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_InstanceIntersectionFunctionTableOffsetArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282635) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::InstanceIntersectionFunctionTableOffsetArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.InstanceIntersectionFunctionTableOffsetArg", 0x38u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_OpaquePrimitiveArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282636) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::OpaquePrimitiveArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.OpaquePrimitiveArg", 0x20u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_ObjectToWorldTransformArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282637) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ObjectToWorldTransformArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ObjectToWorldTransformArg", 0x27u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_WorldToObjectTransformArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282638) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::WorldToObjectTransformArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.WorldToObjectTransformArg", 0x27u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_TimeArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282639) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::TimeArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.TimeArg", 0x15u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_KeyFrameCountArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282640) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::KeyFrameCountArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.KeyFrameCountArg", 0x1Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_MotionStartTimeArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282641) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MotionStartTimeArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MotionStartTimeArg", 0x20u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_MotionEndTimeArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282642) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MotionEndTimeArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MotionEndTimeArg", 0x1Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_PrimitiveDataArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282643) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PrimitiveDataArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PrimitiveDataArg", 0x1Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_InstanceIDCountArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282644) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::InstanceIDCountArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.InstanceIDCountArg", 0x20u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_UserInstanceIDCountArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282645) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UserInstanceIDCountArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.UserInstanceIDCountArg", 0x24u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_CurveParameterArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 282646) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::CurveParameterArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.CurveParameterArg", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    unsigned __int16 v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    unsigned __int16 v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    CC_LONG v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    CC_LONG v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_MeshArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 286720)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::MeshArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshArg", 0x15u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  LOBYTE(data) = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (unsigned __int16 v7 = v6[3]) != 0)
  {
    uint64_t v8 = v7;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v8);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0)
  {
    CC_LONG v11 = (unsigned int *)((char *)a1 + v10);
    uint64_t v12 = *v11;
    p_int data = (int *)((char *)v11 + v12 + 4);
    CC_LONG v14 = *(unsigned int *)((char *)v11 + v12);
    unsigned __int16 v15 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    unsigned __int16 v15 = c;
    CC_LONG v14 = 4;
  }
  CC_SHA256_Update(v15, p_data, v14);
  uint64_t v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 >= 0xBu && (uint64_t v17 = v16[5]) != 0)
  {
    CC_LONG v18 = (unsigned int *)((char *)a1 + v17);
    uint64_t v19 = *v18;
    CC_LONG v20 = (int *)((char *)v18 + v19 + 4);
    CC_LONG v21 = *(unsigned int *)((char *)v18 + v19);
    uint64_t v22 = c;
  }
  else
  {
    int data = 0;
    CC_LONG v20 = &data;
    uint64_t v22 = c;
    CC_LONG v21 = 4;
  }
  CC_SHA256_Update(v22, v20, v21);
  uint64_t v23 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v23 < 0xDu)
  {
    LOBYTE(v24) = 0;
  }
  else
  {
    uint64_t v24 = v23[6];
    if (v24) {
      LOBYTE(v24) = *((unsigned char *)a1 + v24) != 0;
    }
  }
  LOBYTE(data) = v24;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_MeshGridPropertiesArg(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 290816)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::MeshGridPropertiesArg::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshGridPropertiesArg", 0x23u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LOBYTE(v5) = *((unsigned char *)a1 + v5) != 0;
    }
  }
  char data = v5;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 >= 7u && (uint64_t v7 = v6[3]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)a1 + v7);
    uint64_t v9 = *v8;
    uint64_t v10 = (int *)((char *)v8 + v9 + 4);
    CC_LONG v11 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v12 = c;
  }
  else
  {
    int v24 = 0;
    uint64_t v10 = &v24;
    uint64_t v12 = c;
    CC_LONG v11 = 4;
  }
  CC_SHA256_Update(v12, v10, v11);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0)
  {
    unsigned __int16 v15 = (unsigned int *)((char *)a1 + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = (int *)((char *)v15 + v16 + 4);
    CC_LONG v18 = *(unsigned int *)((char *)v15 + v16);
    uint64_t v19 = c;
  }
  else
  {
    int v25 = 0;
    uint64_t v17 = &v25;
    uint64_t v19 = c;
    CC_LONG v18 = 4;
  }
  CC_SHA256_Update(v19, v17, v18);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_FunctionConstant(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 0x80000)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::FunctionConstant::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.FunctionConstant", 0x1Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    uint64_t v8 = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    uint64_t v10 = c;
  }
  else
  {
    int v23 = 0;
    uint64_t v8 = &v23;
    uint64_t v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, v8, v9);
  CC_LONG v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    unsigned __int16 v13 = (unsigned int *)((char *)a1 + v12);
    uint64_t v14 = *v13;
    p_int data = (int *)((char *)v13 + v14 + 4);
    CC_LONG v16 = *(unsigned int *)((char *)v13 + v14);
    uint64_t v17 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v17 = c;
    CC_LONG v16 = 4;
  }
  CC_SHA256_Update(v17, p_data, v16);
  CC_LONG v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 9u)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = v18[4];
    if (v19) {
      LODWORD(v19) = *(int *)((char *)a1 + v19);
    }
  }
  int v25 = v19;
  CC_SHA256_Update(c, &v25, 4u);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xBu)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[5];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  char v26 = v21;
  return CC_SHA256_Update(c, &v26, 1u);
}

uint64_t AirReflection::Node::node_as_StitchingArgument(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524290) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StitchingArgument::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.StitchingArgument", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    uint64_t v6 = v5;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int v16 = *(int *)((char *)a1 + v6);
    p_int data = &v16;
  }
  else
  {
    int data = 0;
    p_int data = &data;
  }
  CC_SHA256_Update(c, p_data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9);
    uint64_t v11 = *v10;
    uint64_t v12 = (int *)((char *)v10 + v11 + 4);
    CC_LONG v13 = *(unsigned int *)((char *)v10 + v11);
    uint64_t v14 = c;
  }
  else
  {
    int v18 = 0;
    uint64_t v12 = &v18;
    uint64_t v14 = c;
    CC_LONG v13 = 4;
  }
  return CC_SHA256_Update(v14, v12, v13);
}

uint64_t AirReflection::Node::node_as_MeshTypeInfo(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524291) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshTypeInfo::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshTypeInfo", 0x1Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
    int data = *v6;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v7 = *v6;
    if (v7)
    {
      uint64_t v8 = v6 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v9 = *v8++;
        int data = v9;
        CC_SHA256_Update(c, &data, 4u);
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 7u && (uint64_t v11 = v10[3]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v13 = *v12;
    if (v13)
    {
      uint64_t v14 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v15 = *v14++;
        int data = v15;
        CC_SHA256_Update(c, &data, 4u);
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 < 9u)
  {
    LODWORD(v17) = 0;
  }
  else
  {
    uint64_t v17 = v16[4];
    if (v17) {
      LODWORD(v17) = *(int *)((char *)a1 + v17);
    }
  }
  int data = v17;
  CC_SHA256_Update(c, &data, 4u);
  int v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 0xBu)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = v18[5];
    if (v19) {
      LODWORD(v19) = *(int *)((char *)a1 + v19);
    }
  }
  int data = v19;
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0xDu && (uint64_t v21 = v20[6]) != 0) {
    int v22 = *((unsigned __int8 *)a1 + v21);
  }
  else {
    int v22 = 1;
  }
  int data = v22;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_GlobalBinding(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524292) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::GlobalBinding::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.GlobalBinding", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    uint64_t v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (unsigned __int16 v12 = v11[3]) != 0)
  {
    uint64_t v13 = v12;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int v17 = *(int *)((char *)a1 + v13);
    uint64_t v14 = &v17;
  }
  else
  {
    int v18 = 0;
    uint64_t v14 = &v18;
  }
  return CC_SHA256_Update(c, v14, 4u);
}

uint64_t AirReflection::Node::node_as_InlineTypeInfo(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 524293) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::InlineTypeInfo::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.InlineTypeInfo", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *((unsigned __int8 *)a1 + v5);
  }
  else {
    int v6 = 255;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (unsigned __int16 v8 = v7[3]) != 0)
  {
    uint64_t v9 = v8;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v9);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (unsigned __int16 v11 = v10[4]) != 0)
  {
    uint64_t v12 = v11;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v12);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 < 0xBu)
  {
    LODWORD(v14) = 0;
  }
  else
  {
    uint64_t v14 = v13[5];
    if (v14) {
      LODWORD(v14) = *(int *)((char *)a1 + v14);
    }
  }
  int data = v14;
  CC_SHA256_Update(c, &data, 4u);
  int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0xDu)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    uint64_t v16 = v15[6];
    if (v16) {
      LODWORD(v16) = *(int *)((char *)a1 + v16);
    }
  }
  int data = v16;
  CC_SHA256_Update(c, &data, 4u);
  int v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xFu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[7];
    if (v18) {
      LODWORD(v18) = *(int *)((char *)a1 + v18);
    }
  }
  int data = v18;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 >= 0x11u && (uint64_t v20 = v19[8]) != 0)
  {
    uint64_t v21 = (unsigned int *)((char *)a1 + v20);
    uint64_t v22 = *v21;
    p_int data = (int *)((char *)v21 + v22 + 4);
    CC_LONG v24 = *(unsigned int *)((char *)v21 + v22);
    int v25 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v25 = c;
    CC_LONG v24 = 4;
  }
  CC_SHA256_Update(v25, p_data, v24);
  char v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 >= 0x13u && (unsigned __int16 v27 = v26[9]) != 0)
  {
    uint64_t v28 = v27;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v28);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  char v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 >= 0x15u && (unsigned __int16 v30 = v29[10]) != 0)
  {
    uint64_t v31 = v30;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v31);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_OpaqueType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 528384)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::OpaqueType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.OpaqueType", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  unsigned __int16 v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (uint64_t v15 = v14[5]) != 0)
  {
    uint64_t v16 = (unsigned int *)((char *)a1 + v15);
    uint64_t v17 = *v16;
    p_int data = (int *)((char *)v16 + v17 + 4);
    CC_LONG v19 = *(unsigned int *)((char *)v16 + v17);
    uint64_t v20 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v20 = c;
    CC_LONG v19 = 4;
  }
  return CC_SHA256_Update(v20, p_data, v19);
}

uint64_t AirReflection::Node::node_as_VoidType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528385) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VoidType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.VoidType", 0x16u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  unsigned __int16 v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v12 = *v10;
    if (v12)
    {
      int v13 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v14 = *v13++;
        int data = v14;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_BoolType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528386) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::BoolType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.BoolType", 0x16u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 1;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0) {
    int v9 = *(int *)((char *)a1 + v8);
  }
  else {
    int v9 = 1;
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_CharType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528387) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::CharType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.CharType", 0x16u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 1;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0) {
    int v9 = *(int *)((char *)a1 + v8);
  }
  else {
    int v9 = 1;
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_UCharType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528388) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UCharType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.UCharType", 0x17u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 1;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0) {
    int v9 = *(int *)((char *)a1 + v8);
  }
  else {
    int v9 = 1;
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_ShortType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528389) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ShortType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ShortType", 0x17u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 2;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0) {
    int v9 = *(int *)((char *)a1 + v8);
  }
  else {
    int v9 = 2;
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_UShortType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528390) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UShortType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.UShortType", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 2;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0) {
    int v9 = *(int *)((char *)a1 + v8);
  }
  else {
    int v9 = 2;
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_IntType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528391) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::IntType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.IntType", 0x15u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 4;
  }
  int data = v6;
  int v7 = 4;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 7u)
  {
    uint64_t v9 = v8[3];
    if (v9) {
      int v7 = *(int *)((char *)a1 + v9);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_UIntType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528392) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UIntType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.UIntType", 0x16u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 4;
  }
  int data = v6;
  int v7 = 4;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 7u)
  {
    uint64_t v9 = v8[3];
    if (v9) {
      int v7 = *(int *)((char *)a1 + v9);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_LongType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528393) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::LongType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.LongType", 0x16u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 8;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  int v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0) {
    int v9 = *(int *)((char *)a1 + v8);
  }
  else {
    int v9 = 8;
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_ULongType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528394) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ULongType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ULongType", 0x17u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 8;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  int v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0) {
    int v9 = *(int *)((char *)a1 + v8);
  }
  else {
    int v9 = 8;
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_LLongType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528395) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::LLongType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.LLongType", 0x17u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 16;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  int v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0) {
    int v9 = *(int *)((char *)a1 + v8);
  }
  else {
    int v9 = 16;
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_ULLongType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528396) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ULLongType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ULLongType", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 16;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  int v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0) {
    int v9 = *(int *)((char *)a1 + v8);
  }
  else {
    int v9 = 16;
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_HalfType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528397) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::HalfType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.HalfType", 0x16u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 2;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  int v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0) {
    int v9 = *(int *)((char *)a1 + v8);
  }
  else {
    int v9 = 2;
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_FloatType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528398) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::FloatType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.FloatType", 0x17u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 4;
  }
  int data = v6;
  int v7 = 4;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 7u)
  {
    uint64_t v9 = v8[3];
    if (v9) {
      int v7 = *(int *)((char *)a1 + v9);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_DoubleType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528399) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DoubleType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.DoubleType", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 8;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  int v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0) {
    int v9 = *(int *)((char *)a1 + v8);
  }
  else {
    int v9 = 8;
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_BFloatType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528400) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::BFloatType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.BFloatType", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0) {
    int v6 = *(int *)((char *)a1 + v5);
  }
  else {
    int v6 = 2;
  }
  int data = v6;
  CC_SHA256_Update(c, &data, 4u);
  int v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0) {
    int v9 = *(int *)((char *)a1 + v8);
  }
  else {
    int v9 = 2;
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t v12 = (int *)((char *)a1 + v11 + *(unsigned int *)((char *)a1 + v11));
    int data = *v12;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v14 = *v12;
    if (v14)
    {
      uint64_t v15 = v12 + 1;
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v16 = *v15++;
        int data = v16;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_VectorType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528401) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VectorType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.VectorType", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *(int *)((char *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_PackedVectorType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528402) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PackedVectorType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PackedVectorType", 0x1Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *(int *)((char *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MatrixType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528403) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MatrixType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MatrixType", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *(int *)((char *)a1 + v18);
    }
  }
  int data = v18;
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 0xFu)
  {
    LODWORD(v20) = 0;
  }
  else
  {
    uint64_t v20 = v19[7];
    if (v20) {
      LODWORD(v20) = *(int *)((char *)a1 + v20);
    }
  }
  int data = v20;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_FunctionType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528404) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::FunctionType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.FunctionType", 0x1Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xDu && (uint64_t v18 = v17[6]) != 0)
  {
    CC_LONG v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    int data = *v19;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v21 = *v19;
    if (v21)
    {
      uint64_t v22 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v23 = *v22++;
        int data = v23;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_PointerType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528405) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PointerType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PointerType", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_LValueReferenceType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528406) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::LValueReferenceType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.LValueReferenceType", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RValueReferenceType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528407) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RValueReferenceType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RValueReferenceType", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_ArrayType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528408) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ArrayType", 0x17u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *(int *)((char *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_EnumType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528409) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::EnumType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.EnumType", 0x16u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (uint64_t v15 = v14[5]) != 0)
  {
    uint64_t v16 = (unsigned int *)((char *)a1 + v15);
    uint64_t v17 = *v16;
    p_int data = (int *)((char *)v16 + v17 + 4);
    CC_LONG v19 = *(unsigned int *)((char *)v16 + v17);
    uint64_t v20 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v20 = c;
    CC_LONG v19 = 4;
  }
  CC_SHA256_Update(v20, p_data, v19);
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 0xDu && (unsigned __int16 v22 = v21[6]) != 0)
  {
    uint64_t v23 = v22;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v23);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RecordBase(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528410) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RecordBase::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RecordBase", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (unsigned __int16 v9 = v8[4]) != 0)
  {
    uint64_t v10 = v9;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v10);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RecordField(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528411) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RecordField::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RecordField", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (unsigned __int16 v9 = v8[4]) != 0)
  {
    uint64_t v10 = v9;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v10);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 0xBu && (uint64_t v12 = v11[5]) != 0)
  {
    int v13 = (unsigned int *)((char *)a1 + v12);
    uint64_t v14 = *v13;
    p_int data = (int *)((char *)v13 + v14 + 4);
    CC_LONG v16 = *(unsigned int *)((char *)v13 + v14);
    uint64_t v17 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v17 = c;
    CC_LONG v16 = 4;
  }
  CC_SHA256_Update(v17, p_data, v16);
  uint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 >= 0xDu && (uint64_t v19 = v18[6]) != 0)
  {
    uint64_t v20 = (unsigned int *)((char *)a1 + v19 + *(unsigned int *)((char *)a1 + v19));
    int data = *v20;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v21 = *v20;
    if (v21)
    {
      unsigned __int16 v22 = (int *)(v20 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v23 = *v22++;
        int data = v23;
        CC_SHA256_Update(c, &data, 4u);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  CC_LONG v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 >= 0xFu)
  {
    unsigned __int16 v25 = v24[7];
    if (v25) {
      return AirReflection::BitfieldInfo::HashImpl((int *)((char *)a1 + v25), c);
    }
  }
  int data = 0;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_StructType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528412) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::StructType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.StructType", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (uint64_t v15 = v14[5]) != 0)
  {
    CC_LONG v16 = (unsigned int *)((char *)a1 + v15);
    uint64_t v17 = *v16;
    p_int data = (int *)((char *)v16 + v17 + 4);
    CC_LONG v19 = *(unsigned int *)((char *)v16 + v17);
    uint64_t v20 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v20 = c;
    CC_LONG v19 = 4;
  }
  CC_SHA256_Update(v20, p_data, v19);
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 0xDu && (uint64_t v22 = v21[6]) != 0)
  {
    int v23 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    int data = *v23;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v25 = *v23;
    if (v25)
    {
      char v26 = (int *)(v23 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v27 = *v26++;
        int data = v27;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v25;
      }
      while (v25);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_UnionType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 528413) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UnionType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.UnionType", 0x17u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (uint64_t v15 = v14[5]) != 0)
  {
    CC_LONG v16 = (unsigned int *)((char *)a1 + v15);
    uint64_t v17 = *v16;
    p_int data = (int *)((char *)v16 + v17 + 4);
    CC_LONG v19 = *(unsigned int *)((char *)v16 + v17);
    uint64_t v20 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    uint64_t v20 = c;
    CC_LONG v19 = 4;
  }
  CC_SHA256_Update(v20, p_data, v19);
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 0xDu && (uint64_t v22 = v21[6]) != 0)
  {
    int v23 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    int data = *v23;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v25 = *v23;
    if (v25)
    {
      char v26 = (int *)(v23 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v27 = *v26++;
        int data = v27;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v25;
      }
      while (v25);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_ArrayOfType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 532480)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::ArrayOfType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ArrayOfType", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *(int *)((char *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_ArrayRefOfType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532481) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ArrayRefOfType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ArrayRefOfType", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture1dType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532482) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture1dType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Texture1dType", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture1dArrayType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532483) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture1dArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Texture1dArrayType", 0x20u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture2dType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532484) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture2dType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Texture2dType", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture2dArrayType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532485) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture2dArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Texture2dArrayType", 0x20u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture3dType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532486) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture3dType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Texture3dType", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_TextureCubeType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532487) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::TextureCubeType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.TextureCubeType", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_TextureCubeArrayType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532488) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::TextureCubeArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.TextureCubeArrayType", 0x22u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture2dMsType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532489) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture2dMsType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Texture2dMsType", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Texture2dMsArrayType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532490) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Texture2dMsArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Texture2dMsArrayType", 0x22u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_TextureBuffer1dType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532491) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::TextureBuffer1dType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.TextureBuffer1dType", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Depth2dType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532492) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Depth2dType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Depth2dType", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Depth2dArrayType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532493) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Depth2dArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Depth2dArrayType", 0x1Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_DepthCubeType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532494) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DepthCubeType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.DepthCubeType", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_DepthCubeArrayType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532495) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::DepthCubeArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.DepthCubeArrayType", 0x20u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Depth2dMsType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532496) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Depth2dMsType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Depth2dMsType", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_Depth2dMsArrayType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532497) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Depth2dMsArrayType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.Depth2dMsArrayType", 0x20u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  uint64_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 < 0xDu)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[6];
    if (v18) {
      LODWORD(v18) = *((unsigned __int8 *)a1 + v18);
    }
  }
  int data = v18;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_SamplerType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532498) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SamplerType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.SamplerType", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v12 = *v10;
    if (v12)
    {
      int v13 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v14 = *v13++;
        int data = v14;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_PatchControlPointType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532499) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::PatchControlPointType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.PatchControlPointType", 0x23u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_ImageblockType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532500) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ImageblockType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ImageblockType", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 < 0xBu)
  {
    LODWORD(v15) = 0;
  }
  else
  {
    uint64_t v15 = v14[5];
    if (v15) {
      LODWORD(v15) = *((unsigned __int8 *)a1 + v15);
    }
  }
  int data = v15;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 >= 0xDu && (unsigned __int16 v17 = v16[6]) != 0)
  {
    uint64_t v18 = v17;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v18);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_R8UNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532501) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::R8UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.R8UNormType", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_R8SNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532502) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::R8SNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.R8SNormType", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_R16UNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532503) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::R16UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.R16UNormType", 0x1Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_R16SNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532504) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::R16SNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.R16SNormType", 0x1Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RG8UNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532505) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RG8UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RG8UNormType", 0x1Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RG8SNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532506) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RG8SNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RG8SNormType", 0x1Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RG16UNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532507) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RG16UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RG16UNormType", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RG16SNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532508) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RG16SNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RG16SNormType", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RGBA8UNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532509) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RGBA8UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RGBA8UNormType", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RGBA8SNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532510) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RGBA8SNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RGBA8SNormType", 0x1Cu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RGBA16UNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532511) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RGBA16UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RGBA16UNormType", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RGBA16SNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532512) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RGBA16SNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RGBA16SNormType", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_SRGBA8UNormType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532513) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::SRGBA8UNormType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.SRGBA8UNormType", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RGB10A2Type(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532514) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RGB10A2Type::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RGB10A2Type", 0x19u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RG11B10FType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532515) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RG11B10FType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RG11B10FType", 0x1Au);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_RGB9E5Type(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532516) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RGB9E5Type::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RGB9E5Type", 0x18u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_CommandBufferType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532517) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::CommandBufferType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.CommandBufferType", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v12 = *v10;
    if (v12)
    {
      int v13 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v14 = *v13++;
        int data = v14;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_ComputePipelineStateType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532518) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::ComputePipelineStateType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.ComputePipelineStateType", 0x26u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v12 = *v10;
    if (v12)
    {
      int v13 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v14 = *v13++;
        int data = v14;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_RenderPipelineStateType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532519) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RenderPipelineStateType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RenderPipelineStateType", 0x25u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v12 = *v10;
    if (v12)
    {
      int v13 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v14 = *v13++;
        int data = v14;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_InterpolantType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532520) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::InterpolantType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.InterpolantType", 0x1Du);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 < 0xBu)
  {
    LOBYTE(v15) = 0;
  }
  else
  {
    uint64_t v15 = v14[5];
    if (v15) {
      LOBYTE(v15) = *((unsigned char *)a1 + v15) != 0;
    }
  }
  LOBYTE(data) = v15;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 >= 0xDu && (unsigned __int16 v17 = v16[6]) != 0)
  {
    uint64_t v18 = v17;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v18);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_VisibleFunctionTableType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532521) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::VisibleFunctionTableType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.VisibleFunctionTableType", 0x26u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_IntersectionFunctionTableType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532522) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::IntersectionFunctionTableType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.IntersectionFunctionTableType", 0x2Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 < 0xBu)
  {
    LOBYTE(v15) = 0;
  }
  else
  {
    uint64_t v15 = v14[5];
    if (v15) {
      LOBYTE(v15) = *((unsigned char *)a1 + v15) != 0;
    }
  }
  LOBYTE(data) = v15;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 < 0xDu)
  {
    LOBYTE(v17) = 0;
  }
  else
  {
    uint64_t v17 = v16[6];
    if (v17) {
      LOBYTE(v17) = *((unsigned char *)a1 + v17) != 0;
    }
  }
  LOBYTE(data) = v17;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 0xFu)
  {
    LOBYTE(v19) = 0;
  }
  else
  {
    uint64_t v19 = v18[7];
    if (v19) {
      LOBYTE(v19) = *((unsigned char *)a1 + v19) != 0;
    }
  }
  LOBYTE(data) = v19;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0x11u)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[8];
    if (v21) {
      LOBYTE(v21) = *((unsigned char *)a1 + v21) != 0;
    }
  }
  LOBYTE(data) = v21;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v22 < 0x13u)
  {
    LOBYTE(v23) = 0;
  }
  else
  {
    uint64_t v23 = v22[9];
    if (v23) {
      LOBYTE(v23) = *((unsigned char *)a1 + v23) != 0;
    }
  }
  LOBYTE(data) = v23;
  CC_SHA256_Update(c, &data, 1u);
  CC_LONG v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 < 0x15u)
  {
    LOBYTE(v25) = 0;
  }
  else
  {
    uint64_t v25 = v24[10];
    if (v25) {
      LOBYTE(v25) = *((unsigned char *)a1 + v25) != 0;
    }
  }
  LOBYTE(data) = v25;
  CC_SHA256_Update(c, &data, 1u);
  char v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 0x17u)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[11];
    if (v27) {
      LOBYTE(v27) = *((unsigned char *)a1 + v27) != 0;
    }
  }
  LOBYTE(data) = v27;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v28 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v28 < 0x19u)
  {
    LODWORD(v29) = 0;
  }
  else
  {
    uint64_t v29 = v28[12];
    if (v29) {
      LODWORD(v29) = *(int *)((char *)a1 + v29);
    }
  }
  int data = v29;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_AccelerationStructureType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532523) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::AccelerationStructureType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.AccelerationStructureType", 0x27u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 < 0xBu)
  {
    LOBYTE(v15) = 0;
  }
  else
  {
    uint64_t v15 = v14[5];
    if (v15) {
      LOBYTE(v15) = *((unsigned char *)a1 + v15) != 0;
    }
  }
  LOBYTE(data) = v15;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 < 0xDu)
  {
    LOBYTE(v17) = 0;
  }
  else
  {
    uint64_t v17 = v16[6];
    if (v17) {
      LOBYTE(v17) = *((unsigned char *)a1 + v17) != 0;
    }
  }
  LOBYTE(data) = v17;
  CC_SHA256_Update(c, &data, 1u);
  uint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 0xFu)
  {
    LOBYTE(v19) = 0;
  }
  else
  {
    uint64_t v19 = v18[7];
    if (v19) {
      LOBYTE(v19) = *((unsigned char *)a1 + v19) != 0;
    }
  }
  LOBYTE(data) = v19;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t AirReflection::Node::node_as_MeshType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532524) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshType", 0x16u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v10;
    if (v11)
    {
      uint64_t v12 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  int v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 >= 0xBu && (unsigned __int16 v15 = v14[5]) != 0)
  {
    uint64_t v16 = v15;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v16);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 0xDu && (unsigned __int16 v18 = v17[6]) != 0)
  {
    uint64_t v19 = v18;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v19);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 0xFu)
  {
    LODWORD(v21) = 0;
  }
  else
  {
    uint64_t v21 = v20[7];
    if (v21) {
      LODWORD(v21) = *(int *)((char *)a1 + v21);
    }
  }
  int data = v21;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v22 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v22 < 0x11u)
  {
    LODWORD(v23) = 0;
  }
  else
  {
    uint64_t v23 = v22[8];
    if (v23) {
      LODWORD(v23) = *(int *)((char *)a1 + v23);
    }
  }
  int data = v23;
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v24 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v24 < 0x13u)
  {
    LODWORD(v25) = 0;
  }
  else
  {
    uint64_t v25 = v24[9];
    if (v25) {
      LODWORD(v25) = *((unsigned __int8 *)a1 + v25);
    }
  }
  int data = v25;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshGridPropertiesType(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 532525) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshGridPropertiesType::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshGridPropertiesType", 0x24u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (unsigned int *)((char *)a1 + v9 + *(unsigned int *)((char *)a1 + v9));
    int data = *v10;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v12 = *v10;
    if (v12)
    {
      int v13 = (int *)(v10 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v14 = *v13++;
        int data = v14;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_AddressSpaceTypeQual(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 536576)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::AddressSpaceTypeQual::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.AddressSpaceTypeQual", 0x22u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *((unsigned __int8 *)a1 + v5);
    }
  }
  int data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_ClipDistanceAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 540672)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::Node::node_as_FunctionConstantPredicateAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540673) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::FunctionConstantPredicateAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.FunctionConstantPredicateAttr", 0x2Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    return AirReflection::BoolValue::HashImpl((unsigned char *)a1 + v5, c);
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
}

uint64_t AirReflection::Node::node_as_LocationIndexAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540674) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::LocationIndexAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.LocationIndexAttr", 0x1Fu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    uint64_t v6 = v5;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v6);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (unsigned __int16 v8 = v7[3]) != 0)
  {
    uint64_t v9 = v8;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int data = *(int *)((char *)a1 + v9);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_PointSizeAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540675) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PositionAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540676) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PrimitiveCulledAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540677) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_PrimitiveIDAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540678) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_RenderTargetAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540679) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::RenderTargetAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.RenderTargetAttr", 0x1Eu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    uint64_t v6 = v5;
    CC_SHA256_Update(c, "AirReflection.UIntValue", 0x17u);
    int v9 = *(int *)((char *)a1 + v6);
    p_int data = &v9;
  }
  else
  {
    int data = 0;
    p_int data = &data;
  }
  return CC_SHA256_Update(c, p_data, 4u);
}

uint64_t AirReflection::Node::node_as_RenderTargetArrayIndexAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540680) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_ViewportArrayIndexAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540681) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_UserAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540682) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::UserAttr::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.UserAttr", 0x16u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    CC_LONG v8 = *(unsigned int *)((char *)v6 + v7);
    return CC_SHA256_Update(c, (char *)v6 + v7 + 4, v8);
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
}

uint64_t AirReflection::Node::node_as_InvariantAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540683) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_SharedAttr(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 540684) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::Node::node_as_MeshEmulationValueGroup(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 < 5 || !v1[2]) {
    return 0;
  }
  uint64_t v3 = 0;
  if (v2 >= 7 && *(_DWORD *)((char *)this + v1[2]) == 544768)
  {
    uint64_t v3 = v1[3];
    if (v1[3]) {
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
    }
  }
  return v3;
}

uint64_t AirReflection::MeshEmulation::ValueGroup::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshEmulation.ValueGroup", 0x26u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  CC_LONG v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 < 9u)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v9 = v8[4];
    if (v9) {
      LODWORD(v9) = *(int *)((char *)a1 + v9);
    }
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 >= 0xBu && (unsigned __int16 v11 = v10[5]) != 0)
  {
    uint64_t v12 = v11;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v12);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  int v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 < 0xDu)
  {
    LODWORD(v14) = 0;
  }
  else
  {
    uint64_t v14 = v13[6];
    if (v14) {
      LODWORD(v14) = *(int *)((char *)a1 + v14);
    }
  }
  int data = v14;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshEmulationBlock(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 544769) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshEmulation::Block::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshEmulation.Block", 0x21u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
    int data = *v6;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v8 = *v6;
    if (v8)
    {
      uint64_t v9 = (int *)(v6 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v10 = *v9++;
        int v12 = v10;
        uint64_t result = CC_SHA256_Update(c, &v12, 4u);
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    int v13 = 0;
    return CC_SHA256_Update(c, &v13, 4u);
  }
  return result;
}

uint64_t AirReflection::Node::node_as_MeshEmulationMeshLayout(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 544770) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshEmulation::MeshLayout::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshEmulation.MeshLayout", 0x26u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = v4[2];
    if (v5) {
      LODWORD(v5) = *(int *)((char *)a1 + v5);
    }
  }
  int data = v5;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    uint64_t v7 = v6[3];
    if (v7) {
      LODWORD(v7) = *(int *)((char *)a1 + v7);
    }
  }
  int data = v7;
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v8 < 9u)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v9 = v8[4];
    if (v9) {
      LODWORD(v9) = *(int *)((char *)a1 + v9);
    }
  }
  int data = v9;
  CC_SHA256_Update(c, &data, 4u);
  int v10 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v10 < 0xBu)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    uint64_t v11 = v10[5];
    if (v11) {
      LODWORD(v11) = *(int *)((char *)a1 + v11);
    }
  }
  int data = v11;
  CC_SHA256_Update(c, &data, 4u);
  int v12 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v12 >= 0xDu && (unsigned __int16 v13 = v12[6]) != 0)
  {
    uint64_t v14 = v13;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v14);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  unsigned __int16 v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 0xFu && (unsigned __int16 v16 = v15[7]) != 0)
  {
    uint64_t v17 = v16;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v17);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshEmulationMeshKernel(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 544771) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshEmulation::MeshKernel::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshEmulation.MeshKernel", 0x26u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    int v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 < 7u)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v12 = v11[3];
    if (v12) {
      LODWORD(v12) = *(int *)((char *)a1 + v12);
    }
  }
  int data = v12;
  CC_SHA256_Update(c, &data, 4u);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (unsigned __int16 v14 = v13[4]) != 0)
  {
    uint64_t v15 = v14;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v15);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshEmulationMeshVertex(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 544772) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshEmulation::MeshVertex::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshEmulation.MeshVertex", 0x26u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    int v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 < 7u)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v12 = v11[3];
    if (v12) {
      LODWORD(v12) = *(int *)((char *)a1 + v12);
    }
  }
  int data = v12;
  CC_SHA256_Update(c, &data, 4u);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (unsigned __int16 v14 = v13[4]) != 0)
  {
    uint64_t v15 = v14;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v15);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshEmulationObjectKernel(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 544773) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshEmulation::ObjectKernel::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshEmulation.ObjectKernel", 0x28u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    int v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 < 7u)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    uint64_t v12 = v11[3];
    if (v12) {
      LODWORD(v12) = *(int *)((char *)a1 + v12);
    }
  }
  int data = v12;
  CC_SHA256_Update(c, &data, 4u);
  unsigned __int16 v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 9u && (unsigned __int16 v14 = v13[4]) != 0)
  {
    uint64_t v15 = v14;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v15);
  }
  else
  {
    int data = 0;
  }
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t AirReflection::Node::node_as_MeshEmulationFragmentAnalysisResult(AirReflection::Node *this)
{
  uint64_t v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  unsigned int v2 = *v1;
  if (v2 >= 5
    && v1[2]
    && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 544774) : (v3 = 0), v3 && (uint64_t v4 = v1[3]) != 0))
  {
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  }
  else
  {
    return 0;
  }
}

uint64_t AirReflection::MeshEmulation::FragmentAnalysisResult::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.MeshEmulation.FragmentAnalysisResult", 0x32u);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (unsigned int *)((char *)a1 + v5);
    uint64_t v7 = *v6;
    p_int data = (int *)((char *)v6 + v7 + 4);
    CC_LONG v9 = *(unsigned int *)((char *)v6 + v7);
    int v10 = c;
  }
  else
  {
    int data = 0;
    p_int data = &data;
    int v10 = c;
    CC_LONG v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (uint64_t v12 = v11[3]) != 0)
  {
    unsigned __int16 v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    int v20 = *v13;
    uint64_t result = CC_SHA256_Update(c, &v20, 4u);
    uint64_t v15 = *v13;
    if (v15)
    {
      unsigned __int16 v16 = v13 + 1;
      uint64_t v17 = v13 + 1;
      do
      {
        unsigned int v18 = *v17++;
        uint64_t result = CC_SHA256_Update(c, (char *)v16 + v18 + 4, *(unsigned int *)((char *)v16 + v18));
        unsigned __int16 v16 = v17;
        --v15;
      }
      while (v15);
    }
  }
  else
  {
    int v21 = 0;
    return CC_SHA256_Update(c, &v21, 4u);
  }
  return result;
}

uint64_t AirReflection::StitchingInfo::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.StitchingInfo", 0x1Bu);
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (unsigned __int16 v5 = v4[2]) != 0)
  {
    uint64_t v6 = v5;
    CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
    int data = *(int *)((char *)a1 + v6);
  }
  else
  {
    int data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  uint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (uint64_t v8 = v7[3]) != 0)
  {
    CC_LONG v9 = (unsigned int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
    int data = *v9;
    uint64_t result = CC_SHA256_Update(c, &data, 4u);
    uint64_t v11 = *v9;
    if (v11)
    {
      uint64_t v12 = (int *)(v9 + 1);
      do
      {
        CC_SHA256_Update(c, "AirReflection.NodeId", 0x14u);
        int v13 = *v12++;
        int data = v13;
        uint64_t result = CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    int data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t AirReflection::BitfieldInfo::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.BitfieldInfo", 0x1Au);
  int data = *a1;
  CC_SHA256_Update(c, &data, 4u);
  int v6 = a1[1];
  CC_SHA256_Update(c, &v6, 4u);
  int v7 = a1[2];
  return CC_SHA256_Update(c, &v7, 4u);
}

uint64_t AirReflection::BoolValue::HashImpl(unsigned char *a1, CC_SHA256_CTX *c)
{
  CC_SHA256_Update(c, "AirReflection.BoolValue", 0x17u);
  BOOL data = *a1 != 0;
  return CC_SHA256_Update(c, &data, 1u);
}

llvm::Value *expandVector(llvm::Type *a1, llvm::IRBuilderBase *a2, llvm::Value *a3, unsigned int a4)
{
  unsigned __int16 v5 = a3;
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(llvm::Type **)a3;
  int v9 = *(unsigned __int8 *)(*(void *)a3 + 8);
  if (*(void *)a3) {
    BOOL v10 = v9 == 18;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10) {
    unsigned int v11 = *((_DWORD *)v8 + 8);
  }
  else {
    unsigned int v11 = 1;
  }
  if (v11 < a4)
  {
    if ((v9 & 0xFE) == 0x12)
    {
      uint64_t v12 = llvm::UndefValue::get();
      long long v21 = xmmword_2557AA3A0;
      __int16 v20 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)a2, (uint64_t)v5, v12, (uint64_t)&v21, a4, (uint64_t)v19);
    }
    else
    {
      vectorTypeGet(v8);
      unsigned __int16 v14 = (llvm::Value *)llvm::UndefValue::get();
      llvm::Type::getInt32Ty(a1, v15);
      unsigned __int16 v16 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v20 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(a2, v14, v5, v16, (const llvm::Twine *)v19, v17);
    }
  }
  return v5;
}

uint64_t llvm::IRBuilderBase::CreateFPTrunc(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((unsigned char *)this + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return llvm::IRBuilderBase::CreateCast((uint64_t)this, 45, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t llvm::IRBuilderBase::CreateFPExt(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((unsigned char *)this + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  }
  return llvm::IRBuilderBase::CreateCast((uint64_t)this, 46, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t callUnpackFunction(uint64_t a1, uint64_t a2, char *__s, uint64_t a4, void *a5)
{
  _DWORD v16[2] = *MEMORY[0x263EF8340];
  v16[0] = a5;
  if (__s) {
    strlen(__s);
  }
  uint64_t Function = llvm::Module::getFunction();
  if (Function) {
    goto LABEL_7;
  }
  v16[1] = *a5;
  char v10 = 1;
  uint64_t v11 = llvm::FunctionType::get();
  HIBYTE(v15) = 1;
  if (*__s)
  {
    v14[0] = __s;
    char v10 = 3;
  }
  LOBYTE(v15) = v10;
  uint64_t Function = llvm::Function::Create(v11, 0, (uint64_t)v14, a1);
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  if (Function) {
LABEL_7:
  }
    uint64_t v12 = *(void *)(Function + 24);
  else {
    uint64_t v12 = 0;
  }
  __int16 v15 = 257;
  uint64_t result = llvm::IRBuilderBase::CreateCall(a2, v12, Function, (uint64_t)v16, 1, (uint64_t)v14, 0);
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFFC | 1;
  return result;
}

uint64_t llvm::IRBuilderBase::CreateFDiv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a1 + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp();
  }
  uint64_t result = llvm::IRBuilderBase::foldConstant(a1, 21, a2, a3, a4);
  if (!result)
  {
    uint64_t v9 = llvm::BinaryOperator::Create();
    uint64_t v10 = llvm::IRBuilderBase::setFPAttrs(a1, v9, a5);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v10, a4);
  }
  return result;
}

llvm::Type **llvm::IRBuilderBase::CreateZExtOrTrunc(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  unsigned int v9 = llvm::Type::getScalarSizeInBits(a3);
  if (ScalarSizeInBits >= v9)
  {
    if (ScalarSizeInBits <= v9) {
      return a2;
    }
    uint64_t v10 = 38;
  }
  else
  {
    uint64_t v10 = 39;
  }
  return (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this, v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

llvm::Type **llvm::IRBuilderBase::CreateSExtOrTrunc(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  unsigned int v9 = llvm::Type::getScalarSizeInBits(a3);
  if (ScalarSizeInBits >= v9)
  {
    if (ScalarSizeInBits <= v9) {
      return a2;
    }
    uint64_t v10 = 38;
  }
  else
  {
    uint64_t v10 = 40;
  }
  return (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this, v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

llvm::Value *loadPackedVector(llvm::IRBuilderBase *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v8 = **(void **)(a3 + 16);
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v10 = **(llvm::Type ***)(v8 + 16);
  int ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v10);
  vectorTypeGet(v10);
  Insertuint64_t Element = (llvm::Value *)llvm::UndefValue::get();
  llvm::Type::getInt32Ty(*(llvm::Type **)a3, v13);
  if (v9)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v9;
    LODWORD(v16) = (ScalarSizeInBits + 7) >> 3;
    if (v16 >= a4) {
      unint64_t v16 = a4;
    }
    else {
      unint64_t v16 = v16;
    }
    unint64_t v17 = __clz(v16) ^ 0x13F;
    if (v16) {
      __int16 v18 = v17;
    }
    else {
      __int16 v18 = 0;
    }
    do
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v27 = (uint64_t *)llvm::ConstantInt::get();
      uint64_t v28 = llvm::ConstantInt::get();
      uint64_t v29 = llvm::ConstantInt::get();
      __int16 v26 = 257;
      uint64_t v19 = llvm::IRBuilderBase::CreateGEP((uint64_t)a1, a3, a2, &v27, 3, (uint64_t)v25);
      __int16 v20 = *(llvm::Type **)(v19 + 72);
      __int16 v26 = 257;
      uint64_t AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t)a1, v20, v19, v18, 0, (uint64_t)v25);
      uint64_t v22 = (llvm::Value *)llvm::ConstantInt::get();
      __int16 v26 = 257;
      Insertuint64_t Element = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(a1, InsertElement, AlignedLoad, v22, (const llvm::Twine *)v25, v23);
      ++v14;
    }
    while (v15 != v14);
  }
  return InsertElement;
}

uint64_t getUnpackedVectorType(llvm::LLVMContext *a1, llvm::Type *this, int a3)
{
  return llvm::StructType::get();
}

uint64_t updateMTLGLFragmentInputList(int a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a1) {
    return (4
  }
                           * (MTLDataTypeGetVectorDataType((a2 >> 5) & 0x3F, ((a2 >> 11) & 3) + 1) & 0x3F)) | ((a2 & 0x1F) << 8) | 0xFFFF8000;
  return v2;
}

uint64_t MTLAddVertexFetchingToModulePass::expandVertexOutputWithFragmentInput(uint64_t a1, llvm::Type *a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6, unsigned __int16 *a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v9 = a7;
  uint64_t v10 = a6;
  uint64_t v12 = a2;
  uint64_t v105 = *MEMORY[0x263EF8340];
  if (a7) {
    LODWORD(v13) = *a7;
  }
  else {
    uint64_t v13 = (uint64_t)(a6[1] - *a6) >> 5;
  }
  uint64_t v14 = v13;
  if (!v13) {
    return a3;
  }
  uint64_t v15 = 0;
  uint64_t v16 = a9;
  long long v100 = 0u;
  long long v101 = 0u;
  int v102 = 1065353216;
  do
  {
    while (!v9)
    {
      uint64_t v20 = *v10;
      uint64_t v21 = *v10 + 32 * v15;
      size_t v22 = *(void *)(v21 + 16);
      if (v22 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = *(const void **)(v21 + 8);
      if (v22 >= 0x17)
      {
        __srCC_SHA256_CTX c = *(void **)(v21 + 8);
        uint64_t v25 = v16;
        __int16 v26 = v10;
        uint64_t v27 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17) {
          uint64_t v27 = v22 | 7;
        }
        uint64_t v28 = v27 + 1;
        p_dst = (long long *)operator new(v27 + 1);
        *((void *)&__dst + 1) = v22;
        *(void *)&long long v104 = v28 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
        uint64_t v10 = v26;
        uint64_t v16 = v25;
        uint64_t v9 = 0;
        uint64_t v23 = __src;
      }
      else
      {
        BYTE7(v104) = *(void *)(v21 + 16);
        p_dst = &__dst;
        if (!v22) {
          goto LABEL_27;
        }
      }
      memmove(p_dst, v23, v22);
LABEL_27:
      *((unsigned char *)p_dst + v22) = 0;
      int v29 = *(_DWORD *)(v20 + 32 * v15 + 24);
      v98[0] = &__dst;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v100, (unsigned __int8 *)&__dst, (uint64_t)&std::piecewise_construct, (long long **)v98)+ 10) = v29;
      uint64_t v12 = a2;
      if (SBYTE7(v104) < 0) {
        operator delete((void *)__dst);
      }
      if (++v15 == v14)
      {
        uint64_t v32 = a4;
        uint64_t v31 = (uint64_t *)a8;
        unint64_t v33 = *(unsigned int *)(a4 + 8);
        goto LABEL_44;
      }
    }
    __int16 updated = updateMTLGLFragmentInputList(v16, v9[v15 + 1]);
    int v18 = updated >> 2;
    if ((updated & 3) != 0)
    {
      if ((updated & 3) != 1) {
        abort();
      }
      long long __dst = 0uLL;
      *(void *)&long long v104 = 0;
      unsigned int v19 = (updated >> 8) & 0x1F;
      if (v19 == 3)
      {
        std::string::basic_string[abi:ne180100]<0>(v98, "user(sec_front_color)");
        if (SBYTE7(v104) < 0) {
          operator delete((void *)__dst);
        }
        long long __dst = *(_OWORD *)v98;
        *(void *)&long long v104 = v99;
        v98[0] = &__dst;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v100, (unsigned __int8 *)&__dst, (uint64_t)&std::piecewise_construct, (long long **)v98)+ 10) = v18;
        std::string::basic_string[abi:ne180100]<0>(v98, "user(sec_back_color)");
        if (SBYTE7(v104) < 0) {
          operator delete((void *)__dst);
        }
      }
      else
      {
        if (v19 != 2)
        {
LABEL_39:
          if ((SBYTE7(v104) & 0x80000000) == 0) {
            goto LABEL_42;
          }
          uint64_t v30 = (void *)__dst;
          goto LABEL_41;
        }
        std::string::basic_string[abi:ne180100]<0>(v98, "user(front_color)");
        if (SBYTE7(v104) < 0) {
          operator delete((void *)__dst);
        }
        long long __dst = *(_OWORD *)v98;
        *(void *)&long long v104 = v99;
        v98[0] = &__dst;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v100, (unsigned __int8 *)&__dst, (uint64_t)&std::piecewise_construct, (long long **)v98)+ 10) = v18;
        std::string::basic_string[abi:ne180100]<0>(v98, "user(back_color)");
        if (SBYTE7(v104) < 0) {
          operator delete((void *)__dst);
        }
      }
      long long __dst = *(_OWORD *)v98;
      *(void *)&long long v104 = v99;
      v98[0] = &__dst;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v100, (unsigned __int8 *)&__dst, (uint64_t)&std::piecewise_construct, (long long **)v98)+ 10) = v18;
      goto LABEL_39;
    }
    long long __dst = 0u;
    long long v104 = 0u;
    if (((updated >> 8) & 0x3F) - 8 > 7 || updated < 0) {
      snprintf((char *)&__dst, 0x1FuLL, "user(slot%u)");
    }
    else {
      snprintf((char *)&__dst, 0x1FuLL, "user(tex_coord%u)");
    }
    std::string::basic_string[abi:ne180100]<0>(v98, (char *)&__dst);
    __p[0] = v98;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v100, (unsigned __int8 *)v98, (uint64_t)&std::piecewise_construct, (long long **)__p)+ 10) = v18;
    if (SHIBYTE(v99) < 0)
    {
      uint64_t v30 = v98[0];
LABEL_41:
      operator delete(v30);
    }
LABEL_42:
    ++v15;
  }
  while (v15 != v14);
  uint64_t v32 = a4;
  uint64_t v31 = (uint64_t *)a8;
  unint64_t v33 = *(unsigned int *)(a4 + 8);
  std::vector<MTLAddVertexFetchingToModulePass::ModifiedOutput>::resize(a8, v33);
LABEL_44:
  std::vector<llvm::Type *>::vector(v98, v33);
  if (!v33)
  {
    uint64_t v51 = (uint64_t *)v101;
    if (!(void)v101) {
      goto LABEL_145;
    }
    goto LABEL_73;
  }
  uint64_t v34 = 0;
  char __srca = 0;
  while (2)
  {
    uint64_t v35 = *v31;
    uint64_t v36 = *(void *)(v32 - 8 * *(unsigned int *)(v32 + 8) + 8 * v34);
    uint64_t String = llvm::MDString::getString(*(llvm::MDString **)(v36 - 8 * *(unsigned int *)(v36 + 8)));
    uint64_t v39 = a3;
    if (*(unsigned char *)(a3 + 8) == 16) {
      uint64_t v39 = *(void *)(*(void *)(a3 + 16) + 8 * v34);
    }
    if (v38 == 17)
    {
      BOOL v40 = *(void *)String == 0x747265762E726961 && *(void *)(String + 8) == 0x757074756F5F7865;
      if (v40 && *(unsigned char *)(String + 16) == 116)
      {
        uint64_t v43 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v36 - 8 * *(unsigned int *)(v36 + 8) + 8));
        if (v43)
        {
          std::string::basic_string[abi:ne180100](&__dst, v43, v42);
        }
        else
        {
          long long __dst = 0uLL;
          *(void *)&long long v104 = 0;
        }
        CC_LONG v44 = std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::find<std::string>(&v100, (unsigned __int8 *)&__dst);
        uint64_t v45 = v44;
        if (SBYTE7(v104) < 0)
        {
          operator delete((void *)__dst);
          if (!v45) {
            goto LABEL_68;
          }
        }
        else if (!v44)
        {
          goto LABEL_68;
        }
        if (v9)
        {
          int v46 = *((_DWORD *)v45 + 10);
          uint64_t ComponentType = MTLDataTypeGetComponentType(v46);
          unsigned int ComponentCount = MTLDataTypeGetComponentCount(v46);
          char v49 = ComponentCount;
          uint64_t LLVMVectorType = MTLFrameworkPass::getLLVMVectorType(a2, (llvm::LLVMContext *)ComponentType, ComponentCount);
          if (LLVMVectorType != v39)
          {
            *(_WORD *)(v35 + 2 * v34) = *(_WORD *)(v35 + 2 * v34) & 0xFC00 | (2 * (ComponentType & 0x3F)) & 0x7F | ((v49 & 7) << 7) | 1;
            char __srca = 1;
            uint64_t v39 = LLVMVectorType;
          }
        }
        std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::erase(&v100, (uint64_t *)v45);
        uint64_t v32 = a4;
        uint64_t v31 = (uint64_t *)a8;
      }
    }
LABEL_68:
    *((void *)v98[0] + v34++) = v39;
    if (v33 != v34) {
      continue;
    }
    break;
  }
  uint64_t v51 = (uint64_t *)v101;
  uint64_t v12 = a2;
  if (!(void)v101)
  {
    if ((__srca & 1) == 0) {
      goto LABEL_145;
    }
    goto LABEL_95;
  }
  do
  {
LABEL_73:
    if (*((char *)v51 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__dst, (const std::string::value_type *)v51[2], v51[3]);
    }
    else
    {
      long long __dst = *((_OWORD *)v51 + 1);
      *(void *)&long long v104 = v51[4];
    }
    DWORD2(v104) = *((_DWORD *)v51 + 10);
    int v52 = DWORD2(v104);
    BOOL v53 = (llvm::LLVMContext *)MTLDataTypeGetComponentType(SDWORD2(v104));
    unsigned int v54 = MTLDataTypeGetComponentCount(v52);
    uint64_t v55 = MTLFrameworkPass::getLLVMVectorType(v12, v53, v54);
    uint64_t v56 = v55;
    uint64_t v57 = (char *)v98[1];
    if (v98[1] >= v99)
    {
      int64_t v59 = ((char *)v98[1] - (char *)v98[0]) >> 3;
      if ((unint64_t)(v59 + 1) >> 61) {
        std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v60 = (v99 - (char *)v98[0]) >> 2;
      if (v60 <= v59 + 1) {
        unint64_t v60 = v59 + 1;
      }
      if ((unint64_t)(v99 - (char *)v98[0]) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v61 = v60;
      }
      if (v61) {
        int v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v99, v61);
      }
      else {
        int v62 = 0;
      }
      uint64_t v63 = (uint64_t *)&v62[8 * v59];
      *uint64_t v63 = v56;
      __int16 v58 = v63 + 1;
      uint64_t v65 = (char *)v98[0];
      uint64_t v64 = (char *)v98[1];
      if (v98[1] != v98[0])
      {
        do
        {
          uint64_t v66 = *((void *)v64 - 1);
          v64 -= 8;
          *--uint64_t v63 = v66;
        }
        while (v64 != v65);
        uint64_t v64 = (char *)v98[0];
      }
      v98[0] = v63;
      v98[1] = v58;
      uint64_t v99 = &v62[8 * v61];
      if (v64) {
        operator delete(v64);
      }
    }
    else
    {
      *(void *)v98[1] = v55;
      __int16 v58 = v57 + 8;
    }
    v98[1] = v58;
    if (SBYTE7(v104) < 0) {
      operator delete((void *)__dst);
    }
    uint64_t v51 = (uint64_t *)*v51;
  }
  while (v51);
LABEL_95:
  __srcb = (void *)((char *)v98[1] - (char *)v98[0]);
  std::vector<llvm::Metadata *>::vector(__p, ((char *)v98[1] - (char *)v98[0]) >> 3);
  uint64_t v68 = a4;
  uint64_t v67 = (void *)a8;
  if (v33)
  {
    for (uint64_t i = 0; i != v33; ++i)
    {
      uint64_t Impl = *(void *)(v68 - 8 * *(unsigned int *)(v68 + 8) + 8 * i);
      if (v9)
      {
        unsigned int v71 = *(unsigned __int16 *)(*v67 + 2 * i);
        if (v71)
        {
          unsigned int v72 = *(_DWORD *)(Impl + 8);
          std::vector<llvm::Metadata *>::vector(&__dst, v72);
          if (v72)
          {
            for (unsigned int j = 0; j < v72; ++j)
            {
              uint64_t v74 = *(unsigned char **)(Impl - 8 * *(unsigned int *)(Impl + 8) + 8 * j);
              if (!*v74)
              {
                uint64_t v75 = llvm::MDString::getString(*(llvm::MDString **)(Impl - 8 * *(unsigned int *)(Impl + 8) + 8 * j));
                if (v76 == 17)
                {
                  BOOL v77 = *(void *)v75 == 0x5F6772612E726961 && *(void *)(v75 + 8) == 0x6D616E5F65707974;
                  if (v77 && *(unsigned char *)(v75 + 16) == 101)
                  {
                    *(void *)(__dst + 8 * j++) = v74;
                    if (j < v72)
                    {
                      ShaderTypeuint64_t Name = MTLDataTypeGetShaderTypeName((v71 >> 1) & 0x3F, (v71 >> 7) & 7);
                      if (ShaderTypeName) {
                        strlen(ShaderTypeName);
                      }
                      uint64_t v74 = (unsigned char *)llvm::MDString::get();
                    }
                  }
                }
              }
              *(void *)(__dst + 8 * j) = v74;
            }
          }
          uint64_t v12 = a2;
          uint64_t Impl = llvm::MDTuple::getImpl();
          uint64_t v68 = a4;
          uint64_t v67 = (void *)a8;
          if ((void)__dst)
          {
            *((void *)&__dst + 1) = __dst;
            operator delete((void *)__dst);
          }
        }
      }
      *((void *)__p[0] + i) = Impl;
    }
  }
  for (unint64_t k = (uint64_t *)v101; k; LODWORD(v33) = v33 + 1)
  {
    if (*((char *)k + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__dst, (const std::string::value_type *)k[2], k[3]);
    }
    else
    {
      long long __dst = *((_OWORD *)k + 1);
      *(void *)&long long v104 = k[4];
    }
    int v81 = *((_DWORD *)k + 10);
    DWORD2(v104) = v81;
    if (SBYTE7(v104) < 0)
    {
      std::string::__init_copy_ctor_external(&v96, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)&v96.__r_.__value_.__l.__data_ = __dst;
      v96.__r_.__value_.__r.__words[2] = v104;
    }
    int v82 = MTLDataTypeGetComponentType(v81);
    int v83 = MTLDataTypeGetComponentCount(v81);
    if (v82 == 3 || v82 == 16) {
      int v85 = 1;
    }
    else {
      int v85 = 2;
    }
    if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v86 = &v96;
    }
    else {
      uint64_t v86 = (std::string *)v96.__r_.__value_.__r.__words[0];
    }
    VertexOutputMetaBOOL data = MTLFrameworkPass::createVertexOutputMetadata(v12, (const char *)v86, v82, v83, 1, v85, 0xFFFFFFFFLL, 0);
    *((void *)__p[0] + v33) = VertexOutputMetadata;
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v104) < 0) {
      operator delete((void *)__dst);
    }
    unint64_t k = (uint64_t *)*k;
  }
  *a5 = llvm::MDTuple::getImpl();
  if (__srcb == (void *)8) {
    a3 = *(void *)v98[0];
  }
  else {
    a3 = llvm::StructType::get();
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_145:
  if (v98[0])
  {
    v98[1] = v98[0];
    operator delete(v98[0]);
  }
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table((uint64_t)&v100);
  return a3;
}

void sub_25577A05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
}

void std::vector<MTLAddVertexFetchingToModulePass::ModifiedOutput>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<MTLAddVertexFetchingToModulePass::ModifiedOutput>::__append((void **)a1, a2 - v2);
  }
}

llvm::Value *MTLAddVertexFetchingToModulePass::convertVertexShaderOutput(int a1, llvm::Type *a2, unsigned __int8 *a3, llvm::Constant *this, int a5, uint64_t *a6)
{
  if (*((unsigned char *)this + 8) == 16)
  {
    uint64_t NullValue = llvm::Constant::getNullValue(this, a2);
    if (a5)
    {
LABEL_3:
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)a3;
      while (1)
      {
        uint64_t Value = (llvm::Value *)a3;
        if (*(unsigned char *)(v13 + 8) == 16)
        {
          int v28 = v12;
          __int16 v27 = 257;
          uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)a2, a3, (uint64_t)&v28, 1, (uint64_t)v26);
        }
        uint64_t v15 = *a6;
        if (a5 != (a6[1] - *a6) >> 1) {
          goto LABEL_36;
        }
        unsigned int v16 = *(unsigned __int16 *)(v15 + 2 * v12);
        if ((v16 & 1) == 0) {
          goto LABEL_36;
        }
        uint64_t v17 = *(void *)Value;
        unsigned int v18 = 1;
        if (*(void *)Value && *(unsigned char *)(v17 + 8) == 18) {
          unsigned int v18 = *(_DWORD *)(v17 + 32);
        }
        unsigned int v19 = (llvm::Type *)*((void *)a2 + 8);
        unsigned int v20 = (v16 >> 7) & 7;
        if (v18 <= v20)
        {
          if (v18 >= v20) {
            goto LABEL_16;
          }
          uint64_t v21 = expandVector(v19, a2, Value, v20);
        }
        else
        {
          uint64_t v21 = MTLFrameworkPass::truncateVector(v19, a2, Value, v20);
        }
        uint64_t Value = v21;
LABEL_16:
        size_t v22 = this;
        if (*((unsigned char *)this + 8) == 16) {
          size_t v22 = *(llvm::Type **)(*((void *)this + 2) + 8 * v12);
        }
        if (*(llvm::Type **)Value == v22) {
          goto LABEL_36;
        }
        unsigned int v23 = (*(unsigned __int16 *)(v15 + 2 * v12) >> 1) & 0x3F;
        if (v23 <= 0x20)
        {
          switch(v23)
          {
            case 3u:
              __int16 v27 = 257;
              uint64_t FPExt = llvm::IRBuilderBase::CreateFPExt(a2, Value, v22, (const llvm::Twine *)v26);
              break;
            case 0x10u:
              __int16 v27 = 257;
              uint64_t FPExt = llvm::IRBuilderBase::CreateFPTrunc(a2, Value, v22, (const llvm::Twine *)v26);
              break;
            case 0x1Du:
              __int16 v27 = 257;
              uint64_t FPExt = (uint64_t)llvm::IRBuilderBase::CreateSExtOrBitCast(a2, (llvm::Type **)Value, v22, (const llvm::Twine *)v26);
              break;
            default:
              goto LABEL_43;
          }
          goto LABEL_35;
        }
        if (((*(unsigned __int16 *)(v15 + 2 * v12) >> 1) & 0x3Fu) > 0x28)
        {
          if (v23 != 41)
          {
            if (v23 != 53) {
LABEL_43:
            }
              abort();
            goto LABEL_36;
          }
        }
        else
        {
          if (v23 == 33)
          {
            __int16 v27 = 257;
            uint64_t FPExt = (uint64_t)llvm::IRBuilderBase::CreateZExtOrBitCast(a2, (llvm::Type **)Value, v22, (const llvm::Twine *)v26);
            goto LABEL_35;
          }
          if (v23 != 37) {
            goto LABEL_43;
          }
        }
        __int16 v27 = 257;
        uint64_t FPExt = llvm::IRBuilderBase::CreateCast((uint64_t)a2, 38, (uint64_t)Value, (uint64_t)v22, (uint64_t)v26);
LABEL_35:
        uint64_t Value = (llvm::Value *)FPExt;
LABEL_36:
        if (*((unsigned char *)this + 8) == 16)
        {
          int v28 = v12;
          __int16 v27 = 257;
          uint64_t Value = (llvm::Value *)llvm::IRBuilderBase::CreateInsertValue((uint64_t)a2, NullValue, (uint64_t)Value, (uint64_t)&v28, 1, (uint64_t)v26);
        }
        ++v12;
        uint64_t NullValue = (uint64_t)Value;
        if (a5 == v12) {
          return Value;
        }
      }
    }
  }
  else
  {
    uint64_t NullValue = 0;
    if (a5) {
      goto LABEL_3;
    }
  }
  return (llvm::Value *)NullValue;
}

llvm::Type **llvm::IRBuilderBase::CreateSExtOrBitCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*a2 == a3) {
    return a2;
  }
  if (*((unsigned __int8 *)a2 + 16) > 0x14u)
  {
    SExtOrBituint64_t Cast = llvm::CastInst::CreateSExtOrBitCast();
    return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, SExtOrBitCast, (uint64_t)a4);
  }
  a2 = (llvm::Type **)(*(uint64_t (**)(void))(**((void **)this + 9) + 296))(*((void *)this + 9));
  if (a2) {
    BOOL v6 = *((unsigned __int8 *)a2 + 16) >= 0x1Cu;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return a2;
  }
  return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)a2, (uint64_t)a4);
}

llvm::Type **llvm::IRBuilderBase::CreateZExtOrBitCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*a2 == a3) {
    return a2;
  }
  if (*((unsigned __int8 *)a2 + 16) > 0x14u)
  {
    ZExtOrBituint64_t Cast = llvm::CastInst::CreateZExtOrBitCast();
    return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, ZExtOrBitCast, (uint64_t)a4);
  }
  a2 = (llvm::Type **)(*(uint64_t (**)(void))(**((void **)this + 9) + 288))(*((void *)this + 9));
  if (a2) {
    BOOL v6 = *((unsigned __int8 *)a2 + 16) >= 0x1Cu;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return a2;
  }
  return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)a2, (uint64_t)a4);
}

uint64_t llvm::IRBuilderBase::CreateInsertElement(llvm::Type **this, llvm::Value *a2, llvm::Value *a3, unint64_t a4, const llvm::Twine *a5)
{
  llvm::Type::getInt64Ty(this[8], a2);
  uint64_t v9 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)this, a2, a3, v9, a5, v10);
}

uint64_t callTypedFunction(uint64_t a1, uint64_t a2)
{
  uint64_t Function = llvm::Module::getFunction();
  if (Function
    || (uint64_t v5 = llvm::FunctionType::get(),
        v8[0] = "air.get_num_patch_control_points",
        __int16 v9 = 259,
        (uint64_t Function = llvm::Function::Create(v5, 0, (uint64_t)v8, a1)) != 0))
  {
    uint64_t v6 = *(void *)(Function + 24);
  }
  else
  {
    uint64_t v6 = 0;
  }
  __int16 v9 = 257;
  return llvm::IRBuilderBase::CreateCall(a2, v6, Function, 0, 0, (uint64_t)v8, 0);
}

uint64_t llvm::IRBuilderBase::foldConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 0;
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u) {
    a3 = 0;
  }
  if (*(unsigned __int8 *)(a4 + 16) >= 0x15u) {
    a4 = 0;
  }
  if (a3) {
    BOOL v6 = a4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return v5;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72));
  if (!v5 || *(unsigned __int8 *)(v5 + 16) < 0x1Cu) {
    return v5;
  }
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, v5, a5);
}

uint64_t llvm::IRBuilderBase::CreateUDiv(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, char a5)
{
  if (!a2 || *((unsigned __int8 *)a2 + 16) > 0x14u || !a3 || *((unsigned __int8 *)a3 + 16) > 0x14u)
  {
    if (a5)
    {
      uint64_t v10 = (llvm::Instruction *)llvm::BinaryOperator::Create();
      llvm::Instruction::setIsExact(v10);
      uint64_t v11 = (uint64_t *)this;
      uint64_t v12 = (uint64_t)v10;
    }
    else
    {
      uint64_t v12 = llvm::BinaryOperator::Create();
      uint64_t v11 = (uint64_t *)this;
    }
    return llvm::IRBuilderBase::Insert<llvm::CastInst>(v11, v12, (uint64_t)a4);
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 9) + 104))(*((void *)this + 9));
  if (v7) {
    BOOL v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    return v7;
  }
  return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, v7, (uint64_t)a4);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    unint64_t v2 = __p;
    do
    {
      BOOL v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  BOOL v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unsigned int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *unsigned int v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_25577AC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  BOOL v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)BOOL v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_25577AD04(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      size_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::vector<MTLAddVertexFetchingToModulePass::ModifiedOutput>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    if ((uint64_t)(a2 + (v8 >> 1)) < 0) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v8 >> 1;
    unint64_t v10 = v5 - (unsigned char *)*a1;
    if (v10 <= a2 + (v8 >> 1)) {
      unint64_t v11 = a2 + (v8 >> 1);
    }
    else {
      unint64_t v11 = v10;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLAddVertexFetchingToModulePass::ModifiedOutput>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    BOOL v14 = &v13[2 * v9];
    uint64_t v15 = &v13[2 * v12];
    bzero(v14, 2 * a2);
    unint64_t v16 = &v14[2 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        __int16 v19 = *((_WORD *)v17 - 1);
        v17 -= 2;
        *((_WORD *)v14 - 1) = v19;
        v14 -= 2;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLAddVertexFetchingToModulePass::ModifiedOutput>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  std::string __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MTLCompilerDataType>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<std::string,MTLCompilerDataType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MTLCompilerDataType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MTLCompilerDataType>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint8x8_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint8x8_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int8x8_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::__unordered_map_hasher<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::hash<llvm::DISubprogram *>,std::equal_to<llvm::DISubprogram *>,true>,std::__unordered_map_equal<llvm::DISubprogram *,std::__hash_value_type<llvm::DISubprogram *,unsigned int>,std::equal_to<llvm::DISubprogram *>,std::hash<llvm::DISubprogram *>,true>,std::allocator<std::__hash_value_type<llvm::DISubprogram *,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    *uint64_t v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_25577B8EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SmallVertexPartialLoad>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t MTLVertexOutputLinkingPass::vertexOutputLinking(MTLCompilerErrorObject **a1, llvm::Module *a2, uint64_t *a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, int a11, int a12)
{
  if (!MTLFrameworkPass::checkFragmentRenderTargetArrayIndex(a1, a11, a12)) {
    return 0;
  }
  if (a5 <= 1) {
    unint64_t v18 = 1;
  }
  else {
    unint64_t v18 = a5;
  }
  v47.__r_.__value_.__s.__data_[0] = 0;
  std::vector<BOOL>::vector(&v49, v18, (unsigned __int8 *)&v47);
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)"air.vertex";
  __int16 v48 = 259;
  NamedMetaBOOL data = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a2, (const llvm::Twine *)&v47);
  uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  unint64_t v21 = (void *)(Operand - 8 * *(unsigned int *)(Operand + 8));
  uint64_t v22 = v21[1];
  uint64_t v23 = *(unsigned int *)(v22 + 8);
  if (v23)
  {
    uint64_t v24 = 0;
    uint64_t v43 = *(llvm::Type **)a2;
    uint64_t v25 = **(void **)(*(void *)(*(void *)(*v21 + 128) + 24) + 16);
    do
    {
      uint64_t v26 = *(void *)(v22 - 8 * *(unsigned int *)(v22 + 8) + 8 * v24);
      uint64_t String = (void *)llvm::MDString::getString(*(llvm::MDString **)(v26 - 8 * *(unsigned int *)(v26 + 8)));
      if (v28 > 16)
      {
        if (v28 == 29)
        {
          if (!memcmp(String, "air.render_target_array_index", 0x1DuLL)) {
            dataTypeFromMetadata(1u, v26);
          }
        }
        else if (v28 == 17)
        {
          if (*String == 0x747265762E726961 && String[1] == 0x757074756F5F7865 && *((unsigned char *)String + 16) == 116)
          {
            LODWORD(v47.__r_.__value_.__l.__data_) = 0;
            int MatchingFragmentInput = MTLFrameworkPass::findMatchingFragmentInput((char ***)a1, &v47, v25, v24, v26, a3, a4);
            if (MatchingFragmentInput == 1)
            {
              *(void *)((char *)v49 + (((unint64_t)LODWORD(v47.__r_.__value_.__l.__data_) >> 3) & 0x1FFFFFF8)) |= 1 << v47.__r_.__value_.__s.__data_[0];
            }
            else if (MatchingFragmentInput == 2)
            {
              goto LABEL_58;
            }
            MTLFrameworkPass::addLocationToMetadata(v43, v22, v24);
          }
          else if (!memcmp(String, "air.clip_distance", 0x11uLL))
          {
            if (*(unsigned char *)(v25 + 8) == 16
              && (uint64_t v31 = *(void *)(*(void *)(v25 + 16) + 8 * v24)) != 0
              && *(unsigned char *)(v31 + 8) == 17)
            {
              uint64_t v32 = *(void *)(v31 + 32);
              unint64_t v33 = (unint64_t)(v32 + 3) >> 2;
            }
            else
            {
              LODWORD(v32) = 1;
              LODWORD(v33) = 1;
            }
            a8 += v32;
            a7 += v33;
          }
        }
      }
      else if (v28 == 12)
      {
        if (!memcmp(String, "air.position", 0xCuLL))
        {
          ++a7;
          a8 += 4;
        }
      }
      else if (v28 == 14 && !memcmp(String, "air.point_size", 0xEuLL))
      {
        ++a7;
        ++a8;
      }
      ++v24;
    }
    while (v23 != v24);
  }
  if (a5)
  {
    unint64_t v35 = 0;
    uint64_t v36 = 8;
    while (((*(void *)((char *)v49 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
    {
      ++v35;
      v36 += 32;
      if (a5 == v35) {
        goto LABEL_42;
      }
    }
    unint64_t v40 = *(void **)(*a3 + v36);
    if (v40)
    {
      std::string::basic_string[abi:ne180100](__p, v40, *(void *)(*a3 + v36 + 8));
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v46 = 0;
    }
    MTLFrameworkPass::attribute_name((uint64_t)__p, &v47);
    if (SHIBYTE(v46) < 0) {
      operator delete(__p[0]);
    }
    unint64_t v41 = &v47;
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v41 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "Link failed: fragment input %s was not found in vertex shader outputs", (const char *)v41);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
  }
  else
  {
LABEL_42:
    int v37 = a9;
    if (a7 <= a9)
    {
      int v37 = a10;
      if (a8 <= a10)
      {
        uint64_t v39 = 1;
        goto LABEL_59;
      }
      unint64_t v38 = "varying components";
      a7 = a8;
    }
    else
    {
      unint64_t v38 = "varyings";
    }
    MTLCompilerErrorObject::setFormattedErrorMessage((char **)*a1, "Link failed: number of shader %s (%u) exceeds limit (%u). Note that on macOS the following attributes count towards the limit: [[position]], [[clip_distance]], [[point_size]], [[point_coord]], and, when read in the fragment shader, [[viewport_array_index]] & [[render_target_array_index]].", v38, a7, v37);
  }
LABEL_58:
  uint64_t v39 = 0;
LABEL_59:
  if (v49) {
    operator delete(v49);
  }
  return v39;
}

void sub_25577BDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

llvm::Value *MTLFrameworkPass::truncateVector(llvm::Type *this, llvm::LLVMContext *a2, llvm::Value *a3, int a4)
{
  ShuffleVector = a3;
  if (*(void *)a3) {
    BOOL v5 = *(unsigned char *)(*(void *)a3 + 8) == 18;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    int v7 = *(_DWORD *)(*(void *)a3 + 32);
    if (v7 != 1 && v7 != a4)
    {
      if (a4 == 1)
      {
        llvm::Type::getInt32Ty(this, a2);
        unint64_t v11 = (llvm::Value *)llvm::ConstantInt::get();
        __int16 v19 = 257;
        return (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(a2, ShuffleVector, v11, (const llvm::Twine *)v18, v12);
      }
      else
      {
        std::vector<llvm::Constant *>::vector(__p, a4);
        if (a4 >= 1)
        {
          uint64_t v14 = 0;
          do
          {
            llvm::Type::getInt32Ty(this, v13);
            *((void *)__p[0] + v14++) = llvm::ConstantInt::get();
          }
          while (a4 != v14);
        }
        BOOL v15 = (llvm::Value *)llvm::ConstantVector::get();
        __int16 v19 = 257;
        ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector(a2, ShuffleVector, ShuffleVector, v15, (const llvm::Twine *)v18);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
  }
  return ShuffleVector;
}

void sub_25577BF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MTLFrameworkPass::addLocationToMetadata(llvm::Type *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * a3);
  uint64_t v5 = *(int *)(v4 + 8);
  std::vector<llvm::Metadata *>::vector(__p, v5 + 2);
  if ((int)v5 < 1) {
    goto LABEL_25;
  }
  uint64_t v6 = 0;
  char v7 = 0;
  LODWORD(v8) = 0;
  do
  {
    while (1)
    {
      uint64_t v9 = v4 - 8 * *(unsigned int *)(v4 + 8);
      uint64_t v10 = (int)v8;
      *((void *)__p[0] + (int)v8) = *(void *)(v9 + 8 * v6);
      uint64_t v8 = (int)v8 + 1;
      if (!v6 || (v7 & 1) != 0) {
        break;
      }
      unint64_t v11 = *(llvm::MDString **)(v9 + 8 * (v6 - 1));
      if (*(unsigned char *)v11) {
        goto LABEL_6;
      }
      uint64_t String = (void *)llvm::MDString::getString(v11);
      if (v13 == 17)
      {
        if (memcmp(String, "air.vertex_output", 0x11uLL)) {
          goto LABEL_6;
        }
      }
      else if (v13 != 18 {
             || (*String == 0x676172662E726961 ? (BOOL v14 = String[1] == 0x706E695F746E656DLL) : (BOOL v14 = 0),
      }
                 v14 ? (BOOL v15 = *((unsigned __int16 *)String + 8) == 29813) : (BOOL v15 = 0),
                 !v15))
      {
LABEL_6:
        char v7 = 0;
        break;
      }
      *((void *)__p[0] + v8) = llvm::MDString::get();
      llvm::Type::getInt32Ty(a1, v16);
      llvm::ConstantInt::get();
      LODWORD(v8) = v10 + 3;
      *((void *)__p[0] + v10 + 2) = llvm::ValueAsMetadata::get();
      ++v6;
      char v7 = 1;
      if (v6 == v5) {
        goto LABEL_24;
      }
    }
    ++v6;
  }
  while (v6 != v5);
  if ((v7 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_24:
  llvm::MDTuple::getImpl();
  llvm::MDNode::replaceOperandWith();
LABEL_25:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_25577C128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLFrameworkPass::createVertexOutputMetadata(llvm::Type *a1, const char *a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  v22[0] = llvm::MDString::get();
  if (a2) {
    strlen(a2);
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  v22[1] = llvm::MDString::get();
  if (a8)
  {
    *(void *)&long long v23 = llvm::MDString::get();
    llvm::Type::getInt32Ty(a1, v15);
    llvm::ConstantInt::get();
    *((void *)&v23 + 1) = llvm::ValueAsMetadata::get();
    int v16 = 4;
    if (!a3) {
      goto LABEL_10;
    }
  }
  else
  {
    int v16 = 2;
    if (!a3) {
      goto LABEL_10;
    }
  }
  ShaderTypeuint64_t Name = MTLDataTypeGetShaderTypeName(a3, a4);
  int v18 = v16 | 1;
  v22[v16] = llvm::MDString::get();
  if (ShaderTypeName) {
    strlen(ShaderTypeName);
  }
  v16 += 2;
  v22[v18] = llvm::MDString::get();
LABEL_10:
  if ((a5 - 1) > 3) {
    __int16 v19 = (const char *)&unk_2557AB8A6;
  }
  else {
    __int16 v19 = off_2653C2880[a5 - 1];
  }
  strlen(v19);
  v22[v16] = llvm::MDString::get();
  if ((a6 - 1) > 2) {
    uint64_t v20 = (const char *)&unk_2557AB8A6;
  }
  else {
    uint64_t v20 = off_2653C28A0[a6 - 1];
  }
  strlen(v20);
  v22[v16 + 1] = llvm::MDString::get();
  return llvm::MDTuple::getImpl();
}

char *MTLFrameworkPass::samplingStringFromQualifier(MTLFrameworkPass *this)
{
  if ((this - 1) > 3) {
    return (char *)&unk_2557AB8A6;
  }
  else {
    return off_2653C2880[(int)this - 1];
  }
}

char *MTLFrameworkPass::interpolationStringFromQualifier(MTLFrameworkPass *this)
{
  if ((this - 1) > 2) {
    return (char *)&unk_2557AB8A6;
  }
  else {
    return off_2653C28A0[(int)this - 1];
  }
}

uint64_t MTLFrameworkPass::extractVaryingInfoFromMetadata(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5 = a3;
  *(void *)(a1 + 8) = llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * a3));
  *(void *)(a1 + 16) = v8;
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  for (unsigned int i = v5 + 1; i < v9; ++i)
  {
    unint64_t v11 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * i);
    if (!*(unsigned char *)v11)
    {
      uint64_t String = (_DWORD *)llvm::MDString::getString(v11);
      BOOL v14 = String;
      size_t v15 = v13;
      switch(v13)
      {
        case 8uLL:
          if (!memcmp(String, "air.flat", v13))
          {
            char v16 = *(unsigned char *)(a1 + 28) & 0xF9 | 4;
            goto LABEL_27;
          }
          break;
        case 9uLL:
        case 0xBuLL:
        case 0xDuLL:
        case 0xEuLL:
        case 0x10uLL:
          break;
        case 0xAuLL:
          if (!memcmp(String, "air.center", v13))
          {
            char v16 = *(unsigned char *)(a1 + 28) & 0xC7 | 8;
            goto LABEL_27;
          }
          if (!memcmp(v14, "air.sample", v15))
          {
            char v16 = *(unsigned char *)(a1 + 28) & 0xC7 | 0x18;
            goto LABEL_27;
          }
          break;
        case 0xCuLL:
          if (*(void *)String == 0x5F6772612E726961 && String[2] == 1701667182)
          {
            unsigned int i = v5 + 2;
          }
          else if (!memcmp(String, "air.centroid", v13))
          {
            char v16 = *(unsigned char *)(a1 + 28) & 0xC7 | 0x10;
            goto LABEL_27;
          }
          break;
        case 0xFuLL:
          if (!memcmp(String, "air.perspective", v13))
          {
            char v16 = *(unsigned char *)(a1 + 28) & 0xF9 | 2;
            goto LABEL_27;
          }
          break;
        case 0x11uLL:
          if (!memcmp(String, "air.arg_type_name", v13))
          {
            unsigned int i = v5 + 2;
            int v18 = (const char *)llvm::MDString::getString(*(llvm::MDString **)(a2
                                                                             - 8 * *(unsigned int *)(a2 + 8)
                                                                             + 8 * (v5 + 2)));
            size_t v19 = strlen(v18);
            *(_DWORD *)(a1 + 24) = dataTypeFromString(v18, v19);
          }
          break;
        case 0x12uLL:
          if (!memcmp(String, "air.no_perspective", v13))
          {
            char v16 = *(unsigned char *)(a1 + 28) | 6;
            goto LABEL_27;
          }
          break;
        default:
          if (v13 == 26 && !memcmp(String, "air.interpolation_function", 0x1AuLL))
          {
            char v16 = *(unsigned char *)(a1 + 28) & 0xC7 | 0x20;
LABEL_27:
            *(unsigned char *)(a1 + 28) = v16;
          }
          break;
      }
    }
    unsigned int v5 = i;
  }
  uint64_t result = *(unsigned int *)(a1 + 24);
  if (result)
  {
    char v21 = *(unsigned char *)(a1 + 28);
    goto LABEL_48;
  }
  unsigned int v22 = *(_DWORD *)(a4 + 8);
  int v23 = 1;
  if (a4 && *(_DWORD *)(a4 + 8) == 18)
  {
    int v23 = *(_DWORD *)(a4 + 32);
    unsigned int v22 = *(_DWORD *)(*(void *)(a4 + 24) + 8);
  }
  if (v22 == 13)
  {
    unsigned int v25 = v22 >> 8;
    switch(v25)
    {
      case 8u:
        int v24 = 45;
        goto LABEL_46;
      case 0x20u:
        int v24 = 29;
        goto LABEL_46;
      case 0x10u:
        int v24 = 37;
        goto LABEL_46;
    }
  }
  else
  {
    if (v22 == 2)
    {
      int v24 = 3;
      goto LABEL_46;
    }
    if (!(_BYTE)v22)
    {
      int v24 = 16;
LABEL_46:
      uint64_t result = MTLDataTypeGetVectorDataType(v24, v23);
      *(_DWORD *)(a1 + 24) = result;
      goto LABEL_47;
    }
  }
  uint64_t result = 0;
LABEL_47:
  char v21 = *(unsigned char *)(a1 + 28) | 0x40;
  *(unsigned char *)(a1 + 28) = v21;
LABEL_48:
  int v26 = v21 & 0x38;
  int v27 = v21 & 6;
  if (v26) {
    BOOL v28 = v27 == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (v28)
  {
    uint64_t result = MTLDataTypeGetComponentType(result);
    char v29 = *(unsigned char *)(a1 + 28);
    if ((v29 & 0x38) == 0)
    {
      char v29 = v29 & 0xC7 | 8;
      *(unsigned char *)(a1 + 28) = v29;
    }
    if (result == 16 || result == 3)
    {
      if ((v29 & 6) != 0) {
        return result;
      }
      char v30 = 2;
    }
    else
    {
      if ((v29 & 6) != 0) {
        return result;
      }
      char v30 = 4;
    }
    *(unsigned char *)(a1 + 28) = v29 & 0xF9 | v30;
  }
  return result;
}

void MTLFrameworkPass::attribute_name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  size_t __idx = 0;
  std::string::size_type v4 = std::string::find((const std::string *)a1, "generated(", 0, 0xAuLL);
  if (v4 == -1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v6 = *(const std::string::value_type **)a1;
      std::string::size_type v7 = *(void *)(a1 + 8);
      std::string::__init_copy_ctor_external(a2, v6, v7);
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string(&__str, (const std::string *)a1, v4 + 10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v10);
    int v5 = std::stoi(&__str, &__idx, 10);
    std::string::basic_string(a2, &__str, __idx, v5, (std::allocator<char> *)&v10);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_25577C854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLFrameworkPass::findMatchingFragmentInput(char ***a1, _DWORD *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v9 = a3;
  if (*(unsigned char *)(a3 + 8) == 16) {
    uint64_t v9 = *(void *)(*(void *)(a3 + 16) + 8 * a4);
  }
  int v23 = 0;
  __srCC_SHA256_CTX c = 0;
  memset(__len, 0, 13);
  MTLFrameworkPass::extractVaryingInfoFromMetadata((uint64_t)&v23, a5, 1u, v9);
  if (__src) {
    std::string::basic_string[abi:ne180100](&__p, __src, __len[0]);
  }
  else {
    memset(&__p, 0, sizeof(__p));
  }
  uint64_t v12 = std::__tree<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::tuple<Air::PixelFormat,std::string,MTLCompilerDataType>>>>::find<std::string>(a7, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a7 + 8 == v12) {
    return 0;
  }
  uint64_t v13 = *(unsigned int *)(v12 + 56);
  *a2 = v13;
  uint64_t v14 = *a6;
  uint64_t v15 = *(unsigned int *)(v14 + 32 * v13 + 24);
  if ((__len[1] & 0x4000000000) != 0) {
    LODWORD(v15) = MTLDataTypeGetSignedType(v15);
  }
  if (LODWORD(__len[1]) == v15) {
    return 1;
  }
  uint64_t v17 = v14 + 32 * v13;
  int v18 = *(void **)(v17 + 8);
  if (v18)
  {
    std::string::basic_string[abi:ne180100](__dst, v18, *(void *)(v17 + 16));
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    uint64_t v21 = 0;
  }
  MTLFrameworkPass::attribute_name((uint64_t)__dst, &__p);
  if (SHIBYTE(v21) < 0) {
    operator delete(__dst[0]);
  }
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  MTLCompilerErrorObject::setFormattedErrorMessage(*a1, "Link failed: The type of fragment input %s does not match the type of the corresponding vertex shader output", (const char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 2;
}

void sub_25577C9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLFrameworkPass::checkFragmentRenderTargetArrayIndex(MTLCompilerErrorObject **a1, int a2, int a3)
{
  if (!a3) {
    return 1;
  }
  if (a2)
  {
    if (a2 == a3) {
      return 1;
    }
    std::string::size_type v4 = "Link failed: the render_target_array_index has a different type in the fragment shader and the vertex shader";
  }
  else
  {
    std::string::size_type v4 = "Link failed: fragment shader is reading the render_target_array_index but the vertex shader does not write it";
  }
  MTLCompilerErrorObject::setErrorMessage(*a1, v4);
  return 0;
}

uint64_t MTLFrameworkPass::callFunction(uint64_t a1, uint64_t a2, char *__s, uint64_t a4, uint64_t **a5, uint64_t a6, uint64_t a7)
{
  if (__s) {
    strlen(__s);
  }
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    std::string __p = 0;
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    if (a6)
    {
      uint64_t v29 = a7;
      char v30 = a5;
      uint64_t v14 = 0;
      uint64_t v15 = &a5[a6];
      do
      {
        uint64_t v16 = **a5;
        if (v14 >= v35)
        {
          uint64_t v17 = (v14 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v17 + 1) >> 61) {
            std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v18 = (v35 - (unsigned char *)__p) >> 2;
          if (v18 <= v17 + 1) {
            unint64_t v18 = v17 + 1;
          }
          if ((unint64_t)(v35 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<llvm::Type *>>((uint64_t)&v35, v19);
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v21 = &v20[8 * v17];
          *(void *)uint64_t v21 = v16;
          uint64_t v14 = v21 + 8;
          int v23 = (char *)__p;
          unsigned int v22 = v34;
          if (v34 != __p)
          {
            do
            {
              uint64_t v24 = *((void *)v22 - 1);
              v22 -= 8;
              *((void *)v21 - 1) = v24;
              v21 -= 8;
            }
            while (v22 != v23);
            unsigned int v22 = (char *)__p;
          }
          std::string __p = v21;
          uint64_t v34 = v14;
          unint64_t v35 = &v20[8 * v19];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(void *)uint64_t v14 = v16;
          v14 += 8;
        }
        uint64_t v34 = v14;
        ++a5;
      }
      while (a5 != v15);
      a5 = v30;
      a7 = v29;
    }
    uint64_t v25 = llvm::FunctionType::get();
    char v26 = 1;
    HIBYTE(v32) = 1;
    if (*__s)
    {
      v31[0] = __s;
      char v26 = 3;
    }
    LOBYTE(v32) = v26;
    uint64_t Function = llvm::Function::Create(v25, 0, (uint64_t)v31, a1);
    *(void *)(Function + 112) = a7;
    if (__p)
    {
      uint64_t v34 = (char *)__p;
      operator delete(__p);
    }
  }
  uint64_t v27 = *(void *)(Function + 24);
  __int16 v32 = 257;
  return llvm::IRBuilderBase::CreateCall(a2, v27, Function, (uint64_t)a5, a6, (uint64_t)v31, 0);
}

void sub_25577CC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<PackedInput>::reserve(void **a1, unint64_t a2)
{
  std::string::size_type v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PackedInput>>(v3, a2);
    std::string::size_type v7 = &v6[24 * v5];
    uint64_t v9 = &v6[24 * v8];
    unint64_t v11 = (char *)*a1;
    char v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      char v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void deserializeFragmentInput(DeserialContext *a1@<X0>, int a2@<W1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = *((void *)a1 + 1);
  unint64_t v5 = *((void *)a1 + 2);
  if (v5 >= v6
    || (uint64_t v7 = *(void *)a1, v8 = *(unsigned __int8 *)(*(void *)a1 + v5), *((void *)a1 + 2) = v5 + 1, v5 + 1 >= v6))
  {
    abort();
  }
  unsigned int v11 = *(unsigned __int8 *)(v7 + v5 + 1);
  *((void *)a1 + 2) = v5 + 2;
  size_t __len = 0;
  uint64_t v12 = (char *)DeserialContext::deserializeCStringNoCopy(a1, &__len);
  std::string::basic_string[abi:ne180100](__p, v12, __len);
  uint64_t v17 = __p;
  *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v17)+ 14) = a2;
  size_t v13 = __len;
  *(void *)(a4 + 8) = v12;
  *(void *)(a4 + 16) = v13;
  *(_DWORD *)(a4 + 24) = v8;
  *(unsigned char *)(a4 + 28) = (v11 >> 1) & 0x38 | (2 * (v11 & 3));
  *(_DWORD *)a4 = a2;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

void sub_25577CE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<VaryingInfo>::reserve(void **a1, unint64_t a2)
{
  std::string::size_type v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<llvm::Type *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<VaryingInfo>>(v3, a2);
    uint64_t v7 = &v6[v5];
    uint64_t v9 = &v6[32 * v8];
    unsigned int v11 = (char *)*a1;
    char v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 2);
        *(_OWORD *)(v12 - 19) = *(_OWORD *)(v10 - 19);
        *((_OWORD *)v12 - 2) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      char v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

const char *DeserialContext::deserializeCStringNoCopy(DeserialContext *this, unint64_t *a2)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  size_t v4 = v2 - v3;
  if (v2 <= v3 || (uint64_t v7 = (const char *)(*(void *)this + v3), v8 = strnlen(v7, v4), v8 == v4)) {
    abort();
  }
  if (a2)
  {
    *a2 = v8;
    unint64_t v3 = *((void *)this + 2);
  }
  *((void *)this + 2) = v8 + v3 + 1;
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,TextureTokenData>,std::__map_value_compare<std::string,std::__value_type<std::string,TextureTokenData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,TextureTokenData>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  size_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_25577D104(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,TextureTokenData>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t MTLIRBuilder::initTypeCache(MTLIRBuilder *this, llvm::LLVMContext *a2)
{
  *((void *)this + 17) = llvm::Type::getInt64Ty(a2, a2);
  *((void *)this + 18) = llvm::Type::getInt32Ty(a2, v4);
  *((void *)this + 19) = llvm::Type::getInt16Ty(a2, v5);
  *((void *)this + 20) = llvm::Type::getInt8Ty(a2, v6);
  *((void *)this + 21) = llvm::Type::getInt1Ty(a2, v7);
  uint64_t result = llvm::Type::getInt8PtrTy(a2, 0);
  *((void *)this + 22) = result;
  return result;
}

llvm::Instruction *MTLIRBuilder::CreateNSWFoldMul(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  if (a2) {
    BOOL v4 = *((unsigned char *)a2 + 16) == 16;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = a2;
  }
  if (a3) {
    BOOL v7 = *((unsigned char *)a3 + 16) == 16;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = v5;
  }
  if (v7) {
    long long v9 = v6;
  }
  else {
    long long v9 = a3;
  }
  if (v9) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return llvm::IRBuilderBase::CreateMul(this, a2, a3, a4, 0, 1);
  }
  if (*((_DWORD *)v8 + 8) > 0x40u)
  {
    uint64_t v11 = **((void **)v8 + 3);
    if (v11)
    {
LABEL_25:
      if (v11 == 1) {
        return v9;
      }
      return llvm::IRBuilderBase::CreateMul(this, a2, a3, a4, 0, 1);
    }
  }
  else
  {
    uint64_t v11 = *((void *)v8 + 3);
    if (v11) {
      goto LABEL_25;
    }
  }
  return (llvm::Instruction *)llvm::ConstantInt::get();
}

llvm::Instruction *MTLIRBuilder::CreateNSWFoldAdd(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  if (a2) {
    BOOL v4 = *((unsigned char *)a2 + 16) == 16;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = a2;
  }
  if (a3) {
    BOOL v7 = *((unsigned char *)a3 + 16) == 16;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    size_t v8 = a3;
  }
  else {
    size_t v8 = v5;
  }
  if (v7) {
    long long v9 = v6;
  }
  else {
    long long v9 = a3;
  }
  if (v9) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return llvm::IRBuilderBase::CreateAdd(this, a2, a3, a4, 0, 1);
  }
  uint64_t v11 = (void *)((char *)v8 + 24);
  if (*((_DWORD *)v8 + 8) >= 0x41u) {
    uint64_t v11 = (void *)*v11;
  }
  if (*v11) {
    return llvm::IRBuilderBase::CreateAdd(this, a2, a3, a4, 0, 1);
  }
  else {
    return v9;
  }
}

uint64_t MTLIRBuilder::CreateAtomicFetchAdd(MTLIRBuilder *this, llvm::Type **PointerCast, llvm::Value *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)(*((void *)this + 6) + 56) + 40);
  BOOL v7 = (uint64_t *)((char *)this + 144);
  v16[0] = llvm::PointerType::get();
  uint64_t v8 = getOrInsertFunction<char const(&)[28],llvm::Type *&,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(v6, "air.atomic.global.add.u.i32", v7, v16, v7, v7, v7, v7 + 3);
  long long v9 = *PointerCast;
  if (v9 != (llvm::Type *)llvm::PointerType::get())
  {
    BOOL v10 = (llvm::Type *)llvm::PointerType::get();
    LOWORD(v17) = 257;
    Pointeruint64_t Cast = llvm::IRBuilderBase::CreatePointerCast(this, PointerCast, v10, (const llvm::Twine *)v16);
  }
  if (v8) {
    uint64_t v11 = *(void *)(v8 + 24);
  }
  else {
    uint64_t v11 = 0;
  }
  v16[0] = (uint64_t)PointerCast;
  v16[1] = (uint64_t)a3;
  _DWORD v16[2] = llvm::ConstantInt::get();
  void v16[3] = llvm::ConstantInt::get();
  uint64_t v17 = llvm::ConstantInt::get();
  __int16 v15 = 257;
  uint64_t v12 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v11, v8, (uint64_t)v16, 5, (uint64_t)v14, 0);
  *(_WORD *)(v12 + 18) = *(_WORD *)(v12 + 18) & 0xFFFC | 1;
  llvm::Value::getContext((llvm::Value *)v12);
  *(void *)(v12 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v12);
  *(void *)(v12 + 64) = llvm::AttributeList::addAttributeAtIndex();
  return v12;
}

uint64_t getOrInsertFunction<char const(&)[28],llvm::Type *&,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  size_t v16 = strlen(__s);
  llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(a1, (uint64_t)__s, v16, 0, *a3, *a4, *a5, *a6, *a7, *a8);
  uint64_t result = v17;
  if (*(unsigned char *)(v17 + 16) == 5) {
    return *(void *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
  }
  return result;
}

llvm::Type **llvm::IRBuilderBase::CreatePointerCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*a2 == a3) {
    return a2;
  }
  if (*((unsigned __int8 *)a2 + 16) > 0x14u)
  {
    Pointeruint64_t Cast = llvm::CastInst::CreatePointerCast();
    return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, PointerCast, (uint64_t)a4);
  }
  a2 = (llvm::Type **)(*(uint64_t (**)(void))(**((void **)this + 9) + 232))(*((void *)this + 9));
  if (a2) {
    BOOL v6 = *((unsigned __int8 *)a2 + 16) >= 0x1Cu;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return a2;
  }
  return (llvm::Type **)llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)this, (uint64_t)a2, (uint64_t)a4);
}

uint64_t MTLIRBuilder::CreateAtomicFetchOr(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3)
{
  void v15[5] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)(*((void *)this + 6) + 56) + 40);
  BOOL v7 = (uint64_t *)((char *)this + 144);
  v15[0] = llvm::PointerType::get();
  uint64_t v8 = getOrInsertFunction<char const(&)[28],llvm::Type *&,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(v6, "air.atomic.global.or.s.i32", v7, v15, v7, v7, v7, v7 + 3);
  uint64_t v9 = v8;
  if (v8) {
    uint64_t v10 = *(void *)(v8 + 24);
  }
  else {
    uint64_t v10 = 0;
  }
  v15[0] = (uint64_t)a2;
  v15[1] = (uint64_t)a3;
  void v15[2] = llvm::ConstantInt::get();
  void v15[3] = llvm::ConstantInt::get();
  void v15[4] = llvm::ConstantInt::get();
  __int16 v14 = 257;
  uint64_t v11 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v10, v9, (uint64_t)v15, 5, (uint64_t)v13, 0);
  *(_WORD *)(v11 + 18) = *(_WORD *)(v11 + 18) & 0xFFFC | 1;
  llvm::Value::getContext((llvm::Value *)v11);
  *(void *)(v11 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v11);
  *(void *)(v11 + 64) = llvm::AttributeList::addAttributeAtIndex();
  return v11;
}

uint64_t MTLIRBuilder::CreateClamp(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  v14[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = getOrInsertFunction<char const(&)[16],llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(*(void *)(*(void *)(*((void *)this + 6) + 56) + 40), "air.clamp.u.i64", (uint64_t *)this + 17, (uint64_t *)this + 17, (uint64_t *)this + 17, (uint64_t *)this + 17);
  if (v8) {
    uint64_t v9 = *(void *)(v8 + 24);
  }
  else {
    uint64_t v9 = 0;
  }
  v14[0] = a2;
  v14[1] = a3;
  void v14[2] = a4;
  __int16 v13 = 257;
  uint64_t v10 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v9, v8, (uint64_t)v14, 3, (uint64_t)v12, 0);
  *(_WORD *)(v10 + 18) = *(_WORD *)(v10 + 18) & 0xFFFC | 1;
  llvm::Value::getContext((llvm::Value *)v10);
  *(void *)(v10 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v10);
  *(void *)(v10 + 64) = llvm::AttributeList::addAttributeAtIndex();
  return v10;
}

uint64_t getOrInsertFunction<char const(&)[16],llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  size_t v12 = strlen(__s);
  llvm::Module::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(a1, (uint64_t)__s, v12, 0, *a3, *a4, *a5, *a6);
  uint64_t result = v13;
  if (*(unsigned char *)(v13 + 16) == 5) {
    return *(void *)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF));
  }
  return result;
}

llvm::Value *MTLIRBuilder::CreateAddSat(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3)
{
  BOOL v4 = a2;
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(llvm::Type ***)(*(void *)(*((void *)this + 6) + 56) + 40);
  llvm::Type::getInt32Ty(*v6, a2);
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t v8 = llvm::FunctionType::get();
    __int16 v33 = 261;
    v32[0] = "air.add_sat.u.i32";
    v32[1] = 17;
    uint64_t Function = llvm::Function::Create(v8, 0, (uint64_t)v32, (uint64_t)v6);
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
  }
  llvm::Module::getDataLayout((llvm::Module *)v6);
  unsigned int v9 = *((unsigned __int8 *)v4 + 16);
  int v10 = *((unsigned __int8 *)a3 + 16);
  if (!v4 || (uint64_t v11 = v4, v9 != 16))
  {
    if (v9 >= 0x1C && (uint64_t v12 = llvm::ConstantFoldInstruction()) != 0)
    {
      if (*(unsigned char *)(v12 + 16) == 16) {
        uint64_t v11 = (llvm::Constant *)v12;
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
  }
  uint64_t v13 = a3;
  if (v10 == 16) {
    goto LABEL_17;
  }
  if (*((unsigned __int8 *)a3 + 16) >= 0x1Cu)
  {
    uint64_t v14 = llvm::ConstantFoldInstruction();
    if (v14)
    {
      if (*(unsigned char *)(v14 + 16) == 16) {
        uint64_t v13 = (llvm::Constant *)v14;
      }
      else {
        uint64_t v13 = 0;
      }
LABEL_17:
      if (v11 && v13) {
        return (llvm::Value *)llvm::ConstantInt::get();
      }
      if (v11) {
        goto LABEL_23;
      }
      if (v13)
      {
        if (llvm::Constant::isZeroValue(v13)) {
          return v4;
        }
        if (v4 && *((unsigned char *)v4 + 16) == 84)
        {
          uint64_t v22 = *((void *)v4 - 4);
          if (!v22 || *(unsigned char *)(v22 + 16) || *(void *)(v22 + 24) != *((void *)v4 + 9)) {
            uint64_t v22 = 0;
          }
          if (v22 == Function)
          {
            int v23 = (llvm::Value **)((char *)v4 - 32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
            uint64_t v24 = *v23;
            uint64_t v25 = v23[4];
            if (*((unsigned char *)*v23 + 16) == 16) {
              char v26 = *v23;
            }
            else {
              char v26 = 0;
            }
            if (*((unsigned char *)v25 + 16) == 16) {
              uint64_t v27 = v25;
            }
            else {
              uint64_t v27 = 0;
            }
            if (v26) {
              uint64_t v27 = v26;
            }
            if (v27)
            {
              BOOL v28 = v26 == 0;
              a3 = (llvm::Value *)llvm::ConstantInt::get();
              if (v28) {
                BOOL v4 = v24;
              }
              else {
                BOOL v4 = v25;
              }
            }
          }
        }
      }
      goto LABEL_64;
    }
  }
  if (v11)
  {
LABEL_23:
    if (llvm::Constant::isZeroValue(v11)) {
      return a3;
    }
    if (*((unsigned char *)a3 + 16) == 84)
    {
      uint64_t v15 = *((void *)a3 - 4);
      if (!v15 || *(unsigned char *)(v15 + 16) || *(void *)(v15 + 24) != *((void *)a3 + 9)) {
        uint64_t v15 = 0;
      }
      if (v15 == Function)
      {
        size_t v16 = (llvm::Value **)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
        uint64_t v17 = *v16;
        uint64_t v18 = v16[4];
        if (*((unsigned char *)*v16 + 16) == 16) {
          unint64_t v19 = *v16;
        }
        else {
          unint64_t v19 = 0;
        }
        if (*((unsigned char *)v18 + 16) == 16) {
          uint64_t v20 = v18;
        }
        else {
          uint64_t v20 = 0;
        }
        if (v19) {
          uint64_t v20 = v19;
        }
        if (v20)
        {
          BOOL v21 = v19 == 0;
          BOOL v4 = (llvm::Value *)llvm::ConstantInt::get();
          if (v21) {
            a3 = v17;
          }
          else {
            a3 = v18;
          }
        }
      }
    }
  }
LABEL_64:
  if (Function) {
    uint64_t v29 = *(void *)(Function + 24);
  }
  else {
    uint64_t v29 = 0;
  }
  v31[0] = v4;
  v31[1] = a3;
  __int16 v33 = 257;
  BOOL v4 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)this, v29, Function, (uint64_t)v31, 2, (uint64_t)v32, 0);
  *((_WORD *)v4 + 9) = *((_WORD *)v4 + 9) & 0xFFFC | 1;
  llvm::Value::getContext(v4);
  *((void *)v4 + 8) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext(v4);
  *((void *)v4 + 8) = llvm::AttributeList::addAttributeAtIndex();
  return v4;
}

uint64_t MTLIRBuilder::CreateBadAccessCall(llvm::Constant **this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5, llvm::Value *a6, llvm::Value *a7, llvm::Value *a8, llvm::Value *a9, llvm::Value *a10)
{
  uint64_t NullValue = a10;
  v25[9] = *MEMORY[0x263EF8340];
  if (!a10) {
    uint64_t NullValue = (llvm::Value *)llvm::Constant::getNullValue(this[18], a2);
  }
  uint64_t inserted = MTLIRBuilder::getOrInsertBadAccessFunction((MTLIRBuilder *)this, *(llvm::Module **)(*((void *)this[6] + 7) + 40));
  if (inserted) {
    uint64_t v20 = *(void *)(inserted + 24);
  }
  else {
    uint64_t v20 = 0;
  }
  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v25[4] = a6;
  v25[5] = a7;
  v25[6] = a8;
  v25[7] = a9;
  v25[8] = NullValue;
  __int16 v24 = 257;
  BOOL v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)this, v20, inserted, (uint64_t)v25, 9, (uint64_t)v23, 0);
  llvm::Value::getContext(v21);
  *((void *)v21 + 8) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext(v21);
  uint64_t result = llvm::AttributeList::addAttributeAtIndex();
  *((void *)v21 + 8) = result;
  return result;
}

uint64_t MTLIRBuilder::getOrInsertBadAccessFunction(MTLIRBuilder *this, llvm::Module *a2)
{
  uint64_t VoidTy = llvm::Type::getVoidTy(*((llvm::Type **)this + 8), a2);
  uint64_t v7 = llvm::PointerType::get();
  uint64_t v6 = llvm::PointerType::get();
  uint64_t v4 = getOrInsertFunction<char const(&)[16],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>((uint64_t)a2, "mtl.bad_access", &VoidTy, &v7, &v6, (uint64_t *)this + 22, (void *)this + 17, (void *)this + 17, (void *)this + 19, (void *)this + 19, (uint64_t *)this + 18, (uint64_t *)this + 18);
  llvm::GlobalObject::setSection();
  return v4;
}

uint64_t MTLIRBuilder::CreateIsNullTextureCall(uint64_t *a1, llvm::Value **a2)
{
  BitOrPointeruint64_t Cast = (llvm::Value *)a2;
  v48[1] = *MEMORY[0x263EF8340];
  uint64_t Name = llvm::Value::getName(a2[3]);
  uint64_t v6 = 12;
  if (v5 < 0xC) {
    uint64_t v6 = v5;
  }
  v47.n128_u64[0] = Name + v6;
  v47.n128_u64[1] = v5 - v6;
  llvm::StringRef::split(&v47, 1, v44);
  unint64_t v7 = v44[0].n128_u64[1];
  unint64_t v8 = v44[0].n128_u64[1] - 5;
  if (v44[0].n128_u64[1] < 5) {
    goto LABEL_4;
  }
  if (v44[0].n128_u64[1] < v8) {
    unint64_t v8 = v44[0].n128_u64[1];
  }
  if (!(*(_DWORD *)(v44[0].n128_u64[0] + v44[0].n128_u64[1] - 5) ^ 0x6172675F | *(unsigned __int8 *)(v44[0].n128_u64[0] + v44[0].n128_u64[1] - 1) ^ 0x64)) {
    unint64_t v7 = v8;
  }
  if (v7 >= 0xA)
  {
    unint64_t v12 = v44[0].n128_u64[0] + v7;
    if (*(void *)(v44[0].n128_u64[0] + v7 - 10) == 0x5F65727574786574
      && *(_WORD *)(v44[0].n128_u64[0] + v7 - 2) == 25649)
    {
      int v10 = "struct._texture_1d_t";
      unsigned int v9 = "air.is_null_texture_1d";
      goto LABEL_5;
    }
    if (v7 >= 0x10)
    {
      if (*(void *)(v12 - 16) == 0x5F65727574786574 && *(void *)(v12 - 8) == 0x79617272615F6431)
      {
        int v10 = "struct._texture_1d_array_t";
        unsigned int v9 = "air.is_null_texture_1d_array";
        goto LABEL_5;
      }
      if (*(void *)(v12 - 10) != 0x5F65727574786574 || *(_WORD *)(v12 - 2) != 25650)
      {
        if (*(void *)(v12 - 16) == 0x5F65727574786574 && *(void *)(v12 - 8) == 0x79617272615F6432)
        {
          int v10 = "struct._texture_2d_array_t";
          unsigned int v9 = "air.is_null_texture_2d_array";
          goto LABEL_5;
        }
        goto LABEL_56;
      }
    }
    else if (*(void *)(v12 - 10) != 0x5F65727574786574 || *(_WORD *)(v12 - 2) != 25650)
    {
      if (v7 < 0xD)
      {
        if (v7 != 12
          || (*(void *)v44[0].n128_u64[0] == 0x5F65727574786574
            ? (BOOL v15 = *(_DWORD *)(v44[0].n128_u64[0] + 8) == 1700951395)
            : (BOOL v15 = 0),
              !v15))
        {
LABEL_80:
          uint64_t v30 = *(void *)(v12 - 10);
          int v31 = *(unsigned __int16 *)(v12 - 2);
          if (v30 == 0x5F65727574786574 && v31 == 25651)
          {
            int v10 = "struct._texture_3d_t";
            unsigned int v9 = "air.is_null_texture_3d";
            goto LABEL_5;
          }
          goto LABEL_13;
        }
        goto LABEL_128;
      }
LABEL_56:
      if (*(void *)(v12 - 13) == 0x5F65727574786574 && *(void *)(v12 - 8) == 0x736D5F64325F6572)
      {
        int v10 = "struct._texture_2d_ms_t";
        unsigned int v9 = "air.is_null_texture_2d_ms";
        goto LABEL_5;
      }
      if (v7 >= 0x13)
      {
        BOOL v25 = *(void *)(v12 - 19) == 0x5F65727574786574 && *(void *)(v12 - 11) == 0x72615F736D5F6432;
        if (v25 && *(void *)(v12 - 8) == 0x79617272615F736DLL)
        {
          int v10 = "struct._texture_2d_ms_array_t";
          unsigned int v9 = "air.is_null_texture_2d_ms_array";
          goto LABEL_5;
        }
      }
      if (*(void *)(v12 - 12) != 0x5F65727574786574 || *(_DWORD *)(v12 - 4) != 1700951395)
      {
        if (v7 >= 0x12)
        {
          BOOL v28 = *(void *)(v12 - 18) == 0x5F65727574786574 && *(void *)(v12 - 10) == 0x7272615F65627563;
          if (v28 && *(_WORD *)(v12 - 2) == 31073)
          {
            int v10 = "struct._texture_cube_array_t";
            unsigned int v9 = "air.is_null_texture_cube_array";
            goto LABEL_5;
          }
        }
        goto LABEL_80;
      }
LABEL_128:
      int v10 = "struct._texture_cube_t";
      unsigned int v9 = "air.is_null_texture_cube";
      goto LABEL_5;
    }
    int v10 = "struct._texture_2d_t";
    unsigned int v9 = "air.is_null_texture_2d";
    goto LABEL_5;
  }
  if (v7 < 8) {
    goto LABEL_4;
  }
LABEL_13:
  unint64_t v11 = v44[0].n128_u64[0] + v7;
  if (*(void *)(v44[0].n128_u64[0] + v7 - 8) == 0x64325F6874706564)
  {
    int v10 = "struct._depth_2d_t";
    unsigned int v9 = "air.is_null_depth_2d";
    goto LABEL_5;
  }
  if (v7 >= 0xE)
  {
    if (*(void *)(v11 - 14) == 0x64325F6874706564 && *(void *)(v11 - 8) == 0x79617272615F6432)
    {
      int v10 = "struct._depth_2d_array_t";
      unsigned int v9 = "air.is_null_depth_2d_array";
      goto LABEL_5;
    }
  }
  else if (v7 < 0xA)
  {
    goto LABEL_4;
  }
  if (*(void *)(v11 - 10) == 0x75635F6874706564 && *(_WORD *)(v11 - 2) == 25954)
  {
    int v10 = "struct._depth_cube_t";
    unsigned int v9 = "air.is_null_depth_cube";
    goto LABEL_5;
  }
  if (v7 >= 0x10)
  {
    if (*(void *)(v11 - 16) == 0x75635F6874706564 && *(void *)(v11 - 8) == 0x79617272615F6562)
    {
      int v10 = "struct._depth_cube_array_t";
      unsigned int v9 = "air.is_null_depth_cube_array";
      goto LABEL_5;
    }
  }
  else if (v7 < 0xB)
  {
    goto LABEL_4;
  }
  if (*(void *)(v11 - 11) == 0x64325F6874706564 && *(void *)(v11 - 8) == 0x736D5F64325F6874)
  {
    int v10 = "struct._depth_2d_ms_t";
    unsigned int v9 = "air.is_null_depth_2d_ms";
    goto LABEL_5;
  }
  if (v7 < 0x11)
  {
LABEL_4:
    unsigned int v9 = 0;
    int v10 = 0;
    goto LABEL_5;
  }
  if (*(void *)(v11 - 17) == 0x64325F6874706564
    && *(void *)(v11 - 9) == 0x617272615F736D5FLL
    && *(unsigned char *)(v11 - 1) == 121)
  {
    int v10 = "struct._depth_2d_ms_array_t";
    unsigned int v9 = "air.is_null_depth_2d_ms_array";
  }
  else
  {
    uint64_t v39 = *(void *)(v11 - 17);
    uint64_t v40 = *(void *)(v11 - 9);
    int v41 = *(unsigned __int8 *)(v11 - 1);
    if (v39 != 0x5F65727574786574 || v40 != 0x315F726566667562 || v41 != 100) {
      goto LABEL_4;
    }
    int v10 = "struct._texture_buffer_1d_t";
    unsigned int v9 = "air.is_null_texture_buffer_1d";
  }
LABEL_5:
  TypeByuint64_t Name = 0;
  v47.n128_u64[0] = (unint64_t)v9;
  llvm::Value::getContext(BitOrPointerCast);
  if (v10) {
    strlen(v10);
  }
  TypeByuint64_t Name = llvm::StructType::getTypeByName();
  if (!TypeByName)
  {
    llvm::Value::getContext(BitOrPointerCast);
    if (v10) {
      strlen(v10);
    }
    llvm::StructType::create();
  }
  TypeByuint64_t Name = llvm::PointerType::get();
  uint64_t v16 = getOrInsertFunction<char const*&,llvm::Type *&,llvm::Type *&>(*(void *)(*(void *)(a1[6] + 56) + 40), (const char **)&v47, a1 + 21, &TypeByName);
  if ((llvm::Function::hasFnAttribute() & 1) == 0)
  {
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
  }
  uint64_t v17 = *(void *)(v16 + 24);
  uint64_t v18 = *(llvm::Type **)(*(void *)(v17 + 16) + 8);
  if (v18 != *(llvm::Type **)BitOrPointerCast)
  {
    __int16 v45 = 257;
    BitOrPointeruint64_t Cast = llvm::IRBuilderBase::CreateBitOrPointerCast((llvm::IRBuilderBase *)a1, (llvm::Type **)BitOrPointerCast, v18, (const llvm::Twine *)v44);
    uint64_t v17 = *(void *)(v16 + 24);
  }
  v48[0] = BitOrPointerCast;
  __int16 v45 = 257;
  uint64_t v19 = llvm::IRBuilderBase::CreateCall((uint64_t)a1, v17, v16, (uint64_t)v48, 1, (uint64_t)v44, 0);
  *(_WORD *)(v19 + 18) = *(_WORD *)(v19 + 18) & 0xFFFC | 1;
  llvm::Value::getContext((llvm::Value *)v19);
  *(void *)(v19 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v19);
  *(void *)(v19 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v19);
  *(void *)(v19 + 64) = llvm::AttributeList::addAttributeAtIndex();
  return v19;
}

__n128 llvm::StringRef::split@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  unint64_t v6 = llvm::StringRef::find();
  if (v6 == -1)
  {
    a3[1].n128_u64[0] = 0;
    a3[1].n128_u64[1] = 0;
    __n128 result = *a1;
    *a3 = *a1;
  }
  else
  {
    unint64_t v9 = a1->n128_u64[0];
    unint64_t v8 = a1->n128_u64[1];
    if (v8 >= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = a1->n128_u64[1];
    }
    unint64_t v11 = v6 + a2;
    if (v8 < v6 + a2) {
      unint64_t v11 = a1->n128_u64[1];
    }
    a3->n128_u64[0] = v9;
    a3->n128_u64[1] = v10;
    a3[1].n128_u64[0] = v9 + v11;
    a3[1].n128_u64[1] = v8 - v11;
  }
  return result;
}

uint64_t getOrInsertFunction<char const*&,llvm::Type *&,llvm::Type *&>(uint64_t a1, const char **a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v7 = *a2;
  if (*a2) {
    size_t v8 = strlen(*a2);
  }
  else {
    size_t v8 = 0;
  }
  llvm::Module::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)v7, v8, 0, *a3, *a4);
  uint64_t result = v9;
  if (*(unsigned char *)(v9 + 16) == 5) {
    return *(void *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
  }
  return result;
}

uint64_t MTLIRBuilder::CreateBadTextureCall(llvm::Constant **this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5, llvm::Value *a6, llvm::Value *a7, llvm::Value *a8, llvm::Value *a9, llvm::Value *a10)
{
  uint64_t NullValue = a10;
  v25[9] = *MEMORY[0x263EF8340];
  if (!a10) {
    uint64_t NullValue = (llvm::Value *)llvm::Constant::getNullValue(this[18], a2);
  }
  uint64_t inserted = MTLIRBuilder::getOrInsertBadTextureFunction((MTLIRBuilder *)this, *(llvm::Module **)(*((void *)this[6] + 7) + 40));
  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v25[4] = a6;
  v25[5] = a7;
  v25[6] = a8;
  v25[7] = a9;
  v25[8] = NullValue;
  if (inserted) {
    uint64_t v20 = *(void *)(inserted + 24);
  }
  else {
    uint64_t v20 = 0;
  }
  __int16 v24 = 257;
  BOOL v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)this, v20, inserted, (uint64_t)v25, 9, (uint64_t)v23, 0);
  llvm::Value::getContext(v21);
  *((void *)v21 + 8) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext(v21);
  uint64_t result = llvm::AttributeList::addAttributeAtIndex();
  *((void *)v21 + 8) = result;
  return result;
}

uint64_t MTLIRBuilder::getOrInsertBadTextureFunction(MTLIRBuilder *this, llvm::Module *a2)
{
  uint64_t VoidTy = llvm::Type::getVoidTy(*((llvm::Type **)this + 8), a2);
  uint64_t v7 = llvm::PointerType::get();
  uint64_t v6 = llvm::PointerType::get();
  uint64_t v4 = getOrInsertFunction<char const(&)[16],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>((uint64_t)a2, "mtl.bad_texture", &VoidTy, &v7, &v6, (uint64_t *)this + 22, (void *)this + 17, (void *)this + 18, (void *)this + 18, (void *)this + 20, (uint64_t *)this + 20, (uint64_t *)this + 18);
  llvm::GlobalObject::setSection();
  return v4;
}

uint64_t MTLIRBuilder::getOrInsertTrapFunction(MTLIRBuilder *this, llvm::Module *a2)
{
  uint64_t Function = llvm::Module::getFunction();
  if (!Function)
  {
    uint64_t VoidTy = llvm::Type::getVoidTy(*((llvm::Type **)this + 8), v4);
    uint64_t v8 = llvm::PointerType::get();
    uint64_t v7 = llvm::PointerType::get();
    uint64_t Function = getOrInsertFunction<char const(&)[16],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>((uint64_t)a2, "mtl.report_trap", &VoidTy, &v8, &v7, (uint64_t *)this + 22, (void *)this + 17, (void *)this + 18, (uint64_t *)this + 18);
    if (Function) {
      llvm::GlobalObject::setSection();
    }
  }
  return Function;
}

uint64_t getOrInsertFunction<char const(&)[16],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, void *a8, uint64_t *a9)
{
  size_t v17 = strlen(__s);
  *((void *)&v20 + 1) = *a8;
  *(void *)&long long v20 = *a7;
  llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(a1, (uint64_t)__s, v17, 0, *a3, *a4, *a5, *a6, v20, *a9);
  uint64_t result = v18;
  if (*(unsigned char *)(v18 + 16) == 5) {
    return *(void *)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF));
  }
  return result;
}

uint64_t MTLIRBuilder::CreateTrapCall(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5)
{
  v16[6] = *MEMORY[0x263EF8340];
  uint64_t inserted = MTLIRBuilder::getOrInsertTrapFunction(this, *(llvm::Module **)(*(void *)(*((void *)this + 6) + 56) + 40));
  uint64_t v11 = inserted;
  if (inserted) {
    uint64_t v12 = *(void *)(inserted + 24);
  }
  else {
    uint64_t v12 = 0;
  }
  v16[0] = a2;
  v16[1] = a3;
  _DWORD v16[2] = a4;
  void v16[3] = a5;
  uint64_t v16[4] = llvm::ConstantInt::get();
  void v16[5] = llvm::ConstantInt::get();
  v15[16] = 257;
  uint64_t v13 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v12, v11, (uint64_t)v16, 6, (uint64_t)v15, 0);
  llvm::Value::getContext((llvm::Value *)v13);
  *(void *)(v13 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v13);
  uint64_t result = llvm::AttributeList::addAttributeAtIndex();
  *(void *)(v13 + 64) = result;
  *(_WORD *)(v13 + 18) = *(_WORD *)(v13 + 18) & 0xFFFC | 1;
  return result;
}

uint64_t MTLIRBuilder::CreateStackOverflowCall(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5, unsigned int a6, llvm::Value *a7)
{
  v19[6] = *MEMORY[0x263EF8340];
  uint64_t inserted = MTLIRBuilder::getOrInsertStackOverflowFunction(this, *(llvm::Module **)(*(void *)(*((void *)this + 6) + 56) + 40));
  uint64_t v14 = inserted;
  if (inserted) {
    uint64_t v15 = *(void *)(inserted + 24);
  }
  else {
    uint64_t v15 = 0;
  }
  v19[0] = a2;
  v19[1] = a3;
  void v19[2] = a4;
  v19[3] = a5;
  uint64_t v19[4] = llvm::ConstantInt::get();
  v19[5] = a7;
  v18[16] = 257;
  uint64_t v16 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v15, v14, (uint64_t)v19, 6, (uint64_t)v18, 0);
  llvm::Value::getContext((llvm::Value *)v16);
  *(void *)(v16 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v16);
  uint64_t result = llvm::AttributeList::addAttributeAtIndex();
  *(void *)(v16 + 64) = result;
  *(_WORD *)(v16 + 18) = *(_WORD *)(v16 + 18) & 0xFFFC | 1;
  return result;
}

uint64_t MTLIRBuilder::getOrInsertStackOverflowFunction(MTLIRBuilder *this, llvm::Module *a2)
{
  uint64_t VoidTy = llvm::Type::getVoidTy(*((llvm::Type **)this + 8), a2);
  uint64_t v7 = llvm::PointerType::get();
  uint64_t v6 = llvm::PointerType::get();
  uint64_t v4 = getOrInsertFunction<char const(&)[16],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>((uint64_t)a2, "mtl.stack_overflow", &VoidTy, &v7, &v6, (uint64_t *)this + 22, (void *)this + 17, (void *)this + 18, (uint64_t *)this + 18);
  llvm::GlobalObject::setSection();
  return v4;
}

uint64_t MTLIRBuilder::CreateBadAccelerationStructureCall(MTLIRBuilder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5, unsigned int a6, llvm::Value *a7, llvm::Value *a8, llvm::Value *a9)
{
  v23[8] = *MEMORY[0x263EF8340];
  uint64_t inserted = MTLIRBuilder::getOrInsertBadAccelerationStructureFunction(this, *(llvm::Module **)(*(void *)(*((void *)this + 6) + 56) + 40));
  uint64_t v16 = inserted;
  if (inserted) {
    uint64_t v17 = *(void *)(inserted + 24);
  }
  else {
    uint64_t v17 = 0;
  }
  v23[0] = a2;
  v23[1] = a3;
  void v23[2] = a4;
  _DWORD v23[3] = a5;
  v23[4] = llvm::ConstantInt::get();
  v23[5] = a7;
  v23[6] = a8;
  v23[7] = a9;
  __int16 v22 = 257;
  uint64_t v18 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v17, v16, (uint64_t)v23, 8, (uint64_t)v21, 0);
  llvm::Value::getContext((llvm::Value *)v18);
  *(void *)(v18 + 64) = llvm::AttributeList::addAttributeAtIndex();
  llvm::Value::getContext((llvm::Value *)v18);
  uint64_t result = llvm::AttributeList::addAttributeAtIndex();
  *(void *)(v18 + 64) = result;
  *(_WORD *)(v18 + 18) = *(_WORD *)(v18 + 18) & 0xFFFC | 1;
  return result;
}

uint64_t MTLIRBuilder::getOrInsertBadAccelerationStructureFunction(MTLIRBuilder *this, llvm::Module *a2)
{
  uint64_t VoidTy = llvm::Type::getVoidTy(*((llvm::Type **)this + 8), a2);
  uint64_t v7 = llvm::PointerType::get();
  uint64_t v6 = llvm::PointerType::get();
  uint64_t v4 = getOrInsertFunction<char const(&)[31],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>((uint64_t)a2, "mtl.bad_acceleration_structure", &VoidTy, &v7, &v6, (uint64_t *)this + 22, (void *)this + 17, (void *)this + 18, (void *)this + 18, (void *)this + 17, (uint64_t *)this + 17);
  llvm::GlobalObject::setSection();
  return v4;
}

uint64_t getOrInsertFunction<char const(&)[16],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, void *a8, void *a9, void *a10, uint64_t *a11, uint64_t *a12)
{
  size_t v18 = strlen(__s);
  *(void *)&long long v22 = *a9;
  *((void *)&v22 + 1) = *a10;
  *(void *)&long long v21 = *a7;
  *((void *)&v21 + 1) = *a8;
  llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(a1, (uint64_t)__s, v18, 0, *a3, *a4, *a5, *a6, v21, v22, *a11, *a12);
  uint64_t result = v19;
  if (*(unsigned char *)(v19 + 16) == 5) {
    return *(void *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
  }
  return result;
}

uint64_t getOrInsertFunction<char const(&)[31],llvm::Type *,llvm::PointerType *,llvm::PointerType *,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&,llvm::Type *&>(uint64_t a1, char *__s, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7, void *a8, void *a9, void *a10, uint64_t *a11)
{
  size_t v18 = strlen(__s);
  *((void *)&v22 + 1) = *a10;
  *((void *)&v21 + 1) = *a8;
  *(void *)&long long v22 = *a9;
  *(void *)&long long v21 = *a7;
  llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(a1, (uint64_t)__s, v18, 0, *a3, *a4, *a5, *a6, v21, v22, *a11);
  uint64_t result = v19;
  if (*(unsigned char *)(v19 + 16) == 5) {
    return *(void *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
  }
  return result;
}

uint64_t llvm::Module::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12[3] = *MEMORY[0x263EF8340];
  v10[0] = a6;
  v10[1] = a7;
  void v10[2] = a8;
  llvm::SmallVector<llvm::Type *,3u>::SmallVector((uint64_t)&v11, v10, 3);
  llvm::FunctionType::get();
  uint64_t inserted = llvm::Module::getOrInsertFunction();
  if (v11 != v12) {
    free(v11);
  }
  return inserted;
}

void sub_25577F2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t llvm::SmallVector<llvm::Type *,3u>::SmallVector(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x300000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_25577F30C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::Module::getOrInsertFunction<llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v8 = a6;
  llvm::SmallVector<llvm::Type *,1u>::SmallVector((uint64_t)&v9, &v8, 1);
  llvm::FunctionType::get();
  uint64_t inserted = llvm::Module::getOrInsertFunction();
  if (v9 != v10) {
    free(v9);
  }
  return inserted;
}

void sub_25577F408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10)
{
  v16[6] = *MEMORY[0x263EF8340];
  v12[0] = a6;
  v12[1] = a7;
  v12[2] = a8;
  long long v13 = a9;
  uint64_t v14 = a10;
  llvm::SmallVector<llvm::Type *,6u>::SmallVector((uint64_t)&v15, v12, 6);
  llvm::FunctionType::get();
  uint64_t inserted = llvm::Module::getOrInsertFunction();
  if (v15 != v16) {
    free(v15);
  }
  return inserted;
}

void sub_25577F524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

uint64_t llvm::SmallVector<llvm::Type *,6u>::SmallVector(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x600000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_25577F590(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11, uint64_t a12)
{
  v20[9] = *MEMORY[0x263EF8340];
  v14[0] = a6;
  v14[1] = a7;
  void v14[2] = a8;
  long long v15 = a9;
  long long v16 = a10;
  uint64_t v17 = a11;
  uint64_t v18 = a12;
  llvm::SmallVector<llvm::Type *,9u>::SmallVector((uint64_t)&v19, v14, 9);
  llvm::FunctionType::get();
  uint64_t inserted = llvm::Module::getOrInsertFunction();
  if (v19 != v20) {
    free(v19);
  }
  return inserted;
}

void sub_25577F6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
}

uint64_t llvm::SmallVector<llvm::Type *,9u>::SmallVector(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x900000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_25577F70C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t llvm::Module::getOrInsertFunction<llvm::PointerType *,llvm::PointerType *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, uint64_t a11)
{
  void v18[8] = *MEMORY[0x263EF8340];
  v13[0] = a6;
  v13[1] = a7;
  void v13[2] = a8;
  long long v14 = a9;
  long long v15 = a10;
  uint64_t v16 = a11;
  llvm::SmallVector<llvm::Type *,8u>::SmallVector((uint64_t)&v17, v13, 8);
  llvm::FunctionType::get();
  uint64_t inserted = llvm::Module::getOrInsertFunction();
  if (v17 != v18) {
    free(v17);
  }
  return inserted;
}

void sub_25577F81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

uint64_t llvm::SmallVector<llvm::Type *,8u>::SmallVector(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x800000000;
  llvm::SmallVectorImpl<llvm::Metadata *>::append<llvm::Metadata * const*,void>((unsigned int *)a1, a2, &a2[8 * a3]);
  return a1;
}

void sub_25577F888(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  if (*v1 != v3) {
    free(*v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL isBufferMetadata(uint64_t a1)
{
  uint64_t v1 = *(llvm::MDString **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8);
  if (*(unsigned char *)v1) {
    return 0;
  }
  uint64_t String = (void *)llvm::MDString::getString(v1);
  uint64_t v2 = 0;
  if (v4 > 30)
  {
    if (v4 == 31)
    {
      return *String == 0x65746E692E726961
          && String[1] == 0x6E6F697463657372
          && String[2] == 0x6F6974636E75665FLL
          && *(void *)((char *)String + 23) == 0x656C6261745F6E6FLL;
    }
    else
    {
      if (v4 == 35)
      {
        uint64_t v8 = "air.instance_acceleration_structure";
        size_t v9 = 35;
      }
      else
      {
        if (v4 != 36) {
          return v2;
        }
        uint64_t v8 = "air.primitive_acceleration_structure";
        size_t v9 = 36;
      }
      return memcmp(String, v8, v9) == 0;
    }
  }
  else
  {
    switch(v4)
    {
      case 10:
        BOOL v7 = *String == 0x666675622E726961 && *((_WORD *)String + 4) == 29285;
        break;
      case 19:
        BOOL v7 = *String == 0x69646E692E726961
          && String[1] == 0x6675625F74636572
          && *(void *)((char *)String + 11) == 0x7265666675625F74;
        break;
      case 26:
        BOOL v7 = *String == 0x697369762E726961
          && String[1] == 0x636E75665F656C62
          && String[2] == 0x6261745F6E6F6974
          && *((_WORD *)String + 12) == 25964;
        break;
      default:
        return v2;
    }
  }
  return v7;
}

void createMTLArgumentBufferConversionPass(MTLBoundsCheck::SharedPassData *a1)
{
}

void sub_25577FAD4(_Unwind_Exception *a1)
{
  MEMORY[0x25A28E250](v1, 0x10E1C40C8265ECALL);
  _Unwind_Resume(a1);
}

void MTLArgumentBufferConversion::~MTLArgumentBufferConversion(MTLArgumentBufferConversion *this)
{
  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_2704532C8;
  uint64_t v2 = (char *)this + 136;
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)this + 160);
  llvm::DenseMap<llvm::Function *,llvm::MDTuple *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::MDTuple *>>::~DenseMap((uint64_t)v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x25A28E250);
}

BOOL MTLArgumentBufferConversion::runOnModule(MTLArgumentBufferConversion *this, llvm::Module *a2)
{
  v121[8] = *MEMORY[0x263EF8340];
  MetalModulePass::runOnModule(this, a2);
  isLibraryuint64_t Module = MTLBoundsCheck::isLibraryModule(a2, v4);
  if (!isLibraryModule)
  {
    std::string v96 = 0;
    uint64_t v97 = 0;
    unsigned int v98 = 0;
    v94[0] = 0;
    v94[1] = 0;
    unsigned int v95 = 0;
    uint64_t v119 = v121;
    uint64_t v120 = 0x800000000;
    v117[0] = &v118;
    v117[1] = (void *)0x800000000;
    uint64_t v114 = &v116;
    uint64_t v115 = 0x1F00000000;
    if ((*(unsigned char *)(*((void *)this + 4) + 22) & 2) != 0)
    {
      unint64_t v6 = 1;
      llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)&v114, 1uLL);
    }
    else
    {
      unint64_t v6 = 31;
      llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)&v114, 0x1FuLL);
    }
    llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v114, v6, 0);
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<decltype(nullptr)>((uint64_t)v117);
    uint64_t v111 = 0;
    llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<decltype(nullptr)>((uint64_t)&v119);
    Entryuint64_t Function = MetalModulePass::getEntryFunction(this);
    uint64_t v8 = *(void *)(*((void *)this + 16) - 8 * *(unsigned int *)(*((void *)this + 16) + 8) + 16);
    unint64_t v9 = *(unsigned int *)(v8 + 8);
    if (!v9)
    {
LABEL_27:
      if ((*(unsigned char *)(*((void *)this + 4) + 22) & 2) != 0)
      {
        long long v22 = (llvm::ArrayType *)llvm::PointerType::get();
        uint64_t v23 = llvm::ArrayType::get(v22, (llvm::Type *)0x1F);
        *(void *)uint64_t v114 = v23;
      }
      else
      {
        unsigned int v20 = v115;
        if (v115)
        {
          uint64_t v21 = 0;
          do
          {
            if (!*((void *)v114 + v21))
            {
              *((void *)v114 + v21) = llvm::PointerType::get();
              unsigned int v20 = v115;
            }
            ++v21;
          }
          while (v20 > v21);
        }
      }
      __int16 v24 = (llvm::Type *)llvm::StructType::create();
      llvm::DataLayout::getStructLayout();
      uint64_t v111 = &v113;
      uint64_t v112 = 0x1F00000000;
      v109[0] = &v110;
      v109[1] = (void *)0x1F00000000;
      llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)v109, v115);
      __val[0] = 0;
      int v83 = (llvm::Function *)EntryFunction;
      if (v115)
      {
        uint64_t v25 = 0;
        int v82 = v24;
        uint64_t v81 = v8;
        do
        {
          uint64_t v26 = *((void *)v24 + 2);
          if ((*(unsigned char *)(*((void *)this + 4) + 22) & 2) != 0) {
            uint64_t v27 = *(llvm::Type *****)(*(void *)v26 + 16);
          }
          else {
            uint64_t v27 = (llvm::Type ****)(v26 + 8 * v25);
          }
          BOOL v28 = *v27;
          std::string::basic_string[abi:ne180100]<0>(&__src, "ab.");
          std::to_string(&__dst, __val[0]);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __dst.__r_.__value_.__l.__size_;
          }
          int v31 = std::string::append(&__src, (const std::string::value_type *)p_dst, size);
          long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          __p[0].__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v32;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__src.__r_.__value_.__l.__data_);
          }
          uint64_t StructTypeInfo = 0;
          if ((*(unsigned char *)(*((void *)this + 4) + 22) & 2) != 0
            || ((__src.__r_.__value_.__r.__words[0] = 0,
                 int v33 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::LookupBucketFor<unsigned int>(v94, __val, &__src), __src.__r_.__value_.__r.__words[0] != v94[0] + 32 * v95)? (v34 = v33): (v34 = 0), v34 != 1))
          {
            uint64_t String = "air.buffer";
            size_t v42 = 10;
            int v37 = "int";
            size_t v38 = 3;
            uint64_t v43 = "air.read_write";
            size_t v44 = 14;
          }
          else
          {
            unint64_t v35 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::FindAndConstruct(v94, __val);
            llvm::SmallVector<unsigned int,2u>::SmallVector(&__src, (uint64_t)(v35 + 2));
            if (LODWORD(__src.__r_.__value_.__r.__words[1]) == 1)
            {
              uint64_t v36 = *(unsigned int **)(v81
                                     - 8 * *(unsigned int *)(v81 + 8)
                                     + 8 * *(unsigned int *)__src.__r_.__value_.__l.__data_);
              v91[0] = "int";
              v91[1] = 3;
              char v92 = 1;
              MTLBoundsCheck::getArgTypeName((uint64_t)v36, (uint64_t)v91, (uint64_t)&__dst);
              size_t v38 = __dst.__r_.__value_.__l.__size_;
              int v37 = (char *)__dst.__r_.__value_.__r.__words[0];
              std::string::size_type v39 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
              uint64_t v40 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v39 = __p[0].__r_.__value_.__l.__size_;
              }
              else {
                uint64_t v40 = __p;
              }
              v89[0] = v40;
              v89[1] = v39;
              char v90 = 1;
              MTLBoundsCheck::getArgName(v36, (uint64_t)v89, (uint64_t)&Metadata);
              if (Metadata) {
                std::string::basic_string[abi:ne180100](&__dst, Metadata, __len);
              }
              else {
                memset(&__dst, 0, sizeof(__dst));
              }
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              __p[0] = __dst;
              v87.n128_u64[0] = (unint64_t)"air.read_write";
              v87.n128_u64[1] = 14;
              char v88 = 1;
              MTLBoundsCheck::getArgAccessType((uint64_t)v36, &v87, (uint64_t)&__dst);
              size_t v44 = __dst.__r_.__value_.__l.__size_;
              uint64_t v43 = (char *)__dst.__r_.__value_.__r.__words[0];
              uint64_t String = (char *)llvm::MDString::getString(*(llvm::MDString **)&v36[-2 * v36[2] + 2]);
              size_t v42 = v55;
              uint64_t StructTypeInfo = MTLBoundsCheck::getStructTypeInfo((uint64_t)v36);
            }
            else
            {
              uint64_t String = "air.buffer";
              size_t v42 = 10;
              int v37 = "int";
              size_t v38 = 3;
              uint64_t v43 = "air.read_write";
              size_t v44 = 14;
            }
            if ((std::string::size_type *)__src.__r_.__value_.__l.__data_ != &__src.__r_.__value_.__r.__words[2]) {
              free(__src.__r_.__value_.__l.__data_);
            }
          }
          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src.__r_.__value_.__r.__words[2];
          __src.__r_.__value_.__l.__size_ = 0x800000000;
          __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata<unsigned int>();
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&__dst);
          if (String) {
            std::string::basic_string[abi:ne180100](&__dst, String, v42);
          }
          else {
            memset(&__dst, 0, sizeof(__dst));
          }
          MetaBOOL data = (void *)MetalModulePass::getMetadata();
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&Metadata);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.location_index", v45);
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&__dst);
          __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata<unsigned int>();
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&__dst);
          __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata<int>();
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&__dst);
          if (v43) {
            std::string::basic_string[abi:ne180100](&__dst, v43, v44);
          }
          else {
            memset(&__dst, 0, sizeof(__dst));
          }
          MetaBOOL data = (void *)MetalModulePass::getMetadata();
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&Metadata);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (StructTypeInfo)
          {
            __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.struct_type_info", v46);
            llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&__dst);
            llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, &StructTypeInfo);
          }
          if (llvm::Type::isSized((uint64_t)*v28[2]))
          {
            __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.arg_type_size", v47);
            llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&__dst);
            __dst.__r_.__value_.__r.__words[0] = (llvm::DataLayout::getTypeSizeInBits(*((llvm::DataLayout **)this + 7), *v28[2])+ 7) >> 3;
            __dst.__r_.__value_.__l.__size_ = v48 == 1;
            MetaBOOL data = (void *)MetalModulePass::getMetadata();
            llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&Metadata);
            __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.arg_type_align_size", v49);
            llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&__dst);
            llvm::DataLayout::getPrefTypeAlignment(*((llvm::DataLayout **)this + 7), *v28[2]);
            __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata<unsigned long long>();
            llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&__dst);
          }
          __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.arg_type_name", v47);
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&__dst);
          if (v37) {
            std::string::basic_string[abi:ne180100](&__dst, v37, v38);
          }
          else {
            memset(&__dst, 0, sizeof(__dst));
          }
          MetaBOOL data = (void *)MetalModulePass::getMetadata();
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&Metadata);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.arg_name", v50);
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&__dst);
          __dst.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata();
          llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&__src, (uint64_t *)&__dst);
          *((void *)v109[0] + __val[0]) = llvm::MDTuple::getImpl();
          if ((std::string::size_type *)__src.__r_.__value_.__l.__data_ != &__src.__r_.__value_.__r.__words[2]) {
            free(__src.__r_.__value_.__l.__data_);
          }
          MetaBOOL data = (void *)((llvm::DataLayout::getTypeSizeInBits(*((llvm::DataLayout **)this + 7), (llvm::Type *)v28)
                             + 7) >> 3);
          size_t __len = v51 == 1;
          int v52 = v111;
          uint64_t v53 = v112;
          Entryuint64_t Function = (uint64_t)v83;
          __int16 v24 = v82;
          __src.__r_.__value_.__r.__words[0] = MetalModulePass::getMetadata<unsigned int>();
          llvm::TypeSize::operator unsigned long long();
          __src.__r_.__value_.__l.__size_ = MetalModulePass::getMetadata<unsigned int>();
          __src.__r_.__value_.__r.__words[2] = MetalModulePass::getMetadata<unsigned int>();
          if (v37) {
            std::string::basic_string[abi:ne180100](&__dst, v37, v38);
          }
          else {
            memset(&__dst, 0, sizeof(__dst));
          }
          uint64_t v101 = MetalModulePass::getMetadata();
          uint64_t v102 = MetalModulePass::getMetadata();
          uint64_t v103 = MetalModulePass::getMetadata((llvm::MDString **)this, (llvm::LLVMContext *)"air.indirect_argument", v54);
          uint64_t v104 = *((void *)v109[0] + __val[0]);
          llvm::SmallVectorImpl<llvm::Metadata *>::insert<llvm::Metadata * const*,void>((unsigned int *)&v111, (uint64_t)v52 + 8 * v53, (uint64_t *)&__src, &v105);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          uint64_t v25 = __val[0] + 1;
          __val[0] = v25;
        }
        while (v115 > v25);
      }
      uint64_t Impl = llvm::MDTuple::getImpl();
      unint64_t TypeSizeInBits = llvm::DataLayout::getTypeSizeInBits(*((llvm::DataLayout **)this + 7), v24);
      BOOL v59 = v58 == 1;
      uint64_t PrefTypeAlignment = llvm::DataLayout::getPrefTypeAlignment(*((llvm::DataLayout **)this + 7), v24);
      uint64_t Name = (void *)llvm::StructType::getName(v24);
      if (Name)
      {
        std::string::basic_string[abi:ne180100](v85, Name, v61);
      }
      else
      {
        v85[0] = 0;
        v85[1] = 0;
        uint64_t v86 = 0;
      }
      LODWORD(v80) = 1;
      uint64_t v63 = MetalModulePass::getMDTuple<unsigned int,char const*,char const*,int,int,char const*,char const*,int,char const*,llvm::MDTuple *,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,std::string,char const*,char const*>((llvm::MDString **)this, 0, (llvm::LLVMContext *)"air.indirect_buffer", (llvm::LLVMContext *)"air.location_index", 0, 1, (llvm::LLVMContext *)"air.read", (llvm::LLVMContext *)"air.address_space", v80, (llvm::LLVMContext *)"air.struct_type_info", Impl, (llvm::LLVMContext *)"air.arg_type_size", (TypeSizeInBits + 7) >> 3, v59, (llvm::LLVMContext *)"air.arg_type_align_size", PrefTypeAlignment, (llvm::LLVMContext *)"air.arg_type_name", (uint64_t)v85, (llvm::LLVMContext *)"air.arg_name",
              (llvm::LLVMContext *)"debug.argument_buffer");
      if (SHIBYTE(v86) < 0) {
        operator delete(v85[0]);
      }
      *(void *)v117[0] = v63;
      *uint64_t v119 = llvm::PointerType::get();
      uint64_t v64 = llvm::FunctionType::get();
      llvm::Module::getFunction();
      uint64_t v65 = *(_DWORD *)(EntryFunction + 32) & 0xF;
      LOWORD(v102) = 257;
      uint64_t v66 = llvm::Function::Create(v64, v65, (uint64_t)&__src, *((void *)this + 6));
      llvm::Value::takeName();
      *(_DWORD *)(EntryFunction + 32) = *(_DWORD *)(EntryFunction + 32) & 0xFFFFBFC0 | 0x4007;
      __src.__r_.__value_.__r.__words[0] = *(void *)(EntryFunction + 112);
      uint64_t StructTypeInfo = llvm::AttributeList::getAttributes((llvm::AttributeList *)&__src);
      uint64_t v67 = llvm::AttributeSet::begin((llvm::AttributeSet *)&StructTypeInfo);
      uint64_t v68 = llvm::AttributeSet::end((llvm::AttributeSet *)&StructTypeInfo);
      while (v67 != v68)
      {
        llvm::Function::addFnAttr();
        v67 += 8;
      }
      __src.__r_.__value_.__r.__words[0] = *(void *)(EntryFunction + 112);
      *(void *)__val = llvm::AttributeList::getAttributes((llvm::AttributeList *)&__src);
      uint64_t v69 = llvm::AttributeSet::begin((llvm::AttributeSet *)__val);
      uint64_t v70 = llvm::AttributeSet::end((llvm::AttributeSet *)__val);
      while (v69 != v70)
      {
        llvm::compat::addAttribute();
        v69 += 8;
      }
      llvm::Function::addParamAttr();
      llvm::Function::addParamAttr();
      llvm::Function::addParamAttr();
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
      __p[0].__r_.__value_.__l.__size_ = 0x800000000;
      llvm::SmallVectorImpl<llvm::Value *>::resizeImpl<false>((uint64_t)__p, *(void *)(EntryFunction + 96));
      if (v97)
      {
        if (v98)
        {
          uint64_t v73 = 8 * v98;
          uint64_t v74 = v96;
          while (*v74 >= 0xFFFFFFFE)
          {
            v74 += 2;
            v73 -= 8;
            if (!v73) {
              goto LABEL_126;
            }
          }
        }
        else
        {
          uint64_t v74 = v96;
        }
        uint64_t v75 = &v96[2 * v98];
        while (v74 != v75)
        {
          uint64_t v76 = (const llvm::AttributeList *)*v74;
          unsigned int v77 = v74[1];
          __dst.__r_.__value_.__r.__words[0] = *((void *)v83 + 14);
          llvm::compat::getParamAttrs((llvm::compat *)&__dst, v76, v71);
          llvm::AttrBuilder::AttrBuilder();
          llvm::Function::addParamAttrs();
          if ((uint64_t *)__src.__r_.__value_.__l.__size_ != &v101) {
            free((void *)__src.__r_.__value_.__l.__size_);
          }
          if (*(_WORD *)(v66 + 18)) {
            llvm::Function::BuildLazyArguments((llvm::Function *)v66);
          }
          *(void *)(__p[0].__r_.__value_.__r.__words[0] + 8 * (void)v76) = *(void *)(v66 + 88) + 40 * v77;
          do
          {
            v74 += 2;
            if (v74 == v75) {
              goto LABEL_126;
            }
          }
          while (*v74 >= 0xFFFFFFFE);
        }
      }
LABEL_126:
      uint64_t v78 = (llvm::BasicBlock *)*((void *)this + 5);
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
      LOWORD(v102) = 259;
      llvm::BasicBlock::Create(v78, (llvm::LLVMContext *)&__src, (const llvm::Twine *)v66, 0, v72);
    }
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v111 = 0;
      uint64_t v11 = *(unsigned int **)(v8 - 8 * v9 + 8 * v10);
      uint64_t v111 = v11;
      v109[0] = 0;
      uint64_t v12 = *(void *)(*(void *)&v11[-2 * v11[2]] + 128);
      long long v13 = (void *)(v12 + 24);
      if (*(_DWORD *)(v12 + 32) >= 0x41u) {
        long long v13 = (void *)*v13;
      }
      long long v14 = (void *)*v13;
      v109[0] = v14;
      if (*(_WORD *)(EntryFunction + 18))
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)EntryFunction);
        long long v14 = v109[0];
        uint64_t v11 = (unsigned int *)v111;
      }
      uint64_t v15 = *(void *)(EntryFunction + 88);
      __src.__r_.__value_.__r.__words[0] = 0;
      __src.__r_.__value_.__r.__words[0] = *(void *)(v15 + 40 * (void)v14);
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      __p[0].__r_.__value_.__s.__data_[4] = 0;
      if (isBufferMetadata((uint64_t)v11))
      {
        unsigned int v16 = (*(_DWORD *)(__src.__r_.__value_.__r.__words[0] + 8) & 0xFE) == 0x12
            ? *(_DWORD *)(**(void **)(__src.__r_.__value_.__r.__words[0] + 16) + 8) & 0xFFFFFF00
            : *(_DWORD *)(__src.__r_.__value_.__r.__words[0] + 8) & 0xFFFFFF00;
        if (v16 == 256 || v16 == 512)
        {
          unsigned int LocationIndex = MTLBoundsCheck::getLocationIndex((uint64_t)v111);
          if (!__p[0].__r_.__value_.__s.__data_[4]) {
            __p[0].__r_.__value_.__s.__data_[4] = 1;
          }
          LODWORD(__p[0].__r_.__value_.__l.__data_) = LocationIndex;
          if (LocationIndex < 0x1F)
          {
            if ((*(unsigned char *)(*((void *)this + 4) + 22) & 2) == 0 && !*((void *)v114 + LocationIndex)) {
              *((void *)v114 + LocationIndex) = __src.__r_.__value_.__r.__words[0];
            }
            uint64_t v18 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::FindAndConstruct(v94, __p);
            llvm::SmallVectorImpl<unsigned int>::emplace_back<unsigned long long const&>((uint64_t)(v18 + 2), (int *)v109);
            goto LABEL_26;
          }
          MTLBoundsCheck::setLocationIndex((uint64_t)v111);
        }
      }
      int v19 = v120;
      LODWORD(__dst.__r_.__value_.__l.__data_) = v109[0];
      llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::FindAndConstruct((uint64_t *)&v96, &__dst)[1] = v19;
      llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)&v119, (uint64_t *)&__src);
      llvm::SmallVectorImpl<llvm::Type *>::emplace_back<llvm::Type *&>((uint64_t)v117, (uint64_t *)&v111);
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDNode::replaceOperandWith();
LABEL_26:
      ++v10;
      unint64_t v9 = *(unsigned int *)(v8 + 8);
      if (v10 >= v9) {
        goto LABEL_27;
      }
    }
  }
  return !isLibraryModule;
}

void sub_255780E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50)
{
  if (STACK[0x210] != v50) {
    free((void *)STACK[0x210]);
  }
  if (STACK[0x278] != a23) {
    free((void *)STACK[0x278]);
  }
  if (STACK[0x380] != a24) {
    free((void *)STACK[0x380]);
  }
  if (STACK[0x488] != a25) {
    free((void *)STACK[0x488]);
  }
  if (STACK[0x590] != a26) {
    free((void *)STACK[0x590]);
  }
  uint64_t v53 = *(void **)(v51 - 192);
  if (v53 != (void *)a27) {
    free(v53);
  }
  llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::~DenseMap((uint64_t)&a47);
  llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::~DenseMap((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t llvm::SmallVectorImpl<llvm::Metadata *>::emplace_back<decltype(nullptr)>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<llvm::Type *,true>::push_back(a1, 0);
    unsigned int v3 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    *(void *)(*(void *)a1 + 8 * v2) = 0;
    unsigned int v3 = v2 + 1;
    *(_DWORD *)(a1 + 8) = v3;
  }
  return *(void *)a1 + 8 * v3 - 8;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::emplace_back<unsigned long long const&>(uint64_t a1, int *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, *a2);
    uint64_t v4 = *(void *)a1;
    unsigned int v5 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    uint64_t v4 = *(void *)a1;
    *(_DWORD *)(*(void *)a1 + 4 * v3) = *(void *)a2;
    unsigned int v5 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v5;
  }
  return v4 + 4 * v5 - 4;
}

uint64_t llvm::Type::isSized(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 > 0x11) {
    goto LABEL_6;
  }
  uint64_t v2 = 1;
  if (((1 << v1) & 0xAC7F) != 0) {
    return v2;
  }
  if (((1 << v1) & 0x30000) == 0)
  {
LABEL_6:
    if ((v1 & 0xFE) != 0x12 && v1 != 21) {
      return 0;
    }
  }
  return MEMORY[0x270F959A0]();
}

uint64_t MetalModulePass::getMDTuple<unsigned int,char const*,char const*,int,int,char const*,char const*,int,char const*,llvm::MDTuple *,char const*,llvm::TypeSize,char const*,unsigned long long,char const*,std::string,char const*,char const*>(llvm::MDString **a1, uint64_t a2, llvm::LLVMContext *a3, llvm::LLVMContext *a4, uint64_t a5, uint64_t a6, llvm::LLVMContext *a7, llvm::LLVMContext *a8, uint64_t a9, llvm::LLVMContext *a10, uint64_t a11, llvm::LLVMContext *a12, uint64_t a13, uint64_t a14, llvm::LLVMContext *a15, uint64_t a16, llvm::LLVMContext *a17, uint64_t a18, llvm::LLVMContext *a19, llvm::LLVMContext *a20)
{
  MetalModulePass::getMetadata<unsigned int>();
  MetalModulePass::getMetadata(a1, a3, v25);
  MetalModulePass::getMetadata(a1, a4, v26);
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a7, v27);
  MetalModulePass::getMetadata(a1, a8, v28);
  MetalModulePass::getMetadata<int>();
  MetalModulePass::getMetadata(a1, a10, v29);
  MetalModulePass::getMetadata((uint64_t)a1, a11);
  MetalModulePass::getMetadata(a1, a12, v30);
  MetalModulePass::getMetadata();
  MetalModulePass::getMetadata(a1, a15, v31);
  MetalModulePass::getMetadata<unsigned long long>();
  MetalModulePass::getMetadata(a1, a17, v32);
  MetalModulePass::getMetadata();
  MetalModulePass::getMetadata(a1, a19, v33);
  MetalModulePass::getMetadata(a1, a20, v34);
  return llvm::MDTuple::getImpl();
}

uint64_t llvm::IRBuilderBase::CreateInBoundsGEP(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t *, uint64_t **, uint64_t, uint64_t))(**(void **)(a1 + 72)
                                                                                               + 48))(*(void *)(a1 + 72), a2, a3, a4, a5, 1);
  if (!result)
  {
    long long v13 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(a2, a3, a4, a5);
    llvm::GetElementPtrInst::setIsInBounds(v13);
    return llvm::IRBuilderBase::Insert<llvm::CastInst>((uint64_t *)a1, (uint64_t)v13, a6);
  }
  return result;
}

uint64_t MTLArgumentBufferConversion::applyAMDVaryingWA(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 120);
  if (v1)
  {
    if (v1 != 1) {
      abort();
    }
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 1;
  }
  uint64_t v3 = *(void *)(*(void *)(this + 128) - 8 * *(unsigned int *)(*(void *)(this + 128) + 8) + 8 * v2);
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v6 = *(void *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 8 * i);
      this = llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * v1));
      if (v7 == 17)
      {
        this = memcmp((const void *)this, "air.vertex_output", 0x11uLL);
        if (this) {
          continue;
        }
      }
      else
      {
        if (v7 != 18) {
          continue;
        }
        BOOL v8 = *(void *)this == 0x676172662E726961 && *(void *)(this + 8) == 0x706E695F746E656DLL;
        if (!v8 || *(_WORD *)(this + 16) != 29813) {
          continue;
        }
      }
      this = llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8 * v2));
      if (v10 == 12)
      {
        this = memcmp((const void *)this, "packedOutput", 0xCuLL);
        if (!this) {
          goto LABEL_28;
        }
      }
      else if (v10 == 11 && *(void *)this == 0x6E4964656B636170 && *(void *)(this + 3) == 0x7475706E4964656BLL)
      {
LABEL_28:
        unint64_t v12 = *(unsigned int *)(v6 + 8);
        if (v2 + 1 < v12)
        {
          uint64_t v13 = v2;
          do
          {
            this = *(void *)(v6 - 8 * v12 + 8 * v13 + 8);
            if (!*(unsigned char *)this)
            {
              this = llvm::MDString::getString((llvm::MDString *)this);
              if (v14 == 12 && *(void *)this == 0x61636F6C2E726961 && *(_DWORD *)(this + 8) == 1852795252)
              {
                llvm::ConstantInt::get();
                llvm::ValueAsMetadata::get();
                this = llvm::MDNode::replaceOperandWith();
              }
            }
            ++v13;
            unint64_t v12 = *(unsigned int *)(v6 + 8);
          }
          while (v13 + 1 < v12);
        }
      }
    }
  }
  return this;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  uint64_t inserted = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *uint64_t inserted = *a2;
    *((void *)inserted + 1) = inserted + 6;
    *((void *)inserted + 2) = 0x200000000;
  }
  return inserted;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unsigned int v5 = v3 - 1;
    uint64_t v6 = (37 * *a2) & (v3 - 1);
    uint64_t v7 = (_DWORD *)(*a1 + 32 * v6);
    int v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -2;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        int v13 = v6 + v11++;
        uint64_t v6 = v13 & v5;
        uint64_t v7 = (_DWORD *)(v4 + 32 * v6);
        int v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v7 = v10;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::grow(a1, v7);
  unint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>,unsigned int,llvm::SmallVector<unsigned int,2u>,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::SmallVector<unsigned int,2u>>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}