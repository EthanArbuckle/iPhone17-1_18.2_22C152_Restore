void sub_22732A358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22732A950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22732AC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22732AEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_2(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_227331870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id *a10, id *location)
{
  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak((id *)&STACK[0x350]);
  _Unwind_Resume(a1);
}

void sub_2273334A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2273354EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *a14, id *a15, id *location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a15);
  objc_destroyWeak(a14);
  objc_destroyWeak(&a72);
  _Unwind_Resume(a1);
}

void sub_227336274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *a11, id *a12, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v13 - 176));
  _Unwind_Resume(a1);
}

void sub_227336C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_227336F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2273376D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22733787C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_227337A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22733F688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

double _TVRCGameControllerNormalizedDigitizerValue(float a1, double a2)
{
  double v2 = a1;
  if (a2 - v2 >= 80.0) {
    double v3 = 1.0;
  }
  else {
    double v3 = (a2 - v2) / 80.0;
  }
  double v4 = vabdd_f64(v2, a2);
  double v5 = v4 / -80.0;
  if (v4 >= 80.0) {
    double v5 = -1.0;
  }
  if (v2 > a2) {
    double v6 = v5;
  }
  else {
    double v6 = v3;
  }
  float v7 = v6;
  double v8 = v7;
  if (v8 < -1.0) {
    double v8 = -1.0;
  }
  return (float)fmin(v8, 1.0);
}

id _TVRMakeDirectionalImageView(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x263F086E0];
  id v2 = a1;
  double v3 = [v1 bundleForClass:objc_opt_class()];
  id v4 = objc_alloc(MEMORY[0x263F82828]);
  double v5 = [MEMORY[0x263F827E8] imageNamed:v2 inBundle:v3 compatibleWithTraitCollection:0];

  double v6 = (void *)[v4 initWithImage:v5];
  float v7 = [v6 layer];
  double v8 = [MEMORY[0x263F157C8] filterWithType:*MEMORY[0x263F15D58]];
  [v7 setCompositingFilter:v8];

  [v6 setAlpha:0.24];
  return v6;
}

double _TVRImageFrameForDirectionalImage(void *a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  v11 = [a1 image];
  [v11 size];
  double v13 = v12;

  UIRectCenteredIntegralRect();
  double v15 = v14;
  UIRectGetCenter();
  double v17 = v16;
  if ((a2 & 2) != 0)
  {
    v20.origin.x = a3;
    v20.origin.y = a4;
    v20.size.width = a5;
    v20.size.height = a6;
    double v15 = (v17 + -44.0 + CGRectGetMinX(v20)) * 0.5 - v13 * 0.5;
    if ((a2 & 8) == 0)
    {
LABEL_3:
      if ((a2 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_9:
      v22.origin.x = a3;
      v22.origin.y = a4;
      v22.size.width = a5;
      v22.size.height = a6;
      CGRectGetMinY(v22);
      if ((a2 & 4) == 0) {
        return v15;
      }
      goto LABEL_5;
    }
  }
  else if ((a2 & 8) == 0)
  {
    goto LABEL_3;
  }
  v21.origin.x = a3;
  v21.origin.y = a4;
  v21.size.width = a5;
  v21.size.height = a6;
  double v15 = (v17 + 44.0 + CGRectGetMaxX(v21)) * 0.5 - v13 * 0.5;
  if (a2) {
    goto LABEL_9;
  }
LABEL_4:
  if ((a2 & 4) != 0)
  {
LABEL_5:
    v19.origin.x = a3;
    v19.origin.y = a4;
    v19.size.width = a5;
    v19.size.height = a6;
    CGRectGetMaxY(v19);
  }
  return v15;
}

void __clearCachedBoundingBoxThresholdDistance()
{
  __hasCachedBoundingBoxThresholdDistance = 0;
}

void __clearCachedBoundingBoxThresholdSpeed()
{
  __hasCachedBoundingBoxThresholdSpeed = 0;
}

void __clearCachedBoundingBoxExitSpeed()
{
  __hasCachedBoundingBoxExitSpeed = 0;
}

void __clearCachedBoundingBoxExtraRightDistance()
{
  __hasCachedBoundingBoxExtraRightDistance = 0;
}

void __clearCachedTouchCenteringWeight()
{
  __hasCachedTouchCenteringWeight = 0;
}

void __clearCachedTouchToSelectTravelDistance()
{
  __hasCachedTouchToSelectTravelDistance = 0;
}

void sub_227341818(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_227342D1C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_227344D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_227345DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_227346AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22734A3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *a15, id *a16, id *location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a16);
  objc_destroyWeak(a15);
  objc_destroyWeak(&a68);
  _Unwind_Resume(a1);
}

void sub_22734AC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22734AE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22734B3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22734B61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22734E550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_22734F964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *a14, id *location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(location);
  objc_destroyWeak(a14);
  objc_destroyWeak((id *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void sub_22734FE28(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_227353EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10, id *a11, id *a12, id *a13, id *a14, id *a15, id *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  objc_destroyWeak(v38);
  objc_destroyWeak(v39);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak(a13);
  objc_destroyWeak(a14);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak((id *)(v40 - 136));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_227354820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22735E3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2273649F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_22736523C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

double _TVRImageFrameForDirectionalImage_0(void *a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  v11 = [a1 image];
  [v11 size];
  double v13 = v12;

  UIRectCenteredIntegralRect();
  if ((a2 & 2) != 0)
  {
    v17.origin.x = a3;
    v17.origin.y = a4;
    v17.size.width = a5;
    v17.size.height = a6;
    double MinX = CGRectGetMinX(v17);
  }
  double v15 = MinX;
  if ((a2 & 8) == 0)
  {
    if ((a2 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_9:
    v20.origin.x = a3;
    v20.origin.y = a4;
    v20.size.width = a5;
    v20.size.height = a6;
    CGRectGetMinY(v20);
    if ((a2 & 4) == 0) {
      return v15;
    }
    goto LABEL_6;
  }
  v19.origin.x = a3;
  v19.origin.y = a4;
  v19.size.width = a5;
  v19.size.height = a6;
  double v15 = CGRectGetMaxX(v19) - v13;
  if (a2) {
    goto LABEL_9;
  }
LABEL_5:
  if ((a2 & 4) != 0)
  {
LABEL_6:
    v18.origin.x = a3;
    v18.origin.y = a4;
    v18.size.width = a5;
    v18.size.height = a6;
    CGRectGetMaxY(v18);
  }
  return v15;
}

void sub_22736C010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22736D310(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 144));
  _Unwind_Resume(a1);
}

void sub_22736D808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22736D9D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_22736DCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22736E36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_22736FE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _TVRUIButtonLog()
{
  if (_TVRUIButtonLog_onceToken != -1) {
    dispatch_once(&_TVRUIButtonLog_onceToken, &__block_literal_global_13);
  }
  v0 = (void *)_TVRUIButtonLog_log;
  return v0;
}

id _TVRUIDeviceInfoLog()
{
  if (_TVRUIDeviceInfoLog_onceToken != -1) {
    dispatch_once(&_TVRUIDeviceInfoLog_onceToken, &__block_literal_global_4);
  }
  v0 = (void *)_TVRUIDeviceInfoLog_log;
  return v0;
}

id _TVRUIDevicePickerLog()
{
  if (_TVRUIDevicePickerLog_onceToken != -1) {
    dispatch_once(&_TVRUIDevicePickerLog_onceToken, &__block_literal_global_7);
  }
  v0 = (void *)_TVRUIDevicePickerLog_log;
  return v0;
}

id _TVRUIDeviceQueryLog()
{
  if (_TVRUIDeviceQueryLog_onceToken != -1) {
    dispatch_once(&_TVRUIDeviceQueryLog_onceToken, &__block_literal_global_10);
  }
  v0 = (void *)_TVRUIDeviceQueryLog_log;
  return v0;
}

id _TVRUIHintsLog()
{
  if (_TVRUIHintsLog_onceToken != -1) {
    dispatch_once(&_TVRUIHintsLog_onceToken, &__block_literal_global_13);
  }
  v0 = (void *)_TVRUIHintsLog_log;
  return v0;
}

id _TVRUIIRLog()
{
  if (_TVRUIIRLog_onceToken != -1) {
    dispatch_once(&_TVRUIIRLog_onceToken, &__block_literal_global_16);
  }
  v0 = (void *)_TVRUIIRLog_log;
  return v0;
}

id _TVRUIIntentManagerLog()
{
  if (_TVRUIIntentManagerLog_onceToken != -1) {
    dispatch_once(&_TVRUIIntentManagerLog_onceToken, &__block_literal_global_19);
  }
  v0 = (void *)_TVRUIIntentManagerLog_log;
  return v0;
}

id _TVRUIKeyboardLog()
{
  if (_TVRUIKeyboardLog_onceToken != -1) {
    dispatch_once(&_TVRUIKeyboardLog_onceToken, &__block_literal_global_22);
  }
  v0 = (void *)_TVRUIKeyboardLog_log;
  return v0;
}

id _TVRUINetworkObserverLog()
{
  if (_TVRUINetworkObserverLog_onceToken != -1) {
    dispatch_once(&_TVRUINetworkObserverLog_onceToken, &__block_literal_global_25);
  }
  v0 = (void *)_TVRUINetworkObserverLog_log;
  return v0;
}

id _TVRUIPrewarmLog()
{
  if (_TVRUIPrewarmLog_onceToken != -1) {
    dispatch_once(&_TVRUIPrewarmLog_onceToken, &__block_literal_global_28);
  }
  v0 = (void *)_TVRUIPrewarmLog_log;
  return v0;
}

id _TVRUISignpostLog()
{
  if (_TVRUISignpostLog_onceToken != -1) {
    dispatch_once(&_TVRUISignpostLog_onceToken, &__block_literal_global_31);
  }
  v0 = (void *)_TVRUISignpostLog_log;
  return v0;
}

id _TVRUISiriLog()
{
  if (_TVRUISiriLog_onceToken != -1) {
    dispatch_once(&_TVRUISiriLog_onceToken, &__block_literal_global_34);
  }
  v0 = (void *)_TVRUISiriLog_log;
  return v0;
}

id _TVRUITipsLog()
{
  if (_TVRUITipsLog_onceToken != -1) {
    dispatch_once(&_TVRUITipsLog_onceToken, &__block_literal_global_37);
  }
  v0 = (void *)_TVRUITipsLog_log;
  return v0;
}

id _TVRUIViewControllerLog()
{
  if (_TVRUIViewControllerLog_onceToken != -1) {
    dispatch_once(&_TVRUIViewControllerLog_onceToken, &__block_literal_global_40);
  }
  v0 = (void *)_TVRUIViewControllerLog_log;
  return v0;
}

id _TVRUIViewServiceLog()
{
  if (_TVRUIViewServiceLog_onceToken != -1) {
    dispatch_once(&_TVRUIViewServiceLog_onceToken, &__block_literal_global_43);
  }
  v0 = (void *)_TVRUIViewServiceLog_log;
  return v0;
}

id _TVRUIVolumeControllerLog()
{
  if (_TVRUIVolumeControllerLog_onceToken != -1) {
    dispatch_once(&_TVRUIVolumeControllerLog_onceToken, &__block_literal_global_46);
  }
  v0 = (void *)_TVRUIVolumeControllerLog_log;
  return v0;
}

id _TVRUINowPlayingLog()
{
  if (_TVRUINowPlayingLog_onceToken != -1) {
    dispatch_once(&_TVRUINowPlayingLog_onceToken, &__block_literal_global_49);
  }
  v0 = (void *)_TVRUINowPlayingLog_log;
  return v0;
}

void sub_227373C58(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void sub_227374B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_227374E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_227377444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __getVUITimeMetadataFactoryClass_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VUITimeMetadataFactory");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVUITimeMetadataFactoryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    __getVUITimeMetadataFactoryClass_block_invoke_cold_1();
    VideosUILibrary();
  }
}

void VideosUILibrary()
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v1[0] = 0;
  if (!VideosUILibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x263EF8330];
    v1[2] = 3221225472;
    v1[3] = __VideosUILibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_264800D60;
    uint64_t v3 = 0;
    VideosUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  v0 = (void *)v1[0];
  if (!VideosUILibraryCore_frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __VideosUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  VideosUILibraryCore_frameworkLibrary = result;
  return result;
}

void __getVUITimedMetadataPlaybackInfoClass_block_invoke(uint64_t a1)
{
  VideosUILibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("VUITimedMetadataPlaybackInfo");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getVUITimedMetadataPlaybackInfoClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    long long v2 = (TVRUIMediaControlsViewController *)__getVUITimedMetadataPlaybackInfoClass_block_invoke_cold_1();
    [(TVRUIMediaControlsViewController *)v2 viewDidLoad];
  }
}

void sub_227378B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_227378F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location)
{
}

void sub_22737BF40(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_22737C184(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_22737D5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22737DB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v13 - 152));
  _Unwind_Resume(a1);
}

void sub_227381060(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_227381E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2273839DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_227384B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_2273886B0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_22738BAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t _TVRUIIsCategory(void *a1)
{
  id v1 = a1;
  long long v2 = (void *)_AXSCopyPreferredContentSizeCategoryName();
  uint64_t v3 = [v2 isEqualToString:v1];

  return v3;
}

void __TVRPointSizeOfSiriRemoteOnMainScreen_block_invoke()
{
  id v5 = [MEMORY[0x263F82B60] mainScreen];
  [v5 nativeScale];
  double v1 = v0;
  int v2 = MGGetSInt32Answer();
  [v5 nativeBounds];
  v8.size.width = 1080.0;
  v8.size.height = 1920.0;
  v8.origin.x = 0.0;
  v8.origin.y = 0.0;
  BOOL v3 = CGRectEqualToRect(v7, v8);
  double v4 = (double)v2;
  if (v3) {
    double v4 = 401.0;
  }
  TVRPointSizeOfSiriRemoteOnMainScreen_size_0 = round(v4 * 1.4723 / v1);
  TVRPointSizeOfSiriRemoteOnMainScreen_size_1 = round(v4 * 1.6 / v1);
}

void sub_2273945DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_227395714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11)
{
  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v13 - 168));
  _Unwind_Resume(a1);
}

void sub_227395A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_227397320(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_227398C1C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x2F8]);
  _Unwind_Resume(a1);
}

void sub_22739965C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, id *a14, id *a15, id *a16, id *a17)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(location);
  objc_destroyWeak(a14);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak(a17);
  objc_destroyWeak((id *)(v20 - 216));
  _Unwind_Resume(a1);
}

void sub_22739A5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_22739BC40(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

char *FMPFSKPeripheralDotNode.init(experienceType:name:dotDiameter:color:diskRadius:dotScale:angle:opacity:offset:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6, uint64_t a7, char a8, double a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  int v20 = *a1;
  uint64_t v21 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode;
  CGRect v22 = (objc_class *)type metadata accessor for FMPFSKNode();
  id v23 = objc_allocWithZone(v22);
  v24 = v16;
  *(void *)&v16[v21] = objc_msgSend(v23, sel_init);
  uint64_t v25 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode;
  *(void *)&v24[v25] = objc_msgSend(objc_allocWithZone(v22), sel_init);
  uint64_t v26 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode;
  *(void *)&v24[v26] = objc_msgSend(objc_allocWithZone(v22), sel_init);
  uint64_t v27 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
  type metadata accessor for FMPFSKSpriteNode();
  uint64_t v122 = v27;
  *(void *)&v24[v27] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v28 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode;
  *(void *)&v24[v28] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTRangingNode()), sel_init);
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interativeRadiusBeaconNode] = 0;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse] = 0;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_hasPlayedInitialPulse] = 0;
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction] = 0;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyDiskRadius] = 1;
  v29 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
  *(void *)v29 = 0;
  v117 = v29;
  v29[8] = 1;
  v30 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
  *(void *)v30 = 0;
  v30[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyDotScale] = 1;
  v31 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale];
  *(void *)v31 = 0;
  v31[8] = 1;
  v32 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale];
  *(void *)v32 = 0;
  v32[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyAngle] = 1;
  v33 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle];
  *(void *)v33 = 0;
  v33[8] = 1;
  v34 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle];
  *(void *)v34 = 0;
  v34[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyOpacity] = 1;
  v35 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacity];
  *(void *)v35 = 0;
  v35[8] = 1;
  v36 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOpacity];
  *(void *)v36 = 0;
  v36[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyBrightness] = 1;
  v37 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightness];
  *(void *)v37 = 0;
  v118 = v37;
  v37[8] = 1;
  v38 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness];
  *(void *)v38 = 0;
  v38[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyOffset] = 1;
  v39 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_offset];
  *(void *)v39 = 0;
  *((void *)v39 + 1) = 0;
  v39[16] = 1;
  uint64_t v40 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOffset];
  *(void *)uint64_t v40 = 0;
  *((void *)v40 + 1) = 0;
  v40[16] = 1;
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAbsoluteHeading] = 0;
  v41 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interactiveAngleFactor];
  *(void *)v41 = 0;
  v41[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyRadiusFactor] = 1;
  v42 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_radiusFactor];
  *(void *)v42 = 0;
  v42[8] = 1;
  v43 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedRadiusFactor];
  *(void *)v43 = 0;
  v43[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_experienceType] = v20;
  if (v20 == 1)
  {
    if (one-time initialization token for r1NoAR != -1) {
      swift_once();
    }
    v44 = &static FMPFSKPeripheralDotNodeStyle.r1NoAR;
  }
  else
  {
    if (one-time initialization token for r1OrBT != -1) {
      swift_once();
    }
    v44 = &static FMPFSKPeripheralDotNodeStyle.r1OrBT;
  }
  int v116 = a6 & 1;
  uint64_t v45 = *((void *)v44 + 10);
  long long v46 = v44[4];
  v47 = (void *)*((void *)v44 + 7);
  uint64_t v49 = *((void *)v44 + 5);
  uint64_t v48 = *((void *)v44 + 6);
  long long v50 = *(long long *)((char *)v44 + 24);
  uint64_t v51 = *((void *)v44 + 2);
  uint64_t v52 = *((void *)v44 + 1);
  v53 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style];
  *(void *)v53 = *(void *)v44;
  *((void *)v53 + 1) = v52;
  *((void *)v53 + 2) = v51;
  *(_OWORD *)(v53 + 24) = v50;
  *((void *)v53 + 5) = v49;
  *((void *)v53 + 6) = v48;
  *((void *)v53 + 7) = v47;
  *((_OWORD *)v53 + 4) = v46;
  *((void *)v53 + 10) = v45;
  *(double *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotDiameter] = a9;
  v54 = self;
  id v55 = v47;
  id v56 = objc_msgSend(v54, sel_mainScreen);
  v57 = (void *)MEMORY[0x22A677130](0xD000000000000011, 0x80000002273FB000);
  int v58 = MGGetSInt32Answer();

  *(double *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_pixelsPerInch] = (double)v58;
  if (a4) {
    id v59 = a4;
  }
  else {
    id v59 = objc_msgSend(self, sel_whiteColor);
  }
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor] = v59;
  type metadata accessor for FMPFView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v61 = self;
  id v126 = a4;
  id v62 = objc_msgSend(v61, sel_bundleForClass_, ObjCClassFromMetadata);
  v63 = (void *)MEMORY[0x22A677130](0xD000000000000016, 0x80000002273FB020);
  id v64 = objc_msgSend(self, sel_imageNamed_inBundle_compatibleWithTraitCollection_, v63, v62, 0);

  if (v64)
  {
    id v65 = objc_msgSend(self, sel_textureWithImage_, v64);

    id v62 = v64;
    id v66 = v65;
  }
  else
  {
    id v66 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F17C38]), sel_init);
  }

  objc_msgSend(v66, sel_size);
  *(double *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_subScale] = 1.0 / (v67 / a9);
  *(void *)v117 = a5;
  v117[8] = v116 != 0;
  *(void *)v31 = a7;
  v31[8] = a8 & 1;
  *(void *)v33 = a10;
  v33[8] = a11 & 1;
  *(void *)v35 = a12;
  v35[8] = a13 & 1;
  *(void *)v118 = *((void *)v53 + 3);
  v118[8] = 0;
  *(void *)v39 = a14;
  *((void *)v39 + 1) = a15;
  v39[16] = a16 & 1;
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(a5, v116, 0x3FE0000000000000, 0, 0, 1);
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(*(void *)v31, v31[8], 0x3F847AE147AE147BLL, 0, 0, 1);
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(*(void *)v33, v33[8], 0x3FA015BF9217271ALL, 0, 0, 1);
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacitySpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(*(void *)v35, v35[8], 0x3F847AE147AE147BLL, 0, 0, 1);
  v68 = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(*(void *)v118, v118[8], 0x3F847AE147AE147BLL, 0);
  uint64_t v69 = 0;
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightnessSpring] = v68;
  if ((v39[16] & 1) == 0) {
    uint64_t v69 = *(void *)v39;
  }
  v70 = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(v69, v39[16], 0x3FE0000000000000, 0, 0, 1);
  uint64_t v71 = 0;
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_xOffsetSpring] = v70;
  if ((v39[16] & 1) == 0) {
    uint64_t v71 = *((void *)v39 + 1);
  }
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_yOffsetSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(v71, v39[16], 0x3FE0000000000000, 0, 0, 1);
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_headingSpring] = specialized static FMPFFluidSpring.randomSpringWith(initialValue:randomFactor:stableValueThreshold:)(0, 0, 0, 1, 0x3FE0000000000000, 0);
  *(void *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_radiusFactorSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  objc_msgSend(*(id *)&v24[v122], sel_setTexture_, v66);
  id v72 = *(id *)&v24[v122];
  objc_msgSend(v66, sel_size);
  objc_msgSend(v72, sel_setSize_);

  id v73 = *(id *)&v24[v122];
  objc_msgSend(v73, sel_setColorBlendFactor_, 1.0);

  v127.receiver = v24;
  v127.super_class = (Class)type metadata accessor for FMPFSKPeripheralDotNode();
  v74 = (char *)objc_msgSendSuper2(&v127, sel_init);
  v123 = v66;
  v75 = v74;
  if (a3)
  {
    v76 = (void *)MEMORY[0x22A677130](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v76 = 0;
  }
  objc_msgSend(v74, sel_setName_, v76);

  uint64_t v77 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode;
  objc_msgSend(v74, sel_addChild_, *(void *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode]);
  uint64_t v78 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode;
  objc_msgSend(*(id *)&v74[v77], sel_addChild_, *(void *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode]);
  uint64_t v79 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode;
  objc_msgSend(*(id *)&v74[v78], sel_addChild_, *(void *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode]);
  uint64_t v80 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
  objc_msgSend(*(id *)&v74[v79], sel_addChild_, *(void *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode]);
  uint64_t v125 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode;
  v81 = *(void **)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode];
  objc_msgSend(v74, sel_addChild_, v81);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v82 = swift_allocObject();
  *(_OWORD *)(v82 + 16) = xmmword_2273F4460;
  v83 = self;
  v84 = self;
  id v85 = v81;
  id v86 = objc_msgSend(v84, sel_rangeWithConstantValue_, 0.0);
  id v87 = objc_msgSend(v83, sel_distance_toNode_, v86, *(void *)&v74[v79]);

  *(void *)(v82 + 32) = v87;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for SKConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v85, sel_setConstraints_, isa);

  id v89 = *(id *)&v74[v77];
  v90 = (void *)MEMORY[0x22A677130](0x6C61626D6947, 0xE600000000000000);
  objc_msgSend(v89, sel_setName_, v90);

  id v91 = *(id *)&v74[v79];
  v92 = (void *)MEMORY[0x22A677130](7630660, 0xE300000000000000);
  objc_msgSend(v91, sel_setName_, v92);

  id v93 = *(id *)&v74[v80];
  v94 = (void *)MEMORY[0x22A677130](0x68746150746F44, 0xE700000000000000);
  objc_msgSend(v93, sel_setName_, v94);

  if ((v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius + 8] & 1) == 0)
  {
    double v95 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
    v96 = (double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
    double *v96 = v95;
    *((unsigned char *)v96 + 8) = 0;
    objc_msgSend(*(id *)&v74[v78], sel_setPosition_, 0.0, v95);
  }
  if ((v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale + 8] & 1) == 0)
  {
    double v97 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale];
    v98 = (double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale];
    double *v98 = v97;
    *((unsigned char *)v98 + 8) = 0;
    objc_msgSend(*(id *)&v74[v79], sel_setScale_, *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_subScale] * v97);
  }
  if ((v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle + 8] & 1) == 0)
  {
    double v99 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle];
    v100 = (double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle];
    double *v100 = v99;
    *((unsigned char *)v100 + 8) = 0;
    if (!*(void *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction]) {
      objc_msgSend(*(id *)&v74[v77], sel_setZRotation_, v99);
    }
  }
  if ((v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacity + 8] & 1) == 0)
  {
    double v101 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacity];
    v102 = (double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOpacity];
    double *v102 = v101;
    double v103 = v101;
    *((unsigned char *)v102 + 8) = 0;
    objc_msgSend(*(id *)&v74[v79], sel_setAlpha_, v101);
    objc_msgSend(*(id *)&v74[v125], sel_setAlpha_, v103);
  }
  if ((v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightness + 8] & 1) == 0)
  {
    double v104 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightness];
    v105 = (double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness];
    double *v105 = v104;
    double v106 = v104;
    *((unsigned char *)v105 + 8) = 0;
    v107 = *(void **)&v74[v80];
    v108 = *(void **)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor];
    id v109 = v107;
    id v110 = v108;
    FMPFSKSpriteNode.setBrightness(_:with:)(v110, v106);
  }
  if ((v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_offset + 16] & 1) == 0)
  {
    double v111 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_offset + 8];
    double v112 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_offset];
    v113 = (double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOffset];
    double *v113 = v112;
    v113[1] = v111;
    *((unsigned char *)v113 + 16) = 0;
    objc_msgSend(v74, sel_setPosition_, v112, v111);
  }

  return v74;
}

uint64_t FMPFSKPeripheralDotNode.description.getter()
{
  double v1 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  uint64_t v2 = _Pointer.debugDescription.getter();
  uint64_t v4 = specialized BidirectionalCollection.suffix(_:)(6, v2, v3);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = MEMORY[0x22A677190](v4, v6, v8, v10);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 30768;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  id v14 = objc_msgSend(v0, sel_name);
  if (v14)
  {
    double v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    double v1 = v17;
  }
  else
  {
    uint64_t v16 = 0;
  }
  v18._countAndFlagsBits = v16;
  v18._object = v1;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  uint64_t v20 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v20;
}

id FMPFSKPeripheralDotNode.createBeaconSubNode()()
{
  type metadata accessor for FMPFSKSpriteNode();
  id v1 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  type metadata accessor for FMPFView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v3 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v4 = (void *)MEMORY[0x22A677130](0xD000000000000016, 0x80000002273FB020);
  id v5 = objc_msgSend(self, sel_imageNamed_inBundle_compatibleWithTraitCollection_, v4, v3, 0);

  if (v5)
  {
    id v6 = objc_msgSend(self, sel_textureWithImage_, v5);

    id v3 = v5;
  }
  else
  {
    id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F17C38]), sel_init);
  }

  objc_msgSend(v1, sel_setTexture_, v6);
  id v7 = v1;
  objc_msgSend(v6, sel_size);
  objc_msgSend(v7, sel_setSize_);

  uint64_t v8 = v0 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style;
  objc_msgSend(v7, sel_setColor_, *(void *)(v8 + 56));
  objc_msgSend(v7, sel_setColorBlendFactor_, 1.0);
  objc_msgSend(v7, sel_setAlpha_, *(double *)(v8 + 40));
  objc_msgSend(v7, sel_setScale_, 1.0);
  id v9 = v7;
  uint64_t v10 = (void *)MEMORY[0x22A677130](0x6E6F63616542, 0xE600000000000000);
  objc_msgSend(v9, sel_setName_, v10);

  return v9;
}

void closure #1 in FMPFSKPeripheralDotNode.executePartPerimeterRotation(_:)(void *a1, char *a2, double a3)
{
  objc_msgSend(a1, sel_setSpeed_, *(double *)&a2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style + 8] * a3);
  if ((a2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness + 8] & 1) == 0)
  {
    uint64_t v5 = *(void *)&a2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness];
    if (!UIAccessibilityIsReduceMotionEnabled())
    {
      id v6 = *(void **)&a2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode];
      id v7 = (void *)swift_allocObject();
      v7[2] = a1;
      v7[3] = v5;
      v7[4] = a2;
      v12[4] = closure #1 in FMPFSKPeripheralDotNode.executePartPerimeterRotation(_:)partial apply;
      v12[5] = v7;
      v12[0] = MEMORY[0x263EF8330];
      v12[1] = 1107296256;
      v12[2] = thunk for @escaping @callee_guaranteed () -> ();
      v12[3] = &block_descriptor_178;
      uint64_t v8 = _Block_copy(v12);
      id v9 = v6;
      id v10 = a1;
      Swift::String v11 = a2;
      swift_release();
      objc_msgSend(v9, sel_runAction_completion_, v10, v8);
      _Block_release(v8);
    }
  }
}

Swift::Void __swiftcall FMPFSKPeripheralDotNode.setFreeFromBearing()()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction;
  if (!*(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction])
  {
    uint64_t v2 = (double *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness];
    if ((v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness + 8] & 1) == 0
      && (v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius + 8] & 1) == 0)
    {
      double v3 = *v2;
      uint64_t v4 = (uint64_t *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style];
      double v5 = (*(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius]
          + *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius])
         * 3.14159265
         / (*(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style]
          * 0.5);
      double v6 = dbl_2273F4470[(specialized RandomNumberGenerator.next<A>(upperBound:)(100) & 1) == 0];
      id v7 = objc_msgSend(self, sel_rotateByAngle_duration_, v6 / (double)v4[2], v5 / (double)v4[2]);
      objc_msgSend(v7, sel_setTimingMode_, 0);
      objc_msgSend(v7, sel_setSpeed_, v3 * *((double *)v4 + 1));
      uint64_t v8 = *(void **)&v0[v1];
      *(void *)&v0[v1] = v7;
      id v16 = v7;

      if (((_BYTE)v2[1] & 1) != 0 || (double v9 = *v2, UIAccessibilityIsReduceMotionEnabled()))
      {
      }
      else
      {
        id v10 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode];
        Swift::String v11 = (double *)swift_allocObject();
        *((void *)v11 + 2) = v16;
        v11[3] = v9;
        *((void *)v11 + 4) = v0;
        aBlock[4] = partial apply for closure #1 in FMPFSKPeripheralDotNode.executePartPerimeterRotation(_:);
        aBlock[5] = v11;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = &block_descriptor_171;
        Swift::String v12 = _Block_copy(aBlock);
        id v13 = v16;
        id v14 = v10;
        double v15 = v0;
        swift_release();
        objc_msgSend(v14, sel_runAction_completion_, v13, v12);
        _Block_release(v12);
      }
    }
  }
}

Swift::Void __swiftcall FMPFSKPeripheralDotNode.setBoundToBearing()()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction;
  if (*(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction])
  {
    uint64_t v2 = v0;
    double v3 = (double *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle];
    if (((_BYTE)v3[1] & 1) == 0)
    {
      double v4 = *v3;
      uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode;
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode], sel_removeAllActions);
      double v6 = *(void **)&v2[v1];
      *(void *)&v2[v1] = 0;

      double v7 = fmod(*(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAbsoluteHeading]/ 180.0* 3.14159265, 6.28318531);
      if (v7 <= 3.14159265)
      {
        if (v7 < -3.14159265) {
          double v7 = v7 + 6.28318531;
        }
      }
      else
      {
        double v7 = v7 + -6.28318531;
      }
      objc_msgSend(*(id *)&v2[v5], sel_zRotation);
      double v9 = fmod(v8, 6.28318531);
      if (v9 <= 3.14159265)
      {
        if (v9 < -3.14159265) {
          double v9 = v9 + 6.28318531;
        }
      }
      else
      {
        double v9 = v9 + -6.28318531;
      }
      double v10 = v7 + v9;
      double v11 = v4 - (v7 + v9);
      if (vabdd_f64(v4, v10) > 3.14159265)
      {
        if (v10 >= 0.0 || v4 < 0.0)
        {
          if (v4 < 0.0 && v10 >= 0.0) {
            double v11 = v11 + 6.28318531;
          }
        }
        else
        {
          double v11 = v11 + -6.28318531;
        }
      }
      Swift::Double v13 = v4 - v11;
      *double v3 = v4 - v11;
      *((unsigned char *)v3 + 8) = 0;
      objc_msgSend(*(id *)&v2[v5], sel_setZRotation_, v4 - v11);
      uint64_t v14 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring];
      FLSpring.resetImmediately(toValue:)(v13);
      *(unsigned char *)(v14 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      objc_msgSend(v2, sel_setZRotation_, 0.0);
      uint64_t v15 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_headingSpring];
      FLSpring.resetImmediately(toValue:)(0.0);
      *(unsigned char *)(v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      FMPFSKPeripheralDotNode.setAngle(_:sprung:)(1, v4);
    }
  }
}

Swift::Void __swiftcall FMPFSKPeripheralDotNode.pulse(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  double v3 = v2;
  if (_)
  {
    double v4 = self;
    uint64_t v5 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style];
    double v6 = *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style + 64];
    id v7 = objc_msgSend(v4, sel_fadeAlphaTo_duration_, *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style + 48], v6);
    objc_msgSend(v7, sel_setTimingMode_, 2);
    if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_hasPlayedInitialPulse])
    {
      id v8 = FMPFSKPeripheralDotNode.createBeaconSubNode()();
      id v9 = objc_msgSend(v4, sel_scaleTo_duration_, v5[4], v6);
      objc_msgSend(v9, sel_setTimingMode_, 2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_2273F4480;
      *(void *)(v10 + 32) = v7;
      *(void *)(v10 + 40) = v9;
      unint64_t aBlock = v10;
      specialized Array._endMutation()();
      type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for SKAction);
      id v11 = v7;
      id v12 = v9;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v14 = objc_msgSend(v4, sel_group_, isa);

      objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode], sel_addChild_, v8);
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v8;
      int v58 = partial apply for closure #2 in FMPFSKPeripheralDotNode.pulse(_:animated:);
      uint64_t v59 = v15;
      unint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v55 = 1107296256;
      id v56 = thunk for @escaping @callee_guaranteed () -> ();
      v57 = &block_descriptor_165;
      id v16 = _Block_copy(&aBlock);
      id v17 = v8;
      swift_release();
      objc_msgSend(v17, sel_runAction_completion_, v14, v16);

      _Block_release(v16);
    }
    else
    {
      v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_hasPlayedInitialPulse] = 1;
      v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse] = 1;
      id v35 = objc_msgSend(v4, sel_scaleTo_duration_, v5[4], v6);
      objc_msgSend(v35, sel_setTimingMode_, 2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_2273F4480;
      *(void *)(v36 + 32) = v7;
      *(void *)(v36 + 40) = v35;
      unint64_t aBlock = v36;
      specialized Array._endMutation()();
      type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for SKAction);
      id v37 = v7;
      id v38 = v35;
      Class v39 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v40 = objc_msgSend(v4, sel_group_, v39);

      v41 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode];
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = v3;
      int v58 = partial apply for closure #1 in FMPFSKPeripheralDotNode.pulse(_:animated:);
      uint64_t v59 = v42;
      unint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v55 = 1107296256;
      id v56 = thunk for @escaping @callee_guaranteed () -> ();
      v57 = &block_descriptor;
      v43 = _Block_copy(&aBlock);
      id v44 = v41;
      uint64_t v45 = v3;
      swift_release();
      objc_msgSend(v44, sel_runAction_completion_, v40, v43);

      _Block_release(v43);
    }
    return;
  }
  if (animated) {
    return;
  }
  unint64_t aBlock = MEMORY[0x263F8EE78];
  id v18 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode], sel_children);
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for SKNode);
  unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v19 >> 62) {
    goto LABEL_27;
  }
  uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v20)
  {
LABEL_7:
    uint64_t v52 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
    uint64_t v53 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interativeRadiusBeaconNode;
    uint64_t v21 = 4;
    CGRect v22 = v3;
    while (1)
    {
      if ((v19 & 0xC000000000000001) != 0) {
        id v23 = (id)MEMORY[0x22A677580](v21 - 4, v19);
      }
      else {
        id v23 = *(id *)(v19 + 8 * v21);
      }
      v24 = v23;
      uint64_t v25 = v21 - 3;
      if (__OFADD__(v21 - 4, 1))
      {
        __break(1u);
LABEL_27:
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        if (!v20) {
          goto LABEL_28;
        }
        goto LABEL_7;
      }
      self;
      uint64_t v26 = swift_dynamicCastObjCClass();
      if (!v26) {
        goto LABEL_9;
      }
      uint64_t v27 = (void *)v26;
      uint64_t v28 = *(void **)&v3[v53];
      if (v28)
      {
        id v29 = v24;
        id v30 = v28;
        char v31 = static NSObject.== infix(_:_:)();

        double v3 = v22;
        if (v31) {
          break;
        }
      }
      else
      {
        id v32 = v24;
      }
      id v33 = *(id *)&v3[v52];
      char v34 = static NSObject.== infix(_:_:)();

      double v3 = v22;
      if (v34) {
        break;
      }
      MEMORY[0x22A677220](objc_msgSend(v27, sel_removeAllActions));
      if (*(void *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      double v3 = v22;
      if (v25 == v20) {
        goto LABEL_28;
      }
LABEL_10:
      ++v21;
    }

LABEL_9:
    if (v25 == v20) {
      goto LABEL_28;
    }
    goto LABEL_10;
  }
LABEL_28:
  swift_bridgeObjectRelease_n();
  if (aBlock >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    if (v46) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v46 = *(void *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v46)
    {
LABEL_30:
      if (v46 < 1)
      {
        __break(1u);
        return;
      }
      for (uint64_t i = 0; i != v46; ++i)
      {
        if ((aBlock & 0xC000000000000001) != 0) {
          id v48 = (id)MEMORY[0x22A677580](i, aBlock);
        }
        else {
          id v48 = *(id *)(aBlock + 8 * i + 32);
        }
        uint64_t v49 = v48;
        objc_msgSend(v48, sel_removeFromParent);
      }
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v50 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse;
  if (v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse])
  {
    uint64_t v51 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode], sel_removeAllActions);
    objc_msgSend(*(id *)&v3[v51], sel_setScale_, 1.0);
    objc_msgSend(*(id *)&v3[v51], sel_setAlpha_, 1.0);
  }
  v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_hasPlayedInitialPulse] = 0;
  v3[v50] = 0;
  swift_bridgeObjectRelease();
}

void FMPFSKPeripheralDotNode.setDotScale(_:sprung:)(char a1, Swift::Double a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale;
  *(Swift::Double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  if ((a1 & 1) != 0
    && (uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring),
        uint64_t v7 = v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v7 + 280) + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308))
  {
    uint64_t v10 = v6 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)uint64_t v10 = a2;
    *(unsigned char *)(v10 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring);
    FLSpring.resetImmediately(toValue:)(a2);
    *(unsigned char *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    uint64_t v9 = v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale;
    *(Swift::Double *)uint64_t v9 = a2;
    *(unsigned char *)(v9 + 8) = 0;
    objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode), sel_setScale_, *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_subScale) * a2);
  }
}

void FMPFSKPeripheralDotNode.setAngle(_:sprung:)(char a1, Swift::Double a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle;
  *(Swift::Double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  if ((a1 & 1) != 0
    && (uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring),
        uint64_t v7 = v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v7 + 280) + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308))
  {
    uint64_t v10 = v6 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)uint64_t v10 = a2;
    *(unsigned char *)(v10 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring);
    FLSpring.resetImmediately(toValue:)(a2);
    *(unsigned char *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    uint64_t v9 = v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle;
    *(Swift::Double *)uint64_t v9 = a2;
    *(unsigned char *)(v9 + 8) = 0;
    if (!*(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction)) {
      objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode), sel_setZRotation_, a2);
    }
  }
}

Swift::Void __swiftcall FMPFSKPeripheralDotNode.setOffset(_:sprung:)(CGPoint _, Swift::Bool sprung)
{
  uint64_t v3 = v2;
  CGFloat y = _.y;
  CGFloat x = _.x;
  uint64_t v6 = &v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_offset];
  *(CGFloat *)uint64_t v6 = _.x;
  *((void *)v6 + 1) = *(void *)&_.y;
  v6[16] = 0;
  if (!sprung
    || (uint64_t v7 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_xOffsetSpring],
        uint64_t v8 = v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v8 + 280) + *(double *)(v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) == 1.79769313e308)
    || (uint64_t v9 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_yOffsetSpring,
        uint64_t v10 = *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_yOffsetSpring],
        uint64_t v11 = v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v11 + 280) + *(double *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) == 1.79769313e308))
  {
    uint64_t v12 = *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_xOffsetSpring];
    FLSpring.resetImmediately(toValue:)(x);
    *(unsigned char *)(v12 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    uint64_t v13 = *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_yOffsetSpring];
    FLSpring.resetImmediately(toValue:)(y);
    *(unsigned char *)(v13 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    id v14 = (CGFloat *)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOffset];
    CGFloat *v14 = x;
    v14[1] = y;
    *((unsigned char *)v14 + 16) = 0;
    objc_msgSend(v3, sel_setPosition_, x, y);
  }
  else
  {
    uint64_t v15 = v7 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(CGFloat *)uint64_t v15 = x;
    *(unsigned char *)(v15 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
    uint64_t v16 = *(void *)&v3[v9] + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(CGFloat *)uint64_t v16 = y;
    *(unsigned char *)(v16 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
}

Swift::Void __swiftcall FMPFSKPeripheralDotNode.addSprungRelativeHeading(_:)(Swift::Double a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_headingSpring);
  uint64_t v4 = v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
  swift_beginAccess();
  uint64_t v5 = v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
  double v6 = *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  double v7 = *(double *)(v4 + 280) + v6;
  double v8 = v7 + a1;
  if (v7 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v8);
    *(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    double v6 = *(double *)(v5 + 40);
  }
  double v9 = v8 - v6;
  *(double *)(v4 + 280) = v9;
  *(double *)(v4 + 240) = v9;
  *(void *)(v4 + 248) = 0;
}

id FMPFSKPeripheralDotNode.setUnsprungInteractiveAngleFactor(_:)(id result, char a2)
{
  uint64_t v3 = v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interactiveAngleFactor;
  *(void *)uint64_t v3 = result;
  *(unsigned char *)(v3 + 8) = a2 & 1;
  if ((a2 & 1) == 0 && (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle + 8) & 1) == 0)
  {
    double v4 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle);
    double v5 = *(double *)&result;
    uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring);
    double v7 = (double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    uint64_t result = (id)swift_beginAccess();
    double v8 = *v7 + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    if (vabdd_f64(v7[35] + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v8) <= *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
      double v8 = v7[35] + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    }
    uint64_t v9 = v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle;
    *(double *)uint64_t v9 = v4 * v5 + (1.0 - v5) * v8;
    *(unsigned char *)(v9 + 8) = 0;
    if (!*(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction)) {
      return objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode), sel_setZRotation_);
    }
  }
  return result;
}

void FMPFSKPeripheralDotNode.__ivar_destroyer()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor);
}

id FMPFSKPeripheralDotNode.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKPeripheralDotNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKPeripheralDotNode()
{
  return self;
}

void type metadata accessor for NSProcessInfoThermalState(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CHHapticPatternKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance CHHapticPatternKey(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CHHapticPatternKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance CHHapticPatternKey(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CHHapticPatternKey(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CHHapticPatternKey(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CHHapticPatternKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x22A677130](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance NSProcessInfoThermalState@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NSProcessInfoThermalState(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CHHapticPatternKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CHHapticPatternKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, type metadata accessor for CHHapticPatternKey);
  uint64_t v3 = lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, type metadata accessor for CHHapticPatternKey);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CHHapticEngineOptionKey(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey, type metadata accessor for CHHapticEngineOptionKey);
  uint64_t v3 = lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey((unint64_t *)&lazy protocol witness table cache variable for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey, type metadata accessor for CHHapticEngineOptionKey);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CHHapticPatternKey@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x22A677130](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CHHapticPowerUsage(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPowerUsage and conformance CHHapticPowerUsage, type metadata accessor for CHHapticPowerUsage);
  uint64_t v3 = lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPowerUsage and conformance CHHapticPowerUsage, type metadata accessor for CHHapticPowerUsage);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CHHapticPatternKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CHHapticPatternKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CHHapticPatternKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CHHapticPatternKey()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void specialized FMPFSKPeripheralDotNode.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode;
  uint64_t v2 = (objc_class *)type metadata accessor for FMPFSKNode();
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode;
  *(void *)&v0[v4] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
  type metadata accessor for FMPFSKSpriteNode();
  *(void *)&v0[v5] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode;
  *(void *)&v0[v6] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTRangingNode()), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interativeRadiusBeaconNode] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_hasPlayedInitialPulse] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyDiskRadius] = 1;
  double v7 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
  *(void *)double v7 = 0;
  v7[8] = 1;
  double v8 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
  *(void *)double v8 = 0;
  v8[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyDotScale] = 1;
  uint64_t v9 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale];
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale];
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyAngle] = 1;
  uint64_t v11 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle];
  *(void *)uint64_t v11 = 0;
  v11[8] = 1;
  uint64_t v12 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle];
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyOpacity] = 1;
  uint64_t v13 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacity];
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;
  id v14 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOpacity];
  *(void *)id v14 = 0;
  v14[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyBrightness] = 1;
  uint64_t v15 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightness];
  *(void *)uint64_t v15 = 0;
  v15[8] = 1;
  uint64_t v16 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness];
  *(void *)uint64_t v16 = 0;
  v16[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyOffset] = 1;
  id v17 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_offset];
  *(void *)id v17 = 0;
  *((void *)v17 + 1) = 0;
  v17[16] = 1;
  id v18 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOffset];
  *(void *)id v18 = 0;
  *((void *)v18 + 1) = 0;
  v18[16] = 1;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAbsoluteHeading] = 0;
  unint64_t v19 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interactiveAngleFactor];
  *(void *)unint64_t v19 = 0;
  v19[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyRadiusFactor] = 1;
  uint64_t v20 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_radiusFactor];
  *(void *)uint64_t v20 = 0;
  v20[8] = 1;
  uint64_t v21 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedRadiusFactor];
  *(void *)uint64_t v21 = 0;
  v21[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized FMPFSKPeripheralDotNode.renderingColor.setter(void *a1)
{
  uint64_t v2 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor;
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor);
  *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor) = a1;
  id v4 = a1;

  uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode)
     + OBJC_IVAR____TtC10TVRemoteUI16FMPFSKSpriteNode_previousBrightness;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness + 8) & 1) == 0)
  {
    double v7 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness);
    double v8 = *(void **)(v1 + v2);
    id v9 = *(id *)(v1 + v5);
    id v10 = v8;
    FMPFSKSpriteNode.setBrightness(_:with:)(v10, v7);
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for SKConstraint(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_2273A010C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

id partial apply for closure #1 in FMPFSKPeripheralDotNode.pulse(_:animated:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse) = 0;
  uint64_t v2 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode), sel_setScale_, 1.0);
  uint64_t v3 = *(void **)(v1 + v2);
  return objc_msgSend(v3, sel_setAlpha_, 1.0);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

id partial apply for closure #2 in FMPFSKPeripheralDotNode.pulse(_:animated:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_removeFromParent);
}

uint64_t sub_2273A01D4()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in FMPFSKPeripheralDotNode.executePartPerimeterRotation(_:)()
{
  closure #1 in FMPFSKPeripheralDotNode.executePartPerimeterRotation(_:)(*(void **)(v0 + 16), *(char **)(v0 + 32), *(double *)(v0 + 24));
}

void type metadata accessor for CHHapticPatternKey(uint64_t a1)
{
}

void type metadata accessor for CHHapticPowerUsage(uint64_t a1)
{
}

void type metadata accessor for CHHapticEngineOptionKey(uint64_t a1)
{
}

void type metadata accessor for UIFontDescriptorSymbolicTraits(uint64_t a1)
{
}

void type metadata accessor for SKLabelHorizontalAlignmentMode(uint64_t a1)
{
}

void type metadata accessor for NSProcessInfoThermalState(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t base witness table accessor for RawRepresentable in CHHapticEngineOptionKey()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey, type metadata accessor for CHHapticEngineOptionKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CHHapticEngineOptionKey()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey, type metadata accessor for CHHapticEngineOptionKey);
}

uint64_t lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in CHHapticEngineOptionKey()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey, type metadata accessor for CHHapticEngineOptionKey);
}

uint64_t base witness table accessor for RawRepresentable in CHHapticPowerUsage()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPowerUsage and conformance CHHapticPowerUsage, type metadata accessor for CHHapticPowerUsage);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CHHapticPowerUsage()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPowerUsage and conformance CHHapticPowerUsage, type metadata accessor for CHHapticPowerUsage);
}

uint64_t base witness table accessor for Equatable in CHHapticPowerUsage()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPowerUsage and conformance CHHapticPowerUsage, type metadata accessor for CHHapticPowerUsage);
}

uint64_t base witness table accessor for RawRepresentable in CHHapticPatternKey()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, type metadata accessor for CHHapticPatternKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CHHapticPatternKey()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, type metadata accessor for CHHapticPatternKey);
}

uint64_t base witness table accessor for Equatable in CHHapticPatternKey()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, type metadata accessor for CHHapticPatternKey);
}

uint64_t initializeBufferWithCopyOfBuffer for FMFindingState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void destroy for FMFindingState(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 16);
  LODWORD(v2) = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF) {
    uint64_t v2 = *(void *)(a1 + 16);
  }
  int v3 = v2 - 1;
  if (v3 < 0) {
    int v4 = -1;
  }
  else {
    int v4 = v3;
  }
  if ((v3 <= 4 || v4 <= 0) && (unint64_t)(v1 - 1) >= 5)
  {

    double v8 = *(void **)(a1 + 24);
  }
}

uint64_t initializeWithCopy for FMFindingState(uint64_t a1, uint64_t a2)
{
  int v4 = *(char **)(a2 + 16);
  LODWORD(v5) = -1;
  if ((unint64_t)v4 < 0xFFFFFFFF) {
    uint64_t v5 = *(void *)(a2 + 16);
  }
  int v6 = v5 - 1;
  if (v6 < 0) {
    int v7 = -1;
  }
  else {
    int v7 = v6;
  }
  if (v7 < 1 || v6 <= 4)
  {
    if ((unint64_t)(v4 - 2) < 4 || v4 == (char *)1)
    {
      long long v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      long long v10 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      long long v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v11;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v16 = *(void **)(a2 + 24);
      uint64_t v15 = *(void *)(a2 + 32);
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = v16;
      *(void *)(a1 + 32) = v15;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
      uint64_t v17 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v17;
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      id v18 = v4;
      id v19 = v16;
    }
    *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
    *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
    long long v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    long long v14 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v14;
  }
  return a1;
}

uint64_t assignWithCopy for FMFindingState(uint64_t a1, uint64_t *a2)
{
  int v4 = *(char **)(a1 + 16);
  LODWORD(v5) = -1;
  if ((unint64_t)v4 >= 0xFFFFFFFF) {
    LODWORD(v6) = -1;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  int v7 = v6 - 1;
  if ((int)v6 - 1 < 0) {
    int v8 = -1;
  }
  else {
    int v8 = v6 - 1;
  }
  unint64_t v9 = a2[2];
  if (v9 < 0xFFFFFFFF) {
    uint64_t v5 = a2[2];
  }
  int v10 = v5 - 1;
  if (v10 < 0) {
    int v11 = -1;
  }
  else {
    int v11 = v10;
  }
  BOOL v13 = v11 < 1 || v10 < 5;
  if (v8 < 1 || v7 <= 4)
  {
    if (v13)
    {
      unint64_t v15 = v9 - 2;
      if ((unint64_t)(v4 - 2) >= 4)
      {
        if (v15 >= 4)
        {
          if (v4 == (char *)1)
          {
LABEL_30:
            if (v9 != 1)
            {
              uint64_t v26 = *a2;
              *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
              *(void *)a1 = v26;
              uint64_t v27 = (void *)a2[2];
              *(void *)(a1 + 16) = v27;
              uint64_t v28 = (void *)a2[3];
              *(void *)(a1 + 24) = v28;
              *(void *)(a1 + 32) = a2[4];
              *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
              *(void *)(a1 + 48) = a2[6];
              *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
              *(unsigned char *)(a1 + 57) = *((unsigned char *)a2 + 57);
              *(void *)(a1 + 64) = a2[8];
              *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
              *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
              *(unsigned char *)(a1 + 74) = *((unsigned char *)a2 + 74);
              *(void *)(a1 + 80) = a2[10];
              uint64_t v29 = a2[11];
              *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
              *(void *)(a1 + 88) = v29;
              id v30 = v27;
              id v31 = v28;
              goto LABEL_40;
            }
LABEL_31:
            long long v16 = *(_OWORD *)a2;
            long long v17 = *((_OWORD *)a2 + 2);
            *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
            *(_OWORD *)(a1 + 32) = v17;
            *(_OWORD *)a1 = v16;
            long long v18 = *((_OWORD *)a2 + 3);
            long long v19 = *((_OWORD *)a2 + 4);
            long long v20 = *((_OWORD *)a2 + 5);
            *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
            *(_OWORD *)(a1 + 64) = v19;
            *(_OWORD *)(a1 + 80) = v20;
            *(_OWORD *)(a1 + 48) = v18;
LABEL_40:
            *(unsigned char *)(a1 + 97) = *((unsigned char *)a2 + 97);
            return a1;
          }
          if (v9 != 1)
          {
            uint64_t v38 = *a2;
            *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
            *(void *)a1 = v38;
            Class v39 = (void *)a2[2];
            *(void *)(a1 + 16) = v39;
            id v40 = v39;

            v41 = *(void **)(a1 + 24);
            uint64_t v42 = (void *)a2[3];
            *(void *)(a1 + 24) = v42;
            id v43 = v42;

            *(void *)(a1 + 32) = a2[4];
            *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
            *(void *)(a1 + 48) = a2[6];
            *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
            *(unsigned char *)(a1 + 57) = *((unsigned char *)a2 + 57);
            *(void *)(a1 + 64) = a2[8];
            *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
            *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
            *(unsigned char *)(a1 + 74) = *((unsigned char *)a2 + 74);
            *(void *)(a1 + 80) = a2[10];
            uint64_t v44 = a2[11];
            *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
            *(void *)(a1 + 88) = v44;
            goto LABEL_40;
          }
          outlined destroy of FMFindingDistance(a1);
        }
        else
        {
          outlined destroy of (distance: FMFindingDistance?)(a1);
        }
        long long v33 = *((_OWORD *)a2 + 1);
        long long v32 = *((_OWORD *)a2 + 2);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v33;
        *(_OWORD *)(a1 + 32) = v32;
        long long v35 = *((_OWORD *)a2 + 4);
        long long v34 = *((_OWORD *)a2 + 5);
        long long v36 = *((_OWORD *)a2 + 3);
        *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
        *(_OWORD *)(a1 + 64) = v35;
        *(_OWORD *)(a1 + 80) = v34;
        *(_OWORD *)(a1 + 48) = v36;
        goto LABEL_40;
      }
LABEL_29:
      if (v15 < 4) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    if ((unint64_t)(v4 - 1) >= 5)
    {
    }
  }
  else if (v13)
  {
    unint64_t v15 = v9 - 2;
    goto LABEL_29;
  }
  long long v21 = *(_OWORD *)a2;
  long long v22 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v22;
  *(_OWORD *)a1 = v21;
  long long v23 = *((_OWORD *)a2 + 3);
  long long v24 = *((_OWORD *)a2 + 4);
  long long v25 = *((_OWORD *)a2 + 5);
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)(a1 + 64) = v24;
  *(_OWORD *)(a1 + 80) = v25;
  *(_OWORD *)(a1 + 48) = v23;
  return a1;
}

uint64_t outlined destroy of FMFindingDistance(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of (distance: FMFindingDistance?)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (distance: FMFindingDistance?));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy98_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for FMFindingState(uint64_t a1, uint64_t a2)
{
  int v4 = *(char **)(a1 + 16);
  LODWORD(v5) = -1;
  if ((unint64_t)v4 < 0xFFFFFFFF) {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  int v6 = v5 - 1;
  if (v6 < 0) {
    int v7 = -1;
  }
  else {
    int v7 = v6;
  }
  if (v7 >= 1 && v6 > 4) {
    goto LABEL_26;
  }
  unint64_t v9 = *(void *)(a2 + 16);
  LODWORD(v10) = -1;
  if (v9 < 0xFFFFFFFF) {
    uint64_t v10 = *(void *)(a2 + 16);
  }
  int v11 = v10 - 1;
  if (v11 < 0) {
    int v12 = -1;
  }
  else {
    int v12 = v11;
  }
  if (v12 < 1 || v11 <= 4)
  {
    if ((unint64_t)(v4 - 2) >= 4)
    {
      if (v9 - 2 >= 4)
      {
        if (v4 != (char *)1)
        {
          if (v9 != 1)
          {
            *(void *)a1 = *(void *)a2;
            *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
            *(void *)(a1 + 16) = v9;

            long long v21 = *(void **)(a1 + 24);
            *(void *)(a1 + 24) = *(void *)(a2 + 24);

            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
            *(void *)(a1 + 48) = *(void *)(a2 + 48);
            *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
            *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
            *(void *)(a1 + 64) = *(void *)(a2 + 64);
            *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
            *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
            *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
            *(void *)(a1 + 80) = *(void *)(a2 + 80);
            *(void *)(a1 + 88) = *(void *)(a2 + 88);
            *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
            goto LABEL_31;
          }
          outlined destroy of FMFindingDistance(a1);
        }
      }
      else
      {
        outlined destroy of (distance: FMFindingDistance?)(a1);
      }
    }
    long long v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    long long v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v18;
    long long v19 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v19;
LABEL_31:
    *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
    return a1;
  }
  if ((unint64_t)(v4 - 1) >= 5)
  {
  }
LABEL_26:
  long long v14 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v14;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for FMFindingState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF5 && *(unsigned char *)(a1 + 98)) {
    return (*(_DWORD *)a1 + 2147483638);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  if (v4 <= 4) {
    int v4 = 4;
  }
  unsigned int v6 = v4 - 4;
  if (v5 <= 0) {
    unsigned int v6 = 0;
  }
  if (v6 >= 5) {
    return v6 - 4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FMFindingState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF6)
  {
    *(_WORD *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 2147483638;
    if (a3 >= 0x7FFFFFF6) {
      *(unsigned char *)(result + 98) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF6) {
      *(unsigned char *)(result + 98) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 9;
    }
  }
  return result;
}

uint64_t getEnumTag for FMFindingState(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v3 = -1;
  }
  else {
    int v3 = v2;
  }
  if (v2 <= 4) {
    int v2 = 4;
  }
  unsigned int v4 = v2 - 4;
  if (v3 <= 0) {
    return 0;
  }
  else {
    return v4;
  }
}

double destructiveInjectEnumTag for FMFindingState(uint64_t a1, unsigned int a2)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(void *)(a1 + 88) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 96) = 0;
    *(void *)a1 = a2 - 2147483642;
  }
  else if (a2)
  {
    *(void *)(a1 + 16) = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFindingState()
{
  return &type metadata for FMFindingState;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingState.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEF637241646E4165;
  uint64_t v3 = 0x7672754364617571;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x7672754364617571;
    }
    else {
      uint64_t v5 = 0x7261656E696CLL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE900000000000065;
    }
    else {
      unint64_t v6 = 0xE600000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v5 = 0x7672754364617571;
    unint64_t v6 = 0xEF637241646E4165;
    int v7 = a2;
    if (!a2) {
      goto LABEL_12;
    }
  }
  if (v7 == 1)
  {
    unint64_t v2 = 0xE900000000000065;
  }
  else
  {
    uint64_t v3 = 0x7261656E696CLL;
    unint64_t v2 = 0xE600000000000000;
  }
LABEL_12:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  unint64_t v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6D6572757361656DLL;
    }
    else {
      uint64_t v3 = 0x646E657274;
    }
    if (v2 == 1) {
      int v4 = 0xEB00000000746E65;
    }
    else {
      int v4 = 0xE500000000000000;
    }
    uint64_t v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        unint64_t v6 = 0x6D6572757361656DLL;
      }
      else {
        unint64_t v6 = 0x646E657274;
      }
      if (v5 == 1) {
        int v7 = 0xEB00000000746E65;
      }
      else {
        int v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    int v4 = 0xE400000000000000;
    uint64_t v3 = 1701869940;
    uint64_t v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  int v7 = 0xE400000000000000;
  if (v3 != 1701869940)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x65636E6174736964;
  }
  else {
    uint64_t v3 = 1701869940;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x65636E6174736964;
  }
  else {
    uint64_t v5 = 1701869940;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6E776F6E6B6E75;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6E776F6E6B6E75;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6973616572636E69;
      goto LABEL_4;
    case 2:
      uint64_t v5 = 0x6973616572636564;
LABEL_4:
      unint64_t v3 = 0xEA0000000000676ELL;
      break;
    case 3:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x656C62617473;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEA0000000000676ELL;
      if (v5 == 0x6973616572636E69) {
        goto LABEL_13;
      }
      goto LABEL_15;
    case 2:
      uint64_t v2 = 0x6973616572636564;
      unint64_t v6 = 0xEA0000000000676ELL;
      goto LABEL_10;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x656C62617473) {
        goto LABEL_13;
      }
      goto LABEL_15;
    default:
LABEL_10:
      if (v5 != v2) {
        goto LABEL_15;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_15:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingState.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FMFindingState.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingState.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FMFindingState.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FMFindingState.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FMFindingState.CodingKeys(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xEB00000000746E65;
  uint64_t v5 = 0x6D6572757361656DLL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x646E657274;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1701869940;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FMFindingState.CodingKeys()
{
  uint64_t v1 = 0x6D6572757361656DLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x646E657274;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance FMFindingState.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FMFindingState.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FMFindingState.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance FMFindingState.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FMFindingState.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FMFindingState.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t FMFindingState.description.getter()
{
  uint64_t v1 = (uint64_t)v0;
  outlined init with take of FMFindingState(v0, (uint64_t)v23);
  uint64_t v21 = v23[1];
  uint64_t v22 = v23[0];
  long long v19 = (void *)v23[3];
  long long v20 = (void *)v23[2];
  outlined init with take of FMFindingState(v0, (uint64_t)&v24);
  unint64_t v2 = v26;
  unint64_t v3 = 0xE300000000000000;
  unint64_t v4 = 0xEC00000064657463;
  uint64_t v5 = 0x656E6E6F63736964;
  uint64_t v6 = 7104878;
  uint64_t v7 = 7496038;
  uint64_t v8 = MEMORY[0x263F8D310];
  unint64_t v9 = &qword_2273F4000;
  switch((unint64_t)v26)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      goto LABEL_7;
    case 3uLL:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v7 = 1918985582;
      goto LABEL_7;
    case 4uLL:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v7 = 1701995880;
      goto LABEL_7;
    case 5uLL:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v7 = 0x646E756F66;
      goto LABEL_7;
    case 6uLL:
      goto LABEL_8;
    case 7uLL:
      unint64_t v4 = 0xEA0000000000676ELL;
      uint64_t v5 = 0x697463656E6E6F63;
      goto LABEL_8;
    case 8uLL:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v5 = 0x676E69766F6DLL;
      goto LABEL_8;
    case 9uLL:
      unint64_t v4 = 0xEF68746150646574;
      uint64_t v5 = 0x6172656E65676564;
      goto LABEL_8;
    default:
      long long v16 = v27;
      uint64_t v17 = v25;
      uint64_t v18 = v24;
      uint64_t v40 = v24;
      char v41 = v25 & 1;
      uint64_t v42 = v26;
      id v43 = v27;
      uint64_t v44 = v28;
      char v45 = v29 & 1;
      uint64_t v46 = v30;
      char v47 = v31 & 1;
      char v48 = v32 & 1;
      uint64_t v49 = v33;
      char v50 = v34 & 1;
      char v51 = v35 & 1;
      char v52 = v36 & 1;
      uint64_t v53 = v37;
      uint64_t v54 = v38;
      char v55 = v39 & 1;
      outlined copy of FMFindingMeasurement(v22, v21, v20, v19);
      outlined copy of FMFindingDistance?(v18, v17, v2, v16);
      uint64_t v6 = FMFindingDistance.description.getter();
      unint64_t v3 = v10;
      uint64_t v8 = MEMORY[0x263F8D310];
      unint64_t v9 = &qword_2273F4000;
LABEL_4:
      unint64_t v11 = v3;
      String.append(_:)(*(Swift::String *)&v6);
      outlined retain of FMFindingState(v1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
      swift_bridgeObjectRelease();
      uint64_t v7 = 0x3A65736963657270;
      unint64_t v3 = 0xE900000000000020;
LABEL_7:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = *((_OWORD *)v9 + 162);
      *(void *)(v12 + 56) = v8;
      *(void *)(v12 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v3;
      v13._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v13);
      outlined retain of FMFindingState(v1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
      swift_bridgeObjectRelease();
      uint64_t v5 = 0x657463656E6E6F63;
      unint64_t v4 = 0xEB00000000203A64;
LABEL_8:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = *((_OWORD *)v9 + 162);
      *(void *)(v14 + 56) = v8;
      *(void *)(v14 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v14 + 32) = v5;
      *(void *)(v14 + 40) = v4;
      return String.init(format:_:)();
  }
}

uint64_t FMFindingState.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  outlined init with take of FMFindingState(v2, (uint64_t)v51);
  uint64_t v35 = v51[1];
  uint64_t v36 = v51[0];
  uint64_t v33 = (void *)v51[3];
  char v34 = (void *)v51[2];
  uint64_t v31 = v51[5];
  uint64_t v32 = v51[4];
  uint64_t v29 = v51[7];
  uint64_t v30 = v51[6];
  uint64_t v27 = v51[9];
  uint64_t v28 = v51[8];
  uint64_t v25 = v51[11];
  uint64_t v26 = v51[10];
  int v24 = v52;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FMFindingState.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of FMFindingState(v2, (uint64_t)v53);
  uint64_t v8 = v54;
  switch(v54)
  {
    case 6:
      LOBYTE(v38) = 0;
      goto LABEL_10;
    case 7:
      LOBYTE(v38) = 0;
      goto LABEL_10;
    case 8:
      LOBYTE(v38) = 0;
      goto LABEL_10;
    case 9:
      LOBYTE(v38) = 0;
LABEL_10:
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      break;
    default:
      uint64_t v12 = v53[1];
      uint64_t v13 = v53[0];
      uint64_t v22 = v56;
      uint64_t v23 = v55;
      uint64_t v20 = v58;
      uint64_t v21 = v57;
      uint64_t v18 = v60;
      uint64_t v19 = v59;
      uint64_t v16 = v62;
      uint64_t v17 = v61;
      uint64_t v15 = v63;
      int v14 = v64;
      int v9 = v65;
      LOBYTE(v38) = 0;
      outlined copy of FMFindingMeasurement(v36, v35, v34, v33);
      uint64_t v10 = v66;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v10)
      {
        LODWORD(v66) = v9;
        uint64_t v38 = v13;
        uint64_t v39 = v12;
        uint64_t v40 = v8;
        uint64_t v41 = v23;
        uint64_t v42 = v22;
        uint64_t v43 = v21;
        uint64_t v44 = v20;
        uint64_t v45 = v19;
        uint64_t v46 = v18;
        uint64_t v47 = v17;
        uint64_t v48 = v16;
        uint64_t v49 = v15;
        char v50 = v14;
        char v37 = 1;
        lazy protocol witness table accessor for type FMFindingMeasurement and conformance FMFindingMeasurement();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        LOBYTE(v38) = v66;
        char v37 = 2;
        lazy protocol witness table accessor for type FMFindingTrend and conformance FMFindingTrend();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t result = outlined retain of FMFindingState((uint64_t)v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
      break;
  }
  return result;
}

void FMFindingState.hash(into:)()
{
  outlined init with take of FMFindingState(v0, (uint64_t)v23);
  uint64_t v21 = v23[1];
  uint64_t v22 = v23[0];
  uint64_t v19 = (void *)v23[3];
  uint64_t v20 = (void *)v23[2];
  outlined init with take of FMFindingState(v0, (uint64_t)&v24);
  switch(v26)
  {
    case 6:
      Swift::UInt v1 = 1;
      goto LABEL_8;
    case 7:
      Swift::UInt v1 = 2;
      goto LABEL_8;
    case 8:
      Swift::UInt v1 = 4;
      goto LABEL_8;
    case 9:
      Swift::UInt v1 = 5;
LABEL_8:
      Hasher._combine(_:)(v1);
      break;
    default:
      char v2 = v25;
      uint64_t v18 = v24;
      uint64_t v3 = v27;
      uint64_t v4 = v28;
      char v5 = v29;
      uint64_t v6 = v30;
      __int16 v7 = v31;
      uint64_t v8 = v32;
      int v9 = v33;
      uint64_t v10 = v34;
      uint64_t v11 = v35;
      char v12 = v36;
      uint64_t v13 = v26;
      Hasher._combine(_:)(3uLL);
      switch(v13)
      {
        case 2:
          Swift::UInt v14 = 1;
          goto LABEL_12;
        case 3:
          Swift::UInt v14 = 2;
          goto LABEL_12;
        case 4:
          Swift::UInt v14 = 3;
          goto LABEL_12;
        case 5:
          Swift::UInt v14 = 4;
LABEL_12:
          Hasher._combine(_:)(v14);
          uint64_t v15 = (uint64_t)v0;
          break;
        default:
          Hasher._combine(_:)(5uLL);
          uint64_t v16 = v13;
          BOOL v17 = v13 == 1;
          uint64_t v15 = (uint64_t)v0;
          if (v17)
          {
            Hasher._combine(_:)(0);
            outlined retain of FMFindingState((uint64_t)v0, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
          }
          else
          {
            uint64_t v37 = v18;
            char v38 = v2 & 1;
            uint64_t v39 = v16;
            uint64_t v40 = v3;
            uint64_t v41 = v4;
            char v42 = v5 & 1;
            uint64_t v43 = v6;
            __int16 v44 = v7 & 0x101;
            uint64_t v45 = v8;
            __int16 v46 = v9 & 0x101;
            char v47 = BYTE2(v9) & 1;
            uint64_t v48 = v10;
            uint64_t v49 = v11;
            char v50 = v12 & 1;
            Hasher._combine(_:)(1u);
            outlined copy of FMFindingMeasurement(v22, v21, v20, v19);
            FMFindingDistance.hash(into:)();
          }
          break;
      }
      String.hash(into:)();
      swift_bridgeObjectRelease();
      outlined retain of FMFindingState(v15, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
      break;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingState(long long *a1, long long *a2)
{
  outlined init with take of FMFindingState(a1, (uint64_t)v4);
  outlined init with take of FMFindingState(a2, (uint64_t)v5);
  return specialized static FMFindingState.== infix(_:_:)(v4, v5) & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingState()
{
  outlined init with take of FMFindingState(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  FMFindingState.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance FMFindingState()
{
  outlined init with take of FMFindingState(v0, (uint64_t)v1);
  FMFindingState.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingState()
{
  outlined init with take of FMFindingState(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  FMFindingState.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance FMFindingState@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized FMFindingState.init(from:)(a1, (uint64_t)v5);
  if (!v2) {
    return outlined init with take of FMFindingState(v5, a2);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FMFindingState(void *a1)
{
  outlined init with take of FMFindingState(v1, (uint64_t)v4);
  return FMFindingState.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FMFindingState()
{
  outlined init with take of FMFindingState(v0, (uint64_t)v2);
  return FMFindingState.description.getter();
}

unint64_t lazy protocol witness table accessor for type FMFindingState and conformance FMFindingState()
{
  unint64_t result = lazy protocol witness table cache variable for type FMFindingState and conformance FMFindingState;
  if (!lazy protocol witness table cache variable for type FMFindingState and conformance FMFindingState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingState and conformance FMFindingState);
  }
  return result;
}

uint64_t outlined init with take of FMFindingState(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  long long v4 = a1[3];
  long long v5 = a1[4];
  long long v6 = a1[5];
  *(_WORD *)(a2 + 96) = *((_WORD *)a1 + 48);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  return a2;
}

uint64_t specialized static FMFindingState.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of FMFindingState(a2, (uint64_t)v88);
  uint64_t v53 = v88[0];
  uint64_t v55 = v88[1];
  uint64_t v57 = (void *)v88[2];
  uint64_t v59 = (void *)v88[3];
  outlined init with take of FMFindingState(a1, (uint64_t)v103);
  switch(v104)
  {
    case 6:
      outlined init with take of FMFindingState(a2, (uint64_t)&v62);
      if (v64 == 6) {
        goto LABEL_8;
      }
      goto LABEL_18;
    case 7:
      outlined init with take of FMFindingState(a2, (uint64_t)&v62);
      if (v64 != 7) {
        goto LABEL_18;
      }
LABEL_8:
      char v15 = 1;
      return v15 & 1;
    case 8:
      outlined init with take of FMFindingState(a2, (uint64_t)&v62);
      char v15 = (v64 & 0xFFFFFFFFFFFFFFFELL) == 8;
      return v15 & 1;
    case 9:
      goto LABEL_18;
    default:
      uint64_t v51 = (uint64_t)a1;
      uint64_t v52 = v104;
      uint64_t v41 = v103[0];
      uint64_t v42 = v103[1];
      uint64_t v43 = v105;
      uint64_t v44 = v106;
      uint64_t v3 = v107;
      uint64_t v4 = v108;
      uint64_t v5 = v109;
      uint64_t v6 = v110;
      uint64_t v7 = v111;
      uint64_t v8 = v112;
      uint64_t v9 = v113;
      char v10 = v114;
      unsigned __int8 v11 = v115;
      outlined init with take of FMFindingState(a2, (uint64_t)&v89);
      uint64_t v12 = v91;
      if ((unint64_t)(v91 - 6) < 4) {
        goto LABEL_18;
      }
      break;
  }
  uint64_t v13 = v52;
  switch(v52)
  {
    case 2:
      BOOL v14 = v91 == 2;
      goto LABEL_13;
    case 3:
      BOOL v14 = v91 == 3;
      goto LABEL_13;
    case 4:
      BOOL v14 = v91 == 4;
      goto LABEL_13;
    case 5:
      BOOL v14 = v91 == 5;
LABEL_13:
      if (!v14)
      {
        uint64_t v17 = v51;
        goto LABEL_17;
      }
      char v40 = v102;
      outlined copy of FMFindingMeasurement(v53, v55, v57, v59);
      uint64_t v16 = v51;
      goto LABEL_16;
    default:
      if ((unint64_t)(v91 - 2) < 4) {
        goto LABEL_18;
      }
      uint64_t v39 = v6;
      uint64_t v19 = v89;
      uint64_t v20 = v90;
      uint64_t v21 = v92;
      uint64_t v22 = v93;
      uint64_t v23 = v94;
      uint64_t v24 = v95;
      uint64_t v25 = v96;
      uint64_t v26 = v97;
      uint64_t v27 = v98;
      uint64_t v28 = v99;
      uint64_t v29 = v100;
      char v30 = v101;
      if (v52 == 1)
      {
        if (v91 == 1)
        {
          char v40 = v102;
          outlined retain of FMFindingState((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
          uint64_t v16 = v51;
          outlined retain of FMFindingState(v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
LABEL_16:
          char v15 = specialized == infix<A>(_:_:)(v11, v40);
          outlined retain of FMFindingState((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
          outlined retain of FMFindingState(v16, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
          return v15 & 1;
        }
        goto LABEL_26;
      }
      if (v91 == 1)
      {
        uint64_t v48 = v93;
        uint64_t v49 = v94;
        uint64_t v31 = v53;
        uint64_t v32 = v55;
        uint64_t v46 = v90;
        uint64_t v47 = v92;
        uint64_t v33 = v57;
        uint64_t v34 = v59;
        uint64_t v45 = v89;
        char v35 = v101;
        uint64_t v58 = v98;
        uint64_t v60 = v5;
        uint64_t v36 = v97;
        uint64_t v54 = v95;
        uint64_t v56 = v4;
        uint64_t v37 = v100;
        uint64_t v50 = v3;
        uint64_t v38 = v99;
        outlined copy of FMFindingMeasurement(v31, v32, v33, v34);
        uint64_t v19 = v45;
        uint64_t v20 = v46;
        uint64_t v21 = v47;
        uint64_t v22 = v48;
        uint64_t v23 = v49;
        uint64_t v13 = v52;
        uint64_t v24 = v54;
        uint64_t v28 = v38;
        uint64_t v3 = v50;
        uint64_t v29 = v37;
        uint64_t v4 = v56;
        uint64_t v27 = v58;
        uint64_t v26 = v36;
        uint64_t v5 = v60;
        char v30 = v35;
LABEL_26:
        uint64_t v62 = v41;
        uint64_t v63 = v42;
        uint64_t v64 = v13;
        uint64_t v65 = v43;
        uint64_t v66 = v44;
        uint64_t v67 = v3;
        uint64_t v68 = v4;
        uint64_t v69 = v5;
        uint64_t v70 = v39;
        uint64_t v71 = v7;
        uint64_t v72 = v8;
        uint64_t v73 = v9;
        char v74 = v10;
        uint64_t v75 = v19;
        uint64_t v76 = v20;
        uint64_t v77 = v12;
        uint64_t v78 = v21;
        uint64_t v79 = v22;
        uint64_t v80 = v23;
        uint64_t v81 = v24;
        uint64_t v82 = v25;
        uint64_t v83 = v26;
        uint64_t v84 = v27;
        uint64_t v85 = v28;
        uint64_t v86 = v29;
        char v87 = v30;
        outlined retain of FMFindingState((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
        outlined retain of FMFindingState(v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
        outlined release of (FMFindingDistance?, FMFindingDistance?)((uint64_t)&v62);
        goto LABEL_18;
      }
      char v40 = v102;
      uint64_t v116 = v41;
      char v117 = v42 & 1;
      uint64_t v118 = v52;
      uint64_t v119 = v43;
      uint64_t v120 = v44;
      char v121 = v3 & 1;
      uint64_t v122 = v4;
      __int16 v123 = v5 & 0x101;
      uint64_t v124 = v39;
      __int16 v125 = v7 & 0x101;
      char v126 = BYTE2(v7) & 1;
      uint64_t v127 = v8;
      uint64_t v128 = v9;
      char v129 = v10 & 1;
      uint64_t v62 = v89;
      LOBYTE(v63) = v90 & 1;
      uint64_t v64 = v91;
      uint64_t v65 = v92;
      uint64_t v66 = v93;
      LOBYTE(v67) = v94 & 1;
      uint64_t v68 = v95;
      LOWORD(v69) = v96 & 0x101;
      uint64_t v70 = v97;
      LOWORD(v71) = v98 & 0x101;
      BYTE2(v71) = BYTE2(v98) & 1;
      uint64_t v72 = v99;
      uint64_t v73 = v100;
      char v74 = v101 & 1;
      outlined retain of FMFindingState((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
      uint64_t v16 = v51;
      outlined retain of FMFindingState(v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
      if (specialized static FMFindingDistance.== infix(_:_:)((uint64_t)&v116, (uint64_t)&v62)) {
        goto LABEL_16;
      }
      outlined retain of FMFindingState((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
      uint64_t v17 = v51;
LABEL_17:
      outlined retain of FMFindingState(v17, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
LABEL_18:
      char v15 = 0;
      return v15 & 1;
  }
}

void outlined copy of FMFindingState(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if ((char *)a3 - 6 >= (char *)4) {
    outlined copy of FMFindingMeasurement(a1, a2, a3, a4);
  }
}

void outlined copy of FMFindingMeasurement(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if ((char *)a3 - 2 >= (char *)4) {
    outlined copy of FMFindingDistance?(a1, a2, a3, a4);
  }
}

void outlined copy of FMFindingDistance?(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a3 != (void *)1)
  {
    id v5 = a4;
    id v6 = a3;
  }
}

uint64_t outlined release of (FMFindingDistance?, FMFindingDistance?)(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 + 104);
  long long v2 = *(void **)(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v3 = *(void **)(a1 + 128);
  outlined consume of FMFindingDistance?(*(void *)a1, *(void *)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24));
  outlined consume of FMFindingDistance?(v6, v5, v2, v3);
  return a1;
}

void outlined consume of FMFindingDistance?(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a3 != (void *)1)
  {
  }
}

uint64_t outlined retain of FMFindingState(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v4 = *(_WORD *)(a1 + 96);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), v4);
  return a1;
}

void outlined consume of FMFindingState(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if ((char *)a3 - 6 >= (char *)4) {
    outlined consume of FMFindingMeasurement(a1, a2, a3, a4);
  }
}

void outlined consume of FMFindingMeasurement(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if ((char *)a3 - 2 >= (char *)4) {
    outlined consume of FMFindingDistance?(a1, a2, a3, a4);
  }
}

unint64_t specialized FMFindingState.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FMFindingState.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t specialized FMFindingState.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FMFindingState.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v29) = 0;
  switch(KeyedDecodingContainer.decode(_:forKey:)())
  {
    case 1:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v22 = 0;
      uint64_t v13 = 0;
      __int16 v14 = 0;
      uint64_t v15 = 6;
      break;
    case 2:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v22 = 0;
      uint64_t v13 = 0;
      __int16 v14 = 0;
      uint64_t v15 = 7;
      break;
    case 3:
      char v43 = 1;
      lazy protocol witness table accessor for type FMFindingMeasurement and conformance FMFindingMeasurement();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v21 = v29;
      uint64_t v15 = v31;
      uint64_t v20 = v30;
      uint64_t v19 = v32;
      uint64_t v27 = v34;
      uint64_t v28 = v33;
      uint64_t v25 = v36;
      uint64_t v26 = v35;
      uint64_t v23 = v38;
      uint64_t v24 = v37;
      uint64_t v13 = v40;
      uint64_t v22 = v39;
      int v42 = v41;
      char v43 = 2;
      lazy protocol witness table accessor for type FMFindingTrend and conformance FMFindingTrend();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      __int16 v14 = v42 | (v29 << 8);
      uint64_t v10 = v21;
      uint64_t v11 = v20;
      uint64_t v12 = v19;
      break;
    case 4:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v22 = 0;
      uint64_t v13 = 0;
      __int16 v14 = 0;
      uint64_t v15 = 8;
      break;
    case 5:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v22 = 0;
      uint64_t v13 = 0;
      __int16 v14 = 0;
      uint64_t v15 = 9;
      break;
    default:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x2273A30A4);
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v12;
  uint64_t v16 = v27;
  *(void *)(a2 + 32) = v28;
  *(void *)(a2 + 40) = v16;
  uint64_t v17 = v25;
  *(void *)(a2 + 48) = v26;
  *(void *)(a2 + 56) = v17;
  uint64_t v18 = v23;
  *(void *)(a2 + 64) = v24;
  *(void *)(a2 + 72) = v18;
  *(void *)(a2 + 80) = v22;
  *(void *)(a2 + 88) = v13;
  *(_WORD *)(a2 + 96) = v14;
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t lazy protocol witness table accessor for type FMFindingMeasurement and conformance FMFindingMeasurement()
{
  unint64_t result = lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FMFindingTrend and conformance FMFindingTrend()
{
  unint64_t result = lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend;
  if (!lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend;
  if (!lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend;
  if (!lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend;
  if (!lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FMFindingState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FMFindingState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2273A34ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for FMFindingState.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for FMFindingState.CodingKeys(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

void *type metadata accessor for FMFindingState.CodingKeys()
{
  return &unk_26DB4AA80;
}

void destroy for FMFindingDistance(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for FMFindingDistance(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  int v3 = *(void **)(a2 + 16);
  unsigned int v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  id v6 = v3;
  id v7 = v4;
  return a1;
}

uint64_t assignWithCopy for FMFindingDistance(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = *(void **)(a1 + 16);
  id v6 = (void *)a2[2];
  *(void *)(a1 + 16) = v6;
  id v7 = v6;

  int v8 = *(void **)(a1 + 24);
  uint64_t v9 = (void *)a2[3];
  *(void *)(a1 + 24) = v9;
  id v10 = v9;

  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 48) = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(unsigned char *)(a1 + 57) = *((unsigned char *)a2 + 57);
  *(void *)(a1 + 64) = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
  *(unsigned char *)(a1 + 74) = *((unsigned char *)a2 + 74);
  *(void *)(a1 + 80) = a2[10];
  uint64_t v11 = a2[11];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 88) = v11;
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for FMFindingDistance(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);

  uint64_t v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMFindingDistance(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 97)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FMFindingDistance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 97) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFindingDistance()
{
  return &type metadata for FMFindingDistance;
}

unint64_t FMFindingDistance.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x736944746E616C73;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x676E6972616562;
      break;
    case 2:
      unint64_t result = 0x4264696C61567369;
      break;
    case 3:
      unint64_t result = 0x616542564F466E69;
      break;
    case 4:
      unint64_t result = 0x564F466E497369;
      break;
    case 5:
      unint64_t result = 0x636165526E497369;
      break;
    case 6:
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x65766F62417369;
      break;
    case 8:
      unint64_t result = 0x776F6C65427369;
      break;
    case 10:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t FMFindingDistance.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x736944746E616C73;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x676E6972616562;
      break;
    case 2:
      unint64_t result = 0x4264696C61567369;
      break;
    case 3:
      unint64_t result = 0x616542564F466E69;
      break;
    case 4:
      unint64_t result = 0x564F466E497369;
      break;
    case 5:
      unint64_t result = 0x636165526E497369;
      break;
    case 6:
    case 9:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0x65766F62417369;
      break;
    case 8:
      unint64_t result = 0x776F6C65427369;
      break;
    case 10:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingDistance.CodingKeys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = FMFindingDistance.CodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == FMFindingDistance.CodingKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingDistance.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  FMFindingDistance.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FMFindingDistance.CodingKeys()
{
  FMFindingDistance.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingDistance.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  FMFindingDistance.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FMFindingDistance.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FMFindingDistance.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance FMFindingDistance.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = FMFindingDistance.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance FMFindingDistance.CodingKeys()
{
  return FMFindingDistance.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance FMFindingDistance.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FMFindingDistance.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance FMFindingDistance.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FMFindingDistance.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FMFindingDistance.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t FMFindingDistance.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FMFindingDistance.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  char v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of Double?(v3, (uint64_t)v12);
  outlined init with take of Double?((uint64_t)v12, (uint64_t)v11);
  v10[15] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  lazy protocol witness table accessor for type Double? and conformance <A> A?();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t FMFindingDistance.description.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = (void *)v1;
  *(_OWORD *)(v1 + 16) = xmmword_2273F4C70;
  double v3 = *(double *)v0;
  int v4 = *(unsigned __int8 *)(v0 + 8);
  uint64_t v5 = MEMORY[0x263F8D5B8];
  *(void *)(v1 + 56) = MEMORY[0x263F8D538];
  *(void *)(v1 + 64) = v5;
  if (v4) {
    double v3 = -1.0;
  }
  *(double *)(v1 + 32) = v3;
  if (*(unsigned char *)(v0 + 40))
  {
    uint64_t v6 = *(void *)(v0 + 32);
    uint64_t v7 = MEMORY[0x263F8D5B8];
    uint64_t v8 = MEMORY[0x263F8D538];
  }
  else
  {
    uint64_t v6 = -1;
    uint64_t v7 = MEMORY[0x263F8D750];
    uint64_t v8 = MEMORY[0x263F8D6C8];
  }
  *(void *)(v1 + 96) = v8;
  *(void *)(v1 + 104) = v7;
  *(void *)(v1 + 72) = v6;
  char v9 = *(unsigned char *)(v0 + 56);
  unint64_t v10 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v11 = 1702195828;
  if (v9) {
    uint64_t v12 = 1702195828;
  }
  else {
    uint64_t v12 = 0x65736C6166;
  }
  if (v9) {
    unint64_t v13 = 0xE400000000000000;
  }
  else {
    unint64_t v13 = 0xE500000000000000;
  }
  uint64_t v14 = MEMORY[0x263F8D310];
  v2[17] = MEMORY[0x263F8D310];
  v2[18] = v10;
  v2[14] = v12;
  v2[15] = v13;
  if (*(unsigned char *)(v0 + 57))
  {
    unint64_t v15 = 0xE400000000000000;
  }
  else
  {
    uint64_t v11 = 0x65736C6166;
    unint64_t v15 = 0xE500000000000000;
  }
  v2[22] = v14;
  v2[23] = v10;
  v2[19] = v11;
  v2[20] = v15;
  return String.init(format:_:)();
}

void FMFindingDistance.hash(into:)()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    uint64_t v2 = *(void **)(v0 + 16);
    if (v2) {
      goto LABEL_3;
    }
LABEL_9:
    Hasher._combine(_:)(0);
    int v4 = *(void **)(v0 + 24);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  Swift::UInt64 v6 = *(void *)v0;
  Hasher._combine(_:)(1u);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v6;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  uint64_t v2 = *(void **)(v0 + 16);
  if (!v2) {
    goto LABEL_9;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  id v3 = v2;
  NSObject.hash(into:)();

  int v4 = *(void **)(v1 + 24);
  if (v4)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    id v5 = v4;
    NSObject.hash(into:)();

    goto LABEL_11;
  }
LABEL_10:
  Hasher._combine(_:)(0);
LABEL_11:
  if ((*(void *)(v1 + 32) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = *(void *)(v1 + 32);
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(unsigned char *)(v1 + 40) & 1);
  if ((*(void *)(v1 + 48) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = *(void *)(v1 + 48);
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(*(unsigned char *)(v1 + 56) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v1 + 57) & 1);
  if ((*(void *)(v1 + 64) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = *(void *)(v1 + 64);
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(*(unsigned char *)(v1 + 72) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v1 + 73) & 1);
  Hasher._combine(_:)(*(unsigned char *)(v1 + 74) & 1);
  if ((*(void *)(v1 + 80) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v11 = *(void *)(v1 + 80);
  }
  else {
    Swift::UInt64 v11 = 0;
  }
  Hasher._combine(_:)(v11);
  if (*(unsigned char *)(v1 + 96) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v12 = *(void *)(v1 + 88);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingDistance(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  char v12 = *(unsigned char *)(a1 + 96);
  long long v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  long long v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 80);
  char v14 = *(unsigned char *)(a2 + 96);
  v13[4] = v8;
  v13[5] = v9;
  v13[2] = v6;
  v13[3] = v7;
  return specialized static FMFindingDistance.== infix(_:_:)((uint64_t)v11, (uint64_t)v13);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingDistance()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingDistance()
{
  return Hasher._finalize()();
}

__n128 protocol witness for Decodable.init(from:) in conformance FMFindingDistance@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized FMFindingDistance.init(from:)(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(unsigned char *)(a2 + 96) = v8;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FMFindingDistance(void *a1)
{
  return FMFindingDistance.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type FMFindingDistance and conformance FMFindingDistance()
{
  unint64_t result = lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance;
  if (!lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance;
  if (!lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance;
  if (!lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance);
  }
  return result;
}

BOOL specialized static FMFindingDistance.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  long long v5 = *(void **)(a1 + 16);
  long long v6 = *(void **)(a2 + 16);
  if (v5)
  {
    if (!v6) {
      return 0;
    }
    type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for PRTargetEstimate);
    id v7 = v6;
    id v8 = v5;
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  Swift::UInt64 v10 = *(void **)(a1 + 24);
  Swift::UInt64 v11 = *(void **)(a2 + 24);
  if (v10)
  {
    if (!v11) {
      return 0;
    }
    type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for PRPose);
    id v12 = v11;
    id v13 = v10;
    char v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) == 0) {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)
    || ((*(unsigned __int8 *)(a1 + 40) ^ *(unsigned __int8 *)(a2 + 40)) & 1) != 0
    || *(double *)(a1 + 48) != *(double *)(a2 + 48)
    || ((*(unsigned __int8 *)(a1 + 56) ^ *(unsigned __int8 *)(a2 + 56)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 57) ^ *(unsigned __int8 *)(a2 + 57)) & 1) != 0
    || *(double *)(a1 + 64) != *(double *)(a2 + 64)
    || ((*(unsigned __int8 *)(a1 + 72) ^ *(unsigned __int8 *)(a2 + 72)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 73) ^ *(unsigned __int8 *)(a2 + 73)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 74) ^ *(unsigned __int8 *)(a2 + 74)) & 1) != 0
    || *(double *)(a1 + 80) != *(double *)(a2 + 80))
  {
    return 0;
  }
  char v15 = *(unsigned char *)(a2 + 96);
  if ((*(unsigned char *)(a1 + 96) & 1) == 0)
  {
    if (*(void *)(a1 + 88) != *(void *)(a2 + 88)) {
      char v15 = 1;
    }
    return (v15 & 1) == 0;
  }
  return (*(unsigned char *)(a2 + 96) & 1) != 0;
}

unint64_t specialized FMFindingDistance.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FMFindingDistance.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return 11;
  }
  else {
    return v3;
  }
}

uint64_t specialized FMFindingDistance.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FMFindingDistance.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  id v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v40 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v10 = v9;
  char v39 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  char v38 = 2;
  char v13 = KeyedDecodingContainer.decode(_:forKey:)();
  char v37 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  char v36 = 4;
  int v29 = KeyedDecodingContainer.decode(_:forKey:)();
  char v35 = 5;
  int v28 = KeyedDecodingContainer.decode(_:forKey:)();
  char v34 = 6;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  char v33 = 7;
  int v27 = KeyedDecodingContainer.decode(_:forKey:)();
  char v32 = 8;
  int v26 = KeyedDecodingContainer.decode(_:forKey:)();
  char v31 = 9;
  int v25 = KeyedDecodingContainer.decode(_:forKey:)();
  char v30 = 10;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v19 = v18;
  int v24 = v13 & 1;
  v28 &= 1u;
  v29 &= 1u;
  v27 &= 1u;
  char v20 = v26 & 1;
  char v21 = v25 & 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v12;
  *(unsigned char *)(a2 + 40) = v24;
  *(void *)(a2 + 48) = v15;
  *(unsigned char *)(a2 + 56) = v29;
  *(unsigned char *)(a2 + 57) = v28;
  *(void *)(a2 + 64) = v17;
  *(unsigned char *)(a2 + 72) = v27;
  *(unsigned char *)(a2 + 73) = v20;
  *(unsigned char *)(a2 + 74) = v21;
  *(void *)(a2 + 80) = v19;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 96) = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of Double?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Double? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Double? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Double? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Double?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double? and conformance <A> A?);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMFindingDistance.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FMFindingDistance.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2273A4F80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

void *type metadata accessor for FMFindingDistance.CodingKeys()
{
  return &unk_26DB4ABC0;
}

void __swiftcall FLSimpleSpring.step(deltaTime:)(TVRemoteUI::FLSimpleSpring *__return_ptr retstr, Swift::Double deltaTime)
{
  double v5 = *v2;
  double v6 = v2[1];
  double v8 = v2[5];
  double v7 = v2[6];
  if (vabdd_f64(*v2, v8) <= v7)
  {
    double v12 = v2[7];
    double v11 = v2[8];
    double v10 = v2[3];
    double v9 = v2[4];
    if (fabs(v6) <= v12)
    {
      double v18 = v2[12];
      double v17 = v2[13];
      double v14 = v2[10];
      double v15 = v2[11];
      Swift::Double v19 = v2[9];
      Swift::Double v20 = v2[2];
      goto LABEL_16;
    }
  }
  else
  {
    double v10 = v2[3];
    double v9 = v2[4];
    double v11 = v2[8];
  }
  double v13 = v5 - v8;
  double v37 = v10;
  double v38 = v9;
  if (v10 == v11 && v9 == v2[9])
  {
    double v14 = v2[10];
    double v15 = v2[11];
    double v35 = v2[12];
    double v16 = v2[13];
  }
  else
  {
    double v14 = v9 * 0.5;
    double v15 = sqrt(v10);
    double v35 = sqrt(v15 * v15 - v14 * v14);
    double v16 = sqrt(v14 * v14 - v15 * v15);
  }
  double v36 = v16;
  double v21 = -v14;
  double v22 = exp(-(v14 * deltaTime));
  double v23 = v6 + v13 * v14;
  if (v14 >= v15)
  {
    if (v15 >= v14)
    {
      double v27 = v13 + v23 * deltaTime;
      double v29 = v22 * v23;
      double v28 = v22 * v21 * v27;
      double v10 = v37;
      double v9 = v38;
      double v17 = v36;
    }
    else
    {
      long double v30 = v36 * deltaTime;
      double v34 = v23 / v36;
      double v33 = cosh(v30);
      long double v31 = v30;
      double v17 = v36;
      long double v32 = sinh(v31);
      double v27 = v13 * v33 + v34 * v32;
      double v28 = v22 * (v17 * (v34 * v33) + v17 * (v13 * v32));
      double v29 = v22 * v21 * v27;
      double v10 = v37;
      double v9 = v38;
    }
    double v18 = v35;
  }
  else
  {
    double v24 = v35 * deltaTime;
    double v25 = v23 / v35;
    __double2 v26 = __sincos_stret(v24);
    double v27 = v13 * v26.__cosval + v25 * v26.__sinval;
    double v18 = v35;
    double v28 = v22 * (v18 * (v25 * v26.__cosval) - v18 * (v13 * v26.__sinval));
    double v29 = v22 * v21 * v27;
    double v10 = v37;
    double v9 = v38;
    double v17 = v36;
  }
  double v6 = v29 + v28;
  double v5 = v8 + v22 * v27;
  double v7 = 0.0;
  Swift::Double v20 = 1.0;
  double v12 = 0.0;
  double v11 = v10;
  Swift::Double v19 = v9;
LABEL_16:
  retstr->state.position = v5;
  retstr->state.velocitCGFloat y = v6;
  retstr->mass = v20;
  retstr->stiffness = v10;
  retstr->damping = v9;
  retstr->anchor = v8;
  retstr->stablePositionThreshold = v7;
  retstr->stableVelocityThreshold = v12;
  retstr->_previousStiffness = v11;
  retstr->_previousDamping = v19;
  retstr->_beta = v14;
  retstr->_omega0 = v15;
  retstr->_omega1 = v18;
  retstr->_omega2 = v17;
}

Swift::Bool __swiftcall FLCompoundSpring.isStable()()
{
  double v1 = v0[30];
  if (vabdd_f64(*v0, v1) > v0[44]) {
    return 0;
  }
  if (fabs(v0[1]) > v0[45]) {
    return 0;
  }
  double v3 = fabs(v0[31]);
  if (vabdd_f64(v1, v0[35]) > v0[36] || v3 > v0[37]) {
    return 0;
  }
  double v5 = fabs(v0[3]);
  if (vabdd_f64(v0[2], v0[7]) > v0[8] || v5 > v0[9]) {
    return 0;
  }
  if (vabdd_f64(v0[16], v0[21]) <= v0[22]) {
    return fabs(v0[17]) <= v0[23];
  }
  return 0;
}

uint64_t FLSpring.parameters.didset(double a1, double a2, double a3, double a4)
{
  double v5 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  double v6 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  double v7 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  double v8 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  if (v5 != a1 || v6 != a2 || v7 != a3 || v8 != a4)
  {
    uint64_t v12 = v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
    swift_beginAccess();
    if (v6 == 0.0)
    {
      *(double *)(v12 + 16) = v5;
      *(void *)(v12 + 24) = 0;
    }
    else
    {
      double v13 = 6.28318531 / v6 * (6.28318531 / v6);
      double v14 = sqrt(v13);
      *(double *)(v12 + 40) = v13;
      *(double *)(v12 + 48) = v14 + v14;
    }
    *(double *)(v12 + 56) = v5;
    if (v8 == 0.0)
    {
      *(double *)(v12 + 128) = v7;
      *(void *)(v12 + 136) = 0;
    }
    else
    {
      double v15 = 6.28318531 / v8 * (6.28318531 / v8);
      double v16 = sqrt(v15);
      *(double *)(v12 + 152) = v15;
      *(double *)(v12 + 160) = v16 + v16;
    }
    *(double *)(v12 + 168) = v7;
    return swift_endAccess();
  }
  return result;
}

Swift::Void __swiftcall FLSpring.resetImmediately(toValue:)(Swift::Double toValue)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  uint64_t v5 = v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
  swift_beginAccess();
  *(Swift::Double *)uint64_t v5 = toValue;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = xmmword_2273F4ED0;
  *(_OWORD *)(v5 + 40) = xmmword_2273F4EE0;
  *(void *)(v5 + 56) = v3;
  int64x2_t v6 = vdupq_n_s64(0x4341C37937E08000uLL);
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(int64x2_t *)(v5 + 80) = v6;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(void *)(v5 + 128) = v4;
  *(_OWORD *)(v5 + 136) = xmmword_2273F4ED0;
  *(_OWORD *)(v5 + 152) = xmmword_2273F4EE0;
  *(void *)(v5 + 168) = v4;
  *(void *)(v5 + 176) = 0;
  *(void *)(v5 + 184) = 0;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(int64x2_t *)(v5 + 192) = v6;
  *(Swift::Double *)(v5 + 240) = toValue;
  *(_OWORD *)(v5 + 248) = xmmword_2273F4ED0;
  *(void *)(v5 + 264) = 0x4063BD3CC9BE45DELL;
  *(void *)(v5 + 272) = 0x403921FB54442D18;
  *(Swift::Double *)(v5 + 280) = toValue;
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(int64x2_t *)(v5 + 304) = v6;
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
  *(void *)(v5 + 352) = v7;
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
  *(void *)(v5 + 360) = v8;
  double v9 = 6.28318531
     / *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
     * (6.28318531
      / *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
  double v10 = sqrt(v9);
  double v11 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v10 + v10);
  uint64_t v12 = v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
  *(void *)uint64_t v12 = 0;
  *(void *)(v12 + 8) = 0;
  *(void *)(v12 + 16) = 0x3FF0000000000000;
  *(double *)(v12 + 24) = v9;
  *(double *)(v12 + 32) = v11;
  *(void *)(v12 + 40) = 0;
  *(int64x2_t *)(v12 + 64) = v6;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(void *)(v12 + 48) = v7;
  *(void *)(v12 + 56) = v8;
  *(Swift::Double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = toValue;
  *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
}

Swift::Void __swiftcall FLSpring.step(_:)(Swift::Double a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
  swift_beginAccess();
  double v4 = *(double *)(v3 + 280);
  double v5 = v4 - *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget);
  *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = v4;
  *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = v5 / a1 * 0.25
                                                                          + *(double *)(v1
                                                                                      + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity)
                                                                          * 0.75;
  double v28 = *(double *)(v3 + 16);
  double v6 = *(double *)(v3 + 128);
  Swift::Double v8 = *(double *)v3;
  uint64_t v7 = *(void *)(v3 + 8);
  uint64_t v9 = *(void *)(v3 + 272);
  long long v10 = *(_OWORD *)(v3 + 256);
  long long v64 = *(_OWORD *)(v3 + 240);
  uint64_t v29 = v64;
  long long v65 = v10;
  uint64_t v66 = v9;
  double v67 = v4;
  long long v11 = *(_OWORD *)(v3 + 304);
  long long v68 = *(_OWORD *)(v3 + 288);
  long long v69 = v11;
  long long v12 = *(_OWORD *)(v3 + 336);
  long long v70 = *(_OWORD *)(v3 + 320);
  long long v71 = v12;
  uint64_t v13 = *(void *)(v3 + 352);
  uint64_t v14 = *(void *)(v3 + 360);
  FLSimpleSpring.step(deltaTime:)(&v48, a1);
  long long v46 = *(_OWORD *)&v48.mass;
  TVRemoteUI::FLSimpleSpringState state = v48.state;
  long long v44 = *(_OWORD *)&v48.stablePositionThreshold;
  long long v45 = *(_OWORD *)&v48.damping;
  long long v42 = *(_OWORD *)&v48._beta;
  long long v43 = *(_OWORD *)&v48._previousStiffness;
  omega2 = v48._omega2;
  omega1 = v48._omega1;
  FLSimpleSpring.step(deltaTime:)(&v49, a1);
  long long v37 = *(_OWORD *)&v49.mass;
  TVRemoteUI::FLSimpleSpringState v38 = v49.state;
  long long v35 = *(_OWORD *)&v49.stablePositionThreshold;
  long long v36 = *(_OWORD *)&v49.damping;
  long long v33 = *(_OWORD *)&v49._beta;
  long long v34 = *(_OWORD *)&v49._previousStiffness;
  Swift::Double v31 = v49._omega2;
  Swift::Double v32 = v49._omega1;
  FLSimpleSpring.step(deltaTime:)(&v50, a1);
  long long v26 = *(_OWORD *)&v50.mass;
  TVRemoteUI::FLSimpleSpringState v27 = v50.state;
  long long v24 = *(_OWORD *)&v50.stablePositionThreshold;
  long long v25 = *(_OWORD *)&v50.damping;
  long long v39 = *(_OWORD *)&v50._previousStiffness;
  long long v30 = *(_OWORD *)&v50._beta;
  Swift::Double v15 = v50._omega1;
  Swift::Double v16 = v50._omega2;
  double v17 = sqrt(6.28318531 / v6 * (6.28318531 / v6));
  Swift::Double v53 = v8;
  uint64_t v54 = v7;
  uint64_t v55 = 0x3FF0000000000000;
  double v56 = 6.28318531 / v6 * (6.28318531 / v6);
  double v57 = v28 * (v17 + v17);
  uint64_t v58 = v29;
  uint64_t v59 = v13;
  uint64_t v60 = v14;
  int64x2_t v61 = vdupq_n_s64(0x4341C37937E08000uLL);
  long long v62 = 0u;
  long long v63 = 0u;
  FLSimpleSpring.step(deltaTime:)(&v51, a1);
  Swift::Double position = v51.state.position;
  velocitCGFloat y = v51.state.velocity;
  swift_beginAccess();
  *(Swift::Double *)uint64_t v3 = position;
  *(Swift::Double *)(v3 + 8) = velocity;
  *(TVRemoteUI::FLSimpleSpringState *)(v3 + 16) = state;
  *(_OWORD *)(v3 + 32) = v46;
  *(_OWORD *)(v3 + 48) = v45;
  *(_OWORD *)(v3 + 64) = v44;
  *(_OWORD *)(v3 + 80) = v43;
  *(_OWORD *)(v3 + 96) = v42;
  *(Swift::Double *)(v3 + 112) = omega1;
  *(Swift::Double *)(v3 + 120) = omega2;
  *(TVRemoteUI::FLSimpleSpringState *)(v3 + 128) = v38;
  *(_OWORD *)(v3 + 144) = v37;
  *(_OWORD *)(v3 + 160) = v36;
  *(_OWORD *)(v3 + 176) = v35;
  *(_OWORD *)(v3 + 192) = v34;
  *(_OWORD *)(v3 + 208) = v33;
  *(Swift::Double *)(v3 + 224) = v32;
  *(Swift::Double *)(v3 + 232) = v31;
  *(TVRemoteUI::FLSimpleSpringState *)(v3 + 240) = v27;
  *(_OWORD *)(v3 + 256) = v26;
  *(_OWORD *)(v3 + 272) = v25;
  *(_OWORD *)(v3 + 288) = v24;
  *(Swift::Double *)(v3 + 336) = v15;
  *(Swift::Double *)(v3 + 344) = v16;
  *(void *)(v3 + 352) = v13;
  *(void *)(v3 + 360) = v14;
  uint64_t v20 = v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
  *(_OWORD *)(v3 + 304) = v39;
  *(_OWORD *)(v3 + 320) = v30;
  FLSimpleSpring.step(deltaTime:)(&v52, a1);
  long long v21 = *(_OWORD *)&v52._beta;
  *(_OWORD *)(v20 + 64) = *(_OWORD *)&v52._previousStiffness;
  *(_OWORD *)(v20 + 80) = v21;
  *(_OWORD *)(v20 + 96) = *(_OWORD *)&v52._omega1;
  long long v22 = *(_OWORD *)&v52.mass;
  *(TVRemoteUI::FLSimpleSpringState *)uint64_t v20 = v52.state;
  *(_OWORD *)(v20 + 16) = v22;
  long long v23 = *(_OWORD *)&v52.stablePositionThreshold;
  *(_OWORD *)(v20 + 32) = *(_OWORD *)&v52.damping;
  *(_OWORD *)(v20 + 48) = v23;
}

id FLSpring.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FLSpring();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FLSpring()
{
  return self;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for FLSimpleSpring(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FLSimpleSpring(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 112) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FLSimpleSpring()
{
  return &type metadata for FLSimpleSpring;
}

void *__swift_memcpy368_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x170uLL);
}

uint64_t getEnumTagSinglePayload for FLCompoundSpring(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 368)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FLCompoundSpring(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 360) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 368) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FLCompoundSpring()
{
  return &type metadata for FLCompoundSpring;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for FLSpringParameters(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FLSpringParameters(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FLSpringParameters()
{
  return &type metadata for FLSpringParameters;
}

ValueMetadata *type metadata accessor for FLSimpleSpringState()
{
  return &type metadata for FLSimpleSpringState;
}

id FMR1HapticPattern.__allocating_init(events:parameters:)()
{
  v8[1] = *(id *)MEMORY[0x263EF8340];
  id v1 = objc_allocWithZone(v0);
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticEvent);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticDynamicParameter);
  Class v3 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8[0] = 0;
  id v4 = objc_msgSend(v1, sel_initWithEvents_parameters_error_, isa, v3, v8);

  if (v4)
  {
    id v5 = v8[0];
  }
  else
  {
    id v6 = v8[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

id FMR1HapticPattern.init(events:parameters:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, SEL *a5)
{
  v16[1] = *(id *)MEMORY[0x263EF8340];
  Swift::Double v8 = &v5[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_name];
  *Swift::Double v8 = 0;
  v8[1] = 0;
  v5[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_isTap] = 2;
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticEvent);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for SKConstraint(0, a3);
  Class v10 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v16[0] = 0;
  v15.receiver = v5;
  v15.super_class = (Class)type metadata accessor for FMR1HapticPattern();
  id v11 = objc_msgSendSuper2(&v15, *a5, isa, v10, v16);

  if (v11)
  {
    id v12 = v16[0];
  }
  else
  {
    id v13 = v16[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v11;
}

id @objc FMR1HapticPattern.init(events:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, SEL *a8)
{
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticEvent);
  uint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for SKConstraint(0, a6);
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  return FMR1HapticPattern.init(events:parameters:)(v11, v12, a6, a7, a8);
}

id FMR1HapticPattern.__allocating_init(dictionary:)()
{
  v7[1] = *(id *)MEMORY[0x263EF8340];
  id v1 = objc_allocWithZone(v0);
  type metadata accessor for CHHapticPatternKey(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, type metadata accessor for CHHapticPatternKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7[0] = 0;
  id v3 = objc_msgSend(v1, sel_initWithDictionary_error_, isa, v7);

  if (v3)
  {
    id v4 = v7[0];
  }
  else
  {
    id v5 = v7[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v3;
}

id FMR1HapticPattern.init(dictionary:)()
{
  v8[1] = *(id *)MEMORY[0x263EF8340];
  id v1 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_name];
  *id v1 = 0;
  v1[1] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_isTap] = 2;
  type metadata accessor for CHHapticPatternKey(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, type metadata accessor for CHHapticPatternKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8[0] = 0;
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for FMR1HapticPattern();
  id v3 = objc_msgSendSuper2(&v7, sel_initWithDictionary_error_, isa, v8);

  if (v3)
  {
    id v4 = v8[0];
  }
  else
  {
    id v5 = v8[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v3;
}

id FMR1HapticPattern.init(contentsOf:)(uint64_t a1)
{
  long long v2 = v1;
  v17[1] = *(id *)MEMORY[0x263EF8340];
  id v4 = &v2[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_name];
  *id v4 = 0;
  v4[1] = 0;
  id v5 = (NSURL *)OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_isTap;
  v2[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_isTap] = 2;
  URL._bridgeToObjectiveC()(v5);
  objc_super v7 = v6;
  v17[0] = 0;
  v16.receiver = v2;
  v16.super_class = (Class)type metadata accessor for FMR1HapticPattern();
  id v8 = objc_msgSendSuper2(&v16, sel_initWithContentsOfURL_error_, v7, v17);

  id v9 = v17[0];
  if (v8)
  {
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    id v12 = v9;
    v11(a1, v10);
  }
  else
  {
    id v13 = v17[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
  }
  return v8;
}

id FMR1HapticPattern.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMR1HapticPattern();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMR1HapticPattern()
{
  return self;
}

NSObject *FMR1HapticsController.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticCapability;
  objc_super v2 = self;
  id v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_capabilitiesForHardware);
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink] = 0;
  id v4 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_lastRenderTime];
  *(void *)id v4 = 0;
  v4[8] = 1;
  id v5 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticLastPlayTimestamp];
  *(void *)id v5 = 0;
  v5[8] = 1;
  id v6 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticNextPlayDelay];
  *(void *)id v6 = 0;
  v6[8] = 1;
  objc_super v7 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod];
  *(void *)objc_super v7 = 0;
  v7[8] = 1;
  id v8 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext];
  *(_OWORD *)id v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPattern] = 0;
  id v9 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPatternIntensity];
  *(_DWORD *)id v9 = 0;
  v9[4] = 1;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap1HapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap2HapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap3HapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap4HapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap5HapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_connectedHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_buildHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_scatterHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadOffHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_armsReachHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_armsReachOffHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_preNearbyHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelIncreaseHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelDecreaseHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_farNearHapticPattern] = 0;
  uint64_t v10 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticLastPlayTimestamp];
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer] = 0;
  uint64_t v11 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticFactor];
  *(_DWORD *)uint64_t v11 = 0;
  v11[4] = 1;
  uint64_t v12 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticRampingFactorSpring;
  *(void *)&v3[v12] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0x3FF0000000000000, 0, 0, 1, 0, 1);
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem] = 0;
  v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_setup] = 0;
  v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_restartContinuousHapticWorkItem] = 0;
  v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_enablePlayingAheadHaptic] = 0;
  v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem] = 0;
  v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hasPlayedArmsReachHaptic] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticFactorLogCounter] = 0;
  id v13 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_lastLoggedContinuousHapticFactor];
  *(_DWORD *)id v13 = 0;
  v13[4] = 1;
  uint64_t v14 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;

  v26.receiver = v3;
  v26.super_class = (Class)type metadata accessor for FMR1HapticsController();
  id v15 = objc_msgSendSuper2(&v26, sel_init);
  uint64_t v16 = one-time initialization token for findingExperience;
  id v17 = v15;
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.findingExperience);
  Swift::Double v19 = v17;
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    long long v22 = (uint8_t *)swift_slowAlloc();
    long long v23 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v22 = 138412290;
    long long v24 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v23 = v19;

    _os_log_impl(&dword_227326000, v20, v21, "🧭 FMR1HaptiCtrl%@: init", v22, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v23, -1, -1);
    MEMORY[0x22A6785E0](v22, -1, -1);
  }
  else
  {

    uint64_t v20 = v19;
  }

  return v19;
}

id FMR1HapticsController.__deallocating_deinit()
{
  if (one-time initialization token for findingExperience != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.findingExperience);
  id v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v13 = v6;
    *(_DWORD *)id v5 = 136315138;
    id v7 = objc_msgSend(v2, sel_description);
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227326000, v3, v4, "🧭 FMR1HaptiCtrl%s: deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v6, -1, -1);
    MEMORY[0x22A6785E0](v5, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = (objc_class *)type metadata accessor for FMR1HapticsController();
  v14.receiver = v2;
  v14.super_class = v11;
  return objc_msgSendSuper2(&v14, sel_dealloc);
}

uint64_t FMR1HapticsController.description.getter()
{
  uint64_t v0 = _Pointer.debugDescription.getter();
  uint64_t v2 = specialized BidirectionalCollection.suffix(_:)(6, v0, v1);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = MEMORY[0x22A677190](v2, v4, v6, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 30768;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  uint64_t v12 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v12;
}

id FMR1HapticsController.loadHapticPattern(named:isTap:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  v78[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMR1HapticsController();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  objc_super v14 = self;
  uint64_t v15 = ObjCClassFromMetadata;
  unint64_t v16 = a2;
  id v17 = objc_msgSend(v14, sel_bundleForClass_, v15);
  uint64_t v76 = a1;
  uint64_t v18 = (void *)MEMORY[0x22A677130](a1, a2);
  Swift::Double v19 = (void *)MEMORY[0x22A677130](1885431905, 0xE400000000000000);
  id v20 = [v17 pathForResource:v18 ofType:v19];

  if (!v20) {
    goto LABEL_11;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = Data.init(contentsOf:options:)();
  unint64_t v23 = v22;
  uint64_t v74 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  long long v24 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v77 = 0;
  id v26 = objc_msgSend(v24, sel_JSONObjectWithData_options_error_, isa, 0, &v77);

  id v27 = v77;
  if (!v26)
  {
    unsigned __int8 v41 = v27;
    long long v42 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_10;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CHHapticPatternKey : Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    outlined consume of Data._Representation(v21, v23);
    unint64_t v16 = v74;
LABEL_11:
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.findingExperience);
    swift_bridgeObjectRetain_n();
    id v44 = v4;
    long long v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      TVRemoteUI::FLSimpleSpring v48 = (void *)swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      id v77 = v44;
      v78[0] = v74;
      *(_DWORD *)uint64_t v47 = 138412546;
      uint64_t v75 = v17;
      id v49 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *TVRemoteUI::FLSimpleSpring v48 = v44;

      *(_WORD *)(v47 + 12) = 2080;
      swift_bridgeObjectRetain();
      id v77 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v16, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_227326000, v45, v46, "🧭 FMR1HaptiCtrl%@: unable to load '%s' haptic pattern", (uint8_t *)v47, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v48, -1, -1);
      uint64_t v50 = v74;
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v50, -1, -1);
      MEMORY[0x22A6785E0](v47, -1, -1);

      return 0;
    }

    swift_bridgeObjectRelease_n();
LABEL_16:

    return 0;
  }
  type metadata accessor for FMR1HapticPattern();
  id v28 = FMR1HapticPattern.__allocating_init(dictionary:)();
  id v51 = v28;
  if (!v28)
  {
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.findingExperience);
    unint64_t v30 = v74;
    swift_bridgeObjectRetain_n();
    id v31 = v4;
    Swift::Double v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    int v34 = v33;
    uint64_t v75 = v32;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v35 = swift_slowAlloc();
      int v72 = v34;
      uint64_t v36 = v35;
      long long v71 = (void *)swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      id v77 = v31;
      v78[0] = v73;
      *(_DWORD *)uint64_t v36 = 138412546;
      id v37 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      TVRemoteUI::FLSimpleSpringState v38 = v71;
      *long long v71 = v31;

      *(_WORD *)(v36 + 12) = 2080;
      swift_bridgeObjectRetain();
      id v77 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v30, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      long long v39 = v75;
      _os_log_impl(&dword_227326000, v75, (os_log_type_t)v72, "🧭 FMR1HaptiCtrl%@: unable to create '%s' haptic pattern", (uint8_t *)v36, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v38, -1, -1);
      uint64_t v40 = v73;
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v40, -1, -1);
      MEMORY[0x22A6785E0](v36, -1, -1);
      outlined consume of Data._Representation(v21, v23);
    }
    else
    {
      outlined consume of Data._Representation(v21, v23);

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_16;
  }
  uint64_t v75 = v17;
  Swift::Double v53 = v28;
  unint64_t v54 = v74;
  swift_bridgeObjectRetain();
  unint64_t v55 = specialized Collection.dropFirst(_:)(4, v76, v54);
  swift_bridgeObjectRelease();
  uint64_t v56 = Substring.index(_:offsetBy:limitedBy:)();
  if (v57) {
    unint64_t v58 = v55;
  }
  else {
    unint64_t v58 = v56;
  }
  if (v58 >> 14 < v55 >> 14) {
    __break(1u);
  }
  uint64_t v59 = Substring.subscript.getter();
  uint64_t v61 = v60;
  uint64_t v63 = v62;
  uint64_t v65 = v64;
  swift_bridgeObjectRelease();
  uint64_t v66 = MEMORY[0x22A677190](v59, v61, v63, v65);
  uint64_t v68 = v67;
  swift_bridgeObjectRelease();
  long long v69 = (uint64_t *)&v53[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_name];
  *long long v69 = v66;
  v69[1] = v68;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v21, v23);

  v53[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_isTap] = a3 & 1;
  return v51;
}

Swift::Void __swiftcall FMR1HapticsController.setUpHaptics()()
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  if (v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_setup]) {
    return;
  }
  v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_setup] = 1;
  if (objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticCapability], sel_supportsHaptics))
  {
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.findingExperience);
    uint64_t v2 = v0;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138412290;
      unint64_t aBlock = v2;
      uint64_t v7 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v6 = v2;

      _os_log_impl(&dword_227326000, v3, v4, "🧭 FMR1HaptiCtrl%@: setting up haptic engine", v5, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v6, -1, -1);
      MEMORY[0x22A6785E0](v5, -1, -1);
    }
    else
    {
    }
    id v14 = objc_msgSend(self, sel_auxiliarySession);
    uint64_t v15 = *MEMORY[0x263EF9048];
    unint64_t aBlock = 0;
    if (objc_msgSend(v14, sel_setCategory_error_, v15, &aBlock))
    {
      unint64_t v16 = aBlock;
    }
    else
    {
      id v17 = aBlock;
      uint64_t v18 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CHHapticEngineOptionKey, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_2273F4F80;
    id v20 = (void *)*MEMORY[0x263F004E8];
    uint64_t v21 = MEMORY[0x263F8D310];
    *(void *)(inited + 32) = *MEMORY[0x263F004E8];
    *(void *)(inited + 40) = 0x746C7561666544;
    *(void *)(inited + 48) = 0xE700000000000000;
    unint64_t v22 = (void *)*MEMORY[0x263F004E0];
    *(void *)(inited + 64) = v21;
    *(void *)(inited + 72) = v22;
    unint64_t v23 = (void *)*MEMORY[0x263F00570];
    type metadata accessor for CHHapticPowerUsage(0);
    *(void *)(inited + 104) = v24;
    *(void *)(inited + 80) = v23;
    id v25 = v20;
    id v26 = v22;
    id v27 = v23;
    unint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    id v29 = v14;
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v28);
    swift_bridgeObjectRelease();
    id v30 = objc_allocWithZone(MEMORY[0x263F00588]);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t aBlock = 0;
    id v32 = objc_msgSend(v30, sel_initWithAudioSession_sessionIsShared_options_error_, v29, 0, isa, &aBlock);

    os_log_type_t v33 = aBlock;
    if (v32)
    {

      uint64_t v34 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine;
      uint64_t v35 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
      *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine] = v32;

      uint64_t v36 = *(void **)&v2[v34];
      if (v36)
      {
        uint64_t v37 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v108 = partial apply for closure #1 in FMR1HapticsController.setUpHaptics();
        uint64_t v109 = v37;
        unint64_t aBlock = (char *)MEMORY[0x263EF8330];
        uint64_t v105 = 1107296256;
        uint64_t v106 = thunk for @escaping @callee_guaranteed () -> ();
        uint64_t v107 = &block_descriptor_179;
        TVRemoteUI::FLSimpleSpringState v38 = _Block_copy(&aBlock);
        id v39 = v36;
        swift_release();
        objc_msgSend(v39, sel_setResetHandler_, v38);
        _Block_release(v38);
        uint64_t v40 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v108 = partial apply for closure #2 in FMR1HapticsController.setUpHaptics();
        uint64_t v109 = v40;
        unint64_t aBlock = (char *)MEMORY[0x263EF8330];
        uint64_t v105 = 1107296256;
        uint64_t v106 = thunk for @escaping @callee_guaranteed (@unowned CHHapticEngineStoppedReason) -> ();
        uint64_t v107 = &block_descriptor_183;
        unsigned __int8 v41 = _Block_copy(&aBlock);
        swift_release();
        objc_msgSend(v39, sel_setStoppedHandler_, v41);
        _Block_release(v41);
        objc_msgSend(v39, sel_setPlaysHapticsOnly_, 0);
        objc_msgSend(v39, sel_setIsMutedForAudio_, 0);
        objc_msgSend(v39, sel_setFollowAudioRoute_, 0);
        objc_msgSend(v39, sel_startWithCompletionHandler_, 0);
        long long v42 = v2;
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v43, v44))
        {
          long long v45 = (uint8_t *)swift_slowAlloc();
          os_log_t log = (os_log_t)swift_slowAlloc();
          *(_DWORD *)long long v45 = 138412290;
          unint64_t aBlock = v42;
          os_log_type_t v46 = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          log->Class isa = (Class)v42;

          _os_log_impl(&dword_227326000, v43, v44, "🧭 FMR1HaptiCtrl%@: started haptic engine", v45, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x22A6785E0](log, -1, -1);
          MEMORY[0x22A6785E0](v45, -1, -1);

          goto LABEL_27;
        }
      }
      goto LABEL_27;
    }
    uint64_t v47 = v33;
    TVRemoteUI::FLSimpleSpring v48 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v49 = v2;
    id v50 = v48;
    id v51 = v49;
    id v52 = v48;
    Swift::Double v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = swift_slowAlloc();
      uint64_t v56 = (void *)swift_slowAlloc();
      double v103 = (char *)swift_slowAlloc();
      unint64_t aBlock = v103;
      *(_DWORD *)uint64_t v55 = 138412546;
      char v57 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v56 = v51;

      *(_WORD *)(v55 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v58 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_227326000, v53, v54, "🧭 FMR1HaptiCtrl%@: failed creating haptic engine: %s", (uint8_t *)v55, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v56, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v103, -1, -1);
      MEMORY[0x22A6785E0](v55, -1, -1);
    }
    else
    {
    }
LABEL_27:
    id v60 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000011, 0x80000002273FB8E0, 1);
    uint64_t v61 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap1HapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap1HapticPattern] = v60;

    id v62 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000011, 0x80000002273FB900, 1);
    uint64_t v63 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap2HapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap2HapticPattern] = v62;

    id v64 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000013, 0x80000002273FB920, 1);
    uint64_t v65 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap3HapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap3HapticPattern] = v64;

    id v66 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000012, 0x80000002273FB940, 1);
    uint64_t v67 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap4HapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap4HapticPattern] = v66;

    id v68 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000012, 0x80000002273FB960, 1);
    long long v69 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap5HapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap5HapticPattern] = v68;

    id v70 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000012, 0x80000002273FB980, 0);
    long long v71 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_connectedHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_connectedHapticPattern] = v70;

    id v72 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000014, 0x80000002273FB9A0, 0);
    uint64_t v73 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_buildHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_buildHapticPattern] = v72;

    id v74 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000016, 0x80000002273FB9C0, 0);
    uint64_t v75 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_scatterHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_scatterHapticPattern] = v74;

    id v76 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0x6165684131524D46, 0xEE00393833422D64, 1);
    id v77 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadHapticPattern] = v76;

    id v78 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000012, 0x80000002273FB9E0, 0);
    uint64_t v79 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadOffHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadOffHapticPattern] = v78;

    id v80 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000012, 0x80000002273FBA00, 0);
    uint64_t v81 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_armsReachHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_armsReachHapticPattern] = v80;

    id v82 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000016, 0x80000002273FBA20, 0);
    uint64_t v83 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_armsReachOffHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_armsReachOffHapticPattern] = v82;

    id v84 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000012, 0x80000002273FBA40, 0);
    uint64_t v85 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_preNearbyHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_preNearbyHapticPattern] = v84;

    id v86 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0x7261654E31524D46, 0xEF393833422D7962, 0);
    char v87 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticPattern] = v86;

    id v88 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0x462D495353524D46, 0xEF7261654E2D7261, 0);
    uint64_t v89 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_farNearHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_farNearHapticPattern] = v88;

    id v90 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000015, 0x80000002273FBA60, 0);
    uint64_t v91 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelIncreaseHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelIncreaseHapticPattern] = v90;

    id v92 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000015, 0x80000002273FBA80, 0);
    uint64_t v93 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelDecreaseHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelDecreaseHapticPattern] = v92;

    id v94 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v2, sel_hapticDisplayLinkUpdateWithDisplaylink_);
    uint64_t v95 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink;
    uint64_t v96 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink] = v94;

    uint64_t v97 = *(void **)&v2[v95];
    if (v97)
    {
      uint64_t v98 = self;
      id v99 = v97;
      id v100 = objc_msgSend(v98, sel_currentRunLoop);
      objc_msgSend(v99, sel_addToRunLoop_forMode_, v100, *MEMORY[0x263EFF588]);
    }
    FMR1HapticsController.setUpContinuousHapticPlayer()();
    return;
  }
  if (one-time initialization token for findingExperience != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.findingExperience);
  char v102 = v0;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    unint64_t aBlock = v102;
    uint64_t v13 = v102;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v102;

    _os_log_impl(&dword_227326000, v9, v10, "🧭 FMR1HaptiCtrl%@: unsupported haptic", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v12, -1, -1);
    MEMORY[0x22A6785E0](v11, -1, -1);
  }
  else
  {
  }
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CHHapticEngineOptionKey, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of Any?(v6, (uint64_t)&v13, &demangling cache variable for type metadata for (CHHapticEngineOptionKey, Any));
    uint64_t v7 = v13;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    id v17 = *(void **)(*(void *)(a1 + 48) + 8 * v12);
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v39 + 8);
    *(void *)&v39[0] = v17;
    v37[0] = v39[0];
    v37[1] = v39[1];
    uint64_t v38 = v40;
    *(void *)&v36[0] = v17;
    type metadata accessor for CHHapticEngineOptionKey(0);
    id v18 = v17;
    swift_dynamicCast();
    outlined init with take of Any((_OWORD *)((char *)v37 + 8), v31);
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    outlined init with take of Any(v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [CHHapticEngineOptionKey : Any].Iterator._Variant();
    return v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void closure #1 in FMR1HapticsController.setUpHaptics()(uint64_t a1)
{
  v28[4] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x22A6786A0](v1);
  if (!v2) {
    return;
  }
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine);
  if (!v4) {
    goto LABEL_5;
  }
  v28[0] = 0;
  if (objc_msgSend(v4, sel_startAndReturnError_, v28))
  {
    id v5 = v28[0];
LABEL_5:
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.findingExperience);
    id v7 = v3;
    int64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      unint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412290;
      v28[0] = v7;
      id v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v11 = v3;

      _os_log_impl(&dword_227326000, v8, v9, "🧭 FMR1HaptiCtrl%@: restarted haptic engine", v10, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v11, -1, -1);
      MEMORY[0x22A6785E0](v10, -1, -1);
    }
    else
    {
    }
    return;
  }
  id v13 = v28[0];
  unint64_t v14 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  if (one-time initialization token for findingExperience != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.findingExperience);
  id v16 = v3;
  id v17 = v14;
  id v18 = v16;
  id v19 = v14;
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    unint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    v28[0] = v27;
    *(_DWORD *)uint64_t v22 = 138412546;
    id v24 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v23 = v3;

    *(_WORD *)(v22 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v25 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_227326000, v20, v21, "🧭 FMR1HaptiCtrl%@: failed restarting haptic engine: %s", (uint8_t *)v22, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v23, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v27, -1, -1);
    MEMORY[0x22A6785E0](v22, -1, -1);
  }
  else
  {
  }
}

void closure #2 in FMR1HapticsController.setUpHaptics()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x22A6786A0](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.findingExperience);
    uint64_t v6 = v4;
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412546;
      uint64_t v6 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v4;

      *(_WORD *)(v9 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_227326000, v7, v8, "🧭 FMR1HaptiCtrl%@: stopped haptic engine (%ld)", (uint8_t *)v9, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v10, -1, -1);
      MEMORY[0x22A6785E0](v9, -1, -1);
    }
    else
    {

      id v7 = v6;
    }
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned CHHapticEngineStoppedReason) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

Swift::Void __swiftcall FMR1HapticsController.tearDownHaptics()()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_setup;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_setup) == 1)
  {
    FMR1HapticsController.tearDownContinuousHapticPlayer()();
    uint64_t v2 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink;
    uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink);
    if (v3)
    {
      uint64_t v4 = self;
      id v5 = v3;
      id v6 = objc_msgSend(v4, sel_currentRunLoop);
      objc_msgSend(v5, sel_removeFromRunLoop_forMode_, v6, *MEMORY[0x263EFF588]);

      id v7 = *(void **)(v0 + v2);
    }
    else
    {
      id v7 = 0;
    }
    objc_msgSend(v7, sel_invalidate);
    os_log_type_t v8 = *(void **)(v0 + v2);
    *(void *)(v0 + v2) = 0;

    uint64_t v9 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine;
    uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine);
    if (v10)
    {
      objc_msgSend(v10, sel_stopWithCompletionHandler_, 0);
      unint64_t v11 = *(void **)(v0 + v9);
    }
    else
    {
      unint64_t v11 = 0;
    }
    *(void *)(v0 + v9) = 0;

    *(unsigned char *)(v0 + v1) = 0;
  }
}

void FMR1HapticsController.setUpContinuousHapticPlayer()()
{
  v55[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = *MEMORY[0x263F00508];
    id v4 = objc_allocWithZone(MEMORY[0x263F00598]);
    id v5 = v1;
    LODWORD(v6) = 0.5;
    id v7 = objc_msgSend(v4, sel_initWithParameterID_value_, v3, v6);
    uint64_t v8 = *MEMORY[0x263F00510];
    id v9 = objc_allocWithZone(MEMORY[0x263F00598]);
    LODWORD(v10) = 0.5;
    id v11 = objc_msgSend(v9, sel_initWithParameterID_value_, v8, v10);
    id v12 = (void *)*MEMORY[0x263F00520];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_2273F4480;
    *(void *)(v13 + 32) = v7;
    *(void *)(v13 + 40) = v11;
    specialized Array._endMutation()();
    id v14 = objc_allocWithZone(MEMORY[0x263F00590]);
    type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticEventParameter);
    id v15 = v12;
    id v54 = v7;
    id v16 = v11;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v18 = objc_msgSend(v14, sel_initWithEventType_parameters_relativeTime_duration_, v15, isa, 0.0, 100.0);

    type metadata accessor for FMR1HapticPattern();
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_2273F4460;
    *(void *)(v19 + 32) = v18;
    v55[0] = (id)v19;
    specialized Array._endMutation()();
    id v20 = v18;
    uint64_t v34 = (char *)FMR1HapticPattern.__allocating_init(events:parameters:)();
    *(_OWORD *)&v34[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_name] = xmmword_2273F4F90;
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPattern];
    *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPattern] = v34;
    uint64_t v36 = v34;

    v55[0] = 0;
    id v37 = objc_msgSend(v5, sel_createPlayerWithPattern_error_, v36, v55);
    id v38 = v55[0];
    if (v37)
    {
      *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer] = v37;
      id v39 = v38;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (one-time initialization token for findingExperience != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.findingExperience);
      unsigned __int8 v41 = v2;
      long long v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v43))
      {
        id v50 = v36;
        os_log_type_t v44 = (uint8_t *)swift_slowAlloc();
        long long v45 = (void *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v44 = 138412290;
        v55[0] = v41;
        id v52 = v20;
        os_log_type_t v46 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *long long v45 = v41;

        _os_log_impl(&dword_227326000, v42, v43, "🧭 FMR1HaptiCtrl%@: created continuous haptic player", v44, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x22A6785E0](v45, -1, -1);
        MEMORY[0x22A6785E0](v44, -1, -1);

        swift_unknownObjectRelease();
        long long v33 = v5;
      }
      else
      {

        swift_unknownObjectRelease();
        long long v33 = v54;
      }
    }
    else
    {
      id v47 = v55[0];
      TVRemoteUI::FLSimpleSpring v48 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      Swift::Double v53 = v5;
      if (one-time initialization token for findingExperience != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.findingExperience);
      uint64_t v22 = v2;
      id v23 = v48;
      id v24 = v22;
      id v25 = v48;
      unint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v26, v27))
      {

        return;
      }
      uint64_t v28 = swift_slowAlloc();
      long long v29 = (void *)swift_slowAlloc();
      id v49 = (void *)swift_slowAlloc();
      v55[0] = v49;
      *(_DWORD *)uint64_t v28 = 138412546;
      id v51 = v20;
      uint64_t v30 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v29 = v24;

      *(_WORD *)(v28 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v31 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_227326000, v26, v27, "🧭 FMR1HaptiCtrl%@: failed creating continuous haptic player: %s", (uint8_t *)v28, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v29, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v49, -1, -1);
      MEMORY[0x22A6785E0](v28, -1, -1);

      long long v33 = v51;
    }
  }
}

uint64_t FMR1HapticsController.tearDownContinuousHapticPlayer()()
{
  v7[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer);
  if (v2)
  {
    v7[0] = 0;
    if (objc_msgSend(v2, sel_stopAtTime_error_, v7, 0.0))
    {
      id v3 = v7[0];
    }
    else
    {
      id v4 = v7[0];
      id v5 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  *(void *)(v0 + v1) = 0;
  return swift_unknownObjectRelease();
}

void FMR1HapticsController.stopContinuousHapticPlayer()()
{
  uint64_t v1 = v0;
  v25[1] = *(id *)MEMORY[0x263EF8340];
  if (*(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_restartContinuousHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer];
  if (!v2) {
    goto LABEL_6;
  }
  v25[0] = 0;
  if (objc_msgSend(v2, sel_stopAtTime_error_, v25, 0.0))
  {
    id v3 = v25[0];
LABEL_6:
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.findingExperience);
    id v5 = v0;
    double v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      id v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      v25[0] = v5;
      double v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v9 = v5;

      _os_log_impl(&dword_227326000, v6, v7, "🧭 FMR1HaptiCtrl%@: stopped continuous haptic player", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v9, -1, -1);
      MEMORY[0x22A6785E0](v8, -1, -1);

      return;
    }

    goto LABEL_16;
  }
  id v11 = v25[0];
  id v12 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  if (one-time initialization token for findingExperience != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.findingExperience);
  id v14 = v1;
  id v15 = v12;
  id v16 = v14;
  id v17 = v12;
  id v5 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    id v20 = (void *)swift_slowAlloc();
    id v24 = (void *)swift_slowAlloc();
    v25[0] = v24;
    *(_DWORD *)uint64_t v19 = 138412546;
    id v21 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v20 = v16;

    *(_WORD *)(v19 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v22 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_227326000, v5, v18, "🧭 FMR1HaptiCtrl%@: failed stopping continuous haptic player: %s", (uint8_t *)v19, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v20, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v24, -1, -1);
    MEMORY[0x22A6785E0](v19, -1, -1);

    return;
  }

LABEL_16:
}

void FMR1HapticsController.resetContinuousHapticPlayerBeforeNearbyHaptic()()
{
  v32[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = *MEMORY[0x263F004D0];
  id v2 = objc_allocWithZone(MEMORY[0x263F00580]);
  LODWORD(v3) = 1.0;
  uint64_t v4 = objc_msgSend(v2, sel_initWithParameterID_value_relativeTime_, v1, v3, 0.0);
  id v5 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer];
  if (!v5)
  {
LABEL_4:
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.findingExperience);
    id v12 = v0;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      id v16 = (void *)swift_slowAlloc();
      *(_DWORD *)id v15 = 138412290;
      v32[0] = v12;
      id v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v16 = v12;

      _os_log_impl(&dword_227326000, v13, v14, "🧭 FMR1HaptiCtrl%@: reset continuous haptic player intensity to 1.0", v15, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v16, -1, -1);
      MEMORY[0x22A6785E0](v15, -1, -1);

      return;
    }

    goto LABEL_14;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2273F4460;
  *(void *)(v6 + 32) = v4;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticDynamicParameter);
  swift_unknownObjectRetain();
  os_log_type_t v7 = v4;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v32[0] = 0;
  unsigned int v9 = objc_msgSend(v5, sel_sendParameters_atTime_error_, isa, v32, 0.0);
  swift_unknownObjectRelease();

  if (v9)
  {
    id v10 = v32[0];
    goto LABEL_4;
  }
  id v18 = v32[0];
  uint64_t v19 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  if (one-time initialization token for findingExperience != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.findingExperience);
  id v21 = v0;
  id v22 = v19;
  unint64_t v23 = v21;
  id v24 = v19;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    os_log_type_t v27 = (void *)swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    v32[0] = v31;
    *(_DWORD *)uint64_t v26 = 138412546;
    uint64_t v28 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v27 = v23;

    *(_WORD *)(v26 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v29 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_227326000, v4, v25, "🧭 FMR1HaptiCtrl%@: failed parametering continuous haptic player: %s", (uint8_t *)v26, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v27, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v31, -1, -1);
    MEMORY[0x22A6785E0](v26, -1, -1);

    return;
  }

LABEL_14:
}

void FMR1HapticsController.resetContinuousHapticPlayerAfterNearbyHaptic()()
{
  v32[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = *MEMORY[0x263F004D0];
  id v2 = objc_allocWithZone(MEMORY[0x263F00580]);
  LODWORD(v3) = 1058642330;
  uint64_t v4 = objc_msgSend(v2, sel_initWithParameterID_value_relativeTime_, v1, v3, 0.0);
  id v5 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer];
  if (!v5)
  {
LABEL_4:
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.findingExperience);
    id v12 = v0;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      id v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138412546;
      v32[0] = v12;
      id v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v16 = v12;

      *(_WORD *)(v15 + 12) = 2048;
      v32[0] = (id)0x3FE3333340000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_227326000, v13, v14, "🧭 FMR1HaptiCtrl%@: reset continuous haptic player intensity to %f", (uint8_t *)v15, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v16, -1, -1);
      MEMORY[0x22A6785E0](v15, -1, -1);

      return;
    }

    goto LABEL_14;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2273F4460;
  *(void *)(v6 + 32) = v4;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticDynamicParameter);
  swift_unknownObjectRetain();
  os_log_type_t v7 = v4;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v32[0] = 0;
  unsigned int v9 = objc_msgSend(v5, sel_sendParameters_atTime_error_, isa, v32, 0.0);
  swift_unknownObjectRelease();

  if (v9)
  {
    id v10 = v32[0];
    goto LABEL_4;
  }
  id v18 = v32[0];
  uint64_t v19 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  if (one-time initialization token for findingExperience != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.findingExperience);
  id v21 = v0;
  id v22 = v19;
  unint64_t v23 = v21;
  id v24 = v19;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    os_log_type_t v27 = (void *)swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    v32[0] = v31;
    *(_DWORD *)uint64_t v26 = 138412546;
    uint64_t v28 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v27 = v23;

    *(_WORD *)(v26 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v29 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_227326000, v4, v25, "🧭 FMR1HaptiCtrl%@: failed parametering continuous haptic player: %s", (uint8_t *)v26, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v27, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v31, -1, -1);
    MEMORY[0x22A6785E0](v26, -1, -1);

    return;
  }

LABEL_14:
}

id FMR1HapticsController.hapticDisplayLinkUpdate(displaylink:)(id a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_enablePlayingAheadHaptic;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_enablePlayingAheadHaptic) == 1)
  {
    memset(v23, 0, sizeof(v23));
    FMR1HapticsController.playAheadHaptic(context:)((uint64_t)v23);
    outlined destroy of Any?((uint64_t)v23);
    *(unsigned char *)(v1 + v4) = 0;
  }
  else if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod + 8) & 1) == 0)
  {
    double v5 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod);
    uint64_t v6 = v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticLastPlayTimestamp;
    if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticLastPlayTimestamp + 8) & 1) != 0
      || (uint64_t v7 = v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticNextPlayDelay,
          (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticNextPlayDelay + 8) & 1) != 0))
    {
      objc_msgSend(a1, sel_timestamp);
      *(void *)uint64_t v6 = v8;
      *(unsigned char *)(v6 + 8) = 0;
      uint64_t v9 = v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticNextPlayDelay;
      *(double *)uint64_t v9 = v5;
      *(unsigned char *)(v9 + 8) = 0;
    }
    else
    {
      double v17 = *(double *)v7;
      double v18 = *(double *)v6;
      objc_msgSend(a1, sel_timestamp);
      double v20 = v19 - v18;
      if (v17 > v5) {
        double v21 = v17;
      }
      else {
        double v21 = v5;
      }
      if (v21 > v20) {
        goto LABEL_8;
      }
      objc_msgSend(a1, sel_timestamp);
      *(void *)uint64_t v6 = v22;
      *(unsigned char *)(v6 + 8) = 0;
      *(double *)uint64_t v7 = v5;
      *(unsigned char *)(v7 + 8) = 0;
    }
    specialized FMR1HapticsController.playSingleTapHaptic(displaylink:)();
  }
LABEL_8:
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern) == 1
    && (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_lastRenderTime + 8) & 1) == 0
    && (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticFactor + 4) & 1) == 0)
  {
    float v10 = *(float *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticFactor);
    double v11 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_lastRenderTime);
    objc_msgSend(a1, sel_timestamp);
    uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticRampingFactorSpring);
    FLSpring.step(_:)(v12 - v11);
    *(unsigned char *)(v13 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    specialized FMR1HapticsController.applyContinuousHapticPlayer(with:rampingFactor:)(v10);
  }
  id result = objc_msgSend(a1, sel_timestamp);
  uint64_t v15 = v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_lastRenderTime;
  *(void *)uint64_t v15 = v16;
  *(unsigned char *)(v15 + 8) = 0;
  return result;
}

uint64_t type metadata accessor for FMR1HapticsController()
{
  return self;
}

float FMR1HapticsController.selectSingleTapHaptic(hapticFactor:)(double a1)
{
  if (a1 < 0.2)
  {
    uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap1HapticPattern;
LABEL_7:
    uint64_t v4 = *(void **)(v1 + v3);
    uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPattern;
    uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPattern);
    goto LABEL_8;
  }
  if (a1 < 0.4)
  {
    uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap2HapticPattern;
    goto LABEL_7;
  }
  if (a1 < 0.6)
  {
    uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap3HapticPattern;
    goto LABEL_7;
  }
  uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPattern;
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPattern);
  if (a1 >= 0.8) {
    uint64_t v12 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap5HapticPattern;
  }
  else {
    uint64_t v12 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap4HapticPattern;
  }
  uint64_t v4 = *(void **)(v1 + v12);
LABEL_8:
  *(void *)(v1 + v5) = v4;
  id v7 = v4;

  float v8 = 1.0 - a1;
  float v9 = a1;
  float result = (float)(v9 * 0.65) + (float)(v8 * 0.4);
  uint64_t v11 = v1 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPatternIntensity;
  *(float *)uint64_t v11 = result;
  *(unsigned char *)(v11 + 4) = 0;
  return result;
}

void FMR1HapticsController.playScatterHaptic(context:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v3 = &v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod];
  *(void *)uint64_t v3 = 0;
  v3[8] = 1;
  memset(v57, 0, sizeof(v57));
  uint64_t v4 = (uint64_t)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext];
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)v57, v4);
  swift_endAccess();
  uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem;
  if (*(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v1[v5] = 0;
  swift_release();
  if (v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] == 1)
  {
    v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] = 0;
    FMR1HapticsController.stopContinuousHapticPlayer()();
  }
  uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem;
  if (*(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v1[v6] = 0;
  swift_release();
  uint64_t v7 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem;
  if (*(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v1[v7] = 0;
  swift_release();
  v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hasPlayedArmsReachHaptic] = 0;
  uint64_t v8 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem;
  if (*(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v1[v8] = 0;
  swift_release();
  float v9 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
  if (v9)
  {
    float v10 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_scatterHapticPattern];
    if (v10)
    {
      *(void *)&v57[0] = 0;
      id v11 = v9;
      id v12 = v10;
      uint64_t v55 = v11;
      id v13 = objc_msgSend(v11, sel_createPlayerWithPattern_error_, v12, v57);
      if (v13)
      {
        os_log_type_t v14 = v13;
        uint64_t v15 = one-time initialization token for findingExperience;
        id v16 = *(id *)&v57[0];
        if (v15 != -1) {
          swift_once();
        }
        uint64_t v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Logger.findingExperience);
        double v18 = v2;
        double v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v19, v20))
        {
          id v53 = v12;
          double v21 = (uint8_t *)swift_slowAlloc();
          uint64_t v22 = (void *)swift_slowAlloc();
          *(_DWORD *)double v21 = 138412290;
          *(void *)&v57[0] = v18;
          unint64_t v23 = v18;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v22 = v18;

          _os_log_impl(&dword_227326000, v19, v20, "🧭 FMR1HaptiCtrl%@: playing scatter haptic", v21, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x22A6785E0](v22, -1, -1);
          id v24 = v21;
          id v12 = v53;
          MEMORY[0x22A6785E0](v24, -1, -1);
        }
        else
        {

          double v19 = v18;
        }

        *(void *)&v57[0] = 0;
        unsigned int v27 = objc_msgSend(v14, sel_startAtTime_error_, v57, 0.0);
        uint64_t v28 = *(void **)&v57[0];
        if (v27)
        {
          *((unsigned char *)&v18->isa + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying) = 1;
          id v29 = v28;
        }
        else
        {
          id v30 = *(id *)&v57[0];
          uint64_t v31 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          unint64_t v32 = v18;
          id v33 = v31;
          uint64_t v34 = v32;
          id v35 = v31;
          uint64_t v36 = Logger.logObject.getter();
          os_log_type_t v37 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v36, v37))
          {
            uint64_t v38 = swift_slowAlloc();
            id v51 = (void *)swift_slowAlloc();
            uint64_t v54 = swift_slowAlloc();
            *(void *)&v57[0] = v54;
            *(_DWORD *)uint64_t v38 = 138412546;
            os_log_t log = v36;
            id v39 = v18;
            uint64_t v40 = v34;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *id v51 = v34;

            double v18 = v39;
            *(_WORD *)(v38 + 12) = 2080;
            swift_getErrorValue();
            uint64_t v41 = Error.localizedDescription.getter();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, (uint64_t *)v57);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_227326000, log, v37, "🧭 FMR1HaptiCtrl%@: failed playing scatter haptic (%s)", (uint8_t *)v38, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22A6785E0](v51, -1, -1);
            swift_arrayDestroy();
            MEMORY[0x22A6785E0](v54, -1, -1);
            MEMORY[0x22A6785E0](v38, -1, -1);
          }
          else
          {
          }
        }
        os_log_type_t v43 = *(void (**)(void *, uint64_t))((char *)&v18->isa
                                                     + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler);
        if (v43)
        {
          id v44 = v12;
          outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v43);
          v43(v10, a1);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v43);
        }
        long long v45 = *(Class *)((char *)&v18->isa + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink);
        if (v45)
        {
          id v46 = v45;
          objc_msgSend(v46, sel_timestamp);
          uint64_t v48 = v47;

          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease();
          uint64_t v48 = 0;
        }
        id v49 = (char *)v18 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticLastPlayTimestamp;
        *(void *)id v49 = v48;
        v49[8] = 0;
        id v50 = (char *)v18 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticNextPlayDelay;
        *(void *)id v50 = 0x3FF0000000000000;
        v50[8] = 0;
      }
      else
      {
        id v25 = *(id *)&v57[0];
        uint64_t v26 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

uint64_t FMR1HapticsController.playTapHapticAt(period:context:)(uint64_t a1, char a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v7 = v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod;
    *(void *)uint64_t v7 = a1;
    *(unsigned char *)(v7 + 8) = 1;
    memset(v11, 0, sizeof(v11));
  }
  else
  {
    uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem;
    if (*(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem))
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(void *)(v3 + v6) = 0;
    swift_release();
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern) == 1)
    {
      *(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern) = 0;
      FMR1HapticsController.stopContinuousHapticPlayer()();
    }
    uint64_t v8 = v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod;
    *(void *)uint64_t v8 = a1;
    *(unsigned char *)(v8 + 8) = 0;
    outlined init with copy of Any?(a3, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v9 = v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext;
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)v11, v9);
  return swift_endAccess();
}

void FMR1HapticsController.playNearbyHaptic(context:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v108 = a1;
  uint64_t v114 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5);
  uint64_t v7 = (char *)v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v106 = *(void *)(v8 - 8);
  uint64_t v107 = v8;
  MEMORY[0x270FA5388](v8, v9);
  id v11 = (char *)v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchTime();
  uint64_t v105 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12, v13);
  id v16 = (char *)v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14, v17);
  double v19 = (char *)v91 - v18;
  os_log_type_t v20 = &v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod];
  *(void *)os_log_type_t v20 = 0;
  v20[8] = 1;
  long long aBlock = 0u;
  long long v110 = 0u;
  uint64_t v21 = (uint64_t)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext];
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)&aBlock, v21);
  swift_endAccess();
  uint64_t v22 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem;
  if (*(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v2[v22] = 0;
  swift_release();
  if (v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] == 1)
  {
    v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] = 0;
    FMR1HapticsController.stopContinuousHapticPlayer()();
  }
  uint64_t v23 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem;
  if (*(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v2[v23] = 0;
  swift_release();
  v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hasPlayedArmsReachHaptic] = 0;
  uint64_t v24 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem;
  if (*(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v2[v24] = 0;
  swift_release();
  uint64_t v25 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem;
  if (*(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v2[v25] = 0;
  swift_release();
  FMR1HapticsController.resetContinuousHapticPlayerBeforeNearbyHaptic()();
  uint64_t v26 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
  if (v26)
  {
    unsigned int v27 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticPattern];
    if (v27)
    {
      uint64_t v100 = v4;
      uint64_t v101 = v3;
      *(void *)&long long aBlock = 0;
      id v28 = v26;
      id v29 = v27;
      id v30 = objc_msgSend(v28, sel_createPlayerWithPattern_error_, v29, &aBlock);
      if (!v30)
      {
        id v37 = (id)aBlock;
        uint64_t v38 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        return;
      }
      id v104 = v30;
      id v102 = v29;
      id v103 = v28;
      uint64_t v31 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink];
      id v99 = v27;
      if (v31)
      {
        id v32 = (id)aBlock;
        objc_msgSend(v31, sel_timestamp);
        double v34 = v33;
        id v35 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticLastPlayTimestamp];
        uint64_t v36 = &v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticLastPlayTimestamp + 8];
        if (*v36)
        {
          if (v33 >= 2.0) {
            goto LABEL_26;
          }
          goto LABEL_22;
        }
      }
      else
      {
        id v35 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticLastPlayTimestamp];
        char v39 = v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticLastPlayTimestamp + 8];
        id v40 = (id)aBlock;
        if (v39)
        {
LABEL_22:
          if (one-time initialization token for findingExperience != -1) {
            swift_once();
          }
          uint64_t v41 = type metadata accessor for Logger();
          __swift_project_value_buffer(v41, (uint64_t)static Logger.findingExperience);
          unint64_t v42 = v2;
          os_log_type_t v43 = Logger.logObject.getter();
          os_log_type_t v44 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v43, v44))
          {
            long long v45 = (uint8_t *)swift_slowAlloc();
            id v46 = (void *)swift_slowAlloc();
            *(_DWORD *)long long v45 = 138412290;
            *(void *)&long long aBlock = v42;
            uint64_t v47 = v42;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *id v46 = v42;

            _os_log_impl(&dword_227326000, v43, v44, "🧭 FMR1HaptiCtrl%@: not playing nearby haptic (we just played it)", v45, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22A6785E0](v46, -1, -1);
            MEMORY[0x22A6785E0](v45, -1, -1);

            swift_unknownObjectRelease();
          }
          else
          {

            swift_unknownObjectRelease();
          }

          return;
        }
        uint64_t v36 = v35 + 1;
        double v34 = 0.0;
      }
      if (*v35 + 2.0 <= v34)
      {
LABEL_26:
        uint64_t v96 = v36;
        uint64_t v97 = v35;
        if (one-time initialization token for findingExperience != -1) {
          swift_once();
        }
        uint64_t v48 = type metadata accessor for Logger();
        __swift_project_value_buffer(v48, (uint64_t)static Logger.findingExperience);
        id v49 = v2;
        id v50 = Logger.logObject.getter();
        os_log_type_t v51 = static os_log_type_t.default.getter();
        int v52 = v51;
        BOOL v53 = os_log_type_enabled(v50, v51);
        uint64_t v98 = v49;
        if (v53)
        {
          int v94 = v52;
          uint64_t v54 = (uint8_t *)swift_slowAlloc();
          uint64_t v55 = swift_slowAlloc();
          uint64_t v93 = v7;
          uint64_t v56 = (void *)v55;
          uint64_t v95 = v12;
          id v92 = v54;
          *(_DWORD *)uint64_t v54 = 138412290;
          v91[1] = v54 + 4;
          *(void *)&long long aBlock = v49;
          char v57 = v49;
          uint64_t v12 = v95;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v56 = v49;

          uint64_t v58 = v92;
          _os_log_impl(&dword_227326000, v50, (os_log_type_t)v94, "🧭 FMR1HaptiCtrl%@: playing nearby haptic", v92, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          unint64_t v59 = v56;
          uint64_t v7 = v93;
          swift_arrayDestroy();
          MEMORY[0x22A6785E0](v59, -1, -1);
          MEMORY[0x22A6785E0](v58, -1, -1);
        }
        else
        {

          id v50 = v49;
        }

        *(void *)&long long aBlock = 0;
        unsigned int v60 = objc_msgSend(v104, sel_startAtTime_error_, &aBlock, 0.0);
        uint64_t v61 = (void *)aBlock;
        if (v60)
        {
          id v62 = v98;
          v98[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying] = 1;
          type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
          id v63 = v61;
          uint64_t v95 = static OS_dispatch_queue.main.getter();
          static DispatchTime.now()();
          MEMORY[0x22A6770F0](v16, 0.2);
          uint64_t v105 = *(void *)(v105 + 8);
          ((void (*)(char *, uint64_t))v105)(v16, v12);
          uint64_t v64 = swift_allocObject();
          *(void *)(v64 + 16) = v62;
          uint64_t v111 = partial apply for closure #1 in FMR1HapticsController.playNearbyHaptic(context:);
          uint64_t v112 = v64;
          *(void *)&long long aBlock = MEMORY[0x263EF8330];
          *((void *)&aBlock + 1) = 1107296256;
          *(void *)&long long v110 = thunk for @escaping @callee_guaranteed () -> ();
          *((void *)&v110 + 1) = &block_descriptor_175;
          uint64_t v65 = _Block_copy(&aBlock);
          id v66 = v62;
          swift_release();
          static DispatchQoS.unspecified.getter();
          *(void *)&long long aBlock = MEMORY[0x263F8EE78];
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
          uint64_t v67 = v101;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          id v68 = (void *)v95;
          MEMORY[0x22A6773D0](v19, v11, v7, v65);
          _Block_release(v65);

          uint64_t v69 = v67;
          id v70 = v62;
          (*(void (**)(char *, uint64_t))(v100 + 8))(v7, v69);
          (*(void (**)(char *, uint64_t))(v106 + 8))(v11, v107);
          ((void (*)(char *, uint64_t))v105)(v19, v12);
        }
        else
        {
          id v71 = (id)aBlock;
          id v72 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          id v70 = v98;
          uint64_t v73 = v98;
          id v74 = v72;
          uint64_t v75 = v73;
          id v76 = v72;
          id v77 = Logger.logObject.getter();
          os_log_type_t v78 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v77, v78))
          {
            uint64_t v79 = swift_slowAlloc();
            id v80 = (void *)swift_slowAlloc();
            uint64_t v107 = swift_slowAlloc();
            *(void *)&long long aBlock = v107;
            *(_DWORD *)uint64_t v79 = 138412546;
            uint64_t v113 = (uint64_t)v75;
            uint64_t v81 = v75;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *id v80 = v75;

            *(_WORD *)(v79 + 12) = 2080;
            swift_getErrorValue();
            uint64_t v82 = Error.localizedDescription.getter();
            uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_227326000, v77, v78, "🧭 FMR1HaptiCtrl%@: failed playing nearby haptic (%s)", (uint8_t *)v79, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            id v84 = v80;
            id v70 = v98;
            MEMORY[0x22A6785E0](v84, -1, -1);
            uint64_t v85 = v107;
            swift_arrayDestroy();
            MEMORY[0x22A6785E0](v85, -1, -1);
            MEMORY[0x22A6785E0](v79, -1, -1);
          }
          else
          {
          }
        }
        uint64_t v86 = v108;
        id v87 = v103;
        id v88 = v97;
        uint64_t v89 = *(void (**)(void *, uint64_t))&v70[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler];
        if (v89)
        {
          id v90 = v102;
          outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v89);
          v89(v99, v86);

          outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v89);
          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease();
        }
        *id v88 = v34;
        unsigned char *v96 = 0;
        return;
      }
      goto LABEL_22;
    }
  }
}

uint64_t FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()()
{
  return FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()(&OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem, (uint64_t)partial apply for closure #1 in FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary(), (uint64_t)&block_descriptor_169, 0.2);
}

uint64_t FMR1HapticsController.startDelayedNearbyHapticPlayerIfNecessary()()
{
  return FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()(&OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem, (uint64_t)partial apply for closure #1 in FMR1HapticsController.startDelayedNearbyHapticPlayerIfNecessary(), (uint64_t)&block_descriptor_0, 0.05);
}

uint64_t FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()(uint64_t *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v9 = type metadata accessor for DispatchWallTime();
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9, v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11, v14);
  id v16 = (char *)&v27 - v15;
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t result = MEMORY[0x270FA5388](v17, v18);
  uint64_t v20 = *a1;
  if (!*(void *)(v4 + *a1))
  {
    uint64_t v21 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = a2;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = a3;
    _Block_copy(aBlock);
    uint64_t v30 = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    uint64_t v28 = v9;
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    uint64_t v22 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    swift_release();
    *(void *)(v4 + v20) = v22;
    swift_retain();
    swift_release();
    type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v23 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchWallTime.now()();
    MEMORY[0x22A677100](v13, a4);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v29 + 8);
    uint64_t v25 = v13;
    uint64_t v26 = v28;
    v24(v25, v28);
    OS_dispatch_queue.asyncAfter(wallDeadline:execute:)();
    swift_release();

    return ((uint64_t (*)(char *, uint64_t))v24)(v16, v26);
  }
  return result;
}

uint64_t closure #1 in FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()(uint64_t a1, void (*a2)(_OWORD *))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x22A6786A0](v3);
  if (result)
  {
    uint64_t v5 = (void *)result;
    memset(v6, 0, sizeof(v6));
    a2(v6);

    return outlined destroy of Any?((uint64_t)v6);
  }
  return result;
}

void FMR1HapticsController.playAheadHaptic(context:)(uint64_t a1)
{
  uint64_t v2 = v1;
  v55[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem;
  if (*(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v1[v3] = 0;
  swift_release();
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem;
  if (*(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v1[v4] = 0;
  swift_release();
  v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hasPlayedArmsReachHaptic] = 0;
  uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem;
  if (*(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v1[v5] = 0;
  swift_release();
  uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem;
  if (*(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v1[v6] = 0;
  swift_release();
  uint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
  if (v7)
  {
    uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadHapticPattern];
    if (v8)
    {
      v55[0] = 0;
      id v9 = v7;
      id v10 = v8;
      BOOL v53 = v9;
      id v11 = objc_msgSend(v9, sel_createPlayerWithPattern_error_, v10, v55);
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = one-time initialization token for findingExperience;
        id v14 = v55[0];
        if (v13 != -1) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        __swift_project_value_buffer(v15, (uint64_t)static Logger.findingExperience);
        id v16 = v2;
        uint64_t v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v17, v18))
        {
          id v51 = v10;
          double v19 = (uint8_t *)swift_slowAlloc();
          uint64_t v20 = (void *)swift_slowAlloc();
          *(_DWORD *)double v19 = 138412290;
          v55[0] = v16;
          uint64_t v21 = v16;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v20 = v16;

          _os_log_impl(&dword_227326000, v17, v18, "🧭 FMR1HaptiCtrl%@: playing ahead (green) haptic", v19, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x22A6785E0](v20, -1, -1);
          uint64_t v22 = v19;
          id v10 = v51;
          MEMORY[0x22A6785E0](v22, -1, -1);
        }
        else
        {

          uint64_t v17 = v16;
        }

        v55[0] = 0;
        unsigned int v25 = objc_msgSend(v12, sel_startAtTime_error_, v55, 0.0);
        id v26 = v55[0];
        if (v25)
        {
          *((unsigned char *)&v16->isa + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying) = 1;
          id v27 = v26;
        }
        else
        {
          id v28 = v55[0];
          uint64_t v29 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          uint64_t v30 = v16;
          id v31 = v29;
          id v32 = v30;
          id v33 = v29;
          double v34 = Logger.logObject.getter();
          os_log_type_t v35 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v34, v35))
          {
            uint64_t v36 = swift_slowAlloc();
            id v49 = (void *)swift_slowAlloc();
            int v52 = (void *)swift_slowAlloc();
            v55[0] = v52;
            *(_DWORD *)uint64_t v36 = 138412546;
            os_log_t log = v34;
            id v37 = v16;
            uint64_t v38 = v32;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *id v49 = v32;

            id v16 = v37;
            *(_WORD *)(v36 + 12) = 2080;
            swift_getErrorValue();
            uint64_t v39 = Error.localizedDescription.getter();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)v55);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_227326000, log, v35, "🧭 FMR1HaptiCtrl%@: failed playing ahead haptic (%s)", (uint8_t *)v36, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22A6785E0](v49, -1, -1);
            swift_arrayDestroy();
            MEMORY[0x22A6785E0](v52, -1, -1);
            MEMORY[0x22A6785E0](v36, -1, -1);
          }
          else
          {
          }
        }
        uint64_t v41 = *(void (**)(void *, uint64_t))((char *)&v16->isa
                                                     + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler);
        if (v41)
        {
          id v42 = v10;
          outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v41);
          v41(v8, a1);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v41);
        }
        os_log_type_t v43 = *(Class *)((char *)&v16->isa + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink);
        if (v43)
        {
          id v44 = v43;
          objc_msgSend(v44, sel_timestamp);
          uint64_t v46 = v45;

          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease();
          uint64_t v46 = 0;
        }
        uint64_t v47 = (char *)v16 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticLastPlayTimestamp;
        *(void *)uint64_t v47 = v46;
        v47[8] = 0;
        uint64_t v48 = (char *)v16 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticNextPlayDelay;
        *(void *)uint64_t v48 = 0;
        v48[8] = 0;
      }
      else
      {
        id v23 = v55[0];
        uint64_t v24 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

uint64_t FMR1HapticsController.playInFOVModeTapHapticAt(hapticFactor:period:context:)(uint64_t a1, double a2, double a3)
{
  uint64_t v7 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem;
  if (*(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(v3 + v7) = 0;
  swift_release();
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern) == 1)
  {
    *(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern) = 0;
    FMR1HapticsController.stopContinuousHapticPlayer()();
  }
  uint64_t v8 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem;
  if (*(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(v3 + v8) = 0;
  swift_release();
  uint64_t v9 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem;
  if (*(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(v3 + v9) = 0;
  swift_release();
  *(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hasPlayedArmsReachHaptic) = 0;
  uint64_t v10 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem;
  if (*(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(v3 + v10) = 0;
  swift_release();
  uint64_t v11 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem;
  if (*(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(v3 + v11) = 0;
  swift_release();
  FMR1HapticsController.selectSingleTapHaptic(hapticFactor:)(a2);
  return FMR1HapticsController.playTapHapticAt(period:context:)(*(uint64_t *)&a3, 0, a1);
}

Swift::Void __swiftcall FMR1HapticsController.playLevelIncreasedHaptic()()
{
  FMR1HapticsController.playLevelIncreasedHaptic()(&OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelIncreaseHapticPattern, "🧭 FMR1HaptiCtrl%@: playing level increased haptic", "🧭 FMR1HaptiCtrl%@: failed playing level increased haptic (%s)");
}

Swift::Void __swiftcall FMR1HapticsController.playLevelDecreasedHaptic()()
{
  FMR1HapticsController.playLevelIncreasedHaptic()(&OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelDecreaseHapticPattern, "🧭 FMR1HaptiCtrl%@: playing level decreased haptic", "🧭 FMR1HaptiCtrl%@: failed playing level decreased haptic (%s)");
}

Swift::Void __swiftcall FMR1HapticsController.playFarNearHaptic()()
{
  FMR1HapticsController.playLevelIncreasedHaptic()(&OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_farNearHapticPattern, "🧭 FMR1HaptiCtrl%@: playing level far->near haptic", "🧭 FMR1HaptiCtrl%@: failed playing far->near haptic (%s)");
}

void FMR1HapticsController.playLevelIncreasedHaptic()(void *a1, const char *a2, const char *a3)
{
  uint64_t v7 = v3;
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v8 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  memset(v52, 0, sizeof(v52));
  uint64_t v9 = (uint64_t)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext];
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)v52, v9);
  swift_endAccess();
  uint64_t v10 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem;
  if (*(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v7[v10] = 0;
  swift_release();
  if (v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] == 1)
  {
    v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] = 0;
    FMR1HapticsController.stopContinuousHapticPlayer()();
  }
  uint64_t v11 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem;
  if (*(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v7[v11] = 0;
  swift_release();
  uint64_t v12 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem;
  if (*(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v7[v12] = 0;
  swift_release();
  uint64_t v13 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem;
  if (*(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)&v7[v13] = 0;
  swift_release();
  id v14 = *(void **)&v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
  if (v14)
  {
    uint64_t v15 = *(void **)&v7[*a1];
    if (v15)
    {
      *(void *)&v52[0] = 0;
      id v16 = v14;
      id v17 = v15;
      id v18 = objc_msgSend(v16, sel_createPlayerWithPattern_error_, v17, v52);
      double v19 = *(void **)&v52[0];
      if (v18)
      {
        uint64_t v20 = v18;
        *(void *)&v52[0] = 0;
        id v21 = v19;
        unsigned int v22 = objc_msgSend(v20, sel_startAtTime_error_, v52, 0.0);
        id v23 = *(void **)&v52[0];
        if (v22)
        {
          v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying] = 1;
          uint64_t v24 = one-time initialization token for findingExperience;
          id v25 = v23;
          if (v24 != -1) {
            swift_once();
          }
          uint64_t v26 = type metadata accessor for Logger();
          __swift_project_value_buffer(v26, (uint64_t)static Logger.findingExperience);
          id v27 = v7;
          id v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v28, v29))
          {
            uint64_t v30 = (uint8_t *)swift_slowAlloc();
            id v50 = v17;
            id v31 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v30 = 138412290;
            *(void *)&v52[0] = v27;
            id v32 = v27;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v31 = v27;

            _os_log_impl(&dword_227326000, v28, v29, a2, v30, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22A6785E0](v31, -1, -1);
            MEMORY[0x22A6785E0](v30, -1, -1);

            swift_unknownObjectRelease();
          }
          else
          {

            swift_unknownObjectRelease();
          }
        }
        else
        {
          id v51 = v17;
          id v35 = *(id *)&v52[0];
          uint64_t v36 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          if (one-time initialization token for findingExperience != -1) {
            swift_once();
          }
          uint64_t v37 = type metadata accessor for Logger();
          __swift_project_value_buffer(v37, (uint64_t)static Logger.findingExperience);
          uint64_t v38 = v7;
          id v39 = v36;
          unint64_t v40 = v38;
          id v41 = v36;
          id v42 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v42, v43))
          {
            uint64_t v44 = swift_slowAlloc();
            uint64_t v45 = (void *)swift_slowAlloc();
            format = (char *)swift_slowAlloc();
            *(void *)&v52[0] = format;
            *(_DWORD *)uint64_t v44 = 138412546;
            uint64_t v46 = v40;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v45 = v40;

            *(_WORD *)(v44 + 12) = 2080;
            swift_getErrorValue();
            uint64_t v47 = Error.localizedDescription.getter();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_227326000, v42, v43, a3, (uint8_t *)v44, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22A6785E0](v45, -1, -1);
            swift_arrayDestroy();
            MEMORY[0x22A6785E0](format, -1, -1);
            MEMORY[0x22A6785E0](v44, -1, -1);

            swift_unknownObjectRelease();
          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
      }
      else
      {
        id v33 = *(id *)&v52[0];
        double v34 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

Swift::Void __swiftcall FMR1HapticsController.stopHaptics()()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying;
  if (v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying] == 1)
  {
    uint64_t v2 = v0;
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.findingExperience);
    uint64_t v4 = v0;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = v1;
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      *(void *)&v19[0] = v4;
      uint64_t v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v4;

      _os_log_impl(&dword_227326000, v5, v6, "🧭 FMR1HaptiCtrl%@: stopping haptics", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      uint64_t v10 = v8;
      uint64_t v1 = v18;
      MEMORY[0x22A6785E0](v10, -1, -1);
      MEMORY[0x22A6785E0](v7, -1, -1);
    }
    else
    {
    }
    uint64_t v11 = &v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod];
    *(void *)uint64_t v11 = 0;
    v11[8] = 1;
    memset(v19, 0, sizeof(v19));
    uint64_t v12 = (uint64_t)&v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext];
    swift_beginAccess();
    outlined assign with take of Any?((uint64_t)v19, v12);
    swift_endAccess();
    uint64_t v13 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem;
    if (*(void *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(void *)&v4[v13] = 0;
    swift_release();
    if (v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] == 1)
    {
      v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] = 0;
      FMR1HapticsController.stopContinuousHapticPlayer()();
    }
    uint64_t v14 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem;
    if (*(void *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(void *)&v4[v14] = 0;
    swift_release();
    uint64_t v15 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem;
    if (*(void *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(void *)&v4[v15] = 0;
    swift_release();
    v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hasPlayedArmsReachHaptic] = 0;
    uint64_t v16 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem;
    if (*(void *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(void *)&v4[v16] = 0;
    swift_release();
    uint64_t v17 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem;
    if (*(void *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(void *)&v4[v17] = 0;
    swift_release();
    v2[v1] = 0;
  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_2273ADB34()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in FMR1HapticsController.startDelayedNearbyHapticPlayerIfNecessary()()
{
  return closure #1 in FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()(v0, (void (*)(_OWORD *))FMR1HapticsController.playNearbyHaptic(context:));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()()
{
  return closure #1 in FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()(v0, (void (*)(_OWORD *))FMR1HapticsController.playScatterHaptic(context:));
}

uint64_t sub_2273ADCA0()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in FMR1HapticsController.playNearbyHaptic(context:)()
{
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return MEMORY[0x270F9D8F0]();
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  unint64_t v6 = String.index(_:offsetBy:limitedBy:)();
  if (v7) {
    unint64_t v6 = v5;
  }
  if (4 * v3 < v6 >> 14) {
    goto LABEL_14;
  }
  return MEMORY[0x270F9D8F0]();
}

void specialized FMR1HapticsController.applyContinuousHapticPlayer(with:rampingFactor:)(float a1)
{
  v36[1] = *(id *)MEMORY[0x263EF8340];
  if (v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] == 1)
  {
    float v3 = 1.0 - a1;
    float v4 = (float)(a1 * 0.6) + (float)((float)(1.0 - a1) * 0.5);
    uint64_t v5 = *MEMORY[0x263F004D0];
    id v6 = objc_allocWithZone(MEMORY[0x263F00580]);
    *(float *)&double v7 = v4;
    id v35 = objc_msgSend(v6, sel_initWithParameterID_value_relativeTime_, v5, v7, 0.0);
    uint64_t v8 = *MEMORY[0x263F004D8];
    id v9 = objc_allocWithZone(MEMORY[0x263F00580]);
    *(float *)&double v10 = (float)(a1 * 0.1) - v3;
    id v11 = objc_msgSend(v9, sel_initWithParameterID_value_relativeTime_, v8, v10, 0.0);
    uint64_t v12 = v11;
    uint64_t v13 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer];
    if (v13)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_2273F4480;
      *(void *)(v14 + 32) = v35;
      *(void *)(v14 + 40) = v12;
      specialized Array._endMutation()();
      type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticDynamicParameter);
      swift_unknownObjectRetain();
      id v15 = v35;
      id v16 = v12;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v36[0] = 0;
      unsigned int v18 = objc_msgSend(v13, sel_sendParameters_atTime_error_, isa, v36, 0.0);
      swift_unknownObjectRelease();

      if (v18)
      {
        id v19 = v36[0];
      }
      else
      {
        id v20 = v36[0];
        id v21 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        if (one-time initialization token for findingExperience != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        __swift_project_value_buffer(v22, (uint64_t)static Logger.findingExperience);
        id v23 = v1;
        id v24 = v21;
        id v25 = v23;
        id v26 = v21;
        id v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = swift_slowAlloc();
          uint64_t v30 = (void *)swift_slowAlloc();
          double v34 = (void *)swift_slowAlloc();
          v36[0] = v34;
          *(_DWORD *)uint64_t v29 = 138412546;
          id v31 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v30 = v25;

          *(_WORD *)(v29 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v32 = Error.localizedDescription.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, (uint64_t *)v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_227326000, v27, v28, "🧭 FMR1HaptiCtrl%@: failed parametering continuous haptic player: %s", (uint8_t *)v29, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x22A6785E0](v30, -1, -1);
          swift_arrayDestroy();
          MEMORY[0x22A6785E0](v34, -1, -1);
          MEMORY[0x22A6785E0](v29, -1, -1);
        }
        else
        {
        }
      }
    }
    else
    {
    }
  }
}

void specialized FMR1HapticsController.playSingleTapHaptic(displaylink:)()
{
  v61[4] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
  if (v1)
  {
    uint64_t v2 = v0;
    float v3 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPattern];
    if (v3)
    {
      v61[0] = 0;
      id v4 = v3;
      id v5 = v1;
      id v6 = objc_msgSend(v5, sel_createPlayerWithPattern_error_, v4, v61);
      id v7 = v61[0];
      if (v6)
      {
        uint64_t v8 = v6;
        if (v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPatternIntensity + 4])
        {
          id v9 = v61[0];
        }
        else
        {
          int v12 = *(_DWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPatternIntensity];
          uint64_t v13 = *MEMORY[0x263F004D0];
          id v14 = objc_allocWithZone(MEMORY[0x263F00580]);
          id v15 = v7;
          LODWORD(v16) = v12;
          id v17 = objc_msgSend(v14, sel_initWithParameterID_value_relativeTime_, v13, v16, 0.0);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          uint64_t v18 = swift_allocObject();
          *(_OWORD *)(v18 + 16) = xmmword_2273F4460;
          *(void *)(v18 + 32) = v17;
          v61[0] = (id)v18;
          specialized Array._endMutation()();
          type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticDynamicParameter);
          id v19 = v17;
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v61[0] = 0;
          LOBYTE(v13) = objc_msgSend(v8, sel_sendParameters_atTime_error_, isa, v61, 0.0);

          if (v13)
          {
            id v21 = v61[0];
          }
          else
          {
            id v22 = v61[0];
            id v23 = (void *)_convertNSErrorToError(_:)();

            swift_willThrow();
            if (one-time initialization token for findingExperience != -1) {
              swift_once();
            }
            uint64_t v24 = type metadata accessor for Logger();
            __swift_project_value_buffer(v24, (uint64_t)static Logger.findingExperience);
            id v25 = v2;
            id v26 = v23;
            id v27 = v25;
            id v28 = v23;
            uint64_t v29 = Logger.logObject.getter();
            os_log_type_t v30 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v29, v30))
            {
              id v58 = v4;
              uint64_t v31 = swift_slowAlloc();
              uint64_t v55 = (void *)swift_slowAlloc();
              char v57 = (void *)swift_slowAlloc();
              v61[0] = v57;
              *(_DWORD *)uint64_t v31 = 138412546;
              uint64_t v54 = v23;
              os_log_t v60 = v19;
              uint64_t v32 = v27;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v55 = v27;

              *(_WORD *)(v31 + 12) = 2080;
              swift_getErrorValue();
              uint64_t v33 = Error.localizedDescription.getter();
              getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)v61);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();

              _os_log_impl(&dword_227326000, v29, v30, "🧭 FMR1HaptiCtrl%@: failed parametering tap haptic player: %s", (uint8_t *)v31, 0x16u);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              swift_arrayDestroy();
              MEMORY[0x22A6785E0](v55, -1, -1);
              swift_arrayDestroy();
              MEMORY[0x22A6785E0](v57, -1, -1);
              uint64_t v35 = v31;
              id v4 = v58;
              MEMORY[0x22A6785E0](v35, -1, -1);
            }
            else
            {
            }
          }
        }
        uint64_t v36 = *(void (**)(void *, id *))&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler];
        if (v36)
        {
          uint64_t v37 = (uint64_t)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext];
          swift_beginAccess();
          outlined init with copy of Any?(v37, (uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
          id v38 = v4;
          outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v36);
          v36(v3, v61);

          outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v36);
          outlined destroy of Any?((uint64_t)v61);
        }
        v61[0] = 0;
        if (objc_msgSend(v8, sel_startAtTime_error_, v61, 0.0, v54))
        {
          id v39 = v61[0];

          swift_unknownObjectRelease();
          v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying] = 1;
        }
        else
        {
          id v40 = v61[0];
          id v41 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          if (one-time initialization token for findingExperience != -1) {
            swift_once();
          }
          uint64_t v42 = type metadata accessor for Logger();
          __swift_project_value_buffer(v42, (uint64_t)static Logger.findingExperience);
          os_log_type_t v43 = v2;
          id v44 = v41;
          uint64_t v45 = v43;
          id v46 = v41;
          uint64_t v47 = Logger.logObject.getter();
          os_log_type_t v48 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v47, v48))
          {
            uint64_t v49 = swift_slowAlloc();
            id v50 = (void *)swift_slowAlloc();
            type = (void *)swift_slowAlloc();
            v61[0] = type;
            *(_DWORD *)uint64_t v49 = 138412546;
            unint64_t v59 = v4;
            id v51 = v45;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *id v50 = v45;

            *(_WORD *)(v49 + 12) = 2080;
            swift_getErrorValue();
            uint64_t v52 = Error.localizedDescription.getter();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, (uint64_t *)v61);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_227326000, v47, v48, "🧭 FMR1HaptiCtrl%@: failed playing single tap haptic (%s)", (uint8_t *)v49, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22A6785E0](v50, -1, -1);
            swift_arrayDestroy();
            MEMORY[0x22A6785E0](type, -1, -1);
            MEMORY[0x22A6785E0](v49, -1, -1);

            swift_unknownObjectRelease();
          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
      }
      else
      {
        id v10 = v61[0];
        id v11 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

void partial apply for closure #1 in FMR1HapticsController.setUpHaptics()()
{
  closure #1 in FMR1HapticsController.setUpHaptics()(v0);
}

void partial apply for closure #2 in FMR1HapticsController.setUpHaptics()(uint64_t a1)
{
  closure #2 in FMR1HapticsController.setUpHaptics()(a1, v1);
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::String __swiftcall FMFindingLocalizedString(_:fallbackKey:tableName:)(Swift::String _, Swift::String_optional fallbackKey, Swift::String_optional tableName)
{
  object = tableName.value._object;
  uint64_t countAndFlagsBits = tableName.value._countAndFlagsBits;
  uint64_t v5 = fallbackKey.value._object;
  uint64_t v26 = fallbackKey.value._countAndFlagsBits;
  id v6 = _._object;
  uint64_t v7 = _._countAndFlagsBits;
  type metadata accessor for FMBTDistanceView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v9 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v6;
  String.append(_:)(v10);
  v27._uint64_t countAndFlagsBits = 0xD000000000000019;
  v27._object = (void *)0x80000002273FBAA0;
  v11._uint64_t countAndFlagsBits = v7;
  v11._object = v6;
  v12.value._uint64_t countAndFlagsBits = countAndFlagsBits;
  v12.value._object = object;
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v9, v13, v27);
  uint64_t v15 = v14._countAndFlagsBits;
  double v16 = v14._object;
  swift_bridgeObjectRelease();
  BOOL v17 = v14._countAndFlagsBits == v7 && v14._object == v6;
  if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (v5)
    {
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v18._uint64_t countAndFlagsBits = v26;
      v18._object = v5;
      String.append(_:)(v18);
      v28._uint64_t countAndFlagsBits = 0xD000000000000019;
      v28._object = (void *)0x80000002273FBAA0;
      v19._uint64_t countAndFlagsBits = v26;
      v19._object = v5;
      v20.value._uint64_t countAndFlagsBits = countAndFlagsBits;
      v20.value._object = object;
      v21._uint64_t countAndFlagsBits = 0;
      v21._object = (void *)0xE000000000000000;
      Swift::String v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v9, v21, v28);
      uint64_t v15 = v22._countAndFlagsBits;
      double v16 = v22._object;
      swift_bridgeObjectRelease();
    }
  }

  uint64_t v23 = v15;
  uint64_t v24 = v16;
  result._object = v24;
  result._uint64_t countAndFlagsBits = v23;
  return result;
}

uint64_t one-time initialization function for default(uint64_t a1)
{
  return one-time initialization function for default(a1, static Logger.default);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t one-time initialization function for findingExperience(uint64_t a1)
{
  return one-time initialization function for default(a1, static Logger.findingExperience);
}

uint64_t one-time initialization function for default(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

double FMPFSKQuadrant.randomPositionAlongDiskWithRadius(_:defaultAngle:multiplier:clockwise:)(uint64_t a1, char a2, uint64_t a3, char a4, unsigned __int8 a5, char a6, double a7)
{
  double v7 = 0.0;
  if ((a2 & 1) == 0)
  {
    int v12 = a5;
    specialized static BinaryFloatingPoint<>.random<A>(in:using:)(a1, 0.0, 3.14159265);
    double v14 = v13;
    if (v12 == 2) {
      int v15 = (specialized RandomNumberGenerator.next<A>(upperBound:)(0x7FFFFFFFFFFFFFFFLL) & 1) == 0;
    }
    else {
      int v15 = v12 & 1;
    }
    double v16 = -1.0;
    if (!v15) {
      double v16 = 1.0;
    }
    if (a4)
    {
      double v18 = v14 * 0.25;
      switch(a6)
      {
        case 1:
          double v7 = v18 * v16 * a7 + 2.35619449;
          break;
        case 2:
          double v7 = v18 * v16 * a7 + -2.35619449;
          break;
        case 3:
          double v7 = v18 * v16 * a7 + -0.785398163;
          break;
        case 4:
          double v19 = v16 + v16;
          goto LABEL_21;
        case 5:
          double v7 = v18 * (v16 + v16) * a7 + 3.14159265;
          break;
        case 6:
          double v7 = v18 * (v16 + v16) * a7 + 1.57079633;
          break;
        case 7:
          double v7 = -(v18 * (v16 + v16) * a7 + 1.57079633);
          break;
        case 8:
          double v19 = v16 * 4.0;
LABEL_21:
          double v7 = v18 * v19 * a7;
          break;
        default:
          double v7 = v18 * v16 * a7 + 0.785398163;
          break;
      }
    }
    else
    {
      double v7 = *(double *)&a3;
    }
    __sincos_stret(v7);
  }
  return v7;
}

BOOL static FMFindingType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void FMFindingType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance FMFindingType()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int FMFindingType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingType()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void FMFindingTechnology.hash(into:)()
{
  unsigned int v1 = *v0;
  if ((v1 & 0x80000000) != 0)
  {
    unsigned int v2 = (v1 >> 8) & 0x7F;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    unsigned int v2 = v1;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int FMFindingTechnology.hashValue.getter()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x80000000) != 0)
  {
    unsigned int v2 = (v1 >> 8) & 0x7F;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    unsigned int v2 = v1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance FMFindingTechnology()
{
  unsigned int v1 = *v0;
  if ((v1 & 0x80000000) != 0)
  {
    unsigned int v2 = (v1 >> 8) & 0x7F;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    unsigned int v2 = v1;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingTechnology()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x80000000) != 0)
  {
    unsigned int v2 = (v1 >> 8) & 0x7F;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    unsigned int v2 = v1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL specialized static FMFindingTechnology.== infix(_:_:)(__int16 *a1, unsigned __int16 *a2)
{
  int v2 = (unsigned __int16)*a1;
  int v3 = *a2;
  if (*a1 < 0)
  {
    if ((v3 & 0x8000) != 0 && ((v2 & 1) == 0) != (v3 & 1)) {
      return ((v3 ^ v2) & 0x7F00) == 0;
    }
  }
  else if ((v3 & 0x8000) == 0)
  {
    return (v3 ^ v2) == 0;
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type FMFindingType and conformance FMFindingType()
{
  unint64_t result = lazy protocol witness table cache variable for type FMFindingType and conformance FMFindingType;
  if (!lazy protocol witness table cache variable for type FMFindingType and conformance FMFindingType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingType and conformance FMFindingType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FMExperienceType and conformance FMExperienceType()
{
  unint64_t result = lazy protocol witness table cache variable for type FMExperienceType and conformance FMExperienceType;
  if (!lazy protocol witness table cache variable for type FMExperienceType and conformance FMExperienceType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMExperienceType and conformance FMExperienceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FMFindingTechnology and conformance FMFindingTechnology()
{
  unint64_t result = lazy protocol witness table cache variable for type FMFindingTechnology and conformance FMFindingTechnology;
  if (!lazy protocol witness table cache variable for type FMFindingTechnology and conformance FMFindingTechnology)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingTechnology and conformance FMFindingTechnology);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMFindingType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FMFindingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2273AF870);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFindingType()
{
  return &type metadata for FMFindingType;
}

unsigned char *storeEnumTagSinglePayload for FMExperienceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2273AF974);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FMExperienceType()
{
  return &type metadata for FMExperienceType;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FMFindingTechnology(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFFF) {
    goto LABEL_17;
  }
  if (a2 + 61441 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 61441 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 61441;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 61441;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 61441;
    }
  }
LABEL_17:
  unsigned int v6 = ((*a1 >> 15) | (2 * ((*a1 >> 4) & 0x7C0 | (*a1 >> 2)))) ^ 0xFFF;
  if (v6 >= 0xFFE) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for FMFindingTechnology(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 61441 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 61441 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFFE)
  {
    unsigned int v6 = ((a2 - 4095) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 4095;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2273AFB44);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2)
        {
LABEL_18:
          unsigned int v7 = ((-a2 >> 1) & 0x7FF) - (a2 << 11);
          *(_WORD *)unint64_t result = (16 * v7) & 0xFC00 | (4 * (v7 & 0x3F));
        }
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for FMFindingTechnology(unsigned __int16 *a1)
{
  return *a1 >> 15;
}

_WORD *destructiveProjectEnumData for FMFindingTechnology(_WORD *result)
{
  *result &= ~0x8000u;
  return result;
}

_WORD *destructiveInjectEnumTag for FMFindingTechnology(_WORD *result, __int16 a2)
{
  *unint64_t result = *result & 0x303 | (a2 << 15);
  return result;
}

ValueMetadata *type metadata accessor for FMFindingTechnology()
{
  return &type metadata for FMFindingTechnology;
}

uint64_t UIFont.font(with:)(uint64_t a1)
{
  id v3 = objc_msgSend(v1, sel_fontDescriptor);
  id v4 = objc_msgSend(v3, sel_fontDescriptorWithSymbolicTraits_, a1);

  if (v4)
  {
    id v5 = objc_msgSend(self, sel_fontWithDescriptor_size_, v4, 0.0);

    return (uint64_t)v5;
  }
  else
  {
    _StringGuts.grow(_:)(61);
    v7._object = (void *)0x80000002273FBB00;
    v7._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
    String.append(_:)(v7);
    type metadata accessor for UIFontDescriptorSymbolicTraits(0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id FMPFSKLabelNode.init(experienceType:style:text:position:normalizedIndex:)(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  outlined init with take of FMPFSKLabelNodeStyle?(a2, (uint64_t)v51);
  uint64_t v16 = v51[0];
  uint64_t v15 = v51[1];
  id v17 = (id)v51[2];
  double v18 = *(double *)&v51[3];
  uint64_t v19 = v51[4];
  double v20 = *(double *)&v51[5];
  double v21 = *(double *)&v51[6];
  char v22 = v52;
  v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFSKLabelNode_experienceType] = *a1;
  outlined init with take of FMPFSKLabelNodeStyle?(a2, (uint64_t)v53);
  if (v54)
  {
    int v23 = v22 & 1;
    uint64_t v24 = v7;
  }
  else
  {
    uint64_t v25 = one-time initialization token for r1NoAR;
    uint64_t v26 = v7;
    if (v25 != -1) {
      swift_once();
    }
    uint64_t v16 = static FMPFSKLabelNodeStyle.r1NoAR;
    uint64_t v15 = *(void *)algn_26817C668;
    Swift::String v27 = (void *)qword_26817C670;
    double v18 = *(double *)&qword_26817C678;
    double v20 = *((double *)&xmmword_26817C680 + 1);
    uint64_t v19 = xmmword_26817C680;
    double v21 = *(double *)&qword_26817C690;
    int v23 = byte_26817C698;
    swift_bridgeObjectRetain();
    id v17 = v27;
  }
  Swift::String v28 = &v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFSKLabelNode_style];
  *(void *)Swift::String v28 = v16;
  *((void *)v28 + 1) = v15;
  *((void *)v28 + 2) = v17;
  *((double *)v28 + 3) = v18;
  *((void *)v28 + 4) = v19;
  *((double *)v28 + 5) = v20;
  *((double *)v28 + 6) = v21;
  int v49 = v23;
  v28[56] = v23;
  *(double *)&v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFSKLabelNode_normalizedIndex] = a7;
  id v29 = objc_allocWithZone(MEMORY[0x263F17BF0]);
  outlined retain of FMPFSKLabelNodeStyle?(a2, (void (*)(void, void, void, void, void, void, void, void))outlined copy of FMPFSKLabelNodeStyle?);
  swift_bridgeObjectRetain_n();
  id v30 = v17;
  uint64_t v31 = (void *)MEMORY[0x22A677130](v16, v15);
  swift_bridgeObjectRelease();
  id v32 = objc_msgSend(v29, sel_initWithFontNamed_, v31);

  objc_msgSend(v32, sel_setFontSize_, v18);
  objc_msgSend(v32, sel_setFontColor_, v30);
  uint64_t v33 = (void *)MEMORY[0x22A677130](a3, a4);
  objc_msgSend(v32, sel_setText_, v33);

  objc_msgSend(v32, sel_setVerticalAlignmentMode_, 1);
  objc_msgSend(v32, sel_setHorizontalAlignmentMode_, v19);
  objc_msgSend(v32, sel_setNumberOfLines_, 1);
  *(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFSKLabelNode_labelNode] = v32;
  id v34 = v32;

  v50.receiver = v7;
  v50.super_class = (Class)type metadata accessor for FMPFSKLabelNode();
  id v35 = objc_msgSendSuper2(&v50, sel_init);
  objc_msgSend(v35, sel_addChild_, v34);
  id v36 = v35;
  uint64_t v37 = (void *)MEMORY[0x22A677130](a3, a4);
  objc_msgSend(v36, sel_setName_, v37);

  v38._uint64_t countAndFlagsBits = 49;
  v38._object = (void *)0xE100000000000000;
  Swift::Bool v39 = String.hasSuffix(_:)(v38);
  swift_bridgeObjectRelease();
  double v40 = 0.0;
  if (v39)
  {
    id v41 = objc_msgSend(v34, sel_horizontalAlignmentMode, 0.0);
    double v40 = 0.0;
    if (v41 == (id)2)
    {
      objc_msgSend(v34, sel_fontSize, 0.0);
      double v40 = v42 * -0.125;
    }
  }
  if (v49) {
    double v43 = 0.0;
  }
  else {
    double v43 = v21;
  }
  if (v49) {
    double v44 = 0.0;
  }
  else {
    double v44 = v20;
  }
  double v45 = v44 + a5 + v40;
  double v46 = v43 + a6;
  id v47 = v36;
  objc_msgSend(v47, sel_setPosition_, v45, v46);
  outlined retain of FMPFSKLabelNodeStyle?(a2, (void (*)(void, void, void, void, void, void, void, void))outlined consume of FMPFSKLabelNodeStyle?);

  swift_bridgeObjectRelease();
  return v47;
}

uint64_t FMPFSKLabelNode.description.getter()
{
  unsigned int v1 = v0;
  int v2 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  uint64_t v3 = _Pointer.debugDescription.getter();
  uint64_t v5 = specialized BidirectionalCollection.suffix(_:)(6, v3, v4);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = MEMORY[0x22A677190](v5, v7, v9, v11);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 30768;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  id v15 = objc_msgSend(v0, sel_name);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int v2 = v18;
  }
  else
  {
    uint64_t v17 = 0;
  }
  v19._uint64_t countAndFlagsBits = v17;
  v19._object = v2;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x3E4025202CLL;
  v20._object = (void *)0xE500000000000000;
  String.append(_:)(v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_2273F4A20;
  unsigned int v22 = objc_msgSend(v1, sel_isHidden);
  unint64_t v23 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v24 = 0x656C6269736976;
  if (v22) {
    uint64_t v24 = 0x6E6564646968;
  }
  unint64_t v25 = 0xE700000000000000;
  *(void *)(v21 + 56) = MEMORY[0x263F8D310];
  *(void *)(v21 + 64) = v23;
  if (v22) {
    unint64_t v25 = 0xE600000000000000;
  }
  *(void *)(v21 + 32) = v24;
  *(void *)(v21 + 40) = v25;
  uint64_t v26 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v26;
}

void FMPFSKLabelNode.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  unsigned int v1 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMPFSKLabelNode_labelNode);
}

id FMPFSKLabelNode.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKLabelNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKLabelNode()
{
  return self;
}

uint64_t outlined init with take of FMPFSKLabelNodeStyle?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FMPFSKLabelNodeStyle?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined copy of FMPFSKLabelNodeStyle?(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    id v3 = a3;
  }
}

uint64_t outlined retain of FMPFSKLabelNodeStyle?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

void outlined consume of FMPFSKLabelNodeStyle?(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
  }
}

double one-time initialization function for default()
{
  id v0 = objc_msgSend(self, sel_whiteColor);
  id v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.6);

  double result = 0.5;
  static FMPFRingViewStyle.default = xmmword_2273F51F0;
  qword_268179270 = 0x3FC41B2F769CF0E0;
  qword_268179278 = (uint64_t)v1;
  return result;
}

{
  void *v0;
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double result;

  id v0 = self;
  id v1 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x263F835B8]);
  objc_super v2 = UIFont.font(with:)(2);

  id v3 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x263F835E0]);
  uint64_t v4 = UIFont.font(with:)(2);

  uint64_t v5 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x263F83628]);
  uint64_t v6 = UIFont.font(with:)(2);

  uint64_t v7 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x263F83570]);
  uint64_t v8 = UIFont.font(with:)(2);

  *(void *)&static FMFindingViewStyle.default = v2;
  *((void *)&static FMFindingViewStyle.default + 1) = v4;
  qword_26817C590 = v6;
  unk_26817C598 = v8;
  xmmword_26817C5A0 = xmmword_2273F5590;
  unk_26817C5B0 = xmmword_2273F55A0;
  xmmword_26817C5C0 = xmmword_2273F55B0;
  unk_26817C5D0 = xmmword_2273F55C0;
  xmmword_26817C5E0 = xmmword_2273F55D0;
  unk_26817C5F0 = xmmword_2273F55E0;
  double result = 111.0;
  xmmword_26817C600 = xmmword_2273F55F0;
  qword_26817C610 = 0x4014000000000000;
  return result;
}

{
  id v0;
  id v1;
  double result;

  id v0 = objc_msgSend(self, sel_whiteColor);
  id v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.8);

  static FMR1GlyphButtonStyle.default = xmmword_2273F5970;
  qword_26817C630 = 0x4026000000000000;
  qword_26817C638 = (uint64_t)v1;
  double result = 1.15;
  xmmword_26817C640 = xmmword_2273F5980;
  qword_26817C650 = 0x3FE0000000000000;
  return result;
}

id FMPFRingView.init(sceneSize:diskRadiusScale:verticalOffset:)(uint64_t a1, char a2, double a3, double a4, double a5)
{
  uint64_t v11 = &v5[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_style];
  uint64_t v12 = one-time initialization token for default;
  Swift::String v13 = v5;
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_268179270;
  id v15 = (void *)qword_268179278;
  *(_OWORD *)uint64_t v11 = static FMPFRingViewStyle.default;
  *((void *)v11 + 2) = v14;
  *((void *)v11 + 3) = v15;
  *(void *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScale] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngle] = 0;
  *(void *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngle] = 0;
  uint64_t v16 = (double *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_sceneSize];
  double *v16 = a3;
  v16[1] = a4;
  double v17 = *(double *)&a1;
  if (a2) {
    double v17 = 0.0;
  }
  *(double *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_verticalOffset] = v17;
  if (a4 >= a3) {
    double v18 = a3;
  }
  else {
    double v18 = a4;
  }
  *(double *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_diskRadius] = v18 * 0.5 * a5;
  id v19 = v15;
  *(void *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_opacitySpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  *(void *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngleSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3FA015BF9217271ALL, 0, 0, 1);
  *(void *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngleSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3FA015BF9217271ALL, 0, 0, 1);
  *(void *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScaleSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);

  v36.receiver = v13;
  v36.super_class = (Class)type metadata accessor for FMPFRingView();
  id v20 = objc_msgSendSuper2(&v36, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v21 = self;
  id v22 = v20;
  id v23 = objc_msgSend(v21, sel_clearColor);
  objc_msgSend(v22, sel_setBackgroundColor_, v23);

  CGAffineTransformMakeRotation(&v35, -1.57079633);
  objc_msgSend(v22, sel_setTransform_, &v35);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.default);
  id v25 = v22;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    Swift::String v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(void *)&v35.a = v29;
    *(_DWORD *)Swift::String v28 = 136315138;
    id v30 = objc_msgSend(v25, sel_description);
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227326000, v26, v27, "🧭 FMPFRingView%s: init", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v29, -1, -1);
    MEMORY[0x22A6785E0](v28, -1, -1);
  }
  else
  {
  }
  return v25;
}

id FMPFRingView.__deallocating_deinit()
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
  id v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v13 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    id v7 = objc_msgSend(v2, sel_description);
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227326000, v3, v4, "🧭 FMPFRingView%s: deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v6, -1, -1);
    MEMORY[0x22A6785E0](v5, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = (objc_class *)type metadata accessor for FMPFRingView();
  v14.receiver = v2;
  v14.super_class = v11;
  return objc_msgSendSuper2(&v14, sel_dealloc);
}

Swift::Void __swiftcall FMPFRingView.updateWithDeltaTime(_:)(Swift::Double a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  *(Swift::Double *)(v11 + 24) = a1;
  uint64_t v12 = self;
  uint64_t v13 = v1;
  if (objc_msgSend(v12, sel_isMainThread))
  {
    closure #1 in FMPFRingView.updateWithDeltaTime(_:)(v13, a1);
    swift_release();
  }
  else
  {
    type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    objc_super v14 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = partial apply for closure #1 in FMPFRingView.updateWithDeltaTime(_:);
    *(void *)(v15 + 24) = v11;
    aBlock[4] = partial apply for closure #2 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_52;
    uint64_t v16 = _Block_copy(aBlock);
    uint64_t v19 = v7;
    double v17 = v16;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A677410](0, v10, v6, v17);
    _Block_release(v17);
    swift_release();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v19);
  }
}

id closure #1 in FMPFRingView.updateWithDeltaTime(_:)(char *a1, Swift::Double a2)
{
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_opacitySpring;
  uint64_t v5 = *(void *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_opacitySpring];
  if (!FMPFFluidSpring.isStable.getter())
  {
    FLSpring.step(_:)(a2);
    *(unsigned char *)(v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    uint64_t v6 = *(void *)&a1[v4];
    uint64_t v7 = (double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    if (vabdd_f64(v7[35] + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v7 + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v6+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))double v8 = *v7 + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o); {
    else
    }
      double v8 = v7[35] + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    uint64_t v9 = self;
    objc_msgSend(v9, sel_begin);
    objc_msgSend(v9, sel_setDisableActions_, 1);
    objc_msgSend(a1, sel_setAlpha_, v8);
    objc_msgSend(v9, sel_commit);
  }
  uint64_t v10 = OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngleSpring;
  uint64_t v11 = *(void *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngleSpring];
  if (!FMPFFluidSpring.isStable.getter() || !FMPFFluidSpring.isStable.getter() || !FMPFFluidSpring.isStable.getter())
  {
    FLSpring.step(_:)(a2);
    *(unsigned char *)(v11 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    uint64_t v12 = OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngleSpring;
    uint64_t v13 = *(void *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngleSpring];
    FLSpring.step(_:)(a2);
    *(unsigned char *)(v13 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    uint64_t v14 = OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScaleSpring;
    uint64_t v15 = *(void *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScaleSpring];
    FLSpring.step(_:)(a2);
    *(unsigned char *)(v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    uint64_t v16 = *(void *)&a1[v10];
    double v17 = (double *)(v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    if (vabdd_f64(v17[35] + *(double *)(v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v17 + *(double *)(v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v16+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))double v18 = *v17 + *(double *)(v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o); {
    else
    }
      double v18 = v17[35] + *(double *)(v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    uint64_t v19 = *(void *)&a1[v12];
    id v20 = (double *)(v19 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    if (vabdd_f64(v20[35] + *(double *)(v19 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v20 + *(double *)(v19 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v19+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))double v21 = *v20 + *(double *)(v19 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o); {
    else
    }
      double v21 = v20[35] + *(double *)(v19 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    uint64_t v22 = *(void *)&a1[v14];
    id v23 = (double *)(v22 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    double v24 = *v23 + *(double *)(v22 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    if (vabdd_f64(v23[35] + *(double *)(v22 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v24) <= *(double *)(v22 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
      double v24 = v23[35] + *(double *)(v22 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    }
    *(double *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngle] = v18;
    *(double *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngle] = v21;
    *(double *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScale] = v24;
  }
  return objc_msgSend(a1, sel_setNeedsDisplay);
}

uint64_t FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:)(uint64_t a1, char a2, char a3, Swift::Double a4, Swift::Double a5)
{
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t result = MEMORY[0x270FA5388]();
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (fabs(a5) >= a4)
  {
    uint64_t v29 = v17;
    uint64_t v30 = v12;
    char v20 = a2 & 1;
    BOOL v21 = (a2 & 1) != 0;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a1;
    *(unsigned char *)(v22 + 24) = v21;
    char v23 = a3 & 1;
    *(unsigned char *)(v22 + 25) = v23;
    *(void *)(v22 + 32) = v5;
    *(Swift::Double *)(v22 + 40) = a4;
    *(Swift::Double *)(v22 + 48) = a5;
    double v24 = self;
    id v25 = v5;
    if (objc_msgSend(v24, sel_isMainThread))
    {
      closure #1 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:)(a1, v20, v23, v25, a4, a5);
      return swift_release();
    }
    else
    {
      type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v26 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = partial apply for closure #1 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
      *(void *)(v27 + 24) = v22;
      aBlock[4] = partial apply for closure #2 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
      aBlock[5] = v27;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_43;
      Swift::String v28 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock[0] = MEMORY[0x263F8EE78];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x22A677410](0, v19, v14, v28);
      _Block_release(v28);
      swift_release();

      (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v19, v15);
    }
  }
  return result;
}

void closure #1 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:)(uint64_t a1, char a2, char a3, char *a4, Swift::Double a5, Swift::Double a6)
{
  if (a2) {
    *(double *)&a1 = 0.0;
  }
  uint64_t v10 = *(void *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngleSpring];
  if (a3)
  {
    uint64_t v11 = v10 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)uint64_t v11 = a5;
    *(unsigned char *)(v11 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
    uint64_t v12 = *(void *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngleSpring]
        + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)uint64_t v12 = a6;
    *(unsigned char *)(v12 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
    uint64_t v13 = *(void *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScaleSpring]
        + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(double *)uint64_t v13 = *(double *)&a1;
    *(unsigned char *)(v13 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    FLSpring.resetImmediately(toValue:)(a5);
    *(unsigned char *)(v10 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    uint64_t v14 = *(void *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngleSpring];
    FLSpring.resetImmediately(toValue:)(a6);
    *(unsigned char *)(v14 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    uint64_t v15 = *(void *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScaleSpring];
    FLSpring.resetImmediately(toValue:)(*(Swift::Double *)&a1);
    *(unsigned char *)(v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    *(Swift::Double *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngle] = a5;
    *(Swift::Double *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngle] = a6;
    *(double *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScale] = *(double *)&a1;
    objc_msgSend(a4, sel_bounds);
    objc_msgSend(a4, sel_drawRect_);
  }
}

uint64_t FMPFRingView.setOpacity(_:sprung:)(uint64_t a1, char a2, char a3)
{
  char v6 = a2 & 1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(unsigned char *)(v13 + 24) = v6;
  *(unsigned char *)(v13 + 25) = a3;
  *(void *)(v13 + 32) = v3;
  uint64_t v14 = self;
  uint64_t v15 = v3;
  if (objc_msgSend(v14, sel_isMainThread))
  {
    closure #1 in FMPFRingView.setOpacity(_:sprung:)(a1, v6, a3 & 1, v15);
    return swift_release();
  }
  else
  {
    type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v17 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = partial apply for closure #1 in FMPFRingView.setOpacity(_:sprung:);
    *(void *)(v18 + 24) = v13;
    aBlock[4] = partial apply for closure #2 in FMPFRingView.setOpacity(_:sprung:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_1;
    uint64_t v19 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A677410](0, v12, v9, v19);
    _Block_release(v19);
    swift_release();

    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v20);
  }
}

void closure #1 in FMPFRingView.setOpacity(_:sprung:)(uint64_t a1, char a2, char a3, char *a4)
{
  if (a2) {
    *(double *)&a1 = 0.0;
  }
  uint64_t v5 = *(void *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_opacitySpring];
  if (a3)
  {
    uint64_t v6 = v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(double *)uint64_t v6 = *(double *)&a1;
    *(unsigned char *)(v6 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    FLSpring.resetImmediately(toValue:)(*(Swift::Double *)&a1);
    *(unsigned char *)(v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    uint64_t v8 = self;
    objc_msgSend(v8, sel_begin);
    objc_msgSend(v8, sel_setDisableActions_, 1);
    objc_msgSend(a4, sel_setAlpha_, *(double *)&a1);
    objc_msgSend(v8, sel_commit);
  }
}

uint64_t type metadata accessor for FMPFRingView()
{
  return self;
}

void destroy for FMPFRingViewStyle(uint64_t a1)
{
}

uint64_t initializeWithCopy for FMPFRingViewStyle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  id v4 = v3;
  return a1;
}

void *assignWithCopy for FMPFRingViewStyle(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v3 = (void *)a2[3];
  id v4 = (void *)a1[3];
  a1[3] = v3;
  id v5 = v3;

  return a1;
}

uint64_t assignWithTake for FMPFRingViewStyle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for FMPFRingViewStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMPFRingViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for FMPFRingViewStyle()
{
  return &unk_26DB4B148;
}

uint64_t sub_2273B20BC()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in FMPFRingView.setOpacity(_:sprung:)()
{
  closure #1 in FMPFRingView.setOpacity(_:sprung:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(unsigned char *)(v0 + 25), *(char **)(v0 + 32));
}

uint64_t sub_2273B2108()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in FMPFRingView.setOpacity(_:sprung:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t sub_2273B21D8()
{
  return MEMORY[0x270FA0238](v0, 56, 7);
}

void partial apply for closure #1 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:)()
{
  closure #1 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(unsigned char *)(v0 + 25), *(char **)(v0 + 32), *(Swift::Double *)(v0 + 40), *(Swift::Double *)(v0 + 48));
}

uint64_t sub_2273B2228()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

id partial apply for closure #1 in FMPFRingView.updateWithDeltaTime(_:)()
{
  return closure #1 in FMPFRingView.updateWithDeltaTime(_:)(*(char **)(v0 + 16), *(Swift::Double *)(v0 + 24));
}

void specialized FMPFRingView.draw(_:)()
{
  objc_msgSend(v0, sel_bounds);
  double Width = CGRectGetWidth(v17);
  double v2 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_verticalOffset];
  objc_msgSend(v0, sel_bounds);
  double Height = CGRectGetHeight(v18);
  double v4 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngle];
  double v5 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngle];
  uint64_t v6 = &v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_style];
  double v7 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_style + 16];
  if (v7 + v7 < vabdd_f64(v4, v5))
  {
    double v8 = Height * 0.5;
    double v9 = Width * 0.5 - v2;
    double v10 = -v7;
    if (v4 <= v5) {
      double v11 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_style + 16];
    }
    else {
      double v11 = -v7;
    }
    if (v4 > v5) {
      double v10 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_style + 16];
    }
    id v12 = objc_msgSend(self, sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, v4 > v5, v9, v8, *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_diskRadius]* (*(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScale] + 1.0), v10 - v4, v11 - v5);
    if (v12)
    {
      double v13 = *((double *)v6 + 1);
      id v15 = v12;
      objc_msgSend(v15, sel_setLineWidth_, v13);
      objc_msgSend(v15, sel_setLineCapStyle_, 1);
      objc_msgSend(*((id *)v6 + 3), sel_setStroke);
      id v14 = objc_msgSend(self, sel_clearColor);
      objc_msgSend(v14, sel_setFill);

      objc_msgSend(v15, sel_stroke);
    }
  }
}

uint64_t FMFindingMeasurement.description.getter()
{
  uint64_t v1 = (uint64_t)v0;
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v13);
  uint64_t v11 = v13[1];
  uint64_t v12 = v13[0];
  double v9 = (void *)v13[3];
  double v10 = (void *)v13[2];
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)&v14);
  unint64_t v2 = 0xE300000000000000;
  uint64_t v3 = 7104878;
  uint64_t v4 = 7496038;
  switch(v16)
  {
    case 1:
      goto LABEL_4;
    case 2:
      break;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v4 = 1918985582;
      break;
    case 4:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v4 = 1701995880;
      break;
    case 5:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v4 = 0x646E756F66;
      break;
    default:
      uint64_t v30 = v14;
      char v31 = v15 & 1;
      uint64_t v32 = v16;
      uint64_t v33 = v17;
      uint64_t v34 = v18;
      char v35 = v19 & 1;
      uint64_t v36 = v20;
      char v37 = v21 & 1;
      char v38 = v22 & 1;
      uint64_t v39 = v23;
      char v40 = v24 & 1;
      char v41 = v25 & 1;
      char v42 = v26 & 1;
      uint64_t v43 = v27;
      uint64_t v44 = v28;
      char v45 = v29 & 1;
      outlined copy of FMFindingDistance?(v12, v11, v10, v9);
      uint64_t v3 = FMFindingDistance.description.getter();
      unint64_t v2 = v5;
LABEL_4:
      unint64_t v6 = v2;
      String.append(_:)(*(Swift::String *)&v3);
      outlined release of FMFindingMeasurement(v1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of FMFindingMeasurement);
      swift_bridgeObjectRelease();
      uint64_t v4 = 0x3A65736963657270;
      unint64_t v2 = 0xE900000000000020;
      break;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_2273F4A20;
  *(void *)(v7 + 56) = MEMORY[0x263F8D310];
  *(void *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v7 + 32) = v4;
  *(void *)(v7 + 40) = v2;
  return String.init(format:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingTrend(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingTrend()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FMFindingTrend()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingTrend()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FMFindingTrend@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FMFindingTrend.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FMFindingTrend(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x6E776F6E6B6E75;
  switch(*v1)
  {
    case 1:
      uint64_t v3 = 0x6973616572636E69;
      unint64_t v2 = 0xEA0000000000676ELL;
      goto LABEL_3;
    case 2:
      *a1 = 0x6973616572636564;
      a1[1] = 0xEA0000000000676ELL;
      break;
    case 3:
      *a1 = 0x656C62617473;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance FMFindingTrend()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FMFindingTrend()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingMeasurement.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingMeasurement.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FMFindingMeasurement.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingMeasurement.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FMFindingMeasurement.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FMFindingMeasurement.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FMFindingMeasurement.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701869940;
  if (*v1) {
    uint64_t v2 = 0x65636E6174736964;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FMFindingMeasurement.CodingKeys()
{
  if (*v0) {
    return 0x65636E6174736964;
  }
  else {
    return 1701869940;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FMFindingMeasurement.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FMFindingMeasurement.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance FMFindingMeasurement.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FMFindingMeasurement.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FMFindingMeasurement.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t FMFindingMeasurement.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  outlined init with take of FMFindingMeasurement(v2, (uint64_t)v51);
  uint64_t v35 = v51[1];
  uint64_t v36 = v51[0];
  uint64_t v33 = (void *)v51[3];
  uint64_t v34 = (void *)v51[2];
  uint64_t v31 = v51[5];
  uint64_t v32 = v51[4];
  uint64_t v29 = v51[7];
  uint64_t v30 = v51[6];
  uint64_t v27 = v51[9];
  uint64_t v28 = v51[8];
  uint64_t v25 = v51[11];
  uint64_t v26 = v51[10];
  int v24 = v52;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FMFindingMeasurement.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  char v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of FMFindingMeasurement(v2, (uint64_t)v53);
  uint64_t v8 = v54;
  switch(v54)
  {
    case 2:
      LOBYTE(v38) = 0;
      goto LABEL_9;
    case 3:
      LOBYTE(v38) = 0;
      goto LABEL_9;
    case 4:
      LOBYTE(v38) = 0;
      goto LABEL_9;
    case 5:
      LOBYTE(v38) = 0;
LABEL_9:
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      break;
    default:
      uint64_t v9 = v53[0];
      uint64_t v13 = v53[1];
      uint64_t v22 = v56;
      uint64_t v23 = v55;
      uint64_t v20 = v58;
      uint64_t v21 = v57;
      uint64_t v18 = v60;
      uint64_t v19 = v59;
      uint64_t v16 = v62;
      uint64_t v17 = v61;
      uint64_t v15 = v63;
      int v14 = v64;
      LOBYTE(v38) = 0;
      outlined copy of FMFindingDistance?(v36, v35, v34, v33);
      uint64_t v10 = v65;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v10)
      {
        uint64_t v38 = v9;
        uint64_t v39 = v13;
        uint64_t v40 = v8;
        uint64_t v41 = v23;
        uint64_t v42 = v22;
        uint64_t v43 = v21;
        uint64_t v44 = v20;
        uint64_t v45 = v19;
        uint64_t v46 = v18;
        uint64_t v47 = v17;
        uint64_t v48 = v16;
        uint64_t v49 = v15;
        char v50 = v14;
        char v37 = 1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FMFindingDistance?);
        lazy protocol witness table accessor for type FMFindingDistance? and conformance <A> A?();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t result = outlined release of FMFindingMeasurement((uint64_t)v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of FMFindingMeasurement);
      break;
  }
  return result;
}

void FMFindingMeasurement.hash(into:)()
{
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v19);
  uint64_t v17 = v19[1];
  uint64_t v18 = v19[0];
  uint64_t v15 = (void *)v19[3];
  uint64_t v16 = (void *)v19[2];
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)&v20);
  uint64_t v1 = v22;
  switch(v22)
  {
    case 2:
      Swift::UInt v2 = 1;
      goto LABEL_6;
    case 3:
      Swift::UInt v2 = 2;
      goto LABEL_6;
    case 4:
      Swift::UInt v2 = 3;
      goto LABEL_6;
    case 5:
      Swift::UInt v2 = 4;
LABEL_6:
      Hasher._combine(_:)(v2);
      break;
    default:
      uint64_t v13 = v20;
      char v14 = v21;
      uint64_t v3 = v23;
      uint64_t v4 = v24;
      char v5 = v25;
      uint64_t v6 = v26;
      __int16 v7 = v27;
      uint64_t v8 = v28;
      int v9 = v29;
      uint64_t v10 = v30;
      uint64_t v11 = v31;
      char v12 = v32;
      Hasher._combine(_:)(5uLL);
      if (v1 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v33 = v13;
        char v34 = v14 & 1;
        uint64_t v35 = v1;
        uint64_t v36 = v3;
        uint64_t v37 = v4;
        char v38 = v5 & 1;
        uint64_t v39 = v6;
        __int16 v40 = v7 & 0x101;
        uint64_t v41 = v8;
        __int16 v42 = v9 & 0x101;
        char v43 = BYTE2(v9) & 1;
        uint64_t v44 = v10;
        uint64_t v45 = v11;
        char v46 = v12 & 1;
        Hasher._combine(_:)(1u);
        outlined copy of FMFindingDistance?(v18, v17, v16, v15);
        FMFindingDistance.hash(into:)();
      }
      outlined release of FMFindingMeasurement((uint64_t)v0, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of FMFindingMeasurement);
      break;
  }
}

uint64_t FMFindingMeasurement.calculateTrend(from:)(uint64_t a1)
{
  outlined init with take of FMFindingMeasurement(v1, (uint64_t)v13);
  switch(v14)
  {
    case 2:
      outlined init with take of FMFindingMeasurement?(a1, (uint64_t)&v8);
      if (v9 == 6) {
        return 1;
      }
      outlined init with take of FMFindingMeasurement(&v8, (uint64_t)v10);
      outlined init with take of FMFindingMeasurement(v10, (uint64_t)v11);
      BOOL v3 = v12 >= 6;
      char v4 = 8 * v12;
      unint64_t v5 = 0x20202030000;
      goto LABEL_12;
    case 3:
      outlined init with take of FMFindingMeasurement?(a1, (uint64_t)&v8);
      if (v9 == 6) {
        return 1;
      }
      outlined init with take of FMFindingMeasurement(&v8, (uint64_t)v10);
      outlined init with take of FMFindingMeasurement(v10, (uint64_t)v11);
      BOOL v3 = v12 >= 6;
      unint64_t v5 = 0x20203010000;
      char v4 = 8 * v12;
      goto LABEL_12;
    case 4:
      outlined init with take of FMFindingMeasurement?(a1, (uint64_t)&v8);
      if (v9 == 6) {
        return 1;
      }
      outlined init with take of FMFindingMeasurement(&v8, (uint64_t)v10);
      outlined init with take of FMFindingMeasurement(v10, (uint64_t)v11);
      BOOL v3 = v12 >= 6;
      char v4 = 8 * v12;
      unint64_t v5 = 0x20301010000;
      goto LABEL_12;
    case 5:
      outlined init with take of FMFindingMeasurement?(a1, (uint64_t)&v8);
      if (v9 == 6) {
        return 1;
      }
      outlined init with take of FMFindingMeasurement(&v8, (uint64_t)v10);
      outlined init with take of FMFindingMeasurement(v10, (uint64_t)v11);
      BOOL v3 = v12 >= 6;
      char v4 = 8 * v12;
      unint64_t v5 = 0x30101010000;
LABEL_12:
      unint64_t v7 = v5 >> v4;
      if (v3) {
        return 0;
      }
      else {
        return v7;
      }
    default:
      return 0;
  }
}

Swift::Int FMFindingMeasurement.hashValue.getter()
{
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v20);
  uint64_t v18 = v20[1];
  uint64_t v19 = v20[0];
  uint64_t v16 = (void *)v20[3];
  uint64_t v17 = (void *)v20[2];
  Hasher.init(_seed:)();
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)&v21);
  uint64_t v1 = v23;
  switch(v23)
  {
    case 2:
      Swift::UInt v2 = 1;
      goto LABEL_6;
    case 3:
      Swift::UInt v2 = 2;
      goto LABEL_6;
    case 4:
      Swift::UInt v2 = 3;
      goto LABEL_6;
    case 5:
      Swift::UInt v2 = 4;
LABEL_6:
      Hasher._combine(_:)(v2);
      break;
    default:
      char v4 = v22;
      uint64_t v15 = v21;
      uint64_t v5 = v24;
      uint64_t v6 = v25;
      char v7 = v26;
      uint64_t v8 = v27;
      __int16 v9 = v28;
      uint64_t v10 = v29;
      int v11 = v30;
      uint64_t v12 = v31;
      uint64_t v13 = v32;
      char v14 = v33;
      Hasher._combine(_:)(5uLL);
      if (v1 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v34 = v15;
        char v35 = v4 & 1;
        uint64_t v36 = v1;
        uint64_t v37 = v5;
        uint64_t v38 = v6;
        char v39 = v7 & 1;
        uint64_t v40 = v8;
        __int16 v41 = v9 & 0x101;
        uint64_t v42 = v10;
        __int16 v43 = v11 & 0x101;
        char v44 = BYTE2(v11) & 1;
        uint64_t v45 = v12;
        uint64_t v46 = v13;
        char v47 = v14 & 1;
        Hasher._combine(_:)(1u);
        outlined copy of FMFindingDistance?(v19, v18, v17, v16);
        FMFindingDistance.hash(into:)();
      }
      outlined release of FMFindingMeasurement((uint64_t)v0, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of FMFindingMeasurement);
      break;
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingMeasurement(long long *a1, long long *a2)
{
  outlined init with take of FMFindingMeasurement(a1, (uint64_t)v4);
  outlined init with take of FMFindingMeasurement(a2, (uint64_t)v5);
  return specialized static FMFindingMeasurement.== infix(_:_:)(v4, v5);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingMeasurement()
{
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v2);
  return FMFindingMeasurement.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance FMFindingMeasurement()
{
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v1);
  FMFindingMeasurement.hash(into:)();
}

uint64_t outlined init with take of FMFindingMeasurement(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  long long v4 = a1[3];
  long long v5 = a1[4];
  long long v6 = a1[5];
  *(unsigned char *)(a2 + 96) = *((unsigned char *)a1 + 96);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  return a2;
}

uint64_t outlined init with take of FMFindingMeasurement?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FMFindingMeasurement?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for FMFindingTrend(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2273B3A34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFindingTrend()
{
  return &type metadata for FMFindingTrend;
}

void destroy for FMFindingMeasurement(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  LODWORD(v2) = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF) {
    uint64_t v2 = *(void *)(a1 + 16);
  }
  if ((int)v2 - 1 <= 0 && v1 != (void *)1)
  {

    uint64_t v5 = *(void **)(a1 + 24);
  }
}

uint64_t initializeWithCopy for FMFindingMeasurement(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a2 + 16);
  LODWORD(v4) = -1;
  if ((unint64_t)v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if ((int)v4 - 1 > 0 || v3 == (void *)1)
  {
    long long v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    __int16 v9 = *(void **)(a2 + 24);
    uint64_t v8 = *(void *)(a2 + 32);
    *(void *)(a1 + 16) = v3;
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v8;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
    uint64_t v10 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v10;
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    id v11 = v3;
    id v12 = v9;
  }
  return a1;
}

uint64_t assignWithCopy for FMFindingMeasurement(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  LODWORD(v5) = -1;
  if ((unint64_t)v4 >= 0xFFFFFFFF) {
    LODWORD(v6) = -1;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  int v7 = v6 - 1;
  unint64_t v8 = a2[2];
  if (v8 < 0xFFFFFFFF) {
    uint64_t v5 = a2[2];
  }
  int v9 = v5 - 1;
  if (v7 > 0)
  {
    if (v9 <= 0)
    {
LABEL_13:
      if (v8 != 1)
      {
        uint64_t v16 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v16;
        uint64_t v17 = (void *)a2[2];
        *(void *)(a1 + 16) = v17;
        uint64_t v18 = (void *)a2[3];
        *(void *)(a1 + 24) = v18;
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(void *)(a1 + 48) = a2[6];
        *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
        *(unsigned char *)(a1 + 57) = *((unsigned char *)a2 + 57);
        *(void *)(a1 + 64) = a2[8];
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(unsigned char *)(a1 + 74) = *((unsigned char *)a2 + 74);
        *(void *)(a1 + 80) = a2[10];
        uint64_t v19 = a2[11];
        *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
        *(void *)(a1 + 88) = v19;
        id v20 = v17;
        id v21 = v18;
        return a1;
      }
    }
LABEL_14:
    long long v10 = *(_OWORD *)a2;
    long long v11 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)a1 = v10;
    long long v12 = *((_OWORD *)a2 + 3);
    long long v13 = *((_OWORD *)a2 + 4);
    long long v14 = *((_OWORD *)a2 + 5);
    *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 48) = v12;
    return a1;
  }
  if (v9 > 0)
  {
    if (v4 != (void *)1)
    {
    }
    goto LABEL_14;
  }
  if (v4 == (void *)1) {
    goto LABEL_13;
  }
  if (v8 == 1)
  {
    outlined destroy of FMFindingDistance(a1);
    long long v23 = *((_OWORD *)a2 + 1);
    long long v22 = *((_OWORD *)a2 + 2);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v23;
    *(_OWORD *)(a1 + 32) = v22;
    long long v25 = *((_OWORD *)a2 + 4);
    long long v24 = *((_OWORD *)a2 + 5);
    long long v26 = *((_OWORD *)a2 + 3);
    *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
    *(_OWORD *)(a1 + 64) = v25;
    *(_OWORD *)(a1 + 80) = v24;
    *(_OWORD *)(a1 + 48) = v26;
  }
  else
  {
    uint64_t v27 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)a1 = v27;
    uint64_t v28 = (void *)a2[2];
    *(void *)(a1 + 16) = v28;
    id v29 = v28;

    uint64_t v30 = *(void **)(a1 + 24);
    uint64_t v31 = (void *)a2[3];
    *(void *)(a1 + 24) = v31;
    id v32 = v31;

    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    *(unsigned char *)(a1 + 57) = *((unsigned char *)a2 + 57);
    *(void *)(a1 + 64) = a2[8];
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
    *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
    *(unsigned char *)(a1 + 74) = *((unsigned char *)a2 + 74);
    *(void *)(a1 + 80) = a2[10];
    uint64_t v33 = a2[11];
    *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
    *(void *)(a1 + 88) = v33;
  }
  return a1;
}

uint64_t assignWithTake for FMFindingMeasurement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  LODWORD(v5) = -1;
  if ((unint64_t)v4 < 0xFFFFFFFF) {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  if ((int)v5 - 1 <= 0)
  {
    unint64_t v10 = *(void *)(a2 + 16);
    LODWORD(v11) = -1;
    if (v10 < 0xFFFFFFFF) {
      uint64_t v11 = *(void *)(a2 + 16);
    }
    if ((int)v11 - 1 <= 0)
    {
      if (v4 != (void *)1)
      {
        if (v10 != 1)
        {
          *(void *)a1 = *(void *)a2;
          *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
          *(void *)(a1 + 16) = v10;

          long long v12 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);

          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
          *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
          *(void *)(a1 + 64) = *(void *)(a2 + 64);
          *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
          *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
          *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
          *(void *)(a1 + 80) = *(void *)(a2 + 80);
          *(void *)(a1 + 88) = *(void *)(a2 + 88);
          *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
          return a1;
        }
        outlined destroy of FMFindingDistance(a1);
      }
    }
    else if (v4 != (void *)1)
    {
    }
  }
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for FMFindingMeasurement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF9 && *(unsigned char *)(a1 + 97)) {
    return (*(_DWORD *)a1 + 2147483642);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = (v3 - 1) & ~(((int)v3 - 1) >> 31);
  if (v4 >= 5) {
    return v4 - 4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FMFindingMeasurement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(unsigned char *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFA) {
      *(unsigned char *)(result + 97) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 5;
    }
  }
  return result;
}

uint64_t getEnumTag for FMFindingMeasurement(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 - 1) & ~(((int)v1 - 1) >> 31);
}

double destructiveInjectEnumTag for FMFindingMeasurement(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(a1 + 88) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 96) = 0;
    *(void *)a1 = a2 - 2147483646;
  }
  else if (a2)
  {
    *(void *)(a1 + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFindingMeasurement()
{
  return &type metadata for FMFindingMeasurement;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingMeasurement()
{
  unint64_t v1 = (void *)v0[2];
  uint64_t v7 = v0[1];
  uint64_t v8 = *v0;
  int v9 = (void *)v0[3];
  Hasher.init(_seed:)();
  switch((unint64_t)v1)
  {
    case 2uLL:
      Swift::UInt v2 = 1;
      goto LABEL_6;
    case 3uLL:
      Swift::UInt v2 = 2;
      goto LABEL_6;
    case 4uLL:
      Swift::UInt v2 = 3;
      goto LABEL_6;
    case 5uLL:
      Swift::UInt v2 = 4;
LABEL_6:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(5uLL);
      if (v1 == (void *)1)
      {
        Hasher._combine(_:)(0);
        uint64_t v4 = v8;
        uint64_t v5 = v7;
        uint64_t v6 = 1;
      }
      else
      {
        Hasher._combine(_:)(1u);
        outlined copy of FMFindingDistance?(v8, v7, v1, v9);
        FMFindingDistance.hash(into:)();
        uint64_t v5 = v7;
        uint64_t v4 = v8;
        uint64_t v6 = (uint64_t)v1;
      }
      outlined consume of FMFindingMeasurement(v4, v5, (void *)v6, v9);
      break;
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance FMFindingMeasurement@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized FMFindingMeasurement.init(from:)(a1, (uint64_t)v5);
  if (!v2) {
    return outlined init with take of FMFindingMeasurement(v5, a2);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FMFindingMeasurement(void *a1)
{
  outlined init with take of FMFindingMeasurement(v1, (uint64_t)v4);
  return FMFindingMeasurement.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FMFindingMeasurement()
{
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v2);
  return FMFindingMeasurement.description.getter();
}

BOOL specialized static FMFindingMeasurement.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with take of FMFindingMeasurement(a2, (uint64_t)v87);
  uint64_t v56 = v87[1];
  uint64_t v58 = v87[0];
  unsigned __int8 v52 = (void *)v87[3];
  uint64_t v54 = (void *)v87[2];
  outlined init with take of FMFindingMeasurement(a1, (uint64_t)v101);
  switch(v102)
  {
    case 2:
      outlined init with take of FMFindingMeasurement(a2, (uint64_t)&v61);
      return v63 == 2;
    case 3:
      outlined init with take of FMFindingMeasurement(a2, (uint64_t)&v61);
      return v63 == 3;
    case 4:
      outlined init with take of FMFindingMeasurement(a2, (uint64_t)&v61);
      return v63 == 4;
    case 5:
      outlined init with take of FMFindingMeasurement(a2, (uint64_t)&v61);
      return v63 == 5;
    default:
      uint64_t v50 = (uint64_t)a1;
      uint64_t v51 = v102;
      uint64_t v4 = v101[0];
      uint64_t v5 = v101[1];
      uint64_t v6 = v103;
      uint64_t v7 = v104;
      uint64_t v8 = v105;
      uint64_t v9 = v106;
      uint64_t v10 = v107;
      uint64_t v11 = v108;
      uint64_t v47 = v109;
      uint64_t v48 = v110;
      uint64_t v49 = v111;
      char v12 = v112;
      outlined init with take of FMFindingMeasurement(a2, (uint64_t)&v88);
      uint64_t v13 = v90;
      if ((unint64_t)(v90 - 2) < 4) {
        return 0;
      }
      uint64_t v39 = v6;
      uint64_t v40 = v7;
      uint64_t v41 = v8;
      uint64_t v42 = v9;
      uint64_t v43 = v11;
      char v44 = v12;
      uint64_t v14 = v88;
      uint64_t v15 = v89;
      uint64_t v16 = v91;
      uint64_t v17 = v92;
      uint64_t v18 = v93;
      uint64_t v19 = v94;
      uint64_t v20 = v95;
      uint64_t v21 = v96;
      uint64_t v22 = v97;
      uint64_t v23 = v98;
      uint64_t v24 = v99;
      char v25 = v100;
      uint64_t v26 = v51;
      if (v51 == 1)
      {
        if (v90 == 1) {
          return 1;
        }
      }
      else
      {
        if (v90 != 1)
        {
          uint64_t v113 = v4;
          char v114 = v5 & 1;
          uint64_t v115 = v51;
          uint64_t v116 = v6;
          uint64_t v117 = v7;
          char v118 = v8 & 1;
          uint64_t v119 = v9;
          __int16 v120 = v10 & 0x101;
          uint64_t v121 = v11;
          __int16 v122 = v47 & 0x101;
          char v123 = BYTE2(v47) & 1;
          uint64_t v124 = v48;
          uint64_t v125 = v49;
          char v126 = v44 & 1;
          uint64_t v61 = v88;
          LOBYTE(v62) = v89 & 1;
          uint64_t v63 = v90;
          uint64_t v64 = v91;
          uint64_t v65 = v92;
          LOBYTE(v66) = v93 & 1;
          uint64_t v67 = v94;
          LOWORD(v68) = v95 & 0x101;
          uint64_t v69 = v96;
          LOWORD(v70) = v97 & 0x101;
          BYTE2(v70) = BYTE2(v97) & 1;
          uint64_t v71 = v98;
          uint64_t v72 = v99;
          char v73 = v100 & 1;
          outlined release of FMFindingMeasurement((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of FMFindingMeasurement);
          outlined release of FMFindingMeasurement(v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of FMFindingMeasurement);
          BOOL v3 = specialized static FMFindingDistance.== infix(_:_:)((uint64_t)&v113, (uint64_t)&v61);
          outlined release of FMFindingMeasurement((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of FMFindingMeasurement);
          outlined release of FMFindingMeasurement(v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of FMFindingMeasurement);
          return v3;
        }
        uint64_t v45 = v92;
        uint64_t v28 = v56;
        uint64_t v27 = v58;
        uint64_t v57 = v91;
        uint64_t v59 = v93;
        id v29 = v54;
        uint64_t v55 = v89;
        uint64_t v30 = v52;
        uint64_t v53 = v88;
        uint64_t v46 = v4;
        uint64_t v31 = v98;
        uint64_t v32 = v97;
        uint64_t v33 = v96;
        uint64_t v34 = v95;
        uint64_t v35 = v94;
        uint64_t v36 = v5;
        char v37 = v100;
        outlined copy of FMFindingDistance?(v27, v28, v29, v30);
        uint64_t v26 = v51;
        uint64_t v14 = v53;
        uint64_t v15 = v55;
        uint64_t v16 = v57;
        uint64_t v17 = v45;
        uint64_t v18 = v59;
        char v25 = v37;
        uint64_t v5 = v36;
        uint64_t v19 = v35;
        uint64_t v13 = 1;
        uint64_t v20 = v34;
        uint64_t v21 = v33;
        uint64_t v22 = v32;
        uint64_t v23 = v31;
        uint64_t v4 = v46;
      }
      uint64_t v61 = v4;
      uint64_t v62 = v5;
      uint64_t v63 = v26;
      uint64_t v64 = v39;
      uint64_t v65 = v40;
      uint64_t v66 = v41;
      uint64_t v67 = v42;
      uint64_t v68 = v10;
      uint64_t v69 = v43;
      uint64_t v70 = v47;
      uint64_t v71 = v48;
      uint64_t v72 = v49;
      char v73 = v44;
      uint64_t v74 = v14;
      uint64_t v75 = v15;
      uint64_t v76 = v13;
      uint64_t v77 = v16;
      uint64_t v78 = v17;
      uint64_t v79 = v18;
      uint64_t v80 = v19;
      uint64_t v81 = v20;
      uint64_t v82 = v21;
      uint64_t v83 = v22;
      uint64_t v84 = v23;
      uint64_t v85 = v24;
      char v86 = v25;
      outlined release of FMFindingMeasurement((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of FMFindingMeasurement);
      outlined release of FMFindingMeasurement(v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of FMFindingMeasurement);
      outlined release of (FMFindingDistance?, FMFindingDistance?)((uint64_t)&v61);
      return 0;
  }
}

unint64_t specialized FMFindingTrend.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FMFindingTrend.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t specialized FMFindingMeasurement.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FMFindingMeasurement.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  LOBYTE(v33) = 0;
  switch(KeyedDecodingContainer.decode(_:forKey:)())
  {
    case 1:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v10 = 0;
      uint64_t v28 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      char v14 = 0;
      uint64_t v15 = 2;
      break;
    case 2:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v10 = 0;
      uint64_t v28 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      char v14 = 0;
      uint64_t v15 = 3;
      break;
    case 3:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v10 = 0;
      uint64_t v28 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      char v14 = 0;
      uint64_t v15 = 4;
      break;
    case 4:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v10 = 0;
      uint64_t v28 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      char v14 = 0;
      uint64_t v15 = 5;
      break;
    case 5:
      char v50 = 1;
      lazy protocol witness table accessor for type FMFindingDistance and conformance FMFindingDistance();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v31 = v34;
      uint64_t v32 = v33;
      uint64_t v23 = v35;
      uint64_t v29 = v37;
      uint64_t v30 = v36;
      uint64_t v27 = v38;
      uint64_t v28 = v42;
      uint64_t v25 = v46;
      uint64_t v24 = v47;
      int v49 = v48;
      if (v41) {
        uint64_t v16 = 256;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v10 = v16 | v40;
      if (v44) {
        uint64_t v17 = 256;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = v17 | v43;
      uint64_t v19 = 0x10000;
      if (!v45) {
        uint64_t v19 = 0;
      }
      uint64_t v11 = v18 | v19;
      uint64_t v26 = v39;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v12 = v25;
      uint64_t v13 = v24;
      uint64_t v15 = v23;
      char v14 = v49;
      break;
    default:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x2273B4D60);
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  uint64_t v20 = v31;
  *(void *)a2 = v32;
  *(void *)(a2 + 8) = v20;
  uint64_t v21 = v30;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v21;
  uint64_t v22 = v27;
  *(void *)(a2 + 32) = v29;
  *(void *)(a2 + 40) = v22;
  *(void *)(a2 + 48) = v26;
  *(void *)(a2 + 56) = v10;
  *(void *)(a2 + 64) = v28;
  *(void *)(a2 + 72) = v11;
  *(void *)(a2 + 80) = v12;
  *(void *)(a2 + 88) = v13;
  *(unsigned char *)(a2 + 96) = v14;
  return result;
}

unint64_t lazy protocol witness table accessor for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FMFindingDistance? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type FMFindingDistance? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type FMFindingDistance? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FMFindingDistance?);
    lazy protocol witness table accessor for type FMFindingDistance and conformance FMFindingDistance();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined release of FMFindingMeasurement(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 96);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMFindingMeasurement.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FMFindingMeasurement.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2273B50F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for FMFindingMeasurement.CodingKeys(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

void *type metadata accessor for FMFindingMeasurement.CodingKeys()
{
  return &unk_26DB4B470;
}

void destroy for FMFindingViewStyle(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for FMFindingViewStyle(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  unsigned int v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  id v10 = v3;
  id v11 = v4;
  id v12 = v5;
  id v13 = v6;
  return a1;
}

uint64_t assignWithCopy for FMFindingViewStyle(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  long long v7 = *(void **)(a2 + 8);
  long long v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  id v10 = *(void **)(a2 + 16);
  id v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  id v12 = v10;

  id v13 = *(void **)(a2 + 24);
  char v14 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v13;
  id v15 = v13;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for FMFindingViewStyle(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  long long v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMFindingViewStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMFindingViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFindingViewStyle()
{
  return &type metadata for FMFindingViewStyle;
}

void one-time initialization function for baseRadius()
{
  static FMPFSKBTRangeDiskNode.baseRadius = 0x4084000000000000;
}

void FMPFSKBTRangeDiskNode.setup()()
{
  if (one-time initialization token for baseRadius != -1) {
    swift_once();
  }
  *(void *)&v11.size.width = static FMPFSKBTRangeDiskNode.baseRadius;
  v11.origin.CGFloat x = *(double *)&static FMPFSKBTRangeDiskNode.baseRadius * -0.5;
  v11.origin.CGFloat y = *(double *)&static FMPFSKBTRangeDiskNode.baseRadius * -0.5;
  *(void *)&v11.size.height = static FMPFSKBTRangeDiskNode.baseRadius;
  CGPathRef v1 = CGPathCreateWithEllipseInRect(v11, 0);
  objc_msgSend(v0, sel_setPath_, v1);

  objc_msgSend(v0, sel_setLineWidth_, 1.0);
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_systemBlueColor);
  long long v4 = self;
  id v5 = objc_msgSend(v4, sel_traitCollectionWithUserInterfaceStyle_, 2);
  id v6 = objc_msgSend(v3, sel_resolvedColorWithTraitCollection_, v5);

  objc_msgSend(v0, sel_setFillColor_, v6);
  id v7 = objc_msgSend(v2, sel_systemBlueColor);
  id v8 = objc_msgSend(v4, sel_traitCollectionWithUserInterfaceStyle_, 2);
  id v9 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v8);

  objc_msgSend(v0, sel_setStrokeColor_, v9);
}

Swift::Void __swiftcall FMPFSKBTRangeDiskNode.render()()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_opacitySpring];
  uint64_t v2 = (double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  double v3 = *v2 + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  if (vabdd_f64(v2[35] + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v3) <= *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
    double v3 = v2[35] + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  }
  objc_msgSend(v0, sel_setAlpha_, v3);
  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_sizeSpring];
  id v5 = (double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  double v6 = *v5;
  double v7 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  double v8 = v5[35];
  double v9 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  double v10 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
  id v11 = objc_msgSend(v0, sel_scene);
  if (v11)
  {
    id v12 = v11;
    if (vabdd_f64(v8 + v9, v6 + v7) > v10) {
      double v13 = v6 + v7;
    }
    else {
      double v13 = v8 + v9;
    }
    objc_msgSend(v11, sel_size);
    double v15 = v14;

    double v16 = round(v13 * v15);
    if (one-time initialization token for baseRadius != -1) {
      swift_once();
    }
    double v17 = v16 / *(double *)&static FMPFSKBTRangeDiskNode.baseRadius;
  }
  else
  {
    double v17 = 1.0;
  }
  objc_msgSend(v0, sel_setScale_, v17);
}

void FMPFSKBTRangeDiskNode.__ivar_destroyer()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_opacitySpring);
}

id FMPFSKBTRangeDiskNode.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKBTRangeDiskNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKBTRangeDiskNode()
{
  return self;
}

id FMPFSKNode.__deallocating_deinit()
{
  return FMPFSKNode.__deallocating_deinit(type metadata accessor for FMPFSKNode);
}

uint64_t type metadata accessor for FMPFSKNode()
{
  return self;
}

void FMPFSKSpriteNode.setBrightness(_:with:)(void *a1, double a2)
{
  v10[1] = *(double *)MEMORY[0x263EF8340];
  uint64_t v4 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI16FMPFSKSpriteNode_brightness];
  *uint64_t v4 = a2;
  *((unsigned char *)v4 + 8) = 0;
  id v5 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI16FMPFSKSpriteNode_previousBrightness];
  if ((v2[OBJC_IVAR____TtC10TVRemoteUI16FMPFSKSpriteNode_previousBrightness + 8] & 1) != 0
    || vabdd_f64(*v5, a2) >= 2.22044605e-16)
  {
    *id v5 = a2;
    *((unsigned char *)v5 + 8) = 0;
    double v9 = 1.0;
    v10[0] = 1.0;
    double v7 = 1.0;
    double v8 = 1.0;
    objc_msgSend(a1, sel_getRed_green_blue_alpha_, v10, &v9, &v8, &v7);
    id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithRed_green_blue_alpha_, v10[0] * a2, v9 * a2, v8 * a2, v7);
    objc_msgSend(v2, sel_setColor_, v6);
  }
}

id FMPFSKSpriteNode.__deallocating_deinit()
{
  return FMPFSKNode.__deallocating_deinit(type metadata accessor for FMPFSKSpriteNode);
}

uint64_t type metadata accessor for FMPFSKSpriteNode()
{
  return self;
}

id FMPFSKShapeNode.__deallocating_deinit()
{
  return FMPFSKNode.__deallocating_deinit(type metadata accessor for FMPFSKShapeNode);
}

id FMPFSKNode.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKShapeNode()
{
  return self;
}

id FMPFSKBTRangeDotNode.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI20FMPFSKBTRangeDotNode_sizeSpring;
  objc_super v2 = v0;
  *(void *)&v0[v1] = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(0, 0, 0x3F50624DD2F1A9FCLL, 0);

  type metadata accessor for FMPFView();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v4 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v5 = (void *)MEMORY[0x22A677130](0xD000000000000016, 0x80000002273FB020);
  id v6 = objc_msgSend(self, sel_imageNamed_inBundle_compatibleWithTraitCollection_, v5, v4, 0);

  if (v6)
  {
    id v7 = objc_msgSend(self, sel_textureWithImage_, v6);

    id v4 = v6;
  }
  else
  {
    id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F17C38]), sel_init);
  }

  double v8 = self;
  id v9 = v7;
  id v10 = objc_msgSend(v8, sel_whiteColor);
  objc_msgSend(v9, sel_size);
  double v12 = v11;
  double v14 = v13;
  v17.receiver = v2;
  v17.super_class = (Class)type metadata accessor for FMPFSKBTRangeDotNode();
  id v15 = objc_msgSendSuper2(&v17, sel_initWithTexture_color_size_, v9, v10, v12, v14);

  return v15;
}

Swift::Void __swiftcall FMPFSKBTRangeDotNode.update(delta:)(Swift::Double delta)
{
  objc_super v2 = v1;
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI20FMPFSKBTRangeDotNode_sizeSpring];
  FLSpring.step(_:)(delta);
  *(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  id v4 = (double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  if (vabdd_f64(v4[35] + *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v4 + *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v3+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))double v5 = *v4 + *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o); {
  else
  }
    double v5 = v4[35] + *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  id v6 = objc_msgSend(v2, sel_scene);
  double v7 = 1.0;
  if (v6)
  {
    double v8 = v6;
    objc_msgSend(v6, sel_size);
    double v10 = v9;

    id v11 = objc_msgSend(v2, sel_texture);
    if (v11)
    {
      double v12 = v11;
      objc_msgSend(v11, sel_size);
      double v14 = v13;

      double v7 = round(v5 * v10) / v14;
    }
  }
  objc_msgSend(v2, sel_setScale_, v7);
}

void FMPFSKBTRangeDotNode.setDotNodeSizeFactor(_:sprung:)(char a1, Swift::Double a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI20FMPFSKBTRangeDotNode_sizeSpring];
  if (a1)
  {
    uint64_t v5 = v4 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)uint64_t v5 = a2;
    *(unsigned char *)(v5 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    FLSpring.resetImmediately(toValue:)(a2);
    *(unsigned char *)(v4 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    id v6 = (double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    if (vabdd_f64(v6[35] + *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v6 + *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v4+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))double v7 = *v6 + *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o); {
    else
    }
      double v7 = v6[35] + *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    id v8 = objc_msgSend(v3, sel_scene);
    double v9 = 1.0;
    if (v8)
    {
      double v10 = v8;
      objc_msgSend(v8, sel_size);
      double v12 = v11;

      id v13 = objc_msgSend(v3, sel_texture);
      if (v13)
      {
        double v14 = v13;
        objc_msgSend(v13, sel_size);
        double v16 = v15;

        double v9 = round(v7 * v12) / v16;
      }
    }
    objc_msgSend(v3, sel_setScale_, v9);
  }
}

Swift::Void __swiftcall FMPFSKBTRangeDotNode.pulse(duration:)(Swift::Double duration)
{
  objc_super v2 = v1;
  if (!UIAccessibilityIsReduceMotionEnabled())
  {
    id v4 = objc_msgSend(v1, sel_texture);
    if (v4)
    {
      uint64_t v5 = v4;
      type metadata accessor for FMPFSKSpriteNode();
      id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_2273F4460;
      id v8 = self;
      double v9 = self;
      id v10 = v6;
      id v11 = objc_msgSend(v9, sel_rangeWithConstantValue_, 0.0);
      id v12 = objc_msgSend(v8, sel_distance_toNode_, v11, v2);

      *(void *)(v7 + 32) = v12;
      specialized Array._endMutation()();
      type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for SKConstraint);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v10, sel_setConstraints_, isa, v7);

      objc_msgSend(v10, sel_setTexture_, v5);
      id v14 = v10;
      objc_msgSend(v5, sel_size);
      objc_msgSend(v14, sel_setSize_);

      objc_msgSend(v14, sel_setScale_, 1.0);
      double v15 = self;
      id v16 = objc_msgSend(v15, sel_scaleTo_duration_, 2.0, duration);
      objc_msgSend(v16, sel_setTimingMode_, 2);
      id v17 = objc_msgSend(v15, sel_fadeAlphaTo_duration_, 0.0, duration);
      objc_msgSend(v17, sel_setTimingMode_, 2);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_2273F4480;
      *(void *)(v18 + 32) = v17;
      *(void *)(v18 + 40) = v16;
      v26[0] = v18;
      specialized Array._endMutation()();
      type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for SKAction);
      id v19 = v17;
      id v20 = v16;
      Class v21 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v22 = objc_msgSend(v15, sel_group_, v21, v26[0]);

      objc_msgSend(v2, sel_addChild_, v14);
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = v14;
      v26[4] = partial apply for closure #2 in FMPFSKPeripheralDotNode.pulse(_:animated:);
      v26[5] = v23;
      v26[0] = MEMORY[0x263EF8330];
      v26[1] = 1107296256;
      v26[2] = thunk for @escaping @callee_guaranteed () -> ();
      v26[3] = &block_descriptor_2;
      uint64_t v24 = _Block_copy(v26);
      id v25 = v14;
      swift_release();
      objc_msgSend(v25, sel_runAction_completion_, v22, v24);
      _Block_release(v24);
    }
  }
}

void FMPFSKBTRangeDotNode.__ivar_destroyer()
{
}

id FMPFSKBTRangeDotNode.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKBTRangeDotNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKBTRangeDotNode()
{
  return self;
}

uint64_t sub_2273B6B38()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

char *FMPFSKPatternFragmentNode.init(experienceType:name:color:randomFactor:texture:imageName:minScaleFactor:maxScaleFactor:explodedDiskRadius:peripheralDiskRadius:innerPeripheralDiskRadius:explodedPosition:peripheralPosition:composedPosition:conformedToExplodedFactor:conformationFactor:scalingFactor:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, char a17, double a18, char a19, uint64_t a20,uint64_t a21,char a22,double a23,double a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  int v36 = *a1;
  uint64_t v37 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode;
  id v38 = objc_allocWithZone((Class)type metadata accessor for FMPFSKNode());
  uint64_t v39 = v30;
  unsigned __int8 v40 = v38;
  int v41 = v36;
  *(void *)&v30[v37] = objc_msgSend(v40, sel_init);
  *(void *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbScatterRandomOffsetFrameCounter] = 0;
  uint64_t v42 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition];
  *(void *)uint64_t v42 = 0;
  *((void *)v42 + 1) = 0;
  char v43 = 1;
  v42[16] = 1;
  char v44 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialExplodedPosition];
  *(void *)char v44 = 0;
  *((void *)v44 + 1) = 0;
  v44[16] = 1;
  char v45 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength];
  *(void *)char v45 = 0;
  v45[8] = 1;
  uint64_t v46 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength];
  *(void *)uint64_t v46 = 0;
  v46[8] = 1;
  *(void *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction] = 0;
  uint64_t v47 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition];
  *(void *)uint64_t v47 = 0;
  *((void *)v47 + 1) = 0;
  v47[16] = 1;
  unsigned __int8 v48 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_relativeHeading];
  *(void *)unsigned __int8 v48 = 0;
  v48[8] = 1;
  uint64_t v168 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetXSpring;
  *(void *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetXSpring] = 0;
  uint64_t v169 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetYSpring;
  *(void *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetYSpring] = 0;
  uint64_t v170 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactorSpring;
  *(void *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactorSpring] = 0;
  int v49 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition];
  *(void *)int v49 = 0;
  *((void *)v49 + 1) = 0;
  v49[16] = 1;
  char v50 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition];
  *(void *)char v50 = 0;
  *((void *)v50 + 1) = 0;
  v50[16] = 1;
  uint64_t v51 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition];
  *(void *)uint64_t v51 = 0;
  *((void *)v51 + 1) = 0;
  v51[16] = 1;
  v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_useAlternateScaling] = 0;
  unsigned __int8 v52 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationTimingFunction];
  *(_OWORD *)unsigned __int8 v52 = 0u;
  *((_OWORD *)v52 + 1) = 0u;
  v52[32] = 1;
  uint64_t v53 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor];
  *(void *)uint64_t v53 = 0;
  v178 = v53;
  char v53[8] = 1;
  uint64_t v54 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
  *(void *)uint64_t v54 = 0;
  v177 = v54;
  v54[8] = 1;
  uint64_t v55 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_scalingFactor];
  *(void *)uint64_t v55 = 0;
  v176 = v55;
  v55[8] = 1;
  v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceScatterOffset] = 1;
  uint64_t v56 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffset];
  *(void *)uint64_t v56 = 0;
  *((void *)v56 + 1) = 0;
  v173 = v56;
  v56[16] = 1;
  uint64_t v57 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset];
  *(void *)uint64_t v57 = 0;
  *((void *)v57 + 1) = 0;
  v57[16] = 1;
  v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceHomingFactor] = 1;
  uint64_t v58 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactor];
  *(void *)uint64_t v58 = 0;
  v58[8] = 1;
  uint64_t v59 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor];
  *(void *)uint64_t v59 = 0;
  v59[8] = 1;
  uint64_t v60 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_trackOffset];
  *(void *)uint64_t v60 = 0;
  v60[8] = 1;
  *(void *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedAbsoluteHeading] = 0;
  v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_experienceType] = v36;
  if (v36 == 1)
  {
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    char v65 = 0;
    LOBYTE(v193[0]) = 1;
    LOBYTE(v192[0]) = 1;
    LOBYTE(v191[0]) = 1;
    LOBYTE(v190[0]) = 1;
    LOBYTE(v189[0]) = 1;
    LOBYTE(v188[0]) = 0;
    LOBYTE(v187[0]) = 0;
    LOBYTE(v186[0]) = 0;
    LOBYTE(v185[0]) = 0;
    LOBYTE(v184[0]) = 0;
    char v183 = 0;
    uint64_t v66 = 0x4010000000000000;
    char v67 = 0;
    uint64_t v68 = 0x3FF8000000000000;
    uint64_t v69 = 0x3FF0000000000000;
    char v70 = 0;
    uint64_t v71 = 0x4004000000000000;
    double v72 = 0.0;
    double v73 = 0.6;
    char v74 = 0;
  }
  else
  {
    uint64_t v71 = 0;
    uint64_t v69 = 0;
    uint64_t v68 = 0;
    uint64_t v66 = 0;
    LOBYTE(v193[0]) = 0;
    LOBYTE(v192[0]) = 0;
    LOBYTE(v191[0]) = 0;
    LOBYTE(v190[0]) = 0;
    LOBYTE(v189[0]) = 0;
    LOBYTE(v188[0]) = 1;
    LOBYTE(v187[0]) = 1;
    LOBYTE(v186[0]) = 1;
    LOBYTE(v185[0]) = 1;
    LOBYTE(v184[0]) = 1;
    char v183 = 1;
    char v65 = 1;
    char v67 = 1;
    uint64_t v64 = 0x3FF0000000000000;
    uint64_t v63 = 0x3FE6666666666666;
    uint64_t v61 = 0x3FB999999999999ALL;
    char v70 = 1;
    double v73 = 1.0;
    double v72 = 0.75;
    uint64_t v62 = 30;
    char v74 = 1;
    char v43 = 0;
  }
  uint64_t v75 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style];
  *(_OWORD *)uint64_t v75 = xmmword_2273F56A0;
  *((_OWORD *)v75 + 1) = xmmword_2273F56B0;
  __asm { FMOV            V2.2D, #0.5 }
  *((_OWORD *)v75 + 2) = _Q2;
  *((void *)v75 + 6) = 16;
  *((double *)v75 + 7) = v72;
  *((_OWORD *)v75 + 4) = xmmword_2273F56C0;
  *((_OWORD *)v75 + 5) = xmmword_2273F56D0;
  *((double *)v75 + 12) = v73;
  *((void *)v75 + 13) = 0x3FF0000000000000;
  *((void *)v75 + 14) = v61;
  v75[120] = v43;
  *(_DWORD *)(v75 + 121) = v193[0];
  *((_DWORD *)v75 + 31) = *(_DWORD *)((char *)v193 + 3);
  *((void *)v75 + 16) = v62;
  v75[136] = v43;
  *((_DWORD *)v75 + 35) = *(_DWORD *)((char *)v192 + 3);
  *(_DWORD *)(v75 + 137) = v192[0];
  *((void *)v75 + 18) = 0;
  v75[152] = v43;
  *((_DWORD *)v75 + 39) = *(_DWORD *)((char *)v191 + 3);
  *(_DWORD *)(v75 + 153) = v191[0];
  *((void *)v75 + 20) = v63;
  v75[168] = v43;
  *((_DWORD *)v75 + 43) = *(_DWORD *)((char *)v190 + 3);
  *(_DWORD *)(v75 + 169) = v190[0];
  *((void *)v75 + 22) = v64;
  v75[184] = v43;
  int v81 = v189[0];
  *((_DWORD *)v75 + 47) = *(_DWORD *)((char *)v189 + 3);
  *(_DWORD *)(v75 + 185) = v81;
  *((void *)v75 + 24) = v69;
  v75[200] = v65;
  int v82 = v188[0];
  *((_DWORD *)v75 + 51) = *(_DWORD *)((char *)v188 + 3);
  *(_DWORD *)(v75 + 201) = v82;
  *((void *)v75 + 26) = v69;
  v75[216] = v65;
  int v83 = v187[0];
  *((_DWORD *)v75 + 55) = *(_DWORD *)((char *)v187 + 3);
  *(_DWORD *)(v75 + 217) = v83;
  *((void *)v75 + 28) = v71;
  v75[232] = v65;
  int v84 = v186[0];
  *((_DWORD *)v75 + 59) = *(_DWORD *)((char *)v186 + 3);
  *(_DWORD *)(v75 + 233) = v84;
  *((void *)v75 + 30) = v69;
  v75[248] = v67;
  int v85 = v185[0];
  *((_DWORD *)v75 + 63) = *(_DWORD *)((char *)v185 + 3);
  *(_DWORD *)(v75 + 249) = v85;
  *((void *)v75 + 32) = v68;
  v75[264] = v70;
  int v86 = v184[0];
  *((_DWORD *)v75 + 67) = *(_DWORD *)((char *)v184 + 3);
  *(_DWORD *)(v75 + 265) = v86;
  *((void *)v75 + 34) = 0x3FE0000000000000;
  *((void *)v75 + 35) = v66;
  v75[288] = v74;
  v179 = v58;
  if (a4) {
    id v87 = a4;
  }
  else {
    id v87 = objc_msgSend(self, sel_whiteColor);
  }
  *(void *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_renderingColor] = v87;
  *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedDiskRadius] = a10;
  *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralDiskRadius] = a11;
  *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_innerPeripheralDiskRadius] = a12;
  if (v41 != 1)
  {
    uint64_t v92 = one-time initialization token for r1OrBT;
    id v93 = a4;
    if (v92 != -1) {
      swift_once();
    }
    uint64_t v91 = &byte_26817C7A0;
    goto LABEL_13;
  }
  uint64_t v89 = one-time initialization token for r1NoAR;
  id v90 = a4;
  if (v89 != -1) {
    goto LABEL_67;
  }
  while (1)
  {
    uint64_t v91 = &byte_26817C870;
LABEL_13:
    v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle] = *v91;
    if (a30) {
      uint64_t v94 = 0;
    }
    else {
      uint64_t v94 = a29;
    }
    a30 = (char)v179;
    *(void *)v178 = v94;
    v178[8] = 0;
    if (a32) {
      uint64_t v95 = 0;
    }
    else {
      uint64_t v95 = a31;
    }
    *(void *)v177 = v95;
    v177[8] = 0;
    if (a34) {
      uint64_t v96 = 0;
    }
    else {
      uint64_t v96 = a33;
    }
    *(void *)v176 = v96;
    v176[8] = 0;
    *(void *)v179 = 0;
    v179[8] = 0;
    double v97 = *(double *)&a8;
    if (a17) {
      double v97 = 1.0;
    }
    *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_minScaleFactor] = v97;
    double v98 = a18;
    if (a19) {
      double v98 = 1.0;
    }
    *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_maxScaleFactor] = v98;
    double v99 = *((double *)v75 + 8);
    double v100 = *((double *)v75 + 9);
    double v101 = v99 * (1.0 - v100);
    double v102 = 0.0;
    if (v101 < 0.0) {
      double v101 = 0.0;
    }
    *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedBrightness] = (1.0 - a9) * v101
                                                                                                 + fmin(v99 * (v100 + 1.0), 1.0)* a9;
    double v103 = *((double *)v75 + 10);
    double v104 = *((double *)v75 + 11);
    if (v103 * (1.0 - v104) >= 0.0) {
      double v102 = v103 * (1.0 - v104);
    }
    *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_nonConformedBrightness] = (1.0 - a9) * v102 + fmin(v103 * (v104 + 1.0), 1.0) * a9;
    double v105 = fmax(*((double *)v75 + 2) / 200.0 * a11, 1.0);
    if (v105 >= 0.0) {
      break;
    }
    __break(1u);
LABEL_67:
    swift_once();
  }
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(-v105, v105);
  uint64_t v107 = v106;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(-v105, v105);
  uint64_t v108 = (uint64_t *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialDisturbanceScatterOffset];
  uint64_t *v108 = v107;
  v108[1] = v109;
  *(void *)v173 = v107;
  *((void *)v173 + 1) = v109;
  v173[16] = 0;
  if ((v75[136] & 1) == 0)
  {
    uint64_t v110 = specialized static FMPFFluidSpring.slowSpringWith(initialValue:stableValueThreshold:)(v107, 0, 0x3FE0000000000000, 0);
    uint64_t v111 = *(void **)&v39[v168];
    *(void *)&v39[v168] = v110;

    if (v173[16]) {
      uint64_t v112 = 0;
    }
    else {
      uint64_t v112 = *((void *)v173 + 1);
    }
    uint64_t v113 = specialized static FMPFFluidSpring.slowSpringWith(initialValue:stableValueThreshold:)(v112, v173[16], 0x3FE0000000000000, 0);
    char v114 = *(void **)&v39[v169];
    *(void *)&v39[v169] = v113;

    uint64_t v115 = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(*(void *)v179, v179[8], 0x3F847AE147AE147BLL, 0, 0, 1);
    uint64_t v116 = *(void **)&v39[v170];
    *(void *)&v39[v170] = v115;
  }
  *(void *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_headingSpring] = specialized static FMPFFluidSpring.randomSpringWith(initialValue:randomFactor:stableValueThreshold:)(0, 0, *(uint64_t *)&a9, 0, 0x3FE0000000000000, 0);
  *(void *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_noiseSubSpring] = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(0, 0, 0, 1);
  if (a7)
  {
    type metadata accessor for FMPFView();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v118 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    swift_bridgeObjectRetain();
    uint64_t v119 = (void *)MEMORY[0x22A677130](a6, a7);
    swift_bridgeObjectRelease();
    id v120 = objc_msgSend(self, sel_imageNamed_inBundle_compatibleWithTraitCollection_, v119, v118, 0);

    if (v120)
    {
      id v121 = objc_msgSend(self, sel_textureWithImage_, v120);
      swift_bridgeObjectRelease();

      id v118 = v120;
    }
    else
    {
      id v121 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F17C38]), sel_init);
      swift_bridgeObjectRelease();
    }

    type metadata accessor for FMPFSKSpriteNode();
    id v127 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithTexture_, v121);
    uint64_t v128 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode;
    *(void *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode] = v127;
    id v124 = v127;
    objc_msgSend(v124, sel_size);
    double v130 = 0.5 - 1.0 / v129 * 0.5;
    objc_msgSend(*(id *)&v39[v128], sel_size);
    double v132 = 0.5 - 1.0 / v131 * 0.5;
    objc_msgSend(*(id *)&v39[v128], sel_size);
    double v134 = 1.0 / v133;
    objc_msgSend(*(id *)&v39[v128], sel_size);
    objc_msgSend(v124, sel_setCenterRect_, v130, v132, v134, 1.0 / v135);
  }
  else
  {
    type metadata accessor for FMPFSKSpriteNode();
    id v122 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    uint64_t v123 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode;
    *(void *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode] = v122;
    objc_msgSend(v122, sel_setTexture_, a5);
    id v124 = *(id *)&v39[v123];
    if (a5)
    {
      objc_msgSend(a5, sel_size);
    }
    else
    {
      double v126 = 0.0;
      double v125 = 0.0;
    }
    objc_msgSend(v124, sel_setSize_, v125, v126);
  }

  v182.receiver = v39;
  v182.super_class = (Class)type metadata accessor for FMPFSKPatternFragmentNode();
  v136 = (char *)objc_msgSendSuper2(&v182, sel_init);
  v137 = v136;
  if (a3)
  {
    v138 = (void *)MEMORY[0x22A677130](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v138 = 0;
  }
  objc_msgSend(v136, sel_setName_, v138);

  uint64_t v139 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode;
  objc_msgSend(v136, sel_addChild_, *(void *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode]);
  v140 = *(void **)&v136[v139];
  uint64_t v141 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode;
  objc_msgSend(v140, sel_addChild_, *(void *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode]);
  objc_msgSend(*(id *)&v136[v141], sel_setColorBlendFactor_, 1.0);
  double v142 = a23;
  double v143 = a24;
  char v144 = a25 & 1;
  if (a25)
  {
    double v143 = 0.0;
    double v142 = 0.0;
  }
  objc_msgSend(*(id *)&v136[v141], sel_setPosition_, v142, v143);
  v145 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition];
  *(void *)v145 = a20;
  *((void *)v145 + 1) = a21;
  v145[16] = a22 & 1;
  v146 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition];
  *(double *)v146 = a23;
  *((double *)v146 + 1) = a24;
  v146[16] = v144;
  v147 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition];
  *(void *)v147 = a26;
  *((void *)v147 + 1) = a27;
  v147[16] = a28 & 1;
  v148 = (double *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition];
  double *v148 = a23;
  v148[1] = a24;
  *((unsigned char *)v148 + 16) = v144;
  v149 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialExplodedPosition];
  *(void *)v149 = a20;
  *((void *)v149 + 1) = a21;
  v149[16] = a22 & 1;
  uint64_t v150 = FMPFSKPatternFragmentNode.calculateIntermediatePosition()();
  if (v152) {
    uint64_t v153 = *(void *)&a23;
  }
  else {
    uint64_t v153 = v150;
  }
  if (v152) {
    uint64_t v154 = *(void *)&a24;
  }
  else {
    uint64_t v154 = v151;
  }
  v155 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition];
  *(void *)v155 = v153;
  *((void *)v155 + 1) = v154;
  v155[16] = v152 & a25 & 1;
  uint64_t v156 = FMPFSKPatternFragmentNode.quadCurveBezierLength(from:endPoint:)(*(void *)v147, *((void *)v147 + 1), v147[16], v153, v154, v152 & a25 & 1);
  v157 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength];
  *(void *)v157 = v156;
  v157[8] = v158 & 1;
  uint64_t v159 = specialized FMPFSKPatternFragmentNode.arcLength(from:endPoint:)(*(void *)v155, *((void *)v155 + 1), v155[16], *(void *)v146, *((void *)v146 + 1), v146[16]);
  v160 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength];
  *(void *)v160 = v159;
  v160[8] = v161 & 1;
  v162 = (double *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
  if ((v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8] & 1) == 0) {
    FMPFSKPatternFragmentNode.applyConformationFactor(_:)(*v162);
  }
  if ((v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_scalingFactor + 8] & 1) == 0) {
    FMPFSKPatternFragmentNode.applyScalingFactor(_:)(*(double *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_scalingFactor]);
  }
  if ((v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffset + 16] & 1) == 0)
  {
    v163 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset];
    *(_OWORD *)v163 = *(_OWORD *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffset];
    v163[16] = 0;
    if (((_BYTE)v162[1] & 1) == 0) {
      FMPFSKPatternFragmentNode.applyConformationFactor(_:)(*v162);
    }
  }
  if ((v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactor + 8] & 1) == 0)
  {
    v164 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor];
    *(void *)v164 = *(void *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactor];
    v164[8] = 0;
  }
  double v165 = *(double *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_nonConformedBrightness];
  v166 = v136;
  objc_msgSend(v166, sel_setZPosition_, v165);

  return v166;
}

uint64_t FMPFSKPatternFragmentNode.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition];
  if (v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16])
  {
    uint64_t v3 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    uint64_t v4 = _Pointer.debugDescription.getter();
    uint64_t v6 = specialized BidirectionalCollection.suffix(_:)(6, v4, v5);
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = MEMORY[0x22A677190](v6, v8, v10, v12);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 30768;
    v14._object = (void *)0xE200000000000000;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 32;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    id v16 = objc_msgSend(v0, sel_name);
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v3 = v19;
    }
    else
    {
      uint64_t v18 = 0;
    }
    v40._uint64_t countAndFlagsBits = v18;
    v40._object = v3;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._uint64_t countAndFlagsBits = 0x3E4025202CLL;
    v41._object = (void *)0xE500000000000000;
    String.append(_:)(v41);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_2273F4A20;
    unsigned int v43 = objc_msgSend(v1, sel_isHidden);
    unint64_t v44 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v45 = 0x656C6269736976;
    if (v43) {
      uint64_t v45 = 0x6E6564646968;
    }
    unint64_t v46 = 0xE700000000000000;
    *(void *)(v42 + 56) = MEMORY[0x263F8D310];
    *(void *)(v42 + 64) = v44;
    if (v43) {
      unint64_t v46 = 0xE600000000000000;
    }
    *(void *)(v42 + 32) = v45;
    *(void *)(v42 + 40) = v46;
  }
  else
  {
    uint64_t v21 = *(void *)v2;
    uint64_t v20 = *((void *)v2 + 1);
    id v22 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v23._object = (void *)0x80000002273FC410;
    v23._uint64_t countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v23);
    uint64_t v24 = _Pointer.debugDescription.getter();
    uint64_t v26 = specialized BidirectionalCollection.suffix(_:)(6, v24, v25);
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = MEMORY[0x22A677190](v26, v28, v30, v32);
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 30768;
    v34._object = (void *)0xE200000000000000;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = 32;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    id v36 = objc_msgSend(v0, sel_name);
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v22 = v39;
    }
    else
    {
      uint64_t v38 = 0;
    }
    v47._uint64_t countAndFlagsBits = v38;
    v47._object = v22;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._uint64_t countAndFlagsBits = 0xD000000000000024;
    v48._object = (void *)0x80000002273FC430;
    String.append(_:)(v48);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_2273F56E0;
    uint64_t v50 = MEMORY[0x263F8EF38];
    *(void *)(v49 + 56) = MEMORY[0x263F8EF38];
    unint64_t v51 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(void *)(v49 + 64) = v51;
    *(void *)(v49 + 32) = v21;
    *(void *)(v49 + 96) = v50;
    *(void *)(v49 + 104) = v51;
    *(void *)(v49 + 72) = v20;
    unsigned int v52 = objc_msgSend(v1, sel_isHidden);
    unint64_t v53 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v54 = 0x656C6269736976;
    if (v52) {
      uint64_t v54 = 0x6E6564646968;
    }
    unint64_t v55 = 0xE700000000000000;
    *(void *)(v49 + 136) = MEMORY[0x263F8D310];
    *(void *)(v49 + 144) = v53;
    if (v52) {
      unint64_t v55 = 0xE600000000000000;
    }
    *(void *)(v49 + 112) = v54;
    *(void *)(v49 + 120) = v55;
  }
  uint64_t v56 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v56;
}

uint64_t FMPFSKPatternFragmentNode.calculateIntermediatePosition()()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16)) {
    goto LABEL_9;
  }
  double v1 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
  if (!*(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle))
  {
    uint64_t v3 = swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v3 = swift_bridgeObjectRelease();
  if ((v2 & 1) == 0)
  {
LABEL_9:
    *(double *)&uint64_t result = 0.0;
    return result;
  }
LABEL_6:
  double v4 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_innerPeripheralDiskRadius);
  double v5 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style);
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v3, 0.0, 3.14159265);
  double v7 = v6 * 0.25;
  double v8 = 2.0;
  if (v1 > 0.0) {
    double v8 = -2.0;
  }
  *(double *)&uint64_t result = v4 * __sincos_stret(v5 * (v8 * v7) + 1.57079633).__cosval;
  return result;
}

uint64_t FMPFSKPatternFragmentNode.positionOnCurvedPathWith(startPoint:controlPoint:endPoint:at:)()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle;
  if (!*(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle)) {
    return swift_bridgeObjectRelease();
  }
  char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2) {
    return result;
  }
  if (*(unsigned char *)(v0 + v1) && *(unsigned char *)(v0 + v1) == 1) {
    return swift_bridgeObjectRelease();
  }
  _stringCompareWithSmolCheck(_:_:expecting:)();
  return swift_bridgeObjectRelease();
}

uint64_t FMPFSKPatternFragmentNode.controlPoint(with:trackOffset:)(double a1)
{
  uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle)
    && *(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle) == 1)
  {
    swift_bridgeObjectRelease();
    return *(void *)&a1;
  }
  char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v4) {
    return *(void *)&a1;
  }
  if (*(unsigned char *)(v1 + v3))
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t FMPFSKPatternFragmentNode.quadCurveBezierLength(from:endPoint:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3 & 1) != 0 || (a6) {
    return 0;
  }
  double v7 = *(double *)&a1;
  uint64_t v9 = 1;
  *(double *)&uint64_t v10 = COERCE_DOUBLE(FMPFSKPatternFragmentNode.controlPoint(with:trackOffset:)(*(double *)&a1));
  char v12 = v11;
  uint64_t v13 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle;
  double v28 = *(double *)&v10;
  double v15 = v14;
  double v16 = 0.0;
  double v17 = *(double *)&a2;
  double v18 = v7;
  do
  {
    double v23 = (double)v9 * 0.0625;
    double v24 = 1.0 - v23;
    if (!*(unsigned char *)(v6 + v13)) {
      goto LABEL_10;
    }
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_12;
    }
    if (*(unsigned char *)(v6 + v13) && *(unsigned char *)(v6 + v13) == 1)
    {
LABEL_10:
      swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        goto LABEL_4;
      }
    }
LABEL_12:
    if (v12)
    {
LABEL_4:
      double v19 = v23 * *(double *)&a4 + v24 * v18;
      double v20 = v24 * v17;
      double v21 = v23 * *(double *)&a5;
      goto LABEL_5;
    }
    double v19 = v24 * (v23 * v28 + v24 * v18) + v23 * (v23 * *(double *)&a4 + v24 * v28);
    double v21 = v24 * (v23 * v15 + v24 * v17);
    double v20 = v23 * (v23 * *(double *)&a5 + v24 * v15);
LABEL_5:
    double v22 = v21 + v20;
    double v16 = v16 + sqrt((v22 - *(double *)&a2) * (v22 - *(double *)&a2) + (v19 - v7) * (v19 - v7));
    ++v9;
    *(double *)&a2 = v22;
    double v7 = v19;
  }
  while (v9 != 17);
  return *(void *)&v16;
}

void FMPFSKPatternFragmentNode.executePartPerimeterRotation(_:)(void *a1)
{
  if ((objc_msgSend(v1, sel_isHidden) & 1) == 0)
  {
    uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode]
       + OBJC_IVAR____TtC10TVRemoteUI16FMPFSKSpriteNode_brightness;
    if ((*(unsigned char *)(v3 + 8) & 1) == 0)
    {
      uint64_t v4 = *(void *)v3;
      if (!UIAccessibilityIsReduceMotionEnabled())
      {
        double v5 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode];
        uint64_t v6 = (void *)swift_allocObject();
        _OWORD v6[2] = a1;
        v6[3] = v4;
        v6[4] = v1;
        v11[4] = partial apply for closure #1 in FMPFSKPatternFragmentNode.executePartPerimeterRotation(_:);
        v11[5] = v6;
        v11[0] = MEMORY[0x263EF8330];
        v11[1] = 1107296256;
        _OWORD v11[2] = thunk for @escaping @callee_guaranteed () -> ();
        v11[3] = &block_descriptor_3;
        double v7 = _Block_copy(v11);
        id v8 = v5;
        id v9 = a1;
        uint64_t v10 = v1;
        swift_release();
        objc_msgSend(v8, sel_runAction_completion_, v9, v7);
        _Block_release(v7);
      }
    }
  }
}

Swift::Void __swiftcall FMPFSKPatternFragmentNode.setDotsFreeFromBearing()()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode)
       + OBJC_IVAR____TtC10TVRemoteUI16FMPFSKSpriteNode_brightness;
    if ((*(unsigned char *)(v2 + 8) & 1) == 0)
    {
      uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction;
      if (!*(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction))
      {
        long double v5 = *(double *)v1;
        long double v4 = *((double *)v1 + 1);
        double v6 = *(double *)v2;
        char v7 = specialized RandomNumberGenerator.next<A>(upperBound:)(11);
        uint64_t v8 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style;
        double v9 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 32) * 100.0;
        if (v9 < 0.0)
        {
          __break(1u);
        }
        else
        {
          char v10 = v7;
          double v11 = hypot(v5, v4);
          double v12 = dbl_2273F4470[(v10 & 1) == 0];
          specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v13, 0.0, v9);
          id v15 = objc_msgSend(self, sel_rotateByAngle_duration_, v12 / (double)*(uint64_t *)(v8 + 48), (v11 + v11)* 3.14159265/ (*(double *)(v8 + 24)* (v14 / -100.0 + 1.0))/ (double)*(uint64_t *)(v8 + 48));
          objc_msgSend(v15, sel_setTimingMode_, 0);
          objc_msgSend(v15, sel_setSpeed_, v6 * *(double *)(v8 + 40));
          double v16 = *(void **)(v0 + v3);
          *(void *)(v0 + v3) = v15;
          id v17 = v15;

          FMPFSKPatternFragmentNode.executePartPerimeterRotation(_:)(v17);
        }
      }
    }
  }
}

Swift::Void __swiftcall FMPFSKPatternFragmentNode.setDotsBoundToBearing()()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction;
  if (*(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction])
  {
    uint64_t v2 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode;
    objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode], sel_removeAllActions);
    uint64_t v3 = *(void **)&v0[v1];
    *(void *)&v0[v1] = 0;

    long double v4 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition];
    if ((v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16] & 1) == 0)
    {
      long double v5 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition];
      if ((v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition + 16] & 1) == 0)
      {
        uint64_t v7 = *(void *)v4;
        long double v6 = *((double *)v4 + 1);
        long double v9 = *(double *)v5;
        long double v8 = *((double *)v5 + 1);
        double v10 = fmod(*(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedAbsoluteHeading]/ 180.0* 3.14159265, 6.28318531);
        if (v10 <= 3.14159265)
        {
          if (v10 < -3.14159265) {
            double v10 = v10 + 6.28318531;
          }
        }
        else
        {
          double v10 = v10 + -6.28318531;
        }
        objc_msgSend(*(id *)&v0[v2], sel_zRotation);
        double v12 = fmod(v11, 6.28318531);
        if (v12 <= 3.14159265)
        {
          if (v12 < -3.14159265) {
            double v12 = v12 + 6.28318531;
          }
        }
        else
        {
          double v12 = v12 + -6.28318531;
        }
        double v13 = v10 + v12;
        double v14 = hypot(*(long double *)&v7, v6);
        long double v15 = atan2(v6, *(long double *)&v7);
        __double2 v16 = __sincos_stret(v13 + v15);
        *(double *)long double v4 = v14 * v16.__cosval;
        *((double *)v4 + 1) = v14 * v16.__sinval;
        v4[16] = 0;
        FMPFSKPatternFragmentNode.peripheralPosition.didset();
        double v17 = hypot(v9, v8);
        long double v18 = atan2(v8, v9);
        __double2 v19 = __sincos_stret(v13 + v18);
        *(double *)long double v5 = v17 * v19.__cosval;
        *((double *)v5 + 1) = v17 * v19.__sinval;
        v5[16] = 0;
      }
    }
    objc_msgSend(*(id *)&v0[v2], sel_setZRotation_, 0.0);
    objc_msgSend(v0, sel_setZRotation_, 0.0);
    uint64_t v20 = FMPFSKPatternFragmentNode.calculateIntermediatePosition()();
    if (v22)
    {
      uint64_t v23 = *(void *)v4;
      uint64_t v24 = *((void *)v4 + 1);
      char v25 = v4[16];
    }
    else
    {
      uint64_t v23 = v20;
      uint64_t v24 = v21;
      char v25 = 0;
    }
    char v26 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition];
    *(void *)char v26 = v23;
    *((void *)v26 + 1) = v24;
    v26[16] = v25;
    uint64_t v27 = FMPFSKPatternFragmentNode.quadCurveBezierLength(from:endPoint:)(*(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition], *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 8], v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16], v23, v24, v25);
    double v28 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength];
    *(void *)double v28 = v27;
    v28[8] = v29 & 1;
    uint64_t v30 = specialized FMPFSKPatternFragmentNode.arcLength(from:endPoint:)(*(void *)v26, *((void *)v26 + 1), v26[16], *(void *)v4, *((void *)v4 + 1), v4[16]);
    uint64_t v31 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength];
    *(void *)uint64_t v31 = v30;
    v31[8] = v32 & 1;
    if ((v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8] & 1) == 0)
    {
      double v33 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
      FMPFSKPatternFragmentNode.applyConformationFactor(_:)(v33);
    }
  }
}

uint64_t FMPFSKPatternFragmentNode.peripheralPosition.didset()
{
  uint64_t v1 = FMPFSKPatternFragmentNode.calculateIntermediatePosition()();
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 8);
    char v6 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16);
  }
  else
  {
    uint64_t v4 = v1;
    uint64_t v5 = v2;
    char v6 = 0;
  }
  uint64_t v7 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition;
  *(void *)uint64_t v7 = v4;
  *(void *)(v7 + 8) = v5;
  *(unsigned char *)(v7 + 16) = v6;
  uint64_t v8 = FMPFSKPatternFragmentNode.quadCurveBezierLength(from:endPoint:)(*(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition), *(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16), v4, v5, v6);
  uint64_t v9 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength;
  *(void *)uint64_t v9 = v8;
  *(unsigned char *)(v9 + 8) = v10 & 1;
  uint64_t result = specialized FMPFSKPatternFragmentNode.arcLength(from:endPoint:)(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16), *(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition), *(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16));
  uint64_t v12 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength;
  *(void *)uint64_t v12 = result;
  *(unsigned char *)(v12 + 8) = v13 & 1;
  return result;
}

Swift::Void __swiftcall FMPFSKPatternFragmentNode.resetToInitialPeripheralPosition()()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_experienceType) != 1)
  {
    char v1 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition + 16);
    uint64_t v2 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
    *(_OWORD *)uint64_t v2 = *(_OWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition);
    *(unsigned char *)(v2 + 16) = v1;
    FMPFSKPatternFragmentNode.peripheralPosition.didset();
    uint64_t v3 = FMPFSKPatternFragmentNode.calculateIntermediatePosition()();
    if (v5)
    {
      uint64_t v6 = *(void *)v2;
      uint64_t v7 = *(void *)(v2 + 8);
      char v8 = *(unsigned char *)(v2 + 16);
    }
    else
    {
      uint64_t v6 = v3;
      uint64_t v7 = v4;
      char v8 = 0;
    }
    uint64_t v9 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition;
    *(void *)uint64_t v9 = v6;
    *(void *)(v9 + 8) = v7;
    *(unsigned char *)(v9 + 16) = v8;
    uint64_t v10 = FMPFSKPatternFragmentNode.quadCurveBezierLength(from:endPoint:)(*(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition), *(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16), v6, v7, v8);
    uint64_t v11 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength;
    *(void *)uint64_t v11 = v10;
    *(unsigned char *)(v11 + 8) = v12 & 1;
    uint64_t v13 = specialized FMPFSKPatternFragmentNode.arcLength(from:endPoint:)(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16), *(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));
    uint64_t v14 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength;
    *(void *)uint64_t v14 = v13;
    *(unsigned char *)(v14 + 8) = v15 & 1;
    char v16 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialExplodedPosition + 16);
    uint64_t v17 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition;
    *(_OWORD *)uint64_t v17 = *(_OWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialExplodedPosition);
    *(unsigned char *)(v17 + 16) = v16;
  }
}

Swift::Void __swiftcall FMPFSKPatternFragmentNode.setDisturbanceScatterOffset(_:sprung:)(CGPoint _, Swift::Bool sprung)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(unsigned char **)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetXSpring);
  if (v4
    && (char v5 = *(unsigned char **)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetYSpring)) != 0)
  {
    CGFloat y = _.y;
    CGFloat x = _.x;
    uint64_t v8 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffset;
    *(CGFloat *)uint64_t v8 = _.x;
    *(CGFloat *)(v8 + 8) = _.y;
    *(unsigned char *)(v8 + 16) = 0;
    if (!sprung
      || (uint64_t v9 = (double *)&v4[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s],
          swift_beginAccess(),
          v9[35] + *(double *)&v4[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40] == 1.79769313e308)
      || (uint64_t v10 = (double *)&v5[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s],
          swift_beginAccess(),
          v10[35] + *(double *)&v5[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40] == 1.79769313e308))
    {
      FLSpring.resetImmediately(toValue:)(x);
      v4[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
      FLSpring.resetImmediately(toValue:)(y);
      v5[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
      uint64_t v11 = v3 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset;
      *(CGFloat *)uint64_t v11 = x;
      *(CGFloat *)(v11 + 8) = y;
      *(unsigned char *)(v11 + 16) = 0;
      if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8) & 1) == 0)
      {
        double v12 = *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor);
        uint64_t v13 = v4;
        uint64_t v14 = v5;
        FMPFSKPatternFragmentNode.applyConformationFactor(_:)(v12);
      }
    }
    else
    {
      uint64_t v17 = (CGFloat *)&v4[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
      *uint64_t v17 = x;
      *((unsigned char *)v17 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
      long double v18 = (CGFloat *)&v5[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
      *long double v18 = y;
      *((unsigned char *)v18 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
    }
  }
  else
  {
    uint64_t v15 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset;
    *(unsigned char *)(v15 + 16) = 0;
    *(void *)uint64_t v15 = 0;
    *(void *)(v15 + 8) = 0;
    if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8) & 1) == 0)
    {
      double v16 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor);
      FMPFSKPatternFragmentNode.applyConformationFactor(_:)(v16);
    }
  }
}

void FMPFSKPatternFragmentNode.__ivar_destroyer()
{
  char v1 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_renderingColor);
}

id FMPFSKPatternFragmentNode.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKPatternFragmentNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKPatternFragmentNode()
{
  return self;
}

uint64_t specialized FMPFSKPatternFragmentNode.arcLength(from:endPoint:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if ((a3 | a6)) {
    return 0;
  }
  double v11 = hypot(*(long double *)&a4, *(long double *)&a5);
  double v12 = atan2(*(long double *)&a2, *(long double *)&a1);
  double v13 = atan2(*(long double *)&a5, *(long double *)&a4);
  double v14 = v13 - v12;
  if (vabdd_f64(v13, v12) > 3.14159265)
  {
    if (v12 >= 0.0 || v13 < 0.0)
    {
      if (v13 < 0.0 && v12 >= 0.0) {
        double v14 = v14 + 6.28318531;
      }
    }
    else
    {
      double v14 = v14 + -6.28318531;
    }
  }
  return fabs((v11 + v11) * v14);
}

double specialized FMPFSKPatternFragmentNode.positionOnArcWith(startPoint:endPoint:at:)(long double a1, long double a2, long double a3, long double a4, double a5)
{
  double v8 = atan2(a2, a1);
  double v9 = atan2(a4, a3);
  double v10 = v9 - v8;
  if (vabdd_f64(v9, v8) > 3.14159265)
  {
    if (v8 >= 0.0 || v9 < 0.0)
    {
      if (v9 < 0.0 && v8 >= 0.0) {
        double v10 = v10 + 6.28318531;
      }
    }
    else
    {
      double v10 = v10 + -6.28318531;
    }
  }
  double v12 = hypot(a3, a4);
  return v12 * __sincos_stret((1.0 - a5) * v8 + (v8 + v10) * a5).__cosval;
}

void specialized FMPFSKPatternFragmentNode.positionOnCurvedPathWith(conformationFactor:trackOffsetCorrection:)(uint64_t a1@<X8>, double a2@<D0>)
{
  double v5 = 0.0;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16) & 1) != 0
    || (uint64_t v6 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition,
        (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition + 16) & 1) != 0)
    || (uint64_t v7 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition,
        (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
    || (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength + 8) & 1) != 0
    || (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength + 8) & 1) != 0)
  {
    char v8 = 1;
    uint64_t v9 = 0;
    long double v10 = 0.0;
    double v11 = 0.0;
  }
  else
  {
    long double v12 = *(double *)v6;
    long double v10 = *(double *)v7;
    double v13 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength);
    double v14 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength);
    double v15 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_trackOffset);
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_trackOffset + 8)) {
      double v15 = 0.0;
    }
    double v16 = *(double *)(v6 + 8) - v15;
    double v11 = *(double *)(v7 + 8) - v15;
    double v17 = 1.0 - a2;
    FMPFSKPatternFragmentNode.controlPoint(with:trackOffset:)(*(double *)(v2
                                                                        + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition));
    double v18 = v14 / (v13 + v14);
    if (v17 <= v18) {
      FMPFSKPatternFragmentNode.positionOnCurvedPathWith(startPoint:controlPoint:endPoint:at:)();
    }
    else {
      double v5 = specialized FMPFSKPatternFragmentNode.positionOnArcWith(startPoint:endPoint:at:)(v12, v16, v10, v11, (v17 - v18) / (v13 / (v13 + v14)));
    }
    char v8 = 0;
  }
  *(double *)a1 = v5;
  *(void *)(a1 + 8) = v9;
  *(long double *)(a1 + 16) = v10;
  *(double *)(a1 + 24) = v11;
  *(unsigned char *)(a1 + 32) = v8;
}

uint64_t sub_2273B9470()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in FMPFSKPatternFragmentNode.executePartPerimeterRotation(_:)()
{
  char v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_setSpeed_, *(double *)(v0 + 24)* *(double *)(*(void *)(v0 + 32) + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 40));
  return FMPFSKPatternFragmentNode.executePartPerimeterRotation(_:)(v1);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

void specialized FMPFSKPatternFragmentNode.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKNode()), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbScatterRandomOffsetFrameCounter] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  v2[16] = 1;
  uint64_t v3 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialExplodedPosition];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  v3[16] = 1;
  uint64_t v4 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength];
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  double v5 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength];
  *(void *)double v5 = 0;
  v5[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction] = 0;
  uint64_t v6 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition];
  *(void *)uint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  uint64_t v7 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_relativeHeading];
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetXSpring] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetYSpring] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactorSpring] = 0;
  char v8 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition];
  *(void *)char v8 = 0;
  *((void *)v8 + 1) = 0;
  v8[16] = 1;
  uint64_t v9 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  long double v10 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition];
  *(void *)long double v10 = 0;
  *((void *)v10 + 1) = 0;
  unsigned char v10[16] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_useAlternateScaling] = 0;
  double v11 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationTimingFunction];
  *(_OWORD *)double v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v11[32] = 1;
  long double v12 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor];
  *(void *)long double v12 = 0;
  v12[8] = 1;
  double v13 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
  *(void *)double v13 = 0;
  v13[8] = 1;
  double v14 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_scalingFactor];
  *(void *)double v14 = 0;
  v14[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceScatterOffset] = 1;
  double v15 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffset];
  *(void *)double v15 = 0;
  *((void *)v15 + 1) = 0;
  v15[16] = 1;
  double v16 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset];
  *(void *)double v16 = 0;
  *((void *)v16 + 1) = 0;
  v16[16] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceHomingFactor] = 1;
  double v17 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactor];
  *(void *)double v17 = 0;
  v17[8] = 1;
  double v18 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor];
  *(void *)double v18 = 0;
  v18[8] = 1;
  __double2 v19 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_trackOffset];
  *(void *)__double2 v19 = 0;
  v19[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedAbsoluteHeading] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

ValueMetadata *type metadata accessor for SiriTip()
{
  return &type metadata for SiriTip;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in SiriTip()
{
  return MEMORY[0x263F8D320];
}

unint64_t protocol witness for Tip.id.getter in conformance SiriTip()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Tip.title.getter in conformance SiriTip()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t protocol witness for Tip.message.getter in conformance SiriTip()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t protocol witness for Tip.image.getter in conformance SiriTip()
{
  type metadata accessor for TVRUITipManager();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  return MEMORY[0x270F04738](0x62724F69726953, 0xE700000000000000, v1);
}

uint64_t protocol witness for Tip.actions.getter in conformance SiriTip()
{
  return MEMORY[0x270F05B68]();
}

uint64_t protocol witness for Tip.rules.getter in conformance SiriTip()
{
  return MEMORY[0x270F05B68]();
}

uint64_t protocol witness for Tip.options.getter in conformance SiriTip()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>.0);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Tips.UsesConstellation();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>.0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388]();
  double v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x22A676F00](1);
  uint64_t v12 = MEMORY[0x263F1C010];
  MEMORY[0x22A676E90](v7, v4, MEMORY[0x263F1C010]);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v16 = v4;
  uint64_t v17 = v12;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  MEMORY[0x22A676EC0](v11, v8, OpaqueTypeConformance2);
  uint64_t v16 = v8;
  uint64_t v17 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  uint64_t v14 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v14;
}

void protocol witness for Identifiable.id.getter in conformance SiriTip(void *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x80000002273FC490;
}

unint64_t lazy protocol witness table accessor for type SiriTip and conformance SiriTip()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriTip and conformance SiriTip;
  if (!lazy protocol witness table cache variable for type SiriTip and conformance SiriTip)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriTip and conformance SiriTip);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriTip and conformance SiriTip;
  if (!lazy protocol witness table cache variable for type SiriTip and conformance SiriTip)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriTip and conformance SiriTip);
  }
  return result;
}

char *FMPFSKPatternNode.init(experienceType:config:size:withRingView:conformedToExplodedFactor:conformationFactor:)(unsigned __int8 *a1, uint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, char a7, double a8, double a9)
{
  int v13 = *a1;
  uint64_t v85 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_ringView;
  *(void *)&v9[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_ringView] = 0;
  uint64_t v14 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDebugNode;
  double v15 = (objc_class *)type metadata accessor for FMPFSKNode();
  id v16 = objc_allocWithZone(v15);
  uint64_t v17 = v9;
  *(void *)&v9[v14] = objc_msgSend(v16, sel_init);
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode] = 0;
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode] = 0;
  uint64_t v18 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasPatternSpinesNode;
  *(void *)&v17[v18] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F17BF8]), sel_init);
  uint64_t v19 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode;
  *(void *)&v17[v19] = objc_msgSend(objc_allocWithZone(v15), sel_init);
  uint64_t v20 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode;
  *(void *)&v17[v20] = objc_msgSend(objc_allocWithZone(v15), sel_init);
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes] = MEMORY[0x263F8EE78];
  uint64_t v21 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsNode;
  *(void *)&v17[v21] = objc_msgSend(objc_allocWithZone(v15), sel_init);
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode] = 0;
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode] = 0;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode] = 0;
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_extraDiskRadiusWhenSnapping] = 0;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_forceHideNoonNode] = 0;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_allFragmentsAreOrbiting] = 0;
  char v22 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track];
  *(void *)char v22 = 0;
  v22[8] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackDidChange] = 0;
  uint64_t v23 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackTop];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  v23[16] = 1;
  uint64_t v24 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackBottom];
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  v24[16] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_needsRecomputeVisibleFragments] = 0;
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_inFOV] = 2;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyConformedToExplodedFactor] = 1;
  char v25 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor];
  *(void *)char v25 = 0;
  v25[8] = 1;
  char v26 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor];
  *(void *)char v26 = 0;
  v26[8] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyConformationFactor] = 1;
  uint64_t v27 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor];
  *(void *)uint64_t v27 = 0;
  v27[8] = 1;
  double v28 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor];
  *(void *)double v28 = 0;
  v28[8] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyBearing] = 1;
  char v29 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_bearing];
  *(void *)char v29 = 0;
  v29[8] = 1;
  uint64_t v30 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedEnergeticBearing];
  *(void *)uint64_t v30 = 0;
  v30[8] = 1;
  uint64_t v31 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLethargicBearing];
  *(void *)uint64_t v31 = 0;
  v31[8] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyCenterFactor] = 1;
  char v32 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactor];
  *(void *)char v32 = 0;
  v32[8] = 1;
  double v33 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor];
  *(void *)double v33 = 0;
  v33[8] = 1;
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_derivativeCenterFactor] = 0;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldLookout] = 1;
  Swift::String v34 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookout];
  *(void *)Swift::String v34 = 0;
  v34[8] = 1;
  Swift::String v35 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout];
  *(void *)Swift::String v35 = 0;
  v35[8] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldLabelsOpacity] = 1;
  id v36 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsOpacity];
  *(void *)id v36 = 0;
  v36[8] = 1;
  uint64_t v37 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLabelsOpacity];
  *(void *)uint64_t v37 = 0;
  v37[8] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType] = v13;
  if (v13 == 1)
  {
    if (one-time initialization token for r1NoAR != -1) {
      swift_once();
    }
    uint64_t v38 = &static FMPFSKPatternNodeStyle.r1NoAR;
  }
  else
  {
    if (one-time initialization token for r1OrBT != -1) {
      swift_once();
    }
    uint64_t v38 = &static FMPFSKPatternNodeStyle.r1OrBT;
  }
  long long v39 = v38[11];
  long long v102 = v38[10];
  long long v103 = v39;
  long long v104 = v38[12];
  long long v40 = v38[7];
  long long v98 = v38[6];
  long long v99 = v40;
  long long v41 = v38[9];
  long long v100 = v38[8];
  long long v101 = v41;
  long long v42 = v38[3];
  long long v94 = v38[2];
  long long v95 = v42;
  long long v43 = v38[5];
  long long v96 = v38[4];
  long long v97 = v43;
  long long v44 = v38[1];
  long long v92 = *v38;
  long long v93 = v44;
  uint64_t v45 = (long long *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style];
  v45[2] = v94;
  v45[3] = v42;
  long long v46 = v99;
  v45[6] = v98;
  v45[7] = v46;
  long long v47 = v97;
  v45[4] = v96;
  v45[5] = v47;
  long long v48 = v104;
  long long v49 = v102;
  v45[11] = v103;
  v45[12] = v48;
  long long v50 = v101;
  v45[8] = v100;
  v45[9] = v50;
  v45[10] = v49;
  long long v51 = v93;
  *uint64_t v45 = v92;
  v45[1] = v51;
  unsigned int v52 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config];
  long long v53 = *(_OWORD *)(a2 + 48);
  long long v55 = *(_OWORD *)a2;
  long long v54 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v52 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v52 + 3) = v53;
  *(_OWORD *)unsigned int v52 = v55;
  *((_OWORD *)v52 + 1) = v54;
  long long v56 = *(_OWORD *)(a2 + 112);
  long long v58 = *(_OWORD *)(a2 + 64);
  long long v57 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v52 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v52 + 7) = v56;
  *((_OWORD *)v52 + 4) = v58;
  *((_OWORD *)v52 + 5) = v57;
  long long v60 = *(_OWORD *)(a2 + 144);
  long long v59 = *(_OWORD *)(a2 + 160);
  long long v61 = *(_OWORD *)(a2 + 128);
  v52[176] = *(unsigned char *)(a2 + 176);
  *((_OWORD *)v52 + 9) = v60;
  *((_OWORD *)v52 + 10) = v59;
  *((_OWORD *)v52 + 8) = v61;
  uint64_t v62 = self;
  outlined retain of FMPFSKPatternNodeConfig(a2, (void (*)(void, void, void, void, void, void, void, void))outlined copy of FMPFSKLabelNodeStyle?);
  id v63 = objc_msgSend(v62, sel_mainScreen);
  uint64_t v64 = (void *)MEMORY[0x22A677130](0xD000000000000011, 0x80000002273FB000);
  int v65 = MGGetSInt32Answer();

  *(double *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pixelsPerInch] = (double)v65;
  uint64_t v66 = (double *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_sceneSize];
  *uint64_t v66 = a8;
  v66[1] = a9;
  char v67 = *(void **)&v9[v85];
  *(void *)&v9[v85] = a3;
  id v68 = a3;

  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v69 = (void *)qword_26817C6A8;
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonDotColor] = qword_26817C6A8;
  char v70 = (void *)qword_26817C6B0;
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeDotColor] = qword_26817C6B0;
  double v71 = 1.0;
  if (v13 == 1) {
    double v71 = 0.5;
  }
  double v72 = v71 * *v66;
  double v73 = v71 * v66[1];
  if (v73 >= v72) {
    double v73 = v72;
  }
  double v74 = v73 * 0.5;
  *(double *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_explodedDiskRadius] = *((double *)v45 + 6) * v74;
  *(double *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius] = v74 * *((double *)v45 + 8);
  if (a5) {
    uint64_t v75 = 0;
  }
  else {
    uint64_t v75 = a4;
  }
  *(void *)char v25 = v75;
  v25[8] = 0;
  if (a7) {
    uint64_t v76 = 0;
  }
  else {
    uint64_t v76 = a6;
  }
  *(void *)uint64_t v27 = v76;
  v27[8] = 0;
  uint64_t v77 = *((void *)v45 + 22);
  id v78 = v69;
  id v79 = v70;
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactorSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(v76, 0, 0x3F50624DD2F1A9FCLL, 0, v77, 0);
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactorSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(v75, 0, 0x3F847AE147AE147BLL, 0, v77, 0);
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_energeticAngleSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F69BC65B68B71C3, 0, 0, 1);
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lethargicAngleSpring] = specialized static FMPFFluidSpring.lethargicSpringWith(initialValue:stableValueThreshold:)(0, 0, 0x3F69BC65B68B71C3, 0);
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactorSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 1, 0x3F847AE147AE147BLL, 0, 0, 1);
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookoutSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackSpring] = specialized static FMPFFluidSpring.lethargicSpringWith(initialValue:stableValueThreshold:)(0x3FE0000000000000, 0, 0x3F1A36E2EB1C432DLL, 0);
  *(void *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsOpacitySpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);

  v91.receiver = v17;
  v91.super_class = (Class)type metadata accessor for FMPFSKPatternNode();
  uint64_t v80 = (char *)objc_msgSendSuper2(&v91, sel_init);
  int v81 = *(void **)&v80[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode];
  int v82 = v80;
  id v83 = v81;
  objc_msgSend(v82, sel_addChild_, v83);

  outlined retain of FMPFSKPatternNodeConfig(a2, (void (*)(void, void, void, void, void, void, void, void))outlined consume of FMPFSKLabelNodeStyle?);
  return v82;
}

Swift::Void __swiftcall FMPFSKPatternNode.applyDebugMode(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDebugNode), sel_setHidden_, !a1);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode), sel_setHidden_, !a1);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode), sel_setHidden_, !a1);
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode;
  uint64_t v5 = *(void **)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode);
  if (v5) {
    objc_msgSend(v5, sel_setHidden_, 1);
  }
  uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode;
  uint64_t v7 = *(void **)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode);
  if (v7) {
    objc_msgSend(v7, sel_setHidden_, 0);
  }
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode), sel_setHidden_, 0);
  uint64_t v8 = *(void **)(v2 + v4);
  if (v8)
  {
    if (a1)
    {
      uint64_t v9 = self;
      id v10 = v8;
      id v11 = objc_msgSend(v9, sel_yellowColor);
      id v12 = objc_msgSend(v11, sel_colorWithAlphaComponent_, 0.75);
    }
    else
    {
      int v13 = *(void **)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonDotColor);
      id v14 = v8;
      id v12 = v13;
    }
    specialized FMPFSKPeripheralDotNode.renderingColor.setter(v12);
  }
  double v15 = *(void **)(v2 + v6);
  if (v15)
  {
    if (a1)
    {
      id v16 = self;
      id v17 = v15;
      id v18 = objc_msgSend(v16, sel_purpleColor);
      id v19 = objc_msgSend(v18, sel_colorWithAlphaComponent_, 0.75);
    }
    else
    {
      uint64_t v20 = *(void **)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeDotColor);
      id v21 = v15;
      id v19 = v20;
    }
    specialized FMPFSKPeripheralDotNode.renderingColor.setter(v19);
  }
  id v22 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasPatternSpinesNode), sel_children);
  type metadata accessor for SKNode();
  unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v23 >> 62) {
    goto LABEL_27;
  }
  uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v24; uint64_t v24 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v25 = 4;
    uint64_t v26 = 0;
    if ((v23 & 0xC000000000000001) != 0)
    {
LABEL_18:
      id v27 = (id)MEMORY[0x22A677580](v26, v23);
      goto LABEL_20;
    }
    while (1)
    {
      id v27 = *(id *)(v23 + 8 * v25);
LABEL_20:
      double v28 = v27;
      BOOL v29 = __OFADD__(v26, 1);
      uint64_t v30 = v26 + 1;
      if (v29) {
        break;
      }
      self;
      uint64_t v31 = (void *)swift_dynamicCastObjCClass();
      if (v31) {
        objc_msgSend(v31, sel_setLineWidth_, 1.0);
      }

      if (v30 == v24) {
        goto LABEL_28;
      }
      uint64_t v26 = ++v25 - 4;
      if ((v23 & 0xC000000000000001) != 0) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
  }
LABEL_28:
  swift_bridgeObjectRelease_n();
}

void FMPFSKPatternNode.setConformationFactor(_:sprung:)(char a1, Swift::Double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor;
  *(Swift::Double *)uint64_t v6 = a2;
  *(unsigned char *)(v6 + 8) = 0;
  uint64_t v7 = (double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor);
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor + 8) & 1) == 0)
  {
    double v8 = *v7;
    if (*v7 == 0.0 && a2 > 0.0)
    {
      uint64_t v9 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
      if (MEMORY[0x22A6786A0](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate, v8))
      {
        uint64_t v10 = *(void *)(v9 + 8);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v10 + 24))(ObjectType, v10);
        swift_unknownObjectRelease();
      }
      FMPFSKPatternNode.readjustFragmentNodesComposedPositionForTape(_:)(*(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track), *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track + 8));
    }
    else if (v8 == 1.0 && a2 < 1.0)
    {
      uint64_t v13 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
      if (MEMORY[0x22A6786A0](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate))
      {
        uint64_t v14 = *(void *)(v13 + 8);
        uint64_t v15 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v15, v14);
        swift_unknownObjectRelease();
      }
      FMPFSKPatternNode.readjustFragmentNodesPeripheralPositionForTape()();
    }
  }
  if ((a1 & 1) != 0
    && (uint64_t v16 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactorSpring),
        uint64_t v17 = v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v17 + 280) + *(double *)(v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308))
  {
    uint64_t v19 = v16 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)uint64_t v19 = a2;
    *(unsigned char *)(v19 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactorSpring);
    FLSpring.resetImmediately(toValue:)(a2);
    *(unsigned char *)(v18 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    FMPFSKPatternNode.applyConformationFactor(_:sprung:)(1, a2);
  }
}

void FMPFSKPatternNode.setCenterFactor(_:sprung:)(char a1, Swift::Double a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactor;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactor + 8) & 1) == 0)
  {
    if (*(double *)v5 >= a2)
    {
      uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_derivativeCenterFactor;
      if (*(double *)v5 <= a2) {
        uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_derivativeCenterFactor);
      }
      else {
        uint64_t v7 = -1;
      }
    }
    else
    {
      uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_derivativeCenterFactor;
      uint64_t v7 = 1;
    }
    *(void *)(v2 + v6) = v7;
  }
  *(Swift::Double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  if ((a1 & 1) != 0
    && (uint64_t v8 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactorSpring),
        uint64_t v9 = v8 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v9 + 280) + *(double *)(v8 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308))
  {
    uint64_t v12 = v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)uint64_t v12 = a2;
    *(unsigned char *)(v12 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactorSpring);
    FLSpring.resetImmediately(toValue:)(a2);
    *(unsigned char *)(v10 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    uint64_t v11 = v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor;
    *(Swift::Double *)uint64_t v11 = a2;
    *(unsigned char *)(v11 + 8) = 0;
  }
  FMPFSKPatternNode.stageConformationVsScalingVsBearingVsCentering()();
}

void FMPFSKPatternNode.setLookout(_:sprung:)(char a1, Swift::Double a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookout;
  *(Swift::Double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  if ((a1 & 1) != 0
    && (uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookoutSpring),
        uint64_t v7 = v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v7 + 280) + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308))
  {
    uint64_t v10 = v6 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)uint64_t v10 = a2;
    *(unsigned char *)(v10 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookoutSpring);
    FLSpring.resetImmediately(toValue:)(a2);
    *(unsigned char *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    uint64_t v9 = v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout;
    *(Swift::Double *)uint64_t v9 = a2;
    *(unsigned char *)(v9 + 8) = 0;
  }
  FMPFSKPatternNode.stageConformationVsScalingVsBearingVsCentering()();
}

Swift::Void __swiftcall FMPFSKPatternNode.addSprungRelativeHeading(_:)(Swift::Double a1)
{
  uint64_t v3 = (unint64_t *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  unint64_t v4 = *v3;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v5) {
      goto LABEL_12;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    return;
  }
  uint64_t v6 = 0;
  int64x2_t v24 = vdupq_n_s64(0x4341C37937E08000uLL);
  do
  {
    if ((v4 & 0xC000000000000001) != 0) {
      uint64_t v8 = (char *)MEMORY[0x22A677580](v6, v4);
    }
    else {
      uint64_t v8 = (char *)*(id *)(v4 + 8 * v6 + 32);
    }
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_headingSpring];
    uint64_t v11 = v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
    swift_beginAccess();
    uint64_t v12 = v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
    double v13 = *(double *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    double v14 = *(double *)(v11 + 280) + v13;
    double v15 = v14 + a1;
    if (v14 == 1.79769313e308)
    {
      uint64_t v16 = *(void *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
      uint64_t v17 = *(void *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
      *(double *)uint64_t v11 = v15;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = v16;
      *(_OWORD *)(v11 + 24) = xmmword_2273F4ED0;
      *(_OWORD *)(v11 + 40) = xmmword_2273F4EE0;
      *(void *)(v11 + 56) = v16;
      *(void *)(v11 + 64) = 0;
      *(void *)(v11 + 72) = 0;
      *(int64x2_t *)(v11 + 80) = v24;
      *(_OWORD *)(v11 + 96) = 0u;
      *(_OWORD *)(v11 + 112) = 0u;
      *(void *)(v11 + 128) = v17;
      *(_OWORD *)(v11 + 136) = xmmword_2273F4ED0;
      *(_OWORD *)(v11 + 152) = xmmword_2273F4EE0;
      *(void *)(v11 + 168) = v17;
      *(void *)(v11 + 176) = 0;
      *(void *)(v11 + 184) = 0;
      *(_OWORD *)(v11 + 208) = 0u;
      *(_OWORD *)(v11 + 224) = 0u;
      *(int64x2_t *)(v11 + 192) = v24;
      *(double *)(v11 + 240) = v15;
      *(_OWORD *)(v11 + 248) = xmmword_2273F4ED0;
      *(void *)(v11 + 264) = 0x4063BD3CC9BE45DELL;
      *(void *)(v11 + 272) = 0x403921FB54442D18;
      *(double *)(v11 + 280) = v15;
      *(void *)(v11 + 288) = 0;
      *(void *)(v11 + 296) = 0;
      *(int64x2_t *)(v11 + 304) = v24;
      *(_OWORD *)(v11 + 320) = 0u;
      *(_OWORD *)(v11 + 336) = 0u;
      uint64_t v18 = *(void *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
      *(void *)(v11 + 352) = v18;
      uint64_t v19 = *(void *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
      *(void *)(v11 + 360) = v19;
      double v20 = 6.28318531
          / *(double *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
          * (6.28318531
           / *(double *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
      double v21 = sqrt(v20);
      double v22 = *(double *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v21 + v21);
      *(void *)uint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0x3FF0000000000000;
      *(double *)(v12 + 24) = v20;
      *(double *)(v12 + 32) = v22;
      *(void *)(v12 + 40) = 0;
      *(int64x2_t *)(v12 + 64) = v24;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      *(void *)(v12 + 48) = v18;
      *(void *)(v12 + 56) = v19;
      *(double *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = v15;
      *(void *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
      *(unsigned char *)(v10 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      double v13 = 0.0;
    }
    double v7 = v15 - v13;
    *(double *)(v11 + 280) = v7;
    ++v6;
    *(double *)(v11 + 240) = v7;
    *(void *)(v11 + 248) = 0;
  }
  while (v5 != v6);
LABEL_12:
  swift_bridgeObjectRelease_n();
  if (*(void *)(v23 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode)) {
    FMPFSKPeripheralDotNode.addSprungRelativeHeading(_:)(a1);
  }
}

id FMPFSKPatternNode.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKPatternNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKPatternNode()
{
  return self;
}

uint64_t outlined retain of FMPFSKPatternNodeConfig(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

unint64_t type metadata accessor for SKNode()
{
  unint64_t result = lazy cache variable for type metadata for SKNode;
  if (!lazy cache variable for type metadata for SKNode)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SKNode);
  }
  return result;
}

void specialized FMPFSKPatternNode.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_ringView] = 0;
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDebugNode;
  objc_super v2 = (objc_class *)type metadata accessor for FMPFSKNode();
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode] = 0;
  uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasPatternSpinesNode;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F17BF8]), sel_init);
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode;
  *(void *)&v0[v4] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode;
  *(void *)&v0[v5] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes] = MEMORY[0x263F8EE78];
  uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsNode;
  *(void *)&v0[v6] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_extraDiskRadiusWhenSnapping] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_forceHideNoonNode] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_allFragmentsAreOrbiting] = 0;
  double v7 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track];
  *(void *)double v7 = 0;
  v7[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackDidChange] = 0;
  uint64_t v8 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackTop];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  v8[16] = 1;
  uint64_t v9 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackBottom];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_needsRecomputeVisibleFragments] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_inFOV] = 2;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyConformedToExplodedFactor] = 1;
  uint64_t v10 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor];
  *(void *)uint64_t v10 = 0;
  v10[8] = 1;
  uint64_t v11 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor];
  *(void *)uint64_t v11 = 0;
  v11[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyConformationFactor] = 1;
  uint64_t v12 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor];
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;
  double v13 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor];
  *(void *)double v13 = 0;
  v13[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyBearing] = 1;
  double v14 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_bearing];
  *(void *)double v14 = 0;
  v14[8] = 1;
  double v15 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedEnergeticBearing];
  *(void *)double v15 = 0;
  v15[8] = 1;
  uint64_t v16 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLethargicBearing];
  *(void *)uint64_t v16 = 0;
  v16[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyCenterFactor] = 1;
  uint64_t v17 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactor];
  *(void *)uint64_t v17 = 0;
  v17[8] = 1;
  uint64_t v18 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor];
  *(void *)uint64_t v18 = 0;
  v18[8] = 1;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_derivativeCenterFactor] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldLookout] = 1;
  uint64_t v19 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookout];
  *(void *)uint64_t v19 = 0;
  v19[8] = 1;
  double v20 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout];
  *(void *)double v20 = 0;
  v20[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldLabelsOpacity] = 1;
  double v21 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsOpacity];
  *(void *)double v21 = 0;
  v21[8] = 1;
  double v22 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLabelsOpacity];
  *(void *)double v22 = 0;
  v22[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined destroy of weak FMPFSKPatternNodeDelegate?(uint64_t a1)
{
  return a1;
}

uint64_t @objc FMPFSKScene.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t))
{
  type metadata accessor for UITouch();
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v10 = a1;
  a5(v8);

  return swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for UITouch()
{
  unint64_t result = lazy cache variable for type metadata for UITouch;
  if (!lazy cache variable for type metadata for UITouch)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UITouch and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UITouch and conformance NSObject)
  {
    type metadata accessor for UITouch();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject);
  }
  return result;
}

void specialized FMPFSKScene.touchesBegan(_:with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(self, sel_standardUserDefaults);
  unsigned int v5 = objc_msgSend(v4, sel_fmpfDebugMode);

  if (v5 && (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isInteractivelyDebugging) & 1) == 0)
  {
    *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isInteractivelyDebugging) = 1;
    *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches) = 1;
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for UITouch();
      lazy protocol witness table accessor for type UITouch and conformance NSObject();
      Set.Iterator.init(_cocoa:)();
      a1 = v30[1];
      uint64_t v29 = v30[2];
      uint64_t v6 = v30[3];
      uint64_t v7 = v30[4];
      unint64_t v8 = v30[5];
    }
    else
    {
      uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v29 = a1 + 56;
      uint64_t v6 = ~v9;
      uint64_t v10 = -v9;
      if (v10 < 64) {
        uint64_t v11 = ~(-1 << v10);
      }
      else {
        uint64_t v11 = -1;
      }
      unint64_t v8 = v11 & *(void *)(a1 + 56);
      swift_bridgeObjectRetain();
      uint64_t v7 = 0;
    }
    int64_t v28 = (unint64_t)(v6 + 64) >> 6;
    while (1)
    {
      if (a1 < 0)
      {
        if (!__CocoaSet.Iterator.next()()) {
          goto LABEL_39;
        }
        type metadata accessor for UITouch();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v19 = (id)v30[0];
        swift_unknownObjectRelease();
        uint64_t v18 = v7;
        uint64_t v16 = v8;
        if (!v19) {
          goto LABEL_39;
        }
      }
      else
      {
        if (v8)
        {
          uint64_t v16 = (v8 - 1) & v8;
          unint64_t v17 = __clz(__rbit64(v8)) | (v7 << 6);
          uint64_t v18 = v7;
        }
        else
        {
          int64_t v20 = v7 + 1;
          if (__OFADD__(v7, 1))
          {
            __break(1u);
            return;
          }
          if (v20 >= v28) {
            goto LABEL_39;
          }
          unint64_t v21 = *(void *)(v29 + 8 * v20);
          uint64_t v18 = v7 + 1;
          if (!v21)
          {
            uint64_t v18 = v7 + 2;
            if (v7 + 2 >= v28) {
              goto LABEL_39;
            }
            unint64_t v21 = *(void *)(v29 + 8 * v18);
            if (!v21)
            {
              uint64_t v18 = v7 + 3;
              if (v7 + 3 >= v28) {
                goto LABEL_39;
              }
              unint64_t v21 = *(void *)(v29 + 8 * v18);
              if (!v21)
              {
                uint64_t v18 = v7 + 4;
                if (v7 + 4 >= v28) {
                  goto LABEL_39;
                }
                unint64_t v21 = *(void *)(v29 + 8 * v18);
                if (!v21)
                {
                  uint64_t v22 = v7 + 5;
                  while (v28 != v22)
                  {
                    unint64_t v21 = *(void *)(v29 + 8 * v22++);
                    if (v21)
                    {
                      uint64_t v18 = v22 - 1;
                      goto LABEL_32;
                    }
                  }
LABEL_39:
                  outlined consume of [CHHapticEngineOptionKey : Any].Iterator._Variant();
                  return;
                }
              }
            }
          }
LABEL_32:
          uint64_t v16 = (v21 - 1) & v21;
          unint64_t v17 = __clz(__rbit64(v21)) + (v18 << 6);
        }
        id v19 = *(id *)(*(void *)(a1 + 48) + 8 * v17);
        if (!v19) {
          goto LABEL_39;
        }
      }
      objc_msgSend(v19, sel_locationInNode_, v2);
      uint64_t v25 = v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation;
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation + 16) == 1)
      {
        *(void *)uint64_t v25 = v23;
        *(void *)(v25 + 8) = v24;
        *(unsigned char *)(v25 + 16) = 0;
        v30[0] = 0;
        uint64_t v26 = MEMORY[0x22A6785F0](v30, 8);
        unint64_t v27 = v30[0];
        if ((unint64_t)(11 * v30[0]) <= 4)
        {
          do
          {
            v30[0] = 0;
            uint64_t v26 = MEMORY[0x22A6785F0](v30, 8);
            unint64_t v27 = v30[0];
          }
          while ((unint64_t)(11 * v30[0]) < 5);
        }
        if (((v27 * (unsigned __int128)0xBuLL) >> 64))
        {
          double v12 = 45.0;
          double v13 = 180.0;
        }
        else
        {
          double v12 = -180.0;
          double v13 = -45.0;
        }
        specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v26, v12, v13);
        uint64_t v14 = v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing;
        *(void *)uint64_t v14 = v15;
        *(unsigned char *)(v14 + 8) = 0;
      }

      uint64_t v7 = v18;
      unint64_t v8 = v16;
    }
  }
}

void specialized FMPFSKScene.touchesMoved(_:with:)(uint64_t a1)
{
  if (v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches] == 1)
  {
    uint64_t v2 = v1;
    id v4 = objc_msgSend(self, sel_standardUserDefaults);
    unsigned int v5 = objc_msgSend(v4, sel_fmpfDebugMode);

    if (v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.makeIterator()();
        type metadata accessor for UITouch();
        lazy protocol witness table accessor for type UITouch and conformance NSObject();
        Set.Iterator.init(_cocoa:)();
        a1 = v47;
        uint64_t v6 = v48;
        uint64_t v7 = v49;
        uint64_t v8 = v50;
        unint64_t v9 = v51;
      }
      else
      {
        uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
        uint64_t v6 = a1 + 56;
        uint64_t v11 = ~v10;
        uint64_t v12 = -v10;
        if (v12 < 64) {
          uint64_t v13 = ~(-1 << v12);
        }
        else {
          uint64_t v13 = -1;
        }
        unint64_t v9 = v13 & *(void *)(a1 + 56);
        swift_bridgeObjectRetain();
        uint64_t v7 = v11;
        uint64_t v8 = 0;
      }
      int64_t v14 = (unint64_t)(v7 + 64) >> 6;
      int64_t v45 = v14;
      if ((a1 & 0x8000000000000000) == 0) {
        goto LABEL_14;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for UITouch();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v15 = v46;
        swift_unknownObjectRelease();
        uint64_t v16 = v8;
        uint64_t v17 = v9;
        if (v46)
        {
          do
          {
            objc_msgSend(v15, sel_locationInNode_, v2);
            uint64_t v24 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation];
            if ((v2[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation + 16] & 1) != 0
              || (v2[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing + 8] & 1) != 0)
            {

              uint64_t v8 = v16;
              unint64_t v9 = v17;
              if (a1 < 0) {
                goto LABEL_10;
              }
            }
            else
            {
              double v25 = v22;
              double v26 = v23;
              double v27 = *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing];
              double v28 = *v24;
              double v29 = v24[1];
              objc_msgSend(v2, sel_size);
              double v31 = v30;
              objc_msgSend(v2, sel_size);
              double v33 = v32;
              uint64_t v34 = MEMORY[0x22A6786A0](&v2[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]);
              if (v34)
              {
                uint64_t v35 = v34;
                uint64_t v36 = v34 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate;
                if (MEMORY[0x22A6786A0](v34 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate))
                {
                  uint64_t v37 = *(void *)(v36 + 8);
                  BOOL v44 = vabdd_f64(v28, v25) < vabdd_f64(v29, v26);
                  double v38 = hypot(v25 - v28, v26 - v29);
                  if (v33 >= v31) {
                    double v39 = v31;
                  }
                  else {
                    double v39 = v33;
                  }
                  uint64_t v40 = v6;
                  double v41 = fmin(v38 / (v39 * 0.66), 1.0);
                  uint64_t ObjectType = swift_getObjectType();
                  double v43 = v41;
                  uint64_t v6 = v40;
                  (*(void (**)(double, void, BOOL, uint64_t, uint64_t, uint64_t, double))(v37 + 24))(COERCE_DOUBLE(*(void *)&v43), 0, v44, v35, ObjectType, v37, v27);

                  swift_unknownObjectRelease();
                }
                else
                {
                }
                swift_unknownObjectRelease();
              }
              else
              {
              }
              uint64_t v8 = v16;
              unint64_t v9 = v17;
              int64_t v14 = v45;
              if (a1 < 0) {
                goto LABEL_10;
              }
            }
LABEL_14:
            if (v9)
            {
              uint64_t v17 = (v9 - 1) & v9;
              unint64_t v18 = __clz(__rbit64(v9)) | (v8 << 6);
              uint64_t v16 = v8;
            }
            else
            {
              int64_t v19 = v8 + 1;
              if (__OFADD__(v8, 1))
              {
                __break(1u);
                return;
              }
              if (v19 >= v14) {
                break;
              }
              unint64_t v20 = *(void *)(v6 + 8 * v19);
              uint64_t v16 = v8 + 1;
              if (!v20)
              {
                uint64_t v16 = v8 + 2;
                if (v8 + 2 >= v14) {
                  break;
                }
                unint64_t v20 = *(void *)(v6 + 8 * v16);
                if (!v20)
                {
                  uint64_t v16 = v8 + 3;
                  if (v8 + 3 >= v14) {
                    break;
                  }
                  unint64_t v20 = *(void *)(v6 + 8 * v16);
                  if (!v20)
                  {
                    uint64_t v16 = v8 + 4;
                    if (v8 + 4 >= v14) {
                      break;
                    }
                    unint64_t v20 = *(void *)(v6 + 8 * v16);
                    if (!v20)
                    {
                      uint64_t v21 = v8 + 5;
                      while (v14 != v21)
                      {
                        unint64_t v20 = *(void *)(v6 + 8 * v21++);
                        if (v20)
                        {
                          uint64_t v16 = v21 - 1;
                          goto LABEL_29;
                        }
                      }
                      break;
                    }
                  }
                }
              }
LABEL_29:
              uint64_t v17 = (v20 - 1) & v20;
              unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
            }
            id v15 = *(id *)(*(void *)(a1 + 48) + 8 * v18);
          }
          while (v15);
        }
      }
      outlined consume of [CHHapticEngineOptionKey : Any].Iterator._Variant();
    }
  }
}

void specialized FMPFSKScene.touchesEnded(_:with:)(uint64_t a1)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches) == 1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = a1;
    uint64_t v25 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches;
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for UITouch();
      lazy protocol witness table accessor for type UITouch and conformance NSObject();
      Set.Iterator.init(_cocoa:)();
      uint64_t v3 = v29;
      uint64_t v27 = v30;
      uint64_t v4 = v31;
      uint64_t v5 = v32;
      unint64_t v6 = v33;
    }
    else
    {
      uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v27 = a1 + 56;
      uint64_t v4 = ~v7;
      uint64_t v8 = -v7;
      if (v8 < 64) {
        uint64_t v9 = ~(-1 << v8);
      }
      else {
        uint64_t v9 = -1;
      }
      unint64_t v6 = v9 & *(void *)(a1 + 56);
      swift_bridgeObjectRetain();
      uint64_t v5 = 0;
    }
    int64_t v26 = (unint64_t)(v4 + 64) >> 6;
    while (1)
    {
      if (v3 < 0)
      {
        if (!__CocoaSet.Iterator.next()()) {
          goto LABEL_38;
        }
        type metadata accessor for UITouch();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v15 = v28;
        swift_unknownObjectRelease();
        uint64_t v14 = v5;
        uint64_t v12 = v6;
        if (!v28) {
          goto LABEL_38;
        }
      }
      else
      {
        if (v6)
        {
          uint64_t v12 = (v6 - 1) & v6;
          unint64_t v13 = __clz(__rbit64(v6)) | (v5 << 6);
          uint64_t v14 = v5;
        }
        else
        {
          int64_t v16 = v5 + 1;
          if (__OFADD__(v5, 1))
          {
            __break(1u);
            return;
          }
          if (v16 >= v26) {
            goto LABEL_38;
          }
          unint64_t v17 = *(void *)(v27 + 8 * v16);
          uint64_t v14 = v5 + 1;
          if (!v17)
          {
            uint64_t v14 = v5 + 2;
            if (v5 + 2 >= v26) {
              goto LABEL_38;
            }
            unint64_t v17 = *(void *)(v27 + 8 * v14);
            if (!v17)
            {
              uint64_t v14 = v5 + 3;
              if (v5 + 3 >= v26) {
                goto LABEL_38;
              }
              unint64_t v17 = *(void *)(v27 + 8 * v14);
              if (!v17)
              {
                uint64_t v14 = v5 + 4;
                if (v5 + 4 >= v26) {
                  goto LABEL_38;
                }
                unint64_t v17 = *(void *)(v27 + 8 * v14);
                if (!v17)
                {
                  uint64_t v18 = v5 + 5;
                  while (v26 != v18)
                  {
                    unint64_t v17 = *(void *)(v27 + 8 * v18++);
                    if (v17)
                    {
                      uint64_t v14 = v18 - 1;
                      goto LABEL_31;
                    }
                  }
LABEL_38:
                  outlined consume of [CHHapticEngineOptionKey : Any].Iterator._Variant();
                  *(unsigned char *)(v2 + v25) = 0;
                  *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isInteractivelyDebugging) = 0;
                  return;
                }
              }
            }
          }
LABEL_31:
          uint64_t v12 = (v17 - 1) & v17;
          unint64_t v13 = __clz(__rbit64(v17)) + (v14 << 6);
        }
        id v15 = *(id *)(*(void *)(v3 + 48) + 8 * v13);
        if (!v15) {
          goto LABEL_38;
        }
      }
      objc_msgSend(v15, sel_locationInNode_, v2);
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing + 8) & 1) == 0
        && (*(unsigned char *)(v2 + 16 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation) & 1) == 0)
      {
        double v19 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing);
        uint64_t v20 = MEMORY[0x22A6786A0](v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
        if (v20)
        {
          uint64_t v21 = v20;
          uint64_t v22 = v20 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate;
          if (MEMORY[0x22A6786A0](v20 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate))
          {
            uint64_t v23 = *(void *)(v22 + 8);
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v23 + 24))(0, 1, 2, v21, ObjectType, v23, v19);
            swift_unknownObjectRelease();
          }
          swift_unknownObjectRelease();
        }
        uint64_t v10 = v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation;
        *(void *)uint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        *(unsigned char *)(v10 + 16) = 1;
        uint64_t v11 = v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing;
        *(void *)uint64_t v11 = 0;
        *(unsigned char *)(v11 + 8) = 1;
      }

      uint64_t v5 = v14;
      unint64_t v6 = v12;
    }
  }
}

void specialized FMPFSKScene.touchesCancelled(_:with:)(uint64_t a1)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches) == 1)
  {
    uint64_t v2 = a1;
    uint64_t v19 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches;
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for UITouch();
      lazy protocol witness table accessor for type UITouch and conformance NSObject();
      Set.Iterator.init(_cocoa:)();
      uint64_t v2 = v23;
      uint64_t v21 = v24;
      uint64_t v3 = v25;
      uint64_t v4 = v26;
      unint64_t v5 = v27;
    }
    else
    {
      uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v21 = a1 + 56;
      uint64_t v3 = ~v6;
      uint64_t v7 = -v6;
      if (v7 < 64) {
        uint64_t v8 = ~(-1 << v7);
      }
      else {
        uint64_t v8 = -1;
      }
      unint64_t v5 = v8 & *(void *)(a1 + 56);
      swift_bridgeObjectRetain();
      uint64_t v4 = 0;
    }
    uint64_t v18 = v3;
    int64_t v20 = (unint64_t)(v3 + 64) >> 6;
    if (v2 < 0) {
      goto LABEL_11;
    }
    while (1)
    {
      if (v5)
      {
        uint64_t v9 = (v5 - 1) & v5;
        unint64_t v10 = __clz(__rbit64(v5)) | (v4 << 6);
        uint64_t v11 = v4;
      }
      else
      {
        int64_t v13 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          return;
        }
        if (v13 >= v20) {
          goto LABEL_31;
        }
        unint64_t v14 = *(void *)(v21 + 8 * v13);
        uint64_t v11 = v4 + 1;
        if (!v14)
        {
          uint64_t v11 = v4 + 2;
          if (v4 + 2 >= v20) {
            goto LABEL_31;
          }
          unint64_t v14 = *(void *)(v21 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v4 + 3;
            if (v4 + 3 >= v20) {
              goto LABEL_31;
            }
            unint64_t v14 = *(void *)(v21 + 8 * v11);
            if (!v14)
            {
              uint64_t v11 = v4 + 4;
              if (v4 + 4 >= v20) {
                goto LABEL_31;
              }
              unint64_t v14 = *(void *)(v21 + 8 * v11);
              if (!v14)
              {
                uint64_t v15 = v4 + 5;
                while (v20 != v15)
                {
                  unint64_t v14 = *(void *)(v21 + 8 * v15++);
                  if (v14)
                  {
                    uint64_t v11 = v15 - 1;
                    goto LABEL_27;
                  }
                }
LABEL_31:
                outlined consume of [CHHapticEngineOptionKey : Any].Iterator._Variant();
                *(unsigned char *)(v1 + v19) = 0;
                *(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isInteractivelyDebugging) = 0;
                return;
              }
            }
          }
        }
LABEL_27:
        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
      }
      id v12 = *(id *)(*(void *)(v2 + 48) + 8 * v10);
      if (!v12) {
        goto LABEL_31;
      }
      while (1)
      {
        objc_msgSend(v12, sel_locationInNode_, v1, v18);

        uint64_t v16 = v1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation;
        *(void *)uint64_t v16 = 0;
        *(void *)(v16 + 8) = 0;
        *(unsigned char *)(v16 + 16) = 1;
        uint64_t v17 = v1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing;
        *(void *)uint64_t v17 = 0;
        *(unsigned char *)(v17 + 8) = 1;
        uint64_t v4 = v11;
        unint64_t v5 = v9;
        if ((v2 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_11:
        if (__CocoaSet.Iterator.next()())
        {
          type metadata accessor for UITouch();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v12 = v22;
          swift_unknownObjectRelease();
          uint64_t v11 = v4;
          uint64_t v9 = v5;
          if (v22) {
            continue;
          }
        }
        goto LABEL_31;
      }
    }
  }
}

void *TVRUIFindingSession.start(for:dismissedHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_pairedRemoteInfo) & 1) == 0
    || (uint64_t v7 = objc_msgSend(a1, sel_pairedRemoteInfo)) == 0)
  {
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.findingExperience);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_227326000, v8, v15, "No remote info found. Failed to start finding session.", v16, 2u);
      MEMORY[0x22A6785E0](v16, -1, -1);
    }
    goto LABEL_24;
  }
  uint64_t v8 = v7;
  if (objc_msgSend(v3, sel_isFindingSessionActive))
  {
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.findingExperience);
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v12 = 0;
      int64_t v13 = "Finding session is already active";
LABEL_22:
      _os_log_impl(&dword_227326000, v10, v11, v13, v12, 2u);
      MEMORY[0x22A6785E0](v12, -1, -1);

      return 0;
    }
LABEL_23:

LABEL_24:
    return 0;
  }
  [v8 copy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for TVRCSiriRemoteInfo);
  if (!swift_dynamicCast())
  {
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.findingExperience);
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v12 = 0;
      int64_t v13 = "Remote info copy type mismatch";
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  id v17 = objc_msgSend(a1, sel_name);
  if (!v17)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v17 = (id)MEMORY[0x22A677130](v18);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v22, sel_setTvName_, v17);

  if (objc_msgSend(a1, sel_respondsToSelector_, sel_enableFindingSession_)) {
    objc_msgSend(a1, sel_enableFindingSession_, 1);
  }
  *(void *)&v3[OBJC_IVAR___TVRUIFindingSession_device] = a1;
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  uint64_t v19 = TVRUIFindingSession.findingViewController(for:dismissedHandler:)(v22, a2, a3);

  return v19;
}

void *TVRUIFindingSession.findingViewController(for:dismissedHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = (objc_class *)type metadata accessor for FindingSessionPresentationController();
  unint64_t v10 = (char *)objc_allocWithZone(v9);
  os_log_type_t v11 = (void (**)())&v10[OBJC_IVAR____TtC10TVRemoteUI36FindingSessionPresentationController_didDismissHandler];
  char *v11 = partial apply for closure #1 in TVRUIFindingSession.findingViewController(for:dismissedHandler:);
  v11[1] = (void (*)())v8;
  v30.receiver = v10;
  v30.super_class = v9;
  id v12 = objc_msgSendSuper2(&v30, sel_init);
  int64_t v13 = *(void **)(v4 + OBJC_IVAR___TVRUIFindingSession_findingSessionPresentationController);
  *(void *)(v4 + OBJC_IVAR___TVRUIFindingSession_findingSessionPresentationController) = v12;

  unint64_t v14 = (unint64_t)TVRCSiriRemoteInfo.discoveryToken()();
  if (v14)
  {
    os_log_type_t v15 = (void *)v14;
    id v16 = objc_allocWithZone((Class)type metadata accessor for FindingViewController());
    id v17 = a1;
    uint64_t v18 = (char *)specialized FindingViewController.init(discoveryToken:remoteInfo:)(v15, v17);

    uint64_t v19 = &v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_dismissedHandler];
    uint64_t v20 = *(void *)&v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_dismissedHandler];
    *(void *)uint64_t v19 = a2;
    *((void *)v19 + 1) = a3;
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(v20);

    uint64_t v21 = OBJC_IVAR___TVRUIFindingSession_findingVC;
    uint64_t v22 = *(void **)(v4 + OBJC_IVAR___TVRUIFindingSession_findingVC);
    *(void *)(v4 + OBJC_IVAR___TVRUIFindingSession_findingVC) = v18;

    uint64_t v23 = *(void **)(v4 + v21);
    id v24 = v23;
  }
  else
  {
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.findingExperience);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      double v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v28 = 0;
      _os_log_impl(&dword_227326000, v26, v27, "Failed to create discovery token", v28, 2u);
      MEMORY[0x22A6785E0](v28, -1, -1);
    }

    return 0;
  }
  return v23;
}

void closure #1 in TVRUIFindingSession.findingViewController(for:dismissedHandler:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (char *)MEMORY[0x22A6786A0](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void **)&v2[OBJC_IVAR___TVRUIFindingSession_device];
    if (v4)
    {
      swift_unknownObjectRetain();

      if (objc_msgSend(v4, sel_respondsToSelector_, sel_enableFindingSession_)) {
        objc_msgSend(v4, sel_enableFindingSession_, 0);
      }
      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

NIDiscoveryToken_optional __swiftcall TVRCSiriRemoteInfo.discoveryToken()()
{
  id v1 = objc_msgSend(v0, sel_btAddressData);
  if (!v1
    || (uint64_t v3 = v1,
        uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(),
        unint64_t v6 = v5,
        v3,
        outlined consume of Data._Representation(v4, v6),
        (id v7 = objc_msgSend(v0, sel_irkData)) == 0))
  {
    id v24 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = v7;
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  outlined consume of Data._Representation(v9, v11);
  id v12 = (objc_class *)objc_msgSend(v0, sel_btAddressData);
  if (!v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  int64_t v13 = v12;
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  v17.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v14, v16);
  id v12 = (objc_class *)objc_msgSend(v0, sel_irkData);
  if (!v12)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v18 = v12;
  uint64_t v19 = self;
  uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v20, v22);
  id v24 = (objc_class *)objc_msgSend(v19, sel_generateBluetoothDeviceTokenWithPublicAddress_IRK_, v17.super.isa, isa);

LABEL_7:
  id v12 = v24;
LABEL_10:
  result.value.super.Class isa = v12;
  result.is_nil = v2;
  return result;
}

Swift::Void __swiftcall TVRUIFindingSession.stop()()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___TVRUIFindingSession_findingVC);
  if (v1)
  {
    uint64_t v2 = one-time initialization token for findingExperience;
    id v7 = v1;
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.findingExperience);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl(&dword_227326000, v4, v5, "Stop finding remote", v6, 2u);
      MEMORY[0x22A6785E0](v6, -1, -1);
    }

    objc_msgSend(v7, sel_dismissViewControllerAnimated_completion_, 1, 0);
  }
}

void __swiftcall TVRUIFindingSession.init()(TVRUIFindingSession *__return_ptr retstr)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  objc_msgSend(v1, sel_init);
}

id TVRUIFindingSession.init()()
{
  *(void *)(v0 + OBJC_IVAR___TVRUIFindingSession_findingVC) = 0;
  *(void *)(v0 + OBJC_IVAR___TVRUIFindingSession_findingSessionPresentationController) = 0;
  *(void *)(v0 + OBJC_IVAR___TVRUIFindingSession_device) = 0;
  v2.super_class = (Class)TVRUIFindingSession;
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for TVRUIFindingSession(uint64_t a1)
{
  return type metadata accessor for SKConstraint(a1, &lazy cache variable for type metadata for TVRUIFindingSession);
}

id FindingSessionPresentationController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FindingSessionPresentationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FindingSessionPresentationController()
{
  return self;
}

uint64_t sub_2273BD3DC()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  return thunk for @escaping @callee_unowned @convention(block) () -> ()(*(void *)(v0 + 16));
}

uint64_t sub_2273BD41C()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in TVRUIFindingSession.findingViewController(for:dismissedHandler:)()
{
  closure #1 in TVRUIFindingSession.findingViewController(for:dismissedHandler:)(v0);
}

char *FMPFSKBTLevelRingNode.init(threshold:radius:width:alpha:response:)(double a1, double a2, double a3, double a4, double a5)
{
  uint64_t v11 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_visibilitySpring;
  id v12 = v5;
  int64_t v13 = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(0, 0, 0x3F50624DD2F1A9FCLL, 0);
  *(void *)&v5[v11] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_collapseSpring;
  *(void *)&v12[v14] = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(0x3FF0000000000000, 0, 0x3F50624DD2F1A9FCLL, 0);
  uint64_t v15 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_ringNode;
  *(void *)&v12[v15] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F17C18]), sel_init);
  *(double *)&v12[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold] = a1;
  *(double *)&v12[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetAlpha] = a4;
  *(double *)&v12[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetWidth] = a3;
  *(double *)&v12[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetRadius] = round(a2);
  double v16 = *(double *)((char *)v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  double v17 = *(double *)((char *)v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  double v18 = *(double *)((char *)v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  double v19 = *(double *)((char *)v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  *(double *)((char *)v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16) = a5;
  FLSpring.parameters.didset(v16, v17, v18, v19);

  v28.receiver = v12;
  v28.super_class = (Class)type metadata accessor for FMPFSKBTLevelRingNode();
  uint64_t v20 = (char *)objc_msgSendSuper2(&v28, sel_init);
  uint64_t v21 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_ringNode;
  unint64_t v22 = *(void **)&v20[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_ringNode];
  uint64_t v23 = v20;
  id v24 = v22;
  CGMutablePathRef Mutable = CGPathCreateMutable();
  uint64_t v29 = 0x3FF0000000000000;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0x3FF0000000000000;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
  objc_msgSend(v24, sel_setPath_, Mutable);

  uint64_t v26 = *(void **)&v20[v21];
  objc_msgSend(v26, sel_setLineWidth_, *(double *)&v23[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetWidth]);
  objc_msgSend(v23, sel_addChild_, v26);

  return v23;
}

id FMPFSKBTLevelRingNode.render()()
{
  BOOL IsReduceMotionEnabled = UIAccessibilityIsReduceMotionEnabled();
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_visibilitySpring];
  objc_super v2 = (double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  double v4 = *v2 + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v2[35] + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v4) <= *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
    double v4 = v2[35] + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  }
  objc_msgSend(v0, sel_setAlpha_, *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetAlpha] * v4);
  unint64_t v6 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_ringNode];
  uint64_t v7 = *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_collapseSpring];
  uint64_t v8 = (double *)(v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  uint64_t v9 = (double *)(v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  double v10 = *v8 + *(double *)(v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  uint64_t v11 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v8[35] + *(double *)(v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v10) <= *(double *)(v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
    double v10 = v8[35] + v9[5];
  }
  objc_msgSend(v6, sel_setAlpha_, v10);
  if (IsReduceMotionEnabled)
  {
    objc_msgSend(v0, sel_setScale_, v2[35] + v3[5]);
    double v12 = 1.0;
  }
  else
  {
    double v13 = *v2 + *v3;
    if (vabdd_f64(v2[35] + v3[5], v13) <= *(double *)(v1 + v5)) {
      double v13 = v2[35] + v3[5];
    }
    objc_msgSend(v0, sel_setScale_, v13);
    double v12 = *v8 + *v9;
    if (vabdd_f64(v8[35] + v9[5], v12) <= *(double *)(v7 + v11)) {
      double v12 = v8[35] + v9[5];
    }
  }
  return FMPFSKBTLevelRingNode.renderRingPath(at:)(v12);
}

id FMPFSKBTLevelRingNode.renderRingPath(at:)(double a1)
{
  double v2 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetRadius);
  double v3 = v2 * a1;
  double v4 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetWidth) + v2 - v2 * a1 + v2 - v2 * a1;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_collapseSpring);
  unint64_t v6 = (double *)(v5 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  if (vabdd_f64(v6[35] + *(double *)(v5 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v6 + *(double *)(v5 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v5+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))double v7 = *v6 + *(double *)(v5 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o); {
  else
  }
    double v7 = v6[35] + *(double *)(v5 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_ringNode);
  uint64_t v9 = self;
  double v10 = v9;
  if (v7 >= 0.7)
  {
    id v21 = objc_msgSend(v9, sel_whiteColor);
    objc_msgSend(v8, sel_setStrokeColor_, v21);

    id v22 = objc_msgSend(v10, sel_clearColor);
    objc_msgSend(v8, sel_setFillColor_, v22);

    CGMutablePathRef Mutable = CGPathCreateMutable();
    CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
  }
  else
  {
    id v11 = objc_msgSend(v9, sel_clearColor);
    objc_msgSend(v8, sel_setStrokeColor_, v11);

    id v12 = objc_msgSend(v10, sel_whiteColor);
    objc_msgSend(v8, sel_setFillColor_, v12);

    double v13 = v3 + v4 * 0.5;
    double v14 = v3 - v4 * 0.5;
    double v15 = -v13;
    double v16 = v13 + v13;
    double v17 = self;
    id v18 = objc_msgSend(v17, sel_bezierPathWithOvalInRect_, v15, v15, v16, v16);
    id v19 = objc_msgSend(v17, sel_bezierPathWithOvalInRect_, -v14, -v14, v14 + v14, v14 + v14);
    objc_msgSend(v18, sel_appendPath_, v19);
    objc_msgSend(v18, sel_setUsesEvenOddFillRule_, 1);
    CGMutablePathRef Mutable = (CGMutablePathRef)objc_msgSend(v18, sel_CGPath);

    double v4 = 0.0;
  }
  objc_msgSend(v8, sel_setPath_, Mutable);

  return objc_msgSend(v8, sel_setLineWidth_, v4);
}

id FMPFSKBTLevelRingNode.__deallocating_deinit()
{
  return FMPFSKBTLevelRingNode.__deallocating_deinit(type metadata accessor for FMPFSKBTLevelRingNode);
}

uint64_t type metadata accessor for FMPFSKBTLevelRingNode()
{
  return self;
}

id FMPFSKBTLevelsNode.init()()
{
  uint64_t v1 = v0;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI18FMPFSKBTLevelsNode_ringNodes] = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySdGG_10TVRemoteUI21FMPFSKBTLevelRingNodeCs5NeverOTg508_sSiSd10f4UI21hij32CIgyyo_Si6offset_Sd7elementtACs5K81OIegnrzr_TR04_s10a18UI18FMPFSKBTLevelse12CACycfcAA017cD14D0CSi_SdtXEfU_Tf3nnnpf_nTf1cn_n((uint64_t)&outlined read-only object #0 of FMPFSKBTLevelsNode.init());

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FMPFSKBTLevelsNode();
  id v2 = objc_msgSendSuper2(&v5, sel_init);
  unint64_t v3 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v3, v2);
  swift_bridgeObjectRelease();

  return v2;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySdGG_10TVRemoteUI21FMPFSKBTLevelRingNodeCs5NeverOTg508_sSiSd10f4UI21hij32CIgyyo_Si6offset_Sd7elementtACs5K81OIegnrzr_TR04_s10a18UI18FMPFSKBTLevelse12CACycfcAA017cD14D0CSi_SdtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v17 = MEMORY[0x263F8EE78];
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      double v4 = *(double *)(a1 + 32 + 8 * i);
      id v5 = objc_msgSend(self, sel_mainScreen);
      objc_msgSend(v5, sel_bounds);
      CGFloat v7 = v6;
      CGFloat v9 = v8;
      CGFloat v11 = v10;
      CGFloat v13 = v12;

      v18.origin.CGFloat x = v7;
      v18.origin.CGFloat y = v9;
      v18.size.width = v11;
      v18.size.height = v13;
      double v14 = v4 * CGRectGetHeight(v18) * 0.5;
      id v15 = objc_allocWithZone((Class)type metadata accessor for FMPFSKBTLevelRingNode());
      FMPFSKBTLevelRingNode.init(threshold:radius:width:alpha:response:)(v4, v14, 10.0, (double)i * -0.05 + 0.45, (double)i * 0.33 + 1.0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  return v17;
}

Swift::Void __swiftcall FMPFSKBTLevelsNode.show(sprung:)(Swift::Bool sprung)
{
  unint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI18FMPFSKBTLevelsNode_ringNodes);
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v4) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_15;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    int64x2_t v30 = vdupq_n_s64(0x4341C37937E08000uLL);
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v15 = (char *)MEMORY[0x22A677580](v5, v3);
      }
      else {
        id v15 = (char *)*(id *)(v3 + 8 * v5 + 32);
      }
      double v16 = v15;
      uint64_t v17 = *(void *)&v15[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_visibilitySpring];
      if (sprung)
      {
        uint64_t v18 = v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
        *(void *)uint64_t v18 = 0x3FF0000000000000;
        *(unsigned char *)(v18 + 8) = 0;
        uint64_t v19 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
        swift_beginAccess();
        uint64_t v20 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
        double v21 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        if (*(double *)(v19 + 280) + v21 == 1.79769313e308)
        {
          uint64_t v22 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
          uint64_t v23 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
          *(_OWORD *)uint64_t v19 = xmmword_2273F56C0;
          *(void *)(v19 + 16) = v22;
          *(_OWORD *)(v19 + 24) = xmmword_2273F4ED0;
          *(_OWORD *)(v19 + 40) = xmmword_2273F4EE0;
          *(void *)(v19 + 56) = v22;
          *(void *)(v19 + 64) = 0;
          *(void *)(v19 + 72) = 0;
          *(int64x2_t *)(v19 + 80) = v30;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 112) = 0u;
          *(void *)(v19 + 128) = v23;
          *(_OWORD *)(v19 + 136) = xmmword_2273F4ED0;
          *(_OWORD *)(v19 + 152) = xmmword_2273F4EE0;
          *(void *)(v19 + 168) = v23;
          *(void *)(v19 + 176) = 0;
          *(void *)(v19 + 184) = 0;
          *(int64x2_t *)(v19 + 192) = v30;
          *(_OWORD *)(v19 + 208) = 0u;
          *(_OWORD *)(v19 + 224) = 0u;
          *(_OWORD *)(v19 + 240) = xmmword_2273F56C0;
          *(_OWORD *)(v19 + 256) = xmmword_2273F5810;
          *(_OWORD *)(v19 + 272) = xmmword_2273F5820;
          *(void *)(v19 + 288) = 0;
          *(void *)(v19 + 296) = 0;
          *(int64x2_t *)(v19 + 304) = v30;
          *(_OWORD *)(v19 + 320) = 0u;
          *(_OWORD *)(v19 + 336) = 0u;
          uint64_t v24 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
          *(void *)(v19 + 352) = v24;
          uint64_t v25 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
          *(void *)(v19 + 360) = v25;
          double v26 = 6.28318531
              / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
              * (6.28318531
               / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
          double v27 = sqrt(v26);
          double v28 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v27 + v27);
          *(void *)uint64_t v20 = 0;
          *(void *)(v20 + 8) = 0;
          *(void *)(v20 + 16) = 0x3FF0000000000000;
          *(double *)(v20 + 24) = v26;
          *(double *)(v20 + 32) = v28;
          *(void *)(v20 + 40) = 0;
          *(int64x2_t *)(v20 + 64) = v30;
          *(_OWORD *)(v20 + 80) = 0u;
          *(_OWORD *)(v20 + 96) = 0u;
          *(void *)(v20 + 48) = v24;
          *(void *)(v20 + 56) = v25;
          *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0x3FF0000000000000;
          *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
          *(unsigned char *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
          double v21 = 0.0;
        }
        double v29 = 1.0 - v21;
        *(double *)(v19 + 280) = v29;
        *(double *)(v19 + 240) = v29;
        *(void *)(v19 + 248) = 0;
      }
      else
      {
        uint64_t v6 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
        uint64_t v7 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
        uint64_t v8 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
        swift_beginAccess();
        *(_OWORD *)uint64_t v8 = xmmword_2273F56C0;
        *(void *)(v8 + 16) = v6;
        *(_OWORD *)(v8 + 24) = xmmword_2273F4ED0;
        *(_OWORD *)(v8 + 40) = xmmword_2273F4EE0;
        *(void *)(v8 + 56) = v6;
        *(void *)(v8 + 64) = 0;
        *(void *)(v8 + 72) = 0;
        *(int64x2_t *)(v8 + 80) = v30;
        *(_OWORD *)(v8 + 96) = 0u;
        *(_OWORD *)(v8 + 112) = 0u;
        *(void *)(v8 + 128) = v7;
        *(_OWORD *)(v8 + 136) = xmmword_2273F4ED0;
        *(_OWORD *)(v8 + 152) = xmmword_2273F4EE0;
        *(void *)(v8 + 168) = v7;
        *(void *)(v8 + 176) = 0;
        *(void *)(v8 + 184) = 0;
        *(int64x2_t *)(v8 + 192) = v30;
        *(_OWORD *)(v8 + 208) = 0u;
        *(_OWORD *)(v8 + 224) = 0u;
        *(_OWORD *)(v8 + 240) = xmmword_2273F56C0;
        *(_OWORD *)(v8 + 256) = xmmword_2273F5810;
        *(_OWORD *)(v8 + 272) = xmmword_2273F5820;
        *(void *)(v8 + 288) = 0;
        *(void *)(v8 + 296) = 0;
        *(int64x2_t *)(v8 + 304) = v30;
        *(_OWORD *)(v8 + 320) = 0u;
        *(_OWORD *)(v8 + 336) = 0u;
        uint64_t v9 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
        *(void *)(v8 + 352) = v9;
        uint64_t v10 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
        *(void *)(v8 + 360) = v10;
        double v11 = 6.28318531
            / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
            * (6.28318531
             / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
        double v12 = sqrt(v11);
        double v13 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v12 + v12);
        uint64_t v14 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
        *(void *)uint64_t v14 = 0;
        *(void *)(v14 + 8) = 0;
        *(void *)(v14 + 16) = 0x3FF0000000000000;
        *(double *)(v14 + 24) = v11;
        *(double *)(v14 + 32) = v13;
        *(void *)(v14 + 40) = 0;
        *(int64x2_t *)(v14 + 64) = v30;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(void *)(v14 + 48) = v9;
        *(void *)(v14 + 56) = v10;
        *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0x3FF0000000000000;
        *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
        *(unsigned char *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        FMPFSKBTLevelRingNode.render()();
      }

      ++v5;
    }
    while (v4 != v5);
    goto LABEL_15;
  }
  __break(1u);
}

Swift::Void __swiftcall FMPFSKBTLevelsNode.hide(sprung:)(Swift::Bool sprung)
{
  unint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI18FMPFSKBTLevelsNode_ringNodes);
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v4) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4) {
    goto LABEL_15;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    int64x2_t v30 = vdupq_n_s64(0x4341C37937E08000uLL);
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v15 = (char *)MEMORY[0x22A677580](v5, v3);
      }
      else {
        id v15 = (char *)*(id *)(v3 + 8 * v5 + 32);
      }
      double v16 = v15;
      uint64_t v17 = *(void *)&v15[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_visibilitySpring];
      if (sprung)
      {
        uint64_t v18 = v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
        *(void *)uint64_t v18 = 0;
        *(unsigned char *)(v18 + 8) = 0;
        uint64_t v19 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
        swift_beginAccess();
        uint64_t v20 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
        double v21 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        if (*(double *)(v19 + 280) + v21 == 1.79769313e308)
        {
          uint64_t v22 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
          uint64_t v23 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
          *(void *)uint64_t v19 = 0;
          *(void *)(v19 + 8) = 0;
          *(void *)(v19 + 16) = v22;
          *(_OWORD *)(v19 + 24) = xmmword_2273F4ED0;
          *(_OWORD *)(v19 + 40) = xmmword_2273F4EE0;
          *(void *)(v19 + 56) = v22;
          *(void *)(v19 + 64) = 0;
          *(void *)(v19 + 72) = 0;
          *(int64x2_t *)(v19 + 80) = v30;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 112) = 0u;
          *(void *)(v19 + 128) = v23;
          *(_OWORD *)(v19 + 136) = xmmword_2273F4ED0;
          *(_OWORD *)(v19 + 152) = xmmword_2273F4EE0;
          *(void *)(v19 + 168) = v23;
          *(void *)(v19 + 176) = 0;
          *(void *)(v19 + 184) = 0;
          *(int64x2_t *)(v19 + 192) = v30;
          *(_OWORD *)(v19 + 208) = 0u;
          *(_OWORD *)(v19 + 224) = 0u;
          *(_OWORD *)(v19 + 240) = 0u;
          *(_OWORD *)(v19 + 256) = xmmword_2273F5810;
          *(void *)(v19 + 272) = 0x403921FB54442D18;
          *(void *)(v19 + 288) = 0;
          *(void *)(v19 + 296) = 0;
          *(void *)(v19 + 280) = 0;
          *(int64x2_t *)(v19 + 304) = v30;
          *(_OWORD *)(v19 + 320) = 0u;
          *(_OWORD *)(v19 + 336) = 0u;
          uint64_t v24 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
          *(void *)(v19 + 352) = v24;
          uint64_t v25 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
          *(void *)(v19 + 360) = v25;
          double v26 = 6.28318531
              / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
              * (6.28318531
               / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
          double v27 = sqrt(v26);
          double v28 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v27 + v27);
          *(void *)uint64_t v20 = 0;
          *(void *)(v20 + 8) = 0;
          *(void *)(v20 + 16) = 0x3FF0000000000000;
          *(double *)(v20 + 24) = v26;
          *(double *)(v20 + 32) = v28;
          *(void *)(v20 + 40) = 0;
          *(int64x2_t *)(v20 + 64) = v30;
          *(_OWORD *)(v20 + 80) = 0u;
          *(_OWORD *)(v20 + 96) = 0u;
          *(void *)(v20 + 48) = v24;
          *(void *)(v20 + 56) = v25;
          *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0;
          *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
          *(unsigned char *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
          double v21 = 0.0;
        }
        double v29 = 0.0 - v21;
        *(double *)(v19 + 280) = v29;
        *(double *)(v19 + 240) = v29;
        *(void *)(v19 + 248) = 0;
      }
      else
      {
        uint64_t v6 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
        uint64_t v7 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
        uint64_t v8 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
        swift_beginAccess();
        *(void *)uint64_t v8 = 0;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = v6;
        *(_OWORD *)(v8 + 24) = xmmword_2273F4ED0;
        *(_OWORD *)(v8 + 40) = xmmword_2273F4EE0;
        *(void *)(v8 + 56) = v6;
        *(void *)(v8 + 64) = 0;
        *(void *)(v8 + 72) = 0;
        *(int64x2_t *)(v8 + 80) = v30;
        *(_OWORD *)(v8 + 96) = 0u;
        *(_OWORD *)(v8 + 112) = 0u;
        *(void *)(v8 + 128) = v7;
        *(_OWORD *)(v8 + 136) = xmmword_2273F4ED0;
        *(_OWORD *)(v8 + 152) = xmmword_2273F4EE0;
        *(void *)(v8 + 168) = v7;
        *(void *)(v8 + 176) = 0;
        *(void *)(v8 + 184) = 0;
        *(int64x2_t *)(v8 + 192) = v30;
        *(_OWORD *)(v8 + 208) = 0u;
        *(_OWORD *)(v8 + 224) = 0u;
        *(_OWORD *)(v8 + 240) = 0u;
        *(_OWORD *)(v8 + 256) = xmmword_2273F5810;
        *(void *)(v8 + 272) = 0x403921FB54442D18;
        *(void *)(v8 + 280) = 0;
        *(void *)(v8 + 288) = 0;
        *(void *)(v8 + 296) = 0;
        *(int64x2_t *)(v8 + 304) = v30;
        *(_OWORD *)(v8 + 320) = 0u;
        *(_OWORD *)(v8 + 336) = 0u;
        uint64_t v9 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
        *(void *)(v8 + 352) = v9;
        uint64_t v10 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
        *(void *)(v8 + 360) = v10;
        double v11 = 6.28318531
            / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
            * (6.28318531
             / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
        double v12 = sqrt(v11);
        double v13 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v12 + v12);
        uint64_t v14 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
        *(void *)uint64_t v14 = 0;
        *(void *)(v14 + 8) = 0;
        *(void *)(v14 + 16) = 0x3FF0000000000000;
        *(double *)(v14 + 24) = v11;
        *(double *)(v14 + 32) = v13;
        *(void *)(v14 + 40) = 0;
        *(int64x2_t *)(v14 + 64) = v30;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(void *)(v14 + 48) = v9;
        *(void *)(v14 + 56) = v10;
        *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0;
        *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
        *(unsigned char *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        FMPFSKBTLevelRingNode.render()();
      }

      ++v5;
    }
    while (v4 != v5);
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t FMPFSKBTLevelsNode.update(diskSize:sprung:)(char a1, double a2)
{
  unint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI18FMPFSKBTLevelsNode_ringNodes);
  uint64_t v77 = MEMORY[0x263F8EE78];
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = result;
    unint64_t v73 = v5 >> 62;
    if (!result) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v73 = v5 >> 62;
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_62;
  }
  if ((v5 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if (*(double *)(MEMORY[0x22A677580](i, v5) + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold) <= a2)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold;
    do
    {
      double v11 = *(char **)(v5 + 8 * v9 + 32);
      if (*(double *)&v11[v10] <= a2)
      {
        double v12 = v11;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v10 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold;
      }
      ++v9;
    }
    while (v6 != v9);
  }
LABEL_15:
  swift_bridgeObjectRelease();
  double v13 = &OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_name;
  if (v77 < 0 || (v77 & 0x4000000000000000) != 0)
  {
    swift_retain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (!result) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v77 + 16);
    uint64_t result = swift_retain();
    if (!v14) {
      goto LABEL_30;
    }
  }
  if (v14 < 1)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v15 = 0;
  int64x2_t v75 = vdupq_n_s64(0x4341C37937E08000uLL);
  do
  {
    if ((v77 & 0xC000000000000001) != 0) {
      uint64_t v25 = (char *)MEMORY[0x22A677580](v15, v77);
    }
    else {
      uint64_t v25 = (char *)*(id *)(v77 + 8 * v15 + 32);
    }
    double v26 = v25;
    double v27 = v13;
    uint64_t v28 = *(void *)&v25[v13[243]];
    if (a1)
    {
      uint64_t v29 = v28 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(void *)uint64_t v29 = 0;
      *(unsigned char *)(v29 + 8) = 0;
      uint64_t v30 = v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
      swift_beginAccess();
      uint64_t v31 = v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
      double v32 = *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      if (*(double *)(v30 + 280) + v32 == 1.79769313e308)
      {
        uint64_t v33 = *(void *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
        uint64_t v34 = *(void *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
        *(void *)uint64_t v30 = 0;
        *(void *)(v30 + 8) = 0;
        *(void *)(v30 + 16) = v33;
        *(_OWORD *)(v30 + 24) = xmmword_2273F4ED0;
        *(_OWORD *)(v30 + 40) = xmmword_2273F4EE0;
        *(void *)(v30 + 56) = v33;
        *(void *)(v30 + 64) = 0;
        *(void *)(v30 + 72) = 0;
        *(int64x2_t *)(v30 + 80) = v75;
        *(_OWORD *)(v30 + 96) = 0u;
        *(_OWORD *)(v30 + 112) = 0u;
        *(void *)(v30 + 128) = v34;
        *(_OWORD *)(v30 + 136) = xmmword_2273F4ED0;
        *(_OWORD *)(v30 + 152) = xmmword_2273F4EE0;
        *(void *)(v30 + 168) = v34;
        *(void *)(v30 + 176) = 0;
        *(void *)(v30 + 184) = 0;
        *(int64x2_t *)(v30 + 192) = v75;
        *(_OWORD *)(v30 + 208) = 0u;
        *(_OWORD *)(v30 + 224) = 0u;
        *(_OWORD *)(v30 + 240) = 0u;
        *(_OWORD *)(v30 + 256) = xmmword_2273F5810;
        *(void *)(v30 + 272) = 0x403921FB54442D18;
        *(void *)(v30 + 288) = 0;
        *(void *)(v30 + 296) = 0;
        *(void *)(v30 + 280) = 0;
        *(int64x2_t *)(v30 + 304) = v75;
        *(_OWORD *)(v30 + 320) = 0u;
        *(_OWORD *)(v30 + 336) = 0u;
        uint64_t v35 = *(void *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
        *(void *)(v30 + 352) = v35;
        uint64_t v36 = *(void *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
        *(void *)(v30 + 360) = v36;
        double v37 = 6.28318531
            / *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
            * (6.28318531
             / *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
        double v38 = sqrt(v37);
        double v39 = *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v38 + v38);
        *(void *)uint64_t v31 = 0;
        *(void *)(v31 + 8) = 0;
        *(void *)(v31 + 16) = 0x3FF0000000000000;
        *(double *)(v31 + 24) = v37;
        *(double *)(v31 + 32) = v39;
        *(void *)(v31 + 40) = 0;
        *(int64x2_t *)(v31 + 64) = v75;
        *(_OWORD *)(v31 + 80) = 0u;
        *(_OWORD *)(v31 + 96) = 0u;
        *(void *)(v31 + 48) = v35;
        *(void *)(v31 + 56) = v36;
        *(void *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0;
        *(void *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
        *(unsigned char *)(v28 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        double v32 = 0.0;
      }
      double v40 = 0.0 - v32;
      *(double *)(v30 + 280) = v40;
      *(double *)(v30 + 240) = v40;
      *(void *)(v30 + 248) = 0;
    }
    else
    {
      uint64_t v16 = *(void *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
      uint64_t v17 = *(void *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
      uint64_t v18 = v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
      swift_beginAccess();
      *(void *)uint64_t v18 = 0;
      *(void *)(v18 + 8) = 0;
      *(void *)(v18 + 16) = v16;
      *(_OWORD *)(v18 + 24) = xmmword_2273F4ED0;
      *(_OWORD *)(v18 + 40) = xmmword_2273F4EE0;
      *(void *)(v18 + 56) = v16;
      *(void *)(v18 + 64) = 0;
      *(void *)(v18 + 72) = 0;
      *(int64x2_t *)(v18 + 80) = v75;
      *(_OWORD *)(v18 + 96) = 0u;
      *(_OWORD *)(v18 + 112) = 0u;
      *(void *)(v18 + 128) = v17;
      *(_OWORD *)(v18 + 136) = xmmword_2273F4ED0;
      *(_OWORD *)(v18 + 152) = xmmword_2273F4EE0;
      *(void *)(v18 + 168) = v17;
      *(void *)(v18 + 176) = 0;
      *(void *)(v18 + 184) = 0;
      *(int64x2_t *)(v18 + 192) = v75;
      *(_OWORD *)(v18 + 208) = 0u;
      *(_OWORD *)(v18 + 224) = 0u;
      *(_OWORD *)(v18 + 240) = 0u;
      *(_OWORD *)(v18 + 256) = xmmword_2273F5810;
      *(void *)(v18 + 272) = 0x403921FB54442D18;
      *(void *)(v18 + 280) = 0;
      *(void *)(v18 + 288) = 0;
      *(void *)(v18 + 296) = 0;
      *(int64x2_t *)(v18 + 304) = v75;
      *(_OWORD *)(v18 + 320) = 0u;
      *(_OWORD *)(v18 + 336) = 0u;
      uint64_t v19 = *(void *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
      *(void *)(v18 + 352) = v19;
      uint64_t v20 = *(void *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
      *(void *)(v18 + 360) = v20;
      double v21 = 6.28318531
          / *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
          * (6.28318531
           / *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
      double v22 = sqrt(v21);
      double v23 = *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v22 + v22);
      uint64_t v24 = v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
      *(void *)uint64_t v24 = 0;
      *(void *)(v24 + 8) = 0;
      *(void *)(v24 + 16) = 0x3FF0000000000000;
      *(double *)(v24 + 24) = v21;
      *(double *)(v24 + 32) = v23;
      *(void *)(v24 + 40) = 0;
      *(int64x2_t *)(v24 + 64) = v75;
      *(_OWORD *)(v24 + 80) = 0u;
      *(_OWORD *)(v24 + 96) = 0u;
      *(void *)(v24 + 48) = v19;
      *(void *)(v24 + 56) = v20;
      *(void *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0;
      *(void *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
      *(unsigned char *)(v28 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      FMPFSKBTLevelRingNode.render()();
    }

    ++v15;
    double v13 = v27;
  }
  while (v14 != v15);
LABEL_30:
  swift_release_n();
  uint64_t v76 = MEMORY[0x263F8EE78];
  if (v73)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v41 = result;
    if (!result) {
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v41 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v41) {
      goto LABEL_45;
    }
  }
  if (v41 < 1)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if ((v5 & 0xC000000000000001) != 0)
  {
    for (uint64_t j = 0; j != v41; ++j)
    {
      if (*(double *)(MEMORY[0x22A677580](j, v5) + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold) > a2)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v44 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold;
    do
    {
      int64_t v45 = *(char **)(v5 + 8 * v43 + 32);
      if (*(double *)&v45[v44] > a2)
      {
        long long v46 = v45;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v44 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold;
      }
      ++v43;
    }
    while (v41 != v43);
  }
LABEL_45:
  swift_bridgeObjectRelease();
  if ((v76 & 0x8000000000000000) == 0 && (v76 & 0x4000000000000000) == 0)
  {
    uint64_t v47 = *(void *)(v76 + 16);
    uint64_t result = swift_retain();
    if (v47) {
      goto LABEL_48;
    }
    return swift_release_n();
  }
  swift_retain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v47 = result;
  if (!result) {
    return swift_release_n();
  }
LABEL_48:
  if (v47 >= 1)
  {
    uint64_t v48 = 0;
    int64x2_t v74 = vdupq_n_s64(0x4341C37937E08000uLL);
    do
    {
      if ((v76 & 0xC000000000000001) != 0) {
        long long v58 = (char *)MEMORY[0x22A677580](v48, v76);
      }
      else {
        long long v58 = (char *)*(id *)(v76 + 8 * v48 + 32);
      }
      long long v59 = v58;
      uint64_t v60 = *(void *)&v58[v13[243]];
      if (a1)
      {
        uint64_t v61 = v60 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
        *(void *)uint64_t v61 = 0x3FF0000000000000;
        *(unsigned char *)(v61 + 8) = 0;
        uint64_t v62 = v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
        swift_beginAccess();
        uint64_t v63 = v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
        double v64 = *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        if (*(double *)(v62 + 280) + v64 == 1.79769313e308)
        {
          uint64_t v65 = *(void *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
          uint64_t v66 = *(void *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
          *(_OWORD *)uint64_t v62 = xmmword_2273F56C0;
          *(void *)(v62 + 16) = v65;
          *(_OWORD *)(v62 + 24) = xmmword_2273F4ED0;
          *(_OWORD *)(v62 + 40) = xmmword_2273F4EE0;
          *(void *)(v62 + 56) = v65;
          *(void *)(v62 + 64) = 0;
          *(void *)(v62 + 72) = 0;
          *(int64x2_t *)(v62 + 80) = v74;
          *(_OWORD *)(v62 + 96) = 0u;
          *(_OWORD *)(v62 + 112) = 0u;
          *(void *)(v62 + 128) = v66;
          *(_OWORD *)(v62 + 136) = xmmword_2273F4ED0;
          *(_OWORD *)(v62 + 152) = xmmword_2273F4EE0;
          *(void *)(v62 + 168) = v66;
          *(void *)(v62 + 176) = 0;
          *(void *)(v62 + 184) = 0;
          *(int64x2_t *)(v62 + 192) = v74;
          *(_OWORD *)(v62 + 208) = 0u;
          *(_OWORD *)(v62 + 224) = 0u;
          *(_OWORD *)(v62 + 240) = xmmword_2273F56C0;
          *(_OWORD *)(v62 + 256) = xmmword_2273F5810;
          *(_OWORD *)(v62 + 272) = xmmword_2273F5820;
          *(void *)(v62 + 288) = 0;
          *(void *)(v62 + 296) = 0;
          *(int64x2_t *)(v62 + 304) = v74;
          *(_OWORD *)(v62 + 320) = 0u;
          *(_OWORD *)(v62 + 336) = 0u;
          uint64_t v67 = *(void *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
          *(void *)(v62 + 352) = v67;
          uint64_t v68 = *(void *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
          *(void *)(v62 + 360) = v68;
          double v69 = 6.28318531
              / *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
              * (6.28318531
               / *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
          double v70 = sqrt(v69);
          double v71 = *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v70 + v70);
          *(void *)uint64_t v63 = 0;
          *(void *)(v63 + 8) = 0;
          *(void *)(v63 + 16) = 0x3FF0000000000000;
          *(double *)(v63 + 24) = v69;
          *(double *)(v63 + 32) = v71;
          *(void *)(v63 + 40) = 0;
          *(int64x2_t *)(v63 + 64) = v74;
          *(_OWORD *)(v63 + 80) = 0u;
          *(_OWORD *)(v63 + 96) = 0u;
          *(void *)(v63 + 48) = v67;
          *(void *)(v63 + 56) = v68;
          *(void *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0x3FF0000000000000;
          *(void *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
          *(unsigned char *)(v60 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
          double v64 = 0.0;
        }
        double v72 = 1.0 - v64;
        *(double *)(v62 + 280) = v72;
        *(double *)(v62 + 240) = v72;
        *(void *)(v62 + 248) = 0;
      }
      else
      {
        uint64_t v49 = *(void *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
        uint64_t v50 = *(void *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
        uint64_t v51 = v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
        swift_beginAccess();
        *(_OWORD *)uint64_t v51 = xmmword_2273F56C0;
        *(void *)(v51 + 16) = v49;
        *(_OWORD *)(v51 + 24) = xmmword_2273F4ED0;
        *(_OWORD *)(v51 + 40) = xmmword_2273F4EE0;
        *(void *)(v51 + 56) = v49;
        *(void *)(v51 + 64) = 0;
        *(void *)(v51 + 72) = 0;
        *(int64x2_t *)(v51 + 80) = v74;
        *(_OWORD *)(v51 + 96) = 0u;
        *(_OWORD *)(v51 + 112) = 0u;
        *(void *)(v51 + 128) = v50;
        *(_OWORD *)(v51 + 136) = xmmword_2273F4ED0;
        *(_OWORD *)(v51 + 152) = xmmword_2273F4EE0;
        *(void *)(v51 + 168) = v50;
        *(void *)(v51 + 176) = 0;
        *(void *)(v51 + 184) = 0;
        *(int64x2_t *)(v51 + 192) = v74;
        *(_OWORD *)(v51 + 208) = 0u;
        *(_OWORD *)(v51 + 224) = 0u;
        *(_OWORD *)(v51 + 240) = xmmword_2273F56C0;
        *(_OWORD *)(v51 + 256) = xmmword_2273F5810;
        *(_OWORD *)(v51 + 272) = xmmword_2273F5820;
        *(void *)(v51 + 288) = 0;
        *(void *)(v51 + 296) = 0;
        *(int64x2_t *)(v51 + 304) = v74;
        *(_OWORD *)(v51 + 320) = 0u;
        *(_OWORD *)(v51 + 336) = 0u;
        uint64_t v52 = *(void *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
        *(void *)(v51 + 352) = v52;
        uint64_t v53 = *(void *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
        *(void *)(v51 + 360) = v53;
        double v54 = 6.28318531
            / *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
            * (6.28318531
             / *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
        double v55 = sqrt(v54);
        double v56 = *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v55 + v55);
        uint64_t v57 = v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
        *(void *)uint64_t v57 = 0;
        *(void *)(v57 + 8) = 0;
        *(void *)(v57 + 16) = 0x3FF0000000000000;
        *(double *)(v57 + 24) = v54;
        *(double *)(v57 + 32) = v56;
        *(void *)(v57 + 40) = 0;
        *(int64x2_t *)(v57 + 64) = v74;
        *(_OWORD *)(v57 + 80) = 0u;
        *(_OWORD *)(v57 + 96) = 0u;
        *(void *)(v57 + 48) = v52;
        *(void *)(v57 + 56) = v53;
        *(void *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0x3FF0000000000000;
        *(void *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
        *(unsigned char *)(v60 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        FMPFSKBTLevelRingNode.render()();
      }

      ++v48;
    }
    while (v47 != v48);
    return swift_release_n();
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t FMPFSKBTLevelsNode.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

id FMPFSKBTLevelsNode.__deallocating_deinit()
{
  return FMPFSKBTLevelRingNode.__deallocating_deinit(type metadata accessor for FMPFSKBTLevelsNode);
}

id FMPFSKBTLevelRingNode.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKBTLevelsNode()
{
  return self;
}

uint64_t specialized Sequence.forEach(_:)(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  unint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (!__OFSUB__(v4--, 1))
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)MEMORY[0x22A677580](v4, a1);
LABEL_5:
        uint64_t v6 = v5;
        objc_msgSend(a2, sel_addChild_, v5);

        if (!v4) {
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
        if ((v4 & 0x8000000000000000) != 0) {
          goto LABEL_12;
        }
        if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v5 = *(id *)(a1 + 32 + 8 * v4);
          goto LABEL_5;
        }
LABEL_13:
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        if (!v4) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  return swift_bridgeObjectRelease();
}

void specialized FMPFSKBTLevelRingNode.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_visibilitySpring;
  *(void *)&v0[v1] = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(0, 0, 0x3F50624DD2F1A9FCLL, 0);
  uint64_t v2 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_collapseSpring;
  *(void *)&v0[v2] = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(0x3FF0000000000000, 0, 0x3F50624DD2F1A9FCLL, 0);
  uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_ringNode;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F17C18]), sel_init);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

ValueMetadata *type metadata accessor for FMPFBezierFunction()
{
  return &type metadata for FMPFBezierFunction;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

Swift::Void __swiftcall FMPFSKScene.fragmentsStartedOrbiting()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.default);
  uint64_t v9 = v0;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v33 = v5;
  if (v12)
  {
    uint64_t v30 = v2;
    uint64_t v31 = v1;
    double v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)double v13 = 136315138;
    uint64_t v15 = *(void **)&v9[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode];
    if (v15)
    {
      id v16 = objc_msgSend(v15, sel_description);
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v19 = v18;
    }
    else
    {
      uint64_t v17 = 0;
      unint64_t v19 = 0xE000000000000000;
    }
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227326000, v10, v11, "🧭 FMPFSKPatternNode%s: fragmentsStartedOrbiting()", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v14, -1, -1);
    MEMORY[0x22A6785E0](v13, -1, -1);

    uint64_t v2 = v30;
    uint64_t v1 = v31;
  }
  else
  {
  }
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v9;
  double v21 = self;
  double v22 = v9;
  if (objc_msgSend(v21, sel_isMainThread))
  {
    double v23 = &v22[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22A6786A0](&v22[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      uint64_t v24 = *((void *)v23 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v24 + 8) + 8))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
      return;
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    double v26 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = partial apply for closure #1 in FMPFSKScene.fragmentsStartedOrbiting();
    *(void *)(v27 + 24) = v20;
    aBlock[4] = (uint64_t)closure #1 in FMPFSKScene.dispatch(_:)partial apply;
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_73;
    uint64_t v28 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A677410](0, v7, v4, v28);
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v33);
  }

  swift_release();
}

BOOL closure #1 in FMPFSKScene.fragmentsStartedOrbiting()(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  uint64_t v2 = MEMORY[0x22A6786A0](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 8))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.fragmentsStoppedOrbiting()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.default);
  uint64_t v9 = v0;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v33 = v5;
  if (v12)
  {
    uint64_t v30 = v2;
    uint64_t v31 = v1;
    double v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)double v13 = 136315138;
    uint64_t v15 = *(void **)&v9[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode];
    if (v15)
    {
      id v16 = objc_msgSend(v15, sel_description);
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v19 = v18;
    }
    else
    {
      uint64_t v17 = 0;
      unint64_t v19 = 0xE000000000000000;
    }
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227326000, v10, v11, "🧭 FMPFSKPatternNode%s: fragmentsStoppedOrbiting()", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v14, -1, -1);
    MEMORY[0x22A6785E0](v13, -1, -1);

    uint64_t v2 = v30;
    uint64_t v1 = v31;
  }
  else
  {
  }
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v9;
  double v21 = self;
  double v22 = v9;
  if (objc_msgSend(v21, sel_isMainThread))
  {
    double v23 = &v22[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22A6786A0](&v22[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      uint64_t v24 = *((void *)v23 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v24 + 8) + 16))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
      return;
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    double v26 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = partial apply for closure #1 in FMPFSKScene.fragmentsStoppedOrbiting();
    *(void *)(v27 + 24) = v20;
    aBlock[4] = (uint64_t)closure #1 in FMPFSKScene.dispatch(_:)partial apply;
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_63;
    uint64_t v28 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A677410](0, v7, v4, v28);
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v33);
  }

  swift_release();
}

BOOL closure #1 in FMPFSKScene.fragmentsStoppedOrbiting()(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  uint64_t v2 = MEMORY[0x22A6786A0](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 16))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.patternIsFullyPeripheral()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  uint64_t v10 = self;
  os_log_type_t v11 = v0;
  if (objc_msgSend(v10, sel_isMainThread))
  {
    BOOL v12 = &v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22A6786A0](&v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      uint64_t v13 = *((void *)v12 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v13 + 8) + 40))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = partial apply for closure #1 in FMPFSKScene.patternIsFullyPeripheral();
    *(void *)(v16 + 24) = v9;
    aBlock[4] = closure #1 in FMPFSKScene.dispatch(_:)partial apply;
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_53;
    uint64_t v17 = _Block_copy(aBlock);
    uint64_t v20 = v5;
    unint64_t v18 = v17;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    id v19 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A677410](0, v8, v4, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);

    swift_release();
  }
}

BOOL closure #1 in FMPFSKScene.patternIsFullyPeripheral()(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  uint64_t v2 = MEMORY[0x22A6786A0](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 40))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.patternIsFullyFormed()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  uint64_t v10 = self;
  os_log_type_t v11 = v0;
  if (objc_msgSend(v10, sel_isMainThread))
  {
    BOOL v12 = &v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22A6786A0](&v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      uint64_t v13 = *((void *)v12 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v13 + 8) + 48))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = partial apply for closure #1 in FMPFSKScene.patternIsFullyFormed();
    *(void *)(v16 + 24) = v9;
    aBlock[4] = closure #1 in FMPFSKScene.dispatch(_:)partial apply;
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_43_0;
    uint64_t v17 = _Block_copy(aBlock);
    uint64_t v20 = v5;
    unint64_t v18 = v17;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    id v19 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A677410](0, v8, v4, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);

    swift_release();
  }
}

BOOL closure #1 in FMPFSKScene.patternIsFullyFormed()(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  uint64_t v2 = MEMORY[0x22A6786A0](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 48))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.pointeeDotIsFullyCentered()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  uint64_t v10 = self;
  os_log_type_t v11 = v0;
  if (objc_msgSend(v10, sel_isMainThread))
  {
    BOOL v12 = &v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22A6786A0](&v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      uint64_t v13 = *((void *)v12 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v13 + 8) + 56))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = partial apply for closure #1 in FMPFSKScene.pointeeDotIsFullyCentered();
    *(void *)(v16 + 24) = v9;
    aBlock[4] = closure #1 in FMPFSKScene.dispatch(_:)partial apply;
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_33;
    uint64_t v17 = _Block_copy(aBlock);
    uint64_t v20 = v5;
    unint64_t v18 = v17;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    id v19 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A677410](0, v8, v4, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);

    swift_release();
  }
}

BOOL closure #1 in FMPFSKScene.pointeeDotIsFullyCentered()(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  uint64_t v2 = MEMORY[0x22A6786A0](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 56))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.patternIsFullyFormedAndPointeeDotIsFullyCentered()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  uint64_t v10 = self;
  os_log_type_t v11 = v0;
  if (objc_msgSend(v10, sel_isMainThread))
  {
    BOOL v12 = &v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22A6786A0](&v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      uint64_t v13 = *((void *)v12 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v13 + 8) + 64))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = partial apply for closure #1 in FMPFSKScene.patternIsFullyFormedAndPointeeDotIsFullyCentered();
    *(void *)(v16 + 24) = v9;
    aBlock[4] = closure #1 in FMPFSKScene.dispatch(_:)partial apply;
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_23;
    uint64_t v17 = _Block_copy(aBlock);
    uint64_t v20 = v5;
    unint64_t v18 = v17;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    id v19 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A677410](0, v8, v4, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);

    swift_release();
  }
}

BOOL closure #1 in FMPFSKScene.patternIsFullyFormedAndPointeeDotIsFullyCentered()(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  uint64_t v2 = MEMORY[0x22A6786A0](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 64))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.pointeeAndNoonDotsDidConverge()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  uint64_t v10 = self;
  os_log_type_t v11 = v0;
  if (objc_msgSend(v10, sel_isMainThread))
  {
    BOOL v12 = &v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22A6786A0](&v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      uint64_t v13 = *((void *)v12 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v13 + 8) + 72))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = partial apply for closure #1 in FMPFSKScene.pointeeAndNoonDotsDidConverge();
    *(void *)(v16 + 24) = v9;
    aBlock[4] = closure #1 in FMPFSKScene.dispatch(_:)partial apply;
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_13;
    uint64_t v17 = _Block_copy(aBlock);
    uint64_t v20 = v5;
    unint64_t v18 = v17;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    id v19 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A677410](0, v8, v4, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);

    swift_release();
  }
}

BOOL closure #1 in FMPFSKScene.pointeeAndNoonDotsDidConverge()(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  uint64_t v2 = MEMORY[0x22A6786A0](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 72))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.pointeeAndNoonDotsDidDiverge()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  uint64_t v10 = self;
  os_log_type_t v11 = v0;
  if (objc_msgSend(v10, sel_isMainThread))
  {
    BOOL v12 = &v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22A6786A0](&v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      uint64_t v13 = *((void *)v12 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v13 + 8) + 80))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = partial apply for closure #1 in FMPFSKScene.pointeeAndNoonDotsDidDiverge();
    *(void *)(v16 + 24) = v9;
    aBlock[4] = partial apply for closure #1 in FMPFSKScene.dispatch(_:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_4;
    uint64_t v17 = _Block_copy(aBlock);
    uint64_t v20 = v5;
    unint64_t v18 = v17;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    id v19 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22A677410](0, v8, v4, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);

    swift_release();
  }
}

BOOL closure #1 in FMPFSKScene.pointeeAndNoonDotsDidDiverge()(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  uint64_t v2 = MEMORY[0x22A6786A0](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v3 + 8) + 80))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

uint64_t sub_2273C18C0()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

BOOL partial apply for closure #1 in FMPFSKScene.pointeeAndNoonDotsDidDiverge()()
{
  return closure #1 in FMPFSKScene.pointeeAndNoonDotsDidDiverge()(*(void *)(v0 + 16));
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t partial apply for closure #1 in FMPFSKScene.dispatch(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

BOOL partial apply for closure #1 in FMPFSKScene.pointeeAndNoonDotsDidConverge()()
{
  return closure #1 in FMPFSKScene.pointeeAndNoonDotsDidConverge()(*(void *)(v0 + 16));
}

BOOL partial apply for closure #1 in FMPFSKScene.patternIsFullyFormedAndPointeeDotIsFullyCentered()()
{
  return closure #1 in FMPFSKScene.patternIsFullyFormedAndPointeeDotIsFullyCentered()(*(void *)(v0 + 16));
}

uint64_t sub_2273C1990()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

BOOL partial apply for closure #1 in FMPFSKScene.pointeeDotIsFullyCentered()()
{
  return closure #1 in FMPFSKScene.pointeeDotIsFullyCentered()(*(void *)(v0 + 16));
}

BOOL partial apply for closure #1 in FMPFSKScene.patternIsFullyFormed()()
{
  return closure #1 in FMPFSKScene.patternIsFullyFormed()(*(void *)(v0 + 16));
}

BOOL partial apply for closure #1 in FMPFSKScene.patternIsFullyPeripheral()()
{
  return closure #1 in FMPFSKScene.patternIsFullyPeripheral()(*(void *)(v0 + 16));
}

BOOL partial apply for closure #1 in FMPFSKScene.fragmentsStoppedOrbiting()()
{
  return closure #1 in FMPFSKScene.fragmentsStoppedOrbiting()(*(void *)(v0 + 16));
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL partial apply for closure #1 in FMPFSKScene.fragmentsStartedOrbiting()()
{
  return closure #1 in FMPFSKScene.fragmentsStartedOrbiting()(*(void *)(v0 + 16));
}

ValueMetadata *type metadata accessor for InfoTip()
{
  return &type metadata for InfoTip;
}

unint64_t protocol witness for Tip.id.getter in conformance InfoTip()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Tip.title.getter in conformance InfoTip()
{
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for TVRUITipManager();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t protocol witness for Tip.message.getter in conformance InfoTip()
{
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for TVRUITipManager();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t protocol witness for Tip.image.getter in conformance InfoTip()
{
  return MEMORY[0x270F05B60]();
}

void protocol witness for Identifiable.id.getter in conformance InfoTip(void *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x80000002273FCEC0;
}

unint64_t lazy protocol witness table accessor for type InfoTip and conformance InfoTip()
{
  unint64_t result = lazy protocol witness table cache variable for type InfoTip and conformance InfoTip;
  if (!lazy protocol witness table cache variable for type InfoTip and conformance InfoTip)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InfoTip and conformance InfoTip);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InfoTip and conformance InfoTip;
  if (!lazy protocol witness table cache variable for type InfoTip and conformance InfoTip)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InfoTip and conformance InfoTip);
  }
  return result;
}

uint64_t specialized InfoTip.options.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v38 = v0;
  uint64_t v39 = v1;
  MEMORY[0x270FA5388]();
  uint64_t v36 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>.0);
  uint64_t v37 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v31 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Tips.MaxDisplayCount();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  int64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>.0);
  uint64_t v34 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388]();
  int64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Tips.UsesConstellation();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>.0);
  uint64_t v33 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x22A676F00](0);
  uint64_t v17 = MEMORY[0x263F1C010];
  MEMORY[0x22A676E90](v13, v10, MEMORY[0x263F1C010]);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  Tips.MaxDisplayCount.init(_:)();
  uint64_t v18 = MEMORY[0x263F1C008];
  MEMORY[0x22A676E90](v7, v4, MEMORY[0x263F1C008]);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v40 = v10;
  uint64_t v41 = v17;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v20 = v31;
  MEMORY[0x22A676EC0](v16, v14, OpaqueTypeConformance2);
  uint64_t v40 = v14;
  uint64_t v41 = OpaqueTypeConformance2;
  uint64_t v21 = swift_getOpaqueTypeConformance2();
  uint64_t v40 = v4;
  uint64_t v41 = v18;
  uint64_t v22 = swift_getOpaqueTypeConformance2();
  double v23 = v36;
  uint64_t v24 = v20;
  uint64_t v25 = v35;
  uint64_t v26 = v32;
  static Tips.OptionsBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  uint64_t v40 = v25;
  uint64_t v41 = v26;
  uint64_t v42 = v21;
  uint64_t v43 = v22;
  swift_getOpaqueTypeConformance2();
  uint64_t v27 = v38;
  uint64_t v28 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v23, v27);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v24, v25);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v26);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v14);
  return v28;
}

void FMPFSKPatternNode.applyConformationFactor(_:sprung:)(char a1, double a2)
{
  double v4 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 184);
  double v5 = (a2 - v4) / (1.0 - v4);
  if (v5 < 0.0) {
    double v6 = 0.0;
  }
  else {
    double v6 = v5;
  }
  uint64_t v7 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor;
  *(double *)uint64_t v7 = a2;
  *(unsigned char *)(v7 + 8) = 0;
  uint64_t v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  uint64_t v9 = *v8;
  if (!((unint64_t)*v8 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v10) {
      goto LABEL_6;
    }
LABEL_35:
    swift_bridgeObjectRelease_n();
    FMPFSKPatternNode.stageConformationVsScalingVsBearingVsCentering()();
    return;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10) {
    goto LABEL_35;
  }
LABEL_6:
  if (v10 >= 1)
  {
    uint64_t v11 = 0;
    double v12 = fmin(a2 / v4, 1.0);
    int64x2_t v41 = vdupq_n_s64(0x4341C37937E08000uLL);
    do
    {
      if ((v9 & 0xC000000000000001) != 0) {
        uint64_t v13 = (char *)MEMORY[0x22A677580](v11, v9);
      }
      else {
        uint64_t v13 = (char *)*(id *)(v9 + 8 * v11 + 32);
      }
      uint64_t v14 = v13;
      uint64_t v15 = (double *)&v13[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
      *uint64_t v15 = v12;
      *((unsigned char *)v15 + 8) = 0;
      FMPFSKPatternFragmentNode.applyConformationFactor(_:)(v12);
      uint64_t v16 = (double *)&v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_scalingFactor];
      double *v16 = v6;
      *((unsigned char *)v16 + 8) = 0;
      FMPFSKPatternFragmentNode.applyScalingFactor(_:)(v6);
      uint64_t v17 = *(void *)&v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactorSpring];
      if (!v17
        || (uint64_t v18 = (double *)&v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style],
            (v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 168] & 1) != 0)
        || ((_BYTE)v18[19] & 1) != 0
        || ((_BYTE)v18[23] & 1) != 0)
      {
        id v19 = &v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor];
        *(void *)id v19 = 0x3FF0000000000000;
        v19[8] = 0;
      }
      else
      {
        double v20 = v18[20];
        if (v20 <= a2)
        {
          double v24 = (v18[22] - a2) / (v18[22] - v20);
          double v25 = 1.0 - v24;
          if (v24 >= 1.0) {
            double v25 = 0.0;
          }
          if (v24 < 0.0) {
            double v23 = 1.0;
          }
          else {
            double v23 = v25;
          }
        }
        else
        {
          double v21 = (a2 - v18[18]) / (v20 - v18[18]);
          double v22 = 1.0 - v21;
          if (v21 < 0.0) {
            double v22 = 1.0;
          }
          if (v21 >= 1.0) {
            double v23 = 0.0;
          }
          else {
            double v23 = v22;
          }
        }
        uint64_t v26 = (double *)&v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactor];
        *uint64_t v26 = v23;
        *((unsigned char *)v26 + 8) = 0;
        if ((a1 & 1) != 0
          && (uint64_t v27 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
              swift_beginAccess(),
              double v28 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40),
              *(double *)(v27 + 280) + v28 != 1.79769313e308))
        {
          uint64_t v39 = v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
          *(double *)uint64_t v39 = v23;
          *(unsigned char *)(v39 + 8) = 0;
          double v40 = v23 - v28;
          *(double *)(v27 + 280) = v40;
          *(double *)(v27 + 240) = v40;
          *(void *)(v27 + 248) = 0;
        }
        else
        {
          uint64_t v29 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
          uint64_t v30 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
          uint64_t v31 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
          swift_beginAccess();
          *(double *)uint64_t v31 = v23;
          *(void *)(v31 + 8) = 0;
          *(void *)(v31 + 16) = v29;
          *(_OWORD *)(v31 + 24) = xmmword_2273F4ED0;
          *(_OWORD *)(v31 + 40) = xmmword_2273F4EE0;
          *(void *)(v31 + 56) = v29;
          *(void *)(v31 + 64) = 0;
          *(void *)(v31 + 72) = 0;
          *(int64x2_t *)(v31 + 80) = v41;
          *(_OWORD *)(v31 + 96) = 0u;
          *(_OWORD *)(v31 + 112) = 0u;
          *(void *)(v31 + 128) = v30;
          *(_OWORD *)(v31 + 136) = xmmword_2273F4ED0;
          *(_OWORD *)(v31 + 152) = xmmword_2273F4EE0;
          *(void *)(v31 + 168) = v30;
          *(void *)(v31 + 176) = 0;
          *(void *)(v31 + 184) = 0;
          *(_OWORD *)(v31 + 208) = 0u;
          *(_OWORD *)(v31 + 224) = 0u;
          *(int64x2_t *)(v31 + 192) = v41;
          *(double *)(v31 + 240) = v23;
          *(_OWORD *)(v31 + 248) = xmmword_2273F4ED0;
          *(void *)(v31 + 264) = 0x4063BD3CC9BE45DELL;
          *(void *)(v31 + 272) = 0x403921FB54442D18;
          *(double *)(v31 + 280) = v23;
          *(void *)(v31 + 288) = 0;
          *(void *)(v31 + 296) = 0;
          *(int64x2_t *)(v31 + 304) = v41;
          *(_OWORD *)(v31 + 320) = 0u;
          *(_OWORD *)(v31 + 336) = 0u;
          uint64_t v32 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
          *(void *)(v31 + 352) = v32;
          uint64_t v33 = *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
          *(void *)(v31 + 360) = v33;
          double v34 = 6.28318531
              / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
              * (6.28318531
               / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
          double v35 = sqrt(v34);
          double v36 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v35 + v35);
          uint64_t v37 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
          *(void *)uint64_t v37 = 0;
          *(void *)(v37 + 8) = 0;
          *(void *)(v37 + 16) = 0x3FF0000000000000;
          *(double *)(v37 + 24) = v34;
          *(double *)(v37 + 32) = v36;
          *(void *)(v37 + 40) = 0;
          *(int64x2_t *)(v37 + 64) = v41;
          *(_OWORD *)(v37 + 80) = 0u;
          *(_OWORD *)(v37 + 96) = 0u;
          *(void *)(v37 + 48) = v32;
          *(void *)(v37 + 56) = v33;
          *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = v23;
          *(void *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
          *(unsigned char *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
          uint64_t v38 = (double *)&v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor];
          double *v38 = v23;
          *((unsigned char *)v38 + 8) = 0;
        }
      }

      ++v11;
    }
    while (v10 != v11);
    goto LABEL_35;
  }
  __break(1u);
}

Swift::Void __swiftcall FMPFSKPatternNode.stageConformationVsScalingVsBearingVsCentering()()
{
  uint64_t v2 = v0;
  unint64_t v3 = v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor;
  double v4 = 0.0;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor + 8)) {
    double v5 = 0.0;
  }
  else {
    double v5 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor);
  }
  BOOL v6 = v5 > 0.0;
  *(void *)&double v7 = v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor;
  uint64_t v8 = &OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor + 8)) {
    goto LABEL_21;
  }
  double v9 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 184);
  if (**(double **)&v7 - v9 >= 0.0) {
    double v4 = **(double **)&v7 - v9;
  }
  if (*(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 200) <= v4
                                                                                      / (1.0 - **(double **)&v7 - v9)
    || (*(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8) & 1) != 0
    || *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor) >= 0.0)
  {
    BOOL v6 = 1;
  }
  uint64_t v10 = (unint64_t *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  unint64_t v11 = *v10;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v12)
    {
LABEL_13:
      if (v12 < 1) {
        goto LABEL_85;
      }
      for (uint64_t i = 0; i != v12; ++i)
      {
        if ((v11 & 0xC000000000000001) != 0) {
          uint64_t v14 = (unsigned char *)MEMORY[0x22A677580](i, v11);
        }
        else {
          uint64_t v14 = *(id *)(v11 + 8 * i + 32);
        }
        v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceScatterOffset] = v5 <= 0.0;
      }
    }
  }
  swift_bridgeObjectRelease_n();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyCenterFactor) = v6;
  uint64_t v8 = &OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes;
LABEL_21:
  *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyBearing) = 1;
  if (*(unsigned char *)(*(void *)&v7 + 8)) {
    goto LABEL_25;
  }
  double v15 = **(double **)&v7;
  if (**(double **)&v7 <= 0.0)
  {
    uint64_t v19 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
    if (!MEMORY[0x22A6786A0](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate, v15)) {
      goto LABEL_53;
    }
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v20 + 40))(ObjectType, v20);
    goto LABEL_30;
  }
  if (*(unsigned char *)(v3 + 8))
  {
LABEL_25:
    if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8) & 1) == 0
      && *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor) >= 1.0)
    {
LABEL_26:
      uint64_t v16 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
      if (!MEMORY[0x22A6786A0](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate)) {
        goto LABEL_53;
      }
      uint64_t v17 = *(void *)(v16 + 8);
      uint64_t v18 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v17 + 56))(v18, v17);
LABEL_30:
      swift_unknownObjectRelease();
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (v15 < 1.0
    || *(double *)v3 > 0.0
    || (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8) & 1) == 0
    && *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor) >= 1.0)
  {
    double v22 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor);
    int v23 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8);
    if (v23 == 1 || v22 < 1.0)
    {
      if (*(unsigned char *)(v3 + 8)) {
        goto LABEL_52;
      }
    }
    else if ((*(unsigned char *)(v3 + 8) & 1) != 0 || v15 < 1.0 || *(double *)v3 > 0.0)
    {
      goto LABEL_26;
    }
    BOOL v25 = v15 < 1.0;
    if (*(double *)v3 > 0.0) {
      BOOL v25 = 1;
    }
    if ((v23 | v25) != 1 && v22 >= 1.0)
    {
      uint64_t v47 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
      if (!MEMORY[0x22A6786A0](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate)) {
        goto LABEL_83;
      }
      uint64_t v48 = *(void *)(v47 + 8);
      uint64_t v49 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v48 + 64))(v49, v48);
      goto LABEL_82;
    }
LABEL_52:
    *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_needsRecomputeVisibleFragments) = 0;
    goto LABEL_53;
  }
  uint64_t v44 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
  if (MEMORY[0x22A6786A0](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate))
  {
    uint64_t v45 = *(void *)(v44 + 8);
    uint64_t v46 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v45 + 48))(v46, v45);
LABEL_82:
    swift_unknownObjectRelease();
  }
LABEL_83:
  *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_needsRecomputeVisibleFragments) = 1;
LABEL_53:
  double v27 = 0.0;
  if ((*(unsigned char *)(*(void *)&v7 + 8) & 1) == 0)
  {
    double v28 = (double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor);
    if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8) & 1) == 0
      && *v28 >= 0.0)
    {
      BOOL v29 = v5 <= 0.0
         || *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_derivativeCenterFactor) == -1;
      double v27 = **(double **)&v7 * *v28;
      if (v29) {
        double v27 = 0.0;
      }
    }
  }
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode), sel_setAlpha_, 1.0 - v27);
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_needsRecomputeVisibleFragments) == 1)
  {
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode), sel_position);
    *(double *)&uint64_t v31 = COERCE_DOUBLE(FMPFSKPatternNode.visibleTrackOffsets(center:)(-v30));
    if ((v33 & 1) == 0)
    {
      double v1 = *(double *)&v31;
      double v7 = v32;
      double v34 = (unint64_t *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
      swift_beginAccess();
      unint64_t v11 = *v34;
      if (v11 >> 62) {
        goto LABEL_86;
      }
      uint64_t v35 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      for (; v35; uint64_t v35 = _CocoaArrayWrapper.endIndex.getter())
      {
        unint64_t v3 = v11 & 0xC000000000000001;
        double v36 = v1 + 1.0;
        double v37 = v7 + -1.0;
        uint64_t v38 = 4;
        uint64_t v39 = 0;
        if ((v11 & 0xC000000000000001) != 0)
        {
LABEL_67:
          double v40 = COERCE_DOUBLE(MEMORY[0x22A677580](v39, v11));
          goto LABEL_69;
        }
        while (1)
        {
          *(void *)&double v40 = *(id *)(v11 + 8 * v38);
LABEL_69:
          double v1 = v40;
          BOOL v41 = __OFADD__(v39, 1);
          *(void *)&double v7 = v39 + 1;
          if (v41) {
            break;
          }
          if ((*(unsigned char *)(*(void *)&v40
                         + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition
                         + 16) & 1) == 0)
          {
            double v42 = *(double *)(*(void *)&v40
                            + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition
                            + 8);
            BOOL v43 = v37 > v42 || v42 > v36;
            objc_msgSend(*(id *)&v40, sel_setHidden_, v43);
          }

          if (*(void *)&v7 == v35) {
            goto LABEL_87;
          }
          uint64_t v39 = ++v38 - 4;
          if (v3) {
            goto LABEL_67;
          }
        }
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        swift_bridgeObjectRetain_n();
      }
LABEL_87:
      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v50 = (unint64_t *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  unint64_t v51 = *v50;
  if (*v50 >> 62) {
    goto LABEL_102;
  }
  uint64_t v52 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v52)
  {
LABEL_103:
    uint64_t v8 = 0;
    unint64_t v3 = 0;
LABEL_104:
    swift_bridgeObjectRelease_n();
    double v7 = *(double *)&OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_allFragmentsAreOrbiting;
    unint64_t v55 = *v50;
    if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_allFragmentsAreOrbiting) & 1) == 0)
    {
      if (v55 >> 62) {
        goto LABEL_111;
      }
      if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) == v3) {
        goto LABEL_107;
      }
LABEL_112:
      if (*(unsigned char *)(v2 + *(void *)&v7) != 1) {
        goto LABEL_121;
      }
      unint64_t v55 = *v50;
    }
    if (v55 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t *)v65 == v8) {
        goto LABEL_116;
      }
    }
    else if (*(uint64_t **)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) == v8)
    {
LABEL_116:
      *(unsigned char *)(v2 + *(void *)&v7) = 0;
      uint64_t v61 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
      if (MEMORY[0x22A6786A0](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate))
      {
        uint64_t v62 = *(void *)(v61 + 8);
        uint64_t v63 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v62 + 16))(v63, v62);
        swift_unknownObjectRelease();
      }
      if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track + 8) & 1) == 0)
      {
        uint64_t v64 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackSpring);
        FLSpring.resetImmediately(toValue:)(*(Swift::Double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track));
        *(unsigned char *)(v64 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      }
      return;
    }
LABEL_121:
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackDidChange) == 1
      && (*(unsigned char *)(v2 + *(void *)&v7) & 1) == 0
      && (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track + 8) & 1) == 0)
    {
      uint64_t v66 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track);
      *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackDidChange) = 0;
      uint64_t v67 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackSpring)
          + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(void *)uint64_t v67 = v66;
      *(unsigned char *)(v67 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
    }
    return;
  }
LABEL_90:
  if (v52 >= 1)
  {
    double v7 = 0.0;
    uint64_t v8 = 0;
    unint64_t v3 = 0;
    while (1)
    {
      if ((v51 & 0xC000000000000001) != 0) {
        uint64_t v53 = (char *)MEMORY[0x22A677580](*(void *)&v7, v51);
      }
      else {
        uint64_t v53 = (char *)*(id *)(v51 + 8 * *(void *)&v7 + 32);
      }
      uint64_t v54 = *(void *)&v53[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction];

      if (v54)
      {
        BOOL v41 = __OFADD__(v3++, 1);
        if (v41)
        {
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          swift_bridgeObjectRetain_n();
          uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
          if (!v52) {
            goto LABEL_103;
          }
          goto LABEL_90;
        }
      }
      else
      {
        BOOL v41 = __OFADD__(v8, 1);
        uint64_t v8 = (uint64_t *)((char *)v8 + 1);
        if (v41) {
          goto LABEL_101;
        }
      }
      if (v52 == ++*(void *)&v7) {
        goto LABEL_104;
      }
    }
  }
  __break(1u);
LABEL_111:
  swift_bridgeObjectRetain();
  uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v60 != v3) {
    goto LABEL_112;
  }
LABEL_107:
  *(unsigned char *)(v2 + *(void *)&v7) = 1;
  uint64_t v56 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
  if (MEMORY[0x22A6786A0](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate))
  {
    uint64_t v57 = *(void *)(v56 + 8);
    uint64_t v58 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v57);
    swift_unknownObjectRelease();
  }
  uint64_t v59 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackSpring);
  FLSpring.resetImmediately(toValue:)(0.5);
  *(unsigned char *)(v59 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
  FMPFSKPatternNode.applyTrack(_:)(0.5);
}

void FMPFSKPatternNode.apply(presentedEnergeticAngle:presentedLethargicAngle:presentedCenterFactor:presentedLookout:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  uint64_t v9 = v8;
  uint64_t v10 = *(void **)(v8 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode);
  if (!v10) {
    return;
  }
  unint64_t v11 = *(void **)(v8 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode);
  if (!v11
    || (*(unsigned char *)(v8 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor + 8) & 1) != 0)
  {
    return;
  }
  double v17 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor);
  uint64_t v18 = v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor;
  *(double *)uint64_t v18 = *(double *)&a5;
  *(unsigned char *)(v18 + 8) = a6 & 1;
  if (a6) {
    double v19 = 0.0;
  }
  else {
    double v19 = *(double *)&a5;
  }
  uint64_t v20 = self;
  v177 = v10;
  double v21 = v11;
  id v22 = objc_msgSend(v20, sel_standardUserDefaults);
  unsigned int v23 = objc_msgSend(v22, sel_fmpfDebugMode);

  double v24 = 1.0;
  if (!v23) {
    double v24 = 0.0;
  }
  objc_msgSend(*(id *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasPatternSpinesNode), sel_setAlpha_, v24);
  BOOL v25 = *(void **)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode);
  if (a4) {
    objc_msgSend(*(id *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode), sel_zRotation);
  }
  else {
    double v26 = *(double *)&a3;
  }
  objc_msgSend(v25, sel_setZRotation_, v26);
  double v27 = *(double *)&a1;
  if ((a2 & 1) == 0) {
    double v27 = *(double *)&a1 / 3.14159265 * 180.0;
  }
  uint64_t v28 = v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedEnergeticBearing;
  *(double *)uint64_t v28 = v27;
  *(unsigned char *)(v28 + 8) = a2 & 1;
  BOOL v166 = (a2 & 1) == 0;
  if ((a4 & 1) == 0) {
    *(double *)&a3 = *(double *)&a3 / 3.14159265 * 180.0;
  }
  uint64_t v29 = v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLethargicBearing;
  *(double *)uint64_t v29 = *(double *)&a3;
  *(unsigned char *)(v29 + 8) = a4 & 1;
  objc_msgSend(*(id *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode], sel_zRotation);
  double v31 = fmod(v30, 6.28318531);
  if (v31 <= 3.14159265)
  {
    if (v31 < -3.14159265) {
      double v31 = v31 + 6.28318531;
    }
  }
  else
  {
    double v31 = v31 + -6.28318531;
  }
  double v32 = fmod(v31, 6.28318531);
  if (v32 <= 3.14159265)
  {
    char v33 = a8;
    if (v32 < -3.14159265) {
      double v32 = v32 + 6.28318531;
    }
  }
  else
  {
    double v32 = v32 + -6.28318531;
    char v33 = a8;
  }
  if ((a2 & 1) == 0) {
    double v32 = *(double *)&a1;
  }
  double v34 = (double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style);
  double v35 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 112);
  double v36 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 120);
  double v37 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 96);
  double v38 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 104);
  double v160 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 144);
  double v39 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 128);
  double v159 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 136);
  uint64_t v40 = v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout;
  *(double *)uint64_t v40 = *(double *)&a7;
  *(unsigned char *)(v40 + 8) = v33 & 1;
  long double v41 = remainder(v32, 6.28318531);
  double v42 = fmod(v41, 6.28318531);
  if (v42 <= 3.14159265)
  {
    if (v42 < -3.14159265) {
      double v42 = v42 + 6.28318531;
    }
  }
  else
  {
    double v42 = v42 + -6.28318531;
  }
  double v176 = v42;
  double v43 = (v17 - v34[20]) / (1.0 - v34[20]);
  if (v43 < 0.0) {
    double v43 = 0.0;
  }
  double v165 = *(double *)&a7;
  if (a8) {
    double v44 = 0.0;
  }
  else {
    double v44 = *(double *)&a7;
  }
  double v46 = (1.0 - v19) * v43;
  double v47 = (1.0 - v44) * v46;
  double v48 = v17;
  if (*(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_forceHideNoonNode)) {
    double v49 = 0.0;
  }
  else {
    double v49 = v43;
  }
  uint64_t v50 = (double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor);
  double v173 = v48;
  if (*(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor + 8))
  {
    double v169 = (1.0 - v44) * v46;
    double v51 = 1.0;
  }
  else
  {
    double v51 = 1.0 - *v50;
    double v52 = v48 * *v50;
    double v43 = v52 + v43 * v51;
    double v44 = v52 + v44 * v51;
    double v169 = v47 * v51;
  }
  double v45 = 1.0 - v19;
  double v167 = v51
       * -(*(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_sceneSize + 8)
         * (v19 * (v19 * v19) + v19 * v19 * (v45 * 0.0) + v45 * (v45 * v45) * 0.0 + v19 * (v45 * v45 * 0.0)));
  double v53 = v38 * v43 + v37 * (1.0 - v43);
  double v174 = v44;
  double v170 = v36 * v43 + v35 * (1.0 - v43);
  double v172 = v39 * v44;
  double v54 = v34[21];
  double v158 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pixelsPerInch);
  id v55 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v55, sel_scale);
  double v57 = v56;

  double v58 = v34[2];
  uint64_t v59 = &v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacity];
  *(void *)uint64_t v59 = 0x3FF0000000000000;
  v59[8] = 0;
  uint64_t v60 = *(void *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacitySpring];
  FLSpring.resetImmediately(toValue:)(1.0);
  *(unsigned char *)(v60 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
  uint64_t v61 = &v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOpacity];
  *(void *)uint64_t v61 = 0x3FF0000000000000;
  v61[8] = 0;
  uint64_t v163 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode;
  objc_msgSend(*(id *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode], sel_setAlpha_, 1.0);
  objc_msgSend(*(id *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode], sel_setAlpha_, 1.0);
  uint64_t v62 = (double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacity];
  *uint64_t v62 = v49;
  *((unsigned char *)v62 + 8) = 0;
  uint64_t v63 = *(void *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacitySpring];
  FLSpring.resetImmediately(toValue:)(v49);
  *(unsigned char *)(v63 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
  uint64_t v64 = (double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOpacity];
  *uint64_t v64 = v49;
  *((unsigned char *)v64 + 8) = 0;
  uint64_t v65 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode;
  objc_msgSend(*(id *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode], sel_setAlpha_, v49);
  objc_msgSend(*(id *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode], sel_setAlpha_, v49);
  uint64_t v66 = &qword_2273F4000;
  double v67 = v176;
  double v68 = fabs(v176);
  if ((*(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactor + 8) & 1) == 0)
  {
    int v69 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_inFOV);
    if (v69 != 2)
    {
      double v70 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactor);
      if ((v69 & 1) != 0 || v19 >= 2.22044605e-16)
      {
        uint64_t v106 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode;
        double v156 = v54;
        if (*(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode))
        {
          *(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode) = 1;
          BOOL v107 = v70 >= 0.5;
          if (v69)
          {
            double v108 = v174;
            if (v70 >= 0.5)
            {
              BOOL v107 = 1;
              double v109 = v176;
              goto LABEL_98;
            }
            goto LABEL_93;
          }
          double v108 = v174;
        }
        else
        {
          FMPFSKPatternNode.setLookout(_:sprung:)(1, 1.0);
          if (v69)
          {
            uint64_t v110 = v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
            if (MEMORY[0x22A6786A0]())
            {
              uint64_t v111 = *(void *)(v110 + 8);
              uint64_t ObjectType = swift_getObjectType();
              (*(void (**)(uint64_t, uint64_t))(v111 + 72))(ObjectType, v111);
              swift_unknownObjectRelease();
            }
            BOOL v107 = 1;
            *(unsigned char *)(v9 + v106) = 1;
            double v67 = v176;
            double v109 = v176;
            double v108 = v174;
            uint64_t v66 = &qword_2273F4000;
            if (v70 < 0.5)
            {
LABEL_93:
              double v109 = v67 * v108;
              BOOL v107 = 1;
            }
LABEL_98:
            Swift::Double v157 = v109;
            int v113 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType);
            double v114 = 0.0;
            double v115 = 1.0;
            double v116 = 0.0;
            if (v113 != 2)
            {
              double v117 = 1.0;
              double v118 = 0.0;
              if (v107)
              {
                double v118 = v108;
                double v117 = 1.0 - v108;
              }
              double v116 = 1.0 - v108 + v159 * v118;
              double v115 = v19 * (v156 * v158 / v57 / v58 / v53 - v160) + v117 + v160 * v118;
            }
            double v161 = v53;
            uint64_t v119 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius;
            double v120 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius);
            if (v69) {
              double v114 = v108;
            }
            double v121 = v114 * (v39 * v120);
            *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_extraDiskRadiusWhenSnapping) = v121;
            double v122 = -((v120 + v121) * v19);
            double v123 = *((double *)v66 + 95);
            double v124 = -(v122 * cos(v123 - v67));
            double v125 = sin(v123 - v68) * v122;
            if (v113 != 1) {
              objc_msgSend(*(id *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode), sel_setPosition_, 0.0, v167);
            }
            FMPFSKPeripheralDotNode.setOffset(_:sprung:)((CGPoint)__PAIR128__(*(unint64_t *)&v125, *(unint64_t *)&v124), 0);
            FMPFSKPeripheralDotNode.setOffset(_:sprung:)((CGPoint)__PAIR128__(*(unint64_t *)&v125, *(unint64_t *)&v124), 0);
            double v126 = (double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale];
            *double v126 = v170 * v116;
            *((unsigned char *)v126 + 8) = 0;
            uint64_t v127 = *(void *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring];
            FLSpring.resetImmediately(toValue:)(v170 * v116);
            *(unsigned char *)(v127 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
            uint64_t v128 = (double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale];
            *uint64_t v128 = v170 * v116;
            *((unsigned char *)v128 + 8) = 0;
            objc_msgSend(*(id *)&v177[v65], sel_setScale_, v170 * v116 * *(double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_subScale]);
            FMPFSKPeripheralDotNode.setAngle(_:sprung:)(0, v157);
            Swift::Double v129 = v121 + *(double *)(v9 + v119);
            double v130 = (Swift::Double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
            *double v130 = v129;
            *((unsigned char *)v130 + 8) = 0;
            uint64_t v131 = *(void *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring];
            FLSpring.resetImmediately(toValue:)(v129);
            *(unsigned char *)(v131 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
            double v132 = (Swift::Double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
            *double v132 = v129;
            *((unsigned char *)v132 + 8) = 0;
            objc_msgSend(*(id *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode], sel_setPosition_, 0.0, v129);
            Swift::Double v133 = v161 * v115;
            double v134 = (Swift::Double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale];
            *double v134 = v133;
            *((unsigned char *)v134 + 8) = 0;
            uint64_t v135 = *(void *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring];
            FLSpring.resetImmediately(toValue:)(v133);
            *(unsigned char *)(v135 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
            v136 = (Swift::Double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale];
            Swift::Double *v136 = v133;
            *((unsigned char *)v136 + 8) = 0;
            objc_msgSend(*(id *)&v21[v163], sel_setScale_, v133 * *(double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_subScale]);
            Swift::Double v137 = v121 + *(double *)(v9 + v119);
            v138 = (Swift::Double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
            Swift::Double *v138 = v137;
            *((unsigned char *)v138 + 8) = 0;
            uint64_t v139 = *(void *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring];
            FLSpring.resetImmediately(toValue:)(v137);
            *(unsigned char *)(v139 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
            v140 = (Swift::Double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
            Swift::Double *v140 = v137;
            *((unsigned char *)v140 + 8) = 0;
            objc_msgSend(*(id *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode], sel_setPosition_, 0.0, v137);
            uint64_t v141 = v177;
            BOOL v142 = 0;
            BOOL v143 = v19 < 1.0;
            double v96 = v173;
            double v95 = v172;
            if (!v143)
            {
              uint64_t v164 = v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse];
              id v144 = objc_msgSend(*(id *)&v177[v65], sel_children);
              type metadata accessor for SKNode();
              unint64_t v145 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (v145 >> 62) {
                goto LABEL_123;
              }
              uint64_t v146 = *(void *)((v145 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v146)
              {
                while (1)
                {
                  if (v146 < 1)
                  {
                    __break(1u);
                    return;
                  }
                  uint64_t v147 = 0;
                  uint64_t v168 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interativeRadiusBeaconNode;
                  uint64_t v162 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
                  unint64_t v148 = v145 & 0xC000000000000001;
                  unint64_t v171 = v145;
                  while (1)
                  {
                    id v149 = v148 ? (id)MEMORY[0x22A677580](v147, v145) : *(id *)(v145 + 8 * v147 + 32);
                    uint64_t v150 = v149;
                    self;
                    if (swift_dynamicCastObjCClass())
                    {
                      uint64_t v151 = *(void **)&v177[v168];
                      if (!v151) {
                        break;
                      }
                      id v152 = v151;
                      char v153 = static NSObject.== infix(_:_:)();

                      unint64_t v145 = v171;
                      if ((v153 & 1) == 0) {
                        break;
                      }
                    }

LABEL_112:
                    if (v146 == ++v147) {
                      goto LABEL_124;
                    }
                  }
                  id v154 = *(id *)&v177[v162];
                  unint64_t v145 = static NSObject.== infix(_:_:)();

                  if (v145) {
                    break;
                  }
                  if (!__OFADD__(v164++, 1)) {
                    break;
                  }
                  __break(1u);
LABEL_123:
                  swift_bridgeObjectRetain();
                  uint64_t v146 = _CocoaArrayWrapper.endIndex.getter();
                  if (!v146) {
                    goto LABEL_124;
                  }
                }
                unint64_t v145 = v171;
                goto LABEL_112;
              }
LABEL_124:
              swift_bridgeObjectRelease_n();
              BOOL v142 = v164 == 0;
              uint64_t v141 = v177;
            }
            v141[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyRadiusFactor] = v142;
            goto LABEL_59;
          }
          *(unsigned char *)(v9 + v106) = 1;
          BOOL v107 = v70 >= 0.5;
          double v67 = v176;
          double v108 = v174;
          uint64_t v66 = &qword_2273F4000;
        }
        double v109 = 0.0;
        if (v107) {
          double v109 = v67;
        }
        goto LABEL_98;
      }
    }
  }
  Swift::Double v71 = v53;
  uint64_t v72 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_extraDiskRadiusWhenSnapping;
  double v73 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_extraDiskRadiusWhenSnapping);
  uint64_t v74 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode;
  if (*(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode) == 1)
  {
    double v75 = 0.0;
    FMPFSKPatternNode.setLookout(_:sprung:)(1, 0.0);
    if (v73 <= 0.0)
    {
      double v79 = v68;
      *(unsigned char *)(v9 + v74) = 0;
      double v67 = v176;
      double v80 = v174;
      uint64_t v66 = &qword_2273F4000;
    }
    else
    {
      uint64_t v76 = v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
      if (MEMORY[0x22A6786A0](v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate))
      {
        uint64_t v77 = *(void *)(v76 + 8);
        uint64_t v78 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v77 + 80))(v78, v77);
        swift_unknownObjectRelease();
      }
      double v79 = v68;
      *(unsigned char *)(v9 + v74) = 0;
      double v67 = v176;
      double v80 = v174;
      uint64_t v66 = &qword_2273F4000;
      double v75 = v176 * v174;
    }
  }
  else
  {
    double v79 = v68;
    *(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode) = 0;
    double v75 = 0.0;
    double v80 = v174;
    if (v73 > 0.0) {
      double v75 = v176 * v174;
    }
  }
  double v81 = v80 * *(double *)(v9 + v72);
  uint64_t v82 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius;
  double v83 = -((v81 + *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius)) * v19);
  double v84 = *((double *)v66 + 95);
  double v85 = -(v83 * cos(v84 - v67));
  double v86 = sin(v84 - v79) * v83;
  if (*(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType) != 1) {
    objc_msgSend(*(id *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode), sel_setPosition_, 0.0, v167);
  }
  FMPFSKPeripheralDotNode.setOffset(_:sprung:)((CGPoint)__PAIR128__(*(unint64_t *)&v86, *(unint64_t *)&v85), 0);
  FMPFSKPeripheralDotNode.setOffset(_:sprung:)((CGPoint)__PAIR128__(*(unint64_t *)&v86, *(unint64_t *)&v85), 0);
  FMPFSKPeripheralDotNode.setDotScale(_:sprung:)(1, v170);
  FMPFSKPeripheralDotNode.setAngle(_:sprung:)(0, v75);
  Swift::Double v87 = v81 + *(double *)(v9 + v82);
  uint64_t v88 = (Swift::Double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
  *uint64_t v88 = v87;
  *((unsigned char *)v88 + 8) = 0;
  uint64_t v89 = *(void *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring];
  FLSpring.resetImmediately(toValue:)(v87);
  *(unsigned char *)(v89 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
  id v90 = (Swift::Double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
  Swift::Double *v90 = v87;
  *((unsigned char *)v90 + 8) = 0;
  objc_msgSend(*(id *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode], sel_setPosition_, 0.0, v87);
  FMPFSKPeripheralDotNode.setDotScale(_:sprung:)(1, v71);
  Swift::Double v91 = v81 + *(double *)(v9 + v82);
  long long v92 = (Swift::Double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
  Swift::Double *v92 = v91;
  *((unsigned char *)v92 + 8) = 0;
  uint64_t v93 = *(void *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring];
  FLSpring.resetImmediately(toValue:)(v91);
  *(unsigned char *)(v93 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
  long long v94 = (Swift::Double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
  Swift::Double *v94 = v91;
  *((unsigned char *)v94 + 8) = 0;
  objc_msgSend(*(id *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode], sel_setPosition_, 0.0, v91);
  v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyRadiusFactor] = 0;
  FMPFSKPeripheralDotNode.pulse(_:animated:)(0, 0);
  double v95 = v172;
  if (v73 <= 0.0) {
    double v95 = 0.0;
  }
  double v96 = v173;
LABEL_59:
  uint64_t v97 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_ringView;
  long long v98 = *(void **)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_ringView);
  if (v98)
  {
    id v99 = v98;
    FMPFRingView.setOpacity(_:sprung:)(*(uint64_t *)&v169, 0, 1);
  }
  if ((v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle + 8] & 1) == 0)
  {
    double v100 = fmod(*(long double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle], 6.28318531);
    if (v100 <= 3.14159265)
    {
      if (v100 < -3.14159265) {
        double v100 = v100 + 6.28318531;
      }
    }
    else
    {
      double v100 = v100 + -6.28318531;
    }
    long long v101 = *(void **)(v9 + v97);
    if (v101)
    {
      id v102 = v101;
      FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:)(*(uint64_t *)&v95, 0, 0, v100, v176);
    }
  }
  if (v174 > 0.0)
  {
    char v103 = 0;
    Swift::Double v104 = v176;
    goto LABEL_70;
  }
  Swift::Double v104 = v176;
  if (a8)
  {
    char v103 = v166;
    goto LABEL_70;
  }
  char v103 = v166;
  if (v165 <= 0.0) {
LABEL_70:
  }
    FMPFSKPeripheralDotNode.setAngle(_:sprung:)(v103, v104);
  if (*(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType) == 1)
  {
    if (v96 > 0.0) {
      goto LABEL_80;
    }
  }
  else if (v96 > 0.75)
  {
LABEL_80:
    FMPFSKPeripheralDotNode.setBoundToBearing()();
    FMPFSKPeripheralDotNode.setUnsprungInteractiveAngleFactor(_:)(COERCE_ID(v96 * (v96 * v96)+ v96 * v96 * ((1.0 - v96) * 3.0)+ (1.0 - v96) * ((1.0 - v96) * (1.0 - v96)) * 0.0+ v96 * ((1.0 - v96) * (1.0 - v96) * 3.0)), 0);
    goto LABEL_81;
  }
  if ((*(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor + 8) & 1) != 0
    || *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor) != 0.0)
  {
    goto LABEL_80;
  }
  double v105 = &v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interactiveAngleFactor];
  *(void *)double v105 = 0;
  v105[8] = 1;
  FMPFSKPeripheralDotNode.setFreeFromBearing()();
LABEL_81:
}

uint64_t FMPFSKPatternNode.applyTrack(_:)(double a1)
{
  unint64_t v2 = v1;
  unint64_t v4 = v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config;
  double v5 = 0.0;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config + 32) & 1) == 0) {
    double v5 = (a1 + -0.5)
  }
       * ((*(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius)
         + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius))
        * (double)*(uint64_t *)v4
        / (double)*(uint64_t *)(v4 + 24));
  BOOL v6 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode);
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode), sel_position);
  objc_msgSend(v6, sel_setPosition_);
  double v7 = (uint64_t *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if ((unint64_t)*v7 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (!v9) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v9) {
      goto LABEL_14;
    }
  }
  if (v9 < 1)
  {
    __break(1u);
    goto LABEL_28;
  }
  for (uint64_t i = 0; i != v9; ++i)
  {
    if ((v8 & 0xC000000000000001) != 0) {
      unint64_t v11 = (char *)MEMORY[0x22A677580](i, v8);
    }
    else {
      unint64_t v11 = (char *)*(id *)(v8 + 8 * i + 32);
    }
    uint64_t v12 = v11;
    uint64_t v13 = (double *)&v11[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_trackOffset];
    *uint64_t v13 = v5;
    *((unsigned char *)v13 + 8) = 0;
    if ((v11[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8] & 1) == 0) {
      FMPFSKPatternFragmentNode.applyConformationFactor(_:)(*(double *)&v11[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor]);
    }
  }
LABEL_14:
  uint64_t result = swift_bridgeObjectRelease_n();
  if ((*(unsigned char *)(v4 + 112) & 1) == 0)
  {
    double v5 = *(double *)(v4 + 104);
    id v15 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v2
                                                                + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsNode), sel_children));
    type metadata accessor for SKNode();
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v2 = specialized _arrayConditionalCast<A, B>(_:)(v16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v2)
    {
      if (!(v2 >> 62))
      {
        uint64_t v17 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRetain();
        if (v17)
        {
LABEL_18:
          if (v17 < 1)
          {
            __break(1u);
            return result;
          }
          uint64_t v18 = 0;
          double v19 = (double)*(uint64_t *)v4;
          do
          {
            if ((v2 & 0xC000000000000001) != 0) {
              uint64_t v20 = (char *)MEMORY[0x22A677580](v18, v2);
            }
            else {
              uint64_t v20 = (char *)*(id *)(v2 + 8 * v18 + 32);
            }
            double v21 = v20;
            double v22 = v5 * ((*(double *)&v20[OBJC_IVAR____TtC10TVRemoteUI15FMPFSKLabelNode_normalizedIndex] - a1) * v19);
            ++v18;
            if (v22 < 0.0) {
              double v23 = 1.0;
            }
            else {
              double v23 = 1.0 - v22;
            }
            objc_msgSend(v20, sel_setAlpha_, v23);
          }
          while (v17 != v18);
        }
        return swift_bridgeObjectRelease_n();
      }
LABEL_28:
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v17 = result;
      if (result) {
        goto LABEL_18;
      }
      return swift_bridgeObjectRelease_n();
    }
  }
  return result;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        MEMORY[0x22A677580](i, v1);
        uint64_t v4 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        type metadata accessor for FMPFSKLabelNode();
        if (!swift_dynamicCastClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v4 == v2) {
          return v12;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = v1 + 32;
      while (1)
      {
        uint64_t v7 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          break;
        }
        uint64_t v8 = *(void **)(v6 + 8 * v5);
        type metadata accessor for FMPFSKLabelNode();
        uint64_t v9 = swift_dynamicCastClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        uint64_t v1 = v9;
        id v10 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v5;
        if (v7 == v2) {
          return v12;
        }
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return v12;
}

Swift::Void __swiftcall FMPFSKPatternNode.updateWithDeltaTime(_:)(Swift::Double_optional a1)
{
  uint64_t v3 = v2;
  char v4 = v1;
  Swift::Double v5 = *(double *)&a1.is_nil;
  char v6 = *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_bearing + 8);
  if (v6)
  {
    double v7 = 0.0;
    double v8 = 0.0;
    char v9 = 1;
    char v10 = 1;
  }
  else
  {
    double v8 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedEnergeticBearing);
    char v10 = *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedEnergeticBearing + 8);
    if ((v10 & 1) == 0) {
      double v8 = v8 / 180.0 * 3.14159265;
    }
    double v7 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLethargicBearing);
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLethargicBearing + 8))
    {
      char v9 = 1;
    }
    else
    {
      char v9 = 0;
      double v7 = v7 / 180.0 * 3.14159265;
    }
  }
  uint64_t v11 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor);
  char v12 = *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8);
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout);
  char v14 = *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout + 8);
  if ((v4 & 1) == 0)
  {
    char v86 = *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout + 8);
    char v87 = v10;
    uint64_t v84 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout);
    uint64_t v85 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor);
    char v82 = v9;
    char v83 = *(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8);
    Swift::Double v15 = *(double *)&a1.is_nil;
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyConformedToExplodedFactor) != 1) {
      goto LABEL_23;
    }
    uint64_t v16 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactorSpring;
    uint64_t v17 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactorSpring);
    if (FMPFFluidSpring.isStable.getter()) {
      goto LABEL_23;
    }
    FLSpring.step(_:)(v5);
    *(unsigned char *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    uint64_t v18 = *(void *)(v3 + v16);
    double v19 = (double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    double v20 = *v19 + *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    if (vabdd_f64(v19[35] + *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v20) <= *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
      double v20 = v19[35] + *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    }
    uint64_t v21 = v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor;
    *(double *)uint64_t v21 = v20;
    *(unsigned char *)(v21 + 8) = 0;
    double v22 = (unint64_t *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
    swift_beginAccess();
    unint64_t v23 = *v22;
    double v80 = v8;
    double v81 = v5;
    if (v23 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      if (v24) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v24)
      {
LABEL_15:
        if (v24 < 1)
        {
LABEL_79:
          __break(1u);
          return;
        }
        uint64_t v25 = 0;
        uint64_t v26 = v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor;
        do
        {
          if ((v23 & 0xC000000000000001) != 0) {
            double v27 = (char *)MEMORY[0x22A677580](v25, v23);
          }
          else {
            double v27 = (char *)*(id *)(v23 + 8 * v25 + 32);
          }
          char v28 = *(unsigned char *)(v26 + 8);
          uint64_t v29 = &v27[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor];
          *(void *)uint64_t v29 = *(void *)v26;
          v29[8] = v28;

          ++v25;
        }
        while (v24 != v25);
      }
    }
    swift_bridgeObjectRelease_n();
    double v8 = v80;
    Swift::Double v5 = v81;
LABEL_23:
    double v30 = v7;
    double v31 = v5;
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyConformationFactor) == 1)
    {
      uint64_t v32 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactorSpring;
      uint64_t v33 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactorSpring);
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(v15);
        *(unsigned char *)(v33 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        uint64_t v34 = *(void *)(v3 + v32);
        double v35 = (double *)(v34 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        double v36 = *v35 + *(double *)(v34 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v35[35] + *(double *)(v34 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v36) <= *(double *)(v34 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
          double v36 = v35[35] + *(double *)(v34 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        }
        FMPFSKPatternNode.applyConformationFactor(_:sprung:)(1, v36);
      }
    }
    double v37 = (unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyBearing);
    if (!(v6 & 1 | ((*(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyBearing) & 1) == 0)))
    {
      uint64_t v38 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_energeticAngleSpring;
      uint64_t v39 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_energeticAngleSpring);
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(v15);
        *(unsigned char *)(v39 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        uint64_t v40 = *(void *)(v3 + v38);
        long double v41 = (double *)(v40 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        char v87 = 0;
        double v42 = *v41 + *(double *)(v40 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v41[35] + *(double *)(v40 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v42) <= *(double *)(v40 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
          double v42 = v41[35] + *(double *)(v40 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        }
        double v8 = v42;
      }
    }
    if (v6 & 1 | ((*v37 & 1) == 0))
    {
      char v9 = v82;
      Swift::Double v5 = v31;
      double v7 = v30;
    }
    else
    {
      uint64_t v43 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lethargicAngleSpring;
      uint64_t v44 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lethargicAngleSpring);
      char v9 = v82;
      Swift::Double v5 = v31;
      double v7 = v30;
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(v15);
        *(unsigned char *)(v44 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        uint64_t v45 = *(void *)(v3 + v43);
        double v46 = (double *)(v45 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        char v9 = 0;
        double v47 = *v46 + *(double *)(v45 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v46[35] + *(double *)(v45 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v47) <= *(double *)(v45 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
          double v47 = v46[35] + *(double *)(v45 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        }
        double v7 = v47;
      }
    }
    char v12 = v83;
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyCenterFactor) == 1)
    {
      uint64_t v48 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactorSpring;
      uint64_t v49 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactorSpring);
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(v15);
        *(unsigned char *)(v49 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        uint64_t v50 = *(void *)(v3 + v48);
        double v51 = (double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        char v12 = 0;
        double v52 = *v51 + *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v51[35] + *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v52) <= *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
          double v52 = v51[35] + *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        }
        uint64_t v85 = *(void *)&v52;
      }
    }
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldLookout) == 1)
    {
      uint64_t v53 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookoutSpring;
      uint64_t v54 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookoutSpring);
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(v15);
        *(unsigned char *)(v54 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        uint64_t v55 = *(void *)(v3 + v53);
        double v56 = (double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        char v86 = 0;
        double v57 = *v56 + *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v56[35] + *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v57) <= *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
          double v57 = v56[35] + *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        }
        uint64_t v84 = *(void *)&v57;
      }
    }
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldLabelsOpacity) == 1)
    {
      uint64_t v58 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsOpacitySpring;
      uint64_t v59 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsOpacitySpring);
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(v15);
        *(unsigned char *)(v59 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        uint64_t v60 = *(void *)(v3 + v58);
        uint64_t v61 = (double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        double v62 = *v61 + *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v61[35] + *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v62) <= *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
          double v62 = v61[35] + *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        }
        uint64_t v63 = v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLabelsOpacity;
        *(double *)uint64_t v63 = v62;
        *(unsigned char *)(v63 + 8) = 0;
        objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsNode), sel_setAlpha_);
      }
    }
    uint64_t v64 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackSpring;
    uint64_t v65 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackSpring);
    if (!FMPFFluidSpring.isStable.getter())
    {
      FLSpring.step(_:)(v15);
      *(unsigned char *)(v65 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      uint64_t v66 = *(void *)(v3 + v64);
      double v67 = (double *)(v66 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      double v68 = *v67 + *(double *)(v66 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      if (vabdd_f64(v67[35] + *(double *)(v66 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v68) <= *(double *)(v66 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
        double v68 = v67[35] + *(double *)(v66 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      }
      FMPFSKPatternNode.applyTrack(_:)(v68);
    }
    char v14 = v86;
    char v10 = v87;
    uint64_t v13 = v84;
    uint64_t v11 = v85;
  }
  FMPFSKPatternNode.apply(presentedEnergeticAngle:presentedLethargicAngle:presentedCenterFactor:presentedLookout:)(*(uint64_t *)&v8, v10, *(uint64_t *)&v7, v9, v11, v12, v13, v14);
  int v69 = (uint64_t *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  uint64_t v70 = *v69;
  if ((unint64_t)*v69 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
    if (v71) {
      goto LABEL_61;
    }
  }
  else
  {
    uint64_t v71 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v71)
    {
LABEL_61:
      if (v71 >= 1)
      {
        uint64_t v72 = 0;
        while (1)
        {
          if ((v70 & 0xC000000000000001) != 0)
          {
            id v73 = (id)MEMORY[0x22A677580](v72, v70);
            if ((v4 & 1) == 0) {
              goto LABEL_68;
            }
          }
          else
          {
            id v73 = *(id *)(v70 + 8 * v72 + 32);
            if ((v4 & 1) == 0) {
LABEL_68:
            }
              FMPFSKPatternFragmentNode.updateWithDeltaTime(_:)(v5);
          }

          if (v71 == ++v72) {
            goto LABEL_70;
          }
        }
      }
      __break(1u);
      goto LABEL_79;
    }
  }
LABEL_70:
  swift_bridgeObjectRelease_n();
  if ((v4 & 1) == 0)
  {
    uint64_t v74 = *(void **)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode);
    if (v74)
    {
      id v75 = v74;
      FMPFSKPeripheralDotNode.updateWithDeltaTime(_:)(v5);
    }
    uint64_t v76 = *(void **)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode);
    if (v76)
    {
      id v77 = v76;
      FMPFSKPeripheralDotNode.updateWithDeltaTime(_:)(v5);
    }
    uint64_t v78 = *(void **)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_ringView);
    if (v78)
    {
      id v79 = v78;
      FMPFRingView.updateWithDeltaTime(_:)(v5);
    }
  }
  FMPFSKPatternNode.stageConformationVsScalingVsBearingVsCentering()();
}

id FMR1GlyphButton.init(named:tintColor:backgroundColor:)(uint64_t a1, void *a2, objc_class *a3, void *a4)
{
  char v9 = &v4[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style];
  uint64_t v10 = one-time initialization token for default;
  uint64_t v11 = v4;
  if (v10 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_26817C630;
  uint64_t v13 = (void *)qword_26817C638;
  uint64_t v14 = qword_26817C650;
  long long v15 = xmmword_26817C640;
  *(_OWORD *)char v9 = static FMR1GlyphButtonStyle.default;
  *((void *)v9 + 2) = v12;
  *((void *)v9 + 3) = v13;
  *((_OWORD *)v9 + 2) = v15;
  *((void *)v9 + 6) = v14;
  uint64_t v16 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  uint64_t v17 = self;
  id v18 = v13;
  *(void *)&v11[v16] = objc_msgSend(v17, sel_buttonWithType_, 0);
  uint64_t v19 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label;
  *(void *)&v11[v19] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  *(void *)&v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringDisplayLink] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringPerimiterAnimationSpring] = 0;
  *(void *)&v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring] = 0;
  double v20 = &v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_lastRenderTime];
  *(void *)double v20 = 0;
  v20[8] = 1;
  uint64_t v21 = &v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_legend];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  double v22 = &v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_named];
  *(void *)double v22 = 0;
  *((void *)v22 + 1) = 0;

  v27.receiver = v11;
  v27.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  id v23 = objc_msgSendSuper2(&v27, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  FMR1GlyphButton.setupSubviews()();
  FMR1GlyphButton.setupConstraints()();
  if (a2)
  {
    v25._uint64_t countAndFlagsBits = a1;
    v25._object = a2;
    v28.value.super.Class isa = a3;
    v28.is_nil = (char)a4;
    FMR1GlyphButton.set(named:tintColor:backgroundColor:)(v25, v28, v24);
    swift_bridgeObjectRelease();
  }

  return v23;
}

id FMR1GlyphButton.__deallocating_deinit()
{
  char v1 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringDisplayLink];
  if (v1)
  {
    uint64_t v2 = self;
    id v3 = v1;
    id v4 = objc_msgSend(v2, sel_currentRunLoop);
    objc_msgSend(v3, sel_removeFromRunLoop_forMode_, v4, *MEMORY[0x263EFF588]);
  }
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

Swift::Void __swiftcall FMR1GlyphButton.setupSubviews()()
{
  objc_msgSend(v0, sel_setUserInteractionEnabled_, 1);
  objc_msgSend(v0, sel_setAccessibilityRespondsToUserInteraction_, 1);
  objc_msgSend(v0, sel_setIsAccessibilityElement_, 1);
  id v1 = objc_msgSend(self, sel_clearColor);
  objc_msgSend(v0, sel_setBackgroundColor_, v1);

  uint64_t v2 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_setUserInteractionEnabled_, 0);
  objc_msgSend(*(id *)&v0[v2], sel_setIsAccessibilityElement_, 0);
  objc_msgSend(v0, sel_addSubview_, *(void *)&v0[v2]);
  uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label;
  id v4 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label];
  Swift::Double v5 = self;
  uint64_t v6 = *MEMORY[0x263F835B8];
  id v7 = v4;
  id v8 = objc_msgSend(v5, sel_preferredFontForTextStyle_, v6);
  char v9 = &v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style];
  id v10 = objc_retainAutoreleasedReturnValue(objc_msgSend(v8, sel_fontWithSize_, *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style
                                                                                            + 16]));

  objc_msgSend(v7, sel_setFont_, v10);
  objc_msgSend(*(id *)&v0[v3], sel_setNumberOfLines_, 0);
  objc_msgSend(*(id *)&v0[v3], sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(*(id *)&v0[v3], sel_setTextAlignment_, 1);
  objc_msgSend(*(id *)&v0[v3], sel_setTextColor_, *((void *)v9 + 3));
  id v11 = objc_msgSend(*(id *)&v0[v3], sel_layer);
  objc_msgSend(v11, sel_setOpacity_, 0.0);

  uint64_t v12 = *(void *)&v0[v3];
  objc_msgSend(v0, sel_addSubview_, v12);
}

Swift::Void __swiftcall FMR1GlyphButton.setupConstraints()()
{
  id v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  double v31 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2273F5990;
  id v4 = objc_msgSend(*(id *)&v1[v2], sel_topAnchor);
  id v5 = objc_msgSend(v1, (SEL)&selRef_setTextContainerInset_ + 3);
  id v6 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v5);

  *(void *)(v3 + 32) = v6;
  id v7 = objc_msgSend(*(id *)&v1[v2], sel_leadingAnchor);
  id v8 = objc_msgSend(v1, sel_leadingAnchor);
  id v9 = objc_msgSend(v7, sel_constraintEqualToAnchor_, v8);

  *(void *)(v3 + 40) = v9;
  id v10 = objc_msgSend(*(id *)&v1[v2], sel_trailingAnchor);
  id v11 = objc_msgSend(v1, sel_trailingAnchor);
  id v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

  *(void *)(v3 + 48) = v12;
  id v13 = objc_msgSend(*(id *)&v1[v2], sel_widthAnchor);
  uint64_t v14 = (double *)&v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style];
  double v15 = *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style];
  id v16 = objc_msgSend(v13, sel_constraintEqualToConstant_, v15);

  *(void *)(v3 + 56) = v16;
  id v17 = objc_msgSend(*(id *)&v1[v2], sel_heightAnchor);
  id v18 = objc_msgSend(v17, sel_constraintEqualToConstant_, v15);

  *(void *)(v3 + 64) = v18;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v31, sel_activateConstraints_, isa);

  uint64_t v20 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_2273F59A0;
  id v22 = objc_msgSend(*(id *)&v1[v20], sel_topAnchor);
  id v23 = objc_msgSend(*(id *)&v1[v2], sel_bottomAnchor);
  id v24 = objc_msgSend(v22, sel_constraintEqualToAnchor_constant_, v23, v14[1]);

  *(void *)(v21 + 32) = v24;
  id v25 = objc_msgSend(*(id *)&v1[v20], sel_bottomAnchor);
  id v26 = objc_msgSend(v1, sel_bottomAnchor);
  id v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v26);

  *(void *)(v21 + 40) = v27;
  id v28 = objc_msgSend(*(id *)&v1[v20], sel_centerXAnchor);
  id v29 = objc_msgSend(*(id *)&v1[v2], sel_centerXAnchor);
  id v30 = objc_msgSend(v28, sel_constraintEqualToAnchor_, v29);

  *(void *)(v21 + 48) = v30;
  specialized Array._endMutation()();
  Class v32 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v31, sel_activateConstraints_, v32);
}

void FMR1GlyphButton.touchesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  objc_msgSendSuper2(&v9, sel_touchesBegan_withEvent_, isa, a2);

  id v5 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_layer);
  id v6 = objc_msgSend(self, sel_whiteColor);
  id v7 = objc_msgSend(v6, sel_colorWithAlphaComponent_, 0.5);

  id v8 = objc_msgSend(v7, sel_CGColor);
  objc_msgSend(v5, sel_setBackgroundColor_, v8);
}

void FMR1GlyphButton.touchesEnded(_:with:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v16.receiver = v2;
  v16.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  objc_msgSendSuper2(&v16, sel_touchesEnded_withEvent_, isa, a2);

  uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  id v6 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_layer);
  id v7 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor];
  if (v7) {
    id v8 = objc_msgSend(v7, sel_CGColor);
  }
  else {
    id v8 = 0;
  }
  objc_msgSend(v6, sel_setBackgroundColor_, v8);

  uint64_t v9 = swift_bridgeObjectRetain();
  id v10 = (void *)specialized Collection.first.getter(v9);
  swift_bridgeObjectRelease();
  if (v10)
  {
    objc_msgSend(v10, sel_locationInView_, v2);
    CGFloat v12 = v11;
    CGFloat v14 = v13;
    objc_msgSend(v2, sel_bounds);
    v17.CGFloat x = v12;
    v17.CGFloat y = v14;
    if (CGRectContainsPoint(v18, v17))
    {
      id v15 = *(id *)&v2[v5];
      objc_msgSend(v15, sel_sendActionsForControlEvents_, 64);
    }
  }
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.startIndex.getter();
    uint64_t v5 = v4;
    uint64_t v6 = __CocoaSet.endIndex.getter();
    char v8 = MEMORY[0x22A6774F0](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      outlined consume of Set<UITouch>.Index._Variant(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    specialized Set.subscript.getter(v3, v5, v2 != 0, a1);
    uint64_t v9 = v13;
    outlined consume of Set<UITouch>.Index._Variant(v3, v5, v2 != 0);
    return v9;
  }
  uint64_t result = specialized _NativeSet.startIndex.getter(a1);
  if ((v12 & 1) == 0)
  {
    uint64_t v5 = v11;
    if (*(_DWORD *)(a1 + 36) == v11)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t @objc FMR1GlyphButton.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v10 = a1;
  a5(v8, a4);

  return swift_bridgeObjectRelease();
}

void FMR1GlyphButton.touchesCancelled(_:with:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  objc_msgSendSuper2(&v8, sel_touchesCancelled_withEvent_, isa, a2);

  id v5 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_layer);
  uint64_t v6 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor];
  if (v6) {
    id v7 = objc_msgSend(v6, sel_CGColor);
  }
  else {
    id v7 = 0;
  }
  objc_msgSend(v5, sel_setBackgroundColor_, v7);
}

void FMR1GlyphButton.touchesMoved(_:with:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v17.receiver = v2;
  v17.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  objc_msgSendSuper2(&v17, sel_touchesMoved_withEvent_, isa, a2);

  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = (void *)specialized Collection.first.getter(v5);
  swift_bridgeObjectRelease();
  if (v6)
  {
    objc_msgSend(v6, sel_locationInView_, v2);
    CGFloat v8 = v7;
    CGFloat v10 = v9;
    objc_msgSend(v2, sel_bounds);
    v18.CGFloat x = v8;
    v18.CGFloat y = v10;
    BOOL v11 = CGRectContainsPoint(v19, v18);
    id v12 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_layer);
    if (v11)
    {
      id v13 = objc_msgSend(self, sel_whiteColor);
      id v14 = objc_msgSend(v13, sel_colorWithAlphaComponent_, 0.5);

      id v15 = objc_msgSend(v14, sel_CGColor);
    }
    else
    {
      objc_super v16 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor];
      if (v16) {
        id v15 = objc_msgSend(v16, sel_CGColor);
      }
      else {
        id v15 = 0;
      }
    }
    objc_msgSend(v12, sel_setBackgroundColor_, v15);
  }
}

id FMR1GlyphButton.ringDisplayLinkUpdate(displaylink:)(id a1)
{
  uint64_t v3 = (double *)&v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_lastRenderTime];
  if ((v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_lastRenderTime + 8] & 1) == 0)
  {
    uint64_t v4 = v1;
    double v5 = *v3;
    objc_msgSend(a1, sel_timestamp);
    double v7 = v6 - v5;
    uint64_t v8 = *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringPerimiterAnimationSpring];
    if (v8)
    {
      FLSpring.step(_:)(v7);
      *(unsigned char *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    }
    uint64_t v9 = *(void *)&v4[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring];
    if (v9)
    {
      FLSpring.step(_:)(v7);
      *(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    }
    objc_msgSend(v4, sel_setNeedsDisplay);
  }
  id result = objc_msgSend(a1, sel_timestamp);
  *(void *)uint64_t v3 = v11;
  *((unsigned char *)v3 + 8) = 0;
  return result;
}

void FMR1GlyphButton.isUserInteractionEnabled.setter(char a1)
{
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  objc_msgSendSuper2(&v10, sel_setUserInteractionEnabled_, a1 & 1);
  uint64_t v3 = self;
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v1;
  *(unsigned char *)(v5 + 24) = a1;
  v9[4] = partial apply for closure #1 in FMR1GlyphButton.isUserInteractionEnabled.setter;
  v9[5] = v5;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed () -> ();
  v9[3] = &block_descriptor_5;
  double v6 = _Block_copy(v9);
  id v7 = v4;
  uint64_t v8 = v1;
  swift_release();
  objc_msgSend(v3, sel_transitionWithView_duration_options_animations_completion_, v7, 5242880, v6, 0, 0.25);
  _Block_release(v6);
}

void FMR1GlyphButton.setTarget(_:action:for:accessibilityActionName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v6 = v5;
  id v12 = objc_msgSend(v6, sel_layer);
  objc_msgSend(v12, sel_removeAllAnimations);

  uint64_t v13 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  id v14 = objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_layer);
  objc_msgSend(v14, sel_removeAllAnimations);

  id v15 = objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label], sel_layer);
  objc_msgSend(v15, sel_removeAllAnimations);

  objc_super v16 = *(void **)&v6[v13];
  outlined init with copy of Any?(a1, (uint64_t)v33);
  uint64_t v17 = v34;
  if (v34)
  {
    CGPoint v18 = __swift_project_boxed_opaque_existential_1(v33, v34);
    uint64_t v31 = a1;
    uint64_t v32 = a5;
    uint64_t v19 = a3;
    uint64_t v20 = *(void *)(v17 - 8);
    MEMORY[0x270FA5388](v18, v18);
    id v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v20 + 16))(v22);
    id v23 = v16;
    uint64_t v24 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v17);
    a3 = v19;
    a1 = v31;
    a5 = v32;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  }
  else
  {
    id v25 = v16;
    uint64_t v24 = 0;
  }
  objc_msgSend(v16, sel_addTarget_action_forControlEvents_, v24, a2, a3, v31, v32);

  swift_unknownObjectRelease();
  if (a5)
  {
    swift_bridgeObjectRetain();
    id v26 = (void *)MEMORY[0x22A677130](a4, a5);
    objc_msgSend(v6, sel_setAccessibilityLabel_, v26);

    type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
    outlined init with copy of Any?(a1, (uint64_t)v33);
    id v27 = UIAccessibilityCustomAction.__allocating_init(name:target:selector:)(a4, a5, v33, a2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_2273F4460;
    *(void *)(v28 + 32) = v27;
    v33[0] = v28;
    specialized Array._endMutation()();
    id v29 = v27;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_setAccessibilityCustomActions_, isa);
  }
  else
  {
    objc_msgSend(v6, sel_setAccessibilityLabel_, 0);
    objc_msgSend(v6, sel_setAccessibilityCustomActions_, 0);
  }
}

id UIAccessibilityCustomAction.__allocating_init(name:target:selector:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  double v6 = (void *)MEMORY[0x22A677130]();
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[3];
  if (v7)
  {
    uint64_t v8 = __swift_project_boxed_opaque_existential_1(a3, a3[3]);
    uint64_t v9 = *(void *)(v7 - 8);
    MEMORY[0x270FA5388](v8, v8);
    uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  }
  else
  {
    uint64_t v12 = 0;
  }
  id v13 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithName_target_selector_, v6, v12, a4);

  swift_unknownObjectRelease();
  return v13;
}

Swift::Void __swiftcall FMR1GlyphButton.set(named:tintColor:backgroundColor:)(Swift::String named, UIColor_optional tintColor, UIColor_optional backgroundColor)
{
  uint64_t v4 = *(void **)&tintColor.is_nil;
  Class isa = tintColor.value.super.isa;
  object = named._object;
  uint64_t countAndFlagsBits = named._countAndFlagsBits;
  *(Swift::String *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_named) = named;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  double v8 = *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style);
  id v9 = objc_msgSend(self, sel_configurationWithPointSize_weight_, 7, v8 / 3.0);
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)MEMORY[0x22A677130](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(self, sel_systemImageNamed_, v10);

  id v12 = objc_msgSend(v11, sel_imageByApplyingSymbolConfiguration_, v9);
  if (v12) {
    objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button), sel_setImage_forState_, v12, 0);
  }
  uint64_t v13 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  id v14 = *(void **)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button);
  if (isa)
  {
    id v15 = v14;
    Class v16 = isa;
  }
  else
  {
    uint64_t v17 = self;
    id v18 = v14;
    Class v16 = (Class)objc_msgSend(v17, sel_whiteColor);
  }
  uint64_t v19 = isa;
  objc_msgSend(v14, sel_setTintColor_, v16);

  id v20 = objc_msgSend(*(id *)(v3 + v13), sel_layer);
  objc_msgSend(v20, sel_setCornerRadius_, v8 * 0.5);

  if (!v4 || (id v21 = objc_msgSend(v4, sel_CGColor)) == 0)
  {
    id v22 = objc_msgSend(self, sel_whiteColor);
    id v23 = objc_msgSend(v22, sel_colorWithAlphaComponent_, 0.5);

    id v21 = objc_msgSend(v23, sel_CGColor);
  }
  id v24 = objc_msgSend(*(id *)(v3 + v13), sel_layer);
  objc_msgSend(v24, sel_setBackgroundColor_, v21);

  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithCGColor_, v21);
  id v26 = *(id *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor);
  *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor) = v25;
}

uint64_t type metadata accessor for FMR1GlyphButton()
{
  return self;
}

uint64_t initializeWithCopy for FMR1GlyphButtonStyle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  id v4 = v3;
  return a1;
}

void *assignWithCopy for FMR1GlyphButtonStyle(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  id v4 = (void *)a2[3];
  uint64_t v5 = (void *)a1[3];
  a1[3] = v4;
  id v6 = v4;

  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FMR1GlyphButtonStyle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMR1GlyphButtonStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMR1GlyphButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FMR1GlyphButtonStyle()
{
  return &type metadata for FMR1GlyphButtonStyle;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2273C767C()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

id partial apply for closure #1 in FMR1GlyphButton.isUserInteractionEnabled.setter()
{
  return objc_msgSend(*(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button), sel_setEnabled_, *(unsigned __int8 *)(v0 + 24));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x22A677520](a1, a2, v7);
      type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v17;
  swift_unknownObjectRelease();
  Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v6 = (v6 + 1) & v12;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_26;
      }
      id v13 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v14 = static NSObject.== infix(_:_:)();
    }
    while ((v14 & 1) == 0);
  }

LABEL_20:
  id v15 = *(void **)(*(void *)(a4 + 48) + 8 * v6);
  id v16 = v15;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void specialized FMR1GlyphButton.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = &v0[v1];
  uint64_t v3 = qword_26817C630;
  uint64_t v4 = (void *)qword_26817C638;
  uint64_t v5 = qword_26817C650;
  long long v6 = xmmword_26817C640;
  *(_OWORD *)uint64_t v2 = static FMR1GlyphButtonStyle.default;
  *((void *)v2 + 2) = v3;
  *((void *)v2 + 3) = v4;
  *((_OWORD *)v2 + 2) = v6;
  *((void *)v2 + 6) = v5;
  uint64_t v7 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  unint64_t v8 = self;
  id v9 = v4;
  *(void *)&v0[v7] = objc_msgSend(v8, sel_buttonWithType_, 0);
  uint64_t v10 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label;
  *(void *)&v0[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringDisplayLink] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringPerimiterAnimationSpring] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring] = 0;
  char v11 = &v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_lastRenderTime];
  *(void *)char v11 = 0;
  v11[8] = 1;
  uint64_t v12 = &v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_legend];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  id v13 = &v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_named];
  *(void *)id v13 = 0;
  *((void *)v13 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized FMR1GlyphButton.draw(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringPerimiterAnimationSpring;
  uint64_t v3 = *(char **)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringPerimiterAnimationSpring);
  uint64_t v4 = &qword_2273F5000;
  if (!v3)
  {
    uint64_t v17 = (void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring);
    id v18 = *(char **)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring);
    if (!v18) {
      return;
    }
    goto LABEL_12;
  }
  uint64_t v5 = (double *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  swift_beginAccess();
  if (vabdd_f64(v5[35] + *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40], *v5 + *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o]) > *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold])double v6 = *v5 + *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o]; {
  else
  }
    double v6 = v5[35] + *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40];
  if (v6 >= 0.99)
  {
    uint64_t v7 = *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16];
    unint64_t v8 = v3;
    id v9 = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F50624DD2F1A9FCLL, 0, v7, 0);
    uint64_t v10 = (double *)((char *)v9 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    char v11 = (double *)((char *)v9 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    double v12 = *(double *)((char *)v9 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    if (v10[35] + v12 == 1.79769313e308)
    {
      FLSpring.resetImmediately(toValue:)(1.0);
      *((unsigned char *)v9 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      double v12 = v11[5];
    }
    double v13 = 1.0 - v12;
    v10[35] = v13;
    v10[30] = v13;
    v10[31] = 0.0;
    char v14 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring);
    *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring) = v9;
    id v15 = v9;

    id v16 = *(void **)(v1 + v2);
    *(void *)(v1 + v2) = 0;
  }
  uint64_t v17 = (void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring);
  id v18 = *(char **)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring);
  if (v18)
  {
    uint64_t v4 = &qword_2273F5000;
LABEL_12:
    uint64_t v19 = (double *)&v18[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
    swift_beginAccess();
    double v20 = *v19 + *(double *)&v18[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
    if (vabdd_f64(v19[35] + *(double *)&v18[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40], v20) <= *(double *)&v18[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold]) {
      double v20 = v19[35] + *(double *)&v18[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40];
    }
    double v6 = 1.0 - v20;
    double v21 = 4.71238898;
    if (v20 >= *((double *)v4 + 299))
    {
      uint64_t v22 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringDisplayLink;
      id v23 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringDisplayLink);
      if (v23)
      {
        id v24 = self;
        id v25 = v18;
        id v26 = v23;
        id v27 = objc_msgSend(v24, sel_currentRunLoop);
        objc_msgSend(v26, sel_removeFromRunLoop_forMode_, v27, *MEMORY[0x263EFF588]);

        uint64_t v28 = *(void **)(v1 + v22);
      }
      else
      {
        id v29 = v18;
        uint64_t v28 = 0;
      }
      *(void *)(v1 + v22) = 0;

      uint64_t v30 = v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_lastRenderTime;
      *(void *)uint64_t v30 = 0;
      *(unsigned char *)(v30 + 8) = 1;
      uint64_t v31 = *v17;
      *uint64_t v17 = 0;
    }
    goto LABEL_20;
  }
  double v21 = v6 * 6.28318531 + -1.57079633;
LABEL_20:
  uint64_t v32 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button), sel_frame);
  CGFloat v33 = CGRectGetWidth(v39) * 0.5;
  objc_msgSend(*(id *)(v1 + v32), sel_frame);
  CGFloat v34 = CGRectGetHeight(v40) * 0.5;
  uint64_t v35 = v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style;
  double v36 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style + 40);
  id v37 = objc_msgSend(self, sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, v33, v34, (*(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style) - v36) * 0.5, -1.57079633, v21);
  objc_msgSend(v37, sel_setLineWidth_, v36);
  objc_msgSend(v37, sel_setLineCapStyle_, 1);
  id v38 = objc_msgSend(*(id *)(v1 + v32), sel_tintColor);
  objc_msgSend(v38, sel_setStroke);

  objc_msgSend(v37, sel_strokeWithBlendMode_alpha_, 0, v6 * *(double *)(v35 + 48));
}

uint64_t outlined consume of Set<UITouch>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

id UIColor.fmpfBlendWithColor(_:factor:)(void *a1, double a2)
{
  v15[1] = *(double *)MEMORY[0x263EF8340];
  double v14 = 0.0;
  v15[0] = 0.0;
  uint64_t v12 = 0;
  double v13 = 0.0;
  double v10 = 0.0;
  double v11 = 0.0;
  uint64_t v8 = 0;
  double v9 = 0.0;
  unsigned int v5 = objc_msgSend(v2, sel_getRed_green_blue_alpha_, v15, &v14, &v13, &v12);
  id result = 0;
  if (v5) {
    BOOL v7 = a1 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (objc_msgSend(a1, sel_getRed_green_blue_alpha_, &v11, &v10, &v9, &v8)) {
      return objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithDisplayP3Red_green_blue_alpha_, (1.0 - a2) * v15[0] + v11 * a2, (1.0 - a2) * v14 + v10 * a2, (1.0 - a2) * v13 + v9 * a2, 1.0);
    }
    else {
      return 0;
    }
  }
  return result;
}

id one-time initialization function for fmpfBlackColor()
{
  id result = objc_msgSend(self, sel_blackColor);
  static UIColor.fmpfBlackColor = (uint64_t)result;
  return result;
}

void destroy for FMPFSKLabelNodeStyle(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t initializeWithCopy for FMPFSKLabelNodeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for FMPFSKLabelNodeStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + 16);
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FMPFSKLabelNodeStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMPFSKLabelNodeStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMPFSKLabelNodeStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKLabelNodeStyle()
{
  return &type metadata for FMPFSKLabelNodeStyle;
}

double one-time initialization function for r1NoAR()
{
  id v0 = objc_msgSend(self, sel_whiteColor);
  static FMPFSKLabelNodeStyle.r1NoAR = 0xD000000000000012;
  *(void *)algn_26817C668 = 0x80000002273FD020;
  qword_26817C670 = (uint64_t)v0;
  qword_26817C678 = 0x4046000000000000;
  *(void *)&double result = 2;
  xmmword_26817C680 = xmmword_2273F59F0;
  qword_26817C690 = 0;
  byte_26817C698 = 0;
  return result;
}

{
  double result;

  if (one-time initialization token for r1NoAR != -1) {
    swift_once();
  }
  *(void *)&static FMPFSKPatternNodeStyle.r1NoAR = 0;
  BYTE8(static FMPFSKPatternNodeStyle.r1NoAR) = 1;
  xmmword_26817C858 = xmmword_2273F5AD0;
  qword_26817C868 = 0x3FEAAAAAAAAAAAABLL;
  byte_26817C870 = 1;
  xmmword_26817C878 = xmmword_2273F5A40;
  xmmword_26817C888 = xmmword_2273F5AE0;
  __asm { FMOV            V1.2D, #1.0 }
  xmmword_26817C898 = _Q1;
  xmmword_26817C8A8 = _Q1;
  xmmword_26817C8B8 = _Q1;
  xmmword_26817C8C8 = xmmword_2273F5A90;
  xmmword_26817C8D8 = xmmword_2273F5AA0;
  *(void *)&xmmword_26817C8E8 = 0x3FECCCCCCCCCCCCDLL;
  *((void *)&xmmword_26817C8E8 + 1) = *((void *)&xmmword_2681798E8 + 1);
  double result = 0.6;
  xmmword_26817C8F8 = xmmword_2273F5AF0;
  xmmword_26817C908 = xmmword_2273F5B00;
  return result;
}

{
  id v0;
  id v1;
  double result;

  id v0 = objc_msgSend(self, sel_whiteColor);
  uint64_t v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.4);

  static FMPFSKPeripheralDotNodeStyle.r1NoAR = xmmword_2273F5BA0;
  qword_2681798B8 = 16;
  unk_2681798C0 = xmmword_2273F5BB0;
  *(_OWORD *)&qword_2681798D0 = xmmword_2273F5BC0;
  qword_2681798E0 = (uint64_t)v1;
  double result = 0.5;
  xmmword_2681798E8 = xmmword_2273F5BD0;
  qword_2681798F8 = 0x4040000000000000;
  return result;
}

void destroy for FMPFSKPatternNodeConfig(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    swift_bridgeObjectRelease();
    unint64_t v2 = *(void **)(a1 + 136);
  }
}

uint64_t initializeWithCopy for FMPFSKPatternNodeConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v4 = *(void *)(a2 + 128);
  if (v4)
  {
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v4;
    id v5 = *(void **)(a2 + 136);
    *(void *)(a1 + 136) = v5;
    long long v6 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v6;
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    swift_bridgeObjectRetain();
    id v7 = v5;
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v8;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  }
  return a1;
}

uint64_t assignWithCopy for FMPFSKPatternNodeConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v10;
  double v11 = (_OWORD *)(a1 + 120);
  uint64_t v12 = (long long *)(a2 + 120);
  uint64_t v13 = *(void *)(a2 + 128);
  if (*(void *)(a1 + 128))
  {
    if (v13)
    {
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      double v14 = *(void **)(a2 + 136);
      id v15 = *(void **)(a1 + 136);
      *(void *)(a1 + 136) = v14;
      id v16 = v14;

      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      long long v17 = *(_OWORD *)(a2 + 160);
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = v17;
    }
    else
    {
      outlined destroy of FMPFSKLabelNodeStyle(a1 + 120);
      long long v22 = v12[1];
      long long v21 = v12[2];
      long long v23 = *v12;
      *(_OWORD *)((char *)v11 + 41) = *(long long *)((char *)v12 + 41);
      v11[1] = v22;
      _OWORD v11[2] = v21;
      _OWORD *v11 = v23;
    }
  }
  else if (v13)
  {
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    id v18 = *(void **)(a2 + 136);
    *(void *)(a1 + 136) = v18;
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    long long v19 = *(_OWORD *)(a2 + 160);
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = v19;
    swift_bridgeObjectRetain();
    id v20 = v18;
  }
  else
  {
    long long v24 = *v12;
    long long v25 = *(_OWORD *)(a2 + 136);
    long long v26 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    *(_OWORD *)(a1 + 136) = v25;
    *(_OWORD *)(a1 + 152) = v26;
    _OWORD *v11 = v24;
  }
  return a1;
}

uint64_t outlined destroy of FMPFSKLabelNodeStyle(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy177_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for FMPFSKPatternNodeConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  long long v4 = (_OWORD *)(a1 + 120);
  long long v5 = (_OWORD *)(a2 + 120);
  if (!*(void *)(a1 + 128)) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(a2 + 128);
  if (!v7)
  {
    outlined destroy of FMPFSKLabelNodeStyle((uint64_t)v4);
LABEL_5:
    long long v9 = v5[1];
    *long long v4 = *v5;
    v4[1] = v9;
    v4[2] = v5[2];
    *(_OWORD *)((char *)v4 + 41) = *(_OWORD *)((char *)v5 + 41);
    return a1;
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);

  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMPFSKPatternNodeConfig(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 177)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 128);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FMPFSKPatternNodeConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 176) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 177) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 177) = 0;
    }
    if (a2) {
      *(void *)(result + 128) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKPatternNodeConfig()
{
  return &type metadata for FMPFSKPatternNodeConfig;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t getEnumTagSinglePayload for FMPFSKPatternNodeStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 208)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FMPFSKPatternNodeStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 208) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKPatternNodeStyle()
{
  return &type metadata for FMPFSKPatternNodeStyle;
}

id one-time initialization function for default()
{
  id v0 = self;
  id v1 = objc_msgSend(v0, sel_whiteColor);
  id v2 = objc_msgSend(v0, sel_whiteColor);
  id v3 = objc_msgSend(v2, sel_colorWithAlphaComponent_, 0.4);

  id result = objc_msgSend(v0, sel_whiteColor);
  static FMPFSKPatternNodeCommonStyle.default = (uint64_t)v1;
  qword_26817C6A8 = (uint64_t)v3;
  qword_26817C6B0 = (uint64_t)result;
  qword_26817C6B8 = 0x3FE0000000000000;
  return result;
}

id one-time initialization function for r1NoAR()
{
  if (one-time initialization token for r1NoAR != -1) {
    swift_once();
  }
  id v1 = (id)qword_26817C670;
  static FMPFSKPatternNodeConfig.r1NoAR = xmmword_2273F5A20;
  byte_26817C6D0 = 0;
  qword_26817C6D8 = 5;
  LOBYTE(xmmword_26817C6E0) = 0;
  *((void *)&xmmword_26817C6E0 + 1) = 120;
  byte_26817C6F0 = 0;
  qword_26817C6F8 = 0;
  LOBYTE(xmmword_26817C700) = 0;
  *((void *)&xmmword_26817C700 + 1) = 0x4059000000000000;
  byte_26817C710 = 0;
  qword_26817C718 = 1;
  LOBYTE(xmmword_26817C720) = 0;
  *((void *)&xmmword_26817C720 + 1) = 0;
  byte_26817C730 = 0;
  qword_26817C738 = static FMPFSKLabelNodeStyle.r1NoAR;
  unk_26817C740 = *(void *)algn_26817C668;
  qword_26817C748 = qword_26817C670;
  xmmword_26817C750 = *(_OWORD *)&qword_26817C678;
  xmmword_26817C760 = *(long long *)((char *)&xmmword_26817C680 + 8);
  byte_26817C770 = byte_26817C698;
  swift_bridgeObjectRetain();
  return v1;
}

double one-time initialization function for r1OrBT()
{
  if (one-time initialization token for r1OrBT != -1) {
    swift_once();
  }
  *(void *)&static FMPFSKPatternNodeStyle.r1OrBT = 0x3FE0000000000000;
  BYTE8(static FMPFSKPatternNodeStyle.r1OrBT) = 0;
  xmmword_26817C788 = xmmword_2273F5A30;
  qword_26817C798 = 0x3FEAAAAAAAAAAAABLL;
  byte_26817C7A0 = 0;
  xmmword_26817C7A8 = xmmword_2273F5A40;
  xmmword_26817C7B8 = xmmword_2273F5A50;
  xmmword_26817C7C8 = xmmword_2273F5A60;
  xmmword_26817C7D8 = xmmword_2273F5A70;
  xmmword_26817C7E8 = xmmword_2273F5A80;
  xmmword_26817C7F8 = xmmword_2273F5A90;
  xmmword_26817C808 = xmmword_2273F5AA0;
  *(void *)&xmmword_26817C818 = 0x3FECCCCCCCCCCCCDLL;
  *((void *)&xmmword_26817C818 + 1) = *((void *)&xmmword_268179890 + 1);
  double result = 0.5;
  xmmword_26817C828 = xmmword_2273F5AB0;
  xmmword_26817C838 = xmmword_2273F5AC0;
  return result;
}

{
  id v0;
  id v1;
  double result;

  id v0 = objc_msgSend(self, sel_whiteColor);
  id v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.4);

  static FMPFSKPeripheralDotNodeStyle.r1OrBT = xmmword_2273F5BA0;
  qword_268179860 = 16;
  unk_268179868 = xmmword_2273F5BB0;
  *(_OWORD *)&qword_268179878 = xmmword_2273F5BC0;
  qword_268179888 = (uint64_t)v1;
  double result = 0.5;
  xmmword_268179890 = xmmword_2273F5BD0;
  qword_2681798A0 = 0x4040000000000000;
  return result;
}

id FMPFSKPatternFragmentNode.applyConformationFactor(_:)(double a1)
{
  id v2 = v1;
  if ((v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationTimingFunction + 32] & 1) == 0
    && (v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 288] & 1) == 0)
  {
    id v3 = (double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationTimingFunction];
    a1 = pow(a1 * a1 * a1 * v3[3]+ a1 * a1 * ((1.0 - a1) * (v3[2] * 3.0))+ (1.0 - a1) * ((1.0 - a1) * (1.0 - a1)) * *v3+ (1.0 - a1) * (1.0 - a1) * (v3[1] * 3.0) * a1, *(long double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 280]);
  }
  double v13 = a1;
  specialized FMPFSKPatternFragmentNode.positionOnCurvedPathWith(conformationFactor:trackOffsetCorrection:)((uint64_t)v14, a1);
  id result = (id)outlined init with take of (position: CGPoint, peripheralPosition: CGPoint)?((uint64_t)v14, (uint64_t)v15);
  if ((v16 & 1) == 0)
  {
    float64x2_t v5 = v15[0];
    if ((v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor + 8] & 1) == 0
      && (v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset + 16] & 1) == 0)
    {
      float64x2_t v5 = vaddq_f64(v15[0], vmulq_n_f64(*(float64x2_t *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset], v13* (1.0- *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor])));
    }
    if ((v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition + 16] & 1) != 0
      || (v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor + 8] & 1) != 0)
    {
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode], sel_setPosition_, *(_OWORD *)&v5);
      double v6 = v13;
      double v7 = 1.0 - v13;
    }
    else
    {
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode], sel_setPosition_, vaddq_f64(vmulq_n_f64(v5, 1.0 - *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor]), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v15[1], 1.0 - v13), vmulq_n_f64(*(float64x2_t *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition], v13)), *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor])));
      double v7 = 1.0 - v13;
      double v6 = v13;
    }
    double v12 = v7;
    double v8 = v7 * *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_nonConformedBrightness]
       + v6 * *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedBrightness];
    long long v9 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_renderingColor];
    id v10 = *(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode];
    id v11 = v9;
    FMPFSKSpriteNode.setBrightness(_:with:)(v11, v8);

    return objc_msgSend(v2, sel_setAlpha_, v12 * *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 104]+ v13 * *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 96]);
  }
  return result;
}

id FMPFSKPatternFragmentNode.applyScalingFactor(_:)(double a1)
{
  double v2 = 1.0;
  double v3 = 1.0 - a1;
  double v4 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_maxScaleFactor) * a1
     + (1.0 - a1) * *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_minScaleFactor);
  uint64_t v5 = v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style;
  double v6 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 192);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 200)) {
    double v6 = 1.0;
  }
  double v7 = *(double *)(v5 + 208);
  if (*(unsigned char *)(v5 + 216)) {
    double v7 = 1.0;
  }
  double v8 = *(double *)(v5 + 224);
  if (*(unsigned char *)(v5 + 232)) {
    double v8 = 1.0;
  }
  if (!*(unsigned char *)(v5 + 248)) {
    double v2 = *(double *)(v5 + 240);
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_useAlternateScaling) == 1
    && (*(unsigned char *)(v5 + 264) & 1) == 0)
  {
    double v9 = *(double *)(v5 + 256);
    double v10 = 1.0;
    if (v6 > 1.0)
    {
      double v6 = v6 * v9;
      if (v7 <= 1.0)
      {
LABEL_13:
        if (v8 <= 1.0) {
          goto LABEL_14;
        }
        goto LABEL_25;
      }
    }
    else if (v7 <= 1.0)
    {
      goto LABEL_13;
    }
    double v7 = v7 * v9;
    if (v8 <= 1.0)
    {
LABEL_14:
      if (v2 <= 1.0)
      {
LABEL_16:
        double v2 = v2 * v10;
        goto LABEL_17;
      }
LABEL_15:
      double v10 = *(double *)(v5 + 256);
      goto LABEL_16;
    }
LABEL_25:
    double v8 = v8 * v9;
    if (v2 <= 1.0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_17:
  double v11 = v3 * v7 + v2 * a1;
  uint64_t v12 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode), sel_setXScale_, v4 * (v3 * v6 + v8 * a1));
  objc_msgSend(*(id *)(v1 + v12), sel_setYScale_, v4 * v11);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_experienceType) == 1)
  {
    objc_msgSend(*(id *)(v1 + v12), sel_size);
    double v14 = v13;
    objc_msgSend(*(id *)(v1 + v12), sel_xScale);
    double v16 = v14 / v15;
    objc_msgSend(*(id *)(v1 + v12), sel_size);
    double v18 = (v17 - v16) * 0.5;
    long long v19 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode);
  }
  else
  {
    long long v19 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode);
    double v18 = 0.0;
  }
  return objc_msgSend(v19, sel_setPosition_, v18, 0.0);
}

Swift::Void __swiftcall FMPFSKPatternFragmentNode.updateWithDeltaTime(_:)(Swift::Double a1)
{
  double v2 = v1;
  if (v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceScatterOffset] != 1) {
    goto LABEL_23;
  }
  double v4 = *(unsigned char **)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetXSpring];
  if (!v4) {
    goto LABEL_23;
  }
  uint64_t v5 = *(unsigned char **)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetYSpring];
  if (!v5) {
    goto LABEL_23;
  }
  double v6 = (double *)&v4[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  swift_beginAccess();
  double v7 = (double *)&v4[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  if (v6[35] + *(double *)&v4[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40] == 1.79769313e308) {
    goto LABEL_23;
  }
  double v8 = (double *)&v5[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  swift_beginAccess();
  double v9 = (double *)&v5[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  if (v8[35] + *(double *)&v5[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40] == 1.79769313e308) {
    goto LABEL_23;
  }
  double v10 = &v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style];
  if (v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 136] & 1) != 0 || (v10[120]) {
    goto LABEL_23;
  }
  uint64_t v42 = *((void *)v10 + 16);
  double v11 = *((double *)v10 + 14);
  FLSpring.step(_:)(a1);
  v4[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 1;
  FLSpring.step(_:)(a1);
  v5[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 1;
  double v12 = *v6 + *v7;
  if (vabdd_f64(v6[35] + v7[5], v12) <= *(double *)&v4[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold]) {
    double v12 = v6[35] + v7[5];
  }
  double v13 = *v8 + *v9;
  if (vabdd_f64(v8[35] + v9[5], v13) <= *(double *)&v5[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold]) {
    double v13 = v8[35] + v9[5];
  }
  double v14 = (double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset];
  double *v14 = v12;
  v14[1] = v13;
  *((unsigned char *)v14 + 16) = 0;
  if (v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8])
  {
    double v15 = v4;
    double v16 = v5;
  }
  else
  {
    double v17 = *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
    double v18 = v4;
    long long v19 = v5;
    FMPFSKPatternFragmentNode.applyConformationFactor(_:)(v17);
  }
  uint64_t v20 = *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbScatterRandomOffsetFrameCounter];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
    __break(1u);
    goto LABEL_54;
  }
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbScatterRandomOffsetFrameCounter] = v22;
  if (!v42)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v22 == 0x8000000000000000 && v42 == -1) {
    goto LABEL_55;
  }
  if (!(v22 % v42))
  {
    double v23 = fmax(v11 * *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralDiskRadius], 1.0);
    if (v23 >= 0.0)
    {
      specialized static BinaryFloatingPoint<>.random<A>(in:using:)(-v23, v23);
      unint64_t v25 = v24;
      specialized static BinaryFloatingPoint<>.random<A>(in:using:)(-v23, v23);
      FMPFSKPatternFragmentNode.setDisturbanceScatterOffset(_:sprung:)((CGPoint)__PAIR128__(v26, v25), 1);
      goto LABEL_22;
    }
LABEL_56:
    __break(1u);
    return;
  }
LABEL_22:

LABEL_23:
  if (v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceHomingFactor] == 1)
  {
    uint64_t v27 = *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactorSpring];
    if (v27)
    {
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(a1);
        *(unsigned char *)(v27 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        uint64_t v28 = (double *)(v27 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        double v29 = *v28 + *(double *)(v27 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v28[35] + *(double *)(v27 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v29) <= *(double *)(v27 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
          double v29 = v28[35] + *(double *)(v27 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        }
        uint64_t v30 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor];
        double *v30 = v29;
        *((unsigned char *)v30 + 8) = 0;
      }
    }
  }
  uint64_t v31 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_headingSpring;
  uint64_t v32 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_headingSpring];
  if (!FMPFFluidSpring.isStable.getter()
    && *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction])
  {
    FLSpring.step(_:)(a1);
    *(unsigned char *)(v32 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    uint64_t v33 = *(void *)&v2[v31];
    CGFloat v34 = (double *)(v33 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    double v35 = *v34 + *(double *)(v33 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    if (vabdd_f64(v34[35] + *(double *)(v33 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v35) <= *(double *)(v33 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
      double v35 = v34[35] + *(double *)(v33 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    }
    *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedAbsoluteHeading] = v35;
    objc_msgSend(v2, sel_setZRotation_, v35 / 180.0 * 3.14159265);
  }
  uint64_t v36 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_noiseSubSpring];
  FLSpring.step(_:)(a1);
  *(unsigned char *)(v36 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  if ((v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8] & 1) == 0)
  {
    double v37 = *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
    if (v37 <= 0.0 && v37 <= *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 56])
    {
      FMPFSKPatternFragmentNode.setDotsFreeFromBearing()();
      return;
    }
    if (v37 > 0.0)
    {
      FMPFSKPatternFragmentNode.setDotsBoundToBearing()();
      return;
    }
    if (v37 == 1.0)
    {
      CGRect v39 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition];
      CGRect v40 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition];
      if (v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16])
      {
        if ((v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition + 16] & 1) == 0) {
LABEL_52:
        }
          FMPFSKPatternFragmentNode.resetToInitialPeripheralPosition()();
      }
      else
      {
        if (v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition + 16]) {
          goto LABEL_52;
        }
        if (*v39 != *v40 || v39[1] != v40[1]) {
          goto LABEL_52;
        }
      }
    }
  }
}

uint64_t outlined init with take of (position: CGPoint, peripheralPosition: CGPoint)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (position: CGPoint, peripheralPosition: CGPoint)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding()()
{
  uint64_t v1 = v0;
  uint64_t v26 = type metadata accessor for DispatchWallTime();
  uint64_t v2 = *(void *)(v26 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v26, v3);
  double v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4, v7);
  double v9 = (char *)&v26 - v8;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x270FA5388](v10, v11);
  id v12 = objc_msgSend(self, sel_sharedApplication);
  objc_msgSend(v12, sel_setIdleTimerDisabled_, 1);

  if (*(void *)(v1 + 16))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)partial apply for closure #1 in FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding();
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_6;
  _Block_copy(aBlock);
  uint64_t v27 = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v14 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  *(void *)(v1 + 16) = v14;
  swift_retain();
  swift_release();
  type metadata accessor for OS_dispatch_queue();
  double v15 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchWallTime.now()();
  MEMORY[0x22A677100](v6, 180.0);
  double v16 = *(void (**)(char *, uint64_t))(v2 + 8);
  double v17 = v6;
  uint64_t v18 = v26;
  v16(v17, v26);
  OS_dispatch_queue.asyncAfter(wallDeadline:execute:)();

  v16(v9, v18);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.default);
  swift_retain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v27 = v1;
    aBlock[0] = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    type metadata accessor for FMFindingSleepPreventer();
    swift_retain();
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227326000, v20, v21, "🧭 FMItemDetailContentViewController%s: disabling sleeping timer", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v23, -1, -1);
    MEMORY[0x22A6785E0](v22, -1, -1);
    swift_release();
  }
  else
  {

    swift_release_n();
    swift_release();
  }
}

void closure #1 in FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding()()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    id v0 = objc_msgSend(self, sel_sharedApplication);
    objc_msgSend(v0, sel_setIdleTimerDisabled_, 0);

    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
    swift_retain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v8 = v5;
      *(_DWORD *)uint64_t v4 = 136315138;
      type metadata accessor for FMFindingSleepPreventer();
      swift_retain();
      uint64_t v6 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227326000, v2, v3, "🧭 FMItemDetailContentViewController%s: re-enabling sleeping timer", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v5, -1, -1);
      MEMORY[0x22A6785E0](v4, -1, -1);
      swift_release();
    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t FMFindingSleepPreventer.__deallocating_deinit()
{
  swift_release();
  return MEMORY[0x270FA0228](v0, 24, 7);
}

uint64_t type metadata accessor for FMFindingSleepPreventer()
{
  return self;
}

uint64_t sub_2273C9FC4()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding()()
{
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

Swift::Void __swiftcall FMPFView.updateWithDeltaTime(_:)(Swift::Double a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = &v1[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate];
  if (MEMORY[0x22A6786A0](&v1[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate]))
  {
    uint64_t v12 = *((void *)v11 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t, Swift::Double))(v12 + 8))(v1, ObjectType, v12, a1);
    swift_unknownObjectRelease();
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v1;
  *(Swift::Double *)(v14 + 24) = a1;
  double v15 = self;
  double v16 = v1;
  if (objc_msgSend(v15, sel_isMainThread))
  {
    closure #1 in FMPFView.updateWithDeltaTime(_:)((uint64_t)v16, a1);
    swift_release();
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    uint64_t v21 = static OS_dispatch_queue.main.getter();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = partial apply for closure #1 in FMPFView.updateWithDeltaTime(_:);
    *(void *)(v17 + 24) = v14;
    aBlock[4] = partial apply for closure #2 in FMPFRingView.setOpacity(_:sprung:);
    aBlock[5] = v17;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_7;
    uint64_t v18 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v19 = (void *)v21;
    MEMORY[0x22A677410](0, v10, v6, v18);
    _Block_release(v18);
    swift_release();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

void closure #1 in FMPFView.updateWithDeltaTime(_:)(uint64_t a1, Swift::Double a2)
{
  uint64_t v4 = a1 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSprings;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSprings);
  FLSpring.step(_:)(a2);
  *(unsigned char *)(v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  uint64_t v6 = *(void *)(v4 + 8);
  FLSpring.step(_:)(a2);
  *(unsigned char *)(v6 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  uint64_t v7 = *(void *)(v4 + 16);
  FLSpring.step(_:)(a2);
  *(unsigned char *)(v7 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropSigmaSpring);
  FLSpring.step(_:)(a2);
  *(unsigned char *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropAlphaSpring);
  FLSpring.step(_:)(a2);
  *(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 0);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.fragmentsStoppedOrbiting() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 1);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.fragmentsWillConform() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 2);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.fragmentsWillUnconform() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 3);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.patternIsFullyPeripheral() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 4);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.patternIsFullyFormed() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 5);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.pointeeDotIsFullyCentered() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 6);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.patternIsFullyFormedAndPointeeDotIsFullyCentered() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 7);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.pointeeAndNoonDotsDidConverge() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 8);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.pointeeAndNoonDotsDidDiverge() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 9);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate;
  uint64_t result = MEMORY[0x22A6786A0](v3 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate);
  if (result)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 32))(v3, a3, ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_2273CA560()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in FMPFView.updateWithDeltaTime(_:)()
{
  closure #1 in FMPFView.updateWithDeltaTime(_:)(*(void *)(v0 + 16), *(Swift::Double *)(v0 + 24));
}

uint64_t sub_2273CA5A4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

void destroy for FMPFSKPeripheralDotNodeStyle(uint64_t a1)
{
}

uint64_t initializeWithCopy for FMPFSKPeripheralDotNodeStyle(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  id v5 = v4;
  return a1;
}

void *assignWithCopy for FMPFSKPeripheralDotNodeStyle(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  uint64_t v4 = (void *)a2[7];
  id v5 = (void *)a1[7];
  a1[7] = v4;
  id v6 = v4;

  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for FMPFSKPeripheralDotNodeStyle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  long long v4 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMPFSKPeripheralDotNodeStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMPFSKPeripheralDotNodeStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKPeripheralDotNodeStyle()
{
  return &type metadata for FMPFSKPeripheralDotNodeStyle;
}

double FMPFFluidSpring.ftarget.didset()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget + 8)) {
    double v1 = 1.79769313e308;
  }
  else {
    double v1 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget);
  }
  uint64_t v2 = v0 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
  swift_beginAccess();
  uint64_t v3 = v0 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
  double v4 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  if (*(double *)(v2 + 280) + v4 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v1);
    *(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    double v4 = *(double *)(v3 + 40);
  }
  double result = v1 - v4;
  *(double *)(v2 + 280) = result;
  *(double *)(v2 + 240) = result;
  *(void *)(v2 + 248) = 0;
  return result;
}

BOOL FMPFFluidSpring.isStable.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
  swift_beginAccess();
  uint64_t v2 = (double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  double v3 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  if (*(double *)(v1 + 280) + v3 == 1.79769313e308) {
    return 1;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) == 1
    && FLCompoundSpring.isStable()()
    && vabdd_f64(*v2, v3) <= v2[6])
  {
    return fabs(v2[1]) <= v2[7];
  }
  return 0;
}

Swift::Void __swiftcall FMPFFluidSpring.resetImmediately(toValue:)(Swift::Double toValue)
{
  FLSpring.resetImmediately(toValue:)(toValue);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
}

id FMPFFluidSpring.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFFluidSpring();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFFluidSpring()
{
  return self;
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0;
    MEMORY[0x22A6785F0](&v3, 8);
    double result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0;
          MEMORY[0x22A6785F0](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v10 = objc_allocWithZone((Class)type metadata accessor for FMPFFluidSpring());
  v10[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
  uint64_t v11 = &v10[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse];
  *(void *)uint64_t v11 = 0;
  v11[8] = 1;
  uint64_t v12 = &v10[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;
  uint64_t v13 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters];
  *uint64_t v13 = xmmword_2273F5C20;
  v13[1] = xmmword_2273F5C30;
  uint64_t v14 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters];
  _OWORD *v14 = xmmword_2273F5C20;
  v14[1] = xmmword_2273F5C30;
  double v15 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  *(_OWORD *)double v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((void *)v15 + 4) = 0x3FF0000000000000;
  *((void *)v15 + 9) = 0;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  int64x2_t v16 = vdupq_n_s64(0x4341C37937E08000uLL);
  *((_OWORD *)v15 + 7) = 0u;
  *((_OWORD *)v15 + 8) = 0u;
  *((int64x2_t *)v15 + 5) = v16;
  *((_OWORD *)v15 + 6) = 0u;
  *((void *)v15 + 18) = 0x3FF0000000000000;
  *((void *)v15 + 23) = 0;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *((_OWORD *)v15 + 14) = 0u;
  *((_OWORD *)v15 + 15) = 0u;
  *((int64x2_t *)v15 + 12) = v16;
  *((_OWORD *)v15 + 13) = 0u;
  *((void *)v15 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(v15 + 264) = 0u;
  *(_OWORD *)(v15 + 280) = 0u;
  *((void *)v15 + 37) = 0;
  *((int64x2_t *)v15 + 19) = v16;
  *((_OWORD *)v15 + 20) = 0u;
  *((_OWORD *)v15 + 21) = 0u;
  *((_OWORD *)v15 + 22) = 0u;
  uint64_t v17 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0x3FF0000000000000;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *((void *)v17 + 7) = 0;
  *((int64x2_t *)v17 + 4) = v16;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *(void *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold] = 0x3F50624DD2F1A9FCLL;
  *(void *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold] = 0x3F50624DD2F1A9FCLL;
  v38.receiver = v10;
  v38.super_class = (Class)type metadata accessor for FLSpring();
  uint64_t v18 = objc_msgSendSuper2(&v38, sel_init);
  (*(void (**)(double))((*MEMORY[0x263F8EED0] & *v18) + 0x1B0))(0.0);
  if (a6) {
    double v19 = 0.5;
  }
  else {
    double v19 = *(double *)&a5;
  }
  uint64_t v20 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse);
  *uint64_t v20 = v19;
  *((unsigned char *)v20 + 8) = 0;
  uint64_t v21 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  double v22 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  double v23 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  double v24 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  double v25 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  *(_OWORD *)uint64_t v21 = xmmword_2273F56C0;
  v21[2] = v19;
  v21[3] = 0.0;
  FLSpring.parameters.didset(v22, v23, v24, v25);
  if (a2) {
    double v26 = 1.79769313e308;
  }
  else {
    double v26 = *(double *)&a1;
  }
  uint64_t v27 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  double *v27 = v26;
  uint64_t v28 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  double v29 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  double v30 = v27[35] + v29;
  uint64_t v31 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v30, v26 + *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
    double v32 = v26 + *v28;
  }
  else {
    double v32 = v27[35] + v29;
  }
  if (v30 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v32);
    *((unsigned char *)v18 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    double v29 = v28[5];
  }
  double v33 = v32 - v29;
  v27[35] = v33;
  v27[30] = v33;
  v27[31] = 0.0;
  double v34 = *(double *)&a3;
  if (a4) {
    double v34 = 0.0;
  }
  *(double *)((char *)v18 + v31) = v34;
  v27[44] = v34;
  v28[6] = v34;
  *(void *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold) = 0x3F847AE147AE147BLL;
  v27[45] = 0.01;
  v28[7] = 0.01;
  return v18;
}

void *specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  id v6 = objc_allocWithZone((Class)type metadata accessor for FMPFFluidSpring());
  v6[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
  uint64_t v7 = &v6[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse];
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  uint64_t v8 = &v6[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  uint64_t v9 = &v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters];
  _OWORD *v9 = xmmword_2273F5C20;
  v9[1] = xmmword_2273F5C30;
  uint64_t v10 = &v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters];
  *uint64_t v10 = xmmword_2273F5C20;
  v10[1] = xmmword_2273F5C30;
  uint64_t v11 = &v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((void *)v11 + 4) = 0x3FF0000000000000;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  int64x2_t v12 = vdupq_n_s64(0x4341C37937E08000uLL);
  *((_OWORD *)v11 + 7) = 0u;
  *((_OWORD *)v11 + 8) = 0u;
  *((int64x2_t *)v11 + 5) = v12;
  *((_OWORD *)v11 + 6) = 0u;
  *((void *)v11 + 18) = 0x3FF0000000000000;
  *((void *)v11 + 23) = 0;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *((_OWORD *)v11 + 14) = 0u;
  *((_OWORD *)v11 + 15) = 0u;
  *((int64x2_t *)v11 + 12) = v12;
  *((_OWORD *)v11 + 13) = 0u;
  *((void *)v11 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(v11 + 264) = 0u;
  *(_OWORD *)(v11 + 280) = 0u;
  *((void *)v11 + 37) = 0;
  *((int64x2_t *)v11 + 19) = v12;
  *((_OWORD *)v11 + 20) = 0u;
  *((_OWORD *)v11 + 21) = 0u;
  *((_OWORD *)v11 + 22) = 0u;
  uint64_t v13 = &v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0x3FF0000000000000;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((void *)v13 + 7) = 0;
  *((int64x2_t *)v13 + 4) = v12;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *(void *)&v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold] = 0x3F50624DD2F1A9FCLL;
  *(void *)&v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold] = 0x3F50624DD2F1A9FCLL;
  v33.receiver = v6;
  v33.super_class = (Class)type metadata accessor for FLSpring();
  uint64_t v14 = objc_msgSendSuper2(&v33, sel_init);
  (*(void (**)(double))((*MEMORY[0x263F8EED0] & *v14) + 0x1B0))(0.0);
  double v15 = (char *)v14 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse;
  *(void *)double v15 = 0x3FF0000000000000;
  v15[8] = 0;
  int64x2_t v16 = (_OWORD *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  double v17 = *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  double v18 = *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  double v19 = *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  double v20 = *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  _OWORD *v16 = xmmword_2273F56C0;
  v16[1] = xmmword_2273F56C0;
  FLSpring.parameters.didset(v17, v18, v19, v20);
  if (a2) {
    double v21 = 1.79769313e308;
  }
  else {
    double v21 = *(double *)&a1;
  }
  double v22 = (double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  *double v22 = v21;
  double v23 = (double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  double v24 = *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  double v25 = v22[35] + v24;
  uint64_t v26 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v25, v21 + *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
    double v27 = v21 + *v23;
  }
  else {
    double v27 = v22[35] + v24;
  }
  if (v25 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v27);
    *((unsigned char *)v14 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    double v24 = v23[5];
  }
  double v28 = v27 - v24;
  v22[35] = v28;
  v22[30] = v28;
  v22[31] = 0.0;
  double v29 = *(double *)&a3;
  if (a4) {
    double v29 = 0.0;
  }
  *(double *)((char *)v14 + v26) = v29;
  v22[44] = v29;
  v23[6] = v29;
  *(void *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold) = 0x3F847AE147AE147BLL;
  v22[45] = 0.01;
  v23[7] = 0.01;
  return v14;
}

void *specialized static FMPFFluidSpring.randomSpringWith(initialValue:randomFactor:stableValueThreshold:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v10 = objc_allocWithZone((Class)type metadata accessor for FMPFFluidSpring());
  v10[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
  uint64_t v11 = &v10[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse];
  *(void *)uint64_t v11 = 0;
  v11[8] = 1;
  int64x2_t v12 = &v10[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
  *(void *)int64x2_t v12 = 0;
  v12[8] = 1;
  uint64_t v13 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters];
  *uint64_t v13 = xmmword_2273F5C20;
  v13[1] = xmmword_2273F5C30;
  uint64_t v14 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters];
  _OWORD *v14 = xmmword_2273F5C20;
  v14[1] = xmmword_2273F5C30;
  double v15 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  *(_OWORD *)double v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((void *)v15 + 4) = 0x3FF0000000000000;
  *((void *)v15 + 9) = 0;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  int64x2_t v16 = vdupq_n_s64(0x4341C37937E08000uLL);
  *((_OWORD *)v15 + 7) = 0u;
  *((_OWORD *)v15 + 8) = 0u;
  *((int64x2_t *)v15 + 5) = v16;
  *((_OWORD *)v15 + 6) = 0u;
  *((void *)v15 + 18) = 0x3FF0000000000000;
  *((void *)v15 + 23) = 0;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *((_OWORD *)v15 + 14) = 0u;
  *((_OWORD *)v15 + 15) = 0u;
  *((int64x2_t *)v15 + 12) = v16;
  *((_OWORD *)v15 + 13) = 0u;
  *((void *)v15 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(v15 + 264) = 0u;
  *(_OWORD *)(v15 + 280) = 0u;
  *((void *)v15 + 37) = 0;
  *((int64x2_t *)v15 + 19) = v16;
  *((_OWORD *)v15 + 20) = 0u;
  *((_OWORD *)v15 + 21) = 0u;
  *((_OWORD *)v15 + 22) = 0u;
  double v17 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  *(void *)double v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0x3FF0000000000000;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *((void *)v17 + 7) = 0;
  *((int64x2_t *)v17 + 4) = v16;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *(void *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold] = 0x3F50624DD2F1A9FCLL;
  *(void *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold] = 0x3F50624DD2F1A9FCLL;
  v40.receiver = v10;
  v40.super_class = (Class)type metadata accessor for FLSpring();
  double v18 = objc_msgSendSuper2(&v40, sel_init);
  (*(void (**)(double))((*MEMORY[0x263F8EED0] & *v18) + 0x1B0))(0.0);
  if (a4)
  {
    unint64_t v20 = specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL);
    double v19 = ((double)v20 * 1.11022302e-16 * 100.0 + 0.0) / 100.0;
    if (v20 == 0x20000000000000) {
      double v19 = 1.0;
    }
  }
  else
  {
    double v19 = *(double *)&a3;
  }
  double v21 = v19 + 1.0 - v19 + 1.0 - v19;
  double v22 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse);
  *double v22 = v21;
  *((unsigned char *)v22 + 8) = 0;
  double v23 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  double v24 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  double v25 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  double v26 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  double v27 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  *(_OWORD *)double v23 = xmmword_2273F56C0;
  _OWORD v23[2] = v21;
  v23[3] = 0.0;
  FLSpring.parameters.didset(v24, v25, v26, v27);
  if (a2) {
    double v28 = 1.79769313e308;
  }
  else {
    double v28 = *(double *)&a1;
  }
  double v29 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  double *v29 = v28;
  double v30 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  double v31 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  double v32 = v29[35] + v31;
  uint64_t v33 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v32, v28 + *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
    double v34 = v28 + *v30;
  }
  else {
    double v34 = v29[35] + v31;
  }
  if (v32 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v34);
    *((unsigned char *)v18 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    double v31 = v30[5];
  }
  double v35 = v34 - v31;
  v29[35] = v35;
  v29[30] = v35;
  v29[31] = 0.0;
  double v36 = *(double *)&a5;
  if (a6) {
    double v36 = 0.0;
  }
  *(double *)((char *)v18 + v33) = v36;
  v29[44] = v36;
  void v30[6] = v36;
  *(void *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold) = 0x3F847AE147AE147BLL;
  v29[45] = 0.01;
  v30[7] = 0.01;
  return v18;
}

void *specialized static FMPFFluidSpring.slowSpringWith(initialValue:stableValueThreshold:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7 = objc_allocWithZone((Class)type metadata accessor for FMPFFluidSpring());
  v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
  uint64_t v8 = &v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  uint64_t v9 = &v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters];
  *uint64_t v10 = xmmword_2273F5C20;
  v10[1] = xmmword_2273F5C30;
  uint64_t v11 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters];
  _OWORD *v11 = xmmword_2273F5C20;
  v11[1] = xmmword_2273F5C30;
  int64x2_t v12 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  *(_OWORD *)int64x2_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((void *)v12 + 4) = 0x3FF0000000000000;
  *((void *)v12 + 9) = 0;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  int64x2_t v13 = vdupq_n_s64(0x4341C37937E08000uLL);
  *((_OWORD *)v12 + 7) = 0u;
  *((_OWORD *)v12 + 8) = 0u;
  *((int64x2_t *)v12 + 5) = v13;
  *((_OWORD *)v12 + 6) = 0u;
  *((void *)v12 + 18) = 0x3FF0000000000000;
  *((void *)v12 + 23) = 0;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_OWORD *)v12 + 15) = 0u;
  *((int64x2_t *)v12 + 12) = v13;
  *((_OWORD *)v12 + 13) = 0u;
  *((void *)v12 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(v12 + 264) = 0u;
  *(_OWORD *)(v12 + 280) = 0u;
  *((void *)v12 + 37) = 0;
  *((int64x2_t *)v12 + 19) = v13;
  *((_OWORD *)v12 + 20) = 0u;
  *((_OWORD *)v12 + 21) = 0u;
  *((_OWORD *)v12 + 22) = 0u;
  uint64_t v14 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0x3FF0000000000000;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((void *)v14 + 7) = 0;
  *((int64x2_t *)v14 + 4) = v13;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 6) = 0u;
  *(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity] = 0;
  *(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget] = 0;
  *(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold] = 0x3F50624DD2F1A9FCLL;
  *(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold] = 0x3F50624DD2F1A9FCLL;
  v33.receiver = v7;
  v33.super_class = (Class)type metadata accessor for FLSpring();
  double v15 = objc_msgSendSuper2(&v33, sel_init);
  (*(void (**)(double))((*MEMORY[0x263F8EED0] & *v15) + 0x1B0))(0.0);
  int64x2_t v16 = (char *)v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse;
  *(void *)int64x2_t v16 = 0x4000000000000000;
  v16[8] = 0;
  double v17 = (_OWORD *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  double v18 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  double v19 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  double v20 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  double v21 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  *double v17 = xmmword_2273F56C0;
  v17[1] = xmmword_2273F5C40;
  FLSpring.parameters.didset(v18, v19, v20, v21);
  if (a2) {
    double v22 = 1.79769313e308;
  }
  else {
    double v22 = *(double *)&a1;
  }
  double v23 = (double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  *double v23 = v22;
  double v24 = (double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  double v25 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  double v26 = v23[35] + v25;
  uint64_t v27 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v26, v22 + *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
    double v28 = v22 + *v24;
  }
  else {
    double v28 = v23[35] + v25;
  }
  if (v26 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v28);
    *((unsigned char *)v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    double v25 = v24[5];
  }
  double v29 = v28 - v25;
  v23[35] = v29;
  v23[30] = v29;
  v23[31] = 0.0;
  double v30 = *(double *)&a3;
  if (a4) {
    double v30 = 0.0;
  }
  *(double *)((char *)v15 + v27) = v30;
  v23[44] = v30;
  v24[6] = v30;
  *(void *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold) = 0x3F847AE147AE147BLL;
  v23[45] = 0.01;
  v24[7] = 0.01;
  return v15;
}

void *specialized static FMPFFluidSpring.lethargicSpringWith(initialValue:stableValueThreshold:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7 = objc_allocWithZone((Class)type metadata accessor for FMPFFluidSpring());
  v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
  uint64_t v8 = &v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse];
  *(void *)uint64_t v8 = 0;
  v8[8] = 1;
  uint64_t v9 = &v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  uint64_t v10 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters];
  *uint64_t v10 = xmmword_2273F5C20;
  v10[1] = xmmword_2273F5C30;
  uint64_t v11 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters];
  _OWORD *v11 = xmmword_2273F5C20;
  v11[1] = xmmword_2273F5C30;
  int64x2_t v12 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  *(_OWORD *)int64x2_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((void *)v12 + 4) = 0x3FF0000000000000;
  *((void *)v12 + 9) = 0;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  int64x2_t v13 = vdupq_n_s64(0x4341C37937E08000uLL);
  *((_OWORD *)v12 + 7) = 0u;
  *((_OWORD *)v12 + 8) = 0u;
  *((int64x2_t *)v12 + 5) = v13;
  *((_OWORD *)v12 + 6) = 0u;
  *((void *)v12 + 18) = 0x3FF0000000000000;
  *((void *)v12 + 23) = 0;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_OWORD *)v12 + 15) = 0u;
  *((int64x2_t *)v12 + 12) = v13;
  *((_OWORD *)v12 + 13) = 0u;
  *((void *)v12 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(v12 + 264) = 0u;
  *(_OWORD *)(v12 + 280) = 0u;
  *((void *)v12 + 37) = 0;
  *((int64x2_t *)v12 + 19) = v13;
  *((_OWORD *)v12 + 20) = 0u;
  *((_OWORD *)v12 + 21) = 0u;
  *((_OWORD *)v12 + 22) = 0u;
  uint64_t v14 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0x3FF0000000000000;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((void *)v14 + 7) = 0;
  *((int64x2_t *)v14 + 4) = v13;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 6) = 0u;
  *(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity] = 0;
  *(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget] = 0;
  *(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold] = 0x3F50624DD2F1A9FCLL;
  *(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold] = 0x3F50624DD2F1A9FCLL;
  v33.receiver = v7;
  v33.super_class = (Class)type metadata accessor for FLSpring();
  double v15 = objc_msgSendSuper2(&v33, sel_init);
  (*(void (**)(double))((*MEMORY[0x263F8EED0] & *v15) + 0x1B0))(0.0);
  int64x2_t v16 = (char *)v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse;
  *(void *)int64x2_t v16 = 0x3FE3333333333333;
  v16[8] = 0;
  double v17 = (_OWORD *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  double v18 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  double v19 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  double v20 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  double v21 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  *double v17 = xmmword_2273F56C0;
  v17[1] = xmmword_2273F5C50;
  FLSpring.parameters.didset(v18, v19, v20, v21);
  if (a2) {
    double v22 = 1.79769313e308;
  }
  else {
    double v22 = *(double *)&a1;
  }
  double v23 = (double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  *double v23 = v22;
  double v24 = (double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  double v25 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  double v26 = v23[35] + v25;
  uint64_t v27 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v26, v22 + *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
    double v28 = v22 + *v24;
  }
  else {
    double v28 = v23[35] + v25;
  }
  if (v26 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v28);
    *((unsigned char *)v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    double v25 = v24[5];
  }
  double v29 = v28 - v25;
  v23[35] = v29;
  v23[30] = v29;
  v23[31] = 0.0;
  double v30 = *(double *)&a3;
  if (a4) {
    double v30 = 0.0;
  }
  *(double *)((char *)v15 + v27) = v30;
  v23[44] = v30;
  v24[6] = v30;
  *(void *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold) = 0x3F847AE147AE147BLL;
  v23[45] = 0.01;
  v24[7] = 0.01;
  return v15;
}

id @objc NSUserDefaults.fmpfDebugMode.getter(void *a1, uint64_t a2)
{
  return @objc NSUserDefaults.fmpfDebugMode.getter(a1, a2, 0x646F4D6775626564, 0xE900000000000065);
}

void @objc NSUserDefaults.fmpfDebugMode.setter(void *a1, uint64_t a2, uint64_t a3)
{
}

id @objc NSUserDefaults.fmpfBTDebugMode.getter(void *a1, uint64_t a2)
{
  return @objc NSUserDefaults.fmpfDebugMode.getter(a1, a2, 0x4D67756265447462, 0xEB0000000065646FLL);
}

void @objc NSUserDefaults.fmpfBTDebugMode.setter(void *a1, uint64_t a2, uint64_t a3)
{
}

id @objc NSUserDefaults.fmpfEcoMode.getter(void *a1, uint64_t a2)
{
  return @objc NSUserDefaults.fmpfDebugMode.getter(a1, a2, 0x65646F4D6F6365, 0xE700000000000000);
}

void @objc NSUserDefaults.fmpfEcoMode.setter(void *a1, uint64_t a2, uint64_t a3)
{
}

id @objc NSUserDefaults.fmpfDebugModeWithoutBearing.getter(void *a1, uint64_t a2)
{
  return @objc NSUserDefaults.fmpfDebugMode.getter(a1, a2, 0xD000000000000017, 0x80000002273FD260);
}

id @objc NSUserDefaults.fmpfDebugMode.getter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = self;
  id v8 = a1;
  id v9 = objc_msgSend(v7, sel_sharedInstance);
  unsigned int v10 = objc_msgSend(v9, sel_isInternalBuild);

  if (v10)
  {
    uint64_t v11 = MEMORY[0x22A677130](a3, a4);
    id v12 = objc_msgSend(v8, sel_BOOLForKey_, v11);

    id v8 = (id)v11;
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

void @objc NSUserDefaults.fmpfDebugModeWithoutBearing.setter(void *a1, uint64_t a2, uint64_t a3)
{
}

void @objc NSUserDefaults.fmpfDebugMode.setter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8 = self;
  id v9 = a1;
  id v10 = objc_msgSend(v8, sel_sharedInstance);
  objc_msgSend(v10, sel_isInternalBuild);

  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  id v12 = (id)MEMORY[0x22A677130](a4, a5);
  objc_msgSend(v9, sel_setValue_forKey_, isa, v12);
}

float @objc NSUserDefaults.fmpfBlackBackdropSigma.getter()
{
  return 50.0;
}

float @objc NSUserDefaults.fmpfBlackBackdropAlpha.getter()
{
  return 0.7;
}

float @objc NSUserDefaults.fmpfGreenBackdropSigma.getter()
{
  return 70.0;
}

float @objc NSUserDefaults.fmpfGreenBackdropAlpha.getter()
{
  return 0.9;
}

float @objc NSUserDefaults.fmpfGreenBackdropHue.getter()
{
  return 0.31;
}

float @objc NSUserDefaults.fmpfGreenBackdropSaturation.getter()
{
  return 0.67;
}

float @objc NSUserDefaults.fmpfGreenBackdropValue.getter()
{
  return 0.57;
}

uint64_t @objc NSUserDefaults.fmpfArrowDotCount.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = NSUserDefaults.fmpfArrowDotCount.getter();

  return v2;
}

uint64_t NSUserDefaults.fmpfArrowDotCount.getter()
{
  id v1 = objc_msgSend(self, sel_sharedInstance);
  unsigned int v2 = objc_msgSend(v1, sel_isInternalBuild);

  if (!v2) {
    return 150;
  }
  unint64_t v3 = (void *)MEMORY[0x22A677130](0x746F44776F727261, 0xED0000746E756F43);
  id v4 = objc_msgSend(v0, sel_valueForKey_, v3);

  if (!v4)
  {
    memset(v8, 0, sizeof(v8));
    outlined destroy of Any?((uint64_t)v8);
    return 150;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v8);
  long long v5 = (void *)MEMORY[0x22A677130](0x746F44776F727261, 0xED0000746E756F43);
  id v6 = objc_msgSend(v0, sel_integerForKey_, v5);

  return (uint64_t)v6;
}

void @objc NSUserDefaults.fmpfArrowDotCount.setter(void *a1)
{
  unsigned int v2 = self;
  id v3 = a1;
  id v4 = objc_msgSend(v2, sel_sharedInstance);
  objc_msgSend(v4, sel_isInternalBuild);

  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  id v6 = (id)MEMORY[0x22A677130](0x746F44776F727261, 0xED0000746E756F43);
  objc_msgSend(v3, sel_setValue_forKey_, isa, v6);
}

uint64_t FMPFSKPatternNode.readjustFragmentNodesComposedPositionForTape(_:)(uint64_t result, unint64_t a2)
{
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType) == 1)
  {
    id v4 = (uint64_t *)v2;
    if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config + 48) & 1) == 0
      && *(uint64_t *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config + 40) >= 1)
    {
      uint64_t v6 = result;
      uint64_t v152 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config;
      uint64_t v7 = (uint64_t *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
      swift_beginAccess();
      uint64_t v8 = *v7;
      unint64_t v9 = MEMORY[0x263F8EE78];
      v176[0] = MEMORY[0x263F8EE78];
      if ((unint64_t)v8 >> 62)
      {
        if (v8 < 0) {
          LODWORD(v2) = v8;
        }
        else {
          LODWORD(v2) = v8 & 0xFFFFFFF8;
        }
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        *(void *)&v175.f64[0] = v6;
        if (v10) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        *(void *)&v175.f64[0] = v6;
        if (v10)
        {
LABEL_6:
          if (v10 < 1)
          {
            __break(1u);
LABEL_260:
            __break(1u);
LABEL_261:
            __break(1u);
LABEL_262:
            __break(1u);
LABEL_263:
            __break(1u);
            swift_release();
            __break(1u);
LABEL_264:
            unint64_t v15 = v8;
            int64_t v13 = v158;
            id v4 = &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
            int64_t v3 = v164;
            unint64_t v9 = v154;
            unint64_t v80 = v162;
            if (!v8) {
              goto LABEL_265;
            }
LABEL_179:
            unint64_t v81 = 0;
            a2 = 0;
            unint64_t v17 = v9 & 0xC000000000000001;
            unint64_t v155 = v9 + 32;
            uint64_t v156 = v9 & 0xFFFFFFFFFFFFFF8;
            int64_t v166 = v3 + v80;
            BOOL v82 = __OFADD__(v3, v80);
            LODWORD(v163) = v82;
            unint64_t v162 = 0xC01921FB54442D18;
            unint64_t v160 = v15;
            unint64_t v157 = v9 & 0xC000000000000001;
            while (1)
            {
              if (a2 == v15) {
                goto LABEL_241;
              }
              if (v17)
              {
                id v83 = (id)MEMORY[0x22A677580](a2, v9);
              }
              else
              {
                if (a2 >= *(void *)(v156 + 16)) {
                  goto LABEL_246;
                }
                id v83 = *(id *)(v155 + 8 * a2);
              }
              uint64_t v2 = (uint64_t)v83;
              if (!objc_msgSend(v83, sel_isHidden, v148, v149))
              {

                goto LABEL_184;
              }
              char v84 = v163;
              if (v81 == v3)
              {
                unint64_t v85 = v166;
              }
              else
              {
                char v84 = 0;
                unint64_t v85 = v81;
              }
              if (v84) {
                goto LABEL_247;
              }
              if ((v85 & 0x8000000000000000) != 0) {
                goto LABEL_242;
              }
              if (v85 >= *(void *)(v165 + 16)) {
                goto LABEL_243;
              }
              unint64_t v17 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition;
              *(_OWORD *)unint64_t v17 = *(_OWORD *)(v165 + 32 + 16 * v85);
              *(unsigned char *)(v17 + 16) = 0;
              uint64_t v86 = v2 + *v4;
              if (*(unsigned char *)(v86 + 16))
              {
                char v87 = 1;
                float64x2_t v88 = *(float64x2_t *)v86;
              }
              else
              {
                double v89 = *(double *)v86;
                if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle))
                {
                  char v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  uint64_t v91 = swift_bridgeObjectRelease();
                  unint64_t v9 = v154;
                  if ((v90 & 1) == 0)
                  {
                    char v87 = *(unsigned char *)(v86 + 16);
                    float64x2_t v88 = *(float64x2_t *)v86;
                    goto LABEL_206;
                  }
                }
                else
                {
                  uint64_t v91 = swift_bridgeObjectRelease();
                }
                v175.f64[0] = *(float64_t *)(v2
                                           + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_innerPeripheralDiskRadius);
                double v92 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style);
                specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v91, 0.0, 3.14159265);
                double v94 = v93 * 0.25;
                double v95 = 2.0;
                if (v89 > 0.0) {
                  double v95 = -2.0;
                }
                __double2 v97 = __sincos_stret(v92 * (v95 * v94) + 1.57079633);
                v96.f64[0] = v97.__cosval;
                char v87 = 0;
                v96.f64[1] = v97.__sinval;
                float64x2_t v88 = vmulq_n_f64(v96, v175.f64[0]);
              }
LABEL_206:
              uint64_t v98 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition;
              *(float64x2_t *)uint64_t v98 = v88;
              *(unsigned char *)(v98 + 16) = v87;
              double v99 = 0.0;
              if ((*(unsigned char *)(v17 + 16) & 1) == 0 && (v87 & 1) == 0)
              {
                float64x2_t v170 = v88;
                float64x2_t v172 = *(float64x2_t *)v17;
                uint64_t v102 = FMPFSKPatternFragmentNode.controlPoint(with:trackOffset:)(*(double *)v17);
                char v104 = v103;
                uint64_t v105 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle;
                *(void *)&v106.f64[0] = v102;
                v106.f64[1] = v107;
                float64x2_t v168 = v106;
                double v101 = 0.0;
                uint64_t v108 = 1;
                float64x2_t v109 = v172;
                while (1)
                {
                  float64x2_t v175 = v109;
                  double v174 = (double)v108 * 0.0625;
                  double v173 = 1.0 - v174;
                  if (*(unsigned char *)(v2 + v105))
                  {
                    LODWORD(v17) = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v17) {
                      goto LABEL_218;
                    }
                    if (!*(unsigned char *)(v2 + v105) || *(unsigned char *)(v2 + v105) != 1)
                    {
                      LODWORD(v17) = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      if ((v17 & 1) == 0) {
                        goto LABEL_210;
                      }
                      goto LABEL_218;
                    }
                  }
                  swift_bridgeObjectRelease();
LABEL_218:
                  if ((v104 & 1) == 0)
                  {
                    float64x2_t v109 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v168, v174), vmulq_n_f64(v172, v173)), v173), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v170, v174), vmulq_n_f64(v168, v173)), v174));
                    goto LABEL_211;
                  }
LABEL_210:
                  float64x2_t v109 = vaddq_f64(vmulq_n_f64(v170, v174), vmulq_n_f64(v172, v173));
LABEL_211:
                  float64x2_t v110 = vsubq_f64(v109, v175);
                  double v101 = v101 + sqrt(vaddvq_f64(vmulq_f64(v110, v110)));
                  if (++v108 == 17)
                  {
                    char v100 = 0;
                    int64_t v13 = v158;
                    int64_t v3 = v164;
                    unint64_t v9 = v154;
                    goto LABEL_221;
                  }
                }
              }
              char v100 = 1;
              double v101 = 0.0;
LABEL_221:
              uint64_t v111 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength;
              *(double *)uint64_t v111 = v101;
              *(unsigned char *)(v111 + 8) = v100;
              if (*(unsigned char *)(v98 + 16) & 1) != 0 || (*(unsigned char *)(v86 + 16))
              {
                char v112 = 1;
                id v4 = &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
                unint64_t v15 = v160;
              }
              else
              {
                long double v113 = *(double *)v86;
                long double v114 = *(double *)(v86 + 8);
                long double v116 = *(double *)v98;
                long double v115 = *(double *)(v98 + 8);
                double v117 = hypot(*(long double *)v86, v114);
                double v118 = atan2(v115, v116);
                double v119 = atan2(v114, v113);
                double v120 = v119 - v118;
                if (vabdd_f64(v119, v118) > 3.14159265)
                {
                  if (v118 >= 0.0 || v119 < 0.0)
                  {
                    if (v119 < 0.0 && v118 >= 0.0) {
                      double v120 = v120 + 6.28318531;
                    }
                  }
                  else
                  {
                    double v120 = v120 + -6.28318531;
                  }
                }
                id v4 = &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
                unint64_t v15 = v160;
                char v112 = 0;
                double v99 = fabs((v117 + v117) * v120);
              }
              uint64_t v122 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength;
              *(double *)uint64_t v122 = v99;
              *(unsigned char *)(v122 + 8) = v112;

              unint64_t v81 = v85 + 1;
              if (__OFADD__(v85, 1)) {
                goto LABEL_244;
              }
              unint64_t v17 = v157;
LABEL_184:
              if (++a2 == v15) {
                goto LABEL_265;
              }
            }
          }
          uint64_t v11 = 0;
          int64_t v3 = v8 & 0xC000000000000001;
          do
          {
            if (v3) {
              id v12 = (id)MEMORY[0x22A677580](v11, v8);
            }
            else {
              id v12 = *(id *)(v8 + 8 * v11 + 32);
            }
            if ((*((unsigned char *)v12 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16) & 1) != 0
              || *((unsigned char *)v12 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) == 1)
            {
            }
            else
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            ++v11;
          }
          while (v10 != v11);
          swift_bridgeObjectRelease();
          int64_t v13 = v176[0];
          unint64_t v9 = MEMORY[0x263F8EE78];
LABEL_22:
          LODWORD(v2) = v13 < 0 || (v13 & 0x4000000000000000) != 0;
          swift_bridgeObjectRetain();
          uint64_t v14 = (void *)v13;
          int v153 = v2;
          if (v2)
          {
            uint64_t v14 = specialized _copyCollectionToContiguousArray<A>(_:)(v13);
            swift_release();
          }
          v176[0] = (uint64_t)v14;
          unint64_t v15 = 0;
          specialized MutableCollection<>.sort(by:)(v176, &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
          uint64_t v16 = v176[0];
          v176[0] = v9;
          LODWORD(v17) = v16 < 0 || (v16 & 0x4000000000000000) != 0;
          uint64_t v163 = v16;
          if (v17 == 1)
          {
            swift_retain();
            uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
            int64_t v166 = v8;
            if (v8)
            {
LABEL_32:
              if (v8 >= 1)
              {
                unint64_t v9 = 0;
                int64_t v3 = v163 & 0xC000000000000001;
                do
                {
                  if (v3) {
                    id v18 = (id)MEMORY[0x22A677580](v9, v163);
                  }
                  else {
                    id v18 = *(id *)(v163 + 8 * v9 + 32);
                  }
                  double v19 = v18;
                  if (objc_msgSend(v18, sel_isHidden))
                  {
                  }
                  else
                  {
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized ContiguousArray._endMutation()();
                  }
                  ++v9;
                }
                while (v166 != v9);
                swift_release();
                uint64_t v20 = v176[0];
LABEL_44:
                LODWORD(v2) = v20 < 0 || (v20 & 0x4000000000000000) != 0;
                uint64_t v161 = v20;
                if (v2 == 1) {
                  goto LABEL_248;
                }
                if (!*(void *)(v20 + 16))
                {
LABEL_249:
                  v176[0] = 0;
                  v176[1] = 0xE000000000000000;
                  _StringGuts.grow(_:)(66);
                  v124._object = (void *)0x80000002273FD2D0;
                  v124._uint64_t countAndFlagsBits = 0x1000000000000016;
                  String.append(_:)(v124);
                  id v125 = objc_msgSend(v4, sel_description);
                  uint64_t v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v128 = v127;

                  v129._uint64_t countAndFlagsBits = v126;
                  v129._object = v128;
                  String.append(_:)(v129);
                  swift_bridgeObjectRelease();
                  v130._object = (void *)0x80000002273FD2F0;
                  v130._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
                  String.append(_:)(v130);
                  LODWORD(v149) = 0;
                  uint64_t v148 = 377;
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
LABEL_250:
                  __break(1u);
LABEL_251:
                  __break(1u);
LABEL_252:
                  __break(1u);
LABEL_253:
                  __break(1u);
LABEL_254:
                  __break(1u);
                  goto LABEL_255;
                }
LABEL_49:
                if (v17)
                {
                  LODWORD(v17) = v163;
                  swift_bridgeObjectRetain();
                  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
                  swift_release();
                  uint64_t v20 = v161;
                }
                else
                {
                  uint64_t v21 = *(void *)(v163 + 16);
                }
                id v4 = &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
                double v22 = (double)v21;
                if (a2)
                {
                  double v23 = v22 * 0.5;
                  if (!v2) {
                    goto LABEL_54;
                  }
                }
                else
                {
                  double v23 = (1.0 - v175.f64[0]) * v22;
                  if ((v2 & 1) == 0)
                  {
LABEL_54:
                    uint64_t v24 = *(void *)(v20 + 16);
                    goto LABEL_57;
                  }
                }
                swift_bridgeObjectRetain();
                uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
                swift_release();
                uint64_t v24 = v25;
LABEL_57:
                if (v24 >= 0) {
                  uint64_t v26 = v24;
                }
                else {
                  uint64_t v26 = v24 + 1;
                }
                unint64_t v162 = v24;
                if (v153)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
                  swift_release();
                  uint64_t v24 = v162;
                }
                else
                {
                  uint64_t v8 = *(void *)(v13 + 16);
                }
                int64_t v3 = v8 - v24;
                if (__OFSUB__(v8, v24)) {
                  goto LABEL_250;
                }
                double v27 = v23 - (double)(v26 >> 1);
                if ((~*(void *)&v27 & 0x7FF0000000000000) == 0) {
                  goto LABEL_251;
                }
                if (v27 <= -9.22337204e18) {
                  goto LABEL_252;
                }
                if (v27 >= 9.22337204e18) {
                  goto LABEL_253;
                }
                if ((uint64_t)v27 < 0)
                {
                  if (v3 > 0)
                  {
                    int64_t v3 = 0;
                    if (v153) {
                      goto LABEL_71;
                    }
                    goto LABEL_74;
                  }
                }
                else if (v3 >= (uint64_t)v27)
                {
                  int64_t v3 = (uint64_t)v27;
                }
                if (v153)
                {
LABEL_71:
                  swift_retain();
                  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
LABEL_75:
                  double v28 = (void *)MEMORY[0x263F8EE78];
                  if (v2)
                  {
                    if (v2 < 1) {
                      goto LABEL_261;
                    }
                    unint64_t v9 = 0;
                    uint64_t v8 = v13 & 0xC000000000000001;
                    do
                    {
                      if (v8) {
                        double v29 = (char *)MEMORY[0x22A677580](v9, v13);
                      }
                      else {
                        double v29 = (char *)*(id *)(v13 + 8 * v9 + 32);
                      }
                      float64x2_t v175 = *(float64x2_t *)&v29[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition];
                      LODWORD(v17) = v29[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition
                                                        + 16];

                      if ((v17 & 1) == 0)
                      {
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                          double v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
                        }
                        unint64_t v17 = v28[2];
                        unint64_t v30 = v28[3];
                        a2 = v17 + 1;
                        if (v17 >= v30 >> 1) {
                          double v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v17 + 1, 1, v28);
                        }
                        v28[2] = a2;
                        *(float64x2_t *)&v28[2 * v17 + 4] = v175;
                      }
                      ++v9;
                    }
                    while (v2 != v9);
                  }
                  swift_release();
                  v176[0] = (uint64_t)v28;
                  swift_bridgeObjectRetain();
                  specialized MutableCollection<>.sort(by:)(v176, specialized _ContiguousArrayBuffer._consumeAndCreateNew());
                  if (v15) {
                    goto LABEL_308;
                  }
                  uint64_t v151 = 0;
                  int64_t v158 = v13;
                  swift_bridgeObjectRelease();
                  unint64_t v31 = v162;
                  if ((v162 & 0x8000000000000000) != 0) {
                    goto LABEL_254;
                  }
                  int64_t v164 = v3;
                  uint64_t v165 = v176[0];
                  uint64_t v32 = v161;
                  if (v162)
                  {
                    a2 = 0;
                    uint64_t v159 = v176[0] + 32;
                    int64_t v13 = 0x3FB0000000000000;
                    do
                    {
                      if (a2 == v31) {
                        goto LABEL_237;
                      }
                      if (v3 < 0) {
                        goto LABEL_238;
                      }
                      if (a2 + v3 >= *(void *)(v165 + 16)) {
                        goto LABEL_239;
                      }
                      float64x2_t v175 = *(float64x2_t *)(v159 + 16 * (a2 + v3));
                      if ((v161 & 0xC000000000000001) != 0)
                      {
                        double v35 = (unsigned char *)MEMORY[0x22A677580](a2, v32);
                      }
                      else
                      {
                        if (a2 >= *(void *)(v32 + 16)) {
                          goto LABEL_245;
                        }
                        double v35 = *(id *)(v161 + 32 + 8 * a2);
                      }
                      uint64_t v2 = (uint64_t)v35;
                      unint64_t v17 = (unint64_t)&v35[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition];
                      *(float64x2_t *)unint64_t v17 = v175;
                      *(unsigned char *)(v17 + 16) = 0;
                      unint64_t v15 = (unint64_t)&v35[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition];
                      if (v35[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16])
                      {
                        char v36 = 1;
                        float64x2_t v37 = *(float64x2_t *)v15;
                      }
                      else
                      {
                        double v38 = *(double *)v15;
                        if (v35[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle])
                        {
                          if (v35[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle] == 1) {
                            uint64_t v8 = 0xE900000000000065;
                          }
                          else {
                            uint64_t v8 = 0xE600000000000000;
                          }
                          unint64_t v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          uint64_t v39 = swift_bridgeObjectRelease();
                          if ((v9 & 1) == 0)
                          {
                            char v36 = *(unsigned char *)(v15 + 16);
                            float64x2_t v37 = *(float64x2_t *)v15;
                            goto LABEL_113;
                          }
                        }
                        else
                        {
                          uint64_t v39 = swift_bridgeObjectRelease();
                        }
                        v175.f64[0] = *(float64_t *)(v2
                                                   + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_innerPeripheralDiskRadius);
                        double v40 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style);
                        specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v39, 0.0, 3.14159265);
                        double v42 = v41 * 0.25;
                        double v43 = 2.0;
                        if (v38 > 0.0) {
                          double v43 = -2.0;
                        }
                        __double2 v45 = __sincos_stret(v40 * (v43 * v42) + 1.57079633);
                        v44.f64[0] = v45.__cosval;
                        char v36 = 0;
                        v44.f64[1] = v45.__sinval;
                        float64x2_t v37 = vmulq_n_f64(v44, v175.f64[0]);
                      }
LABEL_113:
                      uint64_t v46 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition;
                      *(float64x2_t *)uint64_t v46 = v37;
                      *(unsigned char *)(v46 + 16) = v36;
                      double v47 = 0.0;
                      if ((*(unsigned char *)(v17 + 16) & 1) == 0 && (v36 & 1) == 0)
                      {
                        float64x2_t v169 = v37;
                        float64x2_t v171 = *(float64x2_t *)v17;
                        uint64_t v50 = FMPFSKPatternFragmentNode.controlPoint(with:trackOffset:)(*(double *)v17);
                        unint64_t v9 = v51;
                        uint64_t v52 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle;
                        *(void *)&v53.f64[0] = v50;
                        v53.f64[1] = v54;
                        float64x2_t v167 = v53;
                        double v49 = 0.0;
                        uint64_t v55 = 1;
                        float64x2_t v56 = v171;
                        while (1)
                        {
                          float64x2_t v175 = v56;
                          if (!*(unsigned char *)(v2 + v52)) {
                            break;
                          }
                          if (*(unsigned char *)(v2 + v52) == 1) {
                            uint64_t v8 = 0xE900000000000065;
                          }
                          else {
                            uint64_t v8 = 0xE600000000000000;
                          }
                          LODWORD(v17) = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          if (v17) {
                            goto LABEL_128;
                          }
                          if (*(unsigned char *)(v2 + v52))
                          {
                            if (*(unsigned char *)(v2 + v52) == 1) {
                              break;
                            }
                            uint64_t v8 = 0xE600000000000000;
                          }
                          else
                          {
                            uint64_t v8 = 0xEF637241646E4165;
                          }
                          LODWORD(v17) = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          float64x2_t v59 = v169;
                          float64x2_t v60 = v175;
                          double v62 = 1.0 - (double)v55 * 0.0625;
                          double v61 = (double)v55 * 0.0625;
                          if ((v17 & 1) != 0 && (v9 & 1) == 0)
                          {
LABEL_133:
                            float64x2_t v57 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v167, v61), vmulq_n_f64(v171, v62)), v62), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v59, v61), vmulq_n_f64(v167, v62)), v61));
                            goto LABEL_118;
                          }
LABEL_117:
                          float64x2_t v57 = vaddq_f64(vmulq_n_f64(v59, v61), vmulq_n_f64(v171, v62));
LABEL_118:
                          float64x2_t v58 = vsubq_f64(v57, v60);
                          double v49 = v49 + sqrt(vaddvq_f64(vmulq_f64(v58, v58)));
                          ++v55;
                          float64x2_t v56 = v57;
                          if (v55 == 17)
                          {
                            char v48 = 0;
                            id v4 = &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
                            int64_t v3 = v164;
                            goto LABEL_135;
                          }
                        }
                        swift_bridgeObjectRelease();
LABEL_128:
                        float64x2_t v59 = v169;
                        float64x2_t v60 = v175;
                        double v62 = 1.0 - (double)v55 * 0.0625;
                        double v61 = (double)v55 * 0.0625;
                        if ((v9 & 1) == 0) {
                          goto LABEL_133;
                        }
                        goto LABEL_117;
                      }
                      char v48 = 1;
                      double v49 = 0.0;
LABEL_135:
                      uint64_t v63 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength;
                      *(double *)uint64_t v63 = v49;
                      *(unsigned char *)(v63 + 8) = v48;
                      if (*(unsigned char *)(v46 + 16) & 1) != 0 || (*(unsigned char *)(v15 + 16))
                      {
                        char v33 = 1;
                      }
                      else
                      {
                        long double v64 = *(double *)v15;
                        long double v65 = *(double *)(v15 + 8);
                        long double v67 = *(double *)v46;
                        long double v66 = *(double *)(v46 + 8);
                        double v68 = hypot(*(long double *)v15, v65);
                        double v69 = atan2(v66, v67);
                        double v70 = atan2(v65, v64);
                        double v71 = v70 - v69;
                        if (vabdd_f64(v70, v69) > 3.14159265)
                        {
                          if (v69 >= 0.0 || v70 < 0.0)
                          {
                            if (v70 < 0.0 && v69 >= 0.0) {
                              double v71 = v71 + 6.28318531;
                            }
                          }
                          else
                          {
                            double v71 = v71 + -6.28318531;
                          }
                        }
                        char v33 = 0;
                        double v47 = fabs((v68 + v68) * v71);
                      }
                      ++a2;
                      uint64_t v34 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength;
                      *(double *)uint64_t v34 = v47;
                      *(unsigned char *)(v34 + 8) = v33;

                      uint64_t v32 = v161;
                      unint64_t v31 = v162;
                    }
                    while (a2 != v162);
                  }
                  unint64_t v9 = MEMORY[0x263F8EE78];
                  v176[0] = MEMORY[0x263F8EE78];
                  int64_t v13 = v166;
                  if (!v166)
                  {
                    a2 = v163;
                    goto LABEL_160;
                  }
                  a2 = v163;
                  unint64_t v15 = v163 & 0xC000000000000001;
                  swift_retain();
                  unint64_t v17 = 4;
                  do
                  {
                    uint64_t v2 = v17 - 4;
                    if (v15) {
                      id v73 = (unsigned char *)MEMORY[0x22A677580](v17 - 4, v163);
                    }
                    else {
                      id v73 = *(id *)(v163 + 8 * v17);
                    }
                    unint64_t v9 = (unint64_t)v73;
                    unint64_t v74 = v17 - 3;
                    if (__OFADD__(v2, 1))
                    {
                      __break(1u);
LABEL_237:
                      __break(1u);
LABEL_238:
                      __break(1u);
LABEL_239:
                      __break(1u);
LABEL_240:
                      __break(1u);
LABEL_241:
                      __break(1u);
LABEL_242:
                      __break(1u);
LABEL_243:
                      __break(1u);
LABEL_244:
                      __break(1u);
LABEL_245:
                      __break(1u);
LABEL_246:
                      __break(1u);
LABEL_247:
                      __break(1u);
LABEL_248:
                      swift_retain();
                      uint64_t v123 = _CocoaArrayWrapper.endIndex.getter();
                      swift_release();
                      uint64_t v20 = v161;
                      if (!v123) {
                        goto LABEL_249;
                      }
                      goto LABEL_49;
                    }
                    if (v73[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16]) {
                      goto LABEL_262;
                    }
                    if (*(double *)&v73[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 8] < 0.0)
                    {
                      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                      uint64_t v8 = *(void *)(v176[0] + 16);
                      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized ContiguousArray._endMutation()();
                    }
                    else
                    {
                    }
                    ++v17;
                  }
                  while (v74 != v166);
                  swift_release();
                  unint64_t v9 = v176[0];
LABEL_160:
                  swift_bridgeObjectRetain();
                  if ((v9 & 0x8000000000000000) == 0)
                  {
                    uint64_t v8 = v9;
                    if ((v9 & 0x4000000000000000) == 0)
                    {
LABEL_162:
                      v176[0] = v8;
                      specialized MutableCollection<>.shuffle<A>(using:)();
                      swift_release();
                      unint64_t v15 = v176[0];
                      v176[0] = MEMORY[0x263F8EE78];
                      int64_t v13 = v158;
                      if (v166)
                      {
                        unint64_t v17 = a2 & 0xC000000000000001;
                        uint64_t v75 = 4;
                        do
                        {
                          uint64_t v2 = v75 - 4;
                          if (v17) {
                            uint64_t v76 = (char *)MEMORY[0x22A677580](v75 - 4, a2);
                          }
                          else {
                            uint64_t v76 = (char *)*(id *)(a2 + 8 * v75);
                          }
                          unint64_t v9 = (unint64_t)v76;
                          int64_t v3 = v75 - 3;
                          if (__OFADD__(v2, 1)) {
                            goto LABEL_240;
                          }
                          id v77 = (double *)&v76[*v4];
                          if ((_BYTE)v77[2]) {
                            goto LABEL_263;
                          }
                          if (v77[1] >= 0.0)
                          {
                            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                            uint64_t v8 = *(void *)(v176[0] + 16);
                            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                            specialized ContiguousArray._endMutation()();
                          }
                          else
                          {
                          }
                          ++v75;
                          BOOL v139 = v3 == v166;
                          int64_t v3 = v164;
                        }
                        while (!v139);
                        swift_release();
                        unint64_t v9 = v176[0];
                      }
                      else
                      {
                        swift_release();
                        unint64_t v9 = MEMORY[0x263F8EE78];
                      }
                      swift_bridgeObjectRetain();
                      if ((v9 & 0x8000000000000000) != 0) {
                        goto LABEL_258;
                      }
                      uint64_t v78 = (void *)v9;
                      if ((v9 & 0x4000000000000000) != 0) {
                        goto LABEL_258;
                      }
                      while (1)
                      {
                        v176[0] = (uint64_t)v78;
                        uint64_t v2 = (uint64_t)v176;
                        specialized MutableCollection<>.shuffle<A>(using:)();
                        swift_release();
                        unint64_t v79 = v176[0];
                        v176[0] = v15;
                        specialized Array.append<A>(contentsOf:)(v79, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
                        unint64_t v9 = v176[0];
                        uint64_t v154 = v176[0];
                        unint64_t v150 = (unint64_t)v176[0] >> 62;
                        if (!((unint64_t)v176[0] >> 62)) {
                          break;
                        }
                        swift_bridgeObjectRetain();
                        uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
                        swift_bridgeObjectRelease();
                        if ((v8 & 0x8000000000000000) == 0) {
                          goto LABEL_264;
                        }
                        __break(1u);
LABEL_258:
                        uint64_t v78 = specialized _copyCollectionToContiguousArray<A>(_:)(v9);
                        swift_release();
                      }
                      unint64_t v15 = *(void *)((v176[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
                      unint64_t v80 = v162;
                      if (v15) {
                        goto LABEL_179;
                      }
LABEL_265:
                      swift_release();
                      swift_release();
                      if (*(unsigned char *)(v152 + 16) == 1)
                      {
                        swift_bridgeObjectRelease();
                        uint64_t v131 = v151;
                        goto LABEL_292;
                      }
                      uint64_t v132 = *(void *)(v152 + 8);
                      uint64_t v131 = v151;
                      if (v150)
                      {
                        unint64_t v134 = swift_bridgeObjectRetain();
                        uint64_t v133 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v134);
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        uint64_t v133 = v154 & 0xFFFFFFFFFFFFFF8;
                        swift_bridgeObjectRetain();
                      }
                      v176[0] = v133;
                      specialized MutableCollection<>.sort(by:)(v176, &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
                      if (v151) {
                        goto LABEL_308;
                      }
                      swift_bridgeObjectRelease();
                      uint64_t v135 = v176[0];
                      if (v176[0] < 0 || (v176[0] & 0x4000000000000000) != 0) {
                        goto LABEL_286;
                      }
                      uint64_t v136 = *(void *)(v176[0] + 16);
                      if (v136)
                      {
                        while (1)
                        {
                          uint64_t v137 = v132 + 1;
                          if (__OFADD__(v132, 1)) {
                            goto LABEL_288;
                          }
                          if (v132 != -1) {
                            break;
                          }
LABEL_289:
                          __break(1u);
LABEL_290:
                          int64_t v13 = v158;
                          if (!v136) {
                            goto LABEL_291;
                          }
                        }
                        uint64_t v132 = 0;
                        while (1)
                        {
                          BOOL v139 = v132 == 0x8000000000000000 && v137 == -1;
                          if (v139) {
                            break;
                          }
                          if ((v135 & 0xC000000000000001) != 0) {
                            v138 = (unsigned char *)MEMORY[0x22A677580](v132, v135);
                          }
                          else {
                            v138 = *(id *)(v135 + 8 * v132 + 32);
                          }
                          v138[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_useAlternateScaling] = v132 % v137 == 0;

                          ++v132;
                          int64_t v13 = v158;
                          if (v136 == v132) {
                            goto LABEL_291;
                          }
                        }
                        __break(1u);
LABEL_286:
                        swift_bridgeObjectRetain();
                        uint64_t v136 = _CocoaArrayWrapper.endIndex.getter();
                        swift_release();
                        if ((v136 & 0x8000000000000000) == 0) {
                          goto LABEL_290;
                        }
                        __break(1u);
LABEL_288:
                        __break(1u);
                        goto LABEL_289;
                      }
LABEL_291:
                      swift_release();
LABEL_292:
                      swift_bridgeObjectRetain();
                      v140 = (void *)v13;
                      if (v153)
                      {
                        v140 = specialized _copyCollectionToContiguousArray<A>(_:)(v13);
                        swift_release();
                      }
                      v176[0] = (uint64_t)v140;
                      specialized MutableCollection<>.sort(by:)(v176);
                      if (v131) {
                        goto LABEL_308;
                      }
                      swift_release();
                      uint64_t v141 = v176[0];
                      if (v176[0] < 0 || (v176[0] & 0x4000000000000000) != 0)
                      {
                        swift_bridgeObjectRetain();
                        uint64_t v142 = _CocoaArrayWrapper.endIndex.getter();
                        swift_release();
                        swift_retain();
                        uint64_t v143 = _CocoaArrayWrapper.endIndex.getter();
                        if (v143) {
                          goto LABEL_298;
                        }
                      }
                      else
                      {
                        uint64_t v142 = *(void *)(v176[0] + 16);
                        swift_retain();
                        uint64_t v143 = v142;
                        if (v142)
                        {
LABEL_298:
                          if (v143 >= 1)
                          {
                            uint64_t v144 = 0;
                            double v145 = 0.0;
                            do
                            {
                              if ((v141 & 0xC000000000000001) != 0) {
                                uint64_t v146 = (char *)MEMORY[0x22A677580](v144, v141);
                              }
                              else {
                                uint64_t v146 = (char *)*(id *)(v141 + 8 * v144 + 32);
                              }
                              ++v144;
                              uint64_t v147 = &v146[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationTimingFunction];
                              *(void *)uint64_t v147 = 0;
                              *(float64x2_t *)(v147 + 8) = vmulq_n_f64((float64x2_t)xmmword_2273F5C80, 1.0 - v145);
                              *((void *)v147 + 3) = 0x3FF0000000000000;
                              v147[32] = 0;

                              double v145 = 1.0 / (double)v142 + v145;
                            }
                            while (v143 != v144);
                            return swift_release_n();
                          }
                          __break(1u);
LABEL_308:
                          double result = swift_release();
                          __break(1u);
                          return result;
                        }
                      }
                      return swift_release_n();
                    }
                  }
LABEL_255:
                  uint64_t v8 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v9);
                  swift_release();
                  goto LABEL_162;
                }
LABEL_74:
                uint64_t v2 = *(void *)(v13 + 16);
                swift_retain();
                goto LABEL_75;
              }
              goto LABEL_260;
            }
          }
          else
          {
            uint64_t v8 = *(void *)(v16 + 16);
            swift_retain();
            int64_t v166 = v8;
            if (v8) {
              goto LABEL_32;
            }
          }
          swift_release();
          uint64_t v20 = MEMORY[0x263F8EE78];
          goto LABEL_44;
        }
      }
      swift_bridgeObjectRelease();
      int64_t v13 = MEMORY[0x263F8EE78];
      goto LABEL_22;
    }
  }
  return result;
}

Swift::Void __swiftcall FMPFSKPatternNode.readjustFragmentNodesPeripheralPositionForTape()()
{
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode), sel_position);
  *(double *)&uint64_t v2 = COERCE_DOUBLE(FMPFSKPatternNode.visibleTrackOffsets(center:)(-v1));
  if ((v4 & 1) == 0)
  {
    double v5 = *(double *)&v2;
    double v6 = v3;
    uint64_t v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
    swift_beginAccess();
    uint64_t v8 = *v7;
    if ((unint64_t)*v7 >> 62) {
      goto LABEL_58;
    }
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v9)
    {
      while (v9 >= 1)
      {
        uint64_t v10 = 0;
        double v11 = (v5 + v6) * 0.5;
        double v6 = 4.45014772e-308;
        unint64_t v12 = v8 & 0xC000000000000001;
        uint64_t v82 = v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style;
        uint64_t v81 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius;
        uint64_t v83 = v8 + 32;
        int64_t v13 = &selRef_contextMenuNeedsUpdate;
        double v14 = -0.5;
        double v15 = 0.5;
        double v75 = 6.28318531;
        unint64_t v80 = v8 & 0xC000000000000001;
        uint64_t v78 = v8;
        uint64_t v79 = v0;
        uint64_t v77 = v9;
        double v76 = v11;
        while (1)
        {
          if (v12) {
            double v18 = COERCE_DOUBLE(MEMORY[0x22A677580](v10, v8));
          }
          else {
            *(void *)&double v18 = *(id *)(v83 + 8 * v10);
          }
          double v5 = v18;
          if ((objc_msgSend(*(id *)&v18, v13[424], *(void *)&v75) & 1) == 0)
          {
            double v19 = (double *)(*(void *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
            if ((*(unsigned char *)(*(void *)&v5
                           + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition
                           + 16) & 1) == 0)
              break;
          }
LABEL_8:

          if (++v10 == v9) {
            goto LABEL_59;
          }
        }
        if (v11 <= v19[1])
        {
          do
          {
            unint64_t v87 = 0;
            uint64_t v20 = MEMORY[0x22A6785F0](&v87, 8);
          }
          while (0x20000000000001 * v87 < 0x1FFFFFFFFFF801);
          unint64_t v24 = (v87 * (unsigned __int128)0x20000000000001uLL) >> 64;
          double v23 = 3.14159265;
          if (v24 != 0x20000000000000) {
            double v23 = (double)v24 * 1.11022302e-16 * 3.14159265 + 0.0;
          }
        }
        else
        {
          do
          {
            unint64_t v87 = 0;
            uint64_t v20 = MEMORY[0x22A6785F0](&v87, 8);
          }
          while (0x20000000000001 * v87 < 0x1FFFFFFFFFF801);
          unint64_t v21 = (v87 * (unsigned __int128)0x20000000000001uLL) >> 64;
          double v22 = (double)v21 * 1.11022302e-16 * 3.14159265 + 2.22044605e-16;
          if (v21 == 0x20000000000000) {
            double v22 = 3.14159265;
          }
          double v23 = -v22;
        }
        double v25 = *(double *)(v82 + 72);
        double v26 = v25 * v14;
        double v27 = v25 * v15;
        if (v26 <= v27)
        {
          specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v20, v26, v27);
          double v29 = *(double *)(v0 + v81) * (1.0 - v28);
          __double2 v30 = __sincos_stret(v23);
          double v31 = v30.__cosval * v29;
          uint64_t v32 = (double *)(*(void *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
          double *v32 = v30.__cosval * v29;
          v32[1] = v30.__sinval * v29;
          *((unsigned char *)v32 + 16) = 0;
          if (*(unsigned char *)(*(void *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle))
          {
            char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v34 = swift_bridgeObjectRelease();
            double v6 = 4.45014772e-308;
            if ((v33 & 1) == 0)
            {
              double v35 = *v32;
              double v36 = v32[1];
              char v37 = *((unsigned char *)v32 + 16);
              goto LABEL_30;
            }
          }
          else
          {
            uint64_t v34 = swift_bridgeObjectRelease();
          }
          double v38 = *(double *)(*(void *)&v5
                          + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_innerPeripheralDiskRadius);
          double v39 = *(double *)(*(void *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style);
          specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v34, 0.0, 3.14159265);
          double v41 = v40 * 0.25;
          double v42 = 2.0;
          if (v31 > 0.0) {
            double v42 = -2.0;
          }
          __double2 v43 = __sincos_stret(v39 * (v42 * v41) + 1.57079633);
          char v37 = 0;
          double v35 = v38 * v43.__cosval;
          double v36 = v38 * v43.__sinval;
LABEL_30:
          float64x2_t v44 = (char *)(*(void *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition);
          *(double *)float64x2_t v44 = v35;
          *((double *)v44 + 1) = v36;
          v44[16] = v37;
          double v45 = 0.0;
          if ((_BYTE)v19[2] & 1) != 0 || (v37)
          {
            char v46 = 1;
            double v47 = 0.0;
LABEL_45:
            long double v65 = (double *)(*(void *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength);
            *long double v65 = v47;
            *((unsigned char *)v65 + 8) = v46;
            if (v44[16] & 1) != 0 || ((_BYTE)v32[2])
            {
              char v16 = 1;
              unint64_t v12 = v80;
              int64_t v13 = &selRef_contextMenuNeedsUpdate;
            }
            else
            {
              long double v66 = *v32;
              long double v67 = v32[1];
              long double v69 = *(double *)v44;
              long double v68 = *((double *)v44 + 1);
              double v70 = hypot(*v32, v67);
              double v71 = atan2(v68, v69);
              double v72 = atan2(v67, v66);
              double v73 = v72 - v71;
              if (vabdd_f64(v72, v71) > 3.14159265)
              {
                if (v71 >= 0.0 || v72 < 0.0)
                {
                  if (v72 < 0.0 && v71 >= 0.0) {
                    double v73 = v73 + v75;
                  }
                }
                else
                {
                  double v73 = v73 + -6.28318531;
                }
              }
              unint64_t v12 = v80;
              int64_t v13 = &selRef_contextMenuNeedsUpdate;
              double v14 = -0.5;
              double v15 = 0.5;
              char v16 = 0;
              double v45 = fabs((v70 + v70) * v73);
            }
            unint64_t v17 = (double *)(*(void *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength);
            *unint64_t v17 = v45;
            *((unsigned char *)v17 + 8) = v16;
            goto LABEL_8;
          }
          double v85 = v36;
          double v86 = v35;
          double v49 = *v19;
          double v48 = v19[1];
          *(double *)&uint64_t v50 = COERCE_DOUBLE(FMPFSKPatternFragmentNode.controlPoint(with:trackOffset:)(*v19));
          char v52 = v51;
          uint64_t v53 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle;
          double v84 = *(double *)&v50;
          double v55 = v54;
          double v47 = 0.0;
          double v56 = v48;
          double v57 = v49;
          uint64_t v58 = 1;
          while (2)
          {
            double v61 = (double)v58 * 0.0625;
            double v62 = 1.0 - v61;
            if (!*(unsigned char *)(*(void *)&v5 + v53))
            {
LABEL_40:
              swift_bridgeObjectRelease();
              goto LABEL_42;
            }
            char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v63) {
              goto LABEL_42;
            }
            if (*(unsigned char *)(*(void *)&v5 + v53) && *(unsigned char *)(*(void *)&v5 + v53) == 1) {
              goto LABEL_40;
            }
            char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v64)
            {
LABEL_42:
              if ((v52 & 1) == 0)
              {
                double v59 = v62 * (v61 * v84 + v57 * v62) + v61 * (v86 * v61 + v62 * v84);
                double v60 = v62 * (v61 * v55 + v56 * v62) + v61 * (v85 * v61 + v62 * v55);
LABEL_35:
                double v47 = v47 + sqrt((v60 - v48) * (v60 - v48) + (v59 - v49) * (v59 - v49));
                ++v58;
                double v48 = v60;
                double v49 = v59;
                if (v58 == 17)
                {
                  char v46 = 0;
                  uint64_t v8 = v78;
                  uint64_t v0 = v79;
                  uint64_t v9 = v77;
                  double v11 = v76;
                  double v6 = 4.45014772e-308;
                  double v14 = -0.5;
                  double v15 = 0.5;
                  double v45 = 0.0;
                  goto LABEL_45;
                }
                continue;
              }
            }
            break;
          }
          double v59 = v86 * v61 + v57 * v62;
          double v60 = v85 * v61 + v56 * v62;
          goto LABEL_35;
        }
        __break(1u);
LABEL_58:
        swift_bridgeObjectRetain_n();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        if (!v9) {
          goto LABEL_59;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_59:
      swift_bridgeObjectRelease_n();
    }
  }
}

void FMPFSKPatternNode.setupArrowChildNodes(conformationFactor:)(void *a1, char a2)
{
  double v3 = v2;
  double v5 = self;
  id v6 = objc_msgSend(v5, sel_standardUserDefaults);
  unsigned int v162 = objc_msgSend(v6, sel_fmpfDebugMode);

  if (a2)
  {
    a1 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor];
    char v158 = v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor + 8];
  }
  else
  {
    char v158 = 0;
  }
  uint64_t v7 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDebugNode];
  id v8 = objc_msgSend(v7, sel_children);
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for SKNode);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v156 = *(id *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode];
  id v10 = objc_msgSend(v156, sel_children);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v167[3] = v9;
  specialized Array.append<A>(contentsOf:)(v11, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
  unint64_t v12 = v9;
  int64_t v13 = (unint64_t *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes];
  swift_beginAccess();
  unint64_t v14 = *v13;
  if (*v13 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    unint64_t v15 = v14;
  }
  swift_bridgeObjectRelease();
  v167[0] = v12;
  specialized Array.append<A>(contentsOf:)(v15, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (!v16) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v16) {
      goto LABEL_16;
    }
  }
  if (v16 < 1)
  {
    __break(1u);
    goto LABEL_108;
  }
  for (uint64_t i = 0; i != v16; ++i)
  {
    if ((v12 & 0xC000000000000001) != 0) {
      id v18 = (id)MEMORY[0x22A677580](i, v12);
    }
    else {
      id v18 = *(id *)(v12 + 8 * i + 32);
    }
    double v19 = v18;
    objc_msgSend(v18, sel_removeFromParent);
  }
LABEL_16:
  swift_bridgeObjectRelease_n();
  *int64_t v13 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  double v20 = *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_sceneSize];
  if (*(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_sceneSize + 8] < v20) {
    double v20 = *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_sceneSize + 8];
  }
  unint64_t v21 = &v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style];
  double v22 = *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style];
  if (v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 8]) {
    double v22 = 1.0;
  }
  double v23 = v20 * v22;
  double v24 = *((double *)v21 + 2);
  long double v25 = *((double *)v21 + 3);
  double v26 = v20 * v22 - v24;
  double v27 = v24 + 2.22044605e-16;
  uint64_t v154 = &v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style];
  if (v24 + 2.22044605e-16 <= v20 * v22 * *((double *)v21 + 4)) {
    double v27 = v23 * *((double *)v21 + 4);
  }
  double v149 = *((double *)v21 + 2);
  double v163 = v27 * 0.5;
  double v28 = v27 * 0.5 + v24 * -0.5;
  double v29 = 0.0 - v28;
  double v161 = v28 / tan(v25);
  double v30 = v26 * 0.5 - v161;
  double v31 = v28 + 0.0;
  double v32 = cos(v25);
  objc_msgSend(v156, sel_addChild_, v7);
  char v33 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasPatternSpinesNode];
  objc_msgSend(v7, sel_addChild_, v33);
  id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824C0]), sel_init);
  uint64_t v151 = v3;
  objc_msgSend(v34, sel_moveToPoint_, 0.0, v26 * -0.5);
  objc_msgSend(v34, sel_addLineToPoint_, 0.0, v26 * 0.5);
  objc_msgSend(v34, sel_closePath);
  type metadata accessor for FMPFSKShapeNode();
  uint64_t v144 = v34;
  id v35 = objc_msgSend(v34, sel_CGPath);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v37 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v35);

  double v38 = self;
  id v39 = v37;
  id v40 = objc_msgSend(v38, sel_whiteColor);
  objc_msgSend(v39, sel_setStrokeColor_, v40);

  objc_msgSend(v39, sel_setLineCap_, 1);
  uint64_t v41 = one-time initialization token for default;
  id v42 = v39;
  if (v41 != -1) {
    swift_once();
  }
  objc_msgSend(v42, sel_setAlpha_, *(double *)&qword_26817C6B8);

  uint64_t v143 = v42;
  objc_msgSend(v33, sel_addChild_, v42);
  id v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824C0]), sel_init);
  objc_msgSend(v43, sel_moveToPoint_, v29, v30);
  objc_msgSend(v43, sel_addLineToPoint_, 0.0, v26 * 0.5);
  objc_msgSend(v43, sel_closePath);
  uint64_t v142 = v43;
  id v44 = objc_msgSend(v43, sel_CGPath);
  double v45 = v33;
  id v46 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v44);

  id v47 = v46;
  id v48 = objc_msgSend(v38, sel_whiteColor);
  objc_msgSend(v47, sel_setStrokeColor_, v48);

  objc_msgSend(v47, sel_setLineCap_, 1);
  objc_msgSend(v47, sel_setAlpha_, *(double *)&qword_26817C6B8);
  uint64_t v141 = v47;
  objc_msgSend(v45, sel_addChild_, v47);
  id v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824C0]), sel_init);
  objc_msgSend(v49, sel_moveToPoint_, v31, v30);
  objc_msgSend(v49, sel_addLineToPoint_, 0.0, v26 * 0.5);
  objc_msgSend(v49, sel_closePath);
  v140 = v49;
  id v50 = objc_msgSend(v49, sel_CGPath);
  id v51 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v50);

  id v52 = v51;
  id v53 = objc_msgSend(v38, sel_whiteColor);
  objc_msgSend(v52, sel_setStrokeColor_, v53);

  objc_msgSend(v52, sel_setLineCap_, 1);
  objc_msgSend(v52, sel_setAlpha_, *(double *)&qword_26817C6B8);
  id v148 = v45;
  BOOL v139 = v52;
  objc_msgSend(v45, sel_addChild_, v52);
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
  v138.super.Class isa = UIBezierPath.init(fmpfRectangleCentered:size:)((CGPoint)0, (CGSize)__PAIR128__(*(unint64_t *)&v23, v163 + v163)).super.isa;
  id v54 = [(objc_class *)v138.super.isa CGPath];
  id v55 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v54);

  id v56 = v55;
  id v57 = objc_msgSend(v38, sel_whiteColor);
  objc_msgSend(v56, sel_setStrokeColor_, v57);

  objc_msgSend(v56, sel_setAlpha_, *(double *)&qword_26817C6B8);
  objc_msgSend(v7, sel_addChild_, v56);
  uint64_t v58 = *(void **)&v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode];
  uint64_t v147 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode;
  *(void *)&v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode] = v56;
  id v137 = v56;

  uint64_t v164 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius;
  id v136 = objc_msgSend(self, sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, 0.0, 0.0, *(double *)&v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius], -3.14159265, 3.14159265);
  id v59 = objc_msgSend(v136, sel_CGPath);
  id v60 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v59);

  id v61 = v60;
  id v150 = v38;
  id v62 = objc_msgSend(v38, sel_whiteColor);
  objc_msgSend(v61, sel_setStrokeColor_, v62);

  objc_msgSend(v61, (SEL)&selRef_sendPressEnded_, *(double *)&qword_26817C6B8);
  objc_msgSend(v61, sel_setZPosition_, -4.4408921e-16);
  objc_msgSend(v7, sel_addChild_, v61);
  unint64_t v63 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode;
  uint64_t v64 = *(void *)&v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode];
  *(void *)&v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode] = v61;
  unint64_t v65 = (unint64_t)v61;

  id v66 = objc_msgSend(v5, sel_standardUserDefaults);
  id v67 = objc_msgSend(v66, sel_fmpfArrowDotCount);

  if (__OFSUB__(v67, 1))
  {
    __break(1u);
    goto LABEL_45;
  }
  double v68 = fmax((v26 + v161 / v32 + v161 / v32) / (double)((unint64_t)v67 - 1), 2.22044605e-16);
  double v69 = round(v161 / v32 / v68);
  if ((~*(void *)&v69 & 0x7FF0000000000000) == 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v69 <= -9.22337204e18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v69 >= 9.22337204e18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  double v70 = (double *)((uint64_t)v69 + 1);
  if (__OFADD__((uint64_t)v69, 1))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  double v71 = round(v26 / v68);
  if ((~*(void *)&v71 & 0x7FF0000000000000) == 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v71 <= -9.22337204e18)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v71 >= 9.22337204e18)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v72 = (uint64_t)v71 + 1;
  if (__OFADD__((uint64_t)v71, 1))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  unint64_t v145 = v63;
  uint64_t v153 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_explodedDiskRadius;
  uint64_t v152 = &v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor];
  id v67 = specialized FMPFSKPatternNode.arrowFragmentNodesWith(spineBottom:spineTop:dotCount:ignoreTop:dotDiameter:explodedDiskRadius:peripheralDiskRadius:color:conformedToExplodedFactor:conformationFactor:startIndex:)(v70, 1uLL, (void *)static FMPFSKPatternNodeCommonStyle.default, *(void *)&v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor], v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor + 8], (uint64_t)a1, v158, 0, v29, v30, 0.0, v26 * 0.5, *(double *)&v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_explodedDiskRadius], *(double *)&v151[v164]);
  unint64_t v63 = v73;
  double v161 = *(double *)&OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode;
  objc_msgSend(*(id *)&v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode], sel_addChild_, v67);
  uint64_t v135 = (void *)v65;
  uint64_t v146 = (double *)v72;
  uint64_t v64 = (uint64_t)v70;
  if (!(v63 >> 62))
  {
    uint64_t v74 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v166 = v63;
    if (!v74) {
      goto LABEL_54;
    }
    goto LABEL_35;
  }
LABEL_53:
  swift_bridgeObjectRetain();
  uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t v166 = v63;
  if (!v74) {
    goto LABEL_54;
  }
LABEL_35:
  if (v74 < 1)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  uint64_t v75 = 0;
  unint64_t v65 = v63 & 0xC000000000000001;
  do
  {
    if (v65) {
      id v76 = (id)MEMORY[0x22A677580](v75, v63);
    }
    else {
      id v76 = *(id *)(v63 + 8 * v75 + 32);
    }
    uint64_t v77 = v76;
    swift_beginAccess();
    id v78 = v77;
    MEMORY[0x22A677220]();
    if (*(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v75;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

    unint64_t v63 = v166;
  }
  while (v74 != v75);
LABEL_54:
  id v133 = v67;
  swift_bridgeObjectRelease();
  id v79 = specialized FMPFSKPatternNode.arrowFragmentNodesWith(spineBottom:spineTop:dotCount:ignoreTop:dotDiameter:explodedDiskRadius:peripheralDiskRadius:color:conformedToExplodedFactor:conformationFactor:startIndex:)((double *)v64, 1uLL, (void *)static FMPFSKPatternNodeCommonStyle.default, *(void *)v152, v152[8], (uint64_t)a1, v158, v64, v31, v30, 0.0, v26 * 0.5, *(double *)&v151[v153], *(double *)&v151[v164]);
  unint64_t v81 = v80;
  unint64_t v134 = v79;
  objc_msgSend(*(id *)&v151[*(void *)&v161], sel_addChild_);
  if (v81 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
    if (!v82) {
      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v82 = *(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v82) {
      goto LABEL_66;
    }
  }
  if (v82 < 1)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  uint64_t v83 = 0;
  do
  {
    if ((v81 & 0xC000000000000001) != 0) {
      id v84 = (id)MEMORY[0x22A677580](v83, v81);
    }
    else {
      id v84 = *(id *)(v81 + 8 * v83 + 32);
    }
    double v85 = v84;
    swift_beginAccess();
    id v86 = v85;
    MEMORY[0x22A677220]();
    unint64_t v65 = *(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v65 >= *(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v83;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  while (v82 != v83);
LABEL_66:
  swift_bridgeObjectRelease();
  if (v64 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    id v87 = specialized FMPFSKPatternNode.arrowFragmentNodesWith(spineBottom:spineTop:dotCount:ignoreTop:dotDiameter:explodedDiskRadius:peripheralDiskRadius:color:conformedToExplodedFactor:conformationFactor:startIndex:)(v146, 0, (void *)static FMPFSKPatternNodeCommonStyle.default, *(void *)v152, v152[8], (uint64_t)a1, v158, 2 * v64, 0.0, v26 * -0.5, 0.0, v26 * 0.5, *(double *)&v151[v153], *(double *)&v151[v164]);
    unint64_t v65 = v88;
    a1 = v87;
    objc_msgSend(*(id *)&v151[*(void *)&v161], sel_addChild_);
    if (!(v65 >> 62))
    {
      uint64_t v89 = *(void *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      double v90 = v149;
      if (v89) {
        goto LABEL_69;
      }
      goto LABEL_80;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
  double v90 = v149;
  if (v89)
  {
LABEL_69:
    if (v89 >= 1)
    {
      uint64_t v91 = 0;
      do
      {
        if ((v65 & 0xC000000000000001) != 0) {
          id v92 = (id)MEMORY[0x22A677580](v91, v65);
        }
        else {
          id v92 = *(id *)(v65 + 8 * v91 + 32);
        }
        double v93 = v92;
        swift_beginAccess();
        id v94 = v93;
        MEMORY[0x22A677220]();
        if (*(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v91;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
      }
      while (v89 != v91);
      goto LABEL_80;
    }
LABEL_110:
    __break(1u);
    return;
  }
LABEL_80:
  swift_bridgeObjectRelease();
  objc_msgSend(v156, sel_addChild_, *(void *)&v151[*(void *)&v161]);
  if (v162) {
    id v95 = objc_msgSend(v150, sel_yellowColor);
  }
  else {
    id v95 = (id)qword_26817C6A8;
  }
  float64x2_t v96 = v95;
  uint64_t v97 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode;
  uint64_t v98 = *(void **)&v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode];
  if (v98) {
    objc_msgSend(v98, sel_removeFromParent);
  }
  uint64_t v99 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType;
  LOBYTE(v167[0]) = v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType];
  uint64_t v100 = *(void *)&v151[v164];
  uint64_t v101 = *((void *)v154 + 14);
  uint64_t v102 = (objc_class *)type metadata accessor for FMPFSKPeripheralDotNode();
  objc_allocWithZone(v102);
  id v159 = v96;
  char v103 = FMPFSKPeripheralDotNode.init(experienceType:name:dotDiameter:color:diskRadius:dotScale:angle:opacity:offset:)((unsigned __int8 *)v167, 1852796750, 0xE400000000000000, v96, v100, 0, v101, 0, v90, 0, 0, 0x3FF0000000000000, 0, 0, 0, 1);
  objc_msgSend(v151, sel_addChild_, v103);
  objc_msgSend(*(id *)&v103[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode], sel_removeFromParent);
  char v104 = *(void **)&v151[v97];
  *(void *)&v151[v97] = v103;
  unint64_t v157 = v103;

  if (v162) {
    id v105 = objc_msgSend(v150, sel_purpleColor);
  }
  else {
    id v105 = (id)qword_26817C6B0;
  }
  float64x2_t v106 = v105;
  uint64_t v107 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode;
  uint64_t v108 = *(void **)&v151[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode];
  if (v108) {
    objc_msgSend(v108, sel_removeFromParent);
  }
  LOBYTE(v167[0]) = v151[v99];
  uint64_t v109 = *(void *)&v151[v164];
  uint64_t v110 = *((void *)v154 + 12);
  objc_allocWithZone(v102);
  id v155 = v106;
  uint64_t v111 = FMPFSKPeripheralDotNode.init(experienceType:name:dotDiameter:color:diskRadius:dotScale:angle:opacity:offset:)((unsigned __int8 *)v167, 0x6565746E696F50, 0xE700000000000000, v106, v109, 0, v110, 0, v90, 0, 0, 0x3FF0000000000000, 0, 0, 0, 1);
  objc_msgSend(v151, sel_addChild_, v111);
  char v112 = *(void **)&v151[v107];
  *(void *)&v151[v107] = v111;
  uint64_t v165 = v111;

  uint64_t v113 = v162 ^ 1;
  objc_msgSend(v7, sel_setHidden_, v113);
  objc_msgSend(*(id *)&v151[v147], sel_setHidden_, v113);
  objc_msgSend(*(id *)&v151[v145], sel_setHidden_, v113);
  id v114 = objc_msgSend(v148, sel_children);
  unint64_t v115 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v115 >> 62) {
    goto LABEL_102;
  }
  uint64_t v116 = *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v116; uint64_t v116 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v117 = 4;
    uint64_t v118 = 0;
    if ((v115 & 0xC000000000000001) != 0)
    {
LABEL_93:
      id v119 = (id)MEMORY[0x22A677580](v118, v115);
      goto LABEL_95;
    }
    while (1)
    {
      id v119 = *(id *)(v115 + 8 * v117);
LABEL_95:
      double v120 = v119;
      BOOL v121 = __OFADD__(v118, 1);
      uint64_t v122 = v118 + 1;
      if (v121) {
        break;
      }
      self;
      uint64_t v123 = (void *)swift_dynamicCastObjCClass();
      if (v123) {
        objc_msgSend(v123, sel_setLineWidth_, 1.0);
      }

      if (v122 == v116) {
        goto LABEL_103;
      }
      uint64_t v118 = ++v117 - 4;
      if ((v115 & 0xC000000000000001) != 0) {
        goto LABEL_93;
      }
    }
    __break(1u);
LABEL_102:
    swift_bridgeObjectRetain();
  }
LABEL_103:
  swift_bridgeObjectRelease_n();
  objc_msgSend(*(id *)&v151[*(void *)&v161], sel_setHidden_, 0);
  if (v162)
  {
    id v124 = objc_msgSend(v150, sel_yellowColor);
    id v125 = objc_msgSend(v124, sel_colorWithAlphaComponent_, 0.75);

    uint64_t v126 = v157;
    specialized FMPFSKPeripheralDotNode.renderingColor.setter(v125);

    id v127 = objc_msgSend(v150, sel_purpleColor);
    id v128 = objc_msgSend(v127, sel_colorWithAlphaComponent_, 0.75);

    Swift::String v129 = v133;
    Swift::String v130 = v159;
    uint64_t v131 = v155;
  }
  else
  {
    Swift::String v130 = v159;
    id v132 = v159;
    uint64_t v126 = v157;
    specialized FMPFSKPeripheralDotNode.renderingColor.setter(v132);

    uint64_t v131 = v155;
    id v128 = v155;
    Swift::String v129 = v133;
  }
  specialized FMPFSKPeripheralDotNode.renderingColor.setter(v128);

  objc_msgSend(v126, sel_setHidden_, 0);
  objc_msgSend(v165, sel_setHidden_, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2);
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = a2(v4);
  }
  uint64_t v5 = *(void *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  *a1 = v4;
  return result;
}

uint64_t FMPFSKPatternNode.visibleTrackOffsets(center:)(double a1)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackTop + 16)) {
    return 0;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackBottom + 16)) {
    return 0;
  }
  uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config + 48)) {
    return 0;
  }
  if (__OFSUB__(*v2, 1))
  {
    __break(1u);
  }
  else
  {
    double v4 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackTop + 8);
    double v5 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackBottom + 8);
    double v6 = (v4 - v5) / (double)(*v2 - 1) * (double)(uint64_t)v2[5] * 0.5;
    if (v6 + a1 < v4) {
      double v4 = v6 + a1;
    }
    return *(void *)&v4;
  }
  return result;
}

void FMPFSKPatternNode.setupTapeChildNodes(conformationFactor:)(uint64_t a1, char a2)
{
  double v4 = v2;
  id v7 = objc_msgSend(self, sel_standardUserDefaults);
  id v8 = (char **)objc_msgSend(v7, sel_fmpfDebugMode);

  if (a2)
  {
    uint64_t v95 = *(void *)(*(void *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor);
    char v92 = *(unsigned char *)(*(void *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor + 8);
  }
  else
  {
    uint64_t v95 = a1;
    char v92 = 0;
  }
  id v97 = *(id *)(*(void *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDebugNode);
  id v9 = objc_msgSend(v97, sel_children);
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for SKNode);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v11 = *(void *)(*(void *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode);
  id v12 = objc_msgSend((id)v11, sel_children);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array.append<A>(contentsOf:)(v13, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
  unint64_t v14 = v10;
  unint64_t v15 = (unint64_t *)(*(void *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  unint64_t v16 = *v15;
  if (*v15 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v17 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    unint64_t v17 = v16;
  }
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)(v17, (uint64_t (*)(uint64_t, void, unint64_t))specialized Array._copyContents(initializing:));
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    if (!v18) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v18 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v18) {
      goto LABEL_16;
    }
  }
  if (v18 < 1) {
    goto LABEL_60;
  }
  for (uint64_t i = 0; i != v18; ++i)
  {
    if ((v14 & 0xC000000000000001) != 0) {
      id v20 = (id)MEMORY[0x22A677580](i, v14);
    }
    else {
      id v20 = *(id *)(v14 + 8 * i + 32);
    }
    unint64_t v21 = v20;
    objc_msgSend(v20, sel_removeFromParent);
  }
LABEL_16:
  int v88 = (int)v8;
  swift_bridgeObjectRelease_n();
  *unint64_t v15 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRelease();
  double v22 = (uint64_t *)(*(void *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config);
  if (*(unsigned char *)(*(void *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config + 32))
  {
    __break(1u);
    return;
  }
  uint64_t v89 = (char *)OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius;
  uint64_t v91 = *v22;
  double v23 = *(double *)(*(void *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius);
  double v24 = (v23 + v23) * (double)*v22 / (double)v22[3];
  double v25 = -v23;
  double v26 = v24 * 0.5;
  double v27 = v24 * -0.5;
  uint64_t v28 = *(void *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackTop;
  *(double *)uint64_t v28 = -v23;
  *(double *)(v28 + 8) = v24 * 0.5;
  *(unsigned char *)(v28 + 16) = 0;
  uint64_t v29 = *(void *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackBottom;
  *(double *)uint64_t v29 = -v23;
  *(double *)(v29 + 8) = v24 * -0.5;
  *(unsigned char *)(v29 + 16) = 0;
  id v94 = (id)v11;
  unint64_t v3 = (unint64_t)v97;
  objc_msgSend((id)v11, sel_addChild_, v97);
  double v30 = *(char ***)(*(void *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasPatternSpinesNode);
  objc_msgSend(v97, sel_addChild_, v30);
  id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824C0]), sel_init);
  objc_msgSend(v31, sel_moveToPoint_, v25, v27);
  objc_msgSend(v31, sel_addLineToPoint_, v25, v26);
  objc_msgSend(v31, sel_closePath);
  type metadata accessor for FMPFSKShapeNode();
  id v86 = v31;
  id v32 = objc_msgSend(v31, sel_CGPath);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v34 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v32);

  double v35 = v4;
  double v4 = COERCE_DOUBLE(self);
  id v36 = v34;
  id v37 = objc_msgSend(*(id *)&v4, sel_whiteColor);
  objc_msgSend(v36, sel_setStrokeColor_, v37);

  objc_msgSend(v36, sel_setLineCap_, 1);
  uint64_t v38 = one-time initialization token for default;
  id v39 = v36;
  if (v38 != -1) {
    swift_once();
  }
  objc_msgSend(v39, sel_setAlpha_, *(double *)&qword_26817C6B8);

  id v8 = v30;
  double v85 = v39;
  objc_msgSend(v30, sel_addChild_, v39);
  unint64_t v11 = (unint64_t)v89;
  id v84 = objc_msgSend(self, sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, 0.0, 0.0, *(double *)&v89[*(void *)&v35], -3.14159265, 3.14159265);
  id v40 = objc_msgSend(v84, sel_CGPath);
  id v41 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v40);

  id v42 = v41;
  id v43 = objc_msgSend(*(id *)&v4, sel_whiteColor);
  objc_msgSend(v42, sel_setStrokeColor_, v43);

  objc_msgSend(v42, sel_setAlpha_, *(double *)&qword_26817C6B8);
  objc_msgSend(v42, sel_setZPosition_, -4.4408921e-16);
  objc_msgSend(v97, sel_addChild_, v42);
  id v44 = *(void **)(*(void *)&v35 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode);
  uint64_t v87 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode;
  *(void *)(*(void *)&v35 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode) = v42;
  id v83 = v42;

  uint64_t v45 = specialized FMPFSKPatternNode.tapeFragmentNodesWith(spineBottom:spineTop:dotCount:dotDiameter:peripheralDiskRadius:color:conformationFactor:startIndex:)(v91, (void *)static FMPFSKPatternNodeCommonStyle.default, v95, v92, 0, v25, v27, v25, v26, *(double *)&v89[*(void *)&v35]);
  unint64_t v47 = v46;
  double v90 = v48;
  double v96 = v35;
  uint64_t v93 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode;
  objc_msgSend(*(id *)(*(void *)&v35 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode), sel_addChild_, v45);
  if (v47 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    id v50 = v8;
    if (v49) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v49 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    id v50 = v8;
    if (v49)
    {
LABEL_21:
      if (v49 < 1) {
        goto LABEL_61;
      }
      uint64_t v51 = 0;
      do
      {
        if ((v47 & 0xC000000000000001) != 0) {
          id v52 = (id)MEMORY[0x22A677580](v51, v47);
        }
        else {
          id v52 = *(id *)(v47 + 8 * v51 + 32);
        }
        id v53 = v52;
        swift_beginAccess();
        id v54 = v53;
        MEMORY[0x22A677220](v54);
        if (*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v51;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();

        id v50 = v8;
      }
      while (v49 != v51);
    }
  }
  uint64_t v89 = (char *)v45;
  swift_bridgeObjectRelease();
  objc_msgSend(v94, sel_addChild_, *(void *)(*(void *)&v96 + v93), v83);
  id v55 = *(void **)(*(void *)&v96 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsNode);
  *(void *)(*(void *)&v96 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsNode) = v90;
  id v56 = v90;

  double v90 = v56;
  objc_msgSend(v94, sel_addChild_, v56);
  uint64_t v57 = v88 ^ 1u;
  objc_msgSend(v97, sel_setHidden_, v57);
  objc_msgSend(*(id *)(*(void *)&v96 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode), sel_setHidden_, v57);
  objc_msgSend(*(id *)(*(void *)&v96 + v87), sel_setHidden_, v57);
  id v58 = objc_msgSend(v50, sel_children);
  unint64_t v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v59 >> 62) {
    goto LABEL_43;
  }
  uint64_t v60 = *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v60; uint64_t v60 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v61 = 4;
    uint64_t v62 = 0;
    if ((v59 & 0xC000000000000001) != 0)
    {
LABEL_34:
      id v63 = (id)MEMORY[0x22A677580](v62, v59);
      goto LABEL_36;
    }
    while (1)
    {
      id v63 = *(id *)(v59 + 8 * v61);
LABEL_36:
      uint64_t v64 = v63;
      BOOL v65 = __OFADD__(v62, 1);
      uint64_t v66 = v62 + 1;
      if (v65) {
        break;
      }
      self;
      id v67 = (void *)swift_dynamicCastObjCClass();
      if (v67) {
        objc_msgSend(v67, sel_setLineWidth_, 1.0);
      }

      if (v66 == v60) {
        goto LABEL_44;
      }
      uint64_t v62 = ++v61 - 4;
      if ((v59 & 0xC000000000000001) != 0) {
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_43:
    swift_bridgeObjectRetain();
  }
LABEL_44:
  swift_bridgeObjectRelease_n();
  id v8 = &selRef_linkType;
  objc_msgSend(*(id *)(*(void *)&v96 + v93), sel_setHidden_, 0);
  objc_msgSend(v94, sel_position);
  *(double *)&uint64_t v69 = COERCE_DOUBLE(FMPFSKPatternNode.visibleTrackOffsets(center:)(-v68));
  if ((v71 & 1) == 0)
  {
    unint64_t v3 = v69;
    double v4 = v70;
    unint64_t v11 = *v15;
    if (*v15 >> 62) {
      goto LABEL_62;
    }
    uint64_t v72 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    for (; v72; uint64_t v72 = _CocoaArrayWrapper.endIndex.getter())
    {
      double v73 = *(double *)&v3;
      unint64_t v3 = v11 & 0xC000000000000001;
      double v74 = v73 + 1.0;
      double v75 = v4 + -1.0;
      uint64_t v76 = 4;
      double v4 = COERCE_DOUBLE(&OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
      uint64_t v77 = 0;
      if ((v11 & 0xC000000000000001) != 0)
      {
LABEL_48:
        id v78 = (char *)MEMORY[0x22A677580](v77, v11);
        goto LABEL_50;
      }
      while (1)
      {
        id v78 = (char *)*(id *)(v11 + 8 * v76);
LABEL_50:
        id v79 = v78;
        BOOL v65 = __OFADD__(v77, 1);
        uint64_t v80 = v77 + 1;
        if (v65) {
          break;
        }
        if ((v78[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16] & 1) == 0)
        {
          double v81 = *(double *)&v78[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 8];
          BOOL v82 = v75 > v81 || v81 > v74;
          objc_msgSend(v78, v8[464], v82, v83);
        }

        if (v80 == v72) {
          goto LABEL_63;
        }
        uint64_t v77 = ++v76 - 4;
        if (*(double *)&v3 != 0.0) {
          goto LABEL_48;
        }
      }
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      swift_bridgeObjectRetain_n();
    }
LABEL_63:
    swift_bridgeObjectRelease_n();
  }
  FMPFSKPatternNode.readjustFragmentNodesComposedPositionForTape(_:)(0, 1uLL);

  swift_bridgeObjectRelease();
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      double v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      unint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized static BinaryFloatingPoint<>.random<A>(in:using:)(uint64_t a1, double a2, double a3)
{
  return specialized static BinaryFloatingPoint<>.random<A>(in:using:)(a1, (uint64_t (*)(uint64_t, double, double))specialized static BinaryFloatingPoint<>.random<A>(in:using:), a2, a3);
}

uint64_t specialized static BinaryFloatingPoint<>.random<A>(in:using:)(uint64_t result, uint64_t (*a2)(uint64_t, double, double), double a3, double a4)
{
  if (a3 == a4)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v6 = a4 - a3;
  if ((~COERCE__INT64(a4 - a3) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  uint64_t v9 = 0;
  uint64_t result = MEMORY[0x22A6785F0](&v9, 8);
  if (v6 * ((double)(v9 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a3 == a4) {
    return a2(v8, a3, a4);
  }
  return result;
}

void specialized static BinaryFloatingPoint<>.random<A>(in:using:)(double a1, double a2)
{
  if ((~COERCE__INT64(a2 - a1) & 0x7FF0000000000000) != 0) {
    specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001);
  }
  else {
    __break(1u);
  }
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      unint64_t v3 = (void *)MEMORY[0x263F8EE78];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      unint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = _swift_stdlib_malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x263F8EE78];
    }
  }
  return v3;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v6;
  uint64_t v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v7 = 1;
  }
  if (v6 >> 62) {
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain();
    unint64_t v6 = MEMORY[0x22A677590](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *uint64_t v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();
  return specialized Array._endMutation()();
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized MutableCollection<>.shuffle<A>(using:)()
{
  unint64_t v1 = *(void *)(*v0 + 16);
  unint64_t v2 = v1 - 2;
  if (v1 >= 2)
  {
    unint64_t v3 = 0;
    while (1)
    {
      unint64_t v20 = 0;
      MEMORY[0x22A6785F0](&v20, 8);
      uint64_t v5 = (v20 * (unsigned __int128)v1) >> 64;
      if (v1 > v20 * v1)
      {
        unint64_t v6 = -(uint64_t)v1 % v1;
        if (v6 > v20 * v1)
        {
          do
          {
            unint64_t v20 = 0;
            MEMORY[0x22A6785F0](&v20, 8);
          }
          while (v6 > v20 * v1);
          uint64_t v5 = (v20 * (unsigned __int128)v1) >> 64;
        }
      }
      unint64_t v7 = v3 + v5;
      if (__OFADD__(v3, v5)) {
        break;
      }
      if (v3 != v7)
      {
        uint64_t v8 = *v0;
        unint64_t v9 = *(void *)(*v0 + 16);
        if (v3 >= v9) {
          goto LABEL_21;
        }
        if (v7 >= v9) {
          goto LABEL_22;
        }
        uint64_t v10 = *(void **)(v8 + 32 + 8 * v7);
        id v11 = *(id *)(v8 + 32 + 8 * v3);
        id v12 = v10;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t *v0 = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
        }
        if (v3 >= *(void *)(v8 + 16)) {
          goto LABEL_23;
        }
        uint64_t v14 = v8 + 8 * v3;
        BOOL v15 = *(void **)(v14 + 32);
        *(void *)(v14 + 32) = v12;

        specialized ContiguousArray._endMutation()();
        uint64_t v16 = *v0;
        char v17 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t *v0 = v16;
        if ((v17 & 1) == 0) {
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
        }
        if (v7 >= *(void *)(v16 + 16)) {
          goto LABEL_24;
        }
        uint64_t v18 = v16 + 8 * v7;
        double v19 = *(void **)(v18 + 32);
        *(void *)(v18 + 32) = v11;

        specialized ContiguousArray._endMutation()();
      }
      --v1;
      if (v3++ == v2) {
        return;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  long long v11;
  long long v12;
  unint64_t v13;

  unint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 16);
  unint64_t v3 = v2 - 2;
  if (v2 >= 2)
  {
    int64_t v4 = 0;
    while (1)
    {
      uint64_t v13 = 0;
      MEMORY[0x22A6785F0](&v13, 8);
      unint64_t v6 = (v13 * (unsigned __int128)v2) >> 64;
      if (v2 > v13 * v2)
      {
        unint64_t v7 = -(uint64_t)v2 % v2;
        if (v7 > v13 * v2)
        {
          do
          {
            uint64_t v13 = 0;
            MEMORY[0x22A6785F0](&v13, 8);
          }
          while (v7 > v13 * v2);
          unint64_t v6 = (v13 * (unsigned __int128)v2) >> 64;
        }
      }
      uint64_t v8 = v4 + v6;
      if (__OFADD__(v4, v6)) {
        break;
      }
      if (v4 != v8)
      {
        unint64_t v9 = *(void *)(v1 + 16);
        if (v4 >= v9) {
          goto LABEL_19;
        }
        if (v8 >= v9) {
          goto LABEL_20;
        }
        id v11 = *(_OWORD *)(v1 + 32 + 16 * v4);
        id v12 = *(_OWORD *)(v1 + 32 + 16 * v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v1 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v1);
        }
        uint64_t v10 = *(void *)(v1 + 16);
        if (v4 >= v10) {
          goto LABEL_21;
        }
        *(_OWORD *)(v1 + 32 + 16 * v4) = v12;
        if (v8 >= v10) {
          goto LABEL_22;
        }
        *(_OWORD *)(v1 + 32 + 16 * v8) = v11;
        uint64_t *v0 = v1;
      }
      --v2;
      if (v4++ == v3) {
        return;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v82 = *a1;
      uint64_t v83 = *a1 + 8;
      uint64_t v84 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v86 = *(double *)(v82 + 16 * i + 8);
        uint64_t v87 = v84;
        uint64_t v88 = v83;
        do
        {
          if (v86 >= *(double *)v88) {
            break;
          }
          if (!v82) {
            goto LABEL_141;
          }
          uint64_t v89 = *(void *)(v88 + 8);
          *(_OWORD *)(v88 + 8) = *(_OWORD *)(v88 - 8);
          *(void *)(v88 - 8) = v89;
          *(double *)uint64_t v88 = v86;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        v83 += 16;
        --v84;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v6 = result;
  uint64_t v100 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    __dst = (double *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
      id v12 = (char *)MEMORY[0x263F8EE78];
LABEL_103:
      uint64_t v91 = v12;
      uint64_t v102 = v9;
      if (v13 >= 2)
      {
        uint64_t v92 = *v100;
        do
        {
          unint64_t v93 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v92) {
            goto LABEL_145;
          }
          id v94 = v91;
          uint64_t v95 = *(void *)&v91[16 * v93 + 32];
          uint64_t v96 = *(void *)&v91[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v92 + 16 * v95), (double *)(v92 + 16 * *(void *)&v91[16 * v13 + 16]), v92 + 16 * v96, __dst);
          if (v1) {
            break;
          }
          if (v96 < v95) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
          }
          if (v93 >= *((void *)v94 + 2)) {
            goto LABEL_134;
          }
          id v97 = &v94[16 * v93 + 32];
          *(void *)id v97 = v95;
          *((void *)v97 + 1) = v96;
          unint64_t v98 = *((void *)v94 + 2);
          if (v13 > v98) {
            goto LABEL_135;
          }
          memmove(&v94[16 * v13 + 16], &v94[16 * v13 + 32], 16 * (v98 - v13));
          uint64_t v91 = v94;
          *((void *)v94 + 2) = v98 - 1;
          unint64_t v13 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v102 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    type metadata accessor for CGPoint(0);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = v7;
    uint64_t v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v101 = *a1 + 40;
  uint64_t v99 = *a1 - 16;
  id v12 = (char *)MEMORY[0x263F8EE78];
  Swift::Int v103 = v6;
  Swift::Int v104 = v3;
  uint64_t v105 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(double *)(v11 + 16 * v10 + 8);
      double v16 = *(double *)(v11 + 16 * v14 + 8);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        char v17 = (double *)(v101 + 16 * v14);
        double v18 = v15;
        while (1)
        {
          double v19 = v18;
          double v18 = *v17;
          if (v15 < v16 == *v17 >= v19) {
            break;
          }
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          unint64_t v20 = (long long *)(v99 + 16 * v10);
          Swift::Int v21 = v10;
          Swift::Int v22 = v14;
          double v23 = (long long *)(v11 + 16 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v11) {
                goto LABEL_144;
              }
              long long v24 = *v23;
              *double v23 = *v20;
              *unint64_t v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v25 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v25 >= v3) {
      Swift::Int v25 = v3;
    }
    if (v25 < v14) {
      break;
    }
    if (v10 != v25)
    {
      double v26 = (double *)(v11 + 16 * v10);
      do
      {
        double v27 = *(double *)(v11 + 16 * v10 + 8);
        Swift::Int v28 = v14;
        uint64_t v29 = v26;
        do
        {
          if (v27 >= *(v29 - 1)) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          double v30 = *v29;
          *(_OWORD *)uint64_t v29 = *((_OWORD *)v29 - 1);
          *(v29 - 1) = v27;
          *(v29 - 2) = v30;
          v29 -= 2;
          ++v28;
        }
        while (v10 != v28);
        ++v10;
        v26 += 2;
      }
      while (v10 != v25);
      Swift::Int v10 = v25;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v32 = *((void *)v12 + 2);
    unint64_t v31 = *((void *)v12 + 3);
    unint64_t v13 = v32 + 1;
    uint64_t v11 = v105;
    if (v32 >= v31 >> 1)
    {
      double v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v12);
      uint64_t v11 = v105;
      id v12 = v81;
    }
    *((void *)v12 + 2) = v13;
    char v33 = v12 + 32;
    id v34 = &v12[16 * v32 + 32];
    *(void *)id v34 = v14;
    *((void *)v34 + 1) = v10;
    if (v32)
    {
      while (1)
      {
        unint64_t v35 = v13 - 1;
        if (v13 >= 4)
        {
          id v40 = &v33[16 * v13];
          uint64_t v41 = *((void *)v40 - 8);
          uint64_t v42 = *((void *)v40 - 7);
          BOOL v46 = __OFSUB__(v42, v41);
          uint64_t v43 = v42 - v41;
          if (v46) {
            goto LABEL_120;
          }
          uint64_t v45 = *((void *)v40 - 6);
          uint64_t v44 = *((void *)v40 - 5);
          BOOL v46 = __OFSUB__(v44, v45);
          uint64_t v38 = v44 - v45;
          char v39 = v46;
          if (v46) {
            goto LABEL_121;
          }
          unint64_t v47 = v13 - 2;
          id v48 = &v33[16 * v13 - 32];
          uint64_t v50 = *(void *)v48;
          uint64_t v49 = *((void *)v48 + 1);
          BOOL v46 = __OFSUB__(v49, v50);
          uint64_t v51 = v49 - v50;
          if (v46) {
            goto LABEL_123;
          }
          BOOL v46 = __OFADD__(v38, v51);
          uint64_t v52 = v38 + v51;
          if (v46) {
            goto LABEL_126;
          }
          if (v52 >= v43)
          {
            double v70 = &v33[16 * v35];
            uint64_t v72 = *(void *)v70;
            uint64_t v71 = *((void *)v70 + 1);
            BOOL v46 = __OFSUB__(v71, v72);
            uint64_t v73 = v71 - v72;
            if (v46) {
              goto LABEL_130;
            }
            BOOL v63 = v38 < v73;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v64 = *((void *)v12 + 4);
            uint64_t v65 = *((void *)v12 + 5);
            BOOL v46 = __OFSUB__(v65, v64);
            uint64_t v57 = v65 - v64;
            char v58 = v46;
            goto LABEL_77;
          }
          uint64_t v37 = *((void *)v12 + 4);
          uint64_t v36 = *((void *)v12 + 5);
          BOOL v46 = __OFSUB__(v36, v37);
          uint64_t v38 = v36 - v37;
          char v39 = v46;
        }
        if (v39) {
          goto LABEL_122;
        }
        unint64_t v47 = v13 - 2;
        id v53 = &v33[16 * v13 - 32];
        uint64_t v55 = *(void *)v53;
        uint64_t v54 = *((void *)v53 + 1);
        BOOL v56 = __OFSUB__(v54, v55);
        uint64_t v57 = v54 - v55;
        char v58 = v56;
        if (v56) {
          goto LABEL_125;
        }
        unint64_t v59 = &v33[16 * v35];
        uint64_t v61 = *(void *)v59;
        uint64_t v60 = *((void *)v59 + 1);
        BOOL v46 = __OFSUB__(v60, v61);
        uint64_t v62 = v60 - v61;
        if (v46) {
          goto LABEL_128;
        }
        if (__OFADD__(v57, v62)) {
          goto LABEL_129;
        }
        if (v57 + v62 >= v38)
        {
          BOOL v63 = v38 < v62;
LABEL_83:
          if (v63) {
            unint64_t v35 = v47;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v58) {
          goto LABEL_124;
        }
        uint64_t v66 = &v33[16 * v35];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v46 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v46) {
          goto LABEL_127;
        }
        if (v69 < v57) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v74 = v35 - 1;
        if (v35 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        double v75 = v12;
        uint64_t v76 = &v33[16 * v74];
        uint64_t v77 = *(void *)v76;
        id v78 = &v33[16 * v35];
        uint64_t v79 = *((void *)v78 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(void *)v76), (double *)(v11 + 16 * *(void *)v78), v11 + 16 * v79, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v79 < v77) {
          goto LABEL_117;
        }
        if (v35 > *((void *)v75 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v76 = v77;
        *(void *)&v33[16 * v74 + 8] = v79;
        unint64_t v80 = *((void *)v75 + 2);
        if (v35 >= v80) {
          goto LABEL_119;
        }
        id v12 = v75;
        unint64_t v13 = v80 - 1;
        memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
        *((void *)v75 + 2) = v80 - 1;
        uint64_t v11 = v105;
        if (v80 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    Swift::Int v6 = v103;
    Swift::Int v3 = v104;
    if (v10 >= v104)
    {
      uint64_t v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double *specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int result = (double *)_minimumMergeRunLength(_:)(v4);
  if ((uint64_t)result < v4)
  {
    if (v4 >= 0) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = v4 + 1;
    }
    if (v4 >= -1)
    {
      uint64_t v7 = result;
      id v114 = a1;
      if (v4 < 2)
      {
        Swift::Int v21 = (char *)MEMORY[0x263F8EE78];
        uint64_t v120 = MEMORY[0x263F8EE78];
        __dst = (char *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
        if (v4 != 1)
        {
          unint64_t v24 = *(void *)(MEMORY[0x263F8EE78] + 16);
          if (v24 < 2) {
            goto LABEL_127;
          }
          goto LABEL_115;
        }
      }
      else
      {
        uint64_t v8 = v6 >> 1;
        type metadata accessor for FMPFSKPatternFragmentNode();
        uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
        __dst = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
        uint64_t v120 = v9;
      }
      uint64_t v116 = v7;
      Swift::Int v22 = 0;
      uint64_t v23 = *a1;
      uint64_t v115 = *a1 - 8;
      Swift::Int v21 = (char *)MEMORY[0x263F8EE78];
      Swift::Int v117 = v4;
      uint64_t v118 = *a1;
      while (1)
      {
        Swift::Int v25 = v22++;
        if (v22 < v4)
        {
          uint64_t v26 = *(void *)(v23 + 8 * v22);
          double v27 = (double *)(v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
          if (*(unsigned char *)(v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16)) {
            goto LABEL_171;
          }
          Swift::Int v28 = (double *)(v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
          if (*(unsigned char *)(v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16)) {
            goto LABEL_172;
          }
          uint64_t v29 = *(void *)(v23 + 8 * v25);
          double v30 = (double *)(v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
          if (*(unsigned char *)(v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16)) {
            goto LABEL_173;
          }
          uint64_t v31 = v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
          if (*(unsigned char *)(v31 + 16)) {
            goto LABEL_174;
          }
          double v32 = v27[1] - v28[1];
          double v33 = v32 * v32 + (*v27 - *v28) * (*v27 - *v28);
          double v34 = (v30[1] - *(double *)(v31 + 8)) * (v30[1] - *(double *)(v31 + 8))
              + (*v30 - *(double *)v31) * (*v30 - *(double *)v31);
          Swift::Int v22 = v25 + 2;
          if (v25 + 2 < v4)
          {
            do
            {
              uint64_t v35 = *(void *)(v23 + 8 * v22);
              if (*(unsigned char *)(v35 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16)) {
                goto LABEL_165;
              }
              if (*(unsigned char *)(v35 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16)) {
                goto LABEL_166;
              }
              uint64_t v37 = (double *)(v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
              if (*(unsigned char *)(v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16)) {
                goto LABEL_167;
              }
              uint64_t v38 = v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
              if (*(unsigned char *)(v38 + 16)) {
                goto LABEL_168;
              }
              uint64_t v36 = (double *)(v35 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
              if (v33 < v34 == (v36[1]
                               - *(double *)(v35
                                           + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition
                                           + 8))
                              * (v36[1]
                               - *(double *)(v35
                                           + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition
                                           + 8))
                              + (*v36
                               - *(double *)(v35
                                           + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition))
                              * (*v36
                               - *(double *)(v35
                                           + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition)) >= (v37[1] - *(double *)(v38 + 8)) * (v37[1] - *(double *)(v38 + 8)) + (*v37 - *(double *)v38) * (*v37 - *(double *)v38))
                goto LABEL_38;
              ++v22;
              uint64_t v26 = v35;
            }
            while (v4 != v22);
            Swift::Int v22 = v4;
          }
LABEL_38:
          if (v33 < v34)
          {
            if (v22 < v25) {
              goto LABEL_151;
            }
            if (v25 < v22)
            {
              char v39 = (uint64_t *)(v115 + 8 * v22);
              Swift::Int v40 = v22;
              Swift::Int v41 = v25;
              uint64_t v42 = (uint64_t *)(v23 + 8 * v25);
              do
              {
                if (v41 != --v40)
                {
                  if (!v23) {
                    goto LABEL_169;
                  }
                  uint64_t v43 = *v42;
                  uint64_t *v42 = *v39;
                  uint64_t *v39 = v43;
                }
                ++v41;
                --v39;
                ++v42;
              }
              while (v41 < v40);
            }
          }
        }
        if (v22 < v4)
        {
          if (__OFSUB__(v22, v25)) {
            goto LABEL_149;
          }
          if (v22 - v25 < (uint64_t)v116)
          {
            Swift::Int v44 = (Swift::Int)v116 + v25;
            if (__OFADD__(v25, v116)) {
              goto LABEL_152;
            }
            if (v44 >= v4) {
              Swift::Int v44 = v4;
            }
            if (v44 < v25)
            {
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
              goto LABEL_155;
            }
            if (v22 != v44)
            {
              uint64_t v45 = (uint64_t *)(v115 + 8 * v22);
              do
              {
                uint64_t v46 = *(void *)(v23 + 8 * v22);
                Swift::Int v47 = v25;
                id v48 = v45;
                do
                {
                  uint64_t v49 = (double *)(v46 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
                  if (*(unsigned char *)(v46 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16)) {
                    goto LABEL_159;
                  }
                  uint64_t v50 = (double *)(v46 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
                  if (*(unsigned char *)(v46 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16)) {
                    goto LABEL_160;
                  }
                  uint64_t v51 = *v48;
                  uint64_t v52 = *v48 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition;
                  if (*(unsigned char *)(v52 + 16)) {
                    goto LABEL_161;
                  }
                  if (*(unsigned char *)(v51 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16)) {
                    goto LABEL_162;
                  }
                  double v54 = v49[1] - v50[1];
                  id v53 = (double *)(v51 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
                  if (v54 * v54 + (*v49 - *v50) * (*v49 - *v50) >= (*(double *)(v52 + 8) - v53[1])
                                                                  * (*(double *)(v52 + 8) - v53[1])
                                                                  + (*(double *)v52 - *v53) * (*(double *)v52 - *v53))
                    break;
                  if (!v23) {
                    goto LABEL_163;
                  }
                  *id v48 = v46;
                  v48[1] = v51;
                  --v48;
                  ++v47;
                }
                while (v22 != v47);
                ++v22;
                ++v45;
              }
              while (v22 != v44);
              Swift::Int v22 = v44;
            }
          }
        }
        if (v22 < v25) {
          goto LABEL_144;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::Int v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v21 + 2) + 1, 1, v21);
        }
        unint64_t v56 = *((void *)v21 + 2);
        unint64_t v55 = *((void *)v21 + 3);
        unint64_t v24 = v56 + 1;
        uint64_t v23 = v118;
        if (v56 >= v55 >> 1)
        {
          uint64_t v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v56 + 1, 1, v21);
          uint64_t v23 = v118;
          Swift::Int v21 = v105;
        }
        *((void *)v21 + 2) = v24;
        uint64_t v57 = v21 + 32;
        char v58 = &v21[16 * v56 + 32];
        *(void *)char v58 = v25;
        *((void *)v58 + 1) = v22;
        if (v56)
        {
          while (1)
          {
            unint64_t v59 = v24 - 1;
            if (v24 >= 4)
            {
              uint64_t v64 = &v57[16 * v24];
              uint64_t v65 = *((void *)v64 - 8);
              uint64_t v66 = *((void *)v64 - 7);
              BOOL v70 = __OFSUB__(v66, v65);
              uint64_t v67 = v66 - v65;
              if (v70) {
                goto LABEL_133;
              }
              uint64_t v69 = *((void *)v64 - 6);
              uint64_t v68 = *((void *)v64 - 5);
              BOOL v70 = __OFSUB__(v68, v69);
              uint64_t v62 = v68 - v69;
              char v63 = v70;
              if (v70) {
                goto LABEL_134;
              }
              unint64_t v71 = v24 - 2;
              uint64_t v72 = &v57[16 * v24 - 32];
              uint64_t v74 = *(void *)v72;
              uint64_t v73 = *((void *)v72 + 1);
              BOOL v70 = __OFSUB__(v73, v74);
              uint64_t v75 = v73 - v74;
              if (v70) {
                goto LABEL_136;
              }
              BOOL v70 = __OFADD__(v62, v75);
              uint64_t v76 = v62 + v75;
              if (v70) {
                goto LABEL_139;
              }
              if (v76 >= v67)
              {
                id v94 = &v57[16 * v59];
                uint64_t v96 = *(void *)v94;
                uint64_t v95 = *((void *)v94 + 1);
                BOOL v70 = __OFSUB__(v95, v96);
                uint64_t v97 = v95 - v96;
                if (v70) {
                  goto LABEL_143;
                }
                BOOL v87 = v62 < v97;
                goto LABEL_103;
              }
            }
            else
            {
              if (v24 != 3)
              {
                uint64_t v88 = *((void *)v21 + 4);
                uint64_t v89 = *((void *)v21 + 5);
                BOOL v70 = __OFSUB__(v89, v88);
                uint64_t v81 = v89 - v88;
                char v82 = v70;
                goto LABEL_97;
              }
              uint64_t v61 = *((void *)v21 + 4);
              uint64_t v60 = *((void *)v21 + 5);
              BOOL v70 = __OFSUB__(v60, v61);
              uint64_t v62 = v60 - v61;
              char v63 = v70;
            }
            if (v63) {
              goto LABEL_135;
            }
            unint64_t v71 = v24 - 2;
            uint64_t v77 = &v57[16 * v24 - 32];
            uint64_t v79 = *(void *)v77;
            uint64_t v78 = *((void *)v77 + 1);
            BOOL v80 = __OFSUB__(v78, v79);
            uint64_t v81 = v78 - v79;
            char v82 = v80;
            if (v80) {
              goto LABEL_138;
            }
            uint64_t v83 = &v57[16 * v59];
            uint64_t v85 = *(void *)v83;
            uint64_t v84 = *((void *)v83 + 1);
            BOOL v70 = __OFSUB__(v84, v85);
            uint64_t v86 = v84 - v85;
            if (v70) {
              goto LABEL_141;
            }
            if (__OFADD__(v81, v86)) {
              goto LABEL_142;
            }
            if (v81 + v86 >= v62)
            {
              BOOL v87 = v62 < v86;
LABEL_103:
              if (v87) {
                unint64_t v59 = v71;
              }
              goto LABEL_105;
            }
LABEL_97:
            if (v82) {
              goto LABEL_137;
            }
            double v90 = &v57[16 * v59];
            uint64_t v92 = *(void *)v90;
            uint64_t v91 = *((void *)v90 + 1);
            BOOL v70 = __OFSUB__(v91, v92);
            uint64_t v93 = v91 - v92;
            if (v70) {
              goto LABEL_140;
            }
            if (v93 < v81) {
              goto LABEL_24;
            }
LABEL_105:
            unint64_t v98 = v59 - 1;
            if (v59 - 1 >= v24)
            {
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
              goto LABEL_153;
            }
            if (!v23) {
              goto LABEL_164;
            }
            uint64_t v99 = v21;
            uint64_t v100 = &v57[16 * v98];
            uint64_t v101 = *(void *)v100;
            uint64_t v102 = &v57[16 * v59];
            uint64_t v103 = *((void *)v102 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v23 + 8 * *(void *)v100), (char *)(v23 + 8 * *(void *)v102), v23 + 8 * v103, __dst);
            if (v1) {
              goto LABEL_127;
            }
            if (v103 < v101) {
              goto LABEL_130;
            }
            if (v59 > *((void *)v99 + 2)) {
              goto LABEL_131;
            }
            *(void *)uint64_t v100 = v101;
            *(void *)&v57[16 * v98 + 8] = v103;
            unint64_t v104 = *((void *)v99 + 2);
            if (v59 >= v104) {
              goto LABEL_132;
            }
            Swift::Int v21 = v99;
            unint64_t v24 = v104 - 1;
            memmove(&v57[16 * v59], v102 + 16, 16 * (v104 - 1 - v59));
            *((void *)v99 + 2) = v104 - 1;
            uint64_t v23 = v118;
            if (v104 <= 2) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v24 = 1;
LABEL_24:
        Swift::Int v4 = v117;
        if (v22 >= v117)
        {
          uint64_t v2 = v1;
          if (v24 < 2)
          {
LABEL_127:
            swift_bridgeObjectRelease();
            *(void *)((v120 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
            specialized Array._endMutation()();
            return (double *)swift_bridgeObjectRelease();
          }
LABEL_115:
          uint64_t v106 = *v114;
          while (1)
          {
            unint64_t v107 = v24 - 2;
            if (v24 < 2) {
              goto LABEL_145;
            }
            if (!v106) {
              goto LABEL_170;
            }
            uint64_t v108 = v21;
            uint64_t v109 = v21 + 32;
            uint64_t v110 = *(void *)&v21[16 * v107 + 32];
            uint64_t v111 = *(void *)&v21[16 * v24 + 24];
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v106 + 8 * v110), (char *)(v106 + 8 * *(void *)&v109[16 * v24 - 16]), v106 + 8 * v111, __dst);
            if (v2) {
              goto LABEL_127;
            }
            if (v111 < v110) {
              goto LABEL_146;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v108 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v108);
            }
            if (v107 >= *((void *)v108 + 2)) {
              goto LABEL_147;
            }
            char v112 = &v108[16 * v107 + 32];
            *(void *)char v112 = v110;
            *((void *)v112 + 1) = v111;
            unint64_t v113 = *((void *)v108 + 2);
            if (v24 > v113) {
              goto LABEL_148;
            }
            Swift::Int v21 = v108;
            memmove(&v108[16 * v24 + 16], &v108[16 * v24 + 32], 16 * (v113 - v24));
            *((void *)v108 + 2) = v113 - 1;
            unint64_t v24 = v113 - 1;
            if (v113 <= 2) {
              goto LABEL_127;
            }
          }
        }
      }
    }
LABEL_175:
    Swift::Int result = (double *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < 0) {
    goto LABEL_150;
  }
  if ((unint64_t)v4 >= 2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a1;
    uint64_t v12 = 1;
LABEL_12:
    uint64_t v13 = *(void *)(v11 + 8 * v12);
    uint64_t v14 = v10;
    while (1)
    {
      double v15 = (double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
      if (*(unsigned char *)(v13 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16)) {
        break;
      }
      Swift::Int result = (double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
      if (*(unsigned char *)(v13 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16)) {
        goto LABEL_157;
      }
      double v16 = (uint64_t *)(v11 + 8 * v14);
      uint64_t v17 = *v16;
      uint64_t v18 = *v16 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition;
      if (*(unsigned char *)(v18 + 16)) {
        goto LABEL_156;
      }
      if (*(unsigned char *)(v17 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16)) {
        goto LABEL_154;
      }
      double v20 = v15[1] - result[1];
      double v19 = (double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
      if (v20 * v20 + (*v15 - *result) * (*v15 - *result) < (*(double *)(v18 + 8) - v19[1])
                                                           * (*(double *)(v18 + 8) - v19[1])
                                                           + (*(double *)v18 - *v19) * (*(double *)v18 - *v19))
      {
        if (!v11) {
          goto LABEL_158;
        }
        v16[1] = v17;
        *(void *)(v11 + 8 * v14--) = v13;
        if (v14 != -1) {
          continue;
        }
      }
      ++v12;
      ++v10;
      if (v12 == v4) {
        return result;
      }
      goto LABEL_12;
    }
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
    goto LABEL_175;
  }
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t *a2)
{
  Swift::Int v5 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v5);
  if (result >= v5)
  {
    if (v5 < 0)
    {
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_220;
    }
    if ((unint64_t)v5 >= 2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *a1;
      uint64_t v13 = 1;
LABEL_12:
      uint64_t v14 = *(void *)(v12 + 8 * v13);
      uint64_t v15 = v11;
      while (1)
      {
        uint64_t v16 = v14 + *a2;
        if (*(unsigned char *)(v16 + 16)) {
          goto LABEL_209;
        }
        uint64_t v17 = *(void *)(v12 + 8 * v15);
        uint64_t v18 = v17 + *a2;
        if (*(unsigned char *)(v18 + 16)) {
          goto LABEL_210;
        }
        if (*(double *)(v16 + 8) < *(double *)(v18 + 8))
        {
          if (!v12) {
            goto LABEL_211;
          }
          *(void *)(v12 + 8 * v15 + 8) = v17;
          *(void *)(v12 + 8 * v15--) = v14;
          if (v15 != -1) {
            continue;
          }
        }
        ++v13;
        ++v11;
        if (v13 == v5) {
          return result;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
    if (v5 >= 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = v5 + 1;
    }
    if (v5 < -1)
    {
LABEL_220:
      Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    Swift::Int v139 = result;
    uint64_t v141 = v2;
    id v137 = a1;
    if (v5 >= 2)
    {
      uint64_t v8 = v7 >> 1;
      type metadata accessor for FMPFSKPatternFragmentNode();
      uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
      uint64_t v10 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
      uint64_t v152 = v9;
      goto LABEL_20;
    }
    double v19 = (char *)MEMORY[0x263F8EE78];
    uint64_t v152 = MEMORY[0x263F8EE78];
    uint64_t v10 = (char *)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v5 == 1)
    {
LABEL_20:
      Swift::Int v20 = 0;
      uint64_t v21 = *a1;
      uint64_t v138 = v21 + 16;
      uint64_t v143 = v21 - 8;
      double v19 = (char *)MEMORY[0x263F8EE78];
      Swift::Int v22 = v5;
      Swift::Int v140 = v5;
      __dst = v10;
      uint64_t v147 = v21;
      while (1)
      {
        Swift::Int v24 = v20 + 1;
        if (v20 + 1 < v22)
        {
          uint64_t v25 = *a2;
          uint64_t v26 = *(void *)(v21 + 8 * v24) + *a2;
          if (*(unsigned char *)(v26 + 16)) {
            goto LABEL_216;
          }
          uint64_t v27 = *(void *)(v21 + 8 * v20) + v25;
          if (*(unsigned char *)(v27 + 16)) {
            goto LABEL_217;
          }
          double v28 = *(double *)(v27 + 8);
          double v29 = *(double *)(v26 + 8);
          Swift::Int v24 = v20 + 2;
          if (v20 + 2 < v22)
          {
            double v30 = (void *)(v138 + 8 * v20);
            do
            {
              uint64_t v31 = *v30 + v25;
              if (*(unsigned char *)(v31 + 16)) {
                goto LABEL_213;
              }
              uint64_t v32 = *(v30 - 1) + v25;
              if (*(unsigned char *)(v32 + 16)) {
                goto LABEL_214;
              }
              if (v29 < v28 == *(double *)(v31 + 8) >= *(double *)(v32 + 8)) {
                goto LABEL_33;
              }
              ++v24;
              ++v30;
            }
            while (v22 != v24);
            Swift::Int v24 = v22;
          }
LABEL_33:
          if (v29 < v28)
          {
            if (v24 < v20) {
              goto LABEL_198;
            }
            if (v20 < v24)
            {
              double v33 = (uint64_t *)(v143 + 8 * v24);
              Swift::Int v34 = v24;
              Swift::Int v35 = v20;
              uint64_t v36 = (uint64_t *)(v21 + 8 * v20);
              do
              {
                if (v35 != --v34)
                {
                  if (!v21) {
                    goto LABEL_215;
                  }
                  uint64_t v37 = *v36;
                  uint64_t *v36 = *v33;
                  uint64_t *v33 = v37;
                }
                ++v35;
                --v33;
                ++v36;
              }
              while (v35 < v34);
            }
          }
        }
        if (v24 < v22)
        {
          if (__OFSUB__(v24, v20)) {
            goto LABEL_193;
          }
          if (v24 - v20 < v139)
          {
            Swift::Int v38 = v20 + v139;
            if (__OFADD__(v20, v139)) {
              goto LABEL_199;
            }
            if (v38 >= v22) {
              Swift::Int v38 = v22;
            }
            if (v38 < v20) {
              goto LABEL_200;
            }
            if (v24 != v38)
            {
              char v39 = (uint64_t *)(v143 + 8 * v24);
              do
              {
                uint64_t v40 = *(void *)(v21 + 8 * v24);
                Swift::Int v41 = v20;
                uint64_t v42 = v39;
                do
                {
                  uint64_t v43 = v40 + *a2;
                  if (*(unsigned char *)(v43 + 16)) {
                    goto LABEL_205;
                  }
                  uint64_t v44 = *v42;
                  uint64_t v45 = *v42 + *a2;
                  if (*(unsigned char *)(v45 + 16)) {
                    goto LABEL_206;
                  }
                  if (*(double *)(v43 + 8) >= *(double *)(v45 + 8)) {
                    break;
                  }
                  if (!v21) {
                    goto LABEL_207;
                  }
                  uint64_t *v42 = v40;
                  v42[1] = v44;
                  --v42;
                  ++v41;
                }
                while (v24 != v41);
                ++v24;
                ++v39;
              }
              while (v24 != v38);
              Swift::Int v24 = v38;
            }
          }
        }
        if (v24 < v20) {
          goto LABEL_192;
        }
        Swift::Int v142 = v24;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
        }
        uint64_t v10 = __dst;
        unint64_t v47 = *((void *)v19 + 2);
        unint64_t v46 = *((void *)v19 + 3);
        unint64_t v23 = v47 + 1;
        if (v47 >= v46 >> 1)
        {
          Swift::String v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1, v19);
          uint64_t v10 = __dst;
          double v19 = v129;
        }
        *((void *)v19 + 2) = v23;
        id v48 = v19 + 32;
        uint64_t v49 = &v19[16 * v47 + 32];
        *(void *)uint64_t v49 = v20;
        *((void *)v49 + 1) = v142;
        if (v47) {
          break;
        }
        unint64_t v23 = 1;
LABEL_22:
        Swift::Int v22 = v140;
        Swift::Int v20 = v142;
        if (v142 >= v140) {
          goto LABEL_164;
        }
      }
      id v148 = v19 + 32;
      uint64_t v144 = v19;
      while (1)
      {
        int64_t v50 = v23 - 1;
        if (v23 >= 4)
        {
          unint64_t v55 = &v48[16 * v23];
          uint64_t v56 = *((void *)v55 - 8);
          uint64_t v57 = *((void *)v55 - 7);
          BOOL v61 = __OFSUB__(v57, v56);
          uint64_t v58 = v57 - v56;
          if (v61) {
            goto LABEL_181;
          }
          uint64_t v60 = *((void *)v55 - 6);
          uint64_t v59 = *((void *)v55 - 5);
          BOOL v61 = __OFSUB__(v59, v60);
          uint64_t v53 = v59 - v60;
          char v54 = v61;
          if (v61) {
            goto LABEL_182;
          }
          unint64_t v62 = v23 - 2;
          char v63 = &v48[16 * v23 - 32];
          uint64_t v65 = *(void *)v63;
          uint64_t v64 = *((void *)v63 + 1);
          BOOL v61 = __OFSUB__(v64, v65);
          uint64_t v66 = v64 - v65;
          if (v61) {
            goto LABEL_184;
          }
          BOOL v61 = __OFADD__(v53, v66);
          uint64_t v67 = v53 + v66;
          if (v61) {
            goto LABEL_187;
          }
          if (v67 >= v58)
          {
            uint64_t v85 = &v48[16 * v50];
            uint64_t v87 = *(void *)v85;
            uint64_t v86 = *((void *)v85 + 1);
            BOOL v61 = __OFSUB__(v86, v87);
            uint64_t v88 = v86 - v87;
            if (v61) {
              goto LABEL_191;
            }
            BOOL v78 = v53 < v88;
            goto LABEL_97;
          }
        }
        else
        {
          if (v23 != 3)
          {
            uint64_t v79 = *((void *)v19 + 4);
            uint64_t v80 = *((void *)v19 + 5);
            BOOL v61 = __OFSUB__(v80, v79);
            uint64_t v72 = v80 - v79;
            char v73 = v61;
            goto LABEL_91;
          }
          uint64_t v52 = *((void *)v19 + 4);
          uint64_t v51 = *((void *)v19 + 5);
          BOOL v61 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          char v54 = v61;
        }
        if (v54) {
          goto LABEL_183;
        }
        unint64_t v62 = v23 - 2;
        uint64_t v68 = &v48[16 * v23 - 32];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v71 = __OFSUB__(v69, v70);
        uint64_t v72 = v69 - v70;
        char v73 = v71;
        if (v71) {
          goto LABEL_186;
        }
        uint64_t v74 = &v48[16 * v50];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v61 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v61) {
          goto LABEL_189;
        }
        if (__OFADD__(v72, v77)) {
          goto LABEL_190;
        }
        if (v72 + v77 >= v53)
        {
          BOOL v78 = v53 < v77;
LABEL_97:
          if (v78) {
            int64_t v50 = v62;
          }
          goto LABEL_99;
        }
LABEL_91:
        if (v73) {
          goto LABEL_185;
        }
        uint64_t v81 = &v48[16 * v50];
        uint64_t v83 = *(void *)v81;
        uint64_t v82 = *((void *)v81 + 1);
        BOOL v61 = __OFSUB__(v82, v83);
        uint64_t v84 = v82 - v83;
        if (v61) {
          goto LABEL_188;
        }
        if (v84 < v72) {
          goto LABEL_22;
        }
LABEL_99:
        if (v50 - 1 >= v23)
        {
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
          goto LABEL_194;
        }
        if (!v21) {
          goto LABEL_212;
        }
        uint64_t v89 = a2;
        double v90 = v19;
        uint64_t v151 = &v48[16 * v50 - 16];
        uint64_t v91 = *(void *)v151;
        uint64_t v92 = &v48[16 * v50];
        uint64_t v94 = *(void *)v92;
        uint64_t v93 = *((void *)v92 + 1);
        id v150 = v92;
        uint64_t v95 = (char *)(v21 + 8 * *(void *)v151);
        uint64_t v96 = (char *)(v21 + 8 * *(void *)v92);
        unint64_t v97 = v21 + 8 * v93;
        uint64_t v98 = v96 - v95;
        uint64_t v99 = v96 - v95 + 7;
        if (v96 - v95 >= 0) {
          uint64_t v99 = v96 - v95;
        }
        uint64_t v100 = v99 >> 3;
        uint64_t v101 = v97 - (void)v96;
        uint64_t v102 = v97 - (void)v96 + 7;
        if ((uint64_t)(v97 - (void)v96) >= 0) {
          uint64_t v102 = v97 - (void)v96;
        }
        uint64_t v103 = v102 >> 3;
        if (v100 >= v102 >> 3)
        {
          if (v101 < -7) {
            goto LABEL_219;
          }
          if ((unint64_t)v10 >= v97 || v10 != v96)
          {
            uint64_t v146 = v93;
            uint64_t v113 = *(void *)v151;
            uint64_t v114 = v94;
            memmove(v10, v96, 8 * v103);
            uint64_t v94 = v114;
            uint64_t v93 = v146;
            uint64_t v91 = v113;
            uint64_t v10 = __dst;
          }
          uint64_t v106 = &v10[8 * v103];
          uint64_t v21 = v147;
          if (v91 >= v94 || v101 < 8)
          {
            unint64_t v107 = v10;
            double v19 = v90;
            a2 = v89;
            goto LABEL_152;
          }
          uint64_t v115 = (char *)(v143 + 8 * v93);
          double v19 = v90;
          a2 = v89;
          while (2)
          {
            uint64_t v116 = *v89;
            uint64_t v117 = *((void *)v106 - 1) + *v89;
            if (*(unsigned char *)(v117 + 16)) {
              goto LABEL_203;
            }
            uint64_t v118 = v96 - 8;
            uint64_t v119 = *((void *)v96 - 1);
            uint64_t v120 = v119 + v116;
            if (*(unsigned char *)(v119 + v116 + 16)) {
              goto LABEL_204;
            }
            BOOL v121 = v115 + 8;
            if (*(double *)(v117 + 8) >= *(double *)(v120 + 8))
            {
              uint64_t v119 = *((void *)v106 - 1);
              uint64_t v118 = v96;
              if (v121 != v106)
              {
                v106 -= 8;
                goto LABEL_145;
              }
              BOOL v122 = v115 >= v106;
              v106 -= 8;
              if (v122) {
LABEL_145:
              }
                *(void *)uint64_t v115 = v119;
            }
            else if (v121 != v96 || v115 >= v96)
            {
              goto LABEL_145;
            }
            if (v95 >= v118 || (v115 -= 8, uint64_t v96 = v118, v10 >= v106))
            {
              unint64_t v107 = v10;
              uint64_t v96 = v118;
              goto LABEL_152;
            }
            continue;
          }
        }
        if (v98 < -7) {
          goto LABEL_219;
        }
        if (v10 != v95 || (double v19 = v90, v10 >= v96))
        {
          uint64_t v145 = v93;
          uint64_t v104 = *(void *)v151;
          uint64_t v105 = v94;
          memmove(v10, v95, 8 * v100);
          uint64_t v94 = v105;
          double v19 = v144;
          uint64_t v93 = v145;
          uint64_t v91 = v104;
          uint64_t v10 = __dst;
        }
        uint64_t v106 = &v10[8 * v100];
        a2 = v89;
        if (v94 < v93 && v98 >= 8)
        {
          unint64_t v107 = v10;
          while (1)
          {
            uint64_t v108 = *(void *)v96 + *v89;
            if (*(unsigned char *)(v108 + 16)) {
              goto LABEL_201;
            }
            uint64_t v109 = *(void *)v107;
            uint64_t v110 = *(void *)v107 + *v89;
            if (*(unsigned char *)(v110 + 16)) {
              goto LABEL_202;
            }
            if (*(double *)(v108 + 8) >= *(double *)(v110 + 8)) {
              break;
            }
            uint64_t v109 = *(void *)v96;
            BOOL v111 = v95 == v96;
            v96 += 8;
            if (!v111) {
              goto LABEL_123;
            }
LABEL_124:
            v95 += 8;
            if (v107 >= v106 || (unint64_t)v96 >= v97) {
              goto LABEL_150;
            }
          }
          char v112 = v107 + 8;
          if (v95 == v107)
          {
            v107 += 8;
            if (v95 < v112) {
              goto LABEL_124;
            }
          }
          else
          {
            v107 += 8;
          }
LABEL_123:
          *(void *)uint64_t v95 = v109;
          goto LABEL_124;
        }
        unint64_t v107 = v10;
LABEL_150:
        uint64_t v96 = v95;
        uint64_t v21 = v147;
LABEL_152:
        uint64_t v123 = v106 - v107;
        uint64_t v124 = v106 - v107 + 7;
        if (v123 >= 0) {
          uint64_t v124 = v123;
        }
        id v48 = v148;
        if (v123 <= -8) {
          goto LABEL_219;
        }
        uint64_t v125 = v124 >> 3;
        if (v96 != v107 || v96 >= &v107[8 * v125])
        {
          uint64_t v126 = v93;
          uint64_t v127 = v91;
          memmove(v96, v107, 8 * v125);
          uint64_t v93 = v126;
          uint64_t v91 = v127;
        }
        if (v93 < v91) {
          goto LABEL_178;
        }
        if (v50 > *((void *)v19 + 2)) {
          goto LABEL_179;
        }
        *(void *)uint64_t v151 = v91;
        *(void *)&v148[16 * v50 - 8] = v93;
        unint64_t v128 = *((void *)v19 + 2);
        if (v50 >= (uint64_t)v128) {
          goto LABEL_180;
        }
        unint64_t v23 = v128 - 1;
        memmove(v150, v150 + 16, 16 * (v128 - 1 - v50));
        *((void *)v19 + 2) = v128 - 1;
        uint64_t v10 = __dst;
        if (v128 <= 2) {
          goto LABEL_22;
        }
      }
    }
    unint64_t v23 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_164:
    if (v23 >= 2)
    {
      uint64_t v130 = *v137;
      while (1)
      {
        unint64_t v131 = v23 - 2;
        if (v23 < 2) {
          break;
        }
        if (!v130) {
          goto LABEL_218;
        }
        id v132 = v10;
        uint64_t v133 = *(void *)&v19[16 * v131 + 32];
        uint64_t v134 = *(void *)&v19[16 * v23 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v130 + 8 * v133), (char *)(v130 + 8 * *(void *)&v19[16 * v23 + 16]), v130 + 8 * v134, v10, a2);
        if (v141) {
          goto LABEL_175;
        }
        if (v134 < v133) {
          goto LABEL_195;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
        }
        if (v131 >= *((void *)v19 + 2)) {
          goto LABEL_196;
        }
        uint64_t v135 = &v19[16 * v131 + 32];
        *(void *)uint64_t v135 = v133;
        *((void *)v135 + 1) = v134;
        unint64_t v136 = *((void *)v19 + 2);
        if (v23 > v136) {
          goto LABEL_197;
        }
        memmove(&v19[16 * v23 + 16], &v19[16 * v23 + 32], 16 * (v136 - v23));
        *((void *)v19 + 2) = v136 - 1;
        unint64_t v23 = v136 - 1;
        uint64_t v10 = v132;
        if (v136 <= 2) {
          goto LABEL_175;
        }
      }
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
LABEL_207:
      __break(1u);
      goto LABEL_208;
    }
LABEL_175:
    swift_bridgeObjectRelease();
    *(void *)((v152 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
    specialized Array._endMutation()();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  Swift::Int v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v25 = __src;
  Swift::Int v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v18 = &v4[2 * v13];
      unint64_t v23 = (char *)v18;
      uint64_t v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        double v19 = (double *)(a3 - 16);
        do
        {
          Swift::Int v20 = v19 + 2;
          if (*(v18 - 1) >= *(v6 - 1))
          {
            unint64_t v23 = (char *)(v18 - 2);
            if (v20 < v18 || v19 >= v18 || v20 != v18) {
              *(_OWORD *)double v19 = *((_OWORD *)v18 - 1);
            }
            uint64_t v21 = v6;
            v18 -= 2;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            uint64_t v21 = v6 - 2;
            if (v20 != v6 || v19 >= v6) {
              *(_OWORD *)double v19 = *(_OWORD *)v21;
            }
            uint64_t v25 = v6 - 2;
            if (v21 <= v7) {
              break;
            }
          }
          v19 -= 2;
          uint64_t v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[2 * v10];
    unint64_t v23 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      uint64_t v15 = v4;
      while (1)
      {
        if (v6[1] >= v15[1])
        {
          Swift::Int v4 = v15 + 2;
          uint64_t v17 = v15;
          uint64_t v16 = v6;
          if (v7 == v15)
          {
            v15 += 2;
            if (v7 < v4) {
              goto LABEL_22;
            }
          }
          else
          {
            v15 += 2;
          }
        }
        else
        {
          uint64_t v16 = v6 + 2;
          uint64_t v17 = v6;
          if (v7 == v6 && v7 < v16) {
            goto LABEL_22;
          }
        }
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 2;
        if (v15 < v14)
        {
          uint64_t v6 = v16;
          if ((unint64_t)v16 < a3) {
            continue;
          }
        }
        Swift::Int v24 = v4;
        uint64_t v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  Swift::Int v4 = (uint64_t *)__dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v37 = __src;
  uint64_t v36 = (uint64_t *)__dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      unint64_t v23 = &v4[v13];
      Swift::Int v35 = v23;
      uint64_t v37 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        Swift::Int v24 = (char *)(a3 - 8);
        while (1)
        {
          uint64_t v25 = *(v23 - 1);
          uint64_t v26 = (double *)(v25 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
          if (*(unsigned char *)(v25 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16)) {
            break;
          }
          uint64_t v27 = (double *)(v25 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
          if (*(unsigned char *)(v25 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16)) {
            goto LABEL_52;
          }
          double v28 = v6 - 8;
          uint64_t v29 = *((void *)v6 - 1);
          if (*(unsigned char *)(v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16)) {
            goto LABEL_53;
          }
          if (*(unsigned char *)(v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16)) {
            goto LABEL_54;
          }
          uint64_t v32 = v24 + 8;
          double v33 = v26[1] - v27[1];
          uint64_t v31 = (double *)(v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
          double v30 = (double *)(v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
          if (v33 * v33 + (*v26 - *v27) * (*v26 - *v27) >= (v30[1] - v31[1]) * (v30[1] - v31[1])
                                                          + (*v30 - *v31) * (*v30 - *v31))
          {
            Swift::Int v35 = v23 - 1;
            if (v32 < (char *)v23 || v24 >= (char *)v23 || v32 != (char *)v23) {
              *(void *)Swift::Int v24 = *(v23 - 1);
            }
            --v23;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v32 != v6 || v24 >= v6) {
              *(void *)Swift::Int v24 = v29;
            }
            uint64_t v37 = v6 - 8;
            v6 -= 8;
            if (v28 <= v7) {
              goto LABEL_50;
            }
          }
          v24 -= 8;
          if (v23 <= v4) {
            goto LABEL_50;
          }
        }
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
LABEL_50:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v37, (const void **)&v36, &v35);
      return 1;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[v10];
    Swift::Int v35 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      while (1)
      {
        uint64_t v15 = *(void *)v6;
        uint64_t v16 = *(void *)v6 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition;
        if (*(unsigned char *)(v16 + 16)) {
          break;
        }
        uint64_t v17 = (double *)(v15 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
        if (*(unsigned char *)(v15 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16)) {
          goto LABEL_56;
        }
        uint64_t v18 = *v4;
        uint64_t v19 = *v4 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition;
        if (*(unsigned char *)(v19 + 16)) {
          goto LABEL_57;
        }
        if (*(unsigned char *)(v18 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16)) {
          goto LABEL_58;
        }
        double v21 = *(double *)(v16 + 8) - v17[1];
        Swift::Int v20 = (double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
        if (v21 * v21 + (*(double *)v16 - *v17) * (*(double *)v16 - *v17) >= (*(double *)(v19 + 8) - v20[1])
                                                                            * (*(double *)(v19 + 8) - v20[1])
                                                                            + (*(double *)v19 - *v20)
                                                                            * (*(double *)v19 - *v20))
        {
          if (v7 != (char *)v4) {
            *(void *)uint64_t v7 = v18;
          }
          uint64_t v36 = ++v4;
          Swift::Int v22 = v6;
        }
        else
        {
          Swift::Int v22 = v6 + 8;
          if (v7 < v6 || v7 >= v22 || v7 != v6) {
            *(void *)uint64_t v7 = v15;
          }
        }
        v7 += 8;
        if (v4 < v14)
        {
          uint64_t v6 = v22;
          if ((unint64_t)v22 < a3) {
            continue;
          }
        }
        uint64_t v37 = v7;
        goto LABEL_50;
      }
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_50;
  }
LABEL_59:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t *a5)
{
  uint64_t v6 = __dst;
  int64_t v8 = a2;
  int64_t v9 = __src;
  int64_t v10 = a2 - __src;
  int64_t v11 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v11 = a2 - __src;
  }
  uint64_t v12 = v11 >> 3;
  uint64_t v13 = a3 - (void)a2;
  uint64_t v14 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v14 = a3 - (void)a2;
  }
  uint64_t v15 = v14 >> 3;
  uint64_t v31 = __src;
  double v30 = __dst;
  if (v12 >= v14 >> 3)
  {
    if (v13 >= -7)
    {
      if (__dst != a2 || &a2[8 * v15] <= __dst) {
        memmove(__dst, a2, 8 * v15);
      }
      Swift::Int v20 = &v6[8 * v15];
      uint64_t v29 = v20;
      uint64_t v31 = v8;
      if (v9 < v8 && v13 >= 8)
      {
        double v21 = (char *)(a3 - 8);
        while (1)
        {
          uint64_t v22 = *a5;
          uint64_t v23 = *((void *)v20 - 1) + *a5;
          if (*(unsigned char *)(v23 + 16)) {
            break;
          }
          Swift::Int v24 = v8 - 8;
          uint64_t v25 = *((void *)v8 - 1);
          uint64_t v26 = v25 + v22;
          if (*(unsigned char *)(v25 + v22 + 16)) {
            goto LABEL_49;
          }
          uint64_t v27 = v21 + 8;
          if (*(double *)(v23 + 8) >= *(double *)(v26 + 8))
          {
            uint64_t v29 = v20 - 8;
            if (v27 < v20 || v21 >= v20 || v27 != v20) {
              *(void *)double v21 = *((void *)v20 - 1);
            }
            Swift::Int v24 = v8;
            v20 -= 8;
            if (v8 <= v9) {
              goto LABEL_47;
            }
          }
          else
          {
            if (v27 != v8 || v21 >= v8) {
              *(void *)double v21 = v25;
            }
            uint64_t v31 = v8 - 8;
            if (v24 <= v9) {
              goto LABEL_47;
            }
          }
          v21 -= 8;
          int64_t v8 = v24;
          if (v20 <= v6) {
            goto LABEL_47;
          }
        }
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
LABEL_47:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v31, &v30, &v29);
      return 1;
    }
  }
  else if (v10 >= -7)
  {
    if (__dst != __src || &__src[8 * v12] <= __dst) {
      memmove(__dst, __src, 8 * v12);
    }
    uint64_t v16 = &v6[8 * v12];
    uint64_t v29 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 8)
    {
      while (1)
      {
        uint64_t v17 = *(void *)v8 + *a5;
        if (*(unsigned char *)(v17 + 16)) {
          break;
        }
        uint64_t v18 = *(void *)v6 + *a5;
        if (*(unsigned char *)(v18 + 16)) {
          goto LABEL_51;
        }
        if (*(double *)(v17 + 8) >= *(double *)(v18 + 8))
        {
          if (v9 != v6 || v9 >= v6 + 8) {
            *(void *)int64_t v9 = *(void *)v6;
          }
          double v30 = v6 + 8;
          uint64_t v19 = v8;
          v6 += 8;
        }
        else
        {
          uint64_t v19 = v8 + 8;
          if (v9 < v8 || v9 >= v19 || v9 != v8) {
            *(void *)int64_t v9 = *(void *)v8;
          }
        }
        v9 += 8;
        if (v6 < v16)
        {
          int64_t v8 = v19;
          if ((unint64_t)v19 < a3) {
            continue;
          }
        }
        uint64_t v31 = v9;
        goto LABEL_47;
      }
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    goto LABEL_47;
  }
LABEL_52:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t vars8;

  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *Swift::Int v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SKNode] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [FMPFSKPatternFragmentNode] and conformance [A], &demangling cache variable for type metadata for [FMPFSKPatternFragmentNode]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FMPFSKPatternFragmentNode]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for FMPFSKPatternFragmentNode();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SKNode] and conformance [A](&lazy protocol witness table cache variable for type [SKNode] and conformance [A], &demangling cache variable for type metadata for [SKNode]);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SKNode]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for SKNode);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  Swift::Int v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x22A677580](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)Swift::Int v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  Swift::Int v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x22A677580](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)Swift::Int v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id specialized FMPFSKPatternNode.arrowFragmentNodesWith(spineBottom:spineTop:dotCount:ignoreTop:dotDiameter:explodedDiskRadius:peripheralDiskRadius:color:conformedToExplodedFactor:conformationFactor:startIndex:)(double *a1, unint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  LOBYTE(v18) = a7;
  LOBYTE(v19) = a5;
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKNode()), sel_init);
  uint64_t v74 = result;
  uint64_t v79 = MEMORY[0x263F8EE78];
  uint64_t v29 = (char *)a1 - 1;
  if (__OFSUB__(a1, 1)) {
    goto LABEL_22;
  }
  uint64_t v17 = (uint64_t)a1 - (a2 & 1);
  uint64_t v69 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType;
  if (*((unsigned char *)v14 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType) != 1)
  {
    a1 = (double *)&xmmword_26817C7A8 + 1;
    a2 = (unint64_t)&xmmword_26817C7C8 + 8;
    uint64_t v15 = &xmmword_26817C7C8;
    uint64_t v16 = (double *)&xmmword_26817C7B8 + 1;
    if (one-time initialization token for r1OrBT != -1) {
      goto LABEL_24;
    }
    goto LABEL_6;
  }
  a1 = (double *)&xmmword_26817C878 + 1;
  a2 = (unint64_t)&xmmword_26817C898 + 8;
  uint64_t v15 = &xmmword_26817C898;
  uint64_t v16 = (double *)&xmmword_26817C888 + 1;
  if (one-time initialization token for r1NoAR == -1)
  {
LABEL_6:
    if ((v17 & 0x8000000000000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  while (1)
  {
    id result = (id)swift_once();
    if (v17 < 0) {
      break;
    }
LABEL_7:
    if (!v17) {
      return v74;
    }
    double v67 = *v16 * 0.5;
    double v68 = *v16 * -0.5;
    if (v68 <= v67)
    {
      uint64_t v64 = v17;
      uint64_t v66 = v14;
      char v62 = v18 & 1;
      char v63 = v19 & 1;
      double v61 = (a11 - a9) / (double)(uint64_t)v29;
      uint64_t v59 = *(void *)v15;
      double v60 = *(double *)a2;
      double v57 = (a12 - a10) / (double)(uint64_t)v29;
      double v58 = *a1;
      type metadata accessor for FMPFView();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      uint64_t v17 = self;
      uint64_t v30 = self;
      uint64_t v19 = (void *)v30;
      uint64_t v18 = 0;
      a2 = 0x80000002273FD280;
      double v65 = a14;
      while (1)
      {
        double v76 = a9;
        a9 = a10;
        specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v30, v68, v67);
        a11 = 1.0;
        double v32 = (1.0 - v31) * a14;
        a12 = FMPFSKQuadrant.randomPositionAlongDiskWithRadius(_:defaultAngle:multiplier:clockwise:)(*(uint64_t *)&v32, 0, 0, 1, 2u, 8, 1.0);
        a10 = v33;
        double v35 = v34;
        uint64_t v36 = specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001);
        a14 = 1.0;
        double v37 = v36 == 0x20000000000000 ? 1.0 : ((double)(unint64_t)v36 * 1.11022302e-16 * 100.0 + 0.0) / 100.0;
        specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v36, 0.0, 3.14159265);
        specialized RandomNumberGenerator.next<A>(upperBound:)(0x7FFFFFFFFFFFFFFFLL);
        __double2 v38 = __sincos_stret(a12);
        if (__OFADD__(a8, v18)) {
          break;
        }
        uint64_t v77 = 0x746E656D67617246;
        unint64_t v78 = 0xE900000000000023;
        v39._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        uint64_t v41 = v77;
        uint64_t v40 = v78;
        id v42 = objc_msgSend((id)v17, sel_bundleForClass_, ObjCClassFromMetadata);
        uint64_t v43 = (void *)MEMORY[0x22A677130](0xD000000000000016, 0x80000002273FD280);
        id v44 = objc_msgSend(v19, sel_imageNamed_inBundle_compatibleWithTraitCollection_, v43, v42, 0);

        double v75 = a10;
        if (v44)
        {
          id v45 = objc_msgSend(self, sel_textureWithImage_, v44);

          id v42 = v44;
        }
        else
        {
          id v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F17C38]), sel_init);
        }
        double v46 = a13 - v58 * ((1.0 - v37) * a13);

        LOBYTE(v77) = *((unsigned char *)v66 + v69);
        uint64_t v16 = (double *)objc_allocWithZone((Class)type metadata accessor for FMPFSKPatternFragmentNode());
        id v47 = a3;
        a1 = (double *)v45;
        double v48 = a9;
        *(double *)&uint64_t v54 = v38.__cosval * v46;
        *(double *)&uint64_t v55 = v38.__sinval * v46;
        a14 = v65;
        uint64_t v53 = FMPFSKPatternFragmentNode.init(experienceType:name:color:randomFactor:texture:imageName:minScaleFactor:maxScaleFactor:explodedDiskRadius:peripheralDiskRadius:innerPeripheralDiskRadius:explodedPosition:peripheralPosition:composedPosition:conformedToExplodedFactor:conformationFactor:scalingFactor:)((unsigned __int8 *)&v77, v41, v40, a3, v45, 0, 0, v59, v37, a13 - v58 * ((1.0 - v37) * a13), v65, v32, v49, v50, v51, v52, 0, v60, 0,
                v54,
                v55,
                0,
                v75,
                v35,
                0,
                *(uint64_t *)&v76,
                *(uint64_t *)&a9,
                0,
                a4,
                v63,
                a6,
                v62,
                0,
                0);
        objc_msgSend(v74, sel_addChild_, v53);
        uint64_t v29 = v53;
        id v14 = &v79;
        MEMORY[0x22A677220]();
        uint64_t v15 = *(long long **)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if ((unint64_t)v15 >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        ++v18;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        a9 = v61 + v76;
        a10 = v57 + v48;
        if (v64 == v18) {
          return v74;
        }
      }
      __break(1u);
LABEL_22:
      __break(1u);
    }
    __break(1u);
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized FMPFSKPatternNode.tapeFragmentNodesWith(spineBottom:spineTop:dotCount:dotDiameter:peripheralDiskRadius:color:conformationFactor:startIndex:)(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, double sinval, double a7, double a8, double cosval, double a10)
{
  LOBYTE(v11) = a4;
  uint64_t v18 = (objc_class *)type metadata accessor for FMPFSKNode();
  uint64_t v19 = &selRef_userIntentButtonEdge;
  id v109 = objc_msgSend(objc_allocWithZone(v18), sel_init);
  uint64_t v114 = MEMORY[0x263F8EE78];
  uint64_t v110 = v10;
  uint64_t v108 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType;
  if (*(unsigned char *)(v10 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType) == 1)
  {
    Swift::Int v20 = (double *)&xmmword_26817C888 + 1;
    double v21 = (double *)&xmmword_26817C898 + 1;
    uint64_t v22 = &xmmword_26817C898;
    if (one-time initialization token for r1NoAR == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    Swift::Int v20 = (double *)&xmmword_26817C7B8 + 1;
    double v21 = (double *)&xmmword_26817C7C8 + 1;
    uint64_t v22 = &xmmword_26817C7C8;
    if (one-time initialization token for r1OrBT == -1) {
      goto LABEL_5;
    }
  }
  while (1)
  {
    swift_once();
LABEL_5:
    if (a1 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = a1;
    }
    if (__OFSUB__(a1, 1)) {
      goto LABEL_79;
    }
    uint64_t v103 = *(void *)v22;
    double v104 = *v21;
    double v24 = *v20;
    double v25 = (double)(a1 - 1);
    uint64_t v19 = (char **)[objc_allocWithZone(v18) v19[400]];
    uint64_t v26 = v110 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config;
    double v95 = 0.0;
    if ((*(unsigned char *)(v110 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config + 64) & 1) != 0
      || (*(unsigned char *)(v26 + 80) & 1) != 0)
    {
      char v102 = 1;
      if (a1 < 0) {
        goto LABEL_74;
      }
    }
    else
    {
      char v102 = 0;
      double v95 = -(*(double *)(v26 + 72) - *(double *)(v26 + 56)) / v25;
      if (a1 < 0)
      {
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
    }
    uint64_t v101 = v110 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config;
    if (a1)
    {
      double v27 = a8 - sinval;
      double v28 = cosval - a7;
      a8 = 6.28318531 / (double)v23;
      double v29 = v27 / v25;
      double v30 = v28 / v25;
      double v31 = (void *)MEMORY[0x263F8EE78];
      double v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
      unint64_t v33 = v32[2];
      uint64_t v34 = 2 * v33;
      uint64_t v35 = a1;
      do
      {
        unint64_t v36 = v32[3];
        unint64_t v37 = v33 + 1;
        if (v33 >= v36 >> 1) {
          double v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v33 + 1, 1, v32);
        }
        id v32[2] = v37;
        __double2 v38 = (double *)&v32[v34];
        v38[4] = sinval;
        v38[5] = a7;
        sinval = v29 + sinval;
        a7 = v30 + a7;
        v34 += 2;
        unint64_t v33 = v37;
        --v35;
      }
      while (v35);
      uint64_t v113 = v31;
      Swift::String v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v31);
      unint64_t v40 = v39[2];
      uint64_t v41 = 2 * v40;
      a7 = -2.22044605e-16;
      do
      {
        __double2 v42 = __sincos_stret(a7);
        sinval = v42.__sinval;
        cosval = v42.__cosval;
        unint64_t v43 = v39[3];
        if (v40 >= v43 >> 1) {
          Swift::String v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v43 > 1), v40 + 1, 1, v39);
        }
        _OWORD v39[2] = v40 + 1;
        id v44 = (double *)&v39[v41];
        v44[4] = v42.__cosval * a10;
        v44[5] = v42.__sinval * a10;
        a7 = a7 - a8;
        v41 += 2;
        ++v40;
        --a1;
      }
      while (a1);
    }
    else
    {
      Swift::String v39 = (void *)MEMORY[0x263F8EE78];
      double v32 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v113 = v39;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v113, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
    uint64_t v45 = (uint64_t)v113;
    uint64_t v46 = v113[2];
    if (v46)
    {
      swift_bridgeObjectRetain();
      uint64_t v47 = 0;
      uint64_t v48 = MEMORY[0x263F8EE78];
      do
      {
        uint64_t v52 = v45 + 16 * v47;
        if (*(double *)(v52 + 40) < 0.0)
        {
          long long v98 = *(_OWORD *)(v52 + 32);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v115[0] = v48;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v48 + 16) + 1, 1);
            uint64_t v48 = v115[0];
          }
          unint64_t v50 = *(void *)(v48 + 16);
          unint64_t v49 = *(void *)(v48 + 24);
          long long v51 = v98;
          if (v50 >= v49 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
            long long v51 = v98;
            uint64_t v48 = v115[0];
          }
          *(void *)(v48 + 16) = v50 + 1;
          *(_OWORD *)(v48 + 16 * v50 + 32) = v51;
        }
        ++v47;
      }
      while (v46 != v47);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v48 = MEMORY[0x263F8EE78];
    }
    v115[0] = v48;
    specialized MutableCollection<>.shuffle<A>(using:)();
    Swift::Int v20 = (double *)v115[0];
    uint64_t v22 = *(long long **)(v45 + 16);
    if (v22)
    {
      swift_bridgeObjectRetain();
      uint64_t v54 = 0;
      uint64_t v55 = MEMORY[0x263F8EE78];
      do
      {
        uint64_t v58 = v45 + 16 * (void)v54;
        if (*(double *)(v58 + 40) >= 0.0)
        {
          long long v99 = *(_OWORD *)(v58 + 32);
          char v59 = swift_isUniquelyReferenced_nonNull_native();
          v115[0] = v55;
          if ((v59 & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v55 + 16) + 1, 1);
            uint64_t v55 = v115[0];
          }
          a1 = *(void *)(v55 + 16);
          unint64_t v56 = *(void *)(v55 + 24);
          long long v57 = v99;
          if (a1 >= v56 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, a1 + 1, 1);
            long long v57 = v99;
            uint64_t v55 = v115[0];
          }
          *(void *)(v55 + 16) = a1 + 1;
          *(_OWORD *)(v55 + 16 * a1 + 32) = v57;
        }
        uint64_t v54 = (long long *)((char *)v54 + 1);
      }
      while (v22 != v54);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v55 = MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    v115[0] = v55;
    specialized MutableCollection<>.shuffle<A>(using:)();
    uint64_t v60 = v115[0];
    v115[0] = v20;
    uint64_t v61 = specialized Array.append<A>(contentsOf:)(v60);
    uint64_t v18 = (objc_class *)v115[0];
    double v21 = *(double **)(v115[0] + 16);
    if (!v21) {
      break;
    }
    double v97 = v24 * 0.5;
    double v100 = v24 * -0.5;
    if (v24 * -0.5 <= v24 * 0.5)
    {
      if ((unint64_t)v21 > v32[2]) {
        goto LABEL_81;
      }
      uint64_t v94 = v19;
      uint64_t v19 = 0;
      Swift::Int v20 = 0;
      char v96 = v11 & 1;
      sinval = 1.0;
      uint64_t v22 = (long long *)0x80000002273FD3F0;
      while (1)
      {
        long double v62 = *(double *)((char *)v19 + (void)v18 + 32);
        a7 = *(double *)((char *)v19 + (void)v18 + 40);
        cosval = *(double *)((char *)v19 + (void)v32 + 32);
        a8 = *(double *)((char *)v19 + (void)v32 + 40);
        specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v61, v100, v97);
        double v64 = v63;
        unint64_t v65 = specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001);
        if (__OFADD__(a5, v20)) {
          goto LABEL_75;
        }
        if (v65 == 0x20000000000000) {
          double v66 = 1.0;
        }
        else {
          double v66 = ((double)v65 * 1.11022302e-16 * 100.0 + 0.0) / 100.0;
        }
        double v67 = atan2(a7, v62);
        __double2 v68 = __sincos_stret(v67);
        double v69 = (1.0 - v64) * a10;
        a7 = v69 * v68.__sinval;
        uint64_t v111 = 0x746E656D67617246;
        unint64_t v112 = 0xE900000000000023;
        v70._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v70);
        swift_bridgeObjectRelease();
        uint64_t v71 = v111;
        uint64_t v72 = v112;
        LOBYTE(v111) = *(unsigned char *)(v110 + v108);
        id v73 = objc_allocWithZone((Class)type metadata accessor for FMPFSKPatternFragmentNode());
        id v74 = a2;
        uint64_t v79 = FMPFSKPatternFragmentNode.init(experienceType:name:color:randomFactor:texture:imageName:minScaleFactor:maxScaleFactor:explodedDiskRadius:peripheralDiskRadius:innerPeripheralDiskRadius:explodedPosition:peripheralPosition:composedPosition:conformedToExplodedFactor:conformationFactor:scalingFactor:)((unsigned __int8 *)&v111, v71, v72, a2, 0, 0xD000000000000015, 0x80000002273FD3F0, v103, v66, v69, a10, v69, v75, v76, v77, v78, 0, v104, 0,
                COERCE__INT64(v69 * v68.__cosval),
                *(uint64_t *)&a7,
                0,
                v69 * v68.__cosval,
                a7,
                0,
                *(uint64_t *)&cosval,
                *(uint64_t *)&a8,
                0,
                0,
                0,
                a3,
                v96,
                0,
                0);
        objc_msgSend(v109, sel_addChild_, v79);
        a1 = v79;
        MEMORY[0x22A677220]();
        unint64_t v11 = *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v11 >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = specialized Array._endMutation()();
        if ((v102 & 1) == 0
          && *(unsigned char *)(v101 + 80) != 1
          && (*(unsigned char *)(v101 + 16) & 1) == 0
          && (*(unsigned char *)(v101 + 96) & 1) == 0)
        {
          uint64_t v81 = *(void *)(v101 + 8);
          uint64_t v82 = v81 + 1;
          if (__OFADD__(v81, 1)) {
            goto LABEL_76;
          }
          uint64_t v83 = *(void *)(v101 + 88);
          uint64_t v84 = v82 * v83;
          if ((unsigned __int128)(v82 * (__int128)v83) >> 64 != (v82 * v83) >> 63) {
            goto LABEL_77;
          }
          if (!v84) {
            goto LABEL_78;
          }
          if (!((uint64_t)v20 % v84))
          {
            double v85 = round((v95 * (double)(uint64_t)v20 + *(double *)(v101 + 72)) * 10.0) / 10.0;
            double v86 = v85 * 10.0;
            if ((~COERCE__INT64(v85 * 10.0) & 0x7FF0000000000000) == 0)
            {
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
              return result;
            }
            if (v86 <= -9.22337204e18) {
              goto LABEL_84;
            }
            if (v86 >= 9.22337204e18) {
              goto LABEL_85;
            }
            uint64_t v87 = (uint64_t)v86;
            id v88 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08A30]), sel_init);
            objc_msgSend(v88, sel_setNumberStyle_, 1);
            if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v87 + 0x1999999999999998, 1) <= 0x1999999999999998uLL)
            {
              objc_msgSend(v88, sel_setMaximumFractionDigits_, 0);
            }
            else
            {
              objc_msgSend(v88, sel_setMinimumFractionDigits_, 1);
              objc_msgSend(v88, sel_setMaximumFractionDigits_, 1);
            }
            unint64_t v11 = (unint64_t)objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v85);
            id v89 = objc_msgSend(v88, sel_stringFromNumber_, v11);

            if (v89)
            {
              unint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v91 = v90;

              LOBYTE(v111) = *(unsigned char *)(v110 + v108);
              outlined init with take of FMPFSKLabelNodeStyle?(v101 + 120, (uint64_t)v115);
              id v92 = objc_allocWithZone((Class)type metadata accessor for FMPFSKLabelNode());
              outlined retain of FMPFSKLabelNodeStyle?((uint64_t)v115);
              id v93 = FMPFSKLabelNode.init(experienceType:style:text:position:normalizedIndex:)(&v111, (uint64_t)v115, v11, v91, cosval, a8, 1.0 - (double)(uint64_t)v20 / (double)(uint64_t)v21);
              objc_msgSend(v94, sel_addChild_, v93);
            }
          }
        }
        Swift::Int v20 = (double *)((char *)v20 + 1);

        v19 += 2;
        if (v21 == v20) {
          goto LABEL_72;
        }
      }
    }
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
  }
LABEL_72:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v109;
}

uint64_t lazy protocol witness table accessor for type [SKNode] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of FMPFSKLabelNodeStyle?(uint64_t a1)
{
  return a1;
}

Swift::Void __swiftcall FMPFSKPeripheralDotNode.updateWithDeltaTime(_:)(Swift::Double a1)
{
  uint64_t v2 = v1;
  if (v1[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyDiskRadius] == 1)
  {
    uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring;
    uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring];
    if (!FMPFFluidSpring.isStable.getter())
    {
      FLSpring.step(_:)(a1);
      *(unsigned char *)(v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      uint64_t v6 = *(void *)&v2[v4];
      uint64_t v7 = (double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      double v8 = v7[35] + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      if (vabdd_f64(v8, *v7 + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
        double v8 = *v7 + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      }
      uint64_t v9 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
      double *v9 = v8;
      *((unsigned char *)v9 + 8) = 0;
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode], sel_setPosition_, 0.0);
    }
  }
  if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyDotScale] == 1)
  {
    uint64_t v10 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring;
    uint64_t v11 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring];
    if (!FMPFFluidSpring.isStable.getter())
    {
      FLSpring.step(_:)(a1);
      *(unsigned char *)(v11 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      uint64_t v12 = *(void *)&v2[v10];
      uint64_t v13 = (double *)(v12 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      double v14 = *v13 + *(double *)(v12 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      if (vabdd_f64(v13[35] + *(double *)(v12 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v14) <= *(double *)(v12 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
        double v14 = v13[35] + *(double *)(v12 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      }
      uint64_t v15 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale];
      *uint64_t v15 = v14;
      *((unsigned char *)v15 + 8) = 0;
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode], sel_setScale_, v14 * *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_subScale]);
    }
  }
  if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyAngle] == 1)
  {
    uint64_t v16 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring;
    uint64_t v17 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring];
    if (!FMPFFluidSpring.isStable.getter()
      && v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interactiveAngleFactor + 8] == 1)
    {
      FLSpring.step(_:)(a1);
      *(unsigned char *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      uint64_t v18 = *(void *)&v2[v16];
      uint64_t v19 = (double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      double v20 = *v19 + *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      if (vabdd_f64(v19[35] + *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v20) <= *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
        double v20 = v19[35] + *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      }
      double v21 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle];
      *double v21 = v20;
      *((unsigned char *)v21 + 8) = 0;
      if (!*(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction]) {
        objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode], sel_setZRotation_);
      }
    }
  }
  if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyOpacity] == 1)
  {
    uint64_t v22 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacitySpring;
    uint64_t v23 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacitySpring];
    if (!FMPFFluidSpring.isStable.getter())
    {
      FLSpring.step(_:)(a1);
      *(unsigned char *)(v23 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      uint64_t v24 = *(void *)&v2[v22];
      double v25 = (double *)(v24 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      if (vabdd_f64(v25[35] + *(double *)(v24 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v25 + *(double *)(v24 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v24+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))double v26 = *v25 + *(double *)(v24 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o); {
      else
      }
        double v26 = v25[35] + *(double *)(v24 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      double v27 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOpacity];
      double *v27 = v26;
      *((unsigned char *)v27 + 8) = 0;
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode], sel_setAlpha_, v26);
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode], sel_setAlpha_, v26);
    }
  }
  if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyBrightness] == 1)
  {
    uint64_t v28 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightnessSpring;
    uint64_t v29 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightnessSpring];
    if (!FMPFFluidSpring.isStable.getter())
    {
      FLSpring.step(_:)(a1);
      *(unsigned char *)(v29 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      uint64_t v30 = *(void *)&v2[v28];
      double v31 = (double *)(v30 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      if (vabdd_f64(v31[35] + *(double *)(v30 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v31 + *(double *)(v30 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v30+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))double v32 = *v31 + *(double *)(v30 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o); {
      else
      }
        double v32 = v31[35] + *(double *)(v30 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      unint64_t v33 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness];
      double *v33 = v32;
      *((unsigned char *)v33 + 8) = 0;
      uint64_t v34 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor];
      id v35 = *(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode];
      id v36 = v34;
      FMPFSKSpriteNode.setBrightness(_:with:)(v36, v32);
    }
  }
  if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyOffset] == 1)
  {
    uint64_t v37 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_xOffsetSpring;
    uint64_t v38 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_xOffsetSpring];
    if (!FMPFFluidSpring.isStable.getter() || !FMPFFluidSpring.isStable.getter())
    {
      FLSpring.step(_:)(a1);
      *(unsigned char *)(v38 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      uint64_t v39 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_yOffsetSpring;
      uint64_t v40 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_yOffsetSpring];
      FLSpring.step(_:)(a1);
      *(unsigned char *)(v40 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      uint64_t v41 = *(void *)&v2[v37];
      __double2 v42 = (double *)(v41 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      if (vabdd_f64(v42[35] + *(double *)(v41 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v42 + *(double *)(v41 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v41+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))double v43 = *v42 + *(double *)(v41 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o); {
      else
      }
        double v43 = v42[35] + *(double *)(v41 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      uint64_t v44 = *(void *)&v2[v39];
      uint64_t v45 = (double *)(v44 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      double v46 = v45[35] + *(double *)(v44 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      if (vabdd_f64(v46, *v45 + *(double *)(v44 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v44 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
        double v46 = *v45 + *(double *)(v44 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      }
      uint64_t v47 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOffset];
      double *v47 = v43;
      v47[1] = v46;
      *((unsigned char *)v47 + 16) = 0;
      objc_msgSend(v2, sel_setPosition_, v43);
    }
  }
  if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyRadiusFactor] == 1)
  {
    uint64_t v48 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_radiusFactorSpring;
    uint64_t v49 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_radiusFactorSpring];
    if (!FMPFFluidSpring.isStable.getter()
      && (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_radiusFactor + 8] & 1) == 0)
    {
      FLSpring.step(_:)(a1);
      *(unsigned char *)(v49 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      uint64_t v50 = *(void *)&v2[v48];
      long long v51 = (double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      double v52 = *v51 + *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      if (vabdd_f64(v51[35] + *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v52) <= *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
        double v52 = v51[35] + *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      }
      FMPFSKPeripheralDotNode.applyRadiusFactor(_:)(v52);
    }
  }
  uint64_t v53 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_headingSpring;
  uint64_t v54 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_headingSpring];
  if (!FMPFFluidSpring.isStable.getter()
    && *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction])
  {
    FLSpring.step(_:)(a1);
    *(unsigned char *)(v54 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    uint64_t v55 = *(void *)&v2[v53];
    unint64_t v56 = (double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    double v57 = *v56 + *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    if (vabdd_f64(v56[35] + *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v57) <= *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
      double v57 = v56[35] + *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    }
    *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAbsoluteHeading] = v57;
    objc_msgSend(v2, sel_setZRotation_, v57 / 180.0 * 3.14159265);
  }
  uint64_t v58 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode];
  uint64_t v59 = *(void *)(v58 + OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDiskNode);
  uint64_t v60 = *(void *)(v59 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_sizeSpring);
  FLSpring.step(_:)(a1);
  *(unsigned char *)(v60 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  uint64_t v61 = *(void *)(v59 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_opacitySpring);
  FLSpring.step(_:)(a1);
  *(unsigned char *)(v61 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  FMPFSKBTRangeDiskNode.render()();
  FMPFSKBTRangeDotNode.update(delta:)(a1);
  unint64_t v62 = *(void *)(*(void *)(v58 + OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_levelRingsNode)
                  + OBJC_IVAR____TtC10TVRemoteUI18FMPFSKBTLevelsNode_ringNodes);
  if (!(v62 >> 62))
  {
    uint64_t v63 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v63) {
      goto LABEL_52;
    }
LABEL_59:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v63 = _CocoaArrayWrapper.endIndex.getter();
  if (!v63) {
    goto LABEL_59;
  }
LABEL_52:
  if (v63 >= 1)
  {
    uint64_t v64 = 0;
    do
    {
      if ((v62 & 0xC000000000000001) != 0) {
        unint64_t v65 = (char *)MEMORY[0x22A677580](v64, v62);
      }
      else {
        unint64_t v65 = (char *)*(id *)(v62 + 8 * v64 + 32);
      }
      double v66 = v65;
      ++v64;
      uint64_t v67 = *(void *)&v65[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_visibilitySpring];
      FLSpring.step(_:)(a1);
      *(unsigned char *)(v67 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      uint64_t v68 = *(void *)&v66[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_collapseSpring];
      FLSpring.step(_:)(a1);
      *(unsigned char *)(v68 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      FMPFSKBTLevelRingNode.render()();
    }
    while (v63 != v64);
    goto LABEL_59;
  }
  __break(1u);
}

void FMPFSKPeripheralDotNode.applyRadiusFactor(_:)(double a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedRadiusFactor;
  *(double *)uint64_t v3 = a1;
  *(unsigned char *)(v3 + 8) = 0;
  uint64_t v4 = v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style;
  double v5 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style + 72);
  double v6 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_pixelsPerInch);
  id v7 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v7, sel_scale);
  double v9 = v8;

  double v10 = (1.0 - a1) * *(double *)(v4 + 48) + *(double *)(v4 + 40) * a1;
  uint64_t v11 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interativeRadiusBeaconNode;
  uint64_t v12 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interativeRadiusBeaconNode);
  if (v12) {
    objc_msgSend(v12, sel_setScale_, (1.0 - a1) * *(double *)(v4 + 80)+ v5 * v6 / v9 / *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotDiameter) * a1);
  }
  id v15 = objc_msgSend(*(id *)(v4 + 56), sel_colorWithAlphaComponent_, v10);
  uint64_t v13 = *(void **)(v1 + v11);
  if (v13)
  {
    id v14 = v13;
    objc_msgSend(v14, sel_setColor_, v15);
  }
}

uint64_t thunk for @escaping @callee_unowned @convention(block) () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

id TVRUITipManager.popoverPresentationConductor.getter()
{
  uint64_t v1 = OBJC_IVAR___TVRUITipManager____lazy_storage___popoverPresentationConductor;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___TVRUITipManager____lazy_storage___popoverPresentationConductor);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___TVRUITipManager____lazy_storage___popoverPresentationConductor);
  }
  else
  {
    uint64_t v4 = (objc_class *)type metadata accessor for TipPopoverPresentationConductor();
    id v5 = objc_allocWithZone(v4);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v10.receiver = v5;
    v10.super_class = v4;
    id v6 = objc_msgSendSuper2(&v10, sel_init);
    id v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

uint64_t TVRUITipManager.init(tipSourceViewProvider:tipType:)(void *a1, uint64_t a2)
{
  *(void *)&v2[OBJC_IVAR___TVRUITipManager_tipObservation] = 0;
  *(void *)&v2[OBJC_IVAR___TVRUITipManager_presentingViewController] = 0;
  *(void *)&v2[OBJC_IVAR___TVRUITipManager_tipsViewController] = 0;
  *(void *)&v2[OBJC_IVAR___TVRUITipManager_popoverPresentationController] = 0;
  *(void *)&v2[OBJC_IVAR___TVRUITipManager____lazy_storage___popoverPresentationConductor] = 0;
  if (a2 == 1)
  {
    uint64_t v4 = OBJC_IVAR___TVRUITipManager_tip;
    *(void *)&v2[OBJC_IVAR___TVRUITipManager_tip + 24] = &type metadata for SiriTip;
    unint64_t v5 = lazy protocol witness table accessor for type SiriTip and conformance SiriTip();
LABEL_5:
    *(void *)&v2[v4 + 32] = v5;
    v8.receiver = v2;
    v8.super_class = (Class)TVRUITipManager;
    id v6 = objc_msgSendSuper2(&v8, sel_init);
    TVRUITipManager.commonInit(tipSourceViewProvider:)(a1);

    return (uint64_t)v6;
  }
  if (!a2)
  {
    uint64_t v4 = OBJC_IVAR___TVRUITipManager_tip;
    *(void *)&v2[OBJC_IVAR___TVRUITipManager_tip + 24] = &type metadata for InfoTip;
    unint64_t v5 = lazy protocol witness table accessor for type InfoTip and conformance InfoTip();
    goto LABEL_5;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id TVRUITipManager.commonInit(tipSourceViewProvider:)(void *a1)
{
  double v20 = a1;
  uint64_t v1 = type metadata accessor for Tips.ConfigurationOption.AnalyticsEngine();
  uint64_t v17 = *(void *)(v1 - 8);
  uint64_t v18 = v1;
  MEMORY[0x270FA5388]();
  id v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Tips.ConfigurationOption.DatastoreLocation();
  uint64_t v15 = *(void *)(v4 - 8);
  uint64_t v16 = v4;
  MEMORY[0x270FA5388]();
  id v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Tips.ConfigurationOption.DisplayFrequency();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  objc_super v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.ConfigurationOption>);
  type metadata accessor for Tips.ConfigurationOption();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_2273F56E0;
  static Tips.ConfigurationOption.DisplayFrequency.immediate.getter();
  static Tips.ConfigurationOption.displayFrequency(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  static Tips.ConfigurationOption.DatastoreLocation.tipsGroupContainer.getter();
  static Tips.ConfigurationOption.datastoreLocation(_:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v16);
  static Tips.ConfigurationOption.AnalyticsEngine.coreAnalytics.getter();
  static Tips.ConfigurationOption.analyticsEngine(_:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v18);
  static Tips.configure(_:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void **)(v19 + OBJC_IVAR___TVRUITipManager_presentingViewController);
  *(void *)(v19 + OBJC_IVAR___TVRUITipManager_presentingViewController) = v20;

  uint64_t v12 = v20;
  return v12;
}

uint64_t TVRUITipManager.setupTipsObserver()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t result = MEMORY[0x270FA5388]();
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = OBJC_IVAR___TVRUITipManager_tipObservation;
  if (!*(void *)&v0[OBJC_IVAR___TVRUITipManager_tipObservation])
  {
    if (one-time initialization token for tip != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.tip);
    uint64_t v7 = v0;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      objc_super v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)objc_super v10 = 136315138;
      uint64_t v21 = v11;
      v19[1] = v10 + 4;
      outlined init with copy of Tip((uint64_t)&v7[OBJC_IVAR___TVRUITipManager_tip], (uint64_t)v20);
      __swift_project_boxed_opaque_existential_1(v20, v20[3]);
      swift_getDynamicType();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      uint64_t v12 = _typeName(_:qualified:)();
      v20[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227326000, v8, v9, "Setting up tip observation for %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v11, -1, -1);
      MEMORY[0x22A6785E0](v10, -1, -1);
    }
    else
    {
    }
    uint64_t v14 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v4, 1, 1, v14);
    type metadata accessor for MainActor();
    uint64_t v15 = v7;
    uint64_t v16 = static MainActor.shared.getter();
    uint64_t v17 = (void *)swift_allocObject();
    uint64_t v18 = MEMORY[0x263F8F500];
    id v17[2] = v16;
    v17[3] = v18;
    v17[4] = v15;
    *(void *)&v1[v5] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in TVRUITipManager.setupTipsObserver(), (uint64_t)v17);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in TVRUITipManager.setupTipsObserver()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v4[6] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Status?);
  v4[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Tips.Status();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v4[12] = swift_task_alloc();
  v4[13] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v4[14] = swift_task_alloc();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  v4[15] = v6;
  v4[16] = *(void *)(v6 - 8);
  v4[17] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v4[18] = v7;
  v4[19] = *(void *)(v7 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = type metadata accessor for MainActor();
  v4[23] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[24] = v8;
  v4[25] = v9;
  return MEMORY[0x270FA2498](closure #1 in TVRUITipManager.setupTipsObserver(), v8);
}

uint64_t closure #1 in TVRUITipManager.setupTipsObserver()()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[15];
  uint64_t v4 = (void *)(v0[6] + OBJC_IVAR___TVRUITipManager_tip);
  uint64_t v5 = v4[3];
  uint64_t v6 = __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = swift_task_alloc();
  (*(void (**)(uint64_t, void *, uint64_t))(v7 + 16))(v8, v6, v5);
  Tip.shouldDisplayUpdates.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v5);
  MEMORY[0x22A677610](v3);
  lazy protocol witness table accessor for type AsyncStream<Tips.Status> and conformance AsyncStream<A>(&lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>, &demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.Iterator.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_task_dealloc();
  uint64_t v9 = static MainActor.shared.getter();
  v0[26] = v9;
  if (v9)
  {
    swift_getObjectType();
    uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  v0[27] = v10;
  v0[28] = v12;
  return MEMORY[0x270FA2498](closure #1 in TVRUITipManager.setupTipsObserver(), v10);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[26];
  v0[29] = AsyncMapSequence.Iterator.baseIterator.modify();
  lazy protocol witness table accessor for type AsyncStream<Tips.Status> and conformance AsyncStream<A>(&lazy protocol witness table cache variable for type AsyncStream<Tips.Status>.Iterator and conformance AsyncStream<A>.Iterator, &demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[30] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in TVRUITipManager.setupTipsObserver();
  uint64_t v3 = v0[7];
  uint64_t v4 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA1E88](v3, v1, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 216);
    uint64_t v4 = closure #1 in TVRUITipManager.setupTipsObserver();
  }
  else
  {
    (*(void (**)(void))(v2 + 232))();
    uint64_t v3 = *(void *)(v2 + 216);
    uint64_t v4 = closure #1 in TVRUITipManager.setupTipsObserver();
  }
  return MEMORY[0x270FA2498](v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int *v14;
  uint64_t v15;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of TaskPriority?(v3, &demangling cache variable for type metadata for Tips.Status?);
    swift_release();
    uint64_t v4 = v0[24];
    return MEMORY[0x270FA2498](closure #1 in TVRUITipManager.setupTipsObserver(), v4);
  }
  else
  {
    uint64_t v6 = v0[20];
    uint64_t v5 = v0[21];
    uint64_t v7 = v0[18];
    uint64_t v8 = v0[19];
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(v0[10], v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v5, v7);
    uint64_t v9 = (int *)AsyncMapSequence.Iterator.transform.getter();
    v0[31] = v10;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    uint64_t v14 = (int *)((char *)v9 + *v9);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[32] = v11;
    void *v11 = v0;
    v11[1] = closure #1 in TVRUITipManager.setupTipsObserver();
    uint64_t v12 = v0[10];
    return ((uint64_t (*)(void *, uint64_t))v14)(v0 + 33, v12);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = *(void *)(*v0 + 72);
  uint64_t v4 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  *(unsigned char *)(v1 + 265) = *(unsigned char *)(v1 + 264);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 216);
  return MEMORY[0x270FA2498](closure #1 in TVRUITipManager.setupTipsObserver(), v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 192);
  return MEMORY[0x270FA2498](closure #1 in TVRUITipManager.setupTipsObserver(), v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (*(unsigned char *)(v0 + 265)) {
    TVRUITipManager.showTip()();
  }
  else {
    specialized TVRUITipManager.hideTip(animated:completion:)(0, 0);
  }
  uint64_t v1 = static MainActor.shared.getter();
  *(void *)(v0 + 208) = v1;
  if (v1)
  {
    swift_getObjectType();
    uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
  }
  *(void *)(v0 + 216) = v2;
  *(void *)(v0 + 224) = v4;
  return MEMORY[0x270FA2498](closure #1 in TVRUITipManager.setupTipsObserver(), v2);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[19] + 8))(v0[21], v0[18]);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void TVRUITipManager.showTip()()
{
  if (one-time initialization token for tip != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.tip);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v31 = v6;
    outlined init with copy of Tip((uint64_t)&v2[OBJC_IVAR___TVRUITipManager_tip], (uint64_t)v29);
    __swift_project_boxed_opaque_existential_1(v29, v30);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    uint64_t v7 = _typeName(_:qualified:)();
    v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227326000, v3, v4, "Show: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v6, -1, -1);
    MEMORY[0x22A6785E0](v5, -1, -1);
  }
  else
  {
  }
  uint64_t v9 = *(void **)&v2[OBJC_IVAR___TVRUITipManager_presentingViewController];
  if (!v9) {
    goto LABEL_11;
  }
  id v10 = v9;
  id v11 = objc_msgSend(v10, sel_tipSourceView);

  if (!v11
    || !objc_msgSend(v10, sel_canPresentTip)
    || (uint64_t v12 = OBJC_IVAR___TVRUITipManager_tipsViewController,
        *(void *)&v2[OBJC_IVAR___TVRUITipManager_tipsViewController]))
  {

LABEL_11:
    unint64_t v13 = v2;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      uint64_t v31 = v17;
      outlined init with copy of Tip((uint64_t)&v13[OBJC_IVAR___TVRUITipManager_tip], (uint64_t)v29);
      __swift_project_boxed_opaque_existential_1(v29, v30);
      swift_getDynamicType();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      uint64_t v18 = _typeName(_:qualified:)();
      v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227326000, v14, v15, "Not showing: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v17, -1, -1);
      MEMORY[0x22A6785E0](v16, -1, -1);
    }
    else
    {
    }
    return;
  }
  outlined init with copy of Tip((uint64_t)&v2[OBJC_IVAR___TVRUITipManager_tip], (uint64_t)v29);
  if (!objc_msgSend(v10, sel_tipSourceView))
  {
    __break(1u);
    goto LABEL_20;
  }
  type metadata accessor for TipUIPopoverViewController();
  double v20 = (void *)TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)();
  id v21 = objc_msgSend(v20, sel_view);
  if (!v21)
  {
LABEL_20:
    __break(1u);
    return;
  }
  uint64_t v22 = v21;
  id v23 = objc_msgSend(self, sel_whiteColor);
  objc_msgSend(v22, sel_setTintColor_, v23);

  objc_msgSend(v20, sel_setOverrideUserInterfaceStyle_, 2);
  uint64_t v24 = (void *)TipUIPopoverViewController.popoverPresentationController.getter();
  if (v24)
  {
    double v25 = v24;
    objc_msgSend(v24, sel_setPermittedArrowDirections_, objc_msgSend(v10, sel_permittedArrowDirections));
  }
  TVRUITipManager.popoverPresentationConductor.getter();
  TipUIPopoverViewController.presentationDelegate.setter();
  uint64_t v26 = TipUIPopoverViewController.popoverPresentationController.getter();
  double v27 = *(void **)&v2[OBJC_IVAR___TVRUITipManager_popoverPresentationController];
  *(void *)&v2[OBJC_IVAR___TVRUITipManager_popoverPresentationController] = v26;

  objc_msgSend(v10, sel_presentViewController_animated_completion_, v20, 1, 0);
  uint64_t v28 = *(void **)&v2[v12];
  *(void *)&v2[v12] = v20;
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

Swift::Void __swiftcall TVRUITipManager.activate()()
{
  if (one-time initialization token for tip != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.tip);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v10 = v6;
    outlined init with copy of Tip((uint64_t)v2 + OBJC_IVAR___TVRUITipManager_tip, (uint64_t)v9);
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    uint64_t v7 = _typeName(_:qualified:)();
    v9[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227326000, v3, v4, "Activating %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v6, -1, -1);
    MEMORY[0x22A6785E0](v5, -1, -1);
  }
  else
  {
  }
  TVRUITipManager.setupTipsObserver()();
}

void closure #1 in TVRUITipManager.invalidate(_:completion:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x22A6786A0](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    if (one-time initialization token for tip != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.tip);
    uint64_t v7 = v5;
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v19 = v11;
      outlined init with copy of Tip((uint64_t)&v7[OBJC_IVAR___TVRUITipManager_tip], (uint64_t)v18);
      __swift_project_boxed_opaque_existential_1(v18, v18[3]);
      swift_getDynamicType();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      uint64_t v12 = _typeName(_:qualified:)();
      v18[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227326000, v8, v9, "Resetting TipsViewController: %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v11, -1, -1);
      MEMORY[0x22A6785E0](v10, -1, -1);
    }
    else
    {
    }
    uint64_t v14 = *(void **)&v7[OBJC_IVAR___TVRUITipManager_tipsViewController];
    *(void *)&v7[OBJC_IVAR___TVRUITipManager_tipsViewController] = 0;

    uint64_t v15 = OBJC_IVAR___TVRUITipManager_tipObservation;
    if (*(void *)&v7[OBJC_IVAR___TVRUITipManager_tipObservation])
    {
      uint64_t v16 = swift_retain();
      MEMORY[0x22A677300](v16, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
      swift_release();
    }
    *(void *)&v7[v15] = 0;
    uint64_t v17 = swift_release();
    if (a2) {
      ((void (*)(uint64_t))a2)(v17);
    }
  }
  else if (a2)
  {
    a2();
  }
}

void closure #1 in TVRUITipManager.hideTip(animated:completion:)(void *a1, void (*a2)(void))
{
  if (one-time initialization token for tip != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.tip);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v6, v7))
  {

    if (!a2) {
      return;
    }
    goto LABEL_7;
  }
  unint64_t v8 = (uint8_t *)swift_slowAlloc();
  uint64_t v9 = swift_slowAlloc();
  *(_DWORD *)unint64_t v8 = 136315138;
  uint64_t v13 = v9;
  outlined init with copy of Tip((uint64_t)v5 + OBJC_IVAR___TVRUITipManager_tip, (uint64_t)v12);
  __swift_project_boxed_opaque_existential_1(v12, v12[3]);
  swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  uint64_t v10 = _typeName(_:qualified:)();
  v12[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_227326000, v6, v7, "Dismissed: %s", v8, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x22A6785E0](v9, -1, -1);
  MEMORY[0x22A6785E0](v8, -1, -1);

  if (a2) {
LABEL_7:
  }
    a2();
}

id TVRUITipManager.deinit()
{
  uint64_t v1 = OBJC_IVAR___TVRUITipManager_tipObservation;
  if (*(void *)&v0[OBJC_IVAR___TVRUITipManager_tipObservation])
  {
    uint64_t v2 = swift_retain();
    MEMORY[0x22A677300](v2, MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    swift_release();
  }
  *(void *)&v0[v1] = 0;
  swift_release();
  v4.receiver = v0;
  v4.super_class = (Class)TVRUITipManager;
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

void __swiftcall TVRUITipManager.init()(TVRUITipManager *__return_ptr retstr)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  objc_msgSend(v1, sel_init);
}

void TVRUITipManager.init()()
{
}

unint64_t type metadata accessor for TVRUITipManager()
{
  unint64_t result = lazy cache variable for type metadata for TVRUITipManager;
  if (!lazy cache variable for type metadata for TVRUITipManager)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TVRUITipManager);
  }
  return result;
}

uint64_t closure #1 in TipPopoverPresentationConductor.presentationControllerDidDismiss(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Tips.InvalidationReason();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388]();
  id v5 = (char *)&v8[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Tip(a1 + OBJC_IVAR___TVRUITipManager_tip, (uint64_t)v8);
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F1C020], v2);
  Tip.invalidate(reason:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

id TipPopoverPresentationConductor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TipPopoverPresentationConductor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TipPopoverPresentationConductor()
{
  return self;
}

uint64_t one-time initialization function for tip()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.tip);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.tip);
  return Logger.init(subsystem:category:)();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void specialized TVRUITipManager.hideTip(animated:completion:)(void (*a1)(void), uint64_t a2)
{
  if (objc_msgSend(v2, sel_isPresentingTip))
  {
    if (one-time initialization token for tip != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.tip);
    uint64_t v6 = v2;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v18 = v10;
      outlined init with copy of Tip((uint64_t)&v6[OBJC_IVAR___TVRUITipManager_tip], (uint64_t)aBlock);
      __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v20);
      swift_getDynamicType();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
      uint64_t v11 = _typeName(_:qualified:)();
      aBlock[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227326000, v7, v8, "Hide tip: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v10, -1, -1);
      MEMORY[0x22A6785E0](v9, -1, -1);
    }
    else
    {
    }
    uint64_t v13 = *(void **)&v6[OBJC_IVAR___TVRUITipManager_popoverPresentationController];
    if (v13)
    {
      id v14 = objc_msgSend(v13, sel_presentedViewController);
      uint64_t v15 = (void *)swift_allocObject();
      float64x2_t v15[2] = v6;
      v15[3] = a1;
      v15[4] = a2;
      id v21 = partial apply for closure #1 in TVRUITipManager.hideTip(animated:completion:);
      uint64_t v22 = v15;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      double v20 = &block_descriptor_24;
      uint64_t v16 = _Block_copy(aBlock);
      uint64_t v17 = v6;
      outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)a1);
      swift_release();
      objc_msgSend(v14, sel_dismissViewControllerWithTransition_completion_, 6, v16);
      _Block_release(v16);
    }
  }
  else if (a1)
  {
    a1();
  }
}

uint64_t specialized TVRUITipManager.invalidate(_:completion:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for tip != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.tip);
  id v6 = v2;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v17 = v10;
    outlined init with copy of Tip((uint64_t)v6 + OBJC_IVAR___TVRUITipManager_tip, (uint64_t)v16);
    __swift_project_boxed_opaque_existential_1(v16, v16[3]);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    uint64_t v11 = _typeName(_:qualified:)();
    v16[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227326000, v7, v8, "Hiding %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v10, -1, -1);
    MEMORY[0x22A6785E0](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v14 = (void *)swift_allocObject();
  v14[2] = v13;
  v14[3] = a1;
  v14[4] = a2;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(a1);
  specialized TVRUITipManager.hideTip(animated:completion:)(partial apply for closure #1 in TVRUITipManager.invalidate(_:completion:), (uint64_t)v14);
  swift_release();
  return swift_release();
}

void specialized TipPopoverPresentationConductor.presentationControllerDidDismiss(_:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for tip != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.tip);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_227326000, v3, v4, "User dismissed popover", v5, 2u);
    MEMORY[0x22A6785E0](v5, -1, -1);
  }

  uint64_t v6 = MEMORY[0x22A6786A0](v1 + OBJC_IVAR____TtC10TVRemoteUI31TipPopoverPresentationConductor_tipManager);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    v11[4] = partial apply for closure #1 in TipPopoverPresentationConductor.presentationControllerDidDismiss(_:);
    v11[5] = v8;
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 1107296256;
    _OWORD v11[2] = thunk for @escaping @callee_guaranteed () -> ();
    v11[3] = &block_descriptor_8;
    uint64_t v9 = _Block_copy(v11);
    id v10 = v7;
    swift_release();
    objc_msgSend(v10, sel_invalidate_completion_, 1, v9);
    _Block_release(v9);
  }
}

uint64_t sub_2273D8804()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in TipPopoverPresentationConductor.presentationControllerDidDismiss(_:)()
{
  return closure #1 in TipPopoverPresentationConductor.presentationControllerDidDismiss(_:)(*(void *)(v0 + 16));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t outlined init with copy of Tip(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_2273D88C0()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t _sIeyB_Ieg_TRTA_0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_2273D8908()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2273D8940()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in TVRUITipManager.invalidate(_:completion:)()
{
  closure #1 in TVRUITipManager.invalidate(_:completion:)(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_2273D8994()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in TVRUITipManager.hideTip(animated:completion:)()
{
  closure #1 in TVRUITipManager.hideTip(animated:completion:)(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_2273D89E8()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in TVRUITipManager.setupTipsObserver()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in TVRUITipManager.setupTipsObserver();
  return closure #1 in TVRUITipManager.setupTipsObserver()(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in TVRUITipManager.setupTipsObserver()()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_2273D8BD0()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in TVRUITipManager.setupTipsObserver();
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t lazy protocol witness table accessor for type AsyncStream<Tips.Status> and conformance AsyncStream<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for FMPFViewStyle()
{
  return &type metadata for FMPFViewStyle;
}

char *FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(unsigned __int8 *a1, uint64_t a2, NSObject *a3, uint64_t a4, NSObject *a5, double a6, double a7)
{
  uint64_t v8 = v7;
  os_log_t v84 = a3;
  double v85 = a5;
  uint64_t v87 = a4;
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v81 = *(void *)(v13 - 8);
  uint64_t v82 = v13;
  MEMORY[0x270FA5388](v13, v14);
  uint64_t v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v17 - 8, v18);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v19 - 8, v20);
  int v83 = *a1;
  id v21 = &v7[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_style];
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)id v21 = _Q0;
  *((void *)v21 + 2) = 0;
  uint64_t v86 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_ringView;
  *(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_ringView] = 0;
  *(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_axisesNode] = 0;
  *(void *)&v7[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode] = 0;
  double v27 = &v7[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_previousHeading];
  *(void *)double v27 = 0;
  v27[8] = 1;
  uint64_t v28 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_motionManager;
  id v29 = objc_allocWithZone(MEMORY[0x263F01788]);
  uint64_t v30 = v8;
  *(void *)&v8[v28] = objc_msgSend(v29, sel_init);
  *(void *)&v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_dotCountObservation] = 0;
  *(void *)&v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_debugModeObservation] = 0;
  uint64_t v31 = &v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_lastRenderTime];
  *(void *)uint64_t v31 = 0;
  v31[8] = 1;
  uint64_t v32 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isolationQueue;
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInitiated.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(char *, void, uint64_t))(v81 + 104))(v16, *MEMORY[0x263F8F130], v82);
  *(void *)&v30[v32] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  unint64_t v33 = &v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing];
  *(void *)unint64_t v33 = 0;
  v33[8] = 1;
  uint64_t v34 = &v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation];
  *(void *)uint64_t v34 = 0;
  *((void *)v34 + 1) = 0;
  v34[16] = 1;
  v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches] = 0;
  v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_shouldApplyOpacity] = 1;
  id v35 = &v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacity];
  *(void *)id v35 = 0;
  v35[8] = 1;
  id v36 = &v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_presentedOpacity];
  *(void *)id v36 = 0;
  v36[8] = 1;
  *(void *)&v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isInteractivelyDebugging] = 0;
  v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_experienceType] = v83;
  uint64_t v37 = &v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config];
  long long v38 = *(_OWORD *)(a2 + 48);
  long long v40 = *(_OWORD *)a2;
  long long v39 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v37 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v37 + 3) = v38;
  *(_OWORD *)uint64_t v37 = v40;
  *((_OWORD *)v37 + 1) = v39;
  long long v41 = *(_OWORD *)(a2 + 112);
  long long v43 = *(_OWORD *)(a2 + 64);
  long long v42 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v37 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v37 + 7) = v41;
  *((_OWORD *)v37 + 4) = v43;
  *((_OWORD *)v37 + 5) = v42;
  long long v45 = *(_OWORD *)(a2 + 144);
  long long v44 = *(_OWORD *)(a2 + 160);
  long long v46 = *(_OWORD *)(a2 + 128);
  v37[176] = *(unsigned char *)(a2 + 176);
  *((_OWORD *)v37 + 9) = v45;
  *((_OWORD *)v37 + 10) = v44;
  *((_OWORD *)v37 + 8) = v46;
  uint64_t v47 = (double *)&v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_sceneSize];
  double *v47 = a6;
  v47[1] = a7;
  uint64_t v48 = *(void **)&v8[v86];
  os_log_t v49 = v84;
  *(void *)&v8[v86] = v84;
  uint64_t v86 = a2;
  outlined retain of FMPFSKPatternNodeConfig(a2, (void (*)(void, void, void, void, void, void, void, void))outlined copy of FMPFSKLabelNodeStyle?);
  uint64_t v50 = v49;

  *(void *)&v30[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacitySpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 1, 0x3F847AE147AE147BLL, 0, 0, 1);
  long long v51 = (objc_class *)type metadata accessor for FMPFSKScene();
  v90.receiver = v30;
  v90.super_class = v51;
  double v52 = (char *)objc_msgSendSuper2(&v90, sel_initWithSize_, a6, a7);
  *(void *)&v52[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate + 8] = v85;
  swift_unknownObjectWeakAssign();
  uint64_t v53 = self;
  uint64_t v54 = v52;
  id v55 = objc_msgSend(v53, sel_clearColor);
  objc_msgSend(v54, sel_setBackgroundColor_, v55);

  objc_msgSend(v54, sel_setAnchorPoint_, 0.5, 0.5);
  objc_msgSend(v54, sel_setScaleMode_, 2);
  FMPFSKScene.setupScene()();
  uint64_t v56 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_motionManager;
  objc_msgSend(*(id *)&v54[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_motionManager], sel_setDeviceMotionUpdateInterval_, 0.0666666667);
  double v57 = *(void **)&v54[v56];
  uint64_t v58 = self;
  id v59 = v57;
  id v60 = objc_msgSend(v58, sel_mainQueue);
  uint64_t v61 = (void *)swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:);
  aBlock[5] = v61;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CMDeviceMotion?, @guaranteed Error?) -> ();
  void aBlock[3] = &block_descriptor_9;
  unint64_t v62 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v59, sel_startDeviceMotionUpdatesUsingReferenceFrame_toQueue_withHandler_, 4, v60, v62);
  _Block_release(v62);

  uint64_t v63 = self;
  aBlock[0] = objc_msgSend(v63, sel_standardUserDefaults);
  swift_getKeyPath();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v64 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
  swift_release();
  swift_release();

  unint64_t v65 = *(void **)&v54[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_dotCountObservation];
  *(void *)&v54[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_dotCountObservation] = v64;

  aBlock[0] = objc_msgSend(v63, sel_standardUserDefaults);
  swift_getKeyPath();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v66 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
  swift_release();
  swift_release();

  uint64_t v67 = *(void **)&v54[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_debugModeObservation];
  *(void *)&v54[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_debugModeObservation] = v66;

  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v68 = type metadata accessor for Logger();
  __swift_project_value_buffer(v68, (uint64_t)static Logger.default);
  double v69 = v54;
  Swift::String v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = swift_slowAlloc();
    id v73 = (void *)swift_slowAlloc();
    id v74 = (void *)swift_slowAlloc();
    os_log_t v84 = v70;
    double v85 = v50;
    double v75 = v74;
    uint64_t v88 = (uint64_t)v69;
    aBlock[0] = v74;
    *(_DWORD *)uint64_t v72 = 138412546;
    double v76 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v73 = v54;

    *(_WORD *)(v72 + 12) = 2080;
    uint64_t v77 = CGSize.debugDescription.getter();
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v79 = v84;
    _os_log_impl(&dword_227326000, v84, v71, "🧭 FMPFSKScene%@: init with size={%s}", (uint8_t *)v72, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v73, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v75, -1, -1);
    MEMORY[0x22A6785E0](v72, -1, -1);

    swift_unknownObjectRelease();
    outlined retain of FMPFSKPatternNodeConfig(v86, (void (*)(void, void, void, void, void, void, void, void))outlined consume of FMPFSKLabelNodeStyle?);
  }
  else
  {

    swift_unknownObjectRelease();
    outlined retain of FMPFSKPatternNodeConfig(v86, (void (*)(void, void, void, void, void, void, void, void))outlined consume of FMPFSKLabelNodeStyle?);
  }
  return v69;
}

void closure #1 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(objc_class *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  swift_beginAccess();
  v5.value.super.super.Class isa = (Class)MEMORY[0x22A6786A0](v4);
  if (v5.value.super.super.isa)
  {
    Class isa = v5.value.super.super.isa;
    v5.value.super.super.Class isa = a1;
    FMPFSKScene.handleDeviceMotionUpdate(_:)(v5);
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed CMDeviceMotion?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  CMDeviceMotion_optional v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void closure #2 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x22A6786A0](a3 + 16);
  if (v9)
  {
    id v10 = (void *)v9;
    uint64_t v11 = static DispatchWorkItemFlags.barrier.getter();
    MEMORY[0x270FA5388](v11, v12);
    *(void *)&v13[-16] = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

void closure #1 in closure #2 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v3)
  {
    int v4 = v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType];
    if (v4 == 2) {
      goto LABEL_5;
    }
    if (v4 == 1)
    {
      uint64_t v6 = v3;
      FMPFSKPatternNode.setupTapeChildNodes(conformationFactor:)(0, 1);
      goto LABEL_7;
    }
    if (!v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType])
    {
LABEL_5:
      uint64_t v5 = v3;
      FMPFSKPatternNode.setupArrowChildNodes(conformationFactor:)(0, 1);
LABEL_7:
    }
  }
  *a2 = v3 == 0;
}

void closure #3 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x22A6786A0](a3 + 16);
  if (v9)
  {
    id v10 = (void *)v9;
    id v11 = objc_msgSend(self, sel_standardUserDefaults);
    unsigned __int8 v12 = objc_msgSend(v11, sel_fmpfDebugMode);

    uint64_t v13 = static DispatchWorkItemFlags.barrier.getter();
    MEMORY[0x270FA5388](v13, v14);
    *(&v15 - 2) = (uint64_t)v10;
    *((unsigned char *)&v15 - 8) = v12;
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

void closure #1 in closure #3 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(uint64_t a1, char a2)
{
  uint64_t v4 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_axisesNode);
  if (v4) {
    objc_msgSend(v4, sel_setHidden_, (a2 & 1) == 0);
  }
  uint64_t v5 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v5)
  {
    id v6 = v5;
    FMPFSKPatternNode.applyDebugMode(_:)(a2 & 1);
  }
}

id FMPFSKScene.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_debugModeObservation];
  if (v2)
  {
    id v3 = v2;
    dispatch thunk of NSKeyValueObservation.invalidate()();
  }
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_motionManager], sel_stopDeviceMotionUpdates);
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.default);
  uint64_t v5 = v1;
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v16 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    id v10 = objc_msgSend(v5, sel_description);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227326000, v6, v7, "🧭 FMPFSKScene%s: deinit", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v9, -1, -1);
    MEMORY[0x22A6785E0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = (objc_class *)type metadata accessor for FMPFSKScene();
  v17.receiver = v5;
  v17.super_class = v14;
  return objc_msgSendSuper2(&v17, sel_dealloc);
}

uint64_t FMPFSKScene.setupScene()()
{
  uint64_t v1 = type metadata accessor for DispatchQoS();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_sceneSize];
  uint64_t v10 = *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_sceneSize + 8];
  uint64_t v11 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_ringView];
  id v12 = v11;
  static DispatchWorkItemFlags.barrier.getter();
  unint64_t v13 = (void *)swift_allocObject();
  v13[2] = v0;
  v13[3] = v9;
  void v13[4] = v10;
  v13[5] = v11;
  aBlock[4] = partial apply for closure #1 in FMPFSKScene.setupScene();
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_138;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v12;
  uint64_t v16 = v0;
  static DispatchQoS.unspecified.getter();
  MEMORY[0x22A677410](0, v4, v8, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

void closure #1 in FMPFSKScene.setupScene()(char *a1, void *a2, double a3, double a4)
{
  uint64_t v7 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_axisesNode;
  objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_axisesNode], sel_removeFromParent);
  uint64_t v8 = *(void **)&a1[v7];
  if (v8)
  {
    uint64_t v9 = self;
    id v10 = v8;
    id v11 = objc_msgSend(v9, sel_standardUserDefaults);
    unsigned int v12 = objc_msgSend(v11, sel_fmpfDebugMode);

    objc_msgSend(v10, sel_setHidden_, v12 ^ 1);
  }
  id v13 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKNode()), sel_init);
  objc_msgSend(v13, sel_setZPosition_, -4.4408921e-16);
  objc_msgSend(a1, sel_addChild_, v13);
  uint64_t v14 = *(void **)&a1[v7];
  *(void *)&a1[v7] = v13;
  id v15 = v13;

  objc_msgSend(a1, sel_size);
  double v17 = v16 * -0.5;
  objc_msgSend(a1, sel_size);
  double v19 = v18 * 0.5;
  id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824C0]), (SEL)&selRef_currentButtonPanel);
  objc_msgSend(v20, sel_moveToPoint_, v17, 0.0);
  objc_msgSend(v20, sel_addLineToPoint_, v19, 0.0);
  objc_msgSend(v20, sel_closePath);
  type metadata accessor for FMPFSKShapeNode();
  double v57 = v20;
  id v21 = objc_msgSend(v20, sel_CGPath);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v23 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v21);

  objc_msgSend(v23, sel_setPosition_, 0.0, -0.0);
  uint64_t v24 = self;
  id v25 = v23;
  id v26 = objc_msgSend(v24, sel_whiteColor);
  objc_msgSend(v25, sel_setStrokeColor_, v26);

  objc_msgSend(v25, sel_setAlpha_, 0.5);
  objc_msgSend(v15, sel_addChild_, v25);
  objc_msgSend(a1, sel_size);
  double v28 = v27 * 0.5;
  objc_msgSend(a1, sel_size);
  double v30 = v29 * -0.5;
  id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F824C0]), sel_init);
  objc_msgSend(v31, sel_moveToPoint_, 0.0, v28);
  objc_msgSend(v31, sel_addLineToPoint_, 0.0, v30);
  objc_msgSend(v31, sel_closePath);
  id v32 = objc_msgSend(v31, sel_CGPath);
  id v33 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v32);

  id v34 = v33;
  id v35 = objc_msgSend(v24, sel_whiteColor);
  objc_msgSend(v34, sel_setStrokeColor_, v35);

  objc_msgSend(v34, sel_setAlpha_, 0.5);
  objc_msgSend(v15, sel_addChild_, v34);
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
  objc_msgSend(a1, sel_size);
  unint64_t v37 = v36;
  objc_msgSend(a1, sel_size);
  v56.super.Class isa = UIBezierPath.init(fmpfRectangleCentered:size:)((CGPoint)0, (CGSize)__PAIR128__(v38, v37)).super.isa;
  id v39 = [(objc_class *)v56.super.isa CGPath];
  id v40 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v39);

  id v41 = v40;
  id v42 = objc_msgSend(v24, sel_whiteColor);
  objc_msgSend(v41, sel_setStrokeColor_, v42);

  objc_msgSend(v41, sel_setAlpha_, 0.5);
  uint64_t v58 = v15;
  objc_msgSend(v15, sel_addChild_, v41);
  uint64_t v43 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode;
  long long v44 = *(unsigned char **)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode];
  if (v44)
  {
    uint64_t v45 = *(void *)&v44[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor];
    char v46 = v44[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor + 8];
    objc_msgSend(v44, sel_removeFromParent);
  }
  else
  {
    uint64_t v45 = 0;
    char v46 = 1;
  }
  char v60 = a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_experienceType];
  long long v47 = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 144];
  v61[8] = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 128];
  v61[9] = v47;
  v61[10] = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 160];
  char v62 = a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 176];
  long long v48 = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 80];
  v61[4] = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 64];
  v61[5] = v48;
  long long v49 = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 112];
  id v61[6] = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 96];
  v61[7] = v49;
  long long v50 = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 16];
  v61[0] = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config];
  v61[1] = v50;
  long long v51 = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 48];
  v61[2] = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 32];
  v61[3] = v51;
  id v52 = objc_allocWithZone((Class)type metadata accessor for FMPFSKPatternNode());
  outlined retain of FMPFSKPatternNodeConfig((uint64_t)v61, (void (*)(void, void, void, void, void, void, void, void))outlined copy of FMPFSKLabelNodeStyle?);
  id v53 = a2;
  uint64_t v54 = FMPFSKPatternNode.init(experienceType:config:size:withRingView:conformedToExplodedFactor:conformationFactor:)((unsigned __int8 *)&v60, (uint64_t)v61, a2, 0, 1, v45, v46, a3, a4);
  objc_msgSend(v54, sel_setPosition_, 0.0, -0.0);
  objc_msgSend(v54, sel_setAlpha_, 0.0);
  *(void *)&v54[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate + 8] = &protocol witness table for FMPFSKScene;
  swift_unknownObjectWeakAssign();
  objc_msgSend(a1, sel_addChild_, v54);
  id v55 = *(void **)&a1[v43];
  *(void *)&a1[v43] = v54;
}

Swift::Void __swiftcall FMPFSKScene.update(_:)(Swift::Double a1)
{
  uint64_t v2 = (Swift::Double *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_lastRenderTime];
  double v3 = *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_lastRenderTime];
  if (v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_lastRenderTime + 8]) {
    double v3 = a1;
  }
  double v4 = a1 - v3;
  *uint64_t v2 = a1;
  *((unsigned char *)v2 + 8) = 0;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v1;
  *(double *)(v5 + 24) = v4;
  uint64_t v6 = self;
  uint64_t v7 = v1;
  if (objc_msgSend(v6, sel_isMainThread))
  {
    uint64_t v8 = *(NSObject **)&v7[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isolationQueue];
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = partial apply for closure #1 in FMPFSKScene.update(_:);
    *(void *)(v9 + 24) = v5;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = partial apply for closure #2 in FMPFRingView.setOpacity(_:sprung:);
    *(void *)(v10 + 24) = v9;
    void v13[4] = partial apply for closure #2 in FMPFRingView.setOpacity(_:sprung:);
    v13[5] = v10;
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 1107296256;
    v13[2] = thunk for @escaping @callee_guaranteed () -> ();
    v13[3] = &block_descriptor_150;
    id v11 = _Block_copy(v13);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v8, v11);
    swift_release();
    _Block_release(v11);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  else
  {
    closure #1 in FMPFSKScene.update(_:)((uint64_t)v7, v4);
    swift_release();
  }
}

uint64_t closure #1 in FMPFSKScene.update(_:)(uint64_t a1, Swift::Double a2)
{
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode;
  uint64_t v5 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v5)
  {
    id v6 = v5;
    v17.is_nil = LOBYTE(a2);
    FMPFSKPatternNode.updateWithDeltaTime(_:)(v17);
  }
  uint64_t result = MEMORY[0x22A6786A0](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (result)
  {
    FMPFView.updateWithDeltaTime(_:)(a2);
    uint64_t result = swift_unknownObjectRelease();
  }
  if ((*(unsigned char *)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacity + 8) & 1) != 0
    || *(double *)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacity) >= 0.5)
  {
    *(unsigned char *)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_shouldApplyOpacity) = 1;
LABEL_13:
    uint64_t v11 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacitySpring;
    uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacitySpring);
    uint64_t result = FMPFFluidSpring.isStable.getter();
    if ((result & 1) == 0)
    {
      FLSpring.step(_:)(a2);
      *(unsigned char *)(v12 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      uint64_t v13 = *(void *)(a1 + v11);
      uint64_t v14 = (double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      double v15 = *v14 + *(double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      if (vabdd_f64(v14[35] + *(double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v15) <= *(double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold)) {
        double v15 = v14[35] + *(double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      }
      uint64_t v16 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_presentedOpacity;
      *(double *)uint64_t v16 = v15;
      *(unsigned char *)(v16 + 8) = 0;
      uint64_t result = *(void *)(a1 + v4);
      if (result) {
        return (uint64_t)objc_msgSend((id)result, sel_setAlpha_);
      }
    }
    return result;
  }
  uint64_t v8 = *(void *)(a1 + v4);
  if (!v8)
  {
    *(unsigned char *)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_shouldApplyOpacity) = 0;
    return result;
  }
  uint64_t v9 = v8 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor;
  double v10 = *(double *)v9;
  if (*(unsigned char *)(v9 + 8)) {
    double v10 = 1.0;
  }
  *(unsigned char *)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_shouldApplyOpacity) = v10 <= 0.0;
  if (v10 <= 0.0) {
    goto LABEL_13;
  }
  return result;
}

Swift::Void __swiftcall FMPFSKScene.handleDeviceMotionUpdate(_:)(CMDeviceMotion_optional a1)
{
  Class isa = a1.value.super.super.isa;
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_experienceType] != 2 || !UIAccessibilityIsReduceMotionEnabled())
    && isa)
  {
    uint64_t v13 = isa;
    [(objc_class *)v13 heading];
    double v15 = v14;
    uint64_t v16 = (double *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_previousHeading];
    if (v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_previousHeading + 8])
    {
    }
    else
    {
      double v17 = v14 - *v16;
      double v18 = v17 + -360.0;
      if (v17 <= 180.0) {
        double v18 = v15 - *v16;
      }
      if (v17 >= -180.0) {
        double v19 = v18;
      }
      else {
        double v19 = v17 + 360.0;
      }
      v23[1] = *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isolationQueue];
      static DispatchWorkItemFlags.barrier.getter();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v1;
      *(double *)(v20 + 24) = v19;
      aBlock[4] = partial apply for specialized closure #1 in FMPFSKScene.handleDeviceMotionUpdate(_:);
      aBlock[5] = v20;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      void aBlock[3] = &block_descriptor_132;
      id v21 = _Block_copy(aBlock);
      uint64_t v22 = v1;
      static DispatchQoS.unspecified.getter();
      MEMORY[0x22A677410](0, v7, v12, v21);

      _Block_release(v21);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      swift_release();
    }
    double *v16 = v15;
    *((unsigned char *)v16 + 8) = 0;
  }
}

void specialized closure #1 in FMPFSKScene.handleDeviceMotionUpdate(_:)(uint64_t a1, Swift::Double a2)
{
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v2)
  {
    id v4 = v2;
    FMPFSKPatternNode.addSprungRelativeHeading(_:)(a2);
  }
}

id FMPFSKScene.size.setter(double a1, double a2)
{
  id result = objc_msgSend(v2, sel_size);
  if (v7 != a1 || v6 != a2)
  {
    if (one-time initialization token for default != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.default);
    id v10 = v2;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      double v14 = (void *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v20 = v15;
      *(_DWORD *)uint64_t v13 = 138412546;
      id v16 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v14 = v10;

      *(_WORD *)(v13 + 12) = 2080;
      uint64_t v17 = CGSize.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227326000, v11, v12, "🧭 FMPFSKScene%@: set size={%s}", (uint8_t *)v13, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v14, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v15, -1, -1);
      MEMORY[0x22A6785E0](v13, -1, -1);
    }
    else
    {
    }
    double v19 = (objc_class *)type metadata accessor for FMPFSKScene();
    v21.receiver = v10;
    v21.super_class = v19;
    objc_msgSendSuper2(&v21, sel_setSize_, a1, a2);
    return (id)FMPFSKScene.setupScene()();
  }
  return result;
}

uint64_t FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(char a1, double a2)
{
  return FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(a1, a2, (uint64_t)&unk_26DB4C450, (uint64_t)partial apply for closure #1 in FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:), (uint64_t)&block_descriptor_126);
}

void closure #1 in FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(uint64_t a1, char a2, Swift::Double a3)
{
  uint64_t v3 = *(char **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v3)
  {
    uint64_t v5 = (Swift::Double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor];
    *uint64_t v5 = a3;
    *((unsigned char *)v5 + 8) = 0;
    if (a2)
    {
      uint64_t v6 = *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactorSpring];
      uint64_t v7 = v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
      swift_beginAccess();
      if (*(double *)(v7 + 280) + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308)
      {
        uint64_t v18 = v6 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
        *(Swift::Double *)uint64_t v18 = a3;
        *(unsigned char *)(v18 + 8) = 0;
        FMPFFluidSpring.ftarget.didset();
        return;
      }
    }
    uint64_t v8 = *(void *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactorSpring];
    FLSpring.resetImmediately(toValue:)(a3);
    *(unsigned char *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    uint64_t v9 = (Swift::Double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor];
    Swift::Double *v9 = a3;
    *((unsigned char *)v9 + 8) = 0;
    id v10 = &v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes];
    swift_beginAccess();
    unint64_t v11 = *(void *)v10;
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain_n();
      double v19 = v3;
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      if (v12) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      uint64_t v13 = v3;
      if (v12)
      {
LABEL_6:
        if (v12 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v12; ++i)
        {
          if ((v11 & 0xC000000000000001) != 0) {
            uint64_t v15 = (char *)MEMORY[0x22A677580](i, v11);
          }
          else {
            uint64_t v15 = (char *)*(id *)(v11 + 8 * i + 32);
          }
          char v16 = *((unsigned char *)v5 + 8);
          uint64_t v17 = &v15[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor];
          *(Swift::Double *)uint64_t v17 = *v5;
          v17[8] = v16;
        }
      }
    }
    swift_bridgeObjectRelease_n();
  }
}

uint64_t FMPFSKScene.setPatternConformationFactor(_:sprung:)(char a1, double a2)
{
  return FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(a1, a2, (uint64_t)&unk_26DB4C400, (uint64_t)partial apply for closure #1 in FMPFSKScene.setPatternConformationFactor(_:sprung:), (uint64_t)&block_descriptor_120);
}

uint64_t FMPFSKScene.setPatternCenterFactor(_:sprung:)(char a1, double a2)
{
  return FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(a1, a2, (uint64_t)&unk_26DB4C3B0, (uint64_t)partial apply for closure #1 in FMPFSKScene.setPatternCenterFactor(_:sprung:), (uint64_t)&block_descriptor_114);
}

void closure #1 in FMPFSKScene.setPatternConformationFactor(_:sprung:)(uint64_t a1, char a2, void (*a3)(void, double), double a4)
{
  id v4 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v4)
  {
    id v8 = v4;
    a3(a2 & 1, a4);
  }
}

Swift::Void __swiftcall FMPFSKScene.pulseBTNode(duration:)(Swift::Double duration)
{
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3, v5);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v1;
  *(Swift::Double *)(v13 + 24) = duration;
  aBlock[4] = partial apply for closure #1 in FMPFSKScene.pulseBTNode(duration:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_108;
  double v14 = _Block_copy(aBlock);
  id v15 = v1;
  static DispatchQoS.unspecified.getter();
  MEMORY[0x22A677410](0, v7, v12, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release();
}

void closure #1 in FMPFSKScene.pulseBTNode(duration:)(uint64_t a1, Swift::Double a2)
{
  uint64_t v2 = *(char **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v2)
  {
    uint64_t v3 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode];
    if (v3)
    {
      uint64_t v5 = v2;
      id v6 = v3;
      FMPFSKBTRangeDotNode.pulse(duration:)(a2);
    }
  }
}

uint64_t FMPFSKScene.setBTRangeNodeSize(_:sprung:)(char a1, double a2)
{
  return FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(a1, a2, (uint64_t)&unk_26DB4C310, (uint64_t)partial apply for closure #1 in FMPFSKScene.setBTRangeNodeSize(_:sprung:), (uint64_t)&block_descriptor_102);
}

void closure #1 in FMPFSKScene.setBTRangeNodeSize(_:sprung:)(uint64_t a1, char a2, Swift::Double a3)
{
  uint64_t v3 = *(char **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v3)
  {
    uint64_t v4 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode];
    if (v4)
    {
      uint64_t v7 = v3;
      id v9 = v4;
      Swift::Bool v8 = a2 & 1;
      if (a3 <= 0.0) {
        FMPFSKBTLevelsNode.hide(sprung:)(v8);
      }
      else {
        FMPFSKBTLevelsNode.show(sprung:)(v8);
      }
      FMPFSKBTRangeDotNode.setDotNodeSizeFactor(_:sprung:)(a2 & 1, a3);
    }
  }
}

uint64_t FMPFSKScene.setBTDiskNodeSize(_:sprung:)(char a1, double a2)
{
  return FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(a1, a2, (uint64_t)&unk_26DB4C2C0, (uint64_t)partial apply for closure #1 in FMPFSKScene.setBTDiskNodeSize(_:sprung:), (uint64_t)&block_descriptor_96);
}

void closure #1 in FMPFSKScene.setBTDiskNodeSize(_:sprung:)(uint64_t a1, char a2, double a3)
{
  uint64_t v3 = *(char **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v3)
  {
    uint64_t v4 = *(char **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode];
    if (v4)
    {
      uint64_t v7 = *(void *)&v4[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode];
      Swift::Bool v8 = v3;
      uint64_t v11 = v4;
      FMPFSKBTLevelsNode.update(diskSize:sprung:)(a2 & 1, a3);
      uint64_t v9 = *(void *)(*(void *)(v7 + OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDiskNode)
                     + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_sizeSpring);
      if (a2)
      {
        uint64_t v10 = v9 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
        *(double *)uint64_t v10 = a3;
        *(unsigned char *)(v10 + 8) = 0;
        FMPFFluidSpring.ftarget.didset();
      }
      else
      {
        FLSpring.resetImmediately(toValue:)(a3);
        *(unsigned char *)(v9 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        FMPFSKBTRangeDiskNode.render()();
      }
    }
  }
}

uint64_t FMPFSKScene.setBTDiskNodeOpacity(_:sprung:)(char a1, double a2)
{
  return FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(a1, a2, (uint64_t)&unk_26DB4C270, (uint64_t)partial apply for closure #1 in FMPFSKScene.setBTDiskNodeOpacity(_:sprung:), (uint64_t)&block_descriptor_90);
}

uint64_t FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(char a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13, v15);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v5;
  *(double *)(v18 + 24) = a2;
  *(unsigned char *)(v18 + 32) = a1;
  aBlock[4] = v22;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = v23;
  double v19 = _Block_copy(aBlock);
  id v20 = v5;
  static DispatchQoS.unspecified.getter();
  MEMORY[0x22A677410](0, v12, v17, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return swift_release();
}

void closure #1 in FMPFSKScene.setBTDiskNodeOpacity(_:sprung:)(uint64_t a1, char a2, Swift::Double a3)
{
  uint64_t v3 = *(char **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v3)
  {
    uint64_t v4 = *(char **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode];
    if (v4)
    {
      uint64_t v5 = *(void *)(*(void *)(*(void *)&v4[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode]
                                 + OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDiskNode)
                     + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_opacitySpring);
      if (a2)
      {
        uint64_t v6 = v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
        *(Swift::Double *)uint64_t v6 = a3;
        *(unsigned char *)(v6 + 8) = 0;
        FMPFFluidSpring.ftarget.didset();
      }
      else
      {
        FLSpring.resetImmediately(toValue:)(a3);
        *(unsigned char *)(v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        uint64_t v7 = v3;
        uint64_t v8 = v4;
        FMPFSKBTRangeDiskNode.render()();
      }
    }
  }
}

uint64_t type metadata accessor for FMPFSKScene()
{
  return self;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FMPFSKSceneStyle(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FMPFSKSceneStyle(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKSceneStyle()
{
  return &type metadata for FMPFSKSceneStyle;
}

void specialized FMPFSKScene.init(coder:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388]();
  type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388]();
  uint64_t v6 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_style];
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)uint64_t v6 = _Q0;
  *((void *)v6 + 2) = 0;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_ringView] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_axisesNode] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode] = 0;
  uint64_t v12 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_previousHeading];
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;
  uint64_t v13 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_motionManager;
  *(void *)&v1[v13] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F01788]), sel_init);
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_dotCountObservation] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_debugModeObservation] = 0;
  uint64_t v14 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_lastRenderTime];
  *(void *)uint64_t v14 = 0;
  v14[8] = 1;
  uint64_t v15 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isolationQueue;
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInitiated.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F130], v2);
  *(void *)&v1[v15] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v16 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing];
  *(void *)uint64_t v16 = 0;
  v16[8] = 1;
  uint64_t v17 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation];
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  v17[16] = 1;
  v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches] = 0;
  v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_shouldApplyOpacity] = 1;
  uint64_t v18 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacity];
  *(void *)uint64_t v18 = 0;
  v18[8] = 1;
  double v19 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_presentedOpacity];
  *(void *)double v19 = 0;
  v19[8] = 1;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isInteractivelyDebugging] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized FMPFSKScene.setOpacity(_:sprung:swap:)(char a1, Swift::Double a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacity;
  *(Swift::Double *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 8) = 0;
  if ((a1 & 1) != 0
    && (uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacitySpring),
        uint64_t v7 = v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v7 + 280) + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308))
  {
    uint64_t v11 = v6 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)uint64_t v11 = a2;
    *(unsigned char *)(v11 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    uint64_t v8 = *(void *)(v3 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacitySpring);
    FLSpring.resetImmediately(toValue:)(a2);
    *(unsigned char *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    uint64_t v9 = v3 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_presentedOpacity;
    *(Swift::Double *)uint64_t v9 = a2;
    *(unsigned char *)(v9 + 8) = 0;
    uint64_t v10 = *(void **)(v3 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
    if (v10) {
      objc_msgSend(v10, sel_setAlpha_, a2);
    }
  }
}

uint64_t sub_2273DC590()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(objc_class *a1, uint64_t a2)
{
  closure #1 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(a1, a2, v2);
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

char *keypath_get_selector_fmpfArrowDotCount()
{
  return sel_fmpfArrowDotCount;
}

id sub_2273DC5F4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fmpfArrowDotCount);
  *a2 = result;
  return result;
}

id sub_2273DC628(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFmpfArrowDotCount_, *a1);
}

void partial apply for closure #2 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(uint64_t a1, uint64_t a2)
{
  closure #2 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(a1, a2, v2);
}

char *keypath_get_selector_fmpfDebugMode()
{
  return sel_fmpfDebugMode;
}

id sub_2273DC650@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fmpfDebugMode);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2273DC684(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFmpfDebugMode_, *a1);
}

void partial apply for closure #3 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(uint64_t a1, uint64_t a2)
{
  closure #3 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(a1, a2, v2);
}

void partial apply for closure #1 in closure #3 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)()
{
  closure #1 in closure #3 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

void partial apply for closure #1 in closure #2 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(BOOL *a1@<X8>)
{
  closure #1 in closure #2 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(*(void *)(v1 + 16), a1);
}

void partial apply for closure #1 in FMPFSKScene.setBTDiskNodeOpacity(_:sprung:)()
{
  closure #1 in FMPFSKScene.setBTDiskNodeOpacity(_:sprung:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 32), *(Swift::Double *)(v0 + 24));
}

void partial apply for closure #1 in FMPFSKScene.setBTDiskNodeSize(_:sprung:)()
{
  closure #1 in FMPFSKScene.setBTDiskNodeSize(_:sprung:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 32), *(double *)(v0 + 24));
}

void partial apply for closure #1 in FMPFSKScene.setBTRangeNodeSize(_:sprung:)()
{
  closure #1 in FMPFSKScene.setBTRangeNodeSize(_:sprung:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 32), *(Swift::Double *)(v0 + 24));
}

uint64_t sub_2273DC70C()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in FMPFSKScene.pulseBTNode(duration:)()
{
  closure #1 in FMPFSKScene.pulseBTNode(duration:)(*(void *)(v0 + 16), *(Swift::Double *)(v0 + 24));
}

uint64_t sub_2273DC750()
{
  return MEMORY[0x270FA0238](v0, 33, 7);
}

void partial apply for closure #1 in FMPFSKScene.setPatternCenterFactor(_:sprung:)()
{
  closure #1 in FMPFSKScene.setPatternConformationFactor(_:sprung:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 32), (void (*)(void, double))FMPFSKPatternNode.setCenterFactor(_:sprung:), *(double *)(v0 + 24));
}

void partial apply for closure #1 in FMPFSKScene.setPatternConformationFactor(_:sprung:)()
{
  closure #1 in FMPFSKScene.setPatternConformationFactor(_:sprung:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 32), (void (*)(void, double))FMPFSKPatternNode.setConformationFactor(_:sprung:), *(double *)(v0 + 24));
}

void partial apply for closure #1 in FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)()
{
  closure #1 in FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 32), *(Swift::Double *)(v0 + 24));
}

void partial apply for specialized closure #1 in FMPFSKScene.handleDeviceMotionUpdate(_:)()
{
  specialized closure #1 in FMPFSKScene.handleDeviceMotionUpdate(_:)(*(void *)(v0 + 16), *(Swift::Double *)(v0 + 24));
}

uint64_t sub_2273DC814()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void partial apply for closure #1 in FMPFSKScene.setupScene()()
{
  closure #1 in FMPFSKScene.setupScene()(*(char **)(v0 + 16), *(void **)(v0 + 40), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t partial apply for closure #1 in FMPFSKScene.update(_:)()
{
  return closure #1 in FMPFSKScene.update(_:)(*(void *)(v0 + 16), *(Swift::Double *)(v0 + 24));
}

uint64_t sub_2273DC870()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2273DC8A8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void one-time initialization function for default()
{
  uint64_t v0 = self;
  double v1 = *MEMORY[0x263F81838];
  uint64_t v2 = (void *)MEMORY[0x22A677130](0xD00000000000001BLL, 0x80000002273FD970);
  id v3 = objc_msgSend(v0, sel_systemFontOfSize_weight_design_, v2, 68.0, v1);

  if (v3)
  {
    uint64_t v4 = (void *)MEMORY[0x22A677130](0xD00000000000001BLL, 0x80000002273FD970);
    id v5 = objc_msgSend(v0, sel_systemFontOfSize_weight_design_, v4, 20.0, v1);

    if (v5)
    {
      id v6 = objc_msgSend(self, sel_labelColor);
      static FMBTDistanceViewStyle.default = (uint64_t)v3;
      *(void *)algn_26817C938 = v5;
      qword_26817C940 = (uint64_t)v6;
      unk_26817C948 = xmmword_2273F5D80;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id FMBTDistanceView.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_distanceLabel;
  id v2 = objc_allocWithZone(MEMORY[0x263F828E0]);
  id v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_bottomRowStackView;
  *(void *)&v3[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_hintLabel;
  *(void *)&v3[v5] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityViewContainer;
  *(void *)&v3[v6] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
  uint64_t v7 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityView;
  *(void *)&v3[v7] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F823E8]), sel_initWithActivityIndicatorStyle_, 100);
  uint64_t v8 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_style;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v9 = &v3[v8];
  uint64_t v10 = (void *)static FMBTDistanceViewStyle.default;
  uint64_t v11 = *(void **)algn_26817C938;
  uint64_t v12 = (void *)qword_26817C940;
  long long v13 = unk_26817C948;
  *(void *)uint64_t v9 = static FMBTDistanceViewStyle.default;
  *((void *)v9 + 1) = v11;
  *((void *)v9 + 2) = v12;
  *(_OWORD *)(v9 + 24) = v13;
  id v14 = v10;
  id v15 = v11;
  id v16 = v12;

  v19.receiver = v3;
  v19.super_class = (Class)type metadata accessor for FMBTDistanceView();
  id v17 = objc_msgSendSuper2(&v19, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  FMBTDistanceView.setup()();

  return v17;
}

id FMBTDistanceView.setup()()
{
  uint64_t v1 = v0;
  objc_msgSend(v0, sel_setOverrideUserInterfaceStyle_, 2);
  objc_msgSend(v0, sel_setAxis_, 1);
  id v2 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_distanceLabel];
  id v3 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_hintLabel];
  id v4 = v2;
  id v5 = v3;
  objc_msgSend(v4, sel_setNumberOfLines_, 0);
  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  id v6 = v5;
  objc_msgSend(v6, sel_setNumberOfLines_, 0);
  objc_msgSend(v6, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  uint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_bottomRowStackView];
  objc_msgSend(v7, sel_setAxis_, 0);
  objc_msgSend(v7, sel_setAlignment_, 3);
  uint64_t v8 = &v1[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_style];
  objc_msgSend(v7, sel_setSpacing_, *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_style + 24]);
  uint64_t v9 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityView];
  id v10 = objc_msgSend(self, sel_whiteColor);
  objc_msgSend(v9, sel_setColor_, v10);

  objc_msgSend(v9, sel_startAnimating);
  objc_msgSend(v9, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v11 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityViewContainer];
  objc_msgSend(v11, sel_addSubview_, v9);
  objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v11, sel_setHidden_, 1);
  objc_msgSend(v7, sel_addArrangedSubview_, v11);
  objc_msgSend(v7, sel_addArrangedSubview_, v6);
  id v12 = v4;
  id v13 = v7;
  objc_msgSend(v1, sel_addArrangedSubview_, v12);
  objc_msgSend(v1, sel_addArrangedSubview_, v13);

  objc_msgSend(v12, sel_setFont_, *(void *)v8);
  objc_msgSend(v12, sel_setTextColor_, *((void *)v8 + 2));
  objc_msgSend(v6, sel_setFont_, *((void *)v8 + 1));
  id v14 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_2273F5D90;
  id v16 = objc_msgSend(v11, sel_centerXAnchor);
  id v17 = objc_msgSend(v9, sel_centerXAnchor);
  id v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v17);

  *(void *)(v15 + 32) = v18;
  id v19 = objc_msgSend(v11, sel_centerYAnchor);
  id v20 = objc_msgSend(v9, sel_centerYAnchor);
  id v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v20);

  *(void *)(v15 + 40) = v21;
  id v22 = objc_msgSend(v11, sel_widthAnchor);
  id v23 = objc_msgSend(v22, sel_constraintEqualToConstant_, 20.0);

  *(void *)(v15 + 48) = v23;
  id v24 = objc_msgSend(v11, sel_heightAnchor);
  id v25 = objc_msgSend(v24, sel_constraintEqualToConstant_, 20.0);

  *(void *)(v15 + 56) = v25;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_activateConstraints_, isa);

  return objc_msgSend(v1, sel_setSpacing_, 3.0);
}

void FMBTDistanceView.update(with:nextBeacon:)(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = self;
  double v8 = *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_style + 32];
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v3;
  outlined init with take of FMFindingState(a1, (uint64_t)(v9 + 3));
  v9[16] = a2;
  v9[17] = a3;
  id v17 = partial apply for closure #1 in FMBTDistanceView.update(with:nextBeacon:);
  id v18 = v9;
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  uint64_t v15 = thunk for @escaping @callee_guaranteed () -> ();
  id v16 = &block_descriptor_10;
  id v10 = _Block_copy(&v13);
  uint64_t v11 = v3;
  outlined retain of FMFindingState((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
  swift_bridgeObjectRetain();
  swift_release();
  id v17 = (id (*)())destructiveProjectEnumData for FMFindingState;
  id v18 = 0;
  uint64_t v13 = MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  uint64_t v15 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  id v16 = &block_descriptor_3;
  id v12 = _Block_copy(&v13);
  objc_msgSend(v7, sel_transitionWithView_duration_options_animations_completion_, v11, 5242880, v10, v12, v8);
  _Block_release(v12);
  _Block_release(v10);
}

id closure #1 in FMBTDistanceView.update(with:nextBeacon:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of FMFindingState(a2, (uint64_t)v71);
  uint64_t v6 = v71[1];
  double v8 = (void *)v71[2];
  uint64_t v7 = (void *)v71[3];
  uint64_t v9 = v71[8];
  uint64_t v68 = v71[0];
  uint64_t v10 = v71[9];
  uint64_t v11 = v71[10];
  uint64_t v12 = v71[11];
  char v13 = v72;
  uint64_t v69 = a1;
  uint64_t v14 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_distanceLabel);
  outlined init with take of FMFindingState(a2, (uint64_t)&v82);
  unint64_t v65 = v8;
  uint64_t v66 = v6;
  uint64_t v64 = v7;
  char v63 = v13;
  if ((unint64_t)(v83 - 6) >= 4)
  {
    long long v98 = v82;
    long long v100 = v84;
    long long v101 = v85;
    long long v102 = v86;
    long long v103 = v87;
    uint64_t v99 = v83;
    uint64_t v104 = v88;
    char v105 = v89;
    LOBYTE(v61) = v13;
    uint64_t v57 = v11;
    uint64_t v59 = v12;
    uint64_t v53 = v9;
    uint64_t v55 = v10;
    outlined copy of FMFindingMeasurement(v68, v6, v8, v7);
    uint64_t v16 = FMFindingMeasurement.name.getter();
    uint64_t v18 = v17;
    outlined retain of FMFindingState((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
    uint64_t v15 = (void *)MEMORY[0x22A677130](v16, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = 0;
  }
  objc_msgSend(v14, sel_setText_, v15, v53, v55, v57, v59, v61);

  id v19 = *(void **)(v69 + OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_hintLabel);
  id v20 = FMFindingState.hintLabelColor.getter();
  objc_msgSend(v19, sel_setTextColor_, v20);

  if (a4)
  {
    swift_bridgeObjectRetain();
    v21._object = (void *)0x80000002273FD900;
    v21._uint64_t countAndFlagsBits = 0xD000000000000016;
    FMFindingLocalizedString(_:fallbackKey:tableName:)(v21, (Swift::String_optional)0, (Swift::String_optional)0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_2273F4A20;
    *(void *)(v22 + 56) = MEMORY[0x263F8D310];
    *(void *)(v22 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v22 + 32) = a3;
    *(void *)(v22 + 40) = a4;
    uint64_t v23 = String.init(format:_:)();
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    id v26 = (void *)MEMORY[0x22A677130](v23, v25);
    double v27 = &selRef_setLastPresentedNowPlaying_;
  }
  else
  {
    outlined init with take of FMFindingState(a2, (uint64_t)&v73);
    double v27 = &selRef_setLastPresentedNowPlaying_;
    if ((unint64_t)(v74 - 6) < 4)
    {
      id v26 = 0;
      goto LABEL_10;
    }
    long long v90 = v73;
    long long v92 = v75;
    long long v93 = v76;
    long long v94 = v77;
    long long v95 = v78;
    uint64_t v91 = v74;
    uint64_t v96 = v79;
    char v97 = v80;
    char v28 = v81;
    LOBYTE(v62) = v63;
    uint64_t v58 = v11;
    uint64_t v60 = v12;
    uint64_t v54 = v9;
    uint64_t v56 = v10;
    outlined copy of FMFindingMeasurement(v68, v66, v65, v64);
    uint64_t v29 = FMFindingMeasurement.hint(for:)(v28);
    uint64_t v31 = v30;
    outlined retain of FMFindingState((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
    id v26 = (void *)MEMORY[0x22A677130](v29, v31);
  }
  swift_bridgeObjectRelease();
LABEL_10:
  objc_msgSend(v19, v27[163], v26, v54, v56, v58, v60, v62);

  id v32 = objc_msgSend(v14, sel_text);
  if (!v32)
  {
    uint64_t v38 = v69;
    if (objc_msgSend(v14, sel_isHidden)) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  id v33 = v32;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v36 = v35;

  swift_bridgeObjectRelease();
  if ((v36 & 0x2000000000000000) != 0) {
    uint64_t v37 = HIBYTE(v36) & 0xF;
  }
  else {
    uint64_t v37 = v34 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v38 = v69;
  if (objc_msgSend(v14, sel_isHidden) != (v37 == 0))
  {
    if (v37)
    {
      uint64_t v39 = 0;
      double v40 = 1.0;
LABEL_19:
      objc_msgSend(v14, sel_setAlpha_, v40);
      objc_msgSend(v14, sel_setHidden_, v39);
      goto LABEL_20;
    }
LABEL_18:
    double v40 = 0.0;
    uint64_t v39 = 1;
    goto LABEL_19;
  }
LABEL_20:
  id v41 = objc_msgSend(v19, sel_text);
  if (v41)
  {
    id v42 = v41;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    swift_bridgeObjectRelease();
    uint64_t v46 = HIBYTE(v45) & 0xF;
    if ((v45 & 0x2000000000000000) == 0) {
      uint64_t v46 = v43 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v47 = v46 == 0;
  }
  else
  {
    BOOL v47 = 1;
  }
  long long v48 = *(void **)(v38 + OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_bottomRowStackView);
  if (v47 != objc_msgSend(v48, sel_isHidden))
  {
    double v49 = 1.0;
    if (v47) {
      double v49 = 0.0;
    }
    objc_msgSend(v48, sel_setAlpha_, v49);
    objc_msgSend(v48, sel_setHidden_, v47);
  }
  long long v50 = *(void **)(v38 + OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityViewContainer);
  id result = objc_msgSend(v50, sel_isHidden);
  if ((a4 == 0) != result)
  {
    double v52 = 1.0;
    if (!a4) {
      double v52 = 0.0;
    }
    objc_msgSend(v50, sel_setAlpha_, v52);
    return objc_msgSend(v50, sel_setHidden_, a4 == 0);
  }
  return result;
}

id FMFindingState.hintLabelColor.getter()
{
  outlined init with take of FMFindingState(v0, (uint64_t)v4);
  if ((unint64_t)(v5 - 2) > 3) {
    uint64_t v1 = &selRef_clearColor;
  }
  else {
    uint64_t v1 = off_264801448[v5 - 2];
  }
  id v2 = [self *v1];
  return v2;
}

id FMBTDistanceView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMBTDistanceView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMBTDistanceView()
{
  return self;
}

void destroy for FMBTDistanceViewStyle(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + 16);
}

uint64_t initializeWithCopy for FMBTDistanceViewStyle(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

uint64_t assignWithCopy for FMBTDistanceViewStyle(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  uint64_t v10 = *(void **)(a2 + 16);
  uint64_t v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  id v12 = v10;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FMBTDistanceViewStyle(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMBTDistanceViewStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMBTDistanceViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FMBTDistanceViewStyle()
{
  return &type metadata for FMBTDistanceViewStyle;
}

uint64_t sub_2273DDB88()
{
  uint64_t v1 = *(char **)(v0 + 40);
  if ((unint64_t)(v1 - 1) >= 9)
  {
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 144, 7);
}

id partial apply for closure #1 in FMBTDistanceView.update(with:nextBeacon:)()
{
  return closure #1 in FMBTDistanceView.update(with:nextBeacon:)(*(void *)(v0 + 16), (long long *)(v0 + 24), *(void *)(v0 + 128), *(void *)(v0 + 136));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t FMFindingMeasurement.name.getter()
{
  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  strcpy((char *)&v7, "BT_DIRECTION_");
  HIWORD(v7._object) = -4864;
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v8);
  unint64_t v1 = 0xE300000000000000;
  uint64_t v2 = 5390662;
  switch(v8[2])
  {
    case 2:
      break;
    case 3:
      unint64_t v1 = 0xE400000000000000;
      uint64_t v2 = 1380009294;
      break;
    case 4:
      unint64_t v1 = 0xE400000000000000;
      uint64_t v2 = 1163019592;
      break;
    case 5:
      unint64_t v1 = 0xE500000000000000;
      uint64_t v2 = 0x444E554F46;
      break;
    default:
      unint64_t v1 = 0xE700000000000000;
      uint64_t v2 = 0x4E574F4E4B4E55;
      break;
  }
  unint64_t v3 = v1;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x315F544E49485FLL;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  uint64_t countAndFlagsBits = FMFindingLocalizedString(_:fallbackKey:tableName:)(v7, (Swift::String_optional)0, (Swift::String_optional)0)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t FMFindingMeasurement.hint(for:)(char a1)
{
  uint64_t v3 = 0x4953414552434544;
  if (a1 == 1)
  {
    uint64_t v3 = 0x4953414552434E49;
  }
  else if (a1 != 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (void *)0xE000000000000000;
    goto LABEL_6;
  }
  v17[0] = 95;
  v17[1] = 0xE100000000000000;
  unint64_t v6 = 0xEA0000000000474ELL;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = 95;
  uint64_t v5 = (void *)0xE100000000000000;
LABEL_6:
  outlined init with take of FMFindingMeasurement(v1, (uint64_t)v17);
  if (v17[2] == 3)
  {
    uint64_t v15 = FMFindingMeasurement.hintKey.getter();
    uint64_t v16 = v7;
    v8._uint64_t countAndFlagsBits = v4;
    v8._object = v5;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    uint64_t v9 = v15;
    uint64_t v10 = v16;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = FMFindingMeasurement.hintKey.getter();
    uint64_t v10 = v11;
  }
  uint64_t v12 = v10;
  uint64_t countAndFlagsBits = FMFindingLocalizedString(_:fallbackKey:tableName:)(*(Swift::String *)&v9, (Swift::String_optional)0, (Swift::String_optional)0)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t FMFindingMeasurement.hintKey.getter()
{
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  strcpy((char *)v6, "BT_DIRECTION_");
  HIWORD(v6[1]) = -4864;
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v7);
  unint64_t v1 = 0xE300000000000000;
  uint64_t v2 = 5390662;
  switch(v7[2])
  {
    case 2:
      break;
    case 3:
      unint64_t v1 = 0xE400000000000000;
      uint64_t v2 = 1380009294;
      break;
    case 4:
      unint64_t v1 = 0xE400000000000000;
      uint64_t v2 = 1163019592;
      break;
    case 5:
      unint64_t v1 = 0xE500000000000000;
      uint64_t v2 = 0x444E554F46;
      break;
    default:
      unint64_t v1 = 0xE700000000000000;
      uint64_t v2 = 0x4E574F4E4B4E55;
      break;
  }
  unint64_t v3 = v1;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x325F544E49485FLL;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  return v6[0];
}

unint64_t type metadata accessor for NSLayoutConstraint()
{
  unint64_t result = lazy cache variable for type metadata for NSLayoutConstraint;
  if (!lazy cache variable for type metadata for NSLayoutConstraint)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  }
  return result;
}

void specialized FMBTDistanceView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_distanceLabel;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_bottomRowStackView;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_hintLabel;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityViewContainer;
  *(void *)&v0[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82E00]), sel_init);
  uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityView;
  *(void *)&v0[v5] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F823E8]), sel_initWithActivityIndicatorStyle_, 100);
  uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_style;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v7 = &v0[v6];
  Swift::String v8 = (void *)static FMBTDistanceViewStyle.default;
  uint64_t v9 = *(void **)algn_26817C938;
  uint64_t v10 = (void *)qword_26817C940;
  long long v11 = unk_26817C948;
  *(void *)uint64_t v7 = static FMBTDistanceViewStyle.default;
  *((void *)v7 + 1) = v9;
  *((void *)v7 + 2) = v10;
  *(_OWORD *)(v7 + 24) = v11;
  id v12 = v8;
  id v13 = v9;
  id v14 = v10;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unsigned char *storeEnumTagSinglePayload for FMPFSKPatternFragmentNodeTravelingStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2273DE260);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKPatternFragmentNodeTravelingStyle()
{
  return &type metadata for FMPFSKPatternFragmentNodeTravelingStyle;
}

void *__swift_memcpy289_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x121uLL);
}

uint64_t getEnumTagSinglePayload for FMPFSKPatternFragmentNodeStyle(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 289)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FMPFSKPatternFragmentNodeStyle(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(unsigned char *)(result + 288) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 289) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKPatternFragmentNodeStyle()
{
  return &type metadata for FMPFSKPatternFragmentNodeStyle;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FMPFSKPatternFragmentNodeTravelingStyle(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMPFSKPatternFragmentNodeTravelingStyle()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FMPFSKPatternFragmentNodeTravelingStyle()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMPFSKPatternFragmentNodeTravelingStyle()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FMPFSKPatternFragmentNodeTravelingStyle@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FMPFSKPatternFragmentNodeTravelingStyle.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FMPFSKPatternFragmentNodeTravelingStyle(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xEF637241646E4165;
  unint64_t v4 = 0xE900000000000065;
  uint64_t v5 = 0x7672754364617571;
  if (v2 != 1)
  {
    uint64_t v5 = 0x7261656E696CLL;
    unint64_t v4 = 0xE600000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x7672754364617571;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unint64_t lazy protocol witness table accessor for type FMPFSKPatternFragmentNodeTravelingStyle and conformance FMPFSKPatternFragmentNodeTravelingStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type FMPFSKPatternFragmentNodeTravelingStyle and conformance FMPFSKPatternFragmentNodeTravelingStyle;
  if (!lazy protocol witness table cache variable for type FMPFSKPatternFragmentNodeTravelingStyle and conformance FMPFSKPatternFragmentNodeTravelingStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMPFSKPatternFragmentNodeTravelingStyle and conformance FMPFSKPatternFragmentNodeTravelingStyle);
  }
  return result;
}

unint64_t specialized FMPFSKPatternFragmentNodeTravelingStyle.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FMPFSKPatternFragmentNodeTravelingStyle.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

void closure #1 in FMPFView.init(experienceType:config:distance:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
}

id FMPFView.__deallocating_deinit()
{
  uint64_t v1 = v0;
  Swift::String v2 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ecoModeObservation];
  if (v2)
  {
    id v3 = v2;
    dispatch thunk of NSKeyValueObservation.invalidate()();
  }
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FMPFView();
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

void FMPFView.setupConstraints()()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView];
  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  Swift::String v2 = self;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2273F5D90;
  id v4 = objc_msgSend(v1, sel_topAnchor);
  id v5 = objc_msgSend(v0, sel_topAnchor);
  id v6 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v5);

  *(void *)(v3 + 32) = v6;
  id v7 = objc_msgSend(v1, sel_bottomAnchor);
  id v8 = objc_msgSend(v0, sel_bottomAnchor);
  id v9 = objc_msgSend(v7, sel_constraintEqualToAnchor_, v8);

  *(void *)(v3 + 40) = v9;
  id v10 = objc_msgSend(v1, sel_leadingAnchor);
  id v11 = objc_msgSend(v0, sel_leadingAnchor);
  id v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

  *(void *)(v3 + 48) = v12;
  id v13 = objc_msgSend(v1, sel_trailingAnchor);
  id v14 = objc_msgSend(v0, sel_trailingAnchor);
  id v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

  *(void *)(v3 + 56) = v15;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_activateConstraints_, isa);
}

void FMPFView.setUpSKScene()()
{
  objc_msgSend(v0, sel_bounds);
  double v2 = v1;
  double v4 = v3;
  int v5 = v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_experienceType];
  if (v5 == 1)
  {
    if (one-time initialization token for r1NoAR != -1) {
      swift_once();
    }
    id v6 = &xmmword_26817C888;
  }
  else
  {
    if (one-time initialization token for r1OrBT != -1) {
      swift_once();
    }
    id v6 = &xmmword_26817C7B8;
  }
  double v7 = *(double *)v6;
  objc_msgSend(v0, sel_bounds);
  double v9 = v8;
  double v11 = v10;
  id v12 = objc_allocWithZone((Class)type metadata accessor for FMPFRingView());
  id v13 = FMPFRingView.init(sceneSize:diskRadiusScale:verticalOffset:)(0, 0, v9, v11, v7);
  unsigned __int8 v24 = v5;
  outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_config], (uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)v25, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  if (_s10TVRemoteUI23FMPFSKPatternNodeConfigVSgWOg((uint64_t)v26) == 1)
  {
    __break(1u);
  }
  else
  {
    v28[8] = v26[8];
    v28[9] = v26[9];
    v28[10] = v26[10];
    char v29 = v27;
    v28[4] = v26[4];
    id v28[5] = v26[5];
    v28[6] = v26[6];
    v28[7] = v26[7];
    v28[0] = v26[0];
    v28[1] = v26[1];
    v28[2] = v26[2];
    v28[3] = v26[3];
    id v14 = objc_allocWithZone((Class)type metadata accessor for FMPFSKScene());
    outlined retain of FMPFSKPatternNodeConfig?((uint64_t)v25, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of FMPFSKPatternNodeConfig?);
    id v15 = v13;
    uint64_t v16 = v0;
    uint64_t v17 = FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(&v24, (uint64_t)v28, v13, (uint64_t)v0, &protocol witness table for FMPFView, v2, v4);
    -[NSObject setFrame:](v15, sel_setFrame_, 0.0, 0.0, v2, v4);
    FMPFRingView.setOpacity(_:sprung:)(0, 0, 1);
    uint64_t v18 = *(void **)&v16[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ringView];
    *(void *)&v16[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ringView] = v13;
    id v19 = v15;

    [v19 setUserInteractionEnabled:0];
    objc_msgSend(v16, sel_addSubview_, v19);
    id v20 = *(void **)&v16[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView];
    objc_msgSend(v20, sel_presentScene_, v17);
    objc_msgSend(v20, sel_setAsynchronous_, 1);
    Swift::String v21 = *(void **)&v16[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
    *(void *)&v16[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene] = v17;
    uint64_t v22 = v17;

    if (*(void *)&v16[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastThermalState] == 3) {
      uint64_t v23 = 30;
    }
    else {
      uint64_t v23 = 60;
    }
    objc_msgSend(v20, sel_setPreferredFramesPerSecond_, v23);
  }
}

void FMPFView.updateConvergingBackdropColor(sprung:)(char a1)
{
  uint64_t v2 = v1;
  toValue[1] = *(Swift::Double *)MEMORY[0x263EF8340];
  if (one-time initialization token for fmpfBlackColor != -1) {
    swift_once();
  }
  id v4 = (id)static UIColor.fmpfBlackColor;
  int v5 = self;
  id v6 = v4;
  id v7 = objc_msgSend(v5, sel_standardUserDefaults);
  objc_msgSend(v7, sel_fmpfBlackBackdropSigma);
  float v9 = v8;

  id v10 = objc_msgSend(v5, sel_standardUserDefaults);
  objc_msgSend(v10, sel_fmpfBlackBackdropAlpha);
  float v12 = v11;

  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_isConvergingBackdropShown) == 1
    && (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSpringsIntensity + 8) & 1) == 0)
  {
    double v13 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSpringsIntensity);
    id v14 = v6;
    id v15 = objc_msgSend(v5, sel_standardUserDefaults);
    objc_msgSend(v15, sel_fmpfGreenBackdropHue);
    double v17 = v16;
    objc_msgSend(v15, sel_fmpfGreenBackdropSaturation);
    double v19 = v18;
    objc_msgSend(v15, sel_fmpfGreenBackdropValue);
    id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F825C8]), sel_initWithHue_saturation_brightness_alpha_, v17, v19, v20, 1.0);

    id v4 = UIColor.fmpfBlendWithColor(_:factor:)(v21, v13);
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_useGreenBackdropBlurAndOpacity) == 1)
  {
    id v22 = objc_msgSend(v5, sel_standardUserDefaults);
    objc_msgSend(v22, sel_fmpfGreenBackdropSigma);
    float v9 = v23;

    id v24 = objc_msgSend(v5, sel_standardUserDefaults);
    objc_msgSend(v24, sel_fmpfGreenBackdropAlpha);
    float v12 = v25;
  }
  if (v4)
  {
    Swift::Double v40 = 0.5;
    toValue[0] = 0.5;
    uint64_t v38 = 0x3FE0000000000000;
    Swift::Double v39 = 0.5;
    id v26 = v4;
    objc_msgSend(v26, sel_getRed_green_blue_alpha_, toValue, &v40, &v39, &v38);
    uint64_t v27 = v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSprings;
    uint64_t v28 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSprings);
    if (a1)
    {
      uint64_t v29 = v28 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(Swift::Double *)uint64_t v29 = toValue[0];
      *(unsigned char *)(v29 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
      uint64_t v30 = *(void *)(v27 + 8) + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(Swift::Double *)uint64_t v30 = v40;
      *(unsigned char *)(v30 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
      uint64_t v31 = *(void *)(v27 + 16) + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(Swift::Double *)uint64_t v31 = v39;
      *(unsigned char *)(v31 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
      uint64_t v32 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropSigmaSpring)
          + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(double *)uint64_t v32 = v9;
      *(unsigned char *)(v32 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
      uint64_t v33 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropAlphaSpring)
          + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(double *)uint64_t v33 = v12;
      *(unsigned char *)(v33 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
    }
    else
    {
      FLSpring.resetImmediately(toValue:)(toValue[0]);
      *(unsigned char *)(v28 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      uint64_t v34 = *(void *)(v27 + 8);
      FLSpring.resetImmediately(toValue:)(v40);
      *(unsigned char *)(v34 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      uint64_t v35 = *(void *)(v27 + 16);
      FLSpring.resetImmediately(toValue:)(v39);
      *(unsigned char *)(v35 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      uint64_t v36 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropSigmaSpring);
      FLSpring.resetImmediately(toValue:)(v9);
      *(unsigned char *)(v36 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      uint64_t v37 = *(void *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropAlphaSpring);
      FLSpring.resetImmediately(toValue:)(v12);
      *(unsigned char *)(v37 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    }
  }
}

Swift::Void __swiftcall FMPFView.thermalStateDidChange(notification:)(NSNotification notification)
{
  if ([(objc_class *)notification.super.isa object])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)v5, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v7)
  {
    type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for NSProcessInfo);
    if (swift_dynamicCast())
    {
      id v2 = objc_msgSend(v4, sel_thermalState);
      *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastThermalState) = v2;
      if (v2 == (id)3) {
        uint64_t v3 = 30;
      }
      else {
        uint64_t v3 = 60;
      }
      objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView), sel_setPreferredFramesPerSecond_, v3);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v6);
  }
}

Swift::Void __swiftcall FMPFView.setup()()
{
  objc_msgSend(v0, sel_bounds);
  if (v2 == 0.0 && v1 == 0.0)
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    id v3 = objc_msgSend(v0, sel_description);
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = v5;

    v7._uint64_t countAndFlagsBits = v4;
    v7._object = v6;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x80000002273FDB70;
    v8._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    FMPFView.setUpSKScene()();
  }
}

uint64_t type metadata accessor for FMPFView()
{
  return self;
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return MEMORY[0x270F9D8F0]();
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v4 = String.index(_:offsetBy:limitedBy:)();
  if (v5) {
    unint64_t v4 = 15;
  }
  if (4 * v3 < v4 >> 14) {
    goto LABEL_12;
  }
  return MEMORY[0x270F9D8F0]();
}

char *specialized FMPFView.init(experienceType:config:distance:)(unsigned __int8 *a1, uint64_t a2)
{
  outlined init with take of FMPFSKPatternNodeConfig?(a2, (uint64_t)v38, (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)v38, (uint64_t)v52, (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  int v5 = *a1;
  *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_style] = 0x3FE8000000000000;
  uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView;
  id v7 = objc_allocWithZone(MEMORY[0x263F17C50]);
  Swift::String v8 = v2;
  *(void *)&v2[v6] = objc_msgSend(v7, sel_init);
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ringView] = 0;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_scnSceneView] = 0;
  float v9 = &v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSpringsIntensity];
  *(void *)float v9 = 0;
  v9[8] = 1;
  uint64_t v10 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropSigmaSpring;
  *(void *)&v8[v10] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  uint64_t v11 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropAlphaSpring;
  *(void *)&v8[v11] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene] = 0;
  float v12 = &v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastAskedRadiusFactor];
  *(void *)float v12 = 0;
  v12[8] = 1;
  v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastAskedSprungRadiusFactor] = 2;
  v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_useGreenBackdropBlurAndOpacity] = 0;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_locationManager] = 0;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ecoModeObservation] = 0;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_sceneIsRunning] = 0;
  v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_isConvergingBackdropShown] = 0;
  v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_experienceType] = v5;
  outlined init with take of FMPFSKPatternNodeConfig?(a2, (uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  if (_s10TVRemoteUI23FMPFSKPatternNodeConfigVSgWOg((uint64_t)v39) == 1)
  {
    if (v5 == 1)
    {
      if (one-time initialization token for r1NoAR != -1) {
        swift_once();
      }
      v37[1] = unk_26817C740;
      _OWORD v37[2] = xmmword_26817C750;
      v37[3] = xmmword_26817C760;
      LOBYTE(v37[4]) = byte_26817C770;
      long long v34 = xmmword_26817C700;
      long long v35 = *(_OWORD *)&byte_26817C710;
      long long v36 = xmmword_26817C720;
      v37[0] = *(_OWORD *)&byte_26817C730;
      long long v30 = static FMPFSKPatternNodeConfig.r1NoAR;
      long long v31 = *(_OWORD *)&byte_26817C6D0;
      long long v32 = xmmword_26817C6E0;
      long long v33 = *(_OWORD *)&byte_26817C6F0;
    }
    else
    {
      LOBYTE(v40) = 1;
      long long v30 = xmmword_2273F5ED0;
      LOBYTE(v31) = 1;
      *((void *)&v31 + 1) = 0;
      LOBYTE(v32) = 1;
      *((void *)&v32 + 1) = 0;
      LOBYTE(v33) = 1;
      *((void *)&v33 + 1) = 0;
      LOBYTE(v34) = 1;
      *((void *)&v34 + 1) = 0;
      LOBYTE(v35) = 1;
      *((void *)&v35 + 1) = 0;
      LOBYTE(v36) = 1;
      *((void *)&v36 + 1) = 0;
      LOBYTE(v37[0]) = 1;
      memset((char *)v37 + 8, 0, 57);
    }
    outlined retain of FMPFSKPatternNodeConfig((uint64_t)&v30);
    long long v48 = v37[1];
    long long v49 = v37[2];
    long long v50 = v37[3];
    char v51 = v37[4];
    long long v44 = v34;
    long long v45 = v35;
    long long v46 = v36;
    long long v47 = v37[0];
    long long v40 = v30;
    long long v41 = v31;
    long long v42 = v32;
    long long v43 = v33;
  }
  else
  {
    outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)v52, (uint64_t)&v40, (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  }
  v37[1] = v48;
  _OWORD v37[2] = v49;
  v37[3] = v50;
  LOBYTE(v37[4]) = v51;
  long long v34 = v44;
  long long v35 = v45;
  long long v36 = v46;
  v37[0] = v47;
  long long v30 = v40;
  long long v31 = v41;
  long long v32 = v42;
  long long v33 = v43;
  destructiveProjectEnumData for FMFindingState(&v30);
  outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)&v30, (uint64_t)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_config], (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  outlined retain of FMPFSKPatternNodeConfig?(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of FMPFSKPatternNodeConfig?);
  double v13 = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  id v14 = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  id v15 = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  float v16 = &v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSprings];
  *(void *)float v16 = v13;
  *((void *)v16 + 1) = v14;
  *((void *)v16 + 2) = v15;
  id v17 = objc_msgSend(self, sel_processInfo);
  id v18 = objc_msgSend(v17, sel_thermalState);

  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastThermalState] = v18;
  v29.receiver = v8;
  v29.super_class = (Class)type metadata accessor for FMPFView();
  double v19 = (char *)objc_msgSendSuper2(&v29, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  float v20 = *(void **)&v19[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView];
  id v21 = self;
  id v22 = v19;
  id v23 = objc_msgSend(v21, sel_clearColor);
  objc_msgSend(v20, sel_setBackgroundColor_, v23);

  objc_msgSend(v20, sel_setAllowsTransparency_, 1);
  objc_msgSend(v22, sel_addSubview_, v20);
  FMPFView.setupConstraints()();
  id v24 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v24, sel_addObserver_selector_name_object_, v22, sel_thermalStateDidChangeWithNotification_, *MEMORY[0x263F08458], 0);

  id v28 = objc_msgSend(self, sel_standardUserDefaults);
  swift_getKeyPath();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v25 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
  swift_release();
  swift_release();

  outlined retain of FMPFSKPatternNodeConfig?(a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of FMPFSKPatternNodeConfig?);
  id v26 = *(void **)&v22[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ecoModeObservation];
  *(void *)&v22[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ecoModeObservation] = v25;

  return v22;
}

uint64_t _s10TVRemoteUI23FMPFSKPatternNodeConfigVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 128);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t outlined retain of FMPFSKPatternNodeConfig(uint64_t a1)
{
  return a1;
}

void outlined copy of FMPFSKPatternNodeConfig?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a17 != 1) {
    outlined copy of FMPFSKLabelNodeStyle?(a16, a17, a18);
  }
}

char *keypath_get_selector_fmpfEcoMode()
{
  return sel_fmpfEcoMode;
}

id sub_2273DFD70@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fmpfEcoMode);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2273DFDA4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFmpfEcoMode_, *a1);
}

uint64_t sub_2273DFDB8()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in FMPFView.init(experienceType:config:distance:)(uint64_t a1, uint64_t a2)
{
  closure #1 in FMPFView.init(experienceType:config:distance:)(a1, a2, v2);
}

uint64_t outlined retain of FMPFSKPatternNodeConfig?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 176);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    v4);
  return a1;
}

void outlined consume of FMPFSKPatternNodeConfig?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a17 != 1) {
    outlined consume of FMPFSKLabelNodeStyle?(a16, a17, a18);
  }
}

uint64_t outlined init with take of FMPFSKPatternNodeConfig?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void specialized FMPFView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_style] = 0x3FE8000000000000;
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F17C50]), sel_init);
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ringView] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_scnSceneView] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSpringsIntensity];
  *(void *)uint64_t v2 = 0;
  v2[8] = 1;
  uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropSigmaSpring;
  *(void *)&v0[v3] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropAlphaSpring;
  *(void *)&v0[v4] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene] = 0;
  uint64_t v5 = &v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastAskedRadiusFactor];
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastAskedSprungRadiusFactor] = 2;
  v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_useGreenBackdropBlurAndOpacity] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_locationManager] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ecoModeObservation] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_sceneIsRunning] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_isConvergingBackdropShown] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

char *FindingViewController.findingView.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController____lazy_storage___findingView;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController____lazy_storage___findingView);
  if (v2)
  {
    uint64_t v3 = *(char **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController____lazy_storage___findingView);
  }
  else
  {
    uint64_t v4 = v0;
    unsigned __int8 v10 = 2;
    _s10TVRemoteUI23FMPFSKPatternNodeConfigVSgWOi0_((uint64_t)v11);
    outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)v11, (uint64_t)v12);
    id v5 = objc_allocWithZone((Class)type metadata accessor for FMPFView());
    uint64_t v6 = specialized FMPFView.init(experienceType:config:distance:)(&v10, (uint64_t)v12);
    id v7 = *(void **)(v0 + v1);
    *(void *)(v4 + v1) = v6;
    uint64_t v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

id FindingViewController.__deallocating_deinit()
{
  uint64_t v1 = FindingViewController.findingView.getter();
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene;
  if (*(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene]) {
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView], sel_presentScene_, 0);
  }
  uint64_t v4 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ringView];
  if (v4) {
    objc_msgSend(v4, sel_removeFromSuperview);
  }
  id v5 = *(void **)&v2[v3];
  *(void *)&v2[v3] = 0;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for FindingViewController();
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

Swift::Void __swiftcall FindingViewController.viewDidLoad()()
{
  id v1 = objc_msgSend(v0, sel_view);
  if (!v1)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(self, sel_blackColor);
  objc_msgSend(v2, sel_setBackgroundColor_, v3);

  id v4 = objc_msgSend(v0, sel_view);
  if (!v4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  id v5 = v4;
  uint64_t v6 = FindingViewController.findingView.getter();
  objc_msgSend(v5, sel_addSubview_, v6);

  id v7 = objc_msgSend(v0, sel_view);
  if (v7)
  {
    id v8 = v7;
    objc_msgSend(v7, sel_addSubview_, *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_distanceLabel]);

    FindingViewController.setupLabels()();
    FindingViewController.setupInstructionsView()();
    FindingViewController.setupConstraints()();
    v9.receiver = v0;
    v9.super_class = (Class)type metadata accessor for FindingViewController();
    objc_msgSendSuper2(&v9, sel_viewDidLoad);
    return;
  }
LABEL_7:
  __break(1u);
}

Swift::Void __swiftcall FindingViewController.viewIsAppearing(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  v23.receiver = v2;
  v23.super_class = (Class)type metadata accessor for FindingViewController();
  objc_msgSendSuper2(&v23, sel_viewIsAppearing_, a1);
  FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding()();
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_isFirstAppear;
  if (v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_isFirstAppear] == 1)
  {
    uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer;
    objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer], sel_invalidate);
    uint64_t v6 = *(void **)&v2[v5];
    *(void *)&v2[v5] = 0;

    FindingViewController.startNISession()();
    id v7 = FindingViewController.findingView.getter();
    id v8 = objc_msgSend(v2, sel_view);
    if (v8)
    {
      objc_super v9 = v8;
      objc_msgSend(v8, sel_bounds);
      double v11 = v10;
      double v13 = v12;
      double v15 = v14;
      double v17 = v16;

      objc_msgSend(v7, sel_setFrame_, v11, v13, v15, v17);
      id v18 = FindingViewController.findingView.getter();
      FMPFView.setup()();

      uint64_t v19 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_hapticsController];
      FMR1HapticsController.setUpHaptics()();
      uint64_t v20 = swift_allocObject();
      swift_unknownObjectWeakInit();
      id v21 = (void (**)(uint64_t, uint64_t))(v19
                                                   + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler);
      uint64_t v22 = *(void *)(v19 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler);
      *id v21 = partial apply for closure #1 in FindingViewController.viewIsAppearing(_:);
      v21[1] = (void (*)(uint64_t, uint64_t))v20;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(v22);
      FindingViewController.updateHaptics()();
      v2[v4] = 0;
    }
    else
    {
      __break(1u);
    }
  }
}

void closure #1 in FindingViewController.viewIsAppearing(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x22A6786A0](v4);
  if (v5)
  {
    uint64_t v6 = (char *)v5;
    outlined init with copy of Any?(a2, (uint64_t)v13);
    if (v14)
    {
      if (swift_dynamicCast())
      {
        id v7 = FindingViewController.findingView.getter();
        id v8 = *(void **)&v7[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
        if (v8)
        {
          objc_super v9 = v8;
          Swift::Double v10 = v12;
LABEL_9:
          FMPFSKScene.pulseBTNode(duration:)(v10);

          id v7 = v6;
          uint64_t v6 = v9;
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v13);
    }
    id v7 = FindingViewController.findingView.getter();
    double v11 = *(void **)&v7[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
    if (v11)
    {
      objc_super v9 = v11;
      Swift::Double v10 = 0.5;
      goto LABEL_9;
    }
LABEL_10:
  }
}

Swift::Void __swiftcall FindingViewController.viewDidDisappear(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  id v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_super v9 = (uint64_t *)(*(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_hapticsController]
                 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler);
  uint64_t v10 = *v9;
  uint64_t *v9 = 0;
  v9[1] = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(v10);
  FMR1HapticsController.stopHaptics()();
  FMR1HapticsController.tearDownHaptics()();
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_niSession], sel_invalidate);
  double v11 = FindingViewController.findingView.getter();
  double v12 = v11;
  uint64_t v13 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene;
  if (*(void *)&v11[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene]) {
    objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView], sel_presentScene_, 0);
  }
  uint64_t v14 = *(void **)&v12[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ringView];
  if (v14) {
    objc_msgSend(v14, sel_removeFromSuperview);
  }
  double v15 = *(void **)&v12[v13];
  *(void *)&v12[v13] = 0;

  double v16 = (uint64_t *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_dismissedHandler];
  double v17 = *(void (**)(uint64_t))&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_dismissedHandler];
  if (v17)
  {
    uint64_t v18 = swift_retain();
    v17(v18);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v17);
    uint64_t v19 = *v16;
  }
  else
  {
    uint64_t v19 = 0;
  }
  uint64_t *v16 = 0;
  v16[1] = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(v19);
  uint64_t v20 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sleepPreventer];
  if (*(void *)(v20 + 16))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(v20 + 16) = 0;
  swift_release();
  id v21 = objc_msgSend(self, sel_sharedApplication);
  objc_msgSend(v21, sel_setIdleTimerDisabled_, 0);

  uint64_t v22 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData;
  id v23 = *(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData];
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  objc_msgSend(v23, sel_setSessionEndTime_, isa);

  objc_msgSend(*(id *)&v2[v22], sel_setEndingProximityMeasurement_, *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement]);
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F7C980]), sel_init);
  objc_msgSend(v25, sel_logFindingSessionStatistics_, *(void *)&v2[v22]);

  id v26 = (objc_class *)type metadata accessor for FindingViewController();
  v27.receiver = v2;
  v27.super_class = v26;
  objc_msgSendSuper2(&v27, sel_viewDidDisappear_, a1);
}

void FindingViewController.startNISession()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = *(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData);
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  objc_msgSend(v7, sel_setSessionStartTime_, isa);

  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F140C0]), sel_init);
  uint64_t v10 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_niSession;
  double v11 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_niSession);
  *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_niSession) = v9;

  double v12 = *(void **)(v1 + v10);
  if (v12) {
    objc_msgSend(v12, sel_setDelegate_, v1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_2273F59A0;
  id v14 = objc_allocWithZone(MEMORY[0x263F140B8]);
  double v15 = (void *)MEMORY[0x22A677130](1701995880, 0xE400000000000000);
  id v16 = objc_msgSend(v14, sel_initWithName_devicePresencePreset_, v15, 1);

  *(void *)(v13 + 32) = v16;
  id v17 = objc_allocWithZone(MEMORY[0x263F140B8]);
  uint64_t v18 = (void *)MEMORY[0x22A677130](1918985582, 0xE400000000000000);
  id v19 = objc_msgSend(v17, sel_initWithName_devicePresencePreset_, v18, 4);

  *(void *)(v13 + 40) = v19;
  id v20 = objc_allocWithZone(MEMORY[0x263F140B8]);
  id v21 = (void *)MEMORY[0x22A677130](7496038, 0xE300000000000000);
  id v22 = objc_msgSend(v20, sel_initWithName_devicePresencePreset_, v21, 5);

  *(void *)(v13 + 48) = v22;
  uint64_t v30 = v13;
  specialized Array._endMutation()();
  uint64_t v23 = v30;
  id v24 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_discoveryToken);
  objc_allocWithZone(MEMORY[0x263F14080]);
  id v25 = v24;
  id v26 = specialized @nonobjc NIDevicePresenceConfiguration.init(discoveryToken:regions:preferredUpdateRate:)((uint64_t)v25, v23, 2);

  objc_super v27 = *(void **)(v1 + v10);
  if (v27)
  {
    id v28 = v27;
    objc_msgSend(v28, sel_runWithConfiguration_, v26);
  }
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void closure #1 in FindingViewController.session(_:object:didUpdateRegion:previousRegion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state;
  uint64_t v3 = *(char **)(a2 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 16);
  if ((unint64_t)(v3 - 6) >= 4)
  {
    uint64_t v5 = *(void *)(v2 + 80);
    uint64_t v4 = *(void *)(v2 + 88);
    uint64_t v7 = *(void *)(v2 + 64);
    uint64_t v6 = *(void *)(v2 + 72);
    uint64_t v9 = *(void *)(v2 + 48);
    uint64_t v8 = *(void *)(v2 + 56);
    uint64_t v11 = *(void *)(v2 + 32);
    uint64_t v10 = *(void *)(v2 + 40);
    double v12 = *(void **)(v2 + 24);
    uint64_t v14 = *(void *)v2;
    uint64_t v13 = *(void *)(v2 + 8);
    __int16 v15 = *(_WORD *)(v2 + 96) | 0x300;
    *(void *)&long long v16 = v14;
    *((void *)&v16 + 1) = v13;
    id v17 = v3;
    uint64_t v18 = v12;
    uint64_t v19 = v11;
    uint64_t v20 = v10;
    uint64_t v21 = v9;
    uint64_t v22 = v8;
    uint64_t v23 = v7;
    uint64_t v24 = v6;
    uint64_t v25 = v5;
    uint64_t v26 = v4;
    __int16 v27 = v15;
    outlined copy of FMFindingMeasurement(v14, v13, v3, v12);
    FindingViewController.updateState(to:)(&v16);
    outlined consume of FMFindingState(v14, v13, v3, v12);
  }
}

uint64_t FindingViewController.restartSessionOnError()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v63 = *(void *)(v1 - 8);
  uint64_t v64 = v1;
  MEMORY[0x270FA5388](v1, v2);
  uint64_t v61 = (char *)v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for DispatchQoS();
  uint64_t v60 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62, v4);
  uint64_t v59 = (char *)v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  uint64_t v10 = (void *)((char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v58 = type metadata accessor for DispatchTime();
  uint64_t v57 = *(void *)(v58 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v58, v11);
  uint64_t v14 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12, v15);
  uint64_t v56 = (char *)v51 - v16;
  if (one-time initialization token for findingExperience != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.findingExperience);
  uint64_t v18 = v0;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 134217984;
    *(void *)&long long v66 = *(void *)&v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_227326000, v19, v20, "NISession to restart after a delay of (%ld) ms", v21, 0xCu);
    MEMORY[0x22A6785E0](v21, -1, -1);
  }
  else
  {
  }
  objc_msgSend(*(id *)&v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimer], sel_invalidate);
  uint64_t v22 = &v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state];
  uint64_t v23 = *(char **)&v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 16];
  if ((unint64_t)(v23 - 6) >= 4)
  {
    __int16 v24 = *((_WORD *)v22 + 48);
    uint64_t v55 = v6;
    uint64_t v26 = *((void *)v22 + 10);
    uint64_t v25 = *((void *)v22 + 11);
    uint64_t v53 = v10;
    uint64_t v27 = *((void *)v22 + 8);
    uint64_t v28 = *((void *)v22 + 9);
    uint64_t v30 = *((void *)v22 + 6);
    uint64_t v29 = *((void *)v22 + 7);
    uint64_t v32 = *((void *)v22 + 4);
    uint64_t v31 = *((void *)v22 + 5);
    uint64_t v54 = v7;
    long long v33 = (void *)*((void *)v22 + 3);
    double v52 = v14;
    uint64_t v35 = *(void *)v22;
    uint64_t v34 = *((void *)v22 + 1);
    *(void *)&long long v66 = v35;
    *((void *)&v66 + 1) = v34;
    uint64_t v67 = v23;
    uint64_t v68 = v33;
    uint64_t v69 = v32;
    uint64_t v70 = v31;
    v51[0] = v32;
    v51[1] = v31;
    uint64_t v71 = v30;
    uint64_t v72 = v29;
    v51[2] = v30;
    v51[3] = v29;
    v51[4] = v27;
    uint64_t v73 = v27;
    uint64_t v74 = v28;
    uint64_t v75 = v26;
    uint64_t v76 = v25;
    __int16 v77 = v24 | 0x300;
    outlined copy of FMFindingMeasurement(v35, v34, v23, v33);
    FindingViewController.updateState(to:)(&v66);
    uint64_t v6 = v55;
    uint64_t v10 = v53;
    uint64_t v36 = v35;
    uint64_t v14 = v52;
    uint64_t v37 = v33;
    uint64_t v7 = v54;
    outlined consume of FMFindingState(v36, v34, v23, v37);
  }
  uint64_t v38 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer;
  objc_msgSend(*(id *)&v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer], sel_invalidate);
  Swift::Double v39 = *(void **)&v18[v38];
  *(void *)&v18[v38] = 0;

  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v54 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  uint64_t v55 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds;
  *uint64_t v10 = *(void *)&v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds];
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, *MEMORY[0x263F8F000], v6);
  long long v40 = v56;
  MEMORY[0x22A6770E0](v14, v10);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v57 = *(void *)(v57 + 8);
  uint64_t v41 = v58;
  ((void (*)(char *, uint64_t))v57)(v14, v58);
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = v18;
  aBlock[4] = partial apply for closure #1 in FindingViewController.restartSessionOnError();
  aBlock[5] = v42;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  void aBlock[3] = &block_descriptor_95;
  long long v43 = _Block_copy(aBlock);
  long long v44 = v18;
  swift_release();
  long long v45 = v59;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  long long v46 = v61;
  uint64_t v47 = v64;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  long long v48 = (void *)v54;
  MEMORY[0x22A6773D0](v40, v45, v46, v43);
  _Block_release(v43);

  (*(void (**)(char *, uint64_t))(v63 + 8))(v46, v47);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v45, v62);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v57)(v40, v41);
  uint64_t v50 = *(void *)&v18[v55];
  if (v50 <= 9999) {
    *(void *)&v18[v55] = v50 + 10;
  }
  return result;
}

void FindingViewController.setupConstraints()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v2, sel_bounds);
  double v4 = v3;

  uint64_t v5 = FindingViewController.findingView.getter();
  objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_2273F5D90;
  uint64_t v7 = FindingViewController.findingView.getter();
  id v8 = objc_msgSend(v7, sel_topAnchor);

  id v9 = objc_msgSend(v1, sel_view);
  if (!v9)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v10 = v9;
  id v11 = objc_msgSend(v9, sel_topAnchor);

  id v12 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v11);
  *(void *)(v6 + 32) = v12;
  uint64_t v13 = FindingViewController.findingView.getter();
  id v14 = objc_msgSend(v13, sel_bottomAnchor);

  id v15 = objc_msgSend(v1, sel_view);
  if (!v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v16 = v15;
  id v17 = objc_msgSend(v15, sel_bottomAnchor);

  id v18 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v17);
  *(void *)(v6 + 40) = v18;
  uint64_t v19 = FindingViewController.findingView.getter();
  id v20 = objc_msgSend(v19, sel_leadingAnchor);

  id v21 = objc_msgSend(v1, sel_view);
  if (!v21)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v22 = v21;
  id v23 = objc_msgSend(v21, sel_leadingAnchor);

  id v24 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v23);
  *(void *)(v6 + 48) = v24;
  uint64_t v25 = FindingViewController.findingView.getter();
  id v26 = objc_msgSend(v25, sel_trailingAnchor);

  id v27 = objc_msgSend(v1, sel_view);
  if (!v27)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v28 = v27;
  uint64_t v29 = self;
  id v30 = objc_msgSend(v28, sel_trailingAnchor);

  id v31 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v30);
  *(void *)(v6 + 56) = v31;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v129 = v29;
  objc_msgSend(v29, sel_activateConstraints_, isa);

  uint64_t v33 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_titleLabel;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_titleLabel], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_2273F59A0;
  id v35 = objc_msgSend(*(id *)&v1[v33], sel_topAnchor);
  id v36 = objc_msgSend(v1, sel_view);
  if (!v36)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v37 = v36;
  id v38 = objc_msgSend(v36, sel_topAnchor);

  Swift::Double v39 = (double *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style];
  id v40 = objc_msgSend(v35, sel_constraintEqualToAnchor_constant_, v38, *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style + 40]);

  *(void *)(v34 + 32) = v40;
  id v41 = objc_msgSend(*(id *)&v1[v33], sel_leadingAnchor);
  id v42 = objc_msgSend(v1, sel_view);
  if (!v42)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  long long v43 = v42;
  id v44 = objc_msgSend(v42, sel_safeAreaLayoutGuide);

  id v45 = objc_msgSend(v44, sel_leadingAnchor);
  double v46 = v39[7];
  id v47 = objc_msgSend(v41, sel_constraintEqualToAnchor_constant_, v45, v46);

  *(void *)(v34 + 40) = v47;
  id v48 = objc_msgSend(*(id *)&v1[v33], sel_trailingAnchor);
  id v49 = objc_msgSend(v1, sel_view);
  if (!v49)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v50 = v49;
  id v51 = objc_msgSend(v49, sel_safeAreaLayoutGuide);

  id v52 = objc_msgSend(v51, sel_trailingAnchor);
  id v53 = objc_msgSend(v48, sel_constraintEqualToAnchor_constant_, v52, -v46);

  *(void *)(v34 + 48) = v53;
  specialized Array._endMutation()();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v129, sel_activateConstraints_, v54);

  uint64_t v55 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_nameLabel;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_nameLabel], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_2273F59A0;
  id v57 = objc_msgSend(*(id *)&v1[v55], sel_topAnchor);
  id v58 = objc_msgSend(*(id *)&v1[v33], sel_bottomAnchor);
  id v59 = objc_msgSend(v57, sel_constraintEqualToAnchor_constant_, v58, v39[6]);

  *(void *)(v56 + 32) = v59;
  id v60 = objc_msgSend(*(id *)&v1[v55], sel_leadingAnchor);
  id v61 = objc_msgSend(v1, sel_view);
  if (!v61)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v62 = v61;
  id v63 = objc_msgSend(v61, sel_safeAreaLayoutGuide);

  id v64 = objc_msgSend(v63, sel_leadingAnchor);
  id v65 = objc_msgSend(v60, sel_constraintEqualToAnchor_constant_, v64, v46);

  *(void *)(v56 + 40) = v65;
  id v66 = objc_msgSend(*(id *)&v1[v55], sel_trailingAnchor);
  id v67 = objc_msgSend(v1, sel_view);
  if (!v67)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v68 = v67;
  id v69 = objc_msgSend(v67, sel_safeAreaLayoutGuide);

  id v70 = objc_msgSend(v69, sel_trailingAnchor);
  id v71 = objc_msgSend(v66, sel_constraintEqualToAnchor_constant_, v70, -v46);

  *(void *)(v56 + 48) = v71;
  specialized Array._endMutation()();
  Class v72 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v129, sel_activateConstraints_, v72);

  uint64_t v73 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_distanceLabel];
  objc_msgSend(v73, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_2273F59A0;
  id v75 = objc_msgSend(v73, sel_bottomAnchor);
  id v76 = objc_msgSend(v1, sel_view);
  if (!v76)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  __int16 v77 = v76;
  id v78 = objc_msgSend(v76, sel_safeAreaLayoutGuide);

  id v79 = objc_msgSend(v78, (SEL)&selRef__updateBarButtonItemFromCurrentState + 5);
  id v80 = objc_msgSend(v75, sel_constraintEqualToAnchor_constant_, v79, -v39[10]);

  *(void *)(v74 + 32) = v80;
  id v81 = objc_msgSend(v73, sel_leadingAnchor);
  id v82 = objc_msgSend(v1, sel_view);
  if (!v82)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v83 = v82;
  id v84 = objc_msgSend(v82, sel_safeAreaLayoutGuide);

  id v85 = objc_msgSend(v84, sel_leadingAnchor);
  id v86 = objc_msgSend(v81, sel_constraintEqualToAnchor_constant_, v85, v46);

  *(void *)(v74 + 40) = v86;
  id v87 = objc_msgSend(v73, sel_trailingAnchor);
  id v88 = objc_msgSend(v1, sel_view);
  if (!v88)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  char v89 = v88;
  id v90 = objc_msgSend(v88, sel_safeAreaLayoutGuide);

  id v91 = objc_msgSend(v90, sel_trailingAnchor);
  id v92 = objc_msgSend(v87, sel_constraintEqualToAnchor_constant_, v91, -v46);

  *(void *)(v74 + 48) = v92;
  specialized Array._endMutation()();
  Class v93 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v129, sel_activateConstraints_, v93);

  uint64_t v94 = 16;
  if (v4 < 414.0) {
    uint64_t v94 = 17;
  }
  uint64_t v95 = 14;
  if (v4 < 414.0) {
    uint64_t v95 = 15;
  }
  double v96 = v39[v95];
  double v97 = v39[v94];
  long long v98 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_closeButton];
  objc_msgSend(v98, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0, 4, 9);
  uint64_t v99 = swift_allocObject();
  *(_OWORD *)(v99 + 16) = xmmword_2273F4480;
  id v100 = objc_msgSend(v98, sel_topAnchor);
  id v101 = objc_msgSend(v1, sel_view);
  if (!v101) {
    goto LABEL_36;
  }
  long long v102 = v101;
  id v103 = objc_msgSend(v101, sel_bottomAnchor);

  id v104 = objc_msgSend(v100, sel_constraintEqualToAnchor_constant_, v103, -v97);
  *(void *)(v99 + 32) = v104;
  id v105 = objc_msgSend(v98, sel_leadingAnchor);
  id v106 = objc_msgSend(v1, sel_view);
  if (!v106)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v107 = v106;
  id v108 = objc_msgSend(v106, sel_leadingAnchor);

  id v109 = objc_msgSend(v105, sel_constraintEqualToAnchor_constant_, v108, v96);
  *(void *)(v99 + 40) = v109;
  specialized Array._endMutation()();
  Class v110 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v129, sel_activateConstraints_, v110);

  uint64_t v111 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabelsStackView;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabelsStackView], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v112 = swift_allocObject();
  *(_OWORD *)(v112 + 16) = v128;
  id v113 = objc_msgSend(*(id *)&v1[v111], sel_centerYAnchor);
  id v114 = objc_msgSend(v1, sel_view);
  if (!v114)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v115 = v114;
  id v116 = objc_msgSend(v114, sel_centerYAnchor);

  id v117 = objc_msgSend(v113, sel_constraintEqualToAnchor_constant_, v116, v39[13]);
  *(void *)(v112 + 32) = v117;
  id v118 = objc_msgSend(*(id *)&v1[v111], sel_centerXAnchor);
  id v119 = objc_msgSend(v1, sel_view);
  if (!v119)
  {
LABEL_39:
    __break(1u);
    return;
  }
  uint64_t v120 = v119;
  id v121 = objc_msgSend(v119, sel_centerXAnchor);

  id v122 = objc_msgSend(v118, sel_constraintEqualToAnchor_, v121);
  *(void *)(v112 + 40) = v122;
  id v123 = objc_msgSend(*(id *)&v1[v111], sel_widthAnchor);
  double v124 = v39[12];
  id v125 = objc_msgSend(v123, sel_constraintEqualToConstant_, v124);

  *(void *)(v112 + 48) = v125;
  id v126 = objc_msgSend(*(id *)&v1[v111], sel_heightAnchor);
  id v127 = objc_msgSend(v126, sel_constraintLessThanOrEqualToConstant_, v124);

  *(void *)(v112 + 56) = v127;
  specialized Array._endMutation()();
  Class v130 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v129, sel_activateConstraints_, v130);
}

id FindingViewController.setupLabels()()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_titleLabel;
  double v3 = (double *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style];
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_titleLabel], sel_setFont_, *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style]);
  objc_msgSend(*(id *)&v0[v2], sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(*(id *)&v0[v2], sel_setNumberOfLines_, 0);
  objc_msgSend(*(id *)&v0[v2], sel_setTextAlignment_, 4);
  double v4 = *(void **)&v0[v2];
  uint64_t v5 = self;
  id v6 = v4;
  id v7 = objc_msgSend(v5, sel_whiteColor);
  id v8 = objc_msgSend(v7, sel_colorWithAlphaComponent_, v3[4]);

  objc_msgSend(v6, sel_setTextColor_, v8);
  id v9 = *(id *)&v1[v2];
  v10._uint64_t countAndFlagsBits = 0x474E49444E4946;
  v10._object = (void *)0xE700000000000000;
  uint64_t countAndFlagsBits = FMFindingLocalizedString(_:fallbackKey:tableName:)(v10, (Swift::String_optional)0, (Swift::String_optional)0)._countAndFlagsBits;
  id v12 = (void *)MEMORY[0x22A677130](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setText_, v12);

  id result = objc_msgSend(v1, sel_view);
  if (!result)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id v14 = result;
  objc_msgSend(result, sel_addSubview_, *(void *)&v1[v2]);

  uint64_t v15 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_nameLabel;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_nameLabel], sel_setFont_, *((void *)v3 + 1));
  objc_msgSend(*(id *)&v1[v15], sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(*(id *)&v1[v15], sel_setNumberOfLines_, 0);
  objc_msgSend(*(id *)&v1[v15], sel_setTextAlignment_, 4);
  id v16 = *(id *)&v1[v15];
  id v17 = objc_msgSend(v5, sel_whiteColor);
  objc_msgSend(v16, sel_setTextColor_, v17);

  id v18 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_remoteInfo], sel_tvName);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    id v23 = *(id *)&v1[v15];
    v24._uint64_t countAndFlagsBits = 0x4E5F45544F4D4552;
    v24._object = (void *)0xEB00000000454D41;
    FMFindingLocalizedString(_:fallbackKey:tableName:)(v24, (Swift::String_optional)0, (Swift::String_optional)0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_2273F4A20;
    *(void *)(v25 + 56) = MEMORY[0x263F8D310];
    *(void *)(v25 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v25 + 32) = v20;
    *(void *)(v25 + 40) = v22;
    uint64_t v26 = String.init(format:_:)();
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    uint64_t v29 = v26;
    object = v28;
  }
  else
  {
    id v23 = *(id *)&v1[v15];
    v31._uint64_t countAndFlagsBits = 0x45544F4D4552;
    v31._object = (void *)0xE600000000000000;
    Swift::String v32 = FMFindingLocalizedString(_:fallbackKey:tableName:)(v31, (Swift::String_optional)0, (Swift::String_optional)0);
    object = v32._object;
    uint64_t v29 = v32._countAndFlagsBits;
  }
  uint64_t v33 = (void *)MEMORY[0x22A677130](v29, object);
  swift_bridgeObjectRelease();
  objc_msgSend(v23, sel_setText_, v33);

  id result = objc_msgSend(v1, sel_view);
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v34 = result;
  objc_msgSend(result, sel_addSubview_, *(void *)&v1[v15]);

  uint64_t v35 = *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_closeButton];
  v36._object = (void *)0x80000002273FDFE0;
  v36._uint64_t countAndFlagsBits = 0xD000000000000016;
  Swift::String v37 = FMFindingLocalizedString(_:fallbackKey:tableName:)(v36, (Swift::String_optional)0, (Swift::String_optional)0);
  id v38 = (Swift::String *)(v35 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_legend);
  Swift::String *v38 = v37;
  swift_bridgeObjectRelease();
  Swift::Double v39 = *(void **)(v35 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label);
  id v40 = v38->_object;
  if (v40)
  {
    uint64_t v41 = v38->_countAndFlagsBits;
    id v42 = v39;
    swift_bridgeObjectRetain();
    long long v43 = (void *)MEMORY[0x22A677130](v41, v40);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v44 = v39;
    long long v43 = 0;
  }
  objc_msgSend(v39, sel_setText_, v43);

  id v45 = (objc_class *)objc_msgSend(v5, sel_whiteColor);
  id v46 = objc_msgSend(v5, sel_whiteColor);
  id v47 = objc_msgSend(v46, sel_colorWithAlphaComponent_, 0.2);

  v48._uint64_t countAndFlagsBits = 0x6B72616D78;
  v48._object = (void *)0xE500000000000000;
  v54.value.super.Class isa = v45;
  v54.is_nil = (char)v47;
  FMR1GlyphButton.set(named:tintColor:backgroundColor:)(v48, v54, v55);

  id result = objc_msgSend(v1, sel_view);
  if (result)
  {
    id v49 = result;
    objc_msgSend(result, sel_addSubview_, v35);

    v53[3] = type metadata accessor for FindingViewController();
    v53[0] = v1;
    uint64_t v50 = v1;
    v51._object = (void *)0x80000002273FDFE0;
    v51._uint64_t countAndFlagsBits = 0xD000000000000016;
    Swift::String v52 = FMFindingLocalizedString(_:fallbackKey:tableName:)(v51, (Swift::String_optional)0, (Swift::String_optional)0);
    FMR1GlyphButton.setTarget(_:action:for:accessibilityActionName:)((uint64_t)v53, (uint64_t)sel_closeActionWithSender_, 64, v52._countAndFlagsBits, (uint64_t)v52._object);
    swift_bridgeObjectRelease();
    return (id)outlined destroy of Any?((uint64_t)v53);
  }
LABEL_13:
  __break(1u);
  return result;
}

void FindingViewController.setupInstructionsView()()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel;
  uint64_t v2 = &v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style];
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel], sel_setFont_, *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style + 16]);
  objc_msgSend(*(id *)&v0[v1], sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(*(id *)&v0[v1], sel_setAdjustsFontSizeToFitWidth_, 1);
  objc_msgSend(*(id *)&v0[v1], sel_setNumberOfLines_, 0);
  double v3 = *(void **)&v0[v1];
  double v4 = self;
  id v5 = v3;
  id v6 = objc_msgSend(v4, sel_whiteColor);
  objc_msgSend(v5, sel_setTextColor_, v6);

  objc_msgSend(*(id *)&v0[v1], sel_setTextAlignment_, 1);
  objc_msgSend(*(id *)&v0[v1], sel_setAlpha_, 0.0);
  uint64_t v7 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabelsStackView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabelsStackView], sel_addArrangedSubview_, *(void *)&v0[v1]);
  uint64_t v8 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel], sel_setFont_, *((void *)v2 + 3));
  objc_msgSend(*(id *)&v0[v8], sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(*(id *)&v0[v8], sel_setAdjustsFontSizeToFitWidth_, 1);
  objc_msgSend(*(id *)&v0[v8], sel_setNumberOfLines_, 0);
  id v9 = *(id *)&v0[v8];
  id v10 = objc_msgSend(v4, sel_whiteColor);
  objc_msgSend(v9, sel_setTextColor_, v10);

  objc_msgSend(*(id *)&v0[v8], sel_setTextAlignment_, 1);
  objc_msgSend(*(id *)&v0[v8], sel_setAlpha_, 0.0);
  objc_msgSend(*(id *)&v0[v7], sel_addArrangedSubview_, *(void *)&v0[v8]);
  objc_msgSend(*(id *)&v0[v7], sel_setAxis_, 1);
  objc_msgSend(*(id *)&v0[v7], sel_setAlignment_, 3);
  objc_msgSend(*(id *)&v0[v7], sel_setDistribution_, 0);
  objc_msgSend(*(id *)&v0[v7], sel_setSpacing_, *((double *)v2 + 11));
  id v11 = objc_msgSend(v0, sel_view);
  if (v11)
  {
    id v12 = v11;
    objc_msgSend(v11, sel_addSubview_, *(void *)&v0[v7]);
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for FindingViewController()
{
  return self;
}

void FindingViewController.updateState(to:)(long long *a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 8);
  id v5 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 16);
  id v6 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 24);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 32);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 40);
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 48);
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 56);
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 64);
  uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 72);
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 80);
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 88);
  __int16 v15 = *(_WORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 96);
  uint64_t v16 = v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState;
  uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState + 8);
  id v18 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState + 16);
  uint64_t v19 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState + 24);
  uint64_t v36 = *(void *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState);
  *(void *)uint64_t v16 = v3;
  *(void *)(v16 + 8) = v4;
  *(void *)(v16 + 16) = v5;
  *(void *)(v16 + 24) = v6;
  *(void *)(v16 + 32) = v7;
  *(void *)(v16 + 40) = v8;
  *(void *)(v16 + 48) = v9;
  *(void *)(v16 + 56) = v10;
  *(void *)(v16 + 64) = v11;
  *(void *)(v16 + 72) = v12;
  *(void *)(v16 + 80) = v13;
  *(void *)(v16 + 88) = v14;
  *(_WORD *)(v16 + 96) = v15;
  outlined copy of FMFindingState(v3, v4, v5, v6);
  outlined consume of FMFindingState(v36, v17, v18, v19);
  uint64_t v37 = *(void *)v2;
  uint64_t v35 = *(void *)(v2 + 8);
  uint64_t v34 = *(void **)(v2 + 16);
  uint64_t v33 = *(void **)(v2 + 24);
  outlined init with take of FMFindingState(a1, v2);
  outlined retain of FMFindingState((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
  uint64_t v20 = a1;
  outlined consume of FMFindingState(v37, v35, v34, v33);
  outlined init with take of FMFindingState((long long *)v16, (uint64_t)v44);
  outlined retain of FMFindingState((uint64_t)v44, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
  char v21 = specialized static FMFindingState.== infix(_:_:)(v44, a1);
  outlined retain of FMFindingState((uint64_t)v44, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
  if ((v21 & 1) == 0)
  {
    if (one-time initialization token for findingExperience != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.findingExperience);
    id v23 = v40;
    Swift::String v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(void *)&v41[0] = v38;
      *(_DWORD *)uint64_t v26 = 136315394;
      outlined init with take of FMFindingState((long long *)v16, (uint64_t)v43);
      outlined retain of FMFindingState((uint64_t)v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
      uint64_t v27 = FMFindingState.description.getter();
      unint64_t v29 = v28;
      outlined retain of FMFindingState((uint64_t)v43, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
      v42[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, (uint64_t *)v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2080;
      outlined init with take of FMFindingState((long long *)v2, (uint64_t)v42);
      outlined retain of FMFindingState((uint64_t)v42, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
      uint64_t v30 = FMFindingState.description.getter();
      unint64_t v32 = v31;
      outlined retain of FMFindingState((uint64_t)v42, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, (uint64_t *)v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v20 = a1;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227326000, v24, v25, "Updated state: %s → %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22A6785E0](v38, -1, -1);
      MEMORY[0x22A6785E0](v26, -1, -1);
    }
    else
    {
    }
    FindingViewController.updateInstructionsView()();
  }
  FindingViewController.updateFindingView(sprung:state:)(1, v20);
  outlined init with take of FMFindingState((long long *)v2, (uint64_t)v41);
  outlined retain of FMFindingState((uint64_t)v41, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
  FMBTDistanceView.update(with:nextBeacon:)(v41, 0, 0);
  outlined retain of FMFindingState((uint64_t)v41, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
  FindingViewController.updateHaptics()();
}

void FindingViewController.updateFindingView(sprung:state:)(char a1, long long *a2)
{
  uint64_t v3 = v2;
  id v6 = FindingViewController.findingView.getter();
  uint64_t v7 = *(void **)&v6[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
  if (v7)
  {
    uint64_t v8 = v7;
    specialized FMPFSKScene.setOpacity(_:sprung:swap:)(1, 1.0);

    id v6 = v8;
  }

  uint64_t v9 = FindingViewController.findingView.getter();
  uint64_t v10 = *(void **)&v9[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
  if (v10)
  {
    uint64_t v11 = v10;
    FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(0, 1.0);

    uint64_t v9 = v11;
  }

  uint64_t v12 = FindingViewController.findingView.getter();
  uint64_t v13 = *(void **)&v12[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
  if (v13)
  {
    id v14 = v13;
    FMPFSKScene.setPatternConformationFactor(_:sprung:)(a1 & 1, 1.0);
  }
  v12[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_useGreenBackdropBlurAndOpacity] = 1;
  FMPFView.updateConvergingBackdropColor(sprung:)(1);

  __int16 v15 = FindingViewController.findingView.getter();
  uint64_t v16 = *(void **)&v15[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
  if (v16)
  {
    uint64_t v17 = v16;
    FMPFSKScene.setPatternCenterFactor(_:sprung:)(a1 & 1, 1.0);

    __int16 v15 = v17;
  }

  id v18 = FindingViewController.findingView.getter();
  FMFindingState.defaultConfiguration.getter((uint64_t)v96);
  uint64_t v19 = *(void **)&v18[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
  if (v19)
  {
    double v20 = v97;
    char v21 = v19;
    FMPFSKScene.setBTDiskNodeOpacity(_:sprung:)(a1 & 1, v20);

    id v18 = v21;
  }

  uint64_t v22 = self;
  id v23 = objc_msgSend(v22, sel_mainScreen);
  Swift::String v24 = (void *)MEMORY[0x22A677130](0xD000000000000011, 0x80000002273FB000);
  int v25 = MGGetSInt32Answer();

  id v26 = objc_msgSend(v22, sel_mainScreen);
  objc_msgSend(v26, sel_nativeScale);
  double v28 = v27;

  id v29 = objc_msgSend(v22, sel_mainScreen);
  objc_msgSend(v29, sel_bounds);
  CGFloat v31 = v30;
  CGFloat v33 = v32;
  CGFloat v35 = v34;
  CGFloat v37 = v36;

  v104.origin.CGFloat x = v31;
  v104.origin.CGFloat y = v33;
  v104.size.width = v35;
  v104.size.height = v37;
  double Width = CGRectGetWidth(v104);
  id v39 = objc_msgSend(v22, sel_mainScreen);
  objc_msgSend(v39, sel_bounds);
  CGFloat v41 = v40;
  CGFloat v43 = v42;
  CGFloat v45 = v44;
  CGFloat v47 = v46;

  v105.origin.CGFloat x = v41;
  v105.origin.CGFloat y = v43;
  v105.size.width = v45;
  v105.size.height = v47;
  double v48 = CGRectGetWidth(v105);
  double v49 = *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement);
  uint64_t v50 = FindingViewController.findingView.getter();
  Swift::String v51 = *(void **)&v50[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
  if (v51)
  {
    Swift::String v52 = v51;
    FMPFSKScene.setPatternCenterFactor(_:sprung:)(0, 1.0);

    uint64_t v50 = v52;
  }

  outlined init with take of FMFindingState(a2, (uint64_t)v102);
  double v53 = 32.0 / Width;
  double v54 = (double)v25 * 1.252 / v28 / v48;
  double v55 = (v53 + v54) * 0.5;
  switch(v103)
  {
    case 2:
      Class v72 = FindingViewController.findingView.getter();
      uint64_t v73 = *(void **)&v72[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v73)
      {
        uint64_t v74 = v73;
        FMPFSKScene.setBTRangeNodeSize(_:sprung:)(1, (v49 + v49) * v55 + 0.0);

        Class v72 = v74;
      }

      id v64 = FindingViewController.findingView.getter();
      id v75 = *(void **)&v64[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (!v75) {
        goto LABEL_45;
      }
      id v66 = v75;
      double v76 = 0.0;
      char v77 = 1;
      goto LABEL_43;
    case 3:
      id v78 = FindingViewController.findingView.getter();
      id v79 = *(void **)&v78[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v79)
      {
        id v80 = v79;
        FMPFSKScene.setBTRangeNodeSize(_:sprung:)(1, v55);

        id v78 = v80;
      }

      id v64 = FindingViewController.findingView.getter();
      id v81 = *(void **)&v64[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (!v81) {
        goto LABEL_45;
      }
      id v66 = v81;
      double v76 = (v49 + -0.5 + v49 + -0.5) * 0.98 + 0.13;
      char v77 = 1;
      goto LABEL_43;
    case 4:
    case 5:
      id v67 = FindingViewController.findingView.getter();
      uint64_t v68 = *(void **)&v67[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v68)
      {
        id v69 = v68;
        FMPFSKScene.setBTRangeNodeSize(_:sprung:)(1, v54);

        id v67 = v69;
      }

      id v64 = FindingViewController.findingView.getter();
      id v70 = *(void **)&v64[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v70)
      {
        id v71 = v70;
        FMPFSKScene.setBTDiskNodeSize(_:sprung:)(1, 1.11);
      }
      outlined retain of FMFindingState((uint64_t)a2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
      goto LABEL_45;
    case 6:
    case 8:
    case 9:
      uint64_t v56 = FindingViewController.findingView.getter();
      FMFindingState.defaultConfiguration.getter((uint64_t)v98);
      id v57 = *(void **)&v56[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v57)
      {
        double v58 = v98[0];
        id v59 = v57;
        FMPFSKScene.setBTRangeNodeSize(_:sprung:)(1, v58);

        uint64_t v56 = v59;
      }

      id v60 = FindingViewController.findingView.getter();
      FMFindingState.defaultConfiguration.getter((uint64_t)v99);
      id v61 = *(void **)&v60[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v61)
      {
        double v62 = v100;
        id v63 = v61;
        FMPFSKScene.setBTDiskNodeSize(_:sprung:)(1, v62);

        id v60 = v63;
      }

      id v64 = FindingViewController.findingView.getter();
      id v65 = *(void **)&v64[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (!v65) {
        goto LABEL_45;
      }
      id v66 = v65;
      FMPFSKScene.setPatternCenterFactor(_:sprung:)(0, 0.0);
      goto LABEL_44;
    case 7:
      id v82 = FindingViewController.findingView.getter();
      uint64_t v83 = *(void **)&v82[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v83)
      {
        id v84 = v83;
        FMPFSKScene.setPatternCenterFactor(_:sprung:)(0, 0.0);

        id v82 = v84;
      }

      id v85 = FindingViewController.findingView.getter();
      id v86 = *(void **)&v85[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v86)
      {
        id v87 = v86;
        FMPFSKScene.setPatternConformationFactor(_:sprung:)(1, 0.0);
      }
      v85[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_useGreenBackdropBlurAndOpacity] = 0;
      FMPFView.updateConvergingBackdropColor(sprung:)(1);

      id v88 = FindingViewController.findingView.getter();
      FMFindingState.defaultConfiguration.getter((uint64_t)v99);
      char v89 = *(void **)&v88[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v89)
      {
        double v90 = v101;
        id v91 = v89;
        FMPFSKScene.setBTDiskNodeOpacity(_:sprung:)(0, v90);

        id v88 = v91;
      }

      id v92 = FindingViewController.findingView.getter();
      Class v93 = *(void **)&v92[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v93)
      {
        uint64_t v94 = v93;
        FMPFSKScene.setBTRangeNodeSize(_:sprung:)(0, 0.0);

        id v92 = v94;
      }

      id v64 = FindingViewController.findingView.getter();
      uint64_t v95 = *(void **)&v64[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (!v95) {
        goto LABEL_45;
      }
      id v66 = v95;
      double v76 = 0.0;
      char v77 = 0;
LABEL_43:
      FMPFSKScene.setBTDiskNodeSize(_:sprung:)(v77, v76);
LABEL_44:

      id v64 = v66;
LABEL_45:

      return;
    default:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x2273E4048);
  }
}

uint64_t FMFindingState.defaultConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = self;
  id v4 = objc_msgSend(v3, sel_mainScreen);
  id v5 = (void *)MEMORY[0x22A677130](0xD000000000000011, 0x80000002273FB000);
  int v6 = MGGetSInt32Answer();

  id v7 = objc_msgSend(v3, sel_mainScreen);
  objc_msgSend(v7, sel_nativeScale);
  double v9 = v8;

  id v10 = objc_msgSend(v3, sel_mainScreen);
  objc_msgSend(v10, sel_bounds);
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;

  v41.origin.CGFloat x = v12;
  v41.origin.CGFloat y = v14;
  v41.size.width = v16;
  v41.size.height = v18;
  double Width = CGRectGetWidth(v41);
  id v20 = objc_msgSend(v3, sel_mainScreen);
  objc_msgSend(v20, sel_bounds);
  CGFloat v22 = v21;
  CGFloat v24 = v23;
  CGFloat v26 = v25;
  CGFloat v28 = v27;

  v42.origin.CGFloat x = v22;
  v42.origin.CGFloat y = v24;
  v42.size.width = v26;
  v42.size.height = v28;
  double v29 = CGRectGetWidth(v42);
  uint64_t result = outlined init with take of FMFindingState(v1, (uint64_t)v39);
  float v31 = 0.0;
  double v32 = 0.0;
  switch(v40)
  {
    case 2:
      *((void *)&_Q2 + 1) = 0;
      *(double *)&_Q2 = 32.0 / Width;
      double v34 = 1.0;
      float v31 = 0.2;
      double v32 = 1.0;
      break;
    case 3:
      double v32 = 0.5;
      __asm { FMOV            V2.2D, #0.5 }
      *(double *)&_Q2 = (32.0 / Width + (double)v6 * 1.252 / v9 / v29) * 0.5;
      float v31 = 0.5;
      goto LABEL_7;
    case 4:
      __asm { FMOV            V2.2D, #4.5; jumptable 00000002273E4220 case 4 }
      *(double *)&_Q2 = (double)v6 * 1.252 / v9 / v29;
      double v34 = 1.0;
      double v32 = INFINITY;
      float v31 = 0.8;
      break;
    case 5:
      __asm { FMOV            V2.2D, #4.5; jumptable 00000002273E4220 case 5 }
      *(double *)&_Q2 = (double)v6 * 1.252 / v9 / v29;
LABEL_7:
      double v34 = 1.0;
      break;
    default:
      _Q2 = 0uLL;
      double v34 = 0.0;
      break;
  }
  *(_OWORD *)a1 = _Q2;
  *(double *)(a1 + 16) = v34;
  *(float *)(a1 + 24) = v31;
  *(double *)(a1 + 32) = v32;
  return result;
}

void FindingViewController.showInstructionsLabel(_:animated:completion:)(char a1, char a2, void (*a3)(id), uint64_t a4)
{
  id v9 = objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel], sel_alpha);
  if (a1)
  {
    if (v10 != 1.0) {
      goto LABEL_3;
    }
LABEL_6:
    if (!a3) {
      return;
    }
    goto LABEL_7;
  }
  if (v10 == 0.0) {
    goto LABEL_6;
  }
LABEL_3:
  if (a2)
  {
    double v11 = self;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v4;
    *(unsigned char *)(v12 + 24) = a1 & 1;
    CGFloat v26 = partial apply for closure #1 in FindingViewController.showInstructionsLabel(_:animated:completion:);
    uint64_t v27 = v12;
    uint64_t v22 = MEMORY[0x263EF8330];
    uint64_t v23 = 1107296256;
    CGFloat v24 = thunk for @escaping @callee_guaranteed () -> ();
    double v25 = &block_descriptor_83;
    double v13 = _Block_copy(&v22);
    CGFloat v14 = v4;
    swift_release();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a3;
    *(void *)(v15 + 24) = a4;
    CGFloat v26 = partial apply for closure #2 in FindingViewController.showInstructionsLabel(_:animated:completion:);
    uint64_t v27 = v15;
    uint64_t v22 = MEMORY[0x263EF8330];
    uint64_t v23 = 1107296256;
    CGFloat v24 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    double v25 = &block_descriptor_89;
    CGFloat v16 = _Block_copy(&v22);
    outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)a3);
    swift_release();
    objc_msgSend(v11, sel_animateWithDuration_animations_completion_, v13, v16, 0.5);
    _Block_release(v16);
    _Block_release(v13);
    return;
  }
  uint64_t v17 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel;
  double v18 = 0.0;
  if (a1) {
    double v18 = 1.0;
  }
  objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel], sel_setAlpha_, v18);
  uint64_t v19 = *(void **)&v4[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel];
  id v20 = *(void **)&v4[v17];
  id v21 = v19;
  objc_msgSend(v20, sel_alpha);
  objc_msgSend(v21, sel_setAlpha_);

  if (a3) {
LABEL_7:
  }
    a3(v9);
}

void closure #1 in FindingViewController.showInstructionsLabel(_:animated:completion:)(uint64_t a1, char a2)
{
  uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel;
  id v4 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel);
  double v5 = 0.0;
  if (a2) {
    double v5 = 1.0;
  }
  objc_msgSend(v4, sel_setAlpha_, v5);
  int v6 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel);
  id v7 = *(void **)(a1 + v3);
  id v8 = v6;
  objc_msgSend(v7, sel_alpha);
  objc_msgSend(v8, sel_setAlpha_);
}

void FindingViewController.updateInstructionsView()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWallTime();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v2, v4);
  id v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5, v8);
  double v10 = (char *)v24 - v9;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x270FA5388](v11, v12);
  if ((*(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 16) & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    uint64_t v13 = swift_allocObject();
    v24[0] = v2;
    uint64_t v14 = v13;
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in FindingViewController.updateInstructionsView();
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = &block_descriptor_11;
    _Block_copy(aBlock);
    v24[1] = MEMORY[0x263F8EE78];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    uint64_t v15 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    swift_release();
    *(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_searchingDelayWorkItem) = v15;
    swift_retain();
    swift_release();
    type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    CGFloat v16 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchWallTime.now()();
    MEMORY[0x22A677100](v7, 0.4);
    uint64_t v17 = *(void (**)(char *, uint64_t))(v3 + 8);
    double v18 = v7;
    uint64_t v19 = v24[0];
    v17(v18, v24[0]);
    OS_dispatch_queue.asyncAfter(wallDeadline:execute:)();
    swift_release();

    v17(v10, v19);
  }
  else
  {
    if (*(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_searchingDelayWorkItem))
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    FindingViewController.showInstructionsLabel(_:animated:completion:)(0, 1, 0, 0);
    id v20 = *(id *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel);
    id v21 = (void *)MEMORY[0x22A677130](0, 0xE000000000000000);
    objc_msgSend(v20, sel_setText_, v21);

    id v22 = *(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel);
    v24[0] = MEMORY[0x22A677130](0, 0xE000000000000000);
    objc_msgSend(v22, sel_setText_, v24[0]);

    uint64_t v23 = (void *)v24[0];
  }
}

void closure #1 in FindingViewController.updateInstructionsView()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x22A6786A0](v1);
  if (v2)
  {
    uint64_t v3 = (char *)v2;
    uint64_t v4 = self;
    uint64_t v5 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel];
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v3;
    aBlock[4] = partial apply for closure #1 in closure #1 in FindingViewController.updateInstructionsView();
    aBlock[5] = v6;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    void aBlock[3] = &block_descriptor_77;
    id v7 = _Block_copy(aBlock);
    id v8 = v5;
    uint64_t v9 = v3;
    swift_release();
    objc_msgSend(v4, sel_transitionWithView_duration_options_animations_completion_, v8, 5242880, v7, 0, 1.0);
    _Block_release(v7);

    LODWORD(v7) = v9[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_requiresAdditionalConnectionTime];
    id v10 = *(id *)&v9[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel];
    if (v7 == 1)
    {
      unint64_t v11 = 0x80000002273FDF30;
      unint64_t v12 = 0xD000000000000010;
    }
    else
    {
      unint64_t v12 = 0x43524145535F5442;
      unint64_t v11 = 0xEC000000474E4948;
    }
    uint64_t countAndFlagsBits = FMFindingLocalizedString(_:fallbackKey:tableName:)(*(Swift::String *)&v12, (Swift::String_optional)0, (Swift::String_optional)0)._countAndFlagsBits;
    uint64_t v14 = (void *)MEMORY[0x22A677130](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setText_, v14);

    FindingViewController.showInstructionsLabel(_:animated:completion:)(1, 1, 0, 0);
  }
}

void closure #1 in closure #1 in FindingViewController.updateInstructionsView()(uint64_t a1)
{
  id v1 = *(id *)(a1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel);
  v2._object = (void *)0x80000002273FDF50;
  v2._uint64_t countAndFlagsBits = 0xD000000000000010;
  uint64_t countAndFlagsBits = FMFindingLocalizedString(_:fallbackKey:tableName:)(v2, (Swift::String_optional)0, (Swift::String_optional)0)._countAndFlagsBits;
  id v4 = (id)MEMORY[0x22A677130](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setText_, v4);
}

void FindingViewController.updateHaptics()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state;
  Swift::String v2 = *(char **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 16);
  if ((unint64_t)(v2 - 8) >= 2)
  {
    uint64_t v3 = v0;
    if (v2 == (char *)6)
    {
      if (one-time initialization token for findingExperience != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Logger.findingExperience);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v5, v6))
      {
        id v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v7 = 0;
        _os_log_impl(&dword_227326000, v5, v6, "FMFindingViewCtrl: Requesting scatter haptic.", v7, 2u);
        MEMORY[0x22A6785E0](v7, -1, -1);
      }

      FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()();
    }
    else if (v2 == (char *)7)
    {
      FMR1HapticsController.stopHaptics()();
    }
    else
    {
      uint64_t v8 = *(void *)(v1 + 8);
      id v10 = *(void **)(v1 + 24);
      uint64_t v9 = *(void *)(v1 + 32);
      uint64_t v11 = *(void *)(v1 + 40);
      uint64_t v12 = *(void *)(v1 + 48);
      uint64_t v14 = *(void *)(v1 + 56);
      uint64_t v13 = *(void *)(v1 + 64);
      uint64_t v15 = *(void *)(v1 + 72);
      uint64_t v16 = *(void *)(v1 + 80);
      uint64_t v17 = *(void *)(v1 + 88);
      __int16 v18 = *(_WORD *)(v1 + 96);
      uint64_t v80 = *(void *)v1;
      uint64_t v81 = v8;
      id v82 = v2;
      uint64_t v83 = v10;
      uint64_t v84 = v9;
      uint64_t v85 = v11;
      uint64_t v86 = v12;
      uint64_t v87 = v14;
      uint64_t v88 = v13;
      uint64_t v89 = v15;
      uint64_t v90 = v16;
      uint64_t v91 = v17;
      char v92 = v18;
      uint64_t v64 = v80;
      uint64_t v65 = v8;
      id v63 = v2;
      switch((unint64_t)v2)
      {
        case 2uLL:
          outlined copy of FMFindingMeasurement(v80, v8, (void *)2, v10);
          goto LABEL_15;
        case 3uLL:
          uint64_t v19 = *(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState + 16);
          if ((unint64_t)(v19 - 7) < 3 || v19 == 2)
          {
            outlined copy of FMFindingState(v80, v8, (void *)3, v10);
            if (one-time initialization token for findingExperience != -1) {
              swift_once();
            }
            uint64_t v36 = type metadata accessor for Logger();
            __swift_project_value_buffer(v36, (uint64_t)static Logger.findingExperience);
            CGFloat v37 = Logger.logObject.getter();
            os_log_type_t v38 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v37, v38))
            {
              id v39 = v2;
              uint64_t v40 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v40 = 0;
              _os_log_impl(&dword_227326000, v37, v38, "FMFindingViewCtrl: Playing near haptic", v40, 2u);
              CGRect v41 = v40;
              Swift::String v2 = v39;
              MEMORY[0x22A6785E0](v41, -1, -1);
            }
            CGRect v42 = v10;

            FMR1HapticsController.playFarNearHaptic()();
          }
          else
          {
            outlined copy of FMFindingState(v80, v8, (void *)3, v10);
LABEL_15:
            double v62 = v10;
            uint64_t v20 = v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState;
            uint64_t v21 = *(void *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState + 16);
            uint64_t v57 = v3;
            if ((unint64_t)(v21 - 6) >= 4)
            {
              uint64_t v29 = *(void *)(v20 + 88);
              uint64_t v27 = *(void *)(v20 + 48);
              uint64_t v28 = *(void *)(v20 + 56);
              char v58 = *(unsigned char *)(v20 + 96);
              uint64_t v60 = *(void *)(v20 + 72);
              uint64_t v61 = *(void *)(v20 + 80);
              uint64_t v59 = *(void *)(v20 + 64);
              uint64_t v22 = *(void *)v20;
              uint64_t v23 = *(void *)(v20 + 8);
              CGFloat v24 = *(void **)(v20 + 24);
              uint64_t v25 = *(void *)(v20 + 32);
              uint64_t v26 = *(void *)(v20 + 40);
              outlined copy of FMFindingMeasurement(*(void *)v20, v23, (void *)v21, v24);
            }
            else
            {
              uint64_t v22 = 0;
              uint64_t v23 = 0;
              CGFloat v24 = 0;
              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v27 = 0;
              uint64_t v28 = 0;
              uint64_t v59 = 0;
              uint64_t v60 = 0;
              uint64_t v61 = 0;
              uint64_t v29 = 0;
              char v58 = 0;
              uint64_t v21 = 6;
            }
            *(void *)&long long v68 = v22;
            *((void *)&v68 + 1) = v23;
            uint64_t v69 = v21;
            id v70 = v24;
            uint64_t v71 = v25;
            uint64_t v72 = v26;
            uint64_t v73 = v27;
            uint64_t v74 = v28;
            uint64_t v75 = v59;
            uint64_t v76 = v60;
            uint64_t v77 = v61;
            uint64_t v78 = v29;
            char v79 = v58;
            char v56 = FMFindingMeasurement.calculateTrend(from:)((uint64_t)&v68);
            outlined copy of FMFindingMeasurement(v64, v65, v2, v62);
            outlined copy of FMFindingMeasurement(v64, v65, v2, v62);
            outlined consume of FMFindingMeasurement?(v22, v23, (void *)v21, v24);
            uint64_t v3 = v57;
            switch(v56)
            {
              case 2:
                swift_bridgeObjectRelease();
                CGRect v42 = v62;
                uint64_t v8 = v65;
                goto LABEL_29;
              default:
                char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                CGRect v42 = v62;
                uint64_t v8 = v65;
                if (v43)
                {
LABEL_29:
                  if (one-time initialization token for findingExperience != -1) {
                    swift_once();
                  }
                  uint64_t v44 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v44, (uint64_t)static Logger.findingExperience);
                  CGFloat v45 = Logger.logObject.getter();
                  os_log_type_t v46 = static os_log_type_t.info.getter();
                  if (os_log_type_enabled(v45, v46))
                  {
                    CGFloat v47 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)CGFloat v47 = 0;
                    _os_log_impl(&dword_227326000, v45, v46, "FMFindingViewCtrl: Playing level decreased haptic", v47, 2u);
                    double v48 = v47;
                    Swift::String v2 = v63;
                    uint64_t v8 = v65;
                    MEMORY[0x22A6785E0](v48, -1, -1);
                  }

                  FMR1HapticsController.playLevelDecreasedHaptic()();
                }
                break;
            }
          }
          double v49 = fmin(*(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement)* *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement)* 1.8, 0.7);
          uint64_t v67 = MEMORY[0x263F8EF38];
          *(double *)&long long v66 = (v49 + -0.3) / -0.4 * 0.75 + 1.0;
          FMR1HapticsController.playInFOVModeTapHapticAt(hapticFactor:period:context:)((uint64_t)&v66, v49, *(double *)&v66);
          outlined consume of FMFindingState(v64, v8, v2, v42);
          outlined consume of FMFindingState(v64, v65, v63, v42);
          outlined destroy of Any?((uint64_t)&v66);
          break;
        case 4uLL:
          outlined copy of FMFindingMeasurement(v80, v8, (void *)4, v10);
          FMR1HapticsController.stopHaptics()();
          outlined init with take of FMFindingState((long long *)v1, (uint64_t)&v66);
          uint64_t v30 = v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState;
          outlined init with take of FMFindingState((long long *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState), (uint64_t)&v68);
          outlined retain of FMFindingState((uint64_t)&v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
          outlined retain of FMFindingState((uint64_t)&v68, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
          char v31 = specialized static FMFindingState.== infix(_:_:)(&v66, &v68);
          outlined retain of FMFindingState((uint64_t)&v68, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
          outlined retain of FMFindingState((uint64_t)&v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
          if (v31)
          {
            uint64_t v32 = v64;
            uint64_t v33 = v8;
            uint64_t v34 = 4;
            CGFloat v35 = v10;
          }
          else
          {
            if (*(void *)(v30 + 16) == 6)
            {
              uint64_t v32 = v64;
              uint64_t v33 = v8;
            }
            else
            {
              uint64_t v50 = v8;
              if (one-time initialization token for findingExperience != -1) {
                swift_once();
              }
              uint64_t v51 = type metadata accessor for Logger();
              __swift_project_value_buffer(v51, (uint64_t)static Logger.findingExperience);
              Swift::String v52 = Logger.logObject.getter();
              os_log_type_t v53 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v52, v53))
              {
                double v54 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)double v54 = 0;
                _os_log_impl(&dword_227326000, v52, v53, "FMFindingViewCtrl: Playing here haptic", v54, 2u);
                double v55 = v54;
                uint64_t v50 = v8;
                MEMORY[0x22A6785E0](v55, -1, -1);
              }

              FMR1HapticsController.playLevelIncreasedHaptic()();
              uint64_t v32 = v64;
              uint64_t v33 = v50;
            }
            uint64_t v34 = 4;
            CGFloat v35 = v10;
          }
          goto LABEL_43;
        case 5uLL:
          outlined copy of FMFindingMeasurement(v80, v8, (void *)5, v10);
          FMR1HapticsController.startDelayedNearbyHapticPlayerIfNecessary()();
          uint64_t v32 = v80;
          uint64_t v33 = v8;
          uint64_t v34 = 5;
          CGFloat v35 = v10;
LABEL_43:
          outlined consume of FMFindingState(v32, v33, (void *)v34, v35);
          return;
        default:
          goto LABEL_15;
      }
    }
  }
}

void outlined consume of FMFindingMeasurement?(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a3 != (void *)6) {
    outlined consume of FMFindingMeasurement(a1, a2, a3, a4);
  }
}

uint64_t sub_2273E5740()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in FindingViewController.updateInstructionsView()()
{
  closure #1 in FindingViewController.updateInstructionsView()(v0);
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

void partial apply for closure #1 in closure #1 in FindingViewController.updateInstructionsView()()
{
  closure #1 in closure #1 in FindingViewController.updateInstructionsView()(*(void *)(v0 + 16));
}

uint64_t sub_2273E57A0()
{
  return MEMORY[0x270FA0238](v0, 25, 7);
}

void partial apply for closure #1 in FindingViewController.showInstructionsLabel(_:animated:completion:)()
{
  closure #1 in FindingViewController.showInstructionsLabel(_:animated:completion:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_2273E57E4()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in FindingViewController.showInstructionsLabel(_:animated:completion:)()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

id specialized FindingViewController.init(discoveryToken:remoteInfo:)(void *a1, void *a2)
{
  uint64_t v5 = &v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_dismissedHandler];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController____lazy_storage___findingView] = 0;
  uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style;
  uint64_t v7 = one-time initialization token for default;
  uint64_t v8 = v2;
  if (v7 != -1) {
    swift_once();
  }
  void v26[6] = xmmword_26817C5E0;
  v26[7] = unk_26817C5F0;
  v26[8] = xmmword_26817C600;
  uint64_t v27 = qword_26817C610;
  v26[2] = xmmword_26817C5A0;
  v26[3] = unk_26817C5B0;
  v26[4] = xmmword_26817C5C0;
  v26[5] = unk_26817C5D0;
  v26[0] = static FMFindingViewStyle.default;
  v26[1] = *(_OWORD *)&qword_26817C590;
  memmove(&v8[v6], &static FMFindingViewStyle.default, 0x98uLL);
  uint64_t v9 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sleepPreventer;
  outlined retain of FMFindingViewStyle((uint64_t)v26);
  type metadata accessor for FMFindingSleepPreventer();
  *(void *)&v8[v9] = swift_initStaticObject();
  uint64_t v10 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_closeButton;
  id v11 = objc_allocWithZone((Class)type metadata accessor for FMR1GlyphButton());
  *(void *)&v8[v10] = FMR1GlyphButton.init(named:tintColor:backgroundColor:)(0, 0, 0, 0);
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_pulseTimer] = 0;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_niSession] = 0;
  uint64_t v12 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_hapticsController;
  *(void *)&v8[v12] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMR1HapticsController()), sel_init);
  uint64_t v13 = &v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 6;
  *(_OWORD *)(v13 + 82) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  uint64_t v14 = &v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 6;
  *(_OWORD *)(v14 + 82) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  uint64_t v15 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_distanceLabel;
  *(void *)&v8[v15] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMBTDistanceView()), sel_init);
  uint64_t v16 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_titleLabel;
  *(void *)&v8[v16] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v17 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_nameLabel;
  *(void *)&v8[v17] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v18 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel;
  *(void *)&v8[v18] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v19 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel;
  *(void *)&v8[v19] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v20 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabelsStackView;
  *(void *)&v8[v20] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement] = 0;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimer] = 0;
  v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_isFirstAppear] = 1;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_minRestartDelayMilliseconds] = 0;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_maxRestartDelayMilliseconds] = 10000;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_restartBackOffIncrementMilliseconds] = 10;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds] = 0;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimerDuration] = 0x4023000000000000;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimerDurationSeconds] = 0x4034000000000000;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer] = 0;
  uint64_t v21 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData;
  *(void *)&v8[v21] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F7C9B0]), sel_init);
  v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_firstMeasurement] = 1;
  uint64_t v22 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_requiresAdditionalConnectionTime;
  v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_requiresAdditionalConnectionTime] = 0;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_searchingDelayWorkItem] = 0;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_discoveryToken] = a1;
  *(void *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_remoteInfo] = a2;
  id v23 = a1;
  v8[v22] = objc_msgSend(a2, sel_connected) ^ 1;

  v25.receiver = v8;
  v25.super_class = (Class)type metadata accessor for FindingViewController();
  return objc_msgSendSuper2(&v25, sel_initWithNibName_bundle_, 0, 0);
}

void partial apply for closure #1 in FindingViewController.restartSessionOnError()()
{
}

void specialized FindingViewController.init(nibName:bundle:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_dismissedHandler];
  *uint64_t v2 = 0;
  v2[1] = 0;
  *(void *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController____lazy_storage___findingView] = 0;
  uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style;
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  v17[6] = xmmword_26817C5E0;
  v17[7] = unk_26817C5F0;
  v17[8] = xmmword_26817C600;
  uint64_t v18 = qword_26817C610;
  id v17[2] = xmmword_26817C5A0;
  v17[3] = unk_26817C5B0;
  v17[4] = xmmword_26817C5C0;
  v17[5] = unk_26817C5D0;
  v17[0] = static FMFindingViewStyle.default;
  v17[1] = *(_OWORD *)&qword_26817C590;
  memmove(&v1[v3], &static FMFindingViewStyle.default, 0x98uLL);
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sleepPreventer;
  outlined retain of FMFindingViewStyle((uint64_t)v17);
  type metadata accessor for FMFindingSleepPreventer();
  *(void *)&v1[v4] = swift_initStaticObject();
  uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_closeButton;
  id v6 = objc_allocWithZone((Class)type metadata accessor for FMR1GlyphButton());
  *(void *)&v1[v5] = FMR1GlyphButton.init(named:tintColor:backgroundColor:)(0, 0, 0, 0);
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_pulseTimer] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_niSession] = 0;
  uint64_t v7 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_hapticsController;
  *(void *)&v1[v7] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMR1HapticsController()), sel_init);
  uint64_t v8 = &v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 6;
  *(_OWORD *)(v8 + 82) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  uint64_t v9 = &v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 6;
  *(_OWORD *)(v9 + 82) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  uint64_t v10 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_distanceLabel;
  *(void *)&v1[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMBTDistanceView()), sel_init);
  uint64_t v11 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_titleLabel;
  *(void *)&v1[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v12 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_nameLabel;
  *(void *)&v1[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v13 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel;
  *(void *)&v1[v13] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v14 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel;
  *(void *)&v1[v14] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F828E0]), sel_init);
  uint64_t v15 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabelsStackView;
  *(void *)&v1[v15] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F82BF8]), sel_init);
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimer] = 0;
  v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_isFirstAppear] = 1;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_minRestartDelayMilliseconds] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_maxRestartDelayMilliseconds] = 10000;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_restartBackOffIncrementMilliseconds] = 10;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimerDuration] = 0x4023000000000000;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimerDurationSeconds] = 0x4034000000000000;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer] = 0;
  uint64_t v16 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData;
  *(void *)&v1[v16] = objc_msgSend(objc_allocWithZone(MEMORY[0x263F7C9B0]), sel_init);
  v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_firstMeasurement] = 1;
  v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_requiresAdditionalConnectionTime] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_searchingDelayWorkItem] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id specialized @nonobjc NIDevicePresenceConfiguration.init(discoveryToken:regions:preferredUpdateRate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[1] = *(id *)MEMORY[0x263EF8340];
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for NIRegionPredicate);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11[0] = 0;
  id v7 = objc_msgSend(v3, sel_initWithDiscoveryToken_regions_preferredUpdateRate_error_, a1, isa, a3, v11);

  if (v7)
  {
    id v8 = v11[0];
  }
  else
  {
    id v9 = v11[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v7;
}

double _s10TVRemoteUI23FMPFSKPatternNodeConfigVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 128) = 1;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 161) = 0u;
  return result;
}

uint64_t outlined init with take of FMPFSKPatternNodeConfig?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized FindingViewController.sessionDidStartRunning(_:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for findingExperience != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.findingExperience);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_227326000, v3, v4, "NISession started", v5, 2u);
    MEMORY[0x22A6785E0](v5, -1, -1);
  }

  uint64_t v6 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer], sel_invalidate);
  id v7 = *(void **)&v1[v6];
  *(void *)&v1[v6] = 0;

  if (*(void *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds])
  {
    id v8 = self;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v1;
    *((void *)&v16 + 1) = partial apply for closure #1 in FindingViewController.sessionDidStartRunning(_:);
    *(void *)&long long v17 = v9;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v15 = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    *(void *)&long long v16 = &block_descriptor_107;
    uint64_t v10 = _Block_copy(&aBlock);
    uint64_t v11 = v1;
    swift_release();
    id v12 = objc_msgSend(v8, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v10, 20.0);
    _Block_release(v10);
    uint64_t v13 = *(void **)&v1[v6];
    *(void *)&v1[v6] = v12;
  }
  long long aBlock = 0uLL;
  uint64_t v15 = 7;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  memset(v19, 0, sizeof(v19));
  FindingViewController.updateState(to:)(&aBlock);
}

uint64_t specialized FindingViewController.session(_:didUpdate:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x270FA5388](v4, v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v10 = (id)MEMORY[0x22A677580](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v10 = *(id *)(a1 + 32);
  }
  uint64_t v11 = v10;
  objc_msgSend(v10, sel_boundedRegionRange);
  float v13 = v12;

  uint64_t v14 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement;
  *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement) = v13;
  uint64_t v15 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_firstMeasurement;
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_firstMeasurement) == 1)
  {
    uint64_t v16 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData;
    id v17 = *(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData);
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    objc_msgSend(v17, sel_setFirstMeasurementTime_, isa);

    objc_msgSend(*(id *)(v2 + v16), sel_setStartingProximityMeasurement_, *(double *)(v2 + v14));
    *(unsigned char *)(v2 + v15) = 0;
  }
  outlined init with take of FMFindingState((long long *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state), (uint64_t)v20);
  outlined retain of FMFindingState((uint64_t)v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of FMFindingState);
  FindingViewController.updateState(to:)(v20);
  return outlined retain of FMFindingState((uint64_t)v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of FMFindingState);
}

void specialized FindingViewController.session(_:object:didUpdateRegion:previousRegion:)(uint64_t a1, objc_class *a2)
{
  Class v196 = a2;
  v190 = (void *)a1;
  uint64_t v237 = *MEMORY[0x263EF8340];
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v161 = *(void *)(v3 - 8);
  unint64_t v162 = v3;
  uint64_t v5 = MEMORY[0x270FA5388](v3, v4);
  unint64_t v160 = (char *)&v159 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5, v7);
  uint64_t v9 = (char *)&v159 - v8;
  v195 = v2;
  id v10 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state];
  uint64_t v11 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 8];
  float v12 = *(char **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 16];
  float v13 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 24];
  uint64_t v14 = *(objc_class **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 32];
  uint64_t v15 = *(objc_class **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 40];
  uint64_t v16 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 48];
  id v17 = *(objc_class **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 56];
  uint64_t v18 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 64];
  uint64_t v19 = *(void *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 72];
  uint64_t v20 = *(objc_class **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 80];
  uint64_t v21 = *(uint8_t **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 88];
  int v22 = *(unsigned __int16 *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 96];
  unsigned __int8 v203 = 3;
  double v174 = &v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state];
  Class v188 = v20;
  uint64_t v189 = v18;
  v187 = v21;
  LODWORD(v186) = v22;
  id v159 = v9;
  if ((unint64_t)(v12 - 6) >= 4)
  {
    uint64_t v36 = v10;
    CGFloat v37 = v11;
    os_log_type_t v38 = v12;
    id v39 = v13;
    uint64_t v40 = (uint64_t)v14;
    CGRect v41 = v15;
    uint64_t v28 = v16;
    CGRect v42 = v17;
    uint64_t v43 = v19;
    outlined copy of FMFindingMeasurement((uint64_t)v10, (uint64_t)v11, v12, v13);
    uint64_t v19 = v43;
    id v10 = v36;
    uint64_t v11 = v37;
    float v12 = v38;
    float v13 = v39;
    uint64_t v14 = (objc_class *)v40;
    uint64_t v15 = v41;
    uint64_t v16 = v28;
    id v17 = v42;
    uint64_t v23 = (uint64_t)v36;
    uint64_t v24 = (uint64_t)v37;
    uint64_t v35 = (uint64_t)v38;
    objc_super v25 = v13;
    uint64_t v26 = v40;
    uint64_t v27 = (uint64_t)v41;
    uint64_t v29 = v42;
    uint64_t v30 = v189;
    uint64_t v31 = v43;
    Class v32 = v188;
    uint64_t v33 = v187;
    int v34 = (int)v186;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    objc_super v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    Class v32 = 0;
    uint64_t v33 = 0;
    int v34 = 0;
    uint64_t v35 = 6;
  }
  v193 = v25;
  uint64_t v194 = v24;
  uint64_t v191 = (uint64_t)v28;
  v192 = v29;
  objc_super v182 = v16;
  Class v183 = v17;
  Class v180 = v14;
  Class v181 = v15;
  Class v178 = (Class)v12;
  Class v179 = (Class)v13;
  double v176 = v10;
  Class v177 = (Class)v11;
  uint64_t v175 = v19;
  if (v196)
  {
    v184 = (uint8_t *)v24;
    uint64_t v185 = v23;
    uint64_t v172 = v26;
    double v173 = v25;
    uint64_t v170 = (uint64_t)v28;
    uint64_t v171 = v27;
    float64x2_t v169 = v29;
    uint64_t v166 = v31;
    uint64_t v167 = v30;
    uint64_t v164 = v33;
    uint64_t v165 = (uint64_t)v32;
    LODWORD(v163) = v34;
    uint64_t v44 = (void *)v26;
    uint64_t v45 = v27;
    os_log_type_t v46 = v28;
    uint64_t v47 = v31;
    int v48 = v34;
    uint64_t v49 = v23;
    switch(v35)
    {
      case 2:
        goto LABEL_9;
      case 3:
        v184 = v33;
        outlined copy of FMFindingState((uint64_t)v10, (uint64_t)v11, v12, v13);
        LODWORD(v169) = v48;
        uint64_t v170 = (uint64_t)v32;
        uint64_t v171 = v47;
        uint64_t v172 = v30;
        double v173 = v44;
        uint64_t v185 = v45;
        outlined consume of FMFindingMeasurement?(v49, v194, (void *)3, v193);
        uint64_t v168 = 3;
        unsigned __int8 v203 = 3;
        break;
      case 4:
      case 5:
        uint64_t v185 = v45;
        uint64_t v50 = v23;
        uint64_t v51 = (void *)v35;
        Swift::String v52 = v33;
        outlined copy of FMFindingState((uint64_t)v10, (uint64_t)v11, v12, v13);
        LODWORD(v169) = v48;
        v184 = v52;
        uint64_t v170 = (uint64_t)v32;
        uint64_t v171 = v47;
        uint64_t v172 = v30;
        uint64_t v168 = (uint64_t)v51;
        double v173 = v44;
        outlined consume of FMFindingMeasurement?(v50, v194, v51, v193);
        unsigned __int8 v203 = 2;
        id v53 = *(id *)&v195[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData];
        double v54 = (char *)objc_msgSend(v53, sel_numberOfGotFartherRegionTransitions);
        if (__OFADD__(v54, 1)) {
          goto LABEL_81;
        }
        objc_msgSend(v53, sel_setNumberOfGotFartherRegionTransitions_, v54 + 1);

        uint64_t v49 = v50;
        break;
      case 6:
        LODWORD(v169) = v34;
        v184 = v33;
        uint64_t v185 = v45;
        uint64_t v170 = (uint64_t)v32;
        uint64_t v171 = v31;
        uint64_t v172 = v30;
        double v173 = v44;
        outlined copy of FMFindingState((uint64_t)v10, (uint64_t)v11, v12, v13);
        uint64_t v168 = 6;
        break;
      default:
        uint64_t v168 = v35;
        LODWORD(v169) = v34;
        v184 = v33;
        uint64_t v185 = v23;
        uint64_t v170 = (uint64_t)v32;
        uint64_t v171 = v31;
        uint64_t v172 = v30;
        double v173 = v46;
        unsigned __int8 v203 = 0;
        uint64_t v49 = v23;
        outlined copy of FMFindingState((uint64_t)v10, (uint64_t)v11, v12, v13);
        break;
    }
  }
  else
  {
    v184 = 0;
    uint64_t v185 = 0;
    uint64_t v172 = 0;
    double v173 = 0;
    uint64_t v170 = 0;
    uint64_t v171 = 0;
    float64x2_t v169 = 0;
    uint64_t v166 = 0;
    uint64_t v167 = 0;
    uint64_t v164 = 0;
    uint64_t v165 = 0;
    LODWORD(v163) = 0;
    uint64_t v49 = v23;
LABEL_9:
    double v55 = (void *)v35;
    outlined copy of FMFindingState((uint64_t)v10, (uint64_t)v11, v12, v13);
    outlined consume of FMFindingMeasurement?(v49, v194, v55, v193);
    unsigned __int8 v203 = 1;
    id v56 = *(id *)&v195[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData];
    uint64_t v57 = (char *)objc_msgSend(v56, sel_numberOfGotCloserRegionTransitions);
    if (__OFADD__(v57, 1))
    {
      __break(1u);
LABEL_81:
      __break(1u);
    }
    objc_msgSend(v56, sel_setNumberOfGotCloserRegionTransitions_, v57 + 1);

    uint64_t v168 = 2;
    uint64_t v49 = v185;
    v193 = v173;
    uint64_t v194 = (uint64_t)v184;
    char v58 = (void *)v172;
    uint64_t v59 = v171;
    uint64_t v191 = v170;
    v192 = v169;
    uint64_t v172 = v167;
    double v173 = v58;
    uint64_t v170 = v165;
    uint64_t v171 = v166;
    v184 = v164;
    uint64_t v185 = v59;
    LODWORD(v169) = v163;
  }
  uint64_t v60 = v190;
  uint64_t v167 = v49;
  if (one-time initialization token for findingExperience != -1) {
    swift_once();
  }
  uint64_t v61 = type metadata accessor for Logger();
  uint64_t v62 = __swift_project_value_buffer(v61, (uint64_t)static Logger.findingExperience);
  id v63 = v196;
  id v64 = v60;
  uint64_t v65 = v63;
  id v66 = v64;
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v67, v68))
  {
    uint64_t v166 = v62;
    uint64_t v69 = swift_slowAlloc();
    id v70 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v69 = 138412546;
    if (v60)
    {
      *(void *)&long long v205 = v66;
      id v71 = v66;
      uint64_t v60 = v190;
    }
    else
    {
      *(void *)&long long v205 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v70 = v60;

    *(_WORD *)(v69 + 12) = 2112;
    if (v196)
    {
      *(void *)&long long v205 = v65;
      uint64_t v72 = v65;
      uint64_t v60 = v190;
    }
    else
    {
      *(void *)&long long v205 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v70[1] = v196;

    _os_log_impl(&dword_227326000, v67, v68, "#nibtfinding didUpdateRegion region:%@ previousRegion:%@", (uint8_t *)v69, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v70, -1, -1);
    MEMORY[0x22A6785E0](v69, -1, -1);

    uint64_t v62 = v166;
  }
  else
  {
  }
  FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding()();
  if (v60)
  {
    id v73 = objc_msgSend(v66, sel_name);
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v76 = v75;

    if (v74 == 7496038 && v76 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      outlined consume of FMFindingState((uint64_t)v176, (uint64_t)v177, v178, v179);
      swift_bridgeObjectRelease();
      char v77 = 0;
      char v78 = 0;
      int v79 = 0;
      char v80 = 1;
      uint64_t v81 = 2;
      goto LABEL_52;
    }
    if (v74 == 1918985582 && v76 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v82 = v203;
      uint64_t v166 = v62;
      uint64_t v83 = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = (uint8_t *)swift_slowAlloc();
        uint64_t v86 = swift_slowAlloc();
        *(void *)&long long v205 = v86;
        *(_DWORD *)uint64_t v85 = 136315138;
        unint64_t v87 = 0xE700000000000000;
        uint64_t v88 = 0x6E776F6E6B6E75;
        switch(v82)
        {
          case 1:
            uint64_t v88 = 0x6973616572636E69;
            goto LABEL_43;
          case 2:
            uint64_t v88 = 0x6973616572636564;
LABEL_43:
            unint64_t v87 = 0xEA0000000000676ELL;
            break;
          case 3:
            unint64_t v87 = 0xE600000000000000;
            uint64_t v88 = 0x656C62617473;
            break;
          default:
            break;
        }
        uint64_t v227 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v87, (uint64_t *)&v205);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_227326000, v83, v84, "new trend: %s", v85, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22A6785E0](v86, -1, -1);
        MEMORY[0x22A6785E0](v85, -1, -1);
      }
      outlined consume of FMFindingState((uint64_t)v176, (uint64_t)v177, v178, v179);
      swift_bridgeObjectRelease();

      swift_beginAccess();
      char v77 = 0;
      char v80 = 0;
      int v79 = v203 << 8;
      char v78 = 1;
      uint64_t v81 = 3;
      uint64_t v62 = v166;
      goto LABEL_52;
    }
    if (v74 == 1701995880 && v76 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      outlined consume of FMFindingState((uint64_t)v176, (uint64_t)v177, v178, v179);
      uint64_t v89 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData;
      if (objc_msgSend(*(id *)&v195[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData], sel_gotToHere))
      {
        swift_bridgeObjectRelease();
        char v78 = 0;
        char v80 = 0;
        int v79 = 0;
        char v77 = 1;
      }
      else
      {
        uint64_t v90 = v195;
        char v77 = 1;
        objc_msgSend(*(id *)&v195[v89], sel_setGotToHere_, 1);
        Class v196 = (Class)*(id *)&v90[v89];
        uint64_t v91 = v159;
        Date.init()();
        id v92 = objc_msgSend(*(id *)&v90[v89], sel_sessionStartTime);
        Class v93 = v160;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        Date.timeIntervalSince(_:)();
        double v95 = v94;
        double v96 = *(void (**)(char *, unint64_t))(v161 + 8);
        double v97 = v93;
        unint64_t v98 = v162;
        v96(v97, v162);
        v96(v91, v98);
        Class v99 = v196;
        [(objc_class *)v196 setTimeToHere:v95];

        swift_bridgeObjectRelease();
        char v78 = 0;
        char v80 = 0;
        int v79 = 0;
      }
      uint64_t v81 = 4;
      goto LABEL_52;
    }
    swift_bridgeObjectRelease();
  }
  double v100 = Logger.logObject.getter();
  os_log_type_t v101 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v100, v101))
  {
    long long v102 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v102 = 0;
    _os_log_impl(&dword_227326000, v100, v101, "received nil region", v102, 2u);
    MEMORY[0x22A6785E0](v102, -1, -1);
  }
  outlined consume of FMFindingState((uint64_t)v176, (uint64_t)v177, v178, v179);

  char v77 = 0;
  char v78 = 0;
  char v80 = 0;
  int v79 = 0;
  uint64_t v81 = 7;
LABEL_52:
  long long v205 = 0uLL;
  uint64_t v206 = v81;
  long long v207 = 0u;
  long long v208 = 0u;
  long long v209 = 0u;
  long long v210 = 0u;
  uint64_t v211 = 0;
  __int16 v212 = v79;
  Class isa = v174[2].isa;
  if ((unint64_t)isa - 6 >= 4 && (~(_BYTE)v81 & 6) != 0)
  {
    uint64_t v166 = v62;
    uint64_t v104 = (uint64_t)v174[1].isa;
    v190 = v174->isa;
    Class v105 = v174[3].isa;
    Class v106 = v174[4].isa;
    Class v107 = v174[6].isa;
    Class v108 = v174[7].isa;
    Class v109 = v174[8].isa;
    Class v110 = v174[9].isa;
    Class v111 = v174[10].isa;
    Class v112 = v174[11].isa;
    int isa_low = LOWORD(v174[12].isa);
    Class v188 = v174[5].isa;
    uint64_t v189 = v104;
    Class v196 = v105;
    Class v178 = v108;
    Class v179 = v110;
    Class v180 = v107;
    Class v181 = v109;
    Class v186 = v111;
    Class v183 = v112;
    LODWORD(v182) = isa_low;
    switch((unint64_t)isa)
    {
      case 2uLL:
        if ((v80 & 1) == 0) {
          goto LABEL_62;
        }
        uint64_t v114 = 2;
        uint64_t v115 = (uint64_t)v190;
        break;
      case 3uLL:
        if ((v78 & 1) == 0) {
          goto LABEL_62;
        }
        uint64_t v114 = 3;
        uint64_t v115 = (uint64_t)v190;
        break;
      case 4uLL:
        if ((v77 & 1) == 0) {
          goto LABEL_62;
        }
        uint64_t v114 = 4;
        uint64_t v115 = (uint64_t)v190;
        break;
      case 5uLL:
LABEL_62:
        v187 = (uint8_t *)v106;
        outlined copy of FMFindingMeasurement(0, 0, (void *)v81, 0);
        goto LABEL_63;
      default:
        uint64_t v116 = v104;
        outlined copy of FMFindingState(0, 0, (void *)v81, 0);
        v187 = (uint8_t *)v106;
        outlined copy of FMFindingState((uint64_t)v190, v116, isa, v196);
LABEL_63:
        outlined copy of FMFindingState(0, 0, (void *)v81, 0);
        Class v177 = isa;
        outlined copy of FMFindingState((uint64_t)v190, v189, isa, v196);
        LODWORD(v175) = v79;
        double v176 = (void *)v81;
        outlined copy of FMFindingState(0, 0, (void *)v81, 0);
        uint64_t v117 = v189;
        outlined copy of FMFindingState((uint64_t)v190, v189, v177, v196);
        id v118 = Logger.logObject.getter();
        int v119 = static os_log_type_t.default.getter();
        BOOL v120 = os_log_type_enabled(v118, (os_log_type_t)v119);
        double v174 = v118;
        if (v120)
        {
          LODWORD(v166) = v119;
          uint64_t v121 = swift_slowAlloc();
          uint64_t v122 = swift_slowAlloc();
          uint64_t v204 = v122;
          *(_DWORD *)uint64_t v121 = 136315394;
          id v123 = v176;
          unint64_t v124 = 0xE300000000000000;
          uint64_t v125 = 7496038;
          switch((unint64_t)v176)
          {
            case 2uLL:
              break;
            case 3uLL:
              unint64_t v124 = 0xE400000000000000;
              uint64_t v125 = 1918985582;
              break;
            case 4uLL:
              unint64_t v124 = 0xE400000000000000;
              uint64_t v125 = 1701995880;
              break;
            case 5uLL:
              unint64_t v124 = 0xE500000000000000;
              uint64_t v125 = 0x646E756F66;
              break;
            default:
              uint64_t v227 = 0;
              char v228 = 0;
              v229 = v176;
              uint64_t v232 = 0;
              __int16 v233 = 0;
              long long v230 = 0u;
              char v231 = 0;
              v234[0] = 0;
              *(_DWORD *)((char *)v234 + 7) = 0;
              long long v235 = 0u;
              char v236 = 0;
              outlined copy of FMFindingDistance?(0, 0, v176, 0);
              v129._uint64_t countAndFlagsBits = FMFindingDistance.description.getter();
              uint64_t v213 = 0x3A65736963657270;
              unint64_t v214 = 0xE900000000000020;
              String.append(_:)(v129);
              outlined consume of FMFindingState(0, 0, v123, 0);
              swift_bridgeObjectRelease();
              uint64_t v125 = v213;
              unint64_t v124 = v214;
              break;
          }
          uint64_t v164 = (uint8_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          uint64_t v130 = swift_allocObject();
          long long v163 = xmmword_2273F4A20;
          *(_OWORD *)(v130 + 16) = xmmword_2273F4A20;
          *(void *)(v130 + 56) = MEMORY[0x263F8D310];
          unint64_t v162 = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v130 + 64) = v162;
          *(void *)(v130 + 32) = v125;
          *(void *)(v130 + 40) = v124;
          uint64_t v131 = String.init(format:_:)();
          uint64_t v213 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v132, &v204);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined consume of FMFindingState(0, 0, v123, 0);
          outlined consume of FMFindingState(0, 0, v123, 0);
          *(_WORD *)(v121 + 12) = 2080;
          uint64_t v165 = v122;
          Class v133 = v177;
          unint64_t v134 = 0xE300000000000000;
          uint64_t v135 = 7104878;
          uint64_t v136 = 7496038;
          Class v137 = v196;
          switch((unint64_t)v177)
          {
            case 1uLL:
              goto LABEL_73;
            case 2uLL:
              break;
            case 3uLL:
              unint64_t v134 = 0xE400000000000000;
              uint64_t v136 = 1918985582;
              break;
            case 4uLL:
              unint64_t v134 = 0xE400000000000000;
              uint64_t v136 = 1701995880;
              break;
            case 5uLL:
              unint64_t v134 = 0xE500000000000000;
              uint64_t v136 = 0x646E756F66;
              break;
            default:
              uint64_t v213 = (uint64_t)v190;
              LOBYTE(v214) = v189 & 1;
              Class v215 = v177;
              Class v137 = v196;
              Class v216 = v196;
              v217 = v187;
              char v218 = v188 & 1;
              Class v219 = v180;
              __int16 v220 = (unsigned __int16)v178 & 0x101;
              Class v221 = v181;
              __int16 v222 = (unsigned __int16)v179 & 0x101;
              char v223 = BYTE2(v179) & 1;
              Class v224 = v186;
              Class v225 = v183;
              char v226 = v182 & 1;
              Class v133 = v177;
              outlined copy of FMFindingDistance?((uint64_t)v190, v189, v177, v196);
              uint64_t v135 = FMFindingDistance.description.getter();
              unint64_t v134 = v138;
LABEL_73:
              uint64_t v197 = 0x3A65736963657270;
              unint64_t v198 = 0xE900000000000020;
              unint64_t v139 = v134;
              String.append(_:)(*(Swift::String *)&v135);
              outlined consume of FMFindingState((uint64_t)v190, v189, v133, v137);
              swift_bridgeObjectRelease();
              uint64_t v136 = v197;
              unint64_t v134 = v198;
              break;
          }
          uint64_t v140 = swift_allocObject();
          *(_OWORD *)(v140 + 16) = v163;
          unint64_t v141 = v162;
          *(void *)(v140 + 56) = MEMORY[0x263F8D310];
          *(void *)(v140 + 64) = v141;
          *(void *)(v140 + 32) = v136;
          *(void *)(v140 + 40) = v134;
          uint64_t v142 = String.init(format:_:)();
          uint64_t v197 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v142, v143, &v204);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v164 = (uint8_t *)v121;
          uint64_t v144 = v189;
          uint64_t v145 = (uint64_t)v190;
          outlined consume of FMFindingState((uint64_t)v190, v189, v133, v137);
          uint64_t v146 = v145;
          uint64_t v114 = (uint64_t)v133;
          outlined consume of FMFindingState(v146, v144, v133, v196);
          uint64_t v147 = v174;
          id v148 = v164;
          _os_log_impl(&dword_227326000, v174, (os_log_type_t)v166, "Measurement bucket changed to:%s from previous state:%s", v164, 0x16u);
          uint64_t v149 = v165;
          swift_arrayDestroy();
          MEMORY[0x22A6785E0](v149, -1, -1);
          MEMORY[0x22A6785E0](v148, -1, -1);

          uint64_t v81 = (uint64_t)v176;
        }
        else
        {
          id v126 = v176;
          outlined consume of FMFindingState(0, 0, v176, 0);
          outlined consume of FMFindingState(0, 0, v126, 0);
          uint64_t v127 = (uint64_t)v190;
          Class v128 = v177;
          outlined consume of FMFindingState((uint64_t)v190, v117, v177, v196);
          uint64_t v81 = (uint64_t)v176;
          outlined consume of FMFindingState(v127, v189, v128, v196);

          uint64_t v114 = (uint64_t)v128;
        }
        uint64_t v150 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimer;
        uint64_t v151 = v195;
        objc_msgSend(*(id *)&v195[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimer], sel_invalidate, v159);
        uint64_t v152 = *(void **)&v151[v150];
        *(void *)&v151[v150] = 0;

        uint64_t v153 = self;
        uint64_t v154 = swift_allocObject();
        *(void *)(v154 + 16) = v151;
        v201 = partial apply for closure #1 in FindingViewController.session(_:object:didUpdateRegion:previousRegion:);
        uint64_t v202 = v154;
        uint64_t v197 = MEMORY[0x263EF8330];
        unint64_t v198 = 1107296256;
        v199 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
        v200 = &block_descriptor_101;
        id v155 = _Block_copy(&v197);
        id v156 = v151;
        swift_release();
        id v157 = objc_msgSend(v153, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v155, 9.5);
        _Block_release(v155);
        char v158 = *(void **)&v151[v150];
        *(void *)&v151[v150] = v157;

        outlined consume of FMFindingState(0, 0, (void *)v81, 0);
        uint64_t v104 = v189;
        uint64_t v115 = (uint64_t)v190;
        Class v105 = v196;
        break;
    }
    outlined consume of FMFindingState(v115, v104, (void *)v114, v105);
  }
  FindingViewController.updateState(to:)(&v205);
  outlined consume of FMFindingMeasurement?(v167, v194, (void *)v168, v193);
  outlined consume of FMFindingState(0, 0, (void *)v81, 0);
}

uint64_t specialized FindingViewController.session(_:didInvalidateWith:)(void *a1, const char *a2)
{
  if (one-time initialization token for findingExperience != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.findingExperience);
  id v5 = a1;
  id v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    id v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    id v11 = a1;
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v10 = v13;

    _os_log_impl(&dword_227326000, v7, v8, a2, v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22A6785E0](v10, -1, -1);
    MEMORY[0x22A6785E0](v9, -1, -1);
  }
  else
  {
  }
  return FindingViewController.restartSessionOnError()();
}

void partial apply for closure #1 in FindingViewController.session(_:object:didUpdateRegion:previousRegion:)(uint64_t a1)
{
  closure #1 in FindingViewController.session(_:object:didUpdateRegion:previousRegion:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_2273E8108()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #1 in FindingViewController.sessionDidStartRunning(_:)()
{
  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds) = 0;
}

void partial apply for closure #1 in FindingViewController.viewIsAppearing(_:)(uint64_t a1, uint64_t a2)
{
  closure #1 in FindingViewController.viewIsAppearing(_:)(a1, a2, v2);
}

uint64_t outlined retain of FMFindingViewStyle(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  id v5 = *(id *)a1;
  id v6 = v2;
  id v7 = v3;
  id v8 = v4;
  return a1;
}

uint64_t outlined release of FMFindingViewStyle(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);

  return a1;
}

UIBezierPath __swiftcall UIBezierPath.init(fmpfRectangleCentered:size:)(CGPoint fmpfRectangleCentered, CGSize size)
{
  double height = size.height;
  double width = size.width;
  double y = fmpfRectangleCentered.y;
  double x = fmpfRectangleCentered.x;
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  double v7 = width * 0.5;
  double v8 = x - width * 0.5;
  double v9 = height * 0.5;
  double v10 = height * 0.5 + y;
  double v11 = v7 + x;
  double v12 = y - v9;
  id v13 = v6;
  objc_msgSend(v13, sel_moveToPoint_, v8, v10);
  objc_msgSend(v13, sel_addLineToPoint_, v11, v10);
  objc_msgSend(v13, sel_addLineToPoint_, v11, v12);
  objc_msgSend(v13, sel_addLineToPoint_, v8, v12);
  objc_msgSend(v13, sel_addLineToPoint_, v8, v10);
  objc_msgSend(v13, sel_closePath);

  return (UIBezierPath)v13;
}

id FMPFSKBTRangingNode.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDiskNode;
  id v2 = objc_allocWithZone((Class)type metadata accessor for FMPFSKBTRangeDiskNode());
  uint64_t v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);
  uint64_t v4 = OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDotNode;
  *(void *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTRangeDotNode()), sel_init);
  uint64_t v5 = OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_levelRingsNode;
  *(void *)&v3[v5] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTLevelsNode()), sel_init);

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for FMPFSKBTRangingNode();
  id v6 = objc_msgSendSuper2(&v8, sel_init);
  FMPFSKBTRangingNode.setupLayout()();

  return v6;
}

void FMPFSKBTRangingNode.setupLayout()()
{
  uint64_t v1 = v0;
  id v2 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDiskNode];
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_levelRingsNode];
  uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDotNode];
  uint64_t v5 = self;
  id v6 = self;
  id v7 = v2;
  id v8 = v3;
  id v22 = v4;
  objc_msgSend(v1, sel_addChild_, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_2273F4460;
  id v10 = objc_msgSend(v6, sel_rangeWithConstantValue_, 0.0);
  id v11 = objc_msgSend(v5, sel_distance_toNode_, v10, v1);

  *(void *)(v9 + 32) = v11;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setConstraints_, isa);

  id v13 = v8;
  objc_msgSend(v1, sel_addChild_, v13);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_2273F4460;
  id v15 = objc_msgSend(v6, sel_rangeWithConstantValue_, 0.0);
  id v16 = objc_msgSend(v5, sel_distance_toNode_, v15, v1);

  *(void *)(v14 + 32) = v16;
  specialized Array._endMutation()();
  Class v17 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_setConstraints_, v17);

  id v18 = v22;
  objc_msgSend(v1, sel_addChild_, v18);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_2273F4460;
  id v20 = objc_msgSend(v6, sel_rangeWithConstantValue_, 0.0);
  id v21 = objc_msgSend(v5, sel_distance_toNode_, v20, v1);

  *(void *)(v19 + 32) = v21;
  specialized Array._endMutation()();
  v23.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_setConstraints_, v23.super.isa);
}

void FMPFSKBTRangingNode.__ivar_destroyer()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_levelRingsNode);
}

id FMPFSKBTRangingNode.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKBTRangingNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKBTRangingNode()
{
  return self;
}

unint64_t type metadata accessor for SKConstraint()
{
  unint64_t result = lazy cache variable for type metadata for SKConstraint;
  if (!lazy cache variable for type metadata for SKConstraint)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SKConstraint);
  }
  return result;
}

void specialized FMPFSKBTRangingNode.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDiskNode;
  *(void *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTRangeDiskNode()), sel_init);
  uint64_t v2 = OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDotNode;
  *(void *)&v0[v2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTRangeDotNode()), sel_init);
  uint64_t v3 = OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_levelRingsNode;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTLevelsNode()), sel_init);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ResourceBundleClass.__deallocating_deinit()
{
  return MEMORY[0x270FA0228](v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return self;
}

uint64_t __getVUITimeMetadataFactoryClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return __getVUITimedMetadataPlaybackInfoClass_block_invoke_cold_1(v0);
}

uint64_t __getVUITimedMetadataPlaybackInfoClass_block_invoke_cold_1()
{
  uint64_t v0 = abort_report_np();
  return __38__TVRUINetworkObserver_startObserving__block_invoke_cold_1(v0);
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5 = MEMORY[0x270EEEEC0](_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t dispatch thunk of NSKeyValueObservation.invalidate()()
{
  return MEMORY[0x270EEF760]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x270EEF830]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x270EEF840]();
}

uint64_t _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)()
{
  return MEMORY[0x270EEFA78]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x270EEFCB0]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EEFE20]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x270EEFFC8]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x270EF0120]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0178]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x270EF07E0]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x270EF0998]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF0BA8]();
}

uint64_t Date.init()()
{
  return MEMORY[0x270EF0C30]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t Tip.invalidate(reason:)()
{
  return MEMORY[0x270F05B40]();
}

uint64_t Tip.shouldDisplayUpdates.getter()
{
  return MEMORY[0x270F05B50]();
}

uint64_t Tip.actions.getter()
{
  return MEMORY[0x270F05B80]();
}

uint64_t TipUIPopoverViewController.popoverPresentationController.getter()
{
  return MEMORY[0x270F05B98]();
}

uint64_t TipUIPopoverViewController.presentationDelegate.setter()
{
  return MEMORY[0x270F05BA0]();
}

uint64_t type metadata accessor for TipUIPopoverViewController()
{
  return MEMORY[0x270F05BA8]();
}

uint64_t TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)()
{
  return MEMORY[0x270F05BB0]();
}

uint64_t static Tips.OptionsBuilder.buildExpression<A>(_:)()
{
  return MEMORY[0x270F05C30]();
}

uint64_t static Tips.OptionsBuilder.buildFinalResult<A>(_:)()
{
  return MEMORY[0x270F05C38]();
}

uint64_t static Tips.OptionsBuilder.buildPartialBlock<A, B>(accumulated:next:)()
{
  return MEMORY[0x270F05C40]();
}

uint64_t static Tips.OptionsBuilder.buildPartialBlock<A>(first:)()
{
  return MEMORY[0x270F05C48]();
}

uint64_t type metadata accessor for Tips.MaxDisplayCount()
{
  return MEMORY[0x270F05C58]();
}

uint64_t Tips.MaxDisplayCount.init(_:)()
{
  return MEMORY[0x270F05C60]();
}

uint64_t type metadata accessor for Tips.UsesConstellation()
{
  return MEMORY[0x270F05C78]();
}

uint64_t Tips.UsesConstellation.init(_:)()
{
  return MEMORY[0x270F05C80]();
}

uint64_t type metadata accessor for Tips.InvalidationReason()
{
  return MEMORY[0x270F05C88]();
}

uint64_t static Tips.ConfigurationOption.AnalyticsEngine.coreAnalytics.getter()
{
  return MEMORY[0x270F05C90]();
}

uint64_t type metadata accessor for Tips.ConfigurationOption.AnalyticsEngine()
{
  return MEMORY[0x270F05C98]();
}

uint64_t static Tips.ConfigurationOption.analyticsEngine(_:)()
{
  return MEMORY[0x270F05CA0]();
}

uint64_t static Tips.ConfigurationOption.DisplayFrequency.immediate.getter()
{
  return MEMORY[0x270F05CB0]();
}

uint64_t type metadata accessor for Tips.ConfigurationOption.DisplayFrequency()
{
  return MEMORY[0x270F05CB8]();
}

uint64_t static Tips.ConfigurationOption.displayFrequency(_:)()
{
  return MEMORY[0x270F05CC0]();
}

uint64_t static Tips.ConfigurationOption.DatastoreLocation.tipsGroupContainer.getter()
{
  return MEMORY[0x270F05CD0]();
}

uint64_t type metadata accessor for Tips.ConfigurationOption.DatastoreLocation()
{
  return MEMORY[0x270F05CD8]();
}

uint64_t static Tips.ConfigurationOption.datastoreLocation(_:)()
{
  return MEMORY[0x270F05CE0]();
}

uint64_t type metadata accessor for Tips.ConfigurationOption()
{
  return MEMORY[0x270F05CE8]();
}

uint64_t type metadata accessor for Tips.Status()
{
  return MEMORY[0x270F05D60]();
}

uint64_t static Tips.configure(_:)()
{
  return MEMORY[0x270F05D80]();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return MEMORY[0x270F01270]();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return MEMORY[0x270F03228]();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return MEMORY[0x270FA0970]();
}

uint64_t static DispatchWorkItemFlags.barrier.getter()
{
  return MEMORY[0x270FA0998]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return MEMORY[0x270FA0A00]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x270FA0AC0]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x270FA0B00]();
}

uint64_t static DispatchWallTime.now()()
{
  return MEMORY[0x270FA0B08]();
}

uint64_t type metadata accessor for DispatchWallTime()
{
  return MEMORY[0x270FA0B20]();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return MEMORY[0x270FA0B60]();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return MEMORY[0x270FA0B70]();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return MEMORY[0x270FA0B98]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x270FA0BB0]();
}

{
  return MEMORY[0x270FA0BC8]();
}

{
  return MEMORY[0x270FA0BE0]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x270EF1818]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1840]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x270EF19B0]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x270EF1A50]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x270F9D648]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x270F9D708]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x270F9D758]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x270F9D7E0]();
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x270F9D880](a1._countAndFlagsBits, a1._object);
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x270F9DA80]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x270F9DB00]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9DBA0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x270EF1B88]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9DC50]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1BD8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x270FA1EA0]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x270FA1EA8]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x270FA1F10]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return MEMORY[0x270FA2080]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x270EF1C98]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x270EF1CC0]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x270F9DF80]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x270EF1CE0]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)()
{
  return MEMORY[0x270EE58C8]();
}

uint64_t static OS_dispatch_queue.Attributes.concurrent.getter()
{
  return MEMORY[0x270FA0C38]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t OS_dispatch_queue.asyncAfter(wallDeadline:execute:)()
{
  return MEMORY[0x270FA0C70]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x270FA0C78]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x270FA0D70]();
}

uint64_t OS_dispatch_queue.sync<A>(flags:execute:)()
{
  return MEMORY[0x270FA0D78]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t CGSize.debugDescription.getter()
{
  return MEMORY[0x270EE5910]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270FA1170](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x270FA1180]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x270FA1190]();
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x270F9E4B0]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x270F9E508]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x270F9E530]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x270F9E560]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x270F9E670]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x270F9E810]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x270F9E818]();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return MEMORY[0x270F9E830]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x270F9E838]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x270F9E840]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x270F9E860]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x270F9E870]();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return MEMORY[0x270F9E880]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x270F9E8C0](seed);
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t AsyncMapSequence.base.getter()
{
  return MEMORY[0x270FA2210]();
}

uint64_t AsyncMapSequence.Iterator.baseIterator.modify()
{
  return MEMORY[0x270FA2218]();
}

uint64_t AsyncMapSequence.Iterator.transform.getter()
{
  return MEMORY[0x270FA2220]();
}

uint64_t AsyncMapSequence.Iterator.init(_:transform:)()
{
  return MEMORY[0x270FA2228]();
}

uint64_t AsyncMapSequence.transform.getter()
{
  return MEMORY[0x270FA2230]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFE8]();
}

{
  return MEMORY[0x270F9EFF0]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x270F9F000]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9F0C0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x270F9F230](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x270F9F2F0]();
}

{
  return MEMORY[0x270F9F2F8]();
}

{
  return MEMORY[0x270F9F308]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F318]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x270F9F430]();
}

{
  return MEMORY[0x270F9F438]();
}

{
  return MEMORY[0x270F9F448]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x270F9F458]();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x270F9F4C0]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x270F9F4C8](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x270F9F918]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x270EF2680]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t _Pointer.debugDescription.getter()
{
  return MEMORY[0x270FA0080]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x270FA0128]();
}

void AudioServicesPlaySystemSound(SystemSoundID inSystemSoundID)
{
}

uint64_t BSNSStringFromCGRect()
{
  return MEMORY[0x270F10880]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x270F10AF0]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  MEMORY[0x270EFB790]();
  return result;
}

CATransform3D *__cdecl CATransform3DMakeRotation(CATransform3D *__return_ptr retstr, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return (CATransform3D *)MEMORY[0x270EFB938](retstr, angle, x, y, z);
}

uint64_t CCUIExpandedModuleContinuousCornerRadius()
{
  return MEMORY[0x270F18850]();
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x270EE4838]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x270EE4B88]();
}

void CFRelease(CFTypeRef cf)
{
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x270EE5998](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x270EE59A8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59B0](retstr, tx, ty);
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x270EE7030]();
}

CGMutablePathRef CGPathCreateMutableCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGMutablePathRef)MEMORY[0x270EE7040](path, transform);
}

CGPathRef CGPathCreateWithEllipseInRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7050](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  MEMORY[0x270EE7090](path);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.double x = v1;
  return result;
}

void CGPathRelease(CGPathRef path)
{
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x270EE7170]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE71A0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGRect CGRectFromString(NSString *string)
{
  MEMORY[0x270F82BA8](string);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.double x = v1;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x270EE71C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x270EE71D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x270EE71D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x270EE71F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x270EE71F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x270EE7210]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x270EE7218]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x270EE7230]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.double x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7238]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x270EE7260]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x270EE7270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x270EE7280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7290]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

uint64_t GestaltGetDeviceClass()
{
  return MEMORY[0x270F241A0]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x270F95F98]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x270F95FB8]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x270F95FD8]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x270F95FE8]();
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromCGPoint(CGPoint point)
{
  return (NSString *)MEMORY[0x270F82BC0]((__n128)point, *(__n128 *)&point.y);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return (NSString *)MEMORY[0x270F82BC8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

uint64_t NSStringFromSBSHardwareButtonKind()
{
  return MEMORY[0x270F770C8]();
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

uint64_t SBSUIHardwareButtonHintViewsSupported()
{
  return MEMORY[0x270F77248]();
}

uint64_t SBSUIRegisterHardwareButtonHintView()
{
  return MEMORY[0x270F77250]();
}

uint64_t SBSUndimScreen()
{
  return MEMORY[0x270F77210]();
}

uint64_t TVRCDeviceClassificationDescription()
{
  return MEMORY[0x270F79A78]();
}

uint64_t TVRCDeviceConnectionTypeDescription()
{
  return MEMORY[0x270F79A80]();
}

uint64_t TVRCDeviceLinkTypeDescription()
{
  return MEMORY[0x270F79A88]();
}

uint64_t TVRCTouchPhaseDescription()
{
  return MEMORY[0x270F79A90]();
}

BOOL UIAccessibilityDarkerSystemColorsEnabled(void)
{
  return MEMORY[0x270F82BF8]();
}

BOOL UIAccessibilityIsReduceMotionEnabled(void)
{
  return MEMORY[0x270F82C48]();
}

NSComparisonResult UIContentSizeCategoryCompareToCategory(UIContentSizeCategory lhs, UIContentSizeCategory rhs)
{
  return MEMORY[0x270F82CC8](lhs, rhs);
}

BOOL UIContentSizeCategoryIsAccessibilityCategory(UIContentSizeCategory category)
{
  return MEMORY[0x270F82CD0](category);
}

uint64_t UIEdgeInsetsMakeWithEdges()
{
  return MEMORY[0x270F82D00]();
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return (CGContextRef)MEMORY[0x270F82D70]();
}

uint64_t UIRectCenteredIntegralRect()
{
  return MEMORY[0x270F82E68]();
}

uint64_t UIRectGetCenter()
{
  return MEMORY[0x270F82EB8]();
}

uint64_t WFWiFiStateMonitorStringForState()
{
  return MEMORY[0x270F85820]();
}

uint64_t _AXSAppleTVRemoteForceLiveTVButtons()
{
  return MEMORY[0x270F90560]();
}

uint64_t _AXSAppleTVRemoteUsesSimpleGestures()
{
  return MEMORY[0x270F90568]();
}

uint64_t _AXSButtonShapesEnabled()
{
  return MEMORY[0x270F90640]();
}

uint64_t _AXSCopyPreferredContentSizeCategoryName()
{
  return MEMORY[0x270F906E0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int __fpclassifyf(float a1)
{
  return MEMORY[0x270ED7DF0](a1);
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x270F76310]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x270ED8458]();
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

long double cosh(long double __x)
{
  MEMORY[0x270ED9138](__x);
  return result;
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x270ED9278](flags, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

void free(void *a1)
{
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x270ED9E58](__x, __y);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x270F9A658](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9AA38](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x270EDAA58](log);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

long double remainder(long double __x, long double __y)
{
  MEMORY[0x270EDB1D8](__x, __y);
  return result;
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

long double sinh(long double __x)
{
  MEMORY[0x270EDB4F8](__x);
  return result;
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x270FA0330]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x270FA0348]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x270FA03F0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x270FA0480]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x270FA0570]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x270FA05D0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}