@interface UIView
+ (BOOL)_addCompletion:(id)a3;
+ (BOOL)_addCompletionWithPosition:(id)a3;
+ (BOOL)_allowsUnsupportedMacIdiomBehavior;
+ (BOOL)_enableLegacyRTL;
+ (BOOL)_enableRTL;
+ (BOOL)_fluidParallaxTransitionsEnabledWithTraitCollection:(uint64_t)a1;
+ (BOOL)_hasInProcessProgressAnimator;
+ (BOOL)_hostLayoutEngineOnlyTAMIC_YES;
+ (BOOL)_interruptibleParallaxTransitionsEnabledWithTraitCollection:(uint64_t)a1;
+ (BOOL)_isAnimationTracking;
+ (BOOL)_isInAnimationBlock;
+ (BOOL)_isInAnimationBlockWithAnimationsEnabled;
+ (BOOL)_isInKeyframeAnimationBlockWithAnimationsEnabled;
+ (BOOL)_isInRetargetableAnimationBlock;
+ (BOOL)_isOnFluidParallaxDenyList;
+ (BOOL)_legacyRTLPreferenceEnabled;
+ (BOOL)_motionEffectsEnabled;
+ (BOOL)_motionEffectsSupported;
+ (BOOL)_preventsAppearanceProxyCustomization;
+ (BOOL)_shouldRedactTextInDescription;
+ (BOOL)_shouldTrackActionWithAnimator:(id)a3;
+ (BOOL)_shouldTrackAnimationsWithAnimator;
+ (BOOL)_supportsInvalidatingFocusCache;
+ (BOOL)_toolsDebugAlignmentRects;
+ (BOOL)_toolsDebugColorViewBounds;
+ (BOOL)_toolsDebugShouldDetectClippedViews;
+ (BOOL)_wantsDeepColorByDefault;
+ (BOOL)areAnimationsEnabled;
+ (BOOL)requiresConstraintBasedLayout;
+ (Class)layerClass;
+ (UIUserInterfaceLayoutDirection)userInterfaceLayoutDirectionForSemanticContentAttribute:(UISemanticContentAttribute)attribute;
+ (UIUserInterfaceLayoutDirection)userInterfaceLayoutDirectionForSemanticContentAttribute:(UISemanticContentAttribute)semanticContentAttribute relativeToLayoutDirection:(UIUserInterfaceLayoutDirection)layoutDirection;
+ (double)_currentAnimationDuration;
+ (double)_durationForRotationFromInterfaceOrientation:(int64_t)a3 toInterfaceOrientation:(int64_t)a4;
+ (double)_durationForRotationFromInterfaceOrientation:(int64_t)a3 toInterfaceOrientation:(int64_t)a4 withBaseDuration:(double)a5;
+ (id)_alongsideAnimations;
+ (id)_appearanceWhenContainedIn:(id)a3;
+ (id)_currentAnimationAttributes;
+ (id)_currentAnimationSettings;
+ (id)_currentViewAnimationState;
+ (id)_defaultInteractionTintColorForIdiom:(int64_t)a3;
+ (id)_defaultKeyPathsToSyncWithPrivateSubviews;
+ (id)_defaultUIViewActionForLayer:(id)a3 forKey:(id)a4;
+ (id)_defaultUIViewAnimationForLayer:(id)a3 forKey:(id)a4;
+ (id)_descriptionWithoutTextRedactionForObject:(id)a3;
+ (id)_disabledColorForTintColor:(id)a3;
+ (id)_enableAnimationTracking;
+ (id)_enableAnimationTracking:(BOOL)a3;
+ (id)_makeHybridPropertyAnimatorWithDuration:(double)a3 progressValue:(id)a4 progressValueReversed:(BOOL)a5 progressValueUpdateReason:(unsigned int)a6 springAnimationBehavior:(id)a7;
+ (id)_performWithAnimationTracking:(id)a3;
+ (id)_startAnimationTracking;
+ (id)_topMostView:(int)a3 reverse:;
+ (id)_viewWithLayoutConstraints;
+ (id)appearance;
+ (id)appearanceForTraitCollection:(id)a3;
+ (id)appearanceForTraitCollection:(id)a3 whenContainedIn:(Class)a4;
+ (id)appearanceForTraitCollection:(id)a3 whenContainedInInstancesOfClasses:(id)a4;
+ (id)appearanceMatchingProperties:(id)a3 whenContainedInInstancesOfClasses:(id)a4;
+ (id)appearanceWhenContainedIn:(Class)a3;
+ (id)appearanceWhenContainedInInstancesOfClasses:(id)a3;
+ (int)_degreesToRotateFromInterfaceOrientation:(int64_t)a3 toInterfaceOrientation:(int64_t)a4;
+ (int64_t)_currentAnimationCurve;
+ (uint64_t)_fluidZoomTransitionsEnabled;
+ (uint64_t)_materialSidebarsEnabled;
+ (uint64_t)_uip_fluidPresentationTransitionsEnabled;
+ (uint64_t)_uip_transitionEnabled;
+ (void)__animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 interactive:(double)a5 initialDampingRatio:(double)a6 initialResponse:(double)a7 dampingRatioSmoothing:(uint64_t)a8 responseSmoothing:(uint64_t)a9 targetSmoothing:(void *)a10 projectionDeceleration:(void *)a11 retargetImpulse:(void *)a12 animations:(void *)a13 completion:;
+ (void)__swift_animateByRetargetingAnimations:(id)a3 completion:(id)a4;
+ (void)__swift_animateUsingSpringBehavior:(id)a3 tracking:(BOOL)a4 animations:(id)a5 completion:(id)a6;
+ (void)__swift_animateUsingSpringInteractive:(BOOL)a3 animations:(id)a4 completion:(id)a5;
+ (void)__swift_animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 interactive:(BOOL)a5 initialDampingRatio:(id)a6 initialResponse:(id)a7 dampingRatioSmoothing:(double)a8 responseSmoothing:(double)a9 targetSmoothing:(double)a10 projectionDeceleration:(double)a11 retargetImpulse:(double)a12 animations:(id)a13 completion:(id)a14;
+ (void)__swift_animateUsingSpringWithTension:(double)a3 friction:(double)a4 interactive:(BOOL)a5 animations:(id)a6 completion:(id)a7;
+ (void)__swift_animateWithFrictionBounceAnimations:(id)a3 completion:(id)a4;
+ (void)__swift_createTransformerWithInputAnimatableProperties:(id)a3 modelValueSetter:(id)a4 presentationValueSetter:(id)a5;
+ (void)__swift_createTransformerWithInputAnimatableProperties:(id)a3 presentationValueChangedCallback:(id)a4;
+ (void)__swift_createUnsafeTransformerWithInputAnimatableProperties:(id)a3 modelValueSetter:(id)a4 presentationValueSetter:(id)a5;
+ (void)__swift_performWithoutRetargetingAnimations:(id)a3;
+ (void)__swift_trackVelocity:(id)a3;
+ (void)_addHierarchyTrackingVisitor:(id)a3;
+ (void)_addOrPerformCompletion:(id)a3;
+ (void)_addOrPerformCompletionWithPosition:(id)a3;
+ (void)_animateByRetargetingAnimations:(id)a3 completion:(id)a4;
+ (void)_animateInProcessAlongsideTransition:(id)a3;
+ (void)_animateInProcessKeyframesAlongsideTransitionWithOptions:(unint64_t)a3 animations:(id)a4;
+ (void)_animateKeyframeWithID:(id)a3 relativeStartTime:(double)a4 relativeDuration:(double)a5 animations:(id)a6;
+ (void)_animateUsingDefaultDampedSpringWithDelay:(double)a3 initialSpringVelocity:(double)a4 options:(unint64_t)a5 animations:(id)a6 completion:(id)a7;
+ (void)_animateUsingDefaultTimingWithOptions:(unint64_t)a3 animations:(id)a4 completion:(id)a5;
+ (void)_animateUsingSpringBehavior:(id)a3 tracking:(BOOL)a4 animations:(id)a5 completion:(id)a6;
+ (void)_animateUsingSpringInteractive:(BOOL)a3 animations:(id)a4 completion:(id)a5;
+ (void)_animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 tracking:(BOOL)a5 dampingRatioSmoothing:(double)a6 responseSmoothing:(double)a7 targetSmoothing:(double)a8 projectionDeceleration:(double)a9 animations:(id)a10 completion:(id)a11;
+ (void)_animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 tracking:(BOOL)a5 dampingRatioSmoothing:(double)a6 responseSmoothing:(double)a7 targetSmoothing:(double)a8 projectionDeceleration:(double)a9 retargetImpulse:(double)a10 animations:(id)a11 completion:(id)a12;
+ (void)_animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 tracking:(BOOL)a5 initialDampingRatio:(double)a6 initialResponse:(double)a7 dampingRatioSmoothing:(double)a8 responseSmoothing:(double)a9 targetSmoothing:(double)a10 projectionDeceleration:(double)a11 animations:(id)a12 completion:(id)a13;
+ (void)_animateUsingSpringWithDuration:(double)a3 delay:(double)a4 options:(unint64_t)a5 mass:(double)a6 stiffness:(double)a7 damping:(double)a8 initialVelocity:(double)a9 animations:(id)a10 completion:(id)a11;
+ (void)_animateUsingSpringWithTension:(double)a3 friction:(double)a4 interactive:(BOOL)a5 animations:(id)a6 completion:(id)a7;
+ (void)_animateWithAnimationSettings:(id)a3 animations:(id)a4 completion:(id)a5;
+ (void)_animateWithAttributes:(id)a3 animations:(id)a4 completion:(id)a5;
+ (void)_animateWithDuration:(double)a3 delay:(double)a4 options:(unint64_t)a5 animations:(id)a6 start:(id)a7 completion:(id)a8;
+ (void)_animateWithDuration:(double)a3 delay:(double)a4 options:(unint64_t)a5 factory:(id)a6 animations:(id)a7 completion:(id)a8;
+ (void)_animateWithFilter:(int)a3 filterView:(id)a4 filterValue:(double)a5 duration:(double)a6 delay:(double)a7 options:(unint64_t)a8 completion:(id)a9;
+ (void)_animateWithFrictionBounceAnimations:(id)a3 completion:(id)a4;
+ (void)_beginSuspendingMotionEffectsForReason:(id)a3;
+ (void)_completeAnimationWithUUID:(id)a3 duration:(double)a4 curve:(int64_t)a5 reverse:(BOOL)a6;
+ (void)_conditionallyModifyAnimations:(BOOL)a3 withPreferredFrameRateRange:(CAFrameRateRange)a4 updateReason:(unsigned int)a5 animations:(id)a6;
+ (void)_conditionallyPerformWithoutAnimation:(BOOL)a3 layout:(id)a4;
+ (void)_disableAnimationTracking:(id)a3;
+ (void)_disableAnimationTracking:(id)a3 clearTrackedAnimations:(BOOL)a4;
+ (void)_enableToolsDebugAlignmentRects:(BOOL)a3;
+ (void)_enableToolsDebugColorViewBounds:(BOOL)a3;
+ (void)_endSuspendingMotionEffectsForReason:(id)a3;
+ (void)_finalizeStoppedAnimationWithUUID:(id)a3 reverseAnimation:(BOOL)a4;
+ (void)_finalizeStoppedAnimationWithUUID:(id)a3 reverseAnimation:(BOOL)a4 state:(id)a5 performCompletionsImmediately:(BOOL)a6;
+ (void)_finishAnimationTracking;
+ (void)_inheritAnimationParameters;
+ (void)_modifyAnimationsByDecomposingGeometricTypes:(BOOL)a3 animations:(id)a4;
+ (void)_modifyAnimationsWithPreferredFrameRateRange:(CAFrameRateRange)a3 reason:(id)a4 animations:(id)a5;
+ (void)_modifyAnimationsWithPreferredFrameRateRange:(CAFrameRateRange)a3 updateReason:(unsigned int)a4 animations:(id)a5;
+ (void)_performBlockDelayingTriggeringResponderEvents:(void *)a3 forScene:;
+ (void)_performBlockWithoutAutomaticallyUpdatingFirstResponder:(void *)a3 forScene:;
+ (void)_performForcedAppearanceModifications:(id)a3;
+ (void)_performInitializationForIdiomIfNeccessary:(uint64_t)a1;
+ (void)_performSystemAppearanceModifications:(id)a3;
+ (void)_performWithAnimation:(id)a3;
+ (void)_performWithDurationOverride:(double)a3 animations:(id)a4;
+ (void)_performWithFluidPresentationTransitionsEnabled:(uint64_t)a1;
+ (void)_performWithInProcessProgressAnimating:(id)a3 block:(id)a4;
+ (void)_performWithState:(id)a3 trackingIdentifier:(id)a4 duration:(double)a5 delay:(double)a6 animations:(id)a7;
+ (void)_performWithoutRetargetingAnimations:(id)a3;
+ (void)_recenterMotionEffects;
+ (void)_registerClassForIdiomInitializationIfNeccessary;
+ (void)_removeHierarchyTrackingVisitor:(id)a3;
+ (void)_resetHostLayoutEngineOnlyTAMIC_YES;
+ (void)_setAllowsUnsupportedMacIdiomBehavior:(BOOL)a3;
+ (void)_setAlongsideAnimations:(id)a3;
+ (void)_setAlongsideAnimations:(id)a3 toRunByEndOfBlock:(id)a4 animated:(BOOL)a5;
+ (void)_setAnimatedPropertiesEnabled:(BOOL)a3;
+ (void)_setAnimationAttributes:(id)a3;
+ (void)_setAnimationAttributes:(id)a3 skipDelegateAssignment:(BOOL)a4;
+ (void)_setHostLayoutEngineOnlyTAMIC_YES;
+ (void)_setIsResponderAncestorOfFirstResponder:(void *)a3 startingAtFirstResponder:;
+ (void)_setShouldEnableUIKitParallaxEffects:(BOOL)a3;
+ (void)_setupAnimationWithDuration:(double)a3 delay:(double)a4 view:(id)a5 options:(unint64_t)a6 factory:(id)a7 animations:(id)a8 start:(id)a9 animationStateGenerator:(id)a10 completion:(id)a11;
+ (void)_setupViewVisualization;
+ (void)_stopAnimationWithUUID:(id)a3;
+ (void)_testIfFirstView:(id)a3 secondView:(id)a4 areDescendantsOfView:(id)a5 results:(BOOL)a6[2];
+ (void)_transitionFromView:(void *)a3 toView:(void *)a4 duration:(uint64_t)a5 options:(void *)a6 animations:(void *)a7 completion:;
+ (void)_transitionWithView:(id)a3 duration:(double)a4 options:(unint64_t)a5 transitionOptions:(id)a6 completion:(id)a7;
+ (void)_updateModelValuesForAnimationWithUUID:(id)a3 useInitialValues:(BOOL)a4 animatable:(BOOL)a5 stateBlock:(id)a6 animationBlock:(id)a7;
+ (void)_updateOrientationForMotionEngine:(int64_t)a3;
+ (void)addKeyframeWithRelativeStartTime:(double)frameStartTime relativeDuration:(double)frameDuration animations:(void *)animations;
+ (void)animateBridgedWithContext:(id)a3 animations:(id)a4 completion:(id)a5;
+ (void)animateKeyframesWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewKeyframeAnimationOptions)options animations:(void *)animations completion:(void *)completion;
+ (void)animateWithDuration:(NSTimeInterval)duration animations:(void *)animations;
+ (void)animateWithDuration:(NSTimeInterval)duration animations:(void *)animations completion:(void *)completion;
+ (void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void *)animations completion:(void *)completion;
+ (void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)dampingRatio initialSpringVelocity:(CGFloat)velocity options:(UIViewAnimationOptions)options animations:(void *)animations completion:(void *)completion;
+ (void)animateWithSpringDuration:(NSTimeInterval)duration bounce:(CGFloat)bounce initialSpringVelocity:(CGFloat)velocity delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void *)animations completion:(void *)completion;
+ (void)beginAnimations:(NSString *)animationID context:(void *)context;
+ (void)beginAnimations:(id)a3;
+ (void)commitAnimations;
+ (void)conditionallyAnimate:(BOOL)a3 withAnimation:(id)a4 layout:(id)a5 completion:(id)a6;
+ (void)disableAnimation;
+ (void)enableAnimation;
+ (void)flush;
+ (void)initialize;
+ (void)mapTrackedAnimations:(void *)a3 withBlock:;
+ (void)modifyAnimationsWithRepeatCount:(CGFloat)count autoreverses:(BOOL)autoreverses animations:(void *)animations;
+ (void)modifyTrackedAnimations:(char)a3 removeOnCompletion:(void *)a4 animationFactory:(void *)a5 block:;
+ (void)performSystemAnimation:(UISystemAnimation)animation onViews:(NSArray *)views options:(UIViewAnimationOptions)options animations:(void *)parallelAnimations completion:(void *)completion;
+ (void)performWithoutAnimation:(void *)actionsWithoutAnimation;
+ (void)removePropertyAnimatorAnimationsInView:(id)a3;
+ (void)setAnimationBeginsFromCurrentState:(BOOL)fromCurrentState;
+ (void)setAnimationCurve:(UIViewAnimationCurve)curve;
+ (void)setAnimationDelay:(NSTimeInterval)delay;
+ (void)setAnimationDelegate:(id)delegate;
+ (void)setAnimationDidStopSelector:(SEL)selector;
+ (void)setAnimationDuration:(NSTimeInterval)duration;
+ (void)setAnimationFrameInterval:(double)a3;
+ (void)setAnimationPosition:(CGPoint)a3;
+ (void)setAnimationPreventsAdditive:(BOOL)a3;
+ (void)setAnimationRepeatAutoreverses:(BOOL)repeatAutoreverses;
+ (void)setAnimationRepeatCount:(float)repeatCount;
+ (void)setAnimationStartDate:(NSDate *)startDate;
+ (void)setAnimationStartTime:(double)a3;
+ (void)setAnimationTransition:(UIViewAnimationTransition)transition forView:(UIView *)view cache:(BOOL)cache;
+ (void)setAnimationTransition:(int64_t)a3 forView:(id)a4;
+ (void)setAnimationWillStartSelector:(SEL)selector;
+ (void)setAnimationsEnabled:(BOOL)enabled;
+ (void)sticker_modifyAnimationsWithPreferredFrameRateRange:(CAFrameRateRange)a3 updateReason:(unsigned int)a4 animations:(id)a5;
+ (void)throttledFlush;
+ (void)transitionFromView:(UIView *)fromView toView:(UIView *)toView duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options completion:(void *)completion;
+ (void)transitionWithView:(UIView *)view duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void *)animations completion:(void *)completion;
- ($F24F406B2B787EFB06265DBA3D28CBD5)_baselineOffsetsAtSize:(CGSize)a3;
- (BOOL)_UIViewDebuggingIsViewClipping;
- (BOOL)__isKindOfUIView;
- (BOOL)__isLandmarkView;
- (BOOL)__shouldShowVisualizationWithName:(unsigned char *)a3 isSubclass:(unsigned char *)a4 isOtherModule:;
- (BOOL)_acceptsInauthenticTouches;
- (BOOL)_accessibilityAddItemsToDragSessionAtPoint3D:(CAPoint3D)a3;
- (BOOL)_accessibilityAddItemsToDragSessionAtPoint:(CGPoint)a3;
- (BOOL)_accessibilityCanAddItemsToDragSession;
- (BOOL)_accessibilityCanDrag;
- (BOOL)_accessibilityCanDrop;
- (BOOL)_allowAssistanceInSubtree;
- (BOOL)_allowsArchivingAsSubview;
- (BOOL)_allowsFocusToLeaveViaHeading:(unint64_t)a3;
- (BOOL)_allowsHighContrastForBackgroundColor;
- (BOOL)_allowsLinkPreviewInteractionInViewServices;
- (BOOL)_alwaysHandleScrollerMouseEvent;
- (BOOL)_ancestorHasInvertFilterApplied;
- (BOOL)_appearanceIsInvalid;
- (BOOL)_appliesExclusiveTouchToSubviewTree;
- (BOOL)_applyKeyPathsAndRelativeValues:(id)a3 forMotionEffect:(id)a4;
- (BOOL)_associatedViewControllerForwardsAppearanceCallbacks:(id)a3 performHierarchyCheck:(BOOL)a4 isRoot:(BOOL)a5;
- (BOOL)_becomeFirstResponderWhenPossible;
- (BOOL)_beginDragWithInteractionTouches:(id)a3;
- (BOOL)_beginDragWithTouches:(id)a3 orInitialCentroid:(CAPoint3D)a4 accessibilityEndpoint:(id)a5;
- (BOOL)_cachedTraitCollectionIsValid;
- (BOOL)_canBeParentTraitEnvironment;
- (BOOL)_canBeReusedInPickerView;
- (BOOL)_canBecomeFirstResponderWhenPossible;
- (BOOL)_canDrawContent;
- (BOOL)_canHandleStatusBarTouchAtLocation:(CGPoint)a3;
- (BOOL)_canHaveWritingToolsCoordinator;
- (BOOL)_canHostViewControllerContentScrollView;
- (BOOL)_canPerformDefaultImplementationForStandardEditAction:(SEL)a3;
- (BOOL)_canSkipTraitsAndOverlayUpdatesForViewControllerToNotifyOnLayoutResetState:(BOOL)a3;
- (BOOL)_clippingDetected;
- (BOOL)_clipsGlyphPathFrame:(CGRect)a3 shouldContinueSuperviewTraversal:(BOOL *)a4;
- (BOOL)_containedInAbsoluteResponderChain;
- (BOOL)_containsView:(uint64_t)a1;
- (BOOL)_contentHuggingDefault_isUsuallyFixedHeight;
- (BOOL)_contentHuggingDefault_isUsuallyFixedWidth;
- (BOOL)_controlsOwnScaleFactor;
- (BOOL)_definesDynamicTintColor;
- (BOOL)_definesTintColor;
- (BOOL)_delaysTouchesForSystemGestures;
- (BOOL)_disableDictationTouchCancellation;
- (BOOL)_disableGeometryObserverNotification;
- (BOOL)_dontUpdateInferredLayoutMargins;
- (BOOL)_drawsAsBackdropOverlay;
- (BOOL)_fakeShouldAnimatePropertyWithKey:(id)a3;
- (BOOL)_flipsHorizontalAxis;
- (BOOL)_forceLayoutEngineSolutionInRationalEdges;
- (BOOL)_forwardsSystemLayoutFittingSizeToContentView:(id)a3;
- (BOOL)_gestureRecognizerShouldReceiveTouch:(id)a3;
- (BOOL)_hasAmbiguousLayout;
- (BOOL)_hasAutolayoutHeightConstraint;
- (BOOL)_hasBackgroundMaterial;
- (BOOL)_hasBaseline;
- (BOOL)_hasCustomAutolayoutNeighborSpacingForAttribute:(int64_t *)a3;
- (BOOL)_hasFocusableContents;
- (BOOL)_hasFontInfoForVerticalBaselineSpacing;
- (BOOL)_hasLayoutArrangements;
- (BOOL)_hasLayoutEngine;
- (BOOL)_hostsLayoutEngine;
- (BOOL)_hostsLayoutEngineAllowsTAMIC_NO;
- (BOOL)_ignoreBackdropViewsWhenHiding;
- (BOOL)_ignoreRemoveAllAnimations;
- (BOOL)_ignoresLayerTransformForSafeAreaInsets;
- (BOOL)_inSecondConstraintsPass;
- (BOOL)_isAlphaHittableAndHasAlphaHittableAncestors;
- (BOOL)_isAncestorOfFirstResponder;
- (BOOL)_isBoundingPathNonRectangular;
- (BOOL)_isChargeEnabled;
- (BOOL)_isContainedInHostedFocusSystem;
- (BOOL)_isEligibleForFocusGivenAlpha;
- (BOOL)_isEligibleForFocusInteraction;
- (BOOL)_isEligibleForFocusOcclusion;
- (BOOL)_isFindAction:(SEL)a3;
- (BOOL)_isFloatingLayoutItem;
- (BOOL)_isFocusDirectionFlippedHorizontally;
- (BOOL)_isFocusInteractionEnabled;
- (BOOL)_isFocusedOrAncestorOfFocusedView;
- (BOOL)_isHasBaselinePropertyChangeable;
- (BOOL)_isHiddenForReuse;
- (BOOL)_isInAWindow;
- (BOOL)_isInAnimatedLayout;
- (BOOL)_isInExclusiveTouchSubviewTree;
- (BOOL)_isInLayoutSubviews;
- (BOOL)_isInTransitionBlock;
- (BOOL)_isInternalDebugView;
- (BOOL)_isKnownUISearchBarComponentContainer;
- (BOOL)_isLazyFocusItemContainer;
- (BOOL)_isManuallyResizedBySuperview;
- (BOOL)_isMemberOfViewControllerHierarchy:(id)a3;
- (BOOL)_isPromiseFocusRegion;
- (BOOL)_isRootForKeyResponderCycle;
- (BOOL)_isScrollingEnabled;
- (BOOL)_isTransparentFocusRegion;
- (BOOL)_isUnsatisfiableConstraintsLoggingSuspended;
- (BOOL)_isView;
- (BOOL)_is_needsLayout;
- (BOOL)_la_isVisible;
- (BOOL)_layoutEngineRelativeAlignmentRectOriginIsValid;
- (BOOL)_layoutEngine_isEngineMergingAllowedBetweenEngine:(id)a3 itemEngine:(id)a4 forConstraint:(id)a5 initialView:(id)a6;
- (BOOL)_layoutMarginsGuideIgnoresSystemMinimumMargins;
- (BOOL)_lightStyleRenderConfig;
- (BOOL)_monitorsSubtree;
- (BOOL)_monitorsView:(id)a3;
- (BOOL)_motionEffectsAreSuspended;
- (BOOL)_needsContentsFormatUpdate;
- (BOOL)_needsDoubleUpdateConstraintsPass;
- (BOOL)_needsLayoutOnAnimatedFrameChangeForNewFrame:(CGRect)a3;
- (BOOL)_ola_shouldUseImprovedMultilineTextDisambiguation;
- (BOOL)_old_nsli_lowerAttribute:(int)a3 intoExpression:(id)a4 withCoefficient:(double)a5 forConstraint:(id)a6;
- (BOOL)_overrideTintColorAutomaticallyOverridesTintColor;
- (BOOL)_preWhitetailUsesAutoresizingConstraints;
- (BOOL)_prefersDrawingWithForcedScaleFactorInClassicMode;
- (BOOL)_providesCustomPointerInteraction;
- (BOOL)_providesCustomRemoteHoverInteraction;
- (BOOL)_recordBaselineLoweringInfo;
- (BOOL)_requiresExplicitLayoutMarginsGuideForAttribute:(int64_t)a3 getAttributeForGuide:(int *)a4;
- (BOOL)_safeAreaInsetsFrozen;
- (BOOL)_safeAreaWidthExceedsReadableWidth;
- (BOOL)_shouldAdaptToMaterials;
- (BOOL)_shouldAlwaysDiagnoseFocusInteractionEligibility;
- (BOOL)_shouldAnimatePropertyAdditivelyWithKey:(id)a3;
- (BOOL)_shouldAnimatePropertyWithKey:(id)a3;
- (BOOL)_shouldAppendTextInViewDescription;
- (BOOL)_shouldApplyExclusiveTouch;
- (BOOL)_shouldArchiveUIAppearanceTags;
- (BOOL)_shouldDecodeSubviews;
- (BOOL)_shouldDelayTouchForSystemGestures:(id)a3;
- (BOOL)_shouldEnclosedScrollViewFlashIndicators:(id)a3;
- (BOOL)_shouldIgnoreAutofillSave;
- (BOOL)_shouldInformFocusAboutBecomingVisible;
- (BOOL)_shouldInheritScreenScaleAsContentScaleFactor;
- (BOOL)_shouldInvalidateBaselineConstraintsForSize:(CGSize)a3 oldSize:(CGSize)a4;
- (BOOL)_shouldNotifyGeometryObserversForBaselineChanges;
- (BOOL)_shouldResignFirstResponderWithInteractionDisabled;
- (BOOL)_shouldReverseLayoutDirection;
- (BOOL)_shouldSkipObservingBoundingPathChangesForScreen:(BOOL)a1;
- (BOOL)_shouldUseViewForSceneDraggingBehavior;
- (BOOL)_subclassImplementsDrawRect;
- (BOOL)_subviewPreventsSkipLayout:(id)a3;
- (BOOL)_supportsBecomeFirstResponderWhenPossible;
- (BOOL)_supportsContentDimensionVariables;
- (BOOL)_touchesInsideShouldHideCalloutBar;
- (BOOL)_tracksFocusedAncestors;
- (BOOL)_tvAddsChildFocusItemsBeforeSelf;
- (BOOL)_tvAddsChildFocusItemsButNotSelf;
- (BOOL)_tvAllowsFocusInChildrenWhenFocused;
- (BOOL)_uiib_tryToAddConstraint:(id)a3 roundingAdjustment:(double)a4 mutuallyExclusiveConstraints:(id *)a5;
- (BOOL)_uili_isFocusGuide;
- (BOOL)_uili_requiresObservationForVariable:(id)a3;
- (BOOL)_unapplyMotionEffect:(id)a3;
- (BOOL)_unconditionallyWantsSetBoundsFromISEngineLayout;
- (BOOL)_useContentDimensionVariablesForConstraintLowering;
- (BOOL)_usesMinimumSafeAreas;
- (BOOL)_viewDelegateContentOverlayInsetsAreClean;
- (BOOL)_wantsAnimationRestoration;
- (BOOL)_wantsAutolayout;
- (BOOL)_wantsBaselineUpdatingFollowingConstraintsPass;
- (BOOL)_wantsConstraintBasedLayout;
- (BOOL)_wantsDeepDrawing;
- (BOOL)_wantsKeyCommandsWhenDeferred;
- (BOOL)_wantsReapplicationOfAutoLayoutWithLayoutDirtyOnEntry:(void *)a1;
- (BOOL)_willForceLayoutForBoundsChangeToNewBounds:(double)a3;
- (BOOL)accessibilityIgnoresInvertColors;
- (BOOL)accessibilityInvertFilterApplied;
- (BOOL)allowsGroupBlending;
- (BOOL)allowsGroupOpacity;
- (BOOL)autoresizesSubviews;
- (BOOL)becomeFirstResponder;
- (BOOL)canBecomeFocused;
- (BOOL)canPerformAction:(SEL)a3 withSender:(id)a4;
- (BOOL)cancelMouseTracking;
- (BOOL)cancelTouchTracking;
- (BOOL)clearsContextBeforeDrawing;
- (BOOL)clipsToBounds;
- (BOOL)containsView:(id)a3;
- (BOOL)deliversPressesForGesturesToSuperview;
- (BOOL)deliversTouchesForGesturesToSuperview;
- (BOOL)drawViewHierarchyInRect:(CGRect)a3;
- (BOOL)drawViewHierarchyInRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates;
- (BOOL)endEditing:(BOOL)force;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer;
- (BOOL)hasAmbiguousLayout;
- (BOOL)insetsLayoutMarginsFromSafeArea;
- (BOOL)isAccessibilityElementByDefault;
- (BOOL)isDescendantOfView:(UIView *)view;
- (BOOL)isElementAccessibilityExposedToInterfaceBuilder;
- (BOOL)isEnabled;
- (BOOL)isExclusiveTouch;
- (BOOL)isFirstResponder;
- (BOOL)isFocused;
- (BOOL)isHidden;
- (BOOL)isHiddenOrHasHiddenAncestor;
- (BOOL)isMultipleTouchEnabled;
- (BOOL)isOpaque;
- (BOOL)isTransparentFocusItem;
- (BOOL)isUserInteractionEnabled;
- (BOOL)layoutMarginsFollowReadableWidth;
- (BOOL)needsDisplay;
- (BOOL)needsDisplayOnBoundsChange;
- (BOOL)needsUpdateConstraints;
- (BOOL)nsis_shouldIntegralizeVariable:(id)a3;
- (BOOL)nsis_valueOfVariableIsUserObservable:(id)a3;
- (BOOL)nsli_canHostIndependentVariableAnchor;
- (BOOL)nsli_defaultResolvedValue:(double *)a3 forSymbolicConstant:(id)a4 inConstraint:(id)a5 error:(id *)a6;
- (BOOL)nsli_descriptionIncludesPointer;
- (BOOL)nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:(id)a3;
- (BOOL)nsli_isFlipped;
- (BOOL)nsli_isLegalConstraintItem;
- (BOOL)nsli_isRTL;
- (BOOL)nsli_lowerAttribute:(int)a3 intoExpression:(id)a4 withCoefficient:(double)a5 container:(id)a6;
- (BOOL)nsli_lowerAttribute:(int)a3 intoExpression:(id)a4 withCoefficient:(double)a5 forConstraint:(id)a6;
- (BOOL)nsli_lowerAttribute:(int)a3 intoExpression:(id)a4 withCoefficient:(double)a5 forConstraint:(id)a6 onBehalfOfLayoutGuide:(id)a7;
- (BOOL)nsli_removeConstraint:(id)a3;
- (BOOL)pointInside:(CGPoint)a3 forEvent:(__GSEvent *)a4;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event;
- (BOOL)preservesSuperviewLayoutMargins;
- (BOOL)scalesLargeContentImage;
- (BOOL)shouldUpdateFocusInContext:(id)a3;
- (BOOL)showsLargeContentViewer;
- (BOOL)skipsSubviewEnumeration;
- (BOOL)translatesAutoresizingMaskIntoConstraints;
- (BOOL)useBlockyMagnificationInClassic;
- (BOOL)viewTraversalMark;
- (BOOL)wantsDeepColorDrawing;
- (CACornerRadii)_intersectedSceneCornerRadii;
- (CALayer)layer;
- (CATransform3D)transform3D;
- (CGColor)_backgroundCGColor;
- (CGFloat)contentScaleFactor;
- (CGImage)newSnapshotWithRect:(CGRect)a3;
- (CGPoint)_getSourceCenter;
- (CGPoint)_nsis_origin;
- (CGPoint)convertPoint:(CGPoint)a3 fromCoordinateSpace:(id)a4;
- (CGPoint)convertPoint:(CGPoint)a3 toCoordinateSpace:(id)a4;
- (CGPoint)convertPoint:(CGPoint)point fromView:(UIView *)view;
- (CGPoint)convertPoint:(CGPoint)point toView:(UIView *)view;
- (CGRect)_accessoryViewFrame;
- (CGRect)_alignmentBounds;
- (CGRect)_alignmentFrame;
- (CGRect)_alignmentRectForBounds:(CGRect)a3;
- (CGRect)_boundsForAlignmentRect:(CGRect)a3;
- (CGRect)_clippingRectInCoordinateSpace:(id)a3;
- (CGRect)_convertViewPointToSceneSpaceForKeyboard:(CGRect)a3;
- (CGRect)_focusRegionFrame;
- (CGRect)_focusRegionFrameInCoordinateSpace:(id)a3;
- (CGRect)_frameIgnoringLayerTransform;
- (CGRect)_frameInCoordinateSpace:(id)a3 window:(id)a4;
- (CGRect)_inscribedRectInBoundingPathByInsettingRect:(CGRect)a3 onEdges:(unint64_t)a4 withOptions:(unint64_t)a5;
- (CGRect)_intelligenceVisibleBounds;
- (CGRect)_largestInscribedRectInBoundingPathWithCenter:(CGPoint)a3 aspectRatio:(double)a4;
- (CGRect)_nsis_bounds;
- (CGRect)_rectToScrollToVisibleInCellInWindow:(id)a3;
- (CGRect)_rectTuckedAgainstBoundingPathEdge:(unint64_t)a3 withSize:(double)a4 cornerRadii:(UIRectCornerRadii)a5 minimumPadding:(double)a6;
- (CGRect)_rectTuckedInBoundingPathCorner:(unint64_t)a3 withSize:(CGSize)a4 cornerRadii:(UIRectCornerRadii)a5 minimumPadding:(double)a6;
- (CGRect)_responderExternalTouchRectForWindow:(id)a3;
- (CGRect)_responderSelectionRectForWindow:(id)a3;
- (CGRect)_sourceRectForPresentationInWindow:(id)a3;
- (CGRect)_visualAltitudeSensitiveBoundsWithInfiniteEdges:(unint64_t)a3;
- (CGRect)alignmentRectForFrame:(CGRect)frame;
- (CGRect)bounds;
- (CGRect)contentStretch;
- (CGRect)convertRect:(CGRect)a3 fromCoordinateSpace:(id)a4;
- (CGRect)convertRect:(CGRect)a3 toCoordinateSpace:(id)a4;
- (CGRect)convertRect:(CGRect)rect fromView:(UIView *)view;
- (CGRect)convertRect:(CGRect)rect toView:(UIView *)view;
- (CGRect)extent;
- (CGRect)frameForAlignmentRect:(CGRect)alignmentRect;
- (CGRect)frameInView:(id)a3;
- (CGSize)_calculatedSystemLayoutSizeFittingSize:(CGSize)a3 withHorizontalFittingPriority:(float)a4 verticalFittingPriority:(float)a5 hasIntentionallyCollapsedHeight:(BOOL *)a6;
- (CGSize)_contentCompressionResistancePriorities;
- (CGSize)_contentHuggingPriorities;
- (CGSize)_intrinsicSizeWithinSize:(CGSize)a3;
- (CGSize)_layoutSizeThatFits:(CGSize)a3 fixedAxes:(unint64_t)a4;
- (CGSize)_nsis_contentSize;
- (CGSize)_systemLayoutSizeFittingSize:(CGSize)a3 withHorizontalFittingPriority:(float)a4 verticalFittingPriority:(float)a5;
- (CGSize)_systemLayoutSizeFittingSize:(CGSize)a3 withHorizontalFittingPriority:(float)a4 verticalFittingPriority:(float)a5 hasIntentionallyCollapsedHeight:(BOOL *)a6;
- (CGSize)_visualAltitudeBias;
- (CGSize)convertSize:(CGSize)a3 fromView:(id)a4;
- (CGSize)convertSize:(CGSize)a3 toView:(id)a4;
- (CGSize)intrinsicContentSize;
- (CGSize)nsli_convertSizeFromEngineSpace:(CGSize)a3;
- (CGSize)nsli_convertSizeToEngineSpace:(CGSize)a3;
- (CGSize)nsli_engineToUserScalingCoefficients;
- (CGSize)size;
- (CGSize)sizeThatFits:(CGSize)size;
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize;
- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority;
- (CGVector)_scaleFromLayerTransforms;
- (Class)_appearanceGuideClass;
- (Class)_intelligenceBaseClass;
- (NSArray)_appIntentsAnnotationsDebugDescription;
- (NSArray)_backdropMaskViews;
- (NSArray)_constraintsExceptingSubviewAutoresizingConstraints;
- (NSArray)constraints;
- (NSArray)constraintsAffectingLayoutForAxis:(UILayoutConstraintAxis)axis;
- (NSArray)gestureRecognizers;
- (NSArray)interactions;
- (NSArray)layoutGuides;
- (NSArray)motionEffects;
- (NSArray)mt_backgroundEffects;
- (NSArray)mt_contentEffects;
- (NSArray)preferredFocusEnvironments;
- (NSArray)subviews;
- (NSDirectionalEdgeInsets)directionalLayoutMargins;
- (NSDirectionalEdgeInsets)hitTestDirectionalInsets;
- (NSISEngine)_activeSizeToFitLayoutEngine;
- (NSISEngine)_layoutEngine;
- (NSLayoutDimension)heightAnchor;
- (NSLayoutDimension)widthAnchor;
- (NSLayoutXAxisAnchor)centerXAnchor;
- (NSLayoutXAxisAnchor)leadingAnchor;
- (NSLayoutXAxisAnchor)leftAnchor;
- (NSLayoutXAxisAnchor)rightAnchor;
- (NSLayoutXAxisAnchor)trailingAnchor;
- (NSLayoutYAxisAnchor)bottomAnchor;
- (NSLayoutYAxisAnchor)centerYAnchor;
- (NSLayoutYAxisAnchor)firstBaselineAnchor;
- (NSLayoutYAxisAnchor)lastBaselineAnchor;
- (NSLayoutYAxisAnchor)topAnchor;
- (NSMapTable)_lfld_constraintsAffectingVariableValueChanges;
- (NSMapTable)_stashedLayoutVariableObservations;
- (NSMutableArray)_internalConstraints;
- (NSMutableArray)_lfld_geometryChangeRecords;
- (NSMutableArray)_lfld_variableChangeRecords;
- (NSMutableArray)_mutableLayoutArrangements;
- (NSMutableArray)_mutableLayoutGuides;
- (NSMutableSet)_lfld_setNeedsLayoutCallStacks;
- (NSString)_appEntityIdentifier;
- (NSString)_appIntentIdentifier;
- (NSString)_identifier;
- (NSString)_layoutDebuggingIdentifier;
- (NSString)_lfld_currentLayoutMethodName;
- (NSString)_matchedViewIdentifier;
- (NSString)appliedContentSizeCategoryLimitsDescription;
- (NSString)debugDescription;
- (NSString)description;
- (NSString)focusGroupIdentifier;
- (NSString)largeContentTitle;
- (NSString)mt_captureGroupName;
- (NSUUID)_effectContainerLookupID;
- (UIAccessibilityHUDItem)accessibilityHUDRepresentation;
- (UIColor)_overrideTintColor;
- (UIContentSizeCategory)maximumContentSizeCategory;
- (UIContentSizeCategory)minimumContentSizeCategory;
- (UIDropInteraction)_dynamicDropInteraction;
- (UIEdgeInsets)_concreteDefaultLayoutMargins;
- (UIEdgeInsets)_cropInsets;
- (UIEdgeInsets)_focusableContentMargins;
- (UIEdgeInsets)_inferredLayoutMargins;
- (UIEdgeInsets)_minimumSafeAreaInsets;
- (UIEdgeInsets)_morphInsets;
- (UIEdgeInsets)_rawLayoutMargins;
- (UIEdgeInsets)_safeAreaInsetsForFrame:(CGRect)a3 inSuperview:(id)a4;
- (UIEdgeInsets)_safeAreaInsetsInSuperview:(id)a3;
- (UIEdgeInsets)alignmentRectInsets;
- (UIEdgeInsets)hitTestInsets;
- (UIEdgeInsets)largeContentImageInsets;
- (UIEdgeInsets)safeAreaInsets;
- (UIFocusEffect)focusEffect;
- (UIFocusEnvironment)parentFocusEnvironment;
- (UIFocusGroupPriority)focusGroupPriority;
- (UIFocusSystem)_focusSystem;
- (UIHoverStyle)hoverStyle;
- (UIImage)largeContentImage;
- (UIKBRenderConfig)_inheritedRenderConfig;
- (UIKeyboardLayoutGuide)keyboardLayoutGuide;
- (UIKeyboardSceneDelegate)keyboardSceneDelegate;
- (UILayoutGuide)layoutMarginsGuide;
- (UILayoutGuide)readableContentGuide;
- (UILayoutGuide)safeAreaLayoutGuide;
- (UILayoutPriority)contentCompressionResistancePriorityForAxis:(UILayoutConstraintAxis)axis;
- (UILayoutPriority)contentHuggingPriorityForAxis:(UILayoutConstraintAxis)axis;
- (UIPresentationController)_presentationControllerToNotifyOnLayoutSubviews;
- (UIResolvedShape)_resolvedOutlineShape;
- (UISemanticContentAttribute)semanticContentAttribute;
- (UIShape)_outlineShape;
- (UIStoryboardPreviewingSegueTemplateStorage)_previewingSegueTemplateStorage;
- (UITraitCollection)_lastNotifiedTraitCollection;
- (UITraitCollection)_localOverrideTraitCollection;
- (UITraitCollection)traitCollection;
- (UIUserInterfaceLayoutDirection)effectiveUserInterfaceLayoutDirection;
- (UIUserInterfaceStyle)overrideUserInterfaceStyle;
- (UIView)_backdropMaskViewForColorTint;
- (UIView)_backdropMaskViewForFilters;
- (UIView)_backdropMaskViewForGrayscaleTint;
- (UIView)_maskView;
- (UIView)_overrideReparentingContainer;
- (UIView)_proxyView;
- (UIView)_sourceViewIfPortal;
- (UIView)hitTest:(CGPoint)point withEvent:(UIEvent *)event;
- (UIView)init;
- (UIView)initWithCoder:(NSCoder *)coder;
- (UIView)initWithFrame:(CGRect)frame;
- (UIView)initWithSize:(CGSize)a3;
- (UIView)preferredFocusedView;
- (UIView)resizableSnapshotViewFromRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates withCapInsets:(UIEdgeInsets)capInsets;
- (UIView)snapshotViewAfterScreenUpdates:(BOOL)afterUpdates;
- (UIView)superview;
- (UIView)viewForBaselineLayout;
- (UIView)viewForLastBaselineLayout;
- (UIView)viewWithTag:(NSInteger)tag;
- (UIViewAutoresizing)autoresizingMask;
- (UIViewContentMode)contentMode;
- (UIViewTintAdjustmentMode)tintAdjustmentMode;
- (UIVisualEffect)mt_visualEffect;
- (UIWindow)window;
- (UIWritingToolsCoordinator)_writingToolsCoordinator;
- _traitOverridesIfExist;
- (_UIBoundingPath)_boundingPath;
- (_UIFocusPlatformBehavior)_focusBehavior;
- (_UIFocusSystemSceneComponent)_focusSystemSceneComponent;
- (_UIGestureRecognizerContainer)_parentGestureRecognizerContainer;
- (_UITouchForceObservable)_touchForceObservable;
- (_UIViewInternalDraggingSourceDelegate)_draggingSourceDelegate;
- (_UIViewLayoutEngineRelativeAlignmentRectOriginCache)_alignmentRectOriginCache;
- (_UIViewLayoutEngineRelativeAlignmentRectOriginCache)_alignmentRectOriginCacheCreateIfNecessary:(void *)a1;
- (_WORD)_effectiveThemeTraitCollectionDidChangeInternal:(_WORD *)result;
- (__IOSurface)_createRenderingBufferFromRect:(double)a3 padding:(double)a4 gamut:(double)a5;
- (double)_applyDirectionalRelativePosition:(double)a3 toRect:(double)a4;
- (double)_autolayoutSpacingAtEdge:(int)a3 forAttribute:(int64_t)a4 inContainer:(id)a5 isGuide:(BOOL)a6;
- (double)_autolayoutSpacingAtEdge:(int)a3 forAttribute:(int64_t)a4 nextToNeighbor:(id)a5 edge:(int)a6 attribute:(int64_t)a7 multiplier:(double)a8;
- (double)_backing_alpha;
- (double)_backing_anchorPoint;
- (double)_backing_frame;
- (double)_backing_position;
- (double)_backing_transform;
- (double)_backing_transform3D;
- (double)_baselineOffsetFromBottom;
- (double)_baselineOffsetFromNearestEdgeForLayoutAttribute:(int64_t)a3;
- (double)_calculatedIntrinsicHeight;
- (double)_center3D;
- (double)_constrainRectWithinSceneBounds:(double)a3 additionalInsets:(double)a4;
- (double)_contentMargin;
- (double)_continuousCornerRadius;
- (double)_convertOffset:(double)a3 fromView:(double)a4;
- (double)_convertRect:(double)a3 toViewInSameWindow:(double)a4;
- (double)_convertVisualAltitude:(double)a3 fromView:(id)a4;
- (double)_convertVisualAltitude:(double)a3 toView:(id)a4;
- (double)_cornerRadius;
- (double)_currentScreenScale;
- (double)_defaultAutolayoutSpacing;
- (double)_directionalReadableContentInsets;
- (double)_findAutolayoutHeightConstraint;
- (double)_firstBaselineOffsetFromTop;
- (double)_intermediateLayerMaskFrameOrigin;
- (double)_multilineContextWidth;
- (double)_nsis_compatibleBoundsInEngine:(void *)a1;
- (double)_nsis_layoutRectFromHostingViewInEngine:(void *)a1;
- (double)_nsis_layoutSizeInEngine:(void *)a1;
- (double)_paddingForBaselineSpacingFromEdge:(int)a3 toNeighborEdge:(int)a4;
- (double)_preferredDurationForFocusAnimation:(int64_t)a3 inContext:(id)a4;
- (double)_preferredDurationScaleFactorForFocusAnimation:(int64_t)a3 inContext:(id)a4;
- (double)_preferredLayoutEngineToUserScalingCoefficients;
- (double)_preferredMaxLayoutWidth;
- (double)_proportionalFillLengthForOrderedArrangement:(id)a3 relevantParentAxis:(int64_t)a4;
- (double)_resolvedInferredLayoutMargins;
- (double)_safeAreaInsetsForFrame:(char)a3 inSuperview:(CGFloat)a4 ignoreViewController:(CGFloat)a5;
- (double)_setSafeAreaInsets:(double)a3 updateSubviewsDuringNextLayoutPass:(double)a4;
- (double)_systemSpacingBelowView:(id)a3 multiplier:(double)a4;
- (double)_systemSpacingBelowView:(id)a3 systemSpacingInvalidationRecorder:(id *)a4;
- (double)_textButtonMargin;
- (double)_touchSloppinessFactor;
- (double)_uimorphingView_getInitialAlpha;
- (double)_visualAltitude;
- (double)_widthForButtonBarItemLayout;
- (double)nsli_marginOffsetForAttribute:(int64_t)a3;
- (float)_priorityForEngineHostConstraints;
- (id)__swiftAnimationInfo;
- (id)__swift_projectedTargetForKey:(id)a3 decelerationFactor:(double)a4;
- (id)__swift_velocityForKey:(id)a3 target:(BOOL)a4;
- (id)__tintColor;
- (id)__undimmedTintColor;
- (id)__viewDelegate;
- (id)_accessibilityDragInteractionsForAddingItems;
- (id)_accessibilityHigherContrastTintColorForColor:(id)a3;
- (id)_actingParentViewForGestureRecognizers;
- (id)_alignmentDebuggingOverlayCreateIfNecessary:(BOOL)a3;
- (id)_allSubviews;
- (id)_ancestorCollectionReusableView;
- (id)_ancestorTintColor;
- (id)_anyBackdropMaskView;
- (id)_appearanceContainer;
- (id)_appendSnapshotDisplaySystemIdentifierToOptionsIfNeeded:(void *)a1;
- (id)_autolayoutTrace;
- (id)_autolayoutTraceAtLevel:(int64_t)a3 recursively:(BOOL)a4;
- (id)_autolayoutTraceRecursively:(BOOL)a3;
- (id)_backdropGroups;
- (id)_backdropMaskViewForColorBurnTint;
- (id)_backdropMaskViewForDarkeningTint;
- (id)_backdropMaskViewForFlag:(int64_t)a3;
- (id)_backgroundColor;
- (id)_backing_clientLayer;
- (id)_backing_sublayers;
- (id)_basicAnimationWithKeyPath:(id)a3;
- (id)_boundsHeightVariable;
- (id)_boundsWidthVariable;
- (id)_centerExpressionInContainer:(id)a3 vertical:(BOOL)a4 contentInsetScale:(double)a5 engine:(id)a6;
- (id)_childFocusRegionsInRect:(CGRect)a3 inCoordinateSpace:(id)a4;
- (id)_childFocusViews;
- (id)_clippedViewHierarchyDescription;
- (id)_colorViewBoundsOverlayCreateIfNecessary:(BOOL)a3;
- (id)_conciseDescription;
- (id)_conciseParentDescription;
- (id)_constraintsArray;
- (id)_constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:(BOOL)a3;
- (id)_constraintsValidityDescription;
- (id)_containerForContentSizeConstraints;
- (id)_containingScrollView;
- (id)_contentHeightVariable;
- (id)_contentSizeCategoryLimitedTraitCollection:(void *)a1;
- (id)_contentSizeNotificationToken;
- (id)_contentWidthVariable;
- (id)_contentXOffsetVariable;
- (id)_contentYOffsetVariable;
- (id)_cornerCurve;
- (id)_createIfNeededAnchorForAssocObjectKey:(objc_class *)a3 class:(uint64_t)a4 withAttribute:;
- (id)_currentFocusAnimationCoordinator;
- (id)_debuggableDescriptionForConstraintsAffectingAxis:(int64_t)a3;
- (id)_debuggableDescriptionForConstraintsAffectingHorizontalAxis;
- (id)_debuggableDescriptionForConstraintsAffectingVerticalAxis;
- (id)_deepestViewForBaselineLayoutUsingFirstBaseline:(id)a1;
- (id)_defaultFocusEffect;
- (id)_defaultLayoutDescription;
- (id)_deferredAnimationForKey:(id)a3;
- (id)_deferredAnimationForKey:(id)a3 ignoringKeyFrames:(BOOL)a4;
- (id)_descendantWithAmbiguousLayout;
- (id)_descriptionForLayoutTrace;
- (id)_dimensionExpressionInContainer:(id)a3 vertical:(BOOL)a4 useContentVariables:(BOOL)a5 engine:(id)a6;
- (id)_disabledColor;
- (id)_dummyFittingSizeInfo;
- (id)_edgeExpressionInContainer:(id)a3 vertical:(BOOL)a4 max:(BOOL)a5 contentInsetScale:(double)a6 engine:(id)a7;
- (id)_effectHost;
- (id)_effectiveBoundingPathAndBoundingPathView:(id *)a3;
- (id)_enclosingInterfaceActionGroupView;
- (id)_enclosingInterfaceActionRepresentationView;
- (id)_enclosingScrollableScrollerIncludingSelf;
- (id)_enclosingScrollerIncludingSelf;
- (id)_engineHostingWidthConstraint;
- (id)_extraInfoForTraitTrace;
- (id)_findInteractionIfExists;
- (id)_firstAncestorInteractionConformingToProtocol:(id)a3;
- (id)_firstCommonAncestorToView:(id)a3 givenCommonAncestor:(id)a4;
- (id)_firstResponder;
- (id)_focusFallbackScroller;
- (id)_focusGesturesForFailureRequirements;
- (id)_generateBackdropMaskImage;
- (id)_generateBackdropMaskViewForFlag:(int64_t)a3;
- (id)_gestureRecognizers;
- (id)_getGhostPortal;
- (id)_hierarchyRepresentation;
- (id)_hitTest:(CGPoint)a3 withEvent:(id)a4 windowServerHitTestWindow:(id)a5;
- (id)_hitTestWithContext:(id)a3;
- (id)_hoverStyleStorage;
- (id)_idleModeLayoutAttributes;
- (id)_imageFromRect:(CGRect)a3;
- (id)_imageFromRect:(CGRect)a3 gamut:(int64_t)a4;
- (id)_initWithLayer:(id)a3;
- (id)_initialValueForKey:(id)a3;
- (id)_initialValueForLayer:(id)a3 keyPath:(id)a4 usePresentationValue:(BOOL)a5;
- (id)_internalAppIntentsIntelligenceProvider;
- (id)_internalTraitOverrides;
- (id)_kb_description;
- (id)_largeContentStoredProperties;
- (id)_largeContentStoredPropertiesCreatingIfNecessary:(BOOL)a3;
- (id)_largeContentViewerGestureManager;
- (id)_largeContentViewerItemAtPoint:(CGPoint)a3;
- (id)_layer;
- (id)_layoutDebuggingTitle;
- (id)_layoutDescriptionIfDifferentFromDefault;
- (id)_layoutEngineCreateIfNecessary;
- (id)_layoutEngineHostConstraints;
- (id)_layoutHashesStackCreateIfNeeded:(void *)a1;
- (id)_layoutMarginsGuideIfExists;
- (id)_layoutRect;
- (id)_layoutVariablesWithAmbiguousValue;
- (id)_lfld_description;
- (id)_lfld_minimalDescription;
- (id)_limitedContentSizeCategoryWithBaseValue:(void *)a1;
- (id)_lowerExpressionOneLevelWithCurrentXExpression:(id)a3 YExpression:(id)a4 vertical:(BOOL)a5 container:(id)a6 engine:(id)a7;
- (id)_minXVariable;
- (id)_minYVariable;
- (id)_multiLayerDelegatesTableCreateIfNecessary:(char *)object;
- (id)_mutableLayoutArrangementsCreateIfNecessary;
- (id)_mutableLayoutGuidesCreateIfNecessary;
- (id)_nearestViewController;
- (id)_nextKeyResponder;
- (id)_nilBackgroundColor;
- (id)_normalInheritedTintColor;
- (id)_outlinePath;
- (id)_parentDescription;
- (id)_parentTraitEnvironment;
- (id)_preferredConfigurationForFocusAnimation:(int64_t)a3 inContext:(id)a4;
- (id)_preferredHoverEffect;
- (id)_preferredHoverShape;
- (id)_previousFittingSizeInfo;
- (id)_previousKeyResponder;
- (id)_recursiveConstraintsTraceAtLevel:(int64_t)a3;
- (id)_recursiveLayoutEngineDescription;
- (id)_registerForTraitTokenChanges:(id)a3 withHandler:(id)a4;
- (id)_registerForTraitTokenChanges:(id)a3 withTarget:(id)a4 action:(SEL)a5;
- (id)_representationOfHierarchyForXcode;
- (id)_rootForKeyResponderCycle;
- (id)_rootInputWindowController;
- (id)_rootView;
- (id)_safeAreaLayoutGuideIfExists;
- (id)_safeMaskView;
- (id)_screen;
- (id)_scriptingInfo;
- (id)_scrollViewWantingUpdateInConstraint:(id)a3;
- (id)_scroller;
- (id)_shapeInCoordinateSpace:(id)a3;
- (id)_subviewAtIndex:(void *)a1;
- (id)_targetVelocityForKey:(id)a3;
- (id)_textServicesResponderProxy;
- (id)_tintColorArchivingKey;
- (id)_traitTrace;
- (id)_traitTrace:(id)a3;
- (id)_ui_observationTrackingDictionary;
- (id)_uili_existingBaseFrameVariables;
- (id)_uili_observableLayoutEngineForBaseFrameVariables:(BOOL)a3;
- (id)_uis_outline;
- (id)_userActionDescription:(unsigned int)a3 maxLevel:;
- (id)_variantOfColor:(const void *)a3 forKey:(void *)a4 withCreationBlock:;
- (id)_velocityForKey:(id)a3;
- (id)_velocityForKey:(uint64_t)a3 target:;
- (id)_viewControllerForAncestor;
- (id)_viewForBaselineLayout;
- (id)_viewForLoweringBaselineLayoutAttribute:(int)a3;
- (id)_viewIndexPath;
- (id)_viewsJostledDuringUpdateConstraintsPass;
- (id)_viewsJostledDuringUpdateConstraintsPassSuppressingDebugAssertion:(BOOL)a3;
- (id)_visualRecursiveDescription;
- (id)actionForLayer:(id)a3 forKey:(id)a4;
- (id)constraintsAffectingLayoutForAxis:(int64_t)a3 ofItem:(id)a4;
- (id)engine:(id)a3 markerForConstraintToBreakAmongConstraints:(id)a4;
- (id)focusGuides;
- (id)focusItemsInRect:(CGRect)a3;
- (id)hitTest:(CGPoint)a3 forEvent:(__GSEvent *)a4;
- (id)nextResponder;
- (id)nsis_descriptionOfVariable:(id)a3;
- (id)nsli_boundsHeightVariable;
- (id)nsli_boundsWidthVariable;
- (id)nsli_constraintWithAnchor:(id)a3 relatedBy:(int64_t)a4 toAnchor:(id)a5 withSystemSpacingMultipliedBy:(double)a6;
- (id)nsli_contentHeightVariable;
- (id)nsli_contentWidthVariable;
- (id)nsli_contentXOffsetVariable;
- (id)nsli_contentYOffsetVariable;
- (id)nsli_description;
- (id)nsli_layoutAnchorForAttribute:(int64_t)a3;
- (id)nsli_minXVariable;
- (id)nsli_minYVariable;
- (id)recursiveDescription;
- (id)registerForTraitChanges:(id)a3 withAction:(SEL)a4;
- (id)registerForTraitChanges:(id)a3 withHandler:(id)a4;
- (id)registerForTraitChanges:(id)a3 withTarget:(id)a4 action:(SEL)a5;
- (id)resizableSnapshotFromRect:(CGRect)a3 withCapInsets:(UIEdgeInsets)a4;
- (id)resizableSnapshotViewFromRect:(CGRect)a3 withCapInsets:(UIEdgeInsets)a4;
- (id)scriptingInfoWithChildren;
- (id)snapshotView;
- (id)traitOverrides;
- (int)_style;
- (int)nsis_orientationHintForVariable:(id)a3;
- (int)textEffectsVisibilityLevel;
- (int64_t)_backdropMaskViewFlags;
- (int64_t)_backgroundMergeBehavior;
- (int64_t)_compareGestureRecognizerContainer:(id)a3;
- (int64_t)_currentUserInterfaceIdiom;
- (int64_t)_defaultTintAdjustmentMode;
- (int64_t)_disableLayoutFlushingCount;
- (int64_t)_focusTouchSensitivityStyle;
- (int64_t)_hiddenManagedByLayoutArrangementCount;
- (int64_t)_keyboardOrientation;
- (int64_t)_lfld_count;
- (int64_t)_overrideUserInterfaceRenderingMode;
- (int64_t)_overrideVibrancyTrait;
- (int64_t)_pendingHiddenCount;
- (int64_t)_sceneDraggingBehaviorOnPan;
- (int64_t)_systemDefaultFocusGroupPriority;
- (int64_t)_topToBottomLeftToRightViewCompare:(id)a3;
- (int64_t)_userInterfaceIdiom;
- (int64_t)compareTextEffectsOrdering:(id)a3;
- (int64_t)compositingMode;
- (int64_t)focusItemDeferralMode;
- (uint64_t)_areAccessibilityButtonShapesEnabled;
- (uint64_t)_autoresizingConstraints;
- (uint64_t)_backing__didMoveFromWindow:(uint64_t)a3 toWindow:;
- (uint64_t)_backing__generateDeferredAnimations:(uint64_t)result;
- (uint64_t)_backing__shouldAnimatePropertyWithKey:(uint64_t)result;
- (uint64_t)_backing_didMoveToSuperView;
- (uint64_t)_backing_isHidden;
- (uint64_t)_bitFlagValueAfterIncrementingHiddenManagementCountForKey:(uint64_t)a3 withIncrement:(int)a4 bitFlagValue:;
- (uint64_t)_constraints_frameDidChange;
- (uint64_t)_containerStyle;
- (uint64_t)_containsPreferredFocusableView;
- (uint64_t)_currentContentSizeHeightConstraint;
- (uint64_t)_hasDeferredAnimationForKey:(uint64_t)a1;
- (uint64_t)_hasOpaqueBackground;
- (uint64_t)_hiddenManagementCountForKey:(int)a3 bitFlagValue:;
- (uint64_t)_informSuperviewChainThatDescendantNeedsDoubleUpdateConstraintsPass;
- (uint64_t)_invalidateAutoresizingConstraints;
- (uint64_t)_invalidateEngineHostConstraints;
- (uint64_t)_isDeallocInitiated;
- (uint64_t)_isInVisibleHierarchy;
- (uint64_t)_isViewHierarchyPreparedForConstraint:(uint64_t)result;
- (uint64_t)_layoutEngine_didAddLayoutConstraint:(uint64_t)a3 roundingAdjustment:(double)a4 mutuallyExclusiveConstraints:;
- (uint64_t)_layoutHash;
- (uint64_t)_needsDoubleUpdateConstraintsPassMayHaveChangedFrom:(uint64_t)result;
- (uint64_t)_removeAllGestureRecognizers;
- (uint64_t)_subviewsNeedAxisFlipping;
- (uint64_t)_tryToAddConstraint:(uint64_t)a3 roundingAdjustment:(double)a4 mutuallyExclusiveConstraints:;
- (uint64_t)_usesAutoresizingConstraints;
- (uint64_t)_usesLayoutEngineHostingConstraints;
- (uint64_t)_viewOrderRelativeToView:(int)a3 requireIntersection:;
- (uint64_t)_wantsAutolayoutOrIsGuardingForEngineHosting;
- (unint64_t)_accessibilityInterfaceStyleIntent;
- (unint64_t)_accessibilityResolvedInterfaceStyle;
- (unint64_t)_axesForDerivingIntrinsicContentSizeFromLayoutSize;
- (unint64_t)_clipCorners;
- (unint64_t)_clipCornersOfView:(id)a3;
- (unint64_t)_countOfFocusedAncestorTrackingViewsInSubtree;
- (unint64_t)_countOfMotionEffectsInSubtree;
- (unint64_t)_edgesPropagatingSafeAreaInsetsToSubviews;
- (unint64_t)_focusGuideBehaviorForFocusMovement:(id)a3;
- (unint64_t)_focusSpeedBumpEdges;
- (unint64_t)edgesInsettingLayoutMarginsFromSafeArea;
- (unint64_t)edgesPreservingSuperviewLayoutMargins;
- (unsigned)_secureName;
- (void)__accessibilityUndimmedTintColorHighContrastVariantStorageKey;
- (void)__setViewDelegate:(void *)a1;
- (void)__swift_animatePropertyWithKey:(id)a3 currentValue:(double)a4 targetValue:(double)a5 newValueCallback:(id)a6;
- (void)__swift_removeAllRetargetableAnimations:(BOOL)a3;
- (void)__swift_removeAllRetargetableAnimationsIfDetatchedFromContext;
- (void)__swift_replaceInProcessAnimationForKey:(id)a3 behavior:(id)a4 interactive:(BOOL)a5;
- (void)__swift_setPresentationValue:(id)a3 velocity:(id)a4 preferredFrameRateRangeMaximum:(int64_t)a5 immediate:(BOOL)a6 key:(id)a7;
- (void)__swift_setVelocity:(id)a3 key:(id)a4 target:(BOOL)a5;
- (void)__swift_stopSettingPresentationValueForKey:(id)a3;
- (void)__vis_layoutSublayersOfLayer:(id)a3;
- (void)_accessibilityBeginDragAtPoint3D:(CAPoint3D)a3 endpoint:(id)a4 completion:(id)a5;
- (void)_accessibilityBeginDragAtPoint:(CGPoint)a3 endpoint:(id)a4 completion:(id)a5;
- (void)_accessibilitySetInterfaceStyleIntent:(unint64_t)a3;
- (void)_accessibilitySetResolvedInterfaceStyle:(unint64_t)a3;
- (void)_accumulateViewConstraintsIntoArray:(id)a3;
- (void)_addBoundingPathChangeObserver:(id)a3;
- (void)_addBoundingPathRotationNotificationsForWindow:(void *)a1;
- (void)_addBoundsMatchingConstraintsForView:(id)a3;
- (void)_addCenterExpressionToExpression:(id)a3 isVertical:(BOOL)a4;
- (void)_addConstraintPendingAnimatedChanges:(id)a3;
- (void)_addGeometryChangeObserver:(void *)a1;
- (void)_addGestureRecognizer:(int)a3 atEnd:;
- (void)_addLayoutArrangement:(_DWORD *)a1;
- (void)_addSubview:(id)a3 positioned:(int64_t)a4 relativeTo:(id)a5;
- (void)_animatePropertyWithKey:(id)a3 currentValue:(id)a4 targetValue:(id)a5 newValueCallback:(id)a6;
- (void)_applyAppearanceInvocations;
- (void)_applyISEngineLayoutValuesToBoundsOnly:(BOOL)a3;
- (void)_applyPendingTraitStorageConstraints;
- (void)_applyResolvedShape:(id)a3;
- (void)_applyShape:(id)a3;
- (void)_applyTraitStorageConstraintsByRemoving:(void *)a3 adding:;
- (void)_autoresizingConstraints_frameDidChange;
- (void)_backing__initialValueForKey:(void *)a1;
- (void)_backing_addPrivateSubview:(uint64_t)a3 positioned:(uint64_t)a4 relativeTo:;
- (void)_backing_addSubview:(uint64_t)a1;
- (void)_backing_insertSubview:(uint64_t)a3 atIndex:;
- (void)_backing_insertSubview:(void *)a3 aboveSubview:;
- (void)_backing_insertSubview:(void *)a3 belowSubview:;
- (void)_backing_invalidateSubviewCache;
- (void)_backing_layers;
- (void)_backing_outermostLayer;
- (void)_backing_removeFromSuperview;
- (void)_backing_removePrivateSubview:(uint64_t)a1;
- (void)_backing_setAlpha:(uint64_t)a1;
- (void)_backing_setAnchorPoint:(double)a3;
- (void)_backing_setBounds:(double)a3;
- (void)_backing_setFrame:(double)y;
- (void)_backing_setHidden:(uint64_t)a1;
- (void)_backing_setPosition:(double)a3;
- (void)_backing_setTransform3D:(uint64_t)a1;
- (void)_backing_setTransform:(uint64_t)a1;
- (void)_backing_traitCollectionDidChange:(void *)result;
- (void)_backing_unwrapIfPossible;
- (void)_backing_unwrapLayer;
- (void)_backing_willChangeValueForKeyPath:(uint64_t)a1;
- (void)_backing_wrapLayerInIntermediate;
- (void)_baselineViewForConstraint:(int)a3 forFirstItem:(void *)a4 withOffset:;
- (void)_beginOcclusion:(id)a3;
- (void)_bringAncestorControlledCollectionSubviewToFrontAmongCoplanarPeers;
- (void)_calculateSubviewAlignmentFrame:(CGRect *)a3 superviewAlignmentBounds:(CGRect *)a4 forAutoresizingMask:(unint64_t)a5 preservingNonzeroSuperviewAlignmentBoundsOriginForCompatibility:(BOOL)a6;
- (void)_clearAnimationFilters;
- (void)_clearBecomeFirstResponderWhenCapable;
- (void)_clearBecomeFirstResponderWhenCapableOnSubtree;
- (void)_clearConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspended;
- (void)_clearLayoutVariableObservationsOnlyToSupportTAMICChange:(BOOL)a3;
- (void)_clearSafeAreaInsets;
- (void)_collectExistingTraitCollectionsForTraitTracking:(id)a3;
- (void)_collectKeyViews:(id)a3;
- (void)_collectKeyViews:(id)a3 visibilityTest:(id)a4 passingTest:(id)a5;
- (void)_collectKeyViews:(id)a3 visibilityTest:(id)a4 passingTest:(id)a5 subviewsTest:(id)a6;
- (void)_configureAutolayoutFlagsNeedingLayout:(BOOL)a3;
- (void)_constantsForHorizontalAutoresizingConstraints:(double *)a3 :(double *)a4;
- (void)_constantsForVerticalAutoresizingConstraints:(double *)a3 :(double *)a4;
- (void)_constrainKeyboardGuideToWindowGuideIfNeeded:(uint64_t)a1;
- (void)_constrainViewToSuperview;
- (void)_constraintsEquivalentToAutoresizingMask;
- (void)_constraints_subviewWillChangeSuperview:(id)a3;
- (void)_contentSizeConstraints;
- (void)_convertToAutolayoutSizingIfNecessary;
- (void)_createIOSurfaceWithPadding:(UIEdgeInsets)a3;
- (void)_createJostledViewsIfNecessary;
- (void)_decodeLargeContentViewerPropertiesWithCoder:(id)a3;
- (void)_decrementHiddenManagedByLayoutArrangementCount;
- (void)_delegateOutermostLayerDidChange;
- (void)_detectAndHandleClippedView;
- (void)_diagnoseFocusInteractionEligibilityForReport:(id)a3;
- (void)_diagnoseFocusInteractionEligibilityForReport:(int)a3 checkAncestors:;
- (void)_didChangeFromIdiom:(int64_t)a3 onScreen:(id)a4 traverseHierarchy:(BOOL)a5;
- (void)_didChangeFromIdiomOnScreen:(uint64_t)a3 traverseHierarchy:;
- (void)_didChangeKeyplaneWithContext:(id)a3;
- (void)_didChangeTransformFromPreviousTransform:(uint64_t)a1;
- (void)_didMoveFromWindow:(id)a3 toWindow:(id)a4;
- (void)_didStopBeingDisplayedInPointerContentEffect;
- (void)_didUpdateFocusInContext:(id)a3;
- (void)_disableLayoutFlushing;
- (void)_discardLayoutEngine:(id)a3;
- (void)_dispatchMotionEffectsVisitorWithDelta:(void *)a1;
- (void)_dispatchTintColorVisitorWithReasons:(void *)a1;
- (void)_drawRectWithObservationTracking:(CGRect)a3;
- (void)_dumpClippedViewWithScreenshotIfNecessary;
- (void)_eagerlyUpdateSafeAreaInsetsToDescendant:(id)a1;
- (void)_effectiveAutoresizingMask;
- (void)_enableLayoutFlushing;
- (void)_encodeBackgroundColorWithCoder:(id)a3;
- (void)_encodeFrameWithCoder:(id)a3;
- (void)_encodeLargeContentViewerPropertiesWithCoder:(id)a3;
- (void)_endOcclusion:(id)a3;
- (void)_engineHostConstraints_frameDidChange;
- (void)_ensureViewsAreInstalledInRelativeOrder:(id *)a3 viewCount:(int64_t)a4 insertionStartIndex:(int64_t)a5;
- (void)_enumerateDescendentViews:(id)a3;
- (void)_evaluateScreenPropertiesForOldScreen:(void *)a3 newScreen:;
- (void)_faultInGuidesForConstraint:(id)a3;
- (void)_findFirstSubviewWantingToBecomeFirstResponder;
- (void)_finishDecodingLayoutGuideConnections:(id *)a1;
- (void)_finishTemporaryInternalConstraints:(void *)a3 withEngine:;
- (void)_finishTrackingForAnimationRestoration;
- (void)_flushConstraintsPendingAnimatedChanges;
- (void)_gatherKeyResponders:(id)a3 indexOfSelf:(unint64_t *)a4 visibilityTest:(id)a5 passingTest:(id)a6 subviewsTest:(id)a7;
- (void)_generateContentSizeConstraints;
- (void)_generateDeferredAnimations:(id)a3;
- (void)_handleDoubleUpdateConstraintsIfNecessary;
- (void)_handleLayoutArrangementConstraintsIfNecessary;
- (void)_handleLayoutEngineHostingConstraintsIfNecessary;
- (void)_handleSizeConstraintsAsAppropriate;
- (void)_handleTraitChangeForHierarchyChangeWithBehavior:(uint64_t)a1;
- (void)_hasSpringLoadedInteractions;
- (void)_hasTransparentBackground;
- (void)_incrementHiddenManagedByLayoutArrangementCount;
- (void)_informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:(BOOL)a3;
- (void)_initializeHostedLayoutEngine;
- (void)_initializeLayoutEngine;
- (void)_insertPrivateSubview:(id)a3 aboveLayer:(id)a4;
- (void)_insertPrivateSubview:(id)a3 belowLayer:(id)a4;
- (void)_intelligenceCollectContentIn:(CGRect)a3 collector:(id)a4;
- (void)_intelligenceCollectElementFor:(id)a3 in:(CGRect)a4 using:(id)a5 transformToRoot:(id)a6;
- (void)_intelligenceCollectRemoteContentIn:(CGRect)a3 remoteContextWrapper:(id)a4;
- (void)_intelligenceCollectSubelementsIn:(CGRect)a3 using:(id)a4 transformToRoot:(id)a5;
- (void)_invalidateAppearance;
- (void)_invalidateAppearanceForSubviewsOfClass:(Class)a3;
- (void)_invalidateAppearanceForTraitCollection:(id)a3;
- (void)_invalidateAppearanceIfNeeded;
- (void)_invalidateBaselineConstraints;
- (void)_invalidateCalculatedSafeAreas;
- (void)_invalidateIntrinsicContentSizeNeedingLayout:(BOOL)a3;
- (void)_invalidateLayoutEngineHostConstraints;
- (void)_invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel;
- (void)_invalidateTraitCollectionAndSchedulePropagationForSubviews;
- (void)_invalidateTraitCollectionAsRoot;
- (void)_isInHierarchyAllowingMotionEffects;
- (void)_is_layout;
- (void)_is_setNeedsLayout;
- (void)_layoutConstraintCleanup;
- (void)_layoutEngine_willRemoveLayoutConstraint:(void *)result;
- (void)_layoutEngine_windowDidChange;
- (void)_layoutMarginsDidChangeFromOldMargins:(UIEdgeInsets)a3;
- (void)_layoutSubviewsWithObservationTracking;
- (void)_lfld_addConstraintsAffectingVariableValueChange:(id)a3;
- (void)_lfld_addGeometryChangeRecordWithPropertyName:(id)a3 value:(id)a4;
- (void)_lfld_addSetNeedsLayoutCallStack:(id)a3;
- (void)_lfld_addVariableChangeRecordForVariable:(id)a3 inLayoutEngine:(id)a4;
- (void)_lfld_discardLastCurrentLayoutMethodName;
- (void)_lfld_incrementCount;
- (void)_lfld_prepareToResetCountIfNecessary;
- (void)_lfld_pushCurrentLayoutMethodName:(id)a3;
- (void)_lfld_resetCount;
- (void)_makeSubtreePerformSelector:(SEL)a3 withObject:(id)a4;
- (void)_makeSubtreePerformSelector:(SEL)a3 withObject:(id)a4 withObject:(id)a5 copySublayers:(BOOL)a6;
- (void)_makeTemporaryInternalConstraintsWithEngine:(id)a3 ignoreAutoresizingMaskConstraints:(BOOL)a4 returningConstraintsForViewsNeedingSecondPass:(id *)a5 currentTargetWidth:(double)a6;
- (void)_measureViewWithSize:(CGSize)a3 temporaryConstraints:(id)a4 suspendingSystemConstraints:(BOOL)a5 withOptimizedEngineBlock:(id)a6;
- (void)_mergeConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedToAncestor:(id)a3;
- (void)_mt_setCaptureGroupName:(uint64_t *)a1;
- (void)_noteTraitsDidChangeRecursively;
- (void)_notifyArrangementsOfChangeInItem:(uint64_t)a3 withSelector:;
- (void)_notifyBoundingPathChangeObserversWithChangeInfo:(uint64_t)a3 forAncestor:;
- (void)_notifyGeometryObserversWithChangeInfo:(uint64_t)a1;
- (void)_notifyReferenceViewSizeChange;
- (void)_nsis_center:(double *)a3 bounds:(void *)a4 inEngine:(void *)a5 forLayoutGuide:;
- (void)_nsis_origin:(CGPoint *)a3 bounds:(CGRect *)a4 inEngine:(id)a5;
- (void)_objc_initiateDealloc;
- (void)_observeScrollViewDidScroll:(id)a3;
- (void)_oldEngineHostConstraints_frameDidChange;
- (void)_oldUpdateLayoutEngineHostConstraints;
- (void)_outermostLayoutEngineDelegateView;
- (void)_parameterCheckForSystemSpacingBelowView:(void *)a3 getTopBaselineView:(void *)a4 bottomBaselineView:;
- (void)_parentalLayoutEngineDidChangeTo:(id)a3;
- (void)_performChangesDeferringAutoresizingMaskConstraintsUpdate:(void *)a1;
- (void)_performSelectorTrackingTraitUsage:(SEL)a3 withInvalidationSelector:(SEL)a4;
- (void)_performUpdatesForPossibleChangesOfIdiom:(id)a3 orScreen:(char)a4 traverseHierarchy:;
- (void)_popDisableLayoutFlushing;
- (void)_populateArchivedSubviews:(id)a3;
- (void)_populateEngineWithConstraintsForViewSubtree:(void *)a3 forComputingFittingSizeOfView:;
- (void)_populateInitialTraitCollection:(id)a3;
- (void)_postMovedFromSuperview:(void *)a1;
- (void)_prepareDescendantsForWindowDealloc;
- (void)_prepareDescendantsForWindowHostingSceneRemoval;
- (void)_prepareForFirstIntrinsicContentSizeCalculation;
- (void)_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:(CGRect)a3;
- (void)_prepareForWindowDealloc;
- (void)_prepareForWindowHostingSceneRemoval;
- (void)_privateSubview_setValue:(id)a3 forObservedLayerKeyPath:(id)a4;
- (void)_privateSubview_updateGeometryWithCenter:(CGPoint)a3 bounds:(CGRect)a4;
- (void)_processChangesFromOldTraits:(void *)a3 toCurrentTraits:(uint64_t)a4 withBehavior:;
- (void)_processDidChangeRecursivelyFromOldTraits:(id)a3 toCurrentTraits:(id)a4 forceNotification:(BOOL)a5;
- (void)_promoteSelfOrDescendantToFirstResponderIfNecessary;
- (void)_pushLayoutHash;
- (void)_raiseExceptionForBackgroundThreadLayerPropertyModification;
- (void)_raiseExceptionForBackgroundThreadLayout;
- (void)_rebuildLayoutFromScratch;
- (void)_recalculateStrictDescendantNeedsDoubleUpdateConstraints;
- (void)_receiveVisitor:(id)a3;
- (void)_recordTraitUsage:(unint64_t)a3 insideMethod:(const char *)a4 withInvalidationAction:;
- (void)_recursiveCollectTemporaryInternalConstraintsWithEngine:(uint64_t)a3 ignoreAutoresizingMaskConstraints:(uint64_t)a4 returningConstraintsForViewsNeedingSecondPass:(double)a5 currentTargetWidth:;
- (void)_recursiveEagerlyUpdateSafeAreaInsetsUntilViewController;
- (void)_recursiveInvalidateDescendantsNeedingDoubleUpdateConstraintsCollectingViews:(id)a3;
- (void)_recursiveUpdateConstraintsIfNeededCollectingViews:(id)a3 forSecondPass:(BOOL)a4;
- (void)_recursivelyConsiderResumingMotionEffects;
- (void)_recursivelyNameLayerTree;
- (void)_recursivelySetHiddenForBackdropMaskViews:(void *)a1;
- (void)_recursivelyUpdateCachedWindowForMoveToWindow:(void *)a1;
- (void)_registerAuxiliaryChildEnvironmentForTraitInvalidations:(id)a3;
- (void)_registerForGeometryChanges;
- (void)_registerForHDRAnimations;
- (void)_registerMultiLayerDelegate:(char *)a1;
- (void)_relaxLayoutEngineHostConstraints;
- (void)_relaxLayoutEngineHostConstraintsForAxis:(int64_t)a3;
- (void)_removeAllAnimations:(BOOL)a3;
- (void)_removeAllAnimationsIncludingSubviewsTrackingForAnimationRestoration;
- (void)_removeAllRetargetableAnimations:(BOOL)a3;
- (void)_removeAutolayoutSizingConstraints;
- (void)_removeBackdropMaskViews;
- (void)_removeBoundingPathChangeObserver:(id)a3;
- (void)_removeBoundingPathRotationNotificationsForWindow:(void *)a1;
- (void)_removeGeometryChangeObserver:(void *)a1;
- (void)_removeGestureRecognizer:(void *)a1;
- (void)_removeLayoutArrangement:(void *)a1;
- (void)_removeMultiLayerDelegate:(uint64_t)a1;
- (void)_removeParentGeometryObservers;
- (void)_removePropertyAnimationsForLayerKeyPath:(id)a3;
- (void)_removeSpringLoadedInteractions;
- (void)_replaceLayer:(id)a3;
- (void)_resetContentRect;
- (void)_resetContentStretch;
- (void)_resetLayoutEngineHostConstraints;
- (void)_resetLayoutEngineHostConstraintsForAxis:(int64_t)a3 collectingViews:(id)a4;
- (void)_resetNeedsSystemLayoutFittingSizeUpdateInSubtreeForLayoutEngine:(id)a3;
- (void)_resetToBeginningOfDoublePass;
- (void)_resizeWithOldSuperviewSize:(CGSize)a3;
- (void)_restoreRemovedAnimationsIncludingSubviews;
- (void)_safeAreaInsetsDidChangeFromOldInsets:(UIEdgeInsets)a3;
- (void)_scheduleFaultingInGuidesForConstraint:(id)a3;
- (void)_scheduleUpdateConstraintsPassAsEngineHostNeedingLayout:(BOOL)a3;
- (void)_sendUpdateConstraintsIfNecessaryForSecondPass:(BOOL)a3;
- (void)_setAccessoryViewFrame:(CGRect)a3;
- (void)_setAlignmentRectOriginCache:(id)a3;
- (void)_setAllowsHighContrastForBackgroundColor:(BOOL)a3;
- (void)_setAppEntityIdentifier:(id)a3;
- (void)_setAppIntentIdentifier:(id)a3;
- (void)_setAppearanceIsInvalid:(BOOL)a3;
- (void)_setAutoresizingConstraints:(void *)a1;
- (void)_setBackdropMaskView:(id)a3 forFlag:(int64_t)a4;
- (void)_setBackdropMaskViewFlags:(int64_t)a3;
- (void)_setBackgroundCGColor:(void *)a3 withSystemColorName:;
- (void)_setBackgroundColor:(id)a3;
- (void)_setBackgroundMergeBehavior:(int64_t)a3;
- (void)_setBoundingPath:(id)a3;
- (void)_setCanBeParentTraitEnvironment:(BOOL)a3;
- (void)_setCenter3D:(double)a3;
- (void)_setChargeEnabled:(BOOL)a3;
- (void)_setContentCompressionResistancePriorities:(CGSize)a3;
- (void)_setContentHuggingPriorities:(CGSize)a3;
- (void)_setContentImage:(uint64_t)a1;
- (void)_setContentRectInPixels:(CGRect)a3 forContentSize:(CGSize)a4;
- (void)_setContentSizeConstraints:(void *)result;
- (void)_setContentSizeNotificationToken:(id)a3;
- (void)_setContentStretchInPixels:(CGRect)a3 forContentSize:(CGSize)a4 shouldTile:(BOOL)a5;
- (void)_setContinuousCornerRadius:(double)a3;
- (void)_setCornerRadius:(double)a3;
- (void)_setCountOfFocusedAncestorTrackingViewsInSubtree:(unint64_t)a3;
- (void)_setCountOfMotionEffectsInSubtree:(unint64_t)a3;
- (void)_setCropInsets:(UIEdgeInsets)a3;
- (void)_setDelaysTouchesForSystemGestures:(BOOL)a3;
- (void)_setDisableDictationTouchCancellation:(BOOL)a3;
- (void)_setDisableLayoutFlushingCount:(int64_t)a3;
- (void)_setDontUpdateInferredLayoutMargins:(BOOL)a3;
- (void)_setDraggingSourceDelegate:(id)a3;
- (void)_setDrawsAsBackdropOverlay:(BOOL)a3;
- (void)_setDrawsAsBackdropOverlayWithBlendMode:(int64_t)a3;
- (void)_setDynamicDropInteraction:(id)a3;
- (void)_setEffectContainerLookupID:(id)a3;
- (void)_setFirstResponder:(id)a3;
- (void)_setFlipsHorizontalAxis:(BOOL)a3;
- (void)_setFocusInteractionEnabled:(BOOL)a3;
- (void)_setFocusSpeedBumpEdges:(unint64_t)a3;
- (void)_setFocusableContentMargins:(UIEdgeInsets)a3;
- (void)_setFrameForBackdropMaskViews:(double)a3 convertFrame:(double)a4;
- (void)_setFrameIgnoringLayerTransform:(CGRect)a3;
- (void)_setFrameWithAlignmentRect:(CGRect)a3;
- (void)_setGhostPortal:(id)a3;
- (void)_setHidden:(unint64_t)a3 forReason:;
- (void)_setHiddenForReuse:(BOOL)a3;
- (void)_setHostsLayoutEngine:(BOOL)a3;
- (void)_setHoverStyleStorage:(void *)a1;
- (void)_setIdentifier:(id)a3;
- (void)_setIdleModeLayoutAttributes:(id)a3;
- (void)_setIgnoreBackdropViewsWhenHiding:(BOOL)a3;
- (void)_setIgnoresLayerTransformForSafeAreaInsets:(BOOL)a3;
- (void)_setInAnimatedLayout:(BOOL)a3;
- (void)_setInSecondConstraintsPass:(BOOL)a3;
- (void)_setInferredLayoutMargins:(UIEdgeInsets)a3;
- (void)_setIntermediateLayerMaskFrameOrigin:(void *)a1;
- (void)_setInternalAppIntentsIntelligenceProvider:(id)a3;
- (void)_setInternalConstraints:(id)a3;
- (void)_setIsAncestorOfFirstResponder:(BOOL)a3;
- (void)_setLargeContentStoredProperties:(id)a3;
- (void)_setLargeContentViewerGestureManager:(id)a3;
- (void)_setLastNotifiedTraitCollection:(id)a3;
- (void)_setLayoutDebuggingIdentifier:(id)a3;
- (void)_setLayoutEngine:(id)a3;
- (void)_setLayoutEngineHostConstraints:(void *)a1;
- (void)_setLayoutMarginsGuide:(id)a3;
- (void)_setLocalOverrideTraitCollection:(id)a3;
- (void)_setMaskView:(id)a3;
- (void)_setMatchedViewIdentifier:(id)a3;
- (void)_setMonitorsSubtree:(BOOL)a3;
- (void)_setMorphInsets:(UIEdgeInsets)a3;
- (void)_setMultilineContextWidth:(double)a3;
- (void)_setNeedsContentsFormatUpdate;
- (void)_setNeedsContentsFormatUpdate:(BOOL)a3;
- (void)_setNeedsNonDeferredFocusUpdate;
- (void)_setNeedsUpdateConstraints;
- (void)_setNeedsUpdateConstraintsNeedingLayout:(BOOL)a3;
- (void)_setOverrideReparentingContainer:(id)a3;
- (void)_setOverrideTintColor:(id)a3;
- (void)_setOverrideUserInterfaceRenderingMode:(int64_t)a3;
- (void)_setOverrideVibrancyTrait:(int64_t)a3;
- (void)_setPresentationControllerToNotifyOnLayoutSubviews:(id)a3;
- (void)_setPresentationValue:(id)a3 forKey:(id)a4;
- (void)_setPresentationValue:(id)a3 velocity:(id)a4 preferredFrameRateRangeMaximum:(int)a5 forKey:(id)a6;
- (void)_setPreviewingSegueTemplateStorage:(id)a3;
- (void)_setPreviousFittingSizeInfo:(id)a3;
- (void)_setRawLayoutMargins:(UIEdgeInsets)a3;
- (void)_setReadableContentGuide:(id)a3;
- (void)_setRenderConfig:(id)a3;
- (void)_setSafeAreaInsetsFrozen:(BOOL)a3;
- (void)_setSafeAreaInsetsFrozen:(BOOL)a3 updateForUnfreeze:(BOOL)a4;
- (void)_setSafeMaskView:(void *)a1;
- (void)_setSceneDraggingBehaviorOnPan:(int64_t)a3;
- (void)_setShouldAdaptToMaterials:(BOOL)a3;
- (void)_setShouldArchiveUIAppearanceTags:(BOOL)a3;
- (void)_setShouldNotifyGeometryObserversForBaselineChanges:(BOOL)a3;
- (void)_setShouldRasterize:(BOOL)a3;
- (void)_setSourceCenter:(CGPoint)a3;
- (void)_setSpringLoaded:(void *)a3 interactionInitializer:;
- (void)_setStoredLayoutEngineWidth:(void *)object;
- (void)_setSubviewWantsAutolayoutTripWantsAutolayout:(BOOL)a3;
- (void)_setTargetVelocity:(id)a3 forKey:(id)a4;
- (void)_setTracksFocusedAncestors:(BOOL)a3;
- (void)_setTraitStorageConstraints:(id)a3;
- (void)_setTraitStorageList:(id)a3;
- (void)_setTraitStorageSubviews:(id)a3;
- (void)_setTransform3D:(CATransform3D *)a3;
- (void)_setUserInterfaceIdiom:(int64_t)a3;
- (void)_setVelocity:(id)a3 forKey:(id)a4;
- (void)_setViewDelegateContentOverlayInsetsAreClean:(BOOL)a3;
- (void)_setViewsJostledDuringUpdateConstraintsPass:(id)a3;
- (void)_setVisualAltitude:(double)a3;
- (void)_setVisualAltitudeBias:(CGSize)a3;
- (void)_setWantsAutolayout;
- (void)_setWritingToolsCoordinator:(id)a3;
- (void)_snipDangliesWithForce:(BOOL)a3 repairIfPossibleForViewThatMoved:(id)a4 newSuperview:(id)a5 oldSuperview:(id)a6;
- (void)_startObservingVariablesOnlyToSupportTAMICChange:(BOOL)a3;
- (void)_stashedLayoutVariableObservationsCreateIfNecessary;
- (void)_stopObservingVariablesOnlyToSupportTAMICChange:(BOOL)a3;
- (void)_strokeClippedViewIfNecessary;
- (void)_subscribeToScrollNotificationsIfNecessary:(id)a3;
- (void)_switchToLayoutEngine:(id)a3;
- (void)_synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable;
- (void)_synchronizeAutoLayoutWithCALayoutIfNecessaryForOldBounds:(double)a3 updateSuperview:(double)a4;
- (void)_throwForUnsupportedNonMacIdiomBehaviorWithReason:(id)a3;
- (void)_tintColorDidChange;
- (void)_traitCollectionDidChangeInternal:(const _UITraitCollectionChangeDescription *)a3;
- (void)_traitCollectionDidChangeOnSubtreeInternal:(const _UITraitCollectionChangeDescription *)a3;
- (void)_ui_addSubLayoutItem:(id)a3;
- (void)_ui_addToView:(id)a3 atIndex:(int64_t)a4;
- (void)_ui_insertSubLayoutItem:(id)a3 atIndex:(int64_t)a4;
- (void)_ui_setObservationTrackingDictionary:(id)a3;
- (void)_uili_removeLayoutVariableObservationsOnlyToSupportTAMICChange:(BOOL)a3;
- (void)_uili_stashLayoutVariableObservation:(id)a3 forVariable:(id)a4;
- (void)_uimorphingView_setInitialAlpha:(double)a3;
- (void)_unregisterAuxiliaryChildEnvironmentForTraitInvalidations:(id)a3;
- (void)_unregisterForGeometryChanges;
- (void)_unsubscribeToScrollNotificationsIfNecessary:(id)a3;
- (void)_updateAppearanceIfNeeded;
- (void)_updateAutogeneratedNameForLayerIfNeeded;
- (void)_updateAutomaticCaptureGroupIfNecessary;
- (void)_updateAutoresizingConstraints;
- (void)_updateCachedTraitCollectionIfNeeded;
- (void)_updateCaptureGroupRecursively;
- (void)_updateCombinedInsetsIfNecessary;
- (void)_updateConstraintsAsNecessaryAndApplyLayoutFromEngine;
- (void)_updateConstraintsAtEngineLevelIfNeededWithViewForVariableChangeNotifications:(void *)result;
- (void)_updateConstraintsIfNeededCollectingViews:(id)a3 forSecondPass:(BOOL)a4;
- (void)_updateConstraintsIfNeededWithViewForVariableChangeNotifications:(id)a3;
- (void)_updateConstraintsWithObservationTracking;
- (void)_updateContentSizeConstraints;
- (void)_updateDirectionalConstraintsIfNeededWasFlipped:(uint64_t)a1;
- (void)_updateDynamicBackgroundColor;
- (void)_updateEmbeddedViewControllerContentOverlayInsetsIfNecessary;
- (void)_updateInferredLayoutMargins;
- (void)_updateInferredLayoutMarginsFromSuperview:(id)a3;
- (void)_updateLayoutEngineHostConstraints;
- (void)_updateLayoutMarginsGuideConstraintsIfNecessary;
- (void)_updateNeedsDisplayOnBoundsChange;
- (void)_updateParallaxEffectWithAltitude:(double)a3 bias:(double)a4;
- (void)_updateReadableContentGuideConstraintsIfNecessary;
- (void)_updateSafeAreaInsets;
- (void)_updateSafeAreaLayoutGuideConstraintsIfNecessary;
- (void)_updateSublayerGeometry;
- (void)_updateSystemConstraints;
- (void)_updateTraitCollectionAndProcessChangesWithBehavior:(void *)a3 previousCollection:;
- (void)_updateTraitsIfNeededWithBehavior:(uint64_t)a1;
- (void)_viewHierarchyUnpreparedForConstraint:(id)a3;
- (void)_webCustomViewWasAddedAsSubviewOfView:(void *)a1;
- (void)_webCustomViewWasRemovedFromSuperview:(void *)a1;
- (void)_webCustomViewWillBeRemovedFromSuperview;
- (void)_willBeginBeingDisplayedInPointerContentEffect;
- (void)_willChangeToIdiom:(void *)a3 onScreen:(char)a4 traverseHierarchy:;
- (void)_willChangeToIdiomOnScreen:(char)a3 traverseHierarchy:;
- (void)_willMoveToWindow:(id)a3;
- (void)_willMoveToWindow:(id)a3 withAncestorView:(id)a4;
- (void)_willRemoveSubviewWantingAutolayout:(void *)a1;
- (void)_withUnsatisfiableConstraintsLoggingSuspendedForFullSubtreeFromOutermostEngineDelegate:(void *)result;
- (void)_withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:(id)a3;
- (void)_wrappedProcessTraitChanges:(uint64_t)a3 withBehavior:;
- (void)accessibilityApplyInvertFilter;
- (void)accessibilityUnapplyInvertFilter;
- (void)addAnimation:(id)a3 forKey:(id)a4;
- (void)addConstraint:(NSLayoutConstraint *)constraint;
- (void)addConstraints:(NSArray *)constraints;
- (void)addGestureRecognizer:(UIGestureRecognizer *)gestureRecognizer;
- (void)addInteraction:(id)interaction;
- (void)addLayoutGuide:(UILayoutGuide *)layoutGuide;
- (void)addMotionEffect:(UIMotionEffect *)effect;
- (void)addSubview:(UIView *)view;
- (void)bringSubviewToFront:(UIView *)view;
- (void)constraintsDidChangeInEngine:(id)a3;
- (void)dealloc;
- (void)drawLayer:(id)a3 inContext:(CGContext *)a4;
- (void)encodeWithCoder:(id)a3;
- (void)engine:(id)a3 willBreakConstraint:(id)a4 dueToMutuallyExclusiveConstraints:(id)a5;
- (void)exchangeSubviewAtIndex:(NSInteger)index1 withSubviewAtIndex:(NSInteger)index2;
- (void)exerciseAmbiguityInLayout;
- (void)find:(id)a3;
- (void)findAndReplace:(id)a3;
- (void)findNext:(id)a3;
- (void)findPrevious:(id)a3;
- (void)forceDisplayIfNeeded;
- (void)insertSubview:(UIView *)view aboveSubview:(UIView *)siblingSubview;
- (void)insertSubview:(UIView *)view atIndex:(NSInteger)index;
- (void)insertSubview:(UIView *)view belowSubview:(UIView *)siblingSubview;
- (void)insertSubview:(id)a3 above:(id)a4;
- (void)insertSubview:(id)a3 below:(id)a4;
- (void)invalidateIntrinsicContentSize;
- (void)layerWillDraw:(id)a3;
- (void)layoutBelowIfNeeded;
- (void)layoutSublayersOfLayer:(id)a3;
- (void)layoutSubviews;
- (void)mt_addPrivateSubview:(id)a3;
- (void)mt_setBackgroundEffects:(id)a3;
- (void)mt_setCaptureGroupName:(id)a3;
- (void)mt_setContentEffects:(id)a3;
- (void)mt_setVisualEffect:(id)a3;
- (void)nsis_valueOfVariable:(id)a3 didChangeInEngine:(id)a4;
- (void)nsli_addConstraint:(id)a3;
- (void)recursivelyForceDisplayIfNeeded;
- (void)reduceWidth:(double)a3;
- (void)removeConstraint:(NSLayoutConstraint *)constraint;
- (void)removeConstraints:(NSArray *)constraints;
- (void)removeFromSuperview;
- (void)removeGestureRecognizer:(UIGestureRecognizer *)gestureRecognizer;
- (void)removeInteraction:(id)interaction;
- (void)removeLayoutGuide:(UILayoutGuide *)layoutGuide;
- (void)removeMotionEffect:(UIMotionEffect *)effect;
- (void)resizeSubviewsWithOldSize:(CGSize)a3;
- (void)sendSubviewToBack:(UIView *)view;
- (void)setAccessibilityIgnoresInvertColors:(BOOL)accessibilityIgnoresInvertColors;
- (void)setAllowsGroupBlending:(BOOL)a3;
- (void)setAllowsGroupOpacity:(BOOL)a3;
- (void)setAlpha:(CGFloat)alpha;
- (void)setAnchorPoint:(CGPoint)anchorPoint;
- (void)setAutoresizesSubviews:(BOOL)autoresizesSubviews;
- (void)setAutoresizingMask:(UIViewAutoresizing)autoresizingMask;
- (void)setBounds:(CGRect)bounds;
- (void)setCenter:(CGPoint)center;
- (void)setCharge:(float)a3;
- (void)setClearsContext:(BOOL)a3;
- (void)setClearsContextBeforeDrawing:(BOOL)clearsContextBeforeDrawing;
- (void)setClipsSubviews:(BOOL)a3;
- (void)setClipsToBounds:(BOOL)clipsToBounds;
- (void)setCompositingMode:(int64_t)a3;
- (void)setContentCompressionResistancePriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis;
- (void)setContentHuggingPriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis;
- (void)setContentMode:(UIViewContentMode)contentMode;
- (void)setContentScaleFactor:(CGFloat)contentScaleFactor;
- (void)setContentStretch:(CGRect)contentStretch;
- (void)setContentsPosition:(int)a3;
- (void)setDeliversPressesForGesturesToSuperview:(BOOL)a3;
- (void)setDeliversTouchesForGesturesToSuperview:(BOOL)a3;
- (void)setDirectionalLayoutMargins:(NSDirectionalEdgeInsets)directionalLayoutMargins;
- (void)setEdgesInsettingLayoutMarginsFromSafeArea:(unint64_t)a3;
- (void)setEdgesPreservingSuperviewLayoutMargins:(unint64_t)a3;
- (void)setExclusiveTouch:(BOOL)exclusiveTouch;
- (void)setFixedBackgroundPattern:(BOOL)a3;
- (void)setFocusEffect:(UIFocusEffect *)focusEffect;
- (void)setFocusGroupIdentifier:(NSString *)focusGroupIdentifier;
- (void)setFocusGroupPriority:(UIFocusGroupPriority)focusGroupPriority;
- (void)setFrame:(CGRect)a3 forFields:(int)a4;
- (void)setFrame:(CGRect)frame;
- (void)setFrameOrigin:(CGPoint)a3;
- (void)setGestureRecognizers:(NSArray *)gestureRecognizers;
- (void)setHidden:(BOOL)hidden;
- (void)setHitTestDirectionalInsets:(NSDirectionalEdgeInsets)a3;
- (void)setHitTestInsets:(UIEdgeInsets)a3;
- (void)setHoverStyle:(UIHoverStyle *)hoverStyle;
- (void)setInsetsLayoutMarginsFromSafeArea:(BOOL)insetsLayoutMarginsFromSafeArea;
- (void)setInteractions:(NSArray *)interactions;
- (void)setLargeContentImage:(UIImage *)largeContentImage;
- (void)setLargeContentImageInsets:(UIEdgeInsets)largeContentImageInsets;
- (void)setLargeContentTitle:(NSString *)largeContentTitle;
- (void)setLayoutMargins:(UIEdgeInsets)layoutMargins;
- (void)setLayoutMarginsFollowReadableWidth:(BOOL)a3;
- (void)setMaximumContentSizeCategory:(UIContentSizeCategory)maximumContentSizeCategory;
- (void)setMinimumContentSizeCategory:(UIContentSizeCategory)minimumContentSizeCategory;
- (void)setMotionEffects:(NSArray *)motionEffects;
- (void)setMultipleTouchEnabled:(BOOL)multipleTouchEnabled;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(CGRect)rect;
- (void)setNeedsDisplayOnBoundsChange:(BOOL)a3;
- (void)setNeedsFocusUpdate;
- (void)setNeedsLayout;
- (void)setNeedsUpdateConstraints;
- (void)setOpaque:(BOOL)opaque;
- (void)setOverrideUserInterfaceStyle:(UIUserInterfaceStyle)overrideUserInterfaceStyle;
- (void)setPreservesSuperviewLayoutMargins:(BOOL)preservesSuperviewLayoutMargins;
- (void)setRotationBy:(float)a3;
- (void)setSafeAreaInsets:(UIEdgeInsets)a3;
- (void)setScalesLargeContentImage:(BOOL)scalesLargeContentImage;
- (void)setSemanticContentAttribute:(UISemanticContentAttribute)semanticContentAttribute;
- (void)setShowsLargeContentViewer:(BOOL)showsLargeContentViewer;
- (void)setSize:(CGSize)a3;
- (void)setSkipsSubviewEnumeration:(BOOL)a3;
- (void)setTag:(NSInteger)tag;
- (void)setTintAdjustmentMode:(UIViewTintAdjustmentMode)tintAdjustmentMode;
- (void)setTintColor:(UIColor *)tintColor;
- (void)setTransform3D:(CATransform3D *)transform3D;
- (void)setTransform:(CGAffineTransform *)transform;
- (void)setTranslatesAutoresizingMaskIntoConstraints:(BOOL)translatesAutoresizingMaskIntoConstraints;
- (void)setUserInteractionEnabled:(BOOL)userInteractionEnabled;
- (void)setValue:(id)a3 forKey:(id)a4;
- (void)setViewTraversalMark:(BOOL)a3;
- (void)setWantsDeepColorDrawing:(BOOL)a3;
- (void)set__swiftAnimationInfo:(uint64_t)a1;
- (void)sizeToFit;
- (void)solutionDidChangeInEngine:(id)a3;
- (void)unregisterForTraitChanges:(id)a3;
- (void)updateConstraintsIfNeeded;
- (void)updateFocusIfNeeded;
- (void)updateTraitsIfNeeded;
@end

@implementation UIView

+ (void)_setupAnimationWithDuration:(double)a3 delay:(double)a4 view:(id)a5 options:(unint64_t)a6 factory:(id)a7 animations:(id)a8 start:(id)a9 animationStateGenerator:(id)a10 completion:(id)a11
{
  id v19 = a5;
  id v40 = a7;
  v20 = (void (**)(void))a8;
  id v42 = a9;
  v21 = (void (**)(void))a10;
  id v41 = a11;
  if (pthread_main_np() != 1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      v38 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v44 = 0;
        _os_log_fault_impl(&dword_1853B0000, v38, OS_LOG_TYPE_FAULT, "UIView animation API is being called from a background thread. Performing any operation from a background thread on UIView or a subclass is not supported and may result in unexpected and insidious behavior.", v44, 2u);
      }
    }
    else
    {
      v37 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_setupAnimationWithDuration_delay_view_options_factory_animations_start_animationStateGenerator_completion____s_category)+ 8);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1853B0000, v37, OS_LOG_TYPE_ERROR, "UIView animation API is being called from a background thread. Performing any operation from a background thread on UIView or a subclass is not supported and may result in unexpected and insidious behavior.", buf, 2u);
      }
    }
  }
  id v22 = (id)__currentViewAnimationState;
  if ((a6 & 0x400) == 0
    || ([a1 _isAnimationTracking] & 1) != 0
    || ([a1 _shouldTrackAnimationsWithAnimator] & 1) != 0)
  {
    int v23 = 0;
    if ((a6 & 0x200) != 0) {
      goto LABEL_9;
    }
  }
  else
  {
    id v28 = (id)[a1 _startAnimationTracking];
    int v23 = 1;
    if ((a6 & 0x200) != 0) {
      goto LABEL_9;
    }
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v24 = a1;
    id v25 = v19;
    v26 = v22;
    +[UIViewAnimationState pushViewAnimationState:0 context:0];
    v27 = (void *)__currentViewAnimationState;
    *(void *)(__currentViewAnimationState + 280) = v26[35];
    v27[36] = v26[36];
    v27[37] = v26[37];
    v27[38] = v26[38];

    id v19 = v25;
    goto LABEL_12;
  }
LABEL_9:
  id v24 = a1;
  if (v21) {
    v21[2](v21);
  }
  else {
    +[UIViewAnimationState pushViewAnimationState:0 context:0];
  }
LABEL_12:
  v29 = v40;
  if (!__currentViewAnimationState) {
    goto LABEL_36;
  }
  [(id)__currentViewAnimationState setupWithDuration:v19 delay:a6 view:v40 options:v22 factory:v42 parentState:v41 start:a3 completion:a4];
  uint64_t v30 = __currentViewAnimationState;
  if (!*(void *)(__currentViewAnimationState + 104))
  {
    BOOL v31 = 0;
    if (!v20) {
      goto LABEL_19;
    }
LABEL_17:
    if (!v31)
    {
      v20[2](v20);
      uint64_t v30 = __currentViewAnimationState;
      if (!__currentViewAnimationState) {
        goto LABEL_33;
      }
    }
    goto LABEL_19;
  }
  BOOL v31 = (*(unsigned char *)(__currentViewAnimationState + 172) & 4) == 0;
  if (v20) {
    goto LABEL_17;
  }
LABEL_19:
  if (!*(_DWORD *)(v30 + 168))
  {
    id v39 = v19;
    if (!v22)
    {
      id v34 = 0;
LABEL_32:

      id v19 = v39;
      goto LABEL_33;
    }
    id WeakRetained = objc_loadWeakRetained((id *)(v30 + 272));
    if (WeakRetained)
    {
      v33 = WeakRetained;
      id v34 = 0;
    }
    else
    {
      if ((a6 & 0x2008) != 0)
      {
        id v34 = 0;
        goto LABEL_31;
      }
      v35 = (id *)v22;
      do
      {
        id v34 = objc_loadWeakRetained(v35 + 34);
        if (v34) {
          break;
        }
        v36 = (id *)v35[1];

        v35 = v36;
      }
      while (v36);

      if ([v34 isInterruptible]) {
        goto LABEL_31;
      }
      v33 = [v34 _viewAnimationState];
      [v33 _decrementDidEndCount];
    }

LABEL_31:
    v29 = v40;
    goto LABEL_32;
  }
LABEL_33:
  +[UIViewAnimationState popAnimationState];
  if (v20 && v31) {
    [v24 _setupAnimationWithDuration:0 delay:a6 & 0xFFFFFFFFFF8FFF7FLL view:v29 options:v20 factory:0 animations:0 start:a3 animationStateGenerator:a4 completion:0];
  }
LABEL_36:
  if (v23) {
    [v24 _finishAnimationTracking];
  }
}

- (id)__swiftAnimationInfo
{
  if (a1)
  {
    a1 = (id *)a1[5];
    uint64_t v1 = vars8;
  }
  return a1;
}

- (double)_currentScreenScale
{
  v2 = self;
  if (!dyld_program_sdk_at_least()
    || ([(UIView *)v2 traitCollection],
        v3 = objc_claimAutoreleasedReturnValue(),
        [v3 displayScale],
        double v5 = v4,
        v3,
        v5 <= 0.0))
  {
    objc_msgSend(-[UIView _screen](v2, "_screen"), "scale");
    double v5 = v6;
  }
  if (v5 <= 0.0)
  {
    v8 = [MEMORY[0x1E4F28B00] currentHandler];
    v9 = [NSString stringWithUTF8String:"CGFloat GetCurrentScreenScaleForView(UIView *__strong)"];
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, @"UIView.m", 18846, @"GetCurrentScreenScaleForView() must always return a valid scale (%g > 0.0)", *(void *)&v5);
  }
  return v5;
}

- (UITraitCollection)traitCollection
{
  if (qword_1EB25C330 != -1) {
    dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
  }
  if (!byte_1EB25C0B5)
  {
    -[UIView _updateCachedTraitCollectionIfNeeded]((uint64_t)self);
    goto LABEL_19;
  }
  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_DebugStaleViewTraitCollection, @"DebugStaleViewTraitCollection", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EB257AFC&& ![(UIView *)self _cachedTraitCollectionIsValid])
  {
    v3 = self;
    uint64_t v4 = (uint64_t)v3;
    if (byte_1EB25C0B6)
    {
LABEL_18:

      goto LABEL_19;
    }
    byte_1EB25C0B6 = 1;
    cachedTraitCollection = v3->_cachedTraitCollection;
    double v6 = cachedTraitCollection;
    -[UIView _updateCachedTraitCollectionIfNeeded](v4);
    id v7 = *(id *)(v4 + 32);
    objc_storeStrong((id *)(v4 + 32), cachedTraitCollection);
    *(_DWORD *)(v4 + 112) &= ~0x80u;
    v8 = v6;
    v9 = (UITraitCollection *)v7;
    v10 = v9;
    if (v8 == v9)
    {
    }
    else
    {
      if (v8 && v9)
      {
        BOOL v11 = [(UITraitCollection *)v8 isEqual:v9];

        if (v11) {
          goto LABEL_17;
        }
      }
      else
      {
      }
      UIViewReturningStaleTraitCollection((void *)v4, (uint64_t)v8, (uint64_t)v10);
    }
LABEL_17:
    byte_1EB25C0B6 = 0;

    goto LABEL_18;
  }
LABEL_19:
  v12 = self->_cachedTraitCollection;
  return v12;
}

- (void)set__swiftAnimationInfo:(uint64_t)a1
{
  id v4 = a2;
  if (a1) {
    objc_storeStrong((id *)(a1 + 40), a2);
  }
}

- (void)__swift_removeAllRetargetableAnimations:(BOOL)a3
{
  id v4 = self;
  sub_1853BFE84(a3);
}

+ (void)_modifyAnimationsWithPreferredFrameRateRange:(CAFrameRateRange)a3 updateReason:(unsigned int)a4 animations:(id)a5
{
  float preferred = a3.preferred;
  float maximum = a3.maximum;
  float minimum = a3.minimum;
  v13 = (void (**)(void))a5;
  if (!a4)
  {
    v17.float minimum = minimum;
    v17.float maximum = maximum;
    v17.float preferred = preferred;
    if (!CAFrameRateRangeIsEqualToRange(v17, *MEMORY[0x1E4F39AF0])) {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"reason parameter of +[UIView _modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:] must be non-zero unless preferredFrameRateRange is CAFrameRateRangeDefault."];
    }
  }
  v9 = (char *)(id)__currentViewAnimationState;
  v10 = v9;
  if (v9)
  {
    BOOL v11 = v9 + 64;
    uint64_t v14 = *((void *)v9 + 8);
    int v12 = *((_DWORD *)v9 + 19);
    int v15 = *((_DWORD *)v9 + 18);
    *((float *)v9 + 16) = minimum;
    *((float *)v9 + 17) = maximum;
    *((float *)v9 + 18) = preferred;
    *((_DWORD *)v9 + 19) = a4;
    if (v13) {
      v13[2](v13);
    }
    *BOOL v11 = v14;
    v10[18] = v15;
    v10[19] = v12;
  }
  else if (v13)
  {
    ((void (*)(void))v13[2])();
  }
}

uint64_t __53__UIView_Internal___removeAllRetargetableAnimations___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "__swift_removeAllRetargetableAnimations:", *(unsigned __int8 *)(a1 + 40));
}

double __133__UIView_Internal___animateUsingSpringWithDuration_delay_options_mass_stiffness_damping_initialVelocity_animations_start_completion___block_invoke(uint64_t a1)
{
  +[UIViewAnimationState pushViewAnimationState:0 context:0];
  uint64_t v2 = __currentViewAnimationState;
  *(void *)(__currentViewAnimationState + 280) = *(void *)(a1 + 32);
  *(void *)(v2 + 288) = *(void *)(a1 + 40);
  *(void *)(v2 + 296) = *(void *)(a1 + 48);
  double result = *(double *)(a1 + 56);
  *(double *)(v2 + 304) = result;
  return result;
}

uint64_t __138__UIView_UIViewAnimationWithBlocks__animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion___block_invoke(double *a1)
{
  +[UIViewAnimationState pushViewAnimationState:0 context:0];
  uint64_t v2 = (void *)__currentViewAnimationState;
  double v3 = a1[4];
  double v4 = a1[5];
  double v5 = a1[6];
  return [v2 generateSpringPropertiesForDuration:v3 damping:v4 velocity:v5];
}

+ (void)_recenterMotionEffects
{
}

- (void)_notifyArrangementsOfChangeInItem:(uint64_t)a3 withSelector:
{
  for (id i = a2; a1; a1 = (id)[a1 superview])
  {
    double v5 = [a1 _mutableLayoutArrangements];
    [v5 makeObjectsPerformSelector:a3 withObject:i];

    if ([a1 _hostsLayoutEngine]) {
      break;
    }
  }
}

- (NSMutableArray)_mutableLayoutArrangements
{
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x2000) != 0)
  {
    uint64_t v2 = objc_getAssociatedObject(self, &_UIViewLayoutArrangementsAssocObjectKey);
  }
  else
  {
    uint64_t v2 = 0;
  }
  return (NSMutableArray *)v2;
}

- (void)_initializeLayoutEngine
{
  if (![(UIView *)self _layoutEngine])
  {
    if ([(UIView *)self _hostsLayoutEngine])
    {
      [(UIView *)self _initializeHostedLayoutEngine];
    }
    else
    {
      double v3 = [(UIView *)self superview];
      [(UIView *)v3 _initializeLayoutEngine];
    }
  }
}

- (BOOL)_hostsLayoutEngine
{
  return (*(void *)&self->_viewFlags >> 43) & 1;
}

- (id)_actingParentViewForGestureRecognizers
{
  return 0;
}

- (_UIGestureRecognizerContainer)_parentGestureRecognizerContainer
{
  uint64_t v2 = *(void *)((char *)&self->_viewFlags + 20);
  double v3 = [(UIView *)self superview];
  double v4 = v3;
  if ((v2 & 0x1000000000) != 0)
  {
    uint64_t v5 = [v3 superview];

    double v4 = (void *)v5;
  }
  return (_UIGestureRecognizerContainer *)v4;
}

- (id)_viewControllerForAncestor
{
  if (self)
  {
    while ((*(_DWORD *)&self->_viewFlags & 0x80000000) == 0)
    {
      self = (UIView *)[(UIView *)self superview];
      if (!self) {
        goto LABEL_6;
      }
    }
    self = self->_viewDelegate;
LABEL_6:
    uint64_t v2 = vars8;
  }
  return self;
}

- (void)_updateCombinedInsetsIfNecessary
{
  if (qword_1EB25C1B0 != -1) {
    dispatch_once(&qword_1EB25C1B0, &__block_literal_global_1200_0);
  }
  if (byte_1EB25C0AC) {
    [(UIView *)self _setViewDelegateContentOverlayInsetsAreClean:0];
  }
  [(UIView *)self safeAreaInsets];
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  [(UIView *)self _updateSafeAreaInsets];
  [(UIView *)self safeAreaInsets];
  if ((*((void *)&self->_viewFlags + 1) & 0x1E00000000000000) == 0
    || v6 == v12 && v4 == v11 && v10 == v14 && v8 == v13)
  {
    [(UIView *)self _updateInferredLayoutMargins];
  }
}

- (void)_updateSafeAreaInsets
{
  if (![(UIView *)self _safeAreaInsetsFrozen])
  {
    [(UIView *)self _safeAreaInsetsInSuperview:[(UIView *)self superview]];
    -[UIView setSafeAreaInsets:](self, "setSafeAreaInsets:");
  }
}

- (UIEdgeInsets)_safeAreaInsetsForFrame:(CGRect)a3 inSuperview:(id)a4
{
  double v4 = -[UIView _safeAreaInsetsForFrame:inSuperview:ignoreViewController:]((uint64_t)self, a4, 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  result.right = v7;
  result.bottom = v6;
  result.left = v5;
  result.top = v4;
  return result;
}

- (UIEdgeInsets)_concreteDefaultLayoutMargins
{
  uint64_t v2 = -[UIView __viewDelegate]((id *)&self->super.super.isa);

  double v3 = 0.0;
  if (!v2) {
    double v3 = 8.0;
  }
  double v4 = v3;
  double v5 = v3;
  double v6 = v3;
  result.right = v6;
  result.bottom = v5;
  result.left = v4;
  result.top = v3;
  return result;
}

- (id)__viewDelegate
{
  if (a1)
  {
    a1 = (id *)a1[11];
    uint64_t v1 = vars8;
  }
  return a1;
}

- (void)setFrame:(CGRect)frame
{
  double height = frame.size.height;
  double width = frame.size.width;
  double y = frame.origin.y;
  double x = frame.origin.x;
  BOOL v8 = __currentViewAnimationState
    && (*(unsigned char *)(__currentViewAnimationState + 172) & 0x10) != 0
    && -[UIView _needsLayoutOnAnimatedFrameChangeForNewFrame:](self, "_needsLayoutOnAnimatedFrameChangeForNewFrame:", frame.origin.x, frame.origin.y, frame.size.width, frame.size.height);
  [(UIView *)self bounds];
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  [(UIView *)self center];
  double v48 = v17;
  double v46 = v18;
  [(UIView *)self frame];
  double v47 = v19;
  double v50 = v20;
  BOOL v21 = -[UIView _shouldInvalidateBaselineConstraintsForSize:oldSize:](self, "_shouldInvalidateBaselineConstraintsForSize:oldSize:", width, height, v14, v16);
  id v22 = (id *)[(UIView *)self superview];
  int v23 = v22;
  if (v22) {
    char v24 = [v22[20] needsLayout];
  }
  else {
    char v24 = 0;
  }
  id v25 = +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger];
  objc_msgSend(v25, "willSendSetFrame:toLayerOfView:", self, x, y, width, height);

  -[UIView _backing_setFrame:]((uint64_t)self, x, y, width, height);
  int v26 = 0;
  double v49 = width;
  double v27 = height;
  double v28 = x;
  double v29 = y;
  if (v23 && (v24 & 1) == 0) {
    int v26 = [v23[20] needsLayout];
  }
  -[UIView _synchronizeAutoLayoutWithCALayoutIfNecessaryForOldBounds:updateSuperview:]((uint64_t)self, v26, v10, v12, v14, v16);
  [(UIView *)self bounds];
  double v31 = v30;
  double v33 = v32;
  [(UIView *)self center];
  double v35 = v34;
  double v45 = v36;
  [(UIView *)self frame];
  BOOL v39 = v33 == v16 && v31 == v14;
  BOOL v40 = v38 != v50 || v37 != v47;
  if ((*(void *)&self->_viewFlags & 0x20000) == 0 && !v39) {
    -[UIView resizeSubviewsWithOldSize:](self, "resizeSubviewsWithOldSize:", v14, v16);
  }
  if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self)
    && (*(void *)&self->_viewFlags & 0x200000000000000) == 0
    && [(UIView *)self translatesAutoresizingMaskIntoConstraints]
    && (!v39 || v40))
  {
    -[UIView _constraints_frameDidChange]((uint64_t)self);
  }
  if (v21) {
    [(UIView *)self _invalidateBaselineConstraints];
  }
  if (v8) {
    [(UIView *)self layoutBelowIfNeeded];
  }
  if ((!v39 || v40)
    && *((_DWORD *)&self->_viewFlags + 4) & 0x3C | *((void *)&self->_viewFlags + 1) & 0x8000000000000000)
  {
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v51 = 0u;
    if (v39)
    {
      uint64_t v41 = 2;
      if (!v40) {
        goto LABEL_39;
      }
    }
    else
    {
      *((double *)&v53 + 1) = v14;
      *(double *)&long long v54 = v16;
      *(void *)&long long v51 = 8;
      if ([(UIView *)self _shouldNotifyGeometryObserversForBaselineChanges])
      {
        *(void *)&long long v51 = 2056;
        uint64_t v41 = 2058;
        if (!v40) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v41 = 10;
        if (!v40)
        {
LABEL_39:
          -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)self, &v51);
          goto LABEL_40;
        }
      }
    }
    *((double *)&v51 + 1) = v47;
    *(double *)&long long v52 = v50;
    *(void *)&long long v51 = v41;
    goto LABEL_39;
  }
LABEL_40:
  char v42 = v35 != v48 || !v39;
  if ((v42 & 1) != 0 || (v44 = v45, double v43 = v46, v45 != v46))
  {
    [(UIView *)self _updateCombinedInsetsIfNecessary];
    -[UIView _updateEmbeddedViewControllerContentOverlayInsetsIfNecessary](self);
  }
  if (!v39)
  {
    [(UIView *)self _notifyReferenceViewSizeChange];
    -[UIView _updateReadableContentGuideConstraintsIfNecessary](self);
  }
  if ((*((void *)&self->_viewFlags + 1) & 0x1000000) != 0) {
    -[UIView _setFrameForBackdropMaskViews:convertFrame:](self, 1, v28, v29, v49, v27);
  }
}

- (double)_backing_position
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)(a1 + 168);
  if (!v2 || (v3 = *(id *)(v2 + 8), (double v4 = v3) == 0))
  {
    double v4 = 0;
    id v3 = *(id *)(a1 + 160);
  }
  [v3 position];
  double v6 = v5;

  if (*(unsigned char *)(a1 + 122))
  {
    double v7 = [(id)a1 superview];
    [v7 bounds];
    double v9 = v8;

    return v6 + v9;
  }
  return v6;
}

- (UIEdgeInsets)_safeAreaInsetsInSuperview:(id)a3
{
  if ([(UIView *)self _safeAreaInsetsFrozen])
  {
    [(UIView *)self safeAreaInsets];
  }
  else
  {
    if ((*((_DWORD *)&self->_viewFlags + 4) & 0x800000) != 0) {
      [(UIView *)self _frameIgnoringLayerTransform];
    }
    else {
      [(UIView *)self frame];
    }
    double v13 = v9;
    double v14 = v10;
    double v15 = v11;
    double v16 = v12;
    if (a3 && [*((id *)a3 + 20) flipsHorizontalAxis])
    {
      [a3 bounds];
      double v13 = CGRectGetMaxX(v18) - v15 - v13;
    }
    -[UIView _safeAreaInsetsForFrame:inSuperview:](self, "_safeAreaInsetsForFrame:inSuperview:", a3, v13, v14, v15, v16);
  }
  result.right = v8;
  result.bottom = v7;
  result.left = v6;
  result.top = v5;
  return result;
}

- (double)_backing_frame
{
  if (!a1) {
    return 0.0;
  }
  if (*(unsigned char *)(a1 + 122))
  {
    double v6 = [(id)a1 superview];
    [v6 bounds];
    CGFloat v8 = v7;
    CGFloat v10 = v9;

    uint64_t v11 = *(void *)(a1 + 168);
    if (!v11 || (v12 = *(id *)(v11 + 8), (double v4 = v12) == 0))
    {
      double v4 = 0;
      id v12 = *(id *)(a1 + 160);
    }
    [v12 frame];
    unint64_t v5 = (unint64_t)CGRectOffset(v15, v8, v10);
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 168);
    if (!v2 || (v3 = *(id *)(v2 + 8), (double v4 = v3) == 0))
    {
      double v4 = 0;
      id v3 = *(id *)(a1 + 160);
    }
    [v3 frame];
  }
  double v13 = *(double *)&v5;

  return v13;
}

- (BOOL)_safeAreaInsetsFrozen
{
  return (*((void *)&self->_viewFlags + 1) >> 61) & 1;
}

- (double)_safeAreaInsetsForFrame:(char)a3 inSuperview:(CGFloat)a4 ignoreViewController:(CGFloat)a5
{
  if (!a1) {
    return 0.0;
  }
  id v14 = *(id *)(a1 + 88);
  CGRect v15 = v14;
  if (v14 && (a3 & 1) == 0)
  {
    if ((*(void *)(a1 + 104) & 0x4000000000000000) == 0) {
      [v14 _updateContentOverlayInsetsFromParentIfNecessary];
    }
    [(id)a1 safeAreaInsets];
    double v17 = v16;
    goto LABEL_16;
  }
  if (a2)
  {
    if ((*(unsigned char *)(a1 + 120) & 0x10) != 0)
    {
      double v19 = [a2 superview];
      double v20 = v19;
      if (a2[11])
      {
        BOOL v21 = a2;
LABEL_15:
        char v22 = [v20 _edgesPropagatingSafeAreaInsetsToSubviews];
        [v20 bounds];
        CGFloat v24 = v23;
        CGFloat v26 = v25;
        CGFloat v28 = v27;
        CGFloat v30 = v29;
        [v21 safeAreaInsets];
        double v17 = _UIEdgeInsetsPropagatedToChildRectOnEdges(v22, v31, v32, v33, v34, v24, v26, v28, v30, a4, a5, a6, a7);

        goto LABEL_16;
      }
      CGRect v18 = v19;
    }
    else
    {
      CGRect v18 = a2;
    }
    BOOL v21 = v18;
    double v20 = v18;
    goto LABEL_15;
  }
  double v17 = 0.0;
LABEL_16:

  return v17;
}

- (CGRect)bounds
{
  if (self)
  {
    [(CALayer *)self->_layer bounds];
  }
  else
  {
    double v3 = 0.0;
    double v4 = 0.0;
    double v5 = 0.0;
    double v2 = 0.0;
  }
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

- (UIEdgeInsets)safeAreaInsets
{
  double top = self->_safeAreaInsets.top;
  double left = self->_safeAreaInsets.left;
  double bottom = self->_safeAreaInsets.bottom;
  double right = self->_safeAreaInsets.right;
  result.double right = right;
  result.double bottom = bottom;
  result.double left = left;
  result.double top = top;
  return result;
}

- (unint64_t)_edgesPropagatingSafeAreaInsetsToSubviews
{
  return 15;
}

- (void)setNeedsLayout
{
  if ((*((void *)&self->_viewFlags + 1) & 0x20) == 0)
  {
    if (pthread_main_np() != 1) {
      -[UIView _raiseExceptionForBackgroundThreadLayout]((id *)&self->super.super.isa);
    }
    uint64_t viewFlags = (uint64_t)self->_viewFlags;
    if (((viewFlags & 0x400000000000000) != 0 || (viewFlags & 0x800080000000000) == 0x800080000000000)
      && (_UIAppUseModernRotationAndPresentationBehaviors()
       || ((viewDelegate = self->_viewDelegate,
            int v5 = [(UIViewController *)viewDelegate _appearState],
            viewDelegate)
         ? (BOOL v6 = v5 == 1)
         : (BOOL v6 = 1),
           !v6 ? (BOOL v7 = v5 == 2) : (BOOL v7 = 1),
           v7)))
    {
      CGFloat v8 = [(UIView *)self _viewsJostledDuringUpdateConstraintsPass];
      id v11 = v8;
      if (v8)
      {
        [v8 addObject:self];
      }
      else
      {
        [(UIView *)self _is_setNeedsLayout];
        CGFloat v10 = +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger];
        [v10 willSendSetNeedsLayoutToLayerOfView:self];

        [(CALayer *)self->_layer setNeedsLayout];
        if (__UILogIdenticalLayouts) {
          -[UIView _pushLayoutHash](self);
        }
      }
    }
    else
    {
      double v9 = +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger];
      [v9 willSendSetNeedsLayoutToLayerOfView:self];

      [(CALayer *)self->_layer setNeedsLayout];
      if (__UILogIdenticalLayouts)
      {
        -[UIView _pushLayoutHash](self);
      }
    }
  }
}

- (BOOL)_shouldInvalidateBaselineConstraintsForSize:(CGSize)a3 oldSize:(CGSize)a4
{
  BOOL result = 0;
  if ((*(void *)&self->_viewFlags & 0x400000000000000) != 0)
  {
    BOOL v4 = a3.width == a4.width && a3.height == a4.height;
    if (!v4 && [(UIView *)self _hasBaseline]) {
      return 1;
    }
  }
  return result;
}

- (void)_synchronizeAutoLayoutWithCALayoutIfNecessaryForOldBounds:(double)a3 updateSuperview:(double)a4
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting](a1))
    {
      if ((*(void *)(a1 + 96) & 0x8000000000000000) == 0)
      {
        if (([*(id *)(a1 + 160) needsLayout] & 1) != 0
          || [*(id *)(a1 + 160) needsLayoutOnGeometryChange]
          && ([(id)a1 bounds],
              (_UIRectEquivalentToRectWithAccuracy(a3, a4, a5, a6, v12, v13, v14, v15, 0.00000011920929) & 1) == 0))
        {
          objc_msgSend((id)a1, "_is_setNeedsLayout");
        }
      }
    }
    if (a2)
    {
      if (dyld_program_sdk_at_least()) {
        goto LABEL_10;
      }
      if ((*(void *)(a1 + 96) & 0x8000000000000000) == 0)
      {
        if (qword_1EB25C1B8 != -1) {
          dispatch_once(&qword_1EB25C1B8, &__block_literal_global_1206);
        }
        if (!byte_1EB25C0AD)
        {
          if (([(id)a1 translatesAutoresizingMaskIntoConstraints] & 1) != 0
            || ![(id)a1 _wantsAutolayout])
          {
            goto LABEL_10;
          }
          CGRect v18 = -[UIView __viewDelegate]((id *)a1);
          double v19 = [v18 parentViewController];
          if (!v19
            || ([v18 navigationController],
                double v20 = objc_claimAutoreleasedReturnValue(),
                v20,
                v20 != v19))
          {

LABEL_10:
            double v23 = [(id)a1 superview];
            int v16 = [v23 _wantsAutolayout];
            double v17 = v23;
            if (v16 && (v23[12] & 0x8000000000000000) == 0)
            {
              objc_msgSend(v23, "_is_setNeedsLayout");
              double v17 = v23;
            }

            return;
          }
          if (os_variant_has_internal_diagnostics())
          {
            char v22 = __UIFaultDebugAssertLog();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412290;
              double v25 = v18;
              _os_log_fault_impl(&dword_1853B0000, v22, OS_LOG_TYPE_FAULT, "Setting translatesAutoresizingMaskIntoContraints to NO for the view of a view controller that is pushed on a UINavigationController is not supported and at high risk of a layout feedback loop when built on iOS 13.0 or later. Problem occurs for %@", buf, 0xCu);
            }
          }
          else
          {
            BOOL v21 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C1C0) + 8);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              double v25 = v18;
              _os_log_impl(&dword_1853B0000, v21, OS_LOG_TYPE_ERROR, "Setting translatesAutoresizingMaskIntoContraints to NO for the view of a view controller that is pushed on a UINavigationController is not supported and at high risk of a layout feedback loop when built on iOS 13.0 or later. Problem occurs for %@", buf, 0xCu);
            }
          }
        }
      }
    }
  }
}

- (uint64_t)_wantsAutolayoutOrIsGuardingForEngineHosting
{
  if (result)
  {
    uint64_t v1 = result;
    if ((*(void *)(result + 96) & 0x400000000000000) != 0)
    {
      return 1;
    }
    else
    {
      if (qword_1EB25A6C0 != -1) {
        dispatch_once(&qword_1EB25A6C0, &__block_literal_global_855_0);
      }
      if (byte_1EB25A5B2)
      {
        return -[UIView _usesLayoutEngineHostingConstraints](v1);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

- (void)_updateSublayerGeometry
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v2 = *(id *)(a1 + 160);
    uint64_t v3 = *(void *)(a1 + 168);
    if (v3)
    {
      id v4 = *(id *)(v3 + 8);
      if (v4)
      {
        int v5 = v4;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        BOOL v6 = -[UIView _backing_layers]((void *)a1);
        uint64_t v7 = [v6 countByEnumeratingWithState:&v26 objects:v30 count:16];
        if (!v7) {
          goto LABEL_22;
        }
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)v27;
        while (1)
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v27 != v9) {
              objc_enumerationMutation(v6);
            }
            id v11 = *(id *)(*((void *)&v26 + 1) + 8 * i);
            objc_msgSend(v5, "bounds", (void)v26);
            double MidX = CGRectGetMidX(v32);
            [v5 bounds];
            double MidY = CGRectGetMidY(v33);
            [v11 bounds];
            double v15 = v14;
            [v11 bounds];
            double v17 = v16;
            [v5 bounds];
            double Width = CGRectGetWidth(v34);
            [v5 bounds];
            double Height = CGRectGetHeight(v35);
            id v20 = (id)[v11 unsafeUnretainedDelegate];
            if (v20)
            {
              BOOL v21 = v20;
              if (_IsKindOfUIView((uint64_t)v20)) {
                char v22 = v21;
              }
              else {
                char v22 = 0;
              }
              id v23 = v22;
              id v24 = v23;
              if (v23) {
                BOOL v25 = v11 == v2;
              }
              else {
                BOOL v25 = 1;
              }
              if (!v25)
              {
                objc_msgSend(v23, "_privateSubview_updateGeometryWithCenter:bounds:", MidX, MidY, v15, v17, Width, Height);
                goto LABEL_20;
              }
            }
            else
            {
              id v24 = 0;
            }
            objc_msgSend(v11, "setPosition:", MidX, MidY);
            objc_msgSend(v11, "setBounds:", v15, v17, Width, Height);
            BOOL v21 = v24;
LABEL_20:
          }
          uint64_t v8 = [v6 countByEnumeratingWithState:&v26 objects:v30 count:16];
          if (!v8)
          {
LABEL_22:

            break;
          }
        }
      }
    }
  }
}

- (void)_backing_setFrame:(double)y
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 122))
    {
      CGFloat v10 = [(id)a1 superview];
      [v10 bounds];
      double v12 = v11;
      double v14 = v13;

      -[UIView _setIntermediateLayerMaskFrameOrigin:]((void *)a1);
      v19.origin.double x = x;
      v19.origin.double y = y;
      v19.size.double width = width;
      v19.size.double height = height;
      CGRect v20 = CGRectOffset(v19, -v12, -v14);
      double x = v20.origin.x;
      double y = v20.origin.y;
      double width = v20.size.width;
      double height = v20.size.height;
    }
    uint64_t v15 = *(void *)(a1 + 168);
    if (!v15 || (v16 = *(id *)(v15 + 8), (double v17 = v16) == 0))
    {
      double v17 = 0;
      id v16 = *(id *)(a1 + 160);
    }
    objc_msgSend(v16, "setFrame:", x, y, width, height);

    -[UIView _updateSublayerGeometry](a1);
  }
}

- (void)_updateInferredLayoutMargins
{
  uint64_t v3 = [(UIView *)self superview];
  [(UIView *)self _updateInferredLayoutMarginsFromSuperview:v3];
}

- (BOOL)layoutMarginsFollowReadableWidth
{
  return (*((unsigned __int8 *)&self->_viewFlags + 21) >> 4) & 1;
}

- (BOOL)nsli_lowerAttribute:(int)a3 intoExpression:(id)a4 withCoefficient:(double)a5 forConstraint:(id)a6 onBehalfOfLayoutGuide:(id)a7
{
  uint64_t v10 = *(void *)&a3;
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v100 = 0;
  memset(v99, 0, sizeof(v99));
  int v13 = _UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_UIViewDebugSignposts, @"UIViewDebugSignposts");
  v98[0] = MEMORY[0x1E4F143A8];
  v98[1] = 3221225472;
  v98[2] = __122__UIView_AdditionalLayoutSupport__nsli_lowerAttribute_intoExpression_withCoefficient_forConstraint_onBehalfOfLayoutGuide___block_invoke;
  v98[3] = &unk_1E530E778;
  v98[4] = self;
  double v14 = (void *)[(NSISEngine *)[(UIView *)self _layoutEngine] delegate];
  if ((dyld_program_sdk_at_least() & 1) == 0
    && (!v14 || ([v14 _forceLayoutEngineSolutionInRationalEdges] & 1) == 0))
  {
    BOOL v20 = [(UIView *)self _old_nsli_lowerAttribute:v10 intoExpression:a4 withCoefficient:a6 forConstraint:a5];
    goto LABEL_211;
  }
  uint64_t v15 = (UIView *)[a6 container];
  if (!v15 || [(UIView *)self isDescendantOfView:v15])
  {
    [(UIView *)self superview];
    uint64_t v16 = kdebug_trace();
    context = (void *)MEMORY[0x18C108260](v16);
    SEL v83 = a2;
    if (a7) {
      double v17 = a7;
    }
    else {
      double v17 = self;
    }
    v85 = v17;
    int v18 = [a4 isConstant];
    if (v18)
    {
      CGRect v19 = (UIView *)[a6 secondItem];
      unsigned int v88 = [a6 secondAttribute];
    }
    else
    {
      CGRect v19 = (UIView *)[a6 firstItem];
      unsigned int v88 = [a6 firstAttribute];
    }
    v89 = v15;
    v90 = [(UIView *)v19 _referenceView];
    id v87 = a6;
    if (v10 == 101)
    {
      int v21 = 1;
      unsigned int v22 = 7;
    }
    else if (v10 == 102)
    {
      int v21 = 1;
      unsigned int v22 = 8;
    }
    else
    {
      int v21 = 0;
      unsigned int v22 = v10;
    }
    int has_internal_diagnostics = os_variant_has_internal_diagnostics();
    if (a7) {
      int v28 = v21;
    }
    else {
      int v28 = 0;
    }
    if (has_internal_diagnostics)
    {
      if (!v28)
      {
LABEL_28:
        if (a7) {
          int v29 = 0;
        }
        else {
          int v29 = v21;
        }
        if (a7) {
          char v30 = 1;
        }
        else {
          char v30 = v21;
        }
        if ((v30 & 1) == 0)
        {
          int v29 = 0;
          if (v22 <= 0x25 && ((1 << v22) & 0x3F001FFE7FLL) != 0)
          {
            int v29 = 0;
            if (v19 != self)
            {
              if (v19)
              {
                if (v19 == v90)
                {
                  int v29 = [(UIView *)self _supportsContentDimensionVariables];
                  if (v29) {
                    int v29 = ![(UIView *)v19 _isFloatingLayoutItem]
                  }
                       && [(UIView *)v19 isDescendantOfView:self];
                }
              }
            }
          }
        }
LABEL_35:
        int v84 = v29;
        [(UIView *)self nsli_engineToUserScalingCoefficients];
        double v33 = v32;
        if (v10 <= 0x25 && ((1 << v10) & 0x2A00119D19) != 0) {
          double v33 = v31;
        }
        double v34 = 0.0;
        if (a7)
        {
          int v35 = 0;
          double v36 = (UIView *)a7;
          goto LABEL_68;
        }
        if ((v10 - 11) > 1)
        {
          int v35 = 0;
          double v36 = self;
          goto LABEL_68;
        }
        double v36 = [(UIView *)self _viewForLoweringBaselineLayoutAttribute:v10];
        [(UIView *)v36 _baselineOffsetFromNearestEdgeForLayoutAttribute:v10];
        double v34 = v37;
        if (!self || ![(UIView *)self _recordBaselineLoweringInfo])
        {
LABEL_67:
          int v35 = 1;
LABEL_68:
          char v42 = [(UIView *)v36 _referenceView];
          double v43 = 1.0 / v33;
          double v44 = a5 / (1.0 / v33);
          if (v22 <= 0x12 && ((1 << v22) & 0x60060) != 0 || (BOOL v48 = 0, v88 <= 0x12) && ((1 << v88) & 0x60060) != 0)
          {
            int v45 = [(id)UIApp pureUserInterfaceLayoutDirection] == 1;
            if (v19)
            {
              if (v36)
              {
                if (v42)
                {
                  if (v90)
                  {
                    id v46 = [(UIView *)v90 _firstCommonAncestorToView:v42 givenCommonAncestor:v89];
                    if (v46) {
                      int v45 = [v46 _shouldReverseLayoutDirection];
                    }
                  }
                }
              }
            }
            double v47 = -v44;
            if (((1 << v22) & 0x60060) == 0) {
              double v47 = a5 / (1.0 / v33);
            }
            if (v22 > 0x12) {
              double v47 = a5 / (1.0 / v33);
            }
            BOOL v49 = v45 == 0;
            BOOL v48 = v45 != 0;
            if (!v49) {
              double v44 = v47;
            }
          }
          if ((int)v22 > 16)
          {
            if (v22 != 17)
            {
              if (v22 != 18) {
                goto LABEL_100;
              }
              BOOL v49 = !v48;
              int v50 = 13;
              goto LABEL_89;
            }
            BOOL v51 = !v48;
            int v52 = 13;
          }
          else
          {
            if (v22 != 5)
            {
              if (v22 != 6) {
                goto LABEL_100;
              }
              BOOL v49 = !v48;
              int v50 = 1;
LABEL_89:
              if (v49) {
                unsigned int v22 = v50 + 1;
              }
              else {
                unsigned int v22 = v50;
              }
              goto LABEL_100;
            }
            BOOL v51 = !v48;
            int v52 = 1;
          }
          if (v51) {
            unsigned int v22 = v52;
          }
          else {
            unsigned int v22 = v52 + 1;
          }
LABEL_100:
          char v53 = v35 ^ 1;
          if ((v10 - 13) > 7) {
            char v53 = 1;
          }
          if ((v53 & 1) == 0) {
            objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", v83, self, @"NSLayoutConstraint_UIKitAdditions.m", 5879, @"Internal error, attribute not supported");
          }
          [(UIView *)self nsli_engineToUserScalingCoefficients];
          if (v10 <= 0x25 && ((1 << v10) & 0x2A00119D19) != 0) {
            double v54 = v55;
          }
          if (v44 >= 0.0) {
            double v56 = v54;
          }
          else {
            double v56 = -v54;
          }
          double v57 = v44;
          if (v19)
          {
            if (v10 > 0x25 || (double v57 = v44, ((1 << v10) & 0x3F00000181) == 0))
            {
              [v87 multiplier];
              if (v89 != self || a7 != 0 || v19 == self) {
                double v64 = v44;
              }
              else {
                double v64 = v56;
              }
              if (v61 == 1.0) {
                double v57 = v44;
              }
              else {
                double v57 = v64;
              }
            }
          }
          switch(v22)
          {
            case 1u:
            case 0xDu:
            case 0x20u:
              uint64_t v59 = [(UIView *)v36 nsli_minXVariable];
              goto LABEL_130;
            case 2u:
            case 0xEu:
            case 0x24u:
              objc_msgSend(a4, "addVariable:coefficient:", -[UIView nsli_minXVariable](v36, "nsli_minXVariable"), v57);
              if (v84) {
                goto LABEL_126;
              }
              goto LABEL_145;
            case 3u:
            case 0xCu:
            case 0xFu:
            case 0x21u:
              if (v35) {
                [a4 incrementConstant:v43 * (v34 * v44)];
              }
              goto LABEL_129;
            case 4u:
            case 0xBu:
            case 0x10u:
            case 0x25u:
              if (v35) {
                [a4 incrementConstant:v43 * -(v44 * v34)];
              }
              objc_msgSend(a4, "addVariable:coefficient:", -[UIView nsli_minYVariable](v36, "nsli_minYVariable"), v57);
              if (v84) {
                goto LABEL_119;
              }
              goto LABEL_149;
            case 5u:
              long long v65 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
              v66 = @"Internal error, _NSLayoutAttributeLeading should have been resolved to left or right previously";
              uint64_t v67 = 5897;
              goto LABEL_147;
            case 6u:
              long long v65 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
              v66 = @"Internal error, _NSLayoutAttributeTrailing should have been resolved to left or right previously";
              uint64_t v67 = 5900;
LABEL_147:
              [v65 handleFailureInMethod:v83 object:self file:@"NSLayoutConstraint_UIKitAdditions.m" lineNumber:v67 description:v66];
              break;
            case 7u:
              if (v84) {
LABEL_126:
              }
                uint64_t v58 = [(UIView *)v36 nsli_contentWidthVariable];
              else {
LABEL_145:
              }
                uint64_t v58 = [(UIView *)v36 nsli_boundsWidthVariable];
              goto LABEL_150;
            case 8u:
              if (v84) {
LABEL_119:
              }
                uint64_t v58 = [(UIView *)v36 nsli_contentHeightVariable];
              else {
LABEL_149:
              }
                uint64_t v58 = [(UIView *)v36 nsli_boundsHeightVariable];
LABEL_150:
              uint64_t v60 = v58;
              double v57 = v44;
              goto LABEL_151;
            case 9u:
            case 0x13u:
            case 0x22u:
              if (v48 && (v88 <= 0x12 && ((1 << v88) & 0x60060) != 0 || v88 == 9))
              {
                double v44 = -v44;
                double v56 = -v56;
                double v57 = -v57;
              }
              objc_msgSend(a4, "addVariable:coefficient:", -[UIView nsli_boundsWidthVariable](v36, "nsli_boundsWidthVariable"), v44 * 0.5);
              objc_msgSend(a4, "addVariable:coefficient:", -[UIView nsli_minXVariable](v36, "nsli_minXVariable"), v57);
              break;
            case 0xAu:
            case 0x14u:
            case 0x23u:
              objc_msgSend(a4, "addVariable:coefficient:", -[UIView nsli_boundsHeightVariable](v36, "nsli_boundsHeightVariable"), v44 * 0.5);
LABEL_129:
              uint64_t v59 = [(UIView *)v36 nsli_minYVariable];
LABEL_130:
              uint64_t v60 = v59;
LABEL_151:
              [a4 addVariable:v60 coefficient:v57];
              break;
            default:
              break;
          }
          if (dyld_program_sdk_at_least())
          {
            if (v22 <= 0x25 && ((1 << v22) & 0x3F00000181) != 0) {
              goto LABEL_181;
            }
            int v68 = 1;
            if (v88 <= 0x25 && ((1 << v88) & 0x3F00000181) != 0) {
              goto LABEL_181;
            }
          }
          else
          {
            BOOL v69 = (void *)[v87 firstItem] == v85 && objc_msgSend(v87, "secondItem") == 0;
            int v70 = 1;
            if (v22 <= 0x25 && ((1 << v22) & 0x3F001FFE7FLL) != 0) {
              int v70 = v69;
            }
            int v68 = v70 ^ 1;
          }
          if (v36 != v89 && v68)
          {
            if (v22 <= 0x25 && ((1 << v22) & 0x2A00119D19) != 0)
            {
              if (v36 != v42)
              {
                uint64_t v71 = [(UIView *)v42 nsli_minYVariable];
                int v72 = 0;
LABEL_171:
                [a4 addVariable:v71 coefficient:v56];
                goto LABEL_173;
              }
              int v72 = 0;
            }
            else
            {
              if (v36 != v42)
              {
                uint64_t v71 = [(UIView *)v42 nsli_minXVariable];
                int v72 = 1;
                goto LABEL_171;
              }
              int v72 = 1;
            }
LABEL_173:
            if (v42 != v89)
            {
              for (uint64_t i = [(UIView *)v42 superview]; i; uint64_t i = [(UIView *)i superview])
              {
                uint64_t v74 = (uint64_t)(v72
                              ? [(UIView *)i nsli_minXVariable]
                              : [(UIView *)i nsli_minYVariable]);
                [a4 addVariable:v74 coefficient:v56];
                if (i == v89) {
                  break;
                }
              }
            }
          }
LABEL_181:
          if ([(UIView *)v19 _uili_isFocusGuide]) {
            v75 = v19;
          }
          else {
            v75 = v90;
          }
          if (v75 && v75 != self && ((v10 - 1) < 6 || (v10 - 9) <= 1))
          {
            v92[0] = MEMORY[0x1E4F143A8];
            v92[1] = 3221225472;
            v93 = __122__UIView_AdditionalLayoutSupport__nsli_lowerAttribute_intoExpression_withCoefficient_forConstraint_onBehalfOfLayoutGuide___block_invoke_554;
            v94 = &unk_1E530E8B0;
            int v97 = v10;
            id v95 = a4;
            double v96 = v44;
            if ([(UIView *)self _isFloatingLayoutItem]
              && [(UIView *)v90 _supportsContentDimensionVariables]
              && [(UIView *)self superview] == v19)
            {
              v93((uint64_t)v92, v19);
            }
            else
            {
              BOOL v76 = [(UIView *)v90 _supportsContentDimensionVariables];
              BOOL v77 = v90 != v19 && v76;
              if (!v77
                || v19 == (UIView *)[(UIView *)v90 _contentLayoutGuideIfExists]
                || v19 == (UIView *)[(UIView *)v90 _contentMarginsGuideIfExists])
              {
                if (v90 && v42 != v89) {
                  char v42 = [(UIView *)v42 _firstCommonAncestorToView:v90 givenCommonAncestor:v89];
                }
                if (v42 != self)
                {
                  for (j = [(UIView *)self superview]; j && j != v42; j = [(UIView *)j superview])
                  {
                    if ([(UIView *)j _supportsContentDimensionVariables]) {
                      v93((uint64_t)v92, j);
                    }
                  }
                }
              }
              else if (![(UIView *)v90 isDescendantOfView:self])
              {
                v93((uint64_t)v92, v90);
              }
            }
          }
          [(UIView *)self superview];
          kdebug_trace();
          BOOL v20 = 1;
          goto LABEL_211;
        }
        v82 = objc_alloc_init(_UIViewBaselineLoweringInfo);
        [(_UIViewBaselineLoweringInfo *)v82 setBaselineView:v36];
        [(_UIViewBaselineLoweringInfo *)v82 setBaselineOffset:v34];
        if (v87)
        {
          if (v18)
          {
            if ([v87 firstAttribute] - 11 < 2)
            {
              id AssociatedObject = objc_getAssociatedObject(v87, &unk_1EB25A5B4);
              if ([AssociatedObject count] != 2)
              {
                *(void *)buf = v82;
                uint64_t v41 = 1;
LABEL_65:
                objc_setAssociatedObject(v87, &unk_1EB25A5B4, (id)[MEMORY[0x1E4F1C978] arrayWithObjects:buf count:v41], (void *)1);
                goto LABEL_66;
              }
              *(void *)buf = v82;
              *(void *)&buf[8] = [AssociatedObject objectAtIndexedSubscript:1];
LABEL_64:
              uint64_t v41 = 2;
              goto LABEL_65;
            }
          }
          else if ([v87 secondAttribute] - 11 < 2)
          {
            id v39 = objc_getAssociatedObject(v87, &unk_1EB25A5B4);
            if ([v39 count]) {
              uint64_t v40 = [v39 objectAtIndexedSubscript:0];
            }
            else {
              uint64_t v40 = [MEMORY[0x1E4F1CA98] null];
            }
            *(void *)buf = v40;
            *(void *)&buf[8] = v82;
            goto LABEL_64;
          }
        }
LABEL_66:

        goto LABEL_67;
      }
      v80 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = a7;
        _os_log_fault_impl(&dword_1853B0000, v80, OS_LOG_TYPE_FAULT, "Unexpectedly lowering a content size attribute for a layout guide. layoutGuide = %@", buf, 0xCu);
      }
    }
    else
    {
      if (!v28) {
        goto LABEL_28;
      }
      v81 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25A6B0) + 8);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = a7;
        _os_log_impl(&dword_1853B0000, v81, OS_LOG_TYPE_ERROR, "Unexpectedly lowering a content size attribute for a layout guide. layoutGuide = %@", buf, 0xCu);
      }
    }
    if (a7) {
      int v29 = 0;
    }
    else {
      int v29 = v21;
    }
    goto LABEL_35;
  }
  id v23 = *(NSObject **)(__UILogGetCategoryCachedImpl("LayoutConstraints", &qword_1EB25A6A8) + 8);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    uint64_t v24 = [(UIView *)v15 performSelector:sel_recursiveDescription];
    BOOL v25 = [(UIView *)self superview];
    long long v26 = @"NO SUPERVIEW";
    *(_DWORD *)buf = 138413058;
    if (v25) {
      long long v26 = (__CFString *)v25;
    }
    *(void *)&uint8_t buf[4] = a6;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v24;
    __int16 v102 = 2112;
    v103 = self;
    __int16 v104 = 2112;
    v105 = v26;
    _os_log_impl(&dword_1853B0000, v23, OS_LOG_TYPE_ERROR, "View hierarchy unprepared for constraint.\n\tConstraint: %@\n\tContainer hierarchy: \n%@\n\tView not found in container hierarchy: %@\n\tThat view's superview: %@", buf, 0x2Au);
  }
  BOOL v20 = 0;
LABEL_211:
  if (LODWORD(v99[0])) {
    kdebug_trace();
  }
  return v20;
}

- (CGSize)nsli_engineToUserScalingCoefficients
{
  uint64_t v3 = [(UIView *)self _layoutEngine];
  if (self)
  {
    if (v3) {
      [(NSISEngine *)v3 engineScalingCoefficients];
    }
    else {
      double v4 = -[UIView _preferredLayoutEngineToUserScalingCoefficients](self);
    }
  }
  else
  {
    double v5 = 0.0;
    double v4 = 0.0;
  }
  result.double height = v5;
  result.double width = v4;
  return result;
}

- (NSISEngine)_layoutEngine
{
  return self->_layoutEngine;
}

- (BOOL)isDescendantOfView:(UIView *)view
{
  if (!view) {
    return 0;
  }
  BOOL v3 = self != 0;
  if (self && self != view)
  {
    do
    {
      self = (UIView *)[(UIView *)self superview];
      BOOL v3 = self != 0;
    }
    while (self != view && self);
  }
  return v3;
}

- (UIView)superview
{
  if ((*(void *)&self->_viewFlags & 0x8000000) == 0) {
    return 0;
  }
  Superlayer = (void *)CALayerGetSuperlayer();
  return (UIView *)[Superlayer unsafeUnretainedDelegate];
}

- (BOOL)_supportsContentDimensionVariables
{
  return 0;
}

- (void)_setViewDelegateContentOverlayInsetsAreClean:(BOOL)a3
{
  uint64_t v3 = 0x4000000000000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_viewFlags + 1) = *((void *)&self->_viewFlags + 1) & 0xBFFFFFFFFFFFFFFFLL | v3;
}

- (BOOL)_uili_isFocusGuide
{
  return 0;
}

- (id)nsli_minYVariable
{
  id result = self->_minYVariable;
  if (!result)
  {
    id result = _UILayoutItemCreateAndObserveVariableWithValueRestriction(self, 0, 1);
    self->_minYVariable = (NSISVariable *)result;
  }
  return result;
}

- (id)nsli_minXVariable
{
  id result = self->_minXVariable;
  if (!result)
  {
    id result = _UILayoutItemCreateAndObserveVariableWithValueRestriction(self, 0, 1);
    self->_minXVariable = (NSISVariable *)result;
  }
  return result;
}

- (BOOL)_isFloatingLayoutItem
{
  return 0;
}

- (void)_updateReadableContentGuideConstraintsIfNecessary
{
  if (a1)
  {
    id v2 = (void *)a1[34];
    if (v2)
    {
      uint64_t v3 = [v2 _systemConstraints];
      double v4 = [v3 lastObject];

      LODWORD(v3) = os_variant_has_internal_diagnostics();
      uint64_t v5 = [v4 firstAttribute];
      if (v3)
      {
        if (v5 != 7)
        {
          BOOL v6 = __UIFaultDebugAssertLog();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "The readableWidthConstraint should be a width constraint. If this is not true, something has changed and the assumption that the last of the _systemConstraints is the readableWidthConstraint may not be true!", buf, 2u);
          }
        }
      }
      else if (v5 != 7)
      {
        uint64_t v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_updateReadableContentGuideConstraintsIfNecessary___s_category)+ 8);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v9 = 0;
          _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "The readableWidthConstraint should be a width constraint. If this is not true, something has changed and the assumption that the last of the _systemConstraints is the readableWidthConstraint may not be true!", v9, 2u);
        }
      }
      [v4 setConstant:_UIViewReadableWidthForView(a1)];
    }
  }
}

- (void)_is_setNeedsLayout
{
  *(void *)&self->_viewFlags &= ~0x40000000000000uLL;
}

- (id)_viewsJostledDuringUpdateConstraintsPassSuppressingDebugAssertion:(BOOL)a3
{
  uint64_t v3 = [(UIView *)self _layoutEngine];
  double v4 = [v3 delegate];

  if (v4 && (v4[13] & 0x20) != 0)
  {
    uint64_t v5 = objc_getAssociatedObject(v4, &_UIViewsJostledDuringUpdateConstraintsPassKey);
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

- (BOOL)_shouldReverseLayoutDirection
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 19) & 1;
}

- (id)_viewsJostledDuringUpdateConstraintsPass
{
  return [(UIView *)self _viewsJostledDuringUpdateConstraintsPassSuppressingDebugAssertion:0];
}

+ (UIUserInterfaceLayoutDirection)userInterfaceLayoutDirectionForSemanticContentAttribute:(UISemanticContentAttribute)attribute
{
  uint64_t v4 = [(id)UIApp userInterfaceLayoutDirection];
  return +[UIView userInterfaceLayoutDirectionForSemanticContentAttribute:attribute relativeToLayoutDirection:v4];
}

- (id)_firstCommonAncestorToView:(id)a3 givenCommonAncestor:(id)a4
{
  BOOL v6 = (UIView *)a3;
  uint64_t v7 = (UIView *)a4;
  uint64_t v8 = v7;
  if (!v6)
  {
    self = 0;
    goto LABEL_21;
  }
  if (v6 == self) {
    goto LABEL_18;
  }
  if (self == v7 || v6 == v7)
  {
    int v18 = v7;
    goto LABEL_20;
  }
  uint64_t v9 = [(UIView *)self superview];

  if (v9 == v6)
  {
LABEL_18:
    int v18 = v6;
LABEL_20:
    self = v18;
    goto LABEL_21;
  }
  uint64_t v10 = [(UIView *)v6 superview];

  if (v10 == self)
  {
    int v18 = self;
    goto LABEL_20;
  }
  double v11 = [(UIView *)self _window];
  uint64_t v12 = [(UIView *)v6 _window];
  int v13 = (void *)v12;
  if (v11 && v12 && v11 != (void *)v12) {
    goto LABEL_39;
  }
  uint64_t v14 = [(UIView *)self superview];
  uint64_t v15 = (UIView *)v14;
  uint64_t v16 = 0;
  if (v14 && (UIView *)v14 != v8)
  {
    uint64_t v16 = 0;
    while (v15 != v6)
    {
      ++v16;
      double v17 = [(UIView *)v15 superview];

      if (v17)
      {
        uint64_t v15 = v17;
        if (v17 != v8) {
          continue;
        }
      }
      goto LABEL_26;
    }
    self = v6;
    goto LABEL_40;
  }
  double v17 = (UIView *)v14;
LABEL_26:
  if (v8 && !v17) {
    goto LABEL_39;
  }
  BOOL v20 = [(UIView *)v6 superview];

  uint64_t v21 = 0;
  if (v20 && v20 != v8)
  {
    uint64_t v21 = 0;
    while (v20 != self)
    {
      ++v21;
      unsigned int v22 = [(UIView *)v20 superview];

      if (v22)
      {
        BOOL v20 = v22;
        if (v22 != v8) {
          continue;
        }
      }
      goto LABEL_37;
    }
    goto LABEL_40;
  }
  unsigned int v22 = v20;
LABEL_37:
  if (v8 && !v22)
  {
LABEL_39:
    self = 0;
  }
  else
  {

    id v23 = self;
    uint64_t v24 = v6;
    BOOL v25 = v16 < v21;
    if (v16 <= v21)
    {
      while (v25)
      {
        int v28 = v24;
        uint64_t v24 = [(UIView *)v24 superview];

        BOOL v25 = v16 < --v21;
      }
    }
    else
    {
      do
      {
        long long v26 = v23;
        id v23 = [(UIView *)v23 superview];

        --v16;
      }
      while (v16 > v21);
    }
    if (v23 == v24)
    {
      self = v23;
    }
    else
    {
      do
      {
        self = [(UIView *)v23 superview];

        long long v27 = [(UIView *)v24 superview];

        uint64_t v24 = v27;
        id v23 = self;
      }
      while (self != v27);
    }
  }
LABEL_40:

LABEL_21:
  return self;
}

- (void)nsli_addConstraint:(id)a3
{
  kdebug_trace();
  -[UIView _tryToAddConstraint:roundingAdjustment:mutuallyExclusiveConstraints:]((uint64_t)self, a3, 0, 0.0);
  [(UIView *)self _scheduleFaultingInGuidesForConstraint:a3];
  if (kdebug_is_enabled())
  {
    objc_msgSend((id)objc_msgSend(a3, "description"), "UTF8String");
    kdebug_trace_string();
    kdebug_trace();
  }
}

- (uint64_t)_tryToAddConstraint:(uint64_t)a3 roundingAdjustment:(double)a4 mutuallyExclusiveConstraints:
{
  if (result)
  {
    uint64_t v7 = (void *)result;
    uint64_t v8 = [a2 container];
    if ((void *)v8 == v7) {
      return 1;
    }
    uint64_t v9 = (void *)v8;
    if (v8)
    {
      id v10 = a2;
      [v9 removeConstraint:a2];
    }
    [v7 _layoutEngineCreateIfNecessary];
    objc_msgSend((id)objc_msgSend(v7, "_constraintsArray"), "addObject:", a2);
    if (NSLayoutConstraintIsPotentiallyDanglyInContainer()) {
      v7[12] |= 0x10000000000000uLL;
    }
    if (-[UIView _layoutEngine_didAddLayoutConstraint:roundingAdjustment:mutuallyExclusiveConstraints:](v7, a2, a3, a4))
    {
      return 1;
    }
    else
    {
      objc_msgSend((id)objc_msgSend(v7, "_constraintsExceptingSubviewAutoresizingConstraints"), "removeObject:", a2);
      return 0;
    }
  }
  return result;
}

- (void)_faultInGuidesForConstraint:(id)a3
{
  uint64_t v5 = (void *)[a3 firstItem];
  if (a3)
  {
    BOOL v6 = objc_msgSend((id)objc_msgSend(a3, "firstItem"), "_referenceView");
    uint64_t v7 = (void *)[a3 secondItem];
    uint64_t v8 = objc_msgSend((id)objc_msgSend(a3, "secondItem"), "_referenceView");
  }
  else
  {
    uint64_t v7 = (void *)[0 secondItem];
    BOOL v6 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = [a3 firstAttribute];
  uint64_t v10 = [a3 secondAttribute];
  uint64_t v11 = v10;
  BOOL v13 = (v9 - 13) < 8 && v5 == v6;
  BOOL v15 = (v10 - 13) < 8 && v7 == v8;
  if (!v13 && !v15)
  {
LABEL_25:
    if (!v6) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v13)
  {
    if (![v5 _requiresExplicitLayoutMarginsGuideForAttribute:v9 getAttributeForGuide:0])
    {
      objc_msgSend(v5, "nsli_layoutMarginsItem");
      if (!v15) {
        goto LABEL_25;
      }
      goto LABEL_23;
    }
    [v5 layoutMarginsGuide];
  }
  if (!v15) {
    goto LABEL_25;
  }
LABEL_23:
  if ([v7 _requiresExplicitLayoutMarginsGuideForAttribute:v11 getAttributeForGuide:0])
  {
    [v7 layoutMarginsGuide];
    goto LABEL_25;
  }
  objc_msgSend(v7, "nsli_layoutMarginsItem");
  if (v6) {
LABEL_26:
  }
    _UIViewEnumerateViewsForWhichConstraintIsVulnerableToScrollViewBoundsOrigin(v6, v9, v8, v7, self, (uint64_t)&__block_literal_global_186_0);
LABEL_27:
  if (v8)
  {
    _UIViewEnumerateViewsForWhichConstraintIsVulnerableToScrollViewBoundsOrigin(v8, v11, v6, v5, self, (uint64_t)&__block_literal_global_188_1);
  }
}

- (void)_scheduleFaultingInGuidesForConstraint:(id)a3
{
  if ([a3 firstItem])
  {
    if (!a3)
    {
      LOBYTE(v6) = [0 secondItem] != 0;
LABEL_11:
      objc_msgSend((id)objc_msgSend(a3, "firstItem"), "_addConstraintToBeProcessedAfterDecoding:", a3);
LABEL_12:
      if (!v6) {
        return;
      }
      goto LABEL_13;
    }
    BOOL v5 = objc_msgSend((id)objc_msgSend(a3, "firstItem"), "_referenceView") == 0;
  }
  else
  {
    BOOL v5 = 0;
  }
  if ([a3 secondItem])
  {
    if (!a3)
    {
      if (v5) {
        objc_msgSend((id)objc_msgSend(0, "firstItem"), "_addConstraintToBeProcessedAfterDecoding:", 0);
      }
LABEL_13:
      uint64_t v7 = (void *)[a3 secondItem];
      [v7 _addConstraintToBeProcessedAfterDecoding:a3];
      return;
    }
    BOOL v6 = objc_msgSend((id)objc_msgSend(a3, "secondItem"), "_referenceView") == 0;
  }
  else
  {
    BOOL v6 = 0;
  }
  if (v5 || v6)
  {
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  [(UIView *)self _faultInGuidesForConstraint:a3];
}

- (id)_constraintsArray
{
  constraintsExceptingSubviewAutoresizingConstraints = self->_constraintsExceptingSubviewAutoresizingConstraints;
  if (!constraintsExceptingSubviewAutoresizingConstraints)
  {
    uint64_t v4 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
    BOOL v5 = self->_constraintsExceptingSubviewAutoresizingConstraints;
    self->_constraintsExceptingSubviewAutoresizingConstraints = v4;

    constraintsExceptingSubviewAutoresizingConstraints = self->_constraintsExceptingSubviewAutoresizingConstraints;
  }
  return constraintsExceptingSubviewAutoresizingConstraints;
}

- (id)nsli_boundsHeightVariable
{
  id result = self->_boundsHeightVariable;
  if (!result)
  {
    id result = _UILayoutItemCreateAndObserveVariableWithValueRestriction(self, 1, 1);
    self->_boundsHeightVariable = (NSISVariable *)result;
  }
  return result;
}

- (id)nsli_boundsWidthVariable
{
  id result = self->_boundsWidthVariable;
  if (!result)
  {
    id result = _UILayoutItemCreateAndObserveVariableWithValueRestriction(self, 1, 1);
    self->_boundsWidthVariable = (NSISVariable *)result;
  }
  return result;
}

- (void)resizeSubviewsWithOldSize:(CGSize)a3
{
  CGFloat height = a3.height;
  CGFloat width = a3.width;
  BOOL v5 = [(UIView *)self subviews];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __46__UIView_Geometry__resizeSubviewsWithOldSize___block_invoke;
  v6[3] = &__block_descriptor_48_e15_v32__0_8Q16_B24l;
  *(CGFloat *)&v6[4] = width;
  *(CGFloat *)&v6[5] = height;
  [v5 enumerateObjectsWithOptions:2 usingBlock:v6];
}

- (double)_resolvedInferredLayoutMargins
{
  if (a1) {
    return _UIViewResolvedMargins((id *)a1, *(double *)(a1 + 344), *(double *)(a1 + 352), *(double *)(a1 + 360), *(double *)(a1 + 368));
  }
  else {
    return 0.0;
  }
}

- (void)_notifyReferenceViewSizeChange
{
  if ((*((void *)&self->_viewFlags + 1) & 0x2000000000) != 0) {
    +[UIDynamicAnimator _referenceViewSizeChanged:self];
  }
}

- (BOOL)_recordBaselineLoweringInfo
{
  return 0;
}

- (BOOL)_needsLayoutOnAnimatedFrameChangeForNewFrame:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  [(UIView *)self bounds];
  return v6 != height || v5 != width;
}

uint64_t __63__UIView_UIConstraintBasedLayout___faultInGuidesForConstraint___block_invoke(uint64_t a1, void *a2)
{
  return [a2 _faultInContentOffsetGuide];
}

uint64_t __63__UIView_UIConstraintBasedLayout___faultInGuidesForConstraint___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 _faultInContentOffsetGuide];
}

- (void)constraintsDidChangeInEngine:(id)a3
{
  if ((*((void *)&self->_viewFlags + 1) & 0x80) == 0) {
    [(UIView *)self _invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel];
  }
}

- (void)__swift_setPresentationValue:(id)a3 velocity:(id)a4 preferredFrameRateRangeMaximum:(int64_t)a5 immediate:(BOOL)a6 key:(id)a7
{
  if (!a3)
  {
    memset(v20, 0, sizeof(v20));
    swift_unknownObjectRetain();
    id v14 = a7;
    BOOL v15 = self;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    memset(v19, 0, sizeof(v19));
    goto LABEL_6;
  }
  swift_unknownObjectRetain();
  id v12 = a7;
  BOOL v13 = self;
  swift_unknownObjectRetain();
  sub_186A1F1CC();
  swift_unknownObjectRelease();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  sub_186A1F1CC();
  swift_unknownObjectRelease();
LABEL_6:
  uint64_t v16 = sub_186A1E95C();
  uint64_t v18 = v17;

  sub_1853B7874((uint64_t)v20, (uint64_t)v19, a5, a6, v16, v18);
  swift_bridgeObjectRelease();
  sub_1853B93B8((uint64_t)v19, &qword_1EB256B10);
  sub_1853B93B8((uint64_t)v20, &qword_1EB256B10);
}

uint64_t __46__UIView_Geometry__resizeSubviewsWithOldSize___block_invoke(uint64_t result, void *a2)
{
  if ((a2[12] & 0x400000000FC0000) != 0) {
    return objc_msgSend(a2, "resizeWithOldSuperviewSize:", *(double *)(result + 32), *(double *)(result + 40));
  }
  return result;
}

- (void)accessibilityApplyInvertFilter
{
  if (![(UIScreen *)[(UIWindow *)[(UIView *)self window] screen] _isCarScreen])
  {
    uint64_t v3 = [(UIView *)self accessibilityIgnoresInvertColors]
      && _AXSInvertColorsEnabled()
      && ![(UIView *)self _ancestorHasInvertFilterApplied]
      && [(UITraitCollection *)[(UIView *)self traitCollection] userInterfaceStyle] == UIUserInterfaceStyleLight;
    uint64_t v4 = [(UIView *)self layer];
    UIAccessibilityUpdateInvertColorsFilters(v4, 0, v3);
  }
}

- (void)_updateInferredLayoutMarginsFromSuperview:(id)a3
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x200) == 0)
  {
    double DefaultLayoutMargins = _UIViewGetDefaultLayoutMargins();
    double top = self->_inferredLayoutMargins.top;
    double left = self->_inferredLayoutMargins.left;
    double bottom = self->_inferredLayoutMargins.bottom;
    double right = self->_inferredLayoutMargins.right;
    if (left == v12 && top == DefaultLayoutMargins && right == v7 && bottom == v6)
    {
      double top = _UIViewResolvedMargins((id *)&self->super.super.isa, self->_inferredLayoutMargins.top, self->_inferredLayoutMargins.left, self->_inferredLayoutMargins.bottom, self->_inferredLayoutMargins.right);
      double left = v16;
      double bottom = v17;
      double right = v18;
    }
    *((void *)&v19 + 1) = *((unsigned int *)&self->_viewFlags + 4);
    *(void *)&long long v19 = *((void *)&self->_viewFlags + 1);
    double v22 = _UIViewAdjustedLayoutMarginsForLayoutMargins((uint64_t)self, v4, (v19 >> 57) & 0xF, self->_rawLayoutMargins.top, self->_rawLayoutMargins.left, self->_rawLayoutMargins.bottom, self->_rawLayoutMargins.right);
    CGFloat v24 = v23;
    CGFloat v25 = v20;
    CGFloat v26 = v21;
    BOOL v27 = left == v23;
    if (top != v22) {
      BOOL v27 = 0;
    }
    if (right != v21) {
      BOOL v27 = 0;
    }
    BOOL v28 = bottom == v20 && v27;
    if (!v28) {
      [(UIView *)self _layoutMarginsWillChange];
    }
    self->_inferredLayoutMargins.double top = v22;
    self->_inferredLayoutMargins.double left = v24;
    self->_inferredLayoutMargins.double bottom = v25;
    self->_inferredLayoutMargins.double right = v26;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    int v29 = [(UIView *)self _allSubviews];
    uint64_t v30 = [v29 countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v31; ++i)
        {
          if (*(void *)v36 != v32) {
            objc_enumerationMutation(v29);
          }
          double v34 = *(void **)(*((void *)&v35 + 1) + 8 * i);
          if ([v34 preservesSuperviewLayoutMargins]) {
            [v34 _updateInferredLayoutMargins];
          }
        }
        uint64_t v31 = [v29 countByEnumeratingWithState:&v35 objects:v39 count:16];
      }
      while (v31);
    }

    if (!v28) {
      -[UIView _layoutMarginsDidChangeFromOldMargins:](self, "_layoutMarginsDidChangeFromOldMargins:", top, left, bottom, right);
    }
  }
}

- (void)_wrappedProcessTraitChanges:(uint64_t)a3 withBehavior:
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  uint64_t v5 = *(void *)(a1 + 104);
  BOOL v6 = a3 == 3 || (v5 & 0x800000000000) != 0;
  if ((a3 & 0xFFFFFFFFFFFFFFFELL) != 2 && (v5 & 0x800000000000) == 0) {
    return;
  }
  context = (void *)MEMORY[0x18C108260]();
  *(void *)(a1 + 104) &= 0xFFFE7FFFFFFFFFFFLL;
  if (qword_1EB25C330 != -1) {
    dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
  }
  int v7 = byte_1EB25C0B5;
  if ((v5 & 0x800000000000) != 0
    && byte_1EB25C0B5
    && (!*(unsigned char *)(a2 + 56) || (*(void *)(a1 + 104) & 0x2000000000000) != 0))
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    uint64_t v8 = [(id)a1 _allSubviews];
    uint64_t v9 = [v8 countByEnumeratingWithState:&v48 objects:v57 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v49;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v49 != v11) {
            objc_enumerationMutation(v8);
          }
          _UIViewInvalidateTraitCollectionAndSchedulePropagation(*(void *)(*((void *)&v48 + 1) + 8 * i), 0);
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v48 objects:v57 count:16];
      }
      while (v10);
    }
  }
  if (*(unsigned char *)(a2 + 56)) {
    int v13 = (*(_DWORD *)(a1 + 116) >> 18) & 1;
  }
  else {
    int v13 = 1;
  }
  char v14 = !v6;
  if (!v13) {
    char v14 = 1;
  }
  if ((v14 & 1) == 0)
  {
    [(id)a1 _setLastNotifiedTraitCollection:*(void *)(a2 + 8)];
    [(id)a1 _traitCollectionDidChangeInternal:a2];
  }
  if (a3 == 2)
  {
    -[_UITraitChangeRegistry updateAuxiliaryChildrenTraitsIfNeeded](*(void *)(a1 + 48));
    if (_UIPresentationControllersInheritTraitsFromViewHierarchy())
    {
      double v17 = [(id)a1 _presentationControllerToNotifyOnLayoutSubviews];
      double v18 = v17;
      if (v17) {
        [v17 _updateAuxiliaryChildTraitEnvironmentsIfNeeded];
      }
    }
  }
  else if (a3 == 1)
  {
    BOOL v15 = context;
    if (v13)
    {
      double v16 = (void *)a1;
      goto LABEL_78;
    }
    goto LABEL_79;
  }
  int v39 = v13;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  char v42 = (void *)a1;
  long long v19 = [(id)a1 _allSubviews];
  uint64_t v20 = [v19 countByEnumeratingWithState:&v44 objects:v56 count:16];
  if (!v20) {
    goto LABEL_77;
  }
  uint64_t v22 = v20;
  uint64_t v23 = *(void *)v45;
  *(void *)&long long v21 = 138412290;
  long long v38 = v21;
  do
  {
    uint64_t v24 = 0;
    do
    {
      if (*(void *)v45 != v23) {
        objc_enumerationMutation(v19);
      }
      uint64_t v25 = *(void *)(*((void *)&v44 + 1) + 8 * v24);
      if (!v7)
      {
        uint64_t v31 = -[UIView __viewDelegate](*(id **)(*((void *)&v44 + 1) + 8 * v24));

        if (v31) {
          goto LABEL_71;
        }
        goto LABEL_55;
      }
      if (!v25 || (*(void *)(v25 + 104) & 0x30000) == 0)
      {
        uint64_t v26 = -[UIView __viewDelegate](*(id **)(*((void *)&v44 + 1) + 8 * v24));
        BOOL v27 = (void *)v26;
        if (v26) {
          -[UIViewController _updateTraitsIfNecessarySchedulingPropagation:](v26, 0);
        }
        if (a3 != 2 && (*(void *)(v25 + 104) & 0x800000000000) == 0)
        {
          int has_internal_diagnostics = os_variant_has_internal_diagnostics();
          int v29 = *(_DWORD *)(v25 + 112);
          if (!has_internal_diagnostics)
          {
            if ((v29 & 0x80) == 0)
            {
              uint64_t v30 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C188) + 8);
              if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v38;
                *(void *)&uint8_t buf[4] = v25;
                _os_log_impl(&dword_1853B0000, v30, OS_LOG_TYPE_ERROR, "UIKit internal inconsistency: subview doesn't need trait propagation but cached trait collection is not valid: %@", buf, 0xCu);
              }
            }
            goto LABEL_70;
          }
          if ((v29 & 0x80) == 0)
          {
            long long v36 = __UIFaultDebugAssertLog();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = v38;
              *(void *)&uint8_t buf[4] = v25;
              _os_log_fault_impl(&dword_1853B0000, v36, OS_LOG_TYPE_FAULT, "UIKit internal inconsistency: subview doesn't need trait propagation but cached trait collection is not valid: %@", buf, 0xCu);
            }
            goto LABEL_69;
          }
          goto LABEL_70;
        }
        -[UIView _updateCachedTraitCollectionIfNeeded](v25);

LABEL_55:
        BOOL v27 = objc_msgSend((id)v25, "_lastNotifiedTraitCollection", v38);
        uint64_t v32 = *(void **)a2;
        int v33 = dyld_program_sdk_at_least();
        if (v32 != v27 || v33 == 0)
        {
          if (v33)
          {
LABEL_67:
            long long v36 = [(id)v25 traitCollection];
            long long v54 = 0u;
            long long v55 = 0u;
            *(_OWORD *)buf = 0u;
            long long v53 = 0u;
            _UICreateTraitCollectionChangeDescription((uint64_t)v27, v36, (uint64_t)buf);
            -[UIView _wrappedProcessTraitChanges:withBehavior:](v25, buf, a3);
            if ((void)v53) {

            }
LABEL_69:
LABEL_70:

            goto LABEL_71;
          }
        }
        else
        {
          if (*(void *)(v25 + 88)) {
            goto LABEL_67;
          }
          if ((v42[13] & 0x2000000000000) != 0) {
            goto LABEL_67;
          }
          if ((*(void *)(v25 + 96) & 0x8000000000) != 0) {
            goto LABEL_67;
          }
          if ((*(_DWORD *)(v25 + 112) & 0x100) != 0)
          {
            long long v35 = objc_getAssociatedObject((id)v25, &_UIViewTraitOverridesKey);
            char v41 = -[_UITraitOverrides _isEmpty](v35);

            if ((v41 & 1) == 0) {
              goto LABEL_67;
            }
          }
        }
        -[UIView _wrappedProcessTraitChanges:withBehavior:](v25, a2, a3);
        goto LABEL_70;
      }
LABEL_71:
      ++v24;
    }
    while (v22 != v24);
    uint64_t v37 = [v19 countByEnumeratingWithState:&v44 objects:v56 count:16];
    uint64_t v22 = v37;
  }
  while (v37);
LABEL_77:

  double v16 = v42;
  BOOL v15 = context;
  if (v39) {
LABEL_78:
  }
    objc_msgSend(v16, "_traitCollectionDidChangeOnSubtreeInternal:", a2, v38);
LABEL_79:
}

- (void)_updateCachedTraitCollectionIfNeeded
{
  if (!a1 || ([(id)a1 _cachedTraitCollectionIsValid] & 1) != 0) {
    return;
  }
  TraitCollectionTSD = GetTraitCollectionTSD();
  char v3 = TraitCollectionTSD[9];
  TraitCollectionTSD[9] = 1;
  unint64_t v4 = *(void *)(a1 + 116) & 0x80000000;
  *(void *)(a1 + 116) |= 0x80000000uLL;
  uint64_t v5 = [(id)a1 _parentTraitEnvironment];
  BOOL v6 = v5;
  if (v5)
  {
    uint64_t v7 = [v5 _traitCollectionForChildEnvironment:a1];
  }
  else
  {
    if (dyld_program_sdk_at_least())
    {
      uint64_t v8 = [(id)a1 _lastNotifiedTraitCollection];
      if (!v8)
      {
        uint64_t v8 = UIViewMissingInitialTraitCollection((void *)a1);
        [(id)a1 _setLastNotifiedTraitCollection:v8];
      }
      goto LABEL_10;
    }
    uint64_t v7 = +[UITraitCollection _defaultTraitCollection]();
  }
  uint64_t v8 = (void *)v7;
LABEL_10:

  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __46__UIView__updateCachedTraitCollectionIfNeeded__block_invoke;
  v18[3] = &unk_1E530FCE0;
  char v19 = v4 >> 31;
  v18[4] = a1;
  uint64_t v9 = -[UITraitCollection _traitCollectionByModifyingTraitsCopyOnWrite:](v8, (uint64_t)v18);
  if ((*(_DWORD *)(a1 + 112) & 0x100) != 0)
  {
    objc_getAssociatedObject((id)a1, &_UIViewTraitOverridesKey);
    uint64_t v10 = (void **)objc_claimAutoreleasedReturnValue();
    uint64_t v11 = v10;
    if (v10)
    {
      uint64_t v12 = -[_UITraitOverrides _traitCollectionByApplyingOverridesToTraitCollection:](v10, v9);

      uint64_t v9 = (void *)v12;
    }
  }
  _UITraitEnvironmentGeneratedTraitCollection(a1, (unint64_t)v9);
  int v13 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v9;

  *(_DWORD *)(a1 + 112) |= 0x80u;
  *(void *)(a1 + 116) = *(void *)(a1 + 116) & 0xFFFFFFFF7FFFFFFFLL | v4;
  *((unsigned char *)GetTraitCollectionTSD() + 9) = v3;
  if (qword_1EB25C330 != -1) {
    dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
  }
  if (!byte_1EB25C0B5 && dyld_program_sdk_at_least())
  {
    uint64_t v14 = *(void *)(a1 + 32);
    BOOL v15 = [(id)a1 _lastNotifiedTraitCollection];
    double v16 = v15;
    if (v14)
    {
      BOOL v17 = _colorAppearanceTraitChanged(v14, (uint64_t)v15);

      if (v17) {
        *(void *)(a1 + 116) |= 0x40000uLL;
      }
    }
    else
    {
    }
  }
}

- (BOOL)_cachedTraitCollectionIsValid
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 7) & 1;
}

- (BOOL)preservesSuperviewLayoutMargins
{
  return (*((void *)&self->_viewFlags + 1) & 0x1E0000000000000) != 0;
}

- (void)_setLastNotifiedTraitCollection:(id)a3
{
}

void __46__UIView__updateCachedTraitCollectionIfNeeded__block_invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v14 = a2;
  uint64_t v5 = a3;
  if (!*(unsigned char *)(a1 + 40))
  {
    BOOL v6 = -[UIView __tintColor](*(void **)(a1 + 32));
    if (v6)
    {
      uint64_t v7 = v14[2]();
      uint64_t v8 = [v7 _tintColor];

      if (v8 != v6)
      {
        uint64_t v9 = v5[2](v5);
        [v9 _setTintColor:v6];
      }
    }
  }
  if ((*(void *)(*(void *)(a1 + 32) + 96) & 0x8000000000) != 0)
  {
    uint64_t v10 = v14[2]();
    uint64_t v11 = [v10 preferredContentSizeCategory];

    uint64_t v12 = -[UIView _limitedContentSizeCategoryWithBaseValue:](*(void **)(a1 + 32), v11);
    if (v12 != v11)
    {
      int v13 = v5[2](v5);
      [v13 _setObject:v12 forTraitToken:0x1ED3F5AD8];
    }
  }
}

- (id)__tintColor
{
  if (a1)
  {
    id v2 = -[UIView __undimmedTintColor](a1);
    if ([a1 tintAdjustmentMode] == 2)
    {
      uint64_t v3 = -[UIView _variantOfColor:forKey:withCreationBlock:](a1, v2, "UI.tintColorAdjustmentModeDimmedVariant", &__block_literal_global_1160);

      id v2 = (void *)v3;
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

- (UIViewTintAdjustmentMode)tintAdjustmentMode
{
  if (self)
  {
    *((void *)&v2 + 1) = *((unsigned int *)&self->_viewFlags + 4);
    *(void *)&long long v2 = *((void *)&self->_viewFlags + 1);
    UIViewTintAdjustmentMode v3 = (unint64_t)((v2 >> 35) & 3);
    if (((v2 >> 35) & 3) != 0) {
      return v3;
    }
    if (self->_tintAdjustmentDimmingCount) {
      return 2;
    }
  }
  return [(UIView *)self _defaultTintAdjustmentMode];
}

- (int64_t)_defaultTintAdjustmentMode
{
  if ((*((void *)&self->_viewFlags + 1) & 0x200000000000) == 0) {
    return 1;
  }
  id v2 = [(UIView *)self superview];
  if (!v2) {
    return 1;
  }
  int64_t result = [v2 tintAdjustmentMode];
  if ((unint64_t)result <= 1) {
    return 1;
  }
  return result;
}

- (id)__undimmedTintColor
{
  if (a1)
  {
    id v2 = [a1 _normalInheritedTintColor];
    UIViewTintAdjustmentMode v3 = -[UIView __accessibilityUndimmedTintColorHighContrastVariantStorageKey](a1);
    if (v3)
    {
      v6[0] = MEMORY[0x1E4F143A8];
      v6[1] = 3221225472;
      v6[2] = __29__UIView___undimmedTintColor__block_invoke;
      v6[3] = &unk_1E530FD50;
      v6[4] = a1;
      uint64_t v4 = -[UIView _variantOfColor:forKey:withCreationBlock:](a1, v2, v3, v6);

      id v2 = (void *)v4;
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

- (void)__accessibilityUndimmedTintColorHighContrastVariantStorageKey
{
  if (result)
  {
    uint64_t v1 = result;
    if (_AXDarkenSystemColors())
    {
      if (dyld_program_sdk_at_least() && [v1 _accessibilityResolvedInterfaceStyle] == 2) {
        return &UIAccessibilityLightOnDarkToken;
      }
      else {
        return &UIAccessibilityDarkOnLightToken;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (id)_parentTraitEnvironment
{
  viewDelegate = self->_viewDelegate;
  if (viewDelegate)
  {
    UIViewTintAdjustmentMode v3 = viewDelegate;
  }
  else
  {
    UIViewTintAdjustmentMode v3 = [(UIView *)self superview];
  }
  return v3;
}

+ (BOOL)requiresConstraintBasedLayout
{
  return 0;
}

- (BOOL)_shouldInformFocusAboutBecomingVisible
{
  id v2 = [(UIView *)self _window];
  if (([v2 _isTextEffectsWindow] & 1) != 0
    || ([v2 windowScene],
        UIViewTintAdjustmentMode v3 = objc_claimAutoreleasedReturnValue(),
        uint64_t v4 = [v3 activationState],
        v3,
        v4))
  {
    char v5 = 0;
  }
  else
  {
    BOOL v6 = [v2 windowScene];
    uint64_t v7 = [v6 _isPerformingSystemSnapshot];

    char v5 = v7 ^ 1;
  }

  return v5;
}

- (id)_ancestorTintColor
{
  if (a1)
  {
    if ((a1[13] & 0x100000000000) != 0
      || ([a1 window], id v2 = objc_claimAutoreleasedReturnValue(), v2, !v2))
    {
      uint64_t v4 = objc_msgSend((id)objc_msgSend(a1, "superview"), "_normalInheritedTintColor");
      if (v4) {
        goto LABEL_8;
      }
    }
    else
    {
      UIViewTintAdjustmentMode v3 = [a1 window];
      uint64_t v4 = [v3 _normalInheritedTintColor];

      if (v4) {
        goto LABEL_8;
      }
    }
    uint64_t v4 = +[UIView _defaultInteractionTintColorForIdiom:](UIView, "_defaultInteractionTintColorForIdiom:", objc_msgSend((id)objc_msgSend(a1, "_screen"), "_userInterfaceIdiom"));
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_8:
  return v4;
}

- (id)_screen
{
  id v2 = [(UIView *)self _window];
  UIViewTintAdjustmentMode v3 = [v2 screen];
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    id v5 = +[UIScreen mainScreen];
  }
  BOOL v6 = v5;

  return v6;
}

- (UIWindow)window
{
  if (self) {
    self = &self->_window->super;
  }
  return (UIWindow *)self;
}

- (id)_normalInheritedTintColor
{
  if (_AXSUseSingleSystemColor())
  {
    uint64_t v3 = _UIAccessibilitySingleSystemColor();
LABEL_3:
    uint64_t v4 = (void *)v3;
    goto LABEL_4;
  }
  BOOL v6 = _UIViewGetInteractionTintColor(self);
  if (!v6)
  {
    uint64_t v3 = -[UIView _ancestorTintColor](self);
    goto LABEL_3;
  }
  uint64_t v4 = v6;
  if ([v6 _isDynamicTintColor])
  {
    uint64_t v7 = -[UIView _ancestorTintColor](self);
    uint64_t v8 = [(UIView *)self traitCollection];
    uint64_t v9 = -[UITraitCollection _traitCollectionByReplacingTintColor:](v8, v7);

    uint64_t v10 = [v4 resolvedColorWithTraitCollection:v9];

    uint64_t v4 = (void *)v10;
  }
LABEL_4:
  return v4;
}

- (UIColor)_overrideTintColor
{
  if ((*(void *)&self->_viewFlags & 0x200) != 0)
  {
    id v2 = objc_getAssociatedObject(self, &unk_1EB25C0A3);
  }
  else
  {
    id v2 = 0;
  }
  return (UIColor *)v2;
}

- (BOOL)_overrideTintColorAutomaticallyOverridesTintColor
{
  return 1;
}

- (void)_findFirstSubviewWantingToBecomeFirstResponder
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    [*(id *)(a1 + 160) sublayers];
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v2 = [v1 countByEnumeratingWithState:&v23 objects:v28 count:16];
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v24 != v4) {
            objc_enumerationMutation(v1);
          }
          id v6 = (id)[*(id *)(*((void *)&v23 + 1) + 8 * i) unsafeUnretainedDelegate];
          if (v6 && (uint64_t v7 = v6, _IsKindOfUIView((uint64_t)v6)))
          {
            uint64_t v8 = v7;
            if ((v8[12] & 0x800) != 0) {
              goto LABEL_29;
            }
          }
          else
          {
            uint64_t v8 = 0;
          }
        }
        uint64_t v3 = [v1 countByEnumeratingWithState:&v23 objects:v28 count:16];
      }
      while (v3);
    }

    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v9 = v1;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v19 objects:v27 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v20;
LABEL_16:
      uint64_t v13 = 0;
      while (1)
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = (id)objc_msgSend(*(id *)(*((void *)&v19 + 1) + 8 * v13), "unsafeUnretainedDelegate", (void)v19);
        if (v14)
        {
          id v15 = v14;
          id v16 = _IsKindOfUIView((uint64_t)v14) ? v15 : 0;
        }
        else
        {
          id v16 = 0;
        }
        id v17 = v16;
        uint64_t v8 = -[UIView _findFirstSubviewWantingToBecomeFirstResponder]();

        if (v8) {
          break;
        }
        if (v11 == ++v13)
        {
          uint64_t v11 = [v9 countByEnumeratingWithState:&v19 objects:v27 count:16];
          uint64_t v8 = 0;
          if (v11) {
            goto LABEL_16;
          }
          break;
        }
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
LABEL_29:
  }
  else
  {
    uint64_t v8 = 0;
  }
  return v8;
}

- (BOOL)__isKindOfUIView
{
  return 1;
}

- (UIView)_maskView
{
  if ((*((void *)&self->_viewFlags + 1) & 0x200000) != 0)
  {
    uint64_t v3 = objc_getAssociatedObject(self, &_UIMaskViewKey);
    uint64_t v2 = [v3 maskView];
  }
  else
  {
    uint64_t v2 = 0;
  }
  return (UIView *)v2;
}

- (void)setViewTraversalMark:(BOOL)a3
{
  uint64_t v3 = 0x10000000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFEFFFFFFFFFFLL | v3;
}

- (BOOL)viewTraversalMark
{
  return (*(void *)&self->_viewFlags >> 40) & 1;
}

- (void)_subscribeToScrollNotificationsIfNecessary:(id)a3
{
  if ((*(void *)&self->_viewFlags & 8) != 0)
  {
    __scrollViewAncestorOfView(a3, 0);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    [v4 _addScrollViewScrollObserver:self];
  }
}

- (void)_unsubscribeToScrollNotificationsIfNecessary:(id)a3
{
  id v7 = a3;
  if ((*(void *)&self->_viewFlags & 8) != 0)
  {
    id v4 = v7;
    for (i = v4; ; id v4 = i)
    {
      id v6 = __scrollViewAncestorOfView(v4, 0);

      if (!v6) {
        break;
      }
      [v6 _removeScrollViewScrollObserver:self];
      uint64_t i = [v6 superview];
    }
  }
}

- (void)_traitCollectionDidChangeOnSubtreeInternal:(const _UITraitCollectionChangeDescription *)a3
{
  if ([a3->var1 hasDifferentColorAppearanceComparedToTraitCollection:a3->var0])
  {
    if (os_variant_has_internal_diagnostics())
    {
      if (!self)
      {
        id v7 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_1853B0000, v7, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", buf, 2u);
        }
      }
    }
    else if (!self)
    {
      uint64_t v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_traitCollectionDidChangeOnSubtreeInternal____s_category)+ 8);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", v9, 2u);
      }
    }
    id v4 = +[UITraitCollection _currentTraitCollectionIfExists]();
    id v5 = [(UIView *)self traitCollection];
    +[UITraitCollection setCurrentTraitCollection:v5];

    id v6 = (void *)_UISetCurrentFallbackEnvironment(self);
    if (self)
    {
      if ([(UIView *)self _definesDynamicTintColor]) {
        -[UIView _dispatchTintColorVisitorWithReasons:](self, 1);
      }
    }
    _UIRestorePreviousFallbackEnvironment(v6);
    +[UITraitCollection setCurrentTraitCollection:v4];
  }
}

- (UIViewContentMode)contentMode
{
  if ([(CALayer *)self->_layer needsDisplayOnBoundsChange]) {
    return 3;
  }
  unint64_t v4 = [(CALayer *)self->_layer contentsGravityEnum];
  if (v4 > 0xB) {
    return 0;
  }
  else {
    return qword_186B9E438[v4];
  }
}

- (void)setContentScaleFactor:(CGFloat)contentScaleFactor
{
  double v3 = contentScaleFactor;
  if (contentScaleFactor == 0.0)
  {
    double v3 = 1.0;
    if ([(UIView *)self _canDrawContent])
    {
      [(UIView *)self _currentScreenScale];
      if (self) {
        double v3 = v5;
      }
      else {
        double v3 = 0.0;
      }
    }
  }
  [(UIView *)self contentScaleFactor];
  if (v6 != v3)
  {
    [(CALayer *)self->_layer setContentsScale:v3];
    [(CALayer *)self->_layer setRasterizationScale:v3];
    [(UIView *)self setNeedsDisplay];
  }
}

- (CGFloat)contentScaleFactor
{
  [(CALayer *)self->_layer contentsScale];
  return result;
}

- (CGColor)_backgroundCGColor
{
  BOOL v3 = [(UIView *)self _canDrawContent];
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  if (v3 || (*(void *)&self->_viewFlags & 0x11000000) == 0x1000000)
  {
    if ((viewFlags & 0x40) != 0)
    {
      return (CGColor *)objc_getAssociatedObject(self, &unk_1EB25C0A0);
    }
    else
    {
      return 0;
    }
  }
  else if ((viewFlags & 0x10000000) != 0)
  {
    objc_getAssociatedObject(self, &unk_1EB25C0A1);
    id v7 = objc_claimAutoreleasedReturnValue();
    uint64_t v8 = (CGColor *)[v7 CGColor];

    return v8;
  }
  else
  {
    layer = self->_layer;
    return [(CALayer *)layer backgroundColor];
  }
}

- (BOOL)_shouldInheritScreenScaleAsContentScaleFactor
{
  BOOL v3 = [(UIView *)self window];
  BOOL v4 = v3
    && ![(UIView *)self _controlsOwnScaleFactor]
    && [(UIView *)self _canDrawContent];

  return v4;
}

- (void)setNeedsDisplay
{
  if ((*(void *)&self->_viewFlags & 0x11000000) == 0x1000000 || [(UIView *)self _canDrawContent])
  {
    [(CALayer *)self->_layer setNeedsDisplay];
    UIViewDidSetNeedsDisplay(self);
  }
}

- (BOOL)_canDrawContent
{
  return (*(void *)&self->_viewFlags & 0x4000000004) != 0;
}

- (BOOL)_controlsOwnScaleFactor
{
  return 0;
}

- (BOOL)isOpaque
{
  return (*(void *)&self->_viewFlags >> 10) & 1;
}

- (void)_setNeedsContentsFormatUpdate:(BOOL)a3
{
  if (a3) {
    int v3 = 0x200000;
  }
  else {
    int v3 = 0;
  }
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFDFFFFF | v3;
}

+ (void)_registerClassForIdiomInitializationIfNeccessary
{
  if (qword_1EB25C238 != -1) {
    dispatch_once(&qword_1EB25C238, &__block_literal_global_2822);
  }
  uint64_t v3 = [a1 methodForSelector:sel__initializeForIdiom_];
  if (v3 != qword_1EB25C230
    && ([(id)_UIViewClassesRegisteredForIdiomInitialization containsObject:a1] & 1) == 0)
  {
    objc_msgSend((id)objc_msgSend(a1, "superclass"), "_registerClassForIdiomInitializationIfNeccessary");
    for (uint64_t i = 0; i != 11; ++i)
    {
      if (_UIViewDidAlreadyInitializeIdiom[i]) {
        [a1 _initializeForIdiom:i];
      }
    }
    double v5 = (void *)_UIViewClassesRegisteredForIdiomInitialization;
    [v5 addObject:a1];
  }
}

+ (BOOL)_wantsDeepColorByDefault
{
  return dyld_program_sdk_at_least();
}

- (BOOL)_subclassImplementsDrawRect
{
  uint64_t v2 = [(UIView *)self methodForSelector:sel_drawRect_];
  if (v2) {
    BOOL v3 = v2 == qword_1EB25C208;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3;
}

- (void)_setNeedsContentsFormatUpdate
{
}

- (BOOL)accessibilityIgnoresInvertColors
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 22) & 1;
}

- (id)_variantOfColor:(const void *)a3 forKey:(void *)a4 withCreationBlock:
{
  id v7 = a2;
  uint64_t v8 = a4;
  if (a1)
  {
    if ([v7 _isDynamic])
    {
      id v9 = [a1 traitCollection];
      id v10 = [v7 resolvedColorWithTraitCollection:v9];
    }
    else
    {
      uint64_t v11 = v7;
      if (!v7) {
        uint64_t v11 = objc_opt_class();
      }
      id v10 = v11;
    }
    uint64_t v12 = objc_getAssociatedObject(v10, a3);
    if (!v12)
    {
      os_variant_has_internal_diagnostics();
      uint64_t v13 = +[UITraitCollection _currentTraitCollectionIfExists]();
      id v14 = [a1 traitCollection];
      +[UITraitCollection setCurrentTraitCollection:v14];

      id v15 = (void *)_UISetCurrentFallbackEnvironment(a1);
      uint64_t v12 = v8[2](v8, v7);
      _UIRestorePreviousFallbackEnvironment(v15);
      +[UITraitCollection setCurrentTraitCollection:v13];
      objc_setAssociatedObject(v10, a3, v12, (void *)1);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

id __21__UIView___tintColor__block_invoke(uint64_t a1, void *a2)
{
  double v6 = 0.0;
  double v7 = 0.0;
  if (a2)
  {
    [a2 getWhite:&v7 alpha:&v6];
    double v2 = v7;
    double v3 = v6 * 0.8;
  }
  else
  {
    double v3 = 0.0;
    double v2 = 0.0;
  }
  BOOL v4 = +[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", v2, v3, *(void *)&v6, *(void *)&v7);
  return v4;
}

- (UIUserInterfaceLayoutDirection)effectiveUserInterfaceLayoutDirection
{
  double v3 = [(UIView *)self traitCollection];
  unint64_t v4 = [v3 layoutDirection];

  if (v4 >= 2)
  {
    if (v4 == -1) {
      unint64_t v4 = [(id)UIApp userInterfaceLayoutDirection];
    }
    else {
      unint64_t v4 = 0;
    }
  }
  UISemanticContentAttribute v5 = [(UIView *)self semanticContentAttribute];
  return +[UIView userInterfaceLayoutDirectionForSemanticContentAttribute:v5 relativeToLayoutDirection:v4];
}

- (UISemanticContentAttribute)semanticContentAttribute
{
  return (*(void *)((char *)&self->_viewFlags + 20) >> 14) & 7;
}

- (BOOL)_la_isVisible
{
  return ![(UIView *)self isHidden];
}

- (void)setHidden:(BOOL)hidden
{
  BOOL v3 = hidden;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (self) {
    BOOL v5 = (*((void *)&self->_viewFlags + 1) & 0x30000) != 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (-[UIView _backing_isHidden]((uint64_t)self))
  {
    LODWORD(v6) = 1;
    if (v3) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v6 = (*((void *)&self->_viewFlags + 1) >> 20) & 1;
    if (v3) {
      goto LABEL_8;
    }
  }
  if (v5) {
    goto LABEL_19;
  }
LABEL_8:
  if (!v3)
  {
    -[UIView _backing_setHidden:]((uint64_t)self, 0);
    if (self)
    {
      int v11 = -[UIView _bitFlagValueAfterIncrementingHiddenManagementCountForKey:withIncrement:bitFlagValue:](self, "_UIViewPendingHiddenCount", -1, (*((void *)&self->_viewFlags + 1) >> 20) & 1);
      uint64_t v12 = 0x100000;
      if (!v11) {
        uint64_t v12 = 0;
      }
      *((void *)&self->_viewFlags + 1) = *((void *)&self->_viewFlags + 1) & 0xFFFFFFFFFFEFFFFFLL | v12;
    }
LABEL_19:
    if (!v5) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
  p_uint64_t viewFlags = &self->_viewFlags;
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x4000) != 0
    && +[UIView _isInAnimationBlockWithAnimationsEnabled]&& self->_window)
  {
    p_uint64_t viewFlags = &self->_viewFlags;
    int v8 = -[UIView _bitFlagValueAfterIncrementingHiddenManagementCountForKey:withIncrement:bitFlagValue:](self, "_UIViewPendingHiddenCount", 1, (*((void *)&self->_viewFlags + 1) >> 20) & 1);
    uint64_t v9 = 0x100000;
    if (!v8) {
      uint64_t v9 = 0;
    }
    unint64_t v10 = *((void *)&self->_viewFlags + 1) & 0xFFFFFFFFFFEFFFFFLL | v9;
  }
  else
  {
    -[UIView _backing_setHidden:]((uint64_t)self, 1);
    unint64_t v10 = *((void *)&self->_viewFlags + 1) & 0xFFFFFFFFFFEFFFFFLL;
  }
  *((void *)p_viewFlags + 1) = v10;
  if (v5)
  {
LABEL_20:
    uint64_t v13 = 0x40000;
    if (!v3) {
      uint64_t v13 = 0;
    }
    *((void *)&self->_viewFlags + 1) = *((void *)&self->_viewFlags + 1) & 0xFFFFFFFFFFFBFFFFLL | v13;
  }
LABEL_23:
  if (![(UIView *)self _ignoreBackdropViewsWhenHiding]) {
    -[UIView _recursivelySetHiddenForBackdropMaskViews:](self, v3);
  }
  if (v6 != v3)
  {
    if (v6 | !v3)
    {
      if (v6 && !v3) {
        -[UIView _recursivelyConsiderResumingMotionEffects](self);
      }
    }
    else if (self)
    {
      _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(self, &__block_literal_global_1184_0);
    }
    -[UIView _notifyArrangementsOfChangeInItem:withSelector:](self, self, (uint64_t)sel__visibilityParameterChangedForItem_);
    if (!_UIViewNotifiesFocusEngineForAlphaAndHiddenChanges()) {
      goto LABEL_41;
    }
    if (v3)
    {
      id v14 = [(UIView *)self _focusSystem];
      [v14 _focusEnvironmentWillBecomeInvisible:self];
    }
    else
    {
      if (![(UIView *)self _shouldInformFocusAboutBecomingVisible])
      {
LABEL_41:
        _UIViewNotifyPhysicalButtonArbiterOfEffectiveVisibilityChangeIfNeeded(self);
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        id v15 = [(UIView *)self interactions];
        uint64_t v16 = [v15 countByEnumeratingWithState:&v21 objects:v25 count:16];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = *(void *)v22;
          do
          {
            for (uint64_t i = 0; i != v17; ++i)
            {
              if (*(void *)v22 != v18) {
                objc_enumerationMutation(v15);
              }
              long long v20 = *(void **)(*((void *)&v21 + 1) + 8 * i);
              if (objc_opt_respondsToSelector()) {
                [v20 _viewVisibilityDidChange];
              }
            }
            uint64_t v17 = [v15 countByEnumeratingWithState:&v21 objects:v25 count:16];
          }
          while (v17);
        }

        return;
      }
      id v14 = [(UIView *)self _focusSystem];
      [v14 _focusEnvironmentDidBecomeVisible:self];
    }

    goto LABEL_41;
  }
}

- (BOOL)isHidden
{
  if (-[UIView _backing_isHidden]((uint64_t)self)) {
    LOBYTE(v3) = 1;
  }
  else {
    return (*((void *)&self->_viewFlags + 1) >> 20) & 1;
  }
  return v3;
}

- (uint64_t)_backing_isHidden
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 168);
    if (!v2 || (v3 = *(id *)(v2 + 8), (unint64_t v4 = v3) == 0))
    {
      unint64_t v4 = 0;
      id v3 = *(id *)(v1 + 160);
    }
    uint64_t v5 = [v3 isHidden];

    return v5;
  }
  return result;
}

- (void)_recursivelySetHiddenForBackdropMaskViews:(void *)a1
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ((a1[13] & 0x1000000) != 0)
    {
      unint64_t v4 = [a1 _backdropMaskViewForGrayscaleTint];
      [v4 setHidden:a2];

      uint64_t v5 = [a1 _backdropMaskViewForColorTint];
      [v5 setHidden:a2];

      uint64_t v6 = -[UIView _backdropMaskViewForColorBurnTint](a1);
      [v6 setHidden:a2];

      double v7 = -[UIView _backdropMaskViewForDarkeningTint](a1);
      [v7 setHidden:a2];

      int v8 = [a1 _backdropMaskViewForFilters];
      [v8 setHidden:a2];
    }
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v9 = objc_msgSend(a1, "subviews", 0);
    uint64_t v10 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v15;
      do
      {
        uint64_t v13 = 0;
        do
        {
          if (*(void *)v15 != v12) {
            objc_enumerationMutation(v9);
          }
          -[UIView _recursivelySetHiddenForBackdropMaskViews:](*(void *)(*((void *)&v14 + 1) + 8 * v13++), a2);
        }
        while (v11 != v13);
        uint64_t v11 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v11);
    }
  }
}

- (void)_backing_setHidden:(uint64_t)a1
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 168);
    if (!v4 || (id v5 = *(id *)(v4 + 8), (v6 = v5) == 0))
    {
      id v6 = 0;
      id v5 = *(id *)(a1 + 160);
    }
    id v7 = v6;
    [v5 setHidden:a2];
  }
}

- (BOOL)_ignoreBackdropViewsWhenHiding
{
  return (*((unsigned __int8 *)&self->_viewFlags + 20) >> 5) & 1;
}

- (void)_addSubview:(id)a3 positioned:(int64_t)a4 relativeTo:(id)a5
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  if (!a3 || a4 <= -2 && !a5) {
    return;
  }
  if (self == a3) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"Can't add self as subview"];
  }
  uint64_t v9 = (char *)a3 + 96;
  *(void *)((char *)a3 + 116) &= ~0x800000000000uLL;
  uint64_t v10 = (UIView *)(id)[a3 superview];
  id v11 = (id)[a3 window];
  if (qword_1EB25C350 != -1) {
    dispatch_once(&qword_1EB25C350, &__block_literal_global_3781);
  }
  id v12 = self;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v12 = [(UIView *)self window];
  }
  id v13 = 0;
  if (self && !__disablePromoteDescendantToFirstResponderCount)
  {
    if ([a3 _isAncestorOfFirstResponder])
    {
      id v13 = [v11 _firstResponder];
    }
    else
    {
      id v13 = 0;
    }
  }
  v78 = a5;
  v75 = v12;
  BOOL v76 = v11;
  if (v10 == self)
  {
    obuint64_t j = 0;
  }
  else
  {
    if (v12 != v11)
    {
      [a3 setViewTraversalMark:1];
      [a3 _willMoveToWindow:v12 withAncestorView:self];
      [a3 _makeSubtreePerformSelector:sel__willMoveToWindow_withAncestorView_ withObject:v12 withObject:self copySublayers:1];
      [a3 setViewTraversalMark:0];
    }
    [(UIView *)v10 _willRemoveSubview:a3];
    uint64_t v14 = *((void *)a3 + 21);
    if (v14) {
      long long v15 = *(void **)(v14 + 40);
    }
    else {
      long long v15 = 0;
    }
    [v15 willMoveToSuperview:self];
    [a3 willMoveToSuperview:self];
    if ((*(void *)v9 & 0x400000000000000) != 0) {
      [(UIView *)v10 _constraints_subviewWillChangeSuperview:a3];
    }
    id v16 = v13;
    -[UIView _removeParentGeometryObservers](a3);
    long long v17 = [v11 _subtreeMonitorsForView:a3];
    uint64_t v18 = [v12 _subtreeMonitorsForView:self];
    uint64_t v19 = v18;
    if (v17)
    {
      id v20 = [v17 setByAddingObjectsFromSet:v18];
    }
    else
    {
      id v20 = v18;
    }
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    obuint64_t j = v20;
    uint64_t v21 = [obj countByEnumeratingWithState:&v103 objects:v112 count:16];
    id v13 = v16;
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v104;
      do
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          if (*(void *)v104 != v23) {
            objc_enumerationMutation(obj);
          }
          [*(id *)(*((void *)&v103 + 1) + 8 * i) _monitoredView:a3 willMoveFromSuperview:v10 toSuperview:self];
        }
        uint64_t v22 = [obj countByEnumeratingWithState:&v103 objects:v112 count:16];
      }
      while (v22);
    }

    [a3 _unsubscribeToScrollNotificationsIfNecessary:v10];
    [a3 _makeSubtreePerformSelector:sel__unsubscribeToScrollNotificationsIfNecessary_ withObject:v10];
    uint64_t v9 = (char *)a3 + 96;
    if (v13)
    {
      if (v75) {
        __addingResponderToTree = 1;
      }
      [v76 _setFirstResponder:0];
    }
  }
  if (_UIIsPrivateMainBundle())
  {
    id v25 = [(UIView *)self maskView];

    if (v25 != a3) {
      goto LABEL_47;
    }
    if (os_variant_has_internal_diagnostics())
    {
      uint64_t v26 = __UIFaultDebugAssertLog();
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_FAULT)) {
        goto LABEL_144;
      }
      BOOL v27 = [(UIView *)self maskView];
      *(_DWORD *)buf = 138412546;
      v114 = v27;
      __int16 v115 = 2112;
      v116 = self;
      goto LABEL_143;
    }
    uint64_t v26 = *(id *)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C248) + 8);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      BOOL v27 = [(UIView *)self maskView];
      *(_DWORD *)buf = 138412546;
      v114 = v27;
      __int16 v115 = 2112;
      v116 = self;
LABEL_142:
LABEL_143:
    }
  }
  else
  {
    int v28 = dyld_program_sdk_at_least();
    -[UIView _safeMaskView](self);
    id v29 = (id)objc_claimAutoreleasedReturnValue();

    if (v28)
    {
      if (v29 != a3) {
        goto LABEL_47;
      }
      uint64_t v26 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v30 = -[UIView _safeMaskView](self);

      goto LABEL_145;
    }
    if (v29 != a3) {
      goto LABEL_47;
    }
    uint64_t v26 = *(id *)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C250) + 8);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      BOOL v27 = -[UIView _safeMaskView](self);
      *(_DWORD *)buf = 138412546;
      v114 = v27;
      __int16 v115 = 2112;
      v116 = self;
      goto LABEL_142;
    }
  }
LABEL_144:
  uint64_t v9 = (char *)a3 + 96;
LABEL_145:

LABEL_47:
  uint64_t v31 = -[UIView _backing_outermostLayer](a3);
  uint64_t v32 = [v31 superlayer];
  int v33 = &OBJC_IVAR____UIVectorTextLayoutRun__sourceString;
  double v34 = self->_layer;
  if (v32 == v34)
  {
    long long v36 = -[UIView _backing_outermostLayer](a3);
    uint64_t v37 = self->_layer;
    long long v38 = [(CALayer *)v37 mask];

    BOOL v39 = v36 == v38;
    int v33 = &OBJC_IVAR____UIVectorTextLayoutRun__sourceString;
    long long v35 = v78;
    uint64_t v9 = (char *)a3 + 96;
    if (!v39) {
      goto LABEL_52;
    }
  }
  else
  {

    long long v35 = v78;
  }
  -[UIView _backing_outermostLayer](a3);
  [(id)objc_claimAutoreleasedReturnValue() removeFromSuperlayer];
  if (v10 == self)
  {
    [(UIView *)self _invalidateSubviewCache];
    goto LABEL_56;
  }
  -[UIView _synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable]((uint64_t)v10);
LABEL_52:
  [(UIView *)self _invalidateSubviewCache];
  BOOL v40 = v10 == 0;
  if (!v10 || v10 == self) {
    goto LABEL_57;
  }
  _UIViewVisitorEntertainAscendingTrackingVisitors(v10, (uint64_t)a3, (uint64_t)v76, (uint64_t)v10);
  _UIViewVisitorEntertainDescendingTrackingVisitors(v10, (uint64_t)a3, (uint64_t)v76, (uint64_t)v10);
LABEL_56:
  BOOL v40 = 0;
LABEL_57:
  switch(a4)
  {
    case -3:
      if ((objc_msgSend(v35, "__isKindOfUIView") & 1) == 0) {
        long long v35 = 0;
      }
      -[UIView _backing_insertSubview:belowSubview:]((uint64_t)self, a3, v35);
      break;
    case -2:
      if ((objc_msgSend(v35, "__isKindOfUIView") & 1) == 0) {
        long long v35 = 0;
      }
      -[UIView _backing_insertSubview:aboveSubview:]((uint64_t)self, a3, v35);
      break;
    case -1:
      -[UIView _backing_addSubview:]((uint64_t)self, a3);
      break;
    default:
      if ((a4 & 0x8000000000000000) == 0)
      {
        id v41 = *(id *)((char *)a3 + v33[370]);
        id v42 = [v41 superlayer];
        id v43 = *(id *)((char *)&self->super.super.isa + v33[370]);
        if (v42 == v43)
        {
          v79 = CLIENT_LAYER((uint64_t)self);
          BOOL v77 = [v79 sublayers];
          uint64_t v74 = CLIENT_LAYER((uint64_t)a3);
          BOOL v44 = [v77 indexOfObject:v74] < (unint64_t)a4;
        }
        else
        {
          BOOL v44 = 0;
        }

        -[UIView _backing_insertSubview:atIndex:]((uint64_t)self, a3, a4 + v44);
        uint64_t v9 = (char *)a3 + 96;
        int v33 = &OBJC_IVAR____UIVectorTextLayoutRun__sourceString;
      }
      break;
  }
  *(void *)v9 |= 0x8000000uLL;
  if (v40)
  {
    objc_setAssociatedObject(*(id *)((char *)a3 + v33[370]), &unk_1EB25C0B4, a3, (void *)1);
    long long v45 = (void *)*((void *)a3 + 7);
    *((void *)a3 + 7) = 0;

    -[UIBackgroundConfiguration _setCustomView:](*((void *)a3 + 21), 0);
  }
  [a3 _subscribeToScrollNotificationsIfNecessary:self];
  [a3 _makeSubtreePerformSelector:sel__subscribeToScrollNotificationsIfNecessary_ withObject:self];
  if (v10 != self) {
    [(UIView *)v10 _invalidateSubviewCache];
  }
  if ((*(void *)v9 & 0x400000000000000) != 0) {
    -[UIView _setSubviewWantsAutolayoutTripWantsAutolayout:](self, "_setSubviewWantsAutolayoutTripWantsAutolayout:", [a3 _hostsLayoutEngine] ^ 1);
  }
  if (v10 != self)
  {
    if ((*((void *)v9 + 1) & 0x8000000000000000) != 0)
    {
      id v80 = v13;
      objc_getAssociatedObject(a3, &_UIGeometryObserversKey);
      long long v46 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
      long long v107 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      uint64_t v47 = [(NSMapTable *)v46 countByEnumeratingWithState:&v107 objects:buf count:16];
      if (v47)
      {
        uint64_t v48 = v47;
        uint64_t v49 = *(void *)v108;
        do
        {
          for (uint64_t j = 0; j != v48; ++j)
          {
            if (*(void *)v108 != v49) {
              objc_enumerationMutation(v46);
            }
            long long v51 = *(void **)(*((void *)&v107 + 1) + 8 * j);
            uint64_t v52 = (uint64_t)NSMapGet(v46, v51);
            if (v52 >= 1)
            {
              if (v52 <= 1) {
                uint64_t v53 = 1;
              }
              else {
                uint64_t v53 = v52;
              }
              do
              {
                long long v54 = [a3 superview];
                -[UIView _addGeometryChangeObserver:](v54, v51);

                --v53;
              }
              while (v53);
            }
          }
          uint64_t v48 = [(NSMapTable *)v46 countByEnumeratingWithState:&v107 objects:buf count:16];
        }
        while (v48);
      }

      id v13 = v80;
      uint64_t v9 = (char *)a3 + 96;
    }
    for (unint64_t k = ((unint64_t)*((unsigned int *)v9 + 4) >> 2) & 0xF; k; --k)
    {
      double v56 = [a3 superview];
      -[UIView _addGeometryChangeObserver:](v56, a3);
    }
    if (v13)
    {
      [v75 _setFirstResponder:v13];
      if (v75) {
        __addingResponderToTree = 0;
      }
    }
    -[UIView _postMovedFromSuperview:](a3, v10);
    long long v101 = 0u;
    long long v102 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    id v57 = obj;
    uint64_t v58 = [v57 countByEnumeratingWithState:&v99 objects:v111 count:16];
    if (v58)
    {
      uint64_t v59 = v58;
      uint64_t v60 = *(void *)v100;
      do
      {
        for (uint64_t m = 0; m != v59; ++m)
        {
          if (*(void *)v100 != v60) {
            objc_enumerationMutation(v57);
          }
          [*(id *)(*((void *)&v99 + 1) + 8 * m) _monitoredView:a3 didMoveFromSuperview:v10 toSuperview:self];
        }
        uint64_t v59 = [v57 countByEnumeratingWithState:&v99 objects:v111 count:16];
      }
      while (v59);
    }

    _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(a3, &__block_literal_global_1188);
  }
  [a3 movedToSuperview:self];
  [(UIView *)self didAddSubview:a3];
  if ((*(void *)&self->_viewFlags & 0x400000000000000) != 0
    || (*(void *)v9 & 0x400000000000000) != 0 && [(UIView *)self _hostsLayoutEngine])
  {
    if (v10 != self) {
      -[UIView _invalidateAutoresizingConstraints]((uint64_t)a3);
    }
    -[UIView _synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable]((uint64_t)self);
  }
  if ((_UIViewShowAlignmentRects() & 1) != 0
    || +[UIView _toolsDebugAlignmentRects])
  {
    long long v62 = [(UIView *)self _alignmentDebuggingOverlayCreateIfNecessary:0];
    long long v63 = v62;
    if (v62 && v62 != self)
    {
      double v64 = [(UIView *)self subviews];
      long long v65 = [v64 lastObject];

      if (v63 != v65) {
        [(UIView *)self bringSubviewToFront:v63];
      }
    }
  }
  else if ((*((void *)&self->_viewFlags + 1) & 0x10000000000000) != 0)
  {
    _UIViewRecursivelyRemoveDebugAlignmentViews(self);
  }
  if (+[UIView _toolsDebugColorViewBounds])
  {
    v66 = [(UIView *)self _colorViewBoundsOverlayCreateIfNecessary:0];
    uint64_t v67 = v66;
    if (v66)
    {
      if (v66 != self)
      {
        int v68 = [(UIView *)self subviews];
        BOOL v69 = [v68 lastObject];

        if (v67 != v69) {
          [(UIView *)self bringSubviewToFront:v67];
        }
      }
    }
  }
  else if ((*((void *)&self->_viewFlags + 1) & 0x8000000000000) != 0)
  {
    [(UIView *)self _removeColorViewBoundsOverlays];
  }
  if ([a3 _drawsAsBackdropOverlay])
  {
    *((void *)&v70 + 1) = *((unsigned int *)v9 + 4);
    *(void *)&long long v70 = *((void *)v9 + 1);
    [a3 _setDrawsAsBackdropOverlayWithBlendMode:(unint64_t)(v70 >> 33) & 3];
  }
  if (v10 != self)
  {
    if (*((_DWORD *)v9 + 4) & 0x3C | *((void *)v9 + 1) & 0x8000000000000000)
    {
      uint64_t v71 = v10;
      uint64_t v95 = 0;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v97 = 0u;
      uint64_t v82 = 16;
      uint64_t v98 = 0;
      double v96 = v71;
      -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)a3, &v82);
    }
    [a3 _updateCombinedInsetsIfNecessary];
    if ([(UIView *)self _shouldInformFocusAboutBecomingVisible])
    {
      if ([a3 _shouldInformFocusAboutBecomingVisible])
      {
        int v72 = [a3 _focusSystem];
        [v72 _focusEnvironmentDidAppear:a3];
      }
    }
  }
}

- (void)_backing_outermostLayer
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = a1[21];
    if (!v2 || (v3 = *(id *)(v2 + 8), (uint64_t v4 = v3) == 0))
    {
      id v3 = 0;
      uint64_t v4 = (void *)v1[20];
    }
    uint64_t v1 = v4;
  }
  return v1;
}

- (void)_makeSubtreePerformSelector:(SEL)a3 withObject:(id)a4 withObject:(id)a5 copySublayers:(BOOL)a6
{
}

- (void)_makeSubtreePerformSelector:(SEL)a3 withObject:(id)a4
{
}

- (void)_backing_invalidateSubviewCache
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = 0;

    uint64_t v3 = *(void *)(a1 + 168);
    -[UIContentUnavailableImageProperties _setTintColor:](v3, 0);
  }
}

- (void)setAlpha:(CGFloat)alpha
{
  double v5 = -[UIView _backing_alpha]((uint64_t)self);
  unint64_t v6 = [(UIView *)self _countOfMotionEffectsInSubtree];
  -[UIView _backing_setAlpha:]((uint64_t)self, alpha);
  if (v6)
  {
    if (alpha < 0.01 || v5 >= 0.01)
    {
      if (self && alpha < 0.01 && v5 >= 0.01) {
        _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(self, &__block_literal_global_1184_0);
      }
    }
    else
    {
      -[UIView _recursivelyConsiderResumingMotionEffects](self);
    }
  }
  int v7 = (alpha < 0.01) ^ (v5 < 0.01);
  if (_UIViewNotifiesFocusEngineForAlphaAndHiddenChanges() && v7)
  {
    if (alpha >= 0.01)
    {
      if (![(UIView *)self _shouldInformFocusAboutBecomingVisible]) {
        goto LABEL_16;
      }
      int v8 = [(UIView *)self _focusSystem];
      [v8 _focusEnvironmentDidBecomeVisible:self];
    }
    else
    {
      int v8 = [(UIView *)self _focusSystem];
      [v8 _focusEnvironmentWillBecomeInvisible:self];
    }
  }
LABEL_16:
  if (v5 != alpha) {
    +[UIFocusRingManager updateRingForFocusItem:self];
  }
  if (v7)
  {
    _UIViewNotifyPhysicalButtonArbiterOfEffectiveVisibilityChangeIfNeeded(self);
  }
}

- (double)_backing_alpha
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)(a1 + 168);
  if (!v2 || (v3 = *(id *)(v2 + 8), (uint64_t v4 = v3) == 0))
  {
    uint64_t v4 = 0;
    id v3 = *(id *)(a1 + 160);
  }
  [v3 opacity];
  double v6 = v5;

  return v6;
}

- (unint64_t)_countOfMotionEffectsInSubtree
{
  uint64_t v2 = objc_getAssociatedObject(self, &_UIViewCountOfMotionEffectsInSubtreeAssocObjectKey);
  unint64_t v3 = [v2 unsignedIntegerValue];

  return v3;
}

- (void)_backing_setAlpha:(uint64_t)a1
{
  if (a1)
  {
    float v3 = a2;
    uint64_t v4 = *(void *)(a1 + 168);
    if (!v4 || (id v5 = *(id *)(v4 + 8), (v6 = v5) == 0))
    {
      id v6 = 0;
      id v5 = *(id *)(a1 + 160);
    }
    id v7 = v6;
    *(float *)&a2 = v3;
    [v5 setOpacity:a2];
  }
}

- (void)_synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable
{
  if (a1)
  {
    if ([*(id *)(a1 + 160) needsLayout])
    {
      uint64_t v2 = +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger];
      [v2 didSendSetNeedsLayoutToLayerOfView:a1];

      if ((*(void *)(a1 + 96) & 0x800000000000000) != 0)
      {
        objc_msgSend((id)a1, "_is_setNeedsLayout");
      }
    }
  }
}

- (BOOL)_isAncestorOfFirstResponder
{
  return (*(void *)&self->_viewFlags >> 16) & 1;
}

- (BOOL)_drawsAsBackdropOverlay
{
  return (*((void *)&self->_viewFlags + 1) & 0x600000000) != 0;
}

- (void)_removeParentGeometryObservers
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = (id)[a1 superview];
    float v3 = a1 + 12;
    if ((a1[13] & 0x8000000000000000) != 0)
    {
      objc_getAssociatedObject(a1, &_UIGeometryObserversKey);
      uint64_t v4 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      uint64_t v5 = [(NSMapTable *)v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)v14;
        do
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v14 != v7) {
              objc_enumerationMutation(v4);
            }
            uint64_t v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
            uint64_t v10 = (uint64_t)NSMapGet(v4, v9);
            if (v10 >= 1)
            {
              if (v10 <= 1) {
                uint64_t v11 = 1;
              }
              else {
                uint64_t v11 = v10;
              }
              do
              {
                -[UIView _removeGeometryChangeObserver:](v2, v9);
                --v11;
              }
              while (v11);
            }
          }
          uint64_t v6 = [(NSMapTable *)v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
        }
        while (v6);
      }

      float v3 = a1 + 12;
    }
    for (unint64_t j = ((unint64_t)*((unsigned int *)v3 + 4) >> 2) & 0xF; j; --j)
      -[UIView _removeGeometryChangeObserver:](v2, a1);
  }
}

- (BOOL)isFocused
{
  uint64_t v2 = self;
  float v3 = [(UIView *)self _focusSystem];
  uint64_t v4 = [v3 _focusedView];
  LOBYTE(v2) = v4 == v2;

  return (char)v2;
}

- (UIFocusSystem)_focusSystem
{
  return +[UIFocusSystem focusSystemForEnvironment:self];
}

- (void)_postMovedFromSuperview:(void *)a1
{
  id v3 = a2;
  if (a1)
  {
    id v4 = (id)[a1 superview];
    uint64_t v5 = [v4 _window];

    if (v5) {
      uint64_t v5 = __windowForView((uint64_t)a1);
    }
    if (qword_1EB25C350 != -1) {
      dispatch_once(&qword_1EB25C350, &__block_literal_global_3781);
    }
    if (objc_opt_isKindOfClass())
    {
      id v6 = v3;
    }
    else
    {
      id v6 = [v3 window];
    }
    uint64_t v7 = v6;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    long long v17 = __45__UIView_Hierarchy___postMovedFromSuperview___block_invoke;
    uint64_t v18 = &unk_1E530FEF8;
    id v19 = v3;
    id v20 = a1;
    id v22 = v4;
    uint64_t v23 = v5;
    id v8 = v7;
    id v21 = v8;
    uint64_t v9 = v16;
    id v10 = v5;
    id v11 = [v8 _layoutEngineIfAvailable];
    id v12 = [v10 _layoutEngineIfAvailable];

    if (v11 == v12)
    {

      BOOL v14 = 0;
      id v12 = 0;
      BOOL v13 = v11 != 0;
    }
    else
    {
      BOOL v13 = v11 != 0;
      BOOL v14 = v12 != 0;
      if (v11 && v12)
      {
        v24[0] = MEMORY[0x1E4F143A8];
        v24[1] = 3221225472;
        v24[2] = ___UIInvokeWithWindowsEngineOptimizationDisabled_block_invoke;
        v24[3] = &unk_1E52DA160;
        id v12 = v12;
        id v25 = v12;
        uint64_t v26 = v9;
        [v11 withAutomaticOptimizationDisabled:v24];

LABEL_21:
        goto LABEL_22;
      }
    }
    if (v14 || v13)
    {
      if (v13) {
        long long v15 = v11;
      }
      else {
        long long v15 = v12;
      }
      [v15 withAutomaticOptimizationDisabled:v9];
    }
    else
    {
      v17((uint64_t)v9);
    }
    goto LABEL_21;
  }
LABEL_22:
}

- (void)_willMoveToWindow:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = [(UIView *)self window];
  id v6 = v5;
  if (a3 || !v5)
  {
    if (!v5) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v7 = [v5 windowScene];

    if (v7)
    {
      [(id)UIApp _cancelGestureRecognizersForView:self];
      [(id)UIApp _cancelPressesIfNeededForViewRemovedFromResponderChain:self];
      if (qword_1EB25C1E0 != -1) {
        dispatch_once(&qword_1EB25C1E0, &__block_literal_global_2314);
      }
      if (byte_1EB25C0AF) {
        [(id)UIApp _cancelTouchesIfNeededForViewRemovedFromResponderChain:self];
      }
    }
    if ((*(_DWORD *)&self->_viewFlags & 0x80000000) != 0)
    {
      BOOL v8 = [(UIView *)self viewTraversalMark];
      uint64_t v9 = self->_viewDelegate;
      uint64_t v10 = [(UIViewController *)v9 parentViewController];
      id v11 = (void *)v10;
      if ((v8 || !v10)
        && ![[(UIView *)self superview] _associatedViewControllerForwardsAppearanceCallbacks:v9 performHierarchyCheck:0 isRoot:v8])
      {
        if (![(UIViewController *)v9 inExplicitAppearanceTransition])
        {
          if (_UIViewIsAnimating(self))
          {
            uint64_t v12 = 1;
          }
          else
          {
            BOOL v13 = [v11 _existingView];
            uint64_t v12 = _UIAncestorViewIsInTransition(v13, self);

            if (!v12 && !v11) {
              uint64_t v12 = _UIAncestorViewControllerIsInAnimatedTransition(self);
            }
          }
          BOOL v14 = [(UIViewController *)v9 _parentModalViewController];
          if (v14)
          {
          }
          else if (![(UIViewController *)v9 isPerformingModalTransition])
          {
            [(UIViewController *)v9 setInAnimatedVCTransition:v12];
          }
        }
        [(UIViewController *)v9 viewWillMoveToWindow:0];
        *(void *)&self->_viewFlags |= 0x100000000uLL;
      }
      if (v8) {
        [(UIView *)self setViewTraversalMark:0];
      }
      [(UIResponder *)v9 _resignIfContainsFirstResponder];
    }
    if ([(UIView *)self isFirstResponder]) {
      [(UIResponder *)self resignFirstResponder];
    }
  }
  if ([v6 isTrackingKeyboard])
  {
    id v15 = v6;
    long long v16 = v15;
    if (self && self->_keyboardLayoutGuide) {
      objc_msgSend(v15, "removeKeyboardLayoutGuideIfNeeded:");
    }
  }
LABEL_35:
  if ((*(void *)&self->_viewFlags & 0x40000000000) != 0) {
    [v6 _unregisterSubtreeMonitor:self];
  }
  if (a3)
  {
    long long v17 = [a3 screen];
    -[UIView _willChangeToIdiomOnScreen:traverseHierarchy:](self, v17, 0);
  }
  viewBackingAudouble x = self->_viewBackingAux;
  if (viewBackingAux) {
    effectHost = viewBackingAux->_effectHost;
  }
  else {
    effectHost = 0;
  }
  [(UIVisualEffectBackingHost *)effectHost willMoveToWindow:a3];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v20 = [(UIView *)self interactions];
  uint64_t v21 = [v20 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v27 != v23) {
          objc_enumerationMutation(v20);
        }
        id v25 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        if (objc_opt_respondsToSelector()) {
          [v25 _willMoveFromWindow:v6 toWindow:a3];
        }
      }
      uint64_t v22 = [v20 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v22);
  }

  [(UIView *)self willMoveToWindow:a3];
}

- (void)_willMoveToWindow:(id)a3 withAncestorView:(id)a4
{
  if (a3)
  {
    if ((*(void *)&self->_viewFlags & 0x80000000) != 0)
    {
      uint64_t v7 = [(UIView *)self window];

      if (!v7)
      {
        viewDelegate = self->_viewDelegate;
        id v9 = [(UIViewController *)viewDelegate parentViewController];
        uint64_t v10 = v9;
        if (v9 && ([v9 _forwardAppearanceMethods] & 1) != 0) {
          int v11 = 0;
        }
        else {
          int v11 = ![(UIViewController *)viewDelegate _forwardAppearanceMethods];
        }
        BOOL v12 = [(UIView *)self viewTraversalMark];
        if (([a4 _associatedViewControllerForwardsAppearanceCallbacks:viewDelegate performHierarchyCheck:v12 isRoot:v12] & 1) == 0)
        {
          int v13 = v11 ^ 1;
          if (v10) {
            int v13 = 0;
          }
          if (v13 | v12
            || ![[(UIView *)self superview] _associatedViewControllerForwardsAppearanceCallbacks:viewDelegate performHierarchyCheck:1 isRoot:0])
          {
            char v14 = v10 ? v11 : 1;
            if ((v14 & 1) != 0
              || ([v10 _existingView],
                  id v15 = objc_claimAutoreleasedReturnValue(),
                  [v15 window],
                  long long v16 = objc_claimAutoreleasedReturnValue(),
                  v16,
                  v15,
                  v16))
            {
              if (![(UIViewController *)viewDelegate inExplicitAppearanceTransition])
              {
                if (_UIViewIsAnimating(self))
                {
                  uint64_t v17 = 1;
                }
                else
                {
                  uint64_t v18 = _UIAncestorViewIsInTransition(a4, 0);
                  uint64_t v17 = v18;
                  if (!v10 && !v18) {
                    uint64_t v17 = _UIAncestorViewControllerIsInAnimatedTransition(self);
                  }
                }
                id v19 = [(UIViewController *)viewDelegate _parentModalViewController];
                if (v19)
                {
                }
                else if (![(UIViewController *)viewDelegate isPerformingModalTransition])
                {
                  [(UIViewController *)viewDelegate setInAnimatedVCTransition:v17];
                }
              }
              [(UIViewController *)viewDelegate viewWillMoveToWindow:a3];
              *(void *)&self->_viewFlags |= 0x100000000uLL;
            }
          }
        }
        if (v12) {
          [(UIView *)self setViewTraversalMark:0];
        }
      }
    }
  }
  -[UIView _willMoveToWindow:](self, "_willMoveToWindow:", a3, a4);
}

- (void)_backing_addSubview:(uint64_t)a1
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 160);
    -[UIView _backing_outermostLayer](a2);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    [v2 addSublayer:v3];
  }
}

- (void)_willChangeToIdiom:(void *)a3 onScreen:(char)a4 traverseHierarchy:
{
  id v7 = a3;
  BOOL v8 = v7;
  if (a1)
  {
    if (v7)
    {
      if ([a1 _screen])
      {
        uint64_t v9 = objc_msgSend((id)objc_msgSend(a1, "_screen"), "_userInterfaceIdiom");
        [v8 scale];
        if (v9 == a2) {
          goto LABEL_9;
        }
      }
      else
      {
        [v8 scale];
      }
      v15[0] = 0;
      v15[1] = v15;
      v15[2] = 0x2050000000;
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __66__UIView_Internal___willChangeToIdiom_onScreen_traverseHierarchy___block_invoke;
      v10[3] = &unk_1E5310038;
      uint64_t v13 = a2;
      char v14 = a4;
      id v11 = v8;
      BOOL v12 = v15;
      v15[3] = v10;
      __66__UIView_Internal___willChangeToIdiom_onScreen_traverseHierarchy___block_invoke((uint64_t)v10, a1);

      _Block_object_dispose(v15, 8);
    }
    else
    {
      [0 scale];
    }
  }
LABEL_9:
}

- (uint64_t)_bitFlagValueAfterIncrementingHiddenManagementCountForKey:(uint64_t)a3 withIncrement:(int)a4 bitFlagValue:
{
  if (!a1 || -[UIView _hiddenManagementCountForKey:bitFlagValue:](a1, a2, a4) + a3 < 1) {
    return 0;
  }
  id v6 = objc_msgSend(NSNumber, "numberWithInteger:");
  uint64_t v7 = 1;
  objc_setAssociatedObject(a1, a2, v6, (void *)1);

  return v7;
}

- (uint64_t)_hiddenManagementCountForKey:(int)a3 bitFlagValue:
{
  if (!a1 || !a3) {
    return 0;
  }
  id v3 = objc_getAssociatedObject(a1, a2);
  uint64_t v4 = [v3 integerValue];

  return v4;
}

+ (id)_defaultUIViewActionForLayer:(id)a3 forKey:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ([a1 _isInAnimationBlockWithAnimationsEnabled])
  {
    BOOL v8 = objc_msgSend((id)__currentViewAnimationState, "actionForLayer:forKey:forView:", v6, v7, objc_msgSend(v6, "unsafeUnretainedDelegate"));
    if ([a1 _shouldTrackActionWithAnimator:v8]) {
      id v9 = +[UIViewPropertyAnimator _trackNonAdditiveAnimationWithAnimator:v8 forLayer:v6 forKey:v7];
    }
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

- (BOOL)_shouldAnimatePropertyWithKey:(id)a3
{
  id v4 = a3;
  self;
  if (byte_1EB25C0A4 != 1 || ([v4 isEqualToString:@"contents"] & 1) == 0)
  {
    if (__currentViewAnimationState)
    {
      char v5 = [(id)__currentViewAnimationState shouldAnimatePropertyWithKey:v4];
LABEL_8:
      BOOL v6 = v5;
      goto LABEL_9;
    }
    if ((-[UIView _backing__shouldAnimatePropertyWithKey:]((uint64_t)self, (uint64_t)v4) & 1) == 0)
    {
      char v5 = _CASupportsAnimationForKey(v4);
      goto LABEL_8;
    }
  }
  BOOL v6 = 1;
LABEL_9:

  return v6;
}

- (id)actionForLayer:(id)a3 forKey:(id)a4
{
  if ([a4 isEqualToString:@"presentationModifiers"]) {
    return (id)*MEMORY[0x1E4F1D260];
  }
  if (pthread_main_np() != 1)
  {
    [(UIView *)self _raiseExceptionForBackgroundThreadLayerPropertyModification];
    return (id)*MEMORY[0x1E4F1D260];
  }
  if (self->_viewBackingAux && self->_layer == a3 && _UIViewBackingObservesChanges((uint64_t)a4)) {
    -[UIView _backing_willChangeValueForKeyPath:]((uint64_t)self, (uint64_t)a4);
  }
  if (self->_swiftAnimationInfo && [a4 isEqualToString:*MEMORY[0x1E4F3A4B0]])
  {
    id v7 = [UIViewBlockBasedCAAction alloc];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = __45__UIView_UIKitManual__actionForLayer_forKey___block_invoke;
    v14[3] = &unk_1E52DC580;
    v14[4] = self;
    BOOL v8 = [(UIViewBlockBasedCAAction *)v7 initWithEmptyBlock:v14];
    return v8;
  }
  if (![(UIView *)self _shouldAnimatePropertyWithKey:a4]) {
    return (id)*MEMORY[0x1E4F1D260];
  }
  if (([(id)objc_opt_class() _isInAnimationBlockWithAnimationsEnabled] & 1) == 0)
  {
    if (__currentViewAnimationState)
    {
      id v11 = (void *)[(id)__currentViewAnimationState _outerPropertyAnimator:1];
      if ([v11 _originalToValueForKey:a4 inLayer:a3])
      {
        BOOL v12 = [UIViewBlockBasedCAAction alloc];
        v13[0] = MEMORY[0x1E4F143A8];
        v13[1] = 3221225472;
        v13[2] = __45__UIView_UIKitManual__actionForLayer_forKey___block_invoke_2;
        v13[3] = &unk_1E5310460;
        v13[4] = v11;
        BOOL v8 = [(UIViewBlockBasedCAAction *)v12 initWithActionBlock:v13];
        return v8;
      }
    }
    return (id)*MEMORY[0x1E4F1D260];
  }
  uint64_t v10 = (void *)[(id)objc_opt_class() _defaultUIViewActionForLayer:a3 forKey:a4];
  if (v10)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if (+[UIView _isAnimationTracking]) {
        [(id)__currentViewAnimationState _trackAnimation:v10 withAnimationKey:a4 forKeyPath:a4 inLayer:a3];
      }
    }
  }
  if (v10) {
    return v10;
  }
  else {
    return (id)*MEMORY[0x1E4F1D260];
  }
}

- (uint64_t)_backing__shouldAnimatePropertyWithKey:(uint64_t)result
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 168);
    if (v2) {
      id v3 = *(void **)(v2 + 40);
    }
    else {
      id v3 = 0;
    }
    return [v3 _shouldAnimatePropertyWithKey:a2];
  }
  return result;
}

+ (BOOL)_isInAnimationBlockWithAnimationsEnabled
{
  int v3 = [a1 _isInAnimationBlock];
  if (v3)
  {
    LOBYTE(v3) = [a1 areAnimationsEnabled];
  }
  return v3;
}

+ (BOOL)_isInAnimationBlock
{
  return __currentViewAnimationState != 0;
}

+ (void)performWithoutAnimation:(void *)actionsWithoutAnimation
{
  int v3 = actionsWithoutAnimation;
  BOOL v4 = +[UIView areAnimationsEnabled];
  +[UIView setAnimationsEnabled:0];
  v3[2](v3);

  +[UIView setAnimationsEnabled:v4];
}

+ (BOOL)areAnimationsEnabled
{
  return __animate;
}

+ (void)setAnimationsEnabled:(BOOL)enabled
{
  if (pthread_main_np() == 1)
  {
    __animate = enabled;
  }
  else if (setAnimationsEnabled__once != -1)
  {
    dispatch_once(&setAnimationsEnabled__once, &__block_literal_global_2566);
  }
}

+ (BOOL)_shouldTrackActionWithAnimator:(id)a3
{
  id v4 = a3;
  if ([a1 _shouldTrackAnimationsWithAnimator])
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

+ (BOOL)_shouldTrackAnimationsWithAnimator
{
  BOOL v2 = +[UIViewPropertyAnimator _trackingAnimationsCurrentlyEnabled];
  BOOL v3 = +[UIView _isAnimationTracking];
  char v4 = [(id)__currentViewAnimationState isInProcess];
  BOOL result = 0;
  if (v2 && !v3)
  {
    BOOL v6 = (id *)(id)__currentViewAnimationState;
    if (v6)
    {
      id v7 = v6;
      do
      {
        id WeakRetained = objc_loadWeakRetained(v7 + 34);
        if (WeakRetained) {
          break;
        }
        id v9 = (id *)v7[1];

        id v7 = v9;
      }
      while (v9);
    }
    else
    {
      id WeakRetained = 0;
    }
    if (WeakRetained) {
      return 0;
    }
    else {
      return v4 ^ 1;
    }
  }
  return result;
}

+ (BOOL)_isAnimationTracking
{
  return qword_1EB25C0E0 != 0;
}

- (BOOL)_containsView:(uint64_t)a1
{
  BOOL v2 = 0;
  if (a1 && a2)
  {
    char v4 = *(void **)(a2 + 160);
    if (v4)
    {
      do
      {
        char v5 = *(void **)(a1 + 160);
        BOOL v2 = v4 == v5;
        if (v4 == v5) {
          break;
        }
        char v4 = (void *)[v4 superlayer];
      }
      while (v4);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

- (void)_backing_insertSubview:(uint64_t)a3 atIndex:
{
  if (a1)
  {
    char v4 = *(void **)(a1 + 160);
    -[UIView _backing_outermostLayer](a2);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    [v4 insertSublayer:v5 atIndex:a3];
  }
}

- (uint64_t)_invalidateAutoresizingConstraints
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    BOOL result = -[UIView _usesAutoresizingConstraints](result);
    if (result)
    {
      -[UIView _setAutoresizingConstraints:](v1, 0);
      return [v1 _setNeedsUpdateConstraints];
    }
  }
  return result;
}

uint64_t __75__UIView__UIViewBacking___backing_addPrivateSubview_positioned_relativeTo___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) bounds];
  double MidX = CGRectGetMidX(v13);
  [*(id *)(a1 + 32) bounds];
  double MidY = CGRectGetMidY(v14);
  [*(id *)(a1 + 40) bounds];
  double v5 = v4;
  [*(id *)(a1 + 40) bounds];
  double v7 = v6;
  [*(id *)(a1 + 32) bounds];
  double Width = CGRectGetWidth(v15);
  [*(id *)(a1 + 32) bounds];
  double Height = CGRectGetHeight(v16);
  uint64_t v10 = *(void **)(a1 + 40);
  return objc_msgSend(v10, "_privateSubview_updateGeometryWithCenter:bounds:", MidX, MidY, v5, v7, Width, Height);
}

uint64_t __57__UIView_AdditionalLayoutSupport___switchToLayoutEngine___block_invoke_2(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  BOOL v2 = (void *)[*(id *)(a1 + 32) _allSubviews];
  uint64_t result = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v17;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v16 + 1) + 8 * v6++) _parentalLayoutEngineDidChangeTo:*(void *)(a1 + 40)];
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  if (*(void *)(a1 + 40))
  {
    double v7 = *(void **)(a1 + 32);
    if (v7) {
      _UIViewEnumerateConstraints(v7, (uint64_t)&__block_literal_global_207_2);
    }
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    BOOL v8 = *(void **)(a1 + 48);
    uint64_t result = [v8 countByEnumeratingWithState:&v12 objects:v20 count:16];
    if (result)
    {
      uint64_t v9 = result;
      uint64_t v10 = *(void *)v13;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v8);
          }
          [*(id *)(*((void *)&v12 + 1) + 8 * v11++) _addToEngine:*(void *)(a1 + 40)];
        }
        while (v9 != v11);
        uint64_t result = [v8 countByEnumeratingWithState:&v12 objects:v20 count:16];
        uint64_t v9 = result;
      }
      while (result);
    }
    if (!*(void *)(a1 + 56))
    {
      uint64_t result = [*(id *)(a1 + 32) needsUpdateConstraints];
      if (result) {
        return objc_msgSend(*(id *)(a1 + 32), "_informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:", objc_msgSend(*(id *)(a1 + 32), "_wantsAutolayout"));
      }
    }
  }
  return result;
}

void __45__UIView_Hierarchy___postMovedFromSuperview___block_invoke(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  if (v2) {
    _UIViewRemoveConstraintsMadeDanglyByChangingSuperview(*(void *)(a1 + 40), v2, *(void **)(a1 + 56));
  }
  BOOL v3 = *(void **)(a1 + 40);
  uint64_t v4 = [*(id *)(a1 + 56) _layoutEngine];
  [v3 _parentalLayoutEngineDidChangeTo:v4];

  uint64_t v5 = *(void *)(a1 + 64);
  if (v5 != *(void *)(a1 + 48))
  {
    -[UIView _recursivelyUpdateCachedWindowForMoveToWindow:](*(void **)(a1 + 40), v5);
    [*(id *)(a1 + 40) _didMoveFromWindow:*(void *)(a1 + 48) toWindow:*(void *)(a1 + 64)];
  }
  if ([*(id *)(a1 + 40) _needsDoubleUpdateConstraintsPass])
  {
    LODWORD(v6) = 1;
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      unint64_t v8 = *(void *)(v7 + 96);
      if ((v8 & 0x1000000000000) != 0)
      {
        [*(id *)(a1 + 40) _recalculateStrictDescendantNeedsDoubleUpdateConstraints];
        unint64_t v8 = *(void *)(v7 + 96);
      }
      uint64_t v6 = (v8 >> 47) & 1;
    }
    else
    {
      LODWORD(v6) = 0;
    }
  }
  uint64_t v9 = *(void **)(a1 + 56);
  if (v9)
  {
    uint64_t v10 = *(void **)(a1 + 40);
    if (*(void *)(a1 + 64) && v10 && !__disablePromoteDescendantToFirstResponderCount)
    {
      [v10 _promoteSelfOrDescendantToFirstResponderIfNecessary];
      uint64_t v9 = *(void **)(a1 + 56);
      uint64_t v10 = *(void **)(a1 + 40);
    }
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 32);
    _UIViewVisitorEntertainAscendingTrackingVisitors(v9, (uint64_t)v10, v11, v12);
    _UIViewVisitorEntertainDescendingTrackingVisitors(v9, (uint64_t)v10, v11, v12);
    if (v6) {
      -[UIView _informSuperviewChainThatDescendantNeedsDoubleUpdateConstraintsPass](*(void *)(a1 + 40));
    }
    if (dyld_program_sdk_at_least())
    {
      uint64_t v13 = *(void *)(a1 + 64);
      if (v13 && v13 == *(void *)(a1 + 48)) {
        -[UIView _handleTraitChangeForHierarchyChangeWithBehavior:](*(void *)(a1 + 40), 0);
      }
      goto LABEL_40;
    }
    long long v14 = -[UIView __viewDelegate](*(id **)(a1 + 40));
    long long v15 = v14;
    if (v14)
    {
      uint64_t v16 = [v14 traitCollection];
      uint64_t v17 = [v15 _lastNotifiedTraitCollection];
      if (v16 | v17)
      {
        id v18 = (id)v17;
        if (([(id)v16 isEqual:v17] & 1) == 0)
        {
          *(void *)(*(void *)(a1 + 40) + 104) |= 0x800000000000uLL;
          [*(id *)(a1 + 40) setNeedsLayout];
        }
      }
      else
      {
        id v18 = 0;
        uint64_t v16 = 0;
      }
      goto LABEL_38;
    }
    uint64_t v16 = _traitCollectionIfValid(*(void **)(a1 + 56));
    if (!v16)
    {
LABEL_39:

      goto LABEL_40;
    }
    long long v19 = _traitCollectionIfValid(*(void **)(a1 + 32));
    if (!v19)
    {
      long long v19 = +[UITraitCollection _defaultTraitCollection]();
    }
    id v20 = (id)v16;
    id v18 = v19;
    id v21 = v20;
    uint64_t v16 = (uint64_t)v21;
    if (v18 == v21)
    {
    }
    else
    {
      if (v18)
      {
        char v22 = [v18 isEqual:v21];

        if (v22) {
          goto LABEL_37;
        }
      }
      else
      {
      }
      -[UIView _processChangesFromOldTraits:toCurrentTraits:withBehavior:](*(void **)(a1 + 40), v18, (void *)v16, 3);
    }
LABEL_37:

LABEL_38:
    goto LABEL_39;
  }
LABEL_40:
  uint64_t v23 = *(void *)(a1 + 32);
  if (v6 && v23)
  {
    do
    {
      if ((*(void *)(v23 + 96) & 0x1000000000000) != 0) {
        break;
      }
      uint64_t v24 = *(void *)(v23 + 104);
      int v25 = *(_DWORD *)(v23 + 112);
      *(void *)(v23 + 96) |= 0x1000000000000uLL;
      *(void *)(v23 + 104) = v24;
      *(_DWORD *)(v23 + 112) = v25;
      uint64_t v23 = [(id)v23 superview];
    }
    while (v23);
    uint64_t v23 = *(void *)(a1 + 32);
  }
  id v26 = [(id)v23 _mutableLayoutArrangements];
  if (v26) {
    [v26 makeObjectsPerformSelector:sel_removeItem_ withObject:*(void *)(a1 + 40)];
  }
  -[UIView _backing_didMoveToSuperView](*(void *)(a1 + 40));
  [*(id *)(a1 + 40) _didMoveFromSuperview:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) movedFromSuperview:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) didMoveToSuperview];
}

- (BOOL)_needsDoubleUpdateConstraintsPass
{
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  if ((viewFlags & 0x400000000000000) != 0)
  {
    if ([(UIView *)self _axesForDerivingIntrinsicContentSizeFromLayoutSize])
    {
      LOBYTE(v4) = [(UIView *)self _layoutHeightDependsOnWidth];
      return v4;
    }
    uint64_t viewFlags = (uint64_t)self->_viewFlags;
  }
  if ((viewFlags & 0x20000000000000) != 0)
  {
    LODWORD(v4) = -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self);
    if (v4)
    {
      unint64_t v5 = (unint64_t)self->_viewFlags;
      if ((v5 & 0x1000000000000) != 0)
      {
        [(UIView *)self _recalculateStrictDescendantNeedsDoubleUpdateConstraints];
        unint64_t v5 = (unint64_t)self->_viewFlags;
      }
      return (v5 >> 47) & 1;
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (void)_parentalLayoutEngineDidChangeTo:(id)a3
{
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  if ((viewFlags & 0x80000000000) != 0)
  {
    if ((viewFlags & 0x20000000000000) != 0 && [-[UIView _contentSizeConstraints](self) count])
    {
      unint64_t v5 = [(UIView *)self superview];
      uint64_t v6 = -[UIView _contentSizeConstraints](self);
      [(UIView *)v5 addConstraints:v6];
    }
  }
  else
  {
    [(UIView *)self _switchToLayoutEngine:a3];
  }
}

- (void)_switchToLayoutEngine:(id)a3
{
  unint64_t v5 = [(UIView *)self _layoutEngine];
  if (v5 != a3)
  {
    uint64_t v6 = v5;
    if (!self || !a3 || (*(void *)&self->_viewFlags & 0x1000) == 0)
    {
      id v7 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      [(UIView *)self _accumulateViewConstraintsIntoArray:v7];
      unint64_t v8 = v6;
      uint64_t v10 = MEMORY[0x1E4F143A8];
      uint64_t v11 = 3221225472;
      uint64_t v12 = __57__UIView_AdditionalLayoutSupport___switchToLayoutEngine___block_invoke;
      uint64_t v13 = &unk_1E52EEB90;
      long long v14 = v6;
      long long v15 = self;
      id v16 = v7;
      id v17 = a3;
      if (self)
      {
        uint64_t v9 = [(UIView *)self _layoutEngine];
        if (v9) {
          [(NSISEngine *)v9 withAutomaticOptimizationDisabled:&v10];
        }
        else {
          v12((uint64_t)&v10);
        }
      }
    }
  }
}

+ (id)_defaultInteractionTintColorForIdiom:(int64_t)a3
{
  if (a3 == 2 || a3 == 8)
  {
    BOOL v3 = +[UIColor _tvAppKeyColorOrDefaultTint];
  }
  else
  {
    if (a3 == 3) {
      +[UIColor _alternateSystemInteractionTintColor];
    }
    else {
    BOOL v3 = +[UIColor _appKeyColorOrDefaultTint]();
    }
  }
  return v3;
}

- (int64_t)_userInterfaceIdiom
{
  *((void *)&v2 + 1) = *((unsigned int *)&self->_viewFlags + 4);
  *(void *)&long long v2 = *((void *)&self->_viewFlags + 1);
  int64_t v3 = (v2 >> 41) & 7;
  if ((v2 & 0x10000000000) != 0) {
    return v3;
  }
  else {
    return -1;
  }
}

- (BOOL)_definesTintColor
{
  long long v2 = [(UIView *)self _interactionTintColor];
  BOOL v3 = v2 != 0;

  return v3;
}

- (uint64_t)_backing_didMoveToSuperView
{
  if (result)
  {
    uint64_t v1 = result;
    -[UIView _updateAutomaticCaptureGroupIfNecessary](result);
    uint64_t v2 = *(void *)(v1 + 168);
    if (v2) {
      BOOL v3 = *(void **)(v2 + 40);
    }
    else {
      BOOL v3 = 0;
    }
    return [v3 didMoveToSuperview];
  }
  return result;
}

- (void)_updateAutomaticCaptureGroupIfNecessary
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 168);
    BOOL v3 = v2 ? *(void **)(v2 + 40) : 0;
    uint64_t v4 = [v3 backgroundEffects];
    uint64_t v5 = [v4 count];

    if (v5)
    {
      if ((*(unsigned char *)(a1 + 121) & 0x10) == 0)
      {
        if ([(id)a1 _backgroundMergeBehavior] == 1)
        {
          -[_UICollectionLayoutItemSolver setSolveResult:](*(void *)(a1 + 168), 0);
          uint64_t v6 = objc_msgSend((id)a1, "mt_captureGroupName");
          uint64_t v7 = *(void *)(a1 + 168);
          if (v7) {
            unint64_t v8 = *(void **)(v7 + 40);
          }
          else {
            unint64_t v8 = 0;
          }
          id v13 = (id)v6;
          [v8 _setCaptureGroupName:v6];
        }
        else
        {
          uint64_t v9 = [(id)a1 superview];
          if (v9)
          {
            uint64_t v10 = v9;
            while (![v10 _hasBackgroundMaterial])
            {
              uint64_t v11 = [v10 superview];

              uint64_t v10 = (void *)v11;
              if (!v11)
              {
                uint64_t v9 = 0;
                goto LABEL_21;
              }
            }
            id v14 = v10;
            if ([(id)a1 _backgroundMergeBehavior] == 2
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              uint64_t v12 = objc_msgSend(v14, "mt_captureGroupName");
              -[UIView _mt_setCaptureGroupName:]((uint64_t *)a1, v12);
            }
            uint64_t v9 = v14;
          }
LABEL_21:
          id v13 = v9;
        }
      }
    }
  }
}

- (unint64_t)_axesForDerivingIntrinsicContentSizeFromLayoutSize
{
  return 0;
}

- (void)_recursivelyUpdateCachedWindowForMoveToWindow:(void *)a1
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    a1[9] = a2;
    if ((a1[13] & 0x200000) != 0)
    {
      uint64_t v4 = [a1 _maskView];
      -[UIView _recursivelyUpdateCachedWindowForMoveToWindow:](v4, a2);
    }
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v5 = -[UIView _backing_sublayers]((uint64_t)a1);
    uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = (id)objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * v9), "unsafeUnretainedDelegate", (void)v12);
          if (v10)
          {
            id v11 = v10;
            if (_IsKindOfUIView((uint64_t)v10)) {
              -[UIView _recursivelyUpdateCachedWindowForMoveToWindow:](v11, a2);
            }
          }
          ++v9;
        }
        while (v7 != v9);
        uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v7);
    }
  }
}

- (id)_backing_sublayers
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 168);
    if (v2 && *(void *)(v2 + 8))
    {
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      BOOL v3 = -[UIView _backing_layers]((void *)a1);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v6 = *(void *)v13;
        uint64_t v7 = (void *)MEMORY[0x1E4F1CBF0];
        do
        {
          for (uint64_t i = 0; i != v5; ++i)
          {
            if (*(void *)v13 != v6) {
              objc_enumerationMutation(v3);
            }
            if (*(void *)(*((void *)&v12 + 1) + 8 * i) == *(void *)(a1 + 160))
            {
              uint64_t v9 = objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "sublayers", (void)v12);
              uint64_t v10 = [v7 arrayByAddingObjectsFromArray:v9];

              uint64_t v7 = (void *)v10;
            }
            else
            {
              objc_msgSend(v7, "arrayByAddingObject:");
              uint64_t v7 = v9 = v7;
            }
          }
          uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
        }
        while (v5);
      }
      else
      {
        uint64_t v7 = (void *)MEMORY[0x1E4F1CBF0];
      }
    }
    else
    {
      uint64_t v7 = [*(id *)(a1 + 160) sublayers];
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  return v7;
}

- (id)_allSubviews
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  BOOL v3 = self->_viewBackingAux;
  p_isa = (id *)&v3->super.isa;
  if (!v3)
  {
    uint64_t v6 = [(UIView *)self subviews];
    goto LABEL_5;
  }
  allSubviewsCache = v3->_allSubviewsCache;
  if (allSubviewsCache)
  {
    uint64_t v6 = allSubviewsCache;
LABEL_5:
    uint64_t v7 = v6;
    goto LABEL_22;
  }
  uint64_t v8 = -[UIView _backing_sublayers]((uint64_t)self);
  uint64_t v7 = (NSMutableArray *)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v8, "count"));
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v9 = v8;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v19 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = (id)objc_msgSend(*(id *)(*((void *)&v18 + 1) + 8 * i), "unsafeUnretainedDelegate", (void)v18);
        if (v14)
        {
          long long v15 = v14;
          if (_IsKindOfUIView((uint64_t)v14))
          {
            id v16 = v15;
            [(NSMutableArray *)v7 addObject:v16];
          }
        }
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v11);

    if (!self) {
      goto LABEL_20;
    }
  }
  else
  {
  }
  if ((*(void *)&self->_viewFlags & 0x1000) == 0) {
LABEL_20:
  }
    objc_storeStrong(p_isa + 4, v7);

LABEL_22:
  return v7;
}

- (NSArray)subviews
{
  v23[1] = *MEMORY[0x1E4F143B8];
  p_subviewCache = &self->_subviewCache;
  subviewCache = self->_subviewCache;
  if (subviewCache)
  {
    uint64_t v4 = subviewCache;
    goto LABEL_26;
  }
  uint64_t v6 = [(CALayer *)self->_layer sublayers];
  uint64_t v7 = [v6 count];
  if (v7)
  {
    if (v7 == 1)
    {
      uint64_t v8 = [v6 objectAtIndex:0];
      id v9 = (id)[v8 unsafeUnretainedDelegate];

      if (v9 && _IsKindOfUIView((uint64_t)v9))
      {
        v23[0] = v9;
        uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v23 count:1];
      }
      else
      {
        uint64_t v4 = (NSArray *)MEMORY[0x1E4F1CBF0];
      }
    }
    else
    {
      uint64_t v4 = (NSArray *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v7];
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v10 = v6;
      uint64_t v11 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v19;
        do
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v19 != v13) {
              objc_enumerationMutation(v10);
            }
            id v15 = (id)objc_msgSend(*(id *)(*((void *)&v18 + 1) + 8 * i), "unsafeUnretainedDelegate", (void)v18);
            if (v15)
            {
              id v16 = v15;
              if (_IsKindOfUIView((uint64_t)v15)) {
                [(NSArray *)v4 addObject:v16];
              }
            }
          }
          uint64_t v12 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v12);

        if (!self) {
          goto LABEL_24;
        }
      }
      else
      {
      }
    }
    if ((*(void *)&self->_viewFlags & 0x1000) == 0) {
LABEL_24:
    }
      objc_storeStrong((id *)p_subviewCache, v4);
  }
  else
  {
    uint64_t v4 = (NSArray *)MEMORY[0x1E4F1CBF0];
  }

LABEL_26:
  return v4;
}

- (BOOL)_canHostViewControllerContentScrollView
{
  return 1;
}

- (void)_willChangeToIdiomOnScreen:(char)a3 traverseHierarchy:
{
  if (a1)
  {
    uint64_t v5 = a1;
    if (a2) {
      a1 = a2;
    }
    uint64_t v6 = [a1 _userInterfaceIdiom];
    if (v6 != [v5 _userInterfaceIdiom])
    {
      -[UIView _willChangeToIdiom:onScreen:traverseHierarchy:](v5, v6, a2, a3);
    }
  }
}

- (void)_didChangeFromIdiomOnScreen:(uint64_t)a3 traverseHierarchy:
{
  id v9 = a2;
  if (a1)
  {
    uint64_t v5 = v9;
    if (!v9) {
      uint64_t v5 = a1;
    }
    uint64_t v6 = [v5 _userInterfaceIdiom];
    id v7 = (id)[a1 _screen];
    if (!v7) {
      id v7 = a1;
    }
    uint64_t v8 = [v7 _userInterfaceIdiom];
    if (v8 == v6)
    {
      -[UIView _performUpdatesForPossibleChangesOfIdiom:orScreen:traverseHierarchy:](a1, v6, v9, a3);
    }
    else
    {
      [a1 _setUserInterfaceIdiom:v8];
      [a1 _didChangeFromIdiom:v6 onScreen:v9 traverseHierarchy:a3];
    }
  }
}

- (void)_performUpdatesForPossibleChangesOfIdiom:(id)a3 orScreen:(char)a4 traverseHierarchy:
{
  if (a1)
  {
    id v8 = (id)[a1 _screen];
    id v9 = v8;
    if (a3) {
      BOOL v10 = [v8 _userInterfaceIdiom] != a2;
    }
    else {
      BOOL v10 = 1;
    }
    v15[0] = 0;
    v15[1] = v15;
    v15[2] = 0x2050000000;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __88__UIView_Internal___performUpdatesForPossibleChangesOfIdiom_orScreen_traverseHierarchy___block_invoke;
    v11[3] = &unk_1E5310060;
    BOOL v12 = v10;
    BOOL v13 = v9 != a3;
    v11[5] = a3;
    v11[6] = v9;
    char v14 = a4;
    v11[4] = v15;
    v15[3] = v11;
    __88__UIView_Internal___performUpdatesForPossibleChangesOfIdiom_orScreen_traverseHierarchy___block_invoke((uint64_t)v11, a1);
    _Block_object_dispose(v15, 8);
  }
}

void __88__UIView_Internal___performUpdatesForPossibleChangesOfIdiom_orScreen_traverseHierarchy___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 56)) {
    [a2 _applyAppearanceInvocations];
  }
  if (*(unsigned char *)(a1 + 57)) {
    -[UIView _evaluateScreenPropertiesForOldScreen:newScreen:](a2, *(void **)(a1 + 40), *(void **)(a1 + 48));
  }
  if (*(unsigned char *)(a1 + 58))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    uint64_t v4 = objc_msgSend(a2, "_allSubviews", 0);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v10;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v4);
          }
          (*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 16))();
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v6);
    }
  }
}

- (void)_didMoveFromWindow:(id)a3 toWindow:(id)a4
{
  uint64_t v6 = self;
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  p_uint64_t viewFlags = &self->_viewFlags;
  uint64_t v55 = *(void *)((char *)&self->_viewFlags + 20);
  *(void *)((char *)&self->_viewFlags + 20) = v55 & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)(((unint64_t)a4 | v55 & 0x400000) != 0) << 22);
  if (a4)
  {
    *(void *)p_viewFlags &= ~0x4000uLL;
    if (dyld_program_sdk_at_least())
    {
      -[UIView _handleTraitChangeForHierarchyChangeWithBehavior:]((uint64_t)v6, 1);
      uint64_t v8 = *(void *)p_viewFlags;
      if ((*(void *)p_viewFlags & 0x400000000000000) != 0) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v8 = *(void *)p_viewFlags;
      *((_DWORD *)p_viewFlags + 4) &= ~0x80u;
      if ((v8 & 0x400000000000000) != 0)
      {
LABEL_4:
        if ((v8 & 0x400000000000000) != 0) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
LABEL_13:
    int v13 = [(id)objc_opt_class() requiresConstraintBasedLayout];
    if (!a4 || !v13) {
      goto LABEL_17;
    }
    if ((*(void *)p_viewFlags & 0x400000000000000) != 0) {
      goto LABEL_6;
    }
LABEL_5:
    [(UIView *)v6 _setWantsAutolayout];
LABEL_6:
    -[UIView _layoutEngine_windowDidChange](v6);
    if ((~*(void *)p_viewFlags & 0x300000000000) != 0) {
      [(UIView *)v6 _informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:1];
    }
    goto LABEL_17;
  }
  char v9 = dyld_program_sdk_at_least();
  uint64_t v10 = *(void *)p_viewFlags;
  if ((v9 & 1) == 0)
  {
    uint64_t v11 = *((void *)p_viewFlags + 1);
    unsigned int v12 = *((_DWORD *)p_viewFlags + 4) & 0xFFFFFF7F;
    *(void *)p_uint64_t viewFlags = v10;
    *((void *)p_viewFlags + 1) = v11;
    *((_DWORD *)p_viewFlags + 4) = v12;
  }
  if ((v10 & 0x400000000000000) == 0) {
    goto LABEL_13;
  }
LABEL_17:
  id v57 = p_viewFlags;
  id v14 = (id)[a4 screen];
  if (a3)
  {
    id v15 = [a3 screen];

    if (v15 == v14) {
      [(UIView *)v6 _applyAppearanceInvocations];
    }
  }
  double v56 = v14;
  id v16 = [(UIView *)v6 _maskView];
  id v17 = a3;
  [v16 _didMoveFromWindow:a3 toWindow:a4];

  long long v18 = -[UIView _backing_sublayers]((uint64_t)v6);
  long long v19 = (void *)[v18 copy];

  long long v86 = 0u;
  long long v87 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  obuint64_t j = v19;
  uint64_t v20 = [obj countByEnumeratingWithState:&v84 objects:v90 count:16];
  uint64_t v58 = v6;
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)v85;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v85 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = *(void **)(*((void *)&v84 + 1) + 8 * i);
        int v25 = (id)[v24 unsafeUnretainedDelegate];
        if (v25)
        {
          id v26 = v25;
          if (_IsKindOfUIView((uint64_t)v25))
          {
            long long v27 = [v24 superlayer];
            id v28 = a4;
            if (v27 == v6->_layer) {
              goto LABEL_32;
            }
            -[UIView _backing_outermostLayer](v6);
            long long v29 = (CALayer *)objc_claimAutoreleasedReturnValue();

            id v28 = a4;
            BOOL v30 = v27 == v29;
            uint64_t v6 = v58;
            if (v30) {
              goto LABEL_32;
            }
            id v28 = __windowForView((uint64_t)v26);
            if ((id)v26[9] != v28) {
              -[UIView _recursivelyUpdateCachedWindowForMoveToWindow:](v26, (uint64_t)v28);
            }
            if (v28 != v17) {
LABEL_32:
            }
              [v26 _didMoveFromWindow:v17 toWindow:v28];
          }
        }
      }
      uint64_t v21 = [obj countByEnumeratingWithState:&v84 objects:v90 count:16];
    }
    while (v21);
  }

  uint64_t v31 = v17;
  -[UIView _backing__didMoveFromWindow:toWindow:]((uint64_t)v6, (uint64_t)v17, (uint64_t)a4);
  if ((*((unsigned char *)v57 + 20) & 0x10) != 0)
  {
    [a4 _registerChargedView:v6];
    [v17 _unregisterChargedView:v6];
  }
  if (UIApp) {
    -[UIEventEnvironment _clearTouchesOfView:onWindow:](*(void *)(*(void *)(UIApp + 160) + 8), (uint64_t)v6, (uint64_t)v17);
  }
  if (v17) {
    [(UIView *)v6 movedFromWindow:v17];
  }
  if (a4)
  {
    if ((*(void *)v57 & 0x40000000000) != 0) {
      [v17 _unregisterSubtreeMonitor:v6];
    }
    [(UIView *)v6 movedToWindow:a4];
    if ((*((void *)v57 + 1) & 0xC0000000) != 0)
    {
LABEL_56:
      [a4 _createSystemGestureGateGestureRecognizerIfNeeded];
      [a4 _createOtherSystemGateGestureRecognizersIfNeeded];
    }
    else
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      uint64_t v32 = [(UIView *)v6 gestureRecognizers];
      uint64_t v33 = [v32 countByEnumeratingWithState:&v80 objects:v89 count:16];
      if (v33)
      {
        uint64_t v34 = v33;
        uint64_t v35 = *(void *)v81;
        while (2)
        {
          for (uint64_t j = 0; j != v34; ++j)
          {
            if (*(void *)v81 != v35) {
              objc_enumerationMutation(v32);
            }
            if ([*(id *)(*((void *)&v80 + 1) + 8 * j) _requiresSystemGesturesToFail])
            {

              uint64_t v31 = v17;
              goto LABEL_56;
            }
          }
          uint64_t v34 = [v32 countByEnumeratingWithState:&v80 objects:v89 count:16];
          uint64_t v31 = v17;
          if (v34) {
            continue;
          }
          break;
        }
      }
    }
  }
  if ((*(_DWORD *)v57 & 0x80000000) != 0)
  {
    uint64_t v37 = +[UIViewController viewControllerForView:v6];
    long long v38 = [(UIView *)v6 window];
    [v37 viewDidMoveToWindow:v38 shouldAppearOrDisappear:HIDWORD(*(void *)v57) & 1];

    *(void *)v57 &= ~0x100000000uLL;
  }
  BOOL v39 = [v31 screen];
  -[UIView _evaluateScreenPropertiesForOldScreen:newScreen:](v6, v39, v56);

  if (a4)
  {
    BOOL v40 = [v31 screen];
    -[UIView _didChangeFromIdiomOnScreen:traverseHierarchy:](v6, v40, 0);

    if ((*((void *)v57 + 1) & 0x1800000000) == 0 && (v55 & 0x400000) != 0) {
      [(UIView *)v6 _tintColorDidChange];
    }
    -[UIView _constrainKeyboardGuideToWindowGuideIfNeeded:]((uint64_t)v6, a4);
  }
  if (_AXSInvertColorsEnabled())
  {
    id v41 = [[_UITintColorVisitor alloc] initWithNotificationReasons:8];
    [(UIView *)v6 _receiveVisitor:v41];
  }
  [(UIView *)v6 accessibilityApplyInvertFilter];
  id v42 = v31;
  id v43 = a4;
  BOOL v44 = objc_getAssociatedObject(v6, &_UIBoundingPathChangeObserversKey);
  if ([v44 count])
  {
    -[UIView _removeBoundingPathRotationNotificationsForWindow:](v6, v42);
    -[UIView _addBoundingPathRotationNotificationsForWindow:](v6, v43);
  }

  uint64_t v45 = +[UIKeyboardImpl activeInstance];
  long long v46 = (void *)v45;
  if (!v43
    && v45
    && [(UIView *)v6 isUserInteractionEnabled]
    && ![(UIView *)v6 _shouldIgnoreAutofillSave]
    && [v46 isMemberOfPossibleAutofillGroup:v6])
  {
    uint64_t v47 = +[UIKeyboardImpl activeInstance];
    [v47 handleAutofillCredentialSaveIfNeeded:v6];
  }
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  uint64_t v48 = [(UIView *)v6 interactions];
  uint64_t v49 = [v48 countByEnumeratingWithState:&v76 objects:v88 count:16];
  if (v49)
  {
    uint64_t v50 = v49;
    uint64_t v51 = *(void *)v77;
    do
    {
      for (uint64_t k = 0; k != v50; ++k)
      {
        if (*(void *)v77 != v51) {
          objc_enumerationMutation(v48);
        }
        uint64_t v53 = *(void **)(*((void *)&v76 + 1) + 8 * k);
        if (objc_opt_respondsToSelector()) {
          [v53 _didMoveFromWindow:v42 toWindow:v43];
        }
      }
      uint64_t v50 = [v48 countByEnumeratingWithState:&v76 objects:v88 count:16];
    }
    while (v50);
  }

  if (*((_DWORD *)v57 + 4) & 0x3C | *((void *)v57 + 1) & 0x8000000000000000)
  {
    id v54 = v42;
    long long v74 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    uint64_t v60 = 256;
    uint64_t v75 = 0;
    *(void *)&long long v74 = v54;
    -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)v58, &v60);
  }
  [(UIView *)v58 didMoveToWindow];
}

- (void)_evaluateScreenPropertiesForOldScreen:(void *)a3 newScreen:
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = (void *)[result _shouldInheritScreenScaleAsContentScaleFactor];
    if (result)
    {
      [v5 contentScaleFactor];
      double v7 = v6;
      uint64_t result = (void *)[a3 scale];
      if (v8 != v7)
      {
        objc_msgSend(v5, "setContentScaleFactor:");
        uint64_t result = (void *)[v5 setNeedsDisplay];
      }
    }
    if (a2 != a3)
    {
      return (void *)[v5 _viewDidMoveFromScreen:a2 toScreen:a3];
    }
  }
  return result;
}

- (uint64_t)_backing__didMoveFromWindow:(uint64_t)a3 toWindow:
{
  if (result)
  {
    uint64_t v3 = *(void *)(result + 168);
    if (v3) {
      uint64_t v4 = *(void **)(v3 + 40);
    }
    else {
      uint64_t v4 = 0;
    }
    return [v4 _didMoveFromWindow:a2 toWindow:a3];
  }
  return result;
}

- (void)_handleTraitChangeForHierarchyChangeWithBehavior:(uint64_t)a1
{
  if (!a1) {
    return;
  }
  if (qword_1EB25C330 != -1) {
    dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
  }
  if (byte_1EB25C0B5)
  {
    _UIViewInvalidateTraitCollectionAndSchedulePropagation(a1, 0);
    -[UIView _updateTraitsIfNeededWithBehavior:](a1, a2);
    return;
  }
  uint64_t v4 = [(id)a1 _lastNotifiedTraitCollection];
  *(_DWORD *)(a1 + 112) &= ~0x80u;
  uint64_t v5 = [(id)a1 traitCollection];
  id v12 = v4;
  id v6 = v5;
  if (v12 == v6)
  {

    double v8 = v12;
  }
  else
  {
    if (v12 && v6)
    {
      char v7 = [v12 isEqual:v6];

      if (v7) {
        goto LABEL_24;
      }
    }
    else
    {
    }
    id v9 = *(id *)(a1 + 88);
    if (v9)
    {
      double v8 = v9;
      *(void *)(a1 + 104) |= 0x800000000000uLL;
      [(id)a1 setNeedsLayout];
    }
    else
    {
      uint64_t v10 = (void *)a1;
      do
      {
        uint64_t v10 = (id)[v10 superview];
        if (!v10) {
          goto LABEL_21;
        }
      }
      while (!v10[11]);
      if ((v10[13] & 0x800000000000) == 0)
      {
LABEL_21:
        -[UIView _processChangesFromOldTraits:toCurrentTraits:withBehavior:]((void *)a1, v12, v6, 3);
        goto LABEL_22;
      }
      uint64_t v11 = *(void *)(a1 + 104);
      *(void *)(a1 + 104) = v11 | 0x800000000000;
      if ((v11 & 0x1000000000000) != 0) {
        [(id)a1 setNeedsLayout];
      }
LABEL_22:
      double v8 = 0;
    }
  }

LABEL_24:
}

- (void)_constrainKeyboardGuideToWindowGuideIfNeeded:(uint64_t)a1
{
  id v3 = a2;
  if (a1 && *(void *)(a1 + 264))
  {
    id v4 = v3;
    objc_msgSend(v3, "addKeyboardLayoutGuideIfNeeded:");
    id v3 = v4;
  }
}

- (NSArray)gestureRecognizers
{
  return self->_gestureRecognizers;
}

- (int64_t)_compareGestureRecognizerContainer:(id)a3
{
  id v4 = a3;
  int IsKindOfUIView = _IsKindOfUIView((uint64_t)v4);
  int64_t v6 = _UIGestureRecognizerContainerCompare(self, v4, IsKindOfUIView ^ 1u);

  return v6;
}

- (void)_setUserInterfaceIdiom:(int64_t)a3
{
  uint64_t v3 = *((void *)&self->_viewFlags + 1);
  unint64_t v4 = v3 & 0xFFFFF0FFFFFFFFFFLL | ((unint64_t)(a3 != -1) << 40) | ((unint64_t)(a3 & 7) << 41);
  if (a3 == -1) {
    unint64_t v4 = v3 & 0xFFFFFEFFFFFFFFFFLL;
  }
  *((void *)&self->_viewFlags + 1) = v4;
}

- (void)_layoutEngine_windowDidChange
{
  if (a1 && [a1 window])
  {
    if (![a1 _layoutEngine]
      && ((a1[12] & 0x400000000000000) != 0 || [_UIViewConstraints(a1) count]))
    {
      [a1 _initializeLayoutEngine];
    }
    if ([a1 _hostsLayoutEngine])
    {
      objc_msgSend((id)objc_msgSend(a1, "_layoutEngine"), "engineScalingCoefficients");
      double v3 = v2;
      if (v5 != -[UIView _preferredLayoutEngineToUserScalingCoefficients](a1) || v3 != v4)
      {
        if ((dyld_program_sdk_at_least() & 1) != 0
          || [a1 _forceLayoutEngineSolutionInRationalEdges])
        {
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__layoutEngine_windowDidChange, a1, @"NSLayoutConstraint_UIKitAdditions.m", 804, @"Engine should not change scale because we are no longer integralizing in the engine");
        }
        -[UIView _rebuildLayoutFromScratch](a1);
      }
    }
  }
}

- (BOOL)_shouldIgnoreAutofillSave
{
  return 0;
}

- (void)_snipDangliesWithForce:(BOOL)a3 repairIfPossibleForViewThatMoved:(id)a4 newSuperview:(id)a5 oldSuperview:(id)a6
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  if ((viewFlags & 0x2000) != 0) {
    return;
  }
  uint64_t v11 = *((void *)&self->_viewFlags + 1);
  int v12 = *((_DWORD *)&self->_viewFlags + 4);
  if ((viewFlags & 0x10000000000000) == 0 && !a3) {
    return;
  }
  *(void *)&self->_uint64_t viewFlags = viewFlags & 0xFFEFFFFFFFFFFFFFLL;
  *((void *)&self->_viewFlags + 1) = v11;
  *((_DWORD *)&self->_viewFlags + 4) = v12;
  uint64_t v38 = 0;
  BOOL v39 = &v38;
  uint64_t v40 = 0x3052000000;
  id v41 = __Block_byref_object_copy__234;
  id v42 = __Block_byref_object_dispose__234;
  uint64_t v43 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = &v32;
  uint64_t v34 = 0x3052000000;
  uint64_t v35 = __Block_byref_object_copy__234;
  long long v36 = __Block_byref_object_dispose__234;
  uint64_t v37 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  int v13 = [(UIView *)self _constraintsExceptingSubviewAutoresizingConstraints];
  uint64_t v14 = [(NSArray *)v13 countByEnumeratingWithState:&v28 objects:v44 count:16];
  if (!v14) {
    goto LABEL_20;
  }
  uint64_t v15 = *(void *)v29;
  do
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if (*(void *)v29 != v15) {
        objc_enumerationMutation(v13);
      }
      uint64_t v17 = *(void *)(*((void *)&v28 + 1) + 8 * i);
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      uint64_t v20 = __117__UIView_AdditionalLayoutSupport___snipDangliesWithForce_repairIfPossibleForViewThatMoved_newSuperview_oldSuperview___block_invoke;
      uint64_t v21 = &unk_1E530E888;
      id v22 = a5;
      uint64_t v23 = v17;
      id v24 = a4;
      id v25 = a6;
      id v26 = &v38;
      long long v27 = &v32;
      if (!NSLayoutConstraintIsPotentiallyDanglyInContainer())
      {
        if (self != a5) {
          continue;
        }
        goto LABEL_17;
      }
      if (!NSLayoutConstraintIsDanglyInContainer())
      {
        *(void *)&self->_viewFlags |= 0x10000000000000uLL;
LABEL_17:
        v20((uint64_t)v19);
        continue;
      }
      id v18 = (id)v39[5];
      if (!v18)
      {
        id v18 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        v39[5] = (uint64_t)v18;
      }
      [v18 addObject:v17];
    }
    uint64_t v14 = [(NSArray *)v13 countByEnumeratingWithState:&v28 objects:v44 count:16];
  }
  while (v14);
LABEL_20:
  if (v39[5])
  {
    -[UIView removeConstraints:](self, "removeConstraints:");
  }
  if (v33[5])
  {
    -[UIView addConstraints:](self, "addConstraints:");
  }
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v38, 8);
}

uint64_t __117__UIView_AdditionalLayoutSupport___snipDangliesWithForce_repairIfPossibleForViewThatMoved_newSuperview_oldSuperview___block_invoke(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    uint64_t v1 = result;
    uint64_t result = [*(id *)(result + 40) firstAttribute];
    if (result <= 0x25 && ((1 << result) & 0x3F001FFE7FLL) != 0)
    {
      uint64_t result = *(void *)(v1 + 40);
      if (result)
      {
        uint64_t result = objc_msgSend((id)objc_msgSend((id)result, "secondItem"), "_referenceView");
        if (result)
        {
          v9[0] = MEMORY[0x1E4F143A8];
          v9[1] = 3221225472;
          uint64_t v10 = __117__UIView_AdditionalLayoutSupport___snipDangliesWithForce_repairIfPossibleForViewThatMoved_newSuperview_oldSuperview___block_invoke_2;
          uint64_t v11 = &unk_1E530E860;
          double v3 = *(void **)(v1 + 40);
          uint64_t v13 = *(void *)(v1 + 32);
          long long v12 = *(_OWORD *)(v1 + 48);
          if (v3)
          {
            uint64_t v4 = objc_msgSend((id)objc_msgSend(v3, "firstItem"), "_referenceView");
            int v5 = ((uint64_t (*)(void *, uint64_t))v10)(v9, v4);
          }
          else
          {
            int v5 = ((uint64_t (*)(void *, void))__117__UIView_AdditionalLayoutSupport___snipDangliesWithForce_repairIfPossibleForViewThatMoved_newSuperview_oldSuperview___block_invoke_2)(v9, 0);
          }
          int v6 = v5;
          char v7 = *(void **)(v1 + 40);
          uint64_t v8 = v7 ? objc_msgSend((id)objc_msgSend(v7, "secondItem"), "_referenceView") : 0;
          uint64_t result = ((uint64_t (*)(void *, uint64_t))v10)(v9, v8);
          if (v6 != result)
          {
            if (!*(void *)(*(void *)(*(void *)(v1 + 64) + 8) + 40)) {
              *(void *)(*(void *)(*(void *)(v1 + 64) + 8) + 40) = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            }
            if (!*(void *)(*(void *)(*(void *)(v1 + 72) + 8) + 40)) {
              *(void *)(*(void *)(*(void *)(v1 + 72) + 8) + 40) = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            }
            [*(id *)(*(void *)(*(void *)(v1 + 64) + 8) + 40) addObject:*(void *)(v1 + 40)];
            return [*(id *)(*(void *)(*(void *)(v1 + 72) + 8) + 40) addObject:*(void *)(v1 + 40)];
          }
        }
      }
    }
  }
  return result;
}

- (void)_recalculateStrictDescendantNeedsDoubleUpdateConstraints
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x3052000000;
  uint64_t v8 = __Block_byref_object_copy__234;
  id v9 = __Block_byref_object_dispose__234;
  uint64_t v10 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __91__UIView_AdditionalLayoutSupport___recalculateStrictDescendantNeedsDoubleUpdateConstraints__block_invoke;
  v4[3] = &unk_1E530E838;
  v4[4] = self;
  v4[5] = &v5;
  _UIViewTopDownSubtreeTraversal((uint64_t)self, v4, &__block_literal_global_494_1);
  uint64_t v3 = v6[5];
  if (v3) {
    -[UIView _informSuperviewChainThatDescendantNeedsDoubleUpdateConstraintsPass](v3);
  }
  else {
    *(void *)&self->_viewFlags &= 0xFFFE7FFFFFFFFFFFLL;
  }
  _Block_object_dispose(&v5, 8);
}

- (void)_handleLayoutEngineHostingConstraintsIfNecessary
{
  if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    [(UIView *)self _updateLayoutEngineHostConstraints];
  }
}

- (void)_traitCollectionDidChangeInternal:(const _UITraitCollectionChangeDescription *)a3
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (qword_1EB25C330 != -1) {
    dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
  }
  if (byte_1EB25C0B5)
  {
    -[UIView _invalidateAppearanceIfNeeded](self);
    unsigned int v5 = *((_DWORD *)&self->_viewFlags + 4);
  }
  else
  {
    unsigned int v5 = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFFFF7F;
    *((_DWORD *)&self->_viewFlags + 4) = v5;
  }
  if ((v5 & 0x40) != 0 && _UIShouldApplyTraitStorageRecordsForTraitChanges((uint64_t)&a3->var2)) {
    [self _applyTraitStorageRecordsForTraitCollection:a3->var1];
  }
  if (a3->var4.var0 && (*(void *)&self->_viewFlags & 0x20) != 0) {
    [(UIView *)self invalidateIntrinsicContentSize];
  }
  if (a3->var4.var1)
  {
    if ([(UIView *)self _canDrawContent])
    {
      [(UIView *)self _setNeedsContentsFormatUpdate];
      if (dyld_program_sdk_at_least()) {
        [(UIView *)self setNeedsDisplay];
      }
    }
  }
  unint64_t v6 = ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 19) & 1;
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFF7FFFF | (([(UIView *)self effectiveUserInterfaceLayoutDirection] == UIUserInterfaceLayoutDirectionRightToLeft) << 19);
  -[UIView _updateDirectionalConstraintsIfNeededWasFlipped:]((uint64_t)self, v6);
  if (self->_readableContentGuide)
  {
    uint64_t v7 = [a3->var0 preferredContentSizeCategory];
    uint64_t v8 = [a3->var1 preferredContentSizeCategory];
    if (([v7 isEqualToString:v8] & 1) == 0) {
      -[UIView _updateReadableContentGuideConstraintsIfNecessary](self);
    }
  }
  os_variant_has_internal_diagnostics();
  id v9 = +[UITraitCollection _currentTraitCollectionIfExists]();
  uint64_t v10 = [(UIView *)self traitCollection];
  +[UITraitCollection setCurrentTraitCollection:v10];

  long long v30 = (void *)_UISetCurrentFallbackEnvironment(self);
  uint64_t v11 = *(void *)((char *)&self->_viewFlags + 20);
  if ((v11 & 0x40000) == 0)
  {
    if (![a3->var1 hasDifferentColorAppearanceComparedToTraitCollection:a3->var0]) {
      goto LABEL_27;
    }
    uint64_t v11 = *(void *)((char *)&self->_viewFlags + 20);
  }
  *(void *)((char *)&self->_viewFlags + 20) = v11 & 0xFFFFFFFFFFFBFFFFLL;
  if (!_UITraitUsageTrackingEnabled() || (dyld_program_sdk_at_least() & 1) == 0) {
    -[UIView _effectiveThemeTraitCollectionDidChangeInternal:](self, 1);
  }
  [(UIView *)self _dynamicUserInterfaceTraitDidChange];
LABEL_27:
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v12 = [(UIView *)self interactions];
  uint64_t v13 = [v12 countByEnumeratingWithState:&v31 objects:v45 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v32;
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v32 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void **)(*((void *)&v31 + 1) + 8 * i);
        if (objc_opt_respondsToSelector()) {
          [v17 _viewTraitCollectionDidChange:a3->var0];
        }
      }
      uint64_t v14 = [v12 countByEnumeratingWithState:&v31 objects:v45 count:16];
    }
    while (v14);
  }

  -[UIView _backing_traitCollectionDidChange:](self, a3->var0);
  if (a3->var0) {
    -[_UITraitChangeRegistry traitsDidChange:forTraitEnvironment:withPreviousTraitCollection:]((uint64_t)self->_traitChangeRegistry, (uint64_t *)&a3->var2, self, a3->var0);
  }
  id v18 = self;
  BOOL v19 = _UIShouldLogTraitCollectionChangeForInstanceAndMethod(v18, (uint64_t)self, (uint64_t)sel_traitCollectionDidChange_);

  if (v19)
  {
    id v22 = *(NSObject **)(__UILogGetCategoryCachedImpl("TraitCollectionChange", &qword_1EB25C180) + 8);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = v22;
      id v24 = NSStringFromSelector(sel_traitCollectionDidChange_);
      id var0 = a3->var0;
      id v26 = [(UIView *)self traitCollection];
      long long v27 = +[UITraitCollection _descriptionForChangeFromTraitCollection:var0 toTraitCollection:v26];
      id v28 = a3->var0;
      long long v29 = [(UIView *)self traitCollection];
      *(_DWORD *)buf = 138413314;
      long long v36 = v24;
      __int16 v37 = 2112;
      uint64_t v38 = self;
      __int16 v39 = 2112;
      uint64_t v40 = v27;
      __int16 v41 = 2112;
      id v42 = v28;
      __int16 v43 = 2112;
      BOOL v44 = v29;
      _os_log_impl(&dword_1853B0000, v23, OS_LOG_TYPE_ERROR, "Sending -%@ to %@\n\t► trait changes: %@\n\t► previous: %@\n\t► current: %@", buf, 0x34u);
    }
  }
  [(UIView *)self traitCollectionDidChange:a3->var0];
  _UIRestorePreviousFallbackEnvironment(v30);
  +[UITraitCollection setCurrentTraitCollection:v9];
  if (_UIPresentationControllersInheritTraitsFromViewHierarchy())
  {
    uint64_t v20 = [(UIView *)self _presentationControllerToNotifyOnLayoutSubviews];
    uint64_t v21 = v20;
    if (v20) {
      [v20 _updateTraitsIfNecessaryInitiatingPropagation:0];
    }
  }
}

+ (UIUserInterfaceLayoutDirection)userInterfaceLayoutDirectionForSemanticContentAttribute:(UISemanticContentAttribute)semanticContentAttribute relativeToLayoutDirection:(UIUserInterfaceLayoutDirection)layoutDirection
{
  BOOL v6 = +[UIView _enableRTL];
  UIUserInterfaceLayoutDirection v7 = (unint64_t)(semanticContentAttribute == UISemanticContentAttributeUnspecified);
  if (layoutDirection == UIUserInterfaceLayoutDirectionLeftToRight) {
    UIUserInterfaceLayoutDirection v7 = UIUserInterfaceLayoutDirectionLeftToRight;
  }
  if (semanticContentAttribute == UISemanticContentAttributeForceRightToLeft) {
    UIUserInterfaceLayoutDirection v7 = UIUserInterfaceLayoutDirectionRightToLeft;
  }
  if (semanticContentAttribute == UISemanticContentAttributeForceLeftToRight) {
    UIUserInterfaceLayoutDirection v7 = UIUserInterfaceLayoutDirectionLeftToRight;
  }
  if (v6) {
    return v7;
  }
  else {
    return 0;
  }
}

- (NSArray)interactions
{
  if ((*((unsigned char *)&self->_viewFlags + 20) & 0x40) != 0)
  {
    uint64_t v3 = (void *)MEMORY[0x1E4F1C978];
    uint64_t v4 = objc_getAssociatedObject(self, &_UIViewInteractionsKey);
    double v2 = [v3 arrayWithArray:v4];
  }
  else
  {
    double v2 = (void *)MEMORY[0x1E4F1CBF0];
  }
  return (NSArray *)v2;
}

+ (BOOL)_enableRTL
{
  if (_enableRTL_onceToken != -1) {
    dispatch_once(&_enableRTL_onceToken, &__block_literal_global_3524);
  }
  if (_enableRTL_result) {
    return [a1 _enableLegacyRTL] ^ 1;
  }
  else {
    return 0;
  }
}

+ (BOOL)_enableLegacyRTL
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!+[UIView _legacyRTLPreferenceEnabled]) {
    return 0;
  }
  if ([(id)UIApp _isSpringBoard]) {
    return 1;
  }
  uint64_t v3 = +[UIApplication displayIdentifier];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v4 = [&unk_1ED3F18D0 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(&unk_1ED3F18D0);
        }
        if ([v3 hasPrefix:*(void *)(*((void *)&v9 + 1) + 8 * i)])
        {
          BOOL v2 = 1;
          goto LABEL_15;
        }
      }
      uint64_t v5 = [&unk_1ED3F18D0 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  BOOL v2 = 0;
LABEL_15:

  return v2;
}

+ (BOOL)_legacyRTLPreferenceEnabled
{
  if (qword_1EB25C2B8 != -1) {
    dispatch_once(&qword_1EB25C2B8, &__block_literal_global_3535);
  }
  return byte_1EB25C0B3;
}

- (void)layoutSublayersOfLayer:(id)a3
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (self) {
    BOOL v5 = [(CALayer *)self->_layer needsLayout];
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t v96 = 0;
  long long v95 = 0u;
  long long v94 = 0u;
  int v6 = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIViewDebugSignposts, @"UIViewDebugSignposts", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
  v92[0] = MEMORY[0x1E4F143A8];
  v92[1] = 3221225472;
  void v92[2] = __50__UIView_CALayerDelegate__layoutSublayersOfLayer___block_invoke;
  v92[3] = &unk_1E53100B0;
  v92[4] = self;
  char v83 = v5;
  BOOL v93 = v5;
  _UIScopedSignpostIntervalInit((uint64_t)&v94, (byte_1EB256E34 != 0) & ~v6, (uint64_t)v92);
  UIUserInterfaceLayoutDirection v7 = self;
  uint64_t v8 = (uint64_t)v7;
  uint64_t v9 = 96;
  if (~*(void *)&v7->_viewFlags & 0xC00000000000000 | *((void *)&v7->_viewFlags + 1) & 0x800000000000) {
    goto LABEL_13;
  }
  long long v10 = v7;
  long long v11 = v10;
  if ((*(void *)&v10->_viewFlags & 0x40000000000000) != 0)
  {

    goto LABEL_8;
  }
  long long v12 = [(UIView *)v10 _layoutEngine];
  if (!v12)
  {
    BOOL v14 = [(UIView *)v11 _hostsLayoutEngine];

    if (v14) {
      goto LABEL_13;
    }
LABEL_8:
    if ((*((unsigned char *)&v11->_viewFlags + 23) & 0x40) == 0 && dyld_program_sdk_at_least())
    {
      uint64_t v13 = [(UIView *)v11 _layoutEngine];
      if (v13)
      {

LABEL_106:
        memset(v91, 0, 64);
        uint64_t v60 = [(UIView *)v11 _allSubviews];
        uint64_t v61 = [v60 countByEnumeratingWithState:v91 objects:__src count:16];
        if (v61)
        {
          uint64_t v62 = **(void **)&v91[1];
          uint64_t v75 = 96;
LABEL_108:
          uint64_t v63 = 0;
          while (1)
          {
            if (**(void **)&v91[1] != v62) {
              objc_enumerationMutation(v60);
            }
            if (-[UIView _subviewPreventsSkipLayout:](v11, "_subviewPreventsSkipLayout:", *(void *)(*((void *)&v91[0] + 1) + 8 * v63), v75))
            {
              break;
            }
            if (v61 == ++v63)
            {
              uint64_t v61 = [v60 countByEnumeratingWithState:v91 objects:__src count:16];
              uint64_t v9 = v75;
              if (v61) {
                goto LABEL_108;
              }
              goto LABEL_114;
            }
          }

          uint64_t v9 = v75;
          if (self) {
            goto LABEL_14;
          }
          int v81 = 1;
          goto LABEL_17;
        }
LABEL_114:

        goto LABEL_116;
      }
      if ([(UIView *)v11 _hostsLayoutEngine]) {
        goto LABEL_106;
      }
    }

LABEL_116:
    if ((*(void *)(v8 + v9 + 8) & 0x100) == 0) {
      goto LABEL_126;
    }
    long long v64 = [(UIView *)v11 _layoutEngine];
    -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v64);

    *(void *)(v8 + v9 + 8) &= ~0x100uLL;
    long long v65 = v11;
    long long v66 = v65;
    if ((*(void *)&v65->_viewFlags & 0x40000000000000) != 0)
    {

      goto LABEL_126;
    }
    long long v67 = [(UIView *)v65 _layoutEngine];
    if (v67)
    {
    }
    else
    {
      BOOL v69 = [(UIView *)v66 _hostsLayoutEngine];

      if (!v69) {
        goto LABEL_126;
      }
    }
    goto LABEL_14;
  }

LABEL_13:
LABEL_14:
  if ((*(void *)(v8 + 104) & 0x30000) != 0)
  {
    *(void *)(v8 + v9 + 8) |= 0x80000uLL;
    goto LABEL_126;
  }
  int v81 = 0;
LABEL_17:
  -[UIView _updateAppearanceIfNeeded](v8);
  id v15 = *(id *)(v8 + 160);
  BOOL v16 = v15 == a3;

  if (!v16) {
    goto LABEL_126;
  }
  if (pthread_main_np() != 1) {
    -[UIView _raiseExceptionForBackgroundThreadLayout]((id *)v8);
  }
  uint64_t v17 = +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger];
  [v17 didEnterLayoutSublayersOfLayerForView:v8];
  long long v82 = v17;
  ++*(_WORD *)(v8 + 212);
  if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting](v8))
  {
    id v18 = [(id)v8 _layoutEngine];
    BOOL v19 = [v18 delegate];

    if (v19)
    {
      char v20 = 0;
      *(void *)&v19[v9 + 8] |= 0x100uLL;
      goto LABEL_25;
    }
  }
  else
  {
    BOOL v19 = 0;
  }
  char v20 = 1;
LABEL_25:
  long long v78 = v19;
  char v76 = v20;
  if (__UILogIdenticalLayouts) {
    double Current = CFAbsoluteTimeGetCurrent();
  }
  else {
    double Current = 0.0;
  }
  *(void *)(v8 + v9) |= 0x8000000000000000;
  id v80 = *(id *)(v8 + 88);
  id v22 = [(id)v8 _viewControllerToNotifyOnLayoutSubviews];
  uint64_t v23 = [(id)v8 _presentationControllerToNotifyOnLayoutSubviews];
  long long v79 = [(id)v8 _lastNotifiedTraitCollection];
  if (v80)
  {
    if (([(id)v8 _canSkipTraitsAndOverlayUpdatesForViewControllerToNotifyOnLayoutResetState:1] & 1) == 0)
    {
      -[UIViewController _updateTraitsIfNecessarySchedulingPropagation:]((uint64_t)v80, 0);
      if (![(id)v8 _viewDelegateContentOverlayInsetsAreClean]
        || ([v80 navigationController],
            id v24 = objc_claimAutoreleasedReturnValue(),
            BOOL v25 = v24 == 0,
            v24,
            !v25))
      {
        [v80 _updateContentOverlayInsetsFromParentIfNecessary];
      }
    }
  }
  if (qword_1EB25C330 != -1) {
    dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
  }
  int v77 = byte_1EB25C0B5;
  if (byte_1EB25C0B5
    && _UIViewShouldProcessTraitChangeDuringLayout((void *)v8, (uint64_t)v80, (uint64_t)v23))
  {
    -[UIView _updateTraitCollectionAndProcessChangesWithBehavior:previousCollection:]((void *)v8, 0, v79);
    -[UIView _updateAppearanceIfNeeded](v8);
  }
  if (v22)
  {
    if (os_variant_has_internal_diagnostics())
    {
      if (!v81) {
        goto LABEL_41;
      }
      long long v71 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__src[0]) = 0;
        _os_log_fault_impl(&dword_1853B0000, v71, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
      }
    }
    else
    {
      if (!v81)
      {
LABEL_41:
        id v26 = +[UITraitCollection _currentTraitCollectionIfExists]();
        long long v27 = [(id)v8 traitCollection];
        +[UITraitCollection setCurrentTraitCollection:v27];

        id v28 = (void *)_UISetCurrentFallbackEnvironment((void *)v8);
        -[UIViewController __viewIsAppearing:skipWindowCheck:]((uint64_t)v22, (v22[47] >> 22) & 1, 0);
        -[UIViewController _performContentUnavailableConfigurationStateUpdate]((uint64_t)v22);
        memset(__src, 0, sizeof(__src));
        _UIBeginTrackingTraitUsage((void *)v8, v22, __src);
        [v82 willSendViewWillLayoutSubviewsToViewControllerOfView:v8];
        if (_UIObservationTrackingEnabled()) {
          [v22 _viewWillLayoutSubviewsWithObservationTracking];
        }
        else {
          [v22 viewWillLayoutSubviews];
        }
        [v82 didSendViewWillLayoutSubviewsToViewControllerOfView:v8];
        long long v29 = [v22 _embeddedDelegate];
        long long v30 = v29;
        if (v29) {
          [v29 viewControllerViewWillLayoutSubviews:v22];
        }
        memset(v91, 0, sizeof(v91));
        memcpy(__dst, __src, sizeof(__dst));
        long long v31 = (char *)GetTraitCollectionTSD() + 16;
        memcpy(v91, v31, sizeof(v91));
        memcpy(v31, __dst, 0x160uLL);
        -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((void *)v8, (uint64_t)&v91[8] + 8, [v22 methodForSelector:sel_viewWillLayoutSubviews], sel_setNeedsLayout);
        -[UIViewController _recordTraitUsage:insideMethod:withInvalidationAction:](v22, (uint64_t)&v91[19] + 8, [v22 methodForSelector:sel_viewWillLayoutSubviews], sel__invalidateViewLayout);
        _UITraitUsageTrackingResultDestroy((uint64_t)v91);
        _UIRestorePreviousFallbackEnvironment(v28);
        +[UITraitCollection setCurrentTraitCollection:v26];

        goto LABEL_47;
      }
      long long v71 = *(id *)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C258) + 8);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__src[0]) = 0;
        _os_log_impl(&dword_1853B0000, v71, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
      }
    }

    goto LABEL_41;
  }
LABEL_47:
  if (!v23) {
    goto LABEL_54;
  }
  if (os_variant_has_internal_diagnostics())
  {
    if (!v81) {
      goto LABEL_50;
    }
    long long v72 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__src[0]) = 0;
      _os_log_fault_impl(&dword_1853B0000, v72, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
    }
LABEL_148:

    goto LABEL_50;
  }
  if (v81)
  {
    long long v72 = *(id *)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C260) + 8);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__src[0]) = 0;
      _os_log_impl(&dword_1853B0000, v72, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
    }
    goto LABEL_148;
  }
LABEL_50:
  long long v32 = +[UITraitCollection _currentTraitCollectionIfExists]();
  long long v33 = [(id)v8 traitCollection];
  +[UITraitCollection setCurrentTraitCollection:v33];

  long long v34 = (void *)_UISetCurrentFallbackEnvironment((void *)v8);
  memset(__src, 0, sizeof(__src));
  _UIBeginTrackingTraitUsage((void *)v8, v23, __src);
  if (_UIObservationTrackingEnabled()) {
    [v23 _containerViewWillLayoutSubviewsWithObservationTracking];
  }
  else {
    [v23 _containerViewWillLayoutSubviews];
  }
  memset(v91, 0, sizeof(v91));
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v35 = (char *)GetTraitCollectionTSD() + 16;
  memcpy(v91, v35, sizeof(v91));
  memcpy(v35, __dst, 0x160uLL);
  -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((void *)v8, (uint64_t)&v91[8] + 8, [v23 methodForSelector:sel_containerViewWillLayoutSubviews], sel_setNeedsLayout);
  -[UIPresentationController _recordTraitUsage:insideMethod:withInvalidationAction:](v23, (uint64_t)&v91[19] + 8, [v23 methodForSelector:sel_containerViewWillLayoutSubviews], sel__invalidateContainerViewLayout);
  _UITraitUsageTrackingResultDestroy((uint64_t)v91);
  _UIRestorePreviousFallbackEnvironment(v34);
  +[UITraitCollection setCurrentTraitCollection:v32];

LABEL_54:
  if (!v77 && _UIViewShouldProcessTraitChangeDuringLayout((void *)v8, (uint64_t)v80, (uint64_t)v23)) {
    -[UIView _updateTraitCollectionAndProcessChangesWithBehavior:previousCollection:]((void *)v8, 0, v79);
  }
  if (((dyld_program_sdk_at_least() & 1) != 0
     || [(id)v8 _forceLayoutEngineSolutionInRationalEdges])
    && -[UIView _usesLayoutEngineHostingConstraints](v8))
  {
    -[UIView _resetLayoutEngineHostConstraints]((void *)v8);
  }
  [v82 willSendLayoutSubviewsToView:v8];
  if (os_variant_has_internal_diagnostics())
  {
    if (!v81) {
      goto LABEL_63;
    }
    long long v70 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v70, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__src[0]) = 0;
      _os_log_fault_impl(&dword_1853B0000, v70, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
    }
  }
  else
  {
    if (!v81) {
      goto LABEL_63;
    }
    long long v70 = *(id *)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C268) + 8);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__src[0]) = 0;
      _os_log_impl(&dword_1853B0000, v70, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
    }
  }

LABEL_63:
  long long v36 = +[UITraitCollection _currentTraitCollectionIfExists]();
  __int16 v37 = [(id)v8 traitCollection];
  +[UITraitCollection setCurrentTraitCollection:v37];

  uint64_t v38 = (void *)_UISetCurrentFallbackEnvironment((void *)v8);
  memset(__src, 0, sizeof(__src));
  _UIBeginTrackingTraitUsage((void *)v8, 0, __src);
  ++*(_WORD *)(v8 + 210);
  if (_UIObservationTrackingEnabled()) {
    [(id)v8 _layoutSubviewsWithObservationTracking];
  }
  else {
    [(id)v8 layoutSubviews];
  }
  --*(_WORD *)(v8 + 210);
  --*(_WORD *)(v8 + 212);
  memset(v91, 0, sizeof(v91));
  memcpy(__dst, __src, sizeof(__dst));
  __int16 v39 = (char *)GetTraitCollectionTSD() + 16;
  memcpy(v91, v39, sizeof(v91));
  memcpy(v39, __dst, 0x160uLL);
  -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((void *)v8, (uint64_t)&v91[8] + 8, [(id)v8 methodForSelector:sel_layoutSubviews], sel_setNeedsLayout);
  _UITraitUsageTrackingResultDestroy((uint64_t)v91);
  _UIRestorePreviousFallbackEnvironment(v38);
  +[UITraitCollection setCurrentTraitCollection:v36];
  [v82 didSendLayoutSubviewsToView:v8];
  *(void *)&long long v95 = v95 | 2;
  if (-[UIView _wantsReapplicationOfAutoLayoutWithLayoutDirtyOnEntry:]((void *)v8, v83)) {
    -[UIView _updateConstraintsAsNecessaryAndApplyLayoutFromEngine](v8);
  }
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  uint64_t v40 = [(id)v8 _allSubviews];
  uint64_t v41 = [v40 countByEnumeratingWithState:&v86 objects:v97 count:16];
  if (v41)
  {
    uint64_t v42 = *(void *)v87;
    do
    {
      for (uint64_t i = 0; i != v41; ++i)
      {
        if (*(void *)v87 != v42) {
          objc_enumerationMutation(v40);
        }
        [*(id *)(*((void *)&v86 + 1) + 8 * i) _updateSafeAreaInsets];
      }
      uint64_t v41 = [v40 countByEnumeratingWithState:&v86 objects:v97 count:16];
    }
    while (v41);
  }

  if (v22)
  {
    if (os_variant_has_internal_diagnostics())
    {
      if (!v81) {
        goto LABEL_78;
      }
      long long v73 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v73, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__dst[0]) = 0;
        _os_log_fault_impl(&dword_1853B0000, v73, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__dst, 2u);
      }
    }
    else
    {
      if (!v81)
      {
LABEL_78:
        BOOL v44 = +[UITraitCollection _currentTraitCollectionIfExists]();
        uint64_t v45 = [(id)v8 traitCollection];
        +[UITraitCollection setCurrentTraitCollection:v45];

        uint64_t v46 = (void *)_UISetCurrentFallbackEnvironment((void *)v8);
        memset(__dst, 0, sizeof(__dst));
        _UIBeginTrackingTraitUsage((void *)v8, v22, __dst);
        [v82 willSendViewDidLayoutSubviewsToViewControllerOfView:v8];
        if (_UIObservationTrackingEnabled()) {
          [v22 _viewDidLayoutSubviewsWithObservationTracking];
        }
        else {
          [v22 viewDidLayoutSubviews];
        }
        [v82 didSendViewDidLayoutSubviewsToViewControllerOfView:v8];
        uint64_t v47 = [v22 _embeddedDelegate];

        if (v47)
        {
          uint64_t v48 = [v22 _embeddedDelegate];
          [v48 viewControllerViewDidLayoutSubviews:v22];
        }
        [v22 _viewDidPerformLayout];
        memset(v85, 0, sizeof(v85));
        memcpy(v84, __dst, sizeof(v84));
        uint64_t v49 = (char *)GetTraitCollectionTSD() + 16;
        memcpy(v85, v49, sizeof(v85));
        memcpy(v49, v84, 0x160uLL);
        -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((void *)v8, (uint64_t)&v85[8] + 8, [v22 methodForSelector:sel_viewDidLayoutSubviews], sel_setNeedsLayout);
        -[UIViewController _recordTraitUsage:insideMethod:withInvalidationAction:](v22, (uint64_t)&v85[19] + 8, [v22 methodForSelector:sel_viewDidLayoutSubviews], sel__invalidateViewLayout);
        _UITraitUsageTrackingResultDestroy((uint64_t)v85);
        _UIRestorePreviousFallbackEnvironment(v46);
        +[UITraitCollection setCurrentTraitCollection:v44];
        if (-[UIView _wantsReapplicationOfAutoLayoutWithLayoutDirtyOnEntry:]((void *)v8, v83)) {
          -[UIView _updateConstraintsAsNecessaryAndApplyLayoutFromEngine](v8);
        }

        goto LABEL_86;
      }
      long long v73 = *(id *)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C270) + 8);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__dst[0]) = 0;
        _os_log_impl(&dword_1853B0000, v73, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__dst, 2u);
      }
    }

    goto LABEL_78;
  }
LABEL_86:
  if (v23)
  {
    if (os_variant_has_internal_diagnostics())
    {
      if (!v81) {
        goto LABEL_89;
      }
      long long v74 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__dst[0]) = 0;
        _os_log_fault_impl(&dword_1853B0000, v74, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__dst, 2u);
      }
    }
    else
    {
      if (!v81)
      {
LABEL_89:
        uint64_t v50 = +[UITraitCollection _currentTraitCollectionIfExists]();
        uint64_t v51 = [(id)v8 traitCollection];
        +[UITraitCollection setCurrentTraitCollection:v51];

        uint64_t v52 = (void *)_UISetCurrentFallbackEnvironment((void *)v8);
        memset(__dst, 0, sizeof(__dst));
        _UIBeginTrackingTraitUsage((void *)v8, v23, __dst);
        if (_UIObservationTrackingEnabled()) {
          [v23 _containerViewDidLayoutSubviewsWithObservationTracking];
        }
        else {
          [v23 containerViewDidLayoutSubviews];
        }
        memset(v85, 0, sizeof(v85));
        memcpy(v84, __dst, sizeof(v84));
        uint64_t v53 = (char *)GetTraitCollectionTSD() + 16;
        memcpy(v85, v53, sizeof(v85));
        memcpy(v53, v84, 0x160uLL);
        -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:]((void *)v8, (uint64_t)&v85[8] + 8, [v23 methodForSelector:sel_containerViewDidLayoutSubviews], sel_setNeedsLayout);
        -[UIPresentationController _recordTraitUsage:insideMethod:withInvalidationAction:](v23, (uint64_t)&v85[19] + 8, [v23 methodForSelector:sel_containerViewDidLayoutSubviews], sel__invalidateContainerViewLayout);
        _UITraitUsageTrackingResultDestroy((uint64_t)v85);
        _UIRestorePreviousFallbackEnvironment(v52);
        +[UITraitCollection setCurrentTraitCollection:v50];

        goto LABEL_93;
      }
      long long v74 = *(id *)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C278) + 8);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__dst[0]) = 0;
        _os_log_impl(&dword_1853B0000, v74, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__dst, 2u);
      }
    }

    goto LABEL_89;
  }
LABEL_93:
  if ((_UIViewShowAlignmentRects() & 1) != 0
    || +[UIView _toolsDebugAlignmentRects])
  {
    id v54 = (id)[(id)v8 _alignmentDebuggingOverlayCreateIfNecessary:1];
  }
  if (+[UIView _toolsDebugColorViewBounds]) {
    id v55 = (id)[(id)v8 _colorViewBoundsOverlayCreateIfNecessary:1];
  }
  if (+[UIView _toolsDebugShouldDetectClippedViews]) {
    [(id)v8 _detectAndHandleClippedView];
  }
  if ((v76 & 1) == 0)
  {
    double v56 = [(id)v8 _layoutEngine];
    -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v56);

    *(void *)&v78[v9 + 8] &= ~0x100uLL;
  }
  *(void *)(v8 + v9) &= ~0x8000000000000000;
  if (__UILogIdenticalLayouts)
  {
    double v57 = CFAbsoluteTimeGetCurrent();
    uint64_t v58 = -[UIView _layoutHashesStackCreateIfNeeded:]((void *)v8, 0);
    if (v58)
    {
      uint64_t v59 = -[UIView _layoutHash]((void *)v8);
      *(void *)&__dst[0] = MEMORY[0x1E4F143A8];
      *((void *)&__dst[0] + 1) = 3221225472;
      *(void *)&__dst[1] = __65__UIView_Hierarchy___validateLayoutHashHasChangedWithLayoutTime___block_invoke;
      *((void *)&__dst[1] + 1) = &unk_1E530FF48;
      *(double *)&__dst[3] = v57 - Current;
      *((void *)&__dst[2] + 1) = v59;
      *(void *)&__dst[2] = v8;
      [v58 enumerateObjectsWithOptions:2 usingBlock:__dst];
      [v58 removeAllObjects];
    }
    else
    {
      id v68 = -[UIView _layoutHashesStackCreateIfNeeded:]((void *)v8, 1);
    }
  }
  [v82 willExitLayoutSublayersOfLayerForView:v8];

LABEL_126:
  if (v94) {
    kdebug_trace();
  }
}

- (uint64_t)_usesLayoutEngineHostingConstraints
{
  if (result)
  {
    uint64_t v1 = &OBJC_IVAR____UIVectorTextLayoutRun__sourceString;
    uint64_t v2 = *(void *)(result + 96);
    if ((v2 & 0x80000000000) == 0) {
      return 0;
    }
    if ((v2 & 0x400000000000000) != 0)
    {
      return 1;
    }
    else
    {
      if (qword_1EB25A6C0 != -1)
      {
        uint64_t v3 = result;
        dispatch_once(&qword_1EB25A6C0, &__block_literal_global_855_0);
        uint64_t v1 = &OBJC_IVAR____UIVectorTextLayoutRun__sourceString;
        uint64_t result = v3;
      }
      if (!byte_1EB25A5B2) {
        return 0;
      }
      return (*(void *)(result + v1[373]) >> 59) & 1;
    }
  }
  return result;
}

- (UIPresentationController)_presentationControllerToNotifyOnLayoutSubviews
{
  if ((*((unsigned char *)&self->_viewFlags + 21) & 0x20) != 0)
  {
    uint64_t v3 = objc_getAssociatedObject(self, &_UIViewPresentationControllerToNotifyOnLayoutSubviews);
    uint64_t v2 = [v3 object];
  }
  else
  {
    uint64_t v2 = 0;
  }
  return (UIPresentationController *)v2;
}

- (void)setSafeAreaInsets:(UIEdgeInsets)a3
{
  double right = a3.right;
  double bottom = a3.bottom;
  double left = a3.left;
  double top = a3.top;
  if (dyld_program_sdk_at_least())
  {
    -[UIView _setSafeAreaInsets:updateSubviewsDuringNextLayoutPass:]((double *)self, 1, top, left, bottom, right);
  }
}

- (double)_setSafeAreaInsets:(double)a3 updateSubviewsDuringNextLayoutPass:(double)a4
{
  if (!result) {
    return result;
  }
  uint64_t v10 = (uint64_t)result;
  double v12 = result[47];
  double v11 = result[48];
  double v14 = result[49];
  double v13 = result[50];
  BOOL v15 = a4 == v11 && a3 == v12;
  BOOL v16 = v15 && a6 == v13;
  if (v16 && a5 == v14) {
    return result;
  }
  [result _safeAreaInsetsWillChange];
  uint64_t v19 = *(void *)(v10 + 116);
  *(void *)(v10 + 116) = v19 & 0xFFFFFEFFFFFFFFFFLL;
  if ((v19 & 0x20000000000) != 0) {
    -[UIView _invalidateCalculatedSafeAreas](v10);
  }
  *(double *)(v10 + 376) = a3;
  *(double *)(v10 + 384) = a4;
  *(double *)(v10 + 392) = a5;
  *(double *)(v10 + 400) = a6;
  if (!*(_WORD *)(v10 + 212))
  {
    id v21 = *(id *)(v10 + 88);
    id v22 = [v21 navigationController];
    id v23 = [v22 topViewController];
    if (v21 == v23) {
      char v20 = [v21 _navControllerIsLayingOutTopViewController];
    }
    else {
      char v20 = 0;
    }

    if (!a2) {
      goto LABEL_27;
    }
LABEL_22:
    if ([(id)v10 _edgesPropagatingSafeAreaInsetsToSubviews]) {
      char v24 = v20;
    }
    else {
      char v24 = 1;
    }
    if ((v24 & 1) == 0) {
      [(id)v10 setNeedsLayout];
    }
    goto LABEL_27;
  }
  char v20 = 1;
  if (a2) {
    goto LABEL_22;
  }
LABEL_27:
  if ((*(void *)(v10 + 104) & 0x1E00000000000000) != 0) {
    [(id)v10 _updateInferredLayoutMargins];
  }
  -[UIView _updateSafeAreaLayoutGuideConstraintsIfNecessary]((id *)v10);
  -[UIView _updateReadableContentGuideConstraintsIfNecessary]((void *)v10);
  BOOL v25 = +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger];
  objc_msgSend(v25, "didUpdateSafeAreaInsets:ofView:", v10, *(double *)(v10 + 376), *(double *)(v10 + 384), *(double *)(v10 + 392), *(double *)(v10 + 400));

  return (double *)objc_msgSend((id)v10, "_safeAreaInsetsDidChangeFromOldInsets:", v12, v11, v14, v13);
}

- (UITraitCollection)_lastNotifiedTraitCollection
{
  return self->__lastNotifiedTraitCollection;
}

- (void)_collectExistingTraitCollectionsForTraitTracking:(id)a3
{
  uint64_t v4 = (void (**)(void))a3;
  BOOL v5 = v4;
  if (self->_cachedTraitCollection)
  {
    v4[2](v4);
    uint64_t v4 = v5;
  }
  if (self->__lastNotifiedTraitCollection)
  {
    v4[2](v5);
    uint64_t v4 = v5;
  }
}

- (void)_recordTraitUsage:(unint64_t)a3 insideMethod:(const char *)a4 withInvalidationAction:
{
  if (a1)
  {
    if (!a1[6] && _UITraitTokenSetCount(a2))
    {
      uint64_t v8 = objc_alloc_init(_UITraitChangeRegistry);
      uint64_t v9 = (void *)a1[6];
      a1[6] = v8;
    }
    uint64_t v10 = a1[6];
    -[_UITraitChangeRegistry recordTraitUsage:forTraitEnvironment:insideMethod:withInvalidationAction:](v10, a2, a1, a3, a4);
  }
}

+ (BOOL)_toolsDebugColorViewBounds
{
  return __toolsDebugColorViewBounds;
}

+ (BOOL)_toolsDebugAlignmentRects
{
  return __toolsDebugAlignmentRects;
}

- (BOOL)_wantsReapplicationOfAutoLayoutWithLayoutDirtyOnEntry:(void *)a1
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v4 = [a1 _allSubviews];
  uint64_t v5 = [v4 count];

  if (!v5) {
    return 0;
  }
  if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)a1))
  {
    int v6 = [a1 _layoutEngine];
    -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v6);
  }
  uint64_t v7 = 0;
  uint64_t v8 = a1[12];
  if ((v8 & 0x40000000000000) == 0 && (a2 & 1) == 0)
  {
    if ((v8 & 0x800000000000000) != 0)
    {
      if ((v8 & 0x200000000000) != 0)
      {
        long long v18 = 0u;
        long long v19 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        uint64_t v10 = objc_msgSend(a1, "_allSubviews", 0);
        uint64_t v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v17;
          while (2)
          {
            uint64_t v14 = 0;
            do
            {
              if (*(void *)v17 != v13) {
                objc_enumerationMutation(v10);
              }
              BOOL v15 = *(void **)(*((void *)&v16 + 1) + 8 * v14);
              if ((v15[12] & 0x400000000000000) != 0
                && ![v15 translatesAutoresizingMaskIntoConstraints])
              {
                uint64_t v7 = 1;
                goto LABEL_24;
              }
              ++v14;
            }
            while (v12 != v14);
            uint64_t v12 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
            if (v12) {
              continue;
            }
            break;
          }
        }
        uint64_t v7 = 0;
LABEL_24:
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return (v8 & 0x400100000000000) == 0x400000000000000;
    }
  }
  return v7;
}

- (void)_updateAppearanceIfNeeded
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 96);
    if ((v2 & 0x20000000000) != 0)
    {
      uint64_t v3 = *(void *)(a1 + 104);
      int v4 = *(_DWORD *)(a1 + 112);
      *(void *)(a1 + 96) = v2 & 0xFFFFFDFFFFFFFFFFLL;
      *(void *)(a1 + 104) = v3;
      *(_DWORD *)(a1 + 112) = v4;
      id v5 = [(id)a1 window];
      +[_UIAppearance _applyInvocationsTo:a1 window:v5];
    }
  }
}

+ (BOOL)_toolsDebugShouldDetectClippedViews
{
  if (qword_1EB25C298 != -1) {
    dispatch_once(&qword_1EB25C298, &__block_literal_global_3101);
  }
  return byte_1EB25C0B0;
}

- (void)_invalidateAppearanceIfNeeded
{
  if (a1)
  {
    if (+[_UITraitBasedAppearance _hasAnyCustomizations])
    {
      uint64_t v2 = [a1 traitCollection];
      BOOL v3 = +[_UITraitBasedAppearance _hasCustomizationsForTraitCollection:class:guideClass:](_UITraitBasedAppearance, "_hasCustomizationsForTraitCollection:class:guideClass:", v2, objc_opt_class(), [a1 _appearanceGuideClass]);

      if (v3)
      {
        [a1 _invalidateAppearance];
      }
    }
  }
}

- (BOOL)_viewDelegateContentOverlayInsetsAreClean
{
  return (*((void *)&self->_viewFlags + 1) >> 62) & 1;
}

- (BOOL)_canSkipTraitsAndOverlayUpdatesForViewControllerToNotifyOnLayoutResetState:(BOOL)a3
{
  return 0;
}

- (CGRect)_nsis_bounds
{
  id v3 = [(UIView *)self _layoutEngineCreateIfNecessary];
  double v4 = -[UIView _nsis_compatibleBoundsInEngine:](self, v3);
  result.size.double height = v7;
  result.size.double width = v6;
  result.origin.double y = v5;
  result.origin.double x = v4;
  return result;
}

- (void)_resizeWithOldSuperviewSize:(CGSize)a3
{
  double height = a3.height;
  double width = a3.width;
  *(void *)&self->_viewFlags |= 0x4000000000000000uLL;
  double v6 = [(UIView *)self superview];
  if ((*(void *)&self->_viewFlags & 0x400000000000000) == 0
    || -[UIView _usesAutoresizingConstraints]((uint64_t)self) && !-[UIView _autoresizingConstraints](self)
    || v6 && (v6[12] & 0x1000000000000000) == 0
    || (*(void *)&self->_viewFlags & 0x100000000000000) != 0)
  {
    char v7 = 1;
  }
  else
  {
    [(UIView *)self _applyISEngineLayoutValuesToBoundsOnly:0];
    char v7 = 0;
  }
  [v6 bounds];
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  uint64_t v9 = *((void *)&self->_viewFlags + 1);
  int v11 = *((_DWORD *)&self->_viewFlags + 4);
  if (width != v12 || height != v8)
  {
    if ((viewFlags & 0x400000000000000) == 0) {
      goto LABEL_17;
    }
    char v14 = v7 ^ 1;
    if ((viewFlags & 0x120000000000000) != 0) {
      char v14 = 1;
    }
    if ((v14 & 1) == 0)
    {
LABEL_17:
      v55[0] = 0;
      v55[1] = v55;
      v55[2] = 0x3010000000;
      v55[3] = &unk_186D7DBA7;
      *(double *)&v55[4] = width;
      *(double *)&v55[5] = height;
      v52[0] = 0;
      v52[1] = v52;
      v52[2] = 0x3010000000;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      v52[3] = &unk_186D7DBA7;
      [[(UIView *)self superview] bounds];
      uint64_t v53 = v15;
      uint64_t v54 = v16;
      uint64_t v46 = 0;
      uint64_t v47 = (double *)&v46;
      uint64_t v48 = 0x4010000000;
      uint64_t v49 = &unk_186D7DBA7;
      long long v50 = 0u;
      long long v51 = 0u;
      [(UIView *)self frame];
      *(void *)&long long v50 = v17;
      *((void *)&v50 + 1) = v18;
      *(void *)&long long v51 = v19;
      *((void *)&v51 + 1) = v20;
      uint64_t v40 = 0;
      uint64_t v41 = (double *)&v40;
      uint64_t v42 = 0x4010000000;
      __int16 v43 = &unk_186D7DBA7;
      long long v21 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
      long long v44 = *MEMORY[0x1E4F1DB28];
      long long v45 = v21;
      [(UIView *)self _currentScreenScale];
      memset(&v39, 0, sizeof(v39));
      CGAffineTransformMakeScale(&v39, v22, v22);
      id v23 = objc_getAssociatedObject(self, &_applyAutoresizingMaskWithOldSuperviewSize__errorAssociationKey);
      char v24 = v23;
      if (v23)
      {
        [v23 rectValue];
        BOOL v25 = v41;
        *((void *)v41 + 4) = v26;
        *((void *)v25 + 5) = v27;
        *((void *)v25 + 6) = v28;
        *((void *)v25 + 7) = v29;
      }
      v37[0] = MEMORY[0x1E4F143A8];
      v37[1] = 3221225472;
      v37[2] = __63__UIView_Geometry___applyAutoresizingMaskWithOldSuperviewSize___block_invoke;
      v37[3] = &unk_1E530FE90;
      v37[4] = v55;
      v37[5] = v52;
      v37[6] = &v46;
      v37[7] = &v40;
      CGAffineTransform v38 = v39;
      long long v30 = (void (**)(void *, UIViewAutoresizing, void *, void *))_Block_copy(v37);
      v30[2](v30, [(UIView *)self autoresizingMask] & 7, &__block_literal_global_2240, &__block_literal_global_2243);
      v30[2](v30, ([(UIView *)self autoresizingMask] >> 3) & 7, &__block_literal_global_2245, &__block_literal_global_2247);
      long long v31 = (CGRect *)v47;
      [(UIView *)self frame];
      v56.origin.double x = v32;
      v56.origin.double y = v33;
      v56.size.double width = v34;
      v56.size.double height = v35;
      if (!CGRectEqualToRect(v31[1], v56)) {
        -[UIView setFrame:](self, "setFrame:", v47[4], v47[5], v47[6], v47[7]);
      }
      if (fabs(v41[4]) >= 2.22044605e-16
        || fabs(v41[5]) >= 2.22044605e-16
        || fabs(v41[6]) >= 2.22044605e-16
        || fabs(v41[7]) >= 2.22044605e-16)
      {
        long long v36 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithRect:");
        objc_setAssociatedObject(self, &_applyAutoresizingMaskWithOldSuperviewSize__errorAssociationKey, v36, (void *)1);
      }
      else
      {
        objc_setAssociatedObject(self, &_applyAutoresizingMaskWithOldSuperviewSize__errorAssociationKey, 0, 0);
      }

      _Block_object_dispose(&v40, 8);
      _Block_object_dispose(&v46, 8);
      _Block_object_dispose(v52, 8);
      _Block_object_dispose(v55, 8);
      uint64_t viewFlags = (uint64_t)self->_viewFlags;
      uint64_t v9 = *((void *)&self->_viewFlags + 1);
      int v11 = *((_DWORD *)&self->_viewFlags + 4);
    }
  }
  *(void *)&self->_uint64_t viewFlags = viewFlags & 0xBFFFFFFFFFFFFFFFLL;
  *((void *)&self->_viewFlags + 1) = v9;
  *((_DWORD *)&self->_viewFlags + 4) = v11;
}

- (UIViewAutoresizing)autoresizingMask
{
  return (*(void *)&self->_viewFlags >> 18) & 0x3FLL;
}

- (void)_applyISEngineLayoutValuesToBoundsOnly:(BOOL)a3
{
  if ([(UIView *)self translatesAutoresizingMaskIntoConstraints]
    || ![(UIView *)self _hostsLayoutEngine])
  {
    double v5 = self;
  }
  else
  {
    double v5 = [(UIView *)self superview];
  }
  double v6 = v5;
  char v7 = [(UIView *)v5 _layoutEngineCreateIfNecessary];
  if (!v7)
  {
    char v7 = [[(UIView *)v6 superview] _layoutEngineCreateIfNecessary];
    if (!v7) {
      goto LABEL_47;
    }
  }
  v51.size = 0u;
  double v8 = objc_msgSend(v7, "delegate", 0, 0, 0, 0);
  if (dyld_program_sdk_at_least())
  {

LABEL_11:
    if (self) {
      -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](self, &v49, &v51.origin.x, v7, 0);
    }
    int v10 = 1;
    goto LABEL_15;
  }
  if (v8)
  {
    int v9 = [v8 _forceLayoutEngineSolutionInRationalEdges];

    if (v9) {
      goto LABEL_11;
    }
  }
  [(UIView *)self _nsis_origin:&v49 bounds:&v51 inEngine:v7];
  int v10 = 0;
LABEL_15:
  *(void *)&self->_viewFlags |= 0x200000000000000uLL;
  [(UIView *)self bounds];
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  v51.origin.double x = v11;
  v51.origin.double y = v13;
  BOOL v19 = [(UIView *)self _safeAreaInsetsFrozen];
  v54.origin.double x = v12;
  v54.origin.double y = v14;
  v54.size.CGFloat width = v16;
  v54.size.CGFloat height = v18;
  BOOL v20 = CGRectEqualToRect(v51, v54);
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  if (v20)
  {
    if ((viewFlags & 0x20000000000000) != 0)
    {
      if ([(UIView *)self _unconditionallyWantsSetBoundsFromISEngineLayout])
      {
        uint64_t v22 = (uint64_t)self->_viewFlags;
        if ((v22 & 0x2000000000000000) == 0)
        {
          uint64_t v23 = *((void *)&self->_viewFlags + 1);
          int v24 = *((_DWORD *)&self->_viewFlags + 4);
          *(void *)&self->_uint64_t viewFlags = v22 | 0x2000000000000000;
          *((void *)&self->_viewFlags + 1) = v23;
          *((_DWORD *)&self->_viewFlags + 4) = v24;
          -[UIView setBounds:](self, "setBounds:", *(_OWORD *)&v51.origin, *(_OWORD *)&v51.size);
        }
      }
    }
  }
  else if ((viewFlags & 0x20000000000000) != 0)
  {
    [(UIView *)self _setSafeAreaInsetsFrozen:1];
    -[UIView setBounds:](self, "setBounds:", *(_OWORD *)&v51.origin, *(_OWORD *)&v51.size);
    [(UIView *)self bounds];
    v55.origin.double x = v25;
    v55.origin.double y = v26;
    v55.size.CGFloat width = v27;
    v55.size.CGFloat height = v28;
    if (!CGRectEqualToRect(v51, v55))
    {
      if ([(UIView *)self translatesAutoresizingMaskIntoConstraints]) {
        -[UIView _constraints_frameDidChange]((uint64_t)self);
      }
      if ((*(void *)&self->_viewFlags & 0x100000000000000) == 0)
      {
        if (v10) {
          -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](self, &v49, 0, v7, 0);
        }
        else {
          [(UIView *)self _nsis_origin:&v49 bounds:0 inEngine:v7];
        }
      }
    }
  }
  uint64_t v29 = (uint64_t)self->_viewFlags;
  *(void *)&self->_uint64_t viewFlags = v29 & 0xDF7FFFFFFFFFFFFFLL | 0x80000000000000;
  if ((~v29 & 0x20080000000000) == 0) {
    -[UIView _resetLayoutEngineHostConstraints](self);
  }
  if (v10)
  {
    double v30 = v49;
    double MidY = v50;
  }
  else
  {
    [(UIView *)self frame];
    CGFloat width = v52.size.width;
    CGFloat height = v52.size.height;
    double v34 = v18;
    double v35 = v16;
    CGFloat v37 = v49;
    CGFloat v36 = v50;
    v52.origin.double x = v49;
    v52.origin.double y = v50;
    CGFloat MidX = CGRectGetMidX(v52);
    v53.origin.double x = v37;
    v53.origin.double y = v36;
    CGFloat v16 = v35;
    CGFloat v18 = v34;
    double v30 = MidX;
    v53.size.CGFloat width = width;
    v53.size.CGFloat height = height;
    double MidY = CGRectGetMidY(v53);
  }
  if (kdebug_is_enabled())
  {
    [(UIView *)self center];
    if (v30 == v40 && MidY == v39)
    {
      v56.origin.double x = v12;
      v56.origin.double y = v14;
      v56.size.CGFloat width = v16;
      v56.size.CGFloat height = v18;
      if (CGRectEqualToRect(v51, v56))
      {
        id v41 = [(UIView *)self description];
        [v41 UTF8String];
        kdebug_trace_string();

        uint64_t v42 = [(UIView *)self superview];
        id v43 = [v42 description];
        [v43 UTF8String];
        kdebug_trace_string();

        long long v44 = [(UIView *)self superview];
        kdebug_trace();
      }
    }
  }
  if (!a3)
  {
    [(UIView *)self center];
    if ((v30 != v46 || MidY != v45) && (*(void *)&self->_viewFlags & 0x20000000000000) != 0)
    {
      [(UIView *)self _setSafeAreaInsetsFrozen:1];
      -[UIView setCenter:](self, "setCenter:", v30, MidY);
      [(UIView *)self center];
      if (v30 != v48 || MidY != v47)
      {
        if ([(UIView *)self translatesAutoresizingMaskIntoConstraints]) {
          -[UIView _constraints_frameDidChange]((uint64_t)self);
        }
      }
    }
  }
  [(UIView *)self _setSafeAreaInsetsFrozen:v19];
  *(void *)&self->_viewFlags &= ~0x200000000000000uLL;

LABEL_47:
}

- (void)_setSafeAreaInsetsFrozen:(BOOL)a3 updateForUnfreeze:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  if ([(UIView *)self _safeAreaInsetsFrozen] != a3)
  {
    uint64_t v7 = 0x2000000000000000;
    if (!v5) {
      uint64_t v7 = 0;
    }
    *((void *)&self->_viewFlags + 1) = *((void *)&self->_viewFlags + 1) & 0xDFFFFFFFFFFFFFFFLL | v7;
    if (v4 && !v5)
    {
      uint64_t v8 = *(void *)((char *)&self->_viewFlags + 20);
      if ((v8 & 0x20000000000) != 0) {
        *(void *)((char *)&self->_viewFlags + 20) = v8 | 0x80000000000;
      }
      [(UIView *)self _updateSafeAreaInsets];
    }
  }
}

- (void)_setSafeAreaInsetsFrozen:(BOOL)a3
{
}

void __63__UIView_Geometry___applyAutoresizingMaskWithOldSuperviewSize___block_invoke(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t v7 = a3;
  uint64_t v8 = a4;
  int v9 = v8;
  if ((a2 & 0xFFFFFFFB) != 0)
  {
    int v10 = (uint64_t (**)(char *, uint64_t))(v8 + 16);
    double v11 = *(double *)(*((uint64_t (**)(char *, uint64_t))v8 + 2))(v8, *(void *)(*(void *)(a1 + 32) + 8) + 32);
    double v12 = *(double *)(*v10)(v9, *(void *)(*(void *)(a1 + 40) + 8) + 32);
    double v13 = *(double *)v7[2](v7, *(void *)(*(void *)(a1 + 48) + 8) + 32);
    double v14 = v13 + *(double *)v7[2](v7, *(void *)(*(void *)(a1 + 56) + 8) + 32);
    double v15 = *(double *)(*v10)(v9, *(void *)(*(void *)(a1 + 48) + 8) + 48);
    double v16 = v15 + *(double *)(*v10)(v9, *(void *)(*(void *)(a1 + 56) + 8) + 48);
    switch(a2)
    {
      case 1:
        double v14 = v12 - (v11 - v14);
        break;
      case 2:
        double v18 = v11 - v16;
        goto LABEL_11;
      case 3:
        double v19 = 0.5;
        if (fabs(v14 + v16) >= 2.22044605e-16) {
          double v19 = v14 / (v14 + v16);
        }
        double v20 = v11 - (v14 + v16);
        double v14 = (v12 - v20) * v19;
        double v18 = v20 + v14;
LABEL_11:
        double v21 = v12 - v18;
        goto LABEL_24;
      case 4:
        break;
      case 5:
        double v22 = fabs(v14);
        double v23 = vabdd_f64(v11, v16);
        double v24 = 1.0;
        if (v11 - v16 <= 1.0) {
          double v24 = 0.5;
        }
        double v25 = v14 / (v11 - v16);
        if (v22 < 2.22044605e-16 || v23 < 2.22044605e-16) {
          double v25 = v24;
        }
        double v14 = (v12 - v16) * v25;
        break;
      case 6:
        double v27 = 1.0;
        if (fabs(v16) >= 2.22044605e-16)
        {
          double v27 = v16 / (v11 - v14);
          if (vabdd_f64(v11, v14) < 2.22044605e-16) {
            double v27 = 0.0;
          }
        }
        double v21 = (v12 - v14) * v27;
LABEL_24:
        double v16 = fmax(v21, 0.0);
        break;
      case 7:
        double v28 = v14 / v11;
        BOOL v29 = fabs(v11) < 2.22044605e-16;
        double v30 = 0.333333333;
        if (v29) {
          double v28 = 0.333333333;
        }
        double v14 = v12 * v28;
        if (!v29) {
          double v30 = v16 / v11;
        }
        double v16 = v12 * v30;
        break;
      default:
        if (os_variant_has_internal_diagnostics())
        {
          uint64_t v42 = __UIFaultDebugAssertLog();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
          {
            LOWORD(buf.a) = 0;
            _os_log_fault_impl(&dword_1853B0000, v42, OS_LOG_TYPE_FAULT, "Unexpected autoresize mask during view resizing", (uint8_t *)&buf, 2u);
          }
        }
        else
        {
          double v17 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UIInternalPreference_SoftAssertConvertView_block_invoke___s_category)+ 8);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf.a) = 0;
            _os_log_impl(&dword_1853B0000, v17, OS_LOG_TYPE_ERROR, "Unexpected autoresize mask during view resizing", (uint8_t *)&buf, 2u);
          }
        }
        break;
    }
    if (dyld_program_sdk_at_least())
    {
      long long v31 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)&buf.a = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&buf.c = v31;
      *(_OWORD *)&buf.tCGFloat x = *(_OWORD *)(a1 + 96);
      *(void *)&long long v31 = 0;
      uint64_t v32 = 0;
      double v33 = v14;
      double v34 = v16;
      CGRect v45 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v31 - 8), &buf);
      NSRect v46 = NSIntegralRectWithOptions(v45, 0x30CuLL);
      CGFloat x = v46.origin.x;
      CGFloat y = v46.origin.y;
      CGFloat width = v46.size.width;
      CGFloat height = v46.size.height;
      *(_OWORD *)&v46.origin.CGFloat y = *(_OWORD *)(a1 + 80);
      *(_OWORD *)&buf.a = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&buf.c = *(_OWORD *)&v46.origin.y;
      *(_OWORD *)&buf.tCGFloat x = *(_OWORD *)(a1 + 96);
      CGAffineTransformInvert(&v43, &buf);
      v47.origin.CGFloat x = x;
      v47.origin.CGFloat y = y;
      v47.size.CGFloat width = width;
      v47.size.CGFloat height = height;
      CGRect v48 = CGRectApplyAffineTransform(v47, &v43);
      double v39 = v48.origin.x;
      double v40 = v48.size.width;
      *(CGFloat *)v7[2](v7, *(void *)(*(void *)(a1 + 48) + 8) + 32) = v48.origin.x;
    }
    else
    {
      double v39 = floor(v14);
      *(double *)v7[2](v7, *(void *)(*(void *)(a1 + 48) + 8) + 32) = v39;
      double v40 = floor(v16);
    }
    *(double *)(*((uint64_t (**)(char *, uint64_t))v9 + 2))(v9, *(void *)(*(void *)(a1 + 48) + 8) + 48) = v40;
    if (fabs(v14) == INFINITY) {
      double v41 = 0.0;
    }
    else {
      double v41 = v14 - v39;
    }
    *(double *)v7[2](v7, *(void *)(*(void *)(a1 + 56) + 8) + 32) = v41;
    *(double *)(*((uint64_t (**)(char *, uint64_t))v9 + 2))(v9, *(void *)(*(void *)(a1 + 56) + 8) + 48) = v16 - v40;
  }
}

uint64_t __63__UIView_Geometry___applyAutoresizingMaskWithOldSuperviewSize___block_invoke_2(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t __63__UIView_Geometry___applyAutoresizingMaskWithOldSuperviewSize___block_invoke_4(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t __63__UIView_Geometry___applyAutoresizingMaskWithOldSuperviewSize___block_invoke_3(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

- (BOOL)_unconditionallyWantsSetBoundsFromISEngineLayout
{
  return dyld_program_sdk_at_least();
}

- (void)_setAutoresizingConstraints:(void *)a1
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  uint64_t v4 = a1[12] & 0x420000000000000;
  if (!os_variant_has_internal_diagnostics())
  {
    if (v4 != 0x400000000000000)
    {
      double v19 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25A650) + 8);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGAffineTransform buf = 138412290;
        double v28 = a1;
        _os_log_impl(&dword_1853B0000, v19, OS_LOG_TYPE_ERROR, "UIKit bug: Setting autoresizing constraints when autoresizing is off for %@", buf, 0xCu);
      }
      return;
    }
    goto LABEL_5;
  }
  if (v4 == 0x400000000000000)
  {
LABEL_5:
    BOOL v5 = (void *)[a1 superview];
    if (v5)
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      double v6 = (void *)-[UIView _autoresizingConstraints](a1);
      uint64_t v7 = [v6 countByEnumeratingWithState:&v23 objects:buf count:16];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)v24;
        do
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v24 != v9) {
              objc_enumerationMutation(v6);
            }
            -[UIView _layoutEngine_willRemoveLayoutConstraint:](v5, *(void **)(*((void *)&v23 + 1) + 8 * i));
          }
          uint64_t v8 = [v6 countByEnumeratingWithState:&v23 objects:buf count:16];
        }
        while (v8);
      }
    }
    if (objc_msgSend(a2, "count", (void)v23)) {
      [v5 _layoutEngineCreateIfNecessary];
    }
    [a1 _setInternalConstraints:a2];
    if (v5)
    {
      int has_internal_diagnostics = os_variant_has_internal_diagnostics();
      uint64_t v12 = a1[12];
      if (has_internal_diagnostics)
      {
        if ((v12 & 0x400000000000000) == 0)
        {
          double v21 = __UIFaultDebugAssertLog();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)CGAffineTransform buf = 0;
            _os_log_fault_impl(&dword_1853B0000, v21, OS_LOG_TYPE_FAULT, "Don't add autoresizing constraints for views that don't want autolayout", buf, 2u);
          }
        }
      }
      else if ((v12 & 0x400000000000000) == 0)
      {
        double v22 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25A658) + 8);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)CGAffineTransform buf = 0;
          _os_log_impl(&dword_1853B0000, v22, OS_LOG_TYPE_ERROR, "Don't add autoresizing constraints for views that don't want autolayout", buf, 2u);
        }
      }
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      double v13 = (void *)-[UIView _autoresizingConstraints](a1);
      uint64_t v14 = [v13 countByEnumeratingWithState:&v23 objects:buf count:16];
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = *(void *)v24;
        do
        {
          for (uint64_t j = 0; j != v15; ++j)
          {
            if (*(void *)v24 != v16) {
              objc_enumerationMutation(v13);
            }
            -[UIView _layoutEngine_didAddLayoutConstraint:roundingAdjustment:mutuallyExclusiveConstraints:](v5, *(void *)(*((void *)&v23 + 1) + 8 * j), 0, 0.0);
          }
          uint64_t v15 = [v13 countByEnumeratingWithState:&v23 objects:buf count:16];
        }
        while (v15);
      }
    }
    return;
  }
  double v18 = __UIFaultDebugAssertLog();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)CGAffineTransform buf = 138412290;
    double v28 = a1;
    _os_log_fault_impl(&dword_1853B0000, v18, OS_LOG_TYPE_FAULT, "UIKit bug: Setting autoresizing constraints when autoresizing is off for %@", buf, 0xCu);
  }
}

- (uint64_t)_autoresizingConstraints
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v2 = a1[12] & 0x420000000000000;
  if (os_variant_has_internal_diagnostics())
  {
    if (v2 != 0x400000000000000)
    {
      uint64_t v4 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        int v7 = 138412290;
        uint64_t v8 = a1;
        _os_log_fault_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "UIKit bug: Retrieving autoresizing constraints when autoresizing is off for %@", (uint8_t *)&v7, 0xCu);
      }
      return 0;
    }
  }
  else if (v2 != 0x400000000000000)
  {
    BOOL v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_autoresizingConstraints___s_category) + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      uint64_t v8 = a1;
      _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "UIKit bug: Retrieving autoresizing constraints when autoresizing is off for %@", (uint8_t *)&v7, 0xCu);
    }
    return 0;
  }
  return [a1 _internalConstraints];
}

- (uint64_t)_layoutEngine_didAddLayoutConstraint:(uint64_t)a3 roundingAdjustment:(double)a4 mutuallyExclusiveConstraints:
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  double v6 = a2;
  int v7 = a1;
  if (a2)
  {
    uint64_t v8 = objc_msgSend((id)objc_msgSend(a2, "firstItem"), "_referenceView");
    uint64_t v9 = objc_msgSend((id)objc_msgSend(v6, "secondItem"), "_referenceView");
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  char v10 = -[UIView _isViewHierarchyPreparedForConstraint:]((uint64_t)v7, v6);
  char v11 = v10;
  if (v8 && (v10 & 1) == 0) {
    [v7 _viewHierarchyUnpreparedForConstraint:v6];
  }
  [v6 setContainer:v7];
  uint64_t v71 = [v7 _layoutEngineCreateIfNecessary];
  if (qword_1EB25A6C0 != -1) {
    dispatch_once(&qword_1EB25A6C0, &__block_literal_global_855_0);
  }
  long long v70 = (void *)v8;
  if (byte_1EB25A5B2)
  {
    if (qword_1EB25A6C8 != -1) {
      dispatch_once(&qword_1EB25A6C8, &__block_literal_global_860);
    }
  }
  else
  {
    if (qword_1EB25A6C8 != -1) {
      dispatch_once(&qword_1EB25A6C8, &__block_literal_global_860);
    }
    if (!byte_1EB25A5B3)
    {
      _tagLayoutItem((void *)[v6 firstItem], objc_msgSend(v6, "firstAttribute"));
      _tagLayoutItem((void *)[v6 secondItem], objc_msgSend(v6, "secondAttribute"));
      goto LABEL_125;
    }
  }
  int v12 = byte_1EB25A5B3;
  long long v67 = v7;
  if (qword_1EB25A6C0 != -1) {
    dispatch_once(&qword_1EB25A6C0, &__block_literal_global_855_0);
  }
  char v66 = v11;
  int v13 = byte_1EB25A5B2;
  int v80 = v12;
  if (!(byte_1EB25A5B2 | v12))
  {
    long long v65 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v65, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "void _tagConstraintItemsIfNecessary(NSLayoutConstraint *)"), @"NSLayoutConstraint_UIKitAdditions.m", 924, @"Internal UIKit error: Unexpected use of extended constraint item tagging");
  }
  uint64_t v69 = a3;
  uint64_t v14 = (void *)[v6 firstItem];
  uint64_t v15 = (void *)[v6 secondItem];
  int v77 = v14;
  uint64_t v16 = (void *)[v14 _referenceView];
  double v17 = (void *)[v15 _referenceView];
  uint64_t v18 = [v6 firstAnchor];
  uint64_t v19 = [v6 secondAnchor];
  if (v18) {
    BOOL v20 = [v6 firstItem] == 0;
  }
  else {
    BOOL v20 = 0;
  }
  double v21 = v77;
  if (v19)
  {
    BOOL v22 = [v6 secondItem] == 0;
    if (v20)
    {
LABEL_24:
      BOOL v78 = 0;
      goto LABEL_29;
    }
  }
  else
  {
    BOOL v22 = 0;
    if (v20) {
      goto LABEL_24;
    }
  }
  uint64_t v23 = [v77 _referenceView];
  BOOL v78 = 0;
  if (v77 && (void *)v23 != v77) {
    BOOL v78 = objc_msgSend(v77, "nsli_superitem") == v23;
  }
LABEL_29:
  if (v22)
  {
    BOOL v74 = 0;
  }
  else
  {
    uint64_t v24 = [v15 _referenceView];
    BOOL v74 = 0;
    if (v15 && (void *)v24 != v15) {
      BOOL v74 = objc_msgSend(v15, "nsli_superitem") == v24;
    }
  }
  if (v13) {
    char v25 = v20;
  }
  else {
    char v25 = 1;
  }
  char v76 = v15;
  if (v25)
  {
    int v26 = !v20;
    double v27 = &qword_1EB25A000;
  }
  else
  {
    double v27 = &qword_1EB25A000;
    if ([v16 _hostsLayoutEngine])
    {
      int v26 = 0;
      if (v77 && v16 == v77 && !v76) {
        int v26 = (v77[13] & 0x80) == 0;
      }
    }
    else
    {
      int v26 = 1;
    }
  }
  uint64_t v68 = v9;
  long long v72 = v6;
  if (v13) {
    char v28 = v22;
  }
  else {
    char v28 = 1;
  }
  int v29 = v22;
  uint64_t v30 = (uint64_t)v17;
  if ((v28 & 1) == 0) {
    int v29 = [v17 _hostsLayoutEngine];
  }
  int v31 = v29 ^ 1;
  if (qword_1EB25A6C0 != -1) {
    dispatch_once(&qword_1EB25A6C0, &__block_literal_global_855_0);
  }
  if (*((unsigned char *)v27 + 1458))
  {
    if (qword_1EB25A6D0 != -1) {
      dispatch_once(&qword_1EB25A6D0, &__block_literal_global_1106_1);
    }
    if (v72 && byte_1EB25A5B5)
    {
      uint64_t v32 = objc_msgSend((id)objc_msgSend(v72, "firstItem"), "_referenceView");
      double v33 = objc_msgSend((id)objc_msgSend(v72, "secondItem"), "_referenceView");
      if (v32)
      {
        if ([v32 superview])
        {
          uint64_t v34 = [v32 superview];
          if (v34 == [v32 window]) {
            int v26 = 1;
          }
        }
      }
      if (v33)
      {
        if ([v33 superview])
        {
          uint64_t v35 = [v33 superview];
          if (v35 == [v33 window]) {
            int v31 = 1;
          }
        }
      }
      double v21 = v77;
    }
  }
  if (v13)
  {
    if (v26 && v31)
    {
      int v31 = 1;
LABEL_87:
      _tagLayoutItem((void *)[v72 firstItem], objc_msgSend(v72, "firstAttribute"));
      goto LABEL_88;
    }
    if (v30 && !v26) {
      int v26 = (void *)v30 == v16 && v78 || !-[UIView _containsView:]((uint64_t)v16, v30);
    }
    if (v16 && !v31)
    {
      if ((void *)v30 != v16 || !v74)
      {
        int v31 = !-[UIView _containsView:](v30, (uint64_t)v16);
        if (!v26) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
      int v31 = 1;
    }
  }
  if (v26) {
    goto LABEL_87;
  }
LABEL_88:
  if (v31) {
    _tagLayoutItem((void *)[v72 secondItem], objc_msgSend(v72, "secondAttribute"));
  }
  CGAffineTransform v38 = v76;
  if (v80)
  {
    if (v20 || v22)
    {
      double v39 = (void *)[v72 _referencedLayoutItems];
      uint64_t v40 = [v39 count];
      double v41 = (void *)[MEMORY[0x1E4F1CA80] setWithCapacity:v40];
      uint64_t v42 = (void *)[MEMORY[0x1E4F1CA80] setWithCapacity:v40];
      long long v98 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      obuint64_t j = v39;
      uint64_t v79 = [v39 countByEnumeratingWithState:&v98 objects:v104 count:16];
      if (v79)
      {
        uint64_t v75 = *(void *)v99;
        do
        {
          uint64_t v43 = 0;
          do
          {
            if (*(void *)v99 != v75) {
              objc_enumerationMutation(obj);
            }
            long long v44 = *(void **)(*((void *)&v98 + 1) + 8 * v43);
            if (v44 != v21 && v44 != v38)
            {
              NSRect v46 = (void *)[*(id *)(*((void *)&v98 + 1) + 8 * v43) _referenceView];
              if ([v46 _hostsLayoutEngine])
              {
                [v41 addObject:v46];
              }
              else
              {
                [v42 addObject:v46];
                _tagLayoutItem(v44, 0);
              }
            }
            uint64_t v81 = v43;
            long long v96 = 0u;
            long long v97 = 0u;
            long long v94 = 0u;
            long long v95 = 0u;
            uint64_t v47 = [v41 countByEnumeratingWithState:&v94 objects:v103 count:16];
            if (v47)
            {
              uint64_t v48 = v47;
              uint64_t v49 = *(void *)v95;
              do
              {
                for (uint64_t i = 0; i != v48; ++i)
                {
                  if (*(void *)v95 != v49) {
                    objc_enumerationMutation(v41);
                  }
                  CGRect v51 = *(void **)(*((void *)&v94 + 1) + 8 * i);
                  if (v13)
                  {
                    long long v92 = 0u;
                    long long v93 = 0u;
                    long long v90 = 0u;
                    long long v91 = 0u;
                    uint64_t v52 = [v42 countByEnumeratingWithState:&v90 objects:v102 count:16];
                    if (!v52) {
                      continue;
                    }
                    uint64_t v53 = v52;
                    uint64_t v54 = *(void *)v91;
LABEL_112:
                    uint64_t v55 = 0;
                    while (1)
                    {
                      if (*(void *)v91 != v54) {
                        objc_enumerationMutation(v42);
                      }
                      if (![v51 containsView:*(void *)(*((void *)&v90 + 1) + 8 * v55)])break; {
                      if (v53 == ++v55)
                      }
                      {
                        uint64_t v53 = [v42 countByEnumeratingWithState:&v90 objects:v102 count:16];
                        if (v53) {
                          goto LABEL_112;
                        }
                        goto LABEL_120;
                      }
                    }
                  }
                  _tagLayoutItem(v51, 0);
LABEL_120:
                  ;
                }
                uint64_t v48 = [v41 countByEnumeratingWithState:&v94 objects:v103 count:16];
              }
              while (v48);
            }
            uint64_t v43 = v81 + 1;
            CGAffineTransform v38 = v76;
            double v21 = v77;
          }
          while (v81 + 1 != v79);
          uint64_t v79 = [obj countByEnumeratingWithState:&v98 objects:v104 count:16];
        }
        while (v79);
      }
    }
  }
  double v6 = v72;
  uint64_t v9 = v68;
  a3 = v69;
  uint64_t v8 = (uint64_t)v70;
  int v7 = v67;
  char v11 = v66;
LABEL_125:
  v82[0] = MEMORY[0x1E4F143A8];
  v82[1] = 3221225472;
  char v83 = __120__UIView_UIConstraintBasedLayout___layoutEngine_didAddLayoutConstraint_roundingAdjustment_mutuallyExclusiveConstraints___block_invoke;
  long long v84 = &unk_1E530E6E0;
  char v89 = v11;
  uint64_t v85 = v71;
  long long v86 = v7;
  long long v87 = v6;
  long long v88 = sel__layoutEngine_didAddLayoutConstraint_roundingAdjustment_mutuallyExclusiveConstraints_;
  uint64_t v56 = [v6 firstItem];
  uint64_t v57 = [v6 secondItem];
  uint64_t v58 = v57;
  if (v8 == v56 && v9 == v57 || (void *)[v7 _window] != v7)
  {
    int v59 = 0;
    int v60 = 0;
    int v61 = 0;
  }
  else
  {
    if (v8 == v56) {
      int v60 = 0;
    }
    else {
      int v60 = objc_msgSend((id)objc_msgSend(v6, "firstItem"), "_isSafeAreaAspectFitLayoutGuide");
    }
    if (v9 == v58) {
      int v61 = 0;
    }
    else {
      int v61 = objc_msgSend((id)objc_msgSend(v6, "secondItem"), "_isSafeAreaAspectFitLayoutGuide");
    }
    int v59 = v60 ^ v61;
  }
  v83((uint64_t)v82, v70, [v6 firstAttribute], v70 != (void *)v56, v59 & v61);
  uint64_t v62 = [v6 secondAttribute];
  v83((uint64_t)v82, (void *)v9, v62, v9 != v58, v59 & v60);
  if (([v6 _addToEngine:v71 integralizationAdjustment:a3 mutuallyExclusiveConstraints:a4] & 1) == 0)
  {
    [v6 setContainer:0];
    return 0;
  }
  uint64_t v63 = 1;
  _UIOldConstraintsSupportUpdateDependentViewsForConstraint(v6, 1);
  return v63;
}

uint64_t __120__UIView_UIConstraintBasedLayout___layoutEngine_didAddLayoutConstraint_roundingAdjustment_mutuallyExclusiveConstraints___block_invoke(uint64_t result, void *a2, int a3, int a4, int a5)
{
  if (a2)
  {
    int v7 = a2;
    uint64_t v8 = result;
    if ((a3 - 13) >= 0xFFFFFFFE && (a4 & 1) == 0) {
      int v7 = objc_msgSend(a2, "_viewForLoweringBaselineLayoutAttribute:");
    }
    CGRect result = [v7 _layoutEngineCreateIfNecessary];
    if (result != *(void *)(v8 + 32))
    {
      uint64_t v9 = result;
      if (!*(unsigned char *)(v8 + 64)) {
        CGRect result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", *(void *)(v8 + 56), *(void *)(v8 + 40), @"NSLayoutConstraint_UIKitAdditions.m", 1023, @"Impossible to set up layout with view hierarchy unprepared for constraint.");
      }
      if (a4) {
        char v10 = 0;
      }
      else {
        char v10 = v7;
      }
      if ((a4 & 1) == 0)
      {
        CGRect result = [v7 superview];
        int v7 = (void *)result;
      }
      if (a5)
      {
        CGRect result = objc_msgSend(*(id *)(v8 + 40), "_layoutEngine_isEngineMergingAllowedBetweenEngine:itemEngine:forConstraint:initialView:", *(void *)(v8 + 32), v9, *(void *)(v8 + 48), v7);
        if ((result & 1) == 0) {
          CGRect result = [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"Constraints to the safeAreaAspectFitLayoutGuide not allowed with views deeper in the view controller hierarchy than the window's root view controller. The safeAreaAspectFitLayoutGuide should only be used for displaying full-window/full-screen media content with views that are direct subviews or close descendants of the guide's window. %@", *(void *)(v8 + 48) format];
        }
      }
      if (v7 != *(void **)(v8 + 40))
      {
        do
        {
          char v11 = v10;
          char v10 = v7;
          [v7 _setHostsLayoutEngine:0];
          if (([v7 _wantsAutolayout] & 1) == 0)
          {
            [v7 _setWantsAutolayout];
            if ([v11 translatesAutoresizingMaskIntoConstraints])
            {
              -[UIView _invalidateAutoresizingConstraints]((uint64_t)v11);
              -[UIView _updateAutoresizingConstraints](v11);
            }
          }
          CGRect result = [v7 superview];
          int v7 = (void *)result;
        }
        while (result != *(void *)(v8 + 40));
      }
    }
  }
  return result;
}

- (id)_layoutEngineCreateIfNecessary
{
  id result = [(UIView *)self _layoutEngine];
  if (!result)
  {
    [(UIView *)self _initializeLayoutEngine];
    return [(UIView *)self _layoutEngine];
  }
  return result;
}

- (void)_setWantsAutolayout
{
  if ((*(void *)&self->_viewFlags & 0x400000000000000) == 0)
  {
    [(UIView *)self _configureAutolayoutFlagsNeedingLayout:1];
    id v3 = [(UIView *)self superview];
    uint64_t v4 = [(UIView *)self _hostsLayoutEngine] ^ 1;
    [(UIView *)v3 _setSubviewWantsAutolayoutTripWantsAutolayout:v4];
  }
}

- (uint64_t)_isViewHierarchyPreparedForConstraint:(uint64_t)result
{
  if (result)
  {
    uint64_t v3 = result;
    if (a2)
    {
      uint64_t v4 = objc_msgSend((id)objc_msgSend(a2, "firstItem"), "_referenceView");
      uint64_t v5 = objc_msgSend((id)objc_msgSend(a2, "secondItem"), "_referenceView");
      if (([v4 isDescendantOfView:v3] & 1) == 0) {
        return 0;
      }
      if (!v5) {
        return 1;
      }
      double v6 = (void *)v5;
    }
    else
    {
      double v6 = 0;
    }
    return [v6 isDescendantOfView:v3];
  }
  return result;
}

- (void)_setSubviewWantsAutolayoutTripWantsAutolayout:(BOOL)a3
{
  if (!a3 || [(UIView *)self _hostsLayoutEngine])
  {
    [(UIView *)self superview];
    uint64_t v4 = 0;
    BOOL v5 = 0;
LABEL_4:
    p_uint64_t viewFlags = &self->_viewFlags;
    uint64_t viewFlags = (uint64_t)self->_viewFlags;
    uint64_t v7 = *((void *)&self->_viewFlags + 1);
    int v9 = *((_DWORD *)&self->_viewFlags + 4);
    if ((viewFlags & 0x800000000000000) != 0 && !v5) {
      return;
    }
    goto LABEL_15;
  }
  p_uint64_t viewFlags = &self->_viewFlags;
  if ((*((void *)&self->_viewFlags + 1) & 8) == 0) {
    [(UIView *)self _configureAutolayoutFlagsNeedingLayout:0];
  }
  char v10 = [(UIView *)self superview];
  if (!v10)
  {
    BOOL v5 = 0;
    goto LABEL_13;
  }
  char v11 = v10;
  if ([(UIView *)v10 _wantsAutolayout])
  {
    BOOL v5 = (*(void *)&v11->_viewFlags & 0x800000000000000) == 0;
LABEL_13:
    uint64_t v4 = 1;
    goto LABEL_4;
  }
  uint64_t viewFlags = *(void *)p_viewFlags;
  uint64_t v7 = *((void *)&self->_viewFlags + 1);
  BOOL v5 = 1;
  uint64_t v4 = 1;
  int v9 = *((_DWORD *)&self->_viewFlags + 4);
LABEL_15:
  *(void *)p_uint64_t viewFlags = viewFlags | 0x800000000000000;
  *((void *)p_viewFlags + 1) = v7;
  *((_DWORD *)p_viewFlags + 4) = v9;
  if ((v7 & 4) == 0) {
    [(UIView *)self _setNeedsUpdateConstraints];
  }
  if (v5)
  {
    int v12 = [(UIView *)self superview];
    [(UIView *)v12 _setSubviewWantsAutolayoutTripWantsAutolayout:v4];
  }
}

- (BOOL)_wantsAutolayout
{
  return (*(void *)&self->_viewFlags >> 58) & 1;
}

- (void)_configureAutolayoutFlagsNeedingLayout:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  *(void *)&self->_uint64_t viewFlags = viewFlags | 0x400000000000000;
  if ((viewFlags & 0xC00000000000000) == 0x800000000000000)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v6 = [(UIView *)self _allSubviews];
    uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v6);
          }
          char v11 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)v11)
            && -[UIView _usesAutoresizingConstraints]((uint64_t)v11)
            && !-[UIView _autoresizingConstraints](v11)
            && (v11[13] & 4) == 0)
          {
            [v11 _setNeedsUpdateConstraintsNeedingLayout:v3];
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v8);
    }
  }
  if ((*((void *)&self->_viewFlags + 1) & 4) == 0) {
    [(UIView *)self _setNeedsUpdateConstraintsNeedingLayout:v3];
  }
}

- (void)_setNeedsUpdateConstraintsNeedingLayout:(BOOL)a3
{
  uint64_t v3 = a3;
  *(void *)&self->_viewFlags &= ~0x100000000000uLL;
  [(UIView *)self _informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:"_informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:"];
  BOOL v5 = (uint64_t *)[(NSISEngine *)[(UIView *)self _layoutEngine] delegate];
  if (v5)
  {
    if (v5[12] >= 0) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  [v5 _scheduleUpdateConstraintsPassAsEngineHostNeedingLayout:v3];
}

- (void)_informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(UIView *)self superview];
  if (v5)
  {
    id v6 = v5;
    uint64_t viewFlags = (uint64_t)v5->_viewFlags;
    if ((viewFlags & 0x200000000000) != 0)
    {
      uint64_t v8 = *((void *)&v5->_viewFlags + 1);
      int v9 = *((_DWORD *)&v5->_viewFlags + 4);
      *(void *)&v5->_uint64_t viewFlags = viewFlags & 0xFFFFDFFFFFFFFFFFLL;
      *((void *)&v5->_viewFlags + 1) = v8;
      *((_DWORD *)&v5->_viewFlags + 4) = v9;
      if (v3 && v5 == (UIView *)[(NSISEngine *)[(UIView *)self _layoutEngine] delegate])
      {
        if ((*(void *)&v6->_viewFlags & 0x8000000000000000) == 0) {
          [(UIView *)v6 setNeedsLayout];
        }
        int v10 = 0;
      }
      else
      {
        int v10 = 1;
      }
      [(UIView *)v6 _informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:v10 & v3];
    }
  }
}

- (void)_scheduleUpdateConstraintsPassAsEngineHostNeedingLayout:(BOOL)a3
{
  if (a3) {
    [(UIView *)self setNeedsLayout];
  }
}

- (void)_setNeedsUpdateConstraints
{
}

- (void)_accumulateViewConstraintsIntoArray:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  BOOL v5 = [(UIView *)self _constraintsExceptingSubviewAutoresizingConstraints];
  if (v5) {
    [a3 addObjectsFromArray:v5];
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v6 = [(UIView *)self _allSubviews];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v6);
        }
        char v11 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if (-[UIView _usesAutoresizingConstraints]((uint64_t)v11)) {
          [a3 addObjectsFromArray:-[UIView _autoresizingConstraints](v11)];
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v8);
  }
}

- (NSArray)_constraintsExceptingSubviewAutoresizingConstraints
{
  return &self->_constraintsExceptingSubviewAutoresizingConstraints->super;
}

uint64_t __69__UIView_UIConstraintBasedLayout___constraints_viewGeometryDidChange__block_invoke(uint64_t a1, void *a2)
{
  return [a2 _containerGeometryDidChange];
}

uint64_t __110__UIView_UIConstraintBasedLayout___populateEngineWithConstraintsForViewSubtree_forComputingFittingSizeOfView___block_invoke(uint64_t a1, void *a2)
{
  uint64_t result = [*(id *)(a1 + 32) containsObject:a2];
  if ((result & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5 != [*(id *)(a1 + 48) _layoutEngine])
    {
      if (a2)
      {
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "firstItem"), "_referenceView"), "_setActiveSizeToFitLayoutEngine:", *(void *)(a1 + 40));
        uint64_t v6 = *(void *)(a1 + 40);
        uint64_t v7 = objc_msgSend((id)objc_msgSend(a2, "secondItem"), "_referenceView");
      }
      else
      {
        [0 _setActiveSizeToFitLayoutEngine:*(void *)(a1 + 40)];
        uint64_t v7 = 0;
        uint64_t v6 = *(void *)(a1 + 40);
      }
      [v7 _setActiveSizeToFitLayoutEngine:v6];
    }
    uint64_t v8 = *(void *)(a1 + 40);
    return [a2 _addToEngine:v8];
  }
  return result;
}

- (id)_viewForLoweringBaselineLayoutAttribute:(int)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = a3 - 11;
  if (os_variant_has_internal_diagnostics())
  {
    if (v6 < 2)
    {
LABEL_3:
      if (dyld_program_sdk_at_least())
      {
        uint64_t v7 = (UIView *)-[UIView _deepestViewForBaselineLayoutUsingFirstBaseline:](self, a3 == 12);
      }
      else if (a3 == 12)
      {
        uint64_t v7 = [(UIView *)self viewForFirstBaselineLayout];
      }
      else
      {
        uint64_t v7 = [(UIView *)self viewForLastBaselineLayout];
      }
      goto LABEL_8;
    }
    int v10 = __UIFaultDebugAssertLog();
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_FAULT);
    uint64_t v7 = self;
    if (v11)
    {
      if (a3 > 0x25) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = qword_1E530E8F8[a3];
      }
      int v16 = 138412546;
      uint64_t v17 = self;
      __int16 v18 = 2112;
      uint64_t v19 = v12;
      _os_log_fault_impl(&dword_1853B0000, v10, OS_LOG_TYPE_FAULT, "Unexpected request for baseline view for nonbaseline attribute. Returning self. self = %@, attribute requested: %@", (uint8_t *)&v16, 0x16u);
      goto LABEL_23;
    }
  }
  else
  {
    if (v6 < 2) {
      goto LABEL_3;
    }
    long long v13 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_viewForLoweringBaselineLayoutAttribute____s_category)
                       + 8);
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    uint64_t v7 = self;
    if (v14)
    {
      if (a3 > 0x25) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = qword_1E530E8F8[a3];
      }
      int v16 = 138412546;
      uint64_t v17 = self;
      __int16 v18 = 2112;
      uint64_t v19 = v15;
      _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "Unexpected request for baseline view for nonbaseline attribute. Returning self. self = %@, attribute requested: %@", (uint8_t *)&v16, 0x16u);
LABEL_23:
      uint64_t v7 = self;
    }
  }
LABEL_8:
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = self;
  }
  if (![(UIView *)v8 isDescendantOfView:self]) {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"NSLayoutConstraint_UIKitAdditions.m", 5045, @"The return values of -viewForFirstBaselineLayout and -viewForLastBaselineLayout must be in the receiver's subtree.");
  }
  return v8;
}

- (BOOL)nsli_lowerAttribute:(int)a3 intoExpression:(id)a4 withCoefficient:(double)a5 forConstraint:(id)a6
{
  uint64_t v9 = *(void *)&a3;
  unsigned int v21 = 0;
  BOOL v11 = [(UIView *)self _requiresExplicitLayoutMarginsGuideForAttribute:a3 getAttributeForGuide:&v21];
  if (v21)
  {
    if (v11
      || [(UIView *)self _supportsContentDimensionVariables]
      && (![a4 isConstant]
        ? (uint64_t v12 = (void *)[a6 firstItem])
        : (uint64_t v12 = (void *)[a6 secondItem]),
          -[UIView _firstCommonAncestorToView:givenCommonAncestor:](self, "_firstCommonAncestorToView:givenCommonAncestor:", [v12 _referenceView], objc_msgSend(a6, "container")) != self))
    {
      uint64_t v19 = [(UIView *)self layoutMarginsGuide];
    }
    else
    {
      uint64_t v19 = [(UIView *)self nsli_layoutMarginsItem];
    }
    __int16 v18 = v19;
    uint64_t v14 = v21;
    long long v13 = self;
    id v15 = a4;
    double v16 = a5;
    id v17 = a6;
  }
  else
  {
    long long v13 = self;
    uint64_t v14 = v9;
    id v15 = a4;
    double v16 = a5;
    id v17 = a6;
    __int16 v18 = 0;
  }
  return [(UIView *)v13 nsli_lowerAttribute:v14 intoExpression:v15 withCoefficient:v17 forConstraint:v18 onBehalfOfLayoutGuide:v16];
}

- (BOOL)_requiresExplicitLayoutMarginsGuideForAttribute:(int64_t)a3 getAttributeForGuide:(int *)a4
{
  if (a4)
  {
    if ((a3 - 13) > 7) {
      int v4 = 0;
    }
    else {
      int v4 = dword_186B9DFB8[(int)a3 - 13];
    }
    *a4 = v4;
  }
  return 0;
}

- (void)_setBackgroundColor:(id)a3
{
  id v5 = a3;
  if (os_variant_has_internal_diagnostics())
  {
    if (!self)
    {
      char v25 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__src[0]) = 0;
        _os_log_fault_impl(&dword_1853B0000, v25, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
      }
    }
  }
  else if (!self)
  {
    int v26 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C1D8) + 8);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__src[0]) = 0;
      _os_log_impl(&dword_1853B0000, v26, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", (uint8_t *)__src, 2u);
    }
  }
  unsigned int v6 = +[UITraitCollection _currentTraitCollectionIfExists]();
  uint64_t v7 = [(UIView *)self traitCollection];
  +[UITraitCollection setCurrentTraitCollection:v7];

  uint64_t v8 = (void *)_UISetCurrentFallbackEnvironment(self);
  memset(__src, 0, 352);
  _UIBeginTrackingTraitUsage(self, 0, __src);
  if ((*((unsigned char *)&self->_viewFlags + 22) & 8) != 0)
  {
    uint64_t v12 = (void *)[v5 CGColor];
  }
  else
  {
    [(UIView *)self traitCollection];
    v10 = uint64_t v9 = v8;
    -[UIColor _resolvedBackgroundColorWithTraitCollection:](v5, v10);
    id v11 = objc_claimAutoreleasedReturnValue();
    uint64_t v12 = (void *)[v11 CGColor];

    uint64_t v8 = v9;
  }
  int v13 = [v5 _isDynamic];
  uint64_t v14 = *(void *)((char *)&self->_viewFlags + 20);
  if (v13)
  {
    if ((v14 & 0x2000000000) != 0)
    {
      double v27 = v8;
      double v16 = [(UIView *)self traitCollection];
      char v28 = a2;
      if (_UILightWeightMaterialsEnabled([v16 userInterfaceIdiom]))
      {
        uint64_t v17 = [v16 traitCollectionByModifyingTraits:&__block_literal_global_2312];

        double v16 = (void *)v17;
      }
      __int16 v18 = [v5 _resolvedMaterialWithTraitCollection:v16];
      uint64_t v19 = [v18 backgroundEffects];
      uint64_t v20 = [v18 contentEffects];
      unsigned int v21 = [v19 arrayByAddingObjectsFromArray:v20];
      [(UIView *)self mt_setBackgroundEffects:v21];

      if (v18)
      {
        id v22 = [(UIView *)self _nilBackgroundColor];
        uint64_t v12 = (void *)[v22 CGColor];
      }
      uint64_t v8 = v27;
      a2 = v28;
    }
    else
    {
      [(UIView *)self mt_setBackgroundEffects:0];
    }
    objc_setAssociatedObject(self, &unk_1EB25C0B8, v5, (void *)1);
    objc_setAssociatedObject(self, &unk_1EB25C0B7, v12, (void *)1);
    unint64_t v15 = *(void *)((char *)&self->_viewFlags + 20) | 0x20000;
    goto LABEL_17;
  }
  if ((v14 & 0x20000) != 0)
  {
    objc_setAssociatedObject(self, &unk_1EB25C0B8, 0, (void *)1);
    objc_setAssociatedObject(self, &unk_1EB25C0B7, 0, (void *)1);
    [(UIView *)self mt_setContentEffects:0];
    [(UIView *)self mt_setBackgroundEffects:0];
    unint64_t v15 = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFDFFFFLL;
LABEL_17:
    *(void *)((char *)&self->_viewFlags + 20) = v15;
  }
  uint64_t v23 = [v5 _systemColorName];
  -[UIView _setBackgroundCGColor:withSystemColorName:]((uint64_t)self, (CGColor *)v12, v23);

  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v24 = (char *)GetTraitCollectionTSD() + 16;
  memcpy(v30, v24, sizeof(v30));
  memcpy(v24, __dst, 0x160uLL);
  -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:](self, (uint64_t)&v30[136], [(UIView *)self methodForSelector:a2], sel__updateDynamicBackgroundColor);
  _UITraitUsageTrackingResultDestroy((uint64_t)v30);
  _UIRestorePreviousFallbackEnvironment(v8);
  +[UITraitCollection setCurrentTraitCollection:v6];
}

- (void)mt_setContentEffects:(id)a3
{
  if (self)
  {
    viewBackingAuCGFloat x = self->_viewBackingAux;
    if (viewBackingAux && (unsigned int v6 = viewBackingAux->_effectHost) != 0)
    {
    }
    else if (![a3 count])
    {
      return;
    }
    -[UIView _backing_wrapLayerInIntermediate]((uint64_t)self);
    uint64_t v7 = -[UIView _backing_outermostLayer](self);
    [v7 setAllowsGroupBlending:0];

    id v9 = (id)[a3 copy];
    uint64_t v8 = -[UIView _effectHost](self);
    [v8 setContentEffects:v9];
  }
}

- (BOOL)_definesDynamicTintColor
{
  uint64_t v2 = _UIViewGetInteractionTintColor(self);
  char v3 = [v2 _isDynamic];

  return v3;
}

- (void)_setBackgroundCGColor:(void *)a3 withSystemColorName:
{
  id v5 = a3;
  if (!a1 || CGColorEqualToColor(a2, (CGColorRef)[(id)a1 _backgroundCGColor])) {
    goto LABEL_62;
  }
  objc_setAssociatedObject((id)a1, &unk_1EB25C0A1, 0, (void *)1);
  CGPatternRef Pattern = CGColorGetPattern(a2);
  if (!Pattern) {
    goto LABEL_14;
  }
  Image = (CGImage *)CGPatternGetImage();
  if (!Image) {
    goto LABEL_14;
  }
  int v10 = Image;
  size_t Width = CGImageGetWidth(Image);
  size_t Height = CGImageGetHeight(v10);
  CGPatternGetStep();
  double v14 = v13;
  double v16 = v15;
  memset(&v44, 0, sizeof(v44));
  CGPatternGetMatrix();
  double b = (double)Width;
  if (v14 == (double)Width)
  {
    BOOL v17 = v16 == (double)Height;
    double b = v44.b;
    double c = v44.c;
    if (v44.b != 0.0) {
      BOOL v17 = 0;
    }
    BOOL v18 = v44.c == 0.0 && v17;
    uint64_t v19 = a1 + 96;
    BOOL v23 = !v18;
    uint64_t v20 = 0x10000000;
    if (v23) {
      uint64_t v20 = 0;
    }
  }
  else
  {
LABEL_14:
    uint64_t v20 = 0;
    uint64_t v19 = a1 + 96;
  }
  int v21 = *(_DWORD *)(v19 + 16);
  uint64_t v22 = *(void *)(v19 + 8);
  *(void *)uint64_t v19 = *(void *)v19 & 0xFFFFFFFFEFFFFFFFLL | v20;
  *(void *)(v19 + 8) = v22;
  *(_DWORD *)(v19 + 16) = v21;
  if (Pattern) {
    BOOL v23 = v20 == 0;
  }
  else {
    BOOL v23 = 0;
  }
  int v24 = v23;
  int v25 = objc_msgSend((id)a1, "_canDrawContent", b, c);
  unint64_t v27 = *(void *)(a1 + 96);
  uint64_t v26 = *(void *)(a1 + 104);
  int v28 = *(_DWORD *)(a1 + 112);
  if ((v24 & 1) != 0 || v25)
  {
    if ((v27 & 0x40) != 0)
    {
      if (objc_getAssociatedObject((id)a1, &unk_1EB25C0A0) == a2)
      {
        unint64_t v27 = *(void *)(a1 + 96);
        uint64_t v26 = *(void *)(a1 + 104);
        int v28 = *(_DWORD *)(a1 + 112);
        if (a2)
        {
LABEL_33:
          if ((v27 & 0x40) == 0)
          {
            objc_setAssociatedObject((id)a1, &unk_1EB25C0A0, a2, (void *)1);
            int v28 = *(_DWORD *)(a1 + 112);
            uint64_t v26 = *(void *)(a1 + 104);
            unint64_t v27 = *(void *)(a1 + 96) | 0x40;
            *(void *)(a1 + 96) = v27;
          }
        }
LABEL_35:
        if ((v27 & 0x10000000) == 0)
        {
          uint64_t v31 = 0x1000000;
          if (!v24) {
            uint64_t v31 = 0;
          }
          *(void *)(a1 + 96) = v27 & 0xFFFFFFFFFEFFFFFFLL | v31;
          *(void *)(a1 + 104) = v26;
          *(_DWORD *)(a1 + 112) = v28;
        }
        [*(id *)(a1 + 160) setBackgroundColor:0];
        [(id)a1 setNeedsDisplay];
        goto LABEL_56;
      }
      objc_setAssociatedObject((id)a1, &unk_1EB25C0A0, 0, (void *)1);
      int v28 = *(_DWORD *)(a1 + 112);
      uint64_t v26 = *(void *)(a1 + 104);
      unint64_t v27 = *(void *)(a1 + 96) & 0xFFFFFFFFFFFFFFBFLL;
      *(void *)(a1 + 96) = v27;
    }
    if (a2) {
      goto LABEL_33;
    }
    goto LABEL_35;
  }
  if ((v27 & 0x10000000) == 0)
  {
    v27 &= ~0x1000000uLL;
    *(void *)(a1 + 96) = v27;
    *(void *)(a1 + 104) = v26;
    *(_DWORD *)(a1 + 112) = v28;
  }
  if ((v27 & 0x40) != 0 && objc_getAssociatedObject((id)a1, &unk_1EB25C0A0) != a2)
  {
    objc_setAssociatedObject((id)a1, &unk_1EB25C0A0, 0, (void *)1);
    *(void *)(a1 + 96) &= ~0x40uLL;
    int v29 = [(id)a1 _canDrawContent];
    uint64_t v30 = *(void **)(a1 + 160);
    if (v29) {
      [v30 setNeedsDisplay];
    }
    else {
      [v30 setContents:0];
    }
  }
  if ((*(void *)(a1 + 96) & 0x10000000) != 0)
  {
    uint64_t v32 = +[UIColor colorWithCGColor:a2];
    objc_setAssociatedObject((id)a1, &unk_1EB25C0A1, v32, (void *)1);

    id v33 = *(id *)(a1 + 160);
    if (a2)
    {
      ColorSpace = CGColorGetPattern(a2);
      if (!ColorSpace)
      {
LABEL_55:
        [v33 setBackgroundColor:ColorSpace];

        goto LABEL_56;
      }
      if (CGPatternGetImage())
      {
        memset(&v44, 0, sizeof(v44));
        CGPatternGetMatrix();
        CGAffineTransformScale(&v44, &v43, 1.0, -1.0);
        CGPatternGetTiling();
        uint64_t v35 = CGPatternCreateWithImage2();
        if (v35)
        {
          CGFloat v36 = (CGPattern *)v35;
          ColorSpace = CGColorGetColorSpace(a2);
          if (ColorSpace)
          {
            Components = CGColorGetComponents(a2);
            if (Components)
            {
              CGColorRef v38 = CGColorCreateWithPattern(ColorSpace, v36, Components);
              ColorSpace = (CGColorSpace *)CFAutorelease(v38);
            }
            else
            {
              ColorSpace = 0;
            }
          }
          CGPatternRelease(v36);
          goto LABEL_55;
        }
      }
    }
    ColorSpace = 0;
    goto LABEL_55;
  }
  [*(id *)(a1 + 160) setBackgroundColor:a2];
LABEL_56:
  double v39 = *(void **)(a1 + 160);
  if (a2)
  {
    id v40 = v39;
    [v40 setOpaque:-[UIView _hasOpaqueBackground](a1)];

    if (Pattern)
    {
      CGPatternGetMatrix();
      [(id)a1 contentScaleFactor];
      if (1.0 / v42 > v41) {
        [(id)a1 setContentScaleFactor:1.0 / v42];
      }
    }
  }
  else
  {
    [v39 setOpaque:(*(void *)(a1 + 96) >> 10) & 1];
  }
  -[UIView _updateNeedsDisplayOnBoundsChange]((void *)a1);
  _UIViewSetBackgroundColorSystemColorName((void *)a1, v5);
LABEL_62:
}

- (CALayer)layer
{
  return self->_layer;
}

- (uint64_t)_hasOpaqueBackground
{
  if (result)
  {
    if ((*(void *)(result + 96) & 0x40) == 0) {
      return 0;
    }
    uint64_t result = [(id)result _backgroundCGColor];
    if (result)
    {
      uint64_t v1 = (CGColor *)result;
      if (!CGColorGetPattern((CGColorRef)result)) {
        return CGColorGetAlpha(v1) == 1.0;
      }
      if (CGPatternGetImage())
      {
        if (CGImageHasAlpha()) {
          return 0;
        }
        return CGColorGetAlpha(v1) == 1.0;
      }
      return 1;
    }
  }
  return result;
}

+ (void)_animateUsingSpringBehavior:(id)a3 tracking:(BOOL)a4 animations:(id)a5 completion:(id)a6
{
}

- (unint64_t)_accessibilityInterfaceStyleIntent
{
  return *((unsigned char *)&self->_viewFlags + 19) & 3;
}

- (unint64_t)_accessibilityResolvedInterfaceStyle
{
  unint64_t v2 = ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 26) & 3;
  if (!v2)
  {
    unint64_t v5 = [(UIView *)self _accessibilityInterfaceStyleIntent];
    unint64_t v2 = v5;
    if (v5 != 2 && v5 != 1)
    {
      if (v5) {
        abort();
      }
      if (dyld_program_sdk_at_least())
      {
        unsigned int v6 = [(UIView *)self traitCollection];
        if ([v6 userInterfaceStyle] == 2) {
          unint64_t v2 = 2;
        }
        else {
          unint64_t v2 = 1;
        }
      }
      else
      {
        return 1;
      }
    }
  }
  return v2;
}

- (void)_accessibilitySetResolvedInterfaceStyle:(unint64_t)a3
{
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xF3FFFFFF | ((a3 & 3) << 26);
}

- (void)_updateEmbeddedViewControllerContentOverlayInsetsIfNecessary
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  if (!a1[11])
  {
    [a1 _viewControllerForAncestor];
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    int v28 = v37 = 0u;
    unint64_t v2 = [v28 childViewControllers];
    uint64_t v3 = [v2 countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (!v3) {
      goto LABEL_37;
    }
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v35;
    while (1)
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v35 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v34 + 1) + 8 * v6);
        if ([v7 _appearState] - 1 > 1) {
          goto LABEL_21;
        }
        uint64_t v8 = [v7 view];
        int v9 = [v8 isDescendantOfView:a1];

        if (!v9) {
          goto LABEL_21;
        }
        if ((a1[12] & 0x200000000000000) == 0) {
          goto LABEL_20;
        }
        int v10 = [v7 view];
        if (![v10 _wantsAutolayout]
          || ([v10 translatesAutoresizingMaskIntoConstraints] & 1) != 0
          || ([v10 superview],
              id v11 = objc_claimAutoreleasedReturnValue(),
              int v12 = objc_msgSend(v11, "_is_needsLayout"),
              v11,
              !v12))
        {

LABEL_20:
          [v7 _updateContentOverlayInsetsFromParentIfNecessary];
          goto LABEL_21;
        }
        double v32 = 0.0;
        double v33 = 0.0;
        long long v30 = 0u;
        long long v31 = 0u;
        double v13 = [v10 _layoutEngineCreateIfNecessary];
        double v14 = [v13 delegate];
        if (dyld_program_sdk_at_least())
        {

LABEL_25:
          if (v10) {
            -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](v10, &v32, (double *)&v30, v13, 0);
          }
          [v10 center];
          if (v32 != v16)
          {
LABEL_35:

            goto LABEL_21;
          }
          double v17 = v33;
          goto LABEL_31;
        }
        if (v14)
        {
          int v29 = [v14 _forceLayoutEngineSolutionInRationalEdges];

          if (v29) {
            goto LABEL_25;
          }
        }
        objc_msgSend(v10, "_nsis_origin:bounds:inEngine:", &v32, &v30, v13);
        double v18 = *((double *)&v31 + 1);
        double v19 = v33;
        double v20 = v32 + *(double *)&v31 * 0.5;
        [v10 center];
        if (v20 != v21) {
          goto LABEL_35;
        }
        double v17 = v19 + v18 * 0.5;
LABEL_31:
        if (v17 != v15) {
          goto LABEL_35;
        }
        [v10 bounds];
        double v23 = v22;
        double v25 = v24;
        long long v26 = v31;

        if (*(double *)&v26 == v23 && *((double *)&v26 + 1) == v25) {
          goto LABEL_20;
        }
LABEL_21:
        ++v6;
      }
      while (v4 != v6);
      uint64_t v27 = [v2 countByEnumeratingWithState:&v34 objects:v38 count:16];
      uint64_t v4 = v27;
      if (!v27)
      {
LABEL_37:

        return;
      }
    }
  }
  [a1 _setViewDelegateContentOverlayInsetsAreClean:0];
}

- (CGRect)convertRect:(CGRect)rect fromView:(UIView *)view
{
  uint64_t v4 = view;
  double height = rect.size.height;
  double width = rect.size.width;
  double y = rect.origin.y;
  double x = rect.origin.x;
  if (view || (uint64_t v4 = (UIView *)[(UIView *)self window]) != 0)
  {
    int v10 = [(UIView *)self _window];
    [(UIView *)v4 _window];

    if (v4 != self)
    {
      layer = v4->_layer;
      int v12 = self->_layer;
      -[CALayer convertRect:fromLayer:](v12, "convertRect:fromLayer:", layer, x, y, width, height);
      double x = v13;
      double y = v14;
      double width = v15;
      double height = v16;
    }
  }
  double v17 = x;
  double v18 = y;
  double v19 = width;
  double v20 = height;
  result.size.double height = v20;
  result.size.double width = v19;
  result.origin.double y = v18;
  result.origin.double x = v17;
  return result;
}

- (BOOL)_ignoresLayerTransformForSafeAreaInsets
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 23) & 1;
}

- (void)layoutSubviews
{
  if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self))
  {
    uint64_t v3 = [(UIView *)self _allSubviews];
    if ([v3 count])
    {
    }
    else
    {
      uint64_t v4 = [(UIView *)self layoutGuides];
      uint64_t v5 = [v4 count];

      if (!v5)
      {
        *(void *)&self->_viewFlags |= 0x40000000000000uLL;
        goto LABEL_12;
      }
    }
    uint64_t v6 = [(UIView *)self _layoutEngine];
    -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v6);

    if ((*(void *)&self->_viewFlags & 0x40000000000000) == 0)
    {
      if ((*((unsigned char *)&self->_viewFlags + 22) & 0x20) != 0
        && (-[UIView _outermostLayoutEngineDelegateView](self),
            uint64_t v7 = (UIView *)objc_claimAutoreleasedReturnValue(),
            v7,
            v7 == self))
      {
        v8[0] = MEMORY[0x1E4F143A8];
        v8[1] = 3221225472;
        v8[2] = __35__UIView_Hierarchy__layoutSubviews__block_invoke;
        v8[3] = &unk_1E52D9F70;
        v8[4] = self;
        -[UIView _withUnsatisfiableConstraintsLoggingSuspendedForFullSubtreeFromOutermostEngineDelegate:](self, (uint64_t)v8);
      }
      else
      {
        -[UIView _updateConstraintsAsNecessaryAndApplyLayoutFromEngine]((uint64_t)self);
      }
    }
  }
LABEL_12:
  *(void *)((char *)&self->_viewFlags + 20) &= ~0x200000uLL;
}

- (void)_startObservingVariablesOnlyToSupportTAMICChange:(BOOL)a3
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = [(UIView *)self _uili_existingBaseFrameVariables];
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v39 objects:v46 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v40;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v40 != v8) {
          objc_enumerationMutation(v5);
        }
        _UILayoutItemSetUpVariableObservation(self, *(void **)(*((void *)&v39 + 1) + 8 * i), 1);
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v39 objects:v46 count:16];
    }
    while (v7);
  }
  if (!a3)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v10 = [(UIView *)self _uili_existingObservationEligibleLayoutVariables];
    uint64_t v11 = [v10 countByEnumeratingWithState:&v35 objects:v45 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v36;
      do
      {
        for (uint64_t j = 0; j != v12; ++j)
        {
          if (*(void *)v36 != v13) {
            objc_enumerationMutation(v10);
          }
          double v15 = *(void **)(*((void *)&v35 + 1) + 8 * j);
          if (([v5 containsObject:v15] & 1) == 0) {
            _UILayoutItemSetUpVariableObservation(self, v15, 0);
          }
        }
        uint64_t v12 = [v10 countByEnumeratingWithState:&v35 objects:v45 count:16];
      }
      while (v12);
    }
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    double v16 = [(UIView *)self _mutableLayoutGuides];
    uint64_t v17 = [(NSMutableArray *)v16 countByEnumeratingWithState:&v31 objects:v44 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)v32;
      do
      {
        for (uint64_t k = 0; k != v18; ++k)
        {
          if (*(void *)v32 != v19) {
            objc_enumerationMutation(v16);
          }
          double v21 = *(void **)(*((void *)&v31 + 1) + 8 * k);
          long long v27 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          double v22 = objc_msgSend(v21, "_uili_existingObservationEligibleLayoutVariables", 0);
          uint64_t v23 = [v22 countByEnumeratingWithState:&v27 objects:v43 count:16];
          if (v23)
          {
            uint64_t v24 = v23;
            uint64_t v25 = *(void *)v28;
            do
            {
              for (uint64_t m = 0; m != v24; ++m)
              {
                if (*(void *)v28 != v25) {
                  objc_enumerationMutation(v22);
                }
                _UILayoutItemSetUpVariableObservation(v21, *(void **)(*((void *)&v27 + 1) + 8 * m), 0);
              }
              uint64_t v24 = [v22 countByEnumeratingWithState:&v27 objects:v43 count:16];
            }
            while (v24);
          }
        }
        uint64_t v18 = [(NSMutableArray *)v16 countByEnumeratingWithState:&v31 objects:v44 count:16];
      }
      while (v18);
    }
  }
}

- (NSArray)layoutGuides
{
  unint64_t v2 = [(UIView *)self _mutableLayoutGuides];
  uint64_t v3 = [v2 copy];
  uint64_t v4 = (void *)v3;
  id v5 = (void *)MEMORY[0x1E4F1CBF0];
  if (v3) {
    id v5 = (void *)v3;
  }
  id v6 = v5;

  return (NSArray *)v6;
}

- (NSMutableArray)_mutableLayoutGuides
{
  return (NSMutableArray *)objc_getAssociatedObject(self, &_UIViewLayoutGuidesAssocObjectKey);
}

- (void)nsis_valueOfVariable:(id)a3 didChangeInEngine:(id)a4
{
  if (((_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_UIKitEngineTracking, @"UIKitEngineTracking") & 1) != 0|| byte_1EB2579DC)&& [a4 _UIKitEngineTrackingOn])
  {
    [a4 pivotCount];
    [a4 variableChangeCount];
    [a4 _UIKitRowCount];
    kdebug_trace();
    [a4 _setUIKitEngineTrackingOn:0];
  }
  id v7 = [(UIView *)self _boundsWidthVariable];
  if (v7 == a3 || [(UIView *)self _boundsHeightVariable] == a3) {
    *(void *)&self->_viewFlags &= ~0x80000000000000uLL;
  }
  BOOL v8 = [(UIView *)self _hostsLayoutEngine];
  int v9 = self;
  if (v8) {
    int v9 = [(UIView *)self superview];
  }
  id v10 = [(UIView *)v9 _layoutEngine];
  uint64_t v11 = [(NSISEngine *)v10 delegate];
  uint64_t v12 = (void *)v11;
  if (v11)
  {
    if ((*(void *)(v11 + 104) & 0x1000) != 0) {
      return;
    }
    BOOL v13 = v10 == a4;
    if (v7 == a3 && v10 == a4)
    {
      if ([(UIView *)self _needsDoubleUpdateConstraintsPass]) {
        [(UIView *)self _setNeedsUpdateConstraintsNeedingLayout:(v12[13] & 0x24) == 0];
      }
      BOOL v13 = 1;
    }
  }
  else
  {
    BOOL v13 = v10 == a4;
  }
  double v14 = [(UIView *)self superview];
  if (v13)
  {
    double v15 = v14;
    if (v14)
    {
      if (~*(void *)&v14->_viewFlags & 0x8000000000000000 | ~*((_DWORD *)&v14->_viewFlags + 2) & 2)
      {
        if ((dyld_program_sdk_at_least() & 1) != 0
          || v12 && [v12 _forceLayoutEngineSolutionInRationalEdges])
        {
          if ([(UIView *)self translatesAutoresizingMaskIntoConstraints]
            || [(UIView *)v15 _layoutEngine] != a4)
          {
            return;
          }
          objc_msgSend(+[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger"), "willSendSetNeedsLayoutToView:becauseOfChangeInVariable:inLayoutEngine:", v15, a3, a4);
        }
        [(UIView *)v15 setNeedsLayout];
      }
    }
  }
}

- (int)nsis_orientationHintForVariable:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  id v6 = (UIView *)[a3 delegate];
  if (has_internal_diagnostics)
  {
    if (v6 != self)
    {
      id v10 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        int v15 = 138412802;
        double v16 = self;
        __int16 v17 = 2112;
        id v18 = a3;
        __int16 v19 = 2112;
        uint64_t v20 = [a3 delegate];
        _os_log_fault_impl(&dword_1853B0000, v10, OS_LOG_TYPE_FAULT, "%@ got asked for the orientationHint of a variable its not the owner of:%@, which is owned by:%@", (uint8_t *)&v15, 0x20u);
      }
    }
  }
  else if (v6 != self)
  {
    uint64_t v11 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25A698) + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v15 = 138412802;
      double v16 = self;
      __int16 v17 = 2112;
      id v18 = a3;
      __int16 v19 = 2112;
      uint64_t v20 = [a3 delegate];
      _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "%@ got asked for the orientationHint of a variable its not the owner of:%@, which is owned by:%@", (uint8_t *)&v15, 0x20u);
    }
  }
  if ([(UIView *)self _boundsWidthVariable] == a3
    || [(UIView *)self _minXVariable] == a3)
  {
    return 0;
  }
  if ([(UIView *)self _boundsHeightVariable] == a3
    || [(UIView *)self _minYVariable] == a3)
  {
    return 1;
  }
  if ([(UIView *)self _contentWidthVariable] == a3
    || [(UIView *)self _contentXOffsetVariable] == a3)
  {
    return 0;
  }
  if ([(UIView *)self _contentHeightVariable] == a3
    || [(UIView *)self _contentYOffsetVariable] == a3)
  {
    return 1;
  }
  if (os_variant_has_internal_diagnostics())
  {
    BOOL v13 = __UIFaultDebugAssertLog();
    int result = os_log_type_enabled(v13, OS_LOG_TYPE_FAULT);
    if (result)
    {
      uint64_t v14 = [a3 delegate];
      int v15 = 138412802;
      double v16 = self;
      __int16 v17 = 2112;
      id v18 = a3;
      __int16 v19 = 2112;
      uint64_t v20 = v14;
      _os_log_fault_impl(&dword_1853B0000, v13, OS_LOG_TYPE_FAULT, "%@ got asked for the orientationHint of a variable it doesn't know about:%@, which is owned by:%@", (uint8_t *)&v15, 0x20u);
      return 0;
    }
  }
  else
  {
    id v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25A6A0) + 8);
    int result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (result)
    {
      uint64_t v9 = [a3 delegate];
      int v15 = 138412802;
      double v16 = self;
      __int16 v17 = 2112;
      id v18 = a3;
      __int16 v19 = 2112;
      uint64_t v20 = v9;
      _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "%@ got asked for the orientationHint of a variable it doesn't know about:%@, which is owned by:%@", (uint8_t *)&v15, 0x20u);
      return 0;
    }
  }
  return result;
}

- (id)_uili_existingBaseFrameVariables
{
  if (![(UIView *)self _minXVariable]
    && ![(UIView *)self _minYVariable]
    && ![(UIView *)self _boundsWidthVariable]
    && ![(UIView *)self _boundsHeightVariable])
  {
    return 0;
  }
  uint64_t v3 = (void *)[MEMORY[0x1E4F1CA48] array];
  if ([(UIView *)self _minXVariable]) {
    objc_msgSend(v3, "addObject:", -[UIView _minXVariable](self, "_minXVariable"));
  }
  if ([(UIView *)self _minYVariable]) {
    objc_msgSend(v3, "addObject:", -[UIView _minYVariable](self, "_minYVariable"));
  }
  if ([(UIView *)self _boundsWidthVariable]) {
    objc_msgSend(v3, "addObject:", -[UIView _boundsWidthVariable](self, "_boundsWidthVariable"));
  }
  if ([(UIView *)self _boundsHeightVariable]) {
    objc_msgSend(v3, "addObject:", -[UIView _boundsHeightVariable](self, "_boundsHeightVariable"));
  }
  return v3;
}

- (id)_boundsWidthVariable
{
  return self->_boundsWidthVariable;
}

- (id)_minXVariable
{
  return self->_minXVariable;
}

- (id)_boundsHeightVariable
{
  return self->_boundsHeightVariable;
}

- (id)_minYVariable
{
  return self->_minYVariable;
}

- (void)_handleSizeConstraintsAsAppropriate
{
  if ([(UIView *)self translatesAutoresizingMaskIntoConstraints])
  {
    if (-[UIView _usesAutoresizingConstraints]((uint64_t)self))
    {
      -[UIView _updateAutoresizingConstraints](self);
    }
  }
  else
  {
    -[UIView _updateContentSizeConstraints](self);
  }
}

- (void)_invalidateIntrinsicContentSizeNeedingLayout:(BOOL)a3
{
  BOOL v3 = a3;
  if (![(UIView *)self translatesAutoresizingMaskIntoConstraints])
  {
    *(void *)&self->_viewFlags &= ~0x400000000000uLL;
    int v5 = -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self);
    if ((v5 & 1) == 0 && [(UIView *)self _wantsAutolayout]) {
      [(UIView *)self _invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel];
    }
    if ((*((void *)&self->_viewFlags + 1) & 4) == 0)
    {
      char v6 = (*(void *)&self->_viewFlags & 0x100000000000) != 0 ? 0 : v5;
      if ((v6 & 1) == 0)
      {
        int v7 = v5 ^ 1;
        [(UIView *)self _setNeedsUpdateConstraintsNeedingLayout:v7 & v3];
        if ((v7 & 1) == 0 && (*(void *)&self->_viewFlags & 0x20) != 0) {
          objc_msgSend((id)-[NSISEngine delegate](-[UIView _layoutEngine](-[UIView superview](self, "superview"), "_layoutEngine"), "delegate"), "_scheduleUpdateConstraintsPassAsEngineHostNeedingLayout:", v3);
        }
      }
    }
  }
  [(UIView *)self _didInvalidateIntrinsicContentSize];
  BOOL v8 = [(UIView *)self superview];
  [(UIView *)v8 _intrinsicContentSizeInvalidatedForChildView:self];
}

- (void)_invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel
{
  if ((*((void *)&self->_viewFlags + 1) & 0x1000) == 0)
  {
    uint64_t v3 = [(NSISEngine *)[(UIView *)self _layoutEngine] delegate];
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      if ((*(void *)(v3 + 104) & 0x1000) == 0)
      {
        if ((*(void *)(v3 + 96) & 0x20000000000000) != 0
          && -[UIView _usesLayoutEngineHostingConstraints](v3))
        {
          [v4 _invalidateIntrinsicContentSizeNeedingLayout:0];
        }
        if ((v4[13] & 0x800) == 0)
        {
          v5[0] = MEMORY[0x1E4F143A8];
          v5[1] = 3221225472;
          v5[2] = __109__UIView_UIConstraintBasedLayout_EngineDelegate___invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel__block_invoke;
          v5[3] = &unk_1E530E8D8;
          v5[4] = v4;
          v5[5] = self;
          _UIViewTopDownSubtreeTraversal((uint64_t)v4, v5, 0);
          v4[13] |= 0x800uLL;
        }
      }
    }
  }
}

- (void)_updateConstraintsIfNeededCollectingViews:(id)a3 forSecondPass:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a4 && (*((void *)&self->_viewFlags + 1) & 0x1000) == 0)
  {
    if (dyld_program_sdk_at_least())
    {
      if ([(UIView *)self translatesAutoresizingMaskIntoConstraints])
      {
        if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
        {
          uint64_t v7 = objc_msgSend((id)objc_msgSend(-[UIView _previousFittingSizeInfo](self, "_previousFittingSizeInfo"), "allKeys"), "objectAtIndexedSubscript:", 0);
          if (v7)
          {
            double v8 = *(double *)(v7 + 24);
            [(UIView *)self bounds];
            if (v8 != CGRectGetWidth(v46)) {
              [(UIView *)self _recursiveInvalidateDescendantsNeedingDoubleUpdateConstraintsCollectingViews:0];
            }
          }
        }
      }
    }
  }
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  if ((viewFlags & 0x200000000000) == 0)
  {
    uint64_t v10 = *((void *)&self->_viewFlags + 1);
    int v11 = *((_DWORD *)&self->_viewFlags + 4);
    *(void *)&self->_uint64_t viewFlags = viewFlags | 0x200000000000;
    *((void *)&self->_viewFlags + 1) = v10;
    *((_DWORD *)&self->_viewFlags + 4) = v11;
    id v12 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    if (v4
      && (*(void *)&self->_viewFlags & 0x20100000000000) == 0x20000000000000
      && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
    {
      [(UIView *)self _resetLayoutEngineHostConstraintsForAxis:0 collectingViews:v12];
    }
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v13 = [v12 countByEnumeratingWithState:&v38 objects:v44 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v39 != v15) {
            objc_enumerationMutation(v12);
          }
          [*(id *)(*((void *)&v38 + 1) + 8 * i) _setInSecondConstraintsPass:1];
        }
        uint64_t v14 = [v12 countByEnumeratingWithState:&v38 objects:v44 count:16];
      }
      while (v14);
    }
    id v17 = [(UIView *)self _allSubviews];
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    uint64_t v18 = [v17 countByEnumeratingWithState:&v34 objects:v43 count:16];
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)v35;
      do
      {
        for (uint64_t j = 0; j != v19; ++j)
        {
          if (*(void *)v35 != v20) {
            objc_enumerationMutation(v17);
          }
          [*(id *)(*((void *)&v34 + 1) + 8 * j) _recursiveUpdateConstraintsIfNeededCollectingViews:a3 forSecondPass:v4];
        }
        uint64_t v19 = [v17 countByEnumeratingWithState:&v34 objects:v43 count:16];
      }
      while (v19);
    }
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v22 = [v12 countByEnumeratingWithState:&v30 objects:v42 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v31;
      do
      {
        for (uint64_t k = 0; k != v23; ++k)
        {
          if (*(void *)v31 != v24) {
            objc_enumerationMutation(v12);
          }
          [*(id *)(*((void *)&v30 + 1) + 8 * k) _setInSecondConstraintsPass:0];
        }
        uint64_t v23 = [v12 countByEnumeratingWithState:&v30 objects:v42 count:16];
      }
      while (v23);
    }

    uint64_t viewFlags = (uint64_t)self->_viewFlags;
  }
  if ((viewFlags & 0x100000000000) == 0)
  {
    if ((viewFlags & 0x20000000000000) != 0
      && !v4
      && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
    {
      -[UIView _relaxLayoutEngineHostConstraints](self);
    }
    [(UIView *)self _sendUpdateConstraintsIfNecessaryForSecondPass:v4];
    if (!v4)
    {
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 3221225472;
      long long v27 = __91__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededCollectingViews_forSecondPass___block_invoke;
      long long v28 = &unk_1E530E810;
      id v29 = a3;
      if ([(UIView *)self _needsDoubleUpdateConstraintsPass]) {
        objc_msgSend(v27((uint64_t)v26, @"_UIViewsNeedingSecondPass"), "addObject:", self);
      }
      if ([(UIView *)self _wantsBaselineUpdatingFollowingConstraintsPass])
      {
        objc_msgSend(v27((uint64_t)v26, @"_UIViewsNeedingBaselineUpdate"), "addObject:", self);
      }
      if ((*(void *)&self->_viewFlags & 0x20000000000000) != 0)
      {
        if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)) {
          objc_msgSend(v27((uint64_t)v26, @"_UIViewsPotentialTAMIC_NOEngineHosts"), "addObject:", self);
        }
      }
    }
  }
}

- (uint64_t)_usesAutoresizingConstraints
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    int result = [(id)result translatesAutoresizingMaskIntoConstraints];
    if (result)
    {
      if ((v1[12] & 0x400000000000000) != 0)
      {
        if (objc_msgSend((id)objc_msgSend(v1, "superview"), "_wantsAutolayout")) {
          return 1;
        }
        else {
          return [v1 _hostsLayoutEngine] ^ 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

- (BOOL)translatesAutoresizingMaskIntoConstraints
{
  return (*(void *)&self->_viewFlags & 0x20000000000000) == 0;
}

- (void)_recursiveUpdateConstraintsIfNeededCollectingViews:(id)a3 forSecondPass:(BOOL)a4
{
  BOOL v4 = a4;
  if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    uint64_t v9 = __100__UIView_AdditionalLayoutSupport___recursiveUpdateConstraintsIfNeededCollectingViews_forSecondPass___block_invoke;
    uint64_t v10 = &unk_1E52F28C0;
    int v11 = self;
    id v12 = a3;
    BOOL v13 = v4;
    if (self)
    {
      uint64_t v7 = [(UIView *)self _layoutEngine];
      if (v7) {
        [(NSISEngine *)v7 withAutomaticOptimizationDisabled:v8];
      }
      else {
        v9((uint64_t)v8);
      }
    }
  }
  else
  {
    [(UIView *)self _updateConstraintsIfNeededCollectingViews:a3 forSecondPass:v4];
  }
}

- (BOOL)_wantsBaselineUpdatingFollowingConstraintsPass
{
  return 0;
}

- (void)_sendUpdateConstraintsIfNecessaryForSecondPass:(BOOL)a3
{
  if ((*(void *)&self->_viewFlags & 0x100000000000) == 0
    || [(UIView *)self _needsDoubleUpdateConstraintsPass])
  {
    if (!a3 && [(UIView *)self _needsDoubleUpdateConstraintsPass]) {
      [(UIView *)self _resetToBeginningOfDoublePass];
    }
    int v5 = self->_viewDelegate;
    *((void *)&self->_viewFlags + 1) |= 4uLL;
    os_variant_has_internal_diagnostics();
    char v6 = +[UITraitCollection _currentTraitCollectionIfExists]();
    +[UITraitCollection setCurrentTraitCollection:[(UIView *)self traitCollection]];
    uint64_t v7 = (void *)_UISetCurrentFallbackEnvironment(self);
    memset(__src, 0, sizeof(__src));
    _UIBeginTrackingTraitUsage(self, v5, __src);
    int v8 = _UIObservationTrackingEnabled();
    if (v5)
    {
      if (v8) {
        [(UIViewController *)v5 _updateViewConstraintsWithObservationTracking];
      }
      else {
        [(UIViewController *)v5 updateViewConstraints];
      }
    }
    else if (v8)
    {
      [(UIView *)self _updateConstraintsWithObservationTracking];
    }
    else
    {
      [(UIView *)self updateConstraints];
    }
    memcpy(__dst, __src, sizeof(__dst));
    uint64_t v9 = (char *)GetTraitCollectionTSD() + 16;
    memcpy(v13, v9, sizeof(v13));
    memcpy(v9, __dst, 0x160uLL);
    -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:](self, (uint64_t)&v13[136], [(UIView *)self methodForSelector:sel_updateConstraints], sel__setNeedsUpdateConstraints);
    -[UIViewController _recordTraitUsage:insideMethod:withInvalidationAction:](v5, (uint64_t)&v13[312], [(UIViewController *)v5 methodForSelector:sel_updateViewConstraints], sel__invalidateViewConstraints);
    _UITraitUsageTrackingResultDestroy((uint64_t)v13);
    _UIRestorePreviousFallbackEnvironment(v7);
    +[UITraitCollection setCurrentTraitCollection:v6];
    if ((*((void *)&self->_viewFlags + 1) & 0x2000) == 0
      && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)
      && ![(UIView *)self _layoutEngineHostConstraints])
    {
      [(UIView *)self _updateLayoutEngineHostConstraints];
    }
    uint64_t viewFlags = (uint64_t)self->_viewFlags;
    *((void *)&self->_viewFlags + 1) &= ~4uLL;
    if ((viewFlags & 0x100000000000) == 0)
    {
      uint64_t v11 = *MEMORY[0x1E4F1C3B8];
      if (v5) {
        [MEMORY[0x1E4F1CA00] raise:v11, @"The layout constraints still need update after sending -updateViewConstraints to %@.\n%@ or one of its superclasses may have overridden -updateViewConstraints without calling super or sending -updateConstraints to the view. Or, something may have dirtied layout constraints in the middle of updating them.  Both are programming errors.", v5, objc_opt_class() format];
      }
      else {
        [MEMORY[0x1E4F1CA00] raise:v11, @"The layout constraints still need update after sending -updateConstraints to %@.\n%@ or one of its superclasses may have overridden -updateConstraints without calling super. Or, something may have dirtied layout constraints in the middle of updating them.  Both are programming errors.", self, objc_opt_class() format];
      }
    }
  }
}

- (void)_updateSystemConstraints
{
  [(UIView *)self _applyPendingTraitStorageConstraints];
  [(UIView *)self _handleDoubleUpdateConstraintsIfNecessary];
  if ((*((void *)&self->_viewFlags + 1) & 0x2000) == 0) {
    [(UIView *)self _handleLayoutEngineHostingConstraintsIfNecessary];
  }
  [(UIView *)self _handleLayoutArrangementConstraintsIfNecessary];
  uint64_t v3 = *((void *)&self->_viewFlags + 1);
  if ((v3 & 0x2000) != 0)
  {
    uint64_t viewFlags = (uint64_t)self->_viewFlags;
  }
  else
  {
    [(UIView *)self _handleSizeConstraintsAsAppropriate];
    uint64_t viewFlags = (uint64_t)self->_viewFlags;
    uint64_t v3 = *((void *)&self->_viewFlags + 1);
  }
  int v5 = *((_DWORD *)&self->_viewFlags + 4);
  *(void *)&self->_uint64_t viewFlags = viewFlags | 0x100000000000;
  *((void *)&self->_viewFlags + 1) = v3;
  *((_DWORD *)&self->_viewFlags + 4) = v5;
}

- (void)_handleLayoutArrangementConstraintsIfNecessary
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = [(UIView *)self _mutableLayoutArrangements];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v3 = [(NSMutableArray *)v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * v6++) _updateArrangementConstraints];
      }
      while (v4 != v6);
      uint64_t v4 = [(NSMutableArray *)v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

- (void)_handleDoubleUpdateConstraintsIfNecessary
{
  if ([(UIView *)self _needsDoubleUpdateConstraintsPass]
    && [(UIView *)self _hasLayoutEngine])
  {
    if ((*(void *)&self->_viewFlags & 0xC000000000000) == 0)
    {
      [(UIView *)self _prepareForFirstIntrinsicContentSizeCalculation];
LABEL_11:
      *(void *)&self->_viewFlags &= ~0x400000000000uLL;
      return;
    }
    int v3 = -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self);
    uint64_t v4 = self;
    if (v3) {
      uint64_t v4 = [(UIView *)self superview];
    }
    [(UIView *)self _prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:[(UIView *)self _nsis_compatibleBoundsInEngine:[(UIView *)v4 _layoutEngine]]];
    [(UIView *)self _preferredMaxLayoutWidth];
    if (v5 > 0.0)
    {
      objc_msgSend((id)objc_msgSend((id)-[NSISEngine delegate](-[UIView _layoutEngine](self, "_layoutEngine"), "delegate"), "_engineHostingWidthConstraint"), "constant");
      if (v6 <= 0.0) {
        double v6 = -1.0;
      }
      [(UIView *)self _setMultilineContextWidth:v6];
      goto LABEL_11;
    }
    [(UIView *)self _setMultilineContextWidth:-1.0];
  }
}

- (void)_applyPendingTraitStorageConstraints
{
  p_uint64_t viewFlags = &self->_viewFlags;
  if ((*((unsigned char *)&self->_viewFlags + 22) & 0x10) != 0)
  {
    objc_getAssociatedObject(self, &unk_1EB25C09D);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v4 = objc_getAssociatedObject(self, &unk_1EB25C09E);
    objc_setAssociatedObject(self, &unk_1EB25C09D, 0, (void *)1);
    objc_setAssociatedObject(self, &unk_1EB25C09E, 0, (void *)1);
    *(void *)((char *)p_viewFlags + 20) &= ~0x100000uLL;
    -[UIView _applyTraitStorageConstraintsByRemoving:adding:](self, (uint64_t)v4, v5);
  }
}

void *__57__UIView_AdditionalLayoutSupport___switchToLayoutEngine___block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    [*(id *)(a1 + 40) _stopObservingVariablesOnlyToSupportTAMICChange:0];
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    unint64_t v2 = *(void **)(a1 + 48);
    uint64_t v3 = [v2 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v21 != v5) {
            objc_enumerationMutation(v2);
          }
          [*(id *)(*((void *)&v20 + 1) + 8 * i) _removeFromEngine:*(void *)(a1 + 32)];
        }
        uint64_t v4 = [v2 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v4);
    }
    long long v7 = (void *)[*(id *)(a1 + 32) delegate];
    if (v7 == *(void **)(a1 + 40))
    {
      [v7 _setViewsJostledDuringUpdateConstraintsPass:0];
      [*(id *)(a1 + 32) setDelegate:0];
    }
  }
  [*(id *)(a1 + 40) _setLayoutEngine:*(void *)(a1 + 56)];
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 56), "delegate"), "_createJostledViewsIfNecessary");
  long long v8 = *(void **)(a1 + 40);
  if (*(void *)(a1 + 32)) {
    [v8 _clearLayoutVariableObservationsOnlyToSupportTAMICChange:0];
  }
  else {
    v8[13] |= 0x400uLL;
  }
  if (*(void *)(a1 + 56))
  {
    [*(id *)(a1 + 40) _startObservingVariablesOnlyToSupportTAMICChange:0];
    uint64_t v9 = [*(id *)(a1 + 56) delegate];
    if (v9)
    {
      uint64_t v10 = v9;
      if ([*(id *)(a1 + 40) _isUnsatisfiableConstraintsLoggingSuspended])
      {
        *(_WORD *)(v10 + 124) += *(_WORD *)(*(void *)(a1 + 40) + 124);
        *(_WORD *)(*(void *)(a1 + 40) + 124) = 0;
        [*(id *)(a1 + 40) _mergeConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedToAncestor:v10];
      }
    }
  }
  int result = *(void **)(a1 + 40);
  uint64_t v13 = MEMORY[0x1E4F143A8];
  uint64_t v14 = 3221225472;
  uint64_t v15 = __57__UIView_AdditionalLayoutSupport___switchToLayoutEngine___block_invoke_2;
  double v16 = &unk_1E52EEB90;
  id v17 = result;
  int8x16_t v18 = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
  uint64_t v19 = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v12 = objc_msgSend(result, "_layoutEngine", v13, v14);
    if (v12) {
      return (void *)[v12 withAutomaticOptimizationDisabled:&v13];
    }
    else {
      return (void *)v15((uint64_t)&v13);
    }
  }
  return result;
}

- (void)_updateTraitsIfNeededWithBehavior:(uint64_t)a1
{
  if (a1)
  {
    id v4 = *(id *)(a1 + 88);
    uint64_t v5 = v4;
    if (v4) {
      -[UIViewController _updateTraitsIfNecessarySchedulingPropagation:]((uint64_t)v4, 0);
    }
    if (os_variant_has_internal_diagnostics())
    {
      if (a2 == 3)
      {
        long long v7 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)CGAffineTransform buf = 0;
          _os_log_fault_impl(&dword_1853B0000, v7, OS_LOG_TYPE_FAULT, "This method should never be called with this behavior", buf, 2u);
        }
      }
    }
    else if (a2 == 3)
    {
      long long v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_updateTraitsIfNeededWithBehavior____s_category) + 8);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "This method should never be called with this behavior", v9, 2u);
      }
    }
    if (a2 == 2 || (*(void *)(a1 + 104) & 0x800000000000) != 0)
    {
      double v6 = [(id)a1 _lastNotifiedTraitCollection];
      -[UIView _updateTraitCollectionAndProcessChangesWithBehavior:previousCollection:]((void *)a1, a2, v6);
    }
  }
}

- (void)_updateTraitCollectionAndProcessChangesWithBehavior:(void *)a3 previousCollection:
{
  if (a1)
  {
    if (qword_1EB25C330 != -1) {
      dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
    }
    if (byte_1EB25C0B5) {
      -[UIView _updateCachedTraitCollectionIfNeeded]((uint64_t)a1);
    }
    id v6 = [a1 traitCollection];
    -[UIView _processChangesFromOldTraits:toCurrentTraits:withBehavior:](a1, a3, v6, a2);
  }
}

- (void)_processChangesFromOldTraits:(void *)a3 toCurrentTraits:(uint64_t)a4 withBehavior:
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    _UICreateTraitCollectionChangeDescription((uint64_t)v7, v8, (uint64_t)&v15);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    long long v10 = v15;
    long long v11 = v16;
    long long v12 = v17;
    void v9[2] = __68__UIView__processChangesFromOldTraits_toCurrentTraits_withBehavior___block_invoke;
    v9[3] = &unk_1E530FD28;
    v9[4] = a1;
    long long v13 = v18;
    uint64_t v14 = a4;
    [a1 _withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:v9];
    if ((void)v16) {
  }
    }
}

- (void)_withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = [(NSISEngine *)[(UIView *)self _layoutEngine] delegate];
  if (v5)
  {
    ++*(_WORD *)(v5 + 124);
    (*((void (**)(id))a3 + 2))(a3);
    uint64_t v6 = [(NSISEngine *)[(UIView *)self _layoutEngine] delegate];
    if (os_variant_has_internal_diagnostics())
    {
      if (v6) {
        goto LABEL_4;
      }
      long long v16 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CGAffineTransform buf = 138412290;
        long long v26 = self;
        _os_log_fault_impl(&dword_1853B0000, v16, OS_LOG_TYPE_FAULT, "Unexpected disappearance of layout engine while unsatisfiable constraints logging was suspended. self = %@", buf, 0xCu);
      }
    }
    else
    {
      if (v6)
      {
LABEL_4:
        if (!*(_WORD *)(v6 + 124))
        {
          if (os_variant_has_internal_diagnostics())
          {
            uint64_t v19 = __UIFaultDebugAssertLog();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)CGAffineTransform buf = 138412290;
              long long v26 = (UIView *)v6;
              _os_log_fault_impl(&dword_1853B0000, v19, OS_LOG_TYPE_FAULT, "Trying to decrement _unsatisfiableConstraintsLoggingSuspensionCount when it's already 0. We lost count one way or another, or else we had a stack recursion. self = %@", buf, 0xCu);
            }
          }
          else
          {
            long long v18 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25A688) + 8);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CGAffineTransform buf = 138412290;
              long long v26 = (UIView *)v6;
              _os_log_impl(&dword_1853B0000, v18, OS_LOG_TYPE_ERROR, "Trying to decrement _unsatisfiableConstraintsLoggingSuspensionCount when it's already 0. We lost count one way or another, or else we had a stack recursion. self = %@", buf, 0xCu);
            }
          }
        }
        if (*(_WORD *)(v6 + 124)) {
          --*(_WORD *)(v6 + 124);
        }
        if (([(id)v6 _isUnsatisfiableConstraintsLoggingSuspended] & 1) == 0)
        {
          if ((*(void *)(v6 + 104) & 0x10) != 0 && (void *)v6 == -[UIView _outermostLayoutEngineDelegateView](self)) {
            *(void *)(v6 + 104) &= ~0x10uLL;
          }
          id v7 = objc_msgSend((id)objc_msgSend((id)v6, "_constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:", 0), "allObjects");
          if ([v7 count])
          {
            id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
            long long v20 = 0u;
            long long v21 = 0u;
            long long v22 = 0u;
            long long v23 = 0u;
            uint64_t v9 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
            if (v9)
            {
              uint64_t v10 = v9;
              uint64_t v11 = *(void *)v21;
              do
              {
                for (uint64_t i = 0; i != v10; ++i)
                {
                  if (*(void *)v21 != v11) {
                    objc_enumerationMutation(v7);
                  }
                  long long v13 = *(void **)(*((void *)&v20 + 1) + 8 * i);
                  if ([v13 isActive]) {
                    [v8 addObject:v13];
                  }
                }
                uint64_t v10 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
              }
              while (v10);
            }
            if ([v8 count])
            {
              p_uint64_t viewFlags = &self->_viewFlags;
              *((void *)p_viewFlags + 1) |= 8uLL;
              [MEMORY[0x1E4F5B268] deactivateConstraints:v8];
              [MEMORY[0x1E4F5B268] activateConstraints:v8];
              *((void *)p_viewFlags + 1) &= ~8uLL;
            }
          }
          [(id)v6 _clearConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspended];
        }
        return;
      }
      long long v17 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25A690) + 8);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGAffineTransform buf = 138412290;
        long long v26 = self;
        _os_log_impl(&dword_1853B0000, v17, OS_LOG_TYPE_ERROR, "Unexpected disappearance of layout engine while unsatisfiable constraints logging was suspended. self = %@", buf, 0xCu);
      }
    }
  }
  else
  {
    long long v15 = (void (*)(id))*((void *)a3 + 2);
    v15(a3);
  }
}

void __68__UIView__processChangesFromOldTraits_toCurrentTraits_withBehavior___block_invoke(uint64_t a1)
{
}

- (BOOL)_isUnsatisfiableConstraintsLoggingSuspended
{
  return self->_unsatisfiableConstraintsLoggingSuspensionCount != 0;
}

- (void)_nsis_center:(double *)a3 bounds:(void *)a4 inEngine:(void *)a5 forLayoutGuide:
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v10 = (void *)[a4 delegate];
    if ((dyld_program_sdk_at_least() & 1) == 0
      && (!v10 || ([v10 _forceLayoutEngineSolutionInRationalEdges] & 1) == 0))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__nsis_center_bounds_inEngine_forLayoutGuide_, a1, @"NSLayoutConstraint_UIKitAdditions.m", 3730, @"Error in compatibility flow");
    }
    if (os_variant_has_internal_diagnostics())
    {
      if (!a4)
      {
        long long v64 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)CGAffineTransform buf = 138412290;
          int v77 = a1;
          _os_log_fault_impl(&dword_1853B0000, v64, OS_LOG_TYPE_FAULT, "Attempting to get auto layout values with nil engine. Affected view: %@", buf, 0xCu);
        }
      }
    }
    else if (!a4)
    {
      long long v65 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25A678) + 8);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGAffineTransform buf = 138412290;
        int v77 = a1;
        _os_log_impl(&dword_1853B0000, v65, OS_LOG_TYPE_ERROR, "Attempting to get auto layout values with nil engine. Affected view: %@", buf, 0xCu);
      }
    }
    if (a5) {
      uint64_t v11 = a5;
    }
    else {
      uint64_t v11 = a1;
    }
    [a1 _currentScreenScale];
    double v74 = 0.0;
    double v75 = 0.0;
    double v72 = v12;
    double v13 = 360.0 / v12;
    int v14 = objc_msgSend(a4, "hasValue:forVariable:", &v75, objc_msgSend(v11, "nsli_minXVariable"));
    int v15 = objc_msgSend(a4, "hasValue:forVariable:", &v74, objc_msgSend(v11, "nsli_minYVariable"));
    double v71 = v13;
    if (v13 <= 1.0) {
      double v16 = v13;
    }
    else {
      double v16 = 1.0;
    }
    objc_msgSend(a4, "valueForVariable:", objc_msgSend(v11, "nsli_boundsWidthVariable"));
    double v18 = v17;
    objc_msgSend(a4, "valueForVariable:", objc_msgSend(v11, "nsli_boundsHeightVariable"));
    double v20 = v19;
    if (a2
      && (![a4 delegate]
       || (*(void *)([a4 delegate] + 104) & 0x1000) != 0
       || objc_msgSend((id)objc_msgSend(a4, "delegate"), "_layoutEngine") != a4))
    {
      if (os_variant_has_internal_diagnostics())
      {
        char v66 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)CGAffineTransform buf = 138412290;
          int v77 = a1;
          _os_log_fault_impl(&dword_1853B0000, v66, OS_LOG_TYPE_FAULT, "frame.origin may be incorrect for %@ in an engine that is separate from the usual layout engine.", buf, 0xCu);
        }
      }
      else
      {
        long long v21 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25A680) + 8);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CGAffineTransform buf = 138412290;
          int v77 = a1;
          _os_log_impl(&dword_1853B0000, v21, OS_LOG_TYPE_ERROR, "frame.origin may be incorrect for %@ in an engine that is separate from the usual layout engine.", buf, 0xCu);
        }
      }
    }
    double v22 = v18 / v16;
    long long v23 = a1;
    double v24 = v20 / v16;
    if (!a5) {
      long long v23 = (void *)[a1 superview];
    }
    double v25 = round(v22);
    double v26 = round(v24);
    double v27 = *MEMORY[0x1E4F1DAD8];
    double v28 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    uint64_t v29 = [v23 _layoutEngine];
    long long v30 = (void *)v29;
    double v31 = v28;
    double v32 = v27;
    if (a2)
    {
      double v31 = v28;
      double v32 = v27;
      if (v23)
      {
        double v31 = v28;
        double v32 = v27;
        if ((void *)v29 == a4)
        {
          -[_UIViewLayoutEngineRelativeAlignmentRectOriginCache origin](-[UIView _alignmentRectOriginCacheCreateIfNecessary:](v23, 1), "origin");
          double v32 = v33;
          double v31 = v34;
        }
      }
    }
    double v35 = v16 * v25;
    double v36 = v16 * v26;
    double v67 = v28;
    double v68 = v27;
    double v70 = v31;
    if (a5 || (void *)[a1 _layoutEngine] != a4 && v30 == a4)
    {
      double v27 = v32 + v75;
      double v37 = v31 + v74;
    }
    else
    {
      double v37 = v28;
      if (a2)
      {
        -[_UIViewLayoutEngineRelativeAlignmentRectOriginCache origin](-[UIView _alignmentRectOriginCacheCreateIfNecessary:](a1, 1), "origin");
        double v27 = v62;
        double v37 = v63;
      }
    }
    v79.origin.double x = v27;
    v79.origin.double y = v37;
    v79.size.double width = v35;
    v79.size.double height = v36;
    double v73 = round(CGRectGetMinX(v79) / v71) / v72;
    v80.origin.double x = v27;
    v80.origin.double y = v37;
    v80.size.double width = v35;
    v80.size.double height = v36;
    double v38 = round(CGRectGetMinY(v80) / v71) / v72;
    v81.origin.double x = v27;
    v81.origin.double y = v37;
    v81.size.double width = v35;
    v81.size.double height = v36;
    double v39 = round(CGRectGetMaxX(v81) / v71) / v72;
    v82.origin.double x = v27;
    v82.origin.double y = v37;
    v82.size.double width = v35;
    v82.size.double height = v36;
    CGFloat MaxY = CGRectGetMaxY(v82);
    double v69 = UISizeRoundToScale(v39 - v73, round(MaxY / v71) / v72 - v38, v72);
    double v42 = v41;
    [v23 alignmentRectInsets];
    double v44 = v73 - round(v32 / v71) / v72 + v43;
    double v46 = v38 - round(v70 / v71) / v72 + v45;
    if ((dyld_program_sdk_at_least() & 1) == 0 && (v14 & v15 & 1) == 0)
    {
      double v47 = -round(v27 / v71) / v72;
      double v48 = -round(v37 / v71) / v72;
      if (!v14) {
        double v44 = v47;
      }
      if (!v15) {
        double v46 = v48;
      }
    }
    double v49 = v69;
    if (!a5)
    {
      [a1 alignmentRectInsets];
      double v44 = v44 - v52;
      double v46 = v46 - v53;
      double v49 = v69 - (-v51 - v52);
      double v42 = v42 - (-v50 - v53);
    }
    if (a2)
    {
      v83.origin.double x = v44;
      v83.origin.double y = v46;
      v83.size.double width = v49;
      v83.size.double height = v42;
      double MidX = CGRectGetMidX(v83);
      v84.origin.double x = v44;
      v84.origin.double y = v46;
      v84.size.double width = v49;
      v84.size.double height = v42;
      double MidY = CGRectGetMidY(v84);
      if (!a5 && [v23 _supportsContentDimensionVariables])
      {
        objc_msgSend(v23, "_offsetForCenterOfPossibleZoomView:withIncomingBoundsSize:", a1, v49, v42);
        double MidX = MidX + v56;
        double MidY = MidY + v57;
      }
      *a2 = MidX;
      a2[1] = MidY;
    }
    if (a3)
    {
      if (!a5)
      {
        [a1 bounds];
        double v67 = v59;
        double v68 = v58;
      }
      v85.origin.double x = v44;
      v85.origin.double y = v46;
      v85.size.double width = v49;
      v85.size.double height = v42;
      CGFloat Width = CGRectGetWidth(v85);
      v86.origin.double x = v44;
      v86.origin.double y = v46;
      v86.size.double width = v49;
      v86.size.double height = v42;
      CGFloat Height = CGRectGetHeight(v86);
      *a3 = v68;
      a3[1] = v67;
      a3[2] = Width;
      a3[3] = Height;
    }
  }
}

- (UIEdgeInsets)alignmentRectInsets
{
  double v2 = 0.0;
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

- (_UIViewLayoutEngineRelativeAlignmentRectOriginCache)_alignmentRectOriginCacheCreateIfNecessary:(void *)a1
{
  if (a1)
  {
    double v4 = [a1 _alignmentRectOriginCache];
    if (!v4 && a2)
    {
      double v4 = [[_UIViewLayoutEngineRelativeAlignmentRectOriginCache alloc] initWithDelegate:a1];
      [a1 _setAlignmentRectOriginCache:v4];
    }
  }
  else
  {
    double v4 = 0;
  }
  return v4;
}

- (_UIViewLayoutEngineRelativeAlignmentRectOriginCache)_alignmentRectOriginCache
{
  return self->__alignmentRectOriginCache;
}

- (double)_preferredLayoutEngineToUserScalingCoefficients
{
  if (!a1) {
    return 0.0;
  }
  double v2 = a1;
  if (([a1 _canBecomeLayoutEngineDelegate] & 1) == 0) {
    double v2 = objc_msgSend((id)objc_msgSend(a1, "_layoutEngine"), "delegate");
  }
  double v3 = 0.00277777778;
  if ((dyld_program_sdk_at_least() & 1) == 0
    && (!v2 || ([v2 _forceLayoutEngineSolutionInRationalEdges] & 1) == 0))
  {
    if (objc_opt_respondsToSelector()) {
      double v4 = a1;
    }
    else {
      double v4 = (void *)[a1 window];
    }
    double v5 = (UIScreen *)[v4 screen];
    if (!v5) {
      double v5 = +[UIScreen mainScreen];
    }
    [(UIScreen *)v5 scale];
    return 1.0 / v6;
  }
  return v3;
}

- (id)_constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:(BOOL)a3
{
  BOOL v3 = a3;
  id AssociatedObject = objc_getAssociatedObject(self, &__constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedKey);
  if (AssociatedObject) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = !v3;
  }
  if (!v6)
  {
    id AssociatedObject = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    objc_setAssociatedObject(self, &__constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedKey, AssociatedObject, (void *)1);
  }
  return AssociatedObject;
}

- (void)_clearConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspended
{
}

- (void)_setLayoutEngine:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  double v5 = (NSISEngine *)a3;
  if (self->_layoutEngine != v5)
  {
    objc_storeStrong((id *)&self->_layoutEngine, a3);
    if (self->_layoutEngine)
    {
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      BOOL v6 = [(UIView *)self layoutGuides];
      uint64_t v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)v12;
        do
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v12 != v9) {
              objc_enumerationMutation(v6);
            }
            [*(id *)(*((void *)&v11 + 1) + 8 * i) _invalidateLayoutFrame];
          }
          uint64_t v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
        }
        while (v8);
      }
    }
  }
}

- (void)_createJostledViewsIfNecessary
{
  if ((*((void *)&self->_viewFlags + 1) & 0x20) != 0
    && ![(UIView *)self _viewsJostledDuringUpdateConstraintsPassSuppressingDebugAssertion:1])
  {
    uint64_t v3 = [MEMORY[0x1E4F1CA80] set];
    [(UIView *)self _setViewsJostledDuringUpdateConstraintsPass:v3];
  }
}

- (id)_previousFittingSizeInfo
{
  return objc_getAssociatedObject(self, &_UIViewFittingSizeInfo);
}

uint64_t __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x1E4F143A8];
  uint64_t v4 = 3221225472;
  double v5 = __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_2;
  BOOL v6 = &unk_1E52EBA80;
  long long v7 = *(_OWORD *)(a1 + 32);
  uint64_t result = v7;
  if ((void)v7)
  {
    double v2 = objc_msgSend((id)v7, "_layoutEngine", v3, v4);
    if (v2) {
      return [v2 withAutomaticOptimizationDisabled:&v3];
    }
    else {
      return v5((uint64_t)&v3);
    }
  }
  return result;
}

uint64_t __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateConstraintsIfNeededCollectingViews:*(void *)(a1 + 40) forSecondPass:0];
}

- (void)_setAlignmentRectOriginCache:(id)a3
{
}

uint64_t __100__UIView_AdditionalLayoutSupport___recursiveUpdateConstraintsIfNeededCollectingViews_forSecondPass___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateConstraintsIfNeededCollectingViews:*(void *)(a1 + 40) forSecondPass:*(unsigned __int8 *)(a1 + 48)];
}

- (BOOL)_hasLayoutEngine
{
  return [(UIView *)self _layoutEngine] != 0;
}

- (void)_updateAutoresizingConstraints
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result[13] & 0x1000) == 0)
    {
      uint64_t result = (void *)-[UIView _autoresizingConstraints](result);
      if (!result)
      {
        uint64_t v2 = [v1 superview];
        uint64_t v3 = (void *)v2;
        if (v2)
        {
          uint64_t v4 = *(void *)(v2 + 104);
          unsigned int v5 = (v4 >> 1) & 1;
          *(void *)(v2 + 104) = v4 | 2;
        }
        else
        {
          LOBYTE(v5) = 0;
        }
        BOOL v6 = -[UIView _constraintsEquivalentToAutoresizingMask](v1);
        -[UIView _setAutoresizingConstraints:](v1, v6);
        uint64_t result = (void *)[v6 count];
        if (result) {
          uint64_t result = (void *)[v3 _setWantsAutolayout];
        }
        if (v3) {
          v3[13] = v3[13] & 0xFFFFFFFFFFFFFFFDLL | (2 * (v5 & 1));
        }
      }
    }
  }
  return result;
}

id __91__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededCollectingViews_forSecondPass___block_invoke(uint64_t a1, uint64_t a2)
{
  id v4 = (id)[*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  if (!v4)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:a2];
  }
  return v4;
}

- (id)_engineHostingWidthConstraint
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)) {
    return 0;
  }
  uint64_t v3 = objc_msgSend(-[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints"), "firstObject");
  id v4 = v3;
  if (!v3
    || (objc_msgSend((id)objc_msgSend(v3, "identifier"), "isEqualToString:", @"UIView-Encapsulated-Layout-Width") & 1) != 0)
  {
    return v4;
  }
  if (os_variant_has_internal_diagnostics())
  {
    long long v12 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_fault_impl(&dword_1853B0000, v12, OS_LOG_TYPE_FAULT, "Internal UIKit Bug: did not find engine host width constraint where expected", buf, 2u);
    }
  }
  else
  {
    unsigned int v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_engineHostingWidthConstraint___s_category) + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "Internal UIKit Bug: did not find engine host width constraint where expected", buf, 2u);
    }
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v6 = [(UIView *)self _layoutEngineHostConstraints];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v18 count:16];
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)v14;
LABEL_9:
  uint64_t v10 = 0;
  while (1)
  {
    if (*(void *)v14 != v9) {
      objc_enumerationMutation(v6);
    }
    id v4 = *(void **)(*((void *)&v13 + 1) + 8 * v10);
    if (objc_msgSend((id)objc_msgSend(v4, "identifier"), "isEqualToString:", @"UIView-Encapsulated-Layout-Width"))return v4; {
    if (v8 == ++v10)
    }
    {
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v18 count:16];
      id v4 = 0;
      if (v8) {
        goto LABEL_9;
      }
      return v4;
    }
  }
}

- (void)_setMultilineContextWidth:(double)a3
{
  id v4 = (void *)[NSNumber numberWithDouble:a3];
  objc_setAssociatedObject(self, &_UIViewMultilineContextWidth, v4, (void *)1);
}

- (void)_mergeConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedToAncestor:(id)a3
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (os_variant_has_internal_diagnostics())
  {
    if (a3) {
      goto LABEL_3;
    }
    id v6 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      int v8 = 138412290;
      uint64_t v9 = self;
      _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Unexpected nil ancestor for merging broken constraints information. self = %@", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    if (a3)
    {
LABEL_3:
      if (self) {
        unsigned int v5 = objc_msgSend(-[UIView _constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:](self, "_constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:", 0), "allObjects");
      }
      else {
        unsigned int v5 = 0;
      }
      if ([v5 count]) {
        objc_msgSend((id)objc_msgSend(a3, "_constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:", 1), "addObjectsFromArray:", v5);
      }
      goto LABEL_7;
    }
    uint64_t v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_mergeConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedToAncestor____s_category)+ 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138412290;
      uint64_t v9 = self;
      _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "Unexpected nil ancestor for merging broken constraints information. self = %@", (uint8_t *)&v8, 0xCu);
    }
  }
LABEL_7:
  [(UIView *)self _clearConstraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspended];
}

- (id)nsli_layoutAnchorForAttribute:(int64_t)a3
{
  switch(a3)
  {
    case 1:
      id result = [(UIView *)self leftAnchor];
      break;
    case 2:
      id result = [(UIView *)self rightAnchor];
      break;
    case 3:
      id result = [(UIView *)self topAnchor];
      break;
    case 4:
      id result = [(UIView *)self bottomAnchor];
      break;
    case 5:
      id result = [(UIView *)self leadingAnchor];
      break;
    case 6:
      id result = [(UIView *)self trailingAnchor];
      break;
    case 7:
      id result = [(UIView *)self widthAnchor];
      break;
    case 8:
      id result = [(UIView *)self heightAnchor];
      break;
    case 9:
      id result = [(UIView *)self centerXAnchor];
      break;
    case 10:
      id result = [(UIView *)self centerYAnchor];
      break;
    case 11:
      id result = [(UIView *)self lastBaselineAnchor];
      break;
    case 12:
      id result = [(UIView *)self firstBaselineAnchor];
      break;
    default:
      id result = 0;
      break;
  }
  return result;
}

- (void)setTransform:(CGAffineTransform *)transform
{
  memset(&v9, 0, sizeof(v9));
  [(UIView *)(uint64_t)self _backing_transform3D];
  long long v5 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v7.m11 = *(_OWORD *)&transform->a;
  *(_OWORD *)&v7.m13 = v5;
  *(_OWORD *)&v7.m21 = *(_OWORD *)&transform->tx;
  -[UIView _backing_setTransform:]((uint64_t)self, (long long *)&v7);
  long long v6 = *(_OWORD *)&transform->c;
  *(_OWORD *)&v7.m11 = *(_OWORD *)&transform->a;
  *(_OWORD *)&v7.m13 = v6;
  *(_OWORD *)&v7.m21 = *(_OWORD *)&transform->tx;
  CATransform3DMakeAffineTransform(&a, (CGAffineTransform *)&v7);
  CATransform3D v7 = v9;
  if (!CATransform3DEqualToTransform(&a, &v7))
  {
    CATransform3D v7 = v9;
    -[UIView _didChangeTransformFromPreviousTransform:]((uint64_t)self, &v7);
  }
}

- (double)_backing_transform3D
{
  if (!a1) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(a1 + 168);
  if (!v4 || (id v5 = *(id *)(v4 + 8), (v6 = v5) == 0))
  {
    id v5 = *(id *)(a1 + 160);
    if (v5)
    {
      id v6 = 0;
      goto LABEL_6;
    }
LABEL_9:
    double result = 0.0;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    return result;
  }
LABEL_6:
  id v8 = v6;
  [v5 transform];

  return result;
}

- (void)_backing_setTransform:(uint64_t)a1
{
  if (a1)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    long long v10 = a2[2];
    uint64_t v4 = *(void *)(a1 + 168);
    if (!v4 || (id v5 = *(id *)(v4 + 8), (v6 = v5) == 0))
    {
      id v6 = 0;
      id v5 = *(id *)(a1 + 160);
    }
    v7[0] = v8;
    v7[1] = v9;
    v7[2] = v10;
    [v5 setAffineTransform:v7];
  }
}

- (double)_backing_transform
{
  if (!a1) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(a1 + 168);
  if (!v4 || (id v5 = *(id *)(v4 + 8), (v6 = v5) == 0))
  {
    id v5 = *(id *)(a1 + 160);
    if (v5)
    {
      id v6 = 0;
      goto LABEL_6;
    }
LABEL_9:
    double result = 0.0;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
    return result;
  }
LABEL_6:
  id v8 = v6;
  [v5 affineTransform];

  return result;
}

- (BOOL)_canBeParentTraitEnvironment
{
  return (*((_DWORD *)&self->_viewFlags + 4) & 0x100000) == 0;
}

- (void)_backing_traitCollectionDidChange:(void *)result
{
  if (!result) {
    return result;
  }
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = [result traitCollection];
  uint64_t v5 = [v4 _userInterfaceRenderingMode];
  if (v5 == [a2 _userInterfaceRenderingMode])
  {
    uint64_t v6 = [v4 _vibrancy];
    uint64_t v7 = [a2 _vibrancy];

    if (v6 == v7) {
      goto LABEL_7;
    }
  }
  else
  {
  }
  -[UIView _updateAutomaticCaptureGroupIfNecessary](v3);
LABEL_7:
  uint64_t v8 = *(void *)(v3 + 168);
  if (v8) {
    long long v9 = *(void **)(v8 + 40);
  }
  else {
    long long v9 = 0;
  }
  return (void *)[v9 traitCollectionDidChange:a2];
}

+ (Class)layerClass
{
  return (Class)objc_opt_class();
}

- (void)_setPresentationValue:(id)a3 forKey:(id)a4
{
  if (self) {
    [(UIView *)self __swift_setPresentationValue:a3 velocity:0 preferredFrameRateRangeMaximum:0 immediate:0 key:a4];
  }
}

+ (void)_performWithoutRetargetingAnimations:(id)a3
{
}

- (UIEdgeInsets)_rawLayoutMargins
{
  double top = self->_rawLayoutMargins.top;
  double left = self->_rawLayoutMargins.left;
  double bottom = self->_rawLayoutMargins.bottom;
  double right = self->_rawLayoutMargins.right;
  result.double right = right;
  result.double bottom = bottom;
  result.double left = left;
  result.double top = top;
  return result;
}

- (UIFocusEnvironment)parentFocusEnvironment
{
  if ((*(_DWORD *)&self->_viewFlags & 0x80000000) != 0)
  {
    uint64_t v7 = self->_viewDelegate;
  }
  else
  {
    uint64_t v3 = [(UIView *)self _presentationControllerToNotifyOnLayoutSubviews];
    uint64_t v4 = v3;
    if (v3
      && ([v3 containerView],
          uint64_t v5 = (UIView *)objc_claimAutoreleasedReturnValue(),
          v5,
          v5 == self))
    {
      uint64_t v6 = v4;
    }
    else
    {
      uint64_t v6 = [(UIView *)self superview];
    }
    uint64_t v7 = v6;
  }
  return (UIFocusEnvironment *)v7;
}

void __38__UIView_Geometry__hitTest_withEvent___block_invoke(uint64_t a1, void *a2, unsigned char *a3)
{
  obuint64_t j = objc_loadWeakRetained(&_UIWindowCurrentWindowServerHitTestWindow);
  objc_msgSend(a2, "convertPoint:fromView:", *(void *)(a1 + 32), *(double *)(a1 + 56), *(double *)(a1 + 64));
  uint64_t v6 = objc_msgSend(a2, "_hitTest:withEvent:windowServerHitTestWindow:", *(void *)(a1 + 40), obj);
  objc_storeWeak(&_UIWindowCurrentWindowServerHitTestWindow, obj);
  if (*(unsigned char *)(a1 + 72)) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = [v6 _window];

    if (!v8) {
      _UIViewLogForNotInHierarchyViewHitTestResult(*(void **)(a1 + 32), a2, v6);
    }
    goto LABEL_10;
  }
  if (v6)
  {
LABEL_10:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v6);
    *a3 = 1;
  }
}

- (CGPoint)convertPoint:(CGPoint)point fromView:(UIView *)view
{
  uint64_t v4 = view;
  double y = point.y;
  double x = point.x;
  if (view || (uint64_t v4 = (UIView *)[(UIView *)self window]) != 0)
  {
    uint64_t v8 = [(UIView *)self _window];
    [(UIView *)v4 _window];

    if (v4 != self)
    {
      layer = self->_layer;
      long long v10 = v4->_layer;
      long long v11 = layer;
      -[CALayer convertPoint:fromLayer:](v11, "convertPoint:fromLayer:", v10, x, y);
      double x = v12;
      double y = v13;
    }
  }
  double v14 = x;
  double v15 = y;
  result.double y = v15;
  result.double x = v14;
  return result;
}

- (id)_hitTest:(CGPoint)a3 withEvent:(id)a4 windowServerHitTestWindow:(id)a5
{
  double y = a3.y;
  double x = a3.x;
  id v9 = a4;
  objc_storeWeak(&_UIWindowCurrentWindowServerHitTestWindow, a5);
  long long v10 = -[UIView hitTest:withEvent:](self, "hitTest:withEvent:", v9, x, y);

  return v10;
}

- (void)setBounds:(CGRect)bounds
{
  double height = bounds.size.height;
  double width = bounds.size.width;
  double y = bounds.origin.y;
  double x = bounds.origin.x;
  [(UIView *)self bounds];
  double v11 = v8;
  double v12 = v9;
  double v13 = v10;
  double v15 = v14;
  BOOL v16 = height == v14 && width == v10;
  BOOL v17 = y != v9 || x != v8;
  BOOL v18 = [(UIView *)self _shouldInvalidateBaselineConstraintsForSize:width oldSize:height];
  if (v16 && !v17) {
    return;
  }
  BOOL v19 = (*(void *)&self->_viewFlags & 0x13000000) == 0x1000000 && v17;
  BOOL v33 = v19;
  BOOL v20 = -[UIView _willForceLayoutForBoundsChangeToNewBounds:]((BOOL)self, x, y, width, height);
  uint64_t v21 = [(UIView *)self superview];
  uint64_t v22 = v21;
  if (v21) {
    int v23 = [*(id *)(v21 + 160) needsLayout];
  }
  else {
    int v23 = 0;
  }
  double v24 = +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger];
  objc_msgSend(v24, "willSendSetBounds:toLayerOfView:", self, x, y, width, height);

  -[UIView _backing_setBounds:]((uint64_t)self, x, y, width, height);
  char v25 = !v20;
  if (!v22) {
    char v25 = 1;
  }
  if ((v25 & 1) != 0 || (*(void *)(v22 + 96) & 0x1000000000000000) == 0)
  {
    int v26 = 0;
    if (v22 && v23 != 1) {
      int v26 = [*(id *)(v22 + 160) needsLayout];
    }
    -[UIView _synchronizeAutoLayoutWithCALayoutIfNecessaryForOldBounds:updateSuperview:]((uint64_t)self, v26, v11, v12, v13, v15);
  }
  if (!((*(void *)&self->_viewFlags >> 17) & 1 | v16)) {
    -[UIView resizeSubviewsWithOldSize:](self, "resizeSubviewsWithOldSize:", v13, v15);
  }
  if (((-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self) ^ 1 | v16) & 1) == 0
    && (*(void *)&self->_viewFlags & 0x300000000000000) == 0
    && [(UIView *)self translatesAutoresizingMaskIntoConstraints])
  {
    -[UIView _constraints_frameDidChange]((uint64_t)self);
  }
  if (v18)
  {
    [(UIView *)self _invalidateBaselineConstraints];
    if (v16)
    {
LABEL_31:
      if (!v20) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
  }
  else if (v16)
  {
    goto LABEL_31;
  }
  [(UIView *)self _notifyReferenceViewSizeChange];
  if (v20) {
LABEL_32:
  }
    [(UIView *)self layoutBelowIfNeeded];
LABEL_33:
  if (v33) {
    [(UIView *)self setNeedsDisplay];
  }
  if ((*((void *)&self->_viewFlags + 1) & 0x1000000) != 0)
  {
    double v27 = [(UIView *)self _backdropMaskViewForGrayscaleTint];
    objc_msgSend(v27, "setBounds:", x, y, width, height);

    double v28 = [(UIView *)self _backdropMaskViewForColorTint];
    objc_msgSend(v28, "setBounds:", x, y, width, height);

    uint64_t v29 = -[UIView _backdropMaskViewForColorBurnTint](self);
    objc_msgSend(v29, "setBounds:", x, y, width, height);

    long long v30 = -[UIView _backdropMaskViewForDarkeningTint](self);
    objc_msgSend(v30, "setBounds:", x, y, width, height);

    double v31 = [(UIView *)self _backdropMaskViewForFilters];
    objc_msgSend(v31, "setBounds:", x, y, width, height);
  }
  if (!v17 && v16
    || !(*((_DWORD *)&self->_viewFlags + 4) & 0x3C | *((void *)&self->_viewFlags + 1) & 0x8000000000000000))
  {
    goto LABEL_49;
  }
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v34 = 0u;
  if (v17)
  {
    *(void *)&long long v34 = 4;
    *((double *)&v35 + 1) = v11;
    *(double *)&long long v36 = v12;
    uint64_t v32 = 12;
    if (v16) {
      goto LABEL_48;
    }
LABEL_46:
    *(void *)&long long v34 = v32;
    *((double *)&v36 + 1) = v13;
    *(double *)&long long v37 = v15;
    if ([(UIView *)self _shouldNotifyGeometryObserversForBaselineChanges])
    {
      *(void *)&long long v34 = v32 | 0x800;
    }
    goto LABEL_48;
  }
  uint64_t v32 = 8;
  if (!v16) {
    goto LABEL_46;
  }
LABEL_48:
  -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)self, &v34);
LABEL_49:
  if (!v16)
  {
    [(UIView *)self _updateCombinedInsetsIfNecessary];
    -[UIView _updateReadableContentGuideConstraintsIfNecessary](self);
    -[UIView _updateEmbeddedViewControllerContentOverlayInsetsIfNecessary](self);
  }
}

- (void)setCenter:(CGPoint)center
{
  double y = center.y;
  double x = center.x;
  BOOL v6 = center.x == -[UIView _backing_position]((uint64_t)self);
  BOOL v8 = y == v7 && v6;
  if (v8)
  {
    uint64_t v9 = *MEMORY[0x1E4F1DAD8];
    uint64_t v10 = *(void *)(MEMORY[0x1E4F1DAD8] + 8);
  }
  else
  {
    [(UIView *)self frame];
    uint64_t v9 = v11;
    uint64_t v10 = v12;
  }
  uint64_t v13 = [(UIView *)self superview];
  uint64_t v14 = v13;
  if (v13) {
    char v15 = [*(id *)(v13 + 160) needsLayout];
  }
  else {
    char v15 = 1;
  }
  BOOL v16 = +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger];
  objc_msgSend(v16, "willSendSetPosition:toLayerOfView:", self, x, y);

  [(UIView *)(uint64_t)self _backing_setPosition:y];
  if (((v8 | -[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self) ^ 1) & 1) == 0
    && (*(void *)&self->_viewFlags & 0x200000000000000) == 0
    && [(UIView *)self translatesAutoresizingMaskIntoConstraints])
  {
    -[UIView _constraints_frameDidChange]((uint64_t)self);
  }
  if ((*((void *)&self->_viewFlags + 1) & 0x1000000) != 0)
  {
    uint64_t v17 = [(UIView *)self superview];
    if (v17)
    {
      BOOL v18 = (void *)v17;
      BOOL v19 = -[UIView _anyBackdropMaskView](self);
      BOOL v20 = [v19 superview];

      if (v20)
      {
        uint64_t v21 = [(UIView *)self superview];
        uint64_t v22 = -[UIView _anyBackdropMaskView](self);
        int v23 = [v22 superview];
        objc_msgSend(v21, "convertPoint:toView:", v23, x, y);
        double x = v24;
        double y = v25;
      }
    }
    int v26 = [(UIView *)self _backdropMaskViewForGrayscaleTint];
    objc_msgSend(v26, "setCenter:", x, y);

    double v27 = [(UIView *)self _backdropMaskViewForColorTint];
    objc_msgSend(v27, "setCenter:", x, y);

    double v28 = -[UIView _backdropMaskViewForColorBurnTint](self);
    objc_msgSend(v28, "setCenter:", x, y);

    uint64_t v29 = -[UIView _backdropMaskViewForDarkeningTint](self);
    objc_msgSend(v29, "setCenter:", x, y);

    long long v30 = [(UIView *)self _backdropMaskViewForFilters];
    objc_msgSend(v30, "setCenter:", x, y);
  }
  if (!v8)
  {
    if (*((_DWORD *)&self->_viewFlags + 4) & 0x3C | *((void *)&self->_viewFlags + 1) & 0x8000000000000000)
    {
      uint64_t v50 = 0;
      long long v49 = 0u;
      long long v48 = 0u;
      long long v47 = 0u;
      long long v46 = 0u;
      long long v45 = 0u;
      long long v44 = 0u;
      long long v43 = 0u;
      long long v42 = 0u;
      long long v41 = 0u;
      long long v40 = 0u;
      long long v39 = 0u;
      long long v38 = 0u;
      long long v37 = 0u;
      v36[0] = 2;
      v36[1] = v9;
      v36[2] = v10;
      -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)self, v36);
    }
    [(UIView *)self _updateCombinedInsetsIfNecessary];
    -[UIView _updateEmbeddedViewControllerContentOverlayInsetsIfNecessary](self);
    if (v14) {
      char v31 = v15;
    }
    else {
      char v31 = 1;
    }
    if ((v31 & 1) == 0
      && [*(id *)(v14 + 160) needsLayout]
      && (*(void *)(v14 + 96) & 0x1000000000000000) == 0)
    {
      [(UIView *)self bounds];
      -[UIView _synchronizeAutoLayoutWithCALayoutIfNecessaryForOldBounds:updateSuperview:]((uint64_t)self, 1, v32, v33, v34, v35);
    }
  }
}

- (void)_backing_setPosition:(double)a3
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 122))
    {
      BOOL v6 = [(id)a1 superview];
      [v6 bounds];
      double v8 = v7;
      double v10 = v9;

      a2 = a2 - v8;
      a3 = a3 - v10;
    }
    uint64_t v11 = *(void *)(a1 + 168);
    if (!v11 || (id v12 = *(id *)(v11 + 8), (v13 = v12) == 0))
    {
      id v13 = 0;
      id v12 = *(id *)(a1 + 160);
    }
    id v14 = v13;
    objc_msgSend(v12, "setPosition:", a2, a3);
  }
}

- (void)layoutBelowIfNeeded
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!self || (*(void *)&self->_viewFlags & 0x1000) == 0)
  {
    if (pthread_main_np() != 1) {
      -[UIView _raiseExceptionForBackgroundThreadLayout]((id *)&self->super.super.isa);
    }
    if (qword_1EB25C358 != -1) {
      dispatch_once(&qword_1EB25C358, &__block_literal_global_3797);
    }
    int v3 = byte_1EB25C0BA;
    if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self))
    {
      uint64_t v4 = [(UIView *)self _layoutEngine];
      uint64_t v5 = v4;
      if ((*(void *)&self->_viewFlags & 0x40200000000000) == 0x40000000000000)
      {
        BOOL v6 = [v4 delegate];

        if (v6 == self) {
          double v7 = 0;
        }
        else {
          double v7 = self;
        }
        -[UIView _updateConstraintsAtEngineLevelIfNeededWithViewForVariableChangeNotifications:](self, v7);
        uint64_t v8 = [(UIView *)self _layoutEngine];

        uint64_t v5 = (void *)v8;
      }
      -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v5);
      if ((*(void *)&self->_viewFlags & 0x40000000000000) != 0)
      {
        id v11 = 0;
        double v9 = 0;
        id v10 = 0;
      }
      else
      {
        if (v5)
        {
          double v9 = 0;
          id v10 = 0;
        }
        else
        {
          id v10 = objc_alloc_init(MEMORY[0x1E4F5B250]);
          [v10 setEngineScalingCoefficients:-[UIView _preferredLayoutEngineToUserScalingCoefficients](self)];
          BOOL v18 = [(UIView *)self window];
          BOOL v19 = v18;
          if (!v18
            || ([(UIView *)v18 _layoutEngine],
                BOOL v20 = objc_claimAutoreleasedReturnValue(),
                v20,
                uint64_t v21 = v19,
                v3)
            && (uint64_t v21 = v19, v20))
          {
            uint64_t v21 = self;
          }
          double v9 = v21;
          BOOL v22 = [(UIView *)v9 translatesAutoresizingMaskIntoConstraints];
          if (!v3 || !v22)
          {
            uint64_t v23 = [(UIView *)v9 superview];
            if (v23)
            {
              double v24 = (void *)v23;
              while (1)
              {
                double v25 = [v24 _layoutEngine];

                if (v3)
                {
                  if (v25) {
                    break;
                  }
                }
                if ((v24[12] & 0x1000) != 0)
                {

                  goto LABEL_29;
                }
                int v26 = v24;

                double v24 = [(UIView *)v26 superview];
                double v9 = v26;
                if (!v24) {
                  goto LABEL_45;
                }
              }
            }
          }
          int v26 = v9;
LABEL_45:
          [v10 setDelegate:v26];
          v41[0] = MEMORY[0x1E4F143A8];
          v41[1] = 3221225472;
          v41[2] = __40__UIView_Hierarchy__layoutBelowIfNeeded__block_invoke;
          v41[3] = &unk_1E52DCB30;
          double v9 = v26;
          long long v42 = v9;
          id v10 = v10;
          id v43 = v10;
          long long v44 = self;
          [v10 withAutomaticOptimizationDisabled:v41];
        }
        if (+[UIView _isInAnimationBlockWithAnimationsEnabled])
        {
          id v27 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          double v28 = [(UIView *)self _layoutEngine];
          uint64_t v29 = [v28 delegate];
          v39[0] = MEMORY[0x1E4F143A8];
          v39[1] = 3221225472;
          v39[2] = __40__UIView_Hierarchy__layoutBelowIfNeeded__block_invoke_2;
          v39[3] = &unk_1E52F2FF8;
          id v11 = v27;
          id v40 = v11;
          _UIViewTopDownSubtreeTraversal((uint64_t)v29, v39, 0);
        }
        else
        {
          id v11 = 0;
        }
        if (self) {
          -[UIView _updateConstraintsAtEngineLevelIfNeededWithViewForVariableChangeNotifications:](self, self);
        }
        if (dyld_program_sdk_at_least())
        {
          if ((*(void *)&self->_viewFlags & 0x1A0000000000000) == 0x20000000000000) {
            [(UIView *)self _applyISEngineLayoutValuesToBoundsOnly:1];
          }
        }
        else
        {
          long long v30 = [(UIView *)self superview];
          if (v30)
          {
            char v31 = v30;
            uint64_t v32 = v30[12];
            v30[12] = v32 | 0x1000000000000000;
            [v30 bounds];
            -[UIView _resizeWithOldSuperviewSize:](self, "_resizeWithOldSuperviewSize:", v33, v34);
            if ((v32 & 0x1000000000000000) == 0) {
              v31[12] &= ~0x1000000000000000uLL;
            }
          }
          else
          {
            -[UIView _resizeWithOldSuperviewSize:](self, "_resizeWithOldSuperviewSize:", *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8));
          }
        }
      }
    }
    else
    {
      id v11 = 0;
      double v9 = 0;
      id v10 = 0;
    }
    id v12 = -[UIView _backing_outermostLayer](self);
    [v12 layoutBelowIfNeeded];

    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v13 = v11;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v35 objects:v45 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v36 != v16) {
            objc_enumerationMutation(v13);
          }
          objc_msgSend(*(id *)(*((void *)&v35 + 1) + 8 * i), "_setInAnimatedLayout:", 0, (void)v35);
        }
        uint64_t v15 = [v13 countByEnumeratingWithState:&v35 objects:v45 count:16];
      }
      while (v15);
    }

    if (v10)
    {
      [(UIView *)v9 _discardLayoutEngine:v10];
      if ([(UIView *)v9 translatesAutoresizingMaskIntoConstraints]) {
        -[UIView _invalidateAutoresizingConstraints]((uint64_t)v9);
      }
    }
LABEL_29:
  }
}

- (BOOL)_willForceLayoutForBoundsChangeToNewBounds:(double)a3
{
  if (result)
  {
    if (__currentViewAnimationState)
    {
      uint64_t v5 = (void *)result;
      CGPoint result = 0;
      if ((*(unsigned char *)(__currentViewAnimationState + 172) & 0x10) != 0 && __animate)
      {
        [v5 bounds];
        return v9 != a5 || v8 != a4;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (void)_backing_setBounds:(double)a3
{
  if (a1)
  {
    objc_msgSend(*(id *)(a1 + 160), "setBounds:");
    uint64_t v8 = *(void *)(a1 + 168);
    if (v8)
    {
      id v9 = *(id *)(v8 + 8);
      if (v9)
      {
        id v17 = v9;
        objc_msgSend(v9, "setBounds:", *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8), a4, a5);
        if ((*(void *)(a1 + 104) & 0x200000) != 0)
        {
          id v10 = -[UIView _safeMaskView]((void *)a1);
          double v11 = -[UIView _intermediateLayerMaskFrameOrigin](v10);
          double v13 = v12;
          [v10 frame];
          double v15 = v14;
          [v10 frame];
          -[UIView _backing_setFrame:]((uint64_t)v10, v11, v13, v15, v16);
        }
        -[UIView _updateSublayerGeometry](a1);
      }
    }
  }
}

- (void)_notifyGeometryObserversWithChangeInfo:(uint64_t)a1
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1 && ([(id)a1 _disableGeometryObserverNotification] & 1) == 0)
  {
    uint64_t v4 = *(_DWORD *)(a1 + 112) & 0x3CLL;
    if ((*(void *)(a1 + 104) & 0x8000000000000000) != 0)
    {
      uint64_t v5 = objc_getAssociatedObject((id)a1, &_UIGeometryObserversKey);
      long long v12 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      BOOL v6 = objc_msgSend(v5, "copy", 0);
      uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)v13;
        do
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v13 != v9) {
              objc_enumerationMutation(v6);
            }
            double v11 = *(void **)(*((void *)&v12 + 1) + 8 * i);
            [v11 _geometryChanged:a2 forAncestor:a1];
            if (_IsKindOfUIView((uint64_t)v11)) {
              -[UIView _notifyBoundingPathChangeObserversWithChangeInfo:forAncestor:](v11, a2, a1);
            }
          }
          uint64_t v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
        }
        while (v8);
      }
    }
    if (v4)
    {
      [(id)a1 _geometryChanged:a2 forAncestor:0];
      -[UIView _notifyBoundingPathChangeObserversWithChangeInfo:forAncestor:]((void *)a1, a2, 0);
    }
  }
}

- (BOOL)_disableGeometryObserverNotification
{
  return 0;
}

- (void)_notifyBoundingPathChangeObserversWithChangeInfo:(uint64_t)a3 forAncestor:
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1 && *a2 != 128)
  {
    BOOL v6 = objc_getAssociatedObject(a1, &_UIBoundingPathChangeObserversKey);
    uint64_t v7 = v6;
    if (v6)
    {
      BOOL v8 = !a3 && (unint64_t)(*a2 == 4);
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      uint64_t v9 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v14;
        do
        {
          uint64_t v12 = 0;
          do
          {
            if (*(void *)v14 != v11) {
              objc_enumerationMutation(v7);
            }
            [*(id *)(*((void *)&v13 + 1) + 8 * v12++) _boundingPathMayHaveChangedForView:a1 relativeToBoundsOriginOnly:v8];
          }
          while (v10 != v12);
          uint64_t v10 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
        }
        while (v10);
      }
    }
  }
}

- (uint64_t)_constraints_frameDidChange
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    CGPoint result = [(id)result superview];
    BOOL v2 = result && (*(void *)(result + 96) & 0x100000000000000) == 0;
    if ((v1[12] & 0x100000000000000) == 0 || v2)
    {
      CGPoint result = -[UIView _usesAutoresizingConstraints]((uint64_t)v1);
      if (result) {
        CGPoint result = objc_msgSend(v1, "_autoresizingConstraints_frameDidChange");
      }
      if ((v1[12] & 0x100000000000000) == 0)
      {
        CGPoint result = -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)v1);
        if (result)
        {
          objc_msgSend(v1, "_engineHostConstraints_frameDidChange");
          CGPoint result = dyld_program_sdk_at_least();
          if ((result & 1) == 0)
          {
            CGPoint result = [v1 translatesAutoresizingMaskIntoConstraints];
            if (result)
            {
              return [v1 _setNeedsUpdateConstraintsNeedingLayout:0];
            }
          }
        }
      }
    }
  }
  return result;
}

- (void)_engineHostConstraints_frameDidChange
{
  if ((dyld_program_sdk_at_least() & 1) != 0
    || self && [(UIView *)self _forceLayoutEngineSolutionInRationalEdges])
  {
    if (objc_msgSend(-[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints"), "count") == 4)
    {
      if ((dyld_program_sdk_at_least() & 1) == 0
        && (*((void *)&self->_viewFlags + 1) & 0x800000000000) != 0
        && self->_viewDelegate)
      {
        -[UIView _relaxLayoutEngineHostConstraints](self);
        [(UIView *)self setNeedsLayout];
      }
      else
      {
        -[UIView _resetLayoutEngineHostConstraints](self);
      }
    }
    else
    {
      -[UIView _invalidateEngineHostConstraints]((uint64_t)self);
    }
  }
  else
  {
    [(UIView *)self _oldEngineHostConstraints_frameDidChange];
  }
}

- (void)_invalidateBaselineConstraints
{
  if ((*(void *)&self->_viewFlags & 0x400000000000000) != 0)
  {
    int v3 = [(UIView *)self _layoutEngine];
    if (v3)
    {
      id v4 = v3;
      _UIViewEnumerateLayoutConstraintsAndAdjustForConstantChangeForSelectedAttributes(self, (uint64_t)_UILayoutAttributeIsBaselineAttribute);
      int v3 = v4;
    }
  }
}

- (uint64_t)_invalidateEngineHostConstraints
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    CGPoint result = -[UIView _usesLayoutEngineHostingConstraints](result);
    if (result)
    {
      CGPoint result = [v1 _layoutEngineHostConstraints];
      if (result)
      {
        [v1 removeConstraints:result];
        -[UIView _setLayoutEngineHostConstraints:](v1, 0);
        return [v1 setNeedsUpdateConstraints];
      }
    }
  }
  return result;
}

uint64_t __109__UIView_UIConstraintBasedLayout_EngineDelegate___invalidateSystemLayoutSizeFittingSizeAtEngineDelegateLevel__block_invoke(uint64_t result, void *a2, unsigned char *a3)
{
  uint64_t v4 = result;
  if (*(void **)(result + 32) != a2)
  {
    if (a2[12] & 0x400000000000000) == 0 || (CGPoint result = [a2 _hostsLayoutEngine], (result))
    {
      *a3 = 1;
      return result;
    }
  }
  a2[13] |= 0x400uLL;
  BOOL v6 = -[UIView __viewDelegate]((id *)a2);
  CGPoint result = objc_msgSend((id)objc_msgSend(v6, "parentViewController"), "_monitorsSystemLayoutFittingSize");
  if (result)
  {
    if (![v6 _previousFittingSizeInfo])
    {
      uint64_t v7 = [a2 _previousFittingSizeInfo];
      if (!v7) {
        uint64_t v7 = [*(id *)(v4 + 40) _dummyFittingSizeInfo];
      }
      [v6 _setPreviousFittingSizeInfo:v7];
    }
  }
  else if ((a2[13] & 0x200) == 0)
  {
    return result;
  }
  return [a2 setNeedsLayout];
}

uint64_t __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_3(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t result = [a2 _wantsBaselineUpdatingFollowingConstraintsPass];
  if (result) {
    uint64_t result = [*(id *)(a1 + 32) addObject:a2];
  }
  if ((a2[12] & 0x800000000000000) == 0) {
    *a3 = 1;
  }
  return result;
}

void __40__UIView_Hierarchy__layoutBelowIfNeeded__block_invoke_2(uint64_t a1, void *a2, unsigned char *a3)
{
  BOOL v8 = a2;
  int v5 = [v8 _wantsAutolayout];
  BOOL v6 = v8;
  if (v5 && (v8[12] & 0x800000000000000) != 0)
  {
    char v7 = [v8 _isInAnimatedLayout];
    BOOL v6 = v8;
    if ((v7 & 1) == 0)
    {
      [*(id *)(a1 + 32) addObject:v8];
      [v8 _setInAnimatedLayout:1];
      BOOL v6 = v8;
    }
  }
  else
  {
    *a3 = 1;
  }
}

- (void)_setInAnimatedLayout:(BOOL)a3
{
  *((void *)&self->_viewFlags + 1) = *((void *)&self->_viewFlags + 1) & 0xFFFFFFFFFFFFFFFELL | a3;
}

void __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_6(uint64_t a1, uint64_t a2, BOOL *a3)
{
  *a3 = (*(void *)(a2 + 96) & 0x200000000000) != 0;
  *(void *)(a2 + 96) |= 0x100000000000uLL;
}

uint64_t __48__UIView__layoutMarginsDidChangeFromOldMargins___block_invoke(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t result = [a2 _needsDoubleUpdateConstraintsPass];
  if (result) {
    uint64_t result = [a2 _invalidateIntrinsicContentSizeNeedingLayout:1];
  }
  if (!a2) {
    goto LABEL_7;
  }
  uint64_t v6 = a2[12];
  if ((v6 & 0x1000000000000) != 0)
  {
    uint64_t result = [a2 _recalculateStrictDescendantNeedsDoubleUpdateConstraints];
    uint64_t v6 = a2[12];
  }
  if ((v6 & 0x800000000000) == 0) {
LABEL_7:
  }
    *a3 = 1;
  return result;
}

void __91__UIView_AdditionalLayoutSupport___recalculateStrictDescendantNeedsDoubleUpdateConstraints__block_invoke_2(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 96) &= 0xFFFE7FFFFFFFFFFFLL;
}

uint64_t __91__UIView_AdditionalLayoutSupport___recalculateStrictDescendantNeedsDoubleUpdateConstraints__block_invoke(uint64_t result, void *a2, unsigned char *a3, unsigned char *a4)
{
  if (*(void **)(result + 32) != a2)
  {
    uint64_t v7 = result;
    uint64_t result = [a2 _needsDoubleUpdateConstraintsPass];
    if (result) {
      goto LABEL_5;
    }
    uint64_t v8 = a2[12];
    if ((v8 & 0x1000000000000) != 0) {
      return result;
    }
    if ((v8 & 0x800000000000) != 0)
    {
LABEL_5:
      *(void *)(*(void *)(*(void *)(v7 + 40) + 8) + 40) = a2;
      a3 = a4;
    }
    *a3 = 1;
  }
  return result;
}

- (void)solutionDidChangeInEngine:(id)a3
{
  p_uint64_t viewFlags = &self->_viewFlags;
  if ((*((void *)&self->_viewFlags + 1) & 0x1100) == 0)
  {
    objc_msgSend(+[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger](_UIViewLayoutFeedbackLoopDebugger, "layoutFeedbackLoopDebugger", a3), "willSendSetNeedsLayoutToLayerOfView:", self);
    [-[UIView _backing_outermostLayer](self) setNeedsLayout];
    *((void *)p_viewFlags + 1) |= 0x100uLL;
  }
}

void *__160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_286(uint64_t a1)
{
  BOOL v2 = (void *)[*(id *)(a1 + 32) objectAtIndex:0];
  LODWORD(v3) = *(_DWORD *)(a1 + 112);
  [v2 setPriority:v3];
  [v2 setIdentifier:@"fittingSizeHTarget"];
  [v2 setContainer:*(void *)(a1 + 40)];
  uint64_t v4 = (void *)[*(id *)(a1 + 32) objectAtIndex:1];
  LODWORD(v5) = *(_DWORD *)(a1 + 116);
  [v4 setPriority:v5];
  [v4 setIdentifier:@"fittingSizeVTarget"];
  [v4 setContainer:*(void *)(a1 + 40)];
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) = v4;
  uint64_t v6 = *(void **)(a1 + 40);
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v7 = (void *)[v6 _layoutEngineHostConstraints];
    uint64_t v8 = [v7 count];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void **)(a1 + 40);
      if ((dyld_program_sdk_at_least() & 1) != 0
        || v10 && [v10 _forceLayoutEngineSolutionInRationalEdges])
      {
        uint64_t v11 = 4;
      }
      else
      {
        uint64_t v11 = 2;
      }
      if (v9 != v11) {
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", *(void *)(a1 + 88), *(void *)(a1 + 40), @"NSLayoutConstraint_UIKitAdditions.m", 2908, @"Bogus anchoring constraints for the layout engine");
      }
      uint64_t v12 = 0;
      char v13 = 1;
      do
      {
        char v14 = v13;
        objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v12), "priority");
        if (v15 != 1000.0
          || (objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v12), "constant"),
              double v17 = v16,
              objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v12), "constant"),
              v17 != v18))
        {
          objc_msgSend(*(id *)(a1 + 48), "addObject:", objc_msgSend(v7, "objectAtIndexedSubscript:", v12));
          objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v12), "_removeFromEngine:", *(void *)(a1 + 56));
          objc_msgSend(*(id *)(a1 + 64), "addObject:", objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v12));
          objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v12), "_addToEngine:", *(void *)(a1 + 56));
        }
        char v13 = 0;
        uint64_t v12 = 1;
      }
      while ((v14 & 1) != 0);
    }
    else
    {
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 0), "_addToEngine:", *(void *)(a1 + 56));
      objc_msgSend(*(id *)(a1 + 64), "addObject:", objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 0));
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 1), "_addToEngine:", *(void *)(a1 + 56));
      objc_msgSend(*(id *)(a1 + 64), "addObject:", objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 1));
    }
  }
  else
  {
    -[UIView _populateEngineWithConstraintsForViewSubtree:forComputingFittingSizeOfView:](v6, *(void *)(a1 + 56), *(void **)(a1 + 40));
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 0), "_addToEngine:", *(void *)(a1 + 56));
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", 1), "_addToEngine:", *(void *)(a1 + 56));
  }
  BOOL v19 = *(void **)(a1 + 40);
  BOOL v20 = *(void **)(a1 + 56);
  uint64_t v21 = *(void *)(*(void *)(a1 + 80) + 8) + 40;
  double v22 = *(double *)(a1 + 96);
  return -[UIView _recursiveCollectTemporaryInternalConstraintsWithEngine:ignoreAutoresizingMaskConstraints:returningConstraintsForViewsNeedingSecondPass:currentTargetWidth:](v19, v20, 1, v21, v22);
}

- (void)_populateEngineWithConstraintsForViewSubtree:(void *)a3 forComputingFittingSizeOfView:
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  double v5 = result;
  if (a3 != result) {
    goto LABEL_3;
  }
  if ([result translatesAutoresizingMaskIntoConstraints])
  {
    ContentSize = -[UIView _generateContentSizeConstraints](v5);
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v7 = [ContentSize countByEnumeratingWithState:&v22 objects:v27 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v23;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v23 != v9) {
            objc_enumerationMutation(ContentSize);
          }
          [*(id *)(*((void *)&v22 + 1) + 8 * i) _addToEngine:a2];
        }
        uint64_t v8 = [ContentSize countByEnumeratingWithState:&v22 objects:v27 count:16];
      }
      while (v8);
    }
    goto LABEL_15;
  }
  if ((-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)v5) & 1) == 0)
  {
LABEL_3:
    if (([v5 _needsDoubleUpdateConstraintsPass] & 1) == 0) {
      -[UIView _updateContentSizeConstraints](v5);
    }
  }
LABEL_15:
  if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)v5)) {
    uint64_t v11 = [v5 _layoutEngineHostConstraints];
  }
  else {
    uint64_t v11 = 0;
  }
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = __110__UIView_UIConstraintBasedLayout___populateEngineWithConstraintsForViewSubtree_forComputingFittingSizeOfView___block_invoke;
  v21[3] = &unk_1E530E750;
  v21[4] = v11;
  v21[5] = a2;
  v21[6] = v5;
  _UIViewEnumerateConstraints(v5, (uint64_t)v21);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v12 = objc_msgSend(v5, "_allSubviews", 0);
  uint64_t result = (void *)[v12 countByEnumeratingWithState:&v17 objects:v26 count:16];
  if (result)
  {
    char v13 = result;
    uint64_t v14 = *(void *)v18;
    do
    {
      float v15 = 0;
      do
      {
        if (*(void *)v18 != v14) {
          objc_enumerationMutation(v12);
        }
        uint64_t v16 = *(void *)(*((void *)&v17 + 1) + 8 * (void)v15);
        if ((-[UIView _usesLayoutEngineHostingConstraints](v16) & 1) == 0) {
          -[UIView _populateEngineWithConstraintsForViewSubtree:forComputingFittingSizeOfView:](v16, a2, a3);
        }
        float v15 = (void *)((char *)v15 + 1);
      }
      while (v13 != v15);
      uint64_t result = (void *)[v12 countByEnumeratingWithState:&v17 objects:v26 count:16];
      char v13 = result;
    }
    while (result);
  }
  return result;
}

- (void)_updateLayoutEngineHostConstraints
{
  v8[4] = *MEMORY[0x1E4F143B8];
  if ((*((void *)&self->_viewFlags + 1) & 0x1000) == 0)
  {
    if ((dyld_program_sdk_at_least() & 1) != 0
      || [(UIView *)self _forceLayoutEngineSolutionInRationalEdges])
    {
      if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)
        && ![(UIView *)self _layoutEngineHostConstraints])
      {
        double v3 = [(NSLayoutDimension *)[(UIView *)self widthAnchor] constraintEqualToConstant:0.0];
        [(NSLayoutConstraint *)v3 setIdentifier:@"UIView-Encapsulated-Layout-Width"];
        [(UIView *)self _priorityForEngineHostConstraints];
        -[NSLayoutConstraint setPriority:](v3, "setPriority:");
        uint64_t v4 = [(NSLayoutDimension *)[(UIView *)self heightAnchor] constraintEqualToConstant:0.0];
        [(NSLayoutConstraint *)v4 setIdentifier:@"UIView-Encapsulated-Layout-Height"];
        [(UIView *)self _priorityForEngineHostConstraints];
        -[NSLayoutConstraint setPriority:](v4, "setPriority:");
        double v5 = (void *)[MEMORY[0x1E4F5B238] constraintWithItem:self attribute:32 relatedBy:0 constant:0.0];
        [v5 setIdentifier:@"UIView-Encapsulated-Layout-Left"];
        uint64_t v6 = (void *)[MEMORY[0x1E4F5B238] constraintWithItem:self attribute:33 relatedBy:0 constant:0.0];
        [v6 setIdentifier:@"UIView-Encapsulated-Layout-Top"];
        v8[0] = v3;
        v8[1] = v4;
        void v8[2] = v5;
        v8[3] = v6;
        -[UIView _setLayoutEngineHostConstraints:](self, (void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:4]);
        *((void *)&self->_viewFlags + 1) |= 0x80uLL;
        v7[0] = v5;
        v7[1] = v6;
        objc_msgSend(MEMORY[0x1E4F5B268], "activateConstraints:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v7, 2));
        *((void *)&self->_viewFlags + 1) &= ~0x80uLL;
        if ([(UIView *)self translatesAutoresizingMaskIntoConstraints]) {
          -[UIView _resetLayoutEngineHostConstraints](self);
        }
      }
      else if (dyld_program_sdk_at_least() {
             && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)
      }
             && [(UIView *)self translatesAutoresizingMaskIntoConstraints])
      {
        -[UIView _resetLayoutEngineHostConstraints](self);
      }
    }
    else
    {
      [(UIView *)self _oldUpdateLayoutEngineHostConstraints];
    }
  }
}

- (NSLayoutDimension)heightAnchor
{
  double v3 = (objc_class *)objc_opt_class();
  return (NSLayoutDimension *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewHeightAnchorKey, v3, 8);
}

- (UILayoutGuide)layoutMarginsGuide
{
  void v15[4] = *MEMORY[0x1E4F143B8];
  layoutMarginsGuide = self->_layoutMarginsGuide;
  if (!layoutMarginsGuide)
  {
    uint64_t v4 = objc_alloc_init(UILayoutGuide);
    double v5 = self->_layoutMarginsGuide;
    self->_layoutMarginsGuide = v4;

    if (dyld_program_sdk_at_least()) {
      [(UILayoutGuide *)self->_layoutMarginsGuide _setAllowsNegativeDimensions:1];
    }
    [(UIView *)self addLayoutGuide:self->_layoutMarginsGuide];
    [(UILayoutGuide *)self->_layoutMarginsGuide _setLockedToOwningView:1];
    [(UILayoutGuide *)self->_layoutMarginsGuide setIdentifier:@"UIViewLayoutMarginsGuide"];
    uint64_t v6 = [MEMORY[0x1E4F5B268] constraintWithItem:self->_layoutMarginsGuide attribute:3 relatedBy:0 toItem:self attribute:3];
    uint64_t v7 = [MEMORY[0x1E4F5B268] constraintWithItem:self->_layoutMarginsGuide attribute:1 relatedBy:0 toItem:self attribute:1];
    uint64_t v8 = [MEMORY[0x1E4F5B268] constraintWithItem:self attribute:4 relatedBy:0 toItem:self->_layoutMarginsGuide attribute:4];
    uint64_t v9 = [MEMORY[0x1E4F5B268] constraintWithItem:self attribute:2 relatedBy:0 toItem:self->_layoutMarginsGuide attribute:2];
    [v6 setIdentifier:@"UIView-topMargin-guide-constraint"];
    [v7 setIdentifier:@"UIView-leftMargin-guide-constraint"];
    [v8 setIdentifier:@"UIView-bottomMargin-guide-constraint"];
    [v9 setIdentifier:@"UIView-rightMargin-guide-constraint"];
    uint64_t v10 = self->_layoutMarginsGuide;
    v15[0] = v6;
    v15[1] = v7;
    v15[2] = v8;
    v15[3] = v9;
    uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:4];
    [(UILayoutGuide *)v10 _setSystemConstraints:v11];

    [(UIView *)self _updateLayoutMarginsGuideConstraintsIfNecessary];
    uint64_t v12 = (void *)MEMORY[0x1E4F5B268];
    char v13 = [(UILayoutGuide *)self->_layoutMarginsGuide _systemConstraints];
    [v12 activateConstraints:v13];

    layoutMarginsGuide = self->_layoutMarginsGuide;
  }
  return layoutMarginsGuide;
}

- (void)_layoutMarginsDidChangeFromOldMargins:(UIEdgeInsets)a3
{
  if ((*(void *)&self->_viewFlags & 0x400000000000000) != 0)
  {
    double right = a3.right;
    double left = a3.left;
    uint64_t v6 = [(UIView *)self _layoutEngine];

    if (v6)
    {
      if ((*((void *)&self->_viewFlags + 1) & 4) == 0)
      {
        a3.double top = self->_inferredLayoutMargins.left;
        if (left != a3.top)
        {
          a3.double top = self->_inferredLayoutMargins.right;
          if (right != a3.top)
          {
            uint64_t viewFlags = (uint64_t)self->_viewFlags;
            if ((viewFlags & 0x1000000000000) != 0)
            {
              [(UIView *)self _recalculateStrictDescendantNeedsDoubleUpdateConstraints];
              uint64_t viewFlags = (uint64_t)self->_viewFlags;
            }
            if ((viewFlags & 0x800000000000) != 0) {
              _UIViewTopDownSubtreeTraversal((uint64_t)self, &__block_literal_global_935, 0);
            }
          }
        }
      }
    }
  }
  [(UIView *)self _updateLayoutMarginsGuideConstraintsIfNecessary];
  -[UIView _updateReadableContentGuideConstraintsIfNecessary](self);
  [(UIView *)self layoutMarginsDidChange];
  uint64_t v8 = self->_viewDelegate;
  [(UIViewController *)v8 viewLayoutMarginsDidChange];
}

- (void)_updateLayoutMarginsGuideConstraintsIfNecessary
{
  if (self->_layoutMarginsGuide)
  {
    [(UIView *)self layoutMargins];
    double v4 = v3;
    double v6 = v5;
    double v8 = v7;
    double v10 = v9;
    id v15 = [(UILayoutGuide *)self->_layoutMarginsGuide _systemConstraints];
    uint64_t v11 = [v15 objectAtIndexedSubscript:0];
    [v11 setConstant:v4];

    uint64_t v12 = [v15 objectAtIndexedSubscript:1];
    [v12 setConstant:v6];

    char v13 = [v15 objectAtIndexedSubscript:2];
    [v13 setConstant:v8];

    uint64_t v14 = [v15 objectAtIndexedSubscript:3];
    [v14 setConstant:v10];
  }
}

- (float)_priorityForEngineHostConstraints
{
  return 1000.0;
}

- (void)_resetLayoutEngineHostConstraints
{
  if (result)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    double v3 = __68__UIView_UIConstraintBasedLayout___resetLayoutEngineHostConstraints__block_invoke;
    double v4 = &unk_1E52DC580;
    double v5 = result;
    uint64_t v1 = (void *)[result _layoutEngine];
    if (v1) {
      return (void *)[v1 withAutomaticOptimizationDisabled:v2];
    }
    else {
      return (void *)v3((uint64_t)v2);
    }
  }
  return result;
}

- (void)_stopObservingVariablesOnlyToSupportTAMICChange:(BOOL)a3
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v5 = [(UIView *)self _uili_existingBaseFrameVariables];
  id v6 = [(UIView *)self _uili_observableLayoutEngineForBaseFrameVariables:1];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v7 = [v5 countByEnumeratingWithState:&v43 objects:v50 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v44;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v44 != v9) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void *)(*((void *)&v43 + 1) + 8 * v10);
        if (qword_1EB25A5B8 != -1) {
          dispatch_once(&qword_1EB25A5B8, &__block_literal_global_634);
        }
        if (_MergedGlobals_62) {
          [v6 stopObservingChangesForVariable:v11];
        }
        else {
          [v6 removeObservableForVariable:v11];
        }
        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [v5 countByEnumeratingWithState:&v43 objects:v50 count:16];
    }
    while (v8);
  }
  if (!a3)
  {
    id v12 = [(UIView *)self _uili_observableLayoutEngineForBaseFrameVariables:0];
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v13 = [(UIView *)self _uili_existingObservationEligibleLayoutVariables];
    uint64_t v14 = [v13 countByEnumeratingWithState:&v39 objects:v49 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v40;
      do
      {
        uint64_t v17 = 0;
        do
        {
          if (*(void *)v40 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void *)(*((void *)&v39 + 1) + 8 * v17);
          if (([v5 containsObject:v18] & 1) == 0)
          {
            if (qword_1EB25A5B8 != -1) {
              dispatch_once(&qword_1EB25A5B8, &__block_literal_global_634);
            }
            if (_MergedGlobals_62) {
              [v12 stopObservingChangesForVariable:v18];
            }
            else {
              [v12 removeObservableForVariable:v18];
            }
          }
          ++v17;
        }
        while (v15 != v17);
        uint64_t v15 = [v13 countByEnumeratingWithState:&v39 objects:v49 count:16];
      }
      while (v15);
    }
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    obuint64_t j = [(UIView *)self _mutableLayoutGuides];
    uint64_t v19 = [(NSMutableArray *)obj countByEnumeratingWithState:&v35 objects:v48 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v30 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v36 != v30) {
            objc_enumerationMutation(obj);
          }
          long long v22 = *(void **)(*((void *)&v35 + 1) + 8 * i);
          long long v31 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v23 = objc_msgSend(v22, "_uili_existingObservationEligibleLayoutVariables");
          uint64_t v24 = [v23 countByEnumeratingWithState:&v31 objects:v47 count:16];
          if (v24)
          {
            uint64_t v25 = v24;
            uint64_t v26 = *(void *)v32;
            do
            {
              uint64_t v27 = 0;
              do
              {
                if (*(void *)v32 != v26) {
                  objc_enumerationMutation(v23);
                }
                uint64_t v28 = *(void *)(*((void *)&v31 + 1) + 8 * v27);
                if (qword_1EB25A5B8 != -1) {
                  dispatch_once(&qword_1EB25A5B8, &__block_literal_global_634);
                }
                if (_MergedGlobals_62) {
                  [v12 stopObservingChangesForVariable:v28];
                }
                else {
                  [v12 removeObservableForVariable:v28];
                }
                ++v27;
              }
              while (v25 != v27);
              uint64_t v25 = [v23 countByEnumeratingWithState:&v31 objects:v47 count:16];
            }
            while (v25);
          }
        }
        uint64_t v20 = [(NSMutableArray *)obj countByEnumeratingWithState:&v35 objects:v48 count:16];
      }
      while (v20);
    }
  }
}

- (id)_uili_observableLayoutEngineForBaseFrameVariables:(BOOL)a3
{
  if ((*(void *)&self->_viewFlags & 0x80000000000) != 0 && a3) {
    self = [(UIView *)self superview];
  }
  return [(UIView *)self nsli_layoutEngine];
}

- (BOOL)_uili_requiresObservationForVariable:(id)a3
{
  if ((*(void *)&self->_viewFlags & 0x20000000000000) != 0) {
    return 1;
  }
  else {
    return objc_msgSend(-[UIView _uili_existingBaseFrameVariables](self, "_uili_existingBaseFrameVariables"), "containsObject:", a3) ^ 1;
  }
}

- (CGSize)_calculatedSystemLayoutSizeFittingSize:(CGSize)a3 withHorizontalFittingPriority:(float)a4 verticalFittingPriority:(float)a5 hasIntentionallyCollapsedHeight:(BOOL *)a6
{
  double height = a3.height;
  double width = a3.width;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  memset(v71, 0, sizeof(v71));
  int v12 = _UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_UIViewDebugSignposts, @"UIViewDebugSignposts");
  v70[0] = MEMORY[0x1E4F143A8];
  v70[1] = 3221225472;
  v70[2] = __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke;
  v70[3] = &unk_1E530E778;
  v70[4] = self;
  [(UIView *)self superview];
  kdebug_trace();
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  uint64_t v14 = *((void *)&self->_viewFlags + 1);
  if (has_internal_diagnostics)
  {
    if ((v14 & 0x1000) != 0)
    {
      long long v35 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)CGAffineTransform buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v35, OS_LOG_TYPE_FAULT, "Internal UIKit bug: Should never re-enter -_calculatedSystemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:", buf, 2u);
      }
    }
  }
  else if ((v14 & 0x1000) != 0)
  {
    long long v36 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight____s_category)+ 8);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_impl(&dword_1853B0000, v36, OS_LOG_TYPE_ERROR, "Internal UIKit bug: Should never re-enter -_calculatedSystemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:", buf, 2u);
    }
  }
  *((void *)&self->_viewFlags + 1) |= 0x1000uLL;
  if ([(UIView *)self translatesAutoresizingMaskIntoConstraints]
    && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    id v15 = [(UIView *)self _layoutEngineCreateIfNecessary];
    int v39 = 1;
  }
  else
  {
    id v15 = objc_alloc_init(MEMORY[0x1E4F5B250]);
    if (dyld_program_sdk_at_least()) {
      [v15 setShouldIntegralize:0];
    }
    [v15 setEngineScalingCoefficients:-[UIView _preferredLayoutEngineToUserScalingCoefficients](self)];
    if (dyld_program_sdk_at_least()) {
      [v15 setDelegate:self];
    }
    int v39 = 0;
  }
  double v16 = fmin(width, 2777777.0);
  uint64_t v17 = (void *)MEMORY[0x1E4F1C978];
  uint64_t v18 = [MEMORY[0x1E4F5B268] constraintWithItem:self attribute:7 relatedBy:0 constant:v16];
  double v19 = fmin(height, 2777777.0);
  uint64_t v20 = objc_msgSend(v17, "arrayWithObjects:", v18, objc_msgSend(MEMORY[0x1E4F5B268], "constraintWithItem:attribute:relatedBy:constant:", self, 8, 0, v19), 0);
  id v21 = 0;
  id v22 = 0;
  *(void *)CGAffineTransform buf = 0;
  long long v65 = buf;
  uint64_t v66 = 0x3052000000;
  double v67 = __Block_byref_object_copy__234;
  double v68 = __Block_byref_object_dispose__234;
  uint64_t v69 = 0;
  uint64_t v58 = 0;
  double v59 = &v58;
  uint64_t v60 = 0x3052000000;
  int v61 = __Block_byref_object_copy__234;
  double v62 = __Block_byref_object_dispose__234;
  uint64_t v63 = 0;
  if (v39)
  {
    id v21 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v22 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  v56[0] = 0;
  v56[1] = v56;
  v56[2] = 0x2020000000;
  char v57 = 0;
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  v52[0] = MEMORY[0x1E4F143A8];
  v52[1] = 3221225472;
  v52[2] = __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_286;
  v52[3] = &unk_1E530E7A0;
  void v52[4] = v20;
  v52[5] = self;
  float v53 = a4;
  float v54 = a5;
  char v55 = v39;
  v52[6] = v21;
  v52[7] = v15;
  v52[8] = v22;
  v52[9] = &v58;
  v52[10] = buf;
  v52[11] = a2;
  *(double *)&v52[12] = v16;
  *(double *)&v52[13] = v19;
  [v15 withAutomaticOptimizationDisabled:v52];
  v51[0] = MEMORY[0x1E4F143A8];
  v51[1] = 3221225472;
  v51[2] = __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_2;
  v51[3] = &unk_1E52EBC10;
  v51[4] = v15;
  v51[5] = buf;
  [v15 withAutomaticOptimizationDisabled:v51];
  id v23 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v50[0] = MEMORY[0x1E4F143A8];
  v50[1] = 3221225472;
  v50[2] = __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_3;
  v50[3] = &unk_1E52FB4B8;
  v50[4] = v23;
  _UIViewTopDownSubtreeTraversal((uint64_t)self, v50, 0);
  uint64_t v24 = v21;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v25 = [v23 countByEnumeratingWithState:&v46 objects:v72 count:16];
  if (v25)
  {
    uint64_t v26 = *(void *)v47;
    do
    {
      for (uint64_t i = 0; i != v25; ++i)
      {
        if (*(void *)v47 != v26) {
          objc_enumerationMutation(v23);
        }
        uint64_t v28 = *(void **)(*((void *)&v46 + 1) + 8 * i);
        uint64_t v29 = v28 + 12;
        v28[13] |= 4uLL;
        [v28 _updateBaselineInformationDependentOnBounds];
        v29[1] &= ~4uLL;
      }
      uint64_t v25 = [v23 countByEnumeratingWithState:&v46 objects:v72 count:16];
    }
    while (v25);
  }

  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v30 = (void *)[v15 delegate];
  if ((dyld_program_sdk_at_least() & 1) != 0
    || v30 && [v30 _forceLayoutEngineSolutionInRationalEdges])
  {
    -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](self, 0, (double *)&v44, v15, 0);
    if (a5 == 50.0 && a6 && v19 == 0.0 && *((double *)&v45 + 1) == 0.0)
    {
      [(id)v59[5] setConstant:5.0];
      if (v15 != [(UIView *)self _layoutEngine])
      {
        v43[0] = MEMORY[0x1E4F143A8];
        v43[1] = 3221225472;
        v43[2] = __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_4;
        v43[3] = &unk_1E52EBC10;
        v43[4] = v15;
        v43[5] = &v58;
        [v15 withAutomaticOptimizationDisabled:v43];
      }
      long long v41 = 0u;
      long long v42 = 0u;
      -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](self, 0, (double *)&v41, v15, 0);
      *a6 = *((double *)&v42 + 1) == 0.0;
    }
  }
  else
  {
    [(UIView *)self _nsis_origin:0 bounds:&v44 inEngine:v15];
  }
  if (v39)
  {
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3221225472;
    v40[2] = __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_5;
    v40[3] = &unk_1E52FB4E0;
    v40[4] = v22;
    v40[5] = v15;
    v40[7] = self;
    v40[8] = v56;
    v40[6] = v24;
    [v15 withAutomaticOptimizationDisabled:v40];

    -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v15);
  }
  else
  {
  }
  if ((viewFlags & 0x300000000000) == 0x300000000000)
  {
    _UIViewTopDownSubtreeTraversal((uint64_t)self, &__block_literal_global_298_0, 0);
    if (v39)
    {
      if (!objc_msgSend(-[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints"), "count")) {
        [(UIView *)self _setNeedsUpdateConstraints];
      }
    }
  }
  if (*(double *)&v45 >= 2777777.0) {
    *(double *)&long long v45 = width;
  }
  double v31 = *((double *)&v45 + 1);
  if (*((double *)&v45 + 1) >= 2777777.0) {
    *((double *)&v45 + 1) = height;
  }
  *((void *)&self->_viewFlags + 1) &= ~0x1000uLL;
  [(UIView *)self superview];
  kdebug_trace();
  long long v32 = v45;
  _Block_object_dispose(v56, 8);
  _Block_object_dispose(&v58, 8);
  _Block_object_dispose(buf, 8);
  if (LODWORD(v71[0])) {
    kdebug_trace();
  }
  double v34 = *((double *)&v32 + 1);
  double v33 = *(double *)&v32;
  result.double height = v34;
  result.double width = v33;
  return result;
}

- (void)_initializeHostedLayoutEngine
{
  if ((*(void *)&self->_viewFlags & 0x80000000000) == 0) {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"NSLayoutConstraint_UIKitAdditions.m", 3993, @"hostsAutolayoutEngine must be on");
  }
  double v3 = -[UIView _preferredLayoutEngineToUserScalingCoefficients](self);
  double v5 = v4;
  if ((*(void *)&self->_viewFlags & 0x80000000000) == 0)
  {
    id v6 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "NSISEngine *UICreateEngineToHost(UIView *, CGSize)"), @"NSLayoutConstraint_UIKitAdditions.m", 3983, @"View should host autolayout engine");
  }
  id v7 = objc_alloc_init(MEMORY[0x1E4F5B250]);
  if ((dyld_program_sdk_at_least() & 1) != 0
    || [(UIView *)self _forceLayoutEngineSolutionInRationalEdges])
  {
    [v7 setShouldIntegralize:0];
  }
  [v7 setDelegate:self];
  objc_msgSend(v7, "setEngineScalingCoefficients:", v3, v5);
  [(UIView *)self _switchToLayoutEngine:v7];
}

- (void)_setLayoutEngineHostConstraints:(void *)a1
{
  if (a1)
  {
    if ((-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)a1) & 1) == 0) {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__setLayoutEngineHostConstraints_, a1, @"NSLayoutConstraint_UIKitAdditions.m", 1423, @"Setting engine host constraints without hosting an engine");
    }
    objc_setAssociatedObject(a1, sel__layoutEngineHostConstraints, a2, (void *)1);
  }
}

- (id)_createIfNeededAnchorForAssocObjectKey:(objc_class *)a3 class:(uint64_t)a4 withAttribute:
{
  if (a1)
  {
    uint64_t v8 = objc_getAssociatedObject(a1, a2);
    if (!v8)
    {
      uint64_t v8 = (void *)[[a3 alloc] initWithItem:a1 attribute:a4];
      objc_setAssociatedObject(a1, a2, v8, (void *)1);
      if (dyld_program_sdk_at_least())
      {
        if ((_UILayoutAnchorsDeferTrippingWantsAutolayoutFlagUntilUsed() & 1) == 0
          && (!_UIEngineHostingViewsShouldGuardWantsAutolayoutFlagPropagation()
           || ([a1 _hostsLayoutEngine] & 1) == 0))
        {
          [a1 _setWantsAutolayout];
        }
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return v8;
}

- (NSLayoutDimension)widthAnchor
{
  double v3 = (objc_class *)objc_opt_class();
  return (NSLayoutDimension *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewWidthAnchorKey, v3, 7);
}

- (NSLayoutXAxisAnchor)trailingAnchor
{
  double v3 = (objc_class *)objc_opt_class();
  return (NSLayoutXAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewTrailingAnchorKey, v3, 6);
}

- (NSLayoutXAxisAnchor)centerXAnchor
{
  double v3 = (objc_class *)objc_opt_class();
  return (NSLayoutXAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewCenterXAnchorKey, v3, 9);
}

- (NSLayoutYAxisAnchor)bottomAnchor
{
  double v3 = (objc_class *)objc_opt_class();
  return (NSLayoutYAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewBottomAnchorKey, v3, 4);
}

- (NSLayoutYAxisAnchor)lastBaselineAnchor
{
  double v3 = (objc_class *)objc_opt_class();
  return (NSLayoutYAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewLastBaselineAnchorKey, v3, 11);
}

- (void)_generateContentSizeConstraints
{
  if (!a1) {
    return 0;
  }
  memset(__src, 0, sizeof(__src));
  _UIBeginTrackingTraitUsage(a1, 0, __src);
  [a1 intrinsicContentSize];
  double v3 = v2;
  double v5 = v4;
  memcpy(__dst, __src, sizeof(__dst));
  id v6 = (char *)GetTraitCollectionTSD() + 16;
  memcpy(v27, v6, sizeof(v27));
  memcpy(v6, __dst, 0x160uLL);
  -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:](a1, (uint64_t)&v27[136], [a1 methodForSelector:sel_intrinsicContentSize], sel_invalidateIntrinsicContentSize);
  _UITraitUsageTrackingResultDestroy((uint64_t)v27);
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  id v23 = __66__UIView_UIConstraintBasedLayout___generateContentSizeConstraints__block_invoke;
  uint64_t v24 = &unk_1E530E728;
  uint64_t v25 = a1;
  __66__UIView_UIConstraintBasedLayout___generateContentSizeConstraints__block_invoke((uint64_t)v22, v3);
  double v8 = v7;
  double v9 = ((double (*)(void *, double))v23)(v22, v5);
  [a1 _contentHuggingPriorities];
  double v11 = v10;
  double v13 = v12;
  [a1 _contentCompressionResistancePriorities];
  double v15 = v14;
  double v17 = v16;
  uint64_t v18 = (void *)[MEMORY[0x1E4F1CA48] array];
  if (v8 != -1.0 && (v11 != 0.0 || v15 != 0.0))
  {
    double v19 = (void *)[objc_alloc(MEMORY[0x1E4F5B240]) initWithLayoutItem:a1 value:0 huggingPriority:v8 compressionResistancePriority:v11 orientation:v15];
    [v18 addObject:v19];
  }
  if (v9 != -1.0 && (v13 != 0.0 || v17 != 0.0))
  {
    uint64_t v20 = (void *)[objc_alloc(MEMORY[0x1E4F5B240]) initWithLayoutItem:a1 value:1 huggingPriority:v9 compressionResistancePriority:v13 orientation:v17];
    [v18 addObject:v20];
  }
  return v18;
}

void __66__UIView_UIConstraintBasedLayout___generateContentSizeConstraints__block_invoke(uint64_t a1, double a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (fabs(a2) == INFINITY)
  {
    uint64_t v4 = qword_186B9DF80[a2 > 0.0];
    double v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("LayoutConstraints", &qword_1EB25A660) + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412802;
      uint64_t v8 = v6;
      __int16 v9 = 2048;
      double v10 = a2;
      __int16 v11 = 2048;
      uint64_t v12 = v4;
      _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "%@ returned %g for an intrinsicContentSize dimension. Using %g instead.", (uint8_t *)&v7, 0x20u);
    }
  }
}

- (CGSize)_contentHuggingPriorities
{
  if (!self)
  {
    double v5 = 0.0;
    double v6 = 0.0;
LABEL_12:
    double v4 = v6;
    goto LABEL_14;
  }
  id AssociatedObject = objc_getAssociatedObject(self, &_UIViewToContentHuggingPrioritiesAssociatedStorageKey);
  if (!AssociatedObject)
  {
    if ([(UIView *)self _contentHuggingDefault_isUsuallyFixedWidth]) {
      double v6 = 750.0;
    }
    else {
      double v6 = 250.0;
    }
    if ([(UIView *)self _contentHuggingDefault_isUsuallyFixedHeight]) {
      double v5 = 750.0;
    }
    else {
      double v5 = 250.0;
    }
    goto LABEL_12;
  }
  [AssociatedObject sizeValue];
LABEL_14:
  result.double height = v5;
  result.double width = v4;
  return result;
}

- (void)setContentCompressionResistancePriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis
{
  [(UIView *)self _contentCompressionResistancePriorities];
  double v9 = v8;
  double v10 = priority;
  if (axis)
  {
    if (v9 == v10) {
      return;
    }
  }
  else if (v7 == v10)
  {
    return;
  }
  -[UIView _setContentCompressionResistancePriorities:](self, "_setContentCompressionResistancePriorities:");
}

- (UILayoutPriority)contentCompressionResistancePriorityForAxis:(UILayoutConstraintAxis)axis
{
  [(UIView *)self _contentCompressionResistancePriorities];
  if (axis) {
    return v5;
  }
  return v4;
}

- (CGSize)_contentCompressionResistancePriorities
{
  if (!self)
  {
    double v3 = 0.0;
    goto LABEL_7;
  }
  id AssociatedObject = objc_getAssociatedObject(self, &UIViewToContentCompressionResistancePrioritiesAssociatedStorageKey);
  if (!AssociatedObject)
  {
    double v3 = 750.0;
LABEL_7:
    double v4 = v3;
    goto LABEL_9;
  }
  [AssociatedObject sizeValue];
LABEL_9:
  result.double height = v4;
  result.double width = v3;
  return result;
}

- (BOOL)_contentHuggingDefault_isUsuallyFixedWidth
{
  return 0;
}

- (BOOL)_contentHuggingDefault_isUsuallyFixedHeight
{
  return 0;
}

- (CGSize)intrinsicContentSize
{
  unint64_t v3 = [(UIView *)self _axesForDerivingIntrinsicContentSizeFromLayoutSize];
  if (v3)
  {
    char v4 = v3;
    [(UIView *)self _preferredMaxLayoutWidth];
    if (v5 <= 0.0) {
      double v5 = 3.40282347e38;
    }
    [(UIView *)self _layoutSizeThatFits:0 fixedAxes:v5];
    double v8 = -1.0;
    if ((v4 & 1) == 0) {
      double v6 = -1.0;
    }
    if ((v4 & 2) != 0) {
      double v8 = v7;
    }
  }
  else
  {
    -[UIView _intrinsicSizeWithinSize:](self, "_intrinsicSizeWithinSize:", 3.40282347e38, 3.40282347e38);
    double v11 = *MEMORY[0x1E4F5B220];
    if (v9 == 0.0) {
      BOOL v12 = *MEMORY[0x1E4F5B220] > 0.0;
    }
    else {
      BOOL v12 = fabs(v9) < *MEMORY[0x1E4F5B220];
    }
    if (v9 == 3.40282347e38) {
      BOOL v12 = 1;
    }
    double v8 = -1.0;
    if (v12) {
      double v13 = -1.0;
    }
    else {
      double v13 = v9;
    }
    BOOL v14 = v11 > 0.0;
    BOOL v15 = fabs(v10) < v11;
    if (v10 != 0.0) {
      BOOL v14 = v15;
    }
    if (v10 == 3.40282347e38) {
      BOOL v14 = 1;
    }
    if (v14) {
      double v16 = -1.0;
    }
    else {
      double v16 = v10;
    }
    BOOL v17 = v13 == -1.0 && v16 == -1.0;
    double v6 = -1.0;
    if (!v17)
    {
      [(UIView *)self alignmentRectInsets];
      double v20 = v19;
      double v23 = v21 + v22;
      if (v13 == -1.0) {
        double v23 = 0.0;
      }
      double v6 = v13 - v23;
      double v24 = v20 + v18;
      if (v16 == -1.0) {
        double v25 = 0.0;
      }
      else {
        double v25 = v24;
      }
      double v8 = v16 - v25;
    }
  }
  double v26 = v8;
  result.double height = v26;
  result.double width = v6;
  return result;
}

- (void)setContentMode:(UIViewContentMode)contentMode
{
  switch(contentMode)
  {
    case UIViewContentModeScaleAspectFit:
      double v5 = (void *)MEMORY[0x1E4F3A3D8];
      goto LABEL_14;
    case UIViewContentModeScaleAspectFill:
      double v5 = (void *)MEMORY[0x1E4F3A3E0];
      goto LABEL_14;
    case UIViewContentModeRedraw:
      goto LABEL_15;
    case UIViewContentModeCenter:
      double v5 = (void *)MEMORY[0x1E4F3A3C0];
      goto LABEL_14;
    case UIViewContentModeTop:
      double v5 = (void *)MEMORY[0x1E4F3A3A8];
      goto LABEL_14;
    case UIViewContentModeBottom:
      double v5 = (void *)MEMORY[0x1E4F3A3F0];
      goto LABEL_14;
    case UIViewContentModeLeft:
      double v5 = (void *)MEMORY[0x1E4F3A3C8];
      goto LABEL_14;
    case UIViewContentModeRight:
      double v5 = (void *)MEMORY[0x1E4F3A3E8];
      goto LABEL_14;
    case UIViewContentModeTopLeft:
      double v5 = (void *)MEMORY[0x1E4F3A3B0];
      goto LABEL_14;
    case UIViewContentModeTopRight:
      double v5 = (void *)MEMORY[0x1E4F3A3B8];
      goto LABEL_14;
    case UIViewContentModeBottomLeft:
      double v5 = (void *)MEMORY[0x1E4F3A3F8];
      goto LABEL_14;
    case UIViewContentModeBottomRight:
      double v5 = (void *)MEMORY[0x1E4F3A400];
      goto LABEL_14;
    default:
      double v5 = (void *)MEMORY[0x1E4F3A3D0];
LABEL_14:
      [(CALayer *)self->_layer setContentsGravity:*v5];
LABEL_15:
      BOOL v6 = contentMode == UIViewContentModeRedraw;
      [(CALayer *)self->_layer setNeedsDisplayOnBoundsChange:v6];
      *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFDFFFFFFFFFLL | ((unint64_t)v6 << 37);
      return;
  }
}

- (void)_setContentHuggingPriorities:(CGSize)a3
{
  char v4 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithSize:", a3.width, a3.height);
  if (self) {
    objc_setAssociatedObject(self, &_UIViewToContentHuggingPrioritiesAssociatedStorageKey, v4, (void *)1);
  }
  if ([(NSMutableArray *)[(UIView *)self _internalConstraints] count])
  {
    [(UIView *)self invalidateIntrinsicContentSize];
  }
}

- (void)_setContentCompressionResistancePriorities:(CGSize)a3
{
  char v4 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithSize:", a3.width, a3.height);
  if (self) {
    objc_setAssociatedObject(self, &UIViewToContentCompressionResistancePrioritiesAssociatedStorageKey, v4, (void *)1);
  }
  if ([(NSMutableArray *)[(UIView *)self _internalConstraints] count])
  {
    [(UIView *)self invalidateIntrinsicContentSize];
  }
}

- (void)_applyAppearanceInvocations
{
  id v3 = [(UIView *)self window];
  if (v3)
  {
    id v4 = v3;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      if (+[_UIAppearance _hasCustomizationsForClass:objc_opt_class() guideClass:[(UIView *)self _appearanceGuideClass]])
      {
        *(void *)&self->_viewFlags &= ~0x20000000000uLL;
        +[_UIAppearance _applyInvocationsTo:self window:v4];
      }
    }
  }
}

- (Class)_appearanceGuideClass
{
  return 0;
}

- (id)_appearanceContainer
{
  id v3 = +[UIViewController viewControllerForView:self];
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    id v5 = [(UIView *)self superview];
  }
  BOOL v6 = v5;

  return v6;
}

+ (BOOL)_preventsAppearanceProxyCustomization
{
  return 0;
}

- (void)_invalidateAppearanceForSubviewsOfClass:(Class)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (objc_opt_isKindOfClass()) {
    [(UIView *)self _invalidateAppearance];
  }
  id v5 = [(UIView *)self _allSubviews];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        [*(id *)(*((void *)&v10 + 1) + 8 * v9++) _invalidateAppearanceForSubviewsOfClass:a3];
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
}

- (void)insertSubview:(UIView *)view atIndex:(NSInteger)index
{
  if (view)
  {
    if ((index & 0x8000000000000000) == 0) {
      -[UIView _addSubview:positioned:relativeTo:](self, "_addSubview:positioned:relativeTo:");
    }
  }
}

+ (void)_performSystemAppearanceModifications:(id)a3
{
  id v3 = (void (**)(void))a3;
  char v4 = __isObjectTaggingEnabled;
  char v5 = __isSettingUpSystemAppearanceProxyModifications;
  __isObjectTaggingEnabled = 1;
  __isSettingUpSystemAppearanceProxyModifications = 1;
  v3[2]();

  if ((v4 & 1) == 0) {
    __isObjectTaggingEnabled = 0;
  }
  if ((v5 & 1) == 0) {
    __isSettingUpSystemAppearanceProxyModifications = 0;
  }
}

- (void)setContentsPosition:(int)a3
{
  if (a3 > 0xA) {
    id v3 = (void *)MEMORY[0x1E4F3A3D0];
  }
  else {
    id v3 = (void *)qword_1E53101E0[a3];
  }
  [(CALayer *)self->_layer setContentsGravity:*v3];
}

- (void)setClipsToBounds:(BOOL)clipsToBounds
{
  if (self) {
    [(CALayer *)self->_layer setMasksToBounds:clipsToBounds];
  }
}

- (void)dealloc
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!self || (*(void *)&self->_viewFlags & 0x1000) == 0)
  {
    long long v35 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v36 = (objc_class *)objc_opt_class();
    objc_msgSend(v35, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UIView.m", 5049, @"Application circumvented Objective-C runtime dealloc initiation for <%s> object.", class_getName(v36));
  }
  char v4 = (void *)MEMORY[0x18C108260]();
  if ((*((unsigned char *)&self->_viewFlags + 20) & 0x10) != 0) {
    +[UIWindow _unregisterChargedView:self];
  }
  *(void *)&self->_viewFlags |= 0x2000uLL;
  if (!self->_layerRetained) {
    self->_layer = 0;
  }
  -[UIView _layoutConstraintCleanup]((id *)&self->super.super.isa);
  [(UIView *)self _setMaskView:0];
  layerRetained = self->_layerRetained;
  uint64_t v6 = &OBJC_IVAR____UIVectorTextLayoutRun__sourceString;
  if (layerRetained)
  {
    uint64_t v7 = [(CALayer *)layerRetained sublayers];
    uint64_t v8 = (void *)[v7 copy];

    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id v9 = v8;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v42 objects:v47 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v43;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v43 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = (id)[*(id *)(*((void *)&v42 + 1) + 8 * i) unsafeUnretainedDelegate];
          if (v14)
          {
            id v15 = v14;
            if (_IsKindOfUIView((uint64_t)v14)) {
              id v14 = v15;
            }
            else {
              id v14 = 0;
            }
          }
          [v14 removeFromSuperview];
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v42 objects:v47 count:16];
      }
      while (v11);
    }

    [(UIView *)self _invalidateSubviewCache];
    viewBackingAudouble x = self->_viewBackingAux;
    if (viewBackingAux) {
      viewBackingAudouble x = (_UIViewBackingAux *)viewBackingAux->_privateSubviews;
    }
    BOOL v17 = viewBackingAux;
    double v18 = (void *)[(_UIViewBackingAux *)v17 copy];

    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v19 = v18;
    uint64_t v20 = [v19 countByEnumeratingWithState:&v38 objects:v46 count:16];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = *(void *)v39;
      do
      {
        for (uint64_t j = 0; j != v21; ++j)
        {
          if (*(void *)v39 != v22) {
            objc_enumerationMutation(v19);
          }
          -[UIView _backing_removePrivateSubview:]((uint64_t)self, *(void *)(*((void *)&v38 + 1) + 8 * j));
        }
        uint64_t v21 = [v19 countByEnumeratingWithState:&v38 objects:v46 count:16];
      }
      while (v21);
    }

    uint64_t v6 = &OBJC_IVAR____UIVectorTextLayoutRun__sourceString;
  }
  -[UIView _removeAllGestureRecognizers]((uint64_t)self);
  gestureRecognizers = self->_gestureRecognizers;
  self->_gestureRecognizers = 0;

  self->_window = 0;
  [(id)_motionEffectEngine _unregisterAllMotionEffectsForView:self];
  if ((*((void *)&self->_viewFlags + 1) & 0x2000000000) != 0) {
    +[UIDynamicAnimator _clearReferenceViewFromAnimators:self];
  }
  layer = self->_layer;
  if (layer)
  {
    [(CALayer *)self->_layer setUnsafeUnretainedDelegate:0];
    if ((dyld_program_sdk_at_least() & 1) == 0) {
      [(CALayer *)layer setDelegate:0];
    }
    double v26 = (CALayer *)-[UIView _backing_outermostLayer](self);
    if (layer != v26)
    {
      uint64_t v27 = v26;
      [(CALayer *)v26 setUnsafeUnretainedDelegate:0];
      if ((dyld_program_sdk_at_least() & 1) == 0) {
        [(CALayer *)v27 setDelegate:0];
      }
    }
    objc_setAssociatedObject(layer, &unk_1EB25C0B4, 0, (void *)1);
  }
  self->_layer = 0;
  uint64_t v28 = self->_layerRetained;
  self->_layerRetained = 0;

  -[UIBackgroundConfiguration _setCustomView:](*(uint64_t *)((char *)&self->super.super.isa + v6[371]), 0);
  [self _accessibilityFinalize];
  internalConstraints = self->_internalConstraints;
  self->_internalConstraints = 0;

  [(NSISVariable *)self->_boundsWidthVariable setDelegate:0];
  boundsWidthVariable = self->_boundsWidthVariable;
  self->_boundsWidthVariable = 0;

  [(NSISVariable *)self->_boundsHeightVariable setDelegate:0];
  boundsHeightVariable = self->_boundsHeightVariable;
  self->_boundsHeightVariable = 0;

  [(NSISVariable *)self->_minXVariable setDelegate:0];
  minXVariable = self->_minXVariable;
  self->_minXVariable = 0;

  [(NSISVariable *)self->_minYVariable setDelegate:0];
  minYVariable = self->_minYVariable;
  self->_minYVariable = 0;

  constraintsExceptingSubviewAutoresizingConstraints = self->_constraintsExceptingSubviewAutoresizingConstraints;
  self->_constraintsExceptingSubviewAutoresizingConstraints = 0;

  v37.receiver = self;
  v37.super_class = (Class)UIView;
  [(UIResponder *)&v37 dealloc];
}

- (void)removeFromSuperview
{
  p_uint64_t viewFlags = &self->_viewFlags;
  if ((*((unsigned char *)&self->_viewFlags + 24) & 0x10) != 0)
  {
    id v7 = [(UIView *)self superview];
    -[UIView _backing_removePrivateSubview:]((uint64_t)v7, (uint64_t)self);
  }
  else
  {
    char v4 = self;
    id v7 = [(UIView *)v4 window];
    char v5 = [v7 _subtreeMonitorsForView:v4];
    *(void *)((char *)p_viewFlags + 20) |= 0x800000000000uLL;
    __UIViewWillBeRemovedFromSuperview((uint64_t)v4, v5);
    if ((*((unsigned char *)p_viewFlags + 25) & 0x80) != 0)
    {
      id v6 = [(UIView *)v4 superview];
      *(void *)p_viewFlags &= ~0x8000000uLL;
      -[UIView _backing_removeFromSuperview]((uint64_t)v4);
      [(UIResponder *)v4 _clearOverrideNextResponder];
      [(UIResponder *)v4 _clearRestorableResponderStatus];
      _UIViewVisitorEntertainAscendingTrackingVisitors(v6, (uint64_t)v4, (uint64_t)v7, (uint64_t)v6);
      _UIViewVisitorEntertainDescendingTrackingVisitors(v6, (uint64_t)v4, (uint64_t)v7, (uint64_t)v6);
      _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(v4, &__block_literal_global_1184_0);
      __UIViewWasRemovedFromSuperview(v4, v6, v5);
      +[UIFocusRingManager removeRingFromFocusItem:v4];
    }
  }
}

- (void)_backing_removeFromSuperview
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 168);
    if (!v2 || (v3 = *(id *)(v2 + 8), (id v4 = v3) == 0))
    {
      id v4 = 0;
      id v3 = *(id *)(a1 + 160);
    }
    id v5 = v4;
    [v3 removeFromSuperlayer];
  }
}

- (uint64_t)_removeAllGestureRecognizers
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  CGSize result = [*(id *)(result + 80) count];
  if (!result) {
    return result;
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(v1 + 80);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        objc_msgSend(v7, "setView:", 0, (void)v14);
        uint64_t v8 = [(id)UIApp _gestureEnvironment];
        [v8 removeGestureRecognizer:v7];
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }

  id v9 = *(void **)(v1 + 80);
  *(void *)(v1 + 80) = MEMORY[0x1E4F1CBF0];

  CGSize result = (uint64_t)(id)[(id)v1 _window];
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(v1 + 96) & 0x5000;
  BOOL v12 = v11 != 0;
  if (v11 != 4096)
  {
    int v13 = 0;
    if (!result) {
      return result;
    }
    goto LABEL_16;
  }
  if (qword_1EB25C350 != -1) {
    dispatch_once(&qword_1EB25C350, &__block_literal_global_3781);
  }
  CGSize result = objc_opt_isKindOfClass();
  int v13 = result ^ 1;
  BOOL v12 = 1;
  if (v10)
  {
LABEL_16:
    if ((v13 | !v12)) {
      return objc_msgSend((id)objc_msgSend((id)UIApp, "_touchesEventForWindow:", v10), "_invalidateGestureRecognizerForWindowCache");
    }
  }
  return result;
}

- (void)_setMaskView:(id)a3
{
  double v25 = (char *)a3;
  objc_getAssociatedObject(self, &_UIMaskViewKey);
  uint64_t v5 = (_UIViewMaskViewWrapper *)objc_claimAutoreleasedReturnValue();
  uint64_t v6 = [(_UIViewMaskViewWrapper *)v5 maskView];
  if ((char *)v6 != v25)
  {
    uint64_t v7 = *((void *)&self->_viewFlags + 1);
    if ((v7 & 0x400000) != 0)
    {
      double v24 = [MEMORY[0x1E4F28B00] currentHandler];
      [v24 handleFailureInMethod:a2, self, @"UIView.m", 8503, @"Attempted to set a new mask before the view's previous mask had been applied. View: %@", self object file lineNumber description];

      uint64_t v7 = *((void *)&self->_viewFlags + 1);
    }
    int v8 = *((_DWORD *)&self->_viewFlags + 4);
    *(void *)&self->_uint64_t viewFlags = self->_viewFlags;
    *((void *)&self->_viewFlags + 1) = v7 | 0x400000;
    *((_DWORD *)&self->_viewFlags + 4) = v8;
    if (v6)
    {
      id v9 = [(UIView *)self _outermostLayer];
      uint64_t v10 = [v9 mask];
      id v11 = (id)[v10 unsafeUnretainedDelegate];

      if (v11)
      {
        id v12 = _IsKindOfUIView((uint64_t)v11) ? v11 : 0;
        if ((id)v6 == v12)
        {
          [(id)v6 removeFromSuperview];
          [(id)v6 _setOverrideVibrancyTrait:-1];
          [(id)v6 _setOverrideUserInterfaceRenderingMode:0];
          int v13 = [(id)v6 _window];
          if (v13)
          {
            -[UIView _recursivelyUpdateCachedWindowForMoveToWindow:]((void *)v6, 0);
            [(id)v6 _didMoveFromWindow:v13 toWindow:0];
          }
          *(void *)(v6 + 116) = *(void *)(v6 + 116) & 0xFFFEFFDFFFFFFFFFLL | 0x2000000000;
        }
      }
    }
    long long v14 = v25;
    if (v25)
    {
      [v25 _setOverrideVibrancyTrait:0];
      [v25 _setOverrideUserInterfaceRenderingMode:1];
      *(void *)(v25 + 116) &= ~0x2000000000uLL;
      -[UIView addSubview:](self, "addSubview:");
      long long v15 = [(UIView *)self _outermostLayer];
      long long v16 = [v25 layer];
      [v15 setMask:v16];

      if (self->_viewBackingAux)
      {
        *(void *)(v25 + 116) |= 0x1000000000000uLL;
        long long v17 = [v25 layer];
        [v17 frame];
        -[UIView _backing_setFrame:]((uint64_t)v25, v18, v19, v20, v21);
      }
      int v22 = dyld_program_sdk_at_least();
      long long v14 = v25;
      if (v22)
      {
        [(UIView *)self _invalidateSubviewCache];
        long long v14 = v25;
      }
    }
    if (!v5)
    {
      uint64_t v5 = objc_alloc_init(_UIViewMaskViewWrapper);
      objc_setAssociatedObject(self, &_UIMaskViewKey, v5, (void *)1);
      long long v14 = v25;
    }
    uint64_t v23 = v14 != 0;
    [(_UIViewMaskViewWrapper *)v5 setMaskView:v14];
    *((void *)&self->_viewFlags + 1) = *((void *)&self->_viewFlags + 1) & 0xFFFFFFFFFF9FFFFFLL | (v23 << 21);
  }
}

- (void)_layoutConstraintCleanup
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v2 = [a1 _mutableLayoutGuides];
    uint64_t v3 = [v2 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v19 != v5) {
            objc_enumerationMutation(v2);
          }
          uint64_t v7 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          [v7 _setLockedToOwningView:0];
          [v7 _owningViewIsDeallocating];
        }
        uint64_t v4 = [v2 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }
      while (v4);
    }

    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v8 = a1[3];
    uint64_t v9 = [v8 countByEnumeratingWithState:&v14 objects:v22 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v15;
      do
      {
        for (uint64_t j = 0; j != v10; ++j)
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v8);
          }
          objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * j), "setContainer:", 0, (void)v14);
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v14 objects:v22 count:16];
      }
      while (v10);
    }

    int v13 = [a1 _layoutEngine];
    [a1 _discardLayoutEngine:v13];
  }
}

- (void)_discardLayoutEngine:(id)a3
{
  if (a3) {
    discardEngineRecursive(self, a3);
  }
}

- (void)_addGestureRecognizer:(int)a3 atEnd:
{
  id v5 = a2;
  if (a1)
  {
    id v14 = v5;
    uint64_t v6 = [v5 view];
    if (v6 != (void *)a1)
    {
      if ((*(void *)(a1 + 96) & 0x1000) == 0)
      {
        uint64_t v7 = (void *)[*(id *)(a1 + 80) mutableCopy];
        id v8 = v7;
        if (v7) {
          id v9 = v7;
        }
        else {
          id v9 = (id)objc_opt_new();
        }
        uint64_t v10 = v9;

        if (a3) {
          uint64_t v11 = [v10 count];
        }
        else {
          uint64_t v11 = 0;
        }
        [v10 insertObject:v14 atIndex:v11];
        uint64_t v12 = [v10 copy];
        int v13 = *(void **)(a1 + 80);
        *(void *)(a1 + 80) = v12;

        _UIGestureRecognizerRegisterInContainer((uint64_t)v14, (id)a1);
      }
      -[UIView _removeGestureRecognizer:](v6, v14);
    }

    id v5 = v14;
  }
}

- (void)_removeGestureRecognizer:(void *)a1
{
  if (a1)
  {
    uint64_t v3 = (void *)a1[10];
    id v4 = a2;
    id v8 = (id)[v3 mutableCopy];
    [v8 removeObject:v4];
    uint64_t v5 = [v8 copy];
    uint64_t v6 = (void *)a1[10];
    a1[10] = v5;

    _UIGestureRecognizerUnregisterFromContainer((uint64_t)v4, a1);
    id v7 = (id)[a1 _window];
    if (v7) {
      objc_msgSend((id)objc_msgSend((id)UIApp, "_touchesEventForWindow:", v7), "_invalidateGestureRecognizerForWindowCache");
    }
  }
}

- (void)_willRemoveSubviewWantingAutolayout:(void *)a1
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if ((a1[12] & 0x1000) == 0)
  {
    [a1 _allSubviews];
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          if (v9 != v3 && (v9[12] & 0x400000000000000) != 0)
          {

            goto LABEL_15;
          }
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v6);
    }

    a1[12] &= ~0x800000000000000uLL;
LABEL_15:
  }
}

- (void)_setOverrideVibrancyTrait:(int64_t)a3
{
  id v4 = -[UIView _internalTraitOverrides](self);
  id v5 = v4;
  if (a3 == -1) {
    [v4 _removeTraitToken:0x1ED3F5C40];
  }
  else {
    [v4 _setNSIntegerValue:a3 forTraitToken:0x1ED3F5C40];
  }
}

uint64_t __38__UIView_Geometry__hitTest_withEvent___block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

+ (BOOL)_addCompletion:(id)a3
{
  BOOL result = __currentViewAnimationState;
  if (__currentViewAnimationState) {
    return [(id)__currentViewAnimationState _addCompletion:a3];
  }
  return result;
}

- (CGSize)sizeThatFits:(CGSize)size
{
  [(UIView *)self bounds];
  double v4 = v3;
  double v6 = v5;
  result.double height = v6;
  result.double width = v4;
  return result;
}

+ (BOOL)_hasInProcessProgressAnimator
{
  return off_1E8FAEFD0 != 0;
}

- (CGPoint)convertPoint:(CGPoint)a3 toCoordinateSpace:(id)a4
{
  -[UIView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", a4, a3.x, a3.y, *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8));
  result.double y = v5;
  result.double x = v4;
  return result;
}

- (CGSize)_systemLayoutSizeFittingSize:(CGSize)a3 withHorizontalFittingPriority:(float)a4 verticalFittingPriority:(float)a5 hasIntentionallyCollapsedHeight:(BOOL *)a6
{
  double height = a3.height;
  double width = a3.width;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if ((-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self) & 1) == 0) {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"NSLayoutConstraint_UIKitAdditions.m", 3207, @"Improper use of internal layout method with view that does not want auto layout");
  }
  long long v13 = [(UIView *)self superview];
  if (![(UIView *)v13 _forwardsSystemLayoutFittingSizeToContentView:self])long long v13 = self; {
  if ((*((void *)&v13->_viewFlags + 1) & 4) == 0)
  }
  {
    int has_internal_diagnostics = os_variant_has_internal_diagnostics();
    uint64_t v15 = *((void *)&self->_viewFlags + 1);
    if (has_internal_diagnostics)
    {
      if ((v15 & 0x2000) != 0)
      {
        long long v39 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
        {
          LODWORD(v41.receiver) = 138412290;
          *(id *)((char *)&v41.receiver + 4) = NSStringFromSelector(a2);
          _os_log_fault_impl(&dword_1853B0000, v39, OS_LOG_TYPE_FAULT, "Internal UIKit problem. Unexpected re-entrance in %@", (uint8_t *)&v41, 0xCu);
        }
      }
    }
    else if ((v15 & 0x2000) != 0)
    {
      long long v40 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25A670) + 8);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v41.receiver) = 138412290;
        *(id *)((char *)&v41.receiver + 4) = NSStringFromSelector(a2);
        _os_log_impl(&dword_1853B0000, v40, OS_LOG_TYPE_ERROR, "Internal UIKit problem. Unexpected re-entrance in %@", (uint8_t *)&v41, 0xCu);
      }
    }
    *((void *)&self->_viewFlags + 1) = (*((void *)&self->_viewFlags + 1) & 0xFFFFFFFFFFFFDFFFLL | (((*(void *)&self->_viewFlags >> 53) & 1) << 13)) ^ 0x2000;
    [(UIView *)v13 _updateConstraintsIfNeededWithViewForVariableChangeNotifications:self];
    *((void *)&self->_viewFlags + 1) &= ~0x2000uLL;
  }
  id v16 = [(UIView *)self _previousFittingSizeInfo];
  uint64_t v17 = objc_msgSend((id)objc_msgSend(v16, "allKeys"), "objectAtIndexedSubscript:", 0);
  long long v18 = [_UIViewFittingSizeTargetInfo alloc];
  if (v18)
  {
    v41.receiver = v18;
    v41.super_class = (Class)_UIViewFittingSizeTargetInfo;
    long long v19 = [(UIView *)&v41 init];
    long long v20 = v19;
    if (v19)
    {
      *(double *)&v19->_constraintsExceptingSubviewAutoresizingConstraints = width;
      *(double *)&v19->_cachedTraitCollection = height;
      *((float *)&v19->super._responderFlags + 1) = a4;
      *(float *)&v19->super.__layeringSceneIdentitdouble y = a5;
    }
  }
  else
  {
    long long v20 = 0;
  }
  long long v21 = [(UIView *)self _layoutEngine];
  uint64_t v24 = v21;
  if (v16 && v21)
  {
    if ((*((void *)&self->_viewFlags + 1) & 0x400) == 0
      && ([(UIView *)v20 isEqualToTargetInfo:v17] & 1) != 0)
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "objectForKey:", v17), "objectForKey:", @"layoutSize"), "CGSizeValue");
      double v26 = v25;
      double v28 = v27;
      if (a6) {
        *a6 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v16, "objectForKey:", v17), "objectForKey:", @"intentionallyCollapsedHeight"), "BOOLValue");
      }
      goto LABEL_35;
    }
    *(float *)&double v22 = a4;
    *(float *)&double v23 = a5;
    -[UIView _calculatedSystemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:](self, "_calculatedSystemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:", a6, width, height, v22, v23);
    double v26 = v32;
    double v28 = v33;
    if (!a6) {
      goto LABEL_22;
    }
  }
  else
  {
    *(float *)&double v22 = a4;
    *(float *)&double v23 = a5;
    -[UIView _calculatedSystemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:](self, "_calculatedSystemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:", a6, width, height, v22, v23);
    double v26 = v29;
    double v28 = v30;
    if (!v24) {
      goto LABEL_35;
    }
    if (!a6)
    {
LABEL_22:
      BOOL v31 = 1;
      goto LABEL_23;
    }
  }
  BOOL v31 = *a6;
LABEL_23:
  -[UIView _setPreviousFittingSizeInfo:](self, "_setPreviousFittingSizeInfo:", [MEMORY[0x1E4F1C9E8] dictionaryWithObject:_layoutSizeInfo(v31) forKey:v20]);
  *((void *)&self->_viewFlags + 1) &= ~0x400uLL;
  [(UIView *)self _resetNeedsSystemLayoutFittingSizeUpdateInSubtreeForLayoutEngine:v24];
  if (dyld_program_sdk_at_least()
    && [(UIView *)self translatesAutoresizingMaskIntoConstraints]
    && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    uint64_t viewFlags = (uint64_t)self->_viewFlags;
    if ((viewFlags & 0x1000000000000) != 0)
    {
      [(UIView *)self _recalculateStrictDescendantNeedsDoubleUpdateConstraints];
      uint64_t viewFlags = (uint64_t)self->_viewFlags;
    }
    uint64_t v35 = *((void *)&self->_viewFlags + 1);
    int v36 = *((_DWORD *)&self->_viewFlags + 4);
    if ((viewFlags & 0x800000000000) != 0)
    {
      *(void *)&self->_uint64_t viewFlags = viewFlags & 0xFFFFDFFFFFFFFFFFLL;
      *((void *)&self->_viewFlags + 1) = v35;
      *((_DWORD *)&self->_viewFlags + 4) = v36;
      if ((viewFlags & 0x400000000000000) != 0) {
        goto LABEL_34;
      }
      if (qword_1EB25A6C0 != -1) {
        dispatch_once(&qword_1EB25A6C0, &__block_literal_global_855_0);
      }
      if (!byte_1EB25A5B2) {
LABEL_34:
      }
        [(UIView *)self _informContainerThatSubviewsNeedUpdateConstraintsNeedingLayout:0];
      else {
        [(UIView *)self setNeedsLayout];
      }
    }
  }
LABEL_35:

  if ((*((void *)&self->_viewFlags + 1) & 4) == 0
    && (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)
     && !objc_msgSend(-[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints"), "count")
     || -[UIView _usesAutoresizingConstraints]((uint64_t)self)
     && ![(id)-[UIView _autoresizingConstraints](self) count]))
  {
    [(UIView *)self _setNeedsUpdateConstraints];
  }
  double v37 = v26;
  double v38 = v28;
  result.double height = v38;
  result.double width = v37;
  return result;
}

- (void)_updateConstraintsAsNecessaryAndApplyLayoutFromEngine
{
  if (a1)
  {
    id v2 = [(id)a1 superview];
    kdebug_trace();

    uint64_t v31 = 0;
    memset(v30, 0, sizeof(v30));
    int v3 = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIViewDebugSignposts, @"UIViewDebugSignposts", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = __74__UIView_Hierarchy___updateConstraintsAsNecessaryAndApplyLayoutFromEngine__block_invoke;
    v29[3] = &unk_1E530C048;
    v29[4] = a1;
    double v4 = objc_msgSend((id)a1, "_layoutEngine", _UIScopedSignpostIntervalInit((uint64_t)v30, (byte_1EB256E34 != 0) & ~v3, (uint64_t)v29));
    if (v4)
    {
    }
    else if (-[UIView _usesLayoutEngineHostingConstraints](a1))
    {
      id v5 = (id)[(id)a1 _layoutEngineCreateIfNecessary];
    }
    -[UIView _updateConstraintsAtEngineLevelIfNeededWithViewForVariableChangeNotifications:]((void *)a1, (void *)a1);
    if ((*(void *)(a1 + 96) & 0x800000000000000) != 0)
    {
      id v6 = *(id *)(a1 + 88);
      uint64_t v7 = [v6 _parentContentContainer];
      id v8 = [v6 _previousFittingSizeInfo];
      if (v8 && [v7 _monitorsSystemLayoutFittingSize])
      {
        if ([v8 count]
          && ([v8 allKeys],
              long long v11 = objc_claimAutoreleasedReturnValue(),
              [v11 objectAtIndexedSubscript:0],
              uint64_t v12 = objc_claimAutoreleasedReturnValue(),
              v11,
              v12))
        {
          long long v13 = [v8 objectForKeyedSubscript:v12];
          long long v14 = [v13 objectForKeyedSubscript:@"layoutSize"];
          [v14 CGSizeValue];
          double v16 = v15;
          double v18 = v17;

          int v20 = *(_DWORD *)(v12 + 12);
          int v19 = *(_DWORD *)(v12 + 16);
          double v21 = *(double *)(v12 + 24);
          double v22 = *(double *)(v12 + 32);
        }
        else
        {
          uint64_t v12 = 0;
          double v16 = *MEMORY[0x1E4F1DB30];
          double v18 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
          int v19 = 1112014848;
          int v20 = 1112014848;
          double v21 = *MEMORY[0x1E4F1DB30];
          double v22 = v18;
        }
        uint64_t v23 = *(void *)(a1 + 96);
        if ((v23 & 0x1000000000000) != 0)
        {
          [(id)a1 _recalculateStrictDescendantNeedsDoubleUpdateConstraints];
          uint64_t v23 = *(void *)(a1 + 96);
        }
        if ((v23 & 0x800000000000) != 0 && (objc_msgSend((id)a1, "_nsis_bounds"), CGRectGetWidth(v32) != v21)
          || (LODWORD(v9) = v20,
              LODWORD(v10) = v19,
              objc_msgSend((id)a1, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", v21, v22, v9, v10), v16 != v25)|| v18 != v24|| v12 && *(unsigned char *)(v12 + 8))
        {
          [v7 _systemLayoutFittingSizeDidChangeForChildContentContainer:v6 childViewController:v6];
          [v6 _setPreviousFittingSizeInfo:0];
        }
      }
      if ((*(void *)(a1 + 104) & 0x200) != 0)
      {
        [(id)a1 invalidateIntrinsicContentSize];
        double v26 = [(id)a1 _layoutEngine];
        if (v26) {
          [(id)a1 _resetNeedsSystemLayoutFittingSizeUpdateInSubtreeForLayoutEngine:v26];
        }
      }
      objc_msgSend((id)a1, "_is_layout");
      if ((*(void *)(a1 + 96) & 0x40000000000000) == 0)
      {
        double v28 = [MEMORY[0x1E4F28B00] currentHandler];
        [v28 handleFailureInMethod:sel__updateConstraintsAsNecessaryAndApplyLayoutFromEngine object:a1 file:@"UIView.m" lineNumber:14398 description:@"layout should have been successfully accomplished"];
      }
    }
    else if (dyld_program_sdk_at_least())
    {
      *(void *)(a1 + 96) |= 0x40000000000000uLL;
    }
    double v27 = [(id)a1 superview];
    kdebug_trace();

    if (LODWORD(v30[0])) {
      kdebug_trace();
    }
  }
}

- (void)_updateConstraintsAtEngineLevelIfNeededWithViewForVariableChangeNotifications:(void *)result
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    id v2 = result;
    if ((result[13] & 0x44) == 0)
    {
      double v4 = objc_msgSend((id)objc_msgSend(result, "_layoutEngine"), "delegate");
      if (v4) {
        id v5 = v4;
      }
      else {
        id v5 = v2;
      }
      uint64_t v6 = v5[12];
      if ((~v6 & 0x300000000000) != 0)
      {
        id v8 = v2 + 12;
        uint64_t v9 = v2[12];
        if (v9 < 0)
        {
          uint64_t v10 = v5[13];
          int v11 = *((_DWORD *)v5 + 28);
          v5[12] = v6;
          v5[13] = v10 | 0x20;
          *((_DWORD *)v5 + 28) = v11;
          uint64_t v9 = *v8;
        }
        int v12 = *((_DWORD *)v2 + 28);
        uint64_t v13 = v2[13] | 0x40;
        uint64_t *v8 = v9;
        v2[13] = v13;
        *((_DWORD *)v2 + 28) = v12;
        [v4 _createJostledViewsIfNecessary];
        [v5 _updateConstraintsIfNeededWithViewForVariableChangeNotifications:a2];
        v2[13] &= ~0x40uLL;
        long long v14 = (void *)[v2 _layoutEngine];
        double v15 = (void *)[v14 delegate];
        double v16 = (void *)[v15 _viewsJostledDuringUpdateConstraintsPassSuppressingDebugAssertion:1];
        v5[13] &= ~0x20uLL;
        [v2 _setViewsJostledDuringUpdateConstraintsPass:0];
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        obuint64_t j = v16;
        CGSize result = (void *)[v16 countByEnumeratingWithState:&v50 objects:v55 count:16];
        if (result)
        {
          double v17 = result;
          uint64_t v39 = *(void *)v51;
          do
          {
            double v18 = 0;
            do
            {
              if (*(void *)v51 != v39) {
                objc_enumerationMutation(obj);
              }
              int v19 = *(void **)(*((void *)&v50 + 1) + 8 * (void)v18);
              long long v46 = 0u;
              long long v47 = 0u;
              long long v48 = 0u;
              long long v49 = 0u;
              int v20 = (void *)[v19 _allSubviews];
              uint64_t v21 = [v20 countByEnumeratingWithState:&v46 objects:v54 count:16];
              if (v21)
              {
                uint64_t v22 = v21;
                uint64_t v23 = *(void *)v47;
                while (2)
                {
                  for (uint64_t i = 0; i != v22; ++i)
                  {
                    if (*(void *)v47 != v23) {
                      objc_enumerationMutation(v20);
                    }
                    double v25 = *(void **)(*((void *)&v46 + 1) + 8 * i);
                    if ([v25 _wantsAutolayout]
                      && ([v25 translatesAutoresizingMaskIntoConstraints] & 1) == 0)
                    {
                      long long v44 = 0u;
                      long long v45 = 0u;
                      double v42 = 0.0;
                      double v43 = 0.0;
                      if ((dyld_program_sdk_at_least() & 1) != 0
                        || v15 && [v15 _forceLayoutEngineSolutionInRationalEdges])
                      {
                        if (v25) {
                          -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](v25, &v42, (double *)&v44, v14, 0);
                        }
                      }
                      else
                      {
                        CGFloat v40 = 0.0;
                        CGFloat v41 = 0.0;
                        objc_msgSend(v25, "_nsis_origin:bounds:inEngine:", &v40, &v44, v14);
                        [v25 frame];
                        CGFloat width = v58.size.width;
                        CGFloat height = v58.size.height;
                        CGFloat v28 = v40;
                        CGFloat v29 = v41;
                        v58.origin.double x = v40;
                        v58.origin.double y = v41;
                        CGFloat MidX = CGRectGetMidX(v58);
                        v59.origin.double x = v28;
                        v59.origin.double y = v29;
                        v59.size.CGFloat width = width;
                        v59.size.CGFloat height = height;
                        CGFloat MidY = CGRectGetMidY(v59);
                        double v42 = MidX;
                        double v43 = MidY;
                      }
                      [v25 center];
                      BOOL v34 = v42 == v33 && v43 == v32;
                      if (!v34
                        || (([v25 bounds], *(double *)&v45 == v36)
                          ? (BOOL v37 = *((double *)&v45 + 1) == v35)
                          : (BOOL v37 = 0),
                            !v37))
                      {
                        [v19 setNeedsLayout];
                        goto LABEL_46;
                      }
                    }
                  }
                  uint64_t v22 = [v20 countByEnumeratingWithState:&v46 objects:v54 count:16];
                  if (v22) {
                    continue;
                  }
                  break;
                }
              }
LABEL_46:
              double v18 = (void *)((char *)v18 + 1);
            }
            while (v18 != v17);
            CGSize result = (void *)[obj countByEnumeratingWithState:&v50 objects:v55 count:16];
            double v17 = result;
          }
          while (result);
        }
      }
      else
      {
        CGSize result = (void *)-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)a2);
        if (result)
        {
          uint64_t v7 = [a2 _layoutEngine];
          return (void *)-[NSISEngine _UIKitPerformPendingChangeNotifications](v7);
        }
      }
    }
  }
  return result;
}

- (void)_is_layout
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v3 = [(UIView *)self _layoutEngine];
  p_unint64_t viewFlags = &self->_viewFlags;
  unint64_t viewFlags = (unint64_t)self->_viewFlags;
  uint64_t v5 = *((void *)&self->_viewFlags + 1);
  int v7 = *((_DWORD *)&self->_viewFlags + 4);
  if (v3)
  {
    id v8 = v3;
    *(void *)p_unint64_t viewFlags = viewFlags | 0x1000000000000000;
    *((void *)&self->_viewFlags + 1) = v5;
    *((_DWORD *)&self->_viewFlags + 4) = v7;
    [(UIView *)self bounds];
    -[UIView resizeSubviewsWithOldSize:](self, "resizeSubviewsWithOldSize:", v9, v10);
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    int v11 = [(UIView *)self layoutGuides];
    uint64_t v12 = [(NSArray *)v11 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v17;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v17 != v14) {
            objc_enumerationMutation(v11);
          }
          [*(id *)(*((void *)&v16 + 1) + 8 * i) _updateLayoutFrameInOwningView:self fromEngine:v8];
        }
        uint64_t v13 = [(NSArray *)v11 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v13);
    }
    int v7 = *((_DWORD *)&self->_viewFlags + 4);
    uint64_t v5 = *((void *)&self->_viewFlags + 1);
    unint64_t viewFlags = *(void *)&self->_viewFlags & 0xEFFFFFFFFFFFFFFFLL;
  }
  *(void *)p_unint64_t viewFlags = viewFlags | 0x40000000000000;
  *((void *)&self->_viewFlags + 1) = v5;
  *((_DWORD *)&self->_viewFlags + 4) = v7;
}

- (void)_updateConstraintsIfNeededWithViewForVariableChangeNotifications:(id)a3
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:3];
  v49[0] = MEMORY[0x1E4F143A8];
  v49[1] = 3221225472;
  v49[2] = __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke;
  v49[3] = &unk_1E52EBA80;
  v49[4] = self;
  v49[5] = v5;
  [(UIView *)self _withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:v49];
  if ((*(void *)&self->_viewFlags & 0x200000000000) == 0)
  {
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 3221225472;
    long long v45 = __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_3;
    long long v46 = &unk_1E52EBA80;
    long long v47 = self;
    long long v48 = v5;
    uint64_t v6 = [(UIView *)self _layoutEngine];
    if (v6) {
      [(NSISEngine *)v6 withAutomaticOptimizationDisabled:v44];
    }
    else {
      v45((uint64_t)v44);
    }
  }
  int v7 = (void *)[v5 objectForKeyedSubscript:@"_UIViewsNeedingSecondPass"];
  if ([v7 count])
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v40 objects:v51 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v41;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v41 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void **)(*((void *)&v40 + 1) + 8 * i);
          [v12 _setNeedsUpdateConstraintsNeedingLayout:0];
          [v12 _setInSecondConstraintsPass:1];
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v40 objects:v51 count:16];
      }
      while (v9);
    }
    v36[0] = MEMORY[0x1E4F143A8];
    v36[1] = 3221225472;
    BOOL v37 = __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_4;
    double v38 = &unk_1E52DC580;
    uint64_t v39 = self;
    if (self)
    {
      uint64_t v13 = [(UIView *)self _layoutEngine];
      if (v13) {
        [(NSISEngine *)v13 withAutomaticOptimizationDisabled:v36];
      }
      else {
        v37((uint64_t)v36);
      }
    }
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v14 = [v7 countByEnumeratingWithState:&v32 objects:v50 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v33;
      do
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          if (*(void *)v33 != v16) {
            objc_enumerationMutation(v7);
          }
          long long v18 = *(void **)(*((void *)&v32 + 1) + 8 * j);
          [v18 _setInSecondConstraintsPass:0];
          -[UIView _notifyArrangementsOfChangeInItem:withSelector:](v18, v18, (uint64_t)sel__didEvaluateMultilineHeightForView_);
        }
        uint64_t v15 = [v7 countByEnumeratingWithState:&v32 objects:v50 count:16];
      }
      while (v15);
    }
  }
  long long v19 = (void *)[v5 objectForKeyedSubscript:@"_UIViewsNeedingBaselineUpdate"];
  if ([v19 count])
  {
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    CGFloat v29 = __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_5;
    double v30 = &unk_1E52DC580;
    uint64_t v31 = v19;
    if (self)
    {
      int v20 = [(UIView *)self _layoutEngine];
      if (v20) {
        [(NSISEngine *)v20 withAutomaticOptimizationDisabled:v28];
      }
      else {
        v29((uint64_t)v28);
      }
    }
  }
  uint64_t v21 = (void *)[v5 objectForKeyedSubscript:@"_UIViewsPotentialTAMIC_NOEngineHosts"];
  if ([v21 count])
  {
    uint64_t v23 = MEMORY[0x1E4F143A8];
    uint64_t v24 = 3221225472;
    double v25 = __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_6;
    double v26 = &unk_1E52DC580;
    double v27 = v21;
    if (self)
    {
      id v22 = [(UIView *)self _layoutEngineCreateIfNecessary];
      if (v22) {
        [v22 withAutomaticOptimizationDisabled:&v23];
      }
      else {
        v25((uint64_t)&v23);
      }
    }
  }

  if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)a3)) {
    -[NSISEngine _UIKitPerformPendingChangeNotifications]([a3 _layoutEngine]);
  }
}

- (void)_setViewsJostledDuringUpdateConstraintsPass:(id)a3
{
  id value = a3;
  double v4 = [(UIView *)self _layoutEngine];
  uint64_t v5 = [v4 delegate];

  if (v5) {
    objc_setAssociatedObject(v5, &_UIViewsJostledDuringUpdateConstraintsPassKey, value, (void *)1);
  }
}

- (BOOL)_forwardsSystemLayoutFittingSizeToContentView:(id)a3
{
  return 0;
}

- (void)_setInSecondConstraintsPass:(BOOL)a3
{
  uint64_t v3 = 0x8000000000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_unint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFF7FFFFFFFFFFFFLL | v3;
}

- (void)_resetNeedsSystemLayoutFittingSizeUpdateInSubtreeForLayoutEngine:(id)a3
{
  uint64_t v3 = [a3 delegate];
  if (v3) {
    *(void *)(v3 + 104) &= ~0x800uLL;
  }
}

- (void)_setPreviousFittingSizeInfo:(id)a3
{
}

uint64_t __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateConstraintsIfNeededCollectingViews:0 forSecondPass:1];
}

uint64_t __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_3(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateConstraintsIfNeededCollectingViews:*(void *)(a1 + 40) forSecondPass:0];
}

- (void)updateConstraintsIfNeeded
{
}

- (void)_setIdleModeLayoutAttributes:(id)a3
{
}

- (BOOL)_containedInAbsoluteResponderChain
{
  if (self && (*((void *)&self->_viewFlags + 1) & 0x30000) != 0) {
    return 0;
  }
  uint64_t v3 = [(UIView *)self nextResponder];
  char v4 = [v3 _containedInAbsoluteResponderChain];

  return v4;
}

- (_UIFocusPlatformBehavior)_focusBehavior
{
  id v2 = [(UIView *)self _focusSystem];
  uint64_t v3 = [v2 behavior];

  return (_UIFocusPlatformBehavior *)v3;
}

- (void)_setFirstResponder:(id)a3
{
  id v4 = a3;
  v22.receiver = self;
  v22.super_class = (Class)UIView;
  [(UIResponder *)&v22 _setFirstResponder:v4];
  id v5 = v4;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v6 = 128;
  id v21 = v5;
  -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)self, &v6);
}

+ (void)_setIsResponderAncestorOfFirstResponder:(void *)a3 startingAtFirstResponder:
{
  id v6 = a3;
  self;
  if (v6)
  {
    id v4 = v6;
    do
    {
      if (_IsKindOfUIView((uint64_t)v4))
      {
        [v4 _setIsAncestorOfFirstResponder:a2];
        id v5 = (id)[v4 superview];
      }
      else
      {
        id v5 = (id)[v4 nextResponder];
      }
      id v4 = v5;
    }
    while (v5);
  }
}

- (void)_setIsAncestorOfFirstResponder:(BOOL)a3
{
  uint64_t v3 = 0x10000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_unint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFFFFFFEFFFFLL | v3;
}

- (UIView)initWithFrame:(CGRect)frame
{
  double height = frame.size.height;
  double width = frame.size.width;
  double y = frame.origin.y;
  double x = frame.origin.x;
  v10.receiver = self;
  v10.super_class = (Class)UIView;
  long long v7 = [(UIView *)&v10 init];
  long long v8 = v7;
  if (v7)
  {
    *(void *)&v7->_viewFlags |= 0x4000400uLL;
    UIViewCommonInitWithFrame(v7, x, y, width, height);
    if (__invalidatesViewUponCreation) {
      [(UIView *)v8 setNeedsDisplay];
    }
    *(void *)&v8->_viewFlags &= ~0x4000000uLL;
    if (_UIConstraintBasedLayoutEngageNonLazily()) {
      *(void *)&v8->_viewFlags |= 0x400000000000000uLL;
    }
  }
  return v8;
}

- (void)setUserInteractionEnabled:(BOOL)userInteractionEnabled
{
  unint64_t viewFlags = (unint64_t)self->_viewFlags;
  if (((viewFlags >> 1) & 1) == userInteractionEnabled)
  {
    uint64_t v5 = *((void *)&self->_viewFlags + 1);
    int v6 = *((_DWORD *)&self->_viewFlags + 4);
    uint64_t v7 = 2;
    if (userInteractionEnabled) {
      uint64_t v7 = 0;
    }
    *(void *)&self->_unint64_t viewFlags = viewFlags & 0xFFFFFFFFFFFFFFFDLL | v7;
    *((void *)&self->_viewFlags + 1) = v5;
    *((_DWORD *)&self->_viewFlags + 4) = v6;
    if (userInteractionEnabled)
    {
      [(UIView *)self _promoteSelfOrDescendantToFirstResponderIfNecessary];
    }
    else
    {
      id v9 = [(UIView *)self _firstResponder];
      long long v8 = [v9 _responderForBecomeFirstResponder];
      if (v9)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0
          && [(UIView *)self containsView:v9]
          && (objc_opt_respondsToSelector() & 1) != 0
          && [(UIView *)self _shouldResignFirstResponderWithInteractionDisabled])
        {
          [v9 resignFirstResponder];
          [v8 _becomeFirstResponderWhenPossible];
        }
      }
    }
  }
}

- (id)_firstResponder
{
  id v2 = [(UIResponder *)self _responderWindow];
  uint64_t v3 = [v2 _firstResponder];

  return v3;
}

- (id)nextResponder
{
  uint64_t v3 = [(UIResponder *)self _nextResponderOverride];
  if (!v3 && ((*(_DWORD *)&self->_viewFlags & 0x80000000) == 0 || (uint64_t v3 = self->_viewDelegate) == 0))
  {
    uint64_t v3 = [(UIView *)self superview];
  }
  return v3;
}

- (id)registerForTraitChanges:(id)a3 withHandler:(id)a4
{
  id v6 = a4;
  uint64_t v7 = +[UITraitCollection _traitTokensIncludingPlaceholdersForTraits:]((uint64_t)UITraitCollection, a3);
  long long v8 = [(UIView *)self _registerForTraitTokenChanges:v7 withHandler:v6];

  return v8;
}

- (id)_registerForTraitTokenChanges:(id)a3 withHandler:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  traitChangeRegistrdouble y = self->_traitChangeRegistry;
  if (!traitChangeRegistry)
  {
    id v9 = objc_alloc_init(_UITraitChangeRegistry);
    objc_super v10 = self->_traitChangeRegistry;
    self->_traitChangeRegistrdouble y = v9;

    traitChangeRegistrdouble y = self->_traitChangeRegistry;
  }
  long long v11 = -[_UITraitChangeRegistry registerForTraitTokenChanges:withHandler:]((uint64_t)traitChangeRegistry, v6, v7);

  return v11;
}

- (void)_clearBecomeFirstResponderWhenCapable
{
  *(void *)&self->_viewFlags &= ~0x800uLL;
}

- (void)setNeedsDisplayInRect:(CGRect)rect
{
  double height = rect.size.height;
  double width = rect.size.width;
  double y = rect.origin.y;
  double x = rect.origin.x;
  if ((*(void *)&self->_viewFlags & 0x11000000) == 0x1000000 || [(UIView *)self _canDrawContent])
  {
    -[CALayer setNeedsDisplayInRect:](self->_layer, "setNeedsDisplayInRect:", x, y, width, height);
    UIViewDidSetNeedsDisplay(self);
  }
}

uint64_t __54__UIView__recursivelyReconsiderMotionEffectSuspension__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (-[UIView _isInHierarchyAllowingMotionEffects]((uint64_t)v2))
  {
    if (v2) {
      [(id)_motionEffectEngine endSuspendingMotionEffectsForView:v2];
    }
  }
  else if (v2)
  {
    [(id)_motionEffectEngine beginSuspendingMotionEffectsForView:v2];
  }

  return 1;
}

- (void)_recursivelyConsiderResumingMotionEffects
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1 && -[UIView _isInHierarchyAllowingMotionEffects]((uint64_t)a1))
  {
    [(id)_motionEffectEngine endSuspendingMotionEffectsForView:a1];
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v2 = objc_msgSend(a1, "subviews", 0);
    uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v8;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v8 != v5) {
            objc_enumerationMutation(v2);
          }
          _UIViewRecursivelyApplyBlockToSubtreesWithMotionEffects(*(void **)(*((void *)&v7 + 1) + 8 * v6++), &__block_literal_global_1186_0);
        }
        while (v4 != v6);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      }
      while (v4);
    }
  }
}

- (void)_isInHierarchyAllowingMotionEffects
{
  uint64_t v1 = (void *)a1;
  if (a1)
  {
    if (-[UIView _isInVisibleHierarchy](a1))
    {
      id v2 = [v1 _window];
      uint64_t v3 = [v2 _windowHostingScene];
      uint64_t v1 = (void *)([v3 _sceneSessionRoleIsCarPlayOrNonInteractiveExternal] ^ 1);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

- (BOOL)isUserInteractionEnabled
{
  return (*(void *)&self->_viewFlags & 2) == 0;
}

- (uint64_t)_isInVisibleHierarchy
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    CGSize result = [(id)result _isInAWindow];
    if (result)
    {
      id v2 = v1;
      while (([v2 isHidden] & 1) == 0)
      {
        [v2 alpha];
        if (v3 < 0.01) {
          break;
        }
        uint64_t v4 = [v2 superview];

        id v2 = (id)v4;
        if (!v4) {
          return 1;
        }
      }

      return 0;
    }
  }
  return result;
}

- (BOOL)_isInAWindow
{
  return self->_window != 0;
}

- (void)_setOverrideUserInterfaceRenderingMode:(int64_t)a3
{
  uint64_t v4 = -[UIView _internalTraitOverrides](self);
  id v5 = v4;
  if (a3) {
    [v4 _setNSIntegerValue:a3 forTraitToken:0x1ED3F5C58];
  }
  else {
    [v4 _removeTraitToken:0x1ED3F5C58];
  }
}

- (id)_internalTraitOverrides
{
  if (a1)
  {
    uint64_t v1 = [a1 traitOverrides];
    id v2 = -[_UITraitOverrides _overridesAppliedBefore](v1);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

- (id)traitOverrides
{
  p_unint64_t viewFlags = &self->_viewFlags;
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x100) != 0)
  {
    uint64_t v4 = objc_getAssociatedObject(self, &_UIViewTraitOverridesKey);
  }
  else
  {
    uint64_t v4 = -[_UITraitOverrides initWithDelegate:]([_UITraitOverrides alloc], self);
    objc_setAssociatedObject(self, &_UIViewTraitOverridesKey, v4, (void *)1);
    *((_DWORD *)p_viewFlags + 4) |= 0x100u;
  }
  return v4;
}

- (void)setTransform3D:(CATransform3D *)transform3D
{
  memset(&v15, 0, sizeof(v15));
  [(UIView *)(uint64_t)self _backing_transform3D];
  long long v5 = *(_OWORD *)&transform3D->m33;
  *(_OWORD *)&a.m31 = *(_OWORD *)&transform3D->m31;
  *(_OWORD *)&a.m33 = v5;
  long long v6 = *(_OWORD *)&transform3D->m43;
  *(_OWORD *)&a.m41 = *(_OWORD *)&transform3D->m41;
  *(_OWORD *)&a.m43 = v6;
  long long v7 = *(_OWORD *)&transform3D->m13;
  *(_OWORD *)&a.m11 = *(_OWORD *)&transform3D->m11;
  *(_OWORD *)&a.m13 = v7;
  long long v8 = *(_OWORD *)&transform3D->m23;
  *(_OWORD *)&a.m21 = *(_OWORD *)&transform3D->m21;
  *(_OWORD *)&a.m23 = v8;
  -[UIView _backing_setTransform3D:]((uint64_t)self, (long long *)&a);
  long long v9 = *(_OWORD *)&transform3D->m33;
  *(_OWORD *)&a.m31 = *(_OWORD *)&transform3D->m31;
  *(_OWORD *)&a.m33 = v9;
  long long v10 = *(_OWORD *)&transform3D->m43;
  *(_OWORD *)&a.m41 = *(_OWORD *)&transform3D->m41;
  *(_OWORD *)&a.m43 = v10;
  long long v11 = *(_OWORD *)&transform3D->m13;
  *(_OWORD *)&a.m11 = *(_OWORD *)&transform3D->m11;
  *(_OWORD *)&a.m13 = v11;
  long long v12 = *(_OWORD *)&transform3D->m23;
  *(_OWORD *)&a.m21 = *(_OWORD *)&transform3D->m21;
  *(_OWORD *)&a.m23 = v12;
  CATransform3D v13 = v15;
  if (!CATransform3DEqualToTransform(&a, &v13))
  {
    CATransform3D a = v15;
    -[UIView _didChangeTransformFromPreviousTransform:]((uint64_t)self, &a);
  }
}

- (void)_backing_setTransform3D:(uint64_t)a1
{
  if (a1)
  {
    long long v3 = a2[5];
    long long v15 = a2[4];
    long long v16 = v3;
    long long v4 = a2[7];
    long long v17 = a2[6];
    long long v18 = v4;
    long long v5 = a2[1];
    long long v11 = *a2;
    long long v12 = v5;
    long long v6 = a2[3];
    long long v13 = a2[2];
    long long v14 = v6;
    uint64_t v7 = *(void *)(a1 + 168);
    if (!v7 || (id v8 = *(id *)(v7 + 8), (v9 = v8) == 0))
    {
      long long v9 = 0;
      id v8 = *(id *)(a1 + 160);
    }
    void v10[4] = v15;
    v10[5] = v16;
    v10[6] = v17;
    v10[7] = v18;
    v10[0] = v11;
    v10[1] = v12;
    v10[2] = v13;
    v10[3] = v14;
    [v8 setTransform:v10];
  }
}

- (void)_didChangeTransformFromPreviousTransform:(uint64_t)a1
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    long long v4 = [(id)a1 _layoutEngine];
    long long v5 = [v4 delegate];
    if (dyld_program_sdk_at_least())
    {

      goto LABEL_46;
    }
    if (v5)
    {
      char v6 = [v5 _forceLayoutEngineSolutionInRationalEdges];

      if (v6) {
        goto LABEL_46;
      }
    }
    else
    {
    }
    if (*(void *)(a1 + 96) & 0x400000000000000) == 0 || ([(id)a1 _hostsLayoutEngine])
    {
LABEL_46:
      int v26 = *(_DWORD *)(a1 + 112);
      if ((v26 & 0x800000) != 0)
      {
        uint64_t v27 = *(void *)(a1 + 104);
        if ((v27 & 0x1000000) == 0) {
          goto LABEL_53;
        }
      }
      else
      {
        -[UIView _updateEmbeddedViewControllerContentOverlayInsetsIfNecessary]((void *)a1);
        uint64_t v27 = *(void *)(a1 + 104);
        int v26 = *(_DWORD *)(a1 + 112);
        if ((v27 & 0x1000000) == 0)
        {
LABEL_53:
          if (v26 & 0x3C | v27 & 0x8000000000000000)
          {
            uint64_t v39 = 1024;
            long long v33 = a2[5];
            long long v48 = a2[4];
            long long v49 = v33;
            long long v34 = a2[7];
            long long v50 = a2[6];
            long long v51 = v34;
            long long v35 = a2[1];
            long long v44 = *a2;
            long long v45 = v35;
            long long v36 = a2[3];
            long long v46 = a2[2];
            long long v40 = 0u;
            long long v41 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v47 = v36;
            uint64_t v54 = 0;
            long long v53 = 0u;
            long long v52 = 0u;
            -[UIView _notifyGeometryObserversWithChangeInfo:](a1, &v39);
          }
          return;
        }
      }
      memset(&v70, 0, sizeof(v70));
      [(UIView *)a1 _backing_transform3D];
      CATransform3D v69 = v70;
      if (MEMORY[0x18C1031B0](&v69))
      {
        CATransform3D v69 = v70;
        CATransform3DGetAffineTransform(&v55, &v69);
        CGFloat v28 = [(id)a1 _backdropMaskViewForGrayscaleTint];
        *(_OWORD *)&v69.m11 = *(_OWORD *)&v55.a;
        *(_OWORD *)&v69.m13 = *(_OWORD *)&v55.c;
        *(_OWORD *)&v69.m21 = *(_OWORD *)&v55.tx;
        [v28 setTransform:&v69];

        CGFloat v29 = [(id)a1 _backdropMaskViewForColorTint];
        *(_OWORD *)&v69.m11 = *(_OWORD *)&v55.a;
        *(_OWORD *)&v69.m13 = *(_OWORD *)&v55.c;
        *(_OWORD *)&v69.m21 = *(_OWORD *)&v55.tx;
        [v29 setTransform:&v69];

        double v30 = -[UIView _backdropMaskViewForColorBurnTint]((void *)a1);
        *(_OWORD *)&v69.m11 = *(_OWORD *)&v55.a;
        *(_OWORD *)&v69.m13 = *(_OWORD *)&v55.c;
        *(_OWORD *)&v69.m21 = *(_OWORD *)&v55.tx;
        [v30 setTransform:&v69];

        uint64_t v31 = -[UIView _backdropMaskViewForDarkeningTint]((void *)a1);
        *(_OWORD *)&v69.m11 = *(_OWORD *)&v55.a;
        *(_OWORD *)&v69.m13 = *(_OWORD *)&v55.c;
        *(_OWORD *)&v69.m21 = *(_OWORD *)&v55.tx;
        [v31 setTransform:&v69];

        long long v32 = [(id)a1 _backdropMaskViewForFilters];
        *(_OWORD *)&v69.m11 = *(_OWORD *)&v55.a;
        *(_OWORD *)&v69.m13 = *(_OWORD *)&v55.c;
        *(_OWORD *)&v69.m21 = *(_OWORD *)&v55.tx;
        [v32 setTransform:&v69];
      }
      uint64_t v27 = *(void *)(a1 + 104);
      int v26 = *(_DWORD *)(a1 + 112);
      goto LABEL_53;
    }
    uint64_t v7 = [(id)a1 _layoutEngine];
    id v8 = [v7 delegate];
    if (dyld_program_sdk_at_least())
    {
    }
    else
    {
      if (!v8)
      {
LABEL_16:

        goto LABEL_17;
      }
      int v9 = [v8 _forceLayoutEngineSolutionInRationalEdges];

      if (!v9)
      {
LABEL_17:
        [(id)a1 invalidateIntrinsicContentSize];
        -[UIView _invalidateAutoresizingConstraints](a1);
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v10 = [(id)a1 _allSubviews];
        uint64_t v11 = [v10 countByEnumeratingWithState:&v65 objects:&v70 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v66;
          do
          {
            for (uint64_t i = 0; i != v12; ++i)
            {
              if (*(void *)v66 != v13) {
                objc_enumerationMutation(v10);
              }
              -[UIView _invalidateAutoresizingConstraints](*(void *)(*((void *)&v65 + 1) + 8 * i));
            }
            uint64_t v12 = [v10 countByEnumeratingWithState:&v65 objects:&v70 count:16];
          }
          while (v12);
        }

        if (v7)
        {
          BOOL v37 = v7;
          double v38 = a2;
          id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          id v16 = (id)a1;
          do
          {
            long long v17 = objc_msgSend(v16, "_constraintsExceptingSubviewAutoresizingConstraints", v37, v38);
            long long v61 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            long long v64 = 0u;
            uint64_t v18 = [v17 countByEnumeratingWithState:&v61 objects:&v69 count:16];
            if (v18)
            {
              uint64_t v19 = v18;
              uint64_t v20 = *(void *)v62;
              do
              {
                for (uint64_t j = 0; j != v19; ++j)
                {
                  if (*(void *)v62 != v20) {
                    objc_enumerationMutation(v17);
                  }
                  objc_super v22 = *(void **)(*((void *)&v61 + 1) + 8 * j);
                  uint64_t v23 = [v22 firstItem];
                  uint64_t v24 = [v22 secondItem];
                  if ([(id)a1 isDescendantOfView:v23]
                    && ([v24 isDescendantOfView:a1] & 1) != 0
                    || [(id)a1 isDescendantOfView:v24]
                    && [v23 isDescendantOfView:a1])
                  {
                    [v15 addObject:v22];
                  }
                }
                uint64_t v19 = [v17 countByEnumeratingWithState:&v61 objects:&v69 count:16];
              }
              while (v19);
            }

            id v16 = (id)[v16 superview];
          }
          while (v16);
          uint64_t v7 = v37;
          a2 = v38;
          if ([v15 count])
          {
            v56[0] = MEMORY[0x1E4F143A8];
            v56[1] = 3221225472;
            char v57 = __51__UIView__reestablishConstraintsForTransformChange__block_invoke;
            CGRect v58 = &unk_1E52D9F98;
            id v59 = v15;
            id v60 = v37;
            double v25 = (void *)[(id)a1 _layoutEngineCreateIfNecessary];
            if (v25) {
              [v25 withAutomaticOptimizationDisabled:v56];
            }
            else {
              v57((uint64_t)v56);
            }
          }
        }

        goto LABEL_46;
      }
    }
    id v8 = [MEMORY[0x1E4F28B00] currentHandler];
    [v8 handleFailureInMethod:sel__reestablishConstraintsForTransformChange object:a1 file:@"UIView.m" lineNumber:9694 description:@"Legacy code path is unexpectedly exercised."];
    goto LABEL_16;
  }
}

- (void)_invalidateTraitCollectionAsRoot
{
  if (a1)
  {
    _UIViewInvalidateTraitCollectionAndSchedulePropagation(a1, 1);
    if (qword_1EB25C330 != -1) {
      dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
    }
    if (!byte_1EB25C0B5)
    {
      id v2 = [(id)a1 traitCollection];
      id v3 = [(id)a1 _lastNotifiedTraitCollection];
      id v4 = v2;
      id v6 = v4;
      if (v3 != v4)
      {
        if (v4 && v3)
        {
          char v5 = [v3 isEqual:v4];

          if (v5) {
            goto LABEL_16;
          }
        }
        else
        {
        }
        *(void *)(a1 + 104) |= 0x1000000000000uLL;
        if (!*(_WORD *)(a1 + 212) || (dyld_program_sdk_at_least() & 1) == 0) {
          [(id)a1 setNeedsLayout];
        }
        goto LABEL_16;
      }

LABEL_16:
    }
  }
}

- (UIView)viewWithTag:(NSInteger)tag
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (_tagForView(self) == tag)
  {
    char v5 = self;
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v6 = [(CALayer *)self->_layer sublayers];
    uint64_t v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v16;
      while (2)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(v6);
          }
          id v11 = (id)[*(id *)(*((void *)&v15 + 1) + 8 * i) unsafeUnretainedDelegate];
          if (v11)
          {
            id v12 = v11;
            if (_IsKindOfUIView((uint64_t)v11)) {
              id v11 = v12;
            }
            else {
              id v11 = 0;
            }
          }
          uint64_t v13 = [v11 viewWithTag:tag];
          if (v13)
          {
            char v5 = (UIView *)v13;

            goto LABEL_17;
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }

    char v5 = 0;
  }
LABEL_17:
  return v5;
}

- (void)_populateInitialTraitCollection:(id)a3
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  char v5 = (UITraitCollection *)a3;
  if (self->_cachedTraitCollection)
  {
    _UIIsPrivateMainBundle();
    if (dyld_program_sdk_at_least())
    {
      uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
      [v8 handleFailureInMethod:a2, self, @"UIView.m", 4608, @"View was already initialized: %@", self object file lineNumber description];
    }
    else if (os_variant_has_internal_diagnostics())
    {
      long long v10 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CGAffineTransform buf = 138412290;
        id v12 = self;
        _os_log_fault_impl(&dword_1853B0000, v10, OS_LOG_TYPE_FAULT, "View was already initialized: %@  This will become an assert in a future version.", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_populateInitialTraitCollection____s_category_0) + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CGAffineTransform buf = 138412290;
        id v12 = self;
        _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "View was already initialized: %@  This will become an assert in a future version.", buf, 0xCu);
      }
    }
  }
  cachedTraitCollection = self->_cachedTraitCollection;
  self->_cachedTraitCollection = v5;
  uint64_t v7 = v5;

  *((_DWORD *)&self->_viewFlags + 4) |= 0x80u;
  [(UIView *)self _setLastNotifiedTraitCollection:v7];
  _UITraitEnvironmentGeneratedTraitCollection((uint64_t)self, (unint64_t)v7);
}

- (CGRect)_rectTuckedAgainstBoundingPathEdge:(unint64_t)a3 withSize:(double)a4 cornerRadii:(UIRectCornerRadii)a5 minimumPadding:(double)a6
{
  double topRight = a5.topRight;
  double bottomRight = a5.bottomRight;
  double bottomLeft = a5.bottomLeft;
  double topLeft = a5.topLeft;
  if (a6 < 0.0)
  {
    double v38 = [MEMORY[0x1E4F28B00] currentHandler];
    [v38 handleFailureInMethod:a2, self, @"UIView.m", 21068, @"Invalid parameter not satisfying: %@", @"minimumPadding >= 0.0" object file lineNumber description];
  }
  if (a3 == 4 || a3 == 1)
  {
    if (topLeft >= topRight) {
      double v15 = topLeft;
    }
    else {
      double v15 = topRight;
    }
    if (bottomLeft >= bottomRight) {
      double v16 = bottomLeft;
    }
    else {
      double v16 = bottomRight;
    }
    if (v15 + v16 > a4)
    {
      long long v17 = [MEMORY[0x1E4F28B00] currentHandler];
      [v17 handleFailureInMethod:a2, self, @"UIView.m", 21070, @"Rect size %.1f is too small to fit corner radii: {%.1f, %.1f, %.1f, %.1f}", *(void *)&a4, *(void *)&topLeft, *(void *)&bottomLeft, *(void *)&bottomRight, *(void *)&topRight object file lineNumber description];
LABEL_25:
    }
  }
  else
  {
    if (topLeft >= bottomLeft) {
      double v18 = topLeft;
    }
    else {
      double v18 = bottomLeft;
    }
    if (topRight >= bottomRight) {
      double v19 = topRight;
    }
    else {
      double v19 = bottomRight;
    }
    if (v18 + v19 > a4)
    {
      long long v17 = [MEMORY[0x1E4F28B00] currentHandler];
      [v17 handleFailureInMethod:a2, self, @"UIView.m", 21072, @"Rect size %.1f is too small to fit corner radii: {%.1f, %.1f, %.1f, %.1f}", *(void *)&a4, *(void *)&topLeft, *(void *)&bottomLeft, *(void *)&bottomRight, *(void *)&topRight object file lineNumber description];
      goto LABEL_25;
    }
  }
  id v39 = 0;
  uint64_t v20 = [(UIView *)self _effectiveBoundingPathAndBoundingPathView:&v39];
  id v21 = v39;
  [(UIView *)self bounds];
  -[UIView convertRect:toView:](self, "convertRect:toView:", v21);
  objc_msgSend(v20, "_rectTuckedAgainstEdge:ofBoundingPathAndRect:withSize:cornerRadii:minimumPadding:", a3, *(void *)&topLeft, *(void *)&bottomLeft, *(void *)&bottomRight, *(void *)&topRight, *(void *)&a6);
  double x = v40.origin.x;
  double y = v40.origin.y;
  double width = v40.size.width;
  double height = v40.size.height;
  if (CGRectIsNull(v40))
  {
    double v26 = *MEMORY[0x1E4F1DB20];
    double v27 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v28 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v29 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  else
  {
    -[UIView convertRect:fromView:](self, "convertRect:fromView:", v21, x, y, width, height);
    double v26 = v30;
    double v27 = v31;
    double v28 = v32;
    double v29 = v33;
  }

  double v34 = v26;
  double v35 = v27;
  double v36 = v28;
  double v37 = v29;
  result.size.double height = v37;
  result.size.double width = v36;
  result.origin.double y = v35;
  result.origin.double x = v34;
  return result;
}

- (id)_effectiveBoundingPathAndBoundingPathView:(id *)a3
{
  char v5 = (UIView *)[(UIView *)self window];
  if (!v5)
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v7 = 0;
    if (!self) {
      goto LABEL_16;
    }
    char v5 = self;
    if ((isKindOfClass & 1) == 0) {
      goto LABEL_16;
    }
  }
  if ([(UIView *)v5 _isHostedInAnotherProcess])
  {
    uint64_t v7 = [(UIView *)v5 _boundingPath];

    if (!v7) {
      goto LABEL_16;
    }
  }
  uint64_t v8 = [(UIView *)self _boundingPath];
  uint64_t v7 = (void *)v8;
  uint64_t v9 = self;
  if (self && !v8)
  {
    uint64_t v9 = self;
    do
    {
      uint64_t v9 = (UIView *)[(UIView *)v9 superview];
      uint64_t v10 = [(UIView *)v9 _boundingPathForSubtree];
      uint64_t v7 = (void *)v10;
    }
    while (v9 && !v10);
  }
  if (v7 && [v7 validateForCoordinateSpace])
  {
    if (a3) {
      *a3 = v9;
    }
    id v11 = v7;
    uint64_t v7 = v11;
  }
  else
  {
LABEL_16:
    if (a3) {
      *a3 = self;
    }
    id v12 = [_UIRectangularBoundingPath alloc];
    [(UIView *)self bounds];
    id v11 = -[_UIRectangularBoundingPath initWithCoordinateSpace:boundingRect:](v12, "initWithCoordinateSpace:boundingRect:", self);
  }
  uint64_t v13 = v11;

  return v13;
}

- (_UIBoundingPath)_boundingPath
{
  return (_UIBoundingPath *)objc_getAssociatedObject(self, &_UIViewBoundingPathKey);
}

- (CGRect)convertRect:(CGRect)a3 toCoordinateSpace:(id)a4
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  if (a4 && a4 != self)
  {
    uint64_t v10 = self;
    if (objc_opt_isKindOfClass())
    {
      id v11 = [(UIView *)self _window];
      id v12 = [a4 _window];

      if (v11 == v12)
      {
        -[UIView convertRect:toView:](self, "convertRect:toView:", a4, x, y, width, height);
LABEL_10:
        double x = v13;
        double y = v14;
        double width = v15;
        double height = v16;
        goto LABEL_11;
      }
    }
    else
    {
    }
    id v17 = [(UIView *)self _window];
    if (v17)
    {
      double v18 = v17;
      -[UIView convertRect:toView:](self, "convertRect:toView:", v17, x, y, width, height);
      objc_msgSend(v18, "convertRect:toCoordinateSpace:", a4);
    }
    else
    {
      -[CALayer convertRect:toLayer:](self->_layer, "convertRect:toLayer:", 0, x, y, width, height);
    }
    goto LABEL_10;
  }
LABEL_11:
  double v19 = x;
  double v20 = y;
  double v21 = width;
  double v22 = height;
  result.size.double height = v22;
  result.size.double width = v21;
  result.origin.double y = v20;
  result.origin.double x = v19;
  return result;
}

- (void)_setBoundingPath:(id)a3
{
}

- (BOOL)deliversTouchesForGesturesToSuperview
{
  return (*(void *)&self->_viewFlags >> 33) & 1;
}

- (void)invalidateIntrinsicContentSize
{
}

- (void)setOpaque:(BOOL)opaque
{
  BOOL v3 = opaque;
  p_uint64_t viewFlags = &self->_viewFlags;
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  if (((viewFlags & 0x400) == 0) == opaque)
  {
    uint64_t v7 = *((void *)&self->_viewFlags + 1);
    int v8 = *((_DWORD *)&self->_viewFlags + 4);
  }
  else
  {
    if ((((viewFlags & 0x400) == 0) ^ [(CALayer *)self->_layer isOpaque])) {
      return;
    }
    uint64_t viewFlags = (uint64_t)self->_viewFlags;
    uint64_t v7 = *((void *)&self->_viewFlags + 1);
    int v8 = *((_DWORD *)&self->_viewFlags + 4);
  }
  uint64_t v9 = 1024;
  if (!v3) {
    uint64_t v9 = 0;
  }
  *(void *)p_uint64_t viewFlags = viewFlags & 0xFFFFFFFFFFFFFBFFLL | v9;
  *((void *)p_viewFlags + 1) = v7;
  *((_DWORD *)p_viewFlags + 4) = v8;
  if ([(UIView *)self _backgroundCGColor]) {
    uint64_t hasOpaque = -[UIView _hasOpaqueBackground]((uint64_t)self);
  }
  else {
    uint64_t hasOpaque = (*(void *)&self->_viewFlags >> 10) & 1;
  }
  layer = self->_layer;
  [(CALayer *)layer setOpaque:hasOpaque];
}

- (BOOL)_shouldNotifyGeometryObserversForBaselineChanges
{
  if (*((_DWORD *)&self->_viewFlags + 4))
  {
    LODWORD(v2) = [(UIView *)self _hasFontInfoForVerticalBaselineSpacing];
    if (v2)
    {
      if ((*((_DWORD *)&self->_viewFlags + 4) & 0x3CLL) != 0) {
        LOBYTE(v2) = 1;
      }
      else {
        return *((void *)&self->_viewFlags + 1) >> 63;
      }
    }
  }
  else
  {
    LOBYTE(v2) = 0;
  }
  return v2;
}

- (void)__setViewDelegate:(void *)a1
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v14 = v3;
    if (v3)
    {
      id v5 = (id)a1[11];
      if (v5 && v5 != v3)
      {
        uint64_t v7 = [NSString stringWithFormat:@"A view can only be associated with at most one view controller at a time! View %@ is associated with %@. Clear this association before associating this view with %@.", a1, v5, v3];
        [MEMORY[0x1E4F1CA00] raise:@"UIViewControllerHierarchyInconsistency", @"%@", v7 format];

        id v4 = v14;
      }
    }
    a1[11] = v4;
    -[UIView _updateAutogeneratedNameForLayerIfNeeded]((uint64_t)a1);
    uint64_t v8 = [a1 methodForSelector:sel_layoutSubviews];
    if (v8 != qword_1EB25C240)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (void *)((char *)a1 + 116);
      uint64_t v11 = *(void *)((char *)a1 + 116);
      id v4 = v14;
LABEL_15:
      unint64_t *v10 = v9 | v11 & 0xFFFFFFFFBFFFFFFFLL;
      goto LABEL_16;
    }
    id v12 = (void *)a1[11];
    if (v12)
    {
      int v13 = [v12 _allowsSkippingLayout];
      uint64_t v10 = (void *)((char *)a1 + 116);
      uint64_t v11 = *(void *)((char *)a1 + 116);
      id v4 = v14;
      if (!v13)
      {
        uint64_t v9 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)((char *)a1 + 116);
      uint64_t v11 = *(void *)((char *)a1 + 116);
      id v4 = v14;
    }
    uint64_t v9 = 0x40000000;
    goto LABEL_15;
  }
LABEL_16:
}

- (void)_updateAutogeneratedNameForLayerIfNeeded
{
  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIViewSetLayerNameDescription, @"UIViewSetLayerNameDescription", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EB257AE4|| _os_feature_enabled_impl()&& ((_os_feature_enabled_impl() & 1) != 0 || objc_msgSend((id)a1, "__isLandmarkView")))
  {
    id v2 = *(id *)(a1 + 160);
    if (!v2)
    {
LABEL_26:

      return;
    }
    id object = v2;
    id v3 = [v2 name];
    if (v3)
    {
      id v4 = objc_getAssociatedObject(object, &unk_1EB25C09F);
      if (!v4)
      {
LABEL_25:

        id v2 = object;
        goto LABEL_26;
      }
      if (![v3 isEqual:v4])
      {
        id v5 = 0;
        uint64_t v9 = object;
LABEL_24:
        objc_setAssociatedObject(v9, &unk_1EB25C09F, v5, (void *)1);
        goto LABEL_25;
      }
    }
    if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIViewSetLayerNameDescription, @"UIViewSetLayerNameDescription", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EB257AE4)
    {
      if (qword_1EB25C130 != -1) {
        dispatch_once(&qword_1EB25C130, &__block_literal_global_705_0);
      }
      id v5 = qword_1EB25C128(a1, qword_1EB25C120);
      goto LABEL_23;
    }
    id v6 = (objc_class *)objc_opt_class();
    id v5 = NSStringFromClass(v6);
    if (*(void *)(a1 + 88))
    {
      uint64_t v7 = (objc_class *)objc_opt_class();
      uint64_t v8 = NSStringFromClass(v7);
    }
    else
    {
      if (!objc_msgSend((id)a1, "__isKindOfUIWindow"))
      {
LABEL_23:
        [object setName:v5];
        uint64_t v9 = object;
        id v4 = v5;
        goto LABEL_24;
      }
      uint64_t v8 = _UIMainBundleIdentifier();
    }
    uint64_t v10 = (void *)v8;
    uint64_t v11 = [v5 stringByAppendingFormat:@" (%@)", v8];

    id v5 = (void *)v11;
    goto LABEL_23;
  }
}

- (BOOL)__isLandmarkView
{
  return self->_viewDelegate != 0;
}

- (void)removeGestureRecognizer:(UIGestureRecognizer *)gestureRecognizer
{
  id v5 = gestureRecognizer;
  id v4 = [(UIGestureRecognizer *)v5 view];

  if (v4 == self) {
    -[UIView _removeGestureRecognizer:](self, v5);
  }
}

- (void)drawLayer:(id)a3 inContext:(CGContext *)a4
{
  id v6 = a3;
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  int v7 = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIViewDebugSignposts, @"UIViewDebugSignposts", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  void v26[2] = __47__UIView_CALayerDelegate__drawLayer_inContext___block_invoke;
  v26[3] = &unk_1E530C048;
  v26[4] = self;
  [(UIView *)self bounds];
  uint64_t v8 = (CGColorSpace *)qword_1EB25C140;
  CGContextSetFillColorSpace(a4, (CGColorSpaceRef)qword_1EB25C140);
  CGContextSetStrokeColorSpace(a4, v8);
  UIGraphicsPushContext(a4);
  if ((*(void *)&self->_viewFlags & 0x40) != 0)
  {
    id AssociatedObject = (CGColor *)objc_getAssociatedObject(self, &unk_1EB25C0A0);
    if (CGColorGetAlpha(AssociatedObject) != 0.0
      || ([v6 isOpaque] & 1) != 0
      || ([v6 clearsContext] & 1) == 0)
    {
      CGContextSaveGState(a4);
      UISetColor(AssociatedObject);
      [(UIView *)self bounds];
      UIRectFillUsingOperation(1, v10, v11, v12, v13);
      CGContextRestoreGState(a4);
    }
  }
  if ([(UIView *)self _canDrawContent])
  {
    ClipBoundingBodouble x = CGContextGetClipBoundingBox(a4);
    double x = ClipBoundingBox.origin.x;
    double y = ClipBoundingBox.origin.y;
    double width = ClipBoundingBox.size.width;
    double height = ClipBoundingBox.size.height;
    *(void *)&long long v28 = v28 | 2;
    os_variant_has_internal_diagnostics();
    double v18 = +[UITraitCollection _currentTraitCollectionIfExists]();
    double v19 = [(UIView *)self traitCollection];
    +[UITraitCollection setCurrentTraitCollection:v19];

    double v20 = (void *)_UISetCurrentFallbackEnvironment(self);
    memset(__src, 0, sizeof(__src));
    _UIBeginTrackingTraitUsage(self, 0, __src);
    if (_UIObservationTrackingEnabled()) {
      -[UIView _drawRectWithObservationTracking:](self, "_drawRectWithObservationTracking:", x, y, width, height);
    }
    else {
      -[UIView drawRect:](self, "drawRect:", x, y, width, height);
    }
    memcpy(v23, __src, sizeof(v23));
    double v21 = (char *)GetTraitCollectionTSD() + 16;
    memcpy(__dst, v21, sizeof(__dst));
    memcpy(v21, v23, 0x160uLL);
    -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:](self, (uint64_t)&__dst[136], [(UIView *)self methodForSelector:sel_drawRect_], sel_setNeedsDisplay);
    _UITraitUsageTrackingResultDestroy((uint64_t)__dst);
    _UIRestorePreviousFallbackEnvironment(v20);
    +[UITraitCollection setCurrentTraitCollection:v18];
  }
  ContextStacuint64_t k = (int *)GetContextStack(0);
  PopContextFromStack(ContextStack);
  if (v27) {
    kdebug_trace();
  }
}

- (void)_setContentStretchInPixels:(CGRect)a3 forContentSize:(CGSize)a4 shouldTile:(BOOL)a5
{
  BOOL v5 = a5;
  double width = a3.size.width;
  double v8 = 1.0;
  BOOL v9 = a3.origin.x == 0.0 && a3.size.width == a4.width;
  double v10 = 1.0;
  if (!v9)
  {
    double v11 = fmax(width + -1.0, 0.0);
    if (a5)
    {
      double v12 = width;
    }
    else
    {
      a3.origin.double x = a3.origin.x + 0.5;
      double v12 = v11;
    }
    a3.origin.double x = a3.origin.x / a4.width;
    if (v12 <= 1.0 && !a5)
    {
      a3.origin.double x = a3.origin.x + -0.01 / a4.width;
      double v12 = 0.02;
    }
    double v10 = v12 / a4.width;
  }
  if (a3.origin.y != 0.0 || a3.size.height != a4.height)
  {
    double v14 = fmax(a3.size.height + -1.0, 0.0);
    if (!a5)
    {
      a3.origin.double y = a3.origin.y + 0.5;
      a3.size.double height = v14;
    }
    a3.origin.double y = a3.origin.y / a4.height;
    if (a3.size.height <= 1.0 && !a5)
    {
      a3.origin.double y = a3.origin.y + -0.01 / a4.height;
      a3.size.double height = 0.02;
    }
    double v8 = a3.size.height / a4.height;
  }
  -[CALayer setContentsCenter:](self->_layer, "setContentsCenter:", a3.origin.x, a3.origin.y, v10, v8);
  double v15 = (uint64_t *)MEMORY[0x1E4F39E30];
  if (!v5) {
    double v15 = (uint64_t *)MEMORY[0x1E4F39E38];
  }
  uint64_t v16 = *v15;
  layer = self->_layer;
  [(CALayer *)layer setContentsScaling:v16];
}

- (void)_setFocusInteractionEnabled:(BOOL)a3
{
  if (a3) {
    int v3 = 0;
  }
  else {
    int v3 = 0x40000;
  }
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFBFFFF | v3;
}

- (BOOL)_isInAnimatedLayout
{
  return *((_DWORD *)&self->_viewFlags + 2) & 1;
}

- (BOOL)_ola_shouldUseImprovedMultilineTextDisambiguation
{
  int v3 = dyld_program_sdk_at_least();
  if (v3)
  {
    if ([(UIView *)self translatesAutoresizingMaskIntoConstraints]) {
      LOBYTE(v3) = 1;
    }
    else {
      LOBYTE(v3) = ![(UIView *)self _hostsLayoutEngine];
    }
  }
  return v3;
}

- (void)removeLayoutGuide:(UILayoutGuide *)layoutGuide
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = layoutGuide;
  BOOL v5 = v4;
  if (v4)
  {
    id v6 = [(UILayoutGuide *)v4 owningView];

    if (v6 == self)
    {
      if ([(UILayoutGuide *)v5 _isLockedToOwningView])
      {
        [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"You may not remove a system-vended UILayoutGuide from its owning view."];
      }
      else
      {
        int v7 = [(UIView *)self _mutableLayoutGuides];
        [(UILayoutGuide *)v5 _setAllowOwningViewSetting:1];
        [(UILayoutGuide *)v5 setOwningView:0];
        double v8 = [(UIView *)self _layoutEngine];
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        BOOL v9 = [(UILayoutGuide *)v5 _uili_existingObservationEligibleLayoutVariables];
        uint64_t v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = *(void *)v16;
          do
          {
            uint64_t v13 = 0;
            do
            {
              if (*(void *)v16 != v12) {
                objc_enumerationMutation(v9);
              }
              uint64_t v14 = *(void *)(*((void *)&v15 + 1) + 8 * v13);
              if (_UIViewAutoLayoutShouldAbandonKVO2()) {
                [v8 stopObservingChangesForVariable:v14];
              }
              else {
                [v8 removeObservableForVariable:v14];
              }
              ++v13;
            }
            while (v11 != v13);
            uint64_t v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
          }
          while (v11);
        }

        [v7 removeObject:v5];
      }
    }
  }
}

- (double)_proportionalFillLengthForOrderedArrangement:(id)a3 relevantParentAxis:(int64_t)a4
{
  id v6 = [a3 canvas];
  BOOL v7 = [(UIView *)self _needsDoubleUpdateConstraintsPass];
  double v8 = -1.0;
  double v9 = -1.0;
  if (!v7) {
    [(UIView *)self intrinsicContentSize];
  }
  if (a4) {
    double v10 = v9;
  }
  else {
    double v10 = v8;
  }
  if (v10 == -1.0)
  {
    if ([(UIView *)self _needsDoubleUpdateConstraintsPass]
      || a4 == 1 && ![v6 alignment])
    {
      double v11 = *MEMORY[0x1E4F1DB28];
      double v12 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
      double v13 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
      double v14 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
      if (([v6 translatesAutoresizingMaskIntoConstraints] & 1) == 0)
      {
        long long v15 = [v6 _layoutEngine];

        if (v15)
        {
          objc_msgSend(v6, "_nsis_bounds");
          double v11 = v16;
          double v12 = v17;
          double v13 = v18;
          double v14 = v19;
        }
      }
      double v20 = *MEMORY[0x1E4F1DB30];
      double v21 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
      if (*MEMORY[0x1E4F1DB30] == v13 && v21 == v14)
      {
        objc_msgSend(v6, "bounds", v20, v21);
        double v11 = v20;
        double v12 = v21;
        double v13 = v23;
        double v14 = v24;
      }
      if (objc_msgSend(v6, "isLayoutMarginsRelativeArrangement", v20, v21))
      {
        [v6 layoutMargins];
        double v11 = v11 + v25;
        double v12 = v12 + v26;
        double v13 = v13 - (v25 + v27);
        double v14 = v14 - (v26 + v28);
      }
      uint64_t v29 = [(UIView *)self _layoutEngine];
      -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v29);

      v36.origin.double x = v11;
      v36.origin.double y = v12;
      v36.size.double width = v13;
      v36.size.double height = v14;
      CGFloat Width = CGRectGetWidth(v36);
      LODWORD(v31) = 1148846080;
      LODWORD(v32) = 1112014848;
      -[UIView systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:](self, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", Width, 0.0, v31, v32);
    }
    else
    {
      -[UIView systemLayoutSizeFittingSize:](self, "systemLayoutSizeFittingSize:", 0.0, 0.0);
    }
    if (a4) {
      double v10 = v34;
    }
    else {
      double v10 = v33;
    }
  }

  return v10;
}

- (BOOL)_flipsHorizontalAxis
{
  id v2 = [(UIView *)self layer];
  char v3 = [v2 flipsHorizontalAxis];

  return v3;
}

+ (void)_conditionallyPerformWithoutAnimation:(BOOL)a3 layout:(id)a4
{
  if (a3) {
    [a1 performWithoutAnimation:a4];
  }
  else {
    (*((void (**)(id))a4 + 2))(a4);
  }
}

void *__160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_5(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v16 + 1) + 8 * i) _removeFromEngine:*(void *)(a1 + 40)];
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v4);
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  BOOL v7 = *(void **)(a1 + 48);
  CGRect result = (void *)[v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (result)
  {
    double v9 = result;
    uint64_t v10 = *(void *)v13;
    do
    {
      double v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v12 + 1) + 8 * (void)v11) _addToEngine:*(void *)(a1 + 40)];
        double v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      CGRect result = (void *)[v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
      double v9 = result;
    }
    while (result);
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
    return -[UIView _resetLayoutEngineHostConstraints](*(void **)(a1 + 56));
  }
  return result;
}

- (void)_recursiveCollectTemporaryInternalConstraintsWithEngine:(uint64_t)a3 ignoreAutoresizingMaskConstraints:(uint64_t)a4 returningConstraintsForViewsNeedingSecondPass:(double)a5 currentTargetWidth:
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    double v9 = result;
    if ((result[12] & 0x800000000000000) != 0)
    {
      if (![result _hostsLayoutEngine]
        || (CGRect result = (void *)[v9 _layoutEngine], result == a2))
      {
        uint64_t v10 = (void *)[v9 _allSubviews];
        long long v14 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        CGRect result = (void *)[v10 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (result)
        {
          double v11 = result;
          uint64_t v12 = *(void *)v15;
          do
          {
            long long v13 = 0;
            do
            {
              if (*(void *)v15 != v12) {
                objc_enumerationMutation(v10);
              }
              if ((~*(void *)(*(void *)(*((void *)&v14 + 1) + 8 * (void)v13) + 96) & 0x420000000000000) == 0) {
                -[UIView _recursiveCollectTemporaryInternalConstraintsWithEngine:ignoreAutoresizingMaskConstraints:returningConstraintsForViewsNeedingSecondPass:currentTargetWidth:](a5);
              }
              long long v13 = (void *)((char *)v13 + 1);
            }
            while (v11 != v13);
            CGRect result = (void *)[v10 countByEnumeratingWithState:&v14 objects:v18 count:16];
            double v11 = result;
          }
          while (result);
        }
      }
    }
    if ((v9[12] & 0x400000000000000) != 0) {
      return (void *)[v9 _makeTemporaryInternalConstraintsWithEngine:a2 ignoreAutoresizingMaskConstraints:a3 returningConstraintsForViewsNeedingSecondPass:a4 currentTargetWidth:a5];
    }
  }
  return result;
}

uint64_t __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_2(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "keyEnumerator", 0), "allObjects");
  uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        -[UIView _finishTemporaryInternalConstraints:withEngine:](*(void **)(*((void *)&v7 + 1) + 8 * v6), (void *)[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKey:*(void *)(*((void *)&v7 + 1) + 8 * v6)], *(void **)(a1 + 32));
        ++v6;
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

- (void)_finishTemporaryInternalConstraints:(void *)a3 withEngine:
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v5 = result;
    objc_msgSend(result, "_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:", -[UIView _nsis_compatibleBoundsInEngine:](result, a3));
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v6 = [a2 countByEnumeratingWithState:&v22 objects:v27 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v23;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v23 != v8) {
            objc_enumerationMutation(a2);
          }
          [*(id *)(*((void *)&v22 + 1) + 8 * i) _removeFromEngine:a3];
        }
        uint64_t v7 = [a2 countByEnumeratingWithState:&v22 objects:v27 count:16];
      }
      while (v7);
    }
    ContentSize = -[UIView _generateContentSizeConstraints](v5);
    uint64_t v11 = [v5 _layoutEngine];
    uint64_t v12 = (void *)[v5 _containerForContentSizeConstraints];
    long long v13 = v12;
    if ((void *)v11 == a3)
    {
      [v12 addConstraints:ContentSize];
      return -[UIView _setContentSizeConstraints:](v5, (uint64_t)ContentSize);
    }
    else
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      uint64_t result = (void *)[ContentSize countByEnumeratingWithState:&v18 objects:v26 count:16];
      if (result)
      {
        long long v14 = result;
        uint64_t v15 = *(void *)v19;
        do
        {
          long long v16 = 0;
          do
          {
            if (*(void *)v19 != v15) {
              objc_enumerationMutation(ContentSize);
            }
            long long v17 = *(void **)(*((void *)&v18 + 1) + 8 * (void)v16);
            [v17 setContainer:v13];
            [v17 _addToEngine:a3];
            long long v16 = (void *)((char *)v16 + 1);
          }
          while (v14 != v16);
          uint64_t result = (void *)[ContentSize countByEnumeratingWithState:&v18 objects:v26 count:16];
          long long v14 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

- (double)_nsis_compatibleBoundsInEngine:(void *)a1
{
  if (a1)
  {
    long long v3 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
    long long v7 = *MEMORY[0x1E4F1DB28];
    long long v8 = v3;
    if (a2)
    {
      uint64_t v5 = (void *)[a2 delegate];
      if ((dyld_program_sdk_at_least() & 1) != 0
        || v5 && [v5 _forceLayoutEngineSolutionInRationalEdges])
      {
        -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](a1, 0, (double *)&v7, a2, 0);
      }
      else
      {
        objc_msgSend(a1, "_nsis_origin:bounds:inEngine:", 0, &v7, a2);
      }
    }
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  return *(double *)&v7;
}

- (void)addConstraints:(NSArray *)constraints
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"NSLayoutConstraint_UIKitAdditions.m", 1262, @"Invalid parameter not satisfying: %@", @"[constraints isKindOfClass:[NSArray class]]");
  }
  if ([(NSArray *)constraints count])
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    long long v8 = __50__UIView_UIConstraintBasedLayout__addConstraints___block_invoke;
    long long v9 = &unk_1E52EBA80;
    long long v10 = constraints;
    uint64_t v11 = self;
    if (self)
    {
      id v6 = [(UIView *)self _layoutEngineCreateIfNecessary];
      if (v6) {
        [v6 withAutomaticOptimizationDisabled:v7];
      }
      else {
        v8((uint64_t)v7);
      }
    }
  }
}

uint64_t __50__UIView_UIConstraintBasedLayout__addConstraints___block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(void **)(a1 + 32);
  uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(a1 + 40) addConstraint:*(void *)(*((void *)&v7 + 1) + 8 * v6++)];
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t __68__UIView_UIConstraintBasedLayout___resetLayoutEngineHostConstraints__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) _resetLayoutEngineHostConstraintsForAxis:0 collectingViews:0];
  id v2 = *(void **)(a1 + 32);
  return [v2 _resetLayoutEngineHostConstraintsForAxis:1 collectingViews:0];
}

- (double)_firstBaselineOffsetFromTop
{
  if (!dyld_program_sdk_at_least()) {
    return 0.0;
  }
  [(UIView *)self frame];
  -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:");
  -[UIView _baselineOffsetsAtSize:](self, "_baselineOffsetsAtSize:", v3, v4);
  if (result == 2.22507386e-308) {
    return 0.0;
  }
  return result;
}

- (double)_baselineOffsetFromBottom
{
  if (!dyld_program_sdk_at_least()) {
    return 0.0;
  }
  [(UIView *)self frame];
  -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:");
  -[UIView _baselineOffsetsAtSize:](self, "_baselineOffsetsAtSize:", v3, v4);
  double result = v5;
  if (v5 == 2.22507386e-308) {
    return 0.0;
  }
  return result;
}

- (void)_makeTemporaryInternalConstraintsWithEngine:(id)a3 ignoreAutoresizingMaskConstraints:(BOOL)a4 returningConstraintsForViewsNeedingSecondPass:(id *)a5 currentTargetWidth:(double)a6
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = [(UIView *)self _layoutEngine];
  BOOL v12 = [(UIView *)self _needsDoubleUpdateConstraintsPass];
  long long v13 = [(UIView *)self _internalConstraints];
  long long v14 = v13;
  if (!v12 && v13) {
    return;
  }
  uint64_t v15 = [(UIView *)self _containerForContentSizeConstraints];
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  if ((viewFlags & 0x20000000000000) != 0 && v15 == self)
  {
    if (!v12) {
      goto LABEL_25;
    }
    [(UIView *)self _prepareForFirstIntrinsicContentSizeCalculation];
    id v17 = *a5;
    if (!*a5)
    {
      id v17 = (id)[objc_alloc(MEMORY[0x1E4F28E10]) initWithKeyOptions:0 valueOptions:0 capacity:0];
      *a5 = v17;
    }
    if (v11 == a3)
    {
      [(UIView *)self _multilineContextWidth];
      if (v24 == a6) {
        goto LABEL_25;
      }
      [(UIView *)self removeConstraints:v14];
      -[UIView _setContentSizeConstraints:](self, 0);
    }
    else
    {
      if (!v14) {
        goto LABEL_25;
      }
      [v17 setObject:v14 forKey:self];
    }
    [(UIView *)self _prepareForFirstIntrinsicContentSizeCalculation];
LABEL_25:
    if (!-[UIView _contentSizeConstraints](self))
    {
      ContentSize = -[UIView _generateContentSizeConstraints](self);
      double v26 = ContentSize;
      char v27 = v11 != a3 || v12;
      if (v27)
      {
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        uint64_t v28 = [ContentSize countByEnumeratingWithState:&v37 objects:v42 count:16];
        if (v28)
        {
          uint64_t v29 = v28;
          uint64_t v30 = *(void *)v38;
          do
          {
            for (uint64_t i = 0; i != v29; ++i)
            {
              if (*(void *)v38 != v30) {
                objc_enumerationMutation(v26);
              }
              double v32 = *(void **)(*((void *)&v37 + 1) + 8 * i);
              [v32 setContainer:self];
              [v32 _addToEngine:a3];
            }
            uint64_t v29 = [v26 countByEnumeratingWithState:&v37 objects:v42 count:16];
          }
          while (v29);
        }
        if (v12) {
          [*a5 setObject:v26 forKey:self];
        }
      }
      else
      {
        [(UIView *)self addConstraints:ContentSize];
        -[UIView _setContentSizeConstraints:](self, (uint64_t)v26);
      }
    }
    return;
  }
  if ((viewFlags & 0x20000000000000) == 0 && !a4)
  {
    long long v18 = -[UIView _constraintsEquivalentToAutoresizingMask](self);
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v33 objects:v41 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v34;
      do
      {
        for (uint64_t j = 0; j != v20; ++j)
        {
          if (*(void *)v34 != v21) {
            objc_enumerationMutation(v18);
          }
          long long v23 = *(void **)(*((void *)&v33 + 1) + 8 * j);
          objc_msgSend(v23, "setContainer:", -[UIView superview](self, "superview"));
          [v23 _addToEngine:a3];
        }
        uint64_t v20 = [v18 countByEnumeratingWithState:&v33 objects:v41 count:16];
      }
      while (v20);
    }
    if ([[(UIView *)self superview] _layoutEngine] == a3) {
      -[UIView _setAutoresizingConstraints:](self, v18);
    }
  }
}

- (void)_updateContentSizeConstraints
{
  v32[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (([a1 translatesAutoresizingMaskIntoConstraints] & 1) == 0)
    {
      id v2 = -[UIView _contentSizeConstraints](a1);
      if (!v2 || (a1[12] & 0x400000000000) == 0)
      {
        v32[0] = 0;
        v32[1] = 0;
        id v30 = 0;
        id v31 = 0;
        extractContentSizeConstraints((uint64_t)a1, v2, (uint64_t *)&v30, (uint64_t *)&v31);
        if (v30 && [v30 firstAttribute] != 7)
        {
          double v26 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
          [v26 handleFailureInMethod:sel__updateContentSizeConstraints, a1, @"NSLayoutConstraint_UIKitAdditions.m", 2368, @"Unexpected content size constraint %@ on view %@", v30, a1 object file lineNumber description];
        }
        if (v31 && [v31 firstAttribute] != 8)
        {
          char v27 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
          [v27 handleFailureInMethod:sel__updateContentSizeConstraints, a1, @"NSLayoutConstraint_UIKitAdditions.m", 2369, @"Unexpected content size constraint %@ on view %@", v31, a1 object file lineNumber description];
        }
        id v3 = v30;
        id v4 = v31;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        ContentSize = -[UIView _generateContentSizeConstraints](a1);
        extractContentSizeConstraints((uint64_t)a1, ContentSize, &v28, &v29);
        uint64_t v6 = (void *)[a1 _containerForContentSizeConstraints];
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        for (char i = 1; ; char i = 0)
        {
          char v10 = i;
          uint64_t v11 = *(&v30 + v7);
          BOOL v12 = (void *)*(&v28 + v7);
          if (v11) {
            BOOL v13 = 1;
          }
          else {
            BOOL v13 = v12 == 0;
          }
          if (!v13) {
            goto LABEL_33;
          }
          if (!v11 || v12 != 0) {
            break;
          }
          [v6 removeConstraint:*(&v30 + v7)];
LABEL_35:
          uint64_t v7 = 1;
          if ((v10 & 1) == 0)
          {
            long long v25 = (void *)[objc_alloc(MEMORY[0x1E4F1C978]) initWithObjects:v32 count:v8];
            -[UIView _setContentSizeConstraints:](a1, (uint64_t)v25);

            a1[12] |= 0x400000000000uLL;
            return;
          }
        }
        if (v11) {
          BOOL v15 = v12 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15) {
          goto LABEL_35;
        }
        if ([v6 _layoutEngine]
          && ([v11 huggingPriority], double v17 = v16, objc_msgSend(v12, "huggingPriority"), v17 == v18)
          && ([v11 compressionResistancePriority],
              double v20 = v19,
              [v12 compressionResistancePriority],
              v20 == v21))
        {
          [v11 constant];
          double v23 = v22;
          [v12 constant];
          if (v23 != v24)
          {
            [v12 constant];
            objc_msgSend(v11, "setConstant:");
          }
          BOOL v12 = v11;
        }
        else
        {
          [v6 removeConstraint:v11];
LABEL_33:
          [v6 addConstraint:v12];
        }
        v32[v8++] = v12;
        goto LABEL_35;
      }
    }
  }
}

- (NSMutableArray)_internalConstraints
{
  return self->_internalConstraints;
}

- (void)_contentSizeConstraints
{
  if (result)
  {
    uint64_t v1 = result;
    if ([result translatesAutoresizingMaskIntoConstraints]) {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__contentSizeConstraints, v1, @"NSLayoutConstraint_UIKitAdditions.m", 2237, @"Retrieving contentSize constraints when autoresizing is on");
    }
    return (void *)[v1 _internalConstraints];
  }
  return result;
}

- (void)_setInternalConstraints:(id)a3
{
}

- (void)_resetLayoutEngineHostConstraintsForAxis:(int64_t)a3 collectingViews:(id)a4
{
  p_uint64_t viewFlags = &self->_viewFlags;
  if ((*((unsigned char *)&self->_viewFlags + 22) & 0x10) == 0 || (dyld_program_sdk_at_least() & 1) == 0)
  {
    id v8 = [(UIView *)self _layoutEngineHostConstraints];
    if ([v8 count] == 4)
    {
      if ([(UIView *)self translatesAutoresizingMaskIntoConstraints]) {
        [(UIView *)self bounds];
      }
      else {
        double v9 = [(UIView *)self _nsis_compatibleBoundsInEngine:[[(UIView *)self superview] _layoutEngine]];
      }
      [(UIView *)self alignmentRectForFrame:v9];
      if (a3) {
        double Height = CGRectGetHeight(*(CGRect *)&v10);
      }
      else {
        double Height = CGRectGetWidth(*(CGRect *)&v10);
      }
      double v15 = Height;
      *((void *)p_viewFlags + 1) |= 0x80uLL;
      double v16 = (void *)[v8 objectAtIndexedSubscript:a3];
      [v16 constant];
      if (v17 != v15 || ([v16 isActive] & 1) == 0)
      {
        [v16 setConstant:v15];
        [v16 setActive:1];
        if (!a3)
        {
          uint64_t v18 = *(void *)p_viewFlags;
          if ((*(void *)p_viewFlags & 0x1000000000000) != 0)
          {
            [(UIView *)self _recalculateStrictDescendantNeedsDoubleUpdateConstraints];
            uint64_t v18 = *(void *)p_viewFlags;
          }
          if ((v18 & 0x800000000000) != 0) {
            [(UIView *)self _recursiveInvalidateDescendantsNeedingDoubleUpdateConstraintsCollectingViews:a4];
          }
        }
      }
      *((void *)p_viewFlags + 1) &= ~0x80uLL;
    }
  }
}

- (CGRect)alignmentRectForFrame:(CGRect)frame
{
  double height = frame.size.height;
  double width = frame.size.width;
  double y = frame.origin.y;
  double x = frame.origin.x;
  [(UIView *)self alignmentRectInsets];
  double v8 = y + v7;
  double v11 = width - (v9 + v10);
  double v13 = height - (v7 + v12);
  double v14 = x + v9;
  double v15 = v8;
  double v16 = v11;
  result.size.double height = v13;
  result.size.double width = v16;
  result.origin.double y = v15;
  result.origin.double x = v14;
  return result;
}

- (id)_layoutEngineHostConstraints
{
  if ((-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self) & 1) == 0) {
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"NSLayoutConstraint_UIKitAdditions.m", 1429, @"Retrieving engine host constraints without hosting an engine");
  }
  return objc_getAssociatedObject(self, sel__layoutEngineHostConstraints);
}

- (id)_containerForContentSizeConstraints
{
  if ((~*((void *)self + 12) & 0x20080000000000) == 0) {
    return (id)[self superview];
  }
  return self;
}

- (void)_setContentSizeConstraints:(void *)result
{
  if (result)
  {
    id v3 = result;
    if ([result translatesAutoresizingMaskIntoConstraints]) {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__setContentSizeConstraints_, v3, @"NSLayoutConstraint_UIKitAdditions.m", 2242, @"Setting contentSize constraints when autoresizing is on");
    }
    return (void *)[v3 _setInternalConstraints:a2];
  }
  return result;
}

- (void)addConstraint:(NSLayoutConstraint *)constraint
{
  if (self)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__addConstraint_, self, @"NSLayoutConstraint_UIKitAdditions.m", 1137, @"Invalid parameter not satisfying: %@", @"[constraint isKindOfClass:[NSLayoutConstraint class]]");
    }
    [(UIView *)self nsli_addConstraint:constraint];
  }
}

- (void)_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:(CGRect)a3
{
  -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:", a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  -[UIView _setStoredLayoutEngineWidth:](self, v4);
  *(void *)&self->_viewFlags &= ~0x4000000000000uLL;
}

- (void)_prepareForFirstIntrinsicContentSizeCalculation
{
  *(void *)&self->_viewFlags |= 0x4000000000000uLL;
}

- (void)_setStoredLayoutEngineWidth:(void *)object
{
  if (object)
  {
    if (a2 == 0.0 || ![object _axesForDerivingIntrinsicContentSizeFromLayoutSize])
    {
      if ((object[12] & 0x2000000000000) == 0) {
        return;
      }
      objc_setAssociatedObject(object, &_UIViewLayoutEngineWidthStorageKey, 0, (void *)1);
      unint64_t v4 = object[12] & 0xFFFDFFFFFFFFFFFFLL;
    }
    else
    {
      objc_setAssociatedObject(object, &_UIViewLayoutEngineWidthStorageKey, (id)[NSNumber numberWithDouble:a2], (void *)1);
      unint64_t v4 = object[12] | 0x2000000000000;
    }
    object[12] = v4;
  }
}

- (void)_recursiveInvalidateDescendantsNeedingDoubleUpdateConstraintsCollectingViews:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v4 = [(UIView *)self _allSubviews];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        double v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if ([v9 _needsDoubleUpdateConstraintsPass])
        {
          if (([v9 _inSecondConstraintsPass] & 1) == 0) {
            [a3 addObject:v9];
          }
          [v9 _invalidateIntrinsicContentSizeNeedingLayout:0];
        }
        else if (v9)
        {
          uint64_t v10 = v9[12];
          if ((v10 & 0x1000000000000) != 0)
          {
            [v9 _recalculateStrictDescendantNeedsDoubleUpdateConstraints];
            uint64_t v10 = v9[12];
          }
          if ((v10 & 0x800000000000) != 0) {
            [v9 _recursiveInvalidateDescendantsNeedingDoubleUpdateConstraintsCollectingViews:a3];
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

- (void)removeConstraints:(NSArray *)constraints
{
  if (constraints)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"NSLayoutConstraint_UIKitAdditions.m", 1306, @"Invalid parameter not satisfying: %@", @"[constraints isKindOfClass:[NSArray class]]");
    }
    if ([(NSArray *)constraints count])
    {
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      double v8 = __53__UIView_UIConstraintBasedLayout__removeConstraints___block_invoke;
      double v9 = &unk_1E52EBA80;
      uint64_t v10 = constraints;
      long long v11 = self;
      if (self)
      {
        uint64_t v6 = [(UIView *)self _layoutEngine];
        if (v6) {
          [(NSISEngine *)v6 withAutomaticOptimizationDisabled:v7];
        }
        else {
          v8((uint64_t)v7);
        }
      }
    }
  }
}

uint64_t __53__UIView_UIConstraintBasedLayout__removeConstraints___block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(void **)(a1 + 32);
  uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(a1 + 40) removeConstraint:*(void *)(*((void *)&v7 + 1) + 8 * v6++)];
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

- (BOOL)nsli_removeConstraint:(id)a3
{
  uint64_t v5 = [(UIView *)self _constraintsExceptingSubviewAutoresizingConstraints];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = [(NSArray *)v5 indexOfObject:a3];
    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    {
      LOBYTE(v5) = 0;
    }
    else
    {
      uint64_t v8 = v7;
      -[UIView _layoutEngine_willRemoveLayoutConstraint:](self, a3);
      [(NSArray *)v6 removeObjectAtIndex:v8];
      LOBYTE(v5) = 1;
    }
  }
  return (char)v5;
}

- (void)_layoutEngine_willRemoveLayoutConstraint:(void *)result
{
  if (result)
  {
    uint64_t v3 = [result _layoutEngine];
    if ([a2 container])
    {
      if (v3) {
        [a2 _removeFromEngine:v3];
      }
      _UIOldConstraintsSupportUpdateDependentViewsForConstraint(a2, 0);
    }
    return (void *)[a2 setContainer:0];
  }
  return result;
}

- (void)removeConstraint:(NSLayoutConstraint *)constraint
{
  if (self && constraint)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", sel__removeConstraint_, self, @"NSLayoutConstraint_UIKitAdditions.m", 1282, @"Invalid parameter not satisfying: %@", @"[constraint isKindOfClass:[NSLayoutConstraint class]]");
    }
    [(UIView *)self nsli_removeConstraint:constraint];
  }
}

- ($F24F406B2B787EFB06265DBA3D28CBD5)_baselineOffsetsAtSize:(CGSize)a3
{
  double height = a3.height;
  double width = a3.width;
  if (![(UIView *)self _wantsConstraintBasedLayout]) {
    goto LABEL_16;
  }
  uint64_t v6 = [(UIView *)self viewForFirstBaselineLayout];
  uint64_t v7 = self;
  if (v6)
  {
    uint64_t v7 = self;
    if (v6 != self)
    {
      uint64_t v7 = v6;
      while (![(UIView *)v7 _wantsAutolayout])
      {
        uint64_t v7 = [(UIView *)v7 superview];
        if (v7 == self)
        {
          uint64_t v7 = self;
          break;
        }
      }
    }
  }
  uint64_t v8 = [(UIView *)self viewForLastBaselineLayout];
  long long v9 = self;
  if (v8)
  {
    long long v9 = self;
    if (v8 != self)
    {
      long long v9 = v8;
      while (![(UIView *)v9 _wantsAutolayout])
      {
        long long v9 = [(UIView *)v9 superview];
        if (v9 == self)
        {
          long long v9 = self;
          break;
        }
      }
    }
  }
  if (v7 == self && v9 == self)
  {
LABEL_16:
    double v10 = 2.22507386e-308;
    double v11 = 2.22507386e-308;
  }
  else
  {
    uint64_t v12 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:2];
    if (width < 50000.0)
    {
      long long v13 = [(NSLayoutDimension *)[(UIView *)self widthAnchor] constraintEqualToConstant:width];
      LODWORD(v14) = 1144586240;
      [(NSLayoutConstraint *)v13 setPriority:v14];
      [v12 addObject:v13];
    }
    if (height < 50000.0)
    {
      double v15 = [(NSLayoutDimension *)[(UIView *)self widthAnchor] constraintEqualToConstant:height];
      LODWORD(v16) = 1144586240;
      [(NSLayoutConstraint *)v15 setPriority:v16];
      [v12 addObject:v15];
    }
    uint64_t v35 = 0;
    long long v36 = (CGRect *)&v35;
    uint64_t v37 = 0x4010000000;
    long long v38 = &unk_186D7DBA7;
    long long v39 = 0u;
    long long v40 = 0u;
    uint64_t v29 = 0;
    id v30 = (CGRect *)&v29;
    uint64_t v31 = 0x4010000000;
    double v32 = &unk_186D7DBA7;
    long long v33 = 0u;
    long long v34 = 0u;
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    void v28[2] = __68__UIView__UIConstraintBasedLayoutEmbedding___baselineOffsetsAtSize___block_invoke;
    v28[3] = &unk_1E52FB440;
    v28[4] = v7;
    v28[5] = v9;
    v28[6] = &v35;
    v28[7] = &v29;
    -[UIView _measureViewWithSize:temporaryConstraints:suspendingSystemConstraints:withOptimizedEngineBlock:](self, "_measureViewWithSize:temporaryConstraints:suspendingSystemConstraints:withOptimizedEngineBlock:", v12, 1, v28, width, height);
    [(UIView *)self alignmentRectInsets];
    double v18 = v17;
    double v20 = v19;
    if (v7 == self)
    {
      double v23 = 2.22507386e-308;
      double v21 = 2.22507386e-308;
    }
    else
    {
      -[UIView _baselineOffsetsAtSize:](v7, "_baselineOffsetsAtSize:", v36[1].size.width, v36[1].size.height);
      double v23 = v22;
    }
    if (v9 == v7) {
      double v24 = v21;
    }
    else {
      double v24 = 2.22507386e-308;
    }
    if (v9 != v7 && v9 != self)
    {
      -[UIView _baselineOffsetsAtSize:](v9, "_baselineOffsetsAtSize:", v30[1].size.width, v30[1].size.height);
      double v24 = v25;
    }
    double v10 = 2.22507386e-308;
    if (v23 != 2.22507386e-308) {
      double v10 = v23 + CGRectGetMinY(v36[1]) - v18;
    }
    double v11 = 2.22507386e-308;
    if (v24 != 2.22507386e-308) {
      double v11 = v24 + height - CGRectGetMaxY(v30[1]) - v20;
    }
    _Block_object_dispose(&v29, 8);
    _Block_object_dispose(&v35, 8);
  }
  double v26 = v10;
  double v27 = v11;
  result.var1 = v27;
  result.id var0 = v26;
  return result;
}

- (BOOL)_wantsConstraintBasedLayout
{
  if ((*(void *)&self->_viewFlags & 0xC00000000000000) != 0) {
    return 1;
  }
  uint64_t v3 = objc_opt_class();
  return [v3 requiresConstraintBasedLayout];
}

- (BOOL)_hasBaseline
{
  uint64_t v3 = [(UIView *)self viewForLastBaselineLayout];
  uint64_t v4 = v3;
  if (v3 == self)
  {
    if ((*((void *)&self->_viewFlags + 1) & 0x4000000000000) != 0)
    {
      -[UIView _baselineOffsetsAtSize:](self, "_baselineOffsetsAtSize:", *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8));
      BOOL v5 = v7 != 2.22507386e-308 || v6 != 2.22507386e-308;
    }
    else
    {
      BOOL v5 = 0;
    }
  }
  else
  {
    BOOL v5 = [(UIView *)v3 _hasBaseline];
  }

  return v5;
}

- (id)_deepestViewForBaselineLayoutUsingFirstBaseline:(id)a1
{
  id i = a1;
  if (a1)
  {
    if (a2) {
      [a1 viewForFirstBaselineLayout];
    }
    else {
    id v4 = [a1 viewForLastBaselineLayout];
    }
    for (id i = i; i != v4; i)
    {
      BOOL v5 = i;
      id i = v4;

      if (a2) {
        [i viewForFirstBaselineLayout];
      }
      else {
      id v4 = [i viewForLastBaselineLayout];
      }
    }
  }
  return i;
}

- (UIView)viewForLastBaselineLayout
{
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x800) == 0) {
    return self;
  }
  uint64_t v3 = [(UIView *)self viewForBaselineLayout];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __60__UIView_AdditionalLayoutSupport__viewForLastBaselineLayout__block_invoke;
  block[3] = &unk_1E52DC580;
  block[4] = self;
  if (viewForLastBaselineLayout_once != -1) {
    dispatch_once(&viewForLastBaselineLayout_once, block);
  }
  return v3;
}

- (BOOL)_inSecondConstraintsPass
{
  return (*(void *)&self->_viewFlags >> 51) & 1;
}

- (double)_multilineContextWidth
{
  id AssociatedObject = objc_getAssociatedObject(self, &_UIViewMultilineContextWidth);
  [AssociatedObject doubleValue];
  return result;
}

- (BOOL)nsli_canHostIndependentVariableAnchor
{
  return 1;
}

+ (void)__swift_animateUsingSpringWithTension:(double)a3 friction:(double)a4 interactive:(BOOL)a5 animations:(id)a6 completion:(id)a7
{
  uint64_t v11 = (uint64_t)_Block_copy(a6);
  uint64_t v12 = (uint64_t (*)(char, char))_Block_copy(a7);
  long long v13 = v12;
  if (v11)
  {
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v11;
    double v15 = sub_18557A3E4;
    if (v13) {
      goto LABEL_3;
    }
  }
  else
  {
    double v15 = 0;
    uint64_t v14 = 0;
    if (v12)
    {
LABEL_3:
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v13;
      long long v13 = sub_185442254;
      double v17 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
      if (!v11) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  uint64_t v16 = 0;
  double v17 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
  if (v11)
  {
LABEL_4:
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v15;
    *(void *)(v11 + 24) = v14;
    double v17 = sub_1853BE6D4;
  }
LABEL_5:
  double v18 = v17;
  swift_getObjCClassMetadata();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = v11;
  sub_1854B0A60((uint64_t)v15);
  sub_18549C040(a5, (uint64_t)sub_1853C3700, v19, (uint64_t)v13, v16, (uint64_t)signpost_c2_removePresentationModifier_end, 0, a3, a4);
  swift_release();
  sub_1854AFD40((uint64_t)v13);
  sub_1854AFD40((uint64_t)v15);
}

+ (void)__swift_animateByRetargetingAnimations:(id)a3 completion:(id)a4
{
  uint64_t v5 = (uint64_t)_Block_copy(a3);
  double v6 = (uint64_t (*)(char, char))_Block_copy(a4);
  double v7 = v6;
  if (v5)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v5;
    long long v9 = sub_18557A3E4;
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v9 = 0;
    uint64_t v8 = 0;
    if (v6)
    {
LABEL_3:
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v7;
      double v7 = sub_185442234;
      uint64_t v11 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
      if (!v5) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
  if (v5)
  {
LABEL_4:
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v9;
    *(void *)(v5 + 24) = v8;
    uint64_t v11 = sub_1853BE6D4;
  }
LABEL_5:
  uint64_t v12 = v11;
  swift_getObjCClassMetadata();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = v5;
  sub_1854B0A60((uint64_t)v9);
  sub_18549F9E8(0, (uint64_t)sub_1853C3700, v13, (uint64_t)v7, v10, (uint64_t)sub_1856AACDC, 0);
  swift_release();
  sub_1854AFD40((uint64_t)v7);
  sub_1854AFD40((uint64_t)v9);
}

- (void)_removeAllRetargetableAnimations:(BOOL)a3
{
  uint64_t v5 = objc_opt_class();
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __53__UIView_Internal___removeAllRetargetableAnimations___block_invoke;
  v6[3] = &unk_1E52D9FC0;
  v6[4] = self;
  BOOL v7 = a3;
  objc_msgSend(v5, "__swift_performWithoutRetargetingAnimations:", v6);
}

+ (void)__swift_performWithoutRetargetingAnimations:(id)a3
{
  uint64_t v3 = _Block_copy(a3);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_getObjCClassMetadata();
  sub_1854A60C8(0, (uint64_t)sub_18557A3E4, v4, 0, 0, (uint64_t)sub_1856A9824, 0);
  swift_release();
}

+ (void)__swift_animateUsingSpringBehavior:(id)a3 tracking:(BOOL)a4 animations:(id)a5 completion:(id)a6
{
  uint64_t v9 = (uint64_t)_Block_copy(a5);
  uint64_t v10 = (uint64_t (*)(char, char))_Block_copy(a6);
  uint64_t v11 = v10;
  if (v9)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v9;
    uint64_t v13 = sub_18557A3E4;
    if (v11) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    if (v10)
    {
LABEL_3:
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v11;
      uint64_t v11 = sub_185442254;
      double v15 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
      if (!v9) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  uint64_t v14 = 0;
  double v15 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
  if (v9)
  {
LABEL_4:
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v13;
    *(void *)(v9 + 24) = v12;
    double v15 = sub_1853BE6D4;
  }
LABEL_5:
  uint64_t v16 = v15;
  swift_getObjCClassMetadata();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = v9;
  swift_unknownObjectRetain_n();
  sub_1854B0A60((uint64_t)v13);
  sub_1854A77AC((uint64_t)a3, a4, a4, (uint64_t)sub_1853C3700, v17, (uint64_t)v11, v14, (uint64_t)signpost_c2_removePresentationModifier_end, 0);
  swift_unknownObjectRelease();
  swift_release();
  sub_1854AFD40((uint64_t)v11);
  sub_1854AFD40((uint64_t)v13);
  swift_unknownObjectRelease();
}

- (void)__swift_stopSettingPresentationValueForKey:(id)a3
{
  uint64_t v4 = sub_186A1E95C();
  uint64_t v6 = v5;
  BOOL v7 = self;
  sub_1854A885C(v4, v6);

  swift_bridgeObjectRelease();
}

+ (void)_animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 tracking:(BOOL)a5 dampingRatioSmoothing:(double)a6 responseSmoothing:(double)a7 targetSmoothing:(double)a8 projectionDeceleration:(double)a9 animations:(id)a10 completion:(id)a11
{
}

+ (void)__animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 interactive:(double)a5 initialDampingRatio:(double)a6 initialResponse:(double)a7 dampingRatioSmoothing:(uint64_t)a8 responseSmoothing:(uint64_t)a9 targetSmoothing:(void *)a10 projectionDeceleration:(void *)a11 retargetImpulse:(void *)a12 animations:(void *)a13 completion:
{
  id v24 = a13;
  id v25 = a12;
  id v26 = a11;
  id v27 = a10;
  self;
  +[UIView __swift_animateUsingSpringWithDampingRatio:a9 response:v27 interactive:v26 initialDampingRatio:v25 initialResponse:v24 dampingRatioSmoothing:a1 responseSmoothing:a2 targetSmoothing:a3 projectionDeceleration:a4 retargetImpulse:a5 animations:a6 completion:a7];
}

void *__45__UIView_UIKitManual__actionForLayer_forKey___block_invoke(uint64_t a1)
{
  double result = *(void **)(a1 + 32);
  if (result) {
    return objc_msgSend(result, "__swift_removeAllRetargetableAnimationsIfDetatchedFromContext");
  }
  return result;
}

+ (void)__swift_animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 interactive:(BOOL)a5 initialDampingRatio:(id)a6 initialResponse:(id)a7 dampingRatioSmoothing:(double)a8 responseSmoothing:(double)a9 targetSmoothing:(double)a10 projectionDeceleration:(double)a11 retargetImpulse:(double)a12 animations:(id)a13 completion:(id)a14
{
  uint64_t v24 = (uint64_t)_Block_copy(a13);
  id v25 = (uint64_t (*)(char, char))_Block_copy(a14);
  id v26 = v25;
  if (v24)
  {
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v24;
    uint64_t v28 = sub_18557A3E4;
    if (v26) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v27 = 0;
    if (v25)
    {
LABEL_3:
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v26;
      id v26 = sub_185442254;
      id v30 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
      if (!v24) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  uint64_t v29 = 0;
  id v30 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
  if (v24)
  {
LABEL_4:
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v28;
    *(void *)(v24 + 24) = v27;
    id v30 = sub_1853BE6D4;
  }
LABEL_5:
  uint64_t v31 = v30;
  swift_getObjCClassMetadata();
  *(double *)long long v38 = a3;
  *(double *)&v38[1] = a4;
  v38[2] = a6;
  v38[3] = a7;
  *(double *)&v38[4] = a8;
  *(double *)&v38[5] = a9;
  *(double *)&v38[6] = a10;
  *(double *)&v38[7] = a11;
  *(double *)&v38[8] = a12;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v31;
  *(void *)(v32 + 24) = v24;
  id v33 = a6;
  id v34 = a7;
  id v35 = v33;
  id v37 = v34;
  sub_1854B0A60((uint64_t)v28);
  sub_1854C94C4((uint64_t)v38, a5, (uint64_t)sub_1853C3700, v32, (uint64_t)v26, v29, (uint64_t)signpost_c2_removePresentationModifier_end, 0);

  swift_release();
  sub_1854AFD40((uint64_t)v26);
  sub_1854AFD40((uint64_t)v28);
}

- (BOOL)_usesMinimumSafeAreas
{
  p_uint64_t viewFlags = &self->_viewFlags;
  unint64_t v3 = *(void *)((char *)&self->_viewFlags + 20);
  if ((v3 & 0x10000000000) == 0)
  {
    uint64_t v5 = [(UIView *)self _screen];
    v56.origin.double x = _UIScreenNativeDisplayExclusionRectForType([v5 _screenType]);
    double y = v56.origin.y;
    if (!CGRectIsNull(v56) && y > 0.0)
    {
      BOOL v7 = [(UIView *)self window];
      if ([v7 interfaceOrientation] == 1)
      {
        [(UIView *)self safeAreaInsets];
        double v9 = v8;
        uint64_t v10 = [(UIView *)self window];
        [v10 _sceneSafeAreaInsetsIncludingStatusBar:0];
        if (!v10 || v12 == 0.0 && v11 == 0.0 && v14 == 0.0 && v13 == 0.0)
        {
        }
        else
        {
          double v52 = v11;
          double v54 = v9;
          [(UIView *)self _currentScreenScale];
          double v17 = v16;
          if (v16 <= 0.0)
          {
            [MEMORY[0x1E4F28B00] currentHandler];
            long long v48 = v51 = p_viewFlags;
            objc_msgSend(v48, "handleFailureInMethod:object:file:lineNumber:description:", sel__edgesSafeAreaInsetsAreEffectivelySceneSafeAreaInsets, self, @"UIView.m", 21396, @"Invalid screen scale: %f", *(void *)&v17);

            p_uint64_t viewFlags = v51;
          }
          double v50 = v17;
          [(UIView *)self bounds];
          double v19 = v18;
          double v21 = v20;
          double v23 = v22;
          double v25 = v24;
          if ([v10 _isHostedInAnotherProcess])
          {
            -[UIView convertRect:toView:](self, "convertRect:toView:", v10, v19, v21, v23, v25);
            double v27 = v26;
            CGFloat v29 = v28;
            CGFloat v31 = v30;
            CGFloat v33 = v32;
            [v10 bounds];
          }
          else
          {
            double v27 = __UIViewConvertRectInViewToSceneSpace(self, v10, v19, v21, v23, v25);
            CGFloat v29 = v38;
            CGFloat v31 = v39;
            CGFloat v33 = v40;
            [v10 _sceneBounds];
          }
          CGFloat v41 = v35;
          CGFloat v42 = v34;
          CGFloat v43 = v36;
          CGFloat v44 = v37;
          CGRectGetMinX(*(CGRect *)&v34);
          v57.origin.double x = v27;
          v57.origin.double y = v29;
          v57.size.double width = v31;
          v57.size.double height = v33;
          CGRectGetMinX(v57);
          v58.origin.double x = v42;
          v58.origin.double y = v41;
          v58.size.double width = v43;
          v58.size.double height = v44;
          CGRectGetMaxX(v58);
          v59.origin.double x = v27;
          v59.origin.double y = v29;
          v59.size.double width = v31;
          v59.size.double height = v33;
          CGRectGetMaxX(v59);
          v60.origin.double x = v42;
          v60.origin.double y = v41;
          v60.size.double width = v43;
          v60.size.double height = v44;
          double v53 = v52 + CGRectGetMinY(v60);
          v61.origin.double x = v27;
          v61.origin.double y = v29;
          v61.size.double width = v31;
          v61.size.double height = v33;
          double v55 = vabdd_f64(v53, v54 + CGRectGetMinY(v61));
          v62.origin.double x = v42;
          v62.origin.double y = v41;
          v62.size.double width = v43;
          v62.size.double height = v44;
          CGRectGetMaxY(v62);
          v63.origin.double x = v27;
          v63.origin.double y = v29;
          v63.size.double width = v31;
          v63.size.double height = v33;
          CGRectGetMaxY(v63);

          if (v55 < 1.0 / v50)
          {
            long long v45 = [(UIView *)self window];
            long long v46 = [v45 windowScene];
            int v47 = [v46 _usesMinimumSafeAreaInsets];

            if (v47)
            {
              unint64_t v3 = *(void *)((char *)p_viewFlags + 20) | 0x8000000000;
              goto LABEL_14;
            }
LABEL_13:
            unint64_t v3 = *(void *)((char *)p_viewFlags + 20) & 0xFFFFFF7FFFFFFFFFLL;
LABEL_14:
            *(void *)((char *)p_viewFlags + 20) = v3 | 0x10000000000;
            return (v3 >> 39) & 1;
          }
        }
      }
    }
    goto LABEL_13;
  }
  return (v3 >> 39) & 1;
}

- (UIEdgeInsets)_minimumSafeAreaInsets
{
  p_uint64_t viewFlags = &self->_viewFlags;
  uint64_t v4 = *(void *)((char *)&self->_viewFlags + 20);
  if ((v4 & 0x20000000000) == 0)
  {
    v4 |= 0xA0000000000uLL;
    *(void *)((char *)&self->_viewFlags + 20) = v4;
  }
  if ((v4 & 0x80000000000) != 0)
  {
    id v5 = [(UIView *)self superview];
    if (v5)
    {
      uint64_t v6 = v5;
      [v5 _minimumSafeAreaInsets];
      double v8 = v7;
      double v10 = v9;
      double v12 = v11;
      double v14 = v13;
      [v6 bounds];
      CGFloat v16 = v15;
      CGFloat v18 = v17;
      CGFloat v20 = v19;
      CGFloat v22 = v21;
      [(UIView *)self _frameIgnoringLayerTransform];
      self->_minimumSafeAreaInsets.double top = _UIEdgeInsetsPropagatedToChildRectIncludingOutsetOnEdges(15, v8, v10, v12, v14, v16, v18, v20, v22, v23, v24, v25, v26);
      self->_minimumSafeAreaInsets.double left = v27;
      self->_minimumSafeAreaInsets.double bottom = v28;
      self->_minimumSafeAreaInsets.double right = v29;
    }
    else if ((*(void *)p_viewFlags & 0x1000) != 0)
    {
      *(void *)((char *)p_viewFlags + 20) |= 0x40000000000uLL;
      [(UIView *)self safeAreaInsets];
      self->_minimumSafeAreaInsets.double top = v46;
      self->_minimumSafeAreaInsets.double left = v47;
      self->_minimumSafeAreaInsets.double bottom = v48;
      self->_minimumSafeAreaInsets.double right = v49;
    }
    else
    {
      id v67 = 0;
      double v30 = [(UIView *)self _effectiveBoundingPathAndBoundingPathView:&v67];
      id v31 = v67;
      [(UIView *)self bounds];
      -[UIView convertRect:toView:](self, "convertRect:toView:", v31);
      objc_msgSend(v30, "_centerEdgeInsetsOfBoundingPathAndRect:");
      double v33 = v32;
      double v35 = v34;
      double v37 = v36;
      double v39 = v38;
      double v40 = fabs(v36);
      double v41 = fabs(v35);
      double v42 = fabs(v38);
      if (fabs(v32) == INFINITY || v40 == INFINITY || v41 == INFINITY || v42 == INFINITY)
      {
        *(void *)((char *)p_viewFlags + 20) |= 0x40000000000uLL;
        [(UIView *)self safeAreaInsets];
      }
      else
      {
        *(void *)((char *)p_viewFlags + 20) &= ~0x40000000000uLL;
        [(UIView *)self safeAreaInsets];
        double v51 = v50;
        double v53 = v52;
        double v55 = v54;
        double v57 = v56;
        [(UIView *)self _currentScreenScale];
        double v59 = UIEdgeInsetsAverage(15, v33, v35, v37, v39, v51, v53, v55, v57, v58);
      }
      self->_minimumSafeAreaInsets.double top = v59;
      self->_minimumSafeAreaInsets.double left = v60;
      self->_minimumSafeAreaInsets.double bottom = v61;
      self->_minimumSafeAreaInsets.double right = v62;
    }
    *(void *)((char *)p_viewFlags + 20) &= ~0x80000000000uLL;
  }
  double top = self->_minimumSafeAreaInsets.top;
  double left = self->_minimumSafeAreaInsets.left;
  double bottom = self->_minimumSafeAreaInsets.bottom;
  double right = self->_minimumSafeAreaInsets.right;
  result.double right = right;
  result.double bottom = bottom;
  result.double left = left;
  result.double top = top;
  return result;
}

- (CGRect)_frameIgnoringLayerTransform
{
  memset(&v21, 0, sizeof(v21));
  layer = self->_layer;
  if (layer) {
    [(CALayer *)layer transform];
  }
  else {
    memset(&v21, 0, sizeof(v21));
  }
  CATransform3D v20 = v21;
  if (CATransform3DIsIdentity(&v20))
  {
    [(UIView *)self frame];
    double v7 = v6;
    double v9 = v8;
  }
  else
  {
    [(UIView *)self bounds];
    double v7 = v10;
    double v9 = v11;
    [(UIView *)self center];
    double v13 = v12;
    double v15 = v14;
    [(CALayer *)self->_layer anchorPoint];
    double v4 = v13 - v7 * v16;
    double v5 = v15 - v9 * v17;
  }
  double v18 = v7;
  double v19 = v9;
  result.size.double height = v19;
  result.size.double width = v18;
  result.origin.double y = v5;
  result.origin.double x = v4;
  return result;
}

+ (void)_animateInProcessAlongsideTransition:(id)a3
{
  unint64_t v3 = (void (**)(void, double))_Block_copy(a3);
  sub_1853C6274(v3);
  _Block_release(v3);
}

- (UIView)hitTest:(CGPoint)point withEvent:(UIEvent *)event
{
  double y = point.y;
  double x = point.x;
  double v7 = event;
  uint64_t v36 = 0;
  double v37 = (id *)&v36;
  uint64_t v38 = 0x3032000000;
  double v39 = __Block_byref_object_copy__239;
  double v40 = __Block_byref_object_dispose__239;
  id v41 = 0;
  uint64_t v8 = UIApp;
  double v9 = [(UIView *)self _window];
  LOBYTE(v8) = [(id)v8 _didEatCurrentTouchForWindow:v9];

  if ((v8 & 1) == 0)
  {
    int v10 = _UIViewAnimationDelegateAllowsUserInteraction(self);
    int v11 = _UIViewEatsTouchesAndAnimationDelegateAllowsInteraction(self, v10);
    char v12 = v11;
    if (v11 && (_UIViewIgnoresTouchEvents(self, 1) & 1) == 0)
    {
      double v16 = [(UIView *)self layer];
      double v17 = [v16 presentationLayer];
      double v18 = [(UIView *)self layer];
      objc_msgSend(v17, "convertPoint:fromLayer:", v18, x, y);
      double v20 = v19;
      double v22 = v21;

      CGFloat v23 = [(UIView *)self layer];
      CGFloat v24 = [v23 presentationLayer];
      LODWORD(v18) = objc_msgSend(v24, "containsPoint:", v20, v22);

      if (v18)
      {
        objc_storeStrong(v37 + 5, self);
        CGFloat v25 = (void *)UIApp;
        CGFloat v26 = [(UIView *)self _window];
        [v25 _eatCurrentTouchForWindow:v26];
      }
    }
    else if ((_UIViewIgnoresTouchEvents(self, v12) & 1) == 0 {
           && -[UIView pointInside:withEvent:](self, "pointInside:withEvent:", v7, x, y))
    }
    {
      double v13 = [(UIView *)self _window];
      BOOL v14 = v13 != 0;

      objc_storeStrong(v37 + 5, self);
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 3221225472;
      _OWORD v30[2] = __38__UIView_Geometry__hitTest_withEvent___block_invoke;
      v30[3] = &unk_1E530FE48;
      double v33 = x;
      double v34 = y;
      v30[4] = self;
      BOOL v35 = v14;
      id v31 = v7;
      double v32 = &v36;
      double v15 = [(UIView *)self _allSubviews];
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 3221225472;
      v29[2] = __38__UIView_Geometry__hitTest_withEvent___block_invoke_2;
      v29[3] = &__block_descriptor_40_e15_v32__0_8Q16_B24lu32l8;
      v29[4] = v30;
      [v15 enumerateObjectsWithOptions:2 usingBlock:v29];
    }
  }
  id v27 = v37[5];
  _Block_object_dispose(&v36, 8);

  return (UIView *)v27;
}

- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event
{
  double y = point.y;
  double x = point.x;
  double v7 = event;
  uint64_t v8 = self->_layer;
  if (_UIViewIsAnimating(self))
  {
    double v9 = self;
    uint64_t v44 = 0;
    long long v45 = &v44;
    uint64_t v46 = 0x2020000000;
    char v47 = 0;
    int v10 = [(UIView *)v9 layer];
    int v11 = [v10 animationKeys];
    uint64_t v38 = MEMORY[0x1E4F143A8];
    uint64_t v39 = 3221225472;
    double v40 = ___UIViewAnimationDelegateAllowsPresentationHitTesting_block_invoke;
    id v41 = &unk_1E52F1AC0;
    char v12 = v9;
    double v42 = v12;
    CGFloat v43 = &v44;
    [v11 enumerateObjectsUsingBlock:&v38];

    LODWORD(v10) = *((unsigned __int8 *)v45 + 24);
    _Block_object_dispose(&v44, 8);

    if (v10)
    {
      double v13 = objc_msgSend(v12[20], "presentationLayer", v38, v39, v40, v41);
      BOOL v14 = v13;
      if (v13)
      {
        double v15 = v13;

        -[CALayer convertPoint:fromLayer:](v15, "convertPoint:fromLayer:", v12[20], x, y);
        double x = v16;
        double y = v17;
        uint64_t v8 = v15;
      }
    }
  }
  [(CALayer *)v8 bounds];
  double v19 = v18;
  double v21 = v20;
  double v23 = v22;
  double v25 = v24;
  [(UIView *)self hitTestInsets];
  double v29 = v28;
  BOOL v30 = 0;
  double v32 = v23 - (v27 + v31);
  if (v32 > 0.0)
  {
    double v33 = v25 - (v26 + v29);
    if (v33 > 0.0)
    {
      double v34 = v19 + v27;
      double v35 = v21 + v26;
      double v36 = v34;
      v48.double x = x;
      v48.double y = y;
      BOOL v30 = CGRectContainsPoint(*(CGRect *)(&v32 - 2), v48);
    }
  }

  return v30;
}

- (UIEdgeInsets)hitTestInsets
{
  [(UIView *)self hitTestDirectionalInsets];
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  BOOL v11 = [(UIView *)self _shouldReverseLayoutDirection];
  if (v11) {
    double v12 = v6;
  }
  else {
    double v12 = v10;
  }
  if (v11) {
    double v13 = v10;
  }
  else {
    double v13 = v6;
  }
  double v14 = v4;
  double v15 = v8;
  result.double right = v12;
  result.double bottom = v15;
  result.double left = v13;
  result.double top = v14;
  return result;
}

- (NSDirectionalEdgeInsets)hitTestDirectionalInsets
{
  double v2 = 0.0;
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  if ((*((unsigned char *)&self->_viewFlags + 20) & 0x80) != 0)
  {
    double v6 = objc_getAssociatedObject(self, &_UIViewHitTestDirectionalInsetsKey);
    [v6 directionalEdgeInsetsValue];
    double v2 = v7;
    double v3 = v8;
    double v4 = v9;
    double v5 = v10;
  }
  double v11 = v2;
  double v12 = v3;
  double v13 = v4;
  double v14 = v5;
  result.trailing = v14;
  result.double bottom = v13;
  result.leading = v12;
  result.double top = v11;
  return result;
}

- (void)addGestureRecognizer:(UIGestureRecognizer *)gestureRecognizer
{
}

- (void)layerWillDraw:(id)a3
{
  id v7 = a3;
  if ([(UIView *)self _needsContentsFormatUpdate])
  {
    if (self)
    {
      [(UIView *)self _wantsDeepDrawing];
      os_variant_has_internal_diagnostics();
      if ((*(void *)((char *)&self->_viewFlags + 20) & 7) != 4) {
        *(void *)((char *)&self->_viewFlags + 20) = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFFFF8 | 4;
      }
      id v4 = v7;
      if (v4)
      {
        unint64_t v5 = *(void *)((char *)&self->_viewFlags + 20) & 7;
        if (v5 <= 4) {
          [v4 setContentsFormat:**((void **)&unk_1E5310238 + v5)];
        }
      }
    }
    else
    {
      id v6 = v7;
    }

    [(UIView *)self _setNeedsContentsFormatUpdate:0];
  }
}

- (BOOL)_needsContentsFormatUpdate
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 21) & 1;
}

- (BOOL)_wantsDeepDrawing
{
  double v3 = [(UIView *)self traitCollection];
  uint64_t v4 = [v3 displayGamut];

  if (v4 == -1)
  {
    unint64_t v5 = [(UIView *)self _screen];
    uint64_t v4 = [v5 gamut];
  }
  if (![(UIView *)self wantsDeepColorDrawing]
    || (unint64_t)(v4 - 1) > 0xFFFFFFFFFFFFFFFDLL)
  {
    return 0;
  }
  return [(UIView *)self _canDrawContent];
}

- (BOOL)wantsDeepColorDrawing
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 29) & 1;
}

- (void)_didChangeFromIdiom:(int64_t)a3 onScreen:(id)a4 traverseHierarchy:(BOOL)a5
{
}

- (CGRect)convertRect:(CGRect)rect toView:(UIView *)view
{
  uint64_t v4 = view;
  double height = rect.size.height;
  double width = rect.size.width;
  double y = rect.origin.y;
  double x = rect.origin.x;
  if (view || (uint64_t v4 = (UIView *)[(UIView *)self window]) != 0)
  {
    double v10 = [(UIView *)self _window];
    [(UIView *)v4 _window];

    if (v4 != self)
    {
      layer = v4->_layer;
      double v12 = self->_layer;
      -[CALayer convertRect:toLayer:](v12, "convertRect:toLayer:", layer, x, y, width, height);
      double x = v13;
      double y = v14;
      double width = v15;
      double height = v16;
    }
  }
  double v17 = x;
  double v18 = y;
  double v19 = width;
  double v20 = height;
  result.size.double height = v20;
  result.size.double width = v19;
  result.origin.double y = v18;
  result.origin.double x = v17;
  return result;
}

- (CGPoint)convertPoint:(CGPoint)a3 fromCoordinateSpace:(id)a4
{
  -[UIView convertRect:fromCoordinateSpace:](self, "convertRect:fromCoordinateSpace:", a4, a3.x, a3.y, *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8));
  result.double y = v5;
  result.double x = v4;
  return result;
}

- (CGRect)convertRect:(CGRect)a3 fromCoordinateSpace:(id)a4
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  if (a4 && a4 != self)
  {
    double v10 = self;
    if (objc_opt_isKindOfClass())
    {
      double v11 = [(UIView *)self _window];
      double v12 = [a4 _window];

      if (v11 == v12)
      {
        double v13 = self;
        double v14 = x;
        double v15 = y;
        double v16 = width;
        double v17 = height;
        id v18 = a4;
        goto LABEL_9;
      }
    }
    else
    {
    }
    id v19 = [(UIView *)self _window];
    if (!v19)
    {
      -[CALayer convertRect:fromLayer:](self->_layer, "convertRect:fromLayer:", 0, x, y, width, height);
      goto LABEL_11;
    }
    id v20 = v19;
    objc_msgSend(v19, "convertRect:fromCoordinateSpace:", a4, x, y, width, height);
    double v13 = self;
    id v18 = v20;
LABEL_9:
    -[UIView convertRect:fromView:](v13, "convertRect:fromView:", v18, v14, v15, v16, v17);
LABEL_11:
    double x = v21;
    double y = v22;
    double width = v23;
    double height = v24;
  }
  double v25 = x;
  double v26 = y;
  double v27 = width;
  double v28 = height;
  result.size.double height = v28;
  result.size.double width = v27;
  result.origin.double y = v26;
  result.origin.double x = v25;
  return result;
}

- (void)setAllowsGroupBlending:(BOOL)a3
{
  BOOL v3 = a3;
  id v4 = [(UIView *)self layer];
  [v4 setAllowsGroupBlending:v3];
}

- (void)setTintColor:(UIColor *)tintColor
{
  id v4 = tintColor;
  if (v4)
  {
    double v5 = +[UIColor tintColor];

    if (v5 == v4)
    {

      id v4 = 0;
    }
  }
  _UIViewGetInteractionTintColorBypassingOverride(self);
  id v6 = (UIColor *)(id)objc_claimAutoreleasedReturnValue();
  id v7 = v4;
  double v9 = v7;
  if (v6 == v7)
  {

    goto LABEL_13;
  }
  if (v7 && v6)
  {
    BOOL v8 = [(UIColor *)v6 isEqual:v7];

    if (v8) {
      goto LABEL_13;
    }
  }
  else
  {
  }
  _UIViewSetInteractionTintColor(self, v9);
  -[UIView _dispatchTintColorVisitorWithReasons:](self, 1);
  if (qword_1EB25C338 != -1) {
    dispatch_once(&qword_1EB25C338, &__block_literal_global_3730);
  }
LABEL_13:
}

- (void)_dispatchTintColorVisitorWithReasons:(void *)a1
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    BOOL v3 = [[_UITintColorVisitor alloc] initWithNotificationReasons:a2];
    self;
    byte_1EB25C0A4 = 1;
    [a1 _receiveVisitor:v3];
    if (qword_1EB25C110)
    {
      long long v11 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      id v4 = (id)[(id)qword_1EB25C110 copy];
      uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)v12;
        do
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v12 != v7) {
              objc_enumerationMutation(v4);
            }
            double v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
            objc_msgSend(v9, "bounds", (void)v11);
            if (!CGRectIsEmpty(v17)) {
              [v9 forceDisplayIfNeeded];
            }
          }
          uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
        }
        while (v6);
      }

      double v10 = (void *)qword_1EB25C110;
      qword_1EB25C110 = 0;
    }
    self;
    byte_1EB25C0A4 = 0;
  }
}

- (void)_receiveVisitor:(id)a3
{
}

- (void)_tintColorDidChange
{
  int v3 = dyld_program_sdk_at_least();
  if (v3)
  {
    if (qword_1EB25C330 != -1) {
      dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
    }
    if (byte_1EB25C0B5)
    {
      id v4 = -[UIView __tintColor](self);
      uint64_t v5 = [(UITraitCollection *)self->_cachedTraitCollection _tintColor];

      if (v5 != v4)
      {
        -[UITraitCollection _traitCollectionByReplacingTintColor:]((char *)self->_cachedTraitCollection, v4);
        uint64_t v6 = (UITraitCollection *)objc_claimAutoreleasedReturnValue();
        cachedTraitCollection = self->_cachedTraitCollection;
        self->_cachedTraitCollection = v6;

        _UITraitEnvironmentGeneratedTraitCollection((uint64_t)self, (unint64_t)self->_cachedTraitCollection);
      }
    }
    else
    {
      *((_DWORD *)&self->_viewFlags + 4) &= ~0x80u;
    }
  }
  if (os_variant_has_internal_diagnostics())
  {
    if (!self)
    {
      long long v11 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)CGAffineTransform buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v11, OS_LOG_TYPE_FAULT, "Attempted to begin using the effective theme of a nil view.", buf, 2u);
      }
    }
  }
  else if (!self)
  {
    long long v12 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C190) + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v13 = 0;
      _os_log_impl(&dword_1853B0000, v12, OS_LOG_TYPE_ERROR, "Attempted to begin using the effective theme of a nil view.", v13, 2u);
    }
  }
  BOOL v8 = +[UITraitCollection _currentTraitCollectionIfExists]();
  double v9 = [(UIView *)self traitCollection];
  +[UITraitCollection setCurrentTraitCollection:v9];

  double v10 = (void *)_UISetCurrentFallbackEnvironment(self);
  [(UIView *)self tintColorDidChange];
  [(UIView *)self interactionTintColorDidChange];
  if (v3) {
    -[UIView _effectiveThemeTraitCollectionDidChangeInternal:](self, HIDWORD(*(void *)((char *)&self->_viewFlags + 20)) & 1);
  }
  _UIRestorePreviousFallbackEnvironment(v10);
  +[UITraitCollection setCurrentTraitCollection:v8];
}

- (void)_updateDynamicBackgroundColor
{
  p_uint64_t viewFlags = &self->_viewFlags;
  if ((*((unsigned char *)&self->_viewFlags + 22) & 2) != 0)
  {
    uint64_t v5 = [(UIView *)self _backgroundCGColor];
    if (v5)
    {
      uint64_t v6 = v5;
      id AssociatedObject = (CGColor *)objc_getAssociatedObject(self, &unk_1EB25C0B7);
      if (!CGColorEqualToColor(AssociatedObject, v6))
      {
        objc_setAssociatedObject(self, &unk_1EB25C0B8, 0, (void *)1);
        objc_setAssociatedObject(self, &unk_1EB25C0B7, 0, (void *)1);
        *(void *)((char *)p_viewFlags + 20) &= ~0x20000uLL;
        _UIViewSetBackgroundColorSystemColorName(self, 0);
      }
    }
  }
  if ((*((unsigned char *)p_viewFlags + 22) & 2) != 0)
  {
    memset(__src, 0, sizeof(__src));
    _UIBeginTrackingTraitUsage(self, 0, __src);
    BOOL v8 = objc_getAssociatedObject(self, &unk_1EB25C0B8);
    double v9 = v8;
    if ((*((unsigned char *)p_viewFlags + 22) & 8) != 0)
    {
      long long v12 = (void *)[v8 CGColor];
    }
    else
    {
      double v10 = [(UIView *)self traitCollection];
      -[UIColor _resolvedBackgroundColorWithTraitCollection:](v9, v10);
      id v11 = objc_claimAutoreleasedReturnValue();
      long long v12 = (void *)[v11 CGColor];
    }
    if ((*((unsigned char *)p_viewFlags + 24) & 0x20) != 0)
    {
      long long v13 = [(UIView *)self traitCollection];
      if (_UILightWeightMaterialsEnabled([v13 userInterfaceIdiom]))
      {
        uint64_t v14 = [v13 traitCollectionByModifyingTraits:&__block_literal_global_1148];

        long long v13 = (void *)v14;
      }
      double v15 = [v9 _resolvedMaterialWithTraitCollection:v13];
      uint64_t v16 = [v15 backgroundEffects];
      CGRect v17 = [v15 contentEffects];
      id v18 = [v16 arrayByAddingObjectsFromArray:v17];
      [(UIView *)self mt_setBackgroundEffects:v18];

      if (v15)
      {
        id v19 = [(UIView *)self _nilBackgroundColor];
        long long v12 = (void *)[v19 CGColor];
      }
    }
    else
    {
      [(UIView *)self mt_setBackgroundEffects:0];
    }
    objc_setAssociatedObject(self, &unk_1EB25C0B7, v12, (void *)1);
    id v20 = [v9 _systemColorName];
    -[UIView _setBackgroundCGColor:withSystemColorName:]((uint64_t)self, (CGColor *)v12, v20);

    memcpy(v22, __src, sizeof(v22));
    double v21 = (char *)GetTraitCollectionTSD() + 16;
    memcpy(__dst, v21, sizeof(__dst));
    memcpy(v21, v22, 0x160uLL);
    -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:](self, (uint64_t)&__dst[136], [(UIView *)self methodForSelector:a2], sel__updateDynamicBackgroundColor);
    _UITraitUsageTrackingResultDestroy((uint64_t)__dst);
  }
}

- (_WORD)_effectiveThemeTraitCollectionDidChangeInternal:(_WORD *)result
{
  if (result)
  {
    double v2 = result;
    if (a2)
    {
      [result setNeedsDisplay];
      if (!v2[106] || (dyld_program_sdk_at_least() & 1) == 0) {
        [v2 setNeedsLayout];
      }
    }
    return (_WORD *)[v2 _updateDynamicBackgroundColor];
  }
  return result;
}

- (void)mt_setBackgroundEffects:(id)a3
{
  if (self)
  {
    viewBackingAudouble x = self->_viewBackingAux;
    if (viewBackingAux && (uint64_t v6 = viewBackingAux->_effectHost) != 0)
    {
    }
    else if (![a3 count])
    {
      return;
    }
    -[UIView _backing_wrapLayerInIntermediate]((uint64_t)self);
    -[UIView _updateAutomaticCaptureGroupIfNecessary]((uint64_t)self);
    uint64_t v7 = -[UIView _backing_outermostLayer](self);
    [v7 setAllowsGroupBlending:0];

    id v9 = (id)[a3 copy];
    BOOL v8 = -[UIView _effectHost](self);
    [v8 setBackgroundEffects:v9];
  }
}

- (NSDirectionalEdgeInsets)directionalLayoutMargins
{
  double v3 = -[UIView _resolvedInferredLayoutMargins]((uint64_t)self);
  int v7 = *((_DWORD *)&self->_viewFlags + 4);
  if ((v7 & 0x80000) != 0) {
    double v8 = v6;
  }
  else {
    double v8 = v4;
  }
  if ((*(void *)&v7 & 0x80000) != 0) {
    double v6 = v4;
  }
  double v9 = v8;
  result.trailing = v6;
  result.double bottom = v5;
  result.leading = v9;
  result.double top = v3;
  return result;
}

- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize withHorizontalFittingPriority:(UILayoutPriority)horizontalFittingPriority verticalFittingPriority:(UILayoutPriority)verticalFittingPriority
{
  double height = targetSize.height;
  double width = targetSize.width;
  if (-[UIView _wantsAutolayoutOrIsGuardingForEngineHosting]((uint64_t)self))
  {
    *(UILayoutPriority *)&double v10 = horizontalFittingPriority;
    *(UILayoutPriority *)&double v11 = verticalFittingPriority;
    -[UIView _systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:](self, "_systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:hasIntentionallyCollapsedHeight:", 0, width, height, v10, v11);
  }
  else
  {
    -[UIView sizeThatFits:](self, "sizeThatFits:", width, height);
  }
  result.double height = v13;
  result.double width = v12;
  return result;
}

- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize
{
  LODWORD(v3) = 1112014848;
  LODWORD(v4) = 1112014848;
  -[UIView systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:](self, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", targetSize.width, targetSize.height, v3, v4);
  result.double height = v6;
  result.double width = v5;
  return result;
}

- (void)sizeToFit
{
  [(UIView *)self transform];
  if (CGAffineTransformIsIdentity(&v19))
  {
    [(UIView *)self frame];
    double v4 = v3;
    double v6 = v5;
    -[UIView sizeThatFits:](self, "sizeThatFits:", v7, v8);
    -[UIView setFrame:](self, "setFrame:", v4, v6, v9, v10);
  }
  else
  {
    [(UIView *)self bounds];
    double v12 = v11;
    double v14 = v13;
    -[UIView sizeThatFits:](self, "sizeThatFits:", v15, v16);
    -[UIView setBounds:](self, "setBounds:", v12, v14, v17, v18);
  }
}

- (id)_defaultLayoutDescription
{
  if (objc_opt_respondsToSelector())
  {
    id v3 = (id)[(UIView *)self reuseIdentifier];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      id v3 = 0;
    }
  }
  else
  {
    id v3 = 0;
  }
  if (![v3 length] && os_variant_has_internal_diagnostics())
  {
    if (qword_1EB25A638 != -1) {
      dispatch_once(&qword_1EB25A638, &__block_literal_global_85_1);
    }
    if (byte_1EB25A5B0) {
      id v3 = [(UIView *)self _layoutDebuggingTitle];
    }
  }
  double v4 = (void *)_truncatedDebuggingDescriptionForLayout(v3);
  uint64_t v5 = [v4 length];
  double v6 = NSString;
  uint64_t v7 = objc_opt_class();
  if (v5) {
    return (id)[v6 stringWithFormat:@"%@:%p'%@'", v7, self, v4];
  }
  else {
    return (id)[v6 stringWithFormat:@"%@:%p", v7, self, v9];
  }
}

- (id)nsli_description
{
  id result = [(UIView *)self _layoutDescriptionIfDifferentFromDefault];
  if (!result)
  {
    return [(UIView *)self _defaultLayoutDescription];
  }
  return result;
}

- (id)_layoutDescriptionIfDifferentFromDefault
{
  double v2 = [(UIView *)self _layoutDebuggingIdentifier];
  return (id)_truncatedDebuggingDescriptionForLayout(v2);
}

- (NSString)_layoutDebuggingIdentifier
{
  if (*((unsigned char *)&self->_viewFlags + 21)) {
    objc_getAssociatedObject(self, &_UIViewLayoutDebuggingIdentifierKey);
  }
  else {
  double v2 = [self accessibilityIdentifier];
  }
  return (NSString *)v2;
}

- (void)_safeAreaInsetsDidChangeFromOldInsets:(UIEdgeInsets)a3
{
  [(UIView *)self safeAreaInsetsDidChange];
  -[UIView __viewDelegate]((id *)&self->super.super.isa);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v4 _safeAreaInsetsDidChangeForView];
}

+ (double)_currentAnimationDuration
{
  if (dyld_program_sdk_at_least())
  {
    int v3 = [a1 _isInAnimationBlockWithAnimationsEnabled];
    double result = 0.0;
    if (!v3) {
      return result;
    }
    uint64_t v5 = __currentViewAnimationState;
    return *(double *)(v5 + 40);
  }
  uint64_t v5 = __currentViewAnimationState;
  if (__currentViewAnimationState) {
    return *(double *)(v5 + 40);
  }
  return 0.0;
}

- _traitOverridesIfExist
{
  uint64_t v1;
  uint64_t vars8;

  if (a1)
  {
    if ((a1[28] & 0x100) != 0)
    {
      objc_getAssociatedObject(a1, &_UIViewTraitOverridesKey);
      a1 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      a1 = 0;
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

- (void)_invalidateTraitCollectionAndSchedulePropagationForSubviews
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (qword_1EB25C330 != -1) {
      dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
    }
    if (byte_1EB25C0B5)
    {
      long long v9 = 0u;
      long long v10 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      double v2 = objc_msgSend(a1, "_allSubviews", 0);
      uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = *(void *)v8;
        do
        {
          for (uint64_t i = 0; i != v4; ++i)
          {
            if (*(void *)v8 != v5) {
              objc_enumerationMutation(v2);
            }
            _UIViewInvalidateTraitCollectionAndSchedulePropagation(*(void *)(*((void *)&v7 + 1) + 8 * i), 1);
          }
          uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
        }
        while (v4);
      }
    }
  }
}

- (void)addSubview:(UIView *)view
{
}

- (void)setAutoresizingMask:(UIViewAutoresizing)autoresizingMask
{
  unint64_t viewFlags = (unint64_t)self->_viewFlags;
  if (((viewFlags >> 18) & 0x3F) != autoresizingMask)
  {
    uint64_t v4 = *((void *)&self->_viewFlags + 1);
    int v5 = *((_DWORD *)&self->_viewFlags + 4);
    *(void *)&self->_unint64_t viewFlags = viewFlags & 0xFFFFFFFFFF03FFFFLL | ((autoresizingMask & 0x3F) << 18);
    *((void *)&self->_viewFlags + 1) = v4;
    *((_DWORD *)&self->_viewFlags + 4) = v5;
    -[UIView _invalidateAutoresizingConstraints]((uint64_t)self);
  }
}

- (void)_setShouldAdaptToMaterials:(BOOL)a3
{
  uint64_t v3 = 0x2000000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *(void *)((char *)&self->_viewFlags + 20) = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFFFDFFFFFFFFFLL | v3;
}

- (void)_setContinuousCornerRadius:(double)a3
{
  id v4 = [(UIView *)self layer];
  [v4 setCornerCurve:*MEMORY[0x1E4F39EA8]];
  [v4 setCornerRadius:a3];
}

- (void)setAllowsGroupOpacity:(BOOL)a3
{
  BOOL v3 = a3;
  id v4 = [(UIView *)self layer];
  [v4 setAllowsGroupOpacity:v3];
}

- (void)addLayoutGuide:(UILayoutGuide *)layoutGuide
{
  id v4 = layoutGuide;
  if (v4)
  {
    long long v9 = v4;
    int v5 = [(UILayoutGuide *)v4 owningView];

    id v4 = v9;
    if (v5 != self)
    {
      if ([(UILayoutGuide *)v9 _isLockedToOwningView])
      {
        [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"You may not change the owning view of a system-vended UILayoutGuide"];
      }
      else
      {
        double v6 = [(UILayoutGuide *)v9 owningView];
        [(UILayoutGuide *)v9 _setAllowOwningViewSetting:1];
        [(UILayoutGuide *)v9 setOwningView:self];
        long long v7 = -[UIView _mutableLayoutGuidesCreateIfNecessary](self);
        [v7 addObject:v9];

        long long v8 = [v6 _mutableLayoutGuides];
        [v8 removeObject:v9];

        if (qword_1EB25C2D8 != -1) {
          dispatch_once(&qword_1EB25C2D8, &__block_literal_global_3684);
        }
        if (objc_opt_isKindOfClass()) {
          *((_DWORD *)&self->_viewFlags + 4) |= 0x8000u;
        }
      }
      id v4 = v9;
    }
  }
}

- (id)_mutableLayoutGuidesCreateIfNecessary
{
  if (a1)
  {
    id v2 = [a1 _mutableLayoutGuides];
    if (!v2)
    {
      id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      objc_setAssociatedObject(a1, &_UIViewLayoutGuidesAssocObjectKey, v2, (void *)1);
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

- (NSLayoutYAxisAnchor)topAnchor
{
  BOOL v3 = (objc_class *)objc_opt_class();
  return (NSLayoutYAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewTopAnchorKey, v3, 3);
}

- (NSLayoutYAxisAnchor)firstBaselineAnchor
{
  BOOL v3 = (objc_class *)objc_opt_class();
  return (NSLayoutYAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewFirstBaselineAnchorKey, v3, 12);
}

- (void)setAutoresizesSubviews:(BOOL)autoresizesSubviews
{
  uint64_t v3 = 0x20000;
  if (autoresizesSubviews) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_unint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFFFFFFDFFFFLL | v3;
}

- (void)setNeedsUpdateConstraints
{
  [(UIView *)self _setWantsAutolayout];
  [(UIView *)self _setNeedsUpdateConstraints];
}

- (void)_incrementHiddenManagedByLayoutArrangementCount
{
  p_unint64_t viewFlags = &self->_viewFlags;
  if (-[UIView _bitFlagValueAfterIncrementingHiddenManagementCountForKey:withIncrement:bitFlagValue:](self, "_UIViewHiddenManagementCount", 1, (*((_DWORD *)&self->_viewFlags + 4) >> 14) & 1))int v3 = 0x4000; {
  else
  }
    int v3 = 0;
  *((_DWORD *)p_viewFlags + 4) = *((_DWORD *)p_viewFlags + 4) & 0xFFFFBFFF | v3;
}

- (CGSize)_intrinsicSizeWithinSize:(CGSize)a3
{
  double height = a3.height;
  double width = a3.width;
  p_uint64_t viewFlags = &self->_viewFlags;
  uint64_t v7 = *((void *)&self->_viewFlags + 1) & 0x8000;
  if (dyld_program_sdk_at_least())
  {
    uint64_t viewFlags = *(void *)p_viewFlags;
  }
  else
  {
    double v9 = -1.0;
    double v10 = -1.0;
    if (v7) {
      goto LABEL_30;
    }
    uint64_t viewFlags = (uint64_t)self->_viewFlags;
    uint64_t v7 = *((void *)&self->_viewFlags + 1) & 0x1000;
  }
  double v9 = -1.0;
  if ((viewFlags & 0x20000000000000) != 0
    && !v7
    && [(UIView *)self _hostsLayoutEngineAllowsTAMIC_NO])
  {
    int v11 = -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self);
    double v10 = -1.0;
    if (v11)
    {
      [(UIView *)self _preferredMaxLayoutWidth];
      double v13 = 0;
      if (width >= v12) {
        double width = v12;
      }
      if (width > 0.0 && width < 2777777.0)
      {
        double v13 = [(NSLayoutDimension *)[(UIView *)self widthAnchor] constraintLessThanOrEqualToConstant:width];
        [(NSLayoutConstraint *)v13 setIdentifier:@"UI-temp-max-width-intrinsicContentSize"];
        [(NSLayoutConstraint *)v13 setActive:1];
      }
      double v14 = 0;
      if (height > 0.0 && height < 2777777.0)
      {
        double v14 = [(NSLayoutDimension *)[(UIView *)self heightAnchor] constraintLessThanOrEqualToConstant:height];
        [(NSLayoutConstraint *)v14 setIdentifier:@"UI-temp-max-height-intrinsicContentSize"];
        [(NSLayoutConstraint *)v14 setActive:1];
      }
      *((void *)&self->_viewFlags + 1) |= 0x8000uLL;
      -[UIView systemLayoutSizeFittingSize:](self, "systemLayoutSizeFittingSize:", 0.0, 0.0);
      double v16 = v15;
      double v18 = v17;
      *((void *)&self->_viewFlags + 1) &= ~0x8000uLL;
      [(NSLayoutConstraint *)v13 setActive:0];
      [(NSLayoutConstraint *)v14 setActive:0];
      BOOL v19 = v16 >= 2777777.0 || v16 == 0.0;
      double v10 = -1.0;
      if (v19) {
        double v9 = -1.0;
      }
      else {
        double v9 = v16;
      }
      if (v18 < 2777777.0 && v18 != 0.0) {
        double v10 = v18;
      }
    }
  }
  else
  {
    double v10 = -1.0;
  }
LABEL_30:
  double v21 = v9;
  result.double height = v10;
  result.double width = v21;
  return result;
}

- (void)setTranslatesAutoresizingMaskIntoConstraints:(BOOL)translatesAutoresizingMaskIntoConstraints
{
  if (((*(void *)&self->_viewFlags >> 53) & 1) == translatesAutoresizingMaskIntoConstraints)
  {
    BOOL v3 = translatesAutoresizingMaskIntoConstraints;
    if (!translatesAutoresizingMaskIntoConstraints
      && ![(UIView *)self _hostsLayoutEngineAllowsTAMIC_NO])
    {
      [(UIView *)self _setHostsLayoutEngine:0];
    }
    if (qword_1EB25A5C8 != -1) {
      dispatch_once(&qword_1EB25A5C8, &__block_literal_global_44_1);
    }
    if (byte_1EB25A5A9 && (*(void *)&self->_viewFlags & 0x400000000000000) != 0)
    {
      int v5 = [(UIView *)self _internalConstraints];
      double v6 = objc_msgSend((id)-[NSMutableArray lastObject](v5, "lastObject"), "container");
      if (v6)
      {
        uint64_t v7 = v6;
        long long v8 = (void *)[v6 _referenceView];
        uint64_t v14 = MEMORY[0x1E4F143A8];
        uint64_t v15 = 3221225472;
        double v16 = __80__UIView_AdditionalLayoutSupport__setTranslatesAutoresizingMaskIntoConstraints___block_invoke;
        double v17 = &unk_1E52EBA80;
        double v18 = v5;
        BOOL v19 = v7;
        if (v8)
        {
          double v9 = objc_msgSend(v8, "_layoutEngine", v14, v15);
          if (v9) {
            [v9 withAutomaticOptimizationDisabled:&v14];
          }
          else {
            v16((uint64_t)&v14);
          }
        }
      }
      if (v3) {
        -[UIView _setContentSizeConstraints:](self, 0);
      }
      else {
        -[UIView _setAutoresizingConstraints:](self, 0);
      }
      [(UIView *)self _setNeedsUpdateConstraints];
    }
    if (v3)
    {
      [(UIView *)self _stopObservingVariablesOnlyToSupportTAMICChange:1];
      [(UIView *)self _clearLayoutVariableObservationsOnlyToSupportTAMICChange:1];
      uint64_t v10 = -1;
      unint64_t v11 = 0xFFDFFFFFFFFFFFFFLL;
    }
    else
    {
      *(void *)&self->_viewFlags |= 0x20000000000000uLL;
      [(UIView *)self _startObservingVariablesOnlyToSupportTAMICChange:1];
      uint64_t v10 = -513;
      unint64_t v11 = -1;
    }
    int v12 = *((_DWORD *)&self->_viewFlags + 4);
    uint64_t v13 = *((void *)&self->_viewFlags + 1) & v10;
    *(void *)&self->_viewFlags &= v11;
    *((void *)&self->_viewFlags + 1) = v13;
    *((_DWORD *)&self->_viewFlags + 4) = v12;
  }
}

- (BOOL)_hostsLayoutEngineAllowsTAMIC_NO
{
  int CanHostLayoutEngine = _UINonTAMICViewCanHostLayoutEngine();
  if (CanHostLayoutEngine)
  {
    if (-[UIView __viewDelegate]((id *)&self->super.super.isa))
    {
      id v4 = -[UIView __viewDelegate]((id *)&self->super.super.isa);
      LOBYTE(CanHostLayoutEngine) = objc_msgSend(v4, "_viewHostsLayoutEngineAllowsTAMIC_NO");
    }
    else
    {
      LOBYTE(CanHostLayoutEngine) = 1;
    }
  }
  return CanHostLayoutEngine;
}

- (void)_setHostsLayoutEngine:(BOOL)a3
{
  if (((((*(void *)&self->_viewFlags & 0x80000000000) == 0) ^ a3) & 1) == 0)
  {
    if (a3)
    {
      if (![(UIView *)self _hostsLayoutEngineAllowsTAMIC_NO]
        && ![(UIView *)self translatesAutoresizingMaskIntoConstraints])
      {
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler"), "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"NSLayoutConstraint_UIKitAdditions.m", 4027, @"Must translate autoresizing mask into constraints to have _setHostsLayoutEngine:YES.");
      }
      *(void *)&self->_viewFlags |= 0x80000000000uLL;
      if ([(UIView *)self _layoutEngine]) {
        [(UIView *)self _initializeHostedLayoutEngine];
      }
    }
    else
    {
      [(UIView *)self _invalidateLayoutEngineHostConstraints];
      if (![(UIView *)self translatesAutoresizingMaskIntoConstraints]) {
        [(UIView *)self _invalidateIntrinsicContentSizeNeedingLayout:0];
      }
      [(UIView *)self _discardLayoutEngine:[(UIView *)self _layoutEngine]];
      p_uint64_t viewFlags = &self->_viewFlags;
      uint64_t viewFlags = (uint64_t)self->_viewFlags;
      if ((viewFlags & 0x800000000000000) != 0)
      {
        [(UIView *)self _setWantsAutolayout];
        uint64_t viewFlags = *(void *)p_viewFlags;
      }
      uint64_t v7 = *((void *)&self->_viewFlags + 1);
      int v8 = *((_DWORD *)&self->_viewFlags + 4);
      *(void *)p_uint64_t viewFlags = viewFlags & 0xFFFFF7FFFFFFFFFFLL;
      *((void *)&self->_viewFlags + 1) = v7;
      *((_DWORD *)&self->_viewFlags + 4) = v8;
      [(UIView *)self _switchToLayoutEngine:[[(UIView *)self superview] _layoutEngine]];
    }
    [(UIView *)self _setNeedsUpdateConstraints];
  }
}

- (void)_clearLayoutVariableObservationsOnlyToSupportTAMICChange:(BOOL)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [(UIView *)self _uili_removeLayoutVariableObservationsOnlyToSupportTAMICChange:"_uili_removeLayoutVariableObservationsOnlyToSupportTAMICChange:"];
  if (!a3)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    int v5 = [(UIView *)self _mutableLayoutGuides];
    uint64_t v6 = [(NSMutableArray *)v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v11;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(v5);
          }
          objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * v9++), "_uili_removeLayoutVariableObservationsOnlyToSupportTAMICChange:", 0);
        }
        while (v7 != v9);
        uint64_t v7 = [(NSMutableArray *)v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v7);
    }
  }
}

- (void)_uili_removeLayoutVariableObservationsOnlyToSupportTAMICChange:(BOOL)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v4 = [(UIView *)self _uili_existingBaseFrameVariables];
    uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v11;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v4);
          }
          [(NSMapTable *)[(UIView *)self _stashedLayoutVariableObservations] removeObjectForKey:*(void *)(*((void *)&v10 + 1) + 8 * v8++)];
        }
        while (v6 != v8);
        uint64_t v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v6);
    }
  }
  else
  {
    uint64_t v9 = [(UIView *)self _stashedLayoutVariableObservations];
    [(NSMapTable *)v9 removeAllObjects];
  }
}

- (NSMapTable)_stashedLayoutVariableObservations
{
  return self->_stashedLayoutVariableObservations;
}

- (void)_invalidateLayoutEngineHostConstraints
{
  if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    id v3 = [(UIView *)self _layoutEngineHostConstraints];
    if (v3)
    {
      [(UIView *)self removeConstraints:v3];
      -[UIView _setLayoutEngineHostConstraints:](self, 0);
      [(UIView *)self setNeedsUpdateConstraints];
    }
  }
}

- (void)_decrementHiddenManagedByLayoutArrangementCount
{
  p_uint64_t viewFlags = &self->_viewFlags;
  if (-[UIView _bitFlagValueAfterIncrementingHiddenManagementCountForKey:withIncrement:bitFlagValue:](self, "_UIViewHiddenManagementCount", -1, (*((_DWORD *)&self->_viewFlags + 4) >> 14) & 1))int v3 = 0x4000; {
  else
  }
    int v3 = 0;
  *((_DWORD *)p_viewFlags + 4) = *((_DWORD *)p_viewFlags + 4) & 0xFFFFBFFF | v3;
}

- (void)setSemanticContentAttribute:(UISemanticContentAttribute)semanticContentAttribute
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = semanticContentAttribute & 7;
  if ((unint64_t)semanticContentAttribute >= 8)
  {
    if (os_variant_has_internal_diagnostics())
    {
      uint64_t v9 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        int v10 = 134217984;
        UISemanticContentAttribute v11 = semanticContentAttribute;
        _os_log_fault_impl(&dword_1853B0000, v9, OS_LOG_TYPE_FAULT, "Attempted to set invalid UISemanticContentAttribute value, or value is too large to fit in _viewFlags.semanticContentAttribute: %ld", (uint8_t *)&v10, 0xCu);
      }
    }
    else
    {
      uint64_t v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C1D0) + 8);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v10 = 134217984;
        UISemanticContentAttribute v11 = semanticContentAttribute;
        _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "Attempted to set invalid UISemanticContentAttribute value, or value is too large to fit in _viewFlags.semanticContentAttribute: %ld", (uint8_t *)&v10, 0xCu);
      }
    }
  }
  unint64_t v5 = *(void *)((char *)&self->_viewFlags + 20);
  if (((v5 >> 14) & 7) != v4)
  {
    *(void *)((char *)&self->_viewFlags + 20) = v5 & 0xFFFFFFFFFFFE3FFFLL | ((unint64_t)(v4 & 7) << 14);
    unint64_t v6 = ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 19) & 1;
    *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFF7FFFF | (([(UIView *)self effectiveUserInterfaceLayoutDirection] == UIUserInterfaceLayoutDirectionRightToLeft) << 19);
    -[UIView _updateDirectionalConstraintsIfNeededWasFlipped:]((uint64_t)self, v6);
    if (qword_1EB25C1C8 != -1) {
      dispatch_once(&qword_1EB25C1C8, &__block_literal_global_1270_1);
    }
    if (!byte_1EB25C0AE) {
      _UIViewInvalidateTraitCollectionAndSchedulePropagation((uint64_t)self, 1);
    }
  }
}

- (void)_updateDirectionalConstraintsIfNeededWasFlipped:(uint64_t)a1
{
  if (a1)
  {
    int v4 = *(_DWORD *)(a1 + 112);
    int v5 = v4 & 0x80000;
    if ((v4 & 0x400) != 0 && ((((*(void *)&v4 & 0x80000) == 0) ^ a2) & 1) == 0)
    {
      uint64_t v6 = *(void *)(a1 + 320);
      *(void *)(a1 + 320) = *(void *)(a1 + 336);
      *(void *)(a1 + 336) = v6;
      [(id)a1 _updateInferredLayoutMargins];
      [(id)a1 _updateLayoutMarginsGuideConstraintsIfNecessary];
      int v5 = *(_DWORD *)(a1 + 112) & 0x80000;
    }
    if ((((v5 == 0) ^ a2) & 1) == 0)
    {
      uint64_t v7 = [(id)a1 _allSubviews];
      uint64_t v8 = [v7 count];

      if (v8)
      {
        uint64_t v9 = [(id)a1 _layoutEngine];
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 3221225472;
        v11[2] = __58__UIView__updateDirectionalConstraintsIfNeededWasFlipped___block_invoke_2;
        v11[3] = &unk_1E530FDE0;
        id v10 = v9;
        id v12 = v10;
        uint64_t v13 = a1;
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 3221225472;
        v14[2] = ___UIViewEnumerateLayoutConstraintsAndAdjustForSelectedLayoutVariables_block_invoke;
        v14[3] = &unk_1E530E670;
        v14[4] = a1;
        void v14[5] = &__block_literal_global_1286;
        v14[6] = v11;
        [(id)a1 _withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:v14];
        if ((*(void *)(a1 + 96) & 0x800000000000000) == 0) {
          [(id)a1 setNeedsLayout];
        }
      }
    }
  }
}

- (BOOL)_isHasBaselinePropertyChangeable
{
  return 0;
}

- (void)_ensureViewsAreInstalledInRelativeOrder:(id *)a3 viewCount:(int64_t)a4 insertionStartIndex:(int64_t)a5
{
  if (a4 >= 1)
  {
    int64_t v6 = a4;
    char v9 = 0;
    do
    {
      id v10 = *a3;
      if (*a3)
      {
        UISemanticContentAttribute v11 = -[UIView _backing_outermostLayer](*a3);
        id v12 = [v11 superlayer];
        layer = self->_layer;

        if (v12 == layer)
        {
          [(CALayer *)self->_layer insertSublayer:v11 atIndex:a5];
          char v9 = 1;
        }
        else
        {
          [(UIView *)self insertSubview:v10 atIndex:a5];
        }
        ++a5;
      }
      ++a3;
      --v6;
    }
    while (v6);
    if (v9)
    {
      [(UIView *)self _invalidateSubviewCache];
    }
  }
}

- (uint64_t)_hasDeferredAnimationForKey:(uint64_t)a1
{
  id v3 = a2;
  if (a1)
  {
    if (__animate) {
      BOOL v4 = __currentViewAnimationState == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4) {
      a1 = 0;
    }
    else {
      a1 = [(id)__currentViewAnimationState _hasDeferredAnimationForView:a1 key:v3];
    }
  }

  return a1;
}

- (id)_deferredAnimationForKey:(id)a3 ignoringKeyFrames:(BOOL)a4
{
  if (__animate) {
    BOOL v4 = __currentViewAnimationState == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = [(id)__currentViewAnimationState _deferredAnimationForView:self key:a3 ignoringKeyFrames:a4];
  }
  return v5;
}

- (id)_deferredAnimationForKey:(id)a3
{
  return [(UIView *)self _deferredAnimationForKey:a3 ignoringKeyFrames:0];
}

- (void)_setDrawsAsBackdropOverlayWithBlendMode:(int64_t)a3
{
  *((void *)&self->_viewFlags + 1) = *((void *)&self->_viewFlags + 1) & 0xFFFFFFF9FFFFFFFFLL | ((unint64_t)(a3 & 3) << 33);
  switch(a3)
  {
    case 0:
      uint64_t v4 = *MEMORY[0x1E4F3A2B8];
      id v9 = [(UIView *)self layer];
      [v9 setCompositingFilter:v4];
      goto LABEL_10;
    case 1:
      int v5 = (uint64_t *)MEMORY[0x1E4F3A2E0];
      goto LABEL_9;
    case 2:
      int v5 = (uint64_t *)MEMORY[0x1E4F3A2E8];
      goto LABEL_9;
    case 3:
      goto LABEL_5;
    default:
      if (a3 == 100)
      {
        int v5 = (uint64_t *)MEMORY[0x1E4F3A008];
      }
      else
      {
        if (a3 != 101) {
          return;
        }
LABEL_5:
        int v5 = (uint64_t *)MEMORY[0x1E4F3A018];
      }
LABEL_9:
      uint64_t v6 = *v5;
      uint64_t v7 = [(UIView *)self layer];
      [v7 setCompositingFilter:v6];

      id v9 = [(UIView *)self superview];
      uint64_t v8 = [v9 layer];
      [v8 setAllowsGroupBlending:0];

LABEL_10:

      return;
  }
}

- (BOOL)nsli_isRTL
{
  return [(UIView *)self effectiveUserInterfaceLayoutDirection] == UIUserInterfaceLayoutDirectionRightToLeft;
}

- (int64_t)_currentUserInterfaceIdiom
{
  id v3 = [(UIView *)self window];
  if (!v3)
  {
    uint64_t v4 = [(UIView *)self _viewControllerForAncestor];
    id v3 = [v4 _window];
  }
  int v5 = [v3 screen];
  int64_t v6 = [v5 _userInterfaceIdiom];

  return v6;
}

- (BOOL)needsUpdateConstraints
{
  return (*(void *)&self->_viewFlags & 0x100000000000) == 0;
}

- (double)_widthForButtonBarItemLayout
{
  -[UIView systemLayoutSizeFittingSize:](self, "systemLayoutSizeFittingSize:", 0.0, 0.0);
  return result;
}

- (_UIFocusSystemSceneComponent)_focusSystemSceneComponent
{
  return (_UIFocusSystemSceneComponent *)+[_UIFocusSystemSceneComponent sceneComponentForEnvironment:self];
}

- (void)setValue:(id)a3 forKey:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ([v7 isEqualToString:@"contentsGravity"])
  {
    if ((setValue_forKey____warnOnce & 1) == 0)
    {
      NSLog(&cfstr_WarningDoNotCa.isa);
      setValue_forKey____warnOnce = 1;
    }
    [(CALayer *)self->_layer setValue:v6 forKey:v7];
  }
  else
  {
    v8.receiver = self;
    v8.super_class = (Class)UIView;
    [(UIView *)&v8 setValue:v6 forKey:v7];
  }
}

- (void)_backing_addPrivateSubview:(uint64_t)a3 positioned:(uint64_t)a4 relativeTo:
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v8 = (id)[a2 superview];
    uint64_t v9 = [a2 layer];
    -[UIView _backing_wrapLayerInIntermediate](a1);
    id v10 = *(void **)(a1 + 168);
    if (v10) {
      id v10 = (void *)v10[1];
    }
    UISemanticContentAttribute v11 = v10;
    id v12 = v11;
    id v24 = v8;
    double v25 = (void *)v9;
    switch(a3)
    {
      case -3:
        [v11 insertSublayer:v9 below:a4];
        break;
      case -2:
        [v11 insertSublayer:v9 above:a4];
        break;
      case -1:
        [v11 addSublayer:v9];
        break;
      default:
        [v11 insertSublayer:v9 atIndex:a3];
        break;
    }
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v13 = +[UIView _defaultKeyPathsToSyncWithPrivateSubviews]();
    uint64_t v14 = [v13 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v30;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v30 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void *)(*((void *)&v29 + 1) + 8 * i);
          BOOL v19 = objc_msgSend(*(id *)(a1 + 160), "valueForKeyPath:", v18, v24);
          objc_msgSend(a2, "_privateSubview_setValue:forObservedLayerKeyPath:", v19, v18);
        }
        uint64_t v15 = [v13 countByEnumeratingWithState:&v29 objects:v33 count:16];
      }
      while (v15);
    }

    a2[12] |= 0x8000000uLL;
    *(void *)((char *)a2 + 116) |= 0x1000000000uLL;
    uint64_t v20 = *(void *)(a1 + 168);
    if (v20) {
      double v21 = *(void **)(v20 + 24);
    }
    else {
      double v21 = 0;
    }
    double v22 = v24;
    objc_msgSend(v21, "addObject:", a2, v24);
    -[UIContentUnavailableImageProperties _setTintColor:](*(void *)(a1 + 168), 0);
    if (v22 != (void *)a1) {
      -[UIView _postMovedFromSuperview:](a2, v22);
    }
    [a2 _updateCombinedInsetsIfNecessary];
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    void v26[2] = __75__UIView__UIViewBacking___backing_addPrivateSubview_positioned_relativeTo___block_invoke;
    v26[3] = &unk_1E52D9F98;
    id v23 = v12;
    id v27 = v23;
    double v28 = a2;
    +[UIView performWithoutAnimation:v26];
    if ([v23 needsLayout]) {
      [*(id *)(a1 + 160) setNeedsLayout];
    }
  }
}

- (BOOL)_shouldAnimatePropertyAdditivelyWithKey:(id)a3
{
  id v4 = a3;
  int v5 = [(UIView *)self layer];
  char isAdditivelyAnimatableKeyForLayer = _isAdditivelyAnimatableKeyForLayer(v4, v5);

  return isAdditivelyAnimatableKeyForLayer;
}

- (id)_basicAnimationWithKeyPath:(id)a3
{
  return (id)[(id)__currentViewAnimationState _defaultAnimationForKey:a3];
}

- (void)_privateSubview_setValue:(id)a3 forObservedLayerKeyPath:(id)a4
{
}

+ (id)_defaultKeyPathsToSyncWithPrivateSubviews
{
  self;
  if (qword_1EB260C48 != -1) {
    dispatch_once(&qword_1EB260C48, &__block_literal_global_267);
  }
  v0 = (void *)_MergedGlobals_1079;
  return v0;
}

- (id)_internalAppIntentsIntelligenceProvider
{
  if ((*((unsigned char *)&self->_viewFlags + 21) & 2) != 0)
  {
    id v2 = objc_getAssociatedObject(self, &_UIViewAppIntentsIntelligenceProviderKey);
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

- (void)setLayoutMargins:(UIEdgeInsets)layoutMargins
{
  *((_DWORD *)&self->_viewFlags + 4) &= ~0x400u;
  -[UIView _setRawLayoutMargins:](self, "_setRawLayoutMargins:", layoutMargins.top, layoutMargins.left, layoutMargins.bottom, layoutMargins.right);
}

- (void)_setRawLayoutMargins:(UIEdgeInsets)a3
{
  p_rawLayoutMargins = &self->_rawLayoutMargins;
  if (a3.left != self->_rawLayoutMargins.left
    || a3.top != self->_rawLayoutMargins.top
    || a3.right != self->_rawLayoutMargins.right
    || a3.bottom != self->_rawLayoutMargins.bottom)
  {
    p_rawLayoutMargins->double top = a3.top;
    self->_rawLayoutMargins.double left = a3.left;
    self->_rawLayoutMargins.double bottom = a3.bottom;
    self->_rawLayoutMargins.double right = a3.right;
    id v8 = +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger];
    objc_msgSend(v8, "didUpdateLayoutMargins:ofView:", self, p_rawLayoutMargins->top, p_rawLayoutMargins->left, p_rawLayoutMargins->bottom, p_rawLayoutMargins->right);

    [(UIView *)self _updateInferredLayoutMargins];
  }
}

- (void)setDirectionalLayoutMargins:(NSDirectionalEdgeInsets)directionalLayoutMargins
{
  int v3 = *((_DWORD *)&self->_viewFlags + 4);
  *((_DWORD *)&self->_viewFlags + 4) = v3 | 0x400;
  if ((*(void *)&v3 & 0x80000) != 0) {
    double trailing = directionalLayoutMargins.trailing;
  }
  else {
    double trailing = directionalLayoutMargins.leading;
  }
  if ((*(void *)&v3 & 0x80000) != 0) {
    directionalLayoutMargins.double trailing = directionalLayoutMargins.leading;
  }
  -[UIView _setRawLayoutMargins:](self, "_setRawLayoutMargins:", directionalLayoutMargins.top, trailing, directionalLayoutMargins.bottom, directionalLayoutMargins.trailing);
}

- (BOOL)insetsLayoutMarginsFromSafeArea
{
  return [(UIView *)self edgesInsettingLayoutMarginsFromSafeArea] != 0;
}

- (unint64_t)edgesInsettingLayoutMarginsFromSafeArea
{
  *((void *)&v2 + 1) = *((unsigned int *)&self->_viewFlags + 4);
  *(void *)&long long v2 = *((void *)&self->_viewFlags + 1);
  return (v2 >> 57) & 0xF;
}

- (void)_setSpringLoaded:(void *)a3 interactionInitializer:
{
  id v8 = a3;
  if (a1)
  {
    id v5 = a1;
    id v6 = v5;
    if (a2)
    {
      if (([v5 isSpringLoaded] & 1) == 0)
      {
        id v7 = v8[2]();
        [v6 addInteraction:v7];
      }
    }
    else
    {
      -[UIView _removeSpringLoadedInteractions](v5);
    }
  }
}

- (void)_removeSpringLoadedInteractions
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    long long v2 = [a1 interactions];
    int v3 = [MEMORY[0x1E4F28F60] predicateWithBlock:&__block_literal_global_1295_2];
    id v4 = [v2 filteredArrayUsingPredicate:v3];

    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v5 = v4;
    uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v11;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(v5);
          }
          objc_msgSend(a1, "removeInteraction:", *(void *)(*((void *)&v10 + 1) + 8 * v9++), (void)v10);
        }
        while (v7 != v9);
        uint64_t v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v7);
    }
  }
}

- (void)_hasSpringLoadedInteractions
{
  if (result)
  {
    uint64_t v1 = [result interactions];
    uint64_t v2 = [v1 indexOfObjectPassingTest:&__block_literal_global_1299_0];

    return (void *)(v2 != 0x7FFFFFFFFFFFFFFFLL);
  }
  return result;
}

- (double)_contentMargin
{
  if (dyld_program_sdk_at_least())
  {
    int v3 = [(UIView *)self _viewControllerForAncestor];
    id v4 = v3;
    if (!v3)
    {
      double v6 = 0.0;
      goto LABEL_7;
    }
    [v3 _contentMarginForView:self];
  }
  else
  {
    id v4 = [(UIView *)self traitCollection];
    +[UIViewController _slimHorizontalContentMarginForTraitCollection:v4];
  }
  double v6 = v5;
LABEL_7:

  return v6;
}

- (void)_observeScrollViewDidScroll:(id)a3
{
  if (self && (*((void *)&self->_viewFlags + 1) & 0x1000000) != 0 && ![(UIView *)self isHidden])
  {
    -[UIView _anyBackdropMaskView](self);
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    [(UIView *)self bounds];
    double v5 = v4;
    double v7 = v6;
    double v9 = v8;
    double v11 = v10;
    long long v12 = [v21 superview];
    -[UIView convertRect:toView:](self, "convertRect:toView:", v12, v5, v7, v9, v11);
    double v14 = v13;
    double v16 = v15;
    double v18 = v17;
    double v20 = v19;

    -[UIView _setFrameForBackdropMaskViews:convertFrame:](self, 0, v14, v16, v18, v20);
  }
}

- (void)insertSubview:(UIView *)view aboveSubview:(UIView *)siblingSubview
{
}

- (BOOL)_associatedViewControllerForwardsAppearanceCallbacks:(id)a3 performHierarchyCheck:(BOOL)a4 isRoot:(BOOL)a5
{
  BOOL v6 = a4;
  id v8 = a3;
  uint64_t v9 = [(UIView *)self _viewControllerForAncestor];
  double v10 = [v8 parentViewController];
  unsigned int v11 = objc_msgSend(v10, sel_allowsWeakReference);

  if (v11)
  {
    uint64_t v12 = [v8 parentViewController];
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (!(v9 | v12))
  {
    double v13 = [(UIView *)self _window];
    double v14 = [v13 _rootPresentationController];
    id v15 = [v14 presentedViewController];
    LOBYTE(v16) = v15 == v8;

LABEL_21:
    goto LABEL_22;
  }
  if (([(id)v9 _forwardAppearanceMethods] & 1) != 0
    || [(id)v12 _forwardAppearanceMethods])
  {
    if (v6 && v12 && v9 != v12)
    {
      [MEMORY[0x1E4F1CA00] raise:@"UIViewControllerHierarchyInconsistency", @"child view controller:%@ should have parent view controller:%@ but actual parent is:%@", v8, v9, v12 format];
    }
    else if (!v12)
    {
      LOBYTE(v16) = 0;
      goto LABEL_22;
    }
    if (v9) {
      double v17 = (void *)v9;
    }
    else {
      double v17 = (void *)v12;
    }
    id v18 = v17;
    double v13 = v18;
    if (!a5
      && ([v18 _appearState] == 1 || objc_msgSend(v13, "_appearState") == 3))
    {
      LOBYTE(v16) = 1;
    }
    else
    {
      int v16 = [v13 _forwardAppearanceMethods] ^ 1;
    }
    goto LABEL_21;
  }
  if (v12) {
    LOBYTE(v16) = 1;
  }
  else {
    LOBYTE(v16) = [v8 _forwardAppearanceMethods];
  }
LABEL_22:

  return v16;
}

- (BOOL)_shouldEnclosedScrollViewFlashIndicators:(id)a3
{
  return 1;
}

+ (void)animateWithDuration:(NSTimeInterval)duration animations:(void *)animations
{
}

uint64_t __41__UIView__removeSpringLoadedInteractions__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

- (void)_autoresizingConstraints_frameDidChange
{
  if ((*((void *)&self->_viewFlags + 1) & 0x4000) == 0)
  {
    int v3 = (void *)[(NSISEngine *)[(UIView *)self _layoutEngine] delegate];
    if (((dyld_program_sdk_at_least() & 1) != 0
       || v3 && [v3 _forceLayoutEngineSolutionInRationalEdges])
      && (*(void *)&self->_viewFlags & 0x800000000000000) != 0
      && [(CALayer *)[(UIView *)self layer] needsLayoutOnGeometryChange])
    {
      [(UIView *)self setNeedsLayout];
    }
    double v4 = -[UIView _effectiveAutoresizingMask](self);
    if (v4)
    {
      double v5 = v4;
      uint64_t v16 = 0;
      double v17 = &v16;
      uint64_t v18 = 0x2020000000;
      BOOL v19 = 0;
      int v6 = dyld_program_sdk_at_least();
      BOOL v7 = 0;
      if (v6) {
        BOOL v7 = v5 != (void *)self->__autoresizingMaskForPreviousAutoresizingLayoutConstraints;
      }
      BOOL v19 = v7;
      if (!*((unsigned char *)v17 + 24)
        && (*(void *)&self->_viewFlags & 0x4000000000000000) != 0
        && ![(UIView *)self _isManuallyResizedBySuperview])
      {
        goto LABEL_29;
      }
      id v8 = [(UIView *)self superview];
      uint64_t v9 = v8;
      if (v8)
      {
        uint64_t v10 = *((void *)&v8->_viewFlags + 1);
        unsigned int v11 = (v10 >> 1) & 1;
        *((void *)&v8->_viewFlags + 1) = v10 | 2;
      }
      else
      {
        LOBYTE(v11) = 0;
      }
      uint64_t v12 = -[UIView _autoresizingConstraints](self);
      if (v12 && [(UIView *)self _layoutEngine])
      {
        double v13 = v17 + 3;
        if (!*((unsigned char *)v17 + 24)
          && (v5 & 7 & ((v5 & 7) - 1)) == 0
          && (v5 & 0x38 & ((v5 & 0x38) - 1)) == 0)
        {
          v15[0] = MEMORY[0x1E4F143A8];
          v15[1] = 3221225472;
          v15[2] = __74__UIView_UIConstraintBasedLayout___autoresizingConstraints_frameDidChange__block_invoke;
          v15[3] = &unk_1E52F2A98;
          void v15[4] = self;
          void v15[5] = v12;
          v15[6] = &v16;
          [(UIView *)self _withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:v15];
          if (!*((unsigned char *)v17 + 24))
          {
LABEL_27:
            if (v9) {
              *((void *)&v9->_viewFlags + 1) = *((void *)&v9->_viewFlags + 1) & 0xFFFFFFFFFFFFFFFDLL | (2 * (v11 & 1));
            }
LABEL_29:
            _Block_object_dispose(&v16, 8);
            return;
          }
LABEL_26:
          -[UIView _invalidateAutoresizingConstraints]((uint64_t)self);
          goto LABEL_27;
        }
      }
      else
      {
        double v14 = v17;
        *((unsigned char *)v17 + 24) = 1;
        double v13 = v14 + 3;
      }
      *double v13 = 1;
      goto LABEL_26;
    }
  }
}

- (BOOL)_subviewPreventsSkipLayout:(id)a3
{
  return [a3 translatesAutoresizingMaskIntoConstraints];
}

- (int64_t)_keyboardOrientation
{
  id v2 = [(UIView *)self _window];
  int v3 = [v2 rootViewController];

  if [v3 shouldAutorotate] && (objc_opt_respondsToSelector()) {
    uint64_t v4 = [v3 keyboardOrientation];
  }
  else {
    uint64_t v4 = +[UIKeyboardSceneDelegate interfaceOrientation];
  }
  int64_t v5 = v4;

  return v5;
}

+ (void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void *)animations completion:(void *)completion
{
}

+ (void)_animateWithDuration:(double)a3 delay:(double)a4 options:(unint64_t)a5 factory:(id)a6 animations:(id)a7 completion:(id)a8
{
}

- (UIUserInterfaceStyle)overrideUserInterfaceStyle
{
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x100) == 0) {
    return 0;
  }
  int v3 = objc_getAssociatedObject(self, &_UIViewTraitOverridesKey);
  if ([v3 _containsTraitToken:0x1ED3F5A48]) {
    UIUserInterfaceStyle v2 = [v3 userInterfaceStyle];
  }
  else {
    UIUserInterfaceStyle v2 = UIUserInterfaceStyleUnspecified;
  }

  return v2;
}

+ (id)_currentViewAnimationState
{
  return (id)__currentViewAnimationState;
}

+ (void)_performWithState:(id)a3 trackingIdentifier:(id)a4 duration:(double)a5 delay:(double)a6 animations:(id)a7
{
  id v24 = a3;
  id v12 = a4;
  id v13 = (id)__currentViewAnimationState;
  id v14 = (id)qword_1EB25C0E0;
  char v15 = byte_1EB25C09A;
  objc_storeStrong((id *)&qword_1EB25C0E0, a4);
  uint64_t v16 = (void (**)(void))a7;
  [v24 _prepareForViewAnimationAfterPush];
  objc_storeStrong((id *)&__currentViewAnimationState, a3);
  uint64_t v17 = *((void *)v24 + 5);
  if (a5 >= 0.0) {
    *((double *)v24 + 5) = a5;
  }
  uint64_t v18 = *((void *)v24 + 6);
  if (a6 >= 0.0) {
    *((double *)v24 + 6) = a6;
  }
  v16[2](v16);

  [v24 pop];
  BOOL v19 = v24;
  if (!*((_DWORD *)v24 + 42) && (*((unsigned char *)v24 + 173) & 1) == 0)
  {
    [v24 sendDelegateAnimationDidStop:0 finished:1];
    BOOL v19 = v24;
  }
  if (a5 != 0.0) {
    v19[5] = v17;
  }
  if (a6 != 0.0) {
    v19[6] = v18;
  }
  double v20 = (void *)qword_1EB25C0E0;
  qword_1EB25C0E0 = (uint64_t)v14;
  id v21 = v14;

  double v22 = (void *)__currentViewAnimationState;
  __currentViewAnimationState = (uint64_t)v13;
  id v23 = v13;

  byte_1EB25C09A = v15;
}

- (id)_contentSizeCategoryLimitedTraitCollection:(void *)a1
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      int64_t v5 = [v3 preferredContentSizeCategory];
      int v6 = -[UIView _limitedContentSizeCategoryWithBaseValue:](a1, v5);
      if (v6 != v5)
      {
        uint64_t v7 = [v4 _traitCollectionByReplacingObject:v6 forTraitToken:0x1ED3F5AD8];

        id v4 = (id)v7;
      }
    }
    id v4 = v4;
    id v8 = v4;
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

- (void)setMinimumContentSizeCategory:(UIContentSizeCategory)minimumContentSizeCategory
{
  id v4 = minimumContentSizeCategory;
  if ([(NSString *)v4 length])
  {
    BOOL v5 = [(NSString *)v4 isEqualToString:@"_UICTContentSizeCategoryUnspecified"];

    if (!v5) {
      goto LABEL_6;
    }
  }
  else
  {
  }
  id v4 = 0;
LABEL_6:
  int v6 = [(UIView *)self _maximumContentSizeCategory];
  uint64_t v7 = v6;
  if (v4 && v6 && UIContentSizeCategoryCompareToCategory(v6, v4) == NSOrderedAscending)
  {
    id v8 = v7;

    id v4 = v8;
  }
  uint64_t v9 = [(UIView *)self _minimumContentSizeCategory];
  id value = v4;
  id v10 = v9;
  if (value == v10)
  {

    goto LABEL_18;
  }
  unsigned int v11 = v10;
  if (!value || !v10)
  {

    goto LABEL_17;
  }
  char v12 = [value isEqual:v10];

  if ((v12 & 1) == 0)
  {
LABEL_17:
    objc_setAssociatedObject(self, &_MergedGlobals_955, value, (void *)3);
    *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFF7FFFFFFFFFLL | ((unint64_t)(((unint64_t)value | (unint64_t)v7) != 0) << 39);
    [(UIView *)self _contentSizeCategoryLimitsDidChange];
  }
LABEL_18:
}

- (void)setMaximumContentSizeCategory:(UIContentSizeCategory)maximumContentSizeCategory
{
  unint64_t v4 = maximumContentSizeCategory;
  if ([(id)v4 length])
  {
    BOOL v5 = [(id)v4 isEqualToString:@"_UICTContentSizeCategoryUnspecified"];

    if (!v5) {
      goto LABEL_6;
    }
  }
  else
  {
  }
  unint64_t v4 = 0;
LABEL_6:
  int v6 = [(UIView *)self _minimumContentSizeCategory];
  uint64_t v7 = v6;
  if (v4 && v6 && UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)v4, v6) == NSOrderedAscending)
  {
    id v8 = (NSString *)(id)v4;

    uint64_t v7 = v8;
  }
  uint64_t v9 = [(UIView *)self _minimumContentSizeCategory];
  unint64_t v10 = v7;
  id v11 = v9;
  if ((id)v10 == v11)
  {

    goto LABEL_16;
  }
  char v12 = v11;
  if (v10 && v11)
  {
    char v13 = [(id)v10 isEqual:v11];

    if ((v13 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_16:
    int v14 = 0;
    goto LABEL_19;
  }

LABEL_18:
  objc_setAssociatedObject(self, &_MergedGlobals_955, (id)v10, (void *)3);
  int v14 = 1;
LABEL_19:
  char v15 = [(UIView *)self _maximumContentSizeCategory];
  id value = (NSString *)(id)v4;
  uint64_t v16 = v15;
  if (value == v16)
  {
  }
  else
  {
    if (!v4 || !v16)
    {

      uint64_t v18 = value;
LABEL_28:
      objc_setAssociatedObject(self, &unk_1EB25F0F8, v18, (void *)3);
      goto LABEL_29;
    }
    char v17 = [(NSString *)value isEqual:v16];

    uint64_t v18 = value;
    if ((v17 & 1) == 0) {
      goto LABEL_28;
    }
  }
  if (v14)
  {
LABEL_29:
    *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFF7FFFFFFFFFLL | ((unint64_t)((v4 | v10) != 0) << 39);
    [(UIView *)self _contentSizeCategoryLimitsDidChange];
  }
}

- (UIContentSizeCategory)minimumContentSizeCategory
{
  if ((*(void *)&self->_viewFlags & 0x8000000000) != 0)
  {
    UIUserInterfaceStyle v2 = objc_getAssociatedObject(self, &_MergedGlobals_955);
  }
  else
  {
    UIUserInterfaceStyle v2 = 0;
  }
  return (UIContentSizeCategory)v2;
}

- (id)_limitedContentSizeCategoryWithBaseValue:(void *)a1
{
  id v3 = a2;
  unint64_t v4 = v3;
  if (a1)
  {
    id v5 = v3;
    int v6 = [a1 _minimumContentSizeCategory];
    uint64_t v7 = [a1 _maximumContentSizeCategory];
    if (v6
      && UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)v6, (UIContentSizeCategory)v5) == NSOrderedDescending)
    {
      id v8 = v6;

      id v5 = v8;
    }
    if (v7
      && UIContentSizeCategoryCompareToCategory((UIContentSizeCategory)v7, (UIContentSizeCategory)v5) == NSOrderedAscending)
    {
      id v9 = v7;

      id v5 = v9;
    }
    id v10 = v5;
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

- (UIContentSizeCategory)maximumContentSizeCategory
{
  if ((*(void *)&self->_viewFlags & 0x8000000000) != 0)
  {
    UIUserInterfaceStyle v2 = objc_getAssociatedObject(self, &unk_1EB25F0F8);
  }
  else
  {
    UIUserInterfaceStyle v2 = 0;
  }
  return (UIContentSizeCategory)v2;
}

+ (void)__swift_createTransformerWithInputAnimatableProperties:(id)a3 modelValueSetter:(id)a4 presentationValueSetter:(id)a5
{
  int v6 = _Block_copy(a4);
  uint64_t v7 = _Block_copy(a5);
  sub_1853B985C(0, (unint64_t *)&qword_1EB255C28);
  unint64_t v8 = sub_186A1EB3C();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v6;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v7;
  id v11 = objc_allocWithZone((Class)_s29AnimatablePropertyTransformerCMa());
  id v12 = sub_18557CC50(v8, 0, (uint64_t)sub_18557A3E4, v9, (uint64_t)sub_18557A3E4, v10, (uint64_t)signpost_c2_removePresentationModifier_end, 0);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
}

+ (void)__swift_createTransformerWithInputAnimatableProperties:(id)a3 presentationValueChangedCallback:(id)a4
{
  unint64_t v4 = _Block_copy(a4);
  sub_1853B985C(0, (unint64_t *)&qword_1EB255C28);
  unint64_t v5 = sub_186A1EB3C();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FB0180);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 20) = 0;
  *(unsigned char *)(v7 + 16) = 0;
  unint64_t v8 = (void *)swift_allocObject();
  void v8[2] = v7;
  v8[3] = sub_18557A3E4;
  v8[4] = v6;
  id v9 = objc_allocWithZone((Class)_s29AnimatablePropertyTransformerCMa());
  swift_bridgeObjectRetain();
  swift_retain();
  id v10 = sub_18557CC50(v5, 0, (uint64_t)signpost_c2_removePresentationModifier_end, 0, (uint64_t)sub_1853C4594, (uint64_t)v8, (uint64_t)signpost_c2_removePresentationModifier_end, 0);
  swift_release();

  swift_bridgeObjectRelease_n();
  swift_release();
}

- (void)bringSubviewToFront:(UIView *)view
{
  unint64_t v4 = view;
  if (v4)
  {
    id v12 = v4;
    unint64_t v5 = [(CALayer *)self->_layer sublayers];
    uint64_t v6 = [v5 count];
    uint64_t v7 = -[UIView _backing_outermostLayer](v12);
    uint64_t v8 = [v5 indexOfObject:v7];

    if (v8 != 0x7FFFFFFFFFFFFFFFLL && v8 != v6 - 1)
    {
      id v10 = (void *)[v5 mutableCopy];
      id v11 = -[UIView _backing_outermostLayer](v12);
      [v10 addObject:v11];

      [v10 removeObjectAtIndex:v8];
      [(CALayer *)self->_layer setSublayers:v10];
      -[UIView _synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable]((uint64_t)self);
      [(UIView *)self _invalidateSubviewCache];
    }
    unint64_t v4 = v12;
  }
}

- (void)_setMonitorsSubtree:(BOOL)a3
{
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  if (((((viewFlags & 0x40000000000) == 0) ^ a3) & 1) == 0)
  {
    BOOL v4 = a3;
    uint64_t v6 = *((void *)&self->_viewFlags + 1);
    int v7 = *((_DWORD *)&self->_viewFlags + 4);
    uint64_t v8 = 0x40000000000;
    if (!a3) {
      uint64_t v8 = 0;
    }
    *(void *)&self->_uint64_t viewFlags = viewFlags & 0xFFFFFBFFFFFFFFFFLL | v8;
    *((void *)&self->_viewFlags + 1) = v6;
    *((_DWORD *)&self->_viewFlags + 4) = v7;
    id v9 = [(UIView *)self window];
    id v10 = v9;
    if (v4) {
      [v9 _registerSubtreeMonitor:self];
    }
    else {
      [v9 _unregisterSubtreeMonitor:self];
    }
  }
}

- (void)_promoteSelfOrDescendantToFirstResponderIfNecessary
{
  -[UIView _findFirstSubviewWantingToBecomeFirstResponder]((uint64_t)self);
  id v3 = (UIView *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    if ((*(void *)&self->_viewFlags & 0x800) == 0) {
      return;
    }
    id v3 = self;
  }
  BOOL v4 = v3;
  [(UIView *)self _makeSubtreePerformSelector:sel__clearBecomeFirstResponderWhenCapable withObject:0];
  [(UIView *)v4 deferredBecomeFirstResponder];
}

- (void)_setOverrideTintColor:(id)a3
{
  id v13 = a3;
  if (v13 || (*(void *)&self->_viewFlags & 0x200) != 0)
  {
    id v4 = [(UIView *)self _overrideTintColor];
    id v5 = v13;
    uint64_t v6 = v5;
    if (v4 == v5)
    {
    }
    else
    {
      if (v5 && v4)
      {
        char v7 = [v4 isEqual:v5];

        if (v7) {
          goto LABEL_21;
        }
      }
      else
      {
      }
      uint64_t v8 = -[UIView __tintColor](self);
      objc_setAssociatedObject(self, &unk_1EB25C0A3, v6, (void *)1);
      *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFFFFFFFFDFFLL | ((unint64_t)(v13 != 0) << 9);
      id v9 = v8;
      id v10 = v6;
      id v11 = v10;
      if (v9 != v10)
      {
        if (v6 && v9)
        {
          char v12 = [v9 isEqual:v10];

          if (v12)
          {
LABEL_19:
            uint64_t v6 = v9;
            goto LABEL_20;
          }
        }
        else
        {
        }
        -[UIView _dispatchTintColorVisitorWithReasons:](self, 1);
        if (qword_1EB25C338 != -1) {
          dispatch_once(&qword_1EB25C338, &__block_literal_global_3730);
        }
        goto LABEL_19;
      }

      uint64_t v6 = v11;
    }
LABEL_20:
  }
LABEL_21:
}

- (id)_nilBackgroundColor
{
  return 0;
}

- (void)insertSubview:(UIView *)view belowSubview:(UIView *)siblingSubview
{
}

+ (BOOL)_fluidParallaxTransitionsEnabledWithTraitCollection:(uint64_t)a1
{
  id v2 = a2;
  self;
  if (qword_1EB264E80 != -1) {
    dispatch_once(&qword_1EB264E80, &__block_literal_global_14_8);
  }
  if (byte_1EB264E63) {
    BOOL v3 = [v2 userInterfaceIdiom] != 3;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

uint64_t __38__UIView__hasSpringLoadedInteractions__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

- (void)addInteraction:(id)interaction
{
  id v5 = interaction;
  if (!v5)
  {
    id v11 = [MEMORY[0x1E4F28B00] currentHandler];
    [v11 handleFailureInMethod:a2, self, @"UIView.m", 19322, @"Invalid parameter not satisfying: %@", @"interaction" object file lineNumber description];
  }
  uint64_t v6 = objc_getAssociatedObject(self, &_UIViewInteractionsKey);
  if ((*((unsigned char *)&self->_viewFlags + 20) & 0x40) == 0)
  {
    char v7 = objc_opt_new();

    objc_setAssociatedObject(self, &_UIViewInteractionsKey, v7, (void *)1);
    *(void *)((char *)&self->_viewFlags + 20) |= 0x40uLL;
    uint64_t v6 = v7;
  }
  id v12 = v5;
  objc_opt_class();
  if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_respondsToSelector()) {
    int v8 = [(UIView *)self isSpringLoaded] ^ 1;
  }
  else {
    int v8 = 1;
  }
  if ((*((unsigned char *)&self->_viewFlags + 20) & 0x40) == 0)
  {

    if (!v8) {
      goto LABEL_16;
    }
LABEL_15:
    id v10 = [v12 view];
    [v10 removeInteraction:v12];

    [v6 addObject:v12];
    _setInteractionView(v12, self);
    goto LABEL_16;
  }
  id v9 = objc_getAssociatedObject(self, &_UIViewInteractionsKey);
  if ([v9 indexOfObjectIdenticalTo:v12] != 0x7FFFFFFFFFFFFFFFLL) {
    LOBYTE(v8) = 0;
  }

  if (v8) {
    goto LABEL_15;
  }
LABEL_16:
}

- (id)registerForTraitChanges:(id)a3 withAction:(SEL)a4
{
  uint64_t v6 = +[UITraitCollection _traitTokensIncludingPlaceholdersForTraits:]((uint64_t)UITraitCollection, a3);
  char v7 = [(UIView *)self _registerForTraitTokenChanges:v6 withTarget:self action:a4];

  return v7;
}

- (id)_registerForTraitTokenChanges:(id)a3 withTarget:(id)a4 action:(SEL)a5
{
  id v8 = a3;
  id v9 = (UIView *)a4;
  traitChangeRegistrdouble y = self->_traitChangeRegistry;
  if (!traitChangeRegistry)
  {
    id v11 = objc_alloc_init(_UITraitChangeRegistry);
    id v12 = self->_traitChangeRegistry;
    self->_traitChangeRegistrdouble y = v11;

    traitChangeRegistrdouble y = self->_traitChangeRegistry;
  }
  id v13 = -[_UITraitChangeRegistry registerForTraitTokenChanges:withTarget:action:targetIsSender:]((uint64_t)traitChangeRegistry, v8, v9, a5, v9 == self);

  return v13;
}

- (void)setMultipleTouchEnabled:(BOOL)multipleTouchEnabled
{
  uint64_t v3 = 0x20000000;
  if (!multipleTouchEnabled) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFFFDFFFFFFFLL | v3;
}

- (BOOL)becomeFirstResponder
{
  uint64_t v3 = [(UIView *)self window];
  if (v3)
  {

LABEL_7:
    v5.receiver = self;
    v5.super_class = (Class)UIView;
    return [(UIResponder *)&v5 becomeFirstResponder];
  }
  if (![(UIView *)self _supportsBecomeFirstResponderWhenPossible]) {
    goto LABEL_7;
  }
  return [(UIView *)self _becomeFirstResponderWhenPossible];
}

- (id)_kb_description
{
  uint64_t v3 = [MEMORY[0x1E4F28E78] stringWithFormat:@"<%@: %p; ", objc_opt_class(), self];
  _UIViewDescriptionAppendBaseClass(self, v3);
  _UIViewDescriptionAppendFrame(self, v3);
  if ([(UIView *)self isHidden]) {
    [v3 appendFormat:@"hidden = YES; "];
  }
  if (![(UIView *)self isOpaque]) {
    [v3 appendFormat:@"opaque = NO; "];
  }
  if (![(UIView *)self isUserInteractionEnabled]) {
    [v3 appendFormat:@"userInteractionEnabled = NO; "];
  }
  [v3 appendString:@">"];
  return v3;
}

- (void)setContentHuggingPriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis
{
  [(UIView *)self _contentHuggingPriorities];
  double v9 = v8;
  double v10 = priority;
  if (axis)
  {
    if (v9 == v10) {
      return;
    }
  }
  else if (v7 == v10)
  {
    return;
  }
  -[UIView _setContentHuggingPriorities:](self, "_setContentHuggingPriorities:");
}

- (void)updateTraitsIfNeeded
{
  if (qword_1EB25C330 != -1) {
    dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
  }
  if (byte_1EB25C0B5)
  {
    -[UIView _updateTraitsIfNeededWithBehavior:]((uint64_t)self, 2);
  }
}

- (void)_eagerlyUpdateSafeAreaInsetsToDescendant:(id)a1
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = v3;
  if (a1 && [v3 isDescendantOfView:a1])
  {
    id v5 = v4;
    if (v5 == a1)
    {
      double v7 = 0;
    }
    else
    {
      uint64_t v6 = v5;
      double v7 = 0;
      do
      {
        if (!v7)
        {
          double v7 = [MEMORY[0x1E4F1CA48] array];
        }
        [v7 insertObject:v6 atIndex:0];
        uint64_t v8 = [v6 superview];

        uint64_t v6 = (void *)v8;
      }
      while ((id)v8 != a1);
    }

    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v9 = v7;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v15;
      do
      {
        uint64_t v13 = 0;
        do
        {
          if (*(void *)v15 != v12) {
            objc_enumerationMutation(v9);
          }
          objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * v13++), "_updateSafeAreaInsets", (void)v14);
        }
        while (v11 != v13);
        uint64_t v11 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v11);
    }
  }
}

- (UILayoutPriority)contentHuggingPriorityForAxis:(UILayoutConstraintAxis)axis
{
  [(UIView *)self _contentHuggingPriorities];
  if (axis) {
    return v5;
  }
  return v4;
}

- (void)_backing_insertSubview:(void *)a3 aboveSubview:
{
  if (a1)
  {
    double v4 = *(void **)(a1 + 160);
    -[UIView _backing_outermostLayer](a2);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    double v5 = -[UIView _backing_outermostLayer](a3);
    [v4 insertSublayer:v6 above:v5];
  }
}

+ (void)_endSuspendingMotionEffectsForReason:(id)a3
{
  if (_motionEffectEngine) {
    [(id)_motionEffectEngine endSuspendingForReason:a3];
  }
  else {
    [(id)qword_1EB25C198 removeObject:a3];
  }
}

+ (void)_beginSuspendingMotionEffectsForReason:(id)a3
{
  id v3 = a3;
  id v7 = v3;
  if (_motionEffectEngine)
  {
    [(id)_motionEffectEngine beginSuspendingForReason:v3];
  }
  else
  {
    double v4 = (void *)qword_1EB25C198;
    if (!qword_1EB25C198)
    {
      id v5 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      id v6 = (void *)qword_1EB25C198;
      qword_1EB25C198 = (uint64_t)v5;

      id v3 = v7;
      double v4 = (void *)qword_1EB25C198;
    }
    [v4 addObject:v3];
  }
}

- (id)engine:(id)a3 markerForConstraintToBreakAmongConstraints:(id)a4
{
  unint64_t v5 = objc_msgSend(a4, "count", a3);
  if (v5 > 1)
  {
    unint64_t v8 = v5;
    id v6 = (void *)[a4 objectAtIndex:0];
    uint64_t v9 = 1;
    while (1)
    {
      uint64_t v10 = (void *)[a4 objectAtIndex:v9];
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = off_1ED0E79E0[v11];
        uint64_t v13 = ((uint64_t (*)(void *))v12)(v6);
        uint64_t v14 = ((uint64_t (*)(void *))v12)(v10);
        uint64_t v15 = v13 < v14 ? -1 : v13 != v14;
        if (v15) {
          break;
        }
        if (++v11 == 8)
        {
          if (v6)
          {
            long long v16 = objc_msgSend((id)objc_msgSend(v6, "firstItem"), "_referenceView");
            if (v10) {
              goto LABEL_15;
            }
LABEL_27:
            long long v17 = 0;
          }
          else
          {
            long long v16 = 0;
            if (!v10) {
              goto LABEL_27;
            }
LABEL_15:
            long long v17 = objc_msgSend((id)objc_msgSend(v10, "firstItem"), "_referenceView");
          }
          uint64_t v15 = CompareViewHierarchyPosition(v16, v17);
          break;
        }
      }
      if (v15) {
        goto LABEL_22;
      }
      if (v6)
      {
        uint64_t v18 = objc_msgSend((id)objc_msgSend(v6, "secondItem"), "_referenceView");
        if (!v10) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v18 = 0;
        if (!v10)
        {
LABEL_29:
          uint64_t v19 = 0;
          goto LABEL_21;
        }
      }
      uint64_t v19 = objc_msgSend((id)objc_msgSend(v10, "secondItem"), "_referenceView");
LABEL_21:
      uint64_t v15 = CompareViewHierarchyPosition(v18, v19);
LABEL_22:
      if (v15 == -1) {
        id v6 = v10;
      }
      if (++v9 == v8) {
        goto LABEL_3;
      }
    }
  }
  id v6 = (void *)[a4 lastObject];
LABEL_3:
  return (id)[v6 _markerAndPositiveExtraVar];
}

- (void)_setBackgroundMergeBehavior:(int64_t)a3
{
  unint64_t v3 = *(void *)((char *)&self->_viewFlags + 20);
  if (((v3 >> 45) & 3) != a3)
  {
    *(void *)((char *)&self->_viewFlags + 20) = v3 & 0xFFFF9FFFFFFFFFFFLL | ((unint64_t)(a3 & 3) << 45);
    -[UIView _updateCaptureGroupRecursively](self);
  }
}

- (void)_mt_setCaptureGroupName:(uint64_t *)a1
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v4 = a1[21];
    unint64_t v5 = v4 ? *(void **)(v4 + 48) : 0;
    if (([v5 isEqualToString:a2] & 1) == 0)
    {
      -[_UICollectionLayoutItemSolver setSolveResult:](a1[21], a2);
      uint64_t v6 = a1[21];
      if (v6)
      {
        id v7 = *(void **)(v6 + 40);
        if (v7)
        {
          id v8 = *(id *)(v6 + 48);
          [v7 _setCaptureGroupName:v8];
        }
      }
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      uint64_t v9 = objc_msgSend(a1, "subviews", 0);
      uint64_t v10 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v15;
        do
        {
          uint64_t v13 = 0;
          do
          {
            if (*(void *)v15 != v12) {
              objc_enumerationMutation(v9);
            }
            -[UIView _updateCaptureGroupRecursively](*(void **)(*((void *)&v14 + 1) + 8 * v13++));
          }
          while (v11 != v13);
          uint64_t v11 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
        }
        while (v11);
      }
    }
  }
}

- (void)_updateCaptureGroupRecursively
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    -[UIView _updateAutomaticCaptureGroupIfNecessary]();
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v2 = objc_msgSend(a1, "subviews", 0);
    uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v8;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v8 != v5) {
            objc_enumerationMutation(v2);
          }
          -[UIView _updateCaptureGroupRecursively](*(void *)(*((void *)&v7 + 1) + 8 * v6++));
        }
        while (v4 != v6);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      }
      while (v4);
    }
  }
}

- (void)_setInternalAppIntentsIntelligenceProvider:(id)a3
{
  *(void *)((char *)&self->_viewFlags + 20) = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFFDFFLL | ((unint64_t)(a3 != 0) << 9);
  objc_setAssociatedObject(self, &_UIViewAppIntentsIntelligenceProviderKey, a3, (void *)1);
}

- (CGPoint)convertPoint:(CGPoint)point toView:(UIView *)view
{
  uint64_t v4 = view;
  double y = point.y;
  double x = point.x;
  if (view || (uint64_t v4 = (UIView *)[(UIView *)self window]) != 0)
  {
    long long v8 = [(UIView *)self _window];
    [(UIView *)v4 _window];

    if (v4 != self)
    {
      layer = self->_layer;
      long long v10 = v4->_layer;
      uint64_t v11 = layer;
      -[CALayer convertPoint:toLayer:](v11, "convertPoint:toLayer:", v10, x, y);
      double x = v12;
      double y = v13;
    }
  }
  double v14 = x;
  double v15 = y;
  result.double y = v15;
  result.double x = v14;
  return result;
}

- (BOOL)_shouldDelayTouchForSystemGestures:(id)a3
{
  return (*((void *)&self->_viewFlags + 1) >> 30) & 1;
}

- (BOOL)_hasLayoutArrangements
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 13) & 1;
}

- (void)_removeLayoutArrangement:(void *)a1
{
  if (a1 && a2)
  {
    id v3 = a2;
    id v4 = [a1 _mutableLayoutArrangements];
    [v4 removeObject:v3];
  }
}

- (void)_addLayoutArrangement:(_DWORD *)a1
{
  id v3 = a2;
  if (a1 && v3)
  {
    id v5 = v3;
    id v4 = -[UIView _mutableLayoutArrangementsCreateIfNecessary](a1);
    if (([v4 containsObject:v5] & 1) == 0) {
      [v4 addObject:v5];
    }

    id v3 = v5;
  }
}

- (id)_mutableLayoutArrangementsCreateIfNecessary
{
  if (a1)
  {
    id v2 = [a1 _mutableLayoutArrangements];
    if (!v2)
    {
      a1[28] |= 0x2000u;
      id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      objc_setAssociatedObject(a1, &_UIViewLayoutArrangementsAssocObjectKey, v2, (void *)1);
    }
  }
  else
  {
    id v2 = 0;
  }
  return v2;
}

- (double)_calculatedIntrinsicHeight
{
  if ((*(void *)&self->_viewFlags & 0x20) != 0)
  {
    id v4 = -[UIView _currentContentSizeHeightConstraint]((uint64_t)self);
    [v4 constant];
    double v6 = v5;

    return v6;
  }
  else
  {
    -[UIView systemLayoutSizeFittingSize:](self, "systemLayoutSizeFittingSize:", 0.0, 0.0);
    return v2;
  }
}

- (uint64_t)_currentContentSizeHeightConstraint
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    CGPoint result = 0;
    uint64_t v3 = 0;
    if ((v1[12] & 0x20000000000000) != 0)
    {
      CGPoint result = [-[UIView _contentSizeConstraints](v1) count];
      if (result)
      {
        if ((v1[12] & 0x400000000000) != 0)
        {
          double v2 = -[UIView _contentSizeConstraints](v1);
          extractContentSizeConstraints((uint64_t)v1, v2, 0, &v3);
          return v3;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

- (NSArray)constraintsAffectingLayoutForAxis:(UILayoutConstraintAxis)axis
{
  return (NSArray *)[(UIView *)self constraintsAffectingLayoutForAxis:axis ofItem:self];
}

+ (void)initialize
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((id)objc_opt_class() == a1)
  {
    _class_setCustomDeallocInitiation();
    qword_1EB25C140 = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DBE8]);
  }
  else
  {
    uint64_t v3 = self;
    [v3 instanceMethodForSelector:sel_traitCollection];
    uint64_t v4 = dyld_image_header_containing_address();
    [a1 instanceMethodForSelector:sel_traitCollection];
    uint64_t v5 = dyld_image_header_containing_address();

    if (v4 != v5)
    {
      double v6 = *(NSObject **)(__UILogGetCategoryCachedImpl("TraitCollection", &qword_1EB25C138) + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        long long v7 = v6;
        long long v8 = NSStringFromClass((Class)a1);
        int v9 = 138412290;
        long long v10 = v8;
        _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "Class %@ overrides the -traitCollection getter, which is not supported. If you're trying to override traits, you must use the appropriate API.", (uint8_t *)&v9, 0xCu);
      }
    }
  }
}

+ (BOOL)_supportsInvalidatingFocusCache
{
  uint64_t v3 = +[UIView instanceMethodForSelector:sel_focusItemsInRect_];
  return v3 == [a1 instanceMethodForSelector:sel_focusItemsInRect_];
}

- (void)_updateNeedsDisplayOnBoundsChange
{
  if (result)
  {
    uint64_t v1 = result;
    if ([result _canDrawContent]) {
      uint64_t v2 = (v1[12] >> 37) & 1;
    }
    else {
      uint64_t v2 = (v1[12] & 0x2000040) == 64;
    }
    uint64_t v3 = (void *)v1[20];
    return (void *)[v3 setNeedsDisplayOnBoundsChange:v2];
  }
  return result;
}

- (void)setNeedsDisplayOnBoundsChange:(BOOL)a3
{
  uint64_t v3 = 0x2000000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFDFFFFFFFFFLL | v3;
  -[UIView _updateNeedsDisplayOnBoundsChange](self);
}

+ (void)animateWithDuration:(NSTimeInterval)duration animations:(void *)animations completion:(void *)completion
{
}

- (void)setHitTestDirectionalInsets:(NSDirectionalEdgeInsets)a3
{
  if (a3.leading == 0.0 && a3.top == 0.0 && a3.trailing == 0.0 && a3.bottom == 0.0)
  {
    if ((*((unsigned char *)&self->_viewFlags + 20) & 0x80) != 0)
    {
      objc_setAssociatedObject(self, &_UIViewHitTestDirectionalInsetsKey, 0, (void *)1);
      *(void *)((char *)&self->_viewFlags + 20) &= ~0x80uLL;
    }
  }
  else
  {
    id v4 = [MEMORY[0x1E4F29238] valueWithDirectionalEdgeInsets:a3.top];
    objc_setAssociatedObject(self, &_UIViewHitTestDirectionalInsetsKey, v4, (void *)1);
    *(void *)((char *)&self->_viewFlags + 20) |= 0x80uLL;
  }
}

- (void)setHitTestInsets:(UIEdgeInsets)a3
{
  double right = a3.right;
  double bottom = a3.bottom;
  double left = a3.left;
  double top = a3.top;
  BOOL v8 = [(UIView *)self _shouldReverseLayoutDirection];
  if (v8) {
    double v9 = right;
  }
  else {
    double v9 = left;
  }
  if (v8) {
    double v10 = left;
  }
  else {
    double v10 = right;
  }
  -[UIView setHitTestDirectionalInsets:](self, "setHitTestDirectionalInsets:", top, v9, bottom, v10);
}

- (UIView)init
{
  return -[UIView initWithFrame:](self, "initWithFrame:", *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
}

- (void)updateFocusIfNeeded
{
  id v2 = [(UIView *)self _focusSystem];
  [v2 updateFocusIfNeeded];
}

+ (void)_performInitializationForIdiomIfNeccessary:(uint64_t)a1
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  self;
  if (a2 != -1 && !_UIViewDidAlreadyInitializeIdiom[a2])
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v3 = (id)_UIViewClassesRegisteredForIdiomInitialization;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * v7++), "_initializeForIdiom:", a2, (void)v8);
        }
        while (v5 != v7);
        uint64_t v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v5);
    }

    _UIViewDidAlreadyInitializeIdiom[a2] = 1;
  }
}

- (double)_baselineOffsetFromNearestEdgeForLayoutAttribute:(int64_t)a3
{
  if ((a3 - 11) > 1) {
    return 0.0;
  }
  if (a3 == 12) {
    [(UIView *)self _firstBaselineOffsetFromTop];
  }
  else {
    [(UIView *)self _baselineOffsetFromBottom];
  }
  return result;
}

- (void)_baselineViewForConstraint:(int)a3 forFirstItem:(void *)a4 withOffset:
{
  uint64_t v4 = a1;
  if (a1)
  {
    if ([a1 _recordBaselineLoweringInfo])
    {
      long long v8 = -[NSLayoutConstraint _baselineLoweringInfoForFirstItem:](a2, a3);
      [v8 baselineOffset];
      uint64_t v10 = v9;
      uint64_t v4 = (void *)[v8 baselineView];
    }
    else
    {
      if (a3) {
        uint64_t v11 = [a2 firstAttribute];
      }
      else {
        uint64_t v11 = [a2 secondAttribute];
      }
      uint64_t v12 = v11;
      uint64_t v10 = 0;
      if ((v11 - 11) <= 1)
      {
        uint64_t v13 = (void *)[v4 _viewForLoweringBaselineLayoutAttribute:v11];
        uint64_t v4 = v13;
        if (v12 == 12) {
          [v13 _firstBaselineOffsetFromTop];
        }
        else {
          [v13 _baselineOffsetFromBottom];
        }
        uint64_t v10 = v14;
      }
    }
    if (a4) {
      *a4 = v10;
    }
  }
  return v4;
}

+ (id)_descriptionWithoutTextRedactionForObject:(id)a3
{
  id v3 = a3;
  if (pthread_main_np() == 1)
  {
    char v4 = __shouldRedactTextInDescription;
    __shouldRedactTextInDescription = 1;
    uint64_t v5 = [v3 description];

    __shouldRedactTextInDescription = v4;
  }
  else
  {
    uint64_t v5 = [v3 description];
  }
  return v5;
}

uint64_t __74__UIView_UIConstraintBasedLayout___autoresizingConstraints_frameDidChange__block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  [*(id *)(a1 + 32) _constantsForHorizontalAutoresizingConstraints:&v6 :(char *)&v6 + 8];
  [*(id *)(a1 + 32) _constantsForVerticalAutoresizingConstraints:&v7 :(char *)&v7 + 8];
  uint64_t result = [*(id *)(a1 + 40) count];
  if (result == 4)
  {
    uint64_t v3 = 0;
    char v4 = 0;
    do
    {
      uint64_t v5 = (void *)[*(id *)(a1 + 40) objectAtIndex:v3];
      [v5 setConstant:*((double *)&v6 + v3)];
      uint64_t result = [v5 _loweredConstantIsRounded];
      v4 |= result;
      ++v3;
    }
    while (v3 != 4);
    if (v4) {
      return [*(id *)(a1 + 32) setNeedsLayout];
    }
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  return result;
}

- (void)_constantsForVerticalAutoresizingConstraints:(double *)a3 :(double *)a4
{
  long long v7 = [(UIView *)self superview];
  unint64_t v8 = (unint64_t)-[UIView _effectiveAutoresizingMask](self);
  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  [(UIView *)self _calculateSubviewAlignmentFrame:&v27 superviewAlignmentBounds:&v28 forAutoresizingMask:v8 preservingNonzeroSuperviewAlignmentBoundsOriginForCompatibility:0];
  if (v7)
  {
    switch((v8 >> 3) & 7)
    {
      case 1uLL:
        if (dyld_program_sdk_at_least())
        {
          double MaxY = CGRectGetMaxY(v28);
          double v15 = CGRectGetMaxY(v27);
          goto LABEL_15;
        }
        double MidY = CGRectGetMidY(v27);
        double v23 = MidY - CGRectGetMaxY(v28);
        CGFloat v9 = v23 + CGRectGetMinY(v28);
        break;
      case 2uLL:
        int v16 = dyld_program_sdk_at_least();
        double MinY = CGRectGetMinY(v27);
        double v18 = MinY - CGRectGetMinY(v28);
        if (v16)
        {
          *a3 = v18;
          double v19 = CGRectGetMaxY(v28);
          CGFloat Height = v19 - CGRectGetMaxY(v27);
        }
        else
        {
          double v24 = CGRectGetMaxY(v28);
          double v25 = v24 - CGRectGetMaxY(v27);
          *a3 = (v18 - v25) * 0.5;
          CGFloat Height = -(v18 + v25);
        }
        goto LABEL_6;
      case 3uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"Autoresizing mask for %@ is too complicated for editing vertical constraints", self, v26 format];
        return;
      case 4uLL:
        int v20 = dyld_program_sdk_at_least();
        CGRect v21 = v27;
        if (v20)
        {
          double MaxY = CGRectGetMinY(v21);
          double v15 = CGRectGetMinY(v28);
LABEL_15:
          CGFloat v9 = MaxY - v15;
        }
        else
        {
          CGFloat v9 = CGRectGetMidY(v21);
        }
        break;
      default:
        uint64_t v11 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v12 = *MEMORY[0x1E4F1C3C8];
        uint64_t v13 = (objc_class *)objc_opt_class();
        [v11 raise:v12, @"<%@ %p>: Attempt to edit frame constraints there aren't any.", NSStringFromClass(v13), self format];
        return;
    }
  }
  else
  {
    CGFloat v9 = CGRectGetMinY(v27);
  }
  *a3 = v9;
  CGFloat Height = CGRectGetHeight(v27);
LABEL_6:
  *a4 = Height;
}

- (void)_constantsForHorizontalAutoresizingConstraints:(double *)a3 :(double *)a4
{
  long long v7 = [(UIView *)self superview];
  unint64_t v8 = -[UIView _effectiveAutoresizingMask](self);
  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  [(UIView *)self _calculateSubviewAlignmentFrame:&v27 superviewAlignmentBounds:&v28 forAutoresizingMask:v8 preservingNonzeroSuperviewAlignmentBoundsOriginForCompatibility:0];
  if (v7)
  {
    switch(v8 & 7)
    {
      case 1:
        if (dyld_program_sdk_at_least())
        {
          double MaxX = CGRectGetMaxX(v28);
          double v15 = CGRectGetMaxX(v27);
          goto LABEL_15;
        }
        double MidX = CGRectGetMidX(v27);
        double v23 = MidX - CGRectGetMaxX(v28);
        CGFloat v9 = v23 + CGRectGetMinX(v28);
        break;
      case 2:
        int v16 = dyld_program_sdk_at_least();
        double MinX = CGRectGetMinX(v27);
        double v18 = MinX - CGRectGetMinX(v28);
        if (v16)
        {
          *a3 = v18;
          double v19 = CGRectGetMaxX(v28);
          CGFloat Width = v19 - CGRectGetMaxX(v27);
        }
        else
        {
          double v24 = CGRectGetMaxX(v28);
          double v25 = v24 - CGRectGetMaxX(v27);
          *a3 = (v18 - v25) * 0.5;
          CGFloat Width = -(v18 + v25);
        }
        goto LABEL_6;
      case 3:
      case 5:
      case 6:
      case 7:
        [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"Autoresizing mask for %@ is too complicated for editing horizontal constraints", self, v26 format];
        return;
      case 4:
        int v20 = dyld_program_sdk_at_least();
        CGRect v21 = v27;
        if (v20)
        {
          double MaxX = CGRectGetMinX(v21);
          double v15 = CGRectGetMinX(v28);
LABEL_15:
          CGFloat v9 = MaxX - v15;
        }
        else
        {
          CGFloat v9 = CGRectGetMidX(v21);
        }
        break;
      default:
        uint64_t v11 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v12 = *MEMORY[0x1E4F1C3C8];
        uint64_t v13 = (objc_class *)objc_opt_class();
        [v11 raise:v12, @"<%@ %p>: Attempt to edit frame constraints there aren't any.", NSStringFromClass(v13), self format];
        return;
    }
  }
  else
  {
    CGFloat v9 = CGRectGetMinX(v27);
  }
  *a3 = v9;
  CGFloat Width = CGRectGetWidth(v27);
LABEL_6:
  *a4 = Width;
}

- (void)_constraintsEquivalentToAutoresizingMask
{
  if (result)
  {
    uint64_t v1 = result;
    id v2 = -[UIView _effectiveAutoresizingMask](result);
    v1[37] = v2;
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = [v1 superview];
      long long v8 = 0u;
      long long v9 = 0u;
      long long v6 = 0u;
      long long v7 = 0u;
      [v1 _calculateSubviewAlignmentFrame:&v6 superviewAlignmentBounds:&v8 forAutoresizingMask:v3 preservingNonzeroSuperviewAlignmentBoundsOriginForCompatibility:dyld_program_sdk_at_least() ^ 1];
      if (dyld_program_sdk_at_least()) {
        return objc_msgSend(MEMORY[0x1E4F5B238], "constraintsWithAutoresizingMask:subitem:frame:superitem:bounds:", v3, v1, v4, v6, v7, v8, v9);
      }
      else {
        return objc_msgSend(MEMORY[0x1E4F5B238], "oldUIConstraintsWithAutoresizingMask:subitem:frame:superitem:bounds:", v3, v1, v4, v6, v7, v8, v9);
      }
    }
    else
    {
      uint64_t v5 = (void *)MEMORY[0x1E4F1C978];
      return (void *)[v5 array];
    }
  }
  return result;
}

- (void)_calculateSubviewAlignmentFrame:(CGRect *)a3 superviewAlignmentBounds:(CGRect *)a4 forAutoresizingMask:(unint64_t)a5 preservingNonzeroSuperviewAlignmentBoundsOriginForCompatibility:(BOOL)a6
{
  BOOL v6 = a6;
  uint64_t v10 = [(UIView *)self superview];
  [(UIView *)v10 bounds];
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  -[UIView _alignmentRectForBounds:](v10, "_alignmentRectForBounds:", *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8));
  double v20 = v15;
  double v21 = v18;
  double v22 = v19;
  if (v6)
  {
    *(CGRect *)(&v16 - 1) = CGRectOffset(*(CGRect *)&v15, v12, v14);
    double v20 = v23;
    double v21 = v24;
    double v22 = v25;
  }
  [(UIView *)self _alignmentFrame];
  BOOL v30 = (*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  BOOL v31 = ((*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (v28 >= 0.0)
  {
    BOOL v31 = 0;
    BOOL v30 = 0;
  }
  int v32 = (*(void *)&v28 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v30;
  if ((*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
    int v32 = 1;
  }
  double v33 = 0.0;
  if (v32 | v31) {
    double v28 = 0.0;
  }
  BOOL v34 = (*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  BOOL v35 = v29 < 0.0 && ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (v29 >= 0.0) {
    BOOL v34 = 0;
  }
  int v36 = (*(void *)&v29 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v34;
  if ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
    int v36 = 1;
  }
  if (v36 | v35) {
    double v29 = 0.0;
  }
  if (v22 >= 0.0) {
    double v37 = v22;
  }
  else {
    double v37 = 0.0;
  }
  if (v21 >= 0.0) {
    double v33 = v21;
  }
  if (v20 <= 2777777.0) {
    double v38 = v20;
  }
  else {
    double v38 = 2777777.0;
  }
  double v39 = fmax(v38, -2777777.0);
  if (v37 > 2777777.0) {
    double v37 = 2777777.0;
  }
  double v40 = fmax(v37, -2777777.0);
  if (v28 > 2777777.0) {
    double v28 = 2777777.0;
  }
  double v41 = fmax(v28, -2777777.0);
  if (v29 > 2777777.0) {
    double v29 = 2777777.0;
  }
  a4->origin.double x = v39;
  v42.f64[0] = v49;
  v42.f64[1] = v33;
  float64x2_t v43 = (float64x2_t)vdupq_n_s64(0x4145315880000000uLL);
  float64x2_t v44 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v42, v43), (int8x16_t)v43, (int8x16_t)v42);
  float64x2_t v45 = (float64x2_t)vdupq_n_s64(0xC145315880000000);
  *(float64x2_t *)&a4->origin.double y = vmaxnmq_f64(v44, v45);
  a4->size.double height = v40;
  v26.f64[1] = v27;
  float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  float64x2_t v47 = vabsq_f64(v26);
  float64x2_t v48 = (float64x2_t)vandq_s8((int8x16_t)v26, vorrq_s8((int8x16_t)vcgtq_f64(v46, v47), (int8x16_t)vcgtq_f64(v47, v46)));
  a3->origin = (CGPoint)vmaxnmq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v48, v43), (int8x16_t)v43, (int8x16_t)v48), v45);
  a3->size.double width = v41;
  a3->size.double height = fmax(v29, -2777777.0);
}

- (CGRect)_alignmentFrame
{
  uint64_t v3 = (void *)[(NSISEngine *)[(UIView *)self _layoutEngine] delegate];
  if ((dyld_program_sdk_at_least() & 1) != 0
    || v3 && ([v3 _forceLayoutEngineSolutionInRationalEdges] & 1) != 0)
  {
    [(UIView *)self center];
    [-[UIView _backing_outermostLayer](self) anchorPoint];
    [(UIView *)self alignmentRectInsets];
    [(UIView *)self bounds];
    -[UIView _alignmentRectForBounds:](self, "_alignmentRectForBounds:");
    CGFloat y = v16.origin.y;
    CGFloat width = v16.size.width;
    CGFloat height = v16.size.height;
    CGRectGetWidth(v16);
    UIRoundToViewScale(self);
    CGFloat x = v17.origin.x;
    v17.origin.CGFloat y = y;
    v17.size.CGFloat width = width;
    v17.size.CGFloat height = height;
    CGRectGetHeight(v17);
    UIRoundToViewScale(self);
    double v9 = v8;
  }
  else
  {
    [(UIView *)self frame];
    -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:");
    CGFloat x = v10;
    CGFloat width = v11;
    CGFloat height = v12;
  }
  double v13 = x;
  double v14 = width;
  double v15 = height;
  result.size.CGFloat height = v15;
  result.size.CGFloat width = v14;
  result.origin.CGFloat y = v9;
  result.origin.CGFloat x = v13;
  return result;
}

- (CGRect)_alignmentRectForBounds:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  [(UIView *)self alignmentRectInsets];
  double v8 = y + v7;
  double v11 = width - (v9 + v10);
  double v13 = height - (v7 + v12);
  double v14 = x + v9;
  double v15 = v8;
  double v16 = v11;
  result.size.double height = v13;
  result.size.double width = v16;
  result.origin.double y = v15;
  result.origin.double x = v14;
  return result;
}

- (NSString)description
{
  id v2 = self;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [MEMORY[0x1E4F28E78] stringWithFormat:@"<%@: %p; ", objc_opt_class(), self];
  _UIViewDescriptionAppendBaseClass(v2, v3);
  uint64_t v4 = [(UIView *)v2 _identifier];
  uint64_t v5 = (void *)v4;
  if (v4) {
    [v3 appendFormat:@"identifier = '%@'; ", v4];
  }
  _UIViewDescriptionAppendFrame(v2, v3);
  _UIViewDescriptionAppendTransform(v2, v3);
  id v6 = v3;
  double v7 = [(UIView *)v2 layer];
  [v7 anchorPoint];
  double v9 = v8;
  double v11 = v10;

  if (v9 != 0.5 || v11 != 0.5) {
    [v6 appendFormat:@"anchorPoint = (%g, %g); ", *(void *)&v9, *(void *)&v11];
  }

  _UIViewDescriptionAppendTextIfApplicable(v2, v6);
  if ([(UIView *)v2 clipsToBounds]) {
    [v6 appendFormat:@"clipsToBounds = YES; "];
  }
  double v12 = [(UIView *)v2 layer];
  int v13 = [v12 isFrozen];

  if (v13) {
    [v6 appendFormat:@"layer.frozen = YES; "];
  }
  [(UIView *)v2 alpha];
  if (v14 != 1.0) {
    objc_msgSend(v6, "appendFormat:", @"alphCATransform3D a = %g; ", *(void *)&v14);
  }
  if ([(UIView *)v2 isHidden]) {
    [v6 appendFormat:@"hidden = YES; "];
  }
  if (![(UIView *)v2 isOpaque]) {
    [v6 appendFormat:@"opaque = NO; "];
  }
  if ([(UIView *)v2 autoresizingMask])
  {
    if (!v2)
    {
      double v19 = 0;
LABEL_35:
      [v6 appendString:v19];

      goto LABEL_36;
    }
    char v15 = [(UIView *)v2 autoresizingMask];
    double v16 = [MEMORY[0x1E4F28E78] string];
    CGRect v17 = v16;
    if (v15)
    {
      [v16 appendString:@"LM+"];
      if ((v15 & 2) == 0)
      {
LABEL_20:
        if ((v15 & 4) == 0) {
          goto LABEL_21;
        }
        goto LABEL_29;
      }
    }
    else if ((v15 & 2) == 0)
    {
      goto LABEL_20;
    }
    [v17 appendString:@"W+"];
    if ((v15 & 4) == 0)
    {
LABEL_21:
      if ((v15 & 8) == 0) {
        goto LABEL_22;
      }
      goto LABEL_30;
    }
LABEL_29:
    [v17 appendString:@"RM+"];
    if ((v15 & 8) == 0)
    {
LABEL_22:
      if ((v15 & 0x10) == 0) {
        goto LABEL_23;
      }
      goto LABEL_31;
    }
LABEL_30:
    [v17 appendString:@"TM+"];
    if ((v15 & 0x10) == 0)
    {
LABEL_23:
      if ((v15 & 0x20) == 0)
      {
LABEL_25:
        uint64_t v18 = [v17 length];
        if (v18) {
          objc_msgSend(v17, "deleteCharactersInRange:", v18 - 1, 1);
        }
        else {
          [v17 appendString:@"none"];
        }
        double v19 = [NSString stringWithFormat:@"autoresize = %@ ", v17];;

        goto LABEL_35;
      }
LABEL_24:
      [v17 appendString:@"BM+"];
      goto LABEL_25;
    }
LABEL_31:
    [v17 appendString:@"H+"];
    if ((v15 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_36:
  if (![(UIView *)v2 autoresizesSubviews]) {
    [v6 appendFormat:@"autoresizesSubviews = NO; "];
  }
  if (![(UIView *)v2 isUserInteractionEnabled]) {
    [v6 appendFormat:@"userInteractionEnabled = NO; "];
  }
  double v20 = [(UIView *)v2 _interactionTintColor];

  if (v20)
  {
    double v21 = [(UIView *)v2 _interactionTintColor];
    [v6 appendFormat:@"tintColor = %@; ", v21];
  }
  if ((*((unsigned char *)&v2->_viewFlags + 20) & 8) != 0)
  {
    uint64_t v22 = [(UIView *)v2 tag];
    if (v22) {
      objc_msgSend(v6, "appendFormat:", @"tag = %ld; ", v22);
    }
  }
  if ([(UIView *)v2 isFocused]) {
    [v6 appendFormat:@"focused = YES; "];
  }
  if ([(NSArray *)v2->_gestureRecognizers count]) {
    objc_msgSend(v6, "appendFormat:", @"gestureRecognizers = <NSArray: %p>; ", v2->_gestureRecognizers);
  }
  double v23 = [(CALayer *)v2->_layer animationKeys];
  double v24 = v23;
  if (v23 && [v23 count])
  {
    double v41 = v5;
    [v6 appendString:@"animations = {"];
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    double v40 = v24;
    id v25 = v24;
    uint64_t v26 = [v25 countByEnumeratingWithState:&v42 objects:v46 count:16];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)v43;
      do
      {
        for (uint64_t i = 0; i != v27; ++i)
        {
          BOOL v30 = v6;
          if (*(void *)v43 != v28) {
            objc_enumerationMutation(v25);
          }
          uint64_t v31 = *(void *)(*((void *)&v42 + 1) + 8 * i);
          int v32 = v2;
          double v33 = v2->_layer;
          BOOL v34 = [(CALayer *)v33 animationForKey:v31];
          uint64_t v39 = v31;
          id v6 = v30;
          [v30 appendFormat:@" %@=%@;", v39, v34];

          id v2 = v32;
        }
        uint64_t v27 = [v25 countByEnumeratingWithState:&v42 objects:v46 count:16];
      }
      while (v27);
    }

    [v6 appendString:@" }; "];
    double v24 = v40;
    uint64_t v5 = v41;
  }
  BOOL v35 = [(UIView *)v2 backgroundColor];

  if (v35)
  {
    int v36 = [(UIView *)v2 backgroundColor];
    [v6 appendFormat:@"backgroundColor = %@; ", v36];
  }
  double v37 = [(CALayer *)v2->_layer description];
  [v6 appendFormat:@"layer = %@>", v37];

  return (NSString *)v6;
}

- (void)_effectiveAutoresizingMask
{
  if (result)
  {
    uint64_t v1 = result;
    if ([result translatesAutoresizingMaskIntoConstraints])
    {
      CGRect result = (void *)[v1 superview];
      if (result)
      {
        if ([v1 _isManuallyResizedBySuperview]) {
          uint64_t v2 = 36;
        }
        else {
          uint64_t v2 = [v1 autoresizingMask];
        }
        uint64_t v3 = v2 | 4;
        if ((v2 & 7) != 0) {
          uint64_t v3 = v2;
        }
        if ((v3 & 0x38) != 0) {
          return (void *)v3;
        }
        else {
          return (void *)(v3 | 0x20);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

- (BOOL)_isManuallyResizedBySuperview
{
  if (![[(UIView *)self superview] autoresizesSubviews]) {
    return 1;
  }
  uint64_t v2 = (objc_class *)objc_opt_class();
  uint64_t v3 = (objc_class *)objc_opt_class();
  IMP MethodImplementation = class_getMethodImplementation(v2, sel_resizeSubviewsWithOldSize_);
  IMP v5 = class_getMethodImplementation(v3, sel_resizeSubviewsWithOldSize_);
  if (MethodImplementation) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  return !v6 && MethodImplementation != v5;
}

- (BOOL)autoresizesSubviews
{
  return (*(void *)&self->_viewFlags & 0x20000) == 0;
}

- (BOOL)clipsToBounds
{
  if (self) {
    LOBYTE(self) = [(CALayer *)self->_layer masksToBounds];
  }
  return (char)self;
}

- (id)_backgroundColor
{
  p_uint64_t viewFlags = &self->_viewFlags;
  if ((*((unsigned char *)&self->_viewFlags + 22) & 2) != 0)
  {
    BOOL v6 = objc_getAssociatedObject(self, &unk_1EB25C0B8);
  }
  else
  {
    if ((*(void *)p_viewFlags & 0x80) == 0
      || (objc_getAssociatedObject(self, &unk_1EB25C0B9), (uint64_t v4 = objc_claimAutoreleasedReturnValue()) == 0))
    {
      double v8 = [(UIView *)self _backgroundCGColor];
      if (!v8) {
        goto LABEL_17;
      }
LABEL_13:
      double v8 = +[UIColor colorWithCGColor:v8];
      goto LABEL_17;
    }
    IMP v5 = (void *)v4;
    BOOL v6 = +[UIColor _systemColorWithName:v4];
  }
  double v7 = [(UIView *)self _backgroundCGColor];
  double v8 = v7;
  if (!v6)
  {
    if (!v7) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  if (v7
    && ((*((unsigned char *)p_viewFlags + 22) & 2) != 0
      ? (id AssociatedObject = (CGColor *)objc_getAssociatedObject(self, &unk_1EB25C0B7))
      : (id AssociatedObject = (CGColor *)[v6 CGColor]),
        !CGColorEqualToColor(AssociatedObject, v8)))
  {
    double v8 = +[UIColor colorWithCGColor:v8];

    _UIViewSetBackgroundColorSystemColorName(self, 0);
    if ((*((unsigned char *)p_viewFlags + 22) & 2) != 0)
    {
      objc_setAssociatedObject(self, &unk_1EB25C0B8, 0, (void *)1);
      objc_setAssociatedObject(self, &unk_1EB25C0B7, 0, (void *)1);
    }
  }
  else
  {
    double v8 = (CGColor *)v6;
  }
LABEL_17:
  return v8;
}

- (CATransform3D)transform3D
{
  CGRect result = (CATransform3D *)self->_layer;
  if (result) {
    return (CATransform3D *)[(CATransform3D *)result transform];
  }
  *(_OWORD *)&retstr->m41 = 0u;
  *(_OWORD *)&retstr->m43 = 0u;
  *(_OWORD *)&retstr->m31 = 0u;
  *(_OWORD *)&retstr->m33 = 0u;
  *(_OWORD *)&retstr->m21 = 0u;
  *(_OWORD *)&retstr->m23 = 0u;
  *(_OWORD *)&retstr->m11 = 0u;
  *(_OWORD *)&retstr->m13 = 0u;
  return result;
}

- (NSString)_identifier
{
  return (NSString *)objc_getAssociatedObject(self, &_UIViewIdentifierAssocObjectKey);
}

- (BOOL)_shouldAppendTextInViewDescription
{
  return 1;
}

- (CGSize)_layoutSizeThatFits:(CGSize)a3 fixedAxes:(unint64_t)a4
{
  -[UIView frameForAlignmentRect:](self, "frameForAlignmentRect:", a4, *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8), a3.width, a3.height);
  double v6 = v5;
  double v8 = v7;
  -[UIView sizeThatFits:](self, "sizeThatFits:", v9, v10);
  -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:", v6, v8, v11, v12);
  double v14 = v13;
  double v16 = v15;
  result.double height = v16;
  result.double width = v14;
  return result;
}

- (CGRect)frameForAlignmentRect:(CGRect)alignmentRect
{
  double height = alignmentRect.size.height;
  double width = alignmentRect.size.width;
  double y = alignmentRect.origin.y;
  double x = alignmentRect.origin.x;
  [(UIView *)self alignmentRectInsets];
  double v9 = -v8;
  double v11 = y - v10;
  double v13 = width - (-v7 - v12);
  double v14 = height - (v9 - v10);
  double v15 = x - v12;
  double v16 = v11;
  result.size.double height = v14;
  result.size.double width = v13;
  result.origin.double y = v16;
  result.origin.double x = v15;
  return result;
}

- (uint64_t)_needsDoubleUpdateConstraintsPassMayHaveChangedFrom:(uint64_t)result
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    if (![(id)result _needsDoubleUpdateConstraintsPass] || (a2 & 1) != 0)
    {
      CGRect result = [v3 _needsDoubleUpdateConstraintsPass];
      if ((result & 1) == 0)
      {
        if (a2)
        {
          [v3 _resetToBeginningOfDoublePass];
          for (CGRect result = [v3 superview]; result; CGRect result = objc_msgSend((id)result, "superview"))
          {
            if ((*(void *)(result + 96) & 0x1000000000000) != 0) {
              break;
            }
            uint64_t v4 = *(void *)(result + 104);
            int v5 = *(_DWORD *)(result + 112);
            *(void *)(result + 96) |= 0x1000000000000uLL;
            *(void *)(result + 104) = v4;
            *(_DWORD *)(result + 112) = v5;
          }
        }
      }
    }
    else
    {
      return -[UIView _informSuperviewChainThatDescendantNeedsDoubleUpdateConstraintsPass]((uint64_t)v3);
    }
  }
  return result;
}

- (void)_resetToBeginningOfDoublePass
{
  *(void *)&self->_viewFlags &= 0xFFF3FFFFFFFFFFFFLL;
}

- (uint64_t)_informSuperviewChainThatDescendantNeedsDoubleUpdateConstraintsPass
{
  if (result)
  {
    for (CGRect result = [(id)result superview]; result; CGRect result = objc_msgSend((id)result, "superview"))
    {
      if ((*(void *)(result + 96) & 0x1800000000000) == 0x800000000000) {
        break;
      }
      uint64_t v1 = *(void *)(result + 104);
      int v2 = *(_DWORD *)(result + 112);
      *(void *)(result + 96) = *(void *)(result + 96) & 0xFFFE7FFFFFFFFFFFLL | 0x800000000000;
      *(void *)(result + 104) = v1;
      *(_DWORD *)(result + 112) = v2;
    }
  }
  return result;
}

- (BOOL)_is_needsLayout
{
  return (*(void *)&self->_viewFlags & 0x40000000000000) == 0;
}

- (UIHoverStyle)hoverStyle
{
  id v2 = -[UIView _hoverStyleStorage](self);
  return (UIHoverStyle *)v2;
}

- (id)_hoverStyleStorage
{
  if (a1)
  {
    a1 = objc_getAssociatedObject(a1, &_UIHoverStyleStorageKey);
    uint64_t v1 = vars8;
  }
  return a1;
}

- (void)_performChangesDeferringAutoresizingMaskConstraintsUpdate:(void *)a1
{
  double v15 = a2;
  if (a1)
  {
    if (-[UIView _usesAutoresizingConstraints]((uint64_t)a1))
    {
      [a1 frame];
      double v4 = v3;
      double v6 = v5;
      double v8 = v7;
      double v10 = v9;
      a1[13] |= 0x4000uLL;
      v15[2]();
      a1[13] &= ~0x4000uLL;
      [a1 frame];
      if ((_UIRectEquivalentToRectWithAccuracy(v4, v6, v8, v10, v11, v12, v13, v14, 0.00000011920929) & 1) == 0) {
        -[UIView _constraints_frameDidChange]((uint64_t)a1);
      }
    }
    else
    {
      v15[2]();
    }
  }
}

+ (void)_performBlockDelayingTriggeringResponderEvents:(void *)a3 forScene:
{
  id v4 = a3;
  double v5 = a2;
  self;
  id v13 = [v4 keyboardSceneDelegate];

  double v6 = [(id)UIApp keyWindow];
  double v7 = [v6 firstResponder];

  [v13 setAutomaticAppearanceInternalEnabled:0];
  self;
  ++__disablePromoteDescendantToFirstResponderCount;
  double v8 = v5[2](v5);

  self;
  if (__disablePromoteDescendantToFirstResponderCount) {
    --__disablePromoteDescendantToFirstResponderCount;
  }
  [v13 setAutomaticAppearanceInternalEnabled:1];
  double v9 = [(id)UIApp keyWindow];
  double v10 = [v9 firstResponder];

  if (!v8
    || __disablePromoteDescendantToFirstResponderCount
    || ([v8 _promoteSelfOrDescendantToFirstResponderIfNecessary],
        [(id)UIApp keyWindow],
        double v11 = objc_claimAutoreleasedReturnValue(),
        [v11 firstResponder],
        double v12 = objc_claimAutoreleasedReturnValue(),
        v12,
        v11,
        v10 == v12))
  {
    if (v7 != v10 && ([v13 _isPreservedRestorableResponder:v10] & 1) == 0) {
      [v13 _reloadInputViewsForResponder:v10];
    }
  }
}

- (void)setNeedsFocusUpdate
{
  id v3 = [(UIView *)self _focusSystem];
  [v3 requestFocusUpdateToEnvironment:self];
}

- (BOOL)_isInTransitionBlock
{
  return __currentViewAnimationState && *(void *)(__currentViewAnimationState + 112) == (void)self;
}

- (void)setLayoutMarginsFollowReadableWidth:(BOOL)a3
{
  BOOL v3 = a3;
  BOOL v5 = [(UIView *)self layoutMarginsFollowReadableWidth];
  if (v3)
  {
    if (v5) {
      return;
    }
    objc_initWeak(&location, self);
    double v6 = [MEMORY[0x1E4F28EB8] defaultCenter];
    uint64_t v7 = UIApp;
    double v8 = [MEMORY[0x1E4F28F08] mainQueue];
    uint64_t v10 = MEMORY[0x1E4F143A8];
    uint64_t v11 = 3221225472;
    double v12 = __46__UIView_setLayoutMarginsFollowReadableWidth___block_invoke;
    id v13 = &unk_1E52DA728;
    objc_copyWeak(&v14, &location);
    double v9 = [v6 addObserverForName:@"UIContentSizeCategoryDidChangeNotification" object:v7 queue:v8 usingBlock:&v10];
    -[UIView _setContentSizeNotificationToken:](self, "_setContentSizeNotificationToken:", v9, v10, v11, v12, v13);

    objc_destroyWeak(&v14);
    objc_destroyWeak(&location);
  }
  else
  {
    if (!v5) {
      return;
    }
    [(UIView *)self _setContentSizeNotificationToken:0];
  }
  if (self) {
    [(UIView *)self _updateInferredLayoutMargins];
  }
}

- (void)_setHiddenForReuse:(BOOL)a3
{
}

- (void)_setHidden:(unint64_t)a3 forReason:
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unint64_t v6 = a3 & 3;
    if (os_variant_has_internal_diagnostics())
    {
      if (a3 >= 4)
      {
        CGRect v17 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
        {
          int v19 = 134217984;
          unint64_t v20 = a3;
          _os_log_fault_impl(&dword_1853B0000, v17, OS_LOG_TYPE_FAULT, "Attempted to hide a view for an invalid _UIViewHiddenReason, or the reason is too large to fit in _viewFlags.internallyHiddenForReason: %ld", (uint8_t *)&v19, 0xCu);
        }
      }
    }
    else if (a3 >= 4)
    {
      uint64_t v18 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C118) + 8);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        int v19 = 134217984;
        unint64_t v20 = a3;
        _os_log_impl(&dword_1853B0000, v18, OS_LOG_TYPE_ERROR, "Attempted to hide a view for an invalid _UIViewHiddenReason, or the reason is too large to fit in _viewFlags.internallyHiddenForReason: %ld", (uint8_t *)&v19, 0xCu);
      }
    }
    uint64_t v7 = (uint64_t *)(a1 + 96);
    uint64_t v8 = *(void *)(a1 + 104);
    if (((~WORD1(v8) & v6) == 0) != a2)
    {
      uint64_t v9 = *v7;
      *((void *)&v10 + 1) = *(unsigned int *)(a1 + 112);
      *(void *)&long long v10 = *(void *)(a1 + 104);
      uint64_t v11 = v8 & 0x30000;
      BOOL v12 = (v8 & 0x30000) != 0;
      unint64_t v13 = (v6 ^ 3) & (v10 >> 16);
      unint64_t v14 = BYTE2(v10) & 3 | a3 & 3;
      if (!a2) {
        unint64_t v14 = v13;
      }
      unint64_t v15 = v8 & 0xFFFFFFFFFFFCFFFFLL | ((v14 & 3) << 16);
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a1 + 112);
      *uint64_t v7 = v9;
      *(void *)(a1 + 104) = v15;
      if (v12 != (v14 != 0))
      {
        if (v11)
        {
          if ((v15 & 0x40000) == 0) {
            -[UIView _backing_setHidden:](a1, 0);
          }
          [*(id *)(a1 + 160) clearHasBeenCommitted];
          uint64_t v16 = *(void *)(a1 + 104);
          *(void *)(a1 + 104) = v16 & 0xFFFFFFFFFFFBFFFFLL;
          if ((v16 & 0x80000) != 0)
          {
            [(id)a1 setNeedsLayout];
            *(void *)(a1 + 104) &= ~0x80000uLL;
          }
          if (qword_1EB25C330 != -1) {
            dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
          }
          if (byte_1EB25C0B5) {
            -[UIView _updateTraitsIfNeededWithBehavior:](a1, 0);
          }
        }
        else if (-[UIView _backing_isHidden](a1))
        {
          *(void *)(a1 + 104) |= 0x40000uLL;
        }
        else
        {
          -[UIView _backing_setHidden:](a1, 1);
        }
      }
    }
  }
}

uint64_t __49__UIView__dispatchMotionEffectsVisitorWithDelta___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend(v3, "_setCountOfMotionEffectsInSubtree:", *(void *)(a1 + 32) + objc_msgSend(v3, "_countOfMotionEffectsInSubtree"));

  return 1;
}

- (void)_setCountOfMotionEffectsInSubtree:(unint64_t)a3
{
  id v4 = [NSNumber numberWithUnsignedInteger:a3];
  objc_setAssociatedObject(self, &_UIViewCountOfMotionEffectsInSubtreeAssocObjectKey, v4, (void *)1);
}

- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer
{
  return 1;
}

- (UILayoutGuide)safeAreaLayoutGuide
{
  v21[4] = *MEMORY[0x1E4F143B8];
  safeAreaLayoutGuide = self->_safeAreaLayoutGuide;
  if (!safeAreaLayoutGuide)
  {
    id v4 = objc_alloc_init(UILayoutGuide);
    BOOL v5 = self->_safeAreaLayoutGuide;
    self->_safeAreaLayoutGuide = v4;

    [(UIView *)self addLayoutGuide:self->_safeAreaLayoutGuide];
    [(UILayoutGuide *)self->_safeAreaLayoutGuide _setLockedToOwningView:1];
    [(UILayoutGuide *)self->_safeAreaLayoutGuide _setAllowsNegativeDimensions:1];
    [(UILayoutGuide *)self->_safeAreaLayoutGuide _setShouldBeArchived:1];
    [(UILayoutGuide *)self->_safeAreaLayoutGuide setIdentifier:@"UIViewSafeAreaLayoutGuide"];
    unint64_t v6 = [(UIView *)self _frameLayoutItem];
    uint64_t v7 = [(UILayoutGuide *)self->_safeAreaLayoutGuide topAnchor];
    uint64_t v8 = [v6 topAnchor];
    uint64_t v9 = [v7 constraintEqualToAnchor:v8 constant:0.0];

    long long v10 = [(UILayoutGuide *)self->_safeAreaLayoutGuide leftAnchor];
    uint64_t v11 = [v6 leftAnchor];
    BOOL v12 = [v10 constraintEqualToAnchor:v11 constant:0.0];

    unint64_t v13 = [v6 bottomAnchor];
    unint64_t v14 = [(UILayoutGuide *)self->_safeAreaLayoutGuide bottomAnchor];
    unint64_t v15 = [v13 constraintEqualToAnchor:v14 constant:0.0];

    uint64_t v16 = [v6 rightAnchor];
    CGRect v17 = [(UILayoutGuide *)self->_safeAreaLayoutGuide rightAnchor];
    uint64_t v18 = [v16 constraintEqualToAnchor:v17 constant:0.0];

    [v9 setIdentifier:@"UIViewSafeAreaLayoutGuide-top"];
    [v12 setIdentifier:@"UIViewSafeAreaLayoutGuide-left"];
    [v15 setIdentifier:@"UIViewSafeAreaLayoutGuide-bottom"];
    [v18 setIdentifier:@"UIViewSafeAreaLayoutGuide-right"];
    v21[0] = v9;
    v21[1] = v12;
    v21[2] = v15;
    v21[3] = v18;
    int v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:v21 count:4];
    [(UILayoutGuide *)self->_safeAreaLayoutGuide _setSystemConstraints:v19];
    -[UIView _updateSafeAreaLayoutGuideConstraintsIfNecessary]((id *)&self->super.super.isa);
    [MEMORY[0x1E4F5B268] activateConstraints:v19];

    safeAreaLayoutGuide = self->_safeAreaLayoutGuide;
  }
  return safeAreaLayoutGuide;
}

- (void)_updateSafeAreaLayoutGuideConstraintsIfNecessary
{
  if (a1 && a1[32])
  {
    [a1 safeAreaInsets];
    double v3 = v2;
    double v5 = v4;
    double v7 = v6;
    double v9 = v8;
    id v14 = [a1[32] _systemConstraints];
    long long v10 = [v14 objectAtIndexedSubscript:0];
    [v10 setConstant:v3];

    uint64_t v11 = [v14 objectAtIndexedSubscript:1];
    [v11 setConstant:v5];

    BOOL v12 = [v14 objectAtIndexedSubscript:2];
    [v12 setConstant:v7];

    unint64_t v13 = [v14 objectAtIndexedSubscript:3];
    [v13 setConstant:v9];
  }
}

- (NSLayoutXAxisAnchor)leftAnchor
{
  double v3 = (objc_class *)objc_opt_class();
  return (NSLayoutXAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewLeftAnchorKey, v3, 1);
}

- (NSLayoutXAxisAnchor)rightAnchor
{
  double v3 = (objc_class *)objc_opt_class();
  return (NSLayoutXAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewRightAnchorKey, v3, 2);
}

- (NSLayoutXAxisAnchor)leadingAnchor
{
  double v3 = (objc_class *)objc_opt_class();
  return (NSLayoutXAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewLeadingAnchorKey, v3, 5);
}

- (NSLayoutYAxisAnchor)centerYAnchor
{
  double v3 = (objc_class *)objc_opt_class();
  return (NSLayoutYAxisAnchor *)-[UIView _createIfNeededAnchorForAssocObjectKey:class:withAttribute:](self, &_UIViewCenterYAnchorKey, v3, 10);
}

- (void)_noteTraitsDidChangeRecursively
{
  _UIViewInvalidateTraitCollectionAndSchedulePropagation((uint64_t)self, 0);
  -[UIView _updateTraitsIfNeededWithBehavior:]((uint64_t)self, 0);
}

- (void)setLargeContentImage:(UIImage *)largeContentImage
{
  double v4 = largeContentImage;
  id v5 = [(UIView *)self _largeContentStoredPropertiesCreatingIfNecessary:1];
  [v5 setLargeContentImage:v4];
}

- (void)setLargeContentTitle:(NSString *)largeContentTitle
{
  double v4 = largeContentTitle;
  id v5 = [(UIView *)self _largeContentStoredPropertiesCreatingIfNecessary:1];
  [v5 setLargeContentTitle:v4];
}

- (void)setShowsLargeContentViewer:(BOOL)showsLargeContentViewer
{
  BOOL v3 = showsLargeContentViewer;
  id v4 = [(UIView *)self _largeContentStoredPropertiesCreatingIfNecessary:1];
  [v4 setShowsLargeContentViewer:v3];
}

- (id)_largeContentStoredPropertiesCreatingIfNecessary:(BOOL)a3
{
  BOOL v3 = a3;
  id v5 = objc_getAssociatedObject(self, &_LargeContentStoredPropertiesKey);
  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = !v3;
  }
  if (!v6)
  {
    id v5 = objc_opt_new();
    [(UIView *)self _setLargeContentStoredProperties:v5];
  }
  return v5;
}

- (void)_setLargeContentStoredProperties:(id)a3
{
}

- (id)_initWithLayer:(id)a3
{
  id v4 = self;
  id v5 = a3;
  [v5 removeFromSuperlayer];
  _UIViewSetLayer((uint64_t)v4, v5);

  [(CALayer *)v4->_layer frame];
  BOOL v6 = -[UIView initWithFrame:](v4, "initWithFrame:");

  if (v6 != v4) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"A layer's self pointer changed across initWithFrame:, which is not a supported behavior for _initWithLayer:" format];
  }
  return v6;
}

- (void)_clearBecomeFirstResponderWhenCapableOnSubtree
{
  if (a1) {
    return (void *)[a1 _makeSubtreePerformSelector:sel__clearBecomeFirstResponderWhenCapable withObject:0];
  }
  return a1;
}

- (BOOL)isFirstResponder
{
  return (*(void *)&self->_viewFlags >> 15) & 1;
}

- (double)_continuousCornerRadius
{
  double v2 = [(UIView *)self layer];
  [v2 cornerRadius];
  double v4 = v3;

  return v4;
}

- (void)_setDisableDictationTouchCancellation:(BOOL)a3
{
  id v4 = [NSNumber numberWithBool:a3];
  objc_setAssociatedObject(self, &_sDisableDictationTouchCancellation, v4, (void *)1);
}

- (id)_velocityForKey:(id)a3
{
  return -[UIView _velocityForKey:target:](self, (uint64_t)a3, 0);
}

+ (id)_currentAnimationAttributes
{
  if (__currentViewAnimationState)
  {
    double v2 = objc_alloc_init(_UIViewAnimationAttributes);
    double v3 = v2;
    uint64_t v4 = __currentViewAnimationState;
    v2->_duration = *(double *)(__currentViewAnimationState + 40);
    v2->_deladouble y = *(double *)(v4 + 48);
    uint64_t v5 = (*(void *)(v4 + 88) << 16) | (2 * *(unsigned __int8 *)(v4 + 234));
    if (*(float *)(v4 + 96) == 3.4028e38) {
      v5 |= 8uLL;
    }
    int v6 = *(char *)(v4 + 172);
    if (v6 < 0) {
      v5 |= 0x2000uLL;
    }
    char v7 = 2 * v6;
    int v8 = (v6 >> 4) & 1;
    double v9 = *(double *)(v4 + 56);
    if (v9 == 0.0) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = ((uint64_t)(240.0 / round(1.0 / v9)) << 24) - 0x1000000;
    }
    v2->_options = v5 | v7 & 0x14 | v8 | (unint64_t)v10;
    uint64_t v11 = *(void *)(v4 + 64);
    v2->_preferredFrameRateRange.float preferred = *(float *)(v4 + 72);
    *(void *)&v2->_preferredFrameRateRange.float minimum = v11;
    v2->_updateReason = *(_DWORD *)(v4 + 76);
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    uint64_t v13 = __currentViewAnimationState;
    if (isKindOfClass)
    {
      v3->_springDamping = *(double *)(__currentViewAnimationState + 296);
      double v14 = *(double *)(v13 + 304);
      v3->_hasSpringAttributes = 1;
      v3->_springVelocitdouble y = v14;
      v3->_springMass = *(double *)(v13 + 280);
      v3->_springStiffness = *(double *)(v13 + 288);
    }
    unint64_t v15 = [*(id *)(v13 + 192) _basicAnimationForView:0 withKeyPath:0];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      v3->_hasSpringAttributes = 1;
      id v16 = v15;
      [v16 damping];
      v3->_springDamping = v17;
      [v16 initialVelocity];
      v3->_springVelocitdouble y = v18;
      [v16 mass];
      v3->_springMass = v19;
      [v16 stiffness];
      double v21 = v20;

      v3->_springStiffness = v21;
    }
  }
  else
  {
    double v3 = 0;
  }
  return v3;
}

+ (void)_animateByRetargetingAnimations:(id)a3 completion:(id)a4
{
}

- (BOOL)_monitorsView:(id)a3
{
  return -[UIView _containsView:]((uint64_t)self, (uint64_t)a3);
}

- (void)removeInteraction:(id)interaction
{
  id v5 = interaction;
  if (!v5)
  {
    int v8 = [MEMORY[0x1E4F28B00] currentHandler];
    [v8 handleFailureInMethod:a2, self, @"UIView.m", 19342, @"Invalid parameter not satisfying: %@", @"interaction" object file lineNumber description];

    id v5 = 0;
  }
  if ((*((unsigned char *)&self->_viewFlags + 20) & 0x40) != 0)
  {
    id v9 = v5;
    int v6 = objc_getAssociatedObject(self, &_UIViewInteractionsKey);
    uint64_t v7 = [v6 indexOfObjectIdenticalTo:v9];
    if (v7 != 0x7FFFFFFFFFFFFFFFLL)
    {
      [v6 removeObjectAtIndex:v7];
      _setInteractionView(v9, 0);
    }

    id v5 = v9;
  }
}

- (id)_containingScrollView
{
  double v2 = [(UIView *)self superview];
  double v3 = __scrollViewAncestorOfView(v2, 1);

  return v3;
}

- (double)_touchSloppinessFactor
{
  double v2 = [(UIView *)self window];
  double v3 = v2;
  if (v2)
  {
    [v2 _touchSloppinessFactor];
    double v5 = v4;
  }
  else
  {
    double v5 = 1.0;
  }

  return v5;
}

- (BOOL)_shouldApplyExclusiveTouch
{
  if ([(UIView *)self isExclusiveTouch]) {
    return 1;
  }
  return [(UIView *)self _isInExclusiveTouchSubviewTree];
}

- (BOOL)isExclusiveTouch
{
  return (*(void *)&self->_viewFlags >> 30) & 1;
}

- (BOOL)_isInExclusiveTouchSubviewTree
{
  if (self)
  {
    double v2 = self;
    while (![(UIView *)v2 _appliesExclusiveTouchToSubviewTree]
         || ![(UIView *)v2 isExclusiveTouch])
    {
      self = (UIView *)[(UIView *)v2 superview];
      double v2 = self;
      if (!self) {
        return (char)self;
      }
    }
    LOBYTE(self) = 1;
  }
  return (char)self;
}

- (BOOL)_appliesExclusiveTouchToSubviewTree
{
  return 0;
}

- (void)_constraints_subviewWillChangeSuperview:(id)a3
{
  -[UIView _invalidateAutoresizingConstraints]((uint64_t)a3);
  if ((dyld_program_sdk_at_least() & 1) == 0
    && [a3 _preWhitetailUsesAutoresizingConstraints]
    && [a3 _hostsLayoutEngine]
    && -[UIView __viewDelegate]((id *)a3))
  {
    [a3 _setNeedsUpdateConstraintsNeedingLayout:0];
  }
}

- (BOOL)_isHiddenForReuse
{
  if (self) {
    return (*((void *)&self->_viewFlags + 1) >> 16) & 1;
  }
  return (char)self;
}

- (void)setSize:(CGSize)a3
{
  double height = a3.height;
  double width = a3.width;
  [(UIView *)self frame];
  double v8 = v7;
  double v10 = v9;
  if (v11 != width || v6 != height) {
    [(UIView *)self setNeedsDisplay];
  }
  -[UIView setFrame:](self, "setFrame:", v8, v10, width, height);
}

- (BOOL)isEnabled
{
  return (*(void *)&self->_viewFlags & 2) == 0;
}

+ (void)_animateUsingSpringWithTension:(double)a3 friction:(double)a4 interactive:(BOOL)a5 animations:(id)a6 completion:(id)a7
{
}

- (BOOL)_allowAssistanceInSubtree
{
  return 1;
}

- (void)setEdgesPreservingSuperviewLayoutMargins:(unint64_t)a3
{
  p_uint64_t viewFlags = &self->_viewFlags;
  unint64_t v4 = *((void *)&self->_viewFlags + 1);
  if ((((v4 >> 53) ^ a3) & 0xF) != 0)
  {
    uint64_t v5 = *(void *)p_viewFlags;
    *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4);
    *(void *)p_uint64_t viewFlags = v5;
    *((void *)&self->_viewFlags + 1) = v4 & 0xFE1FFFFFFFFFFFFFLL | ((a3 & 0xF) << 53);
    [(UIView *)self _updateInferredLayoutMargins];
  }
}

- (void)setEdgesInsettingLayoutMarginsFromSafeArea:(unint64_t)a3
{
  p_uint64_t viewFlags = &self->_viewFlags;
  unint64_t v4 = *((void *)&self->_viewFlags + 1);
  if ((((v4 >> 57) ^ a3) & 0xF) != 0)
  {
    uint64_t v5 = *(void *)p_viewFlags;
    *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4);
    *(void *)p_uint64_t viewFlags = v5;
    *((void *)&self->_viewFlags + 1) = v4 & 0xE1FFFFFFFFFFFFFFLL | ((a3 & 0xF) << 57);
    [(UIView *)self _updateInferredLayoutMargins];
  }
}

+ (void)_disableAnimationTracking:(id)a3 clearTrackedAnimations:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (!v4)
  {
    [(id)qword_1EB25C0E8 removeObjectForKey:v5];
    if (!v5) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  double v6 = [(id)qword_1EB25C0E8 objectForKey:v5];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        [*(id *)(*((void *)&v13 + 1) + 8 * i) _removeAnimationStateFromTrackingMap:0];
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }
  if (qword_1EB25C0E8) {
    [(id)qword_1EB25C0E8 removeObjectForKey:v5];
  }

  if (v5)
  {
LABEL_14:
    if ([(id)qword_1EB25C0E0 isEqual:v5])
    {
      double v11 = (void *)qword_1EB25C0E0;
      qword_1EB25C0E0 = 0;
    }
  }
LABEL_16:
  if (![(id)qword_1EB25C0E8 count])
  {
    BOOL v12 = (void *)qword_1EB25C0E8;
    qword_1EB25C0E8 = 0;
  }
}

+ (void)_disableAnimationTracking:(id)a3
{
}

+ (void)_finishAnimationTracking
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v2 = (id)qword_1EB25C0E0;
  int v3 = byte_1EB25C09A;
  BOOL v4 = (void *)qword_1EB25C0E0;
  qword_1EB25C0E0 = 0;

  byte_1EB25C09A = 0;
  if (v3 == 1 && v2 != 0)
  {
    [(id)qword_1EB25C0E8 objectForKeyedSubscript:v2];
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v12;
      while (2)
      {
        uint64_t v10 = 0;
        do
        {
          if (*(void *)v12 != v9) {
            objc_enumerationMutation(v6);
          }
          if (objc_msgSend(*(id *)(*(void *)(*((void *)&v11 + 1) + 8 * v10) + 176), "count", (void)v11))
          {

            goto LABEL_15;
          }
          ++v10;
        }
        while (v8 != v10);
        uint64_t v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }

    +[UIView _disableAnimationTracking:v2];
LABEL_15:
  }
}

+ (id)_startAnimationTracking
{
  byte_1EB25C09A = 1;
  return (id)[a1 _enableAnimationTracking];
}

+ (id)_enableAnimationTracking
{
  return (id)[a1 _enableAnimationTracking:0];
}

+ (id)_enableAnimationTracking:(BOOL)a3
{
  if (a3)
  {
    id v3 = [MEMORY[0x1E4F29128] UUID];
  }
  else
  {
    if (qword_1EB25C0E0)
    {
      id v3 = (id)qword_1EB25C0E0;
      goto LABEL_9;
    }
    id v3 = [MEMORY[0x1E4F29128] UUID];
    objc_storeStrong((id *)&qword_1EB25C0E0, v3);
  }
  BOOL v4 = (void *)qword_1EB25C0E8;
  if (!qword_1EB25C0E8)
  {
    uint64_t v5 = objc_opt_new();
    id v6 = (void *)qword_1EB25C0E8;
    qword_1EB25C0E8 = v5;

    BOOL v4 = (void *)qword_1EB25C0E8;
  }
  uint64_t v7 = [MEMORY[0x1E4F1CA48] array];
  [v4 setObject:v7 forKey:v3];

LABEL_9:
  return v3;
}

+ (void)mapTrackedAnimations:(void *)a3 withBlock:
{
  id v4 = a3;
  id v5 = a2;
  self;
  mapTrackedAnimations((uint64_t)v5, v4);
}

- (id)nsli_constraintWithAnchor:(id)a3 relatedBy:(int64_t)a4 toAnchor:(id)a5 withSystemSpacingMultipliedBy:(double)a6
{
  if ([a3 _anchorType] == 2 && objc_msgSend(a5, "_anchorType") == 2)
  {
    return +[_UISystemBaselineConstraint constraintWithAnchor:a3 relatedBy:a4 toAnchor:a5 withSystemSpacingMultipliedBy:a6];
  }
  else
  {
    long long v11 = (void *)MEMORY[0x1E4F5B268];
    return (id)[v11 constraintWithAnchor:a3 relatedBy:a4 toAnchor:a5 multiplier:1.0 constant:a6 * 8.0];
  }
}

- (double)_directionalReadableContentInsets
{
  if (!a1) {
    return 0.0;
  }
  objc_msgSend(a1, "directionalLayoutMargins", _UIViewHorizontalReadableContentInsetsForView(a1));
  return result;
}

- (_UIViewInternalDraggingSourceDelegate)_draggingSourceDelegate
{
  id v2 = objc_getAssociatedObject(self, &_UIViewDraggingSourceDelegateStorageKey);
  id v3 = [v2 object];

  return (_UIViewInternalDraggingSourceDelegate *)v3;
}

- (UIKeyboardSceneDelegate)keyboardSceneDelegate
{
  id v2 = [(UIView *)self window];
  id v3 = [v2 windowScene];
  id v4 = [v3 keyboardSceneDelegate];

  return (UIKeyboardSceneDelegate *)v4;
}

+ (void)_setAlongsideAnimations:(id)a3 toRunByEndOfBlock:(id)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  id v8 = a3;
  uint64_t v9 = (void (**)(void))a4;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 0;
  uint64_t v11 = MEMORY[0x1E4F143A8];
  uint64_t v12 = 3221225472;
  long long v13 = __72__UIView_Animation___setAlongsideAnimations_toRunByEndOfBlock_animated___block_invoke;
  long long v14 = &unk_1E52DA288;
  uint64_t v10 = (void (**)(void))v8;
  id v15 = v10;
  uint64_t v16 = &v17;
  [a1 _setAlongsideAnimations:&v11];
  v9[2](v9);
  if (!*((unsigned char *)v18 + 24))
  {
    if (dyld_program_sdk_at_least()
      && +[UIViewPropertyAnimator _trackingAnimationsCurrentlyEnabled](UIViewPropertyAnimator, "_trackingAnimationsCurrentlyEnabled", v11, v12, v13, v14)&& +[UIView areAnimationsEnabled]&& v5)
    {
      +[UIView animateWithDuration:&__block_literal_global_2562 animations:0.2];
    }
    else
    {
      v10[2](v10);
      +[UIView _setAlongsideAnimations:0];
    }
  }

  _Block_object_dispose(&v17, 8);
}

+ (void)_setAlongsideAnimations:(id)a3
{
  id v3 = _Block_copy(a3);
  id v4 = (void *)qword_1EB25C0F0;
  qword_1EB25C0F0 = (uint64_t)v3;
}

void __26__UIView_addMotionEffect___block_invoke()
{
  v0 = [(_UIViewVisitor *)[_UIMotionEffectsVisitor alloc] initWithTraversalDirection:1];
  +[UIView _addHierarchyTrackingVisitor:v0];
}

- (void)_accessibilitySetInterfaceStyleIntent:(unint64_t)a3
{
  if (_UIViewInstallAccessibilityInterfaceStyleIntentVisitor_onceToken != -1) {
    dispatch_once(&_UIViewInstallAccessibilityInterfaceStyleIntentVisitor_onceToken, &__block_literal_global_3732);
  }
  unint64_t v5 = *((unsigned int *)&self->_viewFlags + 4);
  if (((v5 >> 24) & 3) != a3)
  {
    uint64_t v6 = *((void *)&self->_viewFlags + 1);
    *(void *)&self->_uint64_t viewFlags = self->_viewFlags;
    *((void *)&self->_viewFlags + 1) = v6;
    *((_DWORD *)&self->_viewFlags + 4) = v5 & 0xFCFFFFFF | ((a3 & 3) << 24);
    uint64_t v7 = [(_UIViewVisitor *)[_UIAccessibilityInterfaceStyleVisitor alloc] initWithTraversalDirection:2];
    [(UIView *)self _receiveVisitor:v7];
  }
}

+ (void)_addHierarchyTrackingVisitor:(id)a3
{
}

- (id)_accessibilityHigherContrastTintColorForColor:(id)a3
{
  id v4 = a3;
  unint64_t v5 = -[UIView __accessibilityUndimmedTintColorHighContrastVariantStorageKey](self);
  if (v5 == &UIAccessibilityDarkOnLightToken)
  {
    id v6 = +[UIColor _accessibilityDarkenedColorForColor:v4];
  }
  else if (v5 == &UIAccessibilityLightOnDarkToken)
  {
    id v6 = +[UIColor _accessibilityLightenedColorForColor:v4];
  }
  else
  {
    id v6 = v4;
  }
  uint64_t v7 = v6;

  return v7;
}

- (void)_removeGeometryChangeObserver:(void *)a1
{
  id v3 = a2;
  if (a1 && (a1[13] & 0x8000000000000000) != 0)
  {
    kedouble y = v3;
    objc_getAssociatedObject(a1, &_UIGeometryObserversKey);
    id v4 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
    unint64_t v5 = [a1 superview];
    -[UIView _removeGeometryChangeObserver:](v5, key);

    uint64_t v6 = (uint64_t)NSMapGet(v4, key);
    if (v6 < 2) {
      NSMapRemove(v4, key);
    }
    else {
      NSMapInsert(v4, key, (const void *)(v6 - 1));
    }
    if (![(NSMapTable *)v4 count])
    {
      objc_setAssociatedObject(a1, &_UIGeometryObserversKey, 0, (void *)1);
      a1[13] &= ~0x8000000000000000;
    }

    id v3 = key;
  }
}

- (id)_velocityForKey:(uint64_t)a3 target:
{
  if (a1)
  {
    a1 = objc_msgSend(a1, "__swift_velocityForKey:target:", a2, a3);
    uint64_t v3 = vars8;
  }
  return a1;
}

- (void)_setAllowsHighContrastForBackgroundColor:(BOOL)a3
{
  uint64_t v3 = *(void *)((char *)&self->_viewFlags + 20);
  if (((((v3 & 0x80000) == 0) ^ a3) & 1) == 0)
  {
    uint64_t v5 = 0x80000;
    if (!a3) {
      uint64_t v5 = 0;
    }
    *(void *)((char *)&self->_viewFlags + 20) = v3 & 0xFFFFFFFFFFF7FFFFLL | v5;
    id v6 = [(UIView *)self _backgroundColor];
    [(UIView *)self _setBackgroundColor:v6];
  }
}

- (CGSize)size
{
  [(UIView *)self frame];
  double v3 = v2;
  double v5 = v4;
  result.double height = v5;
  result.double width = v3;
  return result;
}

- (void).cxx_destruct
{
  objc_storeStrong((id *)&self->__alignmentRectOriginCache, 0);
  objc_storeStrong((id *)&self->__lastNotifiedTraitCollection, 0);
  objc_storeStrong((id *)&self->__writingToolsCoordinator, 0);
  objc_storeStrong((id *)&self->_readableContentGuide, 0);
  objc_storeStrong((id *)&self->_keyboardLayoutGuide, 0);
  objc_storeStrong((id *)&self->_safeAreaLayoutGuide, 0);
  objc_storeStrong((id *)&self->_internalConstraints, 0);
  objc_storeStrong((id *)&self->_stashedLayoutVariableObservations, 0);
  objc_storeStrong((id *)&self->_layoutEngine, 0);
  objc_storeStrong((id *)&self->_layoutMarginsGuide, 0);
  objc_storeStrong((id *)&self->_boundsHeightVariable, 0);
  objc_storeStrong((id *)&self->_boundsWidthVariable, 0);
  objc_storeStrong((id *)&self->_minYVariable, 0);
  objc_storeStrong((id *)&self->_minXVariable, 0);
  objc_storeStrong((id *)&self->_viewBackingAux, 0);
  objc_storeStrong((id *)&self->_gestureRecognizers, 0);
  objc_storeStrong((id *)&self->_subviewCache, 0);
  objc_storeStrong((id *)&self->_layerRetained, 0);
  objc_storeStrong((id *)&self->_traitChangeRegistry, 0);
  objc_storeStrong(&self->_swiftAnimationInfo, 0);
  objc_storeStrong((id *)&self->_cachedTraitCollection, 0);
  objc_storeStrong((id *)&self->_constraintsExceptingSubviewAutoresizingConstraints, 0);
}

- (void)_objc_initiateDealloc
{
  *(void *)&self->_viewFlags |= 0x1000uLL;
  if (pthread_main_np())
  {
    [(UIView *)self dealloc];
  }
  else
  {
    if (!self->_layerRetained) {
      self->_layer = 0;
    }
    _UIDispatchDeallocToMainThread(self);
  }
}

- (UIKBRenderConfig)_inheritedRenderConfig
{
  double v3 = [(UIView *)self keyboardSceneDelegate];
  double v4 = [v3 restorableRenderConfig];

  if (v4)
  {
    double v5 = [v3 restorableRenderConfig];
  }
  else
  {
    id v6 = [(UIView *)self superview];

    if (v6)
    {
      uint64_t v7 = [(UIView *)self superview];
      double v5 = [v7 _inheritedRenderConfig];
    }
    else
    {
      id v8 = +[UIKeyboardImpl activeInstance];
      uint64_t v7 = v8;
      if (v8)
      {
        uint64_t v9 = [v8 textInputTraits];
        uint64_t v10 = [v9 keyboardAppearance];

        uint64_t v11 = [v7 delegateAsResponder];
        uint64_t v12 = +[UITextInputTraits traitEnvironmentFromTraits:v11];

        if (!v12) {
          uint64_t v12 = self;
        }
        long long v13 = [v7 delegateAsResponder];
        char v14 = [v13 _isDisplayingWritingToolsSessionInUCB];

        if (v14) {
          int64_t v15 = 13;
        }
        else {
          int64_t v15 = +[UITextInputTraits configuredAppearanceForAppearance:v10 withTraitEnvironment:v12];
        }
        uint64_t v16 = +[UIKeyboardInputModeController sharedInputModeController];
        uint64_t v17 = [v16 currentInputMode];
        double v5 = +[UIKBRenderConfig configForAppearance:v15 inputMode:v17 traitEnvironment:v12];
      }
      else
      {
        uint64_t v12 = [(UIView *)self traitCollection];
        if ([(UIView *)v12 userInterfaceStyle] == 2) {
          +[UIKBRenderConfig darkConfig];
        }
        else {
        double v5 = +[UIKBRenderConfig defaultConfig];
        }
      }
    }
  }

  return (UIKBRenderConfig *)v5;
}

- (void)setOverrideUserInterfaceStyle:(UIUserInterfaceStyle)overrideUserInterfaceStyle
{
  if (overrideUserInterfaceStyle)
  {
    id v4 = [(UIView *)self traitOverrides];
    [v4 setUserInterfaceStyle:overrideUserInterfaceStyle];
  }
  else
  {
    if ((*((_DWORD *)&self->_viewFlags + 4) & 0x100) == 0) {
      return;
    }
    objc_getAssociatedObject(self, &_UIViewTraitOverridesKey);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    [v4 _removeTraitToken:0x1ED3F5A48];
  }
}

- (void)_setRenderConfig:(id)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  double v5 = [(UIView *)self subviews];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        [*(id *)(*((void *)&v10 + 1) + 8 * v9++) _setRenderConfig:v4];
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
}

- (unint64_t)_clipCorners
{
  return [(UIView *)self _clipCornersOfView:0];
}

- (unint64_t)_clipCornersOfView:(id)a3
{
  id v4 = a3;
  double v5 = [(UIView *)self superview];
  uint64_t v6 = v5;
  if (v4)
  {
    if (v5)
    {
      uint64_t v7 = [(UIView *)self superview];
      unint64_t v8 = [v7 _clipCornersOfView:v4];
    }
    else
    {
      unint64_t v8 = -1;
    }
  }
  else
  {

    if (!v6)
    {
      unint64_t v8 = -1;
      goto LABEL_13;
    }
    [(UIView *)self frame];
    double MaxY = CGRectGetMaxY(v17);
    long long v10 = [(UIView *)self superview];
    [v10 bounds];
    double v11 = CGRectGetMaxY(v18);

    if (MaxY == v11) {
      uint64_t v12 = 12;
    }
    else {
      uint64_t v12 = 0;
    }
    [(UIView *)self frame];
    double MinY = CGRectGetMinY(v19);
    char v14 = [(UIView *)self superview];
    [v14 bounds];
    double v15 = CGRectGetMinY(v20);

    if (MinY == v15) {
      v12 |= 3uLL;
    }
    uint64_t v6 = [(UIView *)self superview];
    unint64_t v8 = [v6 _clipCornersOfView:0] & v12;
  }

LABEL_13:
  return v8;
}

- (BOOL)needsDisplay
{
  return [(CALayer *)self->_layer needsDisplay];
}

- (BOOL)containsView:(id)a3
{
  return -[UIView _containsView:]((uint64_t)self, (uint64_t)a3);
}

- (CGVector)_scaleFromLayerTransforms
{
  [(UIView *)self bounds];
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v11 = [(UIView *)self window];
  uint64_t v12 = [v11 screen];

  if (v12)
  {
    long long v13 = [v12 coordinateSpace];
    char v14 = [(UIView *)self coordinateSpace];
    objc_msgSend(v13, "convertRect:fromCoordinateSpace:", v14, v4, v6, v8, v10);
    double v16 = v15;
    double v18 = v17;

    if (v16 == 0.0 || v8 == 0.0) {
      double v20 = 1.0;
    }
    else {
      double v20 = v16 / v8;
    }
    if (v18 == 0.0 || v10 == 0.0) {
      double v22 = 1.0;
    }
    else {
      double v22 = v18 / v10;
    }
  }
  else
  {
    double v22 = 1.0;
    double v20 = 1.0;
  }

  double v23 = v20;
  double v24 = v22;
  result.ddouble y = v24;
  result.ddouble x = v23;
  return result;
}

+ (void)_addOrPerformCompletion:(id)a3
{
  double v4 = (void (**)(id, uint64_t))a3;
  if ((objc_msgSend(a1, "_addCompletion:") & 1) == 0) {
    v4[2](v4, 1);
  }
}

- (void)_setFrameIgnoringLayerTransform:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  memset(&v17, 0, sizeof(v17));
  layer = self->_layer;
  if (layer) {
    [(CALayer *)layer transform];
  }
  else {
    memset(&v17, 0, sizeof(v17));
  }
  CATransform3D v16 = v17;
  if (CATransform3DIsIdentity(&v16))
  {
    -[UIView setFrame:](self, "setFrame:", x, y, width, height);
  }
  else
  {
    [(CALayer *)self->_layer anchorPoint];
    double v10 = v9;
    double v12 = v11;
    v18.origin.double x = x;
    v18.origin.double y = y;
    v18.size.double width = width;
    v18.size.double height = height;
    double MinX = CGRectGetMinX(v18);
    v19.origin.double x = x;
    v19.origin.double y = y;
    v19.size.double width = width;
    v19.size.double height = height;
    double v14 = MinX + v10 * CGRectGetWidth(v19);
    v20.origin.double x = x;
    v20.origin.double y = y;
    v20.size.double width = width;
    v20.size.double height = height;
    double MinY = CGRectGetMinY(v20);
    v21.origin.double x = x;
    v21.origin.double y = y;
    v21.size.double width = width;
    v21.size.double height = height;
    -[UIView setCenter:](self, "setCenter:", v14, MinY + v12 * CGRectGetHeight(v21));
    [(UIView *)self bounds];
    -[UIView setBounds:](self, "setBounds:");
  }
}

- (id)_rootInputWindowController
{
  double v3 = [(UIView *)self window];
  double v4 = [v3 rootViewController];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v5 = [(UIView *)self window];
    double v6 = [v5 rootViewController];
  }
  else
  {
    double v6 = 0;
  }

  return v6;
}

- (id)_hitTestWithContext:(id)a3
{
  return 0;
}

+ (void)_animateUsingDefaultTimingWithOptions:(unint64_t)a3 animations:(id)a4 completion:(id)a5
{
}

- (void)_setPresentationControllerToNotifyOnLayoutSubviews:(id)a3
{
  *(void *)((char *)&self->_viewFlags + 20) = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFDFFFLL | ((unint64_t)(a3 != 0) << 13);
  +[_UIWeakReference weakReferenceWrappingObject:](_UIWeakReference, "weakReferenceWrappingObject:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_setAssociatedObject(self, &_UIViewPresentationControllerToNotifyOnLayoutSubviews, v4, (void *)1);
}

- (void)_setCanBeParentTraitEnvironment:(BOOL)a3
{
  if (a3) {
    int v3 = 0;
  }
  else {
    int v3 = 0x100000;
  }
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFEFFFFF | v3;
}

- (void)_setDraggingSourceDelegate:(id)a3
{
  id v4 = +[_UIWeakReference weakReferenceWrappingObject:a3];
  objc_setAssociatedObject(self, &_UIViewDraggingSourceDelegateStorageKey, v4, (void *)1);
}

- (CGSize)convertSize:(CGSize)a3 fromView:(id)a4
{
  id v4 = (UIView *)a4;
  double height = a3.height;
  double width = a3.width;
  if (!a4) {
    id v4 = (UIView *)[(UIView *)self window];
  }
  if (v4 && v4 != self)
  {
    layer = v4->_layer;
    double v9 = self->_layer;
    -[CALayer convertPoint:fromLayer:](v9, "convertPoint:fromLayer:", layer, width, height);
    double v11 = v10;
    double v13 = v12;

    double v14 = self->_layer;
    double v15 = v4->_layer;
    double v16 = *MEMORY[0x1E4F1DAD8];
    double v17 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    CGRect v18 = v14;
    -[CALayer convertPoint:fromLayer:](v18, "convertPoint:fromLayer:", v15, v16, v17);
    double v20 = v19;
    double v22 = v21;

    double width = vabdd_f64(v11, v20);
    double height = vabdd_f64(v13, v22);
  }
  double v23 = width;
  double v24 = height;
  result.double height = v24;
  result.double width = v23;
  return result;
}

- (void)_addBoundingPathChangeObserver:(id)a3
{
  id v4 = a3;
  double v5 = objc_getAssociatedObject(self, &_UIBoundingPathChangeObserversKey);
  if (v5)
  {
    double v6 = v5;
    tableCATransform3D a = (NSMapTable *)[v5 copy];

    double v7 = tablea;
  }
  else
  {
    double v7 = [MEMORY[0x1E4F28E10] mapTableWithKeyOptions:517 valueOptions:1282];
  }
  table = v7;
  objc_setAssociatedObject(self, &_UIBoundingPathChangeObserversKey, v7, (void *)1);
  uint64_t v8 = [(NSMapTable *)table count];
  double v9 = (char *)NSMapGet(table, v4);
  NSMapInsert(table, v4, v9 + 1);

  uint64_t v10 = [(NSMapTable *)table count];
  if (!v8 && v10)
  {
    [(UIView *)self _registerForGeometryChanges];
    double v11 = [(UIView *)self window];
    -[UIView _addBoundingPathRotationNotificationsForWindow:](self, v11);
  }
}

- (void)_registerForGeometryChanges
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  uint64_t v4 = *((_DWORD *)&self->_viewFlags + 4) & 0x3C;
  if (has_internal_diagnostics)
  {
    if (v4 == 60)
    {
      double v6 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        int v8 = 138412290;
        double v9 = self;
        _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Attempted to register for geometry changes on a view more times than the maximum supported. View: %@", (uint8_t *)&v8, 0xCu);
      }
    }
  }
  else if (v4 == 60)
  {
    double v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_registerForGeometryChanges___s_category) + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138412290;
      double v9 = self;
      _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "Attempted to register for geometry changes on a view more times than the maximum supported. View: %@", (uint8_t *)&v8, 0xCu);
    }
  }
  if ((~*((_DWORD *)&self->_viewFlags + 4) & 0x3CLL) != 0)
  {
    double v5 = [(UIView *)self superview];
    -[UIView _addGeometryChangeObserver:](v5, self);

    *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFFFFC3 | (4
                                                                                          * (((*((_DWORD *)&self->_viewFlags
                                                                                               + 4) >> 2)
                                                                                            + 1) & 0xF));
  }
}

- (void)_addGeometryChangeObserver:(void *)a1
{
  id v3 = a2;
  if (a1)
  {
    kedouble y = v3;
    if ((a1[13] & 0x8000000000000000) != 0)
    {
      objc_getAssociatedObject(a1, &_UIGeometryObserversKey);
      uint64_t v4 = (NSMapTable *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v4 = [MEMORY[0x1E4F28E10] mapTableWithKeyOptions:517 valueOptions:1282];
      objc_setAssociatedObject(a1, &_UIGeometryObserversKey, v4, (void *)1);
      a1[13] |= 0x8000000000000000;
    }
    double v5 = (char *)NSMapGet(v4, key);
    NSMapInsert(v4, key, v5 + 1);
    double v6 = [a1 superview];
    -[UIView _addGeometryChangeObserver:](v6, key);

    id v3 = key;
  }
}

- (void)_addBoundingPathRotationNotificationsForWindow:(void *)a1
{
  id v3 = a2;
  if (a1 && v3)
  {
    id v13 = v3;
    uint64_t v4 = objc_getAssociatedObject(a1, &_UIBoundingPathWindowRotationObserverKey);

    if (v4)
    {
      double v12 = [MEMORY[0x1E4F28B00] currentHandler];
      [v12 handleFailureInMethod:sel__addBoundingPathRotationNotificationsForWindow_ object:a1 file:@"UIView.m" lineNumber:21341 description:@"Attempted to register for bounding path window rotation notifications while already registered."];
    }
    double v5 = [_UIViewWindowRotationNotificationObserver alloc];
    id v6 = a1;
    if (v5
      && (v14.receiver = v5,
          v14.super_class = (Class)_UIViewWindowRotationNotificationObserver,
          (double v7 = (id *)objc_msgSendSuper2(&v14, sel_init)) != 0))
    {
      int v8 = v7;
      objc_storeWeak(v7 + 1, v6);

      id v9 = v13;
      uint64_t v10 = [MEMORY[0x1E4F28EB8] defaultCenter];
      [v10 addObserver:v8 selector:sel_windowWillAnimateRotation_ name:@"UIWindowWillAnimateRotationNotification" object:v9];
    }
    else
    {

      id v11 = v13;
      int v8 = 0;
    }

    objc_setAssociatedObject(v6, &_UIBoundingPathWindowRotationObserverKey, v8, (void *)1);
    id v3 = v13;
  }
}

- (BOOL)_shouldSkipObservingBoundingPathChangesForScreen:(BOOL)a1
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    unint64_t v5 = [v3 _screenType];
    a1 = v5 != -1 && _UIScreenCornerRadiusForType(v5) == 0.0;
  }

  return a1;
}

- (void)_removeAllAnimations:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v4 = self;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (![(UIView *)self _ignoreRemoveAllAnimations])
  {
    unint64_t v5 = (CALayer *)-[UIView _backing_outermostLayer](v4);
    layer = v4->_layer;
    [(CALayer *)v5 removeAllAnimations];
    if (layer != v5) {
      [(CALayer *)layer removeAllAnimations];
    }
    if (v3)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      double v7 = [(UIView *)v4 _allSubviews];
      uint64_t v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v8)
      {
        uint64_t v9 = v8;
        char v10 = 0;
        uint64_t v11 = *(void *)v16;
        do
        {
          for (uint64_t i = 0; i != v9; ++i)
          {
            if (*(void *)v16 != v11) {
              objc_enumerationMutation(v7);
            }
            id v13 = *(void **)(*((void *)&v15 + 1) + 8 * i);
            [v13 _removeAllAnimations:1];
            if (v10 & 1 | ((__shouldTrackForAnimationRestoration & 1) == 0)) {
              v10 |= __shouldTrackForAnimationRestoration;
            }
            else {
              char v10 = [v13 _wantsAnimationRestoration];
            }
          }
          uint64_t v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v9);

        if (v4 != 0 && (v10 & 1) != 0)
        {
          do
          {
            uint64_t v14 = *(void *)((char *)&v4->_viewFlags + 20);
            if ((v14 & 0x200000000) != 0) {
              break;
            }
            *(void *)((char *)&v4->_viewFlags + 20) = v14 | 0x200000000;
            if ((v14 & 0x400000000) != 0) {
              break;
            }
            uint64_t v4 = (UIView *)[(UIView *)v4 superview];
          }
          while (v4);
        }
      }
      else
      {
      }
    }
  }
}

- (BOOL)_ignoreRemoveAllAnimations
{
  return 0;
}

- (double)_preferredMaxLayoutWidth
{
  if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)
    && [(UIView *)self _needsDoubleUpdateConstraintsPass]
    && (*(void *)&self->_viewFlags & 0x4000000000000) == 0)
  {
    [(UIView *)self alignmentRectForFrame:[(UIView *)self _nsis_compatibleBoundsInEngine:[[(UIView *)self superview] _layoutEngine]]];
    return CGRectGetWidth(*(CGRect *)&v3);
  }
  else if ([(UIView *)self _axesForDerivingIntrinsicContentSizeFromLayoutSize]&& (*(void *)&self->_viewFlags & 0x6000000000000) == 0x2000000000000)
  {
    id AssociatedObject = objc_getAssociatedObject(self, &_UIViewLayoutEngineWidthStorageKey);
    [AssociatedObject doubleValue];
  }
  else
  {
    return 0.0;
  }
  return result;
}

- (int64_t)_pendingHiddenCount
{
  return -[UIView _hiddenManagementCountForKey:bitFlagValue:](self, "_UIViewPendingHiddenCount", (*((void *)&self->_viewFlags + 1) >> 20) & 1);
}

- (id)registerForTraitChanges:(id)a3 withTarget:(id)a4 action:(SEL)a5
{
  id v8 = a4;
  uint64_t v9 = +[UITraitCollection _traitTokensIncludingPlaceholdersForTraits:]((uint64_t)UITraitCollection, a3);
  char v10 = [(UIView *)self _registerForTraitTokenChanges:v9 withTarget:v8 action:a5];

  return v10;
}

- (id)_disabledColor
{
  double v2 = [(UIView *)self _inheritedInteractionTintColor];
  uint64_t v3 = +[UIColor _disabledColorForColor:]((uint64_t)UIColor, v2);

  return v3;
}

- (void)insertSubview:(id)a3 above:(id)a4
{
}

- (void)_invalidateCalculatedSafeAreas
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 116);
    if ((v2 & 0xA0000000000) == 0x20000000000)
    {
      *(void *)(a1 + 116) = v2 | 0x80000000000;
      [(id)a1 setNeedsLayout];
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      uint64_t v3 = objc_msgSend((id)a1, "_allSubviews", 0);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v6 = *(void *)v9;
        do
        {
          uint64_t v7 = 0;
          do
          {
            if (*(void *)v9 != v6) {
              objc_enumerationMutation(v3);
            }
            -[UIView _invalidateCalculatedSafeAreas](*(void *)(*((void *)&v8 + 1) + 8 * v7++));
          }
          while (v5 != v7);
          uint64_t v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
        }
        while (v5);
      }
    }
  }
}

- (BOOL)_isInLayoutSubviews
{
  return self->_layoutSubviewsCount != 0;
}

- (void)setInsetsLayoutMarginsFromSafeArea:(BOOL)insetsLayoutMarginsFromSafeArea
{
  if (insetsLayoutMarginsFromSafeArea) {
    uint64_t v3 = 15;
  }
  else {
    uint64_t v3 = 0;
  }
  [(UIView *)self setEdgesInsettingLayoutMarginsFromSafeArea:v3];
}

- (void)setPreservesSuperviewLayoutMargins:(BOOL)preservesSuperviewLayoutMargins
{
  if (preservesSuperviewLayoutMargins) {
    uint64_t v3 = 15;
  }
  else {
    uint64_t v3 = 0;
  }
  [(UIView *)self setEdgesPreservingSuperviewLayoutMargins:v3];
}

void __54__UIView_FluidTransitions___isOnFluidParallaxDenyList__block_invoke()
{
  _UIKitUserDefaults();
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  if (([v1 BOOLForKey:@"UIForceFluidParallaxEnabled"] & 1) == 0)
  {
    v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
    [v0 BOOLForKey:@"UIForceFluidParallaxEnabled"];
  }
}

- (uint64_t)_areAccessibilityButtonShapesEnabled
{
  if (result)
  {
    id v1 = (void *)result;
    double result = _AXSButtonShapesEnabled();
    if (result) {
      return objc_msgSend((id)objc_msgSend(v1, "_screen"), "_userInterfaceIdiom") != 3;
    }
  }
  return result;
}

- (void)engine:(id)a3 willBreakConstraint:(id)a4 dueToMutuallyExclusiveConstraints:(id)a5
{
  BOOL v8 = [(UIView *)self _isUnsatisfiableConstraintsLoggingSuspended];
  int v9 = dyld_program_sdk_at_least();
  if (v9) {
    p_isCATransform3D a = &self->super.super.isa;
  }
  else {
    p_isCATransform3D a = 0;
  }
  if (v9 && !v8) {
    p_isCATransform3D a = -[UIView _outermostLayoutEngineDelegateView](self);
  }
  if (v8 || p_isa && (p_isa[13] & 0x10) != 0)
  {
    if (!p_isa) {
      p_isCATransform3D a = &self->super.super.isa;
    }
    if (p_isa) {
      objc_msgSend((id)objc_msgSend(p_isa, "_constraintsBrokenWhileUnsatisfiableConstraintsLoggingSuspendedCreateIfNecessary:", 1), "addObject:", a4);
    }
  }
  else
  {
    UIViewAlertForUnsatisfiableConstraints((uint64_t)a4, a5);
  }
  if (kdebug_is_enabled())
  {
    [(NSString *)[(UIView *)self description] UTF8String];
    kdebug_trace_string();
    objc_msgSend((id)objc_msgSend(a4, "description"), "UTF8String");
    kdebug_trace_string();
    kdebug_trace();
  }
}

- (void)_outermostLayoutEngineDelegateView
{
  if (!a1) {
    return 0;
  }
  id v1 = objc_msgSend((id)objc_msgSend(a1, "_layoutEngine"), "delegate");
  if (!objc_msgSend(v1, "__isKindOfUIView")) {
    id v1 = 0;
  }
  uint64_t v2 = (void *)[v1 superview];
  if (v2)
  {
    uint64_t v3 = objc_msgSend((id)objc_msgSend(v2, "_layoutEngine"), "delegate");
    int v4 = objc_msgSend(v3, "__isKindOfUIView");
    if (v3 && v4 != 0)
    {
      do
      {
        id v1 = v3;
        uint64_t v6 = (void *)[v3 superview];
        if (!v6) {
          break;
        }
        uint64_t v3 = objc_msgSend((id)objc_msgSend(v6, "_layoutEngine"), "delegate");
        char v7 = objc_msgSend(v3, "__isKindOfUIView");
        if (!v3) {
          break;
        }
      }
      while ((v7 & 1) != 0);
    }
  }
  return v1;
}

+ (void)_animateUsingDefaultDampedSpringWithDelay:(double)a3 initialSpringVelocity:(double)a4 options:(unint64_t)a5 animations:(id)a6 completion:(id)a7
{
  id v10 = a7;
  id v12 = a6;
  long long v11 = self;
  _UILoadDefaultSpringParameters();
  _durationOfSpringAnimation(*(double *)&_UIViewDefaultSpringMass, *(double *)&_UIViewDefaultSpringStiffness, *(double *)&_UIViewDefaultSpringDamping, a4);
  objc_msgSend(v11, "_animateUsingSpringWithDuration:delay:options:mass:stiffness:damping:initialVelocity:animations:completion:", a5, v12, v10);
}

+ (void)_animateUsingSpringWithDuration:(double)a3 delay:(double)a4 options:(unint64_t)a5 mass:(double)a6 stiffness:(double)a7 damping:(double)a8 initialVelocity:(double)a9 animations:(id)a10 completion:(id)a11
{
  id v19 = a11;
  id v20 = a10;
  double v21 = self;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  void v22[2] = __133__UIView_Internal___animateUsingSpringWithDuration_delay_options_mass_stiffness_damping_initialVelocity_animations_start_completion___block_invoke;
  v22[3] = &__block_descriptor_64_e5_v8__0l;
  *(double *)&v22[4] = a6;
  *(double *)&v22[5] = a7;
  *(double *)&v22[6] = a8;
  *(double *)&v22[7] = a9;
  [v21 _setupAnimationWithDuration:0 delay:a5 view:0 options:v20 factory:0 animations:v22 start:a3 animationStateGenerator:a4 completion:v19];
}

uint64_t __31__UIView_UIViewRTL___enableRTL__block_invoke()
{
  if (_enableRTL_result && ([(id)UIApp _shouldOptOutOfRTL] & 1) == 0) {
    uint64_t result = dyld_program_sdk_at_least();
  }
  else {
    uint64_t result = 0;
  }
  _enableRTL_uint64_t result = result;
  return result;
}

- (void)setAccessibilityIgnoresInvertColors:(BOOL)accessibilityIgnoresInvertColors
{
  if (accessibilityIgnoresInvertColors) {
    int v3 = 0x400000;
  }
  else {
    int v3 = 0;
  }
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFBFFFFF | v3;
}

- (UIView)initWithCoder:(NSCoder *)coder
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  int v4 = coder;
  v116.receiver = self;
  v116.super_class = (Class)UIView;
  uint64_t v5 = [(UIView *)&v116 init];

  if (!v5) {
    goto LABEL_115;
  }
  if (!+[UIWindow shouldRestrictViewsForSplashboard]) {
    goto LABEL_12;
  }
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  uint64_t v6 = +[UIWindow restrictedSplashboardClasses];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v117 objects:buf count:16];
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)v118;
LABEL_5:
  uint64_t v10 = 0;
  while (1)
  {
    if (*(void *)v118 != v9) {
      objc_enumerationMutation(v6);
    }
    NSClassFromString(*(NSString **)(*((void *)&v117 + 1) + 8 * v10));
    if (objc_opt_isKindOfClass()) {
      break;
    }
    if (v8 == ++v10)
    {
      uint64_t v8 = [v6 countByEnumeratingWithState:&v117 objects:buf count:16];
      if (!v8)
      {
LABEL_11:

LABEL_12:
        p_uint64_t viewFlags = &v5->_viewFlags;
        *(void *)&v5->_viewFlags |= 0x4000000uLL;
        if ([(NSCoder *)v4 containsValueForKey:@"UIFrame"])
        {
          [(NSCoder *)v4 decodeCGRectForKey:@"UIFrame"];
          UIViewCommonInitWithFrame(v5, v12, v13, v14, v15);
        }
        else
        {
          [(NSCoder *)v4 decodeCGRectForKey:@"UIBounds"];
          double v17 = v16;
          double v19 = v18;
          double v21 = v20;
          double v23 = v22;
          [(NSCoder *)v4 decodeCGPointForKey:@"UICenter"];
          UIViewCommonInitWithFrame(v5, v24 - v21 * 0.5, v25 - v23 * 0.5, v21, v23);
          if (v4) {
            [(NSCoder *)v4 decodeCGAffineTransformForKey:@"UITransform"];
          }
          else {
            memset(v115, 0, sizeof(v115));
          }
          [(UIView *)v5 setTransform:v115];
          if (v17 != *MEMORY[0x1E4F1DAD8] || v19 != *(double *)(MEMORY[0x1E4F1DAD8] + 8)) {
            -[UIView setBounds:](v5, "setBounds:", v17, v19, v21, v23);
          }
        }
        [(UIView *)v5 setWantsDeepColorDrawing:[(NSCoder *)v4 decodeBoolForKey:@"UIDeepDrawRect"]];
        [(NSCoder *)v4 decodeDirectionalEdgeInsetsForKey:@"UIHitTestDirectionalInsets"];
        -[UIView setHitTestDirectionalInsets:](v5, "setHitTestDirectionalInsets:");
        BOOL v30 = [(UIView *)v5 _tintColorArchivingKey];
        uint64_t v31 = [(NSCoder *)v4 decodeObjectForKey:v30];

        if (v31)
        {
          _UIViewSetInteractionTintColor(v5, v31);
          if (qword_1EB25C338 != -1) {
            dispatch_once(&qword_1EB25C338, &__block_literal_global_3730);
          }
        }
        if ([(UIView *)v5 _shouldDecodeSubviews])
        {
          long long v113 = 0u;
          long long v114 = 0u;
          long long v111 = 0u;
          long long v112 = 0u;
          int v32 = [(NSCoder *)v4 decodeObjectForKey:@"UISubviews"];
          uint64_t v33 = [v32 countByEnumeratingWithState:&v111 objects:v122 count:16];
          if (v33)
          {
            uint64_t v34 = v33;
            uint64_t v35 = *(void *)v112;
            do
            {
              for (uint64_t i = 0; i != v34; ++i)
              {
                if (*(void *)v112 != v35) {
                  objc_enumerationMutation(v32);
                }
                [(UIView *)v5 addSubview:*(void *)(*((void *)&v111 + 1) + 8 * i)];
              }
              uint64_t v34 = [v32 countByEnumeratingWithState:&v111 objects:v122 count:16];
            }
            while (v34);
          }
        }
        [(UIView *)v5 setOpaque:[(NSCoder *)v4 decodeBoolForKey:@"UIOpaque"]];
        [(UIView *)v5 setHidden:[(NSCoder *)v4 decodeBoolForKey:@"UIHidden"]];
        uint64_t v37 = [(NSCoder *)v4 decodeObjectForKey:@"UIBackgroundColor"];
        if (v37) {
          [(UIView *)v5 setBackgroundColor:v37];
        }
        _setTagForView(v5, [(NSCoder *)v4 decodeIntegerForKey:@"UITag"]);
        BOOL v38 = [(NSCoder *)v4 decodeBoolForKey:@"UIUserInteractionDisabled"];
        uint64_t v39 = 2;
        if (!v38) {
          uint64_t v39 = 0;
        }
        *p_uint64_t viewFlags = *p_viewFlags & 0xFFFFFFFFFFFFFFFDLL | v39;
        if ([(NSCoder *)v4 decodeBoolForKey:@"UIFocusInteractionDisabled"]) {
          int v40 = 0x40000;
        }
        else {
          int v40 = 0;
        }
        *((_DWORD *)&v5->_viewFlags + 4) = *((_DWORD *)&v5->_viewFlags + 4) & 0xFFFBFFFF | v40;
        BOOL v41 = [(NSCoder *)v4 decodeBoolForKey:@"UIMultipleTouchEnabled"];
        uint64_t v42 = 0x20000000;
        if (!v41) {
          uint64_t v42 = 0;
        }
        *p_uint64_t viewFlags = *p_viewFlags & 0xFFFFFFFFDFFFFFFFLL | v42;
        BOOL v43 = [(NSCoder *)v4 decodeBoolForKey:@"UIExclusiveTouch"];
        uint64_t v44 = 0x40000000;
        if (!v43) {
          uint64_t v44 = 0;
        }
        *p_uint64_t viewFlags = *p_viewFlags & 0xFFFFFFFFBFFFFFFFLL | v44;
        BOOL v45 = [(NSCoder *)v4 decodeBoolForKey:@"UIAutoresizeSubviews"];
        uint64_t v46 = 0x20000;
        if (v45) {
          uint64_t v46 = 0;
        }
        *p_uint64_t viewFlags = *p_viewFlags & 0xFFFFFFFFFFFDFFFFLL | v46;
        *p_uint64_t viewFlags = *p_viewFlags & 0xFFFFFFFFFF03FFFFLL | (([(NSCoder *)v4 decodeIntegerForKey:@"UIAutoresizingMask"] & 0x3F) << 18);
        BOOL v47 = [(NSCoder *)v4 containsValueForKey:@"UIAlpha"];
        double v48 = 1.0;
        if (v47)
        {
          [(NSCoder *)v4 decodeFloatForKey:@"UIAlpha", 1.0];
          double v48 = v49;
        }
        [(UIView *)v5 setAlpha:v48];
        if ([(NSCoder *)v4 containsValueForKey:@"UIClearsContextBeforeDrawing"]) {
          uint64_t v50 = [(NSCoder *)v4 decodeBoolForKey:@"UIClearsContextBeforeDrawing"];
        }
        else {
          uint64_t v50 = 1;
        }
        [(UIView *)v5 setClearsContextBeforeDrawing:v50];
        [(UIView *)v5 setContentMode:[(NSCoder *)v4 decodeIntegerForKey:@"UIContentMode"]];
        if ([(NSCoder *)v4 containsValueForKey:@"UIContentStretch"])
        {
          [(NSCoder *)v4 decodeCGRectForKey:@"UIContentStretch"];
          layer = v5->_layer;
        }
        else
        {
          layer = v5->_layer;
          double v51 = 0.0;
          double v52 = 0.0;
          double v53 = 1.0;
          double v54 = 1.0;
        }
        -[CALayer setContentsCenter:](layer, "setContentsCenter:", v51, v52, v53, v54);
        [(UIView *)v5 setClipsToBounds:[(NSCoder *)v4 decodeBoolForKey:@"UIClipsToBounds"]];
        if (__invalidatesViewUponCreation) {
          [(UIView *)v5 setNeedsDisplay];
        }
        *p_viewFlags &= ~0x4000000uLL;
        [(UIView *)v5 setTranslatesAutoresizingMaskIntoConstraints:[(NSCoder *)v4 decodeBoolForKey:@"UIViewDoesNotTranslateAutoresizingMaskIntoConstraints"] ^ 1];
        uint64_t v56 = [(NSCoder *)v4 decodeObjectForKey:@"UIViewAutolayoutConstraints"];
        if (v56) {
          [(UIView *)v5 addConstraints:v56];
        }
        if ([(NSCoder *)v4 containsValueForKey:@"UIViewContentHuggingPriority"])
        {
          double v57 = (void *)MEMORY[0x1E4F29238];
          [(NSCoder *)v4 decodeSizeForKey:@"UIViewContentHuggingPriority"];
          double v58 = objc_msgSend(v57, "valueWithSize:");
          objc_setAssociatedObject(v5, &_UIViewToContentHuggingPrioritiesAssociatedStorageKey, v58, (void *)1);
        }
        long long v101 = (void *)v56;
        long long v102 = (void *)v37;
        long long v103 = v31;
        long long v104 = &v5->_viewFlags;
        if ([(NSCoder *)v4 containsValueForKey:@"UIViewContentCompressionResistancePriority"])
        {
          double v59 = (void *)MEMORY[0x1E4F29238];
          [(NSCoder *)v4 decodeSizeForKey:@"UIViewContentCompressionResistancePriority"];
          CGFloat v60 = objc_msgSend(v59, "valueWithSize:");
          objc_setAssociatedObject(v5, &UIViewToContentCompressionResistancePrioritiesAssociatedStorageKey, v60, (void *)1);
        }
        uint64_t v105 = v4;
        [(NSCoder *)v4 decodeObjectForKey:@"UIViewLayoutGuides"];
        long long v107 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v110 = 0u;
        obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v61 = [obj countByEnumeratingWithState:&v107 objects:v121 count:16];
        if (v61)
        {
          uint64_t v62 = v61;
          uint64_t v63 = *(void *)v108;
          do
          {
            for (uint64_t j = 0; j != v62; ++j)
            {
              if (*(void *)v108 != v63) {
                objc_enumerationMutation(obj);
              }
              long long v65 = *(void **)(*((void *)&v107 + 1) + 8 * j);
              int has_internal_diagnostics = os_variant_has_internal_diagnostics();
              uint64_t v67 = [v65 owningView];
              long long v68 = (void *)v67;
              if (has_internal_diagnostics)
              {
                if ((UIView *)v67 == v5)
                {
LABEL_77:

                  goto LABEL_78;
                }
                uint64_t v71 = [v65 owningView];

                if (v71)
                {
                  double v72 = __UIFaultDebugAssertLog();
                  if (os_log_type_enabled(v72, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)CGAffineTransform buf = 138412546;
                    unint64_t v124 = (unint64_t)v65;
                    __int16 v125 = 2112;
                    v126 = v5;
                    _os_log_fault_impl(&dword_1853B0000, v72, OS_LOG_TYPE_FAULT, "layoutGuide's owning view incorrectly decoded, layoutGuide = %@, self = %@", buf, 0x16u);
                  }
                }
              }
              else
              {
                if ((UIView *)v67 == v5) {
                  goto LABEL_77;
                }
                CATransform3D v69 = [v65 owningView];

                if (v69)
                {
                  CATransform3D v70 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C148) + 8);
                  if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)CGAffineTransform buf = 138412546;
                    unint64_t v124 = (unint64_t)v65;
                    __int16 v125 = 2112;
                    v126 = v5;
                    _os_log_impl(&dword_1853B0000, v70, OS_LOG_TYPE_ERROR, "layoutGuide's owning view incorrectly decoded, layoutGuide = %@, self = %@", buf, 0x16u);
                  }
                }
              }
LABEL_78:
              uint64_t v73 = [v65 owningView];

              if (v73 == v5) {
                -[UIView _finishDecodingLayoutGuideConnections:]((id *)&v5->super.super.isa, v65);
              }
            }
            uint64_t v62 = [obj countByEnumeratingWithState:&v107 objects:v121 count:16];
          }
          while (v62);
        }

        int v4 = v105;
        double v74 = &v5->_viewFlags;
        if ([(NSCoder *)v105 containsValueForKey:@"UIViewLayoutMargins"])
        {
          [(NSCoder *)v105 decodeUIEdgeInsetsForKey:@"UIViewLayoutMargins"];
          double v76 = v75;
          double v78 = v77;
          double v80 = v79;
          double v82 = v81;
          if (dyld_program_sdk_at_least())
          {
            -[UIView _setRawLayoutMargins:](v5, "_setRawLayoutMargins:", v76, v78, v80, v82);
          }
          else
          {
            v5->_rawLayoutMargins.double top = v76;
            v5->_rawLayoutMargins.double left = v78;
            v5->_rawLayoutMargins.double bottom = v80;
            v5->_rawLayoutMargins.double right = v82;
          }
        }
        if ([(NSCoder *)v105 containsValueForKey:@"UIViewLayoutMarginsFollowReadableWidth"])
        {
          [(UIView *)v5 setLayoutMarginsFollowReadableWidth:[(NSCoder *)v105 decodeBoolForKey:@"UIViewLayoutMarginsFollowReadableWidth"]];
        }
        if ([(NSCoder *)v105 containsValueForKey:@"UIViewPreservesSpecificSuperviewMargins"])
        {
          char v83 = [(NSCoder *)v105 decodeIntegerForKey:@"UIViewPreservesSpecificSuperviewMargins"];
          uint64_t v84 = 0;
          int v85 = 0;
          int v86 = *((_DWORD *)&v5->_viewFlags + 4);
          uint64_t v87 = *(void *)v104;
          unint64_t v88 = (unint64_t)(v83 & 0xF) << 53;
          unint64_t v89 = *((void *)&v5->_viewFlags + 1) & 0xFE1FFFFFFFFFFFFFLL;
          goto LABEL_95;
        }
        if ([(NSCoder *)v105 containsValueForKey:@"UIViewPreservesSuperviewMargins"])
        {
          BOOL v90 = [(NSCoder *)v105 decodeBoolForKey:@"UIViewPreservesSuperviewMargins"];
          uint64_t v87 = 0;
          int v86 = 0;
          if (v90) {
            unint64_t v89 = 0x1E0000000000000;
          }
          else {
            unint64_t v89 = 0;
          }
          int v85 = *((_DWORD *)&v5->_viewFlags + 4);
          uint64_t v84 = *(void *)v104;
          unint64_t v88 = *((void *)&v5->_viewFlags + 1) & 0xFE1FFFFFFFFFFFFFLL;
LABEL_95:
          *(void *)long long v104 = v84 | v87;
          *((void *)&v5->_viewFlags + 1) = v88 | v89;
          *((_DWORD *)&v5->_viewFlags + 4) = v85 | v86;
        }
        if ([(NSCoder *)v105 containsValueForKey:@"UIViewLayoutMarginsAreDirectional"])
        {
          if ([(NSCoder *)v105 decodeBoolForKey:@"UIViewLayoutMarginsAreDirectional"]) {
            int v91 = 1024;
          }
          else {
            int v91 = 0;
          }
          *((_DWORD *)&v5->_viewFlags + 4) = *((_DWORD *)&v5->_viewFlags + 4) & 0xFFFFFBFF | v91;
        }
        if ([(NSCoder *)v105 containsValueForKey:@"UIViewInsetsLayoutMarginsFromSafeArea"])
        {
          *((void *)&v5->_viewFlags + 1) = *((void *)&v5->_viewFlags + 1) & 0xE1FFFFFFFFFFFFFFLL | (([(NSCoder *)v105 decodeIntegerForKey:@"UIViewInsetsLayoutMarginsFromSafeArea"] & 0xF) << 57);
        }
        long long v92 = [(NSCoder *)v105 decodeObjectForKey:0x1ED12AC00];
        if (v92) {
          objc_setAssociatedObject(v5, &_UIAppearanceCustomizedSelectorsAssociationKey, v92, (void *)1);
        }
        long long v93 = [(NSCoder *)v105 decodeObjectForKey:@"UIRestorationIdentifier"];
        if (v93) {
          [(UIResponder *)v5 setRestorationIdentifier:v93];
        }
        unint64_t v94 = [(NSCoder *)v105 decodeIntegerForKey:@"UIViewSemanticContentAttribute"];
        if (v94 >= 8)
        {
          if (os_variant_has_internal_diagnostics())
          {
            long long v100 = __UIFaultDebugAssertLog();
            if (os_log_type_enabled(v100, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)CGAffineTransform buf = 134217984;
              unint64_t v124 = v94;
              _os_log_fault_impl(&dword_1853B0000, v100, OS_LOG_TYPE_FAULT, "Decoded invalid UISemanticContentAttribute value, or value is too large to fit in _viewFlags.semanticContentAttribute: %ld", buf, 0xCu);
            }

            double v74 = &v5->_viewFlags;
            int v4 = v105;
          }
          else
          {
            long long v99 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C150) + 8);
            if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)CGAffineTransform buf = 134217984;
              unint64_t v124 = v94;
              _os_log_impl(&dword_1853B0000, v99, OS_LOG_TYPE_ERROR, "Decoded invalid UISemanticContentAttribute value, or value is too large to fit in _viewFlags.semanticContentAttribute: %ld", buf, 0xCu);
            }
          }
        }
        *(void *)((char *)v74 + 20) = *(void *)((char *)v74 + 20) & 0xFFFFFFFFFFFE3FFFLL | ((v94 & 7) << 14);
        if (dyld_program_sdk_at_least()) {
          *((_DWORD *)v74 + 4) = *((_DWORD *)v74 + 4) & 0xFFF7FFFF | ((+[UIView userInterfaceLayoutDirectionForSemanticContentAttribute:(*(void *)((char *)v74 + 20) >> 14) & 7] == UIUserInterfaceLayoutDirectionRightToLeft) << 19);
        }
        if (_UIConstraintBasedLayoutEngageNonLazily()) {
          *(void *)v74 |= 0x400000000000000uLL;
        }
        long long v95 = [(NSCoder *)v4 decodeObjectForKey:@"UIViewPreviewingSegueTemplateStorage"];
        [(UIView *)v5 _setPreviewingSegueTemplateStorage:v95];

        [(UIView *)v5 _decodeLargeContentViewerPropertiesWithCoder:v4];
        long long v96 = [(NSCoder *)v4 decodeObjectForKey:@"UIViewLocalOverrideTraitCollection"];
        long long v97 = v96;
        if (v96) {
          -[UIView setOverrideUserInterfaceStyle:](v5, "setOverrideUserInterfaceStyle:", [v96 userInterfaceStyle]);
        }

LABEL_115:
        double v29 = v5;
        goto LABEL_116;
      }
      goto LABEL_5;
    }
  }

  uint64_t v26 = (void *)MEMORY[0x1E4F1CA00];
  uint64_t v27 = (objc_class *)objc_opt_class();
  uint64_t v28 = NSStringFromClass(v27);
  [v26 raise:@"UIWindowRestrictedSplashboardViewException", @"Using a WebKit view of class '%@' in a launch storyboard is not allowed.", v28 format];

  double v29 = 0;
LABEL_116:

  return v29;
}

- (void)setWantsDeepColorDrawing:(BOOL)a3
{
  int v3 = *((_DWORD *)&self->_viewFlags + 4);
  if (((((v3 & 0x20000000) == 0) ^ a3) & 1) == 0)
  {
    uint64_t v4 = *((void *)&self->_viewFlags + 1);
    unsigned int v5 = v3 & 0xDFFFFFFF;
    if (a3) {
      int v6 = 0x20000000;
    }
    else {
      int v6 = 0;
    }
    *(void *)&self->_uint64_t viewFlags = self->_viewFlags;
    *((void *)&self->_viewFlags + 1) = v4;
    *((_DWORD *)&self->_viewFlags + 4) = v5 | v6;
    [(UIView *)self _setNeedsContentsFormatUpdate];
  }
}

- (void)setClearsContextBeforeDrawing:(BOOL)clearsContextBeforeDrawing
{
}

- (void)_decodeLargeContentViewerPropertiesWithCoder:(id)a3
{
  id v4 = [a3 decodeObjectForKey:@"UIViewLargeContentStoredProperties"];
  [(UIView *)self _setLargeContentStoredProperties:v4];
}

- (id)_tintColorArchivingKey
{
  return @"UITintColor";
}

- (void)_setPreviewingSegueTemplateStorage:(id)a3
{
}

- (BOOL)_shouldDecodeSubviews
{
  return 1;
}

+ (id)_currentAnimationSettings
{
  if (!__currentViewAnimationState)
  {
    double v16 = 0;
    goto LABEL_14;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(__currentViewAnimationState + 272));
  int v3 = [*(id *)(__currentViewAnimationState + 192) _basicAnimationForView:0 withKeyPath:0];
  id v4 = [WeakRetained timingParameters];
  unsigned int v5 = [v4 springTimingParameters];

  if (v5)
  {
    int v6 = [WeakRetained timingParameters];
    uint64_t v7 = [v6 springTimingParameters];

    [v7 mass];
    double v9 = v8;
    [v7 stiffness];
    double v11 = v10;
    [v7 damping];
    double v13 = v12;
    [v7 initialVelocity];
    double v15 = v14;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      double v9 = *(double *)(__currentViewAnimationState + 280);
      double v11 = *(double *)(__currentViewAnimationState + 288);
      double v13 = *(double *)(__currentViewAnimationState + 296);
      double v15 = *(double *)(__currentViewAnimationState + 304);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        unint64_t v26 = *(void *)(__currentViewAnimationState + 88);
        if (v26 == 6)
        {
          id v28 = *(id *)(__currentViewAnimationState + 200);
        }
        else
        {
          if (v26 == 7)
          {
            _UILoadDefaultSpringParameters();
            double v9 = *(double *)&_UIViewDefaultSpringMass;
            double v11 = *(double *)&_UIViewDefaultSpringStiffness;
            double v13 = *(double *)&_UIViewDefaultSpringDamping;
            double v15 = 0.0;
            goto LABEL_12;
          }
          _UIGetAnimationCurveSpline(v26, v17, v18, v19, v20);
          id v28 = (id)objc_claimAutoreleasedReturnValue();
        }
        double v29 = v28;
        double v16 = [MEMORY[0x1E4F4F780] settingsWithDuration:v28 delay:*(double *)(__currentViewAnimationState + 40) timingFunction:*(double *)(__currentViewAnimationState + 48)];

        goto LABEL_13;
      }
      id v21 = v3;
      [v21 mass];
      double v9 = v22;
      [v21 stiffness];
      double v11 = v23;
      [v21 damping];
      double v13 = v24;
      [v21 initialVelocity];
      double v15 = v25;
    }
  }
LABEL_12:
  double v16 = [MEMORY[0x1E4F4F840] settingsWithMass:v9 stiffness:v11 damping:v13 epsilon:0.001 initialVelocity:v15];
LABEL_13:

LABEL_14:
  return v16;
}

- (void)removeMotionEffect:(UIMotionEffect *)effect
{
  id v4 = effect;
  if (objc_msgSend((id)_motionEffectEngine, "_motionEffect:belongsToView:"))
  {
    [(id)_motionEffectEngine endApplyingMotionEffect:v4 toView:self];
    -[UIView _dispatchMotionEffectsVisitorWithDelta:](self, -1);
    if (([(id)_motionEffectEngine _hasMotionEffectsForView:self] & 1) == 0)
    {
      [(id)_motionEffectEngine endSuspendingMotionEffectsForView:self];
      *((void *)&self->_viewFlags + 1) &= ~0x100000000uLL;
    }
  }
}

uint64_t __42__UIView__recursivelySuspendMotionEffects__block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [(id)_motionEffectEngine beginSuspendingMotionEffectsForView:a2];
  }
  return 1;
}

+ (BOOL)_isInRetargetableAnimationBlock
{
  int v2 = [a1 _isInAnimationBlock];
  if (v2)
  {
    int v3 = (void *)__currentViewAnimationState;
    LOBYTE(v2) = [v3 isInProcess];
  }
  return v2;
}

- (BOOL)_unapplyMotionEffect:(id)a3
{
  return 0;
}

- (void)addMotionEffect:(UIMotionEffect *)effect
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v4 = effect;
  if (v4)
  {
    unsigned int v5 = self;
    if (!_motionEffectEngine)
    {
      int v6 = objc_alloc_init(_UIMotionEffectEngine);
      uint64_t v7 = (void *)_motionEffectEngine;
      _motionEffectEngine = (uint64_t)v6;

      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id v8 = (id)qword_1EB25C198;
      uint64_t v9 = [v8 countByEnumeratingWithState:&v30 objects:v34 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v31;
        do
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v31 != v11) {
              objc_enumerationMutation(v8);
            }
            [(id)_motionEffectEngine beginSuspendingForReason:*(void *)(*((void *)&v30 + 1) + 8 * i)];
          }
          uint64_t v10 = [v8 countByEnumeratingWithState:&v30 objects:v34 count:16];
        }
        while (v10);
      }

      [(id)qword_1EB25C198 removeAllObjects];
      double v13 = (void *)qword_1EB25C198;
      qword_1EB25C198 = 0;

      if (os_variant_has_internal_diagnostics())
      {
        Boolean keyExistsAndHasValidFormat = 0;
        int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"EnableTetheredDisplayPortMode", (CFStringRef)*MEMORY[0x1E4F1D3B8], &keyExistsAndHasValidFormat);
        if (keyExistsAndHasValidFormat)
        {
          if (AppBooleanValue
            && ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIMotionEffectsEnabledWhenMirroring, @"UIMotionEffectsEnabledWhenMirroring", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) != 0|| !byte_1E8FD5614))
          {
            [(id)_motionEffectEngine beginSuspendingForReason:@"stevenote"];
          }
        }
      }
      double v14 = [MEMORY[0x1E4F28EB8] defaultCenter];
      if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIMotionEffectsEnabledWhenMirroring, @"UIMotionEffectsEnabledWhenMirroring", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) != 0|| !byte_1E8FD5614)
      {
        id v15 = (id)[v14 addObserverForName:@"UIScreenModeDidChangeNotification" object:0 queue:0 usingBlock:&__block_literal_global_3740];
        id v16 = (id)[v14 addObserverForName:@"UISceneWillConnectNotification" object:0 queue:0 usingBlock:&__block_literal_global_3740];
        id v17 = (id)[v14 addObserverForName:@"UISceneDidDisconnectNotification" object:0 queue:0 usingBlock:&__block_literal_global_3740];
        id v18 = (id)[v14 addObserverForName:@"UIScreenMirroredScreenDidChangeNotification" object:0 queue:0 usingBlock:&__block_literal_global_3740];
        _UIViewReconsiderMotionEffectSuspensionForScreenMirroring();
      }
      double v19 = [(UIView *)v5 window];
      double v20 = (void *)UIApp;
      if (v19)
      {
        id v21 = [(UIView *)v5 window];
        uint64_t v22 = [v20 _sceneInterfaceOrientationFromWindow:v21];
      }
      else
      {
        uint64_t v22 = [(id)UIApp _defaultSceneInterfaceOrientationReturningUnknownForNilScene:0];
      }

      [(id)_motionEffectEngine _setTargetInterfaceOrientation:v22];
      id v23 = (id)[v14 addObserverForName:@"UIWindowWillAnimateRotationNotification" object:0 queue:0 usingBlock:&__block_literal_global_3742];
      id v24 = (id)[v14 addObserverForName:@"UIApplicationWillEnterForegroundNotification" object:0 queue:0 usingBlock:&__block_literal_global_3744];
      id v25 = (id)[v14 addObserverForName:@"_UIApplicationWillAddDeactivationReasonNotification" object:0 queue:0 usingBlock:&__block_literal_global_3746];
      id v26 = (id)[v14 addObserverForName:@"_UIApplicationDidRemoveDeactivationReasonNotification" object:0 queue:0 usingBlock:&__block_literal_global_3753];
      id v27 = (id)[v14 addObserverForName:0x1ED1521E0 object:0 queue:0 usingBlock:&__block_literal_global_3755];
    }
    if ((*((void *)&v5->_viewFlags + 1) & 0x100000000) == 0)
    {
      if ((-[UIView _isInHierarchyAllowingMotionEffects]((uint64_t)v5) & 1) == 0) {
        [(id)_motionEffectEngine beginSuspendingMotionEffectsForView:v5];
      }
      *((void *)&v5->_viewFlags + 1) |= 0x100000000uLL;
      if (qword_1EB25C1A0 != -1) {
        dispatch_once(&qword_1EB25C1A0, &__block_literal_global_1177_0);
      }
    }
    [(id)_motionEffectEngine beginApplyingMotionEffect:v4 toView:v5];
    -[UIView _dispatchMotionEffectsVisitorWithDelta:](v5, 1);
  }
}

- (void)_dispatchMotionEffectsVisitorWithDelta:(void *)a1
{
  if (a1)
  {
    if (!a2)
    {
      int v6 = [MEMORY[0x1E4F28B00] currentHandler];
      [v6 handleFailureInMethod:sel__dispatchMotionEffectsVisitorWithDelta_ object:a1 file:@"UIView.m" lineNumber:9045 description:@"Delta should never be zero"];
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __49__UIView__dispatchMotionEffectsVisitorWithDelta___block_invoke;
    aBlock[3] = &__block_descriptor_40_e16_B16__0__UIView_8l;
    aBlock[4] = a2;
    id v4 = _Block_copy(aBlock);
    unsigned int v5 = [[_UIViewBlockVisitor alloc] initWithTraversalDirection:1 visitorBlock:v4];
    [a1 _receiveVisitor:v5];
  }
}

- (void)_setFocusSpeedBumpEdges:(unint64_t)a3
{
  unint64_t v7 = a3;
  uint64_t v4 = *((void *)&self->_viewFlags + 1);
  int v5 = *((_DWORD *)&self->_viewFlags + 4);
  if (a3 || (v5 & 0x10000) != 0)
  {
    *(void *)&self->_uint64_t viewFlags = self->_viewFlags;
    *((void *)&self->_viewFlags + 1) = v4;
    *((_DWORD *)&self->_viewFlags + 4) = v5 & 0xFFFEFFFF | ((a3 != 0) << 16);
    if (a3)
    {
      int v6 = [MEMORY[0x1E4F29238] valueWithBytes:&v7 objCType:"Q"];
    }
    else
    {
      int v6 = 0;
    }
    objc_setAssociatedObject(self, &_UIFocusEngineSpeedBumpKey, v6, (void *)1);
  }
}

- (void)_setLargeContentViewerGestureManager:(id)a3
{
}

+ (BOOL)_addCompletionWithPosition:(id)a3
{
  id v3 = a3;
  if (__currentViewAnimationState)
  {
    uint64_t v4 = [(id)__currentViewAnimationState _outerPropertyAnimator:1];
    if (v4)
    {
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      void v7[2] = __48__UIView_Animation___addCompletionWithPosition___block_invoke;
      _OWORD v7[3] = &unk_1E52E5E20;
      id v8 = v3;
      [v4 addCompletion:v7];

      char v5 = 1;
    }
    else
    {
      char v5 = [(id)__currentViewAnimationState _addCompletionWithPosition:v3];
    }
  }
  else
  {
    char v5 = 0;
  }

  return v5;
}

- (void)_generateDeferredAnimations:(id)a3
{
}

- (uint64_t)_backing__generateDeferredAnimations:(uint64_t)result
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 168);
    if (v2) {
      id v3 = *(void **)(v2 + 40);
    }
    else {
      id v3 = 0;
    }
    return [v3 _generateDeferredAnimations:a2];
  }
  return result;
}

- (void)_setCornerRadius:(double)a3
{
  id v4 = [(UIView *)self layer];
  [v4 setCornerRadius:a3];
}

- (void)sendSubviewToBack:(UIView *)view
{
  id v4 = view;
  if (v4)
  {
    uint64_t v11 = v4;
    char v5 = [(CALayer *)self->_layer sublayers];
    int v6 = -[UIView _backing_outermostLayer](v11);
    uint64_t v7 = [v5 indexOfObject:v6];

    if (v7) {
      BOOL v8 = v7 == 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      uint64_t v9 = (void *)[v5 mutableCopy];
      uint64_t v10 = -[UIView _backing_outermostLayer](v11);
      [v9 insertObject:v10 atIndex:0];

      [v9 removeObjectAtIndex:v7 + 1];
      [(CALayer *)self->_layer setSublayers:v9];
      -[UIView _synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable]((uint64_t)self);
      [(UIView *)self _invalidateSubviewCache];
    }
    id v4 = v11;
  }
}

- (BOOL)nsli_defaultResolvedValue:(double *)a3 forSymbolicConstant:(id)a4 inConstraint:(id)a5 error:(id *)a6
{
  int v9 = [a4 isEqualToString:*MEMORY[0x1E4F5B230]];
  if ((v9 & 1) == 0 && ![a4 isEqualToString:*MEMORY[0x1E4F5B228]])
  {
    uint64_t v17 = [NSString stringWithFormat:@"Unkown symbolic constant: %@", a4, v58, v60, v61, v62, v63];
    goto LABEL_84;
  }
  uint64_t v10 = [a5 firstAttribute];
  uint64_t v11 = [a5 secondAttribute];
  if (a5)
  {
    double v12 = objc_msgSend((id)objc_msgSend(a5, "firstItem"), "_referenceView");
    double v13 = objc_msgSend((id)objc_msgSend(a5, "secondItem"), "_referenceView");
  }
  else
  {
    double v12 = 0;
    double v13 = 0;
  }
  uint64_t v14 = [a5 firstItem];
  uint64_t v15 = [a5 secondItem];
  if (v9)
  {
    if (!v12 || (double v16 = 1.0, !v13))
    {
      uint64_t v17 = [NSString stringWithFormat:@"%@ must involve two views", a4, v58, v60, v61, v62, v63];
LABEL_84:
      double v19 = 0.0;
      goto LABEL_85;
    }
  }
  else
  {
    [a5 symbolicConstantMultiplier];
    double v16 = v18;
    uint64_t v17 = 0;
    double v19 = 8.0;
    if (!v12 || !v13)
    {
LABEL_85:
      if (!a3) {
        goto LABEL_87;
      }
      goto LABEL_86;
    }
  }
  unsigned int v20 = EdgeForAttribute(v10);
  unsigned int v21 = EdgeForAttribute(v11);
  if (v21 == 5) {
    uint64_t v22 = 6;
  }
  else {
    uint64_t v22 = v21;
  }
  unsigned int v65 = v20;
  if (!v20 || !v22)
  {
    if (v20 | v22)
    {
      uint64_t v27 = 0;
      if (v10 && v11 <= 0x25) {
        uint64_t v27 = qword_1E530EA80[(int)v11];
      }
      uint64_t v17 = [NSString stringWithFormat:@"Could not find relevant edge for attribute: %@", v27, v58, v60, v61, v62, v63];
    }
    else
    {
      if (v10 > 0x25) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = qword_1E530EA80[(int)v10];
      }
      if (v11 > 0x25) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = qword_1E530EA80[(int)v11];
      }
      uint64_t v17 = [NSString stringWithFormat:@"Could not find relevant edges for attributes: %@ and %@", v26, v38, v60, v61, v62, v63];
    }
    goto LABEL_84;
  }
  unsigned int v64 = v22;
  if (!v9
    || (v23 = [v13 superview], v24 = objc_msgSend(v12, "superview"), uint64_t v22 = v64, (void *)v23 != v12)
    && (void *)v24 != v13)
  {
LABEL_19:
    if ((v10 - 1) > 0xB) {
      uint64_t v25 = -1;
    }
    else {
      uint64_t v25 = qword_186B9DFD8[(int)v10 - 1];
    }
    if (v25 == v11)
    {
LABEL_31:
      if (v12 != (void *)v14 && v13 != (void *)v15)
      {
        +[UILayoutGuide _defaultSpacingBetweenGuidesForResolvingSymbolicConstant];
        goto LABEL_75;
      }
      if (v12 == (void *)v14)
      {
        id v28 = v12;
        if (v13 == (void *)v15)
        {
          uint64_t v29 = v65;
          uint64_t v30 = v10;
          long long v31 = v13;
          uint64_t v32 = v22;
          uint64_t v45 = v11;
          goto LABEL_74;
        }
        uint64_t v29 = v65;
        uint64_t v30 = v10;
        long long v31 = 0;
        uint64_t v32 = v22;
      }
      else
      {
        id v28 = v13;
        uint64_t v29 = v22;
        uint64_t v30 = v11;
        long long v31 = 0;
        uint64_t v32 = v65;
      }
      uint64_t v45 = 0;
LABEL_74:
      [v28 _autolayoutSpacingAtEdge:v29 forAttribute:v30 nextToNeighbor:v31 edge:v32 attribute:v45 multiplier:v16];
LABEL_75:
      if (v19 < 0.0)
      {
        uint64_t v46 = NSString;
        BOOL v47 = off_1E530EA28[(int)v65 - 1];
        double v48 = (objc_class *)objc_opt_class();
        float v49 = NSStringFromClass(v48);
        uint64_t v50 = off_1E530EA50[(int)v64 - 1];
        double v51 = (objc_class *)objc_opt_class();
        CGFloat v60 = v50;
        uint64_t v61 = NSStringFromClass(v51);
        double v57 = v47;
        double v59 = (__CFString *)v49;
        double v52 = @"Aligning the %@ edge of a %@ with the %@ edge of a %@ is not recommended. Use an explicit constant for your constraint to override this.";
LABEL_77:
        uint64_t v39 = v46;
LABEL_83:
        uint64_t v17 = objc_msgSend(v39, "stringWithFormat:", v52, v57, v59, v60, v61, v62, v63);
        goto LABEL_84;
      }
      goto LABEL_93;
    }
    if (v10 <= 0x25
      && ((1 << v10) & 0x3F001FFE7FLL) != 0
      && v11 <= 0x25
      && ((1 << v11) & 0x3F001FFE7FLL) != 0)
    {
      if (v9)
      {
        if (v10 == 12 && v11 == 3 || v10 == 4 && v11 == 11) {
          goto LABEL_31;
        }
      }
      else if (((1 << v11) & 0x2A00119D19) != 0)
      {
        if (!((v10 > 0x25) | (0x15FFEE62E6uLL >> v10) & 1)) {
          goto LABEL_31;
        }
      }
      else if ((v10 > 0x25) | (0x15FFEE62E6uLL >> v10) & 1)
      {
        goto LABEL_31;
      }
    }
    uint64_t v39 = NSString;
    if (v10 > 0x25) {
      int v40 = 0;
    }
    else {
      int v40 = (__CFString *)qword_1E530EA80[(int)v10];
    }
    if (v11 > 0x25) {
      uint64_t v53 = 0;
    }
    else {
      uint64_t v53 = qword_1E530EA80[(int)v11];
    }
    uint64_t v62 = v53;
    uint64_t v63 = v13;
    CGFloat v60 = v40;
    uint64_t v61 = (NSString *)v12;
    double v57 = a4;
    double v59 = (__CFString *)a4;
    double v52 = @"%@ between sibling views must be between opposite attributes. Can't put %@ between %@ of %@ and %@ of %@";
    goto LABEL_83;
  }
  if (v10 != v11)
  {
    BOOL v42 = (void *)v24 != v13 || v13 != (void *)v15;
    BOOL v43 = v12 == (void *)v14 && v23 == (void)v12;
    if (v43 || !v42)
    {
      uint64_t v44 = v10 > 0x25 ? 0 : qword_1E530EA80[(int)v10];
      uint64_t v56 = v11 >= 0x26 ? 0 : qword_1E530EA80[(int)v11];
      uint64_t v17 = [NSString stringWithFormat:@"Attributes must match for %@ between view and superview.\nmismatched attributes: %@", a4, objc_msgSend(NSString, "stringWithFormat:", @"%@ of %@, and %@ of %@", v44, v12, v56, v13)];
      uint64_t v22 = v64;
      if (v17) {
        goto LABEL_84;
      }
    }
    goto LABEL_19;
  }
  if ((void *)v24 == v13)
  {
    BOOL v33 = v13 != (void *)v15;
    uint64_t v34 = v12;
    uint64_t v35 = v65;
    uint64_t v36 = v10;
    uint64_t v37 = v13;
  }
  else
  {
    BOOL v33 = v12 != (void *)v14;
    uint64_t v34 = v13;
    uint64_t v35 = v64;
    uint64_t v36 = v10;
    uint64_t v37 = v12;
  }
  [v34 _autolayoutSpacingAtEdge:v35 forAttribute:v36 inContainer:v37 isGuide:v33];
  if (v19 < 0.0)
  {
    uint64_t v46 = NSString;
    double v55 = (objc_class *)objc_opt_class();
    double v57 = NSStringFromClass(v55);
    double v59 = off_1E530EA28[(int)v65 - 1];
    double v52 = @"Aligning a %@ at the %@ of its container is not recommended. Use an explicit constant for your constraint to override this.";
    goto LABEL_77;
  }
LABEL_93:
  uint64_t v17 = 0;
  if (a3) {
LABEL_86:
  }
    *a3 = v19;
LABEL_87:
  if (v17) {
    NSLayoutConstraintFailedToFindDefaultResolvedValueForSymbolicConstant(v17, v17);
  }
  return 1;
}

- (double)_autolayoutSpacingAtEdge:(int)a3 forAttribute:(int64_t)a4 inContainer:(id)a5 isGuide:(BOOL)a6
{
  BOOL v6 = a6;
  if ((a4 - 11) > 1)
  {
    double result = 20.0;
    if (a6) {
      return 0.0;
    }
  }
  else
  {
    uint64_t v9 = *(void *)&a3;
    uint64_t v11 = [(UIView *)self _viewForLoweringBaselineLayoutAttribute:a4];
    if (v11 == self)
    {
      return 20.0;
    }
    else
    {
      [(UIView *)v11 _autolayoutSpacingAtEdge:v9 forAttribute:a4 inContainer:a5 isGuide:v6];
    }
  }
  return result;
}

- (BOOL)_hasFontInfoForVerticalBaselineSpacing
{
  return 0;
}

- (double)_autolayoutSpacingAtEdge:(int)a3 forAttribute:(int64_t)a4 nextToNeighbor:(id)a5 edge:(int)a6 attribute:(int64_t)a7 multiplier:(double)a8
{
  uint64_t v10 = *(void *)&a6;
  uint64_t v11 = (UIView *)a5;
  uint64_t v13 = *(void *)&a3;
  if ((a7 - 11) <= 1) {
    uint64_t v11 = (UIView *)[a5 _viewForLoweringBaselineLayoutAttribute:a7];
  }
  uint64_t v15 = self;
  if ((a4 - 13) >= 0xFFFFFFFE) {
    uint64_t v15 = [(UIView *)self _viewForLoweringBaselineLayoutAttribute:a4];
  }
  if ([(UIView *)v11 _hasCustomAutolayoutNeighborSpacingForAttribute:a7])
  {
    BOOL v16 = [(UIView *)v15 _hasCustomAutolayoutNeighborSpacingForAttribute:a4];
    if ((v13 - 5) >= 2) {
      unsigned int v17 = v13;
    }
    else {
      unsigned int v17 = 4;
    }
    if (v16) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = v17;
    }
    [(UIView *)v11 _autolayoutSpacingAtEdge:v10 forAttribute:a7 nextToNeighbor:v15 edge:v13 attribute:a4 multiplier:a8];
    double v19 = v18;
    unsigned int v20 = v11;
    uint64_t v21 = v10;
    uint64_t v22 = v13;
LABEL_19:
    [(UIView *)v20 _paddingForBaselineSpacingFromEdge:v21 toNeighborEdge:v22];
    return v19 + v24;
  }
  if ((a4 - 13) >= 0xFFFFFFFE && v15 != self)
  {
    if ((v10 - 5) >= 2) {
      uint64_t v10 = v10;
    }
    else {
      uint64_t v10 = 4;
    }
    [(UIView *)v15 _autolayoutSpacingAtEdge:v13 forAttribute:a4 nextToNeighbor:v11 edge:v10 attribute:a7 multiplier:a8];
    double v19 = v23;
    unsigned int v20 = v15;
    uint64_t v21 = v13;
    uint64_t v22 = v10;
    goto LABEL_19;
  }
  [(UIView *)self _defaultAutolayoutSpacing];
  UIRoundToViewScale(self);
  return result;
}

- (BOOL)_hasCustomAutolayoutNeighborSpacingForAttribute:(int64_t *)a3
{
  if ((a3 - 11) > 1) {
    return 0;
  }
  char v5 = [(UIView *)self _viewForLoweringBaselineLayoutAttribute:a3];
  if (v5 == self) {
    return 0;
  }
  return [(UIView *)v5 _hasCustomAutolayoutNeighborSpacingForAttribute:a3];
}

- (double)_defaultAutolayoutSpacing
{
  return 8.0;
}

- (void)setAnchorPoint:(CGPoint)anchorPoint
{
  double y = anchorPoint.y;
  double x = anchorPoint.x;
  [(UIView *)self anchorPoint];
  if (v6 != x || v7 != y)
  {
    double v9 = v6;
    double v10 = v7;
    uint64_t v11 = +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger];
    objc_msgSend(v11, "willSendSetAnchorPoint:toLayerOfView:", self, x, y);

    [(UIView *)(uint64_t)self _backing_setAnchorPoint:y];
    -[UIView _invalidateAutoresizingConstraints]((uint64_t)self);
    if (self)
    {
      if (*((_DWORD *)&self->_viewFlags + 4) & 0x3C | *((void *)&self->_viewFlags + 1) & 0x8000000000000000)
      {
        uint64_t v28 = 0;
        long long v27 = 0u;
        long long v26 = 0u;
        long long v25 = 0u;
        long long v24 = 0u;
        long long v23 = 0u;
        long long v22 = 0u;
        long long v21 = 0u;
        long long v20 = 0u;
        long long v19 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v14 = 0u;
        long long v13 = 0u;
        uint64_t v12 = 512;
        double v16 = v9;
        double v17 = v10;
        -[UIView _notifyGeometryObserversWithChangeInfo:]((uint64_t)self, &v12);
      }
    }
  }
}

- (double)_backing_anchorPoint
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)(a1 + 168);
  if (!v2 || (v3 = *(id *)(v2 + 8), (id v4 = v3) == 0))
  {
    id v4 = 0;
    id v3 = *(id *)(a1 + 160);
  }
  [v3 anchorPoint];
  double v6 = v5;

  return v6;
}

- (void)_backing_setAnchorPoint:(double)a3
{
  if (a1)
  {
    uint64_t v6 = *(void *)(a1 + 168);
    if (!v6 || (id v7 = *(id *)(v6 + 8), (v8 = v7) == 0))
    {
      id v8 = 0;
      id v7 = *(id *)(a1 + 160);
    }
    id v9 = v8;
    objc_msgSend(v7, "setAnchorPoint:", a2, a3);
  }
}

- (void)_backing_wrapLayerInIntermediate
{
  if (!*(void *)(a1 + 168))
  {
    uint64_t v2 = objc_alloc_init(_UIViewBackingAux);
    id v3 = *(void **)(a1 + 168);
    *(void *)(a1 + 168) = v2;

    if (objc_msgSend((id)a1, "__isKindOfUIWindow"))
    {
      if (os_variant_has_internal_diagnostics())
      {
        long long v27 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)CGAffineTransform buf = 0;
          _os_log_fault_impl(&dword_1853B0000, v27, OS_LOG_TYPE_FAULT, "UIWindow can not become multi-layered. The behavior is undefined.", buf, 2u);
        }
      }
      else
      {
        long long v26 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_backing_wrapLayerInIntermediate___s_category) + 8);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)CGAffineTransform buf = 0;
          _os_log_impl(&dword_1853B0000, v26, OS_LOG_TYPE_ERROR, "UIWindow can not become multi-layered. The behavior is undefined.", buf, 2u);
        }
      }
    }
    BOOL v4 = +[UIView areAnimationsEnabled];
    +[UIView setAnimationsEnabled:0];
    double v5 = objc_alloc_init(_UIMultiLayer);
    [*(id *)(a1 + 160) anchorPoint];
    -[_UIMultiLayer setAnchorPoint:](v5, "setAnchorPoint:");
    [*(id *)(a1 + 160) position];
    -[_UIMultiLayer setPosition:](v5, "setPosition:");
    [*(id *)(a1 + 160) bounds];
    double v7 = v6;
    [*(id *)(a1 + 160) bounds];
    -[_UIMultiLayer setBounds:](v5, "setBounds:", 0.0, 0.0, v7);
    id v8 = *(void **)(a1 + 160);
    if (v8)
    {
      [v8 transform];
    }
    else
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
    }
    v29[4] = v34;
    void v29[5] = v35;
    v29[6] = v36;
    v29[7] = v37;
    v29[0] = v30;
    v29[1] = v31;
    v29[2] = v32;
    v29[3] = v33;
    [(_UIMultiLayer *)v5 setTransform:v29];
    -[_UIMultiLayer setHidden:](v5, "setHidden:", [*(id *)(a1 + 160) isHidden]);
    [*(id *)(a1 + 160) opacity];
    -[_UIMultiLayer setOpacity:](v5, "setOpacity:");
    -[_UIMultiLayer setAllowsHitTesting:](v5, "setAllowsHitTesting:", [*(id *)(a1 + 160) allowsHitTesting]);
    -[_UIMultiLayer setHitTestsAsOpaque:](v5, "setHitTestsAsOpaque:", [*(id *)(a1 + 160) hitTestsAsOpaque]);
    -[UIView _safeMaskView]((void *)a1);
    id v9 = (char *)objc_claimAutoreleasedReturnValue();
    double v10 = v9;
    if (v9)
    {
      uint64_t v11 = [v9 layer];
      [(_UIMultiLayer *)v5 setMask:v11];

      *(void *)(v10 + 116) |= 0x1000000000000uLL;
      [*(id *)(a1 + 160) bounds];
      -[UIView _setIntermediateLayerMaskFrameOrigin:](v10);
    }
    objc_msgSend(*(id *)(a1 + 160), "setAnchorPoint:", 0.5, 0.5);
    [(_UIMultiLayer *)v5 bounds];
    double MidX = CGRectGetMidX(v39);
    [(_UIMultiLayer *)v5 bounds];
    objc_msgSend(*(id *)(a1 + 160), "setPosition:", MidX, CGRectGetMidY(v40));
    long long v13 = *(void **)(a1 + 160);
    long long v14 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    v28[0] = *MEMORY[0x1E4F1DAB8];
    v28[1] = v14;
    void v28[2] = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
    [v13 setAffineTransform:v28];
    [*(id *)(a1 + 160) setHidden:0];
    LODWORD(v15) = 1.0;
    [*(id *)(a1 + 160) setOpacity:v15];
    double v16 = [*(id *)(a1 + 160) superlayer];
    id v17 = *(id *)(a1 + 160);
    if (v16)
    {
      long long v18 = [v16 sublayers];
      int v19 = [v18 containsObject:*(void *)(a1 + 160)];

      if (v19)
      {
        [v16 replaceSublayer:*(void *)(a1 + 160) with:v5];
      }
      else
      {
        long long v20 = [v16 mask];
        long long v21 = *(void **)(a1 + 160);

        if (v20 == v21)
        {
          [v16 setMask:v5];
        }
        else
        {
          long long v22 = [MEMORY[0x1E4F28B00] currentHandler];
          [v22 handleFailureInMethod:sel__backing_wrapLayerInIntermediate object:a1 file:@"_UIViewBacking.m" lineNumber:335 description:@"Layer has a superlayer but is neither a sublayer nor a mask"];
        }
      }
    }
    if (*(void *)(a1 + 56)) {
      -[UIBackgroundConfiguration _setCustomView:](*(void *)(a1 + 168), v5);
    }
    [(_UIMultiLayer *)v5 addSublayer:v17];
    [(_UIMultiLayer *)v5 setDelegate:a1];
    int v23 = [*(id *)(a1 + 160) needsLayout];
    uint64_t v24 = *(void *)(a1 + 168);
    if (v24) {
      *(void *)(v24 + 8) = v5;
    }
    if (v23) {
      [(_UIMultiLayer *)v5 setNeedsLayout];
    }
    id v25 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    -[_UIHomeAffordanceObservationRecord setLegacyViewServiceSessionIdentifier:](*(void *)(a1 + 168), v25);

    +[UIView setAnimationsEnabled:v4];
    -[UIView _delegateOutermostLayerDidChange]((char *)a1);
  }
}

- (id)_safeMaskView
{
  if (a1)
  {
    uint64_t v2 = a1;
    if (dyld_program_sdk_at_least()) {
      [v2 maskView];
    }
    else {
    a1 = [v2 _maskView];
    }
    uint64_t v1 = vars8;
  }
  return a1;
}

- (void)_delegateOutermostLayerDidChange
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((a1[120] & 0x40) != 0)
  {
    uint64_t v2 = -[UIView _multiLayerDelegatesTableCreateIfNecessary:](a1, 0);
    long long v7 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v8;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v8 != v5) {
            objc_enumerationMutation(v2);
          }
          [*(id *)(*((void *)&v7 + 1) + 8 * v6++) _outermostLayerDidChange:a1];
        }
        while (v4 != v6);
        uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      }
      while (v4);
    }
  }
}

- (void)_backing_removePrivateSubview:(uint64_t)a1
{
  if (a1)
  {
    *(void *)(a2 + 116) &= ~0x1000000000uLL;
    [(id)a2 removeFromSuperview];
    uint64_t v4 = *(void **)(a1 + 168);
    if (v4) {
      uint64_t v4 = (void *)v4[3];
    }
    long long v8 = v4;
    [v8 removeObject:a2];
    if (![v8 count])
    {

      -[_UIHomeAffordanceObservationRecord setLegacyViewServiceSessionIdentifier:](*(void *)(a1 + 168), 0);
      long long v8 = 0;
    }
    -[UIContentUnavailableImageProperties _setTintColor:](*(void *)(a1 + 168), 0);
    -[UIView _backing_unwrapIfPossible](a1);
    uint64_t v5 = *(void *)(a1 + 168);
    if (v5)
    {
      id v6 = *(id *)(v5 + 8);
      long long v7 = v6;
      if (v6 && [v6 needsLayout]) {
        [*(id *)(a1 + 160) setNeedsLayout];
      }
    }
    else
    {
      long long v7 = 0;
    }
  }
}

- (void)_backing_unwrapIfPossible
{
  if (!a1) {
    return;
  }
  uint64_t v2 = *(void **)(a1 + 168);
  if (v2) {
    uint64_t v2 = (void *)v2[3];
  }
  long long v18 = v2;
  if ([v18 count]) {
    goto LABEL_17;
  }
  uint64_t v3 = *(void **)(a1 + 168);
  if (v3) {
    uint64_t v3 = (void *)v3[1];
  }
  uint64_t v4 = v3;
  uint64_t v5 = [v4 filters];
  if ([v5 count])
  {
LABEL_16:

LABEL_17:

    return;
  }
  id v6 = *(void **)(a1 + 168);
  if (v6) {
    id v6 = (void *)v6[5];
  }
  long long v7 = v6;
  long long v8 = [v7 contentEffects];
  if ([v8 count])
  {
LABEL_15:

    goto LABEL_16;
  }
  long long v9 = *(void **)(a1 + 168);
  if (v9) {
    long long v9 = (void *)v9[5];
  }
  long long v10 = v9;
  if ([v10 _hasDeferredAnimations])
  {

    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(a1 + 168);
  if (v11) {
    uint64_t v12 = *(void **)(v11 + 40);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = [v12 reentrantCount];

  if (!v13)
  {
    uint64_t v14 = *(void *)(a1 + 168);
    double v15 = v14 ? *(void **)(v14 + 8) : 0;
    int v16 = [v15 needsLayout];
    -[UIView _backing_unwrapLayer](a1);
    if (v16)
    {
      id v17 = *(void **)(a1 + 160);
      [v17 setNeedsLayout];
    }
  }
}

- (void)_backing_unwrapLayer
{
  if (*(void *)(a1 + 168))
  {
    BOOL v2 = +[UIView areAnimationsEnabled];
    +[UIView setAnimationsEnabled:0];
    uint64_t v3 = *(void **)(a1 + 168);
    if (v3) {
      uint64_t v3 = (void *)v3[1];
    }
    uint64_t v4 = v3;
    uint64_t v5 = [v4 superlayer];
    id v6 = *(id *)(a1 + 160);
    [v6 removeFromSuperlayer];
    [v5 insertSublayer:v6 below:v4];
    [v4 anchorPoint];
    objc_msgSend(v6, "setAnchorPoint:");
    [v4 position];
    objc_msgSend(v6, "setPosition:");
    [v6 bounds];
    double v8 = v7;
    [v6 bounds];
    double v10 = v9;
    [v4 bounds];
    double v12 = v11;
    [v4 bounds];
    objc_msgSend(v6, "setBounds:", v8, v10, v12);
    if (v4)
    {
      [v4 transform];
    }
    else
    {
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
    }
    v22[4] = v27;
    v22[5] = v28;
    v22[6] = v29;
    v22[7] = v30;
    v22[0] = v23;
    v22[1] = v24;
    void v22[2] = v25;
    v22[3] = v26;
    [v6 setTransform:v22];
    objc_msgSend(v6, "setHidden:", objc_msgSend(v4, "isHidden"));
    [v4 opacity];
    objc_msgSend(v6, "setOpacity:");
    objc_msgSend(v6, "setAllowsHitTesting:", objc_msgSend(v4, "allowsHitTesting"));
    objc_msgSend(v6, "setHitTestsAsOpaque:", objc_msgSend(v4, "hitTestsAsOpaque"));
    uint64_t v13 = -[UIView _safeMaskView]((void *)a1);
    uint64_t v14 = (void *)v13;
    if (v13)
    {
      *(void *)(v13 + 116) &= ~0x1000000000000uLL;
      double v15 = -[UIView _intermediateLayerMaskFrameOrigin]((void *)v13);
      double v17 = v16;
      [v14 frame];
      double v19 = v18;
      [v14 frame];
      objc_msgSend(v14, "setFrame:", v15, v17, v19);
      long long v20 = [v14 layer];
      [v6 setMask:v20];
    }
    [v4 removeFromSuperlayer];
    long long v21 = *(void **)(a1 + 168);
    *(void *)(a1 + 168) = 0;

    +[UIView setAnimationsEnabled:v2];
    -[UIView _delegateOutermostLayerDidChange]((char *)a1);
  }
}

- (void)_backing_insertSubview:(void *)a3 belowSubview:
{
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 160);
    -[UIView _backing_outermostLayer](a2);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = -[UIView _backing_outermostLayer](a3);
    [v4 insertSublayer:v6 below:v5];
  }
}

- (int64_t)compareTextEffectsOrdering:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(UIView *)self window];
  id v6 = +[UIKeyboard activeKeyboard];
  uint64_t v7 = [v6 window];
  if (v5 == (void *)v7)
  {
  }
  else
  {
    double v8 = (void *)v7;
    double v9 = [(UIView *)self window];
    int v10 = [v9 _isAlwaysKeyboardWindow];

    if (!v10)
    {
      int v11 = [(UIView *)self textEffectsVisibilityLevel];
      int v12 = [v4 textEffectsVisibilityLevel];
      goto LABEL_6;
    }
  }
  int v11 = [(UIView *)self textEffectsVisibilityLevelInKeyboardWindow];
  int v12 = [v4 textEffectsVisibilityLevelInKeyboardWindow];
LABEL_6:
  uint64_t v13 = -1;
  if (v11 >= v12) {
    uint64_t v13 = 1;
  }
  if (v11 == v12) {
    int64_t v14 = 0;
  }
  else {
    int64_t v14 = v13;
  }

  return v14;
}

+ (uint64_t)_uip_transitionEnabled
{
  if (qword_1EB264E68 != -1) {
    dispatch_once(&qword_1EB264E68, &__block_literal_global_625);
  }
  return _MergedGlobals_1307;
}

+ (int64_t)_currentAnimationCurve
{
  if ([a1 _isInAnimationBlockWithAnimationsEnabled]) {
    return *(void *)(__currentViewAnimationState + 88);
  }
  else {
    return 0;
  }
}

- (BOOL)isHiddenOrHasHiddenAncestor
{
  BOOL v2 = self->_layer;
  BOOL v3 = [(CALayer *)v2 isHidden];
  BOOL v4 = v3;
  if (!v2 || v3)
  {
    uint64_t v5 = v2;
  }
  else
  {
    do
    {
      uint64_t v5 = [(CALayer *)v2 superlayer];

      BOOL v4 = v5 != 0;
      if (!v5) {
        break;
      }
      BOOL v2 = v5;
    }
    while (![(CALayer *)v5 isHidden]);
  }

  return v4;
}

- (double)_applyDirectionalRelativePosition:(double)a3 toRect:(double)a4
{
  if (!a1) {
    return 0.0;
  }
  switch(*((void *)a2 + 4))
  {
    case 1:
      CGRectGetMinY(*(CGRect *)a2);
      break;
    case 2:
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = *((void *)a2 + 1);
      uint64_t v11 = *((void *)a2 + 2);
      uint64_t v12 = *((void *)a2 + 3);
      if ((*(_DWORD *)(a1 + 112) & 0x80000) == 0)
      {
        double MinX = CGRectGetMinX(*(CGRect *)&v9);
        goto LABEL_11;
      }
      double MaxX = CGRectGetMaxX(*(CGRect *)&v9);
      goto LABEL_14;
    case 4:
      CGRectGetMaxY(*(CGRect *)a2);
      break;
    case 8:
      uint64_t v15 = *(void *)a2;
      uint64_t v16 = *((void *)a2 + 1);
      uint64_t v17 = *((void *)a2 + 2);
      uint64_t v18 = *((void *)a2 + 3);
      if ((*(_DWORD *)(a1 + 112) & 0x80000) != 0)
      {
        double MaxX = CGRectGetMinX(*(CGRect *)&v15);
LABEL_14:
        a3 = MaxX - a2[5] - a5;
      }
      else
      {
        double MinX = CGRectGetMaxX(*(CGRect *)&v15);
LABEL_11:
        a3 = MinX + a2[5];
      }
      break;
    default:
      int64_t v14 = [MEMORY[0x1E4F28B00] currentHandler];
      objc_msgSend(v14, "handleFailureInMethod:object:file:lineNumber:description:", sel__applyDirectionalRelativePosition_toRect_, a1, @"UIView_DirectionalManualLayout.m", 38, @"Invalid referenceEdge value in _UIDirectionalRelativePosition: %ld", *((void *)a2 + 4));

      break;
  }
  return a3;
}

- (void)unregisterForTraitChanges:(id)a3
{
}

uint64_t __80__UIView_FluidTransitions___fluidParallaxTransitionsEnabledWithTraitCollection___block_invoke()
{
  if (+[UIView _isOnFluidParallaxDenyList])
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = dyld_program_sdk_at_least();
    if (result) {
      uint64_t result = _os_feature_enabled_impl();
    }
  }
  byte_1EB264E63 = result;
  return result;
}

+ (BOOL)_isOnFluidParallaxDenyList
{
  if (_isOnFluidParallaxDenyList_onceToken != -1) {
    dispatch_once(&_isOnFluidParallaxDenyList_onceToken, &__block_literal_global_4_20);
  }
  return 0;
}

uint64_t __48__UIView_UIViewRTL___legacyRTLPreferenceEnabled__block_invoke()
{
  uint64_t result = CFPreferencesGetAppBooleanValue(@"_UIEnableLegacyRTL", @"com.apple.UIKit", 0);
  byte_1EB25C0B3 = result != 0;
  return result;
}

+ (BOOL)_motionEffectsSupported
{
  return +[_UIMotionEffectEngine _motionEffectsSupported];
}

+ (id)appearanceMatchingProperties:(id)a3 whenContainedInInstancesOfClasses:(id)a4
{
  id v6 = a3;
  uint64_t v7 = _UIInternalContainerClassArrayForContainerClassArray(a4);
  double v8 = +[_UIPropertyBasedAppearance _appearanceMatchingProperties:v6 forClass:a1 withContainerList:v7];

  return v8;
}

+ (id)appearanceWhenContainedInInstancesOfClasses:(id)a3
{
  BOOL v4 = _UIInternalContainerClassArrayForContainerClassArray(a3);
  uint64_t v5 = [a1 _appearanceWhenContainedIn:v4];

  return v5;
}

+ (id)_appearanceWhenContainedIn:(id)a3
{
  return +[_UIAppearance _appearanceForClass:a1 withContainerList:a3];
}

+ (id)appearance
{
  return +[_UIAppearance _appearanceForClass:a1 withContainerList:0];
}

- (void)_backing_layers
{
  v4[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = a1[21];
    if (v1 && (BOOL v2 = *(void **)(v1 + 8)) != 0)
    {
      a1 = [v2 sublayers];
    }
    else
    {
      v4[0] = a1[20];
      a1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:1];
    }
  }
  return a1;
}

uint64_t __50__UIView_FluidTransitions___uip_transitionEnabled__block_invoke()
{
  uint64_t result = dyld_program_sdk_at_least();
  if (result) {
    uint64_t result = _os_feature_enabled_impl();
  }
  _MergedGlobals_1307 = result;
  return result;
}

- (BOOL)_isEligibleForFocusInteraction
{
  if ([(UIView *)self isHidden]
    || ![(UIView *)self _isEligibleForFocusGivenAlpha]
    || ![(UIView *)self isUserInteractionEnabled]
    || ![(UIView *)self _isFocusInteractionEnabled])
  {
    return 0;
  }
  BOOL v3 = [(UIView *)self _window];
  BOOL v4 = v3 != 0;

  return v4;
}

- (BOOL)_isFocusInteractionEnabled
{
  return (*((_DWORD *)&self->_viewFlags + 4) & 0x40000) == 0;
}

- (BOOL)_isEligibleForFocusGivenAlpha
{
  int v3 = dyld_program_sdk_at_least();
  [(UIView *)self alpha];
  BOOL v5 = fabs(v4) >= 2.22044605e-16;
  if (v3) {
    return v4 >= 0.01;
  }
  else {
    return v5;
  }
}

uint64_t __68__UIView_Internal___registerClassForIdiomInitializationIfNeccessary__block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  uint64_t v1 = (void *)_UIViewClassesRegisteredForIdiomInitialization;
  _UIViewClassesRegisteredForIdiomInitialization = (uint64_t)v0;

  uint64_t result = +[UIView methodForSelector:sel__initializeForIdiom_];
  qword_1EB25C230 = result;
  return result;
}

- (void)setFocusEffect:(UIFocusEffect *)focusEffect
{
  uint64_t v4 = 0x8000000;
  if (!focusEffect) {
    uint64_t v4 = 0x4000000;
  }
  *(void *)((char *)&self->_viewFlags + 20) = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFF3FFFFFFLL | v4;
  objc_setAssociatedObject(self, &FocusEffectKey, focusEffect, (void *)1);
  id v5 = [(UIView *)self _focusSystemSceneComponent];
  [v5 _requestFocusEffectUpdateToEnvironment:self];
}

- (void)_setAppearanceIsInvalid:(BOOL)a3
{
  uint64_t v3 = 0x20000000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFDFFFFFFFFFFLL | v3;
}

+ (void)transitionWithView:(UIView *)view duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void *)animations completion:(void *)completion
{
}

- (UILayoutGuide)readableContentGuide
{
  v20[6] = *MEMORY[0x1E4F143B8];
  readableContentGuide = self->_readableContentGuide;
  if (!readableContentGuide)
  {
    uint64_t v4 = objc_alloc_init(UILayoutGuide);
    id v5 = self->_readableContentGuide;
    self->_readableContentGuide = v4;

    [(UIView *)self addLayoutGuide:self->_readableContentGuide];
    [(UILayoutGuide *)self->_readableContentGuide _setLockedToOwningView:1];
    [(UILayoutGuide *)self->_readableContentGuide setIdentifier:@"UIViewReadableContentGuide"];
    id v6 = [(UIView *)self layoutMarginsGuide];
    uint64_t v7 = [MEMORY[0x1E4F5B268] constraintWithItem:self->_readableContentGuide attribute:3 relatedBy:0 toItem:v6 attribute:3];
    double v8 = [MEMORY[0x1E4F5B268] constraintWithItem:self->_readableContentGuide attribute:5 relatedBy:1 toItem:v6 attribute:5];
    uint64_t v9 = [MEMORY[0x1E4F5B268] constraintWithItem:v6 attribute:4 relatedBy:0 toItem:self->_readableContentGuide attribute:4];
    uint64_t v10 = [MEMORY[0x1E4F5B268] constraintWithItem:v6 attribute:6 relatedBy:1 toItem:self->_readableContentGuide attribute:6];
    uint64_t v11 = [MEMORY[0x1E4F5B268] constraintWithItem:self->_readableContentGuide attribute:9 relatedBy:0 toItem:v6 attribute:9];
    uint64_t v12 = [MEMORY[0x1E4F5B268] constraintWithItem:self->_readableContentGuide attribute:7 relatedBy:0 constant:_UIViewReadableWidthForView(self)];
    LODWORD(v13) = 1148837888;
    [v12 setPriority:v13];
    double v19 = v7;
    [v7 setIdentifier:@"UIView-top-readableContentGuide-constraint"];
    [v8 setIdentifier:@"UIView-leadingMargin-readableContentGuide-constraint"];
    [v9 setIdentifier:@"UIView-bottom-readableContentGuide-constraint"];
    [v10 setIdentifier:@"UIView-trailingMargin-readableContentGuide-constraint"];
    [v11 setIdentifier:@"UIView-centerX-readableContentGuide-constraint"];
    [v12 setIdentifier:@"UIView-width-readableContentGuide-constraint"];
    int64_t v14 = self->_readableContentGuide;
    v20[0] = v7;
    v20[1] = v8;
    _OWORD v20[2] = v9;
    v20[3] = v10;
    v20[4] = v11;
    v20[5] = v12;
    uint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:v20 count:6];
    [(UILayoutGuide *)v14 _setSystemConstraints:v15];

    uint64_t v16 = (void *)MEMORY[0x1E4F5B268];
    uint64_t v17 = [(UILayoutGuide *)self->_readableContentGuide _systemConstraints];
    [v16 activateConstraints:v17];

    readableContentGuide = self->_readableContentGuide;
  }
  return readableContentGuide;
}

- (BOOL)_applyKeyPathsAndRelativeValues:(id)a3 forMotionEffect:(id)a4
{
  return 0;
}

- (void)_removeBoundingPathChangeObserver:(id)a3
{
  id v4 = a3;
  id v5 = objc_getAssociatedObject(self, &_UIBoundingPathChangeObserversKey);
  id value = (NSMapTable *)[v5 copy];

  objc_setAssociatedObject(self, &_UIBoundingPathChangeObserversKey, value, (void *)1);
  uint64_t v6 = [(NSMapTable *)value count];
  uint64_t v7 = (uint64_t)NSMapGet(value, v4);
  if (v7 < 2) {
    NSMapRemove(value, v4);
  }
  else {
    NSMapInsert(value, v4, (const void *)(v7 - 1));
  }

  uint64_t v8 = [(NSMapTable *)value count];
  if (v6 && !v8)
  {
    [(UIView *)self _unregisterForGeometryChanges];
    -[UIView _removeBoundingPathRotationNotificationsForWindow:](self, 0);
    objc_setAssociatedObject(self, &_UIBoundingPathChangeObserversKey, 0, (void *)1);
  }
}

- (void)_unregisterForGeometryChanges
{
  p_uint64_t viewFlags = &self->_viewFlags;
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x3CLL) != 0)
  {
    id v4 = [(UIView *)self superview];
    -[UIView _removeGeometryChangeObserver:](v4, self);

    *((_DWORD *)p_viewFlags + 4) = *((_DWORD *)p_viewFlags + 4) & 0xFFFFFFC3 | (4
                                                                              * (((*((_DWORD *)p_viewFlags + 4) >> 2) - 1) & 0xF));
  }
}

- (void)_removeBoundingPathRotationNotificationsForWindow:(void *)a1
{
  id v7 = a2;
  if (a1)
  {
    uint64_t v3 = objc_getAssociatedObject(a1, &_UIBoundingPathWindowRotationObserverKey);
    if (v3)
    {
      id v4 = (void *)MEMORY[0x1E4F28EB8];
      id v5 = v7;
      uint64_t v6 = [v4 defaultCenter];
      [v6 removeObserver:v3 name:@"UIWindowWillAnimateRotationNotification" object:v5];

      objc_setAssociatedObject(a1, &_UIBoundingPathWindowRotationObserverKey, 0, (void *)1);
    }
  }
}

void __39__UIView_Hierarchy___willMoveToWindow___block_invoke()
{
  _UIMainBundleIdentifier();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EB25C0AF = [v0 isEqualToString:@"com.apple.WorkflowUI.SystemActionConfigurationExtension"];
}

- (void)setFocusGroupIdentifier:(NSString *)focusGroupIdentifier
{
  uint64_t v3 = 0x1000000;
  if (!focusGroupIdentifier) {
    uint64_t v3 = 0x800000;
  }
  *(void *)((char *)&self->_viewFlags + 20) = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFE7FFFFFLL | v3;
  objc_setAssociatedObject(self, &FocusGroupIdentifierKey_0, focusGroupIdentifier, (void *)1);
}

- (BOOL)_safeAreaWidthExceedsReadableWidth
{
  [(UIView *)self safeAreaInsets];
  return _UIViewSafeAreaWidthExceedsReadableWidth(self, v3, v4, v5, v6);
}

- (CGRect)_inscribedRectInBoundingPathByInsettingRect:(CGRect)a3 onEdges:(unint64_t)a4 withOptions:(unint64_t)a5
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  id v42 = 0;
  uint64_t v12 = [(UIView *)self _effectiveBoundingPathAndBoundingPathView:&v42];
  id v13 = v42;
  [(UIView *)self bounds];
  -[UIView convertRect:toView:](self, "convertRect:toView:", v13);
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;
  -[UIView convertRect:toView:](self, "convertRect:toView:", v13, x, y, width, height);
  objc_msgSend(v12, "_inscribedRectInBoundingPathAndRect:byInsettingRect:onEdges:withOptions:", a4, a5, v15, v17, v19, v21, v22, v23, v24, v25);
  double v26 = v43.origin.x;
  double v27 = v43.origin.y;
  double v28 = v43.size.width;
  double v29 = v43.size.height;
  if (CGRectIsNull(v43))
  {
    double v30 = *MEMORY[0x1E4F1DB20];
    double v31 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v32 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v33 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  else
  {
    -[UIView convertRect:fromView:](self, "convertRect:fromView:", v13, v26, v27, v28, v29);
    double v30 = v34;
    double v31 = v35;
    double v32 = v36;
    double v33 = v37;
  }

  double v38 = v30;
  double v39 = v31;
  double v40 = v32;
  double v41 = v33;
  result.size.double height = v41;
  result.size.double width = v40;
  result.origin.double y = v39;
  result.origin.double x = v38;
  return result;
}

- (void)_setContentSizeNotificationToken:(id)a3
{
  id value = a3;
  id v4 = [(UIView *)self _contentSizeNotificationToken];
  if (v4 != value)
  {
    if (v4)
    {
      double v5 = [MEMORY[0x1E4F28EB8] defaultCenter];
      [v5 removeObserver:v4];
    }
    objc_setAssociatedObject(self, &_UIViewContentSizeNotificationTokenKey, value, (void *)1);
    *(void *)((char *)&self->_viewFlags + 20) = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFEFFFLL | ((unint64_t)(value != 0) << 12);
  }
}

- (id)_contentSizeNotificationToken
{
  if ((*((unsigned char *)&self->_viewFlags + 21) & 0x10) != 0)
  {
    BOOL v2 = objc_getAssociatedObject(self, &_UIViewContentSizeNotificationTokenKey);
  }
  else
  {
    BOOL v2 = 0;
  }
  return v2;
}

uint64_t __58__UIView_UIDebugging___toolsDebugShouldDetectClippedViews__block_invoke()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  if (result)
  {
    uint64_t result = _UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIDetectClippedViews, @"UIDetectClippedViews", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    byte_1EB25C0B0 = (byte_1EB257B04 != 0) & ~(_BYTE)result;
  }
  return result;
}

- (NSArray)constraints
{
  BOOL v2 = (NSArray *)_UIViewConstraints(self);
  if (!dyld_program_sdk_at_least()) {
    return v2;
  }
  double v3 = [(NSArray *)v2 sortedArrayUsingFunction:compareConstraintsAlphabetically context:&__block_literal_global_378_0];
  return [(NSArray *)v3 sortedArrayUsingFunction:compareConstraintsAlphabetically context:&__block_literal_global_380];
}

- (id)constraintsAffectingLayoutForAxis:(int64_t)a3 ofItem:(id)a4
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  double v6 = objc_msgSend(a4, "nsli_layoutEngine");
  if (v6)
  {
    id v7 = v6;
    if (a3)
    {
      uint64_t v8 = objc_msgSend(v6, "constraintsAffectingValueOfVariable:", objc_msgSend(a4, "nsli_minYVariable"));
      uint64_t v9 = objc_msgSend(v7, "constraintsAffectingValueOfVariable:", objc_msgSend(a4, "nsli_boundsHeightVariable"));
      if (objc_msgSend(a4, "nsli_contentHeightVariable")) {
        uint64_t v10 = objc_msgSend(v7, "constraintsAffectingValueOfVariable:", objc_msgSend(a4, "nsli_contentHeightVariable"));
      }
      else {
        uint64_t v10 = 0;
      }
      id v17 = (id)[v8 mutableCopy];
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      uint64_t v18 = [v9 countByEnumeratingWithState:&v42 objects:v55 count:16];
      if (v18)
      {
        uint64_t v19 = v18;
        uint64_t v20 = *(void *)v43;
        do
        {
          for (uint64_t i = 0; i != v19; ++i)
          {
            if (*(void *)v43 != v20) {
              objc_enumerationMutation(v9);
            }
            uint64_t v22 = *(void *)(*((void *)&v42 + 1) + 8 * i);
            if (([v17 containsObject:v22] & 1) == 0) {
              [v17 addObject:v22];
            }
          }
          uint64_t v19 = [v9 countByEnumeratingWithState:&v42 objects:v55 count:16];
        }
        while (v19);
      }
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      uint64_t v23 = [v10 countByEnumeratingWithState:&v38 objects:v54 count:16];
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = *(void *)v39;
        do
        {
          for (uint64_t j = 0; j != v24; ++j)
          {
            if (*(void *)v39 != v25) {
              objc_enumerationMutation(v10);
            }
            uint64_t v27 = *(void *)(*((void *)&v38 + 1) + 8 * j);
            if (([v17 containsObject:v27] & 1) == 0) {
              [v17 addObject:v27];
            }
          }
          uint64_t v24 = [v10 countByEnumeratingWithState:&v38 objects:v54 count:16];
        }
        while (v24);
      }
    }
    else
    {
      id v13 = objc_msgSend(v6, "constraintsAffectingValueOfVariable:", objc_msgSend(a4, "nsli_minXVariable"));
      double v14 = objc_msgSend(v7, "constraintsAffectingValueOfVariable:", objc_msgSend(a4, "nsli_boundsWidthVariable"));
      uint64_t v15 = objc_msgSend(a4, "nsli_contentWidthVariable");
      if (v15) {
        double v16 = (void *)[v7 constraintsAffectingValueOfVariable:v15];
      }
      else {
        double v16 = 0;
      }
      id v17 = (id)[v13 mutableCopy];
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      uint64_t v28 = [v14 countByEnumeratingWithState:&v50 objects:v57 count:16];
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = *(void *)v51;
        do
        {
          for (uint64_t k = 0; k != v29; ++k)
          {
            if (*(void *)v51 != v30) {
              objc_enumerationMutation(v14);
            }
            uint64_t v32 = *(void *)(*((void *)&v50 + 1) + 8 * k);
            if (([v17 containsObject:v32] & 1) == 0) {
              [v17 addObject:v32];
            }
          }
          uint64_t v29 = [v14 countByEnumeratingWithState:&v50 objects:v57 count:16];
        }
        while (v29);
      }
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      uint64_t v33 = [v16 countByEnumeratingWithState:&v46 objects:v56 count:16];
      if (v33)
      {
        uint64_t v34 = v33;
        uint64_t v35 = *(void *)v47;
        do
        {
          for (uint64_t m = 0; m != v34; ++m)
          {
            if (*(void *)v47 != v35) {
              objc_enumerationMutation(v16);
            }
            uint64_t v37 = *(void *)(*((void *)&v46 + 1) + 8 * m);
            if (([v17 containsObject:v37] & 1) == 0) {
              [v17 addObject:v37];
            }
          }
          uint64_t v34 = [v16 countByEnumeratingWithState:&v46 objects:v56 count:16];
        }
        while (v34);
      }
    }
    return (id)objc_msgSend((id)objc_msgSend(v17, "sortedArrayUsingFunction:context:", compareConstraintsAlphabetically, &__block_literal_global_378_0), "sortedArrayUsingFunction:context:", compareConstraintsAlphabetically, &__block_literal_global_380);
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x1E4F1C978];
    return (id)[v11 array];
  }
}

- (id)nsli_contentWidthVariable
{
  return 0;
}

- (id)nsli_contentHeightVariable
{
  return 0;
}

+ (void)conditionallyAnimate:(BOOL)a3 withAnimation:(id)a4 layout:(id)a5 completion:(id)a6
{
  BOOL v8 = a3;
  uint64_t v11 = (void (**)(id, void (**)(void), id))a4;
  uint64_t v9 = (void (**)(void))a5;
  uint64_t v10 = (void (**)(id, uint64_t))a6;
  if (v8)
  {
    v11[2](v11, v9, v10);
  }
  else
  {
    if (v9) {
      v9[2](v9);
    }
    if (v10) {
      v10[2](v10, 1);
    }
  }
}

- (void)setExclusiveTouch:(BOOL)exclusiveTouch
{
  uint64_t v3 = 0x40000000;
  if (!exclusiveTouch) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFFFBFFFFFFFLL | v3;
}

- (void)setDeliversTouchesForGesturesToSuperview:(BOOL)a3
{
  uint64_t v3 = 0x200000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFFDFFFFFFFFLL | v3;
}

- (void)_privateSubview_updateGeometryWithCenter:(CGPoint)a3 bounds:(CGRect)a4
{
  double height = a4.size.height;
  double width = a4.size.width;
  double y = a4.origin.y;
  double x = a4.origin.x;
  -[UIView setCenter:](self, "setCenter:", a3.x, a3.y);
  -[UIView setBounds:](self, "setBounds:", x, y, width, height);
}

- (void)setCompositingMode:(int64_t)a3
{
  if (a3)
  {
    _UICompositingFilterForMode(a3);
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    [(CALayer *)self->_layer setCompositingFilter:v5];
  }
  else
  {
    layer = self->_layer;
    -[CALayer setCompositingFilter:](layer, "setCompositingFilter:");
  }
}

- (void)addAnimation:(id)a3 forKey:(id)a4
{
}

- (CGSize)convertSize:(CGSize)a3 toView:(id)a4
{
  id v4 = (UIView *)a4;
  double height = a3.height;
  double width = a3.width;
  if (!a4) {
    id v4 = (UIView *)[(UIView *)self window];
  }
  if (v4 && v4 != self)
  {
    layer = v4->_layer;
    uint64_t v9 = self->_layer;
    -[CALayer convertPoint:toLayer:](v9, "convertPoint:toLayer:", layer, width, height);
    double v11 = v10;
    double v13 = v12;

    double v14 = self->_layer;
    uint64_t v15 = v4->_layer;
    double v16 = *MEMORY[0x1E4F1DAD8];
    double v17 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    uint64_t v18 = v14;
    -[CALayer convertPoint:toLayer:](v18, "convertPoint:toLayer:", v15, v16, v17);
    double v20 = v19;
    double v22 = v21;

    double width = vabdd_f64(v11, v20);
    double height = vabdd_f64(v13, v22);
  }
  double v23 = width;
  double v24 = height;
  result.double height = v24;
  result.double width = v23;
  return result;
}

- (void)_removeMultiLayerDelegate:(uint64_t)a1
{
  if (a1)
  {
    -[UIView _multiLayerDelegatesTableCreateIfNecessary:]((char *)a1, 0);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    [v4 removeObject:a2];
    if (![v4 count])
    {
      objc_setAssociatedObject((id)a1, &_UIViewMultiLayerDelegateTable, 0, (void *)0x301);
      *(void *)(a1 + 116) &= ~0x4000000000uLL;
    }
  }
}

- (void)_registerMultiLayerDelegate:(char *)a1
{
  if (a1)
  {
    -[UIView _multiLayerDelegatesTableCreateIfNecessary:](a1, 1);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    [v3 addObject:a2];
  }
}

- (id)_multiLayerDelegatesTableCreateIfNecessary:(char *)object
{
  if (object)
  {
    if ((object[120] & 0x40) != 0)
    {
      id v3 = objc_getAssociatedObject(object, &_UIViewMultiLayerDelegateTable);
      if (v3) {
        goto LABEL_8;
      }
      id v4 = [MEMORY[0x1E4F28B00] currentHandler];
      [v4 handleFailureInMethod:sel__multiLayerDelegatesTableCreateIfNecessary_ object:object file:@"_UIViewBacking.m" lineNumber:514 description:@"Multi layer delegate table missing."];
    }
    else if (a2)
    {
      id v3 = [MEMORY[0x1E4F28D30] weakObjectsHashTable];
      objc_setAssociatedObject(object, &_UIViewMultiLayerDelegateTable, v3, (void *)0x301);
      *(void *)(object + 116) |= 0x4000000000uLL;
      goto LABEL_8;
    }
  }
  id v3 = 0;
LABEL_8:
  return v3;
}

- (NSArray)motionEffects
{
  BOOL v2 = [(id)_motionEffectEngine _motionEffectsForView:self];
  if (!v2)
  {
    if (dyld_program_sdk_at_least()) {
      BOOL v2 = (void *)MEMORY[0x1E4F1CBF0];
    }
    else {
      BOOL v2 = 0;
    }
  }
  return (NSArray *)v2;
}

+ (uint64_t)_materialSidebarsEnabled
{
  if (_materialSidebarsEnabled_onceToken[0] != -1) {
    dispatch_once(_materialSidebarsEnabled_onceToken, &__block_literal_global_30_0);
  }
  return _materialSidebarsEnabled_materialSidebarsEnabled;
}

- (void)mt_setCaptureGroupName:(id)a3
{
  *(void *)((char *)&self->_viewFlags + 20) = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFEFFFFFFFFFFFLL | ((unint64_t)([a3 length] != 0) << 44);
  viewBackingAudouble x = self->_viewBackingAux;
  if (viewBackingAux) {
    captureGroupName = viewBackingAux->_captureGroupName;
  }
  else {
    captureGroupName = 0;
  }
  if (![(NSString *)captureGroupName isEqualToString:a3])
  {
    -[UIView _mt_setCaptureGroupName:]((uint64_t *)self, a3);
    -[UIView _updateCaptureGroupRecursively](self);
  }
}

- (void)_updateParallaxEffectWithAltitude:(double)a3 bias:(double)a4
{
  if (a1
    && +[_UIMotionEffectEngine _motionEffectsSupported])
  {
    BOOL v8 = objc_getAssociatedObject(a1, &unk_1EB25C0AB);
    uint64_t v9 = v8;
    double v10 = a3 * a2;
    double v11 = a4 * a2;
    if (v8)
    {
      [v8 slideMagnitude];
      if (v13 == v10 && v12 == v11)
      {
LABEL_16:

        return;
      }
      [a1 _removeMotionEffect:v9];
    }
    if (a2 == 0.0)
    {
      objc_setAssociatedObject(a1, &unk_1EB25C0AB, 0, (void *)1);
    }
    else
    {
      *(double *)double v19 = v10;
      *(double *)&v19[1] = v11;
      uint64_t v15 = [MEMORY[0x1E4F29238] valueWithBytes:v19 objCType:"{UIOffset=dd}"];
      double v16 = [(id)qword_1EB25C1A8 objectForKey:v15];
      if (!v16)
      {
        if (!qword_1EB25C1A8)
        {
          uint64_t v17 = [objc_alloc(MEMORY[0x1E4F28E10]) initWithKeyOptions:0 valueOptions:517 capacity:1];
          uint64_t v18 = (void *)qword_1EB25C1A8;
          qword_1EB25C1A8 = v17;
        }
        double v16 = objc_alloc_init(_UIParallaxMotionEffect);
        -[_UIParallaxMotionEffect setSlideMagnitude:](v16, "setSlideMagnitude:", v10, v11);
        [(id)qword_1EB25C1A8 setObject:v16 forKey:v15];
      }
      objc_setAssociatedObject(a1, &unk_1EB25C0AB, v16, (void *)1);
      [a1 _addMotionEffect:v16];
    }
    goto LABEL_16;
  }
}

- (void)setTintAdjustmentMode:(UIViewTintAdjustmentMode)tintAdjustmentMode
{
  p_uint64_t viewFlags = &self->_viewFlags;
  *((void *)&v4 + 1) = *((unsigned int *)&self->_viewFlags + 4);
  *(void *)&long long v4 = *((void *)&self->_viewFlags + 1);
  if (((v4 >> 35) & 3) != tintAdjustmentMode)
  {
    uint64_t v5 = *(void *)p_viewFlags;
    unint64_t v6 = *((void *)&self->_viewFlags + 1) & 0xFFFFFFE7FFFFFFFFLL | ((unint64_t)(tintAdjustmentMode & 3) << 35);
    *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4);
    *(void *)p_uint64_t viewFlags = v5;
    *((void *)&self->_viewFlags + 1) = v6;
    -[UIView _dispatchTintColorVisitorWithReasons:](self, 2);
    if (qword_1EB25C338 != -1)
    {
      dispatch_once(&qword_1EB25C338, &__block_literal_global_3730);
    }
  }
}

- (void)_beginOcclusion:(id)a3
{
  id v4 = a3;
  if (self->_tintAdjustmentDimmingCount || (*((void *)&self->_viewFlags + 1) & 0x1800000000) != 0)
  {
    ++self->_tintAdjustmentDimmingCount;
  }
  else
  {
    id v8 = v4;
    UIViewTintAdjustmentMode v5 = [(UIView *)self tintAdjustmentMode];
    ++self->_tintAdjustmentDimmingCount;
    BOOL v6 = v5 == UIViewTintAdjustmentModeDimmed;
    id v4 = v8;
    if (!v6)
    {
      -[UIView _dispatchTintColorVisitorWithReasons:](self, 2);
      id v7 = +[_UIHDRUsageCoordinator sharedInstance]();
      -[_UIHDRUsageCoordinator enableHDRSuppression:inViewHierarchy:]((uint64_t)v7, 1, self);

      id v4 = v8;
    }
  }
}

- (id)_scroller
{
  id v2 = [(UIView *)self superview];
  if (v2)
  {
    id v3 = v2;
    while (!objc_msgSend(v3, "__isKindOfUIScrollView")
         || ([v3 _forwardsToParentScroller] & 1) != 0)
    {
      id v2 = (id)[v3 superview];
      id v3 = v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    id v2 = v3;
  }
LABEL_8:
  return v2;
}

- (CGRect)_sourceRectForPresentationInWindow:(id)a3
{
  double v3 = *MEMORY[0x1E4F1DB20];
  double v4 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double v5 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double v6 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

- (void)setTag:(NSInteger)tag
{
}

- (void)insertSubview:(id)a3 below:(id)a4
{
}

+ (void)disableAnimation
{
  __animate = 0;
}

+ (BOOL)_motionEffectsEnabled
{
  return +[_UIMotionEffectEngine _motionEffectsEnabled];
}

- (void)_setVisualAltitude:(double)a3
{
  if (_shouldEnableUIKitParallaxEffects())
  {
    uint64_t v5 = *((void *)&self->_viewFlags + 1);
    int v6 = *((_DWORD *)&self->_viewFlags + 4);
    *(void *)&self->_uint64_t viewFlags = self->_viewFlags;
    if (a3 == 0.0)
    {
      *((void *)&self->_viewFlags + 1) = v5 & 0xFFFFFFFFFF7FFFFFLL;
      *((_DWORD *)&self->_viewFlags + 4) = v6;
      objc_setAssociatedObject(self, &_visualAltitudeKey, 0, (void *)1);
    }
    else
    {
      *((void *)&self->_viewFlags + 1) = v5 | 0x800000;
      *((_DWORD *)&self->_viewFlags + 4) = v6;
      id v7 = [NSNumber numberWithDouble:a3];
      objc_setAssociatedObject(self, &_visualAltitudeKey, v7, (void *)1);
    }
    [(UIView *)self _visualAltitudeBias];
    [(UIView *)self _updateParallaxEffectWithAltitude:v8 bias:v9];
  }
}

- (CGSize)_visualAltitudeBias
{
  id v2 = objc_getAssociatedObject(self, &_visualAltitudeBiasKey);
  double v3 = v2;
  if (v2)
  {
    [v2 CGSizeValue];
    double v5 = v4;
    double v7 = v6;
  }
  else
  {
    double v5 = 1.0;
    double v7 = 1.0;
  }

  double v8 = v5;
  double v9 = v7;
  result.double height = v9;
  result.double width = v8;
  return result;
}

void __40__UIView_Hierarchy__layoutBelowIfNeeded__block_invoke(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) _switchToLayoutEngine:*(void *)(a1 + 40)];
  int v2 = dyld_program_sdk_at_least();
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2)
  {
    char v4 = [*(id *)(a1 + 32) translatesAutoresizingMaskIntoConstraints];
    uint64_t v3 = *(void *)(a1 + 32);
    if ((v4 & 1) == 0 && (*(void *)(v3 + 96) & 0x800000000000000) != 0)
    {
      id v5 = *(id *)(v3 + 88);

      if (!v5)
      {
LABEL_22:
        CGFloat v12 = *MEMORY[0x1E4F1DB28];
        CGFloat v14 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
        CGFloat v16 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
        CGFloat v18 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
        int v19 = 1112014848;
        goto LABEL_16;
      }
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      double v6 = objc_msgSend(*(id *)(a1 + 48), "_allSubviews", 0);
      uint64_t v7 = [v6 countByEnumeratingWithState:&v28 objects:v32 count:16];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)v29;
        while (2)
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            if (*(void *)v29 != v9) {
              objc_enumerationMutation(v6);
            }
            if ([*(id *)(*((void *)&v28 + 1) + 8 * i) _wantsAutolayout])
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {

                goto LABEL_22;
              }
            }
          }
          uint64_t v8 = [v6 countByEnumeratingWithState:&v28 objects:v32 count:16];
          if (v8) {
            continue;
          }
          break;
        }
      }

      uint64_t v3 = *(void *)(a1 + 32);
    }
  }
  [(id)v3 bounds];
  objc_msgSend((id)v3, "alignmentRectForFrame:");
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  int v19 = 1148846080;
LABEL_16:
  int v20 = v19;
  v34.origin.double x = v12;
  v34.origin.double y = v14;
  v34.size.double width = v16;
  v34.size.double height = v18;
  double v21 = [MEMORY[0x1E4F5B268] constraintWithItem:*(void *)(a1 + 32) attribute:7 relatedBy:0 constant:CGRectGetWidth(v34)];
  [v21 setIdentifier:@"_UITemporaryLayoutWidth"];
  LODWORD(v22) = v20;
  [v21 setPriority:v22];
  [v21 setContainer:*(void *)(a1 + 32)];
  [v21 _addToEngine:*(void *)(a1 + 40)];
  v35.origin.double x = v12;
  v35.origin.double y = v14;
  v35.size.double width = v16;
  v35.size.double height = v18;
  double v23 = [MEMORY[0x1E4F5B268] constraintWithItem:*(void *)(a1 + 32) attribute:8 relatedBy:0 constant:CGRectGetHeight(v35)];
  [v23 setIdentifier:@"_UITemporaryLayoutHeight"];
  LODWORD(v24) = v20;
  [v23 setPriority:v24];
  [v23 setContainer:*(void *)(a1 + 32)];
  [v23 _addToEngine:*(void *)(a1 + 40)];
  uint64_t v25 = *(void **)(a1 + 32);
  if ((dyld_program_sdk_at_least() & 1) != 0
    || v25 && [v25 _forceLayoutEngineSolutionInRationalEdges])
  {
    double v26 = [MEMORY[0x1E4F5B238] constraintWithItem:*(void *)(a1 + 32) attribute:32 relatedBy:0 constant:0.0];
    [v26 setIdentifier:@"_UITemporaryLayoutLeft"];
    [v26 setContainer:*(void *)(a1 + 32)];
    [v26 _addToEngine:*(void *)(a1 + 40)];
    uint64_t v27 = [MEMORY[0x1E4F5B238] constraintWithItem:*(void *)(a1 + 32) attribute:33 relatedBy:0 constant:0.0];
    [v27 setIdentifier:@"_UITemporaryLayoutTop"];
    [v27 setContainer:*(void *)(a1 + 32)];
    [v27 _addToEngine:*(void *)(a1 + 40)];
  }
}

void __50__UIView__UIViewBacking___materialSidebarsEnabled__block_invoke()
{
  id v0 = [MEMORY[0x1E4F28B50] mainBundle];
  uint64_t v1 = [v0 infoDictionary];
  id v2 = [v1 objectForKey:@"UISplitViewControllerAutomaticMaterialsEnabled"];

  if (v2)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      _materialSidebarsEnabled_materialSidebarsEnabled = [v2 BOOLValue];
    }
  }
}

void __75__UIView__shouldInvalidateTraitCollectionForSemanticContentAttributeChange__block_invoke()
{
  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    id v0 = _UIMainBundleIdentifier();
    if ([v0 isEqualToString:@"com.zhiliaoapp.musically"])
    {
      byte_1EB25C0AE = 1;
    }
    else
    {
      uint64_t v1 = _UIMainBundleIdentifier();
      byte_1EB25C0AE = [v1 isEqualToString:@"com.blued.international"];
    }
    if (!byte_1EB25C0AE)
    {
      id v2 = [MEMORY[0x1E4F28B50] _bundleWithIdentifier:@"com.epic.MyChartFramework" andLibraryName:@"MyChart"];
      byte_1EB25C0AE = v2 != 0;
    }
  }
}

- (NSString)debugDescription
{
  return (NSString *)+[UIView _descriptionWithoutTextRedactionForObject:self];
}

+ (void)enableAnimation
{
  __animate = 1;
}

- (BOOL)endEditing:(BOOL)force
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = self;
  }
  else
  {
    id v5 = [(UIView *)self window];
  }
  double v6 = v5;
  uint64_t v7 = [(UIResponder *)v5 firstResponder];
  if (v7)
  {
    if (![(UIResponder *)self _containsResponder:v7]
      || !force && ![v7 canResignFirstResponder])
    {
      BOOL v8 = 0;
      goto LABEL_11;
    }
    [v7 resignFirstResponder];
  }
  BOOL v8 = 1;
LABEL_11:

  return v8;
}

- (void)_flushConstraintsPendingAnimatedChanges
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(id)qword_1EB25C108 objectForKey:self];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(v3);
        }
        BOOL v8 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        uint64_t v9 = [v8 container];
        if (!v9)
        {
          double v10 = [(UIView *)self _layoutEngine];
          [v8 _removeFromEngine:v10];
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v23 objects:v28 count:16];
    }
    while (v5);
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v11 = v3;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v19 objects:v27 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v20;
    do
    {
      for (uint64_t j = 0; j != v13; ++j)
      {
        if (*(void *)v20 != v14) {
          objc_enumerationMutation(v11);
        }
        CGFloat v16 = *(void **)(*((void *)&v19 + 1) + 8 * j);
        objc_msgSend(v16, "container", (void)v19);
        double v17 = (UIView *)objc_claimAutoreleasedReturnValue();

        if (v17 == self)
        {
          if ([v16 hasBeenLowered])
          {
            [v16 _containerGeometryDidChange];
            [v16 priority];
            objc_msgSend(v16, "setPriority:");
          }
          else
          {
            CGFloat v18 = [(UIView *)self _layoutEngine];
            [v16 _addToEngine:v18];
          }
        }
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v19 objects:v27 count:16];
    }
    while (v13);
  }

  [(id)qword_1EB25C108 removeObjectForKey:self];
}

- (void)_setLocalOverrideTraitCollection:(id)a3
{
  id v4 = a3;
  int v5 = *((_DWORD *)&self->_viewFlags + 4);
  if (v4 || (v5 & 0x100) != 0)
  {
    id v8 = v4;
    if ((v5 & 0x100) != 0)
    {
      uint64_t v6 = objc_getAssociatedObject(self, &_UIViewTraitOverridesKey);
    }
    else
    {
      uint64_t v6 = -[_UITraitOverrides initWithDelegate:]([_UITraitOverrides alloc], self);
      objc_setAssociatedObject(self, &_UIViewTraitOverridesKey, v6, (void *)1);
      *((_DWORD *)&self->_viewFlags + 4) |= 0x100u;
    }
    uint64_t v7 = -[_UITraitOverrides _overridesAppliedBefore](v6);
    -[_UITraitOverrides _replaceOverrideTraitCollection:]((uint64_t)v7, v8);

    id v4 = v8;
  }
}

uint64_t __72__UIView_Animation___setAlongsideAnimations_toRunByEndOfBlock_animated___block_invoke(uint64_t a1)
{
  uint64_t result = __UIVIEW_IS_EXECUTING_ALONGSIDE_ANIMATION_BLOCK__(*(void *)(a1 + 32));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

- (void)_setIgnoresLayerTransformForSafeAreaInsets:(BOOL)a3
{
  if (a3) {
    int v3 = 0x800000;
  }
  else {
    int v3 = 0;
  }
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFF7FFFFF | v3;
}

- (void)_raiseExceptionForBackgroundThreadLayerPropertyModification
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v3 = -[UIView __viewDelegate]((id *)&self->super.super.isa);
  if (v3)
  {
    id v4 = v3;
    if (pthread_main_np() == 1) {
      return;
    }
    if (!os_variant_has_internal_diagnostics())
    {
      int v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_MergedGlobals_1327) + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = (objc_class *)objc_opt_class();
        uint64_t v7 = NSStringFromClass(v6);
        id v8 = (objc_class *)objc_opt_class();
        int v32 = 138413314;
        uint64_t v33 = v7;
        __int16 v34 = 2048;
        CGRect v35 = self;
        __int16 v36 = 2112;
        uint64_t v37 = NSStringFromClass(v8);
        __int16 v38 = 2048;
        long long v39 = v4;
        __int16 v40 = 2112;
        uint64_t v41 = [MEMORY[0x1E4F29060] callStackSymbols];
        uint64_t v9 = "Modifying properties of a view's layer off the main thread is not allowed: view <%@: %p> with associated vi"
             "ew controller <%@: %p>; backtrace: \n"
             "%@";
LABEL_11:
        double v15 = v5;
        uint32_t v16 = 52;
LABEL_12:
        _os_log_impl(&dword_1853B0000, v15, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v32, v16);
        return;
      }
      return;
    }
    long long v20 = __UIFaultDebugAssertLog();
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_FAULT)) {
      return;
    }
    long long v21 = (objc_class *)objc_opt_class();
    long long v22 = NSStringFromClass(v21);
    long long v23 = (objc_class *)objc_opt_class();
    int v32 = 138413314;
    uint64_t v33 = v22;
    __int16 v34 = 2048;
    CGRect v35 = self;
    __int16 v36 = 2112;
    uint64_t v37 = NSStringFromClass(v23);
    __int16 v38 = 2048;
    long long v39 = v4;
    __int16 v40 = 2112;
    uint64_t v41 = [MEMORY[0x1E4F29060] callStackSymbols];
    long long v24 = "Modifying properties of a view's layer off the main thread is not allowed: view <%@: %p> with associated view "
          "controller <%@: %p>; backtrace: \n"
          "%@";
    goto LABEL_23;
  }
  double v10 = [(UIView *)self _viewControllerForAncestor];
  int v11 = pthread_main_np();
  if (!v10)
  {
    if (v11 == 1) {
      return;
    }
    if (!os_variant_has_internal_diagnostics())
    {
      CGFloat v18 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB2650C8) + 8);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        long long v19 = (objc_class *)objc_opt_class();
        int v32 = 138412802;
        uint64_t v33 = NSStringFromClass(v19);
        __int16 v34 = 2048;
        CGRect v35 = self;
        __int16 v36 = 2112;
        uint64_t v37 = (NSString *)[MEMORY[0x1E4F29060] callStackSymbols];
        uint64_t v9 = "Modifying properties of a view's layer off the main thread is not allowed: view <%@: %p> with no associated"
             " or ancestor view controller; backtrace: \n"
             "%@";
        double v15 = v18;
        uint32_t v16 = 32;
        goto LABEL_12;
      }
      return;
    }
    long long v30 = __UIFaultDebugAssertLog();
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_FAULT)) {
      return;
    }
    long long v31 = (objc_class *)objc_opt_class();
    int v32 = 138412802;
    uint64_t v33 = NSStringFromClass(v31);
    __int16 v34 = 2048;
    CGRect v35 = self;
    __int16 v36 = 2112;
    uint64_t v37 = (NSString *)[MEMORY[0x1E4F29060] callStackSymbols];
    long long v24 = "Modifying properties of a view's layer off the main thread is not allowed: view <%@: %p> with no associated or"
          " ancestor view controller; backtrace: \n"
          "%@";
    long long v28 = v30;
    uint32_t v29 = 32;
LABEL_24:
    _os_log_fault_impl(&dword_1853B0000, v28, OS_LOG_TYPE_FAULT, v24, (uint8_t *)&v32, v29);
    return;
  }
  if (v11 == 1) {
    return;
  }
  if (os_variant_has_internal_diagnostics())
  {
    long long v20 = __UIFaultDebugAssertLog();
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_FAULT)) {
      return;
    }
    long long v25 = (objc_class *)objc_opt_class();
    long long v26 = NSStringFromClass(v25);
    uint64_t v27 = (objc_class *)objc_opt_class();
    int v32 = 138413314;
    uint64_t v33 = v26;
    __int16 v34 = 2048;
    CGRect v35 = self;
    __int16 v36 = 2112;
    uint64_t v37 = NSStringFromClass(v27);
    __int16 v38 = 2048;
    long long v39 = v10;
    __int16 v40 = 2112;
    uint64_t v41 = [MEMORY[0x1E4F29060] callStackSymbols];
    long long v24 = "Modifying properties of a view's layer off the main thread is not allowed: view <%@: %p> with nearest ancestor"
          " view controller <%@: %p>; backtrace: \n"
          "%@";
LABEL_23:
    long long v28 = v20;
    uint32_t v29 = 52;
    goto LABEL_24;
  }
  int v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB2650C0) + 8);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = (objc_class *)objc_opt_class();
    uint64_t v13 = NSStringFromClass(v12);
    uint64_t v14 = (objc_class *)objc_opt_class();
    int v32 = 138413314;
    uint64_t v33 = v13;
    __int16 v34 = 2048;
    CGRect v35 = self;
    __int16 v36 = 2112;
    uint64_t v37 = NSStringFromClass(v14);
    __int16 v38 = 2048;
    long long v39 = v10;
    __int16 v40 = 2112;
    uint64_t v41 = [MEMORY[0x1E4F29060] callStackSymbols];
    uint64_t v9 = "Modifying properties of a view's layer off the main thread is not allowed: view <%@: %p> with nearest ancestor "
         "view controller <%@: %p>; backtrace: \n"
         "%@";
    goto LABEL_11;
  }
}

- (void)setHoverStyle:(UIHoverStyle *)hoverStyle
{
  int v5 = hoverStyle;
  uint64_t v6 = self;
  UIView.hoverStyle.setter((char *)hoverStyle);
}

- (void)_setHoverStyleStorage:(void *)a1
{
  if (a1) {
    objc_setAssociatedObject(a1, &_UIHoverStyleStorageKey, value, (void *)1);
  }
}

+ (void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)dampingRatio initialSpringVelocity:(CGFloat)velocity options:(UIViewAnimationOptions)options animations:(void *)animations completion:(void *)completion
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __138__UIView_UIViewAnimationWithBlocks__animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion___block_invoke;
  v9[3] = &__block_descriptor_56_e5_v8__0l;
  *(NSTimeInterval *)&v9[4] = duration;
  *(CGFloat *)&void v9[5] = dampingRatio;
  *(CGFloat *)&v9[6] = velocity;
  [a1 _setupAnimationWithDuration:0 delay:options view:0 options:animations factory:0 animations:v9 start:duration animationStateGenerator:delay completion:completion];
}

- (void)_setVisualAltitudeBias:(CGSize)a3
{
  double height = a3.height;
  double width = a3.width;
  if (a3.width == 1.0 && a3.height == 1.0)
  {
    objc_setAssociatedObject(self, &_visualAltitudeBiasKey, 0, (void *)1);
  }
  else
  {
    uint64_t v7 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGSize:", a3.width, a3.height);
    objc_setAssociatedObject(self, &_visualAltitudeBiasKey, v7, (void *)1);
  }
  [(UIView *)self _visualAltitude];
  [(UIView *)self _updateParallaxEffectWithAltitude:width bias:height];
}

- (double)_visualAltitude
{
  if ((*((void *)&self->_viewFlags + 1) & 0x800000) == 0) {
    return 0.0;
  }
  int v3 = objc_getAssociatedObject(self, &_visualAltitudeKey);
  [v3 doubleValue];
  double v5 = v4;

  return v5;
}

uint64_t __67__UIView__UIViewBacking___defaultKeyPathsToSyncWithPrivateSubviews__block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  uint64_t v1 = (void *)_MergedGlobals_1079;
  _MergedGlobals_1079 = (uint64_t)v0;

  [(id)_MergedGlobals_1079 addObject:@"maskedCorners"];
  [(id)_MergedGlobals_1079 addObject:@"continuousCorners"];
  [(id)_MergedGlobals_1079 addObject:@"cornerRadius"];
  [(id)_MergedGlobals_1079 addObject:@"cornerCurve"];
  id v2 = (void *)_MergedGlobals_1079;
  return [v2 addObject:@"masksToBounds"];
}

- (void)_finishDecodingLayoutGuideConnections:(id *)a1
{
  id v4 = a2;
  if (a1)
  {
    id v15 = v4;
    double v5 = -[UIView _mutableLayoutGuidesCreateIfNecessary](a1);
    if (([v5 containsObject:v15] & 1) == 0)
    {
      [v5 addObject:v15];
      uint64_t v6 = [v15 identifier];
      int v7 = [v6 isEqualToString:@"UIViewLayoutMarginsGuide"];

      if (v7)
      {
        objc_storeStrong(a1 + 27, a2);
        double v8 = (void *)MEMORY[0x1E4F5B268];
        uint64_t v9 = 27;
      }
      else
      {
        double v10 = [v15 identifier];
        int v11 = [v10 isEqualToString:@"UIViewSafeAreaLayoutGuide"];

        if (v11)
        {
          objc_storeStrong(a1 + 32, a2);
          double v8 = (void *)MEMORY[0x1E4F5B268];
          uint64_t v9 = 32;
        }
        else
        {
          uint64_t v12 = [v15 identifier];
          int v13 = [v12 isEqualToString:@"UIViewKeyboardLayoutGuide"];

          if (!v13) {
            goto LABEL_11;
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_11;
          }
          objc_storeStrong(a1 + 33, a2);
          double v8 = (void *)MEMORY[0x1E4F5B268];
          uint64_t v9 = 33;
        }
      }
      uint64_t v14 = [a1[v9] _systemConstraints];
      [v8 activateConstraints:v14];
    }
LABEL_11:

    id v4 = v15;
  }
}

- (void)__swift_removeAllRetargetableAnimationsIfDetatchedFromContext
{
  uint64_t v2 = qword_1E8FB0100;
  int v3 = self;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  double v5 = v3;
  sub_1854B1FD4((uint64_t)sub_1858B38AC, v4);

  swift_release();
}

- (id)__swift_velocityForKey:(id)a3 target:(BOOL)a4
{
  uint64_t v6 = sub_186A1E95C();
  uint64_t v8 = v7;
  uint64_t v9 = self;
  sub_1858B4C04(v6, v8, a4, &v18);

  swift_bridgeObjectRelease();
  uint64_t v10 = v19;
  if (v19)
  {
    int v11 = __swift_project_boxed_opaque_existential_0Tm(&v18, v19);
    uint64_t v12 = *(void *)(v10 - 8);
    double v13 = MEMORY[0x1F4188790](v11);
    id v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v12 + 16))(v15, v13);
    uint32_t v16 = (void *)sub_186A1F83C();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v18);
  }
  else
  {
    uint32_t v16 = 0;
  }
  return v16;
}

- (id)_userActionDescription:(unsigned int)a3 maxLevel:
{
  if (a1)
  {
    uint64_t v6 = [MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v7 = [a1 layer];
    _addUserActionDescription_0(v7, v6, 0, a2, a3);
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6;
}

- (Class)_intelligenceBaseClass
{
  sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
  return (Class)swift_getObjCClassFromMetadata();
}

- (CGRect)_intelligenceVisibleBounds
{
  uint64_t v2 = self;
  [(UIView *)v2 bounds];
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  [(UIView *)v2 safeAreaInsets];
  double v15 = UIRectInset(v4, v6, v8, v10, v11, v14, v13, v12);
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;

  double v22 = v15;
  double v23 = v17;
  double v24 = v19;
  double v25 = v21;
  result.size.double height = v25;
  result.size.double width = v24;
  result.origin.double y = v23;
  result.origin.double x = v22;
  return result;
}

- (void)_intelligenceCollectContentIn:(CGRect)a3 collector:(id)a4
{
  uint64_t v6 = sub_186A1DF8C();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  double v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v7 + 104))(v10, *MEMORY[0x1E4FB0B68], v6, v8);
  id v11 = a4;
  double v12 = self;
  sub_186A1DA6C();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

- (void)_intelligenceCollectSubelementsIn:(CGRect)a3 using:(id)a4 transformToRoot:(id)a5
{
  CGFloat height = a3.size.height;
  CGFloat width = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  id v11 = _Block_copy(a5);
  v14[2] = v11;
  id v12 = a4;
  uint64_t v13 = self;
  UIView._intelligenceCollectSubelements(in:using:transformToRoot:)((uint64_t)v12, (uint64_t)sub_1858F3928, (uint64_t)v14, x, y, width, height);
  _Block_release(v11);
}

- (void)_intelligenceCollectElementFor:(id)a3 in:(CGRect)a4 using:(id)a5 transformToRoot:(id)a6
{
  double height = a4.size.height;
  double width = a4.size.width;
  double y = a4.origin.y;
  double x = a4.origin.x;
  uint64_t v13 = _Block_copy(a6);
  _Block_copy(v13);
  id v14 = a3;
  id v15 = a5;
  double v16 = self;
  sub_1858F3140(v14, (uint64_t)v15, v16, v13, x, y, width, height);
  _Block_release(v13);
  _Block_release(v13);
}

- (void)_intelligenceCollectRemoteContentIn:(CGRect)a3 remoteContextWrapper:(id)a4
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  id v9 = a4;
  double v10 = self;
  UIView._intelligenceCollectRemoteContent(in:remoteContextWrapper:)(x, y, width, height);
}

- (NSArray)_appIntentsAnnotationsDebugDescription
{
  uint64_t v2 = self;
  UIView._appIntentsIntelligenceProvider.getter(&v5);
  if (v6)
  {
    sub_1858F3770(&v5, &v7);
    __swift_project_boxed_opaque_existential_0Tm(&v7, v8);
    sub_186A1E4DC();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v7);
  }
  else
  {
    sub_1853B93B8((uint64_t)&v5, &qword_1E8FB0048);
  }

  double v3 = (void *)sub_186A1EB1C();
  swift_bridgeObjectRelease();
  return (NSArray *)v3;
}

- (void)__swift_animatePropertyWithKey:(id)a3 currentValue:(double)a4 targetValue:(double)a5 newValueCallback:(id)a6
{
  id v9 = _Block_copy(a6);
  uint64_t v10 = sub_186A1E95C();
  uint64_t v12 = v11;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v9;
  id v14 = self;
  sub_185922A20(v10, v12, (uint64_t)sub_18557A3E8, v13, a4, a5);

  swift_bridgeObjectRelease();
  swift_release();
}

- (id)__swift_projectedTargetForKey:(id)a3 decelerationFactor:(double)a4
{
  uint64_t v6 = sub_186A1E95C();
  uint64_t v8 = v7;
  id v9 = self;
  if (sub_1853B7BC0() && (v10 = sub_1859FDB00(v6, v8), uint64_t v12 = v11, swift_release(), v10))
  {
    uint64_t ObjectType = swift_getObjectType();
    sub_185922F4C(ObjectType, v12, (uint64_t)v22, a4);

    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v14 = v23;
    if (v23)
    {
      id v15 = __swift_project_boxed_opaque_existential_0Tm(v22, v23);
      uint64_t v16 = *(void *)(v14 - 8);
      double v17 = MEMORY[0x1F4188790](v15);
      double v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v16 + 16))(v19, v17);
      double v20 = (void *)sub_186A1F83C();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v14);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v22);
      goto LABEL_7;
    }
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  double v20 = 0;
LABEL_7:
  return v20;
}

+ (void)__swift_animateWithFrictionBounceAnimations:(id)a3 completion:(id)a4
{
  uint64_t v5 = (uint64_t)_Block_copy(a3);
  uint64_t v6 = (uint64_t (*)(char, char))_Block_copy(a4);
  uint64_t v7 = v6;
  if (v5)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v5;
    id v9 = sub_18557A3E4;
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    id v9 = 0;
    uint64_t v8 = 0;
    if (v6)
    {
LABEL_3:
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v7;
      uint64_t v7 = sub_185442254;
      uint64_t v11 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
      if (!v5) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
  if (v5)
  {
LABEL_4:
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v9;
    *(void *)(v5 + 24) = v8;
    uint64_t v11 = sub_1853BE6D4;
  }
LABEL_5:
  uint64_t v12 = v11;
  swift_getObjCClassMetadata();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = v5;
  sub_1854B0A60((uint64_t)v9);
  sub_1859232B0(0, (uint64_t)sub_1853C3700, v13, (uint64_t)v7, v10, (uint64_t)signpost_c2_removePresentationModifier_end, 0);
  swift_release();
  sub_1854AFD40((uint64_t)v7);
  sub_1854AFD40((uint64_t)v9);
}

+ (void)__swift_animateUsingSpringInteractive:(BOOL)a3 animations:(id)a4 completion:(id)a5
{
  uint64_t v7 = (uint64_t (*)())_Block_copy(a4);
  uint64_t v8 = (uint64_t (*)())_Block_copy(a5);
  id v9 = v8;
  if (v7)
  {
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v7;
    uint64_t v7 = sub_18557A3E4;
    if (v9)
    {
LABEL_3:
      uint64_t v11 = swift_allocObject();
      *(void *)(v11 + 16) = v9;
      id v9 = (uint64_t (*)())sub_185442254;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (v8) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
LABEL_6:
  swift_getObjCClassMetadata();
  sub_185923758(a3, (uint64_t)v7, v10, v9, v11);
  sub_1854AFD40((uint64_t)v9);
  sub_1854AFD40((uint64_t)v7);
}

- (void)__swift_setVelocity:(id)a3 key:(id)a4 target:(BOOL)a5
{
  if (a3)
  {
    id v8 = a4;
    id v9 = self;
    swift_unknownObjectRetain();
    sub_186A1F1CC();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v15, 0, sizeof(v15));
    id v10 = a4;
    uint64_t v11 = self;
  }
  uint64_t v12 = sub_186A1E95C();
  uint64_t v14 = v13;

  sub_185923A74((uint64_t)v15, v12, v14, a5);
  swift_bridgeObjectRelease();
  sub_1853B93B8((uint64_t)v15, &qword_1EB256B10);
}

- (void)__swift_replaceInProcessAnimationForKey:(id)a3 behavior:(id)a4 interactive:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v8 = sub_186A1E95C();
  uint64_t v10 = v9;
  swift_unknownObjectRetain();
  uint64_t v11 = self;
  if (sub_1853B7BC0())
  {
    if (sub_1859FDB00(v8, v10))
    {
      uint64_t v13 = v12;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(id, BOOL, uint64_t, uint64_t))(v13 + 184))(a4, v5, ObjectType, v13);

      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
}

+ (void)__swift_createUnsafeTransformerWithInputAnimatableProperties:(id)a3 modelValueSetter:(id)a4 presentationValueSetter:(id)a5
{
  uint64_t v6 = _Block_copy(a4);
  uint64_t v7 = _Block_copy(a5);
  sub_1853B985C(0, (unint64_t *)&qword_1EB255C28);
  unint64_t v8 = sub_186A1EB3C();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v6;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v7;
  id v11 = objc_allocWithZone((Class)_s29AnimatablePropertyTransformerCMa());
  id v12 = sub_18557CC50(v8, 1, (uint64_t)sub_18557A3E4, v9, (uint64_t)sub_18557A3E4, v10, (uint64_t)signpost_c2_removePresentationModifier_end, 0);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
}

+ (void)__swift_trackVelocity:(id)a3
{
  double v3 = _Block_copy(a3);
  if (v3)
  {
    double v4 = v3;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    uint64_t v6 = sub_18557A3E8;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  swift_getObjCClassMetadata();
  sub_1859242E0((uint64_t)v6, v5);
  sub_1854AFD40((uint64_t)v6);
}

+ (void)_performWithInProcessProgressAnimating:(id)a3 block:(id)a4
{
  double v4 = _Block_copy(a4);
  _Block_copy(v4);
  uint64_t v5 = swift_unknownObjectRetain();
  sub_185A3B04C(v5, (uint64_t)v4);
  _Block_release(v4);
  _Block_release(v4);
  swift_unknownObjectRelease();
}

+ (void)_animateInProcessKeyframesAlongsideTransitionWithOptions:(unint64_t)a3 animations:(id)a4
{
  uint64_t v5 = (void (**)(void))_Block_copy(a4);
  sub_185A3B0DC(a3, v5);
  _Block_release(v5);
}

+ (void)_animateKeyframeWithID:(id)a3 relativeStartTime:(double)a4 relativeDuration:(double)a5 animations:(id)a6
{
  unint64_t v8 = _Block_copy(a6);
  uint64_t v9 = sub_186A1E95C();
  uint64_t v11 = v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v8;
  sub_185A3B270(v9, v11, sub_18557A3E8, v12, a4, a5);
  swift_bridgeObjectRelease();
  swift_release();
}

- (void)_updateConstraintsWithObservationTracking
{
  uint64_t v2 = self;
  sub_185A88FBC();
}

- (void)_layoutSubviewsWithObservationTracking
{
  uint64_t v2 = self;
  sub_185A89554();
}

- (void)_drawRectWithObservationTracking:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  uint64_t v7 = self;
  sub_185A89AF8(x, y, width, height);
}

+ (id)_makeHybridPropertyAnimatorWithDuration:(double)a3 progressValue:(id)a4 progressValueReversed:(BOOL)a5 progressValueUpdateReason:(unsigned int)a6 springAnimationBehavior:(id)a7
{
  id v12 = objc_allocWithZone((Class)_s22HybridPropertyAnimatorCMa());
  id v13 = a4;
  swift_unknownObjectRetain_n();
  id v14 = v13;
  id v15 = sub_185AF1228(a4, a5, a6, (uint64_t)a7, a3);

  swift_unknownObjectRelease();
  return v15;
}

- (void)_applyShape:(id)a3
{
  id v4 = a3;
  uint64_t v5 = self;
  sub_185B17B3C((uint64_t)v4);
}

- (void)_applyResolvedShape:(id)a3
{
  long long v4 = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 80);
  long long v16 = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 64);
  long long v17 = v4;
  v18[0] = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 96);
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 105);
  long long v5 = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 16);
  long long v12 = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value);
  long long v13 = v5;
  long long v6 = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 48);
  long long v14 = *(_OWORD *)((char *)a3 + OBJC_IVAR___UIResolvedShape_value + 32);
  long long v15 = v6;
  id v7 = a3;
  unint64_t v8 = self;
  sub_185B18828((uint64_t)&v12, (void (*)(void, void, void, void, void, void, void, void))sub_185636AFC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1858FDEBC);
  uint64_t v9 = [(UIView *)v8 layer];
  void v10[4] = v16;
  v10[5] = v17;
  v11[0] = v18[0];
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)v18 + 9);
  v10[0] = v12;
  v10[1] = v13;
  v10[2] = v14;
  v10[3] = v15;
  sub_1858FFA68((uint64_t)v10);

  sub_185B18828((uint64_t)&v12, (void (*)(void, void, void, void, void, void, void, void))sub_185636BB4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1858FDEB0);
}

- (UIShape)_outlineShape
{
  uint64_t v2 = self;
  double v3 = [(UIView *)v2 layer];
  sub_1858FF8F4((uint64_t)v23);

  uint64_t v4 = v23[0];
  uint64_t v5 = v23[1];
  uint64_t v6 = v23[2];
  uint64_t v7 = v23[3];
  uint64_t v8 = v23[4];
  uint64_t v9 = v23[5];
  uint64_t v10 = v23[6];
  char v11 = v24;
  long long v12 = (char *)objc_msgSend(objc_allocWithZone((Class)UIShape), sel_init);
  long long v13 = &v12[OBJC_IVAR___UIShape_value];
  long long v14 = *(void **)&v12[OBJC_IVAR___UIShape_value];
  uint64_t v15 = *(void *)&v12[OBJC_IVAR___UIShape_value + 8];
  uint64_t v16 = *(void *)&v12[OBJC_IVAR___UIShape_value + 16];
  uint64_t v17 = *(void *)&v12[OBJC_IVAR___UIShape_value + 24];
  uint64_t v18 = *(void *)&v12[OBJC_IVAR___UIShape_value + 32];
  uint64_t v19 = *(void *)&v12[OBJC_IVAR___UIShape_value + 40];
  uint64_t v20 = *(void *)&v12[OBJC_IVAR___UIShape_value + 48];
  *(void *)long long v13 = v4;
  *((void *)v13 + 1) = v5;
  *((void *)v13 + 2) = v6;
  *((void *)v13 + 3) = v7;
  *((void *)v13 + 4) = v8;
  *((void *)v13 + 5) = v9;
  *((void *)v13 + 6) = v10;
  char v21 = v13[56];
  v13[56] = v11;
  sub_185636BB4(v14, v15, v16, v17, v18, v19, v20, v21);

  return (UIShape *)v12;
}

- (UIResolvedShape)_resolvedOutlineShape
{
  uint64_t v27 = self;
  uint64_t v2 = [(UIView *)v27 layer];
  sub_1858FF8F4((uint64_t)v28);
  uint64_t v3 = v28[1];
  long long v26 = (void *)v28[0];
  uint64_t v4 = v28[2];
  uint64_t v5 = v28[3];
  uint64_t v6 = v28[4];
  uint64_t v7 = v28[5];
  uint64_t v8 = v28[6];
  char v9 = v29;
  [(CALayer *)v2 bounds];
  char v30 = 0;
  *(void *)uint64_t v33 = 1;
  memset(&v33[8], 0, 48);
  v33[56] = 6;
  *(void *)&long long v34 = v10;
  *((void *)&v34 + 1) = v11;
  *(void *)&long long v35 = v12;
  *((void *)&v35 + 1) = v13;
  *(void *)__int16 v36 = 0;
  *(void *)&v36[8] = 0;
  *(void *)&v36[16] = -1;
  v36[24] = 0;
  UIShape.resolve(in:)((uint64_t)v33, (uint64_t)v31);
  sub_185636BB4(v26, v3, v4, v5, v6, v7, v8, v9);

  long long v14 = (char *)objc_msgSend(objc_allocWithZone((Class)UIResolvedShape), sel_init);
  uint64_t v15 = &v14[OBJC_IVAR___UIResolvedShape_value];
  long long v16 = *(_OWORD *)&v14[OBJC_IVAR___UIResolvedShape_value];
  long long v17 = *(_OWORD *)&v14[OBJC_IVAR___UIResolvedShape_value + 16];
  long long v18 = *(_OWORD *)&v14[OBJC_IVAR___UIResolvedShape_value + 48];
  *(_OWORD *)&v33[32] = *(_OWORD *)&v14[OBJC_IVAR___UIResolvedShape_value + 32];
  *(_OWORD *)&v33[48] = v18;
  *(_OWORD *)uint64_t v33 = v16;
  *(_OWORD *)&v33[16] = v17;
  long long v19 = *(_OWORD *)&v14[OBJC_IVAR___UIResolvedShape_value + 64];
  long long v20 = *(_OWORD *)&v14[OBJC_IVAR___UIResolvedShape_value + 80];
  long long v21 = *(_OWORD *)&v14[OBJC_IVAR___UIResolvedShape_value + 96];
  *(_OWORD *)&v36[9] = *(_OWORD *)&v14[OBJC_IVAR___UIResolvedShape_value + 105];
  long long v35 = v20;
  *(_OWORD *)__int16 v36 = v21;
  long long v34 = v19;
  long long v22 = v31[3];
  *((_OWORD *)v15 + 2) = v31[2];
  *((_OWORD *)v15 + 3) = v22;
  long long v23 = v31[1];
  *(_OWORD *)uint64_t v15 = v31[0];
  *((_OWORD *)v15 + 1) = v23;
  *(_OWORD *)(v15 + 105) = *(_OWORD *)((char *)v32 + 9);
  long long v24 = v32[0];
  *((_OWORD *)v15 + 5) = v31[5];
  *((_OWORD *)v15 + 6) = v24;
  *((_OWORD *)v15 + 4) = v31[4];
  sub_185B18828((uint64_t)v33, (void (*)(void, void, void, void, void, void, void, void))sub_185636BB4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1858FDEB0);

  return (UIResolvedShape *)v14;
}

- (id)_shapeInCoordinateSpace:(id)a3
{
  swift_unknownObjectRetain();
  uint64_t v5 = self;
  uint64_t v6 = sub_185B18248((uint64_t)a3);
  swift_unknownObjectRelease();

  return v6;
}

- (BOOL)isAccessibilityElementByDefault
{
  return 0;
}

- (BOOL)isElementAccessibilityExposedToInterfaceBuilder
{
  return 1;
}

- (BOOL)accessibilityInvertFilterApplied
{
  uint64_t v2 = [(CALayer *)[(UIView *)self layer] filters];
  if (v2) {
    LOBYTE(v2) = [(NSArray *)v2 indexOfObjectPassingTest:&__block_literal_global_454] != 0x7FFFFFFFFFFFFFFFLL;
  }
  return (char)v2;
}

- (BOOL)_ancestorHasInvertFilterApplied
{
  return (*((void *)&self->_viewFlags + 1) >> 46) & 1;
}

- (void)accessibilityUnapplyInvertFilter
{
  if (_AXSInvertColorsEnabled())
  {
    if ([(UIView *)self accessibilityIgnoresInvertColors]) {
      UIAccessibilityUpdateInvertColorsFilters([(UIView *)self layer], 0, 0);
    }
    uint64_t v3 = [(UIView *)self superview];
    [(UIView *)v3 accessibilityUnapplyInvertFilter];
  }
}

- (id)_enclosingInterfaceActionRepresentationView
{
  objc_opt_class();
  return _enclosingViewOfClass(self);
}

- (id)_enclosingInterfaceActionGroupView
{
  objc_opt_class();
  return _enclosingViewOfClass(self);
}

- (id)_uis_outline
{
  [(UIView *)self frame];
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  [(UIView *)self _cornerRadius];
  double v12 = v11;
  uint64_t v13 = [(UIView *)self _cornerCurve];
  long long v14 = [(UIView *)self layer];
  uint64_t v15 = +[_UIShape shapeWithRoundedRect:cornerRadius:cornerCurve:cornerMask:](_UIShape, "shapeWithRoundedRect:cornerRadius:cornerCurve:cornerMask:", v13, [v14 maskedCorners], v4, v6, v8, v10, v12);

  return v15;
}

- (BOOL)allowsGroupOpacity
{
  uint64_t v2 = [(UIView *)self layer];
  char v3 = [v2 allowsGroupOpacity];

  return v3;
}

- (BOOL)allowsGroupBlending
{
  uint64_t v2 = [(UIView *)self layer];
  char v3 = [v2 allowsGroupBlending];

  return v3;
}

- (NSString)appliedContentSizeCategoryLimitsDescription
{
  long long v44 = objc_opt_new();
  long long v45 = self;
  if (v45)
  {
    uint64_t v3 = 1;
    double v4 = v45;
    do
    {
      double v5 = [(UIView *)v45 _minimumContentSizeCategory];
      double v6 = [(UIView *)v45 _maximumContentSizeCategory];
      double v7 = NSString;
      uint64_t v8 = objc_opt_class();
      long long v52 = v5;
      if (v5 && v6)
      {
        _CSCN(v5);
        uint64_t v9 = v47 = v7;
        long long v50 = [v4 superview];
        [v50 traitCollection];
        double v10 = v46 = v3;
        long long v43 = [v10 preferredContentSizeCategory];
        double v11 = _CSCN(v43);
        [v4 traitCollection];
        v13 = uint64_t v12 = v8;
        long long v14 = [v13 preferredContentSizeCategory];
        uint64_t v15 = _CSCN(v14);
        _CSCN(v6);
        long long v17 = v16 = v6;
        long long v53 = (void *)v9;
        long long v18 = [v47 stringWithFormat:@"%2ld. <%@:%p>: %@ <= (%@->)%@ <= %@", v46, v12, v4, v9, v11, v15, v17];

        double v6 = v16;
        long long v19 = v50;

        long long v20 = v10;
        uint64_t v3 = v46;

        double v5 = v52;
      }
      else
      {
        if (v5)
        {
          _CSCN(v5);
          v53 = long long v48 = v7;
          long long v51 = [v4 superview];
          long long v20 = [v51 traitCollection];
          long long v21 = [v20 preferredContentSizeCategory];
          long long v22 = _CSCN(v21);
          [v4 traitCollection];
          v24 = uint64_t v23 = v8;
          [v24 preferredContentSizeCategory];
          v26 = double v25 = v6;
          uint64_t v27 = _CSCN(v26);
          long long v18 = [v48 stringWithFormat:@"%2ld. <%@:%p>: %@ <= (%@->)%@ <= -", v3, v23, v4, v53, v22, v27];

          double v6 = v25;
          double v5 = v52;
        }
        else
        {
          if (!v6)
          {
            long long v53 = [v4 traitCollection];
            long long v19 = [v53 preferredContentSizeCategory];
            long long v20 = _CSCN(v19);
            long long v18 = [v7 stringWithFormat:@"%2ld. <%@:%p>: %@", v3, v8, v4, v20];
            goto LABEL_11;
          }
          long long v53 = [v4 superview];
          long long v51 = [v53 traitCollection];
          long long v49 = [v51 preferredContentSizeCategory];
          long long v28 = _CSCN(v49);
          char v29 = [v4 traitCollection];
          [v29 preferredContentSizeCategory];
          v31 = uint64_t v30 = v8;
          _CSCN(v31);
          v33 = int v32 = v6;
          long long v34 = _CSCN(v32);
          long long v18 = [v7 stringWithFormat:@"%2ld. <%@:%p>: - <= (%@->)%@ <= %@", v3, v30, v4, v28, v33, v34];

          double v6 = v32;
          long long v20 = v49;

          double v5 = v52;
        }
        long long v19 = v51;
      }
LABEL_11:

      [v44 insertObject:v18 atIndex:0];
      uint64_t v35 = [v4 superview];

      ++v3;
      double v4 = (void *)v35;
    }
    while (v35);
  }
  __int16 v36 = NSString;
  uint64_t v37 = [(UIView *)v45 traitCollection];
  __int16 v38 = [v37 preferredContentSizeCategory];
  long long v39 = _CSCN(v38);
  __int16 v40 = [v36 stringWithFormat:@"--> %@", v39];
  [v44 addObject:v40];

  uint64_t v41 = [v44 componentsJoinedByString:@"\n"];

  return (NSString *)v41;
}

- (void)_setEffectContainerLookupID:(id)a3
{
}

- (NSUUID)_effectContainerLookupID
{
  return (NSUUID *)objc_getAssociatedObject(self, &_UIWritingToolsCoordinatorEffectContainerLookupIDKey);
}

- (BOOL)_canHaveWritingToolsCoordinator
{
  return 1;
}

- (id)_visualRecursiveDescription
{
  uint64_t v9 = 0;
  double v10 = &v9;
  uint64_t v11 = 0x3032000000;
  uint64_t v12 = __Block_byref_object_copy__29;
  uint64_t v13 = __Block_byref_object_dispose__29;
  id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __65__UIView_VisualDescriptionAdditions___visualRecursiveDescription__block_invoke;
  v8[3] = &unk_1E52E0C40;
  v8[4] = self;
  void v8[5] = &v9;
  uint64_t v3 = _Block_copy(v8);
  _UIViewTopDownSubtreeTraversal((uint64_t)self, v3, 0);
  double v4 = [_UIASCIIArtFramesRenderer alloc];
  double v5 = [(_UIASCIIArtFramesRenderer *)v4 initWithFrames:v10[5]];
  double v6 = [(_UIASCIIArtFramesRenderer *)v5 visualDescription];

  _Block_object_dispose(&v9, 8);
  return v6;
}

void __65__UIView_VisualDescriptionAdditions___visualRecursiveDescription__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v4 frame];
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  uint64_t v13 = [v4 superview];

  objc_msgSend(v3, "convertRect:fromView:", v13, v6, v8, v10, v12);
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;

  long long v22 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  objc_msgSend(MEMORY[0x1E4F29238], "valueWithRect:", v15, v17, v19, v21);
  id v23 = (id)objc_claimAutoreleasedReturnValue();
  [v22 addObject:v23];
}

- (void)_setFlipsHorizontalAxis:(BOOL)a3
{
  BOOL v3 = a3;
  if ([(UIView *)self _flipsHorizontalAxis] != a3)
  {
    id v5 = [(UIView *)self layer];
    [v5 setFlipsHorizontalAxis:v3];
  }
}

+ (id)_viewWithLayoutConstraints
{
  uint64_t v2 = [UIView alloc];
  BOOL v3 = -[UIView initWithFrame:](v2, "initWithFrame:", *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
  [(UIView *)v3 setTranslatesAutoresizingMaskIntoConstraints:0];
  return v3;
}

- (void)_constrainViewToSuperview
{
  id v4 = [(UIView *)self superview];

  if (!v4)
  {
    double v9 = [MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v9, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UIReferenceLibraryViewController.m", 89, @"-[UIView(UIViewExtensions) _constrainViewToSuperview]: %p does not have a superview", self);
  }
  _NSDictionaryOfVariableBindings(&cfstr_Self.isa, self, 0);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  id v5 = [MEMORY[0x1E4F5B268] constraintsWithVisualFormat:@"H:|[self]|" options:0 metrics:0 views:v10];
  double v6 = [MEMORY[0x1E4F5B268] constraintsWithVisualFormat:@"V:|[self]|" options:0 metrics:0 views:v10];
  double v7 = [(UIView *)self superview];
  [v7 addConstraints:v5];

  double v8 = [(UIView *)self superview];
  [v8 addConstraints:v6];
}

- (void)_setGhostPortal:(id)a3
{
}

- (id)_getGhostPortal
{
  return objc_getAssociatedObject(self, &_UIFlockerAssociatedGhostPortalKey);
}

- (void)_setSourceCenter:(CGPoint)a3
{
  CGPoint v5 = a3;
  id v4 = [MEMORY[0x1E4F29238] valueWithBytes:&v5 objCType:"{CGPoint=dd}"];
  objc_setAssociatedObject(self, &_ItemViewSourceCenterKey, v4, (void *)3);
}

- (CGPoint)_getSourceCenter
{
  uint64_t v2 = objc_getAssociatedObject(self, &_ItemViewSourceCenterKey);
  [v2 CGPointValue];
  double v4 = v3;
  double v6 = v5;

  double v7 = v4;
  double v8 = v6;
  result.double y = v8;
  result.double x = v7;
  return result;
}

- (BOOL)_beginDragWithInteractionTouches:(id)a3
{
  return -[UIView _beginDragWithTouches:orInitialCentroid:accessibilityEndpoint:](self, "_beginDragWithTouches:orInitialCentroid:accessibilityEndpoint:", a3, 0, *MEMORY[0x1E4F39B00], *(double *)(MEMORY[0x1E4F39B00] + 8), *(double *)(MEMORY[0x1E4F39B00] + 16));
}

- (BOOL)_beginDragWithTouches:(id)a3 orInitialCentroid:(CAPoint3D)a4 accessibilityEndpoint:(id)a5
{
  double z = a4.z;
  double y = a4.y;
  double x = a4.x;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v66 = a3;
  id v67 = a5;
  double v11 = [(UIView *)self _draggingSourceDelegate];
  if (!v11) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"view's draggingSourceDelegate must be non-nil"];
  }
  if (_UIShouldEnforceOpenInRulesInAccountBasedApp())
  {
    unint64_t v12 = [v11 _dataOwnerOfDragFromView:self];
    uint64_t v13 = *(NSObject **)(__UILogGetCategoryCachedImpl("Dragging", &qword_1E8FDE2E0) + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      double v14 = v13;
      double v15 = _UIDataOwnerDescription(v12);
      LODWORD(buf.scale.width) = 138412290;
      *(void *)((char *)&buf.scale.width + 4) = v15;
      _os_log_impl(&dword_1853B0000, v14, OS_LOG_TYPE_DEFAULT, "Drag data owner: %@", (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  double v16 = [v11 _itemsToDragFromView:self];
  double v17 = v16;
  if (!v16 || ![v16 count])
  {
    double v25 = *(NSObject **)(__UILogGetCategoryCachedImpl("Dragging", &qword_1E8FDE2E8) + 8);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
LABEL_51:
      [v11 _viewFailedToDrag:self];
      BOOL v58 = 0;
      id v23 = v17;
      goto LABEL_52;
    }
    long long v26 = v25;
    uint64_t v27 = NSStringFromSelector(a2);
    LODWORD(buf.scale.width) = 138412546;
    *(void *)((char *)&buf.scale.width + 4) = self;
    WORD2(buf.scale.height) = 2112;
    *(void *)((char *)&buf.scale.height + 6) = v27;
    long long v28 = "UIView %@ %@: items are nil or empty, drag is failing";
LABEL_16:
    _os_log_impl(&dword_1853B0000, v26, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&buf, 0x16u);

    goto LABEL_51;
  }
  if (v67) {
    goto LABEL_10;
  }
  if (![v66 count])
  {
    uint64_t v41 = *(NSObject **)(__UILogGetCategoryCachedImpl("Dragging", &qword_1E8FDE2F0) + 8);
    if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      goto LABEL_51;
    }
    long long v26 = v41;
    uint64_t v27 = NSStringFromSelector(a2);
    LODWORD(buf.scale.width) = 138412546;
    *(void *)((char *)&buf.scale.width + 4) = self;
    WORD2(buf.scale.height) = 2112;
    *(void *)((char *)&buf.scale.height + 6) = v27;
    long long v28 = "UIView %@ %@: can't begin a drag with no touches";
    goto LABEL_16;
  }
  if ((unint64_t)[v66 count] >= 3)
  {
    char v29 = *(NSObject **)(__UILogGetCategoryCachedImpl("Dragging", &qword_1E8FDE2F8) + 8);
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      goto LABEL_51;
    }
    long long v26 = v29;
    uint64_t v27 = NSStringFromSelector(a2);
    LODWORD(buf.scale.width) = 138412546;
    *(void *)((char *)&buf.scale.width + 4) = self;
    WORD2(buf.scale.height) = 2112;
    *(void *)((char *)&buf.scale.height + 6) = v27;
    long long v28 = "UIView %@ %@: can't begin a drag with more than 2 touches";
    goto LABEL_16;
  }
LABEL_10:
  uint64_t v18 = [v11 _requiredContextIDsForDragSessionInView:self];
  double v19 = (void *)v18;
  double v20 = (void *)MEMORY[0x1E4F1CBF0];
  if (v18) {
    double v20 = (void *)v18;
  }
  id v21 = v20;

  long long v22 = [v17 reverseObjectEnumerator];
  id v23 = [v22 allObjects];

  if (v67)
  {
    uint64_t v24 = +[UIDraggingBeginningSessionConfiguration configurationWithItems:dataOwner:initialCentroidInSourceWindow:requiredContextIds:sourceView:accessibilityEndpoint:](UIDraggingBeginningSessionConfiguration, "configurationWithItems:dataOwner:initialCentroidInSourceWindow:requiredContextIds:sourceView:accessibilityEndpoint:", v23, v12, v21, self, v67, x, y, z);
  }
  else
  {
    if ([v66 count] == 1)
    {
      uint64_t v30 = [v66 anyObject];
      int v31 = [v30 _originatesFromPointerEvent];

      if (v31)
      {
        int v32 = [v66 anyObject];
        uint64_t v33 = +[UIDraggingBeginningSessionConfiguration configurationWithItems:v23 dataOwner:v12 pointerTouch:v32 requiredContextIds:v21 sourceView:self];

        goto LABEL_26;
      }
    }
    uint64_t v24 = +[UIDraggingBeginningSessionConfiguration configurationWithItems:v23 dataOwner:v12 touches:v66 requiredContextIds:v21 sourceView:self];
  }
  uint64_t v33 = (void *)v24;
LABEL_26:
  long long v34 = [v11 _viewDragSessionProperties:self];
  objc_msgSend(v33, "setSupportsSystemDrag:", objc_msgSend(v34, "_supportsSystemDrag"));
  objc_msgSend(v33, "setSessionIsRestrictedToSourceApplication:", objc_msgSend(v11, "_viewRestrictsDragToSourceApp:", self));
  objc_msgSend(v33, "setSessionIsRestrictedToLocalDevice:", objc_msgSend(v34, "_confineToLocalDevice"));
  objc_msgSend(v33, "setAvoidsKeyboardSuppression:", objc_msgSend(v34, "_avoidsKeyboardSuppression"));
  objc_msgSend(v33, "setResizable:", objc_msgSend(v34, "_resizable"));
  objc_msgSend(v33, "setRotatable:", objc_msgSend(v34, "_rotatable"));
  [v34 _minimumResizableSize];
  objc_msgSend(v33, "setMinimumResizableSize:");
  [v34 _maximumResizableSize];
  objc_msgSend(v33, "setMaximumResizableSize:");
  objc_msgSend(v33, "setWantsElasticEffects:", objc_msgSend(v34, "_wantsElasticEffects"));
  if ([v23 count] == 1)
  {
    uint64_t v35 = [v23 objectAtIndexedSubscript:0];
    __int16 v36 = [v35 _targetedLiftPreview];

    if ([v34 _rotatable])
    {
      uint64_t v37 = [v36 _dragPreviewProvider];
      __int16 v38 = [v37 _duiPreview];
      [v38 originalRotation];
      objc_msgSend(v33, "setOriginalRotation:");
    }
    if ([v34 _resizable])
    {
      memset(&buf, 0, sizeof(buf));
      long long v39 = [v36 target];
      __int16 v40 = v39;
      if (v39) {
        [v39 transform];
      }
      else {
        memset(&transform, 0, sizeof(transform));
      }
      CGAffineTransformDecompose(&buf, &transform);

      objc_msgSend(v33, "setOriginalScale:", buf.scale.width, buf.scale.height);
    }
  }
  uint64_t v42 = [(UIView *)self _screen];
  long long v43 = [v42 _dragManager];

  long long v44 = [v43 beginDragWithSessionConfiguration:v33];
  if ([v33 initiatedWithPointer])
  {
    unsigned int v64 = v43;
    unsigned int v65 = v44;
    long long v45 = [v66 anyObject];
    uint64_t v46 = [v45 window];

    long long v47 = (void *)UIApp;
    long long v48 = [(id)UIApp _touchesEventForWindow:v46];
    [v47 _cancelTouchesOrPresses:v66 withEvent:v48];

    uint64_t v63 = v46;
    long long v49 = [v46 screen];
    long long v50 = [v49 displayIdentity];

    if (v50)
    {
      CGFloat v60 = v50;
      id v61 = v21;
      uint64_t v62 = v11;
      long long v51 = objc_opt_new();
      long long v68 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      id v52 = v66;
      uint64_t v53 = [v52 countByEnumeratingWithState:&v68 objects:v73 count:16];
      if (v53)
      {
        uint64_t v54 = v53;
        uint64_t v55 = *(void *)v69;
        do
        {
          for (uint64_t i = 0; i != v54; ++i)
          {
            if (*(void *)v69 != v55) {
              objc_enumerationMutation(v52);
            }
            double v57 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(*(id *)(*((void *)&v68 + 1) + 8 * i), "_touchIdentifier"));
            [v51 addObject:v57];
          }
          uint64_t v54 = [v52 countByEnumeratingWithState:&v68 objects:v73 count:16];
        }
        while (v54);
      }

      long long v50 = v60;
      +[_UISystemGestureManager _cancelTouchesWithIdentifiers:v51 forDisplayWithIdentity:v60];

      double v11 = v62;
      id v21 = v61;
    }

    long long v43 = v64;
    long long v44 = v65;
  }

  if (!v44)
  {
    double v17 = v23;
    goto LABEL_51;
  }
  [v11 _view:self willBeginDraggingWithSession:v44];

  BOOL v58 = 1;
LABEL_52:

  return v58;
}

- (BOOL)_accessibilityCanDrag
{
  BOOL v3 = [(UIView *)self isUserInteractionEnabled];
  if (v3)
  {
    double v4 = [(UIView *)self _draggingSourceDelegate];
    char v5 = [v4 _canDragFromView:self];

    LOBYTE(v3) = v5;
  }
  return v3;
}

- (void)_accessibilityBeginDragAtPoint:(CGPoint)a3 endpoint:(id)a4 completion:(id)a5
{
}

- (void)_accessibilityBeginDragAtPoint3D:(CAPoint3D)a3 endpoint:(id)a4 completion:(id)a5
{
  double z = a3.z;
  double y = a3.y;
  double x = a3.x;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v10 = a4;
  id v11 = a5;
  BOOL v12 = [(UIView *)self _accessibilityCanDrag];
  if (v10 && v12)
  {
    -[UIView convertPoint:toView:](self, "convertPoint:toView:", 0, x, y);
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    double v17 = [(UIView *)self interactions];
    uint64_t v18 = [v17 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)v31;
      while (2)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v31 != v20) {
            objc_enumerationMutation(v17);
          }
          long long v22 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            v24[0] = MEMORY[0x1E4F143A8];
            v24[1] = 3221225472;
            v24[2] = __75__UIView_UIDragging___accessibilityBeginDragAtPoint3D_endpoint_completion___block_invoke;
            v24[3] = &unk_1E52EC1B0;
            void v24[4] = self;
            uint64_t v27 = v14;
            uint64_t v28 = v16;
            uint64_t v29 = 0;
            id v25 = v10;
            id v26 = v11;
            id v23 = v22;
            objc_msgSend(v23, "_accessibilityPrepareForDragAtPoint:completion:", v24, x, y, z);

            goto LABEL_15;
          }
        }
        uint64_t v19 = [v17 countByEnumeratingWithState:&v30 objects:v34 count:16];
        if (v19) {
          continue;
        }
        break;
      }
    }
LABEL_15:
  }
  else if (v11)
  {
    (*((void (**)(id, void))v11 + 2))(v11, 0);
  }
}

uint64_t __75__UIView_UIDragging___accessibilityBeginDragAtPoint3D_endpoint_completion___block_invoke(uint64_t a1, int a2)
{
  if (a2)
  {
    BOOL v3 = *(void **)(a1 + 32);
    double v4 = [MEMORY[0x1E4F1CAD0] set];
    objc_msgSend(v3, "_beginDragWithTouches:orInitialCentroid:accessibilityEndpoint:", v4, *(void *)(a1 + 40), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));

    uint64_t result = *(void *)(a1 + 48);
    if (!result) {
      return result;
    }
    double v6 = *(uint64_t (**)(void))(result + 16);
  }
  else
  {
    uint64_t result = *(void *)(a1 + 48);
    if (!result) {
      return result;
    }
    double v6 = *(uint64_t (**)(void))(result + 16);
  }
  return v6();
}

- (id)_accessibilityDragInteractionsForAddingItems
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  BOOL v3 = objc_opt_new();
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  double v4 = [(UIView *)self interactions];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        double v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v10 = v9;
          if ([v10 _accessibilityCanAddItemsToDragSession]) {
            [v3 addObject:v10];
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }

  return v3;
}

- (BOOL)_accessibilityCanAddItemsToDragSession
{
  if (![(UIView *)self isUserInteractionEnabled]) {
    return 0;
  }
  BOOL v3 = [(UIView *)self _accessibilityDragInteractionsForAddingItems];
  BOOL v4 = [v3 count] != 0;

  return v4;
}

- (BOOL)_accessibilityAddItemsToDragSessionAtPoint3D:(CAPoint3D)a3
{
  double z = a3.z;
  double y = a3.y;
  double x = a3.x;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ([(UIView *)self isUserInteractionEnabled])
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v7 = [(UIView *)self _accessibilityDragInteractionsForAddingItems];
    uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v13;
      while (2)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v7);
          }
          if (objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "_accessibilityAddItemsToDragSessionAtPoint:", x, y, z))
          {
            LOBYTE(v8) = 1;
            goto LABEL_13;
          }
        }
        uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
LABEL_13:
  }
  else
  {
    LOBYTE(v8) = 0;
  }
  return v8;
}

- (BOOL)_accessibilityAddItemsToDragSessionAtPoint:(CGPoint)a3
{
  return -[UIView _accessibilityAddItemsToDragSessionAtPoint3D:](self, "_accessibilityAddItemsToDragSessionAtPoint3D:", a3.x, a3.y, 0.0);
}

- (BOOL)_accessibilityCanDrop
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ([(UIView *)self isUserInteractionEnabled])
  {
    BOOL v3 = _UIDragEventPasteConfigurationForOwner(self);

    if (v3)
    {
      LOBYTE(v4) = 1;
    }
    else
    {
      long long v11 = 0u;
      long long v12 = 0u;
      long long v10 = 0u;
      uint64_t v5 = [(UIView *)self interactions];
      uint64_t v4 = [v5 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v4)
      {
        uint64_t v6 = *(void *)v10;
        while (2)
        {
          for (uint64_t i = 0; i != v4; ++i)
          {
            if (*(void *)v10 != v6) {
              objc_enumerationMutation(v5);
            }
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              LOBYTE(v4) = 1;
              goto LABEL_15;
            }
          }
          uint64_t v4 = [v5 countByEnumeratingWithState:&v9 objects:v13 count:16];
          if (v4) {
            continue;
          }
          break;
        }
      }
LABEL_15:
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

- (id)_findInteractionIfExists
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [(UIView *)self interactions];
  id v3 = (id)[v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v3 = v6;
          goto LABEL_11;
        }
      }
      id v3 = (id)[v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v3;
}

- (BOOL)_isFindAction:(SEL)a3
{
  return sel_find_ == a3 || sel_findAndReplace_ == a3 || sel_findNext_ == a3 || sel_findPrevious_ == a3;
}

- (BOOL)_canPerformDefaultImplementationForStandardEditAction:(SEL)a3
{
  if (![(UIView *)self _isFindAction:a3]) {
    return 0;
  }
  uint64_t v4 = [(UIView *)self _findInteractionIfExists];
  BOOL v5 = v4 != 0;

  return v5;
}

- (void)find:(id)a3
{
  id v3 = [(UIView *)self _findInteractionIfExists];
  [v3 presentFindNavigatorShowingReplace:0];
}

- (void)findAndReplace:(id)a3
{
  id v3 = [(UIView *)self _findInteractionIfExists];
  [v3 presentFindNavigatorShowingReplace:1];
}

- (void)findNext:(id)a3
{
  id v3 = [(UIView *)self _findInteractionIfExists];
  [v3 findNext];
}

- (void)findPrevious:(id)a3
{
  id v3 = [(UIView *)self _findInteractionIfExists];
  [v3 findPrevious];
}

- (void)_setIntermediateLayerMaskFrameOrigin:(void *)a1
{
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E4F29238], "valueWithPoint:");
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_setAssociatedObject(a1, &_UIIntermediateLayerMaskFrameOrigin, v2, (void *)1);
  }
}

- (double)_intermediateLayerMaskFrameOrigin
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v1 = objc_getAssociatedObject(a1, &_UIIntermediateLayerMaskFrameOrigin);
  [v1 pointValue];
  double v3 = v2;

  return v3;
}

- (id)_backing_clientLayer
{
  if (a1)
  {
    a1 = (id *)a1[20];
    uint64_t v1 = vars8;
  }
  return a1;
}

- (void)_backing_willChangeValueForKeyPath:(uint64_t)a1
{
  if (a1)
  {
    uint64_t v4 = +[_UIViewBackingObserver sharedObserver];
    uint64_t v5 = *(void *)(a1 + 160);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __61__UIView__UIViewBacking___backing_willChangeValueForKeyPath___block_invoke;
    v6[3] = &unk_1E52D9F98;
    v6[4] = a1;
    void v6[5] = a2;
    [v4 observe:v5 forKeyPath:a2 once:v6];
  }
}

void __61__UIView__UIViewBacking___backing_willChangeValueForKeyPath___block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  double v2 = [*(id *)(*(void *)(a1 + 32) + 160) valueForKeyPath:*(void *)(a1 + 40)];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  double v3 = -[UIView _backing_layers](*(void **)(a1 + 32));
  uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        long long v8 = *(void **)(*((void *)&v13 + 1) + 8 * v7);
        if (v8 != *(void **)(*(void *)(a1 + 32) + 160))
        {
          id v9 = (id)objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * v7), "unsafeUnretainedDelegate", (void)v13);
          if (v9 && (long long v10 = v9, (_IsKindOfUIView((uint64_t)v9) & 1) != 0))
          {
            uint64_t v11 = *(void *)(a1 + 40);
            id v12 = v10;
            objc_msgSend(v12, "_privateSubview_setValue:forObservedLayerKeyPath:", v2, v11);
          }
          else
          {
            [v8 setValue:v2 forKeyPath:*(void *)(a1 + 40)];
          }
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }
}

- (void)_insertPrivateSubview:(id)a3 belowLayer:(id)a4
{
  if (self) {
    -[UIView _backing_addPrivateSubview:positioned:relativeTo:]((uint64_t)self, a3, -3, (uint64_t)a4);
  }
}

- (void)_insertPrivateSubview:(id)a3 aboveLayer:(id)a4
{
  if (self) {
    -[UIView _backing_addPrivateSubview:positioned:relativeTo:]((uint64_t)self, a3, -2, (uint64_t)a4);
  }
}

- (id)_effectHost
{
  uint64_t v2 = a1[21];
  if (v2 && *(void *)(v2 + 40)) {
    goto LABEL_8;
  }
  id v3 = [[UIVisualEffectBackingHost alloc] initForView:a1];
  uint64_t v4 = a1[21];
  if (v4) {
    objc_storeStrong((id *)(v4 + 40), v3);
  }

  uint64_t v5 = objc_msgSend(a1, "mt_captureGroupName");
  uint64_t v6 = a1[21];
  uint64_t v7 = v6 ? *(void **)(v6 + 40) : 0;
  [v7 _setCaptureGroupName:v5];

  uint64_t v2 = a1[21];
  if (v2) {
LABEL_8:
  }
    long long v8 = *(void **)(v2 + 40);
  else {
    long long v8 = 0;
  }
  return v8;
}

- (void)_backing__initialValueForKey:(void *)a1
{
  if (a1)
  {
    uint64_t v3 = a1[21];
    if (v3) {
      uint64_t v4 = *(void **)(v3 + 40);
    }
    else {
      uint64_t v4 = 0;
    }
    a1 = [v4 _initialValueForKey:a2];
    uint64_t v2 = vars8;
  }
  return a1;
}

- (NSString)mt_captureGroupName
{
  viewBackingAudouble x = self->_viewBackingAux;
  if (!viewBackingAux || (uint64_t v4 = viewBackingAux->_captureGroupName) == 0)
  {
    uint64_t v5 = NSString;
    uint64_t v6 = (objc_class *)objc_opt_class();
    uint64_t v7 = NSStringFromClass(v6);
    uint64_t v4 = [v5 stringWithFormat:@"<%p: %@>", self, v7];
  }
  return v4;
}

- (BOOL)_hasBackgroundMaterial
{
  viewBackingAudouble x = self->_viewBackingAux;
  if (!viewBackingAux) {
    return 0;
  }
  uint64_t v4 = viewBackingAux->_effectHost;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = self->_viewBackingAux;
  if (v6) {
    effectHost = v6->_effectHost;
  }
  else {
    effectHost = 0;
  }
  long long v8 = [(UIVisualEffectBackingHost *)effectHost backgroundEffects];
  BOOL v9 = [v8 count] != 0;

  return v9;
}

- (void)mt_setVisualEffect:(id)a3
{
  if (self)
  {
    viewBackingAudouble x = (unint64_t)self->_viewBackingAux;
    if (viewBackingAux) {
      viewBackingAudouble x = *(void *)(viewBackingAux + 40);
    }
    if ((unint64_t)a3 | viewBackingAux)
    {
      -[UIView _backing_wrapLayerInIntermediate]((uint64_t)self);
      uint64_t v6 = -[UIView _backing_outermostLayer](self);
      [v6 setAllowsGroupBlending:0];

      -[UIView _effectHost](self);
      id v7 = (id)objc_claimAutoreleasedReturnValue();
      [v7 setVisualEffect:a3];
    }
  }
}

- (UIVisualEffect)mt_visualEffect
{
  if (self)
  {
    viewBackingAudouble x = self->_viewBackingAux;
    if (viewBackingAux) {
      effectHost = viewBackingAux->_effectHost;
    }
    else {
      effectHost = 0;
    }
    self = [(UIVisualEffectBackingHost *)effectHost visualEffect];
    uint64_t v2 = vars8;
  }
  return (UIVisualEffect *)self;
}

- (NSArray)mt_contentEffects
{
  if (self)
  {
    viewBackingAudouble x = self->_viewBackingAux;
    if (viewBackingAux) {
      effectHost = viewBackingAux->_effectHost;
    }
    else {
      effectHost = 0;
    }
    self = [(UIVisualEffectBackingHost *)effectHost contentEffects];
    uint64_t v2 = vars8;
  }
  return (NSArray *)self;
}

- (NSArray)mt_backgroundEffects
{
  if (self)
  {
    viewBackingAudouble x = self->_viewBackingAux;
    if (viewBackingAux) {
      effectHost = viewBackingAux->_effectHost;
    }
    else {
      effectHost = 0;
    }
    self = [(UIVisualEffectBackingHost *)effectHost backgroundEffects];
    uint64_t v2 = vars8;
  }
  return (NSArray *)self;
}

- (void)mt_addPrivateSubview:(id)a3
{
  if (self) {
    -[UIView _backing_addPrivateSubview:positioned:relativeTo:]((uint64_t)self, a3, -1, 0);
  }
}

- (int64_t)_overrideUserInterfaceRenderingMode
{
  uint64_t v3 = -[UIView _internalTraitOverrides](self);
  int v4 = [v3 _containsTraitToken:0x1ED3F5C58];

  if (!v4) {
    return 0;
  }
  uint64_t v5 = -[UIView _internalTraitOverrides](self);
  int64_t v6 = [v5 _valueForNSIntegerTraitToken:0x1ED3F5C58];

  return v6;
}

- (BOOL)_shouldAdaptToMaterials
{
  return (*((unsigned __int8 *)&self->_viewFlags + 24) >> 5) & 1;
}

- (int64_t)_backgroundMergeBehavior
{
  return (*(void *)((char *)&self->_viewFlags + 20) >> 45) & 3;
}

- (void)_didChangeKeyplaneWithContext:(id)a3
{
  id v4 = a3;
  id v5 = [(UIView *)self superview];
  [v5 _didChangeKeyplaneWithContext:v4];
}

- (BOOL)_lightStyleRenderConfig
{
  uint64_t v2 = [(UIView *)self _inheritedRenderConfig];
  char v3 = [v2 lightKeyboard];

  return v3;
}

- (CGRect)_accessoryViewFrame
{
  uint64_t v2 = [(UIView *)self superview];
  [v2 _accessoryViewFrame];
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;

  double v11 = v4;
  double v12 = v6;
  double v13 = v8;
  double v14 = v10;
  result.size.double height = v14;
  result.size.double width = v13;
  result.origin.double y = v12;
  result.origin.double x = v11;
  return result;
}

- (void)_setAccessoryViewFrame:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  id v7 = [(UIView *)self superview];
  objc_msgSend(v7, "_setAccessoryViewFrame:", x, y, width, height);
}

- (void)_convertToAutolayoutSizingIfNecessary
{
  if ([(UIView *)self translatesAutoresizingMaskIntoConstraints])
  {
    [(UIView *)self bounds];
    double v4 = v3;
    [(UIView *)self setTranslatesAutoresizingMaskIntoConstraints:0];
    if (([(UIView *)self autoresizingMask] & 0x10) == 0)
    {
      id v5 = [MEMORY[0x1E4F5B268] constraintWithItem:self attribute:8 relatedBy:0 toItem:0 attribute:0 multiplier:0.0 constant:v4];
      [v5 setIdentifier:@"_UIKBAutolayoutHeightConstraint"];
      [(UIView *)self addConstraint:v5];
    }
  }
}

- (void)_removeAutolayoutSizingConstraints
{
  double v3 = FindHeightConstraint(self);
  if (v3)
  {
    double v4 = v3;
    [(UIView *)self removeConstraint:v3];
    [(UIView *)self setTranslatesAutoresizingMaskIntoConstraints:1];
    double v3 = v4;
  }
}

- (BOOL)_hasAutolayoutHeightConstraint
{
  uint64_t v2 = FindHeightConstraint(self);
  BOOL v3 = v2 != 0;

  return v3;
}

- (double)_findAutolayoutHeightConstraint
{
  uint64_t v2 = FindHeightConstraint(self);
  BOOL v3 = v2;
  if (v2)
  {
    [v2 constant];
    double v5 = v4;
  }
  else
  {
    double v5 = -1.0;
  }

  return v5;
}

- (void)reduceWidth:(double)a3
{
  [(UIView *)self size];
  [(UIView *)self setSize:v5 - a3];
  [(UIView *)self setNeedsDisplay];
}

- (BOOL)_isKnownUISearchBarComponentContainer
{
  return 0;
}

__n128 __68__UIView__UIConstraintBasedLayoutEmbedding___baselineOffsetsAtSize___block_invoke(uint64_t a1, void *a2)
{
  double v4 = -[UIView _nsis_layoutRectFromHostingViewInEngine:](*(void **)(a1 + 32), a2);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  *(double *)(v5 + 32) = v4;
  *(void *)(v5 + 40) = v6;
  *(void *)(v5 + 48) = v7;
  *(void *)(v5 + 56) = v8;
  double v9 = *(void **)(a1 + 40);
  if (*(void **)(a1 + 32) == v9)
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
    __n128 result = *(__n128 *)(v16 + 32);
    long long v17 = *(_OWORD *)(v16 + 48);
    *(__n128 *)(v15 + 32) = result;
    *(_OWORD *)(v15 + 48) = v17;
  }
  else
  {
    result.n128_f64[0] = -[UIView _nsis_layoutRectFromHostingViewInEngine:](v9, a2);
    double v11 = *(void **)(*(void *)(a1 + 56) + 8);
    void v11[4] = result.n128_u64[0];
    v11[5] = v12;
    v11[6] = v13;
    void v11[7] = v14;
  }
  return result;
}

- (void)_measureViewWithSize:(CGSize)a3 temporaryConstraints:(id)a4 suspendingSystemConstraints:(BOOL)a5 withOptimizedEngineBlock:(id)a6
{
  CGFloat height = a3.height;
  CGFloat width = a3.width;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v14 = [(UIView *)self _wantsConstraintBasedLayout];
  if (has_internal_diagnostics)
  {
    if (!v14)
    {
      uint64_t v29 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)CGAffineTransformComponents buf = 138412546;
        *(void *)&uint8_t buf[4] = NSStringFromSelector(a2);
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = self;
        _os_log_fault_impl(&dword_1853B0000, v29, OS_LOG_TYPE_FAULT, "Internal UIKit bug: %@ called an a view that does not want autolayout; %@",
          buf,
          0x16u);
      }
    }
  }
  else if (!v14)
  {
    long long v31 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_MergedGlobals_19_7) + 8);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CGAffineTransformComponents buf = 138412546;
      *(void *)&uint8_t buf[4] = NSStringFromSelector(a2);
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = self;
      _os_log_impl(&dword_1853B0000, v31, OS_LOG_TYPE_ERROR, "Internal UIKit bug: %@ called an a view that does not want autolayout; %@",
        buf,
        0x16u);
    }
  }
  int v15 = os_variant_has_internal_diagnostics();
  uint64_t v16 = *((void *)&self->_viewFlags + 1);
  if (v15)
  {
    if ((v16 & 0x1000) != 0)
    {
      long long v30 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)CGAffineTransformComponents buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v30, OS_LOG_TYPE_FAULT, "Internal UIKit bug: Should never re-enter -_system_layoutSizeThatFits:fixedAxes:", buf, 2u);
      }
    }
  }
  else if ((v16 & 0x1000) != 0)
  {
    long long v32 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", (unint64_t *)&unk_1EB25E470) + 8);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CGAffineTransformComponents buf = 0;
      _os_log_impl(&dword_1853B0000, v32, OS_LOG_TYPE_ERROR, "Internal UIKit bug: Should never re-enter -_system_layoutSizeThatFits:fixedAxes:", buf, 2u);
    }
  }
  *((void *)&self->_viewFlags + 1) |= 0x1000uLL;
  __int16 v36 = self;
  if ([(UIView *)self translatesAutoresizingMaskIntoConstraints]
    && -[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    id v17 = [(UIView *)self _layoutEngineCreateIfNecessary];
    int v18 = 1;
  }
  else
  {
    id v17 = objc_alloc_init(MEMORY[0x1E4F5B250]);
    if (dyld_program_sdk_at_least()) {
      [v17 setShouldIntegralize:0];
    }
    [v17 setEngineScalingCoefficients:-[UIView _preferredLayoutEngineToUserScalingCoefficients](self)];
    if (dyld_program_sdk_at_least()) {
      [v17 setDelegate:self];
    }
    int v18 = 0;
  }
  id v19 = 0;
  id v20 = 0;
  *(void *)CGAffineTransformComponents buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3052000000;
  long long v51 = __Block_byref_object_copy__127;
  id v52 = __Block_byref_object_dispose__127;
  uint64_t v53 = 0;
  if (v18)
  {
    id v19 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v20 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  v47[0] = 0;
  v47[1] = v47;
  v47[2] = 0x2020000000;
  char v48 = 0;
  uint64_t viewFlags = (uint64_t)v36->_viewFlags;
  v44[0] = MEMORY[0x1E4F143A8];
  v44[1] = 3221225472;
  void v44[2] = __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke;
  v44[3] = &unk_1E52FB490;
  int v35 = v18;
  char v45 = v18;
  v44[4] = v36;
  v44[5] = a4;
  BOOL v46 = a5;
  v44[6] = v19;
  v44[7] = v17;
  v44[8] = v20;
  v44[9] = buf;
  *(CGFloat *)&v44[10] = width;
  *(CGFloat *)&v44[11] = height;
  objc_msgSend(v17, "withAutomaticOptimizationDisabled:", v44, viewFlags);
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_2;
  v43[3] = &unk_1E52EBC10;
  v43[4] = v17;
  v43[5] = buf;
  [v17 withAutomaticOptimizationDisabled:v43];
  id v21 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  v42[2] = __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_3;
  v42[3] = &unk_1E52FB4B8;
  v42[4] = v21;
  _UIViewTopDownSubtreeTraversal((uint64_t)v36, v42, 0);
  long long v22 = v19;
  id v23 = (void (**)(id, id))a6;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v24 = [v21 countByEnumeratingWithState:&v38 objects:v49 count:16];
  if (v24)
  {
    uint64_t v25 = *(void *)v39;
    do
    {
      for (uint64_t i = 0; i != v24; ++i)
      {
        if (*(void *)v39 != v25) {
          objc_enumerationMutation(v21);
        }
        uint64_t v27 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        uint64_t v28 = v27 + 12;
        v27[13] |= 4uLL;
        [v27 _updateBaselineInformationDependentOnBounds];
        v28[1] &= ~4uLL;
      }
      uint64_t v24 = [v21 countByEnumeratingWithState:&v38 objects:v49 count:16];
    }
    while (v24);
  }

  v23[2](v23, v17);
  if (v35)
  {
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_4;
    v37[3] = &unk_1E52FB4E0;
    v37[4] = v20;
    v37[5] = v17;
    v37[7] = v36;
    void v37[8] = v47;
    v37[6] = v22;
    [v17 withAutomaticOptimizationDisabled:v37];

    -[NSISEngine _UIKitPerformPendingChangeNotifications]((uint64_t)v17);
  }
  else
  {
  }
  if ((*(void *)v34 & 0x300000000000) == 0x300000000000)
  {
    _UIViewTopDownSubtreeTraversal((uint64_t)v36, &__block_literal_global_337, 0);
    if (v35)
    {
      if (!objc_msgSend(-[UIView _layoutEngineHostConstraints](v36, "_layoutEngineHostConstraints"), "count")) {
        [(UIView *)v36 _setNeedsUpdateConstraints];
      }
    }
  }
  *((void *)&v36->_viewFlags + 1) &= ~0x1000uLL;
  _Block_object_dispose(v47, 8);
  _Block_object_dispose(buf, 8);
}

void *__140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(a1 + 96);
  BOOL v3 = *(void **)(a1 + 32);
  if (v2)
  {
    double v4 = (void *)[v3 _layoutEngineHostConstraints];
    uint64_t v5 = [v4 count];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v6 = *(void **)(a1 + 40);
    uint64_t v7 = [v6 countByEnumeratingWithState:&v28 objects:v33 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v29;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v29 != v9) {
            objc_enumerationMutation(v6);
          }
          double v11 = *(void **)(*((void *)&v28 + 1) + 8 * i);
          if (*(unsigned char *)(a1 + 97)) {
            BOOL v12 = v5 == 0;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12 || [*(id *)(*((void *)&v28 + 1) + 8 * i) relation]) {
            goto LABEL_15;
          }
          uint64_t v13 = objc_msgSend(v4, "objectAtIndexedSubscript:", objc_msgSend(v11, "firstAttribute") != 7);
          [v11 priority];
          if (v14 == 1000.0)
          {
            [v13 constant];
            double v16 = v15;
            [v11 constant];
            if (v16 == v17) {
              continue;
            }
          }
          [*(id *)(a1 + 48) addObject:v13];
          [v13 _removeFromEngine:*(void *)(a1 + 56)];
LABEL_15:
          [*(id *)(a1 + 64) addObject:v11];
          [v11 _addToEngine:*(void *)(a1 + 56)];
          continue;
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v28 objects:v33 count:16];
      }
      while (v8);
    }
  }
  else
  {
    -[UIView _populateEngineWithConstraintsForViewSubtree:forComputingFittingSizeOfView:](v3, *(void *)(a1 + 56), v3);
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    int v18 = *(void **)(a1 + 40);
    uint64_t v19 = [v18 countByEnumeratingWithState:&v24 objects:v32 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v25;
      do
      {
        for (uint64_t j = 0; j != v20; ++j)
        {
          if (*(void *)v25 != v21) {
            objc_enumerationMutation(v18);
          }
          [*(id *)(*((void *)&v24 + 1) + 8 * j) _addToEngine:*(void *)(a1 + 56)];
        }
        uint64_t v20 = [v18 countByEnumeratingWithState:&v24 objects:v32 count:16];
      }
      while (v20);
    }
  }
  return -[UIView _recursiveCollectTemporaryInternalConstraintsWithEngine:ignoreAutoresizingMaskConstraints:returningConstraintsForViewsNeedingSecondPass:currentTargetWidth:](*(void **)(a1 + 32), *(void **)(a1 + 56), 1, *(void *)(*(void *)(a1 + 72) + 8) + 40, *(double *)(a1 + 80));
}

uint64_t __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_2(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  int v2 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "keyEnumerator", 0), "allObjects");
  uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        -[UIView _finishTemporaryInternalConstraints:withEngine:](*(void **)(*((void *)&v7 + 1) + 8 * v6), (void *)[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKey:*(void *)(*((void *)&v7 + 1) + 8 * v6)], *(void **)(a1 + 32));
        ++v6;
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_3(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t result = [a2 _wantsBaselineUpdatingFollowingConstraintsPass];
  if (result) {
    uint64_t result = [*(id *)(a1 + 32) addObject:a2];
  }
  if ((a2[12] & 0x800000000000000) == 0) {
    *a3 = 1;
  }
  return result;
}

void *__140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_4(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v16 + 1) + 8 * i) _removeFromEngine:*(void *)(a1 + 40)];
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v4);
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v7 = *(void **)(a1 + 48);
  uint64_t result = (void *)[v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (result)
  {
    long long v9 = result;
    uint64_t v10 = *(void *)v13;
    do
    {
      double v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v12 + 1) + 8 * (void)v11) _addToEngine:*(void *)(a1 + 40)];
        double v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      uint64_t result = (void *)[v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
      long long v9 = result;
    }
    while (result);
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
    return -[UIView _resetLayoutEngineHostConstraints](*(void **)(a1 + 56));
  }
  return result;
}

void __140__UIView__UIConstraintBasedLayoutMeasuring___measureViewWithSize_temporaryConstraints_suspendingSystemConstraints_withOptimizedEngineBlock___block_invoke_5(uint64_t a1, uint64_t a2, BOOL *a3)
{
  *a3 = (*(void *)(a2 + 96) & 0x200000000000) != 0;
  *(void *)(a2 + 96) |= 0x100000000000uLL;
}

- (id)_preferredHoverShape
{
  return 0;
}

- (id)_preferredHoverEffect
{
  return 0;
}

- (BOOL)_providesCustomPointerInteraction
{
  return 0;
}

- (BOOL)_providesCustomRemoteHoverInteraction
{
  return 0;
}

- (UIView)_sourceViewIfPortal
{
  return 0;
}

- (BOOL)_canBeReusedInPickerView
{
  return 0;
}

- (_UITouchForceObservable)_touchForceObservable
{
  objc_getAssociatedObject(self, &_UITouchForceObservableAssociationKey);
  uint64_t v3 = (_UITouchForceObservable *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    uint64_t v3 = [[_UITouchForceObservable alloc] initWithView:self];
    objc_setAssociatedObject(self, &_UITouchForceObservableAssociationKey, v3, (void *)1);
  }
  return v3;
}

- (void)_registerForHDRAnimations
{
  +[_UIHDRUsageCoordinator sharedInstance]();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  -[_UIHDRUsageCoordinator registerForAndApplyHDRAnimationToView:]((uint64_t)v3, self);
}

- (id)_appendSnapshotDisplaySystemIdentifierToOptionsIfNeeded:(void *)a1
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = [a1 _window];
    uint64_t v5 = [v4 _windowHostingScene];
    uint64_t v6 = [v5 renderingEnvironment];
    long long v7 = [v6 systemDisplayIdentifier];

    if (v7)
    {
      uint64_t v8 = *MEMORY[0x1E4F3A500];
      long long v9 = [v3 objectForKeyedSubscript:*MEMORY[0x1E4F3A500]];

      if (!v9)
      {
        uint64_t v13 = v8;
        v14[0] = v7;
        uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];
        uint64_t v11 = objc_msgSend(v3, "bs_dictionaryByAddingEntriesFromDictionary:", v10);

        id v3 = (id)v11;
      }
    }
    id v3 = v3;

    a1 = v3;
  }

  return a1;
}

- (UIDropInteraction)_dynamicDropInteraction
{
  int v2 = objc_getAssociatedObject(self, &_UIViewDynamicDropInteractionKey);
  id v3 = [v2 dropInteraction];

  return (UIDropInteraction *)v3;
}

- (void)_setDynamicDropInteraction:(id)a3
{
  if (a3)
  {
    id v4 = a3;
    id value = [[_UIDropInteractionWeakWrapper alloc] initWithDropInteraction:v4];
  }
  else
  {
    id value = 0;
  }
  objc_setAssociatedObject(self, &_UIViewDynamicDropInteractionKey, value, (void *)1);
}

- (void)_ui_addToView:(id)a3 atIndex:(int64_t)a4
{
  id v8 = a3;
  if (a4 < 0)
  {
    id v6 = [(UIView *)self superview];

    long long v7 = v8;
    if (v6 == v8) {
      goto LABEL_6;
    }
    [v8 addSubview:self];
  }
  else
  {
    [v8 insertSubview:self atIndex:a4];
  }
  long long v7 = v8;
LABEL_6:
}

- (void)_ui_addSubLayoutItem:(id)a3
{
}

- (void)_ui_insertSubLayoutItem:(id)a3 atIndex:(int64_t)a4
{
}

+ (void)sticker_modifyAnimationsWithPreferredFrameRateRange:(CAFrameRateRange)a3 updateReason:(unsigned int)a4 animations:(id)a5
{
}

- (void)_willBeginBeingDisplayedInPointerContentEffect
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  int v2 = [(UIView *)self subviews];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * v6++) _willBeginBeingDisplayedInPointerContentEffect];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

- (void)_didStopBeingDisplayedInPointerContentEffect
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  int v2 = [(UIView *)self subviews];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * v6++) _didStopBeingDisplayedInPointerContentEffect];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

- (void)_uimorphingView_setInitialAlpha:(double)a3
{
  id v4 = [NSNumber numberWithDouble:a3];
  objc_setAssociatedObject(self, &_UIMorphingAssociatedInitialAlphaKey, v4, (void *)3);
}

- (double)_uimorphingView_getInitialAlpha
{
  int v2 = objc_getAssociatedObject(self, &_UIMorphingAssociatedInitialAlphaKey);
  [v2 doubleValue];
  double v4 = v3;

  return v4;
}

- (int)textEffectsVisibilityLevel
{
  return 0x7FFFFFFF;
}

- (CGRect)_convertViewPointToSceneSpaceForKeyboard:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  long long v8 = [(UIView *)self _window];
  long long v9 = -[UIWindow _fbsScene](v8);

  if (v9)
  {
    long long v10 = [(UIView *)self _window];
    uint64_t v11 = [v10 screen];
    uint64_t v12 = [v11 fixedCoordinateSpace];
    -[UIView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", v12, x, y, width, height);
    double v14 = v13;
    double v16 = v15;
    double v18 = v17;
    double v20 = v19;
  }
  else
  {
    long long v10 = [(UIView *)self layer];
    objc_msgSend(v10, "convertRect:toLayer:", 0, x, y, width, height);
    double v14 = v21;
    double v16 = v22;
    double v18 = v23;
    double v20 = v24;
  }

  double v25 = v14;
  double v26 = v16;
  double v27 = v18;
  double v28 = v20;
  result.size.double height = v28;
  result.size.double width = v27;
  result.origin.double y = v26;
  result.origin.double x = v25;
  return result;
}

- (BOOL)showsLargeContentViewer
{
  int v2 = [(UIView *)self _largeContentStoredProperties];
  char v3 = [v2 showsLargeContentViewer];

  return v3;
}

- (NSString)largeContentTitle
{
  int v2 = [(UIView *)self _largeContentStoredProperties];
  char v3 = [v2 largeContentTitle];

  return (NSString *)v3;
}

- (UIImage)largeContentImage
{
  int v2 = [(UIView *)self _largeContentStoredProperties];
  char v3 = [v2 largeContentImage];

  return (UIImage *)v3;
}

- (UIEdgeInsets)largeContentImageInsets
{
  int v2 = [(UIView *)self _largeContentStoredProperties];
  char v3 = v2;
  if (v2)
  {
    [v2 largeContentImageInsets];
    double v5 = v4;
    double v7 = v6;
    double v9 = v8;
    double v11 = v10;
  }
  else
  {
    double v11 = 0.0;
    double v9 = 0.0;
    double v7 = 0.0;
    double v5 = 0.0;
  }

  double v12 = v5;
  double v13 = v7;
  double v14 = v9;
  double v15 = v11;
  result.double right = v15;
  result.double bottom = v14;
  result.double left = v13;
  result.double top = v12;
  return result;
}

- (void)setLargeContentImageInsets:(UIEdgeInsets)largeContentImageInsets
{
  double right = largeContentImageInsets.right;
  double bottom = largeContentImageInsets.bottom;
  double left = largeContentImageInsets.left;
  double top = largeContentImageInsets.top;
  id v7 = [(UIView *)self _largeContentStoredPropertiesCreatingIfNecessary:1];
  objc_msgSend(v7, "setLargeContentImageInsets:", top, left, bottom, right);
}

- (BOOL)scalesLargeContentImage
{
  int v2 = [(UIView *)self _largeContentStoredProperties];
  char v3 = [v2 scalesLargeContentImage];

  return v3;
}

- (void)setScalesLargeContentImage:(BOOL)scalesLargeContentImage
{
  BOOL v3 = scalesLargeContentImage;
  id v4 = [(UIView *)self _largeContentStoredPropertiesCreatingIfNecessary:1];
  [v4 setScalesLargeContentImage:v3];
}

- (UIAccessibilityHUDItem)accessibilityHUDRepresentation
{
  return 0;
}

- (id)_largeContentViewerItemAtPoint:(CGPoint)a3
{
  double y = a3.y;
  double x = a3.x;
  uint64_t v11 = 0;
  double v12 = (id *)&v11;
  uint64_t v13 = 0x3032000000;
  double v14 = __Block_byref_object_copy__219;
  double v15 = __Block_byref_object_dispose__219;
  id v16 = 0;
  if (![(UIView *)self isHidden])
  {
    [(UIView *)self alpha];
    if (v6 >= 0.01)
    {
      if (-[UIView pointInside:withEvent:](self, "pointInside:withEvent:", 0, x, y))
      {
        if ([(UIView *)self showsLargeContentViewer]) {
          objc_storeStrong(v12 + 5, self);
        }
        id v7 = [(UIView *)self subviews];
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3221225472;
        v10[2] = __70__UIView_UILargeContentViewerPrivate___largeContentViewerItemAtPoint___block_invoke;
        v10[3] = &unk_1E530CB60;
        *(double *)&_OWORD v10[6] = x;
        *(double *)&v10[7] = y;
        void v10[4] = self;
        v10[5] = &v11;
        [v7 enumerateObjectsWithOptions:2 usingBlock:v10];
      }
    }
  }
  id v8 = v12[5];
  _Block_object_dispose(&v11, 8);

  return v8;
}

void __70__UIView_UILargeContentViewerPrivate___largeContentViewerItemAtPoint___block_invoke(double *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = *((void *)a1 + 4);
  double v7 = a1[6];
  double v8 = a1[7];
  id v9 = a2;
  objc_msgSend(v9, "convertPoint:fromView:", v6, v7, v8);
  objc_msgSend(v9, "_largeContentViewerItemAtPoint:");
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();

  double v10 = obj;
  if (obj)
  {
    objc_storeStrong((id *)(*(void *)(*((void *)a1 + 5) + 8) + 40), obj);
    double v10 = obj;
    *a4 = 1;
  }
}

- (id)_largeContentStoredProperties
{
  return [(UIView *)self _largeContentStoredPropertiesCreatingIfNecessary:0];
}

- (void)_encodeLargeContentViewerPropertiesWithCoder:(id)a3
{
  id v4 = a3;
  id v5 = [(UIView *)self _largeContentStoredProperties];
  [v4 encodeObject:v5 forKey:@"UIViewLargeContentStoredProperties"];
}

- (id)_largeContentViewerGestureManager
{
  return objc_getAssociatedObject(self, &_LargeContentViewerGestureManagerKey);
}

+ (void)_setAllowsUnsupportedMacIdiomBehavior:(BOOL)a3
{
  if (os_variant_has_internal_diagnostics())
  {
    id v4 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)CGAffineTransformComponents buf = 0;
      _os_log_fault_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "Allowing all unsupported behaviors in all idioms is unsupported.", buf, 2u);
    }
  }
  else
  {
    BOOL v3 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_setAllowsUnsupportedMacIdiomBehavior____s_category) + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl(&dword_1853B0000, v3, OS_LOG_TYPE_ERROR, "Allowing all unsupported behaviors in all idioms is unsupported.", v5, 2u);
    }
  }
}

+ (BOOL)_allowsUnsupportedMacIdiomBehavior
{
  return 0;
}

- (void)_throwForUnsupportedNonMacIdiomBehaviorWithReason:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(UIView *)self traitCollection];
  uint64_t v6 = [v5 userInterfaceIdiom];

  if (v6 != 5
    && ([(id)objc_opt_class() _allowsUnsupportedMacIdiomBehavior] & 1) == 0
    && !+[UIView _allowsUnsupportedMacIdiomBehavior])
  {
    double v7 = [MEMORY[0x1E4F28B50] mainBundle];
    double v8 = [v7 bundleIdentifier];
    int v9 = [v8 hasPrefix:@"com.apple."];

    if (!v9)
    {
      id v11 = [MEMORY[0x1E4F1CA00] exceptionWithName:@"_UICatalystUnsupportedMacIdiomBehavior" reason:v4 userInfo:0];
      objc_exception_throw(v11);
    }
    double v10 = _UICatalystFaultLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      int v12 = 138543362;
      id v13 = v4;
      _os_log_fault_impl(&dword_1853B0000, v10, OS_LOG_TYPE_FAULT, "Unsupported iOS or Mac Catalyst iPad Idiom behavior encountered: %{public}@", (uint8_t *)&v12, 0xCu);
    }
  }
}

- (id)_representationOfHierarchyForXcode
{
  BOOL v3 = [(UIView *)self _hierarchyRepresentation];
  id v4 = [(UIView *)self layer];
  id v5 = (void *)CAEncodeLayerTree();

  if (v5)
  {
    [v3 setObject:v5 forKey:@"layerData"];
  }
  uint64_t v6 = [MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v3 requiringSecureCoding:1 error:0];

  return v6;
}

- (id)_hierarchyRepresentation
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  BOOL v3 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:10];
  id v4 = [NSNumber numberWithLong:self];
  [v3 setObject:v4 forKey:@"address"];

  id v5 = (objc_class *)objc_opt_class();
  uint64_t v6 = NSStringFromClass(v5);
  [v3 setObject:v6 forKey:@"class"];

  double v7 = [(UIView *)self layer];
  double v8 = (objc_class *)objc_opt_class();
  int v9 = NSStringFromClass(v8);
  [v3 setObject:v9 forKey:@"layerClass"];

  double v10 = [(UIView *)self description];
  [v3 setObject:v10 forKey:@"description"];

  [(UIView *)self frame];
  id v11 = NSStringFromCGRect(v33);
  [v3 setObject:v11 forKey:@"frame"];

  int v12 = [(UIView *)self layer];
  id v13 = [v12 superlayer];
  uint64_t v14 = [v13 sublayers];
  double v15 = [(UIView *)self layer];
  uint64_t v16 = [v14 indexOfObject:v15];

  double v17 = [NSNumber numberWithUnsignedInteger:v16];
  [v3 setObject:v17 forKey:@"layerIndex"];

  double v18 = [MEMORY[0x1E4F1CA48] array];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  double v19 = [(UIView *)self subviews];
  uint64_t v20 = [v19 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v27 != v22) {
          objc_enumerationMutation(v19);
        }
        double v24 = [*(id *)(*((void *)&v26 + 1) + 8 * i) _hierarchyRepresentation];
        [v18 addObject:v24];
      }
      uint64_t v21 = [v19 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v21);
  }

  [v3 setObject:v18 forKey:@"subviews"];
  return v3;
}

+ (void)_enableToolsDebugColorViewBounds:(BOOL)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (__toolsDebugColorViewBounds) {
    BOOL v3 = a3;
  }
  else {
    BOOL v3 = 1;
  }
  __toolsDebugColorViewBounds = a3;
  [MEMORY[0x1E4F39CF8] begin];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = +[UIWindow allWindowsIncludingInternalWindows:onlyVisibleWindows:](UIWindow, "allWindowsIncludingInternalWindows:onlyVisibleWindows:", 0, 0, 0);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        int v9 = *(void **)(*((void *)&v10 + 1) + 8 * v8);
        if (!v3) {
          _UIViewRecursivelyRemoveDebugColorBoundsViews(*(void **)(*((void *)&v10 + 1) + 8 * v8));
        }
        _UIViewRecursivelySetNeedsLayout(v9);
        [v9 layoutIfNeeded];
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }

  [MEMORY[0x1E4F39CF8] commit];
}

+ (void)_enableToolsDebugAlignmentRects:(BOOL)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (__toolsDebugAlignmentRects) {
    BOOL v3 = a3;
  }
  else {
    BOOL v3 = 1;
  }
  __toolsDebugAlignmentRects = a3;
  [MEMORY[0x1E4F39CF8] begin];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v4 = +[UIWindow allWindowsIncludingInternalWindows:onlyVisibleWindows:](UIWindow, "allWindowsIncludingInternalWindows:onlyVisibleWindows:", 0, 0, 0);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        int v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if (v9) {
          char v10 = v3;
        }
        else {
          char v10 = 1;
        }
        if ((v10 & 1) == 0) {
          _UIViewRecursivelyRemoveDebugAlignmentViews(*(void **)(*((void *)&v11 + 1) + 8 * i));
        }
        _UIViewRecursivelySetNeedsLayout(v9);
        [v9 layoutIfNeeded];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }

  [MEMORY[0x1E4F39CF8] commit];
}

- (id)_colorViewBoundsOverlayCreateIfNecessary:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v5 = [(UIView *)self subviews];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = 0;
    uint64_t v9 = *(void *)v15;
LABEL_3:
    uint64_t v10 = 0;
    long long v11 = v8;
    while (1)
    {
      if (*(void *)v15 != v9) {
        objc_enumerationMutation(v5);
      }
      id v8 = *(id *)(*((void *)&v14 + 1) + 8 * v10);

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        break;
      }
      ++v10;
      long long v11 = v8;
      if (v7 == v10)
      {
        uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v7) {
          goto LABEL_3;
        }

        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    id v8 = 0;
  }

  if (!v8 && v3 && (*((void *)&self->_viewFlags + 1) & 0x8000000000000) == 0)
  {
    long long v12 = [[_UIDebugColorBoundsView alloc] initWithView:self];
    [(UIView *)self addSubview:v12];
    *((void *)&self->_viewFlags + 1) |= 0x8000000000000uLL;
  }
  return v8;
}

- (BOOL)_allowsLinkPreviewInteractionInViewServices
{
  int v2 = [(UIView *)self window];
  char v3 = [v2 _allowsLinkPreviewInteractionInViewServices];

  return v3;
}

+ (BOOL)_interruptibleParallaxTransitionsEnabledWithTraitCollection:(uint64_t)a1
{
  id v2 = a2;
  self;
  if (qword_1EB264E70 != -1) {
    dispatch_once(&qword_1EB264E70, &__block_literal_global_7_4);
  }
  if (byte_1EB264E61) {
    BOOL v3 = [v2 userInterfaceIdiom] != 3;
  }
  else {
    BOOL v3 = 0;
  }

  return v3;
}

uint64_t __88__UIView_FluidTransitions___interruptibleParallaxTransitionsEnabledWithTraitCollection___block_invoke()
{
  if (+[UIView _isOnFluidParallaxDenyList])
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = dyld_program_sdk_at_least();
    if (result) {
      uint64_t result = _os_feature_enabled_impl();
    }
  }
  byte_1EB264E61 = result;
  return result;
}

+ (uint64_t)_fluidZoomTransitionsEnabled
{
  if (qword_1EB264E78 != -1) {
    dispatch_once(&qword_1EB264E78, &__block_literal_global_11_2);
  }
  return byte_1EB264E62;
}

uint64_t __56__UIView_FluidTransitions___fluidZoomTransitionsEnabled__block_invoke()
{
  uint64_t result = dyld_program_sdk_at_least();
  if (result) {
    uint64_t result = _os_feature_enabled_impl();
  }
  byte_1EB264E62 = result;
  return result;
}

+ (uint64_t)_uip_fluidPresentationTransitionsEnabled
{
  return fluidPresentationTransitionsEnabled;
}

+ (void)_performWithFluidPresentationTransitionsEnabled:(uint64_t)a1
{
  id v2 = a2;
  self;
  char v3 = fluidPresentationTransitionsEnabled;
  fluidPresentationTransitionsEnabled = 1;
  v2[2](v2);

  fluidPresentationTransitionsEnabled = v3;
}

- (void)_nsis_origin:(CGPoint *)a3 bounds:(CGRect *)a4 inEngine:(id)a5
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  id v9 = a5;
  uint64_t v10 = [v9 delegate];
  if (dyld_program_sdk_at_least())
  {

LABEL_6:
    uint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    [v10 handleFailureInMethod:a2 object:self file:@"NSLayoutConstraint_OldUIKitAdditions.m" lineNumber:55 description:@"Error in compatibility flow"];
    goto LABEL_7;
  }
  if (v10)
  {
    int v11 = [v10 _forceLayoutEngineSolutionInRationalEdges];

    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
LABEL_7:

LABEL_8:
  if (os_variant_has_internal_diagnostics())
  {
    if (!v9)
    {
      id v67 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf.a) = 138412290;
        *(void *)((char *)&buf.a + 4) = self;
        _os_log_fault_impl(&dword_1853B0000, v67, OS_LOG_TYPE_FAULT, "Attempting to get auto layout values with nil engine. Affected view: %@", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  else if (!v9)
  {
    long long v70 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_MergedGlobals_1311) + 8);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.a) = 138412290;
      *(void *)((char *)&buf.a + 4) = self;
      _os_log_impl(&dword_1853B0000, v70, OS_LOG_TYPE_ERROR, "Attempting to get auto layout values with nil engine. Affected view: %@", (uint8_t *)&buf, 0xCu);
    }
  }
  [(UIView *)self alignmentRectInsets];
  double v13 = v12;
  double v15 = v14;
  double v17 = v16;
  double v84 = v18;
  [v9 engineScalingCoefficients];
  double v20 = v19;
  double v22 = v21;
  if (os_variant_has_internal_diagnostics())
  {
    if (v20 <= 0.0 || fabs(v20) == INFINITY || v22 <= 0.0 || (double v68 = fabs(v22), v68 >= INFINITY) && v68 <= INFINITY)
    {
      long long v69 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf.a) = 134218240;
        *(double *)((char *)&buf.a + 4) = v20;
        WORD2(buf.b) = 2048;
        *(double *)((char *)&buf.b + 6) = v22;
        _os_log_fault_impl(&dword_1853B0000, v69, OS_LOG_TYPE_FAULT, "Non-positive or non-finite engine scaling coefficients {%f, %f}. This probably means someone forgot to set the engine scaling coefficients on the engine.", (uint8_t *)&buf, 0x16u);
      }
    }
  }
  else if (v20 <= 0.0 || fabs(v20) == INFINITY || v22 <= 0.0 || (double v23 = fabs(v22), v23 >= INFINITY) && v23 <= INFINITY)
  {
    double v24 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB264ED8) + 8);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.a) = 134218240;
      *(double *)((char *)&buf.a + 4) = v20;
      WORD2(buf.b) = 2048;
      *(double *)((char *)&buf.b + 6) = v22;
      _os_log_impl(&dword_1853B0000, v24, OS_LOG_TYPE_ERROR, "Non-positive or non-finite engine scaling coefficients {%f, %f}. This probably means someone forgot to set the engine scaling coefficients on the engine.", (uint8_t *)&buf, 0x16u);
    }
  }
  double v25 = (double *)MEMORY[0x1E4F1DAD8];
  CGPoint v87 = (CGPoint)*MEMORY[0x1E4F1DAD8];
  if ((unint64_t)a3 | (unint64_t)a4)
  {
    [(UIView *)self bounds];
    CGFloat v27 = v26;
    CGFloat v29 = v28;
    long long v30 = [(UIView *)self _boundsWidthVariable];
    [v9 valueForVariable:v30];
    double v82 = v15;
    double v32 = v31;
    CGRect v33 = [(UIView *)self _boundsHeightVariable];
    [v9 valueForVariable:v33];
    double v35 = v34;

    double v74 = v22 * round(v35);
    double rect = v20 * round(v32);
    if (a4)
    {
      a4->origin.CGFloat x = v27;
      a4->origin.CGFloat y = v29;
      a4->size.CGFloat width = v84 + v82 + rect;
      a4->size.CGFloat height = v17 + v13 + v74;
    }
    double rect_24 = v17 + v13 + v74;
    double v81 = v84 + v82 + rect;
    CGFloat rect_8 = v29;
    CGFloat rect_16 = v27;
    memset(&buf, 0, sizeof(buf));
    [(UIView *)self transform];
    if (a3)
    {
      __int16 v36 = [(UIView *)self _minXVariable];
      int v37 = [v9 hasValue:&v87 forVariable:v36];

      long long v38 = [(UIView *)self _minYVariable];
      int v39 = [v9 hasValue:&v87.y forVariable:v38];

      if ((v37 & 1) != 0 || v39)
      {
        if ((v82 != 0.0 || v13 != 0.0 || v84 != 0.0 || v17 != 0.0)
          && fabs(vaddvq_f64(vmulq_f64(*(float64x2_t *)&buf.a, *(float64x2_t *)&buf.c))) >= 0.00001)
        {
          long long v71 = [MEMORY[0x1E4F28B00] currentHandler];
          [v71 handleFailureInMethod:a2, self, @"NSLayoutConstraint_OldUIKitAdditions.m", 81, @"Auto layout doesn't support nonzero alignment insets on views with bounds transforms that don't preserve rectangles. The problem is in this view: %@", self object file lineNumber description];
        }
        double v40 = -v82;
        double v41 = -v13;
        if (*v25 != -v82 || v25[1] != v41)
        {
          CGAffineTransform v86 = buf;
          if (!CGAffineTransformIsIdentity(&v86))
          {
            v90.origin.CGFloat x = 0.0;
            v90.origin.CGFloat y = 0.0;
            v90.size.CGFloat width = rect;
            v90.size.CGFloat height = v74;
            CGFloat v42 = v82 - CGRectGetMidX(v90);
            v91.origin.CGFloat x = 0.0;
            v91.origin.CGFloat y = 0.0;
            v91.size.CGFloat width = rect;
            v91.size.CGFloat height = v74;
            CGFloat v43 = v13 - CGRectGetMidY(v91);
            v92.origin.CGFloat x = -v82;
            v92.origin.CGFloat y = -v13;
            v92.size.CGFloat height = rect_24;
            v92.size.CGFloat width = v84 + v82 + rect;
            CGRect v93 = CGRectOffset(v92, v42, v43);
            CGAffineTransform v86 = buf;
            CGRect v94 = CGRectApplyAffineTransform(v93, &v86);
            CGFloat x = v94.origin.x;
            CGFloat v72 = v94.origin.x;
            CGFloat y = v94.origin.y;
            CGFloat v45 = v94.origin.y;
            CGFloat height = v94.size.height;
            CGFloat width = v94.size.width;
            v94.origin.CGFloat x = 0.0;
            v94.origin.CGFloat y = 0.0;
            v94.size.CGFloat width = rect;
            v94.size.CGFloat height = v74;
            CGRect v95 = CGRectOffset(v94, v42, v43);
            CGAffineTransform v86 = buf;
            CGRect v96 = CGRectApplyAffineTransform(v95, &v86);
            CGFloat v46 = v96.origin.x;
            CGFloat v75 = v96.size.height;
            rectCATransform3D a = v96.origin.x;
            CGFloat v47 = v96.origin.y;
            CGFloat v48 = v96.size.width;
            v96.origin.CGFloat x = x;
            v96.origin.CGFloat y = v45;
            v96.size.CGFloat width = width;
            v96.size.CGFloat height = height;
            double MinX = CGRectGetMinX(v96);
            v97.origin.CGFloat x = v46;
            v97.origin.CGFloat y = v47;
            v97.size.CGFloat width = v48;
            v97.size.CGFloat height = v75;
            double v40 = MinX - CGRectGetMinX(v97);
            v98.origin.CGFloat x = v72;
            v98.origin.CGFloat y = y;
            v98.size.CGFloat width = width;
            v98.size.CGFloat height = height;
            double MinY = CGRectGetMinY(v98);
            v99.origin.CGFloat x = recta;
            v99.origin.CGFloat y = v47;
            v99.size.CGFloat width = v48;
            v99.size.CGFloat height = v75;
            double v41 = MinY - CGRectGetMinY(v99);
          }
        }
        long long v51 = [(UIView *)self superview];

        if (v51)
        {
          id v52 = [(UIView *)self superview];
          [v52 alignmentRectInsets];
          double v54 = v53;
          double v56 = v55;
          double v58 = v57;
          double v60 = v59;

          if (v60 == 0.0 && v56 == 0.0 && v54 == 0.0)
          {
            if (v58 != 0.0)
            {
              double v41 = v41 + v54;
              double v40 = v40 + v56;
            }
          }
          else
          {
            double v40 = v40 + v56;
            double v41 = v41 + v54;
          }
        }
      }
      else
      {
        double v40 = -v82;
        double v41 = -v13;
      }
      if (v37)
      {
        double v61 = v20 * v87.x;
      }
      else
      {
        [(UIView *)self center];
        double v40 = v62;
        CGAffineTransform v86 = buf;
        v100.origin.CGFloat x = rect_16;
        v100.origin.CGFloat y = rect_8;
        v100.size.CGFloat height = rect_24;
        v100.size.CGFloat width = v81;
        CGRect v101 = CGRectApplyAffineTransform(v100, &v86);
        double v61 = CGRectGetWidth(v101) * -0.5;
      }
      double v63 = v40 + v61;
      v87.CGFloat x = v63;
      if (v39)
      {
        double v64 = v41 + v22 * v87.y;
      }
      else
      {
        [(UIView *)self center];
        double v66 = v65;
        CGAffineTransform v86 = buf;
        v102.origin.CGFloat x = rect_16;
        v102.origin.CGFloat y = rect_8;
        v102.size.CGFloat height = rect_24;
        v102.size.CGFloat width = v81;
        CGRect v103 = CGRectApplyAffineTransform(v102, &v86);
        double v64 = v66 + CGRectGetHeight(v103) * -0.5;
        double v63 = v87.x;
      }
      v87.CGFloat x = round(2.0 / v20 * v63) / (2.0 / v20);
      v87.CGFloat y = round(2.0 / v22 * v64) / (2.0 / v22);
      *a3 = v87;
    }
  }
  else
  {
    memset(&buf, 0, sizeof(buf));
    [(UIView *)self transform];
  }
}

- (id)_scrollViewWantingUpdateInConstraint:(id)a3
{
  id v3 = a3;
  id v4 = [v3 firstItem];
  uint64_t v5 = [v3 secondItem];

  if (v4 != v5
    && ([v4 _supportsContentDimensionVariables]
     && (char v6 = [v5 isDescendantOfView:v4], v7 = v4, (v6 & 1) != 0)
     || [v5 _supportsContentDimensionVariables]
     && (v8 = [v4 isDescendantOfView:v5], uint64_t v7 = v5, v8)))
  {
    id v9 = v7;
  }
  else
  {
    id v9 = 0;
  }
  id v10 = v9;

  return v10;
}

- (BOOL)_old_nsli_lowerAttribute:(int)a3 intoExpression:(id)a4 withCoefficient:(double)a5 forConstraint:(id)a6
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v10 = a4;
  id v11 = a6;
  double v12 = [v11 container];
  double v13 = [v10 engine];
  if (v12 && ![(UIView *)self isDescendantOfView:v12])
  {
    double v17 = *(NSObject **)(__UILogGetCategoryCachedImpl("LayoutConstraints", &_old_nsli_lowerAttribute_intoExpression_withCoefficient_forConstraint____s_category)+ 8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      double v18 = v17;
      double v19 = (void *)[(UIView *)v12 performSelector:sel_recursiveDescription];
      id v20 = v19;
      uint64_t v21 = [(UIView *)self superview];
      double v22 = (void *)v21;
      int v54 = 138413058;
      double v23 = @"NO SUPERVIEW";
      id v55 = v11;
      if (v21) {
        double v23 = (__CFString *)v21;
      }
      __int16 v56 = 2112;
      double v57 = v19;
      __int16 v58 = 2112;
      double v59 = self;
      __int16 v60 = 2112;
      double v61 = v23;
      _os_log_impl(&dword_1853B0000, v18, OS_LOG_TYPE_ERROR, "View hierarchy unprepared for constraint.\n\tConstraint: %@\n\tContainer hierarchy: \n%@\n\tView not found in container hierarchy: %@\n\tThat view's superview: %@", (uint8_t *)&v54, 0x2Au);
    }
    BOOL v24 = 0;
  }
  else
  {
    double v14 = [(UIView *)self _scrollViewWantingUpdateInConstraint:v11];
    double v15 = v14;
    if (v14) {
      [v14 _setUseContentDimensionVariablesForConstraintLowering:1];
    }
    if (v12) {
      double v16 = v12;
    }
    else {
      double v16 = self;
    }
    [(UIView *)v16 nsli_engineToUserScalingCoefficients];
    if (a3 > 0x25 || (double v27 = v26, ((1 << a3) & 0x2A00119D19) == 0)) {
      double v27 = v25;
    }
    if (a3 == 102) {
      int v28 = 8;
    }
    else {
      int v28 = a3;
    }
    if (a3 == 101) {
      int v29 = 7;
    }
    else {
      int v29 = v28;
    }
    if ((a3 - 11) >= 2)
    {
      long long v30 = self;
    }
    else
    {
      long long v30 = [(UIView *)self _viewForBaselineLayout];
    }
    double v31 = v30;
    uint64_t v32 = [(id)UIApp userInterfaceLayoutDirection];
    double v33 = v27 * a5;
    switch(v29)
    {
      case 1:
      case 32:
        goto LABEL_25;
      case 2:
      case 36:
        goto LABEL_34;
      case 3:
      case 33:
        goto LABEL_42;
      case 4:
      case 37:
        goto LABEL_39;
      case 5:
        if (v32 != 1) {
          goto LABEL_25;
        }
        double v33 = -v33;
LABEL_34:
        double v34 = 1.0 / v27;
        double v35 = self;
        __int16 v36 = v12;
        uint64_t v37 = 0;
        goto LABEL_40;
      case 6:
        if (v32 != 1) {
          goto LABEL_34;
        }
        double v33 = -v33;
LABEL_25:
        double v34 = 1.0 / v27;
        double v35 = self;
        __int16 v36 = v12;
        uint64_t v37 = 0;
        goto LABEL_43;
      case 7:
        BOOL v43 = a3 == 101;
        long long v44 = self;
        CGFloat v45 = v12;
        uint64_t v46 = 0;
        goto LABEL_37;
      case 8:
        BOOL v43 = a3 == 102;
        long long v44 = self;
        CGFloat v45 = v12;
        uint64_t v46 = 1;
LABEL_37:
        uint64_t v42 = [(UIView *)v44 _dimensionExpressionInContainer:v45 vertical:v46 useContentVariables:v43 engine:v13];
        goto LABEL_45;
      case 9:
      case 34:
        double v38 = 1.0 / v27;
        int v39 = self;
        double v40 = v12;
        uint64_t v41 = 0;
        goto LABEL_28;
      case 10:
      case 35:
        double v38 = 1.0 / v27;
        int v39 = self;
        double v40 = v12;
        uint64_t v41 = 1;
LABEL_28:
        uint64_t v42 = [(UIView *)v39 _centerExpressionInContainer:v40 vertical:v41 contentInsetScale:v13 engine:v38];
        goto LABEL_45;
      case 11:
        [(UIView *)v31 _baselineOffsetFromBottom];
        -[UIView convertSize:fromView:](v12, "convertSize:fromView:", self, 1.0, v47);
        [v10 incrementConstant:-(a5 * v48)];
LABEL_39:
        double v34 = 1.0 / v27;
        double v35 = v31;
        __int16 v36 = v12;
        uint64_t v37 = 1;
LABEL_40:
        uint64_t v49 = 1;
        goto LABEL_44;
      case 12:
        [(UIView *)v31 _firstBaselineOffsetFromTop];
        -[UIView convertSize:fromView:](v12, "convertSize:fromView:", self, 1.0, v50);
        [v10 incrementConstant:v51 * a5];
LABEL_42:
        double v34 = 1.0 / v27;
        double v35 = self;
        __int16 v36 = v12;
        uint64_t v37 = 1;
LABEL_43:
        uint64_t v49 = 0;
LABEL_44:
        uint64_t v42 = [(UIView *)v35 _edgeExpressionInContainer:v36 vertical:v37 max:v49 contentInsetScale:v13 engine:v34];
LABEL_45:
        id v52 = (void *)v42;
        [v10 addExpression:v42 times:v33];

        break;
      default:
        break;
    }
    if (v15) {
      [v15 _setUseContentDimensionVariablesForConstraintLowering:0];
    }

    BOOL v24 = 1;
  }

  return v24;
}

- (void)_addCenterExpressionToExpression:(id)a3 isVertical:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  memset(v15, 0, sizeof(v15));
  long long v14 = 0u;
  [(UIView *)self transform];
  if (v4)
  {
    uint64_t v7 = [(UIView *)self nsli_minYVariable];
    [v6 addVariable:v7 coefficient:1.0];

    if (fabs(*((double *)v15 + 1)) >= 0.00001)
    {
      int v8 = [(UIView *)self nsli_boundsHeightVariable];
      [v6 addVariable:v8 coefficient:fabs(*((double *)v15 + 1)) * 0.5];
    }
    if (fabs(*((double *)&v14 + 1)) >= 0.00001)
    {
      id v9 = (double *)&v14 + 1;
      uint64_t v10 = [(UIView *)self nsli_boundsWidthVariable];
LABEL_10:
      double v13 = (void *)v10;
      [v6 addVariable:v10 coefficient:fabs(*v9) * 0.5];
    }
  }
  else
  {
    id v11 = [(UIView *)self nsli_minXVariable];
    [v6 addVariable:v11 coefficient:1.0];

    if (fabs(*(double *)&v14) >= 0.00001)
    {
      double v12 = [(UIView *)self nsli_boundsWidthVariable];
      [v6 addVariable:v12 coefficient:fabs(*(double *)&v14) * 0.5];
    }
    if (fabs(*(double *)v15) >= 0.00001)
    {
      id v9 = (double *)v15;
      uint64_t v10 = [(UIView *)self nsli_boundsHeightVariable];
      goto LABEL_10;
    }
  }
}

- (id)_lowerExpressionOneLevelWithCurrentXExpression:(id)a3 YExpression:(id)a4 vertical:(BOOL)a5 container:(id)a6 engine:(id)a7
{
  BOOL v9 = a5;
  id v13 = a3;
  id v14 = a4;
  id v15 = a7;
  id v16 = a6;
  id v17 = [(UIView *)self superview];

  if (v17 == v16)
  {
    if (v9) {
      double v22 = v14;
    }
    else {
      double v22 = v13;
    }
    id v20 = v22;
  }
  else
  {
    memset(&v34, 0, sizeof(v34));
    if (v17) {
      [v17 transform];
    }
    CGAffineTransform t1 = v34;
    long long v18 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    *(_OWORD *)&t2.double a = *MEMORY[0x1E4F1DAB8];
    *(_OWORD *)&t2.double c = v18;
    *(_OWORD *)&t2.tCGFloat x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
    BOOL v19 = CGAffineTransformEqualToTransform(&t1, &t2);
    id v20 = (id)[objc_alloc(MEMORY[0x1E4F5B258]) initWithEngine:v15];
    [v17 _addCenterExpressionToExpression:v20 isVertical:v9];
    if (v19)
    {
      if (v9) {
        id v21 = v14;
      }
      else {
        id v21 = v13;
      }
      [v20 addExpression:v21 times:1.0];
      if (v9) {
        objc_msgSend(v17, "nsli_boundsHeightVariable");
      }
      else {
      double v27 = objc_msgSend(v17, "nsli_boundsWidthVariable");
      }
      double v28 = -0.5;
    }
    else
    {
      double a = v34.a;
      double d = v34.d;
      if (fabs(v34.a * v34.c + v34.b * v34.d) >= 0.00001)
      {
        long long v30 = [MEMORY[0x1E4F28B00] currentHandler];
        double v31 = [(UIView *)self superview];
        [v30 handleFailureInMethod:a2, self, @"NSLayoutConstraint_OldUIKitAdditions.m", 295, @"Autolayout doesn't support crossing bounds transforms that don't preserve rectangles. The problem is in this view: %@", v31 object file lineNumber description];

        double d = v34.d;
        double a = v34.a;
      }
      if (v9) {
        double v25 = d;
      }
      else {
        double v25 = a;
      }
      if (v9) {
        id v26 = v14;
      }
      else {
        id v26 = v13;
      }
      [v20 addExpression:v26 times:v25];
      if (v9)
      {
        double v27 = objc_msgSend(v17, "nsli_boundsHeightVariable");
        double v28 = d * -0.5;
      }
      else
      {
        double v27 = objc_msgSend(v17, "nsli_boundsWidthVariable");
        double v28 = a * -0.5;
      }
    }
    [v20 addVariable:v27 coefficient:v28];
  }
  return v20;
}

- (id)_centerExpressionInContainer:(id)a3 vertical:(BOOL)a4 contentInsetScale:(double)a5 engine:(id)a6
{
  BOOL v8 = a4;
  uint64_t v10 = (UIView *)a3;
  id v11 = a6;
  if (self == v10)
  {
    [(UIView *)self bounds];
    double v15 = v14;
    double v17 = v16;
    id v12 = (id)[objc_alloc(MEMORY[0x1E4F5B258]) initWithEngine:v11];
    if (v8)
    {
      long long v18 = [(UIView *)self nsli_boundsHeightVariable];
      [v12 addVariable:v18 coefficient:0.5];

      [v12 incrementConstant:v17];
      id v13 = v12;
      id v12 = 0;
    }
    else
    {
      BOOL v19 = [(UIView *)self nsli_boundsWidthVariable];
      [v12 addVariable:v19 coefficient:0.5];

      [v12 incrementConstant:v15];
      id v13 = 0;
    }
  }
  else
  {
    id v12 = (id)[objc_alloc(MEMORY[0x1E4F5B258]) initWithEngine:v11];
    id v13 = (id)[objc_alloc(MEMORY[0x1E4F5B258]) initWithEngine:v11];
    [(UIView *)self _addCenterExpressionToExpression:v12 isVertical:0];
    [(UIView *)self _addCenterExpressionToExpression:v13 isVertical:1];
  }
  id v20 = self;
  id v21 = v20;
  if (v10 && v20 != v10)
  {
    double v22 = v20;
    do
    {
      double v23 = v13;
      long long v35 = 0u;
      BOOL v24 = v12;
      long long v34 = 0u;
      if (v22) {
        objc_msgSend(v22, "transform", (unsigned __int128)0, (unsigned __int128)0);
      }
      objc_msgSend(v12, "incrementConstant:", 0.0, v34, v35);
      [v23 incrementConstant:0.0];
      double v25 = [v22 _lowerExpressionOneLevelWithCurrentXExpression:v12 YExpression:v23 vertical:0 container:v10 engine:v11];
      id v26 = [v22 _lowerExpressionOneLevelWithCurrentXExpression:v24 YExpression:v23 vertical:1 container:v10 engine:v11];
      id v12 = v25;

      id v13 = v26;
      if (([v22 _useContentDimensionVariablesForConstraintLowering] & 1) == 0
        && ![(UIView *)v21 translatesAutoresizingMaskIntoConstraints]
        && (objc_opt_respondsToSelector() & 1) != 0)
      {
        [v22 contentInset];
        double v28 = v27;
        [v12 incrementConstant:v29 * a5];
        [v13 incrementConstant:v28 * a5];
      }
      uint64_t v30 = [v22 superview];

      double v22 = (void *)v30;
    }
    while ((UIView *)v30 != v10);
    id v21 = v10;
  }
  if (v8) {
    double v31 = v13;
  }
  else {
    double v31 = v12;
  }
  id v32 = v31;

  return v32;
}

- (id)_edgeExpressionInContainer:(id)a3 vertical:(BOOL)a4 max:(BOOL)a5 contentInsetScale:(double)a6 engine:(id)a7
{
  BOOL v55 = a5;
  BOOL v9 = a4;
  id v12 = (UIView *)a3;
  id v13 = a7;
  double v14 = (void *)[objc_alloc(MEMORY[0x1E4F5B258]) initWithEngine:v13];
  double v15 = self;
  double v16 = v15;
  if (!v12 || v15 == v12)
  {
    int v39 = v15;
    goto LABEL_63;
  }
  SEL v54 = a2;
  double v17 = v15;
  do
  {
    float64x2_t v57 = 0u;
    long long v58 = 0u;
    float64x2_t v56 = 0u;
    if (v17)
    {
      [(UIView *)v17 transform];
      double v18 = v56.f64[1];
    }
    else
    {
      double v18 = 0.0;
    }
    BOOL v19 = fabs(v18) < 0.00001 && fabs(v57.f64[0]) < 0.00001 && fabs(v56.f64[0] * v57.f64[1]) >= 0.00001;
    if (v17 != v16 && !v19)
    {
      uint64_t v37 = [MEMORY[0x1E4F28B00] currentHandler];
      [v37 handleFailureInMethod:v54, v16, @"NSLayoutConstraint_OldUIKitAdditions.m", 390, @"Autolayout doesn't support crossing rotational bounds transforms with edge layout constraints, such as right, left, top, bottom. The offending view is: %@", v17 object file lineNumber description];
    }
    if (v17 == v16 && fabs(vaddvq_f64(vmulq_f64(v56, v57))) >= 0.00001)
    {
      double v38 = [MEMORY[0x1E4F28B00] currentHandler];
      [v38 handleFailureInMethod:v54, v16, @"NSLayoutConstraint_OldUIKitAdditions.m", 391, @"Autolayout doesn't support transforms that don't preserve rectangles. The offending view is: %@", v16 object file lineNumber description];
    }
    if (v9) {
      uint64_t v20 = 5;
    }
    else {
      uint64_t v20 = 4;
    }
    double v21 = v56.f64[v20];
    BOOL v22 = [(UIView *)v17 _useContentDimensionVariablesForConstraintLowering];
    if (v17 != v16)
    {
      if (v9)
      {
        double v24 = v57.f64[1];
        double v23 = v57.f64[0];
      }
      else
      {
        double v24 = v56.f64[1];
        double v23 = v56.f64[0];
      }
      [v14 scaleBy:sqrt(v23 * v23 + v24 * v24)];
      if (!v22
        && ![(UIView *)v16 translatesAutoresizingMaskIntoConstraints]
        && (objc_opt_respondsToSelector() & 1) != 0)
      {
        [(UIView *)v17 contentInset];
        if (!v9) {
          double v25 = v26;
        }
        [v14 incrementConstant:v25 * a6];
      }
      goto LABEL_57;
    }
    if (fabs(v56.f64[0]) < 0.00001)
    {
      if (fabs(v56.f64[1]) < 0.00001 || !v55) {
        goto LABEL_57;
      }
LABEL_46:
      if (v22)
      {
        if (v9) {
          [(UIView *)v16 nsli_contentWidthVariable];
        }
        else {
          [(UIView *)v16 nsli_contentHeightVariable];
        }
      }
      else if (v9)
      {
        [(UIView *)v16 nsli_boundsWidthVariable];
      }
      else
      {
        [(UIView *)v16 nsli_boundsHeightVariable];
      uint64_t v31 = };
      id v32 = (void *)v31;
      double v33 = fabs(v56.f64[1]);
      double v34 = fabs(v57.f64[0]);
      if (!v9) {
        double v33 = v34;
      }
      [v14 addVariable:v31 coefficient:v33];

      goto LABEL_57;
    }
    if (v55)
    {
      if (v22)
      {
        if (v9) {
          [(UIView *)v16 nsli_contentHeightVariable];
        }
        else {
          [(UIView *)v16 nsli_contentWidthVariable];
        }
      }
      else if (v9)
      {
        [(UIView *)v16 nsli_boundsHeightVariable];
      }
      else
      {
        [(UIView *)v16 nsli_boundsWidthVariable];
      uint64_t v27 = };
      double v28 = (void *)v27;
      double v29 = fabs(v57.f64[1]);
      double v30 = fabs(v56.f64[0]);
      if (!v9) {
        double v29 = v30;
      }
      [v14 addVariable:v27 coefficient:v29];

      if (fabs(v56.f64[1]) >= 0.00001) {
        goto LABEL_46;
      }
    }
LABEL_57:
    if (v9) {
      [(UIView *)v17 nsli_minYVariable];
    }
    else {
    long long v35 = [(UIView *)v17 nsli_minXVariable];
    }
    [v14 addVariable:v35 coefficient:1.0];

    [v14 incrementConstant:v21];
    uint64_t v36 = [(UIView *)v17 superview];

    double v17 = (UIView *)v36;
  }
  while ((UIView *)v36 != v12);
  int v39 = v12;
LABEL_63:
  BOOL v40 = [(UIView *)v12 _supportsContentDimensionVariables];
  if (v16 != v12 || !v55)
  {
    char v42 = v16 != v12 || v40;
    double v43 = 0.0;
    if (v42) {
      goto LABEL_81;
    }
    if (v9) {
      goto LABEL_78;
    }
    goto LABEL_80;
  }
  if (!v9)
  {
    if (v40)
    {
      uint64_t v41 = [(UIView *)v12 nsli_contentWidthVariable];
LABEL_76:
      long long v44 = (void *)v41;
      [v14 addVariable:v41 coefficient:1.0];

      double v43 = 0.0;
      goto LABEL_81;
    }
    uint64_t v49 = [(UIView *)v12 nsli_boundsWidthVariable];
    [v14 addVariable:v49 coefficient:1.0];

LABEL_80:
    [(UIView *)v12 bounds];
    double v51 = v50;
    [(UIView *)v12 nsli_engineToUserScalingCoefficients];
    double v43 = v51 / v52;
    goto LABEL_81;
  }
  if (v40)
  {
    uint64_t v41 = [(UIView *)v12 nsli_contentHeightVariable];
    goto LABEL_76;
  }
  CGFloat v45 = [(UIView *)v12 nsli_boundsHeightVariable];
  [v14 addVariable:v45 coefficient:1.0];

LABEL_78:
  [(UIView *)v12 bounds];
  double v47 = v46;
  [(UIView *)v12 nsli_engineToUserScalingCoefficients];
  double v43 = v47 / v48;
LABEL_81:
  [v14 incrementConstant:v43];

  return v14;
}

- (id)_dimensionExpressionInContainer:(id)a3 vertical:(BOOL)a4 useContentVariables:(BOOL)a5 engine:(id)a6
{
  BOOL v7 = a5;
  BOOL v8 = a4;
  id v11 = (UIView *)a3;
  id v12 = a6;
  id v13 = (void *)[objc_alloc(MEMORY[0x1E4F5B258]) initWithEngine:v12];
  float64x2_t v39 = 0u;
  long long v40 = 0u;
  float64x2_t v38 = 0u;
  if (self == v11)
  {
    float64x2_t v14 = *(float64x2_t *)(MEMORY[0x1E4F1DAB8] + 16);
    float64x2_t v38 = *(float64x2_t *)MEMORY[0x1E4F1DAB8];
    float64x2_t v39 = v14;
    long long v40 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  }
  else
  {
    [(UIView *)self transform];
  }
  double v15 = v38.f64[0];
  if (fabs(vaddvq_f64(vmulq_f64(v38, v39))) >= 0.00001)
  {
    double v34 = [MEMORY[0x1E4F28B00] currentHandler];
    [v34 handleFailureInMethod:a2, self, @"NSLayoutConstraint_OldUIKitAdditions.m", 442, @"Autolayout doesn't support transforms that don't preserve rectangles. The offending view is: %@", self object file lineNumber description];

    double v15 = v38.f64[0];
  }
  if (fabs(v15) >= 0.00001)
  {
    if (v7)
    {
      if (v8) {
        [(UIView *)self nsli_contentHeightVariable];
      }
      else {
        [(UIView *)self nsli_contentWidthVariable];
      }
    }
    else if (v8)
    {
      [(UIView *)self nsli_boundsHeightVariable];
    }
    else
    {
      [(UIView *)self nsli_boundsWidthVariable];
    uint64_t v16 = };
    double v17 = (void *)v16;
    double v18 = fabs(v39.f64[1]);
    double v19 = fabs(v38.f64[0]);
    if (!v8) {
      double v18 = v19;
    }
    [v13 addVariable:v16 coefficient:v18];
  }
  if (fabs(v38.f64[1]) >= 0.00001)
  {
    if (v7)
    {
      if (v8) {
        [(UIView *)self nsli_contentWidthVariable];
      }
      else {
        [(UIView *)self nsli_contentHeightVariable];
      }
    }
    else if (v8)
    {
      [(UIView *)self nsli_boundsWidthVariable];
    }
    else
    {
      [(UIView *)self nsli_boundsHeightVariable];
    uint64_t v20 = };
    double v21 = (void *)v20;
    double v22 = fabs(v38.f64[1]);
    double v23 = fabs(v39.f64[0]);
    if (!v8) {
      double v22 = v23;
    }
    [v13 addVariable:v20 coefficient:v22];
  }
  if (self != v11)
  {
    uint64_t v24 = [(UIView *)self superview];
    double v25 = (UIView *)v24;
    if (v11 && (UIView *)v24 != v11)
    {
      double v26 = (double *)MEMORY[0x1E4F5B220];
      while (1)
      {
        if (v25)
        {
          [(UIView *)v25 transform];
        }
        else
        {
          float64x2_t v36 = 0u;
          long long v37 = 0u;
          float64x2_t v35 = 0u;
        }
        float64x2_t v38 = v35;
        float64x2_t v39 = v36;
        long long v40 = v37;
        BOOL v27 = fabs(v35.f64[1]) < 0.00001 && fabs(v39.f64[0]) < 0.00001 && fabs(v38.f64[0] * v39.f64[1]) >= 0.00001;
        if (v25 != self && !v27)
        {
          id v32 = [MEMORY[0x1E4F28B00] currentHandler];
          [v32 handleFailureInMethod:a2, self, @"NSLayoutConstraint_OldUIKitAdditions.m", 460, @"Autolayout doesn't support crossing rotational bounds transforms with dimensional layout constraints, such as width and height. The offending view is: %@", v25 object file lineNumber description];
        }
        double v28 = (float64x2_t *)&v39.f64[1];
        if (!v8) {
          double v28 = &v38;
        }
        double v29 = fabs(v28->f64[0]);
        if (v28->f64[0] != 0.0) {
          break;
        }
        double v30 = *v26;
        if (*v26 <= 1.0) {
          goto LABEL_48;
        }
LABEL_49:
        uint64_t v31 = [(UIView *)v25 superview];

        double v25 = (UIView *)v31;
        if ((UIView *)v31 == v11)
        {
          double v25 = v11;
          goto LABEL_53;
        }
      }
      double v30 = fabs(v29 + -1.0);
      if (v30 < v29 * *v26) {
        goto LABEL_49;
      }
LABEL_48:
      objc_msgSend(v13, "scaleBy:", v29, v30);
      goto LABEL_49;
    }
LABEL_53:
  }
  return v13;
}

- (void)_oldUpdateLayoutEngineHostConstraints
{
  if ((*(void *)&self->_viewFlags & 0x400000000000000) != 0)
  {
    if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
    {
      id v3 = [(UIView *)self _layoutEngineHostConstraints];

      if (!v3)
      {
        [(UIView *)self _alignmentBounds];
        double v5 = v4;
        id v9 = [MEMORY[0x1E4F5B268] constraintWithItem:self attribute:7 relatedBy:0 constant:v6];
        BOOL v7 = [MEMORY[0x1E4F5B268] constraintWithItem:self attribute:8 relatedBy:0 constant:v5];
        [v9 setIdentifier:@"UIView-Encapsulated-Layout-Width"];
        [v7 setIdentifier:@"UIView-Encapsulated-Layout-Height"];
        BOOL v8 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v9, v7, 0);
        -[UIView _setLayoutEngineHostConstraints:](self, v8);
        [(UIView *)self addConstraints:v8];
      }
    }
  }
}

- (void)_oldEngineHostConstraints_frameDidChange
{
  id v9 = [(UIView *)self _layoutEngineHostConstraints];
  if ([v9 count] == 2)
  {
    [(UIView *)self _alignmentBounds];
    double v4 = v3;
    double v6 = v5;
    BOOL v7 = [v9 objectAtIndex:0];
    BOOL v8 = [v9 objectAtIndex:1];
    [v7 setConstant:v4];
    [v8 setConstant:v6];
  }
  else
  {
    -[UIView _invalidateEngineHostConstraints]((uint64_t)self);
  }
}

- (id)_viewForBaselineLayout
{
  double v4 = [(UIView *)self viewForBaselineLayout];
  if (!v4) {
    double v4 = self;
  }
  if (![(UIView *)v4 isDescendantOfView:self])
  {
    double v6 = [MEMORY[0x1E4F28B00] currentHandler];
    [v6 handleFailureInMethod:a2 object:self file:@"NSLayoutConstraint_OldUIKitAdditions.m" lineNumber:524 description:@"The return value of -viewForBaselineLayout must be in the receiver's subtree."];
  }
  return v4;
}

- (UIView)viewForBaselineLayout
{
  if (!dyld_program_sdk_at_least() || (*((_DWORD *)&self->_viewFlags + 4) & 0x800) != 0)
  {
    double v3 = self;
  }
  else
  {
    double v3 = [(UIView *)self viewForLastBaselineLayout];
  }
  return v3;
}

+ (void)_setHostLayoutEngineOnlyTAMIC_YES
{
  __forceHostLayoutEngineOnlyTAMIC_YES = 1;
}

+ (void)_resetHostLayoutEngineOnlyTAMIC_YES
{
  __forceHostLayoutEngineOnlyTAMIC_YES = 0;
}

+ (BOOL)_hostLayoutEngineOnlyTAMIC_YES
{
  return __forceHostLayoutEngineOnlyTAMIC_YES;
}

- (void)_setDisableLayoutFlushingCount:(int64_t)a3
{
  double v4 = (void *)[NSNumber numberWithInteger:a3];
  objc_setAssociatedObject(self, &_UIViewDisableLayoutFlushingCount, v4, (void *)1);
}

- (int64_t)_disableLayoutFlushingCount
{
  id AssociatedObject = objc_getAssociatedObject(self, &_UIViewDisableLayoutFlushingCount);
  return [AssociatedObject integerValue];
}

- (id)_descriptionForLayoutTrace
{
  uint64_t v3 = _truncatedDebuggingDescriptionForLayout([(UIView *)self _layoutDebuggingIdentifier]);
  if (v3)
  {
    double v4 = (void *)v3;
    uint64_t v5 = objc_msgSend(NSString, "stringWithFormat:", @":%p", self);
    return (id)[v4 stringByAppendingString:v5];
  }
  else
  {
    return [(UIView *)self _defaultLayoutDescription];
  }
}

- (void)_rebuildLayoutFromScratch
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = [result _layoutEngine];
    if (v2)
    {
      uint64_t v3 = v2;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 || [v1 _hostsLayoutEngine])
      {
        [v1 _discardLayoutEngine:v3];
        [v1 _initializeLayoutEngine];
      }
      [v1 _setNeedsUpdateConstraints];
    }
    double v4 = (void *)[v1 _allSubviews];
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    uint64_t result = (void *)[v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (result)
    {
      uint64_t v5 = result;
      uint64_t v6 = *(void *)v9;
      do
      {
        BOOL v7 = 0;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v4);
          }
          -[UIView _rebuildLayoutFromScratch](*(void *)(*((void *)&v8 + 1) + 8 * (void)v7));
          BOOL v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        uint64_t result = (void *)[v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
        uint64_t v5 = result;
      }
      while (result);
    }
  }
  return result;
}

- (void)_viewHierarchyUnpreparedForConstraint:(id)a3
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  double v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("LayoutConstraints", &_viewHierarchyUnpreparedForConstraint____s_category)+ 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v5 = 138412546;
    id v6 = a3;
    __int16 v7 = 2080;
    long long v8 = "-[UIView(UIConstraintBasedLayout) _viewHierarchyUnpreparedForConstraint:]";
    _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "The view hierarchy is not prepared for the constraint: %@\n\tWhen added to a view, the constraint's items must be descendants of that view (or the view itself). This will crash if the constraint needs to be resolved before the view hierarchy is assembled. Break on %s to debug.", (uint8_t *)&v5, 0x16u);
  }
}

- (BOOL)_layoutEngine_isEngineMergingAllowedBetweenEngine:(id)a3 itemEngine:(id)a4 forConstraint:(id)a5 initialView:(id)a6
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v10 = [(UIView *)self _window];
  long long v11 = (void *)[a4 delegate];
  if ((id)[a3 delegate] != v10)
  {
    if (os_variant_has_internal_diagnostics())
    {
      double v17 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      {
        int v18 = 138412290;
        id v19 = a5;
        _os_log_fault_impl(&dword_1853B0000, v17, OS_LOG_TYPE_FAULT, "UIKit issue: Window safe area aspect fit guide assertion guard preconditions not met for constraint: %@", (uint8_t *)&v18, 0xCu);
      }
    }
    else
    {
      uint64_t v16 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_layoutEngine_isEngineMergingAllowedBetweenEngine_itemEngine_forConstraint_initialView____s_category)+ 8);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        int v18 = 138412290;
        id v19 = a5;
        _os_log_impl(&dword_1853B0000, v16, OS_LOG_TYPE_ERROR, "UIKit issue: Window safe area aspect fit guide assertion guard preconditions not met for constraint: %@", (uint8_t *)&v18, 0xCu);
      }
    }
    return 1;
  }
  id v12 = (void *)[v11 _viewControllerForAncestor];
  if (!v12 && (id)[a6 _window] == v10 || v12 == objc_msgSend(v10, "rootViewController")) {
    return 1;
  }
  uint64_t v13 = [v12 presentingViewController];
  if (v13 != [v10 rootViewController]) {
    return 0;
  }
  double v15 = (void *)[v12 presentationController];
  return [v15 _isPresentedInFullScreen];
}

- (BOOL)_uiib_tryToAddConstraint:(id)a3 roundingAdjustment:(double)a4 mutuallyExclusiveConstraints:(id *)a5
{
  return -[UIView _tryToAddConstraint:roundingAdjustment:mutuallyExclusiveConstraints:]((uint64_t)self, a3, (uint64_t)a5, a4);
}

- (double)nsli_marginOffsetForAttribute:(int64_t)a3
{
  [(UIView *)self layoutMargins];
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  uint64_t v12 = [(id)UIApp userInterfaceLayoutDirection];
  switch(a3)
  {
    case 13:
      return v7;
    case 14:
      return -v11;
    case 15:
      return v5;
    case 16:
      return -v9;
    case 17:
      if (v12 == 1) {
        return v11;
      }
      return v7;
    case 18:
      if (v12 == 1) {
        double v13 = v7;
      }
      else {
        double v13 = v11;
      }
      goto LABEL_14;
    case 19:
      return round((v7 - v11) * 0.5);
    case 20:
      double v13 = round((v9 - v5) * 0.5);
LABEL_14:
      double v7 = -v13;
      break;
    default:
      double v7 = 0.0;
      break;
  }
  return v7;
}

- (void)_relaxLayoutEngineHostConstraintsForAxis:(int64_t)a3
{
  id v5 = [(UIView *)self _layoutEngineHostConstraints];
  if ([v5 count] == 4)
  {
    p_uint64_t viewFlags = &self->_viewFlags;
    *((void *)p_viewFlags + 1) |= 0x80uLL;
    objc_msgSend((id)objc_msgSend(v5, "objectAtIndexedSubscript:", a3), "setActive:", 0);
    *((void *)p_viewFlags + 1) &= ~0x80uLL;
  }
}

- (void)_relaxLayoutEngineHostConstraints
{
  if (result)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    uint64_t v3 = __68__UIView_UIConstraintBasedLayout___relaxLayoutEngineHostConstraints__block_invoke;
    double v4 = &unk_1E52DC580;
    id v5 = result;
    uint64_t v1 = (void *)[result _layoutEngine];
    if (v1) {
      return (void *)[v1 withAutomaticOptimizationDisabled:v2];
    }
    else {
      return (void *)v3((uint64_t)v2);
    }
  }
  return result;
}

uint64_t __68__UIView_UIConstraintBasedLayout___relaxLayoutEngineHostConstraints__block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) _relaxLayoutEngineHostConstraintsForAxis:0];
  uint64_t v2 = *(void **)(a1 + 32);
  return [v2 _relaxLayoutEngineHostConstraintsForAxis:1];
}

- (void)_disableLayoutFlushing
{
  *(void *)&self->_viewFlags |= 0x100000000000000uLL;
}

- (void)_enableLayoutFlushing
{
  *(void *)&self->_viewFlags &= ~0x100000000000000uLL;
  [(UIView *)self _setDisableLayoutFlushingCount:0];
  if ((*(void *)&self->_viewFlags & 0x400000000000000) != 0)
  {
    uint64_t v3 = [(UIView *)self superview];
    uint64_t v4 = [(NSISEngine *)[(UIView *)v3 _layoutEngine] delegate];
    if ([(CALayer *)[(UIView *)v3 layer] needsLayout]
      || v4 && (~*(void *)(v4 + 96) & 0x300000000000) != 0)
    {
      id v5 = [(UIView *)self superview];
      [(UIView *)v5 layoutIfNeeded];
    }
    else
    {
      [(UIView *)self _applyISEngineLayoutValuesToBoundsOnly:0];
    }
  }
}

- (void)_popDisableLayoutFlushing
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = [result _disableLayoutFlushingCount];
    if (v2 < 2)
    {
      [v1 _setDisableLayoutFlushingCount:0];
      return (void *)[v1 _enableLayoutFlushing];
    }
    else
    {
      return (void *)[v1 _setDisableLayoutFlushingCount:v2 - 1];
    }
  }
  return result;
}

- (id)_alignmentDebuggingOverlayCreateIfNecessary:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v5 = [(UIView *)self _allSubviews];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v24;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v24 != v8) {
        objc_enumerationMutation(v5);
      }
      double v10 = *(void **)(*((void *)&v23 + 1) + 8 * v9);
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        break;
      }
      if (v7 == ++v9)
      {
        uint64_t v7 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
        if (v7) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    double v10 = 0;
  }
  if (!v10 && v3 && (*((void *)&self->_viewFlags + 1) & 0x10000000000000) == 0)
  {
    double v11 = [_UIDebugAlignmentRectView alloc];
    [(UIView *)self bounds];
    -[UIView _alignmentRectForBounds:](self, "_alignmentRectForBounds:");
    double v13 = v12;
    double v15 = v14;
    double v17 = v16;
    double v19 = v18;
    [(UIView *)self _baselineOffsetFromBottom];
    double v21 = -[_UIDebugAlignmentRectView initWithFrame:baselineOffset:](v11, "initWithFrame:baselineOffset:", v13, v15, v17, v19, v20);
    [(UIView *)self addSubview:v21];

    *((void *)&self->_viewFlags + 1) |= 0x10000000000000uLL;
  }
  return v10;
}

- (id)_debuggableDescriptionForConstraintsAffectingAxis:(int64_t)a3
{
  id v5 = @"horizontal";
  if (a3 == 1) {
    id v5 = @"vertical";
  }
  uint64_t v6 = [NSString stringWithFormat:@"constraints affecting %@ axis...", v5];
  uint64_t v7 = [(UIView *)self constraintsAffectingLayoutForAxis:a3];
  return (id)_debuggableDescriptionForConstraintsWithHeader(v7, v6);
}

- (id)_debuggableDescriptionForConstraintsAffectingHorizontalAxis
{
  return [(UIView *)self _debuggableDescriptionForConstraintsAffectingAxis:0];
}

- (id)_debuggableDescriptionForConstraintsAffectingVerticalAxis
{
  return [(UIView *)self _debuggableDescriptionForConstraintsAffectingAxis:1];
}

- (BOOL)hasAmbiguousLayout
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  BOOL v3 = [(UIView *)self _hasAmbiguousLayout];
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("LayoutConstraints", &hasAmbiguousLayout___s_category_280) + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 138412290;
      id v7 = [(UIView *)self _autolayoutTraceRecursively:0];
      _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "View has an ambiguous layout. See \"Auto Layout Guide: Ambiguous Layouts\" for help debugging. Displaying synopsis from invoking -[UIView _autolayoutTrace] to provide additional detail.\n%@", (uint8_t *)&v6, 0xCu);
    }
  }
  return v3;
}

- (BOOL)_hasAmbiguousLayout
{
  return objc_msgSend(-[UIView _layoutVariablesWithAmbiguousValue](self, "_layoutVariablesWithAmbiguousValue"), "count") != 0;
}

- (id)_layoutVariablesWithAmbiguousValue
{
  if ((*(void *)&self->_viewFlags & 0x400000000000000) != 0
    && !-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self))
  {
    return (id)_layoutVariablesWithAmbiguousValueForLayoutItem(self);
  }
  else
  {
    BOOL v3 = (void *)MEMORY[0x1E4F1C978];
    return (id)[v3 array];
  }
}

- (void)exerciseAmbiguityInLayout
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  BOOL v3 = [(UIView *)self _layoutEngine];
  id v4 = [(UIView *)self _layoutVariablesWithAmbiguousValue];
  [(UIView *)self frame];
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v13 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
  double v14 = v6;
  double v15 = v8;
  double v16 = v10;
  double v17 = v12;
  if (v13)
  {
    uint64_t v18 = v13;
    uint64_t v19 = *(void *)v23;
    double v14 = v6;
    double v15 = v8;
    double v16 = v10;
    double v17 = v12;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v23 != v19) {
          objc_enumerationMutation(v4);
        }
        double v21 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        if ([(NSISEngine *)v3 hasValue:0 forVariable:v21])
        {
          [(NSISEngine *)v3 exerciseAmbiguityInVariable:v21];
        }
        else if (v21 == [(UIView *)self nsli_minXVariable])
        {
          double v14 = (double)(arc4random() % 0xC9 - 100);
        }
        else if (v21 == [(UIView *)self nsli_minYVariable])
        {
          double v15 = (double)(arc4random() % 0xC9 - 100);
        }
        else if (v21 == [(UIView *)self nsli_boundsWidthVariable])
        {
          double v16 = fabs((double)(arc4random() % 0xC9 - 100));
        }
        else if (v21 == [(UIView *)self nsli_boundsHeightVariable])
        {
          double v17 = fabs((double)(arc4random() % 0xC9 - 100));
        }
      }
      uint64_t v18 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v18);
  }
  v28.origin.CGFloat x = v6;
  v28.origin.CGFloat y = v8;
  v28.size.CGFloat width = v10;
  v28.size.CGFloat height = v12;
  v29.origin.CGFloat x = v14;
  v29.origin.CGFloat y = v15;
  v29.size.CGFloat width = v16;
  v29.size.CGFloat height = v17;
  if (CGRectEqualToRect(v28, v29)) {
    [[(UIView *)self window] layoutIfNeeded];
  }
  else {
    -[UIView setFrame:](self, "setFrame:", v14, v15, v16, v17);
  }
}

- (id)_descendantWithAmbiguousLayout
{
  uint64_t v2 = self;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (![(UIView *)self _hasAmbiguousLayout])
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v3 = [(UIView *)v2 _allSubviews];
    uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v11;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          CGFloat v8 = (void *)[*(id *)(*((void *)&v10 + 1) + 8 * i) _descendantWithAmbiguousLayout];
          if (v8) {
            return v8;
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
        uint64_t v2 = 0;
        if (v5) {
          continue;
        }
        break;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (objc_class *)objc_opt_class();
  Name = class_getName(v4);
  strncpy((char *)&v8, Name, 0x18uLL);
  *(_DWORD *)a2 = 88;
  uint64_t v6 = *(void **)(a1 + 32);
  *(void *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 40) = 89;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = v6;
  uint64_t result = [v6 superview];
  *(void *)(a2 + 72) = result;
  return result;
}

uint64_t __160__UIView_UIConstraintBasedLayout___calculatedSystemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority_hasIntentionallyCollapsedHeight___block_invoke_4(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) _removeFromEngine:*(void *)(a1 + 32)];
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  return [v3 _addToEngine:v2];
}

- (CGSize)_systemLayoutSizeFittingSize:(CGSize)a3 withHorizontalFittingPriority:(float)a4 verticalFittingPriority:(float)a5
{
  float v5 = a5;
  float v6 = a4;
  double height = a3.height;
  double width = a3.width;
  if (_systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority__once != -1) {
    dispatch_once(&_systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority__once, &__block_literal_global_300_0);
  }
  a4 = v6;
  a5 = v5;
  -[UIView systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:](self, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", width, height, *(double *)&a4, *(double *)&a5);
  result.double height = v11;
  result.double width = v10;
  return result;
}

void __118__UIView_UIConstraintBasedLayout___systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority___block_invoke()
{
  id v0 = *(NSObject **)(__UILogGetCategoryCachedImpl("LayoutConstraints", &UILayoutFittingExpandedSize_block_invoke_11___s_category)+ 8);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl(&dword_1853B0000, v0, OS_LOG_TYPE_ERROR, "API is now available. Please use -[UIView systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", v1, 2u);
  }
}

- (BOOL)_layoutEngineRelativeAlignmentRectOriginIsValid
{
  uint64_t v2 = -[UIView _alignmentRectOriginCacheCreateIfNecessary:](self, 0);
  return [(_UIViewLayoutEngineRelativeAlignmentRectOriginCache *)v2 isValid];
}

- (id)_recursiveConstraintsTraceAtLevel:(int64_t)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  float v5 = (void *)[MEMORY[0x1E4F28E78] stringWithFormat:@"\n"];
  if (a3 >= 1)
  {
    int64_t v6 = a3;
    do
    {
      [v5 appendString:@"|   "];
      --v6;
    }
    while (v6);
  }
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  long long v8 = @"-";
  if ((viewFlags & 0x400000000000000) == 0) {
    long long v8 = &stru_1ED0E84C0;
  }
  if ((viewFlags & 0x100000000000) != 0) {
    uint64_t v9 = &stru_1ED0E84C0;
  }
  else {
    uint64_t v9 = v8;
  }
  double v10 = @"*";
  if ((viewFlags & 0x800000000000000) == 0) {
    double v10 = &stru_1ED0E84C0;
  }
  if ((viewFlags & 0x200000000000) != 0) {
    double v11 = &stru_1ED0E84C0;
  }
  else {
    double v11 = v10;
  }
  long long v12 = (objc_class *)objc_opt_class();
  [v5 appendFormat:@"%@%@<%@:%p>", v9, v11, NSStringFromClass(v12), self];
  id v13 = [(UIView *)self _allSubviews];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v14 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v21;
    int64_t v17 = a3 + 1;
    do
    {
      uint64_t v18 = 0;
      do
      {
        if (*(void *)v21 != v16) {
          objc_enumerationMutation(v13);
        }
        objc_msgSend(v5, "appendString:", objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * v18++), "_recursiveConstraintsTraceAtLevel:", v17));
      }
      while (v15 != v18);
      uint64_t v15 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v15);
  }
  return v5;
}

- (id)_rootView
{
  uint64_t i = [(UIView *)self window];
  if (!i)
  {
    uint64_t v4 = [(UIView *)self superview];
    for (i = (UIWindow *)self; v4; uint64_t v4 = [(UIView *)v4 superview])
      uint64_t i = (UIWindow *)v4;
  }
  return i;
}

- (id)_constraintsValidityDescription
{
  id v2 = [(UIView *)self _rootView];
  return (id)[v2 _recursiveConstraintsTraceAtLevel:0];
}

- (id)_autolayoutTraceAtLevel:(int64_t)a3 recursively:(BOOL)a4
{
  BOOL v58 = a4;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = 0x1E4F28000uLL;
  double v7 = (void *)[MEMORY[0x1E4F28E78] stringWithFormat:@"\n"];
  if (a3 >= 1)
  {
    int64_t v8 = a3;
    do
    {
      [v7 appendString:@"|   "];
      --v8;
    }
    while (v8);
  }
  int64_t v59 = a3;
  if ((*(void *)&self->_viewFlags & 0x400000000000000) == 0
    || (int v9 = ![(UIView *)self _hasAmbiguousLayout], (v9 & 1) != 0))
  {
    double v10 = 0;
    LOBYTE(v9) = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      LOBYTE(v9) = 0;
      double v10 = 0;
    }
    else
    {
      id v53 = [(UIView *)self _layoutVariablesWithAmbiguousValue];
      double v10 = (void *)[MEMORY[0x1E4F28E78] string];
      long long v68 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      uint64_t v54 = [v53 countByEnumeratingWithState:&v68 objects:v74 count:16];
      if (v54)
      {
        uint64_t v55 = v54;
        uint64_t v56 = *(void *)v69;
        do
        {
          for (uint64_t i = 0; i != v55; ++i)
          {
            if (*(void *)v69 != v56) {
              objc_enumerationMutation(v53);
            }
            objc_msgSend(v10, "appendString:", objc_msgSend(*(id *)(*((void *)&v68 + 1) + 8 * i), "description"));
            [v10 appendString:@", "];
          }
          uint64_t v55 = [v53 countByEnumeratingWithState:&v68 objects:v74 count:16];
        }
        while (v55);
      }
      objc_msgSend(v10, "deleteCharactersInRange:", objc_msgSend(v10, "length") - 2, 2);
      unint64_t v6 = 0x1E4F28000;
    }
  }
  if ([(UIView *)self _window] == self)
  {
    double v11 = &stru_1ED0E84C0;
  }
  else
  {
    double v11 = &stru_1ED0E84C0;
    if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)self)
      && !objc_msgSend(-[UIView _layoutEngineHostConstraints](self, "_layoutEngineHostConstraints"), "count"))
    {
      double v11 = @", MISSING HOST CONSTRAINTS";
    }
  }
  long long v12 = (void *)[*(id *)(v6 + 3704) stringWithString:&stru_1ED0E84C0];
  if ((*(void *)&self->_viewFlags & 0x400000000000000) != 0)
  {
    [(UIView *)self frame];
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    CGFloat v20 = v19;
    [(UIView *)self frame];
    -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:");
    v77.origin.CGFloat x = v21;
    v77.origin.CGFloat y = v22;
    v77.size.double width = v23;
    v77.size.double height = v24;
    v76.origin.CGFloat x = v14;
    v76.origin.CGFloat y = v16;
    v76.size.double width = v18;
    v76.size.double height = v20;
    if (!CGRectEqualToRect(v76, v77))
    {
      [(UIView *)self frame];
      uint64_t v26 = v25;
      uint64_t v28 = v27;
      uint64_t v30 = v29;
      uint64_t v32 = v31;
      -[UIView alignmentRectForFrame:](self, "alignmentRectForFrame:");
      objc_msgSend(v12, "appendFormat:", @" alignmentRect = (%g %g; %g %g)", v33, v34, v35, v36);
      objc_msgSend(v12, "appendFormat:", @" for frame = (%g %g; %g %g);", v26, v28, v30, v32);
    }
  }
  if ((*(void *)&self->_viewFlags & 0x400000000000000) != 0
    || (UIView *)[(NSISEngine *)[(UIView *)self _layoutEngine] delegate] == self)
  {
    if ([(UIView *)self _hostsLayoutEngine] || [(UIView *)self _window] == self)
    {
      long long v37 = @"•";
    }
    else if ([(UIView *)self translatesAutoresizingMaskIntoConstraints])
    {
      long long v37 = @"+";
    }
    else
    {
      long long v37 = @"*";
    }
  }
  else
  {
    long long v37 = &stru_1ED0E84C0;
  }
  id v38 = [(UIView *)self _descriptionForLayoutTrace];
  if ((*(void *)&self->_viewFlags & 0x400000000000000) != 0) {
    char v39 = v9;
  }
  else {
    char v39 = 1;
  }
  if (v39)
  {
    long long v40 = &stru_1ED0E84C0;
    int64_t v41 = v59;
  }
  else
  {
    int64_t v41 = v59;
    if (v10) {
      long long v40 = (__CFString *)[NSString stringWithFormat:@"- AMBIGUOUS LAYOUT for %@", v10];
    }
    else {
      long long v40 = @" - AMBIGUOUS LAYOUT";
    }
  }
  [v7 appendFormat:@"%@%@%@%@%@", v37, v38, v40, v11, v12];
  if (v58)
  {
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    char v42 = [(UIView *)self layoutGuides];
    uint64_t v43 = [(NSArray *)v42 countByEnumeratingWithState:&v64 objects:v73 count:16];
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = *(void *)v65;
      do
      {
        for (uint64_t j = 0; j != v44; ++j)
        {
          if (*(void *)v65 != v45) {
            objc_enumerationMutation(v42);
          }
          objc_msgSend(v7, "appendString:", objc_msgSend(*(id *)(*((void *)&v64 + 1) + 8 * j), "_autolayoutTraceAtLevel:recursively:", v41 + 1, 1));
        }
        uint64_t v44 = [(NSArray *)v42 countByEnumeratingWithState:&v64 objects:v73 count:16];
      }
      while (v44);
    }
    id v47 = [(UIView *)self _allSubviews];
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    uint64_t v48 = [v47 countByEnumeratingWithState:&v60 objects:v72 count:16];
    if (v48)
    {
      uint64_t v49 = v48;
      uint64_t v50 = *(void *)v61;
      do
      {
        for (uint64_t k = 0; k != v49; ++k)
        {
          if (*(void *)v61 != v50) {
            objc_enumerationMutation(v47);
          }
          objc_msgSend(v7, "appendString:", objc_msgSend(*(id *)(*((void *)&v60 + 1) + 8 * k), "_autolayoutTraceAtLevel:recursively:", v41 + 1, 1));
        }
        uint64_t v49 = [v47 countByEnumeratingWithState:&v60 objects:v72 count:16];
      }
      while (v49);
    }
  }
  return v7;
}

- (id)_autolayoutTraceRecursively:(BOOL)a3
{
  id v3 = [(UIView *)self _autolayoutTraceAtLevel:0 recursively:a3];
  return (id)[v3 stringByAppendingString:@"\n\nLegend:\n\t* - is laid out with auto layout\n\t+ - is laid out manually, but is represented in the layout engine because translatesAutoresizingMaskIntoConstraints = YES\n\t• - layout engine host"];
}

- (id)_autolayoutTrace
{
  id v2 = [(UIView *)self _rootView];
  return (id)[v2 _autolayoutTraceRecursively:1];
}

- (id)_recursiveLayoutEngineDescription
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  BOOL v3 = [(UIView *)self _hostsLayoutEngine];
  uint64_t v4 = NSString;
  id v5 = [(UIView *)self _descriptionForLayoutTrace];
  if (v3) {
    uint64_t v6 = [v4 stringWithFormat:@"\nEngine for %@:\n%@", v5, -[UIView _layoutEngine](self, "_layoutEngine")];
  }
  else {
    uint64_t v6 = [v4 stringWithFormat:@"\nNo engine for %@", v5, v14];
  }
  double v7 = (void *)v6;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v8 = [(UIView *)self _allSubviews];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v8);
        }
        double v7 = objc_msgSend(v7, "stringByAppendingString:", objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * i), "_recursiveLayoutEngineDescription"));
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v10);
  }
  return v7;
}

- (CGRect)_boundsForAlignmentRect:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  [(UIView *)self alignmentRectInsets];
  double v10 = y - v9;
  double v12 = height - (-v8 - v9);
  double v13 = round(width - (-v7 - v11));
  double v14 = round(v12);
  double v15 = x - v11;
  double v16 = v10;
  result.size.double height = v14;
  result.size.double width = v13;
  result.origin.double y = v16;
  result.origin.double x = v15;
  return result;
}

- (CGRect)_alignmentBounds
{
  [(UIView *)self bounds];
  -[UIView _alignmentRectForBounds:](self, "_alignmentRectForBounds:");
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

- (BOOL)_useContentDimensionVariablesForConstraintLowering
{
  return 0;
}

- (CGSize)_nsis_contentSize
{
  double v2 = *MEMORY[0x1E4F1DB30];
  double v3 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  result.double height = v3;
  result.double width = v2;
  return result;
}

- (BOOL)_forceLayoutEngineSolutionInRationalEdges
{
  return 0;
}

double __79__UIView_AdditionalLayoutSupport___nsis_center_bounds_inEngine_forLayoutGuide___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) alignmentRectInsets];
  return -v1;
}

- (double)_nsis_layoutSizeInEngine:(void *)a1
{
  if (!a1) {
    return 0.0;
  }
  [a1 _currentScreenScale];
  double v5 = v4;
  double v6 = 360.0 / v4;
  objc_msgSend(a2, "valueForVariable:", objc_msgSend(a1, "nsli_boundsWidthVariable"));
  double v8 = round(v7);
  objc_msgSend(a2, "valueForVariable:", objc_msgSend(a1, "nsli_boundsHeightVariable"));
  return UISizeRoundToScale(round(v8 / v6) / v5, round(round(v9) / v6) / v5, v5);
}

- (double)_nsis_layoutRectFromHostingViewInEngine:(void *)a1
{
  if (!a1) {
    return 0.0;
  }
  double v3 = a1;
  [a1 _currentScreenScale];
  double v5 = v4;
  double v6 = 360.0 / v4;
  uint64_t v7 = [a2 delegate];
  double v9 = *MEMORY[0x1E4F1DAD8];
  double v8 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  objc_msgSend(a2, "valueForVariable:", objc_msgSend(v3, "nsli_boundsWidthVariable"));
  double v11 = round(v10);
  objc_msgSend(a2, "valueForVariable:", objc_msgSend(v3, "nsli_boundsHeightVariable"));
  double v13 = round(v12);
  if ((void *)v7 != v3)
  {
    do
    {
      objc_msgSend(a2, "valueForVariable:", objc_msgSend(v3, "nsli_minXVariable"));
      double v9 = v9 + round(v14);
      objc_msgSend(a2, "valueForVariable:", objc_msgSend(v3, "nsli_minYVariable"));
      double v8 = v8 + round(v15);
      double v3 = (void *)[v3 superview];
    }
    while (v3 != (void *)v7);
  }
  v22.origin.double x = v9;
  v22.origin.double y = v8;
  v22.size.double width = v11;
  v22.size.double height = v13;
  double v21 = round(CGRectGetMinX(v22) / v6) / v5;
  v23.origin.double x = v9;
  v23.origin.double y = v8;
  v23.size.double width = v11;
  v23.size.double height = v13;
  double v16 = round(CGRectGetMinY(v23) / v6) / v5;
  v24.origin.double x = v9;
  v24.origin.double y = v8;
  v24.size.double width = v11;
  v24.size.double height = v13;
  double v17 = round(CGRectGetMaxX(v24) / v6) / v5;
  v25.origin.double x = v9;
  v25.origin.double y = v8;
  double v18 = v21;
  v25.size.double width = v11;
  v25.size.double height = v13;
  CGFloat MaxY = CGRectGetMaxY(v25);
  UISizeRoundToScale(v17 - v21, round(MaxY / v6) / v5 - v16, v5);
  return v18;
}

- (CGPoint)_nsis_origin
{
  float64_t v15 = 0.0;
  double v16 = 0.0;
  double v3 = objc_msgSend(-[UIView _layoutEngineCreateIfNecessary](self, "_layoutEngineCreateIfNecessary"), "delegate");
  if ((dyld_program_sdk_at_least() & 1) != 0
    || v3 && [v3 _forceLayoutEngineSolutionInRationalEdges])
  {
    float64x2_t v14 = 0uLL;
    float64x2_t v13 = 0u;
    double v4 = [(UIView *)self _layoutEngine];
    float64x2_t v5 = 0uLL;
    if (self)
    {
      -[UIView _nsis_center:bounds:inEngine:forLayoutGuide:](self, v14.f64, (double *)&v12, v4, 0);
      __asm { FMOV            V2.2D, #-0.5 }
      float64x2_t v5 = vaddq_f64(v14, vmulq_f64(v13, _Q2));
    }
    double v11 = v5.f64[1];
  }
  else
  {
    [(UIView *)self _nsis_origin:&v15 bounds:0 inEngine:[(UIView *)self _layoutEngine]];
    v5.f64[0] = v15;
    double v11 = v16;
  }
  result.double x = v5.f64[0];
  result.double y = v11;
  return result;
}

- (BOOL)_preWhitetailUsesAutoresizingConstraints
{
  LODWORD(v3) = [(UIView *)self translatesAutoresizingMaskIntoConstraints];
  if (v3) {
    return (*(void *)&self->_viewFlags >> 58) & 1;
  }
  return v3;
}

- (void)_withUnsatisfiableConstraintsLoggingSuspendedForFullSubtreeFromOutermostEngineDelegate:(void *)result
{
  if (result)
  {
    BOOL v3 = -[UIView _outermostLayoutEngineDelegateView](result);
    if (!v3 || (double v4 = v3, v5 = *((void *)v3 + 13), (v5 & 0x10) != 0))
    {
      uint64_t v7 = *(uint64_t (**)(uint64_t))(a2 + 16);
      return (void *)v7(a2);
    }
    else
    {
      int v6 = v3[28];
      *((void *)v3 + 12) = *((void *)v3 + 12);
      *((void *)v3 + 13) = v5 | 0x10;
      v3[28] = v6;
      CGPoint result = (void *)[v3 _withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:a2];
      *((void *)v4 + 13) &= ~0x10uLL;
    }
  }
  return result;
}

uint64_t __80__UIView_AdditionalLayoutSupport__setTranslatesAutoresizingMaskIntoConstraints___block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  double v2 = *(void **)(a1 + 32);
  uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(a1 + 40), "nsli_removeConstraint:", *(void *)(*((void *)&v7 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_5(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  double v1 = *(void **)(a1 + 32);
  uint64_t result = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v9;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v8 + 1) + 8 * v5);
        long long v7 = v6 + 12;
        v6[13] |= 4uLL;
        [v6 _updateBaselineInformationDependentOnBounds];
        v7[1] &= ~4uLL;
        ++v5;
      }
      while (v3 != v5);
      uint64_t result = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      uint64_t v3 = result;
    }
    while (result);
  }
  return result;
}

uint64_t __100__UIView_AdditionalLayoutSupport___updateConstraintsIfNeededWithViewForVariableChangeNotifications___block_invoke_6(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  double v1 = *(void **)(a1 + 32);
  uint64_t result = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v8;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v7 + 1) + 8 * v5);
        if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)v6))
        {
          if ([v6 superview]) {
            -[UIView _resetLayoutEngineHostConstraints](v6);
          }
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t result = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v3 = result;
    }
    while (result);
  }
  return result;
}

- (void)_addBoundsMatchingConstraintsForView:(id)a3
{
  v6[4] = *MEMORY[0x1E4F143B8];
  [a3 setTranslatesAutoresizingMaskIntoConstraints:0];
  uint64_t v5 = (void *)MEMORY[0x1E4F5B268];
  v6[0] = objc_msgSend((id)objc_msgSend(a3, "topAnchor"), "constraintEqualToAnchor:", -[UIView topAnchor](self, "topAnchor"));
  v6[1] = objc_msgSend((id)objc_msgSend(a3, "leadingAnchor"), "constraintEqualToAnchor:", -[UIView leadingAnchor](self, "leadingAnchor"));
  v6[2] = objc_msgSend((id)objc_msgSend(a3, "bottomAnchor"), "constraintEqualToAnchor:", -[UIView bottomAnchor](self, "bottomAnchor"));
  v6[3] = objc_msgSend((id)objc_msgSend(a3, "trailingAnchor"), "constraintEqualToAnchor:", -[UIView trailingAnchor](self, "trailingAnchor"));
  objc_msgSend(v5, "activateConstraints:", objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v6, 4));
}

void __60__UIView_AdditionalLayoutSupport__viewForLastBaselineLayout__block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (dyld_program_sdk_at_least())
  {
    double v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("LayoutConstraints", &UILayoutFittingExpandedSize_block_invoke_12___s_category)+ 8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = [*(id *)(a1 + 32) className];
      int v4 = 138412290;
      uint64_t v5 = v3;
      _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Sending -viewForBaselineLayout to a member of %@ in lieu of -viewForLastBaselineLayout. Please adopt the iOS 9 API.", (uint8_t *)&v4, 0xCu);
    }
  }
}

- (id)_layoutDebuggingTitle
{
  if ((objc_opt_respondsToSelector() & 1) == 0) {
    return 0;
  }
  uint64_t v3 = (void *)[(UIView *)self title];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return v3;
  }
  else {
    return 0;
  }
}

- (id)nsis_descriptionOfVariable:(id)a3
{
  uint64_t v5 = (UIView *)[a3 delegate];
  if ([(UIView *)v5 _boundsWidthVariable] == a3)
  {
    uint64_t v6 = @".Width";
  }
  else if ([(UIView *)v5 _boundsHeightVariable] == a3)
  {
    uint64_t v6 = @".Height";
  }
  else if ([(UIView *)v5 _minXVariable] == a3)
  {
    uint64_t v6 = @".minX";
  }
  else if ([(UIView *)v5 _minYVariable] == a3)
  {
    uint64_t v6 = @".minY";
  }
  else
  {
    if (v5 != self) {
      goto LABEL_6;
    }
    if ([(UIView *)self _contentWidthVariable] == a3)
    {
      uint64_t v6 = @".contentWidth";
      return (id)objc_msgSend(-[UIView nsli_description](v5, "nsli_description"), "stringByAppendingString:", v6);
    }
    if ([(UIView *)self _contentHeightVariable] == a3)
    {
      uint64_t v6 = @".contentHeight";
      return (id)objc_msgSend(-[UIView nsli_description](v5, "nsli_description"), "stringByAppendingString:", v6);
    }
    if ([(UIView *)self _contentXOffsetVariable] == a3)
    {
      uint64_t v6 = @".contentXOffset";
      return (id)objc_msgSend(-[UIView nsli_description](v5, "nsli_description"), "stringByAppendingString:", v6);
    }
    if ([(UIView *)self _contentYOffsetVariable] == a3)
    {
      uint64_t v6 = @".contentYOffset";
    }
    else
    {
LABEL_6:
      blocuint64_t k = MEMORY[0x1E4F143A8];
      uint64_t v9 = 3221225472;
      long long v10 = __62__UIView_AdditionalLayoutSupport__nsis_descriptionOfVariable___block_invoke;
      long long v11 = &unk_1E52DC580;
      uint64_t v12 = v5;
      if (nsis_descriptionOfVariable__once != -1) {
        dispatch_once(&nsis_descriptionOfVariable__once, &block);
      }
      uint64_t v6 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @".<unknown var (bug!):%p>", a3, block, v9, v10, v11, v12);
    }
  }
  return (id)objc_msgSend(-[UIView nsli_description](v5, "nsli_description"), "stringByAppendingString:", v6);
}

void __62__UIView_AdditionalLayoutSupport__nsis_descriptionOfVariable___block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  double v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Warning", &UILayoutFittingExpandedSize_block_invoke_13___s_category)
                    + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "%@ seems to be the delegate of an NSISVariable it doesn't know anything about. This is an internal UIKit bug.", (uint8_t *)&v4, 0xCu);
  }
}

- (BOOL)nsis_shouldIntegralizeVariable:(id)a3
{
  uint64_t v3 = (void *)[(NSISEngine *)[(UIView *)self _layoutEngine] delegate];
  if (dyld_program_sdk_at_least()) {
    return 0;
  }
  if (v3) {
    return [v3 _forceLayoutEngineSolutionInRationalEdges] ^ 1;
  }
  return 1;
}

- (BOOL)nsis_valueOfVariableIsUserObservable:(id)a3
{
  return 1;
}

- (void)_uili_stashLayoutVariableObservation:(id)a3 forVariable:(id)a4
{
  If = -[UIView _stashedLayoutVariableObservationsCreateIfNecessary](self);
  [If setObject:a3 forKey:a4];
}

BOOL __117__UIView_AdditionalLayoutSupport___snipDangliesWithForce_repairIfPossibleForViewThatMoved_newSuperview_oldSuperview___block_invoke_2(id *a1, id a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!os_variant_has_internal_diagnostics())
  {
    if (a2) {
      goto LABEL_3;
    }
    uint64_t v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &UILayoutFittingExpandedSize_block_invoke_14___s_category)+ 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = objc_msgSend(a1[4], "nsli_description");
      id v11 = a1[4];
      int v12 = 138412546;
      uint64_t v13 = v10;
      __int16 v14 = 2112;
      id v15 = v11;
      _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "Internal NSLayoutConstraint clean-up problem after view moved leafward in the hierarchy: %@: %@", (uint8_t *)&v12, 0x16u);
    }
    return 0;
  }
  if (!a2)
  {
    uint64_t v6 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      uint64_t v7 = objc_msgSend(a1[4], "nsli_description");
      id v8 = a1[4];
      int v12 = 138412546;
      uint64_t v13 = v7;
      __int16 v14 = 2112;
      id v15 = v8;
      _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Internal NSLayoutConstraint clean-up problem after view moved leafward in the hierarchy: %@: %@", (uint8_t *)&v12, 0x16u);
    }
    return 0;
  }
LABEL_3:
  BOOL v4 = 0;
  do
  {
    if (a2 == a1[5]) {
      break;
    }
    if (a2 == a1[6] || v4) {
      break;
    }
    BOOL v4 = a2 == a1[4];
    a2 = (id)[a2 superview];
  }
  while (a2);
  return v4;
}

- (BOOL)nsli_lowerAttribute:(int)a3 intoExpression:(id)a4 withCoefficient:(double)a5 container:(id)a6
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(NSObject **)(__UILogGetCategoryCachedImpl("LayoutConstraints", &nsli_lowerAttribute_intoExpression_withCoefficient_container____s_category)+ 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    int v8 = 136315138;
    uint64_t v9 = "-[UIView(AdditionalLayoutSupport) nsli_lowerAttribute:intoExpression:withCoefficient:container:]";
    _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "Unexpected call to %s", (uint8_t *)&v8, 0xCu);
  }
  return 0;
}

uint64_t __122__UIView_AdditionalLayoutSupport__nsli_lowerAttribute_intoExpression_withCoefficient_forConstraint_onBehalfOfLayoutGuide___block_invoke@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  BOOL v4 = (objc_class *)objc_opt_class();
  Name = class_getName(v4);
  strncpy((char *)&v8, Name, 0x18uLL);
  *(_DWORD *)a2 = 200;
  uint64_t v6 = *(void **)(a1 + 32);
  *(void *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 40) = 201;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = v6;
  uint64_t result = [v6 superview];
  *(void *)(a2 + 72) = result;
  return result;
}

uint64_t __122__UIView_AdditionalLayoutSupport__nsli_lowerAttribute_intoExpression_withCoefficient_forConstraint_onBehalfOfLayoutGuide___block_invoke_554(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 48);
  BOOL v4 = v3 > 0x25;
  uint64_t v5 = (1 << v3) & 0x2A00119D19;
  BOOL v6 = v4 || v5 == 0;
  uint64_t v7 = *(void **)(a1 + 32);
  if (v6) {
    uint64_t v8 = objc_msgSend(a2, "nsli_contentXOffsetVariable");
  }
  else {
    uint64_t v8 = objc_msgSend(a2, "nsli_contentYOffsetVariable");
  }
  double v9 = -*(double *)(a1 + 40);
  return [v7 addVariable:v8 coefficient:v9];
}

- (CGSize)nsli_convertSizeToEngineSpace:(CGSize)a3
{
  double height = a3.height;
  double width = a3.width;
  [(UIView *)self nsli_engineToUserScalingCoefficients];
  double v6 = width / v5;
  double v8 = height / v7;
  result.double height = v8;
  result.double width = v6;
  return result;
}

- (CGSize)nsli_convertSizeFromEngineSpace:(CGSize)a3
{
  double height = a3.height;
  double width = a3.width;
  [(UIView *)self nsli_engineToUserScalingCoefficients];
  double v6 = width * v5;
  double v8 = height * v7;
  result.double height = v8;
  result.double width = v6;
  return result;
}

- (BOOL)nsli_descriptionIncludesPointer
{
  return [(UIView *)self _layoutDescriptionIfDifferentFromDefault] == 0;
}

- (BOOL)nsli_isFlipped
{
  return 1;
}

- (BOOL)nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:(id)a3
{
  return 0;
}

- (BOOL)nsli_isLegalConstraintItem
{
  return 1;
}

- (id)_dummyFittingSizeInfo
{
  [(UIView *)self bounds];
  double Width = CGRectGetWidth(v10);
  if (Width == 0.0) {
    float v3 = 50.0;
  }
  else {
    float v3 = 1000.0;
  }
  BOOL v4 = [_UIViewFittingSizeTargetInfo alloc];
  if (v4
    && (v9.receiver = v4,
        v9.super_class = (Class)_UIViewFittingSizeTargetInfo,
        (double v5 = [(UIView *)&v9 init]) != 0))
  {
    double v6 = v5;
    *(double *)&v5->_constraintsExceptingSubviewAutoresizingConstraints = Width;
    v5->_cachedTraitCollection = 0;
    *((float *)&v5->super._responderFlags + 1) = v3;
    LODWORD(v5->super.__layeringSceneIdentity) = 1112014848;
    *(unsigned char *)&v5->super._responderFlags = 1;
  }
  else
  {
    double v6 = 0;
  }
  double v7 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithObject:_layoutSizeInfo(0) forKey:v6];

  return v7;
}

- (double)_paddingForBaselineSpacingFromEdge:(int)a3 toNeighborEdge:(int)a4
{
  return 0.0;
}

- (void)_ui_setObservationTrackingDictionary:(id)a3
{
  *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFFFFFFFFFFELL | (a3 != 0);
  v3.receiver = self;
  v3.super_class = (Class)UIView;
  [&v3 _ui_setObservationTrackingDictionary:a3];
}

- (id)_ui_observationTrackingDictionary
{
  if (*(void *)&self->_viewFlags)
  {
    v4.receiver = self;
    v4.super_class = (Class)UIView;
    double v2 = [&v4 _ui_observationTrackingDictionary];
  }
  else
  {
    double v2 = 0;
  }
  return v2;
}

- (void)_setAppEntityIdentifier:(id)a3
{
  *(void *)((char *)&self->_viewFlags + 20) = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFFBFFLL | ((unint64_t)(a3 != 0) << 10);
  objc_setAssociatedObject(self, &_UIViewAppEntityIdentifierKey, a3, (void *)3);
}

- (NSString)_appEntityIdentifier
{
  if ((*((unsigned char *)&self->_viewFlags + 21) & 4) != 0)
  {
    double v2 = objc_getAssociatedObject(self, &_UIViewAppEntityIdentifierKey);
  }
  else
  {
    double v2 = 0;
  }
  return (NSString *)v2;
}

- (void)_setAppIntentIdentifier:(id)a3
{
  *(void *)((char *)&self->_viewFlags + 20) = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFF7FFLL | ((unint64_t)(a3 != 0) << 11);
  objc_setAssociatedObject(self, &_UIViewAppIntentIdentifierKey, a3, (void *)3);
}

- (NSString)_appIntentIdentifier
{
  if ((*((unsigned char *)&self->_viewFlags + 21) & 8) != 0)
  {
    double v2 = objc_getAssociatedObject(self, &_UIViewAppIntentIdentifierKey);
  }
  else
  {
    double v2 = 0;
  }
  return (NSString *)v2;
}

- (NSISEngine)_activeSizeToFitLayoutEngine
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (os_variant_has_internal_diagnostics())
  {
    objc_super v4 = __UIFaultDebugAssertLog();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      goto LABEL_5;
    }
    double v5 = NSStringFromSelector(a2);
    objc_super v9 = (objc_class *)objc_opt_class();
    double v7 = NSStringFromClass(v9);
    int v10 = 138412546;
    id v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_fault_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "%@ not supported on %@", (uint8_t *)&v10, 0x16u);
LABEL_4:

LABEL_5:
    return 0;
  }
  objc_super v3 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_activeSizeToFitLayoutEngine___s_category) + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    objc_super v4 = v3;
    double v5 = NSStringFromSelector(a2);
    double v6 = (objc_class *)objc_opt_class();
    double v7 = NSStringFromClass(v6);
    int v10 = 138412546;
    id v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "%@ not supported on %@", (uint8_t *)&v10, 0x16u);
    goto LABEL_4;
  }
  return 0;
}

- (void)_setLayoutDebuggingIdentifier:(id)a3
{
  *(void *)((char *)&self->_viewFlags + 20) = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFFEFFLL | ((unint64_t)(a3 != 0) << 8);
  objc_setAssociatedObject(self, &_UIViewLayoutDebuggingIdentifierKey, a3, (void *)1);
}

- (BOOL)_isInternalDebugView
{
  return 0;
}

- (int64_t)_hiddenManagedByLayoutArrangementCount
{
  return -[UIView _hiddenManagementCountForKey:bitFlagValue:](self, "_UIViewHiddenManagementCount", (*((_DWORD *)&self->_viewFlags + 4) >> 14) & 1);
}

- (void)_addConstraintPendingAnimatedChanges:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v6 = v4;
    BOOL v5 = +[UIView _isInAnimationBlock];
    id v4 = v6;
    if (v5)
    {
      +[UIViewAnimationState _addConstraintPendingAnimation:v6 container:self];
      id v4 = v6;
    }
  }
}

- (id)_contentWidthVariable
{
  return 0;
}

- (id)_contentHeightVariable
{
  return 0;
}

- (id)_contentXOffsetVariable
{
  return 0;
}

- (id)_contentYOffsetVariable
{
  return 0;
}

- (void)_stashedLayoutVariableObservationsCreateIfNecessary
{
  if (a1)
  {
    double v2 = a1;
    objc_super v3 = (void *)a1[30];
    if (!v3)
    {
      uint64_t v4 = [objc_alloc(MEMORY[0x1E4F28E10]) initWithKeyOptions:512 valueOptions:0 capacity:4];
      BOOL v5 = (void *)v2[30];
      v2[30] = v4;

      objc_super v3 = (void *)v2[30];
    }
    a1 = v3;
    uint64_t v1 = vars8;
  }
  return a1;
}

- (id)nsli_contentXOffsetVariable
{
  return 0;
}

- (id)nsli_contentYOffsetVariable
{
  return 0;
}

- (void)_parameterCheckForSystemSpacingBelowView:(void *)a3 getTopBaselineView:(void *)a4 bottomBaselineView:
{
  id v7 = a2;
  if (!a1) {
    goto LABEL_19;
  }
  id v15 = v7;
  if (v7)
  {
    if (v7 != a1)
    {
      if (a3) {
        goto LABEL_5;
      }
      goto LABEL_14;
    }
    __int16 v12 = @"Can't get spacing between a view and itself";
  }
  else
  {
    __int16 v12 = @"Other view must not be nil";
  }
  [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"Invalid view parameter: %@", v12 format];
  id v7 = v15;
  if (a3)
  {
LABEL_5:
    -[UIView _deepestViewForBaselineLayoutUsingFirstBaseline:](v7, 0);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    if (v8 != v15)
    {
      uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
      [v13 handleFailureInMethod:sel__parameterCheckForSystemSpacingBelowView_getTopBaselineView_bottomBaselineView_ object:a1 file:@"UIView.m" lineNumber:3920 description:@"rdar://104043151 (-_systemSpacingBelowView: does not support views that don't return self from -viewForFirst/LastBaselineLayout)"];
    }
    id v9 = v8;
    *a3 = v9;
    if (a4) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  id v9 = 0;
  if (a4)
  {
LABEL_8:
    -[UIView _deepestViewForBaselineLayoutUsingFirstBaseline:](a1, 1);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    if (v10 != a1)
    {
      uint64_t v14 = [MEMORY[0x1E4F28B00] currentHandler];
      [v14 handleFailureInMethod:sel__parameterCheckForSystemSpacingBelowView_getTopBaselineView_bottomBaselineView_ object:a1 file:@"UIView.m" lineNumber:3925 description:@"rdar://104043151 (-_systemSpacingBelowView: does not support views that don't return self from -viewForFirst/LastBaselineLayout)"];
    }
    id v11 = v10;
    *a4 = v11;
    goto LABEL_16;
  }
LABEL_15:
  id v11 = 0;
LABEL_16:
  if (v9 == v11) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"Invalid view parameter: first-baselineView for %@ is the same as last-baselineView for %@", a1, v15 format];
  }

  id v7 = v15;
LABEL_19:
}

- (double)_systemSpacingBelowView:(id)a3 systemSpacingInvalidationRecorder:(id *)a4
{
  id v11 = 0;
  id v12 = 0;
  -[UIView _parameterCheckForSystemSpacingBelowView:getTopBaselineView:bottomBaselineView:](self, a3, &v12, &v11);
  BOOL v5 = v12;
  id v6 = v11;
  if (a4)
  {
    id v7 = [[_UIViewSystemSpacingInvalidationRecorder alloc] initWithTopView:v5 bottomView:v6];
    -[UIView _addGeometryChangeObserver:](v5, v7);
    -[UIView _addGeometryChangeObserver:](v6, v7);
    id v8 = v7;
    *a4 = v8;
  }
  double v9 = _calculatedSystemSpacing(v5, v6);

  return v9;
}

- (double)_systemSpacingBelowView:(id)a3 multiplier:(double)a4
{
  id v6 = a3;
  if (a4 <= 0.0) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"The multiplier parameter must be greater than 0"];
  }
  id v14 = 0;
  id v15 = 0;
  -[UIView _parameterCheckForSystemSpacingBelowView:getTopBaselineView:bottomBaselineView:](self, v6, &v15, &v14);
  id v7 = v15;
  id v8 = v14;
  if ([v7 _hasFontInfoForVerticalBaselineSpacing]) {
    int v9 = 2;
  }
  else {
    int v9 = 0;
  }
  v7[28] = v7[28] & 0xFFFFFFFD | v9;
  if ([v8 _hasFontInfoForVerticalBaselineSpacing]) {
    int v10 = 2;
  }
  else {
    int v10 = 0;
  }
  v8[28] = v8[28] & 0xFFFFFFFD | v10;
  _calculatedSystemSpacing(v7, v8);

  UICeilToViewScale(self);
  double v12 = v11;

  return v12;
}

+ (void)_removeHierarchyTrackingVisitor:(id)a3
{
}

- (void)_setShouldArchiveUIAppearanceTags:(BOOL)a3
{
  if (a3) {
    int v3 = 0x10000000;
  }
  else {
    int v3 = 0;
  }
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xEFFFFFFF | v3;
}

- (BOOL)_shouldArchiveUIAppearanceTags
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 28) & 1;
}

+ (id)appearanceWhenContainedIn:(Class)a3
{
  if (a3)
  {
    uint64_t v4 = _UIInternalContainerClassesForContainerClasses(a3, &v9, 0);
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (v4) {
    BOOL v5 = v4;
  }
  else {
    BOOL v5 = (void *)MEMORY[0x1E4F1CBF0];
  }
  id v6 = [a1 _appearanceWhenContainedIn:v5];

  return v6;
}

+ (id)appearanceForTraitCollection:(id)a3
{
  return +[_UITraitBasedAppearance _appearanceForTraitCollection:a3 forClass:a1 withContainerList:MEMORY[0x1E4F1CBF0]];
}

+ (id)appearanceForTraitCollection:(id)a3 whenContainedInInstancesOfClasses:(id)a4
{
  id v6 = a3;
  id v7 = _UIInternalContainerClassArrayForContainerClassArray(a4);
  id v8 = +[_UITraitBasedAppearance _appearanceForTraitCollection:v6 forClass:a1 withContainerList:v7];

  return v8;
}

+ (id)appearanceForTraitCollection:(id)a3 whenContainedIn:(Class)a4
{
  id v6 = a3;
  if (a4)
  {
    _UIInternalContainerClassesForContainerClasses(a4, &v11, 0);
    a4 = (Class)objc_claimAutoreleasedReturnValue();
  }
  if (a4) {
    Class v7 = a4;
  }
  else {
    Class v7 = (Class)MEMORY[0x1E4F1CBF0];
  }
  id v8 = +[_UITraitBasedAppearance _appearanceForTraitCollection:v6 forClass:a1 withContainerList:v7];

  return v8;
}

+ (void)_performForcedAppearanceModifications:(id)a3
{
  int v3 = (void (**)(void))a3;
  int v4 = __isObjectTaggingEnabled;
  __isObjectTaggingEnabledouble d = 0;
  v3[2]();

  if (v4 == 1) {
    __isObjectTaggingEnabledouble d = 1;
  }
}

- (void)_setTraitStorageConstraints:(id)a3
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = objc_alloc(MEMORY[0x1E4F1CAD0]);
  id v6 = [(UIView *)self constraints];
  Class v7 = (void *)[v5 initWithArray:v6];

  id v8 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithArray:v4];
  id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v10 = v7;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v31;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v31 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v30 + 1) + 8 * i);
        if (([v8 containsObject:v15] & 1) == 0) {
          [v9 addObject:v15];
        }
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v30 objects:v35 count:16];
    }
    while (v12);
  }

  id v16 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v17 = v8;
  uint64_t v18 = [v17 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)v27;
    do
    {
      for (uint64_t j = 0; j != v19; ++j)
      {
        if (*(void *)v27 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v22 = *(void *)(*((void *)&v26 + 1) + 8 * j);
        if ((objc_msgSend(v10, "containsObject:", v22, (void)v26) & 1) == 0) {
          [v16 addObject:v22];
        }
      }
      uint64_t v19 = [v17 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }
    while (v19);
  }

  if (dyld_program_sdk_at_least())
  {
    objc_setAssociatedObject(self, &unk_1EB25C09D, v16, (void *)1);
    objc_setAssociatedObject(self, &unk_1EB25C09E, v9, (void *)1);
    *(void *)((char *)&self->_viewFlags + 20) |= 0x100000uLL;
    if (dyld_program_sdk_at_least())
    {
      CGRect v23 = (void *)[(NSISEngine *)[(UIView *)self _layoutEngine] delegate];
      if (objc_msgSend(v23, "__isKindOfUIView")) {
        CGRect v24 = v23;
      }
      else {
        CGRect v24 = 0;
      }
      CGRect v25 = v24;
      if (-[UIView _usesLayoutEngineHostingConstraints]((uint64_t)v25))
      {
        -[UIView _relaxLayoutEngineHostConstraints](v25);
        *(void *)(v25 + 116) |= 0x200000uLL;
        [v25 setNeedsLayout];
      }
    }
    [(UIView *)self setNeedsUpdateConstraints];
  }
  else
  {
    -[UIView _applyTraitStorageConstraintsByRemoving:adding:](self, (uint64_t)v9, v16);
  }
}

- (void)_applyTraitStorageConstraintsByRemoving:(void *)a3 adding:
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a1)
  {
    [a1 removeConstraints:a2];
    id v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v5, "count"));
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v7 = v5;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v14 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          if (-[UIView _isViewHierarchyPreparedForConstraint:]((uint64_t)a1, v12)) {
            objc_msgSend(v6, "addObject:", v12, (void)v13);
          }
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v9);
    }

    [a1 addConstraints:v6];
  }
}

- (void)_setTraitStorageSubviews:(id)a3
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)[objc_alloc(MEMORY[0x1E4F1CAD0]) initWithArray:v4];
  id v6 = [(UIView *)self subviews];
  id v7 = (void *)[v6 copy];

  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v26 != v11) {
          objc_enumerationMutation(v8);
        }
        long long v13 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        if (([v5 containsObject:v13] & 1) == 0) {
          [v13 removeFromSuperview];
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }
    while (v10);
  }

  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v14 = v4;
  uint64_t v15 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v22;
    do
    {
      for (uint64_t j = 0; j != v16; ++j)
      {
        if (*(void *)v22 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void **)(*((void *)&v21 + 1) + 8 * j);
        objc_msgSend(v19, "superview", (void)v21);
        uint64_t v20 = (UIView *)objc_claimAutoreleasedReturnValue();

        if (v20 == self) {
          [(UIView *)self bringSubviewToFront:v19];
        }
        else {
          [(UIView *)self addSubview:v19];
        }
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
    }
    while (v16);
  }
}

uint64_t (*__36__UIView__autogeneratedNameForLayer__block_invoke())(void, void)
{
  qword_1EB25C120 = (uint64_t)sel_description;
  CGSize result = (uint64_t (*)(void, void))objc_msgSend(MEMORY[0x1E4FBA8A8], "instanceMethodForSelector:");
  qword_1EB25C128 = result;
  return result;
}

- (void)encodeWithCoder:(id)a3
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  +[_UIAppearance _applyInvocationsTo:self window:0 matchingSelector:0 onlySystemInvocations:1];
  [(UIView *)self _encodeFrameWithCoder:v4];
  [(UIView *)self transform];
  if (!CGAffineTransformIsIdentity(&v73))
  {
    [(UIView *)self transform];
    [v4 encodeCGAffineTransform:v72 forKey:@"UITransform"];
  }
  id v5 = [(UIView *)self subviews];
  uint64_t v6 = [v5 count];

  if (v6)
  {
    id v7 = objc_alloc(MEMORY[0x1E4F1CA80]);
    id v8 = [(UIView *)self subviews];
    uint64_t v9 = objc_msgSend(v7, "initWithCapacity:", objc_msgSend(v8, "count"));

    [(UIView *)self _populateArchivedSubviews:v9];
    if ([v9 count])
    {
      uint64_t v10 = [(UIView *)self _encodableSubviews];
      uint64_t v11 = UIArrayByKeepingObjectsInSet(v10, v9);
      [v4 encodeObject:v11 forKey:@"UISubviews"];
    }
  }
  [(UIView *)self _encodeBackgroundColorWithCoder:v4];
  if ([(UIView *)self wantsDeepColorDrawing]) {
    objc_msgSend(v4, "encodeBool:forKey:", -[UIView wantsDeepColorDrawing](self, "wantsDeepColorDrawing"), @"UIDeepDrawRect");
  }
  [(UIView *)self hitTestDirectionalInsets];
  if (v15 != 0.0 || v12 != 0.0 || v14 != 0.0 || v13 != 0.0)
  {
    [(UIView *)self hitTestDirectionalInsets];
    objc_msgSend(v4, "encodeDirectionalEdgeInsets:forKey:", @"UIHitTestDirectionalInsets");
  }
  if ([(UIView *)self isOpaque]) {
    objc_msgSend(v4, "encodeBool:forKey:", -[UIView isOpaque](self, "isOpaque"), @"UIOpaque");
  }
  if ([(UIView *)self isHidden]) {
    [v4 encodeBool:1 forKey:@"UIHidden"];
  }
  p_uint64_t viewFlags = &self->_viewFlags;
  if ((*((unsigned char *)&self->_viewFlags + 20) & 8) != 0)
  {
    uint64_t v17 = _tagForView(self);
    if (v17) {
      [v4 encodeInteger:v17 forKey:@"UITag"];
    }
  }
  unint64_t v18 = *(void *)p_viewFlags;
  if ((*(void *)p_viewFlags & 2) != 0)
  {
    [v4 encodeBool:1 forKey:@"UIUserInteractionDisabled"];
    unint64_t v18 = *(void *)p_viewFlags;
  }
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x40000) != 0)
  {
    [v4 encodeBool:1 forKey:@"UIFocusInteractionDisabled"];
    unint64_t v18 = *(void *)p_viewFlags;
    if ((*(void *)p_viewFlags & 0x20000000) == 0)
    {
LABEL_25:
      if ((v18 & 0x40000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_103;
    }
  }
  else if ((v18 & 0x20000000) == 0)
  {
    goto LABEL_25;
  }
  [v4 encodeBool:1 forKey:@"UIMultipleTouchEnabled"];
  unint64_t v18 = *(void *)p_viewFlags;
  if ((*(void *)p_viewFlags & 0x40000000) == 0)
  {
LABEL_26:
    if ((v18 & 0x20000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_103:
  [v4 encodeBool:1 forKey:@"UIExclusiveTouch"];
  unint64_t v18 = *(void *)p_viewFlags;
  if ((*(void *)p_viewFlags & 0x20000) == 0)
  {
LABEL_27:
    [v4 encodeBool:1 forKey:@"UIAutoresizeSubviews"];
    unint64_t v18 = *(void *)p_viewFlags;
  }
LABEL_28:
  uint64_t v19 = (v18 >> 18) & 0x3F;
  if (v19) {
    [v4 encodeInteger:v19 forKey:@"UIAutoresizingMask"];
  }
  [(UIView *)self alpha];
  if (v20 < 1.0)
  {
    *(float *)&double v20 = v20;
    [v4 encodeFloat:@"UIAlpha" forKey:v20];
  }
  if (![(UIView *)self clearsContextBeforeDrawing]) {
    [v4 encodeBool:0 forKey:@"UIClearsContextBeforeDrawing"];
  }
  UIViewContentMode v21 = [(UIView *)self contentMode];
  if (v21) {
    [v4 encodeInteger:v21 forKey:@"UIContentMode"];
  }
  long long v22 = self->_layer;
  [(CALayer *)v22 contentsCenter];
  v78.origin.double x = 0.0;
  v78.origin.double y = 0.0;
  v78.size.double width = 1.0;
  v78.size.double height = 1.0;
  BOOL v23 = CGRectEqualToRect(v77, v78);

  if (!v23)
  {
    long long v24 = self->_layer;
    [(CALayer *)v24 contentsCenter];
    objc_msgSend(v4, "encodeCGRect:forKey:", @"UIContentStretch");
  }
  if ([(UIView *)self clipsToBounds]) {
    [v4 encodeBool:1 forKey:@"UIClipsToBounds"];
  }
  uint64_t v25 = _UIViewGetInteractionTintColor(self);
  if (v25)
  {
    long long v26 = [(UIView *)self _tintColorArchivingKey];
    [v4 encodeObject:v25 forKey:v26];
  }
  if (![(UIView *)self translatesAutoresizingMaskIntoConstraints]) {
    [v4 encodeBool:1 forKey:@"UIViewDoesNotTranslateAutoresizingMaskIntoConstraints"];
  }
  long long v27 = _UIViewConstraints(self);
  id v28 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  id v29 = v27;
  uint64_t v30 = [v29 countByEnumeratingWithState:&v68 objects:v75 count:16];
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = *(void *)v69;
    do
    {
      for (uint64_t i = 0; i != v31; ++i)
      {
        if (*(void *)v69 != v32) {
          objc_enumerationMutation(v29);
        }
        uint64_t v34 = *(void **)(*((void *)&v68 + 1) + 8 * i);
        if ([v34 shouldBeArchived]) {
          [v28 addObject:v34];
        }
      }
      uint64_t v31 = [v29 countByEnumeratingWithState:&v68 objects:v75 count:16];
    }
    while (v31);
  }

  if ([v28 count]) {
    [v4 encodeObject:v28 forKey:@"UIViewAutolayoutConstraints"];
  }
  id v35 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v36 = [(UIView *)self layoutGuides];
  uint64_t v37 = [v36 countByEnumeratingWithState:&v64 objects:v74 count:16];
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v39 = *(void *)v65;
    do
    {
      for (uint64_t j = 0; j != v38; ++j)
      {
        if (*(void *)v65 != v39) {
          objc_enumerationMutation(v36);
        }
        int64_t v41 = *(void **)(*((void *)&v64 + 1) + 8 * j);
        if ([v41 _shouldBeArchived]) {
          [v35 addObject:v41];
        }
      }
      uint64_t v38 = [v36 countByEnumeratingWithState:&v64 objects:v74 count:16];
    }
    while (v38);
  }

  if ([v35 count]) {
    [v4 encodeObject:v35 forKey:@"UIViewLayoutGuides"];
  }
  if (self)
  {
    id v42 = objc_getAssociatedObject(self, &_UIViewToContentHuggingPrioritiesAssociatedStorageKey);
    uint64_t v43 = v42;
    if (v42)
    {
      [v42 sizeValue];
      objc_msgSend(v4, "encodeSize:forKey:", @"UIViewContentHuggingPriority");
    }
    id v44 = objc_getAssociatedObject(self, &UIViewToContentCompressionResistancePrioritiesAssociatedStorageKey);
    uint64_t v45 = v44;
    if (v44)
    {
      [v44 sizeValue];
      objc_msgSend(v4, "encodeSize:forKey:", @"UIViewContentCompressionResistancePriority");
    }
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v43 = 0;
  }
  double DefaultLayoutMargins = _UIViewGetDefaultLayoutMargins();
  if (v49 != self->_rawLayoutMargins.left
    || DefaultLayoutMargins != self->_rawLayoutMargins.top
    || v47 != self->_rawLayoutMargins.right
    || v46 != self->_rawLayoutMargins.bottom)
  {
    objc_msgSend(v4, "encodeUIEdgeInsets:forKey:", @"UIViewLayoutMargins");
  }
  if ([(UIView *)self layoutMarginsFollowReadableWidth]) {
    [v4 encodeBool:1 forKey:@"UIViewLayoutMarginsFollowReadableWidth"];
  }
  unint64_t v53 = *((void *)&self->_viewFlags + 1);
  if ((v53 & 0x1E0000000000000) != 0)
  {
    [v4 encodeBool:1 forKey:@"UIViewPreservesSuperviewMargins"];
    *((void *)&v54 + 1) = *((unsigned int *)&self->_viewFlags + 4);
    *(void *)&long long v54 = *((void *)&self->_viewFlags + 1);
    [v4 encodeInteger:(unint64_t)(v54 >> 53) & 0xF forKey:@"UIViewPreservesSpecificSuperviewMargins"];
    unint64_t v53 = *((void *)&self->_viewFlags + 1);
  }
  int v55 = *((_DWORD *)&self->_viewFlags + 4);
  if ((v55 & 0x400) != 0)
  {
    [v4 encodeBool:1 forKey:@"UIViewLayoutMarginsAreDirectional"];
    unint64_t v53 = *((void *)&self->_viewFlags + 1);
    int v55 = *((_DWORD *)&self->_viewFlags + 4);
  }
  uint64_t v56 = (v53 >> 57) & 0xF;
  if (v56 != 15)
  {
    [v4 encodeInteger:v56 forKey:@"UIViewInsetsLayoutMarginsFromSafeArea"];
    int v55 = *((_DWORD *)&self->_viewFlags + 4);
  }
  if ((v55 & 0x10000000) != 0)
  {
    float64x2_t v57 = objc_getAssociatedObject(self, &_UIAppearanceCustomizedSelectorsAssociationKey);
    if (v57) {
      [v4 encodeObject:v57 forKey:0x1ED12AC00];
    }
  }
  BOOL v58 = [(UIResponder *)self restorationIdentifier];

  if (v58)
  {
    int64_t v59 = [(UIResponder *)self restorationIdentifier];
    [v4 encodeObject:v59 forKey:@"UIRestorationIdentifier"];
  }
  [v4 encodeInteger:(*(void *)((char *)&self->_viewFlags + 20) >> 14) & 7 forKey:@"UIViewSemanticContentAttribute"];
  long long v60 = [(UIView *)self _previewingSegueTemplateStorage];

  if (v60)
  {
    long long v61 = [(UIView *)self _previewingSegueTemplateStorage];
    [v4 encodeObject:v61 forKey:@"UIViewPreviewingSegueTemplateStorage"];
  }
  [(UIView *)self _encodeLargeContentViewerPropertiesWithCoder:v4];
  if ([(UIView *)self overrideUserInterfaceStyle])
  {
    long long v62 = +[UITraitCollection traitCollectionWithUserInterfaceStyle:[(UIView *)self overrideUserInterfaceStyle]];
    [v4 encodeObject:v62 forKey:@"UIViewLocalOverrideTraitCollection"];
  }
}

- (uint64_t)_isDeallocInitiated
{
  if (result) {
    return (*(void *)(result + 96) >> 12) & 1;
  }
  return result;
}

- (void)_setIdentifier:(id)a3
{
}

+ (void)_setupViewVisualization
{
  self;
  id v0 = (objc_class *)objc_opt_class();
  InstanceMethodouble d = class_getInstanceMethod(v0, sel_layoutSublayersOfLayer_);
  double v2 = (objc_class *)objc_opt_class();
  int v3 = class_getInstanceMethod(v2, sel___vis_layoutSublayersOfLayer_);
  method_exchangeImplementations(InstanceMethod, v3);
}

- (void)setCharge:(float)a3
{
  id v4 = self;
  if (v4)
  {
    id object = v4;
    *(float *)&double v5 = _chargeForView(v4);
    id v4 = object;
    if (*(float *)&v5 != a3)
    {
      float v6 = fabsf(*(float *)&v5);
      float v7 = fabsf(a3);
      if (v6 >= 2.2204e-16)
      {
        if (v7 < 2.2204e-16)
        {
          objc_setAssociatedObject(object, &_UIViewChargeAssocObjectKey, 0, (void *)1);
          uint64_t v10 = [(UIView *)object window];
          [v10 _unregisterChargedView:object];

          id v4 = object;
          *(void *)((char *)&object->_viewFlags + 20) &= ~0x10uLL;
        }
      }
      else if (v7 >= 2.2204e-16)
      {
        *(float *)&double v5 = a3;
        id v8 = [NSNumber numberWithFloat:v5];
        objc_setAssociatedObject(object, &_UIViewChargeAssocObjectKey, v8, (void *)1);
        uint64_t v9 = [(UIView *)object window];
        [v9 _registerChargedView:object];

        *(void *)((char *)&object->_viewFlags + 20) |= 0x10uLL;
        id v4 = object;
      }
    }
  }
}

- (void)_setChargeEnabled:(BOOL)a3
{
  uint64_t v3 = 0x800000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFF7FFFFFFFFLL | v3;
}

- (BOOL)_isChargeEnabled
{
  return (*(void *)&self->_viewFlags & 0x800000000) != 0 || [(UIView *)self isEnabled];
}

- (id)_textServicesResponderProxy
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  double v2 = [(UIView *)self interactions];
  uint64_t v3 = (void *)[v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v2);
        }
        float v6 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v3 = [v6 responder];
          goto LABEL_11;
        }
      }
      uint64_t v3 = (void *)[v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v3;
}

- (int64_t)_topToBottomLeftToRightViewCompare:(id)a3
{
  id v4 = a3;
  [(UIView *)self bounds];
  double v6 = v5;
  [v4 bounds];
  -[UIView convertRect:fromView:](self, "convertRect:fromView:", v4);
  if (v6 < v7)
  {
LABEL_5:
    int64_t v11 = -1;
    goto LABEL_6;
  }
  [(UIView *)self bounds];
  double v9 = v8;
  [v4 bounds];
  -[UIView convertRect:fromView:](self, "convertRect:fromView:", v4);
  if (v9 <= v10)
  {
    [(UIView *)self bounds];
    double v13 = v12;
    [v4 bounds];
    -[UIView convertRect:fromView:](self, "convertRect:fromView:", v4);
    if (v13 >= v14)
    {
      [(UIView *)self bounds];
      double v17 = v16;
      [v4 bounds];
      -[UIView convertRect:fromView:](self, "convertRect:fromView:", v4);
      int64_t v11 = v17 > v18;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int64_t v11 = 1;
LABEL_6:

  return v11;
}

- (int64_t)focusItemDeferralMode
{
  if (![(UIView *)self conformsToProtocol:&unk_1ED42EEC0]) {
    return 0;
  }
  if ([(UIView *)self isFirstResponder]) {
    return 2;
  }
  return 1;
}

- (BOOL)_wantsKeyCommandsWhenDeferred
{
  return 0;
}

- (id)_defaultFocusEffect
{
  return +[UIFocusEffect effect];
}

- (UIFocusEffect)focusEffect
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  p_uint64_t viewFlags = &self->_viewFlags;
  int v3 = (*((_DWORD *)&self->_viewFlags + 5) >> 26) & 3;
  if (v3 == 2)
  {
    id v4 = objc_getAssociatedObject(self, &FocusEffectKey);
  }
  else
  {
    if (v3 != 1)
    {
      if (!v3)
      {
        id v4 = [(UIView *)self _defaultFocusEffect];
        goto LABEL_10;
      }
      if (os_variant_has_internal_diagnostics())
      {
        double v8 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        {
          int v9 = (*((_DWORD *)p_viewFlags + 5) >> 26) & 3;
          int v10 = 67109120;
          int v11 = v9;
          _os_log_fault_impl(&dword_1853B0000, v8, OS_LOG_TYPE_FAULT, "Unknown case for _viewFlags.hasFocusEffect (%d).", (uint8_t *)&v10, 8u);
        }
      }
      else
      {
        double v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &focusEffect___s_category) + 8);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          int v6 = (*((_DWORD *)p_viewFlags + 5) >> 26) & 3;
          int v10 = 67109120;
          int v11 = v6;
          _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "Unknown case for _viewFlags.hasFocusEffect (%d).", (uint8_t *)&v10, 8u);
        }
      }
    }
    id v4 = 0;
  }
LABEL_10:
  return (UIFocusEffect *)v4;
}

- (id)_nextKeyResponder
{
  int v3 = [MEMORY[0x1E4F1CA48] array];
  id v4 = [(UIView *)self _rootForKeyResponderCycle];
  [v4 _collectKeyViews:v3];

  [v3 sortUsingSelector:sel__topToBottomLeftToRightViewCompare_];
  double v5 = [(UIResponder *)self firstResponder];
  if (v5)
  {
  }
  else if ([v3 count])
  {
    unint64_t v12 = 0;
    goto LABEL_13;
  }
  int v6 = [(UIResponder *)self firstResponder];
  unint64_t i = [v3 indexOfObject:v6];

  if (i == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v8 = [(UIResponder *)self firstResponder];
    for (unint64_t i = 0; i < [v3 count]; ++i)
    {
      int v9 = [v3 objectAtIndex:i];
      char v10 = [v9 _containsResponder:v8];

      if (v10) {
        break;
      }
    }
  }
  if (i == [v3 count])
  {
    int v11 = 0;
    goto LABEL_14;
  }
  unint64_t v12 = (i + 1) % [v3 count];
LABEL_13:
  int v11 = [v3 objectAtIndex:v12];
LABEL_14:

  return v11;
}

- (id)_previousKeyResponder
{
  int v3 = [MEMORY[0x1E4F1CA48] array];
  id v4 = [(UIView *)self _rootForKeyResponderCycle];
  [v4 _collectKeyViews:v3];

  [v3 sortUsingSelector:sel__topToBottomLeftToRightViewCompare_];
  double v5 = [(UIResponder *)self firstResponder];
  uint64_t i = [v3 indexOfObject:v5];

  if (i == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v7 = [(UIResponder *)self firstResponder];
    for (uint64_t i = 0; i < (unint64_t)[v3 count]; ++i)
    {
      double v8 = [v3 objectAtIndex:i];
      char v9 = [v8 _containsResponder:v7];

      if (v9) {
        break;
      }
    }
  }
  if (i == [v3 count])
  {
    char v10 = 0;
  }
  else
  {
    if (i <= 0) {
      uint64_t i = [v3 count];
    }
    char v10 = [v3 objectAtIndex:i - 1];
  }

  return v10;
}

- (void)_gatherKeyResponders:(id)a3 indexOfSelf:(unint64_t *)a4 visibilityTest:(id)a5 passingTest:(id)a6 subviewsTest:(id)a7
{
  id v23 = a3;
  id v12 = a5;
  id v13 = a6;
  id v14 = a7;
  double v15 = [MEMORY[0x1E4F1CA48] array];
  double v16 = [(UIView *)self _rootForKeyResponderCycle];
  if (![(UIView *)self isDescendantOfView:v16])
  {
    uint64_t v17 = [(UIView *)self window];

    double v16 = (void *)v17;
  }
  [v16 _collectKeyViews:v15 visibilityTest:v12 passingTest:v13 subviewsTest:v14];
  [v15 sortUsingSelector:sel__topToBottomLeftToRightViewCompare_];
  [v23 setArray:v15];
  double v18 = [(UIResponder *)self firstResponder];
  unint64_t i = [v15 indexOfObject:v18];

  if (i == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v20 = [(UIResponder *)self firstResponder];
    for (unint64_t i = 0; i < [v15 count]; ++i)
    {
      UIViewContentMode v21 = [v15 objectAtIndex:i];
      char v22 = [v21 _containsResponder:v20];

      if (v22) {
        break;
      }
    }
  }
  if (a4) {
    *a4 = i;
  }
}

- (BOOL)_becomeFirstResponderWhenPossible
{
  *(void *)&self->_viewFlags |= 0x800uLL;
  return 0;
}

- (BOOL)_canBecomeFirstResponderWhenPossible
{
  return (*(void *)&self->_viewFlags >> 11) & 1;
}

- (BOOL)_supportsBecomeFirstResponderWhenPossible
{
  return 1;
}

- (BOOL)cancelMouseTracking
{
  return (*(void *)&self->_viewFlags & 0x10) == 0;
}

- (BOOL)cancelTouchTracking
{
  return (*(void *)&self->_viewFlags & 0x10) == 0;
}

- (void)_hasTransparentBackground
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result[12];
    if ((v2 & 0x40) != 0)
    {
      int v3 = (CGColor *)[result _backgroundCGColor];
      if (v3)
      {
        id v4 = v3;
        if (CGColorGetPattern(v3)) {
          return 0;
        }
        return (void *)(CGColorGetAlpha(v4) == 0.0);
      }
      uint64_t v2 = v1[12];
    }
    return (void *)((v2 & 0x400) == 0);
  }
  return result;
}

- (int64_t)compositingMode
{
  uint64_t v2 = [(CALayer *)self->_layer compositingFilter];
  if (!v2) {
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v3 = [v2 type];
      if (v3) {
        goto LABEL_6;
      }
    }
LABEL_7:
    int64_t v4 = 0;
    goto LABEL_8;
  }
  id v3 = v2;
LABEL_6:
  int64_t v4 = _UICompositingModeForFilter(v3);

LABEL_8:
  return v4;
}

- (void)_prepareDescendantsForWindowHostingSceneRemoval
{
  if (a1) {
    return (void *)[a1 _makeSubtreePerformSelector:sel__prepareForWindowHostingSceneRemoval withObject:0];
  }
  return a1;
}

- (void)_prepareForWindowHostingSceneRemoval
{
}

- (void)_prepareDescendantsForWindowDealloc
{
  if (a1) {
    return (void *)[a1 _makeSubtreePerformSelector:sel__prepareForWindowDealloc withObject:0];
  }
  return a1;
}

- (void)_prepareForWindowDealloc
{
  self->_window = 0;
  *(void *)&self->_viewFlags |= 0x4000uLL;
}

- (BOOL)_acceptsInauthenticTouches
{
  return 0;
}

- (BOOL)_layoutMarginsGuideIgnoresSystemMinimumMargins
{
  return 0;
}

- (unint64_t)edgesPreservingSuperviewLayoutMargins
{
  *((void *)&v2 + 1) = *((unsigned int *)&self->_viewFlags + 4);
  *(void *)&long long v2 = *((void *)&self->_viewFlags + 1);
  return (v2 >> 53) & 0xF;
}

- (void)_recursiveEagerlyUpdateSafeAreaInsetsUntilViewController
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    uint64_t v1 = objc_msgSend(a1, "_allSubviews", 0);
    uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = *(void *)v9;
      do
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v9 != v4) {
            objc_enumerationMutation(v1);
          }
          int v6 = *(id **)(*((void *)&v8 + 1) + 8 * i);
          double v7 = -[UIView __viewDelegate](v6);

          if (!v7)
          {
            [v6 _updateSafeAreaInsets];
            -[UIView _recursiveEagerlyUpdateSafeAreaInsetsUntilViewController](v6);
          }
        }
        uint64_t v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v3);
    }
  }
}

- (id)_safeAreaLayoutGuideIfExists
{
  return self->_safeAreaLayoutGuide;
}

- (void)_clearSafeAreaInsets
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [(UIView *)self superview];

  if (v3)
  {
    if (os_variant_has_internal_diagnostics())
    {
      double v5 = __UIFaultDebugAssertLog();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
        goto LABEL_6;
      }
      int v6 = [(UIView *)self superview];
      int v7 = 138412546;
      long long v8 = self;
      __int16 v9 = 2112;
      long long v10 = v6;
      _os_log_fault_impl(&dword_1853B0000, v5, OS_LOG_TYPE_FAULT, "_clearSafeAreaInsets ignored when superview is non-nil. self = %@, superview = %@", (uint8_t *)&v7, 0x16u);
    }
    else
    {
      uint64_t v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_clearSafeAreaInsets___s_category) + 8);
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        return;
      }
      double v5 = v4;
      int v6 = [(UIView *)self superview];
      int v7 = 138412546;
      long long v8 = self;
      __int16 v9 = 2112;
      long long v10 = v6;
      _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "_clearSafeAreaInsets ignored when superview is non-nil. self = %@, superview = %@", (uint8_t *)&v7, 0x16u);
    }

LABEL_6:
    return;
  }
  -[UIView setSafeAreaInsets:](self, "setSafeAreaInsets:", 0.0, 0.0, 0.0, 0.0);
}

- (void)_setDontUpdateInferredLayoutMargins:(BOOL)a3
{
  if (a3) {
    int v3 = 512;
  }
  else {
    int v3 = 0;
  }
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFFFDFF | v3;
}

- (BOOL)_dontUpdateInferredLayoutMargins
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 9) & 1;
}

- (void)_removeAllAnimationsIncludingSubviewsTrackingForAnimationRestoration
{
  *(void *)((char *)&self->_viewFlags + 20) |= 0x400000000uLL;
  char v2 = __shouldTrackForAnimationRestoration;
  __shouldTrackForAnimationRestoration = 1;
  [(UIView *)self _removeAllAnimations:1];
  __shouldTrackForAnimationRestoration = v2;
}

- (void)_finishTrackingForAnimationRestoration
{
  *(void *)((char *)&self->_viewFlags + 20) &= ~0x400000000uLL;
}

- (void)_restoreRemovedAnimationsIncludingSubviews
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  p_uint64_t viewFlags = &self->_viewFlags;
  if ((*((unsigned char *)&self->_viewFlags + 24) & 2) != 0)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    int v3 = [(UIView *)self _allSubviews];
    uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          [*(id *)(*((void *)&v8 + 1) + 8 * v7++) _restoreRemovedAnimationsIncludingSubviews];
        }
        while (v5 != v7);
        uint64_t v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v5);
    }

    *(void *)((char *)p_viewFlags + 20) &= ~0x200000000uLL;
  }
}

- (BOOL)_wantsAnimationRestoration
{
  return 0;
}

void __46__UIView_setLayoutMarginsFollowReadableWidth___block_invoke(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _updateInferredLayoutMargins];
    id WeakRetained = v2;
  }
}

- (id)_layoutMarginsGuideIfExists
{
  return self->_layoutMarginsGuide;
}

- (unsigned)_secureName
{
  return 0;
}

- (UIKeyboardLayoutGuide)keyboardLayoutGuide
{
  if (!self->_keyboardLayoutGuide)
  {
    int v3 = objc_alloc_init(UIKeyboardLayoutGuide);
    keyboardLayoutGuide = self->_keyboardLayoutGuide;
    self->_keyboardLayoutGuide = v3;

    [(UIView *)self addLayoutGuide:self->_keyboardLayoutGuide];
    [(UILayoutGuide *)self->_keyboardLayoutGuide _setLockedToOwningView:1];
    [(UILayoutGuide *)self->_keyboardLayoutGuide setIdentifier:@"UIViewKeyboardLayoutGuide"];
    window = self->_window;
    if (window) {
      -[UIView _constrainKeyboardGuideToWindowGuideIfNeeded:]((uint64_t)self, window);
    }
  }
  uint64_t v6 = self->_keyboardLayoutGuide;
  return v6;
}

- (BOOL)_fakeShouldAnimatePropertyWithKey:(id)a3
{
  return 0;
}

+ (void)_setAnimatedPropertiesEnabled:(BOOL)a3
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __40__UIView__setAnimatedPropertiesEnabled___block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  if (qword_1EB25C178 != -1) {
    dispatch_once(&qword_1EB25C178, block);
  }
  char v4 = byte_1EB25C0A2;
  if (byte_1EB25C0A2 != 1)
  {
    if (a3) {
      return;
    }
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    method_exchangeImplementations((Method)qword_1EB25C168, (Method)qword_1EB25C170);
    byte_1EB25C0A2 = v4 ^ 1;
  }
}

Method __40__UIView__setAnimatedPropertiesEnabled___block_invoke(uint64_t a1)
{
  qword_1EB25C168 = (uint64_t)class_getInstanceMethod(*(Class *)(a1 + 32), sel__shouldAnimatePropertyWithKey_);
  Method result = class_getInstanceMethod(*(Class *)(a1 + 32), sel__fakeShouldAnimatePropertyWithKey_);
  qword_1EB25C170 = (uint64_t)result;
  return result;
}

- (void)_invalidateAppearance
{
  *(void *)&self->_viewFlags |= 0x20000000000uLL;
  if (!self->_imminentLayoutSubviewsCount) {
    goto LABEL_5;
  }
  if (qword_1EB25C330 != -1) {
    dispatch_once(&qword_1EB25C330, &__block_literal_global_3712);
  }
  if (!byte_1EB25C0B5)
  {
LABEL_5:
    [(UIView *)self setNeedsLayout];
  }
}

- (void)_invalidateAppearanceForTraitCollection:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(UIView *)self traitCollection];
  BOOL v6 = -[UITraitCollection _containsTraitsInCollectionConsideringTraitsThatCanRepresentUnspecifiedOnly:]((uint64_t)v5, (uint64_t)v4);

  if (v6) {
    [(UIView *)self _invalidateAppearance];
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v7 = [(UIView *)self _allSubviews];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(*((void *)&v12 + 1) + 8 * v11++) _invalidateAppearanceForTraitCollection:v4];
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v9);
  }
}

- (BOOL)_appearanceIsInvalid
{
  return (*(void *)&self->_viewFlags >> 41) & 1;
}

- (id)_extraInfoForTraitTrace
{
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x80) != 0) {
    return 0;
  }
  if ([self __isKindOfUIWindow]) {
    return 0;
  }
  return @"pending traitCollection update";
}

- (id)_traitTrace:(id)a3
{
  return _UITraitTraceForTraitEnvironmentAndQueryString(self, a3);
}

- (id)_traitTrace
{
  return [(UIView *)self _traitTrace:0];
}

- (UITraitCollection)_localOverrideTraitCollection
{
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x100) != 0)
  {
    objc_getAssociatedObject(self, &_UIViewTraitOverridesKey);
    int v3 = (id *)objc_claimAutoreleasedReturnValue();
    id v2 = -[UIBarButtonItemGroup _items](v3);
  }
  else
  {
    id v2 = 0;
  }
  return (UITraitCollection *)v2;
}

- (void)_performSelectorTrackingTraitUsage:(SEL)a3 withInvalidationSelector:(SEL)a4
{
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v10 = NSStringFromSelector(a3);
    [v9 handleFailureInMethod:a2, self, @"UIView.m", 7044, @"%@ does not respond to action selector -%@", self, v10 object file lineNumber description];
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v12 = NSStringFromSelector(a4);
    [v11 handleFailureInMethod:a2, self, @"UIView.m", 7045, @"%@ does not respond to invalidation selector -%@", self, v12 object file lineNumber description];
  }
  memset(__src, 0, sizeof(__src));
  _UIBeginTrackingTraitUsage(self, 0, __src);
  if (dyld_program_sdk_at_least()) {
    [self a3];
  }
  else {
    [(UIView *)self performSelector:a3];
  }
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v8 = (char *)GetTraitCollectionTSD() + 16;
  memcpy(v14, v8, sizeof(v14));
  memcpy(v8, __dst, 0x160uLL);
  -[UIView _recordTraitUsage:insideMethod:withInvalidationAction:](self, (uint64_t)&v14[136], [(UIView *)self methodForSelector:a3], a4);
  _UITraitUsageTrackingResultDestroy((uint64_t)v14);
}

- (void)_registerAuxiliaryChildEnvironmentForTraitInvalidations:(id)a3
{
  id v4 = a3;
  traitChangeRegistrdouble y = self->_traitChangeRegistry;
  id v8 = v4;
  if (!traitChangeRegistry)
  {
    BOOL v6 = objc_alloc_init(_UITraitChangeRegistry);
    uint64_t v7 = self->_traitChangeRegistry;
    self->_traitChangeRegistrdouble y = v6;

    id v4 = v8;
    traitChangeRegistrdouble y = self->_traitChangeRegistry;
  }
  -[_UITraitChangeRegistry registerAuxiliaryChildEnvironmentForTraitInvalidations:]((uint64_t)traitChangeRegistry, v4);
}

- (void)_unregisterAuxiliaryChildEnvironmentForTraitInvalidations:(id)a3
{
}

- (void)_processDidChangeRecursivelyFromOldTraits:(id)a3 toCurrentTraits:(id)a4 forceNotification:(BOOL)a5
{
  id v5 = a3;
}

void __39__UIView__updateDynamicBackgroundColor__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setNSIntegerValue:2 forTrait:v3];
}

uint64_t __29__UIView___undimmedTintColor__block_invoke(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _accessibilityHigherContrastTintColorForColor:a2];
}

- (void)_endOcclusion:(id)a3
{
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  unsigned __int16 tintAdjustmentDimmingCount = self->_tintAdjustmentDimmingCount;
  if (has_internal_diagnostics)
  {
    if (self->_tintAdjustmentDimmingCount) {
      goto LABEL_3;
    }
    id v8 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)CGAffineTransform buf = 0;
      _os_log_fault_impl(&dword_1853B0000, v8, OS_LOG_TYPE_FAULT, "UIKit Internal bug: Unbalanced call to _endOcclusion, please file a feedback report with any information you have that helps reproduce this bug!", buf, 2u);
    }
  }
  else
  {
    if (self->_tintAdjustmentDimmingCount) {
      goto LABEL_3;
    }
    uint64_t v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_endOcclusion____s_category) + 8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "UIKit Internal bug: Unbalanced call to _endOcclusion, please file a feedback report with any information you have that helps reproduce this bug!", v10, 2u);
    }
  }
  unsigned __int16 tintAdjustmentDimmingCount = self->_tintAdjustmentDimmingCount;
  if (tintAdjustmentDimmingCount)
  {
LABEL_3:
    unsigned __int16 v6 = tintAdjustmentDimmingCount - 1;
    self->_unsigned __int16 tintAdjustmentDimmingCount = v6;
    if (v6) {
      return;
    }
  }
  if ((*((void *)&self->_viewFlags + 1) & 0x1800000000) == 0
    && [(UIView *)self tintAdjustmentMode] != UIViewTintAdjustmentModeDimmed)
  {
    -[UIView _dispatchTintColorVisitorWithReasons:](self, 2);
    uint64_t v7 = +[_UIHDRUsageCoordinator sharedInstance]();
    -[_UIHDRUsageCoordinator enableHDRSuppression:inViewHierarchy:]((uint64_t)v7, 0, self);
  }
}

- (double)_textButtonMargin
{
  if (dyld_program_sdk_at_least())
  {
    id v3 = [(UIView *)self _viewControllerForAncestor];
    id v4 = v3;
    if (v3)
    {
      [v3 _contentMarginForView:self];
      double v6 = v5;
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
        uint64_t v7 = [(UIView *)self traitCollection];
        if ([v7 horizontalSizeClass] == 1)
        {
          [(UIView *)self bounds];
          double v9 = v8;

          if (v9 <= 320.0) {
            double v6 = v6 + -8.0;
          }
        }
        else
        {
        }
      }
    }
    else
    {
      double v6 = 0.0;
    }
  }
  else
  {
    uint64_t v10 = [(UIView *)self traitCollection];
    +[UIViewController _slimHorizontalContentMarginForTraitCollection:v10];
    double v6 = v11;

    [(UIView *)self bounds];
    if (v12 < 480.0) {
      return v6 + -8.0;
    }
  }
  return v6;
}

- (void)_setDrawsAsBackdropOverlay:(BOOL)a3
{
}

- (void)_setSafeMaskView:(void *)a1
{
  id v3 = a2;
  if (a1)
  {
    if (dyld_program_sdk_at_least()) {
      [a1 setMaskView:v3];
    }
    else {
      [a1 _setMaskView:v3];
    }
  }
}

- (id)_cornerCurve
{
  id v2 = [(UIView *)self layer];
  id v3 = [v2 cornerCurve];

  return v3;
}

- (double)_cornerRadius
{
  id v2 = [(UIView *)self layer];
  [v2 cornerRadius];
  double v4 = v3;

  return v4;
}

- (int64_t)_backdropMaskViewFlags
{
  *((void *)&v2 + 1) = *((unsigned int *)&self->_viewFlags + 4);
  *(void *)&long long v2 = *((void *)&self->_viewFlags + 1);
  return (v2 >> 25) & 0x1F;
}

- (void)_setBackdropMaskViewFlags:(int64_t)a3
{
  *((void *)&self->_viewFlags + 1) = *((void *)&self->_viewFlags + 1) & 0xFFFFFFFFC1FFFFFFLL | ((unint64_t)(a3 & 0x1F) << 25);
}

- (UIView)_backdropMaskViewForGrayscaleTint
{
  return (UIView *)objc_getAssociatedObject(self, &unk_1EB25C0A5);
}

- (UIView)_backdropMaskViewForColorTint
{
  return (UIView *)objc_getAssociatedObject(self, &unk_1EB25C0A6);
}

- (id)_backdropMaskViewForColorBurnTint
{
  if (a1)
  {
    a1 = objc_getAssociatedObject(a1, &unk_1EB25C0A7);
    uint64_t v1 = vars8;
  }
  return a1;
}

- (id)_backdropMaskViewForDarkeningTint
{
  if (a1)
  {
    a1 = objc_getAssociatedObject(a1, &unk_1EB25C0A8);
    uint64_t v1 = vars8;
  }
  return a1;
}

- (UIView)_backdropMaskViewForFilters
{
  return (UIView *)objc_getAssociatedObject(self, &unk_1EB25C0A9);
}

- (NSArray)_backdropMaskViews
{
  double v3 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:3];
  double v4 = [(UIView *)self _backdropMaskViewForGrayscaleTint];
  double v5 = [(UIView *)self _backdropMaskViewForColorTint];
  double v6 = [(UIView *)self _backdropMaskViewForFilters];
  if (v4) {
    [v3 addObject:v4];
  }
  if (v5) {
    [v3 addObject:v5];
  }
  if (v6) {
    [v3 addObject:v6];
  }

  return (NSArray *)v3;
}

- (id)_generateBackdropMaskImage
{
  [(UIView *)self bounds];
  if (v3 <= 0.0 || ([(UIView *)self bounds], v4 <= 0.0))
  {
    double v16 = 0;
  }
  else
  {
    [(UIView *)self alpha];
    double v6 = v5;
    [(UIView *)self setAlpha:1.0];
    [(UIView *)self bounds];
    CGFloat v8 = v7;
    CGFloat v10 = v9;
    int v11 = [(UIView *)self isOpaque];
    double v12 = +[UIScreen mainScreen];
    [v12 scale];
    _UIGraphicsBeginImageContextWithOptions(v11, 0, v8, v10, v13);

    ContextStacuint64_t k = GetContextStack(0);
    if (*(int *)ContextStack < 1) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
    }
    uint64_t v17 = [(UIView *)self layer];
    [v17 renderInContext:v15];

    double v16 = _UIGraphicsGetImageFromCurrentImageContext(0);
    UIGraphicsEndImageContext();
    [(UIView *)self setAlpha:v6];
  }
  return v16;
}

- (id)_generateBackdropMaskViewForFlag:(int64_t)a3
{
  if ([(UIView *)self isHidden]
    || ([(UIView *)self _backdropMaskViewFlags] & a3) == 0)
  {
    CGFloat v8 = 0;
  }
  else
  {
    if ([(UIView *)self isMemberOfClass:objc_opt_class()]
      && ([(UIView *)self subviews],
          double v5 = objc_claimAutoreleasedReturnValue(),
          uint64_t v6 = [v5 count],
          v5,
          !v6))
    {
      double v9 = [UIView alloc];
      [(UIView *)self frame];
      CGFloat v8 = -[UIView initWithFrame:](v9, "initWithFrame:");
      double v7 = +[UIColor blackColor];
      [(UIImageView *)v8 setBackgroundColor:v7];
    }
    else
    {
      double v7 = [(UIView *)self _generateBackdropMaskImage];
      if (v7)
      {
        CGFloat v8 = [[UIImageView alloc] initWithImage:v7];
        [(UIImageView *)v8 setContentMode:[(UIView *)self contentMode]];
        [(UIView *)self frame];
        -[UIImageView setFrame:](v8, "setFrame:");
      }
      else
      {
        CGFloat v8 = 0;
      }
    }

    CGFloat v10 = [(UIView *)self layer];
    [v10 cornerRadius];
    double v12 = v11;
    double v13 = [(UIView *)v8 layer];
    [v13 setCornerRadius:v12];
  }
  [(UIView *)self _setBackdropMaskView:v8 forFlag:a3];
  return v8;
}

- (void)_setBackdropMaskView:(id)a3 forFlag:(int64_t)a4
{
  id value = a3;
  switch(a4)
  {
    case 1:
      if (self)
      {
        uint64_t v6 = &unk_1EB25C0A5;
        goto LABEL_13;
      }
      break;
    case 2:
      if (self)
      {
        uint64_t v6 = &unk_1EB25C0A6;
        goto LABEL_13;
      }
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 4:
      if (self)
      {
        uint64_t v6 = &unk_1EB25C0A9;
        goto LABEL_13;
      }
      break;
    case 8:
      if (self)
      {
        uint64_t v6 = &unk_1EB25C0A7;
        goto LABEL_13;
      }
      break;
    default:
      if (a4 == 16 && self)
      {
        uint64_t v6 = &unk_1EB25C0A8;
LABEL_13:
        objc_setAssociatedObject(self, v6, value, (void *)1);
      }
      break;
  }
  if ([(UIView *)self isHidden])
  {
    char v7 = 0;
LABEL_18:
    *((void *)&self->_viewFlags + 1) = *((void *)&self->_viewFlags + 1) & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)(v7 & 1) << 24);
    goto LABEL_19;
  }
  if (value)
  {
    char v7 = 1;
    goto LABEL_18;
  }
  CGFloat v8 = [(UIView *)self _backdropMaskViewForGrayscaleTint];
  if (v8)
  {
    *((void *)&self->_viewFlags + 1) |= 0x1000000uLL;
  }
  else
  {
    double v9 = [(UIView *)self _backdropMaskViewForColorTint];
    if (v9)
    {
      *((void *)&self->_viewFlags + 1) |= 0x1000000uLL;
    }
    else
    {
      CGFloat v10 = -[UIView _backdropMaskViewForColorBurnTint](self);
      if (v10)
      {
        *((void *)&self->_viewFlags + 1) |= 0x1000000uLL;
      }
      else
      {
        double v11 = -[UIView _backdropMaskViewForDarkeningTint](self);
        if (v11)
        {
          *((void *)&self->_viewFlags + 1) |= 0x1000000uLL;
        }
        else
        {
          double v12 = [(UIView *)self _backdropMaskViewForFilters];
          *((void *)&self->_viewFlags + 1) = *((void *)&self->_viewFlags + 1) & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)(v12 != 0) << 24);
        }
      }
    }
  }

LABEL_19:
}

- (id)_backdropMaskViewForFlag:(int64_t)a3
{
  double v4 = 0;
  switch(a3)
  {
    case 1:
      double v4 = [(UIView *)self _backdropMaskViewForGrayscaleTint];
      break;
    case 2:
      double v4 = [(UIView *)self _backdropMaskViewForColorTint];
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 4:
      double v4 = [(UIView *)self _backdropMaskViewForFilters];
      break;
    case 8:
      double v4 = -[UIView _backdropMaskViewForColorBurnTint](self);
      break;
    default:
      if (a3 == 16)
      {
        double v4 = -[UIView _backdropMaskViewForDarkeningTint](self);
      }
      break;
  }
  return v4;
}

- (void)_removeBackdropMaskViews
{
  double v3 = [(UIView *)self _backdropMaskViewForGrayscaleTint];
  [v3 removeFromSuperview];

  double v4 = [(UIView *)self _backdropMaskViewForColorTint];
  [v4 removeFromSuperview];

  double v5 = -[UIView _backdropMaskViewForColorBurnTint](self);
  [v5 removeFromSuperview];

  uint64_t v6 = -[UIView _backdropMaskViewForDarkeningTint](self);
  [v6 removeFromSuperview];

  id v7 = [(UIView *)self _backdropMaskViewForFilters];
  [v7 removeFromSuperview];
}

- (id)_anyBackdropMaskView
{
  long long v2 = [a1 _backdropMaskViewForGrayscaleTint];
  double v3 = v2;
  if (v2)
  {
    id v4 = v2;
  }
  else
  {
    double v5 = [a1 _backdropMaskViewForColorTint];
    uint64_t v6 = v5;
    if (v5)
    {
      id v7 = v5;
    }
    else
    {
      id v7 = [a1 _backdropMaskViewForFilters];
    }
    id v4 = v7;
  }
  return v4;
}

- (void)_setFrameForBackdropMaskViews:(double)a3 convertFrame:(double)a4
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v11 = [a1 superview];
      if (v11)
      {
        double v12 = (void *)v11;
        double v13 = -[UIView _anyBackdropMaskView](a1);
        long long v14 = [v13 superview];

        if (v14)
        {
          uint64_t v15 = [a1 superview];
          double v16 = -[UIView _anyBackdropMaskView](a1);
          uint64_t v17 = [v16 superview];
          objc_msgSend(v15, "convertRect:toView:", v17, a3, a4, a5, a6);
          a3 = v18;
          a4 = v19;
          a5 = v20;
          a6 = v21;
        }
      }
    }
    char v22 = [a1 _backdropMaskViewForGrayscaleTint];
    objc_msgSend(v22, "setFrame:", a3, a4, a5, a6);

    id v23 = [a1 _backdropMaskViewForColorTint];
    objc_msgSend(v23, "setFrame:", a3, a4, a5, a6);

    long long v24 = -[UIView _backdropMaskViewForColorBurnTint](a1);
    objc_msgSend(v24, "setFrame:", a3, a4, a5, a6);

    uint64_t v25 = -[UIView _backdropMaskViewForDarkeningTint](a1);
    objc_msgSend(v25, "setFrame:", a3, a4, a5, a6);

    id v26 = [a1 _backdropMaskViewForFilters];
    objc_msgSend(v26, "setFrame:", a3, a4, a5, a6);
  }
}

+ (void)_updateOrientationForMotionEngine:(int64_t)a3
{
}

- (void)setMotionEffects:(NSArray *)motionEffects
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v4 = motionEffects;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  double v5 = [(UIView *)self motionEffects];
  uint64_t v6 = (void *)[v5 copy];

  uint64_t v7 = [v6 countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v21;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v6);
        }
        [(UIView *)self removeMotionEffect:*(void *)(*((void *)&v20 + 1) + 8 * v10++)];
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v20 objects:v25 count:16];
    }
    while (v8);
  }

  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v11 = v4;
  uint64_t v12 = [(NSArray *)v11 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v17;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v17 != v14) {
          objc_enumerationMutation(v11);
        }
        -[UIView addMotionEffect:](self, "addMotionEffect:", *(void *)(*((void *)&v16 + 1) + 8 * v15++), (void)v16);
      }
      while (v13 != v15);
      uint64_t v13 = [(NSArray *)v11 countByEnumeratingWithState:&v16 objects:v24 count:16];
    }
    while (v13);
  }
}

- (BOOL)_motionEffectsAreSuspended
{
  return [(id)_motionEffectEngine _motionEffectsAreSuspendedForView:self];
}

uint64_t __51__UIView__recursivelyConsiderResumingMotionEffects__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (([v2 isHidden] & 1) != 0 || (objc_msgSend(v2, "alpha"), v3 < 0.01))
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (v2) {
      [(id)_motionEffectEngine endSuspendingMotionEffectsForView:v2];
    }
    uint64_t v4 = 1;
  }

  return v4;
}

+ (void)_setShouldEnableUIKitParallaxEffects:(BOOL)a3
{
  byte_1EB25C0AA = a3;
}

- (double)_convertVisualAltitude:(double)a3 fromView:(id)a4
{
  return _convertVisualAltitudeFromViewToView(a4, self, a3);
}

- (double)_convertVisualAltitude:(double)a3 toView:(id)a4
{
  return _convertVisualAltitudeFromViewToView(self, a4, a3);
}

- (CGRect)_responderSelectionRectForWindow:(id)a3
{
  id v4 = a3;
  [(UIView *)self bounds];
  -[UIView convertRect:toView:](self, "convertRect:toView:", v4);
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;

  double v13 = v6;
  double v14 = v8;
  double v15 = v10;
  double v16 = v12;
  result.size.double height = v16;
  result.size.double width = v15;
  result.origin.double y = v14;
  result.origin.double x = v13;
  return result;
}

- (CGRect)_responderExternalTouchRectForWindow:(id)a3
{
  if (a3) {
    [a3 frame];
  }
  else {
    [(UIView *)self bounds];
  }
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

- (double)_convertRect:(double)a3 toViewInSameWindow:(double)a4
{
  double v11 = a2;
  double v12 = v11;
  if (a1)
  {
    if (!v11)
    {
      long long v19 = [MEMORY[0x1E4F28B00] currentHandler];
      [v19 handleFailureInMethod:sel__convertRect_toViewInSameWindow_, a1, @"UIView.m", 9536, @"Invalid parameter not satisfying: %@", @"view != nil" object file lineNumber description];
    }
    double v13 = *(void **)(a1 + 160);
    uint64_t v14 = v12[20];
    id v15 = v13;
    objc_msgSend(v15, "convertRect:toLayer:", v14, a3, a4, a5, a6);
    double v17 = v16;
  }
  else
  {
    double v17 = 0.0;
  }

  return v17;
}

void __84__UIView__synchronizeAutoLayoutWithCALayoutIfNecessaryForOldBounds_updateSuperview___block_invoke()
{
  _UIMainBundleIdentifier();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EB25C0AD = [v0 isEqualToString:@"com.dexcom.CLARITYReports"];
}

void __51__UIView__reestablishConstraintsForTransformChange__block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v16 + 1) + 8 * v6++) _removeFromEngine:*(void *)(a1 + 40)];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v4);
  }

  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * v11++), "_addToEngine:", *(void *)(a1 + 40), (void)v12);
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
    }
    while (v9);
  }
}

- (void)_setTransform3D:(CATransform3D *)a3
{
  long long v3 = *(_OWORD *)&a3->m33;
  void v7[4] = *(_OWORD *)&a3->m31;
  v7[5] = v3;
  long long v4 = *(_OWORD *)&a3->m43;
  v7[6] = *(_OWORD *)&a3->m41;
  v7[7] = v4;
  long long v5 = *(_OWORD *)&a3->m13;
  v7[0] = *(_OWORD *)&a3->m11;
  v7[1] = v5;
  long long v6 = *(_OWORD *)&a3->m23;
  void v7[2] = *(_OWORD *)&a3->m21;
  _OWORD v7[3] = v6;
  [(UIView *)self setTransform3D:v7];
}

- (void)_setShouldNotifyGeometryObserversForBaselineChanges:(BOOL)a3
{
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFFFFFE | a3;
}

- (UIEdgeInsets)_morphInsets
{
  id v2 = objc_getAssociatedObject(self, &_UIViewMorphInsetsKey);
  long long v3 = v2;
  if (v2)
  {
    [v2 UIEdgeInsetsValue];
    double v5 = v4;
    double v7 = v6;
    double v9 = v8;
    double v11 = v10;
  }
  else
  {
    double v5 = 0.0;
    double v7 = 0.0;
    double v9 = 0.0;
    double v11 = 0.0;
  }

  double v12 = v5;
  double v13 = v7;
  double v14 = v9;
  double v15 = v11;
  result.double right = v15;
  result.double bottom = v14;
  result.double left = v13;
  result.double top = v12;
  return result;
}

- (void)_setMorphInsets:(UIEdgeInsets)a3
{
  UIEdgeInsets v5 = a3;
  double v4 = [MEMORY[0x1E4F29238] valueWithBytes:&v5 objCType:"{UIEdgeInsets=dddd}"];
  objc_setAssociatedObject(self, &_UIViewMorphInsetsKey, v4, (void *)1);
}

- (UIEdgeInsets)_cropInsets
{
  id v2 = objc_getAssociatedObject(self, &_UIViewCropInsetsKey);
  long long v3 = v2;
  if (v2)
  {
    [v2 UIEdgeInsetsValue];
    double v5 = v4;
    double v7 = v6;
    double v9 = v8;
    double v11 = v10;
  }
  else
  {
    double v5 = 0.0;
    double v7 = 0.0;
    double v9 = 0.0;
    double v11 = 0.0;
  }

  double v12 = v5;
  double v13 = v7;
  double v14 = v9;
  double v15 = v11;
  result.double right = v15;
  result.double bottom = v14;
  result.double left = v13;
  result.double top = v12;
  return result;
}

- (void)_setCropInsets:(UIEdgeInsets)a3
{
  UIEdgeInsets v5 = a3;
  double v4 = [MEMORY[0x1E4F29238] valueWithBytes:&v5 objCType:"{UIEdgeInsets=dddd}"];
  objc_setAssociatedObject(self, &_UIViewCropInsetsKey, v4, (void *)1);
}

- (UIView)_overrideReparentingContainer
{
  return (UIView *)objc_getAssociatedObject(self, &_UIOverrideReparentingContainerKey);
}

- (void)_setOverrideReparentingContainer:(id)a3
{
}

- (NSString)_matchedViewIdentifier
{
  return (NSString *)objc_getAssociatedObject(self, &_UIMatchedViewIdentifierKey);
}

- (void)_setMatchedViewIdentifier:(id)a3
{
}

- (CACornerRadii)_intersectedSceneCornerRadii
{
  UIEdgeInsets v5 = (CGSize *)MEMORY[0x1E4F39AE0];
  CGSize v6 = *(CGSize *)(MEMORY[0x1E4F39AE0] + 16);
  retstr->minXCGFloat MaxY = (CGSize)*MEMORY[0x1E4F39AE0];
  retstr->maxXCGFloat MaxY = v6;
  CGSize v7 = v5[3];
  retstr->maxXdouble MinY = v5[2];
  retstr->minXdouble MinY = v7;
  double v8 = [(UIView *)self window];
  id v61 = [v8 windowScene];

  double v9 = v61;
  if (v61)
  {
    double v10 = [v61 _effectiveSettings];
    double v11 = [v10 cornerRadiusConfiguration];
    double v12 = [v61 coordinateSpace];
    [v12 bounds];
    double v14 = v13;
    double v16 = v15;
    double v18 = v17;
    double v20 = v19;

    [(UIView *)self bounds];
    double v22 = v21;
    double v24 = v23;
    double v26 = v25;
    double v28 = v27;
    [(UIView *)self _cropInsets];
    double v30 = v22 + v29;
    double v32 = v24 + v31;
    double v34 = v26 - (v29 + v33);
    double v36 = v28 - (v31 + v35);
    uint64_t v37 = [v61 coordinateSpace];
    -[UIView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", v37, v30, v32, v34, v36);
    CGFloat v39 = v38;
    CGFloat v41 = v40;
    CGFloat v43 = v42;
    CGFloat v45 = v44;

    v63.origin.double x = v39;
    v63.origin.double y = v41;
    v63.size.double width = v43;
    v63.size.double height = v45;
    if (v14 >= CGRectGetMinX(v63))
    {
      v64.origin.double x = v39;
      v64.origin.double y = v41;
      v64.size.double width = v43;
      v64.size.double height = v45;
      if (v14 <= CGRectGetMaxX(v64))
      {
        v65.origin.double x = v39;
        v65.origin.double y = v41;
        v65.size.double width = v43;
        v65.size.double height = v45;
        if (v16 >= CGRectGetMinY(v65))
        {
          v66.origin.double x = v39;
          v66.origin.double y = v41;
          v66.size.double width = v43;
          v66.size.double height = v45;
          if (v16 <= CGRectGetMaxY(v66))
          {
            [v11 topLeft];
            CGFloat v60 = v46;
            [v11 topLeft];
            retstr->minXMinY.double width = v60;
            retstr->minXMinY.double height = v47;
          }
        }
      }
    }
    double v48 = v16 + v20;
    double v49 = v14 + v18;
    v67.origin.double x = v39;
    v67.origin.double y = v41;
    v67.size.double width = v43;
    v67.size.double height = v45;
    if (v14 >= CGRectGetMinX(v67))
    {
      v68.origin.double x = v39;
      v68.origin.double y = v41;
      v68.size.double width = v43;
      v68.size.double height = v45;
      if (v14 <= CGRectGetMaxX(v68))
      {
        v69.origin.double x = v39;
        v69.origin.double y = v41;
        v69.size.double width = v43;
        v69.size.double height = v45;
        if (v48 >= CGRectGetMinY(v69))
        {
          v70.origin.double x = v39;
          v70.origin.double y = v41;
          v70.size.double width = v43;
          v70.size.double height = v45;
          if (v48 <= CGRectGetMaxY(v70))
          {
            [v11 bottomLeft];
            CGFloat v51 = v50;
            [v11 bottomLeft];
            retstr->minXMaxY.double width = v51;
            retstr->minXMaxY.double height = v52;
          }
        }
      }
    }
    v71.origin.double x = v39;
    v71.origin.double y = v41;
    v71.size.double width = v43;
    v71.size.double height = v45;
    if (v49 >= CGRectGetMinX(v71))
    {
      v72.origin.double x = v39;
      v72.origin.double y = v41;
      v72.size.double width = v43;
      v72.size.double height = v45;
      if (v49 <= CGRectGetMaxX(v72))
      {
        v73.origin.double x = v39;
        v73.origin.double y = v41;
        v73.size.double width = v43;
        v73.size.double height = v45;
        if (v48 >= CGRectGetMinY(v73))
        {
          v74.origin.double x = v39;
          v74.origin.double y = v41;
          v74.size.double width = v43;
          v74.size.double height = v45;
          if (v48 <= CGRectGetMaxY(v74))
          {
            [v11 bottomRight];
            CGFloat v54 = v53;
            [v11 bottomRight];
            retstr->maxXMaxY.double width = v54;
            retstr->maxXMaxY.double height = v55;
          }
        }
      }
    }
    v75.origin.double x = v39;
    v75.origin.double y = v41;
    v75.size.double width = v43;
    v75.size.double height = v45;
    if (v49 >= CGRectGetMinX(v75))
    {
      v76.origin.double x = v39;
      v76.origin.double y = v41;
      v76.size.double width = v43;
      v76.size.double height = v45;
      if (v49 <= CGRectGetMaxX(v76))
      {
        v77.origin.double x = v39;
        v77.origin.double y = v41;
        v77.size.double width = v43;
        v77.size.double height = v45;
        if (v16 >= CGRectGetMinY(v77))
        {
          v78.origin.double x = v39;
          v78.origin.double y = v41;
          v78.size.double width = v43;
          v78.size.double height = v45;
          if (v16 <= CGRectGetMaxY(v78))
          {
            [v11 topRight];
            CGFloat v57 = v56;
            [v11 topRight];
            retstr->maxXMinY.double width = v57;
            retstr->maxXMinY.double height = v58;
          }
        }
      }
    }

    double v9 = v61;
  }

  return result;
}

- (UIView)snapshotViewAfterScreenUpdates:(BOOL)afterUpdates
{
  BOOL v3 = afterUpdates;
  [(UIView *)self bounds];
  return -[UIView resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:](self, "resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:", v3);
}

- (UIView)resizableSnapshotViewFromRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates withCapInsets:(UIEdgeInsets)capInsets
{
  double right = capInsets.right;
  double bottom = capInsets.bottom;
  double left = capInsets.left;
  double top = capInsets.top;
  double height = rect.size.height;
  double width = rect.size.width;
  double y = rect.origin.y;
  double x = rect.origin.x;
  double v14 = _UISnapshotViewRectAfterCommit(self, afterUpdates, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
  double v15 = v14;
  if (left != 0.0 || top != 0.0 || right != 0.0 || bottom != 0.0) {
    objc_msgSend(v14, "_setContentStretchInPixels:forContentSize:shouldTile:", 0, x + left, y + top, width - (left + right), height - (top + bottom), width, height);
  }
  double v16 = NSString;
  double v17 = (objc_class *)objc_opt_class();
  double v18 = NSStringFromClass(v17);
  double v19 = [v16 stringWithFormat:@"Snapshot of <%@: %p>", v18, self];
  [v15 _setIdentifier:v19];

  return (UIView *)v15;
}

- (BOOL)drawViewHierarchyInRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates
{
  BOOL v4 = afterUpdates;
  double height = rect.size.height;
  double width = rect.size.width;
  double y = rect.origin.y;
  double x = rect.origin.x;
  v26[3] = *MEMORY[0x1E4F143B8];
  ContextStacuint64_t k = GetContextStack(0);
  if (*(int *)ContextStack < 1) {
    double v11 = 0;
  }
  else {
    double v11 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  }
  int Type = CGContextGetType();
  switch(Type)
  {
    case 10:
      ColorSpace = (CGColorSpace *)CGMetalContextGetColorSpace();
      if (ColorSpace) {
        goto LABEL_10;
      }
      break;
    case 8:
      ColorSpace = (CGColorSpace *)CGIOSurfaceContextGetColorSpace();
      if (ColorSpace) {
        goto LABEL_10;
      }
      break;
    case 4:
      ColorSpace = CGBitmapContextGetColorSpace(v11);
      if (!ColorSpace) {
        break;
      }
LABEL_10:
      uint64_t v14 = CGColorSpaceUsesExtendedRange(ColorSpace);
      goto LABEL_13;
    default:
      break;
  }
  uint64_t v14 = -1;
LABEL_13:
  v25[0] = @"dst-size";
  *(double *)double v24 = width;
  *(double *)&v24[1] = height;
  double v15 = [MEMORY[0x1E4F29238] valueWithBytes:v24 objCType:"{CGSize=dd}"];
  v26[0] = v15;
  v25[1] = @"dst-gamut";
  double v16 = [NSNumber numberWithInteger:v14];
  v26[1] = v16;
  v25[2] = @"dst-opaque";
  double v17 = NSNumber;
  uint64_t CurrentContextAuxInfo = GetCurrentContextAuxInfo(1);
  if (CurrentContextAuxInfo) {
    BOOL v19 = *(unsigned char *)(CurrentContextAuxInfo + 8) != 0;
  }
  else {
    BOOL v19 = 0;
  }
  double v20 = [v17 numberWithBool:v19];
  void v26[2] = v20;
  double v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v26 forKeys:v25 count:3];
  double v22 = _UIRenderViewImageAfterCommit(self, v21, v4);

  if (v22) {
    objc_msgSend(v22, "drawInRect:", x, y, width, height);
  }

  return v22 != 0;
}

- (id)resizableSnapshotFromRect:(CGRect)a3 withCapInsets:(UIEdgeInsets)a4
{
  return -[UIView resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:](self, "resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:", 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height, a4.top, a4.left, a4.bottom, a4.right);
}

- (BOOL)drawViewHierarchyInRect:(CGRect)a3
{
  return -[UIView drawViewHierarchyInRect:afterScreenUpdates:](self, "drawViewHierarchyInRect:afterScreenUpdates:", 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (id)snapshotView
{
  [(UIView *)self bounds];
  return -[UIView resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:](self, "resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:", 0);
}

- (id)resizableSnapshotViewFromRect:(CGRect)a3 withCapInsets:(UIEdgeInsets)a4
{
  return -[UIView resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:](self, "resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:", 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height, a4.top, a4.left, a4.bottom, a4.right);
}

- (BOOL)_isContainedInHostedFocusSystem
{
  return 0;
}

- (BOOL)canBecomeFocused
{
  if (!_AXSFullKeyboardAccessEnabled()
    || ![self isAccessibilityElement])
  {
    return 0;
  }
  return [self accessibilityRespondsToUserInteraction];
}

- (BOOL)_isFocusedOrAncestorOfFocusedView
{
  id v2 = self;
  BOOL v3 = [(UIView *)self _focusSystem];
  LOBYTE(v2) = [v3 _focusedItemIsContainedInEnvironment:v2 includeSelf:1];

  return (char)v2;
}

- (unint64_t)_countOfFocusedAncestorTrackingViewsInSubtree
{
  return self->_countOfFocusedAncestorTrackingViewsInSubtree;
}

- (void)_setCountOfFocusedAncestorTrackingViewsInSubtree:(unint64_t)a3
{
  self->_countOfFocusedAncestorTrackingViewsInSubtree = a3;
}

- (BOOL)_tracksFocusedAncestors
{
  return ((unint64_t)*((unsigned int *)&self->_viewFlags + 4) >> 12) & 1;
}

- (void)_setTracksFocusedAncestors:(BOOL)a3
{
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  uint64_t v5 = *((void *)&self->_viewFlags + 1);
  int v6 = *((_DWORD *)&self->_viewFlags + 4);
  if (a3)
  {
    if ((v6 & 0x1000) != 0) {
      return;
    }
    *(void *)&self->_uint64_t viewFlags = viewFlags;
    *((void *)&self->_viewFlags + 1) = v5;
    *((_DWORD *)&self->_viewFlags + 4) = v6 | 0x1000;
    if (_setTracksFocusedAncestors__installVisitorOnceToken != -1) {
      dispatch_once(&_setTracksFocusedAncestors__installVisitorOnceToken, &__block_literal_global_1225);
    }
    uint64_t v7 = 1;
  }
  else
  {
    if ((v6 & 0x1000) == 0) {
      return;
    }
    *(void *)&self->_uint64_t viewFlags = viewFlags;
    *((void *)&self->_viewFlags + 1) = v5;
    *((_DWORD *)&self->_viewFlags + 4) = v6 & 0xFFFFEFFF;
    uint64_t v7 = -1;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __49__UIView__dispatchTrackingFocusVisitorWithDelta___block_invoke;
  aBlock[3] = &__block_descriptor_40_e16_B16__0__UIView_8l;
  aBlock[4] = v7;
  double v8 = _Block_copy(aBlock);
  double v9 = [[_UIViewBlockVisitor alloc] initWithTraversalDirection:1 visitorBlock:v8];
  [(UIView *)self _receiveVisitor:v9];
}

void __37__UIView__setTracksFocusedAncestors___block_invoke()
{
  id v0 = [(_UIViewVisitor *)[_UIFocusTrackingVisitor alloc] initWithTraversalDirection:1];
  +[UIView _addHierarchyTrackingVisitor:v0];
}

uint64_t __49__UIView__dispatchTrackingFocusVisitorWithDelta___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_msgSend(v3, "_setCountOfFocusedAncestorTrackingViewsInSubtree:", *(void *)(a1 + 32) + objc_msgSend(v3, "_countOfFocusedAncestorTrackingViewsInSubtree"));

  return 1;
}

- (BOOL)_allowsFocusToLeaveViaHeading:(unint64_t)a3
{
  return 1;
}

- (uint64_t)_containsPreferredFocusableView
{
  BOOL v1 = (BOOL)a1;
  if (a1)
  {
    if (_UIFocusItemIsFocusedOrFocusable(a1))
    {
      return 1;
    }
    else
    {
      id v2 = [(id)v1 _window];

      if (v2)
      {
        id v3 = [[_UIFocusUpdateRequest alloc] initWithEnvironment:v1];
        [(_UIFocusUpdateRequest *)v3 setAllowsOverridingPreferedFocusEnvironments:0];
        id v4 = [[UIFocusUpdateContext alloc] _initWithFocusUpdateRequest:v3];
        uint64_t v5 = [v4 nextFocusedView];
        BOOL v1 = v5 != 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return v1;
}

- (BOOL)_hasFocusableContents
{
  BOOL v1 = (BOOL)a1;
  if (a1)
  {
    id v2 = [a1 _focusSystem];
    if (v2)
    {
      if (_UIFocusItemIsFocusedOrFocusableInFocusSystem((void *)v1, v2))
      {
        BOOL v1 = 1;
      }
      else
      {
        id v3 = [[_UIFocusMap alloc] initWithFocusSystem:v2 rootEnvironment:v1];
        id v4 = [(_UIFocusMap *)v3 _allFocusableItemsInEnvironment:v1];
        BOOL v1 = [v4 count] != 0;
      }
    }
    else
    {
      BOOL v1 = 0;
    }
  }
  return v1;
}

- (unint64_t)_focusSpeedBumpEdges
{
  unint64_t result = 0;
  unint64_t v6 = 0;
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x10000) != 0)
  {
    id v4 = objc_getAssociatedObject(self, &_UIFocusEngineSpeedBumpKey);
    uint64_t v5 = v4;
    if (v4) {
      [v4 getValue:&v6];
    }

    return v6;
  }
  return result;
}

- (UIEdgeInsets)_focusableContentMargins
{
  long long v8 = 0u;
  long long v9 = 0u;
  double v2 = 0.0;
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x20000) != 0)
  {
    unint64_t v6 = objc_getAssociatedObject(self, &_UIViewFocusableContentMarginsAssocObjectKey);
    uint64_t v7 = v6;
    if (v6) {
      [v6 getValue:&v8];
    }

    double v4 = *((double *)&v8 + 1);
    double v5 = *(double *)&v8;
    double v2 = *((double *)&v9 + 1);
    double v3 = *(double *)&v9;
  }
  result.double right = v2;
  result.double bottom = v3;
  result.double left = v4;
  result.double top = v5;
  return result;
}

- (void)_setFocusableContentMargins:(UIEdgeInsets)a3
{
  BOOL v4 = a3.left == 0.0;
  if (a3.top != 0.0) {
    BOOL v4 = 0;
  }
  if (a3.right != 0.0) {
    BOOL v4 = 0;
  }
  if (a3.bottom != 0.0) {
    BOOL v4 = 0;
  }
  uint64_t v5 = *((void *)&self->_viewFlags + 1);
  int v6 = *((_DWORD *)&self->_viewFlags + 4);
  if ((v6 & 0x20000) != 0 || !v4)
  {
    unsigned int v7 = v6 & 0xFFFDFFFF;
    if (v4) {
      int v8 = 0;
    }
    else {
      int v8 = 0x20000;
    }
    *(void *)&self->_uint64_t viewFlags = self->_viewFlags;
    *((void *)&self->_viewFlags + 1) = v5;
    *((_DWORD *)&self->_viewFlags + 4) = v7 | v8;
    if (v4)
    {
      long long v9 = 0;
    }
    else
    {
      UIEdgeInsets v10 = a3;
      long long v9 = [MEMORY[0x1E4F29238] valueWithBytes:&v10 objCType:"{UIEdgeInsets=dddd}"];
    }
    objc_setAssociatedObject(self, &_UIViewFocusableContentMarginsAssocObjectKey, v9, (void *)1);
  }
}

- (BOOL)_isFocusDirectionFlippedHorizontally
{
  return 0;
}

- (id)focusGuides
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x8000) != 0)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v5 = [(UIView *)self _mutableLayoutGuides];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v15;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v14 + 1) + 8 * v9);
          if (qword_1EB25C2D8 != -1) {
            dispatch_once(&qword_1EB25C2D8, &__block_literal_global_3684);
          }
          if (objc_opt_isKindOfClass()) {
            [v4 addObject:v10];
          }
          ++v9;
        }
        while (v7 != v9);
        uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v7);
    }

    double v2 = (void *)[v4 copy];
    *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFF7FFF | (([v2 count] != 0) << 15);
  }
  else
  {
    double v2 = 0;
  }
  if (v2) {
    double v11 = v2;
  }
  else {
    double v11 = (void *)MEMORY[0x1E4F1CBF0];
  }
  id v12 = v11;

  return v12;
}

- (id)_currentFocusAnimationCoordinator
{
  double v2 = [(UIView *)self _focusSystemSceneComponent];
  double v3 = [v2 focusAnimationCoordinatorManager];
  id v4 = [v3 activeFocusAnimationCoordinator];

  return v4;
}

- (id)_preferredConfigurationForFocusAnimation:(int64_t)a3 inContext:(id)a4
{
  return +[_UIFocusAnimationConfiguration configurationWithStyle:](_UIFocusAnimationConfiguration, "configurationWithStyle:", 0, a4);
}

- (double)_preferredDurationForFocusAnimation:(int64_t)a3 inContext:(id)a4
{
  return 0.0;
}

- (double)_preferredDurationScaleFactorForFocusAnimation:(int64_t)a3 inContext:(id)a4
{
  return 0.0;
}

- (int64_t)_focusTouchSensitivityStyle
{
  return 0;
}

- (BOOL)_tvAllowsFocusInChildrenWhenFocused
{
  return 0;
}

- (BOOL)_tvAddsChildFocusItemsBeforeSelf
{
  return 0;
}

- (BOOL)_tvAddsChildFocusItemsButNotSelf
{
  return 0;
}

- (UIView)preferredFocusedView
{
  if ((*(_DWORD *)&self->_viewFlags & 0x80000000) != 0
    && ([(UIView *)self _focusBehavior],
        double v3 = objc_claimAutoreleasedReturnValue(),
        int v4 = [v3 includesContentScrollViewInPreferredFocusEnvironments],
        v3,
        v4))
  {
    uint64_t v5 = self->_viewDelegate;
    uint64_t v6 = [(UIViewController *)v5 _contentScrollView];
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = self;
  }
  uint64_t v8 = v7;

  return v8;
}

- (NSArray)preferredFocusEnvironments
{
  v7[1] = *MEMORY[0x1E4F143B8];
  __UIFocusEnvironmentPreferredFocusedView(self, 0);
  double v3 = (UIView *)objc_claimAutoreleasedReturnValue();
  int v4 = v3;
  uint64_t v5 = (void *)MEMORY[0x1E4F1CBF0];
  if (v3 && v3 != self)
  {
    v7[0] = v3;
    uint64_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];
  }

  return (NSArray *)v5;
}

- (BOOL)shouldUpdateFocusInContext:(id)a3
{
  return 1;
}

- (void)_didUpdateFocusInContext:(id)a3
{
  id v7 = a3;
  uint64_t v5 = +[_UIFocusAnimationCoordinatorManager animationCoordinatorForContext:](_UIFocusAnimationCoordinatorManager, "animationCoordinatorForContext:");
  if (!v5)
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    [v6 handleFailureInMethod:a2 object:self file:@"UIView.m" lineNumber:10729 description:@"Received call to _didUpdateFocusInContext: outside of a focus update."];
  }
  [(UIView *)self didUpdateFocusInContext:v7 withAnimationCoordinator:v5];
}

- (void)_setNeedsNonDeferredFocusUpdate
{
  int v4 = [[_UIFocusUpdateRequest alloc] initWithEnvironment:self];
  [(_UIFocusUpdateRequest *)v4 setAllowsDeferral:0];
  double v3 = [(UIView *)self _focusSystem];
  [v3 _requestFocusUpdate:v4];
}

- (BOOL)_isEligibleForFocusOcclusion
{
  double v3 = [(UIView *)self _focusBehavior];
  int v4 = [v3 supportsViewTransparency];

  if (v4)
  {
    if ([(UIView *)self isHidden]
      || ![(UIView *)self _isEligibleForFocusGivenAlpha])
    {
      return 0;
    }
    uint64_t v5 = [(UIView *)self _window];
    BOOL v6 = v5 != 0;

    return v6;
  }
  else
  {
    return [(UIView *)self _isEligibleForFocusInteraction];
  }
}

- (CGRect)_clippingRectInCoordinateSpace:(id)a3
{
  id v4 = a3;
  if ([(UIView *)self clipsToBounds])
  {
    [(UIView *)self bounds];
    -[UIView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", v4);
    double v6 = v5;
    double v8 = v7;
    double v10 = v9;
    double v12 = v11;
  }
  else
  {
    double v6 = *MEMORY[0x1E4F1DB20];
    double v8 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v10 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v12 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }

  double v13 = v6;
  double v14 = v8;
  double v15 = v10;
  double v16 = v12;
  result.size.double height = v16;
  result.size.double width = v15;
  result.origin.double y = v14;
  result.origin.double x = v13;
  return result;
}

- (NSString)focusGroupIdentifier
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  p_uint64_t viewFlags = &self->_viewFlags;
  int v3 = (*((_DWORD *)&self->_viewFlags + 5) >> 23) & 3;
  if (v3 == 2)
  {
    id v4 = objc_getAssociatedObject(self, &FocusGroupIdentifierKey_0);
  }
  else
  {
    if (v3 != 1)
    {
      if (!v3)
      {
        id v4 = [(UIView *)self _systemDefaultFocusGroupIdentifier];
        goto LABEL_10;
      }
      if (os_variant_has_internal_diagnostics())
      {
        double v8 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        {
          int v9 = (*((_DWORD *)p_viewFlags + 5) >> 23) & 3;
          int v10 = 67109120;
          int v11 = v9;
          _os_log_fault_impl(&dword_1853B0000, v8, OS_LOG_TYPE_FAULT, "Unknown case for _viewFlags.hasFocusGroupIdentifier (%d).", (uint8_t *)&v10, 8u);
        }
      }
      else
      {
        double v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &focusGroupIdentifier___s_category_0) + 8);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          int v6 = (*((_DWORD *)p_viewFlags + 5) >> 23) & 3;
          int v10 = 67109120;
          int v11 = v6;
          _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "Unknown case for _viewFlags.hasFocusGroupIdentifier (%d).", (uint8_t *)&v10, 8u);
        }
      }
    }
    id v4 = 0;
  }
LABEL_10:
  return (NSString *)v4;
}

- (int64_t)_systemDefaultFocusGroupPriority
{
  return 0;
}

- (void)setFocusGroupPriority:(UIFocusGroupPriority)focusGroupPriority
{
  *(void *)((char *)&self->_viewFlags + 20) |= 0x2000000uLL;
  id v4 = [NSNumber numberWithInteger:focusGroupPriority];
  objc_setAssociatedObject(self, &FocusGroupPriorityKey, v4, (void *)1);

  id v6 = [(UIView *)self _focusSystem];
  double v5 = [v6 _focusMovementCache];
  [v5 focusGroupPriorityDidChange:self];
}

- (UIFocusGroupPriority)focusGroupPriority
{
  if ((*((unsigned char *)&self->_viewFlags + 23) & 2) == 0) {
    return 0;
  }
  int v3 = objc_getAssociatedObject(self, &FocusGroupPriorityKey);
  UIFocusGroupPriority v4 = [v3 integerValue];

  return v4;
}

- (CGRect)_focusRegionFrame
{
  [(UIView *)self _defaultFocusRegionFrame];
  double x = v30.origin.x;
  double y = v30.origin.y;
  double width = v30.size.width;
  double height = v30.size.height;
  if (CGRectIsNull(v30))
  {
    [(UIView *)self bounds];
    double x = v7;
    double y = v8;
    double width = v9;
    double height = v10;
  }
  int v11 = [(UIView *)self _window];
  -[UIView convertRect:toView:](self, "convertRect:toView:", v11, x, y, width, height);
  double v13 = v12;
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;

  [(UIView *)self _focusableContentMargins];
  double v21 = v15 + v20;
  double v24 = v17 - (v22 + v23);
  double v26 = v19 - (v20 + v25);
  double v27 = v13 + v22;
  double v28 = v21;
  double v29 = v24;
  result.size.double height = v26;
  result.size.double width = v29;
  result.origin.double y = v28;
  result.origin.double x = v27;
  return result;
}

- (id)_childFocusRegionsInRect:(CGRect)a3 inCoordinateSpace:(id)a4
{
  if (_UIViewShouldReturnSubviewsInFocusItemsInRect())
  {
    double v5 = (void *)MEMORY[0x1E4F1CBF0];
  }
  else
  {
    id v6 = [(UIView *)self _childFocusViews];
    double v5 = objc_msgSend(v6, "bs_map:", &__block_literal_global_1240_1);
  }
  return v5;
}

id __53__UIView__childFocusRegionsInRect_inCoordinateSpace___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  int v3 = [v2 focusItemContainer];
  UIFocusGroupPriority v4 = _UIFocusRegionContainerFromEnvironmentAndContainer((uint64_t)v2, (uint64_t)v3);

  return v4;
}

- (id)_childFocusViews
{
  if ((*(_DWORD *)&self->_viewFlags & 0x80000000) != 0)
  {
    int v3 = self->_viewDelegate;
    if ([(UIViewController *)v3 _shouldIgnoreChildFocusRegions])
    {
      UIFocusGroupPriority v4 = [(UIView *)self _focusBehavior];
      int v5 = [v4 supportsViewTransparency];

      if (!v5)
      {
        id v6 = (void *)MEMORY[0x1E4F1CBF0];
        goto LABEL_7;
      }
    }
    else
    {
    }
  }
  id v6 = [(UIView *)self _allSubviews];
LABEL_7:
  return v6;
}

- (BOOL)_isPromiseFocusRegion
{
  return 0;
}

- (BOOL)_isTransparentFocusRegion
{
  return 0;
}

- (BOOL)isTransparentFocusItem
{
  int v3 = [(UIView *)self _focusBehavior];
  UIFocusGroupPriority v4 = v3;
  if (v3 && ![v3 supportsViewTransparency]) {
    IsTransparentFocusIteuint64_t m = 0;
  }
  else {
    IsTransparentFocusIteuint64_t m = _UIViewIsTransparentFocusItem(self);
  }

  return IsTransparentFocusItem;
}

- (id)_focusGesturesForFailureRequirements
{
  id v2 = [(UIView *)self window];
  int v3 = [v2 _focusEventRecognizer];
  UIFocusGroupPriority v4 = [v3 gesturesForFailureRequirements];

  return v4;
}

- (id)focusItemsInRect:(CGRect)a3
{
  CGFloat height = a3.size.height;
  CGFloat width = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (_UIViewShouldReturnSubviewsInFocusItemsInRect())
  {
    double v8 = self;
    double v9 = [(UIView *)v8 _childFocusViews];
    double v10 = [(UIView *)v8 _focusBehavior];
    if ([v10 addsAccessibilityElementsToFocusEngine])
    {
      double v32 = v10;
      double v33 = v9;
      int v11 = v8;
      double v12 = [v11 accessibilityElements];
      double v13 = [MEMORY[0x1E4F1CA48] array];
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id v14 = v12;
      uint64_t v15 = [v14 countByEnumeratingWithState:&v34 objects:v38 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v35;
        do
        {
          for (uint64_t i = 0; i != v16; ++i)
          {
            if (*(void *)v35 != v17) {
              objc_enumerationMutation(v14);
            }
            double v19 = *(void **)(*((void *)&v34 + 1) + 8 * i);
            double v20 = _UIFocusItemSafeCast(v19);
            if (v20)
            {
              if ((_IsKindOfUIView((uint64_t)v19) & 1) == 0)
              {
                double v21 = [(UIView *)v11 focusItemContainer];
                double v22 = [v21 coordinateSpace];
                double v23 = _UIFocusItemFrameInCoordinateSpace(v20, v22);
                CGFloat v25 = v24;
                CGFloat v27 = v26;
                CGFloat v29 = v28;

                v41.origin.CGFloat x = x;
                v41.origin.CGFloat y = y;
                v41.size.CGFloat width = width;
                v41.size.CGFloat height = height;
                v42.origin.CGFloat x = v23;
                v42.origin.CGFloat y = v25;
                v42.size.CGFloat width = v27;
                v42.size.CGFloat height = v29;
                if (CGRectIntersectsRect(v41, v42)) {
                  [v13 addObject:v20];
                }
              }
            }
          }
          uint64_t v16 = [v14 countByEnumeratingWithState:&v34 objects:v38 count:16];
        }
        while (v16);
      }

      double v9 = v33;
      id v30 = [v33 arrayByAddingObjectsFromArray:v13];

      double v10 = v32;
    }
    else
    {
      id v30 = v9;
    }
  }
  else
  {
    id v30 = (id)MEMORY[0x1E4F1CBF0];
  }
  return v30;
}

- (BOOL)_isLazyFocusItemContainer
{
  return 0;
}

- (unint64_t)_focusGuideBehaviorForFocusMovement:(id)a3
{
  return 0;
}

- (CGRect)_focusRegionFrameInCoordinateSpace:(id)a3
{
  id v4 = a3;
  [(UIView *)self _defaultFocusRegionFrame];
  -[UIView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", v4);
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;

  if ((*((_DWORD *)&self->_viewFlags + 4) & 0x20000) != 0)
  {
    [(UIView *)self _focusableContentMargins];
    double v6 = v6 + v13;
    double v8 = v8 + v14;
    double v10 = v10 - (v13 + v15);
    double v12 = v12 - (v14 + v16);
  }
  double v17 = v6;
  double v18 = v8;
  double v19 = v10;
  double v20 = v12;
  result.size.CGFloat height = v20;
  result.size.CGFloat width = v19;
  result.origin.CGFloat y = v18;
  result.origin.CGFloat x = v17;
  return result;
}

- (BOOL)_shouldAlwaysDiagnoseFocusInteractionEligibility
{
  return 1;
}

- (void)_diagnoseFocusInteractionEligibilityForReport:(id)a3
{
}

- (void)_diagnoseFocusInteractionEligibilityForReport:(int)a3 checkAncestors:
{
  id v26 = a2;
  if (a1)
  {
    double v5 = [a1 _window];

    if (!v5)
    {
      double v6 = +[_UIDebugIssue issueWithDescription:@"This view is not contained in a window view hierarchy."];
      [v26 addIssue:v6];
    }
    if (([a1 isUserInteractionEnabled] & 1) == 0)
    {
      double v7 = +[_UIDebugIssue issueWithDescription:@"This view has isUserInteractionEnabled set to NO. Views must allow user interaction to be focusable."];
      [v26 addIssue:v7];
    }
    if (([a1 _isFocusInteractionEnabled] & 1) == 0)
    {
      double v8 = +[_UIDebugIssue issueWithDescription:@"This view has isFocusInteractionEnabled set to NO. Views must allow focus interaction to be focusable."];
      [v26 addIssue:v8];
    }
    [a1 alpha];
    if (fabs(v9) < 2.22044605e-16)
    {
      double v10 = +[_UIDebugIssue issueWithDescription:@"This view has an alpha value equal to 0. Views must be visible to be focusable."];
      [v26 addIssue:v10];
    }
    if ([a1 isHidden])
    {
      double v11 = +[_UIDebugIssue issueWithDescription:@"This view is hidden. Views must be visible to be focusable."];
      [v26 addIssue:v11];
    }
    if (a3)
    {
      double v12 = +[_UIDebugIssue issueWithDescription:@"One or more ancestors have issues that may be preventing this item from being focusable. Details:"];
      uint64_t v13 = [a1 superview];
      if (v13)
      {
        double v14 = (void *)v13;
        do
        {
          double v15 = NSString;
          id v16 = v14;
          double v17 = (objc_class *)objc_opt_class();
          double v18 = NSStringFromClass(v17);
          double v19 = [v15 stringWithFormat:@"<%@: %p>", v18, v16];

          double v20 = +[_UIDebugIssue issueWithFormat:@"%@:", v19];

          [v20 setPrefix:&stru_1ED0E84C0];
          if (([v16 _isEligibleForFocusInteraction] & 1) == 0) {
            -[UIView _diagnoseFocusInteractionEligibilityForReport:checkAncestors:](v16, v20, 0);
          }
          if ([v16 canBecomeFocused])
          {
            double v21 = +[_UIDebugIssue issueWithDescription:@"This view returns YES from -canBecomeFocused, which will prevent its subviews from being focusable."];
            [v20 addIssue:v21];
          }
          double v22 = [v20 subissues];
          uint64_t v23 = [v22 count];

          if (v23) {
            [v12 addIssue:v20];
          }

          double v14 = [v16 superview];
        }
        while (v14);
      }
      double v24 = [v12 subissues];
      uint64_t v25 = [v24 count];

      if (v25) {
        [v26 addIssue:v12];
      }
    }
  }
}

uint64_t __58__UIView__updateDirectionalConstraintsIfNeededWasFlipped___block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 < 0x13) & (0x60060u >> a3);
}

void __58__UIView__updateDirectionalConstraintsIfNeededWasFlipped___block_invoke_2(uint64_t a1, void *a2)
{
  id v4 = a2;
  if ([v4 hasBeenLowered])
  {
    if (*(void *)(a1 + 32))
    {
      objc_msgSend(v4, "_removeFromEngine:");
      [v4 _addToEngine:*(void *)(a1 + 32)];
    }
    else
    {
      int v3 = [v4 container];
      [v3 removeConstraint:v4];
      [v3 addConstraint:v4];
      [*(id *)(a1 + 40) setNeedsLayout];
    }
  }
}

- (id)_idleModeLayoutAttributes
{
  return objc_getAssociatedObject(self, sel__idleModeLayoutAttributes);
}

- (UIStoryboardPreviewingSegueTemplateStorage)_previewingSegueTemplateStorage
{
  return (UIStoryboardPreviewingSegueTemplateStorage *)objc_getAssociatedObject(self, sel__previewingSegueTemplateStorage);
}

+ (void)modifyTrackedAnimations:(char)a3 removeOnCompletion:(void *)a4 animationFactory:(void *)a5 block:
{
  id v8 = a4;
  id v9 = a5;
  id v10 = a2;
  self;
  id v11 = v8;
  id v12 = v9;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = __modifyTrackedAnimationsWithFactory_block_invoke;
  v13[3] = &unk_1E53101A0;
  id v14 = v11;
  id v15 = v12;
  char v16 = a3;
  mapTrackedAnimations((uint64_t)v10, v13);
}

+ (void)removePropertyAnimatorAnimationsInView:(id)a3
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  if (v3)
  {
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    obuint64_t j = [(id)qword_1EB25C0E8 allValues];
    uint64_t v26 = [obj countByEnumeratingWithState:&v41 objects:v47 count:16];
    if (v26)
    {
      uint64_t v25 = *(void *)v42;
      do
      {
        uint64_t v4 = 0;
        do
        {
          if (*(void *)v42 != v25) {
            objc_enumerationMutation(obj);
          }
          uint64_t v27 = v4;
          double v5 = *(void **)(*((void *)&v41 + 1) + 8 * v4);
          long long v37 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          id v28 = v5;
          uint64_t v30 = [v28 countByEnumeratingWithState:&v37 objects:v46 count:16];
          if (v30)
          {
            uint64_t v29 = *(void *)v38;
            do
            {
              uint64_t v6 = 0;
              do
              {
                if (*(void *)v38 != v29) {
                  objc_enumerationMutation(v28);
                }
                uint64_t v31 = v6;
                double v7 = *(void **)(*((void *)&v37 + 1) + 8 * v6);
                id v8 = [v7 _trackedAnimations];
                id v9 = (void *)[v8 copy];

                long long v35 = 0u;
                long long v36 = 0u;
                long long v33 = 0u;
                long long v34 = 0u;
                id v32 = v9;
                uint64_t v10 = [v32 countByEnumeratingWithState:&v33 objects:v45 count:16];
                if (v10)
                {
                  uint64_t v11 = v10;
                  uint64_t v12 = *(void *)v34;
                  do
                  {
                    for (uint64_t i = 0; i != v11; ++i)
                    {
                      if (*(void *)v34 != v12) {
                        objc_enumerationMutation(v32);
                      }
                      id v14 = *(void **)(*((void *)&v33 + 1) + 8 * i);
                      id v15 = objc_getAssociatedObject(v14, &unk_1EB25C09C);
                      char v16 = [v3 layer];
                      int v17 = [v15 isDescendantOf:v16];

                      if (v17)
                      {
                        double v18 = objc_getAssociatedObject(v14, &unk_1EB25C09B);
                        double v19 = [v15 animationForKey:v18];
                        double v20 = [v7 _outerPropertyAnimator:1];
                        double v21 = v20;
                        if (v20)
                        {
                          [v20 _trackingIdentifier];
                          v23 = id v22 = v3;
                          [v7 _untrackAnimationsWithIdentifier:v23 keyPath:v18 inLayer:v15 removeFromLayer:1];

                          id v3 = v22;
                          [v21 _setOriginalFromValue:0 forKey:v18 inLayer:v15];
                        }
                      }
                    }
                    uint64_t v11 = [v32 countByEnumeratingWithState:&v33 objects:v45 count:16];
                  }
                  while (v11);
                }

                uint64_t v6 = v31 + 1;
              }
              while (v31 + 1 != v30);
              uint64_t v30 = [v28 countByEnumeratingWithState:&v37 objects:v46 count:16];
            }
            while (v30);
          }

          uint64_t v4 = v27 + 1;
        }
        while (v27 + 1 != v26);
        uint64_t v26 = [obj countByEnumeratingWithState:&v41 objects:v47 count:16];
      }
      while (v26);
    }
  }
}

- (id)_outlinePath
{
  id v1 = a1;
  if (a1)
  {
    [a1 bounds];
    double v3 = v2;
    double v5 = v4;
    double v7 = v6;
    double v9 = v8;
    uint64_t v10 = [v1 layer];
    uint64_t v11 = [v10 maskedCorners];
    [v1 _cornerRadius];
    double v13 = v12;
    id v14 = [v1 layer];
    id v15 = [v14 cornerCurve];
    +[UIBezierPath _roundedRectBezierPath:withRoundedCorners:cornerRadius:segments:legacyCorners:](UIBezierPath, "_roundedRectBezierPath:withRoundedCorners:cornerRadius:segments:legacyCorners:", v11, 16, [v15 isEqualToString:*MEMORY[0x1E4F39EA0]], v3, v5, v7, v9, v13);
    id v1 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

+ (BOOL)_shouldRedactTextInDescription
{
  return pthread_main_np() != 1 || (__shouldRedactTextInDescription & 1) == 0;
}

- (id)_conciseDescription
{
  if (a1)
  {
    double v2 = [MEMORY[0x1E4F28E78] stringWithFormat:@"<%@: %p", objc_opt_class(), a1];
    double v3 = [a1 layer];
    double v4 = [v3 name];
    uint64_t v5 = [v4 length];

    if (v5)
    {
      double v6 = [a1 layer];
      double v7 = [v6 name];
      [v2 appendFormat:@"; name=%@", v7];
    }
    [v2 appendString:@">"];
  }
  else
  {
    double v2 = 0;
  }
  return v2;
}

- (id)_conciseParentDescription
{
  double v3 = objc_opt_new();
  double v4 = self;
  uint64_t v5 = -[UIView _conciseDescription](v4);
  [v3 appendString:v5];

  double v6 = [(UIView *)v4 superview];

  if (v6)
  {
    do
    {
      double v7 = -[UIView _conciseDescription](v6);
      [v3 appendFormat:@" → %@", v7];

      uint64_t v8 = [v6 superview];

      double v6 = (void *)v8;
    }
    while (v8);
  }
  return v3;
}

- (UIView)_proxyView
{
  return 0;
}

- (UIEdgeInsets)_inferredLayoutMargins
{
  double top = self->_inferredLayoutMargins.top;
  double left = self->_inferredLayoutMargins.left;
  double bottom = self->_inferredLayoutMargins.bottom;
  double right = self->_inferredLayoutMargins.right;
  result.double right = right;
  result.double bottom = bottom;
  result.double left = left;
  result.double top = top;
  return result;
}

- (void)_setInferredLayoutMargins:(UIEdgeInsets)a3
{
  self->_inferredLayoutMargins = a3;
}

- (void)_setLayoutMarginsGuide:(id)a3
{
}

- (int64_t)_sceneDraggingBehaviorOnPan
{
  return self->_sceneDraggingBehaviorOnPan;
}

- (void)_setSceneDraggingBehaviorOnPan:(int64_t)a3
{
  self->_sceneDraggingBehaviorOnPan = a3;
}

- (void)_setReadableContentGuide:(id)a3
{
}

- (UIWritingToolsCoordinator)_writingToolsCoordinator
{
  return self->__writingToolsCoordinator;
}

- (void)_setWritingToolsCoordinator:(id)a3
{
}

- (CGRect)extent
{
  [(CALayer *)self->_layer position];
  double v4 = v3;
  double v6 = v5;
  [(CALayer *)self->_layer bounds];
  double v9 = v4 - v7 * 0.5;
  double v10 = v6 - v8 * 0.5;
  result.size.CGFloat height = v8;
  result.size.CGFloat width = v7;
  result.origin.CGFloat y = v10;
  result.origin.CGFloat x = v9;
  return result;
}

- (void)_setFrameWithAlignmentRect:(CGRect)a3
{
  -[UIView frameForAlignmentRect:](self, "frameForAlignmentRect:", a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  double v12 = self->_layer;
  double v13 = v12;
  memset(&v21[1], 0, sizeof(CATransform3D));
  if (v12) {
    [(CALayer *)v12 transform];
  }
  v21[0] = v21[1];
  if (CATransform3DIsIdentity(v21))
  {
    -[UIView setFrame:](self, "setFrame:", v5, v7, v9, v11);
  }
  else
  {
    [(CALayer *)v13 anchorPoint];
    double v15 = v14;
    double v17 = v16;
    v22.origin.CGFloat x = v5;
    v22.origin.CGFloat y = v7;
    v22.size.CGFloat width = v9;
    v22.size.CGFloat height = v11;
    double MinX = CGRectGetMinX(v22);
    v23.origin.CGFloat x = v5;
    v23.origin.CGFloat y = v7;
    v23.size.CGFloat width = v9;
    v23.size.CGFloat height = v11;
    double v19 = MinX + v15 * CGRectGetWidth(v23);
    v24.origin.CGFloat x = v5;
    v24.origin.CGFloat y = v7;
    v24.size.CGFloat width = v9;
    v24.size.CGFloat height = v11;
    double MinY = CGRectGetMinY(v24);
    v25.origin.CGFloat x = v5;
    v25.origin.CGFloat y = v7;
    v25.size.CGFloat width = v9;
    v25.size.CGFloat height = v11;
    -[UIView setCenter:](self, "setCenter:", v19, MinY + v17 * CGRectGetHeight(v25));
    [(UIView *)self bounds];
    -[UIView setBounds:](self, "setBounds:");
  }
}

- (BOOL)isMultipleTouchEnabled
{
  return (*(void *)&self->_viewFlags >> 29) & 1;
}

- (double)_convertOffset:(double)a3 fromView:(double)a4
{
  if (!a1) {
    return 0.0;
  }
  id v7 = a2;
  objc_msgSend(a1, "convertPoint:fromView:", v7, a3, a4);
  double v9 = v8;
  objc_msgSend(a1, "convertPoint:fromView:", v7, *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8));
  double v11 = v10;

  return v9 - v11;
}

- (double)_constrainRectWithinSceneBounds:(double)a3 additionalInsets:(double)a4
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0.0;
  }
  double v12 = [a1 _window];
  double v13 = [v12 _windowHostingScene];

  if (v13)
  {
    double v14 = [a1 _window];
    [v14 safeAreaInsets];
    double v19 = UIEdgeInsetsAdd(15, v15, v16, v17, v18, a6);
    double v21 = v20;
    double v70 = a4;
    rect.origin.CGFloat x = a5;
    double v64 = v23;
    double v68 = v22;

    CGRect v24 = [a1 _window];
    [v13 _referenceBounds];
    objc_msgSend(v24, "_convertRectFromSceneReferenceSpace:");
    double v26 = v25;
    double v28 = v27;
    double v29 = a3;
    double v31 = v30;
    double v32 = a2;
    double v34 = v33;

    CGFloat v35 = v21 + v26;
    CGFloat v36 = v19 + v28;
    CGFloat v37 = v31 - (v21 + v64);
    CGFloat v38 = v34 - (v19 + v68);
    long long v39 = [a1 _window];
    objc_msgSend(a1, "convertRect:toView:", v39, v32, v29, v70, rect.origin.x);
    CGFloat v41 = v40;
    CGFloat v69 = v43;
    CGFloat v71 = v42;
    CGFloat v45 = v44;
    CGFloat v46 = v43;

    v74.origin.CGFloat x = v35;
    v74.origin.CGFloat y = v36;
    v74.size.CGFloat width = v37;
    v74.size.CGFloat height = v38;
    double MaxX = CGRectGetMaxX(v74);
    v75.origin.CGFloat x = v41;
    rect.origin.CGFloat x = v41;
    v75.origin.CGFloat y = v71;
    v75.size.CGFloat width = v45;
    v75.size.CGFloat height = v46;
    double v66 = fmin(MaxX, CGRectGetMaxX(v75));
    v76.origin.CGFloat x = v35;
    v76.origin.CGFloat y = v36;
    v76.size.CGFloat width = v37;
    v76.size.CGFloat height = v38;
    double MinX = CGRectGetMinX(v76);
    v77.origin.CGFloat x = v41;
    v77.origin.CGFloat y = v71;
    v77.size.CGFloat width = v45;
    v77.size.CGFloat height = v69;
    double v67 = v66 - fmax(MinX, CGRectGetMinX(v77));
    v78.origin.CGFloat x = v35;
    v78.origin.CGFloat y = v36;
    v78.size.CGFloat width = v37;
    v78.size.CGFloat height = v38;
    double MaxY = CGRectGetMaxY(v78);
    v79.origin.CGFloat x = v41;
    v79.origin.CGFloat y = v71;
    v79.size.CGFloat width = v45;
    v79.size.CGFloat height = v69;
    double v62 = fmin(MaxY, CGRectGetMaxY(v79));
    v80.origin.CGFloat x = v35;
    v80.origin.CGFloat y = v36;
    v80.size.CGFloat width = v37;
    v80.size.CGFloat height = v38;
    double MinY = CGRectGetMinY(v80);
    v81.origin.CGFloat x = v41;
    v81.origin.CGFloat y = v71;
    v81.size.CGFloat width = v45;
    v81.size.CGFloat height = v69;
    double v63 = v62 - fmax(MinY, CGRectGetMinY(v81));
    v82.origin.CGFloat x = v35;
    v82.origin.CGFloat y = v36;
    v82.size.CGFloat width = v37;
    v82.size.CGFloat height = v38;
    double v59 = CGRectGetMinX(v82);
    v83.origin.CGFloat x = v41;
    v83.origin.CGFloat y = v71;
    v83.size.CGFloat width = v45;
    v83.size.CGFloat height = v69;
    double v48 = CGRectGetMinX(v83);
    v84.origin.CGFloat x = v35;
    v84.origin.CGFloat y = v36;
    v84.size.CGFloat width = v37;
    v84.size.CGFloat height = v38;
    double v60 = fmax(v59, fmin(v48, CGRectGetMaxX(v84)));
    v85.origin.CGFloat x = v35;
    v85.origin.CGFloat y = v36;
    v85.size.CGFloat width = v37;
    v85.size.CGFloat height = v38;
    double v49 = CGRectGetMinY(v85);
    v86.origin.CGFloat x = rect.origin.x;
    v86.origin.CGFloat y = v71;
    v86.size.CGFloat width = v45;
    v86.size.CGFloat height = v69;
    double v50 = CGRectGetMinY(v86);
    v87.origin.CGFloat x = v35;
    v87.origin.CGFloat y = v36;
    v87.size.CGFloat width = v37;
    v87.size.CGFloat height = v38;
    double v51 = fmax(v49, fmin(v50, CGRectGetMaxY(v87)));
    v88.origin.CGFloat x = v35;
    v88.origin.CGFloat y = v36;
    v88.size.CGFloat width = v37;
    v88.size.CGFloat height = v38;
    double v52 = fmax(fmin(v67, CGRectGetWidth(v88)), 0.0);
    v89.origin.CGFloat x = v35;
    v89.origin.CGFloat y = v36;
    v89.size.CGFloat width = v37;
    v89.size.CGFloat height = v38;
    double v53 = fmax(fmin(v63, CGRectGetHeight(v89)), 0.0);
    CGFloat v54 = [a1 _window];
    objc_msgSend(a1, "convertRect:fromView:", v54, v60, v51, v52, v53);
    a2 = v55;
  }
  else
  {
    if (!os_variant_has_internal_diagnostics())
    {
      double v56 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_constrainRectWithinSceneBounds_additionalInsets____s_category)+ 8);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        LODWORD(rect.origin.y) = 138412290;
        *(void *)((char *)&rect.origin.y + 4) = a1;
        _os_log_impl(&dword_1853B0000, v56, OS_LOG_TYPE_ERROR, "Cannot convert rect from view that is not in a window scene: %@", (uint8_t *)&rect.origin.y, 0xCu);
      }
      goto LABEL_8;
    }
    CGFloat v54 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_FAULT))
    {
      LODWORD(rect.origin.y) = 138412290;
      *(void *)((char *)&rect.origin.y + 4) = a1;
      _os_log_fault_impl(&dword_1853B0000, v54, OS_LOG_TYPE_FAULT, "Cannot convert rect from view that is not in a window scene: %@", (uint8_t *)&rect.origin.y, 0xCu);
    }
  }

LABEL_8:
  return a2;
}

- (void)setFrame:(CGRect)a3 forFields:(int)a4
{
  char v4 = a4;
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  [(UIView *)self frame];
  if (v4) {
    double v10 = x;
  }
  if ((v4 & 2) != 0) {
    double v11 = y;
  }
  if ((v4 & 4) != 0) {
    double v12 = width;
  }
  if ((v4 & 8) != 0) {
    double v13 = height;
  }
  -[UIView setFrame:](self, "setFrame:", v10, v11, v12, v13);
}

- (void)setRotationBy:(float)a3
{
  memset(&v7, 0, sizeof(v7));
  [(UIView *)self transform];
  CGAffineTransform v5 = v7;
  CGAffineTransformRotate(&v6, &v5, a3 * 3.14159265 / 180.0);
  CGAffineTransform v7 = v6;
  [(UIView *)self setTransform:&v6];
}

- (BOOL)_clipsGlyphPathFrame:(CGRect)a3 shouldContinueSuperviewTraversal:(BOOL *)a4
{
  CGFloat height = a3.size.height;
  CGFloat width = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  double v9 = [(UIView *)self _window];
  if (!v9) {
    goto LABEL_5;
  }
  if (![(UIView *)self clipsToBounds]) {
    goto LABEL_5;
  }
  [(UIView *)self bounds];
  -[UIView convertRect:toView:](self, "convertRect:toView:", v9);
  CGFloat v10 = v16.origin.x;
  CGFloat v11 = v16.origin.y;
  CGFloat v12 = v16.size.width;
  CGFloat v13 = v16.size.height;
  v18.origin.CGFloat x = x;
  v18.origin.CGFloat y = y;
  v18.size.CGFloat width = width;
  v18.size.CGFloat height = height;
  if (CGRectIntersectsRect(v16, v18))
  {
    v17.origin.CGFloat x = v10;
    v17.origin.CGFloat y = v11;
    v17.size.CGFloat width = v12;
    v17.size.CGFloat height = v13;
    v19.origin.CGFloat x = x;
    v19.origin.CGFloat y = y;
    v19.size.CGFloat width = width;
    v19.size.CGFloat height = height;
    BOOL v14 = !CGRectContainsRect(v17, v19);
  }
  else
  {
LABEL_5:
    LOBYTE(v14) = 0;
  }

  return v14;
}

uint64_t __63__UIView_Geometry___applyAutoresizingMaskWithOldSuperviewSize___block_invoke_2237(uint64_t a1, uint64_t a2)
{
  return a2;
}

- (void)_setPresentationValue:(id)a3 velocity:(id)a4 preferredFrameRateRangeMaximum:(int)a5 forKey:(id)a6
{
  if (self) {
    [(UIView *)self __swift_setPresentationValue:a3 velocity:a4 preferredFrameRateRangeMaximum:a5 immediate:0 key:a6];
  }
}

- (void)_setTraitStorageList:(id)a3
{
  *((_DWORD *)&self->_viewFlags + 4) = *((_DWORD *)&self->_viewFlags + 4) & 0xFFFFFFBF | ((a3 != 0) << 6);
  v3.receiver = self;
  v3.super_class = (Class)UIView;
  -[NSObject _setTraitStorageList:](&v3, sel__setTraitStorageList_);
}

- (void)exchangeSubviewAtIndex:(NSInteger)index1 withSubviewAtIndex:(NSInteger)index2
{
  id v10 = [(CALayer *)self->_layer sublayers];
  unsigned int v7 = [v10 count];
  if ((index1 & 0x8000000000000000) == 0
    && index1 != index2
    && v7 > (unint64_t)index1
    && v7 > (unint64_t)index2)
  {
    double v9 = (void *)[v10 mutableCopy];
    [v9 exchangeObjectAtIndex:index1 withObjectAtIndex:index2];
    [(CALayer *)self->_layer setSublayers:v9];
    -[UIView _synchronizeAutoLayoutWithCALayoutForHierarchyChangeIfApplicable]((uint64_t)self);
    [(UIView *)self _invalidateSubviewCache];
  }
}

- (BOOL)_allowsHighContrastForBackgroundColor
{
  return (*((unsigned __int8 *)&self->_viewFlags + 22) >> 3) & 1;
}

void __41__UIView_Hierarchy___setBackgroundColor___block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setNSIntegerValue:2 forTrait:v3];
}

- (CGRect)_rectToScrollToVisibleInCellInWindow:(id)a3
{
  id v4 = a3;
  [(UIView *)self bounds];
  objc_msgSend(v4, "convertRect:fromView:", self);
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;

  double v13 = v6;
  double v14 = v8;
  double v15 = v10;
  double v16 = v12;
  result.size.CGFloat height = v16;
  result.size.CGFloat width = v15;
  result.origin.CGFloat y = v14;
  result.origin.CGFloat x = v13;
  return result;
}

+ (void)_testIfFirstView:(id)a3 secondView:(id)a4 areDescendantsOfView:(id)a5 results:(BOOL)a6[2]
{
  id v9 = a5;
  id v10 = v9;
  *a6 = 0;
  id v17 = v9;
  if (a3)
  {
    id v11 = 0;
    char v12 = 0;
    while (1)
    {
      v12 |= a3 == a4;
      if (a3 == v10) {
        break;
      }
      id v13 = (id)[a3 superview];
      id v10 = v17;
      a3 = v13;
      if (!v11) {
        id v11 = v13;
      }
      if (!v13)
      {
        if (v12)
        {
LABEL_8:
          BOOL v14 = *a6;
          goto LABEL_17;
        }
        goto LABEL_12;
      }
    }
    BOOL v14 = 1;
    *a6 = 1;
    if (v12) {
      goto LABEL_17;
    }
LABEL_12:
    if (a4 != v10)
    {
      if (v11)
      {
        uint64_t v15 = [a4 superview];
        id v10 = v17;
        if (v11 == (id)v15) {
          goto LABEL_8;
        }
      }
      goto LABEL_15;
    }
  }
  else if (a4 != v9)
  {
LABEL_15:
    char v16 = [a4 isDescendantOfView:v17];
    id v10 = v17;
    a6[1] = v16;
    goto LABEL_18;
  }
  BOOL v14 = 1;
LABEL_17:
  a6[1] = v14;
LABEL_18:
}

- (uint64_t)_layoutHash
{
  v4[0] = 0;
  v4[1] = v4;
  void v4[2] = 0x2050000000;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __32__UIView_Hierarchy___layoutHash__block_invoke;
  v3[3] = &unk_1E530FF20;
  v3[4] = v4;
  v4[3] = v3;
  uint64_t v1 = __32__UIView_Hierarchy___layoutHash__block_invoke((uint64_t)v3, a1, 1);
  _Block_object_dispose(v4, 8);
  return v1;
}

uint64_t __32__UIView_Hierarchy___layoutHash__block_invoke(uint64_t a1, void *a2, char a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  [v5 frame];
  double v7 = v6;
  double v9 = v8;
  unint64_t v12 = (unint64_t)(v10 * 4096.0 + v11 * 256.0);
  id v13 = [v5 subviews];
  uint64_t v14 = [v13 count] + v12;

  long long v24 = 0u;
  long long v25 = 0u;
  if (a3) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = v14 + (unint64_t)(v7 * 4096.0 + v9 * 65536.0);
  }
  *((void *)&v22 + 1) = 0;
  long long v23 = 0uLL;
  char v16 = objc_msgSend(v5, "subviews", 0);
  uint64_t v17 = [v16 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v23 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v15 = (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 16))() ^ __ROR8__(v15, 61);
      }
      uint64_t v18 = [v16 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v18);
  }

  return v15;
}

- (id)_layoutHashesStackCreateIfNeeded:(void *)a1
{
  id v4 = objc_getAssociatedObject(a1, &_layoutHashesStackCreateIfNeeded___UILogIdenticalLayoutsKey);
  if (v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = a2 == 0;
  }
  if (!v5)
  {
    id v4 = [MEMORY[0x1E4F1CA48] array];
    objc_setAssociatedObject(a1, &_layoutHashesStackCreateIfNeeded___UILogIdenticalLayoutsKey, v4, (void *)1);
  }
  return v4;
}

- (void)_pushLayoutHash
{
  void v8[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v2 = objc_opt_class();
    objc_sync_enter(v2);
    id v3 = -[UIView _layoutHashesStackCreateIfNeeded:](a1, 0);

    if (v3)
    {
      id v4 = [NSNumber numberWithUnsignedInteger:-[UIView _layoutHash](a1)];
      if (__UILogIdenticalLayouts)
      {
        BOOL v5 = [MEMORY[0x1E4F29060] callStackSymbols];
        double v6 = -[UIView _layoutHashesStackCreateIfNeeded:](a1, 1);
        v8[0] = v4;
        v8[1] = v5;
        double v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:2];
        [v6 addObject:v7];
      }
    }
    objc_sync_exit(v2);
  }
}

void __65__UIView_Hierarchy___validateLayoutHashHasChangedWithLayoutTime___block_invoke(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v12 = a2;
  double v6 = [v12 objectAtIndexedSubscript:0];
  uint64_t v7 = [v6 unsignedIntegerValue];

  double v8 = v12;
  if (v7 == a1[5])
  {
    if (__UILogIdenticalLayouts)
    {
      uint64_t v9 = a1[6];
      uint64_t v10 = a1[4];
      double v11 = [v12 objectAtIndexedSubscript:1];
      NSLog(&cfstr_WarningFsSpent.isa, v9, v10, v11);
    }
    *a4 = 1;
    double v8 = v12;
  }
}

- (void)_raiseExceptionForBackgroundThreadLayout
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    id v2 = a1[11];
    if (v2)
    {
      id v3 = v2;
      if (pthread_main_np() == 1 || !dyld_program_sdk_at_least()) {
        goto LABEL_20;
      }
      if (!os_variant_has_internal_diagnostics())
      {
        id v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C1E8) + 8);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          BOOL v5 = v4;
          double v6 = (objc_class *)objc_opt_class();
          uint64_t v7 = NSStringFromClass(v6);
          double v8 = (objc_class *)objc_opt_class();
          uint64_t v9 = NSStringFromClass(v8);
          int v25 = 138413058;
          double v26 = v7;
          __int16 v27 = 2048;
          double v28 = a1;
          __int16 v29 = 2112;
          double v30 = v9;
          __int16 v31 = 2048;
          double v32 = v3;
          uint64_t v10 = "Unsupported layout off the main thread for <%@: %p> with associated view controller <%@: %p>";
LABEL_14:
          _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v25, 0x2Au);
LABEL_15:

LABEL_16:
          goto LABEL_20;
        }
        goto LABEL_20;
      }
      BOOL v5 = __UIFaultDebugAssertLog();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
        goto LABEL_16;
      }
      uint64_t v19 = (objc_class *)objc_opt_class();
      uint64_t v7 = NSStringFromClass(v19);
      double v20 = (objc_class *)objc_opt_class();
      uint64_t v9 = NSStringFromClass(v20);
      int v25 = 138413058;
      double v26 = v7;
      __int16 v27 = 2048;
      double v28 = a1;
      __int16 v29 = 2112;
      double v30 = v9;
      __int16 v31 = 2048;
      double v32 = v3;
      double v21 = "Unsupported layout off the main thread for <%@: %p> with associated view controller <%@: %p>";
      goto LABEL_31;
    }
    id v3 = [a1 _viewControllerForAncestor];
    int v11 = pthread_main_np();
    if (v3)
    {
      if (v11 == 1 || !dyld_program_sdk_at_least()) {
        goto LABEL_20;
      }
      if (!os_variant_has_internal_diagnostics())
      {
        id v12 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C1F0) + 8);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          BOOL v5 = v12;
          id v13 = (objc_class *)objc_opt_class();
          uint64_t v7 = NSStringFromClass(v13);
          uint64_t v14 = (objc_class *)objc_opt_class();
          uint64_t v9 = NSStringFromClass(v14);
          int v25 = 138413058;
          double v26 = v7;
          __int16 v27 = 2048;
          double v28 = a1;
          __int16 v29 = 2112;
          double v30 = v9;
          __int16 v31 = 2048;
          double v32 = v3;
          uint64_t v10 = "Unsupported layout off the main thread for <%@: %p> with nearest ancestor view controller <%@: %p>";
          goto LABEL_14;
        }
LABEL_20:

        return;
      }
      BOOL v5 = __UIFaultDebugAssertLog();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
        goto LABEL_16;
      }
      long long v22 = (objc_class *)objc_opt_class();
      uint64_t v7 = NSStringFromClass(v22);
      long long v23 = (objc_class *)objc_opt_class();
      uint64_t v9 = NSStringFromClass(v23);
      int v25 = 138413058;
      double v26 = v7;
      __int16 v27 = 2048;
      double v28 = a1;
      __int16 v29 = 2112;
      double v30 = v9;
      __int16 v31 = 2048;
      double v32 = v3;
      double v21 = "Unsupported layout off the main thread for <%@: %p> with nearest ancestor view controller <%@: %p>";
LABEL_31:
      _os_log_fault_impl(&dword_1853B0000, v5, OS_LOG_TYPE_FAULT, v21, (uint8_t *)&v25, 0x2Au);
      goto LABEL_15;
    }
    if (v11 == 1 || !dyld_program_sdk_at_least())
    {
LABEL_19:
      id v3 = 0;
      goto LABEL_20;
    }
    if (os_variant_has_internal_diagnostics())
    {
      char v16 = __UIFaultDebugAssertLog();
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
        goto LABEL_26;
      }
      long long v24 = (objc_class *)objc_opt_class();
      uint64_t v18 = NSStringFromClass(v24);
      int v25 = 138412546;
      double v26 = v18;
      __int16 v27 = 2048;
      double v28 = a1;
      _os_log_fault_impl(&dword_1853B0000, v16, OS_LOG_TYPE_FAULT, "Unsupported layout off the main thread for <%@: %p> with no associated or ancestor view controller", (uint8_t *)&v25, 0x16u);
    }
    else
    {
      uint64_t v15 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C1F8) + 8);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
      char v16 = v15;
      uint64_t v17 = (objc_class *)objc_opt_class();
      uint64_t v18 = NSStringFromClass(v17);
      int v25 = 138412546;
      double v26 = v18;
      __int16 v27 = 2048;
      double v28 = a1;
      _os_log_impl(&dword_1853B0000, v16, OS_LOG_TYPE_ERROR, "Unsupported layout off the main thread for <%@: %p> with no associated or ancestor view controller", (uint8_t *)&v25, 0x16u);
    }

LABEL_26:
    goto LABEL_19;
  }
}

void __74__UIView_Hierarchy___updateConstraintsAsNecessaryAndApplyLayoutFromEngine__block_invoke(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v4 = (objc_class *)objc_opt_class();
  Name = class_getName(v4);
  strncpy((char *)&v8, Name, 0x18uLL);
  *(_DWORD *)a2 = 86;
  double v6 = *(void **)(a1 + 32);
  *(void *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 40) = 87;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = v6;
  uint64_t v7 = [v6 superview];
  *(void *)(a2 + 72) = v7;
}

void __35__UIView_Hierarchy__layoutSubviews__block_invoke(uint64_t a1)
{
}

- (void)_resetContentStretch
{
  -[CALayer setContentsCenter:](self->_layer, "setContentsCenter:", 0.0, 0.0, 1.0, 1.0);
  uint64_t v3 = *MEMORY[0x1E4F39E38];
  layer = self->_layer;
  [(CALayer *)layer setContentsScaling:v3];
}

- (void)setContentStretch:(CGRect)contentStretch
{
}

- (CGRect)contentStretch
{
  [(CALayer *)self->_layer contentsCenter];
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

- (void)_setContentRectInPixels:(CGRect)a3 forContentSize:(CGSize)a4
{
  double height = a3.size.height;
  double width = a3.size.width;
  double v6 = 1.0;
  BOOL v7 = a3.origin.x == 0.0 && a3.size.width == a4.width;
  double v8 = 1.0;
  if (!v7)
  {
    a3.origin.CGFloat x = a3.origin.x / a4.width;
    double v8 = width / a4.width;
  }
  if (a3.origin.y != 0.0 || height != a4.height)
  {
    a3.origin.CGFloat y = a3.origin.y / a4.height;
    double v6 = height / a4.height;
  }
  -[CALayer setContentsRect:](self->_layer, "setContentsRect:", a3.origin.x, a3.origin.y, v8, v6);
}

- (void)_resetContentRect
{
}

- (BOOL)_prefersDrawingWithForcedScaleFactorInClassicMode
{
  double v2 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  double v3 = _UIKitBundle();
  char v4 = [v2 isEqual:v3] ^ 1;

  return v4;
}

- (void)_setShouldRasterize:(BOOL)a3
{
  BOOL v3 = a3;
  -[CALayer setShouldRasterize:](self->_layer, "setShouldRasterize:");
  double v5 = [(UIView *)self window];
  id v7 = [v5 screen];

  double v6 = v7;
  if (v7 && v3)
  {
    [v7 scale];
    -[CALayer setRasterizationScale:](self->_layer, "setRasterizationScale:");
    double v6 = v7;
  }
}

- (BOOL)needsDisplayOnBoundsChange
{
  return [(CALayer *)self->_layer needsDisplayOnBoundsChange];
}

- (void)setFixedBackgroundPattern:(BOOL)a3
{
  uint64_t v3 = 0x2000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFFFFDFFFFFFLL | v3;
  -[UIView _updateNeedsDisplayOnBoundsChange](self);
}

- (BOOL)clearsContextBeforeDrawing
{
  return [(CALayer *)self->_layer clearsContext];
}

- (void)_setIgnoreBackdropViewsWhenHiding:(BOOL)a3
{
  uint64_t v3 = 32;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *(void *)((char *)&self->_viewFlags + 20) = *(void *)((char *)&self->_viewFlags + 20) & 0xFFFFFFFFFFFFFFDFLL | v3;
}

- (void)setClearsContext:(BOOL)a3
{
}

- (CGImage)newSnapshotWithRect:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  size_t v9 = vcvtpd_u64_f64(width);
  size_t v10 = vcvtpd_u64_f64(height);
  if ([(UIView *)self isOpaque]) {
    uint32_t v11 = 8198;
  }
  else {
    uint32_t v11 = 8194;
  }
  id v12 = CGBitmapContextCreate(0, v9, v10, 8uLL, 0, DeviceRGB, v11);
  CGColorSpaceRelease(DeviceRGB);
  if (self)
  {
    CGContextSaveGState(v12);
    id v13 = [(CALayer *)self->_layer mask];
    uint64_t v14 = v13;
    if (v13)
    {
      uint64_t v15 = [v13 contents];
      if (v15)
      {
        char v16 = v15;
        CFTypeID v17 = CFGetTypeID(v15);
        if (v17 == CGImageGetTypeID())
        {
          CGFloat v18 = (double)CGImageGetWidth(v16);
          v25.size.double height = (double)CGImageGetHeight(v16);
          v25.origin.double x = 0.0;
          v25.origin.double y = 0.0;
          v25.size.double width = v18;
          CGContextClipToMask(v12, v25, v16);
        }
        CFRelease(v16);
      }
    }
    uint64_t v19 = [(UIView *)self _backgroundCGColor];
    if (v19)
    {
      double v20 = v19;
      [(UIView *)self frame];
      v28.origin.double x = x;
      v28.origin.double y = y;
      v28.size.double width = width;
      v28.size.double height = height;
      if (!CGRectContainsRect(v26, v28))
      {
        CGContextSetFillColorWithColor(v12, v20);
        CGFloat v21 = (double)CGBitmapContextGetWidth(v12);
        v27.size.double height = (double)CGBitmapContextGetHeight(v12);
        v27.origin.double x = 0.0;
        v27.origin.double y = 0.0;
        v27.size.double width = v21;
        CGContextFillRect(v12, v27);
      }
    }
    CGContextTranslateCTM(v12, -x, y + height);
    CGContextScaleCTM(v12, 1.0, -1.0);
    CALayerFrameAffineTransform();
    CGContextConcatCTM(v12, &v24);
    [(CALayer *)self->_layer renderInContext:v12];
    CGContextRestoreGState(v12);
  }
  CGContextFlush(v12);
  Image = CGBitmapContextCreateImage(v12);
  CGContextRelease(v12);
  return Image;
}

- (void)forceDisplayIfNeeded
{
}

- (void)recursivelyForceDisplayIfNeeded
{
  [(CALayer *)self->_layer displayIfNeeded];
  id v6 = [(UIView *)self _allSubviews];
  uint64_t v3 = [v6 count];
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      double v5 = [v6 objectAtIndex:i];
      [v5 recursivelyForceDisplayIfNeeded];
    }
  }
}

- (void)_createIOSurfaceWithPadding:(UIEdgeInsets)a3
{
  double right = a3.right;
  double bottom = a3.bottom;
  double left = a3.left;
  double top = a3.top;
  [(UIView *)self bounds];
  return -[UIView _createRenderingBufferFromRect:padding:gamut:]((__IOSurface *)self, -1, v8, v9, v10, v11, top, left, bottom, right);
}

- (__IOSurface)_createRenderingBufferFromRect:(double)a3 padding:(double)a4 gamut:(double)a5
{
  double v10 = a1;
  v28[4] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    double v16 = a5 - (-a10 - a8);
    v27[0] = @"src-rect";
    double v17 = a6 - (-a9 - a7);
    *(double *)CGRect v26 = a3;
    *(double *)&v26[1] = a4;
    *(double *)&void v26[2] = a5;
    *(double *)&v26[3] = a6;
    CGFloat v18 = [MEMORY[0x1E4F29238] valueWithBytes:v26 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
    v28[0] = v18;
    v27[1] = @"dst-rect";
    *(double *)CGRect v25 = a8;
    *(double *)&v25[1] = a10;
    *(double *)&v25[2] = a5;
    *(double *)&void v25[3] = a6;
    uint64_t v19 = [MEMORY[0x1E4F29238] valueWithBytes:v25 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
    v28[1] = v19;
    v27[2] = @"dst-size";
    *(double *)CGAffineTransform v24 = v16;
    *(double *)&v24[1] = v17;
    double v20 = [MEMORY[0x1E4F29238] valueWithBytes:v24 objCType:"{CGSize=dd}"];
    void v28[2] = v20;
    v27[3] = @"dst-gamut";
    CGFloat v21 = [NSNumber numberWithInteger:a2];
    _OWORD v28[3] = v21;
    long long v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:v27 count:4];
    double v10 = _UIRenderView(v10, v22, &__block_literal_global_460);
  }
  return v10;
}

- (id)_imageFromRect:(CGRect)a3
{
  return -[UIView _imageFromRect:gamut:](self, "_imageFromRect:gamut:", -1, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (id)_imageFromRect:(CGRect)a3 gamut:(int64_t)a4
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  v13[0] = @"src-rect";
  CGRect v12 = a3;
  id v6 = [MEMORY[0x1E4F29238] valueWithBytes:&v12 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
  v14[0] = v6;
  v13[1] = @"dst-gamut";
  id v7 = [NSNumber numberWithInteger:a4];
  v14[1] = v7;
  double v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:2];

  if (self)
  {
    double v9 = _UIRenderView(self, v8, &__block_literal_global_460);
    if (v9)
    {
      double v10 = v9;
      self = [[UIImage alloc] initWithIOSurface:v9];
      CFRelease(v10);
    }
    else
    {
      self = 0;
    }
  }

  return self;
}

+ (void)flush
{
  double v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("View", &flush___s_category) + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "+[UIView flush] is deprecated, use +[CATransaction flush] instead.", v3, 2u);
  }
  [MEMORY[0x1E4F39CF8] flush];
  LastFlush = CACurrentMediaTime();
}

+ (void)throttledFlush
{
  if (CACurrentMediaTime() - *(double *)&LastFlush >= 0.1)
  {
    +[UIView flush];
  }
}

- (id)_initialValueForLayer:(id)a3 keyPath:(id)a4 usePresentationValue:(BOOL)a5
{
  BOOL v5 = a5;
  id v7 = a3;
  id v8 = a4;
  if (v5 && ([v7 hasBeenCommitted] & 1) != 0)
  {
    double v9 = [v7 presentationLayer];
    double v10 = [v9 valueForKeyPath:v8];

    if (v10) {
      goto LABEL_9;
    }
  }
  else
  {
    double v10 = [v7 valueForKeyPath:v8];
    if (v10) {
      goto LABEL_9;
    }
  }
  if ([@"backgroundColor" isEqualToString:v8])
  {
    id v11 = +[UIColor clearColor];
    double v10 = [v11 CGColor];
  }
  else
  {
    double v10 = [MEMORY[0x1E4F39BE8] defaultValueForKey:v8];
  }
LABEL_9:

  return v10;
}

- (id)_initialValueForKey:(id)a3
{
  return -[UIView _backing__initialValueForKey:](self, (uint64_t)a3);
}

+ (id)_defaultUIViewAnimationForLayer:(id)a3 forKey:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ([a1 _isInAnimationBlockWithAnimationsEnabled])
  {
    id v8 = objc_msgSend((id)__currentViewAnimationState, "animationForLayer:forKey:forView:", v6, v7, objc_msgSend(v6, "unsafeUnretainedDelegate"));
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

+ (void)_animateWithAttributes:(id)a3 animations:(id)a4 completion:(id)a5
{
  CGRect v12 = (double *)a3;
  id v7 = (void (**)(void))a4;
  id v8 = (void (**)(id, uint64_t))a5;
  if (v12)
  {
    double v9 = v12[1];
    double v10 = v12[2];
    uint64_t v11 = *((void *)v12 + 3);
    if (*((unsigned char *)v12 + 48)) {
      +[UIView _animateUsingSpringWithDuration:v11 delay:v7 options:v8 mass:v9 stiffness:v10 damping:v12[9] initialVelocity:v12[10] animations:v12[7] completion:v12[8]];
    }
    else {
      +[UIView animateWithDuration:v11 delay:v7 options:v8 animations:v9 completion:v10];
    }
  }
  else
  {
    v7[2](v7);
    if (v8) {
      v8[2](v8, 1);
    }
  }
}

+ (void)beginAnimations:(id)a3
{
}

+ (void)beginAnimations:(NSString *)animationID context:(void *)context
{
}

+ (void)commitAnimations
{
}

+ (BOOL)_isInKeyframeAnimationBlockWithAnimationsEnabled
{
  int v3 = [(id)__currentViewAnimationState _isKeyframeAnimation];
  if (v3)
  {
    LOBYTE(v3) = [a1 areAnimationsEnabled];
  }
  return v3;
}

+ (void)_setAnimationAttributes:(id)a3
{
}

+ (void)_setAnimationAttributes:(id)a3 skipDelegateAssignment:(BOOL)a4
{
  if (__currentViewAnimationState) {
    [(id)__currentViewAnimationState setAnimationAttributes:a3 skipDelegateAssignment:a4];
  }
}

+ (void)setAnimationDelegate:(id)delegate
{
  id v4 = delegate;
  if (__currentViewAnimationState && *(id *)(__currentViewAnimationState + 32) != v4)
  {
    id v5 = v4;
    objc_storeStrong((id *)(__currentViewAnimationState + 32), delegate);
    id v4 = v5;
  }
}

+ (void)setAnimationPosition:(CGPoint)a3
{
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = __currentViewAnimationState;
  if (__currentViewAnimationState)
  {
    if (a3.x == *MEMORY[0x1E4F1DAD8] && a3.y == *(double *)(MEMORY[0x1E4F1DAD8] + 8))
    {
      uint64_t v6 = 0;
    }
    else
    {
      id v8 = @"inputPosition";
      id v5 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGPoint:");
      v9[0] = v5;
      uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];

      uint64_t v3 = __currentViewAnimationState;
    }
    id v7 = *(void **)(v3 + 120);
    *(void *)(v3 + 120) = v6;
  }
}

+ (id)_performWithAnimationTracking:(id)a3
{
  id v4 = (void (**)(void))a3;
  id v5 = [a1 _startAnimationTracking];
  v4[2](v4);

  [a1 _finishAnimationTracking];
  return v5;
}

uint64_t __48__UIView_Animation___addCompletionWithPosition___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

+ (void)_addOrPerformCompletionWithPosition:(id)a3
{
  id v4 = (void (**)(id, uint64_t, void))a3;
  if ((objc_msgSend(a1, "_addCompletionWithPosition:") & 1) == 0) {
    v4[2](v4, 1, 0);
  }
}

+ (void)_completeAnimationWithUUID:(id)a3 duration:(double)a4 curve:(int64_t)a5 reverse:(BOOL)a6
{
  BOOL v6 = a6;
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  if (v8)
  {
    CGFloat v71 = v8;
    objc_msgSend((id)qword_1EB25C0E8, "objectForKey:");
    long long v100 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v67 = [obj countByEnumeratingWithState:&v100 objects:v106 count:16];
    if (!v67) {
      goto LABEL_67;
    }
    uint64_t v66 = *(void *)v101;
    uint64_t v72 = *MEMORY[0x1E4F39FA0];
    uint64_t v69 = *MEMORY[0x1E4F3A4A0];
    BOOL v74 = v6;
    while (1)
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v101 != v66) {
          objc_enumerationMutation(obj);
        }
        uint64_t v68 = v9;
        double v10 = *(void **)(*((void *)&v100 + 1) + 8 * v9);
        if (v6) {
          [v10 _setFinishedPosition:1];
        }
        id v76 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        long long v96 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v99 = 0u;
        double v70 = v10;
        uint64_t v11 = [v10 _trackedAnimations];
        CGRect v12 = [v11 reverseObjectEnumerator];

        id v75 = v12;
        uint64_t v13 = [v12 countByEnumeratingWithState:&v96 objects:v105 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v77 = *(void *)v97;
          do
          {
            uint64_t v15 = 0;
            do
            {
              if (*(void *)v97 != v77) {
                objc_enumerationMutation(v75);
              }
              double v16 = *(void **)(*((void *)&v96 + 1) + 8 * v15);
              double v17 = objc_getAssociatedObject(v16, &unk_1EB25C09B);
              CGFloat v18 = objc_getAssociatedObject(v16, &unk_1EB25C09C);
              uint64_t v19 = [v18 animationForKey:v17];
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0 || ([v76 containsObject:v19] & 1) == 0)
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  uint64_t v20 = [v16 keyPath];
                  if (v20)
                  {
                    CGFloat v21 = (__CFString *)v20;
                    char v22 = 0;
                    goto LABEL_24;
                  }
LABEL_21:
                  aBlock[0] = MEMORY[0x1E4F143A8];
                  aBlock[1] = 3221225472;
                  aBlock[2] = __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke;
                  aBlock[3] = &unk_1E52DCB30;
                  aBlock[4] = v16;
                  id v94 = v19;
                  id v95 = v17;
                  long long v23 = _Block_copy(aBlock);
                  block[0] = MEMORY[0x1E4F143A8];
                  block[1] = 3221225472;
                  block[2] = __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_2555;
                  block[3] = &unk_1E52DA040;
                  id v92 = v23;
                  uint64_t v24 = qword_1EB25C200;
                  id v25 = v23;
                  if (v24 != -1) {
                    dispatch_once(&qword_1EB25C200, block);
                  }

                  CGFloat v21 = 0;
                  char v22 = 1;
                }
                else
                {
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0) {
                    goto LABEL_21;
                  }
                  char v22 = 0;
                  CGFloat v21 = @"transition";
                }
LABEL_24:
                if ([v18 hasBeenCommitted])
                {
                  if (a4 == 0.0)
                  {
                    [v18 removeAnimationForKey:v17];
                    if (v21 && v6)
                    {
                      v83[0] = MEMORY[0x1E4F143A8];
                      v83[1] = 3221225472;
                      v83[2] = __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_3;
                      v83[3] = &unk_1E52D9F98;
                      id v84 = v18;
                      CGRect v85 = v21;
                      +[UIView performWithoutAnimation:v83];

                      CGRect v26 = v84;
                      goto LABEL_61;
                    }
LABEL_62:

                    goto LABEL_63;
                  }
                  CGRect v26 = (void *)[v19 copy];
                  if (v26)
                  {
                    [v18 convertTime:0 fromLayer:CACurrentMediaTime()];
                    double v33 = v32;
                    [v26 beginTime];
                    double v35 = v33 - v34;
                    [v26 speed];
                    double v37 = v35 * v36;
                    [v26 timeOffset];
                    double v39 = v37 - v38;
                    double v40 = [v26 timingFunction];
                    [v26 duration];
                    double v42 = v39 / v41;
                    *(float *)&double v42 = v42;
                    [v40 _solveForInput:v42];
                    float v44 = v43;

                    BOOL v45 = v44 == 0.0;
                    if (!v74) {
                      BOOL v45 = v44 == 1.0;
                    }
                    double v46 = 0.0;
                    if (!v45)
                    {
                      double v47 = v44;
                      if (!v74) {
                        double v47 = 1.0 - v44;
                      }
                      double v46 = a4 / v47;
                    }
                    if (v74)
                    {
                      objc_opt_class();
                      if (objc_opt_isKindOfClass())
                      {
                        if ([v16 isAdditive])
                        {
                          objc_opt_class();
                          char isKindOfClass = objc_opt_isKindOfClass();
                          if (v21)
                          {
                            if (isKindOfClass)
                            {
                              double v49 = [v16 keyPath];
                              double v50 = _UIFromValueForAnimation(v26, v49, v18, v71);
                              [v26 setFromValue:v50];

                              [v26 setAdditive:0];
                              [v26 setToValue:0];
                            }
                          }
                        }
                      }
                      [v26 setAutoreverses:1];
                      double v51 = -v46 - (v46 - a4);
                    }
                    else
                    {
                      [v26 setAutoreverses:1];
                      double v51 = -(v46 - a4);
                    }
                    [v26 setBeginTime:v51];
                    if (v46 == 0.0) {
                      double v52 = 0.001;
                    }
                    else {
                      double v52 = v46;
                    }
                    [v26 setDuration:v52];
                    [v26 setBeginTimeMode:@"relative"];
                    [v26 setFillMode:v72];
                    double v53 = [MEMORY[0x1E4F39C10] functionWithName:v69];
                    [v26 setTimingFunction:v53];

                    if (v74)
                    {
                      objc_opt_class();
                      char v54 = objc_opt_isKindOfClass();
                      if (v21)
                      {
                        if (v54)
                        {
                          double v55 = [v18 valueForKeyPath:v21];
                          [v26 setToValue:v55];
                        }
                      }
                    }
                    double v56 = [MEMORY[0x1E4F39B38] animation];
                    CGFloat v57 = [v26 delegate];
                    [v56 setDelegate:v57];

                    [v26 setDelegate:0];
                    long long v104 = v26;
                    CGFloat v58 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v104 count:1];
                    [v56 setAnimations:v58];

                    [v56 setFillMode:v72];
                    [v56 setDuration:a4];
                    double v63 = _UIGetAnimationCurveSpline(a5, v59, v60, v61, v62);
                    [v56 setTimingFunction:v63];

                    [v70 _incrementDidEndCount];
                    [v18 addAnimation:v56 forKey:v17];
                    double v64 = [v18 animationForKey:v17];
                    if (v64) {
                      [v76 addObject:v64];
                    }
                    if (v21 && v74)
                    {
                      v78[0] = MEMORY[0x1E4F143A8];
                      v78[1] = 3221225472;
                      v78[2] = __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_4;
                      v78[3] = &unk_1E52DD450;
                      id v79 = v18;
                      id v80 = v26;
                      CGRect v81 = v21;
                      id v82 = v71;
                      +[UIView performWithoutAnimation:v78];
                    }
                    BOOL v6 = v74;
                  }
                }
                else if (v6)
                {
                  [v18 removeAnimationForKey:v17];
                  if (v22) {
                    goto LABEL_62;
                  }
                  v86[0] = MEMORY[0x1E4F143A8];
                  v86[1] = 3221225472;
                  v86[2] = __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_2;
                  v86[3] = &unk_1E52DD450;
                  id v87 = v18;
                  CGRect v88 = v16;
                  CGRect v89 = v21;
                  id v90 = v71;
                  +[UIView performWithoutAnimation:v86];

                  CGRect v26 = v87;
                }
                else
                {
                  CGRect v26 = (void *)[v16 copy];
                  __int16 v31 = _UIGetAnimationCurveSpline(a5, v27, v28, v29, v30);
                  [v26 setTimingFunction:v31];

                  BOOL v6 = v74;
                  [v18 addAnimation:v26 forKey:v17];
                }
LABEL_61:

                goto LABEL_62;
              }
LABEL_63:

              ++v15;
            }
            while (v14 != v15);
            uint64_t v14 = [v75 countByEnumeratingWithState:&v96 objects:v105 count:16];
          }
          while (v14);
        }

        uint64_t v9 = v68 + 1;
      }
      while (v68 + 1 != v67);
      uint64_t v67 = [obj countByEnumeratingWithState:&v100 objects:v106 count:16];
      if (!v67)
      {
LABEL_67:

        id v8 = v71;
        break;
      }
    }
  }
}

void __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  char v2 = objc_opt_respondsToSelector();
  uint64_t v3 = (void *)a1[4];
  if (v2) {
    [v3 debugDescription];
  }
  else {
  id v4 = [v3 description];
  }
  char v5 = objc_opt_respondsToSelector();
  BOOL v6 = (void *)a1[5];
  if (v5) {
    [v6 debugDescription];
  }
  else {
  id v7 = [v6 description];
  }
  id v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("Animation", &kFixedAnimationDuration_block_invoke_2___s_category) + 8);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = a1[6];
    double v10 = (void *)MEMORY[0x1E4F29060];
    uint64_t v11 = v8;
    CGRect v12 = [v10 callStackSymbols];
    int v13 = 138413058;
    uint64_t v14 = v4;
    __int16 v15 = 2112;
    double v16 = v7;
    __int16 v17 = 2112;
    uint64_t v18 = v9;
    __int16 v19 = 2112;
    uint64_t v20 = v12;
    _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "Attempting to complete an animation without a keyPath. tracked animation=%@; layer animation=%@, animationKey=%@; trace=%@;",
      (uint8_t *)&v13,
      0x2Au);
  }
}

uint64_t __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_2555(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_2(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  _UIFromValueForAnimation(*(void **)(a1 + 40), *(void **)(a1 + 48), v2, *(void **)(a1 + 56));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setValue:v3 forKeyPath:*(void *)(a1 + 48)];
}

void __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_3(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  id v4 = [v2 presentationLayer];
  id v3 = [v4 valueForKeyPath:*(void *)(a1 + 40)];
  [v2 setValue:v3 forKeyPath:*(void *)(a1 + 40)];
}

void __71__UIView_Animation___completeAnimationWithUUID_duration_curve_reverse___block_invoke_4(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  _UIFromValueForAnimation(*(void **)(a1 + 40), *(void **)(a1 + 48), v2, *(void **)(a1 + 56));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setValue:v3 forKeyPath:*(void *)(a1 + 48)];
}

+ (void)_stopAnimationWithUUID:(id)a3
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  if (v3)
  {
    CGRect v26 = v3;
    [(id)qword_1EB25C0E8 objectForKey:v3];
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v24 = [obj countByEnumeratingWithState:&v42 objects:v47 count:16];
    if (v24)
    {
      uint64_t v23 = *(void *)v43;
      id v4 = off_1E52D4000;
      char v5 = (char *)&unk_1EB25C09B;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v43 != v23) {
            objc_enumerationMutation(obj);
          }
          uint64_t v25 = v6;
          id v7 = *(void **)(*((void *)&v42 + 1) + 8 * v6);
          [v7 _setFinishedPosition:2];
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          id v29 = [v7 _trackedAnimations];
          uint64_t v30 = [v29 countByEnumeratingWithState:&v38 objects:v46 count:16];
          if (v30)
          {
            uint64_t v8 = *(void *)v39;
            uint64_t v27 = *(void *)v39;
            double v28 = v7;
            do
            {
              for (uint64_t i = 0; i != v30; ++i)
              {
                if (*(void *)v39 != v8) {
                  objc_enumerationMutation(v29);
                }
                double v10 = *(void **)(*((void *)&v38 + 1) + 8 * i);
                uint64_t v11 = [(__objc2_class *)v4[431] _getPropertyAnimationForState:v7];
                CGRect v12 = objc_getAssociatedObject(v10, v5 + 1);
                int v13 = objc_getAssociatedObject(v10, v5);
                [v12 removeAnimationForKey:v13];
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  uint64_t v14 = v5;
                  __int16 v15 = v4;
                  double v16 = [v10 keyPath];
                  if (v16)
                  {
                    if (v11)
                    {
                      __int16 v17 = [v11 _originalToValueForKey:v16 inLayer:v12];

                      if (!v17)
                      {
                        uint64_t v18 = _UIToValueForAnimation(v10, v16, v12);
                        [v11 _setOriginalToValue:v18 forKey:v16 inLayer:v12];
                      }
                    }
                    if ([v12 hasBeenCommitted])
                    {
                      if ([v16 isEqualToString:@"position"])
                      {
                        __int16 v19 = [v12 presentationLayer];
                        uint64_t v20 = [v19 valueForKeyPath:v16];
                        [v20 CGPointValue];
                      }
                      v35[0] = MEMORY[0x1E4F143A8];
                      v35[1] = 3221225472;
                      v35[2] = __44__UIView_Animation___stopAnimationWithUUID___block_invoke;
                      v35[3] = &unk_1E52D9F98;
                      id v36 = v12;
                      id v37 = v16;
                      +[UIView performWithoutAnimation:v35];

                      uint64_t v21 = &v36;
                    }
                    else
                    {
                      v31[0] = MEMORY[0x1E4F143A8];
                      v31[1] = 3221225472;
                      v31[2] = __44__UIView_Animation___stopAnimationWithUUID___block_invoke_2;
                      v31[3] = &unk_1E52DD450;
                      v32[0] = v12;
                      v32[1] = v10;
                      id v33 = v16;
                      id v34 = v26;
                      +[UIView performWithoutAnimation:v31];

                      uint64_t v21 = (id *)v32;
                    }
                  }
                  id v4 = v15;
                  char v5 = v14;
                  uint64_t v8 = v27;
                  id v7 = v28;
                }
              }
              uint64_t v30 = [v29 countByEnumeratingWithState:&v38 objects:v46 count:16];
            }
            while (v30);
          }

          [v7 _incrementDidEndCount];
          uint64_t v6 = v25 + 1;
        }
        while (v25 + 1 != v24);
        uint64_t v24 = [obj countByEnumeratingWithState:&v42 objects:v47 count:16];
      }
      while (v24);
    }

    id v3 = v26;
  }
}

void __44__UIView_Animation___stopAnimationWithUUID___block_invoke(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  id v4 = [v2 presentationLayer];
  id v3 = [v4 valueForKeyPath:*(void *)(a1 + 40)];
  [v2 setValue:v3 forKeyPath:*(void *)(a1 + 40)];
}

void __44__UIView_Animation___stopAnimationWithUUID___block_invoke_2(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  _UIFromValueForAnimation(*(void **)(a1 + 40), *(void **)(a1 + 48), v2, *(void **)(a1 + 56));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v2 setValue:v3 forKeyPath:*(void *)(a1 + 48)];
}

+ (void)_updateModelValuesForAnimationWithUUID:(id)a3 useInitialValues:(BOOL)a4 animatable:(BOOL)a5 stateBlock:(id)a6 animationBlock:(id)a7
{
  BOOL v34 = a5;
  BOOL v36 = a4;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a6;
  uint64_t v11 = (void (**)(id, void *, void *))a7;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  double v35 = v9;
  obuint64_t j = [(id)qword_1EB25C0E8 objectForKey:v9];
  uint64_t v31 = [obj countByEnumeratingWithState:&v47 objects:v52 count:16];
  if (v31)
  {
    uint64_t v29 = *(void *)v48;
    id v30 = v10;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v48 != v29) {
          objc_enumerationMutation(obj);
        }
        uint64_t v33 = v12;
        int v13 = *(void **)(*((void *)&v47 + 1) + 8 * v12);
        if (v36) {
          [v13 _setFinishedPosition:1];
        }
        id v37 = [v13 _outerPropertyAnimator:1];
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        double v32 = v13;
        uint64_t v14 = [v13 _trackedAnimations];
        __int16 v15 = (void *)[v14 copy];

        id v38 = v15;
        uint64_t v16 = [v15 countByEnumeratingWithState:&v43 objects:v51 count:16];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = *(void *)v44;
          do
          {
            for (uint64_t i = 0; i != v17; ++i)
            {
              if (*(void *)v44 != v18) {
                objc_enumerationMutation(v38);
              }
              uint64_t v20 = *(void **)(*((void *)&v43 + 1) + 8 * i);
              uint64_t v21 = objc_getAssociatedObject(v20, &unk_1EB25C09C);
              char v22 = objc_getAssociatedObject(v20, &unk_1EB25C09B);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                uint64_t v23 = [v20 keyPath];
                if (([v22 hasPrefix:@"UIPacingAnimationForAnimatorsKey"] & 1) == 0 && v23)
                {
                  uint64_t v24 = _UIFromValueForAnimation(v20, v23, v21, v35);
                  if (!v37
                    || ([v37 _originalToValueForKey:v23 inLayer:v21],
                        (uint64_t v25 = objc_claimAutoreleasedReturnValue()) == 0))
                  {
                    uint64_t v25 = _UIToValueForAnimation(v20, v23, v21);
                  }
                  if (v36) {
                    CGRect v26 = v24;
                  }
                  else {
                    CGRect v26 = v25;
                  }
                  id v27 = v26;
                  if (v34)
                  {
                    [v21 setValue:v27 forKeyPath:v23];
                  }
                  else
                  {
                    v39[0] = MEMORY[0x1E4F143A8];
                    v39[1] = 3221225472;
                    v39[2] = __114__UIView_Animation___updateModelValuesForAnimationWithUUID_useInitialValues_animatable_stateBlock_animationBlock___block_invoke;
                    v39[3] = &unk_1E52DCB30;
                    id v40 = v21;
                    id v41 = v27;
                    id v42 = v23;
                    +[UIView performWithoutAnimation:v39];
                  }
                }
              }
              if (v11) {
                v11[2](v11, v21, v22);
              }
            }
            uint64_t v17 = [v38 countByEnumeratingWithState:&v43 objects:v51 count:16];
          }
          while (v17);
        }

        id v10 = v30;
        if (v30) {
          (*((void (**)(id, void *))v30 + 2))(v30, v32);
        }

        uint64_t v12 = v33 + 1;
      }
      while (v33 + 1 != v31);
      uint64_t v31 = [obj countByEnumeratingWithState:&v47 objects:v52 count:16];
    }
    while (v31);
  }
}

uint64_t __114__UIView_Animation___updateModelValuesForAnimationWithUUID_useInitialValues_animatable_stateBlock_animationBlock___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) setValue:*(void *)(a1 + 40) forKeyPath:*(void *)(a1 + 48)];
}

+ (void)_finalizeStoppedAnimationWithUUID:(id)a3 reverseAnimation:(BOOL)a4 state:(id)a5 performCompletionsImmediately:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v8 = a4;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a5;
  if (v9)
  {
    id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v12 = v11;
    if (v10)
    {
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 3221225472;
      v31[2] = __108__UIView_Animation___finalizeStoppedAnimationWithUUID_reverseAnimation_state_performCompletionsImmediately___block_invoke;
      v31[3] = &unk_1E530FF70;
      int v13 = &v32;
      id v32 = v10;
      BOOL v33 = v8;
      uint64_t v14 = v31;
      id v15 = v9;
      BOOL v16 = v8;
      uint64_t v17 = 1;
    }
    else
    {
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 3221225472;
      v29[2] = __108__UIView_Animation___finalizeStoppedAnimationWithUUID_reverseAnimation_state_performCompletionsImmediately___block_invoke_3;
      v29[3] = &unk_1E530FF98;
      int v13 = &v30;
      id v30 = v11;
      uint64_t v14 = v29;
      id v15 = v9;
      BOOL v16 = v8;
      uint64_t v17 = 0;
    }
    +[UIView _updateModelValuesForAnimationWithUUID:v15 useInitialValues:v16 animatable:v17 stateBlock:v14 animationBlock:0];

    +[UIView _disableAnimationTracking:v9];
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v18 = v12;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v25 objects:v34 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v26;
      uint64_t v22 = v8 ^ 1;
      do
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v26 != v21) {
            objc_enumerationMutation(v18);
          }
          uint64_t v24 = *(void **)(*((void *)&v25 + 1) + 8 * i);
          objc_msgSend(v24, "_animationDidStopWithNilAnimationFinished:", v22, (void)v25);
          if (v6) {
            [v24 sendDelegateDidStopManually:v22];
          }
        }
        uint64_t v20 = [v18 countByEnumeratingWithState:&v25 objects:v34 count:16];
      }
      while (v20);
    }
  }
}

void __108__UIView_Animation___finalizeStoppedAnimationWithUUID_reverseAnimation_state_performCompletionsImmediately___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __108__UIView_Animation___finalizeStoppedAnimationWithUUID_reverseAnimation_state_performCompletionsImmediately___block_invoke_2;
  v6[3] = &unk_1E52E0478;
  id v7 = v3;
  char v8 = *(unsigned char *)(a1 + 40);
  id v5 = v3;
  [v4 _addCompletion:v6];
}

uint64_t __108__UIView_Animation___finalizeStoppedAnimationWithUUID_reverseAnimation_state_performCompletionsImmediately___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _animationDidStopWithNilAnimationFinished:*(unsigned char *)(a1 + 40) == 0];
}

uint64_t __108__UIView_Animation___finalizeStoppedAnimationWithUUID_reverseAnimation_state_performCompletionsImmediately___block_invoke_3(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

+ (void)_finalizeStoppedAnimationWithUUID:(id)a3 reverseAnimation:(BOOL)a4
{
}

+ (id)_alongsideAnimations
{
  char v2 = _Block_copy((const void *)qword_1EB25C0F0);
  return v2;
}

+ (void)_inheritAnimationParameters
{
  uint64_t v2 = __currentViewAnimationState;
  uint64_t v3 = *(void *)(__currentViewAnimationState + 8);
  if (v3)
  {
    *(void *)(__currentViewAnimationState + 40) = *(void *)(v3 + 40);
    *(void *)(v2 + 88) = *(void *)(v3 + 88);
  }
}

void __42__UIView_Animation__setAnimationsEnabled___block_invoke()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v0 = *(NSObject **)(__UILogGetCategoryCachedImpl("Animation", &kFixedAnimationDuration_block_invoke_3___s_category) + 8);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    uint64_t v1 = (void *)MEMORY[0x1E4F29060];
    uint64_t v2 = v0;
    uint64_t v3 = [v1 callStackSymbols];
    int v4 = 138412290;
    id v5 = v3;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "+[UIView setAnimationsEnabled:] being called from a background thread. Performing any operation from a background thread on UIView or a subclass is not supported and may result in unexpected and insidious behavior. trace=%@", (uint8_t *)&v4, 0xCu);
  }
}

+ (void)_performWithAnimation:(id)a3
{
  uint64_t v3 = (void (**)(void))a3;
  BOOL v4 = +[UIView areAnimationsEnabled];
  +[UIView setAnimationsEnabled:1];
  v3[2](v3);

  +[UIView setAnimationsEnabled:v4];
}

+ (void)setAnimationDuration:(NSTimeInterval)duration
{
  if (__currentViewAnimationState) {
    *(NSTimeInterval *)(__currentViewAnimationState + 40) = duration;
  }
}

+ (void)setAnimationDelay:(NSTimeInterval)delay
{
  if (__currentViewAnimationState) {
    *(NSTimeInterval *)(__currentViewAnimationState + 48) = delay;
  }
}

+ (void)setAnimationFrameInterval:(double)a3
{
  if (__currentViewAnimationState) {
    *(double *)(__currentViewAnimationState + 56) = a3;
  }
}

+ (void)setAnimationStartDate:(NSDate *)startDate
{
  if (__currentViewAnimationState)
  {
    [(NSDate *)startDate timeIntervalSinceReferenceDate];
    *(void *)(__currentViewAnimationState + 80) = v3;
  }
}

+ (void)setAnimationStartTime:(double)a3
{
  if (__currentViewAnimationState) {
    *(double *)(__currentViewAnimationState + 80) = a3;
  }
}

+ (void)setAnimationPreventsAdditive:(BOOL)a3
{
  if (__currentViewAnimationState) {
    *(unsigned char *)(__currentViewAnimationState + 209) = a3;
  }
}

+ (void)setAnimationCurve:(UIViewAnimationCurve)curve
{
  if (__currentViewAnimationState) {
    *(void *)(__currentViewAnimationState + 88) = curve;
  }
}

+ (void)setAnimationRepeatCount:(float)repeatCount
{
  if (__currentViewAnimationState) {
    *(float *)(__currentViewAnimationState + 96) = repeatCount;
  }
}

+ (void)setAnimationRepeatAutoreverses:(BOOL)repeatAutoreverses
{
  if (__currentViewAnimationState)
  {
    if (repeatAutoreverses) {
      char v3 = 8;
    }
    else {
      char v3 = 0;
    }
    *(unsigned char *)(__currentViewAnimationState + 172) = *(unsigned char *)(__currentViewAnimationState + 172) & 0xF7 | v3;
  }
}

+ (void)setAnimationBeginsFromCurrentState:(BOOL)fromCurrentState
{
  if (__currentViewAnimationState)
  {
    if (fromCurrentState) {
      char v3 = 2;
    }
    else {
      char v3 = 0;
    }
    *(unsigned char *)(__currentViewAnimationState + 172) = *(unsigned char *)(__currentViewAnimationState + 172) & 0xFD | v3;
  }
}

+ (void)setAnimationTransition:(UIViewAnimationTransition)transition forView:(UIView *)view cache:(BOOL)cache
{
  BOOL v5 = cache;
  char v8 = view;
  uint64_t v9 = __currentViewAnimationState;
  if (__currentViewAnimationState)
  {
    *(void *)(__currentViewAnimationState + 104) = transition;
    id v11 = v8;
    objc_storeStrong((id *)(v9 + 112), view);
    char v8 = v11;
    if (v5) {
      char v10 = 4;
    }
    else {
      char v10 = 0;
    }
    *(unsigned char *)(__currentViewAnimationState + 172) = *(unsigned char *)(__currentViewAnimationState + 172) & 0xFB | v10;
  }
}

+ (void)setAnimationWillStartSelector:(SEL)selector
{
  if (__currentViewAnimationState)
  {
    if (selector) {
      SEL v3 = selector;
    }
    else {
      SEL v3 = 0;
    }
    *(void *)(__currentViewAnimationState + 152) = v3;
  }
}

+ (void)setAnimationDidStopSelector:(SEL)selector
{
  if (__currentViewAnimationState)
  {
    if (selector) {
      SEL v3 = selector;
    }
    else {
      SEL v3 = 0;
    }
    *(void *)(__currentViewAnimationState + 160) = v3;
  }
}

- (void)_clearAnimationFilters
{
  SEL v3 = [(UIView *)self layer];
  BOOL v4 = [v3 filters];
  id v13 = (id)[v4 mutableCopy];

  int v5 = [v13 count];
  uint64_t v6 = (v5 - 1);
  if (v5 - 1 >= 0)
  {
    do
    {
      id v7 = [v13 objectAtIndex:v6];
      char v8 = [v7 name];
      int v9 = [v8 isEqualToString:@"curl"];

      if (v9) {
        [v13 removeObjectAtIndex:v6];
      }
    }
    while (v6-- > 0);
  }
  if ([v13 count]) {
    id v11 = v13;
  }
  else {
    id v11 = 0;
  }
  uint64_t v12 = [(UIView *)self layer];
  [v12 setFilters:v11];
}

- (void)_removePropertyAnimationsForLayerKeyPath:(id)a3
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v23 = a3;
  if (!v23)
  {
    uint64_t v21 = [MEMORY[0x1E4F28B00] currentHandler];
    [v21 handleFailureInMethod:a2, self, @"UIView.m", 16428, @"Invalid parameter not satisfying: %@", @"keyPath != nil" object file lineNumber description];
  }
  int v5 = [(UIView *)self layer];
  uint64_t v6 = [v5 animationKeys];
  uint64_t v22 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v6, "count"));
  objc_opt_class();
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v7 = v6;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v29 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v28 + 1) + 8 * i);
        id v13 = [v5 animationForKey:v12];
        if (objc_opt_isKindOfClass())
        {
          uint64_t v14 = [v13 keyPath];
          int v15 = [v23 isEqualToString:v14];

          if (v15) {
            [v22 addObject:v12];
          }
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v28 objects:v33 count:16];
    }
    while (v9);
  }

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v16 = v22;
  uint64_t v17 = [v16 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v25;
    do
    {
      for (uint64_t j = 0; j != v18; ++j)
      {
        if (*(void *)v25 != v19) {
          objc_enumerationMutation(v16);
        }
        [v5 removeAnimationForKey:*(void *)(*((void *)&v24 + 1) + 8 * j)];
      }
      uint64_t v18 = [v16 countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v18);
  }
}

- (void)_enumerateDescendentViews:(id)a3
{
  BOOL v4 = (void (**)(id, UIView *, unsigned char *))a3;
  char v6 = 0;
  v4[2](v4, self, &v6);
  if (!v6)
  {
    int v5 = [(UIView *)self subviews];
    _enumerateViewForest(v5, (uint64_t)v4, &v6);
  }
}

+ (int)_degreesToRotateFromInterfaceOrientation:(int64_t)a3 toInterfaceOrientation:(int64_t)a4
{
  if (a4 == 2) {
    int v4 = 180;
  }
  else {
    int v4 = 0;
  }
  if (a4 == 4) {
    int v5 = -90;
  }
  else {
    int v5 = v4;
  }
  if (a4 == 3) {
    int v6 = 90;
  }
  else {
    int v6 = v5;
  }
  if (a4 == 1) {
    int v6 = 0;
  }
  if (a3 == 2) {
    int v7 = -180;
  }
  else {
    int v7 = 0;
  }
  if (a3 == 4) {
    int v8 = 90;
  }
  else {
    int v8 = v7;
  }
  if (a3 == 3) {
    int v9 = -90;
  }
  else {
    int v9 = v8;
  }
  if (a3 == 1) {
    int v9 = 0;
  }
  int v10 = v9 + v6;
  int v11 = v10 + 360;
  if (v10 >= -180) {
    int v11 = v10;
  }
  if (v10 <= 180) {
    return v11;
  }
  else {
    return v10 - 360;
  }
}

+ (double)_durationForRotationFromInterfaceOrientation:(int64_t)a3 toInterfaceOrientation:(int64_t)a4
{
  [(id)UIApp windowRotationDuration];
  +[UIView _durationForRotationFromInterfaceOrientation:toInterfaceOrientation:withBaseDuration:](UIView, "_durationForRotationFromInterfaceOrientation:toInterfaceOrientation:withBaseDuration:", a3, a4);
  return result;
}

+ (void)_performWithDurationOverride:(double)a3 animations:(id)a4
{
  int v7 = (void (**)(void))a4;
  +[UIView _currentAnimationDuration];
  double v6 = v5;
  +[UIView setAnimationDuration:a3];
  if (v7) {
    v7[2]();
  }
  +[UIView setAnimationDuration:v6];
}

+ (void)modifyAnimationsWithRepeatCount:(CGFloat)count autoreverses:(BOOL)autoreverses animations:(void *)animations
{
  BOOL v5 = autoreverses;
  uint64_t v19 = animations;
  id v7 = (id)__currentViewAnimationState;
  int v8 = v7;
  if (!v7) {
    goto LABEL_8;
  }
  int v9 = (id *)v7;
  id WeakRetained = 0;
  int v11 = v9;
  while (1)
  {
    uint64_t v12 = WeakRetained;
    id WeakRetained = objc_loadWeakRetained(v11 + 34);

    if (WeakRetained)
    {
      if ([WeakRetained isInterruptible]) {
        break;
      }
    }
    id v13 = (id *)v11[1];

    int v11 = v13;
    if (!v13)
    {
      int v11 = (id *)WeakRetained;
      id WeakRetained = 0;
      break;
    }
  }

  if (!WeakRetained)
  {
    int v14 = *((_DWORD *)v9 + 24);
    uint64_t v15 = *((unsigned __int8 *)v9 + 172);
    float v16 = count;
    *((float *)v9 + 24) = v16;
    if (v5) {
      char v17 = 8;
    }
    else {
      char v17 = 0;
    }
    char v18 = v15 & 0xF7;
    *((unsigned char *)v9 + 172) = v15 & 0xF7 | v17;
    if (v19)
    {
      v19[2]();
      char v18 = *((unsigned char *)v9 + 172) & 0xF7;
    }
    *((_DWORD *)v9 + 24) = v14;
    *((unsigned char *)v9 + 172) = v18 | v15 & 8;
  }
  else
  {
LABEL_8:
    if (v19) {
      v19[2]();
    }
  }
}

+ (void)_animateWithAnimationSettings:(id)a3 animations:(id)a4 completion:(id)a5
{
  id v7 = a4;
  int v8 = (void *)MEMORY[0x1E4F4F680];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __89__UIView_UIViewAnimationWithBlocks___animateWithAnimationSettings_animations_completion___block_invoke;
  v10[3] = &unk_1E52D9FE8;
  id v11 = v7;
  id v9 = v7;
  [v8 tryAnimatingWithSettings:a3 actions:v10 completion:a5];
}

uint64_t __89__UIView_UIViewAnimationWithBlocks___animateWithAnimationSettings_animations_completion___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

+ (void)animateWithSpringDuration:(NSTimeInterval)duration bounce:(CGFloat)bounce initialSpringVelocity:(CGFloat)velocity delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void *)animations completion:(void *)completion
{
  double v23 = 0.0;
  double v24 = 0.0;
  double v21 = 0.0;
  double v22 = 0.0;
  uint64_t v15 = completion;
  float v16 = animations;
  +[UISpringTimingParameters _convertBounce:&v24 toDampingRatio:bounce];
  +[UISpringTimingParameters _convertDampingRatio:&v23 response:&v22 toMass:&v21 stiffness:v24 damping:duration];
  double v18 = v22;
  double v17 = v23;
  double v19 = v21;
  self;
  _durationOfSpringAnimation(v17, v18, v19, velocity);
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  _OWORD v20[2] = __128__UIView_UIViewAnimationWithBlocks__animateWithSpringDuration_bounce_initialSpringVelocity_delay_options_animations_completion___block_invoke;
  v20[3] = &__block_descriptor_56_e5_v8__0l;
  *(NSTimeInterval *)&v20[4] = duration;
  *(CGFloat *)&v20[5] = bounce;
  *(CGFloat *)&v20[6] = velocity;
  objc_msgSend(a1, "_setupAnimationWithDuration:delay:view:options:factory:animations:start:animationStateGenerator:completion:", 0, options, 0, v16, 0, v20, v15);
}

uint64_t __128__UIView_UIViewAnimationWithBlocks__animateWithSpringDuration_bounce_initialSpringVelocity_delay_options_animations_completion___block_invoke(double *a1)
{
  +[UIViewAnimationState pushViewAnimationState:0 context:0];
  uint64_t v2 = (void *)__currentViewAnimationState;
  double v3 = a1[4];
  double v4 = a1[5];
  double v5 = a1[6];
  return [v2 generateSpringPropertiesForPerceptualDuration:v3 bounce:v4 velocity:v5];
}

+ (void)_animateWithDuration:(double)a3 delay:(double)a4 options:(unint64_t)a5 animations:(id)a6 start:(id)a7 completion:(id)a8
{
}

+ (void)transitionFromView:(UIView *)fromView toView:(UIView *)toView duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options completion:(void *)completion
{
  uint64_t v12 = fromView;
  id v13 = toView;
  int v14 = completion;
  if ((options & 0x100) != 0)
  {
    [(UIView *)v13 setHidden:1];
    uint64_t v15 = [(UIView *)v12 superview];
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    v25[2] = __91__UIView_UIViewAnimationWithBlocks__transitionFromView_toView_duration_options_completion___block_invoke;
    void v25[3] = &unk_1E52D9F98;
    float v16 = (id *)&v26;
    double v17 = (id *)&v27;
    long long v26 = v12;
    long long v27 = v13;
    uint64_t v20 = v13;
    double v21 = v12;
    [a1 _setupAnimationWithDuration:v15 delay:options view:0 options:v25 factory:0 animations:0 start:duration animationStateGenerator:0.0 completion:v14];
  }
  else
  {
    uint64_t v15 = [(UIView *)v12 superview];
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    void v22[2] = __91__UIView_UIViewAnimationWithBlocks__transitionFromView_toView_duration_options_completion___block_invoke_2;
    void v22[3] = &unk_1E52D9F98;
    float v16 = (id *)&v23;
    double v17 = (id *)&v24;
    double v23 = v12;
    double v24 = v13;
    double v18 = v13;
    double v19 = v12;
    [a1 _setupAnimationWithDuration:v15 delay:options view:0 options:v22 factory:0 animations:0 start:duration animationStateGenerator:0.0 completion:v14];
  }
}

uint64_t __91__UIView_UIViewAnimationWithBlocks__transitionFromView_toView_duration_options_completion___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) setHidden:1];
  uint64_t v2 = *(void **)(a1 + 40);
  return [v2 setHidden:0];
}

uint64_t __91__UIView_UIViewAnimationWithBlocks__transitionFromView_toView_duration_options_completion___block_invoke_2(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) superview];
  [v2 addSubview:*(void *)(a1 + 40)];

  double v3 = *(void **)(a1 + 32);
  return [v3 removeFromSuperview];
}

+ (void)_transitionWithView:(id)a3 duration:(double)a4 options:(unint64_t)a5 transitionOptions:(id)a6 completion:(id)a7
{
  id v12 = a6;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __103__UIView_UIViewAnimationWithBlocks___transitionWithView_duration_options_transitionOptions_completion___block_invoke;
  void v14[3] = &unk_1E52D9F70;
  id v15 = v12;
  id v13 = v12;
  [a1 _setupAnimationWithDuration:a3 delay:a5 view:0 options:v14 factory:0 animations:0 start:a4 animationStateGenerator:0.0 completion:a7];
}

void __103__UIView_UIViewAnimationWithBlocks___transitionWithView_duration_options_transitionOptions_completion___block_invoke(uint64_t a1)
{
}

+ (void)_animateWithFilter:(int)a3 filterView:(id)a4 filterValue:(double)a5 duration:(double)a6 delay:(double)a7 options:(unint64_t)a8 completion:(id)a9
{
  id v16 = a4;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  _OWORD v18[2] = __113__UIView_UIViewAnimationWithBlocks___animateWithFilter_filterView_filterValue_duration_delay_options_completion___block_invoke;
  v18[3] = &unk_1E52FC5F8;
  int v21 = a3;
  id v19 = v16;
  double v20 = a5;
  id v17 = v16;
  [a1 _setupAnimationWithDuration:0 delay:a8 view:0 options:v18 factory:0 animations:0 start:a6 animationStateGenerator:a7 completion:a9];
}

float __113__UIView_UIViewAnimationWithBlocks___animateWithFilter_filterView_filterValue_duration_delay_options_completion___block_invoke(uint64_t a1)
{
  uint64_t v2 = __currentViewAnimationState;
  *(_DWORD *)(__currentViewAnimationState + 128) = *(_DWORD *)(a1 + 48);
  objc_storeStrong((id *)(v2 + 136), *(id *)(a1 + 32));
  float result = *(double *)(a1 + 40);
  *(float *)(__currentViewAnimationState + 144) = result;
  return result;
}

+ (void)performSystemAnimation:(UISystemAnimation)animation onViews:(NSArray *)views options:(UIViewAnimationOptions)options animations:(void *)parallelAnimations completion:(void *)completion
{
  id v11 = views;
  id v12 = parallelAnimations;
  id v13 = completion;
  int v14 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v27 = 0;
  long long v28 = (double *)&v27;
  uint64_t v29 = 0x2020000000;
  uint64_t v30 = 0;
  if (animation)
  {
    id v15 = 0;
  }
  else
  {
    options |= 0x30000uLL;
    uint64_t v30 = 0x3FE0000000000000;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __98__UIView_UIViewAnimationWithBlocks__performSystemAnimation_onViews_options_animations_completion___block_invoke;
    aBlock[3] = &unk_1E52E5E48;
    double v24 = v11;
    long long v26 = &v27;
    id v25 = v14;
    id v15 = _Block_copy(aBlock);
  }
  if (v12) {
    +[UIView _setAlongsideAnimations:v12];
  }
  double v16 = v28[3];
  double v17 = *(double *)&_UIViewDefaultSpringDamping;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  _OWORD v20[2] = __98__UIView_UIViewAnimationWithBlocks__performSystemAnimation_onViews_options_animations_completion___block_invoke_2;
  v20[3] = &unk_1E52E45A0;
  id v18 = v14;
  id v21 = v18;
  id v19 = v13;
  id v22 = v19;
  +[UIView animateWithDuration:options delay:v15 usingSpringWithDamping:v20 initialSpringVelocity:v16 options:0.0 animations:v17 completion:0.0];

  _Block_object_dispose(&v27, 8);
}

void __98__UIView_UIViewAnimationWithBlocks__performSystemAnimation_onViews_options_animations_completion___block_invoke(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  uint64_t v2 = [obj countByEnumeratingWithState:&v37 objects:v42 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v31 = *(void *)v38;
    uint64_t v30 = *MEMORY[0x1E4F3A0D0];
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v38 != v31) {
          objc_enumerationMutation(obj);
        }
        double v5 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        double v6 = [v5 layer];
        char v7 = [v6 shouldRasterize];

        int v8 = [v5 layer];
        [v8 rasterizationScale];
        uint64_t v10 = v9;

        id v11 = [v5 layer];
        id v12 = [v11 filters];

        id v13 = [v5 layer];
        [v13 setShouldRasterize:1];

        int v14 = [v5 layer];
        [v14 setRasterizationScale:0.25];

        double v15 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        double v16 = v15 * UIAnimationDragCoefficient();
        double v17 = [MEMORY[0x1E4F39BC0] filterWithType:v30];
        [v17 setName:@"gaussianBlur"];
        [v17 setCachesInputImage:0];
        [v17 setValue:&unk_1ED3F2908 forKey:@"inputRadius"];
        [v17 setValue:@"low" forKey:@"inputQuality"];
        id v18 = [v5 layer];
        id v41 = v17;
        id v19 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v41 count:1];
        [v18 setFilters:v19];

        CGAffineTransformMakeScale(&v36, 0.25, 0.25);
        [v5 setTransform:&v36];
        [v5 setAlpha:0.0];
        double v20 = [MEMORY[0x1E4F39B48] animationWithKeyPath:@"filters.gaussianBlur.inputRadius"];
        +[UIView _setAnimationAttributes:v20];
        [v20 setRemovedOnCompletion:0];
        [v20 setDuration:v16];
        [v20 setFromValue:&unk_1ED3F2908];
        id v21 = NSNumber;
        [v5 _currentScreenScale];
        double v23 = [v21 numberWithDouble:1.0 / v22 * 200.0];
        [v20 setToValue:v23];

        double v24 = [v5 layer];
        [v24 addAnimation:v20 forKey:0];

        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = __98__UIView_UIViewAnimationWithBlocks__performSystemAnimation_onViews_options_animations_completion___block_invoke_2703;
        aBlock[3] = &unk_1E530FFC0;
        void aBlock[4] = v5;
        id v33 = v12;
        char v35 = v7;
        uint64_t v34 = v10;
        id v25 = v12;
        long long v26 = _Block_copy(aBlock);
        uint64_t v27 = *(void **)(a1 + 40);
        long long v28 = _Block_copy(v26);
        [v27 addObject:v28];
      }
      uint64_t v3 = [obj countByEnumeratingWithState:&v37 objects:v42 count:16];
    }
    while (v3);
  }
}

void __98__UIView_UIViewAnimationWithBlocks__performSystemAnimation_onViews_options_animations_completion___block_invoke_2703(uint64_t a1)
{
  [*(id *)(a1 + 32) removeFromSuperview];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) layer];
  [v3 setFilters:v2];

  double v4 = [*(id *)(a1 + 32) layer];
  [v4 removeAllAnimations];

  uint64_t v5 = *(unsigned __int8 *)(a1 + 56);
  double v6 = [*(id *)(a1 + 32) layer];
  [v6 setShouldRasterize:v5];

  if (*(unsigned char *)(a1 + 56))
  {
    double v7 = *(double *)(a1 + 48);
    id v8 = [*(id *)(a1 + 32) layer];
    [v8 setRasterizationScale:v7];
  }
}

uint64_t __98__UIView_UIViewAnimationWithBlocks__performSystemAnimation_onViews_options_animations_completion___block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v10 + 1) + 8 * v8) + 16))(*(void *)(*((void *)&v10 + 1) + 8 * v8));
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

+ (void)_modifyAnimationsWithPreferredFrameRateRange:(CAFrameRateRange)a3 reason:(id)a4 animations:(id)a5
{
}

+ (void)_conditionallyModifyAnimations:(BOOL)a3 withPreferredFrameRateRange:(CAFrameRateRange)a4 updateReason:(unsigned int)a5 animations:(id)a6
{
  if (a3) {
    objc_msgSend(a1, "_modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:", *(void *)&a5, a6, *(double *)&a4.minimum, *(double *)&a4.maximum, *(double *)&a4.preferred);
  }
  else {
    (*((void (**)(id, __n128, __n128, __n128))a6 + 2))(a6, *(__n128 *)&a4.minimum, *(__n128 *)&a4.maximum, *(__n128 *)&a4.preferred);
  }
}

+ (void)_modifyAnimationsByDecomposingGeometricTypes:(BOOL)a3 animations:(id)a4
{
  BOOL v4 = a3;
  long long v10 = (void (**)(void))a4;
  uint64_t v5 = (id)__currentViewAnimationState;
  uint64_t v6 = v5;
  if (v5)
  {
    char v7 = v5[173];
    if (v4) {
      char v8 = 2;
    }
    else {
      char v8 = 0;
    }
    char v9 = v7 & 0xFD;
    v5[173] = v7 & 0xFD | v8;
    if (v10)
    {
      v10[2]();
      char v9 = v6[173] & 0xFD;
    }
    v6[173] = v9 | v7 & 2;
  }
  else if (v10)
  {
    v10[2]();
  }
}

+ (void)animateKeyframesWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewKeyframeAnimationOptions)options animations:(void *)animations completion:(void *)completion
{
  id v15 = animations;
  long long v12 = completion;
  if (!v15) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"animations parameter of +[UIView animateKeyframesWithDuration:delay:options:animations:] must be non-nil"];
  }
  uint64_t v13 = objc_opt_class();
  if (v13 == objc_opt_class()) {
    UIViewKeyframeAnimationOptions v14 = options;
  }
  else {
    UIViewKeyframeAnimationOptions v14 = options | 0x200;
  }
  [a1 _setupAnimationWithDuration:0 delay:v14 view:0 options:v15 factory:0 animations:&__block_literal_global_2752 start:duration animationStateGenerator:delay completion:v12];
}

uint64_t __101__UIView_UIViewKeyframeAnimations__animateKeyframesWithDuration_delay_options_animations_completion___block_invoke()
{
  return +[UIViewAnimationState pushViewAnimationState:0 context:0];
}

+ (void)addKeyframeWithRelativeStartTime:(double)frameStartTime relativeDuration:(double)frameDuration animations:(void *)animations
{
  char v7 = animations;
  long long v10 = v7;
  if (!v7)
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"animations parameter of +[UIView addKeyframeWithStartTime:duration:animations:] must be non-nil"];
    char v7 = 0;
  }
  if (__currentViewAnimationState && (v8 = objc_opt_class(), v9 = objc_opt_class(), char v7 = v10, v8 == v9)) {
    [(id)__currentViewAnimationState addKeyframeWithRelativeStartTime:v10 relativeDuration:frameStartTime animations:frameDuration];
  }
  else {
    v7[2](v7);
  }
}

- (UIView)initWithSize:(CGSize)a3
{
  return -[UIView initWithFrame:](self, "initWithFrame:", 0.0, 0.0, a3.width, a3.height);
}

+ (void)setAnimationTransition:(int64_t)a3 forView:(id)a4
{
}

- (void)setFrameOrigin:(CGPoint)a3
{
  double y = a3.y;
  double x = a3.x;
  [(UIView *)self frame];
  -[UIView setFrame:](self, "setFrame:", x, y);
}

- (id)hitTest:(CGPoint)a3 forEvent:(__GSEvent *)a4
{
  double y = a3.y;
  double x = a3.x;
  if ((UIViewIgnoresTouchEvents(self) & 1) != 0
    || !-[UIView pointInside:forEvent:](self, "pointInside:forEvent:", a4, x, y))
  {
    id v15 = 0;
  }
  else
  {
    uint64_t v8 = [(CALayer *)self->_layer sublayers];
    uint64_t v9 = (void *)[v8 copy];

    int v10 = [v9 count];
    if (v10 < 1)
    {
LABEL_9:
      id v15 = self;
    }
    else
    {
      uint64_t v11 = v10 + 1;
      while (1)
      {
        long long v12 = [v9 objectAtIndex:(v11 - 2)];
        id v13 = (id)[v12 unsafeUnretainedDelegate];

        if (v13)
        {
          if (_IsKindOfUIView((uint64_t)v13))
          {
            id v14 = v13;
            objc_msgSend(v14, "convertPoint:fromView:", self, x, y);
            objc_msgSend(v14, "hitTest:forEvent:", a4);
            id v15 = (UIView *)objc_claimAutoreleasedReturnValue();

            if (v15) {
              break;
            }
          }
        }
        if ((unint64_t)--v11 <= 1) {
          goto LABEL_9;
        }
      }
    }
  }
  return v15;
}

- (BOOL)pointInside:(CGPoint)a3 forEvent:(__GSEvent *)a4
{
  return -[CALayer containsPoint:](self->_layer, "containsPoint:", a4, a3.x, a3.y);
}

- (void)setClipsSubviews:(BOOL)a3
{
  if (self) {
    [(CALayer *)self->_layer setMasksToBounds:a3];
  }
}

+ (void)_transitionFromView:(void *)a3 toView:(void *)a4 duration:(uint64_t)a5 options:(void *)a6 animations:(void *)a7 completion:
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  id v15 = a7;
  id v25 = self;
  double v16 = +[UIViewController viewControllerForView:v13];
  double v17 = +[UIViewController viewControllerForView:v12];
  id v18 = [v12 superview];
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  void v32[2] = __86__UIView_Internal___transitionFromView_toView_duration_options_animations_completion___block_invoke;
  void v32[3] = &unk_1E530FFE8;
  id v33 = v17;
  BOOL v39 = a1 > 0.0;
  id v34 = v16;
  id v35 = v12;
  id v36 = v13;
  id v37 = v14;
  uint64_t v38 = a5;
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  void v26[2] = __86__UIView_Internal___transitionFromView_toView_duration_options_animations_completion___block_invoke_2;
  v26[3] = &unk_1E5310010;
  id v30 = v15;
  uint64_t v31 = a5;
  id v27 = v34;
  id v28 = v35;
  id v29 = v33;
  id v19 = v15;
  id v20 = v33;
  id v21 = v35;
  id v22 = v34;
  id v23 = v14;
  id v24 = v13;
  [v25 _setupAnimationWithDuration:v18 delay:a5 view:0 options:v32 factory:0 animations:0 start:a1 animationStateGenerator:0.0 completion:v26];
}

uint64_t __86__UIView_Internal___transitionFromView_toView_duration_options_animations_completion___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) beginAppearanceTransition:0 animated:*(unsigned __int8 *)(a1 + 80)];
  [*(id *)(a1 + 40) beginAppearanceTransition:1 animated:*(unsigned __int8 *)(a1 + 80)];
  uint64_t v2 = [*(id *)(a1 + 48) superview];
  [v2 addSubview:*(void *)(a1 + 56)];

  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    uint64_t result = (*(uint64_t (**)(void))(result + 16))();
  }
  if ((*(unsigned char *)(a1 + 74) & 0x70) != 0)
  {
    BOOL v4 = *(void **)(a1 + 48);
    return [v4 removeFromSuperview];
  }
  return result;
}

uint64_t __86__UIView_Internal___transitionFromView_toView_duration_options_animations_completion___block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) endAppearanceTransition];
  if ((*(unsigned char *)(a1 + 66) & 0x70) == 0) {
    [*(id *)(a1 + 40) removeFromSuperview];
  }
  [*(id *)(a1 + 48) endAppearanceTransition];
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

- (id)_focusFallbackScroller
{
  return 0;
}

void __66__UIView_Internal___willChangeToIdiom_onScreen_traverseHierarchy___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  [a2 _willChangeToIdiom:*(void *)(a1 + 48) onScreen:*(void *)(a1 + 32)];
  if (*(unsigned char *)(a1 + 56))
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    BOOL v4 = objc_msgSend(a2, "_allSubviews", 0);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v10;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v4);
          }
          (*(void (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) + 16))();
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v6);
    }
  }
}

- (void)_webCustomViewWasAddedAsSubviewOfView:(void *)a1
{
  if (a1)
  {
    id v3 = a2;
    -[UIView _postMovedFromSuperview:](a1, 0);
    [a1 _subscribeToScrollNotificationsIfNecessary:v3];
    [a1 _makeSubtreePerformSelector:sel__subscribeToScrollNotificationsIfNecessary_ withObject:v3];
  }
}

- (void)_replaceLayer:(id)a3
{
}

- (void)_webCustomViewWillBeRemovedFromSuperview
{
  id v4 = [(UIView *)self window];
  id v3 = [v4 _subtreeMonitorsForView:self];
  __UIViewWillBeRemovedFromSuperview((uint64_t)self, v3);
}

- (void)_webCustomViewWasRemovedFromSuperview:(void *)a1
{
  if (a1)
  {
    id v3 = a2;
    id v5 = [a1 window];
    id v4 = [v5 _subtreeMonitorsForView:a1];
    __UIViewWasRemovedFromSuperview(a1, v3, v4);
  }
}

- (BOOL)_alwaysHandleScrollerMouseEvent
{
  return 0;
}

- (BOOL)_isView
{
  return 1;
}

- (BOOL)_delaysTouchesForSystemGestures
{
  return (*((void *)&self->_viewFlags + 1) >> 30) & 1;
}

- (void)_setDelaysTouchesForSystemGestures:(BOOL)a3
{
  uint64_t v3 = 0x40000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_viewFlags + 1) = *((void *)&self->_viewFlags + 1) & 0xFFFFFFFFBFFFFFFFLL | v3;
}

+ (void)_performBlockWithoutAutomaticallyUpdatingFirstResponder:(void *)a3 forScene:
{
  id v4 = a3;
  id v5 = a2;
  self;
  id v6 = [v4 keyboardSceneDelegate];

  [v6 setAutomaticAppearanceInternalEnabled:0];
  self;
  ++__disablePromoteDescendantToFirstResponderCount;
  v5[2](v5);

  self;
  if (__disablePromoteDescendantToFirstResponderCount) {
    --__disablePromoteDescendantToFirstResponderCount;
  }
  [v6 setAutomaticAppearanceInternalEnabled:1];
}

- (BOOL)_isRootForKeyResponderCycle
{
  return (*(void *)&self->_viewFlags >> 31) & 1;
}

- (id)_rootForKeyResponderCycle
{
  if ([(UIView *)self _isRootForKeyResponderCycle])
  {
    uint64_t v3 = self;
  }
  else
  {
    id v4 = [[(UIView *)self superview] _rootForKeyResponderCycle];
    id v5 = v4;
    if (v4)
    {
      id v6 = v4;
    }
    else
    {
      id v6 = [(UIView *)self window];
    }
    uint64_t v3 = v6;
  }
  return v3;
}

- (void)_collectKeyViews:(id)a3
{
}

uint64_t __37__UIView_Internal___collectKeyViews___block_invoke(uint64_t a1, void *a2)
{
  return [a2 isHidden] ^ 1;
}

uint64_t __37__UIView_Internal___collectKeyViews___block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 _shouldCollectAsKeyView];
}

- (void)_collectKeyViews:(id)a3 visibilityTest:(id)a4 passingTest:(id)a5
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  long long v9 = (unsigned int (**)(id, void *))a4;
  id v10 = a5;
  long long v11 = (unsigned int (**)(void, void))v10;
  if (v9 && v10)
  {
    if ([(UIResponder *)self _requiresKeyboardWhenFirstResponder])
    {
      if (((unsigned int (**)(void, UIView *))v11)[2](v11, self)) {
        [v8 addObject:self];
      }
    }
    else
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v12 = [(UIView *)self _allSubviews];
      uint64_t v13 = [v12 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)v19;
        do
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (*(void *)v19 != v15) {
              objc_enumerationMutation(v12);
            }
            double v17 = *(void **)(*((void *)&v18 + 1) + 8 * i);
            if (v9[2](v9, v17)) {
              [v17 _collectKeyViews:v8 visibilityTest:v9 passingTest:v11];
            }
          }
          uint64_t v14 = [v12 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v14);
      }
    }
  }
}

- (void)_collectKeyViews:(id)a3 visibilityTest:(id)a4 passingTest:(id)a5 subviewsTest:(id)a6
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  long long v11 = (unsigned int (**)(id, void *))a4;
  long long v12 = (unsigned int (**)(id, UIView *))a5;
  uint64_t v13 = (unsigned int (**)(id, UIView *))a6;
  if (v11 && v12)
  {
    if (v12[2](v12, self)) {
      [v10 addObject:self];
    }
    if (!v13 || v13[2](v13, self))
    {
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      uint64_t v14 = [(UIView *)self _allSubviews];
      uint64_t v15 = [v14 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v21;
        do
        {
          for (uint64_t i = 0; i != v16; ++i)
          {
            if (*(void *)v21 != v17) {
              objc_enumerationMutation(v14);
            }
            long long v19 = *(void **)(*((void *)&v20 + 1) + 8 * i);
            if (v11[2](v11, v19)) {
              [v19 _collectKeyViews:v10 visibilityTest:v11 passingTest:v12 subviewsTest:v13];
            }
          }
          uint64_t v16 = [v14 countByEnumeratingWithState:&v20 objects:v24 count:16];
        }
        while (v16);
      }
    }
  }
}

- (BOOL)_canHandleStatusBarTouchAtLocation:(CGPoint)a3
{
  double y = a3.y;
  double x = a3.x;
  id v6 = [(UIView *)self superview];
  objc_msgSend(v6, "convertPoint:fromView:", self, x, y);
  return objc_msgSend(v6, "_canHandleStatusBarTouchAtLocation:");
}

- (void)_setContentImage:(uint64_t)a1
{
  if (a1)
  {
    uint64_t v3 = *(void **)(a1 + 160);
    id v4 = a2;
    id v5 = v3;
    id v6 = v4;
    objc_msgSend(v5, "setContents:", objc_msgSend(v6, "CGImage"));

    id v7 = *(id *)(a1 + 160);
    [v6 scale];
    objc_msgSend(v7, "setContentsScale:");

    id v10 = *(id *)(a1 + 160);
    [v6 scale];
    double v9 = v8;

    [v10 setRasterizationScale:v9];
  }
}

- (BOOL)skipsSubviewEnumeration
{
  return (*(void *)&self->_viewFlags >> 36) & 1;
}

- (void)setSkipsSubviewEnumeration:(BOOL)a3
{
  uint64_t v3 = 0x1000000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFEFFFFFFFFFLL | v3;
}

- (BOOL)_isAlphaHittableAndHasAlphaHittableAncestors
{
  if (!a1) {
    return 0;
  }
  id v1 = *(id *)(a1 + 160);
  [v1 opacity];
  double v3 = v2;
  BOOL v4 = v3 >= 0.01;
  if (v1 && v3 >= 0.01)
  {
    do
    {
      id v5 = [v1 superlayer];

      BOOL v4 = v5 == 0;
      if (!v5) {
        break;
      }
      [v5 opacity];
      id v1 = v5;
    }
    while (v6 >= 0.01);
  }
  else
  {
    id v5 = v1;
  }

  return v4;
}

- (uint64_t)_viewOrderRelativeToView:(int)a3 requireIntersection:
{
  id v5 = a2;
  if (!a1)
  {
    uint64_t v8 = 0;
    goto LABEL_24;
  }
  uint64_t v6 = [a1 window];
  id v7 = (void *)v6;
  uint64_t v8 = -10000;
  if (!v5 || !v6) {
    goto LABEL_23;
  }
  double v9 = [v5 window];
  id v10 = [a1 window];

  if (v9 == v10)
  {
    id v7 = [a1 window];
    if (!a3) {
      goto LABEL_8;
    }
    [a1 bounds];
    objc_msgSend(v7, "convertRect:fromView:", a1);
    CGFloat v12 = v11;
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    [v5 bounds];
    objc_msgSend(v7, "convertRect:fromView:", v5);
    v42.origin.double x = v19;
    v42.origin.double y = v20;
    v42.size.double width = v21;
    v42.size.double height = v22;
    v41.origin.double x = v12;
    v41.origin.double y = v14;
    v41.size.double width = v16;
    v41.size.double height = v18;
    if (!CGRectIntersectsRect(v41, v42))
    {
      uint64_t v8 = -10000;
    }
    else
    {
LABEL_8:
      id v23 = a1;
      uint64_t v24 = [v5 superview];
      if ((id)v24 == v23)
      {
        id v27 = 0;
        id v26 = 0;
      }
      else
      {
        id v25 = (id)v24;
        id v26 = 0;
        id v27 = 0;
        do
        {
          id v28 = v27;
          id v29 = v26;
          id v30 = v25;
          id v27 = v23;

          id v23 = [v27 superview];

          id v26 = v5;
          id v25 = [v26 superview];

          while (v25)
          {
            if (v25 == v23) {
              break;
            }
            uint64_t v31 = v26;
            id v26 = v25;

            id v25 = [v26 superview];
          }
        }
        while (v25 != v23);
      }
      id v32 = [v23 subviews];
      unint64_t v33 = [v32 indexOfObject:v27];
      if (v33 <= [v32 indexOfObject:v26])
      {
        id v34 = [v27 layer];
        [v34 zPosition];
        double v36 = v35;
        id v37 = [v26 layer];
        [v37 zPosition];
        BOOL v39 = v36 <= v38;

        if (v39) {
          uint64_t v8 = -3;
        }
        else {
          uint64_t v8 = -2;
        }
      }
      else
      {
        uint64_t v8 = -2;
      }
    }
LABEL_23:

    goto LABEL_24;
  }
  uint64_t v8 = -10000;
LABEL_24:

  return v8;
}

- (id)_subviewAtIndex:(void *)a1
{
  if (a1)
  {
    double v3 = objc_msgSend((id)objc_msgSend(a1, "layer"), "sublayers");
    if ([v3 count] <= a2)
    {
      uint64_t v6 = 0;
    }
    else
    {
      BOOL v4 = [v3 objectAtIndex:a2];
      id v5 = (id)[v4 unsafeUnretainedDelegate];
      uint64_t v6 = v5;
      if (v5 && !_IsKindOfUIView((uint64_t)v5)) {
        uint64_t v6 = 0;
      }
    }
    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }
  return v7;
}

- (void)_encodeFrameWithCoder:(id)a3
{
  id v7 = a3;
  [(UIView *)self bounds];
  if (!CGRectEqualToRect(v9, *MEMORY[0x1E4F1DB28]))
  {
    [(UIView *)self bounds];
    objc_msgSend(v7, "encodeCGRect:forKey:", @"UIBounds");
  }
  [(UIView *)self center];
  if (v5 != *MEMORY[0x1E4F1DAD8] || v4 != *(double *)(MEMORY[0x1E4F1DAD8] + 8))
  {
    [(UIView *)self center];
    objc_msgSend(v7, "encodeCGPoint:forKey:", @"UICenter");
  }
}

- (void)_encodeBackgroundColorWithCoder:(id)a3
{
  id v5 = a3;
  double v4 = [(UIView *)self _backgroundColor];
  if (v4) {
    [v5 encodeObject:v4 forKey:@"UIBackgroundColor"];
  }
}

- (BOOL)_allowsArchivingAsSubview
{
  return 1;
}

- (void)_populateArchivedSubviews:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [(UIView *)self _encodableSubviews];
  uint64_t v6 = v5;
  if ((*(void *)&self->_viewFlags & 0x800000000000000) != 0)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v6);
          }
          double v11 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          if ([v11 _allowsArchivingAsSubview]) {
            [v4 addObject:v11];
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v8);
    }
  }
  else
  {
    [v4 addObjectsFromArray:v5];
  }
}

- (id)_viewIndexPath
{
  if (a1)
  {
    id v2 = (id)[a1 superview];
    if (v2)
    {
      id v3 = v2;
      id v4 = [v2 subviews];
      uint64_t v5 = [v4 indexOfObject:a1];

      uint64_t v6 = -[UIView _viewIndexPath](v3);
      id v7 = [v6 indexPathByAddingIndex:v5];
    }
    else
    {
      id v7 = objc_alloc_init(MEMORY[0x1E4F28D58]);
    }
  }
  else
  {
    id v7 = 0;
  }
  return v7;
}

+ (id)_topMostView:(int)a3 reverse:
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  self;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v21 != v10) {
          objc_enumerationMutation(v5);
        }
        long long v12 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        long long v13 = -[UIView _viewIndexPath](v12);
        long long v14 = v13;
        if (!v9
          || ((uint64_t v15 = objc_msgSend(v13, "compare:", v8, (void)v20), !a3) ? (v16 = v15) : (v16 = -v15), v16 == -1))
        {
          id v17 = v14;

          uint64_t v8 = v17;
          uint64_t v9 = v12;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v7);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }

  id v18 = v9;
  return v18;
}

- (id)_gestureRecognizers
{
  return self->_gestureRecognizers;
}

- (BOOL)_gestureRecognizerShouldReceiveTouch:(id)a3
{
  return 1;
}

- (BOOL)_shouldResignFirstResponderWithInteractionDisabled
{
  return 1;
}

- (BOOL)_monitorsSubtree
{
  return (*(void *)&self->_viewFlags >> 42) & 1;
}

- (void)_recursivelyNameLayerTree
{
  -[UIView _backing_outermostLayer](self);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  RecursivelyNameLayerTree(v2);
}

+ (void)_animateWithFrictionBounceAnimations:(id)a3 completion:(id)a4
{
}

+ (void)_animateUsingSpringInteractive:(BOOL)a3 animations:(id)a4 completion:(id)a5
{
}

- (void)_animatePropertyWithKey:(id)a3 currentValue:(id)a4 targetValue:(id)a5 newValueCallback:(id)a6
{
  id v10 = a6;
  id v11 = a5;
  id v12 = a3;
  [a4 value];
  double v14 = v13;
  [v11 value];
  double v16 = v15;

  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  _OWORD v18[2] = __86__UIView_Internal___animatePropertyWithKey_currentValue_targetValue_newValueCallback___block_invoke;
  v18[3] = &unk_1E5310088;
  id v19 = v10;
  id v17 = v10;
  [(UIView *)self __swift_animatePropertyWithKey:v12 currentValue:v18 targetValue:v14 newValueCallback:v16];
}

void __86__UIView_Internal___animatePropertyWithKey_currentValue_targetValue_newValueCallback___block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  +[UIInterpolatedFloat valueWithFloat:](UIInterpolatedFloat, "valueWithFloat:");
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

+ (void)_animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 tracking:(BOOL)a5 dampingRatioSmoothing:(double)a6 responseSmoothing:(double)a7 targetSmoothing:(double)a8 projectionDeceleration:(double)a9 retargetImpulse:(double)a10 animations:(id)a11 completion:(id)a12
{
}

+ (void)_animateUsingSpringWithDampingRatio:(double)a3 response:(double)a4 tracking:(BOOL)a5 initialDampingRatio:(double)a6 initialResponse:(double)a7 dampingRatioSmoothing:(double)a8 responseSmoothing:(double)a9 targetSmoothing:(double)a10 projectionDeceleration:(double)a11 animations:(id)a12 completion:(id)a13
{
  BOOL v20 = a5;
  uint64_t v24 = NSNumber;
  id v25 = a13;
  id v26 = a12;
  id v28 = [v24 numberWithDouble:a6];
  id v27 = [NSNumber numberWithDouble:a7];
  +[UIView __animateUsingSpringWithDampingRatio:response:interactive:initialDampingRatio:initialResponse:dampingRatioSmoothing:responseSmoothing:targetSmoothing:projectionDeceleration:retargetImpulse:animations:completion:](a3, a4, a8, a9, a10, a11, 0.0, (uint64_t)a1, v20, v28, v27, v26, v25);
}

+ (void)animateBridgedWithContext:(id)a3 animations:(id)a4 completion:(id)a5
{
  objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler", a3, a4, a5);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  [v7 handleFailureInMethod:a2, a1, @"UIView.m", 18958, @"No longer supported, this method will be removed shortly." object file lineNumber description];
}

- (id)_targetVelocityForKey:(id)a3
{
  return -[UIView _velocityForKey:target:](self, (uint64_t)a3, 1);
}

- (void)_setTargetVelocity:(id)a3 forKey:(id)a4
{
  if (self) {
    [(UIView *)self __swift_setVelocity:a3 key:a4 target:1];
  }
}

- (void)_setVelocity:(id)a3 forKey:(id)a4
{
  if (self) {
    [(UIView *)self __swift_setVelocity:a3 key:a4 target:0];
  }
}

- (BOOL)_touchesInsideShouldHideCalloutBar
{
  return 1;
}

- (BOOL)_isMemberOfViewControllerHierarchy:(id)a3
{
  id v4 = [a3 _existingView];
  if (v4) {
    BOOL v5 = [(UIView *)self isDescendantOfView:v4];
  }
  else {
    BOOL v5 = 0;
  }

  return v5;
}

- (CGRect)_visualAltitudeSensitiveBoundsWithInfiniteEdges:(unint64_t)a3
{
  char v3 = a3;
  if (+[UIView _motionEffectsEnabled])
  {
    [(UIView *)self _visualAltitude];
    if (self)
    {
      double v6 = v5;
      [(UIView *)self bounds];
      double v8 = v7;
      double v10 = v9;
      double v12 = v11;
      double v14 = v13;
      [(UIView *)self _visualAltitudeBias];
      double v16 = v6 * v15;
      double v18 = v6 * v17;
      if ((v3 & 2) != 0) {
        double v19 = v6 * v15;
      }
      else {
        double v19 = -0.0;
      }
      double v20 = v12 + v19;
      if ((v3 & 2) != 0) {
        double v21 = v16;
      }
      else {
        double v21 = 0.0;
      }
      double v22 = v8 - v21;
      if ((v3 & 8) == 0) {
        double v16 = -0.0;
      }
      double v23 = v16 + v20;
      if (v3) {
        double v24 = v18;
      }
      else {
        double v24 = -0.0;
      }
      double v25 = v14 + v24;
      if (v3) {
        double v26 = v18;
      }
      else {
        double v26 = 0.0;
      }
      double v27 = v10 - v26;
      if ((v3 & 4) == 0) {
        double v18 = -0.0;
      }
      double v28 = v18 + v25;
    }
    else
    {
      double v28 = 0.0;
      double v23 = 0.0;
      double v27 = 0.0;
      double v22 = 0.0;
    }
  }
  else
  {
    [(UIView *)self bounds];
  }
  result.size.double height = v28;
  result.size.double width = v23;
  result.origin.double y = v27;
  result.origin.double x = v22;
  return result;
}

+ (id)_disabledColorForTintColor:(id)a3
{
  return +[UIColor _disabledColorForColor:]((uint64_t)UIColor, a3);
}

- (BOOL)_shouldUseViewForSceneDraggingBehavior
{
  return 1;
}

- (BOOL)canPerformAction:(SEL)a3 withSender:(id)a4
{
  id v6 = a4;
  if ([(UIView *)self _hasDefaultImplementationForStandardEditAction:a3])
  {
    unsigned __int8 v7 = [(UIView *)self _canPerformDefaultImplementationForStandardEditAction:a3];
  }
  else
  {
    v10.receiver = self;
    v10.super_class = (Class)UIView;
    unsigned __int8 v7 = [(UIResponder *)&v10 canPerformAction:a3 withSender:v6];
  }
  BOOL v8 = v7;

  return v8;
}

- (double)_center3D
{
  if (!a1) {
    return 0.0;
  }
  [a1 center];
  double v3 = v2;
  id v4 = [a1 layer];
  [v4 zPosition];

  return v3;
}

- (void)_setCenter3D:(double)a3
{
  if (a1)
  {
    objc_msgSend(a1, "setCenter:");
    id v6 = [a1 layer];
    [v6 setZPosition:a4];
  }
}

+ (double)_durationForRotationFromInterfaceOrientation:(int64_t)a3 toInterfaceOrientation:(int64_t)a4 withBaseDuration:(double)a5
{
  int v6 = +[UIView _degreesToRotateFromInterfaceOrientation:a3 toInterfaceOrientation:a4];
  if (v6 >= 0) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = -v6;
  }
  double result = a5 + a5;
  if (v7 <= 0x5A) {
    return a5;
  }
  return result;
}

- (void)setInteractions:(NSArray *)interactions
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  double v5 = interactions;
  if (!v5)
  {
    double v18 = [MEMORY[0x1E4F28B00] currentHandler];
    [v18 handleFailureInMethod:a2, self, @"UIView.m", 19359, @"Invalid parameter not satisfying: %@", @"interactions" object file lineNumber description];
  }
  if ((*((unsigned char *)&self->_viewFlags + 20) & 0x40) != 0)
  {
    int v6 = objc_getAssociatedObject(self, &_UIViewInteractionsKey);
    unsigned int v7 = (void *)[v6 copy];

    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v8 = v7;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v23 objects:v28 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v24 != v11) {
            objc_enumerationMutation(v8);
          }
          [(UIView *)self removeInteraction:*(void *)(*((void *)&v23 + 1) + 8 * i)];
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v23 objects:v28 count:16];
      }
      while (v10);
    }
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  double v13 = v5;
  uint64_t v14 = [(NSArray *)v13 countByEnumeratingWithState:&v19 objects:v27 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v20;
    do
    {
      for (uint64_t j = 0; j != v15; ++j)
      {
        if (*(void *)v20 != v16) {
          objc_enumerationMutation(v13);
        }
        [(UIView *)self addInteraction:*(void *)(*((void *)&v19 + 1) + 8 * j)];
      }
      uint64_t v15 = [(NSArray *)v13 countByEnumeratingWithState:&v19 objects:v27 count:16];
    }
    while (v15);
  }
}

- (id)_firstAncestorInteractionConformingToProtocol:(id)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(UIView *)self superview];
  if (v5)
  {
    int v6 = (unsigned char *)v5;
    do
    {
      if ((v6[116] & 0x40) != 0)
      {
        unsigned int v7 = objc_getAssociatedObject(v6, &_UIViewInteractionsKey);
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        id v8 = v7;
        uint64_t v9 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = *(void *)v18;
          while (2)
          {
            for (uint64_t i = 0; i != v10; ++i)
            {
              if (*(void *)v18 != v11) {
                objc_enumerationMutation(v8);
              }
              double v13 = *(void **)(*((void *)&v17 + 1) + 8 * i);
              if ([v13 conformsToProtocol:v4])
              {
                id v15 = v13;

                goto LABEL_16;
              }
            }
            uint64_t v10 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
            if (v10) {
              continue;
            }
            break;
          }
        }
      }
      uint64_t v14 = [v6 superview];

      int v6 = (unsigned char *)v14;
    }
    while (v14);
  }
  id v15 = 0;
LABEL_16:

  return v15;
}

- (void)setGestureRecognizers:(NSArray *)gestureRecognizers
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = gestureRecognizers;
  if (self->_gestureRecognizers != v4)
  {
    -[UIView _removeAllGestureRecognizers]((uint64_t)self);
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v5 = v4;
    uint64_t v6 = [(NSArray *)v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v15;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v14 + 1) + 8 * v9);
          if (dyld_program_sdk_at_least()
            && ([v10 view], uint64_t v11 = objc_claimAutoreleasedReturnValue(), v11, v11))
          {
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = __48__UIView_UIViewGestures__setGestureRecognizers___block_invoke;
            block[3] = &unk_1E52D9F98;
            void block[4] = v10;
            void block[5] = self;
            if (setGestureRecognizers__once != -1) {
              dispatch_once(&setGestureRecognizers__once, block);
            }
          }
          else
          {
            -[UIView _addGestureRecognizer:atEnd:]((uint64_t)self, v10, 1);
          }
          ++v9;
        }
        while (v7 != v9);
        uint64_t v12 = [(NSArray *)v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
        uint64_t v7 = v12;
      }
      while (v12);
    }
  }
}

void __48__UIView_UIViewGestures__setGestureRecognizers___block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  double v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Warning", &kFixedAnimationDuration_block_invoke_4___s_category) + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "WARNING: A Gesture recognizer (%@) was setup in a storyboard/xib to be added to more than one view (->%@) at a time, this was never allowed, and is now enforced. Beginning with iOS 9.0 it will be put in the first view it is loaded into.", (uint8_t *)&v5, 0x16u);
  }
}

- (BOOL)deliversPressesForGesturesToSuperview
{
  return (*(void *)&self->_viewFlags >> 34) & 1;
}

- (void)setDeliversPressesForGesturesToSuperview:(BOOL)a3
{
  uint64_t v3 = 0x400000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *(void *)&self->_uint64_t viewFlags = *(void *)&self->_viewFlags & 0xFFFFFFFBFFFFFFFFLL | v3;
}

void __47__UIView_CALayerDelegate__drawLayer_inContext___block_invoke(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (objc_class *)objc_opt_class();
  Name = class_getName(v4);
  strncpy((char *)&v8, Name, 0x18uLL);
  *(_DWORD *)a2 = 84;
  uint64_t v6 = *(void **)(a1 + 32);
  *(void *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 32) = v9;
  *(_DWORD *)(a2 + 40) = 85;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = v6;
  __int16 v7 = [v6 superview];
  *(void *)(a2 + 72) = v7;
}

void __50__UIView_CALayerDelegate__layoutSublayersOfLayer___block_invoke(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (objc_class *)objc_opt_class();
  Name = class_getName(v4);
  strncpy((char *)&v9, Name, 0x18uLL);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)a2 = 82;
  __int16 v7 = *(void **)(a1 + 32);
  *(void *)(a2 + 8) = v7;
  *(_OWORD *)(a2 + 16) = v9;
  *(void *)(a2 + 32) = v10;
  *(_DWORD *)(a2 + 40) = 83;
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = v7;
  long long v8 = [v7 superview];
  *(void *)(a2 + 72) = v8;
}

- (BOOL)__shouldShowVisualizationWithName:(unsigned char *)a3 isSubclass:(unsigned char *)a4 isOtherModule:
{
  if (!a1 || !os_variant_has_internal_diagnostics()) {
    return 0;
  }
  if (qword_1EB25C290 != -1) {
    dispatch_once(&qword_1EB25C290, &__block_literal_global_3052);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __86__UIView_CALayerDelegate____shouldShowVisualizationWithName_isSubclass_isOtherModule___block_invoke_3;
  void v14[3] = &unk_1E53100D8;
  void v14[4] = a1;
  uint64_t v10 = [(id)qword_1EB25C288 indexOfObjectPassingTest:v14];
  BOOL v8 = v10 != 0x7FFFFFFFFFFFFFFFLL;
  if (v10 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v11 = v10;
    if (a2)
    {
      *a2 = [(id)qword_1EB25C280 objectAtIndexedSubscript:v10];
    }
    if (a4)
    {
      uint64_t v12 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
      double v13 = _UIKitBundle();
      *a4 = [v12 isEqual:v13] ^ 1;
    }
    if (a3) {
      *a3 = objc_msgSend(a1, "isMemberOfClass:", objc_msgSend((id)qword_1EB25C288, "objectAtIndexedSubscript:", v11)) ^ 1;
    }
  }
  return v8;
}

void __86__UIView_CALayerDelegate____shouldShowVisualizationWithName_isSubclass_isOtherModule___block_invoke()
{
  id v0 = _UIKitPreferencesOnce();
  uint64_t v1 = [v0 objectForKeyedSubscript:@"ControlsToVisualize"];
  double v2 = (void *)v1;
  if (v1) {
    uint64_t v3 = (void *)v1;
  }
  else {
    uint64_t v3 = &unk_1ED3F18B8;
  }
  objc_storeStrong((id *)&qword_1EB25C280, v3);

  uint64_t v4 = objc_msgSend((id)qword_1EB25C280, "bs_map:", &__block_literal_global_3094_0);
  int v5 = (void *)qword_1EB25C288;
  qword_1EB25C288 = v4;
}

Class __86__UIView_CALayerDelegate____shouldShowVisualizationWithName_isSubclass_isOtherModule___block_invoke_2(int a1, NSString *aClassName)
{
  return NSClassFromString(aClassName);
}

uint64_t __86__UIView_CALayerDelegate____shouldShowVisualizationWithName_isSubclass_isOtherModule___block_invoke_3()
{
  return objc_opt_isKindOfClass() & 1;
}

- (void)__vis_layoutSublayersOfLayer:(id)a3
{
  [(UIView *)self __vis_layoutSublayersOfLayer:a3];
  if (os_variant_has_internal_diagnostics())
  {
    __int16 v13 = 0;
    id v12 = 0;
    BOOL v4 = -[UIView __shouldShowVisualizationWithName:isSubclass:isOtherModule:](self, &v12, (unsigned char *)&v13 + 1, &v13);
    int v5 = (__CFString *)v12;
    if (!v4)
    {
LABEL_16:

      return;
    }
    objc_getAssociatedObject(self, &_markerViewKey);
    uint64_t v6 = (_UIViewMarkerLayer *)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      uint64_t v6 = objc_alloc_init(_UIViewMarkerLayer);
      objc_setAssociatedObject(self, &_markerViewKey, v6, (void *)1);
    }
    __int16 v7 = [(_UIViewMarkerLayer *)v6 superlayer];

    if (!v7)
    {
      BOOL v8 = [(UIView *)self layer];
      [v8 addSublayer:v6];
    }
    if (v5) {
      long long v9 = v5;
    }
    else {
      long long v9 = @"View";
    }
    [(_UIViewMarkerLayer *)v6 setLabel:v9];
    if ((_BYTE)v13)
    {
      uint64_t v10 = +[UIColor systemDarkRedColor];
    }
    else
    {
      if (!HIBYTE(v13))
      {
        uint64_t v11 = 0;
        goto LABEL_15;
      }
      uint64_t v10 = +[UIColor systemMintColor];
    }
    uint64_t v11 = (void *)v10;
LABEL_15:
    [(_UIViewMarkerLayer *)v6 setAlternateColor:v11];
    [(UIView *)self bounds];
    -[_UIViewMarkerLayer setFrame:](v6, "setFrame:");

    goto LABEL_16;
  }
}

- (void)_detectAndHandleClippedView
{
  if ([(UIView *)self _UIViewDebuggingIsViewClipping])
  {
    [(UIView *)self _strokeClippedViewIfNecessary];
    if (-[UIView _clippingDetected](self)) {
      return;
    }
    [(UIView *)self _dumpClippedViewWithScreenshotIfNecessary];
    if (!self) {
      return;
    }
    int v5 = (void *)MEMORY[0x1E4F1CC38];
    BOOL v4 = self;
  }
  else
  {
    if (!self) {
      return;
    }
    if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIStrokeClippedViews, @"UIStrokeClippedViews", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1E8FD562C&& -[UIView _clippingDetected](self))
    {
      uint64_t v3 = [(UIView *)self layer];
      [v3 setBorderWidth:0.0];
    }
    BOOL v4 = self;
    int v5 = 0;
  }
  objc_setAssociatedObject(v4, &_UICliptracerAssociationKey, v5, (void *)1);
}

- (BOOL)_clippingDetected
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = objc_getAssociatedObject(a1, &_UICliptracerAssociationKey);
  BOOL v2 = v1 != 0;

  return v2;
}

- (BOOL)_UIViewDebuggingIsViewClipping
{
  if (qword_1EB25C2B0 != -1) {
    dispatch_once(&qword_1EB25C2B0, &__block_literal_global_3107);
  }
  if (byte_1EB25C0B1 | byte_1EB25C0B2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          int v5 = [(UIView *)self delegate];
          if ((objc_opt_respondsToSelector() & 1) != 0
            && ([v5 textFieldShouldBeginEditing:self] & 1) != 0)
          {
            goto LABEL_38;
          }
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || ![(UIResponder *)self isEditable])
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || ([(UIView *)self isScrollEnabled] & 1) == 0)
          {
            uint64_t v6 = [(UIView *)self superview];
            if (!v6
              || (__int16 v7 = (void *)v6,
                  [(UIView *)self superview],
                  BOOL v8 = objc_claimAutoreleasedReturnValue(),
                  char v9 = [v8 conformsToProtocol:&unk_1ED42F658],
                  v8,
                  v7,
                  (v9 & 1) == 0))
            {
              uint64_t v10 = [(UIView *)self performSelector:sel_text];
              int v5 = v10;
              if (v10 && [v10 length])
              {
                [(UIView *)self _alignmentFrame];
                CGFloat v12 = v11;
                CGFloat v14 = v13;
                double v16 = v15;
                double v18 = v17;
                -[UIView sizeThatFits:](self, "sizeThatFits:", v15, v17);
                double v21 = v19;
                double v22 = v20;
                BOOL v23 = v16 + 5.0 < v19 && v19 != -1.0;
                BOOL v24 = v18 + 5.0 < v20 && v20 != -1.0;
                v34.origin.double x = v12;
                v34.origin.double y = v14;
                v34.size.double width = v16;
                v34.size.double height = v18;
                BOOL v25 = CGRectEqualToRect(v34, *MEMORY[0x1E4F1DB28]);
                double v26 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
                BOOL v27 = v16 == *MEMORY[0x1E4F1DB30];
                if (v18 != v26) {
                  BOOL v27 = 0;
                }
                uint64_t v28 = v25 || v27;
                BOOL v29 = v22 == v26 && v21 == *MEMORY[0x1E4F1DB30];
                BOOL v30 = (v24 || v23) && (unint64_t)[v5 length] < 0xF;
                if (v30 | v28 | v29
                  && (_UIInternalPreferenceUsesDefault(&dword_1EB257B20, @"UILogClippedViews", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EB257B24)
                {
                  v35.origin.double x = v12;
                  v35.origin.double y = v14;
                  v35.size.double width = v16;
                  v35.size.double height = v18;
                  uint64_t v31 = NSStringFromCGRect(v35);
                  v33.double width = v21;
                  v33.double height = v22;
                  id v32 = NSStringFromCGSize(v33);
                  NSLog(&cfstr_CliptracerSusp.isa, v30, v28, v29, v31, v32, v23, v24, v5);
                }
                BOOL v3 = (v23 || v24) & ~(v28 | v29);
                goto LABEL_45;
              }
LABEL_38:
              BOOL v3 = 0;
LABEL_45:

              return v3;
            }
          }
        }
      }
    }
  }
  return 0;
}

- (void)_strokeClippedViewIfNecessary
{
  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIStrokeClippedViews, @"UIStrokeClippedViews", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1E8FD562C)
  {
    id v3 = +[UIColor redColor];
    uint64_t v4 = [v3 CGColor];
    int v5 = [(UIView *)self layer];
    [v5 setBorderColor:v4];

    id v9 = [(UIView *)self _screen];
    [v9 scale];
    double v7 = 1.0 / v6;
    BOOL v8 = [(UIView *)self layer];
    [v8 setBorderWidth:v7];
  }
}

- (id)_clippedViewHierarchyDescription
{
  return 0;
}

- (void)_dumpClippedViewWithScreenshotIfNecessary
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  id v3 = [(UIView *)self _clippedViewHierarchyDescription];
  uint64_t v4 = [(UIView *)self performSelector:sel_text];
  char v5 = _UIInternalPreferenceUsesDefault(&dword_1EB257B20, @"UILogClippedViews", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
  if (byte_1EB257B24) {
    char v6 = v5;
  }
  else {
    char v6 = 1;
  }
  if (v3)
  {
    if (_dumpClippedViewWithScreenshotIfNecessary_onceToken != -1) {
      dispatch_once(&_dumpClippedViewWithScreenshotIfNecessary_onceToken, &__block_literal_global_3260);
    }
    double v7 = [MEMORY[0x1E4F1CA60] dictionary];
    uint64_t v8 = _UIMainBundleIdentifier();
    id v9 = (void *)v8;
    if (v8) {
      uint64_t v10 = (__CFString *)v8;
    }
    else {
      uint64_t v10 = &stru_1ED0E84C0;
    }
    [v7 setObject:v10 forKey:@"bundle"];

    double v11 = (objc_class *)objc_opt_class();
    uint64_t v12 = NSStringFromClass(v11);
    double v13 = (void *)v12;
    if (v12) {
      CGFloat v14 = (__CFString *)v12;
    }
    else {
      CGFloat v14 = &stru_1ED0E84C0;
    }
    [v7 setObject:v14 forKey:@"control_class"];

    if ((_UIInternalPreferenceUsesDefault(&dword_1EB257B18, @"UIIncludeTextForClippedViews", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EB257B1C)
    {
      if (v4) {
        double v15 = v4;
      }
      else {
        double v15 = &stru_1ED0E84C0;
      }
      [v7 setObject:v15 forKey:@"text"];
    }
    uint64_t v16 = [(id)UIApp preferredContentSizeCategory];
    double v17 = (void *)v16;
    if (v16) {
      double v18 = (__CFString *)v16;
    }
    else {
      double v18 = &stru_1ED0E84C0;
    }
    [v7 setObject:v18 forKey:@"font"];

    double v19 = [(UIView *)self window];
    [v19 size];
    uint64_t v20 = NSStringFromCGSize(v84);
    double v21 = (void *)v20;
    if (v20) {
      double v22 = (__CFString *)v20;
    }
    else {
      double v22 = &stru_1ED0E84C0;
    }
    [v7 setObject:v22 forKey:@"window_size"];

    BOOL v23 = +[UIDevice currentDevice];
    uint64_t v24 = [v23 buildVersion];
    BOOL v25 = (void *)v24;
    if (v24) {
      double v26 = (__CFString *)v24;
    }
    else {
      double v26 = &stru_1ED0E84C0;
    }
    [v7 setObject:v26 forKey:@"build_version"];

    BOOL v27 = [(UIView *)self _viewControllerForAncestor];
    uint64_t v28 = (objc_class *)objc_opt_class();
    uint64_t v29 = NSStringFromClass(v28);
    BOOL v30 = (void *)v29;
    if (v29) {
      uint64_t v31 = (__CFString *)v29;
    }
    else {
      uint64_t v31 = &stru_1ED0E84C0;
    }
    [v7 setObject:v31 forKey:@"view_controller"];

    id v32 = +[UIDevice currentDevice];
    uint64_t v33 = [v32 systemName];
    CGRect v34 = (void *)v33;
    if (v33) {
      CGRect v35 = (__CFString *)v33;
    }
    else {
      CGRect v35 = &stru_1ED0E84C0;
    }
    [v7 setObject:v35 forKey:@"platform"];

    [v7 setObject:v3 forKey:@"hierarchy_description"];
    uint64_t v36 = [self accessibilityIdentifier];
    id v37 = (void *)v36;
    if (v36) {
      double v38 = (__CFString *)v36;
    }
    else {
      double v38 = &stru_1ED0E84C0;
    }
    [v7 setObject:v38 forKey:@"accessibility_identifier"];

    BOOL v39 = [MEMORY[0x1E4F28B50] mainBundle];
    long long v40 = [v39 preferredLocalizations];
    CGRect v41 = [v40 objectAtIndex:0];

    CGRect v42 = (void *)[objc_alloc(MEMORY[0x1E4F1CA20]) initWithLocaleIdentifier:v41];
    uint64_t v43 = [v42 localeIdentifier];
    long long v44 = (void *)v43;
    if (v43) {
      long long v45 = (__CFString *)v43;
    }
    else {
      long long v45 = &stru_1ED0E84C0;
    }
    [v7 setObject:v45 forKey:@"language"];

    long long v46 = [(__CFString *)v4 _accessibilityAttributedLocalizedString];
    long long v47 = v46;
    if (v46)
    {
      uint64_t v48 = [v46 attributeValueForKey:@"UIAccessibilityTokenLocalizedStringKey"];
      long long v49 = (void *)v48;
      if (v48) {
        long long v50 = (__CFString *)v48;
      }
      else {
        long long v50 = &stru_1ED0E84C0;
      }
      [v7 setObject:v50 forKey:@"ax_string_key"];

      uint64_t v51 = [v47 attributeValueForKey:@"UIAccessibilityTokenLocalizedStringTableName"];
      double v52 = (void *)v51;
      if (v51) {
        uint64_t v53 = (__CFString *)v51;
      }
      else {
        uint64_t v53 = &stru_1ED0E84C0;
      }
      [v7 setObject:v53 forKey:@"ax_table_name"];

      uint64_t v54 = [v47 attributeValueForKey:@"UIAccessibilityTokenLocalizedStringEnglishVersion"];
      double v55 = (void *)v54;
      if (v54) {
        double v56 = (__CFString *)v54;
      }
      else {
        double v56 = &stru_1ED0E84C0;
      }
      [v7 setObject:v56 forKey:@"ax_english_text"];
    }
    if ((v6 & 1) == 0)
    {
      CGFloat v57 = _UIClippingFaultLog();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_FAULT))
      {
        double v70 = (objc_class *)objc_opt_class();
        CGFloat v71 = NSStringFromClass(v70);
        uint64_t v72 = [v7 objectForKeyedSubscript:@"ax_english_text"];
        *(_DWORD *)CGAffineTransform buf = 138543874;
        CGRect v78 = v71;
        __int16 v79 = 2114;
        id v80 = v72;
        __int16 v81 = 2114;
        id v82 = v7;
        _os_log_fault_impl(&dword_1853B0000, v57, OS_LOG_TYPE_FAULT, "[Internal] Text Clipping Detected: %{public}@ '%{public}@'\n'%{public}@'", buf, 0x20u);
      }
    }
    [(UIView *)self frame];
    -[UIView convertRect:toView:](self, "convertRect:toView:", 0);
    CGFloat v59 = v58;
    CGFloat v61 = v60;
    CGFloat v63 = v62;
    CGFloat v65 = v64;
    uint64_t v66 = [(UIView *)self window];
    [v66 bounds];
    v86.origin.double x = v59;
    v86.origin.double y = v61;
    v86.size.double width = v63;
    v86.size.double height = v65;
    BOOL v67 = CGRectIntersectsRect(v85, v86);

    dispatch_time_t v68 = dispatch_time(0, 1000000000);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __64__UIView_UIDebugging___dumpClippedViewWithScreenshotIfNecessary__block_invoke_3325;
    block[3] = &unk_1E52DA138;
    BOOL v76 = v67;
    void block[4] = self;
    id v74 = v7;
    id v75 = &__block_literal_global_3272;
    id v69 = v7;
    dispatch_after(v68, MEMORY[0x1E4F14428], block);
  }
  else if ((v6 & 1) == 0)
  {
    NSLog(&cfstr_CliptracerNoHi.isa, self, v4);
  }
}

void __64__UIView_UIDebugging___dumpClippedViewWithScreenshotIfNecessary__block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  uint64_t v1 = (void *)_dumpClippedViewWithScreenshotIfNecessary_dateFormatter;
  _dumpClippedViewWithScreenshotIfNecessary_dateFormatter = (uint64_t)v0;

  [(id)_dumpClippedViewWithScreenshotIfNecessary_dateFormatter setDateFormat:@"yyyy-MM-dd HH:mm:ss Z"];
  BOOL v2 = (void *)_dumpClippedViewWithScreenshotIfNecessary_dateFormatter;
  id v3 = [MEMORY[0x1E4F1CA20] localeWithLocaleIdentifier:@"en_US_POSIX"];
  [v2 setLocale:v3];

  uint64_t v4 = (void *)_dumpClippedViewWithScreenshotIfNecessary_dateFormatter;
  id v5 = [MEMORY[0x1E4F1CAF0] timeZoneForSecondsFromGMT:0];
  [v4 setTimeZone:v5];
}

__CFString *__64__UIView_UIDebugging___dumpClippedViewWithScreenshotIfNecessary__block_invoke_2(uint64_t a1, void *a2)
{
  if (a2) {
    return (__CFString *)a2;
  }
  else {
    return &stru_1ED0E84C0;
  }
}

void __64__UIView_UIDebugging___dumpClippedViewWithScreenshotIfNecessary__block_invoke_3325(uint64_t a1)
{
  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UIScreenshotClippedViews, @"UIScreenshotClippedViews", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0)
  {
    if (byte_1E8FD5634)
    {
      if (*(unsigned char *)(a1 + 56))
      {
        BOOL v2 = [*(id *)(a1 + 32) window];
        id v3 = +[UIWindow _applicationKeyWindow];
        [v3 bounds];
        uint64_t v4 = (const void *)objc_msgSend(v2, "newSnapshotWithRect:");

        if (v4)
        {
          id v9 = +[UIImage imageWithCGImage:v4];
          id v5 = UIImagePNGRepresentation(v9);
          char v6 = [v5 base64EncodedStringWithOptions:1];

          double v7 = *(void **)(a1 + 40);
          uint64_t v8 = (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
          [v7 setValue:v8 forKey:@"screenshot"];

          CFRelease(v4);
        }
      }
    }
  }
}

- (id)recursiveDescription
{
  return _UIRecursiveDescription(self->_layer, (uint64_t)&__block_literal_global_3469, (uint64_t)&__block_literal_global_3472_0);
}

id __43__UIView_UIDebugging__recursiveDescription__block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = (id *)(id)[v2 unsafeUnretainedDelegate];
  if (v3)
  {
    uint64_t v4 = v3;
    if (_IsKindOfUIView((uint64_t)v3))
    {
      id v5 = v4[20];
      char v6 = v4;

      id v2 = v5;
    }
  }
  double v7 = [v2 sublayers];

  return v7;
}

__CFString *__43__UIView_UIDebugging__recursiveDescription__block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = (id)[v2 unsafeUnretainedDelegate];
  if (v3 && (uint64_t v4 = v3, _IsKindOfUIView((uint64_t)v3)))
  {
    id v5 = v4;
    char v6 = [v5 debugDescription];
    double v7 = v6;
    if (v6)
    {
      uint64_t v8 = v6;
    }
    else
    {
      uint64_t v10 = NSString;
      v13.receiver = v5;
      v13.super_class = (Class)UIView;
      double v11 = objc_msgSendSuper2(&v13, sel_description);
      uint64_t v8 = [v10 stringWithFormat:@"-desc was nil!- %@", v11];
    }
  }
  else
  {
    id v9 = [v2 description];
    id v5 = v9;
    if (v9)
    {
      uint64_t v8 = [v9 stringByAppendingString:@" (layer)"];
    }
    else
    {
      uint64_t v8 = @"-layer desc was nil!-";
    }
  }

  return v8;
}

- (id)_parentDescription
{
  return _UIAncestralDescription((uint64_t)self, (uint64_t)sel_superview, 0);
}

- (id)_backdropGroups
{
  id v3 = objc_opt_new();
  uint64_t v4 = [MEMORY[0x1E4F1CA48] arrayWithObject:self->_layer];
  while ([v4 count])
  {
    id v5 = [v4 firstObject];
    [v4 removeObjectAtIndex:0];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v6 = v5;
      double v7 = [v6 groupName];
      if (v7)
      {
        id v8 = (id)[v6 unsafeUnretainedDelegate];
        id v9 = v8;
        if (v8)
        {
          if (_IsKindOfUIView((uint64_t)v8))
          {
            id v9 = v9;
            uint64_t v10 = [v9 superview];
            NSClassFromString(&cfstr_Uivisualeffect_18.isa);
            if (objc_opt_isKindOfClass())
            {
              id v11 = v10;

              id v9 = v11;
            }
          }
          else
          {
            id v9 = 0;
          }
        }
        if (v9) {
          uint64_t v12 = v9;
        }
        else {
          uint64_t v12 = v6;
        }
        id v13 = v12;
        CGFloat v14 = [v3 objectForKeyedSubscript:v7];
        double v15 = v14;
        if (v14)
        {
          [v14 addObject:v13];
        }
        else
        {
          uint64_t v16 = [MEMORY[0x1E4F1CA48] arrayWithObject:v13];

          [v3 setObject:v16 forKeyedSubscript:v7];
          id v13 = (id)v16;
        }
      }
    }
    double v17 = [v5 sublayers];
    if ([v17 count]) {
      [v4 addObjectsFromArray:v17];
    }
  }
  return v3;
}

- (id)_scriptingInfo
{
  return (id)[MEMORY[0x1E4F1CA60] dictionary];
}

- (id)scriptingInfoWithChildren
{
  return (id)MEMORY[0x1E4F1CBF0];
}

- (uint64_t)_containerStyle
{
  if (!a1) {
    return 0;
  }
  id v1 = (id)[a1 superview];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  while (![v2 _style])
  {
    id v2 = (id)[v2 superview];
    if (!v2) {
      return 0;
    }
  }
  return [v2 _style];
}

- (int)_style
{
  id v2 = +[UIViewController viewControllerForView:self];
  BOOL v3 = [v2 modalPresentationStyle] == 2;

  return 2 * v3;
}

- (BOOL)useBlockyMagnificationInClassic
{
  return 1;
}

- (id)_enclosingScrollerIncludingSelf
{
  if (self)
  {
    BOOL v3 = self;
    while (![v3 __isKindOfUIScrollView])
    {
      self = (UIView *)[(UIView *)v3 superview];
      BOOL v3 = self;
      if (!self) {
        goto LABEL_7;
      }
    }
    self = v3;
LABEL_7:
    uint64_t v2 = vars8;
  }
  return self;
}

- (BOOL)_isScrollingEnabled
{
  return 0;
}

- (id)_enclosingScrollableScrollerIncludingSelf
{
  if (self)
  {
    BOOL v3 = self;
    while (![v3 __isKindOfUIScrollView]
         || ![(UIView *)v3 _isScrollingEnabled])
    {
      self = (UIView *)[(UIView *)v3 superview];
      BOOL v3 = self;
      if (!self) {
        goto LABEL_8;
      }
    }
    self = v3;
LABEL_8:
    uint64_t v2 = vars8;
  }
  return self;
}

- (uint64_t)_subviewsNeedAxisFlipping
{
  if (a1)
  {
    id v1 = a1;
    int v2 = 0;
    do
    {
      BOOL v3 = [v1 layer];
      v2 ^= [v3 flipsHorizontalAxis];

      uint64_t v4 = [v1 superview];

      id v1 = (id)v4;
    }
    while (v4);
  }
  else
  {
    LOBYTE(v2) = 0;
  }
  return v2 & 1;
}

- (id)_layoutRect
{
  BOOL v3 = objc_getAssociatedObject(self, &_UIViewLayoutRectKey);
  if (!v3)
  {
    uint64_t v4 = (void *)MEMORY[0x1E4F5B278];
    id v5 = [(UIView *)self leadingAnchor];
    id v6 = [(UIView *)self topAnchor];
    double v7 = [(UIView *)self widthAnchor];
    id v8 = [(UIView *)self heightAnchor];
    BOOL v3 = [v4 layoutRectWithLeadingAnchor:v5 topAnchor:v6 widthAnchor:v7 heightAnchor:v8];

    objc_setAssociatedObject(self, &_UIViewLayoutRectKey, v3, (void *)1);
  }
  return v3;
}

- (BOOL)_isBoundingPathNonRectangular
{
  int v2 = [(UIView *)self _effectiveBoundingPathAndBoundingPathView:0];
  char v3 = [v2 isNonRectangular];

  return v3;
}

- (CGRect)_largestInscribedRectInBoundingPathWithCenter:(CGPoint)a3 aspectRatio:(double)a4
{
  double y = a3.y;
  double x = a3.x;
  id v36 = 0;
  id v8 = [(UIView *)self _effectiveBoundingPathAndBoundingPathView:&v36];
  id v9 = v36;
  [(UIView *)self bounds];
  -[UIView convertRect:toView:](self, "convertRect:toView:", v9);
  double v11 = v10;
  double v13 = v12;
  double v15 = v14;
  double v17 = v16;
  -[UIView convertPoint:toView:](self, "convertPoint:toView:", v9, x, y);
  objc_msgSend(v8, "_largestInscribedRectInBoundingPathAndRect:withCenter:aspectRatio:", v11, v13, v15, v17, v18, v19, a4);
  double v20 = v37.origin.x;
  double v21 = v37.origin.y;
  double width = v37.size.width;
  double height = v37.size.height;
  if (CGRectIsNull(v37))
  {
    double v24 = *MEMORY[0x1E4F1DB20];
    double v25 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v26 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v27 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  else
  {
    -[UIView convertRect:fromView:](self, "convertRect:fromView:", v9, v20, v21, width, height);
    double v24 = v28;
    double v25 = v29;
    double v26 = v30;
    double v27 = v31;
  }

  double v32 = v24;
  double v33 = v25;
  double v34 = v26;
  double v35 = v27;
  result.size.double height = v35;
  result.size.double width = v34;
  result.origin.double y = v33;
  result.origin.double x = v32;
  return result;
}

- (CGRect)_rectTuckedInBoundingPathCorner:(unint64_t)a3 withSize:(CGSize)a4 cornerRadii:(UIRectCornerRadii)a5 minimumPadding:(double)a6
{
  double topRight = a5.topRight;
  double bottomRight = a5.bottomRight;
  double bottomLeft = a5.bottomLeft;
  double topLeft = a5.topLeft;
  double height = a4.height;
  double width = a4.width;
  if (a6 < 0.0)
  {
    long long v40 = [MEMORY[0x1E4F28B00] currentHandler];
    [v40 handleFailureInMethod:a2, self, @"UIView.m", 21052, @"Invalid parameter not satisfying: %@", @"minimumPadding >= 0.0" object file lineNumber description];
  }
  if (topLeft >= bottomLeft) {
    double v16 = topLeft;
  }
  else {
    double v16 = bottomLeft;
  }
  if (topRight >= bottomRight) {
    double v17 = topRight;
  }
  else {
    double v17 = bottomRight;
  }
  if (width < v16 + v17
    || (topLeft >= topRight ? (double v18 = topLeft) : (double v18 = topRight),
        bottomLeft >= bottomRight ? (double v19 = bottomLeft) : (double v19 = bottomRight),
        height < v18 + v19))
  {
    double v38 = [MEMORY[0x1E4F28B00] currentHandler];
    v42.double width = width;
    v42.double height = height;
    BOOL v39 = NSStringFromCGSize(v42);
    [v38 handleFailureInMethod:a2, self, @"UIView.m", 21053, @"Rect size %@ is too small to fit corner radii: {%.1f, %.1f, %.1f, %.1f}", v39, *(void *)&topLeft, *(void *)&bottomLeft, *(void *)&bottomRight, *(void *)&topRight object file lineNumber description];
  }
  id v41 = 0;
  double v20 = [(UIView *)self _effectiveBoundingPathAndBoundingPathView:&v41];
  id v21 = v41;
  [(UIView *)self bounds];
  -[UIView convertRect:toView:](self, "convertRect:toView:", v21);
  objc_msgSend(v20, "_rectTuckedInCorner:ofBoundingPathAndRect:withSize:cornerRadii:minimumPadding:", a3, *(void *)&topLeft, *(void *)&bottomLeft, *(void *)&bottomRight, *(void *)&topRight, *(void *)&a6);
  double x = v43.origin.x;
  double y = v43.origin.y;
  double v24 = v43.size.width;
  double v25 = v43.size.height;
  if (CGRectIsNull(v43))
  {
    double v26 = *MEMORY[0x1E4F1DB20];
    double v27 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v28 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v29 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  else
  {
    -[UIView convertRect:fromView:](self, "convertRect:fromView:", v21, x, y, v24, v25);
    double v26 = v30;
    double v27 = v31;
    double v28 = v32;
    double v29 = v33;
  }

  double v34 = v26;
  double v35 = v27;
  double v36 = v28;
  double v37 = v29;
  result.size.double height = v37;
  result.size.double width = v36;
  result.origin.double y = v35;
  result.origin.double x = v34;
  return result;
}

- (int64_t)_overrideVibrancyTrait
{
  char v3 = -[UIView _internalTraitOverrides](self);
  int v4 = [v3 _containsTraitToken:0x1ED3F5C40];

  if (!v4) {
    return -1;
  }
  id v5 = -[UIView _internalTraitOverrides](self);
  int64_t v6 = [v5 _valueForNSIntegerTraitToken:0x1ED3F5C40];

  return v6;
}

- (BOOL)_disableDictationTouchCancellation
{
  int v2 = objc_getAssociatedObject(self, &_sDisableDictationTouchCancellation);
  char v3 = [v2 BOOLValue];

  return v3;
}

- (id)_layer
{
  return self->_layer;
}

uint64_t __45__UIView_UIKitManual__actionForLayer_forKey___block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = [a3 valueForKeyPath:a2];
  return [v5 _setOriginalToValue:v6 forKey:a2 inLayer:a3];
}

id __45__UIView_AutoLayoutManual__nsli_minXVariable__block_invoke(uint64_t a1)
{
  return _UILayoutItemCreateAndObserveVariableWithValueRestriction(*(void **)(a1 + 32), 0, 1);
}

id __45__UIView_AutoLayoutManual__nsli_minYVariable__block_invoke(uint64_t a1)
{
  return _UILayoutItemCreateAndObserveVariableWithValueRestriction(*(void **)(a1 + 32), 0, 1);
}

id __52__UIView_AutoLayoutManual__nsli_boundsWidthVariable__block_invoke(uint64_t a1)
{
  return _UILayoutItemCreateAndObserveVariableWithValueRestriction(*(void **)(a1 + 32), 1, 1);
}

id __53__UIView_AutoLayoutManual__nsli_boundsHeightVariable__block_invoke(uint64_t a1)
{
  return _UILayoutItemCreateAndObserveVariableWithValueRestriction(*(void **)(a1 + 32), 1, 1);
}

- (void)_bringAncestorControlledCollectionSubviewToFrontAmongCoplanarPeers
{
  char v3 = [(UIView *)self window];

  if (v3)
  {
    id v5 = [(UIView *)self _ancestorCollectionReusableView];
    int v4 = [v5 _collectionView];
    [v4 _addControlledSubview:v5];
  }
}

- (id)_ancestorCollectionReusableView
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    char v3 = self;
  }
  else
  {
    int v4 = [(UIView *)self superview];
    char v3 = [v4 _ancestorCollectionReusableView];
  }
  return v3;
}

- (CGRect)frameInView:(id)a3
{
  [(UIView *)self _frameInCoordinateSpace:a3 window:0];
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

- (CGRect)_frameInCoordinateSpace:(id)a3 window:(id)a4
{
  id v5 = a3;
  [(UIView *)self bounds];
  -[UIView convertRect:toCoordinateSpace:](self, "convertRect:toCoordinateSpace:", v5);
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;

  double v14 = v7;
  double v15 = v9;
  double v16 = v11;
  double v17 = v13;
  result.size.double height = v17;
  result.size.double width = v16;
  result.origin.double y = v15;
  result.origin.double x = v14;
  return result;
}

- (id)_nearestViewController
{
  return 0;
}

- (int64_t)_lfld_count
{
  int v2 = objc_getAssociatedObject(self, &_MergedGlobals_15_6);
  int64_t v3 = [v2 integerValue];

  return v3;
}

- (void)_lfld_incrementCount
{
  int64_t v3 = [(UIView *)self _lfld_count];
  id v4 = [NSNumber numberWithInteger:v3 + 1];
  objc_setAssociatedObject(self, &_MergedGlobals_15_6, v4, (void *)1);
}

- (void)_lfld_prepareToResetCountIfNecessary
{
  v5[2] = *MEMORY[0x1E4F143B8];
  int64_t v3 = objc_getAssociatedObject(self, &unk_1EB25EA39);

  if (!v3)
  {
    v5[0] = *MEMORY[0x1E4F1C3A0];
    v5[1] = @"UITrackingRunLoopMode";
    id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:2];
    [(UIView *)self performSelector:sel__lfld_resetCount withObject:0 afterDelay:v4 inModes:0.0];

    objc_setAssociatedObject(self, &unk_1EB25EA39, MEMORY[0x1E4F1CC38], (void *)1);
  }
}

- (void)_lfld_resetCount
{
  objc_setAssociatedObject(self, &_MergedGlobals_15_6, &unk_1ED3F75C0, (void *)1);
  objc_setAssociatedObject(self, &unk_1EB25EA39, 0, (void *)1);
}

- (void)_lfld_pushCurrentLayoutMethodName:(id)a3
{
  id v5 = a3;
  objc_getAssociatedObject(self, &_UIViewCurrentLayoutMethodNameKey);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    objc_setAssociatedObject(self, &_UIViewCurrentLayoutMethodNameKey, v4, (void *)1);
  }
  [v4 addObject:v5];
}

- (void)_lfld_discardLastCurrentLayoutMethodName
{
  objc_getAssociatedObject(self, &_UIViewCurrentLayoutMethodNameKey);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 removeLastObject];
}

- (NSString)_lfld_currentLayoutMethodName
{
  id v2 = objc_getAssociatedObject(self, &_UIViewCurrentLayoutMethodNameKey);
  int64_t v3 = [v2 lastObject];

  return (NSString *)v3;
}

- (NSMutableArray)_lfld_geometryChangeRecords
{
  return (NSMutableArray *)objc_getAssociatedObject(self, &_UIViewLFLDGeometryChangeRecordsKey);
}

- (void)_lfld_addGeometryChangeRecordWithPropertyName:(id)a3 value:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v12 = [(UIView *)self _lfld_geometryChangeRecords];
  if (!v12)
  {
    id v12 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    objc_setAssociatedObject(self, &_UIViewLFLDGeometryChangeRecordsKey, v12, (void *)1);
  }
  double v8 = +[_UIViewLayoutFeedbackLoopDebugger layoutFeedbackLoopDebugger];
  double v9 = [v8 currentLayoutView];

  double v10 = objc_msgSend(v9, "_lfld_currentLayoutMethodName");
  double v11 = [[_UIViewLFLDGeometryChangeRecord alloc] initWithGeometricPropertyName:v7 value:v6 currentLayoutView:v9 methodName:v10];

  [v12 addObject:v11];
}

- (NSMutableSet)_lfld_setNeedsLayoutCallStacks
{
  return (NSMutableSet *)objc_getAssociatedObject(self, &_UIViewLFLDSetNeedsLayoutCallStacksKey);
}

- (void)_lfld_addSetNeedsLayoutCallStack:(id)a3
{
  id v5 = a3;
  id v4 = [(UIView *)self _lfld_setNeedsLayoutCallStacks];
  if (!v4)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    objc_setAssociatedObject(self, &_UIViewLFLDSetNeedsLayoutCallStacksKey, v4, (void *)1);
  }
  [v4 addObject:v5];
}

- (NSMutableArray)_lfld_variableChangeRecords
{
  return (NSMutableArray *)objc_getAssociatedObject(self, &_UIViewLFLDSubviewVariableChangeRecordsKey);
}

- (void)_lfld_addVariableChangeRecordForVariable:(id)a3 inLayoutEngine:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v11 = [(UIView *)self _lfld_variableChangeRecords];
  if (!v11)
  {
    id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    objc_setAssociatedObject(self, &_UIViewLFLDSubviewVariableChangeRecordsKey, v11, (void *)1);
  }
  double v8 = [[_UIViewLFLDVariableChangeRecord alloc] initWithVariable:v7 inLayoutEngine:v6];

  [v11 addObject:v8];
  double v9 = [v7 delegate];

  if (([v9 conformsToProtocol:&unk_1ED400E78] & 1) == 0)
  {

    double v9 = 0;
  }
  double v10 = [v9 _referenceView];
  objc_msgSend(v10, "_lfld_addConstraintsAffectingVariableValueChange:", v8);
}

- (NSMapTable)_lfld_constraintsAffectingVariableValueChanges
{
  return (NSMapTable *)objc_getAssociatedObject(self, &_UIViewLFLDConstraintsAffectingVariableChangesKey);
}

- (void)_lfld_addConstraintsAffectingVariableValueChange:(id)a3
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [v4 variable];
  id v6 = [v5 delegate];
  if (([v6 conformsToProtocol:&unk_1ED400E78] & 1) == 0)
  {
LABEL_15:

    goto LABEL_16;
  }
  if (v6)
  {
    id v7 = [(UIView *)self _lfld_constraintsAffectingVariableValueChanges];
    if (!v7)
    {
      id v7 = (void *)[objc_alloc(MEMORY[0x1E4F28E10]) initWithKeyOptions:512 valueOptions:512 capacity:0];
      objc_setAssociatedObject(self, &_UIViewLFLDConstraintsAffectingVariableChangesKey, v7, (void *)1);
    }
    id v8 = [v7 objectForKey:v5];
    if (!v8)
    {
      id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      [v7 setObject:v8 forKey:v5];
    }
    id v21 = v7;
    double v9 = [(UIView *)self _layoutEngine];
    double v10 = [v9 constraintsAffectingValueOfVariable:v5];
    id v11 = _UIViewSortedConstraintsForDebugging(v10);

    id v12 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v11, "count"));
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v13 = v11;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v23;
      do
      {
        uint64_t v17 = 0;
        do
        {
          if (*(void *)v23 != v16) {
            objc_enumerationMutation(v13);
          }
          double v18 = [*(id *)(*((void *)&v22 + 1) + 8 * v17) description];
          [v12 addObject:v18];

          ++v17;
        }
        while (v15 != v17);
        uint64_t v15 = [v13 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v15);
    }

    double v19 = NSNumber;
    [v4 value];
    double v20 = objc_msgSend(v19, "numberWithDouble:");
    [v8 setObject:v12 forKey:v20];

    goto LABEL_15;
  }
LABEL_16:
}

- (id)_lfld_minimalDescription
{
  [(UIView *)self frame];
  int64_t v3 = NSStringFromCGRect(v7);
  id v4 = [MEMORY[0x1E4F28E78] stringWithFormat:@"<%@: %p f=%@ ", objc_opt_class(), self, v3];;
  _UIViewDescriptionAppendBaseClass(self, v4);
  [v4 appendString:@">"];

  return v4;
}

- (id)_lfld_description
{
  int64_t v3 = [MEMORY[0x1E4F28E78] stringWithFormat:@"<%@: %p; ", objc_opt_class(), self];
  _UIViewDescriptionAppendBaseClass(self, v3);
  _UIViewDescriptionAppendFrame(self, v3);
  _UIViewDescriptionAppendTransform(self, v3);
  _UIViewDescriptionAppendTextIfApplicable(self, v3);
  uint64_t viewFlags = (uint64_t)self->_viewFlags;
  if ((viewFlags & 0x400000000000000) != 0)
  {
    [v3 appendString:@"wants auto layout; "];
    if ((viewFlags & 0x80000000000) != 0) {
      [v3 appendString:@"hosts layout engine; "];
    }
    if ((*(void *)&self->_viewFlags & 0x20000000000000) != 0) {
      id v5 = @"NO";
    }
    else {
      id v5 = @"YES";
    }
    [v3 appendFormat:@"tAMIC = %@; ", v5];
    if ([(UIView *)self hasAmbiguousLayout]) {
      [v3 appendString:@"AMBIGUOUS LAYOUT; "];
    }
  }
  [v3 appendString:@">"];
  return v3;
}

@end