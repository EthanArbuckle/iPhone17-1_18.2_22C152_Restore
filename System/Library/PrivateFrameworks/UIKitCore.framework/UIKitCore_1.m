void __getAFPreferencesClass_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;

  AssistantServicesLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFPreferences");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAFPreferencesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = [MEMORY[0x1E4F28B00] currentHandler];
    v3 = [NSString stringWithUTF8String:"Class getAFPreferencesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardInputModeController.m", 120, @"Unable to find class %s", "AFPreferences");

    __break(1u);
  }
}

void __getAFPreferencesClass_block_invoke_0(uint64_t a1)
{
  AssistantServicesLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFPreferences");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB261A00 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = [MEMORY[0x1E4F28B00] currentHandler];
    v3 = [NSString stringWithUTF8String:"Class getAFPreferencesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationConnection.m", 61, @"Unable to find class %s", "AFPreferences");

    __break(1u);
  }
}

void __getAFPreferencesClass_block_invoke_1(uint64_t a1)
{
  AssistantServicesLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFPreferences");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAFPreferencesClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = [MEMORY[0x1E4F28B00] currentHandler];
    v3 = [NSString stringWithUTF8String:"Class getAFPreferencesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 230, @"Unable to find class %s", "AFPreferences");

    __break(1u);
  }
}

void *AssistantServicesLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!AssistantServicesLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __AssistantServicesLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E52F35B0;
    uint64_t v6 = 0;
    AssistantServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  v0 = (void *)AssistantServicesLibraryCore_frameworkLibrary;
  if (!AssistantServicesLibraryCore_frameworkLibrary)
  {
    v0 = [MEMORY[0x1E4F28B00] currentHandler];
    v3 = [NSString stringWithUTF8String:"void *AssistantServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardInputModeController.m", 119, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *AssistantServicesLibrary_0()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!AssistantServicesLibraryCore_frameworkLibrary_0)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __AssistantServicesLibraryCore_block_invoke_0;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E52FA858;
    uint64_t v6 = 0;
    AssistantServicesLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  v0 = (void *)AssistantServicesLibraryCore_frameworkLibrary_0;
  if (!AssistantServicesLibraryCore_frameworkLibrary_0)
  {
    v0 = [MEMORY[0x1E4F28B00] currentHandler];
    v3 = [NSString stringWithUTF8String:"void *AssistantServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationConnection.m", 54, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *AssistantServicesLibrary_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!AssistantServicesLibraryCore_frameworkLibrary_1)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __AssistantServicesLibraryCore_block_invoke_1;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E52FB1F8;
    uint64_t v6 = 0;
    AssistantServicesLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  v0 = (void *)AssistantServicesLibraryCore_frameworkLibrary_1;
  if (!AssistantServicesLibraryCore_frameworkLibrary_1)
  {
    v0 = [MEMORY[0x1E4F28B00] currentHandler];
    v3 = [NSString stringWithUTF8String:"void *AssistantServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 227, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void AssistantServicesLibrary_2()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AssistantServicesLibraryCore_frameworkLibrary_2)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __AssistantServicesLibraryCore_block_invoke_2;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E52FB750;
    uint64_t v5 = 0;
    AssistantServicesLibraryCore_frameworkLibrary_2 = _sl_dlopen();
  }
  if (!AssistantServicesLibraryCore_frameworkLibrary_2)
  {
    v1 = [MEMORY[0x1E4F28B00] currentHandler];
    v2 = [NSString stringWithUTF8String:"void *AssistantServicesLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIDictationUtilities.m", 55, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t _engineClassSupportsAllIndividualFeedbacks(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        if (objc_msgSend(a1, "_supportsPlayingIndividualFeedback:", *(void *)(*((void *)&v12 + 1) + 8 * i), (void)v12))
        {
          v8 = [a1 sharedEngine];
          int v9 = [v8 isEnabled];

          if (v9) {
            continue;
          }
        }
        uint64_t v10 = 0;
        goto LABEL_13;
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v10 = 1;
      if (v5) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v10 = 1;
  }
LABEL_13:

  return v10;
}

id _coreHapticsEventTypeForEffectiveEventType(uint64_t a1, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1 <= 20308)
  {
    if (a1 <= 15712)
    {
      if ((unint64_t)(a1 - 8021) < 3 || (unint64_t)(a1 - 11093) < 3) {
        goto LABEL_30;
      }
      uint64_t v3 = -14165;
      goto LABEL_10;
    }
    if (a1 > 16480)
    {
      if ((unint64_t)(a1 - 17237) < 3) {
        goto LABEL_30;
      }
      if (a1 == 16481) {
        goto LABEL_37;
      }
      uint64_t v5 = 16737;
    }
    else
    {
      if (a1 == 15713 || a1 == 15969) {
        goto LABEL_37;
      }
      uint64_t v5 = 16225;
    }
    if (a1 != v5) {
      goto LABEL_41;
    }
LABEL_37:
    uint64_t v4 = getCHHapticEventTypeHapticContinuous();
    goto LABEL_38;
  }
  if (a1 > 29524)
  {
    if (a1 <= 32554)
    {
      if ((unint64_t)(a1 - 29525) < 3) {
        goto LABEL_30;
      }
      if (a1 != 32512)
      {
        if (a1 == 32513)
        {
          uint64_t v4 = getCHHapticEventTypeAudioContinuous();
          goto LABEL_38;
        }
        goto LABEL_41;
      }
LABEL_28:
      uint64_t v4 = getCHHapticEventTypeAudioCustom();
      goto LABEL_38;
    }
    if (a1 <= 32556)
    {
      if (a1 == 32555) {
        getCHHapticEventTypeAudioClick();
      }
      else {
      uint64_t v4 = getCHHapticEventTypeWheelsOfTime();
      }
      goto LABEL_38;
    }
    if (a1 == 32639) {
      goto LABEL_28;
    }
    if (a1 != 32610)
    {
      uint64_t v6 = 32557;
      goto LABEL_27;
    }
    goto LABEL_37;
  }
  if (a1 <= 26452)
  {
    if ((unint64_t)(a1 - 20309) < 3) {
      goto LABEL_30;
    }
    uint64_t v3 = -23381;
LABEL_10:
    if ((unint64_t)(a1 + v3) >= 3) {
      goto LABEL_41;
    }
LABEL_30:
    uint64_t v4 = getCHHapticEventTypeHapticTransient();
    goto LABEL_38;
  }
  if ((unint64_t)(a1 - 26453) < 3) {
    goto LABEL_30;
  }
  uint64_t v6 = 29485;
LABEL_27:
  if (a1 == v6) {
    goto LABEL_28;
  }
LABEL_41:
  uint64_t v4 = 0;
  if (a2 && !_UIFeedbackLoggingDisabled)
  {
    v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("Feedback", &_coreHapticsEventTypeForEffectiveEventType___s_category)+ 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 134217984;
      uint64_t v10 = a1;
      _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "Cannot convert UIFeedbackHapticEventType (%ld) to CHHapticEventType", (uint8_t *)&v9, 0xCu);
    }
    uint64_t v4 = 0;
  }
LABEL_38:
  return v4;
}

void getCHHapticEventTypeHapticTransient()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  v0 = (void **)getCHHapticEventTypeHapticTransientSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventTypeHapticTransientSymbolLoc_ptr;
  if (!getCHHapticEventTypeHapticTransientSymbolLoc_ptr)
  {
    v1 = CoreHapticsLibrary_1();
    v7[3] = (uint64_t)dlsym(v1, "CHHapticEventTypeHapticTransient");
    getCHHapticEventTypeHapticTransientSymbolLoc_ptr = v7[3];
    v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"CHHapticEventType getCHHapticEventTypeHapticTransient(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 40, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1855C9604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1855C9C50()
{
  if (objc_msgSend(v0, sel_applicationState) && objc_msgSend(v0, sel_applicationState) != (id)1) {
    return 0;
  }
  id v1 = _UIMainBundleIdentifier();
  if (!v1) {
    goto LABEL_8;
  }
  v2 = v1;
  uint64_t v3 = sub_186A1E95C();
  uint64_t v5 = v4;

  if (v3 != 0xD00000000000001FLL || v5 != 0x8000000186BA3BE0)
  {
    char v6 = sub_186A1F85C();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if (v6) {
      return result;
    }
LABEL_8:
    if (_UIApplicationIsExtension()) {
      return 0;
    }
    id v8 = objc_msgSend(self, sel_sharedTracker);
    char v9 = -[_UIActiveViewServiceSessionTracker hasTrackedSessions]((uint64_t)v8);

    if (v9) {
      return 0;
    }
    id v10 = objc_msgSend(self, sel__scenesIncludingInternal_, 0);
    sub_1853B985C(0, &qword_1EB256808);
    unint64_t v11 = sub_186A1EB3C();

    if (v11 >> 62) {
      goto LABEL_29;
    }
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v12)
    {
LABEL_30:
      swift_bridgeObjectRelease_n();
      return 0;
    }
LABEL_12:
    uint64_t v13 = 4;
    while (1)
    {
      if ((v11 & 0xC000000000000001) != 0) {
        id v15 = (id)MEMORY[0x18C102240](v13 - 4, v11);
      }
      else {
        id v15 = *(id *)(v11 + 8 * v13);
      }
      v16 = v15;
      uint64_t v17 = v13 - 3;
      if (__OFADD__(v13 - 4, 1))
      {
        __break(1u);
LABEL_29:
        swift_bridgeObjectRetain();
        uint64_t v12 = sub_186A1F67C();
        if (!v12) {
          goto LABEL_30;
        }
        goto LABEL_12;
      }
      if ((unint64_t)objc_msgSend(v15, sel_activationState) > 1) {
        break;
      }
      id v18 = objc_msgSend(v16, sel__windowHostingScene);
      if (!v18) {
        break;
      }
      long long v14 = v18;
      id v19 = objc_msgSend(v16, sel__intelligenceClientSceneComponent);
      swift_unknownObjectRelease();
      if (v19)
      {

        goto LABEL_14;
      }
      id v20 = objc_msgSend(v16, sel__interfaceProtectionSceneComponent);
      if (!v20)
      {
        swift_bridgeObjectRelease_n();

        return 1;
      }
      v21 = v20;
      char v22 = -[_UIInterfaceProtectionSceneComponent underAppProtection]((uint64_t)v20);

      if ((v22 & 1) == 0)
      {
        swift_bridgeObjectRelease_n();
        return 1;
      }
LABEL_15:
      ++v13;
      if (v17 == v12) {
        goto LABEL_30;
      }
    }
    long long v14 = v16;
LABEL_14:

    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t _UIScreenHasScreens()
{
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  uint64_t v4 = ___UIScreenHasScreens_block_invoke;
  uint64_t v5 = &unk_1E52D9900;
  char v6 = &v7;
  v0 = v3;
  os_unfair_lock_lock((os_unfair_lock_t)&__UIScreenMutableScreensArrayAccessLock);
  v4((uint64_t)v0);

  os_unfair_lock_unlock((os_unfair_lock_t)&__UIScreenMutableScreensArrayAccessLock);
  uint64_t v1 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v1;
}

void sub_1855CA328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIContentSizeCategoryPreferenceSafeContentSizeCategory(void *a1)
{
  id v1 = a1;
  if (![v1 length])
  {
    id v2 = (id)UIApp;
    if (v2) {
      uint64_t v3 = (__objc2_class *)objc_opt_class();
    }
    else {
      uint64_t v3 = UIApplication;
    }
    uint64_t v4 = [(__objc2_class *)v3 _defaultContentSizeCategory];

    if (![v4 length])
    {
      uint64_t v5 = @"UICTContentSizeCategoryL";

      uint64_t v4 = v5;
    }

    id v1 = v4;
  }
  return v1;
}

uint64_t _UIApplicationIsExtension()
{
  if (qword_1EB25B5B8 != -1) {
    dispatch_once(&qword_1EB25B5B8, &__block_literal_global_1234);
  }
  return byte_1EB25B4E3;
}

void ____registeredReusePools_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28F50] weakObjectsPointerArray];
  id v1 = (void *)qword_1EB25CEC0;
  qword_1EB25CEC0 = v0;
}

void sub_1855CBE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void recursivelyObserveChildrenState(void *a1, void *a2, char a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __recursivelyObserveChildrenState_block_invoke;
  aBlock[3] = &unk_1E52E4BB8;
  char v24 = a3;
  id v7 = v5;
  id v23 = v7;
  id v8 = _Block_copy(aBlock);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id obj = [v6 children];
  uint64_t v9 = [obj countByEnumeratingWithState:&v18 objects:v25 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        v15[0] = MEMORY[0x1E4F143A8];
        v15[1] = 3221225472;
        v15[2] = __recursivelyObserveChildrenState_block_invoke_2;
        v15[3] = &unk_1E52E4BE0;
        id v16 = v7;
        char v17 = a3;
        [v13 _acceptMenuVisit:v15 commandVisit:v8 actionVisit:v8 deferredElementVisit:0];
      }
      uint64_t v10 = [obj countByEnumeratingWithState:&v18 objects:v25 count:16];
    }
    while (v10);
  }
}

uint64_t __recursivelyObserveChildrenState_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40)) {
    return [a2 _addStateObserver:v2];
  }
  else {
    return [a2 _removeStateObserver:v2];
  }
}

void _UIMenuStateObserverableLeafStateDidChange(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 _getStateObservers];
  uint64_t v3 = v2;
  if (v2)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    uint64_t v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          [*(id *)(*((void *)&v8 + 1) + 8 * v7++) _elementStateDidChange:v1];
        }
        while (v5 != v7);
        uint64_t v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v5);
    }
  }
}

void _UIMenuStateObserverableLeafAddObserver(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 _getStateObservers];
  if (!v5)
  {
    uint64_t v5 = [MEMORY[0x1E4F28F50] weakObjectsPointerArray];
    [v3 _setStateObservers:v5];
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v6 = v5;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    while (2)
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        if (*(id *)(*((void *)&v11 + 1) + 8 * v10) == v4)
        {

          goto LABEL_13;
        }
        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }

  objc_msgSend(v6, "addPointer:", v4, (void)v11);
LABEL_13:
}

uint64_t __recursivelyObserveChildrenState_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return recursivelyObserveChildrenState(*(void *)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 40));
}

void sub_1855CC9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void recursivelyPopulateSelectedElements(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id obj = [a1 children];
  uint64_t v4 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * v7);
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 3221225472;
        v12[2] = __recursivelyPopulateSelectedElements_block_invoke;
        v12[3] = &unk_1E52E4B40;
        id v13 = v3;
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3221225472;
        v10[2] = __recursivelyPopulateSelectedElements_block_invoke_2;
        v10[3] = &unk_1E52E4C08;
        id v11 = v13;
        [v8 _acceptMenuVisit:v12 leafVisit:v10];

        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }
}

void __recursivelyPopulateSelectedElements_block_invoke_2(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 state] == 1) {
    [*(id *)(a1 + 32) addObject:v3];
  }
}

void sub_1855CDD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t objectdestroy_154Tm(uint64_t a1)
{
  swift_release();

  return MEMORY[0x1F4186498](v1, a1, 7);
}

void _UIContentViewUpdateLabelAttributesForAccessibilityLayout(void *a1, void *a2, uint64_t a3, double a4)
{
  id v53 = a1;
  id v7 = a2;
  if (v53 && ([v53 isHidden] & 1) == 0 && objc_msgSend(v7, "_hasNonEmptyPlainTextOnly"))
  {
    float v8 = 0.0;
    if ((unint64_t)(a3 - 1) <= 1)
    {
      if ([v53 numberOfLines] == 1) {
        float v8 = 0.0;
      }
      else {
        float v8 = 1.0;
      }
    }
    if (a4 > 0.0 || v8 > 0.0)
    {
      [v53 _setOverallWritingDirectionFollowsLayoutDirection:1];
      id v23 = [v53 attributedText];
      uint64_t v9 = (void *)[v23 mutableCopy];

      if (![v9 length])
      {
        v48 = [MEMORY[0x1E4F28B00] currentHandler];
        v49 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIContentViewUpdateLabelAttributesForAccessibilityLayout(UILabel *__strong _Nonnull, __strong id<_UIListContentTextPropertiesInternal> _Nonnull, _UIContentViewLayoutMode, CGFloat)");
        [v48 handleFailureInFunction:v49 file:@"_UIContentViewShared.m" lineNumber:88 description:@"Can't set attributes on a zero length string!"];
      }
      char v24 = [v9 string];
      uint64_t v25 = objc_msgSend(v24, "paragraphRangeForRange:", 0, 0);
      uint64_t v27 = v26;

      uint64_t v28 = *(void *)off_1E52D21B8;
      v29 = [v9 attribute:*(void *)off_1E52D21B8 atIndex:v25 effectiveRange:0];
      id v20 = v29;
      if (v29) {
        id v30 = (id)[v29 mutableCopy];
      }
      else {
        id v30 = objc_alloc_init((Class)off_1E52D2D48);
      }
      char v22 = v30;
      [v30 setFirstLineHeadIndent:a4];
      *(float *)&double v31 = v8;
      [v22 setHyphenationFactor:v31];
      objc_msgSend(v9, "addAttribute:value:range:", v28, v22, v25, v27);
      unint64_t v32 = v25 + v27;
      if ([v9 length] > v32)
      {
        unint64_t v33 = [v9 length] - v32;
        v34 = [v9 attribute:v28 atIndex:v32 effectiveRange:0];
        v35 = v34;
        if (v34) {
          id v36 = (id)[v34 mutableCopy];
        }
        else {
          id v36 = objc_alloc_init((Class)off_1E52D2D48);
        }
        v47 = v36;
        *(float *)&double v37 = v8;
        [v36 setHyphenationFactor:v37];
        objc_msgSend(v9, "addAttribute:value:range:", v28, v47, v32, v33);
      }
      [v53 setAttributedText:v9];
      goto LABEL_50;
    }
    [v53 _setOverallWritingDirectionFollowsLayoutDirection:0];
    uint64_t v9 = [v53 _content];
    uint64_t v10 = [v9 length];
    if (v10 < 1)
    {
LABEL_51:

      goto LABEL_52;
    }
    unint64_t v11 = v10;
    long long v12 = [v9 string];
    uint64_t v13 = objc_msgSend(v12, "paragraphRangeForRange:", 0, 0);
    uint64_t v15 = v14;

    if (v11 <= v13 + v15) {
      unint64_t v16 = 0;
    }
    else {
      unint64_t v16 = v11 - (v13 + v15);
    }
    if (v11 <= v13 + v15) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v13 + v15;
    }
    if ([v9 isAttributed])
    {
      long long v18 = [v9 attributedString];
      uint64_t v19 = *(void *)off_1E52D21B8;
      id v20 = [v18 attribute:*(void *)off_1E52D21B8 atIndex:v13 effectiveRange:0];

      if (v16)
      {
        long long v21 = [v9 attributedString];
        char v22 = [v21 attribute:v19 atIndex:v17 effectiveRange:0];

        goto LABEL_31;
      }
    }
    else
    {
      v38 = [v9 defaultAttributes];
      uint64_t v19 = *(void *)off_1E52D21B8;
      id v20 = [v38 objectForKey:*(void *)off_1E52D21B8];

      if (v16)
      {
        id v20 = v20;
        char v22 = v20;
        goto LABEL_31;
      }
    }
    char v22 = 0;
LABEL_31:
    uint64_t v52 = v19;
    if (!v20
      || ([v20 firstLineHeadIndent], v39 == 0.0) && (objc_msgSend(v20, "hyphenationFactor"), v40 == 0.0))
    {
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v41 = [v20 mutableCopy];
      [(id)v41 setFirstLineHeadIndent:0.0];
      [(id)v41 setHyphenationFactor:0.0];
    }
    uint64_t v51 = v15;
    if (!v22 || ([v22 hyphenationFactor], v42 == 0.0))
    {
      uint64_t v43 = 0;
    }
    else
    {
      uint64_t v43 = [v22 mutableCopy];
      [(id)v43 setHyphenationFactor:0.0];
    }
    if (v41 | v43)
    {
      uint64_t v50 = v17;
      unint64_t v44 = v16;
      v45 = [v9 attributedString];
      v46 = (void *)[v45 mutableCopy];

      if (v41) {
        objc_msgSend(v46, "addAttribute:value:range:", v52, v41, v13, v51);
      }
      if (v43) {
        objc_msgSend(v46, "addAttribute:value:range:", v52, v43, v50, v44);
      }
      [v53 setAttributedText:v46];
    }
LABEL_50:

    goto LABEL_51;
  }
LABEL_52:
}

uint64_t _UIConfigurationIdentifierForColorTransformer(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    if (qword_1EB260568 != -1) {
      dispatch_once(&qword_1EB260568, &__block_literal_global_56_2);
    }
    uint64_t v2 = NSMapGet((NSMapTable *)_MergedGlobals_1041, v1);
    if (v2) {
      uint64_t v3 = (uint64_t)v2;
    }
    else {
      uint64_t v3 = 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

id _UINavigationTitleAppearanceAddDefaultTitleAttributes(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = +[_UINavigationBarTitleFontProvider providerForIdiom:a2];
  uint64_t v5 = [v4 defaultInlineTitleFont];
  uint64_t v6 = _UINavigationTitleAppearanceCompleteAttributesWithFont(v3, v5);

  return v6;
}

id _UINavigationTitleAppearanceAddDefaultLargeTitleAttributes(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = +[_UINavigationBarTitleFontProvider providerForIdiom:a2];
  uint64_t v5 = [v4 defaultLargeTitleFont];
  uint64_t v6 = _UINavigationTitleAppearanceCompleteAttributesWithFont(v3, v5);

  return v6;
}

double _UICellContentViewDefaultDirectionalLayoutMargins(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = a1;
  uint64_t v10 = [a2 layoutDirection];
  [v9 defaultCellContentLeadingPaddingForSidebar:a4];
  double v12 = v11;
  [v9 defaultCellContentTrailingPadding];
  if (v10 == 1) {
    double v14 = v13;
  }
  else {
    double v14 = v12;
  }
  if (v10 != 1) {
    double v12 = v13;
  }
  uint64_t v15 = +[UITraitCollection traitCollectionWithPreferredContentSizeCategory:@"UICTContentSizeCategoryL"];
  unint64_t v16 = [off_1E52D39B8 preferredFontForTextStyle:@"UICTFontTextStyleBody" compatibleWithTraitCollection:v15];

  objc_msgSend(v9, "defaultCellLayoutMarginsForTableStyle:cellStyle:textLabelFont:rawLayoutMargins:", a5, a3, v16, 8.0, v14, 8.0, v12);
  double v18 = v17;

  return v18;
}

id _UINavigationTitleAppearanceCompleteAttributesWithFont(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = *(void *)off_1E52D2040;
  uint64_t v6 = [v3 objectForKey:*(void *)off_1E52D2040];

  uint64_t v7 = *(void *)off_1E52D2048;
  float v8 = [v3 objectForKey:*(void *)off_1E52D2048];

  if (v6) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    id v20 = v3;
    goto LABEL_23;
  }
  uint64_t v23 = v5;
  uint64_t v24 = v7;
  id v25 = v4;
  id v10 = objc_alloc(MEMORY[0x1E4F1CA60]);
  unint64_t v11 = [v3 count];
  if (v11 <= 2) {
    uint64_t v12 = 2;
  }
  else {
    uint64_t v12 = v11;
  }
  id v20 = (id)[v10 initWithCapacity:v12];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v13 = v3;
  uint64_t v14 = [v13 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v27 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = *(void *)(*((void *)&v26 + 1) + 8 * i);
        uint64_t v19 = [v13 objectForKeyedSubscript:v18];
        if (v19) {
          [v20 setObject:v19 forKeyedSubscript:v18];
        }
      }
      uint64_t v15 = [v13 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v15);
  }

  id v4 = v25;
  if (v6)
  {
    if (v8) {
      goto LABEL_23;
    }
  }
  else
  {
    [v20 setObject:v25 forKeyedSubscript:v23];
    if (v8) {
      goto LABEL_23;
    }
  }
  long long v21 = +[UIColor labelColor];
  [v20 setObject:v21 forKeyedSubscript:v24];

LABEL_23:
  return v20;
}

BOOL _UIContentViewShouldUseAccessibilityLargeTextLayout(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 preferredContentSizeCategory];
  BOOL v3 = UIContentSizeCategoryIsAccessibilityCategory(v2) && [v1 userInterfaceIdiom] != 3;

  return v3;
}

uint64_t _UICollectionViewListStyleFromListEnvironment(unint64_t a1)
{
  if (a1 < 7) {
    return qword_186B9ACE0[a1];
  }
  BOOL v3 = [MEMORY[0x1E4F28B00] currentHandler];
  id v4 = [NSString stringWithUTF8String:"_UICollectionViewListLayoutAppearanceStyle _UICollectionViewListStyleFromListEnvironment(UIListEnvironment)"];
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UITraitListEnvironment.m", 88, @"Received unknown list environment %ld", a1);

  return 0;
}

double _UIContentViewImageViewLayoutHeight(void *a1, void *a2, double a3, double a4, double a5)
{
  id v9 = a1;
  id v10 = a2;
  if (a4 == -1.79769313e308 || v9 && a4 == 0.0 && [v9 isSymbolImage])
  {
    unint64_t v11 = _UITableConstantsForTraitCollection(v10);
    [v11 defaultImageViewSymbolImageLayoutHeightForTraitCollection:v10];
    a4 = v12;
  }
  if (a3 >= a5) {
    double v13 = a5;
  }
  else {
    double v13 = a3;
  }
  if (a5 <= 0.0) {
    double v13 = a3;
  }
  if (a4 == 0.0) {
    double v14 = v13;
  }
  else {
    double v14 = a4;
  }

  return v14;
}

double _UIContentViewImageViewHorizontalCenteringOffset(void *a1, void *a2, uint64_t a3, double a4, double a5)
{
  id v9 = a1;
  id v10 = a2;
  if (a5 == -1.79769313e308 || a5 == 0.0 && _UITableCellShouldCenterImageHorizontallyForTraitCollection(v9, v10))
  {
    unint64_t v11 = _UITableConstantsForTraitCollection(v10);
    [v11 defaultImageViewSymbolImageAndAccessoryLayoutWidthForSidebar:a3 traitCollection:v10];
    a5 = v12;
  }
  if (a5 <= 0.0) {
    double v13 = 0.0;
  }
  else {
    double v13 = (a5 - a4) * 0.5;
  }

  return v13;
}

uint64_t objectdestroy_511Tm()
{
  swift_release();

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 48);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 176, 7);
}

uint64_t objectdestroy_573Tm()
{
  swift_release();

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 96);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 224, 7);
}

uint64_t objectdestroy_351Tm()
{
  swift_release();

  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 64);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 192, 7);
}

uint64_t _s29AnimatablePropertyTransformerC17RunningProgressesV5EntryVwxx()
{
  return swift_unknownObjectRelease();
}

id UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  double v14 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  if (a9)
  {
    uint64_t v15 = (void *)sub_186A1E92C();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = 0;
  }
  id v16 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  void aBlock[4] = a12;
  aBlock[5] = a13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1858F6298;
  aBlock[3] = &block_descriptor_78;
  double v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v18 = objc_msgSend(v16, sel_initWithTitle_image_identifier_discoverabilityTitle_attributes_state_handler_, v14, a5, a7, v15, a10, a11, v17);
  _Block_release(v17);

  id v19 = v18;
  if (a4)
  {
    id v20 = (void *)sub_186A1E92C();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v20 = 0;
  }
  objc_msgSend(v18, sel_setSubtitle_, v20);

  objc_msgSend(v18, sel_setSelectedImage_, a6);
  swift_release();
  return v18;
}

uint64_t ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_47(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = [a3 phase];
  uint64_t result = [a3 phase];
  if (result == 3) {
    return result;
  }
  if (*(unsigned char *)(a1 + 56) || ([a3 _hidEvent], (IOHIDEventGetIntegerValue() & 0x80) != 0))
  {
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262B70);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      double v12 = *(NSObject **)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v14 = 134217984;
        uint64_t v15 = a3;
        _os_log_impl(&dword_1853B0000, v12, OS_LOG_TYPE_ERROR, "\t\tTouch in previous map was not ended, but we're cancelling; move touch to cancelled: %p",
          (uint8_t *)&v14,
          0xCu);
      }
    }
    uint64_t v8 = 4;
    goto LABEL_9;
  }
  if (v5 != 4)
  {
    unint64_t v7 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262B78);
    if (*(unsigned char *)v7)
    {
      double v13 = *(NSObject **)(v7 + 8);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v14 = 134217984;
        uint64_t v15 = a3;
        _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "\t\tTouch in previous map was not ended and not cancelled; move touch to ended: %p",
          (uint8_t *)&v14,
          0xCu);
      }
    }
    uint64_t v8 = 3;
LABEL_9:
    [a3 setPhase:v8];
  }
  [a3 setTimestamp:*(double *)(a1 + 40)];
  _UpdateTouchTapCount(a3, 0, *(double *)(a1 + 40), *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8));
  if (*(unsigned char *)(a1 + 57))
  {
    id v10 = [a3 window];
    int v11 = [v10 _canIgnoreInteractionEvents];
  }
  else
  {
    int v11 = 0;
  }
  uint64_t result = _AddTouchToEventAndDetermineIfNeedsCancel(v11, (uint64_t)a3, v5 == 4, *(void **)(a1 + 48));
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  return result;
}

void ____registerReusePool_block_invoke(uint64_t a1)
{
  if (qword_1EB25CEC8 != -1) {
    dispatch_once(&qword_1EB25CEC8, &__block_literal_global_37_4);
  }
  id v2 = (id)qword_1EB25CEC0;
  [v2 compact];
  [v2 addPointer:*(void *)(a1 + 32)];
}

uint64_t _UISceneLifecycleStateIsForegroundActive(void *a1)
{
  id v1 = a1;
  if ([v1 isForeground]) {
    uint64_t v2 = _UISceneLifecycleStateIsSEO(v1) ^ 1;
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_52(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v5 = [a3 window];
    int v6 = [v5 _canIgnoreInteractionEvents];
  }
  else
  {
    int v6 = 0;
  }
  uint64_t result = _AddTouchToEventAndDetermineIfNeedsCancel(v6, (uint64_t)a3, [a3 phase] == 4, *(void **)(a1 + 40));
  if (result)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v8();
  }
  return result;
}

BOOL _AddTouchToEventAndDetermineIfNeedsCancel(int a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = -[UITouch _effectivelyAuthentic](a2);
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262CC8);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    char v22 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = @"NO";
      if (a1) {
        uint64_t v24 = @"YES";
      }
      else {
        uint64_t v24 = @"NO";
      }
      if (a3) {
        uint64_t v23 = @"YES";
      }
      *(_DWORD *)unint64_t v44 = 138412546;
      *(void *)&v44[4] = v24;
      __int16 v45 = 2112;
      v46 = v23;
      _os_log_impl(&dword_1853B0000, v22, OS_LOG_TYPE_ERROR, "\tAdd touch to event: ignoring interaction: %@; was cancelled: %@",
        v44,
        0x16u);
    }
  }
  unint64_t v10 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262CD0);
  if (*(unsigned char *)v10)
  {
    id v25 = *(NSObject **)(v10 + 8);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      long long v26 = v25;
      long long v27 = @"NO";
      if (a2)
      {
        if (*(unsigned char *)(a2 + 264)) {
          long long v28 = @"YES";
        }
        else {
          long long v28 = @"NO";
        }
      }
      else
      {
        long long v28 = @"NO";
      }
      *(_DWORD *)unint64_t v44 = 134218498;
      if (v8) {
        long long v27 = @"YES";
      }
      *(void *)&v44[4] = a2;
      __int16 v45 = 2112;
      v46 = v28;
      __int16 v47 = 2112;
      v48 = v27;
      _os_log_impl(&dword_1853B0000, v26, OS_LOG_TYPE_ERROR, "\t\tTouch %p is eaten: %@; effectively authentic: %@",
        v44,
        0x20u);
    }
  }
  unint64_t v11 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262CD8);
  if (*(unsigned char *)v11)
  {
    long long v29 = *(NSObject **)(v11 + 8);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      id v30 = v29;
      uint64_t v31 = @"NO";
      if (a2 && *(unsigned char *)(a2 + 264)) {
        uint64_t v31 = @"YES";
      }
      *(_DWORD *)unint64_t v44 = 134218242;
      *(void *)&v44[4] = a2;
      __int16 v45 = 2112;
      v46 = v31;
      _os_log_impl(&dword_1853B0000, v30, OS_LOG_TYPE_ERROR, "\t\tTouch %p is eaten: %@", v44, 0x16u);
    }
  }
  unint64_t v12 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262CE0);
  if (*(unsigned char *)v12)
  {
    unint64_t v32 = *(NSObject **)(v12 + 8);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      unint64_t v33 = v32;
      v34 = [a4 allTouches];
      uint64_t v35 = [v34 count];
      *(_DWORD *)unint64_t v44 = 134217984;
      *(void *)&v44[4] = v35;
      _os_log_impl(&dword_1853B0000, v33, OS_LOG_TYPE_ERROR, "\t\tTouches event current touch count %lu", v44, 0xCu);
    }
  }
  if ((a1 & 1) == 0 && (!a2 || !*(unsigned char *)(a2 + 264)) && v8 == 1)
  {
    if ((a3 & 1) == 0) {
      [a4 _addTouch:a2 forDelayedDelivery:0];
    }
    goto LABEL_17;
  }
  if (!objc_msgSend((id)a2, "phase", *(void *)v44))
  {
    [(id)a2 setPhase:4];
    goto LABEL_17;
  }
  if (a3)
  {
LABEL_17:
    BOOL v13 = 0;
    goto LABEL_20;
  }
  BOOL v13 = [(id)a2 phase] == 3 || objc_msgSend((id)a2, "phase") == 4;
  [a4 _addTouch:a2 forDelayedDelivery:0];
LABEL_20:
  int v14 = objc_msgSend((id)a2, "window", *(void *)v44);
  uint64_t v15 = [v14 _boundContext];
  [v15 _notifyIfChangedFromSecure:v8];

  if ((v8 & 1) == 0)
  {
    uint64_t v16 = [MEMORY[0x1E4F28EB8] defaultCenter];
    if (a2) {
      double v17 = *(void **)(a2 + 360);
    }
    else {
      double v17 = 0;
    }
    id v18 = v17;
    [v16 postNotificationName:@"_UIEventDispatcherDidCancelTouchForInsecureServicePresentation" object:v18];
  }
  unint64_t v19 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262CE8);
  if (*(unsigned char *)v19)
  {
    id v36 = *(NSObject **)(v19 + 8);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      if (v13) {
        double v37 = @"YES";
      }
      else {
        double v37 = @"NO";
      }
      v38 = v36;
      double v39 = [(id)a2 _phaseDescription];
      *(_DWORD *)unint64_t v44 = 138412546;
      *(void *)&v44[4] = v37;
      __int16 v45 = 2112;
      v46 = v39;
      _os_log_impl(&dword_1853B0000, v38, OS_LOG_TYPE_ERROR, "\t\tNeeds cancel: %@; new touch phase: %@", v44, 0x16u);
    }
  }
  unint64_t v20 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262CF0);
  if (*(unsigned char *)v20)
  {
    float v40 = *(NSObject **)(v20 + 8);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = v40;
      float v42 = [a4 allTouches];
      uint64_t v43 = [v42 count];
      *(_DWORD *)unint64_t v44 = 134217984;
      *(void *)&v44[4] = v43;
      _os_log_impl(&dword_1853B0000, v41, OS_LOG_TYPE_ERROR, "\t\tTouches event new touch count %lu", v44, 0xCu);
    }
  }
  return v13;
}

void __UIContextBinderAttachContext(void *a1, void *a2)
{
  id v8 = a1;
  id v3 = a2;
  id v4 = [v3 _boundContext];
  if (!v4) {
    goto LABEL_8;
  }
  id v5 = v3;
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {

    goto LABEL_7;
  }
  char v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) == 0)
  {
LABEL_7:
    unint64_t v7 = [v8 substrate];
    [v7 attachContext:v4];

    goto LABEL_8;
  }
  if ([v5 shouldAttachBindable]) {
    [v5 attachBindable];
  }
LABEL_8:
}

void __UIContextBinderDetachContext(void *a1, void *a2)
{
  id v8 = a1;
  id v3 = a2;
  id v4 = [v3 _boundContext];
  if (!v4) {
    goto LABEL_8;
  }
  id v5 = v3;
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {

    goto LABEL_7;
  }
  char v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) == 0)
  {
LABEL_7:
    unint64_t v7 = [v8 substrate];
    [v7 detachContext:v4];

    goto LABEL_8;
  }
  if ([v5 shouldDetachBindable]) {
    [v5 detachBindable];
  }
LABEL_8:
}

uint64_t _UITouchShouldCancelDelayingGesturesFromPreviousSequence(void *a1)
{
  id v1 = a1;
  if (_UITouchCancellationOfDelayingGesturesFromPreviousSequenceIsEnabled_onceToken != -1) {
    dispatch_once(&_UITouchCancellationOfDelayingGesturesFromPreviousSequenceIsEnabled_onceToken, &__block_literal_global_463);
  }
  if ([v1 isDelayed] && !objc_msgSend(v1, "phase")) {
    uint64_t v2 = [v1 _isPointerTouch];
  }
  else {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1855D7318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

_UIEventComponentPhaseValue *_eventComponentPhaseForValue(uint64_t a1, void *a2)
{
  id v4 = [NSNumber numberWithInteger:a1];
  id v5 = [a2 allKeysForObject:v4];
  char v6 = [v5 firstObject];

  if (v6) {
    unint64_t v7 = -[_UIEventComponentPhaseValue initWithValue:underlyingValue:]([_UIEventComponentPhaseValue alloc], "initWithValue:underlyingValue:", a1, [v6 integerValue]);
  }
  else {
    unint64_t v7 = 0;
  }

  return v7;
}

id __UIKIT_IS_REQUESTING_A_CACONTEXT_FROM_COREANIMATION(int a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = [MEMORY[0x1E4F39B58] remoteContextWithOptions:v3];
    if (!v4) {
      __UIKIT_DID_NOT_RECEIVE_A_REMOTE_CACONTEXT_FROM_COREANIMATION_INDICATING_A_POSSIBLE_BACKBOARDD_CRASH();
    }
  }
  else
  {
    id v4 = [MEMORY[0x1E4F39B58] localContextWithOptions:v3];
    if (!v4) {
      __UIKIT_DID_NOT_RECEIVE_A_LOCAL_CACONTEXT_FROM_COREANIMATION();
    }
  }

  return v4;
}

id UIButton.Configuration.contentInsets.setter(double a1, double a2, double a3, double a4)
{
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v4;
  if (isUniquelyReferenced_nonNull_native)
  {
    unint64_t v11 = *(void **)(v10 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v10 + 16), sel_copy);
    sub_186A1F1CC();
    swift_unknownObjectRelease();
    sub_1853B985C(0, &qword_1E8FAF9B0);
    swift_dynamicCast();
    unint64_t v11 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255C08);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v14;
    swift_release();
    *id v4 = v12;
  }
  return objc_msgSend(v11, sel_setContentInsets_, a1, a2, a3, a4);
}

id sub_1855D86EC()
{
  id v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____UIMagicMorphAnimation_animationItems] = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____UIMagicMorphAnimation_currentItem] = 0;
  uint64_t v3 = OBJC_IVAR____UIMagicMorphAnimation_groupCompletion;
  id v4 = objc_allocWithZone((Class)_UIGroupCompletion);
  id v5 = v0;
  *(void *)&v1[v3] = objc_msgSend(v4, sel_init);
  *(void *)&v5[OBJC_IVAR____UIMagicMorphAnimation____lazy_storage___geometryTrackingDisplayLink] = 0;
  char v6 = &v5[OBJC_IVAR____UIMagicMorphAnimation_matchedPosition];
  *(void *)char v6 = 0;
  *((void *)v6 + 1) = 0;
  uint64_t v7 = OBJC_IVAR____UIMagicMorphAnimation_morphView;
  type metadata accessor for _UIMagicMorphView();
  *(void *)&v5[v7] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v8 = OBJC_IVAR____UIMagicMorphAnimation_animationContainerView;
  *(void *)&v5[v8] = objc_msgSend(objc_allocWithZone((Class)_UITouchPassthroughView), sel_init);

  v10.receiver = v5;
  v10.super_class = ObjectType;
  return objc_msgSendSuper2(&v10, sel_init);
}

char *sub_1855D87F8()
{
  *(void *)&v0[OBJC_IVAR____UIZoomTransitionController_clientTransition] = 0;
  v0[OBJC_IVAR____UIZoomTransitionController_isZoomingIn] = 1;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____UIZoomTransitionController_activeTransitionContext] = 0;
  v0[OBJC_IVAR____UIZoomTransitionController_isForNavigation] = 0;
  *(void *)&v0[OBJC_IVAR____UIZoomTransitionController_foregroundView] = 0;
  *(void *)&v0[OBJC_IVAR____UIZoomTransitionController_backgroundView] = 0;
  *(void *)&v0[OBJC_IVAR____UIZoomTransitionController_viewToScaleBack] = 0;
  v0[OBJC_IVAR____UIZoomTransitionController_isPreempting] = 0;
  *(void *)&v0[OBJC_IVAR____UIZoomTransitionController_morphInteractionAssertion] = 0;
  *(void *)&v0[OBJC_IVAR____UIZoomTransitionController_shimPropertyAnimator] = 0;
  uint64_t v1 = OBJC_IVAR____UIZoomTransitionController_transitionOverlayView;
  id v2 = objc_allocWithZone((Class)_UITouchPassthroughView);
  uint64_t v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);
  *(void *)&v3[OBJC_IVAR____UIZoomTransitionController_fallbackSourceView] = 0;
  *(void *)&v3[OBJC_IVAR____UIZoomTransitionController_pendingDismissDestinationView] = 0;
  *(void *)&v3[OBJC_IVAR____UIZoomTransitionController_showcasePortal] = 0;
  *(void *)&v3[OBJC_IVAR____UIZoomTransitionController_morphAnimation] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for _UIMagicMorphAnimation()), sel_init);
  id v4 = objc_msgSend(objc_allocWithZone((Class)_UIDismissInteraction), sel_init);
  *(void *)&v3[OBJC_IVAR____UIZoomTransitionController_dismissInteraction] = v4;
  id v5 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), sel_init);
  *(void *)&v3[OBJC_IVAR____UIZoomTransitionController_dimmingView] = v5;
  objc_msgSend(v5, sel_setUserInteractionEnabled_, 0);
  id v6 = objc_msgSend(objc_allocWithZone((Class)UIView), sel_initWithFrame_, 0.0, 0.0, 1.0, 1.0);
  *(void *)&v3[OBJC_IVAR____UIZoomTransitionController_shimAnimationView] = v6;
  uint64_t v7 = *(void **)&v0[v1];
  uint64_t v8 = (objc_class *)type metadata accessor for _UIZoomToolbarTransitionController();
  id v9 = objc_allocWithZone(v8);
  v9[OBJC_IVAR____TtC5UIKit34_UIZoomToolbarTransitionController_isZoomingIn] = 0;
  *(void *)&v9[OBJC_IVAR____TtC5UIKit34_UIZoomToolbarTransitionController_temporaryViews] = MEMORY[0x1E4FBC860];
  *(void *)&v9[OBJC_IVAR____TtC5UIKit34_UIZoomToolbarTransitionController_toolbarSnapshot] = 0;
  *(void *)&v9[OBJC_IVAR____TtC5UIKit34_UIZoomToolbarTransitionController_overlay] = v7;
  v14.receiver = v9;
  v14.super_class = v8;
  id v10 = v7;
  *(void *)&v3[OBJC_IVAR____UIZoomTransitionController_toolbarTransitionController] = objc_msgSendSuper2(&v14, sel_init);
  v3[OBJC_IVAR____UIZoomTransitionController_style] = 0;
  v3[OBJC_IVAR____UIZoomTransitionController_isPresentingSheet] = 0;

  v13.receiver = v3;
  v13.super_class = (Class)_UIZoomTransitionController;
  unint64_t v11 = (char *)objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(*(id *)&v11[OBJC_IVAR____UIZoomTransitionController_dismissInteraction], sel_setDelegate_, v11);
  return v11;
}

void sub_1855D9820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _configureInsets(void *a1, double a2, double a3)
{
  id v10 = a1;
  [v10 frame];
  CGFloat x = v12.origin.x;
  CGFloat y = v12.origin.y;
  CGFloat width = v12.size.width;
  CGFloat height = v12.size.height;
  double v9 = -fmax(fmin(CGRectGetMinX(v12) - a2, 22.0), 0.0);
  v13.origin.CGFloat x = x;
  v13.origin.CGFloat y = y;
  v13.size.CGFloat width = width;
  v13.size.CGFloat height = height;
  objc_msgSend(v10, "setHitTestInsets:", 0.0, v9, 0.0, -fmax(fmin(a3 - CGRectGetMaxX(v13), 22.0), 0.0));
}

_UIScrollViewScrollIndicator *CreateScrollIndicator(void *a1, unsigned int a2)
{
  id v3 = a1;
  if ([v3 _usesLowFidelityPanning])
  {
    id v4 = 0;
  }
  else
  {
    id v5 = [_UIScrollViewScrollIndicator alloc];
    id v6 = -[_UIScrollViewScrollIndicator initWithFrame:](v5, "initWithFrame:", *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
    [(_UIScrollViewScrollIndicator *)v6 setType:a2];
    -[_UIScrollViewScrollIndicator setStyle:](v6, "setStyle:", [v3 _effectiveIndicatorStyle]);
    if (dyld_program_sdk_at_least())
    {
      uint64_t v7 = [(UIView *)v6 layer];
      [v7 setZPosition:1000.0];
    }
    uint64_t v9 = MEMORY[0x1E4F143A8];
    uint64_t v10 = 3221225472;
    unint64_t v11 = __CreateScrollIndicator_block_invoke;
    CGRect v12 = &unk_1E52D9CD0;
    id v4 = v6;
    CGRect v13 = v4;
    uint64_t v14 = 0;
    +[UIView performWithoutAnimation:&v9];
    objc_msgSend(v3, "addSubview:", v4, v9, v10, v11, v12);
  }
  return v4;
}

void sub_1855DB170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 120), 8);
  _Unwind_Resume(a1);
}

UIColor *ComputeLegibilityColorFromColor(void *a1, double a2)
{
  id v4 = +[UIColor blackColor];
  if ((int)CGColorGetNumberOfComponents((CGColorRef)[a1 CGColor]) >= 3)
  {
    double v8 = 0.0;
    double v9 = 0.0;
    uint64_t v7 = 0;
    if ([a1 getHue:&v9 saturation:&v8 brightness:&v7 alpha:0])
    {
      double v5 = 0.0;
      if (v9 != 0.0) {
        double v5 = fmin(fmax(v8, 0.3), 0.5);
      }
      return +[UIColor colorWithHue:v9 saturation:v5 brightness:a2 alpha:1.0];
    }
  }
  return v4;
}

void _NXRGBToHSB(long double *a1, double *a2, double *a3, double a4, double a5, double a6)
{
  if (a4 < a5 || a4 < a6)
  {
    if (a5 >= a4) {
      double v8 = a4;
    }
    else {
      double v8 = a5;
    }
    if (a4 >= a6) {
      double v9 = a6;
    }
    else {
      double v9 = a4;
    }
    BOOL v10 = a5 < a4 || a5 < a6;
    if (v10) {
      double v11 = a6;
    }
    else {
      double v11 = a5;
    }
    if (v10) {
      double v9 = v8;
    }
  }
  else
  {
    if (a5 >= a6) {
      double v9 = a6;
    }
    else {
      double v9 = a5;
    }
    double v11 = a4;
  }
  double v12 = 0.0;
  if (v11 <= 0.0)
  {
    double v14 = 0.0;
  }
  else
  {
    double v13 = v11 - v9;
    double v14 = (v11 - v9) / v11;
    if (v14 != 0.0)
    {
      double v15 = (v11 - a5) / v13;
      double v16 = (v11 - a6) / v13;
      if (v11 == a4)
      {
        if (v9 == a5) {
          double v12 = v16 + 5.0;
        }
        else {
          double v12 = 1.0 - v15;
        }
      }
      else
      {
        BOOL v17 = v11 == a5;
        double v18 = (v11 - a4) / v13;
        if (v17)
        {
          if (v9 == a6) {
            double v12 = v18 + 1.0;
          }
          else {
            double v12 = 3.0 - v16;
          }
        }
        else if (v9 == a4)
        {
          double v12 = v15 + 3.0;
        }
        else
        {
          double v12 = 5.0 - v18;
        }
      }
    }
  }
  *a3 = v11;
  *a1 = fmod(v12 / 6.0, 1.0);
  *a2 = v14;
}

BOOL _UIScreenIsPhyiscallyLargePhone(unint64_t a1)
{
  if (a1 == -1) {
    return 0;
  }
  if (_UIUserInterfaceIdiomForType(a1)) {
    return 0;
  }
  _UIScreenReferenceBoundsSizeForType(a1);
  return v3 > 874.0;
}

uint64_t __UIKitSharedBoundingPathDataManager()
{
  if (qword_1EB264B20 != -1) {
    dispatch_once(&qword_1EB264B20, &__block_literal_global_49_4);
  }
  return qword_1EB264B18;
}

uint64_t _UIScreenTypeForScreen(void *a1)
{
  id v1 = a1;
  [v1 _nativeDisplayBounds];
  double v39 = v3;
  double v40 = v2;
  [v1 _referenceBounds];
  double v43 = v5;
  double v44 = v4;
  [v1 scale];
  double v38 = v6;
  [v1 _displayCornerRadius];
  double v45 = v7;
  uint64_t v8 = _UIDeviceNativeUserInterfaceIdiomIgnoringClassic();
  double v9 = [v1 _exclusionArea];
  if (objc_opt_respondsToSelector())
  {
    [v9 rect];
    double v12 = v11;
    double v42 = v13;
    double v15 = v14;
  }
  else
  {
    double v10 = *MEMORY[0x1E4F1DB20];
    double v12 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v15 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    double v42 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  }
  unint64_t v16 = 0;
  char v17 = 0;
  uint64_t v18 = -1;
  double v41 = v10;
  while (1)
  {
    uint64_t v19 = _UIScreenNativeDisplayBoundsSizeForType(v16);
    uint64_t v21 = v20;
    double v22 = _UIScreenReferenceBoundsSizeForType(v16);
    double v47 = v23;
    double v48 = v22;
    double v46 = _UIScreenScaleForType(v16);
    double v49 = _UIScreenCornerRadiusForType(v16);
    v51.origin.double x = _UIScreenNativeDisplayExclusionRectForType(v16);
    double x = v51.origin.x;
    double y = v51.origin.y;
    double width = v51.size.width;
    double height = v51.size.height;
    if (!CGRectIsNull(v51))
    {
      uint64_t v28 = _UIScreenNativeDisplayBoundsSizeForType(v16);
      double v29 = _UIScreenReferenceBoundsSizeForType(v16);
      CGAffineTransformMakeScale(&v50, v29 / (double)v28, v29 / (double)v28);
      v52.origin.double x = x;
      v52.origin.double y = y;
      v52.size.double width = width;
      v52.size.double height = height;
      CGRect v53 = CGRectApplyAffineTransform(v52, &v50);
      double x = v53.origin.x;
      double y = v53.origin.y;
      double width = v53.size.width;
      double height = v53.size.height;
    }
    if (v8 != _UIUserInterfaceIdiomForType(v16) || vabdd_f64(v44, v48) > 0.1) {
      goto LABEL_35;
    }
    if (vabdd_f64(v43, v47) > 0.1 || v45 > 0.0 == v49 <= 0.0) {
      goto LABEL_35;
    }
    v54.origin.double x = x;
    v54.origin.double y = y;
    v54.size.double width = width;
    v54.size.double height = height;
    BOOL IsNull = CGRectIsNull(v54);
    v55.origin.double x = v41;
    v55.origin.double y = v12;
    v55.size.double width = v42;
    v55.size.double height = v15;
    if (IsNull != CGRectIsNull(v55)) {
      goto LABEL_35;
    }
    v56.origin.double x = v41;
    v56.origin.double y = v12;
    v56.size.double width = v42;
    v56.size.double height = v15;
    if (!CGRectIsNull(v56)) {
      goto LABEL_17;
    }
    v57.origin.double x = x;
    v57.origin.double y = y;
    v57.size.double width = width;
    v57.size.double height = height;
    if (CGRectIsNull(v57))
    {
      int v32 = 1;
    }
    else
    {
LABEL_17:
      v58.origin.double x = v41;
      v58.size.double width = v42;
      v58.origin.double y = v12;
      v58.size.double height = v15;
      BOOL v33 = CGRectIsNull(v58);
      v59.origin.double x = x;
      v59.origin.double y = y;
      v59.size.double width = width;
      v59.size.double height = height;
      int v32 = v33 == CGRectIsNull(v59)
          ? _UIRectEquivalentToRectWithAccuracy(v41, v12, v42, v15, x, y, width, height, 0.1)
          : 0;
    }
    double v34 = vabdd_f64(v38, v46);
    double v35 = vabdd_f64(v45, v49);
    int v36 = v32 ^ 1;
    if (vabdd_f64(v40, (double)v19) <= 0.1 && vabdd_f64(v39, (double)v21) <= 0.1 && v34 <= 0.01 && v35 <= 0.01 && !v36) {
      break;
    }
    if (!(v17 & 1 | (v34 > 0.01)))
    {
      char v17 = 0;
      if (vabdd_f64(v40, v48 * v46) <= 0.1 && vabdd_f64(v39, v47 * v46) <= 0.1)
      {
        if (v35 > 0.01) {
          int v36 = 1;
        }
        if (v36 == 1)
        {
          char v17 = 0;
          if (v18 == -1) {
            uint64_t v18 = v16;
          }
        }
        else
        {
          char v17 = 1;
          uint64_t v18 = v16;
        }
      }
    }
LABEL_35:
    if (++v16 == 49) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16;
LABEL_36:

  return v18;
}

uint64_t _UIScreenNativeDisplayBoundsSizeForType(unint64_t a1)
{
  if (a1 < 0x31) {
    return qword_186B97E08[a1];
  }
  double v3 = [MEMORY[0x1E4F28B00] currentHandler];
  double v4 = [NSString stringWithUTF8String:"_UIIntegralSize _UIScreenNativeDisplayBoundsSizeForType(_UIScreenType)"];
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIScreenTypes.m", 367, @"Unknown or invalid type: %ld", a1);

  return 0;
}

double _UIScreenCornerRadiusForType(unint64_t a1)
{
  if (a1 < 0x31) {
    return dbl_186B985B0[a1];
  }
  double v3 = [MEMORY[0x1E4F28B00] currentHandler];
  double v4 = [NSString stringWithUTF8String:"CGFloat _UIScreenCornerRadiusForType(_UIScreenType)"];
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIScreenTypes.m", 638, @"Unknown or invalid type: %ld", a1);

  return 0.0;
}

double _UIScreenNativeDisplayExclusionRectForType(uint64_t a1)
{
  id v1 = (char *)MEMORY[0x1E4F1DB20];
  if ((unint64_t)(a1 - 5) <= 0x19) {
    id v1 = (char *)&unk_186B98BB8 + 8 * a1 - 40;
  }
  return *(double *)v1;
}

uint64_t _UIUserInterfaceSizeClassForWidthAndUserInterfaceIdiomWithHomeButton(unint64_t a1, char a2, double a3)
{
  if (a1 > 1)
  {
    if (a1 - 2 > 6) {
      return 0;
    }
    else {
      return qword_186B979E0[a1 - 2];
    }
  }
  else
  {
    _UIScreenReferenceBoundsSizeForType(0x1BuLL);
    double v7 = v6;
    _UIScreenReferenceBoundsSizeForType(3uLL);
    if (a1) {
      char v9 = 1;
    }
    else {
      char v9 = a2;
    }
    if (v7 < a3) {
      char v9 = 1;
    }
    if ((v9 & (v8 < a3)) != 0) {
      return 2;
    }
    else {
      return 1;
    }
  }
}

double _UIScreenReferenceBoundsSizeForType(unint64_t a1)
{
  if (a1 >= 0x31)
  {
    double v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v4 = [NSString stringWithUTF8String:"CGSize _UIScreenReferenceBoundsSizeForType(_UIScreenType)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIScreenTypes.m", 457, @"Unknown or invalid type: %ld", a1);

    double v2 = (char *)MEMORY[0x1E4F1DB30];
  }
  else
  {
    double v2 = (char *)&unk_186B98118 + 8 * a1;
  }
  return *(double *)v2;
}

double _UIScreenScaleForType(unint64_t a1)
{
  if (a1 < 0x31) {
    return dbl_186B98428[a1];
  }
  double v3 = [MEMORY[0x1E4F28B00] currentHandler];
  double v4 = [NSString stringWithUTF8String:"CGFloat _UIScreenScaleForType(_UIScreenType)"];
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIScreenTypes.m", 548, @"Unknown or invalid type: %ld", a1);

  return 0.0;
}

uint64_t _UIUserInterfaceIdiomForType(unint64_t a1)
{
  if (a1 < 0x31) {
    return qword_186B98890[a1];
  }
  double v3 = [MEMORY[0x1E4F28B00] currentHandler];
  double v4 = [NSString stringWithUTF8String:"UIUserInterfaceIdiom _UIUserInterfaceIdiomForType(_UIScreenType)"];
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIScreenTypes.m", 769, @"Unknown or invalid type: %ld", a1);

  return -1;
}

void _UIScreenAddScreen(void *a1, char a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    double v5 = [MEMORY[0x1E4F28B00] currentHandler];
    double v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIScreenAddScreen(UIScreen *__strong, BOOL)");
    [v5 handleFailureInFunction:v6, @"UIScreen.m", 447, @"Adding object %@ to the screens array, which is not a UIScreen!", v3 file lineNumber description];
  }
  uint64_t v15 = MEMORY[0x1E4F143A8];
  uint64_t v16 = 3221225472;
  char v17 = ___UIScreenAddScreen_block_invoke;
  uint64_t v18 = &unk_1E52D9FC0;
  char v20 = a2;
  id v4 = v3;
  id v19 = v4;
  os_unfair_lock_lock((os_unfair_lock_t)&__UIScreenMutableScreensArrayAccessLock);
  ___UIScreenAddScreen_block_invoke((uint64_t)&v15);
  os_unfair_lock_unlock((os_unfair_lock_t)&__UIScreenMutableScreensArrayAccessLock);
  if (qword_1EB25C5F8 != -1) {
    dispatch_once(&qword_1EB25C5F8, &__block_literal_global_901_0);
  }
  if (byte_1EB25C542 && os_variant_has_internal_diagnostics())
  {
    double v7 = objc_retain(*(id *)(__UILogGetCategoryCachedImpl("UIWindowSceneTraitCollection", &qword_1EB25C608)
                                       + 8));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = v4;
      if (v8)
      {
        char v9 = NSString;
        double v10 = (objc_class *)objc_opt_class();
        double v11 = NSStringFromClass(v10);
        double v12 = [v9 stringWithFormat:@"<%@: %p>", v11, v8, v15, v16];
      }
      else
      {
        double v12 = @"(nil)";
      }

      double v13 = v12;
      double v14 = +[UIScreen _shortScreensDescription];
      *(_DWORD *)buf = 138412546;
      double v22 = v12;
      __int16 v23 = 2112;
      uint64_t v24 = v14;
      _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_DEFAULT, "Adding screen %@, now we have %@", buf, 0x16u);
    }
  }
  if (qword_1EB25C628 != -1) {
    dispatch_once(&qword_1EB25C628, &__block_literal_global_925);
  }
}

void _UIViewDescriptionAppendFrame(void *a1, void *a2)
{
  id v7 = a2;
  [a1 frame];
  objc_msgSend(v7, "appendFormat:", @"frame = (%g %g; %g %g); ", v3, v4, v5, v6);
}

void _UIViewDescriptionAppendBaseClass(void *a1, void *a2)
{
  id v10 = a1;
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = [MEMORY[0x1E4F28B50] bundleForClass:v5];
  if ((void *)v6 == v4)
  {
LABEL_5:
  }
  else
  {
    id v7 = (void *)v6;
    while (1)
    {
      uint64_t v8 = objc_opt_class();

      if (v5 == (void *)v8) {
        break;
      }
      uint64_t v5 = (void *)[v5 superclass];
      id v7 = [MEMORY[0x1E4F28B50] bundleForClass:v5];
      if (v7 == v4) {
        goto LABEL_5;
      }
    }
  }
  if (objc_opt_class() != v5 && objc_opt_class() != v5)
  {
    char v9 = NSStringFromClass((Class)v5);
    [v3 appendFormat:@"baseClass = %@; ", v9];
  }
}

void _UIViewDescriptionAppendTransform(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  memset(&v18, 0, sizeof(v18));
  if (v3)
  {
    [v3 transform];
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    memset(&v12, 0, sizeof(v12));
    [v3 transform3D];
  }
  else
  {
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v14 = 0uLL;
    long long v15 = 0uLL;
    long long v13 = 0uLL;
    memset(&v12, 0, sizeof(v12));
  }
  CGAffineTransform transform = v18;
  if (CGAffineTransformIsIdentity(&transform))
  {
    long long v8 = v14;
    long long v9 = v15;
    long long v10 = v16;
    long long v11 = v17;
    CGAffineTransform transform = v12;
    long long v7 = v13;
    if ((MEMORY[0x18C1031B0](&transform) & 1) == 0) {
      objc_msgSend(v4, "appendFormat:", @"transform3D = [%g, %g, %g, %g; %g, %g, %g, %g; %g, %g, %g, %g; %g, %g, %g, %g]; ",
    }
        *(_OWORD *)&v12.a,
        *(_OWORD *)&v12.c,
        *(_OWORD *)&v12.tx,
        v13,
        v14,
        v15,
        v16,
        v17);
  }
  else
  {
    CGAffineTransform transform = v18;
    uint64_t v5 = NSStringFromCGAffineTransform(&transform);
    [v4 appendFormat:@"CGAffineTransform transform = %@; ", v5];
  }
}

void _UIViewDescriptionAppendTextIfApplicable(void *a1, void *a2)
{
  id v8 = a1;
  id v3 = a2;
  if [v8 _shouldAppendTextInViewDescription] && (objc_opt_respondsToSelector())
  {
    id v4 = [v8 performSelector:sel_text];
    objc_opt_class();
    uint64_t v5 = (objc_opt_isKindOfClass() & 1) != 0 ? v4 : 0;
    id v6 = v5;

    if (v6)
    {
      long long v7 = _UIViewTextRedactedIfNecessaryForDescription(v6);

      [v3 appendFormat:@"text = %@; ", v7];
    }
  }
}

void *_selectorForColorName(void *a1)
{
  id v1 = a1;
  double v2 = +[UIColor _systemColorSelectorTable];
  id v3 = NSMapGet(v2, v1);

  return v3;
}

void sub_1855E8E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void _WrapItemsAndAddToArray(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        id v10 = [v9 _stackEntry];
        if (!v10) {
          id v10 = +[_UINavigationBarItemStackEntry newEntryForItem:v9];
        }
        [v3 addObject:v10];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

uint64_t _UINavigationBarShouldCheckLegacyViolation(void *a1)
{
  id v1 = a1;
  if (dyld_program_sdk_at_least()
    && ([(id)objc_opt_class() _requiresModernVisualProvider] & 1) == 0)
  {
    int v3 = _UIUseModernBars();
    uint64_t v2 = v3 ^ [(id)objc_opt_class() _forceLegacyVisualProvider] ^ 1;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t _UIBarAppearanceAPIVersion()
{
  if (qword_1EB25C838 != -1) {
    dispatch_once(&qword_1EB25C838, &__block_literal_global_82);
  }
  return qword_1EB25C830;
}

void UIButton.Configuration.baseForegroundColor.setter(void *a1)
{
}

uint64_t sub_1855ED448()
{
  id v1 = v0;
  if (objc_msgSend(v0, sel_styles))
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for _UIEdgePanDismissSubInteraction()), sel_init);
    uint64_t v2 = sub_1855ED7AC(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v5 = v2[2];
    unint64_t v4 = v2[3];
    if (v5 >= v4 >> 1) {
      uint64_t v2 = sub_1855ED7AC((void *)(v4 > 1), v5 + 1, 1, v2);
    }
    v2[2] = v5 + 1;
    uint64_t v6 = &v2[2 * v5];
    v6[4] = v3;
    v6[5] = &off_1ED0BA398;
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC860];
  }
  if ((objc_msgSend(v1, sel_styles) & 2) != 0)
  {
    id v7 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for _UISwipeDownDismissSubInteraction()), sel_init);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_1855ED7AC(0, v2[2] + 1, 1, v2);
    }
    unint64_t v9 = v2[2];
    unint64_t v8 = v2[3];
    if (v9 >= v8 >> 1) {
      uint64_t v2 = sub_1855ED7AC((void *)(v8 > 1), v9 + 1, 1, v2);
    }
    v2[2] = v9 + 1;
    id v10 = &v2[2 * v9];
    void v10[4] = v7;
    v10[5] = &off_1ED0BAA70;
  }
  if ((objc_msgSend(v1, sel_styles) & 4) != 0)
  {
    id v11 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for _UIPinchDismissSubInteraction()), sel_init);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_1855ED7AC(0, v2[2] + 1, 1, v2);
    }
    unint64_t v13 = v2[2];
    unint64_t v12 = v2[3];
    if (v13 >= v12 >> 1) {
      uint64_t v2 = sub_1855ED7AC((void *)(v12 > 1), v13 + 1, 1, v2);
    }
    v2[2] = v13 + 1;
    long long v14 = &v2[2 * v13];
    v14[4] = v11;
    v14[5] = &off_1ED0B9B58;
  }
  uint64_t v15 = OBJC_IVAR____UIDismissInteraction_subInteractions;
  uint64_t v16 = *(void *)&v1[OBJC_IVAR____UIDismissInteraction_subInteractions];
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = 32;
    do
    {
      uint64_t v19 = *(void *)(v16 + v18);
      id v20 = objc_msgSend((id)swift_unknownObjectRetain(), sel_view);
      if (v20)
      {
        uint64_t v21 = v20;
        objc_msgSend(v20, sel_removeInteraction_, v19);
      }
      swift_unknownObjectRelease();
      v18 += 16;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = v2[2];
  if (v22)
  {
    uint64_t v32 = v15;
    swift_bridgeObjectRetain();
    BOOL v33 = v2;
    __int16 v23 = v2 + 5;
    do
    {
      uint64_t v24 = *(v23 - 1);
      uint64_t v25 = *v23;
      uint64_t ObjectType = swift_getObjectType();
      long long v27 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
      swift_unknownObjectRetain();
      uint64_t v28 = v1;
      v27(v1, ObjectType, v25);
      id v29 = objc_msgSend(v28, sel_view);
      if (v29)
      {
        id v30 = v29;
        objc_msgSend(v29, sel_addInteraction_, v24);
      }
      swift_unknownObjectRelease();
      v23 += 2;
      --v22;
    }
    while (v22);
    uint64_t v2 = v33;
    swift_bridgeObjectRelease();
    uint64_t v15 = v32;
  }
  *(void *)&v1[v15] = v2;
  return swift_bridgeObjectRelease();
}

void *sub_1855ED7AC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1853BFAFC(a1, a2, a3, a4, &qword_1E8FAFC50, &qword_1E8FAFC48);
}

double UITraitCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_185571F30(a1, a2, a3, (uint64_t)&unk_1ED0D8530, (uint64_t (*)(uint64_t))sub_1854C9928);
}

{
  return sub_185571F30(a1, a2, a3, (uint64_t)&unk_1ED0D84E0, (uint64_t (*)(uint64_t))sub_1854C9928);
}

void type metadata accessor for NSUnderlineStyle(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for UITypesettingLanguageAwareLineHeightRatio()
{
  return &type metadata for UITypesettingLanguageAwareLineHeightRatio;
}

void sub_1855ED848(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
}

uint64_t NSDiffableDataSourceSnapshot.sectionIdentifier(containingItem:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  id v5 = *(id *)(*(void *)v2 + 16);
  id v6 = objc_msgSend(v5, sel_sectionIdentifierForSectionContainingItemIdentifier_, sub_186A1F83C());

  swift_unknownObjectRelease();
  if (v6)
  {
    sub_186A1F1CC();
    swift_unknownObjectRelease();
    sub_1853B7BB0(&v10, v11);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  uint64_t v7 = *(void *)(a1 + 16);
  int v8 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, v8 ^ 1u, 1, v7);
}

uint64_t sub_1855ED97C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1855ED9C8@<X0>(SEL *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  id v8 = [*(id *)(*(void *)v4 + 16) *a1];
  objc_msgSend(v8, sel_copy);

  sub_186A1F1CC();
  swift_unknownObjectRelease();
  sub_1853B985C(0, a2);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v10;
  *a4 = result;
  return result;
}

uint64_t UIListContentConfiguration.textProperties.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1855ED9C8((SEL *)&selRef_textProperties, (unint64_t *)&unk_1E8FAFC98, (uint64_t *)&unk_1E8FAFCD0, a1);
}

uint64_t static UIBackgroundConfiguration.clear()@<X0>(uint64_t *a1@<X8>)
{
  return sub_18583CD54((SEL *)&selRef_clearConfiguration, a1);
}

ValueMetadata *type metadata accessor for UITraitLegibilityWeight()
{
  return &type metadata for UITraitLegibilityWeight;
}

uint64_t UIMutableTraits.displayScale.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a2 + 40))(&type metadata for UITraitDisplayScale, &type metadata for UITraitDisplayScale, &protocol witness table for UITraitDisplayScale, a1, a2);
}

uint64_t sub_1855EDB14(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

void sub_1855EE168(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_1855EE188(void *a1)
{
}

void sub_1855EF834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1855EFE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1855F18C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1855F2E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UIApplicationSupportsHomeAffordanceObservation()
{
  if (qword_1EB25B848 != -1) {
    dispatch_once(&qword_1EB25B848, &__block_literal_global_2279);
  }
  return byte_1EB25B504;
}

id _holdSceneEventResponsesQueue()
{
  if (qword_1EB25EC48 != -1) {
    dispatch_once(&qword_1EB25EC48, &__block_literal_global_704);
  }
  uint64_t v0 = (void *)qword_1EB25EC50;
  return v0;
}

CFIndex _UIQOSExcludeCommitFromGlitchTrackingIfUnmanaged()
{
  if (qword_1EB264D98 != -1) {
    dispatch_once(&qword_1EB264D98, &__block_literal_global_7_3);
  }
  CFIndex result = CFDictionaryGetCount((CFDictionaryRef)qword_1EB264DA0);
  if (!result)
  {
    char v1 = (void *)MEMORY[0x1E4F39CF8];
    return [v1 setFrameStallSkipRequest:1];
  }
  return result;
}

void sub_1855F877C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t __UIVIEWCONTROLLERTRANSITIONCOORDINATOR_IS_EXECUTING_ALONGSIDE_ANIMATION_BLOCK__(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void _UITouchSetBasicTouchPropertiesFromEvent(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1;
  id v8 = a2;
  [v7 _setHidEvent:a4];
  unint64_t v9 = BKSHIDEventGetDigitizerAttributes();
  uint64_t IntegerValue = IOHIDEventGetIntegerValue();
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id v11 = [v9 pathAttributes];
  uint64_t v12 = [v11 countByEnumeratingWithState:&v61 objects:buf count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    id v60 = v8;
    uint64_t v14 = *(void *)v62;
    while (2)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v62 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void **)(*((void *)&v61 + 1) + 8 * i);
        if ([v16 pathIndex] == IntegerValue)
        {
          id v17 = v16;
          goto LABEL_11;
        }
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v61 objects:buf count:16];
      if (v13) {
        continue;
      }
      break;
    }
    id v17 = 0;
LABEL_11:
    id v8 = v60;
  }
  else
  {
    id v17 = 0;
  }

  int v18 = [v17 touchIdentifier];
  if (v7)
  {
    *((_DWORD *)v7 + 14) = v18;
    uint64_t v19 = [v17 authenticationMessage];
    objc_storeStrong(v7 + 48, v19);
  }
  else
  {
    uint64_t v19 = [v17 authenticationMessage];
  }

  id v20 = [v17 securityAnalysis];
  -[UITouch _setHitTestSecurityAnalysis:]((uint64_t)v7, v20);

  [v7 _setPathIndex:_UIEventHIDPathIndexForDigitizerEvent()];
  [v7 _setPathIdentity:IOHIDEventGetIntegerValue()];
  [v8 _touchRadiusScaleFactor];
  double v22 = v21;
  IOHIDEventGetFloatValue();
  double v24 = v22 * v23;
  IOHIDEventGetFloatValue();
  double v26 = v25;
  if (v24 <= 0.0 && IOHIDEventGetIntegerValue())
  {
    [v8 scale];
    double v24 = 0.5 / v27;
  }
  if (v7)
  {
    *((double *)v7 + 25) = v24;
    *((double *)v7 + 26) = v22 * v26;
  }
  if (IOHIDEventGetIntegerValue())
  {
    if ([(id)UIApp _supportsIndirectInputEvents]
      && (uint64_t v28 = _UIEventHIDGetDescendantPointerEvent(a3)) != 0)
    {
      if (_UIEventHIDGetPointerEventSource(v28) == 4) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = 3;
      }
    }
    else
    {
      uint64_t v29 = IOHIDEventGetIntegerValue() == 0;
    }
  }
  else
  {
    uint64_t v29 = 2;
  }
  [v7 _setType:v29];
  unsigned int v30 = IOHIDEventGetIntegerValue();
  unsigned int v31 = IOHIDEventGetIntegerValue();
  uint64_t v32 = IOHIDEventGetIntegerValue();
  if (v7)
  {
    int v33 = (v31 >> 10) & 1;
    if (!v32) {
      LOBYTE(v33) = 0;
    }
    int v34 = (v30 >> 10) & 1;
    if (!v32) {
      int v34 = 0;
    }
    *((unsigned char *)v7 + 265) = v34;
    *((unsigned char *)v7 + 266) = v33;
    int v35 = (v30 >> 23) & 1;
    if (!v32) {
      int v35 = 0;
    }
    int v36 = (v31 >> 23) & 1;
    if (!v32) {
      LOBYTE(v36) = 0;
    }
    *((unsigned char *)v7 + 268) = v35;
    *((unsigned char *)v7 + 269) = v36;
    if (v34 | v35) {
      uint64_t v37 = v32;
    }
    else {
      uint64_t v37 = 0;
    }
    v7[35] = (id)v37;
  }
  [v7 _setSenderID:IOHIDEventGetSenderID()];
  [v17 zGradient];
  objc_msgSend(v7, "_setZGradient:");
  uint64_t v38 = a3;
  if (a4)
  {
    if (IOHIDEventGetIntegerValue() == 11) {
      uint64_t v38 = a4;
    }
    else {
      uint64_t v38 = a3;
    }
  }
  uint64_t v39 = [v7 type];
  if ([v7 _isPointerTouch]) {
    uint64_t v40 = 3;
  }
  else {
    uint64_t v40 = v39;
  }
  float v41 = _UIEventHIDGetMaxForceForDigitizerEvent(v38, v40);
  if (v7) {
    *((double *)v7 + 36) = v41;
  }
  [v7 _setEdgeType:_UIEventHIDTouchEdgeTypeForHIDEvent()];
  [v7 _setEdgeAim:((unint64_t)IOHIDEventGetIntegerValue() >> 24) & 0xF];
  uint64_t v42 = _UIEventHIDGetDescendantPointerEvent(a3);
  unint64_t v43 = (unint64_t)_UIEventHIDGetChildStylusEvent(a3);
  if (v7)
  {
    uint64_t v44 = 1;
    if (v43 | v42) {
      uint64_t v44 = 2;
    }
    v7[6] = (id)v44;
  }
  uint64_t v45 = _UIEventHIDGetDescendantPointerEvent(a3);
  if (v45)
  {
    uint64_t v46 = v45;
    [v7 _setPointerSenderID:IOHIDEventGetSenderID()];
    if (_UIEventGetForceEvent(v46)) {
      [v7 _setForceStage:IOHIDEventGetIntegerValue()];
    }
    double v47 = BKSHIDEventGetPointerAttributes();
    double v48 = v47;
    BOOL v49 = v47
       && [v47 source] == 12
       && ![v48 fingerDownCount]
       && [v7 phase] < 5;
    [v7 _setIsTapToClick:v49];
    CGAffineTransform v50 = [v48 hitTestSecurityAnalysis];
    if (v50) {
      -[UITouch _setHitTestSecurityAnalysis:]((uint64_t)v7, v50);
    }
  }
  CGRect v51 = BKSHIDEventGetBaseAttributes();
  int v52 = [v51 source];

  if (v52 == 12) {
    [v7 _setIsRestingTouch:((unint64_t)IOHIDEventGetIntegerValue() >> 9) & 1];
  }
  int v53 = _UIApplicationSupportsGlobalEdgeSwipeTouches();
  if (v7)
  {
    if (v53)
    {
      int v54 = _UIApplicationSupportsGlobalEdgeSwipeTouches();
      if (a4)
      {
        if (v54)
        {
          int Phase = IOHIDEventGetPhase();
          int v56 = Phase;
          if ((*((_WORD *)v7 + 118) & 0x2000) != 0 && Phase != 128)
          {
            *((_WORD *)v7 + 118) |= 0x4000u;
            unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("Touch", &_updateGESFlagsWithHIDEvent____s_category);
            if (*(unsigned char *)CategoryCachedImpl)
            {
              CGRect v59 = *(NSObject **)(CategoryCachedImpl + 8);
              if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134217984;
                v66 = v7;
                _os_log_impl(&dword_1853B0000, v59, OS_LOG_TYPE_ERROR, "\tTouch %p is transitioning from isGESTouch", buf, 0xCu);
              }
            }
          }
          *((_WORD *)v7 + 118) = *((_WORD *)v7 + 118) & 0xDFFF | ((v56 == 128) << 13);
        }
      }
    }
  }
  BOOL v58 = (_UIEventHIDShouldIgnoreEventsExpectedToBecomeDragEvent() & 1) == 0 && _UIEventHIDExpectedToBecomeDragEvent();
  if (v7) {
    *((unsigned char *)v7 + 270) = v58;
  }
}

uint64_t _UIEventHIDGetDescendantPointerEvent(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 && IOHIDEventGetType() != 17)
  {
    CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
    if (Children && (CFArrayRef v3 = Children, Count = CFArrayGetCount(Children), Count >= 1))
    {
      CFIndex v5 = Count;
      CFIndex v6 = 0;
      while (1)
      {
        ValueAtIndedouble x = CFArrayGetValueAtIndex(v3, v6);
        uint64_t v8 = _UIEventHIDGetDescendantPointerEvent(ValueAtIndex);
        if (v8) {
          break;
        }
        if (v5 == ++v6) {
          return 0;
        }
      }
      return v8;
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t _UIEventHIDPathIndexForDigitizerEvent()
{
  uint64_t IntegerValue = IOHIDEventGetIntegerValue();
  if (IOHIDEventGetIntegerValue()) {
    uint64_t v1 = IntegerValue;
  }
  else {
    uint64_t v1 = IntegerValue + 128;
  }
  if (IOHIDEventGetIntegerValue()) {
    return v1;
  }
  else {
    return v1 + 256;
  }
}

void ___globalEdgeSwipeEventDiscardFilterGenerator_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = BKSHIDEventGetBaseAttributes();
  uint64_t v5 = [v4 contextID];

  if (IOHIDEventGetType() != 11 || !_UIDeviceSupportsGlobalEdgeSwipeTouches()) {
    goto LABEL_40;
  }
  *(void *)buf = 0;
  *(void *)&long long v77 = buf;
  *((void *)&v77 + 1) = 0x3032000000;
  v78 = __Block_byref_object_copy__173;
  v79 = __Block_byref_object_dispose__173;
  CFIndex v6 = (void *)qword_1E8FDF650;
  uint64_t v7 = [NSNumber numberWithUnsignedInt:v5];
  id v80 = [v6 objectForKey:v7];

  uint64_t v68 = 0;
  v69 = &v68;
  uint64_t v70 = 0x3032000000;
  v71 = __Block_byref_object_copy__173;
  v72 = __Block_byref_object_dispose__173;
  uint64_t v8 = (void *)qword_1E8FDF658;
  unint64_t v9 = [NSNumber numberWithUnsignedInt:v5];
  id v73 = [v8 objectForKey:v9];

  uint64_t v62 = 0;
  long long v63 = &v62;
  uint64_t v64 = 0x3032000000;
  v65 = __Block_byref_object_copy__173;
  v66 = __Block_byref_object_dispose__173;
  id v67 = 0;
  uint64_t v58 = 0;
  CGRect v59 = &v58;
  uint64_t v60 = 0x2020000000;
  uint64_t v61 = 0;
  uint64_t v52 = 0;
  int v53 = &v52;
  uint64_t v54 = 0x3032000000;
  CGRect v55 = __Block_byref_object_copy__173;
  int v56 = __Block_byref_object_dispose__173;
  id v57 = 0;
  uint64_t v46 = 0;
  double v47 = &v46;
  uint64_t v48 = 0x3032000000;
  BOOL v49 = __Block_byref_object_copy__173;
  CGAffineTransform v50 = __Block_byref_object_dispose__173;
  id v51 = 0;
  if (qword_1E8FDF698 != -1) {
    dispatch_once(&qword_1E8FDF698, &__block_literal_global_103_2);
  }
  char v10 = _MergedGlobals_46 ? [(id)UIApp _applicationWantsGESEvents] ^ 1 : 1;
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = ___globalEdgeSwipeEventDiscardFilterGenerator_block_invoke_93;
  v43[3] = &unk_1E5304BD8;
  v43[4] = &v58;
  v43[5] = buf;
  char v45 = v10;
  int v44 = v5;
  v43[6] = &v68;
  v43[7] = &v46;
  v43[8] = &v52;
  v43[9] = &v62;
  v43[10] = a2;
  _UIEventHIDEnumerateChildren(a2, 11, v43);
  if ([(id)v53[5] count] || objc_msgSend((id)v47[5], "count"))
  {
    unint64_t v11 = v59[3];
    if (v11 <= [(id)v53[5] count])
    {
      int v26 = 0;
      int v25 = 0;
    }
    else
    {
      if ([(id)v53[5] count])
      {
        uint64_t v12 = BKSHIDEventGetDigitizerAttributes();
        uint64_t v13 = [v12 pathAttributes];
        uint64_t v14 = (void *)[v13 mutableCopy];

        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        id v15 = (id)v53[5];
        uint64_t v16 = [v15 countByEnumeratingWithState:&v39 objects:v75 count:16];
        if (v16)
        {
          uint64_t v17 = *(void *)v40;
          do
          {
            for (uint64_t i = 0; i != v16; ++i)
            {
              if (*(void *)v40 != v17) {
                objc_enumerationMutation(v15);
              }
              IOHIDEventRemoveEvent();
              if (v12)
              {
                uint64_t v19 = _UIEventHIDPathAttributesForChild(v12);
                if (v19) {
                  [v14 removeObject:v19];
                }
              }
            }
            uint64_t v16 = [v15 countByEnumeratingWithState:&v39 objects:v75 count:16];
          }
          while (v16);
        }

        id v20 = (void *)[v14 copy];
        [v12 setPathAttributes:v20];

        BKSHIDEventSetDigitizerAttributes();
      }
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      id v21 = (id)v47[5];
      uint64_t v22 = [v21 countByEnumeratingWithState:&v35 objects:v74 count:16];
      if (v22)
      {
        uint64_t v23 = *(void *)v36;
        do
        {
          for (uint64_t j = 0; j != v22; ++j)
          {
            if (*(void *)v36 != v23) {
              objc_enumerationMutation(v21);
            }
            IOHIDEventSetPhase();
          }
          uint64_t v22 = [v21 countByEnumeratingWithState:&v35 objects:v74 count:16];
        }
        while (v22);
      }

      int v25 = 0;
      int v26 = 1;
    }
  }
  else
  {
    int v26 = 0;
    int v25 = 1;
  }
  if ([(id)v63[5] count])
  {
    double v27 = (void *)v63[5];
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = ___globalEdgeSwipeEventDiscardFilterGenerator_block_invoke_100;
    v34[3] = &unk_1E5303E00;
    v34[4] = buf;
    v34[5] = &v68;
    [v27 enumerateIndexesUsingBlock:v34];
    if (![*(id *)(v77 + 40) count])
    {
      uint64_t v28 = (void *)qword_1E8FDF650;
      uint64_t v29 = [NSNumber numberWithUnsignedInt:v5];
      [v28 removeObjectForKey:v29];
    }
    if (![(id)v69[5] count])
    {
      unsigned int v30 = (void *)qword_1E8FDF658;
      unsigned int v31 = [NSNumber numberWithUnsignedInt:v5];
      [v30 removeObjectForKey:v31];
    }
  }
  _Block_object_dispose(&v46, 8);

  _Block_object_dispose(&v52, 8);
  _Block_object_dispose(&v58, 8);
  _Block_object_dispose(&v62, 8);

  _Block_object_dispose(&v68, 8);
  _Block_object_dispose(buf, 8);

  if ((v26 | v25) == 1)
  {
LABEL_40:
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("GESEventFilter", &qword_1E8FDF690);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      int v33 = *(NSObject **)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240450;
        *(_DWORD *)&uint8_t buf[4] = v5;
        LOWORD(v77) = 2112;
        *(void *)((char *)&v77 + 2) = a2;
        _os_log_impl(&dword_1853B0000, v33, OS_LOG_TYPE_ERROR, "Forwarding original collection event for contextId: 0x%{public}X; \n%@",
          buf,
          0x12u);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1855FAE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose((const void *)(v65 - 160), 8);
  _Unwind_Resume(a1);
}

void ___grapeFingerOneStrokeMisinterpretationWorkaround_block_invoke_2(uint64_t a1)
{
  if (IOHIDEventGetType() == 11
    && (CFArrayRef v2 = (const __CFArray *)IOHIDEventGetChildren()) != 0
    && (CFArrayRef v3 = v2, CFArrayGetCount(v2) == 2)
    && (CFArrayGetValueAtIndex(v3, 0), CFArrayGetValueAtIndex(v3, 1), IOHIDEventGetType() == 11)
    && IOHIDEventGetType() == 11
    && (int IntegerValue = IOHIDEventGetIntegerValue(), (IntegerValue & IOHIDEventGetIntegerValue() & 2) != 0)
    && (uint64_t v5 = IOHIDEventGetIntegerValue(), v5 != IOHIDEventGetIntegerValue()))
  {
    Copdouble y = (const void *)IOHIDEventCreateCopy();
    CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
    CFArrayGetValueAtIndex(Children, 1);
    IOHIDEventRemoveEvent();
    IOHIDEventRemoveEvent();
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    CFRelease(Copy);
  }
  else
  {
    CFIndex v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v6();
  }
}

uint64_t _UIEventHIDShouldIgnoreEventsExpectedToBecomeDragEvent()
{
  if (qword_1EB262D38 != -1) {
    dispatch_once(&qword_1EB262D38, &__block_literal_global_5_6);
  }
  return byte_1EB262D29;
}

void ___dragEventExtractionFilter_block_invoke_2(uint64_t a1)
{
  if (IOHIDEventGetType() == 11 && (_UIEventHIDIgnoresDragEvents() & 1) == 0)
  {
    CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
    CFArrayRef v4 = Children;
    if (Children) {
      CFIndex Count = CFArrayGetCount(Children);
    }
    else {
      CFIndex Count = 0;
    }
    uint64_t v6 = BKSHIDEventGetDigitizerAttributes();
    uint64_t v7 = (void *)v6;
    if (Count < 1) {
      goto LABEL_44;
    }
    uint64_t v8 = 0;
    CFIndex v9 = 0;
    uint64_t v43 = a1;
    uint64_t v44 = Count + 1;
    uint64_t v46 = (void *)v6;
    CFArrayRef v48 = v4;
    CFIndex v45 = Count;
    do
    {
      CFArrayGetValueAtIndex(v4, v9);
      char v10 = _UIEventHIDPathAttributesForChild(v7);
      if ([v10 locus])
      {
        uint64_t v11 = [v10 userIdentifier];
        if (!v8) {
          uint64_t v8 = objc_opt_new();
        }
        uint64_t v12 = [NSNumber numberWithUnsignedInt:v11];
        uint64_t v13 = [v8 objectForKey:v12];

        if (v13 || (Copdouble y = IOHIDEventCreateCopy()) == 0)
        {
          CFArrayRef v4 = v48;
        }
        else
        {
          id v15 = (void *)Copy;
          double v47 = v8;
          CFArrayRef v16 = (const __CFArray *)IOHIDEventGetChildren();
          uint64_t v17 = BKSHIDEventGetDigitizerAttributes();
          uint64_t v18 = v44;
          do
          {
            CFArrayGetValueAtIndex(v16, v18 - 2);
            uint64_t v19 = _UIEventHIDPathAttributesForChild(v17);
            int v20 = [v19 userIdentifier];

            if (v20 != v11) {
              IOHIDEventRemoveEvent();
            }
            --v18;
          }
          while (v18 > 1);
          id v21 = [NSNumber numberWithUnsignedInt:v11];
          uint64_t v8 = v47;
          [v47 setObject:v15 forKey:v21];

          uint64_t v7 = v46;
          CFArrayRef v4 = v48;
          CFIndex Count = v45;
        }
      }

      ++v9;
    }
    while (v9 != Count);
    a1 = v43;
    if (v8)
    {
      uint64_t v22 = v8;
      uint64_t v23 = 0;
      unint64_t v24 = Count + 1;
      do
      {
        CFArrayGetValueAtIndex(v4, v24 - 2);
        int v25 = _UIEventHIDPathAttributesForChild(v7);
        int v26 = [v25 locus];

        if (v26)
        {
          IOHIDEventRemoveEvent();
        }
        else if (IOHIDEventGetType() == 11)
        {
          ++v23;
        }
        --v24;
      }
      while (v24 > 1);
      if (v23 > 0) {
        (*(void (**)(void))(*(void *)(v43 + 40) + 16))();
      }
      double v27 = v22;
      if ([v22 count])
      {
        uint64_t v28 = *(void **)(v43 + 32);
        if (v28) {
          uint64_t v28 = (void *)v28[25];
        }
        uint64_t v29 = v28;
        v51[0] = MEMORY[0x1E4F143A8];
        v51[1] = 3221225472;
        v51[2] = ___dragEventExtractionFilter_block_invoke_3;
        v51[3] = &unk_1E5304B60;
        unsigned int v30 = v29;
        id v52 = v30;
        id v53 = *(id *)(v43 + 40);
        [v22 enumerateKeysAndObjectsUsingBlock:v51];
        if ((_UIUpdateCycleEnabled() & 1) == 0)
        {
          double v31 = CACurrentMediaTime();
          uint64_t v32 = *(void *)(v43 + 32);
          if (v32) {
            *(double *)(v32 + 208) = v31;
          }
        }
        if (_UIUpdateCycleEnabled())
        {
          double v33 = CFAbsoluteTimeGetCurrent() + 0.0333333333;
          double v34 = v33 + -0.00416666667;
          long long v35 = *(void **)(v43 + 32);
          if (v35 && (long long v36 = (__CFRunLoopTimer *)v35[28]) != 0)
          {
            CFRunLoopTimerSetNextFireDate(v36, v33 + -0.00416666667);
          }
          else
          {
            CFAllocatorRef v37 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = ___dragEventExtractionFilter_block_invoke_4;
            block[3] = &unk_1E5304B88;
            CGAffineTransform v50 = v35;
            CFRunLoopTimerRef v38 = CFRunLoopTimerCreateWithHandler(v37, v34, 315360000.0, 0, 0, block);
            uint64_t v39 = *(void *)(v43 + 32);
            if (v39 && (*(void *)(v39 + 224) = v38, (uint64_t v40 = *(void *)(v43 + 32)) != 0))
            {
              long long v41 = *(__CFRunLoop **)(v40 + 16);
              long long v42 = *(__CFRunLoopTimer **)(v40 + 224);
            }
            else
            {
              long long v41 = 0;
              long long v42 = 0;
            }
            CFRunLoopAddTimer(v41, v42, (CFRunLoopMode)*MEMORY[0x1E4F1D418]);
          }
        }
      }
    }
    else
    {
LABEL_44:
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      double v27 = 0;
    }
  }
  else
  {
    CFArrayRef v2 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v2();
  }
}

uint64_t _UIEventHIDIgnoresDragEvents()
{
  if (qword_1EB262D30 != -1) {
    dispatch_once(&qword_1EB262D30, &__block_literal_global_472);
  }
  return _MergedGlobals_1210;
}

void ___hoverEventMemoryFilter_block_invoke_2(uint64_t a1, uint64_t a2)
{
  CFArrayRef v4 = BKSHIDEventGetDigitizerAttributes();
  if (IOHIDEventGetType() == 11 && ([v4 systemGestureStateChange] & 1) == 0)
  {
    CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
    if (!Children) {
      goto LABEL_22;
    }
    CFArrayRef v6 = Children;
    if (CFArrayGetCount(Children) < 1) {
      goto LABEL_22;
    }
    CFArrayGetValueAtIndex(v6, 0);
    uint64_t v7 = BKSHIDEventGetDigitizerAttributes();
    uint64_t v8 = _UIEventHIDPathAttributesForChild(v7);
    int v9 = [v8 locus];

    if (!v9)
    {
LABEL_22:
      if (_UIEventHIDShouldAllowHoverEventGeneration(a2))
      {
        uint64_t v22 = 0;
        uint64_t v23 = &v22;
        uint64_t v24 = 0x2020000000;
        char v25 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = &v18;
        uint64_t v20 = 0x2020000000;
        char v21 = 1;
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3221225472;
        v17[2] = ___hoverEventMemoryFilter_block_invoke_3;
        v17[3] = &unk_1E5304940;
        v17[4] = &v22;
        v17[5] = &v18;
        _UIEventHIDEnumerateChildren(a2, 11, v17);
        uint64_t v10 = [v4 contextID];
        if (*((unsigned char *)v23 + 24) || !*((unsigned char *)v19 + 24))
        {
          uint64_t v11 = *(void *)(a1 + 32);
          if (!v11)
          {
LABEL_12:
            _Block_object_dispose(&v18, 8);
            _Block_object_dispose(&v22, 8);
            goto LABEL_13;
          }
          uint64_t v12 = *(void **)(v11 + 240);
        }
        else
        {
          uint64_t v14 = *(void *)(a1 + 32);
          if (!v14) {
            goto LABEL_12;
          }
          uint64_t v12 = *(void **)(v14 + 240);
          if (a2)
          {
            if (!v12)
            {
              id v15 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
              CFArrayRef v16 = *(void **)(v14 + 240);
              *(void *)(v14 + 240) = v15;

              uint64_t v12 = *(void **)(v14 + 240);
            }
            uint64_t v13 = [NSNumber numberWithUnsignedInt:v10];
            [v12 setObject:a2 forKey:v13];
            goto LABEL_11;
          }
        }
        uint64_t v13 = [NSNumber numberWithUnsignedInt:v10];
        [v12 removeObjectForKey:v13];
LABEL_11:

        goto LABEL_12;
      }
    }
  }
LABEL_13:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1855FBEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

BOOL _UIEventHIDExpectedToBecomeDragEvent()
{
  CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
  if (Children && (CFArrayRef v1 = Children, (Count = CFArrayGetCount(Children)) != 0))
  {
    CFIndex v3 = 0;
    BOOL v4 = 1;
    do
    {
      CFArrayGetValueAtIndex(v1, v3);
      if (IOHIDEventGetIntegerValue() == 65318 && IOHIDEventGetIntegerValue() == 1) {
        break;
      }
      BOOL v4 = ++v3 < Count;
    }
    while (Count != v3);
  }
  else
  {
    return 0;
  }
  return v4;
}

void sub_1855FC448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void _UIEventHIDEnumerateChildren(uint64_t a1, int a2, void *a3)
{
  BOOL v4 = a3;
  if (!a2 || IOHIDEventConformsTo())
  {
    CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
    if (Children)
    {
      CFArrayRef v6 = Children;
      CFIndex Count = CFArrayGetCount(Children);
      char v12 = 0;
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        CFIndex v9 = 0;
        do
        {
          while (1)
          {
            ValueAtIndedouble x = CFArrayGetValueAtIndex(v6, v9);
            if (!a2 || IOHIDEventGetType() == a2) {
              break;
            }
            if (++v9 >= v8) {
              goto LABEL_14;
            }
          }
          v4[2](v4, ValueAtIndex, v9++, &v12);
          if (v12) {
            BOOL v11 = 0;
          }
          else {
            BOOL v11 = v9 < v8;
          }
        }
        while (v11);
      }
    }
  }
LABEL_14:
}

void ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  CFArrayRef v6 = (const void *)_UIEventHIDPathIndexForDigitizerEvent();
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262B50);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    v87 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a3;
      _os_log_impl(&dword_1853B0000, v87, OS_LOG_TYPE_ERROR, "\tProcessing digitizer child %ld info at child index: %ld", buf, 0x16u);
    }
  }
  uint64_t v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), v6);
  -[UIEventEnvironment _setCurrentTouch:forWindow:](*(void *)(a1 + 80), v8, *(void **)(a1 + 32));
  CFIndex v9 = *(void **)(a1 + 88);
  if (v9)
  {
    uint64_t v10 = [v9 hoverTouchForContextId:*(unsigned int *)(a1 + 120) pathIndex:v6];
  }
  else
  {
    uint64_t v10 = 0;
  }
  unint64_t v11 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262B58);
  if (*(unsigned char *)v11)
  {
    v88 = *(NSObject **)(v11 + 8);
    if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
    {
      v89 = v88;
      uint64_t IntegerValue = IOHIDEventGetIntegerValue();
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = IntegerValue != 0;
      _os_log_impl(&dword_1853B0000, v89, OS_LOG_TYPE_ERROR, "\tChild event is touching: %d", buf, 8u);
    }
  }
  if (!IOHIDEventGetIntegerValue())
  {
    if (!*(void *)(a1 + 88)) {
      goto LABEL_30;
    }
    uint64_t v13 = IOHIDEventGetIntegerValue();
    if (v8) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = v10 == 0;
    }
    char v15 = v14;
    if (!v13)
    {
      if ((v15 & 1) == 0) {
        _UITouchSetBasicTouchPropertiesFromEvent(v10, *(void **)(a1 + 40), *(void *)(a1 + 64), a2);
      }
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_33;
      aBlock[3] = &__block_descriptor_52_e5_v8__0lu32l8;
      uint64_t v28 = *(void *)(a1 + 88);
      int v129 = *(_DWORD *)(a1 + 120);
      void aBlock[4] = v28;
      aBlock[5] = v6;
      uint64_t v29 = _Block_copy(aBlock);
      uint64_t v30 = *(void *)(*(void *)(a1 + 56) + 8);
      double v31 = *(void **)(v30 + 40);
      *(void *)(v30 + 40) = v29;

      [(UITouch *)v10 setPhase:7];
      if (v10) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    if (v10)
    {
      _UIEventHIDGetDescendantPointerEvent(*(void *)(a1 + 64));
      if ((v15 & 1) == 0)
      {
        _UITouchSetBasicTouchPropertiesFromEvent(v10, *(void **)(a1 + 40), *(void *)(a1 + 64), a2);
        double v16 = *(double *)(a1 + 96);
        uint64_t v17 = *(void **)(a1 + 32);
        uint64_t v18 = *(void *)(a1 + 64);
        uint64_t v139 = 0;
        long long v138 = 0u;
        memset(buf, 0, sizeof(buf));
        __baseTouchLocationsForChild((uint64_t)buf, a2, v18, v17, (uint64_t)v10, 0, 0);
        uint64_t v19 = -[UIWindow _fbsScene]((id *)v17);
        double v20 = _UIConvertScenePoint3DToWindow(v19, v17, *(double *)buf, *(double *)&buf[8]);
        double v22 = v21;
        double v23 = _UIConvertScenePoint3DToWindow(v19, v17, *(double *)&buf[16], *(double *)&buf[24]);
        CGFloat v25 = v24;
        if ([(UITouch *)v10 phase] <= UITouchPhaseCancelled) {
          [(UITouch *)v10 _clearForReenteringHoverInWindow:v17];
        }
        [(UITouch *)v10 setPhase:6];
        v10->_movementMagnitudeSquared = (v20 - v10->_locationInWindow.x) * (v20 - v10->_locationInWindow.x)
                                       + (v22 - v10->_locationInWindow.y) * (v22 - v10->_locationInWindow.y);
        IOHIDEventGetFloatValue();
        double maxObservedPressure = v10->_maxObservedPressure;
        if (maxObservedPressure < v26) {
          double maxObservedPressure = v26;
        }
        v10->_previousPressure = v10->_pressure;
        v10->_pressure = v26;
        v10->_double maxObservedPressure = maxObservedPressure;
        [(UITouch *)v10 setTimestamp:v16];
        v10->_previousLocationInWindow = v10->_locationInWindow;
        v10->_precisePreviousLocationInWindow = v10->_preciseLocationInWindow;
        v10->_locationInWindow.double x = v20;
        v10->_locationInWindow.double y = v22;
        v10->_preciseLocationInWindow.double x = v23;
        v10->_preciseLocationInWindow.double y = v25;
      }
LABEL_29:
      [*(id *)(a1 + 88) _addHasOutstandingUpdateTouch:v10];
      goto LABEL_30;
    }
    int v60 = [*(id *)(a1 + 32) isHidden];
    char v61 = v60;
    int v62 = v60 ^ 1;
    uint64_t v63 = _UIEventHIDGetDescendantPointerEvent(*(void *)(a1 + 64));
    if ((v61 & 1) != 0 || !v63) {
      goto LABEL_43;
    }
    if ((_UIApplicationProcessIsPointerUI() & 1) == 0)
    {
      uint64_t v64 = [0 phase];
      uint64_t v65 = +[_UIPointerArbiter sharedArbiter];
      uint64_t v66 = [v65 pointerState];

      id v67 = [*(id *)(a1 + 32) windowScene];
      uint64_t v68 = [v67 pointerLockState];
      int v69 = [v68 isLocked];

      int v62 = v66 != 0;
      int v70 = v69 ^ 1;
      if (v66) {
        int v70 = 1;
      }
      if (v64 != 7 && v70)
      {
LABEL_43:
        if (!v62)
        {
          uint64_t v10 = 0;
          uint64_t v12 = v8;
          if (!v8) {
            goto LABEL_82;
          }
          goto LABEL_31;
        }
      }
    }
    double v71 = *(double *)(a1 + 96);
    v72 = *(void **)(a1 + 32);
    id v73 = *(void **)(a1 + 40);
    uint64_t v74 = *(void *)(a1 + 64);
    uint64_t v10 = objc_alloc_init(UITouch);
    [(UITouch *)v10 setTimestamp:v71];
    [(UITouch *)v10 setPhase:5];
    [(UITouch *)v10 setWindow:v72];
    -[UITouch _setWindowServerHitTestWindow:]((uint64_t)v10, v72);
    uint64_t v75 = _UIEventHIDGetDescendantPointerEvent(v74);
    uint64_t v76 = _UIEventHIDGetPointerEventSource(v75);
    if (v10)
    {
      v10->_pointerSource = v76;
      if (v75)
      {
LABEL_46:
        BOOL v77 = v76 != 4;
        goto LABEL_50;
      }
      BOOL v77 = 0;
    }
    else
    {
      if (v75)
      {
        uint64_t v76 = 0;
        goto LABEL_46;
      }
      BOOL v77 = 0;
    }
LABEL_50:
    [(UITouch *)v10 _setIsPointerTouch:v77];
    _UITouchSetBasicTouchPropertiesFromEvent(v10, v73, v74, a2);
    uint64_t v139 = 0;
    long long v138 = 0u;
    memset(buf, 0, sizeof(buf));
    __baseTouchLocationsForChild((uint64_t)buf, a2, v74, v72, 0, 0, 0);
    v78 = -[UIWindow _fbsScene]((id *)v72);
    double v79 = _UIConvertScenePoint3DToWindow(v78, v72, *(double *)buf, *(double *)&buf[8]);
    CGFloat v81 = v80;
    double v82 = _UIConvertScenePoint3DToWindow(v78, v72, *(double *)&buf[16], *(double *)&buf[24]);
    CGFloat v84 = v83;
    _UIConvertScenePoint3DToWindow(v78, v72, *(double *)&v138, *((double *)&v138 + 1));
    if (v10)
    {
      v10->_previousLocationInWindow.double x = v79;
      v10->_previousLocationInWindow.double y = v81;
      v10->_precisePreviousLocationInWindow.double x = v82;
      v10->_precisePreviousLocationInWindow.double y = v84;
      v10->_locationInWindow.double x = v79;
      v10->_locationInWindow.double y = v81;
      v10->_preciseLocationInWindow.double x = v82;
      v10->_preciseLocationInWindow.double y = v84;
      IOHIDEventGetFloatValue();
      double v86 = v10->_maxObservedPressure;
      if (v86 < v85) {
        double v86 = v85;
      }
      v10->_previousPressure = v85;
      v10->_pressure = v85;
      v10->_double maxObservedPressure = v86;
    }
    else
    {
      IOHIDEventGetFloatValue();
    }

    [*(id *)(a1 + 88) setHoverTouch:v10 forContextId:*(unsigned int *)(a1 + 120) pathIndex:v6];
    if (v10) {
      goto LABEL_29;
    }
LABEL_30:
    uint64_t v12 = v8;
    if (!v8) {
      goto LABEL_82;
    }
    goto LABEL_31;
  }
  uint64_t v12 = v8;
  if (!v8)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    uint64_t v12 = __startNewUITouch(v10, *(void **)(a1 + 40), *(void **)(a1 + 32), *(void **)(a1 + 104), *(void *)(a1 + 64), a2, (uint64_t)v6, *(void **)(a1 + 72), *(double *)(a1 + 96), *(void **)(a1 + 112), *(void *)(a1 + 80));
  }
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 112), v6, (const void *)v12);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), v6);
  if (v8)
  {
LABEL_31:
    if (v12)
    {
      _UITouchSetBasicTouchPropertiesFromEvent((void *)v12, *(void **)(a1 + 40), *(void *)(a1 + 64), a2);
      double v32 = *(double *)(a1 + 96);
      double v33 = *(void **)(a1 + 32);
      uint64_t v34 = *(void *)(a1 + 64);
      unint64_t v35 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262C88);
      if (*(unsigned char *)v35)
      {
        v91 = *(NSObject **)(v35 + 8);
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v6;
          _os_log_impl(&dword_1853B0000, v91, OS_LOG_TYPE_ERROR, "\t\tUpdating existing touch instance for path index: %ld", buf, 0xCu);
        }
      }
      long long v36 = [(id)v12 window];
      uint64_t v139 = 0;
      long long v138 = 0u;
      memset(buf, 0, sizeof(buf));
      uint64_t v133 = 0;
      long long v131 = 0u;
      long long v132 = 0u;
      long long v130 = 0u;
      __baseTouchLocationsForChild((uint64_t)&v130, a2, v34, v33, v12, 0, (uint64_t)buf);
      *(_OWORD *)v134 = *(_OWORD *)buf;
      *(_OWORD *)&v134[16] = *(_OWORD *)&buf[16];
      long long v135 = v138;
      uint64_t v136 = v139;
      _LogTouchLocationsIfNeeded((uint64_t)"rawChildTouchLocations", (CGFloat *)v134);
      *(_OWORD *)v134 = v130;
      *(_OWORD *)&v134[16] = v131;
      long long v135 = v132;
      uint64_t v136 = v133;
      _LogTouchLocationsIfNeeded((uint64_t)"childTouchSceneLocations", (CGFloat *)v134);
      CFAllocatorRef v37 = -[UIWindow _fbsScene]((id *)v33);
      double v38 = _UIConvertScenePoint3DToWindow(v37, v36, *(double *)&v130, *((double *)&v130 + 1));
      double v40 = v39;
      *(double *)&long long v130 = v38;
      *((double *)&v130 + 1) = v39;
      uint64_t v133 = v41;
      double v42 = _UIConvertScenePoint3DToWindow(v37, v36, *(double *)&v131, *((double *)&v131 + 1));
      double v44 = v43;
      *(double *)&long long v131 = v42;
      *((double *)&v131 + 1) = v43;
      id v45 = *(id *)(v12 + 88);

      if (v45)
      {
        *(double *)&os_log_t log = v32;
        long long v46 = v132;
        objc_msgSend(v36, "warpPoint:", v38, v40);
        double v48 = v47;
        double v50 = v49;
        objc_msgSend(v36, "warpPoint:", v42, v44);
        double v123 = v52;
        double v124 = v51;
        [v36 warpPoint:v46];
        uint64_t v54 = v53;
        uint64_t v56 = v55;
        double v38 = __lockWarpedPointToViewEdge(v45, v38, v40, v48, v50);
        double v40 = v57;
        double v42 = __lockWarpedPointToViewEdge(v45, v42, v44, v124, v123);
        double v44 = v58;
        *(double *)&long long v130 = v38;
        *((double *)&v130 + 1) = v40;
        *(double *)&long long v131 = v42;
        *((double *)&v131 + 1) = v58;
        *(void *)&long long v132 = v54;
        *((void *)&v132 + 1) = v56;
        uint64_t v133 = 0;
        unint64_t v59 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262C90);
        if (*(unsigned char *)v59)
        {
          v92 = *(NSObject **)(v59 + 8);
          double v32 = *(double *)&log;
          if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v134 = 0;
            _os_log_impl(&dword_1853B0000, v92, OS_LOG_TYPE_ERROR, "\t\tWarping Point", v134, 2u);
          }
        }
        else
        {
          double v32 = *(double *)&log;
        }
      }
      *(_OWORD *)v134 = v130;
      *(_OWORD *)&v134[16] = v131;
      long long v135 = v132;
      uint64_t v136 = v133;
      _LogTouchLocationsIfNeeded((uint64_t)"childTouchWindowLocations", (CGFloat *)v134);
      _UpdateTouchTapCount((_WORD *)v12, 1, v32, v38, v40);
      -[UITouch _updateWithChildEvent:](v12);
      *(double *)(v12 + 8) = (v38 - *(double *)(v12 + 112)) * (v38 - *(double *)(v12 + 112))
                           + (v40 - *(double *)(v12 + 120)) * (v40 - *(double *)(v12 + 120));
      IOHIDEventGetFloatValue();
      double v94 = v93;
      IOHIDEventGetFloatValue();
      double v96 = v95;
      unint64_t v97 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262C98);
      if (*(unsigned char *)v97)
      {
        os_log_t loga = *(os_log_t *)(v97 + 8);
        if (os_log_type_enabled(loga, OS_LOG_TYPE_ERROR))
        {
          logb = loga;
          BOOL v108 = IOHIDEventGetIntegerValue() != 0;
          uint64_t v109 = IOHIDEventGetIntegerValue();
          *(_DWORD *)v134 = 67109376;
          *(_DWORD *)&v134[4] = v108;
          *(_WORD *)&v134[8] = 2048;
          *(void *)&v134[10] = v109;
          _os_log_impl(&dword_1853B0000, logb, OS_LOG_TYPE_ERROR, "\t\tTouch isTouching: %d inRange: %ld", v134, 0x12u);
        }
      }
      unint64_t v98 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262CA0);
      if (*(unsigned char *)v98)
      {
        v110 = *(NSObject **)(v98 + 8);
        if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v134 = 134217984;
          *(double *)&v134[4] = v94;
          _os_log_impl(&dword_1853B0000, v110, OS_LOG_TYPE_ERROR, "\t\tTouch pressure: %f", v134, 0xCu);
        }
      }
      [(id)v12 preciseLocationInView:0];
      if (v42 != v100
        || v44 != v99
        || ([(id)v12 _pressure], v94 != v101)
        || [(id)v12 type] == 2
        || _UIEventHIDGetDescendantPointerEvent(v34)
        || ([(id)v12 _rollAngle], v96 != v102)
        || _UIApplicationSupportsGlobalEdgeSwipeTouches() && (*(_WORD *)(v12 + 236) & 0x4000) != 0)
      {
        unint64_t v103 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262CA8);
        if (*(unsigned char *)v103)
        {
          v111 = *(NSObject **)(v103 + 8);
          if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
          {
            v112 = v111;
            v141.double x = v38;
            v141.double y = v40;
            v113 = NSStringFromCGPoint(v141);
            *(_DWORD *)v134 = 138412290;
            *(void *)&v134[4] = v113;
            _os_log_impl(&dword_1853B0000, v112, OS_LOG_TYPE_ERROR, "\t\tTouch moved to %@", v134, 0xCu);
          }
        }
        [(id)v12 setTimestamp:v32];
        *(_OWORD *)(v12 + 128) = *(_OWORD *)(v12 + 112);
        *(_OWORD *)(v12 + 160) = *(_OWORD *)(v12 + 144);
        *(double *)(v12 + 112) = v38;
        *(double *)(v12 + 120) = v40;
        *(double *)(v12 + 144) = v42;
        *(double *)(v12 + 152) = v44;
        double v104 = *(double *)(v12 + 224);
        if (v104 < v94) {
          double v104 = v94;
        }
        *(void *)(v12 + 176) = *(void *)(v12 + 216);
        *(double *)(v12 + 216) = v94;
        *(double *)(v12 + 224) = v104;
        -[UITouch _setRollAngle:resetPrevious:](v12, 0, v96);
        unint64_t v105 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262CB0);
        if (*(unsigned char *)v105)
        {
          v114 = *(NSObject **)(v105 + 8);
          if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
          {
            v115 = v114;
            v116 = [(id)v12 _phaseDescription];
            *(_DWORD *)v134 = 138412290;
            *(void *)&v134[4] = v116;
            _os_log_impl(&dword_1853B0000, v115, OS_LOG_TYPE_ERROR, "\t\tCurrent touch phase: %@", v134, 0xCu);
          }
        }
        if (([(id)v12 phase] | 2) == 2) {
          [(id)v12 setPhase:1];
        }
        unint64_t v106 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262CB8);
        if (*(unsigned char *)v106)
        {
          v117 = *(NSObject **)(v106 + 8);
          if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
          {
            v118 = v117;
            v119 = [(id)v12 _phaseDescription];
            *(_DWORD *)v134 = 138412290;
            *(void *)&v134[4] = v119;
            _os_log_impl(&dword_1853B0000, v118, OS_LOG_TYPE_ERROR, "\t\tNew touch phase: %@", v134, 0xCu);
          }
        }
      }
      if (_UIApplicationSupportsGlobalEdgeSwipeTouches())
      {
        unint64_t v107 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262CC0);
        if (*(unsigned char *)v107)
        {
          v120 = *(NSObject **)(v107 + 8);
          if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
          {
            v121 = v120;
            unsigned int v122 = *(unsigned __int16 *)(v12 + 236);
            *(_DWORD *)v134 = 134218496;
            *(void *)&v134[4] = v12;
            *(_WORD *)&v134[12] = 1024;
            *(_DWORD *)&v134[14] = (v122 >> 13) & 1;
            *(_WORD *)&v134[18] = 1024;
            *(_DWORD *)&v134[20] = (v122 >> 14) & 1;
            _os_log_impl(&dword_1853B0000, v121, OS_LOG_TYPE_ERROR, "\t\tTouch %p isGESTouch: %d; isTransitioningFromGESTouch: %d",
              v134,
              0x18u);
          }
        }
      }
    }
  }
LABEL_82:
  -[UIEventEnvironment _setCurrentTouch:forWindow:](*(void *)(a1 + 80), 0, *(void **)(a1 + 32));
}

void _LogTouchLocationsIfNeeded(uint64_t a1, CGFloat *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("Touch", &qword_1EB262C68))
  {
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262C70);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      uint64_t v12 = *(NSObject **)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        CGFloat v13 = *a2;
        CGFloat v14 = a2[1];
        char v15 = v12;
        v30.double x = v13;
        v30.double y = v14;
        double v16 = NSStringFromCGPoint(v30);
        int v22 = 136315650;
        double v23 = "\t\t\t";
        __int16 v24 = 2080;
        uint64_t v25 = a1;
        __int16 v26 = 2112;
        double v27 = v16;
        _os_log_impl(&dword_1853B0000, v15, OS_LOG_TYPE_ERROR, "%s%s.location: %@", (uint8_t *)&v22, 0x20u);
      }
    }
    unint64_t v5 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262C78);
    if (*(unsigned char *)v5)
    {
      uint64_t v17 = *(NSObject **)(v5 + 8);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        CGFloat v18 = a2[2];
        CGFloat v19 = a2[3];
        double v20 = v17;
        v31.double x = v18;
        v31.double y = v19;
        double v21 = NSStringFromCGPoint(v31);
        int v22 = 136315650;
        double v23 = "\t\t\t";
        __int16 v24 = 2080;
        uint64_t v25 = a1;
        __int16 v26 = 2112;
        double v27 = v21;
        _os_log_impl(&dword_1853B0000, v20, OS_LOG_TYPE_ERROR, "%s%s.preciseLocation: %@", (uint8_t *)&v22, 0x20u);
      }
    }
    unint64_t v6 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262C80);
    if (*(unsigned char *)v6)
    {
      uint64_t v7 = *(NSObject **)(v6 + 8);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        CGFloat v8 = a2[4];
        CGFloat v9 = a2[5];
        uint64_t v10 = v7;
        v29.double x = v8;
        v29.double y = v9;
        unint64_t v11 = NSStringFromCGPoint(v29);
        int v22 = 136315650;
        double v23 = "\t\t\t";
        __int16 v24 = 2080;
        uint64_t v25 = a1;
        __int16 v26 = 2112;
        double v27 = v11;
        _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_ERROR, "%s%s.hitTestLocation: %@", (uint8_t *)&v22, 0x20u);
      }
    }
  }
}

void ___globalEdgeSwipeEventDiscardFilterGenerator_block_invoke_93(uint64_t a1, uint64_t a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v4 = _UIEventHIDPathIndexForDigitizerEvent();
  unsigned int Phase = IOHIDEventGetPhase();
  unsigned int v6 = Phase & 0x80;
  int v7 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) containsIndex:v4];
  int v8 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) containsIndex:v4];
  int v9 = v7 & (Phase >> 7);
  int v10 = v7 ^ 1;
  if ((Phase & 0x80) == 0) {
    int v10 = 0;
  }
  if (*(unsigned char *)(a1 + 92)) {
    int v11 = v10;
  }
  else {
    int v11 = 0;
  }
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("GESEventFilter", &qword_1E8FDF660);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    double v58 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      int v59 = *(_DWORD *)(a1 + 88);
      int v60 = *(unsigned __int8 *)(a1 + 92);
      *(_DWORD *)uint64_t v64 = 134219776;
      *(void *)&v64[4] = v4;
      *(_WORD *)&v64[12] = 1026;
      *(_DWORD *)&v64[14] = v59;
      *(_WORD *)&v64[18] = 1024;
      *(_DWORD *)&v64[20] = v60;
      *(_WORD *)&v64[24] = 1024;
      *(_DWORD *)&v64[26] = v6 >> 7;
      *(_WORD *)&v64[30] = 1024;
      int v65 = v9;
      __int16 v66 = 1024;
      int v67 = v11;
      __int16 v68 = 1024;
      int v69 = v7;
      __int16 v70 = 1024;
      int v71 = v8;
      _os_log_impl(&dword_1853B0000, v58, OS_LOG_TYPE_ERROR, "Evaluating removal or promotion: path index: %li; contextId: 0x%{public}X; shouldFilterGESEvents: %d; isGESEvent"
        " %d; shouldPromote: %d; shouldRemove: %d; wasDispatchedAsNonGES: %d; wasPromotedToNonGES: %d",
        v64,
        0x36u);
    }
  }
  if (v9)
  {
    if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
    {
      uint64_t v13 = objc_opt_new();
      uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
      char v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;
    }
    if (!qword_1E8FDF658)
    {
      uint64_t v16 = objc_opt_new();
      uint64_t v17 = (void *)qword_1E8FDF658;
      qword_1E8FDF658 = v16;
    }
    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      uint64_t v18 = [MEMORY[0x1E4F28E60] indexSet];
      uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8);
      double v20 = *(void **)(v19 + 40);
      *(void *)(v19 + 40) = v18;

      double v21 = (void *)qword_1E8FDF658;
      uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      double v23 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 88)];
      [v21 setObject:v22 forKey:v23];
    }
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:a2];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addIndex:v4];
    __int16 v24 = *(NSObject **)(__UILogGetCategoryCachedImpl("GESEventFilter", &qword_1E8FDF668) + 8);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      int v25 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)uint64_t v64 = 67240450;
      *(_DWORD *)&v64[4] = v25;
      *(_WORD *)&v64[8] = 2112;
      *(void *)&v64[10] = a2;
      _os_log_impl(&dword_1853B0000, v24, OS_LOG_TYPE_ERROR, "BUG IN HID EVENT PROVIDER: HID event previously dispatched as non-GES (MayBegin) is now GES. This is a violation of the contract with UIKit as events are only allowed to transition from GES to non-GES: contextId: 0x%{public}X; event: \n%@",
        v64,
        0x12u);
    }
    unint64_t v26 = __UILogGetCategoryCachedImpl("GESEventFilter", &qword_1E8FDF670);
    if (*(unsigned char *)v26)
    {
      double v27 = *(NSObject **)(v26 + 8);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        int v28 = *(_DWORD *)(a1 + 88);
        *(_DWORD *)uint64_t v64 = 134218498;
        *(void *)&v64[4] = v4;
        *(_WORD *)&v64[12] = 1026;
        *(_DWORD *)&v64[14] = v28;
        *(_WORD *)&v64[18] = 2112;
        *(void *)&v64[20] = a2;
        CGPoint v29 = "Pending promotion of child event to non-GES: path index: %li; contextId: 0x%{public}X; \n%@";
LABEL_44:
        _os_log_impl(&dword_1853B0000, v27, OS_LOG_TYPE_ERROR, v29, v64, 0x1Cu);
      }
    }
  }
  else if (v11)
  {
    CGPoint v30 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    if (!v30)
    {
      uint64_t v31 = objc_opt_new();
      uint64_t v32 = *(void *)(*(void *)(a1 + 64) + 8);
      double v33 = *(void **)(v32 + 40);
      *(void *)(v32 + 40) = v31;

      CGPoint v30 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    }
    [v30 addObject:a2];
    unint64_t v34 = __UILogGetCategoryCachedImpl("GESEventFilter", &qword_1E8FDF678);
    if (*(unsigned char *)v34)
    {
      double v27 = *(NSObject **)(v34 + 8);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        int v63 = *(_DWORD *)(a1 + 88);
        *(_DWORD *)uint64_t v64 = 134218498;
        *(void *)&v64[4] = v4;
        *(_WORD *)&v64[12] = 1026;
        *(_DWORD *)&v64[14] = v63;
        *(_WORD *)&v64[18] = 2112;
        *(void *)&v64[20] = a2;
        CGPoint v29 = "Pending removal of child event: path index: %li; contextId: 0x%{public}X; \n%@";
        goto LABEL_44;
      }
    }
  }
  uint64_t IntegerValue = IOHIDEventGetIntegerValue();
  int v36 = IOHIDEventGetIntegerValue();
  unint64_t v37 = ((unint64_t)(v36 | IOHIDEventGetIntegerValue()) >> 7) & 1;
  if (!IntegerValue || v37)
  {
    uint64_t v53 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    if (!v53)
    {
      uint64_t v54 = [MEMORY[0x1E4F28E60] indexSet];
      uint64_t v55 = *(void *)(*(void *)(a1 + 72) + 8);
      uint64_t v56 = *(void **)(v55 + 40);
      *(void *)(v55 + 40) = v54;

      uint64_t v53 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    }
    objc_msgSend(v53, "addIndex:", v4, *(void *)v64, *(void *)&v64[8], *(void *)&v64[16], *(void *)&v64[24]);
    unint64_t v57 = __UILogGetCategoryCachedImpl("GESEventFilter", &qword_1E8FDF680);
    if (*(unsigned char *)v57)
    {
      char v61 = *(NSObject **)(v57 + 8);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        int v62 = *(_DWORD *)(a1 + 88);
        *(_DWORD *)uint64_t v64 = 134218752;
        *(void *)&v64[4] = v4;
        *(_WORD *)&v64[12] = 1026;
        *(_DWORD *)&v64[14] = v62;
        *(_WORD *)&v64[18] = 1024;
        *(_DWORD *)&v64[20] = IntegerValue != 0;
        *(_WORD *)&v64[24] = 1024;
        *(_DWORD *)&v64[26] = v37;
        double v50 = "Pending removal of terminal index from tracking: path index: %li; contextId: 0x%{public}X; isTouching: %d;"
              " isCancelled: %d";
        double v51 = v61;
        uint32_t v52 = 30;
        goto LABEL_41;
      }
    }
  }
  else if (!v6)
  {
    if (!qword_1E8FDF650)
    {
      uint64_t v38 = objc_opt_new();
      double v39 = (void *)qword_1E8FDF650;
      qword_1E8FDF650 = v38;
    }
    double v40 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (!v40)
    {
      uint64_t v41 = [MEMORY[0x1E4F28E60] indexSet];
      uint64_t v42 = *(void *)(*(void *)(a1 + 40) + 8);
      double v43 = *(void **)(v42 + 40);
      *(void *)(v42 + 40) = v41;

      double v44 = (void *)qword_1E8FDF650;
      uint64_t v45 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      long long v46 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 88)];
      [v44 setObject:v45 forKey:v46];

      double v40 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
    objc_msgSend(v40, "addIndex:", v4, *(_OWORD *)v64, *(_OWORD *)&v64[16]);
    unint64_t v47 = __UILogGetCategoryCachedImpl("GESEventFilter", &qword_1E8FDF688);
    if (*(unsigned char *)v47)
    {
      double v48 = *(NSObject **)(v47 + 8);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        int v49 = *(_DWORD *)(a1 + 88);
        *(_DWORD *)uint64_t v64 = 134218240;
        *(void *)&v64[4] = v4;
        *(_WORD *)&v64[12] = 1026;
        *(_DWORD *)&v64[14] = v49;
        double v50 = "Adding non-GES index to dispatched set: path index: %li; contextId: 0x%{public}X";
        double v51 = v48;
        uint32_t v52 = 18;
LABEL_41:
        _os_log_impl(&dword_1853B0000, v51, OS_LOG_TYPE_ERROR, v50, v64, v52);
      }
    }
  }
}

uint64_t ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24);
  if (!a3)
  {
    uint64_t v3 = result;
    CFIndex result = IOHIDEventGetIntegerValue();
    *(unsigned char *)(*(void *)(*(void *)(v3 + 40) + 8) + 24) = result == 0;
  }
  return result;
}

uint64_t ____applySynthesizedTouchTranslationAndModifyIfNeeded_block_invoke(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = IOHIDEventGetType();
  if (result == 11)
  {
    uint64_t v9 = *(void *)(a1[5] + 8);
    uint64_t v10 = *(void *)(v9 + 24);
    int v8 = (void *)(v9 + 24);
    if (!v10) {
      goto LABEL_6;
    }
    uint64_t v11 = *(void *)(a1[6] + 8);
    uint64_t v12 = *(void *)(v11 + 24);
    int v8 = (void *)(v11 + 24);
    if (!v12) {
      goto LABEL_6;
    }
  }
  else if (result == 7)
  {
    int v8 = (void *)(*(void *)(a1[4] + 8) + 24);
LABEL_6:
    void *v8 = a2;
  }
  if (*(void *)(*(void *)(a1[4] + 8) + 24) && *(void *)(*(void *)(a1[5] + 8) + 24))
  {
    if (*(void *)(*(void *)(a1[6] + 8) + 24)) {
      *a4 = 1;
    }
  }
  return result;
}

uint64_t _UIEventHIDTouchEdgeTypeForHIDEvent()
{
  unint64_t IntegerValue = IOHIDEventGetIntegerValue();
  uint64_t v1 = 2;
  uint64_t v2 = 3;
  if ((IntegerValue & 0x2000) == 0) {
    uint64_t v2 = (IntegerValue >> 16) & 4;
  }
  if ((IntegerValue & 0x1000) == 0) {
    uint64_t v1 = v2;
  }
  if ((IntegerValue & 0x800) != 0) {
    return 1;
  }
  else {
    return v1;
  }
}

float _UIEventHIDGetMaxForceForDigitizerEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = BKSHIDEventGetDigitizerAttributes();
  unint64_t v5 = v4;
  if (a2 == 3 || !v4)
  {
    if (a2)
    {
      if (a2 == 3)
      {
LABEL_10:
        float v7 = 1000.0;
        goto LABEL_11;
      }
      float v7 = 0.0;
      if (a2 != 2) {
        goto LABEL_11;
      }
    }
    if (a1 && IOHIDEventGetIntegerValue() == 11) {
      IOHIDEventGetFloatValue();
    }
    goto LABEL_10;
  }
  [v4 maximumForce];
  float v7 = v6;
LABEL_11:

  return v7;
}

void _UpdateTouchTapCount(_WORD *a1, int a2, double a3, double a4, double a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = [a1 window];
  uint64_t v11 = [v10 _touchData];

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v12 = v11;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v19 objects:v23 count:16];
  id v14 = v12;
  if (v13)
  {
    uint64_t v15 = v13;
    uint64_t v16 = *(void *)v20;
LABEL_3:
    uint64_t v17 = 0;
    while (1)
    {
      if (*(void *)v20 != v16) {
        objc_enumerationMutation(v12);
      }
      uint64_t v18 = *(void *)(*((void *)&v19 + 1) + 8 * v17);
      if (*(_WORD **)(v18 + 56) == a1) {
        break;
      }
      if (v15 == ++v17)
      {
        uint64_t v15 = [v12 countByEnumeratingWithState:&v19 objects:v23 count:16];
        if (v15) {
          goto LABEL_3;
        }
        id v14 = v12;
        goto LABEL_22;
      }
    }
    if (*(unsigned char *)(v18 + 48)
      && (*(double *)(v18 + 40) + 0.75 < a3
       || a2 && (vabdd_f64(a4, *(double *)(v18 + 8)) >= 45.0 || vabdd_f64(a5, *(double *)(v18 + 16)) >= 45.0)))
    {
      id v14 = (id)v18;
      *(unsigned char *)(v18 + 48) = 0;
      if (a1) {
        a1[118] &= ~2u;
      }
    }
    else
    {
      id v14 = 0;
    }
    if (objc_msgSend(a1, "phase", (void)v19) == 3)
    {
      *(double *)(v18 + 32) = a3;
      *(void *)(v18 + 56) = 0;
    }

    if (v14)
    {
      [v12 removeObject:v14];
      goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
  }
  if (objc_msgSend(a1, "phase", (void)v19) == 3 && (!a1 || (a1[118] & 2) == 0)) {
    [a1 setTapCount:0];
  }
}

void sub_1855FEB2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1855FEC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1855FF174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

uint64_t _UISceneLifecycleCompositeActionMaskHighestLifecycleActionType(int a1)
{
  uint64_t v4 = 0;
  unint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  void v3[2] = ___UISceneLifecycleCompositeActionMaskHighestLifecycleActionType_block_invoke;
  v3[3] = &unk_1E52F19E8;
  v3[4] = &v4;
  _UIScenePerformActionsWithLifecycleActionMask(a1, v3);
  uint64_t v1 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1855FF5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIScenePerformActionsWithLifecycleActionMask(int a1, void *a2)
{
  unint64_t v5 = a2;
  if (a1 && v5)
  {
    for (uint64_t i = 0; i != 7; ++i)
    {
      int v4 = 1 << _UISceneLifecycleActionPrecidenceArray[i];
      if ((v4 & a1) != 0)
      {
        a1 &= ~v4;
        v5[2]();
        if (!a1) {
          break;
        }
      }
    }
  }
}

uint64_t __setupCA_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_DWORD *)(v1 + 352) = 2;
  return _UIUpdateInputSetInputChanged(*(_DWORD **)(v1 + 400), v1 + 352);
}

void __baseTouchLocationsForChild(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, double *a6, uint64_t a7)
{
  BKSHIDEventGetDigitizerAttributes();
  id v106 = (id)objc_claimAutoreleasedReturnValue();
  IOHIDEventGetFloatValue();
  double v14 = v13;
  IOHIDEventGetFloatValue();
  double v16 = v15;
  IOHIDEventGetFloatValue();
  uint64_t v17 = _UIEventHIDPathAttributesForChild(v106);
  uint64_t v18 = v17;
  if (v17)
  {
    [v17 preciseLocationX];
    double v20 = v19;
    [v18 preciseLocationY];
  }
  else
  {
    IOHIDEventGetFloatValue();
    double v20 = v22;
    IOHIDEventGetFloatValue();
  }
  double v23 = v21;

  *(double *)a1 = v14;
  *(double *)(a1 + 8) = v16;
  *(double *)(a1 + 16) = v20;
  *(double *)(a1 + 24) = v23;
  long long v24 = *MEMORY[0x1E4F1DAD8];
  *(_OWORD *)(a1 + 32) = *MEMORY[0x1E4F1DAD8];
  *(void *)(a1 + 48) = 0;
  if (a7)
  {
    *(double *)a7 = v14;
    *(double *)(a7 + 8) = v16;
    *(double *)(a7 + 16) = v20;
    *(double *)(a7 + 24) = v23;
    *(_OWORD *)(a7 + 32) = v24;
    *(void *)(a7 + 48) = 0;
  }
  int v25 = [v106 source];
  if (_EventWindowExpectsExternalTouchInput(a4) && IOHIDEventGetIntegerValue())
  {
    if ([(id)UIApp _supportsIndirectInputEvents]
      && (uint64_t v26 = _UIEventHIDGetDescendantPointerEvent(a3)) != 0)
    {
      _UIEventHIDGetPointerEventSource(v26);
    }
    else if (!IOHIDEventGetIntegerValue())
    {
      goto LABEL_16;
    }
  }
  if (v25 != 12)
  {
    double v27 = _UIEventHIDPathAttributesForChild(v106);
    int v28 = v27;
    if (v27)
    {
      [v27 hitTestLocationX];
      uint64_t v30 = v29;
      [v28 hitTestLocationY];
    }
    else
    {
      IOHIDEventGetFloatValue();
      uint64_t v30 = v45;
      IOHIDEventGetFloatValue();
    }
    uint64_t v46 = v31;

    *(void *)(a1 + 32) = v30;
    *(void *)(a1 + 40) = v46;
    goto LABEL_59;
  }
LABEL_16:
  uint64_t v32 = [a4 screen];
  [v32 bounds];
  if (v25 == 12)
  {
    unint64_t v35 = [v32 displayConfiguration];
    int v36 = [v35 currentMode];
    [v36 nativePixelSize];
    double v38 = v37;
    double v40 = v39;

    [v32 _rotation];
    double v42 = v41;
    uint64_t v43 = [v32 _interfaceOrientation];
    double v44 = 0.0;
    if (v43 != 1)
    {
      if (objc_msgSend(v32, "_interfaceOrientation", 0.0) == 4)
      {
        double v44 = -1.57079633;
      }
      else if ([v32 _interfaceOrientation] == 3)
      {
        double v44 = 1.57079633;
      }
      else
      {
        uint64_t v47 = [v32 _interfaceOrientation];
        double v44 = 3.14159265;
        if (v47 != 2) {
          double v44 = 0.0;
        }
      }
    }
    double v48 = v44 - v42;
    if (fabs(v48 + -1.57079633) >= 2.22044605e-16)
    {
      if (fabs(v48 + -3.14159265) >= 2.22044605e-16 && fabs(v48 + 3.14159265) >= 2.22044605e-16)
      {
        if (fabs(v48 + 1.57079633) >= 2.22044605e-16) {
          goto LABEL_35;
        }
        int v49 = &__block_literal_global_92_0;
      }
      else
      {
        int v49 = &__block_literal_global_90_2;
      }
    }
    else
    {
      int v49 = &__block_literal_global_88_0;
    }
    double v50 = (double (*)(double, double))*((void *)v49 + 2);
    double v14 = v50(v14, v16);
    double v16 = v51;
    *(double *)a1 = v14;
    *(double *)(a1 + 8) = v51;
    double v20 = v50(v20, v23);
    double v23 = v52;
  }
  else
  {
    double v38 = v33;
    double v40 = v34;
    if (dyld_program_sdk_at_least()) {
      double v40 = v38;
    }
  }
LABEL_35:
  double v53 = v14 * v38;
  double v54 = v16 * v40;
  *(double *)a1 = v53;
  *(double *)(a1 + 8) = v16 * v40;
  double v55 = v20 * v38;
  double v56 = v23 * v40;
  *(double *)(a1 + 16) = v20 * v38;
  *(double *)(a1 + 24) = v56;
  unint64_t v57 = [a4 _focusSystem];

  if (v57 || v25 == 12)
  {
    id v58 = a4;
    id v59 = [v58 _focusResponder];
    if (v59)
    {
LABEL_42:
      [v59 _responderExternalTouchRectForWindow:v58];
      double v63 = v62;
      double v104 = v54;
      double v65 = v64;
      CGFloat v67 = v66;
      CGFloat v95 = v68;
      CGFloat v96 = v66;
      CGFloat v69 = v68;
      [v58 frame];
      CGFloat v71 = v70;
      CGFloat v93 = v72;
      CGFloat v94 = v70;
      double v97 = v55;
      double v98 = v56;
      CGFloat v73 = v72;
      CGFloat v75 = v74;
      CGFloat v100 = v74;
      double v101 = v53;
      CGFloat v77 = v76;
      CGFloat v99 = v76;
      v108.origin.CGFloat x = v63;
      v108.origin.CGFloat y = v65;
      v108.size.double width = v67;
      v108.size.double height = v69;
      double Width = CGRectGetWidth(v108);
      v109.origin.CGFloat x = v71;
      v109.origin.CGFloat y = v73;
      v109.size.double width = v75;
      v109.size.double height = v77;
      double v79 = v101 * (Width / CGRectGetWidth(v109));
      *(double *)a1 = v79;
      v110.origin.CGFloat x = v63;
      v110.origin.CGFloat y = v65;
      v110.size.double width = v96;
      v110.size.double height = v95;
      double Height = CGRectGetHeight(v110);
      v111.origin.CGFloat x = v94;
      v111.origin.CGFloat y = v93;
      v111.size.double width = v100;
      v111.size.double height = v99;
      CGFloat v80 = CGRectGetHeight(v111);
      v112.origin.CGFloat y = v65;
      double v81 = v65 + v104 * (Height / v80);
      double v103 = v63 + v79;
      double v105 = v81;
      *(double *)a1 = v63 + v79;
      *(double *)(a1 + 8) = v81;
      v112.origin.CGFloat x = v63;
      v112.size.double width = v96;
      v112.size.double height = v95;
      double v82 = CGRectGetWidth(v112);
      v113.origin.CGFloat x = v94;
      v113.origin.CGFloat y = v93;
      v113.size.double width = v100;
      v113.size.double height = v99;
      double v83 = v97 * (v82 / CGRectGetWidth(v113));
      *(double *)(a1 + 16) = v83;
      v114.origin.CGFloat x = v63;
      v114.origin.CGFloat y = v65;
      v114.size.double width = v96;
      v114.size.double height = v95;
      double v84 = CGRectGetHeight(v114);
      v115.origin.CGFloat x = v94;
      v115.origin.CGFloat y = v93;
      v115.size.double height = v99;
      v115.size.double width = v100;
      double v55 = v63 + v83;
      double v56 = v65 + v98 * (v84 / CGRectGetHeight(v115));
      *(double *)(a1 + 16) = v63 + v83;
      *(double *)(a1 + 24) = v56;
      if (a5)
      {
        double v53 = v103;
        double v54 = v105;
        goto LABEL_44;
      }
      [v59 _responderSelectionRectForWindow:v58];
      CGFloat x = v116.origin.x;
      CGFloat y = v116.origin.y;
      CGFloat v89 = v116.size.width;
      CGFloat v90 = v116.size.height;
      if (!CGRectIsNull(v116))
      {
        v117.origin.CGFloat x = x;
        v117.origin.CGFloat y = y;
        v117.size.double width = v89;
        v117.size.double height = v90;
        double v53 = v103;
        double v86 = CGRectGetMidX(v117) - v103;
        if (a6)
        {
          *a6 = v86;
          v118.origin.CGFloat x = x;
          v118.origin.CGFloat y = y;
          v118.size.double width = v89;
          v118.size.double height = v90;
          double v54 = v105;
          double v85 = CGRectGetMidY(v118) - v105;
          a6[1] = v85;
          goto LABEL_52;
        }
        v119.origin.CGFloat x = x;
        v119.origin.CGFloat y = y;
        v119.size.double width = v89;
        v119.size.double height = v90;
        double v54 = v105;
        double v85 = CGRectGetMidY(v119) - v105;
        goto LABEL_57;
      }
      double v53 = v103;
      double v54 = v105;
LABEL_48:
      if (a6)
      {
        double v85 = a6[1];
        goto LABEL_52;
      }
      double v86 = *MEMORY[0x1E4F1DB30];
      double v85 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
LABEL_57:
      *(double *)a1 = v53 + v86;
      *(double *)(a1 + 8) = v54 + v85;
      double v92 = v55 + v86;
      goto LABEL_58;
    }
  }
  else
  {
    id v58 = 0;
  }
  int v60 = v58;
  id v58 = +[UIWindow _applicationKeyWindow];

  uint64_t v61 = [v58 firstResponder];
  if (v61)
  {
    id v59 = (id)v61;
    goto LABEL_42;
  }
  id v59 = v58;
  id v58 = v59;
  if (v59) {
    goto LABEL_42;
  }
  if (!a5) {
    goto LABEL_48;
  }
LABEL_44:
  double v86 = *(double *)(a5 + 408);
  double v85 = *(double *)(a5 + 416);
  if (!a6) {
    goto LABEL_57;
  }
  *a6 = v86;
  a6[1] = v85;
LABEL_52:
  double v91 = *a6;
  *(double *)a1 = v53 + *a6;
  *(double *)(a1 + 8) = v54 + v85;
  double v92 = v55 + v91;
LABEL_58:
  *(double *)(a1 + 16) = v92;
  *(double *)(a1 + 24) = v56 + v85;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a1;

LABEL_59:
}

id _UIEventHIDPathAttributesForChild(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t IntegerValue = IOHIDEventGetIntegerValue();
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v3 = objc_msgSend(v1, "pathAttributes", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if ([v8 pathIndex] == IntegerValue)
        {
          id v9 = v8;
          goto LABEL_11;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  id v9 = 0;
LABEL_11:

  return v9;
}

BOOL _EventWindowExpectsExternalTouchInput(void *a1)
{
  id v1 = [a1 traitCollection];
  uint64_t v2 = [v1 userInterfaceIdiom];

  return (v2 & 0xFFFFFFFFFFFFFFFELL) == 2;
}

double _UIScreenCornerRadiusForTypeIgnoringZoom(unint64_t a1)
{
  unint64_t v1 = a1 - 6;
  if (a1 - 6 < 0x2B && ((0x6B881555555uLL >> v1) & 1) != 0) {
    return dbl_186B98738[v1];
  }
  else {
    return _UIScreenCornerRadiusForType(a1);
  }
}

void sub_1856059E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __UISceneEffectiveClientSettings(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 22);

  if (!WeakRetained) {
    return (id)[a1[8] clientSettings];
  }
  __UISceneEffectiveClientSettings(WeakRetained);
  return (id)[a1 _fixupInheritedClientSettings:(id)objc_claimAutoreleasedReturnValue()];
}

double _UIConvertRectFromOrientationToOrientation(uint64_t a1, uint64_t a2, double result, double a4, double a5, double a6, double a7, double a8)
{
  if (a1 != a2)
  {
    v10[8] = v8;
    v10[9] = v9;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = ___UIConvertRectFromOrientationToOrientation_block_invoke;
    v10[3] = &__block_descriptor_64_e30__CGPoint_dd_24__0_CGPoint_dd_8l;
    *(double *)&void v10[4] = a7;
    *(double *)&v10[5] = a8;
    v10[6] = a1;
    v10[7] = a2;
    return _UIRectTransformByTransformingCorners((uint64_t)v10, result, a4, a5, a6);
  }
  return result;
}

void sub_18560AAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

double UIPixelBoundaryOffset(int a1, double a2, double a3)
{
  double v4 = a3;
  if (a3 == 0.0)
  {
    uint64_t v6 = +[UIScreen mainScreen];
    [v6 scale];
    double v4 = v7;
  }
  double v8 = ceil(v4 * a2);
  double v9 = floor(v4 * a2);
  if (a1) {
    double v9 = v8;
  }
  return v9 / v4;
}

id _UITableViewSubviewToMoveForView(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (_IsKindOfUITableViewCell(v1))
  {
    id v3 = v1;
    double v4 = [v3 _containerView];
    uint64_t v5 = v4;
    id v2 = v3;
    if (v4)
    {
      id v2 = v4;
    }
  }

  return v2;
}

void std::__hash_table<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::__unordered_map_hasher<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::__unordered_map_hasher<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_18560ECBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  double v9 = v7[5].__vftable;
  if (v9)
  {
    v7[5].__shared_owners_ = (uint64_t)v9;
    operator delete(v9);
  }
  std::vector<_UICollectionViewRTreeElement>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  shared_weak_owners = (std::__shared_weak_count *)v7[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  long long v11 = (std::__shared_weak_count *)v7[2].__vftable;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  std::__shared_weak_count::~__shared_weak_count(v7);
  operator delete(v12);

  _Unwind_Resume(a1);
}

void _UIRTreeContainerNode<_UICollectionViewRTreeElement>::commonInit(int64x2_t *a1)
{
  a1[8].i64[0] = 0;
  a1[8].i64[1] = 0;
  a1[7] = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v2 = (float64x2_t *)a1[5].i64[1];
  id v3 = (char *)a1[6].i64[0];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[4].i64[1] - a1[4].i64[0]) >> 3) != (v3 - (char *)v2) >> 5)
  {
    long long v12 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v13 = [NSString stringWithUTF8String:"void _UIRTreeContainerNode<_UICollectionViewRTreeElement>::commonInit() [T = _UICollectionViewRTreeElement]"];
    [v12 handleFailureInFunction:v13, @"_UIRTree.mm", 206, @"Invalid parameter not satisfying: %@", @"_childFrames.size() == _childElements.size()" file lineNumber description];

    uint64_t v2 = (float64x2_t *)a1[5].i64[1];
    id v3 = (char *)a1[6].i64[0];
  }
  if (v2 == (float64x2_t *)v3)
  {
    double v9 = (uint64_t *)a1[2].i64[1];
    uint64_t v10 = (uint64_t *)a1[3].i64[0];
    if (v9 == v10) {
      return;
    }
    float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
    float64x2_t v5 = 0uLL;
    do
    {
      float64x2_t v14 = v5;
      float64x2_t v15 = v4;
      uint64_t v11 = *v9;
      v9 += 2;
      _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v16, v11);
      float64x2_t v4 = vminnmq_f64(v15, v16[0]);
      float64x2_t v5 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v15, v14), vaddq_f64(v16[0], v16[1])), v4);
    }
    while (v9 != v10);
  }
  else
  {
    float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
    float64x2_t v5 = 0uLL;
    do
    {
      float64x2_t v7 = *v2;
      float64x2_t v6 = v2[1];
      v2 += 2;
      float64x2_t v8 = vaddq_f64(v4, v5);
      float64x2_t v4 = vminnmq_f64(v4, v7);
      float64x2_t v5 = vsubq_f64(vmaxnmq_f64(v8, vaddq_f64(v7, v6)), v4);
    }
    while (v2 != (float64x2_t *)v3);
  }
  a1[7] = (int64x2_t)v4;
  a1[8] = (int64x2_t)v5;
}

void sub_18560EE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UICollectionViewCompositionalLayoutShouldDeferResolvesUntilQueried()
{
  uint64_t result = dyld_program_sdk_at_least();
  if (result)
  {
    LODWORD(result) = _UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_CompositionalLayoutDeferResolveToQueryTime, @"CompositionalLayoutDeferResolveToQueryTime");
    if (byte_1EB256ECC) {
      return 1;
    }
    else {
      return result;
    }
  }
  return result;
}

void sub_185610218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::__unordered_map_hasher<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      id v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

__CFString *_UICollectionViewLayoutInvalidationContextIntentDescription(unint64_t a1)
{
  if (a1 > 0xF) {
    return @"Unknown";
  }
  else {
    return off_1E52E6358[a1];
  }
}

id _UIBarHairlineShadowColorForBarStyle(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 2) {
    +[UIColor _systemChromeShadowColor];
  }
  else {
  id v1 = +[UIColor _barStyleBlackHairlineShadowColor];
  }
  return v1;
}

uint64_t _UIAncestorViewIsInTransition(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if ([v3 _isInTransitionBlock])
  {
    uint64_t v5 = 1;
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    float64x2_t v6 = objc_msgSend(v3, "subviews", 0);
    uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v14;
      while (2)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v13 + 1) + 8 * i);
          if (!v4 || ([v4 isDescendantOfView:*(void *)(*((void *)&v13 + 1) + 8 * i)] & 1) != 0)
          {
            uint64_t v5 = _UIAncestorViewIsInTransition(v11, v4);
            goto LABEL_15;
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
        uint64_t v5 = 0;
        if (v8) {
          continue;
        }
        break;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
LABEL_15:
  }
  return v5;
}

void sub_185615B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  __destructor_8_s8_s16_s24_s80((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_185617168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UISheetLayoutInfoDirtyDescendantHiddenAncestorSheetIDs(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1[1];
  if ((v2 & 8) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFFFFF7;
    uint64_t v5 = v1;
    uint64_t v3 = [v1 _parentLayoutInfo];
    id v4 = (void *)v3;
    if (v3) {
      _UISheetLayoutInfoDirtyDescendantHiddenAncestorSheetIDs(v3);
    }
    _UISheetLayoutInfoDirtyHidingUnderneathDescendant(v5);

    id v1 = v5;
  }
}

void _UISheetLayoutInfoDirtyHidingUnderneathDescendant(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x10) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFFEFLL;
    uint64_t v2 = a1;
    id v3 = [v2 _parentLayoutInfo];
    if (v3) {
      _UISheetLayoutInfoDirtyProposedDepthLevelIncrement(v3);
    }
    _UISheetLayoutInfoDirtyHidingUnderneathDescendantForDepthLevel(v2);
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v2);
    _UISheetLayoutInfoDirtyOffsetAdjustment(v2);
    _UISheetLayoutInfoDirtyPercentDimmedFromOffset(v2);
    _UISheetLayoutInfoDirtyModelDimmingEnabled(v2);
  }
}

void _UISheetLayoutInfoDirtyEffectiveKeyboardFrame(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x200000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFDFFFFFLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyStackAlignmentFrame(v2);
    _UISheetLayoutInfoDirtyActiveDetents(v2);
    id v4 = [v2 _parentLayoutInfo];

    id v3 = v4;
    if (v4)
    {
      _UISheetLayoutInfoDirtyEffectiveKeyboardFrame(v4);
      id v3 = v4;
    }
  }
}

void _UISheetLayoutInfoDirtyAnyDescendantDragging(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x40) != 0)
  {
    a1[5] = v1 & 0xFFFFFFBF;
    uint64_t v2 = a1;
    id v4 = [v2 _parentLayoutInfo];
    if (v4) {
      _UISheetLayoutInfoDirtyAnyDescendantDragging(v4);
    }
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyAlpha(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x40000) != 0)
  {
    a1[5] = v1 & 0xFFFBFFFF;
    uint64_t v2 = a1;
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoResolvedDetentValue(double a1, double a2, double a3, double a4, double a5, uint64_t a6, int a7)
{
  double v7 = a2;
  if (a7) {
    CGRectGetMinY(*(CGRect *)&v7);
  }
  else {
    CGRectGetMaxY(*(CGRect *)&v7);
  }
}

void _UISheetLayoutInfoDirtyInverted(void *a1)
{
  int v1 = a1;
  uint64_t v2 = v1[1];
  if ((v2 & 0x20000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFDFFFFLL;
    float64x2_t v6 = v1;
    _UISheetLayoutInfoDirtyPercentFullHeight(v1);
    _UISheetLayoutInfoDirtyStackAlignmentFrame(v6);
    _UISheetLayoutInfoDirtyDismissOffset(v6);
    _UISheetLayoutInfoDirtyRawCurrentOffset(v6);
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v6);
    _UISheetLayoutInfoDirtyOffsetAdjustment(v6);
    _UISheetLayoutInfoDirtyActiveDetents(v6);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMinimumOffset(v6);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMaximumOffset(v6);
    _UISheetLayoutInfoDirtyUntransformedFrame(v6);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v6);
    _UISheetLayoutInfoDirtyCornerRadii(v6);
    _UISheetLayoutInfoDirtyScrollInteractionEnabled(v6);
    _UISheetLayoutInfoDirtyShouldDimmingIgnoreTouches(v6);
    id v3 = [v6 _parentLayoutInfo];
    id v4 = v3;
    if (v3)
    {
      _UISheetLayoutInfoDirtyNonFullHeightOffset(v3);
      _UISheetLayoutInfoDirtyOffsetAdjustment(v4);
    }
    uint64_t v5 = [v6 _delegate];
    [v5 _sheetLayoutInfoDidInvalidateOutput:v6];

    int v1 = v6;
  }
}

void _UISheetLayoutInfoDirtyRubberBandExtentBeyondMinimumOffset(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x80000000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFF7FFFFFFFLL;
    uint64_t v2 = [a1 _rubberBandExtentBeyondMinimumOffsetWasInvalidated];
    if (v2)
    {
      id v3 = v2;
      v2[2]();
      uint64_t v2 = v3;
    }
  }
}

void _UISheetLayoutInfoDirtyRubberBandExtentBeyondMaximumOffset(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x100000000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFEFFFFFFFFLL;
    uint64_t v2 = [a1 _rubberBandExtentBeyondMaximumOffsetWasInvalidated];
    if (v2)
    {
      id v3 = v2;
      v2[2]();
      uint64_t v2 = v3;
    }
  }
}

void _UISheetLayoutInfoDirtyRawCurrentOffset(_DWORD *a1)
{
  int v1 = a1[5];
  if (v1)
  {
    a1[5] = v1 & 0xFFFFFFFE;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyCurrentOffset(v2);
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);
  }
}

void _UISheetLayoutInfoDirtyUntransformedFrame(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x100) != 0)
  {
    a1[5] = v1 & 0xFFFFFEFF;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyHostedUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyTouchInsets(v2);
    _UISheetLayoutInfoDirtyCornerRadii(v2);
    _UISheetLayoutInfoDirtyTransform(v2);
    _UISheetLayoutInfoDirtyShouldPresentedViewControllerControlStatusBarAppearance(v2);
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateUntransformedFrame:v2];
  }
}

void _UISheetLayoutInfoDirtyActiveDetents(void *a1)
{
  int v1 = a1;
  uint64_t v2 = v1[1];
  if ((v2 & 0x8000000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFF7FFFFFFLL;
    uint64_t v8 = v1;
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v1);
    id v3 = v8;
    uint64_t v4 = v8[1];
    if ((v4 & 0x10000000) != 0)
    {
      v8[1] = v4 & 0xFFFFFFFFEFFFFFFFLL;
      if ((v4 & 0x20000000) != 0) {
        v8[1] = v4 & 0xFFFFFFFFCFFFFFFFLL;
      }
    }

    uint64_t v5 = v8[1];
    if ((v5 & 0x20000000) != 0) {
      v8[1] = v5 & 0xFFFFFFFFDFFFFFFFLL;
    }
    _UISheetLayoutInfoDirtyIndexOfCurrentActiveOrDismissDetent(v3);
    _UISheetLayoutInfoDirtyPercentFullHeight(v3);
    if (v3[4])
    {
      v3[4] = 0;
      float64x2_t v6 = v3;
      _UISheetLayoutInfoDirtyCurrentOffset(v6);
      _UISheetLayoutInfoDirtyOffsetAdjustment(v6);
      _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v6);
    }
    _UISheetLayoutInfoDirtyPercentPresented(v3);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMinimumOffset(v3);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMaximumOffset(v3);
    _UISheetLayoutInfoDirtyUntransformedFrame(v3);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v3);
    _UISheetLayoutInfoDirtyPercentDimmedFromOffset(v3);
    _UISheetLayoutInfoDirtyInteractionEnabled(v3);
    _UISheetLayoutInfoDirtyExpanded(v3);
    _UISheetLayoutInfoDirtyModelDimmingEnabled(v3);
    double v7 = [v3 _delegate];
    [v7 _sheetLayoutInfoDidInvalidateDetentValues:v3];

    int v1 = v8;
  }
}

void _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x400) != 0)
  {
    a1[5] = v1 & 0xFFFFFBFF;
    uint64_t v2 = a1;
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyPercentFullHeight(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x200) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFDFFLL;
    uint64_t v2 = a1;
    id v3 = [v2 _parentLayoutInfo];
    if (v3) {
      _UISheetLayoutInfoDirtyProposedDepthLevelIncrement(v3);
    }
    _UISheetLayoutInfoDirtyDepthLevel(v2);
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v2);
    _UISheetLayoutInfoDirtyOffsetAdjustment(v2);
  }
}

void _UISheetLayoutInfoDirtyInteractionEnabled(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x80000) != 0)
  {
    a1[5] = v1 & 0xFFF7FFFF;
    uint64_t v2 = a1;
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyStackAlignmentFrame(void *a1)
{
  int v1 = a1;
  uint64_t v2 = v1[1];
  if ((v2 & 0x400000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFBFFFFFLL;
    uint64_t v8 = v1;
    _UISheetLayoutInfoDirtyPercentFullHeight(v1);
    _UISheetLayoutInfoDirtyParentDepthLevel(v8);
    _UISheetLayoutInfoDirtyStacksWithChild(v8);
    _UISheetLayoutInfoDirtyFullHeightUntransformedFrame(v8);
    id v3 = [v8 _parentLayoutInfo];
    uint64_t v4 = v3;
    if (v3) {
      _UISheetLayoutInfoDirtyStacksWithChild(v3);
    }
    uint64_t v5 = [v8 _childLayoutInfo];
    float64x2_t v6 = v5;
    if (v5)
    {
      _UISheetLayoutInfoDirtyParentDepthLevel(v5);
      double v7 = [v6 _delegate];
      [v7 _sheetLayoutInfoDidInvalidateOutput:v8];
    }
    _UISheetLayoutInfoDirtyTransform(v8);

    int v1 = v8;
  }
}

void _UISheetLayoutInfoDirtyCurrentOffset(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 2) != 0)
  {
    a1[5] = v1 & 0xFFFFFFFD;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v2);
    _UISheetLayoutInfoDirtyPercentFullHeight(v2);
    _UISheetLayoutInfoDirtyPercentPresented(v2);
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyPercentDimmedFromOffset(v2);
    _UISheetLayoutInfoDirtyShouldDimmingIgnoreTouches(v2);
    _UISheetLayoutInfoDirtyExpanded(v2);
  }
}

void _UISheetLayoutInfoDirtyShouldDimmingIgnoreTouches(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x400000) != 0)
  {
    a1[5] = v1 & 0xFFBFFFFF;
    uint64_t v2 = a1;
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyNonFullHeightOffset(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 8) != 0)
  {
    a1[5] = v1 & 0xFFFFFFF7;
    uint64_t v2 = [a1 _parentLayoutInfo];
    if (v2)
    {
      id v3 = v2;
      _UISheetLayoutInfoDirtyNonFullHeightOffset();
      _UISheetLayoutInfoDirtyOffsetAdjustment(v3);
      uint64_t v2 = v3;
    }
  }
}

void _UISheetLayoutInfoDirtyExpanded(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 4) != 0)
  {
    a1[5] = v1 & 0xFFFFFFFB;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v2);
    _UISheetLayoutInfoDirtyCornerRadii(v2);
  }
}

void _UISheetLayoutInfoDirtyPercentDimmed(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x10000) != 0)
  {
    a1[5] = v1 & 0xFFFEFFFF;
    uint64_t v2 = a1;
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyMargins(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x80) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFF7FLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyStackAlignmentFrame(v2);
    _UISheetLayoutInfoDirtyShouldDimmingIgnoreTouches(v2);
  }
}

void _UISheetLayoutInfoDirtyPercentDimmedFromOffset(void *a1)
{
  uint64_t v1 = a1;
  int v2 = v1[5];
  if ((v2 & 0x8000) != 0)
  {
    v1[5] = v2 & 0xFFFF7FFF;
    uint64_t v8 = v1;
    _UISheetLayoutInfoDirtyPercentDimmed(v1);
    uint64_t v3 = [v8 _parentLayoutInfo];
    uint64_t v4 = (_DWORD *)v3;
    if (v3)
    {
      _UISheetLayoutInfoDirtyPercentDimmedFromOffset(v3);
      _UISheetLayoutInfoDirtyPercentDimmed(v4);
      _UISheetLayoutInfoDirtyGrabberAlpha(v4);
    }
    _UISheetLayoutInfoDirtyShadowOpacity(v8);
    int v5 = v8[5];
    if ((v5 & 0x1000000) != 0)
    {
      v8[5] = v5 & 0xFEFFFFFF;
      float64x2_t v6 = v8;
      double v7 = [v6 _delegate];
      [v7 _sheetLayoutInfoDidInvalidateOutput:v6];
    }
    uint64_t v1 = v8;
  }
}

void _UISheetLayoutInfoDirtyPercentPresented(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x20) != 0)
  {
    a1[5] = v1 & 0xFFFFFFDF;
    int v2 = a1;
    _UISheetLayoutInfoDirtyCornerRadii(v2);
    _UISheetLayoutInfoDirtyShadowOpacity(v2);
  }
}

void _UISheetLayoutInfoDirtyDepthLevel(void *a1)
{
  int v1 = a1;
  uint64_t v2 = v1[1];
  if ((v2 & 0x2000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFFDFFFLL;
    float64x2_t v6 = v1;
    uint64_t v3 = [v1 _childLayoutInfo];
    uint64_t v4 = v3;
    if (v3)
    {
      _UISheetLayoutInfoDirtyParentDepthLevel(v3);
      int v5 = [v4 _delegate];
      [v5 _sheetLayoutInfoDidInvalidateOutput:v6];
    }
    _UISheetLayoutInfoDirtyPercentFullScreen(v6);
    _UISheetLayoutInfoDirtyFullHeightUntransformedFrameForDepthLevel(v6);
    _UISheetLayoutInfoDirtyCornerRadii(v6);
    _UISheetLayoutInfoDirtyTransform(v6);

    int v1 = v6;
  }
}

void _UISheetLayoutInfoDirtyCornerRadii(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x1000) != 0)
  {
    a1[5] = v1 & 0xFFFFEFFF;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyHostedCornerRadii(v2);
    id v4 = [v2 _parentLayoutInfo];

    uint64_t v3 = v4;
    if (v4)
    {
      _UISheetLayoutInfoDirtyCornerRadii(v4);
      uint64_t v3 = v4;
    }
  }
}

void _UISheetLayoutInfoDirtyTransform(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x4000) != 0)
  {
    a1[5] = v1 & 0xFFFFBFFF;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyShouldPresentedViewControllerControlStatusBarAppearance(v2);
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyFullHeightUntransformedFrameForDepthLevel(void *a1)
{
  int v1 = a1;
  uint64_t v2 = v1[1];
  if ((v2 & 0x2000000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFDFFFFFFLL;
    float64x2_t v6 = v1;
    uint64_t v3 = [v1 _childLayoutInfo];
    id v4 = (void *)v3;
    if (v3)
    {
      _UISheetLayoutInfoDirtyFullHeightUntransformedFrameForDepthLevel(v3);
      int v5 = [v4 _delegate];
      [v5 _sheetLayoutInfoDidInvalidateOutput:v6];
    }
    _UISheetLayoutInfoDirtyTransform(v6);

    int v1 = v6;
  }
}

void _UISheetLayoutInfoDirtyShouldPresentedViewControllerControlStatusBarAppearance(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x200000) != 0)
  {
    a1[5] = v1 & 0xFFDFFFFF;
    uint64_t v2 = a1;
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyEdgeAttached(void *a1)
{
  int v1 = a1;
  uint64_t v2 = v1[1];
  if ((v2 & 0x4000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFFBFFFLL;
    id v4 = v1;
    _UISheetLayoutInfoDirtyMargins(v1);
    _UISheetLayoutInfoDirtyHidingUnderneathDescendantForDepthLevel(v4);
    _UISheetLayoutInfoDirtyDepthLevel(v4);
    _UISheetLayoutInfoDirtyDismissesHorizontally(v4);
    _UISheetLayoutInfoDirtyInverted(v4);
    _UISheetLayoutInfoDirtyStackAlignmentFrame(v4);
    uint64_t v3 = v4[1];
    if ((v3 & 0x200000000) != 0)
    {
      v4[1] = v3 & 0xFFFFFFFDFFFFFFFFLL;
      _UISheetLayoutInfoDirtyActiveDetents(v4);
    }
    _UISheetLayoutInfoDirtyActiveDetents(v4);
    _UISheetLayoutInfoDirtyUntransformedFrame(v4);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v4);
    _UISheetLayoutInfoDirtyCornerRadii(v4);
    _UISheetLayoutInfoDirtyTransform(v4);
    _UISheetLayoutInfoDirtyPercentDimmed(v4);
    _UISheetLayoutInfoDirtyShouldDimmingIgnoreTouches(v4);
    _UISheetLayoutInfoDirtyExpanded(v4);
    int v1 = v4;
  }
}

void _UISheetLayoutInfoDirtyTouchInsets(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x800) != 0)
  {
    a1[5] = v1 & 0xFFFFF7FF;
    uint64_t v2 = a1;
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyOffsetAdjustment(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x10) != 0)
  {
    a1[5] = v1 & 0xFFFFFFEF;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v2);
  }
}

void _UISheetLayoutInfoDirtyShadowOpacity(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x20000) != 0)
  {
    a1[5] = v1 & 0xFFFDFFFF;
    uint64_t v2 = a1;
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyPreferredSize(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x100) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFEFFLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyEdgeAttached(v2);
    _UISheetLayoutInfoDirtyStackAlignmentFrame(v2);
  }
}

void _UISheetLayoutInfoDirtyPercentFullScreen(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x100000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFEFFFFFLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyCornerRadii(v2);
    _UISheetLayoutInfoDirtyGrabberAlpha(v2);
    _UISheetLayoutInfoDirtyInteractionEnabled(v2);
    _UISheetLayoutInfoDirtyPercentDimmed(v2);
    id v4 = [v2 _childLayoutInfo];

    id v3 = v4;
    if (v4)
    {
      _UISheetLayoutInfoDirtyPercentDimmed(v4);
      id v3 = v4;
    }
  }
}

void _UISheetLayoutInfoDirtyScalesDownBehindDescendants(void *a1)
{
  id v1 = a1;
  _UISheetLayoutInfoDirtyProposedDepthLevel(v1);
  id v3 = [v1 _childLayoutInfo];

  uint64_t v2 = v3;
  if (v3)
  {
    _UISheetLayoutInfoDirtyPercentDimmed(v3);
    uint64_t v2 = v3;
  }
}

void _UISheetLayoutInfoDirtyProposedDepthLevel(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1[1];
  if ((v2 & 0x1000) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFFEFFFLL;
    id v5 = v1;
    uint64_t v3 = [v1 _parentLayoutInfo];
    id v4 = (void *)v3;
    if (v3) {
      _UISheetLayoutInfoDirtyProposedDepthLevel(v3);
    }
    _UISheetLayoutInfoDirtyDepthLevel(v5);

    id v1 = v5;
  }
}

void _UISheetLayoutInfoDirtyFullHeightUntransformedFrame(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x1000000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFEFFFFFFLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyFullHeightUntransformedFrameForDepthLevel(v2);
    _UISheetLayoutInfoDirtyRawCurrentOffset(v2);
    _UISheetLayoutInfoDirtyActiveDetents(v2);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMinimumOffset(v2);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMaximumOffset(v2);
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v2);
    _UISheetLayoutInfoDirtyShouldDimmingIgnoreTouches(v2);
  }
}

void _UISheetLayoutInfoDirtyMarginsWhenFloating(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x40) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFFBFLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyMargins(v2);
    _UISheetLayoutInfoDirtyEdgeAttached(v2);
  }
}

void _UISheetLayoutInfoDirtyHostedUntransformedFrame(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x200) != 0)
  {
    a1[5] = v1 & 0xFFFFFDFF;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyTouchInsets(v2);
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyForcedFullScreen(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x40000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFBFFFFLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyFunctionallyFullScreen(v2);
    _UISheetLayoutInfoDirtyPercentFullScreen(v2);
  }
}

void _UISheetLayoutInfoDirtyGrabberAlpha(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x2000000) != 0)
  {
    a1[5] = v1 & 0xFDFFFFFF;
    uint64_t v2 = a1;
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyModelDimmingEnabled(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x800000) != 0)
  {
    a1[5] = v1 & 0xFF7FFFFF;
    uint64_t v2 = a1;
    id v4 = [v2 _parentLayoutInfo];
    if (v4) {
      _UISheetLayoutInfoDirtyModelDimmingEnabled(v4);
    }
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyHostedCornerRadii(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x2000) != 0)
  {
    a1[5] = v1 & 0xFFFFDFFF;
    uint64_t v2 = a1;
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyDismissOffset(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x4000000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFBFFFFFFLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyPercentFullHeight(v2);
    _UISheetLayoutInfoDirtyActiveDetents(v2);
    _UISheetLayoutInfoDirtyCurrentOffset(v2);
    _UISheetLayoutInfoDirtyPercentPresented(v2);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v2);
    _UISheetLayoutInfoDirtyPercentDimmedFromOffset(v2);
  }
}

void _UISheetLayoutInfoDirtyFunctionallyFullScreen(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x80000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFF7FFFFLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyPercentFullHeight(v2);
    _UISheetLayoutInfoDirtyFullHeightUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyActiveDetents(v2);
    _UISheetLayoutInfoDirtyExpanded(v2);
  }
}

void _UISheetLayoutInfoDirtyParentDepthLevel(void *a1)
{
  id v1 = a1;
  _UISheetLayoutInfoDirtyDepthLevel();
  _UISheetLayoutInfoDirtyFullHeightUntransformedFrameForDepthLevel(v1);
}

void _UISheetLayoutInfoDirtyHidingUnderneathDescendantForDepthLevel(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x400) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFBFFLL;
    uint64_t v2 = a1;
    id v3 = [v2 _parentLayoutInfo];
    if (v3) {
      _UISheetLayoutInfoDirtyProposedDepthLevelIncrement(v3);
    }
    _UISheetLayoutInfoDirtyProposedDepthLevel(v2);
    _UISheetLayoutInfoDirtyDepthLevel(v2);
  }
}

void _UISheetLayoutInfoDirtyStacksWithChild(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x800000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFF7FFFFFLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyProposedDepthLevel(v2);
    _UISheetLayoutInfoDirtyPercentDimmed(v2);
    id v4 = [v2 _childLayoutInfo];

    id v3 = v4;
    if (v4)
    {
      _UISheetLayoutInfoDirtyPercentDimmed(v4);
      id v3 = v4;
    }
  }
}

void _UISheetLayoutInfoDirtyScrollInteractionEnabled(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x100000) != 0)
  {
    a1[5] = v1 & 0xFFEFFFFF;
    uint64_t v2 = a1;
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyDismissesHorizontally(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x8000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFF7FFFLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyEffectiveDismissible(v2);
    _UISheetLayoutInfoDirtyRawCurrentOffset(v2);
    _UISheetLayoutInfoDirtyIndexOfCurrentActiveOrDismissDetent(v2);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMinimumOffset(v2);
    _UISheetLayoutInfoDirtyRubberBandExtentBeyondMaximumOffset(v2);
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyFrameOfPresentedViewInContainerView(v2);
    _UISheetLayoutInfoDirtyInteractionEnabled(v2);
  }
}

void _UISheetLayoutInfoDirtyIndexOfCurrentActiveOrDismissDetent(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x40000000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFBFFFFFFFLL;
    uint64_t v2 = [a1 _indexOfCurrentActiveOrDismissDetentWasInvalidated];
    if (v2)
    {
      id v3 = v2;
      v2[2]();
      uint64_t v2 = v3;
    }
  }
}

void _UISheetLayoutInfoDirtyEffectiveDismissible(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x10000) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFEFFFFLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyCurrentOffset(v2);
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v2);
    _UISheetLayoutInfoDirtyActiveDetents(v2);
  }
}

void _UISheetLayoutInfoDirtyProposedDepthLevelIncrement(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1[1];
  if ((v2 & 0x800) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFFF7FFLL;
    id v5 = v1;
    uint64_t v3 = [v1 _parentLayoutInfo];
    id v4 = (void *)v3;
    if (v3) {
      _UISheetLayoutInfoDirtyProposedDepthLevelIncrement(v3);
    }
    _UISheetLayoutInfoDirtyProposedDepthLevel(v5);

    uint64_t v1 = v5;
  }
}

void sub_18561DDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGAffineTransform *_UIScaleTransformForAspectFitOfSizeInTargetSize@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  return _UIScaleTransformForAspectFitOrFillOfSizeInTargetSize((CGAffineTransform *)1, a1, a2, a3, a4, a5);
}

id UIApplicationSceneDeactivationReasonMaskDescriptionComponents(int a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  for (unint64_t i = 0; i != 19; ++i)
  {
    if (((1 << i) & a1) != 0)
    {
      id v4 = UIApplicationSceneDeactivationReasonDescription(i);
      if (v4) {
        [v2 addObject:v4];
      }
    }
  }
  return v2;
}

id _GetTextFieldClearButtonWithCustomColorContrastSettings(void *a1, uint64_t a2, void *a3, void *a4, void *a5, int a6, char a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  if (!_clearButtonImages)
  {
    uint64_t v16 = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:6];
    uint64_t v17 = (void *)_clearButtonImages;
    _clearButtonImages = v16;
  }
  uint64_t v18 = @"UITextFieldClearButton";
  if (a2 == 3) {
    uint64_t v18 = @"UITextFieldClearButtonLarger";
  }
  if (a2 == 2) {
    double v19 = @"UITextFieldStarkClearButton";
  }
  else {
    double v19 = v18;
  }
  double v34 = _UIImageWithName(v19);
  if (v13)
  {
    id v20 = v13;
    goto LABEL_35;
  }
  if ((a7 & 1) != 0
    || dyld_program_sdk_at_least()
    && (_AXDarkenSystemColors() || _AXSEnhanceBackgroundContrastEnabled()))
  {
    if (a6 && _AXDarkenSystemColors())
    {
      double v21 = +[UIColor systemGrayColor];
      double v22 = +[UIColor systemDarkGrayColor];
    }
    else
    {
      double v21 = +[UIColor systemLightGrayColor];
      double v22 = +[UIColor systemGrayColor];
    }
  }
  else if ([v15 userInterfaceIdiom] == 5)
  {
    double v21 = +[UIColor tertiaryLabelColor];
    double v22 = +[UIColor secondaryLabelColor];
  }
  else
  {
    if ([v15 userInterfaceStyle] == 2)
    {
      double v21 = +[UIColor colorWithWhite:1.0 alpha:0.1];
      double v23 = 1.0;
    }
    else
    {
      double v21 = +[UIColor colorWithWhite:0.0 alpha:0.1];
      double v23 = 0.0;
    }
    double v22 = +[UIColor colorWithWhite:v23 alpha:0.2];
  }
  long long v24 = v22;
  if (a1 != (void *)1)
  {
    if (a1 == (void *)2) {
      id v25 = v21;
    }
    else {
      id v25 = v22;
    }
    id v20 = v25;
    goto LABEL_34;
  }
  if (v14)
  {
    a1 = +[UIColor systemBlueColor];
    if (([v14 isEqual:a1] & 1) == 0)
    {
      id v20 = v14;
LABEL_33:

      goto LABEL_34;
    }
  }
  id v20 = +[UIColor colorWithRed:0.047 green:0.455 blue:0.867 alpha:1.0];
  if (v14) {
    goto LABEL_33;
  }
LABEL_34:

LABEL_35:
  uint64_t v26 = +[UITraitCollection _currentTraitCollectionIfExists]();
  +[UITraitCollection setCurrentTraitCollection:v15];
  id v27 = v20;
  int v28 = -[_UITextFieldClearButtonCacheKey initWithVariant:color:]([_UITextFieldClearButtonCacheKey alloc], "initWithVariant:color:", a2, [v27 CGColor]);
  uint64_t v29 = [(id)_clearButtonImages objectForKey:v28];
  if (v29) {
    goto LABEL_43;
  }
  int v30 = _TextFieldScalesClearButton();
  if (a2 == 2 || !v30)
  {
    [v34 size];
    uint64_t v31 = +[UIImage _tintedImageForSize:withTint:effectsImage:maskImage:style:](UIImage, "_tintedImageForSize:withTint:effectsImage:maskImage:style:", v27, 0, v34, 0);
LABEL_41:
    uint64_t v29 = (void *)v31;
    if (!v31) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if ([v15 userInterfaceIdiom] == 6)
  {
    uint64_t v31 = +[UIImage systemImageNamed:@"xmark"];
    goto LABEL_41;
  }
  double v33 = +[UIImage systemImageNamed:@"xmark.circle.fill"];
  uint64_t v29 = [v33 imageWithTintColor:v27 renderingMode:1];

  if (v29) {
LABEL_42:
  }
    [(id)_clearButtonImages setObject:v29 forKey:v28];
LABEL_43:
  +[UITraitCollection setCurrentTraitCollection:v26];

  return v29;
}

id _UIImageWithName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    uint64_t v2 = _UIImageWithNameAndTraitCollection(v1, 0);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void _setGestureKeyboardFlag(void *a1, uint64_t a2)
{
  uint64_t v3 = NSNumber;
  id v4 = a1;
  id v5 = [v3 numberWithInteger:a2];
  objc_setAssociatedObject(v4, &s_gestureKeyboardKey, v5, (void *)0x301);
}

void sub_18562C160(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 104));
  _Unwind_Resume(a1);
}

uint64_t _commonInit(void *a1, uint64_t a2, char a3)
{
  if (a3)
  {
    uint64_t v5 = [a1 _beginRequiringIgnoresHIDEdgeFlagsForReason:@"Initialization Requirement"];
    float64x2_t v6 = (void *)a1[61];
    a1[61] = v5;
  }
  double v7 = objc_alloc_init(_UISEGestureFeatureSettings);
  uint64_t v8 = (void *)a1[56];
  a1[56] = v7;
  uint64_t v9 = v7;

  uint64_t v10 = (void *)a1[58];
  a1[58] = 0;

  a1[59] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___commonInit_block_invoke;
  aBlock[3] = &__block_descriptor_40_e60____UISEGestureFeature_16__0____UISEGestureFeatureSettings__8l;
  void aBlock[4] = a2;
  uint64_t v11 = _Block_copy(aBlock);
  long long v12 = (void *)a1[57];
  a1[57] = v11;

  [(_UISEGestureFeatureSettings *)v9 hysteresis];
  double v14 = v13;

  return [a1 _setHysteresis:v14];
}

uint64_t _isContentBackSwipeEnabled()
{
  if (qword_1EB25E760 != -1) {
    dispatch_once(&qword_1EB25E760, &__block_literal_global_567);
  }
  return _MergedGlobals_23_3;
}

void sub_18562D7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18562E8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_185630114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185630200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18563031C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1856308A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *__p, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void sub_185630CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    float64x2_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v3, a2);
    double v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    long long v12 = v7;
    if (v11 != *a1)
    {
      long long v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

id sub_185630F94(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = a1;
  id v8 = sub_185630FFC((uint64_t)v6, a4);

  return v8;
}

id sub_185630FFC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(v2 + qword_1E8FB81B0[0]), sel__numberOfItemsInSection_collectionView_, a2, a1);
}

id sub_18563101C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  id v6 = sub_1856310AC((uint64_t)v4);

  return v6;
}

id sub_1856310AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(v1 + qword_1E8FB81B0[0]), sel__numberOfSectionsForCollectionView_, a1);
}

void sub_185631D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185632550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if ((unint64_t)v1 >= 0xA) {

  }
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  uint64_t v5 = v3 | 7;
  uint64_t v6 = (v3 + 48) & ~v3;
  uint64_t v7 = v6 + v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);
  return MEMORY[0x1F4186498](v0, v7, v5);
}

uint64_t objectdestroyTm_1()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB4608);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t objectdestroyTm_2()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 16);
  int v1 = *(unsigned __int8 *)(v0 + 112);
  if (v1 != 255) {
    sub_185636BB4(*(void **)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), v1);
  }
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 129, 7);
}

uint64_t objectdestroyTm_3()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1856331C0(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = (uint64_t)&v4[OBJC_IVAR___UIHoverStyle_driverCoordinator];
  swift_beginAccess();
  sub_1853B7020(v8, (uint64_t)v72, &qword_1E8FAF768);
  uint64_t v9 = v72[3];
  sub_1853B93B8((uint64_t)v72, &qword_1E8FAF768);
  if (!v9 && (a1 & 1) != 0)
  {
    uint64_t v59 = a2;
    uint64_t v60 = a3;
    uint64_t v10 = (uint64_t)&v4[OBJC_IVAR___UIHoverStyle__effect];
    swift_beginAccess();
    sub_1854B1F38(v10, (uint64_t)v65);
    uint64_t v11 = &v4[OBJC_IVAR___UIHoverStyle__shape];
    uint64_t v12 = *(void *)&v4[OBJC_IVAR___UIHoverStyle__shape + 8];
    id v57 = *(id *)&v4[OBJC_IVAR___UIHoverStyle__shape];
    uint64_t v61 = v4;
    uint64_t v13 = *(void *)&v4[OBJC_IVAR___UIHoverStyle__shape + 16];
    uint64_t v14 = *(void *)&v4[OBJC_IVAR___UIHoverStyle__shape + 24];
    uint64_t v16 = *((void *)v11 + 4);
    uint64_t v15 = *((void *)v11 + 5);
    uint64_t v17 = *((void *)v11 + 6);
    uint64_t v18 = &v61[OBJC_IVAR___UIHoverStyle_host];
    char v19 = v11[56];
    swift_beginAccess();
    sub_1853B7020((uint64_t)v18, (uint64_t)v64, &qword_1E8FAF480);
    id v58 = &v74;
    uint64_t v74 = 0;
    char v75 = -1;
    double v76 = 0;
    char v77 = 1;
    uint64_t v79 = MEMORY[0x1E4FBC868];
    sub_1854B1F38((uint64_t)v65, (uint64_t)v72);
    v72[5] = v57;
    v72[6] = v12;
    v72[7] = v13;
    v72[8] = v14;
    v72[9] = v16;
    v72[10] = v15;
    v72[11] = v17;
    char v73 = v19;
    sub_185638750(v57, v12, v13, v14, v16, v15, v17, v19);
    sub_185638750(v57, v12, v13, v14, v16, v15, v17, v19);
    sub_185636FFC((uint64_t)v64, (uint64_t)&v74);
    sub_1854B1F38((uint64_t)v65, (uint64_t)v63);
    v66[0] = v57;
    v66[1] = v12;
    v66[2] = v13;
    uint64_t v67 = v14;
    uint64_t v4 = v61;
    uint64_t v68 = v16;
    uint64_t v69 = v15;
    uint64_t v70 = v17;
    char v71 = v19;
    sub_1853B7020((uint64_t)v64, (uint64_t)v62, &qword_1E8FAF480);
    id v20 = objc_allocWithZone((Class)type metadata accessor for UIPointerHoverStyleDriver());
    double v21 = sub_185638CDC((uint64_t)v63, (uint64_t)v66, (uint64_t)v62);
    sub_1853B93B8((uint64_t)v64, &qword_1E8FAF480);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v65);
    v78 = v21;
    id v22 = objc_msgSend(v61, sel_isEnabled);
    char v77 = (char)v22;
    v21[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_isEnabled] = (_BYTE)v22;
    double v23 = *(void **)&v21[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_pointerInteraction];
    if (v23) {
      objc_msgSend(v23, sel_setEnabled_, v22);
    }
    uint64_t KeyPath = swift_getKeyPath();
    LOBYTE(v66[0]) = v77;
    MEMORY[0x1F4188790](KeyPath);
    uint64_t v55 = v25;
    double v56 = v66;
    if (*(void *)(v79 + 16))
    {
      uint64_t v26 = sub_185AFD950(v79, (void (*)(long long *))sub_185AFDDF8, (uint64_t)v54);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v79 = v26;
    }
    else
    {
      swift_release();
    }
    self;
    id v27 = (void *)swift_dynamicCastObjCClass();
    if (v27) {
      int v28 = v4;
    }
    uint64_t v29 = v76;
    id v30 = v27;

    double v76 = v27;
    swift_unknownObjectWeakAssign();
    id v31 = v30;
    sub_185637518();

    uint64_t v32 = swift_getKeyPath();
    v66[0] = v76;
    MEMORY[0x1F4188790](v32);
    uint64_t v55 = v33;
    double v56 = v66;
    uint64_t v34 = v79;
    uint64_t v35 = *(void *)(v79 + 16);
    id v37 = v36;
    if (v35)
    {
      uint64_t v38 = sub_185AFD950(v34, (void (*)(long long *))sub_185AFDE58, (uint64_t)v54);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v79 = v38;
    }
    else
    {
      swift_release();
    }
    a2 = v59;
    a3 = v60;
    double v39 = (void *)v66[0];

    sub_185633824((uint64_t)v72, (uint64_t)v66);
    swift_beginAccess();
    sub_185633938((uint64_t)v66, v8);
    swift_endAccess();
  }
  sub_1853B7020(v8, (uint64_t)v66, &qword_1E8FAF768);
  if (!v67) {
    return sub_1853B93B8((uint64_t)v66, &qword_1E8FAF768);
  }
  sub_185633824((uint64_t)v66, (uint64_t)v72);
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = a2;
  *(void *)(v40 + 24) = a3;
  double v41 = &v4[OBJC_IVAR___UIHoverStyle_driverCoordinatorQueuedActions];
  swift_beginAccess();
  double v42 = *(void **)v41;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)double v41 = v42;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    double v42 = sub_1856339A0(0, v42[2] + 1, 1, v42);
    *(void *)double v41 = v42;
  }
  unint64_t v45 = v42[2];
  unint64_t v44 = v42[3];
  if (v45 >= v44 >> 1)
  {
    double v42 = sub_1856339A0((void *)(v44 > 1), v45 + 1, 1, v42);
    *(void *)double v41 = v42;
  }
  v42[2] = v45 + 1;
  uint64_t v46 = &v42[2 * v45];
  v46[4] = sub_185633A64;
  v46[5] = v40;
  swift_endAccess();
  uint64_t v47 = OBJC_IVAR___UIHoverStyle_driverCoordinatorAccessLocked;
  if (v4[OBJC_IVAR___UIHoverStyle_driverCoordinatorAccessLocked]) {
    return sub_1856339B4((uint64_t)v72);
  }
  uint64_t v61 = v4;
  v4[OBJC_IVAR___UIHoverStyle_driverCoordinatorAccessLocked] = 1;
  int v49 = *(void **)v41;
  if (*(void *)(*(void *)v41 + 16))
  {
    uint64_t v50 = MEMORY[0x1E4FBC860];
    do
    {
      *(void *)double v41 = v50;
      uint64_t v51 = v49[2];
      if (v51)
      {
        double v52 = v49 + 5;
        do
        {
          double v53 = (void (*)(void *))*(v52 - 1);
          swift_retain();
          v53(v72);
          swift_release();
          sub_185633A08((uint64_t)v72, (uint64_t)v66);
          swift_beginAccess();
          sub_185633938((uint64_t)v66, v8);
          swift_endAccess();
          v52 += 2;
          --v51;
        }
        while (v51);
      }
      swift_bridgeObjectRelease();
      int v49 = *(void **)v41;
    }
    while (*(void *)(*(void *)v41 + 16));
  }
  uint64_t result = sub_1856339B4((uint64_t)v72);
  v61[v47] = 0;
  return result;
}

uint64_t sub_185633824(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithTake for HoverStyleDriverCoordinator(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  uint64_t v5 = a1 + 104;
  uint64_t v6 = a2 + 104;
  int v7 = *(unsigned __int8 *)(a2 + 112);
  if (v7 == 255)
  {
    *(void *)uint64_t v5 = *(void *)v6;
    *(unsigned char *)(v5 + 8) = *(unsigned char *)(v6 + 8);
  }
  else
  {
    swift_unknownObjectWeakTakeInit();
    *(unsigned char *)(a1 + 112) = (v7 & 1) != 0;
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v8;
  return a1;
}

uint64_t sub_185633938(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void *sub_1856339A0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1853BFAFC(a1, a2, a3, a4, &qword_1E8FAF518, &qword_1E8FB0170);
}

uint64_t sub_1856339B4(uint64_t a1)
{
  return a1;
}

uint64_t sub_185633A08(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_185633A64()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_1856351F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 184), 8);
  _Unwind_Resume(a1);
}

char *sub_185636878(double a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___UIShape_value;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR___UIShape_value);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___UIShape_value + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v9 = *(void *)(v3 + 40);
  uint64_t v10 = *(void *)(v3 + 48);
  char v11 = *(unsigned char *)(v3 + 56);
  uint64_t v12 = swift_allocObject();
  *(double *)(v12 + 16) = a1;
  *(double *)(v12 + 24) = a1;
  *(double *)(v12 + 32) = a1;
  *(double *)(v12 + 40) = a1;
  *(void *)(v12 + 48) = v4;
  *(void *)(v12 + 56) = v5;
  *(void *)(v12 + 64) = v6;
  *(void *)(v12 + 72) = v7;
  *(void *)(v12 + 80) = v8;
  *(void *)(v12 + 88) = v9;
  *(void *)(v12 + 96) = v10;
  *(unsigned char *)(v12 + 104) = v11;
  id v13 = objc_allocWithZone((Class)UIShape);
  sub_185636AFC(v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v14 = (char *)objc_msgSend(v13, sel_init);
  uint64_t v15 = &v14[OBJC_IVAR___UIShape_value];
  uint64_t v16 = *(void **)&v14[OBJC_IVAR___UIShape_value];
  uint64_t v17 = *(void *)&v14[OBJC_IVAR___UIShape_value + 8];
  uint64_t v18 = *(void *)&v14[OBJC_IVAR___UIShape_value + 16];
  uint64_t v19 = *(void *)&v14[OBJC_IVAR___UIShape_value + 24];
  uint64_t v20 = *(void *)&v14[OBJC_IVAR___UIShape_value + 32];
  uint64_t v21 = *(void *)&v14[OBJC_IVAR___UIShape_value + 40];
  uint64_t v22 = *(void *)&v14[OBJC_IVAR___UIShape_value + 48];
  *(void *)uint64_t v15 = v12;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  char v23 = v15[56];
  v15[56] = 4;
  sub_185636BB4(v16, v17, v18, v19, v20, v21, v22, v23);
  return v14;
}

uint64_t initializeWithCopy for HoverStyleDriverCoordinator(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  int v5 = *(unsigned __int8 *)(a2 + 96);
  if (v5 == 255)
  {
    long long v13 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v13;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  else
  {
    uint64_t v6 = *(void **)(a2 + 40);
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v8 = *(void *)(a2 + 56);
    uint64_t v9 = *(void *)(a2 + 64);
    uint64_t v10 = *(void *)(a2 + 72);
    uint64_t v11 = *(void *)(a2 + 80);
    uint64_t v12 = *(void *)(a2 + 88);
    sub_185636AFC(v6, v7, v8, v9, v10, v11, v12, *(unsigned char *)(a2 + 96));
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v11;
    *(void *)(a1 + 88) = v12;
    *(unsigned char *)(a1 + 96) = v5;
  }
  int v14 = *(unsigned __int8 *)(a2 + 112);
  if (v14 == 255)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  }
  else
  {
    swift_unknownObjectWeakCopyInit();
    *(unsigned char *)(a1 + 112) = (v14 & 1) != 0;
  }
  uint64_t v15 = *(void **)(a2 + 120);
  *(void *)(a1 + 120) = v15;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v17 = *(void **)(a2 + 136);
  uint64_t v16 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = v17;
  *(void *)(a1 + 144) = v16;
  id v18 = v15;
  id v19 = v17;
  swift_bridgeObjectRetain();
  return a1;
}

id sub_185636AFC(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  switch(a8)
  {
    case 2:
      uint64_t result = result;
      break;
    case 3:
    case 4:
    case 5:
      uint64_t result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for HoverStyleDriverCoordinator(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  int v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 != 255) {
    sub_185636BB4(*(void **)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), v2);
  }
  if (*(unsigned __int8 *)(a1 + 112) != 255) {
    swift_unknownObjectWeakDestroy();
  }

  return swift_bridgeObjectRelease();
}

void sub_185636BB4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  switch(a8)
  {
    case 2:

      break;
    case 3:
    case 4:
    case 5:
      swift_release();
      break;
    default:
      return;
  }
}

id sub_185636BF0(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 136) + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_pointerInteraction);
  if (result) {
    id result = objc_msgSend(result, sel_invalidate);
  }
  if (*(void *)(*(void *)(a1 + 144) + 16))
  {
    uint64_t v3 = sub_185636C68(*(void *)(a1 + 144));
    id result = (id)swift_bridgeObjectRelease();
    *(void *)(a1 + 144) = v3;
  }
  return result;
}

uint64_t sub_185636C68(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF300);
  uint64_t result = sub_186A1F69C();
  uint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v32 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v24 = v6;
  int64_t v25 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v26 = (void *)result;
  uint64_t v27 = result + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  int64_t v12 = v4;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v16 << 6))
  {
    uint64_t v18 = *(void *)(*(void *)(v32 + 48) + 8 * i);
    sub_1854B1F38(*(void *)(v32 + 56) + 40 * i, (uint64_t)v31);
    sub_1854B1F38((uint64_t)v31, (uint64_t)&v28);
    uint64_t v19 = v29;
    uint64_t v20 = v30;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v28, v29);
    (*(void (**)(uint64_t, uint64_t))(v20 + 136))(v19, v20);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v31);
    uint64_t v3 = v26;
    *(void *)(v27 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(void *)(v26[6] + 8 * i) = v18;
    uint64_t result = sub_1854B1F20(&v28, v26[7] + 40 * i);
    uint64_t v21 = v26[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v26[2] = v23;
    int64_t v4 = v12;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v14 >= v25) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v24 + 8 * v14);
    int64_t v16 = v4 + 1;
    if (!v15)
    {
      int64_t v16 = v4 + 2;
      if (v4 + 2 >= v25) {
        return (uint64_t)v3;
      }
      unint64_t v15 = *(void *)(v24 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v4 + 3;
        if (v4 + 3 >= v25) {
          return (uint64_t)v3;
        }
        unint64_t v15 = *(void *)(v24 + 8 * v16);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v15 - 1) & v15;
    int64_t v12 = v16;
  }
  uint64_t v17 = v4 + 4;
  if (v4 + 4 >= v25) {
    return (uint64_t)v3;
  }
  unint64_t v15 = *(void *)(v24 + 8 * v17);
  if (v15)
  {
    int64_t v16 = v4 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v16 >= v25) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v24 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_185636F0C()
{
  uint64_t v1 = (void *)MEMORY[0x18C109380](v0 + 104);
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v1, sel_setPointerInteractionEnabled_, *(unsigned __int8 *)(v0 + 112));
  }
}

uint64_t sub_185636F68(uint64_t a1)
{
  return sub_185636F70(a1, v1 + 16);
}

uint64_t sub_185636F70(uint64_t a1, uint64_t a2)
{
  sub_1853B7020(a2, (uint64_t)v5, &qword_1E8FAF480);
  sub_1853B7020(a1 + 104, (uint64_t)v4, &qword_1E8FAF480);
  sub_185636FFC((uint64_t)v5, a1 + 104);
  sub_1856370F0((uint64_t)v4);
  sub_1853B93B8((uint64_t)v5, &qword_1E8FAF480);
  return sub_1853B93B8((uint64_t)v4, &qword_1E8FAF480);
}

uint64_t sub_185636FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_185637064(uint64_t a1)
{
  sub_185637518();
  if (*(void *)(*(void *)(a1 + 144) + 16))
  {
    uint64_t v2 = sub_185636C68(*(void *)(a1 + 144));
    swift_bridgeObjectRelease();
    *(void *)(a1 + 144) = v2;
  }
}

uint64_t sub_1856370C4()
{
  return sub_18588D3D0(v0 + 16);
}

uint64_t sub_1856370F0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 104;
  sub_185637378(v1 + 104, (uint64_t)v14);
  sub_185637378((uint64_t)v14, (uint64_t)v17);
  sub_185637378(a1, (uint64_t)&v18);
  if (v17[8] == 255)
  {
    sub_1853B93B8((uint64_t)v14, &qword_1E8FAF480);
    if (v19 == 255)
    {
      uint64_t v7 = v17;
      return sub_1853B93B8((uint64_t)v7, &qword_1E8FAF480);
    }
    goto LABEL_8;
  }
  sub_185637378((uint64_t)v17, (uint64_t)v16);
  if (v19 == 255)
  {
    sub_1853B93B8((uint64_t)v14, &qword_1E8FAF480);
    sub_185637B84((uint64_t)v16);
LABEL_8:
    sub_1853B93B8((uint64_t)v17, qword_1E8FAF488);
    goto LABEL_9;
  }
  sub_185638010((uint64_t)&v18, (uint64_t)v15, MEMORY[0x1E4FBC930]);
  char v5 = sub_185637DB8((uint64_t)v16, (uint64_t)v15);
  sub_185637B84((uint64_t)v15);
  sub_1853B93B8((uint64_t)v14, &qword_1E8FAF480);
  sub_185637B84((uint64_t)v16);
  uint64_t result = sub_1853B93B8((uint64_t)v17, &qword_1E8FAF480);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    uint64_t v8 = *(void *)(v2 + 136);
    sub_185637378(v4, (uint64_t)v16);
    uint64_t v9 = v8 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_host;
    swift_beginAccess();
    sub_185637378(v9, (uint64_t)v15);
    swift_beginAccess();
    sub_185636FFC((uint64_t)v16, v9);
    swift_endAccess();
    sub_185AD9ED4((uint64_t)v15);
    sub_1853B93B8((uint64_t)v16, &qword_1E8FAF480);
    sub_1853B93B8((uint64_t)v15, &qword_1E8FAF480);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v11 = sub_185637378(v4, (uint64_t)v14);
    MEMORY[0x1F4188790](v11);
    v13[2] = KeyPath;
    v13[3] = v14;
    if (*(void *)(*(void *)(v2 + 144) + 16))
    {
      uint64_t v12 = sub_185AFD950(*(void *)(v2 + 144), (void (*)(long long *))sub_185A2B898, (uint64_t)v13);
      swift_release();
      swift_bridgeObjectRelease();
      *(void *)(v2 + 144) = v12;
    }
    else
    {
      swift_release();
    }
    uint64_t v7 = v14;
    return sub_1853B93B8((uint64_t)v7, &qword_1E8FAF480);
  }
  return result;
}

uint64_t sub_185637378(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1856373E0(uint64_t a1)
{
  sub_1853B7020(a1, (uint64_t)v10, &qword_1E8FAF480);
  if (v10[8] == 255)
  {
    sub_1853B93B8((uint64_t)v10, &qword_1E8FAF480);
    uint64_t v4 = (void *)MEMORY[0x18C109380](v1 + 104);
    if (!v4) {
      return sub_1853B93B8(a1, &qword_1E8FAF480);
    }
LABEL_13:

    uint64_t v3 = 0;
LABEL_14:
    sub_1859DCFF8(0);

    return sub_1853B93B8(a1, &qword_1E8FAF480);
  }
  sub_185637950((uint64_t)v10, (uint64_t)v8);
  if (v8[8])
  {
    sub_185637B84((uint64_t)v8);
    uint64_t v3 = 0;
  }
  else
  {
    sub_185637BD8((uint64_t)v8, (uint64_t)v9);
    uint64_t v3 = (void *)MEMORY[0x18C109380](v9);
    sub_1853B93B8((uint64_t)v9, &qword_1E8FAF510);
  }
  sub_185637B84((uint64_t)v10);
  char v5 = (void *)MEMORY[0x18C109380](v1 + 104);
  uint64_t v4 = v5;
  if (!v3)
  {
    if (!v5) {
      return sub_1853B93B8(a1, &qword_1E8FAF480);
    }
    goto LABEL_13;
  }
  if (v5)
  {

    if (v4 == v3)
    {

      return sub_1853B93B8(a1, &qword_1E8FAF480);
    }
  }
  self;
  uint64_t v6 = (void *)swift_dynamicCastObjCClass();
  if (!v6) {
    goto LABEL_14;
  }
  sub_1859DCFF8(v6);
  return sub_1853B93B8(a1, &qword_1E8FAF480);
}

void sub_185637518()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver__effect;
  swift_beginAccess();
  sub_185637CD0(v1, (uint64_t)v21);
  sub_1854B1F38((uint64_t)v21, (uint64_t)v22);
  sub_185637C44((uint64_t)v21);
  char v2 = sub_1856377DC();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v22);
  uint64_t v3 = OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_pointerInteraction;
  id v4 = *(id *)(v0 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_pointerInteraction);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = v0 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_host;
      swift_beginAccess();
      if (*(unsigned __int8 *)(v5 + 8) == 255)
      {
        id v12 = v4;
      }
      else
      {
        sub_185637950(v5, (uint64_t)v22);
        sub_185637950((uint64_t)v22, (uint64_t)v18);
        if (v19)
        {
          id v6 = v4;
          sub_185637B84((uint64_t)v18);
          sub_185637B84((uint64_t)v22);
        }
        else
        {
          sub_185637BD8((uint64_t)v18, (uint64_t)v20);
          id v13 = (id)MEMORY[0x18C109380](v20);
          id v14 = v4;
          sub_1853B93B8((uint64_t)v20, &qword_1E8FAF510);
          sub_185637B84((uint64_t)v22);
          if (v13)
          {
            id v15 = objc_msgSend(v14, sel_view);
            if (!v15 || (id v16 = v15, v15, v16 != v13))
            {
              objc_msgSend(v13, sel_addInteraction_, v14);

              return;
            }
          }
        }
      }
      objc_msgSend(v4, sel_invalidate);
    }
    else
    {
      id v9 = objc_msgSend(objc_allocWithZone((Class)UIPointerInteraction), sel_initWithDelegate_, v0);
      unint64_t v10 = *(void **)(v0 + v3);
      *(void *)(v0 + v3) = v9;
      id v4 = v9;

      uint64_t v11 = v0 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_host;
      swift_beginAccess();
      if (*(unsigned __int8 *)(v11 + 8) != 255)
      {
        sub_185637950(v11, (uint64_t)v22);
        sub_185637950((uint64_t)v22, (uint64_t)v18);
        if (v19)
        {
          sub_185637B84((uint64_t)v18);
          sub_185637B84((uint64_t)v22);
        }
        else
        {
          sub_185637BD8((uint64_t)v18, (uint64_t)v20);
          uint64_t v17 = (void *)MEMORY[0x18C109380](v20);
          sub_1853B93B8((uint64_t)v20, &qword_1E8FAF510);
          sub_185637B84((uint64_t)v22);
          if (v17)
          {
            objc_msgSend(v17, sel_addInteraction_, v4);
          }
        }
      }
    }
  }
  else
  {
    if (!v4) {
      return;
    }
    id v4 = v4;
    id v7 = objc_msgSend(v4, sel_view);
    if (v7)
    {
      uint64_t v8 = v7;
      objc_msgSend(v7, sel_removeInteraction_, v4);

      return;
    }
  }
}

uint64_t sub_1856377DC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_host;
  swift_beginAccess();
  if (*(unsigned __int8 *)(v1 + 8) != 255)
  {
    sub_185637950(v1, (uint64_t)v10);
    sub_185637950((uint64_t)v10, (uint64_t)&v7);
    if (v8)
    {
      sub_185637B84((uint64_t)&v7);
      sub_185637B84((uint64_t)v10);
    }
    else
    {
      sub_185637BD8((uint64_t)&v7, (uint64_t)v9);
      char v2 = (void *)MEMORY[0x18C109380](v9);
      sub_1853B93B8((uint64_t)v9, &qword_1E8FAF510);
      sub_185637B84((uint64_t)v10);
      if (v2)
      {
        unsigned __int8 v3 = objc_msgSend(v2, sel__providesCustomPointerInteraction);

        if (v3) {
          return 0;
        }
      }
    }
  }
  uint64_t v5 = (void *)MEMORY[0x18C109380](v0 + OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_pointerStyle);

  if (!v5 && *(unsigned __int8 *)(v1 + 8) != 255)
  {
    sub_185637950(v1, (uint64_t)v10);
    sub_185637950((uint64_t)v10, (uint64_t)&v7);
    if (v8)
    {
      sub_185637B84((uint64_t)&v7);
      id v6 = 0;
    }
    else
    {
      sub_185637BD8((uint64_t)&v7, (uint64_t)v9);
      id v6 = (void *)MEMORY[0x18C109380](v9);
      sub_1853B93B8((uint64_t)v9, &qword_1E8FAF510);
    }
    sub_185637B84((uint64_t)v10);
  }
  return 1;
}

uint64_t sub_185637950(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1856379AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  BOOL v5 = v4 == 1;
  uint64_t result = a4();
  *(unsigned char *)(result + 8) = v5;
  return result;
}

uint64_t initializeWithCopy for HoverStyleHost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1856379AC(a1, a2, a3, MEMORY[0x1E4FBC920]);
}

uint64_t assignWithTake for HoverStyleDriverCoordinator(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  int v5 = *(unsigned __int8 *)(a1 + 96);
  if (v5 != 255)
  {
    int v6 = *(unsigned __int8 *)(a2 + 96);
    if (v6 != 255)
    {
      uint64_t v7 = *(void *)(a2 + 88);
      char v8 = *(void **)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *(void *)(a1 + 56);
      uint64_t v11 = *(void *)(a1 + 64);
      uint64_t v12 = *(void *)(a1 + 72);
      uint64_t v13 = *(void *)(a1 + 80);
      uint64_t v14 = *(void *)(a1 + 88);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(void *)(a1 + 88) = v7;
      *(unsigned char *)(a1 + 96) = v6;
      sub_185636BB4(v8, v9, v10, v11, v12, v13, v14, v5);
      goto LABEL_6;
    }
    sub_185901C94(a1 + 40);
  }
  long long v15 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
LABEL_6:
  int v16 = *(unsigned __int8 *)(a2 + 112);
  if (*(unsigned __int8 *)(a1 + 112) == 255)
  {
    if (v16 == 255) {
      goto LABEL_10;
    }
  }
  else
  {
    if (v16 == 255)
    {
      sub_185637B84(a1 + 104);
LABEL_10:
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      goto LABEL_16;
    }
    if (a1 == a2) {
      goto LABEL_16;
    }
    sub_185637B84(a1 + 104);
    LOBYTE(v16) = *(unsigned char *)(a2 + 112);
  }
  swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(a1 + 112) = (v16 & 1) != 0;
LABEL_16:
  uint64_t v17 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);

  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  uint64_t v18 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);

  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_185637B84(uint64_t a1)
{
  return a1;
}

uint64_t sub_185637BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_185637C44(uint64_t a1)
{
  return a1;
}

uint64_t destroy for CachedHoverEffect(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return swift_unknownObjectRelease();
}

uint64_t sub_185637CD0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for CachedHoverEffect(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t type metadata accessor for UIPointerHoverStyleDriver()
{
  return self;
}

uint64_t sub_185637DB8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBC920];
  sub_185638010(a1, (uint64_t)v20, MEMORY[0x1E4FBC920]);
  sub_185638010(a2, (uint64_t)&v21, v3);
  if ((v20[8] & 1) == 0)
  {
    sub_185638010((uint64_t)v20, (uint64_t)v19, MEMORY[0x1E4FBC920]);
    if (v22)
    {
      uint64_t v9 = &qword_1E8FAF510;
      goto LABEL_10;
    }
    sub_1853B8150((uint64_t)&v21, (uint64_t)v18, &qword_1E8FAF510);
    uint64_t v10 = (void *)MEMORY[0x18C109380](v19);
    uint64_t v11 = MEMORY[0x18C109380](v18);
    uint64_t v12 = (void *)v11;
    if (v10)
    {
      if (v11)
      {
        sub_185638060();
        id v13 = v10;
        char v14 = sub_186A1F0AC();

        if ((v14 & 1) == 0) {
          goto LABEL_25;
        }
LABEL_18:
        long long v15 = &qword_1E8FAF510;
        goto LABEL_19;
      }
      uint64_t v12 = v10;
    }
    else if (!v11)
    {
      goto LABEL_18;
    }

LABEL_25:
    uint64_t v17 = &qword_1E8FAF510;
    goto LABEL_26;
  }
  sub_185638010((uint64_t)v20, (uint64_t)v19, MEMORY[0x1E4FBC920]);
  if (v22 == 1)
  {
    sub_1853B8150((uint64_t)&v21, (uint64_t)v18, &qword_1E8FB56A0);
    long long v4 = (void *)MEMORY[0x18C109380](v19);
    uint64_t v5 = MEMORY[0x18C109380](v18);
    int v6 = (void *)v5;
    if (v4)
    {
      if (v5)
      {
        type metadata accessor for UIHoverEffectLayer(0);
        id v7 = v4;
        char v8 = sub_186A1F0AC();

        if ((v8 & 1) == 0) {
          goto LABEL_22;
        }
        goto LABEL_16;
      }
      int v6 = v4;
    }
    else if (!v5)
    {
LABEL_16:
      long long v15 = &qword_1E8FB56A0;
LABEL_19:
      sub_1853B93B8((uint64_t)v18, v15);
      sub_1853B93B8((uint64_t)v19, v15);
      sub_185637B84((uint64_t)v20);
      return 1;
    }

LABEL_22:
    uint64_t v17 = &qword_1E8FB56A0;
LABEL_26:
    sub_1853B93B8((uint64_t)v18, v17);
    sub_1853B93B8((uint64_t)v19, v17);
    sub_185637B84((uint64_t)v20);
    return 0;
  }
  uint64_t v9 = &qword_1E8FB56A0;
LABEL_10:
  sub_1853B93B8((uint64_t)v19, v9);
  sub_1853B93B8((uint64_t)v20, &qword_1E8FB56A8);
  return 0;
}

uint64_t sub_185638010(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  BOOL v5 = v4 == 1;
  uint64_t result = a3(a2, a1);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

unint64_t sub_185638060()
{
  unint64_t result = qword_1E8FAFDD0;
  if (!qword_1E8FAFDD0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E8FAFDD0);
  }
  return result;
}

void sub_185638178(void *a1)
{
  unsigned __int8 v3 = *(void **)(v1 + OBJC_IVAR___UIHoverStyle__cachedBridgedShape);
  *(void *)(v1 + OBJC_IVAR___UIHoverStyle__cachedBridgedShape) = a1;
  unsigned int v4 = a1;

  if (a1)
  {
    BOOL v5 = &v4[OBJC_IVAR___UIShape_value];
    int v6 = *(void **)&v4[OBJC_IVAR___UIShape_value];
    uint64_t v7 = *((void *)v5 + 1);
    uint64_t v8 = *((void *)v5 + 2);
    uint64_t v9 = *((void *)v5 + 3);
    uint64_t v10 = *((void *)v5 + 4);
    uint64_t v11 = *((void *)v5 + 5);
    uint64_t v12 = *((void *)v5 + 6);
    char v13 = v5[56];
    sub_185636AFC(v6, v7, v8, v9, v10, v11, v12, v13);
    uint64_t v14 = v11;
    uint64_t v15 = v10;
    uint64_t v16 = v9;
    uint64_t v17 = v8;
    uint64_t v18 = v7;
    char v19 = v6;
  }
  else
  {
    char v19 = 0;
    uint64_t v18 = 0;
    uint64_t v17 = 0;
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = 0;
    char v13 = -1;
  }
  uint64_t v20 = v1 + OBJC_IVAR___UIHoverStyle__shape;
  char v22 = *(void **)(v1 + OBJC_IVAR___UIHoverStyle__shape);
  uint64_t v21 = *(void *)(v1 + OBJC_IVAR___UIHoverStyle__shape + 8);
  uint64_t v23 = *(void *)(v1 + OBJC_IVAR___UIHoverStyle__shape + 16);
  uint64_t v24 = *(void *)(v1 + OBJC_IVAR___UIHoverStyle__shape + 24);
  uint64_t v25 = *(void *)(v1 + OBJC_IVAR___UIHoverStyle__shape + 32);
  uint64_t v26 = *(void *)(v1 + OBJC_IVAR___UIHoverStyle__shape + 40);
  uint64_t v27 = *(void *)(v1 + OBJC_IVAR___UIHoverStyle__shape + 48);
  *(void *)uint64_t v20 = v19;
  *(void *)(v20 + 8) = v18;
  *(void *)(v20 + 16) = v17;
  *(void *)(v20 + 24) = v16;
  *(void *)(v20 + 32) = v15;
  *(void *)(v20 + 40) = v14;
  *(void *)(v20 + 48) = v12;
  char v28 = *(unsigned char *)(v20 + 56);
  *(unsigned char *)(v20 + 56) = v13;
  sub_185638750(v22, v21, v23, v24, v25, v26, v27, v28);
  sub_185638FA4(v22, v21, v23, v24, v25, v26, v27, v28);
  v29[0] = v22;
  v29[1] = v21;
  v29[2] = v23;
  v29[3] = v24;
  v29[4] = v25;
  v29[5] = v26;
  v29[6] = v27;
  char v30 = v28;
  sub_18563832C((uint64_t)v29);
  sub_185638FA4(v22, v21, v23, v24, v25, v26, v27, v28);
}

void sub_18563832C(uint64_t a1)
{
  unsigned __int8 v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  int v9 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v10 = v1 + OBJC_IVAR___UIHoverStyle__shape;
  uint64_t v12 = *(void **)(v1 + OBJC_IVAR___UIHoverStyle__shape);
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR___UIHoverStyle__shape + 8);
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR___UIHoverStyle__shape + 16);
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR___UIHoverStyle__shape + 24);
  uint64_t v16 = *(void *)(v1 + OBJC_IVAR___UIHoverStyle__shape + 32);
  uint64_t v15 = *(void *)(v1 + OBJC_IVAR___UIHoverStyle__shape + 40);
  uint64_t v17 = *(void *)(v1 + OBJC_IVAR___UIHoverStyle__shape + 48);
  int v18 = *(unsigned __int8 *)(v10 + 56);
  if (v18 != 255)
  {
    long long v23 = *(_OWORD *)a1;
    uint64_t v24 = *(void *)(a1 + 16);
    uint64_t v25 = *(void *)(a1 + 24);
    uint64_t v26 = *(void *)(a1 + 32);
    uint64_t v27 = *(void *)(a1 + 40);
    uint64_t v22 = *(void *)(a1 + 48);
    *(void *)&long long v44 = v12;
    *((void *)&v44 + 1) = v11;
    uint64_t v45 = v14;
    uint64_t v46 = v13;
    uint64_t v47 = v16;
    uint64_t v48 = v15;
    uint64_t v49 = v17;
    char v50 = v18;
    if (v9 != 255)
    {
      sub_1858FCDE8(&v44, v51);
      long long v29 = v23;
      uint64_t v30 = v24;
      uint64_t v31 = v25;
      uint64_t v32 = v26;
      uint64_t v33 = v27;
      uint64_t v34 = v22;
      char v35 = v9;
      sub_185638750(v12, v11, v14, v13, v16, v15, v17, v18);
      sub_185638750(v12, v11, v14, v13, v16, v15, v17, v18);
      sub_185638750((id)v23, *((uint64_t *)&v23 + 1), v24, v25, v26, v27, v22, v9);
      char v21 = sub_1858FC278(v51, &v29);
      sub_185638FA4((void *)v23, *((uint64_t *)&v23 + 1), v24, v25, v26, v27, v22, v9);
      sub_18563870C((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void))sub_185636BB4);
      sub_185638FA4(v12, v11, v14, v13, v16, v15, v17, v18);
      if (v21) {
        return;
      }
LABEL_9:
      char v19 = *(void **)(v28 + OBJC_IVAR___UIHoverStyle__cachedBridgedShape);
      *(void *)(v28 + OBJC_IVAR___UIHoverStyle__cachedBridgedShape) = 0;

      sub_1853B8150(v10, (uint64_t)&v44, &qword_1E8FAF258);
      uint64_t v20 = swift_allocObject();
      sub_1853B8150((uint64_t)&v44, v20 + 16, &qword_1E8FAF258);
      sub_18563870C((uint64_t)&v44, (void (*)(void, void, void, void, void, void, void, void))sub_185638750);
      sub_18563870C((uint64_t)&v44, (void (*)(void, void, void, void, void, void, void, void))sub_185638750);
      sub_1856331C0(0, (uint64_t)sub_185AFE020, v20);
      swift_release();
      sub_18563870C((uint64_t)&v44, (void (*)(void, void, void, void, void, void, void, void))sub_185638FA4);
      return;
    }
    sub_185636AFC(v12, v11, v14, v13, v16, v15, v17, v18);
    sub_185636AFC(v12, v11, v14, v13, v16, v15, v17, v18);
    sub_185636BB4(v12, v11, v14, v13, v16, v15, v17, v18);
    uint64_t v8 = v22;
    unsigned __int8 v3 = (void *)v23;
    uint64_t v6 = v26;
    uint64_t v7 = v27;
    uint64_t v4 = v24;
    uint64_t v5 = v25;
    uint64_t v2 = *((void *)&v23 + 1);
LABEL_8:
    *(void *)&long long v29 = v12;
    *((void *)&v29 + 1) = v11;
    uint64_t v30 = v14;
    uint64_t v31 = v13;
    uint64_t v32 = v16;
    uint64_t v33 = v15;
    uint64_t v34 = v17;
    char v35 = v18;
    id v36 = v3;
    uint64_t v37 = v2;
    uint64_t v38 = v4;
    uint64_t v39 = v5;
    uint64_t v40 = v6;
    uint64_t v41 = v7;
    uint64_t v42 = v8;
    char v43 = v9;
    sub_185638750(v3, v2, v4, v5, v6, v7, v8, v9);
    sub_185638C48((uint64_t)&v29);
    goto LABEL_9;
  }
  if (v9 != 255) {
    goto LABEL_8;
  }
}

uint64_t sub_1856386C8(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_18563870C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

id sub_185638750(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8 != -1) {
    return sub_185636AFC(result, a2, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

id sub_185638764@<X0>(char **a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR___UIHoverStyle__effect];
  swift_beginAccess();
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  uint64_t v7 = __swift_project_boxed_opaque_existential_0Tm(v4, v5);
  unint64_t v8 = type metadata accessor for UIHoverStyle();
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v23[-1] - v10;
  (*(void (**)(char *, void *, uint64_t, double))(v12 + 16))((char *)&v23[-1] - v10, v7, v5, v9);
  uint64_t v13 = *(void **)&v2[OBJC_IVAR___UIHoverStyle__shape + 8];
  uint64_t v14 = *(void **)&v2[OBJC_IVAR___UIHoverStyle__shape + 16];
  uint64_t v15 = *(void **)&v2[OBJC_IVAR___UIHoverStyle__shape + 24];
  uint64_t v16 = *(void **)&v2[OBJC_IVAR___UIHoverStyle__shape + 32];
  uint64_t v17 = *(void **)&v2[OBJC_IVAR___UIHoverStyle__shape + 40];
  int v18 = *(void **)&v2[OBJC_IVAR___UIHoverStyle__shape + 48];
  char v19 = v2[OBJC_IVAR___UIHoverStyle__shape + 56];
  v23[0] = *(id *)&v2[OBJC_IVAR___UIHoverStyle__shape];
  v23[1] = v13;
  v23[2] = v14;
  v23[3] = v15;
  v23[4] = v16;
  v23[5] = v17;
  v23[6] = v18;
  char v24 = v19;
  sub_185638750(v23[0], (uint64_t)v13, (uint64_t)v14, (uint64_t)v15, (uint64_t)v16, (uint64_t)v17, (uint64_t)v18, v19);
  uint64_t v20 = UIHoverStyle.init<A>(effect:shape:)((uint64_t)v11, (uint64_t *)v23, v5, v6);
  id result = objc_msgSend(v20, sel_setEnabled_, objc_msgSend(v2, sel_isEnabled));
  a1[3] = (char *)v8;
  *a1 = v20;
  return result;
}

char *UIHoverStyle.init<A>(effect:shape:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v27 = a2[6];
  char v28 = *((unsigned char *)a2 + 56);
  id v13 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_0, a1, a3);
  uint64_t v15 = (uint64_t)v13 + OBJC_IVAR___UIHoverStyle__effect;
  swift_beginAccess();
  uint64_t v16 = (char *)v13;
  __swift_destroy_boxed_opaque_existential_0Tm(v15);
  sub_1854B1F20(&v29, v15);
  swift_endAccess();
  uint64_t v17 = &v16[OBJC_IVAR___UIHoverStyle__shape];
  int v18 = *(void **)&v16[OBJC_IVAR___UIHoverStyle__shape];
  uint64_t v19 = *(void *)&v16[OBJC_IVAR___UIHoverStyle__shape + 8];
  uint64_t v20 = *(void *)&v16[OBJC_IVAR___UIHoverStyle__shape + 16];
  uint64_t v21 = *(void *)&v16[OBJC_IVAR___UIHoverStyle__shape + 24];
  uint64_t v22 = *(void *)&v16[OBJC_IVAR___UIHoverStyle__shape + 32];
  uint64_t v23 = *(void *)&v16[OBJC_IVAR___UIHoverStyle__shape + 40];
  uint64_t v24 = *(void *)&v16[OBJC_IVAR___UIHoverStyle__shape + 48];
  *(void *)uint64_t v17 = v7;
  *((void *)v17 + 1) = v8;
  *((void *)v17 + 2) = v9;
  *((void *)v17 + 3) = v10;
  *((void *)v17 + 4) = v12;
  *((void *)v17 + 5) = v11;
  *((void *)v17 + 6) = v27;
  char v25 = v17[56];
  v17[56] = v28;
  sub_185638FA4(v18, v19, v20, v21, v22, v23, v24, v25);

  return v16;
}

id sub_185638B4C()
{
  *(void *)(v0 + OBJC_IVAR___UIHoverStyle__cachedBridgedEffect) = 0;
  uint64_t v1 = v0 + OBJC_IVAR___UIHoverStyle__effect;
  *(void *)(v1 + 24) = &type metadata for UIHoverAutomaticEffect;
  *(void *)(v1 + 32) = &protocol witness table for UIHoverAutomaticEffect;
  *(void *)(v0 + OBJC_IVAR___UIHoverStyle__cachedBridgedShape) = 0;
  uint64_t v2 = v0 + OBJC_IVAR___UIHoverStyle__shape;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 48) = 0;
  *(unsigned char *)(v2 + 56) = -1;
  *(unsigned char *)(v0 + OBJC_IVAR___UIHoverStyle__isEnabled) = 1;
  uint64_t v3 = v0 + OBJC_IVAR___UIHoverStyle_host;
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = -1;
  uint64_t v4 = v0 + OBJC_IVAR___UIHoverStyle_driverCoordinator;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(void *)(v4 + 144) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR___UIHoverStyle_driverCoordinatorAccessLocked) = 0;
  *(void *)(v0 + OBJC_IVAR___UIHoverStyle_driverCoordinatorQueuedActions) = MEMORY[0x1E4FBC860];
  v6.super_class = (Class)UIHoverStyle;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t sub_185638C48(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(a1 + 112);
  char v9 = *(unsigned char *)(a1 + 120);
  sub_185638FA4(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  sub_185638FA4(v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

id sub_185638CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v26 = *(void *)(a2 + 8);
  uint64_t v27 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = &v3[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver__shape];
  *(_OWORD *)uint64_t v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *((void *)v10 + 6) = 0;
  v10[56] = -1;
  *((void *)v10 + 8) = 0;
  char v11 = *(unsigned char *)(a2 + 56);
  swift_unknownObjectWeakInit();
  uint64_t v28 = (uint64_t)&v3[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_host];
  *(void *)uint64_t v28 = 0;
  *(unsigned char *)(v28 + 8) = -1;
  v3[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_isEnabled] = 1;
  *(void *)&v3[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver_pointerInteraction] = 0;
  sub_1854B1F38(a1, (uint64_t)v37);
  uint64_t v12 = &v3[OBJC_IVAR____TtC5UIKit25UIPointerHoverStyleDriver__effect];
  swift_beginAccess();
  sub_1854B1F38((uint64_t)v37, (uint64_t)v36);
  *((void *)&v34 + 1) = &type metadata for UIHoverAutomaticEffect;
  *(void *)&long long v35 = &protocol witness table for UIHoverAutomaticEffect;
  *((void *)&v35 + 1) = 0;
  uint64_t v24 = v3;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v33);
  sub_1854B1F20(v36, (uint64_t)&v33);
  long long v13 = v34;
  *uint64_t v12 = v33;
  v12[1] = v13;
  v12[2] = v35;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v37);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v21 = *((void *)v10 + 1);
  uint64_t v22 = *(void **)v10;
  uint64_t v19 = *((void *)v10 + 3);
  uint64_t v20 = *((void *)v10 + 2);
  uint64_t v17 = *((void *)v10 + 5);
  uint64_t v18 = *((void *)v10 + 4);
  uint64_t v16 = *((void *)v10 + 6);
  uint64_t v23 = (void *)*((void *)v10 + 8);
  LOBYTE(a2) = v10[56];
  sub_185638750(v27, v26, v25, v6, v7, v8, v9, v11);
  *(void *)uint64_t v10 = v27;
  *((void *)v10 + 1) = v26;
  *((void *)v10 + 2) = v25;
  *((void *)v10 + 3) = v6;
  *((void *)v10 + 4) = v7;
  *((void *)v10 + 5) = v8;
  *((void *)v10 + 6) = v9;
  v10[56] = v11;
  *((void *)v10 + 8) = 0;
  sub_185638FA4(v22, v21, v20, v19, v18, v17, v16, a2);

  sub_185638FA4(v27, v26, v25, v6, v7, v8, v9, v11);
  swift_beginAccess();
  sub_185636FFC(a3, v28);
  swift_endAccess();

  v32.receiver = v24;
  v32.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v32, sel_init);
  sub_185637518();

  sub_1853B93B8(a3, &qword_1E8FAF480);
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  return v14;
}

void sub_185638FA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8 != -1) {
    sub_185636BB4(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void CommonStyleRegistration(void *a1)
{
  id v1 = a1;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __CommonStyleRegistration_block_invoke;
  block[3] = &unk_1E52D9F70;
  id v5 = v1;
  uint64_t v2 = CommonStyleRegistration_onceToken;
  id v3 = v1;
  if (v2 != -1) {
    dispatch_once(&CommonStyleRegistration_onceToken, block);
  }
}

void UIFloorToScale(double a1, double a2)
{
  if (a2 == 0.0 && AdjustToScale_onceToken_0 != -1) {
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_279);
  }
}

void sub_18563E3B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

id _UIPeripheralHostLogger()
{
  if (qword_1EB261C40 != -1) {
    dispatch_once(&qword_1EB261C40, &__block_literal_global_519_0);
  }
  uint64_t v0 = (void *)qword_1EB261C38;
  return v0;
}

id _UIKeyboardSceneDelegateLogger()
{
  if (qword_1EB260500 != -1) {
    dispatch_once(&qword_1EB260500, &__block_literal_global_1096_0);
  }
  uint64_t v0 = (void *)qword_1EB2604F8;
  return v0;
}

uint64_t _UIKeyboardGetDeviceIdiomFromInputUIScene(uint64_t result)
{
  if (result == 1)
  {
    if (+[UIKeyboard isInputSystemUI])
    {
      uint64_t v1 = +[UIKeyboardImpl keyboardScreen];
      uint64_t v2 = +[UIKeyboard activeKeyboard];
      id v3 = +[UIKBScreenTraits traitsWithScreen:orientation:](UIKBScreenTraits, "traitsWithScreen:orientation:", v1, [v2 interfaceOrientation]);

      uint64_t v4 = [v3 idiom];
      return v4;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t UIKeyboardGetSafeDeviceIdiom()
{
  if (UIApp)
  {
    uint64_t v0 = +[UIDevice currentDevice];
    uint64_t v1 = [v0 userInterfaceIdiom];
  }
  else
  {
    uint64_t v1 = _UIDeviceNativeUserInterfaceIdiomIgnoringClassic();
  }
  return _UIKeyboardGetDeviceIdiomFromInputUIScene(v1);
}

id KeyboardArbiterClientLog()
{
  if (qword_1EB25F3D0 != -1) {
    dispatch_once(&qword_1EB25F3D0, &__block_literal_global_26);
  }
  uint64_t v0 = (void *)_MergedGlobals_976;
  return v0;
}

id KeyboardArbiterClientLog_0()
{
  if (qword_1EB260328 != -1) {
    dispatch_once(&qword_1EB260328, &__block_literal_global_532);
  }
  uint64_t v0 = (void *)qword_1EB260320;
  return v0;
}

id KeyboardArbiterClientLog_1()
{
  if (qword_1EB25C748 != -1) {
    dispatch_once(&qword_1EB25C748, &__block_literal_global_1122);
  }
  uint64_t v0 = (void *)qword_1EB25C740;
  return v0;
}

id KeyboardArbiterClientLog_2()
{
  if (qword_1EB261E80 != -1) {
    dispatch_once(&qword_1EB261E80, &__block_literal_global_192_2);
  }
  uint64_t v0 = (void *)_MergedGlobals_1160;
  return v0;
}

id KeyboardArbiterClientLog_3()
{
  if (qword_1EB25D298 != -1) {
    dispatch_once(&qword_1EB25D298, &__block_literal_global_409_1);
  }
  uint64_t v0 = (void *)qword_1EB25D290;
  return v0;
}

void sub_185642568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  _Unwind_Resume(a1);
}

void sub_18564350C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void std::vector<_UIAuxillarySolveResult>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    uint64_t v4 = (id *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 6;

        uint64_t v4 = v6;
      }
      while (v6 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<_UIAuxillarySolveResult>::__assign_with_size[abi:nn180100]<_UIAuxillarySolveResult*,_UIAuxillarySolveResult*>(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= a4)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 4) >= a4)
    {
      uint64_t v19 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<_UIAuxillarySolveResult *,_UIAuxillarySolveResult *,_UIAuxillarySolveResult *>(a2, a3, (uint64_t)v8);
      uint64_t v20 = *(void *)(a1 + 8);
      if (v20 != v19)
      {
        do
        {
          uint64_t v21 = v20 - 48;

          uint64_t v20 = v21;
        }
        while (v21 != v19);
      }
      *(void *)(a1 + 8) = v19;
    }
    else
    {
      id v14 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 4];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<_UIAuxillarySolveResult *,_UIAuxillarySolveResult *,_UIAuxillarySolveResult *>(a2, v14, (uint64_t)v8);
      uint64_t v15 = *(void *)(a1 + 8);
      if (v14 != a3)
      {
        uint64_t v16 = *(void *)(a1 + 8);
        do
        {
          long long v17 = *v14;
          long long v18 = v14[1];
          *(void *)(v16 + 32) = *((void *)v14 + 4);
          *(_OWORD *)uint64_t v16 = v17;
          *(_OWORD *)(v16 + 16) = v18;
          *(void *)(v16 + 40) = *((id *)v14 + 5);
          v15 += 48;
          v14 += 3;
          v16 += 48;
        }
        while (v14 != a3);
      }
      *(void *)(a1 + 8) = v15;
    }
  }
  else
  {
    std::vector<_UIAuxillarySolveResult>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555) {
      abort();
    }
    unint64_t v9 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<_UIAuxillarySolveResult>::__vallocate[abi:nn180100]((void *)a1, v10);
    uint64_t v11 = *(void *)(a1 + 8);
    while (v6 != a3)
    {
      long long v12 = *v6;
      long long v13 = v6[1];
      *(void *)(v11 + 32) = *((void *)v6 + 4);
      *(_OWORD *)uint64_t v11 = v12;
      *(_OWORD *)(v11 + 16) = v13;
      *(void *)(v11 + 40) = *((id *)v6 + 5);
      v11 += 48;
      v6 += 3;
    }
    *(void *)(a1 + 8) = v11;
  }
}

double _UILeadingOffsetForInsetsAlongAxis(uint64_t a1, double a2, double a3)
{
  if (a1 != 2)
  {
    if (a1 == 1)
    {
      return a3;
    }
    else
    {
      uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
      id v5 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat _UILeadingOffsetForInsetsAlongAxis(NSDirectionalEdgeInsets, UIAxis)");
      [v4 handleFailureInFunction:v5 file:@"_UICollectionLayoutHelpers.m" lineNumber:490 description:@"Unknown axis"];

      return 0.0;
    }
  }
  return result;
}

void *std::vector<_UIAuxillarySolveResult>::reserve(void *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      abort();
    }
    uint64_t v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    long long v17 = result + 2;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIAuxillarySolveResult>>(a2);
    uint64_t v7 = *v2;
    unint64_t v6 = (unint64_t)v2[1];
    if ((char *)v6 == *v2)
    {
      int64x2_t v12 = vdupq_n_s64(v6);
      uint64_t v8 = &v4[v3];
    }
    else
    {
      uint64_t v8 = &v4[v3];
      do
      {
        long long v9 = *(_OWORD *)(v6 - 48);
        long long v10 = *(_OWORD *)(v6 - 32);
        *((void *)v8 - 2) = *(void *)(v6 - 16);
        *((_OWORD *)v8 - 3) = v9;
        *((_OWORD *)v8 - 2) = v10;
        uint64_t v11 = *(void *)(v6 - 8);
        *(void *)(v6 - 8) = 0;
        *((void *)v8 - 1) = v11;
        v8 -= 48;
        v6 -= 48;
      }
      while ((char *)v6 != v7);
      int64x2_t v12 = *(int64x2_t *)v2;
    }
    id *v2 = v8;
    v2[1] = &v4[v3];
    int64x2_t v15 = v12;
    long long v13 = v2[2];
    v2[2] = &v4[48 * v5];
    uint64_t v16 = v13;
    uint64_t v14 = v12.i64[0];
    return (void *)std::__split_buffer<_UIAuxillarySolveResult>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

void _UIRegionSolveResult::_UIRegionSolveResult(_UIRegionSolveResult *this, _NSRange a2, double a3, double a4, const _UIItemSolveResult *a5)
{
  NSUInteger length = a2.length;
  NSUInteger location = a2.location;
  long long v11 = *(_OWORD *)a5;
  long long v12 = *((_OWORD *)a5 + 1);
  long long v13 = *((_OWORD *)a5 + 3);
  *((_OWORD *)this + 4) = *((_OWORD *)a5 + 2);
  *((_OWORD *)this + 5) = v13;
  *((_OWORD *)this + 2) = v11;
  *((_OWORD *)this + 3) = v12;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<_UIAuxillarySolveResult>::__init_with_size[abi:nn180100]<_UIAuxillarySolveResult*,_UIAuxillarySolveResult*>((char *)this + 96, *((long long **)a5 + 8), *((long long **)a5 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a5 + 9) - *((void *)a5 + 8)) >> 4));
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  std::vector<_UIAuxillarySolveResult>::__init_with_size[abi:nn180100]<_UIAuxillarySolveResult*,_UIAuxillarySolveResult*>((char *)this + 120, *((long long **)a5 + 11), *((long long **)a5 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a5 + 12) - *((void *)a5 + 11)) >> 4));
  *((void *)this + 18) = *((id *)a5 + 14);
  *(void *)this = location;
  *((void *)this + 1) = length;
  *((double *)this + 2) = a3;
  *((double *)this + 3) = a4;
}

void sub_1856444BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<_UIAuxillarySolveResult>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *std::vector<_UIAuxillarySolveResult>::__init_with_size[abi:nn180100]<_UIAuxillarySolveResult*,_UIAuxillarySolveResult*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    double result = std::vector<_UIAuxillarySolveResult>::__vallocate[abi:nn180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      long long v9 = a2[1];
      *(void *)(v7 + 32) = *((void *)a2 + 4);
      *(_OWORD *)uint64_t v7 = v8;
      *(_OWORD *)(v7 + 16) = v9;
      double result = (char *)*((id *)a2 + 5);
      *(void *)(v7 + 40) = result;
      v7 += 48;
      a2 += 3;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<_UIAuxillarySolveResult>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    abort();
  }
  double result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIAuxillarySolveResult>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<_UIAuxillarySolveResult>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(48 * a1);
}

void sub_18564467C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<_UIAuxillarySolveResult>::__vdeallocate(void **a1)
{
  uint64_t v1 = (id *)*a1;
  if (*a1)
  {
    uint64_t v3 = (id *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 6;

        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<_UIAuxillarySolveResult *,_UIAuxillarySolveResult *,_UIAuxillarySolveResult *>(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      long long v6 = *v5;
      long long v7 = v5[1];
      *(void *)(a3 + 32) = *((void *)v5 + 4);
      *(_OWORD *)a3 = v6;
      *(_OWORD *)(a3 + 16) = v7;
      objc_storeStrong((id *)(a3 + 40), *((id *)v5 + 5));
      a3 += 48;
      v5 += 3;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_185644CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185644F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<_UIRegionSolveResult>,std::reverse_iterator<_UIRegionSolveResult*>,std::reverse_iterator<_UIRegionSolveResult*>,std::reverse_iterator<_UIRegionSolveResult*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = a6;
  if (a2 != a4)
  {
    long long v7 = (void *)(a6 - 56);
    do
    {
      long long v8 = *(_OWORD *)(a2 - 136);
      *((_OWORD *)v7 - 6) = *(_OWORD *)(a2 - 152);
      *((_OWORD *)v7 - 5) = v8;
      long long v9 = *(_OWORD *)(a2 - 120);
      long long v10 = *(_OWORD *)(a2 - 104);
      long long v11 = *(_OWORD *)(a2 - 72);
      *((_OWORD *)v7 - 2) = *(_OWORD *)(a2 - 88);
      *((_OWORD *)v7 - 1) = v11;
      *((_OWORD *)v7 - 4) = v9;
      *((_OWORD *)v7 - 3) = v10;
      v7[1] = 0;
      v7[2] = 0;
      *long long v7 = 0;
      *(_OWORD *)long long v7 = *(_OWORD *)(a2 - 56);
      v7[2] = *(void *)(a2 - 40);
      *(void *)(a2 - 56) = 0;
      *(void *)(a2 - 48) = 0;
      *(void *)(a2 - 40) = 0;
      v7[3] = 0;
      v7[4] = 0;
      v7[5] = 0;
      *(_OWORD *)(v7 + 3) = *(_OWORD *)(a2 - 32);
      uint64_t v12 = *(void *)(a2 - 8);
      v7[5] = *(void *)(a2 - 16);
      *(void *)(a2 - 32) = 0;
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      v7[6] = v12;
      v7 -= 19;
      result -= 152;
      a2 -= 152;
    }
    while (a2 != a4);
  }
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<_UIRegionSolveResult>>(unint64_t a1)
{
  if (a1 >= 0x1AF286BCA1AF287) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(152 * a1);
}

uint64_t std::__split_buffer<_UIRegionSolveResult>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 152;
    std::__destroy_at[abi:nn180100]<_UIRegionSolveResult,0>((void **)(i - 152));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__destroy_at[abi:nn180100]<_UIRegionSolveResult,0>(void **a1)
{
  uint64_t v2 = a1 + 15;
  std::vector<_UIAuxillarySolveResult>::__destroy_vector::operator()[abi:nn180100](&v2);
  uint64_t v2 = a1 + 12;
  std::vector<_UIAuxillarySolveResult>::__destroy_vector::operator()[abi:nn180100](&v2);
}

uint64_t std::construct_at[abi:nn180100]<_UIRegionSolveResult,_UIRegionSolveResult const&,_UIRegionSolveResult*>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  std::vector<_UIAuxillarySolveResult>::__init_with_size[abi:nn180100]<_UIAuxillarySolveResult*,_UIAuxillarySolveResult*>((char *)(a1 + 96), *(long long **)(a2 + 96), *(long long **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 4));
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  std::vector<_UIAuxillarySolveResult>::__init_with_size[abi:nn180100]<_UIAuxillarySolveResult*,_UIAuxillarySolveResult*>((char *)(a1 + 120), *(long long **)(a2 + 120), *(long long **)(a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 4));
  *(void *)(a1 + 144) = *(id *)(a2 + 144);
  return a1;
}

void sub_1856452B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<_UIAuxillarySolveResult>::__destroy_vector::operator()[abi:nn180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<_UIAuxillarySolveResult>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<_UIRegionSolveResult>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 / 152;
  unint64_t v9 = *a1 + 152 * (v7 / 152);
  long long v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v39 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v6 - v5) >> 3) + 1;
    if (v39 > 0x1AF286BCA1AF286) {
      abort();
    }
    unint64_t v41 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v10 - v5) >> 3);
    if (2 * v41 > v39) {
      unint64_t v39 = 2 * v41;
    }
    if (v41 >= 0xD79435E50D7943) {
      unint64_t v42 = 0x1AF286BCA1AF286;
    }
    else {
      unint64_t v42 = v39;
    }
    v78 = v11;
    if (v42)
    {
      long long v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIRegionSolveResult>>(v42);
    }
    else
    {
      long long v44 = 0;
      uint64_t v43 = 0;
    }
    uint64_t v45 = (uint64_t)&v44[152 * v8];
    uint64_t v74 = v44;
    char v75 = (char *)v45;
    uint64_t v76 = v45;
    char v77 = &v44[152 * v43];
    if (v8 == v43)
    {
      if (v7 < 1)
      {
        if (v5 == a2) {
          unint64_t v47 = 1;
        }
        else {
          unint64_t v47 = 2 * v8;
        }
        v79[4] = v11;
        uint64_t v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIRegionSolveResult>>(v47);
        uint64_t v50 = (uint64_t)v75;
        uint64_t v51 = v76;
        uint64_t v52 = (uint64_t)v75;
        uint64_t v53 = (uint64_t)&v48[152 * (v47 >> 2)];
        if ((char *)v76 != v75)
        {
          uint64_t v53 = (uint64_t)&v48[152 * (v47 >> 2) + v76 - (void)v75];
          double v54 = &v48[152 * (v47 >> 2)];
          uint64_t v55 = (uint64_t)v75;
          do
          {
            long long v56 = *(_OWORD *)(v55 + 16);
            *(_OWORD *)double v54 = *(_OWORD *)v55;
            *((_OWORD *)v54 + 1) = v56;
            long long v57 = *(_OWORD *)(v55 + 32);
            long long v58 = *(_OWORD *)(v55 + 48);
            long long v59 = *(_OWORD *)(v55 + 80);
            *((_OWORD *)v54 + 4) = *(_OWORD *)(v55 + 64);
            *((_OWORD *)v54 + 5) = v59;
            *((_OWORD *)v54 + 2) = v57;
            *((_OWORD *)v54 + 3) = v58;
            *((void *)v54 + 13) = 0;
            *((void *)v54 + 14) = 0;
            *((void *)v54 + 12) = 0;
            *((_OWORD *)v54 + 6) = *(_OWORD *)(v55 + 96);
            *((void *)v54 + 14) = *(void *)(v55 + 112);
            *(void *)(v55 + 96) = 0;
            *(void *)(v55 + 104) = 0;
            *(void *)(v55 + 112) = 0;
            *((void *)v54 + 15) = 0;
            *((void *)v54 + 16) = 0;
            *((void *)v54 + 17) = 0;
            *(_OWORD *)(v54 + 120) = *(_OWORD *)(v55 + 120);
            *((void *)v54 + 17) = *(void *)(v55 + 136);
            *(void *)(v55 + 120) = 0;
            *(void *)(v55 + 128) = 0;
            uint64_t v60 = *(void *)(v55 + 144);
            *(void *)(v55 + 136) = 0;
            *(void *)(v55 + 144) = 0;
            *((void *)v54 + 18) = v60;
            v54 += 152;
            v55 += 152;
          }
          while (v54 != (char *)v53);
          uint64_t v52 = v51;
        }
        uint64_t v61 = v74;
        double v62 = v77;
        uint64_t v74 = v48;
        char v75 = &v48[152 * (v47 >> 2)];
        v79[0] = v61;
        v79[1] = v50;
        uint64_t v76 = v53;
        char v77 = &v48[152 * v49];
        v79[2] = v52;
        v79[3] = v62;
        std::__split_buffer<_UIRegionSolveResult>::~__split_buffer((uint64_t)v79);
        uint64_t v45 = v76;
      }
      else
      {
        uint64_t v46 = v8 + 2;
        if (v8 >= -1) {
          uint64_t v46 = v8 + 1;
        }
        v45 -= 152 * (v46 >> 1);
        char v75 = (char *)v45;
        uint64_t v76 = v45;
      }
    }
    std::construct_at[abi:nn180100]<_UIRegionSolveResult,_UIRegionSolveResult const&,_UIRegionSolveResult*>(v45, a3);
    v76 += 152;
    uint64_t v63 = std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<_UIRegionSolveResult>,std::reverse_iterator<_UIRegionSolveResult*>,std::reverse_iterator<_UIRegionSolveResult*>,std::reverse_iterator<_UIRegionSolveResult*>>(v9, v9, *a1, *a1, (uint64_t)v75, (uint64_t)v75);
    char v75 = (char *)v63;
    uint64_t v64 = a1[1];
    uint64_t v65 = v76;
    if (v64 != v9)
    {
      do
      {
        long long v66 = *(_OWORD *)(v9 + 16);
        *(_OWORD *)uint64_t v65 = *(_OWORD *)v9;
        *(_OWORD *)(v65 + 16) = v66;
        long long v67 = *(_OWORD *)(v9 + 32);
        long long v68 = *(_OWORD *)(v9 + 48);
        long long v69 = *(_OWORD *)(v9 + 80);
        *(_OWORD *)(v65 + 64) = *(_OWORD *)(v9 + 64);
        *(_OWORD *)(v65 + 80) = v69;
        *(_OWORD *)(v65 + 32) = v67;
        *(_OWORD *)(v65 + 48) = v68;
        *(void *)(v65 + 104) = 0;
        *(void *)(v65 + 112) = 0;
        *(void *)(v65 + 96) = 0;
        *(_OWORD *)(v65 + 96) = *(_OWORD *)(v9 + 96);
        *(void *)(v65 + 112) = *(void *)(v9 + 112);
        *(void *)(v9 + 96) = 0;
        *(void *)(v9 + 104) = 0;
        *(void *)(v9 + 112) = 0;
        *(void *)(v65 + 120) = 0;
        *(void *)(v65 + 128) = 0;
        *(void *)(v65 + 136) = 0;
        *(_OWORD *)(v65 + 120) = *(_OWORD *)(v9 + 120);
        *(void *)(v65 + 136) = *(void *)(v9 + 136);
        *(void *)(v9 + 120) = 0;
        *(void *)(v9 + 128) = 0;
        uint64_t v70 = *(void *)(v9 + 144);
        *(void *)(v9 + 136) = 0;
        *(void *)(v9 + 144) = 0;
        *(void *)(v65 + 144) = v70;
        v65 += 152;
        v9 += 152;
      }
      while (v9 != v64);
      uint64_t v63 = (uint64_t)v75;
      unint64_t v9 = a1[1];
    }
    uint64_t v71 = *a1;
    *a1 = v63;
    a1[1] = v65;
    uint64_t v72 = a1[2];
    a1[2] = (uint64_t)v77;
    uint64_t v76 = v9;
    char v77 = (char *)v72;
    uint64_t v74 = (char *)v71;
    char v75 = (char *)v71;
    std::__split_buffer<_UIRegionSolveResult>::~__split_buffer((uint64_t)&v74);
  }
  else if (v9 == v6)
  {
    std::construct_at[abi:nn180100]<_UIRegionSolveResult,_UIRegionSolveResult const&,_UIRegionSolveResult*>(*a1 + 152 * (v7 / 152), a3);
    a1[1] = v9 + 152;
  }
  else
  {
    unint64_t v12 = v9 + 152;
    unint64_t v13 = v6 - 152;
    uint64_t v14 = a1[1];
    if (v6 >= 0x98)
    {
      do
      {
        long long v15 = *(_OWORD *)(v13 + 16);
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
        *(_OWORD *)(v14 + 16) = v15;
        long long v16 = *(_OWORD *)(v13 + 32);
        long long v17 = *(_OWORD *)(v13 + 48);
        long long v18 = *(_OWORD *)(v13 + 80);
        *(_OWORD *)(v14 + 64) = *(_OWORD *)(v13 + 64);
        *(_OWORD *)(v14 + 80) = v18;
        *(_OWORD *)(v14 + 32) = v16;
        *(_OWORD *)(v14 + 48) = v17;
        *(void *)(v14 + 104) = 0;
        *(void *)(v14 + 112) = 0;
        *(void *)(v14 + 96) = 0;
        *(_OWORD *)(v14 + 96) = *(_OWORD *)(v13 + 96);
        *(void *)(v14 + 112) = *(void *)(v13 + 112);
        *(void *)(v13 + 96) = 0;
        *(void *)(v13 + 104) = 0;
        *(void *)(v13 + 112) = 0;
        *(void *)(v14 + 120) = 0;
        *(void *)(v14 + 128) = 0;
        *(void *)(v14 + 136) = 0;
        *(_OWORD *)(v14 + 120) = *(_OWORD *)(v13 + 120);
        *(void *)(v14 + 136) = *(void *)(v13 + 136);
        *(void *)(v13 + 120) = 0;
        *(void *)(v13 + 128) = 0;
        uint64_t v19 = *(void *)(v13 + 144);
        *(void *)(v13 + 136) = 0;
        *(void *)(v13 + 144) = 0;
        *(void *)(v14 + 144) = v19;
        v14 += 152;
        v13 += 152;
      }
      while (v13 < v6);
    }
    a1[1] = v14;
    if (v6 != v12)
    {
      uint64_t v20 = 0;
      unint64_t v21 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v6 - v12) >> 3);
      unint64_t v22 = v5 + 152 * v21 + 152 * v8;
      uint64_t v23 = -152 * v21;
      do
      {
        uint64_t v24 = v22 + v20;
        uint64_t v25 = v6 + v20;
        long long v26 = *(_OWORD *)(v22 + v20 - 152);
        *(_OWORD *)(v25 - 136) = *(_OWORD *)(v22 + v20 - 136);
        *(_OWORD *)(v25 - 152) = v26;
        long long v27 = *(_OWORD *)(v22 + v20 - 120);
        long long v28 = *(_OWORD *)(v22 + v20 - 104);
        long long v29 = *(_OWORD *)(v22 + v20 - 88);
        *(_OWORD *)(v25 - 72) = *(_OWORD *)(v22 + v20 - 72);
        *(_OWORD *)(v25 - 88) = v29;
        *(_OWORD *)(v25 - 104) = v28;
        *(_OWORD *)(v25 - 120) = v27;
        std::vector<_UIAuxillarySolveResult>::__vdeallocate((void **)(v6 + v20 - 56));
        *(_OWORD *)(v25 - 56) = *(_OWORD *)(v22 + v20 - 56);
        *(void *)(v25 - 40) = *(void *)(v22 + v20 - 40);
        *(void *)(v24 - 56) = 0;
        *(void *)(v24 - 48) = 0;
        *(void *)(v24 - 40) = 0;
        std::vector<_UIAuxillarySolveResult>::__vdeallocate((void **)(v6 + v20 - 32));
        *(_OWORD *)(v25 - 32) = *(_OWORD *)(v22 + v20 - 32);
        *(void *)(v25 - 16) = *(void *)(v22 + v20 - 16);
        *(void *)(v24 - 32) = 0;
        *(void *)(v24 - 24) = 0;
        uint64_t v30 = *(void *)(v22 + v20 - 8);
        *(void *)(v24 - 16) = 0;
        *(void *)(v24 - 8) = 0;
        uint64_t v31 = *(void **)(v6 + v20 - 8);
        *(void *)(v25 - 8) = v30;

        v20 -= 152;
      }
      while (v23 != v20);
    }
    unint64_t v32 = a3;
    if (v9 <= a3) {
      unint64_t v32 = a3 + 152 * (a1[1] > a3);
    }
    long long v33 = *(_OWORD *)(v32 + 16);
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v32;
    *(_OWORD *)(v9 + 16) = v33;
    long long v34 = (_OWORD *)(v5 + 152 * v8);
    long long v35 = *(_OWORD *)(v32 + 32);
    long long v36 = *(_OWORD *)(v32 + 48);
    long long v37 = *(_OWORD *)(v32 + 80);
    v34[4] = *(_OWORD *)(v32 + 64);
    v34[5] = v37;
    v34[2] = v35;
    v34[3] = v36;
    if (v9 != v32)
    {
      uint64_t v38 = v5 + 152 * v8;
      std::vector<_UIAuxillarySolveResult>::__assign_with_size[abi:nn180100]<_UIAuxillarySolveResult*,_UIAuxillarySolveResult*>(v38 + 96, *(long long **)(v32 + 96), *(long long **)(v32 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v32 + 104) - *(void *)(v32 + 96)) >> 4));
      std::vector<_UIAuxillarySolveResult>::__assign_with_size[abi:nn180100]<_UIAuxillarySolveResult*,_UIAuxillarySolveResult*>(v38 + 120, *(long long **)(v32 + 120), *(long long **)(v32 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v32 + 128) - *(void *)(v32 + 120)) >> 4));
    }
    objc_storeStrong((id *)(v5 + 152 * v8 + 144), *(id *)(v32 + 144));
  }
}

void sub_185645A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  *(void *)(v12 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t __UIKeyboardGetSupportedSoftwareKeyboardsForInputModeAndIdiom_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 isEqualToString:@"Korean10Key"])
  {
    uint64_t v3 = MGGetSInt32Answer() == 1;
  }
  else if ([&unk_1ED3EFE78 containsObject:v2])
  {
    uint64_t v3 = _os_feature_enabled_impl();
  }
  else
  {
    uint64_t v3 = 1;
  }

  return v3;
}

void sub_185649CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

id sub_18564A164(uint64_t a1, char a2, SEL *a3)
{
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v3;
  if (isUniquelyReferenced_nonNull_native)
  {
    unint64_t v9 = *(void **)(v8 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v8 + 16), sel_copy);
    sub_186A1F1CC();
    swift_unknownObjectRelease();
    sub_1856ACF00();
    swift_dynamicCast();
    unint64_t v9 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255A90);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v13;
    swift_release();
    uint64_t *v3 = v10;
  }
  double v11 = 1.79769313e308;
  if ((a2 & 1) == 0) {
    double v11 = *(double *)&a1;
  }
  return objc_msgSend(v9, *a3, v11);
}

void __HandleWindowContentRotationNotification_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v3 = [v2 object];
  long long v4 = [v2 userInfo];
  uint64_t v5 = [v4 objectForKey:0x1ED160180];
  uint64_t v6 = [v5 integerValue];

  if (v6)
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    objc_opt_class();
    char v8 = objc_opt_isKindOfClass();
    if (isKindOfClass & 1) != 0 || (v8)
    {
      if ((isKindOfClass & 1) == 0
        || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
        && ([v3 isHidden] & 1) == 0
        && [v3 _shouldControlAutorotation])
      {
        unint64_t v9 = [v4 objectForKey:0x1ED1601A0];
        [v9 doubleValue];
        double v11 = v10;

        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        uint64_t v12 = GetRotationFollowingWindows();
        unint64_t v13 = objc_msgSend(v12, "allObjects", 0);

        uint64_t v14 = [v13 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = *(void *)v19;
          do
          {
            uint64_t v17 = 0;
            do
            {
              if (*(void *)v19 != v16) {
                objc_enumerationMutation(v13);
              }
              [*(id *)(*((void *)&v18 + 1) + 8 * v17++) applicationWindow:v3 didRotateWithOrientation:v6 duration:v11];
            }
            while (v15 != v17);
            uint64_t v15 = [v13 countByEnumeratingWithState:&v18 objects:v22 count:16];
          }
          while (v15);
        }
      }
    }
  }
}

uint64_t _UIWindowCompareWindowsUsingLevel(void *a1, void *a2)
{
  id v3 = a2;
  [a1 level];
  double v5 = v4;
  [v3 level];
  double v7 = v6;

  if (v7 <= v5) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = -1;
  }
  if (v7 < v5) {
    return 1;
  }
  else {
    return v8;
  }
}

void _UISceneMetricsCalculatorApplySceneCornerRadiiToScreenIfNecessary(void *a1)
{
  id v6 = a1;
  uint64_t v1 = [v6 _effectiveUISettings];
  id v2 = [v1 displayIdentity];
  if ([v2 isUIKitMainLike])
  {
    if ([v2 isExternal])
    {
      uint64_t v3 = [v1 cornerRadiusConfiguration];
      if (v3)
      {
        double v4 = (void *)v3;
        double v5 = [v6 screen];
        [v4 topLeft];
        objc_msgSend(v5, "_setSceneProvidedDisplayCornerRadius:");
      }
    }
  }
}

uint64_t UIDebuggingOverlayIsEnabled()
{
  if (qword_1EB25D478 != -1) {
    dispatch_once(&qword_1EB25D478, &__block_literal_global_90_3);
  }
  return _MergedGlobals_11_15;
}

void ____eventFetcherSourceCallback_block_invoke(uint64_t a1, uint64_t a2)
{
  +[_UIEventBus instance]();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  -[_UIEventBus addEvents:]((uint64_t)v3, a2);
}

BOOL _UINavigationBarHasExcessiveLineHeightCharactersInTitle(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    id v2 = +[UILabel _tooBigChars]();
    BOOL v3 = [v1 rangeOfCharacterFromSet:v2] != 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    BOOL v3 = 0;
  }

  return v3;
}

void ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_37(uint64_t a1, void *a2)
{
  if ([a2 _senderID] != *(void *)(a1 + 32))
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 40), (const void *)[a2 _pathIndex], a2);
    double v4 = *(__CFDictionary **)(a1 + 48);
    double v5 = (const void *)[a2 _pathIndex];
    CFDictionaryRemoveValue(v4, v5);
  }
}

uint64_t _UIApplicationUsesLegacyUI()
{
  return 0;
}

void sub_185651698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _UIRectSubtractingRectYieldingDirectionalInsets(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  v19.origin.CGFloat x = a5;
  v19.origin.CGFloat y = a6;
  v19.size.double width = a7;
  v19.size.double height = a8;
  double MinY = CGRectGetMinY(v19);
  v20.origin.CGFloat x = a1;
  v20.origin.CGFloat y = a2;
  v20.size.double width = a3;
  v20.size.double height = a4;
  double v17 = MinY - CGRectGetMinY(v20);
  v21.origin.CGFloat x = a1;
  v21.origin.CGFloat y = a2;
  v21.size.double width = a3;
  v21.size.double height = a4;
  CGRectGetMaxY(v21);
  v22.origin.CGFloat x = a5;
  v22.origin.CGFloat y = a6;
  v22.size.double width = a7;
  v22.size.double height = a8;
  CGRectGetMaxY(v22);
  v23.origin.CGFloat x = a5;
  v23.origin.CGFloat y = a6;
  v23.size.double width = a7;
  v23.size.double height = a8;
  CGRectGetMinX(v23);
  v24.origin.CGFloat x = a1;
  v24.origin.CGFloat y = a2;
  v24.size.double width = a3;
  v24.size.double height = a4;
  CGRectGetMinX(v24);
  v25.origin.CGFloat x = a1;
  v25.origin.CGFloat y = a2;
  v25.size.double width = a3;
  v25.size.double height = a4;
  CGRectGetMaxX(v25);
  v26.origin.CGFloat x = a5;
  v26.origin.CGFloat y = a6;
  v26.size.double width = a7;
  v26.size.double height = a8;
  CGRectGetMaxX(v26);
  return v17;
}

void sub_1856528A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

id _UIPinnedNonOverlappingFramesForContentFrameVisibleFrame(void *a1, char a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  *(double *)&v119[16] = a9;
  *(double *)&v119[24] = a10;
  *(double *)CGRect v119 = a7;
  *(double *)&v119[8] = a8;
  *(double *)&v120[16] = a5;
  *(double *)&v120[24] = a6;
  *(double *)v120 = a3;
  *(double *)&v120[8] = a4;
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  id v118 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v155 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  id v11 = a1;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v155 objects:v160 count:16];
  if (!v12) {
    goto LABEL_71;
  }
  uint64_t v13 = *(void *)v156;
  do
  {
    uint64_t v14 = 0;
    do
    {
      if (*(void *)v156 != v13) {
        objc_enumerationMutation(v11);
      }
      uint64_t v15 = *(void *)(*((void *)&v155 + 1) + 8 * v14);
      if (v15)
      {
        if ((*(void *)(v15 + 32) & 0xFFFFFFFFFFFFFFFELL) != 2)
        {
          long long v56 = [MEMORY[0x1E4F28B00] currentHandler];
          long long v57 = objc_msgSend(NSString, "stringWithUTF8String:", "NSArray<_UICollectionLayoutFramesQueryResult *> * _Nonnull _UIPinnedNonOverlappingFramesForContentFrameVisibleFrame(NSArray<_UICollectionLayoutFramesQueryResult *> *const __strong _Nonnull, CGRect, CGRect, BOOL)");
          [v56 handleFailureInFunction:v57 file:@"_UICollectionLayoutHelpers.m" lineNumber:1967 description:@"Invalid item: this only works with auxillary items. Please file a bug on UICollectionView."];
        }
        double v123 = *(double *)(v15 + 64);
        double v125 = *(double *)(v15 + 72);
        double v127 = *(double *)(v15 + 88);
        double rect = *(double *)(v15 + 80);
      }
      else
      {
        long long v58 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v59 = objc_msgSend(NSString, "stringWithUTF8String:", "NSArray<_UICollectionLayoutFramesQueryResult *> * _Nonnull _UIPinnedNonOverlappingFramesForContentFrameVisibleFrame(NSArray<_UICollectionLayoutFramesQueryResult *> *const __strong _Nonnull, CGRect, CGRect, BOOL)");
        [v58 handleFailureInFunction:v59 file:@"_UICollectionLayoutHelpers.m" lineNumber:1967 description:@"Invalid item: this only works with auxillary items. Please file a bug on UICollectionView."];

        double v125 = 0.0;
        double v127 = 0.0;
        double rect = 0.0;
        double v123 = 0.0;
      }
      if (dyld_program_sdk_at_least())
      {
        uint64_t v16 = -[_UICollectionLayoutFramesQueryResult auxillaryItem]((void *)v15);
        double v17 = [v16 boundarySupplementaryItem];

        if (v17) {
          unint64_t v18 = [v17 alignment];
        }
        else {
          unint64_t v18 = 0;
        }
      }
      else
      {
        unint64_t v18 = 0;
      }
      if (!CGRectIntersectsRect(*(CGRect *)v119, *(CGRect *)v120))
      {
        uint64_t v52 = [MEMORY[0x1E4F28B00] currentHandler];
        uint64_t v53 = objc_msgSend(NSString, "stringWithUTF8String:", "CGRect _UIPinnedFrameForFrameWithContainerFrameVisibleFrame(CGRect, CGRect, CGRect, NSRectAlignment)");
        double v54 = NSStringFromCGRect(*(CGRect *)v119);
        uint64_t v55 = NSStringFromCGRect(*(CGRect *)v120);
        [v52 handleFailureInFunction:v53, @"_UICollectionLayoutHelpers.m", 762, @"Attempted to lay out a pinned supplementary item whose frame %@ does not intersect with the visible bounds %@. Please file a bug against UICollectionView.", v54, v55 file lineNumber description];
      }
      v200.origin.CGFloat x = v123;
      v200.origin.CGFloat y = v125;
      v200.size.CGFloat height = v127;
      v200.size.CGFloat width = rect;
      double v20 = v123;
      double MinY = v125;
      if (CGRectContainsRect(*(CGRect *)v119, v200)) {
        goto LABEL_61;
      }
      CGRect v163 = CGRectIntersection(*(CGRect *)v120, *(CGRect *)v119);
      CGFloat x = v163.origin.x;
      CGFloat y = v163.origin.y;
      CGFloat width = v163.size.width;
      CGFloat height = v163.size.height;
      BOOL v25 = v18 - 2 < 3 || v18 == 0;
      BOOL v26 = v18 - 6 < 3 && v18 - 2 > 2;
      BOOL v27 = v26 || v18 == 0;
      double MinY = CGRectGetMinY(v163);
      v164.origin.CGFloat x = v123;
      v164.origin.CGFloat y = v125;
      v164.size.CGFloat height = v127;
      v164.size.CGFloat width = rect;
      double v28 = CGRectGetMinY(v164);
      v165.origin.CGFloat x = x;
      v165.origin.CGFloat y = y;
      v165.size.CGFloat width = width;
      v165.size.CGFloat height = height;
      double v29 = v28 - CGRectGetMinY(v165);
      if (((v18 == 0) | (v18 < 9) & (0x106u >> v18)) == 1 && v29 < 0.0)
      {
        v166.origin.CGFloat x = v123;
        v166.origin.CGFloat y = v125;
        v166.size.CGFloat height = v127;
        v166.size.CGFloat width = rect;
        CGFloat MinX = CGRectGetMinX(v166);
      }
      else
      {
        BOOL v32 = ((0x70u >> v18) & 1) != 0 && v18 <= 8 || v18 == 0;
        CGFloat MinX = v123;
        double MinY = v125;
        if (v32)
        {
          CGFloat MinX = v123;
          double MinY = v125;
          if (v29 > 0.0)
          {
            v167.origin.CGFloat x = v123;
            v167.origin.CGFloat y = v125;
            v167.size.CGFloat height = v127;
            v167.size.CGFloat width = rect;
            double MaxY = CGRectGetMaxY(v167);
            v168.origin.CGFloat x = x;
            v168.origin.CGFloat y = y;
            v168.size.CGFloat width = width;
            v168.size.CGFloat height = height;
            BOOL v26 = MaxY <= CGRectGetMaxY(v168);
            CGFloat MinX = v123;
            double MinY = v125;
            if (!v26)
            {
              v169.origin.CGFloat x = v123;
              v169.origin.CGFloat y = v125;
              v169.size.CGFloat height = v127;
              v169.size.CGFloat width = rect;
              CGFloat MinX = CGRectGetMinX(v169);
              v170.origin.CGFloat x = x;
              v170.origin.CGFloat y = y;
              v170.size.CGFloat width = width;
              v170.size.CGFloat height = height;
              double v34 = CGRectGetMaxY(v170);
              v171.origin.CGFloat x = v123;
              v171.origin.CGFloat y = v125;
              v171.size.CGFloat height = v127;
              v171.size.CGFloat width = rect;
              double MinY = v34 - CGRectGetHeight(v171);
            }
          }
        }
      }
      v172.origin.CGFloat x = MinX;
      v172.origin.CGFloat y = MinY;
      v172.size.CGFloat height = v127;
      v172.size.CGFloat width = rect;
      double v35 = CGRectGetMinY(v172);
      if (v35 >= CGRectGetMinY(*(CGRect *)v120))
      {
        v174.origin.CGFloat x = MinX;
        v174.origin.CGFloat y = MinY;
        v174.size.CGFloat height = v127;
        v174.size.CGFloat width = rect;
        double v36 = CGRectGetMaxY(v174);
        if (v36 > CGRectGetMaxY(*(CGRect *)v120))
        {
          v175.origin.CGFloat x = MinX;
          v175.origin.CGFloat y = MinY;
          v175.size.CGFloat height = v127;
          v175.size.CGFloat width = rect;
          CGFloat v37 = CGRectGetMinX(v175);
          double v38 = CGRectGetMaxY(*(CGRect *)v120);
          v176.origin.CGFloat x = MinX;
          v176.origin.CGFloat y = MinY;
          v176.size.CGFloat height = v127;
          v176.size.CGFloat width = rect;
          double MinY = v38 - CGRectGetHeight(v176);
          CGFloat MinX = v37;
        }
      }
      else
      {
        v173.origin.CGFloat x = MinX;
        v173.origin.CGFloat y = MinY;
        v173.size.CGFloat height = v127;
        v173.size.CGFloat width = rect;
        CGFloat MinX = CGRectGetMinX(v173);
        double MinY = CGRectGetMinY(*(CGRect *)v120);
      }
      v177.origin.CGFloat x = x;
      v177.origin.CGFloat y = y;
      v177.size.CGFloat width = width;
      v177.size.CGFloat height = height;
      double v20 = CGRectGetMinX(v177);
      v178.origin.CGFloat x = v123;
      v178.origin.CGFloat y = v125;
      v178.size.CGFloat height = v127;
      v178.size.CGFloat width = rect;
      double v39 = CGRectGetMinX(v178);
      v179.origin.CGFloat x = x;
      v179.origin.CGFloat y = y;
      v179.size.CGFloat width = width;
      v179.size.CGFloat height = height;
      double v40 = v39 - CGRectGetMinX(v179);
      char v41 = !v25;
      if (v40 >= 0.0) {
        char v41 = 1;
      }
      if (v41)
      {
        char v42 = !v27;
        if (v40 <= 0.0) {
          char v42 = 1;
        }
        if (v42) {
          goto LABEL_55;
        }
        v181.origin.CGFloat x = MinX;
        v181.origin.CGFloat y = MinY;
        v181.size.CGFloat height = v127;
        v181.size.CGFloat width = rect;
        double MaxX = CGRectGetMaxX(v181);
        v182.origin.CGFloat x = x;
        v182.origin.CGFloat y = y;
        v182.size.CGFloat width = width;
        v182.size.CGFloat height = height;
        if (MaxX <= CGRectGetMaxX(v182))
        {
LABEL_55:
          double v20 = MinX;
          goto LABEL_56;
        }
        v183.origin.CGFloat x = x;
        v183.origin.CGFloat y = y;
        v183.size.CGFloat width = width;
        v183.size.CGFloat height = height;
        double v44 = CGRectGetMaxX(v183);
        v184.origin.CGFloat x = MinX;
        v184.origin.CGFloat y = MinY;
        v184.size.CGFloat height = v127;
        v184.size.CGFloat width = rect;
        double v20 = v44 - CGRectGetWidth(v184);
      }
      v180.origin.CGFloat x = MinX;
      v180.origin.CGFloat y = MinY;
      v180.size.CGFloat height = v127;
      v180.size.CGFloat width = rect;
      double MinY = CGRectGetMinY(v180);
LABEL_56:
      v185.origin.CGFloat x = v20;
      v185.origin.CGFloat y = MinY;
      v185.size.CGFloat height = v127;
      v185.size.CGFloat width = rect;
      double v45 = CGRectGetMinX(v185);
      if (v45 >= CGRectGetMinX(*(CGRect *)v120))
      {
        v186.origin.CGFloat x = v20;
        v186.origin.CGFloat y = MinY;
        v186.size.CGFloat height = v127;
        v186.size.CGFloat width = rect;
        double v47 = CGRectGetMaxX(v186);
        if (v47 <= CGRectGetMaxX(*(CGRect *)v120)) {
          goto LABEL_61;
        }
        double v48 = CGRectGetMaxX(*(CGRect *)v120);
        v187.origin.CGFloat x = v20;
        v187.origin.CGFloat y = MinY;
        v187.size.CGFloat height = v127;
        v187.size.CGFloat width = rect;
        double v46 = v48 - CGRectGetWidth(v187);
      }
      else
      {
        double v46 = CGRectGetMinX(*(CGRect *)v120);
      }
      v188.origin.CGFloat x = v20;
      v188.origin.CGFloat y = MinY;
      v188.size.CGFloat height = v127;
      v188.size.CGFloat width = rect;
      double MinY = CGRectGetMinY(v188);
      double v20 = v46;
LABEL_61:
      if (v15)
      {
        BOOL v49 = vabdd_f64(v125, MinY) > 0.001;
        char v50 = vabdd_f64(v123, v20) > 0.001 || v49;
        uint64_t v51 = -[_UICollectionLayoutFramesQueryResult initWithFrame:adjustedForPinning:index:zIndex:resultKind:item:auxillaryKind:supplementaryEnrollmentIdentifier:]((id *)[_UICollectionLayoutFramesQueryResult alloc], v50, *(void **)(v15 + 16), *(void **)(v15 + 24), *(void **)(v15 + 32), *(void **)(v15 + 40), *(void **)(v15 + 56), *(void **)(v15 + 48), v20, MinY, rect, v127);
      }
      else
      {
        uint64_t v51 = 0;
      }
      [v118 addObject:v51];

      ++v14;
    }
    while (v12 != v14);
    uint64_t v60 = [v11 countByEnumeratingWithState:&v155 objects:v160 count:16];
    uint64_t v12 = v60;
  }
  while (v60);
LABEL_71:

  uint64_t v61 = [v11 count];
  if (v61 > 1)
  {
    char v62 = dyld_program_sdk_at_least();
    uint64_t v63 = 0;
    do
    {
      recta = [v118 objectAtIndexedSubscript:v63];
      uint64_t v64 = -[_UICollectionLayoutFramesQueryResult auxillaryItem](recta);
      v128 = [v64 boundarySupplementaryItem];

      uint64_t v65 = [v128 alignment];
      uint64_t v66 = [v128 zIndex];
      if (recta)
      {
        CGFloat v68 = recta[8];
        CGFloat v67 = recta[9];
        CGFloat v69 = recta[10];
        CGFloat v70 = recta[11];
      }
      else
      {
        CGFloat v67 = 0.0;
        CGFloat v69 = 0.0;
        CGFloat v70 = 0.0;
        CGFloat v68 = 0.0;
      }
      uint64_t v71 = 0;
      do
      {
        if (v63 == v71)
        {
          BOOL v72 = 0;
        }
        else
        {
          char v73 = [v118 objectAtIndexedSubscript:v71];
          uint64_t v74 = -[_UICollectionLayoutFramesQueryResult auxillaryItem](v73);
          char v75 = [v74 boundarySupplementaryItem];

          uint64_t v76 = [v75 alignment];
          uint64_t v77 = [v75 zIndex];
          if (v73)
          {
            uint64_t v78 = v73[8];
            uint64_t v79 = v73[9];
            uint64_t v80 = v73[10];
            uint64_t v81 = v73[11];
          }
          else
          {
            uint64_t v79 = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            uint64_t v78 = 0;
          }
          BOOL v72 = 0;
          if (v66 == v77) {
            char v82 = 0;
          }
          else {
            char v82 = v62;
          }
          char v83 = a2;
          if (v65 == v76) {
            char v83 = 0;
          }
          if ((v82 & 1) == 0 && (v83 & 1) == 0)
          {
            v189.origin.CGFloat x = v68;
            v189.origin.CGFloat y = v67;
            v189.size.CGFloat width = v69;
            v189.size.CGFloat height = v70;
            BOOL v72 = CGRectIntersectsRect(v189, *(CGRect *)&v78);
          }
        }
        ++v71;
      }
      while (v71 < v61 && !v72);

      char v84 = ++v63 >= v61 || v72;
    }
    while ((v84 & 1) == 0);
    if (v72)
    {
      uint64_t v149 = 0;
      v150 = &v149;
      uint64_t v151 = 0x3032000000;
      v152 = __Block_byref_object_copy__31;
      v153 = __Block_byref_object_dispose__31;
      id v154 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      v148[0] = MEMORY[0x1E4F143A8];
      v148[1] = 3221225472;
      v148[2] = ___UIPinnedNonOverlappingFramesForContentFrameVisibleFrame_block_invoke;
      v148[3] = &unk_1E52E1230;
      v148[4] = &v149;
      [v118 enumerateObjectsUsingBlock:v148];
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___UIPinnedNonOverlappingFramesForContentFrameVisibleFrame_block_invoke_3;
      aBlock[3] = &unk_1E52E1278;
      id v85 = v118;
      id v146 = v85;
      id v147 = &__block_literal_global_101;
      CGRect v117 = (double (**)(void *, uint64_t))_Block_copy(aBlock);
      v144[0] = MEMORY[0x1E4F143A8];
      v144[1] = 3221225472;
      v144[2] = ___UIPinnedNonOverlappingFramesForContentFrameVisibleFrame_block_invoke_4;
      v144[3] = &__block_descriptor_96_e8_B16__0Q8l;
      v144[4] = *(void *)v119;
      v144[5] = *(void *)&v119[8];
      v144[6] = *(void *)&v119[16];
      v144[7] = *(void *)&v119[24];
      v144[8] = *(void *)v120;
      v144[9] = *(void *)&v120[8];
      v144[10] = *(void *)&v120[16];
      v144[11] = *(void *)&v120[24];
      v121 = (unsigned int (**)(void *, uint64_t))_Block_copy(v144);
      long long v142 = 0u;
      long long v143 = 0u;
      long long v140 = 0u;
      long long v141 = 0u;
      uint64_t v86 = [&unk_1ED3EF278 countByEnumeratingWithState:&v140 objects:v159 count:16];
      if (!v86) {
        goto LABEL_126;
      }
      uint64_t v122 = *(void *)v141;
      while (1)
      {
        uint64_t v124 = v86;
        for (uint64_t i = 0; i != v124; ++i)
        {
          if (*(void *)v141 != v122) {
            objc_enumerationMutation(&unk_1ED3EF278);
          }
          uint64_t v88 = [*(id *)(*((void *)&v140 + 1) + 8 * i) integerValue];
          v190.origin.CGFloat x = v117[2](v117, v88);
          CGFloat rectb = v190.size.width;
          CGFloat v89 = v190.origin.x;
          CGFloat v90 = v190.origin.y;
          CGFloat v91 = v190.size.height;
          if (!CGRectIsEmpty(v190) && v121[2](v121, v88))
          {
            uint64_t v92 = 0;
            double v126 = v90;
            double v129 = v89;
LABEL_108:
            CGFloat v93 = [v85 objectAtIndexedSubscript:v92];
            if (___UIPinnedNonOverlappingFramesForContentFrameVisibleFrame_block_invoke_2((uint64_t)v93, v93, v88)) {
              goto LABEL_121;
            }
            CGFloat v94 = (void *)v150[5];
            CGFloat v95 = [NSNumber numberWithInteger:v92];
            CGFloat v96 = [v94 objectForKeyedSubscript:v95];
            [v96 CGRectValue];
            CGFloat v98 = v97;
            CGFloat v100 = v99;
            CGFloat v102 = v101;
            CGFloat v104 = v103;

            v191.origin.CGFloat x = v98;
            v191.origin.CGFloat y = v100;
            v191.size.CGFloat width = v102;
            v191.size.CGFloat height = v104;
            v201.origin.CGFloat x = v89;
            v201.origin.CGFloat y = v90;
            v201.size.CGFloat width = rectb;
            v201.size.CGFloat height = v91;
            if (!CGRectIntersectsRect(v191, v201)) {
              goto LABEL_121;
            }
            if ((v88 & 8) != 0)
            {
              v192.origin.CGFloat x = v89;
              v192.origin.CGFloat y = v90;
              v192.size.CGFloat width = rectb;
              v192.size.CGFloat height = v91;
              double v106 = CGRectGetMinX(v192);
              v193.origin.CGFloat x = v98;
              v193.origin.CGFloat y = v100;
              v193.size.CGFloat width = v102;
              v193.size.CGFloat height = v104;
              double v105 = v106 - CGRectGetWidth(v193);
              goto LABEL_116;
            }
            if (v88)
            {
              v194.origin.CGFloat x = v89;
              v194.origin.CGFloat y = v90;
              v194.size.CGFloat width = rectb;
              v194.size.CGFloat height = v91;
              double v107 = CGRectGetMaxY(v194);
            }
            else
            {
              if ((v88 & 4) == 0)
              {
                if ((v88 & 2) != 0)
                {
                  v199.origin.CGFloat x = v89;
                  v199.origin.CGFloat y = v90;
                  v199.size.CGFloat width = rectb;
                  v199.size.CGFloat height = v91;
                  double v105 = CGRectGetMaxX(v199);
                }
                else
                {
                  double v105 = v98;
                }
LABEL_116:
                double v107 = v100;
LABEL_120:
                v197.origin.CGFloat x = v98;
                v197.origin.CGFloat y = v100;
                v197.size.CGFloat width = v102;
                v197.size.CGFloat height = v104;
                double v109 = CGRectGetWidth(v197);
                v198.origin.CGFloat x = v98;
                v198.origin.CGFloat y = v100;
                v198.size.CGFloat width = v102;
                v198.size.CGFloat height = v104;
                CGRect v110 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGRect:", v105, v107, v109, CGRectGetHeight(v198));
                CGRect v111 = (void *)v150[5];
                CGRect v112 = [NSNumber numberWithInteger:v92];
                [v111 setObject:v110 forKeyedSubscript:v112];

                CGFloat v90 = v126;
                CGFloat v89 = v129;

LABEL_121:
                if (v61 == ++v92) {
                  continue;
                }
                goto LABEL_108;
              }
              v195.origin.CGFloat x = v89;
              v195.origin.CGFloat y = v90;
              v195.size.CGFloat width = rectb;
              v195.size.CGFloat height = v91;
              double v108 = CGRectGetMinY(v195);
              v196.origin.CGFloat x = v98;
              v196.origin.CGFloat y = v100;
              v196.size.CGFloat width = v102;
              v196.size.CGFloat height = v104;
              double v107 = v108 - CGRectGetHeight(v196);
            }
            double v105 = v98;
            goto LABEL_120;
          }
        }
        uint64_t v86 = [&unk_1ED3EF278 countByEnumeratingWithState:&v140 objects:v159 count:16];
        if (!v86)
        {
LABEL_126:
          uint64_t v134 = 0;
          long long v135 = &v134;
          uint64_t v136 = 0x3032000000;
          v137 = __Block_byref_object_copy__31;
          long long v138 = __Block_byref_object_dispose__31;
          id v139 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          v133[0] = MEMORY[0x1E4F143A8];
          v133[1] = 3221225472;
          v133[2] = ___UIPinnedNonOverlappingFramesForContentFrameVisibleFrame_block_invoke_555;
          v133[3] = &unk_1E52E12C0;
          v133[4] = &v149;
          v133[5] = &v134;
          [v85 enumerateObjectsUsingBlock:v133];
          id v113 = (id)v135[5];
          _Block_object_dispose(&v134, 8);

          _Block_object_dispose(&v149, 8);
          CGRect v114 = v118;
          goto LABEL_128;
        }
      }
    }
  }
  CGRect v114 = v118;
  id v113 = v118;
LABEL_128:

  return v113;
}

void sub_1856539CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

id _viewControllerIfStatusBarPartStyleProviding(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    char isKindOfClass = 1;
  }
  else
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  if (qword_1EB25BB48 != -1) {
    dispatch_once(&qword_1EB25BB48, &__block_literal_global_177_0);
  }
  if (byte_1EB25BB25) {
    unsigned __int8 v3 = objc_opt_respondsToSelector();
  }
  else {
    unsigned __int8 v3 = 0;
  }
  if ((isKindOfClass | v3)) {
    double v4 = v1;
  }
  else {
    double v4 = 0;
  }
  id v5 = v4;

  return v5;
}

uint64_t _resolvePreferredInternalStatusBarStyleFromClientWithTraitEnvironment(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 != 4)
  {
    if (dyld_program_sdk_at_least())
    {
      double v4 = [v3 traitCollection];
      uint64_t v5 = [v4 userInterfaceStyle];

      if (!a1 && v5)
      {
        if (v5 == 2) {
          uint64_t v6 = 1;
        }
        else {
          uint64_t v6 = 2;
        }
        double v7 = [v3 traitCollection];
        uint64_t v8 = [v7 userInterfaceIdiom];

        if (v8 == 3) {
          a1 = v6;
        }
        else {
          a1 = v6 << 6;
        }
      }
    }
    else if (!a1)
    {
      unint64_t v9 = [v3 traitCollection];
      uint64_t v10 = [v9 userInterfaceIdiom];

      if (v10 == 3) {
        a1 = 2;
      }
      else {
        a1 = 128;
      }
    }
  }

  return a1;
}

void sub_185657A0C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t UIButton.Configuration.title.getter()
{
  return sub_18540DA3C((SEL *)&selRef_title);
}

uint64_t static UIButton.Configuration.plain()@<X0>(uint64_t *a1@<X8>)
{
  return sub_18558C480((SEL *)&selRef_plainButtonConfiguration, a1);
}

ValueMetadata *type metadata accessor for UIButton.Configuration.Size()
{
  return &type metadata for UIButton.Configuration.Size;
}

id UIButton.Configuration.titleTextAttributesTransformer.setter(uint64_t *a1)
{
  return sub_1858731BC(a1, (uint64_t)&unk_1ED0D9470, (uint64_t)sub_18549B7BC, (uint64_t)&block_descriptor_41, (SEL *)&selRef_setTitleTextAttributesTransformer_);
}

id UIButton.Configuration.titlePadding.setter(double a1)
{
  return sub_1856F6EC8((SEL *)&selRef_setTitlePadding_, a1);
}

uint64_t _s29AnimatablePropertyTransformerC17RunningProgressesV5EntryVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *_s15PropertyChangesV4InfoVMa()
{
  return &_s15PropertyChangesV4InfoVN;
}

uint64_t static UITraitCollection.systemTraitsAffectingColorAppearance.getter()
{
  return sub_18549BB48((SEL *)&selRef__systemTraitTokensAffectingColorAppearance);
}

uint64_t sub_185658E74(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v8 = 1;
  char v3 = MEMORY[0x18C1006D0](a1, &v7);
  char v4 = v8;
  uint64_t v5 = v7;
  if (v8) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v4;
  return v3 & 1;
}

uint64_t sub_185658ED0()
{
  return sub_186A1D87C();
}

uint64_t UIConfigurationTextAttributesTransformer.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

ValueMetadata *type metadata accessor for UIConfigurationTextAttributesTransformer()
{
  return &type metadata for UIConfigurationTextAttributesTransformer;
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

ValueMetadata *type metadata accessor for UIContentUnavailableConfiguration()
{
  return &type metadata for UIContentUnavailableConfiguration;
}

uint64_t static UIContentUnavailableConfiguration.loading()@<X0>(uint64_t *a1@<X8>)
{
  return sub_18575DC34((SEL *)&selRef_loadingConfiguration, a1);
}

void UIContentUnavailableConfiguration.text.setter(uint64_t a1, uint64_t a2)
{
}

void UIContentUnavailableConfiguration.background.setter(uint64_t *a1)
{
}

uint64_t sub_185658F68()
{
  uint64_t result = type metadata accessor for SpringAnimationParameters();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for SpringAnimationParameters()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for UIControlPointerHoverStyleDriver(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 113)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for UIListContentConfiguration()
{
  return &type metadata for UIListContentConfiguration;
}

void UIBackgroundConfiguration.backgroundColor.setter(void *a1)
{
}

uint64_t _s14descr1ED0B38D9V21RunningAnimationEntryCMa()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1856590A4()
{
  uint64_t result = type metadata accessor for CompoundSpringAnimationParameters();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CompoundSpringAnimationParameters()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1856591B8(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t static _UIKitNumericRawRepresentable.- infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_18548ABC8(a1, a2, MEMORY[0x1E4FBBCD8], a3);
}

uint64_t static _UIKitNumericRawRepresentable.+ infix(_:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_18548ABC8(a1, a2, MEMORY[0x1E4FBBCD0], a3);
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.TrackingAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.TrackingAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.KernAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.KernAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.StrikethroughStyleAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.AdaptiveImageGlyphAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.ForegroundColorAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.ForegroundColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.BackgroundColorAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.BackgroundColorAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.UnderlineStyleAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.UnderlineStyleAttribute;
}

uint64_t sub_185659270(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB255B70, &qword_1EB255B58);
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.BaselineOffsetAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.BaselineOffsetAttribute;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.AttachmentAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.AttachmentAttribute;
}

uint64_t _UISystemGestureLocationForTouchInView(void *a1, void *a2, void *a3)
{
  uint64_t v6 = [a1 view];
  if (a2) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = a1;
  }
  [v7 locationInView:v6];
  double v9 = v8;
  double v11 = v10;

  return _ConvertDeviceReferenceSpacePointToView(a3, v9, v11);
}

BOOL _isViewKeyboardLayoutPresent(void *a1)
{
  unint64_t v1 = _getViewKeyboardLayout(a1);
  BOOL v2 = v1 != 0;

  return v2;
}

id _getViewKeyboardLayout(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector())
  {
    BOOL v2 = [v1 _keyboardLayoutView];
  }
  else
  {
    BOOL v2 = 0;
  }

  return v2;
}

uint64_t _UIBundleIDIsAccountBased(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F74230];
  id v2 = a1;
  char v3 = [v1 sharedConnection];
  uint64_t v4 = [v3 isBundleIDAccountBasedForDragDrop:v2];

  return v4;
}

uint64_t allowInternalPreferences()
{
  if (os_variant_has_internal_diagnostics()) {
    return 1;
  }
  return _os_feature_enabled_impl();
}

double _UISheetSize(void *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7 = qword_1EB25FFA8;
  id v8 = a1;
  if (v7 != -1) {
    dispatch_once(&qword_1EB25FFA8, &__block_literal_global_4_5);
  }
  [(id)qword_1EB25FFA0 _setContainerView:v8];
  [v8 bounds];
  objc_msgSend((id)qword_1EB25FFA0, "_setContainerBounds:");
  [v8 safeAreaInsets];
  objc_msgSend((id)qword_1EB25FFA0, "_setContainerSafeAreaInsets:");
  double v9 = [v8 traitCollection];

  [(id)qword_1EB25FFA0 _setContainerTraitCollection:v9];
  [(id)qword_1EB25FFA0 _setMode:a2];
  double v10 = [(id)qword_1EB25FFA0 _presentedViewController];
  objc_msgSend(v10, "setPreferredContentSize:", a3, a4);

  [(id)qword_1EB25FFA0 _invalidatePreferredSize];
  [(id)qword_1EB25FFA0 _frameOfPresentedViewInContainerView];
  return v11;
}

void _UIScreenWriteDisplayConfiguration(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(id *)(a1 + 160);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB25C548);
  objc_storeStrong((id *)(a1 + 160), a2);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB25C548);
  uint64_t v6 = [v4 identity];
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a1 + 200) & 0xFFFEFFFF | (([v6 type] == 8) << 16);

  if (objc_msgSend((id)a1, sel_allowsWeakReference)) {
    uint64_t v7 = (void *)a1;
  }
  else {
    uint64_t v7 = 0;
  }
  objc_initWeak(&location, v7);
  uint64_t v10 = MEMORY[0x1E4F143A8];
  objc_copyWeak(&v11, &location);
  BSDispatchMain();
  id v8 = objc_msgSend(v5, "CADisplay", v10, 3221225472, ___UIScreenWriteDisplayConfiguration_block_invoke, &unk_1E52DC308);
  [v8 removeObserver:a1 forKeyPath:@"cloned" context:&__UIScreenCapturedKey];

  double v9 = [*(id *)(a1 + 160) CADisplay];
  [v9 addObserver:a1 forKeyPath:@"cloned" options:5 context:&__UIScreenCapturedKey];

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);
}

void sub_18565F56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIPencilPreferredActionForKey(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ([a1 isEqualToString:@"UIPencilPreferredSqueezeAction"]) {
    uint64_t v2 = 5;
  }
  else {
    uint64_t v2 = 1;
  }
  char v3 = _UIKitUserDefaults();
  id v4 = [v3 objectForKey:a1];

  if (v4)
  {
    uint64_t v2 = [v4 integerValue];
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("PencilPreferences", &qword_1EB262D88);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      uint64_t v6 = *(NSObject **)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v16 = 134218242;
        uint64_t v17 = v2;
        __int16 v18 = 2112;
        CGRect v19 = a1;
        uint64_t v7 = "NSUserDefaults returns value: %li; for key: %@; ";
LABEL_22:
        _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v16, 0x16u);
      }
    }
  }
  else
  {
    unint64_t v8 = __UILogGetCategoryCachedImpl("PencilPreferences", &qword_1EB262D78);
    if (*(unsigned char *)v8)
    {
      uint64_t v15 = *(NSObject **)(v8 + 8);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = 138412290;
        uint64_t v17 = (uint64_t)a1;
        _os_log_impl(&dword_1853B0000, v15, OS_LOG_TYPE_ERROR, "NSUserDefaults nil object for key: %@", (uint8_t *)&v16, 0xCu);
      }
    }
    unint64_t v9 = __UILogGetCategoryCachedImpl("PencilPreferences", &qword_1EB262D80);
    if (*(unsigned char *)v9)
    {
      uint64_t v6 = *(NSObject **)(v9 + 8);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v16 = 134218242;
        uint64_t v17 = v2;
        __int16 v18 = 2112;
        CGRect v19 = a1;
        uint64_t v7 = "Returning default value: %li; for key: %@";
        goto LABEL_22;
      }
    }
  }
  int v10 = _AXSAllowOpaqueTouchGestures();
  unint64_t v11 = __UILogGetCategoryCachedImpl("PencilPreferences", &qword_1EB262D90);
  if (*(unsigned char *)v11)
  {
    uint64_t v13 = *(NSObject **)(v11 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = @"YES";
      if (!v10) {
        uint64_t v14 = @"NO";
      }
      int v16 = 138412290;
      uint64_t v17 = (uint64_t)v14;
      _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "Accessibility returns: %@;", (uint8_t *)&v16, 0xCu);
    }
  }
  if (!v10) {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t _UIPencilPrefersPencilOnlyDrawingForKey()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = _UIKitUserDefaults();
  uint64_t v1 = [v0 BOOLForKey:@"UIPencilOnlyDrawWithPencilKey"];

  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("PencilPreferences", &_UIPencilPrefersPencilOnlyDrawingForKey___s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    id v4 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 134218242;
      uint64_t v6 = v1;
      __int16 v7 = 2112;
      unint64_t v8 = @"UIPencilOnlyDrawWithPencilKey";
      _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "NSUserDefaults returns value: %li; for key: %@; ",
        (uint8_t *)&v5,
        0x16u);
    }
  }
  return v1;
}

uint64_t _UIPencilPrefersHoverToolPreview()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = _UIKitUserDefaults();
  uint64_t v1 = [v0 objectForKey:@"PKUIPencilHoverPreviewEnabledKey"];

  if (v1 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v2 = [v1 BOOLValue];
  }
  else {
    uint64_t v2 = 1;
  }
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("PencilPreferences", &_UIPencilPrefersHoverToolPreview___s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    int v5 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 134218498;
      uint64_t v7 = v2;
      __int16 v8 = 2112;
      uint64_t v9 = v1;
      __int16 v10 = 2112;
      unint64_t v11 = @"PKUIPencilHoverPreviewEnabledKey";
      _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "NSUserDefaults returns value: %li; from object value: %@; for key: %@; ",
        (uint8_t *)&v6,
        0x20u);
    }
  }

  return v2;
}

void _UIHyperInteractorDirtyTranslatedUnconstrainedPoint(void *a1)
{
  uint64_t v1 = a1;
  if ((v1[42] & 8) != 0)
  {
    v1[42] &= v1[42] & 0x20 ^ 0xFFFFFFF7;
    char v3 = v1;
    _UIHyperInteractorDirtyClosestPoint(v1);
    int v2 = v3[42];
    if ((v2 & 0x80) != 0) {
      v3[42] = v2 & 0xFFFFFF7F;
    }
    _UIHyperInteractorDirtyUnconstrainedVector(v3);
    _UIHyperInteractorDirtyExtentVector(v3);
    uint64_t v1 = v3;
  }
}

void _UIHyperInteractorDirtyExtentVector(void *a1)
{
  uint64_t v1 = a1;
  int v2 = v1[42];
  if ((v2 & 0x200) != 0)
  {
    v1[42] = v2 & 0xFFFFFDFF;
    int v5 = v1;
    _UIHyperInteractorDirtyUnconstrainedExtentVector(v1);
    uint64_t v1 = v5;
    int v3 = v5[42];
    if ((v3 & 0x400) != 0)
    {
      v5[42] = v3 & 0xFFFFFBFF;
      id v4 = v5;
      _UIHyperInteractorDirtyUnconstrainedExtentVector(v4);
      _UIHyperInteractorDirtyConstrainedFraction(v4);

      uint64_t v1 = v5;
    }
  }
}

void _UIHyperInteractorDirtyUnconstrainedExtentVector(void *a1)
{
  uint64_t v1 = a1;
  int v2 = v1[42];
  if ((v2 & 0x800) != 0)
  {
    v1[42] = v2 & 0xFFFFF7FF;
    uint64_t v7 = v1;
    int v3 = v1;
    int v4 = v7[42];
    if ((v4 & 0x1000) != 0)
    {
      v7[42] = v4 & 0xFFFFEFFF;
      _UIHyperInteractorDirtyConstrainedFraction(v3);
      int v5 = v7[42];
      if ((v5 & 0x8000) != 0) {
        v7[42] = v5 & 0xFFFF7FFF;
      }
    }

    uint64_t v1 = v7;
    int v6 = v7[42];
    if ((v6 & 0x4000) != 0)
    {
      v7[42] = v6 & 0xFFFFBFFF;
      _UIHyperInteractorDirtyPresentationPoint(v3);
      uint64_t v1 = v7;
      int v6 = v7[42];
    }
    if ((v6 & 0x8000) != 0) {
      v1[42] = v6 & 0xFFFF7FFF;
    }
  }
}

void _UIHyperInteractorDirtyUnconstrainedVector(void *a1)
{
  uint64_t v1 = a1;
  int v2 = v1[42];
  if ((v2 & 0x100) != 0)
  {
    v1[42] = v2 & 0xFFFFFEFF;
    int v4 = v1;
    _UIHyperInteractorDirtyUnconstrainedExtentVector(v1);
    uint64_t v1 = v4;
    int v3 = v4[42];
    if ((v3 & 0x8000) != 0) {
      v4[42] = v3 & 0xFFFF7FFF;
    }
  }
}

void _UIHyperInteractorDirtyClosestPoint(void *a1)
{
  uint64_t v1 = a1;
  if ((v1[42] & 0x40) != 0)
  {
    v1[42] &= v1[42] & 0x80 ^ 0xFFFFFFBF;
    int v3 = v1;
    _UIHyperInteractorDirtyUnconstrainedVector(v1);
    _UIHyperInteractorDirtyExtentVector(v3);
    uint64_t v1 = v3;
    int v2 = v3[42];
    if ((v2 & 0x4000) != 0)
    {
      v3[42] = v2 & 0xFFFFBFFF;
      _UIHyperInteractorDirtyPresentationPoint(v3);
      uint64_t v1 = v3;
    }
  }
}

void _UIHyperInteractorDirtyPresentationPoint(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  int v3 = *((_DWORD *)v1 + 42);
  if ((v3 & 0x10000) != 0)
  {
    *((_DWORD *)v1 + 42) = v3 & 0xFFFEFFFF;
    uint64_t v4 = *((void *)v1 + 33);
    if (v4)
    {
      int v5 = v2;
      (*(void (**)(void))(v4 + 16))();
      int v2 = v5;
    }
  }
}

void _UIHyperInteractorDirtyConstrainedFraction(void *a1)
{
  id v1 = a1;
  int v2 = v1[42];
  if ((v2 & 0x2000) != 0)
  {
    unsigned int v3 = v2 & 0xFFFFDFFF;
    v1[42] = v2 & 0xFFFFDFFF;
    if ((v2 & 0x4000) != 0)
    {
      v1[42] = v2 & 0xFFFF9FFF;
      uint64_t v4 = v1;
      _UIHyperInteractorDirtyPresentationPoint(v1);
      id v1 = v4;
      unsigned int v3 = v4[42];
    }
    if ((v3 & 0x8000) != 0) {
      v1[42] = v3 & 0xFFFF7FFF;
    }
  }
}

id __scrollViewAncestorOfView(id a1, char a2)
{
  if (a1)
  {
    uint64_t v4 = a1;
    while (!objc_msgSend(v4, "__isKindOfUIScrollView")
         || (a2 & 1) == 0 && ([v4 _forwardsToParentScroller] & 1) != 0)
    {
      a1 = (id)[v4 superview];
      uint64_t v4 = a1;
      if (!a1) {
        goto LABEL_9;
      }
    }
    a1 = v4;
LABEL_9:
    uint64_t v2 = vars8;
  }
  return a1;
}

double _BoundingRectForTouches(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)v21;
  double v8 = -INFINITY;
  double v9 = INFINITY;
  double v10 = INFINITY;
  double v11 = -INFINITY;
  do
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if (*(void *)v21 != v7) {
        objc_enumerationMutation(v3);
      }
      uint64_t v13 = *(void **)(*((void *)&v20 + 1) + 8 * i);
      if (!a2 || [*(id *)(*((void *)&v20 + 1) + 8 * i) phase] <= 2)
      {
        uint64_t v14 = [v13 window];
        [v13 locationInView:0];
        objc_msgSend(v14, "_convertPointToSceneReferenceSpace:");
        double v16 = v15;
        double v18 = v17;

        double v9 = fmin(v9, v16);
        double v10 = fmin(v10, v18);
        double v8 = fmax(v8, v16);
        ++v6;
        double v11 = fmax(v11, v18);
      }
    }
    uint64_t v5 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
  }
  while (v5);
  if (v6 < 1) {
LABEL_12:
  }
    double v9 = *MEMORY[0x1E4F1DB20];

  return v9;
}

void __forwardTouchMethod_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 _wantsForwardingFromResponder:*(void *)(a1 + 32) toNextResponder:*(void *)(a1 + 40) withEvent:*(void *)(a1 + 48)])objc_msgSend(*(id *)(a1 + 56), "addObject:", v3); {
}
  }

BOOL _UIResponderForwarderWantsForwardingFromResponder(void *a1, const char *a2, void *a3, void *a4, void *a5)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a3;
  uint64_t v11 = a4;
  id v12 = a5;
  uint64_t v13 = [v9 _eventComponentPhase];
  unint64_t v14 = [v13 value];

  if (v14 > 4 || v14 == 2)
  {
    if (!os_variant_has_internal_diagnostics())
    {
      long long v21 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UIResponderForwarderWantsForwardingFromResponder___s_category)+ 8);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].receiver) = 0;
        _os_log_impl(&dword_1853B0000, v21, OS_LOG_TYPE_ERROR, "Unexpected touch phase during forwarding", (uint8_t *)buf, 2u);
      }
      goto LABEL_12;
    }
    IsDeallocating = __UIFaultDebugAssertLog();
    if (!os_log_type_enabled(IsDeallocating, OS_LOG_TYPE_FAULT))
    {
LABEL_34:

LABEL_12:
      BOOL v15 = 0;
      goto LABEL_31;
    }
LABEL_39:
    LOWORD(buf[0].receiver) = 0;
    _os_log_fault_impl(&dword_1853B0000, IsDeallocating, OS_LOG_TYPE_FAULT, "Unexpected touch phase during forwarding", (uint8_t *)buf, 2u);
    goto LABEL_34;
  }
  os_variant_has_internal_diagnostics();
  if (([v9 _isAbandoningForwardingRecord] & 1) == 0)
  {
    double v16 = [v9 _mutableForwardingRecord];
    uint64_t v41 = 0;
    char v42 = &v41;
    uint64_t v43 = 0x3032000000;
    double v44 = __Block_byref_object_copy__209;
    double v45 = __Block_byref_object_dispose__209;
    id v46 = 0;
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    v38[2] = ___UIResponderForwarderWantsForwardingFromResponder_block_invoke;
    v38[3] = &unk_1E52EE978;
    id v17 = (id)v11;
    id v39 = v17;
    double v40 = &v41;
    [v16 enumerateObjectsUsingBlock:v38];
    uint64_t v18 = v42[5];
    if (v14)
    {
      if (v18)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v18 + 8));
        BOOL v20 = WeakRetained == v10;

        if (!v20)
        {
          [v9 _abandonForwardingRecord];
          BOOL v15 = 1;
LABEL_30:

          _Block_object_dispose(&v41, 8);
          goto LABEL_31;
        }
      }
LABEL_28:
      double v29 = v42;
      uint64_t v30 = v42[5];
      if (v30)
      {
        *(void *)(v30 + 24) = v14;
        BOOL v15 = v29[5] != 0;
      }
      else
      {
        BOOL v15 = 0;
      }
      goto LABEL_30;
    }
    if (v18) {
      goto LABEL_28;
    }
    if (![v9 _eventComponentType]
      && (objc_opt_respondsToSelector() & 1) != 0
      && [v17 _shouldApplyExclusiveTouch])
    {
      long long v22 = [v9 window];
      long long v23 = [v12 touchesForWindow:v22];
      if ((unint64_t)[v23 count] >= 2)
      {

        goto LABEL_28;
      }
      if ((objc_opt_respondsToSelector() & 1) != 0 && [v17 _isInExclusiveTouchSubviewTree])
      {
        [v22 _setExclusiveTouchView:v17];
        CGFloat v37 = [v12 _exclusiveTouchWindows];
        [v37 addObject:v22];
      }
    }
    if ((_objc_rootIsDeallocating() & 1) == 0 && !_objc_rootIsDeallocating())
    {
      CGRect v24 = [_UIEventComponentForwardingRecipient alloc];
      id v25 = v17;
      id v26 = v10;
      if (v24)
      {
        buf[0].receiver = v24;
        buf[0].super_class = (Class)_UIEventComponentForwardingRecipient;
        BOOL v27 = (_UIEventComponentForwardingRecipient *)[(objc_super *)buf init];
        CGRect v24 = v27;
        if (v27)
        {
          objc_storeWeak((id *)&v27->responder, v25);
          objc_storeWeak((id *)&v24->fromResponder, v26);
        }
      }

      double v28 = (void *)v42[5];
      v42[5] = (uint64_t)v24;

      [v16 addObject:v42[5]];
      goto LABEL_28;
    }
    memset(buf, 0, sizeof(buf));
    long long v33 = MEMORY[0x1E4F14500];
    id v34 = MEMORY[0x1E4F14500];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      uint64_t v11 = 3;
    }
    else {
      uint64_t v11 = 2;
    }
    IsDeallocating = _objc_rootIsDeallocating();
    int v35 = _objc_rootIsDeallocating();
    Name = sel_getName(a2);
    int v47 = 67110658;
    int v48 = (int)IsDeallocating;
    __int16 v49 = 1024;
    int v50 = v35;
    __int16 v51 = 2112;
    id v52 = v10;
    __int16 v53 = 2112;
    id v54 = v17;
    __int16 v55 = 2112;
    id v56 = v9;
    __int16 v57 = 2112;
    id v58 = v12;
    __int16 v59 = 2080;
    uint64_t v60 = Name;
    id v10 = (id)MEMORY[0x1E4F14500];
    id v9 = (id)_os_log_send_and_compose_impl();

    _os_crash_msg();
    __break(1u);
    goto LABEL_39;
  }
  BOOL v15 = 1;
LABEL_31:

  return v15;
}

void sub_185664850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _eventComponentPhaseMapping()
{
  v5[5] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)_eventComponentPhaseMapping_mapping;
  if (!_eventComponentPhaseMapping_mapping)
  {
    v4[0] = &unk_1ED3F36D8;
    v4[1] = &unk_1ED3F3708;
    v5[0] = &unk_1ED3F36F0;
    v5[1] = &unk_1ED3F3720;
    v4[2] = &unk_1ED3F3738;
    v4[3] = &unk_1ED3F3768;
    v5[2] = &unk_1ED3F3750;
    v5[3] = &unk_1ED3F3780;
    v4[4] = &unk_1ED3F3798;
    v5[4] = &unk_1ED3F37B0;
    uint64_t v1 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:5];
    uint64_t v2 = (void *)_eventComponentPhaseMapping_mapping;
    _eventComponentPhaseMapping_mapping = v1;

    uint64_t v0 = (void *)_eventComponentPhaseMapping_mapping;
  }
  return v0;
}

id _eventComponentPhaseMapping_0()
{
  v5[5] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)_eventComponentPhaseMapping_mapping_0;
  if (!_eventComponentPhaseMapping_mapping_0)
  {
    v4[0] = &unk_1ED3F6480;
    v4[1] = &unk_1ED3F6498;
    v5[0] = &unk_1ED3F6480;
    v5[1] = &unk_1ED3F6498;
    v4[2] = &unk_1ED3F6450;
    v4[3] = &unk_1ED3F6468;
    v5[2] = &unk_1ED3F6450;
    v5[3] = &unk_1ED3F6468;
    v4[4] = &unk_1ED3F64B0;
    v5[4] = &unk_1ED3F64B0;
    uint64_t v1 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:5];
    uint64_t v2 = (void *)_eventComponentPhaseMapping_mapping_0;
    _eventComponentPhaseMapping_mapping_0 = v1;

    uint64_t v0 = (void *)_eventComponentPhaseMapping_mapping_0;
  }
  return v0;
}

id _eventComponentPhaseMapping_1()
{
  v5[5] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (void *)_eventComponentPhaseMapping_mapping_1;
  if (!_eventComponentPhaseMapping_mapping_1)
  {
    v4[0] = &unk_1ED3F64C8;
    v4[1] = &unk_1ED3F64E0;
    v5[0] = &unk_1ED3F64C8;
    v5[1] = &unk_1ED3F64E0;
    v4[2] = &unk_1ED3F64F8;
    v4[3] = &unk_1ED3F6510;
    v5[2] = &unk_1ED3F64F8;
    v5[3] = &unk_1ED3F6510;
    v4[4] = &unk_1ED3F6528;
    v5[4] = &unk_1ED3F6528;
    uint64_t v1 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:5];
    uint64_t v2 = (void *)_eventComponentPhaseMapping_mapping_1;
    _eventComponentPhaseMapping_mapping_1 = v1;

    uint64_t v0 = (void *)_eventComponentPhaseMapping_mapping_1;
  }
  return v0;
}

_UIEventComponentPhaseValue *_eventComponentPhaseForUnderlyingValue(uint64_t a1, void *a2)
{
  uint64_t v4 = [NSNumber numberWithInteger:a1];
  uint64_t v5 = [a2 objectForKeyedSubscript:v4];

  if (v5) {
    uint64_t v6 = [v5 integerValue];
  }
  else {
    uint64_t v6 = 5;
  }
  uint64_t v7 = [[_UIEventComponentPhaseValue alloc] initWithValue:v6 underlyingValue:a1];

  return v7;
}

double __UIViewConvertRectInViewToSceneSpace(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11 = a2;
  id v12 = [a1 layer];
  objc_msgSend(v12, "convertRect:toLayer:", 0, a3, a4, a5, a6);
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;

  [v11 _sceneReferenceBounds];
  double v22 = v21;
  double v24 = v23;
  uint64_t v25 = [v11 _sceneOrientation];
  uint64_t v26 = [v11 interfaceOrientation];

  return _UIWindowConvertRectFromOrientationToOrientation(v25, v26, v14, v16, v18, v20, v22, v24);
}

uint64_t _edgeForScrollAccessoryEdge(uint64_t a1, int a2)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 0:
      BOOL v5 = a2 == 0;
      uint64_t v6 = 2;
      uint64_t v7 = 8;
      goto LABEL_5;
    case 1:
      BOOL v5 = a2 == 0;
      uint64_t v6 = 8;
      uint64_t v7 = 2;
LABEL_5:
      if (v5) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = v7;
      }
      break;
    case 2:
      return result;
    case 3:
      uint64_t result = 2;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = 8;
      break;
    default:
      double v8 = [MEMORY[0x1E4F28B00] currentHandler];
      id v9 = objc_msgSend(NSString, "stringWithUTF8String:", "UIRectEdge _edgeForScrollAccessoryEdge(UIScrollAccessoryEdge, BOOL)");
      objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, @"UIScrollView.m", 14862, @"Invalid UIScrollAccessoryEdge value (%ld)", a1);

      uint64_t result = 0;
      break;
  }
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

void sub_185669D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_185669E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18566B298(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t _UIApplicationIsFirstPartyStickers()
{
  if (qword_1EB25B618 != -1) {
    dispatch_once(&qword_1EB25B618, &__block_literal_global_1275);
  }
  return byte_1EB25B4EC;
}

void sub_18566C708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIApplicationIsStickerPickerService()
{
  if (qword_1EB25B628 != -1) {
    dispatch_once(&qword_1EB25B628, &__block_literal_global_1285_0);
  }
  return byte_1EB25B4EE;
}

uint64_t _UIApplicationIsEmojiPoster()
{
  if (qword_1EB25B620 != -1) {
    dispatch_once(&qword_1EB25B620, &__block_literal_global_1280);
  }
  return byte_1EB25B4ED;
}

id UIScenePresentationLog()
{
  if (UIScenePresentationLog_onceToken != -1) {
    dispatch_once(&UIScenePresentationLog_onceToken, &__block_literal_global_235);
  }
  uint64_t v0 = (void *)UIScenePresentationLog___instance;
  return v0;
}

void sub_185670764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1856712BC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

UIViewBlockBasedCAAction *_StatusBar_UIBlockBasedCAAction(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [[UIViewBlockBasedCAAction alloc] initWithEmptyBlock:v1];

  return v2;
}

uint64_t _UIUpdateAdaptiveRateNeeded()
{
  if (qword_1EB2621A0 != -1) {
    dispatch_once(&qword_1EB2621A0, &__block_literal_global_2_14);
  }
  return byte_1EB262189;
}

void __dispatchPreprocessedEventFromEventQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v260 = *MEMORY[0x1E4F143B8];
  IOHIDEventGetType();
  IOHIDEventGetTimeStamp();
  kdebug_trace();
  alm_stop_tracking_responsive_launch();
  unint64_t TimeStamp = IOHIDEventGetTimeStamp();
  double v7 = _UIMediaTimeForMachTime(TimeStamp);
  if ((_UIUpdateCycleEnabled() & 1) == 0) {
    [MEMORY[0x1E4F39CF8] setFrameInputTime:a2 withToken:v7];
  }
  uint64_t v8 = *(void *)(a3 + 8);
  int Type = IOHIDEventGetType();
  CGRect v170 = (void *)v8;
  if (!-[UIApplication _internalHandleHIDEventBypassingUIEvent:](v8, a1))
  {
    id v11 = -[UIEventEnvironment UIKitEventForHIDEvent:]((id *)a3, a1);
    id v12 = v11;
    if (v11)
    {
      [v11 _setHIDEvent:a1];
      int v165 = [v170 isIgnoringInteractionEvents];
      double v13 = _UIEventHIDUIWindowForHIDEvent();
      CGRect v164 = [v13 windowScene];

      if (v164) {
        int v14 = [v164 _isUserInteractionEnabled] ^ 1;
      }
      else {
        int v14 = 0;
      }
      [v170 systemIsAnimatingApplicationLifecycleEvent];
      double v18 = BKSHIDEventGetDigitizerAttributes();
      int v19 = [v18 systemGestureStateChange];

      unsigned int v169 = v165 | v14;
      int v162 = v19;
      int v163 = _UIEventHIDShouldAllowHoverEventGeneration(a1);
      if (Type == 11 && v19)
      {
        double v20 = _UIEventHIDUIWindowForHIDEvent();
        if (!v20)
        {
          double v21 = *(NSObject **)(__UILogGetCategoryCachedImpl("Touch", &qword_1EB262D20) + 8);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)v248 = v12;
            _os_log_impl(&dword_1853B0000, v21, OS_LOG_TYPE_ERROR, "unexpected nil window in __dispatchSystemChangeDigitizerEvent, touchesEvent:%@", buf, 0xCu);
          }
        }
        double v22 = BKSHIDEventGetDigitizerAttributes();
        uint64_t v23 = [v22 systemGesturesPossible];

        IOHIDEventGetType();
        IOHIDEventGetTimeStamp();
        kdebug_trace();
        __sendSystemGestureLatentClientUpdate(v12, v20, v23, 0);

        goto LABEL_21;
      }
      if (Type == 11)
      {
        if ((_UIEventHIDIgnoresDragEvents() & 1) == 0)
        {
          CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
          if (Children)
          {
            CFArrayRef v32 = Children;
            if (CFArrayGetCount(Children) >= 1)
            {
              CFArrayGetValueAtIndex(v32, 0);
              long long v33 = BKSHIDEventGetDigitizerAttributes();
              id v34 = _UIEventHIDPathAttributesForChild(v33);
              int v35 = [v34 locus];

              if (v35)
              {
                id v175 = 0;
                __dispatchDragEvent(v12, &v175, a3);
                double v24 = (void (**)(void))v175;
LABEL_44:
                uint64_t v25 = 0;
                int v26 = 0;
LABEL_134:
                int v166 = 1;
                goto LABEL_23;
              }
            }
          }
        }
        if (v163)
        {
          id v39 = _UIEventHIDUIWindowForHIDEvent();
          id v160 = -[UIEventEnvironment _hoverEventForWindow:]((id)a3, v39);
        }
        else
        {
          id v160 = 0;
        }
        double v45 = _UIEventHIDUIWindowForHIDEvent();
        int v46 = [v45 _contextId];
        long long v157 = [v45 screen];
        v239[0] = 0;
        v239[1] = v239;
        v239[2] = 0x3032000000;
        v239[3] = __Block_byref_object_copy__172;
        v239[4] = __Block_byref_object_dispose__172;
        id v240 = 0;
        CFDictionaryRef v47 = (const __CFDictionary *)-[UIEventEnvironment _touchMapForWindow:](a3, v45);
        CFDictionaryRef Mutable = v47;
        if (v47) {
          CFRetain(v47);
        }
        else {
          CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
        }
        BOOL v155 = CFDictionaryGetCount(Mutable) != 0;
        v152 = *(void **)(a3 + 8);
        if ([v152 _isSpringBoard])
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v49 = [v152 _gestureEnvironment];
            int v50 = (void *)v49;
            if (v49) {
              _UIGestureEnvironmentUpdate(v49);
            }
          }
        }
        [v12 _clearTouches];
        CFMutableDictionaryRef v51 = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
        CFAutorelease(v51);
        char IntegerValue = IOHIDEventGetIntegerValue();
        v237[0] = 0;
        v237[1] = v237;
        v237[2] = 0x2020000000;
        char v238 = 0;
        uint64_t v233 = 0;
        v234 = &v233;
        uint64_t v235 = 0x2020000000;
        uint64_t v236 = 0;
        v232[0] = MEMORY[0x1E4F143A8];
        v232[1] = 3221225472;
        v232[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke;
        v232[3] = &unk_1E5304940;
        v232[4] = &v233;
        v232[5] = v237;
        _UIEventHIDEnumerateChildren(a1, 11, v232);
        id v52 = BKSHIDEventGetDigitizerAttributes();
        unsigned int v158 = [v52 systemGesturesPossible];

        v230[0] = 0;
        v230[1] = v230;
        v230[2] = 0x2020000000;
        char v231 = 0;
        unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("Touch", &_MergedGlobals_1209);
        if (*(unsigned char *)CategoryCachedImpl)
        {
          uint64_t v136 = *(NSObject **)(CategoryCachedImpl + 8);
          if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
          {
            uint64_t v137 = v234[3];
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v248 = (IntegerValue & 0x80) >> 7;
            *(_WORD *)&v248[4] = 1024;
            *(_DWORD *)&v248[6] = v137;
            _os_log_impl(&dword_1853B0000, v136, OS_LOG_TYPE_ERROR, "Updating touches: isCancelling: %d; digitizerChildCount: %d",
              buf,
              0xEu);
          }
        }
        if ((IntegerValue & 0x80) == 0 && v234[3])
        {
          unint64_t v54 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262B48);
          if (*(unsigned char *)v54)
          {
            v150 = *(NSObject **)(v54 + 8);
            if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
            {
              uint64_t v151 = v234[3];
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)v248 = v151;
              _os_log_impl(&dword_1853B0000, v150, OS_LOG_TYPE_ERROR, "\tEvent has %d digitizer child events", buf, 8u);
            }
          }
          uint64_t v214 = MEMORY[0x1E4F143A8];
          uint64_t v215 = 3221225472;
          v216 = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_30;
          v217 = &unk_1E53046C8;
          uint64_t v222 = a1;
          CFDictionaryRef v223 = Mutable;
          uint64_t v224 = a3;
          id v225 = v160;
          int v229 = v46;
          id v218 = v45;
          v220 = v230;
          double v226 = v7;
          v227 = v12;
          CFMutableDictionaryRef v228 = v51;
          id v219 = v157;
          v221 = v239;
          _UIEventHIDEnumerateChildren(a1, 11, &v214);
        }
        uint64_t SenderID = IOHIDEventGetSenderID();
        unint64_t v56 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262B60);
        if (*(unsigned char *)v56)
        {
          long long v138 = *(id *)(v56 + 8);
          if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
          {
            int Count = CFDictionaryGetCount(Mutable);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v248 = Count;
            _os_log_impl(&dword_1853B0000, v138, OS_LOG_TYPE_ERROR, "\tPrevious touch map count prior to senderID migration: %d", buf, 8u);
          }
        }
        __int16 v57 = [(__CFDictionary *)Mutable objectEnumerator];
        id v58 = [v57 allObjects];
        v213[0] = MEMORY[0x1E4F143A8];
        v213[1] = 3221225472;
        v213[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_37;
        v213[3] = &__block_descriptor_56_e24_v32__0__UITouch_8Q16_B24l;
        v213[4] = SenderID;
        v213[5] = v51;
        v213[6] = Mutable;
        [v58 enumerateObjectsUsingBlock:v213];

        if ((_UIEventHIDShouldIgnoreEventsExpectedToBecomeDragEvent() & 1) == 0)
        {
          BOOL v59 = _UIEventHIDExpectedToBecomeDragEvent();
          uint64_t v60 = [(__CFDictionary *)Mutable objectEnumerator];
          uint64_t v61 = [v60 allObjects];
          v211[0] = MEMORY[0x1E4F143A8];
          v211[1] = 3221225472;
          v211[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_2;
          v211[3] = &__block_descriptor_49_e24_v32__0__UITouch_8Q16_B24l;
          BOOL v212 = v59;
          v211[4] = v51;
          v211[5] = Mutable;
          [v61 enumerateObjectsUsingBlock:v211];
        }
        uint64_t v205 = 0;
        v206 = &v205;
        uint64_t v207 = 0x3032000000;
        v208 = __Block_byref_object_copy__41;
        v209 = __Block_byref_object_dispose__42;
        id v210 = 0;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_43;
        aBlock[3] = &unk_1E5304730;
        void aBlock[4] = &v205;
        uint64_t v62 = _Block_copy(aBlock);
        unint64_t v63 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262B68);
        if (*(unsigned char *)v63)
        {
          long long v140 = *(id *)(v63 + 8);
          if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
          {
            int v141 = CFDictionaryGetCount(Mutable);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v248 = v141;
            _os_log_impl(&dword_1853B0000, v140, OS_LOG_TYPE_ERROR, "\tPrevious touch map count prior to terminal phase evaluation: %d", buf, 8u);
          }
        }
        v198[0] = MEMORY[0x1E4F143A8];
        v198[1] = 3221225472;
        v198[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_47;
        v198[3] = &unk_1E5304758;
        BOOL v202 = IntegerValue < 0;
        double v200 = v7;
        char v203 = v169;
        CGRect v201 = v12;
        id v64 = v62;
        id v199 = v64;
        [(__CFDictionary *)Mutable enumerateKeysAndObjectsUsingBlock:v198];
        unint64_t v65 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262B80);
        if (*(unsigned char *)v65)
        {
          long long v142 = *(id *)(v65 + 8);
          if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
          {
            int v143 = CFDictionaryGetCount(v51);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v248 = v143;
            _os_log_impl(&dword_1853B0000, v142, OS_LOG_TYPE_ERROR, "\tNew touch map count: %d", buf, 8u);
          }
        }
        v194[0] = MEMORY[0x1E4F143A8];
        v194[1] = 3221225472;
        v194[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_52;
        v194[3] = &unk_1E5304780;
        char v197 = v169;
        CGRect v196 = v12;
        id v154 = v64;
        id v195 = v154;
        [(__CFDictionary *)v51 enumerateKeysAndObjectsUsingBlock:v194];
        unint64_t v66 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262B88);
        if (*(unsigned char *)v66)
        {
          v144 = *(id *)(v66 + 8);
          if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
          {
            uint64_t v145 = [(id)v206[5] count];
            *(_DWORD *)buf = 134217984;
            *(void *)v248 = v145;
            _os_log_impl(&dword_1853B0000, v144, OS_LOG_TYPE_ERROR, "\tTouches to cancel: %lu", buf, 0xCu);
          }
        }
        if ([(id)v206[5] count])
        {
          [v152 _cancelTouchesOrPresses:v206[5] withEvent:v12];
          __updateSystemGestureRecognitionIsPossible((void *)v206[5], v45, v158, 1);
        }
        else if (IntegerValue < 0)
        {
          CGFloat v67 = [v12 allTouches];
          __updateSystemGestureRecognitionIsPossible(v67, v45, v158, 1);
        }
        unint64_t v68 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262B90);
        if (*(unsigned char *)v68)
        {
          id v146 = *(id *)(v68 + 8);
          if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
          {
            int v147 = CFDictionaryGetCount(v51);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)v248 = v147;
            _os_log_impl(&dword_1853B0000, v146, OS_LOG_TYPE_ERROR, "+++++++++++   Number of touches in new touch map: %d", buf, 8u);
          }
        }
        -[UIEventEnvironment _setTouchMap:forWindow:](a3, v51, v45);
        if (IntegerValue < 0)
        {
          if (!v234[3]) {
            __sendSystemGestureLatentClientUpdate(v12, v45, v158, 1);
          }
        }
        else
        {
          CGFloat v69 = [v12 allTouches];
          __updateSystemGestureRecognitionIsPossible(v69, v45, v158, 0);
        }
        v184[0] = MEMORY[0x1E4F143A8];
        v184[1] = 3221225472;
        v184[2] = ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_56;
        v184[3] = &unk_1E53047A8;
        CGRect v186 = v239;
        CGRect v187 = v230;
        CGRect v188 = v12;
        id v159 = v45;
        id v185 = v159;
        id v189 = v160;
        CFDictionaryRef v190 = Mutable;
        CFMutableDictionaryRef v191 = v51;
        uint64_t v192 = a3;
        BOOL v193 = v155;
        long long v156 = _Block_copy(v184);
        long long v182 = 0u;
        long long v183 = 0u;
        long long v180 = 0u;
        long long v181 = 0u;
        CGFloat v70 = [v12 allTouches];
        uint64_t v71 = [v70 countByEnumeratingWithState:&v180 objects:buf count:16];
        int v166 = v71 != 0;
        if (v71)
        {
          char v72 = 0;
          uint64_t v73 = *(void *)v181;
          uint64_t v153 = 138412290;
          do
          {
            uint64_t v74 = 0;
            do
            {
              if (*(void *)v181 != v73) {
                objc_enumerationMutation(v70);
              }
              char v75 = *(void **)(*((void *)&v180 + 1) + 8 * v74);
              uint64_t v76 = objc_msgSend(v75, "phase", v153);
              if (v76 != 2)
              {
                if (v76 == 3) {
                  -[UITouch _willBeDispatchedAsEnded]((uint64_t)v75);
                }
                unint64_t v77 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262B98);
                if (*(unsigned char *)v77)
                {
                  uint64_t v78 = *(id *)(v77 + 8);
                  if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v79 = [v75 _phaseDescription];
                    LODWORD(v243) = v153;
                    *(void *)((char *)&v243 + 4) = v79;
                    _os_log_impl(&dword_1853B0000, v78, OS_LOG_TYPE_ERROR, "Setting shouldSend to YES for touch phase %@", (uint8_t *)&v243, 0xCu);
                  }
                }
                char v72 = 1;
              }
              ++v74;
            }
            while (v71 != v74);
            uint64_t v80 = [v70 countByEnumeratingWithState:&v180 objects:buf count:16];
            uint64_t v71 = v80;
          }
          while (v80);

          if ((v72 & 1) == 0)
          {
            int v166 = 0;
            goto LABEL_107;
          }
          CGFloat v70 = +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient];
          [v70 peekApplicationEvent:v12];
        }

LABEL_107:
        long long v179 = 0u;
        long long v177 = 0u;
        long long v178 = 0u;
        long long v176 = 0u;
        uint64_t v81 = [v12 allTouches];
        uint64_t v82 = [v81 countByEnumeratingWithState:&v176 objects:&v243 count:16];
        if (v82)
        {
          uint64_t v83 = *(void *)v177;
          do
          {
            for (uint64_t i = 0; i != v82; ++i)
            {
              if (*(void *)v177 != v83) {
                objc_enumerationMutation(v81);
              }
              -[UITouch _updatePredictionsWithEvent:](*(void **)(*((void *)&v176 + 1) + 8 * i), v12);
            }
            uint64_t v82 = [v81 countByEnumeratingWithState:&v176 objects:&v243 count:16];
          }
          while (v82);
        }

        unint64_t v85 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262BA0);
        if (*(unsigned char *)v85)
        {
          v148 = *(NSObject **)(v85 + 8);
          if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
          {
            uint64_t v149 = @"NO";
            if (v166) {
              uint64_t v149 = @"YES";
            }
            *(_DWORD *)v241 = 138412290;
            v242 = v149;
            _os_log_impl(&dword_1853B0000, v148, OS_LOG_TYPE_ERROR, "Returning %@ for shouldSend from update touches", v241, 0xCu);
          }
        }

        _Block_object_dispose(&v205, 8);
        _Block_object_dispose(v230, 8);
        _Block_object_dispose(&v233, 8);
        _Block_object_dispose(v237, 8);
        _Block_object_dispose(v239, 8);

        double v24 = v156;
        uint64_t v25 = v160;
        int v26 = v160 != 0;
        if (v160) {
          char v86 = v166;
        }
        else {
          char v86 = 1;
        }
        if ((v86 & 1) == 0)
        {
          int v26 = [v160 hasOutstandingUpdates];
          int v166 = 0;
        }
        goto LABEL_23;
      }
      int v36 = IOHIDEventGetType();
      switch(v36)
      {
        case 3:
          if (_UIEventHIDPressTypeForKeyboardHIDEvent() != -1) {
            goto LABEL_136;
          }
          break;
        case 29:
          uint64_t v87 = IOHIDEventGetIntegerValue();
          if (v87 && v87 != 3)
          {
LABEL_136:
            int v91 = v165 | v14;
            if (*(unsigned char *)(a3 + 56)) {
              int v91 = 0;
            }
            unsigned int v169 = v91;
            uint64_t v161 = *(void **)(a3 + 8);
            if (IOHIDEventGetType() != 17)
            {
              if (IOHIDEventGetType() == 3)
              {
                uint64_t v168 = _UIEventHIDPressTypeForKeyboardHIDEvent();
                BOOL v96 = IOHIDEventGetIntegerValue() != 0;
              }
              else
              {
                if (IOHIDEventGetType() == 29)
                {
                  IOHIDEventGetFloatValue();
                  BOOL v96 = v102 != 0.0;
                  BOOL v103 = 1;
                  uint64_t v168 = 105;
                  goto LABEL_173;
                }
                BOOL v96 = 0;
                uint64_t v168 = -1;
              }
              BOOL v103 = 1;
LABEL_173:
              double v107 = BKSHIDEventGetBaseAttributes();
              char v108 = [v107 options];

              if (v108)
              {
                [v161 _cancelPressesWithType:v168 forPressesEvent:v12];
                BOOL v103 = 0;
              }
              if (v96) {
                unint64_t v109 = 0;
              }
              else {
                unint64_t v109 = 3;
              }
              if ((IOHIDEventGetPhase() & 4) != 0)
              {
                id v110 = v12;
                long long v243 = 0u;
                long long v244 = 0u;
                long long v245 = 0u;
                long long v246 = 0u;
                CGRect v111 = [v110 _terminalRegistrantsForPressType:v168];
                uint64_t v112 = [v111 countByEnumeratingWithState:&v243 objects:buf count:16];
                if (v112)
                {
                  uint64_t v113 = *(void *)v244;
                  do
                  {
                    for (uint64_t j = 0; j != v112; ++j)
                    {
                      if (*(void *)v244 != v113) {
                        objc_enumerationMutation(v111);
                      }
                      [*(id *)(*((void *)&v243 + 1) + 8 * j) pressesEventDidReceiveTerminal:v110];
                    }
                    uint64_t v112 = [v111 countByEnumeratingWithState:&v243 objects:buf count:16];
                  }
                  while (v112);
                }

                BOOL v103 = 0;
              }
              if (v169)
              {
                [v12 _hidEvent];
                CGRect v115 = _UIEventHIDUIWindowForHIDEvent();
                CGRect v116 = -[UIEventEnvironment _pressForType:window:](a3, v168, v115);

                if (v96)
                {
                  [v116 setPhase:4];
                  unint64_t v109 = 0;
                  BOOL v103 = 0;
                }
                else if (v116 && [v116 phase] != 4)
                {
                  CGRect v117 = [MEMORY[0x1E4F1CAD0] setWithObject:v116];
                  [v161 _cancelTouchesOrPresses:v117 withEvent:v12];

                  unint64_t v109 = 4;
                }
                else
                {
                  unint64_t v109 = 3;
                }
              }
              uint64_t v214 = MEMORY[0x1E4F143A8];
              uint64_t v215 = 3221225472;
              v216 = ____dispatchPressesEvent_block_invoke;
              v217 = &unk_1E53048F8;
              id v219 = v161;
              id v218 = v12;
              id v118 = _Block_copy(&v214);
              if (!v103)
              {
                int v120 = 0;
LABEL_207:
                int v166 = v120 & (v169 ^ 1);
                double v24 = v118;
                goto LABEL_22;
              }
              if (IOHIDEventGetType() == 29)
              {
                uint64_t v119 = IOHIDEventGetIntegerValue();
              }
              else
              {
                if (IOHIDEventGetType() == 3)
                {
                  uint64_t v119 = IOHIDEventGetIntegerValue();
                  BOOL v121 = IOHIDEventGetIntegerValue() != 0;
LABEL_203:
                  if (v109 >= 3) {
                    double v122 = 0.0;
                  }
                  else {
                    double v122 = 1.0;
                  }
                  [v12 _hidEvent];
                  double v123 = BKSHIDEventGetBaseAttributes();
                  int v120 = objc_msgSend(v161, "_prepareButtonEvent:type:phase:timestamp:force:clickCount:longClick:contextID:", v12, v168, v109, v119, v121, objc_msgSend(v123, "contextID"), v7, v122);

                  goto LABEL_207;
                }
                uint64_t v119 = 0;
              }
              BOOL v121 = 0;
              goto LABEL_203;
            }
            uint64_t Event = IOHIDEventGetEvent();
            uint64_t v93 = IOHIDEventGetEvent();
            if (Event && IOHIDEventIsRepeat())
            {
              int v94 = 0;
              int v95 = 0;
              uint64_t v168 = -1;
LABEL_172:
              BOOL v103 = v94 != 0;
              BOOL v96 = v95 != 0;
              goto LABEL_173;
            }
            double v97 = _UIEventHIDUIWindowForHIDEvent();
            uint64_t v98 = -[UIEventEnvironment _currentNudgePressTypeForWindow:](a3, v97);
            unint64_t v99 = v98;
            if (v93)
            {
              uint64_t v100 = 4;
              if (IOHIDEventGetIntegerValue())
              {
                uint64_t v101 = 4;
LABEL_149:
                uint64_t v168 = v101;
                if (v99 != -1) {
                  [v161 _cancelPressesWithType:v99 forPressesEvent:v12];
                }
                int v95 = 1;
                uint64_t v100 = v168;
                goto LABEL_170;
              }
              int v95 = 0;
              uint64_t v168 = -1;
            }
            else
            {
              int v95 = 0;
              uint64_t v168 = -1;
              uint64_t v100 = -1;
              if (Event && v98 != 4)
              {
                IOHIDEventGetFloatValue();
                double v105 = v104;
                IOHIDEventGetFloatValue();
                if (v105 == 0.0 && v106 == 0.0)
                {
                  int v95 = 0;
                  int v94 = 0;
                  uint64_t v168 = -1;
                  uint64_t v100 = v99;
                  if (v99 >= 4) {
                    goto LABEL_171;
                  }
                  goto LABEL_170;
                }
                if (v105 > 0.0 && v106 == 0.0)
                {
                  uint64_t v101 = 3;
                }
                else if (v105 < 0.0 && v106 == 0.0)
                {
                  uint64_t v101 = 2;
                }
                else if (v105 == 0.0 && v106 > 0.0)
                {
                  uint64_t v101 = 1;
                }
                else
                {
                  uint64_t v129 = v106 >= 0.0 || v105 != 0.0;
                  uint64_t v101 = v129 << 63 >> 63;
                }
                goto LABEL_149;
              }
            }
LABEL_170:
            -[UIEventEnvironment _setCurrentNudgePressType:forWindow:](a3, v168, v97);
            int v94 = 1;
            uint64_t v168 = v100;
LABEL_171:

            goto LABEL_172;
          }
          break;
        case 17:
          CGFloat v37 = _UIEventHIDUIScreenForHIDEvent(a1);
          uint64_t v38 = [v37 _userInterfaceIdiom];

          if (v38 == 3) {
            goto LABEL_136;
          }
          break;
      }
      if (IOHIDEventGetType() == 3
        && ((uint64_t v88 = IOHIDEventGetIntegerValue(), v88 == 7)
         || v88 == 255
         || v88 == 12 && ((uint64_t v89 = IOHIDEventGetIntegerValue(), v89 == 184) || v89 == 669 || v89 == 430)))
      {
        [v170 handleKeyHIDEvent:a1];
      }
      else
      {
        if (_UIEventHIDIsDynamicButtonEvent(a1))
        {
          double v24 = 0;
          uint64_t v25 = 0;
          int v26 = 0;
          unsigned int v90 = v169;
          if (*(unsigned char *)(a3 + 56)) {
            unsigned int v90 = 0;
          }
          unsigned int v169 = v90;
          goto LABEL_134;
        }
        if (IOHIDEventGetType() == 30)
        {
          [v170 _handleUnicodeEvent:a1];
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            -[_UIPencilEvent sendToInteractions]((uint64_t)v12);
          }
          else
          {
            if ([v12 type] != 10)
            {
              if ([v12 type] == 14)
              {
                v171[0] = MEMORY[0x1E4F143A8];
                v171[1] = 3221225472;
                v171[2] = ____dispatchPreprocessedEventFromEventQueue_block_invoke_2;
                v171[3] = &unk_1E52D9F70;
                id v172 = v12;
                double v24 = (void (**)(void))_Block_copy(v171);
              }
              else
              {
                double v24 = 0;
              }
              goto LABEL_44;
            }
            if ([v12 _shouldSendEvent])
            {
              v173[0] = MEMORY[0x1E4F143A8];
              v173[1] = 3221225472;
              v173[2] = ____dispatchPreprocessedEventFromEventQueue_block_invoke;
              v173[3] = &unk_1E52D9F70;
              id v174 = v12;
              double v24 = (void (**)(void))_Block_copy(v173);

              goto LABEL_44;
            }
          }
        }
      }
LABEL_21:
      double v24 = 0;
      int v166 = 0;
LABEL_22:
      uint64_t v25 = 0;
      int v26 = 0;
LABEL_23:
      if (v163)
      {
        unint64_t v27 = __UILogGetCategoryCachedImpl("EventDispatch", &qword_1EB262BB8);
        if (*(unsigned char *)v27)
        {
          long long v130 = *(NSObject **)(v27 + 8);
          if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
          {
            long long v131 = v130;
            uint64_t v132 = [v25 type];
            uint64_t v133 = [v25 subtype];
            int v134 = IOHIDEventGetType();
            *(_DWORD *)buf = 134219264;
            *(void *)v248 = v25;
            *(_WORD *)&v248[8] = 2048;
            uint64_t v249 = v132;
            __int16 v250 = 2048;
            uint64_t v251 = v133;
            __int16 v252 = 1024;
            int v253 = v134;
            __int16 v254 = 1024;
            int v255 = v26;
            __int16 v256 = 1024;
            unsigned int v257 = v169;
            _os_log_impl(&dword_1853B0000, v131, OS_LOG_TYPE_DEFAULT, "Evaluating dispatch of UIEvent: %p; type: %li; subtype: %li; backing type: %i; shouldSend: %d; ignoreInter"
              "actionEvents: %d",
              buf,
              0x32u);
          }
        }
        if (v25) {
          int v28 = v26;
        }
        else {
          int v28 = 0;
        }
        if (v28 == 1)
        {
          [v25 _setHIDEvent:a1];
          [v170 sendEvent:v25];
          [v25 _resetHasOutstandingUpdateTouches];
        }
      }
      unint64_t v29 = __UILogGetCategoryCachedImpl("EventDispatch", &qword_1EB262BC0);
      if (*(unsigned char *)v29)
      {
        uint64_t v124 = *(NSObject **)(v29 + 8);
        if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
        {
          double v125 = v124;
          uint64_t v126 = [v12 type];
          uint64_t v127 = [v12 subtype];
          int v128 = IOHIDEventGetType();
          *(_DWORD *)buf = 134219520;
          *(void *)v248 = v12;
          *(_WORD *)&v248[8] = 2048;
          uint64_t v249 = v126;
          __int16 v250 = 2048;
          uint64_t v251 = v127;
          __int16 v252 = 1024;
          int v253 = v128;
          __int16 v254 = 1024;
          int v255 = v166;
          __int16 v256 = 1024;
          unsigned int v257 = v169;
          __int16 v258 = 1024;
          int v259 = v162;
          _os_log_impl(&dword_1853B0000, v125, OS_LOG_TYPE_DEFAULT, "Evaluating dispatch of UIEvent: %p; type: %li; subtype: %li; backing type: %i; shouldSend: %d; ignoreInterac"
            "tionEvents: %d, systemGestureStateChange: %d",
            buf,
            0x38u);
        }
      }
      if (v166 && ([v12 _shouldSkipEventDeliveryWithIgnoreInteractionEvents:v169] & 1) == 0)
      {
        unint64_t v30 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262BC8);
        if (*(unsigned char *)v30)
        {
          long long v135 = *(NSObject **)(v30 + 8);
          if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)v248 = v12;
            _os_log_impl(&dword_1853B0000, v135, OS_LOG_TYPE_ERROR, "Delivering event %@", buf, 0xCu);
          }
        }
        [v170 sendEvent:v12];
        [v12 _didSendEvent];
      }
      if (v24) {
        v24[2](v24);
      }
      [v12 _cleanupAfterDispatch];
      IOHIDEventGetType();
      IOHIDEventGetTimeStamp();
      kdebug_trace();

      goto LABEL_57;
    }
    if (Type == 14)
    {
      unint64_t v40 = ((unint64_t)IOHIDEventGetIntegerValue() >> 6) & 1;
      [v170 proximityStateChanged:v40];
      uint64_t v41 = +[UIDevice currentDevice];
      [v41 _setProximityState:v40];

      if (![v170 isFrontBoard]) {
        goto LABEL_56;
      }
    }
    else if (Type == 29)
    {
      IOHIDEventGetFloatValue();
      double v16 = v15;
      if (IOHIDEventGetIntegerValue() == 3)
      {
        double v17 = +[UIScreen _carScreen];
        [v17 _setCarPlayHumanPresenceInRange:v16 > 0.0];

LABEL_56:
        IOHIDEventGetType();
        IOHIDEventGetTimeStamp();
        kdebug_trace();
LABEL_57:

        return;
      }
    }
    char v42 = BKSHIDEventGetBaseAttributes();
    int v43 = [v42 contextID];

    double v44 = *(NSObject **)(__UILogGetCategoryCachedImpl("EventDispatch", &qword_1EB262BB0) + 8);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v248 = Type;
      *(_WORD *)&v248[4] = 1026;
      *(_DWORD *)&v248[6] = v43;
      _os_log_impl(&dword_1853B0000, v44, OS_LOG_TYPE_DEFAULT, "Found no UIEvent, so dispatching backing event of type directly to application: %i; contextId: 0x%{public}X",
        buf,
        0xEu);
    }
    [v170 _handleHIDEvent:a1];
    goto LABEL_56;
  }
  id v10 = *(NSObject **)(__UILogGetCategoryCachedImpl("EventDispatch", &qword_1EB262BA8) + 8);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v248 = Type;
    _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_DEFAULT, "Backing event handled directly by system shell without UIEvent: %i", buf, 8u);
  }
  IOHIDEventGetType();
  IOHIDEventGetTimeStamp();
  kdebug_trace();
}

void sub_185674ECC(_Unwind_Exception *a1)
{
}

void sub_1856757C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 168), 8);
  _Block_object_dispose((const void *)(v34 - 136), 8);
  _Unwind_Resume(a1);
}

void ___pencilRangeAndTouchingSeparationFilter_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  id v11 = &v10;
  uint64_t v12 = 0x2020000000;
  uint64_t v13 = 0;
  uint64_t v6 = 0;
  double v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  _UIEventHIDPencilMaximumPositionZForEvent(a2);
  if (v4 > 0.0)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = ___pencilRangeAndTouchingSeparationFilter_block_invoke_3;
    v5[3] = &unk_1E5304C28;
    v5[4] = &v10;
    v5[5] = &v6;
    void v5[6] = a2;
    _UIEventHIDEnumerateChildren(a2, 11, v5);
  }
  if (v11[3] || v7[3])
  {
    IOHIDEventGetIntegerValue();
    IOHIDEventSetIntegerValue();
    if (v11[3])
    {
      ___pencilRangeAndTouchingSeparationFilter_block_invoke_5();
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      CFRelease((CFTypeRef)v11[3]);
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    if (v7[3])
    {
      ___pencilRangeAndTouchingSeparationFilter_block_invoke_5();
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      CFRelease((CFTypeRef)v7[3]);
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(&v10, 8);
}

void sub_185675A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t _UIEventHIDShouldAllowHoverEventGeneration(uint64_t a1)
{
  _UIEventHIDPencilMaximumPositionZForEvent(a1);
  if (v1 > 0.0) {
    return 1;
  }
  if (IOHIDEventGetSenderID() != 0x8000000800A15173) {
    return 0;
  }
  uint64_t result = _UIEventHIDShouldTransformEvent();
  if (result) {
    return IOHIDEventGetIntegerValue() == 0;
  }
  return result;
}

void _UIEventHIDPencilMaximumPositionZForEvent(uint64_t a1)
{
  if (_os_feature_enabled_impl()
    && IOHIDEventGetType() == 11
    && _UIEventHIDGetChildStylusEvent(a1)
    && IOHIDEventGetIntegerValue() != 11)
  {
    uint64_t v2 = BKSHIDEventGetDigitizerAttributes();
    if (v2)
    {
      id v3 = v2;
      [v2 maximumPositionZ];
    }
  }
}

const void *_UIEventHIDGetChildStylusEvent(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
  if (!Children) {
    return 0;
  }
  CFArrayRef v2 = Children;
  CFIndex Count = CFArrayGetCount(Children);
  if (Count < 1) {
    return 0;
  }
  CFIndex v4 = Count;
  CFIndex v5 = 0;
  while (1)
  {
    ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(v2, v5);
    if (IOHIDEventGetType() == 11 && !IOHIDEventGetIntegerValue()) {
      break;
    }
    if (v4 == ++v5) {
      return 0;
    }
  }
  return ValueAtIndex;
}

void ___iosMacEventExtractionFilter_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = objc_msgSend(*(id *)(a1 + 32), "handleHIDEvent:", a2, 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

void ___wakeOnTouchSynchronizationFilter_block_invoke_2(uint64_t a1, uint64_t a2)
{
  if (IOHIDEventGetType() == 11)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (!v4 || (uint64_t v5 = (id *)*(id *)(v4 + 248)) == 0)
    {
      if (_getTritiumVendorDefinedEvent(a2))
      {
        unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("HIDEventSynchronization", &qword_1E8FDF6A0);
        if (*(unsigned char *)CategoryCachedImpl)
        {
          double v15 = *(NSObject **)(CategoryCachedImpl + 8);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1853B0000, v15, OS_LOG_TYPE_ERROR, "[UIEventFetcher] event stream requires synchronization.", buf, 2u);
          }
        }
        uint64_t v7 = (void *)_UIHIDEventSynchronizationStrategyForEvent(a2);
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = ___wakeOnTouchSynchronizationFilter_block_invoke_104;
        aBlock[3] = &unk_1E5304C00;
        id v22 = *(id *)(a1 + 32);
        long long v8 = _Block_copy(aBlock);
        uint64_t v16 = MEMORY[0x1E4F143A8];
        uint64_t v17 = 3221225472;
        double v18 = ___wakeOnTouchSynchronizationFilter_block_invoke_2_105;
        int v19 = &unk_1E52D9F70;
        id v20 = *(id *)(a1 + 32);
        long long v9 = _Block_copy(&v16);
        long long v10 = [_UIHIDEventSynchronizer alloc];
        long long v11 = objc_msgSend(MEMORY[0x1E4F1CAC0], "currentRunLoop", v16, v17, v18, v19);
        uint64_t v5 = -[_UIHIDEventSynchronizer initWithStrategy:runLoop:outputEventsHandler:completionHandler:](v10, v7, v11, v8, v9);

        if (v5)
        {
          *((_DWORD *)v5 + 2_Block_object_dispose(&STACK[0x410], 8) = 4;
          -[UIEventFetcher setSynchronizer:](*(void *)(a1 + 32), v5);

          goto LABEL_8;
        }
        -[UIEventFetcher setSynchronizer:](*(void *)(a1 + 32), 0);
      }
      else
      {
        uint64_t v5 = 0;
      }
LABEL_15:
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_16:

      return;
    }
LABEL_8:
    unint64_t v12 = __UILogGetCategoryCachedImpl("HIDEventSynchronization", &qword_1E8FDF6A8);
    if (*(unsigned char *)v12)
    {
      int v14 = *(NSObject **)(v12 + 8);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1853B0000, v14, OS_LOG_TYPE_ERROR, "[UIEventFetcher] synchronization in progress, routing event via event synchronizer.", buf, 2u);
      }
    }
    if (-[_UIHIDEventSynchronizer handleDigitizerEvent:]((uint64_t)v5, a2)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  v13();
}

void _UIEventProfileCollectionSubmitEvent(uint64_t a1)
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v2 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    int v3 = _UIInternalPreference_LogNextEventInfoStats;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_LogNextEventInfoStats)
    {
      while (v2 >= v3)
      {
        _UIInternalPreferenceSync(v2, &_UIInternalPreference_LogNextEventInfoStats, @"LogNextEventInfoStats", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
        int v3 = _UIInternalPreference_LogNextEventInfoStats;
        if (v2 == _UIInternalPreference_LogNextEventInfoStats) {
          goto LABEL_4;
        }
      }
      if (byte_1EB256F54)
      {
        uint64_t v4 = mach_absolute_time();
        v5[0] = MEMORY[0x1E4F143A8];
        v5[1] = 3221225472;
        v5[2] = __logNextEventInfoStats_block_invoke;
        v5[3] = &__block_descriptor_48_e31_v32__0r____IOHIDEvent__8Q16_B24l;
        v5[4] = a1;
        v5[5] = v4;
        _UIEventHIDEnumerateChildren(a1, 1, v5);
      }
    }
  }
LABEL_4:
  if (_MergedGlobals_998) {
    _ETPCollectionSubmitEvent(a1);
  }
}

uint64_t _getTritiumVendorDefinedEvent(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  void v3[2] = ___getTritiumVendorDefinedEvent_block_invoke;
  v3[3] = &unk_1E52DA1D8;
  v3[4] = &v4;
  _UIEventHIDEnumerateChildren(a1, 1, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_185676CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIEventHIDGetPointerEventSource(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = BKSHIDEventGetBaseAttributes();
  int v2 = v1;
  if (v1 && (unsigned int v3 = [v1 source] - 9, v3 <= 4)) {
    uint64_t v4 = qword_186B9C1F0[v3];
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t _UIEventGetHIDModifierFlags(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3
    || (IOHIDEventGetType(),
        _UIEventHIDGetDescendantPointerEvent(a1),
        BKSHIDEventGetDigitizerAttributes(),
        (uint64_t v4 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v5 = [v4 activeModifiers] & 0x3E0000;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t _IsKindOfUITableViewCell(void *a1)
{
  uint64_t v1 = qword_1E8FDF498;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1E8FDF498, &__block_literal_global_3094);
  }
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

BOOL _tableViewIsAnimatingSwipeToDelete(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3 && [v4 count] == 1)
  {
    uint64_t v6 = [v5 firstObject];
    uint64_t v7 = (void *)v6;
    if (v6) {
      long long v8 = *(void **)(v6 + 24);
    }
    else {
      long long v8 = 0;
    }
    id v9 = v8;
    long long v10 = [v3 indexPath];
    int v11 = [v9 isEqual:v10];

    if (v11)
    {
      unint64_t v12 = [v3 currentAction];
      BOOL v13 = [v12 style] == 1;
    }
    else
    {
      BOOL v13 = 0;
    }
  }
  else
  {
    BOOL v13 = 0;
  }

  return v13;
}

void sub_18567F2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18567F9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,id a50)
{
  _Block_object_dispose(&a45, 8);

  _Unwind_Resume(a1);
}

void sub_185681148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18568125C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

uint64_t _UICollectionViewShouldEnlargeLayoutAttributesQueryForEstimatedSizes()
{
  if (dyld_program_sdk_at_least()) {
    return (byte_1EB256F24 != 0) & ~_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_CollectionViewEnlargeLayoutAttributesQueryForEstimatedSizes, @"CollectionViewEnlargeLayoutAttributesQueryForEstimatedSizes");
  }
  else {
    return 1;
  }
}

void sub_185681630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v18 - 112), 8);

  _Unwind_Resume(a1);
}

uint64_t _UIRTreeContainerNode<_UICollectionViewRTreeElement>::enumerateElementsIntersectingWithConstRef(void *a1, float64x2_t *a2, unsigned char *a3, uint64_t a4)
{
  float64x2_t v22 = a2[1];
  float64x2_t v23 = *a2;
  uint64_t result = _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v25, (uint64_t)a1);
  float64x2_t v21 = vaddq_f64(v23, v22);
  int64x2_t v8 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vcgeq_f64(v23, vaddq_f64(v25[0], v25[1])), (int8x16_t)vcgtq_f64(v23, v25[0])), vandq_s8((int8x16_t)vcgtq_f64(v25[0], v23), (int8x16_t)vcgeq_f64(v25[0], v21)));
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v8, 1), (int8x16_t)v8).u64[0] & 0x8000000000000000) == 0)
  {
    uint64_t v9 = a1[12] - a1[11];
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      unint64_t v12 = v9 >> 5;
      if (v12 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v12;
      }
      while (1)
      {
        int v14 = (float64x2_t *)(a1[11] + 32 * v11);
        int64x2_t v15 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vcgeq_f64(v23, vaddq_f64(*v14, v14[1])), (int8x16_t)vcgtq_f64(v23, *v14)), vandq_s8((int8x16_t)vcgtq_f64(*v14, v23), (int8x16_t)vcgeq_f64(*v14, v21)));
        if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v15, 1), (int8x16_t)v15).u64[0] & 0x8000000000000000) == 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(a4 + 16))(a4, a1[8] + v10, a3);
          if (*a3) {
            break;
          }
        }
        ++v11;
        v10 += 40;
        if (v13 == v11) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      uint64_t v16 = a1[5];
      uint64_t v17 = a1[6];
      if (v16 != v17)
      {
        uint64_t v18 = v16 + 16;
        do
        {
          uint64_t v19 = *(void *)(v18 - 16);
          v24[0] = v23;
          v24[1] = v22;
          uint64_t result = _UIRTreeContainerNode<_UICollectionViewRTreeElement>::enumerateElementsIntersectingWithConstRef(v19, v24, a3, a4);
          if (*a3) {
            BOOL v20 = 1;
          }
          else {
            BOOL v20 = v18 == v17;
          }
          v18 += 16;
        }
        while (!v20);
      }
    }
  }
  return result;
}

void sub_18568234C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1856825F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18568296C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_185682B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185682C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ____finishDigitizerEventDispatch_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v5 = *(void **)(a3 + 360);
  }
  else {
    uint64_t v5 = 0;
  }
  id v7 = v5;
  uint64_t v6 = objc_msgSend(*(id *)(a1 + 32), "hoverTouchForContextId:pathIndex:", objc_msgSend(v7, "_contextId"), objc_msgSend((id)a3, "_pathIndex"));
  if (v6 && ([(id)a3 phase] == 3 || objc_msgSend((id)a3, "phase") == 4)) {
    [(id)a3 _clearForReenteringHoverInWindow:v7];
  }
  if (a3) {
    *(_WORD *)(a3 + 236) &= ~0x4000u;
  }
  [*(id *)(a1 + 40) _removeTouch:a3];
}

void ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_56(uint64_t a1)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    id v3 = [*(id *)(a1 + 56) _dispatchWindows];
    uint64_t v4 = [v3 countByEnumeratingWithState:&v51 objects:v66 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v52;
      while (2)
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v52 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {

            goto LABEL_14;
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v51 objects:v66 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }

    _UIPencilEventRequestBarrelFocusIfAbleForWindow(*(void **)(a1 + 32), 0);
  }
LABEL_14:
  int64x2_t v8 = *(void **)(a1 + 56);
  uint64_t v9 = *(void **)(a1 + 64);
  CFDictionaryRef v11 = *(const __CFDictionary **)(a1 + 72);
  CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 80);
  int v47 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v48 = *(void *)(a1 + 88);
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262D08);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    uint64_t v38 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1853B0000, v38, OS_LOG_TYPE_ERROR, "Finishing digitizer dispatch", buf, 2u);
    }
  }
  unint64_t v13 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262D10);
  if (*(unsigned char *)v13)
  {
    id v39 = *(NSObject **)(v13 + 8);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      unint64_t v40 = v39;
      int Count = CFDictionaryGetCount(v11);
      int v42 = CFDictionaryGetCount(v10);
      *(_DWORD *)buf = 67109376;
      int v75 = Count;
      __int16 v76 = 1024;
      int v77 = v42;
      _os_log_impl(&dword_1853B0000, v40, OS_LOG_TYPE_ERROR, "\tpreviousTouchMap.count: %d; newTouchMap.count: %d",
        buf,
        0xEu);
    }
  }
  CFDictionaryRef v49 = v11;
  CFDictionaryRef v50 = v10;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  int v14 = [v8 allTouches];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v62 objects:buf count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v63;
    do
    {
      uint64_t v18 = 0;
      do
      {
        if (*(void *)v63 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void *)(*((void *)&v62 + 1) + 8 * v18);
        if (![(id)v19 phase] || objc_msgSend((id)v19, "phase") == 1) {
          [(id)v19 setPhase:2];
        }
        if (v19) {
          BOOL v20 = *(void **)(v19 + 360);
        }
        else {
          BOOL v20 = 0;
        }
        id v21 = v20;
        float64x2_t v22 = objc_msgSend(v9, "hoverTouchForContextId:pathIndex:", objc_msgSend(v21, "_contextId"), objc_msgSend((id)v19, "_pathIndex"));
        if (v22 && ([(id)v19 phase] == 3 || objc_msgSend((id)v19, "phase") == 4)) {
          [(id)v19 _clearForReenteringHoverInWindow:v21];
        }
        if (v19) {
          *(_WORD *)(v19 + 236) &= ~0x4000u;
        }

        ++v18;
      }
      while (v16 != v18);
      uint64_t v23 = [v14 countByEnumeratingWithState:&v62 objects:buf count:16];
      uint64_t v16 = v23;
    }
    while (v23);
  }

  v61[0] = MEMORY[0x1E4F143A8];
  v61[1] = 3221225472;
  v61[2] = ____finishDigitizerEventDispatch_block_invoke;
  v61[3] = &__block_descriptor_48_e24_v32__0_8__UITouch_16_B24lu32l8u40l8;
  v61[4] = v9;
  v61[5] = v8;
  [(__CFDictionary *)v49 enumerateKeysAndObjectsUsingBlock:v61];
  double v24 = *(void **)(v48 + 8);
  uint64_t v25 = [v8 _exclusiveTouchWindows];
  int v26 = (void *)[v25 mutableCopy];

  v59[0] = MEMORY[0x1E4F143A8];
  v59[1] = 3221225472;
  v59[2] = ____finishDigitizerEventDispatch_block_invoke_2;
  v59[3] = &unk_1E53048D0;
  id v27 = v26;
  id v60 = v27;
  [(__CFDictionary *)v50 enumerateKeysAndObjectsUsingBlock:v59];
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  id v28 = v27;
  uint64_t v29 = [v28 countByEnumeratingWithState:&v55 objects:v73 count:16];
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)v56;
    do
    {
      for (uint64_t j = 0; j != v30; ++j)
      {
        if (*(void *)v56 != v31) {
          objc_enumerationMutation(v28);
        }
        [*(id *)(*((void *)&v55 + 1) + 8 * j) _setExclusiveTouchView:0];
      }
      uint64_t v30 = [v28 countByEnumeratingWithState:&v55 objects:v73 count:16];
    }
    while (v30);
  }

  long long v33 = [v8 _exclusiveTouchWindows];
  [v33 minusSet:v28];

  if ([v28 count])
  {
    unint64_t v34 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB262D18);
    if (*(unsigned char *)v34)
    {
      int v43 = *(NSObject **)(v34 + 8);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        double v44 = v43;
        double v45 = (objc_class *)objc_opt_class();
        int v46 = NSStringFromClass(v45);
        *(_DWORD *)CGFloat v67 = 138412802;
        unint64_t v68 = v46;
        __int16 v69 = 2048;
        CGFloat v70 = v8;
        __int16 v71 = 2112;
        id v72 = v28;
        _os_log_impl(&dword_1853B0000, v44, OS_LOG_TYPE_ERROR, "%@<%p> - Windows are no longer exclusive touch (%@)", v67, 0x20u);
      }
    }
  }
  if ([v24 _rotationDisabledDuringTouch])
  {
    CFIndex v35 = CFDictionaryGetCount(v50);
    if (!v47 && v35)
    {
      int v36 = &selRef_beginDisablingInterfaceAutorotation;
LABEL_52:
      CGFloat v37 = +[UIWindow allWindowsIncludingInternalWindows:0 onlyVisibleWindows:0];
      [v37 makeObjectsPerformSelector:*v36];

      goto LABEL_53;
    }
    if (v47 && !v35)
    {
      int v36 = &selRef_endDisablingInterfaceAutorotation;
      goto LABEL_52;
    }
  }
LABEL_53:

  CFRelease(*(CFTypeRef *)(a1 + 72));
}

void _UIAnalyticsGatherMultitouchAnalytics(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (_shouldGatherAnalytics() && ![v1 type])
  {
    id v17 = v1;
    uint64_t v2 = [v1 _allWindows];
    id v3 = [(id)UIApp _mainEventEnvironment];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v4 = v2;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v18 objects:v24 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v19 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          CFDictionaryRef v10 = -[UIEventEnvironment _touchesEventForWindow:]((uint64_t)v3, v9);
          if (v10)
          {
            id v11 = v9;
            unint64_t v12 = _windowToTouchesMap();
            unint64_t v13 = [v12 objectForKey:v11];

            if (!v13)
            {
              unint64_t v13 = objc_alloc_init(_UIAnalyticsTouchesSession);
              int v14 = _windowToTouchesMap();
              [v14 setObject:v13 forKey:v11];
            }
            [(_UIAnalyticsTouchesSession *)v13 processEvent:v10];
            if (![(_UIAnalyticsTouchesSession *)v13 isValid])
            {
              id v15 = v11;
              uint64_t v16 = _windowToTouchesMap();
              [v16 removeObjectForKey:v15];
            }
          }
          else
          {
            _uiMultitouchAnalyticsLog();
            unint64_t v13 = (_UIAnalyticsTouchesSession *)objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(&v13->super, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134217984;
              uint64_t v23 = v9;
              _os_log_error_impl(&dword_1853B0000, &v13->super, OS_LOG_TYPE_ERROR, "Analytics: Event environment has no touch events for window %p", buf, 0xCu);
            }
          }
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v18 objects:v24 count:16];
      }
      while (v6);
    }

    id v1 = v17;
  }
}

uint64_t _shouldGatherAnalytics()
{
  if (qword_1EB265068 != -1) {
    dispatch_once(&qword_1EB265068, &__block_literal_global_40_3);
  }
  if (byte_1EB265029) {
    return 0;
  }
  return MEMORY[0x1F4113888](@"com.apple.app-profile");
}

void forwardTouchMethod(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  id v10 = a3;
  id v11 = a4;
  unint64_t v12 = [(id)UIApp _responderBasedEventDeliverer];
  if (v12 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    [v12 forward:v10 phase:a5 withEvent:v11 fromResponder:v9];
  }
  else
  {
    uint64_t v13 = [v9 nextResponder];
    int v14 = (void *)v13;
    if (v13 && (id)v13 != v9)
    {
      id v15 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      uint64_t v19 = MEMORY[0x1E4F143A8];
      uint64_t v20 = 3221225472;
      long long v21 = __forwardTouchMethod_block_invoke;
      float64x2_t v22 = &unk_1E53033A0;
      id v23 = v9;
      id v16 = v14;
      id v24 = v16;
      id v17 = v11;
      id v25 = v17;
      id v18 = v15;
      id v26 = v18;
      [v10 enumerateObjectsUsingBlock:&v19];
      if (objc_msgSend(v18, "count", v19, v20, v21, v22)) {
        ((void (*)(id, uint64_t, id, id))[v16 methodForSelector:a2])(v16, a2, v18, v17);
      }
    }
  }
}

void _UIPencilEventRequestBarrelFocusIfAbleForWindow(void *a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v4 = [a1 _contextId];
  char v5 = [a1 _isSystemGestureWindow];
  uint64_t v6 = [a1 _eventRoutingScene];
  uint64_t v7 = [(id)UIApp _mainEventEnvironment];
  int64x2_t v8 = (void *)v7;
  if (a1
    && v4
    && (v5 & 1) == 0
    && v6
    && v7
    && (![v6 activationState]
     || [v6 activationState] == 1
     || [a1 _isHostedInAnotherProcess]))
  {
    id v9 = [v6 _screen];
    int v10 = [v9 _isEmbeddedScreen];

    if (v10)
    {
      if (qword_1E8FF62D8 != -1) {
        dispatch_once(&qword_1E8FF62D8, &__block_literal_global_462);
      }
      if (!_MergedGlobals_32)
      {
        id v11 = (id *)-[UIEventEnvironment _pencilEventForWindow:](v8, a1);
        if (a2)
        {
          if ((-[_UIPencilEvent windowHasRegisteredInteractionsWantingFocus:]((uint64_t)v11, (uint64_t)a1) & 1) == 0) {
            goto LABEL_19;
          }
        }
        else if (!v11 || ![v11[22] count])
        {
          goto LABEL_19;
        }
        BKSHIDServicesClaimGenericGestureFocus();
        unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("PencilInteraction", &qword_1E8FF62E0);
        if (*(unsigned char *)CategoryCachedImpl)
        {
          uint64_t v13 = *(NSObject **)(CategoryCachedImpl + 8);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            int v14 = NSString;
            id v15 = a1;
            id v16 = v13;
            id v17 = (objc_class *)objc_opt_class();
            id v18 = NSStringFromClass(v17);
            uint64_t v19 = [v14 stringWithFormat:@"<%@: %p>", v18, v15];

            *(_DWORD *)buf = 138543618;
            long long v21 = v19;
            __int16 v22 = 1026;
            int v23 = v4;
            _os_log_impl(&dword_1853B0000, v16, OS_LOG_TYPE_ERROR, "Requested pencil barrel event focus for window: %{public}@; contextId: 0x%{public}X",
              buf,
              0x12u);
          }
        }
      }
    }
  }
LABEL_19:
}

void sub_185689578(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_185689EB8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

CFIndex _UIQOSExpectComplexCommit(char *__src)
{
  _MergedGlobals_1301 = 0;
  if (qword_1EB264D98 != -1) {
    dispatch_once(&qword_1EB264D98, &__block_literal_global_7_3);
  }
  if (dword_1EB264DA8) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = word_1EB264DD8 == 0;
  }
  if (v2)
  {
    CFIndex result = CFDictionaryGetCount((CFDictionaryRef)qword_1EB264DA0);
    if (result)
    {
      uint64_t v4 = _MergedGlobals_1301;
      if (!_MergedGlobals_1301)
      {
        uint64_t v4 = mach_absolute_time();
        _MergedGlobals_1301 = v4;
      }
      qword_1EB264DB8 = v4;
      qword_1EB264DC0 = (unint64_t)((double)(unint64_t)qword_1EB264DB0 * 0.5 + (double)v4);
      qword_1EB264DE0 |= 1uLL;
      strncpy(__dst, __src, 8uLL);
      _tracepointArg4((uint64_t)&qword_1EB264DA0);
      kdebug_trace();
      _beginInterval();
      return _waitCommitEnd();
    }
  }
  else
  {
    CFIndex result = _adjustOptions(__src, 1);
    if (result)
    {
      return work_interval_instance_update();
    }
  }
  return result;
}

void sub_18568B328(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_18568B8F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _adjustOptions(char *__src, uint64_t a2)
{
  if ((qword_1EB264DE0 | a2) == qword_1EB264DE0) {
    return 0;
  }
  qword_1EB264DE0 |= a2;
  strncpy(__dst, __src, 8uLL);
  _tracepointArg4((uint64_t)&qword_1EB264DA0);
  kdebug_trace();
  if (!(_BYTE)word_1EB264DD8) {
    return 0;
  }
  work_interval_instance_set_complexity();
  return 1;
}

double segmentBarHeight(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  [a1 _defaultHeightForTraitCollection:a3 size:a4];
  double v9 = v8;
  int v10 = [v7 backgroundImageForState:0 isMini:0 withFallback:1];

  if (v10)
  {
    [v10 capInsets];
    double v12 = v11;
    double v14 = v13;
    [v10 size];
    double v9 = v15;
    if (v12 != 0.0 || v14 != 0.0)
    {
      [v10 alignmentRectInsets];
      double v9 = v9 + v16 + v17;
    }
  }

  return v9;
}

id _UIButtonCombineDictionaries(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 count])
  {
    if ([v4 count])
    {
      char v5 = (void *)[v3 mutableCopy];
      [v5 addEntriesFromDictionary:v4];
      uint64_t v6 = (void *)[v5 copy];

      goto LABEL_7;
    }
    id v7 = v3;
  }
  else
  {
    id v7 = v4;
  }
  uint64_t v6 = v7;
LABEL_7:

  return v6;
}

id UISegmentedControlStyleProviderForIdiom(void *a1, uint64_t a2)
{
  if (os_variant_has_internal_diagnostics())
  {
    if (!a1)
    {
      double v9 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v9, OS_LOG_TYPE_FAULT, "No segmented control class provided for visual style provider lookup.", buf, 2u);
      }
    }
  }
  else if (!a1)
  {
    int v10 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25E5A8) + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v11 = 0;
      _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_ERROR, "No segmented control class provided for visual style provider lookup.", v11, 2u);
    }
  }
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (objc_msgSend(a1, "__styleProviderForIdiom:", a2), (id v4 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    char v5 = (void *)_MergedGlobals_55_0;
    if (!_MergedGlobals_55_0
      || ([NSNumber numberWithInteger:a2],
          uint64_t v6 = objc_claimAutoreleasedReturnValue(),
          [v5 objectForKeyedSubscript:v6],
          id v4 = objc_claimAutoreleasedReturnValue(),
          v6,
          !v4))
    {
      if (qword_1EB25E5B0 != -1) {
        dispatch_once(&qword_1EB25E5B0, &__block_literal_global_1178);
      }
      if (a2 == 3) {
        id v7 = (id)objc_opt_new();
      }
      else {
        id v7 = (id)qword_1EB25E5A0;
      }
      id v4 = v7;
    }
  }
  return v4;
}

void sub_185695638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id *location,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a64);
  _Unwind_Resume(a1);
}

void sub_1856958F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185696038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _UIGetBarNavigationPaletteEnabled()
{
  if (!_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_BarNavigationPaletteEnabled, @"BarNavigationPaletteEnabled"))return byte_1EB257074 != 0; {
  if (_IsCalendar_onceToken != -1)
  }
    dispatch_once(&_IsCalendar_onceToken, &__block_literal_global_1773);
  return _IsCalendar_result == 0;
}

void sub_185698890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2 == 1)
  {
    id v13 = objc_begin_catch(exception_object);
    double v14 = *(NSObject **)(__UILogGetCategoryCachedImpl("UINavigationController_in_UISplitViewController", &qword_1EB25A8C8)+ 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)(v12 - 160) = 0;
      _os_log_impl(&dword_1853B0000, v14, OS_LOG_TYPE_DEFAULT, "Failed to retrieve _internalState. Logging code needs updating", (uint8_t *)(v12 - 160), 2u);
    }

    objc_end_catch();
    JUMPOUT(0x1856985F8);
  }
  _Unwind_Resume(exception_object);
}

id _assistedButtonForView(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

uint64_t _shouldAssistantDescendent(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    id v5 = v3;
    if (WeakRetained == v5)
    {
      uint64_t v6 = 1;
    }
    else
    {
      while (1)
      {
        uint64_t v6 = [v5 _allowAssistanceInSubtree];
        if (!v6) {
          break;
        }
        uint64_t v7 = [v5 superview];

        id v5 = (id)v7;
        if ((id)v7 == WeakRetained)
        {
          id v5 = WeakRetained;
          break;
        }
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_18569E200(void *a1, const char **a2)
{
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v7 = *(void **)(v6 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v6 + 16), sel_copy);
    sub_186A1F1CC();
    swift_unknownObjectRelease();
    sub_185B23968();
    swift_dynamicCast();
    uint64_t v7 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255AC8);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v11;
    swift_release();
    uint64_t *v2 = v8;
  }
  double v9 = *a2;
  id v10 = v7;
  objc_msgSend(v10, v9, a1);
}

void sub_18569F828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1856A12B4(_Unwind_Exception *a1)
{
}

void __destructor_8_sb0_AB8s24n1_S_sb8_sb16_AE(uint64_t a1)
{
  id v2 = *(void **)(a1 + 16);
}

void _UIOrderedRangeIndexerImpl::appendRange(_UIOrderedRangeIndexerImpl *this, _NSRange a2)
{
  NSUInteger length = a2.length;
  NSUInteger location = a2.location;
  if (a2.location == 0x7FFFFFFFFFFFFFFFLL)
  {
    double v17 = [MEMORY[0x1E4F28B00] currentHandler];
    id v18 = [NSString stringWithUTF8String:"void _UIOrderedRangeIndexerImpl::appendRange(NSRange)"];
    [v17 handleFailureInFunction:v18 file:@"_UIOrderedRangeIndexer.mm" lineNumber:110 description:@"Attempted to insert an invalid range (location == NSNotFound)"];
  }
  id v5 = *(NSUInteger **)this;
  uint64_t v6 = (NSUInteger *)*((void *)this + 1);
  if (*(NSUInteger **)this == v6)
  {
    *((void *)this + 3) = location;
    uint64_t v6 = v5;
    NSUInteger v7 = length;
  }
  else
  {
    if (location < *(v6 - 1) + *(v6 - 2))
    {
      uint64_t v19 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v20 = [NSString stringWithUTF8String:"void _UIOrderedRangeIndexerImpl::appendRange(NSRange)"];
      [v19 handleFailureInFunction:v20 file:@"_UIOrderedRangeIndexer.mm" lineNumber:114 description:@"Attempted to append a range that does not follow the preceeding range."];

      uint64_t v6 = (NSUInteger *)*((void *)this + 1);
    }
    NSUInteger v7 = location + length - *((void *)this + 3);
  }
  *((void *)this + 4) = v7;
  unint64_t v8 = *((void *)this + 2);
  if ((unint64_t)v6 >= v8)
  {
    id v10 = *(NSUInteger **)this;
    uint64_t v11 = ((uint64_t)v6 - *(void *)this) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      abort();
    }
    uint64_t v13 = v8 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      double v15 = (char *)operator new(16 * v14);
    }
    else
    {
      double v15 = 0;
    }
    double v16 = (NSUInteger *)&v15[16 * v11];
    NSUInteger *v16 = location;
    v16[1] = length;
    double v9 = v16 + 2;
    if (v6 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v6 - 1);
        v16 -= 2;
        v6 -= 2;
      }
      while (v6 != v10);
      uint64_t v6 = *(NSUInteger **)this;
    }
    *(void *)this = v16;
    *((void *)this + 1) = v9;
    *((void *)this + 2) = &v15[16 * v14];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = location;
    v6[1] = length;
    double v9 = v6 + 2;
  }
  *((void *)this + 1) = v9;
}

void sub_1856A174C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1856A1B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1856A2180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1856A2674(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1856A2878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _UITableUpdateSelectionIsKeyTraitOverride(void *a1, int a2, int a3)
{
  id v14 = a1;
  id v5 = [v14 traitCollection];
  if ((unint64_t)([v5 _focusSystemState] - 1) >= 2)
  {
    uint64_t v7 = [v5 _splitViewControllerContext];
  }
  else
  {
    int v6 = _AXSFullKeyboardAccessEnabled();
    uint64_t v7 = [v5 _splitViewControllerContext];
    if (!v6)
    {
      unsigned int v8 = a2 & a3;
      goto LABEL_7;
    }
  }
  uint64_t v9 = v7;
  char v10 = _UITableConstantsUseUIPSidebarMetrics();
  unsigned int v8 = (v9 & 0xFFFFFFFFFFFFFFFDLL) == 1;
  if (v10) {
    unsigned int v8 = 1;
  }
LABEL_7:
  uint64_t v11 = v8;
  unint64_t v12 = -[UIView _internalTraitOverrides](v14);
  [v12 _setNSIntegerValue:v11 forTraitToken:0x1ED3F5C88];

  uint64_t v13 = [v14 window];

  if (v13) {
    [v14 updateTraitsIfNeeded];
  }
}

uint64_t _UITableConstantsUseUIPSidebarMetrics()
{
  if (qword_1EB263510 != -1) {
    dispatch_once(&qword_1EB263510, &__block_literal_global_527);
  }
  return _MergedGlobals_1243;
}

id _accessoryViewAsClass(void *a1, objc_class *a2)
{
  id v3 = a1;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v5 = [MEMORY[0x1E4F28B00] currentHandler];
    int v6 = objc_msgSend(NSString, "stringWithUTF8String:", "__kindof UIView * _Nonnull _accessoryViewAsClass(UIView * _Nonnull __strong, Class  _Nonnull __unsafe_unretained)");
    uint64_t v7 = NSStringFromClass(a2);
    [v5 handleFailureInFunction:v6, @"UICollectionViewListCell.m", 1440, @"Accessory view is not of expected class (%@): %@", v7, v3 file lineNumber description];
  }
  return v3;
}

void sub_1856A5474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

IMP __UICollectionViewListCellCommonInit_block_invoke(uint64_t a1)
{
  uint64_t v2 = +[UICollectionViewListCell _createVisualProviderForCell:*(void *)(a1 + 32)];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 648);
  *(void *)(v3 + 64_Block_object_dispose(&STACK[0x7F0], 8) = v2;

  [*(id *)(a1 + 32) _updateConstants];
  [*(id *)(a1 + 32) setEdgesPreservingSuperviewLayoutMargins:10];
  objc_msgSend(*(id *)(a1 + 32), "setEdgesInsettingLayoutMarginsFromSafeArea:", objc_msgSend(*(id *)(a1 + 32), "edgesInsettingLayoutMarginsFromSafeArea") & 0xA);
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(v5 + 760);
  uint64_t v7 = MEMORY[0x1E4F1CBF0];
  *(void *)(v5 + 760) = MEMORY[0x1E4F1CBF0];

  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 768);
  *(void *)(v8 + 76_Block_object_dispose(&STACK[0x7F0], 8) = v7;

  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 776);
  *(void *)(v10 + 776) = v7;

  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void **)(v12 + 784);
  *(void *)(v12 + 784) = v7;

  uint64_t v14 = *(void *)(a1 + 32);
  double v15 = *(void **)(v14 + 792);
  *(void *)(v14 + 792) = v7;

  [*(id *)(a1 + 32) _createAccessoryManager];
  *(_WORD *)(*(void *)(a1 + 32) + 644) |= 0x1000u;
  [*(id *)(a1 + 32) _updateDefaultIndentationWidth];
  objc_msgSend(*(id *)(a1 + 32), "_setFocusStyle:", objc_msgSend(*(id *)(a1 + 32), "_defaultFocusStyle"));
  double v16 = (objc_class *)objc_opt_class();
  double v17 = (objc_class *)objc_opt_class();
  IMP MethodImplementation = class_getMethodImplementation(v16, sel__preferredSeparatorInsetsForProposedInsets_);
  IMP result = class_getMethodImplementation(v17, sel__preferredSeparatorInsetsForProposedInsets_);
  if (MethodImplementation == result || result == 0 || MethodImplementation == 0) {
    __int16 v22 = 0;
  }
  else {
    __int16 v22 = 0x4000;
  }
  *(_WORD *)(*(void *)(a1 + 32) + 644) = *(_WORD *)(*(void *)(a1 + 32) + 644) & 0xBFFF | v22;
  return result;
}

void (*_UIGetSystemTraitTokensAffectingColorAppearance())(void, void, void)
{
  os_unfair_lock_lock((os_unfair_lock_t)&_UITraitLock);
  uint64_t v0 = (void (*)(void, void, void))[MEMORY[0x1E4F1CA48] arrayWithCapacity:_UITraitTokenSetCount((uint64_t)qword_1EB2623F0)];
  v2[0] = (void (*)(void, void, void))MEMORY[0x1E4F143A8];
  v2[1] = (void (*)(void, void, void))3221225472;
  v2[2] = (void (*)(void, void, void))___UIGetSystemTraitTokensAffectingColorAppearance_block_invoke;
  v2[3] = (void (*)(void, void, void))&unk_1E52F2E58;
  v2[4] = v0;
  _UITraitTokenSetEnumerate(qword_1EB2623F0, v2);
  os_unfair_lock_unlock((os_unfair_lock_t)&_UITraitLock);
  return v0;
}

id _accessoryAsClass(void *a1, objc_class *a2)
{
  id v3 = a1;
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
    int v6 = objc_msgSend(NSString, "stringWithUTF8String:", "__kindof UICellAccessory * _Nonnull _accessoryAsClass(UICellAccessory * _Nonnull __strong, Class  _Nonnull __unsafe_unretained)");
    uint64_t v7 = NSStringFromClass(a2);
    [v5 handleFailureInFunction:v6, @"UICollectionViewListCell.m", 1315, @"Accessory is not of expected class (%@): %@", v7, v3 file lineNumber description];
  }
  return v3;
}

__CFString *_UIStringFromWhitePointAdaptivityStyle(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      IMP result = @"_UIWhitePointAdaptivityStyleStandard";
      break;
    case 1:
      IMP result = @"_UIWhitePointAdaptivityStyleReading";
      break;
    case 2:
      IMP result = @"_UIWhitePointAdaptivityStylePhoto";
      break;
    case 3:
      IMP result = @"_UIWhitePointAdaptivityStyleVideo";
      break;
    case 4:
      IMP result = @"_UIWhitePointAdaptivityStyleGame";
      break;
    default:
      if (a1 == 0x7FFFFFFFFFFFFFFFLL) {
        IMP result = @"_UIWhitePointAdaptivityStyleOff";
      }
      else {
        IMP result = 0;
      }
      break;
  }
  return result;
}

void stateMachineSpec_block_invoke_11(uint64_t *a1)
{
  uint64_t v2 = _queue_compatibilityRecord(a1[4], a1[5]);
  uint64_t v3 = *(void *)(a1[6] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t sub_1856A95EC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_1856A9630()
{
  sub_1856A9664(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(void *)(v0 + 40), (uint64_t)&_s6GetterVN_5, (uint64_t)&off_1ED0BE148);
}

void sub_1856A9664(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  _s23InProcessAnimationStateCMa();
  objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_pushViewAnimationState_context_, 0, 0);
  uint64_t v11 = (void *)__currentViewAnimationState;
  if (__currentViewAnimationState)
  {
    uint64_t v12 = swift_dynamicCastClassUnconditional();
    swift_beginAccess();
    uint64_t v13 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v12;
    id v14 = v11;

    uint64_t v18 = a5;
    uint64_t v19 = a6;
    sub_1853B8150((uint64_t)v17, (uint64_t)v16, &qword_1EB255C18);
    uint64_t v15 = v12 + OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_animationAndComposerGetter;
    swift_beginAccess();
    sub_1856A97C0((uint64_t)v16, v15, &qword_1EB255C18);
    swift_endAccess();
    *(unsigned char *)(v12 + OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_isInteractive) = a2 & 1;
    a3(v12);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1856A97C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1856A9824(uint64_t result)
{
  *(unsigned char *)(result + OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_updateType) = 2;
  return result;
}

void sub_1856A983C(uint64_t a1, uint64_t a2, char a3, char a4, void (*a5)(uint64_t))
{
  _s23InProcessAnimationStateCMa();
  objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_pushViewAnimationState_context_, 0, 0);
  uint64_t v10 = (void *)__currentViewAnimationState;
  if (__currentViewAnimationState)
  {
    uint64_t v11 = swift_dynamicCastClassUnconditional();
    swift_beginAccess();
    uint64_t v12 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v11;
    id v13 = v10;

    uint64_t v18 = &_s6GetterVN_2;
    uint64_t v19 = &off_1ED0BDDB8;
    uint64_t v16 = a2;
    char v17 = a3 & 1;
    sub_1853B8150((uint64_t)&v16, (uint64_t)v15, &qword_1EB255C18);
    uint64_t v14 = v11 + OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_animationAndComposerGetter;
    swift_beginAccess();
    swift_unknownObjectRetain();
    sub_1856A97C0((uint64_t)v15, v14, &qword_1EB255C18);
    swift_endAccess();
    *(unsigned char *)(v11 + OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_isInteractive) = a4 & 1;
    a5(v11);
  }
  else
  {
    __break(1u);
  }
}

void sub_1856A99BC()
{
  sub_1856A983C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(unsigned char *)(v0 + 33), *(void (**)(uint64_t))(v0 + 40));
}

uint64_t sub_1856A99D0()
{
  return sub_1856A99D8(*(void *)(v0 + 16));
}

uint64_t sub_1856A99D8(uint64_t a1)
{
  if (qword_1E8FB0110 != -1) {
    a1 = swift_once();
  }
  MEMORY[0x1F4188790](a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB0150);
  sub_186A1EFAC();
  uint64_t v1 = *(void *)(v6 + 16);
  if (v1)
  {
    uint64_t v2 = v6 + 40;
    do
    {
      uint64_t v3 = *(void (**)(uint64_t))(v2 - 8);
      uint64_t v4 = swift_retain();
      v3(v4);
      swift_release();
      v2 += 16;
      --v1;
    }
    while (v1);
  }
  return swift_bridgeObjectRelease();
}

void sub_1856A9AE8()
{
  sub_1856A9AF0(v0);
}

void sub_1856A9AF0(uint64_t a1)
{
  type metadata accessor for PropertyCollectingAnimationState();
  objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_pushViewAnimationState_context_, 0, 0);
  uint64_t v2 = (void *)__currentViewAnimationState;
  if (__currentViewAnimationState)
  {
    uint64_t v3 = swift_dynamicCastClass();
    if (v3) {
      id v4 = v2;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  swift_beginAccess();
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v3;
}

uint64_t type metadata accessor for PropertyCollectingAnimationState()
{
  return self;
}

void mapTrackedAnimations(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v4 = [(id)qword_1EB25C0E8 objectForKeyedSubscript:a1];
  uint64_t v19 = [v4 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v19)
  {
    uint64_t v5 = *(void *)v29;
    int v23 = v3;
    long long v21 = v4;
    uint64_t v18 = *(void *)v29;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v29 != v5) {
          objc_enumerationMutation(v4);
        }
        uint64_t v20 = v6;
        uint64_t v7 = *(void **)(*((void *)&v28 + 1) + 8 * v6);
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        id obj = [v7 _trackedAnimations];
        uint64_t v8 = [obj countByEnumeratingWithState:&v24 objects:v32 count:16];
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = *(void *)v25;
          while (2)
          {
            for (uint64_t i = 0; i != v9; ++i)
            {
              if (*(void *)v25 != v10) {
                objc_enumerationMutation(obj);
              }
              uint64_t v12 = *(void **)(*((void *)&v24 + 1) + 8 * i);
              id v13 = objc_getAssociatedObject(v12, &unk_1EB25C09C);
              uint64_t v14 = objc_getAssociatedObject(v12, &unk_1EB25C09B);
              uint64_t v15 = [v13 animationForKey:v14];
              uint64_t v16 = v15;
              if (!v15
                || ([v15 delegate],
                    char v17 = objc_claimAutoreleasedReturnValue(),
                    v17,
                    v17 == v7))
              {
                if (v23[2](v23, v7, v12, v13, v14))
                {

                  uint64_t v3 = v23;
                  id v4 = v21;
                  goto LABEL_20;
                }
              }
            }
            uint64_t v9 = [obj countByEnumeratingWithState:&v24 objects:v32 count:16];
            if (v9) {
              continue;
            }
            break;
          }
        }

        uint64_t v6 = v20 + 1;
        uint64_t v3 = v23;
        id v4 = v21;
        uint64_t v5 = v18;
      }
      while (v20 + 1 != v19);
      uint64_t v19 = [v21 countByEnumeratingWithState:&v28 objects:v33 count:16];
    }
    while (v19);
  }
LABEL_20:
}

uint64_t sub_1856AA450()
{
  return sub_1856AA460(*(void *)(v0 + 16), *(float *)(v0 + 24), *(float *)(v0 + 28), *(float *)(v0 + 32));
}

uint64_t sub_1856AA460(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t v7 = (_DWORD *)(a1 + 176);
  swift_beginAccess();
  _C2UpdateRequestSetRateRange(v7, a2, a3, a4);
  swift_endAccess();
  swift_beginAccess();
  _UIUpdateRequestChanged(v7);
  return swift_endAccess();
}

void requestRegistrySignaledCallback(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3 || (*a1 & 8) == 0) {
    goto LABEL_3;
  }
  *a1 &= ~8u;
  int v5 = a1[33];
  BOOL v6 = v5 != 0;
  if (v5)
  {
    if (!*(unsigned char *)(v3 + 763)) {
      _UIQOSManagedCommitsBegin(@"HighFidelity", @"HighFidelity");
    }
  }
  else if (*(unsigned char *)(v3 + 763))
  {
    _UIQOSManagedCommitsEnd(@"HighFidelity", @"HighFidelity");
  }
  *(unsigned char *)(v3 + 763) = v6;
  if (*a1)
  {
LABEL_3:
    signalChanges(a2, 2);
  }
}

_DWORD *_C2UpdateRequestSetRateRange(_DWORD *result, float a2, float a3, float a4)
{
  result[1] = a2;
  result[2] = a4;
  result[3] = a3;
  return result;
}

uint64_t _UIUpdateRequestRegistryMutableRequestChanged(uint64_t result, unsigned char *a2)
{
  if ((*a2 & 2) != 0)
  {
    *(_DWORD *)(result + 32) |= 1u;
    int v2 = *(_DWORD *)result;
    *(_DWORD *)(result + 4) |= 1u;
    if ((v2 | 0x40) != v2)
    {
      *(_DWORD *)IMP result = v2 | 0x40;
      uint64_t v3 = *(uint64_t (**)(uint64_t, void))(result + 136);
      if (v3) {
        return v3(result, *(void *)(result + 144));
      }
    }
  }
  return result;
}

uint64_t _UIUpdateRequestChanged(unsigned char *a1)
{
  return _UIUpdateRequestRegistryMutableRequestChanged((uint64_t)&mainRegistry, a1);
}

void sub_1856AA974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1856AAA60()
{
  double v1 = 0.0;
  if (*(unsigned char *)(v0 + 24))
  {
    double v2 = 0.0;
  }
  else
  {
    double v3 = *(double *)(v0 + 224);
    double v4 = *(double *)(v0 + 240);
    if (v4 == 0.0)
    {
      int v5 = self;
      id v6 = objc_msgSend(v5, sel_mainScreen);
      uint64_t v7 = (uint64_t)objc_msgSend(v6, sel_maximumFramesPerSecond);

      if (v7 < 1)
      {
        double v10 = 60.06;
      }
      else
      {
        id v8 = objc_msgSend(v5, sel_mainScreen);
        id v9 = objc_msgSend(v8, sel_maximumFramesPerSecond);

        double v10 = (double)(uint64_t)v9 * 1.001;
      }
      double v4 = 1.0 / v10;
      *(double *)(v0 + 240) = v4;
      double v2 = v3 + v4 * 0.25;
      if (*(unsigned char *)(v0 + 24)) {
        goto LABEL_15;
      }
    }
    else
    {
      double v2 = v3 + v4 * 0.25;
    }
    double v11 = *(double *)(v0 + 224);
    if (v4 == 0.0)
    {
      uint64_t v12 = self;
      id v13 = objc_msgSend(v12, sel_mainScreen);
      uint64_t v14 = (uint64_t)objc_msgSend(v13, sel_maximumFramesPerSecond);

      if (v14 < 1)
      {
        double v17 = 60.06;
      }
      else
      {
        id v15 = objc_msgSend(v12, sel_mainScreen);
        id v16 = objc_msgSend(v15, sel_maximumFramesPerSecond);

        double v17 = (double)(uint64_t)v16 * 1.001;
      }
      double v4 = 1.0 / v17;
      *(double *)(v0 + 240) = v4;
    }
    double v1 = v11 + v4;
  }
LABEL_15:
  return sub_1856AC0E8(0, 1, (uint64_t)sub_18559E0E8, v0, (uint64_t)sub_1853C51C4, v0, v2, v1);
}

uint64_t sub_1856AAC5C()
{
  signpost_c2_compose();
  return sub_1856AAA60();
}

uint64_t signpost_c2_compose()
{
  return kdebug_trace();
}

void sub_1856AACA8()
{
  sub_1856A9664(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(void *)(v0 + 40), (uint64_t)&_s6GetterVN_4, (uint64_t)&off_1ED0BDE50);
}

uint64_t sub_1856AACDC(uint64_t result)
{
  *(unsigned char *)(result + OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_updateType) = 1;
  return result;
}

__n128 sub_1856AADC8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 96);
  double v3 = *(void (**)(uint64_t))(v0 + 104);
  long long v4 = *(_OWORD *)(v0 + 40);
  long long v5 = *(_OWORD *)(v0 + 72);
  v7[2] = *(_OWORD *)(v0 + 56);
  v7[3] = v5;
  uint64_t v8 = *(void *)(v0 + 88);
  v7[0] = *(_OWORD *)(v0 + 24);
  v7[1] = v4;
  sub_1856AAE18(v1, (uint64_t)v7, v2, v3);
  return result;
}

void sub_1856AAE18(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t))
{
  _s23InProcessAnimationStateCMa();
  objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_pushViewAnimationState_context_, 0, 0);
  uint64_t v8 = (void *)__currentViewAnimationState;
  if (__currentViewAnimationState)
  {
    uint64_t v9 = swift_dynamicCastClassUnconditional();
    swift_beginAccess();
    double v10 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v9;
    id v11 = v8;

    v17[3] = &_s6GetterVN_3;
    v17[4] = &off_1ED0BDFE8;
    uint64_t v12 = swift_allocObject();
    v17[0] = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v12 + 4_Block_object_dispose(&STACK[0x7F0], 8) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v12 + 64) = v13;
    *(void *)(v12 + 80) = *(void *)(a2 + 64);
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v12 + 32) = v14;
    sub_1853B8150((uint64_t)v17, (uint64_t)v16, &qword_1EB255C18);
    uint64_t v15 = v9 + OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_animationAndComposerGetter;
    swift_beginAccess();
    sub_1854C97D8(a2);
    sub_1856A97C0((uint64_t)v16, v15, &qword_1EB255C18);
    swift_endAccess();
    *(unsigned char *)(v9 + OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_isInteractive) = a3 & 1;
    a4(v9);
  }
  else
  {
    __break(1u);
  }
}

void sub_1856AAFB0(uint64_t a1, char a2, void (*a3)(uint64_t), double a4, double a5)
{
  _s23InProcessAnimationStateCMa();
  objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_pushViewAnimationState_context_, 0, 0);
  double v10 = (void *)__currentViewAnimationState;
  if (__currentViewAnimationState)
  {
    uint64_t v11 = swift_dynamicCastClassUnconditional();
    swift_beginAccess();
    uint64_t v12 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v11;
    id v13 = v10;

    v16[3] = &_s6GetterVN_1;
    v16[4] = &off_1ED0BDF50;
    *(double *)id v16 = a4;
    *(double *)&v16[1] = a5;
    sub_1853B8150((uint64_t)v16, (uint64_t)v15, &qword_1EB255C18);
    uint64_t v14 = v11 + OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_animationAndComposerGetter;
    swift_beginAccess();
    sub_1856A97C0((uint64_t)v15, v14, &qword_1EB255C18);
    swift_endAccess();
    *(unsigned char *)(v11 + OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_isInteractive) = a2 & 1;
    a3(v11);
  }
  else
  {
    __break(1u);
  }
}

void sub_1856AB120()
{
  sub_1856AAFB0(*(void *)(v0 + 16), *(unsigned char *)(v0 + 40), *(void (**)(uint64_t))(v0 + 48), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

id sub_1856AB134()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1) {
    return objc_msgSend(*(id *)(v0 + 16), sel_addToRunLoop_forMode_, v1, *MEMORY[0x1E4F1C4B0]);
  }
  __break(1u);
  return result;
}

void sub_1856AB534(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

id mediaTimingFunctionForTimingProvider(void *a1)
{
  id v1 = a1;
  char v2 = v1;
  if (v1)
  {
    if ([v1 timingCurveType] == 3
      || ![v2 timingCurveType]
      || [v2 timingCurveType] == 1)
    {
      double v3 = [v2 cubicTimingParameters];
      uint64_t v4 = [v3 _mediaTimingFunction];
    }
    else
    {
      double v3 = [v2 springTimingParameters];
      id v6 = [v3 _mediaTimingFunction];
      uint64_t v7 = v6;
      if (v6)
      {
        id v8 = v6;
      }
      else
      {
        id v8 = [MEMORY[0x1E4F39C10] functionWithName:*MEMORY[0x1E4F3A4A0]];
      }
      uint64_t v4 = v8;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void ___smoothDecelerationAnimation_block_invoke()
{
  uint64_t v0 = objc_opt_new();
  id v1 = (void *)qword_1EB25A568;
  qword_1EB25A568 = v0;

  double v7 = 0.0;
  double v8 = 0.0;
  double v6 = 0.0;
  +[UISpringTimingParameters _convertDampingRatio:&v8 response:&v7 toMass:&v6 stiffness:1.0 damping:0.6];
  [(id)qword_1EB25A568 setMass:v8];
  [(id)qword_1EB25A568 setStiffness:v7];
  [(id)qword_1EB25A568 setDamping:v6];
  [(id)qword_1EB25A568 durationForEpsilon:1.17549435e-38];
  objc_msgSend((id)qword_1EB25A568, "setDuration:");
  LODWORD(v2) = 1045220557;
  LODWORD(v3) = 1.0;
  LODWORD(v4) = 1.0;
  long long v5 = [MEMORY[0x1E4F39C10] functionWithControlPoints:0.0 :v2 :v3 :v4];
  [(id)qword_1EB25A568 setTimingFunction:v5];
}

uint64_t sub_1856ABED4(void *a1)
{
  uint64_t v3 = *v1;
  char v15 = 0;
  double v4 = v1[34];
  uint64_t v5 = v3;
  double v6 = (void *)swift_allocObject();
  v6[2] = v1;
  v6[3] = a1;
  v6[4] = &v15;
  v6[5] = v5;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1853C263C;
  *(void *)(v7 + 24) = v6;
  void aBlock[4] = sub_1853BE6D4;
  void aBlock[5] = v7;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1853BE46C;
  aBlock[3] = &block_descriptor_174;
  double v8 = _Block_copy(aBlock);
  swift_retain();
  id v9 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v4, v8);
  _Block_release(v8);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v4)
  {
    __break(1u);
  }
  else
  {
    if ((v15 & 1) == 0)
    {
      signpost_c2_animatorFired();
      objc_msgSend(v9, sel_timestamp);
      double v12 = v11;
      objc_msgSend(v9, sel_targetTimestamp);
      sub_1856AC0E8(0, 0, (uint64_t)signpost_c2_removePresentationModifier_end, 0, (uint64_t)signpost_c2_removePresentationModifier_end, 0, v12, v13);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1856AC0E8(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  signpost_c2_tick_enter_start();
  uint64_t v14 = *(NSObject **)(v8 + 248);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1853C1E2C;
  *(void *)(v15 + 24) = v8;
  long long v31 = sub_1853BE6D4;
  uint64_t v32 = v15;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v28 = 1107296256;
  long long v29 = sub_1853BE46C;
  long long v30 = &block_descriptor_36_1;
  id v16 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v14, v16);
  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v19 = *(NSObject **)(v8 + 256);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v8;
  *(unsigned char *)(v20 + 24) = a2 & 1;
  *(void *)(v20 + 32) = a3;
  *(void *)(v20 + 40) = a4;
  *(double *)(v20 + 4_Block_object_dispose(&STACK[0x7F0], 8) = a7;
  *(unsigned char *)(v20 + 56) = a1 & 1;
  *(double *)(v20 + 64) = a8;
  *(void *)(v20 + 72) = a5;
  *(void *)(v20 + 80) = a6;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_1853C1EB8;
  *(void *)(v21 + 24) = v20;
  long long v31 = sub_1853BE6D4;
  uint64_t v32 = v21;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v28 = 1107296256;
  long long v29 = sub_1853BE46C;
  long long v30 = &block_descriptor_46_3;
  __int16 v22 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v19, v22);
  _Block_release(v22);
  char v23 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v23) {
LABEL_5:
  }
    __break(1u);
  return result;
}

id static NSCollectionLayoutSection.list(using:layoutEnvironment:)(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(*(void *)a1 + 16), sel_copy);
  sub_186A1F1CC();
  swift_unknownObjectRelease();
  sub_1856ACF00();
  swift_dynamicCast();
  id v3 = objc_msgSend(self, sel_sectionWithListConfiguration_layoutEnvironment_, v5, a2);

  return v3;
}

unint64_t sub_1856ACF00()
{
  unint64_t result = qword_1EB255AA0;
  if (!qword_1EB255AA0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB255AA0);
  }
  return result;
}

void sub_1856ADA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t UICollectionViewLayoutCommonInit(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v3 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v2;

  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;

  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v7 = *(void **)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x7F0], 8) = v6;

  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v9 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v8;

  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  double v11 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v10;

  id v12 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  double v13 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v12;

  uint64_t result = [(id)a1 flipsHorizontallyInOppositeLayoutDirection];
  if (result) {
    char v15 = 8;
  }
  else {
    char v15 = 0;
  }
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a1 + 240) & 0xF7 | v15;
  return result;
}

void _UICollectionViewCompositionalLayoutCommonInit(uint64_t a1, void *a2, void *a3, void *a4)
{
  *(unsigned char *)(a1 + 288) |= 1u;
  *(unsigned char *)(a1 + 305) = 1;
  uint64_t v7 = [a2 copy];
  id v8 = *(void **)(a1 + 312);
  *(void *)(a1 + 312) = v7;

  uint64_t v9 = [a3 copy];
  id v10 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = v9;

  if (a4)
  {
    double v11 = (void *)[a4 copy];
  }
  else
  {
    double v11 = +[UICollectionViewCompositionalLayoutConfiguration defaultConfiguration];
  }
  id v12 = v11;
  objc_storeStrong((id *)(a1 + 272), v11);
}

void sub_1856AEFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, id *a14, id *a15, id *a16)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(location);
  objc_destroyWeak(a14);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak((id *)(v17 - 128));
  _Unwind_Resume(a1);
}

void sub_1856AFD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1856B0F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1856B1BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t _UIStatusBarResolvedStyleFromStyle(uint64_t a1)
{
  if (a1 == 1) {
    return 1;
  }
  else {
    return 2 * (a1 == 3);
  }
}

void sub_1856B3504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1856B89F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1856B8FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1856B93B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1856B9D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1856BB59C(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  LOBYTE(a3) = sub_1856BB6AC(a3);

  return a3 & 1;
}

BOOL sub_1856BB5D8(uint64_t a1, void (*a2)(void, _OWORD *))
{
  long long v4 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x60);
  v10[0] = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x50);
  v10[1] = v4;
  a2(0, v10);
  id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_instanceMethodForSelector_, a1);
  id v6 = objc_msgSend(v2, sel_methodForSelector_, a1);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  return !v7 && v5 != v6;
}

uint64_t type metadata accessor for UICollectionViewDiffableDataSource()
{
  return swift_getGenericMetadata();
}

BOOL sub_1856BB6AC(uint64_t a1)
{
  return sub_1856BB5D8(a1, (void (*)(void, _OWORD *))type metadata accessor for UICollectionViewDiffableDataSource);
}

void sub_1856C1B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location)
{
}

void sub_1856C20AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1856C27A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1856C2F34(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 176));
  _Unwind_Resume(a1);
}

void _UIViewControllerTransitioningRunCustomTransitionWithRequest(void *a1)
{
  id v1 = a1;
  uint64_t v20 = [v1 animator];
  uint64_t v21 = [v1 pinningInputViewsResponder];
  uint64_t v2 = [v1 interactor];
  uint64_t v18 = [v1 extraPinningInputViewsBlock];
  int v3 = [v1 keyboardShouldAnimateAlongsideForInteractiveTransitions];
  long long v4 = [v1 transitionContext];
  id v5 = [v1 keyboardAnimationStyle];
  id v6 = [v1 interactiveUpdateHandler];
  BOOL v7 = [v4 containerView];
  id v8 = [v7 keyboardSceneDelegate];

  if (v2)
  {
    [v4 _setInteractiveUpdateHandler:v6];
    [v4 _setTransitionIsCompleting:0];
    if (v3)
    {
      uint64_t v9 = [v4 _auxContext];
      [v8 prepareForAlongsideTransitionWithContext:v9];
    }
  }
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = ___UIViewControllerTransitioningRunCustomTransitionWithRequest_block_invoke;
  v32[3] = &unk_1E52D9F98;
  id v33 = v5;
  id v34 = v4;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  v22[2] = ___UIViewControllerTransitioningRunCustomTransitionWithRequest_block_invoke_2;
  v22[3] = &unk_1E52EA5B0;
  id v23 = v8;
  id v24 = v21;
  id v25 = v1;
  id v26 = v20;
  BOOL v31 = v2 != 0;
  id v27 = v34;
  id v28 = v2;
  id v29 = v6;
  id v30 = v18;
  id v19 = v18;
  id v10 = v6;
  id v11 = v2;
  id v12 = v34;
  id v13 = v20;
  id v14 = v1;
  id v15 = v21;
  id v16 = v8;
  id v17 = v5;
  +[UIView _setAlongsideAnimations:toRunByEndOfBlock:animated:](UIView, "_setAlongsideAnimations:toRunByEndOfBlock:animated:", v32, v22, [v12 isAnimated]);
}

void sub_1856C45D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIRTreeContainerNode<_UICollectionViewRTreeElement>::addContainer(_OWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (!*a3)
  {
    uint64_t v83 = [MEMORY[0x1E4F28B00] currentHandler];
    char v84 = objc_msgSend(NSString, "stringWithUTF8String:", "shared_ptr<_UIRTreeContainerNode<T>> _UIRTreeContainerNode<_UICollectionViewRTreeElement>::addContainer(shared_ptr<_UIRTreeContainerNode<T>>, shared_ptr<_UIRTreeContainerNode<T>>) [T = _UICollectionViewRTreeElement]");
    [v83 handleFailureInFunction:v84, @"_UIRTree.mm", 382, @"Invalid parameter not satisfying: %@", @"container" file lineNumber description];
  }
  if (_UIRTreeContainerNode<_UICollectionViewRTreeElement>::isFull((void *)a2))
  {
    id v8 = *(std::__shared_weak_count **)(a2 + 32);
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        uint64_t v10 = *(void *)(a2 + 24);
        std::__shared_weak_count::__release_shared[abi:nn180100](v9);
        if (v10)
        {
          id v11 = *(std::__shared_weak_count **)(a2 + 32);
          if (v11)
          {
            id v12 = std::__shared_weak_count::lock(v11);
            if (v12)
            {
              uint64_t v13 = *(void *)(a2 + 24);
LABEL_75:
              uint64_t v79 = (std::__shared_weak_count *)a3[1];
              v96[0] = *a3;
              v96[1] = v79;
              if (v79) {
                atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v80 = (std::__shared_weak_count *)a4[1];
              uint64_t v94 = *a4;
              int v95 = v80;
              if (v80) {
                atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              _UIRTreeContainerNode<_UICollectionViewRTreeElement>::addContainer(v98, v13, v96, &v94);
              uint64_t v81 = (std::__shared_weak_count *)a4[1];
              *(_OWORD *)a4 = *(_OWORD *)v98;
              if (v81) {
                std::__shared_weak_count::__release_shared[abi:nn180100](v81);
              }
              if (v95) {
                std::__shared_weak_count::__release_shared[abi:nn180100](v95);
              }
              if (v79) {
                std::__shared_weak_count::__release_shared[abi:nn180100](v79);
              }
              if (!v12) {
                goto LABEL_91;
              }
              uint64_t v82 = v12;
LABEL_90:
              std::__shared_weak_count::__release_shared[abi:nn180100](v82);
LABEL_91:
              *a1 = *(_OWORD *)a4;
              *a4 = 0;
              a4[1] = 0;
              return;
            }
          }
          else
          {
            id v12 = 0;
          }
          uint64_t v13 = 0;
          goto LABEL_75;
        }
      }
    }
    int64x2_t v92 = 0uLL;
    uint64_t v93 = 0;
    id v23 = *(std::__shared_weak_count **)(a2 + 16);
    if (v23)
    {
      uint64_t v24 = *(void *)(a2 + 8);
      id v25 = std::__shared_weak_count::lock(v23);
      if (v25)
      {
        id v26 = v25;
        uint64_t v100 = &v93;
        id v27 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(1uLL);
        id v29 = v27;
        *id v27 = v24;
        v27[1] = v26;
        id v30 = (void *)v92.i64[1];
        BOOL v31 = (void *)v92.i64[0];
        if (v92.i64[1] == v92.i64[0])
        {
          int64x2_t v34 = vdupq_n_s64(v92.u64[1]);
          uint64_t v32 = v27;
        }
        else
        {
          uint64_t v32 = v27;
          do
          {
            long long v33 = *((_OWORD *)v30 - 1);
            v30 -= 2;
            *((_OWORD *)v32 - 1) = v33;
            v32 -= 2;
            *id v30 = 0;
            v30[1] = 0;
          }
          while (v30 != v31);
          int64x2_t v34 = v92;
        }
        uint64_t v48 = (char *)(v27 + 2);
        v92.i64[0] = (uint64_t)v32;
        *(int64x2_t *)&v98[8] = v34;
        CFDictionaryRef v49 = v93;
        uint64_t v93 = (char *)&v27[2 * v28];
        unint64_t v99 = v49;
        *(void *)uint64_t v98 = v34.i64[0];
        std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer((uint64_t)v98);
        v92.i64[1] = (uint64_t)(v29 + 2);
        if (v48 >= v93)
        {
          uint64_t v52 = (uint64_t)&v48[-v92.i64[0]] >> 4;
          if ((unint64_t)(v52 + 1) >> 60) {
            abort();
          }
          unint64_t v53 = (uint64_t)&v93[-v92.i64[0]] >> 3;
          if (v53 <= v52 + 1) {
            unint64_t v53 = v52 + 1;
          }
          if ((unint64_t)&v93[-v92.i64[0]] >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v53;
          }
          uint64_t v100 = &v93;
          long long v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(v54);
          long long v57 = &v55[16 * v52];
          long long v58 = *(_OWORD *)a3;
          *(_OWORD *)long long v57 = *(_OWORD *)a3;
          if (*((void *)&v58 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          BOOL v59 = (void *)v92.i64[1];
          id v60 = (void *)v92.i64[0];
          if (v92.i64[1] == v92.i64[0])
          {
            int64x2_t v63 = vdupq_n_s64(v92.u64[1]);
            uint64_t v61 = &v55[16 * v52];
          }
          else
          {
            uint64_t v61 = &v55[16 * v52];
            do
            {
              long long v62 = *((_OWORD *)v59 - 1);
              v59 -= 2;
              *((_OWORD *)v61 - 1) = v62;
              v61 -= 16;
              *BOOL v59 = 0;
              v59[1] = 0;
            }
            while (v59 != v60);
            int64x2_t v63 = v92;
          }
          long long v51 = v57 + 16;
          v92.i64[0] = (uint64_t)v61;
          v92.i64[1] = (uint64_t)(v57 + 16);
          *(int64x2_t *)&v98[8] = v63;
          uint64_t v74 = v93;
          uint64_t v93 = &v55[16 * v56];
          unint64_t v99 = v74;
          *(void *)uint64_t v98 = v63.i64[0];
          std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer((uint64_t)v98);
        }
        else
        {
          v29[2] = *a3;
          uint64_t v50 = a3[1];
          v29[3] = v50;
          if (v50) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
          }
          long long v51 = v29 + 4;
        }
        int v75 = (int64x2_t *)operator new(0xB0uLL);
        v75->i64[1] = 0;
        v75[1].i64[0] = 0;
        v75->i64[0] = (uint64_t)&unk_1ED0BEA20;
        __int16 v76 = v93;
        v75[4].i64[1] = v92.i64[0];
        v92.i64[1] = 0;
        uint64_t v93 = 0;
        v75[2].i64[1] = 0;
        v92.i64[0] = 0;
        v75[3].i64[0] = 0;
        v75[3].i64[1] = 0;
        v75[2].i64[0] = (uint64_t)&unk_1ED0BE9E0;
        v75[4].i64[0] = 0;
        v75[5].i64[0] = (uint64_t)v51;
        v75[5].i64[1] = (uint64_t)v76;
        memset(v98, 0, sizeof(v98));
        v75[6] = 0u;
        v75[8] = 0u;
        v75[7] = 0u;
        _UIRTreeContainerNode<_UICollectionViewRTreeElement>::commonInit(v75 + 2);
        double v97 = (void **)v98;
        std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100](&v97);
        v91[0] = v75 + 2;
        v91[1] = v75;
        std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::__enable_weak_this[abi:nn180100]<_UIRTreeContainerNode<unsigned long>,_UIRTreeContainerNode<unsigned long>,void>((uint64_t)v91, &v75[2].i64[1], (uint64_t)v75[2].i64);
        atomic_fetch_add_explicit(v75[1].i64, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(v75[1].i64, 1uLL, memory_order_relaxed);
        int v77 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)(a2 + 24) = v75 + 2;
        *(void *)(a2 + 32) = v75;
        if (v77) {
          std::__shared_weak_count::__release_weak(v77);
        }
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v75);
        atomic_fetch_add_explicit(&v75->i64[1], 1uLL, memory_order_relaxed);
        uint64_t v78 = (std::__shared_weak_count *)a4[1];
        *a4 = (uint64_t)v75[2].i64;
        a4[1] = (uint64_t)v75;
        if (v78) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v78);
        }
        _UIRTreeContainerNode<_UICollectionViewRTreeElement>::invalidateBoundingFrameAndNotifyParents((int64x2_t *)a2);
        std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v75);
        *(void *)uint64_t v98 = &v92;
        std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
        goto LABEL_91;
      }
    }
  }
  else
  {
    long long v86 = *(_OWORD *)a3;
    id v14 = (std::__shared_weak_count *)a3[1];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3[1] + 8), 1uLL, memory_order_relaxed);
    }
    id v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (v15)
    {
      uint64_t v16 = *(void *)(a2 + 8);
      id v17 = std::__shared_weak_count::lock(v15);
      if (v17)
      {
        uint64_t v18 = v17;
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        id v19 = *(std::__shared_weak_count **)(v86 + 32);
        *(void *)(v86 + 24) = v16;
        *(void *)(v86 + 32) = v18;
        if (v19) {
          std::__shared_weak_count::__release_weak(v19);
        }
        std::__shared_weak_count::__release_weak(v18);
        std::__shared_weak_count::__release_shared[abi:nn180100](v18);
        unint64_t v20 = *(void *)(a2 + 56);
        uint64_t v21 = *(void **)(a2 + 48);
        if ((unint64_t)v21 >= v20)
        {
          uint64_t v35 = *(void *)(a2 + 40);
          uint64_t v36 = ((uint64_t)v21 - v35) >> 4;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 60) {
            abort();
          }
          uint64_t v38 = v20 - v35;
          if (v38 >> 3 > v37) {
            unint64_t v37 = v38 >> 3;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          uint64_t v100 = (char **)(a2 + 56);
          unint64_t v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(v39);
          int v42 = &v40[16 * v36];
          *(_OWORD *)int v42 = v86;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          double v44 = *(void **)(a2 + 40);
          int v43 = *(void **)(a2 + 48);
          if (v43 == v44)
          {
            int64x2_t v47 = vdupq_n_s64((unint64_t)v43);
            double v45 = &v40[16 * v36];
          }
          else
          {
            double v45 = &v40[16 * v36];
            do
            {
              long long v46 = *((_OWORD *)v43 - 1);
              v43 -= 2;
              *((_OWORD *)v45 - 1) = v46;
              v45 -= 16;
              *int v43 = 0;
              v43[1] = 0;
            }
            while (v43 != v44);
            int64x2_t v47 = *(int64x2_t *)(a2 + 40);
          }
          __int16 v22 = v42 + 16;
          *(void *)(a2 + 40) = v45;
          *(void *)(a2 + 4_Block_object_dispose(&STACK[0x7F0], 8) = v42 + 16;
          *(int64x2_t *)&v98[8] = v47;
          long long v64 = *(char **)(a2 + 56);
          *(void *)(a2 + 56) = &v40[16 * v41];
          unint64_t v99 = v64;
          *(void *)uint64_t v98 = v47.i64[0];
          std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer((uint64_t)v98);
        }
        else
        {
          void *v21 = v86;
          v21[1] = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          __int16 v22 = v21 + 2;
        }
        *(void *)(a2 + 4_Block_object_dispose(&STACK[0x7F0], 8) = v22;
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v14);
        }
        _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v90, a2);
        float64x2_t v85 = (float64x2_t)v90[0];
        float64x2_t v87 = (float64x2_t)v90[1];
        _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v89, *a3);
        int64x2_t v65 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(vaddq_f64(v85, v87), vaddq_f64(v89[0], v89[1])), (int8x16_t)vcgeq_f64(v89[0], v85));
        if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v65, 1), (int8x16_t)v65).u64[0] & 0x8000000000000000) != 0) {
          goto LABEL_91;
        }
        _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v88, *a3);
        float64x2_t v66 = *(float64x2_t *)(a2 + 112);
        float64x2_t v67 = vminnmq_f64(v66, v88[0]);
        float64x2_t v68 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v66, *(float64x2_t *)(a2 + 128)), vaddq_f64(v88[0], v88[1])), v67);
        *(float64x2_t *)(a2 + 112) = v67;
        *(float64x2_t *)(a2 + 12_Block_object_dispose(&STACK[0x7F0], 8) = v68;
        __int16 v69 = *(std::__shared_weak_count **)(a2 + 32);
        if (!v69) {
          goto LABEL_91;
        }
        CGFloat v70 = std::__shared_weak_count::lock(v69);
        if (!v70) {
          goto LABEL_91;
        }
        uint64_t v71 = *(void *)(a2 + 24);
        std::__shared_weak_count::__release_shared[abi:nn180100](v70);
        if (!v71) {
          goto LABEL_91;
        }
        id v72 = *(std::__shared_weak_count **)(a2 + 32);
        if (v72)
        {
          id v72 = std::__shared_weak_count::lock(v72);
          uint64_t v73 = v72;
          if (v72) {
            id v72 = *(std::__shared_weak_count **)(a2 + 24);
          }
        }
        else
        {
          uint64_t v73 = 0;
        }
        _UIRTreeContainerNode<_UICollectionViewRTreeElement>::invalidateBoundingFrameAndNotifyParents((int64x2_t *)v72);
        if (!v73) {
          goto LABEL_91;
        }
        uint64_t v82 = v73;
        goto LABEL_90;
      }
    }
  }
  std::__throw_bad_weak_ptr[abi:nn180100]();
  __break(1u);
}

void sub_1856C55DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _UIRTreeContainerNode<unsigned long>::addContainer(_OWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (!*a3)
  {
    uint64_t v83 = [MEMORY[0x1E4F28B00] currentHandler];
    char v84 = objc_msgSend(NSString, "stringWithUTF8String:", "shared_ptr<_UIRTreeContainerNode<T>> _UIRTreeContainerNode<>::addContainer(shared_ptr<_UIRTreeContainerNode<T>>, shared_ptr<_UIRTreeContainerNode<T>>) [T = unsigned long]");
    [v83 handleFailureInFunction:v84, @"_UIRTree.mm", 382, @"Invalid parameter not satisfying: %@", @"container" file lineNumber description];
  }
  if (_UIRTreeContainerNode<unsigned long>::isFull(a2))
  {
    id v8 = *(std::__shared_weak_count **)(a2 + 32);
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        uint64_t v10 = *(void *)(a2 + 24);
        std::__shared_weak_count::__release_shared[abi:nn180100](v9);
        if (v10)
        {
          id v11 = *(std::__shared_weak_count **)(a2 + 32);
          if (v11)
          {
            id v12 = std::__shared_weak_count::lock(v11);
            if (v12)
            {
              uint64_t v13 = *(void *)(a2 + 24);
LABEL_75:
              uint64_t v79 = (std::__shared_weak_count *)a3[1];
              v96[0] = *a3;
              v96[1] = v79;
              if (v79) {
                atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v80 = (std::__shared_weak_count *)a4[1];
              uint64_t v94 = *a4;
              int v95 = v80;
              if (v80) {
                atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              _UIRTreeContainerNode<unsigned long>::addContainer(v98, v13, v96, &v94);
              uint64_t v81 = (std::__shared_weak_count *)a4[1];
              *(_OWORD *)a4 = *(_OWORD *)v98;
              if (v81) {
                std::__shared_weak_count::__release_shared[abi:nn180100](v81);
              }
              if (v95) {
                std::__shared_weak_count::__release_shared[abi:nn180100](v95);
              }
              if (v79) {
                std::__shared_weak_count::__release_shared[abi:nn180100](v79);
              }
              if (!v12) {
                goto LABEL_91;
              }
              uint64_t v82 = v12;
LABEL_90:
              std::__shared_weak_count::__release_shared[abi:nn180100](v82);
LABEL_91:
              *a1 = *(_OWORD *)a4;
              *a4 = 0;
              a4[1] = 0;
              return;
            }
          }
          else
          {
            id v12 = 0;
          }
          uint64_t v13 = 0;
          goto LABEL_75;
        }
      }
    }
    int64x2_t v92 = 0uLL;
    uint64_t v93 = 0;
    id v23 = *(std::__shared_weak_count **)(a2 + 16);
    if (v23)
    {
      uint64_t v24 = *(void *)(a2 + 8);
      id v25 = std::__shared_weak_count::lock(v23);
      if (v25)
      {
        id v26 = v25;
        uint64_t v100 = &v93;
        id v27 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(1uLL);
        id v29 = v27;
        *id v27 = v24;
        v27[1] = v26;
        id v30 = (void *)v92.i64[1];
        BOOL v31 = (void *)v92.i64[0];
        if (v92.i64[1] == v92.i64[0])
        {
          int64x2_t v34 = vdupq_n_s64(v92.u64[1]);
          uint64_t v32 = v27;
        }
        else
        {
          uint64_t v32 = v27;
          do
          {
            long long v33 = *((_OWORD *)v30 - 1);
            v30 -= 2;
            *((_OWORD *)v32 - 1) = v33;
            v32 -= 2;
            *id v30 = 0;
            v30[1] = 0;
          }
          while (v30 != v31);
          int64x2_t v34 = v92;
        }
        uint64_t v48 = (char *)(v27 + 2);
        v92.i64[0] = (uint64_t)v32;
        *(int64x2_t *)&v98[8] = v34;
        CFDictionaryRef v49 = v93;
        uint64_t v93 = (char *)&v27[2 * v28];
        unint64_t v99 = v49;
        *(void *)uint64_t v98 = v34.i64[0];
        std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer((uint64_t)v98);
        v92.i64[1] = (uint64_t)(v29 + 2);
        if (v48 >= v93)
        {
          uint64_t v52 = (uint64_t)&v48[-v92.i64[0]] >> 4;
          if ((unint64_t)(v52 + 1) >> 60) {
            abort();
          }
          unint64_t v53 = (uint64_t)&v93[-v92.i64[0]] >> 3;
          if (v53 <= v52 + 1) {
            unint64_t v53 = v52 + 1;
          }
          if ((unint64_t)&v93[-v92.i64[0]] >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v53;
          }
          uint64_t v100 = &v93;
          long long v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(v54);
          long long v57 = &v55[16 * v52];
          long long v58 = *(_OWORD *)a3;
          *(_OWORD *)long long v57 = *(_OWORD *)a3;
          if (*((void *)&v58 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v58 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          BOOL v59 = (void *)v92.i64[1];
          id v60 = (void *)v92.i64[0];
          if (v92.i64[1] == v92.i64[0])
          {
            int64x2_t v63 = vdupq_n_s64(v92.u64[1]);
            uint64_t v61 = &v55[16 * v52];
          }
          else
          {
            uint64_t v61 = &v55[16 * v52];
            do
            {
              long long v62 = *((_OWORD *)v59 - 1);
              v59 -= 2;
              *((_OWORD *)v61 - 1) = v62;
              v61 -= 16;
              *BOOL v59 = 0;
              v59[1] = 0;
            }
            while (v59 != v60);
            int64x2_t v63 = v92;
          }
          long long v51 = v57 + 16;
          v92.i64[0] = (uint64_t)v61;
          v92.i64[1] = (uint64_t)(v57 + 16);
          *(int64x2_t *)&v98[8] = v63;
          uint64_t v74 = v93;
          uint64_t v93 = &v55[16 * v56];
          unint64_t v99 = v74;
          *(void *)uint64_t v98 = v63.i64[0];
          std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer((uint64_t)v98);
        }
        else
        {
          v29[2] = *a3;
          uint64_t v50 = a3[1];
          v29[3] = v50;
          if (v50) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
          }
          long long v51 = v29 + 4;
        }
        int v75 = (int64x2_t *)operator new(0xB0uLL);
        v75->i64[1] = 0;
        v75[1].i64[0] = 0;
        v75->i64[0] = (uint64_t)&unk_1ED0BEA58;
        __int16 v76 = v93;
        v75[4].i64[1] = v92.i64[0];
        v92.i64[1] = 0;
        uint64_t v93 = 0;
        v75[2].i64[1] = 0;
        v92.i64[0] = 0;
        v75[3].i64[0] = 0;
        v75[3].i64[1] = 0;
        v75[2].i64[0] = (uint64_t)&unk_1ED0BEA00;
        v75[4].i64[0] = 0;
        v75[5].i64[0] = (uint64_t)v51;
        v75[5].i64[1] = (uint64_t)v76;
        memset(v98, 0, sizeof(v98));
        v75[6] = 0u;
        v75[8] = 0u;
        v75[7] = 0u;
        _UIRTreeContainerNode<unsigned long>::commonInit(v75 + 2);
        double v97 = (void **)v98;
        std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100](&v97);
        v91[0] = v75 + 2;
        v91[1] = v75;
        std::shared_ptr<_UIRTreeContainerNode<unsigned long>>::__enable_weak_this[abi:nn180100]<_UIRTreeContainerNode<unsigned long>,_UIRTreeContainerNode<unsigned long>,void>((uint64_t)v91, &v75[2].i64[1], (uint64_t)v75[2].i64);
        atomic_fetch_add_explicit(v75[1].i64, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(v75[1].i64, 1uLL, memory_order_relaxed);
        int v77 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)(a2 + 24) = v75 + 2;
        *(void *)(a2 + 32) = v75;
        if (v77) {
          std::__shared_weak_count::__release_weak(v77);
        }
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v75);
        atomic_fetch_add_explicit(&v75->i64[1], 1uLL, memory_order_relaxed);
        uint64_t v78 = (std::__shared_weak_count *)a4[1];
        *a4 = (uint64_t)v75[2].i64;
        a4[1] = (uint64_t)v75;
        if (v78) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v78);
        }
        _UIRTreeContainerNode<unsigned long>::invalidateBoundingFrameAndNotifyParents((int64x2_t *)a2);
        std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v75);
        *(void *)uint64_t v98 = &v92;
        std::vector<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
        goto LABEL_91;
      }
    }
  }
  else
  {
    long long v86 = *(_OWORD *)a3;
    id v14 = (std::__shared_weak_count *)a3[1];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3[1] + 8), 1uLL, memory_order_relaxed);
    }
    id v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (v15)
    {
      uint64_t v16 = *(void *)(a2 + 8);
      id v17 = std::__shared_weak_count::lock(v15);
      if (v17)
      {
        uint64_t v18 = v17;
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        id v19 = *(std::__shared_weak_count **)(v86 + 32);
        *(void *)(v86 + 24) = v16;
        *(void *)(v86 + 32) = v18;
        if (v19) {
          std::__shared_weak_count::__release_weak(v19);
        }
        std::__shared_weak_count::__release_weak(v18);
        std::__shared_weak_count::__release_shared[abi:nn180100](v18);
        unint64_t v20 = *(void *)(a2 + 56);
        uint64_t v21 = *(void **)(a2 + 48);
        if ((unint64_t)v21 >= v20)
        {
          uint64_t v35 = *(void *)(a2 + 40);
          uint64_t v36 = ((uint64_t)v21 - v35) >> 4;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 60) {
            abort();
          }
          uint64_t v38 = v20 - v35;
          if (v38 >> 3 > v37) {
            unint64_t v37 = v38 >> 3;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          uint64_t v100 = (char **)(a2 + 56);
          unint64_t v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(v39);
          int v42 = &v40[16 * v36];
          *(_OWORD *)int v42 = v86;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          double v44 = *(void **)(a2 + 40);
          int v43 = *(void **)(a2 + 48);
          if (v43 == v44)
          {
            int64x2_t v47 = vdupq_n_s64((unint64_t)v43);
            double v45 = &v40[16 * v36];
          }
          else
          {
            double v45 = &v40[16 * v36];
            do
            {
              long long v46 = *((_OWORD *)v43 - 1);
              v43 -= 2;
              *((_OWORD *)v45 - 1) = v46;
              v45 -= 16;
              *int v43 = 0;
              v43[1] = 0;
            }
            while (v43 != v44);
            int64x2_t v47 = *(int64x2_t *)(a2 + 40);
          }
          __int16 v22 = v42 + 16;
          *(void *)(a2 + 40) = v45;
          *(void *)(a2 + 4_Block_object_dispose(&STACK[0x7F0], 8) = v42 + 16;
          *(int64x2_t *)&v98[8] = v47;
          long long v64 = *(char **)(a2 + 56);
          *(void *)(a2 + 56) = &v40[16 * v41];
          unint64_t v99 = v64;
          *(void *)uint64_t v98 = v47.i64[0];
          std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer((uint64_t)v98);
        }
        else
        {
          void *v21 = v86;
          v21[1] = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          __int16 v22 = v21 + 2;
        }
        *(void *)(a2 + 4_Block_object_dispose(&STACK[0x7F0], 8) = v22;
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v14);
        }
        _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v90, a2);
        float64x2_t v85 = (float64x2_t)v90[0];
        float64x2_t v87 = (float64x2_t)v90[1];
        _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v89, *a3);
        int64x2_t v65 = (int64x2_t)vandq_s8((int8x16_t)vcgeq_f64(vaddq_f64(v85, v87), vaddq_f64(v89[0], v89[1])), (int8x16_t)vcgeq_f64(v89[0], v85));
        if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v65, 1), (int8x16_t)v65).u64[0] & 0x8000000000000000) != 0) {
          goto LABEL_91;
        }
        _UIRTreeContainerNode<unsigned long>::boundingFrame((uint64_t)v88, *a3);
        float64x2_t v66 = *(float64x2_t *)(a2 + 112);
        float64x2_t v67 = vminnmq_f64(v66, v88[0]);
        float64x2_t v68 = vsubq_f64(vmaxnmq_f64(vaddq_f64(v66, *(float64x2_t *)(a2 + 128)), vaddq_f64(v88[0], v88[1])), v67);
        *(float64x2_t *)(a2 + 112) = v67;
        *(float64x2_t *)(a2 + 12_Block_object_dispose(&STACK[0x7F0], 8) = v68;
        __int16 v69 = *(std::__shared_weak_count **)(a2 + 32);
        if (!v69) {
          goto LABEL_91;
        }
        CGFloat v70 = std::__shared_weak_count::lock(v69);
        if (!v70) {
          goto LABEL_91;
        }
        uint64_t v71 = *(void *)(a2 + 24);
        std::__shared_weak_count::__release_shared[abi:nn180100](v70);
        if (!v71) {
          goto LABEL_91;
        }
        id v72 = *(std::__shared_weak_count **)(a2 + 32);
        if (v72)
        {
          id v72 = std::__shared_weak_count::lock(v72);
          uint64_t v73 = v72;
          if (v72) {
            id v72 = *(std::__shared_weak_count **)(a2 + 24);
          }
        }
        else
        {
          uint64_t v73 = 0;
        }
        _UIRTreeContainerNode<unsigned long>::invalidateBoundingFrameAndNotifyParents((int64x2_t *)v72);
        if (!v73) {
          goto LABEL_91;
        }
        uint64_t v82 = v73;
        goto LABEL_90;
      }
    }
  }
  std::__throw_bad_weak_ptr[abi:nn180100]();
  __break(1u);
}

void sub_1856C5D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(16 * a1);
}

uint64_t std::__split_buffer<std::shared_ptr<_UIRTreeContainerNode<unsigned long>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    long long v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

id UIButton.configuration.setter(uint64_t a1)
{
  if (*(void *)a1)
  {
    objc_msgSend(v1, sel_setConfiguration_, *(void *)(*(void *)a1 + 16));
    return (id)swift_release();
  }
  else
  {
    return objc_msgSend(v1, sel_setConfiguration_, 0);
  }
}

id _newButton(void *a1)
{
  id v1 = objc_msgSend((id)objc_msgSend(a1, "buttonControlClass"), "buttonWithType:", 1);
  [v1 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v1 setUserInteractionEnabled:0];
  [v1 _setImageContentMode:1];
  [v1 _setDisableAutomaticTitleAnimations:1];
  LODWORD(v2) = 1144913920;
  [v1 setContentCompressionResistancePriority:0 forAxis:v2];
  return v1;
}

void sub_1856C6F18(_Unwind_Exception *a1)
{
}

void _UIApplyCornerRadiusToView(void *a1, double a2)
{
  id v3 = a1;
  id v12 = v3;
  if (a2 > 0.0)
  {
    [v3 bounds];
    CGFloat x = v14.origin.x;
    CGFloat y = v14.origin.y;
    CGFloat width = v14.size.width;
    CGFloat height = v14.size.height;
    double v8 = CGRectGetWidth(v14) * 0.5;
    v15.origin.CGFloat x = x;
    v15.origin.CGFloat y = y;
    v15.size.CGFloat width = width;
    v15.size.CGFloat height = height;
    CGFloat v9 = CGRectGetHeight(v15);
    id v3 = v12;
    double v10 = v9 * 0.5;
    if (v8 < v10) {
      double v10 = v8;
    }
    if (v10 < a2) {
      a2 = v10;
    }
  }
  id v11 = [v3 layer];
  [v11 setMasksToBounds:1];
  [v11 setCornerCurve:*MEMORY[0x1E4F39EA8]];
  [v11 setCornerRadius:a2];
}

void sub_1856CB120(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1856CC1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose((const void *)(v48 - 232), 8);
  _Block_object_dispose((const void *)(v48 - 184), 8);
  _Block_object_dispose((const void *)(v48 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t _UISplitViewControllerAutoHidesColumns(void *a1)
{
  id v1 = a1;
  if (qword_1EB260158 != -1) {
    dispatch_once(&qword_1EB260158, &__block_literal_global_1362_0);
  }
  if (byte_1EB260089)
  {
    uint64_t v2 = 1;
  }
  else if (_MergedGlobals_1011)
  {
    id v3 = [v1 _existingView];
    long long v4 = [v3 _window];
    id v5 = [v4 windowScene];
    if ([v5 _enhancedWindowingEnabled]) {
      uint64_t v2 = _UISplitViewControllerWantsPickerBehaviors(v1) ^ 1;
    }
    else {
      uint64_t v2 = 0;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t _UISplitViewControllerWantsPickerBehaviors(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 traitCollection];
  uint64_t v3 = [v2 _presentationSemanticContext];

  if (v3 == 2) {
    uint64_t v4 = [v1 _ignoresSheetContext] ^ 1;
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_1856CEB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

UIColor __swiftcall UIBackgroundConfiguration.resolvedBackgroundColor(for:)(UIColor a1)
{
  id v2 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_resolvedBackgroundColorForTintColor_, a1.super.isa);
  uint64_t v3 = (objc_class *)v2;
  result._cachedStyleString = v5;
  result._systemColorName = v4;
  result.super.isa = v3;
  return result;
}

void sub_1856D0080(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t TaggingAppearanceIntegerSetterIMP(void *a1, const char *a2, uint64_t a3)
{
  _UIAppearanceTagObjectForSelector(a1, a2, 0);
  PushNextClassForSettingIMP(a1, a2);
  IMP v6 = CurrentOrginalSettingIMP(a1, a2);
  ((void (*)(void *, const char *, uint64_t))v6)(a1, a2, a3);
  id AssociatedObject = objc_getAssociatedObject(a1, &unk_1EB260D5A);
  double v8 = (void *)[AssociatedObject objectForKey:NSStringFromSelector(a2)];
  return [v8 removeLastObject];
}

void sub_1856D1528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  objc_destroyWeak(v11);
  objc_destroyWeak(v12);
  objc_destroyWeak((id *)(v13 - 112));
  _Unwind_Resume(a1);
}

void sub_1856D31E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const char *_UIKeyWindowUTF8SceneIdentityStringForWindowScene(void *a1)
{
  uint64_t v1 = [a1 _FBSScene];
  uint64_t v2 = [v1 identityToken];
  id v3 = [v2 stringRepresentation];
  uint64_t v4 = [v3 UTF8String];
  if (v4) {
    id v5 = (const char *)v4;
  }
  else {
    id v5 = "(nil)";
  }

  return v5;
}

void sub_1856D37B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIKeyboardArbitration_Interface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED701D80];
  uint64_t v1 = _UIKBArbiterSetForPlacements();
  [v0 setClasses:v1 forSelector:sel_transition_eventStage_withInfo_ argumentIndex:2 ofReply:0];

  return v0;
}

id _UIKeyboardArbitrationClient_Interface()
{
  uint64_t v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED5ED540];
  uint64_t v1 = _UIKBArbiterSetForPlacements();
  [v0 setClasses:v1 forSelector:sel_queue_keyboardTransition_event_withInfo_onComplete_ argumentIndex:2 ofReply:0];

  return v0;
}

id _UIKBArbiterSetForPlacements()
{
  v4[6] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = +[UIInputViewSetPlacement encodablePlacementsForXPC];
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  v4[2] = objc_opt_class();
  v4[3] = objc_opt_class();
  v4[4] = objc_opt_class();
  void v4[5] = objc_opt_class();
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:6];
  uint64_t v2 = [v0 setByAddingObjectsFromArray:v1];

  return v2;
}

id _UIPhysicalButtonInteractionArbiterTargetWindowForButton(void *a1, void *a2)
{
  id v3 = objc_msgSend(a1, "_configurationForButton:");
  if (v3)
  {
    uint64_t v4 = [a2 objectForKey:v3];
    id v5 = [v4 view];
    IMP v6 = [v5 _window];
  }
  else
  {
    IMP v6 = 0;
  }

  return v6;
}

uint64_t ___tabElementsContainsTab_block_invoke(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  uint64_t v4 = [*(id *)(a1 + 32) identifier];
  uint64_t v5 = [v3 isEqualToString:v4];

  return v5;
}

void ___doAddBackgroundTask_block_invoke(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (qword_1EB260B18 != -1) {
    dispatch_once(&qword_1EB260B18, &__block_literal_global_114);
  }
  int v2 = _MergedGlobals_1070;
  if ((_MergedGlobals_1070 & 1) == 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), (id)qword_1EB260A50);
    id v3 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (v3)
    {
      if ([v3 valid])
      {
        uint64_t v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("BackgroundTask", &qword_1EB260AC0) + 8);
        if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_14;
        }
        uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v34 = v5;
        IMP v6 = "Reusing background assertion %@";
      }
      else
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
        id v11 = *(void **)(v10 + 40);
        *(void *)(v10 + 40) = 0;

        uint64_t v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("BackgroundTask", &qword_1EB260AC8) + 8);
        if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_14;
        }
        uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v34 = v12;
        IMP v6 = "Creating new assertion because existing background assertion is invalid %@";
      }
      double v8 = v4;
      uint32_t v9 = 12;
    }
    else
    {
      BOOL v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("BackgroundTask", &qword_1EB260AD0) + 8);
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      *(_WORD *)buf = 0;
      IMP v6 = "Creating new assertion because there is no existing background assertion.";
      double v8 = v7;
      uint32_t v9 = 2;
    }
    _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_DEFAULT, v6, buf, v9);
  }
LABEL_14:
  uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (!v13)
  {
    CGRect v14 = *(NSObject **)(__UILogGetCategoryCachedImpl("BackgroundTask", &qword_1EB260AD8) + 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1853B0000, v14, OS_LOG_TYPE_DEFAULT, "Creating new background assertion", buf, 2u);
    }
    if (v2)
    {
      id v15 = *(id *)(a1 + 32);
    }
    else
    {
      uint64_t v16 = NSString;
      uint64_t v17 = qword_1EB260AE0++;
      uint64_t v18 = _UIMainBundleIdentifier();
      id v15 = [v16 stringWithFormat:@"Shared Background Assertion %lu for %@", v17, v18];
    }
    uint64_t v19 = [objc_alloc(MEMORY[0x1E4F4E280]) initWithPID:getpid() flags:1 reason:4 name:v15];
    uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v21 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = v19;

    if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
    {
      __int16 v22 = *(NSObject **)(__UILogGetCategoryCachedImpl("BackgroundTask", &qword_1EB260AE8) + 8);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v34 = v23;
        _os_log_impl(&dword_1853B0000, v22, OS_LOG_TYPE_DEFAULT, "Created new background assertion %@", buf, 0xCu);
      }
      if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) acquire] & 1) == 0)
      {
        uint64_t v24 = *(NSObject **)(__UILogGetCategoryCachedImpl("BackgroundTask", &qword_1EB260AF0) + 8);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
          *(_DWORD *)buf = 138412290;
          uint64_t v34 = v25;
          _os_log_impl(&dword_1853B0000, v24, OS_LOG_TYPE_DEFAULT, "Failed to aquire background assertion %@", buf, 0xCu);
        }
        uint64_t v26 = *(void *)(*(void *)(a1 + 40) + 8);
        id v27 = *(void **)(v26 + 40);
        *(void *)(v26 + 40) = 0;
      }
    }

    uint64_t v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  }
  if (v13) {
    char v28 = v2;
  }
  else {
    char v28 = 1;
  }
  if ((v28 & 1) == 0)
  {
    objc_storeStrong((id *)&qword_1EB260A50, v13);
    if (!qword_1EB260A58)
    {
      id v29 = objc_alloc_init(_UIObjectReferenceCounter);
      id v30 = (void *)qword_1EB260A58;
      qword_1EB260A58 = (uint64_t)v29;
    }
    BOOL v31 = *(NSObject **)(__UILogGetCategoryCachedImpl("BackgroundTask", (unint64_t *)&unk_1EB260AF8) + 8);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      *(_DWORD *)buf = 138477827;
      uint64_t v34 = v32;
      _os_log_impl(&dword_1853B0000, v31, OS_LOG_TYPE_DEFAULT, "Incrementing reference count for background assertion %{private}@", buf, 0xCu);
    }
    [(id)qword_1EB260A58 incrementReferenceForObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  }
}

ValueMetadata *type metadata accessor for UIButton.Configuration.TitleAlignment()
{
  return &type metadata for UIButton.Configuration.TitleAlignment;
}

uint64_t UIImage.baselineOffsetFromBottom.getter()
{
  if (!objc_msgSend(v0, sel_hasBaseline)) {
    return 0;
  }
  objc_msgSend(v0, sel_baselineOffsetFromBottom);
  return v1;
}

ValueMetadata *_s15PropertyChangesV3KeyVMa()
{
  return &_s15PropertyChangesV3KeyVN;
}

id _sSo20UICollectionViewCellC5UIKitE23backgroundConfigurationAC012UIBackgroundF0VSgvs_0(uint64_t a1)
{
  if (*(void *)a1)
  {
    objc_msgSend(v1, sel_setBackgroundConfiguration_, *(void *)(*(void *)a1 + 16));
    return (id)swift_release();
  }
  else
  {
    return objc_msgSend(v1, sel_setBackgroundConfiguration_, 0);
  }
}

void sub_1856D5D48(uint64_t a1, SEL *a2, uint64_t *a3, void *a4)
{
  id v6 = [self *a2];
  uint64_t v7 = sub_186A1E95C();
  uint64_t v9 = v8;

  *a3 = v7;
  *a4 = v9;
}

uint64_t sub_1856D5DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t sub_1856D5DC0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for UIViewTypedVectorAnimatableProperty()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for UICollectionViewDiffableDataSource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UICollectionViewDiffableDataSource);
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

uint64_t sub_1856D5E5C@<X0>(uint64_t a1@<X8>)
{
  return sub_185702190(qword_1E8FB81B0, a1);
}

uint64_t storeEnumTagSinglePayload for UIControlPointerHoverStyleDriver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 8_Block_object_dispose(&STACK[0x5B0], 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x5B0], 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)UIColor result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 113) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverStyleDriverCoordinator()
{
  return &type metadata for HoverStyleDriverCoordinator;
}

ValueMetadata *type metadata accessor for UITraitDisplayCornerRadius()
{
  return &type metadata for UITraitDisplayCornerRadius;
}

id UIListContentConfiguration.directionalLayoutMargins.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_directionalLayoutMargins);
}

ValueMetadata *type metadata accessor for UIListContentConfiguration.TextProperties()
{
  return &type metadata for UIListContentConfiguration.TextProperties;
}

uint64_t static UIBackgroundConfiguration.listGroupedCell()@<X0>(uint64_t *a1@<X8>)
{
  return sub_18583CD54((SEL *)&selRef_listGroupedCellConfiguration, a1);
}

void UIBackgroundConfiguration.visualEffect.setter(void *a1)
{
}

uint64_t sub_1856D5F74()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for InProcessAnimationManager.ConfigurationState()
{
  return &type metadata for InProcessAnimationManager.ConfigurationState;
}

uint64_t sub_1856D602C()
{
  uint64_t result = sub_186A1F12C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for UIAnimatableVector()
{
  return &type metadata for UIAnimatableVector;
}

uint64_t sub_1856D60E8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1856D61B4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1856D6258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1854A4418(a1, a2, a3, a4, a5, a6, a7, (void (*)(void))sub_1854A4794);
}

uint64_t dispatch thunk of UIMutableTraits.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 376))();
}

{
  return (*(uint64_t (**)(void))(a7 + 304))();
}

{
  return (*(uint64_t (**)(void))(a7 + 328))();
}

{
  return (*(uint64_t (**)(void))(a7 + 352))();
}

uint64_t initializeWithTake for HoverStyleHost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1856379AC(a1, a2, a3, MEMORY[0x1E4FBC930]);
}

uint64_t assignWithCopy for HoverStyleHost(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    swift_unknownObjectWeakDestroy();
    unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a2 + 2;
    }
    BOOL v5 = v4 == 1;
    swift_unknownObjectWeakCopyInit();
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x5B0], 8) = v5;
  }
  return a1;
}

ValueMetadata *type metadata accessor for HoverStyleHost()
{
  return &type metadata for HoverStyleHost;
}

id DataDetectorsUIGetClass(void *a1)
{
  unint64_t v1 = a1;
  if ((sDataDetectorsUIFrameworkLoaded & 1) == 0)
  {
    int v2 = dlopen("/System/Library/PrivateFrameworks/DataDetectorsUI.framework/DataDetectorsUI", 4);
    sDataDetectorsUIFrameworkLoaded = 1;
    if (!v2)
    {
      id v3 = dlerror();
      NSLog(&cfstr_FailedToLoadDa.isa, v3);
    }
  }
  unsigned int v4 = NSClassFromString(v1);

  return v4;
}

void sub_1856D8790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1856D9228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a17);
  objc_destroyWeak((id *)(v19 - 56));
  _Unwind_Resume(a1);
}

void sub_1856D95A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1856DA2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1856DA3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1856DA584(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id _UINavigationTitleAppearanceAttributesWithFont(void *a1)
{
  v7[2] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = *(void *)off_1E52D2048;
    v6[0] = *(void *)off_1E52D2040;
    v6[1] = v1;
    v7[0] = a1;
    id v2 = a1;
    id v3 = +[UIColor labelColor];
    v7[1] = v3;
    unsigned int v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:v6 count:2];
  }
  else
  {
    unsigned int v4 = 0;
  }
  return v4;
}

void sub_1856E01D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1856E0294(_Unwind_Exception *exception_object)
{
  if (v1) {
    objc_end_catch();
  }
  _Unwind_Resume(exception_object);
}

void sub_1856E02B4(void *a1)
{
  objc_begin_catch(a1);
  if (!v1) {
    JUMPOUT(0x1856E0278);
  }
  JUMPOUT(0x1856E026CLL);
}

void _UIGrabberCommonInit(unsigned char *a1)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  a1[457] = 1;
  uint64_t v1 = a1;
  id v2 = [_UILumaTrackingBackdropView alloc];
  [v1 bounds];
  uint64_t v7 = -[_UILumaTrackingBackdropView initWithTransitionBoundaries:delegate:frame:](v2, "initWithTransitionBoundaries:delegate:frame:", v1, 0.45, 0.55, v3, v4, v5, v6);
  uint64_t v8 = (void *)v1[59];
  v1[59] = v7;

  [v1 addSubview:v1[59]];
  uint64_t v9 = objc_alloc_init(UIVisualEffectView);
  uint64_t v10 = (void *)v1[58];
  v1[58] = v9;

  [v1 addSubview:v1[58]];
  uint64_t v11 = *MEMORY[0x1E4F39EA8];
  uint64_t v12 = [v1 layer];
  [v12 setCornerCurve:v11];

  [v1 setClipsToBounds:1];
  v16[0] = 0x1ED3F5A48;
  uint64_t v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:v16 count:1];
  id v14 = (id)[v1 _registerForTraitTokenChanges:v13 withTarget:v1 action:sel_setNeedsLayout];

  id v15 = [v1 pointerInteraction];

  [v15 setEnabled:1];
}

void sub_1856E4768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)_UITraitChangeRegistry;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void _unregisterAccessibilityNotifications(uint64_t a1)
{
  if (*(void *)(a1 + 240))
  {
    id v2 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v2 _removeObserver:*(void *)(a1 + 240)];

    *(void *)(a1 + 240) = 0;
  }
}

void sub_1856E7814(void *a1, unint64_t *a2, uint64_t a3, uint64_t *a4, const char **a5)
{
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v5;
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v12 = *(void **)(v11 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v11 + 16), sel_copy);
    sub_186A1F1CC();
    swift_unknownObjectRelease();
    sub_1853B985C(0, a2);
    swift_dynamicCast();
    uint64_t v12 = v16;
    __swift_instantiateConcreteTypeFromMangledName(a4);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v16;
    swift_release();
    *double v5 = v13;
  }
  id v14 = *a5;
  id v15 = v12;
  objc_msgSend(v15, v14, a1);
}

void sub_1856E9FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

id NormaliseInputView(void *a1, int a2)
{
  id v3 = a1;
  char v4 = objc_opt_respondsToSelector();
  id v5 = v3;
  double v6 = v5;
  id v7 = v5;
  if (v4)
  {
    uint64_t v8 = [v5 placeheldView];
    uint64_t v9 = (void *)v8;
    if (a2) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v6;
    }
    if (v8) {
      uint64_t v10 = (void *)v8;
    }
    id v7 = v10;
  }
  return v7;
}

uint64_t UIKeyboardAlwaysShowCandidateBarForCurrentInputMode()
{
  uint64_t v0 = UIKeyboardGetCurrentInputMode();
  uint64_t v1 = UIKeyboardAlwaysShowCandidateBarForInputMode();

  return v1;
}

uint64_t UIKeyboardAlwaysShowCandidateBarForInputMode()
{
  uint64_t v0 = TIInputModeGetNormalizedIdentifier();
  uint64_t v1 = TIGetInputModeProperties();
  id v2 = [v1 objectForKey:*MEMORY[0x1E4FAE640]];
  uint64_t v3 = [v2 BOOLValue];

  return v3;
}

void sub_1856ED2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1856EFA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1856F1B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1856F1F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_1856F21A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1856F2568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

id sub_1856F2C38()
{
  id v0 = (id)sub_1856F2C74();
  return v0;
}

uint64_t sub_1856F2C74()
{
  return *(void *)(v0 + qword_1E8FB81B0);
}

void sub_1856F2EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double UIRectCenteredIntegralRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return round(a5 + (a7 - a3) * 0.5);
}

uint64_t _UITextLayoutSizeWillShrink(double (**a1)(id, double, double), double a2, double a3, double a4, double a5)
{
  uint64_t v9 = a1 + 2;
  uint64_t v10 = (double (*)(double, double))a1[2];
  uint64_t v11 = a1;
  double v12 = v10(a2, a3);
  double v14 = v13;
  double v15 = (*v9)(v11, a4, a5);
  double v17 = v16;

  double v18 = fmin(v12, a2);
  double v19 = fmin(v14, a3);
  double v20 = fmin(v15, a4);
  double v21 = fmin(v17, a5);
  BOOL v22 = v20 < v18;
  BOOL v23 = v20 <= v18;
  if (v21 > v19) {
    BOOL v22 = 0;
  }
  if (v21 >= v19) {
    BOOL v23 = 0;
  }
  return v22 | v23;
}

void _UIValidateAccountBasedDelegateRespondsToSelector(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (os_variant_has_internal_diagnostics())
  {
    if (qword_1EB264BF8 != -1) {
      dispatch_once(&qword_1EB264BF8, &__block_literal_global_26_7);
    }
    char v4 = _UIKitUserDefaults();
    int v5 = [v4 BOOLForKey:@"shouldValidateAccountBasedDelegates"];

    if (v3 && v5 && (objc_opt_respondsToSelector() & 1) == 0)
    {
      if (qword_1EB264BC8 != -1) {
        dispatch_once(&qword_1EB264BC8, &__block_literal_global_2_19);
      }
      double v6 = qword_1EB264BD0;
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      v7[2] = ___UIValidateAccountBasedDelegateRespondsToSelector_block_invoke_2;
      void v7[3] = &unk_1E52D9CD0;
      id v8 = v3;
      uint64_t v9 = a2;
      dispatch_async(v6, v7);
    }
  }
}

void __CommonStyleRegistration_block_invoke()
{
  uint64_t v0 = +[_UIVisualStyleRegistry registryForIdiom:2];
  uint64_t v1 = objc_opt_class();
  [v0 registerVisualStyleClass:v1 forStylableClass:objc_opt_class()];

  id v2 = +[_UIVisualStyleRegistry registryForIdiom:8];
  uint64_t v3 = objc_opt_class();
  [v2 registerVisualStyleClass:v3 forStylableClass:objc_opt_class()];

  char v4 = +[_UIVisualStyleRegistry defaultRegistry];
  uint64_t v5 = objc_opt_class();
  [v4 registerVisualStyleClass:v5 forStylableClass:objc_opt_class()];

  uint64_t v6 = objc_opt_class();
  id v7 = +[_UIVisualStyleRegistry defaultRegistry];
  [v7 registerVisualStyleClass:v6 forStylableClass:objc_opt_class()];
}

id sub_1856F6EC8(SEL *a1, double a2)
{
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    id v7 = *(void **)(v6 + 16);
  }
  else
  {
    objc_msgSend(*(id *)(v6 + 16), sel_copy);
    sub_186A1F1CC();
    swift_unknownObjectRelease();
    sub_1853B985C(0, &qword_1E8FAF9B0);
    swift_dynamicCast();
    id v7 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255C08);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v10;
    swift_release();
    uint64_t *v2 = v8;
  }
  return objc_msgSend(v7, *a1, a2);
}

void sub_1856FAA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

id sub_1856FB4D0@<X0>(unsigned __int8 *a1@<X0>, double *a2@<X1>, Class *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *(unsigned __int8 *)a2;
  double v9 = a2[1];
  int v10 = *((unsigned __int8 *)a2 + 16);
  uint64_t v11 = *((void *)a2 + 3);
  id v12 = objc_msgSend(objc_allocWithZone(*a3), sel_init);
  objc_msgSend(v12, sel_setDisplayedState_, v7);
  objc_msgSend(v12, sel_setTintColor_, v11);
  objc_msgSend(v12, sel_setHidden_, v8);
  double v13 = v9;
  double v14 = -1.79769313e308;
  if (v9 == 0.0) {
    double v14 = 0.0;
  }
  if (v10) {
    double v13 = v14;
  }
  id result = objc_msgSend(v12, sel_setReservedLayoutWidth_, v13);
  *a5 = a4;
  a5[1] = v12;
  return result;
}

id _colorByReducingAlpha(void *a1, uint64_t a2, double a3)
{
  id v4 = (id)[a1 resolvedColorWithTraitCollection:a2];
  [v4 alphaComponent];
  uint64_t v6 = [v4 colorWithAlphaComponent:v5 * a3];

  return v6;
}

double _tintBehaviorAlphaReduction(void *a1, void *a2, double a3, double a4)
{
  id v7 = a1;
  id v8 = a2;
  if ([v8 userInterfaceStyle] == 2)
  {
    double v9 = +[UIColor systemRedColor];
    if (_isSameColor(v7, v9, v8))
    {
      double v10 = 0.2;
    }
    else
    {
      double v14 = +[UIColor systemPinkColor];
      if (_isSameColor(v7, v14, v8)) {
        double v10 = 0.2;
      }
      else {
        double v10 = 0.25;
      }
    }
    double v13 = v10 * a4;
  }
  else
  {
    uint64_t v11 = +[UIColor systemYellowColor];
    if (_isSameColor(v7, v11, v8)) {
      double v12 = 0.2;
    }
    else {
      double v12 = 0.18;
    }

    double v13 = v12 * a3;
  }

  return v13;
}

uint64_t _isSameColor(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5 == v6)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
    if (v5 && v6)
    {
      id v9 = (id)[v5 resolvedColorWithTraitCollection:v7];
      uint64_t v8 = objc_msgSend(v9, "isEqual:", objc_msgSend(v6, "resolvedColorWithTraitCollection:", v7));
    }
  }

  return v8;
}

id _TintColorFromTraitCollection(void *a1)
{
  id v1 = a1;
  id v2 = [v1 _tintColor];
  if (!v2)
  {
    if (v1)
    {
      uint64_t v3 = [v1 userInterfaceIdiom];
    }
    else
    {
      id v4 = +[UIDevice currentDevice];
      uint64_t v3 = [v4 userInterfaceIdiom];
    }
    id v2 = +[UIView _defaultInteractionTintColorForIdiom:v3];
  }

  return v2;
}

void setEnvironmentMatchingCornerRadius(void *a1, void *a2, uint64_t a3, double a4, double a5)
{
  id v9 = a1;
  id v10 = a2;
  if (a4 == 1.79769313e308)
  {
    uint64_t v11 = [v9 layer];
    [v11 setCornerRadius:a5];

    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __setEnvironmentMatchingCornerRadius_block_invoke;
    v13[3] = &unk_1E52ECC68;
    id v14 = v10;
    uint64_t v16 = a3;
    uint64_t v17 = 0x7FEFFFFFFFFFFFFFLL;
    id v15 = v9;
    +[UIView _addOrPerformCompletion:v13];
  }
  else
  {
    [v9 setClipsToBounds:1];
    double v12 = [v9 layer];
    [v12 setCornerRadius:a4];
  }
}

uint64_t __setEnvironmentMatchingCornerRadius_block_invoke(uint64_t result)
{
  if (*(void *)(result + 32))
  {
    double v1 = **(double **)(result + 48);
    if (v1 == *(double *)(result + 56)) {
      return objc_msgSend(*(id *)(result + 40), "setClipsToBounds:", 0, v1);
    }
  }
  return result;
}

id _UIColorEffectUpgradeCurve(void *a1)
{
  v26[4] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 count];
  if (v2 >= 5)
  {
    BOOL v22 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v23 = [NSString stringWithUTF8String:"NSArray<NSNumber *> *_UIColorEffectUpgradeCurve(NSArray<NSNumber *> *__strong)"];
    objc_msgSend(v22, "handleFailureInFunction:file:lineNumber:description:", v23, @"UIColorEffect.m", 466, @"Too many values specified for a cubic bezier curve (no more than 4, got %li"), v2;
  }
  switch(v2)
  {
    case 0:
      id v3 = &unk_1ED3EF1A0;
      break;
    case 1:
      id v4 = [v1 firstObject];
      v26[0] = v4;
      v26[1] = v4;
      v26[2] = v4;
      v26[3] = v4;
      id v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v26 count:4];
      goto LABEL_10;
    case 2:
      id v4 = [v1 firstObject];
      id v5 = [v1 lastObject];
      [v4 doubleValue];
      double v7 = v6;
      [v5 doubleValue];
      double v9 = v8;
      v25[0] = v4;
      id v10 = [NSNumber numberWithDouble:(v7 + v7 + v8) / 3.0];
      v25[1] = v10;
      uint64_t v11 = [NSNumber numberWithDouble:(v9 + v7 + v9) / 3.0];
      float64x2_t v25[2] = v11;
      v25[3] = v5;
      double v12 = (void *)MEMORY[0x1E4F1C978];
      double v13 = v25;
      goto LABEL_9;
    case 3:
      id v4 = [v1 objectAtIndexedSubscript:0];
      id v5 = [v1 objectAtIndexedSubscript:2];
      [v4 doubleValue];
      double v15 = v14;
      [v5 doubleValue];
      double v17 = v16;
      double v18 = [v1 objectAtIndexedSubscript:1];
      [v18 doubleValue];
      double v20 = v19;

      v24[0] = v4;
      id v10 = [NSNumber numberWithDouble:(v20 + v15 + v20) / 3.0];
      v24[1] = v10;
      uint64_t v11 = [NSNumber numberWithDouble:(v17 + v17 + v20) / 3.0];
      _OWORD v24[2] = v11;
      v24[3] = v5;
      double v12 = (void *)MEMORY[0x1E4F1C978];
      double v13 = v24;
LABEL_9:
      id v3 = [v12 arrayWithObjects:v13 count:4];

LABEL_10:
      break;
    case 4:
      id v3 = v1;
      break;
    default:
      id v3 = 0;
      break;
  }

  return v3;
}

id _UIBackdropViewQueue()
{
  if (qword_1EB25E650 != -1) {
    dispatch_once(&qword_1EB25E650, &__block_literal_global_32);
  }
  uint64_t v0 = (void *)qword_1EB25E658;
  return v0;
}

BOOL _UICAColorMatrixIsIdentity(float *a1)
{
  return *a1 == 1.0
      && a1[1] == 0.0
      && a1[2] == 0.0
      && a1[3] == 0.0
      && a1[4] == 0.0
      && a1[5] == 0.0
      && a1[6] == 1.0
      && a1[7] == 0.0
      && a1[8] == 0.0
      && a1[9] == 0.0
      && a1[10] == 0.0
      && a1[11] == 0.0
      && a1[12] == 1.0
      && a1[13] == 0.0
      && a1[14] == 0.0
      && a1[15] == 0.0
      && a1[16] == 0.0
      && a1[17] == 0.0
      && a1[18] == 1.0
      && a1[19] == 0.0;
}

uint64_t sub_185702190@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *v2;
  id v5 = *(void **)((char *)v2 + *a1);
  double v6 = (void *)sub_186A1D78C();
  id v7 = objc_msgSend(v5, sel_itemIdentifierForIndexPath_, v6);

  if (v7)
  {
    sub_186A1F1CC();
    swift_unknownObjectRelease();
    sub_1853B7BB0(&v11, v12);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  uint64_t v8 = *(void *)(v4 + 88);
  int v9 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, v9 ^ 1u, 1, v8);
}

id sub_1857022C8(uint64_t a1)
{
  id v3 = *(void **)(v1 + qword_1E8FB81B0[0]);
  uint64_t v4 = (void *)sub_186A1E92C();
  id v5 = (void *)sub_186A1D78C();
  id v6 = objc_msgSend(v3, sel__viewForSupplementaryElementOfKind_atIndexPath_collectionView_, v4, v5, a1);

  return v6;
}

id sub_185702E6C(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v7 = *(void **)(v4 + *a3);
  uint64_t v8 = (void *)sub_186A1D78C();
  id v9 = objc_msgSend(v7, *a4, v8, a1);

  return v9;
}

void sub_1857045F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_185704614(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_186A1D7CC();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v11 = *(uint64_t (**)(id, char *, void *))(a1 + 32);
  sub_186A1D79C();
  v15[3] = swift_getObjectType();
  v15[0] = a4;
  swift_retain();
  id v12 = a2;
  swift_unknownObjectRetain();
  double v13 = (void *)v11(v12, v10, v15);

  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
  return v13;
}

id sub_185704770(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(id, char *))
{
  uint64_t v8 = sub_186A1D7CC();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  long long v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_186A1D79C();
  id v12 = a3;
  id v13 = a1;
  double v14 = (void *)a5(v12, v11);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v14;
}

id sub_185704894(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_185704770(a1, a2, a3, a4, (uint64_t (*)(id, char *))sub_1857048AC);
}

id sub_1857048AC(uint64_t a1, uint64_t a2)
{
  return sub_185702E6C(a1, a2, qword_1E8FB81B0, (SEL *)&selRef__cellForItemAtIndexPath_collectionView_);
}

uint64_t sub_1857048C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1857048F0(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1857048F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, unsigned char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  id v13 = &v17[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1853B76BC(v14, (uint64_t)v17);
  swift_dynamicCast();
  uint64_t v15 = a4(a1, a2, v13);
  (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, a7);
  return v15;
}

id sub_185704A84(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_186A1D7CC();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(uint64_t (**)(void))(a1 + 32);
  sub_186A1E95C();
  sub_186A1D79C();
  swift_retain();
  id v9 = a2;
  uint64_t v10 = (void *)v8();

  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v10;
}

id sub_185704BD8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_186A1D7CC();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_186A1E95C();
  sub_186A1D79C();
  id v9 = a3;
  id v10 = a1;
  id v11 = sub_1857022C8((uint64_t)v9);

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v11;
}

uint64_t _UISheetPresentationControllerStylesSheetsAsCards(void *a1)
{
  id v1 = a1;
  if (dyld_program_sdk_at_least()) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = [v1 _allowsStylingSheetsAsCards];
  }

  return v2;
}

void _UISheetTransformForMetrics(uint64_t a1, void *a2, int a3, void *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14)
{
  id v29 = a2;
  id v30 = a4;
  if ([v30 exclusivelyUsesZPositionForTransform])
  {
    uint64_t v31 = MEMORY[0x1E4F1DAB8];
    long long v32 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    *(_OWORD *)a1 = *MEMORY[0x1E4F1DAB8];
    *(_OWORD *)(a1 + 16) = v32;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v31 + 32);
    goto LABEL_20;
  }
  v64.origin.CGFloat y = a6;
  v64.origin.CGFloat x = a5;
  CGFloat v57 = a6;
  CGFloat v58 = a7;
  v64.size.CGFloat width = a7;
  v64.size.CGFloat height = a8;
  +[UIViewController _horizontalContentMarginForView:v29 ofWidth:CGRectGetWidth(v64)];
  double v34 = v33;
  [v30 maximumSheetDepthLevel];
  double v36 = v35 + -1.0;
  if (v36 > a14) {
    double v36 = a14;
  }
  long double v37 = exp2(-v36);
  double v38 = 1.0;
  double v59 = 1.0 - v37 + 1.0 - v37;
  v65.origin.CGFloat x = a9;
  v65.origin.CGFloat y = a10;
  v65.size.CGFloat width = a11;
  v65.size.CGFloat height = a12;
  if (CGRectGetWidth(v65) == 0.0)
  {
    if (a3) {
      goto LABEL_13;
    }
LABEL_9:
    [v30 topOffset];
    double v40 = v39;
    v67.origin.CGFloat x = a9;
    v67.origin.CGFloat y = a10;
    v67.size.CGFloat width = a11;
    v67.size.CGFloat height = a12;
    CGFloat Height = CGRectGetHeight(v67);
    double v42 = 1.0;
    if (Height != 0.0)
    {
      v68.origin.CGFloat x = a9;
      v68.origin.CGFloat y = a10;
      v68.size.CGFloat width = a11;
      v68.size.CGFloat height = a12;
      double v42 = 1.0 - v59 * (v40 + v40) / CGRectGetHeight(v68);
    }
    if (v38 < v42) {
      double v38 = v42;
    }
    goto LABEL_13;
  }
  v66.origin.CGFloat x = a9;
  v66.origin.CGFloat y = a10;
  v66.size.CGFloat width = a11;
  v66.size.CGFloat height = a12;
  double v38 = 1.0 - (v34 + v34) * v59 / CGRectGetWidth(v66);
  if ((a3 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_13:
  memset(&v63, 0, sizeof(v63));
  CGAffineTransformMakeScale(&v63, v38, v38);
  double v43 = 0.0;
  if (a3) {
    double v44 = (a8 - a8 * v38) * 0.5;
  }
  else {
    double v44 = 0.0;
  }
  double v56 = v44;
  CGFloat v45 = a5;
  CGFloat v46 = v57;
  CGFloat v47 = v58;
  CGFloat v48 = a8;
  if (a3)
  {
    double MinY = CGRectGetMinY(*(CGRect *)&v45);
    v69.origin.CGFloat x = a9;
    v69.origin.CGFloat y = a10;
    v69.size.CGFloat width = a11;
    v69.size.CGFloat height = a12;
    double v50 = MinY - CGRectGetMinY(v69);
    [v30 topOffset];
    double v52 = v59 * v51;
    [v30 maximumSheetDepthLevel];
    v70.size.CGFloat height = a12;
    double v43 = v52 * fmax(fmin(v53 - a14, 1.0), 0.0);
    v70.origin.CGFloat x = a9;
    v70.origin.CGFloat y = a10;
    v70.size.CGFloat width = a11;
    double v54 = fmax(fmin(a14, 1.0), 0.0) * (CGRectGetMinY(v70) - a13);
  }
  else
  {
    double MidY = CGRectGetMidY(*(CGRect *)&v45);
    v71.origin.CGFloat x = a9;
    v71.origin.CGFloat y = a10;
    v71.size.CGFloat width = a11;
    v71.size.CGFloat height = a12;
    double v50 = MidY - CGRectGetMidY(v71);
    double v54 = 0.0;
  }
  memset(&v62, 0, sizeof(v62));
  CGAffineTransformMakeTranslation(&v62, 0.0, -(v54 + v43 + v56 + (1.0 - v38) * v50) / v38);
  CGAffineTransform t1 = v62;
  CGAffineTransform t2 = v63;
  CGAffineTransformConcat((CGAffineTransform *)a1, &t1, &t2);
LABEL_20:
}

double _UISheetLayoutInfoMargins(void *a1, char a2, int a3, int a4, void *a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  id v20 = a5;
  id v21 = a1;
  uint64_t v22 = [v21 horizontalSizeClass];
  uint64_t v23 = [v21 verticalSizeClass];

  if ((a2 & 1) == 0)
  {
    [v20 minimumSidePadding];
    double v24 = fmax(a6, a8);
    if (!a4) {
      a6 = v24;
    }
  }
  if (v23 != 1)
  {
    if (v22 == 2 && v23 == 2)
    {
      [v20 topOffset];
      double v27 = v26 + v26;
      if (a11 != 1.79769313e308) {
        double v27 = a11;
      }
      goto LABEL_15;
    }
    char v28 = +[UIDevice currentDevice];
    if ([v28 userInterfaceIdiom])
    {
    }
    else
    {
      BOOL v31 = +[UIDevice _hasHomeButton];

      if (!v31 && v22 == 1)
      {
        [v20 topOffset];
        goto LABEL_22;
      }
    }
    [v20 topOffset];
    double v30 = v29 + v29;
LABEL_22:
    double v25 = a6 + v30;
    goto LABEL_23;
  }
  if (!a3 || a7 <= 0.0)
  {
    [v20 topOffsetInCompactHeight];
    if (a10 != 1.79769313e308) {
      double v27 = a10;
    }
LABEL_15:
    double v25 = a6 + v27;
    goto LABEL_23;
  }
  double v25 = 23.0;
LABEL_23:

  return v25;
}

void _setFrameIgnoringLayerTransformOnOrAfterYukon(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  if (dyld_program_sdk_at_least()) {
    objc_msgSend(v9, "_setFrameIgnoringLayerTransform:", a2, a3, a4, a5);
  }
  else {
    objc_msgSend(v9, "setFrame:", a2, a3, a4, a5);
  }
}

id _UISheetPresentationControllerFindViewControllerOfClass(void *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
  }
  else
  {
    if ((unint64_t)[v3 childViewControllersCount] <= 1)
    {
      uint64_t v5 = [v3 _existingView];
      uint64_t v6 = [v5 subviews];
      unint64_t v7 = [v6 count];

      if (v7 <= 1)
      {
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        uint64_t v8 = objc_msgSend(v3, "childViewControllers", 0);
        uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = *(void *)v16;
          while (2)
          {
            for (uint64_t i = 0; i != v10; ++i)
            {
              if (*(void *)v16 != v11) {
                objc_enumerationMutation(v8);
              }
              uint64_t v13 = _UISheetPresentationControllerFindViewControllerOfClass(*(void *)(*((void *)&v15 + 1) + 8 * i), a2);
              if (v13)
              {
                id v4 = (id)v13;

                goto LABEL_15;
              }
            }
            uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
            if (v10) {
              continue;
            }
            break;
          }
        }
      }
    }
    id v4 = 0;
  }
LABEL_15:

  return v4;
}

void _UISheetLayoutInfoDirtyUnsafeInsets(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 0x20) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFFDFLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyMarginsWhenFloating(v2);
    _UISheetLayoutInfoDirtyMargins(v2);
  }
}

void _UISheetLayoutInfoDirtyAnyDescendantTransitioning(void *a1)
{
  uint64_t v1 = a1[1];
  if ((v1 & 2) != 0)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFFFDLL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyOffsetAdjustment(v2);
    id v4 = [v2 _parentLayoutInfo];

    id v3 = v4;
    if (v4)
    {
      _UISheetLayoutInfoDirtyAnyDescendantTransitioning(v4);
      id v3 = v4;
    }
  }
}

void _UISheetLayoutInfoDirtyEffectivePresented(void *a1)
{
  uint64_t v1 = a1[1];
  if (v1)
  {
    a1[1] = v1 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v2 = a1;
    _UISheetLayoutInfoDirtyDepthLevel(v2);
    _UISheetLayoutInfoDirtyRawCurrentOffset(v2);
    _UISheetLayoutInfoDirtyCurrentOffset(v2);
    _UISheetLayoutInfoDirtyNonFullHeightOffset(v2);
    _UISheetLayoutInfoDirtyOffsetAdjustment(v2);
    _UISheetLayoutInfoDirtyIndexOfCurrentActiveOrDismissDetent(v2);
    _UISheetLayoutInfoDirtyUntransformedFrame(v2);
    _UISheetLayoutInfoDirtyAnyDescendantWantsFullScreen(v2);
    _UISheetLayoutInfoDirtyInteractionEnabled(v2);
    _UISheetLayoutInfoDirtyModelDimmingEnabled(v2);
    id v4 = [v2 _parentLayoutInfo];

    id v3 = v4;
    if (v4)
    {
      _UISheetLayoutInfoDirtyDescendantHiddenAncestorSheetIDs(v4);
      id v3 = v4;
    }
  }
}

void _UISheetLayoutInfoDirtyAnyDescendantWantsFullScreen(_DWORD *a1)
{
  int v1 = a1[5];
  if ((v1 & 0x80) != 0)
  {
    a1[5] = v1 & 0xFFFFFF7F;
    uint64_t v2 = a1;
    id v4 = [v2 _parentLayoutInfo];
    if (v4)
    {
      _UISheetLayoutInfoDirtyAnyDescendantWantsFullScreen(v4);
      _UISheetLayoutInfoDirtyAlpha(v4);
    }
    id v3 = [v2 _delegate];
    [v3 _sheetLayoutInfoDidInvalidateOutput:v2];
  }
}

void _UISheetLayoutInfoDirtyAncestorSheetIDs(void *a1)
{
  int v1 = a1;
  uint64_t v2 = v1[1];
  if ((v2 & 4) != 0)
  {
    v1[1] = v2 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v5 = v1;
    uint64_t v3 = [v1 _childLayoutInfo];
    id v4 = (void *)v3;
    if (v3) {
      _UISheetLayoutInfoDirtyAncestorSheetIDs(v3);
    }
    _UISheetLayoutInfoDirtyHidingUnderneathDescendant(v5);

    int v1 = v5;
  }
}

void sub_18570AE54(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18570BDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id location)
{
  objc_destroyWeak(v37);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18570DD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  objc_destroyWeak(v7);
  _Unwind_Resume(a1);
}

void sub_18570F25C(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11 = *MEMORY[0x1E4FBC8C8] & *v6;
  uint64_t v12 = *(void **)((char *)v6 + *a5);
  uint64_t v13 = *a1;
  long long v14 = *(_OWORD *)(v11 + 96);
  long long v19 = *(_OWORD *)(v11 + 80);
  long long v20 = v14;
  type metadata accessor for NSDiffableDataSourceSnapshot();
  long long v15 = *(void **)(v13 + 16);
  if (a3)
  {
    uint64_t v21 = a3;
    uint64_t v22 = a4;
    *(void *)&long long v19 = MEMORY[0x1E4F143A8];
    *((void *)&v19 + 1) = 1107296256;
    *(void *)&long long v20 = sub_1856A95EC;
    *((void *)&v20 + 1) = a6;
    long long v16 = _Block_copy(&v19);
    id v17 = v15;
    sub_1854B0A60(a3);
    swift_release();
  }
  else
  {
    id v18 = v15;
    long long v16 = 0;
  }
  objc_msgSend(v12, sel_applyDifferencesFromSnapshot_animatingDifferences_completion_, v15, a2 & 1, v16, v19, v20);
  _Block_release(v16);
}

uint64_t type metadata accessor for NSDiffableDataSourceSnapshot()
{
  return swift_getGenericMetadata();
}

void sub_1857116B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Unwind_Resume(a1);
}

void _UIDiffableDataSourceCommonInit(void *a1)
{
  id v5 = a1;
  [v5 setTableViewDefaultRowAnimation:100];
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.uikit.datasource.diffing", 0);
  uint64_t v2 = (void *)*((void *)v5 + 28);
  *((void *)v5 + 2_Block_object_dispose(&STACK[0x5B0], 8) = v1;

  dispatch_queue_t v3 = dispatch_queue_create("com.apple.uikit.datasource.diffing.snapshot", 0);
  id v4 = (void *)*((void *)v5 + 30);
  *((void *)v5 + 30) = v3;

  *((_DWORD *)v5 + 17) = 0;
  *((_DWORD *)v5 + 1_Block_object_dispose(&STACK[0x5B0], 8) = 0;
}

id _UIHitTestGestureContainer(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, double a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("HitTest", &_UIHitTestGestureContainer___s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    long long v20 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))a3;
      _os_log_impl(&dword_1853B0000, v20, OS_LOG_TYPE_ERROR, "Hit testing with event: %@, window: %@, server predicted target: %@.", buf, 0x20u);
    }
  }
  if (a4)
  {
    double v13 = (*(double (**)(uint64_t, void *))(a5 + 16))(a5, a2);
    performHitTest(a1, a2, a3, v13, v14, v15, a6);
    id v16 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    uint64_t v23 = __Block_byref_object_copy__57;
    double v24 = __Block_byref_object_dispose__57;
    id v25 = 0;
    id v17 = [a2 _eventRoutingScene];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___UIHitTestGestureContainer_block_invoke;
    v21[3] = &unk_1E52E9528;
    v21[4] = a1;
    v21[5] = a3;
    *(double *)&v21[8] = a6;
    v21[6] = a5;
    v21[7] = buf;
    id v18 = (id)[v17 _topVisibleWindowPassingTest:v21];

    id v16 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);
  }
  return v16;
}

void sub_185714A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id performHitTest(uint64_t a1, void *a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("HitTest", &qword_1EB260068);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    double v24 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      int v26 = 138412290;
      double v27 = a2;
      _os_log_impl(&dword_1853B0000, v24, OS_LOG_TYPE_ERROR, "Hit testing window: %@", (uint8_t *)&v26, 0xCu);
    }
  }
  if ([a2 _ignoresHitTest])
  {
    double v14 = 0;
  }
  else
  {
    uint64_t v15 = +[_UIHitTestContext contextWithPoint:radius:](_UIHitTestContext, "contextWithPoint:radius:", a4, a5, a7);
    id v16 = (void *)_MergedGlobals_1009;
    _MergedGlobals_1009 = v15;

    double v14 = objc_msgSend(a2, "_hitTest:withEvent:windowServerHitTestWindow:", a1, a3, a4, a5);
    if (_IsKindOfUIView((uint64_t)v14))
    {
      uint64_t v17 = [v14 _hitTestWithContext:_MergedGlobals_1009];
      id v18 = (void *)v17;
      if (v17) {
        long long v19 = (void *)v17;
      }
      else {
        long long v19 = v14;
      }
      id v20 = v19;

      double v14 = v20;
    }
    uint64_t v21 = (void *)_MergedGlobals_1009;
    _MergedGlobals_1009 = 0;

    unint64_t v22 = __UILogGetCategoryCachedImpl("HitTest", &qword_1EB260070);
    if (*(unsigned char *)v22)
    {
      id v25 = *(NSObject **)(v22 + 8);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        int v26 = 138412290;
        double v27 = v14;
        _os_log_impl(&dword_1853B0000, v25, OS_LOG_TYPE_ERROR, "Hit test result: %@", (uint8_t *)&v26, 0xCu);
      }
    }
  }
  return v14;
}

double ____startNewUITouch_block_invoke(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

void ___instance_block_invoke()
{
  long long v0 = *(_OWORD *)(MEMORY[0x1E4F1D530] + 16);
  *(_OWORD *)&v2.version = *MEMORY[0x1E4F1D530];
  *(_OWORD *)&v2.release = v0;
  v2.equal = 0;
  v2.hash = 0;
  qword_1EB264DA0 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &v2, MEMORY[0x1E4F1D540]);
  dword_1EB264DA8 = 0;
  byte_1EB264DAC = 0;
  dispatch_queue_t v1 = +[UIScreen mainScreen];
  qword_1EB264DB0 = _UIMachTimeForMediaTime(1.0 / (double)[v1 maximumFramesPerSecond]);

  qword_1EB264DC8 = 0;
  word_1EB264DD8 = 0;
  qword_1EB264DE0 = 0;
}

uint64_t UIApplicationInitialize()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  if (os_variant_has_internal_content())
  {
    CFDictionaryKeyCallBacks v2 = [MEMORY[0x1E4F1CA60] dictionary];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v3 = [&unk_1ED3F0DC0 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v19 != v5) {
            objc_enumerationMutation(&unk_1ED3F0DC0);
          }
          id v7 = *(id *)(*((void *)&v18 + 1) + 8 * i);
          uint64_t v8 = getenv((const char *)[v7 UTF8String]);
          if (v8)
          {
            uint64_t v9 = [NSString stringWithUTF8String:v8];
            [v2 setObject:v9 forKey:v7];
          }
        }
        uint64_t v4 = [&unk_1ED3F0DC0 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v4);
    }
    uint64_t v10 = [v2 objectForKey:@"__PPT_ForTesting"];

    if (v10) {
      __IsRunningTests = objc_msgSend(v2, "bs_BOOLForKey:", @"__PPT_ForTesting");
    }
    uint64_t v11 = [v2 objectForKey:@"__PPT_SignpostID"];

    if (v11)
    {
      uint64_t v12 = objc_msgSend(v2, "bs_safeStringForKey:", @"__PPT_SignpostID");
      __ActivationSignpostID = [v12 longLongValue];
    }
    double v13 = [v2 objectForKey:@"__PPT_LaunchTime"];

    if (v13)
    {
      double v14 = objc_msgSend(v2, "bs_safeStringForKey:", @"__PPT_LaunchTime");
      [v14 doubleValue];
      __LaunchTime = v15;
      __ExecOrResumeTime = v15;
    }
    id v16 = [v2 objectForKey:@"__PPT_BackgroundLaunch"];

    if (v16)
    {
      if (objc_msgSend(v2, "bs_BOOLForKey:", @"__PPT_BackgroundLaunch")) {
        uint64_t v17 = @"launch suspended";
      }
      else {
        uint64_t v17 = @"launch";
      }
      objc_storeStrong((id *)&qword_1EB25B518, v17);
    }
  }
  if (!qword_1EB25B518) {
    qword_1EB25B518 = @"launch";
  }
  if (qword_1EB25B9D8 != -1) {
    dispatch_once(&qword_1EB25B9D8, &__block_literal_global_3851);
  }
  if (byte_1EB25B50E) {
    CTFontSetAltTextStyleSpec();
  }
  Main = CFRunLoopGetMain();
  CFRunLoopAddCommonMode(Main, @"UITrackingRunLoopMode");
  GSInitialize();
  _UIKitApplyPlatformVisualStyles();
  return kdebug_trace();
}

uint64_t stateMachineSpec_block_invoke_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  id v6 = *(id *)(a2 + 16);
  uint64_t v76 = a4;
  id v7 = _NSStringFromUIDeferringAction[a4];
  -[_UIEventDeferringManager _localRecordForEnvironment:](*(id **)a2, (uint64_t)v6);
  uint64_t v81 = (id *)objc_claimAutoreleasedReturnValue();
  if (v81)
  {
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F548);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      CGFloat v47 = *(NSObject **)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        CGFloat v48 = *(id **)a2;
        *(_DWORD *)buf = 134349826;
        BOOL v96 = v48;
        __int16 v97 = 2114;
        uint64_t v98 = (uint64_t)v6;
        __int16 v99 = 2114;
        uint64_t v100 = (uint64_t)v7;
        __int16 v101 = 2114;
        double v102 = (__CFString *)v81;
        _os_log_impl(&dword_1853B0000, v47, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Removed local record: %{public}@", buf, 0x2Au);
      }
    }
    id v9 = v81[3];
    [v9 invalidate];

    -[_UIEventDeferringManager _removeLocalRecordForEnvironment:](*(void *)a2, (uint64_t)v6);
  }
  uint64_t v80 = -[_UIEventDeferringManager _displayHardwareIndentifierAccountingForNotFinalizedChange:](*(unsigned __int8 **)a2, 1);
  if (v80) {
    objc_msgSend(MEMORY[0x1E4F4F2D0], "displayWithHardwareIdentifier:");
  }
  else {
  uint64_t v10 = [MEMORY[0x1E4F4F2D0] builtinDisplay];
  }
  uint64_t v89 = 0;
  unsigned int v90 = &v89;
  uint64_t v91 = 0x3032000000;
  int64x2_t v92 = __Block_byref_object_copy__35;
  uint64_t v93 = __Block_byref_object_dispose__35;
  id v94 = 0;
  uint64_t v11 = _eventDeferringCompatibilityQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = stateMachineSpec_block_invoke_11;
  block[3] = &unk_1E52E1B98;
  uint64_t v88 = &v89;
  id v79 = v10;
  id v86 = v79;
  id v87 = v6;
  dispatch_sync(v11, block);

  if (!v90[5])
  {
    long long v20 = 0;
    unsigned int v77 = 0;
    goto LABEL_39;
  }
  if (os_variant_has_internal_diagnostics())
  {
    CFDictionaryRef v49 = *(id *)(__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F550) + 8);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      double v50 = *(id **)a2;
      double v51 = (void *)v90[5];
      if (v51)
      {
        double v52 = (__CFString *)v51[5];
        double v53 = v51;
        double v54 = NSString;
        long long v55 = (objc_class *)objc_opt_class();
        double v56 = NSStringFromClass(v55);
        CGFloat v57 = [v54 stringWithFormat:@"<%@: %p>", v56, v53];
      }
      else
      {
        double v52 = 0;
        CGFloat v57 = @"(nil)";
      }

      *(_DWORD *)buf = 134350082;
      BOOL v96 = v50;
      __int16 v97 = 2114;
      uint64_t v98 = (uint64_t)v6;
      __int16 v99 = 2114;
      uint64_t v100 = (uint64_t)v7;
      __int16 v101 = 2050;
      double v102 = v52;
      __int16 v103 = 2114;
      double v104 = v57;
      _os_log_impl(&dword_1853B0000, v49, OS_LOG_TYPE_DEFAULT, "[%{public}p] [%{public}@] %{public}@: Found local compatibility record: recording manager: %{public}p; record: %{public}@",
        buf,
        0x34u);
    }
  }
  uint64_t v12 = 2 * (*(unsigned char *)(a2 + 49) == 0);
  if (*(unsigned char *)(a2 + 48)) {
    uint64_t v12 = 1;
  }
  uint64_t v13 = v12;
  switch(v12)
  {
    case 0:
      goto LABEL_17;
    case 2:
      uint64_t v21 = v90[5];
      if (v21) {
        uint64_t v21 = *(void *)(v21 + 40);
      }
      if (v21 == *(void *)a2) {
        goto LABEL_17;
      }
      break;
    case 1:
      uint64_t v14 = v90[5];
      id v15 = v14 ? objc_loadWeakRetained((id *)(v14 + 32)) : 0;
      BOOL v16 = v15 == *(id *)(a2 + 8);

      if (v16)
      {
LABEL_17:
        uint64_t v17 = v90[5];
        if (v17) {
          uint64_t v17 = *(void *)(v17 + 40);
        }
        BOOL v18 = v17 != *(void *)a2;
        int v19 = 1;
        goto LABEL_25;
      }
      break;
  }
  int v19 = 0;
  BOOL v18 = 0;
LABEL_25:
  unint64_t v22 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F558);
  if (*(unsigned char *)v22)
  {
    CGFloat v58 = *(NSObject **)(v22 + 8);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      uint64_t v74 = *(id **)a2;
      uint64_t v78 = off_1E52E3230[v13];
      if (v19) {
        double v59 = @"YES";
      }
      else {
        double v59 = @"NO";
      }
      id v60 = v59;
      if (v18) {
        uint64_t v61 = @"YES";
      }
      else {
        uint64_t v61 = @"NO";
      }
      CGAffineTransform v62 = v61;
      *(_DWORD *)buf = 134350338;
      BOOL v96 = v74;
      __int16 v97 = 2114;
      uint64_t v98 = (uint64_t)v6;
      __int16 v99 = 2114;
      uint64_t v100 = (uint64_t)v7;
      __int16 v101 = 2114;
      double v102 = v78;
      __int16 v103 = 2114;
      double v104 = v60;
      __int16 v105 = 2114;
      *(void *)double v106 = v62;
      CGAffineTransform v63 = v58;
      _os_log_impl(&dword_1853B0000, v63, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Matching strategy: %{public}@; shouldRemove: %{public}@; shouldNotify: %{public}@",
        buf,
        0x3Eu);
    }
  }
  if (v19)
  {
    unint64_t v23 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F560);
    if (*(unsigned char *)v23)
    {
      CGRect v67 = *(NSObject **)(v23 + 8);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        CGRect v68 = (__CFString *)v90[5];
        CGRect v69 = *(id **)a2;
        CGRect v70 = *(__CFString **)(a2 + 8);
        *(_DWORD *)buf = 134350082;
        BOOL v96 = v69;
        __int16 v97 = 2114;
        uint64_t v98 = (uint64_t)v6;
        __int16 v99 = 2114;
        uint64_t v100 = (uint64_t)v7;
        __int16 v101 = 2114;
        double v102 = v68;
        __int16 v103 = 2114;
        double v104 = v70;
        _os_log_impl(&dword_1853B0000, v67, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Removed local compatibility record: %{public}@; context->deferringToken: %{public}@",
          buf,
          0x34u);
      }
    }
    double v24 = (void *)v90[5];
    if (v24) {
      double v24 = (void *)v24[3];
    }
    id v25 = v24;
    [v25 invalidate];

    int v26 = _eventDeferringCompatibilityQueue();
    v82[0] = MEMORY[0x1E4F143A8];
    v82[1] = 3221225472;
    v82[2] = stateMachineSpec_block_invoke_12;
    v82[3] = &unk_1E52D9F98;
    id v83 = v79;
    id v84 = v6;
    dispatch_sync(v26, v82);

    if (v18)
    {
      double v27 = (void *)v90[5];
      if (v27) {
        double v27 = (void *)v27[5];
      }
      uint64_t v28 = v27;
      double v29 = *(id **)a2;
      double v30 = (void *)v90[5];
      if (v30) {
        double v30 = (void *)v30[2];
      }
      BOOL v31 = v30;
      [v28 eventDeferringManager:v29 didRemoveLocalCompatibilityRecordForDescriptor:v31];
    }
    unsigned int v77 = 1;
  }
  else
  {
    unsigned int v77 = 0;
  }
  long long v20 = (__CFString *)v13;
LABEL_39:
  if (*(unsigned char *)(a2 + 48))
  {
    unint64_t v32 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F568);
    if (*(unsigned char *)v32)
    {
      CGRect v64 = *(NSObject **)(v32 + 8);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        CGRect v65 = *(id **)a2;
        CGRect v66 = *(__CFString **)(a2 + 8);
        *(_DWORD *)buf = 134349826;
        BOOL v96 = v65;
        __int16 v97 = 2114;
        uint64_t v98 = (uint64_t)v6;
        __int16 v99 = 2114;
        uint64_t v100 = (uint64_t)v7;
        __int16 v101 = 2114;
        double v102 = v66;
        _os_log_impl(&dword_1853B0000, v64, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Invalidating deferring token: %{public}@", buf, 0x2Au);
      }
    }
    uint64_t v33 = *(void *)(a2 + 8);
    if (v33)
    {
      [*(id *)(v33 + 8) removeObject:v6];
      if (!*(unsigned char *)(v33 + 24) && ![*(id *)(v33 + 8) count]) {
        *(unsigned char *)(v33 + 24) = 1;
      }
    }
  }
  double v34 = -[_UIEventDeferringManager internalBehavior](*(id **)a2);
  double v35 = -[_UIEventDeferringManager _trackedLocalTargetWindowPointerForEnvironment:](*(void *)a2, (uint64_t)v6);
  if (([v34 wantsLocalIdealRules] & 1) != 0
    || ![v34 wantsLocalCompatibilityRules])
  {
    int v38 = 0;
    int v37 = 0;
  }
  else
  {
    if (v90[5]) {
      BOOL v36 = 1;
    }
    else {
      BOOL v36 = v35 == 0;
    }
    int v37 = !v36;
    int v38 = 1;
  }
  if (v81) {
    int v39 = 1;
  }
  else {
    int v39 = v77 | v37;
  }
  id v40 = [v6 description];
  uint64_t v41 = [v40 UTF8String];

  double v42 = v7;
  uint64_t v43 = [(__CFString *)v42 UTF8String];
  if (os_variant_has_internal_diagnostics())
  {
    uint64_t v73 = *(id *)(__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F570) + 8);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      CGRect v71 = *(id **)a2;
      id v72 = (__CFString *)v90[5];
      uint64_t v45 = [v35 pointerValue];
      *(_DWORD *)buf = 134351106;
      BOOL v96 = v71;
      __int16 v97 = 2082;
      uint64_t v98 = v41;
      __int16 v99 = 2082;
      uint64_t v100 = v43;
      __int16 v101 = 2050;
      double v102 = v72;
      __int16 v103 = 2048;
      double v104 = v20;
      __int16 v105 = 1024;
      *(_DWORD *)double v106 = v77;
      *(_WORD *)&v106[4] = 1024;
      *(_DWORD *)&v106[6] = v38;
      __int16 v107 = 2048;
      uint64_t v108 = v45;
      __int16 v109 = 1024;
      int v110 = v39;
      _os_log_impl(&dword_1853B0000, v73, OS_LOG_TYPE_DEFAULT, "[%{public}p] [%{public}s] %{public}s: Local compatibility record: %{public}p; matching strategy: %lu; removed lo"
        "cal compatibility record: %d; has view service behavior: %d; tracked window: %p; should end observation: %d",
        buf,
        0x50u);
    }
  }
  if (v39) {
    -[_UIEventDeferringManager _stopObservingContextForLocalTargetWindowInEnvironment:](*(void *)a2, v6);
  }
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F578))
  {
    objc_msgSend(NSString, "stringWithFormat:", @"removedLocalRecord: %d; removedCompatibilityRecord: %d;",
      v81 != 0,
    CGFloat v46 = v77);
    _emitDebugLogForTransition(a3, v76, v46, a2);
  }
  _Block_object_dispose(&v89, 8);

  return 4;
}

void sub_1857167D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_185716AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _queue_compatibilityRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _eventDeferringCompatibilityQueue();
  dispatch_assert_queue_V2(v4);

  uint64_t v5 = _queue_compatibilityRecordsForDisplay(a1);
  id v6 = v5;
  if (v5)
  {
    id v7 = [v5 objectForKey:a2];
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

id _queue_compatibilityRecordsForDisplay(uint64_t a1)
{
  CFDictionaryKeyCallBacks v2 = _eventDeferringCompatibilityQueue();
  dispatch_assert_queue_V2(v2);

  uint64_t v3 = _queue_compatibilityRecords();
  uint64_t v4 = [v3 objectForKey:a1];

  return v4;
}

id _eventDeferringCompatibilityQueue()
{
  if (qword_1EB25F4F8 != -1) {
    dispatch_once(&qword_1EB25F4F8, &__block_literal_global_104);
  }
  long long v0 = (void *)_MergedGlobals_989;
  return v0;
}

id _queue_compatibilityRecords()
{
  long long v0 = _eventDeferringCompatibilityQueue();
  dispatch_assert_queue_V2(v0);

  dispatch_queue_t v1 = (void *)_compatibilityDeferringRecords;
  if (!_compatibilityDeferringRecords)
  {
    uint64_t v2 = objc_opt_new();
    uint64_t v3 = (void *)_compatibilityDeferringRecords;
    _compatibilityDeferringRecords = v2;

    dispatch_queue_t v1 = (void *)_compatibilityDeferringRecords;
  }
  return v1;
}

uint64_t stateMachineSpec_block_invoke_17(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  id v139 = (id)a2[2];
  uint64_t v136 = a4;
  id v6 = _NSStringFromUIDeferringAction[a4];
  id v7 = -[_UIEventDeferringManager internalBehavior]((id *)*a2);
  int v8 = [v7 wantsLocalIdealRules];

  p_superclass = &OBJC_METACLASS____UIWindowSceneFBSSceneLifecycleMonitor.superclass;
  uint64_t v138 = (uint64_t)a2;
  if (v8)
  {
    uint64_t v10 = -[_UIEventDeferringManager _descriptorForCompatibility:environment:deferringToken:]((id)*a2, 0, v139, a2[1]);
    uint64_t v11 = -[_UIEventDeferringManager _predicateForDescriptor:](*a2, (uint64_t)v10);
    uint64_t v12 = -[_UIEventDeferringManager _targetForDescriptor:](*a2, (uint64_t)v10);
    uint64_t v13 = [MEMORY[0x1E4F4F2A0] sharedInstance];
    uint64_t v14 = (void *)a2[1];
    if (v14) {
      uint64_t v14 = (void *)v14[10];
    }
    id v15 = v14;
    BOOL v16 = [v13 deferEventsMatchingPredicate:v11 toTarget:v12 withReason:v15];

    uint64_t v17 = -[_UIEventDeferringRecord _initWithDescriptor:invalidationToken:deferringToken:recordingManagerPointer:recreationReasons:]([_UIEventDeferringRecord alloc], v10, v16, (void *)a2[1], *a2, 0);
    BOOL v18 = (id *)*a2;
    id v153 = 0;
    BOOL v19 = -[_UIEventDeferringManager _shouldDisableNewRecord:outRecreationReasons:]((uint64_t)v18, (uint64_t)v17, &v153);
    id v20 = v153;
    if (v19)
    {
      unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F5A0);
      if (*(unsigned char *)CategoryCachedImpl)
      {
        uint64_t v119 = *(NSObject **)(CategoryCachedImpl + 8);
        if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
        {
          int v120 = (id *)*a2;
          *(_DWORD *)buf = 134349826;
          *(void *)&uint8_t buf[4] = v120;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v139;
          *(_WORD *)&buf[22] = 2114;
          BOOL v155 = v6;
          LOWORD(v156) = 2114;
          *(void *)((char *)&v156 + 2) = v17;
          _os_log_impl(&dword_1853B0000, v119, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Disabling new local record: %{public}@", buf, 0x2Au);
        }
      }
      uint64_t v137 = v6;
      long long v131 = v12;
      uint64_t v133 = v11;
      uint64_t v129 = v16;
      if (v17) {
        unint64_t v22 = (void *)v17[3];
      }
      else {
        unint64_t v22 = 0;
      }
      id v23 = v22;
      [v23 invalidate];

      long long v151 = 0u;
      long long v152 = 0u;
      long long v149 = 0u;
      long long v150 = 0u;
      id v127 = v20;
      id v24 = v20;
      uint64_t v25 = [v24 countByEnumeratingWithState:&v149 objects:v161 count:16];
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = *(void *)v150;
        do
        {
          uint64_t v28 = 0;
          do
          {
            if (*(void *)v150 != v27) {
              objc_enumerationMutation(v24);
            }
            double v29 = *(void **)(*((void *)&v149 + 1) + 8 * v28);
            double v30 = _UIEventDeferringShorterRecreationReasonStringForReason(v29);
            unint64_t v31 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F5A8);
            if (*(unsigned char *)v31)
            {
              os_log_t log = *(NSObject **)(v31 + 8);
              if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
              {
                unint64_t v32 = (id *)*a2;
                *(_DWORD *)buf = 134349826;
                *(void *)&uint8_t buf[4] = v32;
                *(_WORD *)&buf[12] = 2114;
                *(void *)&buf[14] = v139;
                *(_WORD *)&buf[22] = 2114;
                BOOL v155 = v137;
                LOWORD(v156) = 2114;
                *(void *)((char *)&v156 + 2) = v30;
                _os_log_impl(&dword_1853B0000, log, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Adding recreation reason: %{public}@", buf, 0x2Au);
              }
            }
            -[_UIEventDeferringRecord addRecreationReason:]((uint64_t)v17, (uint64_t)v29);

            ++v28;
          }
          while (v26 != v28);
          uint64_t v33 = [v24 countByEnumeratingWithState:&v149 objects:v161 count:16];
          uint64_t v26 = v33;
        }
        while (v33);
      }

      id v6 = v137;
      p_superclass = (__objc2_class **)(&OBJC_METACLASS____UIWindowSceneFBSSceneLifecycleMonitor + 8);
      uint64_t v12 = v131;
      uint64_t v11 = v133;
      id v20 = v127;
      BOOL v16 = v129;
    }
    unint64_t v34 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F5B0);
    if (*(unsigned char *)v34)
    {
      uint64_t v113 = *(NSObject **)(v34 + 8);
      if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
      {
        CGRect v114 = (id *)*a2;
        *(_DWORD *)buf = 134349826;
        *(void *)&uint8_t buf[4] = v114;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v139;
        *(_WORD *)&buf[22] = 2114;
        BOOL v155 = v6;
        LOWORD(v156) = 2114;
        *(void *)((char *)&v156 + 2) = v17;
        _os_log_impl(&dword_1853B0000, v113, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: New local record: %{public}@", buf, 0x2Au);
      }
    }
    -[_UIEventDeferringManager _setLocalRecord:forEnvironment:](*a2, (uint64_t)v17, (uint64_t)v139);
  }
  else
  {
    uint64_t v17 = 0;
  }
  double v35 = -[_UIEventDeferringManager internalBehavior]((id *)*a2);
  int v36 = [v35 wantsLocalCompatibilityRules];

  int v37 = &xmmword_186B92000;
  if (!v36)
  {
    int v75 = 0;
    goto LABEL_59;
  }
  int v38 = p_superclass;
  int v39 = -[_UIEventDeferringManager _descriptorForCompatibility:environment:deferringToken:]((id)*a2, 1, v139, a2[1]);
  uint64_t v40 = -[_UIEventDeferringManager _predicateForDescriptor:](*a2, (uint64_t)v39);
  uint64_t v41 = -[_UIEventDeferringManager _targetForDescriptor:](*a2, (uint64_t)v39);
  double v42 = NSString;
  uint64_t v43 = (void *)a2[1];
  double v44 = v6;
  if (v43) {
    uint64_t v43 = (void *)v43[10];
  }
  uint64_t v45 = v43;
  uint64_t v46 = [v42 stringWithFormat:@"Compatibility: %@", v45];

  CGFloat v47 = [MEMORY[0x1E4F4F2A0] sharedInstance];
  long long v130 = (void *)v41;
  uint64_t v132 = (void *)v40;
  int v128 = (void *)v46;
  CGFloat v48 = [v47 deferEventsMatchingPredicate:v40 toTarget:v41 withReason:v46];

  int v134 = v39;
  uint64_t v126 = v48;
  CFDictionaryRef v49 = -[_UIEventDeferringRecord _initWithDescriptor:invalidationToken:deferringToken:recordingManagerPointer:recreationReasons:](objc_alloc((Class)(v38 + 179)), v39, v48, (void *)a2[1], *a2, 0);
  id v6 = v44;
  int v37 = &xmmword_186B92000;
  if (v17)
  {
    double v50 = (id)v17[2];
    if (v49) {
      double v51 = (void *)v49[2];
    }
    else {
      double v51 = 0;
    }
    double v52 = v51;
    if (v50)
    {
      uint64_t v53 = v50[9];
      if (v52) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v53 = 0;
      if (v52)
      {
LABEL_31:
        uint64_t v54 = v52[9];
        if (v50) {
          goto LABEL_32;
        }
        goto LABEL_97;
      }
    }
    uint64_t v54 = 0;
    if (v50)
    {
LABEL_32:
      int v55 = *((_DWORD *)v50 + 5);
      if (v52)
      {
LABEL_33:
        int v56 = *((_DWORD *)v52 + 5);
LABEL_34:

        BOOL v57 = v53 == v54;
        int v37 = &xmmword_186B92000;
        if (!v57 || v55 != v56)
        {
          CGRect v117 = [MEMORY[0x1E4F28B00] currentHandler];
          id v118 = [NSString stringWithUTF8String:"stateMachineSpec_block_invoke_17"];
          [v117 handleFailureInFunction:v118, @"_UIEventDeferringManager.m", 1213, @"[%p] [%@] %@: Invalid state. Local record target windows do not match", *a2, v139, v6 file lineNumber description];
        }
        goto LABEL_37;
      }
LABEL_98:
      int v56 = 0;
      goto LABEL_34;
    }
LABEL_97:
    int v55 = 0;
    if (v52) {
      goto LABEL_33;
    }
    goto LABEL_98;
  }
LABEL_37:
  CGFloat v58 = (id *)*a2;
  id v148 = 0;
  BOOL v59 = -[_UIEventDeferringManager _shouldDisableNewRecord:outRecreationReasons:]((uint64_t)v58, (uint64_t)v49, &v148);
  id v60 = v148;
  if (v59)
  {
    unint64_t v61 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F5B8);
    if (*(unsigned char *)v61)
    {
      BOOL v121 = *(NSObject **)(v61 + 8);
      if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
      {
        double v122 = (id *)*a2;
        *(_DWORD *)buf = 134349826;
        *(void *)&uint8_t buf[4] = v122;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v139;
        *(_WORD *)&buf[22] = 2114;
        BOOL v155 = v6;
        LOWORD(v156) = 2114;
        *(void *)((char *)&v156 + 2) = v49;
        _os_log_impl(&dword_1853B0000, v121, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Disabling new local compatibility record: %{public}@", buf, 0x2Au);
      }
    }
    if (v49) {
      CGAffineTransform v62 = (void *)v49[3];
    }
    else {
      CGAffineTransform v62 = 0;
    }
    id v63 = v62;
    [v63 invalidate];

    long long v146 = 0u;
    long long v147 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    os_log_t loga = v60;
    CGRect v64 = v60;
    uint64_t v65 = [v64 countByEnumeratingWithState:&v144 objects:v160 count:16];
    if (v65)
    {
      uint64_t v66 = v65;
      uint64_t v67 = *(void *)v145;
      do
      {
        uint64_t v68 = 0;
        do
        {
          if (*(void *)v145 != v67) {
            objc_enumerationMutation(v64);
          }
          CGRect v69 = *(void **)(*((void *)&v144 + 1) + 8 * v68);
          CGRect v70 = _UIEventDeferringShorterRecreationReasonStringForReason(v69);
          unint64_t v71 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F5C0);
          if (*(unsigned char *)v71)
          {
            double v123 = *(NSObject **)(v71 + 8);
            if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
            {
              id v72 = (id *)*a2;
              *(_DWORD *)buf = 134349826;
              *(void *)&uint8_t buf[4] = v72;
              *(_WORD *)&buf[12] = 2114;
              *(void *)&buf[14] = v139;
              *(_WORD *)&buf[22] = 2114;
              BOOL v155 = v6;
              LOWORD(v156) = 2114;
              *(void *)((char *)&v156 + 2) = v70;
              _os_log_impl(&dword_1853B0000, v123, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Adding recreation reason: %{public}@", buf, 0x2Au);
            }
          }
          -[_UIEventDeferringRecord addRecreationReason:]((uint64_t)v49, (uint64_t)v69);

          ++v68;
        }
        while (v66 != v68);
        uint64_t v73 = [v64 countByEnumeratingWithState:&v144 objects:v160 count:16];
        uint64_t v66 = v73;
      }
      while (v73);
    }

    int v37 = &xmmword_186B92000;
    id v60 = loga;
  }
  uint64_t v74 = -[_UIEventDeferringManager _displayHardwareIndentifierAccountingForNotFinalizedChange:]((unsigned __int8 *)*a2, 1);
  if (v74) {
    [MEMORY[0x1E4F4F2D0] displayWithHardwareIdentifier:v74];
  }
  else {
  uint64_t v76 = [MEMORY[0x1E4F4F2D0] builtinDisplay];
  }
  unint64_t v77 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F5C8);
  if (*(unsigned char *)v77)
  {
    CGRect v115 = *(NSObject **)(v77 + 8);
    if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
    {
      CGRect v116 = (id *)*a2;
      *(_DWORD *)buf = 134349826;
      *(void *)&uint8_t buf[4] = v116;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v139;
      *(_WORD *)&buf[22] = 2114;
      BOOL v155 = v6;
      LOWORD(v156) = 2114;
      *(void *)((char *)&v156 + 2) = v49;
      _os_log_impl(&dword_1853B0000, v115, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: New local compatibility record: %{public}@", buf, 0x2Au);
    }
  }
  uint64_t v78 = _eventDeferringCompatibilityQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = *((void *)v37 + 137);
  block[2] = stateMachineSpec_block_invoke_18;
  block[3] = &unk_1E52DCB30;
  id v141 = v76;
  id v142 = v139;
  int v75 = v49;
  id v143 = v75;
  id v79 = v76;
  dispatch_sync(v78, block);

LABEL_59:
  id v80 = [v139 description];
  uint64_t v81 = [v80 UTF8String];

  uint64_t v82 = v6;
  uint64_t v83 = [(__CFString *)v82 UTF8String];
  if (os_variant_has_internal_diagnostics())
  {
    uint64_t v100 = *(NSObject **)(__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F5D0) + 8);
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v101 = v37;
      double v102 = (id *)*a2;
      __int16 v103 = v100;
      BOOL v104 = -[_UIEventDeferringRecord needsRecreation](v17);
      BOOL v105 = -[_UIEventDeferringRecord needsRecreation](v75);
      *(_DWORD *)buf = 134350594;
      *(void *)&uint8_t buf[4] = v102;
      int v37 = v101;
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v81;
      *(_WORD *)&buf[22] = 2082;
      BOOL v155 = (void *)v83;
      LOWORD(v156) = 2050;
      *(void *)((char *)&v156 + 2) = v17;
      WORD5(v156) = 1026;
      HIDWORD(v156) = v104;
      *(_WORD *)long long v157 = 2050;
      *(void *)&v157[2] = v75;
      __int16 v158 = 1026;
      BOOL v159 = v105;
      _os_log_impl(&dword_1853B0000, v103, OS_LOG_TYPE_DEFAULT, "[%{public}p] [%{public}s] %{public}s: Wrote local ideal record: %{public}p; ideal disabled: %{public}d; wrote co"
        "mpatibility record: %{public}p; compatibility disabled: %{public}d",
        buf,
        0x40u);
    }
  }
  if (v17) {
    id v84 = v17;
  }
  else {
    id v84 = v75;
  }
  float64x2_t v85 = v84;
  id v86 = v85;
  if (v85)
  {
    id v87 = v85[2];
    uint64_t v88 = v87;
    if (v87)
    {
      uint64_t v89 = (void *)*((void *)v87 + 9);
      goto LABEL_66;
    }
  }
  else
  {
    double v106 = [MEMORY[0x1E4F28B00] currentHandler];
    __int16 v107 = [NSString stringWithUTF8String:"stateMachineSpec_block_invoke_17"];
    [v106 handleFailureInFunction:v107, @"_UIEventDeferringManager.m", 1243, @"[%p] [%@] %@: Invalid state. No local records were written.", *a2, v139, v82 file lineNumber description];

    uint64_t v88 = 0;
  }
  uint64_t v89 = 0;
LABEL_66:
  id v90 = v89;

  uint64_t v91 = (id *)*a2;
  if (*a2)
  {
    id v92 = [v139 description];
    uint64_t v93 = [v92 UTF8String];

    if (!v90)
    {
      uint64_t v108 = [MEMORY[0x1E4F28B00] currentHandler];
      objc_msgSend(v108, "handleFailureInMethod:object:file:lineNumber:description:", sel__startObservingContextForLocalTargetWindow_inEnvironment_, v91, @"_UIEventDeferringManager.m", 2602, @"[%p] [%s] %s: Window is required to start observing context changes", v91, v93, "-[_UIEventDeferringManager _startObservingContextForLocalTargetWindow:inEnvironment:]");
    }
    unint64_t v94 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F680);
    if (*(unsigned char *)v94)
    {
      __int16 v109 = *(NSObject **)(v94 + 8);
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
      {
        int v110 = v109;
        int v111 = [v90 _contextId];
        *(_DWORD *)buf = 134349826;
        *(void *)&uint8_t buf[4] = v91;
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = v93;
        *(_WORD *)&buf[22] = 2050;
        BOOL v155 = v90;
        LOWORD(v156) = 1026;
        *(_DWORD *)((char *)&v156 + 2) = v111;
        _os_log_impl(&dword_1853B0000, v110, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}s] Start observing context for local target window: %{public}p; contextId: 0x%{public}X",
          buf,
          0x26u);
      }
    }
    int v95 = [MEMORY[0x1E4F29238] valueWithPointer:v90];
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = *((void *)v37 + 137);
    *(void *)&uint8_t buf[16] = __85___UIEventDeferringManager__startObservingContextForLocalTargetWindow_inEnvironment___block_invoke;
    BOOL v155 = &unk_1E52DA070;
    *((void *)&v156 + 1) = v90;
    *(void *)long long v157 = v93;
    *(void *)&long long v156 = v91;
    BOOL v96 = -[_UIEventDeferringManager _trackedLocalTargetWindowPointerForEnvironment:]((uint64_t)v91, (uint64_t)v139);
    if (v96)
    {
      uint64_t v112 = [MEMORY[0x1E4F28B00] currentHandler];
      objc_msgSend(v112, "handleFailureInMethod:object:file:lineNumber:description:", sel__trackLocalTargetWindowPointer_forEnvironment_beginObservingBlock_, v91, @"_UIEventDeferringManager.m", 2578, @"[%p] [%@] %s: Invalid state. Attempting to set target window when one already exists: existing: %p; new: %p;",
        v91,
        v139,
        "-[_UIEventDeferringManager _trackLocalTargetWindowPointer:forEnvironment:beginObservingBlock:]",
        [v96 pointerValue],
        [v95 pointerValue]);
    }
    uint64_t v97 = -[_UIEventDeferringManager _trackedLocalTargetWindowPointers]((uint64_t)v91);
    [(id)v97 setObject:v95 forKey:v139];

    uint64_t v98 = -[_UIEventDeferringManager _localTargetWindowPointersUnderObservation]((uint64_t)v91);
    LOBYTE(v97) = [v98 containsObject:v95];
    [v98 addObject:v95];
    if ((v97 & 1) == 0) {
      (*(void (**)(unsigned char *))&buf[16])(buf);
    }
  }
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F5D8)) {
    _emitDebugLogForTransition(a3, v136, &stru_1ED0E84C0, v138);
  }

  return 6;
}

void sub_1857183D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

uint64_t _UIWindowKeyWindowAPIIsSceneLevel()
{
  if (qword_1EB259DC0 != -1) {
    dispatch_once(&qword_1EB259DC0, &__block_literal_global_455);
  }
  return _MergedGlobals_162;
}

void sub_1857186D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_185718A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UIApplicationMayVendViews()
{
  if (qword_1EB25B5C8 != -1) {
    dispatch_once(&qword_1EB25B5C8, &__block_literal_global_1247_0);
  }
  return byte_1EB25B4E4;
}

void sub_185719230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

_UIKeyWindowSceneObserver *_UIKeyWindowSceneObserverForScene(void *a1)
{
  if (!a1)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"_UIKeyWindowSceneObserver * _Nonnull _UIKeyWindowSceneObserverForScene(UIWindowScene * _Nonnull const __strong)"];
    [v4 handleFailureInFunction:v5, @"_UIKeyWindowSceneObserver.m", 91, @"Invalid parameter not satisfying: %@", @"windowScene" file lineNumber description];
  }
  uint64_t v2 = [a1 _sceneComponentForKey:_UIKeyWindowSceneObserverComponentKey];
  if (!v2)
  {
    uint64_t v2 = [[_UIKeyWindowSceneObserver alloc] initWithScene:a1];
    [a1 _registerSceneComponent:v2 forKey:_UIKeyWindowSceneObserverComponentKey];
  }
  return v2;
}

void _UIKitApplyPlatformVisualStyles()
{
  if (_UIKitApplyPlatformVisualStyles_onceToken != -1) {
    dispatch_once(&_UIKitApplyPlatformVisualStyles_onceToken, &__block_literal_global_554);
  }
}

void sub_18571B418(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 112));
  objc_destroyWeak((id *)(v4 - 104));
  objc_destroyWeak((id *)(v4 - 96));
  _Unwind_Resume(a1);
}

void sub_18571C038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, id *location)
{
  objc_destroyWeak(v13);
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  _Unwind_Resume(a1);
}

id _sessionsAvailableForAddingItems()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v0 = objc_opt_new();
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  dispatch_queue_t v1 = +[_UIDragSessionImpl activeSessions];
  uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        id v6 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v6 _canAddItems]) {
          [v0 addObject:v6];
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }

  return v0;
}

void sub_18571EF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

uint64_t _UITextViewAllowSelectionContainerInTextLayoutCanvas()
{
  if ((_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_TextViewAllowSelectionContainerInTextLayoutCanvas, @"TextViewAllowSelectionContainerInTextLayoutCanvas") & 1) == 0&& !byte_1EB2579BC)
  {
    return 0;
  }
  return dyld_program_sdk_at_least();
}

void sub_1857203CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_1857219A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __UIImageCacheKeyWithSentinel(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  id v10 = a1;
  long long v11 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v12 = v11;
  if (v10) {
    [v11 addObject:v10];
  }
  id v20 = (id *)&a10;
  uint64_t v13 = a9;
  if (v13 != @"__UIImageCacheKeySentinel")
  {
    uint64_t v14 = v13;
    do
    {
      if (v14) {
        id v15 = v14;
      }
      else {
        id v15 = @"__NilKey";
      }
      [v12 addObject:v15];
      BOOL v16 = v20++;
      uint64_t v17 = (__CFString *)*v16;

      uint64_t v14 = v17;
    }
    while (v17 != @"__UIImageCacheKeySentinel");
  }
  BOOL v18 = (void *)[v12 copy];

  return v18;
}

void sub_185723A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

uint64_t _UIPointerLockStateIsAvailableForScene(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && [v1 _hostsWindows])
  {
    id v3 = v2;
    uint64_t v4 = [v3 _FBSScene];

    uint64_t v5 = [v3 session];
    id v6 = [v5 role];
    unsigned int v7 = [v6 isEqualToString:@"UIWindowSceneSessionRoleApplication"];

    long long v8 = [v3 _screen];
    uint64_t v9 = [v8 _userInterfaceIdiom];

    if ((v9 & 0xFFFFFFFFFFFFFFFBLL) == 1) {
      unsigned int v10 = v7;
    }
    else {
      unsigned int v10 = 0;
    }
    if (v4) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

id UIKeyboardInputModeGetIdentifierWithKeyboardLayouts(void *a1)
{
  id v1 = a1;
  uint64_t v2 = TIInputModeGetComponentsFromIdentifier();
  id v3 = [v2 valueForKey:@"hw"];
  uint64_t v4 = [v2 valueForKey:@"sw"];
  if (_os_feature_enabled_impl())
  {
    uint64_t v5 = [v2 valueForKey:@"ml"];
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = TIInputModeGetNormalizedIdentifierFromComponents();
  unsigned int v7 = v6;
  if (v3)
  {
    BOOL v8 = 0;
    if (!v4) {
      goto LABEL_11;
    }
  }
  else
  {
    id v3 = UIKeyboardGetDefaultHardwareKeyboardForInputMode(v6);
    BOOL v8 = v3 != 0;
    if (!v4)
    {
LABEL_11:
      uint64_t v11 = UIKeyboardGetDefaultSoftwareKeyboardForInputMode(v7);

      if (v11) {
        char v12 = 1;
      }
      else {
        char v12 = v8;
      }
      uint64_t v4 = (void *)v11;
      if (v12) {
        goto LABEL_15;
      }
      uint64_t v4 = 0;
LABEL_31:
      id v24 = v1;
      goto LABEL_34;
    }
  }
  uint64_t v9 = UIKeyboardGetSupportedSoftwareKeyboardsForInputMode(v7);
  char v10 = [v9 containsObject:v4];

  if ((v10 & 1) == 0) {
    goto LABEL_11;
  }
  if (!v8) {
    goto LABEL_31;
  }
LABEL_15:
  uint64_t v27 = v3;
  uint64_t v28 = v1;
  double v29 = v5;
  uint64_t v13 = [v2 valueForKey:*MEMORY[0x1E4F1C438]];
  uint64_t v14 = *MEMORY[0x1E4F1C400];
  uint64_t v15 = [v2 valueForKey:*MEMORY[0x1E4F1C400]];
  uint64_t v16 = *MEMORY[0x1E4F1C470];
  uint64_t v17 = [v2 valueForKey:*MEMORY[0x1E4F1C470]];
  uint64_t v18 = *MEMORY[0x1E4F1C498];
  double v30 = [v2 valueForKey:*MEMORY[0x1E4F1C498]];
  if (v13)
  {
    id v19 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v20 = v13;
    id v21 = v19;
    uint64_t v26 = v20;
    objc_msgSend(v19, "setObject:forKey:");
    unint64_t v22 = (void *)v15;
    if (v15) {
      [v21 setObject:v15 forKey:v14];
    }
    id v1 = v28;
    id v23 = (void *)v17;
    if (v17) {
      [v21 setObject:v17 forKey:v16];
    }
    id v3 = v27;
    if (v30) {
      [v21 setObject:v30 forKey:v18];
    }
    uint64_t v5 = v29;
    if (v27) {
      [v21 setObject:v27 forKey:@"hw"];
    }
    if (v4) {
      [v21 setObject:v4 forKey:@"sw"];
    }
    if (_os_feature_enabled_impl() && v29) {
      [v21 setObject:v29 forKey:@"ml"];
    }
    UIKeyboardInputModeGetIdentifierFromComponents(v21);
    id v24 = (id)objc_claimAutoreleasedReturnValue();

    uint64_t v13 = v26;
  }
  else
  {
    id v24 = v28;
    uint64_t v5 = v29;
    unint64_t v22 = (void *)v15;
    id v1 = v28;
    id v23 = (void *)v17;
    id v3 = v27;
  }

LABEL_34:
  return v24;
}

id UIKeyboardGetDefaultSoftwareKeyboardForInputMode(void *a1)
{
  id v1 = UIKeyboardGetSupportedSoftwareKeyboardsForInputMode(a1);
  uint64_t v2 = [v1 objectAtIndex:0];

  return v2;
}

id UIKeyboardGetSupportedSoftwareKeyboardsForInputMode(void *a1)
{
  id v1 = a1;
  uint64_t NativeDeviceIdiom = UIKeyboardGetNativeDeviceIdiom();
  id v3 = UIKeyboardGetSupportedSoftwareKeyboardsForInputModeAndIdiom(v1, NativeDeviceIdiom);

  return v3;
}

id UIKeyboardGetSupportedSoftwareKeyboardsForInputModeAndIdiom(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (a2 == 6)
  {
    id v6 = @"SWLayouts";
    BOOL v8 = @"-XR";
LABEL_10:
    uint64_t v9 = [@"SWLayouts" stringByAppendingString:v8];
    goto LABEL_15;
  }
  if (a2 == 4)
  {
    id v6 = @"SWLayouts";
    BOOL v8 = @"-Watch";
    goto LABEL_10;
  }
  if (a2 != 1)
  {
    id v6 = @"SWLayouts";
    uint64_t v9 = @"SWLayouts";
    goto LABEL_15;
  }
  if (!UIApp)
  {
    uint64_t v5 = 0;
LABEL_13:
    id v6 = @"SWLayouts";
    unsigned int v7 = @"-iPad";
    goto LABEL_14;
  }
  uint64_t v4 = +[UIKeyboardImpl keyboardScreen];
  uint64_t v5 = +[UIKBScreenTraits traitsForInputModeWithScreen:v4];

  if (!v5 || UIKeyboardComputeKeyboardIdiomFromScreenTraits(v5, [v5 idiom], 0) != 23) {
    goto LABEL_13;
  }
  id v6 = @"SWLayouts-iPad";
  unsigned int v7 = @"-iPadExtra";
LABEL_14:
  uint64_t v9 = [@"SWLayouts" stringByAppendingString:v7];

LABEL_15:
  char v10 = TIGetInputModeProperties();
  uint64_t v11 = [v10 objectForKey:v9];
  char v12 = v11;
  if (v11)
  {
    id v13 = v11;
  }
  else
  {
    uint64_t v14 = [v10 objectForKey:v6];
    uint64_t v15 = v14;
    if (v14)
    {
      id v16 = v14;
    }
    else
    {
      id v16 = [v10 objectForKey:@"SWLayouts"];
    }
    id v13 = v16;
  }
  uint64_t v17 = [v13 count];
  if (a2 == 2 && !v17)
  {

    id v13 = &unk_1ED3EFE60;
    if (![&unk_1ED3EFE60 count]) {
      goto LABEL_30;
    }
LABEL_29:
    id v19 = [MEMORY[0x1E4F28F60] predicateWithBlock:&__block_literal_global_314];
    id v20 = [v13 filteredArrayUsingPredicate:v19];

    id v13 = v20;
    id v21 = v13;
    goto LABEL_31;
  }
  if ([v13 count])
  {
    if (a2 == 4)
    {
      uint64_t v18 = [v10 objectForKeyedSubscript:@"UIKeyboardSupportsWatch"];

      if (!v18)
      {

        id v13 = 0;
      }
    }
    goto LABEL_29;
  }
LABEL_30:
  id v21 = 0;
LABEL_31:

  return v21;
}

uint64_t UIKeyboardGetNativeDeviceIdiom()
{
  if (UIApp) {
    uint64_t v0 = _UIDeviceNativeUserInterfaceIdiom();
  }
  else {
    uint64_t v0 = _UIDeviceNativeUserInterfaceIdiomIgnoringClassic();
  }
  return _UIKeyboardGetDeviceIdiomFromInputUIScene(v0);
}

id UIKeyboardGetDefaultHardwareKeyboardForInputMode(void *a1)
{
  id v1 = a1;
  if (UIKeyboardInputModeSoftwareOnly(v1))
  {
    uint64_t v2 = 0;
  }
  else
  {
    id v3 = UIKeyboardGetSupportedHardwareKeyboardsForInputMode(v1);
    uint64_t v2 = [v3 firstObject];
  }
  return v2;
}

uint64_t UIKeyboardInputModeSoftwareOnly(void *a1)
{
  id v1 = a1;
  if (([v1 isEqualToString:@"emoji"] & 1) != 0
    || ([v1 isEqualToString:@"dictation"] & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    id v3 = TIInputModeGetVariant();
    uint64_t v2 = [v3 isEqualToString:@"HWR"];
  }
  return v2;
}

id UIKeyboardInputModeGetIdentifierFromComponents(void *a1)
{
  id v1 = a1;
  uint64_t v2 = TIInputModeGetNormalizedIdentifierFromComponents();
  id v3 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v4 = [v1 objectForKey:@"sw"];
  if ([v4 length])
  {
    uint64_t v5 = [@"sw=" stringByAppendingString:v4];
    [v3 addObject:v5];
  }
  id v6 = [v1 objectForKey:@"hw"];
  if ([v6 length])
  {
    unsigned int v7 = [@"hw=" stringByAppendingString:v6];
    [v3 addObject:v7];
  }
  if (_os_feature_enabled_impl())
  {
    BOOL v8 = [v1 objectForKey:@"ml"];
    if ([v8 length])
    {
      uint64_t v9 = [@"ml=" stringByAppendingString:v8];
      [v3 addObject:v9];
    }
  }
  if ([v3 count])
  {
    char v10 = [v3 componentsJoinedByString:@";"];
    uint64_t v11 = [v2 stringByAppendingFormat:@"@%@", v10];

    uint64_t v2 = (void *)v11;
  }

  return v2;
}

uint64_t UIKeyboardInputBaseLanguagesEqual(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = TIInputModeGetLanguage();
  uint64_t v4 = TIInputModeGetLanguage();

  if ([v3 length] && objc_msgSend(v4, "length")) {
    uint64_t v5 = [v3 isEqualToString:v4];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

id UIKeyboardGetCurrentInputMode()
{
  uint64_t v0 = +[UIKeyboardInputModeController sharedInputModeController];
  id v1 = [v0 currentInputMode];
  id v2 = [v1 identifier];

  return v2;
}

void sub_185728D10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __getAFDictationConnectionClass_block_invoke(uint64_t a1)
{
  AssistantServicesLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFDictationConnection");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAFDictationConnectionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAFDictationConnectionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationConnection.m", 56, @"Unable to find class %s", "AFDictationConnection");

    __break(1u);
  }
}

id UIKeyboardGetSupportedHardwareKeyboardsForInputMode(void *a1)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = TIGetHardwareLayoutsForInputMode();
  if (v2 && (UIKeyboardInputModeIsNonLinguistic(v1) & 1) == 0)
  {
    v6[0] = @"Automatic";
    uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:1];
    id v3 = [v4 arrayByAddingObjectsFromArray:v2];
  }
  else
  {
    id v3 = v2;
  }

  return v3;
}

void __UIRunLoopObserverTrampoline(__CFRunLoopObserver *a1, int a2, void *aBlock)
{
  id v6 = (void (**)(void))_Block_copy(aBlock);
  v6[2]();
  CFRelease(aBlock);
  Current = CFRunLoopGetCurrent();
  CFRunLoopRemoveObserver(Current, a1, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
}

void sub_18572A4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18572A6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18572A894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18572A964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18572B170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double GroupedTableOffsetFromTop(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  [v3 _topPadding];
  double v6 = v5;
  if (v5 == -1.0)
  {
    double v6 = 0.0;
    if (-[UITableViewRowData heightForTableHeaderView]((uint64_t)v4) <= 0.0
      && (!v4 || v4[8] < 1 || ([v3 _shouldHaveHeaderViewForSection:0] & 1) == 0))
    {
      unsigned int v7 = [v3 _scrollView];
      char v8 = [v7 _shouldAdjustLayoutToCollapseTopSpacing];

      if ((v8 & 1) == 0)
      {
        uint64_t v9 = [v3 _scrollView];
        [v9 _topLayoutInsetForSidebar];
        double v11 = v10;

        if (v11 <= 0.0)
        {
          char v12 = [v3 _constants];
          objc_msgSend(v12, "defaultPaddingAboveFirstSectionWithoutHeaderTableStyle:", objc_msgSend(v3, "_tableStyle"));
          double v6 = v13;
        }
      }
    }
  }

  return v6;
}

void std::vector<_UIOutlineNode>::insert(char **a1, char *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  double v6 = *a1;
  double v5 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 / 24;
  uint64_t v9 = &(*a1)[24 * (v7 / 24)];
  unint64_t v10 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v10)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v6) >> 3);
    if (2 * v17 > v15) {
      unint64_t v15 = 2 * v17;
    }
    if (v17 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v15;
    }
    if (v18)
    {
      id v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIOutlineNode>>(v18);
    }
    else
    {
      id v20 = 0;
      uint64_t v19 = 0;
    }
    id v23 = &v20[24 * v8];
    id v24 = &v20[24 * v19];
    if (v8 == v19)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v26 = 1;
        }
        else {
          unint64_t v26 = 2 * v8;
        }
        uint64_t v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIOutlineNode>>(v26);
        id v23 = &v27[24 * (v26 >> 2)];
        id v24 = &v27[24 * v28];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        uint64_t v25 = v8 + 2;
        if (v8 >= -1) {
          uint64_t v25 = v8 + 1;
        }
        v23 -= 24 * (v25 >> 1);
      }
    }
    long long v29 = *(_OWORD *)v3;
    *((void *)v23 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)id v23 = v29;
    double v30 = *a1;
    unint64_t v31 = v23;
    if (*a1 != v9)
    {
      unint64_t v32 = v9;
      uint64_t v33 = v23;
      do
      {
        long long v34 = *(_OWORD *)(v32 - 24);
        unint64_t v31 = v33 - 24;
        *((void *)v33 - 1) = *((void *)v32 - 1);
        *(_OWORD *)(v33 - 24) = v34;
        v32 -= 24;
        v33 -= 24;
      }
      while (v32 != v30);
    }
    double v35 = a1[1];
    int64_t v36 = v35 - v9;
    if (v35 != v9) {
      memmove(v23 + 24, v9, v35 - v9);
    }
    int v37 = *a1;
    *a1 = v31;
    a1[1] = &v23[v36 + 24];
    a1[2] = v24;
    if (v37)
    {
      operator delete(v37);
    }
  }
  else if (v9 == v5)
  {
    long long v22 = *(_OWORD *)a3;
    *((void *)v9 + 2) = *(void *)(a3 + 16);
    *(_OWORD *)uint64_t v9 = v22;
    a1[1] = v9 + 24;
  }
  else
  {
    double v11 = v9 + 24;
    char v12 = v5 - 24;
    double v13 = a1[1];
    while (v12 < v5)
    {
      long long v14 = *(_OWORD *)v12;
      *((void *)v13 + 2) = *((void *)v12 + 2);
      *(_OWORD *)double v13 = v14;
      v13 += 24;
      v12 += 24;
    }
    a1[1] = v13;
    if (v5 != v11) {
      memmove(v9 + 24, v9, v5 - v11);
    }
    if ((unint64_t)v9 <= v3) {
      v3 += 24 * ((unint64_t)a1[1] > v3);
    }
    long long v21 = *(_OWORD *)v3;
    *((void *)v9 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)uint64_t v9 = v21;
  }
}

void sub_18572DF38(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18572E058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18572E224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185730670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, id a19)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a19);
  _Unwind_Resume(a1);
}

void sub_185732F9C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1857333B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIEventDeferringInterfaceCategoryForOwningElement()
{
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 1;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 2;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 3;
  }
  else {
    return 0;
  }
}

void sub_185733E44(_Unwind_Exception *a1)
{
  __destructor_8_s8_s16_s24_s32_s40_s56(v1 - 176);
  _Unwind_Resume(a1);
}

uint64_t handleEvent(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v28 = a1 + 4;
  uint64_t v9 = a1 + 5;
  uint64_t v10 = a2;
  do
  {
    uint64_t v11 = v10;
    char v12 = (char *)v9 + *a1 * v10;
    double v13 = &v12[24 * a3];
    int v16 = *((_DWORD *)v13 + 4);
    unint64_t v15 = v13 + 16;
    int v14 = v16;
    uint64_t v17 = (unsigned __int16)v16;
    if ((_WORD)v16)
    {
LABEL_12:
      id v23 = &v12[24 * a3];
      *a5 = v17;
      id v24 = (void *)a1[3];
      if (v24 && *v24) {
        (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*v24 + 16))(*v24, a4, a2, v17, a3);
      }
      uint64_t v25 = *(void *)v23;
      if (*(void *)v23)
      {
        if (v15[3] == 1)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v25, a2, a4);
        }
        else if (!v15[3])
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 16))(v25, a4, a2, v17);
        }
      }
      uint64_t v26 = *(void *)((char *)v28 + *a1 * v17);
      if (v26) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 16))(v26, a4, a2, v17);
      }
      return 1;
    }
    uint64_t v18 = *(void *)&v12[24 * a3 + 8];
    if (v18)
    {
      int v19 = v14 << 8 >> 24;
      if (v19 == 1)
      {
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v18, a4);
      }
      else
      {
        if (v19) {
          goto LABEL_9;
        }
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 16))(v18, a4, a2, a3);
      }
      uint64_t v17 = v20;
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_9:
    uint64_t v10 = 0;
  }
  while (v11);
  uint64_t v21 = a1[3];
  if (!v21) {
    return 0;
  }
  uint64_t result = *(void *)(v21 + 8);
  if (result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(result + 16))(result, a4, a2, a3);
    return 0;
  }
  return result;
}

void stateMachineSpec_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a3 != a4)
  {
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("EventDeferring", &stateMachineSpec_block_invoke_2___s_category);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      uint64_t v9 = *(NSObject **)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = _NSStringFromUIDeferringState[a3];
        uint64_t v11 = _NSStringFromUIDeferringAction[a5];
        uint64_t v12 = _NSStringFromUIDeferringState[a4];
        int v13 = 138543874;
        uint64_t v14 = v10;
        __int16 v15 = 2114;
        int v16 = v11;
        __int16 v17 = 2114;
        uint64_t v18 = v12;
        _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "State Transition: %{public}@ --%{public}@--> %{public}@", (uint8_t *)&v13, 0x20u);
      }
    }
  }
}

uint64_t stateMachineSpec_block_invoke_2_0(uint64_t a1, void *a2)
{
  id v2 = a2;
  unint64_t v3 = [v2 delegate];
  [v3 clickDriver:v2 didPerformEvent:0];

  return 2;
}

uint64_t stateMachineSpec_block_invoke_2_1(uint64_t a1, void *a2)
{
  return [a2 _handleBeginEvent];
}

uint64_t stateMachineSpec_block_invoke_2_2(uint64_t a1, void *a2)
{
  return [a2 _didTransitionToPresented];
}

uint64_t stateMachineSpec_block_invoke_2_3(uint64_t a1, void *a2)
{
  return [a2 didTransitionToDeferred];
}

uint64_t stateMachineSpec_block_invoke_2_4(uint64_t a1, void *a2)
{
  id v2 = a2;
  unint64_t v3 = [v2 delegate];
  [v3 clickDriver:v2 didPerformEvent:0];

  return 2;
}

uint64_t stateMachineSpec_block_invoke_2_5(uint64_t a1, void *a2)
{
  id v2 = a2;
  unint64_t v3 = [v2 delegate];
  [v3 clickDriver:v2 didPerformEvent:0];

  return 2;
}

uint64_t stateMachineSpec_block_invoke_3(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = [MEMORY[0x1E4F4F2A0] sharedInstance];
  uint64_t v8 = [v7 transactionAssertionWithReason:a2[5]];
  -[_UIEventDeferringManager _setTransactionAssertion:](*a2, v8);

  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &stateMachineSpec_block_invoke_3___s_category)) {
    _emitDebugLogForTransition(a3, a4, &stru_1ED0E84C0, (uint64_t)a2);
  }
  return 2;
}

uint64_t stateMachineSpec_block_invoke_3_0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 cancelsTouchesInView])
  {
    unint64_t v3 = [v2 gestureRecognizer];
    [v3 setCancelsTouchesInView:1];
  }
  uint64_t v4 = [v2 delegate];
  [v4 clickDriver:v2 didPerformEvent:1];

  return 3;
}

uint64_t stateMachineSpec_block_invoke_3_1(uint64_t a1, uint64_t *a2)
{
  return -[_UIPreviewInteractionClickImpl _handleTransitionToPossibleByEndingWithContext:](*a2, (uint64_t)a2);
}

uint64_t stateMachineSpec_block_invoke_3_2(uint64_t a1, void *a2)
{
  return [a2 _handleDidBegin];
}

uint64_t stateMachineSpec_block_invoke_3_3(uint64_t a1, id *a2)
{
  return objc_msgSend(*a2, "_transitionedFromState:toState:");
}

uint64_t stateMachineSpec_block_invoke_3_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_didTransitionToDismissingFromState:");
}

uint64_t stateMachineSpec_block_invoke_3_5(uint64_t a1, void *a2)
{
  return [a2 didTransitionToPreparing];
}

uint64_t stateMachineSpec_block_invoke_3_6(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 cancelsTouchesInView])
  {
    unint64_t v3 = [v2 gestureRecognizer];
    [v3 setCancelsTouchesInView:1];
  }
  uint64_t v4 = [v2 delegate];
  [v4 clickDriver:v2 didPerformEvent:1];

  return 3;
}

uint64_t stateMachineSpec_block_invoke_3_7(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 cancelsTouchesInView])
  {
    unint64_t v3 = [v2 gestureRecognizer];
    [v3 setCancelsTouchesInView:1];
  }
  uint64_t v4 = [v2 delegate];
  [v4 clickDriver:v2 didPerformEvent:1];

  return 3;
}

uint64_t stateMachineSpec_block_invoke_24(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  id v7 = (id)a2[2];
  uint64_t v8 = _NSStringFromUIDeferringAction[a4];
  uint64_t v9 = -[_UIEventDeferringManager _transactionAssertion]((id *)*a2);

  if (!v9)
  {
    uint64_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
    int v13 = [NSString stringWithUTF8String:"stateMachineSpec_block_invoke_24"];
    [v12 handleFailureInFunction:v13, @"_UIEventDeferringManager.m", 1843, @"[%p] [%@] %@: Invalid to commit without a transaction", *a2, v7, v8 file lineNumber description];
  }
  uint64_t v10 = -[_UIEventDeferringManager _transactionAssertion]((id *)*a2);
  [v10 invalidate];

  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &stateMachineSpec_block_invoke_24___s_category)) {
    _emitDebugLogForTransition(a3, a4, &stru_1ED0E84C0, (uint64_t)a2);
  }
  -[_UIEventDeferringManager _setTransactionAssertion:](*a2, 0);

  return 1;
}

uint64_t stateMachineSpec_block_invoke_23(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  id v7 = *(id *)(a2 + 16);
  uint64_t v8 = _NSStringFromUIDeferringAction[a4];
  uint64_t v9 = -[_UIEventDeferringManager _currentLocalOrCompatibilityRecordForEnvironment:forcePreviousHardwareIdentifier:](*(void *)a2, (uint64_t)v7, 0);
  uint64_t v10 = -[_UIEventDeferringManager _topRemoteRecordInStackForEnvironment:](*(void *)a2, (uint64_t)v7);
  uint64_t v11 = v10;
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    goto LABEL_52;
  }
  int v13 = *(id *)(v9 + 16);
  uint64_t v14 = *(id *)(v11 + 16);
  if (v13)
  {
    uint64_t v15 = v13[9];
    if (v14) {
      goto LABEL_7;
    }
LABEL_72:
    uint64_t v16 = 0;
    if (v13) {
      goto LABEL_8;
    }
    goto LABEL_73;
  }
  uint64_t v15 = 0;
  if (!v14) {
    goto LABEL_72;
  }
LABEL_7:
  uint64_t v16 = v14[7];
  if (v13)
  {
LABEL_8:
    int v17 = *((_DWORD *)v13 + 5);
    goto LABEL_9;
  }
LABEL_73:
  int v17 = 0;
LABEL_9:
  int v111 = v8;
  if (v14) {
    int v18 = *((_DWORD *)v14 + 3);
  }
  else {
    int v18 = 0;
  }
  BOOL v20 = v15 != v16 || v17 != v18;

  id v21 = *(id *)(v9 + 16);
  long long v22 = v21;
  if (v21) {
    id v23 = (void *)*((void *)v21 + 5);
  }
  else {
    id v23 = 0;
  }
  id v24 = v23;

  id v25 = *(id *)(v11 + 16);
  uint64_t v26 = v25;
  uint64_t v112 = (uint64_t)v7;
  if (v25) {
    uint64_t v27 = (void *)*((void *)v25 + 5);
  }
  else {
    uint64_t v27 = 0;
  }
  id v28 = v27;

  id v110 = v24;
  long long v29 = v28;
  if (v24 == v28) {
    int v30 = 1;
  }
  else {
    int v30 = [v24 isEqualToString:v28];
  }
  uint64_t v113 = -[_UIEventDeferringManager internalBehavior](*(id **)a2);
  os_log_t log = (os_log_t)(v11 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(v11 + 32));
  unint64_t v32 = WeakRetained;
  if (WeakRetained) {
    uint64_t v33 = (void *)*((void *)WeakRetained + 6);
  }
  else {
    uint64_t v33 = 0;
  }
  int v34 = v30 ^ 1;
  id v35 = v33;

  id v36 = *(id *)(v11 + 16);
  int v37 = v36;
  uint64_t v106 = a3;
  if (v36) {
    int v38 = (void *)*((void *)v36 + 4);
  }
  else {
    int v38 = 0;
  }
  int v104 = v20 | v34;
  id v39 = v38;
  int v108 = [v113 shouldSuppressRemoteRuleForOwningElement:v35 inEnvironment:v39];

  id v40 = *(id *)(v9 + 16);
  uint64_t v41 = v40;
  if (v40) {
    double v42 = (void *)*((void *)v40 + 9);
  }
  else {
    double v42 = 0;
  }
  id v43 = v42;

  int v44 = -[_UIEventDeferringManager _isRemoteRuleOwningElement:visibleForLocalTargetWindow:](*(id **)a2, v35, v43);
  BOOL v45 = -[_UIEventDeferringRecord needsRecreation]((void *)v9);
  uint64_t v107 = a4;
  __int16 v109 = v35;
  BOOL v105 = v43;
  BOOL v100 = v45;
  int v101 = v44;
  if (v108) {
    goto LABEL_31;
  }
  int v47 = v44 ^ 1 | v45;
  if ((v47 | v104))
  {
    if ((v47 & 1) == 0)
    {
LABEL_36:
      uint64_t v97 = v29;
      unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F628);
      if (*(unsigned char *)CategoryCachedImpl)
      {
        float64x2_t v85 = *(NSObject **)(CategoryCachedImpl + 8);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          uint64_t v86 = *(void *)a2;
          id v87 = v85;
          *(_DWORD *)buf = 134350338;
          uint64_t v115 = v86;
          __int16 v116 = 2114;
          uint64_t v117 = v112;
          __int16 v118 = 2114;
          uint64_t v119 = (uint64_t)v111;
          __int16 v120 = 1026;
          *(_DWORD *)BOOL v121 = v20;
          *(_WORD *)&v121[4] = 1026;
          *(_DWORD *)&v121[6] = v34;
          LOWORD(v122) = 1026;
          *(_DWORD *)((char *)&v122 + 2) = -[_UIEventDeferringRecord needsRecreation]((void *)v11);
          _os_log_impl(&dword_1853B0000, v87, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Top remote record needs recreation: windowMismatch: %{public}d; hardwa"
            "reIdMismatch: %{public}d; needsRecreation: %{public}d",
            buf,
            0x32u);
        }
      }
      unint64_t v49 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F630);
      if (*(unsigned char *)v49)
      {
        uint64_t v88 = *(NSObject **)(v49 + 8);
        if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
        {
          uint64_t v89 = *(void *)a2;
          *(_DWORD *)buf = 134349826;
          uint64_t v115 = v89;
          __int16 v116 = 2114;
          uint64_t v117 = v112;
          __int16 v118 = 2114;
          uint64_t v119 = (uint64_t)v111;
          __int16 v120 = 2114;
          *(void *)BOOL v121 = v11;
          _os_log_impl(&dword_1853B0000, v88, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Recreating top remote record: %{public}@", buf, 0x2Au);
        }
      }
      double v50 = *(void **)a2;
      id v51 = *(id *)(v11 + 16);
      double v52 = v51;
      if (v51) {
        BOOL v53 = *((unsigned char *)v51 + 8) != 0;
      }
      else {
        BOOL v53 = 0;
      }
      id v54 = *(id *)(v11 + 16);
      int v55 = v54;
      if (v54) {
        int v56 = (void *)*((void *)v54 + 4);
      }
      else {
        int v56 = 0;
      }
      id v57 = v56;
      id v58 = objc_loadWeakRetained((id *)&log->isa);
      BOOL v59 = -[_UIEventDeferringManager _descriptorForCompatibility:environment:deferringToken:](v50, v53, v57, (uint64_t)v58);

      uint64_t v60 = -[_UIEventDeferringManager _predicateForDescriptor:](*(void *)a2, (uint64_t)v59);
      uint64_t v98 = -[_UIEventDeferringManager _targetForDescriptor:](*(void *)a2, (uint64_t)v59);
      unint64_t v61 = [MEMORY[0x1E4F4F2A0] sharedInstance];
      id v62 = objc_loadWeakRetained((id *)&log->isa);
      id v63 = v62;
      if (v62) {
        CGRect v64 = (void *)*((void *)v62 + 10);
      }
      else {
        CGRect v64 = 0;
      }
      uint64_t v8 = v111;
      id v65 = v64;
      BOOL v96 = (void *)v60;
      uint64_t v66 = [v61 deferEventsMatchingPredicate:v60 toTarget:v98 withReason:v65];

      uint64_t v67 = [_UIEventDeferringRecord alloc];
      uint64_t v68 = (void *)v66;
      id v69 = objc_loadWeakRetained((id *)&log->isa);
      id v70 = -[_UIEventDeferringRecord _initWithDescriptor:invalidationToken:deferringToken:recordingManagerPointer:recreationReasons:](v67, v59, v68, v69, *(void *)a2, 0);

      if (v104)
      {
        unint64_t v71 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F638);
        if (*(unsigned char *)v71)
        {
          unint64_t v94 = *(NSObject **)(v71 + 8);
          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            uint64_t v95 = *(void *)a2;
            *(_DWORD *)buf = 134349826;
            uint64_t v115 = v95;
            __int16 v116 = 2114;
            uint64_t v117 = v112;
            __int16 v118 = 2114;
            uint64_t v119 = (uint64_t)v111;
            __int16 v120 = 2114;
            *(void *)BOOL v121 = v11;
            _os_log_impl(&dword_1853B0000, v94, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Invalidating remote record: %{public}@", buf, 0x2Au);
          }
        }
        id v72 = *(id *)(v11 + 24);
        [v72 invalidate];
      }
      unint64_t v73 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F640);
      if (*(unsigned char *)v73)
      {
        id v90 = *(NSObject **)(v73 + 8);
        if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
        {
          uint64_t v91 = *(void *)a2;
          *(_DWORD *)buf = 134349826;
          uint64_t v115 = v91;
          __int16 v116 = 2114;
          uint64_t v117 = v112;
          __int16 v118 = 2114;
          uint64_t v119 = (uint64_t)v111;
          __int16 v120 = 2114;
          *(void *)BOOL v121 = v11;
          _os_log_impl(&dword_1853B0000, v90, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Removing remote record: %{public}@", buf, 0x2Au);
        }
      }
      -[_UIEventDeferringManager _removeRemoteRecord:forEnvironment:](*(void *)a2, v11, v112);
      unint64_t v74 = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F648);
      if (*(unsigned char *)v74)
      {
        id v92 = *(NSObject **)(v74 + 8);
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          uint64_t v93 = *(void *)a2;
          *(_DWORD *)buf = 134349826;
          uint64_t v115 = v93;
          __int16 v116 = 2114;
          uint64_t v117 = v112;
          __int16 v118 = 2114;
          uint64_t v119 = (uint64_t)v111;
          __int16 v120 = 2114;
          *(void *)BOOL v121 = v70;
          _os_log_impl(&dword_1853B0000, v92, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Pushing recreated remote record onto stack: %{public}@", buf, 0x2Au);
        }
      }
      -[_UIEventDeferringManager _pushRemoteRecordOnStack:forEnvironment:](*(void *)a2, (uint64_t)v70, v112);

      int v46 = 1;
      long long v29 = v97;
      id v7 = (id)v112;
      goto LABEL_50;
    }
  }
  else if (-[_UIEventDeferringRecord needsRecreation]((void *)v11))
  {
    goto LABEL_36;
  }
LABEL_31:
  int v46 = 0;
  uint64_t v8 = v111;
  id v7 = (id)v112;
LABEL_50:
  id v75 = [v7 description];
  uint64_t v76 = [v75 UTF8String];

  uint64_t v77 = [(__CFString *)v8 UTF8String];
  uint64_t v78 = v110;
  if (os_variant_has_internal_diagnostics())
  {
    os_log_t loga = *(id *)(__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F650) + 8);
    if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v99 = *(void *)a2;
      id v80 = v109;
      if (v80)
      {
        uint64_t v81 = NSString;
        uint64_t v82 = (objc_class *)objc_opt_class();
        uint64_t v83 = NSStringFromClass(v82);
        id v84 = [v81 stringWithFormat:@"<%@: %p>", v83, v80];
      }
      else
      {
        id v84 = @"(nil)";
      }

      *(_DWORD *)buf = 134351362;
      uint64_t v115 = v99;
      __int16 v116 = 2082;
      uint64_t v117 = v76;
      __int16 v118 = 2082;
      uint64_t v119 = v77;
      __int16 v120 = 2050;
      *(void *)BOOL v121 = v11;
      *(_WORD *)&v121[8] = 2114;
      double v122 = v84;
      __int16 v123 = 1026;
      int v124 = v104;
      __int16 v125 = 1024;
      int v126 = v108;
      __int16 v127 = 1024;
      int v128 = v101;
      __int16 v129 = 1024;
      BOOL v130 = v100;
      __int16 v131 = 1026;
      int v132 = v46;
      _os_log_impl(&dword_1853B0000, loga, OS_LOG_TYPE_DEFAULT, "[%{public}p] [%{public}s] %{public}s: Top remote record: %{public}p; remote element: %{public}@; needed invalida"
        "tion: %{public}d; shouldBeSuppressed: %d; remote element visible: %d; local record needs recreation: %d; remote "
        "record needed recreation: %{public}d;",
        buf,
        0x52u);

      uint64_t v78 = v110;
      uint64_t v8 = v111;
      id v7 = (id)v112;
    }
  }
  a3 = v106;
  a4 = v107;
LABEL_52:
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F658)) {
    _emitDebugLogForTransition(a3, a4, &stru_1ED0E84C0, a2);
  }

  return 10;
}

void __destructor_8_s8_s16_s24_s32_s40_s56(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
}

uint64_t stateMachineSpec_block_invoke_20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v7 = *(id *)(a2 + 16);
  id v8 = *(id *)(a2 + 24);
  uint64_t v9 = _NSStringFromUIDeferringAction[a4];
  -[_UIEventDeferringManager _currentLocalOrCompatibilityRecordForEnvironment:forcePreviousHardwareIdentifier:](*(void *)a2, (uint64_t)v7, 0);
  uint64_t v10 = (id *)objc_claimAutoreleasedReturnValue();
  -[_UIEventDeferringManager _topRemoteRecordInStackForEnvironment:](*(void *)a2, (uint64_t)v7);
  uint64_t v11 = (id *)objc_claimAutoreleasedReturnValue();
  BOOL v12 = v11;
  if (v11)
  {
    int v13 = -[_UIEventDeferringRecord recreationReasons](v11);
    char v14 = [v13 containsObject:v8];

    if (v10)
    {
      if ((v14 & 1) == 0)
      {
        uint64_t v37 = a3;
        id v15 = v10[2];
        uint64_t v16 = v15;
        if (v15) {
          int v17 = (void *)*((void *)v15 + 9);
        }
        else {
          int v17 = 0;
        }
        id v18 = v17;

        id WeakRetained = objc_loadWeakRetained(v12 + 4);
        BOOL v20 = WeakRetained;
        if (WeakRetained) {
          id v21 = (void *)*((void *)WeakRetained + 6);
        }
        else {
          id v21 = 0;
        }
        id v22 = v21;

        if ((-[_UIEventDeferringManager _isRemoteRuleOwningElement:visibleForLocalTargetWindow:](*(id **)a2, v22, v18) & 1) == 0)
        {
          id v23 = v12[3];
          [v23 invalidate];

          -[_UIEventDeferringRecord addRecreationReason:]((uint64_t)v12, (uint64_t)v8);
          id v24 = [v7 description];
          uint64_t v36 = [v24 UTF8String];

          uint64_t v25 = [(__CFString *)v9 UTF8String];
          if (os_variant_has_internal_diagnostics())
          {
            uint64_t v35 = v25;
            uint64_t v27 = *(id *)(__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F5E0) + 8);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v30 = *(void *)a2;
              os_log_t log = v27;
              id v32 = v22;
              if (v32)
              {
                uint64_t v33 = NSString;
                id v28 = (objc_class *)objc_opt_class();
                long long v29 = NSStringFromClass(v28);
                int v34 = [v33 stringWithFormat:@"<%@: %p>", v29, v32];
              }
              else
              {
                int v34 = @"(nil)";
              }

              *(_DWORD *)buf = 134350082;
              uint64_t v39 = v30;
              __int16 v40 = 2082;
              uint64_t v41 = v36;
              __int16 v42 = 2082;
              uint64_t v43 = v35;
              __int16 v44 = 2050;
              BOOL v45 = v12;
              __int16 v46 = 2114;
              int v47 = v34;
              uint64_t v27 = log;
              _os_log_impl(&dword_1853B0000, log, OS_LOG_TYPE_DEFAULT, "[%{public}p] [%{public}s] %{public}s: Disabling top remote record for window level mismatch: %{public}p;"
                " remote element: %{public}@",
                buf,
                0x34u);
            }
          }
        }

        a3 = v37;
      }
    }
  }
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F5E8)) {
    _emitDebugLogForTransition(a3, a4, &stru_1ED0E84C0, a2);
  }

  return 9;
}

void _UIEventDeferringAssertForInvalidOwningInterfaceElement(void *a1)
{
  if (!a1)
  {
    double v6 = [MEMORY[0x1E4F28B00] currentHandler];
    id v7 = [NSString stringWithUTF8String:"void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)"];
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, @"_UIEventDeferringManager.m", 399, @"%s: An owning interface element must be present to begin event deferring", "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    id v8 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v9 = [NSString stringWithUTF8String:"void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)"];
    [v8 handleFailureInFunction:v9, @"_UIEventDeferringManager.m", 402, @"%s: An owning interface element must conform to _UIEventDeferringRuleOwning: %@", "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)", a1 file lineNumber description];
  }
  uint64_t v2 = [a1 interfaceElementCategory];
  uint64_t v3 = _UIEventDeferringInterfaceCategoryForOwningElement();
  _NSStringFromUIEventDeferringInterfaceElementCategory(1uLL);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)"];
    [v4 handleFailureInFunction:v5, @"_UIEventDeferringManager.m", 413, @"%s: %@ is an invalid interface element category: %@", "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)", v10, a1 file lineNumber description];
    goto LABEL_15;
  }
  if (v2 == 1 && v3 != 1)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)"];
    [v4 handleFailureInFunction:v5, @"_UIEventDeferringManager.m", 416, @"%s: Owning interface element states it is %@ but is not: %@", "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)", v10, a1 file lineNumber description];
LABEL_15:

    goto LABEL_16;
  }
  if (v2 == 2 && v3 != 2)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)"];
    [v4 handleFailureInFunction:v5, @"_UIEventDeferringManager.m", 420, @"%s: Owning interface element states it is %@ but is not: %@", "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)", v10, a1 file lineNumber description];
    goto LABEL_15;
  }
  if (v2 == 3 && v3 != 3)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)"];
    [v4 handleFailureInFunction:v5, @"_UIEventDeferringManager.m", 424, @"%s: Owning interface element states it is %@ but is not: %@", "void _UIEventDeferringAssertForInvalidOwningInterfaceElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)", v10, a1 file lineNumber description];
    goto LABEL_15;
  }
LABEL_16:
}

__CFString *_NSStringFromUIEventDeferringInterfaceElementCategory(unint64_t a1)
{
  if (a1 > 3) {
    return &stru_1ED0E84C0;
  }
  else {
    return off_1E52DD018[a1];
  }
}

uint64_t stateMachineSpec_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [v2 delegate];
  [v3 clickDriver:v2 didPerformEvent:3];

  uint64_t v4 = [v2 gestureRecognizer];

  [v4 setCancelsTouchesInView:0];
  return 1;
}

uint64_t stateMachineSpec_block_invoke_0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_handleDidEndFromState:");
}

uint64_t stateMachineSpec_block_invoke_1(uint64_t a1, void *a2)
{
  return [a2 _didTransitionToPresenting];
}

uint64_t stateMachineSpec_block_invoke_4(uint64_t a1, void *a2)
{
  return [a2 didTransitionToInactiveState];
}

uint64_t stateMachineSpec_block_invoke_5(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [v2 delegate];
  [v3 clickDriver:v2 didPerformEvent:3];

  uint64_t v4 = [v2 gestureRecognizer];

  [v4 setCancelsTouchesInView:0];
  return 1;
}

uint64_t stateMachineSpec_block_invoke_6(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [v2 delegate];
  [v3 clickDriver:v2 didPerformEvent:3];

  uint64_t v4 = [v2 gestureRecognizer];

  [v4 setCancelsTouchesInView:0];
  return 1;
}

uint64_t stateMachineSpec_block_invoke_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = *(id *)(a2 + 16);
  id v8 = _NSStringFromUIDeferringAction[a4];
  uint64_t v9 = -[_UIEventDeferringManager _remoteDeferringRecordStackForEnvironment:](*(void *)a2, (uint64_t)v7);
  if ((unint64_t)[v9 count] >= 2)
  {
    id v10 = -[_UIEventDeferringManager _topRemoteRecordInStackForEnvironment:](*(void *)a2, (uint64_t)v7);
    BOOL v11 = -[_UIEventDeferringRecord needsRecreation](v10);
    uint64_t v12 = *(void *)a2;
    if (*(void *)a2)
    {
      if (!*(void *)(v12 + 96))
      {
        id v22 = [MEMORY[0x1E4F28B00] currentHandler];
        [v22 handleFailureInMethod:sel__sortRemoteRecordStackForEnvironment_, v12, @"_UIEventDeferringManager.m", 2474, @"[%p] %s: Invalid state. Sorting records without a transaction: %@", v12, "-[_UIEventDeferringManager _sortRemoteRecordStackForEnvironment:]", v12 object file lineNumber description];
      }
      int v13 = -[_UIEventDeferringManager _remoteDeferringRecordStackForEnvironment:](v12, (uint64_t)v7);
      char v14 = v13;
      if (v13 && (unint64_t)[v13 count] >= 2)
      {
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = __65___UIEventDeferringManager__sortRemoteRecordStackForEnvironment___block_invoke;
        uint64_t v26 = (__CFString *)&unk_1E52E30A8;
        *(void *)&long long v27 = v12;
        *((void *)&v27 + 1) = v7;
        [v14 sortWithOptions:16 usingComparator:buf];
      }

      uint64_t v15 = *(void *)a2;
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = -[_UIEventDeferringManager _topRemoteRecordInStackForEnvironment:](v15, (uint64_t)v7);
    char v17 = v16 == v10 || v11;
    if ((v17 & 1) == 0)
    {
      unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F618);
      if (*(unsigned char *)CategoryCachedImpl)
      {
        id v23 = *(NSObject **)(CategoryCachedImpl + 8);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          uint64_t v24 = *(void *)a2;
          *(_DWORD *)buf = 134349826;
          *(void *)&uint8_t buf[4] = v24;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v7;
          *(_WORD *)&buf[22] = 2114;
          uint64_t v26 = v8;
          LOWORD(v27) = 2114;
          *(void *)((char *)&v27 + 2) = v10;
          _os_log_impl(&dword_1853B0000, v23, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Invalidating previous top remote record in stack: %{public}@", buf, 0x2Au);
        }
      }
      if (v10) {
        uint64_t v19 = (void *)v10[3];
      }
      else {
        uint64_t v19 = 0;
      }
      id v20 = v19;
      [v20 invalidate];

      -[_UIEventDeferringRecord addRecreationReason:]((uint64_t)v10, *(void *)(a2 + 24));
    }
  }
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F620)) {
    _emitDebugLogForTransition(a3, a4, &stru_1ED0E84C0, a2);
  }

  return 9;
}

uint64_t _disableTopRemoteRecordTransition_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v7 = *(id *)(a2 + 16);
  id v8 = _NSStringFromUIDeferringAction[a4];
  if (*(unsigned char *)(a2 + 48))
  {
    id v18 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v19 = [NSString stringWithUTF8String:"_disableTopRemoteRecordTransition_block_invoke"];
    [v18 handleFailureInFunction:v19, @"_UIEventDeferringManager.m", 884, @"[%p] [%@] %@: Invalid state. Unexpected value of ownerInitiatedRemoval: %d", *(void *)a2, v7, v8, *(unsigned __int8 *)(a2 + 48) file lineNumber description];
  }
  uint64_t v9 = -[_UIEventDeferringManager _topRemoteRecordInStackForEnvironment:](*(void *)a2, (uint64_t)v7);
  id v10 = *(id *)(a2 + 24);
  if (v9)
  {
    BOOL v11 = -[_UIEventDeferringRecord recreationReasons]((void *)v9);
    char v12 = [v11 containsObject:v10];

    if ((v12 & 1) == 0)
    {
      if (-[_UIEventDeferringRecord needsRecreation]((void *)v9))
      {
        int v13 = 0;
      }
      else
      {
        id v14 = *(id *)(v9 + 24);
        [v14 invalidate];

        int v13 = 1;
      }
      -[_UIEventDeferringRecord addRecreationReason:](v9, (uint64_t)v10);
      uint64_t v15 = _UIEventDeferringShorterRecreationReasonStringForReason(v10);
      unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F500);
      if (*(unsigned char *)CategoryCachedImpl)
      {
        id v20 = *(NSObject **)(CategoryCachedImpl + 8);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = *(void *)a2;
          *(_DWORD *)buf = 134350338;
          uint64_t v23 = v21;
          __int16 v24 = 2114;
          id v25 = v7;
          __int16 v26 = 2114;
          long long v27 = v8;
          __int16 v28 = 1026;
          int v29 = v13;
          __int16 v30 = 2114;
          unint64_t v31 = v15;
          __int16 v32 = 2114;
          uint64_t v33 = v9;
          _os_log_impl(&dword_1853B0000, v20, OS_LOG_TYPE_ERROR, "[%{public}p] [%{public}@] %{public}@: Disabling top remote record: invalidated: %{public}d; added recreation"
            " reason: %{public}@; record: %{public}@",
            buf,
            0x3Au);
        }
      }
    }
  }
  if (*(unsigned char *)__UILogGetCategoryCachedImpl("EventDeferring", &qword_1EB25F508)) {
    _emitDebugLogForTransition(a3, a4, &stru_1ED0E84C0, a2);
  }

  return 7;
}

uint64_t _UIEventDeferringSystemShellBehaviorIsAllowedForProcess()
{
  if ((_UIApplicationProcessIsSpringBoard() & 1) != 0
    || (_UIEventDeferringProcessIsCarPlayApp() & 1) != 0
    || (_UIEventDeferringProcessIsPineBoard() & 1) != 0)
  {
    return 1;
  }
  return _UIEventDeferringProcessIsCarousel();
}

uint64_t _UIVibrancyStyleConvertToPublic(uint64_t a1)
{
  if ((unint64_t)(a1 - 101) > 0x13) {
    return 101;
  }
  else {
    return qword_186B93390[a1 - 101];
  }
}

void sub_185737B70(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

id _UIStatusBarManagerForNoWindow()
{
  unsigned int v0 = (byte_1EB256EC4 != 0) & ~_UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_SoftAssertWithNilSceneForStatusBar, @"SoftAssertWithNilSceneForStatusBar");
  double v1 = *(double *)&__SplashBoardOverrideStatusBarHeight;
  id v2 = (void *)UIApp;
  if (v0 == 1 && *(double *)&__SplashBoardOverrideStatusBarHeight == 1.79769313e308 && UIApp == 0)
  {
    if (os_variant_has_internal_diagnostics())
    {
      char v12 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t v16 = 0;
        _os_log_fault_impl(&dword_1853B0000, v12, OS_LOG_TYPE_FAULT, "Looking for statusBarManager before the shared application has been created. This is much too early!", v16, 2u);
      }
    }
    else
    {
      uint64_t v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_MergedGlobals_984) + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "Looking for statusBarManager before the shared application has been created. This is much too early!", buf, 2u);
      }
    }
    id v2 = (void *)UIApp;
    if (UIApp) {
      goto LABEL_9;
    }
LABEL_21:
    id v7 = 0;
    goto LABEL_22;
  }
  if (!UIApp) {
    goto LABEL_21;
  }
LABEL_9:
  int v5 = objc_msgSend(v2, "_appAdoptsUISceneLifecycle", v1);
  if ((v0 & v5) == 1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      BOOL v11 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)id v14 = 0;
        _os_log_fault_impl(&dword_1853B0000, v11, OS_LOG_TYPE_FAULT, "Unsupported code path for UIScene-based application.", v14, 2u);
      }
    }
    else
    {
      id v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25F480) + 8);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v13 = 0;
        _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "Unsupported code path for UIScene-based application.", v13, 2u);
      }
    }
  }
  if (v5) {
    [(id)UIApp _findUISceneForLegacyInterfaceOrientation];
  }
  else {
  double v6 = [(id)UIApp _defaultUIWindowHostingUISceneOrMainScreenPlaceholderIfExists];
  }
  id v7 = [v6 _statusBarManager];

LABEL_22:
  return v7;
}

void _UISwitchCommonInit(void *a1)
{
  id v14 = a1;
  double v1 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v1 addObserver:v14 selector:sel__showingOnOffLabelChanged name:@"UIAccessibilityOnOffSwitchLabelsDidChangeNotification" object:0];

  id v2 = [v14 traitCollection];
  if ([v2 userInterfaceIdiom] == -1)
  {
    uint64_t v3 = +[UIScreen mainScreen];
    uint64_t v4 = [v3 traitCollection];

    id v2 = (void *)v4;
  }
  [v14 preferredStyle];
  [v2 userInterfaceIdiom];
  v14[63] = 2;
  [v14 _refreshVisualElementForTraitCollection:v2 populatingAPIProperties:0];
  int v5 = [v14 visualElement];
  double v6 = objc_opt_class();

  if ([v6 isFixedSize])
  {
    [v14 frame];
    double v8 = v7;
    double v10 = v9;
    [v6 preferredContentSize];
    objc_msgSend(v14, "setFrame:", v8, v10, v11, v12);
  }
  else
  {
    [v14 sizeToFit];
  }
  int v13 = [v14 visualElement];
  [v13 setEnabled:1];
}

uint64_t __GetTraitCollectionTSD_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&qword_1EB261368, (void (__cdecl *)(void *))FreeTraitCollectionTSD);
}

uint64_t CreateContextKey()
{
  return pthread_key_create((pthread_key_t *)&__contextThreadKey, (void (__cdecl *)(void *))FreeContextStack);
}

void ____finishDigitizerEventDispatch_block_invoke_2(uint64_t a1, uint64_t a2, _WORD *a3)
{
  id v10 = [a3 window];
  int v5 = _UIApplicationSupportsGlobalEdgeSwipeTouches();
  BOOL v6 = 1;
  if (a3 && v5) {
    BOOL v6 = (a3[118] & 0x2000) == 0;
  }
  if (v6 && v10)
  {
    double v7 = [a3 _responder];
    if (v7)
    {
    }
    else
    {
      double v8 = [a3 gestureRecognizers];
      uint64_t v9 = [v8 count];

      if (!v9) {
        goto LABEL_10;
      }
    }
    [*(id *)(a1 + 32) removeObject:v10];
  }
LABEL_10:
}

double UIPointRoundToViewScale(void *a1, double a2, double a3)
{
  [a1 _currentScreenScale];
  return UIPointRoundToScale(a2, a3, v5);
}

void sub_1857409A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _smoothDecelerationAnimation()
{
  if (qword_1EB25A570 != -1) {
    dispatch_once(&qword_1EB25A570, &__block_literal_global_1968);
  }
  unsigned int v0 = (void *)qword_1EB25A568;
  return v0;
}

__CFString *UIApplicationSceneStringForCompatibilityMode(unint64_t a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E52F00F0[a1];
  }
}

void sub_185742350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIButtonBarButtonMakerForVisualProvider()
{
  unsigned int v0 = objc_opt_new();
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___UIButtonBarButtonMakerForVisualProvider_block_invoke;
  aBlock[3] = &unk_1E52DDA30;
  id v6 = v0;
  id v1 = v0;
  id v2 = _Block_copy(aBlock);
  uint64_t v3 = _Block_copy(v2);

  return v3;
}

void _UIBarButtonGroupCheckArguments(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 count];
  if (v4 && v5)
  {
    int v6 = dyld_program_sdk_at_least();
    int v7 = [v4 isSpaceItem];
    if (v6)
    {
      if (v7)
      {
        double v8 = [MEMORY[0x1E4F28B00] currentHandler];
        uint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIBarButtonGroupCheckArguments(NSArray<UIBarButtonItem *> *__strong, UIBarButtonItem *__strong)");
        [v8 handleFailureInFunction:v9, @"UIBarButtonItemGroup.m", 42, @"Assigning a fixed or flexible space item as the representativeItem of a group is unsupported (representativeItem=%@)", v4 file lineNumber description];
      }
    }
    else if (v7)
    {
      uint64_t v16 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UIBarButtonGroupCheckArguments___s_category) + 8);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v23 = v4;
        _os_log_impl(&dword_1853B0000, v16, OS_LOG_TYPE_ERROR, "Assigning a fixed or flexible space item as the representativeItem of a group is unsupported (representativeItem=%@)", buf, 0xCu);
      }
    }
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v10 = v3;
    uint64_t v11 = [v10 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v18;
      uint64_t v14 = *MEMORY[0x1E4F1C3C8];
      do
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v18 != v13) {
            objc_enumerationMutation(v10);
          }
          if (*(id *)(*((void *)&v17 + 1) + 8 * v15) == v4) {
            [MEMORY[0x1E4F1CA00] raise:v14, @"You cannot use the same UIBarButtonItem as both the representativeItem and as a member of barButtonItems when creating or modifying a UIBarButtonItemGroup (representativeItem=%@, barButtonItems=%@)", v4, v10, (void)v17 format];
          }
          ++v15;
        }
        while (v12 != v15);
        uint64_t v12 = [v10 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v12);
    }
  }
}

void _UIBarButtonGroupAssignRepresentative(void *a1, void *a2)
{
  id v9 = a1;
  id v3 = a2;
  id v4 = [v9 _owningButtonGroup];
  uint64_t v5 = v3;
  if (v4 != v3)
  {
    id v6 = v4;
    if (v4)
    {
      [v4 _removeRepresentative:v9];
    }
    else
    {
      id v6 = [v9 buttonGroup];
      if (v6 == v3)
      {
        int v7 = [MEMORY[0x1E4F28B00] currentHandler];
        double v8 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIBarButtonGroupAssignRepresentative(UIBarButtonItem *__strong, UIBarButtonItemGroup *__strong)");
        [v7 handleFailureInFunction:v8, @"UIBarButtonItemGroup.m", 206, @"Attempt to assign a representative item from the bar button items of the target group (rep=%@, group=%@)", v9, v3 file lineNumber description];
      }
      [v6 _removeBarButtonItem:v9];
    }
    [v9 _setButtonGroup:v3 isRepresentative:v3 != 0];
    uint64_t v5 = v6;
  }
}

void _UIBarButtonGroupAssign(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        id v10 = [v9 buttonGroup];
        uint64_t v11 = v10;
        if (v10 != v4)
        {
          [v10 _removeBarButtonItem:v9];
          [v9 _setButtonGroup:v4 isRepresentative:0];
        }
      }
      uint64_t v6 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
}

BOOL _containedInViewOfClass(void *a1)
{
  id v1 = _enclosingViewOfClass(a1);
  BOOL v2 = v1 != 0;

  return v2;
}

id _enclosingViewOfClass(void *a1)
{
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = v1;
    do
    {
      if (objc_opt_isKindOfClass()) {
        break;
      }
      uint64_t v4 = [v3 superview];

      id v3 = (void *)v4;
    }
    while (v4);
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void _UIDeallocOnMainThread(void *a1)
{
  if (pthread_main_np())
  {
    [a1 dealloc];
  }
  else
  {
    BOOL v2 = MEMORY[0x1E4F14428];
    id v3 = (void (__cdecl *)(void *))MEMORY[0x1E4FBA8B8];
    dispatch_async_f(v2, a1, v3);
  }
}

unint64_t UIButton.Configuration.buttonSize.getter@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = (unint64_t)objc_msgSend(*(id *)(*(void *)v1 + 16), sel_buttonSize);
  if (result >= 4)
  {
    sub_186A1F38C();
    sub_186A1E9FC();
    type metadata accessor for __UIButtonConfigurationSize(0);
    sub_186A1F53C();
    sub_186A1E9FC();
    sub_186A1FBDC();
    sub_186A1E9FC();
    swift_bridgeObjectRelease();
    unint64_t result = sub_186A1F60C();
    __break(1u);
  }
  else
  {
    *a1 = 0x3000102u >> (8 * result);
  }
  return result;
}

uint64_t ___isVerboseLoggingForStrictRepeatedPushAssertionEnabled_block_invoke()
{
  uint64_t result = _resolvedPrefValue(@"UINavigationControllerEnableVerboseLoggingForStrictRepeatedPushAssertion");
  byte_1EB25A81C = result;
  return result;
}

void sub_185749ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ___overrideUISplitViewControllerToCompact_block_invoke()
{
  unsigned int v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v3 = [v0 objectForKey:@"UIOverrideUISplitViewControllerInTabToCompact"];

  uint64_t v1 = v3;
  if (v3
    || (_UIKitPreferencesOnce(),
        BOOL v2 = objc_claimAutoreleasedReturnValue(),
        [v2 objectForKey:@"UIOverrideUISplitViewControllerInTabToCompact"],
        id v4 = (id)objc_claimAutoreleasedReturnValue(),
        v2,
        (uint64_t v1 = v4) != 0))
  {
    id v5 = v1;
    _overrideUISplitViewControllerToCompact_override = [v1 BOOLValue];
  }
  else if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    _overrideUISplitViewControllerToCompact_override = 0;
  }
}

uint64_t ___traitCollectionChangeLoggingMode_block_invoke()
{
  uint64_t result = _UIInternalPreferenceUsesDefault_2((int *)&_UIInternalPreference_TraitCollectionChangeLoggingEnabled, @"TraitCollectionChangeLoggingEnabled");
  uint64_t v1 = qword_1EB257610;
  if (result) {
    uint64_t v1 = 0;
  }
  qword_1EB261388 = v1;
  if (!v1)
  {
    uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", @"UITraitCollectionChangeLoggingEnabled");
    if (result) {
      qword_1EB261388 = 1;
    }
  }
  return result;
}

void ___ZL30_UIShouldLogTraitUsageTrackingv_block_invoke()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1) {
    goto LABEL_4;
  }
  int v1 = _UIInternalPreference_TraitUsageTrackingLoggingEnabled;
  if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_TraitUsageTrackingLoggingEnabled) {
    goto LABEL_4;
  }
  while (v0 >= v1)
  {
    _UIInternalPreferenceSync(v0, &_UIInternalPreference_TraitUsageTrackingLoggingEnabled, @"TraitUsageTrackingLoggingEnabled", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    int v1 = _UIInternalPreference_TraitUsageTrackingLoggingEnabled;
    if (v0 == _UIInternalPreference_TraitUsageTrackingLoggingEnabled) {
      goto LABEL_4;
    }
  }
  if (!byte_1EB25767C)
  {
LABEL_4:
    id v2 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
    _MergedGlobals_1114 = [v2 BOOLForKey:@"UITraitUsageTrackingLoggingEnabled"];
  }
  else
  {
    _MergedGlobals_1114 = 1;
  }
}

void sub_18574ACC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t __UILayoutConstraintDebuggingMaximumLayoutDescriptionLength_block_invoke()
{
  uint64_t result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "integerForKey:", @"UILayoutConstraintDebuggingMaximumLayoutDescriptionLength");
  if (result) {
    UILayoutConstraintDebuggingMaximumLayoutDescriptionLength_maxLength = result;
  }
  return result;
}

BOOL _UIGetUIViewLayoutFeedbackLoopDebuggingEnabled()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_UIViewLayoutFeedbackLoopDebuggingEnabled,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_UIViewLayoutFeedbackLoopDebuggingEnabled))
  {
    BOOL v1 = 0;
  }
  else
  {
    do
    {
      BOOL v1 = v0 < v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_UIViewLayoutFeedbackLoopDebuggingEnabled, @"UIViewLayoutFeedbackLoopDebuggingEnabled", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_UIViewLayoutFeedbackLoopDebuggingEnabled;
    }
    while (v0 != _UIInternalPreference_UIViewLayoutFeedbackLoopDebuggingEnabled);
  }
  return byte_1EB257B74 && v1;
}

void ___scrollViewConvertSafeAreaToContentInset_block_invoke()
{
  int v0 = _UIKitPreferencesOnce();
  id v3 = [v0 objectForKey:@"UIScrollViewForceConvertSafeAreaToContentInsetPreference"];

  BOOL v1 = v3;
  if (v3
    || ([MEMORY[0x1E4F1CB18] standardUserDefaults],
        id v2 = objc_claimAutoreleasedReturnValue(),
        [v2 objectForKey:@"UIScrollViewForceConvertSafeAreaToContentInsetPreference"],
        id v4 = (id)objc_claimAutoreleasedReturnValue(),
        v2,
        (BOOL v1 = v4) != 0))
  {
    id v5 = v1;
    _scrollViewConvertSafeAreaToContentInset_convert = [v1 BOOLValue];
  }
  else if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    _scrollViewConvertSafeAreaToContentInset_convert = 0;
  }
}

uint64_t _resolvedPrefValue(void *a1)
{
  id v1 = a1;
  id v2 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v3 = [v2 objectForKey:v1];

  if (v3
    || (_UIKitPreferencesOnce(),
        id v4 = objc_claimAutoreleasedReturnValue(),
        [v4 objectForKey:v1],
        id v3 = objc_claimAutoreleasedReturnValue(),
        v4,
        v3))
  {
    uint64_t v5 = [v3 BOOLValue];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t _resolvedPrefValue_0(void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v5 = [v4 objectForKey:v3];

  if (v5
    || (_UIKitPreferencesOnce(),
        uint64_t v6 = objc_claimAutoreleasedReturnValue(),
        [v6 objectForKey:v3],
        uint64_t v5 = objc_claimAutoreleasedReturnValue(),
        v6,
        v5))
  {
    a2 = [v5 BOOLValue];
  }
  if (_UIGetUISplitViewControllerChamoisResizeLogging())
  {
    uint64_t v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("ChamoisResize", &_resolvedPrefValue___s_category) + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      double v8 = @"OFF";
      if (a2) {
        double v8 = @"ON";
      }
      int v10 = 138412546;
      id v11 = v3;
      __int16 v12 = 2112;
      long long v13 = v8;
      _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "%@ is %@", (uint8_t *)&v10, 0x16u);
    }
  }

  return a2;
}

BOOL _UIGetUISplitViewControllerChamoisResizeLogging()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_UISplitViewControllerChamoisResizeLogging,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_UISplitViewControllerChamoisResizeLogging))
  {
    BOOL v1 = 0;
  }
  else
  {
    do
    {
      BOOL v1 = v0 < v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_UISplitViewControllerChamoisResizeLogging, @"UISplitViewControllerChamoisResizeLogging", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_UISplitViewControllerChamoisResizeLogging;
    }
    while (v0 != _UIInternalPreference_UISplitViewControllerChamoisResizeLogging);
  }
  return byte_1EB2570A4 && v1;
}

uint64_t _valueForPrefOrPassLinkCheck(uint64_t a1, int a2)
{
  id v4 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "objectForKey:", a1);
  if (!v4)
  {
    id v4 = (void *)[_UIKitPreferencesOnce() objectForKey:a1];
    if (!v4) {
      return dyld_program_sdk_at_least() & a2;
    }
  }
  return [v4 BOOLValue];
}

id _UIKitPreferencesOnce()
{
  if (qword_1EB264AD8 != -1) {
    dispatch_once(&qword_1EB264AD8, &__block_literal_global_3_11);
  }
  int v0 = (void *)qword_1EB264AD0;
  return v0;
}

uint64_t _UIWhitePointAdaptivityStyleFromString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [@"_UIWhitePointAdaptivityStyleStandard" length];
  uint64_t v3 = v2 - 1;
  if (v2 == 1)
  {
  }
  else
  {
    if ([v1 isEqualToString:@"_UIWhitePointAdaptivityStyleStandard"])
    {

LABEL_6:
      uint64_t v6 = 0;
      goto LABEL_34;
    }
    id v4 = objc_msgSend(@"_UIWhitePointAdaptivityStyleStandard", "substringWithRange:", 1, v3);
    char v5 = [v1 isEqualToString:v4];

    if (v5) {
      goto LABEL_6;
    }
  }
  id v7 = v1;
  uint64_t v8 = [@"_UIWhitePointAdaptivityStyleReading" length];
  uint64_t v9 = v8 - 1;
  if (v8 == 1)
  {
  }
  else
  {
    if ([v7 isEqualToString:@"_UIWhitePointAdaptivityStyleReading"])
    {

LABEL_12:
      uint64_t v6 = 1;
      goto LABEL_34;
    }
    int v10 = objc_msgSend(@"_UIWhitePointAdaptivityStyleReading", "substringWithRange:", 1, v9);
    char v11 = [v7 isEqualToString:v10];

    if (v11) {
      goto LABEL_12;
    }
  }
  id v12 = v7;
  uint64_t v13 = [@"_UIWhitePointAdaptivityStylePhoto" length];
  uint64_t v14 = v13 - 1;
  if (v13 == 1)
  {
  }
  else
  {
    if ([v12 isEqualToString:@"_UIWhitePointAdaptivityStylePhoto"])
    {

LABEL_18:
      uint64_t v6 = 2;
      goto LABEL_34;
    }
    long long v15 = objc_msgSend(@"_UIWhitePointAdaptivityStylePhoto", "substringWithRange:", 1, v14);
    char v16 = [v12 isEqualToString:v15];

    if (v16) {
      goto LABEL_18;
    }
  }
  id v17 = v12;
  uint64_t v18 = [@"_UIWhitePointAdaptivityStyleVideo" length];
  uint64_t v19 = v18 - 1;
  if (v18 == 1)
  {
  }
  else
  {
    if ([v17 isEqualToString:@"_UIWhitePointAdaptivityStyleVideo"])
    {

LABEL_24:
      uint64_t v6 = 3;
      goto LABEL_34;
    }
    long long v20 = objc_msgSend(@"_UIWhitePointAdaptivityStyleVideo", "substringWithRange:", 1, v19);
    char v21 = [v17 isEqualToString:v20];

    if (v21) {
      goto LABEL_24;
    }
  }
  id v22 = v17;
  uint64_t v23 = [@"_UIWhitePointAdaptivityStyleGame" length];
  uint64_t v24 = v23 - 1;
  if (v23 == 1)
  {
  }
  else
  {
    if ([v22 isEqualToString:@"_UIWhitePointAdaptivityStyleGame"])
    {

LABEL_30:
      uint64_t v6 = 4;
      goto LABEL_34;
    }
    id v25 = objc_msgSend(@"_UIWhitePointAdaptivityStyleGame", "substringWithRange:", 1, v24);
    char v26 = [v22 isEqualToString:v25];

    if (v26) {
      goto LABEL_30;
    }
  }
  if ([v22 isEqualToString:@"_UIWhitePointAdaptivityStyleOff"]) {
    uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v6 = 0;
  }
LABEL_34:

  return v6;
}

void sub_18574DA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_18574DC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_18574E7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18574EBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18574ED10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18574EDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_18574FA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_18575040C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_185750524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<_UIOutlineNode>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(24 * a1);
}

void sub_185750764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185750B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185750D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_185751184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _updateItemOwners(void *a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * v8++) _setOwningNavigationItem:v4];
      }
      while (v6 != v8);
      uint64_t v6 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

void _updateItemGroupOwners(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v3);
        }
        long long v9 = -[UIBarButtonItemGroup _items](*(id **)(*((void *)&v10 + 1) + 8 * v8));
        _updateItemOwners(v9, v4);

        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }
}

id _itemListUpdatingFirstItem(void *a1, void *a2)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = [v3 count];
  if (v4)
  {
    if (v5 > 1)
    {
      uint64_t v8 = [v3 indexOfObjectIdenticalTo:v4];
      if (v8)
      {
        uint64_t v9 = v8;
        long long v10 = (void *)[v3 mutableCopy];
        long long v11 = v10;
        if (v9 == 0x7FFFFFFFFFFFFFFFLL)
        {
          [v10 setObject:v4 atIndexedSubscript:0];
        }
        else
        {
          [v10 removeObjectAtIndex:v9];
          [v11 insertObject:v4 atIndex:0];
        }
        uint64_t v7 = (void *)[v11 copy];

        goto LABEL_14;
      }
      id v6 = v3;
    }
    else
    {
      v13[0] = v4;
      id v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:1];
    }
  }
  else
  {
    if (v5 < 2)
    {
      uint64_t v7 = 0;
      goto LABEL_14;
    }
    objc_msgSend(v3, "subarrayWithRange:", 1, objc_msgSend(v3, "count") - 1);
    id v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v7 = v6;
LABEL_14:

  return v7;
}

__CFString *UIApplicationSceneDeactivationReasonDescription(unint64_t a1)
{
  if (a1 < 0x1F && ((0x40043FFFu >> a1) & 1) != 0)
  {
    id v1 = off_1E52F0120[a1];
  }
  else
  {
    objc_msgSend(NSString, "stringWithFormat:", @"unknown reason %d", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

void sub_185756060()
{
}

void sub_185756078(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(v3);
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SExceptionOccu_2.isa, "+[_UICanvasUserActivityManager _getRestorationUserActivityForPersistentIdentifier:error:]", v2);
    }

    objc_end_catch();
    JUMPOUT(0x185755E1CLL);
  }
  JUMPOUT(0x185756110);
}

void sub_18575608C(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(v3);
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SExceptionOccu_2.isa, "+[_UICanvasUserActivityManager _getRestorationUserActivityForPersistentIdentifier:error:]", v2);
    }

    objc_end_catch();
    JUMPOUT(0x185755E1CLL);
  }
  JUMPOUT(0x185756110);
}

void sub_1857560A4(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(v3);
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SExceptionOccu_2.isa, "+[_UICanvasUserActivityManager _getRestorationUserActivityForPersistentIdentifier:error:]", v2);
    }

    objc_end_catch();
    JUMPOUT(0x185755E1CLL);
  }
  JUMPOUT(0x185756110);
}

void sub_1857560B0()
{
}

void sub_185756108()
{
}

double _UIColorDecodeComponentForKey(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = a1;
  if ([v7 containsValueForKey:v6])
  {
    [v7 decodeDoubleForKey:v6];
    double v9 = v8;
  }
  else
  {
    [v7 decodeFloatForKey:v5];
    float v11 = v10;

    double v9 = v11;
  }

  return v9;
}

void sub_185756AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _queue_ensureExistenceOfKnownSceneSessionMap()
{
  if (!qword_1EB262000)
  {
    int v0 = _restorationPath(@"KnownSceneSessions");
    id v17 = 0;
    id v1 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfURL:v0 options:0 error:&v17];
    id v2 = v17;
    id v3 = v2;
    if (v1)
    {
      id v16 = 0;
      id v4 = [MEMORY[0x1E4F28F98] propertyListWithData:v1 options:0 format:0 error:&v16];
      id v5 = v16;

      if (v5)
      {
        if (_UIStateRestorationDebugLogEnabled()) {
          NSLog(&cfstr_SCouldNotConve.isa, "void _queue_ensureExistenceOfKnownSceneSessionMap(void)", v5);
        }
      }
      else
      {
        uint64_t v6 = [v4 mutableCopy];
        id v7 = (void *)qword_1EB262000;
        qword_1EB262000 = v6;
      }
    }
    else
    {
      id v5 = v2;
    }
    uint64_t v8 = qword_1EB262000;
    int v9 = _UIStateRestorationDebugLogEnabled();
    if (v8)
    {
      if (v9) {
        NSLog(&cfstr_SReadSavedScen.isa, "void _queue_ensureExistenceOfKnownSceneSessionMap(void)", qword_1EB262000);
      }
    }
    else
    {
      if (v9) {
        NSLog(&cfstr_SCouldNotReadS.isa, "void _queue_ensureExistenceOfKnownSceneSessionMap(void)");
      }
      float v10 = _restorationPath(@"KnownCanvasDefinitions");
      uint64_t v11 = [MEMORY[0x1E4F1CA60] dictionaryWithContentsOfURL:v10];
      long long v12 = (void *)qword_1EB262000;
      qword_1EB262000 = v11;

      if (qword_1EB262000)
      {
        byte_1EB261FFA = 1;
        if (_UIStateRestorationDebugLogEnabled()) {
          NSLog(&cfstr_SFoundOldSpiFo.isa, "void _queue_ensureExistenceOfKnownSceneSessionMap(void)", qword_1EB262000);
        }
        _queue_scheduleUpdateAndSaveForPersistedSceneSessions();
      }
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      if (_UIStateRestorationDebugLogEnabled()) {
        NSLog(&cfstr_SCouldNotConve_0.isa, "void _queue_ensureExistenceOfKnownSceneSessionMap(void)", v5, qword_1EB262000);
      }
      long long v13 = (void *)qword_1EB262000;
      qword_1EB262000 = 0;
    }
    if (!qword_1EB262000)
    {
      uint64_t v14 = [MEMORY[0x1E4F1CA60] dictionaryWithCapacity:1];
      uint64_t v15 = (void *)qword_1EB262000;
      qword_1EB262000 = v14;
    }
  }
}

void sub_185756FD0()
{
}

id _decodeSceneSession(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  id v10 = 0;
  id v5 = (void *)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingFromData:v3 error:&v10];
  id v6 = v10;
  if (!v6)
  {
    [v5 setRequiresSecureCoding:1];
    [v5 setDecodingFailurePolicy:0];
    uint64_t v7 = [v5 decodeObjectOfClass:objc_opt_class() forKey:@"CanvasRestorationCanvasDefinitionKey"];
    [v5 finishDecoding];
    if (v7)
    {
      if (_UIStateRestorationDebugLogEnabled()) {
        NSLog(&cfstr_SDecodedSceneS.isa, "UISceneSession *_decodeSceneSession(NSData *__strong, NSString *__strong)", v7);
      }
      goto LABEL_12;
    }
    if (_UIStateRestorationDebugLogEnabled())
    {
      NSLog(&cfstr_SCouldnTDecode_0.isa, "UISceneSession *_decodeSceneSession(NSData *__strong, NSString *__strong)", v4);
      uint64_t v7 = 0;
      goto LABEL_12;
    }
LABEL_11:
    uint64_t v7 = 0;
    goto LABEL_12;
  }
  if (!_UIStateRestorationDebugLogEnabled()) {
    goto LABEL_11;
  }
  NSLog(&cfstr_SCouldnTCreate_0.isa, "UISceneSession *_decodeSceneSession(NSData *__strong, NSString *__strong)", v4);
  uint64_t v7 = 0;
LABEL_12:

  uint64_t v8 = (void *)v7;
LABEL_13:

  return v8;
}

void _queue_scheduleUpdateAndSaveForPersistedSceneSessions()
{
  if ((byte_1EB261FFB & 1) == 0)
  {
    qword_1EB262018 = [(id)UIApp _beginBackgroundTaskWithName:@"Persistent SceneSession Map Update" expirationHandler:&__block_literal_global_555_0];
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SScheduledBack.isa, "void _queue_scheduleUpdateAndSaveForPersistedSceneSessions(void)", qword_1EB262018);
    }
    dispatch_time_t v0 = dispatch_time(0, 500000000);
    id v1 = _persistenceQueue();
    dispatch_after(v0, v1, &__block_literal_global_565);

    byte_1EB261FFB = 1;
  }
}

id _restorationPath(void *a1)
{
  id v1 = _restorationDirectory(a1);
  id v2 = [v1 URLByAppendingPathComponent:@"data.data" isDirectory:0];

  return v2;
}

id _restorationDirectory(void *a1)
{
  id v1 = a1;
  id v2 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  id v3 = [v2 objectAtIndex:0];

  id v4 = [MEMORY[0x1E4F28CB8] defaultManager];
  objc_msgSend(v4, "_web_createDirectoryAtPathWithIntermediateDirectories:attributes:", v3, 0);

  id v5 = NSString;
  id v6 = _UIMainBundleIdentifier();
  uint64_t v7 = [v5 stringWithFormat:@"%@/%@/%@.%@", v3, @"Saved Application State", v6, @"savedState"];

  if (v1)
  {
    uint64_t v8 = [v7 stringByAppendingFormat:@"/%@", v1];

    uint64_t v7 = (void *)v8;
  }
  int v9 = [v7 stringByStandardizingPath];

  id v10 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v9 isDirectory:1];
  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SUrlForStateRe.isa, "NSURL *_restorationDirectory(NSString *__strong)", v10);
  }

  return v10;
}

uint64_t _UIStateRestorationDebugLogEnabled()
{
  if ((byte_1EB262D9A & 1) == 0)
  {
    byte_1EB262D9A = 1;
    byte_1EB262D9B = CFPreferencesGetAppBooleanValue(@"UIStateRestorationDebugLogging", (CFStringRef)*MEMORY[0x1E4F1D3D8], 0) != 0;
  }
  return byte_1EB262D9B;
}

void _UIControlMenuUpdateVisibleMenu(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if ([v5 _hasVisibleMenu])
  {
    if (v7)
    {
      v11[0] = 0;
      v11[1] = v11;
      _OWORD v11[2] = 0x2020000000;
      char v12 = 0;
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      v8[2] = ___UIControlMenuUpdateVisibleMenu_block_invoke;
      v8[3] = &unk_1E52EEC28;
      id v10 = v11;
      id v9 = v7;
      [v5 updateVisibleMenuWithBlock:v8];

      _Block_object_dispose(v11, 8);
    }
    else
    {
      [v5 dismissMenu];
    }
  }
}

void sub_1857591B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

char *_UIUpdateCurrentTiming()
{
  if (dword_1EB26218C) {
    return &_MergedGlobals_1183[24 * (dword_1EB262190 - 1) + 112];
  }
  else {
    return 0;
  }
}

void UIViewAlertForUnsatisfiableConstraints(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  char IsBeingDebugged = _UIKitProcessIsBeingDebugged();
  *(void *)&long long buf = MEMORY[0x1E4F143A8];
  *((void *)&buf + 1) = 3221225472;
  char v21 = ___UIConstraintBasedLayoutLogUnsatisfiableWithDefault_block_invoke;
  id v22 = &__block_descriptor_33_e5_v8__0l;
  char v23 = IsBeingDebugged;
  if (qword_1EB25A608 != -1) {
    dispatch_once(&qword_1EB25A608, &buf);
  }
  int v5 = byte_1EB25A5AD;
  if (qword_1EB25A628 != -1) {
    dispatch_once(&qword_1EB25A628, &__block_literal_global_80_1);
  }
  int v6 = byte_1EB25A5AF;
  if (byte_1EB25A5AF | v5)
  {
    if (qword_1EB25A5F8 != -1) {
      dispatch_once(&qword_1EB25A5F8, &__block_literal_global_66_1);
    }
    if (byte_1EB25A5AC) {
      [+[UIDevice currentDevice] _playSystemSound:1006];
    }
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v7 = [a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v16;
      while (2)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(a2);
          }
          uint64_t v11 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [v11 firstItem];
            if ((objc_opt_respondsToSelector() & 1) != 0
              && (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v11, "firstItem"), "_internalConstraints"), "containsObject:", v11) & 1) != 0)
            {
              char v12 = @"\n\t(Note: If you're seeing NSAutoresizingMaskLayoutConstraints that you don't understand, refer to the documentation for the UIView property translatesAutoresizingMaskIntoConstraints) ";
              goto LABEL_23;
            }
          }
        }
        uint64_t v8 = [a2 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v8) {
          continue;
        }
        break;
      }
      char v12 = &stru_1ED0E84C0;
    }
    else
    {
      char v12 = &stru_1ED0E84C0;
    }
LABEL_23:
    uint64_t v13 = objc_msgSend(NSString, "stringWithFormat:", @"Unable to simultaneously satisfy constraints.\n\tProbably at least one of the constraints in the following list is one you don't want. \n\tTry this: \n\t\t(1) look at each constraint and try to figure out which you don't expect; \n\t\t(2) find the code that added the unwanted constraint or constraints and fix it. %@\n%@\n\nWill attempt to recover by breaking constraint \n%@\n\nMake a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger.\nThe methods in the UIConstraintBasedLayoutDebugging category on UIView listed in <UIKitCore/UIView.h> may also be helpful.",
            v12,
            objc_msgSend((id)objc_msgSend(a2, "sortedArrayUsingFunction:context:", compareConstraintsAlphabetically, &__block_literal_global_378_0), "sortedArrayUsingFunction:context:", compareConstraintsAlphabetically, &__block_literal_global_380), a1);
    if (v6)
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CA00], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E4F1C3C8], v13, 0), "raise");
    }
    else if (v5)
    {
      uint64_t v14 = *(NSObject **)(__UILogGetCategoryCachedImpl("LayoutConstraints", &qword_1EB25A6B8) + 8);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v13;
        _os_log_impl(&dword_1853B0000, v14, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
      }
    }
  }
}

uint64_t _UIKitProcessIsBeingDebugged()
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v3 = 0u;
  long long v4 = 0u;
  memset(v2, 0, sizeof(v2));
  LODWORD(v3) = 0;
  *(void *)uint64_t v33 = 0xE00000001;
  int v34 = 1;
  pid_t v35 = getpid();
  size_t v1 = 648;
  sysctl(v33, 4u, v2, &v1, 0, 0);
  return (v3 >> 11) & 1;
}

void _UILoadDefaultSpringParameters()
{
  if (os_variant_has_internal_diagnostics() && (_UIViewDefaultSpringIgnoreUserDefaults & 1) == 0)
  {
    dispatch_time_t v0 = _UIKitUserDefaults();
    id v17 = [v0 objectForKey:@"DefaultSpringParameters"];

    if (v17)
    {
      size_t v1 = [v17 objectForKeyedSubscript:@"mass"];
      [v1 doubleValue];
      double v3 = v2;

      double v4 = 3.0;
      if (v3 > 0.0) {
        double v4 = v3;
      }
      _UIViewDefaultSpringMass = *(void *)&v4;
      long long v5 = [v17 objectForKeyedSubscript:@"stiffness"];
      [v5 doubleValue];
      double v7 = v6;

      double v8 = 1000.0;
      if (v7 > 0.0) {
        double v8 = v7;
      }
      _UIViewDefaultSpringStiffness = *(void *)&v8;
      long long v9 = [v17 objectForKeyedSubscript:@"damping"];
      [v9 doubleValue];
      double v11 = v10;

      double v12 = 500.0;
      if (v11 > 0.0) {
        double v12 = v11;
      }
      _UIViewDefaultSpringDamping = *(void *)&v12;
      long long v13 = [v17 objectForKeyedSubscript:@"duration"];
      [v13 doubleValue];
      double v15 = v14;

      double v16 = 0.5;
      if (v15 > 0.0) {
        double v16 = v15;
      }
      _UIViewDefaultSpringDuration = *(void *)&v16;
    }
  }
}

void _durationOfSpringAnimation(double a1, double a2, double a3, double a4)
{
  double v4 = sqrt(a1 * a2);
  double v5 = fmax(a3 / (v4 + v4), 0.0);
  if (fmin(v5, 1.0) != 0.0)
  {
    double v6 = sqrt(a2 / a1);
    if (v5 >= 1.0)
    {
      double v10 = v6 - a4;
      long double v11 = exp(-v6 / (v6 - a4));
      double v12 = -1.0 - log(fabs(v6 * v11 * 0.001 / v10));
      exp(sqrt(v12) * -0.0201);
    }
    else
    {
      double v7 = v6 * sqrt(1.0 - v5 * v5);
      double v8 = v6 * v5;
      double v9 = fabs((v8 - a4) / v7);
      if (v9 >= 0.00000011920929) {
        fmax(-log(0.001 / (v9 + 1.0)) / v8, 0.0);
      }
    }
  }
}

void parametersOfSpringAnimation(double *a1, double *a2, void *a3, double a4, double a5, double a6, double a7, double a8)
{
  v76[2] = *MEMORY[0x1E4F143B8];
  double v13 = fmax(a5, 0.00000011920929);
  if (v13 >= 1.0) {
    double v14 = 1.0;
  }
  else {
    double v14 = v13;
  }
  double v35 = v14;
  double v15 = fmin(fmax(a4, 0.01), 10.0);
  if (v13 < 1.0)
  {
    double v16 = v13 * v13;
    float v17 = 1.0 - v13 * v13;
    double v18 = sqrtf(v17);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __parametersOfSpringAnimation_block_invoke;
    aBlock[3] = &__block_descriptor_40_e8_d16__0d8l;
    *(double *)&void aBlock[4] = v18;
    long long v19 = _Block_copy(aBlock);
    v72[0] = MEMORY[0x1E4F143A8];
    v72[1] = 3221225472;
    v72[2] = __parametersOfSpringAnimation_block_invoke_2;
    v72[3] = &unk_1E53103C8;
    *(double *)&v73[1] = v13;
    *(double *)&v73[2] = a7;
    v73[0] = v19;
    id v25 = v19;
    long long v20 = _Block_copy(v72);
    double v21 = v13 * v15;
    v68[0] = MEMORY[0x1E4F143A8];
    v68[1] = 3221225472;
    v68[2] = __parametersOfSpringAnimation_block_invoke_3;
    v68[3] = &unk_1E53103C8;
    double v70 = a8;
    double v71 = v21;
    id v22 = v20;
    id v69 = v22;
    long long v26 = _Block_copy(v68);
    v61[0] = MEMORY[0x1E4F143A8];
    v61[1] = 3221225472;
    v61[2] = __parametersOfSpringAnimation_block_invoke_4;
    v61[3] = &unk_1E53103F0;
    id v62 = v22;
    double v63 = v21;
    double v64 = a7;
    double v65 = v21 * a7;
    double v66 = v16 * v15;
    double v67 = v18;
    id v23 = v22;
    long long v27 = _Block_copy(v61);

    long long v28 = (id *)v73;
  }
  else
  {
    v60[0] = MEMORY[0x1E4F143A8];
    v60[1] = 3221225472;
    v60[2] = __parametersOfSpringAnimation_block_invoke_5;
    v60[3] = &__block_descriptor_40_e8_d16__0d8l;
    *(double *)&v60[4] = a7;
    long long v24 = _Block_copy(v60);
    v58[0] = MEMORY[0x1E4F143A8];
    v58[1] = 3221225472;
    v58[2] = __parametersOfSpringAnimation_block_invoke_6;
    v58[3] = &unk_1E53103C8;
    v59[0] = v24;
    *(double *)&v59[1] = a8;
    *(double *)&v59[2] = v15;
    id v25 = v24;
    long long v26 = _Block_copy(v58);
    v57[0] = MEMORY[0x1E4F143A8];
    v57[1] = 3221225472;
    v57[2] = __parametersOfSpringAnimation_block_invoke_7;
    v57[3] = &__block_descriptor_56_e8_d16__0d8l;
    *(double *)&v57[4] = v15 * v15;
    *(double *)&v57[5] = a7;
    *(double *)&v57[6] = v15;
    long long v27 = _Block_copy(v57);
    long long v28 = (id *)v59;
  }

  uint64_t v53 = 0;
  id v54 = &v53;
  uint64_t v55 = 0x2020000000;
  uint64_t v56 = 0;
  uint64_t v49 = 0;
  double v50 = &v49;
  uint64_t v51 = 0x2020000000;
  uint64_t v52 = 0;
  uint64_t v45 = 0;
  __int16 v46 = (double *)&v45;
  uint64_t v47 = 0x2020000000;
  uint64_t v48 = 0;
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  v37[2] = __parametersOfSpringAnimation_block_invoke_8;
  v37[3] = &unk_1E5310438;
  __int16 v40 = &v45;
  double v43 = v15;
  double v44 = a8;
  id v29 = v26;
  id v38 = v29;
  id v30 = v27;
  id v39 = v30;
  uint64_t v41 = &v49;
  __int16 v42 = &v53;
  long long v31 = (void (**)(void *, uint64_t, double))_Block_copy(v37);
  if ((((uint64_t (*)(void *, uint64_t, double))v31[2])(v31, 12, 5.0) & 1) == 0) {
    v31[2](v31, 20, 1.0);
  }
  if (a3)
  {
    v75[0] = @"nanCount";
    long long v32 = [NSNumber numberWithUnsignedInteger:v50[3]];
    v75[1] = @"divergenceCount";
    v76[0] = v32;
    uint64_t v33 = [NSNumber numberWithUnsignedInteger:v54[3]];
    v76[1] = v33;
    *a3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v76 forKeys:v75 count:2];
  }
  if (a1) {
    *a1 = v46[3] * (v46[3] * a6);
  }
  if (a2)
  {
    double v34 = sqrt(v46[3] * (a6 * a6 * v46[3]));
    *a2 = v35 * (v34 + v34);
  }

  _Block_object_dispose(&v45, 8);
  _Block_object_dispose(&v49, 8);
  _Block_object_dispose(&v53, 8);
}

void sub_18575D28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t __parametersOfSpringAnimation_block_invoke_8(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  *(double *)(v3 + 24) = 1.0 / *(double *)(a1 + 72) * a3;
  if (a2)
  {
    unint64_t v6 = 0;
    BOOL v7 = 0;
    BOOL v8 = 0;
    double v9 = *(double *)(a1 + 80) * 100000.0;
    double v10 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    while (1)
    {
      double v11 = (*(double (**)(double))(*(void *)(a1 + 32) + 16))(v10);
      *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v10
                                                                  - v11
                                                                  / (*(double (**)(double))(*(void *)(a1 + 40) + 16))(*(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
      uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
      double v12 = *(double *)(v3 + 24);
      if (v6 >= 2 && vabdd_f64(v12, v10) <= *(double *)(a1 + 80)) {
        break;
      }
      BOOL v8 = v10 - v12 > v9;
      BOOL v7 = ++v6 >= a2;
      double v10 = *(double *)(v3 + 24);
      if (a2 == v6) {
        goto LABEL_6;
      }
    }
    if (v8)
    {
      double v13 = (void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
      LODWORD(v3) = 0;
      ++*v13;
    }
    else
    {
      LODWORD(v3) = 1;
    }
  }
  else
  {
LABEL_6:
    BOOL v7 = 1;
  }
  return (v7 | v3) & 1;
}

double __parametersOfSpringAnimation_block_invoke_4(uint64_t a1, double a2)
{
  double v4 = a2 * a2;
  double v5 = exp(-(*(double *)(a1 + 40) * a2));
  double v6 = (*(double (**)(double))(*(void *)(a1 + 32) + 16))(a2);
  double v7 = *(double *)(a1 + 48);
  double v8 = v4 * *(double *)(a1 + 64);
  if (v5 * v6 <= 0.0) {
    double v9 = v7 + *(double *)(a1 + 56) * a2 - v8;
  }
  else {
    double v9 = -(v7 + *(double *)(a1 + 56) * a2 - v8);
  }
  float v10 = *(double *)(a1 + 40) * a2;
  return v9 / (v4 * *(double *)(a1 + 72) * expf(v10));
}

double __parametersOfSpringAnimation_block_invoke_3(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 40);
  double v5 = exp(-(*(double *)(a1 + 48) * a2));
  return v4 - fabs(v5 * (*(double (**)(double))(*(void *)(a1 + 32) + 16))(a2));
}

double __parametersOfSpringAnimation_block_invoke_2(uint64_t a1, double a2)
{
  double v2 = *(double *)(a1 + 40) * a2 - *(double *)(a1 + 48);
  return v2 / (*(double (**)(void))(*(void *)(a1 + 32) + 16))();
}

double __parametersOfSpringAnimation_block_invoke(uint64_t a1, double a2)
{
  return *(double *)(a1 + 32) * a2;
}

double __parametersOfSpringAnimation_block_invoke_7(double *a1, double a2)
{
  double v2 = a1[4] * (a1[5] - a2);
  float v3 = a1[6] * a2;
  return v2 / expf(v3);
}

double __parametersOfSpringAnimation_block_invoke_6(uint64_t a1, double a2)
{
  double v4 = (*(double (**)(void))(*(void *)(a1 + 32) + 16))();
  double v5 = *(double *)(a1 + 48);
  if (v4 >= 0.0) {
    double v6 = *(double *)(a1 + 40);
  }
  else {
    double v6 = -*(double *)(a1 + 40);
  }
  double v7 = v4 * v5 + 1.0;
  float v8 = -(v5 * a2);
  return v7 * expf(v8) - v6;
}

double __parametersOfSpringAnimation_block_invoke_5(uint64_t a1, double a2)
{
  return a2 - *(double *)(a1 + 32);
}

void sub_18575D990(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _UIKitAppKeyColorAssetName()
{
  if (UIApp)
  {
    dispatch_time_t v0 = [*(id *)(UIApp + 232) keyColorAssetName];
  }
  else
  {
    dispatch_time_t v0 = 0;
  }
  return v0;
}

uint64_t sub_18575DC34@<X0>(SEL *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [self *a1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF448);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *a2 = result;
  return result;
}

uint64_t _UIUpdateLabelUsingTextConfiguration(void *a1, id *a2, void *a3)
{
  id v5 = a1;
  double v6 = a3;
  if (!a2)
  {
    double v11 = [MEMORY[0x1E4F28B00] currentHandler];
    double v12 = objc_msgSend(NSString, "stringWithUTF8String:", "_UIListTextPropertiesUpdateResult _UIUpdateLabelUsingTextConfiguration(UIView * _Nonnull __strong, UILabel * _Nullable __strong * _Nonnull, UIListContentTextProperties * _Nonnull __strong)");
    [v11 handleFailureInFunction:v12, @"UIListContentTextProperties_Internal.h", 90, @"Invalid parameter not satisfying: %@", @"labelPtr != NULL" file lineNumber description];
  }
  double v7 = (UILabel *)*a2;
  float v8 = v7;
  if (v6 && (v6[3] || v6[9]))
  {
    if (v7)
    {
      if ([(UIView *)v7 isHidden])
      {
        [(UIView *)v8 setHidden:0];
        uint64_t v9 = 2;
      }
      else
      {
        uint64_t v9 = 0;
      }
    }
    else
    {
      float v8 = objc_alloc_init(UILabel);
      objc_storeStrong(a2, v8);
      [v5 addSubview:v8];
      uint64_t v9 = 1;
    }
    -[UIListContentTextProperties _applyToLabel:]((uint64_t)v6, v8);
  }
  else if (v7 && ![(UIView *)v7 isHidden])
  {
    [(UIView *)v8 setHidden:1];
    uint64_t v9 = 2;
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t _UIApplicationIsMessagesExtension()
{
  if (qword_1EB25B600 != -1) {
    dispatch_once(&qword_1EB25B600, &__block_literal_global_1263);
  }
  return byte_1EB25B4E9;
}

void sub_18575E954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIUpdateButtonUsingButtonConfiguration(void *a1, id *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if (!a2)
  {
    double v11 = [MEMORY[0x1E4F28B00] currentHandler];
    double v12 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIUpdateButtonUsingButtonConfiguration(UIView * _Nonnull __strong, UIButton * _Nullable __strong * _Nonnull, UIContentUnavailableButtonProperties * _Nonnull __strong)");
    [v11 handleFailureInFunction:v12, @"UIContentUnavailableButtonProperties_Internal.h", 66, @"Invalid parameter not satisfying: %@", @"buttonPtr != NULL" file lineNumber description];
  }
  id v7 = *a2;
  if (-[UIContentUnavailableButtonProperties _hasButton]((uint64_t)v6))
  {
    if (v7)
    {
      if ([v7 isHidden])
      {
        [v7 setHidden:0];
        uint64_t v8 = 1;
      }
      else
      {
        uint64_t v8 = 0;
      }
    }
    else
    {
      uint64_t v8 = 1;
      id v7 = +[UIButton buttonWithType:1];
      objc_storeStrong(a2, v7);
    }
    id v9 = [v7 superview];

    if (v9 != v5) {
      [v5 addSubview:v7];
    }
    -[UIContentUnavailableButtonProperties _applyToButton:]((uint64_t)v6, v7);
  }
  else if (v7 && ([v7 isHidden] & 1) == 0)
  {
    uint64_t v8 = 1;
    [v7 setHidden:1];
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t _UIContentUnavailableUpdateLabelUsingTextConfiguration(void *a1, id *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if (!a2)
  {
    double v12 = [MEMORY[0x1E4F28B00] currentHandler];
    double v13 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIContentUnavailableUpdateLabelUsingTextConfiguration(UIView * _Nonnull __strong, UILabel * _Nullable __strong * _Nonnull, UIContentUnavailableTextProperties * _Nonnull __strong)");
    [v12 handleFailureInFunction:v13, @"UIContentUnavailableTextProperties_Internal.h", 71, @"Invalid parameter not satisfying: %@", @"labelPtr != NULL" file lineNumber description];
  }
  id v7 = (UILabel *)*a2;
  uint64_t v8 = v7;
  if (!v6 || !v6[2] && !v6[6])
  {
    if (v7 && ![(UIView *)v7 isHidden])
    {
      uint64_t v9 = 1;
      [(UIView *)v8 setHidden:1];
    }
    else
    {
      uint64_t v9 = 0;
    }
    goto LABEL_15;
  }
  if (v7)
  {
    if (![(UIView *)v7 isHidden])
    {
      uint64_t v9 = 0;
      goto LABEL_12;
    }
    [(UIView *)v8 setHidden:0];
  }
  else
  {
    uint64_t v8 = objc_alloc_init(UILabel);
    objc_storeStrong(a2, v8);
  }
  uint64_t v9 = 1;
LABEL_12:
  id v10 = [(UIView *)v8 superview];

  if (v10 != v5) {
    [v5 addSubview:v8];
  }
  -[UIContentUnavailableTextProperties _applyToLabel:]((uint64_t)v6, v8);
LABEL_15:

  return v9;
}

void sub_185761014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void std::default_delete<_UIItemSolveResult>::operator()[abi:nn180100](void **a1)
{
  double v2 = a1 + 11;
  std::vector<_UIAuxillarySolveResult>::__destroy_vector::operator()[abi:nn180100](&v2);
  double v2 = a1 + 8;
  std::vector<_UIAuxillarySolveResult>::__destroy_vector::operator()[abi:nn180100](&v2);
  JUMPOUT(0x18C107380);
}

uint64_t _sSo20UICollectionViewCellC5UIKitE20contentConfigurationAC09UIContentF0_pSgvs_0(uint64_t a1)
{
  sub_185761A3C(a1, (uint64_t)v11);
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255A78);
    if (swift_dynamicCast())
    {
      objc_msgSend(v1, sel_setContentConfiguration_, *(void *)(v9 + 16));
      swift_release();
      return sub_185761AA4(a1);
    }
  }
  else
  {
    sub_185761AA4((uint64_t)v11);
  }
  sub_185761A3C(a1, (uint64_t)&v9);
  if (v10)
  {
    sub_1854B1F20(&v9, (uint64_t)v11);
    sub_1854B1F38((uint64_t)v11, (uint64_t)&v9);
    id v3 = (objc_class *)type metadata accessor for _UICustomContentConfiguration();
    double v4 = (char *)objc_allocWithZone(v3);
    id v5 = &v4[OBJC_IVAR____TtC5UIKit29_UICustomContentConfiguration____lazy_storage___wrappedConfigurationIdentifier];
    *(void *)id v5 = 0;
    *((void *)v5 + 1) = 0;
    sub_1854B1F38((uint64_t)&v9, (uint64_t)&v4[OBJC_IVAR____TtC5UIKit29_UICustomContentConfiguration_wrappedConfiguration]);
    v8.receiver = v4;
    v8.super_class = v3;
    id v6 = objc_msgSendSuper2(&v8, sel_init);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v9);
    objc_msgSend(v1, sel_setContentConfiguration_, v6);

    sub_185761AA4(a1);
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v11);
  }
  sub_185761AA4((uint64_t)&v9);
  objc_msgSend(v1, sel_setContentConfiguration_, 0);
  return sub_185761AA4(a1);
}

uint64_t sub_185761A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255A98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_185761AA4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255A98);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for _UICustomContentConfiguration()
{
  return self;
}

void _UIButtonBarClearOwners(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v3);
        }
        long long v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        -[UIBarButtonItemGroup _relinquishOwnership:]((uint64_t)v9, v4);
        uint64_t v10 = [v9 representativeItem];
        [v10 _relinquishOwnership:v4];
        double v11 = -[UIBarButtonItemGroup _items]((id *)v9);
        _UIButtonBarClearOwnedItems(v11, v4);
      }
      uint64_t v6 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
}

void _UIButtonBarClearOwnedItems(void *a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v9 + 1) + 8 * v8++) _relinquishOwnership:v4];
      }
      while (v6 != v8);
      uint64_t v6 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

void _setTagForView(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 116);
    object = v3;
    if (a2)
    {
      *(void *)(v3 + 116) = v4 | 8;
      uint64_t v5 = [NSNumber numberWithInteger:a2];
      objc_setAssociatedObject(object, &_UIViewTagAssocObjectKey, v5, (void *)1);
    }
    else
    {
      *(void *)(v3 + 116) = v4 & 0xFFFFFFFFFFFFFFF7;
      objc_setAssociatedObject(v3, &_UIViewTagAssocObjectKey, 0, (void *)1);
    }
    id v3 = object;
  }
}

uint64_t _trackObjectWithIdentifier(uint64_t result)
{
  if (byte_1EB262D99 == 1)
  {
    uint64_t v1 = result;
    id v2 = (id)qword_1EB262DB8;
    if (!qword_1EB262DB8)
    {
      id v2 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      qword_1EB262DB8 = (uint64_t)v2;
    }
    return [v2 addObject:v1];
  }
  return result;
}

CFMutableDictionaryRef CFDictionaryCreateWithNonRetainedValuesFromNSDictionary(void *a1)
{
  if ([a1 count])
  {
    CFIndex v2 = objc_msgSend(a1, "count", xmmword_1ED0E7918, *(void *)algn_1ED0E7928, unk_1ED0E7930, qword_1ED0E7938);
    CFMutableDictionaryRef v3 = CFDictionaryCreateMutable(0, v2, MEMORY[0x1E4F1D530], &v6);
    [(__CFDictionary *)v3 setValuesForKeysWithDictionary:a1];
    return v3;
  }
  else
  {
    uint64_t v5 = (void *)[MEMORY[0x1E4F1C9E8] dictionary];
    return (CFMutableDictionaryRef)v5;
  }
}

id UIResourceBundleForNIBBeingDecodedWithCoder(void *a1)
{
  id v1 = a1;
  CFDictionaryRef v2 = UICoderToBundleMap();
  CFMutableDictionaryRef v3 = CFDictionaryGetValue(v2, v1);

  return v3;
}

void sub_1857662C8(_Unwind_Exception *a1)
{
}

void sub_1857662DC(void *a1)
{
  objc_begin_catch(a1);
  if (v1) {
    JUMPOUT(0x1857662A8);
  }
  JUMPOUT(0x18576629CLL);
}

void sub_18576BF38(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_18576E2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

id _pptLogHandle()
{
  if (qword_1EB264688 != -1) {
    dispatch_once(&qword_1EB264688, &__block_literal_global_596);
  }
  dispatch_time_t v0 = (void *)qword_1EB264680;
  return v0;
}

char *createBuffer(void *a1, size_t a2)
{
  CFMutableDictionaryRef v3 = (const char *)[a1 UTF8String];
  size_t v4 = strlen(v3);
  uint64_t v5 = (char *)malloc_type_calloc(a2, 1uLL, 0xD13336A4uLL);
  return strncpy(v5, v3, v4);
}

void sub_1857710F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

uint64_t _UIDeviceNativeUserInterfaceIdiomIgnoringClassic()
{
  dispatch_time_t v0 = (void *)MGCopyAnswer();
  int v1 = [v0 intValue];
  if (v0) {
    CFRelease(v0);
  }
  int v2 = v1 - 1;
  if (v1 - 1) < 7 && ((0x6Fu >> v2)) {
    return qword_186B97B90[v2];
  }
  CFMutableDictionaryRef v3 = [MEMORY[0x1E4F28B00] currentHandler];
  size_t v4 = [NSString stringWithUTF8String:"UIUserInterfaceIdiom _UIDeviceNativeUserInterfaceIdiomIgnoringClassic(void)"];
  [v3 handleFailureInFunction:v4 file:@"UIDevice.m" lineNumber:852 description:@"Device type is not associated with user interface idiom."];

  return -1;
}

void _UIApplicationEndLaunchBackgroundTask()
{
  os_unfair_lock_lock((os_unfair_lock_t)&_launchBackgroundTaskLock);
  _launchBackgroundTaskPeriodOver = 1;
  if (_launchBackgroundTaskIdentifier)
  {
    _UIApplicationEndBackgroundTask((const void *)_launchBackgroundTaskIdentifier);
    _launchBackgroundTaskIdentifier = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_launchBackgroundTaskLock);
}

void GetProcStatistics(uint64_t a1, int32x4_t *a2)
{
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x5B0], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  size_t v4 = (integer_t *)(a1 + 32);
  task_name_t v5 = task_self_trap();
  mach_msg_type_number_t task_info_outCnt = 8;
  task_info(v5, 6u, v4, &task_info_outCnt);
  mach_msg_type_number_t task_info_outCnt = 8;
  task_info(v5, 2u, (task_info_t)a1, &task_info_outCnt);
  uint64_t v38 = 0;
  *(_OWORD *)thread_info_out = 0u;
  long long v37 = 0u;
  thread_act_array_t act_list = 0;
  mach_msg_type_number_t act_listCnt = 0;
  if (task_threads(v5, &act_list, &act_listCnt)) {
    NSLog(&cfstr_ErrorReturnedB.isa);
  }
  uint64_t v30 = 0;
  long long v31 = &v30;
  uint64_t v32 = 0x2020000000;
  int v33 = 0;
  if ([MEMORY[0x1E4F29060] isMainThread])
  {
    *((_DWORD *)v31 + 6) = MEMORY[0x18C107F90]();
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __GetProcStatistics_block_invoke;
    block[3] = &unk_1E52D9900;
    void block[4] = &v30;
    dispatch_sync(MEMORY[0x1E4F14428], block);
  }
  if (act_listCnt)
  {
    for (unint64_t i = 0; i < act_listCnt; ++i)
    {
      mach_msg_type_number_t task_info_outCnt = 10;
      if (!thread_info(act_list[i], 3u, thread_info_out, &task_info_outCnt))
      {
        integer_t v8 = thread_info_out[0];
        integer_t v7 = thread_info_out[1];
        int v9 = *(_DWORD *)(a1 + 56) + thread_info_out[1];
        int v10 = *(_DWORD *)(a1 + 52) + thread_info_out[0];
        *(_DWORD *)(a1 + 52) = v10;
        *(_DWORD *)(a1 + 56) = v9;
        if (v9 > 999999)
        {
          *(_DWORD *)(a1 + 52) = v10 + 1;
          *(_DWORD *)(a1 + 56) = v9 - 1000000;
        }
        integer_t v12 = thread_info_out[2];
        integer_t v11 = thread_info_out[3];
        int v13 = *(_DWORD *)(a1 + 64) + thread_info_out[3];
        int v14 = *(_DWORD *)(a1 + 60) + thread_info_out[2];
        *(_DWORD *)(a1 + 60) = v14;
        *(_DWORD *)(a1 + 64) = v13;
        if (v13 > 999999)
        {
          *(_DWORD *)(a1 + 60) = v14 + 1;
          *(_DWORD *)(a1 + 64) = v13 - 1000000;
        }
        if (act_list[i] == *((_DWORD *)v31 + 6))
        {
          int v15 = *(_DWORD *)(a1 + 76) + v7;
          int v16 = *(_DWORD *)(a1 + 72) + v8;
          *(_DWORD *)(a1 + 72) = v16;
          *(_DWORD *)(a1 + 76) = v15;
          if (v15 > 999999)
          {
            *(_DWORD *)(a1 + 72) = v16 + 1;
            *(_DWORD *)(a1 + 76) = v15 - 1000000;
          }
          int v17 = *(_DWORD *)(a1 + 84) + v11;
          int v18 = *(_DWORD *)(a1 + 80) + v12;
          *(_DWORD *)(a1 + 80) = v18;
          *(_DWORD *)(a1 + 84) = v17;
          if (v17 > 999999)
          {
            *(_DWORD *)(a1 + 80) = v18 + 1;
            *(_DWORD *)(a1 + 84) = v17 - 1000000;
          }
        }
      }
    }
    uint64_t v19 = 8 * act_listCnt;
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (MEMORY[0x18C109740](*MEMORY[0x1E4F14960], act_list, v19)) {
    NSLog(&cfstr_ErrorReturnedB_0.isa);
  }
  if (a2)
  {
    int32x4_t v20 = vsubq_s32(*(int32x4_t *)(a1 + 16), a2[1]);
    *(int32x4_t *)a1 = vsubq_s32(*(int32x4_t *)a1, *a2);
    *(int32x4_t *)(a1 + 16) = v20;
    int v21 = *(_DWORD *)(a1 + 52);
    int v22 = *(_DWORD *)(a1 + 56) - a2[3].i32[2];
    *(_DWORD *)(a1 + 56) = v22;
    if (v22 < 0)
    {
      *(_DWORD *)(a1 + 52) = --v21;
      *(_DWORD *)(a1 + 56) = v22 + 1000000;
    }
    *(_DWORD *)(a1 + 52) = v21 - a2[3].i32[1];
    int v23 = *(_DWORD *)(a1 + 60);
    int v24 = *(_DWORD *)(a1 + 64) - a2[4].i32[0];
    *(_DWORD *)(a1 + 64) = v24;
    if (v24 < 0)
    {
      *(_DWORD *)(a1 + 60) = --v23;
      *(_DWORD *)(a1 + 64) = v24 + 1000000;
    }
    *(_DWORD *)(a1 + 60) = v23 - a2[3].i32[3];
    int v25 = *(_DWORD *)(a1 + 72);
    int v26 = *(_DWORD *)(a1 + 76) - a2[4].i32[3];
    *(_DWORD *)(a1 + 76) = v26;
    if (v26 < 0)
    {
      *(_DWORD *)(a1 + 72) = --v25;
      *(_DWORD *)(a1 + 76) = v26 + 1000000;
    }
    *(_DWORD *)(a1 + 72) = v25 - a2[4].i32[2];
    int v27 = *(_DWORD *)(a1 + 80);
    int v28 = *(_DWORD *)(a1 + 84) - a2[5].i32[1];
    *(_DWORD *)(a1 + 84) = v28;
    if (v28 < 0)
    {
      *(_DWORD *)(a1 + 80) = --v27;
      *(_DWORD *)(a1 + 84) = v28 + 1000000;
    }
    *(_DWORD *)(a1 + 80) = v27 - a2[5].i32[0];
  }
  _Block_object_dispose(&v30, 8);
}

void sub_18577253C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185773224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UITabBarDefaultMaxItemsForTraitCollection(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 userInterfaceIdiom];
  if (v2 == -1)
  {
    CFMutableDictionaryRef v3 = +[UIDevice currentDevice];
    uint64_t v2 = [v3 userInterfaceIdiom];
  }
  uint64_t v4 = [v1 horizontalSizeClass];
  switch(v2)
  {
    case 2:
      goto LABEL_6;
    case 3:
      goto LABEL_12;
    case 8:
LABEL_6:
      uint64_t v5 = 7;
      goto LABEL_17;
  }
  if (v4 == 1) {
    goto LABEL_12;
  }
  if (v4)
  {
    if (qword_1EB25E600 == -1) {
      goto LABEL_14;
    }
    goto LABEL_18;
  }
  if (v2 != 1)
  {
LABEL_12:
    uint64_t v5 = 5;
    goto LABEL_17;
  }
  if (qword_1EB25E600 != -1) {
LABEL_18:
  }
    dispatch_once(&qword_1EB25E600, &__block_literal_global_130);
LABEL_14:
  if (_MergedGlobals_43) {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v5 = 8;
  }
LABEL_17:

  return v5;
}

NSString *__cdecl NSStringFromUIEdgeInsets(UIEdgeInsets insets)
{
  id v1 = (__CFString *)CFStringCreateWithFormat(0, 0, @"{%.*g, %.*g, %.*g, %.*g}", 17, *(void *)&insets.top, 17, *(void *)&insets.left, 17, *(void *)&insets.bottom, 17, *(void *)&insets.right);
  return (NSString *)v1;
}

void sub_18577AC88(void *a1, int a2)
{
  objc_end_catch();
  if (a2 == 1)
  {
    id v4 = objc_begin_catch(a1);
    NSLog(&cfstr_ExceptionOccur_2.isa, v4);
    byte_1EB25B505 = 0;
    [v4 raise];

    objc_end_catch();
    JUMPOUT(0x18577AB8CLL);
  }
  JUMPOUT(0x18577ADC4);
}

void sub_18577ACA0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a2 == 1)
  {
    id v38 = objc_begin_catch(exc_buf);
    id v39 = *(NSObject **)(__UILogGetCategoryCachedImpl("ApplicationStateRestoration", &qword_1EB25B8B8) + 8);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v37 - 240) = 138543362;
      *(void *)(v36 + 4) = v38;
      _os_log_impl(&dword_1853B0000, v39, OS_LOG_TYPE_ERROR, "Exception occurred reading archived restorable state: %{public}@", (uint8_t *)(v37 - 240), 0xCu);
    }

    objc_end_catch();
    JUMPOUT(0x18577ABA4);
  }
  _Unwind_Resume(exc_buf);
}

void sub_18577ADBC()
{
}

void sub_18577BA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _HandleNewDeviceMotion(double *a1, void *a2)
{
  id v4 = -[_UIMotionEffectAttitudeEvent initWithTimestamp:attitude:]([_UIMotionEffectAttitudeEvent alloc], "initWithTimestamp:attitude:", a1[11], a1[1], a1[2], a1[3], *a1);
  CFMutableDictionaryRef v3 = [a2 consumer];
  [v3 updateWithEvent:v4];
}

double _RelativeQuaternionFromReference(float32x4_t a1, float32_t a2, float32_t a3, int32x2_t a4, float32x4_t a5, float32_t a6, float a7, float a8)
{
  a5.f32[1] = a6;
  a5.i64[1] = __PAIR64__(LODWORD(a8), LODWORD(a7));
  float32x4_t v8 = vmulq_f32(a5, a5);
  v8.i64[0] = vpaddq_f32(v8, v8).u64[0];
  float32x4_t v9 = (float32x4_t)veorq_s8((int8x16_t)vmulq_n_f32(a5, 1.0 / vpadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32).f32[0]), (int8x16_t)xmmword_186B9B120);
  float32x4_t v10 = a1;
  v10.i32[1] = a4.i32[0];
  *(float32_t *)&a4.i32[1] = a2;
  float32x4_t v11 = (float32x4_t)vdupq_lane_s32(a4, 0);
  v11.f32[1] = a2;
  v10.f32[2] = a3;
  int32x4_t v12 = (int32x4_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL);
  v10.i32[3] = a1.i32[0];
  float32x4_t v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp2q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 4uLL);
  float32x4_t v14 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL);
  float32x4_t v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
  v9.i32[1] = v9.i32[3];
  float32x4_t v16 = vmulq_f32(v11, v9);
  float32x4_t v17 = vmulq_f32(v10, v13);
  float32x4_t v18 = (float32x4_t)vuzp2q_s32(v12, vdupq_lane_s32(a4, 1));
  float32x4_t v19 = vmulq_f32(v18, v14);
  float32x4_t v20 = vaddq_f32(vaddq_f32(v16, v17), v19);
  v20.i32[3] = vsubq_f32(vsubq_f32(v16, v17), v19).i32[3];
  *(void *)&double result = vsubq_f32(v20, vmulq_f32((float32x4_t)vrev64q_s32(vuzp1q_s32((int32x4_t)v18, vzip1q_s32((int32x4_t)v18, (int32x4_t)v18))), v15)).u64[0];
  return result;
}

void _AssertPointComponentsArePositive(double a1, double a2)
{
  if (a1 < 0.0 || a2 < 0.0)
  {
    id v4 = [MEMORY[0x1E4F28B00] currentHandler];
    CFMutableDictionaryRef v3 = [NSString stringWithUTF8String:"void _AssertPointComponentsArePositive(CGPoint)"];
    [v4 handleFailureInFunction:v3 file:@"UIMotionEffect.m" lineNumber:445 description:@"point must be non-negative"];
  }
}

_UIMotionEffectEngineClient *_lazyMapClientForEffectAndView(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = [[_UIMotionEffectEngineClient alloc] initWithMotionEffect:v4 view:v3];

  return v5;
}

void unregisterObjectFromMapOfHashTables(void *a1, void *a2, void *a3)
{
  id v9 = a1;
  id v5 = a2;
  id v6 = a3;
  integer_t v7 = [v9 objectForKey:v5];
  float32x4_t v8 = v7;
  if (v7)
  {
    [v7 removeObject:v6];
    if (![v8 count]) {
      [v9 removeObjectForKey:v5];
    }
  }
}

void _applyTransitionAnimationToView(void *a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (+[UIView _isInAnimationBlock]
    && !+[UIView _isInRetargetableAnimationBlock])
  {
    float32x4_t v8 = [v5 layer];
    id v9 = [v8 animationForKey:v6];

    float32x4_t v10 = +[_UIViewKeyValueAnimationFactory animationsTransitioningFromAnimation:v9 toAnimation:v7 onView:v5];
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v11 = [v10 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v18;
      do
      {
        uint64_t v14 = 0;
        do
        {
          if (*(void *)v18 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void *)(*((void *)&v17 + 1) + 8 * v14);
          float32x4_t v16 = [v5 layer];
          [v16 addAnimation:v15 forKey:0];

          ++v14;
        }
        while (v12 != v14);
        uint64_t v12 = [v10 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v12);
    }
  }
}

void registerObjectInMapOfHashTables(void *a1, void *a2, void *a3)
{
  id v8 = a1;
  id v5 = a2;
  id v6 = a3;
  id v7 = [v8 objectForKey:v5];
  if (!v7)
  {
    id v7 = [MEMORY[0x1E4F28D30] weakObjectsHashTable];
    [v8 setObject:v7 forKey:v5];
  }
  [v7 addObject:v6];
}

void sub_1857819BC(_Unwind_Exception *a1)
{
}

void sub_185782524(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 160));
  _Unwind_Resume(a1);
}

id _UIImageVariantName(void *a1, uint64_t a2)
{
  id v3 = a1;
  if ((unint64_t)[v3 length] < 6)
  {
    unsigned int v4 = 0;
    if (a2) {
      goto LABEL_27;
    }
LABEL_36:
    id v24 = v3;
    goto LABEL_43;
  }
  unsigned int v4 = _UIImageVariantValueForName(v3);
  id v5 = v3;
  id v3 = v5;
  if ((unint64_t)[v5 length] >= 6)
  {
    int v26 = v5;
    unsigned int v27 = v4;
    id v6 = [v5 componentsSeparatedByString:@"."];
    id v7 = objc_opt_new();
    uint64_t v8 = [v6 count];
    if (v8 - 1 >= 1)
    {
      uint64_t v9 = v8;
      char v10 = 0;
      char v11 = 0;
      char v12 = 0;
      do
      {
        uint64_t v13 = [v6 objectAtIndexedSubscript:--v9];
        uint64_t v14 = v13;
        if ((v10 & 1) == 0
          && (([v13 isEqualToString:@"circle"] & 1) != 0
           || ([v14 isEqualToString:@"square"] & 1) != 0
           || ([v14 isEqualToString:@"rectangle"] & 1) != 0))
        {
          char v10 = 1;
        }
        else if ((v12 & 1) != 0 || ([v14 isEqualToString:@"fill"] & 1) == 0)
        {
          if (v11)
          {
            char v11 = 1;
            goto LABEL_19;
          }
          if (![v14 isEqualToString:@"slash"])
          {
            char v11 = 0;
            goto LABEL_19;
          }
          char v11 = 1;
        }
        else
        {
          char v12 = 1;
        }
        uint64_t v15 = [NSNumber numberWithInteger:v9];
        [v7 addObject:v15];

LABEL_19:
      }
      while (v9 > 1);
    }
    id v5 = v26;
    unsigned int v4 = v27;
    id v3 = v26;
    if ([v7 count])
    {
      float32x4_t v16 = (void *)[v6 mutableCopy];
      if ([v7 count])
      {
        unint64_t v17 = 0;
        do
        {
          long long v18 = [v7 objectAtIndexedSubscript:v17];
          objc_msgSend(v16, "removeObjectAtIndex:", objc_msgSend(v18, "integerValue"));

          ++v17;
        }
        while (v17 < [v7 count]);
      }
      id v3 = [v16 componentsJoinedByString:@"."];
    }
  }

  if (!a2) {
    goto LABEL_36;
  }
LABEL_27:
  unsigned int v19 = v4 & 0xFFFFFFF1;
  if ((a2 & 0xE) == 0) {
    unsigned int v19 = v4;
  }
  int v20 = v19 | a2;
  int v21 = (void *)[v3 mutableCopy];
  uint64_t v22 = v21;
  if ((v20 & 0x10000) != 0) {
    [v21 appendString:@".slash"];
  }
  if ((v20 & 2) != 0)
  {
    int v23 = @".circle";
    goto LABEL_39;
  }
  if ((v20 & 4) != 0)
  {
    int v23 = @".square";
    goto LABEL_39;
  }
  if ((v20 & 8) != 0)
  {
    int v23 = @".rectangle";
LABEL_39:
    [v22 appendString:v23];
  }
  if ((v20 & 0x40000000) != 0) {
    [v22 appendString:@".fill"];
  }
  id v24 = (id)[v22 copy];

LABEL_43:
  return v24;
}

uint64_t _UIImageVariantValueForName(void *a1)
{
  id v1 = a1;
  if ((unint64_t)[v1 length] < 6)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v2 = [v1 componentsSeparatedByString:@"."];
    uint64_t v3 = [v2 count];
    if (v3 - 1 >= 1)
    {
      uint64_t v4 = v3;
      uint64_t v5 = 0;
      char v6 = 0;
      char v7 = 0;
      char v8 = 0;
      while (1)
      {
        uint64_t v9 = [v2 objectAtIndexedSubscript:--v4];
        char v10 = v9;
        if (v8) {
          break;
        }
        if ([v9 isEqualToString:@"circle"])
        {
          v5 |= 2uLL;
        }
        else if ([v10 isEqualToString:@"square"])
        {
          v5 |= 4uLL;
        }
        else
        {
          if (![v10 isEqualToString:@"rectangle"]) {
            break;
          }
          v5 |= 8uLL;
        }
        char v8 = 1;
LABEL_20:

        if (v4 <= 1) {
          goto LABEL_24;
        }
      }
      if ((v7 & 1) != 0 || ![v10 isEqualToString:@"fill"])
      {
        if (v6)
        {
          char v6 = 1;
        }
        else
        {
          int v11 = [v10 isEqualToString:@"slash"];
          char v6 = v11;
          if (v11) {
            v5 |= 0x10000uLL;
          }
        }
      }
      else
      {
        v5 |= 0x40000000uLL;
        char v7 = 1;
      }
      goto LABEL_20;
    }
    uint64_t v5 = 0;
LABEL_24:
  }
  return v5;
}

void __swiftcall UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonItem *__return_ptr retstr, UIBarButtonSystemItem systemItem, UIAction_optional *primaryAction, UIMenu_optional *menu)
{
}

uint64_t _UIAncestorViewControllerIsInAnimatedTransition(void *a1)
{
  uint64_t result = (uint64_t)(id)[a1 _viewControllerForAncestor];
  if (result)
  {
    uint64_t v2 = (void *)result;
    if ([(id)result isInAnimatedVCTransition])
    {
      return 1;
    }
    else
    {
      uint64_t v3 = [v2 _existingView];
      uint64_t v4 = _UIAncestorViewControllerIsInAnimatedTransition([v3 superview]);

      return v4;
    }
  }
  return result;
}

CGColorSpaceRef __ExtendedSRGBColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DBE8]);
  qword_1EB25E418 = (uint64_t)result;
  return result;
}

CGColorSpaceRef __ExtendedSRGBColorSpace_block_invoke_0()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DBE8]);
  _MergedGlobals_3_15 = (uint64_t)result;
  return result;
}

void sub_185787940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_185787BFC()
{
  uint64_t v1 = OBJC_IVAR____TtC5UIKit29_UIDismissInteractionSettings_edgePan;
  type metadata accessor for _UIDismissInteractionSubInteractionSettings();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v3 = objc_allocWithZone(ObjCClassFromMetadata);
  uint64_t v4 = v0;
  *(void *)&v0[v1] = objc_msgSend(v3, sel_init);
  uint64_t v5 = OBJC_IVAR____TtC5UIKit29_UIDismissInteractionSettings_scroll;
  *(void *)&v4[v5] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  uint64_t v6 = OBJC_IVAR____TtC5UIKit29_UIDismissInteractionSettings_swipeDown;
  *(void *)&v4[v6] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  uint64_t v7 = OBJC_IVAR____TtC5UIKit29_UIDismissInteractionSettings_pinch;
  *(void *)&v4[v7] = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  v4[OBJC_IVAR____TtC5UIKit29_UIDismissInteractionSettings_showDebugUI] = 0;

  v9.receiver = v4;
  v9.super_class = (Class)type metadata accessor for _UIDismissInteractionSettings();
  return objc_msgSendSuper2(&v9, sel_initWithDefaultValues);
}

id sub_185787D08()
{
  uint64_t v1 = OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_updateSpring;
  id v2 = objc_allocWithZone((Class)UIViewSpringAnimationBehaviorSettings);
  id v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);
  *(void *)&v3[OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_effectiveDistanceFactor] = 0x3FE3333333333333;
  *(void *)&v3[OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_dismissThreshold] = 0x4069000000000000;
  *(void *)&v3[OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_scaleDismissThreshold] = 0x3FE0000000000000;
  *(void *)&v3[OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_hysteresisPadding] = 0x402E000000000000;
  *(void *)&v3[OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_coneOfInfluenceLeftAngle] = 0x4036800000000000;
  *(void *)&v3[OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_coneOfInfluenceRightAngle] = 0x4036800000000000;
  *(void *)&v3[OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_minScale] = 0x3FE4CCCCCCCCCCCDLL;
  *(void *)&v3[OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_scaleStretchinessLowerBound] = 0xBFB999999999999ALL;
  *(void *)&v3[OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_scaleStretchinessUpperBound] = 0x3FE8000000000000;

  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for _UIDismissInteractionSubInteractionSettings();
  return objc_msgSendSuper2(&v5, sel_initWithDefaultValues);
}

id sub_185787E70()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for _UIDismissInteractionSubInteractionSettings();
  objc_msgSendSuper2(&v3, sel_setDefaultValues);
  uint64_t v1 = OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_updateSpring;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_updateSpring], sel_setDampingRatio_, 1.0);
  objc_msgSend(*(id *)&v0[v1], sel_setResponse_, 0.2);
  objc_msgSend(*(id *)&v0[v1], sel_setTrackingDampingRatio_, 0.85);
  objc_msgSend(*(id *)&v0[v1], sel_setTrackingResponse_, 0.08);
  return objc_msgSend(*(id *)&v0[v1], sel_setSmoothingAndProjectionEnabled_, 0);
}

uint64_t type metadata accessor for _UIDismissInteractionSubInteractionSettings()
{
  return self;
}

void sub_18578A5C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t ___commonInit_block_invoke_131(void *a1)
{
  uint64_t v2 = [[_UISEBackProjectEdgesFailGestureFeature alloc] initWithSettings:a1[4]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  objc_super v5 = (void *)a1[5];
  uint64_t v6 = *(void *)(*(void *)(a1[6] + 8) + 40);
  return [v5 addObject:v6];
}

uint64_t ___commonInit_block_invoke_140(uint64_t a1)
{
  _OWORD v10[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [_UISEHybridEdgesFailGestureFeature alloc];
  uint64_t v3 = [[_UISEBackProjectEdgesFailGestureFeature alloc] initWithSettings:*(void *)(a1 + 32)];
  v10[0] = v3;
  uint64_t v4 = [[_UISEFirmwareEdgesFailGestureFeature alloc] initWithSettings:*(void *)(a1 + 32)];
  v10[1] = v4;
  objc_super v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:2];
  uint64_t v6 = [(_UISEHybridEdgesFailGestureFeature *)v2 initWithSubfeatures:v5];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  char v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  return [*(id *)(a1 + 40) addObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
}

uint64_t ___commonInit_block_invoke_2_133(uint64_t a1)
{
  _OWORD v11[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [_UISEPerTypeEdgesFailGestureFeature alloc];
  v10[0] = &unk_1ED3F4398;
  uint64_t v3 = [[_UISEFirmwareEdgesFailGestureFeature alloc] initWithSettings:*(void *)(a1 + 32)];
  v10[1] = &unk_1ED3F43B0;
  v11[0] = v3;
  uint64_t v4 = [[_UISEBackProjectEdgesFailGestureFeature alloc] initWithSettings:*(void *)(a1 + 32)];
  v11[1] = v4;
  objc_super v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:2];
  uint64_t v6 = [(_UISEPerTypeEdgesFailGestureFeature *)v2 initWithEdgeTypeSubfeatures:v5];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  char v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  return [*(id *)(a1 + 40) addObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
}

BOOL UIAccessibilityIsVideoAutoplayEnabled(void)
{
  return _AXSReduceMotionAutoplayVideoPreviewsEnabled() != 0;
}

void __sendSystemGestureLatentClientUpdate(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  char v8 = (void *)MEMORY[0x1E4F1CA80];
  objc_super v9 = [a1 _windowsAwaitingLatentSystemGestureNotificationDeliveredToEventWindow:a2];
  __int16 v40 = [v8 setWithSet:v9];

  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  char v10 = [a1 allTouches];
  uint64_t v11 = [v10 countByEnumeratingWithState:&v45 objects:v60 count:16];
  id v39 = v6;
  if (v11)
  {
    uint64_t v13 = v11;
    uint64_t v14 = *(void *)v46;
    *(void *)&long long v12 = 138412546;
    long long v38 = v12;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v46 != v14) {
          objc_enumerationMutation(v10);
        }
        float32x4_t v16 = *(void **)(*((void *)&v45 + 1) + 8 * v15);
        if (v16) {
          unint64_t v17 = (void *)v16[45];
        }
        else {
          unint64_t v17 = 0;
        }
        id v18 = v17;

        if (v18 == v6)
        {
          unsigned int v19 = [v16 window];
          if (v19)
          {
            [v40 addObject:v19];
          }
          else
          {
            int v20 = *(NSObject **)(__UILogGetCategoryCachedImpl("SystemGestureUpdate", &qword_1EB262CF8) + 8);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              int v21 = v20;
              if (v16) {
                uint64_t v22 = (void *)v16[45];
              }
              else {
                uint64_t v22 = 0;
              }
              id v23 = v22;
              *(_DWORD *)long long buf = v38;
              id v50 = v23;
              __int16 v51 = 2112;
              uint64_t v52 = v16;
              _os_log_impl(&dword_1853B0000, v21, OS_LOG_TYPE_ERROR, "Unexpected nil window in latent system gesture client update: windowServerHitTestWindow: %@, touch: %@", buf, 0x16u);

              id v6 = v39;
            }
          }
        }
        ++v15;
      }
      while (v13 != v15);
      uint64_t v24 = [v10 countByEnumeratingWithState:&v45 objects:v60 count:16];
      uint64_t v13 = v24;
    }
    while (v24);
  }

  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v25 = v40;
  uint64_t v26 = [v25 countByEnumeratingWithState:&v41 objects:v59 count:16];
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)v42;
    do
    {
      for (uint64_t i = 0; i != v27; ++i)
      {
        if (*(void *)v42 != v28) {
          objc_enumerationMutation(v25);
        }
        objc_msgSend(*(id *)(*((void *)&v41 + 1) + 8 * i), "_setSystemGestureRecognitionIsPossible:andTouchesAreCancelled:", a3, a4, v38);
      }
      uint64_t v27 = [v25 countByEnumeratingWithState:&v41 objects:v59 count:16];
    }
    while (v27);
  }

  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("SystemGestureUpdate", &qword_1EB262D00);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    long long v31 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = v31;
      int v33 = objc_opt_class();
      id v34 = v33;
      uint64_t v35 = [v25 count];
      uint64_t v36 = @"NO";
      *(_DWORD *)long long buf = 138413314;
      id v50 = v33;
      __int16 v51 = 2048;
      if (a3) {
        uint64_t v37 = @"YES";
      }
      else {
        uint64_t v37 = @"NO";
      }
      uint64_t v52 = v39;
      if (a4) {
        uint64_t v36 = @"YES";
      }
      __int16 v53 = 2048;
      uint64_t v54 = v35;
      __int16 v55 = 2112;
      uint64_t v56 = v37;
      __int16 v57 = 2112;
      id v58 = v36;
      _os_log_impl(&dword_1853B0000, v32, OS_LOG_TYPE_ERROR, "SystemGestureLatentClientUpdate received: eventWindow: <%@: %p>; windowsNeedingSystemGestureUpdate.count: %lu; s"
        "ystemGesturePossible: %@; touchesCancelled: %@",
        buf,
        0x34u);
    }
  }
  kdebug_trace();
}

void __updateSystemGestureRecognitionIsPossible(void *a1, id a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v8 = a1;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v19;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v18 + 1) + 8 * v12);
        if (v13) {
          uint64_t v14 = (void *)v13[45];
        }
        else {
          uint64_t v14 = 0;
        }
        id v15 = v14;

        if (v15 == a2)
        {
          float32x4_t v16 = objc_msgSend(v13, "window", (void)v18);
          [v16 _setSystemGestureRecognitionIsPossible:a3 andTouchesAreCancelled:a4];
        }
        ++v12;
      }
      while (v10 != v12);
      uint64_t v17 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
      uint64_t v10 = v17;
    }
    while (v17);
  }
}

uint64_t EdgeForAttribute(uint64_t result)
{
  switch((int)result)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      return result;
    case 5:
      if ([(id)UIApp userInterfaceLayoutDirection]) {
        CGColorSpaceRef result = 2;
      }
      else {
        CGColorSpaceRef result = 1;
      }
      break;
    case 6:
      if ([(id)UIApp userInterfaceLayoutDirection]) {
        CGColorSpaceRef result = 1;
      }
      else {
        CGColorSpaceRef result = 2;
      }
      break;
    case 11:
    case 12:
      CGColorSpaceRef result = 5;
      break;
    default:
      CGColorSpaceRef result = 0;
      break;
  }
  return result;
}

void _UIViewBaselineSpacing(void *a1, void *a2, int a3)
{
  int v6 = [a2 _hasFontInfoForVerticalBaselineSpacing];
  uint64_t v7 = (void *)[a1 _fontInfoForBaselineSpacing];
  id v8 = v7;
  if (v6)
  {
    uint64_t v9 = [a2 _fontInfoForBaselineSpacing];
    if (a3 == 6) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = (void *)v9;
    }
    if (a3 == 6) {
      uint64_t v11 = (void *)v9;
    }
    else {
      uint64_t v11 = v8;
    }
    _UIViewBaselineToBaselineSpacing(v10, v11);
  }
  else
  {
    _UIViewBaselineToEdgeSpacing(v7, a3);
  }
  UICeilToViewScale(a1);
}

void _UIViewBaselineToEdgeSpacing(void *a1, int a2)
{
  if (a1) {
    BOOL v4 = (a2 - 5) >= 2;
  }
  else {
    BOOL v4 = 1;
  }
  char v5 = !v4;
  if (os_variant_has_internal_diagnostics())
  {
    if (v5)
    {
LABEL_9:
      [a1 lineHeight];
      [a1 lineHeight];
      if (a2 != 5)
      {
        [a1 capHeight];
        [a1 descender];
      }
      return;
    }
    int v6 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "UIKit problem: invalid arguments for internal layout spacing function.", buf, 2u);
    }
  }
  else
  {
    if (v5) {
      goto LABEL_9;
    }
    uint64_t v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UIViewBaselineToEdgeSpacing___s_category) + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "UIKit problem: invalid arguments for internal layout spacing function.", v8, 2u);
    }
  }
}

void _UITextCanvasDrawWithFadedEdgesInContext(CGContext *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  uint64_t v24 = a2;
  v30.origin.CGFloat x = a7;
  v30.origin.CGFloat y = a8;
  v30.size.CGFloat width = a9;
  v30.size.CGFloat height = a10;
  if (CGRectIsNull(v30))
  {
    BOOL v19 = 0;
    BOOL v20 = 0;
  }
  else
  {
    v31.origin.CGFloat x = a3;
    v31.origin.CGFloat y = a4;
    v31.size.CGFloat width = a5;
    v31.size.CGFloat height = a6;
    CGFloat rect = a6;
    double MinX = CGRectGetMinX(v31);
    v32.origin.CGFloat x = a7;
    v32.origin.CGFloat y = a8;
    v32.size.CGFloat width = a9;
    v32.size.CGFloat height = a10;
    BOOL v19 = MinX < CGRectGetMinX(v32);
    v33.origin.CGFloat x = a3;
    v33.origin.CGFloat y = a4;
    v33.size.CGFloat width = a5;
    v33.size.CGFloat height = rect;
    double MaxX = CGRectGetMaxX(v33);
    v34.origin.CGFloat x = a7;
    v34.origin.CGFloat y = a8;
    v34.size.CGFloat width = a9;
    v34.size.CGFloat height = a10;
    BOOL v20 = MaxX >= CGRectGetMaxX(v34);
    if (v19) {
      goto LABEL_6;
    }
  }
  if (!v20)
  {
    v24[2]();
    goto LABEL_13;
  }
LABEL_6:
  CGContextBeginTransparencyLayer(a1, 0);
  v24[2]();
  CGContextSetBlendMode(a1, kCGBlendModeDestinationOut);
  if (_UITextCanvasDrawWithFadedEdgesInContext_onceToken != -1) {
    dispatch_once(&_UITextCanvasDrawWithFadedEdgesInContext_onceToken, &__block_literal_global_361);
  }
  if (v19)
  {
    v35.origin.CGFloat x = a7;
    v35.origin.CGFloat y = a8;
    v35.size.CGFloat width = a9;
    v35.size.CGFloat height = a10;
    v26.CGFloat x = CGRectGetMinX(v35);
    v28.CGFloat x = v26.x + 50.0;
    v26.CGFloat y = a8;
    v28.CGFloat y = a8;
    CGContextDrawLinearGradient(a1, (CGGradientRef)_UITextCanvasDrawWithFadedEdgesInContext_leftFadeGradient, v26, v28, 0);
  }
  if (v20)
  {
    v36.origin.CGFloat x = a7;
    v36.origin.CGFloat y = a8;
    v36.size.CGFloat width = a9;
    v36.size.CGFloat height = a10;
    v27.CGFloat x = CGRectGetMaxX(v36);
    v29.CGFloat x = v27.x + -50.0;
    v27.CGFloat y = a8;
    v29.CGFloat y = a8;
    CGContextDrawLinearGradient(a1, (CGGradientRef)_UITextCanvasDrawWithFadedEdgesInContext_leftFadeGradient, v27, v29, 0);
  }
  CGContextEndTransparencyLayer(a1);
LABEL_13:
}

void __swiftcall UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(UIMenu *__return_ptr retstr, Swift::String title, Swift::String_optional subtitle, UIImage_optional *image, UIMenuIdentifier_optional identifier, UIMenuOptions options, UIMenuElementSize preferredElementSize, Swift::OpaquePointer children)
{
  object = subtitle.value._object;
  id v13 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v14 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  sub_1853B985C(0, (unint64_t *)&qword_1EB255AC0);
  id v15 = (void *)sub_186A1EB1C();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v13, sel_initWithTitle_image_imageName_identifier_options_children_, v14, image, 0, identifier.value, options, v15);

  id v17 = v16;
  if (object)
  {
    long long v18 = (void *)sub_186A1E92C();
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v18 = 0;
  }
  objc_msgSend(v16, sel_setSubtitle_, v18);

  objc_msgSend(v16, sel_setPreferredElementSize_, preferredElementSize);
}

id _UIKitResourceBundlePath(void *a1)
{
  id v1 = a1;
  uint64_t v2 = _UIKitBundlePath();
  uint64_t v3 = [v2 stringByAppendingPathComponent:v1];

  return v3;
}

id _UIKitBundlePath()
{
  pthread_once(&_UIKitBundlePath_initUIKitBundleLocationOnce, __InitializeUIKitBundlePath);
  dispatch_time_t v0 = (void *)__kitLocation;
  return v0;
}

void sub_1857940D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

BOOL UIAccessibilityIsGrayscaleEnabled(void)
{
  return _AXSGrayscaleEnabled() != 0;
}

void sub_18579720C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  objc_destroyWeak(v32);
  _Unwind_Resume(a1);
}

void sub_185799044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double UIRectCenteredRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return a5 + (a7 - a3) * 0.5;
}

void sub_185799558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18579A208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _UIPopoverShapeLayerChromeViewWantsCurvedPinnedArrows()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_PopoverShapeLayerChromeViewWantsCurvedPinnedArrows,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_PopoverShapeLayerChromeViewWantsCurvedPinnedArrows))
  {
    BOOL v1 = 0;
  }
  else
  {
    do
    {
      BOOL v1 = v0 < v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_PopoverShapeLayerChromeViewWantsCurvedPinnedArrows, @"PopoverShapeLayerChromeViewWantsCurvedPinnedArrows", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_PopoverShapeLayerChromeViewWantsCurvedPinnedArrows;
    }
    while (v0 != _UIInternalPreference_PopoverShapeLayerChromeViewWantsCurvedPinnedArrows);
  }
  return byte_1E8FD52F4 && v1;
}

double _UIPresentationControllerBaseContentInsetsForControllersAndViewInWindow(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  [(id)objc_opt_class() _statusBarOverlapAndMarginInfoForView:v13 inWindow:v14];
  double v18 = v17;
  if (a5) {
    *a5 = v15;
  }
  if (a6) {
    *a6 = v16;
  }
  if ([v12 _providesCustomBasePresentationInsets])
  {
    [v12 _customBasePresentationInsetsForView:v13];
    double v20 = v19;
  }
  else
  {
    [v12 _viewSafeAreaInsetsFromScene];
    double v20 = fmax(v18, v21);
  }

  return v20;
}

uint64_t _UIViewControllerModernContentOverlayInsetsPropagation()
{
  if (qword_1EB25BB40 != -1) {
    dispatch_once(&qword_1EB25BB40, &__block_literal_global_170);
  }
  return byte_1EB25BB24;
}

void sub_18579ECEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_18579F018(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18579F1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void _UIApplicationMainPreparations(int a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  aClassName = a4;
  kdebug_trace();
  long long v43 = dispatch_get_global_queue(33, 0);
  dispatch_async(v43, &__block_literal_global_3723);
  CGInitializeImageIO();
  _UIApplicationLinkedOnVersion = dyld_get_program_sdk_version();
  if (a1 >= 2)
  {
    uint64_t v8 = a1 - 1;
    uint64_t v9 = (const char **)(a2 + 8);
    do
    {
      uint64_t v10 = *v9;
      if (!strcmp(*v9, "-BuildDefaultPNG"))
      {
        id v11 = &_MergedGlobals_143;
      }
      else
      {
        if (strcmp(v10, "-RegisterForSystemEvents") && strcmp(v10, "--RegisterForSystemEvents")) {
          goto LABEL_9;
        }
        id v11 = &byte_1EB25B4DA;
      }
      *id v11 = 1;
LABEL_9:
      ++v9;
      --v8;
    }
    while (v8);
  }
  kdebug_trace();
  BKSDisplayServicesStart();
  kdebug_trace();
  id v12 = +[_UIApplicationConfigurationLoader sharedLoader];
  [v12 startPreloadInitializationContext];

  id v13 = +[_UIScreenInitialDisplayConfigurationLoader sharedLoader];
  [v13 _startPreloadInitialDisplayContext];

  id v14 = +[_UIDeviceInitialDeviceConfigurationLoader sharedLoader];
  [v14 _startPreloadInitialDeviceContext];

  UIApplicationInitialize();
  uint64_t v15 = (NSString *)v7;
  long long v41 = v15;
  if (!v15)
  {
    uint64_t v16 = [MEMORY[0x1E4F28B50] mainBundle];
    double v17 = [v16 infoDictionary];
    uint64_t v15 = [v17 objectForKey:@"NSPrincipalClass"];
  }
  if ([(NSString *)v15 length])
  {
    double v18 = NSClassFromString(v15);
    if (!v18)
    {
      double v19 = [MEMORY[0x1E4F28B00] currentHandler];
      double v20 = [NSString stringWithUTF8String:"Class _UIApplicationGetPrincipalClass(NSString *__strong)"];
      [v19 handleFailureInFunction:v20, @"UIApplication.m", 5237, @"Unable to instantiate the UIApplication subclass instance. No class named %@ is loaded.", v15 file lineNumber description];

      double v18 = 0;
    }
  }
  else
  {
    double v18 = objc_opt_class();
  }
  id v21 = v18;

  GSEventRegisterEventCallBack();
  if (_UIUpdateCycleEnabled()) {
    _UIUpdateSchedulerStart((uint64_t)&_UIUpdateCycleMainScheduler);
  }
  uint64_t v22 = objc_opt_new();
  byte_1EB25B4DA = [(id)objc_opt_class() registerAsSystemApp];
  if (qword_1EB25B5B8 != -1) {
    dispatch_once(&qword_1EB25B5B8, &__block_literal_global_1234);
  }
  if (byte_1EB25B4E3) {
    GSEventInitializeAsExtension();
  }
  else {
    GSEventInitialize();
  }
  GSEventPushRunLoopMode();
  [v21 _startWindowServerIfNecessary];
  [v21 _startStatusBarServerIfNecessary];
  id v23 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v24 = (void *)qword_1EB25B580;
  qword_1EB25B580 = (uint64_t)v23;

  id v25 = objc_alloc_init(_UISceneEventResponder);
  CGPoint v26 = (void *)qword_1EB25B598;
  qword_1EB25B598 = (uint64_t)v25;

  CGPoint v27 = objc_alloc_init(_UIAfterCACommitQueue);
  CGPoint v28 = (void *)qword_1EB25B5B0;
  qword_1EB25B5B0 = (uint64_t)v27;

  UIApplicationInstantiateSingleton((objc_class *)v21);
  objc_storeStrong((id *)(UIApp + 152), v22);
  kdebug_trace();
  CGPoint v29 = [MEMORY[0x1E4F62B20] optionsWithDelegate:UIApp];
  CGRect v30 = +[UIApplication _systemAnimationFenceExemptQueue];
  [v29 setCallOutQueue:v30];
  uint64_t v31 = FBSWorkspaceInitialize();
  CGRect v32 = (void *)qword_1EB25B590;
  qword_1EB25B590 = v31;

  kdebug_trace();
  kdebug_trace();
  *(void *)(UIApp + 176) |= 0x80000000uLL;
  kdebug_trace();
  _UIApplicationInitializeForBackgroundTasks();
  objc_opt_class();
  id v33 = +[UIKeyboardSceneDelegate automaticKeyboardArbiterClient];
  +[_UICanvasUserActivityManager _initializeUserActivityManager];
  CGRect v34 = aClassName;
  if (aClassName) {
    goto LABEL_25;
  }
  CGRect v35 = [MEMORY[0x1E4F28B50] mainBundle];
  CGRect v36 = [v35 infoDictionary];
  CGRect v34 = [v36 objectForKey:@"UIApplicationDelegateClass"];

  if (v34)
  {
LABEL_25:
    uint64_t v37 = NSClassFromString(v34);
    if (!v37)
    {
      id v39 = [MEMORY[0x1E4F28B00] currentHandler];
      __int16 v40 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIApplicationMainPreparations(int, char **, NSString *__strong, NSString *__strong)");
      [v39 handleFailureInFunction:v40, @"UIApplication.m", 5457, @"Unable to instantiate the UIApplication delegate instance. No class named %@ is loaded.", v34 file lineNumber description];
    }
    if ([(objc_class *)v37 isSubclassOfClass:objc_opt_class()])
    {
      [(id)UIApp setDelegate:UIApp];
    }
    else
    {
      id v38 = objc_alloc_init(v37);
      [(id)UIApp setDelegate:v38];
      objc_setAssociatedObject((id)UIApp, &unk_1EB25B4DB, v38, (void *)1);
    }
  }
  kdebug_trace();
}

void _UIApplicationInstallAutoreleasePoolsIfNecessaryForMode(const __CFString *a1)
{
  if (!_CFRunLoopSetPerCalloutAutoreleasepoolEnabled())
  {
    Current = CFRunLoopGetCurrent();
    int v3 = (__CFRunLoopObserver *)_MergedGlobals_1062;
    if (!_MergedGlobals_1062)
    {
      id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      context.version = 0;
      context.info = v4;
      context.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E4F1C280];
      context.release = (void (__cdecl *)(const void *))MEMORY[0x1E4F1C278];
      context.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x1E4F1C220];
      _MergedGlobals_1062 = (uint64_t)CFRunLoopObserverCreate(0, 1uLL, 1u, -2147483647, (CFRunLoopObserverCallBack)_runLoopObserverCallout, &context);
      qword_1EB260920 = (uint64_t)CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 0x7FFFFFFFLL, (CFRunLoopObserverCallBack)_runLoopObserverCallout, &context);
      CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D410];
      CFRunLoopAddObserver(Current, (CFRunLoopObserverRef)_MergedGlobals_1062, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
      CFRunLoopAddObserver(Current, (CFRunLoopObserverRef)qword_1EB260920, v5);

      int v3 = (__CFRunLoopObserver *)_MergedGlobals_1062;
    }
    if (!CFRunLoopContainsObserver(Current, v3, a1))
    {
      CFRunLoopAddObserver(Current, (CFRunLoopObserverRef)_MergedGlobals_1062, a1);
      CFRunLoopAddObserver(Current, (CFRunLoopObserverRef)qword_1EB260920, a1);
    }
  }
}

void _UIApplicationInitializeForBackgroundTasks()
{
  uint64_t v0 = [MEMORY[0x1E4F963E8] observeForImminentAssertionsExpiration:&__block_literal_global_61_0];
  uint64_t v1 = (void *)__processExpirationObserver;
  __processExpirationObserver = v0;
}

void UIApplicationInstantiateSingleton(objc_class *a1)
{
  kdebug_trace();
  if (UIApp)
  {
    CFStringRef v5 = [MEMORY[0x1E4F28B00] currentHandler];
    int v6 = [NSString stringWithUTF8String:"void UIApplicationInstantiateSingleton(__unsafe_unretained Class)"];
    [v5 handleFailureInFunction:v6 file:@"UIApplication.m" lineNumber:5222 description:@"There can only be one UIApplication instance."];
  }
  id v2 = [a1 alloc];
  int v3 = (void *)UIApp;
  UIApp = (uint64_t)v2;

  uint64_t v4 = [(id)UIApp init];
  id v9 = (id)v4;
  if (!UIApp || UIApp != v4)
  {
    id v7 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v8 = [NSString stringWithUTF8String:"void UIApplicationInstantiateSingleton(__unsafe_unretained Class)"];
    [v7 handleFailureInFunction:v8 file:@"UIApplication.m" lineNumber:5226 description:@"Unable to instantiate the UIApplication singleton."];
  }
  kdebug_trace();
}

uint64_t UIKeyboardTypeSupportsSmartTyping(unint64_t a1)
{
  uint64_t result = 1;
  if (a1 > 0xD || ((1 << a1) & 0x2645) == 0)
  {
    unint64_t v3 = a1 - 123;
    if (v3 > 3 || v3 == 2) {
      return 0;
    }
  }
  return result;
}

uint64_t _isSystemGestureForDelegate(void *a1)
{
  id v1 = a1;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___isSystemGestureForDelegate_block_invoke;
  block[3] = &unk_1E52D9F70;
  id v7 = v1;
  uint64_t v2 = qword_1EB25E948;
  id v3 = v1;
  if (v2 != -1) {
    dispatch_once(&qword_1EB25E948, block);
  }
  uint64_t v4 = _MergedGlobals_15_2;

  return v4;
}

uint64_t _UIUndoGestureRecognizerCommonInit(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(_UIGestureRecognizerTransformAnalyzer);
  id v3 = v1[60];
  v1[60] = v2;

  [v1[60] setRotationWeight:0.33];
  [v1[60] setTranslationWeight:0.33];
  id v4 = v1[60];

  return [v4 setPinchingWeight:0.33];
}

_UIGestureRecognizerCompositionDriver *_UIGestureRecognizerComposeParallelDrivers(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [_UIGestureRecognizerCompositionDriver alloc];
  if (v2)
  {
    if ((unint64_t)[a1 count] <= 1)
    {
      uint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
      [v10 handleFailureInMethod:sel_initWithDrivers_stateCombiner_, v2, @"_UIGestureRecognizerDriverComposition.m", 30, @"Invalid parameter not satisfying: %@", @"drivers.count >= 2" object file lineNumber description];
    }
    v15.receiver = v2;
    v15.super_class = (Class)_UIGestureRecognizerCompositionDriver;
    id v3 = (_UIGestureRecognizerCompositionDriver *)objc_msgSendSuper2(&v15, sel_init);
    uint64_t v2 = v3;
    if (v3)
    {
      objc_storeStrong((id *)&v3->_drivers, a1);
      v2->_stateCombiner = _combineParallel;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      id v4 = v2->_drivers;
      uint64_t v5 = [(NSArray *)v4 countByEnumeratingWithState:&v11 objects:v16 count:16];
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)v12;
        do
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v12 != v7) {
              objc_enumerationMutation(v4);
            }
            [*(id *)(*((void *)&v11 + 1) + 8 * i) setDelegate:v2];
          }
          uint64_t v6 = [(NSArray *)v4 countByEnumeratingWithState:&v11 objects:v16 count:16];
        }
        while (v6);
      }
    }
  }
  return v2;
}

void sub_1857A4258(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id UIKeyboardGetComponentsFromLanguageIdentifier(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  [v1 UTF8String];
  uloc_addLikelySubtags();
  uint64_t v2 = [NSString stringWithUTF8String:v6];

  id v3 = (void *)v2;
  id v4 = [MEMORY[0x1E4F1CA20] componentsFromLocaleIdentifier:v2];

  return v4;
}

void __TIGetRemoteEmojiValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"RemoteEmoji" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC38]];
}

void __TIGetNewKeyboardNotificationOrderValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"NewKeyboardNotificationOrder" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC28]];
}

void __TIGetUsesLocalKeyboardValue_block_invoke()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"UsesLocalKeyboard" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC38]];
}

void SetCachedPatternColor(void *a1, const void *a2)
{
  id v3 = a1;
  uint64_t v4 = qword_1EB25B150;
  keCGFloat y = v3;
  if (a2 && !qword_1EB25B150)
  {
    os_unfair_lock_lock(&stru_1EB25B114);
    if (!qword_1EB25B150) {
      qword_1EB25B150 = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
    }
    os_unfair_lock_unlock(&stru_1EB25B114);
    uint64_t v4 = qword_1EB25B150;
    id v3 = key;
  }
  if (v4)
  {
    os_unfair_lock_lock(&stru_1EB25B114);
    if (a2) {
      CFDictionarySetValue((CFMutableDictionaryRef)qword_1EB25B150, key, a2);
    }
    else {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1EB25B150, key);
    }
    os_unfair_lock_unlock(&stru_1EB25B114);
    id v3 = key;
    key[26] = key[26] & 0xFFFFFF7F | ((a2 != 0) << 7);
  }
}

CGColorRef createPatternColorFromImage(void *a1)
{
  id v1 = a1;
  [v1 scale];
  memset(&v9, 0, sizeof(v9));
  CGAffineTransformMakeScale(&v9, 1.0 / v2, -1.0 / v2);
  id v3 = v1;
  [v3 CGImage];

  uint64_t v4 = CGPatternCreateWithImage2();
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (CGPattern *)v4;
  Pattern = CGColorSpaceCreatePattern(0);
  CGColorRef v7 = CGColorCreateWithPattern(Pattern, v5, &createPatternColorFromImage_alpha);
  CGColorSpaceRelease(Pattern);
  CGPatternRelease(v5);
  return v7;
}

void _removeLayoutGuide(void *a1)
{
  id v1 = a1;
  [v1 _setLockedToOwningView:0];
  id v2 = [v1 owningView];
  [v2 removeLayoutGuide:v1];
}

uint64_t _UIHomeAffordanceValidateObserver(void *a1, void *a2, void *a3, char a4)
{
  if (!a2 || !a3)
  {
    uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v12 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIHomeAffordanceValidateObserver(id<_UIHomeAffordanceNotifyingInternal>  _Nonnull const __strong, id<_UIHomeAffordanceObserver>  _Nonnull const __strong, UIWindow * _Nonnull const __strong, BOOL)");
    if (a2)
    {
      uint64_t v22 = NSString;
      id v23 = a2;
      uint64_t v24 = (objc_class *)objc_opt_class();
      id v25 = NSStringFromClass(v24);
      long long v13 = [v22 stringWithFormat:@"<%@: %p>", v25, v23];

      if (a3)
      {
LABEL_8:
        CGPoint v26 = NSString;
        id v27 = a3;
        CGPoint v28 = (objc_class *)objc_opt_class();
        CGPoint v29 = NSStringFromClass(v28);
        double v18 = [v26 stringWithFormat:@"<%@: %p>", v29, v27];

LABEL_16:
        double v19 = [a1 succinctDescription];
        objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v12, @"_UIHomeAffordanceSceneNotifier.m", 227, @"Invalid home affordance observer: %@; window: %@; notifier: %@",
          v13,
          v18,
          v19);
        goto LABEL_17;
      }
    }
    else
    {
      long long v13 = @"(nil)";
      if (a3) {
        goto LABEL_8;
      }
    }
    double v18 = @"(nil)";
    goto LABEL_16;
  }
  uint64_t v8 = [a1 windowHostingScene];
  uint64_t v9 = [a3 _windowHostingScene];
  if ((void *)v9 == v8)
  {
  }
  else
  {
    uint64_t v10 = (void *)v9;
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if ((isKindOfClass & 1) == 0)
    {
      long long v12 = [MEMORY[0x1E4F28B00] currentHandler];
      objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIHomeAffordanceValidateObserver(id<_UIHomeAffordanceNotifyingInternal>  _Nonnull const __strong, id<_UIHomeAffordanceObserver>  _Nonnull const __strong, UIWindow * _Nonnull const __strong, BOOL)");
      long long v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
      long long v14 = NSString;
      id v15 = a3;
      uint64_t v16 = (objc_class *)objc_opt_class();
      uint64_t v17 = NSStringFromClass(v16);
      double v18 = [v14 stringWithFormat:@"<%@: %p>", v17, v15];

      double v19 = [v15 _windowHostingScene];
      double v20 = [v19 succinctDescription];
      id v21 = [v8 succinctDescription];
      objc_msgSend(v12, "handleFailureInFunction:file:lineNumber:description:", v13, @"_UIHomeAffordanceSceneNotifier.m", 237, @"Invalid home affordance observer request for window not in notifier scene: %@; window's scene: %@; expected scene: %@; notifier: %@",
        v18,
        v20,
        v21,
        a1);
LABEL_13:

LABEL_17:
      uint64_t v34 = 0;
      goto LABEL_18;
    }
  }
  CGRect v30 = [v8 _screen];
  uint64_t v31 = [v30 _userInterfaceIdiom];

  uint64_t v32 = _UIActiveViewServiceSessionEffectiveIdiomForIdiom(v31);
  id v33 = +[_UIActiveViewServiceSessionTracker sharedTracker];
  long long v12 = -[_UIActiveViewServiceSessionTracker viewServiceSessionForHostedWindow:inUserInterfaceIdiom:]((uint64_t)v33, (uint64_t)a3, v32);

  uint64_t v34 = 1;
  if (v12 && (a4 & 1) == 0)
  {
    long long v13 = [MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIHomeAffordanceValidateObserver(id<_UIHomeAffordanceNotifyingInternal>  _Nonnull const __strong, id<_UIHomeAffordanceObserver>  _Nonnull const __strong, UIWindow * _Nonnull const __strong, BOOL)");
    double v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
    CGRect v35 = NSString;
    id v36 = a2;
    uint64_t v37 = (objc_class *)objc_opt_class();
    id v38 = NSStringFromClass(v37);
    double v19 = [v35 stringWithFormat:@"<%@: %p>", v38, v36];

    double v20 = [v8 succinctDescription];
    id v21 = [a1 succinctDescription];
    -[__CFString handleFailureInFunction:file:lineNumber:description:](v13, "handleFailureInFunction:file:lineNumber:description:", v18, @"_UIHomeAffordanceSceneNotifier.m", 250, @"Unexpected legacy view service home affordance observer: %@; scene: %@; notifier: %@",
      v19,
      v20,
      v21,
      v40);
    goto LABEL_13;
  }
LABEL_18:

  return v34;
}

uint64_t _UIActiveViewServiceSessionEffectiveIdiomForIdiom(uint64_t a1)
{
  if (a1 >= 10) {
    uint64_t v2 = 10;
  }
  else {
    uint64_t v2 = a1;
  }
  id v3 = +[UIDevice currentDevice];
  uint64_t v4 = [v3 userInterfaceIdiom];

  if (a1 == -1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v2;
  }
  if (a1 == 1) {
    return 1;
  }
  else {
    return v5;
  }
}

id _UIHomeAffordanceRegistrationTokenForNotifierAndRecord(id val, uint64_t a2)
{
  objc_initWeak(&location, val);
  uint64_t v4 = [_UIDeallocInvalidatable alloc];
  uint64_t v5 = (objc_class *)objc_opt_class();
  Name = class_getName(v5);
  id v7 = (id)objc_msgSend(NSString, "stringWithFormat:", @"%s-%p-%lu", Name, val, ++_UIHomeAffordanceNewObserverRegisterationIndex_observerRegistrationIndex);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = ___UIHomeAffordanceRegistrationTokenForNotifierAndRecord_block_invoke;
  void v10[3] = &unk_1E52DD100;
  objc_copyWeak(&v11, &location);
  void v10[4] = a2;
  id v8 = -[_UIDeallocInvalidatable initWithIdentifier:faultForDeallocInvalidation:invalidationBlock:](v4, v7, 0, v10);

  objc_destroyWeak(&v11);
  objc_destroyWeak(&location);
  return v8;
}

void sub_1857A9708(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id castToWindow(id a1)
{
  if (a1)
  {
    if (qword_1EB25CEF8 != -1) {
      dispatch_once(&qword_1EB25CEF8, &__block_literal_global_304);
    }
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v3 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v4 = [NSString stringWithUTF8String:"UIWindow * _Nonnull castToWindow(UIView * _Nullable const __strong)"];
      [v3 handleFailureInFunction:v4 file:@"_UIHomeAffordanceGateGestureRecognizer.m" lineNumber:68 description:@"_UIHomeAffordanceGateGestureRecognizer must be attached to a window."];
    }
  }
  return a1;
}

BOOL _UIHomeAffordanceNotifierShouldUpdateTargetForKeyWindow(void *a1, void *a2)
{
  if (![(id)UIApp isFrontBoard]) {
    return 0;
  }
  uint64_t v4 = [a1 _scene];
  if ([v4 _allowsEventUIWindowRouting]) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = v5;
  id v7 = [v6 _sceneForKeyboardDisplay];
  if (v6 == v7)
  {
    uint64_t v9 = [a2 _eventRoutingScene];
    uint64_t v10 = [v9 _screen];
    id v11 = [v6 _screen];
    BOOL v8 = v10 == v11;
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

void sub_1857AD7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIPhysicalButtonConfigurationNSSetIsMostlyValid(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obj = a1;
  uint64_t v3 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v22 = a2;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)v25;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(obj);
        }
        BOOL v8 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        uint64_t v9 = [v8 _button];
        uint64_t v10 = [v8 _behavior];
        int IsValid = _UIPhysicalButtonIsValid(v9);
        int IsValidForButton = _UIPhysicalButtonBehaviorIsValidForButton(v10, v9);
        long long v13 = [v8 _behaviorOptions];
        BOOL IsValidForBehavior = _UIPhysicalButtonBehaviorOptionsIsValidForBehavior(v13, v10);

        if (IsValid) {
          BOOL v15 = IsValidForButton == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15 || !IsValidForBehavior)
        {
          if (v22)
          {
            [NSString stringWithFormat:@"Invalid configuration: %@", v8];
            uint64_t v18 = 0;
            *uint64_t v22 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_24;
          }
          goto LABEL_23;
        }
        unint64_t v16 = [v8 _button];
        if (v16 - 1 >= 5) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = 1 << v16;
        }
        if ((v17 & ~v5) == 0)
        {
          if (v22)
          {
            double v19 = NSString;
            double v20 = _NSStringFromUIPhysicalButton(v16);
            *uint64_t v22 = [v19 stringWithFormat:@"Configuration set contains more than one %@ button", v20];
          }
LABEL_23:
          uint64_t v18 = 0;
          goto LABEL_24;
        }
        v5 |= v17;
      }
      uint64_t v4 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
      uint64_t v18 = 1;
      if (v4) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v18 = 1;
  }
LABEL_24:

  return v18;
}

void _UIPhysicalButtonEnumerateAllButtonsWithBlock(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  char v11 = 0;
  _UIPhysicalButtonAllAvailableButtons();
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v8 != v5) {
        objc_enumerationMutation(v2);
      }
      (*(void (**)(uint64_t, uint64_t, char *))(a1 + 16))(a1, objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * v6), "unsignedIntegerValue", (void)v7), &v11);
      if (v11) {
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v12 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

void sub_1857AFD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIPhysicalButtonBehaviorIsValidForButton(unint64_t a1, uint64_t a2)
{
  if (a1 > 2) {
    return 0;
  }
  int IsValid = _UIPhysicalButtonIsValid(a2);
  if (a2 == 4 || !IsValid) {
    return 0;
  }
  if (qword_1EB25EEF8 != -1) {
    dispatch_once(&qword_1EB25EEF8, &__block_literal_global_192);
  }
  uint64_t v5 = NSNumber;
  id v6 = (id)qword_1EB25EEF0;
  long long v7 = [v5 numberWithUnsignedInteger:a1];
  long long v8 = [v6 objectForKey:v7];

  long long v9 = [NSNumber numberWithUnsignedInteger:a2];
  uint64_t v10 = [v8 containsObject:v9];

  return v10;
}

uint64_t _UIPhysicalButtonIsValid(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return 0;
  }
  id v2 = _UIPhysicalButtonAllAvailableButtons();
  uint64_t v3 = [NSNumber numberWithUnsignedInteger:a1];
  uint64_t v4 = [v2 containsObject:v3];

  return v4;
}

id _UIPhysicalButtonAllAvailableButtons()
{
  if (qword_1EB25EEE8 != -1) {
    dispatch_once(&qword_1EB25EEE8, &__block_literal_global_15);
  }
  id v0 = (void *)_MergedGlobals_933;
  return v0;
}

BOOL _UIPhysicalButtonBehaviorOptionsIsValidForBehavior(void *a1, uint64_t a2)
{
  if (!a1) {
    return 1;
  }
  if ([a1 _behavior] != a2) {
    return 0;
  }
  id v3 = _UIPhysicalButtonBehaviorOptionsClassForBehavior(a2);
  return objc_opt_class() == (void)v3;
}

id _UIPhysicalButtonBehaviorOptionsClassForBehavior(uint64_t a1)
{
  if (a1)
  {
    id v2 = 0;
  }
  else
  {
    id v2 = objc_opt_class();
  }
  return v2;
}

void *_UIPhysicalButtonRequiredButtonsForButton(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1CBF0];
  if (a1 == 2) {
    uint64_t v1 = &unk_1ED3EF0F8;
  }
  if (a1 == 1) {
    return &unk_1ED3EF0E0;
  }
  else {
    return v1;
  }
}

__CFString *_NSStringFromUIPhysicalButton(unint64_t a1)
{
  if (a1 > 5) {
    return &stru_1ED0E84C0;
  }
  else {
    return off_1E52DB148[a1];
  }
}

void _UIApplicationStartLaunchBackgroundTask()
{
  os_unfair_lock_lock((os_unfair_lock_t)&_launchBackgroundTaskLock);
  if ((_launchBackgroundTaskPeriodOver & 1) == 0)
  {
    id v0 = _doAddBackgroundTask(@"Launch Background Task for Coalescing", 0, 0);
    if (v0)
    {
      _launchBackgroundTaskIdentifier = v0[1];
      if (_launchBackgroundTaskIdentifier)
      {
        dispatch_time_t v1 = dispatch_time(0, 1000000000);
        id v2 = dispatch_get_current_queue();
        dispatch_after(v1, v2, &__block_literal_global_86_0);

        goto LABEL_9;
      }
    }
    else
    {
      _launchBackgroundTaskIdentifier = 0;
    }
    if (os_variant_has_internal_diagnostics())
    {
      uint64_t v4 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "Unexpectedly failed to create Launch Background Task.", buf, 2u);
      }
    }
    else
    {
      id v3 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UIApplicationStartLaunchBackgroundTask___s_category)
                        + 8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl(&dword_1853B0000, v3, OS_LOG_TYPE_ERROR, "Unexpectedly failed to create Launch Background Task.", v5, 2u);
      }
    }
  }
LABEL_9:
  os_unfair_lock_unlock((os_unfair_lock_t)&_launchBackgroundTaskLock);
}

void _UISceneInspectDelegateSuport(unsigned int *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = self;
  *a1 = *a1 & 0xFFFFFFFE | objc_opt_isKindOfClass() & 1;

  if (objc_opt_respondsToSelector()) {
    int v5 = 2;
  }
  else {
    int v5 = 0;
  }
  *a1 = *a1 & 0xFFFFFFFD | v5;
  if (objc_opt_respondsToSelector()) {
    int v6 = 4;
  }
  else {
    int v6 = 0;
  }
  *a1 = *a1 & 0xFFFFFFFB | v6;
  if (objc_opt_respondsToSelector()) {
    int v7 = 8;
  }
  else {
    int v7 = 0;
  }
  *a1 = *a1 & 0xFFFFFFF7 | v7;
  if (objc_opt_respondsToSelector()) {
    int v8 = 16;
  }
  else {
    int v8 = 0;
  }
  *a1 = *a1 & 0xFFFFFFEF | v8;
  if (objc_opt_respondsToSelector()) {
    int v9 = 32;
  }
  else {
    int v9 = 0;
  }
  *a1 = *a1 & 0xFFFFFFDF | v9;
  char v10 = objc_opt_respondsToSelector();

  if (v10) {
    int v11 = 64;
  }
  else {
    int v11 = 0;
  }
  *a1 = *a1 & 0xFFFFFFBF | v11;
}

__CFString *_NSStringFromUISceneActivationState(unint64_t a1)
{
  if (a1 > 2) {
    return @"UISceneActivationStateUnattached";
  }
  else {
    return off_1E52DAEA8[a1];
  }
}

void sub_1857B38F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t _UISceneSystemShellManagesKeyboardFocusForScene(void *a1)
{
  if (pthread_main_np() != 1)
  {
    int v6 = [MEMORY[0x1E4F28B00] currentHandler];
    int v7 = [NSString stringWithUTF8String:"BOOL _UISceneSystemShellManagesKeyboardFocusForScene(UIScene *__unsafe_unretained _Nonnull)"];
    [v6 handleFailureInFunction:v7 file:@"UIScene.m" lineNumber:255 description:@"Call must be made on main thread"];
  }
  if (!_UISceneSystemShellManagesKeyboardFocusIsPossibleForScene(a1)) {
    return 0;
  }
  id v2 = a1;
  uint64_t v3 = _UISceneEffectiveIdiomOfSceneForSystemShellManagesKeyboardFocus(v2);
  if (v3 == -1) {
    uint64_t v4 = [v2 _isTargetOfKeyboardEventDeferringEnvironment];
  }
  else {
    uint64_t v4 = ((1 << v3) & (unint64_t)~_systemShellManagesKeyboardFocusIdiomMask) == 0;
  }

  return v4;
}

void _UISceneUpdateSystemShellManagesKeyboardFocusIfNeededFromScene(void *a1)
{
  if (pthread_main_np() != 1)
  {
    char v10 = [MEMORY[0x1E4F28B00] currentHandler];
    int v11 = [NSString stringWithUTF8String:"void _UISceneUpdateSystemShellManagesKeyboardFocusIfNeededFromScene(UIScene *__unsafe_unretained)"];
    [v10 handleFailureInFunction:v11 file:@"UIScene.m" lineNumber:222 description:@"Call must be made on main thread"];
  }
  if (_UISceneSystemShellManagesKeyboardFocusIsPossibleForScene(a1))
  {
    id v14 = a1;
    uint64_t v2 = _UISceneEffectiveIdiomOfSceneForSystemShellManagesKeyboardFocus(v14);
    if (v2 != -1)
    {
      uint64_t v3 = v2;
      uint64_t v4 = 1 << v2;
      if ((v4 & ~_systemShellManagesKeyboardFocusIdiomMask) != 0)
      {
        if (pthread_main_np() != 1)
        {
          long long v12 = [MEMORY[0x1E4F28B00] currentHandler];
          uint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UISceneSystemShellManagesKeyboardFocusAlwaysEnabledForSceneAndIdiom(UIScene *__unsafe_unretained, UIUserInterfaceIdiom)");
          [v12 handleFailureInFunction:v13 file:@"UIScene.m" lineNumber:174 description:@"Call must be made on main thread"];
        }
        if (_UISceneSystemShellManagesKeyboardFocusIsPossibleForScene(v14))
        {
          int v5 = +[UIDevice currentDevice];
          unint64_t v6 = [v5 userInterfaceIdiom];

          BOOL v8 = v3 != 3 && v6 < 2;
        }
        else
        {
          BOOL v8 = 0;
        }
        int v9 = [v14 _isTargetOfKeyboardEventDeferringEnvironment];
        if (v8 || v9) {
          _systemShellManagesKeyboardFocusIdiomMask |= v4;
        }
      }
    }
  }
}

uint64_t _UISceneEffectiveIdiomOfSceneForSystemShellManagesKeyboardFocus(void *a1)
{
  if (pthread_main_np() != 1)
  {
    int v5 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v6 = [NSString stringWithUTF8String:"UIUserInterfaceIdiom _UISceneEffectiveIdiomOfSceneForSystemShellManagesKeyboardFocus(UIScene *__unsafe_unretained)"];
    [v5 handleFailureInFunction:v6 file:@"UIScene.m" lineNumber:207 description:@"Call must be made on main thread"];
  }
  if (![a1 _hostsWindows]) {
    return -1;
  }
  uint64_t v2 = [a1 _screen];
  uint64_t v3 = [v2 _userInterfaceIdiom];

  if (v3 >= 10) {
    return 10;
  }
  else {
    return v3;
  }
}

void sub_1857B4B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1857B66CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1857B67C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1857B76EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void UIRectCenteredXInRectScale(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if (a9 == 0.0 && AdjustToScale_onceToken_0 != -1) {
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_279);
  }
}

double UIRectCenteredYInRectScale(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if (a9 == 0.0 && AdjustToScale_onceToken_0 != -1) {
    dispatch_once(&AdjustToScale_onceToken_0, &__block_literal_global_279);
  }
  return a1;
}

void sub_1857BB420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1857BB9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1857BBC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _UICollectionLayoutValidatedContentOffsetForProposedContentOffsetForOrthogonalSection(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a1)
  {
    uint64_t v15 = *(void *)(a1 + 16);
    double v16 = _UISizeValueForAxis(v15, *(double *)(a1 + 160), *(double *)(a1 + 168));
    double v17 = _UISizeValueForAxis(v15, *(double *)(a1 + 224), *(double *)(a1 + 232));
    double v47 = *(double *)(a1 + 72);
  }
  else
  {
    double v47 = 0.0;
    double v16 = _UISizeValueForAxis(0, 0.0, 0.0);
    double v17 = _UISizeValueForAxis(0, 0.0, 0.0);
    uint64_t v15 = 0;
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___UICollectionLayoutValidatedContentOffsetForProposedContentOffsetForOrthogonalSection_block_invoke;
  aBlock[3] = &unk_1E52E11B8;
  *(double *)&void aBlock[5] = v16;
  *(double *)&void aBlock[6] = v17;
  *(double *)&aBlock[7] = a4;
  *(double *)&aBlock[8] = a5;
  *(double *)&aBlock[9] = a6;
  *(double *)&aBlock[10] = a7;
  void aBlock[4] = a1;
  *(double *)&aBlock[11] = a2;
  *(double *)&aBlock[12] = a3;
  aBlock[13] = v15;
  uint64_t v18 = _Block_copy(aBlock);
  if (a1)
  {
    uint64_t v19 = *(void *)(a1 + 24);
    double v20 = *MEMORY[0x1E4F1DAD8];
    double v21 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    double v22 = _UIPointValueForAxis(v15, a2, a3);
    double v23 = _UISetPointValueForAxis(v15, v20, v21, v22);
    double v25 = v24;
    double v26 = a8;
    switch(v19)
    {
      case 0:
        break;
      case 1:
        long long v27 = (double (*)(void *))v18[2];
        goto LABEL_8;
      case 2:
      case 4:
        long long v27 = (double (*)(void *))v18[2];
LABEL_8:
        CGRect v30 = v18;
        goto LABEL_10;
      case 3:
        long long v27 = (double (*)(void *))v18[2];
        CGRect v30 = v18;
LABEL_10:
        double v23 = v27(v30);
        double v25 = v31;
        break;
      case 5:
        double v34 = *(double *)(a1 + 64);
        UIRoundToScale((v47 + v17 - v34) * 0.5, a8);
        double v36 = v35;
        double v37 = _UISetPointValueForAxis(v15, v20, v21, v35);
        double v39 = ((double (*)(void *, double, double, double, double))v18[2])(v18, v23 + v37, v25 + v38, v34, v36);
        double v41 = v40;
        double v23 = v39 + _UISetPointValueForAxis(v15, v20, v21, -v36);
        double v25 = v41 + v42;
        break;
      default:
        CGPoint v28 = objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler", *(void *)&v47);
        uint64_t v29 = objc_msgSend(NSString, "stringWithUTF8String:", "CGPoint _UICollectionLayoutValidatedContentOffsetForProposedContentOffsetForOrthogonalSection(CGPoint, _UICollectionLayoutSectionDescriptor *const __strong, CGRect, CGFloat)");
        [v28 handleFailureInFunction:v29 file:@"_UICollectionLayoutHelpers.m" lineNumber:1037 description:@"Unknown orthogonal scrolling behavior. Please file a bug on UIKit."];

        break;
    }
  }
  else
  {
    double v43 = *MEMORY[0x1E4F1DAD8];
    double v44 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    double v45 = _UIPointValueForAxis(v15, a2, a3);
    double v23 = _UISetPointValueForAxis(v15, v43, v44, v45);
    double v25 = v46;
    double v26 = a8;
  }
  double v32 = UIPointRoundToScale(v23, v25, v26);

  return v32;
}

uint64_t _UIUpdateCollectionViewForScrollDirection(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t result = dyld_program_sdk_at_least();
    if (result)
    {
      BOOL v4 = a2 == 0;
      BOOL v5 = a2 == 0;
      uint64_t v6 = !v4;
      [v3 _setDefaultAlwaysBounceVertical:v5 horizontal:v6];
      [v3 _setContentScrollsAlongYAxis:v5];
      return [v3 _setContentScrollsAlongXAxis:v6];
    }
  }
  return result;
}

void sub_1857BE90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___shouldCoalesceBackgroundTaskAssertions_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    _MergedGlobals_1070 = 1;
  }
  return result;
}

void _UIDataSourceDestroyUpdateMaps(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    int v7 = [NSString stringWithUTF8String:"void _UIDataSourceDestroyUpdateMaps(_UIDataSourceUpdateMaps * _Nonnull)"];
    [v6 handleFailureInFunction:v7, @"_UIDataSourceBatchUpdateMap.m", 689, @"Invalid parameter not satisfying: %@", @"updateMaps != NULL" file lineNumber description];
  }
  *(void *)a1 = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = 0;
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 24) = 0;
  }
  BOOL v4 = *(void **)(a1 + 32);
  if (v4)
  {
    free(v4);
    *(void *)(a1 + 32) = 0;
  }
  BOOL v5 = *(void **)(a1 + 40);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 40) = 0;
  }
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x210], 8) = 0;
}

double _sectionFooterMinY(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a2 + 56);
  if (dyld_program_sdk_at_least()) {
    return v4 + -[UITableViewRowData offsetForSection:](a1, a2);
  }
  return v4;
}

void _UIGestureRecognizerSendActions(uint64_t a1, int a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [(id)a1 state];
  if ((unint64_t)(v4 - 3) >= 2)
  {
    if (v4 == 1)
    {
      unint64_t v8 = *(void *)(a1 + 8) & 0xFFFFFFDFFFFFFFFFLL;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v8;
      if ((v8 & 0x400000000) != 0) {
        goto LABEL_10;
      }
    }
    else if ((*(void *)(a1 + 8) & 0x400000000) != 0)
    {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("GesturePerformance", &qword_1EB260C90);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      uint64_t v18 = *(id *)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = [(id)a1 _briefDescription];
        double v20 = [*(id *)(a1 + 24) firstObject];
        double v21 = NSStringFromSelector((SEL)[v20 action]);
        unint64_t v22 = *(void *)(a1 + 72);
        if (v22 > 5) {
          double v23 = 0;
        }
        else {
          double v23 = off_1E52F0F58[v22];
        }
        CFTimeInterval v24 = (CACurrentMediaTime() - *(double *)(a1 + 64)) * 1000.0;
        *(_DWORD *)double v25 = 138413058;
        *(void *)&void v25[4] = v19;
        *(_WORD *)&v25[12] = 2112;
        *(void *)&v25[14] = v21;
        __int16 v26 = 2112;
        long long v27 = v23;
        __int16 v28 = 2048;
        CFTimeInterval v29 = v24;
        _os_log_impl(&dword_1853B0000, v18, OS_LOG_TYPE_ERROR, "%@: sending action (%@) for state (%@) took (%.4f ms)", v25, 0x2Au);
      }
    }
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 0x800000000) != 0) {
    return;
  }
  char v6 = *(unsigned char *)(a1 + 16);
  uint64_t v7 = v5 | 0x800000000;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v7;
  *(unsigned char *)(a1 + 16) = v6;
  if ((v7 & 0x400000000) == 0) {
    goto LABEL_9;
  }
LABEL_10:
  *(void *)(a1 + 8) |= 0x400000000uLL;
  unint64_t v10 = __UILogGetCategoryCachedImpl("Gesture", &qword_1EB260C98);
  if (*(unsigned char *)v10)
  {
    long long v12 = *(id *)(v10 + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = [(id)a1 _briefDescription];
      id v14 = (void *)v13;
      uint64_t v15 = "";
      if (a2) {
        uint64_t v15 = " (delayed)";
      }
      unint64_t v16 = *(void *)(a1 + 72);
      if (v16 > 5) {
        double v17 = 0;
      }
      else {
        double v17 = off_1E52F0F58[v16];
      }
      *(_DWORD *)double v25 = 138412802;
      *(void *)&void v25[4] = v13;
      *(_WORD *)&v25[12] = 2080;
      *(void *)&v25[14] = v15;
      __int16 v26 = 2112;
      long long v27 = v17;
      _os_log_impl(&dword_1853B0000, v12, OS_LOG_TYPE_ERROR, "%@: performing action%s for state %@", v25, 0x20u);
    }
  }
  int v11 = _os_activity_create(&dword_1853B0000, "send gesture actions", MEMORY[0x1E4F144F8], OS_ACTIVITY_FLAG_DEFAULT);
  *(void *)double v25 = 0;
  *(void *)&v25[8] = 0;
  if (objc_msgSend(*(id *)(a1 + 24), "count", 0, 0))
  {
    os_activity_scope_enter(v11, (os_activity_scope_state_t)v25);
    _UIGestureRecognizerSendTargetActions(a1, *(void **)(a1 + 24));
    os_activity_scope_leave((os_activity_scope_state_t)v25);
  }
}

void _UIGestureRecognizerSendTargetActions(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [a2 count];
  if (v4 == 1)
  {
    id v10 = [a2 lastObject];
    -[UIGestureRecognizerTarget _sendActionWithGestureRecognizer:]((uint64_t)v10, a1);
  }
  else if (v4 >= 2)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t v5 = (void *)[a2 copy];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v12 != v8) {
            objc_enumerationMutation(v5);
          }
          -[UIGestureRecognizerTarget _sendActionWithGestureRecognizer:](*(void *)(*((void *)&v11 + 1) + 8 * i), a1);
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v7);
    }
  }
}

id _systemGestureLog()
{
  if (qword_1EB260C38 != -1) {
    dispatch_once(&qword_1EB260C38, &__block_literal_global_251);
  }
  id v0 = (void *)_MergedGlobals_1078;
  return v0;
}

uint64_t sub_1857C49C8@<X0>(SEL *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [self *a1];
  __swift_instantiateConcreteTypeFromMangledName(qword_1EB2558E0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *a2 = result;
  return result;
}

uint64_t _UIApplicationProcessIsSpotlight()
{
  if (qword_1EB25B640 != -1) {
    dispatch_once(&qword_1EB25B640, &__block_literal_global_1300_0);
  }
  return byte_1EB25B4F1;
}

uint64_t _UIApplicationProcessIsOverlayUI()
{
  if (qword_1EB25B630 != -1) {
    dispatch_once(&qword_1EB25B630, &__block_literal_global_1290);
  }
  return byte_1EB25B4EF;
}

uint64_t UIKeyboardInputModeIsNonLinguistic(void *a1)
{
  id v1 = a1;
  if (([v1 isEqualToString:@"emoji"] & 1) != 0
    || ([v1 isEqualToString:@"dictation"] & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    uint64_t v2 = [v1 isEqualToString:@"autofillsignup"];
  }

  return v2;
}

void sub_1857C9010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id location)
{
  objc_destroyWeak(v42);
  objc_destroyWeak(v41);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v43 - 176), 8);
  _Unwind_Resume(a1);
}

id fallbackForegroundColorForTraitCollection(void *a1)
{
  if ([a1 userInterfaceIdiom] == 6) {
    +[UIColor whiteColor];
  }
  else {
  id v1 = +[UIColor tintColor];
  }
  return v1;
}

void FreeContextStack(int *a1)
{
  if (*a1 >= 1)
  {
    do
      PopContextFromStack(a1);
    while (*a1 > 0);
  }
  free(a1);
}

void ___persistenceQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit.UIScenePersistenceQueue", 0);
  id v1 = (void *)qword_1EB262008;
  qword_1EB262008 = (uint64_t)v0;
}

void ___holdSceneEventResponsesQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("_holdSceneEventResponsesQueue", 0);
  id v1 = (void *)qword_1EB25EC50;
  qword_1EB25EC50 = (uint64_t)v0;
}

void ___eventDeferringCompatibilityQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit.eventDeferring.compatibilityQueue", 0);
  id v1 = (void *)_MergedGlobals_989;
  _MergedGlobals_989 = (uint64_t)v0;
}

id static UIBarButtonItemGroup.fixedGroup(representativeItem:items:)(uint64_t a1)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_1857CB2B0();
  id v3 = (void *)sub_186A1EB1C();
  id v4 = objc_msgSend(ObjCClassFromMetadata, sel_fixedGroupWithRepresentativeItem_items_, a1, v3);

  return v4;
}

unint64_t sub_1857CB2B0()
{
  unint64_t result = qword_1E8FAF9C8;
  if (!qword_1E8FAF9C8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E8FAF9C8);
  }
  return result;
}

void *_UIInternalContainerClassArrayForContainerClassArray(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(a1);
        }
        uint64_t v7 = _UIAppearanceInternalContainerClassForContainer(*(void **)(*((void *)&v9 + 1) + 8 * v6));
        if (v7) {
          [v2 addObject:v7];
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }
  return v2;
}

uint64_t _UIAppearanceInternalContainerClassForContainer(void *a1)
{
  Class = object_getClass(a1);
  BOOL isMetaClass = class_isMetaClass(Class);
  uint64_t v4 = (void *)MEMORY[0x1E4F1C3C8];
  if (!isMetaClass) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"*** %@ is not a Class", a1 format];
  }
  if (([a1 conformsToProtocol:&unk_1ED402AA0] & 1) == 0) {
    [MEMORY[0x1E4F1CA00] raise:*v4, @"*** %@ does not conform to the UIAppearanceContainer protocol", NSStringFromClass((Class)a1) format];
  }
  if (![a1 isSubclassOfClass:objc_opt_class()]) {
    return (uint64_t)a1;
  }
  return objc_opt_class();
}

id _UITableTraitsAffectingSelectionIsKey()
{
  _OWORD v2[2] = *MEMORY[0x1E4F143B8];
  v2[0] = 0x1ED3F5C28;
  v2[1] = 0x1ED3F5C70;
  dispatch_queue_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:2];
  return v0;
}

uint64_t _UITriStateToBool(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (!v3)
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UITriStateToBool(_UITriState, BOOL (^__strong)(void))");
    [v7 handleFailureInFunction:v8 file:@"UIInterface_Internal.h" lineNumber:94 description:@"_UITriStateToBool() has to be called with a defaultValue block."];
  }
  if (a1 == 2)
  {
    uint64_t v5 = 1;
  }
  else if (a1 == 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (a1)
    {
      if (os_variant_has_internal_diagnostics())
      {
        long long v9 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
        {
          int v10 = 134217984;
          uint64_t v11 = a1;
          _os_log_fault_impl(&dword_1853B0000, v9, OS_LOG_TYPE_FAULT, "Found an invalid tri state of %tu. This is an indication of corrupted memory.", (uint8_t *)&v10, 0xCu);
        }
      }
      else
      {
        uint64_t v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UITriStateToBool___s_category) + 8);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          int v10 = 134217984;
          uint64_t v11 = a1;
          _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "Found an invalid tri state of %tu. This is an indication of corrupted memory.", (uint8_t *)&v10, 0xCu);
        }
      }
    }
    uint64_t v5 = v3[2](v3);
  }

  return v5;
}

uint64_t _UITriStateToBool_0(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  if (!v3)
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UITriStateToBool(_UITriState, BOOL (^__strong)(void))");
    [v7 handleFailureInFunction:v8 file:@"UIInterface_Internal.h" lineNumber:94 description:@"_UITriStateToBool() has to be called with a defaultValue block."];
  }
  if (a1 == 2)
  {
    uint64_t v5 = 1;
  }
  else if (a1 == 1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    if (a1)
    {
      if (os_variant_has_internal_diagnostics())
      {
        long long v9 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
        {
          int v10 = 134217984;
          uint64_t v11 = a1;
          _os_log_fault_impl(&dword_1853B0000, v9, OS_LOG_TYPE_FAULT, "Found an invalid tri state of %tu. This is an indication of corrupted memory.", (uint8_t *)&v10, 0xCu);
        }
      }
      else
      {
        uint64_t v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UITriStateToBool___s_category_1) + 8);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          int v10 = 134217984;
          uint64_t v11 = a1;
          _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "Found an invalid tri state of %tu. This is an indication of corrupted memory.", (uint8_t *)&v10, 0xCu);
        }
      }
    }
    uint64_t v5 = v3[2](v3);
  }

  return v5;
}

uint64_t _UIListEnvironmentFromTableViewStyle(unint64_t a1)
{
  if (a1 < 3) {
    return a1 + 2;
  }
  uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v4 = [NSString stringWithUTF8String:"UIListEnvironment _UIListEnvironmentFromTableViewStyle(UITableViewStyle)"];
  objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UITraitListEnvironment.m", 61, @"Received unknown UITableViewStyle %ld", a1);

  return 2;
}

uint64_t ___processHasBackgroundFeedbackEntitlement_block_invoke()
{
  uint64_t result = UISelfTaskHasEntitlement(@"com.apple.private.allow-background-haptics");
  byte_1EB25D791 = result;
  return result;
}

uint64_t ___3rdParty_batteryInformationChanged_block_invoke()
{
  uint64_t result = UISelfTaskHasEntitlement(@"com.apple.private.iokit.batterydataprecise");
  byte_1EB260ED9 = result;
  return result;
}

void ___filesProtectedWhileLocked_block_invoke()
{
  id v1 = _UICopyValueForEntitlementUsingTaskCreationBlock(@"com.apple.developer.default-data-protection", (uint64_t)&__block_literal_global_604);
  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SCheckingIfFil.isa, "BOOL _filesProtectedWhileLocked(void)_block_invoke", v1);
  }
  if ([v1 isEqualToString:*MEMORY[0x1E4F28340]]) {
    char v0 = 1;
  }
  else {
    char v0 = [v1 isEqualToString:*MEMORY[0x1E4F28348]];
  }
  byte_1EB261FFC = v0;
}

uint64_t UISelfTaskHasEntitlement(void *a1)
{
  id v1 = a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __UISelfTaskHasEntitlement_block_invoke;
  v5[3] = &unk_1E52DCC28;
  id v6 = v1;
  id v2 = v1;
  uint64_t HasEntitlement = _UITaskHasEntitlement((uint64_t)v2, (uint64_t)v5);

  return HasEntitlement;
}

uint64_t _UITaskHasEntitlement(uint64_t a1, uint64_t a2)
{
  id v2 = (*(void (**)(uint64_t))(a2 + 16))(a2);
  uint64_t v3 = v2;
  if (v2 && (CFTypeID v4 = CFGetTypeID(v2), v4 == CFBooleanGetTypeID())) {
    uint64_t v5 = [v3 BOOLValue];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

id _UICopyValueForEntitlementUsingTaskCreationBlock(void *a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a2 + 16);
  CFTypeID v4 = a1;
  uint64_t v5 = (__SecTask *)v3(a2);
  if (v5)
  {
    id v6 = v5;
    CFErrorRef error = 0;
    uint64_t v7 = (void *)SecTaskCopyValueForEntitlement(v5, v4, &error);

    if (error)
    {
      NSLog(&cfstr_UnableToGetEnt.isa, error);
      CFRelease(error);
    }
    CFRelease(v6);
  }
  else
  {
    NSLog(&cfstr_UnableToCreate_2.isa, v4);

    uint64_t v7 = 0;
  }
  return v7;
}

SecTaskRef __UICopyValueForEntitlementFromSelf_block_invoke()
{
  return SecTaskCreateFromSelf(0);
}

id __UISelfTaskHasEntitlement_block_invoke(uint64_t a1)
{
  return _UICopyValueForEntitlementUsingTaskCreationBlock(*(void **)(a1 + 32), (uint64_t)&__block_literal_global_604);
}

void ___pptLogHandle_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "PPT");
  id v1 = (void *)qword_1EB264680;
  qword_1EB264680 = (uint64_t)v0;
}

void ___orientationLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "UIDevice.orientation");
  id v1 = (void *)qword_1EB260FF0;
  qword_1EB260FF0 = (uint64_t)v0;
}

uint64_t __UIDebuggingOverlayIsEnabled_block_invoke()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  if (result)
  {
    uint64_t result = _UIGetDebuggingOverlayEnabled();
    if (result) {
      uint64_t result = dyld_program_sdk_at_least();
    }
  }
  _MergedGlobals_11_15 = result;
  return result;
}

CGColorSpaceRef __GrayColorSpace_block_invoke()
{
  if (dyld_program_sdk_at_least()) {
    CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DBB8]);
  }
  else {
    CGColorSpaceRef result = CGColorSpaceCreateDeviceGray();
  }
  qword_1EB25E3F8 = (uint64_t)result;
  return result;
}

CFIndex _UIScrollViewNotifyForScrollView()
{
  CFIndex result = [(id)UIApp isFrontBoard];
  if (result)
  {
    return _UIQOSExpectComplexCommit("FrontBoard");
  }
  return result;
}

void sub_1857D5D7C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

double _UIDefaultIndexBarWidthForTraitCollection(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    CFTypeID v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"CGFloat _UIDefaultIndexBarWidthForTraitCollection(UITraitCollection *__strong)"];
    [v4 handleFailureInFunction:v5, @"UICollectionTableSharedSupport.m", 161, @"Invalid parameter not satisfying: %@", @"traitCollection != nil" file lineNumber description];
  }
  double v2 = 15.0;
  if ([v1 userInterfaceIdiom] == 1
    && ([v1 horizontalSizeClass] != 1 || (dyld_program_sdk_at_least() & 1) == 0))
  {
    double v2 = 30.0;
  }

  return v2;
}

__CFString *_NSStringFromUIUserInterfaceIdiom(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 0xB) {
    return @"UIUserInterfaceIdiomMac";
  }
  else {
    return off_1E52F2340[a1 + 1];
  }
}

void sub_1857D83B8(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v2 = a1;
  id v4 = objc_msgSend(a1, sel_traitCollection);
  id v5 = objc_msgSend(v2, sel_searchText);
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = sub_186A1E95C();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  id v10 = objc_msgSend(v2, sel__customStatesForSwiftBridging);
  if (!v10)
  {
    double v20 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_51;
  }
  uint64_t v11 = v10;
  uint64_t v66 = v9;
  uint64_t v67 = v7;
  id v68 = v4;
  id v69 = v2;
  uint64_t v70 = a2;
  type metadata accessor for UIConfigurationStateCustomKey(0);
  sub_185A4D660();
  uint64_t v12 = MEMORY[0x1E4FBC840];
  uint64_t v13 = sub_186A1E79C();

  int64_t v14 = 0;
  uint64_t v15 = *(void *)(v13 + 64);
  uint64_t v71 = v13 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v73 = v13;
  uint64_t v19 = &v84;
  int64_t v72 = (unint64_t)(v16 + 63) >> 6;
  double v20 = (void *)MEMORY[0x1E4FBC868];
  double v21 = (uint64_t *)&unk_1E8FAF2C8;
  long long v22 = 0uLL;
  uint64_t v23 = MEMORY[0x1E4FBB960];
  CFTimeInterval v24 = &qword_1E8FAED80;
  if ((v17 & v15) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  unint64_t v25 = __clz(__rbit64(v18));
  uint64_t v26 = (v18 - 1) & v18;
  unint64_t v27 = v25 | (v14 << 6);
LABEL_9:
  uint64_t v28 = *(void *)(v73 + 56);
  *(void *)&long long v80 = *(void *)(*(void *)(v73 + 48) + 8 * v27);
  CFTimeInterval v29 = (void *)v80;
  sub_1853B76BC(v28 + 32 * v27, (uint64_t)&v80 + 8);
  id v30 = v29;
  while (1)
  {
    sub_1853B8150((uint64_t)&v80, (uint64_t)&v83, v21);
    double v34 = v83;
    if (!v83)
    {
      swift_release();
      double v2 = v69;
      a2 = v70;
      uint64_t v7 = v67;
      id v4 = v68;
      uint64_t v9 = v66;
LABEL_51:
      id v64 = v2;
      id v65 = objc_msgSend(v64, sel__mutations);

      *(void *)a2 = v4;
      *(void *)(a2 + _Block_object_dispose(&STACK[0x210], 8) = v7;
      *(void *)(a2 + 16) = v9;
      *(void *)(a2 + 24) = v20;
      *(void *)(a2 + 32) = v2;
      *(void *)(a2 + 40) = v65;
      *(unsigned char *)(a2 + 4_Block_object_dispose(&STACK[0x210], 8) = 0;
      return;
    }
    unint64_t v75 = v26;
    sub_1853B7BB0(v19, &v79);
    if (!swift_dynamicCast())
    {
      uint64_t v82 = 0;
      long long v80 = 0u;
      long long v81 = 0u;
      id v50 = v34;
      sub_1853B93B8((uint64_t)&v80, v24);
      swift_bridgeObjectRetain();
      unint64_t v51 = sub_185909644(v50);
      char v53 = v52;
      swift_bridgeObjectRelease();
      if (v53)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1859BF414();
        }

        uint64_t v54 = v20[7] + 40 * v51;
        uint64_t v55 = *(void *)(v54 + 32);
        long long v56 = *(_OWORD *)(v54 + 16);
        long long v76 = *(_OWORD *)v54;
        long long v77 = v56;
        uint64_t v78 = v55;
        sub_1859BB3E8(v51, (uint64_t)v20);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v78 = 0;
        long long v76 = 0u;
        long long v77 = 0u;
      }
      unint64_t v18 = v75;

      sub_1853B93B8((uint64_t)&v76, v24);
      long long v22 = 0uLL;
      if (v75) {
        goto LABEL_8;
      }
      goto LABEL_10;
    }
    int64_t v74 = v14;
    double v35 = v24;
    uint64_t v36 = v23;
    double v37 = v19;
    double v38 = v21;
    uint64_t v39 = v12;
    long long v76 = v80;
    long long v77 = v81;
    uint64_t v78 = v82;
    id v40 = v34;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v43 = sub_185909644(v40);
    uint64_t v44 = v20[2];
    BOOL v45 = (v42 & 1) == 0;
    uint64_t v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      break;
    }
    char v47 = v42;
    if (v20[3] >= v46)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1859BF414();
      }
    }
    else
    {
      sub_185A16D48(v46, isUniquelyReferenced_nonNull_native);
      uint64_t v48 = sub_185909644(v40);
      if ((v47 & 1) != (v49 & 1)) {
        goto LABEL_56;
      }
      unint64_t v43 = v48;
    }
    uint64_t v12 = v39;
    double v21 = v38;
    if (v47)
    {
      sub_18597AA64((uint64_t)&v76, v20[7] + 40 * v43);
      uint64_t v19 = v37;
    }
    else
    {
      v20[(v43 >> 6) + 8] |= 1 << v43;
      *(void *)(v20[6] + 8 * v43) = v40;
      uint64_t v57 = v20[7] + 40 * v43;
      long long v58 = v76;
      long long v59 = v77;
      *(void *)(v57 + 32) = v78;
      *(_OWORD *)uint64_t v57 = v58;
      *(_OWORD *)(v57 + 16) = v59;
      uint64_t v60 = v20[2];
      BOOL v61 = __OFADD__(v60, 1);
      uint64_t v62 = v60 + 1;
      if (v61) {
        goto LABEL_54;
      }
      uint64_t v19 = v37;
      v20[2] = v62;
      id v63 = v40;
    }

    swift_bridgeObjectRelease();
    long long v22 = 0uLL;
    uint64_t v23 = v36;
    CFTimeInterval v24 = v35;
    int64_t v14 = v74;
    unint64_t v18 = v75;
    if (v75) {
      goto LABEL_8;
    }
LABEL_10:
    int64_t v31 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      goto LABEL_53;
    }
    if (v31 < v72)
    {
      unint64_t v32 = *(void *)(v71 + 8 * v31);
      if (v32) {
        goto LABEL_13;
      }
      int64_t v33 = v14 + 2;
      ++v14;
      if (v31 + 1 < v72)
      {
        unint64_t v32 = *(void *)(v71 + 8 * v33);
        if (v32) {
          goto LABEL_16;
        }
        int64_t v14 = v31 + 1;
        if (v31 + 2 < v72)
        {
          unint64_t v32 = *(void *)(v71 + 8 * (v31 + 2));
          if (v32)
          {
            v31 += 2;
            goto LABEL_13;
          }
          int64_t v33 = v31 + 3;
          int64_t v14 = v31 + 2;
          if (v31 + 3 < v72)
          {
            unint64_t v32 = *(void *)(v71 + 8 * v33);
            if (!v32)
            {
              while (1)
              {
                int64_t v31 = v33 + 1;
                if (__OFADD__(v33, 1)) {
                  goto LABEL_55;
                }
                if (v31 >= v72)
                {
                  int64_t v14 = v72 - 1;
                  goto LABEL_27;
                }
                unint64_t v32 = *(void *)(v71 + 8 * v31);
                ++v33;
                if (v32) {
                  goto LABEL_13;
                }
              }
            }
LABEL_16:
            int64_t v31 = v33;
LABEL_13:
            uint64_t v26 = (v32 - 1) & v32;
            unint64_t v27 = __clz(__rbit64(v32)) + (v31 << 6);
            int64_t v14 = v31;
            goto LABEL_9;
          }
        }
      }
    }
LABEL_27:
    uint64_t v26 = 0;
    uint64_t v82 = 0;
    long long v80 = v22;
    long long v81 = v22;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  sub_186A1F93C();
  __break(1u);
}

void sub_1857D8950()
{
  uint64_t v1 = *v0;
  uint64_t v3 = v0[2];
  uint64_t v2 = v0[3];
  id v4 = (void *)v0[4];
  if (v4)
  {
    id v5 = (id)v0[5];
    char v6 = *((unsigned char *)v0 + 48);
    id v7 = v4;
    id v8 = objc_msgSend(v7, sel__mutations);
    if ((v6 & 1) == 0 && v5 == v8) {
      return;
    }
  }
  id v9 = objc_msgSend(objc_allocWithZone((Class)UIContentUnavailableConfigurationState), sel_initWithTraitCollection_, v1);
  if (v3) {
    id v10 = (void *)sub_186A1E92C();
  }
  else {
    id v10 = 0;
  }
  objc_msgSend(v9, sel_setSearchText_, v10);

  uint64_t v25 = v2 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v2 + 64);
  int64_t v26 = (unint64_t)(v11 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v13) {
    goto LABEL_15;
  }
LABEL_13:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  unint64_t v17 = v16 | (v14 << 6);
  while (2)
  {
    uint64_t v18 = *(void *)(v2 + 56);
    *(void *)&long long v27 = *(void *)(*(void *)(v2 + 48) + 8 * v17);
    uint64_t v19 = (void *)v27;
    sub_18590CE30(v18 + 40 * v17, (uint64_t)&v27 + 8);
    id v20 = v19;
    while (1)
    {
      sub_1853B8150((uint64_t)&v27, (uint64_t)&v30, &qword_1E8FAED78);
      CFTimeInterval v24 = v30;
      if (!v30)
      {
        swift_release();
        return;
      }
      long long v27 = v31;
      long long v28 = v32;
      *(void *)&long long v29 = v33;
      uint64_t v15 = (void *)sub_186A1F2BC();
      sub_18590CE8C((uint64_t)&v27);
      objc_msgSend(v9, sel__setSwiftBridgingCustomState_forKey_, v15, v24);

      if (v13) {
        goto LABEL_13;
      }
LABEL_15:
      int64_t v21 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_37;
      }
      if (v21 < v26)
      {
        unint64_t v22 = *(void *)(v25 + 8 * v21);
        if (v22) {
          goto LABEL_18;
        }
        int64_t v23 = v14 + 2;
        ++v14;
        if (v21 + 1 < v26)
        {
          unint64_t v22 = *(void *)(v25 + 8 * v23);
          if (v22) {
            goto LABEL_21;
          }
          int64_t v14 = v21 + 1;
          if (v21 + 2 < v26)
          {
            unint64_t v22 = *(void *)(v25 + 8 * (v21 + 2));
            if (v22)
            {
              v21 += 2;
              goto LABEL_18;
            }
            int64_t v23 = v21 + 3;
            int64_t v14 = v21 + 2;
            if (v21 + 3 < v26) {
              break;
            }
          }
        }
      }
LABEL_32:
      unint64_t v13 = 0;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v23);
    if (v22)
    {
LABEL_21:
      int64_t v21 = v23;
LABEL_18:
      unint64_t v13 = (v22 - 1) & v22;
      unint64_t v17 = __clz(__rbit64(v22)) + (v21 << 6);
      int64_t v14 = v21;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v21 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v21 >= v26)
    {
      int64_t v14 = v26 - 1;
      goto LABEL_32;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v23;
    if (v22) {
      goto LABEL_18;
    }
  }
LABEL_37:
  __break(1u);
}

uint64_t _UIApplicationSupportsIndirectInputEventsGivenInfo(void *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _UIMainBundleIdentifier();
  if (!dyld_program_sdk_at_least())
  {
    int v5 = 0;
    goto LABEL_39;
  }
  uint64_t v3 = +[UIDevice currentDevice];
  uint64_t v4 = [v3 userInterfaceIdiom];

  if (v4 == 6)
  {
    int v5 = 1;
    goto LABEL_39;
  }
  int v6 = dyld_program_sdk_at_least();
  id v7 = _UIMainBundleIdentifier();
  if (([v7 isEqualToString:@"com.apple.springboard"] & 1) != 0
    || ([v7 isEqualToString:@"com.apple.PointerUI.pointeruid"] & 1) != 0
    || ([v7 isEqualToString:@"com.apple.mobileslideshow"] & 1) != 0
    || [v7 isEqualToString:@"com.apple.Home"])
  {
  }
  else
  {
    int v31 = [v7 isEqualToString:@"com.apple.stocks"];

    if (!v31) {
      goto LABEL_11;
    }
  }
  int v6 = 0;
LABEL_11:
  int v8 = [a1 hasSupportsIndirectInputEventsKey];
  int v9 = [a1 supportsIndirectInputEvents];
  if (v8) {
    int v5 = v9;
  }
  else {
    int v5 = v6;
  }
  int v10 = _UIInternalPreferenceUsesDefault((int *)&unk_1EB256EA8, @"BundleIdentifiersWantingOverriddenIndirectEventSupport", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateId);
  uint64_t v11 = (void *)qword_1EB256EB0;
  if (v10) {
    uint64_t v11 = 0;
  }
  id v12 = v11;
  unint64_t v13 = [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
  int64_t v14 = [v12 stringByTrimmingCharactersInSet:v13];

  if (v14 && [v14 length])
  {
    id v33 = v12;
    double v34 = v2;
    uint64_t v15 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@","];
    long long v32 = v14;
    unint64_t v16 = [v14 componentsSeparatedByCharactersInSet:v15];

    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v17 = v16;
    uint64_t v18 = [v17 countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (v18)
    {
      uint64_t v19 = v18;
      id v20 = 0;
      uint64_t v21 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          if (*(void *)v36 != v21) {
            objc_enumerationMutation(v17);
          }
          int64_t v23 = *(void **)(*((void *)&v35 + 1) + 8 * i);
          if (!v20) {
            id v20 = objc_opt_new();
          }
          CFTimeInterval v24 = [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
          uint64_t v25 = [v23 stringByTrimmingCharactersInSet:v24];

          if (v25) {
            [v20 addObject:v25];
          }
        }
        uint64_t v19 = [v17 countByEnumeratingWithState:&v35 objects:v39 count:16];
      }
      while (v19);
    }
    else
    {
      id v20 = 0;
    }

    id v12 = v33;
    uint64_t v2 = v34;
    int64_t v14 = v32;
  }
  else
  {
    id v20 = 0;
  }
  int64_t v26 = (void *)[v20 copy];

  if (v26 && [v26 containsObject:v2])
  {
    int v27 = _UIInternalPreferenceUsesDefault(&_MergedGlobals_901, @"OverrideValueForBundleIdentifiersWantingOverriddenIndirectEventSupport", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    if (byte_1EB256E9C) {
      int v5 = 1;
    }
    else {
      int v5 = v27;
    }
  }

LABEL_39:
  int v28 = _UIInternalPreferenceUsesDefault(&dword_1EB256EA0, @"ForceEnableIndirectEventSupportForAllApps", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
  BOOL v29 = byte_1EB256EA4 != 0;

  return v29 & ~v28 | v5;
}

void sub_1857DAB3C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id _UIUpdateCycleDebugOverlaySetup()
{
  return +[_UIUpdateCycleDebugOverlay instance];
}

id _domainWithCategoryAndSuffix(void *a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a2;
  id v7 = a1;
  if ([v5 length])
  {
    id v14 = v7;
    id v15 = v6;
    id v16 = v5;
    int v8 = (void *)MEMORY[0x1E4F1C978];
    int v9 = &v14;
    uint64_t v10 = 3;
  }
  else
  {
    id v17 = v7;
    id v18 = v6;
    int v8 = (void *)MEMORY[0x1E4F1C978];
    int v9 = &v17;
    uint64_t v10 = 2;
  }
  uint64_t v11 = objc_msgSend(v8, "arrayWithObjects:count:", v9, v10, v14, v15, v16, v17, v18, v19);

  id v12 = [v11 componentsJoinedByString:@"."];

  return v12;
}

__CFString *_UIStatisticsBundleIdentifier(uint64_t a1)
{
  uint64_t v1 = &stru_1ED0E84C0;
  if (a1 != 1)
  {
    if (qword_1EB264D50 != -1) {
      dispatch_once(&qword_1EB264D50, &__block_literal_global_411_1);
    }
    BOOL v3 = _MergedGlobals_1299 == 0;
    if (a1) {
      BOOL v3 = a1 != 3;
    }
    uint64_t v4 = (__CFString *)qword_1EB264D48;
    if (v3 && byte_1EB264C81 == 0) {
      uint64_t v4 = &stru_1ED0E84C0;
    }
    uint64_t v1 = v4;
  }
  return v1;
}

void _UITouchesEventCommonInit(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  v1[17] = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
  v1[18] = CFDictionaryCreateMutable(0, 0, 0, v2);
  v1[19] = CFDictionaryCreateMutable(0, 0, 0, v2);
  uint64_t v3 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
  uint64_t v4 = (void *)v1[20];
  v1[20] = v3;

  v1[21] = CFDictionaryCreateMutable(0, 0, 0, v2);
  v1[22] = CFDictionaryCreateMutable(0, 0, 0, v2);
  v1[27] = -1;
  uint64_t v5 = objc_opt_new();
  id v6 = (id)v1[24];
  v1[24] = v5;
}

uint64_t __UIViewCommonInitWithFrame_block_invoke()
{
  uint64_t result = dyld_program_sdk_at_least();
  if ((result & 1) == 0)
  {
    objc_opt_class();
    return _class_setCustomDeallocInitiation();
  }
  return result;
}

void _UIBackdropViewComputeLegibleColorWithColorSettings(void *a1)
{
  id v1 = a1;
  [v1 averageBrightness];
  double v3 = v2;
  [v1 contrast];
  double v5 = v4;

  _UI2DInterpolation((uint64_t)&unk_186B93078, 16, v3, v5);
}

double _UI2DInterpolation(uint64_t a1, uint64_t a2, double a3, double a4)
{
  if (a2)
  {
    double v4 = (double *)(a1 + 16);
    double v5 = 0.0;
    double v6 = 1.79769313e308;
    double v7 = 1.79769313e308;
    double v8 = 0.0;
    do
    {
      double v9 = sqrt((a3 - *(v4 - 2)) * (a3 - *(v4 - 2)) + (a4 - *(v4 - 1)) * (a4 - *(v4 - 1)));
      if (v9 >= v7)
      {
        double v10 = v8;
        if (v9 >= v6)
        {
          double v8 = v5;
          double v11 = v7;
          double v7 = v6;
        }
        else
        {
          double v8 = *v4;
          double v11 = v7;
          double v7 = v9;
        }
      }
      else
      {
        double v10 = *v4;
        double v11 = v9;
      }
      v4 += 3;
      double v12 = v8;
      double v13 = v7;
      double v6 = v7;
      double v7 = v11;
      double v5 = v8;
      double v8 = v10;
      --a2;
    }
    while (a2);
  }
  else
  {
    double v10 = 0.0;
    double v11 = 1.79769313e308;
    double v12 = 0.0;
    double v13 = 1.79769313e308;
  }
  double v14 = v13 / (v11 + v13);
  if (v11 + v13 <= 0.0) {
    double v14 = 1.0;
  }
  return v10 * v14 + v12 * (1.0 - v14);
}

CGAffineTransform *_UIScaleTransformForAspectFitOrFillOfSizeInTargetSize@<X0>(CGAffineTransform *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v6 = MEMORY[0x1E4F1DAB8];
  long long v7 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a2 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v6 + 32);
  if (a3 > 0.0 && a4 > 0.0)
  {
    double v8 = fmax(a5, 0.1) / a3;
    double v9 = fmax(a6, 0.1) / a4;
    if (v8 >= v9) {
      double v10 = v9;
    }
    else {
      double v10 = v8;
    }
    if (v8 <= v9) {
      double v8 = v9;
    }
    if (result) {
      double v8 = v10;
    }
    return CGAffineTransformMakeScale((CGAffineTransform *)a2, v8, v8);
  }
  return result;
}

void __initializeActiveUserInterfaceIdiom_block_invoke()
{
  if (qword_1EB260F08 != -1) {
    dispatch_once(&qword_1EB260F08, &__block_literal_global_55_1);
  }
  sActiveUserInterfaceIdiom = qword_1EB260F00;
}

void ____associateFlagWithPreferencesKeyLocked_block_invoke_2()
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)__preferencesNotificationCallback, @"com.apple.UIKit.LoggingPreferences", 0, CFNotificationSuspensionBehaviorCoalesce);
}

uint64_t _UIViewTouchShouldBegin(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (!a3 || a3 == a4) {
    return 1;
  }
  long long v7 = (void *)MEMORY[0x1E4F1CAD0];
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  double v11 = [v7 setWithObject:a1];
  uint64_t v12 = [v8 touchesShouldBegin:v11 withEvent:v10 inContentView:v9];

  return v12;
}

id _colorsByThemeKeysecondarySystemGroupedBackgroundColor()
{
  v23[10] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = _UIThemeKeyFromTraitValues(-1, 0, 0, 0, 0, 0);
  v22[0] = v21;
  id v20 = [(UIDeviceWhiteColor *)[UICachedDeviceWhiteColor alloc] initWithWhite:1.0 alpha:1.0];
  v23[0] = v20;
  uint64_t v19 = _UIThemeKeyFromTraitValues(-1, 0, 1, 0, 0, 0);
  v22[1] = v19;
  id v18 = [(UIDeviceWhiteColor *)[UICachedDeviceWhiteColor alloc] initWithWhite:1.0 alpha:1.0];
  v23[1] = v18;
  id v17 = _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 0, 0);
  v22[2] = v17;
  id v16 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.109803922 green:0.109803922 blue:0.117647059 alpha:1.0];
  v23[2] = v16;
  id v15 = _UIThemeKeyFromTraitValues(-1, 2, 1, 0, 0, 0);
  v22[3] = v15;
  double v14 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.141176471 green:0.141176471 blue:0.149019608 alpha:1.0];
  v23[3] = v14;
  double v13 = _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 1, 0);
  void v22[4] = v13;
  uint64_t v12 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.17254902 green:0.17254902 blue:0.180392157 alpha:1.0];
  v23[4] = v12;
  double v11 = _UIThemeKeyFromTraitValues(-1, 2, 1, 0, 1, 0);
  v22[5] = v11;
  os_log_t v0 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.211764706 green:0.211764706 blue:0.219607843 alpha:1.0];
  v23[5] = v0;
  id v1 = _UIThemeKeyFromTraitValues(4, 2, 0, 0, 0, 0);
  v22[6] = v1;
  double v2 = [(UIDeviceWhiteColor *)[UICachedDeviceWhiteColor alloc] initWithWhite:0.0 alpha:1.0];
  v23[6] = v2;
  double v3 = _UIThemeKeyFromTraitValues(4, 2, 1, 0, 0, 0);
  v22[7] = v3;
  double v4 = [(UIDeviceWhiteColor *)[UICachedDeviceWhiteColor alloc] initWithWhite:0.0 alpha:1.0];
  id v23[7] = v4;
  double v5 = _UIThemeKeyFromTraitValues(4, 1, 0, 0, 0, 0);
  v22[8] = v5;
  uint64_t v6 = [(UIDeviceWhiteColor *)[UICachedDeviceWhiteColor alloc] initWithWhite:1.0 alpha:1.0];
  v23[8] = v6;
  long long v7 = _UIThemeKeyFromTraitValues(4, 1, 1, 0, 0, 0);
  v22[9] = v7;
  id v8 = [(UIDeviceWhiteColor *)[UICachedDeviceWhiteColor alloc] initWithWhite:1.0 alpha:1.0];
  v23[9] = v8;
  id v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:v22 count:10];

  return v9;
}

id _colorsByThemeKeysystemGroupedBackgroundColor()
{
  v19[8] = *MEMORY[0x1E4F143B8];
  id v17 = _UIThemeKeyFromTraitValues(-1, 0, 0, 0, 0, 0);
  v18[0] = v17;
  id v16 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.949019608 green:0.949019608 blue:0.968627451 alpha:1.0];
  v19[0] = v16;
  id v15 = _UIThemeKeyFromTraitValues(-1, 0, 1, 0, 0, 0);
  v18[1] = v15;
  double v14 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.921568627 green:0.921568627 blue:0.941176471 alpha:1.0];
  v19[1] = v14;
  double v13 = _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 0, 0);
  v18[2] = v13;
  uint64_t v12 = [(UIDeviceWhiteColor *)[UICachedDeviceWhiteColor alloc] initWithWhite:0.0 alpha:1.0];
  v19[2] = v12;
  double v11 = _UIThemeKeyFromTraitValues(-1, 2, 1, 0, 0, 0);
  v18[3] = v11;
  os_log_t v0 = [(UIDeviceWhiteColor *)[UICachedDeviceWhiteColor alloc] initWithWhite:0.0 alpha:1.0];
  v19[3] = v0;
  id v1 = _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 1, 0);
  v18[4] = v1;
  double v2 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.109803922 green:0.109803922 blue:0.117647059 alpha:1.0];
  v19[4] = v2;
  double v3 = _UIThemeKeyFromTraitValues(-1, 2, 1, 0, 1, 0);
  v18[5] = v3;
  double v4 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.141176471 green:0.141176471 blue:0.149019608 alpha:1.0];
  v19[5] = v4;
  double v5 = _UIThemeKeyFromTraitValues(4, 1, 0, 0, 0, 0);
  v18[6] = v5;
  uint64_t v6 = [(UIDeviceWhiteColor *)[UICachedDeviceWhiteColor alloc] initWithWhite:1.0 alpha:1.0];
  v19[6] = v6;
  long long v7 = _UIThemeKeyFromTraitValues(4, 1, 1, 0, 0, 0);
  v18[7] = v7;
  id v8 = [(UIDeviceWhiteColor *)[UICachedDeviceWhiteColor alloc] initWithWhite:1.0 alpha:1.0];
  v19[7] = v8;
  id v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:v18 count:8];

  return v9;
}

id _colorsByThemeKeyseparatorColor()
{
  v11[4] = *MEMORY[0x1E4F143B8];
  os_log_t v0 = _UIThemeKeyFromTraitValues(-1, 0, 0, 0, 0, 0);
  v10[0] = v0;
  id v1 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.235294118 green:0.235294118 blue:0.262745098 alpha:0.29];
  v11[0] = v1;
  double v2 = _UIThemeKeyFromTraitValues(-1, 0, 1, 0, 0, 0);
  v10[1] = v2;
  double v3 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.235294118 green:0.235294118 blue:0.262745098 alpha:0.37];
  v11[1] = v3;
  double v4 = _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 0, 0);
  void v10[2] = v4;
  double v5 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.329411765 green:0.329411765 blue:0.345098039 alpha:0.6];
  _OWORD v11[2] = v5;
  uint64_t v6 = _UIThemeKeyFromTraitValues(-1, 2, 1, 0, 0, 0);
  void v10[3] = v6;
  long long v7 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.329411765 green:0.329411765 blue:0.345098039 alpha:0.68];
  void v11[3] = v7;
  id v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:4];

  return v8;
}

uint64_t _UIThemeKeyLeastSpecific()
{
  return [NSNumber numberWithUnsignedInteger:0];
}

void UICollectionViewListCell.accessories.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_186A1F49C();
    uint64_t v4 = 40;
    do
    {
      id v5 = *(id *)(a1 + v4);
      sub_186A1F46C();
      sub_186A1F4AC();
      sub_186A1F4BC();
      sub_186A1F47C();
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
  sub_1853B985C(0, (unint64_t *)&qword_1EB255968);
  id v6 = (id)sub_186A1EB1C();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setAccessories_, v6);
}

void sub_1857E4F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double __machDurationOfSecond_block_invoke()
{
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  LODWORD(v0) = info.numer;
  double result = (double)(1000000000 * (unint64_t)info.denom) / (double)v0;
  *(double *)&qword_1EB2621C0 = result;
  return result;
}

void ____associateFlagWithPreferencesKeyLocked_block_invoke()
{
  unint64_t v0 = dispatch_get_global_queue(-32768, 0);
  dispatch_async(v0, &__block_literal_global_12_9);
}

id _getRestorationInProgressDictionary(void *a1, int a2, BOOL *a3)
{
  id v5 = _restorationInProgressFilePath(a1);
  id v6 = [MEMORY[0x1E4F1CA60] dictionaryWithContentsOfURL:v5];
  if (a3) {
    *a3 = v6 != 0;
  }
  if (v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = a2 == 0;
  }
  if (v7)
  {
    id v8 = v6;
LABEL_11:
    uint64_t v12 = v8;
    double v11 = v8;
    goto LABEL_13;
  }
  id v9 = (void *)MEMORY[0x1E4F1CA60];
  id v10 = [NSNumber numberWithInteger:2];
  double v11 = objc_msgSend(v9, "dictionaryWithObjectsAndKeys:", v10, @"kRestorationTriesLeft", 0);

  if ([v11 writeToURL:v5 atomically:1])
  {
    id v8 = v11;
    goto LABEL_11;
  }
  NSLog(&cfstr_WarningUnableT_1.isa);
  uint64_t v12 = 0;
LABEL_13:

  return v12;
}

void _decrementRestorationMarkerCount(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id obj = v3;
  objc_sync_enter(obj);
  id v5 = obj;
  uint64_t v6 = --qword_1EB25B890;
  if (!qword_1EB25B890)
  {
    _deleteRestorationInProgressFile(v4);
    uint64_t v6 = qword_1EB25B890;
    id v5 = obj;
  }
  objc_sync_exit(v5);

  if (v6 < 0) {
    NSLog(&cfstr_WarningComplet.isa);
  }
}

void sub_1857E5ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void _deleteRestorationInProgressFile(void *a1)
{
  id v1 = _restorationInProgressFilePath(a1);
  double v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v3 = 0;
  [v2 removeItemAtURL:v1 error:&v3];
}

id _restorationInProgressFilePath(void *a1)
{
  id v1 = _restorationDirectory(a1);
  double v2 = [v1 URLByAppendingPathComponent:@"inprogress.data" isDirectory:0];

  return v2;
}

void _saveSceneSessionUserInfo(void *a1)
{
  id v1 = a1;
  [v1 _setUserInfoIsDirty:0];
  double v2 = [v1 userInfo];
  uint64_t v3 = [v1 persistentIdentifier];
  id v4 = _restorationDirectory(v3);
  id v5 = [v4 URLByAppendingPathComponent:@"userInfo.data" isDirectory:0];

  if (v2)
  {
    if ([MEMORY[0x1E4F28F98] propertyList:v2 isValidForFormat:100])
    {
      uint64_t v6 = [v1 persistentIdentifier];
      _ensureRestorationDirectoryExists(v6);

      id v14 = 0;
      [v2 writeToURL:v5 error:&v14];
      id v7 = v14;
      if (v7)
      {
        if (_UIStateRestorationDebugLogEnabled()) {
          NSLog(&cfstr_SCouldNotSaveS.isa, "void _saveSceneSessionUserInfo(UISceneSession *__strong)", v7);
        }
        goto LABEL_22;
      }
      if (_UIStateRestorationDebugLogEnabled())
      {
        id v7 = 0;
        NSLog(&cfstr_SSavedSceneSes.isa, "void _saveSceneSessionUserInfo(UISceneSession *__strong)");
        goto LABEL_22;
      }
    }
    else if (_UIStateRestorationDebugLogEnabled())
    {
      NSLog(&cfstr_SSceneSessionU_0.isa, "void _saveSceneSessionUserInfo(UISceneSession *__strong)");
    }
    id v7 = 0;
    goto LABEL_22;
  }
  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SNothingToSave_0.isa, "void _saveSceneSessionUserInfo(UISceneSession *__strong)", v5);
  }
  id v8 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v15 = 0;
  char v9 = [v8 removeItemAtURL:v5 error:&v15];
  id v10 = v15;

  if (v10 || (id v7 = 0, (v9 & 1) == 0))
  {
    if (v10)
    {
      double v11 = [v10 domain];
      uint64_t v12 = v11;
      if (v11 == (void *)*MEMORY[0x1E4F281F8])
      {
        uint64_t v13 = [v10 code];

        if (v13 == 4)
        {
LABEL_21:
          id v7 = v10;
          goto LABEL_22;
        }
      }
      else
      {
      }
    }
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SWarningUnable_1.isa, "void _saveSceneSessionUserInfo(UISceneSession *__strong)", v5, v10);
    }
    goto LABEL_21;
  }
LABEL_22:
}

void sub_1857E6544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2 == 1)
  {
    id v10 = objc_begin_catch(exception_object);
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SExceptionOccu_0.isa);
    }

    objc_end_catch();
    JUMPOUT(0x1857E6500);
  }
  _Unwind_Resume(exception_object);
}

void sub_1857E6700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1857E6978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSBSApplicationShortcutTemplateIconClass_block_invoke(uint64_t a1)
{
  SpringBoardServicesLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SBSApplicationShortcutTemplateIcon");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSBSApplicationShortcutTemplateIconClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getSBSApplicationShortcutTemplateIconClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIApplicationShortcutItem.m", 23, @"Unable to find class %s", "SBSApplicationShortcutTemplateIcon");

    __break(1u);
  }
}

void sub_1857E72E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1857E77F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___queue_scheduleUpdateAndSaveForPersistedSceneSessions_block_invoke_3()
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v0 = _queue_persistentIdentifiersForDeletion();
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v1 = [v0 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v29 != v3) {
          objc_enumerationMutation(v0);
        }
        [(id)objc_opt_class() _deleteSavedSceneSessionDirectoryWithPersistentIdentifier:*(void *)(*((void *)&v28 + 1) + 8 * i)];
      }
      uint64_t v2 = [v0 countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v2);
  }
  [v0 removeAllObjects];
  id v5 = _restorationDirectory(@"KnownSceneSessions");
  uint64_t v6 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v27 = 0;
  [v6 createDirectoryAtURL:v5 withIntermediateDirectories:1 attributes:0 error:&v27];
  id v7 = v27;

  id v8 = _restorationPath(@"KnownSceneSessions");
  if (qword_1EB262020 != -1) {
    dispatch_once(&qword_1EB262020, &__block_literal_global_594);
  }
  if (byte_1EB261FFC && _UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SFilesAreProte.isa, "void _queue_updateAndSavePersistedSceneSessions(void)");
  }
  id v26 = 0;
  char v9 = [MEMORY[0x1E4F28F98] dataWithPropertyList:qword_1EB262000 format:200 options:0 error:&v26];
  id v10 = v26;

  if (v9 && !v10)
  {
    id v25 = 0;
    [v9 writeToURL:v8 options:0x40000000 error:&v25];
    id v11 = v25;
    if (v11)
    {
      id v10 = v11;
      if (_UIStateRestorationDebugLogEnabled()) {
        NSLog(&cfstr_SCouldNotWrite.isa, "void _queue_updateAndSavePersistedSceneSessions(void)", v10);
      }
      goto LABEL_36;
    }
    id v24 = 0;
    uint64_t v12 = *MEMORY[0x1E4F1C590];
    id v23 = 0;
    [v8 getResourceValue:&v24 forKey:v12 error:&v23];
    id v13 = v24;
    id v14 = v23;
    id v15 = v14;
    if (v14)
    {
      NSLog(&cfstr_SErrorGettingP_0.isa, "void _queue_updateAndSavePersistedSceneSessions(void)", v14);
    }
    else if (_UIStateRestorationDebugLogEnabled())
    {
      NSLog(&cfstr_SFileProtectio_0.isa, "void _queue_updateAndSavePersistedSceneSessions(void)", v13);
    }
    if (byte_1EB261FFA != 1)
    {
      id v10 = v15;
LABEL_35:

      goto LABEL_36;
    }
    byte_1EB261FFA = 0;
    id v16 = _restorationDirectory(@"KnownCanvasDefinitions");
    id v17 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v22 = v15;
    char v18 = [v17 removeItemAtURL:v16 error:&v22];
    id v10 = v22;

    if (v10 || (v18 & 1) == 0)
    {
      if (!v10) {
        goto LABEL_32;
      }
      uint64_t v19 = [v10 domain];
      id v20 = v19;
      if (v19 != (void *)*MEMORY[0x1E4F281F8])
      {

        goto LABEL_32;
      }
      uint64_t v21 = [v10 code];

      if (v21 != 4)
      {
LABEL_32:
        if (_UIStateRestorationDebugLogEnabled()) {
          NSLog(&cfstr_SWarningUnable_2.isa, "void _queue_updateAndSavePersistedSceneSessions(void)", v16, v10);
        }
      }
    }

    goto LABEL_35;
  }
  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SCouldNotConve_1.isa, "void _queue_updateAndSavePersistedSceneSessions(void)", v10);
  }
LABEL_36:
  byte_1EB261FFB = 0;
  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SCompletedWork.isa, "void _queue_updateAndSavePersistedSceneSessions(void)", qword_1EB262018);
  }
  _queue_end_backgroundTaskToUpdatePersistentSceneSessionMap();
}

id _queue_persistentIdentifiersForDeletion()
{
  unint64_t v0 = (void *)_queue_persistentIdentifiersForDeletion__persistentIdentifiersForDeletionSet;
  if (!_queue_persistentIdentifiersForDeletion__persistentIdentifiersForDeletionSet)
  {
    id v1 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    uint64_t v2 = (void *)_queue_persistentIdentifiersForDeletion__persistentIdentifiersForDeletionSet;
    _queue_persistentIdentifiersForDeletion__persistentIdentifiersForDeletionSet = (uint64_t)v1;

    unint64_t v0 = (void *)_queue_persistentIdentifiersForDeletion__persistentIdentifiersForDeletionSet;
  }
  return v0;
}

void _queue_end_backgroundTaskToUpdatePersistentSceneSessionMap()
{
  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SCalledToEndBa.isa, "void _queue_end_backgroundTaskToUpdatePersistentSceneSessionMap(void)", qword_1EB262018);
  }
  if (qword_1EB262018)
  {
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_STheBackground.isa, "void _queue_end_backgroundTaskToUpdatePersistentSceneSessionMap(void)", qword_1EB262018);
    }
    [(id)UIApp _endBackgroundTask:qword_1EB262018];
    qword_1EB262018 = 0;
  }
}

void __getSBSApplicationShortcutServiceClass_block_invoke(uint64_t a1)
{
  SpringBoardServicesLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SBSApplicationShortcutService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSBSApplicationShortcutServiceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getSBSApplicationShortcutServiceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIApplication.m", 485, @"Unable to find class %s", "SBSApplicationShortcutService");

    __break(1u);
  }
}

void SpringBoardServicesLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    v3[3] = __SpringBoardServicesLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E52DCE08;
    uint64_t v5 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIApplicationShortcutItem.m", 18, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  unint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

void *SpringBoardServicesLibrary_0()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_0)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __SpringBoardServicesLibraryCore_block_invoke_3;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52F35C8;
    uint64_t v6 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  unint64_t v0 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary_0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_0)
  {
    unint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardInputModeController.m", 104, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *SpringBoardServicesLibrary_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_2)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __SpringBoardServicesLibraryCore_block_invoke_6;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E5302F00;
    uint64_t v6 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrary_2 = _sl_dlopen();
  }
  unint64_t v0 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary_2;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_2)
  {
    unint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIApplication.m", 474, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *SpringBoardServicesLibrary_2()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_3)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __SpringBoardServicesLibraryCore_block_invoke_7;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E530DB00;
    uint64_t v6 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrary_3 = _sl_dlopen();
  }
  unint64_t v0 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary_3;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_3)
  {
    unint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIAlertView_ViewServiceSupport.m", 27, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *SpringBoardServicesLibrary_3()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_4)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __SpringBoardServicesLibraryCore_block_invoke_9;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E5310AA0;
    uint64_t v6 = 0;
    SpringBoardServicesLibraryCore_frameworkLibrary_4 = _sl_dlopen();
  }
  unint64_t v0 = (void *)SpringBoardServicesLibraryCore_frameworkLibrary_4;
  if (!SpringBoardServicesLibraryCore_frameworkLibrary_4)
  {
    unint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebClip.m", 46, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void __getSBSApplicationShortcutSystemIconClass_block_invoke(uint64_t a1)
{
  SpringBoardServicesLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SBSApplicationShortcutSystemIcon");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSBSApplicationShortcutSystemIconClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getSBSApplicationShortcutSystemIconClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIApplicationShortcutItem.m", 22, @"Unable to find class %s", "SBSApplicationShortcutSystemIcon");

    __break(1u);
  }
}

void __getSBSApplicationShortcutItemClass_block_invoke(uint64_t a1)
{
  SpringBoardServicesLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SBSApplicationShortcutItem");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSBSApplicationShortcutItemClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getSBSApplicationShortcutItemClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIApplicationShortcutItem.m", 25, @"Unable to find class %s", "SBSApplicationShortcutItem");

    __break(1u);
  }
}

void _ensureRestorationDirectoryExists(void *a1)
{
  id v1 = _restorationDirectory(a1);
  uint64_t v2 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v3 = 0;
  [v2 createDirectoryAtURL:v1 withIntermediateDirectories:1 attributes:0 error:&v3];
}

void __preFenceHandler_block_invoke_7()
{
  unint64_t v0 = (void *)MEMORY[0x18C108260]();
  if (pthread_main_np() != 1)
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"__preFenceHandler_block_invoke_7"];
    [v2 handleFailureInFunction:v3 file:@"UIWindow.m" lineNumber:5702 description:@"__preFenceHandler must be called on the main thread"];
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __preFenceHandler_block_invoke_8;
  aBlock[3] = &__block_descriptor_33_e8_v12__0B8l;
  BOOL v7 = __caCommitState == 1;
  id v1 = (void (**)(void *, void))_Block_copy(aBlock);
  v1[2](v1, 0);
  [(id)UIApp _synchronizeSystemAnimationFencesWithSpinCleanUpBlock:v1];
  if ([(id)qword_1EB259E80 count])
  {
    long long v4 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"__preFenceHandler_block_invoke_7"];
    [v4 handleFailureInFunction:v5 file:@"UIWindow.m" lineNumber:5736 description:@"we can't support registering new preFenceHandlers after the system animation synchronizes"];
  }
  if (__caCommitState != 1) {
    __caCommitState = 0;
  }
  byte_1EB259DB5 = 0;
}

uint64_t __preFenceHandler_block_invoke_8(uint64_t a1, int a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 32))
  {
    if (!a2) {
      goto LABEL_13;
    }
  }
  else
  {
    __caCommitState = 2;
    if (!a2) {
      goto LABEL_13;
    }
  }
  uint64_t v2 = (void *)MEMORY[0x18C108260]();
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v3 = __windowsWithContexts();
  uint64_t v4 = [v3 countByEnumeratingWithState:&v33 objects:v39 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v34 != v6) {
          objc_enumerationMutation(v3);
        }
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(*((void *)&v33 + 1) + 8 * i) + 464));
        char v9 = [WeakRetained layer];
        [v9 layoutIfNeeded];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v33 objects:v39 count:16];
    }
    while (v5);
  }

LABEL_13:
  for (uint64_t result = [(id)qword_1EB259E80 count]; result; uint64_t result = objc_msgSend((id)qword_1EB259E80, "count"))
  {
    id v11 = (void *)MEMORY[0x18C108260]();
    uint64_t v12 = (void *)[(id)qword_1EB259E80 copy];
    [(id)qword_1EB259E80 removeAllObjects];
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v13 = v12;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v29 objects:v38 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v30;
      do
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          if (*(void *)v30 != v16) {
            objc_enumerationMutation(v13);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v29 + 1) + 8 * j) + 16))();
        }
        uint64_t v15 = [v13 countByEnumeratingWithState:&v29 objects:v38 count:16];
      }
      while (v15);
    }

    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    char v18 = __windowsWithContexts();
    uint64_t v19 = [v18 countByEnumeratingWithState:&v25 objects:v37 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v26;
      do
      {
        for (uint64_t k = 0; k != v20; ++k)
        {
          if (*(void *)v26 != v21) {
            objc_enumerationMutation(v18);
          }
          id v23 = objc_loadWeakRetained((id *)(*(void *)(*((void *)&v25 + 1) + 8 * k) + 464));
          id v24 = [v23 layer];
          [v24 layoutIfNeeded];
        }
        uint64_t v20 = [v18 countByEnumeratingWithState:&v25 objects:v37 count:16];
      }
      while (v20);
    }
  }
  return result;
}

uint64_t _UIApplicationIsSystemApplication()
{
  if (qword_1EB25B8C0 != -1) {
    dispatch_once(&qword_1EB25B8C0, &__block_literal_global_3607);
  }
  return byte_1EB25B50A;
}

id _UIInputWindowControllerLogger()
{
  if (qword_1EB25C3D8 != -1) {
    dispatch_once(&qword_1EB25C3D8, &__block_literal_global_1078);
  }
  unint64_t v0 = (void *)qword_1EB25C3D0;
  return v0;
}

void _ensureDebugName(void *a1, void *a2)
{
  id v10 = a1;
  id v3 = a2;
  if (!v10[51])
  {
    uint64_t v4 = NSString;
    uint64_t v5 = v3;
    if (!v3)
    {
      uint64_t v6 = (objc_class *)objc_opt_class();
      uint64_t v5 = NSStringFromClass(v6);
    }
    uint64_t v7 = _ensureDebugName___windowCreationCount++;
    uint64_t v8 = [v4 stringWithFormat:@"%@-%p-%u", v5, v10, v7];
    char v9 = (void *)v10[51];
    v10[51] = v8;

    if (!v3) {
  }
    }
}

void InsertWindow(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = GetRotationFollowingWindows();
  [v2 compact];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)v13;
    while (2)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v5 + v6;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v3);
        }
        id v10 = *(void **)(*((void *)&v12 + 1) + 8 * v8);
        if (v10)
        {
          uint64_t v11 = objc_msgSend(v10, "priorityLevel", (void)v12);
          if (v11 < [v1 priorityLevel])
          {
            uint64_t v9 = v6 + v8;
            goto LABEL_13;
          }
        }
        ++v8;
      }
      while (v5 != v8);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v6 = v9;
      if (v5) {
        continue;
      }
      break;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
LABEL_13:

  [v3 insertPointer:v1 atIndex:v9];
}

id GetRotationFollowingWindows()
{
  if (qword_1EB260BC0 != -1) {
    dispatch_once(&qword_1EB260BC0, &__block_literal_global_101);
  }
  unint64_t v0 = (void *)_MergedGlobals_1073;
  return v0;
}

void _UIUpdateCycleUnregisterIdleObserver(void *a1)
{
  id v7 = a1;
  if (pthread_main_np() != 1)
  {
    uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v6 = [NSString stringWithUTF8String:"void _UIUpdateCycleUnregisterIdleObserver(__strong id<_UIUpdateCycleIdleObserver> _Nonnull)"];
    [v5 handleFailureInFunction:v6 file:@"_UIUpdateCycleIdleScheduler.m" lineNumber:99 description:@"Idle observers must be unregistered on the main thread."];
  }
  uint64_t v1 = _indexOfIdleObserver(v7);
  if (v1 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v2 = v1;
    id v3 = (void *)[(id)qword_1EB25D368 copy];
    [v3 removePointerAtIndex:v2];
    uint64_t v4 = (void *)qword_1EB25D368;
    qword_1EB25D368 = (uint64_t)v3;
  }
}

void _UIUpdateCycleRegisterIdleObserver(void *a1)
{
  id v6 = a1;
  if (pthread_main_np() != 1)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"void _UIUpdateCycleRegisterIdleObserver(__strong id<_UIUpdateCycleIdleObserver> _Nonnull)"];
    [v4 handleFailureInFunction:v5 file:@"_UIUpdateCycleIdleScheduler.m" lineNumber:84 description:@"Idle observers must be registered on the main thread."];
  }
  id v1 = (id)qword_1EB25D368;
  if (v1)
  {
    uint64_t v2 = v1;
    if (_indexOfIdleObserver(v6) != 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_8;
    }
    uint64_t v3 = [v2 copy];

    uint64_t v2 = (void *)v3;
  }
  else
  {
    uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F28F50]) initWithOptions:517];
  }
  [v2 addPointer:v6];
  objc_storeStrong((id *)&qword_1EB25D368, v2);
LABEL_8:
}

uint64_t _indexOfIdleObserver(void *a1)
{
  id v1 = a1;
  id v2 = (id)qword_1EB25D368;
  if ([v2 count])
  {
    uint64_t v3 = 0;
    while ((id)[v2 pointerAtIndex:v3] != v1)
    {
      if (++v3 >= (unint64_t)[v2 count]) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v3;
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  id v1 = (__CFString *)CFStringCreateWithFormat(0, 0, @"{{%.*g, %.*g}, {%.*g, %.*g}}", 17, *(void *)&rect.origin.x, 17, *(void *)&rect.origin.y, 17, *(void *)&rect.size.width, 17, *(void *)&rect.size.height);
  return (NSString *)v1;
}

void sub_1857F1ED4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void __InitializeUIKitBundlePath()
{
  _UIKitBundle();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v0 = [v2 bundlePath];
  id v1 = (void *)__kitLocation;
  __kitLocation = v0;
}

void _updateLastRestorationDictionaryForPersistentIdentifier(void *a1, void *a2)
{
  id v9 = a1;
  id v3 = a2;
  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SCalledToUpdat.isa, "void _updateLastRestorationDictionaryForPersistentIdentifier(NSDictionary * _Nullable __strong, NSString *__strong)", v3, v9);
  }
  if (v3)
  {
    uint64_t v4 = [v9 objectForKeyedSubscript:@"CanvasRestorationUserActivityUserInfoDataKey"];
    uint64_t v5 = (void *)v4;
    if (!v4 || _lastRestorationDictionaryMap)
    {
      if (!v4) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v6 = [MEMORY[0x1E4F1CA60] dictionary];
      id v7 = (void *)_lastRestorationDictionaryMap;
      _lastRestorationDictionaryMap = v6;
    }
    if ((unint64_t)[v5 length] < 0x6401)
    {
      id v8 = v9;
LABEL_15:
      id v9 = v8;
      [(id)_lastRestorationDictionaryMap setObject:v8 forKeyedSubscript:v3];

      goto LABEL_16;
    }
LABEL_11:
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SClearingLastR.isa, "void _updateLastRestorationDictionaryForPersistentIdentifier(NSDictionary * _Nullable __strong, NSString *__strong)", [v5 length], 25600);
    }

    id v8 = 0;
    goto LABEL_15;
  }
  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SNoPersistentI_0.isa, "void _updateLastRestorationDictionaryForPersistentIdentifier(NSDictionary * _Nullable __strong, NSString *__strong)");
  }
LABEL_16:
}

uint64_t debugTracingCheck()
{
  int v0 = _UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_UpdateCycleTracing, @"UpdateCycleTracing", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger);
  int v1 = dword_1EB2577C0;
  if (v0) {
    int v1 = 0;
  }
  BOOL v2 = v1 == 1;
  if (v1 <= 1) {
    uint64_t result = v1;
  }
  else {
    uint64_t result = 2;
  }
  if (v1 <= 1) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = debugTracingTracepointsWithCallstacks;
  }
  if (v2) {
    uint64_t v4 = debugTracingTracepoints;
  }
  _UIUpdateCycleDebugTracingChecuint64_t k = v4;
  return result;
}

id _persistenceQueue()
{
  if (qword_1EB262010 != -1) {
    dispatch_once(&qword_1EB262010, &__block_literal_global_516_0);
  }
  int v0 = (void *)qword_1EB262008;
  return v0;
}

BOOL ___largeTitleBaselineToTopDistance_block_invoke()
{
  BOOL result = _UIIsFourInch();
  double v1 = 36.0;
  if (result) {
    double v1 = 31.0;
  }
  qword_1EB25F250 = *(void *)&v1;
  return result;
}

BOOL ___largeTitleRestingHeight_block_invoke()
{
  BOOL result = _UIIsFourInch();
  double v1 = 52.0;
  if (result) {
    double v1 = 47.0;
  }
  _MergedGlobals_8 = *(void *)&v1;
  return result;
}

BOOL _UIIsFourInch()
{
  int v0 = +[UIScreen mainScreen];
  [v0 bounds];
  double v2 = v1;
  double v4 = v3;

  if (v2 >= v4) {
    double v5 = v4;
  }
  else {
    double v5 = v2;
  }
  double v6 = fabs(v5 + -320.0);
  if (v2 >= v4) {
    double v7 = v2;
  }
  else {
    double v7 = v4;
  }
  return fabs(v7 + -568.0) <= 2.22044605e-16 && v6 <= 2.22044605e-16;
}

void sub_1857F4FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1857F591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___viewControllerIfStatusBarPartStyleProviding_block_invoke()
{
  _UIMainBundleIdentifier();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EB25BB25 = [&unk_1ED3EF8D8 containsObject:v0];
}

void __UISceneAccessClassComponentArray(int a1, void *a2)
{
  id v3 = a2;
  if (qword_1EB25EC40 != -1) {
    dispatch_once(&qword_1EB25EC40, &__block_literal_global_699);
  }
  double v4 = qword_1EB25EC38;
  if (a1)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ____UISceneAccessClassComponentArray_block_invoke_2;
    block[3] = &unk_1E52DA040;
    double v5 = &v11;
    id v11 = v3;
    id v6 = v3;
    dispatch_barrier_sync(v4, block);
  }
  else
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = ____UISceneAccessClassComponentArray_block_invoke_3;
    v8[3] = &unk_1E52DA040;
    double v5 = &v9;
    id v9 = v3;
    id v7 = v3;
    dispatch_sync(v4, v8);
  }
}

uint64_t _UIEventHasEdgePendingOrLocked(void *a1)
{
  uint64_t result = [a1 _hidEvent];
  if (result)
  {
    uint64_t result = IOHIDEventGetChildren();
    if (result)
    {
      CFArrayRef v2 = (const __CFArray *)result;
      CFIndex Count = CFArrayGetCount((CFArrayRef)result);
      if (Count < 1)
      {
        return 0;
      }
      else
      {
        uint64_t v4 = Count;
        CFIndex v5 = 0;
        int v6 = 0;
        while (1)
        {
          CFArrayGetValueAtIndex(v2, v5);
          if (IOHIDEventGetType() == 11 && (IOHIDEventGetIntegerValue() & 0x42800) != 0) {
            break;
          }
          CFIndex v5 = ++v6;
          if (v4 <= v6) {
            return 0;
          }
        }
        return 1;
      }
    }
  }
  return result;
}

void sub_1857F8C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *_UIPhysicalButtonsForBKSHIDEventDeferringEnvironment(void *a1)
{
  CFArrayRef v2 = objc_msgSend(MEMORY[0x1E4F4F280], "ui_cameraCaptureButtonEnvironment");
  id v3 = a1;
  id v4 = v2;
  CFIndex v5 = v4;
  if (v4 == v3)
  {
  }
  else
  {
    if (!v3 || !v4)
    {

LABEL_9:
      id v7 = (void *)MEMORY[0x1E4F1CBF0];
      goto LABEL_10;
    }
    int v6 = [v3 isEqual:v4];

    if (!v6) {
      goto LABEL_9;
    }
  }
  id v7 = &unk_1ED3F1138;
LABEL_10:

  return v7;
}

id _UIPhysicalButtonAllBKSHIDEventDeferringEnvironments()
{
  if (qword_1EB262FA0 != -1) {
    dispatch_once(&qword_1EB262FA0, &__block_literal_global_391_2);
  }
  id v0 = (void *)qword_1EB262F98;
  return v0;
}

void sub_1857FACCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1857FAEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1857FB4D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id _UIPhysicalButtonSuccinctConfigurationsDescriptionForSet(void *a1)
{
  uint64_t v2 = objc_opt_new();
  if (!a1 || (id v3 = (void *)a1[1]) != 0 && [v3 count])
  {
    v13[0] = 0;
    v13[1] = v13;
    void v13[2] = 0x2020000000;
    v13[3] = 0;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = ___UIPhysicalButtonSuccinctConfigurationsDescriptionForSet_block_invoke;
    v8[3] = &unk_1E5311048;
    id v4 = v2;
    id v9 = v4;
    id v10 = &stru_1ED0E84C0;
    id v11 = @", ";
    long long v12 = v13;
    [a1 _enumerateConfigurationsWithBlock:v8];
    CFIndex v5 = v11;
    id v6 = v4;

    _Block_object_dispose(v13, 8);
  }
  else
  {
    [v2 appendString:@"(empty)"];
  }
  return v2;
}

void sub_1857FBB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1857FBBD4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1857FBE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___isBundleAllowedSpringBoardDelegate_block_invoke()
{
  uint64_t v0 = _UIMainBundleIdentifier();
  uint64_t v1 = (void *)v0;
  if (v0)
  {
    uint64_t v2 = (void *)v0;
    LOBYTE(v0) = [&unk_1ED3F13D8 containsObject:v0];
    uint64_t v1 = v2;
  }
  byte_1EB25BA69 = v0;
}

Method _requestHardwareEventsIfNeeded()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  Method result = class_getInstanceMethod(v0, sel_proximityStateChanged_);
  if (result)
  {
    uint64_t v2 = result;
    id v3 = (objc_class *)objc_opt_class();
    Method result = class_getInstanceMethod(v3, sel_proximityStateChanged_);
    if (v2 != result)
    {
      id v4 = (void *)UIApp;
      return (Method)[v4 setProximityEventsEnabled:1];
    }
  }
  return result;
}

uint64_t _UIUserInterfaceStyleFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"Light"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"Dark"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t __UISearchBarUsesModernAppearance_block_invoke()
{
  uint64_t result = dyld_program_sdk_at_least();
  _MergedGlobals_17 = result;
  return result;
}

void _quantizePositionsInAnimation(void *a1, void *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = v5;
  if (_animationIsEligibleForQuantization(v7))
  {
    id v8 = [v7 fromValue];
    id v9 = [v7 toValue];
    id v10 = _quantizedValueForValueInView(v8, v6);
    id v11 = v10;
    if (v8 == v9)
    {
      id v12 = v10;
    }
    else
    {
      _quantizedValueForValueInView(v9, v6);
      id v12 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v21 = v12;
    if (v11 != v8 || (long long v13 = v7, v12 != v9))
    {
      long long v13 = v7;
      if (a3)
      {
        long long v13 = (void *)[v7 copy];
      }
      [v13 setFromValue:v11];
      [v13 setToValue:v21];
    }

LABEL_22:
    goto LABEL_23;
  }
  objc_opt_class();
  long long v13 = v7;
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_24;
  }
  id v8 = [v7 animations];
  long long v13 = v7;
  if ([v8 indexOfObjectPassingTest:&__block_literal_global_401] != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (a3)
    {
      objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v8, "count"));
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      id v14 = v8;
      uint64_t v15 = [v14 countByEnumeratingWithState:&v27 objects:v35 count:16];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)v28;
        do
        {
          for (uint64_t i = 0; i != v16; ++i)
          {
            if (*(void *)v28 != v17) {
              objc_enumerationMutation(v14);
            }
            uint64_t v19 = *(void *)(*((void *)&v27 + 1) + 8 * i);
            id v26 = 0;
            _quantizePositionsInAnimation(v19, v6, &v26);
            id v20 = v26;
            [v9 addObject:v20];
          }
          uint64_t v16 = [v14 countByEnumeratingWithState:&v27 objects:v35 count:16];
        }
        while (v16);
      }

      long long v13 = (void *)[v7 copy];
      [v13 setAnimations:v9];
    }
    else
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id v9 = [v7 animations];
      uint64_t v22 = [v9 countByEnumeratingWithState:&v31 objects:v36 count:16];
      if (v22)
      {
        uint64_t v23 = v22;
        uint64_t v24 = *(void *)v32;
        do
        {
          for (uint64_t j = 0; j != v23; ++j)
          {
            if (*(void *)v32 != v24) {
              objc_enumerationMutation(v9);
            }
            _quantizePositionsInAnimation(*(void *)(*((void *)&v31 + 1) + 8 * j), v6, 0);
          }
          uint64_t v23 = [v9 countByEnumeratingWithState:&v31 objects:v36 count:16];
        }
        while (v23);
      }
      long long v13 = v7;
    }
    goto LABEL_22;
  }
LABEL_23:

LABEL_24:
  if (a3) {
    *a3 = v13;
  }
}

uint64_t _animationIsEligibleForQuantization(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = [v1 keyPath];
    uint64_t v3 = [v2 hasPrefix:@"position"];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

id _quantizedValueForValueInView(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___quantizedValueForValueInView_block_invoke;
  aBlock[3] = &unk_1E52DCB08;
  id v5 = v4;
  id v17 = v5;
  id v6 = (void (**)(void, __n128))_Block_copy(aBlock);
  id v7 = (const char *)[v3 objCType];
  if (!strcmp(v7, "d"))
  {
    id v9 = NSNumber;
    [v3 doubleValue];
LABEL_7:
    v6[2](v6, v10);
    objc_msgSend(v9, "numberWithDouble:");
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  if (!strcmp(v7, "f"))
  {
    id v9 = NSNumber;
    [v3 floatValue];
    v10.n128_f64[0] = v10.n128_f32[0];
    goto LABEL_7;
  }
  if (!strcmp(v7, "{CGPoint=dd}"))
  {
    [v3 CGPointValue];
    double v12 = v11;
    double v13 = ((double (*)(void (**)(void, __n128)))v6[2])(v6);
    objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGPoint:", v13, ((double (*)(void (**)(void, __n128), double))v6[2])(v6, v12));
    id v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v8 = v3;
  }
LABEL_9:
  id v14 = v8;

  return v14;
}

void ___quantizedValueForValueInView_block_invoke(uint64_t a1)
{
}

uint64_t _fromValuesAreEqual(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = objc_opt_class();
  if (v5 != objc_opt_class()) {
    goto LABEL_2;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = [v3 animations];
    id v8 = [v4 animations];
    uint64_t v9 = [v7 count];
    if (v9 == [v8 count])
    {
      if ([v7 count])
      {
        unint64_t v10 = 0;
        do
        {
          double v11 = [v7 objectAtIndexedSubscript:v10];
          double v12 = [v8 objectAtIndexedSubscript:v10];
          uint64_t v6 = _fromValuesAreEqual(v11, v12);

          if ((v6 & 1) == 0) {
            break;
          }
          ++v10;
        }
        while ([v7 count] > v10);
      }
      else
      {
        uint64_t v6 = 1;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    goto LABEL_14;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = [v3 fromValue];
    id v8 = [v4 fromValue];
    uint64_t v6 = [v7 isEqual:v8];
LABEL_14:

    goto LABEL_15;
  }
LABEL_2:
  uint64_t v6 = 0;
LABEL_15:

  return v6;
}

id _animationForKeyPathsAndValues(void *a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if ([v3 count])
  {
    if ([v3 count] == 1)
    {
      id v4 = [v3 keyEnumerator];
      uint64_t v5 = [v4 nextObject];

      uint64_t v6 = [v3 objectForKeyedSubscript:v5];
      id v7 = _animationForValueAndKeyPath(v6, v5, a2);
    }
    else
    {
      id v8 = [MEMORY[0x1E4F1CA48] array];
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v9 = v3;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v19;
        do
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if (*(void *)v19 != v12) {
              objc_enumerationMutation(v9);
            }
            id v14 = *(void **)(*((void *)&v18 + 1) + 8 * i);
            uint64_t v15 = objc_msgSend(v9, "objectForKeyedSubscript:", v14, (void)v18);
            uint64_t v16 = _animationForValueAndKeyPath(v15, v14, a2);
            [v8 addObject:v16];
          }
          uint64_t v11 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v11);
      }

      id v7 = [MEMORY[0x1E4F39B38] animation];
      [v7 setAnimations:v8];
      [v7 setFillMode:*MEMORY[0x1E4F39FA0]];
      [v7 setDuration:0.0001];
      [v7 setRemovedOnCompletion:0];
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

id _animationForValueAndKeyPath(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  if (qword_1EB2650B0 != -1) {
    dispatch_once(&qword_1EB2650B0, &__block_literal_global_37_6);
  }
  id v7 = [(id)qword_1EB2650A8 valueForKey:v6];
  id v8 = v5;
  if (!v7 || (a3 & 1) != 0)
  {
    if (v7)
    {
      if (![@"frame" isEqualToString:v6])
      {
        id v10 = v8;
        goto LABEL_19;
      }
      [v8 CGRectValue];
      double v14 = v13;
      double v16 = v15;
      double v18 = v17;
      double v19 = v12;
      if (v17 != 0.0 || v12 != 0.0)
      {
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 3221225472;
        v23[2] = ___animationForValueAndKeyPath_block_invoke_32;
        v23[3] = &unk_1E52DA520;
        id v24 = v6;
        double v25 = v14;
        double v26 = v16;
        double v27 = v18;
        double v28 = v19;
        if (qword_1EB2650A0 != -1) {
          dispatch_once(&qword_1EB2650A0, v23);
        }
      }
      uint64_t v20 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGPoint:", v14, v16);
    }
    else
    {
      id v7 = +[_UIViewCALayerKeyValueMapper CALayerKeyPathForUIViewKeyPath:v6];
      uint64_t v20 = +[_UIViewCALayerKeyValueMapper CALayerValueForUIViewValue:v8 forUIViewKey:v6];
    }
    id v10 = (id)v20;

    goto LABEL_19;
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___animationForValueAndKeyPath_block_invoke;
  block[3] = &unk_1E52D9F98;
  id v9 = v6;
  id v30 = v9;
  id v10 = v8;
  id v31 = v10;
  if (_MergedGlobals_1326 != -1) {
    dispatch_once(&_MergedGlobals_1326, block);
  }

  id v11 = v9;
  id v7 = v11;
LABEL_19:
  long long v21 = [MEMORY[0x1E4F39B48] animationWithKeyPath:v7];
  [v21 setFromValue:v10];
  [v21 setToValue:v10];
  [v21 setDuration:0.0001];
  [v21 setFillMode:*MEMORY[0x1E4F39FA0]];
  [v21 setAdditive:a3];
  [v21 setRemovedOnCompletion:0];

  return v21;
}

void _UIUpdateCompletionObservationRemoveObserver(uint64_t a1, unint64_t a2, int a3)
{
  if (a3)
  {
    double v13 = [MEMORY[0x1E4F28B00] currentHandler];
    double v14 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIUpdateCompletionObservationRemoveObserver(_UIUpdateCompletionObservation *const _Nonnull, const id<_UIUpdateCompletionObserving>  _Nonnull const __strong, const BOOL)");
    [v13 handleFailureInFunction:v14 file:@"_UIUpdateSequence.mm" lineNumber:187 description:@"Persistant observers are not implemented."];
  }
  id v5 = *(uint64_t ***)(a1 + 16);
  if (v5)
  {
    id v6 = *(void **)(a1 + 8);
    id v7 = std::__hash_table<void *,std::hash<void *>,std::equal_to<void *>,std::allocator<void *>>::find<void *>(v6, a2);
    if (v7)
    {
      id v8 = v7;
      id v9 = *v5;
      uint64_t v10 = std::__hash_table<void *,std::hash<void *>,std::equal_to<void *>,std::allocator<void *>>::erase(v6, v7);
      if (v9 == v8) {
        **(void **)(a1 + 16) = v10;
      }
    }
  }
  id v11 = *(void **)a1;
  if (v11)
  {
    double v12 = std::__hash_table<void *,std::hash<void *>,std::equal_to<void *>,std::allocator<void *>>::find<void *>(v11, a2);
    if (v12)
    {
      std::__hash_table<void *,std::hash<void *>,std::equal_to<void *>,std::allocator<void *>>::erase(v11, v12);
    }
  }
}

void sub_18580076C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _UIQOSManagedCommitsEnd(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  _MergedGlobals_1301 = 0;
  if (qword_1EB264D98 != -1) {
    dispatch_once(&qword_1EB264D98, &__block_literal_global_7_3);
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_1EB264DA0);
  if (!v4
    || (Value = (__CFSet *)CFDictionaryGetValue((CFDictionaryRef)qword_1EB264DA0, v3)) != 0
    && (CFSetRef v7 = Value, CFSetRemoveValue(Value, v4), !CFSetGetCount(v7)))
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1EB264DA0, v3);
    if (Count)
    {
      if (!CFDictionaryGetCount((CFDictionaryRef)qword_1EB264DA0))
      {
        Class = object_getClass(v3);
        Name = class_getName(Class);
        strncpy(__dst, Name, 8uLL);
        if (v4) {
          strncpy(__dst, (const char *)[v4 UTF8String], 8uLL);
        }
        _tracepointArg4((uint64_t)&qword_1EB264DA0);
        kdebug_trace();
      }
    }
  }
}

void ___navigationBarHeightToUseForTopInsetCalculationsOfViewController_block_invoke()
{
  _UIMainBundleIdentifier();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EB25A81B = [v0 isEqualToString:@"com.apple.mobilenotes"];
}

uint64_t objectdestroy_2Tm()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t objectdestroy_2Tm_0()
{
  swift_unknownObjectRelease();

  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t objectdestroy_2Tm_1()
{
  uint64_t v1 = sub_186A1E51C();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

CGColorSpaceRef __RGBColorSpace_block_invoke()
{
  if (dyld_program_sdk_at_least())
  {
    if (qword_1EB25E420 != -1) {
      dispatch_once(&qword_1EB25E420, &__block_literal_global_2186);
    }
    CGColorSpaceRef result = (CGColorSpaceRef)qword_1EB25E418;
  }
  else
  {
    CGColorSpaceRef result = CGColorSpaceCreateDeviceRGB();
  }
  qword_1EB25E408 = (uint64_t)result;
  return result;
}

NSString *_UIContentSizeCategoryMin(void *a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  if (UIContentSizeCategoryCompareToCategory(v4, v3) == NSOrderedDescending) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = v5;

  return v6;
}

unint64_t *std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,false>(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  id v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          id v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                unint64_t v39 = *(a2 - 1);
                unint64_t v40 = *v10;
                if (v39 > *v10)
                {
                  *uint64_t v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3uLL:
                unint64_t v41 = v10[1];
                unint64_t v42 = *(a2 - 1);
                if (v41 <= v42) {
                  unint64_t v43 = *(a2 - 1);
                }
                else {
                  unint64_t v43 = v10[1];
                }
                if (v41 >= v42) {
                  unint64_t v41 = *(a2 - 1);
                }
                *(a2 - 1) = v41;
                v10[1] = v43;
                unint64_t v44 = *(a2 - 1);
                if (v44 <= *v10) {
                  unint64_t v45 = *v10;
                }
                else {
                  unint64_t v45 = *(a2 - 1);
                }
                if (v44 >= *v10) {
                  unint64_t v44 = *v10;
                }
                *(a2 - 1) = v44;
                unint64_t v47 = *v10;
                unint64_t v46 = v10[1];
                if (v45 <= v46) {
                  unint64_t v47 = v10[1];
                }
                if (v45 < v46) {
                  unint64_t v46 = v45;
                }
                *uint64_t v10 = v47;
                v10[1] = v46;
                break;
              case 4uLL:
                unint64_t v49 = v10[1];
                unint64_t v48 = v10[2];
                if (*v10 <= v48) {
                  unint64_t v50 = v10[2];
                }
                else {
                  unint64_t v50 = *v10;
                }
                if (*v10 < v48) {
                  unint64_t v48 = *v10;
                }
                void v10[2] = v48;
                *uint64_t v10 = v50;
                unint64_t v51 = *(a2 - 1);
                if (v49 <= v51) {
                  unint64_t v52 = *(a2 - 1);
                }
                else {
                  unint64_t v52 = v49;
                }
                if (v49 < v51) {
                  unint64_t v51 = v49;
                }
                *(a2 - 1) = v51;
                unint64_t v53 = *v10;
                if (*v10 <= v52) {
                  unint64_t v54 = v52;
                }
                else {
                  unint64_t v54 = *v10;
                }
                if (*v10 >= v52) {
                  unint64_t v53 = v52;
                }
                *uint64_t v10 = v54;
                v10[1] = v53;
                unint64_t v55 = v10[2];
                unint64_t v56 = *(a2 - 1);
                if (v55 <= v56) {
                  unint64_t v57 = *(a2 - 1);
                }
                else {
                  unint64_t v57 = v10[2];
                }
                if (v55 >= v56) {
                  unint64_t v55 = *(a2 - 1);
                }
                *(a2 - 1) = v55;
                unint64_t v58 = v10[1];
                if (v58 <= v57) {
                  unint64_t v59 = v57;
                }
                else {
                  unint64_t v59 = v10[1];
                }
                if (v58 >= v57) {
                  unint64_t v58 = v57;
                }
                v10[1] = v59;
                void v10[2] = v58;
                break;
              case 5uLL:
                unint64_t v60 = *v10;
                unint64_t v61 = v10[1];
                if (*v10 <= v61) {
                  unint64_t v62 = v10[1];
                }
                else {
                  unint64_t v62 = *v10;
                }
                if (*v10 >= v61) {
                  unint64_t v60 = v10[1];
                }
                *uint64_t v10 = v62;
                v10[1] = v60;
                unint64_t v63 = v10[3];
                unint64_t v64 = *(a2 - 1);
                if (v63 <= v64) {
                  unint64_t v65 = *(a2 - 1);
                }
                else {
                  unint64_t v65 = v10[3];
                }
                if (v63 >= v64) {
                  unint64_t v63 = *(a2 - 1);
                }
                *(a2 - 1) = v63;
                void v10[3] = v65;
                unint64_t v66 = *(a2 - 1);
                unint64_t v67 = v10[2];
                if (v66 <= v67) {
                  unint64_t v68 = v10[2];
                }
                else {
                  unint64_t v68 = *(a2 - 1);
                }
                if (v66 >= v67) {
                  unint64_t v66 = v10[2];
                }
                *(a2 - 1) = v66;
                unint64_t v70 = v10[2];
                unint64_t v69 = v10[3];
                unint64_t v71 = v10[1];
                if (v68 <= v69) {
                  unint64_t v70 = v10[3];
                }
                if (v68 < v69) {
                  unint64_t v69 = v68;
                }
                void v10[2] = v70;
                void v10[3] = v69;
                unint64_t v72 = *(a2 - 1);
                if (v71 <= v72) {
                  unint64_t v73 = *(a2 - 1);
                }
                else {
                  unint64_t v73 = v71;
                }
                if (v71 < v72) {
                  unint64_t v72 = v71;
                }
                *(a2 - 1) = v72;
                unint64_t v74 = *v10;
                unint64_t v76 = v10[2];
                unint64_t v75 = v10[3];
                if (v75 <= *v10) {
                  unint64_t v77 = *v10;
                }
                else {
                  unint64_t v77 = v10[3];
                }
                if (v75 >= *v10) {
                  unint64_t v75 = *v10;
                }
                if (v77 <= v76) {
                  unint64_t v74 = v10[2];
                }
                if (v77 < v76) {
                  unint64_t v76 = v77;
                }
                if (v75 <= v73) {
                  unint64_t v78 = v73;
                }
                else {
                  unint64_t v78 = v75;
                }
                if (v75 >= v73) {
                  unint64_t v75 = v73;
                }
                if (v78 <= v76) {
                  unint64_t v73 = v76;
                }
                *uint64_t v10 = v74;
                v10[1] = v73;
                if (v78 >= v76) {
                  unint64_t v79 = v76;
                }
                else {
                  unint64_t v79 = v78;
                }
                void v10[2] = v79;
                void v10[3] = v75;
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            long long v80 = v10 + 1;
            BOOL v82 = v10 == a2 || v80 == a2;
            if (a4)
            {
              if (!v82)
              {
                uint64_t v83 = 8;
                uint64_t v84 = v10;
                do
                {
                  unint64_t v86 = *v84;
                  unint64_t v85 = v84[1];
                  uint64_t v84 = v80;
                  if (v85 > v86)
                  {
                    uint64_t v87 = v83;
                    do
                    {
                      *(unint64_t *)((char *)v10 + v87) = v86;
                      uint64_t v88 = v87 - 8;
                      if (v87 == 8)
                      {
                        uint64_t v89 = v10;
                        goto LABEL_158;
                      }
                      unint64_t v86 = *(unint64_t *)((char *)v10 + v87 - 16);
                      v87 -= 8;
                    }
                    while (v85 > v86);
                    uint64_t v89 = (unint64_t *)((char *)v10 + v88);
LABEL_158:
                    unint64_t *v89 = v85;
                  }
                  long long v80 = v84 + 1;
                  v83 += 8;
                }
                while (v84 + 1 != a2);
              }
            }
            else if (!v82)
            {
              do
              {
                unint64_t v116 = *v9;
                unint64_t v115 = v9[1];
                id v9 = v80;
                if (v115 > v116)
                {
                  do
                  {
                    *long long v80 = v116;
                    unint64_t v116 = *(v80 - 2);
                    --v80;
                  }
                  while (v115 > v116);
                  *long long v80 = v115;
                }
                long long v80 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v90 = (v12 - 2) >> 1;
              int64_t v91 = v90;
              do
              {
                int64_t v92 = v91;
                if (v90 >= v91)
                {
                  uint64_t v93 = (2 * v91) | 1;
                  unint64_t v94 = &v10[v93];
                  if (2 * v92 + 2 < (uint64_t)v12)
                  {
                    unint64_t v96 = v94[1];
                    BOOL v95 = *v94 > v96;
                    if (*v94 < v96) {
                      unint64_t v96 = *v94;
                    }
                    if (v95)
                    {
                      ++v94;
                      uint64_t v93 = 2 * v92 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v96 = *v94;
                  }
                  uint64_t v97 = &v10[v92];
                  unint64_t v98 = *v97;
                  if (v96 <= *v97)
                  {
                    do
                    {
                      *uint64_t v97 = v96;
                      uint64_t v97 = v94;
                      if (v90 < v93) {
                        break;
                      }
                      uint64_t v99 = (2 * v93) | 1;
                      unint64_t v94 = &v10[v99];
                      uint64_t v93 = 2 * v93 + 2;
                      if (v93 < (uint64_t)v12)
                      {
                        unint64_t v96 = *v94;
                        CGColorSpaceRef result = v94 + 1;
                        unint64_t v100 = v94[1];
                        BOOL v101 = *v94 > v100;
                        if (*v94 >= v100) {
                          unint64_t v96 = v94[1];
                        }
                        if (*v94 > v100) {
                          ++v94;
                        }
                        if (!v101) {
                          uint64_t v93 = v99;
                        }
                      }
                      else
                      {
                        unint64_t v96 = *v94;
                        uint64_t v93 = v99;
                      }
                    }
                    while (v96 <= v98);
                    *uint64_t v97 = v98;
                  }
                }
                int64_t v91 = v92 - 1;
              }
              while (v92);
              uint64_t v102 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v103 = 0;
                unint64_t v104 = *v10;
                BOOL v105 = v10;
                do
                {
                  uint64_t v106 = &v105[v103 + 1];
                  uint64_t v107 = (2 * v103) | 1;
                  uint64_t v103 = 2 * v103 + 2;
                  if (v103 < v102)
                  {
                    unint64_t v109 = *v106;
                    unint64_t v108 = v106[1];
                    if (*v106 >= v108) {
                      unint64_t v109 = v106[1];
                    }
                    if (*v106 <= v108) {
                      uint64_t v103 = v107;
                    }
                    else {
                      ++v106;
                    }
                  }
                  else
                  {
                    unint64_t v109 = *v106;
                    uint64_t v103 = v107;
                  }
                  *BOOL v105 = v109;
                  BOOL v105 = v106;
                }
                while (v103 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
                if (v106 == --a2)
                {
                  *uint64_t v106 = v104;
                }
                else
                {
                  *uint64_t v106 = *a2;
                  *a2 = v104;
                  uint64_t v110 = (char *)v106 - (char *)v10 + 8;
                  if (v110 >= 9)
                  {
                    unint64_t v111 = (((unint64_t)v110 >> 3) - 2) >> 1;
                    uint64_t v112 = &v10[v111];
                    unint64_t v113 = *v112;
                    unint64_t v114 = *v106;
                    if (*v112 > *v106)
                    {
                      do
                      {
                        *uint64_t v106 = v113;
                        uint64_t v106 = v112;
                        if (!v111) {
                          break;
                        }
                        unint64_t v111 = (v111 - 1) >> 1;
                        uint64_t v112 = &v10[v111];
                        unint64_t v113 = *v112;
                      }
                      while (*v112 > v114);
                      *uint64_t v106 = v114;
                    }
                  }
                }
                BOOL v95 = v102-- <= 2;
              }
              while (!v95);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          double v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v9 + 2, &v9[v13 + 1], a2 - 3);
            CGColorSpaceRef result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v14 - 1, v14, &v9[v13 + 1]);
            unint64_t v15 = *v9;
            *id v9 = *v14;
            *double v14 = v15;
          }
          else
          {
            CGColorSpaceRef result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          unint64_t v16 = *v9;
          if ((a4 & 1) != 0 || *(v9 - 1) > v16) {
            break;
          }
          if (v16 <= *(a2 - 1))
          {
            id v31 = v9 + 1;
            do
            {
              uint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v16 <= *v10);
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              unint64_t v30 = v10[1];
              ++v10;
            }
            while (v16 <= v30);
          }
          long long v32 = a2;
          if (v10 < a2)
          {
            long long v32 = a2;
            do
              unint64_t v33 = *--v32;
            while (v16 > v33);
          }
          if (v10 < v32)
          {
            unint64_t v34 = *v10;
            unint64_t v35 = *v32;
            do
            {
              *uint64_t v10 = v35;
              *long long v32 = v34;
              do
              {
                unint64_t v36 = v10[1];
                ++v10;
                unint64_t v34 = v36;
              }
              while (v16 <= v36);
              do
              {
                unint64_t v37 = *--v32;
                unint64_t v35 = v37;
              }
              while (v16 > v37);
            }
            while (v10 < v32);
          }
          long long v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *id v9 = *v38;
          }
          a4 = 0;
          unint64_t *v38 = v16;
        }
        uint64_t v17 = 0;
        do
          unint64_t v18 = v9[++v17];
        while (v18 > v16);
        double v19 = &v9[v17];
        uint64_t v20 = a2;
        if (v17 == 1)
        {
          uint64_t v20 = a2;
          do
          {
            if (v19 >= v20) {
              break;
            }
            unint64_t v22 = *--v20;
          }
          while (v22 <= v16);
        }
        else
        {
          do
            unint64_t v21 = *--v20;
          while (v21 <= v16);
        }
        if (v19 >= v20)
        {
          double v28 = v19 - 1;
        }
        else
        {
          unint64_t v23 = *v20;
          id v24 = &v9[v17];
          double v25 = v20;
          do
          {
            *id v24 = v23;
            *double v25 = v18;
            do
            {
              unint64_t v26 = v24[1];
              ++v24;
              unint64_t v18 = v26;
            }
            while (v26 > v16);
            do
            {
              unint64_t v27 = *--v25;
              unint64_t v23 = v27;
            }
            while (v27 <= v16);
          }
          while (v24 < v25);
          double v28 = v24 - 1;
        }
        if (v28 != v9) {
          *id v9 = *v28;
        }
        *double v28 = v16;
        if (v19 >= v20) {
          break;
        }
LABEL_33:
        CGColorSpaceRef result = (unint64_t *)std::__introsort<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *,false>(v9, v28, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v28 + 1;
      }
      BOOL v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v9, v28);
      uint64_t v10 = v28 + 1;
      CGColorSpaceRef result = (unint64_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(v28 + 1, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_33;
      }
    }
    a2 = v28;
    if (!v29) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      unint64_t v3 = *(a2 - 1);
      unint64_t v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      unint64_t v20 = a1[1];
      unint64_t v21 = *(a2 - 1);
      if (v20 <= v21) {
        unint64_t v22 = *(a2 - 1);
      }
      else {
        unint64_t v22 = a1[1];
      }
      if (v20 >= v21) {
        unint64_t v20 = *(a2 - 1);
      }
      *(a2 - 1) = v20;
      a1[1] = v22;
      unint64_t v23 = *(a2 - 1);
      if (v23 <= *a1) {
        unint64_t v24 = *a1;
      }
      else {
        unint64_t v24 = *(a2 - 1);
      }
      if (v23 >= *a1) {
        unint64_t v23 = *a1;
      }
      *(a2 - 1) = v23;
      unint64_t v26 = *a1;
      unint64_t v25 = a1[1];
      if (v24 <= v25) {
        unint64_t v26 = a1[1];
      }
      if (v24 < v25) {
        unint64_t v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      unint64_t v48 = a1[1];
      unint64_t v47 = a1[2];
      if (*a1 <= v47) {
        unint64_t v49 = a1[2];
      }
      else {
        unint64_t v49 = *a1;
      }
      if (*a1 < v47) {
        unint64_t v47 = *a1;
      }
      a1[2] = v47;
      *a1 = v49;
      unint64_t v50 = *(a2 - 1);
      if (v48 <= v50) {
        unint64_t v51 = *(a2 - 1);
      }
      else {
        unint64_t v51 = v48;
      }
      if (v48 < v50) {
        unint64_t v50 = v48;
      }
      *(a2 - 1) = v50;
      unint64_t v52 = *a1;
      if (*a1 <= v51) {
        unint64_t v53 = v51;
      }
      else {
        unint64_t v53 = *a1;
      }
      if (*a1 >= v51) {
        unint64_t v52 = v51;
      }
      *a1 = v53;
      a1[1] = v52;
      unint64_t v54 = a1[2];
      unint64_t v55 = *(a2 - 1);
      if (v54 <= v55) {
        unint64_t v56 = *(a2 - 1);
      }
      else {
        unint64_t v56 = a1[2];
      }
      if (v54 >= v55) {
        unint64_t v54 = *(a2 - 1);
      }
      *(a2 - 1) = v54;
      unint64_t v57 = a1[1];
      if (v57 <= v56) {
        unint64_t v58 = v56;
      }
      else {
        unint64_t v58 = a1[1];
      }
      if (v57 >= v56) {
        unint64_t v57 = v56;
      }
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      unint64_t v27 = *a1;
      unint64_t v28 = a1[1];
      if (*a1 <= v28) {
        unint64_t v29 = a1[1];
      }
      else {
        unint64_t v29 = *a1;
      }
      if (*a1 >= v28) {
        unint64_t v27 = a1[1];
      }
      *a1 = v29;
      a1[1] = v27;
      unint64_t v30 = a1[3];
      unint64_t v31 = *(a2 - 1);
      if (v30 <= v31) {
        unint64_t v32 = *(a2 - 1);
      }
      else {
        unint64_t v32 = a1[3];
      }
      if (v30 >= v31) {
        unint64_t v30 = *(a2 - 1);
      }
      *(a2 - 1) = v30;
      a1[3] = v32;
      unint64_t v33 = *(a2 - 1);
      unint64_t v34 = a1[2];
      if (v33 <= v34) {
        unint64_t v35 = a1[2];
      }
      else {
        unint64_t v35 = *(a2 - 1);
      }
      if (v33 >= v34) {
        unint64_t v33 = a1[2];
      }
      *(a2 - 1) = v33;
      unint64_t v37 = a1[2];
      unint64_t v36 = a1[3];
      unint64_t v38 = a1[1];
      if (v35 <= v36) {
        unint64_t v37 = a1[3];
      }
      if (v35 < v36) {
        unint64_t v36 = v35;
      }
      a1[2] = v37;
      a1[3] = v36;
      unint64_t v39 = *(a2 - 1);
      if (v38 <= v39) {
        unint64_t v40 = *(a2 - 1);
      }
      else {
        unint64_t v40 = v38;
      }
      if (v38 < v39) {
        unint64_t v39 = v38;
      }
      *(a2 - 1) = v39;
      unint64_t v41 = *a1;
      unint64_t v43 = a1[2];
      unint64_t v42 = a1[3];
      if (v42 <= *a1) {
        unint64_t v44 = *a1;
      }
      else {
        unint64_t v44 = a1[3];
      }
      if (v42 >= *a1) {
        unint64_t v42 = *a1;
      }
      if (v44 <= v43) {
        unint64_t v41 = a1[2];
      }
      if (v44 < v43) {
        unint64_t v43 = v44;
      }
      if (v42 <= v40) {
        unint64_t v45 = v40;
      }
      else {
        unint64_t v45 = v42;
      }
      if (v42 >= v40) {
        unint64_t v42 = v40;
      }
      if (v45 <= v43) {
        unint64_t v40 = v43;
      }
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43) {
        unint64_t v46 = v43;
      }
      else {
        unint64_t v46 = v45;
      }
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      unint64_t v6 = a1 + 2;
      unint64_t v5 = a1[2];
      unint64_t v8 = *a1;
      unint64_t v7 = a1[1];
      if (v7 <= v5) {
        unint64_t v9 = a1[2];
      }
      else {
        unint64_t v9 = a1[1];
      }
      if (v7 < v5) {
        unint64_t v5 = a1[1];
      }
      if (v5 <= v8) {
        unint64_t v10 = *a1;
      }
      else {
        unint64_t v10 = v5;
      }
      if (v5 >= v8) {
        unint64_t v5 = *a1;
      }
      *unint64_t v6 = v5;
      if (v10 <= v9) {
        unint64_t v11 = v9;
      }
      else {
        unint64_t v11 = v8;
      }
      if (v10 >= v9) {
        unint64_t v10 = v9;
      }
      *a1 = v11;
      a1[1] = v10;
      unint64_t v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v13 = 0;
      uint64_t v14 = 24;
      break;
  }
  while (1)
  {
    unint64_t v15 = *v12;
    unint64_t v16 = *v6;
    if (*v12 > v16)
    {
      uint64_t v17 = v14;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v17) = v16;
        uint64_t v18 = v17 - 8;
        if (v17 == 8) {
          break;
        }
        unint64_t v16 = *(unint64_t *)((char *)a1 + v17 - 16);
        v17 -= 8;
        if (v15 <= v16)
        {
          double v19 = (unint64_t *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      double v19 = a1;
LABEL_27:
      *double v19 = v15;
      if (++v13 == 8) {
        return v12 + 1 == a2;
      }
    }
    unint64_t v6 = v12;
    v14 += 8;
    if (++v12 == a2) {
      return 1;
    }
  }
}

unint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::greater<void> &,unsigned long *>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  unint64_t v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      unint64_t v6 = *result;
      if (*a2 > *result)
      {
        *CGColorSpaceRef result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *CGColorSpaceRef result = v3;
      *a2 = v4;
      if (*a3 <= v4) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *CGColorSpaceRef result = v5;
    }
    *a3 = v4;
  }
  return result;
}

id _nextWindowSizedViewController(void *a1)
{
  uint64_t v1 = [a1 presentedViewController];
  uint64_t v2 = v1;
  if (!v1)
  {
    unint64_t v9 = 0;
    goto LABEL_17;
  }
  if ([v1 modalPresentationStyle]
    && [v2 modalPresentationStyle] != 5
    && [v2 modalPresentationStyle] != 17
    && [v2 modalPresentationStyle] != 4
    || ([v2 _existingView], unint64_t v3 = objc_claimAutoreleasedReturnValue(), v3, !v3))
  {
    _nextWindowSizedViewController(v2);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
LABEL_14:
    unint64_t v9 = v10;
    goto LABEL_17;
  }
  if ([v2 modalPresentationStyle] != 4)
  {
    id v10 = v2;
    goto LABEL_14;
  }
  unint64_t v4 = [v2 _existingView];
  unint64_t v5 = [v4 window];

  if (v5
    && ([v2 _existingView],
        unint64_t v6 = objc_claimAutoreleasedReturnValue(),
        BOOL v7 = +[UIViewController _isViewSizeFullScreen:v6 inWindow:v5 ignoreInWindowCheck:0], v6, v7))
  {
    id v8 = v2;
  }
  else
  {
    _nextWindowSizedViewController(v2);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  unint64_t v9 = v8;

LABEL_17:
  return v9;
}

void ___shouldGatherAnalytics_block_invoke()
{
  if (_UIIsPrivateMainBundle())
  {
    uint64_t v0 = _uiMultitouchAnalyticsLog();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_debug_impl(&dword_1853B0000, v0, OS_LOG_TYPE_DEBUG, "Analytics: Skipping app.", v1, 2u);
    }

    byte_1EB265029 = 1;
  }
}

id _uiMultitouchAnalyticsLog()
{
  if (qword_1EB265050 != -1) {
    dispatch_once(&qword_1EB265050, &__block_literal_global_659);
  }
  uint64_t v0 = (void *)qword_1EB265048;
  return v0;
}

uint64_t __UIAPPLICATION_IS_LOADING_INITIALIZATION_INFO_FROM_THE_SYSTEM__(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1858091A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _UIImageDecompressionCompletionQueue()
{
  if (qword_1EB25B1B8 != -1) {
    dispatch_once(&qword_1EB25B1B8, &__block_literal_global_12_2);
  }
  uint64_t v0 = (void *)qword_1EB25B1B0;
  return v0;
}

id UIDecompressorLog()
{
  if (qword_1EB25BDC8 != -1) {
    dispatch_once(&qword_1EB25BDC8, &__block_literal_global_44);
  }
  uint64_t v0 = (void *)qword_1EB25BDC0;
  return v0;
}

void sub_18580A0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void UIResourceBeginDecodingNIBWithCoderFromBundleAndIdentifierForStringsFile(void *a1, void *a2, void *a3)
{
  keCGFloat y = a1;
  id v5 = a3;
  id v6 = a2;
  BOOL v7 = UICoderToBundleMap();
  CFDictionarySetValue(v7, key, v6);

  id v8 = UICoderToNibIdentifierForStringsFileMap();
  unint64_t v9 = v8;
  if (v5)
  {
    CFDictionarySetValue(v8, key, v5);
  }
  else
  {
    id v10 = [MEMORY[0x1E4F1CA98] null];
    CFDictionarySetValue(v9, key, v10);
  }
}

void UIResourceFinishDecodingNIBWithCoder(void *a1)
{
  id v1 = a1;
  uint64_t v2 = UICoderToBundleMap();
  CFDictionaryRemoveValue(v2, v1);
  unint64_t v3 = UICoderToNibIdentifierForStringsFileMap();
  CFDictionaryRemoveValue(v3, v1);

  CFDictionaryRef v4 = UICoderToBundleMap();
  if (!CFDictionaryGetCount(v4))
  {
    UINIBResrouceUniqueingTable();
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    [v5 removeAllObjects];
  }
}

CFMutableDictionaryRef UICoderToBundleMap()
{
  CFMutableDictionaryRef result = (CFMutableDictionaryRef)UICoderToBundleMap_coderToBundleMap;
  if (!UICoderToBundleMap_coderToBundleMap)
  {
    long long v1 = *(_OWORD *)(MEMORY[0x1E4F1D530] + 16);
    *(_OWORD *)&v2.version = *MEMORY[0x1E4F1D530];
    *(_OWORD *)&v2.release = v1;
    v2.equal = 0;
    v2.hash = 0;
    CFMutableDictionaryRef result = CFDictionaryCreateMutable(0, 0, &v2, MEMORY[0x1E4F1D540]);
    UICoderToBundleMap_coderToBundleMap = (uint64_t)result;
  }
  return result;
}

CFMutableDictionaryRef UICoderToNibIdentifierForStringsFileMap()
{
  CFMutableDictionaryRef result = (CFMutableDictionaryRef)UICoderToNibIdentifierForStringsFileMap_coderToNibIdentifierForStringsFileMap;
  if (!UICoderToNibIdentifierForStringsFileMap_coderToNibIdentifierForStringsFileMap)
  {
    long long v1 = *(_OWORD *)(MEMORY[0x1E4F1D530] + 16);
    *(_OWORD *)&v2.version = *MEMORY[0x1E4F1D530];
    *(_OWORD *)&v2.release = v1;
    v2.equal = 0;
    v2.hash = 0;
    CFMutableDictionaryRef result = CFDictionaryCreateMutable(0, 0, &v2, MEMORY[0x1E4F1D540]);
    UICoderToNibIdentifierForStringsFileMap_coderToNibIdentifierForStringsFileMap = (uint64_t)result;
  }
  return result;
}

id UINIBResrouceUniqueingTable()
{
  uint64_t v0 = (void *)UINIBResrouceUniqueingTable_resourceUniquing;
  if (!UINIBResrouceUniqueingTable_resourceUniquing)
  {
    id v1 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    CFDictionaryKeyCallBacks v2 = (void *)UINIBResrouceUniqueingTable_resourceUniquing;
    UINIBResrouceUniqueingTable_resourceUniquing = (uint64_t)v1;

    uint64_t v0 = (void *)UINIBResrouceUniqueingTable_resourceUniquing;
  }
  return v0;
}

id UICurrentNibPaths()
{
  uint64_t v0 = (void *)UICurrentNibPaths_stack;
  if (!UICurrentNibPaths_stack)
  {
    uint64_t v1 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:1];
    CFDictionaryKeyCallBacks v2 = (void *)UICurrentNibPaths_stack;
    UICurrentNibPaths_stacuint64_t k = v1;

    uint64_t v0 = (void *)UICurrentNibPaths_stack;
  }
  return v0;
}

id UICurrentNibLoadingBundles()
{
  uint64_t v0 = (void *)UICurrentNibLoadingBundles_stack;
  if (!UICurrentNibLoadingBundles_stack)
  {
    uint64_t v1 = [objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:1];
    CFDictionaryKeyCallBacks v2 = (void *)UICurrentNibLoadingBundles_stack;
    UICurrentNibLoadingBundles_stacuint64_t k = v1;

    uint64_t v0 = (void *)UICurrentNibLoadingBundles_stack;
  }
  return v0;
}

void sub_18580C9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t GetImageAtPath(void *a1, int a2, double a3)
{
  uint64_t v10 = 0;
  CFDictionaryRef v4 = ImageSourceAtPath(a1, a2, (unint64_t)&v10);
  if (!v4) {
    return 0;
  }
  id v5 = v4;
  id v6 = [UIImage alloc];
  BOOL v7 = [[_UIImageCGImageContent alloc] initWithCGImageSource:v5 scale:a3];
  uint64_t v8 = [(UIImage *)v6 _initWithContent:v7 orientation:v10];

  CFRelease(v5);
  return v8;
}

id _UserInterfaceTraitFromPath(void *a1)
{
  id v1 = a1;
  unint64_t v2 = +[UIImage _scaleDefinedByPath:v1];
  if (v2 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v2;
  }
  int64_t v4 = +[UIImage _idiomDefinedByPath:v1];

  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___UserInterfaceTraitFromPath_block_invoke;
  void v7[3] = &__block_descriptor_48_e27_v16__0___UIMutableTraits__8l;
  void v7[4] = v4;
  v7[5] = v3;
  id v5 = +[UITraitCollection traitCollectionWithTraits:v7];
  return v5;
}

void ___uiMultitouchAnalyticsLog_block_invoke()
{
  if (os_variant_has_internal_diagnostics())
  {
    os_log_t v0 = os_log_create("com.apple.UIKit", "MultitouchAnalytics");
  }
  else
  {
    os_log_t v0 = (os_log_t)MEMORY[0x1E4F14508];
    id v1 = MEMORY[0x1E4F14508];
  }
  unint64_t v2 = (void *)qword_1EB265048;
  qword_1EB265048 = (uint64_t)v0;
}

id _UIViewConstraints(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v2 = (id)objc_msgSend((id)objc_msgSend(a1, "_constraintsExceptingSubviewAutoresizingConstraints"), "mutableCopy");
  if (!v2) {
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v3 = objc_msgSend(a1, "_allSubviews", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (-[UIView _usesAutoresizingConstraints]((uint64_t)v8)) {
          [v2 addObjectsFromArray:-[UIView _autoresizingConstraints](v8)];
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
  return v2;
}

void UITableViewHeaderFooterViewCommonInit(void *a1, void *a2)
{
  BOOL v7 = a1;
  uint64_t v3 = [a2 copy];
  uint64_t v4 = (void *)v7[59];
  v7[59] = v3;

  if (dyld_program_sdk_at_least()
    && [v7 translatesAutoresizingMaskIntoConstraints])
  {
    [v7 _setHostsLayoutEngine:1];
  }
  v7[51] = -1;
  v7[57] = -1;
  v7[58] = 0x7FEFFFFFFFFFFFFFLL;
  v7[64] = 0xBFF0000000000000;
  v7[65] = 0xBFF0000000000000;
  uint64_t v5 = [_UITableViewHeaderFooterContentView alloc];
  [v7 _contentRect];
  uint64_t v6 = -[_UITableViewHeaderFooterContentView initWithFrame:](v5, "initWithFrame:");
  [v7 _setContentView:v6 insertAtBack:1];

  [v7 _configureDefaultContentViewLayoutMargins];
  if (dyld_program_sdk_at_least())
  {
    [v7 setEdgesPreservingSuperviewLayoutMargins:10];
    objc_msgSend(v7, "setEdgesInsettingLayoutMarginsFromSafeArea:", objc_msgSend(v7, "edgesInsettingLayoutMarginsFromSafeArea") & 0xA);
  }
  *((_DWORD *)v7 + 142) |= 0x100u;
  *((_DWORD *)v7 + 142) |= 0x4000u;
  *((_DWORD *)v7 + 142) |= 0x10000u;
  *((_DWORD *)v7 + 142) |= 0x20000u;
}

void sub_185811288(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void ____reusePoolRegistrationQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit.UIGraphicsRenderer.reuseRegistration", 0);
  id v1 = (void *)qword_1EB25CEB0;
  qword_1EB25CEB0 = (uint64_t)v0;
}

void sub_185812E28(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

unsigned char *_UIScrollViewRubberBandOffsetWithoutDecorationForOffset(unsigned char *result, double a2, double a3, double a4, double a5)
{
  if (a4 >= a3) {
    a3 = a4;
  }
  if (fabs(a5) >= 2.22044605e-16)
  {
    if (a3 < a2)
    {
      if (!result) {
        return result;
      }
LABEL_9:
      *CFMutableDictionaryRef result = 1;
      return result;
    }
    if (a2 < a4 && result) {
      goto LABEL_9;
    }
  }
  return result;
}

void sub_185814A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__n128 std::deque<_UIVelocityIntegratorDataSample>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 51 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x33)
    {
      unint64_t v23 = (char *)a1[3];
      unint64_t v24 = (char *)*a1;
      uint64_t v25 = (uint64_t)&v23[-*a1];
      if (v6 >= v25 >> 3)
      {
        uint64_t v28 = v25 >> 2;
        if (v23 == v24) {
          unint64_t v29 = 1;
        }
        else {
          unint64_t v29 = v28;
        }
        unint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(v29);
        uint64_t v32 = v31;
        unint64_t v33 = operator new(0xFF0uLL);
        unint64_t v34 = &v30[8 * v6];
        unint64_t v35 = &v30[8 * v32];
        if (v6 == v32)
        {
          uint64_t v36 = 8 * v6;
          if (v5 - v4 < 1)
          {
            unint64_t v75 = v33;
            uint64_t v76 = v36 >> 2;
            if (v5 == v4) {
              unint64_t v77 = 1;
            }
            else {
              unint64_t v77 = v76;
            }
            unint64_t v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(v77);
            unint64_t v34 = &v78[8 * (v77 >> 2)];
            unint64_t v35 = &v78[8 * v79];
            if (v30) {
              operator delete(v30);
            }
            unint64_t v30 = v78;
            unint64_t v33 = v75;
          }
          else
          {
            uint64_t v37 = v36 >> 3;
            if (v37 >= -1) {
              unint64_t v38 = v37 + 1;
            }
            else {
              unint64_t v38 = v37 + 2;
            }
            v34 -= 8 * (v38 >> 1);
          }
        }
        *(void *)unint64_t v34 = v33;
        long long v80 = v34 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v34 == v30)
          {
            if (v80 >= v35)
            {
              if (v35 == v30) {
                unint64_t v86 = 1;
              }
              else {
                unint64_t v86 = (v35 - v30) >> 2;
              }
              uint64_t v87 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(v86);
              uint64_t v89 = v87;
              unint64_t v34 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v91 = v80 - v30;
              BOOL v90 = v80 == v30;
              long long v80 = v34;
              if (!v90)
              {
                long long v80 = &v34[v91 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v92 = 8 * (v91 >> 3);
                uint64_t v93 = v34;
                unint64_t v94 = (uint64_t *)v30;
                do
                {
                  uint64_t v95 = *v94++;
                  *(void *)uint64_t v93 = v95;
                  v93 += 8;
                  v92 -= 8;
                }
                while (v92);
              }
              unint64_t v35 = &v87[8 * v88];
              if (v30) {
                operator delete(v30);
              }
              unint64_t v30 = v89;
            }
            else
            {
              uint64_t v82 = (v35 - v80) >> 3;
              if (v82 >= -1) {
                uint64_t v83 = v82 + 1;
              }
              else {
                uint64_t v83 = v82 + 2;
              }
              uint64_t v84 = v83 >> 1;
              unint64_t v34 = &v30[8 * (v83 >> 1)];
              unint64_t v85 = v30;
              if (v80 != v30)
              {
                memmove(v34, v30, v80 - v30);
                unint64_t v85 = v80;
              }
              long long v80 = &v85[8 * v84];
            }
          }
          uint64_t v96 = *(void *)(i - 8);
          *((void *)v34 - 1) = v96;
          v34 -= 8;
        }
        uint64_t v97 = (char *)*a1;
        *a1 = v30;
        a1[1] = v34;
        a1[2] = v80;
        a1[3] = v35;
        if (v97) {
          operator delete(v97);
        }
        goto LABEL_36;
      }
      unint64_t v26 = operator new(0xFF0uLL);
      unint64_t v27 = v26;
      if (v23 == v5)
      {
        if (v4 == v24)
        {
          if (v5 == v4) {
            unint64_t v53 = 1;
          }
          else {
            unint64_t v53 = (v23 - v4) >> 2;
          }
          uint64_t v54 = 2 * v53;
          unint64_t v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(v53);
          uint64_t v4 = &v55[(v54 + 6) & 0xFFFFFFFFFFFFFFF8];
          unint64_t v57 = (uint64_t *)a1[1];
          unint64_t v58 = v4;
          uint64_t v59 = a1[2] - (void)v57;
          if (v59)
          {
            unint64_t v58 = &v4[v59 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v60 = 8 * (v59 >> 3);
            unint64_t v61 = &v55[(v54 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v62 = *v57++;
              *(void *)unint64_t v61 = v62;
              v61 += 8;
              v60 -= 8;
            }
            while (v60);
          }
          unint64_t v63 = (char *)*a1;
          *a1 = v55;
          a1[1] = v4;
          a1[2] = v58;
          a1[3] = &v55[8 * v56];
          if (v63)
          {
            operator delete(v63);
            uint64_t v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v27;
        unint64_t v64 = (char *)a1[1];
        unint64_t v65 = (char *)a1[2];
        a1[1] = v64 - 8;
        uint64_t v66 = *((void *)v64 - 1);
        a1[1] = v64;
        if (v65 == (char *)a1[3])
        {
          uint64_t v67 = (uint64_t)&v64[-*a1];
          if ((unint64_t)v64 <= *a1)
          {
            if (v65 == (char *)*a1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = (uint64_t)&v65[-*a1] >> 2;
            }
            uint64_t v99 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(v98);
            BOOL v101 = &v99[8 * (v98 >> 2)];
            uint64_t v102 = (uint64_t *)a1[1];
            unint64_t v65 = v101;
            uint64_t v103 = a1[2] - (void)v102;
            if (v103)
            {
              unint64_t v65 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v104 = 8 * (v103 >> 3);
              BOOL v105 = &v99[8 * (v98 >> 2)];
              do
              {
                uint64_t v106 = *v102++;
                *(void *)BOOL v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            uint64_t v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v65;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              unint64_t v65 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v68 = v67 >> 3;
            BOOL v15 = v67 >> 3 < -1;
            uint64_t v69 = (v67 >> 3) + 2;
            if (v15) {
              uint64_t v70 = v69;
            }
            else {
              uint64_t v70 = v68 + 1;
            }
            uint64_t v71 = -(v70 >> 1);
            uint64_t v72 = v70 >> 1;
            unint64_t v73 = &v64[-8 * v72];
            int64_t v74 = v65 - v64;
            if (v65 != v64)
            {
              memmove(&v64[-8 * v72], v64, v65 - v64);
              unint64_t v64 = (char *)a1[1];
            }
            unint64_t v65 = &v73[v74];
            a1[1] = &v64[8 * v71];
            a1[2] = &v73[v74];
          }
        }
        *(void *)unint64_t v65 = v66;
      }
      else
      {
        *(void *)uint64_t v5 = v26;
      }
    }
    else
    {
      a1[4] = v8 - 51;
      uint64_t v12 = *(void *)v4;
      long long v10 = v4 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v39 = 1;
          }
          else {
            unint64_t v39 = (uint64_t)&v5[-*a1] >> 2;
          }
          unint64_t v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(v39);
          unint64_t v42 = &v40[8 * (v39 >> 2)];
          unint64_t v43 = (uint64_t *)a1[1];
          uint64_t v5 = v42;
          uint64_t v44 = a1[2] - (void)v43;
          if (v44)
          {
            uint64_t v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v45 = 8 * (v44 >> 3);
            unint64_t v46 = &v40[8 * (v39 >> 2)];
            do
            {
              uint64_t v47 = *v43++;
              *(void *)unint64_t v46 = v47;
              v46 += 8;
              v45 -= 8;
            }
            while (v45);
          }
          unint64_t v48 = (char *)*a1;
          *a1 = v40;
          a1[1] = v42;
          a1[2] = v5;
          a1[3] = &v40[8 * v41];
          if (v48)
          {
            operator delete(v48);
            uint64_t v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          unint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            uint64_t v5 = (char *)a1[1];
          }
          unint64_t v22 = &v5[8 * v18];
          uint64_t v5 = &v20[v21];
          a1[1] = v22;
          a1[2] = &v20[v21];
        }
      }
      *(void *)uint64_t v5 = v11;
    }
    a1[2] += 8;
LABEL_36:
    uint64_t v4 = (char *)a1[1];
    unint64_t v9 = a1[5] + a1[4];
  }
  unint64_t v49 = *(void *)&v4[8 * (v9 / 0x33)] + 80 * (v9 % 0x33);
  *(_OWORD *)unint64_t v49 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v51 = *(_OWORD *)(a2 + 32);
  long long v52 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v49 + 4_Block_object_dispose(&STACK[0x210], 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v49 + 64) = v52;
  *(__n128 *)(v49 + 16) = result;
  *(_OWORD *)(v49 + 32) = v51;
  ++a1[5];
  return result;
}

void sub_1858157B0(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<_UIVelocityIntegratorDataSample *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(8 * a1);
}

void sub_185819AA0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 304), 8);
  _Block_object_dispose((const void *)(v1 - 272), 8);
  _Unwind_Resume(a1);
}

void sub_18581A304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  uint64_t v1 = (__CFString *)CFStringCreateWithFormat(0, 0, @"{%.*g, %.*g}", 17, *(void *)&size.width, 17, *(void *)&size.height);
  return (NSString *)v1;
}

void sub_18581E500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

NSString *__cdecl NSStringFromCGPoint(CGPoint point)
{
  uint64_t v1 = (__CFString *)CFStringCreateWithFormat(0, 0, @"{%.*g, %.*g}", 17, *(void *)&point.x, 17, *(void *)&point.y);
  return (NSString *)v1;
}

__CFString *_PhaseDescription(uint64_t a1)
{
  if (a1 > 7)
  {
    uint64_t v2 = @"Unknown";
  }
  else
  {
    uint64_t v2 = _PhaseDescription_touchPhases[a1];
  }
  return v2;
}

double _UITouchForceFromTouches(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 count])
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v12;
      double v6 = 0.0;
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v12 != v5) {
            objc_enumerationMutation(v2);
          }
          objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * i), "force", (void)v11);
          double v6 = v6 + v8;
        }
        uint64_t v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v4);
    }
    else
    {
      double v6 = 0.0;
    }

    double v9 = v6 / (double)(unint64_t)[v2 count];
  }
  else
  {
    double v9 = 0.0;
  }

  return v9;
}

uint64_t _searchBarShouldSeparateLayouts()
{
  uint64_t result = UISearchBarUsesModernAppearance();
  if (result)
  {
    if (qword_1EB25D030 != -1) {
      dispatch_once(&qword_1EB25D030, &__block_literal_global_1157);
    }
    if (byte_1EB25D020)
    {
      return 0;
    }
    else
    {
      LODWORD(result) = _UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_UISearchBarSeparateLayouts, @"UISearchBarSeparateLayouts");
      if (byte_1EB256E94) {
        return 1;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

void sub_185820520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::__unordered_map_hasher<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>>>::__erase_unique<long>(void *a1, unint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::__unordered_map_hasher<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::hash<long>,std::equal_to<long>,true>,std::__unordered_map_equal<long,std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>,std::equal_to<long>,std::hash<long>,true>,std::allocator<std::__hash_value_type<long,UICollectionViewLayoutAttributes * {__strong}>>>::find<long>(a1, a2);
  if (!v3) {
    return;
  }
  uint64_t v4 = v3;
  int8x8_t v5 = (int8x8_t)a1[1];
  uint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    if (v7 >= *(void *)&v5) {
      v7 %= *(void *)&v5;
    }
  }
  else
  {
    v7 &= *(void *)&v5 - 1;
  }
  double v9 = *(uint64_t **)(*a1 + 8 * v7);
  do
  {
    long long v10 = v9;
    double v9 = (uint64_t *)*v9;
  }
  while (v9 != v3);
  if (v10 == a1 + 2) {
    goto LABEL_20;
  }
  unint64_t v11 = v10[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
  }
  else
  {
    v11 &= *(void *)&v5 - 1;
  }
  if (v11 != v7)
  {
LABEL_20:
    if (v6)
    {
      unint64_t v12 = *(void *)(v6 + 8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v13 = *(void *)(v6 + 8);
        if (v12 >= *(void *)&v5) {
          unint64_t v13 = v12 % *(void *)&v5;
        }
      }
      else
      {
        unint64_t v13 = v12 & (*(void *)&v5 - 1);
      }
      if (v13 == v7) {
        goto LABEL_24;
      }
    }
    *(void *)(*a1 + 8 * v7) = 0;
    uint64_t v6 = *v3;
  }
  if (v6)
  {
    unint64_t v12 = *(void *)(v6 + 8);
LABEL_24:
    if (v8.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v5) {
        v12 %= *(void *)&v5;
      }
    }
    else
    {
      v12 &= *(void *)&v5 - 1;
    }
    if (v12 != v7)
    {
      *(void *)(*a1 + 8 * v12) = v10;
      uint64_t v6 = *v3;
    }
  }
  *long long v10 = v6;
  uint64_t *v3 = 0;
  --a1[3];

  operator delete(v4);
}

void sub_185821370(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

BOOL _UIEdgeInsetsEqualToInsetsAlongAxis(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if ((unint64_t)(a1 - 4) <= 0xFFFFFFFFFFFFFFFCLL)
  {
    unint64_t v22 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v23 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _UIEdgeInsetsEqualToInsetsAlongAxis(UIEdgeInsets, UIEdgeInsets, UIAxis)");
    [v22 handleFailureInFunction:v23, @"_UICollectionLayoutHelpers.m", 722, @"Invalid parameter not satisfying: %@", @"axis == UIAxisVertical || axis == UIAxisHorizontal || axis == UIAxisBoth" file lineNumber description];
  }
  BOOL v18 = a3 == a7;
  if (a2 != a6) {
    BOOL v18 = 0;
  }
  if (a5 != a9) {
    BOOL v18 = 0;
  }
  if (a4 != a8) {
    BOOL v18 = 0;
  }
  BOOL v19 = a2 == a6;
  if (a4 != a8) {
    BOOL v19 = 0;
  }
  BOOL v20 = a3 == a7;
  if (a5 != a9) {
    BOOL v20 = 0;
  }
  if (a1 != 1) {
    BOOL v20 = 0;
  }
  if (a1 != 2) {
    BOOL v19 = v20;
  }
  if (a1 == 3) {
    return v18;
  }
  else {
    return v19;
  }
}

uint64_t _UISupportsShouldInvalidateForInsets()
{
  uint64_t result = dyld_program_sdk_at_least();
  if (result)
  {
    LODWORD(result) = _UIInternalPreferenceUsesDefault_0(&_UIInternalPreference_EnableCollectionViewLayoutShouldInvalidateForInsets, @"EnableCollectionViewLayoutShouldInvalidateForInsets");
    if (byte_1EB256F1C) {
      return 1;
    }
    else {
      return result;
    }
  }
  return result;
}

void sub_185823340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185824BBC(_Unwind_Exception *a1)
{
}

void sub_185826490(uint64_t a1, float *a2, uint64_t *a3)
{
  *(unsigned char *)(a1 + 327) = 0;
  if (!*(void *)(a1 + 312))
  {
    if (qword_1E8FB0078 != -1) {
      swift_once();
    }
    if (byte_1E8FAF7B8 != 1
      || (id v6 = objc_msgSend(self, sel__carScreen)) == 0
      || (unint64_t v7 = v6,
          id v8 = objc_msgSend(v6, sel_displayLinkWithTarget_selector_, a1, sel_displayLinkFire_),
          v7,
          !v8))
    {
      id v8 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, a1, sel_displayLinkFire_);
    }
    double v9 = *(void **)(a1 + 312);
    *(void *)(a1 + 312) = v8;
    long long v10 = v8;

    unint64_t v11 = (void *)MEMORY[0x18C109380](a1 + 48);
    if (v11)
    {
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v10;
      *(void *)(v15 + 24) = v11;
      v31[4] = sub_1856AB134;
      v31[5] = v15;
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 1107296256;
      v31[2] = sub_1856A95EC;
      v31[3] = &block_descriptor_164_0;
      uint64_t v16 = _Block_copy(v31);
      id v17 = v11;
      BOOL v18 = v10;
      id v19 = v17;
      swift_release();
      objc_msgSend(v19, sel_performBlock_, v16);
      _Block_release(v16);
    }
    BOOL v20 = *(void **)(a1 + 56);
    if (v20)
    {
      id v21 = v20;
      sub_186A1F03C();
    }
    *(float *)&double v12 = *a2;
    *(float *)&double v13 = a2[1];
    *(float *)&double v14 = a2[2];
    -[NSObject setPreferredFrameRateRange:](v10, sel_setPreferredFrameRateRange_, v12, v13, v14);
    uint64_t v22 = *a3;
    swift_bridgeObjectRetain();
    sub_185826818(v10, v22);
    swift_bridgeObjectRelease();
    float v23 = *a2;
    float v24 = a2[1];
    float v25 = a2[2];
    swift_beginAccess();
    _C2UpdateRequestSetRateRange((_DWORD *)(a1 + 176), v23, v24, v25);
    swift_endAccess();
    swift_beginAccess();
    _UIUpdateRequestActivate((int *)(a1 + 176), 0x100036u);
    swift_endAccess();
    if (qword_1E8FB0070 != -1) {
      swift_once();
    }
    uint64_t v26 = sub_186A1E5CC();
    __swift_project_value_buffer(v26, (uint64_t)qword_1E8FB0050);
    unint64_t v27 = sub_186A1E5AC();
    os_log_type_t v28 = sub_186A1EEAC();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v29 = 0;
      _os_log_impl(&dword_1853B0000, v27, v28, "Created CADisplayLink for persistent background thread", v29, 2u);
      MEMORY[0x18C109220](v29, -1, -1);
      unint64_t v30 = v10;
    }
    else
    {
      unint64_t v30 = v27;
      unint64_t v27 = v10;
    }
  }
}

_DWORD *sub_185826818(id isStackAllocationSafe, uint64_t a2)
{
  id v2 = isStackAllocationSafe;
  v8[1] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    if (v3 >> 61) {
      __break(1u);
    }
    if ((uint64_t)(4 * v3) > 1024)
    {
      isStackAllocationSafe = (id)swift_stdlib_isStackAllocationSafe();
      if (!isStackAllocationSafe)
      {
        unint64_t v7 = (_DWORD *)swift_slowAlloc();
        sub_1858269F4(v7, v3, a2, v2);
        JUMPOUT(0x18C109220);
      }
    }
    MEMORY[0x1F4188790](isStackAllocationSafe);
    return sub_1858269F4((void *)((char *)v8 - v5), v3, a2, v2);
  }
  else
  {
    return objc_msgSend(isStackAllocationSafe, sel_setHighFrameRateReasons_count_, 0, 0);
  }
}

_DWORD *sub_1858269F4(_DWORD *result, int a2, uint64_t a3, id a4)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  do
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
    }
    else
    {
      int64_t v14 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_23;
      }
      if (v14 >= v10) {
        return objc_msgSend(a4, sel_setHighFrameRateReasons_count_, result, *(void *)(a3 + 16));
      }
      unint64_t v15 = *(void *)(v6 + 8 * v14);
      ++v5;
      if (!v15)
      {
        int64_t v5 = v14 + 1;
        if (v14 + 1 >= v10) {
          return objc_msgSend(a4, sel_setHighFrameRateReasons_count_, result, *(void *)(a3 + 16));
        }
        unint64_t v15 = *(void *)(v6 + 8 * v5);
        if (!v15)
        {
          int64_t v5 = v14 + 2;
          if (v14 + 2 >= v10) {
            return objc_msgSend(a4, sel_setHighFrameRateReasons_count_, result, *(void *)(a3 + 16));
          }
          unint64_t v15 = *(void *)(v6 + 8 * v5);
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v10) {
              return objc_msgSend(a4, sel_setHighFrameRateReasons_count_, result, *(void *)(a3 + 16));
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                int64_t v5 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_24;
                }
                if (v5 >= v10) {
                  return objc_msgSend(a4, sel_setHighFrameRateReasons_count_, result, *(void *)(a3 + 16));
                }
                unint64_t v15 = *(void *)(v6 + 8 * v5);
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v5 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v12 = __clz(__rbit64(v15)) + (v5 << 6);
    }
    result[v4] = *(_DWORD *)(*(void *)(a3 + 48) + 4 * v12);
  }
  while (!__OFADD__(v4++, 1));
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t _UIUpdateRequestRegistryAddRecord(uint64_t a1, int *a2, unsigned int a3)
{
  uint64_t v6 = a1 + 88;
  int v7 = *(_WORD *)(a1 + 102) == 0;
  if (*a2) {
    uint64_t v8 = a1 + 8;
  }
  else {
    uint64_t v8 = a1 + 48;
  }
  if (!_UIUpdateRequestRecordSortedSetAddRecord(v8, (unint64_t)a2, a3)) {
    goto LABEL_23;
  }
  int v9 = *a2;
  int v10 = 64;
  if ((*a2 & 4) != 0)
  {
    int v24 = *(_DWORD *)(a1 + 116);
    *(_DWORD *)(a1 + 116) = v24 + 1;
    if (v24) {
      int v10 = 64;
    }
    else {
      int v10 = 66;
    }
    if ((v9 & 0x10) == 0)
    {
LABEL_7:
      if ((v9 & 0x20) == 0) {
        goto LABEL_8;
      }
      goto LABEL_38;
    }
  }
  else if ((v9 & 0x10) == 0)
  {
    goto LABEL_7;
  }
  int v25 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a1 + 120) = v25 + 1;
  if (!v25) {
    v10 |= 4u;
  }
  if ((v9 & 0x20) == 0)
  {
LABEL_8:
    if ((v9 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_38:
  int v26 = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a1 + 132) = v26 + 1;
  if (!v26) {
    v10 |= 8u;
  }
  if ((v9 & 0x40) == 0)
  {
LABEL_9:
    if ((v9 & 0x80) == 0) {
      goto LABEL_10;
    }
LABEL_44:
    int v28 = *(_DWORD *)(a1 + 128);
    *(_DWORD *)(a1 + 12_Block_object_dispose(&STACK[0x520], 8) = v28 + 1;
    if (!v28) {
      v10 |= 0x80u;
    }
    if ((v9 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_41:
  int v27 = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a1 + 124) = v27 + 1;
  if (!v27) {
    v10 |= 0x10u;
  }
  if ((v9 & 0x80) != 0) {
    goto LABEL_44;
  }
LABEL_10:
  if (v9) {
LABEL_11:
  }
    *a2 = v9 | 2;
LABEL_12:
  if ((*(unsigned char *)(v8 + 24) & 1) == 0)
  {
    float v11 = (float)a2[1];
    float v12 = (float)a2[3];
    float v13 = (float)a2[2];
    if (*(void *)(v8 + 8) != 1)
    {
      float v14 = *(float *)(v8 + 32);
      float v15 = *(float *)(v8 + 36);
      unsigned int v16 = *(float *)(v8 + 28);
      if (v16 <= v11) {
        unsigned int v16 = v11;
      }
      float v11 = (float)v16;
      unsigned int v17 = v15;
      if (v15 <= v13) {
        unsigned int v17 = v13;
      }
      float v13 = (float)v17;
      unsigned int v18 = v14;
      if (v14 - 1 >= v12 - 1) {
        unsigned int v18 = v12;
      }
      float v12 = (float)v18;
    }
    *(float *)(v8 + 2_Block_object_dispose(&STACK[0x520], 8) = v11;
    *(float *)(v8 + 32) = v12;
    *(float *)(v8 + 36) = v13;
  }
  *(_DWORD *)(a1 + 4) |= 1u;
  v7 |= v10;
LABEL_23:
  uint64_t result = _UIUpdateReasonSortedSetAddReason(v6, a3);
  int v20 = v7 | 0x20;
  if (!result) {
    int v20 = v7;
  }
  int v21 = *(_DWORD *)a1 | v20;
  if (v21 != *(_DWORD *)a1)
  {
    *(_DWORD *)a1 = v21;
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 136);
    if (v22)
    {
      uint64_t v23 = *(void *)(a1 + 144);
      return v22(a1, v23);
    }
  }
  return result;
}

uint64_t _UIUpdateRequestActivate(int *a1, unsigned int a2)
{
  return _UIUpdateRequestRegistryAddRecord((uint64_t)&mainRegistry, a1, a2);
}

uint64_t _UIUpdateRequestRecordSortedSetAddRecord(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(char **)a1;
  int v7 = (void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = (char *)(*(void *)a1 + 24 * v8);
  if (!v8) {
    goto LABEL_8;
  }
  do
  {
    unint64_t v10 = v8 >> 1;
    float v11 = &v6[24 * (v8 >> 1)];
    unint64_t v13 = *(void *)v11;
    float v12 = v11 + 24;
    v8 += ~(v8 >> 1);
    if (v13 < a2) {
      uint64_t v6 = v12;
    }
    else {
      unint64_t v8 = v10;
    }
  }
  while (v8);
  if (v9 != v6 && (int v9 = v6, *(void *)v6 == a2))
  {
    _UIUpdateReasonSortedSetAddReason((uint64_t)(v6 + 8), a3);
    return 0;
  }
  else
  {
LABEL_8:
    uint64_t v14 = 1;
    float v15 = _UICArrayInsert(v9, 1, 24, v7, (unint64_t *)(a1 + 16), (const void **)a1);
    *(void *)float v15 = a2;
    *((void *)v15 + 1) = 0;
    *((_DWORD *)v15 + 4) = a3;
    *((_DWORD *)v15 + 5) = 65537;
  }
  return v14;
}

uint64_t _UIUpdateReasonSortedSetAddReason(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(char **)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(unsigned __int16 *)(a1 + 12);
  }
  else
  {
    uint64_t v4 = (char *)(a1 + 8);
    uint64_t v5 = 1;
  }
  int v7 = (char *)(a1 + 14);
  uint64_t v6 = *(unsigned __int16 *)(a1 + 14);
  if (*(_WORD *)(a1 + 14))
  {
    unint64_t v8 = v4;
    unint64_t v9 = *(unsigned __int16 *)(a1 + 14);
    do
    {
      unint64_t v10 = v9 >> 1;
      float v11 = &v8[4 * (v9 >> 1)];
      unsigned int v13 = *(_DWORD *)v11;
      float v12 = v11 + 4;
      v9 += ~(v9 >> 1);
      if (v13 < a2) {
        unint64_t v8 = v12;
      }
      else {
        unint64_t v9 = v10;
      }
    }
    while (v9);
    uint64_t v14 = (v8 - v4) >> 2;
    if (&v4[4 * v6] != v8 && *(_DWORD *)v8 == a2)
    {
      uint64_t result = 0;
      int v7 = &v4[4 * v5 + 2 * v14];
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (v5 < (unsigned __int16)(v6 + 1))
  {
    if (2 * (int)v5 <= (unsigned __int16)(v6 + 1)) {
      unsigned __int16 v16 = v6 + 1;
    }
    else {
      unsigned __int16 v16 = 2 * v5;
    }
    uint64_t v5 = v16;
    unsigned int v17 = (char *)malloc_type_malloc(6 * v5, 0xEB2617ADuLL);
    uint64_t v4 = v17;
    unsigned int v18 = &v17[4 * v5];
    if (*(void *)a1)
    {
      memcpy(v17, *(const void **)a1, 4 * *(unsigned __int16 *)(a1 + 14));
      memcpy(v18, (const void *)(*(void *)a1 + 4 * *(unsigned __int16 *)(a1 + 12)), 2 * *(unsigned __int16 *)(a1 + 14));
      free(*(void **)a1);
    }
    else
    {
      *(_DWORD *)unsigned int v17 = *(_DWORD *)(a1 + 8);
      *(_WORD *)unsigned int v18 = *(_WORD *)(a1 + 12);
    }
    *(void *)a1 = v4;
    *(_WORD *)(a1 + 12) = v16;
    uint64_t v6 = *(unsigned __int16 *)(a1 + 14);
  }
  id v19 = &v4[4 * v14];
  uint64_t v20 = v6 - v14;
  int v21 = &v4[4 * v5 + 2 * v14];
  memmove(v19 + 4, v19, 4 * (v6 - v14));
  memmove(v21 + 2, v21, 2 * v20);
  *(_DWORD *)id v19 = a2;
  uint64_t result = 1;
  *(_WORD *)int v21 = 1;
LABEL_23:
  ++*(_WORD *)v7;
  return result;
}

char *_UICArrayInsert(char *__src, uint64_t a2, uint64_t a3, void *a4, unint64_t *a5, const void **a6)
{
  unint64_t v8 = __src;
  unint64_t v9 = (char *)(__src - (unsigned char *)*a6);
  uint64_t v10 = a3 * a2;
  size_t v11 = (unsigned char *)*a6 - __src + *a4 * a3;
  unint64_t v12 = *a4 + a2;
  if (*a5 >= v12)
  {
    memmove(&__src[v10], __src, v11);
  }
  else
  {
    if (2 * *a5 > v12) {
      unint64_t v12 = 2 * *a5;
    }
    *a5 = v12;
    uint64_t v14 = malloc_type_malloc(v12 * a3, 0x8752E377uLL);
    float v15 = v14;
    if (*a6)
    {
      memcpy(v14, *a6, (size_t)v9);
      memcpy(&v9[(void)v15 + v10], v8, v11);
      free((void *)*a6);
    }
    *a6 = v15;
    unint64_t v8 = &v9[(void)v15];
  }
  *a4 += a2;
  return v8;
}

double _UISheetPageSize(void *a1)
{
  return _UISheetSize(a1, 0, *MEMORY[0x1E4F1DB30], *(double *)(MEMORY[0x1E4F1DB30] + 8));
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return (NSData *)_UIImageDataRepresentation(image, @"public.png", &__block_literal_global_28);
}

void sub_1858276B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CGColorSpaceRef __sRGBColorSpace_block_invoke()
{
  if (dyld_program_sdk_at_least()) {
    CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
  }
  else {
    CGColorSpaceRef result = CGColorSpaceCreateDeviceRGB();
  }
  qword_1EB25E448 = (uint64_t)result;
  return result;
}

_UIOverlayEffect *_UIVisualEffectNewOverlay(uint64_t a1, double a2)
{
  unint64_t v3 = _UICompositingFilterForMode(a1);
  if (v3)
  {
    uint64_t v4 = objc_alloc_init(_UIOverlayEffect);
    [(_UIOverlayEffect *)v4 setFilterType:v3];
    [(_UIOverlayEffect *)v4 setAlpha:a2];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id _UICompositingFilterForMode(uint64_t a1)
{
  id v2 = (id *)MEMORY[0x1E4F3A2B8];
  switch(a1)
  {
    case 0:
      goto LABEL_42;
    case 1:
      id v2 = (id *)MEMORY[0x1E4F3A2A0];
      goto LABEL_42;
    case 2:
      id v2 = (id *)MEMORY[0x1E4F3A2F8];
      goto LABEL_42;
    case 3:
      id v2 = (id *)MEMORY[0x1E4F3A2C8];
      goto LABEL_42;
    case 4:
      id v2 = (id *)MEMORY[0x1E4F3A070];
      goto LABEL_42;
    case 5:
      id v2 = (id *)MEMORY[0x1E4F3A220];
      goto LABEL_42;
    case 6:
      id v2 = (id *)MEMORY[0x1E4F3A018];
      goto LABEL_42;
    case 7:
      id v2 = (id *)MEMORY[0x1E4F3A008];
      goto LABEL_42;
    case 8:
      id v2 = (id *)MEMORY[0x1E4F3A300];
      goto LABEL_42;
    case 9:
      id v2 = (id *)MEMORY[0x1E4F3A0D8];
      goto LABEL_42;
    case 10:
      id v2 = (id *)MEMORY[0x1E4F3A0A8];
      goto LABEL_42;
    case 11:
      id v2 = (id *)MEMORY[0x1E4F3A0C8];
      goto LABEL_42;
    case 12:
      id v2 = (id *)MEMORY[0x1E4F39FE8];
      goto LABEL_42;
    case 13:
      id v2 = (id *)MEMORY[0x1E4F3A060];
      goto LABEL_42;
    case 14:
      id v2 = (id *)MEMORY[0x1E4F3A310];
      goto LABEL_42;
    case 15:
      id v2 = (id *)MEMORY[0x1E4F3A318];
      goto LABEL_42;
    case 16:
      id v2 = (id *)MEMORY[0x1E4F3A308];
      goto LABEL_42;
    case 17:
      id v2 = (id *)MEMORY[0x1E4F3A080];
      goto LABEL_42;
    case 18:
      id v2 = (id *)MEMORY[0x1E4F3A0A0];
      goto LABEL_42;
    case 19:
      id v2 = (id *)MEMORY[0x1E4F3A090];
      goto LABEL_42;
    case 20:
      id v2 = (id *)MEMORY[0x1E4F3A098];
      goto LABEL_42;
    case 21:
      id v2 = (id *)MEMORY[0x1E4F3A088];
      goto LABEL_42;
    case 22:
      id v2 = (id *)MEMORY[0x1E4F3A370];
      goto LABEL_42;
    case 23:
      id v2 = (id *)MEMORY[0x1E4F3A2E0];
      goto LABEL_42;
    case 24:
      id v2 = (id *)MEMORY[0x1E4F3A2E8];
LABEL_42:
      id v3 = *v2;
      break;
    default:
      switch(a1)
      {
        case 1000:
          id v2 = (id *)MEMORY[0x1E4F3A338];
          goto LABEL_42;
        case 1001:
          id v2 = (id *)MEMORY[0x1E4F3A330];
          goto LABEL_42;
        case 1002:
          id v2 = (id *)MEMORY[0x1E4F3A290];
          goto LABEL_42;
        case 1003:
          id v2 = (id *)MEMORY[0x1E4F3A280];
          goto LABEL_42;
        case 1004:
          id v2 = (id *)MEMORY[0x1E4F3A298];
          goto LABEL_42;
        case 1005:
          id v2 = (id *)MEMORY[0x1E4F3A0B0];
          goto LABEL_42;
        case 1006:
          id v2 = (id *)MEMORY[0x1E4F3A240];
          goto LABEL_42;
        case 1007:
          id v2 = (id *)MEMORY[0x1E4F3A248];
          goto LABEL_42;
        case 1008:
          id v2 = (id *)MEMORY[0x1E4F3A250];
          goto LABEL_42;
        case 1009:
          id v2 = (id *)MEMORY[0x1E4F3A2D8];
          goto LABEL_42;
        case 1010:
          id v2 = (id *)MEMORY[0x1E4F3A078];
          goto LABEL_42;
        case 1011:
          id v2 = (id *)MEMORY[0x1E4F3A228];
          goto LABEL_42;
        default:
          id v3 = 0;
          break;
      }
      break;
  }
  return v3;
}

void ___navigationBarPrefersLargeTitles_block_invoke()
{
  _UIKitUserDefaults();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  dispatch_queue_t v0 = [v2 objectForKey:@"ForceLargeTitlesOn"];
  uint64_t v1 = v0;
  if (v0 && [v0 BOOLValue]) {
    _MergedGlobals_131 = 257;
  }
}

void sub_185829408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_18582BE34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _getRestorationRetryCountAndUpdateIfNecessary(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 1;
  char v9 = 1;
  id v3 = _getRestorationInProgressDictionary(v1, 1, (BOOL *)&v9);
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = [v3 objectForKey:@"kRestorationTriesLeft"];
    uint64_t v6 = [v5 integerValue];
    uint64_t v2 = v6 - 1;

    if (v9)
    {
      if (v6 >= 2)
      {
        int v7 = [NSNumber numberWithInteger:v2];
        [v4 setObject:v7 forKey:@"kRestorationTriesLeft"];

        if ((_updateRestorationInProgressFile(v1, v4) & 1) == 0)
        {
          NSLog(&cfstr_WarningUnableT_0.isa);
          uint64_t v2 = 0;
        }
      }
    }
  }

  return v2;
}

uint64_t objectdestroy_36Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t _UICollectionViewCellContextMenuSuppressesSelectionState()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_CollectionViewCellContextMenuSuppressesSelectionState,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_CollectionViewCellContextMenuSuppressesSelectionState))
  {
    BOOL v1 = 1;
  }
  else
  {
    do
    {
      BOOL v1 = v0 >= v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_CollectionViewCellContextMenuSuppressesSelectionState, @"CollectionViewCellContextMenuSuppressesSelectionState", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_CollectionViewCellContextMenuSuppressesSelectionState;
    }
    while (v0 != _UIInternalPreference_CollectionViewCellContextMenuSuppressesSelectionState);
  }
  return byte_1EB256F14 || v1;
}

void _UIEventProfileCollectionInit()
{
  if (os_variant_has_internal_diagnostics())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, 0, (CFNotificationCallback)eventProfileCollectionCallback, @"com.apple.EventTimingProfileCollection", 0, CFNotificationSuspensionBehaviorCoalesce);
    eventProfileCollectionCheckEnabled();
    _MergedGlobals_998 = v1;
  }
}

unint64_t __UILogGetCategoryImpl(unsigned char *a1)
{
  return __UILogCategoryGetNode(a1, (uint64_t)&g_UILogCategories, (uint64_t (*)(unsigned char *))__UILogCategoryNewNode)- 16;
}

id ___wakeOnTouchSynchronizationFilter_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___wakeOnTouchSynchronizationFilter_block_invoke_2;
  void v7[3] = &unk_1E5304BB0;
  id v9 = v3;
  id v8 = *(id *)(a1 + 32);
  id v4 = v3;
  uint64_t v5 = _Block_copy(v7);

  return v5;
}

id ___pencilRangeAndTouchingSeparationFilter_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___pencilRangeAndTouchingSeparationFilter_block_invoke_2;
  aBlock[3] = &unk_1E5304A00;
  id v7 = v2;
  id v3 = v2;
  id v4 = _Block_copy(aBlock);

  return v4;
}

id ___iosMacEventExtractionFilter_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___iosMacEventExtractionFilter_block_invoke_2;
  void v7[3] = &unk_1E5304BB0;
  id v8 = *(id *)(a1 + 32);
  id v9 = v3;
  id v4 = v3;
  uint64_t v5 = _Block_copy(v7);

  return v5;
}

id ___hoverEventMemoryFilter_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___hoverEventMemoryFilter_block_invoke_2;
  void v7[3] = &unk_1E5304BB0;
  id v8 = *(id *)(a1 + 32);
  id v9 = v3;
  id v4 = v3;
  uint64_t v5 = _Block_copy(v7);

  return v5;
}

id ___grapeFingerOneStrokeMisinterpretationWorkaround_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___grapeFingerOneStrokeMisinterpretationWorkaround_block_invoke_2;
  aBlock[3] = &unk_1E5304A00;
  id v7 = v2;
  id v3 = v2;
  id v4 = _Block_copy(aBlock);

  return v4;
}

id ___globalEdgeSwipeEventDiscardFilterGenerator_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___globalEdgeSwipeEventDiscardFilterGenerator_block_invoke_2;
  aBlock[3] = &unk_1E5304A00;
  id v7 = v2;
  id v3 = v2;
  id v4 = _Block_copy(aBlock);

  return v4;
}

id ___dragEventExtractionFilter_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___dragEventExtractionFilter_block_invoke_2;
  void v7[3] = &unk_1E5304BB0;
  id v9 = v3;
  id v8 = *(id *)(a1 + 32);
  id v4 = v3;
  uint64_t v5 = _Block_copy(v7);

  return v5;
}

uint64_t __UITraitEnvironmentLayoutDirectionFromCUILayoutDirection(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a1 == 5) {
      return 0;
    }
    if (a1 == 4) {
      return 1;
    }
    if (os_variant_has_internal_diagnostics())
    {
      id v3 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      {
        int v5 = 134217984;
        uint64_t v6 = a1;
        _os_log_fault_impl(&dword_1853B0000, v3, OS_LOG_TYPE_FAULT, "Got an unexpected layout direction from CoreUI: %lu", (uint8_t *)&v5, 0xCu);
      }
    }
    else
    {
      id v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &__UITraitEnvironmentLayoutDirectionFromCUILayoutDirection___s_category)+ 8);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v5 = 134217984;
        uint64_t v6 = a1;
        _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "Got an unexpected layout direction from CoreUI: %lu", (uint8_t *)&v5, 0xCu);
      }
    }
  }
  return -1;
}

void _UITableViewControllerCommonInit(void *a1)
{
  int v5 = a1;
  [v5 setClearsSelectionOnViewWillAppear:1];
  char v1 = v5;
  if (!v5[126])
  {
    int v2 = dyld_program_sdk_at_least();
    char v1 = v5;
    if (v2)
    {
      id v3 = objc_alloc_init(_UIFilteredDataSource);
      id v4 = (void *)v5[126];
      v5[126] = v3;

      char v1 = v5;
    }
  }
  v1[127] = 0;
}

uint64_t _UISwipeGestureRecognizerCommonInit(void *a1)
{
  a1[34] = 0x3FE0000000000000;
  a1[35] = 0x4049000000000000;
  a1[36] = 0x47EFFFFFE0000000;
  a1[37] = 0;
  a1[38] = 0x4049000000000000;
  a1[39] = 0;
  a1[41] = 0x3FAEB851EB851EB8;
  a1[42] = 0x3F947AE147AE147BLL;
  a1[40] = 0;
  a1[45] = 1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v3 = (void *)a1[44];
  a1[44] = v2;

  [a1 setNumberOfTouchesRequired:1];
  return [a1 _setRequiresSystemGesturesToFail:1];
}

void sub_18583363C(uint64_t *a1, unint64_t *a2, uint64_t a3, SEL *a4)
{
  uint64_t v6 = *a1;
  uint64_t v7 = (void *)sub_185833840();
  id v8 = *(void **)(v6 + 16);
  id v9 = v7;
  id v10 = v8;
  swift_release();
  objc_msgSend(v10, sel_copy);

  sub_186A1F1CC();
  swift_unknownObjectRelease();
  sub_1853B985C(0, a2);
  swift_dynamicCast();
  objc_msgSend(v9, *a4, v11);
}

void sub_185833724(uint64_t a1, uint64_t a2, SEL *a3)
{
  int v5 = (void *)sub_185833840();
  id v6 = v5;
  if (a2)
  {
    id v7 = (id)sub_186A1E92C();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v7 = 0;
  }
  objc_msgSend(v5, *a3, v7);
}

uint64_t sub_185833840()
{
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = *v0;
  if (isUniquelyReferenced_nonNull_native) {
    return *(void *)(v2 + 16);
  }
  objc_msgSend(*(id *)(v2 + 16), sel_copy);
  sub_186A1F1CC();
  swift_unknownObjectRelease();
  sub_1853B985C(0, &qword_1E8FB5C08);
  swift_dynamicCast();
  uint64_t v3 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF448);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v6;
  swift_release();
  uint64_t *v0 = v4;
  return v3;
}

void _supplementaryColumnWidthSupportCheck(void *a1)
{
  uint64_t v4 = a1;
  if ([v4[122] style] != 2)
  {
    char v1 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v2 = *MEMORY[0x1E4F1C3C8];
    uint64_t v3 = _UISplitViewControllerStyleDescription([v4[122] style]);
    [v1 raise:v2, @"UISplitViewController supplementaryColumnWidth properties unsupported for style = %@", v3 format];
  }
}

void sub_1858351CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_185835408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185836D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_185837490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UITextContainerViewResyncNSTextContainer(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  id v26 = a1;
  id v8 = [v26 textContainer];
  [v26 textContainerInset];
  double v23 = v10;
  double v24 = v9;
  double v12 = v11;
  double v14 = v13;
  [v8 size];
  double v16 = v15;
  double v18 = v17;
  double v19 = v15;
  if ([v8 widthTracksTextView])
  {
    v28.origin.CGFloat x = a2;
    v28.origin.CGFloat y = a3;
    v28.size.CGFloat width = a4;
    v28.size.CGFloat height = a5;
    double v19 = CGRectGetWidth(v28) - (v12 + v14);
  }
  int v20 = [v8 heightTracksTextView];
  double v21 = v18;
  if (v20)
  {
    v29.origin.CGFloat x = a2;
    v29.origin.CGFloat y = a3;
    v29.size.CGFloat width = a4;
    v29.size.CGFloat height = a5;
    double v21 = CGRectGetHeight(v29) - (v24 + v23);
  }
  if (v16 != v19 || v18 != v21)
  {
    objc_msgSend(v8, "setSize:", v19, v21);
    [v26 invalidateTextContainerOrigin];
    [v26 setNeedsDisplay];
  }
}

void sub_185839B10(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18583B968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

BOOL _tabElementsContainsTab(void *a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___tabElementsContainsTab_block_invoke;
  void v7[3] = &unk_1E52E7F28;
  id v8 = v3;
  id v4 = v3;
  BOOL v5 = [a1 indexOfObjectPassingTest:v7] != 0x7FFFFFFFFFFFFFFFLL;

  return v5;
}

void ___fixAppLayoutAmbiguityIfNecessary_block_invoke()
{
  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    id v1 = [MEMORY[0x1E4F28B50] mainBundle];
    int v0 = [v1 bundleIdentifier];
    byte_1EB25D139 = [v0 isEqualToString:@"com.outerspaceapps.itranslate"];
  }
}

uint64_t sub_18583CD54@<X0>(SEL *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [self *a1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255AC8);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *a2 = result;
  return result;
}

void sub_18583D34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

__CFString *UIApplicationSceneStringForClassicMode(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      uint64_t result = @"none";
      break;
    case 1:
      uint64_t result = @"phone";
      break;
    case 2:
      uint64_t result = @"4\" phone";
      break;
    case 3:
      uint64_t result = @"4.7\" phone";
      break;
    case 4:
      uint64_t result = @"5.5\" phone";
      break;
    case 5:
      uint64_t result = @"5.8\" rounded phone";
      break;
    case 6:
      uint64_t result = @"6.5\" rounded phone";
      break;
    case 7:
      uint64_t result = @"pad";
      break;
    case 8:
      uint64_t result = @"10.5\" pad";
      break;
    case 9:
      uint64_t result = @"12.9\" pad";
      break;
    case 10:
      uint64_t result = @"11\" rounded pad";
      break;
    default:
      if (a1 == 100) {
        uint64_t result = @"originalTV";
      }
      else {
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

void sub_18583E3A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void ____isOldFaceBook_block_invoke()
{
  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    id v1 = [MEMORY[0x1E4F28B50] mainBundle];
    int v0 = [v1 bundleIdentifier];
    byte_1EB25A38A = [@"com.facebook.Facebook" isEqualToString:v0];
  }
}

void sub_18583EDC8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t _UIViewVisitorEntertainAscendingVisitors(uint64_t result, uint64_t a2, void *a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v3 = a3;
    BOOL v5 = (void **)result;
    while (1)
    {
      MEMORY[0x1F4188790](result);
      double v9 = (char *)v12 - v8;
      if (v7 <= 0x1FFFFFFFFFFFFFFELL) {
        double v10 = (char *)v12 - v8;
      }
      else {
        double v10 = 0;
      }
      if (v7 - 0x1FFFFFFFFFFFFFFFLL >= 0xE000000000000042) {
        double v10 = (char *)malloc_type_malloc(8 * v6, 0x6F7307A5uLL);
      }
      if (!v10) {
        break;
      }
      uint64_t v11 = _UIViewVisitorEntertainVisitors(v5, (uint64_t)v10, (uint64_t)v3, 0);
      if ([v3 _maskView]) {
        _UIViewVisitorEntertainVisitors(v5, 0, [v3 _maskView], 1);
      }
      if (v11 != a2)
      {
        memcpy(v5, v10, 8 * v11);
        a2 = v11;
      }
      if (v10 != v9) {
        free(v10);
      }
      uint64_t result = [v3 superview];
      if (result)
      {
        uint64_t v3 = (void *)result;
        if (a2) {
          continue;
        }
      }
      return result;
    }
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CA00], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E4F1C4A0], @"failed to alloc memory for array", 0), "raise");
  }
  return result;
}

uint64_t _UIInterfaceOrientationRotationDirectionForRotationFromInterfaceOrientationToInterfaceOrientation(uint64_t a1, uint64_t a2, int a3)
{
  if ((unint64_t)(a1 - 3) < 2 != (unint64_t)(a2 - 3) < 2)
  {
    double v3 = 0.0;
    double v4 = 0.0;
    if (a1 != 1)
    {
      if (a1 == 3)
      {
        double v4 = 1.57079633;
      }
      else if (a1 == 4)
      {
        double v4 = -1.57079633;
      }
      else
      {
        double v4 = 3.14159265;
        if (a1 != 2) {
          double v4 = 0.0;
        }
      }
    }
    if (a2 != 1)
    {
      if (a2 == 3)
      {
        double v3 = 1.57079633;
      }
      else if (a2 == 4)
      {
        double v3 = -1.57079633;
      }
      else
      {
        double v3 = 3.14159265;
        if (a2 != 2) {
          double v3 = 0.0;
        }
      }
    }
    return _UIInterfaceOrientationRotationDirectionForRotationFromAngleToAngle(a3, v4, v3);
  }
  else if (a3)
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

void sub_185846084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18584B828(_Unwind_Exception *a1)
{
}

void layoutClippingView(void *a1, void *a2, int a3)
{
  id v5 = a1;
  if (v5)
  {
    id v41 = v5;
    uint64_t v6 = [a2 _configuredFloatableView];
    [v6 bounds];
    double v8 = v7;
    double v10 = v9;
    double v12 = v11;
    double v14 = v13;
    double v15 = [v41 superview];
    [v15 bounds];
    CGFloat v17 = v16;
    double v19 = v18;
    CGFloat v21 = v20;
    double v23 = v22;
    objc_msgSend(v15, "convertRect:fromView:", v6, v8, v10, v12, v14);
    if (a3)
    {
      double v28 = CGRectGetMaxX(*(CGRect *)&v24) + 5.0;
      [v6 frame];
      CGFloat v29 = CGRectGetWidth(v43) + 5.0;
      [v15 safeAreaInsets];
      double v31 = v29 + v30;
      double v32 = v28;
    }
    else
    {
      double v33 = CGRectGetMinX(*(CGRect *)&v24) + -5.0;
      if (v33 <= 0.0) {
        double v32 = v33;
      }
      else {
        double v32 = 0.0;
      }
      v44.origin.CGFloat x = v17;
      v44.origin.CGFloat y = v19;
      v44.size.CGFloat width = v21;
      v44.size.CGFloat height = v23;
      double v28 = CGRectGetMaxX(v44) - v33;
      v45.origin.CGFloat x = v17;
      v45.origin.CGFloat y = v19;
      v45.size.CGFloat width = v21;
      v45.size.CGFloat height = v23;
      double MaxX = CGRectGetMaxX(v45);
      [v6 frame];
      double v35 = MaxX - CGRectGetWidth(v46) + -5.0;
      [v15 safeAreaInsets];
      double v31 = v35 - v36;
    }
    v47.origin.CGFloat x = v32;
    v47.origin.CGFloat y = v19;
    v47.size.CGFloat width = v21;
    v47.size.CGFloat height = v23;
    double v37 = CGRectGetWidth(v47) - v28;
    if (v37 >= 0.0) {
      double v38 = v37;
    }
    else {
      double v38 = 0.0;
    }
    objc_msgSend(v41, "setFrame:", v32, v19, v38, v23);
    v48.origin.CGFloat x = v17;
    v48.origin.CGFloat y = v19;
    v48.size.CGFloat width = v21;
    v48.size.CGFloat height = v23;
    CGFloat v39 = CGRectGetWidth(v48) - v31;
    double v40 = v38 / v39;
    if (v39 <= 0.0) {
      double v40 = 1.0;
    }
    objc_msgSend(v41, "setAlpha:", fmax(fmin(v40, 1.0), 0.0));
    [v15 layoutIfNeeded];

    id v5 = v41;
  }
}

void __layoutSideBySideViewsColumnStyle_block_invoke(uint64_t a1, void *a2, void *a3, void *a4, double a5, double a6, double a7)
{
  id v26 = a2;
  id v13 = a3;
  id v14 = a4;
  if (v26)
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
    double v16 = *(double *)(v15 + 24);
    if (a7 != 0.0 || *(unsigned char *)(a1 + 64))
    {
      double v17 = *(double *)(a1 + 56);
      if (a7 == 0.0 && *(unsigned char *)(a1 + 64)) {
        *(double *)(v15 + 24) = v16 + a5;
      }
    }
    else
    {
      *(double *)(v15 + 24) = v16 - a5;
      double v16 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      double v17 = *(double *)(a1 + 56);
    }
    if ([*(id *)(a1 + 32) containsObject:v26])
    {
      [*(id *)(a1 + 40) _keyboardAdjustment];
      double v17 = v17 - v18;
    }
    id v19 = v26;
    id v20 = v13;
    id v21 = v14;
    double v22 = v21;
    if (v20)
    {
      if (a6 >= 0.0)
      {
        double v23 = a5 + a6;
        double v24 = *MEMORY[0x1E4F1DAD8];
        double v25 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
      }
      else
      {
        double v23 = a5 - a6;
        double v16 = v16 + a6;
        double v24 = -a6;
        double v25 = 0.0;
      }
      objc_msgSend(v20, "setFrame:", v16, 0.0, v23, v17);
      double v16 = v24;
      if (v22) {
        goto LABEL_17;
      }
    }
    else
    {
      double v25 = 0.0;
      if (v21)
      {
LABEL_17:
        objc_msgSend(v22, "_updateControlledViewsToFrame:", v16, v25, a5, v17);
        goto LABEL_18;
      }
    }
    objc_msgSend(v19, "setFrame:", v16, v25, a5, v17);
LABEL_18:
  }
}

void UIMotionEffectCommonInit(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)_UIMotionEffectDefaultAnalyzerSettings__defaultSettings;
  id v5 = v1;
  if (!_UIMotionEffectDefaultAnalyzerSettings__defaultSettings)
  {
    double v3 = [(_UISettings *)[_UIMotionAnalyzerSettings alloc] initWithDefaultValues];
    double v4 = (void *)_UIMotionEffectDefaultAnalyzerSettings__defaultSettings;
    _UIMotionEffectDefaultAnalyzerSettings__defaultSettings = (uint64_t)v3;

    id v1 = v5;
    uint64_t v2 = (void *)_UIMotionEffectDefaultAnalyzerSettings__defaultSettings;
  }
  objc_storeStrong(v1 + 1, v2);
}

void _UIParallaxMotionEffectCommonInit(void *a1)
{
  double v3 = a1;
  id v1 = objc_alloc_init(UIMotionEffectGroup);
  uint64_t v2 = (void *)v3[3];
  v3[3] = v1;

  [v3 _updateGroupMotionEffect];
}

void __KeyboardArbiterClientLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "KeyboardArbiterClientLog");
  id v1 = (void *)_MergedGlobals_976;
  _MergedGlobals_976 = (uint64_t)v0;
}

void __KeyboardArbiterClientLog_block_invoke_0()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "KeyboardArbiterClientLog");
  id v1 = (void *)qword_1EB260320;
  qword_1EB260320 = (uint64_t)v0;
}

void __KeyboardArbiterClientLog_block_invoke_1()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "KeyboardArbiterClientLog");
  id v1 = (void *)qword_1EB25C740;
  qword_1EB25C740 = (uint64_t)v0;
}

void __KeyboardArbiterClientLog_block_invoke_2()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "KeyboardArbiterClientLog");
  id v1 = (void *)_MergedGlobals_1160;
  _MergedGlobals_1160 = (uint64_t)v0;
}

void __KeyboardArbiterClientLog_block_invoke_3()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "KeyboardArbiterClientLog");
  id v1 = (void *)qword_1EB25D290;
  qword_1EB25D290 = (uint64_t)v0;
}

void sub_18584D278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

unint64_t __minScheduledDuration_block_invoke()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  double v1 = 0.002;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    int v3 = _UIInternalPreference_UpdateSchedulerMinScheduledDurationSeconds;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_UpdateSchedulerMinScheduledDurationSeconds)
    {
      while (v0 >= v3)
      {
        _UIInternalPreferenceSync(v0, &_UIInternalPreference_UpdateSchedulerMinScheduledDurationSeconds, @"UpdateSchedulerMinScheduledDurationSeconds", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
        int v3 = _UIInternalPreference_UpdateSchedulerMinScheduledDurationSeconds;
        if (v0 == _UIInternalPreference_UpdateSchedulerMinScheduledDurationSeconds)
        {
          double v1 = 0.002;
          goto LABEL_4;
        }
      }
      double v1 = *(double *)&qword_1EB257798;
    }
  }
LABEL_4:
  unint64_t result = _UIMachDurationForMediaDuration(v1);
  qword_1EB2620B0 = result;
  return result;
}

void _GLOBAL__sub_I__UIUpdateSequence_mm()
{
  int v0 = (void *)MEMORY[0x18C108260]();
  __cxa_atexit((void (*)(void *))_UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal, &_UIUpdateSequenceScheduledItemInternal, &dword_1853B0000);
  __cxa_atexit((void (*)(void *))_UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal, &_UIUpdateSequenceBeginItemInternal, &dword_1853B0000);
  __cxa_atexit((void (*)(void *))_UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal, &_UIUpdateSequenceHIDEventsItemInternal, &dword_1853B0000);
  __cxa_atexit((void (*)(void *))_UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal, _UIUpdateSequenceCADisplayLinksItemInternal, &dword_1853B0000);
  __cxa_atexit((void (*)(void *))_UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal, &_MergedGlobals_897, &dword_1853B0000);
  __cxa_atexit((void (*)(void *))_UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal, &_UIUpdateSequenceCATransactionCommitItemInternal, &dword_1853B0000);
  __cxa_atexit((void (*)(void *))_UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal, &unk_1EB256D68, &dword_1853B0000);
  __cxa_atexit((void (*)(void *))_UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal, off_1EB256D98, &dword_1853B0000);
  __cxa_atexit((void (*)(void *))_UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal, &_UIUpdateSequenceLowLatencyHIDEventsItemInternal, &dword_1853B0000);
  __cxa_atexit((void (*)(void *))_UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal, &_UIUpdateSequenceLowLatencyCATransactionCommitItemInternal, &dword_1853B0000);
  __cxa_atexit((void (*)(void *))_UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal, &unk_1EB256DC8, &dword_1853B0000);
  __cxa_atexit((void (*)(void *))_UIUpdateSequenceItemInternal::~_UIUpdateSequenceItemInternal, &_UIUpdateSequenceDoneItemInternal, &dword_1853B0000);
}

void sub_18584FC70(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18584FEF8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_185850464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1858508A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1858510F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

__CFString *stringForActivationStyle(unint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1 >= 3)
  {
    if (os_variant_has_internal_diagnostics())
    {
      id v5 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        unint64_t v7 = a1;
        _os_log_fault_impl(&dword_1853B0000, v5, OS_LOG_TYPE_FAULT, "Unknown feedback generator activation style: %ld", buf, 0xCu);
      }
    }
    else
    {
      int v3 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &stringForActivationStyle___s_category) + 8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        unint64_t v7 = a1;
        _os_log_impl(&dword_1853B0000, v3, OS_LOG_TYPE_ERROR, "Unknown feedback generator activation style: %ld", buf, 0xCu);
      }
    }
    objc_msgSend(NSString, "stringWithFormat:", @"(unknown style: %ld)", a1);
    uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v2 = off_1E52ECCD8[a1];
  }
  return v2;
}

void sub_185851AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *stringForFeedbackEngineState(unint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1 >= 6)
  {
    if (os_variant_has_internal_diagnostics())
    {
      id v5 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        unint64_t v7 = a1;
        _os_log_fault_impl(&dword_1853B0000, v5, OS_LOG_TYPE_FAULT, "Unknown feedback engine state: %ld", buf, 0xCu);
      }
    }
    else
    {
      int v3 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &stringForFeedbackEngineState___s_category) + 8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        unint64_t v7 = a1;
        _os_log_impl(&dword_1853B0000, v3, OS_LOG_TYPE_ERROR, "Unknown feedback engine state: %ld", buf, 0xCu);
      }
    }
    objc_msgSend(NSString, "stringWithFormat:", @"(unknown state: %ld)", a1);
    uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v2 = off_1E52EDA80[a1];
  }
  return v2;
}

void *AudioToolboxLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!AudioToolboxLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __AudioToolboxLibraryCore_block_invoke_0;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52EDBA8;
    uint64_t v6 = 0;
    AudioToolboxLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  int v0 = (void *)AudioToolboxLibraryCore_frameworkLibrary;
  if (!AudioToolboxLibraryCore_frameworkLibrary)
  {
    int v0 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"void *AudioToolboxLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackSystemSoundEngine.m", 23, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *AudioToolboxLibrary_0()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!AudioToolboxLibraryCore_frameworkLibrary_0)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __AudioToolboxLibraryCore_block_invoke_1;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52EE778;
    uint64_t v6 = 0;
    AudioToolboxLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  int v0 = (void *)AudioToolboxLibraryCore_frameworkLibrary_0;
  if (!AudioToolboxLibraryCore_frameworkLibrary_0)
  {
    int v0 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"void *AudioToolboxLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFocusSoundGenerator.m", 29, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *AudioToolboxLibrary_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!AudioToolboxLibraryCore_frameworkLibrary_1)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __AudioToolboxLibraryCore_block_invoke_2;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52F2310;
    uint64_t v6 = 0;
    AudioToolboxLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  int v0 = (void *)AudioToolboxLibraryCore_frameworkLibrary_1;
  if (!AudioToolboxLibraryCore_frameworkLibrary_1)
  {
    int v0 = [MEMORY[0x1E4F28B00] currentHandler];
    int v3 = [NSString stringWithUTF8String:"void *AudioToolboxLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDevice.m", 90, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __displayLinksWillFire_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_DWORD *)(v1 + 44_Block_object_dispose(&STACK[0x478], 8) = 2;
  return _UIUpdateInputSetInputChanged(*(_DWORD **)(v1 + 496), v1 + 448);
}

CGSize CGSizeFromString(NSString *string)
{
  uint64_t v1 = string;
  double DoubleValue = *MEMORY[0x1E4F1DB30];
  double v3 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  if ([(NSString *)v1 length] >= 5)
  {
    CFStringRef v8 = 0;
    CFStringRef str = 0;
    if (SplitBracesAndComma(v1, &str, &v8))
    {
      CFStringRef v4 = str;
      double DoubleValue = CFStringGetDoubleValue(str);
      CFStringRef v5 = v8;
      double v3 = CFStringGetDoubleValue(v8);
      CFRelease(v4);
      CFRelease(v5);
    }
  }

  double v6 = DoubleValue;
  double v7 = v3;
  result.CGFloat height = v7;
  result.CGFloat width = v6;
  return result;
}

uint64_t SplitBracesAndComma(void *a1, CFStringRef *a2, CFStringRef *a3)
{
  CFStringRef v5 = a1;
  CFIndex v16 = 0;
  CFIndex v17 = 0;
  uint64_t v14 = 1;
  CFIndex v15 = 0;
  ParseBracesWithDelimiter(v5, &v17, &v16, &v15, &v14);
  CFIndex v6 = v16;
  BOOL v9 = v17 != -1 && v16 != -1 && v14 == 1 && v17 < v16;
  if (v9 && ((CFIndex v10 = v15, v15 > v17 + 1) ? (v11 = v15 < v16 - 1) : (v11 = 0), v11))
  {
    v18.NSUInteger length = v15 + ~v17;
    v18.id location = v17 + 1;
    *a2 = CFStringCreateWithSubstring(0, v5, v18);
    v19.id location = v10 + 1;
    v19.NSUInteger length = v6 + ~v10;
    *a3 = CFStringCreateWithSubstring(0, v5, v19);
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

UIEdgeInsets UIEdgeInsetsFromString(NSString *string)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = string;
  double v2 = 0.0;
  if ([(NSString *)v1 length] < 9)
  {
    double v3 = 0.0;
    double v4 = 0.0;
    double v5 = 0.0;
  }
  else
  {
    double v3 = 0.0;
    double v4 = 0.0;
    double v5 = 0.0;
    if (ParseNumbersWithDelimiter(v1, (uint64_t)v10, 4))
    {
      double v4 = *(double *)v10;
      double v3 = *(double *)&v10[1];
      double v2 = *(double *)&v10[2];
      double v5 = *(double *)&v10[3];
    }
  }

  double v6 = v4;
  double v7 = v3;
  double v8 = v2;
  double v9 = v5;
  result.right = v9;
  result.bottom = v8;
  result.left = v7;
  result.top = v6;
  return result;
}

BOOL ParseNumbersWithDelimiter(void *a1, uint64_t a2, uint64_t a3)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  double v5 = a1;
  CFIndex v20 = 0;
  v21[0] = a3 - 1;
  CFIndex v19 = 0;
  MEMORY[0x1F4188790](v5);
  double v7 = (CFIndex *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  ParseBracesWithDelimiter(v8, &v20, &v19, v7, v21);
  if (v20 != -1 && v19 != -1 && v21[0] == a3 - 1)
  {
    if (a3 < 1)
    {
      BOOL v11 = 1;
    }
    else
    {
      uint64_t v12 = 0;
      do
      {
        id v13 = v7 - 1;
        if (!v12) {
          id v13 = &v20;
        }
        CFIndex v14 = *v13;
        if (v21[0] <= v12) {
          CFIndex v15 = &v19;
        }
        else {
          CFIndex v15 = v7;
        }
        CFIndex v16 = *v15 - v14;
        BOOL v11 = v16 - 2 >= 0;
        if (v16 - 2 < 0) {
          break;
        }
        v22.id location = v14 + 1;
        v22.NSUInteger length = v16 - 1;
        CFStringRef v17 = CFStringCreateWithSubstring(0, v5, v22);
        *(double *)(a2 + 8 * v12) = CFStringGetDoubleValue(v17);
        CFRelease(v17);
        ++v12;
        ++v7;
      }
      while (a3 != v12);
    }
  }
  else
  {
    BOOL v11 = 0;
  }

  return v11;
}

void ParseBracesWithDelimiter(const __CFString *a1, CFIndex *a2, CFIndex *a3, CFIndex *a4, void *a5)
{
  if (CFStringGetLength(@",") != 1)
  {
    CFIndex v20 = [MEMORY[0x1E4F28B00] currentHandler];
    id v21 = objc_msgSend(NSString, "stringWithUTF8String:", "void ParseBracesWithDelimiter(CFStringRef, CFStringRef, CFIndex *, CFIndex *, CFIndex *, NSInteger *)");
    [v20 handleFailureInFunction:v21 file:@"UIGeometry.m" lineNumber:1455 description:@"Parsing allows delimiter of length 1 only"];
  }
  if (qword_1EB260DF8 != -1) {
    dispatch_once(&qword_1EB260DF8, &__block_literal_global_166);
  }
  MutableCopCGFloat y = CFCharacterSetCreateMutableCopy(0, (CFCharacterSetRef)_MergedGlobals_1090);
  CFCharacterSetAddCharactersInString(MutableCopy, @",");
  *a2 = -1;
  *a3 = -1;
  CFIndex Length = CFStringGetLength(a1);
  result.id location = 0;
  result.NSUInteger length = 0;
  CharacterAtIndeCGFloat x = CFStringGetCharacterAtIndex(@",", 0);
  if (Length < 1)
  {
    uint64_t v15 = 0;
  }
  else
  {
    CFRange v22 = a3;
    double v23 = a4;
    int v13 = 0;
    CFIndex v14 = 0;
    uint64_t v15 = 0;
    int v16 = CharacterAtIndex;
    CFIndex v17 = Length;
    while (1)
    {
      v25.id location = v14;
      v25.NSUInteger length = v17;
      if (!CFStringFindCharacterFromSet(a1, MutableCopy, v25, 0, &result)) {
        break;
      }
      if (result.location >= Length || result.length != 1) {
        break;
      }
      int v19 = CFStringGetCharacterAtIndex(a1, result.location);
      if ((v19 & 0xFFFFFFDF) == 0x5B)
      {
        if (!v13) {
          *a2 = result.location;
        }
        ++v13;
      }
      else if (v16 == v19)
      {
        if (v13 == 1)
        {
          if (v15 < *a5)
          {
            *v23++ = result.location;
            ++v15;
          }
          int v13 = 1;
        }
      }
      else if ((v19 & 0xFFFFFFDF) == 0x5D && !--v13)
      {
        *CFRange v22 = result.location;
        break;
      }
      if (result.location + 1 < Length)
      {
        v17 += v14 + ~result.location;
        CFIndex v14 = result.location + 1;
        if (v17 > 0) {
          continue;
        }
      }
      break;
    }
  }
  CFRelease(MutableCopy);
  if (a5) {
    *a5 = v15;
  }
}

id _constraintGroupNamesForAlignmentOptions(__int16 a1, uint64_t a2)
{
  char v4 = ~(_BYTE)a1;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x3032000000;
  CFIndex v14 = __Block_byref_object_copy__233;
  uint64_t v15 = __Block_byref_object_dispose__233;
  id v16 = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___constraintGroupNamesForAlignmentOptions_block_invoke;
  aBlock[3] = &unk_1E530E320;
  void aBlock[4] = &v11;
  double v5 = _Block_copy(aBlock);
  uint64_t v6 = (void (**)(void, void))v5;
  if ((v4 & 0x18) != 0 && (a1 & 0x60) != 0x60) {
    (*((void (**)(void *, __CFString *))v5 + 2))(v5, @"Ambiguity Suppression");
  }
  if (a2)
  {
    if ((a1 & 0x20) != 0) {
      ((void (**)(void, __CFString *))v6)[2](v6, @"Leading");
    }
    if ((a1 & 0x40) != 0) {
      ((void (**)(void, __CFString *))v6)[2](v6, @"Trailing");
    }
    if ((a1 & 0x200) != 0)
    {
      double v7 = @"CenterX";
LABEL_17:
      ((void (**)(void, __CFString *))v6)[2](v6, v7);
    }
  }
  else
  {
    if ((a1 & 0x1008) != 0) {
      ((void (**)(void, __CFString *))v6)[2](v6, @"Top");
    }
    if ((a1 & 0x810) != 0) {
      ((void (**)(void, __CFString *))v6)[2](v6, @"Bottom");
    }
    if ((a1 & 0x400) != 0)
    {
      double v7 = @"CenterY";
      goto LABEL_17;
    }
  }
  id v8 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_185855AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___constraintGroupNamesForAlignmentOptions_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v8 = v3;
  if (!v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F1CA80] set];
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    double v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    id v3 = v8;
    char v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  [v4 addObject:v3];
}

void __AdjustToScale_block_invoke()
{
  id v1 = +[UIScreen mainScreen];
  [v1 scale];
  AdjustToScale___s = v0;
}

void __AdjustToScale_block_invoke_0()
{
  id v1 = +[UIScreen mainScreen];
  [v1 scale];
  AdjustToScale___s_0 = v0;
}

id _AllBackdropViews()
{
  if (qword_1EB25E660 != -1) {
    dispatch_once(&qword_1EB25E660, &__block_literal_global_674);
  }
  uint64_t v0 = (void *)qword_1EB25E668;
  return v0;
}

double _UISheetMinimumTopInset(void *a1)
{
  id v1 = a1;
  [v1 safeAreaInsets];
  double v3 = v2;
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  CFIndex v10 = [v1 traitCollection];

  uint64_t v11 = _UIFallbackSheetMetrics();
  double v12 = _UISheetLayoutInfoMargins(v10, 1, 0, 0, v11, v3, v5, v7, v9, 1.79769313e308, 1.79769313e308);

  return v12;
}

void sub_18585745C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCXCallObserverClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25AA98)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __CallKitLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52FB1C8;
    uint64_t v8 = 0;
    qword_1EB25AA98 = _sl_dlopen();
  }
  if (!qword_1EB25AA98)
  {
    double v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v4 = [NSString stringWithUTF8String:"void *CallKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIDictationController.m", 237, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CXCallObserver");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    double v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"Class getCXCallObserverClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDictationController.m", 238, @"Unable to find class %s", "CXCallObserver");

LABEL_10:
    __break(1u);
  }
  qword_1EB25AA90 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id _UISheetDetentInternalBlockForType(uint64_t a1, double a2)
{
  switch(a1)
  {
    case 1:
      double v4 = &__block_literal_global_17_5;
      break;
    case 2:
      double v4 = &__block_literal_global_19_2;
      break;
    case 3:
      double v4 = &__block_literal_global_22_3;
      break;
    case 4:
      void aBlock[5] = v2;
      uint64_t v7 = v3;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___UISheetDetentInternalBlockForType_block_invoke;
      aBlock[3] = &__block_descriptor_40_e65_d16__0____UISheetPresentationControllerDetentResolutionContext__8l;
      *(double *)&void aBlock[4] = a2;
      double v4 = _Block_copy(aBlock);
      break;
    default:
      double v4 = 0;
      break;
  }
  return v4;
}

void sub_1858587B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_185858EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Unwind_Resume(a1);
}

void *__copy_constructor_8_8_sb0_sb8_sb16_sb24_sb32_sb40(void **a1, const void **a2)
{
  *a1 = _Block_copy(*a2);
  a1[1] = _Block_copy(a2[1]);
  a1[2] = _Block_copy(a2[2]);
  a1[3] = _Block_copy(a2[3]);
  a1[4] = _Block_copy(a2[4]);
  Class result = _Block_copy(a2[5]);
  a1[5] = result;
  return result;
}

void sub_1858594EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *_NSStringFromUIEventDeferringScope(uint64_t a1)
{
  id v1 = &stru_1ED0E84C0;
  if (a1 == 1) {
    id v1 = @"remote";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"local";
  }
}

void sub_185859DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *_NSStringFromUIKeyWindowEvaluationStrategy(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 2) {
    return &stru_1ED0E84C0;
  }
  else {
    return off_1E53050E8[a1 + 1];
  }
}

void ___isContentBackSwipeEnabled_block_invoke()
{
  if (_os_feature_enabled_impl())
  {
    char v0 = 1;
  }
  else
  {
    if (_UIInternalPreferencesRevisionOnce != -1) {
      dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
    }
    int v1 = _UIInternalPreferencesRevisionVar;
    if (_UIInternalPreferencesRevisionVar < 1
      || (int v3 = _UIInternalPreference_UINavigationContentBackSwipe,
          _UIInternalPreferencesRevisionVar == _UIInternalPreference_UINavigationContentBackSwipe))
    {
      BOOL v2 = 0;
    }
    else
    {
      do
      {
        BOOL v2 = v1 < v3;
        if (v1 < v3) {
          break;
        }
        _UIInternalPreferenceSync(v1, &_UIInternalPreference_UINavigationContentBackSwipe, @"UINavigationContentBackSwipe", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
        int v3 = _UIInternalPreference_UINavigationContentBackSwipe;
      }
      while (v1 != _UIInternalPreference_UINavigationContentBackSwipe);
    }
    if (byte_1EB257944) {
      char v0 = v2;
    }
    else {
      char v0 = 0;
    }
  }
  _MergedGlobals_23_3 = v0;
}

void sub_18585BD04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _UIUpdateRequestRecordSortedSetRemoveRecord(char **a1, unint64_t a2, unsigned int a3)
{
  unint64_t v3 = (unint64_t)a1[1];
  if (!v3) {
    return 0;
  }
  double v5 = *a1;
  uint64_t v6 = (uint64_t)&(*a1)[24 * v3];
  do
  {
    unint64_t v7 = v3 >> 1;
    uint64_t v8 = (unint64_t *)&v5[24 * (v3 >> 1)];
    unint64_t v10 = *v8;
    uint64_t v9 = (char *)(v8 + 3);
    v3 += ~(v3 >> 1);
    if (v10 < a2) {
      double v5 = v9;
    }
    else {
      unint64_t v3 = v7;
    }
  }
  while (v3);
  if ((char *)v6 == v5) {
    return 0;
  }
  if (*(void *)v5 != a2) {
    return 0;
  }
  _UIUpdateReasonSortedSetRemoveReason((uint64_t)(v5 + 8), a3);
  if (*((_WORD *)v5 + 11)) {
    return 0;
  }
  free(*((void **)v5 + 1));
  double v12 = *a1;
  uint64_t v13 = (uint64_t)(a1[1] - 1);
  a1[1] = (char *)v13;
  memmove(v5, v5 + 24, v12 - v5 + 24 * v13);
  return 1;
}

uint64_t _UIUpdateRequestRegistryRemoveRecord(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  if (*a2) {
    uint64_t v6 = (char **)(a1 + 8);
  }
  else {
    uint64_t v6 = (char **)(a1 + 48);
  }
  if (_UIUpdateRequestRecordSortedSetRemoveRecord(v6, (unint64_t)a2, a3))
  {
    if ((*(unsigned char *)a2 & 8) != 0) {
      free(a2);
    }
    int v7 = requestRemoved((_DWORD *)a1, (uint64_t)v6, a2);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t result = _UIUpdateReasonSortedSetRemoveReason(a1 + 88, a3);
  if (result)
  {
    if (*(_WORD *)(a1 + 102)) {
      int v9 = 32;
    }
    else {
      int v9 = 33;
    }
    v7 |= v9;
  }
  int v10 = *(_DWORD *)a1 | v7;
  if (v10 != *(_DWORD *)a1)
  {
    *(_DWORD *)a1 = v10;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 136);
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 144);
      return v11(a1, v12);
    }
  }
  return result;
}

uint64_t _UIUpdateReasonSortedSetRemoveReason(uint64_t a1, unsigned int a2)
{
  BOOL v2 = *(char **)a1;
  if (*(void *)a1)
  {
    uint64_t v3 = *(unsigned __int16 *)(a1 + 12);
  }
  else
  {
    BOOL v2 = (char *)(a1 + 8);
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(unsigned __int16 *)(a1 + 14);
  if (!*(_WORD *)(a1 + 14)) {
    return 0;
  }
  double v5 = v2;
  unint64_t v6 = *(unsigned __int16 *)(a1 + 14);
  do
  {
    unint64_t v7 = v6 >> 1;
    uint64_t v8 = &v5[4 * (v6 >> 1)];
    unsigned int v10 = *(_DWORD *)v8;
    int v9 = v8 + 4;
    v6 += ~(v6 >> 1);
    if (v10 < a2) {
      double v5 = v9;
    }
    else {
      unint64_t v6 = v7;
    }
  }
  while (v6);
  if (&v2[4 * v4] == v5 || *(_DWORD *)v5 != a2) {
    return 0;
  }
  uint64_t v11 = v5 - v2;
  uint64_t v12 = &v2[4 * v3 + ((v5 - v2) >> 1)];
  int v13 = *(unsigned __int16 *)v12;
  BOOL v14 = v13 != 0;
  int v15 = v13 - 1;
  if (v15 != 0 && v14)
  {
    *(_WORD *)uint64_t v12 = v15;
  }
  else
  {
    *(_WORD *)(a1 + 14) = v4 - 1;
    uint64_t v17 = (unsigned __int16)(v4 - 1) - (v11 >> 2);
    memmove(v5, v5 + 4, 4 * v17);
    memmove(v12, v12 + 2, 2 * v17);
  }
  return 1;
}

uint64_t requestRemoved(_DWORD *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v3 = *a3;
  uint64_t v4 = 64;
  if ((*a3 & 4) != 0)
  {
    BOOL v6 = a1[29]-- == 1;
    if (v6) {
      uint64_t v4 = 66;
    }
    else {
      uint64_t v4 = 64;
    }
    if ((v3 & 0x10) == 0)
    {
LABEL_3:
      if ((v3 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v3 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  BOOL v6 = a1[30]-- == 1;
  if (v6) {
    uint64_t v4 = v4 | 4;
  }
  else {
    uint64_t v4 = v4;
  }
  if ((v3 & 0x20) == 0)
  {
LABEL_4:
    if ((v3 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_18:
  BOOL v6 = a1[33]-- == 1;
  if (v6) {
    uint64_t v4 = v4 | 8;
  }
  else {
    uint64_t v4 = v4;
  }
  if ((v3 & 0x40) == 0)
  {
LABEL_5:
    if ((v3 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_22:
  BOOL v6 = a1[31]-- == 1;
  if (v6) {
    uint64_t v4 = v4 | 0x10;
  }
  else {
    uint64_t v4 = v4;
  }
  if ((v3 & 0x80) == 0)
  {
LABEL_6:
    if ((v3 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_26:
  BOOL v6 = a1[32]-- == 1;
  if (v6) {
    uint64_t v4 = v4 | 0x80;
  }
  else {
    uint64_t v4 = v4;
  }
  if (v3) {
LABEL_7:
  }
    *a3 = v3 & 0xFFFFFFFD;
LABEL_8:
  if (*(void *)(a2 + 8))
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) | 1;
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    unsigned int v5 = *(_DWORD *)(a2 + 24) & 0xFFFFFFFE;
    *(_DWORD *)(a2 + 2_Block_object_dispose(&STACK[0x478], 8) = 0;
  }
  *(_DWORD *)(a2 + 24) = v5;
  a1[1] |= 1u;
  return v4;
}

uint64_t _checkApplicationRestorationState(uint64_t a1, void *a2, unsigned char *a3)
{
  if (a3) {
    *a3 = 0;
  }
  unsigned int v5 = (void *)_stateRestorationPathForBundleIdentifier(a1, a2);
  if (!v5) {
    return 0;
  }
  int v6 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", objc_msgSend(v5, "path"));
  if (_UIStateRestorationDebugLogEnabled())
  {
    unint64_t v7 = @"does not exist";
    if (v6) {
      unint64_t v7 = @"exists";
    }
    NSLog(&cfstr_SStateRestorat_0.isa, "BOOL _checkApplicationRestorationState(NSString *, NSString *, BOOL *)", v7, a1);
  }
  if (!v6) {
    return 0;
  }
  uint64_t v8 = objc_msgSend((id)objc_msgSend(v5, "URLByDeletingLastPathComponent"), "URLByAppendingPathComponent:", @"restorationInfo.plist");
  int v9 = (void *)[MEMORY[0x1E4F1C9E8] dictionaryWithContentsOfURL:v8];
  if (!v9)
  {
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SNoRestoration_2.isa, "BOOL _checkApplicationRestorationState(NSString *, NSString *, BOOL *)");
    }
    goto LABEL_17;
  }
  unsigned int v10 = (void *)[v9 objectForKey:@"kIgnoreSnapshotKey"];
  int v11 = [v10 isEqual:@"YES"];
  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SStateRestorat_1.isa, "BOOL _checkApplicationRestorationState(NSString *, NSString *, BOOL *)", v10);
  }
  if (!v11)
  {
LABEL_17:
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SStateRestorat_3.isa, "BOOL _checkApplicationRestorationState(NSString *, NSString *, BOOL *)");
    }
    if (a3) {
      *a3 = 1;
    }
    goto LABEL_21;
  }
  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SStateRestorat_2.isa, "BOOL _checkApplicationRestorationState(NSString *, NSString *, BOOL *)");
  }
LABEL_21:
  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SReturningYes.isa, "BOOL _checkApplicationRestorationState(NSString *, NSString *, BOOL *)");
  }
  return 1;
}

void sub_18585C530()
{
}

uint64_t _stateRestorationPathForBundleIdentifier(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  if (![(id)UIApp _isSpringBoard]) {
    return 0;
  }
  uint64_t v4 = [NSString stringWithFormat:@"Library/%@/%@.%@/%@", @"Saved Application State", a1, @"savedState", @"data.data"];
  if (!a2)
  {
    a2 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F223B8], "applicationProxyForIdentifier:", a1), "dataContainerURL"), "path");
    if (!a2) {
      return 0;
    }
  }
  if ([a2 hasPrefix:@"/Applications"])
  {
    uint64_t v5 = [(id)objc_msgSend(NSString stringWithFormat:@"~/%@", v4), "stringByStandardizingPath"];
    int v6 = (void *)MEMORY[0x1E4F1CB10];
    return [v6 fileURLWithPath:v5 isDirectory:0];
  }
  else
  {
    uint64_t v8 = (void *)[MEMORY[0x1E4F1CB10] fileURLWithPath:a2 isDirectory:0];
    return [v8 URLByAppendingPathComponent:v4];
  }
}

double _UITabBarAdjustBadgePositionForStyleAndScene(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  int v6 = v5;
  switch(a1)
  {
    case 0:
      double v9 = 5.0;
      goto LABEL_7;
    case 1:
    case 2:
      unint64_t v7 = [v5 traitCollection];
      uint64_t v8 = [v7 userInterfaceIdiom];

      if (v8)
      {
        a3 = a3 + 5.0;
      }
      else
      {
        int v13 = [v6 screen];
        BOOL v14 = [v13 fixedCoordinateSpace];
        [v14 bounds];
        double v16 = v15;
        double v18 = v17;

        BOOL v19 = v18 == 568.0 && v16 == 320.0;
        double v20 = 5.0;
        if (v19) {
          double v20 = 4.0;
        }
        a3 = a3 + v20;
      }
      break;
    case 3:
      unsigned int v10 = [v5 screen];
      [v10 scale];
      double v12 = v11;

      double v9 = 5.0;
      if (v12 > 1.0) {
        double v9 = 1.0 / v12 + 4.0;
      }
LABEL_7:
      a3 = a3 + v9;
      break;
    case 4:
      a3 = a3 + 14.0;
      break;
    default:
      break;
  }

  return a3;
}

void sub_18585D7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

void sub_18585DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 200), 8);
  _Block_object_dispose((const void *)(v34 - 168), 8);
  _Block_object_dispose((const void *)(v34 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18585DF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

double _UISheetContentContainerSize(void *a1, void *a2, double a3, double a4)
{
  id v7 = a1;
  id v8 = a2;
  if ([v7 _formSheetObeysContentContainerSize])
  {
    objc_msgSend(v7, "sizeForChildContentContainer:withParentContainerSize:", v8, a3, a4);
    a3 = v9;
  }

  return a3;
}

void ___customTextViewSubclassRequiresTextKit1_block_invoke()
{
  char v0 = (void *)qword_1EB25AFE0;
  qword_1EB25AFE0 = (uint64_t)&unk_1ED3F7B18;
}

void sub_18585F010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t ___isAdditivelyAnimatableKeyForLayer_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  int v1 = (void *)qword_1EB25C2C0;
  qword_1EB25C2C0 = (uint64_t)v0;

  [(id)qword_1EB25C2C0 addObject:@"bounds"];
  [(id)qword_1EB25C2C0 addObject:@"position"];
  [(id)qword_1EB25C2C0 addObject:@"contentsRect"];
  [(id)qword_1EB25C2C0 addObject:@"contentsCenter"];
  uint64_t result = dyld_program_sdk_at_least();
  if (result)
  {
    unsigned int v3 = (void *)qword_1EB25C2C0;
    return [v3 addObject:@"cornerRadius"];
  }
  return result;
}

void ___searchBarShouldSeparateLayouts_block_invoke()
{
  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    _UIMainBundleIdentifier();
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    if ([v1 isEqualToString:@"com.gasbuddymobile.gasbuddy"]) {
      char v0 = 1;
    }
    else {
      char v0 = [v1 isEqualToString:@"com.forever21.Forever21"];
    }
    byte_1EB25D020 = v0;
  }
}

void sub_1858610C8(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v5 = (void *)sub_1858611E8(&qword_1E8FAFA88, (uint64_t)off_1E52D4110, qword_1EB2558E0);
  id v6 = v5;
  if (a2)
  {
    id v7 = (id)sub_186A1E92C();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v7 = 0;
  }
  objc_msgSend(v5, *a3, v7);
}

uint64_t sub_1858611E8(unint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v3;
  if (isUniquelyReferenced_nonNull_native) {
    return *(void *)(v7 + 16);
  }
  objc_msgSend(*(id *)(v7 + 16), sel_copy);
  sub_186A1F1CC();
  swift_unknownObjectRelease();
  sub_1853B985C(0, a1);
  swift_dynamicCast();
  uint64_t v8 = v11;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v11;
  swift_release();
  uint64_t *v3 = v9;
  return v8;
}

void _UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection(uint64_t a1, double a2, double a3)
{
  if (fabs(a2) > 6.28318531)
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v8 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat _UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection(CGFloat, CGFloat, _UIInterfaceOrientationRotationDirection)");
    [v7 handleFailureInFunction:v8 file:@"_UIDirectionalRotationView.m" lineNumber:15 description:@"fromAngle should be constrained within ±2π"];
  }
  if (fabs(a3) > 6.28318531)
  {
    uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
    unsigned int v10 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat _UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection(CGFloat, CGFloat, _UIInterfaceOrientationRotationDirection)");
    [v9 handleFailureInFunction:v10 file:@"_UIDirectionalRotationView.m" lineNumber:16 description:@"toAngle should be constrained within ±2π"];
  }
  double v6 = a3 - a2;
  if (a1 == 2)
  {
    for (; v6 > 0.0; double v6 = v6 + -6.28318531)
      ;
  }
  else if (a1 == 1)
  {
    while (v6 < 0.0)
      double v6 = v6 + 6.28318531;
  }
}

void _UIColorEncodeComponentForKey(void *a1, uint64_t a2, void *a3, double a4)
{
  id v10 = a1;
  id v7 = a3;
  float v8 = a4;
  *(float *)&double v9 = v8;
  [v10 encodeFloat:a2 forKey:v9];
  if (v8 != a4) {
    [v10 encodeDouble:v7 forKey:a4];
  }
}

void _addUserActionDescription(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 && v4)
  {
    double v6 = (objc_class *)objc_opt_class();
    id v7 = NSStringFromClass(v6);
    [v5 setObject:v7 forKeyedSubscript:@"ClassName"];

    float v8 = -[UIViewController _descriptionForPrintingHierarchyIncludingInsets:](v3, 0);
    [v5 setObject:v8 forKeyedSubscript:@"Description"];

    double v9 = [(float64x2_t *)v3 presentingViewController];
    id v10 = [v9 _presentationController];
    uint64_t v11 = [v10 _descriptionForPrintingViewControllerHierarchy];
    [v5 setObject:v11 forKeyedSubscript:@"PresentationController"];

    double v12 = [MEMORY[0x1E4F1CA48] array];
    [v5 setObject:v12 forKeyedSubscript:@"SubVCs"];

    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    CFRange v25 = v3;
    int v13 = [(float64x2_t *)v3 childViewControllers];
    uint64_t v14 = [v13 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v27 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          BOOL v19 = [MEMORY[0x1E4F1CA60] dictionary];
          double v20 = [v5 objectForKeyedSubscript:@"SubVCs"];
          [v20 addObject:v19];

          _addUserActionDescription(v18, v19);
        }
        uint64_t v15 = [v13 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }
      while (v15);
    }

    unsigned int v3 = v25;
    id v21 = [(float64x2_t *)v25 childModalViewController];

    if (v21)
    {
      CFRange v22 = [MEMORY[0x1E4F1CA60] dictionary];
      double v23 = [v5 objectForKeyedSubscript:@"SubVCs"];
      [v23 addObject:v22];

      double v24 = [(float64x2_t *)v25 childModalViewController];
      _addUserActionDescription(v24, v22);
    }
  }
}

void _addUserActionDescription_0(void *a1, void *a2, int a3, int a4, unsigned int a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  double v9 = v8;
  if (v7 && v8)
  {
    id v10 = (id)[v7 unsafeUnretainedDelegate];
    if (v10 && (uint64_t v11 = v10, _IsKindOfUIView((uint64_t)v10)))
    {
      id v12 = v11;
      int v13 = (objc_class *)objc_opt_class();
      uint64_t v14 = NSStringFromClass(v13);
      [v9 setObject:v14 forKeyedSubscript:@"ClassName"];
    }
    else
    {
      [v9 setObject:@"CALayer" forKeyedSubscript:@"ClassName"];
    }
    uint64_t v15 = [v7 sublayers];
    unint64_t v16 = [v15 count];

    if (v16 < 4 || (BOOL v17 = a4 < 1, --a4, !v17))
    {
      if (a3 < (int)a5)
      {
        uint64_t v18 = [MEMORY[0x1E4F1CA48] array];
        BOOL v19 = v9;
        [v9 setObject:v18 forKeyedSubscript:@"Subviews"];

        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        id v28 = v7;
        id obj = [v7 sublayers];
        uint64_t v20 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
        if (v20)
        {
          uint64_t v21 = v20;
          uint64_t v22 = *(void *)v33;
          uint64_t v23 = (a3 + 1);
          do
          {
            uint64_t v24 = 0;
            do
            {
              if (*(void *)v33 != v22) {
                objc_enumerationMutation(obj);
              }
              uint64_t v25 = *(void *)(*((void *)&v32 + 1) + 8 * v24);
              long long v26 = [MEMORY[0x1E4F1CA60] dictionary];
              long long v27 = [v19 objectForKeyedSubscript:@"Subviews"];
              [v27 addObject:v26];

              _addUserActionDescription_0(v25, v26, v23, a4, a5);
              ++v24;
            }
            while (v21 != v24);
            uint64_t v21 = [obj countByEnumeratingWithState:&v32 objects:v36 count:16];
          }
          while (v21);
        }

        id v7 = v28;
        double v9 = v19;
      }
    }
  }
}

id _UIPopoverPresentationControllerSourceItemUpCast(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_185869494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL _UIViewLayerAnimationCanBeConsideredFinished(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1 layer];
  id v5 = [v4 animationForKey:v3];

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v6 = [v5 keyPath];
    id v7 = [v4 valueForKeyPath:v6];
    if (v7)
    {
      id v8 = [v5 fromValue];
      double v9 = [v4 presentationLayer];
      id v10 = [v9 valueForKeyPath:v6];

      BOOL v11 = 0;
      if (v8 && v10)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          if ([v5 isAdditive])
          {
            id v12 = objc_msgSend(v8, "CA_addValue:multipliedBy:", v8, 0xFFFFFFFFLL);
            objc_msgSend(v8, "CA_distanceToValue:", v12);
            double v14 = fabs(v13);
          }
          else
          {
            objc_msgSend(v7, "CA_distanceToValue:", v8);
            double v14 = fabs(v15);
          }
          if (v14 == 0.0)
          {
            BOOL v11 = 1;
          }
          else
          {
            objc_msgSend(v7, "CA_distanceToValue:", v10);
            BOOL v11 = fabs(v16) / v14 < 0.05;
          }
        }
        else
        {
          BOOL v11 = 0;
        }
      }
    }
    else
    {
      BOOL v11 = 0;
    }
  }
  else
  {
    BOOL v11 = 0;
  }

  return v11;
}

void _UIVisualEffectViewConfigureDependent(void *a1, id *a2)
{
  id obj = a1;
  id v3 = a2 + 61;
  id v4 = a2;
  objc_storeWeak(v3, obj);
  id v5 = [v4 _deferredAnimationForKey:@"backgroundEffects"];
  objc_storeStrong(v4 + 64, obj[64]);
  if (v5)
  {
    [v5 addAnimationFrameForValue:obj[64]];
  }
  else
  {
    *((unsigned char *)v4 + 472) |= 1u;
    [v4 _configureEffects];
  }
}

void sub_18586DDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _pasteboardCacheQueue_PasteboardNameToPasteboardMap()
{
  if (qword_1EB25CA38 != -1) {
    dispatch_once(&qword_1EB25CA38, &__block_literal_global_348);
  }
  char v0 = (void *)qword_1EB25CA30;
  return v0;
}

id _pasteboardCacheQueue_pasteboardForName(void *a1)
{
  id v1 = a1;
  id v2 = _pasteboardCacheQueue_PasteboardNameToPasteboardMap();
  id v3 = [v2 objectForKeyedSubscript:v1];

  return v3;
}

void sub_18586E628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

id _pasteboardCacheQueue_existingItemCollectionWithName(void *a1, void *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if ((([(id)UIApp _isActivating] & 1) != 0
     || [(id)UIApp _isResigningActive])
    && [v3 isEqualToString:@"com.apple.UIKit.pboard.general"])
  {
    id v4 = _getTemporaryLocalGeneralPasteboard(a2);
    goto LABEL_34;
  }
  if ([v3 length])
  {
    long long v33 = a2;
    long long v34 = v3;
    id v5 = _pasteboardCacheQueue_PasteboardNametoItemCollectionMap();
    double v36 = [MEMORY[0x1E4F1CA48] array];
    double v38 = [MEMORY[0x1E4F1C9C8] date];
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    id v6 = v5;
    uint64_t v7 = [v6 countByEnumeratingWithState:&v40 objects:v48 count:16];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)v41;
      do
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          if (*(void *)v41 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v40 + 1) + 8 * i);
          id v12 = [v6 objectForKeyedSubscript:v11];
          uint64_t v13 = [v12 expirationDate];
          if (v13)
          {
            double v14 = (void *)v13;
            double v15 = [v12 expirationDate];
            uint64_t v16 = [v15 compare:v38];

            if (v16 == -1) {
              [v36 addObject:v11];
            }
          }
        }
        uint64_t v8 = [v6 countByEnumeratingWithState:&v40 objects:v48 count:16];
      }
      while (v8);
    }

    [v6 removeObjectsForKeys:v36];
    BOOL v17 = _pasteboardCacheQueue_PasteboardNameToPinnedItemCollectionMap();
    long long v35 = [MEMORY[0x1E4F1CA48] array];
    uint64_t v37 = [MEMORY[0x1E4F1C9C8] date];
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v18 = v17;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v44 objects:v49 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v45;
      do
      {
        for (uint64_t j = 0; j != v20; ++j)
        {
          if (*(void *)v45 != v21) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void **)(*((void *)&v44 + 1) + 8 * j);
          uint64_t v24 = [v18 objectForKeyedSubscript:v23];
          uint64_t v25 = [v24 expirationDate];
          if (v25)
          {
            long long v26 = (void *)v25;
            long long v27 = [v24 expirationDate];
            uint64_t v28 = [v27 compare:v37];

            if (v28 == -1)
            {
              [v35 addObject:v23];
              _pasteboardCacheQueue_incrementCountOffsetForName(v23);
            }
          }
        }
        uint64_t v20 = [v18 countByEnumeratingWithState:&v44 objects:v49 count:16];
      }
      while (v20);
    }

    [v18 removeObjectsForKeys:v35];
    id v3 = v34;
    uint64_t v29 = _pasteboardCacheQueue_itemCollectionForName(v34);
    if (v29)
    {
      id v4 = (void *)v29;
    }
    else
    {
      uint64_t v31 = _serverConnection();
      id v39 = 0;
      id v4 = [v31 pasteboardWithName:v34 createIfNeeded:0 authenticationBlock:&__block_literal_global_351_3 dataOwnerBlock:&__block_literal_global_354_1 error:&v39];
      id v30 = v39;

      if (v30 || !v4)
      {
        if (v33 && v30)
        {
          id v30 = v30;
          *long long v33 = v30;
        }
        goto LABEL_33;
      }
      _pasteboardCacheQueue_setItemCollectionForName(v34, v4);
    }
    id v30 = 0;
  }
  else
  {
    id v30 = 0;
    id v4 = 0;
  }
LABEL_33:

LABEL_34:
  return v4;
}

id _serverConnection()
{
  if (qword_1EB25C9F8 != -1) {
    dispatch_once(&qword_1EB25C9F8, &__block_literal_global_320_0);
  }
  char v0 = (void *)qword_1EB25C9F0;
  return v0;
}

void _pasteboardCacheQueue_setItemCollectionForName(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  _pasteboardCacheQueue_PasteboardNametoItemCollectionMap();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  [v5 setObject:v3 forKeyedSubscript:v4];
}

id _pasteboardCacheQueue_itemCollectionForName(void *a1)
{
  id v1 = a1;
  id v2 = _pasteboardCacheQueue_PasteboardNameToPinnedItemCollectionMap();
  id v3 = [v2 objectForKeyedSubscript:v1];

  if (v3)
  {
    id v4 = v3;
  }
  else
  {
    id v5 = _pasteboardCacheQueue_PasteboardNametoItemCollectionMap();
    id v4 = [v5 objectForKeyedSubscript:v1];
  }
  return v4;
}

id _pasteboardCacheQueue_PasteboardNametoItemCollectionMap()
{
  if (qword_1EB25C9D8 != -1) {
    dispatch_once(&qword_1EB25C9D8, &__block_literal_global_315_0);
  }
  char v0 = (void *)qword_1EB25C9D0;
  return v0;
}

id _pasteboardCacheQueue_PasteboardNameToPinnedItemCollectionMap()
{
  if (qword_1EB25CA18 != -1) {
    dispatch_once(&qword_1EB25CA18, &__block_literal_global_344_0);
  }
  char v0 = (void *)qword_1EB25CA10;
  return v0;
}

id _pasteboardCacheQueue()
{
  if (qword_1EB25C9E8 != -1) {
    dispatch_once(&qword_1EB25C9E8, &__block_literal_global_317_2);
  }
  char v0 = (void *)qword_1EB25C9E0;
  return v0;
}

void *_UIUpdateSequenceInsertItem(void *a1, int a2, uint64_t a3, int a4, uint64_t a5, const void *a6)
{
  id v12 = malloc_type_calloc(1uLL, 0x30uLL, 0x10F004096A70276uLL);
  void v12[2] = a3;
  *((_DWORD *)v12 + 6) = a4;
  void v12[4] = a5;
  uint64_t v13 = _Block_copy(a6);
  double v14 = (void *)v12[5];
  v12[5] = v13;

  if (a2 == 1)
  {
    uint64_t v16 = *a1;
    *id v12 = *a1;
    if (v16) {
      *(void *)(*a1 + _Block_object_dispose(&STACK[0x478], 8) = v12;
    }
    *a1 = v12;
    v12[1] = a1;
  }
  else if (!a2)
  {
    uint64_t v15 = a1[1];
    *id v12 = a1;
    v12[1] = v15;
    *(void *)a1[1] = v12;
    a1[1] = v12;
  }
  return v12;
}

void __GetRotationFollowingWindows_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28F50] weakObjectsPointerArray];
  id v1 = (void *)_MergedGlobals_1073;
  _MergedGlobals_1073 = v0;

  id v4 = [MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v2 = [v4 addObserverForName:0x1ED160160 object:0 queue:0 usingBlock:&__block_literal_global_253];
  id v3 = (void *)qword_1EB260BC8;
  qword_1EB260BC8 = v2;
}

void _3rdParty_batteryInformationChanged()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = _batteryLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1853B0000, v0, OS_LOG_TYPE_INFO, "Battery information has changed.", buf, 2u);
  }

  if (qword_1EB261018 != -1) {
    dispatch_once(&qword_1EB261018, &__block_literal_global_498);
  }
  theArraCGFloat y = 0;
  if (byte_1EB260ED9)
  {
    BOOL v1 = IOPSCopyPowerSourcesByTypePrecise() == 0;
    CFArrayRef v2 = 0;
    if (!v1) {
      goto LABEL_24;
    }
  }
  else
  {
    CFArrayRef v2 = (const __CFArray *)IOPSCopyPowerSourcesByType();
    theArraCGFloat y = v2;
  }
  if (!v2)
  {
LABEL_24:
    uint64_t v13 = _batteryLog();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "Could not copy battery information.", buf, 2u);
    }

    return;
  }
  CFArrayRef v3 = IOPSCopyPowerSourcesList(v2);
  if (v3)
  {
    CFArrayRef v4 = v3;
    if (CFArrayGetCount(theArray) < 1)
    {
      id v6 = _batteryLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "No internal battery found", buf, 2u);
      }
    }
    else
    {
      ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(theArray, 0);
      id v6 = IOPSGetPowerSourceDescription(theArray, ValueAtIndex);
      uint64_t v7 = _batteryLog();
      uint64_t v8 = v7;
      if (v6)
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 138543362;
          BOOL v17 = v6;
          _os_log_debug_impl(&dword_1853B0000, v8, OS_LOG_TYPE_DEBUG, "Retrieved battery info: %{public}@", buf, 0xCu);
        }

        uint64_t v8 = [MEMORY[0x1E4F1CA60] dictionary];
        uint64_t v9 = [v6 objectForKeyedSubscript:@"Current Capacity"];
        if (v9) {
          [v8 setObject:v9 forKeyedSubscript:@"CurrentCapacity"];
        }
        id v10 = [v6 objectForKeyedSubscript:@"Max Capacity"];
        if (v10) {
          [v8 setObject:v10 forKeyedSubscript:@"MaxCapacity"];
        }
        uint64_t v11 = [v6 objectForKeyedSubscript:@"Raw External Connected"];
        if (v11) {
          [v8 setObject:v11 forKeyedSubscript:@"ExternalConnected"];
        }
        id v12 = [v6 objectForKeyedSubscript:@"Is Charged"];
        if (v12) {
          [v8 setObject:v12 forKeyedSubscript:@"FullyCharged"];
        }
        _updateBatteryStatusBasedOnProperties(v8);
      }
      else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "Could not retrieve information about internal battery.", buf, 2u);
      }
    }
    CFRelease(v4);
  }
  else
  {
    double v14 = _batteryLog();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1853B0000, v14, OS_LOG_TYPE_ERROR, "Could not retrieve the list of internal batteries.", buf, 2u);
    }
  }
  CFRelease(theArray);
}

id _batteryLog()
{
  if (qword_1EB261008 != -1) {
    dispatch_once(&qword_1EB261008, &__block_literal_global_455_0);
  }
  uint64_t v0 = (void *)qword_1EB261000;
  return v0;
}

void _UpdateBatteryStatus(io_registry_entry_t a1)
{
  CFArrayRef v2 = (void *)MEMORY[0x18C108260]();
  CFArrayRef v3 = [MEMORY[0x1E4F1CA60] dictionary];
  _addBatteryPropertyForKey(a1, v3, @"CurrentCapacity");
  _addBatteryPropertyForKey(a1, v3, @"MaxCapacity");
  _addBatteryPropertyForKey(a1, v3, @"AtCriticalLevel");
  _addBatteryPropertyForKey(a1, v3, @"Voltage");
  _addBatteryPropertyForKey(a1, v3, @"FullyCharged");
  _addBatteryPropertyForKey(a1, v3, @"IsCharging");
  _addBatteryPropertyForKey(a1, v3, @"ExternalConnected");
  _addBatteryPropertyForKey(a1, v3, @"ExternalChargeCapable");
  _addBatteryPropertyForKey(a1, v3, @"AdapterInfo");
  _addBatteryPropertyForKey(a1, v3, @"CapacityEstimated");
  _addBatteryPropertyForKey(a1, v3, @"AdapterDetails");
  uint64_t v4 = [v3 count];
  id v5 = _batteryLog();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v6)
    {
      __int16 v10 = 0;
      uint64_t v7 = "Updating battery status with populated properties";
      uint64_t v8 = (uint8_t *)&v10;
LABEL_6:
      _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_INFO, v7, v8, 2u);
    }
  }
  else if (v6)
  {
    __int16 v9 = 0;
    uint64_t v7 = "Updating battery status properties, will be UIDeviceBatteryStateUnknown";
    uint64_t v8 = (uint8_t *)&v9;
    goto LABEL_6;
  }

  _updateBatteryStatusBasedOnProperties(v3);
}

void _addBatteryPropertyForKey(io_registry_entry_t a1, void *a2, const __CFString *a3)
{
  id v7 = a2;
  CFPropertCGFloat y = IORegistryEntryCreateCFProperty(a1, a3, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (CFProperty)
  {
    BOOL v6 = (void *)CFProperty;
    [v7 setObject:CFProperty forKey:a3];
  }
}

void _updateBatteryStatusBasedOnProperties(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  CFArrayRef v2 = +[UIDevice currentDevice];
  if ([v1 count])
  {
    CFArrayRef v3 = _batteryLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v16 = 138543362;
      id v17 = v1;
      _os_log_debug_impl(&dword_1853B0000, v3, OS_LOG_TYPE_DEBUG, "Updating battery data based on properties: %{public}@", (uint8_t *)&v16, 0xCu);
    }

    uint64_t v4 = [v1 objectForKeyedSubscript:@"CurrentCapacity"];
    int v5 = [v4 intValue];

    BOOL v6 = [v1 objectForKeyedSubscript:@"MaxCapacity"];
    int v7 = [v6 intValue];

    if (v7) {
      int v9 = v7;
    }
    else {
      int v9 = 100;
    }
    *(float *)&double v8 = (float)v5 / (float)v9;
    [v2 _setBatteryLevel:v8];
    __int16 v10 = [v1 objectForKeyedSubscript:@"ExternalConnected"];
    int v11 = [v10 BOOLValue];

    if (v11)
    {
      id v12 = [v1 objectForKeyedSubscript:@"FullyCharged"];
      int v13 = [v12 BOOLValue];

      if (v13) {
        uint64_t v14 = 3;
      }
      else {
        uint64_t v14 = 2;
      }
      uint64_t v15 = v2;
    }
    else
    {
      uint64_t v15 = v2;
      uint64_t v14 = 1;
    }
  }
  else
  {
    uint64_t v15 = v2;
    uint64_t v14 = 0;
  }
  [v15 _setBatteryState:v14];
  [(id)UIApp batteryStatusDidChange:v1];
}

void __UIDecompressorLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "Decompressor");
  id v1 = (void *)qword_1EB25BDC0;
  qword_1EB25BDC0 = (uint64_t)v0;
}

void _ClearReferencesToView(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  BOOL v6 = [v4 view];
  int v7 = [v5 view];

  if (v6 == v7)
  {
    double v8 = [v4 gestureRecognizers];
    [v4 _clearGestureRecognizers];
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v9 = v8;
    uint64_t v10 = [v9 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v23;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v23 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          uint64_t v15 = objc_msgSend(v14, "view", (void)v22);
          int v16 = [v4 view];

          if (v15 != v16) {
            -[UITouch _addGestureRecognizer:]((uint64_t)v4, v14);
          }
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v11);
    }

    id v17 = [v4 gestureRecognizers];
    uint64_t v18 = [v17 count];

    if (v18)
    {
      [v4 setView:0];
    }
    else
    {
      uint64_t v19 = [v4 view];
      uint64_t v20 = [v19 _window];
      uint64_t v21 = v20;
      if (!v20)
      {
        uint64_t v21 = [v5 window];
      }
      objc_msgSend((id)objc_msgSend((id)UIApp, "_touchesEventForWindow:", v21), "_removeTouch:", v4);
    }
  }
}

BOOL _shouldEnableUIKitParallaxEffects()
{
  if (!os_variant_has_internal_diagnostics()) {
    return 1;
  }
  if (qword_1EB25C340 != -1) {
    dispatch_once(&qword_1EB25C340, &__block_literal_global_3766);
  }
  return byte_1EB25C0AA != 0;
}

uint64_t _sSo16UIViewControllerC5UIKitE14traitOverridesAC07UITraitE0Vvg_0@<X0>(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_traitOverrides);
  id v4 = objc_msgSend((id)swift_dynamicCastObjCProtocolUnconditional(), sel__swiftImplCopy);
  swift_unknownObjectRelease();
  uint64_t v5 = swift_dynamicCastObjCProtocolUnconditional();
  swift_getObjectType();
  sub_1853B985C(0, (unint64_t *)&qword_1E8FAFFC0);
  uint64_t result = swift_dynamicCastMetatype();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAFBC0);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void _sSo16UIViewControllerC5UIKitE14traitOverridesAC07UITraitE0Vvs_0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  id v3 = objc_msgSend(v1, sel_traitOverrides);
  id v4 = (void *)swift_dynamicCastObjCProtocolUnconditional();
  id v5 = *(id *)(v2 + 16);
  swift_release();
  objc_msgSend(v4, sel__replaceWithOverrides_, v5);
  swift_unknownObjectRelease();
}

double UIRectRoundToViewScale(void *a1, double a2, double a3, double a4, double a5)
{
  [a1 _currentScreenScale];
  return UIRectRoundToScale(a2, a3, a4, a5, v9);
}

void UIButton.Configuration.background.setter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)sub_185873384();
  id v3 = *(void **)(v1 + 16);
  id v4 = v2;
  id v5 = v3;
  swift_release();
  objc_msgSend(v5, sel_copy);

  sub_186A1F1CC();
  swift_unknownObjectRelease();
  sub_1853B985C(0, (unint64_t *)&qword_1EB2558D8);
  swift_dynamicCast();
  objc_msgSend(v4, sel__setSwiftBridgingBackground_, v6);
}

id sub_1858731BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v7 = *a1;
  if (*a1)
  {
    uint64_t v10 = a1[1];
    uint64_t v11 = (void *)sub_185873384();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v7;
    *(void *)(v12 + 24) = v10;
    void aBlock[4] = a3;
    void aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_18549B6B0;
    aBlock[3] = a4;
    int v13 = _Block_copy(aBlock);
    id v14 = v11;
    sub_1854B0A60(v7);
    swift_release();
    objc_msgSend(v14, *a5, v13);
    _Block_release(v13);

    return (id)sub_1854AFD40(v7);
  }
  else
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v5;
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v18 = *(void **)(v17 + 16);
    }
    else
    {
      objc_msgSend(*(id *)(v17 + 16), sel_copy);
      sub_186A1F1CC();
      swift_unknownObjectRelease();
      sub_1853B985C(0, &qword_1E8FAF9B0);
      swift_dynamicCast();
      uint64_t v18 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255C08);
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v21;
      swift_release();
      *id v5 = v19;
    }
    return objc_msgSend(v18, *a5, 0);
  }
}

uint64_t sub_185873384()
{
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = *v0;
  if (isUniquelyReferenced_nonNull_native) {
    return *(void *)(v2 + 16);
  }
  objc_msgSend(*(id *)(v2 + 16), sel_copy);
  sub_186A1F1CC();
  swift_unknownObjectRelease();
  sub_1853B985C(0, &qword_1E8FAF9B0);
  swift_dynamicCast();
  uint64_t v3 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255C08);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v6;
  swift_release();
  uint64_t *v0 = v4;
  return v3;
}

void _BatteryStatusChanged(uint64_t a1, io_registry_entry_t a2, int a3)
{
  if (a3 == -536723200)
  {
    kdebug_trace();
    _UpdateBatteryStatus(a2);
  }
}

void sub_185877200(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_185877808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIViewServiceConnectionNotificationName(void *a1, const char *a2)
{
  return [a1 stringByAppendingFormat:@"-com.apple.uikit.viewService.connectionRequest"];
}

uint64_t ___serverConnection_block_invoke_5()
{
  uint64_t result = [MEMORY[0x1E4F881F8] beginListeningToPasteboardChangeNotifications];
  _notificationStateQueue_notificationState = result;
  return result;
}

void ___batteryLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "UIDevice.battery");
  uint64_t v1 = (void *)qword_1EB261000;
  qword_1EB261000 = (uint64_t)v0;
}

id ___telemetryReportOffsetChange_block_invoke_2(uint64_t a1)
{
  return _telemetryOffsetChangeEvent(*(void **)(a1 + 32), *(void **)(a1 + 40), 0, *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

void ___frameKeyPathTranslationForKeyPath_block_invoke()
{
  os_log_t v0 = (void *)qword_1EB2650A8;
  qword_1EB2650A8 = (uint64_t)&unk_1ED3F7CD0;
}

BOOL UIApplicationSceneDeactivationReasonMaskContainsReason(unint64_t a1, char a2)
{
  return ((1 << a2) & a1) != 0;
}

void __Block_byref_object_copy__408(uint64_t a1, uint64_t a2)
{
}

void _UIVisualEffectViewRemoveDependent(void *a1, id *a2)
{
  uint64_t v3 = a2 + 61;
  uint64_t v6 = a2;
  uint64_t v4 = a1;
  objc_storeWeak(v3, 0);
  id v5 = (void *)v4[54];

  [v5 removeObject:v6];
}

double UIDistanceBetweenPoints(double a1, double a2, double a3, double a4)
{
  return sqrt((a3 - a1) * (a3 - a1) + (a4 - a2) * (a4 - a2));
}

void __purgeReusePools()
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  id v14 = &v13;
  uint64_t v15 = 0x3032000000;
  int v16 = __Block_byref_object_copy__109;
  uint64_t v17 = __Block_byref_object_dispose__109;
  id v18 = 0;
  if (qword_1EB25CEB8 != -1) {
    dispatch_once(&qword_1EB25CEB8, &__block_literal_global_34_1);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ____purgeReusePools_block_invoke;
  block[3] = &unk_1E52D9900;
  void block[4] = &v13;
  dispatch_sync((dispatch_queue_t)qword_1EB25CEB0, block);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v0 = (id)v14[5];
  uint64_t v1 = [v0 countByEnumeratingWithState:&v8 objects:v19 count:16];
  if (v1)
  {
    uint64_t v2 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v1; ++i)
      {
        if (*(void *)v9 != v2) {
          objc_enumerationMutation(v0);
        }
        uint64_t v4 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        uint64_t v5 = v4[2];
        if (v5)
        {
          unsigned __int8 v6 = atomic_load(byte_1EB256DF9);
          if ((v5 & 2) == 0 || (v6 & 1) == 0)
          {
            if (v6) {
              continue;
            }
LABEL_16:
            objc_msgSend(v4, "drainPool", (void)v8);
            continue;
          }
        }
        else if ((v5 & 2) == 0)
        {
          continue;
        }
        unsigned __int8 v7 = atomic_load((unsigned __int8 *)&_MergedGlobals_898);
        if ((v7 & 1) == 0) {
          goto LABEL_16;
        }
      }
      uint64_t v1 = [v0 countByEnumeratingWithState:&v8 objects:v19 count:16];
    }
    while (v1);
  }

  _Block_object_dispose(&v13, 8);
}

void sub_18587DD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGImageDestination *_UIImageDataRepresentation(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  unsigned __int8 v6 = a3;
  id v7 = [a1 _rasterizedImage];
  uint64_t v8 = [v7 CGImage];
  if (v8)
  {
    long long v9 = (CGImage *)v8;
    long long v10 = (__CFData *)objc_opt_new();
    long long v11 = v10;
    if (v10)
    {
      uint64_t v12 = CGImageDestinationCreateWithData(v10, v5, 1uLL, 0);
      if (v12)
      {
        uint64_t v13 = objc_opt_new();
        id v14 = NSNumber;
        unint64_t v15 = [v7 imageOrientation];
        if (v15 >= 8) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = (0x75426831u >> (4 * v15)) & 0xF;
        }
        uint64_t v17 = [v14 numberWithUnsignedInteger:v16];
        [v13 setObject:v17 forKeyedSubscript:*MEMORY[0x1E4F2FCA0]];

        [v7 scale];
        double v19 = fmax(fmin(v18 * 72.0, 7200.0), 7.2);
        uint64_t v20 = [NSNumber numberWithDouble:v19];
        [v13 setObject:v20 forKeyedSubscript:*MEMORY[0x1E4F2F6B0]];

        uint64_t v21 = [NSNumber numberWithDouble:v19];
        [v13 setObject:v21 forKeyedSubscript:*MEMORY[0x1E4F2F6A8]];

        if (v6) {
          v6[2](v6, v13);
        }
        CGImageDestinationAddImage(v12, v9, (CFDictionaryRef)v13);
        if (!CGImageDestinationFinalize(v12))
        {

          long long v11 = 0;
        }
        CFRelease(v12);
        long long v11 = v11;

        uint64_t v12 = v11;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

void __UIImagePNGRepresentation_block_invoke(uint64_t a1, void *a2)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *MEMORY[0x1E4F2FCB8];
  v6[0] = &unk_1ED3F2C10;
  uint64_t v2 = (void *)MEMORY[0x1E4F1C9E8];
  id v3 = a2;
  uint64_t v4 = [v2 dictionaryWithObjects:v6 forKeys:&v5 count:1];
  [v3 setObject:v4 forKeyedSubscript:*MEMORY[0x1E4F2FCD8]];

  [v3 setObject:&unk_1ED3F2C28 forKeyedSubscript:*MEMORY[0x1E4F2FCB0]];
}

void _HandleMotionManagerNotification(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!a1)
  {
    void v7[6] = v3;
    v7[7] = v4;
    uint64_t v5 = *a2;
    BOOL v6 = *a2 == 1;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___HandleMotionManagerNotification_block_invoke;
    void v7[3] = &__block_descriptor_48_e5_v8__0l;
    if (v5 != 2) {
      uint64_t v5 = v6;
    }
    void v7[4] = a3;
    v7[5] = v5;
    dispatch_async(MEMORY[0x1E4F14428], v7);
  }
}

void __ProductSuffix_block_invoke()
{
  _CFGetProductName();
  uint64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if ([(__CFString *)v5 length])
  {
    if ([(__CFString *)v5 isEqualToString:@"ipod"])
    {

      uint64_t v5 = @"iphone";
    }
    uint64_t v0 = [[NSString alloc] initWithFormat:@"~%@", v5];
    uint64_t v1 = (void *)qword_1EB265538;
    qword_1EB265538 = v0;
  }
  else
  {
    uint64_t v2 = +[UIDevice currentDevice];
    uint64_t v1 = [v2 model];

    uint64_t v3 = @"~iphone";
    if (v1)
    {
      [v1 rangeOfString:@"iPad" options:9];
      if (v4) {
        uint64_t v3 = @"~ipad";
      }
    }
    objc_storeStrong((id *)&qword_1EB265538, v3);
  }
}

void _UIViewReconsiderMotionEffectSuspensionForScreenMirroring()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [(id)_motionEffectEngine suspensionReasons];
  int v1 = [v0 containsObject:@"mirroringMainScreen"];

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v2 = +[UIScene _scenesIncludingInternal:](UIScene, "_scenesIncludingInternal:", 1, 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        if ([v7 _hostsWindows])
        {
          uint64_t v8 = [v7 _screen];
          long long v9 = [v8 mirroredScreen];
          long long v10 = +[UIScreen mainScreen];

          if (v9 == v10)
          {

            if ((v1 & 1) == 0)
            {
              +[UIView animateWithDuration:&__block_literal_global_3764 animations:0.2];
              [(id)_motionEffectEngine beginSuspendingForReason:@"mirroringMainScreen"];
            }
            return;
          }
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  if (v1) {
    [(id)_motionEffectEngine endSuspendingForReason:@"mirroringMainScreen"];
  }
}

void sub_185880AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, id *a12)
{
  objc_destroyWeak(v12);
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(v13);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak((id *)(v19 - 112));
  _Unwind_Resume(a1);
}

void sub_185880B78()
{
}

void sub_185880B80()
{
}

void sub_185880B88()
{
}

void sub_185880B90()
{
}

void sub_185880B98()
{
}

void ____purgeReusePools_block_invoke(uint64_t a1)
{
  if (qword_1EB25CEC8 != -1) {
    dispatch_once(&qword_1EB25CEC8, &__block_literal_global_37_4);
  }
  id v5 = (id)qword_1EB25CEC0;
  uint64_t v2 = [v5 allObjects];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void _UIDateLabelUpdateLocaleInfo()
{
  uint64_t v0 = (void *)MEMORY[0x1E4F28C10];
  int v1 = [MEMORY[0x1E4F1CA20] currentLocale];
  id v14 = [v0 dateFormatFromTemplate:@"j" options:0 locale:v1];

  BOOL v2 = [v14 rangeOfString:@"H"] != 0x7FFFFFFFFFFFFFFFLL
    || [v14 rangeOfString:@"k"] != 0x7FFFFFFFFFFFFFFFLL;
  _MergedGlobals_7_14 = v2;
  uint64_t v3 = [v14 rangeOfString:@"a"];
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    BOOL v4 = 0;
  }
  else
  {
    unint64_t v5 = v3;
    unint64_t v6 = [v14 rangeOfString:@"h" options:1];
    if (v6 == 0x7FFFFFFFFFFFFFFFLL) {
      unint64_t v6 = [v14 rangeOfString:@"k" options:1];
    }
    BOOL v4 = v6 != 0x7FFFFFFFFFFFFFFFLL && v5 < v6;
  }
  byte_1EB25D701 = v4;
  uint64_t v8 = (void *)qword_1EB25D708;
  qword_1EB25D708 = 0;

  long long v9 = (void *)qword_1EB25D710;
  qword_1EB25D710 = 0;

  long long v10 = (void *)qword_1EB25D718;
  qword_1EB25D718 = 0;

  long long v11 = (void *)qword_1EB25D720;
  qword_1EB25D720 = 0;

  long long v12 = (void *)qword_1EB25D728;
  qword_1EB25D728 = 0;

  long long v13 = (void *)qword_1EB25D730;
  qword_1EB25D730 = 0;
}

id getWTWritingToolsViewControllerClass()
{
  uint64_t v4 = 0;
  unint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1EB265390;
  uint64_t v7 = qword_1EB265390;
  if (!qword_1EB265390)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getWTWritingToolsViewControllerClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getWTWritingToolsViewControllerClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18588378C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getWTWritingToolsViewControllerClass_block_invoke(uint64_t a1)
{
  if (!qword_1EB265398) {
    qword_1EB265398 = _sl_dlopen();
  }
  Class result = objc_getClass("WTWritingToolsViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB265390 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

double transitionGapGivenTabController(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 selectedViewController];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v3 = [v1 selectedViewController];

    double v4 = 0.0;
    if (v3 && [v3 _builtinTransitionStyle] == 1)
    {
      [v3 _builtinTransitionGap];
      double v4 = v5;
    }
  }
  else
  {

    uint64_t v3 = 0;
    double v4 = 0.0;
  }

  return v4;
}

void getCHHapticEventParameterIDHapticIntensity()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getCHHapticEventParameterIDHapticIntensitySymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventParameterIDHapticIntensitySymbolLoc_ptr;
  if (!getCHHapticEventParameterIDHapticIntensitySymbolLoc_ptr)
  {
    id v1 = CoreHapticsLibrary_1();
    void v7[3] = (uint64_t)dlsym(v1, "CHHapticEventParameterIDHapticIntensity");
    getCHHapticEventParameterIDHapticIntensitySymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    BOOL v2 = *v0;
    id v3 = v2;
  }
  else
  {
    double v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"CHHapticEventParameterID getCHHapticEventParameterIDHapticIntensity(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 49, @"%s", dlerror());

    __break(1u);
  }
}

void sub_18588628C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCHHapticEventParameterIDHapticSharpness()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getCHHapticEventParameterIDHapticSharpnessSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventParameterIDHapticSharpnessSymbolLoc_ptr;
  if (!getCHHapticEventParameterIDHapticSharpnessSymbolLoc_ptr)
  {
    id v1 = CoreHapticsLibrary_1();
    void v7[3] = (uint64_t)dlsym(v1, "CHHapticEventParameterIDHapticSharpness");
    getCHHapticEventParameterIDHapticSharpnessSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    BOOL v2 = *v0;
    id v3 = v2;
  }
  else
  {
    double v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"CHHapticEventParameterID getCHHapticEventParameterIDHapticSharpness(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 50, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1858863F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCHHapticEventParameterIDReleaseTime()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getCHHapticEventParameterIDReleaseTimeSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventParameterIDReleaseTimeSymbolLoc_ptr;
  if (!getCHHapticEventParameterIDReleaseTimeSymbolLoc_ptr)
  {
    id v1 = CoreHapticsLibrary_1();
    void v7[3] = (uint64_t)dlsym(v1, "CHHapticEventParameterIDReleaseTime");
    getCHHapticEventParameterIDReleaseTimeSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    BOOL v2 = *v0;
    id v3 = v2;
  }
  else
  {
    double v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"CHHapticEventParameterID getCHHapticEventParameterIDReleaseTime(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 54, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1858866C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCHHapticEventParameterIDDecayTime()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getCHHapticEventParameterIDDecayTimeSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventParameterIDDecayTimeSymbolLoc_ptr;
  if (!getCHHapticEventParameterIDDecayTimeSymbolLoc_ptr)
  {
    id v1 = CoreHapticsLibrary_1();
    void v7[3] = (uint64_t)dlsym(v1, "CHHapticEventParameterIDDecayTime");
    getCHHapticEventParameterIDDecayTimeSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    BOOL v2 = *v0;
    id v3 = v2;
  }
  else
  {
    double v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"CHHapticEventParameterID getCHHapticEventParameterIDDecayTime(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 53, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185886830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCHHapticEventParameterIDAttackTime()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getCHHapticEventParameterIDAttackTimeSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventParameterIDAttackTimeSymbolLoc_ptr;
  if (!getCHHapticEventParameterIDAttackTimeSymbolLoc_ptr)
  {
    id v1 = CoreHapticsLibrary_1();
    void v7[3] = (uint64_t)dlsym(v1, "CHHapticEventParameterIDAttackTime");
    getCHHapticEventParameterIDAttackTimeSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    BOOL v2 = *v0;
    id v3 = v2;
  }
  else
  {
    double v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"CHHapticEventParameterID getCHHapticEventParameterIDAttackTime(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 52, @"%s", dlerror());

    __break(1u);
  }
}

void sub_185886998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __UIVIEW_IS_EXECUTING_ALONGSIDE_ANIMATION_BLOCK__(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

CGColorSpaceRef __StandardSRGBColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
  qword_1EB25CE78 = (uint64_t)result;
  return result;
}

CGColorSpaceRef __StandardGrayColorSpace_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC00]);
  qword_1EB25CE88 = (uint64_t)result;
  return result;
}

CFCharacterSetRef __ParseBracesWithDelimiter_block_invoke()
{
  CFCharacterSetRef result = CFCharacterSetCreateWithCharactersInString(0, @"{[]}");
  _MergedGlobals_1090 = (uint64_t)result;
  return result;
}

void __UISegmentedControlStyleProviderForIdiom_block_invoke()
{
  dyld_program_sdk_at_least();
  uint64_t v0 = objc_opt_new();
  id v1 = (void *)qword_1EB25E5A0;
  qword_1EB25E5A0 = v0;
}

void _UIInitializeBuiltInTraits()
{
  os_unfair_lock_lock((os_unfair_lock_t)&_UITraitLock);
  _traitTokensByIdentifier = [objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:27];
  int v0 = dyld_program_sdk_at_least();
  unint64_t v1 = 0;
  BOOL v2 = &byte_1E53010A8;
  do
  {
    objc_msgSend((id)_traitTokensByIdentifier, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithUnsignedInteger:", v1), *((void *)v2 - 3));
    if (v0 && (*v2 & 8) != 0)
    {
      _UITraitTokenSetInsert(qword_1EB2623F0, v1, v3);
      _UITraitTokenSetInsert(_allTraitTokensAffectingColorAppearance, v1, v4);
    }
    ++v1;
    v2 += 56;
  }
  while (v1 != 27);
  qword_1EB2623C8 = [objc_alloc(MEMORY[0x1E4F28E10]) initWithKeyOptions:258 valueOptions:0 capacity:27];
  double v5 = (void *)[objc_alloc(MEMORY[0x1E4F28E10]) initWithKeyOptions:0 valueOptions:258 capacity:27];
  qword_1EB2623D0 = (uint64_t)v5;
  uint64_t v6 = (void *)qword_1EB2623C8;
  [(id)qword_1EB2623C8 setObject:&unk_1ED3F5A30 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5A30];
  [v6 setObject:&unk_1ED3F5A48 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5A48];
  [v6 setObject:&unk_1ED3F5A60 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5A60];
  [v6 setObject:&unk_1ED3F5A78 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5A78];
  [v6 setObject:&unk_1ED3F5A90 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5A90];
  [v6 setObject:&unk_1ED3F5AA8 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5AA8];
  [v6 setObject:&unk_1ED3F5AC0 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5AC0];
  [v6 setObject:&unk_1ED3F5AD8 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5AD8];
  [v6 setObject:&unk_1ED3F5AF0 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5AF0];
  [v6 setObject:&unk_1ED3F5B08 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5B08];
  [v6 setObject:&unk_1ED3F5B20 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5B20];
  [v6 setObject:&unk_1ED3F5B38 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5B38];
  [v6 setObject:&unk_1ED3F5B50 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5B50];
  [v6 setObject:&unk_1ED3F5B68 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5B68];
  [v6 setObject:&unk_1ED3F5B80 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5B80];
  [v6 setObject:&unk_1ED3F5B98 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5B98];
  [v6 setObject:&unk_1ED3F5BB0 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5BB0];
  [v6 setObject:&unk_1ED3F5BC8 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5BC8];
  [v6 setObject:&unk_1ED3F5BE0 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5BE0];
  [v6 setObject:&unk_1ED3F5BF8 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5BF8];
  [v6 setObject:&unk_1ED3F5C10 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5C10];
  [v6 setObject:&unk_1ED3F5C28 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5C28];
  [v6 setObject:&unk_1ED3F5C40 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5C40];
  [v6 setObject:&unk_1ED3F5C58 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5C58];
  [v6 setObject:&unk_1ED3F5C70 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5C70];
  [v6 setObject:&unk_1ED3F5C88 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5C88];
  [v6 setObject:&unk_1ED3F5CA0 forKey:self];
  [v5 setObject:self forKey:&unk_1ED3F5CA0];
  os_unfair_lock_unlock((os_unfair_lock_t)&_UITraitLock);
}

void sub_18588BBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18588BF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_18588C8BC(uint64_t a1)
{
  return a1;
}

uint64_t destroy for UIControlPointerHoverStyleDriver(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  int v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 != 255) {
    sub_185636BB4(*(void **)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), v2);
  }
  return swift_unknownObjectWeakDestroy();
}

void UIView.hoverStyle.setter(char *a1)
{
  int v2 = v1;
  __n128 v4 = (char *)-[UIView _hoverStyleStorage](v2);
  if (!v4)
  {
    if (!a1) {
      return;
    }
    uint64_t v7 = a1;
    objc_msgSend(v7, sel_copy);
    sub_186A1F1CC();
    swift_unknownObjectRelease();
    type metadata accessor for UIHoverStyle();
    if (swift_dynamicCast())
    {
      -[UIView _setHoverStyleStorage:](v2, v43[0]);
      swift_unknownObjectWeakInit();
      uint64_t v11 = swift_unknownObjectWeakAssign();
      sub_1853B8150(v11, (uint64_t)&v48, &qword_1E8FAF510);
      char v49 = 0;
      long long v12 = (char *)v43[0] + OBJC_IVAR___UIHoverStyle_host;
      swift_beginAccess();
      sub_1853B7020((uint64_t)v12, (uint64_t)v51, &qword_1E8FAF480);
      swift_beginAccess();
      sub_185636FFC((uint64_t)&v48, (uint64_t)v12);
      swift_endAccess();
      sub_18588D108((uint64_t)v51);
      sub_1853B93B8((uint64_t)&v48, &qword_1E8FAF480);
      sub_1853B93B8((uint64_t)v51, &qword_1E8FAF480);
    }
    goto LABEL_10;
  }
  long long v42 = v4;
  if (!a1)
  {
    id v48 = 0;
    char v49 = -1;
    uint64_t v13 = (uint64_t)&v4[OBJC_IVAR___UIHoverStyle_host];
    swift_beginAccess();
    sub_1853B7020(v13, (uint64_t)v51, &qword_1E8FAF480);
    swift_beginAccess();
    sub_185636FFC((uint64_t)&v48, v13);
    swift_endAccess();
    sub_18588D108((uint64_t)v51);
    sub_1853B93B8((uint64_t)&v48, &qword_1E8FAF480);
    sub_1853B93B8((uint64_t)v51, &qword_1E8FAF480);
    -[UIView _setHoverStyleStorage:](v2, 0);
LABEL_17:

    return;
  }
  if (v4 != a1)
  {
    uint64_t ObjectType = swift_getObjectType();
    if (ObjectType == swift_getObjectType())
    {
      id v14 = *(void **)&a1[OBJC_IVAR___UIHoverStyle__shape];
      uint64_t v15 = *(void *)&a1[OBJC_IVAR___UIHoverStyle__shape + 8];
      uint64_t v16 = *(void *)&a1[OBJC_IVAR___UIHoverStyle__shape + 16];
      uint64_t v17 = *(void *)&a1[OBJC_IVAR___UIHoverStyle__shape + 24];
      uint64_t v18 = *(void *)&a1[OBJC_IVAR___UIHoverStyle__shape + 32];
      uint64_t v19 = *(void *)&a1[OBJC_IVAR___UIHoverStyle__shape + 40];
      uint64_t v20 = *(void *)&a1[OBJC_IVAR___UIHoverStyle__shape + 48];
      uint64_t v21 = &v42[OBJC_IVAR___UIHoverStyle__shape];
      long long v40 = *(void **)&v42[OBJC_IVAR___UIHoverStyle__shape];
      uint64_t v39 = *(void *)&v42[OBJC_IVAR___UIHoverStyle__shape + 8];
      uint64_t v38 = *(void *)&v42[OBJC_IVAR___UIHoverStyle__shape + 16];
      uint64_t v37 = *(void *)&v42[OBJC_IVAR___UIHoverStyle__shape + 24];
      uint64_t v36 = *(void *)&v42[OBJC_IVAR___UIHoverStyle__shape + 32];
      uint64_t v35 = *(void *)&v42[OBJC_IVAR___UIHoverStyle__shape + 40];
      uint64_t v34 = *(void *)&v42[OBJC_IVAR___UIHoverStyle__shape + 48];
      char v22 = a1[OBJC_IVAR___UIHoverStyle__shape + 56];
      char v23 = v42[OBJC_IVAR___UIHoverStyle__shape + 56];
      *(void *)uint64_t v21 = v14;
      *((void *)v21 + 1) = v15;
      *((void *)v21 + 2) = v16;
      *((void *)v21 + 3) = v17;
      *((void *)v21 + 4) = v18;
      *((void *)v21 + 5) = v19;
      *((void *)v21 + 6) = v20;
      v21[56] = v22;
      long long v41 = a1;
      sub_185638750(v14, v15, v16, v17, v18, v19, v20, v22);
      sub_185638750(v40, v39, v38, v37, v36, v35, v34, v23);
      sub_185638FA4(v40, v39, v38, v37, v36, v35, v34, v23);
      v46[0] = v40;
      v46[1] = v39;
      v46[2] = v38;
      v46[3] = v37;
      v46[4] = v36;
      v46[5] = v35;
      v46[6] = v34;
      char v47 = v23;
      sub_18563832C((uint64_t)v46);
      sub_185638FA4(v40, v39, v38, v37, v36, v35, v34, v23);
      long long v24 = v41;
      uint64_t v25 = (uint64_t)&v41[OBJC_IVAR___UIHoverStyle__effect];
      swift_beginAccess();
      sub_1854B1F38(v25, (uint64_t)v46);
      sub_1854B1F38((uint64_t)v46, (uint64_t)v43);
      uint64_t v26 = v44;
      uint64_t v27 = v45;
      uint64_t v28 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v43, v44);
      double v29 = MEMORY[0x1F4188790](v28);
      uint64_t v31 = (char *)&v34 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v32 + 16))(v31, v29);
      sub_185AFD7C4((uint64_t)v31, (uint64_t)v42, v26, v27);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v43);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v46);
      id v33 = objc_msgSend(v24, sel_isEnabled);
      objc_msgSend(v42, sel_setEnabled_, v33);

      return;
    }
    id v48 = 0;
    char v49 = -1;
    uint64_t v6 = &v42[OBJC_IVAR___UIHoverStyle_host];
    swift_beginAccess();
    sub_1853B7020((uint64_t)v6, (uint64_t)v51, &qword_1E8FAF480);
    swift_beginAccess();
    uint64_t v7 = a1;
    sub_185636FFC((uint64_t)&v48, (uint64_t)v6);
    swift_endAccess();
    sub_18588D108((uint64_t)v51);
    sub_1853B93B8((uint64_t)&v48, &qword_1E8FAF480);
    sub_1853B93B8((uint64_t)v51, &qword_1E8FAF480);
    objc_msgSend(v7, sel_copy);
    sub_186A1F1CC();
    swift_unknownObjectRelease();
    type metadata accessor for UIHoverStyle();
    if (swift_dynamicCast())
    {
      id v8 = v48;
      -[UIView _setHoverStyleStorage:](v2, v48);
      swift_unknownObjectWeakInit();
      uint64_t v9 = swift_unknownObjectWeakAssign();
      sub_1853B8150(v9, (uint64_t)v51, &qword_1E8FAF510);
      v51[8] = 0;
      uint64_t v10 = (uint64_t)v8 + OBJC_IVAR___UIHoverStyle_host;
      swift_beginAccess();
      sub_1853B7020(v10, (uint64_t)v50, &qword_1E8FAF480);
      swift_beginAccess();
      sub_185636FFC((uint64_t)v51, v10);
      swift_endAccess();
      sub_18588D108((uint64_t)v50);
      sub_1853B93B8((uint64_t)v51, &qword_1E8FAF480);
      sub_1853B93B8((uint64_t)v50, &qword_1E8FAF480);

LABEL_10:
      return;
    }

    goto LABEL_17;
  }
}

unint64_t type metadata accessor for UIHoverStyle()
{
  unint64_t result = qword_1E8FAF770;
  if (!qword_1E8FAF770)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E8FAF770);
  }
  return result;
}

uint64_t sub_18588D108(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___UIHoverStyle_host;
  swift_beginAccess();
  sub_1853B7020(v3, (uint64_t)v9, &qword_1E8FAF480);
  sub_1853B7020(a1, (uint64_t)&v10, &qword_1E8FAF480);
  if (v9[8] == 255)
  {
    if (v11 == 255) {
      return sub_1853B93B8((uint64_t)v9, &qword_1E8FAF480);
    }
    goto LABEL_8;
  }
  sub_1853B7020((uint64_t)v9, (uint64_t)v8, &qword_1E8FAF480);
  if (v11 == 255)
  {
    sub_185637B84((uint64_t)v8);
LABEL_8:
    sub_1853B93B8((uint64_t)v9, qword_1E8FAF488);
    goto LABEL_9;
  }
  sub_185AFDF74((uint64_t)&v10, (uint64_t)v7);
  char v4 = sub_185637DB8((uint64_t)v8, (uint64_t)v7);
  sub_185637B84((uint64_t)v7);
  sub_185637B84((uint64_t)v8);
  uint64_t result = sub_1853B93B8((uint64_t)v9, &qword_1E8FAF480);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    sub_1853B7020(v3, (uint64_t)v9, &qword_1E8FAF480);
    sub_1853B7020((uint64_t)v9, (uint64_t)v8, &qword_1E8FAF480);
    uint64_t v6 = swift_allocObject();
    sub_1853B8150((uint64_t)v8, v6 + 16, &qword_1E8FAF480);
    sub_1856331C0(1, (uint64_t)sub_185636F68, v6);
    swift_release();
    return sub_1853B93B8((uint64_t)v9, &qword_1E8FAF480);
  }
  return result;
}

void sub_18588D318(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = &type metadata for UIHoverAutomaticEffect;
  *(void *)(a2 + 32) = &protocol witness table for UIHoverAutomaticEffect;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(void *)(a2 + 8_Block_object_dispose(&STACK[0x478], 8) = 0;
  *(unsigned char *)(a2 + 96) = -1;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(a2 + 112) = 1;
  uint64_t v3 = swift_unknownObjectWeakAssign();
  char v4 = (void *)MEMORY[0x18C109380](v3);
  if (v4)
  {
    double v5 = v4;
    objc_msgSend(v4, sel_setPointerInteractionEnabled_, *(unsigned __int8 *)(a2 + 112));

    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = a1;
  }
}

uint64_t sub_18588D3D0(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_18588D7D8(a1, (uint64_t)v28);
  uint64_t v3 = *(unsigned __int8 *)(v1 + 128);
  unsigned __int8 v38 = *(unsigned char *)(v1 + 128);
  char v4 = (void *)MEMORY[0x18C109380](&v37);
  if (v4)
  {
    double v5 = v4;
    objc_msgSend(v4, sel_setPointerInteractionEnabled_, v3);
  }
  sub_1854B1F38(v1, (uint64_t)v27);
  __swift_assign_boxed_opaque_existential_1(v28, v27);
  uint64_t v6 = (void *)MEMORY[0x18C109380](&v37);
  if (v6)
  {
    uint64_t v7 = v6;
    objc_msgSend(v6, sel_setPointerInteractionEnabled_, v38);
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v27);
  id v8 = *(void **)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v10 = *(void *)(v1 + 56);
  uint64_t v11 = *(void *)(v1 + 64);
  uint64_t v12 = *(void *)(v1 + 72);
  uint64_t v13 = *(void *)(v1 + 80);
  uint64_t v14 = *(void *)(v1 + 88);
  uint64_t v25 = v30;
  uint64_t v26 = v29;
  uint64_t v23 = v32;
  uint64_t v24 = v31;
  uint64_t v21 = v34;
  uint64_t v22 = v33;
  uint64_t v20 = v35;
  char v15 = *(unsigned char *)(v1 + 96);
  char v16 = v36;
  sub_185638750(*(id *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(void *)(v2 + 88), *(unsigned char *)(v2 + 96));
  sub_185638FA4(v26, v25, v24, v23, v22, v21, v20, v16);
  double v29 = v8;
  uint64_t v30 = v9;
  uint64_t v31 = v10;
  uint64_t v32 = v11;
  uint64_t v33 = v12;
  uint64_t v34 = v13;
  uint64_t v35 = v14;
  char v36 = v15;
  uint64_t v17 = (void *)MEMORY[0x18C109380](&v37);
  id v18 = objc_msgSend(v17, sel_pointerInteraction);

  objc_msgSend(v18, sel_invalidate);
  sub_1853B7020(v2 + 104, (uint64_t)v27, &qword_1E8FAF480);
  sub_1856373E0((uint64_t)v27);
  sub_18588D7D8((uint64_t)v28, (uint64_t)v27);
  sub_18588D918((uint64_t)v27);
  return sub_18588C8BC((uint64_t)v28);
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_18588D7D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for UIControlPointerHoverStyleDriver(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  int v5 = *(unsigned __int8 *)(a2 + 96);
  if (v5 == 255)
  {
    long long v13 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v13;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  }
  else
  {
    uint64_t v6 = *(void **)(a2 + 40);
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v8 = *(void *)(a2 + 56);
    uint64_t v9 = *(void *)(a2 + 64);
    uint64_t v10 = *(void *)(a2 + 72);
    uint64_t v11 = *(void *)(a2 + 80);
    uint64_t v12 = *(void *)(a2 + 88);
    sub_185636AFC(v6, v7, v8, v9, v10, v11, v12, *(unsigned char *)(a2 + 96));
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x478], 8) = v7;
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v11;
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x478], 8) = v12;
    *(unsigned char *)(a1 + 96) = v5;
  }
  swift_unknownObjectWeakCopyInit();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t sub_18588D918(uint64_t a1)
{
  sub_1853B7020(a1, (uint64_t)&v3, &qword_1E8FAF2F8);
  if (v4)
  {
    *((void *)&v6 + 1) = &type metadata for UIControlPointerHoverStyleDriver;
    uint64_t v7 = &off_1ED0BA5D0;
    *(void *)&long long v5 = swift_allocObject();
    sub_18588D9D0(&v3, v5 + 16);
  }
  else
  {
    sub_1853B93B8((uint64_t)&v3, &qword_1E8FAF2F8);
    long long v5 = 0u;
    long long v6 = 0u;
    uint64_t v7 = 0;
  }
  sub_18588DA3C((uint64_t)&v5, (uint64_t)&type metadata for UIControlPointerHoverStyleDriver);
  return sub_1853B93B8(a1, &qword_1E8FAF2F8);
}

uint64_t sub_18588D9D0(long long *a1, uint64_t a2)
{
  long long v4 = *a1;
  long long v5 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  long long v6 = *(long long *)((char *)a1 + 40);
  long long v7 = *(long long *)((char *)a1 + 56);
  long long v8 = *(long long *)((char *)a1 + 72);
  *(_OWORD *)(a2 + 81) = *(long long *)((char *)a1 + 81);
  *(_OWORD *)(a2 + 72) = v8;
  *(_OWORD *)(a2 + 56) = v7;
  *(_OWORD *)(a2 + 40) = v6;
  swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(a2 + 112) = *((unsigned char *)a1 + 112);
  return a2;
}

uint64_t sub_18588DA3C(uint64_t a1, uint64_t a2)
{
  long long v3 = v2;
  if (*(void *)(a1 + 24))
  {
    sub_1854B1F20((long long *)a1, (uint64_t)v14);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_18588DB58(v14, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1853B93B8(a1, &qword_1E8FB2350);
    unint64_t v7 = sub_1854AB470(a2);
    if (v8)
    {
      unint64_t v9 = v7;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      uint64_t *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_1859BE410();
        uint64_t v11 = v13;
      }
      sub_1854B1F20((long long *)(*(void *)(v11 + 56) + 40 * v9), (uint64_t)v14);
      sub_1859BA830(v9, v11);
      uint64_t *v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
    }
    return sub_1853B93B8((uint64_t)v14, &qword_1E8FB2350);
  }
}

uint64_t sub_18588DB58(long long *a1, uint64_t a2, char a3)
{
  long long v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_1854AB470(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1859BE410();
      goto LABEL_7;
    }
    sub_18588DD20(v13, a3 & 1);
    unint64_t v19 = sub_1854AB470(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = sub_186A1F93C();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 40 * v10;
    __swift_destroy_boxed_opaque_existential_0Tm(v17);
    return sub_1854B1F20(a1, v17);
  }
LABEL_13:
  return sub_18588DD08(v10, a2, (uint64_t)a1, v16);
}

uint64_t sub_18588DC98(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = a5(a3, a4[7] + 40 * a1);
  uint64_t v7 = a4[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a4[2] = v9;
  }
  return result;
}

uint64_t sub_18588DD08(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_18588DC98(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_1854B1F20);
}

uint64_t sub_18588DD20(uint64_t a1, char a2)
{
  long long v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF300);
  uint64_t result = sub_186A1F6AC();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if (a2)
              {
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 >= 64) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      uint64_t v21 = (long long *)(*(void *)(v5 + 56) + 40 * v16);
      if (a2) {
        sub_1854B1F20(v21, (uint64_t)v31);
      }
      else {
        sub_1854B1F38((uint64_t)v21, (uint64_t)v31);
      }
      uint64_t result = sub_186A1F9DC();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      uint64_t result = sub_1854B1F20(v31, *(void *)(v7 + 56) + 40 * v14);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

void ___pasteboardCacheQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit.pasteboard.cache-queue", 0);
  uint64_t v1 = (void *)qword_1EB25C9E0;
  qword_1EB25C9E0 = (uint64_t)v0;
}

void ___notificationStateQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit.pasteboardNotificationStateQueue", 0);
  uint64_t v1 = (void *)qword_1EB25CA00;
  qword_1EB25CA00 = (uint64_t)v0;
}

void sub_185890508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_185890E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *CoreHapticsLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!CoreHapticsLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreHapticsLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52EAEB0;
    uint64_t v6 = 0;
    CoreHapticsLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  dispatch_queue_t v0 = (void *)CoreHapticsLibraryCore_frameworkLibrary;
  if (!CoreHapticsLibraryCore_frameworkLibrary)
  {
    dispatch_queue_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v3 = [NSString stringWithUTF8String:"void *CoreHapticsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackCoreHapticsEngineUtilities.h", 18, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *CoreHapticsLibrary_0()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!CoreHapticsLibraryCore_frameworkLibrary_0)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreHapticsLibraryCore_block_invoke_0;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52ECD50;
    uint64_t v6 = 0;
    CoreHapticsLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  dispatch_queue_t v0 = (void *)CoreHapticsLibraryCore_frameworkLibrary_0;
  if (!CoreHapticsLibraryCore_frameworkLibrary_0)
  {
    dispatch_queue_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v3 = [NSString stringWithUTF8String:"void *CoreHapticsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackCoreHapticsEngineUtilities.h", 18, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void *CoreHapticsLibrary_1()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!CoreHapticsLibraryCore_frameworkLibrary_1)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __CoreHapticsLibraryCore_block_invoke_2;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E52ED920;
    uint64_t v6 = 0;
    CoreHapticsLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  dispatch_queue_t v0 = (void *)CoreHapticsLibraryCore_frameworkLibrary_1;
  if (!CoreHapticsLibraryCore_frameworkLibrary_1)
  {
    dispatch_queue_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v3 = [NSString stringWithUTF8String:"void *CoreHapticsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackCoreHapticsEngineUtilities.h", 18, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void getCHHapticEngineOptionKeyLocality()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  dispatch_queue_t v0 = (void **)getCHHapticEngineOptionKeyLocalitySymbolLoc_ptr;
  uint64_t v9 = getCHHapticEngineOptionKeyLocalitySymbolLoc_ptr;
  if (!getCHHapticEngineOptionKeyLocalitySymbolLoc_ptr)
  {
    uint64_t v1 = CoreHapticsLibrary_1();
    void v7[3] = (uint64_t)dlsym(v1, "CHHapticEngineOptionKeyLocality");
    getCHHapticEngineOptionKeyLocalitySymbolLoc_ptr = v7[3];
    dispatch_queue_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    long long v4 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"CHHapticEngineOptionKey getCHHapticEngineOptionKeyLocality(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 28, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1858913C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCHHapticEngineClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  dispatch_queue_t v0 = (void *)getCHHapticEngineClass_softClass;
  uint64_t v7 = getCHHapticEngineClass_softClass;
  if (!getCHHapticEngineClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getCHHapticEngineClass_block_invoke_0;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getCHHapticEngineClass_block_invoke_0((uint64_t)v3);
    dispatch_queue_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1858914A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1858915C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCHHapticEngineClass_block_invoke(uint64_t a1)
{
  CoreHapticsLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CHHapticEngine");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB260200 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCHHapticEngineClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackCoreHapticsEngineUtilities.h", 20, @"Unable to find class %s", "CHHapticEngine");

    __break(1u);
  }
}

void __getCHHapticEngineClass_block_invoke_0(uint64_t a1)
{
  CoreHapticsLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CHHapticEngine");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCHHapticEngineClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCHHapticEngineClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackCoreHapticsEngineUtilities.h", 20, @"Unable to find class %s", "CHHapticEngine");

    __break(1u);
  }
}

Class __getCHHapticEngineClass_block_invoke_1(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25D830)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __CoreHapticsLibraryCore_block_invoke_3;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52EDA40;
    uint64_t v8 = 0;
    qword_1EB25D830 = _sl_dlopen();
  }
  if (!qword_1EB25D830)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *CoreHapticsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIFeedbackCoreHapticsEngineUtilities.h", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CHHapticEngine");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getCHHapticEngineClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 20, @"Unable to find class %s", "CHHapticEngine");

LABEL_10:
    __break(1u);
  }
  qword_1EB25D828 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _UIApplicationIsAccountBased()
{
  if (qword_1EB264BC0 != -1) {
    dispatch_once(&qword_1EB264BC0, &__block_literal_global_610);
  }
  return _MergedGlobals_1295;
}

uint64_t _UIBuiltinTraitStoragePerformActionWithValueForTraitNamed(uint64_t a1, __CFString *a2, uint64_t a3)
{
  if (@"_UITraitNameUserInterfaceIdiom" == a2)
  {
    if (*(void *)a1 == -1) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v6);
    if ((void *)v6 != v9)
    {
      if (v9) {
        uint64_t v10 = [v9 integerValue];
      }
      else {
        uint64_t v10 = -1;
      }
      *(void *)a1 = v10;
    }
  }
  else if (@"_UITraitNameDisplayScale" == a2)
  {
    if (*(double *)(a1 + 8) == 0.0) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = objc_msgSend(NSNumber, "numberWithDouble:");
    }
    int64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v7);
    if ((void *)v7 != v12)
    {
      if (v12) {
        [v12 doubleValue];
      }
      else {
        uint64_t v13 = 0;
      }
      *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v13;
    }
  }
  else if (@"_UITraitNameDisplayGamut" == a2)
  {
    if (*(void *)(a1 + 16) == -1) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    unint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v8);
    if ((void *)v8 != v15)
    {
      if (v15) {
        uint64_t v16 = [v15 integerValue];
      }
      else {
        uint64_t v16 = -1;
      }
      *(void *)(a1 + 16) = v16;
    }
  }
  else if (@"_UITraitNameHorizontalSizeClass" == a2)
  {
    if (*(void *)(a1 + 56)) {
      uint64_t v11 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v11);
    if ((void *)v11 != v18)
    {
      if (v18) {
        unint64_t v18 = (void *)[v18 integerValue];
      }
      *(void *)(a1 + 56) = v18;
    }
  }
  else if (@"_UITraitNameVerticalSizeClass" == a2)
  {
    if (*(void *)(a1 + 64)) {
      uint64_t v14 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v14);
    if ((void *)v14 != v20)
    {
      if (v20) {
        uint64_t v20 = (void *)[v20 integerValue];
      }
      *(void *)(a1 + 64) = v20;
    }
  }
  else if (@"_UITraitNameTouchLevel" == a2)
  {
    if (*(void *)(a1 + 24) == -1) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v17);
    if ((void *)v17 != v22)
    {
      if (v22) {
        uint64_t v23 = [v22 integerValue];
      }
      else {
        uint64_t v23 = -1;
      }
      *(void *)(a1 + 24) = v23;
    }
  }
  else if (@"_UITraitNameInteractionModel" == a2)
  {
    if (*(void *)(a1 + 32)) {
      uint64_t v19 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:");
    }
    else {
      uint64_t v19 = 0;
    }
    char v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v19);
    if ((void *)v19 != v25)
    {
      if (v25) {
        char v25 = (void *)[v25 unsignedIntegerValue];
      }
      *(void *)(a1 + 32) = v25;
    }
  }
  else if (@"_UITraitNamePrimaryInteractionModel" == a2)
  {
    if (*(void *)(a1 + 40)) {
      uint64_t v21 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:");
    }
    else {
      uint64_t v21 = 0;
    }
    BOOL v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v21);
    if ((void *)v21 != v27)
    {
      if (v27) {
        BOOL v27 = (void *)[v27 unsignedIntegerValue];
      }
      *(void *)(a1 + 40) = v27;
    }
  }
  else if (@"_UITraitNameArtworkSubtype" == a2)
  {
    if (*(void *)(a1 + 48)) {
      uint64_t v24 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v29 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v24);
    if ((void *)v24 != v29)
    {
      if (v29) {
        uint64_t v29 = (void *)[v29 integerValue];
      }
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x478], 8) = v29;
    }
  }
  else if (@"_UITraitNameUserInterfaceStyle" == a2)
  {
    if (*(void *)(a1 + 72)) {
      uint64_t v26 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v26);
    if ((void *)v26 != v31)
    {
      if (v31) {
        uint64_t v31 = (void *)[v31 integerValue];
      }
      *(void *)(a1 + 72) = v31;
    }
  }
  else if (@"_UITraitNameUserInterfaceLayoutDirection" == a2)
  {
    if (*(void *)(a1 + 80) == -1) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v28);
    if ((void *)v28 != v33)
    {
      if (v33) {
        uint64_t v34 = [v33 integerValue];
      }
      else {
        uint64_t v34 = -1;
      }
      *(void *)(a1 + 80) = v34;
    }
  }
  else if (@"_UITraitNameForceTouchCapability" == a2)
  {
    if (*(void *)(a1 + 88)) {
      uint64_t v30 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    else {
      uint64_t v30 = 0;
    }
    char v36 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v30);
    if ((void *)v30 != v36)
    {
      if (v36) {
        char v36 = (void *)[v36 integerValue];
      }
      *(void *)(a1 + 8_Block_object_dispose(&STACK[0x478], 8) = v36;
    }
  }
  else if (@"_UITraitNamePreferredContentSizeCategory" == a2)
  {
    if (*(void *)(a1 + 96)) {
      uint64_t v32 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    else {
      uint64_t v32 = 0;
    }
    unsigned __int8 v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v32);
    if ((void *)v32 != v38)
    {
      if (v38) {
        unsigned __int8 v38 = (void *)[v38 integerValue];
      }
      *(void *)(a1 + 96) = v38;
    }
  }
  else if (@"_UITraitNameDisplayCornerRadius" == a2)
  {
    if (*(double *)(a1 + 104) == -1.0) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = objc_msgSend(NSNumber, "numberWithDouble:");
    }
    long long v40 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v35);
    if ((void *)v35 != v40)
    {
      if (v40) {
        [v40 doubleValue];
      }
      else {
        double v41 = -1.0;
      }
      *(double *)(a1 + 104) = v41;
    }
  }
  else if (@"_UITraitNameLegibilityWeight" == a2)
  {
    if (*(void *)(a1 + 112) == -1) {
      uint64_t v37 = 0;
    }
    else {
      uint64_t v37 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v37);
    if ((void *)v37 != v43)
    {
      if (v43) {
        uint64_t v44 = [v43 integerValue];
      }
      else {
        uint64_t v44 = -1;
      }
      *(void *)(a1 + 112) = v44;
    }
  }
  else if (@"_UITraitNameSemanticContext" == a2)
  {
    if (*(void *)(a1 + 120)) {
      uint64_t v39 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    else {
      uint64_t v39 = 0;
    }
    long long v46 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v39);
    if ((void *)v39 != v46)
    {
      if (v46) {
        long long v46 = (void *)[v46 integerValue];
      }
      *(void *)(a1 + 120) = v46;
    }
  }
  else if (@"_UITraitNamePresentationSemanticContext" == a2)
  {
    if (*(void *)(a1 + 128)) {
      uint64_t v42 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    else {
      uint64_t v42 = 0;
    }
    id v48 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v42);
    if ((void *)v42 != v48)
    {
      if (v48) {
        id v48 = (void *)[v48 integerValue];
      }
      *(void *)(a1 + 12_Block_object_dispose(&STACK[0x478], 8) = v48;
    }
  }
  else if (@"_UITraitNameSplitViewControllerContext" == a2)
  {
    if (*(void *)(a1 + 136) == -1) {
      uint64_t v45 = 0;
    }
    else {
      uint64_t v45 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    uint64_t v50 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v45);
    if ((void *)v45 != v50)
    {
      if (v50) {
        uint64_t v51 = [v50 integerValue];
      }
      else {
        uint64_t v51 = -1;
      }
      *(void *)(a1 + 136) = v51;
    }
  }
  else if (@"_UITraitNameAccessibilityContrast" == a2)
  {
    if (*(void *)(a1 + 144) == -1) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    unint64_t v53 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v47);
    if ((void *)v47 != v53)
    {
      if (v53) {
        uint64_t v54 = [v53 integerValue];
      }
      else {
        uint64_t v54 = -1;
      }
      *(void *)(a1 + 144) = v54;
    }
  }
  else if (@"_UITraitNameUserInterfaceLevel" == a2)
  {
    if (*(void *)(a1 + 152) == -1) {
      uint64_t v49 = 0;
    }
    else {
      uint64_t v49 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    uint64_t v56 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v49);
    if ((void *)v49 != v56)
    {
      if (v56) {
        uint64_t v57 = [v56 integerValue];
      }
      else {
        uint64_t v57 = -1;
      }
      *(void *)(a1 + 152) = v57;
    }
  }
  else if (@"_UITraitNameVibrancy" == a2)
  {
    if (*(void *)(a1 + 160) == -1) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    uint64_t v59 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v52);
    if ((void *)v52 != v59)
    {
      if (v59) {
        uint64_t v60 = [v59 integerValue];
      }
      else {
        uint64_t v60 = -1;
      }
      *(void *)(a1 + 160) = v60;
    }
  }
  else if (@"_UITraitNameUserInterfaceRenderingMode" == a2)
  {
    if (*(void *)(a1 + 168)) {
      uint64_t v55 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v62 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v55);
    if ((void *)v55 != v62)
    {
      if (v62) {
        uint64_t v62 = (void *)[v62 integerValue];
      }
      *(void *)(a1 + 16_Block_object_dispose(&STACK[0x478], 8) = v62;
    }
  }
  else if (@"_UITraitNameActiveAppearance" == a2)
  {
    if (*(void *)(a1 + 176) == -1) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    unint64_t v64 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v58);
    if ((void *)v58 != v64)
    {
      if (v64) {
        uint64_t v65 = [v64 integerValue];
      }
      else {
        uint64_t v65 = -1;
      }
      *(void *)(a1 + 176) = v65;
    }
  }
  else if (@"_UITraitNameFocusSystemState" == a2)
  {
    if (*(void *)(a1 + 184) == -1) {
      uint64_t v61 = 0;
    }
    else {
      uint64_t v61 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    uint64_t v67 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v61);
    if ((void *)v61 != v67)
    {
      if (v67) {
        uint64_t v68 = [v67 integerValue];
      }
      else {
        uint64_t v68 = -1;
      }
      *(void *)(a1 + 184) = v68;
    }
  }
  else if (@"_UITraitNameSelectionIsKey" == a2)
  {
    if (*(void *)(a1 + 192) == -1) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    uint64_t v70 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v63);
    if ((void *)v63 != v70)
    {
      if (v70) {
        uint64_t v71 = [v70 integerValue];
      }
      else {
        uint64_t v71 = -1;
      }
      *(void *)(a1 + 192) = v71;
    }
  }
  else if (@"_UITraitNameBacklightLuminance" == a2)
  {
    if (*(void *)(a1 + 200) == -1) {
      uint64_t v66 = 0;
    }
    else {
      uint64_t v66 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    uint64_t v72 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v66);
    if ((void *)v66 != v72)
    {
      if (v72) {
        uint64_t v73 = [v72 integerValue];
      }
      else {
        uint64_t v73 = -1;
      }
      *(void *)(a1 + 200) = v73;
    }
  }
  else
  {
    if (@"_UITraitNameToolbarItemPresentationSize" != a2) {
      return 0;
    }
    if (*(void *)(a1 + 208) == -1) {
      uint64_t v69 = 0;
    }
    else {
      uint64_t v69 = objc_msgSend(NSNumber, "numberWithInteger:");
    }
    int64_t v74 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v69);
    if ((void *)v69 != v74)
    {
      if (v74) {
        uint64_t v75 = [v74 integerValue];
      }
      else {
        uint64_t v75 = -1;
      }
      *(void *)(a1 + 20_Block_object_dispose(&STACK[0x478], 8) = v75;
    }
  }
  return 1;
}

uint64_t ___quantizePositionsInAnimation_block_invoke(uint64_t a1, void *a2)
{
  return _animationIsEligibleForQuantization(a2);
}

void sub_18589478C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double UIRectInsetEdges(char a1, double a2, double a3, double a4, double a5, double a6)
{
  if ((a1 & 2) != 0) {
    double v6 = a6;
  }
  else {
    double v6 = -0.0;
  }
  return a2 + v6;
}

id _colorsByThemeKeysystemGray3Color()
{
  v11[4] = *MEMORY[0x1E4F143B8];
  dispatch_queue_t v0 = _UIThemeKeyFromTraitValues(-1, 0, 0, 0, 0, 0);
  v10[0] = v0;
  id v1 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.780392157 green:0.780392157 blue:0.8 alpha:1.0];
  v11[0] = v1;
  uint64_t v2 = _UIThemeKeyFromTraitValues(-1, 0, 1, 0, 0, 0);
  v10[1] = v2;
  id v3 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.682352941 green:0.682352941 blue:0.698039216 alpha:1.0];
  v11[1] = v3;
  uint64_t v4 = _UIThemeKeyFromTraitValues(-1, 2, 0, 0, 0, 0);
  void v10[2] = v4;
  long long v5 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.282352941 green:0.282352941 blue:0.290196078 alpha:1.0];
  _OWORD v11[2] = v5;
  double v6 = _UIThemeKeyFromTraitValues(-1, 2, 1, 0, 0, 0);
  void v10[3] = v6;
  uint64_t v7 = [(UIDeviceRGBColor *)[UICachedDeviceRGBColor alloc] initWithRed:0.329411765 green:0.329411765 blue:0.337254902 alpha:1.0];
  void v11[3] = v7;
  uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:4];

  return v8;
}

void sub_185896CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __UIColorBreakForOutOfRangeColorComponents_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Graphics", &_UIInternalPreference_UIViewDebugSignposts_block_invoke___s_category_7)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315138;
    uint64_t v5 = v3;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "UIColor created with component values far outside the expected range. Set a breakpoint on %s to debug. This message will only be logged once.", (uint8_t *)&v4, 0xCu);
  }
}

void sub_185897850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIDescriptionBuilderLightDescription(void *a1)
{
  id v1 = NSString;
  id v2 = a1;
  uint64_t v3 = objc_msgSend(v1, "stringWithFormat:", @"<%s: %p>", object_getClassName(v2), v2);

  return v3;
}

void ___shouldOverretainBackgroundColor_block_invoke()
{
  char v0 = dyld_program_sdk_at_least();
  byte_1EB25C785 = v0 ^ 1;
  if ((v0 & 1) == 0)
  {
    _UIMainBundleIdentifier();
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    byte_1EB25C785 = [v1 isEqualToString:@"com.yunatechnology.awesomecalendar"];
  }
}

uint64_t _UIResponderRequiresTextInput(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    if (objc_opt_respondsToSelector()) {
      uint64_t v2 = [v1 _requiresKeyboardWhenFirstResponder];
    }
    else {
      uint64_t v2 = [v1 conformsToProtocol:&unk_1ED42F658];
    }
    uint64_t v3 = v2;
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void _incrementRestorationMarkerCount(void *a1, void *a2, char a3)
{
  id v5 = a1;
  id v6 = a2;
  BOOL v13 = 0;
  id v7 = v5;
  objc_sync_enter(v7);
  if (qword_1EB25B890 > 0 || [v7 _isNormalRestorationInProgress])
  {
    if (a3 & 1) != 0 || ([v7 _isRestorationExtended])
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v9 = _getRestorationInProgressDictionary(v6, 0, &v13);
      uint64_t v8 = v9;
      if (v9)
      {
        uint64_t v10 = [v9 objectForKey:@"kRestorationExtended"];
        char v11 = [v10 BOOLValue];

        if ((v11 & 1) == 0)
        {
          int64_t v12 = [NSNumber numberWithBool:1];
          [v8 setObject:v12 forKey:@"kRestorationExtended"];

          _updateRestorationInProgressFile(v6, v8);
        }
      }
      [v7 _setRestorationExtended:1];
    }
    ++qword_1EB25B890;
    objc_sync_exit(v7);
  }
  else
  {
    objc_sync_exit(v7);

    NSLog(&cfstr_WarningExtends.isa);
  }
}

void sub_18589BA60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _UIScrollAccessorySemanticEdge(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (a1 == 5 || a1 == 3) {
    a1 = (a1 == 5) ^ [v3 _shouldReverseLayoutDirectionConsideringFlippedHorizontalAxis];
  }

  return a1;
}

void sub_18589CCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18589CE6C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

Class __getCMMotionManagerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB260EC8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __CoreMotionLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52F2290;
    uint64_t v8 = 0;
    qword_1EB260EC8 = _sl_dlopen();
  }
  if (!qword_1EB260EC8)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    int v4 = [NSString stringWithUTF8String:"void *CoreMotionLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIAccelerometer.m", 27, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CMMotionManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getCMMotionManagerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIAccelerometer.m", 28, @"Unable to find class %s", "CMMotionManager");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1096 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCMMotionManagerClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25D1B0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __CoreMotionLibraryCore_block_invoke_0;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52FEF40;
    uint64_t v8 = 0;
    qword_1EB25D1B0 = _sl_dlopen();
  }
  if (!qword_1EB25D1B0)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    int v4 = [NSString stringWithUTF8String:"void *CoreMotionLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIMotionEffectCoreMotionEventProvider.m", 29, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CMMotionManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getCMMotionManagerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIMotionEffectCoreMotionEventProvider.m", 30, @"Unable to find class %s", "CMMotionManager");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_9_3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

double _UIGetUIMotionEffectMotionUpdateFrequency()
{
  if (!_UIInternalPreferenceUsesDefault_1((int *)&_UIInternalPreference_UIMotionEffectMotionUpdateFrequency, @"UIMotionEffectMotionUpdateFrequency"))return *(double *)&qword_1E8FD5380; {
  char v0 = +[UIDevice currentDevice];
  }
  uint64_t v1 = [v0 userInterfaceIdiom];

  double result = 60.0;
  if ((v1 & 0xFFFFFFFFFFFFFFFBLL) == 1) {
    return 90.0;
  }
  return result;
}

void ___serverConnection_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F881F8] defaultConnection];
  uint64_t v1 = (void *)qword_1EB25C9F0;
  qword_1EB25C9F0 = v0;

  uint64_t v2 = [MEMORY[0x1E4F28EB8] defaultCenter];
  uint64_t v3 = *MEMORY[0x1E4F88240];
  int v4 = [MEMORY[0x1E4F28F08] mainQueue];
  id v5 = (id)[v2 addObserverForName:v3 object:0 queue:v4 usingBlock:&__block_literal_global_325_2];

  id v6 = _notificationStateQueue();
  dispatch_sync(v6, &__block_literal_global_329_1);

  long long v7 = [MEMORY[0x1E4F28EB8] defaultCenter];
  id v8 = (id)[v7 addObserverForName:@"UIApplicationProtectedDataWillBecomeUnavailable" object:0 queue:0 usingBlock:&__block_literal_global_331_1];

  id v10 = [MEMORY[0x1E4F28EB8] defaultCenter];
  id v9 = (id)[v10 addObserverForName:@"UIApplicationProtectedDataDidBecomeAvailable" object:0 queue:0 usingBlock:&__block_literal_global_335_1];
}

id _notificationStateQueue()
{
  if (qword_1EB25CA08 != -1) {
    dispatch_once(&qword_1EB25CA08, &__block_literal_global_341_2);
  }
  uint64_t v0 = (void *)qword_1EB25CA00;
  return v0;
}

void sub_18589DE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getAFAnalyticsClass_block_invoke(uint64_t a1)
{
  AssistantServicesLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFAnalytics");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB2619F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAFAnalyticsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationConnection.m", 55, @"Unable to find class %s", "AFAnalytics");

    __break(1u);
  }
}

void __getAFAnalyticsClass_block_invoke_0(uint64_t a1)
{
  AssistantServicesLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AFAnalytics");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAFAnalyticsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAFAnalyticsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationController.m", 229, @"Unable to find class %s", "AFAnalytics");

    __break(1u);
  }
}

CGPoint CGPointFromString(NSString *string)
{
  uint64_t v1 = string;
  double DoubleValue = *MEMORY[0x1E4F1DAD8];
  double v3 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  if ([(NSString *)v1 length] >= 5)
  {
    CFStringRef v8 = 0;
    CFStringRef str = 0;
    if (SplitBracesAndComma(v1, &str, &v8))
    {
      CFStringRef v4 = str;
      double DoubleValue = CFStringGetDoubleValue(str);
      CFStringRef v5 = v8;
      double v3 = CFStringGetDoubleValue(v8);
      CFRelease(v4);
      CFRelease(v5);
    }
  }

  double v6 = DoubleValue;
  double v7 = v3;
  result.CGFloat y = v7;
  result.CGFloat x = v6;
  return result;
}

void ___isSystemGestureForDelegate_block_invoke()
{
  id v3 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
  uint64_t v0 = _UIKitBundle();
  uint64_t v1 = [v0 bundlePath];
  uint64_t v2 = [v3 bundlePath];
  _MergedGlobals_15_2 = [v1 isEqualToString:v2] ^ 1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

id UITextAnimationNamesForDomain(void *a1)
{
  id v1 = a1;
  _SwiftUITextAnimationProviderClass();
  id v3 = v2;
  if (!v2 || (objc_opt_respondsToSelector() & 1) == 0)
  {
    CFStringRef v4 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v5 = *MEMORY[0x1E4F1C3A8];
    double v6 = [NSString stringWithUTF8String:"NSArray<NSString *> * _Nonnull UITextAnimationNamesForDomain(NSString * _Nullable __strong)"];
    [v4 raise:v5, @"[SwiftUI] Missing SPI: %@.", v6 format];
  }
  double v7 = [v3 animationNamesForDomain:v1];

  return v7;
}

void _SwiftUITextAnimationProviderClass()
{
  uint64_t v6 = 0;
  double v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void (*)(void))_MergedGlobals_1042;
  id v9 = _MergedGlobals_1042;
  if (!_MergedGlobals_1042)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __getSwiftUITextAnimationProviderClassSymbolLoc_block_invoke;
    v5[3] = &unk_1E52D9900;
    void v5[4] = &v6;
    __getSwiftUITextAnimationProviderClassSymbolLoc_block_invoke(v5);
    uint64_t v0 = (void (*)(void))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    id v1 = v0();
    id v2 = v1;
  }
  else
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    CFStringRef v4 = [NSString stringWithUTF8String:"Class<NSTextAnimationProvider> _SwiftUITextAnimationProviderClass(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UITextAnimationsBridge.m", 23, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1858A4F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getSwiftUITextAnimationProviderClassSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB260580)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = __SwiftUILibraryCore_block_invoke;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    void v5[5] = v5;
    long long v6 = xmmword_1E52EE388;
    uint64_t v7 = 0;
    qword_1EB260580 = _sl_dlopen();
  }
  id v2 = (void *)qword_1EB260580;
  if (!qword_1EB260580)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *SwiftUILibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UITextAnimationsBridge.m", 22, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "SwiftUITextAnimationProviderClass");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  _MergedGlobals_1042 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

void _UIRTreeContainerNode<_UICollectionViewRTreeElement>::removeElementsIntersecting(int64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v32 = a2[1];
  float64x2_t v33 = *a2;
  a1[8].i64[0] = 0;
  a1[8].i64[1] = 0;
  a1[7] = vdupq_n_s64(0x7FF8000000000000uLL);
  unint64_t v3 = a1[6].i64[0] - a1[5].i64[1];
  if ((uint64_t)v3 >= 1)
  {
    float64x2_t v31 = vaddq_f64(v33, v32);
    unint64_t v4 = (v3 >> 5) + 1;
    uint64_t v5 = 40 * (v3 >> 5);
    uint64_t v6 = 32 * (v3 >> 5);
    uint64_t v7 = -32 * (v3 >> 5);
    do
    {
      uint64_t v8 = a1[5].i64[1];
      id v9 = (const void *)(v8 + v6);
      int64x2_t v10 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vcgeq_f64(v33, vaddq_f64(*(float64x2_t *)(v8 + v6 - 32), *(float64x2_t *)(v8 + v6 - 16))), (int8x16_t)vcgtq_f64(v33, *(float64x2_t *)(v8 + v6 - 32))), vandq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v8 + v6 - 32), v33), (int8x16_t)vcgeq_f64(*(float64x2_t *)(v8 + v6 - 32), v31)));
      if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v10, 1), (int8x16_t)v10).u64[0] & 0x8000000000000000) == 0)
      {
        char v11 = (const void *)a1[6].i64[0];
        uint64_t v12 = (uint64_t)v11 + v7 - v8;
        if (v9 != v11) {
          memmove((void *)(v8 + v6 - 32), v9, (size_t)v11 + v7 - v8);
        }
        a1[6].i64[0] = v8 + v6 + (v12 & 0xFFFFFFFFFFFFFFE0) - 32;
        uint64_t v13 = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,_UICollectionViewRTreeElement *,_UICollectionViewRTreeElement *,_UICollectionViewRTreeElement *,0>(a1[4].i64[0] + v5, a1[4].i64[1], a1[4].i64[0] + v5 - 40);
        std::vector<_UICollectionViewRTreeElement>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1[4].i64, v13);
      }
      --v4;
      v5 -= 40;
      v6 -= 32;
      v7 += 32;
    }
    while (v4 > 1);
  }
  uint64_t v14 = a1[3].i64[0] - a1[2].i64[1];
  if (v14 >= 1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = (unint64_t)v14 >> 4;
    uint64_t v18 = 16 * ((unint64_t)v14 >> 4);
    do
    {
      uint64_t v19 = *(void **)(a1[2].i64[1] + 16 * (v17 - 1));
      v34[0] = v33;
      v34[1] = v32;
      _UIRTreeContainerNode<_UICollectionViewRTreeElement>::removeElementsIntersecting(v19, v34);
      if (v19[9] == v19[8] && v19[6] == v19[5])
      {
        uint64_t v20 = a1[2].i64[1];
        uint64_t v21 = a1[3].i64[0];
        uint64_t v22 = v20 + 16 * v17;
        if (v22 == v21)
        {
          uint64_t v28 = v20 + 16 * (v17 - 1);
        }
        else
        {
          uint64_t v23 = v20 + v16;
          uint64_t v24 = v15 - v20;
          do
          {
            char v25 = (void *)(v23 + v18);
            long long v26 = *(_OWORD *)(v23 + v18);
            *char v25 = 0;
            v25[1] = 0;
            BOOL v27 = *(std::__shared_weak_count **)(v23 + v18 - 8);
            *((_OWORD *)v25 - 1) = v26;
            if (v27) {
              std::__shared_weak_count::__release_shared[abi:nn180100](v27);
            }
            v23 += 16;
            v24 -= 16;
          }
          while (v23 + v18 != v21);
          uint64_t v22 = a1[3].i64[0];
          uint64_t v28 = v18 - v24 - 16;
        }
        while (v22 != v28)
        {
          uint64_t v29 = *(std::__shared_weak_count **)(v22 - 8);
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:nn180100](v29);
          }
          v22 -= 16;
        }
        a1[3].i64[0] = v28;
      }
      v16 -= 16;
      v15 += 16;
    }
    while (v17-- > 1);
  }
}

void __UITextCheckerGrammarCheckingEnabled_block_invoke()
{
  id v3 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v0 = _UIMainBundleIdentifier();
  id v1 = [v3 objectForKey:@"UITextCheckerEnablePostEditingGrammarCheck"];

  if (v1)
  {
    char v2 = [v3 BOOLForKey:@"UITextCheckerEnablePostEditingGrammarCheck"];
LABEL_11:
    byte_1EB25D5EA = v2;
    goto LABEL_12;
  }
  if ((_os_feature_enabled_impl() & 1) != 0
    || ([v0 isEqualToString:@"com.apple.MobileSMS"] & 1) != 0
    || ([v0 isEqualToString:@"com.apple.mobilemail"] & 1) != 0
    || ([v0 isEqualToString:@"com.apple.mobilenotes"] & 1) != 0
    || ([v0 isEqualToString:@"com.apple.mobilesafari"] & 1) != 0
    || ([v0 isEqualToString:@"com.apple.UIKitester"] & 1) != 0
    || [v0 isEqualToString:@"com.apple.Typist"])
  {
    char v2 = 1;
    goto LABEL_11;
  }
LABEL_12:
}

void sub_1858AA724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1858AB3CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1858AB530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1858ABCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIConvertSceneRectToWindow(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11 = a1;
  uint64_t v12 = a2;
  -[UIWindow _fbsScene](v12);
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  if (v13 != v11)
  {
    if (v11)
    {
      uint64_t v14 = [v11 settings];
      [v14 frame];
      double v16 = v15;
      double v18 = v17;
      double v21 = _UIWindowConvertRectFromOrientationToOrientation([v14 interfaceOrientation], 1, a3, a4, a5, a6, v19, v20);
      a5 = v22;
      a6 = v23;
      a3 = v16 + v21;
      a4 = v18 + v24;
    }
    if (v13)
    {
      char v25 = [v13 settings];
      [v25 frame];
      a3 = _UIWindowConvertRectFromOrientationToOrientation(1, [v25 interfaceOrientation], a3 - v26, a4 - v27, a5, a6, v28, v29);
      a4 = v30;
      a5 = v31;
      a6 = v32;
    }
  }
  float64x2_t v33 = [v12 layer];
  objc_msgSend(v33, "convertRect:fromLayer:", 0, a3, a4, a5, a6);
  double v35 = v34;

  return v35;
}

void getCHHapticEventTypeHapticContinuous()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getCHHapticEventTypeHapticContinuousSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventTypeHapticContinuousSymbolLoc_ptr;
  if (!getCHHapticEventTypeHapticContinuousSymbolLoc_ptr)
  {
    id v1 = CoreHapticsLibrary_1();
    void v7[3] = (uint64_t)dlsym(v1, "CHHapticEventTypeHapticContinuous");
    getCHHapticEventTypeHapticContinuousSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    char v2 = *v0;
    id v3 = v2;
  }
  else
  {
    unint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"CHHapticEventType getCHHapticEventTypeHapticContinuous(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 41, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1858ACA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCHHapticEventTypeAudioCustom()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getCHHapticEventTypeAudioCustomSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventTypeAudioCustomSymbolLoc_ptr;
  if (!getCHHapticEventTypeAudioCustomSymbolLoc_ptr)
  {
    id v1 = CoreHapticsLibrary_1();
    void v7[3] = (uint64_t)dlsym(v1, "CHHapticEventTypeAudioCustom");
    getCHHapticEventTypeAudioCustomSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    char v2 = *v0;
    id v3 = v2;
  }
  else
  {
    unint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"CHHapticEventType getCHHapticEventTypeAudioCustom(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 43, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1858ACBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _telemetryOffsetChangeEvent(void *a1, void *a2, int a3, double a4, double a5, double a6)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  id v12 = a2;
  if ([v11 isTracking])
  {
    id v13 = @"Dragging";
  }
  else if ([v11 isDecelerating])
  {
    id v13 = @"Deceleration";
  }
  else if ([v11 isScrollAnimating])
  {
    id v13 = @"Animation";
  }
  else
  {
    id v13 = @"Direct";
  }
  double v14 = 0.5;
  if (a4 <= 0.5) {
    double v14 = a4;
  }
  if (a4 >= 0.004) {
    double v15 = v14;
  }
  else {
    double v15 = 0.004;
  }
  double v16 = sqrt(a5 * a5 + a6 * a6) / v15;
  if (a3)
  {
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("ScrollView", &_telemetryOffsetChangeEvent___s_category);
    double v18 = *(id *)(CategoryCachedImpl + 8);
    os_signpost_id_t v19 = os_signpost_id_make_with_pointer(*(os_log_t *)(CategoryCachedImpl + 8), v11);
    if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v20 = v19;
      if (os_signpost_enabled(v18))
      {
        *(_DWORD *)long long buf = 138545410;
        id v29 = v12;
        __int16 v30 = 2048;
        id v31 = v11;
        __int16 v32 = 2114;
        float64x2_t v33 = v13;
        __int16 v34 = 2048;
        double v35 = a5;
        __int16 v36 = 2048;
        double v37 = a6;
        __int16 v38 = 2048;
        double v39 = v15;
        __int16 v40 = 2048;
        double v41 = a5 / v15;
        __int16 v42 = 2048;
        double v43 = a6 / v15;
        __int16 v44 = 2048;
        double v45 = v16;
        _os_signpost_emit_with_name_impl(&dword_1853B0000, v18, OS_SIGNPOST_EVENT, v20, "OffsetChange", "bundleId=%{public}@, view=%p, reason=%{public}@, dx=%.03f, dy=%.03f, dt=%.03f, vx=%.03f, vy=%.03f, vs=%.03f", buf, 0x5Cu);
      }
    }
  }
  v27[0] = v12;
  v27[1] = v13;
  double v21 = objc_msgSend(NSNumber, "numberWithDouble:", a5 / v15, @"BundleId", @"Reason", @"Vx");
  v27[2] = v21;
  v26[3] = @"Vy";
  double v22 = [NSNumber numberWithDouble:a6 / v15];
  v27[3] = v22;
  v26[4] = @"Vs";
  double v23 = [NSNumber numberWithDouble:v16];
  v27[4] = v23;
  double v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v27 forKeys:v26 count:5];

  return v24;
}

char *keypath_get_selector_isForceFixedRateLinksEnabled()
{
  return sel_isForceFixedRateLinksEnabled;
}

id getCHHapticPatternClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCHHapticPatternClass_softClass;
  uint64_t v7 = getCHHapticPatternClass_softClass;
  if (!getCHHapticPatternClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getCHHapticPatternClass_block_invoke_1;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getCHHapticPatternClass_block_invoke_1((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1858B11A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCHHapticEventParameterIDAudioVolume()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getCHHapticEventParameterIDAudioVolumeSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventParameterIDAudioVolumeSymbolLoc_ptr;
  if (!getCHHapticEventParameterIDAudioVolumeSymbolLoc_ptr)
  {
    id v1 = CoreHapticsLibrary_1();
    void v7[3] = (uint64_t)dlsym(v1, "CHHapticEventParameterIDAudioVolume");
    getCHHapticEventParameterIDAudioVolumeSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    char v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"CHHapticEventParameterID getCHHapticEventParameterIDAudioVolume(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 57, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1858B130C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getCHHapticEventParameterIDAudioPitch()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getCHHapticEventParameterIDAudioPitchSymbolLoc_ptr;
  uint64_t v9 = getCHHapticEventParameterIDAudioPitchSymbolLoc_ptr;
  if (!getCHHapticEventParameterIDAudioPitchSymbolLoc_ptr)
  {
    id v1 = CoreHapticsLibrary_1();
    void v7[3] = (uint64_t)dlsym(v1, "CHHapticEventParameterIDAudioPitch");
    getCHHapticEventParameterIDAudioPitchSymbolLoc_ptr = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    char v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"CHHapticEventParameterID getCHHapticEventParameterIDAudioPitch(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 58, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1858B1474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCHHapticEventParameterClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCHHapticEventParameterClass_softClass;
  uint64_t v7 = getCHHapticEventParameterClass_softClass;
  if (!getCHHapticEventParameterClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getCHHapticEventParameterClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getCHHapticEventParameterClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1858B1558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getCHHapticEventClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCHHapticEventClass_softClass;
  uint64_t v7 = getCHHapticEventClass_softClass;
  if (!getCHHapticEventClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getCHHapticEventClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getCHHapticEventClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1858B163C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _logFilter(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___logFilter_block_invoke;
  void v7[3] = &unk_1E5304B10;
  id v8 = v3;
  uint64_t v9 = a1;
  id v4 = v3;
  uint64_t v5 = _Block_copy(v7);

  return v5;
}

id _captureUserActionData()
{
  uint64_t v0 = (void *)MEMORY[0x18C108260]();
  uint64_t v1 = mach_absolute_time();
  char v2 = [MEMORY[0x1E4F1CA60] dictionary];
  id v3 = +[UIScreen _carScreen];
  if (v3) {
    [(id)UIApp _keyWindowForScreen:v3];
  }
  else {
  id v4 = +[UIWindow _applicationKeyWindow];
  }
  uint64_t v5 = UIApp;
  uint64_t v6 = [v4 rootViewController];
  uint64_t v7 = -[UIApplication _topMostViewController:](v5, v6);

  id v8 = [v7 _existingView];
  uint64_t v9 = v8;
  if (v8)
  {
    id v10 = v8;
  }
  else
  {
    id v10 = [v7 view];
  }
  id v11 = v10;

  id v12 = -[UIViewController _userActionDescription](v7);
  [v2 setObject:v12 forKeyedSubscript:@"TopVC"];

  id v13 = -[UIView _userActionDescription:maxLevel:](v11, 1, 0x19u);
  [v2 setObject:v13 forKeyedSubscript:@"TopVCView"];

  double v14 = _UIMainBundleIdentifier();
  [v2 setObject:v14 forKeyedSubscript:@"BundleID"];

  double v15 = [MEMORY[0x1E4F28B50] mainBundle];
  double v16 = [v15 objectForInfoDictionaryKey:@"CFBundleDisplayName"];
  [v2 setObject:v16 forKeyedSubscript:@"DisplayName"];

  uint64_t v17 = mach_absolute_time();
  double v18 = [NSNumber numberWithDouble:_UIMediaDurationForMachDuration(v17 - v1) * 1000000.0];
  [v2 setObject:v18 forKeyedSubscript:@"TraversalTimeuSec"];

  uint64_t v23 = 0;
  os_signpost_id_t v19 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v2 options:0 error:&v23];
  if (!v19)
  {
    double v21 = [MEMORY[0x1E4F28B00] currentHandler];
    double v22 = [NSString stringWithUTF8String:"NSData *_captureUserActionData(void)"];
    [v21 handleFailureInFunction:v22 file:@"UIApplication.m" lineNumber:3739 description:@"Failed to serialize user activity information"];
  }
  return v19;
}

void __getCHHapticPatternClass_block_invoke(uint64_t a1)
{
  CoreHapticsLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CHHapticPattern");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB2601E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    char v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCHHapticPatternClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackCoreHapticsEngineUtilities.h", 21, @"Unable to find class %s", "CHHapticPattern");

    __break(1u);
  }
}

Class __getCHHapticPatternClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25C938)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __CoreHapticsLibraryCore_block_invoke_1;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E52ED3B0;
    uint64_t v8 = 0;
    qword_1EB25C938 = _sl_dlopen();
  }
  if (!qword_1EB25C938)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *CoreHapticsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIFeedbackCoreHapticsEngineUtilities.h", 18, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CHHapticPattern");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getCHHapticPatternClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackCoreHapticsEngineUtilities.h", 21, @"Unable to find class %s", "CHHapticPattern");

LABEL_10:
    __break(1u);
  }
  qword_1EB25C930 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getCHHapticPatternClass_block_invoke_1(uint64_t a1)
{
  CoreHapticsLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CHHapticPattern");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCHHapticPatternClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    char v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCHHapticPatternClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackCoreHapticsEngineUtilities.h", 21, @"Unable to find class %s", "CHHapticPattern");

    __break(1u);
  }
}

void __getCHHapticEventParameterClass_block_invoke(uint64_t a1)
{
  CoreHapticsLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CHHapticEventParameter");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCHHapticEventParameterClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    char v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCHHapticEventParameterClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackCoreHapticsEngineUtilities.h", 24, @"Unable to find class %s", "CHHapticEventParameter");

    __break(1u);
  }
}

void __getCHHapticEventClass_block_invoke(uint64_t a1)
{
  CoreHapticsLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CHHapticEvent");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCHHapticEventClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    char v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCHHapticEventClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIFeedbackCoreHapticsEngineUtilities.h", 22, @"Unable to find class %s", "CHHapticEvent");

    __break(1u);
  }
}

uint64_t std::__throw_bad_weak_ptr[abi:nn180100]()
{
  return _UIMediaDurationForMachDuration();
}

double _UIMediaDurationForMachDuration(uint64_t a1)
{
  if (qword_1EB2621B8 != -1) {
    dispatch_once(&qword_1EB2621B8, &__block_literal_global_46_4);
  }
  return (double)a1 / *(double *)&qword_1EB2621C0;
}

void UICollectionViewFlowLayoutBreakForInvalidSizes(uint64_t a1)
{
  if (!a1) {
    NSLog(&stru_1ED0F81C0.isa, v1, v2);
  }
}

uint64_t sub_1858B34A8(uint64_t a1, char a2)
{
  id v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAFCC0);
  uint64_t result = sub_186A1F6AC();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    __int16 v32 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v30;
              }
              id v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      unsigned int v21 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v17);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      uint64_t result = MEMORY[0x18C102800](*(void *)(v7 + 40), v21, 4);
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v15) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  uint64_t *v3 = v7;
  return result;
}

uint64_t static UIButton.Configuration.borderless()@<X0>(uint64_t *a1@<X8>)
{
  return sub_18558C480((SEL *)&selRef_borderlessButtonConfiguration, a1);
}

uint64_t sub_1858B3758(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1853B985C(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1858B37CC()
{
  uint64_t v0 = (char *)objc_msgSend(objc_allocWithZone((Class)UIShape), sel_init);
  uint64_t v1 = &v0[OBJC_IVAR___UIShape_value];
  uint64_t v2 = *(void **)&v0[OBJC_IVAR___UIShape_value];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR___UIShape_value + 8];
  uint64_t v4 = *(void *)&v0[OBJC_IVAR___UIShape_value + 16];
  uint64_t v5 = *(void *)&v0[OBJC_IVAR___UIShape_value + 24];
  uint64_t v6 = *(void *)&v0[OBJC_IVAR___UIShape_value + 32];
  uint64_t v7 = *(void *)&v0[OBJC_IVAR___UIShape_value + 40];
  uint64_t v8 = *(void *)&v0[OBJC_IVAR___UIShape_value + 48];
  *(void *)uint64_t v1 = 2;
  *(_OWORD *)(v1 + _Block_object_dispose(&STACK[0x478], 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  char v9 = v1[56];
  v1[56] = 6;
  uint64_t v10 = v0;
  sub_185636BB4(v2, v3, v4, v5, v6, v7, v8, v9);

  qword_1E8FAEE10 = (uint64_t)v10;
}

id sub_1858B3898()
{
  return objc_msgSend(*(id *)(v0 + 16), sel___swift_removeAllRetargetableAnimations_, 0);
}

void sub_1858B38AC()
{
  sub_1858B38B4(*(void **)(v0 + 16));
}

void sub_1858B38B4(void *a1)
{
  id v2 = objc_msgSend(a1, sel_layer);
  id v3 = objc_msgSend(v2, sel_context);

  if (!v3)
  {
    uint64_t v4 = self;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    void v8[4] = sub_1858B3898;
    v8[5] = v5;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 1107296256;
    void v8[2] = sub_1856A95EC;
    v8[3] = &block_descriptor_343_0;
    uint64_t v6 = _Block_copy(v8);
    id v7 = a1;
    swift_release();
    objc_msgSend(v4, sel__performWithoutRetargetingAnimations_, v6);
    _Block_release(v6);
  }
}

ValueMetadata *_s29AnimatablePropertyTransformerC17RunningProgressesV5EntryVMa()
{
  return &_s29AnimatablePropertyTransformerC17RunningProgressesV5EntryVN;
}

unint64_t sub_1858B3AA8()
{
  unint64_t result = qword_1E8FB0090;
  if (!qword_1E8FB0090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FB0090);
  }
  return result;
}

uint64_t sub_1858B3AFC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAFD50);
  swift_dynamicCast();
  a3(v6, a2);
  return swift_unknownObjectRelease();
}

uint64_t sub_1858B3B84()
{
  return sub_1854A5E7C((uint64_t (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double, double, double, double, uint64_t, char, unint64_t, _DWORD, uint64_t, uint64_t))sub_18549D74C);
}

uint64_t sub_1858B3B9C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 248);
  long long v5 = *(_OWORD *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 272);
  char v7 = *(unsigned char *)(v0 + 280);
  int v8 = *(_DWORD *)(v0 + 284);
  float v9 = *(float *)(v0 + 288);
  float32x4_t v10 = *(float32x4_t *)(v0 + 80);
  v19[2] = *(float32x4_t *)(v0 + 64);
  v19[3] = v10;
  float32x4_t v11 = *(float32x4_t *)(v0 + 112);
  v19[4] = *(float32x4_t *)(v0 + 96);
  float32x4_t v12 = *(float32x4_t *)(v0 + 48);
  v19[0] = *(float32x4_t *)(v0 + 32);
  v19[1] = v12;
  float32x4_t v13 = *(float32x4_t *)(v0 + 128);
  float32x4_t v14 = *(float32x4_t *)(v0 + 160);
  float32x4_t v15 = *(float32x4_t *)(v0 + 176);
  v20[2] = *(float32x4_t *)(v0 + 144);
  v20[3] = v14;
  v12.i32[0] = *(_DWORD *)(v0 + 292);
  v20[4] = v15;
  v14.i32[0] = *(_DWORD *)(v0 + 296);
  uint64_t v17 = *(void *)(v0 + 304);
  uint64_t v16 = *(void *)(v0 + 312);
  v20[0] = v11;
  v20[1] = v13;
  return sub_1854999B8(v9, v12.f32[0], v14.f32[0], v1, v19, v20, *(unsigned char *)(v1 + OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_isInteractive), (void *)(v0 + 192), v2, v3, v4, v5, *((uint64_t *)&v5 + 1), v6, v7, v8, v17, v16);
}

uint64_t sub_1858B3C50(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, char a7)
{
  sub_1853B76BC(a5, (uint64_t)v26);
  sub_1853B76BC((uint64_t)v26, (uint64_t)v27);
  sub_1853B985C(0, (unint64_t *)&qword_1E8FAFEF0);
  swift_dynamicCast();
  objc_msgSend(v25[0], sel_CAColorMatrixValue);
  long long v19 = v29;
  long long v21 = v28;
  long long v15 = v31;
  long long v17 = v30;
  long long v13 = v32;

  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v26);
  v27[0] = v21;
  v27[1] = v19;
  v27[2] = v17;
  v27[3] = v15;
  v27[4] = v13;
  sub_1853B76BC(a6, (uint64_t)v26);
  sub_1853B76BC((uint64_t)v26, (uint64_t)v25);
  swift_dynamicCast();
  objc_msgSend(v24, sel_CAColorMatrixValue);
  long long v20 = v29;
  long long v22 = v28;
  long long v16 = v31;
  long long v18 = v30;
  long long v14 = v32;

  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v26);
  long long v28 = v22;
  long long v29 = v20;
  long long v30 = v18;
  long long v31 = v16;
  long long v32 = v14;
  return sub_1858B4484(a1, a2, a3, a4, (float *)v27, (float *)&v28, a7);
}

id sub_1858B3E24(long long *a1, long long *a2, void (*a3)(void *), float a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  long long v15 = self;
  long long v16 = a1[1];
  long long v25 = *a1;
  long long v26 = v16;
  long long v17 = a1[3];
  long long v27 = a1[2];
  long long v28 = v17;
  long long v29 = a1[4];
  id result = objc_msgSend(v15, sel_valueWithCAColorMatrix_, &v25);
  if (!result) {
    goto LABEL_12;
  }
  id v19 = result;
  uint64_t v20 = sub_1853B985C(0, (unint64_t *)&qword_1E8FAFEF0);
  v30[3] = v20;
  v30[0] = v19;
  if (a3) {
    a3(v30);
  }
  sub_1853B76BC((uint64_t)v30, (uint64_t)v24);
  long long v21 = a2[1];
  long long v25 = *a2;
  long long v26 = v21;
  long long v22 = a2[3];
  long long v27 = a2[2];
  long long v28 = v22;
  long long v29 = a2[4];
  id result = objc_msgSend(v15, sel_valueWithCAColorMatrix_, &v25);
  if (!result) {
    goto LABEL_13;
  }
  *((void *)&v26 + 1) = v20;
  *(void *)&long long v25 = result;
  if ((~LODWORD(a4) & 0x7F800000) != 0)
  {
    if (a4 > -9.2234e18)
    {
      if (a4 < 9.2234e18)
      {
        sub_1853B7874((uint64_t)v24, (uint64_t)&v25, (uint64_t)a4, a7 & 1, a8, a9);
        sub_1853B93B8((uint64_t)&v25, &qword_1EB256B10);
        sub_1853B93B8((uint64_t)v24, &qword_1EB256B10);
        return (id)__swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v30);
      }
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

id sub_1858B3FDC(long long *a1, long long *a2)
{
  uint64_t v3 = *(void (**)(void *))(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(v2 + 32);
  float v6 = *(float *)(v2 + 44);
  char v7 = *(unsigned char *)(v2 + 52);
  uint64_t v8 = *(void *)(v2 + 56);
  uint64_t v9 = *(void *)(v2 + 64);
  long long v10 = a1[3];
  void v16[2] = a1[2];
  v16[3] = v10;
  long long v11 = a1[4];
  long long v12 = a1[1];
  v16[0] = *a1;
  v16[1] = v12;
  long long v13 = a2[3];
  v17[2] = a2[2];
  v17[3] = v13;
  v17[4] = a2[4];
  long long v14 = *a2;
  v17[1] = a2[1];
  v16[4] = v11;
  v17[0] = v14;
  return sub_1858B3E24(v16, v17, v3, v6, v4, v5, v7, v8, v9);
}

uint64_t sub_1858B4048(uint64_t result, uint64_t a2, uint64_t a3, void *a4, char a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  long long v14 = v13;
  long long v18 = (void *)result;
  *(double *)double v45 = a6;
  *(double *)&v45[1] = a7;
  *(double *)&v45[2] = a8;
  *(double *)&v45[3] = a9;
  *(double *)__int16 v44 = a10;
  *(double *)&v44[1] = a11;
  *(double *)&v44[2] = a12;
  *(double *)&v44[3] = a13;
  if ((a5 & 1) != 0
    || vabdd_f64(a6, a10) > 0.001
    || vabdd_f64(a7, a11) > 0.001
    || vabdd_f64(a8, a12) > 0.001
    || vabdd_f64(a9, a13) > 0.001)
  {
    objc_msgSend(v13, sel_preferredFrameRateRange);
    int v20 = v19;
    int v22 = v21;
    int v24 = v23;
    if (!sub_1853B7BC0())
    {
      uint64_t v25 = swift_allocObject();
      swift_unknownObjectWeakInit();
      _s13AnimationInfoCMa();
      swift_allocObject();
      id v26 = a4;
      long long v27 = sub_1854AE0CC(v26, (uint64_t)sub_1854AA548, v25);
      -[UIView set__swiftAnimationInfo:]((uint64_t)v26, v27);
    }
    sub_1858B4E1C(a2, a3);
    uint64_t v29 = v28;
    swift_release();
    id v30 = objc_msgSend(v18, sel_context);

    if (v30)
    {
      __int16 v42 = sub_1853B6778;
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v32 = swift_allocObject();
      *(unsigned char *)(v32 + 16) = 1;
      uint64_t v33 = v29;
      uint64_t v34 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = v32;
      *(void *)(v31 + 24) = v34;
      uint64_t v29 = v33;
      __int16 v42 = sub_185967700;
    }
    int v35 = v14[OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_updateType];
    if (a2 != 0xD000000000000020 || (__int16 v36 = sub_1853C2AD8, a3 != 0x8000000186B9E920))
    {
      if (sub_186A1F85C())
      {
        __int16 v36 = sub_1853C2AD8;
      }
      else if (a2 != 0xD000000000000021 || (__int16 v36 = sub_18593A40C, a3 != 0x8000000186B9E950))
      {
        if (sub_186A1F85C()) {
          __int16 v36 = sub_18593A40C;
        }
        else {
          __int16 v36 = 0;
        }
      }
    }
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = v36;
    *(void *)(v37 + 24) = 0;
    *(void *)(v37 + 32) = a4;
    *(_DWORD *)(v37 + 40) = v20;
    *(_DWORD *)(v37 + 44) = v22;
    *(_DWORD *)(v37 + 4_Block_object_dispose(&STACK[0x478], 8) = v24;
    *(unsigned char *)(v37 + 52) = v35 == 2;
    *(void *)(v37 + 56) = a2;
    *(void *)(v37 + 64) = a3;
    __int16 v38 = (void *)swift_allocObject();
    v38[2] = a4;
    v38[3] = a2;
    void v38[4] = a3;
    double v39 = *(void (**)(void *, void *, uint64_t (*)(), uint64_t, id (*)(double *, double *), uint64_t, void (*)(), void *, uint64_t, uint64_t))(v29 + 192);
    id v40 = a4;
    swift_bridgeObjectRetain_n();
    id v41 = v40;
    swift_retain();
    sub_1854B0A60((uint64_t)v36);
    v39(v45, v44, v42, v31, sub_1853B5CCC, v37, sub_1854A8D50, v38, ObjectType, v29);
    swift_release();
    sub_1854AFD40((uint64_t)v36);
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1858B4484(uint64_t result, uint64_t a2, uint64_t a3, void *a4, float *a5, float *a6, char a7)
{
  uint64_t v8 = v7;
  long long v12 = (void *)result;
  long long v13 = *((_OWORD *)a5 + 3);
  v45[2] = *((_OWORD *)a5 + 2);
  v45[3] = v13;
  void v45[4] = *((_OWORD *)a5 + 4);
  long long v14 = *((_OWORD *)a5 + 1);
  v45[0] = *(_OWORD *)a5;
  v45[1] = v14;
  long long v15 = *((_OWORD *)a6 + 3);
  v44[2] = *((_OWORD *)a6 + 2);
  v44[3] = v15;
  void v44[4] = *((_OWORD *)a6 + 4);
  long long v16 = *((_OWORD *)a6 + 1);
  v44[0] = *(_OWORD *)a6;
  v44[1] = v16;
  if ((a7 & 1) != 0
    || vabds_f32(*a5, *a6) > 0.01
    || vabds_f32(a5[1], a6[1]) > 0.01
    || vabds_f32(a5[2], a6[2]) > 0.01
    || vabds_f32(a5[3], a6[3]) > 0.01
    || vabds_f32(a5[4], a6[4]) > 0.01
    || vabds_f32(a5[5], a6[5]) > 0.01
    || vabds_f32(a5[6], a6[6]) > 0.01
    || vabds_f32(a5[7], a6[7]) > 0.01
    || vabds_f32(a5[8], a6[8]) > 0.01
    || vabds_f32(a5[9], a6[9]) > 0.01
    || vabds_f32(a5[10], a6[10]) > 0.01
    || vabds_f32(a5[11], a6[11]) > 0.01
    || vabds_f32(a5[12], a6[12]) > 0.01
    || vabds_f32(a5[13], a6[13]) > 0.01
    || vabds_f32(a5[14], a6[14]) > 0.01
    || vabds_f32(a5[15], a6[15]) > 0.01
    || vabds_f32(a5[16], a6[16]) > 0.01
    || vabds_f32(a5[17], a6[17]) > 0.01
    || vabds_f32(a5[18], a6[18]) > 0.01
    || vabds_f32(a5[19], a6[19]) > 0.01)
  {
    objc_msgSend(v7, sel_preferredFrameRateRange);
    int v18 = v17;
    int v20 = v19;
    int v22 = v21;
    if (!sub_1853B7BC0())
    {
      uint64_t v23 = swift_allocObject();
      swift_unknownObjectWeakInit();
      _s13AnimationInfoCMa();
      swift_allocObject();
      int v24 = a4;
      id v25 = a4;
      id v26 = sub_1854AE0CC(v25, (uint64_t)sub_1854AA548, v23);
      uint64_t v27 = (uint64_t)v25;
      a4 = v24;
      -[UIView set__swiftAnimationInfo:](v27, v26);
    }
    sub_1858B5200(a2, a3);
    uint64_t v29 = v28;
    swift_release();
    id v30 = objc_msgSend(v12, sel_context);

    if (v30)
    {
      __int16 v42 = sub_1853B6778;
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v32 = swift_allocObject();
      *(unsigned char *)(v32 + 16) = 1;
      uint64_t v33 = v29;
      uint64_t v34 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = v32;
      *(void *)(v31 + 24) = v34;
      uint64_t v29 = v33;
      __int16 v42 = sub_185967700;
    }
    int v35 = v8[OBJC_IVAR____TtCE5UIKitCSo6UIView23InProcessAnimationState_updateType];
    if (a2 != 0xD000000000000020 || (__int16 v36 = sub_1853C2AD8, a3 != 0x8000000186B9E920))
    {
      if (sub_186A1F85C())
      {
        __int16 v36 = sub_1853C2AD8;
      }
      else if (a2 != 0xD000000000000021 || (__int16 v36 = sub_18593A40C, a3 != 0x8000000186B9E950))
      {
        if (sub_186A1F85C()) {
          __int16 v36 = sub_18593A40C;
        }
        else {
          __int16 v36 = 0;
        }
      }
    }
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = v36;
    *(void *)(v37 + 24) = 0;
    *(void *)(v37 + 32) = a4;
    *(_DWORD *)(v37 + 40) = v18;
    *(_DWORD *)(v37 + 44) = v20;
    *(_DWORD *)(v37 + 4_Block_object_dispose(&STACK[0x478], 8) = v22;
    *(unsigned char *)(v37 + 52) = v35 == 2;
    *(void *)(v37 + 56) = a2;
    *(void *)(v37 + 64) = a3;
    __int16 v38 = (void *)swift_allocObject();
    v38[2] = a4;
    v38[3] = a2;
    void v38[4] = a3;
    double v39 = *(void (**)(_OWORD *, _OWORD *, uint64_t (*)(), uint64_t, id (*)(long long *, long long *), uint64_t, void (*)(), void *, uint64_t, uint64_t))(v29 + 192);
    id v40 = a4;
    swift_bridgeObjectRetain_n();
    id v41 = v40;
    swift_retain();
    sub_1854B0A60((uint64_t)v36);
    v39(v45, v44, v42, v31, sub_1858B3FDC, v37, sub_1854A8D50, v38, ObjectType, v29);
    swift_release();
    sub_1854AFD40((uint64_t)v36);
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1858B4C04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = sub_1853B7BC0();
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = v8;
  long long v10 = (os_unfair_lock_s *)(*(void *)(v8 + 16) + 16);
  os_unfair_lock_lock(v10);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v9 + 48);
  if (*(void *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_1853B7718(a1, a2);
    if (v13)
    {
      long long v14 = (uint64_t *)(*(void *)(v11 + 56) + 16 * v12);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  swift_endAccess();
  os_unfair_lock_unlock(v10);
  swift_release();
  if (v15)
  {
    uint64_t ObjectType = swift_getObjectType();
    sub_185923F30(a3 & 1, ObjectType, v16);
    return swift_unknownObjectRelease();
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t result = sub_1854C3530(a1, a2);
    if (result == 13)
    {
      *a4 = 0u;
      a4[1] = 0u;
    }
    else
    {
      int v19 = sub_1854ABD04(result);
      uint64_t v21 = v20;
      v22[3] = (uint64_t)v19;
      void v22[4] = v20;
      __swift_allocate_boxed_opaque_existential_0(v22);
      sub_186A1F66C();
      (*(void (**)(ValueMetadata *, uint64_t))(v21 + 72))(v19, v21);
      return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v22);
    }
  }
  return result;
}

uint64_t sub_1858B4DAC()
{
  return 2;
}

ValueMetadata *_s15PropertyChangesVMa()
{
  return &_s15PropertyChangesVN;
}

unint64_t sub_1858B4DC8()
{
  unint64_t result = qword_1E8FAFBE8;
  if (!qword_1E8FAFBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FAFBE8);
  }
  return result;
}

uint64_t sub_1858B4E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  float v6 = (os_unfair_lock_s *)(*(void *)(v2 + 16) + 16);
  os_unfair_lock_lock(v6);
  swift_beginAccess();
  if (!*(void *)(*(void *)(v2 + 48) + 16))
  {
LABEL_5:
    swift_endAccess();
    uint64_t v9 = (void *)MEMORY[0x18C109380](v2 + 24);
    double v10 = 0.0;
    if (v9)
    {
      uint64_t v11 = v9;
      id v12 = objc_msgSend(v9, sel_layer);

      char v13 = (void *)sub_186A1E92C();
      id v14 = objc_msgSend(v12, sel_valueForKey_, v13);

      if (v14)
      {
        sub_186A1F1CC();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v32, 0, sizeof(v32));
      }
      sub_1853B7020((uint64_t)v32, (uint64_t)&v30, &qword_1EB256B10);
      if (v31)
      {
        sub_1853B7BB0(&v30, v29);
        sub_1853B76BC((uint64_t)v29, (uint64_t)v28);
        sub_1853B76BC((uint64_t)v28, (uint64_t)v27);
        sub_1853B985C(0, (unint64_t *)&qword_1E8FAFEF0);
        swift_dynamicCast();
        objc_msgSend(v26, sel_CGRectValue);
        double v10 = v15;
        double v17 = v16;
        double v19 = v18;
        double v21 = v20;

        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v28);
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v29);
        sub_1853B93B8((uint64_t)v32, &qword_1EB256B10);
LABEL_13:
        uint64_t v22 = swift_allocObject();
        swift_weakInit();
        uint64_t v23 = (void *)swift_allocObject();
        v23[2] = v22;
        v23[3] = a1;
        void v23[4] = a2;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAEDA8);
        swift_allocObject();
        swift_bridgeObjectRetain();
        uint64_t v8 = sub_1858BA074((uint64_t)sub_1854A9390, (uint64_t)v23, v10, v17, v19, v21);
        swift_release();
        *(unsigned char *)(v8 + 264) = 1;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v30 = *(void *)(v3 + 48);
        *(void *)(v3 + 4_Block_object_dispose(&STACK[0x478], 8) = 0x8000000000000000;
        sub_1854B2A5C(v8, a1, a2, isUniquelyReferenced_nonNull_native, (void **)&v30, &qword_1E8FAEDA0, &qword_1E8FAEDA8);
        *(void *)(v3 + 4_Block_object_dispose(&STACK[0x478], 8) = v30;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        goto LABEL_14;
      }
      sub_1853B93B8((uint64_t)v32, &qword_1EB256B10);
    }
    double v17 = 0.0;
    double v19 = 0.0;
    double v21 = 0.0;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  sub_1853B7718(a1, a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  swift_endAccess();
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAEDA8);
  uint64_t v8 = swift_dynamicCastClassUnconditional();
LABEL_14:
  sub_1854B2C88(&qword_1E8FAEDA0, &qword_1E8FAEDA8);
  os_unfair_lock_unlock(v6);
  return v8;
}

uint64_t sub_1858B5200(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  float v6 = (os_unfair_lock_s *)(*(void *)(v2 + 16) + 16);
  os_unfair_lock_lock(v6);
  swift_beginAccess();
  if (*(void *)(*(void *)(v2 + 48) + 16))
  {
    swift_bridgeObjectRetain();
    sub_1853B7718(a1, a2);
    if (v7)
    {
      swift_endAccess();
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAE6C8);
      uint64_t v8 = swift_dynamicCastClassUnconditional();
      goto LABEL_14;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  uint64_t v9 = (void *)MEMORY[0x18C109380](v2 + 24);
  long long v10 = 0uLL;
  if (v9)
  {
    uint64_t v11 = v9;
    id v12 = objc_msgSend(v9, sel_layer, 0.0);

    char v13 = (void *)sub_186A1E92C();
    id v14 = objc_msgSend(v12, sel_valueForKey_, v13);

    if (v14)
    {
      sub_186A1F1CC();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v34, 0, sizeof(v34));
    }
    sub_1853B7020((uint64_t)v34, (uint64_t)&v32, &qword_1EB256B10);
    if (v33)
    {
      sub_1853B7BB0(&v32, v31);
      sub_1853B76BC((uint64_t)v31, (uint64_t)v30);
      sub_1853B76BC((uint64_t)v30, (uint64_t)v29);
      sub_1853B985C(0, (unint64_t *)&qword_1E8FAFEF0);
      swift_dynamicCast();
      objc_msgSend(v28, sel_CAColorMatrixValue);
      long long v26 = v36;
      long long v27 = v35;
      long long v24 = v38;
      long long v25 = v37;
      long long v23 = v39;

      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v30);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v31);
      sub_1853B93B8((uint64_t)v34, &qword_1EB256B10);
      long long v18 = v23;
      long long v17 = v24;
      long long v16 = v25;
      long long v15 = v26;
      long long v10 = v27;
    }
    else
    {
      sub_1853B93B8((uint64_t)v34, &qword_1EB256B10);
      long long v15 = 0uLL;
      long long v16 = 0uLL;
      long long v17 = 0uLL;
      long long v18 = 0uLL;
      long long v10 = 0uLL;
    }
  }
  else
  {
    long long v15 = 0uLL;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  long long v35 = v10;
  long long v36 = v15;
  long long v37 = v16;
  long long v38 = v17;
  long long v39 = v18;
  uint64_t v19 = swift_allocObject();
  swift_weakInit();
  double v20 = (void *)swift_allocObject();
  v20[2] = v19;
  v20[3] = a1;
  v20[4] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAE6C8);
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_1858BA088(&v35, (uint64_t)sub_1854A9390, (uint64_t)v20);
  swift_release();
  *(unsigned char *)(v8 + 48_Block_object_dispose(&STACK[0x478], 8) = 1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v32 = *(void *)(v3 + 48);
  *(void *)(v3 + 4_Block_object_dispose(&STACK[0x478], 8) = 0x8000000000000000;
  sub_1854B2A5C(v8, a1, a2, isUniquelyReferenced_nonNull_native, (void **)&v32, &qword_1E8FAE6C0, &qword_1E8FAE6C8);
  *(void *)(v3 + 4_Block_object_dispose(&STACK[0x478], 8) = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_14:
  sub_1854B2C88(&qword_1E8FAE6C0, &qword_1E8FAE6C8);
  os_unfair_lock_unlock(v6);
  return v8;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

uint64_t sub_1858B5628(uint64_t a1)
{
  uint64_t result = sub_18549A144((unint64_t *)&unk_1E8FAF6A8, type metadata accessor for CGSize);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = result;
  return result;
}

id sub_1858B56DC()
{
  *(void *)&v0[OBJC_IVAR____UIApplicationIntelligenceSupport_applicationState] = 2;
  type metadata accessor for _UIApplicationIntelligenceCollector();
  *(void *)&v0[OBJC_IVAR____UIApplicationIntelligenceSupport_collector] = swift_allocObject();
  v4.receiver = v0;
  v4.super_class = (Class)_UIApplicationIntelligenceSupport;
  id v1 = objc_msgSendSuper2(&v4, sel_init);
  sub_186A1E3FC();
  id v2 = v1;
  sub_186A1E3DC();
  sub_1858BBCC0((unint64_t *)&unk_1EB256A30, (void (*)(uint64_t))type metadata accessor for _UIApplicationIntelligenceCollector);
  swift_retain();
  sub_186A1E3EC();
  swift_release();

  return v2;
}

id sub_1858B57EC()
{
  id result = objc_msgSend(objc_allocWithZone((Class)_UIApplicationIntelligenceSupport), sel_init);
  qword_1EB256A70 = (uint64_t)result;
  return result;
}

void type metadata accessor for UITraitEnvironmentLayoutDirection(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceActiveAppearance(uint64_t a1)
{
}

uint64_t sub_1858B5850()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FAFAD0, type metadata accessor for AttributeName);
}

void type metadata accessor for AttributeName(uint64_t a1)
{
}

id static UIViewControllerTransition.zoom(options:sourceViewProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  void v10[4] = a2;
  void v10[5] = a3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  void v10[2] = sub_18591D310;
  void v10[3] = &block_descriptor_65;
  char v7 = _Block_copy(v10);
  swift_retain();
  swift_release();
  id v8 = objc_msgSend(ObjCClassFromMetadata, sel_zoomWithOptions_sourceViewProvider_, a1, v7);
  _Block_release(v7);
  return v8;
}

uint64_t sub_1858B5A10()
{
  return sub_1854A7054(&qword_1E8FAFC30, type metadata accessor for TraitKey);
}

void type metadata accessor for TraitKey(uint64_t a1)
{
}

void type metadata accessor for UIAccessibilityContrast(uint64_t a1)
{
}

id sub_1858B5A80(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  return v5;
}

id sub_1858B5AF4()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____UIDismissInteraction_isEnabled] = 1;
  *(void *)&v0[OBJC_IVAR____UIDismissInteraction_subInteractions] = MEMORY[0x1E4FBC860];
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____UIDismissInteraction__isActive] = 0;
  v0[OBJC_IVAR____UIDismissInteraction_trackingViewDidBecomeVisible] = 0;
  id v1 = &v0[OBJC_IVAR____UIDismissInteraction_originalTrackingViewPosition];
  void *v1 = 0;
  v1[1] = 0;
  id v2 = &v0[OBJC_IVAR____UIDismissInteraction_originalTouchPosition];
  void *v2 = 0;
  v2[1] = 0;
  uint64_t v3 = &v0[OBJC_IVAR____UIDismissInteraction_touchAdjustment];
  void *v3 = 0;
  v3[1] = 0;
  objc_super v4 = &v0[OBJC_IVAR____UIDismissInteraction_translation];
  *objc_super v4 = 0;
  v4[1] = 0;
  *(void *)&v0[OBJC_IVAR____UIDismissInteraction_styles] = 7;
  v7.receiver = v0;
  v7.super_class = (Class)_UIDismissInteraction;
  id v5 = objc_msgSendSuper2(&v7, sel_init);
  sub_1855ED448();

  return v5;
}

uint64_t sub_1858B5CD0(void *a1)
{
  id v2 = v1;
  id v4 = objc_msgSend(v2, sel_view);
  id v5 = v4;
  if (a1)
  {
    if (v4)
    {
      sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
      id v6 = a1;
      char v7 = sub_186A1F0AC();

      if (v7) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_13;
    }
  }
  uint64_t v8 = *(void *)&v2[OBJC_IVAR____UIDismissInteraction_subInteractions];
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = 32;
    do
    {
      uint64_t v11 = *(void *)(v8 + v10);
      id v12 = objc_msgSend((id)swift_unknownObjectRetain(), sel_view);
      if (v12)
      {
        char v13 = v12;
        objc_msgSend(v12, sel_removeInteraction_, v11);
      }
      swift_unknownObjectRelease();
      v10 += 16;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
LABEL_13:
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1858B5EA0(void *a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(v1 + OBJC_IVAR____UIDismissInteraction_subInteractions);
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      id v4 = a1;
      swift_bridgeObjectRetain();
      uint64_t v5 = 32;
      do
      {
        objc_msgSend(v4, sel_addInteraction_, *(void *)(v2 + v5));
        v5 += 16;
        --v3;
      }
      while (v3);

      swift_bridgeObjectRelease();
    }
  }
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1858B5F50()
{
  return sub_1854A7054(qword_1E8FAEC30, type metadata accessor for UIContentSizeCategory);
}

BOOL static UIContentSizeCategory.< infix(_:_:)(NSString *a1, NSString *a2)
{
  return UIContentSizeCategoryCompareToCategory(a1, a2) == NSOrderedAscending;
}

uint64_t sub_1858B5FB8()
{
  return sub_1854A7054(&qword_1E8FAFBD8, type metadata accessor for Key);
}

void type metadata accessor for UIUserInterfaceStyle(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceLevel(uint64_t a1)
{
}

uint64_t sub_1858B6028(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, id))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, v6);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_1858B60A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t sub_1858B60B0()
{
  return sub_185499088((unint64_t *)&unk_1E8FAFAF0, type metadata accessor for UILayoutPriority);
}

uint64_t sub_1858B60F8()
{
  return MEMORY[0x1E4FBB4B0];
}

void __swiftcall UIBarButtonItem.init(title:image:primaryAction:menu:)(UIBarButtonItem *__return_ptr retstr, Swift::String_optional title, UIImage_optional *image, UIAction_optional *primaryAction, UIMenu_optional *menu)
{
  object = title.value._object;
  id v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithPrimaryAction_menu_, primaryAction, menu);
  uint64_t v10 = v9;
  if (object)
  {
    id v11 = v9;
    id v12 = (void *)sub_186A1E92C();
    swift_bridgeObjectRelease();
LABEL_5:
    objc_msgSend(v10, sel_setTitle_, v12);

    objc_msgSend(v10, sel_setImage_, image);
    goto LABEL_6;
  }
  if (image)
  {
    id v13 = v9;
    id v12 = 0;
    goto LABEL_5;
  }
LABEL_6:
}

void type metadata accessor for UIDisplayGamut(uint64_t a1)
{
}

uint64_t sub_1858B61FC(uint64_t a1, uint64_t a2)
{
  return sub_1858B3AFC(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 24));
}

void sub_1858B6224(void *a1@<X8>)
{
  *a1 = 0;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

uint64_t sub_1858B6240(uint64_t a1)
{
  uint64_t result = sub_18549A144((unint64_t *)&unk_1E8FAF690, type metadata accessor for UIEdgeInsets);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = result;
  return result;
}

uint64_t sub_1858B6298()
{
  return 4;
}

uint64_t sub_1858B62A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB0018);
    uint64_t v3 = sub_186A1F34C();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      id v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      sub_186A1F9EC();
      swift_bridgeObjectRetain();
      sub_186A1E9BC();
      uint64_t result = sub_186A1FA4C();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        long long v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (uint64_t result = sub_186A1F85C(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            uint64_t result = sub_186A1F85C();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      double v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

unint64_t sub_1858B6444(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v8 = (void *)sub_186A1F6CC();
    for (uint64_t i = a1 + 32; ; i += 16)
    {
      sub_1853B7020(i, (uint64_t)&v16, a3);
      uint64_t v10 = v16;
      unint64_t result = sub_1854AB470(v16);
      if (v12) {
        break;
      }
      *(void *)((char *)v8 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v8[6] + 8 * result) = v10;
      unint64_t result = sub_1853B8150((uint64_t)&v17, v8[7] + 8 * result, a4);
      uint64_t v13 = v8[2];
      BOOL v14 = __OFADD__(v13, 1);
      uint64_t v15 = v13 + 1;
      if (v14) {
        goto LABEL_10;
      }
      void v8[2] = v15;
      if (!--v4) {
        return (unint64_t)v8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

unint64_t sub_1858B6554(uint64_t a1)
{
  return sub_1858B6444(a1, &qword_1E8FAFFD0, &qword_1E8FB4938, &qword_1E8FAFFA0);
}

uint64_t type metadata accessor for WeakBox()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for UIShape()
{
  return &type metadata for UIShape;
}

uint64_t sub_1858B6598(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FAE548, &qword_1E8FAE620);
}

uint64_t sub_1858B65C0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FAE610, &qword_1E8FAE600);
}

void sub_1858B65E8(uint64_t a1)
{
}

void sub_1858B6600(uint64_t a1)
{
}

unsigned char *sub_1858B6618(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

uint64_t sub_1858B6624()
{
  sub_1853B985C(0, &qword_1E8FB0158);
  uint64_t result = sub_186A1F0CC();
  qword_1E8FB0120 = result;
  return result;
}

id sub_1858B6678(uint64_t a1)
{
  return sub_185407D5C(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1858B6684()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256628);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  id v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - v7;
  if (qword_1EB256688 != -1) {
    swift_once();
  }
  uint64_t v9 = __swift_project_value_buffer(v3, (uint64_t)qword_1EB256670);
  sub_1853B7020(v9, (uint64_t)v8, (uint64_t *)&unk_1EB256638);
  sub_1853B7020((uint64_t)v8, (uint64_t)v6, (uint64_t *)&unk_1EB256638);
  uint64_t v10 = sub_186A1D75C();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    char v12 = (uint64_t *)&unk_1EB256638;
    uint64_t v13 = (uint64_t)v6;
  }
  else
  {
    sub_186A1D74C();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v10);
    uint64_t v14 = sub_186A1D72C();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v2, 1, v14) != 1)
    {
      sub_186A1D71C();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v2, v14);
      goto LABEL_9;
    }
    char v12 = (uint64_t *)&unk_1EB256628;
    uint64_t v13 = (uint64_t)v2;
  }
  sub_1853B93B8(v13, v12);
LABEL_9:
  sub_1853B93B8((uint64_t)v8, (uint64_t *)&unk_1EB256638);
  swift_bridgeObjectRelease();
  return 0;
}

id sub_1858B691C(uint64_t a1)
{
  if (qword_1EB2566A8 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  if (qword_1EB256660 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  if (qword_1EB256688 != -1) {
    swift_once();
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_1EB256670);
  uint64_t v18 = (void *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB2564E0);
  uint64_t aBlock = _s5UIKit26UITraitTypesettingLanguageV15_customRawValue3forSSSg10Foundation6LocaleV0D0VSg_tFZ_0(v5);
  uint64_t v16 = v6;
  sub_1853B76BC((uint64_t)&aBlock, (uint64_t)v21);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v23, (uint64_t)v21, &qword_1EB256B10);
  uint64_t v7 = v22;
  sub_1853B93B8((uint64_t)v21, &qword_1EB256B10);
  if (v7)
  {
    v23[0] = aBlock;
    v23[1] = v16;
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_186A1F90C();
  }
  else
  {
    uint64_t v8 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&aBlock);
  uint64_t v9 = sub_1858B6684();
  if (v9)
  {
    uint64_t v19 = v9;
    uint64_t v20 = v10;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v16 = 1107296256;
    uint64_t v17 = sub_1858C3010;
    uint64_t v18 = &block_descriptor_280;
    uint64_t v11 = _Block_copy(&aBlock);
    swift_release();
  }
  else
  {
    uint64_t v11 = 0;
  }
  LOBYTE(v14) = 0;
  id v12 = objc_msgSend(self, sel__defineObjectTraitWithName_identifier_defaultValue_equalityHandler_affectsColorAppearance_defaultValueRepresentsUnspecified_isPrivate_placeholderToken_, v2, v3, v8, v11, 0, 1, v14, a1);
  _Block_release(v11);

  swift_unknownObjectRelease();
  return v12;
}

uint64_t type metadata accessor for _UIDismissInteractionSettingsDomain()
{
  return self;
}

uint64_t type metadata accessor for _UIApplicationIntelligenceCollector()
{
  return self;
}

uint64_t type metadata accessor for _UIZoomToolbarTransitionController()
{
  return self;
}

ValueMetadata *type metadata accessor for UITraitPresentationSemanticContext()
{
  return &type metadata for UITraitPresentationSemanticContext;
}

uint64_t type metadata accessor for UICollectionViewDiffableDataSource.ReorderingHandlers()
{
  return swift_getGenericMetadata();
}

void sub_1858B6C8C(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *MEMORY[0x1E4FBC8C8] & *v5;
  uint64_t v10 = *(void **)((char *)v5 + *a4);
  uint64_t v11 = *a1;
  long long v12 = *(_OWORD *)(v9 + 96);
  long long v17 = *(_OWORD *)(v9 + 80);
  long long v18 = v12;
  type metadata accessor for NSDiffableDataSourceSnapshot();
  uint64_t v13 = *(void **)(v11 + 16);
  if (a2)
  {
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    *(void *)&long long v17 = MEMORY[0x1E4F143A8];
    *((void *)&v17 + 1) = 1107296256;
    *(void *)&long long v18 = sub_1856A95EC;
    *((void *)&v18 + 1) = a5;
    uint64_t v14 = _Block_copy(&v17);
    id v15 = v13;
    sub_1854B0A60(a2);
    swift_release();
  }
  else
  {
    id v16 = v13;
    uint64_t v14 = 0;
  }
  objc_msgSend(v10, sel_reloadFromSnapshot_completion_, v13, v14, v17, v18);
  _Block_release(v14);
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.applySnapshotUsingReloadData(_:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

void sub_1858B6DF4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t dispatch thunk of UICollectionViewDiffableDataSource.supplementaryViewProvider.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

id sub_1858B6E3C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *(void **)(v2 + qword_1E8FB81B0[0]);
    void v8[4] = a1;
    v8[5] = a2;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 1107296256;
    void v8[2] = sub_185704A84;
    v8[3] = &block_descriptor_19_7;
    uint64_t v5 = _Block_copy(v8);
    swift_retain();
    swift_release();
    objc_msgSend(v4, sel_setSupplementaryViewProvider_, v5);
    _Block_release(v5);
    return (id)sub_1854AFD40(a1);
  }
  else
  {
    uint64_t v7 = *(void **)(v2 + qword_1E8FB81B0[0]);
    return objc_msgSend(v7, sel_setSupplementaryViewProvider_, 0);
  }
}

id UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)(*MEMORY[0x1E4FBC8C8] & *v3);
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = v7[10];
  void v8[2] = v9;
  uint64_t v10 = v7[11];
  v8[3] = v10;
  uint64_t v11 = (id (*)(uint64_t, void *, uint64_t, uint64_t))v7[12];
  void v8[4] = v11;
  long long v12 = (void *)v7[13];
  v8[5] = v12;
  void v8[6] = a2;
  v8[7] = a3;
  id v13 = objc_allocWithZone((Class)__UIDiffableDataSource);
  uint64_t v24 = sub_185704A0C;
  uint64_t v25 = v8;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_18570476C;
  BOOL v23 = &block_descriptor_28_0;
  uint64_t v14 = _Block_copy(&aBlock);
  id v15 = v3;
  swift_retain();
  swift_retain();
  id v16 = objc_msgSend(v13, sel_initWithCollectionView_cellProvider_, a1, v14);
  _Block_release(v14);
  swift_release();
  *(void *)((char *)v15 + qword_1E8FB81B0[0]) = v16;

  uint64_t aBlock = v9;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  BOOL v23 = v12;
  v19.receiver = v15;
  v19.super_class = (Class)type metadata accessor for UICollectionViewDiffableDataSource();
  id v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(a1, sel_setDataSource_, v17);
  swift_release();

  swift_release();
  return v17;
}

uint64_t type metadata accessor for _UISwipeDownDismissSubInteraction()
{
  return self;
}

void sub_1858B71B0()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC5UIKit33_UISwipeDownDismissSubInteraction_axis] = 2;
  uint64_t v2 = OBJC_IVAR____TtC5UIKit33_UISwipeDownDismissSubInteraction_gesture;
  type metadata accessor for _UISwipeDownGestureRecognizer();
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v4 = v0;
  *(void *)&v0[v2] = objc_msgSend(v3, sel_init);
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && sub_186A1F67C()) {
    sub_1859E1D8C(MEMORY[0x1E4FBC860]);
  }
  else {
    uint64_t v5 = MEMORY[0x1E4FBC870];
  }
  *(void *)&v4[OBJC_IVAR____TtC5UIKit33_UISwipeDownDismissSubInteraction_conflictingScrollViews] = v5;

  v23.receiver = v4;
  v23.super_class = ObjectType;
  uint64_t v6 = (char *)objc_msgSendSuper2(&v23, sel_init);
  uint64_t v7 = OBJC_IVAR____TtC5UIKit33_UISwipeDownDismissSubInteraction_gesture;
  uint64_t v8 = *(void **)&v6[OBJC_IVAR____TtC5UIKit33_UISwipeDownDismissSubInteraction_gesture];
  uint64_t v9 = v6;
  objc_msgSend(v8, sel_addTarget_action_, v9, sel_handlePan_);
  objc_msgSend(v8, sel_setDelegate_, v9);
  id v10 = v8;
  uint64_t v11 = (void *)sub_186A1E92C();
  objc_msgSend(v10, sel_setName_, v11);

  long long v12 = *(void **)&v6[v7];
  type metadata accessor for _UIDismissInteractionSettingsDomain();
  v22.receiver = (id)swift_getObjCClassFromMetadata();
  v22.super_class = (Class)&OBJC_METACLASS____TtC5UIKit35_UIDismissInteractionSettingsDomain;
  id v13 = v12;
  id v14 = objc_msgSendSuper2(&v22, sel_rootSettings);
  if (v14)
  {
    id v15 = v14;
    type metadata accessor for _UIDismissInteractionSettings();
    id v16 = (char *)objc_retain(*(id *)(swift_dynamicCastClassUnconditional()
                                    + OBJC_IVAR____TtC5UIKit29_UIDismissInteractionSettings_swipeDown));

    double v17 = 90.0
        - *(double *)&v16[OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_coneOfInfluenceRightAngle];
    double v18 = *(double *)&v16[OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_coneOfInfluenceLeftAngle];

    if (v17 <= v18 + 90.0)
    {
      objc_super v19 = (double *)&v13[OBJC_IVAR____TtC5UIKit29_UISwipeDownGestureRecognizer_angleRange];
      *objc_super v19 = v17;
      v19[1] = v18 + 90.0;

      uint64_t v20 = *(void **)&v6[v7];
      objc_msgSend(v20, sel_setMaximumNumberOfTouches_, 1, v22.receiver, v22.super_class);
      id v21 = v20;
      objc_msgSend(v21, sel_setAllowedScrollTypesMask_, 3);

      return;
    }
    __break(1u);
  }
  __break(1u);
}

id sub_1858B7474(char a1)
{
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5UIKit33_UISwipeDownDismissSubInteraction_gesture), sel_setEnabled_, a1 & 1);
}

void sub_1858B7494(void *a1)
{
  swift_unknownObjectWeakAssign();
}

uint64_t sub_1858B7548(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x18C109380](v2 + OBJC_IVAR____TtC5UIKit33_UISwipeDownDismissSubInteraction_view);
  uint64_t v5 = v4;
  if (!a1)
  {
    if (!v4) {
      goto LABEL_8;
    }

    goto LABEL_7;
  }
  if (!v4
    || (sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0),
        id v6 = a1,
        char v7 = sub_186A1F0AC(),
        v6,
        v6,
        v5,
        (v7 & 1) == 0))
  {
LABEL_7:
    uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC5UIKit33_UISwipeDownDismissSubInteraction_gesture);
    id v9 = objc_msgSend(v8, sel_view);
    objc_msgSend(v9, sel_removeGestureRecognizer_, v8);
  }
LABEL_8:
  return swift_unknownObjectWeakAssign();
}

ValueMetadata *type metadata accessor for UIControlPointerHoverStyleDriver()
{
  return &type metadata for UIControlPointerHoverStyleDriver;
}

uint64_t type metadata accessor for _UIEdgePanDismissSubInteraction()
{
  return self;
}

char *sub_1858B7784()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC5UIKit31_UIEdgePanDismissSubInteraction_axis] = 1;
  uint64_t v2 = OBJC_IVAR____TtC5UIKit31_UIEdgePanDismissSubInteraction_gesture;
  id v3 = objc_allocWithZone((Class)_UIParallaxTransitionPanGestureRecognizer);
  uint64_t v4 = v0;
  *(void *)&v0[v2] = objc_msgSend(v3, sel_init);

  v14.receiver = v4;
  v14.super_class = ObjectType;
  uint64_t v5 = (char *)objc_msgSendSuper2(&v14, sel_init);
  uint64_t v6 = OBJC_IVAR____TtC5UIKit31_UIEdgePanDismissSubInteraction_gesture;
  char v7 = *(void **)&v5[OBJC_IVAR____TtC5UIKit31_UIEdgePanDismissSubInteraction_gesture];
  uint64_t v8 = v5;
  objc_msgSend(v7, sel_addTarget_action_, v8, sel_handlePan_);
  objc_msgSend(v7, sel_setDelegate_, v8);
  id v9 = v7;
  id v10 = (void *)sub_186A1E92C();
  objc_msgSend(v9, sel_setName_, v10);

  uint64_t v11 = *(void **)&v5[v6];
  objc_msgSend(v11, sel_setAllowedScrollTypesMask_, 3);
  id v12 = v11;
  objc_msgSend(v12, sel_set_skipDynamicDependentRequirementOverride_, 1);

  return v8;
}

id sub_1858B7914(char a1)
{
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5UIKit31_UIEdgePanDismissSubInteraction_gesture), sel_setEnabled_, a1 & 1);
}

void sub_1858B7934(void *a1)
{
  swift_unknownObjectWeakAssign();
}

uint64_t sub_1858B79E8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x18C109380](v2 + OBJC_IVAR____TtC5UIKit31_UIEdgePanDismissSubInteraction_view);
  uint64_t v5 = v4;
  if (!a1)
  {
    if (!v4) {
      goto LABEL_8;
    }

    goto LABEL_7;
  }
  if (!v4
    || (sub_185638060(),
        id v6 = a1,
        char v7 = sub_186A1F0AC(),
        v6,
        v6,
        v5,
        (v7 & 1) == 0))
  {
LABEL_7:
    uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC5UIKit31_UIEdgePanDismissSubInteraction_gesture);
    id v9 = objc_msgSend(v8, sel_view);
    objc_msgSend(v9, sel_removeGestureRecognizer_, v8);
  }
LABEL_8:
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1858B7B40(void *a1)
{
  id v3 = *(void **)(v1 + OBJC_IVAR____TtC5UIKit31_UIEdgePanDismissSubInteraction_gesture);
  id v4 = objc_msgSend(v3, sel_view);

  if (v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = a1 == 0;
  }
  if (!v5)
  {
    id v6 = a1;
    objc_msgSend(v6, sel_addGestureRecognizer_, v3);
    if (objc_msgSend(v6, sel_effectiveUserInterfaceLayoutDirection)) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = 2;
    }
    objc_msgSend(v3, sel_setEdges_, v7);
  }
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1858B7C40(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

ValueMetadata *type metadata accessor for UIConfigurationColorTransformer()
{
  return &type metadata for UIConfigurationColorTransformer;
}

void sub_1858B7C58(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = 1;
}

uint64_t type metadata accessor for _UISwipeDownGestureRecognizer()
{
  return self;
}

id sub_1858B7CF8(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v7 = &v3[OBJC_IVAR____TtC5UIKit29_UISwipeDownGestureRecognizer_angleRange];
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *(void *)&v3[OBJC_IVAR____TtC5UIKit29_UISwipeDownGestureRecognizer_lastTouchPoint] = 0;
  sub_18557D060(a1, (uint64_t)v18);
  uint64_t v8 = v19;
  if (v19)
  {
    id v9 = __swift_project_boxed_opaque_existential_0Tm(v18, v19);
    uint64_t v10 = *(void *)(v8 - 8);
    double v11 = MEMORY[0x1F4188790](v9);
    id v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v10 + 16))(v13, v11);
    uint64_t v14 = sub_186A1F83C();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v18);
  }
  else
  {
    uint64_t v14 = 0;
  }
  v17.receiver = v3;
  v17.super_class = ObjectType;
  id v15 = objc_msgSendSuper2(&v17, sel_initWithTarget_action_, v14, a2);
  swift_unknownObjectRelease();
  sub_1853BFC80(a1);
  return v15;
}

uint64_t type metadata accessor for _UIPinchDismissSubInteraction()
{
  return self;
}

char *sub_1858B7ED8()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC5UIKit29_UIPinchDismissSubInteraction_axis] = 3;
  uint64_t v2 = OBJC_IVAR____TtC5UIKit29_UIPinchDismissSubInteraction_gesture;
  id v3 = objc_allocWithZone((Class)_UITransformGestureRecognizer);
  id v4 = v0;
  *(void *)&v0[v2] = objc_msgSend(v3, sel_init);

  v11.receiver = v4;
  v11.super_class = ObjectType;
  BOOL v5 = (char *)objc_msgSendSuper2(&v11, sel_init);
  id v6 = *(void **)&v5[OBJC_IVAR____TtC5UIKit29_UIPinchDismissSubInteraction_gesture];
  uint64_t v7 = v5;
  objc_msgSend(v6, sel_addTarget_action_, v7, sel_handlePinch_);
  objc_msgSend(v6, sel_setDelegate_, v7);
  id v8 = v6;
  id v9 = (void *)sub_186A1E92C();
  objc_msgSend(v8, sel_setName_, v9);

  return v7;
}

id sub_1858B8030(char a1)
{
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC5UIKit29_UIPinchDismissSubInteraction_gesture), sel_setEnabled_, a1 & 1);
}

void sub_1858B8050(void *a1)
{
  swift_unknownObjectWeakAssign();
}

uint64_t sub_1858B8104(void *a1)
{
  uint64_t v2 = v1;
  id v4 = (void *)MEMORY[0x18C109380](v2 + OBJC_IVAR____TtC5UIKit29_UIPinchDismissSubInteraction_view);
  BOOL v5 = v4;
  if (!a1)
  {
    if (!v4) {
      goto LABEL_8;
    }

    goto LABEL_7;
  }
  if (!v4
    || (sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0),
        id v6 = a1,
        char v7 = sub_186A1F0AC(),
        v6,
        v6,
        v5,
        (v7 & 1) == 0))
  {
LABEL_7:
    id v8 = *(void **)(v2 + OBJC_IVAR____TtC5UIKit29_UIPinchDismissSubInteraction_gesture);
    id v9 = objc_msgSend(v8, sel_view);
    objc_msgSend(v9, sel_removeGestureRecognizer_, v8);
  }
LABEL_8:
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for _UIDismissInteractionSettings()
{
  return self;
}

id sub_1858B8394()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for _UIDismissInteractionSettings();
  id result = objc_msgSendSuper2(&v3, sel_setDefaultValues);
  *(void *)(*(void *)&v0[OBJC_IVAR____TtC5UIKit29_UIDismissInteractionSettings_edgePan]
            + OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_minScale) = 0x3FE3333333333333;
  uint64_t v2 = OBJC_IVAR____TtC5UIKit29_UIDismissInteractionSettings_swipeDown;
  *(void *)(*(void *)&v0[OBJC_IVAR____TtC5UIKit29_UIDismissInteractionSettings_swipeDown]
            + OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_minScale) = 0x3FE3333333333333;
  *(void *)(*(void *)&v0[OBJC_IVAR____TtC5UIKit29_UIDismissInteractionSettings_pinch]
            + OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_minScale) = 0x3FD0000000000000;
  *(void *)(*(void *)&v0[OBJC_IVAR____TtC5UIKit29_UIDismissInteractionSettings_scroll]
            + OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_dismissThreshold) = 0x4062C00000000000;
  *(void *)(*(void *)&v0[v2] + OBJC_IVAR____TtC5UIKit43_UIDismissInteractionSubInteractionSettings_dismissThreshold) = 0x4062C00000000000;
  return result;
}

void sub_1858B8464(uint64_t a1)
{
}

uint64_t sub_1858B8484()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638);
  __swift_allocate_value_buffer(v0, qword_1EB256670);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_1EB256670);
  uint64_t v2 = sub_186A1D75C();
  objc_super v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  return v3(v1, 1, 1, v2);
}

void sub_1858B851C(uint64_t a1)
{
}

void UIListContentConfiguration.image.setter(void *a1)
{
}

void UIListContentConfiguration.text.setter(uint64_t a1, uint64_t a2)
{
}

uint64_t static UIListContentConfiguration.cell()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1857C49C8((SEL *)&selRef_cellConfiguration, a1);
}

uint64_t static UIListContentConfiguration.extraProminentInsetGroupedHeader()@<X0>(uint64_t *a1@<X8>)
{
  return sub_1857C49C8((SEL *)&selRef_extraProminentInsetGroupedHeaderConfiguration, a1);
}

double sub_1858B8584@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

unint64_t sub_1858B8590()
{
  unint64_t result = qword_1E8FAEDB8;
  if (!qword_1E8FAEDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FAEDB8);
  }
  return result;
}

unint64_t sub_1858B85E4@<X0>(void *a1@<X8>)
{
  id v3 = objc_msgSend(self, sel_valueWithCGRect_, *v1, v1[1], v1[2], v1[3]);
  unint64_t result = sub_1854B7308();
  a1[3] = result;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for InProcessAnimationManager()
{
  return self;
}

uint64_t sub_1858B8684()
{
  return sub_1858B868C();
}

uint64_t sub_1858B868C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1858B8B38();
    return swift_release();
  }
  return result;
}

uint64_t sub_1858B86E4(uint64_t a1, uint64_t a2)
{
  return sub_1858B86EC(a1, a2, v2);
}

uint64_t sub_1858B86EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_186A1E6CC();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_186A1E6FC();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  objc_super v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v13 = *(id *)(result + 280);
    swift_release();
    void aBlock[4] = sub_1858B8684;
    void aBlock[5] = a3;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1856A95EC;
    aBlock[3] = &block_descriptor_76;
    uint64_t v14 = _Block_copy(aBlock);
    swift_retain();
    sub_186A1E6DC();
    uint64_t v17 = MEMORY[0x1E4FBC860];
    sub_1854A2CAC((unint64_t *)&qword_1E8FB0138, MEMORY[0x1E4FBCB00]);
    uint64_t v16 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB0140);
    sub_1854B2C88((unint64_t *)&qword_1E8FB0148, &qword_1E8FB0140);
    sub_186A1F21C();
    MEMORY[0x18C101DF0](0, v11, v7, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v16);
    return swift_release();
  }
  return result;
}

id sub_1858B89D4()
{
  id result = _UIMainBundleIdentifier();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_186A1E95C();
    uint64_t v4 = v3;

    if (v2 == 0xD000000000000014 && v4 == 0x8000000186BAB9B0)
    {
      id result = (id)swift_bridgeObjectRelease();
      char v5 = 1;
    }
    else
    {
      char v5 = sub_186A1F85C();
      id result = (id)swift_bridgeObjectRelease();
    }
  }
  else
  {
    char v5 = 0;
  }
  byte_1E8FAF7B8 = v5 & 1;
  return result;
}

uint64_t sub_1858B8A90()
{
  type metadata accessor for InProcessAnimationManager();
  swift_allocObject();
  uint64_t result = sub_18549DF40();
  qword_1E8FD58B0 = result;
  return result;
}

uint64_t sub_1858B8ACC()
{
  uint64_t v0 = sub_186A1E5CC();
  __swift_allocate_value_buffer(v0, qword_1E8FB0050);
  __swift_project_value_buffer(v0, (uint64_t)qword_1E8FB0050);
  id v1 = _InProcessAnimationLog();
  return sub_186A1E5DC();
}

void sub_1858B8B28()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 325) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_1858B8B38()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_186A1E6CC();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_186A1E6FC();
  uint64_t v36 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v35 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_186A1E73C();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  objc_super v11 = (char **)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *(void **)(v1 + 280);
  *objc_super v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FBCBF0], v8);
  id v13 = v12;
  char v14 = sub_186A1E76C();
  uint64_t v16 = *(void (**)(void *, uint64_t))(v9 + 8);
  int v15 = v9 + 8;
  v16(v11, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_6;
  }
  id v17 = objc_msgSend(self, sel_mainDisplay);
  if (v17)
  {
    double v18 = v17;
    LODWORD(v11) = objc_msgSend(v17, sel_isForceFixedRateLinksEnabled);
  }
  else
  {
    LODWORD(v11) = 0;
  }
  uint64_t v33 = v5;
  uint64_t v34 = v6;
  int v15 = *(unsigned __int8 *)(v1 + 328);
  LODWORD(v_Block_object_dispose(&STACK[0x478], 8) = v11 ^ 1;
  if (qword_1E8FB0070 != -1) {
    goto LABEL_13;
  }
LABEL_6:
  int v19 = v15 & v8;
  uint64_t v20 = sub_186A1E5CC();
  __swift_project_value_buffer(v20, (uint64_t)qword_1E8FB0050);
  id v21 = sub_186A1E5AC();
  os_log_type_t v22 = sub_186A1EEAC();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 67109632;
    LODWORD(aBlock) = v19;
    sub_186A1F16C();
    *(_WORD *)(v23 + _Block_object_dispose(&STACK[0x478], 8) = 1024;
    LODWORD(aBlock) = v15;
    sub_186A1F16C();
    *(_WORD *)(v23 + 14) = 1024;
    LODWORD(aBlock) = v11;
    sub_186A1F16C();
    _os_log_impl(&dword_1853B0000, v21, v22, "animationsShouldCompleteImmediately will update to %{BOOL}d, screenIsOff=%{BOOL}d, isForceFixedRateLinksEnabled=%{BOOL}d", (uint8_t *)v23, 0x14u);
    MEMORY[0x18C109220](v23, -1, -1);
  }

  uint64_t v24 = *(NSObject **)(v1 + 256);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v1;
  *(unsigned char *)(v25 + 24) = v19;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = sub_1858B8B28;
  *(void *)(v26 + 24) = v25;
  id v41 = sub_1853B59A0;
  uint64_t v42 = v26;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v38 = 1107296256;
  long long v39 = sub_1853BE46C;
  id v40 = &block_descriptor_26_6;
  long long v27 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v24, v27);
  _Block_release(v27);
  LOBYTE(v24) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v24)
  {
    __break(1u);
  }
  else
  {
    if (v19)
    {
      sub_1853B985C(0, (unint64_t *)&qword_1EB256300);
      uint64_t v29 = (void *)sub_186A1EF9C();
      id v41 = sub_185AFB0D0;
      uint64_t v42 = v1;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v38 = 1107296256;
      long long v39 = sub_1856A95EC;
      id v40 = &block_descriptor_29_2;
      long long v30 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      uint64_t v31 = v35;
      sub_186A1E6DC();
      uint64_t aBlock = MEMORY[0x1E4FBC860];
      sub_1854A2CAC((unint64_t *)&qword_1E8FB0138, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB0140);
      sub_1854B2C88((unint64_t *)&qword_1E8FB0148, &qword_1E8FB0140);
      long long v32 = v33;
      sub_186A1F21C();
      MEMORY[0x18C101DF0](0, v31, v32, v30);
      _Block_release(v30);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v32, v2);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v34);
    }
    return swift_release();
  }
  return result;
}

void sub_1858B9180()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *((void *)v0 + 35);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  *(void *)(v3 + 24) = v1;
  void v10[4] = sub_185AFB4B8;
  void v10[5] = v3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  void v10[2] = sub_185AF7508;
  void v10[3] = &block_descriptor_100_1;
  uint64_t v4 = _Block_copy(v10);
  swift_retain();
  swift_release();
  swift_beginAccess();
  uint32_t v5 = notify_register_dispatch("com.apple.backboardd.backlight.changed", v0 + 80, v2, v4);
  swift_endAccess();
  _Block_release(v4);
  if (v5)
  {
    if (qword_1E8FB0070 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_186A1E5CC();
    __swift_project_value_buffer(v6, (uint64_t)qword_1E8FB0050);
    uint64_t v7 = sub_186A1E5AC();
    os_log_type_t v8 = sub_186A1EEBC();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67109120;
      LODWORD(v10[0]) = v5;
      sub_186A1F16C();
      _os_log_impl(&dword_1853B0000, v7, v8, "Failed to register for backlight changes, status=%u", v9, 8u);
      MEMORY[0x18C109220](v9, -1, -1);
    }
  }
}

ValueMetadata *type metadata accessor for InProcessAnimationManager.ModifierGroupRequestID()
{
  return &type metadata for InProcessAnimationManager.ModifierGroupRequestID;
}

uint64_t sub_1858B93A4()
{
  uint64_t v0 = sub_186A1EF8C();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_186A1EF6C();
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = sub_186A1E6FC();
  MEMORY[0x1F4188790](v5 - 8);
  sub_1853B985C(0, (unint64_t *)&qword_1EB256300);
  sub_186A1E6DC();
  v7[1] = MEMORY[0x1E4FBC860];
  sub_1854A2CAC(&qword_1EB255C70, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255C60);
  sub_1854B2C88(&qword_1EB255C68, &qword_1EB255C60);
  sub_186A1F21C();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBCC58], v0);
  uint64_t result = sub_186A1EFCC();
  qword_1E8FD58B8 = result;
  return result;
}

void sub_1858B9608()
{
  qword_1E8FD58A8 = MEMORY[0x1E4FBC860];
}

__int16 *sub_1858B961C(__int16 *result)
{
  __int16 v1 = *result;
  if (*result != 2)
  {
    *((unsigned char *)result + 2) = v1 & 1;
    *((unsigned char *)result + 3) = HIBYTE(v1) & 1;
    *uint64_t result = 2;
  }
  return result;
}

_WORD *sub_1858B9648(_WORD *result)
{
  if (*(unsigned char *)(v1 + 17)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  *uint64_t result = v2 | *(unsigned __int8 *)(v1 + 16);
  return result;
}

void sub_1858B9668()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  __int16 v2 = (__int16 *)&v1[4];
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1858B9648(v2);
  os_unfair_lock_unlock(v3);
  sub_186A1EFAC();
  if (v4 == 1)
  {
    os_unfair_lock_lock(v3);
    sub_1858B961C(v2);
    os_unfair_lock_unlock(v3);
  }
}

void sub_1858B9730()
{
  *(unsigned char *)(v0 + 327) = 1;
}

void sub_1858B973C()
{
  uint64_t v1 = *(NSObject **)(v0 + 272);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1858B9730;
  *(void *)(v2 + 24) = v0;
  void v8[4] = sub_1853BE6D4;
  v8[5] = v2;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  void v8[2] = sub_1853BE46C;
  v8[3] = &block_descriptor_120_0;
  uint64_t v3 = _Block_copy(v8);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v1)
  {
    __break(1u);
  }
  else if (qword_1E8FB0070 == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  uint64_t v4 = sub_186A1E5CC();
  __swift_project_value_buffer(v4, (uint64_t)qword_1E8FB0050);
  uint64_t v5 = sub_186A1E5AC();
  os_log_type_t v6 = sub_186A1EEAC();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1853B0000, v5, v6, "Set displaylink needs invalidation", v7, 2u);
    MEMORY[0x18C109220](v7, -1, -1);
  }
  swift_release();
}

uint64_t sub_1858B9928()
{
  return sub_1858B9930(v0);
}

uint64_t sub_1858B9930(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 176);
  swift_beginAccess();
  _UIUpdateRequestDeactivate(v1, 0x100036u);
  return swift_endAccess();
}

void sub_1858B9984()
{
  sub_1858B998C(*(void *)(v0 + 16));
}

void sub_1858B998C(uint64_t a1)
{
  inProcessAnimationManagerSetFixedPriority(53);
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_currentRunLoop);
  swift_unknownObjectWeakAssign();

  dispatch_semaphore_t v4 = dispatch_semaphore_create(0);
  uint64_t v5 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v4;

  sub_186A1F03C();
  while (1)
  {
    do
    {
      id v6 = objc_msgSend(v2, sel_currentRunLoop);
      [v6 run];

      uint64_t v7 = *(void **)(a1 + 56);
    }
    while (!v7);
    id v8 = v7;
    sub_186A1F02C();
  }
}

void sub_1858B9A48(char *a1@<X8>)
{
  sub_1858B9A64(v1, a1);
}

void sub_1858B9A64(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x18C109380](a1 + 208);
  swift_unknownObjectRelease();
  if (v4) {
    goto LABEL_6;
  }
  swift_beginAccess();
  unint64_t v5 = *(void *)(a1 + 96);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_186A1F67C();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_6;
    }
  }
  else if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_6;
  }
  id v6 = (void *)MEMORY[0x18C109380](a1 + 304);
  if (!v6)
  {
    char v7 = 1;
    goto LABEL_7;
  }

LABEL_6:
  char v7 = 0;
LABEL_7:
  *a2 = v7;
}

ValueMetadata *type metadata accessor for InProcessAnimationManager.Configuration()
{
  return &type metadata for InProcessAnimationManager.Configuration;
}

ValueMetadata *type metadata accessor for UITraitVerticalSizeClass()
{
  return &type metadata for UITraitVerticalSizeClass;
}

unint64_t sub_1858B9B58()
{
  unint64_t result = qword_1E8FAE700;
  if (!qword_1E8FAE700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FAE700);
  }
  return result;
}

uint64_t type metadata accessor for _UIMagicMorphAnimation()
{
  return self;
}

uint64_t sub_1858B9BF4@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X2>, float32x4_t *a4@<X3>, float32x4_t *a5@<X8>)
{
  id v6 = v5;
  sub_1853B8150(a3, (uint64_t)v67, &qword_1E8FAE710);
  unint64_t v12 = v67[0];
  unint64_t v13 = v67[1];
  unint64_t v14 = v67[2];
  unint64_t v15 = v67[3];
  unint64_t v62 = v67[6];
  unint64_t v63 = v67[5];
  unint64_t v60 = v67[8];
  unint64_t v61 = v67[7];
  unint64_t v58 = v67[4];
  unint64_t v59 = v67[9];
  sub_1854B5564(a1, (uint64_t)v65);
  if (v66)
  {
    if (v66 == 2)
    {
      sub_1854B1F20(v65, (uint64_t)__src);
      sub_1854B1F38((uint64_t)__src, (uint64_t)&a5->i64[1]);
      a5->i64[0] = 0;
      a5[18].i16[0] = 0;
      a5[18].i64[1] = sub_1859E12BC(MEMORY[0x1E4FBC860]);
      float32x4_t v16 = a2[2];
      float32x4_t v17 = a2[3];
      a5[5] = v16;
      a5[6] = v17;
      float32x4_t v18 = a2[4];
      float32x4_t v20 = *a2;
      float32x4_t v19 = a2[1];
      a5[3] = *a2;
      a5[4] = v19;
      a5[9] = v19;
      a5[10] = v16;
      a5[11] = v17;
      a5[12] = v18;
      a5[7] = v18;
      a5[8] = v20;
      float32x4_t v21 = a4[3];
      a5[15] = a4[2];
      a5[16] = v21;
      a5[17] = a4[4];
      float32x4_t v22 = a4[1];
      a5[13] = *a4;
      a5[14] = v22;
      uint64_t result = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)__src);
      char v24 = 2;
    }
    else
    {
      sub_1854B5730((uint64_t)v65);
      sub_1853B8150(a3, (uint64_t)__src, &qword_1E8FAE710);
      if (__src[5])
      {
        LODWORD(v12) = 0;
        LODWORD(v41) = 0;
        LODWORD(v13) = 0;
        LODWORD(v42) = 0;
        LODWORD(v14) = 0;
        LODWORD(v43) = 0;
        LODWORD(v15) = 0;
        LODWORD(v44) = 0;
        __int32 v45 = 0;
        LODWORD(v46) = 0;
        uint64_t result = 0;
        LODWORD(v47) = 0;
        __int32 v48 = 0;
        LODWORD(v49) = 0;
        __int32 v50 = 0;
        LODWORD(v51) = 0;
        __int32 v52 = 0;
        LODWORD(v53) = 0;
        __int32 v54 = 0;
        LODWORD(v55) = 0;
      }
      else
      {
        unint64_t v41 = HIDWORD(v12);
        unint64_t v42 = HIDWORD(v13);
        unint64_t v43 = HIDWORD(v14);
        unint64_t v44 = HIDWORD(v15);
        __int32 v45 = v58;
        __int32 v54 = v59;
        unint64_t v46 = HIDWORD(v58);
        __int32 v48 = v62;
        uint64_t result = v63;
        unint64_t v47 = HIDWORD(v63);
        unint64_t v49 = HIDWORD(v62);
        __int32 v52 = v60;
        __int32 v50 = v61;
        unint64_t v51 = HIDWORD(v61);
        unint64_t v53 = HIDWORD(v60);
        unint64_t v55 = HIDWORD(v59);
      }
      float32x4_t v56 = a4[3];
      a5[2] = a4[2];
      a5[3] = v56;
      a5[4] = a4[4];
      float32x4_t v57 = a4[1];
      *a5 = *a4;
      a5[1] = v57;
      a5[5].i32[0] = v12;
      a5[5].i32[1] = v41;
      a5[5].i32[2] = v13;
      a5[5].i32[3] = v42;
      a5[6].i32[0] = v14;
      a5[6].i32[1] = v43;
      a5[6].i32[2] = v15;
      a5[6].i32[3] = v44;
      a5[7].i32[0] = v45;
      a5[7].i32[1] = v46;
      a5[7].i32[2] = result;
      a5[7].i32[3] = v47;
      a5[8].i32[0] = v48;
      a5[8].i32[1] = v49;
      a5[8].i32[2] = v50;
      a5[8].i32[3] = v51;
      a5[9].i32[0] = v52;
      a5[9].i32[1] = v53;
      a5[9].i32[2] = v54;
      a5[9].i32[3] = v55;
      char v24 = 3;
    }
    a5[39].i8[0] = v24;
  }
  else
  {
    sub_1854B5EC0((uint64_t)v65, (uint64_t)v70);
    memset(__src, 0, 73);
    memset(&__src[7], 0, 100);
    float32x4_t v25 = a2[3];
    float32x4_t v26 = a2[1];
    __src[26] = a2[2];
    __src[27] = v25;
    float32x4_t v27 = a2[1];
    __src[24] = *a2;
    __src[25] = v27;
    float32x4_t v28 = a4[3];
    __src[16] = a4[2];
    __src[17] = v28;
    float32x4_t v29 = a4[1];
    __src[14] = *a4;
    __src[15] = v29;
    __src[18] = a4[4];
    memset(&__src[19], 0, 80);
    memset(&__src[34], 0, 80);
    float32x4_t v30 = a2[3];
    __src[28] = a2[4];
    __src[29] = __src[24];
    float32x4_t v31 = a2[4];
    __src[32] = v30;
    __src[33] = v31;
    memset(&__src[5], 0, 25);
    *((void *)&__src[13] + 1) = 0x3FF0000000000000;
    __src[30] = v26;
    __src[31] = __src[26];
    sub_18593A4D4((uint64_t)v70, 1u);
    sub_1853B8150(a3, (uint64_t)v68, &qword_1E8FAE710);
    if ((v68[80] & 1) == 0)
    {
      *(void *)&__src[19] = v12;
      *((void *)&__src[19] + 1) = v13;
      *(void *)&__src[20] = v14;
      *((void *)&__src[20] + 1) = v15;
      *(void *)&__src[21] = v58;
      *((void *)&__src[21] + 1) = v63;
      *(void *)&__src[22] = v62;
      *((void *)&__src[22] + 1) = v61;
      *(void *)&__src[23] = v60;
      *((void *)&__src[23] + 1) = v59;
    }
    sub_1854B5EC0((uint64_t)v70, (uint64_t)v71);
    if (v73 < 0)
    {
      v73 &= ~0x8000000000000000;
      double v32 = v72;
      double v33 = v75;
      if (v74 > 0.0)
      {
        memcpy(__dst, v6, sizeof(__dst));
        *(double *)v34.i64 = v74;
        sub_185954198((float32x4_t *)&__src[29], v34);
      }
      if (v33 > 0.0)
      {
        double v35 = 6.28318531 / v32 * (6.28318531 / v32) * v33;
        float32x4_t v36 = vsubq_f32(*a4, *a2);
        float32x4_t v37 = vsubq_f32(a4[1], a2[1]);
        __src[19] = vaddq_f32((float32x4_t)__src[19], vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v36.f32), v35)), vmulq_n_f64(vcvt_hight_f64_f32(v36), v35)));
        __src[20] = vaddq_f32((float32x4_t)__src[20], vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v37.f32), v35)), vmulq_n_f64(vcvt_hight_f64_f32(v37), v35)));
        float32x4_t v38 = vsubq_f32(a4[2], a2[2]);
        float32x4_t v39 = vsubq_f32(a4[3], a2[3]);
        __src[21] = vaddq_f32((float32x4_t)__src[21], vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v38.f32), v35)), vmulq_n_f64(vcvt_hight_f64_f32(v38), v35)));
        __src[22] = vaddq_f32((float32x4_t)__src[22], vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v39.f32), v35)), vmulq_n_f64(vcvt_hight_f64_f32(v39), v35)));
        float32x4_t v40 = vsubq_f32(a4[4], a2[4]);
        __src[23] = vaddq_f32((float32x4_t)__src[23], vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v40.f32), v35)), vmulq_n_f64(vcvt_hight_f64_f32(v40), v35)));
      }
    }
    uint64_t result = (uint64_t)memcpy(a5, __src, 0x270uLL);
    a5[39].i8[0] = 0;
  }
  return result;
}

uint64_t sub_1858BA074(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  return sub_1854B3368(a1, a2, &qword_1E8FAEDD8, &qword_1E8FAEDD0, a3, a4, a5, a6);
}

uint64_t sub_1858BA088(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  long long v7 = a1[3];
  long long v27 = a1[2];
  long long v28 = v7;
  long long v29 = a1[4];
  long long v8 = a1[1];
  long long v25 = *a1;
  long long v26 = v8;
  uint64_t v9 = sub_186A1EF8C();
  uint64_t v23 = *(void *)(v9 - 8);
  uint64_t v24 = v9;
  MEMORY[0x1F4188790](v9);
  objc_super v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_186A1E6FC();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v13 = sub_186A1EF6C();
  MEMORY[0x1F4188790](v13 - 8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAE788);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 24) = 0;
  *(void *)(v14 + 16) = 0;
  *(void *)(v4 + 32) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB00B0);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 24) = 0;
  *(void *)(v15 + 16) = 0;
  *(void *)(v4 + 40) = v15;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 4_Block_object_dispose(&STACK[0x478], 8) = 0u;
  *(unsigned char *)(v4 + 12_Block_object_dispose(&STACK[0x478], 8) = 1;
  *(_OWORD *)(v4 + 14_Block_object_dispose(&STACK[0x478], 8) = 0u;
  *(_OWORD *)(v4 + 164) = 0u;
  *(_OWORD *)(v4 + 180) = 0u;
  *(_OWORD *)(v4 + 196) = 0u;
  *(_OWORD *)(v4 + 132) = 0u;
  *(unsigned char *)(v4 + 212) = 1;
  char v32 = 1;
  char v31 = 1;
  char v30 = 1;
  *(void *)(v4 + 296) = 0;
  *(_OWORD *)(v4 + 24_Block_object_dispose(&STACK[0x478], 8) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(unsigned char *)(v4 + 304) = 1;
  *(_OWORD *)(v4 + 30_Block_object_dispose(&STACK[0x478], 8) = 0u;
  *(_OWORD *)(v4 + 324) = 0u;
  *(_OWORD *)(v4 + 340) = 0u;
  *(_OWORD *)(v4 + 356) = 0u;
  *(_OWORD *)(v4 + 372) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 40_Block_object_dispose(&STACK[0x478], 8) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_OWORD *)(v4 + 456) = 0u;
  *(unsigned char *)(v4 + 472) = 1;
  *(_WORD *)(v4 + 38_Block_object_dispose(&STACK[0x478], 8) = 1;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v4 + 504) = 0;
  *(void *)(v4 + 512) = a2;
  *(void *)(v4 + 520) = a3;
  sub_1854B3328();
  swift_retain();
  sub_186A1EF5C();
  sub_186A1E6DC();
  (*(void (**)(char *, void, uint64_t))(v23 + 104))(v11, *MEMORY[0x1E4FBCC58], v24);
  *(void *)(v4 + 16) = sub_186A1EFCC();
  long long v35 = v27;
  long long v36 = v28;
  long long v33 = v25;
  long long v34 = v26;
  long long v39 = v26;
  long long v40 = v27;
  long long v41 = v28;
  long long v42 = v29;
  long long v37 = v29;
  long long v38 = v25;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAE760);
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + 176) = 0;
  long long v17 = v40;
  *(_OWORD *)(v16 + 112) = v39;
  *(_OWORD *)(v16 + 12_Block_object_dispose(&STACK[0x478], 8) = v17;
  long long v18 = v42;
  *(_OWORD *)(v16 + 144) = v41;
  *(_OWORD *)(v16 + 160) = v18;
  long long v19 = v36;
  *(_OWORD *)(v16 + 4_Block_object_dispose(&STACK[0x478], 8) = v35;
  *(_OWORD *)(v16 + 64) = v19;
  long long v20 = v38;
  *(_OWORD *)(v16 + 80) = v37;
  *(_OWORD *)(v16 + 96) = v20;
  long long v21 = v34;
  *(_OWORD *)(v16 + 16) = v33;
  *(_OWORD *)(v16 + 32) = v21;
  *(void *)(v4 + 24) = v16;
  swift_beginAccess();
  *(_OWORD *)(v4 + 196) = 0u;
  *(_OWORD *)(v4 + 180) = 0u;
  *(_OWORD *)(v4 + 164) = 0u;
  *(_OWORD *)(v4 + 14_Block_object_dispose(&STACK[0x478], 8) = 0u;
  *(_OWORD *)(v4 + 132) = 0u;
  *(unsigned char *)(v4 + 212) = 1;
  swift_beginAccess();
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 4_Block_object_dispose(&STACK[0x478], 8) = 0u;
  *(unsigned char *)(v4 + 12_Block_object_dispose(&STACK[0x478], 8) = 1;
  *(unsigned char *)(v4 + 48_Block_object_dispose(&STACK[0x478], 8) = 0;
  *(void *)(v4 + 496) = 0;
  return v4;
}

uint64_t sub_1858BA424()
{
  return sub_1858BA42C(v0);
}

uint64_t sub_1858BA42C(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = (char *)&v4 - v1;
  sub_1854F6CC0((uint64_t)&v4 - v1);
  return sub_1854C5748((uint64_t)v2);
}

void sub_1858BA4AC()
{
  sub_185A5807C(v0);
}

uint64_t sub_1858BA4B4@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  unint64_t v5 = (_OWORD *)(v2 + 24);
  swift_beginAccess();
  sub_1853B8150(v2 + 24, (uint64_t)__src, &qword_1E8FAE678);
  switch(v18)
  {
    case 1:
      memcpy(v16, __src, 0x150uLL);
      sub_18594A7F0(a1, a2);
      memcpy(v5, v16, 0x150uLL);
      char v6 = 1;
      goto LABEL_6;
    case 2:
      memcpy((void *)(v2 + 24), __src, 0x130uLL);
      sub_18594AB58((float *)a1, a2);
      char v6 = 2;
      goto LABEL_6;
    case 3:
      long long v7 = __src[2];
      long long v8 = __src[3];
      *(_OWORD *)(a1 + 32) = __src[2];
      *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x478], 8) = v8;
      long long v9 = __src[4];
      long long v10 = __src[5];
      *(_OWORD *)(a1 + 64) = __src[4];
      long long v11 = __src[7];
      *(_OWORD *)(v2 + 120) = __src[6];
      *(_OWORD *)(v2 + 136) = v11;
      long long v12 = __src[9];
      *(_OWORD *)(v2 + 152) = __src[8];
      *(_OWORD *)(v2 + 16_Block_object_dispose(&STACK[0x478], 8) = v12;
      long long v14 = __src[0];
      long long v13 = __src[1];
      *(_OWORD *)a1 = __src[0];
      *(_OWORD *)(a1 + 16) = v13;
      *(_OWORD *)(v2 + 56) = v7;
      *(_OWORD *)(v2 + 72) = v8;
      *(_OWORD *)(v2 + 8_Block_object_dispose(&STACK[0x478], 8) = v9;
      *(_OWORD *)(v2 + 104) = v10;
      *unint64_t v5 = v14;
      *(_OWORD *)(v2 + 40) = v13;
      char v6 = 3;
LABEL_6:
      *(unsigned char *)(v2 + 64_Block_object_dispose(&STACK[0x478], 8) = v6;
      break;
    default:
      memcpy(v16, __src, sizeof(v16));
      sub_18593A9CC(a1, a2);
      memcpy(v5, v16, 0x270uLL);
      *(unsigned char *)(v2 + 64_Block_object_dispose(&STACK[0x478], 8) = 0;
      break;
  }
  return swift_endAccess();
}

uint64_t sub_1858BA628()
{
  long long v1 = *(_OWORD *)(v0 + 80);
  void v10[2] = *(_OWORD *)(v0 + 64);
  void v10[3] = v1;
  long long v2 = *(_OWORD *)(v0 + 112);
  void v10[4] = *(_OWORD *)(v0 + 96);
  long long v3 = *(_OWORD *)(v0 + 48);
  v10[0] = *(_OWORD *)(v0 + 32);
  v10[1] = v3;
  long long v4 = *(_OWORD *)(v0 + 128);
  long long v5 = *(_OWORD *)(v0 + 160);
  long long v6 = *(_OWORD *)(v0 + 176);
  v9[2] = *(_OWORD *)(v0 + 144);
  v9[3] = v5;
  v9[4] = v6;
  long long v7 = *(uint64_t (**)(_OWORD *, _OWORD *))(v0 + 16);
  v9[0] = v2;
  v9[1] = v4;
  return v7(v10, v9);
}

uint64_t sub_1858BA68C()
{
  return sub_1858BA694(v0);
}

uint64_t sub_1858BA694(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 496);
  BOOL v2 = __OFSUB__(v1, 1);
  uint64_t v3 = v1 - 1;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = result;
    *(void *)(result + 496) = v3;
    if (!v3)
    {
      long long v5 = *(os_unfair_lock_s **)(result + 32);
      long long v6 = v5 + 4;
      long long v7 = v5 + 6;
      os_unfair_lock_lock(v5 + 6);
      sub_1854AEC24(v6, v11);
      os_unfair_lock_unlock(v7);
      uint64_t v8 = v11[0];
      uint64_t result = swift_release();
      if (!v8)
      {
        uint64_t result = swift_beginAccess();
        if ((*(unsigned char *)(v4 + 389) & 1) == 0)
        {
          long long v9 = *(void (**)(uint64_t))(v4 + 512);
          uint64_t v10 = swift_retain();
          v9(v10);
          return swift_release();
        }
      }
    }
  }
  return result;
}

uint64_t sub_1858BA75C()
{
  return sub_1853C1608((uint64_t)&qword_1E8FAED88, (uint64_t)sub_1854A8208, (uint64_t (*)(void, void, void, void, void, uint64_t, uint64_t))sub_1853C3864);
}

uint64_t sub_1858BA790()
{
  return sub_1853C4ADC((uint64_t (*)(void, void, void, void, void))sub_1858BA7A8);
}

void sub_1858BA7A8(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v9 = (char *)(a5 + 16);
  signpost_c2_removePresentationModifier_end(a1, a2);
  uint64_t v10 = (os_unfair_lock_s *)(*(void *)(a1 + 16) + 16);
  os_unfair_lock_lock(v10);
  signpost_c2_removePresentationModifier_end(v11, v12);
  swift_beginAccess();
  sub_1853B7020(a1 + 24, (uint64_t)v13, &qword_1E8FAE678);
  sub_18549962C((uint64_t)v13, a1, a2, a3, a4, v9);
  sub_1853B93B8((uint64_t)v13, &qword_1E8FAE678);
  os_unfair_lock_unlock(v10);
}

uint64_t sub_1858BA878(double a1, uint64_t a2, uint64_t a3, char a4, unsigned char *a5, uint64_t (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = 0;
  long long v21 = (void *)&unk_1E8FB0000;
  if ((*(unsigned char *)(a3 + 672) & 1) == 0 && (a4 & 1) == 0)
  {
    uint64_t v22 = a6();
    long long v21 = &unk_1E8FB0000;
    if ((v22 & 1) == 0)
    {
      signpost_c2_removePresentationModifier_end(v22, v23);
      uint64_t v26 = sub_1858BA4B4((uint64_t)&v72, a1);
      v71[2] = v74;
      v71[3] = v75;
      v71[4] = v76;
      v71[1] = v73;
      v71[0] = v72;
      MEMORY[0x1F4188790](v26);
      uint64_t v28 = (uint64_t)&v27[4];
      long long v29 = v27 + 44;
      os_unfair_lock_lock(v27 + 44);
      sub_1858BAFE0(v28);
      os_unfair_lock_unlock(v29);
      signpost_c2_removePresentationModifier_end(v30, v31);
      swift_beginAccess();
      sub_1853B7020(a3 + 24, (uint64_t)v71, &qword_1E8FAE678);
      sub_1853B7020((uint64_t)v71, (uint64_t)v70, &qword_1E8FAE678);
      switch(v70[624])
      {
        case 1:
          memcpy(v77, v70, 0x150uLL);
          BOOL v32 = sub_18594BB8C();
          goto LABEL_12;
        case 2:
          memcpy(v69, v70, 0x130uLL);
          char v33 = v69[18];
          sub_1853B93B8((uint64_t)v69, &qword_1E8FB2C88);
          goto LABEL_14;
        case 3:
          sub_1853B93B8((uint64_t)v71, &qword_1E8FAE678);
          goto LABEL_17;
        default:
          memcpy(v77, v70, sizeof(v77));
          BOOL v32 = sub_185942174();
LABEL_12:
          char v33 = v32;
LABEL_14:
          sub_1853B93B8((uint64_t)v71, &qword_1E8FAE678);
          if (v33)
          {
LABEL_17:
            sub_1853B7020(a3 + 24, (uint64_t)v69, &qword_1E8FAE678);
            sub_1853B7020((uint64_t)v69, (uint64_t)v67, &qword_1E8FAE678);
            switch(v68)
            {
              case 1:
                long long v62 = v67[18];
                long long v64 = v67[19];
                long long v58 = v67[16];
                long long v60 = v67[17];
                long long v41 = v67[20];
                goto LABEL_22;
              case 2:
                memcpy(v66, v67, sizeof(v66));
                long long v62 = v66[15];
                long long v64 = v66[16];
                long long v58 = v66[13];
                long long v60 = v66[14];
                long long v56 = v66[17];
                sub_1853B93B8((uint64_t)v66, &qword_1E8FB2C88);
                goto LABEL_23;
              case 3:
                long long v62 = v67[2];
                long long v64 = v67[3];
                long long v58 = v67[0];
                long long v60 = v67[1];
                long long v41 = v67[4];
                goto LABEL_22;
              default:
                long long v62 = v67[16];
                long long v64 = v67[17];
                long long v58 = v67[14];
                long long v60 = v67[15];
                long long v41 = v67[18];
LABEL_22:
                long long v56 = v41;
LABEL_23:
                sub_1853B93B8((uint64_t)v69, &qword_1E8FAE678);
                long long v38 = v58;
                uint64_t v40 = *((void *)&v56 + 1);
                uint64_t v39 = v56;
                int v34 = 1;
                long long v36 = v62;
                long long v35 = v64;
                long long v37 = v60;
                break;
            }
          }
          else
          {
            int v34 = 0;
            long long v35 = v75;
            long long v36 = v74;
            long long v37 = v73;
            long long v38 = v72;
            uint64_t v40 = *((void *)&v76 + 1);
            uint64_t v39 = v76;
          }
          v69[0] = v38;
          v69[1] = v37;
          v69[2] = v36;
          v69[3] = v35;
          *(void *)&v69[4] = v39;
          *((void *)&v69[4] + 1) = v40;
          uint64_t v55 = v40;
          uint64_t v57 = v39;
          if (v34)
          {
            memset(v66, 0, 80);
          }
          else
          {
            long long v63 = v36;
            long long v65 = v35;
            long long v59 = v38;
            long long v61 = v37;
            sub_1859534F4(v66);
            long long v38 = v59;
            long long v37 = v61;
            long long v36 = v63;
            long long v35 = v65;
          }
          long long v42 = v38;
          long long v43 = v37;
          long long v44 = v36;
          long long v45 = v35;
          *a5 = v34;
          swift_beginAccess();
          if ((*(unsigned char *)(a9 + 80) & 1) != 0
            || (long long v46 = *(_OWORD *)(a9 + 16),
                v67[0] = *(_OWORD *)a9,
                v67[1] = v46,
                long long v47 = *(_OWORD *)(a9 + 48),
                v67[2] = *(_OWORD *)(a9 + 32),
                v67[3] = v47,
                uint8_t v67[4] = *(_OWORD *)(a9 + 64),
                !sub_1859A49E8((uint64_t)v67, (uint64_t)v69)))
          {
            if (qword_1E8FB0100 != -1) {
              swift_once();
            }
            uint64_t v48 = swift_allocObject();
            *(void *)(v48 + 16) = a10;
            *(void *)(v48 + 24) = a11;
            long long v49 = v69[3];
            *(_OWORD *)(v48 + 64) = v69[2];
            *(_OWORD *)(v48 + 80) = v49;
            long long v50 = v69[1];
            *(_OWORD *)(v48 + 32) = v69[0];
            *(_OWORD *)(v48 + 4_Block_object_dispose(&STACK[0x478], 8) = v50;
            long long v51 = v66[2];
            long long v52 = v66[3];
            long long v53 = v66[0];
            *(_OWORD *)(v48 + 12_Block_object_dispose(&STACK[0x478], 8) = v66[1];
            *(_OWORD *)(v48 + 144) = v51;
            long long v54 = v66[4];
            *(_OWORD *)(v48 + 160) = v52;
            *(_OWORD *)(v48 + 176) = v54;
            *(_OWORD *)(v48 + 96) = v69[4];
            *(_OWORD *)(v48 + 112) = v53;
            swift_retain();
            sub_1853B65C4((uint64_t)sub_1858BA628, v48);
            swift_release();
          }
          swift_beginAccess();
          *(_OWORD *)a9 = v42;
          *(_OWORD *)(a9 + 16) = v43;
          *(_OWORD *)(a9 + 32) = v44;
          *(_OWORD *)(a9 + 4_Block_object_dispose(&STACK[0x478], 8) = v45;
          *(void *)(a9 + 64) = v57;
          *(void *)(a9 + 72) = v55;
          *(unsigned char *)(a9 + 80) = 0;
          long long v21 = (void *)&unk_1E8FB0000;
          if ((*a5 & 1) == 0) {
            return swift_release();
          }
          goto LABEL_5;
      }
    }
  }
  *a5 = 1;
  *(unsigned char *)(v20 + 16) = 1;
LABEL_5:
  if (v21[32] != -1) {
    swift_once();
  }
  uint64_t v24 = (void *)swift_allocObject();
  _OWORD v24[2] = a3;
  v24[3] = a12;
  void v24[4] = a13;
  v24[5] = a8;
  v24[6] = v20;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1853B65C4((uint64_t)sub_1858BA790, (uint64_t)v24);
  swift_release();
  return swift_release();
}

uint64_t sub_1858BAEB4(uint64_t a1)
{
  return sub_1854C1464(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void))sub_1858BAECC);
}

uint64_t sub_1858BAECC(char a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15 = a6 + 16;
  v27[0] = 0;
  double v16 = a9 / UIAnimationDragCoefficient();
  signpost_c2_removePresentationModifier_end(v17, v18);
  long long v19 = (os_unfair_lock_s *)(*(void *)(a2 + 16) + 16);
  os_unfair_lock_lock(v19);
  signpost_c2_removePresentationModifier_end(v20, v21);
  swift_beginAccess();
  sub_1853B7020(a2 + 24, (uint64_t)v26, &qword_1E8FAE678);
  sub_1858BA878(v16, (uint64_t)v26, a2, a1, v27, a3, a4, a5, v15, a7, a8, a10, a11);
  sub_1853B93B8((uint64_t)v26, &qword_1E8FAE678);
  os_unfair_lock_unlock(v19);
  return v27[0];
}

__n128 sub_1858BAFE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v2;
  __n128 result = *(__n128 *)(v2 + 16);
  long long v4 = *(_OWORD *)(v2 + 32);
  long long v5 = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x478], 8) = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 144) = v5;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v4;
  return result;
}

unint64_t sub_1858BB004()
{
  unint64_t result = qword_1E8FAF790;
  if (!qword_1E8FAF790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FAF790);
  }
  return result;
}

unint64_t sub_1858BB058()
{
  unint64_t result = qword_1E8FAF788;
  if (!qword_1E8FAF788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FAF788);
  }
  return result;
}

unint64_t sub_1858BB0AC()
{
  unint64_t result = qword_1E8FAF780;
  if (!qword_1E8FAF780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FAF780);
  }
  return result;
}

unint64_t sub_1858BB100()
{
  unint64_t result = qword_1E8FAF778;
  if (!qword_1E8FAF778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FAF778);
  }
  return result;
}

unint64_t sub_1858BB154(uint64_t a1)
{
  unint64_t result = sub_1858BB100();
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = result;
  return result;
}

unint64_t sub_1858BB17C(uint64_t a1)
{
  unint64_t result = sub_1858BB004();
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = result;
  return result;
}

uint64_t type metadata accessor for _UIMagicMorphView()
{
  return self;
}

void sub_1858BB1F0()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255AD0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_186B84780;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____UIMagicMorphView_contentSize);
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____UIMagicMorphView_insets);
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  unint64_t v14 = v1;
  sub_186A1EB5C();
  if (v14 >> 62)
  {
    sub_1853B985C(0, (unint64_t *)&qword_1EB255C28);
    id v12 = v2;
    id v13 = v3;
    swift_bridgeObjectRetain();
    sub_186A1F61C();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v4 = v2;
    id v5 = v3;
    swift_bridgeObjectRetain();
    sub_186A1F8CC();
    sub_1853B985C(0, (unint64_t *)&qword_1EB255C28);
  }
  swift_bridgeObjectRelease();
  long long v6 = self;
  sub_1853B985C(0, (unint64_t *)&qword_1EB255C28);
  long long v7 = (void *)sub_186A1EB1C();
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v18 = sub_185A63470;
  uint64_t v19 = v8;
  unint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = 1107296256;
  double v16 = sub_1856A95EC;
  uint64_t v17 = &block_descriptor_98_0;
  long long v9 = _Block_copy(&v14);
  swift_release();
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v18 = sub_185A634A0;
  uint64_t v19 = v10;
  unint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = 1107296256;
  double v16 = sub_1856A95EC;
  uint64_t v17 = &block_descriptor_102;
  uint64_t v11 = _Block_copy(&v14);
  swift_release();
  objc_msgSend(v6, sel__createTransformerWithInputAnimatableProperties_modelValueSetter_presentationValueSetter_, v7, v9, v11);
  _Block_release(v11);
  _Block_release(v9);
}

uint64_t (*sub_1858BB4A4(uint64_t a1, uint64_t a2))(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  double v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v9 = &v14[-v8 - 8];
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 16))(a1, a2, v7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAFF90);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v14);
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = (void *)swift_allocObject();
    _OWORD v11[2] = a1;
    void v11[3] = a2;
    void v11[4] = v2;
    uint64_t v10 = sub_1858DC890;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  return v10;
}

id sub_1858BB620(uint64_t a1)
{
  return sub_185539228(a1, v1[4], v1[2], v1[3]);
}

unint64_t sub_1858BB630()
{
  unint64_t result = qword_1EB255CF8;
  if (!qword_1EB255CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB255CF8);
  }
  return result;
}

unint64_t sub_1858BB684()
{
  unint64_t result = qword_1EB255CF0;
  if (!qword_1EB255CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB255CF0);
  }
  return result;
}

unint64_t sub_1858BB6D8()
{
  unint64_t result = qword_1EB255CC0;
  if (!qword_1EB255CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB255CC0);
  }
  return result;
}

unint64_t sub_1858BB72C()
{
  unint64_t result = qword_1E8FB0178;
  if (!qword_1E8FB0178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FB0178);
  }
  return result;
}

unint64_t sub_1858BB780(uint64_t a1)
{
  unint64_t result = sub_1858BB72C();
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = result;
  return result;
}

unint64_t sub_1858BB7A8(uint64_t a1)
{
  unint64_t result = sub_1858BB630();
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for UICellAccessory()
{
  return &type metadata for UICellAccessory;
}

ValueMetadata *type metadata accessor for UICellAccessory.DisclosureIndicatorOptions()
{
  return &type metadata for UICellAccessory.DisclosureIndicatorOptions;
}

id sub_1858BB7F8@<X0>(id result@<X0>, uint64_t a2@<X1>, id a3@<X2>, void *a4@<X3>, id *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = *(void *)a2;
  char v11 = *(unsigned char *)(a2 + 8);
  char v12 = *(unsigned char *)(a2 + 9);
  if (result == 2)
  {
    if (*a4 != -1) {
      swift_once();
    }
    unint64_t result = objc_msgSend(*a5, sel_isHidden);
    char v13 = (char)result;
    if ((v12 & 1) == 0)
    {
LABEL_5:
      char v14 = v11 & 1;
      if (a3) {
        goto LABEL_20;
      }
      goto LABEL_17;
    }
  }
  else
  {
    char v13 = result & 1;
    if ((*(unsigned char *)(a2 + 9) & 1) == 0) {
      goto LABEL_5;
    }
  }
  if (*a4 != -1) {
    swift_once();
  }
  unint64_t result = objc_msgSend(*a5, sel_reservedLayoutWidth);
  if (v15 == 0.0)
  {
    char v14 = 1;
    uint64_t v10 = 0;
    if (a3) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v10 = *(void *)&v15;
    if (v15 == -1.79769313e308)
    {
      char v14 = 1;
      uint64_t v10 = 1;
      if (a3) {
        goto LABEL_20;
      }
    }
    else
    {
      char v14 = 0;
      if (a3) {
        goto LABEL_20;
      }
    }
  }
LABEL_17:
  if (*a4 != -1) {
    swift_once();
  }
  unint64_t result = objc_msgSend(*a5, sel_tintColor);
  a3 = result;
LABEL_20:
  *(unsigned char *)a6 = v13;
  *(void *)(a6 + _Block_object_dispose(&STACK[0x478], 8) = v10;
  *(unsigned char *)(a6 + 16) = v14;
  *(void *)(a6 + 24) = a3;
  return result;
}

id UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1858BB7F8(a1, a2, a3, qword_1E8FAF470, (id *)&qword_1E8FAF460, a4);
}

id sub_1858BB98C()
{
  id result = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryDisclosureIndicator), sel_init);
  qword_1E8FAF460 = (uint64_t)result;
  return result;
}

id static UICellAccessory.disclosureIndicator(displayed:options:)@<X0>(unsigned __int8 *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  return sub_1856FB4D0(a1, a2, (Class *)off_1E52D35E8, 0, a3);
}

uint64_t storeEnumTagSinglePayload for UICellAccessory.LayoutDimension(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)id result = 0;
    *(unsigned char *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0;
    *(_DWORD *)id result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for UICellAccessory.LayoutDimension()
{
  return &type metadata for UICellAccessory.LayoutDimension;
}

ValueMetadata *type metadata accessor for UICellAccessory.DisplayedState()
{
  return &type metadata for UICellAccessory.DisplayedState;
}

void destroy for UICellAccessory.DetailOptions(uint64_t a1)
{
}

_DWORD *sub_1858BBA38()
{
  type metadata accessor for _UISwiftTraits.UnfairLock();
  uint64_t v0 = swift_allocObject();
  id result = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = result;
  *id result = 0;
  off_1EB256A08 = (_UNKNOWN *)v0;
  return result;
}

void sub_1858BBA88()
{
  off_1EB2569F8 = (_UNKNOWN *)MEMORY[0x1E4FBC868];
}

void sub_1858BBA9C()
{
  off_1EB2569E8 = (_UNKNOWN *)MEMORY[0x1E4FBC868];
}

ValueMetadata *type metadata accessor for _UISwiftTraits.HashableTraitToken()
{
  return &type metadata for _UISwiftTraits.HashableTraitToken;
}

unint64_t sub_1858BBAC4()
{
  unint64_t result = qword_1EB2569E0;
  if (!qword_1EB2569E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB2569E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for _UISwiftTraits.HashableMetatype()
{
  return &type metadata for _UISwiftTraits.HashableMetatype;
}

unint64_t sub_1858BBB2C()
{
  unint64_t result = qword_1EB2569D8;
  if (!qword_1EB2569D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB2569D8);
  }
  return result;
}

uint64_t type metadata accessor for _UISwiftTraits.UnfairLock()
{
  return self;
}

void sub_1858BBBA4()
{
  if (qword_1EB256A10 != -1) {
    swift_once();
  }
  uint64_t v0 = off_1EB256A08;
  os_unfair_lock_lock(*((os_unfair_lock_t *)off_1EB256A08 + 2));
  sub_1854A49F8();
  uint64_t v1 = (os_unfair_lock_s *)*((void *)v0 + 2);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1858BBC2C()
{
  uint64_t v0 = sub_1858B62A0((uint64_t)&unk_1ED0B4758);
  uint64_t result = swift_arrayDestroy();
  qword_1E8FB0008 = v0;
  return result;
}

uint64_t sub_1858BBC78(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1858BBCC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1858BBD08()
{
  unint64_t result = qword_1E8FAF2A0;
  if (!qword_1E8FAF2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FAF2A0);
  }
  return result;
}

uint64_t sub_1858BBD5C()
{
  uint64_t result = sub_186A1D29C();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_186A1D28C();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1858BBE5C()
{
  return sub_18549BAB4(&qword_1EB2564B8, (void (*)(uint64_t))type metadata accessor for AttributeScopes.UIKitAttributes);
}

uint64_t sub_1858BBEA4()
{
  return sub_18549BAB4(&qword_1EB2564B0, (void (*)(uint64_t))type metadata accessor for AttributeScopes.UIKitAttributes);
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.ExpansionAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.ExpansionAttribute;
}

uint64_t sub_1858BBEFC(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB255BF8, &qword_1EB255BE0);
}

uint64_t sub_1858BBF24()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB255BE0 = result;
  unk_1EB255BE8 = v1;
  return result;
}

uint64_t sub_1858BBF54()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB256498 = result;
  unk_1EB2564A0 = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.LigatureAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.LigatureAttribute;
}

uint64_t sub_1858BBF94(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB255BD8, &qword_1EB255BC8);
}

uint64_t sub_1858BBFBC()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB255BC8 = result;
  unk_1EB255BD0 = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.ShadowAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.ShadowAttribute;
}

uint64_t sub_1858BBFFC(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB255BC0, &qword_1EB255BB0);
}

uint64_t sub_1858BC024()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB255BB0 = result;
  *(void *)algn_1EB255BB8 = v1;
  return result;
}

uint64_t sub_1858BC058()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB256480 = result;
  *(void *)algn_1EB256488 = v1;
  return result;
}

unint64_t sub_1858BC088()
{
  unint64_t result = qword_1E8FAED58;
  if (!qword_1E8FAED58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FAED58);
  }
  return result;
}

uint64_t sub_1858BC0E0()
{
  return sub_1858B3758(&qword_1EB255A88, (unint64_t *)&qword_1EB255A80);
}

uint64_t sub_1858BC110()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB256468 = result;
  unk_1EB256470 = v1;
  return result;
}

uint64_t sub_1858BC140()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB256450 = result;
  *(void *)algn_1EB256458 = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.StrikethroughColorAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.StrikethroughColorAttribute;
}

uint64_t sub_1858BC180(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB255BA8, &qword_1EB255B98);
}

uint64_t sub_1858BC1A8()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB255B98 = result;
  unk_1EB255BA0 = v1;
  return result;
}

uint64_t sub_1858BC1D8()
{
  uint64_t result = sub_186A1E95C();
  qword_1E8FB00E0 = result;
  *(void *)algn_1E8FB00E8 = v1;
  return result;
}

unint64_t sub_1858BC208()
{
  unint64_t result = qword_1E8FAED50;
  if (!qword_1E8FAED50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FAED50);
  }
  return result;
}

uint64_t sub_1858BC260()
{
  return sub_1858B3758(qword_1EB255970, (unint64_t *)&qword_1EB255AB0);
}

uint64_t sub_1858BC290()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB256438 = result;
  unk_1EB256440 = v1;
  return result;
}

uint64_t sub_1858BC2C0()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB256420 = result;
  *(void *)algn_1EB256428 = v1;
  return result;
}

uint64_t sub_1858BC2F0()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB256400 = result;
  unk_1EB256408 = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.UnderlineColorAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.UnderlineColorAttribute;
}

uint64_t sub_1858BC330(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB255B90, &qword_1EB255B78);
}

uint64_t sub_1858BC358()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB255B78 = result;
  unk_1EB255B80 = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.ParagraphStyleAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.ParagraphStyleAttribute;
}

uint64_t sub_1858BC398()
{
  return sub_1858B3758(&qword_1E8FAFC10, &qword_1E8FAFC08);
}

uint64_t sub_1858BC3C8()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB255B58 = result;
  unk_1EB255B60 = v1;
  return result;
}

uint64_t sub_1858BC3F8()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB2563E8 = result;
  unk_1EB2563F0 = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.TextItemTagAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.TextItemTagAttribute;
}

uint64_t sub_1858BC438(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB255B50, &qword_1EB255B40);
}

uint64_t sub_1858BC460()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB255B40 = result;
  *(void *)algn_1EB255B48 = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.StrokeWidthAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.StrokeWidthAttribute;
}

uint64_t sub_1858BC4A0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB255B38, &qword_1EB255B28);
}

uint64_t sub_1858BC4C8()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB255B28 = result;
  unk_1EB255B30 = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.StrokeColorAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.StrokeColorAttribute;
}

uint64_t sub_1858BC508(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB255B20, &qword_1EB255B08);
}

uint64_t sub_1858BC530()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB255B08 = result;
  *(void *)algn_1EB255B10 = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.ObliquenessAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.ObliquenessAttribute;
}

uint64_t sub_1858BC570(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB255B00, &qword_1EB255AF0);
}

uint64_t sub_1858BC598()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB255AF0 = result;
  *(void *)algn_1EB255AF8 = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributeScopes.UIKitAttributes.TextEffectAttribute()
{
  return &type metadata for AttributeScopes.UIKitAttributes.TextEffectAttribute;
}

uint64_t sub_1858BC5D8(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB255AE8, &qword_1EB255AD8);
}

uint64_t sub_1858BC600()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB255AD8 = result;
  unk_1EB255AE0 = v1;
  return result;
}

uint64_t sub_1858BC630()
{
  uint64_t result = sub_186A1E95C();
  qword_1EB255C78 = result;
  unk_1EB255C80 = v1;
  return result;
}

void sub_1858C1F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1858C2B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1858C2D24()
{
  return 0;
}

uint64_t sub_1858C2D30()
{
  return static UITraitDefinition.name.getter();
}

uint64_t static UITraitDefinition.name.getter()
{
  return sub_186A1E98C();
}

uint64_t sub_1858C2D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *))(v6 + 16))((char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAEAC8);
  if (swift_dynamicCast())
  {
    sub_1854B1F20(v11, (uint64_t)v13);
    uint64_t v7 = v14;
    uint64_t v8 = __swift_project_boxed_opaque_existential_0Tm(v13, v14);
    char v9 = sub_1858C2EC0((uint64_t)v8, a2, a3, v7);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v13);
  }
  else
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    sub_1853B93B8((uint64_t)v11, &qword_1E8FB16A0);
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_1858C2EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  uint64_t result = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(*(void *)(v9 - 8) + 64) == v7)
  {
    (*(void (**)(char *))(v5 + 16))(v8);
    char v10 = sub_186A1E91C();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a4);
    return v10 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1858C2FD8()
{
  uint64_t result = sub_186A1D1CC();
  qword_1E8FB0198 = result;
  return result;
}

uint64_t sub_1858C2FF8(uint64_t a1, uint64_t a2)
{
  return sub_1854AF474(v2, 0, 0, a1, a2);
}

uint64_t sub_1858C3010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(long long *, long long *))(a1 + 32);
  if (!a2)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    long long v8 = 0u;
    long long v9 = 0u;
    goto LABEL_6;
  }
  *((void *)&v11 + 1) = swift_getObjectType();
  *(void *)&long long v10 = a2;
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
  *((void *)&v9 + 1) = swift_getObjectType();
  *(void *)&long long v8 = a3;
LABEL_6:
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  char v6 = v5(&v10, &v8);
  swift_release();
  sub_1853B93B8((uint64_t)&v8, &qword_1EB256B10);
  sub_1853B93B8((uint64_t)&v10, &qword_1EB256B10);
  return v6 & 1;
}

id sub_1858C30E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = self;
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  long long v8 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  long long v9 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v15, a3, a4);
  if (v16) {
    double v10 = 1.79769313e308;
  }
  else {
    double v10 = v15;
  }
  char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  id v13 = objc_msgSend(v7, sel__defineCGFloatTraitWithName_identifier_defaultValue_affectsColorAppearance_defaultValueRepresentsUnspecified_isPrivate_placeholderToken_, v8, v9, v11 & 1, v12 & 1, (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4) & 1, a1, v10);

  return v13;
}

id sub_1858C3284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = self;
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  long long v8 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  long long v9 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v15, a3, a4);
  uint64_t v10 = v15;
  char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  id v13 = objc_msgSend(v7, sel__defineNSIntegerTraitWithName_identifier_defaultValue_affectsColorAppearance_defaultValueRepresentsUnspecified_isPrivate_placeholderToken_, v8, v9, v10, v11 & 1, v12 & 1, (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4) & 1, a1);

  return v13;
}

id sub_1858C340C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = self;
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  long long v8 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  long long v9 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  uint64_t v10 = &v16;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v16, a3, a4);
  if (v17 == 1)
  {
    if (qword_1E8FB0190 != -1) {
      swift_once();
    }
    uint64_t v10 = &qword_1E8FB0198;
  }
  uint64_t v11 = *v10;
  char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  char v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  id v14 = objc_msgSend(v7, sel__defineNSIntegerTraitWithName_identifier_defaultValue_affectsColorAppearance_defaultValueRepresentsUnspecified_isPrivate_placeholderToken_, v8, v9, v11, v12 & 1, v13 & 1, (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4) & 1, a1);

  return v14;
}

id sub_1858C35DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = self;
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  long long v8 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  long long v9 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v15, a3, a4);
  uint64_t v10 = v15;
  char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  id v13 = objc_msgSend(v7, sel__defineNSIntegerTraitWithName_identifier_defaultValue_affectsColorAppearance_defaultValueRepresentsUnspecified_isPrivate_placeholderToken_, v8, v9, v10, v11 & 1, v12 & 1, (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4) & 1, a1);

  return v13;
}

id sub_1858C3764(uint64_t a1)
{
  if (qword_1EB2566A8 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  if (qword_1EB256660 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  char v3 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  if (qword_1EB256688 != -1) {
    swift_once();
  }
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638);
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_1EB256670);
  uint64_t v18 = (void *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EB2564E0);
  uint64_t aBlock = _s5UIKit26UITraitTypesettingLanguageV15_customRawValue3forSSSg10Foundation6LocaleV0D0VSg_tFZ_0(v5);
  uint64_t v16 = v6;
  sub_1853B76BC((uint64_t)&aBlock, (uint64_t)v21);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v23, (uint64_t)v21, &qword_1EB256B10);
  uint64_t v7 = v22;
  sub_1853B93B8((uint64_t)v21, &qword_1EB256B10);
  if (v7)
  {
    v23[0] = aBlock;
    v23[1] = v16;
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_186A1F90C();
  }
  else
  {
    uint64_t v8 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&aBlock);
  uint64_t v9 = sub_1858B6684();
  if (v9)
  {
    uint64_t v19 = v9;
    uint64_t v20 = v10;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v16 = 1107296256;
    char v17 = sub_1858C3010;
    uint64_t v18 = &block_descriptor_277;
    char v11 = _Block_copy(&aBlock);
    swift_release();
  }
  else
  {
    char v11 = 0;
  }
  LOBYTE(v14) = 0;
  id v12 = objc_msgSend(self, sel__defineObjectTraitWithName_identifier_defaultValue_equalityHandler_affectsColorAppearance_defaultValueRepresentsUnspecified_isPrivate_placeholderToken_, v2, v3, v8, v11, 0, 1, v14, a1);
  _Block_release(v11);

  swift_unknownObjectRelease();
  return v12;
}

id sub_1858C3A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a1;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&AssociatedTypeWitness - v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a3, v6);
  uint64_t v26 = sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(a3, v6);
  uint64_t v25 = sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a3, v6);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(a4 + 24);
  long long v29 = (void *)swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_0(aBlock);
  v10(v9, a3, a4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  sub_1853B76BC((uint64_t)aBlock, (uint64_t)v32);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v34, (uint64_t)v32, &qword_1EB256B10);
  uint64_t v11 = v33;
  sub_1853B93B8((uint64_t)v32, &qword_1EB256B10);
  if (v11) {
    uint64_t v12 = sub_186A1F83C();
  }
  else {
    uint64_t v12 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)aBlock);
  id v13 = sub_1858C3DB4(a3, a4);
  if (v13)
  {
    uint64_t v30 = v13;
    uint64_t v31 = v14;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1858C3010;
    long long v29 = &block_descriptor_313;
    uint64_t v15 = _Block_copy(aBlock);
    swift_release();
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = self;
  char v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(a3, v6);
  char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(a3, v6);
  LOBYTE(v23) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(a3, v6) & 1;
  uint64_t v20 = (void *)v25;
  uint64_t v19 = (void *)v26;
  id v21 = objc_msgSend(v16, sel__defineObjectTraitWithName_identifier_defaultValue_equalityHandler_affectsColorAppearance_defaultValueRepresentsUnspecified_isPrivate_placeholderToken_, v26, v25, v12, v15, v17 & 1, v18 & 1, v23, v27);
  _Block_release(v15);

  swift_unknownObjectRelease();
  return v21;
}

uint64_t (*sub_1858C3DB4(uint64_t a1, uint64_t a2))(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = &v18[-v8 - 8];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v13 = &v18[-v12 - 8];
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(a2 + 24))(v9, a1, a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAFF90);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v18);
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = a1;
    v15[3] = a2;
    void v15[4] = v2;
    uint64_t v14 = sub_1858DC7A8;
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v14;
}

uint64_t sub_1858C4008(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_186A1F12C();
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = *(void *)(a1 + 24);
  sub_1853B7020(a2, (uint64_t)v37, &qword_1EB256B10);
  uint64_t v18 = v17 | v38;
  sub_1853B93B8((uint64_t)v37, &qword_1EB256B10);
  if (v18)
  {
    uint64_t v30 = v14;
    uint64_t v31 = v16;
    BOOL v32 = v8;
    uint64_t v33 = v5;
    sub_1853B7020(a1, (uint64_t)v36, &qword_1EB256B10);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
    char v20 = swift_dynamicCast();
    uint64_t v21 = v35;
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
    if (v20)
    {
      v22(v11, 0, 1, AssociatedTypeWitness);
      uint64_t v23 = (uint64_t)v31;
      uint64_t v24 = v11;
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
      v25(v31, v24, AssociatedTypeWitness);
      sub_1853B7020(a2, (uint64_t)v36, &qword_1EB256B10);
      uint64_t v26 = v32;
      if (swift_dynamicCast())
      {
        v22(v26, 0, 1, AssociatedTypeWitness);
        uint64_t v27 = (uint64_t)v30;
        v25(v30, v26, AssociatedTypeWitness);
        char v19 = sub_1858C2D7C(v23, v27, AssociatedTypeWitness);
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
        v28(v27, AssociatedTypeWitness);
        v28(v23, AssociatedTypeWitness);
        return v19 & 1;
      }
      v22(v26, 1, 1, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v33);
    }
    else
    {
      v22(v11, 1, 1, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v33);
    }
    char v19 = 0;
    return v19 & 1;
  }
  char v19 = 1;
  return v19 & 1;
}

id sub_1858C4394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v19 = a1;
  uint64_t v6 = *(void *)(a4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v17 - v9;
  id v18 = self;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(a3, v6);
  uint64_t v11 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(a3, v6);
  uint64_t v12 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a3, v6);
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t))(v4 + 24))(&v20, v10, a3, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  uint64_t v13 = v20;
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(a3, v6);
  LOBYTE(AssociatedTypeWitness) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(a3, v6);
  char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 56))(a3, v6);
  id v15 = objc_msgSend(v18, sel__defineNSIntegerTraitWithName_identifier_defaultValue_affectsColorAppearance_defaultValueRepresentsUnspecified_isPrivate_placeholderToken_, v11, v12, v13, v4 & 1, AssociatedTypeWitness & 1, v14 & 1, v19);

  return v15;
}

id sub_1858C45EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v25 - v10;
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  uint64_t v27 = sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  uint64_t v26 = sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  uint64_t v30 = (void *)swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_0(aBlock);
  sub_186A1EAEC();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  sub_1853B76BC((uint64_t)aBlock, (uint64_t)v33);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v35, (uint64_t)v33, &qword_1EB256B10);
  uint64_t v12 = v34;
  sub_1853B93B8((uint64_t)v33, &qword_1EB256B10);
  if (v12) {
    uint64_t v13 = sub_186A1F83C();
  }
  else {
    uint64_t v13 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)aBlock);
  char v14 = sub_1858C4988(a3, a4, a5);
  if (v14)
  {
    uint64_t v31 = v14;
    uint64_t v32 = v15;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1858C3010;
    uint64_t v30 = &block_descriptor_295;
    uint64_t v16 = _Block_copy(aBlock);
    swift_release();
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v17 = self;
  char v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  char v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  LOBYTE(v24) = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4) & 1;
  uint64_t v21 = (void *)v26;
  uint64_t v20 = (void *)v27;
  id v22 = objc_msgSend(v17, sel__defineObjectTraitWithName_identifier_defaultValue_equalityHandler_affectsColorAppearance_defaultValueRepresentsUnspecified_isPrivate_placeholderToken_, v27, v26, v13, v16, v18 & 1, v19 & 1, v24, v28);
  _Block_release(v16);

  swift_unknownObjectRelease();
  return v22;
}

uint64_t (*sub_1858C4988(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = &v21[-v9 - 8];
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  char v14 = &v21[-v13 - 8];
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  uint64_t v20 = v3;
  v15(a1, a2);
  sub_186A1EAEC();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAFF90);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v21);
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = a1;
    v17[3] = a2;
    uint64_t v18 = v20;
    v17[4] = a3;
    long long v17[5] = v18;
    uint64_t v16 = sub_1858DC714;
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v16;
}

uint64_t sub_1858C4BD0(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_186A1F12C();
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  char v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = *(void *)(a1 + 24);
  sub_1853B7020(a2, (uint64_t)v37, &qword_1EB256B10);
  uint64_t v18 = v17 | v38;
  sub_1853B93B8((uint64_t)v37, &qword_1EB256B10);
  if (v18)
  {
    uint64_t v31 = v14;
    uint64_t v32 = v16;
    uint64_t v33 = v8;
    sub_1853B7020(a1, (uint64_t)v36, &qword_1EB256B10);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
    char v20 = swift_dynamicCast();
    uint64_t v21 = v35;
    id v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
    if (v20)
    {
      uint64_t v30 = v5;
      v22(v11, 0, 1, AssociatedTypeWitness);
      uint64_t v23 = (uint64_t)v32;
      uint64_t v24 = v11;
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
      v25(v32, v24, AssociatedTypeWitness);
      sub_1853B7020(a2, (uint64_t)v36, &qword_1EB256B10);
      uint64_t v26 = v33;
      if (swift_dynamicCast())
      {
        v22(v26, 0, 1, AssociatedTypeWitness);
        uint64_t v27 = (uint64_t)v31;
        v25(v31, v26, AssociatedTypeWitness);
        char v19 = sub_1858C2D7C(v23, v27, AssociatedTypeWitness);
        uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
        v28(v27, AssociatedTypeWitness);
        v28(v23, AssociatedTypeWitness);
        return v19 & 1;
      }
      v22(v26, 1, 1, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v30);
    }
    else
    {
      v22(v11, 1, 1, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v5);
    }
    char v19 = 0;
    return v19 & 1;
  }
  char v19 = 1;
  return v19 & 1;
}

id sub_1858C4F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v17 - v8;
  id v18 = self;
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  uint64_t v10 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  uint64_t v11 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  sub_186A1EAEC();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  double v12 = v20;
  LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  char v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  id v15 = objc_msgSend(v18, sel__defineCGFloatTraitWithName_identifier_defaultValue_affectsColorAppearance_defaultValueRepresentsUnspecified_isPrivate_placeholderToken_, v10, v11, v9 & 1, v13 & 1, v14 & 1, v19, v12);

  return v15;
}

uint64_t sub_1858C51EC()
{
  MEMORY[0x18C109220](*(void *)(v0 + 16), -1, -1);
  return swift_deallocClassInstance();
}

uint64_t sub_1858C522C()
{
  return sub_186A1FA4C();
}

uint64_t sub_1858C5274()
{
  return sub_186A1F9FC();
}

uint64_t sub_1858C52A0()
{
  return sub_186A1FA4C();
}

BOOL sub_1858C52E4(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1858C52F8()
{
  uint64_t v1 = *v0;
  sub_186A1F9EC();
  objc_msgSend(v1, sel_hash);
  sub_186A1F9FC();
  return sub_186A1FA4C();
}

uint64_t sub_1858C534C()
{
  objc_msgSend(*v0, sel_hash);
  return sub_186A1F9FC();
}

uint64_t sub_1858C5384()
{
  uint64_t v1 = *v0;
  sub_186A1F9EC();
  objc_msgSend(v1, sel_hash);
  sub_186A1F9FC();
  return sub_186A1FA4C();
}

id sub_1858C53D4(id *a1, void *a2)
{
  return objc_msgSend(*a1, sel_isEqual_, *a2);
}

uint64_t UITraitCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1858C545C(a1, a2, a3, (uint64_t)&unk_1ED0D8508, (uint64_t (*)(uint64_t))sub_1858DC840);
}

{
  return sub_1858C545C(a1, a2, a3, (uint64_t)&unk_1ED0D84B8, (uint64_t (*)(uint64_t))sub_1858DD77C);
}

uint64_t sub_1858C545C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  objc_msgSend(v5, sel__valueForCGFloatTraitToken_, sub_18557344C(a2, a3, a4, a5));
  double v7 = v6;
  swift_unknownObjectRelease();
  if (v7 == 1.79769313e308) {
    return 0;
  }
  else {
    return *(void *)&v7;
  }
}

id UITraitCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_msgSend(v3, sel__valueForNSIntegerTraitToken_, sub_18557344C(a2, a3, (uint64_t)&unk_1ED0D8490, (uint64_t (*)(uint64_t))sub_1858DC804));
  swift_unknownObjectRelease();
  return v4;
}

{
  void *v3;
  id v4;

  id v4 = objc_msgSend(v3, sel__valueForNSIntegerTraitToken_, sub_18557344C(a2, a3, (uint64_t)&unk_1ED0D8468, (uint64_t (*)(uint64_t))sub_1858DC7E8));
  swift_unknownObjectRelease();
  if (qword_1E8FB0190 != -1) {
    swift_once();
  }
  if ((id)qword_1E8FB0198 == v4) {
    return 0;
  }
  else {
    return v4;
  }
}

BOOL UITraitCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_msgSend(v3, sel__valueForNSIntegerTraitToken_, sub_18557344C(a2, a3, (uint64_t)&unk_1ED0D8440, (uint64_t (*)(uint64_t))sub_1858DC7CC));
  swift_unknownObjectRelease();
  return v4 != 0;
}

id UITraitCollection.replacing<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v15[3] = AssociatedTypeWitness;
  __swift_allocate_boxed_opaque_existential_0(v15);
  (*(void (**)(void))(*(void *)(AssociatedTypeWitness - 8) + 16))();
  sub_1853B76BC((uint64_t)v15, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v14, (uint64_t)v13, &qword_1EB256B10);
  uint64_t v9 = v13[3];
  sub_1853B93B8((uint64_t)v13, &qword_1EB256B10);
  if (v9) {
    uint64_t v10 = sub_186A1F83C();
  }
  else {
    uint64_t v10 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
  id v11 = objc_msgSend(v5, sel__traitCollectionByReplacingObject_forTraitToken_, v10, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8558, (uint64_t (*)(uint64_t))sub_1858BB620));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v11;
}

{
  void *v4;
  id v5;

  uint64_t v5 = objc_msgSend(v4, sel__traitCollectionByReplacingNSIntegerValue_forTraitToken_, a2, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8490, (uint64_t (*)(uint64_t))sub_1858DC804));
  swift_unknownObjectRelease();
  return v5;
}

{
  void *v4;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  id v11;
  void v13[4];
  unsigned char v14[32];
  uint64_t v15[4];

  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 24);
  v15[3] = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_0(v15);
  v8(a2, a3, a4);
  sub_1853B76BC((uint64_t)v15, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v14, (uint64_t)v13, &qword_1EB256B10);
  uint64_t v9 = v13[3];
  sub_1853B93B8((uint64_t)v13, &qword_1EB256B10);
  if (v9) {
    uint64_t v10 = sub_186A1F83C();
  }
  else {
    uint64_t v10 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
  id v11 = objc_msgSend(v4, sel__traitCollectionByReplacingObject_forTraitToken_, v10, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D83C8, (uint64_t (*)(uint64_t))sub_1858DC78C));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v11;
}

{
  void *v4;
  id v7;
  double v9;

  (*(void (**)(double *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v9, a2, a3, a4);
  double v7 = objc_msgSend(v4, sel__traitCollectionByReplacingCGFloatValue_forTraitToken_, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D83A0, (uint64_t (*)(uint64_t))sub_1858B6678), v9);
  swift_unknownObjectRelease();
  return v7;
}

{
  void *v4;
  id v7;
  double v9;

  (*(void (**)(double *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v9, a2, a3, a4);
  double v7 = objc_msgSend(v4, sel__traitCollectionByReplacingCGFloatValue_forTraitToken_, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D8378, (uint64_t (*)(uint64_t))sub_1858B6678), v9);
  swift_unknownObjectRelease();
  return v7;
}

{
  void *v4;
  id v7;
  uint64_t v9;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v9, a2, a3, a4);
  double v7 = objc_msgSend(v4, sel__traitCollectionByReplacingNSIntegerValue_forTraitToken_, v9, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D8350, (uint64_t (*)(uint64_t))sub_1858DC750));
  swift_unknownObjectRelease();
  return v7;
}

id UITraitCollection.replacing<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_1858C67BC(a4, a1, a2, a3, (uint64_t)&unk_1ED0D8530, (uint64_t (*)(uint64_t))sub_1854C9928);
}

{
  return sub_1858C67BC(a4, a1, a2, a3, (uint64_t)&unk_1ED0D84E0, (uint64_t (*)(uint64_t))sub_1854C9928);
}

id UITraitCollection.replacing<A>(_:value:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return sub_1858C6854(a1, a2, a3, a4, a5, (uint64_t)&unk_1ED0D8508, (uint64_t (*)(uint64_t))sub_1858DC840);
}

{
  return sub_1858C6854(a1, a2, a3, a4, a5, (uint64_t)&unk_1ED0D84B8, (uint64_t (*)(uint64_t))sub_1858DD77C);
}

{
  void *v5;
  void *v6;
  id v10;

  double v6 = v5;
  if (a3)
  {
    if (qword_1E8FB0190 != -1) {
      swift_once();
    }
    a2 = qword_1E8FB0198;
  }
  uint64_t v10 = objc_msgSend(v6, sel__traitCollectionByReplacingNSIntegerValue_forTraitToken_, a2, sub_18557344C(a4, a5, (uint64_t)&unk_1ED0D8468, (uint64_t (*)(uint64_t))sub_1858DC7E8));
  swift_unknownObjectRelease();
  return v10;
}

id sub_1858C67BC(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  id v7 = objc_msgSend(v6, sel__traitCollectionByReplacingCGFloatValue_forTraitToken_, sub_18557344C(a3, a4, a5, a6), a1);
  swift_unknownObjectRelease();
  return v7;
}

id sub_1858C6854(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t))
{
  if (a3) {
    *(double *)&a2 = 1.79769313e308;
  }
  id v9 = objc_msgSend(v7, sel__traitCollectionByReplacingCGFloatValue_forTraitToken_, sub_18557344C(a4, a5, a6, a7), *(double *)&a2);
  swift_unknownObjectRelease();
  return v9;
}

id UITraitCollection.replacing<A>(_:value:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  id v5 = objc_msgSend(v4, sel__traitCollectionByReplacingNSIntegerValue_forTraitToken_, a2 & 1, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8440, (uint64_t (*)(uint64_t))sub_1858DC7CC));
  swift_unknownObjectRelease();
  return v5;
}

id UITraitCollection.replacing<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  v15[3] = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_0(v15);
  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  sub_1853B76BC((uint64_t)v15, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v14, (uint64_t)v13, &qword_1EB256B10);
  uint64_t v9 = v13[3];
  sub_1853B93B8((uint64_t)v13, &qword_1EB256B10);
  if (v9) {
    uint64_t v10 = sub_186A1F83C();
  }
  else {
    uint64_t v10 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
  id v11 = objc_msgSend(v5, sel__traitCollectionByReplacingObject_forTraitToken_, v10, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D82D8, (uint64_t (*)(uint64_t))sub_1858DC6F8));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v11;
}

{
  void *v5;
  id v9;
  double v11;

  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  uint64_t v9 = objc_msgSend(v5, sel__traitCollectionByReplacingCGFloatValue_forTraitToken_, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D82B0, (uint64_t (*)(uint64_t))sub_1858DC6CC), v11);
  swift_unknownObjectRelease();
  return v9;
}

{
  void *v5;
  id v9;
  double v11;

  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  uint64_t v9 = objc_msgSend(v5, sel__traitCollectionByReplacingCGFloatValue_forTraitToken_, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D8288, (uint64_t (*)(uint64_t))sub_1858DC6CC), v11);
  swift_unknownObjectRelease();
  return v9;
}

{
  void *v5;
  id v9;
  uint64_t v11;

  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  uint64_t v9 = objc_msgSend(v5, sel__traitCollectionByReplacingNSIntegerValue_forTraitToken_, v11, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D8260, (uint64_t (*)(uint64_t))sub_1854C9934));
  swift_unknownObjectRelease();
  return v9;
}

id UITraitCollection._removing(_:)(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend(v2, sel__traitCollectionByRemovingTraitToken_, sub_1854AF474(a1, 0, 0, a1, a2));
  swift_unknownObjectRelease();
  return v3;
}

void __swiftcall UITraitCollection.filtering(_:)(UITraitCollection *__return_ptr retstr, Swift::OpaquePointer a2)
{
  uint64_t v3 = *((void *)a2._rawValue + 2);
  if (v3)
  {
    sub_186A1F49C();
    id v5 = (uint64_t *)((char *)a2._rawValue + 40);
    do
    {
      sub_1854AF474(*(v5 - 1), 0, 0, *(v5 - 1), *v5);
      sub_186A1F46C();
      sub_186A1F4AC();
      sub_186A1F4BC();
      sub_186A1F47C();
      v5 += 2;
      --v3;
    }
    while (v3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255C00);
  double v6 = (void *)sub_186A1EB1C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel__traitCollectionByFilteringTraitTokens_, v6);
}

id UITraitCollection.init<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17[3] = AssociatedTypeWitness;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v17);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(boxed_opaque_existential_0, a2, AssociatedTypeWitness);
  sub_1853B76BC((uint64_t)v17, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v16, (uint64_t)v15, &qword_1EB256B10);
  uint64_t v10 = v15[3];
  sub_1853B93B8((uint64_t)v15, &qword_1EB256B10);
  if (v10) {
    uint64_t v11 = sub_186A1F83C();
  }
  else {
    uint64_t v11 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v17);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v13 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithObject_forTraitToken_, v11, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8558, (uint64_t (*)(uint64_t))sub_1858BB620));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, AssociatedTypeWitness);
  return v13;
}

{
  void *ObjCClassFromMetadata;
  id v8;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v8 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithNSIntegerValue_forTraitToken_, a2, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8490, (uint64_t (*)(uint64_t))sub_1858DC804));
  swift_unknownObjectRelease();
  return v8;
}

{
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *ObjCClassFromMetadata;
  id v11;
  uint64_t AssociatedTypeWitness;
  void v14[4];
  unsigned char v15[32];
  uint64_t v16[4];

  id v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 24);
  v16[3] = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_0(v16);
  v7(a2, a3, a4);
  sub_1853B76BC((uint64_t)v16, (uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v15, (uint64_t)v14, &qword_1EB256B10);
  uint64_t v8 = v14[3];
  sub_1853B93B8((uint64_t)v14, &qword_1EB256B10);
  if (v8) {
    uint64_t v9 = sub_186A1F83C();
  }
  else {
    uint64_t v9 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v16);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v11 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithObject_forTraitToken_, v9, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D83C8, (uint64_t (*)(uint64_t))sub_1858DC78C));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  return v11;
}

{
  double v7;
  void *ObjCClassFromMetadata;
  id v9;
  uint64_t AssociatedTypeWitness;
  double v12;

  (*(void (**)(double *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v12, a2, a3, a4);
  id v7 = v12;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v9 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithCGFloatValue_forTraitToken_, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D83A0, (uint64_t (*)(uint64_t))sub_1858B6678), v7);
  swift_unknownObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  return v9;
}

{
  double v7;
  void *ObjCClassFromMetadata;
  id v9;
  uint64_t AssociatedTypeWitness;
  double v12;

  (*(void (**)(double *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v12, a2, a3, a4);
  id v7 = v12;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v9 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithCGFloatValue_forTraitToken_, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D8378, (uint64_t (*)(uint64_t))sub_1858B6678), v7);
  swift_unknownObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  return v9;
}

{
  uint64_t v7;
  void *ObjCClassFromMetadata;
  id v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v12, a2, a3, a4);
  id v7 = v12;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v9 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithNSIntegerValue_forTraitToken_, v7, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D8350, (uint64_t (*)(uint64_t))sub_1858DC750));
  swift_unknownObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  return v9;
}

id UITraitCollection.init<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_1858C76C8(a4, a1, a2, a3, (uint64_t)&unk_1ED0D8530, (uint64_t (*)(uint64_t))sub_1854C9928);
}

{
  return sub_1858C76C8(a4, a1, a2, a3, (uint64_t)&unk_1ED0D84E0, (uint64_t (*)(uint64_t))sub_1854C9928);
}

id UITraitCollection.init<A>(_:value:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return sub_1858C7794(a1, a2, a3, a4, a5, (uint64_t)&unk_1ED0D8508, (uint64_t (*)(uint64_t))sub_1858DC840);
}

{
  return sub_1858C7794(a1, a2, a3, a4, a5, (uint64_t)&unk_1ED0D84B8, (uint64_t (*)(uint64_t))sub_1858DD77C);
}

{
  void *ObjCClassFromMetadata;
  id v9;

  if (a3)
  {
    if (qword_1E8FB0190 != -1) {
      swift_once();
    }
    a2 = qword_1E8FB0198;
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v9 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithNSIntegerValue_forTraitToken_, a2, sub_18557344C(a4, a5, (uint64_t)&unk_1ED0D8468, (uint64_t (*)(uint64_t))sub_1858DC7E8));
  swift_unknownObjectRelease();
  return v9;
}

id sub_1858C76C8(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v12 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithCGFloatValue_forTraitToken_, sub_18557344C(a3, a4, a5, a6), a1);
  swift_unknownObjectRelease();
  return v12;
}

id sub_1858C7794(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t))
{
  if (a3) {
    *(double *)&a2 = 1.79769313e308;
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v13 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithCGFloatValue_forTraitToken_, sub_18557344C(a4, a5, a6, a7), *(double *)&a2);
  swift_unknownObjectRelease();
  return v13;
}

id UITraitCollection.init<A>(_:value:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2 & 1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v8 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithNSIntegerValue_forTraitToken_, v6, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8440, (uint64_t (*)(uint64_t))sub_1858DC7CC));
  swift_unknownObjectRelease();
  return v8;
}

id sub_1858C7A88(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EB2564E0);
  uint64_t v16 = _s5UIKit26UITraitTypesettingLanguageV15_customRawValue3forSSSg10Foundation6LocaleV0D0VSg_tFZ_0(a2);
  uint64_t v17 = v4;
  sub_1853B76BC((uint64_t)&v16, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v15, (uint64_t)v13, &qword_1EB256B10);
  uint64_t v5 = v14;
  sub_1853B93B8((uint64_t)v13, &qword_1EB256B10);
  if (v5)
  {
    v15[0] = v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_186A1F90C();
  }
  else
  {
    uint64_t v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  if (qword_1EB2569D0 != -1) {
    swift_once();
  }
  if (qword_1EB256A10 != -1) {
    swift_once();
  }
  id v8 = (os_unfair_lock_t *)off_1EB256A08;
  os_unfair_lock_lock(*((os_unfair_lock_t *)off_1EB256A08 + 2));
  id v9 = sub_185AB74F8(a1, (uint64_t (*)(uint64_t))sub_1858DC6A4, v7, a1);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  os_unfair_lock_unlock(v8[2]);
  swift_release();
  id v11 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithObject_forTraitToken_, v6, v9);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1853B93B8(a2, (uint64_t *)&unk_1EB256638);
  return v11;
}

id UITraitCollection.init<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  void v18[3] = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_0(v18);
  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  sub_1853B76BC((uint64_t)v18, (uint64_t)v15);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v17, (uint64_t)v15, &qword_1EB256B10);
  uint64_t v9 = v16;
  sub_1853B93B8((uint64_t)v15, &qword_1EB256B10);
  if (v9) {
    uint64_t v10 = sub_186A1F83C();
  }
  else {
    uint64_t v10 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v18);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v12 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithObject_forTraitToken_, v10, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D82D8, (uint64_t (*)(uint64_t))sub_1858DC6F8));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v13 = swift_checkMetadataState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
  return v12;
}

{
  void *ObjCClassFromMetadata;
  id v10;
  uint64_t AssociatedTypeWitness;
  double v13;

  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v10 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithCGFloatValue_forTraitToken_, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D82B0, (uint64_t (*)(uint64_t))sub_1858DC6CC), v13);
  swift_unknownObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  return v10;
}

{
  void *ObjCClassFromMetadata;
  id v10;
  uint64_t AssociatedTypeWitness;
  double v13;

  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v10 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithCGFloatValue_forTraitToken_, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D8288, (uint64_t (*)(uint64_t))sub_1858DC6CC), v13);
  swift_unknownObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  return v10;
}

{
  void *ObjCClassFromMetadata;
  id v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;

  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v10 = objc_msgSend(ObjCClassFromMetadata, sel__traitCollectionWithNSIntegerValue_forTraitToken_, v13, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D8260, (uint64_t (*)(uint64_t))sub_1854C9934));
  swift_unknownObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  return v10;
}

uint64_t sub_1858C87E4@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_186A1F12C();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  id v12 = (char *)v18 - v11;
  id v13 = objc_msgSend(a1, sel__objectForTraitToken_, sub_18557344C(a2, a3, (uint64_t)&unk_1ED0D8558, (uint64_t (*)(uint64_t))sub_1858BB620));
  swift_unknownObjectRelease();
  if (v13)
  {
    sub_186A1F1CC();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  sub_1853B8150((uint64_t)v18, (uint64_t)v19, &qword_1EB256B10);
  sub_1853B7020((uint64_t)v19, (uint64_t)v18, &qword_1EB256B10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  int v14 = swift_dynamicCast();
  id v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
  if (v14)
  {
    uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
    v15(v12, 0, 1, AssociatedTypeWitness);
    sub_1853B93B8((uint64_t)v19, &qword_1EB256B10);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a4, v12, AssociatedTypeWitness);
  }
  else
  {
    v15(v12, 1, 1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
    sub_1853B93B8((uint64_t)v19, &qword_1EB256B10);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

uint64_t sub_1858C8A7C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  objc_msgSend(a2, sel__valueForCGFloatTraitToken_, sub_18557344C(a3, a4, a5, a6));
  double v7 = v6;
  swift_unknownObjectRelease();
  if (v7 == 1.79769313e308) {
    return 0;
  }
  else {
    return *(void *)&v7;
  }
}

uint64_t sub_1858C8AF8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t))
{
  if (a2) {
    *(double *)&a1 = 1.79769313e308;
  }
  objc_msgSend(*v7, sel__setCGFloatValue_forTraitToken_, sub_18557344C(a4, a5, a6, a7), *(double *)&a1);
  return swift_unknownObjectRelease();
}

id sub_1858C8B7C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend(a2, sel__valueForNSIntegerTraitToken_, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8490, (uint64_t (*)(uint64_t))sub_1858DC804));
  swift_unknownObjectRelease();
  return v4;
}

uint64_t sub_1858C8BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend(*v4, sel__setNSIntegerValue_forTraitToken_, a1, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8490, (uint64_t (*)(uint64_t))sub_1858DC804));
  return swift_unknownObjectRelease();
}

id sub_1858C8C84(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend(a2, sel__valueForNSIntegerTraitToken_, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8468, (uint64_t (*)(uint64_t))sub_1858DC7E8));
  swift_unknownObjectRelease();
  if (qword_1E8FB0190 != -1) {
    swift_once();
  }
  if ((id)qword_1E8FB0198 == v4) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t sub_1858C8D3C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    if (qword_1E8FB0190 != -1) {
      swift_once();
    }
    a1 = qword_1E8FB0198;
  }
  objc_msgSend(*v5, sel__setNSIntegerValue_forTraitToken_, a1, sub_18557344C(a4, a5, (uint64_t)&unk_1ED0D8468, (uint64_t (*)(uint64_t))sub_1858DC7E8));
  return swift_unknownObjectRelease();
}

BOOL sub_1858C8E14(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v4 = objc_msgSend(a2, sel__valueForNSIntegerTraitToken_, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8440, (uint64_t (*)(uint64_t))sub_1858DC7CC));
  swift_unknownObjectRelease();
  return v4 != 0;
}

uint64_t sub_1858C8E90(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend(*v4, sel__setNSIntegerValue_forTraitToken_, a1 & 1, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8440, (uint64_t (*)(uint64_t))sub_1858DC7CC));
  return swift_unknownObjectRelease();
}

uint64_t sub_1858C8F20@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v32 = *(void *)(a3 + 8);
  uint64_t v33 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_186A1F12C();
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v30 = (char *)&v26 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_186A1F12C();
  uint64_t v29 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v12 = (char *)&v26 - v11;
  uint64_t v13 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v26 - v15;
  id v17 = objc_msgSend(a1, sel__objectForTraitToken_, sub_1854A0320(a2, a3, (uint64_t)&unk_1ED0D83C8, (uint64_t (*)(uint64_t))sub_1858DC78C));
  swift_unknownObjectRelease();
  if (v17)
  {
    sub_186A1F1CC();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v34, 0, sizeof(v34));
  }
  sub_1853B8150((uint64_t)v34, (uint64_t)v35, &qword_1EB256B10);
  sub_1853B7020((uint64_t)v35, (uint64_t)v34, &qword_1EB256B10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  char v18 = swift_dynamicCast();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if ((v18 & 1) == 0)
  {
    v19(v12, 1, 1, v9);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v10);
    goto LABEL_8;
  }
  v19(v12, 0, 1, v9);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, v9);
  double v20 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 32))(v16, a2, a3);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v9);
  uint64_t v21 = AssociatedTypeWitness;
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, AssociatedTypeWitness);
  uint64_t v24 = v33;
  if (v23 == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v20, v28);
LABEL_8:
    (*(void (**)(uint64_t))(v32 + 16))(a2);
    return sub_1853B93B8((uint64_t)v35, &qword_1EB256B10);
  }
  sub_1853B93B8((uint64_t)v35, &qword_1EB256B10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v24, v20, v21);
}

uint64_t sub_1858C9370@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v17 = a4;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_186A1F12C();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  id v12 = (char *)&v17 - v11;
  objc_msgSend(a1, sel__valueForCGFloatTraitToken_, sub_1854A0320(a2, a3, (uint64_t)&unk_1ED0D83A0, (uint64_t (*)(uint64_t))sub_1858B6678));
  uint64_t v14 = v13;
  swift_unknownObjectRelease();
  uint64_t v18 = v14;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a3 + 32))(&v18, a2, a3);
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17, v12, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(a2, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1858C958C@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v17 = a4;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_186A1F12C();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  id v12 = (char *)&v17 - v11;
  objc_msgSend(a1, sel__valueForCGFloatTraitToken_, sub_1854A0320(a2, a3, (uint64_t)&unk_1ED0D8378, (uint64_t (*)(uint64_t))sub_1858B6678));
  uint64_t v14 = v13;
  swift_unknownObjectRelease();
  uint64_t v18 = v14;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a3 + 32))(&v18, a2, a3);
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17, v12, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(a2, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1858C97A8@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v16 = a4;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_186A1F12C();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  id v12 = (char *)&v16 - v11;
  id v13 = objc_msgSend(a1, sel__valueForNSIntegerTraitToken_, sub_1854A0320(a2, a3, (uint64_t)&unk_1ED0D8350, (uint64_t (*)(uint64_t))sub_1858DC750));
  swift_unknownObjectRelease();
  id v17 = v13;
  (*(void (**)(id *, uint64_t, uint64_t))(a3 + 32))(&v17, a2, a3);
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v16, v12, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(a2, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1858C99BC@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  objc_msgSend(a1, sel__valueForCGFloatTraitToken_, sub_1854AF3F4(a2, a3, a4, (uint64_t)&unk_1ED0D82B0, (uint64_t (*)(uint64_t))sub_1858DC6CC));
  uint64_t v9 = v8;
  swift_unknownObjectRelease();
  uint64_t v11 = v9;
  return sub_1854A715C((uint64_t)&v11, a2, a3, a5);
}

uint64_t sub_1858C9A84@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  objc_msgSend(a1, sel__valueForCGFloatTraitToken_, sub_1854AF3F4(a2, a3, a4, (uint64_t)&unk_1ED0D8288, (uint64_t (*)(uint64_t))sub_1858DC6CC));
  uint64_t v9 = v8;
  swift_unknownObjectRelease();
  uint64_t v11 = v9;
  return sub_1854A715C((uint64_t)&v11, a2, a3, a5);
}

uint64_t sub_1858C9B4C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1858C87E4(*v3, a1, a2, a3);
}

uint64_t sub_1858C9B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_18557236C(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_1858D9988);
}

void (*sub_1858C9B74(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  id v13 = malloc(v12);
  v9[7] = v13;
  sub_1858C87E4(*v4, a3, a4, (uint64_t)v13);
  return sub_1858C9C84;
}

void sub_1858C9C84(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  id v4 = (void *)(*a1)[7];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v7 = (*a1)[2];
  uint64_t v9 = **a1;
  uint64_t v8 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    sub_1858D9988((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    sub_1858D9988((*a1)[7], v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

void (*sub_1858C9D8C(double **a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, uint64_t a2)
{
  uint64_t v9 = (double *)malloc(0x28uLL);
  *a1 = v9;
  *((void *)v9 + 3) = a4;
  *((void *)v9 + 4) = v4;
  *((void *)v9 + 1) = a2;
  *((void *)v9 + 2) = a3;
  *uint64_t v9 = sub_1855733E4(a2, *v4, a3, a4, (uint64_t)&unk_1ED0D8530, (uint64_t (*)(uint64_t))sub_1854C9928);
  return sub_1858C9E30;
}

void sub_1858C9E30(uint64_t *a1, uint64_t a2)
{
}

uint64_t sub_1858C9E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1858C8A7C(a1, *v3, a2, a3, (uint64_t)&unk_1ED0D8508, (uint64_t (*)(uint64_t))sub_1858DC840);
}

uint64_t sub_1858C9E94(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1858C8AF8(a1, a2 & 1, a3, a4, a5, (uint64_t)&unk_1ED0D8508, (uint64_t (*)(uint64_t))sub_1858DC840);
}

void (*sub_1858C9ECC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v9 = malloc(0x30uLL);
  *a1 = v9;
  v9[4] = a4;
  _OWORD v9[5] = v4;
  v9[2] = a2;
  v9[3] = a3;
  *uint64_t v9 = sub_1858C8A7C(a2, *v4, a3, a4, (uint64_t)&unk_1ED0D8508, (uint64_t (*)(uint64_t))sub_1858DC840);
  *((unsigned char *)v9 + _Block_object_dispose(&STACK[0x478], 8) = v10 & 1;
  return sub_1858C9F78;
}

void sub_1858C9F78(uint64_t **a1, uint64_t a2)
{
}

double sub_1858C9F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1855733E4(a1, *v3, a2, a3, (uint64_t)&unk_1ED0D84E0, (uint64_t (*)(uint64_t))sub_1854C9928);
}

uint64_t sub_1858C9FD8(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_185571EB8(a4, a1, a2, a3, (uint64_t)&unk_1ED0D84E0, (uint64_t (*)(uint64_t))sub_1854C9928);
}

void (*sub_1858CA00C(double **a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, uint64_t a2)
{
  uint64_t v9 = (double *)malloc(0x28uLL);
  *a1 = v9;
  *((void *)v9 + 3) = a4;
  *((void *)v9 + 4) = v4;
  *((void *)v9 + 1) = a2;
  *((void *)v9 + 2) = a3;
  *uint64_t v9 = sub_1855733E4(a2, *v4, a3, a4, (uint64_t)&unk_1ED0D84E0, (uint64_t (*)(uint64_t))sub_1854C9928);
  return sub_1858CA0B0;
}

void sub_1858CA0B0(uint64_t *a1, uint64_t a2)
{
}

void sub_1858CA0D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4 = *a1;
  sub_185571EB8(*(double *)v4, *(void *)(*a1 + 8), *(void *)(v4 + 16), *(void *)(*a1 + 24), a3, a4);
  free((void *)v4);
}

uint64_t sub_1858CA11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1858C8A7C(a1, *v3, a2, a3, (uint64_t)&unk_1ED0D84B8, (uint64_t (*)(uint64_t))sub_1858DD77C);
}

uint64_t sub_1858CA160(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1858C8AF8(a1, a2 & 1, a3, a4, a5, (uint64_t)&unk_1ED0D84B8, (uint64_t (*)(uint64_t))sub_1858DD77C);
}

void (*sub_1858CA198(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v9 = malloc(0x30uLL);
  *a1 = v9;
  v9[4] = a4;
  _OWORD v9[5] = v4;
  v9[2] = a2;
  v9[3] = a3;
  *uint64_t v9 = sub_1858C8A7C(a2, *v4, a3, a4, (uint64_t)&unk_1ED0D84B8, (uint64_t (*)(uint64_t))sub_1858DD77C);
  *((unsigned char *)v9 + _Block_object_dispose(&STACK[0x478], 8) = v10 & 1;
  return sub_1858CA244;
}

void sub_1858CA244(uint64_t **a1, uint64_t a2)
{
}

void sub_1858CA264(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4 = *a1;
  sub_1858C8AF8(**a1, *((unsigned char *)*a1 + 8), (*a1)[2], (*a1)[3], (*a1)[4], a3, a4);
  free(v4);
}

id sub_1858CA2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1858C8B7C(a1, *v3, a2, a3);
}

void (*sub_1858CA2C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1)
{
  uint64_t v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[3] = a4;
  v9[4] = v4;
  v9[1] = a2;
  v9[2] = a3;
  *uint64_t v9 = sub_1858C8B7C(a2, *v4, a3, a4);
  return sub_1858CA350;
}

void sub_1858CA350(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1858C8BF4(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

id sub_1858CA394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1858C8C84(a1, *v3, a2, a3);
}

uint64_t sub_1858CA3BC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1858C8D3C(a1, a2 & 1, a3, a4, a5);
}

void (*sub_1858CA3C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1)
{
  uint64_t v9 = malloc(0x30uLL);
  *a1 = v9;
  v9[4] = a4;
  _OWORD v9[5] = v4;
  v9[2] = a2;
  v9[3] = a3;
  *uint64_t v9 = sub_1858C8C84(a2, *v4, a3, a4);
  *((unsigned char *)v9 + _Block_object_dispose(&STACK[0x478], 8) = v10 & 1;
  return sub_1858CA454;
}

void sub_1858CA454(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1858C8D3C(**a1, *((unsigned char *)*a1 + 8), (*a1)[2], (*a1)[3], (*a1)[4]);
  free(v1);
}

BOOL sub_1858CA49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1858C8E14(a1, *v3, a2, a3);
}

void (*sub_1858CA4B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1)
{
  uint64_t v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  *((unsigned char *)v9 + 32) = sub_1858C8E14(a2, *v4, a3, a4);
  return sub_1858CA53C;
}

void sub_1858CA53C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1858C8E90(*((unsigned char *)*a1 + 32), **a1, (*a1)[1], (*a1)[2]);
  free(v1);
}

uint64_t sub_1858CA580@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1858C8F20(*v3, a1, a2, a3);
}

void (*sub_1858CA590(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  id v13 = malloc(v12);
  v9[7] = v13;
  sub_1858C8F20(*v4, a3, a4, (uint64_t)v13);
  return sub_1858CA6A0;
}

void sub_1858CA6A0(uint64_t **a1, char a2)
{
}

uint64_t sub_1858CA6B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1858C9370(*v3, a1, a2, a3);
}

uint64_t sub_1858CA6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1854A0108(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_1858D9B10);
}

void (*sub_1858CA6E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  id v13 = malloc(v12);
  v9[7] = v13;
  sub_1858C9370(*v4, a3, a4, (uint64_t)v13);
  return sub_1858CA7F0;
}

void sub_1858CA7F0(uint64_t **a1, char a2)
{
}

uint64_t sub_1858CA808@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1858C958C(*v3, a1, a2, a3);
}

uint64_t sub_1858CA818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1854A0108(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_1858D9BC8);
}

void (*sub_1858CA830(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  id v13 = malloc(v12);
  v9[7] = v13;
  sub_1858C958C(*v4, a3, a4, (uint64_t)v13);
  return sub_1858CA940;
}

void sub_1858CA940(uint64_t **a1, char a2)
{
}

uint64_t sub_1858CA958@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1858C97A8(*v3, a1, a2, a3);
}

uint64_t sub_1858CA968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1854A0108(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_1858D9C80);
}

void (*sub_1858CA980(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  id v13 = malloc(v12);
  v9[7] = v13;
  sub_1858C97A8(*v4, a3, a4, (uint64_t)v13);
  return sub_1858CAA90;
}

void sub_1858CAA90(uint64_t **a1, char a2)
{
}

void sub_1858CAAA8(uint64_t **a1, char a2, void (*a3)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[6];
  uint64_t v6 = (void *)(*a1)[7];
  uint64_t v7 = (*a1)[4];
  uint64_t v8 = (*a1)[5];
  uint64_t v9 = (*a1)[2];
  uint64_t v11 = **a1;
  uint64_t v10 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[6], v6, v7);
    a3(v5, v11, v10, v9);
    size_t v12 = *(void (**)(void *, uint64_t))(v8 + 8);
    v12(v5, v7);
    v12(v6, v7);
  }
  else
  {
    a3((void *)(*a1)[7], v11, v10, v9);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  free(v6);
  free(v5);
  free(v4);
}

void (*sub_1858CABBC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  void v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  long long v11[2] = a4;
  *uint64_t v11 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v11[5] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  uint64_t v15 = malloc(v14);
  v11[8] = v15;
  sub_1854A676C(*v5, a3, a4, a5, (uint64_t)v15);
  return sub_1858CACD8;
}

void sub_1858CACD8(uint64_t **a1, char a2)
{
}

uint64_t sub_1858CACF0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_1858C99BC(*v4, a1, a2, a3, a4);
}

uint64_t sub_1858CAD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1854A4418(a1, a2, a3, a4, a5, a6, a7, (void (*)(void))sub_1858D9D38);
}

void (*sub_1858CAD1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  void v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  long long v11[2] = a4;
  *uint64_t v11 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v11[5] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  uint64_t v15 = malloc(v14);
  v11[8] = v15;
  sub_1858C99BC(*v5, a3, a4, a5, (uint64_t)v15);
  return sub_1858CAE38;
}

void sub_1858CAE38(uint64_t **a1, char a2)
{
}

uint64_t sub_1858CAE50@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_1858C9A84(*v4, a1, a2, a3, a4);
}

uint64_t sub_1858CAE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1854A4418(a1, a2, a3, a4, a5, a6, a7, (void (*)(void))sub_1858D9E10);
}

void (*sub_1858CAE7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  void v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  long long v11[2] = a4;
  *uint64_t v11 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v11[5] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  uint64_t v15 = malloc(v14);
  v11[8] = v15;
  sub_1858C9A84(*v5, a3, a4, a5, (uint64_t)v15);
  return sub_1858CAF98;
}

void sub_1858CAF98(uint64_t **a1, char a2)
{
}

void (*sub_1858CAFB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  void v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  long long v11[2] = a4;
  *uint64_t v11 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v11[5] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  uint64_t v15 = malloc(v14);
  v11[8] = v15;
  sub_1854A709C(*v5, a3, a4, a5, (uint64_t)v15);
  return sub_1858CB0CC;
}

void sub_1858CB0CC(uint64_t **a1, char a2)
{
}

void sub_1858CB0E4(uint64_t **a1, char a2, void (*a3)(void *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void *)(*a1)[7];
  uint64_t v5 = (void *)(*a1)[8];
  uint64_t v6 = (*a1)[5];
  uint64_t v7 = (*a1)[6];
  uint64_t v8 = (*a1)[3];
  uint64_t v10 = (*a1)[1];
  uint64_t v9 = (*a1)[2];
  uint64_t v11 = **a1;
  if (a2)
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v4, v5, v6);
    a3(v4, v11, v10, v9, v8);
    size_t v12 = *(void (**)(void *, uint64_t))(v7 + 8);
    v12(v4, v6);
    v12(v5, v6);
  }
  else
  {
    a3((void *)(*a1)[8], v11, v10, v9, v8);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v5, v6);
  }
  free(v5);
  free(v4);
  free(v3);
}

uint64_t sub_1858CB218()
{
  id v1 = objc_msgSend(*v0, sel_description);
  uint64_t v2 = sub_186A1E95C();

  return v2;
}

uint64_t sub_1858CB270()
{
  uint64_t v1 = sub_186A1FA7C();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FB0DD0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *v0;
  v10[0] = MEMORY[0x1E4FBC860];
  uint64_t v8 = sub_186A1FA6C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FB7C80);
  sub_1858DA5DC();
  return sub_186A1FA8C();
}

uint64_t UITraitCollection.init(mutations:)(uint64_t a1, uint64_t a2)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_1858DD814;
  *(void *)(v6 + 24) = v5;
  void v10[4] = sub_185566D14;
  _OWORD v10[5] = v6;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  void v10[2] = sub_185566CC0;
  void v10[3] = &block_descriptor_1;
  uint64_t v7 = _Block_copy(v10);
  swift_retain();
  swift_release();
  id v8 = objc_msgSend(ObjCClassFromMetadata, sel_traitCollectionWithTraits_, v7);
  _Block_release(v7);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((v7 & 1) == 0) {
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

uint64_t UITraitCollection._specifiedTraits.getter()
{
  id v1 = objc_msgSend(v0, sel__specifiedTraitTokensArray);
  sub_1853B985C(0, (unint64_t *)&qword_1EB256318);
  unint64_t v2 = sub_186A1EB3C();

  uint64_t v3 = sub_1854A5468(v2);
  swift_bridgeObjectRelease();
  return v3;
}

id UITraitCollection._isSpecified(_:)(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend(v2, sel__isTraitTokenSpecified_, sub_1854AF474(a1, 0, 0, a1, a2));
  swift_unknownObjectRelease();
  return v3;
}

uint64_t static UITraitCollection.systemTraitsAffectingImageLookup.getter()
{
  return sub_18549BB48((SEL *)&selRef__systemTraitTokensAffectingImageLookup);
}

id UITraitOverrides.contains(_:)(uint64_t a1, uint64_t a2)
{
  id v5 = *(id *)(*(void *)v2 + 16);
  id v6 = objc_msgSend(v5, sel__containsTraitToken_, sub_1854AF474(a1, 0, 0, a1, a2));

  swift_unknownObjectRelease();
  return v6;
}

uint64_t UITraitOverrides.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v18 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_186A1F12C();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - v9;
  id v11 = *(id *)(*(void *)v3 + 16);
  id v12 = objc_msgSend(v11, sel__objectForTraitToken_, sub_18557344C(a1, a2, (uint64_t)&unk_1ED0D8558, (uint64_t (*)(uint64_t))sub_1858BB620));
  swift_unknownObjectRelease();

  if (v12)
  {
    sub_186A1F1CC();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v19, 0, sizeof(v19));
  }
  sub_1853B8150((uint64_t)v19, (uint64_t)v20, &qword_1EB256B10);
  sub_1853B7020((uint64_t)v20, (uint64_t)v19, &qword_1EB256B10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  int v13 = swift_dynamicCast();
  size_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
  if (v13)
  {
    uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
    v14(v10, 0, 1, AssociatedTypeWitness);
    sub_1853B93B8((uint64_t)v20, &qword_1EB256B10);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v18, v10, AssociatedTypeWitness);
  }
  else
  {
    v14(v10, 1, 1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
    sub_1853B93B8((uint64_t)v20, &qword_1EB256B10);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t AssociatedTypeWitness;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  unsigned char v35[32];

  uint64_t v32 = *(void *)(a2 + 8);
  uint64_t v33 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  id v6 = sub_186A1F12C();
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v30 = (char *)&v26 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_186A1F12C();
  uint64_t v28 = *(void *)(v9 - 8);
  uint64_t v29 = v9;
  MEMORY[0x1F4188790](v9);
  id v11 = (char *)&v26 - v10;
  id v12 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = *(id *)(*(void *)v3 + 16);
  uint64_t v17 = objc_msgSend(v16, sel__objectForTraitToken_, sub_1854A0320(a1, a2, (uint64_t)&unk_1ED0D83C8, (uint64_t (*)(uint64_t))sub_1858DC78C));
  swift_unknownObjectRelease();

  if (v17)
  {
    sub_186A1F1CC();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v34, 0, sizeof(v34));
  }
  sub_1853B8150((uint64_t)v34, (uint64_t)v35, &qword_1EB256B10);
  sub_1853B7020((uint64_t)v35, (uint64_t)v34, &qword_1EB256B10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  uint64_t v18 = swift_dynamicCast();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if ((v18 & 1) == 0)
  {
    v19(v11, 1, 1, v8);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
    goto LABEL_8;
  }
  v19(v11, 0, 1, v8);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, v8);
  double v20 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(a2 + 32))(v15, a1, a2);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v8);
  uint64_t v21 = AssociatedTypeWitness;
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, AssociatedTypeWitness);
  uint64_t v24 = v33;
  if (v23 == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v20, v27);
LABEL_8:
    (*(void (**)(uint64_t))(v32 + 16))(a1);
    return sub_1853B93B8((uint64_t)v35, &qword_1EB256B10);
  }
  sub_1853B93B8((uint64_t)v35, &qword_1EB256B10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v24, v20, v21);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = a3;
  id v6 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_186A1F12C();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)&v17 - v10;
  id v12 = *(id *)(*(void *)v3 + 16);
  objc_msgSend(v12, sel__valueForCGFloatTraitToken_, sub_1854A0320(a1, a2, (uint64_t)&unk_1ED0D83A0, (uint64_t (*)(uint64_t))sub_1858B6678));
  size_t v14 = v13;

  swift_unknownObjectRelease();
  uint64_t v18 = v14;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a2 + 32))(&v18, a1, a2);
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17, v11, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a1, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = a3;
  id v6 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_186A1F12C();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)&v17 - v10;
  id v12 = *(id *)(*(void *)v3 + 16);
  objc_msgSend(v12, sel__valueForCGFloatTraitToken_, sub_1854A0320(a1, a2, (uint64_t)&unk_1ED0D8378, (uint64_t (*)(uint64_t))sub_1858B6678));
  size_t v14 = v13;

  swift_unknownObjectRelease();
  uint64_t v18 = v14;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(a2 + 32))(&v18, a1, a2);
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17, v11, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a1, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  uint64_t v17 = a3;
  id v6 = *(void *)(a2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = sub_186A1F12C();
  uint64_t v8 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v10 = (char *)&v15 - v9;
  id v11 = *(id *)(*(void *)v3 + 16);
  id v12 = objc_msgSend(v11, sel__valueForNSIntegerTraitToken_, sub_1854A0320(a1, a2, (uint64_t)&unk_1ED0D8350, (uint64_t (*)(uint64_t))sub_1858DC750));

  swift_unknownObjectRelease();
  uint64_t v18 = v12;
  (*(void (**)(id *, uint64_t, uint64_t))(a2 + 32))(&v18, a1, a2);
  int v13 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, AssociatedTypeWitness) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v17, v10, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a1, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v16);
}

uint64_t UITraitOverrides.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_185572F74(a1, a2, a3, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v6(a1, AssociatedTypeWitness);
}

{
  void *v7;
  uint64_t vars8;

  uint64_t v7 = (void *)sub_1855741B8();
  swift_unknownObjectRetain();
  objc_msgSend(v7, sel__setNSIntegerValue_forTraitToken_, a1, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8490, (uint64_t (*)(uint64_t))sub_1858DC804));
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

{
  return sub_1858CD9B8(a1, a2, a3, a4, (void (*)(void))sub_1858D9EE8);
}

{
  return sub_1858CD9B8(a1, a2, a3, a4, (void (*)(void))sub_1854A05F0);
}

{
  return sub_1858CD9B8(a1, a2, a3, a4, (void (*)(void))sub_1858DA088);
}

{
  return sub_1858CD9B8(a1, a2, a3, a4, (void (*)(void))sub_1858DA164);
}

void (*UITraitOverrides.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  int v13 = malloc(v12);
  v9[7] = v13;
  UITraitOverrides.subscript.getter(a3, a4, (uint64_t)v13);
  return sub_1858CBB50;
}

{
  uint64_t v4;
  void *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void *v13;

  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  int v13 = malloc(v12);
  v9[7] = v13;
  UITraitOverrides.subscript.getter(a3, a4, (uint64_t)v13);
  return sub_1858CD068;
}

{
  uint64_t v4;
  void *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void *v13;

  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  int v13 = malloc(v12);
  v9[7] = v13;
  UITraitOverrides.subscript.getter(a3, a4, (uint64_t)v13);
  return sub_1858CD3E4;
}

{
  uint64_t v4;
  void *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void *v13;

  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  int v13 = malloc(v12);
  v9[7] = v13;
  UITraitOverrides.subscript.getter(a3, a4, (uint64_t)v13);
  return sub_1858CD760;
}

{
  uint64_t v4;
  void *v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  size_t v12;
  void *v13;

  uint64_t v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  _OWORD v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  int v13 = malloc(v12);
  v9[7] = v13;
  UITraitOverrides.subscript.getter(a3, a4, (uint64_t)v13);
  return sub_1858CDB64;
}

void sub_1858CBB50(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v4 = (void *)(*a1)[7];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v7 = (*a1)[2];
  uint64_t v9 = **a1;
  uint64_t v8 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[6], v4, v5);
    sub_185572F74((uint64_t)v3, v9, v8, v7);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
    v10(v4, v5);
  }
  else
  {
    sub_185572F74((*a1)[7], v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

double UITraitOverrides.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(*(void *)v3 + 16);
  objc_msgSend(v6, sel__valueForCGFloatTraitToken_, sub_18557344C(a2, a3, (uint64_t)&unk_1ED0D8530, (uint64_t (*)(uint64_t))sub_1854C9928));
  double v8 = v7;

  swift_unknownObjectRelease();
  return v8;
}

{
  uint64_t v3;
  id v6;
  double v7;
  double v8;

  id v6 = *(id *)(*(void *)v3 + 16);
  objc_msgSend(v6, sel__valueForCGFloatTraitToken_, sub_18557344C(a2, a3, (uint64_t)&unk_1ED0D84E0, (uint64_t (*)(uint64_t))sub_1854C9928));
  double v8 = v7;
  swift_unknownObjectRelease();

  return v8;
}

uint64_t UITraitOverrides.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return sub_1858CBF90(a4, a1, a2, a3, (uint64_t)&unk_1ED0D8530, (uint64_t (*)(uint64_t))sub_1854C9928);
}

{
  return sub_1858CBF90(a4, a1, a2, a3, (uint64_t)&unk_1ED0D84E0, (uint64_t (*)(uint64_t))sub_1854C9928);
}

void (*UITraitOverrides.subscript.modify(double **a1, uint64_t a2, uint64_t a3, uint64_t a4))(double **a1, uint64_t a2)
{
  uint64_t v9 = (double *)malloc(0x28uLL);
  *a1 = v9;
  *((void *)v9 + 3) = a4;
  *((void *)v9 + 4) = v4;
  *((void *)v9 + 1) = a2;
  *((void *)v9 + 2) = a3;
  *uint64_t v9 = UITraitOverrides.subscript.getter(a2, a3, a4);
  return sub_1858CBDB8;
}

{
  uint64_t v4;
  double *v9;

  uint64_t v9 = (double *)malloc(0x28uLL);
  *a1 = v9;
  *((void *)v9 + 3) = a4;
  *((void *)v9 + 4) = v4;
  *((void *)v9 + 1) = a2;
  *((void *)v9 + 2) = a3;
  *uint64_t v9 = UITraitOverrides.subscript.getter(a2, a3, a4);
  return sub_1858CC0D8;
}

void sub_1858CBDB8(double **a1, uint64_t a2)
{
}

uint64_t UITraitOverrides.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1858CC15C(a1, a2, a3, (uint64_t)&unk_1ED0D8508, (uint64_t (*)(uint64_t))sub_1858DC840);
}

{
  return sub_1858CC15C(a1, a2, a3, (uint64_t)&unk_1ED0D84B8, (uint64_t (*)(uint64_t))sub_1858DD77C);
}

uint64_t UITraitOverrides.subscript.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1858CC234(a1, a2, a3, a4, a5, (uint64_t)&unk_1ED0D8508, (uint64_t (*)(uint64_t))sub_1858DC840);
}

{
  return sub_1858CC234(a1, a2, a3, a4, a5, (uint64_t)&unk_1ED0D84B8, (uint64_t (*)(uint64_t))sub_1858DD77C);
}

{
  void *v8;
  uint64_t vars8;

  if (a2)
  {
    if (qword_1E8FB0190 != -1) {
      swift_once();
    }
    a1 = qword_1E8FB0198;
  }
  double v8 = (void *)sub_1855741B8();
  swift_unknownObjectRetain();
  objc_msgSend(v8, sel__setNSIntegerValue_forTraitToken_, a1, sub_18557344C(a4, a5, (uint64_t)&unk_1ED0D8468, (uint64_t (*)(uint64_t))sub_1858DC7E8));
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

void (*UITraitOverrides.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void **a1, uint64_t a2)
{
  uint64_t v9 = malloc(0x30uLL);
  *a1 = v9;
  v9[4] = a4;
  _OWORD v9[5] = v4;
  v9[2] = a2;
  v9[3] = a3;
  *uint64_t v9 = UITraitOverrides.subscript.getter(a2, a3, a4);
  *((unsigned char *)v9 + _Block_object_dispose(&STACK[0x478], 8) = v10 & 1;
  return sub_1858CBEB0;
}

{
  uint64_t v4;
  void *v9;
  char v10;

  uint64_t v9 = malloc(0x30uLL);
  *a1 = v9;
  v9[4] = a4;
  _OWORD v9[5] = v4;
  v9[2] = a2;
  v9[3] = a3;
  *uint64_t v9 = UITraitOverrides.subscript.getter(a2, a3, a4);
  *((unsigned char *)v9 + _Block_object_dispose(&STACK[0x478], 8) = v10 & 1;
  return sub_1858CC394;
}

{
  uint64_t v4;
  void *v9;
  char v10;

  uint64_t v9 = malloc(0x30uLL);
  *a1 = v9;
  v9[4] = a4;
  _OWORD v9[5] = v4;
  v9[2] = a2;
  v9[3] = a3;
  *uint64_t v9 = UITraitOverrides.subscript.getter(a2, a3, a4);
  *((unsigned char *)v9 + _Block_object_dispose(&STACK[0x478], 8) = v10 & 1;
  return sub_1858CC83C;
}

void sub_1858CBEB0(void **a1, uint64_t a2)
{
}

uint64_t sub_1858CBF90(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v11 = (void *)sub_1855741B8();
  swift_unknownObjectRetain();
  objc_msgSend(v11, sel__setCGFloatValue_forTraitToken_, sub_18557344C(a3, a4, a5, a6), a1);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

void sub_1858CC0D8(double **a1, uint64_t a2)
{
}

void sub_1858CC0F0(double **a1, uint64_t a2, void (*a3)(void, void, void, double))
{
  uint64_t v3 = *a1;
  a3(*((void *)*a1 + 1), *((void *)v3 + 2), *((void *)*a1 + 3), *v3);
  free(v3);
}

uint64_t sub_1858CC15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  id v10 = *(id *)(*(void *)v5 + 16);
  objc_msgSend(v10, sel__valueForCGFloatTraitToken_, sub_18557344C(a2, a3, a4, a5));
  double v12 = v11;

  swift_unknownObjectRelease();
  if (v12 == 1.79769313e308) {
    return 0;
  }
  else {
    return *(void *)&v12;
  }
}

uint64_t sub_1858CC234(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t))
{
  if (a2) {
    *(double *)&a1 = 1.79769313e308;
  }
  double v12 = (void *)sub_1855741B8();
  swift_unknownObjectRetain();
  objc_msgSend(v12, sel__setCGFloatValue_forTraitToken_, sub_18557344C(a4, a5, a6, a7), *(double *)&a1);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

void sub_1858CC394(void **a1, uint64_t a2)
{
}

id UITraitOverrides.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(*(void *)v3 + 16);
  id v7 = objc_msgSend(v6, sel__valueForNSIntegerTraitToken_, sub_18557344C(a2, a3, (uint64_t)&unk_1ED0D8490, (uint64_t (*)(uint64_t))sub_1858DC804));

  swift_unknownObjectRelease();
  return v7;
}

{
  uint64_t v3;
  id v6;
  id v7;

  id v6 = *(id *)(*(void *)v3 + 16);
  id v7 = objc_msgSend(v6, sel__valueForNSIntegerTraitToken_, sub_18557344C(a2, a3, (uint64_t)&unk_1ED0D8468, (uint64_t (*)(uint64_t))sub_1858DC7E8));

  swift_unknownObjectRelease();
  if (qword_1E8FB0190 != -1) {
    swift_once();
  }
  if ((id)qword_1E8FB0198 == v7) {
    return 0;
  }
  else {
    return v7;
  }
}

void (*UITraitOverrides.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1)
{
  uint64_t v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[3] = a4;
  v9[4] = v4;
  v9[1] = a2;
  v9[2] = a3;
  *uint64_t v9 = UITraitOverrides.subscript.getter(a2, a3, a4);
  return sub_1858CC590;
}

{
  uint64_t v4;
  void *v9;

  uint64_t v9 = malloc(0x28uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[3] = v4;
  *uint64_t v9 = a2;
  v9[1] = a3;
  *((unsigned char *)v9 + 32) = UITraitOverrides.subscript.getter(a2, a3, a4);
  return sub_1858CCA90;
}

void sub_1858CC590(uint64_t **a1)
{
  id v1 = *a1;
  UITraitOverrides.subscript.setter(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

void sub_1858CC83C(void **a1, uint64_t a2)
{
}

void sub_1858CC854(void **a1, uint64_t a2, void (*a3)(void, void, void, void, void))
{
  uint64_t v3 = *a1;
  a3(**a1, *((unsigned __int8 *)*a1 + 8), (*a1)[2], (*a1)[3], (*a1)[4]);
  free(v3);
}

BOOL UITraitOverrides.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(*(void *)v3 + 16);
  id v7 = objc_msgSend(v6, sel__valueForNSIntegerTraitToken_, sub_18557344C(a2, a3, (uint64_t)&unk_1ED0D8440, (uint64_t (*)(uint64_t))sub_1858DC7CC));

  swift_unknownObjectRelease();
  return v7 != 0;
}

uint64_t UITraitOverrides.subscript.setter(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1 & 1;
  id v7 = (void *)sub_1855741B8();
  swift_unknownObjectRetain();
  objc_msgSend(v7, sel__setNSIntegerValue_forTraitToken_, v6, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8440, (uint64_t (*)(uint64_t))sub_1858DC7CC));
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

void sub_1858CCA90(uint64_t **a1)
{
  id v1 = *a1;
  UITraitOverrides.subscript.setter(*((unsigned char *)*a1 + 32), **a1, (*a1)[1], (*a1)[2]);
  free(v1);
}

void sub_1858CD068(uint64_t **a1, char a2)
{
}

void sub_1858CD3E4(uint64_t **a1, char a2)
{
}

void sub_1858CD760(uint64_t **a1, char a2)
{
}

uint64_t sub_1858CD9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  a5();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  id v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v7(a1, AssociatedTypeWitness);
}

void sub_1858CDB64(uint64_t **a1, char a2)
{
}

void sub_1858CDB7C(uint64_t **a1, char a2, void (*a3)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)(*a1)[6];
  uint64_t v6 = (void *)(*a1)[7];
  uint64_t v7 = (*a1)[4];
  uint64_t v8 = (*a1)[5];
  uint64_t v9 = (*a1)[2];
  uint64_t v11 = **a1;
  uint64_t v10 = (*a1)[1];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[6], v6, v7);
    a3(v5, v11, v10, v9);
    double v12 = *(void (**)(void *, uint64_t))(v8 + 8);
    v12(v5, v7);
    v12(v6, v7);
  }
  else
  {
    a3((void *)(*a1)[7], v11, v10, v9);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  free(v6);
  free(v5);
  free(v4);
}

uint64_t UITraitOverrides.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_186A1F12C();
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t v22 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v21 - v14;
  id v16 = *(id *)(*(void *)v4 + 16);
  uint64_t v23 = a3;
  id v17 = objc_msgSend(v16, sel__objectForTraitToken_, sub_1854AF3F4(a1, a2, a3, (uint64_t)&unk_1ED0D82D8, (uint64_t (*)(uint64_t))sub_1858DC6F8));
  swift_unknownObjectRelease();

  if (v17)
  {
    sub_186A1F1CC();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v25, 0, sizeof(v25));
  }
  sub_1853B8150((uint64_t)v25, (uint64_t)v26, &qword_1EB256B10);
  sub_1853B7020((uint64_t)v26, (uint64_t)v25, &qword_1EB256B10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  int v18 = swift_dynamicCast();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (v18)
  {
    v19(v11, 0, 1, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, AssociatedTypeWitness);
    sub_1854A715C((uint64_t)v15, a1, a2, v24);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
  }
  else
  {
    v19(v11, 1, 1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v22);
    (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  }
  return sub_1853B93B8((uint64_t)v26, &qword_1EB256B10);
}

{
  uint64_t v4;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v9 = *(id *)(*(void *)v4 + 16);
  objc_msgSend(v9, sel__valueForCGFloatTraitToken_, sub_1854AF3F4(a1, a2, a3, (uint64_t)&unk_1ED0D82B0, (uint64_t (*)(uint64_t))sub_1858DC6CC));
  uint64_t v11 = v10;

  swift_unknownObjectRelease();
  uint64_t v13 = v11;
  return sub_1854A715C((uint64_t)&v13, a1, a2, a4);
}

{
  uint64_t v4;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v9 = *(id *)(*(void *)v4 + 16);
  objc_msgSend(v9, sel__valueForCGFloatTraitToken_, sub_1854AF3F4(a1, a2, a3, (uint64_t)&unk_1ED0D8288, (uint64_t (*)(uint64_t))sub_1858DC6CC));
  uint64_t v11 = v10;

  swift_unknownObjectRelease();
  uint64_t v13 = v11;
  return sub_1854A715C((uint64_t)&v13, a1, a2, a4);
}

{
  uint64_t v4;
  id v9;
  id v10;
  id v12;

  uint64_t v9 = *(id *)(*(void *)v4 + 16);
  uint64_t v10 = objc_msgSend(v9, sel__valueForNSIntegerTraitToken_, sub_1854AF3F4(a1, a2, a3, (uint64_t)&unk_1ED0D8260, (uint64_t (*)(uint64_t))sub_1854C9934));

  swift_unknownObjectRelease();
  uint64_t v12 = v10;
  return sub_1854A715C((uint64_t)&v12, a1, a2, a4);
}

uint64_t UITraitOverrides.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1858CE678(a1, a2, a3, a4, a5, (void (*)(void))sub_1858DA238);
}

{
  return sub_1858CE678(a1, a2, a3, a4, a5, (void (*)(void))sub_1858DA404);
}

{
  return sub_1858CE678(a1, a2, a3, a4, a5, (void (*)(void))sub_1858DA4F0);
}

{
  return sub_1858CE678(a1, a2, a3, a4, a5, (void (*)(void))sub_1854A4794);
}

void (*UITraitOverrides.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  void v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  long long v11[2] = a4;
  *uint64_t v11 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v11[5] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  uint64_t v15 = malloc(v14);
  v11[8] = v15;
  UITraitOverrides.subscript.getter(a3, a4, a5, (uint64_t)v15);
  return sub_1858CE100;
}

{
  uint64_t v5;
  void *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  size_t v14;
  void *v15;

  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  void v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  long long v11[2] = a4;
  *uint64_t v11 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v11[5] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  uint64_t v15 = malloc(v14);
  v11[8] = v15;
  UITraitOverrides.subscript.getter(a3, a4, a5, (uint64_t)v15);
  return sub_1858CE338;
}

{
  uint64_t v5;
  void *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  size_t v14;
  void *v15;

  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  void v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  long long v11[2] = a4;
  *uint64_t v11 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v11[5] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  uint64_t v15 = malloc(v14);
  v11[8] = v15;
  UITraitOverrides.subscript.getter(a3, a4, a5, (uint64_t)v15);
  return sub_1858CE570;
}

{
  uint64_t v5;
  void *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  size_t v14;
  void *v15;

  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  void v11[3] = a5;
  void v11[4] = v5;
  v11[1] = a3;
  long long v11[2] = a4;
  *uint64_t v11 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v11[5] = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  v11[6] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[7] = malloc(v14);
  uint64_t v15 = malloc(v14);
  v11[8] = v15;
  UITraitOverrides.subscript.getter(a3, a4, a5, (uint64_t)v15);
  return sub_1858CE830;
}

void sub_1858CE100(uint64_t **a1, char a2)
{
}

void sub_1858CE338(uint64_t **a1, char a2)
{
}

void sub_1858CE570(uint64_t **a1, char a2)
{
}

uint64_t sub_1858CE678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  a6();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v8(a1, AssociatedTypeWitness);
}

void sub_1858CE830(uint64_t **a1, char a2)
{
}

void sub_1858CE848(uint64_t **a1, char a2, void (*a3)(void *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void *)(*a1)[7];
  uint64_t v5 = (void *)(*a1)[8];
  uint64_t v6 = (*a1)[5];
  uint64_t v7 = (*a1)[6];
  uint64_t v8 = (*a1)[3];
  uint64_t v10 = (*a1)[1];
  uint64_t v9 = (*a1)[2];
  uint64_t v11 = **a1;
  if (a2)
  {
    (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v4, v5, v6);
    a3(v4, v11, v10, v9, v8);
    uint64_t v12 = *(void (**)(void *, uint64_t))(v7 + 8);
    v12(v4, v6);
    v12(v5, v6);
  }
  else
  {
    a3((void *)(*a1)[8], v11, v10, v9, v8);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v5, v6);
  }
  free(v5);
  free(v4);
  free(v3);
}

uint64_t (*sub_1858CE97C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = UITraitOverrides.subscript.modify(v8, a2, a3, a4);
  return sub_1858CE9F4;
}

uint64_t (*sub_1858CEA00(double ***a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = (double **)malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = (double *)UITraitOverrides.subscript.modify(v8, a2, a3, a4);
  return sub_1858CE9F4;
}

uint64_t sub_1858CEA78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UITraitOverrides.subscript.getter(a1, a2, a3);
}

uint64_t sub_1858CEA94(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UITraitOverrides.subscript.setter(a1, a2 & 1, a3, a4, a5);
}

uint64_t (*sub_1858CEA9C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = UITraitOverrides.subscript.modify(v8, a2, a3, a4);
  return sub_1858CE9F4;
}

uint64_t (*sub_1858CEB1C(double ***a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = (double **)malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = (double *)UITraitOverrides.subscript.modify(v8, a2, a3, a4);
  return sub_1858CE9F4;
}

uint64_t sub_1858CEB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UITraitOverrides.subscript.getter(a1, a2, a3);
}

uint64_t sub_1858CEBB0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UITraitOverrides.subscript.setter(a1, a2 & 1, a3, a4, a5);
}

uint64_t (*sub_1858CEBB8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = UITraitOverrides.subscript.modify(v8, a2, a3, a4);
  return sub_1858CE9F4;
}

uint64_t (*sub_1858CEC38(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = UITraitOverrides.subscript.modify(v8, a2, a3, a4);
  return sub_1858CE9F4;
}

id sub_1858CECB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UITraitOverrides.subscript.getter(a1, a2, a3);
}

uint64_t sub_1858CECCC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UITraitOverrides.subscript.setter(a1, a2 & 1, a3, a4, a5);
}

uint64_t (*sub_1858CECD4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = UITraitOverrides.subscript.modify(v8, a2, a3, a4);
  return sub_1858CE9F4;
}

uint64_t (*sub_1858CED54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = UITraitOverrides.subscript.modify(v8, a2, a3, a4);
  return sub_1858CE9F4;
}

uint64_t sub_1858CEDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1854A0108(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_1858D9EE8);
}

uint64_t (*sub_1858CEDE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = UITraitOverrides.subscript.modify(v8, a2, a3, a4);
  return sub_1858CE9F4;
}

uint64_t (*sub_1858CEE64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = UITraitOverrides.subscript.modify(v8, a2, a3, a4);
  return sub_1858CE9F4;
}

uint64_t sub_1858CEEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1854A0108(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_1858DA088);
}

uint64_t (*sub_1858CEEF8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = UITraitOverrides.subscript.modify(v8, a2, a3, a4);
  return sub_1858CE9F4;
}

uint64_t sub_1858CEF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1854A0108(a1, a2, a3, a4, a5, a6, (void (*)(void))sub_1858DA164);
}

uint64_t (*sub_1858CEF8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void v8[4] = UITraitOverrides.subscript.modify(v8, a2, a3, a4);
  return sub_1858CE9F4;
}

uint64_t sub_1858CF008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1854A4418(a1, a2, a3, a4, a5, a6, a7, (void (*)(void))sub_1858DA238);
}

uint64_t (*sub_1858CF020(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v10 = malloc(0x28uLL);
  *a1 = v10;
  void v10[4] = UITraitOverrides.subscript.modify(v10, a2, a3, a4, a5);
  return sub_1858CE9F4;
}

uint64_t sub_1858CF0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1854A4418(a1, a2, a3, a4, a5, a6, a7, (void (*)(void))sub_1858DA404);
}

uint64_t (*sub_1858CF0C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v10 = malloc(0x28uLL);
  *a1 = v10;
  void v10[4] = UITraitOverrides.subscript.modify(v10, a2, a3, a4, a5);
  return sub_1858CE9F4;
}

uint64_t sub_1858CF150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1854A4418(a1, a2, a3, a4, a5, a6, a7, (void (*)(void))sub_1858DA4F0);
}

uint64_t (*sub_1858CF168(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v10 = malloc(0x28uLL);
  *a1 = v10;
  void v10[4] = UITraitOverrides.subscript.modify(v10, a2, a3, a4, a5);
  return sub_1858CE9F4;
}

uint64_t (*sub_1858CF1F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v10 = malloc(0x28uLL);
  *a1 = v10;
  void v10[4] = UITraitOverrides.subscript.modify(v10, a2, a3, a4, a5);
  return sub_1858CE9F4;
}

void sub_1858CF27C(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t _s5UIKit16UITraitOverridesV11descriptionSSvg_0()
{
  id v1 = objc_msgSend(*(id *)(*(void *)v0 + 16), sel_description);
  uint64_t v2 = sub_186A1E95C();

  return v2;
}

uint64_t UITraitOverrides.customMirror.getter()
{
  uint64_t v1 = sub_186A1FA7C();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FB0DD0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *v0;
  v10[0] = MEMORY[0x1E4FBC860];
  uint64_t v8 = sub_186A1FA6C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FB7C80);
  sub_1858DA5DC();
  return sub_186A1FA8C();
}

uint64_t sub_1858CF4E0()
{
  uint64_t v1 = sub_186A1FA7C();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FB0DD0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *v0;
  v10[0] = MEMORY[0x1E4FBC860];
  uint64_t v8 = sub_186A1FA6C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FB7C80);
  sub_1858DA5DC();
  return sub_186A1FA8C();
}

uint64_t (*UIView.traitOverrides.modify(void *a1))()
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[5] = v2;
  id v5 = objc_msgSend(v2, sel_traitOverrides);
  v4[1] = &unk_1ED644828;
  id v6 = objc_msgSend((id)swift_dynamicCastObjCProtocolUnconditional(), sel__swiftImplCopy);
  swift_unknownObjectRelease();
  v4[2] = &unk_1ED644828;
  uint64_t v7 = swift_dynamicCastObjCProtocolUnconditional();
  swift_getObjectType();
  sub_1853B985C(0, (unint64_t *)&qword_1E8FAFFC0);
  uint64_t result = (uint64_t (*)())swift_dynamicCastMetatype();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAFBC0);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v7;
    *uint64_t v4 = v9;
    return sub_1858CF7E8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1858CF7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIView.registerForTraitChanges<A>(_:handler:)(a1, a2, a3, a4);
}

uint64_t sub_1858CF810@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_traitOverrides);
  id v4 = objc_msgSend((id)swift_dynamicCastObjCProtocolUnconditional(), sel__swiftImplCopy);
  swift_unknownObjectRelease();
  uint64_t v5 = swift_dynamicCastObjCProtocolUnconditional();
  swift_getObjectType();
  sub_1853B985C(0, (unint64_t *)&qword_1E8FAFFC0);
  uint64_t result = swift_dynamicCastMetatype();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAFBC0);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*UIViewController.traitOverrides.modify(void *a1))()
{
  uint64_t v2 = v1;
  id v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[5] = v2;
  id v5 = objc_msgSend(v2, sel_traitOverrides);
  v4[1] = &unk_1ED644828;
  id v6 = objc_msgSend((id)swift_dynamicCastObjCProtocolUnconditional(), sel__swiftImplCopy);
  swift_unknownObjectRelease();
  v4[2] = &unk_1ED644828;
  uint64_t v7 = swift_dynamicCastObjCProtocolUnconditional();
  swift_getObjectType();
  sub_1853B985C(0, (unint64_t *)&qword_1E8FAFFC0);
  uint64_t result = (uint64_t (*)())swift_dynamicCastMetatype();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAFBC0);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v7;
    *id v4 = v9;
    return sub_1858CF7E8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1858CFA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIViewController.registerForTraitChanges<A>(_:handler:)(a1, a2, a3, a4);
}

id UIPresentationController.registerForTraitChanges<A>(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1854A0744(a1, a2, a3, a4, (uint64_t)&unk_1ED0D8128, (uint64_t)sub_1858B3B80, (uint64_t)&block_descriptor_52);
}

uint64_t (*UIPresentationController.traitOverrides.modify(void *a1))()
{
  uint64_t v2 = v1;
  id v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[5] = v2;
  id v5 = objc_msgSend(v2, sel_traitOverrides);
  v4[1] = &unk_1ED644828;
  id v6 = objc_msgSend((id)swift_dynamicCastObjCProtocolUnconditional(), sel__swiftImplCopy);
  swift_unknownObjectRelease();
  v4[2] = &unk_1ED644828;
  uint64_t v7 = swift_dynamicCastObjCProtocolUnconditional();
  swift_getObjectType();
  sub_1853B985C(0, (unint64_t *)&qword_1E8FAFFC0);
  uint64_t result = (uint64_t (*)())swift_dynamicCastMetatype();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAFBC0);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v7;
    *id v4 = v9;
    return sub_1858CF7E8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1858CFC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIPresentationController.registerForTraitChanges<A>(_:handler:)(a1, a2, a3, a4);
}

id UIWindowScene.registerForTraitChanges<A>(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1854A0744(a1, a2, a3, a4, (uint64_t)&unk_1ED0D8150, (uint64_t)sub_1858B61FC, (uint64_t)&block_descriptor_58);
}

id UIWindowScene.unregisterForTraitChanges(_:)(uint64_t a1)
{
  return objc_msgSend(v1, sel_unregisterForTraitChanges_, a1);
}

void sub_1858CFC6C(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  id v3 = *a2;
  swift_retain();
  id v4 = objc_msgSend(v3, sel_traitOverrides);
  id v5 = (void *)swift_dynamicCastObjCProtocolUnconditional();
  id v6 = *(id *)(v2 + 16);
  swift_release();
  objc_msgSend(v5, sel__replaceWithOverrides_, v6);
  swift_unknownObjectRelease();
}

uint64_t (*UIWindowScene.traitOverrides.modify(void *a1))()
{
  uint64_t v2 = v1;
  id v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[5] = v2;
  id v5 = objc_msgSend(v2, sel_traitOverrides);
  v4[1] = &unk_1ED644828;
  id v6 = objc_msgSend((id)swift_dynamicCastObjCProtocolUnconditional(), sel__swiftImplCopy);
  swift_unknownObjectRelease();
  v4[2] = &unk_1ED644828;
  uint64_t v7 = swift_dynamicCastObjCProtocolUnconditional();
  swift_getObjectType();
  sub_1853B985C(0, (unint64_t *)&qword_1E8FAFFC0);
  uint64_t result = (uint64_t (*)())swift_dynamicCastMetatype();
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAFBC0);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v7;
    *id v4 = v9;
    return sub_1858CF7E8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1858CFE64(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  id v4 = (void *)(*a1)[5];
  if (a2)
  {
    swift_retain();
    id v5 = objc_msgSend(v4, sel_traitOverrides);
    void v2[3] = (uint64_t)&unk_1ED644828;
    id v6 = (void *)swift_dynamicCastObjCProtocolUnconditional();
    id v7 = *(id *)(v3 + 16);
    swift_release();
    objc_msgSend(v6, sel__replaceWithOverrides_, v7);

    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    id v8 = objc_msgSend((id)(*a1)[5], sel_traitOverrides);
    v2[4] = (uint64_t)&unk_1ED644828;
    uint64_t v9 = (void *)swift_dynamicCastObjCProtocolUnconditional();
    id v10 = *(id *)(v3 + 16);
    swift_release();
    objc_msgSend(v9, sel__replaceWithOverrides_, v10);

    swift_unknownObjectRelease();
  }
  free(v2);
}

id sub_1858CFFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIWindowScene.registerForTraitChanges<A>(_:handler:)(a1, a2, a3, a4);
}

uint64_t sub_1858CFFDC()
{
  return UIWindowScene.registerForTraitChanges(_:target:action:)();
}

uint64_t sub_1858D0000()
{
  return UIWindowScene.registerForTraitChanges(_:action:)();
}

id sub_1858D0024(uint64_t a1)
{
  return objc_msgSend(*v1, sel_unregisterForTraitChanges_, a1);
}

id sub_1858D0038()
{
  id result = objc_msgSend(objc_allocWithZone((Class)UITraitCollection), sel_init);
  qword_1E8FB01B0 = (uint64_t)result;
  return result;
}

id sub_1858D006C(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_userInterfaceIdiom, &qword_1E8FB01C0);
}

uint64_t static UITraitUserInterfaceIdiom.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB01B8, (uint64_t)&qword_1E8FB01C0);
}

void sub_1858D00A4(uint64_t a1)
{
}

uint64_t static UITraitUserInterfaceIdiom.name.getter()
{
  return sub_1858D790C(&qword_1E8FB01C8, &qword_1E8FB01D0);
}

void sub_1858D00EC(uint64_t a1)
{
}

uint64_t static UITraitUserInterfaceIdiom.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB01E0, &qword_1E8FB01E8);
}

id sub_1858D0134(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C68, byte_1E8FB0200);
}

uint64_t static UITraitUserInterfaceIdiom.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB01F8, byte_1E8FB0200);
}

uint64_t static UITraitUserInterfaceIdiom._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitUserInterfaceIdiom._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D017C@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB01B8, &qword_1E8FB01C0, a1);
}

uint64_t sub_1858D01A0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB01E0, &qword_1E8FB01E8);
}

uint64_t sub_1858D01C8(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB01C8, &qword_1E8FB01D0);
}

uint64_t sub_1858D01F0(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB01F8, byte_1E8FB0200);
}

uint64_t UIMutableTraits.userInterfaceIdiom.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  id v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  id v5 = sub_1854A7054((unint64_t *)&unk_1E8FB0DE8, type metadata accessor for UIUserInterfaceIdiom);
  v4(&v7, &type metadata for UITraitUserInterfaceIdiom, &type metadata for UITraitUserInterfaceIdiom, &protocol witness table for UITraitUserInterfaceIdiom, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D02C0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.userInterfaceIdiom.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D02F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.userInterfaceIdiom.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits.userInterfaceIdiom.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  id v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054((unint64_t *)&unk_1E8FB0DE8, type metadata accessor for UIUserInterfaceIdiom);
  return v5(&v8, &type metadata for UITraitUserInterfaceIdiom, &type metadata for UITraitUserInterfaceIdiom, &protocol witness table for UITraitUserInterfaceIdiom, v6, a2, a3);
}

void (*UIMutableTraits.userInterfaceIdiom.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  id v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054((unint64_t *)&unk_1E8FB0DE8, type metadata accessor for UIUserInterfaceIdiom);
  v8(&type metadata for UITraitUserInterfaceIdiom, &type metadata for UITraitUserInterfaceIdiom, &protocol witness table for UITraitUserInterfaceIdiom, v9, a2, a3);
  return sub_1858D04B0;
}

void sub_1858D04B0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054((unint64_t *)&unk_1E8FB0DE8, type metadata accessor for UIUserInterfaceIdiom);
  v4(v1, &type metadata for UITraitUserInterfaceIdiom, &type metadata for UITraitUserInterfaceIdiom, &protocol witness table for UITraitUserInterfaceIdiom, v5, v3, v2);
  free(v1);
}

id sub_1858D056C(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_userInterfaceStyle, &qword_1E8FB0210);
}

uint64_t static UITraitUserInterfaceStyle.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB0208, (uint64_t)&qword_1E8FB0210);
}

void sub_1858D05A4(uint64_t a1)
{
}

uint64_t static UITraitUserInterfaceStyle.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0218, &qword_1E8FB0220);
}

void sub_1858D05EC(uint64_t a1)
{
}

uint64_t static UITraitUserInterfaceStyle.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0230, &qword_1E8FB0238);
}

id sub_1858D0634(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C80, &byte_1E8FB0250);
}

uint64_t static UITraitUserInterfaceStyle.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0248, (unsigned __int8 *)&byte_1E8FB0250);
}

uint64_t static UITraitUserInterfaceStyle._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitUserInterfaceStyle._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D067C@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0208, &qword_1E8FB0210, a1);
}

uint64_t sub_1858D06A0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0230, &qword_1E8FB0238);
}

uint64_t sub_1858D06C8(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0218, &qword_1E8FB0220);
}

uint64_t sub_1858D06F0(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0248, (unsigned __int8 *)&byte_1E8FB0250);
}

uint64_t sub_1858D0714@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.userInterfaceStyle.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D0748(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.userInterfaceStyle.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

void (*UIMutableTraits.userInterfaceStyle.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  id v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1EB256740, type metadata accessor for UIUserInterfaceStyle);
  v8(&type metadata for UITraitUserInterfaceStyle, &type metadata for UITraitUserInterfaceStyle, &protocol witness table for UITraitUserInterfaceStyle, v9, a2, a3);
  return sub_1858D0858;
}

void sub_1858D0858(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1EB256740, type metadata accessor for UIUserInterfaceStyle);
  v4(v1, &type metadata for UITraitUserInterfaceStyle, &type metadata for UITraitUserInterfaceStyle, &protocol witness table for UITraitUserInterfaceStyle, v5, v3, v2);
  free(v1);
}

id sub_1858D0914(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_layoutDirection, &qword_1E8FB0260);
}

uint64_t static UITraitLayoutDirection.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB0258, (uint64_t)&qword_1E8FB0260);
}

void sub_1858D094C(uint64_t a1)
{
}

uint64_t static UITraitLayoutDirection.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0268, &qword_1E8FB0270);
}

void sub_1858D0994(uint64_t a1)
{
}

uint64_t static UITraitLayoutDirection.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0280, &qword_1E8FB0288);
}

id sub_1858D09DC(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4BF8, byte_1E8FB02A0);
}

uint64_t static UITraitLayoutDirection.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0298, byte_1E8FB02A0);
}

uint64_t static UITraitLayoutDirection._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitLayoutDirection._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D0A24@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0258, &qword_1E8FB0260, a1);
}

uint64_t sub_1858D0A48(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0280, &qword_1E8FB0288);
}

uint64_t sub_1858D0A70(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0268, &qword_1E8FB0270);
}

uint64_t sub_1858D0A98(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0298, byte_1E8FB02A0);
}

uint64_t sub_1858D0ABC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.layoutDirection.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D0AF0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.layoutDirection.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

void (*UIMutableTraits.layoutDirection.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  id v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1EB256788, type metadata accessor for UITraitEnvironmentLayoutDirection);
  v8(&type metadata for UITraitLayoutDirection, &type metadata for UITraitLayoutDirection, &protocol witness table for UITraitLayoutDirection, v9, a2, a3);
  return sub_1858D0C00;
}

void sub_1858D0C00(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1EB256788, type metadata accessor for UITraitEnvironmentLayoutDirection);
  v4(v1, &type metadata for UITraitLayoutDirection, &type metadata for UITraitLayoutDirection, &protocol witness table for UITraitLayoutDirection, v5, v3, v2);
  free(v1);
}

id sub_1858D0CBC(uint64_t a1)
{
  return sub_1858D5300(a1, (SEL *)&selRef_displayScale, &qword_1E8FB02B0);
}

double static UITraitDisplayScale.defaultValue.getter()
{
  return sub_1858D538C(&qword_1E8FB02A8, (uint64_t)&qword_1E8FB02B0);
}

void sub_1858D0CF4(uint64_t a1)
{
}

uint64_t static UITraitDisplayScale.name.getter()
{
  return sub_1858D790C(&qword_1E8FB02B8, &qword_1E8FB02C0);
}

void sub_1858D0D3C(uint64_t a1)
{
}

uint64_t static UITraitDisplayScale.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB02D0, &qword_1E8FB02D8);
}

id sub_1858D0D84(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4BC8, byte_1E8FB02F0);
}

uint64_t static UITraitDisplayScale.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB02E8, byte_1E8FB02F0);
}

uint64_t static UITraitDisplayScale._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitDisplayScale._isPrivate.getter()
{
  return 0;
}

double sub_1858D0DCC@<D0>(void *a1@<X8>)
{
  return sub_1858D54C4(&qword_1E8FB02A8, (double *)&qword_1E8FB02B0, a1);
}

uint64_t sub_1858D0DF0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB02D0, &qword_1E8FB02D8);
}

uint64_t sub_1858D0E18(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB02B8, &qword_1E8FB02C0);
}

uint64_t sub_1858D0E40(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB02E8, byte_1E8FB02F0);
}

uint64_t sub_1858D0E64@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t result = UIMutableTraits.displayScale.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = v5;
  return result;
}

uint64_t sub_1858D0E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.displayScale.setter(*(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t (*UIMutableTraits.displayScale.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = a2;
  *(double *)a1 = (*(double (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a3 + 32))(&type metadata for UITraitDisplayScale, &type metadata for UITraitDisplayScale, &protocol witness table for UITraitDisplayScale, a2, a3);
  return sub_1858D0F44;
}

uint64_t sub_1858D0F44(uint64_t a1, uint64_t a2)
{
  return sub_1858D56D4(a1, a2, (uint64_t)&type metadata for UITraitDisplayScale, (uint64_t)&protocol witness table for UITraitDisplayScale);
}

id sub_1858D0F58(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_horizontalSizeClass, &qword_1E8FB0300);
}

uint64_t static UITraitHorizontalSizeClass.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB02F8, (uint64_t)&qword_1E8FB0300);
}

void sub_1858D0F90(uint64_t a1)
{
}

uint64_t static UITraitHorizontalSizeClass.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0308, &qword_1E8FB0310);
}

void sub_1858D0FD8(uint64_t a1)
{
}

uint64_t static UITraitHorizontalSizeClass.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0320, &qword_1E8FB0328);
}

id sub_1858D1020(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4BE0, byte_1E8FB0340);
}

uint64_t static UITraitHorizontalSizeClass.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0338, byte_1E8FB0340);
}

uint64_t static UITraitHorizontalSizeClass._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitHorizontalSizeClass._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D1068@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB02F8, &qword_1E8FB0300, a1);
}

uint64_t sub_1858D108C(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0320, &qword_1E8FB0328);
}

uint64_t sub_1858D10B4(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0308, &qword_1E8FB0310);
}

uint64_t sub_1858D10DC(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0338, byte_1E8FB0340);
}

uint64_t sub_1858D1100@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.horizontalSizeClass.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D1134(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.horizontalSizeClass.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

void (*UIMutableTraits.horizontalSizeClass.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  id v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1EB256770, type metadata accessor for UIUserInterfaceSizeClass);
  v8(&type metadata for UITraitHorizontalSizeClass, &type metadata for UITraitHorizontalSizeClass, &protocol witness table for UITraitHorizontalSizeClass, v9, a2, a3);
  return sub_1858D1244;
}

void sub_1858D1244(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1EB256770, type metadata accessor for UIUserInterfaceSizeClass);
  v4(v1, &type metadata for UITraitHorizontalSizeClass, &type metadata for UITraitHorizontalSizeClass, &protocol witness table for UITraitHorizontalSizeClass, v5, v3, v2);
  free(v1);
}

id sub_1858D1300(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_verticalSizeClass, &qword_1E8FB0350);
}

uint64_t static UITraitVerticalSizeClass.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB0348, (uint64_t)&qword_1E8FB0350);
}

void sub_1858D1338(uint64_t a1)
{
}

uint64_t static UITraitVerticalSizeClass.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0358, &qword_1E8FB0360);
}

void sub_1858D1380(uint64_t a1)
{
}

uint64_t static UITraitVerticalSizeClass.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0370, &qword_1E8FB0378);
}

id sub_1858D13C8(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C88, byte_1E8FB0390);
}

uint64_t static UITraitVerticalSizeClass.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0388, byte_1E8FB0390);
}

uint64_t static UITraitVerticalSizeClass._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitVerticalSizeClass._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D1410@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0348, &qword_1E8FB0350, a1);
}

uint64_t sub_1858D1434(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0370, &qword_1E8FB0378);
}

uint64_t sub_1858D145C(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0358, &qword_1E8FB0360);
}

uint64_t sub_1858D1484(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0388, byte_1E8FB0390);
}

uint64_t sub_1858D14A8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.verticalSizeClass.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D14DC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.verticalSizeClass.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

void (*UIMutableTraits.verticalSizeClass.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  id v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1EB256770, type metadata accessor for UIUserInterfaceSizeClass);
  v8(&type metadata for UITraitVerticalSizeClass, &type metadata for UITraitVerticalSizeClass, &protocol witness table for UITraitVerticalSizeClass, v9, a2, a3);
  return sub_1858D15EC;
}

void sub_1858D15EC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1EB256770, type metadata accessor for UIUserInterfaceSizeClass);
  v4(v1, &type metadata for UITraitVerticalSizeClass, &type metadata for UITraitVerticalSizeClass, &protocol witness table for UITraitVerticalSizeClass, v5, v3, v2);
  free(v1);
}

id sub_1858D16A8(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_forceTouchCapability, &qword_1E8FB03A0);
}

uint64_t static UITraitForceTouchCapability.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB0398, (uint64_t)&qword_1E8FB03A0);
}

void sub_1858D16E0(uint64_t a1)
{
}

uint64_t static UITraitForceTouchCapability.name.getter()
{
  return sub_1858D790C(&qword_1E8FB03A8, &qword_1E8FB03B0);
}

void sub_1858D1728(uint64_t a1)
{
}

uint64_t static UITraitForceTouchCapability.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB03C0, &qword_1E8FB03C8);
}

id sub_1858D1770(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4BD8, byte_1E8FB03E0);
}

uint64_t static UITraitForceTouchCapability.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB03D8, byte_1E8FB03E0);
}

uint64_t static UITraitForceTouchCapability._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitForceTouchCapability._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D17B8@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0398, &qword_1E8FB03A0, a1);
}

uint64_t sub_1858D17DC(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB03C0, &qword_1E8FB03C8);
}

uint64_t sub_1858D1804(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB03A8, &qword_1E8FB03B0);
}

uint64_t sub_1858D182C(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB03D8, byte_1E8FB03E0);
}

uint64_t UIMutableTraits.forceTouchCapability.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  id v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0DF8, type metadata accessor for UIForceTouchCapability);
  v4(&v7, &type metadata for UITraitForceTouchCapability, &type metadata for UITraitForceTouchCapability, &protocol witness table for UITraitForceTouchCapability, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D18FC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.forceTouchCapability.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D1930(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.forceTouchCapability.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits.forceTouchCapability.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054(&qword_1E8FB0DF8, type metadata accessor for UIForceTouchCapability);
  return v5(&v8, &type metadata for UITraitForceTouchCapability, &type metadata for UITraitForceTouchCapability, &protocol witness table for UITraitForceTouchCapability, v6, a2, a3);
}

void (*UIMutableTraits.forceTouchCapability.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  id v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1E8FB0DF8, type metadata accessor for UIForceTouchCapability);
  v8(&type metadata for UITraitForceTouchCapability, &type metadata for UITraitForceTouchCapability, &protocol witness table for UITraitForceTouchCapability, v9, a2, a3);
  return sub_1858D1AEC;
}

void sub_1858D1AEC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0DF8, type metadata accessor for UIForceTouchCapability);
  v4(v1, &type metadata for UITraitForceTouchCapability, &type metadata for UITraitForceTouchCapability, &protocol witness table for UITraitForceTouchCapability, v5, v3, v2);
  free(v1);
}

id sub_1858D1BA8()
{
  if (qword_1E8FB01A8 != -1) {
    swift_once();
  }
  id result = objc_msgSend((id)qword_1E8FB01B0, sel_preferredContentSizeCategory);
  qword_1E8FB03F0 = (uint64_t)result;
  return result;
}

id static UITraitPreferredContentSizeCategory.defaultValue.getter()
{
  if (qword_1E8FB03E8 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1E8FB03F0;
  return v0;
}

void sub_1858D1C6C(uint64_t a1)
{
}

uint64_t static UITraitPreferredContentSizeCategory.name.getter()
{
  return sub_1858D790C(&qword_1E8FB03F8, &qword_1E8FB0400);
}

void sub_1858D1CB4(uint64_t a1)
{
}

uint64_t static UITraitPreferredContentSizeCategory.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0410, &qword_1E8FB0418);
}

id sub_1858D1CFC(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C10, byte_1E8FB0430);
}

uint64_t static UITraitPreferredContentSizeCategory.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0428, byte_1E8FB0430);
}

uint64_t static UITraitPreferredContentSizeCategory._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitPreferredContentSizeCategory._isPrivate.getter()
{
  return 0;
}

id sub_1858D1D44@<X0>(void *a1@<X8>)
{
  if (qword_1E8FB03E8 != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)qword_1E8FB03F0;
  *a1 = qword_1E8FB03F0;
  return v2;
}

uint64_t sub_1858D1DB0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0410, &qword_1E8FB0418);
}

uint64_t sub_1858D1DD8(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB03F8, &qword_1E8FB0400);
}

uint64_t sub_1858D1E00(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0428, byte_1E8FB0430);
}

uint64_t sub_1858D1E24@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.preferredContentSizeCategory.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D1E58(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.preferredContentSizeCategory.setter((uint64_t)*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

void (*UIMutableTraits.preferredContentSizeCategory.modify(void *a1, uint64_t a2, uint64_t a3))(id **a1, char a2)
{
  id v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 296);
  uint64_t v9 = sub_1854A7054((unint64_t *)&unk_1EB256750, type metadata accessor for UIContentSizeCategory);
  v8(&type metadata for UITraitPreferredContentSizeCategory, &type metadata for UITraitPreferredContentSizeCategory, &protocol witness table for UITraitPreferredContentSizeCategory, v9, a2, a3);
  return sub_1858D1F7C;
}

void sub_1858D1F7C(id **a1, char a2)
{
  uint64_t v2 = *a1;
  id v3 = (*a1)[1];
  id v4 = (*a1)[3];
  id v5 = (*a1)[2];
  if (a2)
  {
    id *v2 = v3;
    uint64_t v6 = (void (*)(id *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, id, void *))v4[38];
    uint64_t v7 = sub_1854A7054((unint64_t *)&unk_1EB256750, type metadata accessor for UIContentSizeCategory);
    v6(v2, &type metadata for UITraitPreferredContentSizeCategory, &type metadata for UITraitPreferredContentSizeCategory, &protocol witness table for UITraitPreferredContentSizeCategory, v7, v5, v4);
  }
  else
  {
    id *v2 = v3;
    uint64_t v8 = (void (*)(id *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, id, void *))v4[38];
    uint64_t v9 = sub_1854A7054((unint64_t *)&unk_1EB256750, type metadata accessor for UIContentSizeCategory);
    v8(v2, &type metadata for UITraitPreferredContentSizeCategory, &type metadata for UITraitPreferredContentSizeCategory, &protocol witness table for UITraitPreferredContentSizeCategory, v9, v5, v4);
  }
  free(v2);
}

id sub_1858D20C4(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_displayGamut, &qword_1E8FB0440);
}

uint64_t static UITraitDisplayGamut.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB0438, (uint64_t)&qword_1E8FB0440);
}

void sub_1858D20FC(uint64_t a1)
{
}

uint64_t static UITraitDisplayGamut.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0448, &qword_1E8FB0450);
}

void sub_1858D2144(uint64_t a1)
{
}

uint64_t static UITraitDisplayGamut.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0460, &qword_1E8FB0468);
}

id sub_1858D218C(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4BC0, byte_1E8FB0480);
}

uint64_t static UITraitDisplayGamut.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0478, byte_1E8FB0480);
}

uint64_t static UITraitDisplayGamut._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitDisplayGamut._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D21D4@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0438, &qword_1E8FB0440, a1);
}

uint64_t sub_1858D21F8(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0460, &qword_1E8FB0468);
}

uint64_t sub_1858D2220(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0448, &qword_1E8FB0450);
}

uint64_t sub_1858D2248(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0478, byte_1E8FB0480);
}

uint64_t sub_1858D226C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.displayGamut.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D22A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.displayGamut.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

void (*UIMutableTraits.displayGamut.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1EB256728, type metadata accessor for UIDisplayGamut);
  v8(&type metadata for UITraitDisplayGamut, &type metadata for UITraitDisplayGamut, &protocol witness table for UITraitDisplayGamut, v9, a2, a3);
  return sub_1858D23B0;
}

void sub_1858D23B0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1EB256728, type metadata accessor for UIDisplayGamut);
  v4(v1, &type metadata for UITraitDisplayGamut, &type metadata for UITraitDisplayGamut, &protocol witness table for UITraitDisplayGamut, v5, v3, v2);
  free(v1);
}

id sub_1858D246C(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_accessibilityContrast, &qword_1E8FB0490);
}

uint64_t static UITraitAccessibilityContrast.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB0488, (uint64_t)&qword_1E8FB0490);
}

void sub_1858D24A4(uint64_t a1)
{
}

uint64_t static UITraitAccessibilityContrast.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0498, &qword_1E8FB04A0);
}

void sub_1858D24EC(uint64_t a1)
{
}

uint64_t static UITraitAccessibilityContrast.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB04B0, &qword_1E8FB04B8);
}

id sub_1858D2534(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4B88, byte_1E8FB04D0);
}

uint64_t static UITraitAccessibilityContrast.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB04C8, byte_1E8FB04D0);
}

uint64_t static UITraitAccessibilityContrast._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitAccessibilityContrast._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D257C@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0488, &qword_1E8FB0490, a1);
}

uint64_t sub_1858D25A0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB04B0, &qword_1E8FB04B8);
}

uint64_t sub_1858D25C8(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0498, &qword_1E8FB04A0);
}

uint64_t sub_1858D25F0(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB04C8, byte_1E8FB04D0);
}

uint64_t sub_1858D2614@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.accessibilityContrast.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D2648(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.accessibilityContrast.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

void (*UIMutableTraits.accessibilityContrast.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1EB256760, type metadata accessor for UIAccessibilityContrast);
  v8(&type metadata for UITraitAccessibilityContrast, &type metadata for UITraitAccessibilityContrast, &protocol witness table for UITraitAccessibilityContrast, v9, a2, a3);
  return sub_1858D2758;
}

void sub_1858D2758(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1EB256760, type metadata accessor for UIAccessibilityContrast);
  v4(v1, &type metadata for UITraitAccessibilityContrast, &type metadata for UITraitAccessibilityContrast, &protocol witness table for UITraitAccessibilityContrast, v5, v3, v2);
  free(v1);
}

id sub_1858D2814(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_userInterfaceLevel, &qword_1E8FB04E0);
}

uint64_t static UITraitUserInterfaceLevel.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB04D8, (uint64_t)&qword_1E8FB04E0);
}

void sub_1858D284C(uint64_t a1)
{
}

uint64_t static UITraitUserInterfaceLevel.name.getter()
{
  return sub_1858D790C(&qword_1E8FB04E8, &qword_1E8FB04F0);
}

void sub_1858D2894(uint64_t a1)
{
}

uint64_t static UITraitUserInterfaceLevel.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0500, &qword_1E8FB0508);
}

id sub_1858D28DC(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C70, byte_1E8FB0520);
}

uint64_t static UITraitUserInterfaceLevel.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0518, byte_1E8FB0520);
}

uint64_t static UITraitUserInterfaceLevel._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitUserInterfaceLevel._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D2924@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB04D8, &qword_1E8FB04E0, a1);
}

uint64_t sub_1858D2948(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0500, &qword_1E8FB0508);
}

uint64_t sub_1858D2970(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB04E8, &qword_1E8FB04F0);
}

uint64_t sub_1858D2998(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0518, byte_1E8FB0520);
}

uint64_t sub_1858D29BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.userInterfaceLevel.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D29F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.userInterfaceLevel.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

void (*UIMutableTraits.userInterfaceLevel.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1EB2566E8, type metadata accessor for UIUserInterfaceLevel);
  v8(&type metadata for UITraitUserInterfaceLevel, &type metadata for UITraitUserInterfaceLevel, &protocol witness table for UITraitUserInterfaceLevel, v9, a2, a3);
  return sub_1858D2B00;
}

void sub_1858D2B00(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1EB2566E8, type metadata accessor for UIUserInterfaceLevel);
  v4(v1, &type metadata for UITraitUserInterfaceLevel, &type metadata for UITraitUserInterfaceLevel, &protocol witness table for UITraitUserInterfaceLevel, v5, v3, v2);
  free(v1);
}

id sub_1858D2BBC(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_legibilityWeight, &qword_1E8FB0530);
}

uint64_t static UITraitLegibilityWeight.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB0528, (uint64_t)&qword_1E8FB0530);
}

void sub_1858D2BF4(uint64_t a1)
{
}

uint64_t static UITraitLegibilityWeight.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0538, &qword_1E8FB0540);
}

void sub_1858D2C3C(uint64_t a1)
{
}

uint64_t static UITraitLegibilityWeight.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0550, &qword_1E8FB0558);
}

id sub_1858D2C84(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C00, &byte_1E8FB0570);
}

uint64_t static UITraitLegibilityWeight.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0568, (unsigned __int8 *)&byte_1E8FB0570);
}

uint64_t static UITraitLegibilityWeight._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitLegibilityWeight._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D2CCC@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0528, &qword_1E8FB0530, a1);
}

uint64_t sub_1858D2CF0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0550, &qword_1E8FB0558);
}

uint64_t sub_1858D2D18(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0538, &qword_1E8FB0540);
}

uint64_t sub_1858D2D40(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0568, (unsigned __int8 *)&byte_1E8FB0570);
}

uint64_t UIMutableTraits.legibilityWeight.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  id v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054((unint64_t *)&unk_1E8FB0E00, type metadata accessor for UILegibilityWeight);
  v4(&v7, &type metadata for UITraitLegibilityWeight, &type metadata for UITraitLegibilityWeight, &protocol witness table for UITraitLegibilityWeight, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D2E10@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.legibilityWeight.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D2E44(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.legibilityWeight.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits.legibilityWeight.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054((unint64_t *)&unk_1E8FB0E00, type metadata accessor for UILegibilityWeight);
  return v5(&v8, &type metadata for UITraitLegibilityWeight, &type metadata for UITraitLegibilityWeight, &protocol witness table for UITraitLegibilityWeight, v6, a2, a3);
}

void (*UIMutableTraits.legibilityWeight.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054((unint64_t *)&unk_1E8FB0E00, type metadata accessor for UILegibilityWeight);
  v8(&type metadata for UITraitLegibilityWeight, &type metadata for UITraitLegibilityWeight, &protocol witness table for UITraitLegibilityWeight, v9, a2, a3);
  return sub_1858D3000;
}

void sub_1858D3000(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054((unint64_t *)&unk_1E8FB0E00, type metadata accessor for UILegibilityWeight);
  v4(v1, &type metadata for UITraitLegibilityWeight, &type metadata for UITraitLegibilityWeight, &protocol witness table for UITraitLegibilityWeight, v5, v3, v2);
  free(v1);
}

id sub_1858D30BC(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_activeAppearance, &qword_1E8FB0580);
}

uint64_t static UITraitActiveAppearance.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB0578, (uint64_t)&qword_1E8FB0580);
}

void sub_1858D30F4(uint64_t a1)
{
}

uint64_t static UITraitActiveAppearance.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0588, &qword_1E8FB0590);
}

void sub_1858D313C(uint64_t a1)
{
}

uint64_t static UITraitActiveAppearance.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB05A0, &qword_1E8FB05A8);
}

id sub_1858D3184(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4B90, byte_1E8FB05C0);
}

uint64_t static UITraitActiveAppearance.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB05B8, byte_1E8FB05C0);
}

uint64_t static UITraitActiveAppearance._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitActiveAppearance._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D31CC@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0578, &qword_1E8FB0580, a1);
}

uint64_t sub_1858D31F0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB05A0, &qword_1E8FB05A8);
}

uint64_t sub_1858D3218(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0588, &qword_1E8FB0590);
}

uint64_t sub_1858D3240(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB05B8, byte_1E8FB05C0);
}

uint64_t UIMutableTraits.activeAppearance.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  id v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054(&qword_1EB256558, type metadata accessor for UIUserInterfaceActiveAppearance);
  v4(&v7, &type metadata for UITraitActiveAppearance, &type metadata for UITraitActiveAppearance, &protocol witness table for UITraitActiveAppearance, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D3310@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.activeAppearance.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D3344(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.activeAppearance.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

void (*UIMutableTraits.activeAppearance.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1EB256558, type metadata accessor for UIUserInterfaceActiveAppearance);
  v8(&type metadata for UITraitActiveAppearance, &type metadata for UITraitActiveAppearance, &protocol witness table for UITraitActiveAppearance, v9, a2, a3);
  return sub_1858D3454;
}

void sub_1858D3454(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1EB256558, type metadata accessor for UIUserInterfaceActiveAppearance);
  v4(v1, &type metadata for UITraitActiveAppearance, &type metadata for UITraitActiveAppearance, &protocol witness table for UITraitActiveAppearance, v5, v3, v2);
  free(v1);
}

id sub_1858D3510(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_toolbarItemPresentationSize, &qword_1E8FB05D0);
}

uint64_t static UITraitToolbarItemPresentationSize.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB05C8, (uint64_t)&qword_1E8FB05D0);
}

void sub_1858D3548(uint64_t a1)
{
}

uint64_t static UITraitToolbarItemPresentationSize.name.getter()
{
  return sub_1858D790C(&qword_1E8FB05D8, &qword_1E8FB05E0);
}

void sub_1858D3590(uint64_t a1)
{
}

uint64_t static UITraitToolbarItemPresentationSize.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB05F0, &qword_1E8FB05F8);
}

id sub_1858D35D8(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C48, byte_1E8FB0610);
}

uint64_t static UITraitToolbarItemPresentationSize.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0608, byte_1E8FB0610);
}

uint64_t static UITraitToolbarItemPresentationSize._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitToolbarItemPresentationSize._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D3620@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB05C8, &qword_1E8FB05D0, a1);
}

uint64_t sub_1858D3644(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB05F0, &qword_1E8FB05F8);
}

uint64_t sub_1858D366C(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB05D8, &qword_1E8FB05E0);
}

uint64_t sub_1858D3694(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0608, byte_1E8FB0610);
}

uint64_t UIMutableTraits.toolbarItemPresentationSize.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  id v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E10, type metadata accessor for UINSToolbarItemPresentationSize);
  v4(&v7, &type metadata for UITraitToolbarItemPresentationSize, &type metadata for UITraitToolbarItemPresentationSize, &protocol witness table for UITraitToolbarItemPresentationSize, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D3764@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.toolbarItemPresentationSize.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D3798(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.toolbarItemPresentationSize.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits.toolbarItemPresentationSize.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054(&qword_1E8FB0E10, type metadata accessor for UINSToolbarItemPresentationSize);
  return v5(&v8, &type metadata for UITraitToolbarItemPresentationSize, &type metadata for UITraitToolbarItemPresentationSize, &protocol witness table for UITraitToolbarItemPresentationSize, v6, a2, a3);
}

void (*UIMutableTraits.toolbarItemPresentationSize.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1E8FB0E10, type metadata accessor for UINSToolbarItemPresentationSize);
  v8(&type metadata for UITraitToolbarItemPresentationSize, &type metadata for UITraitToolbarItemPresentationSize, &protocol witness table for UITraitToolbarItemPresentationSize, v9, a2, a3);
  return sub_1858D3954;
}

void sub_1858D3954(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E10, type metadata accessor for UINSToolbarItemPresentationSize);
  v4(v1, &type metadata for UITraitToolbarItemPresentationSize, &type metadata for UITraitToolbarItemPresentationSize, &protocol witness table for UITraitToolbarItemPresentationSize, v5, v3, v2);
  free(v1);
}

uint64_t static UITraitImageDynamicRange.defaultValue.getter()
{
  return -1;
}

void sub_1858D3A18(uint64_t a1)
{
}

uint64_t static UITraitImageDynamicRange.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0618, &qword_1E8FB0620);
}

void sub_1858D3A60(uint64_t a1)
{
}

uint64_t static UITraitImageDynamicRange.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0630, &qword_1E8FB0638);
}

id sub_1858D3AA8(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4BE8, byte_1E8FB0650);
}

uint64_t static UITraitImageDynamicRange.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0648, byte_1E8FB0650);
}

uint64_t static UITraitImageDynamicRange._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitImageDynamicRange._isPrivate.getter()
{
  return 0;
}

void sub_1858D3AF0(void *a1@<X8>)
{
  *a1 = -1;
}

uint64_t sub_1858D3AFC(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0630, &qword_1E8FB0638);
}

uint64_t sub_1858D3B24(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0618, &qword_1E8FB0620);
}

uint64_t sub_1858D3B4C(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0648, byte_1E8FB0650);
}

uint64_t UIMutableTraits.imageDynamicRange.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  id v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E18, type metadata accessor for DynamicRange);
  v4(&v7, &type metadata for UITraitImageDynamicRange, &type metadata for UITraitImageDynamicRange, &protocol witness table for UITraitImageDynamicRange, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D3C1C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.imageDynamicRange.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D3C50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.imageDynamicRange.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits.imageDynamicRange.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054(&qword_1E8FB0E18, type metadata accessor for DynamicRange);
  return v5(&v8, &type metadata for UITraitImageDynamicRange, &type metadata for UITraitImageDynamicRange, &protocol witness table for UITraitImageDynamicRange, v6, a2, a3);
}

void (*UIMutableTraits.imageDynamicRange.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1E8FB0E18, type metadata accessor for DynamicRange);
  v8(&type metadata for UITraitImageDynamicRange, &type metadata for UITraitImageDynamicRange, &protocol witness table for UITraitImageDynamicRange, v9, a2, a3);
  return sub_1858D3E0C;
}

void sub_1858D3E0C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E18, type metadata accessor for DynamicRange);
  v4(v1, &type metadata for UITraitImageDynamicRange, &type metadata for UITraitImageDynamicRange, &protocol witness table for UITraitImageDynamicRange, v5, v3, v2);
  free(v1);
}

uint64_t static UITraitSceneCaptureState.defaultValue.getter()
{
  return -1;
}

void sub_1858D3ED0(uint64_t a1)
{
}

uint64_t static UITraitSceneCaptureState.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0658, &qword_1E8FB0660);
}

void sub_1858D3F18(uint64_t a1)
{
}

uint64_t static UITraitSceneCaptureState.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0670, &qword_1E8FB0678);
}

id sub_1858D3F60(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C28, byte_1E8FB0690);
}

uint64_t static UITraitSceneCaptureState.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0688, byte_1E8FB0690);
}

uint64_t static UITraitSceneCaptureState._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitSceneCaptureState._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D3FA8(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0670, &qword_1E8FB0678);
}

uint64_t sub_1858D3FD0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0658, &qword_1E8FB0660);
}

uint64_t sub_1858D3FF8(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0688, byte_1E8FB0690);
}

uint64_t UIMutableTraits.sceneCaptureState.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  id v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054((unint64_t *)&unk_1E8FB0E20, type metadata accessor for UISceneCaptureState);
  v4(&v7, &type metadata for UITraitSceneCaptureState, &type metadata for UITraitSceneCaptureState, &protocol witness table for UITraitSceneCaptureState, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D40C8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.sceneCaptureState.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D40FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.sceneCaptureState.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits.sceneCaptureState.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054((unint64_t *)&unk_1E8FB0E20, type metadata accessor for UISceneCaptureState);
  return v5(&v8, &type metadata for UITraitSceneCaptureState, &type metadata for UITraitSceneCaptureState, &protocol witness table for UITraitSceneCaptureState, v6, a2, a3);
}

void (*UIMutableTraits.sceneCaptureState.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054((unint64_t *)&unk_1E8FB0E20, type metadata accessor for UISceneCaptureState);
  v8(&type metadata for UITraitSceneCaptureState, &type metadata for UITraitSceneCaptureState, &protocol witness table for UITraitSceneCaptureState, v9, a2, a3);
  return sub_1858D42B8;
}

void sub_1858D42B8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  id v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054((unint64_t *)&unk_1E8FB0E20, type metadata accessor for UISceneCaptureState);
  v4(v1, &type metadata for UITraitSceneCaptureState, &type metadata for UITraitSceneCaptureState, &protocol witness table for UITraitSceneCaptureState, v5, v3, v2);
  free(v1);
}

uint64_t static UITraitTypesettingLanguage.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EB256688 != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EB256670);
  return sub_1853B7020(v3, a1, (uint64_t *)&unk_1EB256638);
}

uint64_t static UITraitTypesettingLanguage.name.getter()
{
  return sub_1858D790C(&qword_1EB2566A8, &qword_1EB256690);
}

uint64_t static UITraitTypesettingLanguage.identifier.getter()
{
  return sub_1858D790C(&qword_1EB256660, &qword_1EB256648);
}

uint64_t static UITraitTypesettingLanguage._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitTypesettingLanguage._isPrivate.getter()
{
  return 0;
}

uint64_t sub_1858D444C@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EB256688 != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EB256670);
  return sub_1853B7020(v3, a1, (uint64_t *)&unk_1EB256638);
}

uint64_t sub_1858D44C4(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB256660, &qword_1EB256648);
}

uint64_t sub_1858D44EC(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1EB2566A8, &qword_1EB256690);
}

id UITraitCollection.init(typesettingLanguage:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638);
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1853B7020(a1, (uint64_t)v4, (uint64_t *)&unk_1EB256638);
  id v5 = sub_1858C7A88((uint64_t)&type metadata for UITraitTypesettingLanguage, (uint64_t)v4);
  sub_1853B93B8(a1, (uint64_t *)&unk_1EB256638);
  return v5;
}

uint64_t static UITraitTypesettingLanguage._value(from:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (a1)
  {
    swift_bridgeObjectRetain();
    sub_186A1D73C();
    uint64_t v3 = sub_186A1D75C();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, 0, 1, v3);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638);
    id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a2;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638);
    id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v6 = v9;
    uint64_t v7 = a2;
    uint64_t v8 = 1;
  }
  return v5(v7, v8, 1, v6);
}

uint64_t sub_1858D46D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRetain();
    sub_186A1D73C();
    uint64_t v3 = sub_186A1D75C();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, 0, 1, v3);
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638);
    id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a2;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638);
    id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v6 = v9;
    uint64_t v7 = a2;
    uint64_t v8 = 1;
  }
  return v5(v7, v8, 1, v6);
}

uint64_t UIMutableTraits.typesettingLanguage.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a2 + 200))(&type metadata for UITraitTypesettingLanguage, &type metadata for UITraitTypesettingLanguage, &protocol witness table for UITraitTypesettingLanguage, a1, a2);
}

uint64_t sub_1858D481C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UIMutableTraits.typesettingLanguage.getter(*(void *)(a3 + a2 - 16), *(void *)(a3 + a2 - 8));
}

uint64_t sub_1858D4848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 16);
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1853B7020(a1, (uint64_t)v9, (uint64_t *)&unk_1EB256638);
  return UIMutableTraits.typesettingLanguage.setter((uint64_t)v9, v5, v6);
}

void (*UIMutableTraits.typesettingLanguage.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  void v7[2] = v3;
  *uint64_t v7 = a2;
  size_t v8 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EB256638) - 8) + 64);
  void v7[3] = malloc(v8);
  void v7[4] = malloc(v8);
  (*(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a3 + 200))(&type metadata for UITraitTypesettingLanguage, &type metadata for UITraitTypesettingLanguage, &protocol witness table for UITraitTypesettingLanguage, a2, a3);
  return sub_1858D49D0;
}

void sub_1858D49D0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[3];
  uint64_t v4 = (void *)(*a1)[4];
  uint64_t v5 = (*a1)[1];
  uint64_t v6 = **a1;
  if (a2)
  {
    sub_1853B7020((*a1)[4], (uint64_t)v3, (uint64_t *)&unk_1EB256638);
    UIMutableTraits.typesettingLanguage.setter((uint64_t)v3, v6, v5);
    sub_1853B93B8((uint64_t)v4, (uint64_t *)&unk_1EB256638);
  }
  else
  {
    UIMutableTraits.typesettingLanguage.setter((*a1)[4], v6, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

id sub_1858D4A84(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_touchLevel, &qword_1E8FB06A0);
}

uint64_t static UITraitTouchLevel.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB0698, (uint64_t)&qword_1E8FB06A0);
}

void sub_1858D4ABC(uint64_t a1)
{
}

uint64_t static UITraitTouchLevel.name.getter()
{
  return sub_1858D790C(&qword_1E8FB06A8, &qword_1E8FB06B0);
}

void sub_1858D4B04(uint64_t a1)
{
}

uint64_t static UITraitTouchLevel.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB06C0, &qword_1E8FB06C8);
}

id sub_1858D4B4C(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C50, byte_1E8FB06E0);
}

uint64_t static UITraitTouchLevel.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB06D8, byte_1E8FB06E0);
}

uint64_t static UITraitTouchLevel._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitTouchLevel._isPrivate.getter()
{
  return 1;
}

uint64_t sub_1858D4B94@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0698, &qword_1E8FB06A0, a1);
}

uint64_t sub_1858D4BB8(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB06C0, &qword_1E8FB06C8);
}

uint64_t sub_1858D4BE0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB06A8, &qword_1E8FB06B0);
}

uint64_t sub_1858D4C08(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB06D8, byte_1E8FB06E0);
}

uint64_t UIMutableTraits.touchLevel.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E30, type metadata accessor for UIScreenTouchLevel);
  v4(&v7, &type metadata for UITraitTouchLevel, &type metadata for UITraitTouchLevel, &protocol witness table for UITraitTouchLevel, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D4CD8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.touchLevel.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D4D0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.touchLevel.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits.touchLevel.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054(&qword_1E8FB0E30, type metadata accessor for UIScreenTouchLevel);
  return v5(&v8, &type metadata for UITraitTouchLevel, &type metadata for UITraitTouchLevel, &protocol witness table for UITraitTouchLevel, v6, a2, a3);
}

void (*UIMutableTraits.touchLevel.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1E8FB0E30, type metadata accessor for UIScreenTouchLevel);
  v8(&type metadata for UITraitTouchLevel, &type metadata for UITraitTouchLevel, &protocol witness table for UITraitTouchLevel, v9, a2, a3);
  return sub_1858D4EC8;
}

void sub_1858D4EC8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  uint64_t v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E30, type metadata accessor for UIScreenTouchLevel);
  v4(v1, &type metadata for UITraitTouchLevel, &type metadata for UITraitTouchLevel, &protocol witness table for UITraitTouchLevel, v5, v3, v2);
  free(v1);
}

id sub_1858D4F84(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef_artworkSubtype, &qword_1E8FB06F0);
}

uint64_t static UITraitArtworkSubtype.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB06E8, (uint64_t)&qword_1E8FB06F0);
}

void sub_1858D4FBC(uint64_t a1)
{
}

uint64_t static UITraitArtworkSubtype.name.getter()
{
  return sub_1858D790C(&qword_1E8FB06F8, &qword_1E8FB0700);
}

void sub_1858D5004(uint64_t a1)
{
}

uint64_t static UITraitArtworkSubtype.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0710, &qword_1E8FB0718);
}

id sub_1858D504C(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4B98, byte_1E8FB0730);
}

uint64_t static UITraitArtworkSubtype.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0728, byte_1E8FB0730);
}

uint64_t static UITraitArtworkSubtype._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitArtworkSubtype._isPrivate.getter()
{
  return 1;
}

uint64_t sub_1858D5094@<X0>(void *a1@<X8>)
{
  if (qword_1E8FB06E8 != -1) {
    uint64_t result = swift_once();
  }
  *a1 = qword_1E8FB06F0;
  return result;
}

uint64_t sub_1858D50F0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0710, &qword_1E8FB0718);
}

uint64_t sub_1858D5118(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB06F8, &qword_1E8FB0700);
}

uint64_t sub_1858D5140(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0728, byte_1E8FB0730);
}

uint64_t UIMutableTraits.artworkSubtype.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a2 + 128))(&type metadata for UITraitArtworkSubtype, &type metadata for UITraitArtworkSubtype, &protocol witness table for UITraitArtworkSubtype, a1, a2);
}

uint64_t sub_1858D5194@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits.artworkSubtype.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D51C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.artworkSubtype.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits.artworkSubtype.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a3 + 136))(a1, &type metadata for UITraitArtworkSubtype, &type metadata for UITraitArtworkSubtype, &protocol witness table for UITraitArtworkSubtype, a2, a3);
}

uint64_t (*UIMutableTraits.artworkSubtype.modify(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = (*(uint64_t (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a3 + 128))(&type metadata for UITraitArtworkSubtype, &type metadata for UITraitArtworkSubtype, &protocol witness table for UITraitArtworkSubtype, a2, a3);
  return sub_1858D52A0;
}

uint64_t sub_1858D52A0(void *a1)
{
  return (*(uint64_t (**)(void, ValueMetadata *, ValueMetadata *, _UNKNOWN **, void))(a1[2] + 136))(*a1, &type metadata for UITraitArtworkSubtype, &type metadata for UITraitArtworkSubtype, &protocol witness table for UITraitArtworkSubtype, a1[1]);
}

id sub_1858D52EC(uint64_t a1)
{
  return sub_1858D5300(a1, (SEL *)&selRef_displayCornerRadius, &qword_1E8FB0740);
}

id sub_1858D5300(uint64_t a1, SEL *a2, void *a3)
{
  if (qword_1E8FB01A8 != -1) {
    swift_once();
  }
  id result = [(id)qword_1E8FB01B0 *a2];
  *a3 = v6;
  return result;
}

double static UITraitDisplayCornerRadius.defaultValue.getter()
{
  return sub_1858D538C(&qword_1E8FB0738, (uint64_t)&qword_1E8FB0740);
}

double sub_1858D538C(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

void sub_1858D53C8(uint64_t a1)
{
}

uint64_t static UITraitDisplayCornerRadius.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0748, &qword_1E8FB0750);
}

void sub_1858D5410(uint64_t a1)
{
}

uint64_t static UITraitDisplayCornerRadius.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0760, &qword_1E8FB0768);
}

id sub_1858D5458(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4BB8, byte_1E8FB0780);
}

uint64_t static UITraitDisplayCornerRadius.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0778, byte_1E8FB0780);
}

uint64_t static UITraitDisplayCornerRadius._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitDisplayCornerRadius._isPrivate.getter()
{
  return 1;
}

double sub_1858D54A0@<D0>(void *a1@<X8>)
{
  return sub_1858D54C4(&qword_1E8FB0738, (double *)&qword_1E8FB0740, a1);
}

double sub_1858D54C4@<D0>(void *a1@<X2>, double *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  double result = *a2;
  *a3 = *(void *)a2;
  return result;
}

uint64_t sub_1858D550C(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0760, &qword_1E8FB0768);
}

uint64_t sub_1858D5534(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0748, &qword_1E8FB0750);
}

uint64_t sub_1858D555C(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0778, byte_1E8FB0780);
}

uint64_t UIMutableTraits.displayCornerRadius.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a2 + 32))(&type metadata for UITraitDisplayCornerRadius, &type metadata for UITraitDisplayCornerRadius, &protocol witness table for UITraitDisplayCornerRadius, a1, a2);
}

uint64_t sub_1858D55B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t result = UIMutableTraits.displayCornerRadius.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = v5;
  return result;
}

uint64_t sub_1858D55E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits.displayCornerRadius.setter(*(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits.displayCornerRadius.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a2 + 40))(&type metadata for UITraitDisplayCornerRadius, &type metadata for UITraitDisplayCornerRadius, &protocol witness table for UITraitDisplayCornerRadius, a1, a2);
}

uint64_t (*UIMutableTraits.displayCornerRadius.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = a2;
  *(double *)a1 = (*(double (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a3 + 32))(&type metadata for UITraitDisplayCornerRadius, &type metadata for UITraitDisplayCornerRadius, &protocol witness table for UITraitDisplayCornerRadius, a2, a3);
  return sub_1858D56C0;
}

uint64_t sub_1858D56C0(uint64_t a1, uint64_t a2)
{
  return sub_1858D56D4(a1, a2, (uint64_t)&type metadata for UITraitDisplayCornerRadius, (uint64_t)&protocol witness table for UITraitDisplayCornerRadius);
}

uint64_t sub_1858D56D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, double))(*(void *)(a1 + 16) + 40))(a3, a3, a4, *(void *)(a1 + 8), *(double *)a1);
}

uint64_t sub_1858D5720(uint64_t a1)
{
  return sub_1858D714C(a1, (uint64_t (*)(uint64_t))-[UITraitCollection _semanticContext], &qword_1E8FD58D0);
}

void sub_1858D5740(uint64_t a1)
{
}

void sub_1858D5760(uint64_t a1)
{
}

id sub_1858D5780(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C38, byte_1E8FD58F8);
}

uint64_t sub_1858D5794@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0788, &qword_1E8FD58D0, a1);
}

uint64_t sub_1858D57B8(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0798, &qword_1E8FD58E8);
}

uint64_t sub_1858D57E0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0790, &qword_1E8FD58D8);
}

uint64_t sub_1858D5808(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB07A0, byte_1E8FD58F8);
}

id sub_1858D582C(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef__presentationSemanticContext, &qword_1E8FB07B0);
}

uint64_t static UITraitPresentationSemanticContext.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB07A8, (uint64_t)&qword_1E8FB07B0);
}

void sub_1858D5864(uint64_t a1)
{
}

uint64_t static UITraitPresentationSemanticContext.name.getter()
{
  return sub_1858D790C(&qword_1E8FB07B8, &qword_1E8FB07C0);
}

void sub_1858D58AC(uint64_t a1)
{
}

uint64_t static UITraitPresentationSemanticContext.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB07D0, &qword_1E8FB07D8);
}

id sub_1858D58F4(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C18, byte_1E8FB07F0);
}

uint64_t static UITraitPresentationSemanticContext.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB07E8, byte_1E8FB07F0);
}

uint64_t static UITraitPresentationSemanticContext._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitPresentationSemanticContext._isPrivate.getter()
{
  return 1;
}

uint64_t sub_1858D593C@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB07A8, &qword_1E8FB07B0, a1);
}

uint64_t sub_1858D5960(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB07D0, &qword_1E8FB07D8);
}

uint64_t sub_1858D5988(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB07B8, &qword_1E8FB07C0);
}

uint64_t sub_1858D59B0(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB07E8, byte_1E8FB07F0);
}

uint64_t UIMutableTraits._presentationSemanticContext.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E38, type metadata accessor for _UIUserInterfacePresentationSemanticContext);
  v4(&v7, &type metadata for UITraitPresentationSemanticContext, &type metadata for UITraitPresentationSemanticContext, &protocol witness table for UITraitPresentationSemanticContext, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D5A80@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits._presentationSemanticContext.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D5AB4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits._presentationSemanticContext.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits._presentationSemanticContext.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054(&qword_1E8FB0E38, type metadata accessor for _UIUserInterfacePresentationSemanticContext);
  return v5(&v8, &type metadata for UITraitPresentationSemanticContext, &type metadata for UITraitPresentationSemanticContext, &protocol witness table for UITraitPresentationSemanticContext, v6, a2, a3);
}

void (*UIMutableTraits._presentationSemanticContext.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1E8FB0E38, type metadata accessor for _UIUserInterfacePresentationSemanticContext);
  v8(&type metadata for UITraitPresentationSemanticContext, &type metadata for UITraitPresentationSemanticContext, &protocol witness table for UITraitPresentationSemanticContext, v9, a2, a3);
  return sub_1858D5C70;
}

void sub_1858D5C70(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  uint64_t v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E38, type metadata accessor for _UIUserInterfacePresentationSemanticContext);
  v4(v1, &type metadata for UITraitPresentationSemanticContext, &type metadata for UITraitPresentationSemanticContext, &protocol witness table for UITraitPresentationSemanticContext, v5, v3, v2);
  free(v1);
}

id sub_1858D5D2C(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef__splitViewControllerContext, &qword_1E8FB0800);
}

uint64_t static UITraitSplitViewControllerContext.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB07F8, (uint64_t)&qword_1E8FB0800);
}

void sub_1858D5D64(uint64_t a1)
{
}

uint64_t static UITraitSplitViewControllerContext.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0808, &qword_1E8FB0810);
}

void sub_1858D5DAC(uint64_t a1)
{
}

uint64_t static UITraitSplitViewControllerContext.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0820, &qword_1E8FB0828);
}

id sub_1858D5DF4(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C40, byte_1E8FB0840);
}

uint64_t static UITraitSplitViewControllerContext.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0838, byte_1E8FB0840);
}

uint64_t static UITraitSplitViewControllerContext._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitSplitViewControllerContext._isPrivate.getter()
{
  return 1;
}

uint64_t sub_1858D5E3C@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB07F8, &qword_1E8FB0800, a1);
}

uint64_t sub_1858D5E60(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0820, &qword_1E8FB0828);
}

uint64_t sub_1858D5E88(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0808, &qword_1E8FB0810);
}

uint64_t sub_1858D5EB0(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0838, byte_1E8FB0840);
}

uint64_t UIMutableTraits._splitViewControllerContext.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054((unint64_t *)&unk_1E8FB0E40, type metadata accessor for _UISplitViewControllerContext);
  v4(&v7, &type metadata for UITraitSplitViewControllerContext, &type metadata for UITraitSplitViewControllerContext, &protocol witness table for UITraitSplitViewControllerContext, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D5F80@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits._splitViewControllerContext.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D5FB4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits._splitViewControllerContext.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits._splitViewControllerContext.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054((unint64_t *)&unk_1E8FB0E40, type metadata accessor for _UISplitViewControllerContext);
  return v5(&v8, &type metadata for UITraitSplitViewControllerContext, &type metadata for UITraitSplitViewControllerContext, &protocol witness table for UITraitSplitViewControllerContext, v6, a2, a3);
}

void (*UIMutableTraits._splitViewControllerContext.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054((unint64_t *)&unk_1E8FB0E40, type metadata accessor for _UISplitViewControllerContext);
  v8(&type metadata for UITraitSplitViewControllerContext, &type metadata for UITraitSplitViewControllerContext, &protocol witness table for UITraitSplitViewControllerContext, v9, a2, a3);
  return sub_1858D6170;
}

void sub_1858D6170(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  uint64_t v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054((unint64_t *)&unk_1E8FB0E40, type metadata accessor for _UISplitViewControllerContext);
  v4(v1, &type metadata for UITraitSplitViewControllerContext, &type metadata for UITraitSplitViewControllerContext, &protocol witness table for UITraitSplitViewControllerContext, v5, v3, v2);
  free(v1);
}

id sub_1858D622C(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef__vibrancy, &qword_1E8FB0850);
}

uint64_t static UITraitVibrancy.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB0848, (uint64_t)&qword_1E8FB0850);
}

void sub_1858D6264(uint64_t a1)
{
}

uint64_t static UITraitVibrancy.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0858, &qword_1E8FB0860);
}

void sub_1858D62AC(uint64_t a1)
{
}

uint64_t static UITraitVibrancy.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0870, &qword_1E8FB0878);
}

id sub_1858D62F4(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C90, byte_1E8FB0890);
}

uint64_t static UITraitVibrancy.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0888, byte_1E8FB0890);
}

uint64_t static UITraitVibrancy._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitVibrancy._isPrivate.getter()
{
  return 1;
}

uint64_t sub_1858D633C@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0848, &qword_1E8FB0850, a1);
}

uint64_t sub_1858D6360(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0870, &qword_1E8FB0878);
}

uint64_t sub_1858D6388(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0858, &qword_1E8FB0860);
}

uint64_t sub_1858D63B0(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0888, byte_1E8FB0890);
}

uint64_t UIMutableTraits._vibrancy.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054((unint64_t *)&unk_1E8FAF858, type metadata accessor for _UIUserInterfaceVibrancy);
  v4(&v7, &type metadata for UITraitVibrancy, &type metadata for UITraitVibrancy, &protocol witness table for UITraitVibrancy, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D6480@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits._vibrancy.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D64B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits._vibrancy.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits._vibrancy.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054((unint64_t *)&unk_1E8FAF858, type metadata accessor for _UIUserInterfaceVibrancy);
  return v5(&v8, &type metadata for UITraitVibrancy, &type metadata for UITraitVibrancy, &protocol witness table for UITraitVibrancy, v6, a2, a3);
}

void (*UIMutableTraits._vibrancy.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054((unint64_t *)&unk_1E8FAF858, type metadata accessor for _UIUserInterfaceVibrancy);
  v8(&type metadata for UITraitVibrancy, &type metadata for UITraitVibrancy, &protocol witness table for UITraitVibrancy, v9, a2, a3);
  return sub_1858D6670;
}

void sub_1858D6670(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  uint64_t v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054((unint64_t *)&unk_1E8FAF858, type metadata accessor for _UIUserInterfaceVibrancy);
  v4(v1, &type metadata for UITraitVibrancy, &type metadata for UITraitVibrancy, &protocol witness table for UITraitVibrancy, v5, v3, v2);
  free(v1);
}

id sub_1858D672C(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef__userInterfaceRenderingMode, &qword_1E8FB08A0);
}

uint64_t static UITraitUserInterfaceRenderingMode.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB0898, (uint64_t)&qword_1E8FB08A0);
}

void sub_1858D6764(uint64_t a1)
{
}

uint64_t static UITraitUserInterfaceRenderingMode.name.getter()
{
  return sub_1858D790C(&qword_1E8FB08A8, &qword_1E8FB08B0);
}

void sub_1858D67AC(uint64_t a1)
{
}

uint64_t static UITraitUserInterfaceRenderingMode.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB08C0, &qword_1E8FB08C8);
}

id sub_1858D67F4(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C78, byte_1E8FB08E0);
}

uint64_t static UITraitUserInterfaceRenderingMode.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB08D8, byte_1E8FB08E0);
}

uint64_t static UITraitUserInterfaceRenderingMode._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitUserInterfaceRenderingMode._isPrivate.getter()
{
  return 1;
}

uint64_t sub_1858D683C@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0898, &qword_1E8FB08A0, a1);
}

uint64_t sub_1858D6860(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB08C0, &qword_1E8FB08C8);
}

uint64_t sub_1858D6888(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB08A8, &qword_1E8FB08B0);
}

uint64_t sub_1858D68B0(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB08D8, byte_1E8FB08E0);
}

uint64_t UIMutableTraits._userInterfaceRenderingMode.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E50, type metadata accessor for _UIUserInterfaceRenderingMode);
  v4(&v7, &type metadata for UITraitUserInterfaceRenderingMode, &type metadata for UITraitUserInterfaceRenderingMode, &protocol witness table for UITraitUserInterfaceRenderingMode, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D6980@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits._userInterfaceRenderingMode.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D69B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits._userInterfaceRenderingMode.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits._userInterfaceRenderingMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054(&qword_1E8FB0E50, type metadata accessor for _UIUserInterfaceRenderingMode);
  return v5(&v8, &type metadata for UITraitUserInterfaceRenderingMode, &type metadata for UITraitUserInterfaceRenderingMode, &protocol witness table for UITraitUserInterfaceRenderingMode, v6, a2, a3);
}

void (*UIMutableTraits._userInterfaceRenderingMode.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1E8FB0E50, type metadata accessor for _UIUserInterfaceRenderingMode);
  v8(&type metadata for UITraitUserInterfaceRenderingMode, &type metadata for UITraitUserInterfaceRenderingMode, &protocol witness table for UITraitUserInterfaceRenderingMode, v9, a2, a3);
  return sub_1858D6B70;
}

void sub_1858D6B70(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  uint64_t v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E50, type metadata accessor for _UIUserInterfaceRenderingMode);
  v4(v1, &type metadata for UITraitUserInterfaceRenderingMode, &type metadata for UITraitUserInterfaceRenderingMode, &protocol witness table for UITraitUserInterfaceRenderingMode, v5, v3, v2);
  free(v1);
}

id sub_1858D6C2C(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef__focusSystemState, &qword_1E8FB08F0);
}

uint64_t static UITraitFocusSystemState.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB08E8, (uint64_t)&qword_1E8FB08F0);
}

void sub_1858D6C64(uint64_t a1)
{
}

uint64_t static UITraitFocusSystemState.name.getter()
{
  return sub_1858D790C(&qword_1E8FB08F8, &qword_1E8FB0900);
}

void sub_1858D6CAC(uint64_t a1)
{
}

uint64_t static UITraitFocusSystemState.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0910, &qword_1E8FB0918);
}

id sub_1858D6CF4(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4BD0, byte_1E8FB0930);
}

uint64_t static UITraitFocusSystemState.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0928, byte_1E8FB0930);
}

uint64_t static UITraitFocusSystemState._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitFocusSystemState._isPrivate.getter()
{
  return 1;
}

uint64_t sub_1858D6D3C@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB08E8, &qword_1E8FB08F0, a1);
}

uint64_t sub_1858D6D60(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0910, &qword_1E8FB0918);
}

uint64_t sub_1858D6D88(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB08F8, &qword_1E8FB0900);
}

uint64_t sub_1858D6DB0(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0928, byte_1E8FB0930);
}

uint64_t UIMutableTraits._focusSystemState.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E58, type metadata accessor for _UITraitCollectionFocusSystemState);
  v4(&v7, &type metadata for UITraitFocusSystemState, &type metadata for UITraitFocusSystemState, &protocol witness table for UITraitFocusSystemState, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D6E80@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits._focusSystemState.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D6EB4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits._focusSystemState.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits._focusSystemState.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054(&qword_1E8FB0E58, type metadata accessor for _UITraitCollectionFocusSystemState);
  return v5(&v8, &type metadata for UITraitFocusSystemState, &type metadata for UITraitFocusSystemState, &protocol witness table for UITraitFocusSystemState, v6, a2, a3);
}

void (*UIMutableTraits._focusSystemState.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1E8FB0E58, type metadata accessor for _UITraitCollectionFocusSystemState);
  v8(&type metadata for UITraitFocusSystemState, &type metadata for UITraitFocusSystemState, &protocol witness table for UITraitFocusSystemState, v9, a2, a3);
  return sub_1858D7070;
}

void sub_1858D7070(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  uint64_t v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E58, type metadata accessor for _UITraitCollectionFocusSystemState);
  v4(v1, &type metadata for UITraitFocusSystemState, &type metadata for UITraitFocusSystemState, &protocol witness table for UITraitFocusSystemState, v5, v3, v2);
  free(v1);
}

uint64_t sub_1858D712C(uint64_t a1)
{
  return sub_1858D714C(a1, (uint64_t (*)(uint64_t))-[UITraitCollection _selectionIsKey], &qword_1E8FD5900);
}

uint64_t sub_1858D714C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3)
{
  if (qword_1E8FB01A8 != -1) {
    swift_once();
  }
  uint64_t result = a2(qword_1E8FB01B0);
  *a3 = result;
  return result;
}

void sub_1858D71B4(uint64_t a1)
{
}

void sub_1858D71D4(uint64_t a1)
{
}

id sub_1858D71F4(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4C30, byte_1E8FD5928);
}

uint64_t sub_1858D7208@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0938, &qword_1E8FD5900, a1);
}

uint64_t sub_1858D722C(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0948, &qword_1E8FD5918);
}

uint64_t sub_1858D7254(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0940, &qword_1E8FD5908);
}

uint64_t sub_1858D727C(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0950, byte_1E8FD5928);
}

id sub_1858D72A0(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef__backlightLuminance, &qword_1E8FB0960);
}

uint64_t static UITraitBacklightLuminance.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB0958, (uint64_t)&qword_1E8FB0960);
}

void sub_1858D72D8(uint64_t a1)
{
}

uint64_t static UITraitBacklightLuminance.name.getter()
{
  return sub_1858D790C(&qword_1E8FB0968, &qword_1E8FB0970);
}

void sub_1858D7320(uint64_t a1)
{
}

uint64_t static UITraitBacklightLuminance.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB0980, &qword_1E8FB0988);
}

id sub_1858D7368(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D4BA0, byte_1E8FB09A0);
}

uint64_t static UITraitBacklightLuminance.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB0998, byte_1E8FB09A0);
}

uint64_t static UITraitBacklightLuminance._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static UITraitBacklightLuminance._isPrivate.getter()
{
  return 1;
}

uint64_t sub_1858D73B0@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB0958, &qword_1E8FB0960, a1);
}

uint64_t sub_1858D73D4(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0980, &qword_1E8FB0988);
}

uint64_t sub_1858D73FC(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB0968, &qword_1E8FB0970);
}

uint64_t sub_1858D7424(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB0998, byte_1E8FB09A0);
}

uint64_t UIMutableTraits._backlightLuminance.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E60, type metadata accessor for _UIBacklightLuminance);
  v4(&v7, &type metadata for UITraitBacklightLuminance, &type metadata for UITraitBacklightLuminance, &protocol witness table for UITraitBacklightLuminance, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D74F4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits._backlightLuminance.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D7528(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits._backlightLuminance.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits._backlightLuminance.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054(&qword_1E8FB0E60, type metadata accessor for _UIBacklightLuminance);
  return v5(&v8, &type metadata for UITraitBacklightLuminance, &type metadata for UITraitBacklightLuminance, &protocol witness table for UITraitBacklightLuminance, v6, a2, a3);
}

void (*UIMutableTraits._backlightLuminance.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1E8FB0E60, type metadata accessor for _UIBacklightLuminance);
  v8(&type metadata for UITraitBacklightLuminance, &type metadata for UITraitBacklightLuminance, &protocol witness table for UITraitBacklightLuminance, v9, a2, a3);
  return sub_1858D76E4;
}

void sub_1858D76E4(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  uint64_t v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E60, type metadata accessor for _UIBacklightLuminance);
  v4(v1, &type metadata for UITraitBacklightLuminance, &type metadata for UITraitBacklightLuminance, &protocol witness table for UITraitBacklightLuminance, v5, v3, v2);
  free(v1);
}

id sub_1858D77A0(uint64_t a1)
{
  return sub_1858D77B4(a1, (SEL *)&selRef__interfaceProtectionState, &qword_1E8FB09B0);
}

id sub_1858D77B4(uint64_t a1, SEL *a2, void *a3)
{
  if (qword_1E8FB01A8 != -1) {
    swift_once();
  }
  id result = [(id)qword_1E8FB01B0 *a2];
  *a3 = result;
  return result;
}

uint64_t static _UITraitInterfaceProtectionState.defaultValue.getter()
{
  return sub_1858D7840(&qword_1E8FB09A8, (uint64_t)&qword_1E8FB09B0);
}

uint64_t sub_1858D7840(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(void *)a2;
}

void sub_1858D787C(uint64_t a1)
{
}

uint64_t static _UITraitInterfaceProtectionState.name.getter()
{
  return sub_1858D790C(&qword_1E8FB09B8, &qword_1E8FB09C0);
}

void sub_1858D78C4(uint64_t a1)
{
}

uint64_t static _UITraitInterfaceProtectionState.identifier.getter()
{
  return sub_1858D790C(&qword_1E8FB09D0, &qword_1E8FB09D8);
}

uint64_t sub_1858D790C(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

id sub_1858D7960(uint64_t a1)
{
  return sub_1858D7974(a1, (uint64_t)off_1E52D6340, byte_1E8FB09F0);
}

id sub_1858D7974(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  id result = objc_msgSend(self, sel_affectsColorAppearance);
  *a3 = (_BYTE)result;
  return result;
}

uint64_t static _UITraitInterfaceProtectionState.affectsColorAppearance.getter()
{
  return sub_1858D79D0(&qword_1E8FB09E8, byte_1E8FB09F0);
}

uint64_t sub_1858D79D0(void *a1, unsigned __int8 *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *a2;
}

uint64_t static _UITraitInterfaceProtectionState._defaultValueRepresentsUnspecified.getter()
{
  return 1;
}

uint64_t static _UITraitInterfaceProtectionState._isPrivate.getter()
{
  return 1;
}

uint64_t sub_1858D7A1C@<X0>(void *a1@<X8>)
{
  return sub_1858D7A40(&qword_1E8FB09A8, &qword_1E8FB09B0, a1);
}

uint64_t sub_1858D7A40@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    uint64_t result = swift_once();
  }
  *a3 = *a2;
  return result;
}

uint64_t sub_1858D7A88(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB09D0, &qword_1E8FB09D8);
}

uint64_t sub_1858D7AB0(uint64_t a1, uint64_t a2)
{
  return sub_185407FB0(a1, a2, &qword_1E8FB09B8, &qword_1E8FB09C0);
}

uint64_t sub_1858D7AD8(uint64_t a1, uint64_t a2)
{
  return sub_1858D7AFC(a1, a2, &qword_1E8FB09E8, byte_1E8FB09F0);
}

uint64_t sub_1858D7AFC(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  return *a4;
}

uint64_t UIMutableTraits._interfaceProtectionState.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a2 + 368);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E68, type metadata accessor for _UIInterfaceProtectionState);
  v4(&v7, &type metadata for _UITraitInterfaceProtectionState, &type metadata for _UITraitInterfaceProtectionState, &protocol witness table for _UITraitInterfaceProtectionState, v5, a1, a2);
  return v7;
}

uint64_t sub_1858D7BE8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = UIMutableTraits._interfaceProtectionState.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1858D7C1C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UIMutableTraits._interfaceProtectionState.setter(*a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t UIMutableTraits._interfaceProtectionState.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 376);
  uint64_t v6 = sub_1854A7054(&qword_1E8FB0E68, type metadata accessor for _UIInterfaceProtectionState);
  return v5(&v8, &type metadata for _UITraitInterfaceProtectionState, &type metadata for _UITraitInterfaceProtectionState, &protocol witness table for _UITraitInterfaceProtectionState, v6, a2, a3);
}

void (*UIMutableTraits._interfaceProtectionState.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  void v7[3] = a3;
  void v7[4] = v3;
  void v7[2] = a2;
  uint64_t v8 = *(void (**)(ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(a3 + 368);
  uint64_t v9 = sub_1854A7054(&qword_1E8FB0E68, type metadata accessor for _UIInterfaceProtectionState);
  v8(&type metadata for _UITraitInterfaceProtectionState, &type metadata for _UITraitInterfaceProtectionState, &protocol witness table for _UITraitInterfaceProtectionState, v9, a2, a3);
  return sub_1858D7DD8;
}

void sub_1858D7DD8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  **(void **)a1 = *(void *)(*(void *)a1 + 8);
  uint64_t v4 = *(void (**)(void *, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v2 + 376);
  uint64_t v5 = sub_1854A7054(&qword_1E8FB0E68, type metadata accessor for _UIInterfaceProtectionState);
  v4(v1, &type metadata for _UITraitInterfaceProtectionState, &type metadata for _UITraitInterfaceProtectionState, &protocol witness table for _UITraitInterfaceProtectionState, v5, v3, v2);
  free(v1);
}

uint64_t sub_1858D7E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *sub_1858D7EB0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1858D7EC4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_1858D7ED8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x478], 8) = v3 == 0;
  return result;
}

uint64_t *sub_1858D7F04@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x478], 8) = v5 == 0;
  return result;
}

void *sub_1858D7F28(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1858D7F3C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1858D7F50(void *a1)
{
  return (*v1 & *a1) == 0;
}

void *sub_1858D7F64(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_1858D7F7C(uint64_t a1, uint64_t a2)
{
  return sub_185500248(a1, a2, MEMORY[0x1E4FBB198]);
}

void *sub_1858D7F9C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *sub_1858D7FA8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1858D7FBC(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1858D7FEC(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1858D8000(void *result)
{
  *v1 &= *result;
  return result;
}

BOOL sub_1858D8014(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1858D8028(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1858D803C()
{
  return *v0 == 0;
}

uint64_t sub_1858D804C()
{
  swift_getWitnessTable();
  return sub_186A1D8BC();
}

uint64_t sub_1858D80BC()
{
  return MEMORY[0x1F40E63F0](*v0);
}

uint64_t sub_1858D80C4(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x18C101B50](a1, &v6);
  char v4 = v7;
  int v5 = v6;
  if (v7) {
    int v5 = 0;
  }
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v4;
  return result;
}

uint64_t sub_1858D8118(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  char v8 = 1;
  char v3 = MEMORY[0x18C101B60](a1, &v7);
  char v4 = v8;
  int v5 = v7;
  if (v8) {
    int v5 = 0;
  }
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v4;
  return v3 & 1;
}

void sub_1858D8170(float *a1@<X8>)
{
  *a1 = MEMORY[0x18C101B70]();
}

uint64_t sub_1858D8198@<X0>(uint64_t *a1@<X8>)
{
  sub_186A1E95C();
  uint64_t v2 = sub_186A1E92C();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_1858D81DC(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1858D81E4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1858D81F8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1858D820C(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1858D823C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1858D8268@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1858D828C(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_1858D82A0(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_1858D82B4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1858D82C8(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1858D82DC()
{
  return *v0 == 0;
}

_DWORD *sub_1858D82EC(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

double sub_1858D8300@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

BOOL sub_1858D830C(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1858D8320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1858D843C(a1, a2, a3, a4, MEMORY[0x1E4F27E48]);
}

void sub_1858D8338(double *a1@<X8>)
{
  *a1 = MEMORY[0x18C1006E0]();
}

BOOL sub_1858D8360(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1858D8374(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x18C1006C0](a1, &v6);
  char v4 = v7;
  uint64_t v5 = v6;
  if (v7) {
    uint64_t v5 = 0;
  }
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x478], 8) = v4;
  return result;
}

uint64_t sub_1858D83C8()
{
  return MEMORY[0x1F40E6ED8](*v0);
}

uint64_t sub_1858D83D0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x18C1028F0](a1, &v6);
  uint64_t v4 = v6;
  char v5 = v7;
  if (v7) {
    uint64_t v4 = 0;
  }
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x478], 8) = v5;
  return result;
}

uint64_t sub_1858D8424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1858D843C(a1, a2, a3, a4, MEMORY[0x1E4F28180]);
}

uint64_t sub_1858D843C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *))
{
  uint64_t v10 = 0;
  char v11 = 1;
  char v6 = a5(a1, &v10);
  uint64_t v7 = v10;
  char v8 = v11;
  if (v11) {
    uint64_t v7 = 0;
  }
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x478], 8) = v8;
  return v6 & 1;
}

uint64_t sub_1858D8498@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_186A1FACC();
  *a1 = result;
  return result;
}

uint64_t sub_1858D84C0()
{
  return sub_186A1FA4C();
}

uint64_t sub_1858D8508()
{
  return sub_186A1FA1C();
}

uint64_t sub_1858D8534()
{
  return sub_186A1FA4C();
}

void sub_1858D8578(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *sub_1858D8584@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1858D8598(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

BOOL sub_1858D85AC(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1858D85C0(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t sub_1858D85D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_185AEFABC(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1858D8614@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_185AEFAC0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

_DWORD *sub_1858D8654@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL sub_1858D8660(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1858D8674()
{
  sub_1854A7054(&qword_1E8FB1568, type metadata accessor for UIContentSizeCategory);
  sub_1854A7054(&qword_1E8FB1570, type metadata accessor for UIContentSizeCategory);
  return sub_186A1F72C();
}

uint64_t sub_1858D8730()
{
  sub_1854A7054(&qword_1E8FB18D8, type metadata accessor for CALayerCornerCurve);
  sub_1854A7054(&qword_1E8FB18E0, type metadata accessor for CALayerCornerCurve);
  return sub_186A1F72C();
}

uint64_t sub_1858D87EC()
{
  sub_1854A7054(&qword_1E8FB18E8, type metadata accessor for Name);
  sub_1854A7054(&qword_1E8FB18F0, type metadata accessor for Name);
  return sub_186A1F72C();
}

uint64_t sub_1858D88A8()
{
  sub_1854A7054((unint64_t *)&qword_1E8FAFBD0, type metadata accessor for Key);
  sub_1854A7054(&qword_1E8FB1560, type metadata accessor for Key);
  return sub_186A1F72C();
}

uint64_t sub_1858D8964()
{
  sub_1854A7054(&qword_1E8FB18C8, type metadata accessor for CIImageOption);
  sub_1854A7054(&qword_1E8FB18D0, type metadata accessor for CIImageOption);
  return sub_186A1F72C();
}

uint64_t sub_1858D8A20()
{
  sub_1854A7054(&qword_1E8FB18B8, type metadata accessor for CIContextOption);
  sub_1854A7054(&qword_1E8FB18C0, type metadata accessor for CIContextOption);
  return sub_186A1F72C();
}

uint64_t sub_1858D8ADC()
{
  sub_1854A7054(&qword_1E8FB1548, type metadata accessor for URLThumbnailDictionaryItem);
  sub_1854A7054((unint64_t *)&unk_1E8FB1550, type metadata accessor for URLThumbnailDictionaryItem);
  return sub_186A1F72C();
}

uint64_t sub_1858D8B98()
{
  sub_1854A7054((unint64_t *)&qword_1E8FB8800, type metadata accessor for ComponentKey);
  sub_1854A7054(&qword_1E8FB1500, type metadata accessor for ComponentKey);
  return sub_186A1F72C();
}

uint64_t sub_1858D8C54()
{
  sub_1854A7054(&qword_1E8FB1538, type metadata accessor for DetectionPattern);
  sub_1854A7054(&qword_1E8FB1540, type metadata accessor for DetectionPattern);
  return sub_186A1F72C();
}

uint64_t sub_1858D8D10()
{
  sub_1854A7054(&qword_1E8FB1528, type metadata accessor for TextAlignment);
  sub_1854A7054(&qword_1E8FB1530, type metadata accessor for TextAlignment);
  return sub_186A1F72C();
}

uint64_t sub_1858D8DCC()
{
  sub_1854A7054(&qword_1E8FB1518, type metadata accessor for TextList);
  sub_1854A7054(&qword_1E8FB1520, type metadata accessor for TextList);
  return sub_186A1F72C();
}

uint64_t sub_1858D8E88()
{
  sub_1854A7054(&qword_1E8FB1508, type metadata accessor for Highlight);
  sub_1854A7054(&qword_1E8FB1510, type metadata accessor for Highlight);
  return sub_186A1F72C();
}

uint64_t sub_1858D8F44()
{
  sub_1854A7054(&qword_1E8FB1888, type metadata accessor for MarkerFormat);
  sub_1854A7054(&qword_1E8FB1890, type metadata accessor for MarkerFormat);
  return sub_186A1F72C();
}

uint64_t sub_1858D9000()
{
  return sub_186A1D8DC();
}

uint64_t sub_1858D904C()
{
  return sub_186A1D8CC();
}

uint64_t sub_1858D90A4()
{
  return sub_186A1FA4C();
}

uint64_t sub_1858D910C()
{
  sub_1854A7054((unint64_t *)&qword_1E8FAF2D0, type metadata accessor for UIConfigurationStateCustomKey);
  sub_1854A7054(&qword_1E8FB1488, type metadata accessor for UIConfigurationStateCustomKey);
  return sub_186A1F72C();
}

uint64_t sub_1858D91C8()
{
  sub_1854A7054(&qword_1E8FB18A8, type metadata accessor for AttributeName);
  sub_1854A7054(&qword_1E8FB18B0, type metadata accessor for AttributeName);
  return sub_186A1F72C();
}

uint64_t sub_1858D9284()
{
  sub_1854A7054(&qword_1E8FB1898, type metadata accessor for TraitKey);
  sub_1854A7054(&qword_1E8FB18A0, type metadata accessor for TraitKey);
  return sub_186A1F72C();
}

uint64_t sub_1858D9340()
{
  return sub_186A1F72C();
}

uint64_t sub_1858D9408()
{
  return sub_186A1F72C();
}

uint64_t sub_1858D94C4()
{
  sub_1854A7054(&qword_1E8FB14E8, type metadata accessor for TextEffectStyle);
  sub_1854A7054((unint64_t *)&unk_1E8FB14F0, type metadata accessor for TextEffectStyle);
  return sub_186A1F72C();
}

uint64_t sub_1858D9580()
{
  return sub_186A1F72C();
}

uint64_t sub_1858D9648()
{
  return sub_186A1F72C();
}

uint64_t sub_1858D9710()
{
  return sub_186A1F72C();
}

uint64_t sub_1858D97CC()
{
  sub_186A1E95C();
  sub_186A1E9BC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1858D9820()
{
  return MEMORY[0x1F41840D0](*v0);
}

uint64_t sub_1858D9828()
{
  return sub_186A1FA1C();
}

void sub_1858D985C()
{
}

uint64_t sub_1858D9870()
{
  return MEMORY[0x1F4184070](*v0);
}

uint64_t sub_1858D9878()
{
  return sub_186A1FA2C();
}

uint64_t sub_1858D98AC()
{
  return sub_186A1F9DC();
}

uint64_t sub_1858D98BC()
{
  return MEMORY[0x1F4185F88](*v0);
}

uint64_t sub_1858D98C4()
{
  return sub_186A1FA2C();
}

uint64_t sub_1858D98F0()
{
  return sub_186A1F9DC();
}

uint64_t sub_1858D98F8()
{
  return v0;
}

uint64_t sub_1858D9900()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1858D9910()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1858D9920()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1858D9930()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1858D9940()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1858D9978()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1858D9988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v13[3] = AssociatedTypeWitness;
  __swift_allocate_boxed_opaque_existential_0(v13);
  (*(void (**)(void))(*(void *)(AssociatedTypeWitness - 8) + 16))();
  sub_1853B76BC((uint64_t)v13, (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v12, (uint64_t)v11, &qword_1EB256B10);
  uint64_t v8 = v11[3];
  sub_1853B93B8((uint64_t)v11, &qword_1EB256B10);
  if (v8) {
    uint64_t v9 = sub_186A1F83C();
  }
  else {
    uint64_t v9 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v13);
  objc_msgSend(*v4, sel__setObject_forTraitToken_, v9, sub_18557344C(a3, a4, (uint64_t)&unk_1ED0D8558, (uint64_t (*)(uint64_t))sub_1858BB620));
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1858D9B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v8, a1, a3, a4);
  objc_msgSend(*v4, sel__setCGFloatValue_forTraitToken_, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D83A0, (uint64_t (*)(uint64_t))sub_1858B6678), v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_1858D9BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v8, a1, a3, a4);
  objc_msgSend(*v4, sel__setCGFloatValue_forTraitToken_, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D8378, (uint64_t (*)(uint64_t))sub_1858B6678), v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_1858D9C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v8, a1, a3, a4);
  objc_msgSend(*v4, sel__setNSIntegerValue_forTraitToken_, v8, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D8350, (uint64_t (*)(uint64_t))sub_1858DC750));
  return swift_unknownObjectRelease();
}

uint64_t sub_1858D9D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  objc_msgSend(*v5, sel__setCGFloatValue_forTraitToken_, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D82B0, (uint64_t (*)(uint64_t))sub_1858DC6CC), v10);
  return swift_unknownObjectRelease();
}

uint64_t sub_1858D9E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  objc_msgSend(*v5, sel__setCGFloatValue_forTraitToken_, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D8288, (uint64_t (*)(uint64_t))sub_1858DC6CC), v10);
  return swift_unknownObjectRelease();
}

uint64_t sub_1858D9EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 24);
  v14[3] = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_0(v14);
  v7(a1, a3, a4);
  sub_1853B76BC((uint64_t)v14, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v13, (uint64_t)v12, &qword_1EB256B10);
  uint64_t v8 = v12[3];
  sub_1853B93B8((uint64_t)v12, &qword_1EB256B10);
  if (v8) {
    uint64_t v9 = sub_186A1F83C();
  }
  else {
    uint64_t v9 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v14);
  double v10 = (void *)sub_1855741B8();
  swift_unknownObjectRetain();
  objc_msgSend(v10, sel__setObject_forTraitToken_, v9, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D83C8, (uint64_t (*)(uint64_t))sub_1858DC78C));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1858DA088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v9, a1, a3, a4);
  double v6 = v9;
  uint64_t v7 = (void *)sub_1855741B8();
  swift_unknownObjectRetain();
  objc_msgSend(v7, sel__setCGFloatValue_forTraitToken_, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D8378, (uint64_t (*)(uint64_t))sub_1858B6678), v6);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1858DA164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v9, a1, a3, a4);
  uint64_t v6 = v9;
  uint64_t v7 = (void *)sub_1855741B8();
  swift_unknownObjectRetain();
  objc_msgSend(v7, sel__setNSIntegerValue_forTraitToken_, v6, sub_1854A0320(a3, a4, (uint64_t)&unk_1ED0D8350, (uint64_t (*)(uint64_t))sub_1858DC750));
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1858DA238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  v14[3] = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_0(v14);
  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  sub_1853B76BC((uint64_t)v14, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB256B10);
  swift_dynamicCast();
  sub_1853B8150((uint64_t)v13, (uint64_t)v12, &qword_1EB256B10);
  uint64_t v8 = v12[3];
  sub_1853B93B8((uint64_t)v12, &qword_1EB256B10);
  if (v8) {
    uint64_t v9 = sub_186A1F83C();
  }
  else {
    uint64_t v9 = 0;
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v14);
  double v10 = (void *)sub_1855741B8();
  swift_unknownObjectRetain();
  objc_msgSend(v10, sel__setObject_forTraitToken_, v9, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D82D8, (uint64_t (*)(uint64_t))sub_1858DC6F8));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1858DA404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  uint64_t v8 = (void *)sub_1855741B8();
  swift_unknownObjectRetain();
  objc_msgSend(v8, sel__setCGFloatValue_forTraitToken_, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D82B0, (uint64_t (*)(uint64_t))sub_1858DC6CC), v10);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1858DA4F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  sub_186A1EAEC();
  uint64_t v8 = (void *)sub_1855741B8();
  swift_unknownObjectRetain();
  objc_msgSend(v8, sel__setCGFloatValue_forTraitToken_, sub_1854AF3F4(a3, a4, a5, (uint64_t)&unk_1ED0D8288, (uint64_t (*)(uint64_t))sub_1858DC6CC), v10);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

unint64_t sub_1858DA5DC()
{
  unint64_t result = qword_1E8FB0DE0;
  if (!qword_1E8FB0DE0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1E8FB7C80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FB0DE0);
  }
  return result;
}

uint64_t sub_1858DA638()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

void type metadata accessor for UIUserInterfaceIdiom(uint64_t a1)
{
}

void type metadata accessor for UIForceTouchCapability(uint64_t a1)
{
}

void type metadata accessor for UILegibilityWeight(uint64_t a1)
{
}

void type metadata accessor for UINSToolbarItemPresentationSize(uint64_t a1)
{
}

void type metadata accessor for DynamicRange(uint64_t a1)
{
}

void type metadata accessor for UISceneCaptureState(uint64_t a1)
{
}

void type metadata accessor for UIScreenTouchLevel(uint64_t a1)
{
}

void type metadata accessor for _UIUserInterfacePresentationSemanticContext(uint64_t a1)
{
}

void type metadata accessor for _UISplitViewControllerContext(uint64_t a1)
{
}

void type metadata accessor for _UIUserInterfaceVibrancy(uint64_t a1)
{
}

void type metadata accessor for _UIUserInterfaceRenderingMode(uint64_t a1)
{
}

void type metadata accessor for _UITraitCollectionFocusSystemState(uint64_t a1)
{
}

void type metadata accessor for _UIBacklightLuminance(uint64_t a1)
{
}

void type metadata accessor for _UIInterfaceProtectionState(uint64_t a1)
{
}

uint64_t sub_1858DA788()
{
  return 16;
}

__n128 sub_1858DA794(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA7A0()
{
  return 16;
}

__n128 sub_1858DA7AC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA7B8()
{
  return 16;
}

__n128 sub_1858DA7C4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA7D0()
{
  return 16;
}

__n128 sub_1858DA7DC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA7E8()
{
  return 16;
}

__n128 sub_1858DA7F4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA800()
{
  return 16;
}

__n128 sub_1858DA80C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA818()
{
  return 16;
}

__n128 sub_1858DA824(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA830()
{
  return 16;
}

__n128 sub_1858DA83C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA848()
{
  return 16;
}

__n128 sub_1858DA854(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA860()
{
  return 16;
}

__n128 sub_1858DA86C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA878()
{
  return 16;
}

__n128 sub_1858DA884(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA890()
{
  return 16;
}

__n128 sub_1858DA89C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA8A8()
{
  return 16;
}

__n128 sub_1858DA8B4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA8C0()
{
  return 16;
}

__n128 sub_1858DA8CC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA8D8()
{
  return 16;
}

__n128 sub_1858DA8E4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA8F0()
{
  return 16;
}

__n128 sub_1858DA8FC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA908()
{
  return 16;
}

__n128 sub_1858DA914(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA920()
{
  return 16;
}

__n128 sub_1858DA92C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA938()
{
  return 16;
}

__n128 sub_1858DA944(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA950()
{
  return 16;
}

__n128 sub_1858DA95C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA968()
{
  return 16;
}

__n128 sub_1858DA974(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA980()
{
  return 16;
}

__n128 sub_1858DA98C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA998()
{
  return 16;
}

__n128 sub_1858DA9A4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA9B0()
{
  return 16;
}

__n128 sub_1858DA9BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA9C8()
{
  return 16;
}

__n128 sub_1858DA9D4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA9E0()
{
  return 16;
}

__n128 sub_1858DA9EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1858DA9F8()
{
  return 16;
}

__n128 sub_1858DAA04(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of static UITraitDefinition.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static UITraitDefinition.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static UITraitDefinition.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static UITraitDefinition.affectsColorAppearance.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static UITraitDefinition._defaultValueRepresentsUnspecified.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of static UITraitDefinition._isPrivate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of static _UICustomRawRepresentableTraitDefinition._customRawValue(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static _UICustomRawRepresentableTraitDefinition._value(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of UIMutableTraits.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

{
  return (*(uint64_t (**)(void))(a5 + 80))();
}

{
  return (*(uint64_t (**)(void))(a5 + 104))();
}

{
  return (*(uint64_t (**)(void))(a5 + 128))();
}

{
  return (*(uint64_t (**)(void))(a5 + 152))();
}

{
  return (*(uint64_t (**)(void))(a5 + 176))();
}

{
  return (*(uint64_t (**)(void))(a5 + 200))();
}

{
  return (*(uint64_t (**)(void))(a5 + 224))();
}

{
  return (*(uint64_t (**)(void))(a5 + 248))();
}

{
  return (*(uint64_t (**)(void))(a5 + 272))();
}

uint64_t dispatch thunk of UIMutableTraits.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

{
  return (*(uint64_t (**)(void))(a6 + 96))();
}

{
  return (*(uint64_t (**)(void))(a6 + 120))();
}

{
  return (*(uint64_t (**)(void))(a6 + 144))();
}

{
  return (*(uint64_t (**)(void))(a6 + 168))();
}

{
  return (*(uint64_t (**)(void))(a6 + 192))();
}

{
  return (*(uint64_t (**)(void))(a6 + 216))();
}

{
  return (*(uint64_t (**)(void))(a6 + 240))();
}

{
  return (*(uint64_t (**)(void))(a6 + 264))();
}

{
  return (*(uint64_t (**)(void))(a6 + 288))();
}

uint64_t dispatch thunk of UIMutableTraits.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of UIMutableTraits.subscript.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, void))(a7 + 64))(a1, a2 & 1);
}

{
  return (*(uint64_t (**)(uint64_t, void))(a7 + 112))(a1, a2 & 1);
}

{
  return (*(uint64_t (**)(uint64_t, void))(a7 + 160))(a1, a2 & 1);
}

uint64_t dispatch thunk of UIMutableTraits.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 296))();
}

{
  return (*(uint64_t (**)(void))(a6 + 320))();
}

{
  return (*(uint64_t (**)(void))(a6 + 344))();
}

{
  return (*(uint64_t (**)(void))(a6 + 368))();
}

uint64_t dispatch thunk of UIMutableTraits.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 312))();
}

{
  return (*(uint64_t (**)(void))(a7 + 336))();
}

{
  return (*(uint64_t (**)(void))(a7 + 360))();
}

{
  return (*(uint64_t (**)(void))(a7 + 384))();
}

uint64_t dispatch thunk of UITraitChangeObservable.registerForTraitChanges<A>(_:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of UITraitChangeObservable.registerForTraitChanges(_:target:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of UITraitChangeObservable.registerForTraitChanges(_:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of UITraitChangeObservable.unregisterForTraitChanges(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

ValueMetadata *type metadata accessor for UITraitUserInterfaceIdiom()
{
  return &type metadata for UITraitUserInterfaceIdiom;
}

ValueMetadata *type metadata accessor for UITraitForceTouchCapability()
{
  return &type metadata for UITraitForceTouchCapability;
}

ValueMetadata *type metadata accessor for UITraitDisplayGamut()
{
  return &type metadata for UITraitDisplayGamut;
}

ValueMetadata *type metadata accessor for UITraitAccessibilityContrast()
{
  return &type metadata for UITraitAccessibilityContrast;
}

ValueMetadata *type metadata accessor for UITraitUserInterfaceLevel()
{
  return &type metadata for UITraitUserInterfaceLevel;
}

ValueMetadata *type metadata accessor for UITraitActiveAppearance()
{
  return &type metadata for UITraitActiveAppearance;
}

ValueMetadata *type metadata accessor for UITraitToolbarItemPresentationSize()
{
  return &type metadata for UITraitToolbarItemPresentationSize;
}

ValueMetadata *type metadata accessor for UITraitImageDynamicRange()
{
  return &type metadata for UITraitImageDynamicRange;
}

ValueMetadata *type metadata accessor for UITraitSceneCaptureState()
{
  return &type metadata for UITraitSceneCaptureState;
}

ValueMetadata *type metadata accessor for UITraitTypesettingLanguage()
{
  return &type metadata for UITraitTypesettingLanguage;
}

ValueMetadata *type metadata accessor for UITraitTouchLevel()
{
  return &type metadata for UITraitTouchLevel;
}

ValueMetadata *type metadata accessor for UITraitArtworkSubtype()
{
  return &type metadata for UITraitArtworkSubtype;
}

ValueMetadata *type metadata accessor for UITraitSplitViewControllerContext()
{
  return &type metadata for UITraitSplitViewControllerContext;
}

ValueMetadata *type metadata accessor for UITraitVibrancy()
{
  return &type metadata for UITraitVibrancy;
}

ValueMetadata *type metadata accessor for UITraitUserInterfaceRenderingMode()
{
  return &type metadata for UITraitUserInterfaceRenderingMode;
}

ValueMetadata *type metadata accessor for UITraitFocusSystemState()
{
  return &type metadata for UITraitFocusSystemState;
}

ValueMetadata *type metadata accessor for UITraitBacklightLuminance()
{
  return &type metadata for UITraitBacklightLuminance;
}

ValueMetadata *type metadata accessor for _UITraitInterfaceProtectionState()
{
  return &type metadata for _UITraitInterfaceProtectionState;
}

void type metadata accessor for _UIUpdateRequest(uint64_t a1)
{
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + _Block_object_dispose(&STACK[0x478], 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t sub_1858DB04C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1858DB06C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

void type metadata accessor for CAFrameRateRange(uint64_t a1)
{
}

void type metadata accessor for UIViewAnimatingState(uint64_t a1)
{
}

void type metadata accessor for UIViewAnimatingPosition(uint64_t a1)
{
}

void type metadata accessor for _UIBackgroundConfigurationShadowType(uint64_t a1)
{
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x478], 8) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for UIAnimatableCornerRadii(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UIAnimatableCornerRadii(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for CACornerRadii(uint64_t a1)
{
}

void type metadata accessor for UIConfigurationStateCustomKey(uint64_t a1)
{
}

void type metadata accessor for FormattingDescriptorListStyle(uint64_t a1)
{
}

void type metadata accessor for FormattingDescriptorAttributeState(uint64_t a1)
{
}

void type metadata accessor for _UIVisibility(uint64_t a1)
{
}

void type metadata accessor for UIApplicationSceneInterfaceOrientationMode(uint64_t a1)
{
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
}

void type metadata accessor for Style(uint64_t a1)
{
}

void type metadata accessor for UIAxis(uint64_t a1)
{
}

void type metadata accessor for _UIFluidSliderDriverState(uint64_t a1)
{
}

void type metadata accessor for Region(uint64_t a1)
{
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for UIAnimatableTransform.Vector3(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UIAnimatableTransform.Vector3(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CAPoint3D(uint64_t a1)
{
}

void type metadata accessor for CGRectEdge(uint64_t a1)
{
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

void type metadata accessor for _UISliderFluidUpdateSource(uint64_t a1)
{
}

void type metadata accessor for UIAccessibilityTraits(uint64_t a1)
{
}

void type metadata accessor for Level(uint64_t a1)
{
}

void type metadata accessor for Width(uint64_t a1)
{
}

void type metadata accessor for Weight(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for SpringBehavior(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SpringBehavior(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for UIFloatRange(uint64_t a1)
{
}

void type metadata accessor for _UITraitColorVariant(uint64_t a1)
{
}

void type metadata accessor for TextEffectStyle(uint64_t a1)
{
}

void type metadata accessor for UICornerCurve(uint64_t a1)
{
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CompoundSpringAnimationState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CompoundSpringAnimationState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4_Block_object_dispose(&STACK[0x478], 8) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for UIListEnvironment(uint64_t a1)
{
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for __UIContentUnavailableAlignment(uint64_t a1)
{
}

void type metadata accessor for TextAnimation(uint64_t a1)
{
}

void type metadata accessor for ComponentKey(uint64_t a1)
{
}

void type metadata accessor for Highlight(uint64_t a1)
{
}

void type metadata accessor for TextList(uint64_t a1)
{
}

void type metadata accessor for TextAlignment(uint64_t a1)
{
}

void type metadata accessor for DetectionPattern(uint64_t a1)
{
}

void type metadata accessor for UIOffset(uint64_t a1)
{
}

void type metadata accessor for NSDirectionalEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for URLThumbnailDictionaryItem(uint64_t a1)
{
}

void type metadata accessor for __UIListContentTextTransform(uint64_t a1)
{
}

void type metadata accessor for __UIListContentTextAlignment(uint64_t a1)
{
}

void type metadata accessor for Event(uint64_t a1)
{
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for _UIHDRHeadroomUsage(uint64_t a1)
{
}

void type metadata accessor for __UIButtonConfigurationTitleAlignment(uint64_t a1)
{
}

void type metadata accessor for __UIButtonConfigurationIndicator(uint64_t a1)
{
}

void type metadata accessor for __UIButtonConfigurationMacIdiomStyle(uint64_t a1)
{
}

void type metadata accessor for __UIButtonConfigurationSize(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for UIAnimatableNormalizedRect(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

uint64_t sub_1858DB644()
{
  return sub_1854A7054((unint64_t *)&unk_1EB256750, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1858DB68C()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FB12D8, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1858DB6D4()
{
  return sub_1854A7054(&qword_1E8FB12E8, type metadata accessor for Key);
}

uint64_t sub_1858DB71C()
{
  return sub_1854A7054(&qword_1E8FB12F0, type metadata accessor for Key);
}

uint64_t sub_1858DB764()
{
  return sub_1854A7054(&qword_1E8FB12F8, type metadata accessor for URLThumbnailDictionaryItem);
}

uint64_t sub_1858DB7AC()
{
  return sub_1854A7054(&qword_1E8FB1300, type metadata accessor for URLThumbnailDictionaryItem);
}

uint64_t sub_1858DB7F4()
{
  return sub_1854A7054(&qword_1E8FB1308, type metadata accessor for URLThumbnailDictionaryItem);
}

uint64_t sub_1858DB83C()
{
  return sub_1854A7054(&qword_1E8FB1310, type metadata accessor for DetectionPattern);
}

uint64_t sub_1858DB884()
{
  return sub_1854A7054(&qword_1E8FB1318, type metadata accessor for DetectionPattern);
}

uint64_t sub_1858DB8CC()
{
  return sub_1854A7054(&qword_1E8FB1320, type metadata accessor for TextAlignment);
}

uint64_t sub_1858DB914()
{
  return sub_1854A7054(&qword_1E8FB1328, type metadata accessor for TextAlignment);
}

uint64_t sub_1858DB95C()
{
  return sub_1854A7054(&qword_1E8FB1330, type metadata accessor for TextList);
}

uint64_t sub_1858DB9A4()
{
  return sub_1854A7054(&qword_1E8FB1338, type metadata accessor for TextList);
}

uint64_t sub_1858DB9EC()
{
  return sub_1854A7054(&qword_1E8FB1340, type metadata accessor for Highlight);
}

uint64_t sub_1858DBA34()
{
  return sub_1854A7054(&qword_1E8FB1348, type metadata accessor for Highlight);
}

uint64_t sub_1858DBA7C()
{
  return sub_1854A7054(&qword_1E8FB1350, type metadata accessor for ComponentKey);
}

uint64_t sub_1858DBAC4()
{
  return sub_1854A7054(&qword_1E8FB1358, type metadata accessor for ComponentKey);
}

uint64_t sub_1858DBB0C()
{
  return sub_1854A7054(&qword_1E8FB1360, type metadata accessor for NSUnderlineStyle);
}

uint64_t sub_1858DBB54()
{
  return sub_1854A7054(&qword_1E8FB1368, type metadata accessor for NSUnderlineStyle);
}

uint64_t sub_1858DBB9C()
{
  return sub_1854A7054(&qword_1E8FB1370, type metadata accessor for NSUnderlineStyle);
}

uint64_t sub_1858DBBE4()
{
  return sub_1854A7054(&qword_1E8FB1378, type metadata accessor for NSUnderlineStyle);
}

uint64_t sub_1858DBC2C()
{
  return sub_1854A7054(&qword_1E8FB1380, type metadata accessor for TextEffectStyle);
}

uint64_t sub_1858DBC74()
{
  return sub_1854A7054(&qword_1E8FB1388, type metadata accessor for TextEffectStyle);
}

uint64_t sub_1858DBCBC()
{
  return sub_1854A7054(&qword_1E8FB1390, type metadata accessor for Weight);
}

uint64_t sub_1858DBD04()
{
  return sub_1854A7054(&qword_1E8FB1398, type metadata accessor for Weight);
}

uint64_t sub_1858DBD4C()
{
  return sub_1854A7054(&qword_1E8FB13A0, type metadata accessor for Weight);
}

uint64_t sub_1858DBD94()
{
  return sub_1854A7054(&qword_1E8FB13A8, type metadata accessor for Width);
}

uint64_t sub_1858DBDDC()
{
  return sub_1854A7054(&qword_1E8FB13B0, type metadata accessor for Width);
}

uint64_t sub_1858DBE24()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FB8220, type metadata accessor for Width);
}

uint64_t sub_1858DBE6C()
{
  return sub_1854A7054(&qword_1E8FAFB00, type metadata accessor for UILayoutPriority);
}

uint64_t sub_1858DBEB4()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FB13B8, type metadata accessor for UILayoutPriority);
}

uint64_t sub_1858DBEFC()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FAFAF0, type metadata accessor for UILayoutPriority);
}

uint64_t sub_1858DBF44()
{
  return sub_1854A7054(&qword_1E8FB13C8, type metadata accessor for Level);
}

uint64_t sub_1858DBF8C()
{
  return sub_1854A7054(&qword_1E8FB13D0, type metadata accessor for Level);
}

uint64_t sub_1858DBFD4()
{
  return sub_1854A7054(&qword_1E8FB8240, type metadata accessor for Level);
}

uint64_t sub_1858DC01C()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FAEC10, type metadata accessor for UIAccessibilityTraits);
}

uint64_t sub_1858DC064()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FB13D8, type metadata accessor for UIAccessibilityTraits);
}

uint64_t sub_1858DC0AC()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FAEF80, type metadata accessor for UIAccessibilityTraits);
}

uint64_t sub_1858DC0F4()
{
  return sub_1854A7054(&qword_1E8FB13E8, type metadata accessor for _UISliderFluidUpdateSource);
}

uint64_t sub_1858DC13C()
{
  return sub_1854A7054(&qword_1E8FB13F0, type metadata accessor for _UISliderFluidUpdateSource);
}

uint64_t sub_1858DC184()
{
  return sub_1854A7054(&qword_1E8FB13F8, type metadata accessor for _UISliderFluidUpdateSource);
}

uint64_t sub_1858DC1CC()
{
  return sub_1854A7054(&qword_1E8FB1400, type metadata accessor for _UISliderFluidUpdateSource);
}

uint64_t sub_1858DC214()
{
  return sub_1854A7054(&qword_1E8FB1408, type metadata accessor for CGRectEdge);
}

uint64_t sub_1858DC25C()
{
  return sub_1854A7054(&qword_1E8FB1410, type metadata accessor for UIAxis);
}

uint64_t sub_1858DC2A4()
{
  return sub_1854A7054(&qword_1E8FB1418, type metadata accessor for UIAxis);
}

uint64_t sub_1858DC2EC()
{
  return sub_1854A7054(&qword_1E8FB1420, type metadata accessor for UIAxis);
}

uint64_t sub_1858DC334()
{
  return sub_1854A7054(&qword_1E8FB1428, type metadata accessor for UIAxis);
}

uint64_t sub_1858DC37C()
{
  return sub_1854A7054(&qword_1E8FB1430, type metadata accessor for Style);
}

uint64_t sub_1858DC3C4()
{
  return sub_1854A7054(&qword_1E8FB1438, type metadata accessor for UIConfigurationStateCustomKey);
}

uint64_t sub_1858DC40C()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FB1440, type metadata accessor for UIConfigurationStateCustomKey);
}

uint64_t sub_1858DC454()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FAF2D8, type metadata accessor for UIConfigurationStateCustomKey);
}

uint64_t sub_1858DC49C()
{
  return sub_1854A7054(&qword_1E8FB1450, type metadata accessor for _UIBackgroundConfigurationShadowType);
}

uint64_t sub_1858DC4E4()
{
  return sub_1854A7054(&qword_1E8FB1458, type metadata accessor for TextEffectStyle);
}

uint64_t sub_1858DC52C()
{
  return sub_1854A7054(&qword_1E8FB1460, type metadata accessor for ComponentKey);
}

uint64_t sub_1858DC574()
{
  return sub_1854A7054(&qword_1E8FB1468, type metadata accessor for Highlight);
}

uint64_t sub_1858DC5BC()
{
  return sub_1854A7054(&qword_1E8FB1470, type metadata accessor for TextList);
}

uint64_t sub_1858DC604()
{
  return sub_1854A7054(&qword_1E8FB1478, type metadata accessor for TextAlignment);
}

uint64_t sub_1858DC64C()
{
  return sub_1854A7054(&qword_1E8FB1480, type metadata accessor for DetectionPattern);
}

uint64_t sub_1858DC694()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

id sub_1858DC6A4(uint64_t a1)
{
  return sub_1858C3764(a1);
}

uint64_t sub_1858DC6AC()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1858DC6BC()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

id sub_1858DC6CC(uint64_t a1)
{
  return sub_1858C4F94(a1, v1[5], v1[2], v1[3]);
}

uint64_t sub_1858DC6D8()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1858DC6E8()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

id sub_1858DC6F8(uint64_t a1)
{
  return sub_1858C45EC(a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t sub_1858DC704()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1858DC714(uint64_t a1, uint64_t a2)
{
  return sub_1858C4BD0(a1, a2) & 1;
}

uint64_t sub_1858DC740()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

id sub_1858DC750(uint64_t a1)
{
  return sub_1858C4394(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1858DC75C()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1858DC76C()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1858DC77C()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

id sub_1858DC78C(uint64_t a1)
{
  return sub_1858C3A18(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1858DC798()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1858DC7A8(uint64_t a1, uint64_t a2)
{
  return sub_1858DC8A4(a1, a2);
}

uint64_t sub_1858DC7BC()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

id sub_1858DC7CC(uint64_t a1)
{
  return sub_1858C35DC(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1858DC7D8()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

id sub_1858DC7E8(uint64_t a1)
{
  return sub_1858C340C(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1858DC7F4()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

id sub_1858DC804(uint64_t a1)
{
  return sub_1858C3284(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1858DC810()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1858DC820()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1858DC830()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

id sub_1858DC840(uint64_t a1)
{
  return sub_1858C30E0(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1858DC860()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1858DC870()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1858DC880()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1858DC890(uint64_t a1, uint64_t a2)
{
  return sub_1858DC8A4(a1, a2);
}

uint64_t sub_1858DC8A4(uint64_t a1, uint64_t a2)
{
  return sub_1858C4008(a1, a2) & 1;
}

ValueMetadata *_s13MutableTraitsVMa()
{
  return &_s13MutableTraitsVN;
}

void type metadata accessor for __UIButtonConfigurationCornerStyle(uint64_t a1)
{
}

void type metadata accessor for _UIKeyCommandEnumerationPriority(uint64_t a1)
{
}

void type metadata accessor for CTRun(uint64_t a1)
{
}

void type metadata accessor for CTFont(uint64_t a1)
{
}

void type metadata accessor for NSTextAlignment(uint64_t a1)
{
}

void type metadata accessor for MarkerFormat(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for UITraitSelectionIsKey()
{
  return &type metadata for UITraitSelectionIsKey;
}

ValueMetadata *type metadata accessor for UITraitSemanticContext()
{
  return &type metadata for UITraitSemanticContext;
}

void type metadata accessor for __UICellConfigurationDragState(uint64_t a1)
{
}

void type metadata accessor for __UICellConfigurationDropState(uint64_t a1)
{
}

void type metadata accessor for CGGradient(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

void type metadata accessor for CIContextOption(uint64_t a1)
{
}

void type metadata accessor for CGColorSpace(uint64_t a1)
{
}

void type metadata accessor for CIImageOption(uint64_t a1)
{
}

void _s3__C6RegionOMa_0(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for _UISwiftTraits.HashableMetatype(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _UISwiftTraits.HashableMetatype(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + _Block_object_dispose(&STACK[0x478], 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _UISwiftTraits()
{
  return &type metadata for _UISwiftTraits;
}

void type metadata accessor for CALayerCornerCurve(uint64_t a1)
{
}

void type metadata accessor for CACornerMask(uint64_t a1)
{
}

void type metadata accessor for _UISimpleTimedInhibitorClockType(uint64_t a1)
{
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for UIAnimatableTransform.Epsilon(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UIAnimatableTransform.Epsilon(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

void type metadata accessor for CAMeshVertex(uint64_t a1)
{
}

__n128 __swift_memcpy32_4(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for UIAnimatableNormalizedRect(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for CAMeshFace(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

void type metadata accessor for _UIUpdateRequestFlags(uint64_t a1)
{
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for RBColor(uint64_t a1)
{
}

void type metadata accessor for UICompositingMode(uint64_t a1)
{
}

void type metadata accessor for UIRectCorner(uint64_t a1)
{
}

uint64_t sub_1858DCC1C()
{
  return sub_1854A7054(&qword_1E8FB1758, type metadata accessor for UIRectCorner);
}

uint64_t sub_1858DCC64()
{
  return sub_1854A7054(&qword_1E8FB1760, type metadata accessor for UIRectCorner);
}

uint64_t sub_1858DCCAC()
{
  return sub_1854A7054(&qword_1E8FB1768, type metadata accessor for UIRectCorner);
}

uint64_t sub_1858DCCF4()
{
  return sub_1854A7054(&qword_1E8FB1770, type metadata accessor for UIRectCorner);
}

uint64_t sub_1858DCD3C()
{
  return sub_1854A7054(&qword_1E8FB1778, type metadata accessor for UICompositingMode);
}

uint64_t sub_1858DCD84()
{
  return sub_1854A7054(&qword_1E8FB1780, type metadata accessor for _UIUpdateRequestFlags);
}

uint64_t sub_1858DCDCC()
{
  return sub_1854A7054(&qword_1E8FB1788, type metadata accessor for _UIUpdateRequestFlags);
}

uint64_t sub_1858DCE14()
{
  return sub_1854A7054(&qword_1E8FB1790, type metadata accessor for _UIUpdateRequestFlags);
}

uint64_t sub_1858DCE5C()
{
  return sub_1854A7054(&qword_1E8FB1798, type metadata accessor for _UIUpdateRequestFlags);
}

uint64_t sub_1858DCEA4()
{
  return sub_1854A7054(&qword_1E8FB17A0, type metadata accessor for Name);
}

uint64_t sub_1858DCEEC()
{
  return sub_1854A7054(&qword_1E8FB17A8, type metadata accessor for Name);
}

uint64_t sub_1858DCF34()
{
  return sub_1854A7054(&qword_1E8FB17B0, type metadata accessor for Name);
}

uint64_t sub_1858DCF7C()
{
  return sub_1854A7054(&qword_1E8FB17B8, type metadata accessor for CACornerMask);
}

uint64_t sub_1858DCFC4()
{
  return sub_1854A7054(&qword_1E8FB17C0, type metadata accessor for CACornerMask);
}

uint64_t sub_1858DD00C()
{
  return sub_1854A7054(&qword_1E8FB17C8, type metadata accessor for CACornerMask);
}

uint64_t sub_1858DD054()
{
  return sub_1854A7054(&qword_1E8FB17D0, type metadata accessor for CACornerMask);
}

uint64_t sub_1858DD09C()
{
  return sub_1854A7054(&qword_1E8FB17D8, type metadata accessor for CALayerCornerCurve);
}

uint64_t sub_1858DD0E4()
{
  return sub_1854A7054(&qword_1E8FB17E0, type metadata accessor for CALayerCornerCurve);
}

uint64_t sub_1858DD12C()
{
  return sub_1854A7054(&qword_1E8FB17E8, type metadata accessor for CALayerCornerCurve);
}

uint64_t sub_1858DD174()
{
  return sub_1854A7054(&qword_1E8FB17F0, type metadata accessor for CIImageOption);
}

uint64_t sub_1858DD1BC()
{
  return sub_1854A7054(&qword_1E8FB17F8, type metadata accessor for CIImageOption);
}

uint64_t sub_1858DD204()
{
  return sub_1854A7054(&qword_1E8FB1800, type metadata accessor for CIContextOption);
}

uint64_t sub_1858DD24C()
{
  return sub_1854A7054(&qword_1E8FB1808, type metadata accessor for CIContextOption);
}

uint64_t sub_1858DD294()
{
  return sub_1854A7054(&qword_1E8FB1810, type metadata accessor for AttributeName);
}

uint64_t sub_1858DD2DC()
{
  return sub_1854A7054(&qword_1E8FB1818, type metadata accessor for AttributeName);
}

uint64_t sub_1858DD324()
{
  return sub_1854A7054(&qword_1E8FB1820, type metadata accessor for TraitKey);
}

uint64_t sub_1858DD36C()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FB1828, type metadata accessor for TraitKey);
}

uint64_t sub_1858DD3B4()
{
  return sub_1854A7054(&qword_1E8FB1838, type metadata accessor for MarkerFormat);
}

uint64_t sub_1858DD3FC()
{
  return sub_1854A7054(&qword_1E8FB1840, type metadata accessor for MarkerFormat);
}

uint64_t sub_1858DD444()
{
  return sub_1854A7054(&qword_1E8FB1848, type metadata accessor for NSTextAlignment);
}

uint64_t sub_1858DD48C()
{
  return sub_1854A7054(&qword_1E8FB1850, type metadata accessor for CTFont);
}

uint64_t sub_1858DD4D4()
{
  return sub_1854A7054(&qword_1E8FB1858, type metadata accessor for _UIKeyCommandEnumerationPriority);
}

uint64_t sub_1858DD51C()
{
  return sub_1854A7054(&qword_1E8FB1860, type metadata accessor for CTFont);
}

uint64_t sub_1858DD564()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FB1868, type metadata accessor for MarkerFormat);
}

uint64_t sub_1858DD5AC()
{
  return sub_1854A7054((unint64_t *)&unk_1E8FB1878, type metadata accessor for CIContextOption);
}

uint64_t sub_1858DD5F4()
{
  return sub_1854A7054(&qword_1E8FAEF10, type metadata accessor for CIImageOption);
}

void type metadata accessor for _UIUserInterfaceSemanticContext(uint64_t a1)
{
}

void type metadata accessor for _UITraitCollectionSelectionIsKey(uint64_t a1)
{
}

void type metadata accessor for UICollectionViewLayoutInvalidationContextIntent(uint64_t a1)
{
}

uint64_t sub_1858DD678(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1858DD6CC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for UIViewSpringAnimationParameters(uint64_t a1)
{
}

uint64_t sub_1858DD830()
{
  uint64_t v0 = sub_186A1E5CC();
  __swift_allocate_value_buffer(v0, qword_1E8FD5930);
  __swift_project_value_buffer(v0, (uint64_t)qword_1E8FD5930);
  return sub_186A1E5BC();
}

void sub_1858DD990(void *a1)
{
  uint64_t v2 = OBJC_IVAR____UIZoomTransitionController_dismissInteraction;
  unsigned int v3 = *(void **)(v1 + OBJC_IVAR____UIZoomTransitionController_dismissInteraction);
  *(void *)(v1 + OBJC_IVAR____UIZoomTransitionController_dismissInteraction) = a1;
  id v6 = a1;
  id v4 = objc_msgSend(v3, sel_view);
  if (v4)
  {
    int v5 = v4;
    objc_msgSend(v3, sel_setIsEnabled_, 0);
    objc_msgSend(v3, sel_setIsEnabled_, 1);
    objc_msgSend(v5, sel_removeInteraction_, v3);
    objc_msgSend(v5, sel_addInteraction_, *(void *)(v1 + v2));
  }
  objc_msgSend(*(id *)(v1 + v2), sel_setDelegate_, v1);
}

void sub_1858DDA7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = &selRef_largeContentImageInsets;
  id v3 = objc_msgSend(v0, sel_layer);
  id v4 = (int64_t *)objc_msgSend(v3, sel_filters);

  if (!v4) {
    goto LABEL_40;
  }
  uint64_t v5 = sub_186A1EB3C();

  uint64_t v34 = (int64_t *)v5;
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
    int64_t v14 = 0;
    goto LABEL_39;
  }
  uint64_t v30 = v1;
  swift_bridgeObjectRetain();
  unint64_t v7 = 0;
  uint64_t v8 = 8;
  while (1)
  {
    sub_1853B76BC(v5 + v8 * 8 - 32, (uint64_t)v33);
    sub_1853B76BC((uint64_t)v33, (uint64_t)v32);
    sub_1853B985C(0, (unint64_t *)&qword_1E8FAF330);
    swift_dynamicCast();
    id v10 = objc_msgSend(v31, sel_name);

    if (v10) {
      break;
    }
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v33);
LABEL_5:
    ++v7;
    v8 += 4;
    if (v6 == v7)
    {
      swift_bridgeObjectRelease();
      int64_t v14 = v34[2];
LABEL_37:
      uint64_t v1 = v30;
      uint64_t v2 = &selRef_largeContentImageInsets;
      goto LABEL_38;
    }
  }
  uint64_t v11 = sub_186A1E95C();
  uint64_t v13 = v12;

  if (v11 != 0xD00000000000002BLL || v13 != 0x8000000186B9F3E0)
  {
    char v9 = sub_186A1F85C();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v33);
    if (v9) {
      goto LABEL_13;
    }
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v33);
LABEL_13:
  swift_bridgeObjectRelease();
  int64_t v14 = v7 + 1;
  if (__OFADD__(v7, 1)) {
    goto LABEL_53;
  }
  uint64_t v15 = v34;
  unint64_t v16 = v34[2];
  if (v14 == v16)
  {
    uint64_t v6 = v7;
    uint64_t v2 = &selRef_largeContentImageInsets;
LABEL_38:
    if (v14 < v6) {
      goto LABEL_52;
    }
LABEL_39:
    sub_1858F2EAC(v6, v14);
    id v4 = v34;
LABEL_40:
    id v28 = [v1 v2[127]];
    if (v4)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = (void *)sub_186A1EB1C();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = 0;
    }
    objc_msgSend(v28, sel_setFilters_, v29);
    swift_bridgeObjectRelease();

    return;
  }
  unint64_t v17 = v7 + 1;
  while (2)
  {
    if (v17 < v16)
    {
      sub_1853B76BC((uint64_t)&v15[v8], (uint64_t)v33);
      sub_1853B76BC((uint64_t)v33, (uint64_t)v32);
      swift_dynamicCast();
      id v18 = objc_msgSend(v31, sel_name);

      if (v18)
      {
        uint64_t v19 = sub_186A1E95C();
        uint64_t v21 = v20;

        if (v19 == 0xD00000000000002BLL && v21 == 0x8000000186B9F3E0)
        {
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v33);
LABEL_34:
          int64_t v14 = v17 + 1;
          if (__OFADD__(v17, 1)) {
            goto LABEL_45;
          }
          uint64_t v15 = v34;
          unint64_t v16 = v34[2];
          ++v17;
          v8 += 4;
          if (v14 == v16)
          {
            uint64_t v6 = v7;
            goto LABEL_37;
          }
          continue;
        }
        char v22 = sub_186A1F85C();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v33);
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v33);
      }
      if (v17 != v7)
      {
        if ((v7 & 0x8000000000000000) != 0) {
          goto LABEL_47;
        }
        uint64_t v23 = v34;
        unint64_t v24 = v34[2];
        if (v7 >= v24) {
          goto LABEL_48;
        }
        sub_1853B76BC((uint64_t)&v34[4 * v7 + 4], (uint64_t)v33);
        if (v17 >= v24) {
          goto LABEL_49;
        }
        sub_1853B76BC((uint64_t)&v23[v8], (uint64_t)v32);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v23 = sub_185AFA1E4(v23);
          uint64_t v34 = v23;
        }
        if (v7 >= v23[2]) {
          goto LABEL_50;
        }
        uint64_t v25 = &v23[4 * v7 + 4];
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v25);
        sub_1853B7BB0(v32, v25);
        if (v17 >= v34[2]) {
          goto LABEL_51;
        }
        uint64_t v26 = &v34[v8];
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v34[v8]);
        sub_1853B7BB0(v33, v26);
      }
      if (__OFADD__(v7++, 1)) {
        goto LABEL_46;
      }
      goto LABEL_34;
    }
    break;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
}

void sub_1858DDF54()
{
  sub_186A1E95C();
  id v1 = objc_allocWithZone(MEMORY[0x1E4F39BC0]);
  uint64_t v2 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_initWithType_, v2);

  id v4 = (void *)sub_186A1E92C();
  objc_msgSend(v3, sel_setName_, v4);

  id v5 = objc_msgSend(self, sel_clearColor);
  id v6 = objc_msgSend(v5, sel_CGColor);

  objc_msgSend(v3, sel_setValue_forKey_, v6, *MEMORY[0x1E4F3A148]);
  id v7 = objc_msgSend(v0, sel_layer);
  id v8 = objc_msgSend(v7, sel_filters);

  if (v8)
  {

    id v18 = objc_msgSend(v0, sel_layer);
    id v9 = objc_msgSend(v18, sel_filters);
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = (void *)sub_186A1EB3C();

      uint64_t v20 = sub_1853B985C(0, (unint64_t *)&qword_1E8FAF330);
      *(void *)&long long v19 = v3;
      id v12 = v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = sub_185916DA8(0, v11[2] + 1, 1, v11);
      }
      unint64_t v14 = v11[2];
      unint64_t v13 = v11[3];
      if (v14 >= v13 >> 1) {
        uint64_t v11 = sub_185916DA8((void *)(v13 > 1), v14 + 1, 1, v11);
      }
      long long v11[2] = v14 + 1;
      sub_1853B7BB0(&v19, &v11[4 * v14 + 4]);
      uint64_t v15 = (void *)sub_186A1EB1C();
      swift_bridgeObjectRelease();
      objc_msgSend(v18, sel_setFilters_, v15);

      return;
    }
    objc_msgSend(v18, sel_setFilters_, 0);
  }
  else
  {
    id v16 = objc_msgSend(v0, sel_layer);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF360);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_186B83A90;
    *(void *)(v17 + 56) = sub_1853B985C(0, (unint64_t *)&qword_1E8FAF330);
    *(void *)(v17 + 32) = v3;
    id v18 = v3;
    id v3 = (id)sub_186A1EB1C();
    swift_bridgeObjectRelease();
    objc_msgSend(v16, sel_setFilters_, v3);
  }
}

void sub_1858DE2C4(void *a1)
{
  uint64_t v2 = v1;
  id v3 = a1;
  uint64_t v4 = OBJC_IVAR____UIZoomTransitionController_pendingDismissDestinationView;
  id v5 = *(void **)(v2 + OBJC_IVAR____UIZoomTransitionController_pendingDismissDestinationView);
  *(void *)(v2 + OBJC_IVAR____UIZoomTransitionController_pendingDismissDestinationView) = a1;
  id v10 = a1;
  if (v3)
  {
    if (!v5)
    {
LABEL_7:
      id v9 = v3;
      sub_1858DDF54();

      id v6 = v10;
      id v10 = v9;
      goto LABEL_9;
    }
    sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
    id v6 = v5;
    id v7 = v10;
    char v8 = sub_186A1F0AC();

    if (v8)
    {
      id v10 = v7;
      goto LABEL_9;
    }
  }
  else if (!v5)
  {
    goto LABEL_8;
  }
  sub_1858DDA7C();
  id v3 = *(void **)(v2 + v4);
  if (v3) {
    goto LABEL_7;
  }
LABEL_8:
  id v6 = v5;
LABEL_9:
}

void sub_1858DE4F8(id a1)
{
  uint64_t v2 = (uint64_t)v1;
  uint64_t v4 = (SEL *)&selRef_setSearchText_matchLimit_;
  unsigned int v5 = objc_msgSend(v1, sel_isZoomingIn);
  type metadata accessor for _UIZoomTransitionSettingsDomain();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  if (v5)
  {
    v133.receiver = ObjCClassFromMetadata;
    v133.super_class = (Class)&OBJC_METACLASS____TtC5UIKit31_UIZoomTransitionSettingsDomain;
    id v7 = objc_msgSendSuper2(&v133, sel_rootSettings);
    if (!v7) {
      goto LABEL_71;
    }
    char v8 = v7;
    id v9 = &OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_zoomIn;
  }
  else
  {
    v142.receiver = ObjCClassFromMetadata;
    v142.super_class = (Class)&OBJC_METACLASS____TtC5UIKit31_UIZoomTransitionSettingsDomain;
    id v10 = objc_msgSendSuper2(&v142, sel_rootSettings);
    if (!v10) {
      goto LABEL_72;
    }
    char v8 = v10;
    id v9 = &OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_zoomOut;
  }
  type metadata accessor for _UIZoomTransitionSpec();
  uint64_t v11 = (char *)*(id *)(swift_dynamicCastClassUnconditional() + *v9);

  v143[0] = v11;
  id v12 = *(void **)&v11[OBJC_IVAR____TtC5UIKit30_UIZoomTransitionAnimationSpec_general];
  id v13 = objc_allocWithZone((Class)_s22HybridPropertyAnimatorCMa());
  id v14 = v12;
  uint64_t v15 = sub_185AF1228(0, 0, 1048632, (uint64_t)v12, 0.0);
  v15[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__pausesOnCompletion] = 1;
  id v16 = *(void **)(v2 + OBJC_IVAR____UIZoomTransitionController_shimPropertyAnimator);
  int v124 = (char *)OBJC_IVAR____UIZoomTransitionController_shimPropertyAnimator;
  *(void *)(v2 + OBJC_IVAR____UIZoomTransitionController_shimPropertyAnimator) = v15;
  uint64_t v17 = v15;

  *(void *)(v2 + OBJC_IVAR____UIZoomTransitionController_activeTransitionContext) = a1;
  swift_unknownObjectRelease();
  BOOL v18 = objc_msgSend((id)swift_unknownObjectRetain(), sel_presentationStyle) == (id)-1;
  uint64_t v19 = OBJC_IVAR____UIZoomTransitionController_isForNavigation;
  *(unsigned char *)(v2 + OBJC_IVAR____UIZoomTransitionController_isForNavigation) = v18;
  id v20 = objc_msgSend((id)v2, sel_dismissInteraction);
  unsigned int v21 = objc_msgSend(v20, sel_isActive);

  id v22 = objc_msgSend((id)v2, sel_dismissInteraction);
  objc_msgSend(v22, sel_setIsEnabled_, 1);

  LODWORD(v132) = v21;
  if ((v21 & 1) != 0 || !objc_msgSend(a1, sel_isInteractive)) {
    goto LABEL_12;
  }
  if (qword_1E8FB09F8 != -1) {
    goto LABEL_66;
  }
  while (1)
  {
    uint64_t v23 = sub_186A1E5CC();
    __swift_project_value_buffer(v23, (uint64_t)qword_1E8FD5930);
    unint64_t v24 = sub_186A1E5AC();
    os_log_type_t v25 = sub_186A1EE9C();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_1853B0000, v24, v25, "Zoom transition gesture started and ended before startInteractiveTransition called.", v26, 2u);
      MEMORY[0x18C109220](v26, -1, -1);
    }

LABEL_12:
    id v27 = objc_msgSend(a1, sel_viewControllerForKey_, @"UITransitionContextFromViewController", (void)v119);
    if (!v27) {
      break;
    }
    id v28 = v27;
    uint64_t v126 = (uint64_t)a1;
    id v29 = objc_msgSend(a1, sel_viewControllerForKey_, @"UITransitionContextToViewController");
    if (!v29) {
      goto LABEL_68;
    }
    uint64_t v30 = v29;
    if ([(id)v2 v4[351]])
    {
      id v130 = v28;
      id v31 = v30;
      uint64_t v32 = a1;
      id v33 = objc_msgSend(a1, sel_viewForKey_, @"UITransitionContextToView");
      if (!v33) {
        goto LABEL_73;
      }
      uint64_t v34 = *(void **)(v2 + OBJC_IVAR____UIZoomTransitionController_foregroundView);
      *(void *)(v2 + OBJC_IVAR____UIZoomTransitionController_foregroundView) = v33;

      id v35 = objc_msgSend(a1, sel_viewForKey_, @"UITransitionContextFromView");
    }
    else
    {
      id v31 = v28;
      id v130 = v30;
      uint64_t v32 = a1;
      id v36 = objc_msgSend(a1, sel_viewForKey_, @"UITransitionContextFromView");
      if (!v36) {
        goto LABEL_74;
      }
      long long v37 = *(void **)(v2 + OBJC_IVAR____UIZoomTransitionController_foregroundView);
      *(void *)(v2 + OBJC_IVAR____UIZoomTransitionController_foregroundView) = v36;

      id v35 = objc_msgSend(a1, sel_viewForKey_, @"UITransitionContextToView");
    }
    id v38 = v35;
    uint64_t v39 = *(void **)(v2 + OBJC_IVAR____UIZoomTransitionController_backgroundView);
    *(void *)(v2 + OBJC_IVAR____UIZoomTransitionController_backgroundView) = v38;

    __int16 v123 = v17;
    if ((*(unsigned char *)(v2 + v19) & 1) != 0
      || (id v40 = objc_msgSend(v31, sel_activePresentationController)) == 0)
    {
      BOOL v42 = 0;
    }
    else
    {
      long long v41 = v40;
      self;
      BOOL v42 = swift_dynamicCastObjCClass() != 0;
    }
    long long v43 = v28;
    *(unsigned char *)(v2 + OBJC_IVAR____UIZoomTransitionController_isPresentingSheet) = v42;
    id v44 = objc_msgSend(v32, sel_containerView);
    *(void *)&long long v119 = OBJC_IVAR____UIZoomTransitionController_foregroundView;
    long long v45 = *(void **)(v2 + OBJC_IVAR____UIZoomTransitionController_foregroundView);
    if (!v45) {
      goto LABEL_69;
    }
    long long v46 = v44;
    id v47 = v45;
    objc_msgSend(v47, sel_setUserInteractionEnabled_, objc_msgSend((id)v2, sel_isZoomingIn));

    uint64_t v48 = self;
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = v2;
    *(void *)(v49 + 24) = v32;
    *(void *)(v49 + 32) = v30;
    *(void *)(v49 + 40) = v46;
    *(void *)(v49 + 4_Block_object_dispose(&STACK[0x478], 8) = v31;
    *(void *)(v49 + 56) = v130;
    *(void *)(v49 + 64) = v43;
    *(void *)(v49 + 72) = v143;
    *(unsigned char *)(v49 + 80) = v132;
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = sub_1858E65D4;
    *(void *)(v50 + 24) = v49;
    *(void *)&long long v136 = sub_1853BE6D4;
    *((void *)&v136 + 1) = v50;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v135 = sub_1853BE46C;
    *((void *)&v135 + 1) = &block_descriptor_108;
    uint64_t v19 = (uint64_t)_Block_copy(&aBlock);
    a1 = (id)*((void *)&v136 + 1);
    swift_unknownObjectRetain();
    id v122 = v43;
    id v128 = v30;
    uint64_t v4 = (SEL *)(id)v2;
    uint64_t v17 = v46;
    id v51 = v31;
    id v52 = v130;
    swift_retain();
    swift_release();
    id v131 = v48;
    objc_msgSend(v48, sel_performWithoutAnimation_, v19);
    _Block_release((const void *)v19);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    __int16 v129 = v52;
    id v54 = objc_msgSend(self, sel__contextWithSource_zoomed_, v52, v51);
    id v55 = sub_1858DFD6C(v54, v17, (char)[(SEL *)v4 isZoomingIn]);

    uint64_t v141 = 0x3FF0000000000000;
    long long v56 = v51;
    uint64_t v57 = v17;
    if ([(SEL *)v4 isZoomingIn])
    {
      a1 = v55;
      id v58 = objc_msgSend(v56, sel__showcaseView);
      if (v58)
      {
        long long v59 = v58;
        id v60 = objc_msgSend(v58, sel_window);

        if (v60)
        {
          id v125 = v59;
          goto LABEL_38;
        }
      }
      long long v64 = *(void **)(v2 + v119);
      if (!v64) {
        goto LABEL_78;
      }
      id v125 = v64;
LABEL_38:
      id v65 = objc_msgSend(v128, sel__showcaseView, (void)v119);
      if (v65)
      {
        id v66 = v65;
        id v67 = objc_msgSend(v65, sel_window);

        if (!v67)
        {

          goto LABEL_41;
        }
      }
      else
      {
LABEL_41:
        id v66 = objc_msgSend(v128, sel_view);
        if (!v66) {
          goto LABEL_79;
        }
      }
      sub_1858E4C00(a1, v66);
      uint64_t v69 = v68;

      uint64_t v141 = v69;
      goto LABEL_43;
    }
    id v61 = objc_msgSend(v56, sel__showcaseView);
    if (!v61) {
      goto LABEL_32;
    }
    a1 = v61;
    id v62 = objc_msgSend(v61, sel_window);

    if (!v62)
    {

LABEL_32:
      long long v63 = *(void **)(v2 + v119);
      if (!v63) {
        goto LABEL_77;
      }
      a1 = v63;
    }
    id v125 = v55;
    sub_1858DE2C4(v55);
LABEL_43:
    sub_1858E039C(v56, v55);
    uint64_t v70 = *(void **)((char *)v4 + OBJC_IVAR____UIZoomTransitionController_fallbackSourceView);
    if (!v70
      || (sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0),
          id v71 = v55,
          id v72 = v70,
          char v73 = sub_186A1F0AC(),
          v71,
          v72,
          long long v74 = 0,
          (v73 & 1) == 0))
    {
      id v75 = v55;
      long long v74 = v55;
    }
    id v121 = v55;
    long long v76 = (const char *)sub_1858E0798(v74);

    unint64_t v77 = *(void **)((char *)v4 + OBJC_IVAR____UIZoomTransitionController_viewToScaleBack);
    *(SEL *)((char *)v4 + OBJC_IVAR____UIZoomTransitionController_viewToScaleBack) = v76;

    uint64_t v17 = (char *)swift_allocObject();
    *((void *)v17 + 2) = v4;
    *((void *)v17 + 3) = v56;
    *((void *)v17 + 4) = a1;
    *((void *)v17 + 5) = v57;
    *((void *)v17 + 6) = &v141;
    uint64_t v78 = swift_allocObject();
    *(void *)(v78 + 16) = sub_1858E666C;
    *(void *)(v78 + 24) = v17;
    *(void *)&long long v136 = sub_1853BE6D4;
    *((void *)&v136 + 1) = v78;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v135 = sub_1853BE46C;
    *((void *)&v135 + 1) = &block_descriptor_118;
    uint64_t v79 = _Block_copy(&aBlock);
    uint64_t v4 = v4;
    long long v80 = v57;
    id v81 = v56;
    uint64_t v82 = (char *)a1;
    swift_retain();
    swift_release();
    objc_msgSend(v131, sel_performWithoutAnimation_, v79);
    _Block_release(v79);
    uint64_t v19 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v19) {
      goto LABEL_64;
    }
    __int16 v120 = v81;
    uint64_t v83 = *(void **)((char *)v4 + OBJC_IVAR____UIZoomTransitionController_shimAnimationView);
    objc_msgSend(v83, sel_setAlpha_, 1.0);
    objc_msgSend(v80, sel_insertSubview_atIndex_, v83, 0);
    uint64_t v84 = *(char **)&v124[v2];
    if (!v84) {
      goto LABEL_70;
    }
    uint64_t v85 = swift_allocObject();
    swift_unknownObjectWeakInit();
    unint64_t v86 = *(void **)&v84[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator_propertyAnimator];
    uint64_t v87 = swift_allocObject();
    swift_unknownObjectUnownedInit();
    uint64_t v88 = (void *)swift_allocObject();
    float64x2_t v88[2] = v87;
    v88[3] = sub_1858E668C;
    v88[4] = v85;
    *(void *)&long long v136 = sub_1858E670C;
    *((void *)&v136 + 1) = v88;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v135 = sub_1856A95EC;
    *((void *)&v135 + 1) = &block_descriptor_128;
    uint64_t v89 = _Block_copy(&aBlock);
    BOOL v90 = v84;
    swift_retain_n();
    swift_release();
    objc_msgSend(v86, sel_addAnimations_delayFactor_, v89, 0.0);
    _Block_release(v89);

    swift_release_n();
    uint64_t v91 = *(void **)&v124[v2];
    if (v132)
    {
      if (!v91) {
        goto LABEL_75;
      }
      id v92 = v91;
      sub_185AF0890();
    }
    else
    {
      if (!v91) {
        goto LABEL_76;
      }
      id v92 = v91;
      sub_185AF0BF0();
    }
    int v124 = v82;

    uint64_t v93 = *(uint64_t *)((char *)v4 + OBJC_IVAR____UIZoomTransitionController_morphAnimation);
    unint64_t v94 = *(char **)(v93 + OBJC_IVAR____UIMagicMorphAnimation_morphView);
    uint64_t v95 = &v94[OBJC_IVAR____UIMagicMorphView_milestones];
    swift_beginAccess();
    uint64_t v96 = v94;
    uint64_t v97 = (void *)sub_185A02074(0xD00000000000001ELL, 0x8000000186B9F440);
    swift_endAccess();

    if ((v132 & 1) == 0)
    {
      uint64_t v108 = OBJC_IVAR____UIMagicMorphAnimation_groupCompletion;
      objc_msgSend(*(id *)(v93 + OBJC_IVAR____UIMagicMorphAnimation_groupCompletion), sel_increment);
      sub_1858E1BEC((uint64_t)v4, v143, v126, v125);
      objc_msgSend(*(id *)(v93 + v108), sel_complete);
      unint64_t v98 = v121;
      if (![(SEL *)v4 isZoomingIn]) {
        goto LABEL_61;
      }
      objc_msgSend(v80, sel_bounds);
      CGFloat v109 = CGRectGetHeight(v144) + -2.0;
      uint64_t v110 = swift_allocObject();
      swift_unknownObjectWeakInit();
      unint64_t v111 = (objc_class *)type metadata accessor for _UIMagicMorphView.Milestone();
      uint64_t v112 = objc_allocWithZone(v111);
      v112[OBJC_IVAR____UIMagicMorphMilestone_property] = 1;
      v112[OBJC_IVAR____UIMagicMorphMilestone_comparisonResult] = 0;
      *(CGFloat *)&v112[OBJC_IVAR____UIMagicMorphMilestone_value] = v109;
      unint64_t v113 = (void (**)())&v112[OBJC_IVAR____UIMagicMorphMilestone_action];
      void *v113 = sub_1858E6784;
      v113[1] = (void (*)())v110;
      v140.receiver = v112;
      v140.super_class = v111;
      id v114 = objc_msgSendSuper2(&v140, sel_init);
      swift_beginAccess();
      id v106 = v114;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v139 = *(void *)v95;
      *(void *)uint64_t v95 = 0x8000000000000000;
      sub_185977E94((uint64_t)v106, 0xD00000000000001ELL, 0x8000000186B9F440, isUniquelyReferenced_nonNull_native);
      *(void *)uint64_t v95 = v139;
      swift_bridgeObjectRelease();
      swift_endAccess();
      goto LABEL_60;
    }
    unint64_t v98 = v121;
    if (([(SEL *)v4 isZoomingIn] & 1) == 0
      && (*((unsigned char *)v4 + OBJC_IVAR____UIZoomTransitionController_style) & 1) == 0)
    {
      uint64_t v99 = *(void **)(v2 + v119);
      if (!v99) {
        goto LABEL_80;
      }
      objc_msgSend(v99, sel__intersectedSceneCornerRadii);
      long long v132 = aBlock;
      *(_OWORD *)__int16 v127 = v135;
      long long v119 = v136;
      uint64_t v100 = v137;
      uint64_t v101 = v138;
      uint64_t v102 = *(void **)((char *)v143[0] + OBJC_IVAR____TtC5UIKit30_UIZoomTransitionAnimationSpec_cornerRadiusAdjustment);
      uint64_t v103 = swift_allocObject();
      *(void *)(v103 + 16) = v96;
      *(_OWORD *)(v103 + 24) = v132;
      *(_OWORD *)(v103 + 40) = *(_OWORD *)v127;
      *(_OWORD *)(v103 + 56) = v119;
      *(void *)(v103 + 72) = v100;
      *(void *)(v103 + 80) = v101;
      *(void *)&long long v136 = sub_1858E67C4;
      *((void *)&v136 + 1) = v103;
      *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v135 = sub_1856A95EC;
      *((void *)&v135 + 1) = &block_descriptor_147;
      uint64_t v104 = _Block_copy(&aBlock);
      BOOL v105 = v96;
      id v106 = v102;
      swift_release();
      *(void *)&long long v136 = j__signpost_c2_removePresentationModifier_end;
      *((void *)&v136 + 1) = 0;
      *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v135 = sub_185A28F74;
      *((void *)&v135 + 1) = &block_descriptor_150_0;
      uint64_t v107 = _Block_copy(&aBlock);
      objc_msgSend(v131, sel__animateUsingSpringBehavior_tracking_animations_completion_, v106, 0, v104, v107);
      _Block_release(v107);
      _Block_release(v104);
LABEL_60:
    }
LABEL_61:
    uint64_t v116 = swift_allocObject();
    *(void *)(v116 + 16) = v120;
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = sub_1858E6750;
    *(void *)(v2 + 24) = v116;
    *(void *)&long long v136 = sub_1853BE6D4;
    *((void *)&v136 + 1) = v2;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v135 = sub_1853BE46C;
    *((void *)&v135 + 1) = &block_descriptor_138;
    uint64_t v19 = (uint64_t)_Block_copy(&aBlock);
    a1 = (id)*((void *)&v136 + 1);
    uint64_t v4 = v120;
    swift_retain();
    swift_release();
    objc_msgSend(v131, sel_performWithoutAnimation_, v19);

    _Block_release((const void *)v19);
    char v117 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v117 & 1) == 0)
    {
      id v118 = v143[0];
      swift_release();
      swift_release();
      swift_release();

      return;
    }
LABEL_65:
    __break(1u);
LABEL_66:
    swift_once();
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
}

void sub_1858DF644(char *a1, SEL *a2, uint64_t a3, void *a4, void *a5, id a6, void *a7, void **a8, char a9)
{
  if (!objc_msgSend(a1, sel_isZoomingIn)) {
    goto LABEL_6;
  }
  uint64_t v16 = OBJC_IVAR____UIZoomTransitionController_foregroundView;
  uint64_t v17 = *(void **)&a1[OBJC_IVAR____UIZoomTransitionController_foregroundView];
  if (!v17)
  {
    __break(1u);
    goto LABEL_55;
  }
  id v18 = v17;
  [(SEL *)a2 finalFrameForViewController:a3];
  objc_msgSend(v18, sel_setFrame_);

  if (!*(void *)&a1[v16])
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  objc_msgSend(a4, sel_addSubview_);
  a2 = (SEL *)&selRef_valueTextRectForBounds_;
  a6 = objc_msgSend(a5, sel_view);
  if (a6) {
    goto LABEL_10;
  }
  __break(1u);
LABEL_6:
  uint64_t v19 = *(void **)&a1[OBJC_IVAR____UIZoomTransitionController_backgroundView];
  if (v19)
  {
    id v20 = v19;
    [(SEL *)a2 finalFrameForViewController:a3];
    objc_msgSend(v20, sel__setFrameIgnoringLayerTransform_);
    if (!*(void *)&a1[OBJC_IVAR____UIZoomTransitionController_foregroundView])
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    objc_msgSend(a4, sel_insertSubview_belowSubview_, v20);
  }
  a2 = (SEL *)&selRef_valueTextRectForBounds_;
  a6 = objc_msgSend(a6, sel_view);
  if (!a6) {
    goto LABEL_56;
  }
LABEL_10:
  objc_msgSend(a6, sel_layoutIfNeeded);

  id v21 = objc_msgSend(a5, sel__showcaseView);
  if (!v21
    || (id v22 = v21,
        id v23 = objc_msgSend(v21, sel_window),
        v23,
        v22,
        !v23))
  {
    a1[OBJC_IVAR____UIZoomTransitionController_style] = 0;
    id v31 = *(void **)&a1[OBJC_IVAR____UIZoomTransitionController_dimmingView];
    objc_msgSend(a4, sel_bounds);
    objc_msgSend(v31, sel_setFrame_);
    if (a1[OBJC_IVAR____UIZoomTransitionController_isForNavigation] == 1)
    {
      id v32 = objc_msgSend(a7, sel_navigationController);
      if (v32)
      {
        id v33 = *(void **)&a1[OBJC_IVAR____UIZoomTransitionController_foregroundView];
        if (!v33)
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
        uint64_t v34 = v32;
        id v35 = v33;
        id v36 = objc_msgSend(v34, sel_view);
        objc_msgSend(v35, sel__setOverrideReparentingContainer_, v36);

        id v37 = objc_msgSend(v34, sel_toolbar);
        if (!v37)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        id v38 = v37;
        id v39 = objc_msgSend(v37, sel_superview);

        id v40 = objc_msgSend(v34, sel_view);
        long long v41 = v40;
        if (v39)
        {
          if (v40)
          {
            sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
            id v42 = v39;
            char v43 = sub_186A1F0AC();

            a2 = (SEL *)&selRef_valueTextRectForBounds_;
            if ((v43 & 1) == 0) {
              goto LABEL_36;
            }
LABEL_31:
            id v47 = [v34 a2[140]];
            if (!v47)
            {
LABEL_67:
              __break(1u);
              goto LABEL_68;
            }
            uint64_t v48 = v47;
            id v49 = objc_msgSend(v34, sel_toolbar);
            if (!v49)
            {
LABEL_68:
              __break(1u);
              return;
            }
            uint64_t v50 = v49;
            objc_msgSend(v48, sel_insertSubview_aboveSubview_, v31, v49);

LABEL_38:
LABEL_39:
            unsigned int v53 = objc_msgSend(a4, sel__shouldReverseLayoutDirection);
            id v54 = [a5 a2[140]];
            id v62 = v54;
            if (v53)
            {
              if (!v54)
              {
LABEL_61:
                __break(1u);
                goto LABEL_62;
              }
              id v55 = objc_msgSend(a5, sel_tabBarController);
              if (v55)
              {
                long long v56 = v55;
                double v57 = -[UITabBarController _sidebarOverlapAmount](v55);
              }
              else
              {
                double v57 = 0.0;
              }
              objc_msgSend(v62, sel__setCropInsets_, 0.0, 0.0, 0.0, v57);
            }
            else
            {
              if (!v54)
              {
LABEL_62:
                __break(1u);
LABEL_63:
                __break(1u);
                goto LABEL_64;
              }
              id v58 = objc_msgSend(a5, sel_tabBarController);
              if (v58)
              {
                long long v59 = v58;
                double v60 = -[UITabBarController _sidebarOverlapAmount](v58);
              }
              else
              {
                double v60 = 0.0;
              }
              objc_msgSend(v62, sel__setCropInsets_, 0.0, v60, 0.0, 0.0);
            }
            long long v46 = v62;
            goto LABEL_51;
          }
          long long v41 = v39;
        }
        else if (!v40)
        {
          goto LABEL_31;
        }

LABEL_36:
        id v51 = [v34 a2[140]];
        if (!v51)
        {
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        id v52 = v51;
        objc_msgSend(v51, sel_addSubview_, v31);

        goto LABEL_38;
      }
    }
    if (*(void *)&a1[OBJC_IVAR____UIZoomTransitionController_foregroundView])
    {
      objc_msgSend(a4, sel_insertSubview_belowSubview_, v31);
      goto LABEL_39;
    }
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  a1[OBJC_IVAR____UIZoomTransitionController_style] = 1;
  uint64_t v24 = OBJC_IVAR____UIZoomTransitionController_foregroundView;
  if (!*(void *)&a1[OBJC_IVAR____UIZoomTransitionController_foregroundView])
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  objc_msgSend(a4, sel_sendSubviewToBack_);
  os_log_type_t v25 = *(void **)&a1[v24];
  if (!v25)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  id v26 = objc_msgSend(v25, sel_layer);
  objc_msgSend(v26, sel_setZPosition_, 1.0);

  if (objc_msgSend(a1, sel_isZoomingIn))
  {
    type metadata accessor for _UIZoomTransitionSettingsDomain();
    v63.receiver = (id)swift_getObjCClassFromMetadata();
    v63.super_class = (Class)&OBJC_METACLASS____TtC5UIKit31_UIZoomTransitionSettingsDomain;
    id v27 = objc_msgSendSuper2(&v63, sel_rootSettings);
    if (v27)
    {
      id v28 = v27;
      type metadata accessor for _UIZoomTransitionSpec();
      id v29 = objc_retain(*(id *)(swift_dynamicCastClassUnconditional()
                              + OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_zoomInShowcase));

      uint64_t v30 = *a8;
      *a8 = v29;

      return;
    }
    goto LABEL_63;
  }
  if (a9)
  {
    id v44 = objc_msgSend(objc_allocWithZone((Class)_UIPortalView), sel_initWithSourceView_, *(void *)(*(void *)&a1[OBJC_IVAR____UIZoomTransitionController_morphAnimation]+ OBJC_IVAR____UIMagicMorphAnimation_morphView));
    long long v45 = (void *)sub_186A1E92C();
    objc_msgSend(v44, sel_setName_, v45);

    objc_msgSend(v44, sel_setMatchesPosition_, 1);
    objc_msgSend(v44, sel_setMatchesTransform_, 1);
    objc_msgSend(v44, sel_setUserInteractionEnabled_, 0);
    objc_msgSend(a4, sel_addSubview_, v44);
    long long v46 = *(void **)&a1[OBJC_IVAR____UIZoomTransitionController_showcasePortal];
    *(void *)&a1[OBJC_IVAR____UIZoomTransitionController_showcasePortal] = v44;
LABEL_51:
  }
}

id sub_1858DFD6C(void *a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  id v8 = objc_msgSend(v4, sel_clientTransition);
  id v9 = (uint64_t (**)(id, void *))objc_msgSend(v8, sel__viewProvider);

  id v10 = (id)v9[2](v9, a1);
  _Block_release(v9);
  if (a3)
  {
    if (!v10)
    {
      if (qword_1E8FB09F8 != -1) {
        swift_once();
      }
      uint64_t v31 = sub_186A1E5CC();
      __swift_project_value_buffer(v31, (uint64_t)qword_1E8FD5930);
      uint64_t v11 = sub_186A1E5AC();
      os_log_type_t v32 = sub_186A1EEBC();
      if (os_log_type_enabled(v11, v32))
      {
        id v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v33 = 0;
        _os_log_impl(&dword_1853B0000, v11, v32, "Starting a zoom transition from a nil view will trigger a fallback transition. To get the best possible teansition, be sure to provide a view that's visible and in a window.", v33, 2u);
        MEMORY[0x18C109220](v33, -1, -1);
      }
      goto LABEL_19;
    }
    uint64_t v11 = v10;
    id v12 = [v11 window];

    if (v12)
    {
LABEL_19:

      goto LABEL_20;
    }
    if (qword_1E8FB09F8 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_186A1E5CC();
    __swift_project_value_buffer(v13, (uint64_t)qword_1E8FD5930);
    id v14 = v11;
    uint64_t v11 = sub_186A1E5AC();
    os_log_type_t v15 = sub_186A1EEBC();
    if (os_log_type_enabled(v11, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t type = swift_slowAlloc();
      uint64_t v49 = type;
      *(_DWORD *)uint64_t v16 = 136446210;
      long long buf = v16;
      id v17 = [v14 _conciseParentDescription];
      uint64_t v18 = sub_186A1E95C();
      unint64_t v20 = v19;

      sub_185ADEA50(v18, v20, &v49);
      sub_186A1F16C();

      swift_bridgeObjectRelease();
      id v21 = buf;
      _os_log_impl(&dword_1853B0000, v11, v15, "Starting a zoom transition to a view not in the view hierarchy will trigger a fallback transition. To correct the error, be sure to a provide a view that's visible and in a window. View: %{public}s", buf, 0xCu);
      uint64_t v22 = type;
LABEL_14:
      swift_arrayDestroy();
      MEMORY[0x18C109220](v22, -1, -1);
      MEMORY[0x18C109220](v21, -1, -1);

      goto LABEL_19;
    }
  }
  else
  {
    if (!v10) {
      goto LABEL_20;
    }
    uint64_t v11 = v10;
    id v23 = [v11 window];

    if (v23) {
      goto LABEL_19;
    }
    if (qword_1E8FB09F8 != -1) {
      swift_once();
    }
    uint64_t v24 = sub_186A1E5CC();
    __swift_project_value_buffer(v24, (uint64_t)qword_1E8FD5930);
    id v14 = v11;
    uint64_t v11 = sub_186A1E5AC();
    os_log_type_t v25 = sub_186A1EEBC();
    if (os_log_type_enabled(v11, v25))
    {
      os_log_type_t typea = v25;
      id v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      uint64_t v49 = v48;
      *(_DWORD *)id v21 = 136446210;
      id v26 = a2;
      id v27 = [v14 _conciseParentDescription];
      uint64_t v28 = sub_186A1E95C();
      unint64_t v30 = v29;

      a2 = v26;
      sub_185ADEA50(v28, v30, &v49);
      sub_186A1F16C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1853B0000, v11, typea, "Dismissing a zoom transition to a view not in the view hierarchy will trigger a fallback transition. To correct the error, be sure to a provide a view that's visible and in a window. View: %{public}s", v21, 0xCu);
      uint64_t v22 = v48;
      goto LABEL_14;
    }
  }

LABEL_20:
  uint64_t v34 = *(void **)&v4[OBJC_IVAR____UIZoomTransitionController_activeTransitionContext];
  if (!v34) {
    goto LABEL_23;
  }
  swift_unknownObjectRetain();
  if (UIAccessibilityIsReduceMotionEnabled())
  {
    unsigned int v35 = objc_msgSend(v34, sel_isInteractive);
    swift_unknownObjectRelease();
    if (v35)
    {
LABEL_23:
      if (!v10) {
        goto LABEL_30;
      }
LABEL_26:
      id v36 = v10;
      id v37 = objc_msgSend(v36, sel_window);

      if (v37)
      {
        id v38 = v36;
        id v39 = objc_msgSend(a1, sel_zoomedViewController);
        id v40 = objc_msgSend(v39, sel_view);

        if (v40)
        {
          sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
          id v41 = v38;
          char v42 = sub_186A1F0AC();

          if (v42) {
            goto LABEL_29;
          }
        }
        else
        {
        }
        objc_msgSend(v38, sel__bringAncestorControlledCollectionSubviewToFrontAmongCoplanarPeers);
        id v43 = v38;
        goto LABEL_33;
      }
LABEL_29:
    }
  }
  else
  {
    swift_unknownObjectRelease();
    if (v10) {
      goto LABEL_26;
    }
  }
LABEL_30:
  id v38 = objc_msgSend(a1, sel_zoomedViewController);
  id v43 = sub_1858E0ECC(a2, v38);

LABEL_33:
  return v43;
}

void sub_1858E039C(void *a1, void *a2)
{
  id v5 = objc_msgSend(a1, sel_view);
  if (v5)
  {
    id v6 = *(void **)&v2[OBJC_IVAR____UIZoomTransitionController_fallbackSourceView];
    if (v6) {
      BOOL v7 = v6 == a2;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7)
    {
      id v48 = v5;
      id v8 = self;
      id v9 = a2;
      id v10 = objc_msgSend(v8, sel__contextSourceView_zoomedViewController_, v9, a1);
      if (!v10)
      {
        __break(1u);
        return;
      }
      uint64_t v11 = v10;
      id v12 = objc_msgSend(v2, sel_clientTransition);
      id v13 = objc_msgSend(v12, sel__options);

      swift_unknownObjectWeakInit();
      swift_beginAccess();
      id v14 = (void *)MEMORY[0x18C109380](v49);
      if (v14)
      {
        os_log_type_t v15 = v14;
        id v16 = objc_msgSend(v14, sel_alignmentRectProvider);
        if (v16)
        {
          id v17 = v16;
          double x = (*((double (**)(id, void *))v16 + 2))(v16, v11);
          double y = v19;
          double width = v21;
          double height = v23;
          _Block_release(v17);

          swift_unknownObjectWeakDestroy();
          v51.origin.double x = x;
          v51.origin.double y = y;
          v51.size.double width = width;
          v51.size.double height = height;
          if (CGRectIsNull(v51))
          {

LABEL_31:
            return;
          }
          id v25 = objc_msgSend(a1, sel__showcaseView);
          if (v25)
          {
            id v26 = v25;
            id v27 = objc_msgSend(v25, sel_window);

            if (v27)
            {
LABEL_22:
              uint64_t v29 = OBJC_IVAR____UIZoomTransitionController_style;
              if (v2[OBJC_IVAR____UIZoomTransitionController_style] == 1)
              {
                objc_msgSend(v26, sel_convertRect_fromCoordinateSpace_, v48, x, y, width, height);
                CGFloat v31 = v30;
                CGFloat v33 = v32;
                CGFloat v35 = v34;
                CGFloat v37 = v36;
                objc_msgSend(v26, sel_bounds);
                v60.origin.double x = v31;
                v60.origin.double y = v33;
                v60.size.double width = v35;
                v60.size.double height = v37;
                CGRect v53 = CGRectIntersection(v52, v60);
                double x = v53.origin.x;
                double y = v53.origin.y;
                double width = v53.size.width;
                double height = v53.size.height;
              }
              v54.origin.double x = x;
              v54.origin.double y = y;
              v54.size.double width = width;
              v54.size.double height = height;
              double MinY = CGRectGetMinY(v54);
              v55.origin.double x = x;
              v55.origin.double y = y;
              v55.size.double width = width;
              v55.size.double height = height;
              double MinX = CGRectGetMinX(v55);
              id v40 = objc_msgSend(a1, sel_tabBarController);
              if (v40)
              {
                id v41 = v40;
                double v42 = -[UITabBarController _sidebarOverlapAmount](v40);
              }
              else
              {
                double v42 = 0.0;
              }
              double v43 = MinX - v42;
              objc_msgSend(v26, sel_bounds);
              double v44 = CGRectGetHeight(v56);
              v57.origin.double x = x;
              v57.origin.double y = y;
              v57.size.double width = width;
              v57.size.double height = height;
              double v45 = v44 - CGRectGetMaxY(v57);
              objc_msgSend(v26, sel_bounds);
              double v46 = CGRectGetWidth(v58);
              v59.origin.double x = x;
              v59.origin.double y = y;
              v59.size.double width = width;
              v59.size.double height = height;
              double v47 = v46 - CGRectGetMaxX(v59);
              if (v2[v29] == 1) {
                objc_msgSend(v26, sel__setCropInsets_, MinY, v43, v45, v47);
              }
              else {
                objc_msgSend(v26, sel__setMorphInsets_, MinY, v43, v45, v47);
              }

              goto LABEL_31;
            }
          }
          uint64_t v28 = *(void **)&v2[OBJC_IVAR____UIZoomTransitionController_foregroundView];
          if (!v28) {
            uint64_t v28 = v48;
          }
          id v26 = v28;
          goto LABEL_22;
        }
      }
      swift_unknownObjectWeakDestroy();

      return;
    }
  }
}

id sub_1858E0798(void *a1)
{
  id v2 = objc_msgSend(a1, sel__viewControllerForAncestor);
  if (!v2) {
    id v2 = v1;
  }
  self;
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = v2;
    id result = objc_msgSend(v4, sel_collectionView);
    if (result)
    {
      id v7 = result;

LABEL_7:
      return v7;
    }
    __break(1u);
  }
  else
  {
    id result = objc_msgSend(v2, sel_view);
    id v7 = result;
    if (result) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void sub_1858E0860(unsigned char *a1, void *a2, void *a3, void *a4, double *a5)
{
  if ((a1[OBJC_IVAR____UIZoomTransitionController_style] & 1) == 0) {
    sub_1858E0B10();
  }
  if (objc_msgSend(a1, sel_isZoomingIn)
    && (id v10 = objc_msgSend(a3, sel__window), v10, !v10))
  {
    if (qword_1E8FB09F8 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_186A1E5CC();
    __swift_project_value_buffer(v11, (uint64_t)qword_1E8FD5930);
    id v12 = a3;
    id v13 = sub_186A1E5AC();
    os_log_type_t v14 = sub_186A1EEBC();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_t log = v13;
      os_log_type_t type = v14;
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v25 = v23;
      *(_DWORD *)os_log_type_t v15 = 136446210;
      long long buf = v15;
      id v16 = objc_msgSend(v12, sel__conciseParentDescription);
      uint64_t v17 = sub_186A1E95C();
      unint64_t v19 = v18;

      sub_185ADEA50(v17, v19, &v25);
      sub_186A1F16C();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1853B0000, log, type, "Source view was removed from the hierarchy during the transition! Using fallback view. Original View: %{public}s", buf, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C109220](v23, -1, -1);
      MEMORY[0x18C109220](buf, -1, -1);
    }
    else
    {
    }
    id v20 = sub_1858E0ECC(a4, a2);
    sub_1858E11C8(v20, 0, 0, 0, *a5);
  }
  else
  {
    sub_1858E11C8(a3, 0, 0, 0, *a5);
  }
  sub_1858E1578(objc_msgSend(a1, sel_isZoomingIn) ^ 1, 0);
}

void sub_1858E0B10()
{
  type metadata accessor for _UIZoomTransitionSettingsDomain();
  v38.receiver = (id)swift_getObjCClassFromMetadata();
  v38.super_class = (Class)&OBJC_METACLASS____TtC5UIKit31_UIZoomTransitionSettingsDomain;
  id v1 = objc_msgSendSuper2(&v38, sel_rootSettings);
  if (!v1)
  {
    __break(1u);
    goto LABEL_12;
  }
  id v2 = v1;
  type metadata accessor for _UIZoomTransitionSpec();
  uint64_t v3 = swift_dynamicCastClassUnconditional();
  id v4 = objc_msgSend(v0, sel_view);
  if (!v4)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id v5 = v4;
  id v6 = objc_msgSend(v4, sel_layer);

  id v7 = objc_msgSend(v0, sel_view);
  if (!v7)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  id v8 = v7;
  objc_msgSend(v7, sel__intersectedSceneCornerRadii);
  long long v32 = v35;
  long long v33 = v34;
  long long v30 = v37;
  long long v31 = v36;

  long long v34 = v33;
  long long v35 = v32;
  long long v36 = v31;
  long long v37 = v30;
  objc_msgSend(v6, sel_setCornerRadii_, &v34);

  id v9 = objc_msgSend(v0, sel_view);
  if (!v9)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  id v10 = v9;
  id v11 = objc_msgSend(v9, sel_layer);

  objc_msgSend(v11, sel_setCornerCurve_, *MEMORY[0x1E4F39EA8]);
  id v12 = objc_msgSend(v0, sel_view);
  if (!v12)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  id v13 = v12;
  id v14 = objc_msgSend(v12, sel_layer);

  id v15 = objc_msgSend(self, sel_blackColor);
  id v16 = objc_msgSend(v15, sel_CGColor);

  objc_msgSend(v14, sel_setShadowColor_, v16);
  id v17 = objc_msgSend(v0, sel_view);
  if (!v17)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v18 = v17;
  id v19 = objc_msgSend(v17, sel_layer);

  objc_msgSend(v19, sel_setShadowOffset_, *(double *)(v3 + OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_platterShadowXOffset), *(double *)(v3 + OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_platterShadowYOffset));
  id v20 = objc_msgSend(v0, sel_view);
  if (!v20)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  double v21 = v20;
  id v22 = objc_msgSend(v20, sel_layer);

  LODWORD(v23) = *(_DWORD *)(v3 + OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_platterShadowOpacity);
  objc_msgSend(v22, sel_setShadowOpacity_, v23);

  id v24 = objc_msgSend(v0, sel_view);
  if (!v24)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v25 = v24;
  id v26 = objc_msgSend(v24, sel_layer);

  objc_msgSend(v26, sel_setShadowRadius_, *(double *)(v3 + OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_platterShadowRadius));
  id v27 = objc_msgSend(v0, sel_view);
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = objc_msgSend(v27, sel_layer);

    objc_msgSend(v29, sel_setPunchoutShadow_, 1);
    return;
  }
LABEL_19:
  __break(1u);
}

id sub_1858E0ECC(void *a1, void *a2)
{
  uint64_t v5 = OBJC_IVAR____UIZoomTransitionController_fallbackSourceView;
  id v6 = *(void **)(v2 + OBJC_IVAR____UIZoomTransitionController_fallbackSourceView);
  if (v6)
  {
    id v7 = *(id *)(v2 + OBJC_IVAR____UIZoomTransitionController_fallbackSourceView);
LABEL_6:
    id v25 = v6;
    id result = objc_msgSend(a2, sel_view);
    if (result)
    {
      id v26 = result;
      objc_msgSend(a1, sel_insertSubview_belowSubview_, v7, result);

      id result = objc_msgSend(a2, sel_view);
      if (result)
      {
        id v27 = result;
        id v28 = objc_msgSend(result, sel_backgroundColor);

        objc_msgSend(v7, sel_setBackgroundColor_, v28);
        return v7;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
  type metadata accessor for _UIZoomTransitionSettingsDomain();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v30.receiver = ObjCClassFromMetadata;
  v30.super_class = (Class)&OBJC_METACLASS____TtC5UIKit31_UIZoomTransitionSettingsDomain;
  id result = objc_msgSendSuper2(&v30, sel_rootSettings);
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  id v10 = result;
  type metadata accessor for _UIZoomTransitionSpec();
  double v11 = *(double *)(swift_dynamicCastClassUnconditional()
                  + OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_fallbackSourceViewWidth);

  v29.receiver = ObjCClassFromMetadata;
  v29.super_class = (Class)&OBJC_METACLASS____TtC5UIKit31_UIZoomTransitionSettingsDomain;
  id result = objc_msgSendSuper2(&v29, sel_rootSettings);
  if (result)
  {
    id v12 = result;
    double v13 = *(double *)(swift_dynamicCastClassUnconditional()
                    + OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_fallbackSourceViewWidth);

    objc_msgSend(a1, sel_bounds);
    double v17 = UIRectCenteredRect(0.0, 0.0, v11, v13, v14, v15, v16);
    id v7 = objc_msgSend(objc_allocWithZone((Class)UIView), sel_initWithFrame_, v17, v18, v19, v20);
    id v21 = objc_msgSend(v7, sel_layer);
    id v22 = (void *)sub_186A1E92C();
    objc_msgSend(v21, sel_setName_, v22);

    id v23 = objc_msgSend(v7, sel_layer);
    objc_msgSend(v7, sel_bounds);
    objc_msgSend(v23, sel_setCornerRadius_, CGRectGetWidth(v31) * 0.5);

    objc_msgSend(v7, sel_setAlpha_, 0.0);
    id v24 = *(void **)(v2 + v5);
    *(void *)(v2 + v5) = v7;

    id v6 = 0;
    goto LABEL_6;
  }
LABEL_12:
  __break(1u);
  return result;
}

id sub_1858E11C8(void *a1, uint64_t a2, uint64_t (*a3)(), uint64_t a4, double a5)
{
  uint64_t v6 = v5;
  id v12 = *(void **)(v5 + OBJC_IVAR____UIZoomTransitionController_activeTransitionContext);
  if (!v12) {
    goto LABEL_6;
  }
  swift_unknownObjectRetain();
  if (!UIAccessibilityIsReduceMotionEnabled())
  {
    swift_unknownObjectRelease();
LABEL_6:
    sub_1858DDA7C();
    double v15 = *(void **)(v6 + OBJC_IVAR____UIZoomTransitionController_foregroundView);
    if (v15) {
      BOOL v16 = v15 == a1;
    }
    else {
      BOOL v16 = 0;
    }
    char v17 = !v16;
    uint64_t v18 = OBJC_IVAR____UIZoomTransitionController_style;
    if (*(unsigned char *)(v6 + OBJC_IVAR____UIZoomTransitionController_isForNavigation) != 1 || (v17 & 1) != 0)
    {
      uint64_t v49 = MEMORY[0x1E4FBC860];
    }
    else if (*(unsigned char *)(v6 + OBJC_IVAR____UIZoomTransitionController_style))
    {
      uint64_t v49 = MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255AD0);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_186B83AA0;
      uint64_t v20 = OBJC_IVAR____UIZoomTransitionController_transitionOverlayView;
      id v21 = *(void **)(v6 + OBJC_IVAR____UIZoomTransitionController_transitionOverlayView);
      *(void *)(v19 + 32) = v21;
      uint64_t v51 = v19;
      sub_186A1EB5C();
      uint64_t v49 = v51;
      id v22 = v21;
      objc_msgSend(a1, sel_bounds);
      double v24 = v23;
      double v26 = v25;
      double v28 = v27;
      double v30 = v29;
      objc_msgSend(a1, sel__cropInsets);
      double v32 = v24 - v31;
      objc_msgSend(a1, sel__cropInsets);
      objc_msgSend(*(id *)(v6 + v20), sel_setFrame_, v32, v26 - v33, v28, v30);
      uint64_t v18 = OBJC_IVAR____UIZoomTransitionController_style;
    }
    int v34 = *(unsigned __int8 *)(v6 + v18);
    if (a2) {
      int v35 = v34;
    }
    else {
      int v35 = 0;
    }
    uint64_t v50 = a3;
    if (v35 == 1)
    {
      uint64_t v36 = a4;
      id v37 = *(id *)(a2 + OBJC_IVAR____TtC5UIKit30_UIZoomTransitionAnimationSpec_general);
    }
    else
    {
      id result = objc_msgSend(self, sel_behaviorWithDampingRatio_response_, 1.0, 0.1);
      if (!result)
      {
        __break(1u);
        return result;
      }
      id v37 = result;
      uint64_t v36 = a4;
      if (!a2)
      {
        id v40 = 0;
        id v39 = 0;
        objc_super v38 = 0;
        if (v17) {
          goto LABEL_26;
        }
        goto LABEL_28;
      }
    }
    objc_super v38 = *(void **)(a2 + OBJC_IVAR____TtC5UIKit30_UIZoomTransitionAnimationSpec_morph);
    id v39 = *(void **)(a2 + OBJC_IVAR____TtC5UIKit30_UIZoomTransitionAnimationSpec_position);
    id v40 = *(void **)(a2 + OBJC_IVAR____TtC5UIKit30_UIZoomTransitionAnimationSpec_transform);
    id v41 = v38;
    id v42 = v39;
    id v43 = v40;
    if (v17)
    {
LABEL_26:
      id v44 = 0;
LABEL_29:
      double v45 = (objc_class *)type metadata accessor for _UIMagicMorphAnimation.Parameters();
      double v46 = (char *)objc_allocWithZone(v45);
      *(void *)&v46[OBJC_IVAR____TtCC5UIKit22_UIMagicMorphAnimation10Parameters_morphSpring] = v38;
      *(void *)&v46[OBJC_IVAR____TtCC5UIKit22_UIMagicMorphAnimation10Parameters_positionSpring] = v39;
      *(void *)&v46[OBJC_IVAR____TtCC5UIKit22_UIMagicMorphAnimation10Parameters_transformSpring] = v40;
      *(void *)&v46[OBJC_IVAR____TtCC5UIKit22_UIMagicMorphAnimation10Parameters_fallbackBackgroundColor] = v44;
      *(void *)&v46[OBJC_IVAR____TtCC5UIKit22_UIMagicMorphAnimation10Parameters_overlayViews] = v49;
      *(double *)&v46[OBJC_IVAR____TtCC5UIKit22_UIMagicMorphAnimation10Parameters_contentScale] = a5;
      double v47 = &v46[OBJC_IVAR____TtCC5UIKit22_UIMagicMorphAnimation10Parameters_reparentingOptions];
      *(void *)double v47 = v37;
      v47[8] = v35;
      v52.receiver = v46;
      v52.super_class = v45;
      swift_unknownObjectRetain();
      id v48 = objc_msgSendSuper2(&v52, sel_init);
      sub_18597B190((__objc2_class **)a1, (uint64_t)v48, v50, v36);

      return (id)swift_unknownObjectRelease();
    }
LABEL_28:
    id v44 = objc_msgSend(self, sel_systemBackgroundColor);
    goto LABEL_29;
  }
  unsigned __int8 v13 = objc_msgSend(v12, sel_isInteractive);
  id result = (id)swift_unknownObjectRelease();
  if (v13) {
    goto LABEL_6;
  }
  return result;
}

void sub_1858E1578(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____UIZoomTransitionController_activeTransitionContext;
  id v7 = *(void **)&v2[OBJC_IVAR____UIZoomTransitionController_activeTransitionContext];
  if (!v7) {
    goto LABEL_4;
  }
  swift_unknownObjectRetain();
  if (UIAccessibilityIsReduceMotionEnabled())
  {
    unsigned __int8 v8 = objc_msgSend(v7, sel_isInteractive);
    swift_unknownObjectRelease();
    if ((v8 & 1) == 0) {
      goto LABEL_26;
    }
LABEL_4:
    if ((a1 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  swift_unknownObjectRelease();
  if ((a1 & 1) == 0)
  {
LABEL_8:
    id v9 = *(void **)&v3[OBJC_IVAR____UIZoomTransitionController_viewToScaleBack];
    if (v9)
    {
      id v10 = objc_msgSend(v9, sel_layer);
      long long v11 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
      *(_OWORD *)&v60.m11 = *MEMORY[0x1E4F39B10];
      *(_OWORD *)&v60.m13 = v11;
      long long v12 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
      *(_OWORD *)&v60.m21 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
      *(_OWORD *)&v60.m23 = v12;
      long long v13 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
      *(_OWORD *)&v60.m31 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
      *(_OWORD *)&v60.m33 = v13;
      long long v14 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
      *(_OWORD *)&v60.m41 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
      *(_OWORD *)&v60.m43 = v14;
      objc_msgSend(v10, sel_setSublayerTransform_, &v60);

      double v15 = *(void **)&v3[OBJC_IVAR____UIZoomTransitionController_backgroundView];
      if (v15) {
        objc_msgSend(v15, sel_setUserInteractionEnabled_, 1);
      }
      BOOL v16 = *(void **)&v3[OBJC_IVAR____UIZoomTransitionController_dimmingView];
      id v17 = objc_msgSend(self, sel_clearColor);
      objc_msgSend(v16, sel_setBackgroundColor_, v17);

      sub_1853B985C(0, (unint64_t *)&unk_1E8FAF5B0);
      uint64_t v18 = (void *)sub_186A1EB1C();
      objc_msgSend(v16, sel_setBackgroundEffects_, v18);

      if ((a1 & 1) == 0)
      {
        uint64_t v19 = *(void **)&v3[OBJC_IVAR____UIZoomTransitionController_showcasePortal];
        if (v19)
        {
          objc_msgSend(v19, sel_setAlpha_, 0.0);
          uint64_t v20 = *(void **)&v3[v6];
          if (!v20) {
            goto LABEL_31;
          }
          goto LABEL_27;
        }
      }
LABEL_26:
      uint64_t v20 = *(void **)&v3[v6];
      if (!v20) {
        goto LABEL_31;
      }
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_40;
  }
LABEL_7:
  if (v3[OBJC_IVAR____UIZoomTransitionController_isPresentingSheet]) {
    goto LABEL_8;
  }
  if (!UIAccessibilityIsReduceMotionEnabled())
  {
    uint64_t v21 = OBJC_IVAR____UIZoomTransitionController_viewToScaleBack;
    id v22 = *(void **)&v3[OBJC_IVAR____UIZoomTransitionController_viewToScaleBack];
    if (!v22)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    id v23 = objc_msgSend(v22, sel_layer);
    type metadata accessor for _UIZoomTransitionSettingsDomain();
    v59.receiver = (id)swift_getObjCClassFromMetadata();
    v59.super_class = (Class)&OBJC_METACLASS____TtC5UIKit31_UIZoomTransitionSettingsDomain;
    id v24 = objc_msgSendSuper2(&v59, sel_rootSettings);
    if (!v24)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    double v25 = v24;
    type metadata accessor for _UIZoomTransitionSpec();
    uint64_t v26 = swift_dynamicCastClassUnconditional();
    double v27 = *(void **)&v3[v21];
    if (!v27)
    {
LABEL_42:
      __break(1u);
      return;
    }
    objc_msgSend(v27, sel_bounds);
    CGFloat x = v61.origin.x;
    CGFloat y = v61.origin.y;
    CGFloat width = v61.size.width;
    CGFloat height = v61.size.height;
    double v32 = *(double *)(v26 + OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_recededBackgroundScaleDownPoints);
    double v33 = *(double *)(v26 + OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_recededBackgroundMinScale);
    CGFloat v34 = CGRectGetWidth(v61) - v32;
    v62.origin.CGFloat x = x;
    v62.origin.CGFloat y = y;
    v62.size.CGFloat width = width;
    v62.size.CGFloat height = height;
    double v35 = v34 / CGRectGetWidth(v62);
    if (v35 <= v33) {
      double v35 = v33;
    }
    CATransform3DMakeScale(&v60, v35, v35, 1.0);
    long long v57 = *(_OWORD *)&v60.m13;
    long long v58 = *(_OWORD *)&v60.m11;
    long long v55 = *(_OWORD *)&v60.m23;
    long long v56 = *(_OWORD *)&v60.m21;
    long long v53 = *(_OWORD *)&v60.m33;
    long long v54 = *(_OWORD *)&v60.m31;
    long long v51 = *(_OWORD *)&v60.m43;
    long long v52 = *(_OWORD *)&v60.m41;

    *(_OWORD *)&v60.m11 = v58;
    *(_OWORD *)&v60.m13 = v57;
    *(_OWORD *)&v60.m21 = v56;
    *(_OWORD *)&v60.m23 = v55;
    *(_OWORD *)&v60.m31 = v54;
    *(_OWORD *)&v60.m33 = v53;
    *(_OWORD *)&v60.m41 = v52;
    *(_OWORD *)&v60.m43 = v51;
    objc_msgSend(v23, sel_setSublayerTransform_, &v60);
  }
  uint64_t v36 = *(void **)&v3[OBJC_IVAR____UIZoomTransitionController_backgroundView];
  if (v36) {
    objc_msgSend(v36, sel_setUserInteractionEnabled_, 0);
  }
  id v37 = *(void **)&v3[OBJC_IVAR____UIZoomTransitionController_dimmingView];
  id v38 = objc_msgSend(v3, sel_clientTransition, v51, v52, v53, v54, v55, v56, v57, v58);
  id v39 = objc_msgSend(v38, sel__options);

  id v40 = objc_msgSend(v39, sel_dimmingColor);
  objc_msgSend(v37, sel_setBackgroundColor_, v40);

  id v41 = objc_msgSend(v3, sel_clientTransition);
  id v42 = objc_msgSend(v41, sel__options);

  id v43 = objc_msgSend(v42, sel_dimmingVisualEffect);
  if (v43)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255AD0);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_186B83AA0;
    *(void *)(v44 + 32) = v43;
    *(void *)&v60.m11 = v44;
    sub_186A1EB5C();
    sub_1853B985C(0, (unint64_t *)&unk_1E8FAF5B0);
    id v45 = v43;
    double v46 = (void *)sub_186A1EB1C();
    swift_bridgeObjectRelease();
    objc_msgSend(v37, sel_setBackgroundEffects_, v46);

    goto LABEL_26;
  }
  sub_1853B985C(0, (unint64_t *)&unk_1E8FAF5B0);
  uint64_t v50 = (void *)sub_186A1EB1C();
  objc_msgSend(v37, sel_setBackgroundEffects_, v50);

  uint64_t v20 = *(void **)&v3[v6];
  if (!v20)
  {
LABEL_31:
    if (v3[OBJC_IVAR____UIZoomTransitionController_style] != 1) {
      return;
    }
    goto LABEL_32;
  }
LABEL_27:
  swift_unknownObjectRetain();
  if (!UIAccessibilityIsReduceMotionEnabled())
  {
    swift_unknownObjectRelease();
    goto LABEL_31;
  }
  unsigned __int8 v47 = objc_msgSend(v20, sel_isInteractive);
  swift_unknownObjectRelease();
  if (v47) {
    goto LABEL_31;
  }
LABEL_32:
  id v48 = *(void **)&v3[OBJC_IVAR____UIZoomTransitionController_foregroundView];
  if (v48)
  {
    double v49 = 0.0;
    if ((a1 | a2)) {
      double v49 = 1.0;
    }
    objc_msgSend(v48, sel_setAlpha_, v49);
  }
}

void sub_1858E1B70(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C109380](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    id v4 = *(id *)(v2 + OBJC_IVAR____UIZoomTransitionController_shimAnimationView);

    objc_msgSend(v4, sel_setAlpha_, 0.0);
  }
}

void sub_1858E1BEC(uint64_t a1, id *a2, uint64_t a3, void *a4)
{
  id v7 = *(void **)((char *)*a2 + OBJC_IVAR____TtC5UIKit30_UIZoomTransitionAnimationSpec_general);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = a3;
  id v11 = v7;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  sub_18597ABEC(v7, 0, (uint64_t)sub_1858E6808, v8, (uint64_t)sub_1858E6854, v10);

  swift_release_n();
  swift_release();
  swift_release();
  uint64_t v12 = (uint64_t)*a2;
  id v13 = *a2;
  sub_1858E11C8(a4, v12, 0, 0, 1.0);
}

void sub_1858E1D7C(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x18C109380](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_1858E1578(objc_msgSend(v2, sel_isZoomingIn), 0);
  }
}

id sub_1858E1DE0(id result)
{
  uint64_t v2 = OBJC_IVAR____UIZoomTransitionController_activeTransitionContext;
  id v3 = *(id *)(v1 + OBJC_IVAR____UIZoomTransitionController_activeTransitionContext);
  if (v3) {
    BOOL v4 = v3 == result;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    return result;
  }
  uint64_t v5 = v1;
  uint64_t v6 = result;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____UIZoomTransitionController_dimmingView), sel_removeFromSuperview);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____UIZoomTransitionController_shimAnimationView), sel_removeFromSuperview);
  uint64_t v35 = OBJC_IVAR____UIZoomTransitionController_fallbackSourceView;
  id v7 = *(void **)(v1 + OBJC_IVAR____UIZoomTransitionController_fallbackSourceView);
  if (v7) {
    objc_msgSend(v7, sel_removeFromSuperview);
  }
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____UIZoomTransitionController_showcasePortal);
  if (v8) {
    objc_msgSend(v8, sel_removeFromSuperview);
  }
  sub_1858E1578(0, 1u);
  uint64_t v34 = OBJC_IVAR____UIZoomTransitionController_style;
  if (*(unsigned char *)(v1 + OBJC_IVAR____UIZoomTransitionController_style) == 1)
  {
    uint64_t v9 = *(void **)(v1 + OBJC_IVAR____UIZoomTransitionController_foregroundView);
    if (v9)
    {
      id v10 = v9;
      id v11 = objc_msgSend(v10, sel_layer);
      objc_msgSend(v11, sel_setZPosition_, 0.0);

      id v12 = objc_msgSend(v10, sel_superview);
      objc_msgSend(v12, sel_bringSubviewToFront_, v10);
    }
  }
  id v13 = *(void **)(v5 + OBJC_IVAR____UIZoomTransitionController_backgroundView);
  if (v13)
  {
    id v14 = v13;
    id v15 = objc_msgSend(v14, sel_layer);
    long long v16 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
    v36[0] = *MEMORY[0x1E4F39B10];
    v36[1] = v16;
    long long v17 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
    long long v36[2] = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
    v36[3] = v17;
    long long v18 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
    v36[4] = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
    v36[5] = v18;
    long long v19 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
    v36[6] = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
    v36[7] = v19;
    objc_msgSend(v15, sel_setSublayerTransform_, v36);

    objc_msgSend(v14, sel_setUserInteractionEnabled_, 1);
    id v20 = objc_msgSend(v14, sel_layer);
    objc_msgSend(v20, sel_setZPosition_, 0.0);
  }
  unsigned int v21 = objc_msgSend(v6, sel_transitionWasCancelled);
  uint64_t v22 = OBJC_IVAR____UIZoomTransitionController_shimPropertyAnimator;
  id v23 = *(unsigned char **)(v5 + OBJC_IVAR____UIZoomTransitionController_shimPropertyAnimator);
  if (!v23)
  {
    __break(1u);
    goto LABEL_29;
  }
  unsigned int v24 = v21;
  uint64_t v25 = OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__state;
  uint64_t v26 = *(void *)&v23[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__state];
  if (v26)
  {
    if (v26 != 1) {
      goto LABEL_20;
    }
    v23[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__isRunning] = 0;
    *(void *)&v23[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator_springBehaviorWhenContinued] = 0;
    double v27 = v23;
    swift_unknownObjectRelease();
    objc_msgSend(*(id *)&v27[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator_propertyAnimator], sel_stopAnimation_, 0);
    *(void *)&v23[v25] = 2;

    id v23 = *(unsigned char **)(v5 + v22);
    if (!v23)
    {
      __break(1u);
LABEL_20:
      if (v26 == 2) {
        goto LABEL_21;
      }
LABEL_29:
      id result = (id)sub_186A1F60C();
      __break(1u);
      return result;
    }
  }
LABEL_21:
  uint64_t v28 = v24 ^ 1;
  if (*(void *)&v23[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__state] == 2)
  {
    uint64_t v29 = v24;
    *(void *)&v23[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator_completionPosition] = v24;
    double v30 = 1.0;
    if (v24) {
      double v30 = 0.0;
    }
    *(double *)&v23[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__fractionComplete] = v30;
    double v31 = *(void **)&v23[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator_propertyAnimator];
    double v32 = v23;
    objc_msgSend(v31, sel_finishAnimationAtPosition_, v29);
    sub_185AF1E08();
  }
  objc_msgSend(v6, sel_completeTransition_, v28);
  *(void *)(v5 + v2) = 0;
  swift_unknownObjectRelease();
  double v33 = *(void **)(v5 + v35);
  *(void *)(v5 + v35) = 0;

  sub_1858DE2C4(0);
  *(unsigned char *)(v5 + v34) = 0;
  *(unsigned char *)(v5 + OBJC_IVAR____UIZoomTransitionController_isPresentingSheet) = 0;
  id result = *(id *)(v5 + OBJC_IVAR____UIZoomTransitionController_foregroundView);
  if (result) {
    return objc_msgSend(result, sel_setUserInteractionEnabled_, 1);
  }
  return result;
}

void sub_1858E21BC(uint64_t a1)
{
  uint64_t v2 = self;
  uint64_t v9 = sub_1858E6800;
  uint64_t v10 = a1;
  uint64_t v5 = MEMORY[0x1E4F143A8];
  uint64_t v6 = 1107296256;
  id v7 = sub_1856A95EC;
  uint64_t v8 = &block_descriptor_163;
  id v3 = _Block_copy(&v5);
  swift_retain();
  swift_release();
  uint64_t v9 = (void (*)())j__signpost_c2_removePresentationModifier_end;
  uint64_t v10 = 0;
  uint64_t v5 = MEMORY[0x1E4F143A8];
  uint64_t v6 = 1107296256;
  id v7 = sub_185A28F74;
  uint64_t v8 = &block_descriptor_166;
  BOOL v4 = _Block_copy(&v5);
  objc_msgSend(v2, sel__animateByRetargetingAnimations_completion_, v3, v4);
  _Block_release(v4);
  _Block_release(v3);
}

void sub_1858E2300(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C109380](v1);
  if (v2)
  {
    id v3 = (char *)v2;
    if (qword_1E8FAF328 != -1) {
      swift_once();
    }
    long long v4 = xmmword_1E8FD5740;
    uint64_t v5 = qword_1E8FD5750;
    uint64_t v6 = unk_1E8FD5758;
    long long v7 = xmmword_1E8FD5760;
    uint64_t v8 = qword_1E8FD5770;
    uint64_t v9 = unk_1E8FD5778;
    uint64_t v10 = &v3[OBJC_IVAR____UIMagicMorphView_overrideCornerRadii];
    *(_OWORD *)uint64_t v10 = xmmword_1E8FD5740;
    *((void *)v10 + 2) = v5;
    *((void *)v10 + 3) = v6;
    *((_OWORD *)v10 + 2) = v7;
    *((void *)v10 + 6) = v8;
    *((void *)v10 + 7) = v9;
    v10[64] = 0;
    id v11 = &v3[OBJC_IVAR____UIMagicMorphView_clippingViews];
    swift_beginAccess();
    unint64_t v12 = *(void *)v11;
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = sub_186A1F67C();
    }
    else
    {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    if (v13)
    {
      if (v13 < 1)
      {
        __break(1u);
        return;
      }
      uint64_t v14 = 0;
      do
      {
        if ((v12 & 0xC000000000000001) != 0) {
          id v15 = (id)MEMORY[0x18C102240](v14, v12);
        }
        else {
          id v15 = *(id *)(v12 + 8 * v14 + 32);
        }
        long long v16 = v15;
        ++v14;
        id v17 = objc_msgSend(v15, sel_layer);
        long long v19 = v4;
        uint64_t v20 = v5;
        uint64_t v21 = v6;
        long long v22 = v7;
        uint64_t v23 = v8;
        uint64_t v24 = v9;
        objc_msgSend(v17, sel_setCornerRadii_, &v19);
      }
      while (v13 != v14);
    }
    swift_bridgeObjectRelease();
    id v18 = objc_msgSend(v3, sel_layer);
    long long v19 = v4;
    uint64_t v20 = v5;
    uint64_t v21 = v6;
    long long v22 = v7;
    uint64_t v23 = v8;
    uint64_t v24 = v9;
    objc_msgSend(v18, sel_setCornerRadii_, &v19);
  }
}

uint64_t sub_1858E2528(void *a1, _OWORD *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 24) = *a2;
  *(_OWORD *)(v4 + 40) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 56) = a2[2];
  *(_OWORD *)(v4 + 72) = v6;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1858E67D0;
  *(void *)(v7 + 24) = v4;
  void v11[4] = sub_1853BE6D4;
  void v11[5] = v7;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  long long v11[2] = sub_1853BE46C;
  void v11[3] = &block_descriptor_160;
  uint64_t v8 = _Block_copy(v11);
  id v9 = a1;
  swift_retain();
  swift_release();
  UIMM_HFR(v8);
  _Block_release(v8);
  swift_release();
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v4) {
    __break(1u);
  }
  return result;
}

void sub_1858E268C()
{
  id v1 = objc_msgSend(v0, sel_view);
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v1, sel_layer);

  objc_msgSend(v3, sel_setShadowOpacity_, 0.0);
  id v4 = objc_msgSend(v0, sel_view);
  if (!v4)
  {
LABEL_7:
    __break(1u);
    return;
  }
  long long v5 = v4;
  id v6 = objc_msgSend(v4, sel_layer);

  if (qword_1E8FAF328 != -1) {
    swift_once();
  }
  v7[0] = xmmword_1E8FD5740;
  v7[1] = *(_OWORD *)&qword_1E8FD5750;
  void v7[2] = xmmword_1E8FD5760;
  void v7[3] = *(_OWORD *)&qword_1E8FD5770;
  objc_msgSend(v6, sel_setCornerRadii_, v7);
}

uint64_t sub_1858E291C()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____UIZoomTransitionController_activeTransitionContext);
  if (!v1) {
    return 2;
  }
  swift_unknownObjectRetain();
  if (!UIAccessibilityIsReduceMotionEnabled())
  {
    swift_unknownObjectRelease();
    return 2;
  }
  unsigned int v2 = objc_msgSend(v1, sel_isInteractive);
  swift_unknownObjectRelease();
  if (v2) {
    return 2;
  }
  else {
    return 1;
  }
}

void *sub_1858E2A2C(void *a1)
{
  swift_unknownObjectRetain();
  if (!UIAccessibilityIsReduceMotionEnabled())
  {
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  unsigned __int8 v3 = objc_msgSend(a1, sel_isInteractive);
  swift_unknownObjectRelease();
  if (v3)
  {
LABEL_5:
    id v4 = *(void **)(v1 + OBJC_IVAR____UIZoomTransitionController_toolbarTransitionController);
    id v5 = v4;
    return v4;
  }
  return 0;
}

uint64_t sub_1858E2BA0@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(unsigned char *)(v2 + OBJC_IVAR____UIZoomTransitionController_isPreempting)) {
    goto LABEL_14;
  }
  uint64_t v21 = a1;
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____UIZoomTransitionController_morphAnimation);
  id v5 = sub_18597C5F0();
  objc_msgSend(v5, sel_setPaused_, 1);

  objc_msgSend(*(id *)(v4 + OBJC_IVAR____UIMagicMorphAnimation_morphView), sel_removeFromSuperview);
  sub_185A60998();
  id v6 = *(void **)(v4 + OBJC_IVAR____UIMagicMorphAnimation_animationContainerView);
  objc_msgSend(v6, sel_removeFromSuperview);
  long long v22 = 0x3FF0000000000000uLL;
  *(void *)&long long v23 = 0;
  *((void *)&v23 + 1) = 0x3FF0000000000000;
  long long v24 = 0uLL;
  objc_msgSend(v6, sel_setTransform_, &v22);
  id v7 = objc_msgSend(v6, sel_layer);
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
  long long v22 = *MEMORY[0x1E4F39B10];
  long long v23 = v8;
  long long v9 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
  long long v24 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
  long long v25 = v9;
  long long v10 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
  long long v26 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
  long long v27 = v10;
  long long v11 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
  long long v28 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
  long long v29 = v11;
  objc_msgSend(v7, sel_setSublayerTransform_, &v22);

  unint64_t v12 = (uint64_t *)(v4 + OBJC_IVAR____UIMagicMorphAnimation_animationItems);
  swift_beginAccess();
  uint64_t v13 = *v12;
  if (!((unint64_t)*v12 >> 62))
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_4;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    *unint64_t v12 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRelease();
    a1 = v21;
LABEL_14:
    uint64_t result = (uint64_t)sub_1858E1DE0(a1);
    *a2 = 0u;
    a2[1] = 0u;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_186A1F67C();
  uint64_t v14 = result;
  if (!result) {
    goto LABEL_13;
  }
LABEL_4:
  if (v14 >= 1)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if ((v13 & 0xC000000000000001) != 0) {
        id v17 = (char *)MEMORY[0x18C102240](i, v13);
      }
      else {
        id v17 = (char *)*(id *)(v13 + 8 * i + 32);
      }
      id v18 = v17;
      long long v19 = *(void **)&v17[OBJC_IVAR____TtCC5UIKit22_UIMagicMorphAnimationP33_27010C79BBE8436D7F6A5CD454B184E54Item_reparentingView];
      if (v19)
      {
        id v20 = v19;
        objc_msgSend(v20, sel_removeFromSuperview);
      }
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_1858E2FBC(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v2 = (void *)result;
  swift_unknownObjectRetain();
  if (objc_msgSend(v1, sel_isZoomingIn))
  {
    id v3 = objc_msgSend(v2, sel_toKeyboard);
    if (v3)
    {
      uint64_t v4 = v3;
      id v5 = objc_msgSend(v2, sel_fromKeyboard);

      if (v5)
      {
LABEL_10:

        goto LABEL_11;
      }
LABEL_9:
      id v7 = *(id *)&v1[OBJC_IVAR____UIZoomTransitionController_transitionOverlayView];
      objc_msgSend(v7, sel_addSubview_, v4);

      uint64_t v4 = v7;
      goto LABEL_10;
    }
  }
  else
  {
    id v6 = objc_msgSend(v2, sel_fromKeyboard);
    if (v6)
    {
      uint64_t v4 = v6;
      goto LABEL_9;
    }
  }
LABEL_11:
  return swift_unknownObjectRelease();
}

uint64_t sub_1858E3240(id a1, uint64_t a2, char a3, double a4, double a5, double a6, double a7)
{
  long long v8 = v7;
  uint64_t v16 = OBJC_IVAR____UIZoomTransitionController_activeTransitionContext;
  id v17 = *(void **)&v8[OBJC_IVAR____UIZoomTransitionController_activeTransitionContext];
  if (v17)
  {
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_isInteractive))
    {
      swift_unknownObjectRelease();
    }
    else
    {
      unsigned int v26 = objc_msgSend(v8, sel_isZoomingIn);
      unsigned int v27 = objc_msgSend(v17, sel_transitionWasCancelled);
      swift_unknownObjectRelease();
      if (v26)
      {
        if (v27) {
          goto LABEL_15;
        }
      }
      else if (!v27)
      {
        goto LABEL_15;
      }
    }
  }
  id v18 = objc_msgSend(a1, sel_view);
  if (v18)
  {
    long long v19 = v18;
    id v20 = objc_msgSend(v8, sel_owningViewController);
    if (!v20)
    {
      a3 = 0;
LABEL_36:

      return a3 & 1;
    }
    uint64_t v21 = v20;
    if (a2 == 1)
    {
      id v22 = objc_msgSend(v20, sel__showcaseView);
      if (v22)
      {
        long long v23 = v22;
        id v24 = objc_msgSend(v22, sel_window);

        if (v24)
        {

          a3 = 0;
          id v25 = v21;
LABEL_35:

          long long v19 = v23;
          goto LABEL_36;
        }
      }
    }
    uint64_t v28 = OBJC_IVAR____UIZoomTransitionController_isForNavigation;
    if (v8[OBJC_IVAR____UIZoomTransitionController_isForNavigation] == 1)
    {
      id v29 = objc_msgSend(v21, sel_navigationController);
      if (v29)
      {
        long long v23 = v29;
        id v25 = v21;
        id v30 = objc_msgSend(v23, sel_topViewController);
        if (!v30)
        {

          a3 = 0;
          long long v23 = v25;
          goto LABEL_35;
        }
        double v31 = v30;
        sub_1853B985C(0, qword_1E8FAEAB0);
        id v32 = v25;
        char v33 = sub_186A1F0AC();

        if ((v33 & 1) == 0)
        {

          a3 = 0;
          id v25 = v32;
          goto LABEL_35;
        }
        id v34 = objc_msgSend(v23, sel__transitionCoordinator);
        swift_unknownObjectRelease();
        if (v34)
        {
          unsigned __int8 v35 = objc_msgSend(v23, sel__isCurrentTransitionPreemptable);

          if ((v35 & 1) == 0 && !*(void *)&v8[v16])
          {
            a3 = 0;
            id v25 = v19;
            long long v23 = v32;
            goto LABEL_35;
          }
        }
        else
        {
        }
      }
    }
    if ((a3 & 1) != 0
      && (v8[v28] & 1) == 0
      && (id v36 = objc_msgSend(v21, sel_activePresentationController)) != 0
      && (id v37 = v36, v38 = objc_msgSend(v36, sel__shouldDismiss), v37, !v38))
    {
      a3 = 0;
    }
    else
    {
      id v39 = objc_msgSend(v8, sel_clientTransition);
      id v40 = objc_msgSend(v39, sel__options);

      id v41 = (uint64_t (**)(id, id))objc_msgSend(v40, sel_interactiveDismissShouldBegin);
      if (v41)
      {
        id v42 = objc_msgSend(objc_allocWithZone((Class)UIZoomTransitionInteractionContext), sel_init);
        id v43 = objc_msgSend(v21, sel_view);
        objc_msgSend(v19, sel_convertPoint_toView_, v43, a4, a5);
        double v45 = v44;
        double v47 = v46;

        objc_msgSend(v42, sel_setLocation_, v45, v47);
        objc_msgSend(v42, sel_setVelocity_, a6, a7);
        objc_msgSend(v42, sel_setWillBegin_, a3 & 1);
        a3 = v41[2](v41, v42);

        _Block_release(v41);
      }
    }
    id v25 = v19;
    long long v23 = v21;
    goto LABEL_35;
  }
LABEL_15:
  a3 = 0;
  return a3 & 1;
}

void sub_1858E3704(char *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  long long v11 = &a1[OBJC_IVAR____UIMagicMorphView_overrideCornerRadii];
  *(void *)long long v11 = *a2;
  *((void *)v11 + 1) = v4;
  *((void *)v11 + 2) = v5;
  *((void *)v11 + 3) = v6;
  *((void *)v11 + 4) = v7;
  *((void *)v11 + 5) = v8;
  *((void *)v11 + 6) = v9;
  *((void *)v11 + 7) = v10;
  v11[64] = 0;
  unint64_t v12 = &a1[OBJC_IVAR____UIMagicMorphView_clippingViews];
  swift_beginAccess();
  unint64_t v13 = *(void *)v12;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_186A1F67C();
  }
  else
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (!v14)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    id v19 = objc_msgSend(a1, sel_layer);
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    uint64_t v23 = v6;
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    uint64_t v27 = v10;
    objc_msgSend(v19, sel_setCornerRadii_, &v20);

    return;
  }
  if (v14 >= 1)
  {
    uint64_t v15 = 0;
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        id v16 = (id)MEMORY[0x18C102240](v15, v13);
      }
      else {
        id v16 = *(id *)(v13 + 8 * v15 + 32);
      }
      id v17 = v16;
      ++v15;
      id v18 = objc_msgSend(v16, sel_layer);
      uint64_t v20 = v3;
      uint64_t v21 = v4;
      uint64_t v22 = v5;
      uint64_t v23 = v6;
      uint64_t v24 = v7;
      uint64_t v25 = v8;
      uint64_t v26 = v9;
      uint64_t v27 = v10;
      objc_msgSend(v18, sel_setCornerRadii_, &v20);
    }
    while (v14 != v15);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t sub_1858E38CC(void *a1, _OWORD *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 24) = *a2;
  *(_OWORD *)(v4 + 40) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 56) = a2[2];
  *(_OWORD *)(v4 + 72) = v6;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1858E691C;
  *(void *)(v7 + 24) = v4;
  void v11[4] = sub_1853BE6D4;
  void v11[5] = v7;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  long long v11[2] = sub_1853BE46C;
  void v11[3] = &block_descriptor_98;
  uint64_t v8 = _Block_copy(v11);
  id v9 = a1;
  swift_retain();
  swift_release();
  UIMM_HFR(v8);
  _Block_release(v8);
  swift_release();
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v4) {
    __break(1u);
  }
  return result;
}

void sub_1858E3A30(uint64_t a1, double *a2)
{
  double v2 = a2[6];
  if (v2 <= a2[4]) {
    double v2 = a2[4];
  }
  if (v2 <= *a2) {
    double v2 = *a2;
  }
  if (v2 <= a2[2]) {
    double v2 = a2[2];
  }
  CACornerRadiiMake((double *)&v3, v2, v2, v2, v2);
  char v4 = 0;
  sub_185A5E1B8((uint64_t)&v3);
}

uint64_t sub_1858E3B2C(void *a1, char a2, void *a3, uint64_t a4, void *a5, double a6)
{
  char v11 = a2 & 1;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(unsigned char *)(v12 + 24) = v11;
  *(void *)(v12 + 32) = a3;
  *(void *)(v12 + 40) = a4;
  *(void *)(v12 + 4_Block_object_dispose(&STACK[0x478], 8) = a5;
  *(double *)(v12 + 56) = a6;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_1858E6494;
  *(void *)(v13 + 24) = v12;
  v19[4] = sub_1853BE6D4;
  float32x4_t v19[5] = v13;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 1107296256;
  _OWORD v19[2] = sub_1853BE46C;
  v19[3] = &block_descriptor_73;
  uint64_t v14 = _Block_copy(v19);
  id v15 = a1;
  id v16 = a3;
  swift_unknownObjectRetain();
  id v17 = a5;
  swift_retain();
  swift_release();
  UIMM_HFR(v14);
  _Block_release(v14);
  swift_release();
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v12) {
    __break(1u);
  }
  return result;
}

void sub_1858E3CB8(void *a1, char a2, void *a3, void *a4, char *a5, double a6)
{
  objc_msgSend(a1, sel_originalTrackingViewPosition);
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  objc_msgSend(a1, sel_translation);
  v58.double x = v13;
  v58.double y = v15;
  CGPoint v16 = CGPointApplyAffineTransform(v58, &v56);
  double x = v16.x;
  double y = v16.y;
  if (a2)
  {
    objc_msgSend(a3, sel_setAlpha_, a6 * -1.3 + 1.0);
    goto LABEL_13;
  }
  if (!objc_msgSend(a1, sel_wantsHeightClamping))
  {
LABEL_13:
    objc_msgSend(a5, sel_setCenter_, x, y);
    objc_msgSend(a1, sel_transform);
    objc_msgSend(a5, sel_setTransform_, &v56);
    return;
  }
  objc_msgSend(a1, sel_scale);
  double v54 = v19;
  objc_msgSend(a3, sel_bounds);
  double v21 = v20;
  double v23 = v22;
  double v25 = v24;
  double v27 = v26;
  objc_msgSend(a3, sel__cropInsets);
  v59.origin.double x = UIRectInset(v21, v23, v25, v27, v28, v31, v30, v29);
  CGFloat v55 = v59.origin.x;
  CGFloat v32 = v59.origin.y;
  CGFloat width = v59.size.width;
  CGFloat height = v59.size.height;
  double v53 = CGRectGetHeight(v59);
  id v35 = objc_msgSend(a4, sel_containerView);
  objc_msgSend(v35, sel_bounds);
  CGFloat v37 = v36;
  CGFloat v39 = v38;
  CGFloat v41 = v40;
  CGFloat v43 = v42;

  v60.origin.double x = v37;
  v60.origin.double y = v39;
  v60.size.CGFloat width = v41;
  v60.size.CGFloat height = v43;
  double v44 = CGRectGetHeight(v60);
  v61.origin.double x = v55;
  v61.origin.double y = v32;
  v61.size.CGFloat width = width;
  v61.size.CGFloat height = height;
  double a = CGRectGetHeight(v61);
  v62.origin.double x = v55;
  v62.origin.double y = v32;
  v62.size.CGFloat width = width;
  v62.size.CGFloat height = height;
  double v46 = CGRectGetHeight(v62);
  v63.origin.double x = v55;
  v63.origin.double y = v32;
  v63.size.CGFloat width = width;
  v63.size.CGFloat height = height;
  if (CGRectGetWidth(v63) >= v46)
  {
LABEL_11:
    v65.origin.double x = v55;
    v65.origin.double y = v32;
    v65.size.CGFloat width = width;
    v65.size.CGFloat height = height;
    CGFloat v51 = CGRectGetWidth(v65);
    long long v52 = &a5[OBJC_IVAR____UIMagicMorphView_overrideBounds];
    sub_1858E63A8((uint64_t)&a5[OBJC_IVAR____UIMagicMorphView_overrideBounds], (uint64_t)v57);
    *(void *)long long v52 = 0;
    *((void *)v52 + 1) = 0;
    *((CGFloat *)v52 + 2) = v51;
    *((double *)v52 + 3) = a;
    v52[32] = 0;
    sub_185A5E390((uint64_t)v57);
    v66.origin.double x = v55;
    v66.origin.double y = v32;
    v66.size.CGFloat width = width;
    v66.size.CGFloat height = height;
    double y = v16.y + (CGRectGetHeight(v66) - a) * -0.5;
    double x = v16.x;
    goto LABEL_13;
  }
  double v47 = (v16.y + v54 * v53 * 0.5 - v44) / v54;
  if (v47 <= 0.0) {
    double v47 = 0.0;
  }
  v56.double a = a - v47;
  double v48 = v44 * 0.5;
  v64.origin.double x = v55;
  v64.origin.double y = v32;
  v64.size.CGFloat width = width;
  v64.size.CGFloat height = height;
  double v49 = CGRectGetHeight(v64);
  if (v44 * -0.5 <= 0.0 && v48 <= v49)
  {
    sub_185AED2CC(v48, v49, v44 * -0.5, 0.0);
    double a = v56.a;
    goto LABEL_11;
  }
  __break(1u);
}

void sub_1858E4094(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C109380](v1);
  if (v2)
  {
    long long v3 = (void *)v2;
    sub_1858E1578(0, 0);
  }
}

void sub_1858E40F0(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x18C109380](v3);
  if (v4)
  {
    long long v5 = (void *)v4;
    sub_1858E1DE0(a2);
  }
}

uint64_t sub_1858E41AC(void *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(double *)(v8 + 24) = a3;
  *(double *)(v8 + 32) = a4;
  *(void *)(v8 + 40) = a2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1858E6388;
  *(void *)(v9 + 24) = v8;
  uint64_t v13[4] = sub_1853BE6D4;
  void v13[5] = v9;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1107296256;
  void v13[2] = sub_1853BE46C;
  void v13[3] = &block_descriptor_46_0;
  uint64_t v10 = _Block_copy(v13);
  id v11 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  UIMM_HFR(v10);
  _Block_release(v10);
  swift_release();
  LOBYTE(v_Block_object_dispose(&STACK[0x478], 8) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v8) {
    __break(1u);
  }
  return result;
}

void sub_1858E4318(char *a1, uint64_t a2, double a3, double a4)
{
  v11[0] = 0x3FF0000000000000;
  v11[1] = 0;
  uint64_t v7 = a2 + 16;
  long long v11[2] = 0;
  void v11[3] = 0x3FF0000000000000;
  void v11[4] = 0;
  void v11[5] = 0;
  objc_msgSend(a1, sel_setTransform_, v11);
  objc_msgSend(a1, sel_setCenter_, a3, a4);
  uint64_t v8 = &a1[OBJC_IVAR____UIMagicMorphView_overrideBounds];
  sub_1858E63A8((uint64_t)&a1[OBJC_IVAR____UIMagicMorphView_overrideBounds], (uint64_t)v11);
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[32] = 1;
  sub_185A5E390((uint64_t)v11);
  objc_msgSend(a1, sel_layoutIfNeeded);
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x18C109380](v7);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    sub_1858E1578(1u, 0);
  }
}

uint64_t sub_1858E4410(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x18C109380](v5);
  if (result)
  {
    uint64_t v7 = (char *)result;
    uint64_t v8 = *(void **)(result + OBJC_IVAR____UIZoomTransitionController_morphInteractionAssertion);
    *(void *)(result + OBJC_IVAR____UIZoomTransitionController_morphInteractionAssertion) = 0;

    sub_1858E1DE0(a4);
    uint64_t v9 = (char *)*(id *)&v7[OBJC_IVAR____UIZoomTransitionController_morphAnimation];
    id v10 = sub_18597C5F0();
    objc_msgSend(v10, sel_setPaused_, 1);

    objc_msgSend(*(id *)&v9[OBJC_IVAR____UIMagicMorphAnimation_morphView], sel_removeFromSuperview);
    sub_185A60998();
    id v11 = *(void **)&v9[OBJC_IVAR____UIMagicMorphAnimation_animationContainerView];
    objc_msgSend(v11, sel_removeFromSuperview);
    long long v25 = 0x3FF0000000000000uLL;
    *(void *)&long long v26 = 0;
    *((void *)&v26 + 1) = 0x3FF0000000000000;
    long long v27 = 0uLL;
    objc_msgSend(v11, sel_setTransform_, &v25);
    id v12 = objc_msgSend(v11, sel_layer);
    long long v13 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
    long long v25 = *MEMORY[0x1E4F39B10];
    long long v26 = v13;
    long long v14 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
    long long v27 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
    long long v28 = v14;
    long long v15 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
    long long v29 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
    long long v30 = v15;
    long long v16 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
    long long v31 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
    long long v32 = v16;
    objc_msgSend(v12, sel_setSublayerTransform_, &v25);

    id v17 = &v9[OBJC_IVAR____UIMagicMorphAnimation_animationItems];
    swift_beginAccess();
    uint64_t v18 = *(void *)v17;
    if (*(void *)v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = sub_186A1F67C();
      uint64_t v19 = result;
      if (result) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v19)
      {
LABEL_4:
        if (v19 < 1)
        {
          __break(1u);
          return result;
        }
        for (uint64_t i = 0; i != v19; ++i)
        {
          if ((v18 & 0xC000000000000001) != 0) {
            double v21 = (char *)MEMORY[0x18C102240](i, v18);
          }
          else {
            double v21 = (char *)*(id *)(v18 + 8 * i + 32);
          }
          double v22 = v21;
          double v23 = *(void **)&v21[OBJC_IVAR____TtCC5UIKit22_UIMagicMorphAnimationP33_27010C79BBE8436D7F6A5CD454B184E54Item_reparentingView];
          if (v23)
          {
            id v24 = v23;
            objc_msgSend(v24, sel_removeFromSuperview);
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    *(void *)id v17 = MEMORY[0x1E4FBC860];

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for _UIZoomTransitionController(uint64_t a1)
{
  return sub_1853B985C(a1, &qword_1E8FB1DF0);
}

uint64_t sub_1858E471C(char a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1858E6298;
  *(void *)(v5 + 24) = v4;
  void v8[4] = sub_1853B59A0;
  v8[5] = v5;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  void v8[2] = sub_1853BE46C;
  v8[3] = &block_descriptor_36_0;
  long long v6 = _Block_copy(v8);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  UIMM_HFR(v6);
  _Block_release(v6);
  swift_release();
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v4) {
    __break(1u);
  }
  return result;
}

void sub_1858E4870(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + OBJC_IVAR____UIZoomTransitionController_activeTransitionContext);
  if (v3)
  {
    uint64_t v7 = self;
    uint64_t v8 = swift_allocObject();
    *(unsigned char *)(v8 + 16) = a1 & 1;
    *(void *)(v8 + 24) = v3;
    uint64_t v19 = sub_1858E627C;
    uint64_t v20 = v8;
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 1107296256;
    id v17 = sub_1856A95EC;
    uint64_t v18 = &block_descriptor_18;
    uint64_t v9 = _Block_copy(&v15);
    swift_unknownObjectRetain_n();
    swift_release();
    uint64_t v19 = (uint64_t (*)())signpost_c2_removePresentationModifier_end;
    uint64_t v20 = 0;
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 1107296256;
    id v17 = sub_185A28F74;
    uint64_t v18 = &block_descriptor_21;
    id v10 = _Block_copy(&v15);
    objc_msgSend(v7, sel__animateUsingSpringBehavior_tracking_animations_completion_, a2, 0, v9, v10);
    _Block_release(v10);
    _Block_release(v9);
    uint64_t v11 = OBJC_IVAR____UIZoomTransitionController_shimPropertyAnimator;
    uint64_t v12 = *(void *)(a3 + OBJC_IVAR____UIZoomTransitionController_shimPropertyAnimator);
    if (v12)
    {
      *(unsigned char *)(v12 + OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__isReversed) = (a1 & 1) == 0;
      long long v13 = *(void **)(a3 + v11);
      if (v13)
      {
        long long v14 = v13;
        sub_1858E4A5C(a2, v14);
        swift_unknownObjectRelease();

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_1858E4A5C(uint64_t result, unsigned char *a2)
{
  uint64_t v2 = *(void *)&a2[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__state];
  if (v2) {
    BOOL v3 = v2 == 2;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (v2 == 1)
    {
      uint64_t v5 = OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__isRunning;
      if ((a2[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__isRunning] & 1) == 0)
      {
        long long v6 = (void *)result;
        uint64_t v7 = a2[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__isReversed];
        *(void *)&a2[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator_completionPosition] = v7;
        double v8 = 1.0;
        if (v7) {
          double v8 = 0.0;
        }
        *(double *)&a2[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__fractionComplete] = v8;
        sub_185AF2020();
        a2[v5] = 1;
        *(void *)&a2[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator_springBehaviorWhenContinued] = v6;
        swift_unknownObjectRelease();
        uint64_t v9 = swift_allocObject();
        *(void *)(v9 + 16) = a2;
        uint64_t v10 = swift_allocObject();
        *(void *)(v10 + 16) = a2;
        uint64_t v11 = a2;
        id v12 = v6;
        sub_185AF1B58((uint64_t)sub_1858E6288, v9, (uint64_t)sub_1858E6290, v10, 1.0);
        swift_release();
        return swift_release();
      }
    }
    else
    {
      uint64_t result = sub_186A1F60C();
      __break(1u);
    }
  }
  return result;
}

void sub_1858E4C00(void *a1, id a2)
{
  objc_msgSend(a2, sel_bounds);
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  objc_msgSend(a2, sel__cropInsets);
  double rect = UIRectInset(v5, v7, v9, v11, v12, v15, v14, v13);
  CGFloat v17 = v16;
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  objc_msgSend(a1, sel_bounds);
  CGFloat v23 = v22;
  CGFloat v25 = v24;
  CGFloat v27 = v26;
  CGFloat v29 = v28;
  v36.origin.double x = rect;
  v36.origin.double y = v17;
  v36.size.CGFloat width = v19;
  v36.size.CGFloat height = v21;
  double Width = CGRectGetWidth(v36);
  v37.origin.double x = v23;
  v37.origin.double y = v25;
  v37.size.CGFloat width = v27;
  v37.size.CGFloat height = v29;
  double v31 = vabdd_f64(Width, CGRectGetWidth(v37));
  v38.origin.double x = v23;
  v38.origin.double y = v25;
  v38.size.CGFloat width = v27;
  v38.size.CGFloat height = v29;
  double v34 = v31 / CGRectGetWidth(v38);
  v39.origin.double x = rect;
  v39.origin.double y = v17;
  v39.size.CGFloat width = v19;
  v39.size.CGFloat height = v21;
  double Height = CGRectGetHeight(v39);
  v40.origin.double x = v23;
  v40.origin.double y = v25;
  v40.size.CGFloat width = v27;
  v40.size.CGFloat height = v29;
  double v33 = vabdd_f64(Height, CGRectGetHeight(v40));
  v41.origin.double x = v23;
  v41.origin.double y = v25;
  v41.size.CGFloat width = v27;
  v41.size.CGFloat height = v29;
  if (v33 / CGRectGetHeight(v41) >= v34)
  {
    v44.size.CGFloat height = v21;
    v44.origin.double x = rect;
    v44.origin.double y = v17;
    v44.size.CGFloat width = v19;
    CGRectGetWidth(v44);
    objc_msgSend(a1, sel_bounds);
    CGRectGetWidth(v45);
  }
  else
  {
    v42.size.CGFloat height = v21;
    v42.origin.double x = rect;
    v42.origin.double y = v17;
    v42.size.CGFloat width = v19;
    CGRectGetHeight(v42);
    objc_msgSend(a1, sel_bounds);
    CGRectGetHeight(v43);
  }
}

void sub_1858E4DE8()
{
  unsigned int v1 = objc_msgSend(v0, sel_isZoomingIn);
  type metadata accessor for _UIZoomTransitionSettingsDomain();
  ObjCClassFromMetadatdouble a = (void *)swift_getObjCClassFromMetadata();
  if (v1)
  {
    v9.receiver = ObjCClassFromMetadata;
    v9.super_class = (Class)&OBJC_METACLASS____TtC5UIKit31_UIZoomTransitionSettingsDomain;
    id v3 = objc_msgSendSuper2(&v9, sel_rootSettings);
    if (v3)
    {
      double v4 = v3;
      double v5 = &OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_zoomIn;
LABEL_6:
      type metadata accessor for _UIZoomTransitionSpec();
      double v7 = (char *)*(id *)(swift_dynamicCastClassUnconditional() + *v5);

      id v8 = *(id *)&v7[OBJC_IVAR____TtC5UIKit30_UIZoomTransitionAnimationSpec_general];
      objc_msgSend(v8, sel_response);

      return;
    }
    __break(1u);
  }
  else
  {
    v10.receiver = ObjCClassFromMetadata;
    v10.super_class = (Class)&OBJC_METACLASS____TtC5UIKit31_UIZoomTransitionSettingsDomain;
    id v6 = objc_msgSendSuper2(&v10, sel_rootSettings);
    if (v6)
    {
      double v4 = v6;
      double v5 = &OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_zoomOut;
      goto LABEL_6;
    }
  }
  __break(1u);
}

void sub_1858E4F10()
{
  unsigned int v1 = v0;
  uint64_t v2 = *(char **)&v0[OBJC_IVAR____UIZoomTransitionController_morphAnimation];
  id v3 = (objc_class *)type metadata accessor for _UIMagicMorphAnimation.InteractionAssertion();
  id v4 = objc_allocWithZone(v3);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  double v5 = *(void **)&v2[OBJC_IVAR____UIMagicMorphAnimation_groupCompletion];
  id v6 = v2;
  objc_msgSend(v5, sel_increment);
  id v7 = sub_18597C5F0();
  objc_msgSend(v7, sel_setPaused_, 1);

  v65.receiver = v4;
  v65.super_class = v3;
  id v8 = objc_msgSendSuper2(&v65, sel_init);

  objc_super v9 = *(void **)&v1[OBJC_IVAR____UIZoomTransitionController_morphInteractionAssertion];
  *(void *)&v1[OBJC_IVAR____UIZoomTransitionController_morphInteractionAssertion] = v8;

  id v10 = objc_msgSend(v1, sel_owningViewController);
  if (v10)
  {
    double v11 = v10;
    id v12 = objc_msgSend(v1, sel_clientTransition);
    id v13 = objc_msgSend(v12, sel__options);

    LOBYTE(v12) = objc_msgSend(v13, sel__popPreemptsPushInSwiftUIEnabled);
    if ((v12 & 1) == 0)
    {
      swift_getObjectType();
      ObjCClassFromMetadatdouble a = swift_getObjCClassFromMetadata();
      id v16 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
      id v17 = objc_msgSend(v16, sel_bundlePath);

      uint64_t v18 = sub_186A1E95C();
      uint64_t v20 = v19;

      *(void *)&long long aBlock = v18;
      *((void *)&aBlock + 1) = v20;
      *(void *)&long long v57 = 0x49557466697753;
      *((void *)&v57 + 1) = 0xE700000000000000;
      sub_1858E64F4();
      char v14 = sub_186A1F1BC();
      swift_bridgeObjectRelease();

      goto LABEL_6;
    }
  }
  char v14 = 0;
LABEL_6:
  uint64_t v21 = OBJC_IVAR____UIZoomTransitionController_activeTransitionContext;
  if (*(void *)&v1[OBJC_IVAR____UIZoomTransitionController_activeTransitionContext]
    && v14 & 1 | ((objc_msgSend(v1, sel_isZoomingIn) & 1) == 0))
  {
    double v22 = *(void **)&v1[v21];
    if (v22) {
      objc_msgSend(v22, sel_pauseInteractiveTransition);
    }
    CGFloat v23 = *(void **)&v1[OBJC_IVAR____UIZoomTransitionController_shimPropertyAnimator];
    if (v23)
    {
      id v24 = v23;
      sub_185AF0890();

      CGFloat v25 = *(void **)&v6[OBJC_IVAR____UIMagicMorphAnimation_morphView];
      swift_beginAccess();
      double v26 = v25;
      CGFloat v27 = (void *)sub_185A02074(0xD00000000000001ELL, 0x8000000186B9F440);
      swift_endAccess();

      double v28 = *(void **)&v1[OBJC_IVAR____UIZoomTransitionController_foregroundView];
      if (!v28
        || (CGFloat v29 = &v26[OBJC_IVAR____UIMagicMorphView_overrideCornerRadii],
            (v26[OBJC_IVAR____UIMagicMorphView_overrideCornerRadii + 64] & 1) != 0))
      {

        return;
      }
      long long v54 = *((_OWORD *)v29 + 2);
      long long v55 = *((_OWORD *)v29 + 3);
      long long v52 = *(_OWORD *)v29;
      long long v53 = *((_OWORD *)v29 + 1);
      uint64_t v34 = qword_1E8FAF328;
      id v35 = v28;
      if (v34 != -1) {
        swift_once();
      }
      long long aBlock = v52;
      long long v62 = v53;
      long long v63 = v54;
      long long v64 = v55;
      long long v57 = xmmword_1E8FD5740;
      long long v58 = *(_OWORD *)&qword_1E8FD5750;
      long long v59 = xmmword_1E8FD5760;
      long long v60 = *(_OWORD *)&qword_1E8FD5770;
      if (!CACornerRadiiEqualToRadii())
      {

        return;
      }
      objc_msgSend(v35, sel__intersectedSceneCornerRadii);
      long long v36 = aBlock;
      long long v37 = v62;
      long long v38 = v63;
      long long v39 = v64;
      CGRect v40 = self;
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = v26;
      *(_OWORD *)(v41 + 24) = v36;
      *(_OWORD *)(v41 + 40) = v37;
      *(_OWORD *)(v41 + 56) = v38;
      *(_OWORD *)(v41 + 72) = v39;
      *(void *)&long long v63 = sub_1858E64DC;
      *((void *)&v63 + 1) = v41;
      *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v62 = sub_1856A95EC;
      *((void *)&v62 + 1) = &block_descriptor_79;
      CGRect v42 = _Block_copy(&aBlock);
      CGRect v43 = v26;
      swift_release();
      objc_msgSend(v40, sel__performWithoutRetargetingAnimations_, v42);
      _Block_release(v42);
      type metadata accessor for _UIZoomTransitionSettingsDomain();
      v56.receiver = (id)swift_getObjCClassFromMetadata();
      v56.super_class = (Class)&OBJC_METACLASS____TtC5UIKit31_UIZoomTransitionSettingsDomain;
      id v44 = objc_msgSendSuper2(&v56, sel_rootSettings);
      if (v44)
      {
        CGRect v45 = v44;
        type metadata accessor for _UIZoomTransitionSpec();
        double v46 = (char *)objc_retain(*(id *)(swift_dynamicCastClassUnconditional()
                                        + OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_zoomOut));

        id v47 = *(id *)&v46[OBJC_IVAR____TtC5UIKit30_UIZoomTransitionAnimationSpec_cornerRadiusAdjustment];
        uint64_t v48 = swift_allocObject();
        *(void *)(v48 + 16) = v43;
        *(_OWORD *)(v48 + 24) = v36;
        *(_OWORD *)(v48 + 40) = v37;
        *(_OWORD *)(v48 + 56) = v38;
        *(_OWORD *)(v48 + 72) = v39;
        *(void *)&long long v63 = sub_1858E64E8;
        *((void *)&v63 + 1) = v48;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v62 = sub_1856A95EC;
        *((void *)&v62 + 1) = &block_descriptor_85;
        double v49 = _Block_copy(&aBlock);
        uint64_t v50 = v43;
        swift_release();
        *(void *)&long long v63 = j__signpost_c2_removePresentationModifier_end;
        *((void *)&v63 + 1) = 0;
        *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v62 = sub_185A28F74;
        *((void *)&v62 + 1) = &block_descriptor_88_0;
        CGFloat v51 = _Block_copy(&aBlock);
        objc_msgSend(v40, sel__animateUsingSpringBehavior_tracking_animations_completion_, v47, 0, v49, v51);

        _Block_release(v51);
        _Block_release(v49);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    id v30 = objc_msgSend(v1, sel_owningViewController);
    if (v30)
    {
      double v31 = v30;
      uint64_t v32 = OBJC_IVAR____UIZoomTransitionController_isPreempting;
      v1[OBJC_IVAR____UIZoomTransitionController_isPreempting] = 1;
      if (v1[OBJC_IVAR____UIZoomTransitionController_isForNavigation] == 1)
      {
        id v33 = objc_msgSend(v30, sel_navigationController);
      }
      else
      {
        objc_msgSend(v30, sel_dismissViewControllerAnimated_completion_, 1, 0);
        id v33 = objc_msgSend(v31, sel_activePresentationController);
        objc_msgSend(v33, sel__sendDismissalsAsNeeded);
      }

      v1[v32] = 0;
    }
  }
}

void sub_1858E5664(void *a1)
{
  uint64_t v2 = *(void **)&v1[OBJC_IVAR____UIZoomTransitionController_activeTransitionContext];
  if (v2)
  {
    id v3 = v1;
    id v4 = *(void **)&v1[OBJC_IVAR____UIZoomTransitionController_foregroundView];
    if (v4)
    {
      swift_unknownObjectRetain();
      id v6 = v4;
      unsigned int v7 = objc_msgSend(v3, sel_isZoomingIn);
      objc_msgSend(a1, sel_progressToMinScale);
      if (v7) {
        double v9 = 1.0 - v8;
      }
      else {
        double v9 = v8;
      }
      objc_msgSend(v2, sel_updateInteractiveTransition_, v9);
      id v10 = *(char **)&v3[OBJC_IVAR____UIZoomTransitionController_shimPropertyAnimator];
      if (v10)
      {
        *(double *)&v10[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__fractionComplete] = v9;
        if (*(void *)&v10[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__state] == 1
          && (v10[OBJC_IVAR____TtCE5UIKitCSo6UIView22HybridPropertyAnimator__isRunning] & 1) == 0)
        {
          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 16) = v10;
          id v12 = v10;
          sub_185AF1B58((uint64_t)sub_1858E6438, v11, 0, 0, 1.0);

          swift_release();
        }
        id v13 = *(void **)(*(void *)&v3[OBJC_IVAR____UIZoomTransitionController_morphAnimation]
                       + OBJC_IVAR____UIMagicMorphAnimation_morphView);
        id v14 = objc_allocWithZone((Class)UIViewSpringAnimationBehaviorSettings);
        id v15 = v13;
        id v16 = objc_msgSend(v14, sel_init);
        objc_msgSend(a1, sel_dampingRatio);
        objc_msgSend(v16, sel_setDampingRatio_);
        objc_msgSend(a1, sel_response);
        objc_msgSend(v16, sel_setResponse_);
        objc_msgSend(a1, sel_dampingRatio);
        objc_msgSend(v16, sel_setTrackingDampingRatio_);
        objc_msgSend(a1, sel_response);
        objc_msgSend(v16, sel_setTrackingResponse_);
        objc_msgSend(v16, sel_setSmoothingAndProjectionEnabled_, 0);
        id v26 = self;
        id v17 = v16;
        id v18 = objc_msgSend(a1, sel_isTracking);
        char v19 = v3[OBJC_IVAR____UIZoomTransitionController_style];
        uint64_t v20 = swift_allocObject();
        *(void *)(v20 + 16) = a1;
        *(unsigned char *)(v20 + 24) = v19;
        *(void *)(v20 + 32) = v6;
        *(void *)(v20 + 40) = v2;
        *(void *)(v20 + 4_Block_object_dispose(&STACK[0x478], 8) = v15;
        *(double *)(v20 + 56) = v9;
        double v31 = sub_1858E6420;
        uint64_t v32 = v20;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v28 = 1107296256;
        CGFloat v29 = sub_1856A95EC;
        id v30 = &block_descriptor_57;
        uint64_t v21 = _Block_copy(&aBlock);
        swift_unknownObjectRetain();
        id v22 = v6;
        id v23 = v15;
        id v24 = a1;
        swift_release();
        double v31 = (uint64_t (*)())j__signpost_c2_removePresentationModifier_end;
        uint64_t v32 = 0;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v28 = 1107296256;
        CGFloat v29 = sub_185A28F74;
        id v30 = &block_descriptor_60;
        CGFloat v25 = _Block_copy(&aBlock);
        objc_msgSend(v26, sel__animateUsingSpringBehavior_tracking_animations_completion_, v17, v18, v21, v25);
        _Block_release(v25);
        _Block_release(v21);
        swift_unknownObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void sub_1858E5A28()
{
  unsigned int v1 = v0;
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____UIZoomTransitionController_activeTransitionContext];
  if (v2)
  {
    type metadata accessor for _UIZoomTransitionSettingsDomain();
    v39.receiver = (id)swift_getObjCClassFromMetadata();
    v39.super_class = (Class)&OBJC_METACLASS____TtC5UIKit31_UIZoomTransitionSettingsDomain;
    swift_unknownObjectRetain();
    id v3 = objc_msgSendSuper2(&v39, sel_rootSettings);
    if (v3)
    {
      id v4 = v3;
      type metadata accessor for _UIZoomTransitionSpec();
      double v5 = (char *)objc_retain(*(id *)(swift_dynamicCastClassUnconditional()
                                     + OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_zoomOutInteractive));

      uint64_t v6 = OBJC_IVAR____TtC5UIKit30_UIZoomTransitionAnimationSpec_general;
      id v7 = *(id *)&v5[OBJC_IVAR____TtC5UIKit30_UIZoomTransitionAnimationSpec_general];
      if (objc_msgSend(v1, sel_isZoomingIn)) {
        double v8 = @"UITransitionContextFromViewController";
      }
      else {
        double v8 = @"UITransitionContextToViewController";
      }
      double v9 = v8;
      if (objc_msgSend(v1, sel_isZoomingIn)) {
        id v10 = @"UITransitionContextToViewController";
      }
      else {
        id v10 = @"UITransitionContextFromViewController";
      }
      uint64_t v11 = v10;
      id v12 = objc_msgSend(v2, sel_viewControllerForKey_, v9);
      if (v12)
      {
        id v13 = v12;
        long long v37 = v9;
        long long v38 = v7;
        long long v36 = v11;
        id v14 = objc_msgSend(v2, sel_viewControllerForKey_, v11);
        if (v14)
        {
          id v15 = v14;
          id v35 = v13;
          id v16 = objc_msgSend(self, sel__contextWithSource_zoomed_, v13, v14);
          id v17 = objc_msgSend(v2, sel_containerView);
          uint64_t v34 = v16;
          id v33 = sub_1858DFD6C(v16, v17, 0);

          sub_1858DE2C4(0);
          id v18 = *(void **)&v5[v6];
          uint64_t v19 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v20 = swift_allocObject();
          swift_unknownObjectWeakInit();
          uint64_t v21 = swift_allocObject();
          *(void *)(v21 + 16) = v20;
          *(void *)(v21 + 24) = v2;
          swift_unknownObjectRetain();
          id v22 = v18;
          swift_retain();
          swift_retain();
          sub_18597ABEC(v18, 0, (uint64_t)sub_1858E6410, v19, (uint64_t)sub_1858E6870, v21);

          swift_release_n();
          swift_release();
          swift_release();
          id v23 = objc_msgSend(v15, sel__showcaseView);
          if (v23)
          {
            id v24 = v23;
            id v25 = objc_msgSend(v23, sel_window);

            if (v25)
            {
LABEL_15:
              sub_1858E4C00(v33, v24);
              double v27 = v26;

              uint64_t v28 = v5;
              sub_1858E11C8(v33, (uint64_t)v5, 0, 0, v27);

              CGFloat v29 = *(void **)&v1[OBJC_IVAR____UIZoomTransitionController_morphInteractionAssertion];
              *(void *)&v1[OBJC_IVAR____UIZoomTransitionController_morphInteractionAssertion] = 0;

              char v30 = objc_msgSend(v1, sel_isZoomingIn) ^ 1;
              id v31 = v38;
              sub_1858E4870(v30, (uint64_t)v31, (uint64_t)v1);
              swift_unknownObjectRelease();

              return;
            }
          }
          id v24 = objc_msgSend(v15, sel_view, v33, v34);
          if (v24) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v32 = *(void **)&v0[OBJC_IVAR____UIZoomTransitionController_morphInteractionAssertion];
  *(void *)&v0[OBJC_IVAR____UIZoomTransitionController_morphInteractionAssertion] = 0;
}

void sub_1858E5E98(double a1, double a2)
{
  uint64_t v3 = *(void *)&v2[OBJC_IVAR____UIZoomTransitionController_activeTransitionContext];
  if (v3)
  {
    uint64_t v6 = *(void **)(*(void *)&v2[OBJC_IVAR____UIZoomTransitionController_morphAnimation]
                  + OBJC_IVAR____UIMagicMorphAnimation_morphView);
    type metadata accessor for _UIZoomTransitionSettingsDomain();
    v29.receiver = (id)swift_getObjCClassFromMetadata();
    v29.super_class = (Class)&OBJC_METACLASS____TtC5UIKit31_UIZoomTransitionSettingsDomain;
    id v7 = v6;
    swift_unknownObjectRetain();
    id v8 = objc_msgSendSuper2(&v29, sel_rootSettings);
    if (v8)
    {
      double v9 = v8;
      type metadata accessor for _UIZoomTransitionSpec();
      id v10 = (char *)objc_retain(*(id *)(swift_dynamicCastClassUnconditional()
                                      + OBJC_IVAR____TtC5UIKit21_UIZoomTransitionSpec_cancelInteractive));

      id v11 = *(id *)&v10[OBJC_IVAR____TtC5UIKit30_UIZoomTransitionAnimationSpec_position];
      id v12 = self;
      uint64_t v13 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v7;
      *(double *)(v14 + 24) = a1;
      *(double *)(v14 + 32) = a2;
      *(void *)(v14 + 40) = v13;
      double v27 = sub_1858E6228;
      uint64_t v28 = v14;
      uint64_t v23 = MEMORY[0x1E4F143A8];
      uint64_t v24 = 1107296256;
      id v25 = sub_1856A95EC;
      double v26 = &block_descriptor_2;
      id v15 = _Block_copy(&v23);
      id v16 = v7;
      id v17 = v11;
      swift_release();
      uint64_t v18 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = v3;
      double v27 = sub_1858E623C;
      uint64_t v28 = v19;
      uint64_t v23 = MEMORY[0x1E4F143A8];
      uint64_t v24 = 1107296256;
      id v25 = sub_185A28F74;
      double v26 = &block_descriptor_12;
      uint64_t v20 = _Block_copy(&v23);
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(v12, sel__animateUsingSpringBehavior_tracking_animations_completion_, v17, 0, v15, v20);
      _Block_release(v20);
      _Block_release(v15);

      LOBYTE(v12) = objc_msgSend(v2, sel_isZoomingIn);
      id v21 = v17;
      sub_1858E4870((char)v12, (uint64_t)v21, (uint64_t)v2);
      swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    id v22 = *(void **)&v2[OBJC_IVAR____UIZoomTransitionController_morphInteractionAssertion];
    *(void *)&v2[OBJC_IVAR____UIZoomTransitionController_morphInteractionAssertion] = 0;
  }
}

uint64_t sub_1858E61EC()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1858E6228()
{
  return sub_1858E41AC(*(void **)(v0 + 16), *(void *)(v0 + 40), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_1858E623C(uint64_t a1, uint64_t a2)
{
  return sub_1858E4410(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_1858E6244()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1858E627C()
{
  return sub_1858E471C(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1858E6288()
{
  return sub_185AF2E44(*(void *)(v0 + 16));
}

uint64_t sub_1858E6290()
{
  return sub_185AF2EF8(*(void *)(v0 + 16));
}

id sub_1858E6298()
{
  if (*(unsigned char *)(v0 + 16)) {
    unsigned int v1 = &selRef_finishInteractiveTransition;
  }
  else {
    unsigned int v1 = &selRef_cancelInteractiveTransition;
  }
  return [*(id *)(v0 + 24) *v1];
}

uint64_t sub_1858E62C0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void UIMM_HFR(void *a1)
{
  id v1 = a1;
  CAFrameRateRange v3 = CAFrameRateRangeMake(80.0, 120.0, 120.0);
  +[UIView _modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:](UIView, "_modifyAnimationsWithPreferredFrameRateRange:updateReason:animations:", 1048632, v1, *(double *)&v3.minimum, *(double *)&v3.maximum, *(double *)&v3.preferred);
}

uint64_t objectdestroy_4Tm()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void sub_1858E6388()
{
  sub_1858E4318(*(char **)(v0 + 16), *(void *)(v0 + 40), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_1858E6398()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1858E63A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAF270);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1858E6410()
{
  sub_1858E4094(v0);
}

uint64_t sub_1858E6420()
{
  return sub_1858E64AC((uint64_t (*)(void, void, void, void, void, double))sub_1858E3B2C);
}

uint64_t sub_1858E6438(double a1)
{
  return sub_185AF2340(*(void *)(v1 + 16), a1);
}

uint64_t objectdestroy_53Tm()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1858E6494()
{
  return sub_1858E64AC((uint64_t (*)(void, void, void, void, void, double))sub_1858E3CB8);
}

uint64_t sub_1858E64AC(uint64_t (*a1)(void, void, void, void, void, double))
{
  return a1(*(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t sub_1858E64CC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1858E64DC()
{
  sub_1858E3704(*(char **)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_1858E64E8()
{
  return sub_1858E38CC(*(void **)(v0 + 16), (_OWORD *)(v0 + 24));
}

unint64_t sub_1858E64F4()
{
  unint64_t result = qword_1E8FAEF28;
  if (!qword_1E8FAEF28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FAEF28);
  }
  return result;
}

uint64_t sub_1858E6548()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void CACornerRadiiMake(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a4;
  a1[1] = a4;
  a1[2] = a5;
  a1[3] = a5;
  a1[4] = a3;
  a1[5] = a3;
  a1[6] = a2;
  a1[7] = a2;
}

uint64_t sub_1858E656C()
{
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 81, 7);
}

void sub_1858E65D4()
{
  sub_1858DF644(*(char **)(v0 + 16), *(SEL **)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(id *)(v0 + 56), *(void **)(v0 + 64), *(void ***)(v0 + 72), *(unsigned char *)(v0 + 80));
}

uint64_t sub_1858E660C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1858E661C()
{
  return MEMORY[0x1F4186498](v0, 56, 7);
}

void sub_1858E666C()
{
  sub_1858E0860(*(unsigned char **)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(double **)(v0 + 48));
}

uint64_t sub_1858E667C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1858E668C()
{
  sub_1858E1B70(v0);
}

uint64_t sub_1858E6694()
{
  swift_unknownObjectUnownedDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1858E66CC()
{
  swift_release();
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1858E670C()
{
  return sub_185AF26B0(v0[2], v0[3], v0[4]);
}

uint64_t sub_1858E6718()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1858E6750()
{
}

uint64_t sub_1858E6774()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1858E6784()
{
  sub_1858E21BC(v0);
}

uint64_t sub_1858E678C()
{
  return MEMORY[0x1F4186498](v0, 88, 7);
}

uint64_t sub_1858E67C4()
{
  return sub_1858E2528(*(void **)(v0 + 16), (_OWORD *)(v0 + 24));
}

void sub_1858E67D0()
{
  sub_1858E3A30(*(void *)(v0 + 16), (double *)(v0 + 24));
}

uint64_t sub_1858E67F0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1858E6800()
{
  sub_1858E2300(v0);
}

void sub_1858E6808()
{
  sub_1858E1D7C(v0);
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1858E6854()
{
  sub_1858E40F0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t UIWindow._intelligenceBaseClass.getter()
{
  return sub_1858E6954();
}

unint64_t sub_1858E6954()
{
  unint64_t result = qword_1E8FAF3D8;
  if (!qword_1E8FAF3D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E8FAF3D8);
  }
  return result;
}

uint64_t _UIIntelligenceLightSourceView.configuration.getter@<X0>(unsigned char *a1@<X8>)
{
  CAFrameRateRange v3 = (unsigned char *)(v1 + OBJC_IVAR____UIIntelligenceLightSourceView_configuration);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t _UIIntelligenceLightSourceView.configuration.setter(char *a1)
{
  char v2 = *a1;
  CAFrameRateRange v3 = (unsigned char *)(v1 + OBJC_IVAR____UIIntelligenceLightSourceView_configuration);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = v2;
  return result;
}

uint64_t (*_UIIntelligenceLightSourceView.configuration.modify())()
{
  return j__swift_endAccess;
}

id sub_1858E6A98(char a1)
{
  *(unsigned char *)(v1 + OBJC_IVAR____UIIntelligenceLightSourceView_configuration) = a1;
  v23.super_class = (Class)_UIIntelligenceLightSourceView;
  id v3 = objc_msgSendSuper2(&v23, sel_initWithFrame_);
  id v4 = objc_allocWithZone((Class)_UIIntelligenceSystemLightView);
  id v5 = v3;
  id v6 = objc_msgSend(v4, sel_initWithFrame_preferringAudioReactivity_, a1 & 1, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v6, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v5, sel_addSubview_, v6);
  id v7 = self;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255AD0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_186B83AE0;
  id v9 = objc_msgSend(v6, sel_widthAnchor);
  id v10 = objc_msgSend(v5, sel_widthAnchor);
  id v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(void *)(v8 + 32) = v11;
  id v12 = objc_msgSend(v6, sel_heightAnchor);
  id v13 = objc_msgSend(v5, sel_heightAnchor);
  id v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v13);

  *(void *)(v8 + 40) = v14;
  id v15 = objc_msgSend(v6, sel_centerXAnchor);
  id v16 = objc_msgSend(v5, sel_centerXAnchor);
  id v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

  *(void *)(v8 + 4_Block_object_dispose(&STACK[0x478], 8) = v17;
  id v18 = objc_msgSend(v6, sel_centerYAnchor);
  id v19 = objc_msgSend(v5, sel_centerYAnchor);
  id v20 = objc_msgSend(v18, sel_constraintEqualToAnchor_, v19);

  *(void *)(v8 + 56) = v20;
  sub_186A1EB5C();
  sub_1853B985C(0, &qword_1E8FB1EB0);
  id v21 = (void *)sub_186A1EB1C();
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_activateConstraints_, v21);

  return v5;
}

UIKit::_UIIntelligenceLightSourceConfiguration __swiftcall _UIIntelligenceLightSourceConfiguration.init(prefersAudioReactivity:)(UIKit::_UIIntelligenceLightSourceConfiguration prefersAudioReactivity)
{
  v1->prefersAudioReactivitdouble y = prefersAudioReactivity.prefersAudioReactivity;
  return prefersAudioReactivity;
}

void __swiftcall _UIIntelligenceLightSourceView.init(frame:configuration:)(_UIIntelligenceLightSourceView_optional *__return_ptr retstr, __C::CGRect frame, UIKit::_UIIntelligenceLightSourceConfiguration_optional configuration)
{
  uint64_t v3 = *(unsigned char *)configuration.value.prefersAudioReactivity & 1;
  id v4 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithFrame_preferAudioReactivity_, v3, frame.origin.x, frame.origin.y, frame.size.width, frame.size.height)+ OBJC_IVAR____UIIntelligenceLightSourceView_configuration;
  swift_beginAccess();
  *id v4 = v3;
}

void __swiftcall _UIIntelligenceLightSourceView.init(coder:)(_UIIntelligenceLightSourceView_optional *__return_ptr retstr, NSCoder coder)
{
}

void _UIIntelligenceLightSourceView.init(coder:)()
{
}

void __swiftcall _UIIntelligenceLightSourceView.init(frame:)(_UIIntelligenceLightSourceView *__return_ptr retstr, __C::CGRect frame)
{
  double height = frame.size.height;
  double width = frame.size.width;
  double y = frame.origin.y;
  double x = frame.origin.x;
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  objc_msgSend(v6, sel_initWithFrame_, x, y, width, height);
}

void _UIIntelligenceLightSourceView.init(frame:)()
{
}

uint64_t _UIIntelligenceLightSourceConfiguration.prefersAudioReactivity.getter()
{
  return *v0;
}

uint64_t _UIIntelligenceLightSourceConfiguration.prefersAudioReactivity.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*_UIIntelligenceLightSourceConfiguration.prefersAudioReactivity.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t _UIIntelligenceLightSourceConfiguration.hash(into:)()
{
  return sub_186A1FA0C();
}

BOOL static _UIIntelligenceLightSourceConfiguration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1858E7168()
{
  return sub_186A1FA4C();
}

uint64_t sub_1858E71AC()
{
  return sub_186A1F9FC();
}

uint64_t sub_1858E71D4()
{
  return sub_186A1FA4C();
}

unint64_t sub_1858E7214()
{
  return 0xD000000000000016;
}

uint64_t sub_1858E7230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1858E7D60(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1858E725C()
{
  return 0;
}

void sub_1858E7268(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1858E7274(uint64_t a1)
{
  unint64_t v2 = sub_1858E7420();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1858E72B0(uint64_t a1)
{
  unint64_t v2 = sub_1858E7420();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t _UIIntelligenceLightSourceConfiguration.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB1E60);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_0Tm(a1, a1[3]);
  sub_1858E7420();
  sub_186A1FB3C();
  sub_186A1F77C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1858E7420()
{
  unint64_t result = qword_1E8FB1E68;
  if (!qword_1E8FB1E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FB1E68);
  }
  return result;
}

uint64_t _UIIntelligenceLightSourceConfiguration.hashValue.getter()
{
  return sub_186A1FA4C();
}

uint64_t _UIIntelligenceLightSourceConfiguration.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB1E70);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_0Tm(a1, a1[3]);
  sub_1858E7420();
  sub_186A1FB0C();
  if (!v2)
  {
    char v9 = sub_186A1F75C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
}

uint64_t sub_1858E7610@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return _UIIntelligenceLightSourceConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1858E7628(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB1E60);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_0Tm(a1, a1[3]);
  sub_1858E7420();
  sub_186A1FB3C();
  sub_186A1F77C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1858E775C()
{
  return sub_186A1FA4C();
}

uint64_t sub_1858E77A4()
{
  return sub_186A1FA0C();
}

uint64_t sub_1858E77D0()
{
  return sub_186A1FA4C();
}

BOOL sub_1858E7814(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void __swiftcall _UIIntelligenceLightSourceConfiguration.init()(_UIIntelligenceLightSourceConfiguration *__return_ptr retstr)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  objc_msgSend(v1, sel_init);
}

id _UIIntelligenceLightSourceConfiguration.init()()
{
  *(unsigned char *)(v0 + OBJC_IVAR____UIIntelligenceLightSourceConfiguration_wrapped) = 0;
  v2.super_class = (Class)_UIIntelligenceLightSourceConfiguration;
  return objc_msgSendSuper2(&v2, sel_init);
}

unint64_t sub_1858E78CC()
{
  unint64_t result = qword_1E8FB1E80;
  if (!qword_1E8FB1E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FB1E80);
  }
  return result;
}

uint64_t type metadata accessor for _UIIntelligenceLightSourceView(uint64_t a1)
{
  return sub_1853B985C(a1, &qword_1E8FB1E88);
}

uint64_t getEnumTagSinglePayload for _UIIntelligenceLightSourceConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for _UIIntelligenceLightSourceConfiguration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1858E7AA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _UIIntelligenceLightSourceConfiguration()
{
  return &type metadata for _UIIntelligenceLightSourceConfiguration;
}

uint64_t type metadata accessor for _UIIntelligenceLightSourceConfiguration(uint64_t a1)
{
  return sub_1853B985C(a1, &qword_1E8FB1E90);
}

uint64_t getEnumTagSinglePayload for _UIIntelligenceLightSourceConfiguration.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for _UIIntelligenceLightSourceConfiguration.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1858E7C20);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for _UIIntelligenceLightSourceConfiguration.CodingKeys()
{
  return &type metadata for _UIIntelligenceLightSourceConfiguration.CodingKeys;
}

unint64_t sub_1858E7C5C()
{
  unint64_t result = qword_1E8FB1E98;
  if (!qword_1E8FB1E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FB1E98);
  }
  return result;
}

unint64_t sub_1858E7CB4()
{
  unint64_t result = qword_1E8FB1EA0;
  if (!qword_1E8FB1EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FB1EA0);
  }
  return result;
}

unint64_t sub_1858E7D0C()
{
  unint64_t result = qword_1E8FB1EA8;
  if (!qword_1E8FB1EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FB1EA8);
  }
  return result;
}

uint64_t sub_1858E7D60(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000016 && a2 == 0x8000000186B9F640)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_186A1F85C();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void UIViewController.ViewLoading.wrappedValue.getter()
{
}

void UIViewController.ViewLoading.wrappedValue.setter()
{
}

void UIViewController.ViewLoading.wrappedValue.modify()
{
}

uint64_t UIViewController.ViewLoading.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t UIViewController.ViewLoading.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  char v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v9(a3, 1, 1, a2);
  uint64_t v7 = sub_186A1F12C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a3, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a3, a1, a2);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v9)(a3, 0, 1, a2);
}

uint64_t static UIViewController.ViewLoading.subscript.getter@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(*MEMORY[0x1E4FBBE08] + *a2 + 8);
  uint64_t v6 = sub_186A1F12C();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  id v10 = (char *)&v16[-1] - v9;
  objc_msgSend(a1, sel_loadViewIfNeeded, v8);
  id v17 = a1;
  id v11 = a1;
  id v12 = (void (*)(void *, void))swift_readAtKeyPath();
  (*(void (**)(char *))(v7 + 16))(v10);
  v12(v16, 0);

  uint64_t v13 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v5) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v10, v5);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  sub_186A1F38C();
  sub_186A1E9FC();
  id v17 = v11;
  swift_getWitnessTable();
  sub_1858E8604();
  sub_186A1E9FC();
  swift_bridgeObjectRelease();
  sub_186A1E9FC();
  uint64_t result = sub_186A1F60C();
  __break(1u);
  return result;
}

uint64_t static UIViewController.ViewLoading.subscript.setter(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  sub_1858E8630(a1, a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x1E4FBBE08] + v4 + 8) - 8) + 8);
  return v5(a1);
}

void (*static UIViewController.ViewLoading.subscript.modify(void *a1, void *a2, void *a3, uint64_t a4))(void ***a1, char a2)
{
  double v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[1] = a3;
  void v8[2] = a4;
  void *v8 = a2;
  uint64_t v9 = *(void *)(*MEMORY[0x1E4FBBE08] + *a3 + 8);
  v8[3] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v8[4] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v8[5] = malloc(v11);
  id v12 = malloc(v11);
  void v8[6] = v12;
  static UIViewController.ViewLoading.subscript.getter(a2, a3, (uint64_t)v12);
  return sub_1858E8480;
}

void sub_1858E8480(void ***a1, char a2)
{
  char v2 = *a1;
  char v3 = (*a1)[5];
  uint64_t v4 = (*a1)[6];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = (void (**)(void *, void *, void *))(*a1)[4];
  uint64_t v7 = (*a1)[1];
  double v8 = **a1;
  if (a2)
  {
    v6[2]((*a1)[5], v4, v5);
    swift_retain();
    swift_retain();
    sub_1858E8630((uint64_t)v3, v8, v7);
    uint64_t v9 = v6[1];
    ((void (*)(void *, void *))v9)(v3, v5);
    ((void (*)(void *, void *))v9)(v4, v5);
  }
  else
  {
    swift_retain();
    swift_retain();
    sub_1858E8630((uint64_t)v4, v8, v7);
    ((void (*)(void *, void *))v6[1])(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

void sub_1858E85A8()
{
}

uint64_t sub_1858E8604()
{
  return sub_186A1F7BC();
}

void sub_1858E8630(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(*MEMORY[0x1E4FBBE08] + *a3 + 8);
  uint64_t v6 = sub_186A1F12C();
  uint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v16[-v9 - 8];
  uint64_t v11 = *(void *)(v5 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v11 + 16))(&v16[-v9 - 8], a1, v5, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v5);
  id v17 = a2;
  id v12 = a2;
  uint64_t v13 = (void (*)(unsigned char *, void))swift_modifyAtReferenceWritableKeyPath();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v14, v10, v6);
  v13(v16, 0);

  swift_release();
  swift_release();
}

void sub_1858E8810()
{
}

void sub_1858E8820()
{
}

uint64_t sub_1858E8854()
{
  return 8;
}

void *sub_1858E8860(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1858E886C()
{
  uint64_t result = sub_186A1F12C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1858E88FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_1858E8A38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_1858E8AFC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1858E8BF4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *sub_1858E8D60(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1858E8E58(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t sub_1858E8FC4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_1858E9164(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1858E93A0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          id v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for UIViewController.ViewLoading()
{
  return __swift_instantiateGenericMetadata();
}

char *sub_1858E93E0()
{
  uint64_t v1 = OBJC_IVAR____UIRopeAnimation__progressValue;
  id v2 = objc_allocWithZone((Class)UIViewFloatAnimatableProperty);
  uint64_t v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);
  *(void *)&v3[OBJC_IVAR____UIRopeAnimation__animations] = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR____UIRopeAnimation__lastIndex] = 0;

  v16.receiver = v3;
  v16.super_class = (Class)_UIRopeAnimation;
  uint64_t v4 = (char *)objc_msgSendSuper2(&v16, sel_init);
  unsigned int v5 = self;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EB255AD0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_186B83AA0;
  uint64_t v7 = *(void **)&v4[OBJC_IVAR____UIRopeAnimation__progressValue];
  *(void *)(v6 + 32) = v7;
  sub_186A1EB5C();
  sub_1853B985C(0, (unint64_t *)&qword_1EB255C28);
  unsigned int v8 = v4;
  id v9 = v7;
  size_t v10 = (void *)sub_186A1EB1C();
  swift_bridgeObjectRelease();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v8;
  void v15[4] = sub_1858E9E94;
  v15[5] = v11;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1107296256;
  v15[2] = sub_1856A95EC;
  v15[3] = &block_descriptor_25;
  unsigned int v12 = _Block_copy(v15);
  unsigned int v13 = v8;
  swift_release();
  objc_msgSend(v5, sel__createTransformerWithInputAnimatableProperties_presentationValueChangedCallback_, v10, v12);

  _Block_release(v12);
  return v13;
}

id sub_1858E95D4(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + OBJC_IVAR____UIRopeAnimation__progressValue), sel_presentationValue);
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v4 = (uint64_t)v3;
  uint64_t v5 = OBJC_IVAR____UIRopeAnimation__lastIndex;
  uint64_t v6 = a1 + OBJC_IVAR____UIRopeAnimation__animations;
  id result = (id)swift_beginAccess();
  uint64_t v7 = *(void *)(a1 + v5);
  if (v7 <= v4)
  {
    while (v7 < *(void *)(*(void *)v6 + 16))
    {
      if (v7 < 0)
      {
        __break(1u);
LABEL_11:
        __break(1u);
        goto LABEL_12;
      }
      unsigned int v8 = *(void (**)(uint64_t))(*(void *)v6 + 16 * v7 + 32);
      uint64_t v9 = swift_retain();
      v8(v9);
      id result = (id)swift_release();
      uint64_t v10 = *(void *)(a1 + v5);
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v7 = v10 + 1;
      if (v11) {
        goto LABEL_11;
      }
      *(void *)(a1 + v5) = v7;
      if (v7 > v4) {
        return result;
      }
    }
  }
  return result;
}

void sub_1858E9874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void **)&v3[OBJC_IVAR____UIRopeAnimation__progressValue];
  objc_msgSend(v7, sel_value);
  double v9 = v8;
  objc_msgSend(v7, sel_presentationValue);
  if (v9 == v10)
  {
    *(void *)&v3[OBJC_IVAR____UIRopeAnimation__lastIndex] = 0;
    objc_msgSend(v7, sel_setValue_, 0.0);
    BOOL v11 = self;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v3;
    id v22 = sub_1858E9D90;
    objc_super v23 = (void *)v12;
    uint64_t v18 = MEMORY[0x1E4F143A8];
    uint64_t v19 = 1107296256;
    id v20 = sub_1856A95EC;
    id v21 = &block_descriptor_3;
    unsigned int v13 = _Block_copy(&v18);
    unsigned int v14 = v3;
    swift_release();
    uint64_t v15 = swift_allocObject();
    swift_unknownObjectWeakInit();
    objc_super v16 = (void *)swift_allocObject();
    void v16[2] = v15;
    v16[3] = a2;
    void v16[4] = a3;
    id v22 = sub_1858E9E18;
    objc_super v23 = v16;
    uint64_t v18 = MEMORY[0x1E4F143A8];
    uint64_t v19 = 1107296256;
    id v20 = sub_185A28F74;
    id v21 = &block_descriptor_13;
    id v17 = _Block_copy(&v18);
    sub_1854B0A60(a2);
    swift_release();
    objc_msgSend(v11, sel__animateUsingSpringBehavior_tracking_animations_completion_, a1, 0, v13, v17);
    _Block_release(v17);
    _Block_release(v13);
  }
}

id sub_1858E9AA0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + OBJC_IVAR____UIRopeAnimation__progressValue);
  uint64_t v2 = a1 + OBJC_IVAR____UIRopeAnimation__animations;
  swift_beginAccess();
  return objc_msgSend(v1, sel_setValue_, (double)*(uint64_t *)(*(void *)v2 + 16));
}

uint64_t sub_1858E9B0C(char a1, char a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  uint64_t v7 = a3 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x18C109380](v7);
  if (result)
  {
    double v9 = (void *)result;
    double v10 = (void *)(result + OBJC_IVAR____UIRopeAnimation__animations);
    swift_beginAccess();
    *double v10 = MEMORY[0x1E4FBC860];

    uint64_t result = swift_bridgeObjectRelease();
  }
  if (a4) {
    return a4(a1 & 1, a2 & 1);
  }
  return result;
}

uint64_t type metadata accessor for _UIRopeAnimation(uint64_t a1)
{
  return sub_1853B985C(a1, &qword_1E8FB1ED0);
}

uint64_t sub_1858E9D58()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x1F4186498](v0, 24, 7);
}

id sub_1858E9D90()
{
  return sub_1858E9AA0(*(void *)(v0 + 16));
}

uint64_t sub_1858E9D98()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1858E9DD0()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1858E9E18(char a1, char a2)
{
  return sub_1858E9B0C(a1, a2, *(void *)(v2 + 16), *(uint64_t (**)(void, void))(v2 + 24));
}

uint64_t sub_1858E9E24()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1858E9E5C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

id sub_1858E9E94()
{
  return sub_1858E95D4(*(void *)(v0 + 16));
}

uint64_t UIView._intelligenceBaseClass.getter()
{
  return sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
}

double UIView._intelligenceVisibleBounds.getter()
{
  objc_msgSend(v0, sel_bounds);
  double v2 = v1;
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  objc_msgSend(v0, sel_safeAreaInsets);
  return UIRectInset(v2, v4, v6, v8, v9, v12, v11, v10);
}

uint64_t UIView._intelligenceCollectContent(in:collector:)()
{
  uint64_t v0 = sub_186A1DF8C();
  uint64_t v1 = *(void *)(v0 - 8);
  double v2 = MEMORY[0x1F4188790](v0);
  double v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, double))(v1 + 104))(v4, *MEMORY[0x1E4FB0B68], v0, v2);
  sub_186A1DA6C();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

id UIView._intelligenceCollectSubelements(in:using:transformToRoot:)(uint64_t a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  double v8 = v7;
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  uint64_t v61 = a1;
  uint64_t v56 = sub_186A1E38C();
  IsEmptdouble y = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAF3E0);
  MEMORY[0x1F4188790](v16 - 8);
  long long v53 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_186A1E03C();
  uint64_t v18 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59);
  long long v52 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF310);
  MEMORY[0x1F4188790](v20 - 8);
  id v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v24 = MEMORY[0x1F4188790](v23);
  double v26 = (char *)&v45 - v25;
  uint64_t v64 = MEMORY[0x1E4FBC860];
  v63.origin.double x = a4;
  v63.origin.double y = a5;
  v63.size.double width = a6;
  v63.size.double height = a7;
  uint64_t v60 = (uint64_t)v8;
  id result = objc_msgSend(v8, sel__allSubviews, v24);
  if (result)
  {
    uint64_t v28 = result;
    sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
    unint64_t v29 = sub_186A1EB3C();

    if (v29 >> 62) {
      goto LABEL_22;
    }
    unint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v30)
    {
      unint64_t v31 = v29 & 0xC000000000000001;
      uint64_t v47 = v29 & 0xFFFFFFFFFFFFFF8;
      unint64_t v46 = v29 + 32;
      long long v55 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      uint64_t v50 = (void (**)(char *, char *, uint64_t))(v18 + 32);
      double v49 = (void (**)(char *, char *, uint64_t))(v18 + 16);
      uint64_t v48 = (void (**)(char *, uint64_t))(v18 + 8);
      long long v54 = (void (**)(char *, uint64_t))(IsEmpty + 8);
      unint64_t v51 = v29 & 0xC000000000000001;
      while (!__OFSUB__(v30--, 1))
      {
        if (v31)
        {
          id v33 = (id)MEMORY[0x18C102240](v30, v29);
          uint64_t v34 = v33;
          uint64_t v18 = v59;
        }
        else
        {
          uint64_t v18 = v59;
          if ((v30 & 0x8000000000000000) != 0) {
            goto LABEL_20;
          }
          if (v30 >= *(void *)(v47 + 16)) {
            goto LABEL_21;
          }
          id v33 = *(id *)(v46 + 8 * v30);
          uint64_t v34 = v33;
        }
        MEMORY[0x1F4188790](v33);
        uint64_t v35 = v61;
        *(&v45 - 6) = v60;
        *(&v45 - 5) = (uint64_t)v34;
        *(&v45 - 4) = (uint64_t)&v63;
        *(&v45 - 3) = v35;
        uint64_t v36 = v58;
        *(&v45 - 2) = v57;
        *(&v45 - 1) = v36;
        sub_186A1DA2C();
        sub_1853B7020((uint64_t)v26, (uint64_t)v22, &qword_1E8FAF310);
        if ((*v55)(v22, 1, v18) == 1)
        {
          sub_1853B93B8((uint64_t)v22, &qword_1E8FAF310);
        }
        else
        {
          unint64_t v37 = v29;
          long long v38 = v15;
          objc_super v39 = v52;
          (*v50)(v52, v22, v18);
          uint64_t v40 = (uint64_t)v53;
          (*v49)(v53, v39, v18);
          sub_1858F28F8(0, 0, v40);
          uint64_t v41 = v39;
          uint64_t v15 = v38;
          unint64_t v29 = v37;
          unint64_t v31 = v51;
          (*v48)(v41, v18);
        }
        v63.origin.double x = sub_1858EA9FC(v34, v63.origin.x, v63.origin.y, v63.size.width, v63.size.height);
        v63.origin.double y = v42;
        v63.size.double width = v43;
        v63.size.double height = v44;
        sub_186A1DA9C();
        uint64_t v18 = v62[4];
        __swift_project_boxed_opaque_existential_0Tm(v62, v62[3]);
        sub_186A1E19C();
        IsEmptdouble y = sub_186A1E33C();
        (*v54)(v15, v56);
        if (IsEmpty)
        {
          IsEmptdouble y = CGRectIsEmpty(v63);

          sub_1853B93B8((uint64_t)v26, &qword_1E8FAF310);
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v62);
          if (IsEmpty) {
            goto LABEL_18;
          }
        }
        else
        {
          sub_1853B93B8((uint64_t)v26, &qword_1E8FAF310);

          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v62);
        }
        if (!v30) {
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      swift_bridgeObjectRetain();
      unint64_t v30 = sub_186A1F67C();
      swift_bridgeObjectRelease();
    }
LABEL_18:
    swift_bridgeObjectRelease();
    sub_186A1DA8C();
    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1858EA814(void *a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v11 = *a3;
  double v12 = a3[1];
  double v13 = a3[2];
  double v14 = a3[3];
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a5;
  *(void *)(v15 + 24) = a6;
  uint64_t v18[4] = sub_1858F380C;
  v18[5] = v15;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 1107296256;
  _OWORD v18[2] = sub_1858EA970;
  void v18[3] = &block_descriptor_40_0;
  uint64_t v16 = _Block_copy(v18);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel__intelligenceCollectElementFor_in_using_transformToRoot_, a2, a4, v16, v11, v12, v13, v14);
  _Block_release(v16);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a4) {
    __break(1u);
  }
  return result;
}

double sub_1858EA970(uint64_t a1, void *a2, double a3, double a4, double a5, double a6)
{
  double v10 = *(double (**)(double, double, double, double))(a1 + 32);
  id v11 = a2;
  double v12 = v10(a3, a4, a5, a6);

  return v12;
}

CGFloat sub_1858EA9FC(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  id v11 = objc_msgSend(a1, sel__presentationControllerToNotifyOnLayoutSubviews);
  if (v11)
  {
    double v12 = v11;
    objc_msgSend(v11, sel__occludedFrameOfPresentedViewInContainerView);
    double v17 = -[UIView _convertRect:toViewInSameWindow:]((uint64_t)a1, v5, v13, v14, v15, v16);
    CGFloat v19 = v18;
    CGFloat v21 = v20;
    double v22 = a2;
    CGFloat v24 = v23;
    v78.origin.double x = v22;
    v78.origin.double y = a3;
    v78.size.double width = a4;
    v78.size.CGFloat height = a5;
    v109.origin.double x = v17;
    v109.origin.double y = v19;
    v109.size.double width = v21;
    v109.size.CGFloat height = v24;
    if (CGRectIntersectsRect(v78, v109))
    {
      objc_msgSend(v5, sel__currentScreenScale);
      v79.size.double width = v21;
      v79.size.CGFloat height = v24;
      double v26 = 1.0 / v25;
      v79.origin.double x = v17;
      v79.origin.double y = v19;
      CGFloat v73 = v21;
      CGFloat height = v79.size.height;
      CGFloat v27 = CGRectGetMaxY(v79) + v26;
      v80.origin.double x = v22;
      v80.origin.double y = a3;
      CGFloat rect = a4;
      v80.size.double width = a4;
      v80.size.CGFloat height = a5;
      CGFloat MaxY = CGRectGetMaxY(v80);
      double v63 = v27;
      BOOL v29 = MaxY > v27;
      double v30 = MaxY;
      char v31 = v29;
      double v71 = 0.0;
      double v72 = v26;
      CGFloat v32 = 0.0;
      double v33 = 0.0;
      double v34 = 0.0;
      if (!v29)
      {
        v81.origin.double x = v17;
        v81.origin.double y = v19;
        v81.size.double width = v73;
        v81.size.CGFloat height = height;
        double MinY = CGRectGetMinY(v81);
        v82.origin.double x = v22;
        v82.origin.double y = a3;
        double v33 = rect;
        v82.size.double width = rect;
        v82.size.CGFloat height = a5;
        double v36 = MinY - CGRectGetMinY(v82);
        double v26 = v72;
        double v34 = 0.0;
        if (v36 >= 0.0) {
          double v34 = v36;
        }
        double v71 = v22;
        CGFloat v32 = a3;
      }
      CGFloat v66 = v32;
      CGFloat v67 = v34;
      CGFloat v68 = v33;
      v83.origin.double x = v17;
      v83.origin.double y = v19;
      v83.size.double width = v73;
      v83.size.CGFloat height = height;
      CGFloat v37 = CGRectGetMinY(v83) - v26;
      v84.origin.double x = v22;
      v84.origin.double y = a3;
      v84.size.double width = rect;
      v84.size.CGFloat height = a5;
      CGFloat v69 = v19;
      CGFloat v70 = v17;
      if (v37 <= CGRectGetMinY(v84))
      {
        v85.origin.double x = v22;
        v85.origin.double y = a3;
        v85.size.double width = rect;
        v85.size.CGFloat height = a5;
        double v40 = CGRectGetMaxY(v85);
        v86.origin.double x = v17;
        v86.origin.double y = v19;
        v86.size.double width = v73;
        v86.size.CGFloat height = height;
        double v41 = v40 - CGRectGetMaxY(v86);
        if (v41 < 0.0) {
          double v42 = 0.0;
        }
        else {
          double v42 = v41;
        }
        v87.origin.double x = v22;
        v87.origin.double y = a3;
        v87.size.double width = rect;
        v87.size.CGFloat height = a5;
        double v43 = CGRectGetMaxY(v87) - v42;
        if (v30 <= v63)
        {
          v88.origin.double x = v22;
          v88.origin.double y = v43;
          v88.size.double width = rect;
          v88.size.CGFloat height = v42;
          double Width = CGRectGetWidth(v88);
          v89.origin.double x = v22;
          v89.origin.double y = v43;
          v89.size.double width = rect;
          v89.size.CGFloat height = v42;
          double v64 = Width * CGRectGetHeight(v89);
          v90.origin.double x = v71;
          v90.origin.double y = v66;
          v90.size.double width = v68;
          v90.size.CGFloat height = v67;
          double v45 = CGRectGetWidth(v90);
          v91.origin.double x = v71;
          v91.origin.double y = v66;
          v91.size.double width = v68;
          v91.size.CGFloat height = v67;
          double v46 = v45 * CGRectGetHeight(v91);
          double v38 = v72;
          if (v72 + v46 >= v64)
          {
            char v31 = 0;
          }
          else
          {
            CGFloat v66 = v43;
            CGFloat v67 = v42;
            char v31 = 0;
            double v71 = v22;
            CGFloat v68 = rect;
          }
        }
        else
        {
          CGFloat v66 = v43;
          CGFloat v67 = v42;
          char v31 = 0;
          double v71 = v22;
          CGFloat v68 = rect;
          double v38 = v72;
        }
      }
      else
      {
        double v38 = v72;
      }
      v92.origin.double x = v70;
      v92.origin.double y = v69;
      v92.size.double width = v73;
      v92.size.CGFloat height = height;
      CGFloat v47 = v38 + CGRectGetMaxX(v92);
      v93.origin.double x = v22;
      v93.origin.double y = a3;
      v93.size.double width = rect;
      v93.size.CGFloat height = a5;
      if (CGRectGetMaxX(v93) <= v47)
      {
        v94.origin.double x = v70;
        v94.origin.double y = v69;
        v94.size.double width = v73;
        v94.size.CGFloat height = height;
        double MinX = CGRectGetMinX(v94);
        v95.origin.double x = v22;
        v95.origin.double y = a3;
        v95.size.double width = rect;
        v95.size.CGFloat height = a5;
        double v50 = MinX - CGRectGetMinX(v95);
        if (v50 < 0.0) {
          double v51 = 0.0;
        }
        else {
          double v51 = v50;
        }
        CGFloat v65 = v51;
        if (v31)
        {
          char v31 = 0;
          double v71 = v22;
          CGFloat v66 = a3;
          CGFloat v67 = a5;
          double v48 = v72;
        }
        else
        {
          v96.origin.double x = v22;
          v96.origin.double y = a3;
          v96.size.double width = v51;
          v96.size.CGFloat height = a5;
          double v52 = CGRectGetWidth(v96);
          v97.origin.double x = v22;
          v97.origin.double y = a3;
          v97.size.double width = v51;
          v97.size.CGFloat height = a5;
          double v62 = v52 * CGRectGetHeight(v97);
          v98.origin.double x = v71;
          v98.origin.double y = v66;
          v98.size.double width = v68;
          v98.size.CGFloat height = v67;
          double v53 = CGRectGetWidth(v98);
          v99.origin.double x = v71;
          v99.origin.double y = v66;
          v99.size.double width = v68;
          v99.size.CGFloat height = v67;
          double v54 = v53 * CGRectGetHeight(v99);
          double v48 = v72;
          char v31 = 0;
          if (v72 + v54 >= v62)
          {
            CGFloat v65 = v68;
          }
          else
          {
            double v71 = v22;
            CGFloat v66 = a3;
            CGFloat v67 = a5;
          }
        }
      }
      else
      {
        CGFloat v65 = v68;
        double v48 = v72;
      }
      v100.origin.double x = v70;
      v100.origin.double y = v69;
      v100.size.CGFloat height = height;
      v100.size.double width = v73;
      CGFloat v55 = CGRectGetMinX(v100) - v48;
      v101.origin.double x = v22;
      v101.origin.double y = a3;
      v101.size.double width = rect;
      v101.size.CGFloat height = a5;
      if (v55 <= CGRectGetMinX(v101))
      {
        v102.origin.double x = v22;
        v102.origin.double y = a3;
        v102.size.double width = rect;
        v102.size.CGFloat height = a5;
        double MaxX = CGRectGetMaxX(v102);
        v103.origin.double x = v70;
        v103.origin.double y = v69;
        v103.size.double width = v73;
        v103.size.CGFloat height = height;
        double v57 = MaxX - CGRectGetMaxX(v103);
        if (v57 < 0.0) {
          double v58 = 0.0;
        }
        else {
          double v58 = v57;
        }
        v104.origin.double x = v22;
        v104.origin.double y = a3;
        v104.size.double width = rect;
        v104.size.CGFloat height = a5;
        double v59 = CGRectGetMaxX(v104);
        a2 = v59 - v58;
        if (v31)
        {
        }
        else
        {
          v105.origin.double x = v59 - v58;
          v105.origin.double y = a3;
          v105.size.double width = v58;
          v105.size.CGFloat height = a5;
          double v60 = CGRectGetWidth(v105);
          v106.origin.double x = a2;
          v106.origin.double y = a3;
          v106.size.double width = v58;
          v106.size.CGFloat height = a5;
          rectdouble a = v60 * CGRectGetHeight(v106);
          v107.origin.double x = v71;
          v107.origin.double y = v66;
          v107.size.double width = v65;
          v107.size.CGFloat height = v67;
          double v75 = CGRectGetWidth(v107);
          v108.origin.double x = v71;
          v108.origin.double y = v66;
          v108.size.double width = v65;
          v108.size.CGFloat height = v67;
          double v61 = CGRectGetHeight(v108);

          if (v72 + v75 * v61 >= recta) {
            return v71;
          }
        }
      }
      else
      {

        a2 = v22;
        if ((v31 & 1) == 0) {
          return v71;
        }
      }
    }
    else
    {

      return v22;
    }
  }
  return a2;
}

uint64_t sub_1858EAFB0()
{
  return sub_1858EA814(*(void **)(v0 + 16), *(void *)(v0 + 24), *(double **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t UIView._intelligenceCollectElement(for:in:using:transformToRoot:)(void *a1, uint64_t a2, double (*a3)(void *, double), uint64_t a4, double a5, double a6, double a7, double a8)
{
  double v9 = v8;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF310);
  MEMORY[0x1F4188790](v18 - 8);
  double v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_186A1E03C();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  CGFloat v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v25 = -[UIView _convertRect:toViewInSameWindow:]((uint64_t)v9, a1, a5, a6, a7, a8);
  CGFloat v27 = v26;
  CGFloat v29 = v28;
  CGFloat v31 = v30;
  objc_msgSend(a1, sel__intelligenceVisibleBounds);
  v40.origin.double x = v32;
  v40.origin.double y = v33;
  v40.size.double width = v34;
  v40.size.CGFloat height = v35;
  v38.origin.double x = v25;
  v38.origin.double y = v27;
  v38.size.double width = v29;
  v38.size.CGFloat height = v31;
  CGRect v39 = CGRectIntersection(v38, v40);
  sub_1858EC410(a2, a1, a3, a4, v9, (uint64_t)v20, v39.origin.x, v39.origin.y, v39.size.width, v39.size.height);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1) {
    return sub_1853B93B8((uint64_t)v20, &qword_1E8FAF310);
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
  sub_186A1DA7C();
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
}

void sub_1858EB2C4(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void (**a4)(void, void, double)@<X3>, uint64_t a5@<X8>, CGFloat a6@<D0>, CGFloat a7@<D1>, CGFloat a8@<D2>, CGFloat a9@<D3>)
{
  uint64_t v134 = a1;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAF400);
  MEMORY[0x1F4188790](v17 - 8);
  id v121 = (char *)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  id v122 = (char *)&v112 - v20;
  uint64_t v128 = sub_186A1E1BC();
  uint64_t v127 = *(void *)(v128 - 8);
  MEMORY[0x1F4188790](v128);
  uint64_t v126 = (char *)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  id v125 = (char *)&v112 - v23;
  uint64_t v137 = sub_186A1E03C();
  uint64_t v136 = *(void *)(v137 - 8);
  MEMORY[0x1F4188790](v137);
  int v124 = (char *)&v112 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_186A1E04C();
  uint64_t v120 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  CGFloat v27 = (char *)&v112 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  double v30 = (char *)&v112 - v29;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF370);
  MEMORY[0x1F4188790](v31 - 8);
  CGFloat v33 = (char *)&v112 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v133 = sub_186A1DF8C();
  uint64_t v131 = *(void *)(v133 - 8);
  MEMORY[0x1F4188790](v133);
  __int16 v123 = (char *)&v112 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v37 = (char *)&v112 - v36;
  MEMORY[0x1F4188790](v38);
  long long v132 = (char *)&v112 - v39;
  uint64_t v130 = sub_186A1E38C();
  uint64_t v129 = *(void *)(v130 - 8);
  MEMORY[0x1F4188790](v130);
  long long v135 = (char *)&v112 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = a4;
  double v41 = (void *)swift_allocObject();
  v41[2] = sub_1858F3928;
  v41[3] = &v138;
  v41[4] = a3;
  _Block_copy(a4);
  id v42 = a3;
  if (objc_msgSend(a2, sel_isHidden)) {
    goto LABEL_7;
  }
  objc_msgSend(a2, sel_alpha);
  if (_UIViewIsFullyTransparentGivenAlpha(v43)
    || (id v44 = objc_msgSend(a2, sel_layer),
        id v118 = a2,
        long long v119 = v42,
        id v45 = v44,
        unsigned __int8 v46 = objc_msgSend(v44, sel_disableUpdateMask),
        v45,
        id v42 = v119,
        (v46 & 0x10) != 0))
  {
LABEL_7:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v136 + 56))(a5, 1, 1, v137);

    swift_release();
  }
  else
  {
    uint64_t v116 = a4;
    uint64_t v117 = a5;
    sub_186A1DA9C();
    __swift_project_boxed_opaque_existential_0Tm(&v142, v143);
    sub_186A1E19C();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v142);
    if (sub_186A1E33C())
    {
      v145.origin.double x = a6;
      v145.origin.double y = a7;
      v145.size.double width = a8;
      v145.size.CGFloat height = a9;
      if (CGRectIsEmpty(v145))
      {
        (*(void (**)(char *, uint64_t))(v129 + 8))(v135, v130);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v136 + 56))(v117, 1, 1, v137);
LABEL_11:

        swift_release();
        a4 = v116;
        goto LABEL_8;
      }
    }
    sub_1858F1A18(v134, (uint64_t)v33, a6, a7, a8, a9);
    uint64_t v47 = v131;
    uint64_t v48 = v133;
    int v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v131 + 48))(v33, 1, v133);
    uint64_t v50 = v117;
    if (v49 == 1)
    {
      (*(void (**)(char *, uint64_t))(v129 + 8))(v135, v130);
      sub_1853B93B8((uint64_t)v33, &qword_1E8FAF370);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v136 + 56))(v50, 1, 1, v137);
      goto LABEL_11;
    }
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v132, v33, v48);
    uint64_t v51 = MEMORY[0x1E4FBC860];
    uint64_t v144 = MEMORY[0x1E4FBC860];
    char v52 = sub_186A1E32C();
    a4 = v116;
    if (v52)
    {
      double v53 = v118;
      UIView._appIntentsIntelligenceProvider.getter(&v140);
      if (v141)
      {
        sub_1858F3770(&v140, &v142);
        __swift_project_boxed_opaque_existential_0Tm(&v142, v143);
        objc_msgSend(v53, sel_bounds);
        sub_186A1E40C();
        uint64_t KeyPath = swift_getKeyPath();
        unint64_t v115 = (unint64_t)&v112;
        MEMORY[0x1F4188790](KeyPath);
        *(&v112 - 4) = (uint64_t)sub_1858F3964;
        *(&v112 - 3) = (uint64_t)v41;
        *(&v112 - 2) = (uint64_t)v53;
        uint64_t v55 = sub_186A1EB9C();
        swift_release();
        swift_bridgeObjectRelease();
        sub_185AF6248(v55);
        __swift_project_boxed_opaque_existential_0Tm(&v142, v143);
        uint64_t v114 = sub_186A1E4CC();
        unint64_t v115 = v56;
        char v57 = sub_186A1E36C();
        uint64_t v47 = v131;
        if (v57)
        {
          __swift_project_boxed_opaque_existential_0Tm(&v142, v143);
          uint64_t v58 = sub_186A1E4DC();
        }
        else
        {
          uint64_t v58 = MEMORY[0x1E4FBC860];
        }
        uint64_t v113 = v58;
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v142);
      }
      else
      {
        sub_1853B93B8((uint64_t)&v140, &qword_1E8FB0048);
        uint64_t v114 = 0;
        unint64_t v115 = 0xF000000000000000;
        uint64_t v113 = MEMORY[0x1E4FBC860];
        uint64_t v47 = v131;
      }
    }
    else
    {
      uint64_t v113 = v51;
      uint64_t v114 = 0;
      unint64_t v115 = 0xF000000000000000;
    }
    uint64_t v59 = v47;
    double v60 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    uint64_t v61 = v133;
    v60(v37, v132, v133);
    if ((*(unsigned int (**)(char *, uint64_t))(v59 + 88))(v37, v61) == *MEMORY[0x1E4FB0B80])
    {
      (*(void (**)(char *, uint64_t))(v59 + 96))(v37, v61);
      uint64_t v62 = v120;
      (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v30, v37, v25);
      (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v27, v30, v25);
      id v63 = objc_allocWithZone((Class)sub_186A1DAEC());
      double v64 = (void *)sub_186A1DADC();
      objc_msgSend(v118, sel__intelligenceCollectRemoteContentIn_remoteContextWrapper_, v64, a6, a7, a8, a9);

      (*(void (**)(char *, uint64_t))(v62 + 8))(v30, v25);
    }
    else
    {
      uint64_t v65 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v37, v61);
      MEMORY[0x1F4188790](v65);
      *(&v112 - _Block_object_dispose(&STACK[0x478], 8) = (uint64_t)v118;
      *((CGFloat *)&v112 - 7) = a6;
      *((CGFloat *)&v112 - 6) = a7;
      *((CGFloat *)&v112 - 5) = a8;
      *((CGFloat *)&v112 - 4) = a9;
      *(&v112 - 3) = v134;
      *(&v112 - 2) = (uint64_t)sub_1858F3964;
      *(&v112 - 1) = (uint64_t)v41;
      uint64_t v66 = sub_186A1DA3C();
      sub_185AF6248(v66);
    }
    CGFloat v67 = v124;
    CGFloat v68 = v135;
    if (sub_186A1E2CC())
    {
      uint64_t v69 = (uint64_t)v118;
      objc_msgSend(v118, sel_bounds);
      double v71 = v70;
      double v73 = v72;
      double v75 = v74;
      double v77 = v76;
      _Block_copy(a4);
      uint64_t v78 = v69;
      CGRect v79 = v119;
      double v80 = -[UIView _convertRect:toViewInSameWindow:](v78, v119, v71, v73, v75, v77);
      ((void (**)(void, void *, double))a4)[2](a4, v79, v80);
      _Block_release(a4);
    }
    v60(v123, v132, v133);
    sub_186A1DD2C();
    if (sub_186A1E31C())
    {
      uint64_t v143 = sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
      *(void *)&long long v142 = v118;
      CGRect v81 = v118;
      objc_msgSend(v81, sel__intelligenceBaseClass);
      ObjCClassMetadatdouble a = swift_getObjCClassMetadata();
      sub_1858F301C(&v142, ObjCClassMetadata);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v142);
      sub_186A1DDBC();
      CGRect v83 = -[UIView __viewDelegate]((id *)v81);
      if (v83)
      {
        CGRect v84 = v83;
        uint64_t v85 = sub_1853B985C(0, qword_1E8FAEAB0);
        uint64_t v143 = v85;
        *(void *)&long long v142 = v84;
        CGRect v86 = v84;
        sub_1858F301C(&v142, v85);
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v142);
        sub_186A1DE0C();
      }
    }
    char v87 = sub_186A1E34C();
    uint64_t v88 = v113;
    if (v87)
    {
      id v89 = _UIGetAccessibilityLabelSafe(v118);
      if (v89)
      {
        CGRect v90 = v89;
        sub_186A1E95C();
      }
      sub_186A1DDDC();
    }
    if (v115 >> 60 != 15)
    {
      sub_1858F3718(v114, v115);
      sub_186A1DDCC();
    }
    if (*(void *)(v88 + 16)) {
      sub_186A1DE1C();
    }
    else {
      swift_bridgeObjectRelease();
    }
    if (sub_186A1E32C())
    {
      id v91 = objc_msgSend(v118, sel__appEntityIdentifier);
      if (v91)
      {
        CGRect v92 = v91;
        sub_186A1E95C();
      }
      sub_186A1DDEC();
      id v93 = objc_msgSend(v118, sel__appIntentIdentifier);
      if (v93)
      {
        CGRect v94 = v93;
        sub_186A1E95C();
      }
      sub_186A1DDFC();
    }
    CGRect v95 = v125;
    sub_186A1E28C();
    uint64_t v96 = v127;
    CGRect v97 = v126;
    uint64_t v98 = v128;
    (*(void (**)(char *, void, uint64_t))(v127 + 104))(v126, *MEMORY[0x1E4FB0BD8], v128);
    char v99 = sub_186A1E1AC();
    CGRect v100 = *(void (**)(char *, uint64_t))(v96 + 8);
    v100(v97, v98);
    v100(v95, v98);
    if (v99)
    {
      CGRect v101 = -[UIView __viewDelegate]((id *)v118);
      if (v101)
      {
        CGRect v102 = v101;
        id v103 = objc_msgSend(v101, sel_userActivity);
        sub_186A1E07C();
        sub_186A1DDAC();
      }
      uint64_t v104 = (uint64_t)v121;
      sub_186A1DD9C();
      uint64_t v105 = sub_186A1E06C();
      int v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 48))(v104, 1, v105);
      sub_1853B93B8(v104, (uint64_t *)&unk_1E8FAF400);
      if (v106 == 1)
      {
        id v107 = objc_msgSend(v118, sel_userActivity);
        sub_186A1E07C();
        sub_186A1DDAC();
      }
    }
    if (sub_186A1E2EC())
    {
      sub_186A1DF7C();
      sub_1858F36AC(v114, v115);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v67, v137);
      (*(void (**)(char *, uint64_t))(v131 + 8))(v132, v133);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v68, v130);
    }
    else
    {
      sub_1858F36AC(v114, v115);
      (*(void (**)(char *, uint64_t))(v131 + 8))(v132, v133);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v68, v130);
      uint64_t v108 = v136;
      uint64_t v109 = v117;
      uint64_t v110 = v137;
      (*(void (**)(uint64_t, char *, uint64_t))(v136 + 32))(v117, v67, v137);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v108 + 56))(v109, 0, 1, v110);
    }
    unint64_t v111 = v119;
    swift_release();
  }
LABEL_8:
  _Block_release(a4);
  _Block_release(a4);
}

void sub_1858EC410(uint64_t a1@<X0>, void *a2@<X1>, double (*a3)(void *, double)@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>, CGFloat a7@<D0>, CGFloat a8@<D1>, CGFloat a9@<D2>, CGFloat a10@<D3>)
{
  uint64_t v133 = a1;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAF400);
  MEMORY[0x1F4188790](v19 - 8);
  __int16 v123 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  int v124 = (char *)&v112 - v22;
  uint64_t v130 = sub_186A1E1BC();
  uint64_t v129 = *(void *)(v130 - 8);
  MEMORY[0x1F4188790](v130);
  uint64_t v128 = (char *)&v112 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v127 = (char *)&v112 - v25;
  uint64_t v26 = sub_186A1E03C();
  uint64_t v137 = *(void *)(v26 - 8);
  uint64_t v138 = v26;
  MEMORY[0x1F4188790](v26);
  uint64_t v126 = (char *)&v112 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_186A1E04C();
  uint64_t v119 = *(void *)(v120 - 8);
  MEMORY[0x1F4188790](v120);
  uint64_t v29 = (char *)&v112 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  id v118 = (char *)&v112 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF370);
  MEMORY[0x1F4188790](v32 - 8);
  uint64_t v34 = (char *)&v112 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = sub_186A1DF8C();
  uint64_t v134 = *(void *)(v135 - 8);
  MEMORY[0x1F4188790](v135);
  id v125 = (char *)&v112 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v112 - v37;
  MEMORY[0x1F4188790](v39);
  double v41 = (char *)&v112 - v40;
  uint64_t v132 = sub_186A1E38C();
  uint64_t v131 = *(void *)(v132 - 8);
  MEMORY[0x1F4188790](v132);
  uint64_t v136 = (char *)&v112 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v43 = (void *)swift_allocObject();
  id v122 = a3;
  v43[2] = a3;
  id v43[3] = a4;
  uint64_t v121 = a4;
  v43[4] = a5;
  id v44 = a5;
  if (objc_msgSend(a2, sel_isHidden)) {
    goto LABEL_7;
  }
  objc_msgSend(a2, sel_alpha);
  if (_UIViewIsFullyTransparentGivenAlpha(v45)
    || (id v46 = objc_msgSend(a2, sel_layer),
        uint64_t v116 = a2,
        uint64_t v117 = v44,
        id v47 = v46,
        unsigned __int8 v48 = objc_msgSend(v46, sel_disableUpdateMask),
        v47,
        id v44 = v117,
        (v48 & 0x10) != 0))
  {
LABEL_7:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56))(a6, 1, 1, v138);
  }
  else
  {
    uint64_t v114 = v41;
    uint64_t v115 = a6;
    uint64_t v49 = v133;
    sub_186A1DA9C();
    __swift_project_boxed_opaque_existential_0Tm(&v141, v142);
    sub_186A1E19C();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v141);
    if (sub_186A1E33C())
    {
      v144.origin.double x = a7;
      v144.origin.double y = a8;
      v144.size.double width = a9;
      v144.size.CGFloat height = a10;
      if (CGRectIsEmpty(v144))
      {
        (*(void (**)(char *, uint64_t))(v131 + 8))(v136, v132);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56))(v115, 1, 1, v138);
LABEL_12:
        swift_release();
        id v44 = v117;
        goto LABEL_9;
      }
    }
    sub_1858F1A18(v49, (uint64_t)v34, a7, a8, a9, a10);
    uint64_t v50 = v134;
    uint64_t v51 = v135;
    int v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v134 + 48))(v34, 1, v135);
    uint64_t v53 = v115;
    if (v52 == 1)
    {
      (*(void (**)(char *, uint64_t))(v131 + 8))(v136, v132);
      sub_1853B93B8((uint64_t)v34, &qword_1E8FAF370);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56))(v53, 1, 1, v138);
      goto LABEL_12;
    }
    double v54 = v114;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v114, v34, v51);
    uint64_t v55 = MEMORY[0x1E4FBC860];
    uint64_t v143 = MEMORY[0x1E4FBC860];
    if (sub_186A1E32C())
    {
      unint64_t v56 = v116;
      UIView._appIntentsIntelligenceProvider.getter(&v139);
      if (v140)
      {
        sub_1858F3770(&v139, &v141);
        __swift_project_boxed_opaque_existential_0Tm(&v141, v142);
        objc_msgSend(v56, sel_bounds);
        sub_186A1E40C();
        uint64_t KeyPath = swift_getKeyPath();
        MEMORY[0x1F4188790](KeyPath);
        *(&v112 - 4) = (uint64_t)sub_1858F3964;
        *(&v112 - 3) = (uint64_t)v43;
        *(&v112 - 2) = (uint64_t)v56;
        uint64_t v58 = sub_186A1EB9C();
        swift_release();
        swift_bridgeObjectRelease();
        sub_185AF6248(v58);
        __swift_project_boxed_opaque_existential_0Tm(&v141, v142);
        uint64_t v112 = sub_186A1E4CC();
        unint64_t v113 = v59;
        char v60 = sub_186A1E36C();
        uint64_t v50 = v134;
        if (v60)
        {
          __swift_project_boxed_opaque_existential_0Tm(&v141, v142);
          uint64_t v55 = sub_186A1E4DC();
        }
        else
        {
          uint64_t v55 = MEMORY[0x1E4FBC860];
        }
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v141);
      }
      else
      {
        sub_1853B93B8((uint64_t)&v139, &qword_1E8FB0048);
        uint64_t v112 = 0;
        unint64_t v113 = 0xF000000000000000;
        uint64_t v50 = v134;
      }
    }
    else
    {
      uint64_t v112 = 0;
      unint64_t v113 = 0xF000000000000000;
    }
    uint64_t v61 = v50;
    uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
    uint64_t v63 = v135;
    v62(v38, v54, v135);
    if ((*(unsigned int (**)(char *, uint64_t))(v61 + 88))(v38, v63) == *MEMORY[0x1E4FB0B80])
    {
      (*(void (**)(char *, uint64_t))(v61 + 96))(v38, v63);
      uint64_t v64 = v119;
      uint64_t v65 = v118;
      uint64_t v66 = v120;
      (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v118, v38, v120);
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v29, v65, v66);
      id v67 = objc_allocWithZone((Class)sub_186A1DAEC());
      CGFloat v68 = (void *)sub_186A1DADC();
      objc_msgSend(v116, sel__intelligenceCollectRemoteContentIn_remoteContextWrapper_, v68, a7, a8, a9, a10);

      (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
    }
    else
    {
      uint64_t v69 = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v38, v63);
      MEMORY[0x1F4188790](v69);
      *(&v112 - _Block_object_dispose(&STACK[0x478], 8) = (uint64_t)v116;
      *((CGFloat *)&v112 - 7) = a7;
      *((CGFloat *)&v112 - 6) = a8;
      *((CGFloat *)&v112 - 5) = a9;
      *((CGFloat *)&v112 - 4) = a10;
      *(&v112 - 3) = v49;
      *(&v112 - 2) = (uint64_t)sub_1858F3964;
      *(&v112 - 1) = (uint64_t)v43;
      uint64_t v70 = sub_186A1DA3C();
      sub_185AF6248(v70);
    }
    double v71 = v126;
    double v72 = v136;
    if (sub_186A1E2CC())
    {
      uint64_t v74 = (uint64_t)v116;
      objc_msgSend(v116, sel_bounds);
      uint64_t v75 = v74;
      double v76 = v117;
      double v81 = -[UIView _convertRect:toViewInSameWindow:](v75, v117, v77, v78, v79, v80);
      v73.n128_f64[0] = v122(v76, v81);
    }
    ((void (*)(char *, char *, uint64_t, __n128))v62)(v125, v114, v135, v73);
    sub_186A1DD2C();
    if (sub_186A1E31C())
    {
      uint64_t v142 = sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
      *(void *)&long long v141 = v116;
      CGRect v82 = v116;
      objc_msgSend(v82, sel__intelligenceBaseClass);
      ObjCClassMetadatdouble a = swift_getObjCClassMetadata();
      sub_1858F301C(&v141, ObjCClassMetadata);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v141);
      sub_186A1DDBC();
      CGRect v84 = -[UIView __viewDelegate]((id *)v82);
      if (v84)
      {
        uint64_t v85 = v84;
        uint64_t v86 = sub_1853B985C(0, qword_1E8FAEAB0);
        uint64_t v142 = v86;
        *(void *)&long long v141 = v85;
        char v87 = v85;
        sub_1858F301C(&v141, v86);
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v141);
        sub_186A1DE0C();
      }
    }
    char v88 = sub_186A1E34C();
    uint64_t v89 = v134;
    if (v88)
    {
      id v90 = _UIGetAccessibilityLabelSafe(v116);
      if (v90)
      {
        id v91 = v90;
        sub_186A1E95C();
      }
      double v72 = v136;
      sub_186A1DDDC();
    }
    if (v113 >> 60 != 15)
    {
      sub_1858F3718(v112, v113);
      sub_186A1DDCC();
    }
    if (*(void *)(v55 + 16)) {
      sub_186A1DE1C();
    }
    else {
      swift_bridgeObjectRelease();
    }
    if (sub_186A1E32C())
    {
      id v92 = objc_msgSend(v116, sel__appEntityIdentifier);
      if (v92)
      {
        id v93 = v92;
        sub_186A1E95C();
      }
      sub_186A1DDEC();
      id v94 = objc_msgSend(v116, sel__appIntentIdentifier);
      if (v94)
      {
        CGRect v95 = v94;
        sub_186A1E95C();
      }
      sub_186A1DDFC();
    }
    uint64_t v96 = v127;
    sub_186A1E28C();
    uint64_t v97 = v129;
    uint64_t v98 = v128;
    uint64_t v99 = v130;
    (*(void (**)(char *, void, uint64_t))(v129 + 104))(v128, *MEMORY[0x1E4FB0BD8], v130);
    char v100 = sub_186A1E1AC();
    CGRect v101 = *(void (**)(char *, uint64_t))(v97 + 8);
    v101(v98, v99);
    v101(v96, v99);
    if (v100)
    {
      CGRect v102 = -[UIView __viewDelegate]((id *)v116);
      if (v102)
      {
        id v103 = v102;
        id v104 = objc_msgSend(v102, sel_userActivity);
        sub_186A1E07C();
        sub_186A1DDAC();
      }
      uint64_t v105 = (uint64_t)v123;
      sub_186A1DD9C();
      uint64_t v106 = sub_186A1E06C();
      int v107 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 48))(v105, 1, v106);
      sub_1853B93B8(v105, (uint64_t *)&unk_1E8FAF400);
      double v72 = v136;
      if (v107 == 1)
      {
        id v108 = objc_msgSend(v116, sel_userActivity);
        sub_186A1E07C();
        sub_186A1DDAC();
      }
    }
    if (sub_186A1E2EC())
    {
      sub_186A1DF7C();
      sub_1858F36AC(v112, v113);
      (*(void (**)(char *, uint64_t))(v137 + 8))(v71, v138);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v114, v135);
      (*(void (**)(char *, uint64_t))(v131 + 8))(v72, v132);
    }
    else
    {
      sub_1858F36AC(v112, v113);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v114, v135);
      (*(void (**)(char *, uint64_t))(v131 + 8))(v72, v132);
      uint64_t v110 = v137;
      uint64_t v109 = v138;
      uint64_t v111 = v115;
      (*(void (**)(uint64_t, char *, uint64_t))(v137 + 32))(v115, v71, v138);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v110 + 56))(v111, 0, 1, v109);
    }
    id v44 = v117;
  }
  swift_release();
LABEL_9:
}

uint64_t sub_1858ED47C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v125 = a1;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAF400);
  MEMORY[0x1F4188790](v15 - 8);
  unint64_t v113 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v114 = (char *)&v106 - v18;
  uint64_t v119 = sub_186A1E1BC();
  uint64_t v118 = *(void *)(v119 - 8);
  MEMORY[0x1F4188790](v119);
  uint64_t v117 = (char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v116 = (char *)&v106 - v21;
  uint64_t v127 = sub_186A1E03C();
  uint64_t v22 = *(void *)(v127 - 8);
  MEMORY[0x1F4188790](v127);
  uint64_t v115 = (char *)&v106 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_186A1E04C();
  uint64_t v112 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v106 - v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF370);
  MEMORY[0x1F4188790](v30 - 8);
  uint64_t v32 = (char *)&v106 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_186A1DF8C();
  uint64_t v122 = *(void *)(v124 - 8);
  MEMORY[0x1F4188790](v124);
  uint64_t v34 = (char *)&v106 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v37 = (char *)&v106 - v36;
  MEMORY[0x1F4188790](v38);
  __int16 v123 = (char *)&v106 - v39;
  uint64_t v121 = sub_186A1E38C();
  uint64_t v120 = *(void *)(v121 - 8);
  MEMORY[0x1F4188790](v121);
  uint64_t v126 = (char *)&v106 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = swift_allocObject();
  *(void *)(v128 + 16) = a3;
  id v41 = a3;
  if (objc_msgSend(a2, sel_isHidden)) {
    goto LABEL_7;
  }
  objc_msgSend(a2, sel_alpha);
  if (_UIViewIsFullyTransparentGivenAlpha(v42)
    || (id v43 = objc_msgSend(a2, sel_layer),
        uint64_t v110 = a2,
        uint64_t v111 = v41,
        id v44 = v43,
        unsigned __int8 v45 = objc_msgSend(v43, sel_disableUpdateMask),
        v44,
        id v41 = v111,
        (v45 & 0x10) != 0))
  {
LABEL_7:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(a4, 1, 1, v127);

    return swift_release();
  }
  else
  {
    uint64_t v108 = v22;
    uint64_t v109 = a4;
    sub_186A1DA9C();
    __swift_project_boxed_opaque_existential_0Tm(&v131, v132);
    sub_186A1E19C();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v131);
    if ((sub_186A1E33C() & 1) != 0
      && (v135.origin.double x = a5, v135.origin.y = a6, v135.size.width = a7, v135.size.height = a8, CGRectIsEmpty(v135)))
    {
      (*(void (**)(char *, uint64_t))(v120 + 8))(v126, v121);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56))(v109, 1, 1, v127);
    }
    else
    {
      sub_1858F1A18(v125, (uint64_t)v32, a5, a6, a7, a8);
      uint64_t v47 = v122;
      uint64_t v48 = v124;
      int v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v122 + 48))(v32, 1, v124);
      uint64_t v50 = v109;
      uint64_t v51 = v108;
      if (v49 == 1)
      {
        (*(void (**)(char *, uint64_t))(v120 + 8))(v126, v121);
        sub_1853B93B8((uint64_t)v32, &qword_1E8FAF370);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v50, 1, 1, v127);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v123, v32, v48);
        uint64_t v52 = MEMORY[0x1E4FBC860];
        uint64_t v133 = MEMORY[0x1E4FBC860];
        if (sub_186A1E32C())
        {
          uint64_t v53 = v110;
          UIView._appIntentsIntelligenceProvider.getter(&v129);
          if (v130)
          {
            sub_1858F3770(&v129, &v131);
            __swift_project_boxed_opaque_existential_0Tm(&v131, v132);
            objc_msgSend(v53, sel_bounds);
            sub_186A1E40C();
            uint64_t KeyPath = swift_getKeyPath();
            MEMORY[0x1F4188790](KeyPath);
            uint64_t v55 = v128;
            *(&v106 - 4) = (uint64_t)sub_1858F397C;
            *(&v106 - 3) = v55;
            *(&v106 - 2) = (uint64_t)v53;
            uint64_t v56 = sub_186A1EB9C();
            swift_release();
            swift_bridgeObjectRelease();
            sub_185AF6248(v56);
            __swift_project_boxed_opaque_existential_0Tm(&v131, v132);
            uint64_t v106 = sub_186A1E4CC();
            unint64_t v107 = v57;
            char v58 = sub_186A1E36C();
            uint64_t v47 = v122;
            if (v58)
            {
              __swift_project_boxed_opaque_existential_0Tm(&v131, v132);
              uint64_t v52 = sub_186A1E4DC();
            }
            else
            {
              uint64_t v52 = MEMORY[0x1E4FBC860];
            }
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v131);
          }
          else
          {
            sub_1853B93B8((uint64_t)&v129, &qword_1E8FB0048);
            uint64_t v106 = 0;
            unint64_t v107 = 0xF000000000000000;
            uint64_t v47 = v122;
          }
        }
        else
        {
          uint64_t v106 = 0;
          unint64_t v107 = 0xF000000000000000;
        }
        uint64_t v59 = v47;
        char v60 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
        uint64_t v61 = v124;
        v60(v37, v123, v124);
        if ((*(unsigned int (**)(char *, uint64_t))(v59 + 88))(v37, v61) == *MEMORY[0x1E4FB0B80])
        {
          (*(void (**)(char *, uint64_t))(v59 + 96))(v37, v61);
          uint64_t v62 = v112;
          (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v29, v37, v24);
          (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v26, v29, v24);
          id v63 = objc_allocWithZone((Class)sub_186A1DAEC());
          uint64_t v64 = (void *)sub_186A1DADC();
          objc_msgSend(v110, sel__intelligenceCollectRemoteContentIn_remoteContextWrapper_, v64, a5, a6, a7, a8);

          (*(void (**)(char *, uint64_t))(v62 + 8))(v29, v24);
        }
        else
        {
          uint64_t v65 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v37, v61);
          MEMORY[0x1F4188790](v65);
          *(&v106 - _Block_object_dispose(&STACK[0x478], 8) = (uint64_t)v110;
          *((double *)&v106 - 7) = a5;
          *((double *)&v106 - 6) = a6;
          *((double *)&v106 - 5) = a7;
          *((double *)&v106 - 4) = a8;
          *(&v106 - 3) = v125;
          *(&v106 - 2) = (uint64_t)sub_1858F397C;
          *(&v106 - 1) = v128;
          uint64_t v66 = sub_186A1DA3C();
          sub_185AF6248(v66);
        }
        id v67 = v115;
        CGFloat v68 = v126;
        uint64_t v69 = v52;
        uint64_t v70 = v108;
        if (sub_186A1E2CC())
        {
          uint64_t v72 = (uint64_t)v110;
          objc_msgSend(v110, sel_bounds);
          v71.n128_f64[0] = -[UIView _convertRect:toViewInSameWindow:](v72, v111, v73, v74, v75, v76);
        }
        ((void (*)(char *, char *, uint64_t, __n128))v60)(v34, v123, v124, v71);
        sub_186A1DD2C();
        if (sub_186A1E31C())
        {
          uint64_t v132 = sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
          *(void *)&long long v131 = v110;
          double v77 = v110;
          objc_msgSend(v77, sel__intelligenceBaseClass);
          ObjCClassMetadatdouble a = swift_getObjCClassMetadata();
          sub_1858F301C(&v131, ObjCClassMetadata);
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v131);
          sub_186A1DDBC();
          double v79 = -[UIView __viewDelegate]((id *)v77);
          if (v79)
          {
            double v80 = v79;
            uint64_t v81 = sub_1853B985C(0, qword_1E8FAEAB0);
            uint64_t v132 = v81;
            *(void *)&long long v131 = v80;
            CGRect v82 = v80;
            sub_1858F301C(&v131, v81);
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v131);
            sub_186A1DE0C();
          }
        }
        char v83 = sub_186A1E34C();
        uint64_t v84 = v122;
        if (v83)
        {
          id v85 = _UIGetAccessibilityLabelSafe(v110);
          if (v85)
          {
            uint64_t v86 = v85;
            sub_186A1E95C();
          }
          CGFloat v68 = v126;
          sub_186A1DDDC();
        }
        if (v107 >> 60 != 15)
        {
          sub_1858F3718(v106, v107);
          sub_186A1DDCC();
        }
        if (*(void *)(v69 + 16)) {
          sub_186A1DE1C();
        }
        else {
          swift_bridgeObjectRelease();
        }
        if (sub_186A1E32C())
        {
          id v87 = objc_msgSend(v110, sel__appEntityIdentifier);
          if (v87)
          {
            char v88 = v87;
            sub_186A1E95C();
          }
          sub_186A1DDEC();
          id v89 = objc_msgSend(v110, sel__appIntentIdentifier);
          if (v89)
          {
            id v90 = v89;
            sub_186A1E95C();
          }
          sub_186A1DDFC();
        }
        id v91 = v116;
        sub_186A1E28C();
        uint64_t v92 = v118;
        id v93 = v117;
        uint64_t v94 = v119;
        (*(void (**)(char *, void, uint64_t))(v118 + 104))(v117, *MEMORY[0x1E4FB0BD8], v119);
        char v95 = sub_186A1E1AC();
        uint64_t v96 = *(void (**)(char *, uint64_t))(v92 + 8);
        v96(v93, v94);
        v96(v91, v94);
        if (v95)
        {
          uint64_t v97 = -[UIView __viewDelegate]((id *)v110);
          if (v97)
          {
            uint64_t v98 = v97;
            id v99 = objc_msgSend(v97, sel_userActivity);
            sub_186A1E07C();
            sub_186A1DDAC();
          }
          uint64_t v100 = (uint64_t)v113;
          sub_186A1DD9C();
          uint64_t v101 = sub_186A1E06C();
          int v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 48))(v100, 1, v101);
          sub_1853B93B8(v100, (uint64_t *)&unk_1E8FAF400);
          CGFloat v68 = v126;
          if (v102 == 1)
          {
            id v103 = objc_msgSend(v110, sel_userActivity);
            sub_186A1E07C();
            sub_186A1DDAC();
          }
        }
        if (sub_186A1E2EC())
        {
          sub_186A1DF7C();
          sub_1858F36AC(v106, v107);
          (*(void (**)(char *, uint64_t))(v70 + 8))(v67, v127);
          (*(void (**)(char *, uint64_t))(v84 + 8))(v123, v124);
          (*(void (**)(char *, uint64_t))(v120 + 8))(v68, v121);
        }
        else
        {
          sub_1858F36AC(v106, v107);
          (*(void (**)(char *, uint64_t))(v84 + 8))(v123, v124);
          (*(void (**)(char *, uint64_t))(v120 + 8))(v68, v121);
          uint64_t v104 = v109;
          uint64_t v105 = v127;
          (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v109, v67, v127);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v104, 0, 1, v105);
        }
      }
    }

    return swift_release();
  }
}

uint64_t sub_1858EE4E4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v125 = a1;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAF400);
  MEMORY[0x1F4188790](v15 - 8);
  unint64_t v113 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v114 = (char *)&v106 - v18;
  uint64_t v119 = sub_186A1E1BC();
  uint64_t v118 = *(void *)(v119 - 8);
  MEMORY[0x1F4188790](v119);
  uint64_t v117 = (char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v116 = (char *)&v106 - v21;
  uint64_t v127 = sub_186A1E03C();
  uint64_t v22 = *(void *)(v127 - 8);
  MEMORY[0x1F4188790](v127);
  uint64_t v115 = (char *)&v106 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_186A1E04C();
  uint64_t v112 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v106 - v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF370);
  MEMORY[0x1F4188790](v30 - 8);
  uint64_t v32 = (char *)&v106 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_186A1DF8C();
  uint64_t v122 = *(void *)(v124 - 8);
  MEMORY[0x1F4188790](v124);
  uint64_t v34 = (char *)&v106 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v37 = (char *)&v106 - v36;
  MEMORY[0x1F4188790](v38);
  __int16 v123 = (char *)&v106 - v39;
  uint64_t v121 = sub_186A1E38C();
  uint64_t v120 = *(void *)(v121 - 8);
  MEMORY[0x1F4188790](v121);
  uint64_t v126 = (char *)&v106 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = swift_allocObject();
  *(void *)(v128 + 16) = a3;
  id v41 = a3;
  if (objc_msgSend(a2, sel_isHidden)) {
    goto LABEL_7;
  }
  objc_msgSend(a2, sel_alpha);
  if (_UIViewIsFullyTransparentGivenAlpha(v42)
    || (id v43 = objc_msgSend(a2, sel_layer),
        uint64_t v110 = a2,
        uint64_t v111 = v41,
        id v44 = v43,
        unsigned __int8 v45 = objc_msgSend(v43, sel_disableUpdateMask),
        v44,
        id v41 = v111,
        (v45 & 0x10) != 0))
  {
LABEL_7:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(a4, 1, 1, v127);

    return swift_release();
  }
  else
  {
    uint64_t v108 = v22;
    uint64_t v109 = a4;
    sub_186A1DA9C();
    __swift_project_boxed_opaque_existential_0Tm(&v131, v132);
    sub_186A1E19C();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v131);
    if ((sub_186A1E33C() & 1) != 0
      && (v135.origin.double x = a5, v135.origin.y = a6, v135.size.width = a7, v135.size.height = a8, CGRectIsEmpty(v135)))
    {
      (*(void (**)(char *, uint64_t))(v120 + 8))(v126, v121);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56))(v109, 1, 1, v127);
    }
    else
    {
      sub_1858F1A18(v125, (uint64_t)v32, a5, a6, a7, a8);
      uint64_t v47 = v122;
      uint64_t v48 = v124;
      int v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v122 + 48))(v32, 1, v124);
      uint64_t v50 = v109;
      uint64_t v51 = v108;
      if (v49 == 1)
      {
        (*(void (**)(char *, uint64_t))(v120 + 8))(v126, v121);
        sub_1853B93B8((uint64_t)v32, &qword_1E8FAF370);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v50, 1, 1, v127);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v123, v32, v48);
        uint64_t v52 = MEMORY[0x1E4FBC860];
        uint64_t v133 = MEMORY[0x1E4FBC860];
        if (sub_186A1E32C())
        {
          uint64_t v53 = v110;
          UIView._appIntentsIntelligenceProvider.getter(&v129);
          if (v130)
          {
            sub_1858F3770(&v129, &v131);
            __swift_project_boxed_opaque_existential_0Tm(&v131, v132);
            objc_msgSend(v53, sel_bounds);
            sub_186A1E40C();
            uint64_t KeyPath = swift_getKeyPath();
            MEMORY[0x1F4188790](KeyPath);
            uint64_t v55 = v128;
            *(&v106 - 4) = (uint64_t)sub_1858F3920;
            *(&v106 - 3) = v55;
            *(&v106 - 2) = (uint64_t)v53;
            uint64_t v56 = sub_186A1EB9C();
            swift_release();
            swift_bridgeObjectRelease();
            sub_185AF6248(v56);
            __swift_project_boxed_opaque_existential_0Tm(&v131, v132);
            uint64_t v106 = sub_186A1E4CC();
            unint64_t v107 = v57;
            char v58 = sub_186A1E36C();
            uint64_t v47 = v122;
            if (v58)
            {
              __swift_project_boxed_opaque_existential_0Tm(&v131, v132);
              uint64_t v52 = sub_186A1E4DC();
            }
            else
            {
              uint64_t v52 = MEMORY[0x1E4FBC860];
            }
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v131);
          }
          else
          {
            sub_1853B93B8((uint64_t)&v129, &qword_1E8FB0048);
            uint64_t v106 = 0;
            unint64_t v107 = 0xF000000000000000;
            uint64_t v47 = v122;
          }
        }
        else
        {
          uint64_t v106 = 0;
          unint64_t v107 = 0xF000000000000000;
        }
        uint64_t v59 = v47;
        char v60 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
        uint64_t v61 = v124;
        v60(v37, v123, v124);
        if ((*(unsigned int (**)(char *, uint64_t))(v59 + 88))(v37, v61) == *MEMORY[0x1E4FB0B80])
        {
          (*(void (**)(char *, uint64_t))(v59 + 96))(v37, v61);
          uint64_t v62 = v112;
          (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v29, v37, v24);
          (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v26, v29, v24);
          id v63 = objc_allocWithZone((Class)sub_186A1DAEC());
          uint64_t v64 = (void *)sub_186A1DADC();
          objc_msgSend(v110, sel__intelligenceCollectRemoteContentIn_remoteContextWrapper_, v64, a5, a6, a7, a8);

          (*(void (**)(char *, uint64_t))(v62 + 8))(v29, v24);
        }
        else
        {
          uint64_t v65 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v37, v61);
          MEMORY[0x1F4188790](v65);
          *(&v106 - _Block_object_dispose(&STACK[0x478], 8) = (uint64_t)v110;
          *((double *)&v106 - 7) = a5;
          *((double *)&v106 - 6) = a6;
          *((double *)&v106 - 5) = a7;
          *((double *)&v106 - 4) = a8;
          *(&v106 - 3) = v125;
          *(&v106 - 2) = (uint64_t)sub_1858F3920;
          *(&v106 - 1) = v128;
          uint64_t v66 = sub_186A1DA3C();
          sub_185AF6248(v66);
        }
        id v67 = v115;
        CGFloat v68 = v126;
        uint64_t v69 = v52;
        uint64_t v70 = v108;
        if (sub_186A1E2CC())
        {
          uint64_t v72 = (uint64_t)v110;
          objc_msgSend(v110, sel_bounds);
          v71.n128_f64[0] = -[UIView _convertRect:toViewInSameWindow:](v72, v111, v73, v74, v75, v76);
        }
        ((void (*)(char *, char *, uint64_t, __n128))v60)(v34, v123, v124, v71);
        sub_186A1DD2C();
        if (sub_186A1E31C())
        {
          uint64_t v132 = sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
          *(void *)&long long v131 = v110;
          double v77 = v110;
          objc_msgSend(v77, sel__intelligenceBaseClass);
          ObjCClassMetadatdouble a = swift_getObjCClassMetadata();
          sub_1858F301C(&v131, ObjCClassMetadata);
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v131);
          sub_186A1DDBC();
          double v79 = -[UIView __viewDelegate]((id *)v77);
          if (v79)
          {
            double v80 = v79;
            uint64_t v81 = sub_1853B985C(0, qword_1E8FAEAB0);
            uint64_t v132 = v81;
            *(void *)&long long v131 = v80;
            CGRect v82 = v80;
            sub_1858F301C(&v131, v81);
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v131);
            sub_186A1DE0C();
          }
        }
        char v83 = sub_186A1E34C();
        uint64_t v84 = v122;
        if (v83)
        {
          id v85 = _UIGetAccessibilityLabelSafe(v110);
          if (v85)
          {
            uint64_t v86 = v85;
            sub_186A1E95C();
          }
          CGFloat v68 = v126;
          sub_186A1DDDC();
        }
        if (v107 >> 60 != 15)
        {
          sub_1858F3718(v106, v107);
          sub_186A1DDCC();
        }
        if (*(void *)(v69 + 16)) {
          sub_186A1DE1C();
        }
        else {
          swift_bridgeObjectRelease();
        }
        if (sub_186A1E32C())
        {
          id v87 = objc_msgSend(v110, sel__appEntityIdentifier);
          if (v87)
          {
            char v88 = v87;
            sub_186A1E95C();
          }
          sub_186A1DDEC();
          id v89 = objc_msgSend(v110, sel__appIntentIdentifier);
          if (v89)
          {
            id v90 = v89;
            sub_186A1E95C();
          }
          sub_186A1DDFC();
        }
        id v91 = v116;
        sub_186A1E28C();
        uint64_t v92 = v118;
        id v93 = v117;
        uint64_t v94 = v119;
        (*(void (**)(char *, void, uint64_t))(v118 + 104))(v117, *MEMORY[0x1E4FB0BD8], v119);
        char v95 = sub_186A1E1AC();
        uint64_t v96 = *(void (**)(char *, uint64_t))(v92 + 8);
        v96(v93, v94);
        v96(v91, v94);
        if (v95)
        {
          uint64_t v97 = -[UIView __viewDelegate]((id *)v110);
          if (v97)
          {
            uint64_t v98 = v97;
            id v99 = objc_msgSend(v97, sel_userActivity);
            sub_186A1E07C();
            sub_186A1DDAC();
          }
          uint64_t v100 = (uint64_t)v113;
          sub_186A1DD9C();
          uint64_t v101 = sub_186A1E06C();
          int v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 48))(v100, 1, v101);
          sub_1853B93B8(v100, (uint64_t *)&unk_1E8FAF400);
          CGFloat v68 = v126;
          if (v102 == 1)
          {
            id v103 = objc_msgSend(v110, sel_userActivity);
            sub_186A1E07C();
            sub_186A1DDAC();
          }
        }
        if (sub_186A1E2EC())
        {
          sub_186A1DF7C();
          sub_1858F36AC(v106, v107);
          (*(void (**)(char *, uint64_t))(v70 + 8))(v67, v127);
          (*(void (**)(char *, uint64_t))(v84 + 8))(v123, v124);
          (*(void (**)(char *, uint64_t))(v120 + 8))(v68, v121);
        }
        else
        {
          sub_1858F36AC(v106, v107);
          (*(void (**)(char *, uint64_t))(v84 + 8))(v123, v124);
          (*(void (**)(char *, uint64_t))(v120 + 8))(v68, v121);
          uint64_t v104 = v109;
          uint64_t v105 = v127;
          (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v109, v67, v127);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v104, 0, 1, v105);
        }
      }
    }

    return swift_release();
  }
}

uint64_t sub_1858EF54C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>, CGFloat a8@<D4>, CGFloat a9@<D5>)
{
  uint64_t v127 = a1;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAF400);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v114 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v115 = (char *)&v107 - v20;
  uint64_t v121 = sub_186A1E1BC();
  uint64_t v120 = *(void *)(v121 - 8);
  MEMORY[0x1F4188790](v121);
  uint64_t v119 = (char *)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v118 = (char *)&v107 - v23;
  uint64_t v24 = sub_186A1E03C();
  uint64_t v129 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v116 = (char *)&v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_186A1E04C();
  uint64_t v113 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v107 - v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF370);
  MEMORY[0x1F4188790](v32 - 8);
  uint64_t v34 = (char *)&v107 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_186A1DF8C();
  uint64_t v124 = *(void *)(v126 - 8);
  MEMORY[0x1F4188790](v126);
  uint64_t v117 = (char *)&v107 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v107 - v37;
  MEMORY[0x1F4188790](v39);
  uint64_t v125 = (char *)&v107 - v40;
  uint64_t v123 = sub_186A1E38C();
  uint64_t v122 = *(void *)(v123 - 8);
  MEMORY[0x1F4188790](v123);
  uint64_t v128 = (char *)&v107 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = swift_allocObject();
  *(CGFloat *)(v42 + 16) = a8;
  *(CGFloat *)(v42 + 24) = a9;
  if ((objc_msgSend(a2, sel_isHidden) & 1) == 0)
  {
    objc_msgSend(a2, sel_alpha);
    if (!_UIViewIsFullyTransparentGivenAlpha(v43))
    {
      id v44 = objc_msgSend(a2, sel_layer);
      uint64_t v112 = v24;
      id v45 = v44;
      unsigned __int8 v46 = objc_msgSend(v44, sel_disableUpdateMask);

      uint64_t v24 = v112;
      if ((v46 & 0x10) == 0)
      {
        id v110 = a2;
        uint64_t v111 = a3;
        sub_186A1DA9C();
        __swift_project_boxed_opaque_existential_0Tm(&v132, v134);
        sub_186A1E19C();
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v132);
        if (sub_186A1E33C())
        {
          v137.origin.double x = a4;
          v137.origin.double y = a5;
          v137.size.double width = a6;
          v137.size.CGFloat height = a7;
          if (CGRectIsEmpty(v137))
          {
            (*(void (**)(char *, uint64_t))(v122 + 8))(v128, v123);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(v111, 1, 1, v112);
            return swift_release();
          }
        }
        sub_1858F1A18(v127, (uint64_t)v34, a4, a5, a6, a7);
        uint64_t v47 = v124;
        uint64_t v48 = v126;
        int v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 48))(v34, 1, v126);
        uint64_t v50 = v111;
        if (v49 == 1)
        {
          (*(void (**)(char *, uint64_t))(v122 + 8))(v128, v123);
          sub_1853B93B8((uint64_t)v34, &qword_1E8FAF370);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(v50, 1, 1, v112);
          return swift_release();
        }
        (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v125, v34, v48);
        uint64_t v51 = MEMORY[0x1E4FBC860];
        v135[2] = MEMORY[0x1E4FBC860];
        if (sub_186A1E32C())
        {
          id v52 = v110;
          UIView._appIntentsIntelligenceProvider.getter(&v130);
          if (v131)
          {
            sub_1858F3770(&v130, &v132);
            __swift_project_boxed_opaque_existential_0Tm(&v132, v134);
            objc_msgSend(v52, sel_bounds);
            sub_186A1E40C();
            uint64_t KeyPath = swift_getKeyPath();
            MEMORY[0x1F4188790](KeyPath);
            *(&v107 - 4) = (uint64_t)sub_1858F36A0;
            *(&v107 - 3) = v42;
            *(&v107 - 2) = (uint64_t)v52;
            uint64_t v54 = sub_186A1EB9C();
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v47 = v124;
            sub_185AF6248(v54);
            __swift_project_boxed_opaque_existential_0Tm(&v132, v134);
            uint64_t v108 = sub_186A1E4CC();
            unint64_t v109 = v55;
            char v56 = sub_186A1E36C();
            unint64_t v57 = v116;
            if (v56)
            {
              __swift_project_boxed_opaque_existential_0Tm(&v132, v134);
              uint64_t v58 = sub_186A1E4DC();
            }
            else
            {
              uint64_t v58 = MEMORY[0x1E4FBC860];
            }
            uint64_t v107 = v58;
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v132);
            goto LABEL_21;
          }
          sub_1853B93B8((uint64_t)&v130, &qword_1E8FB0048);
          uint64_t v108 = 0;
          unint64_t v109 = 0xF000000000000000;
          unint64_t v59 = MEMORY[0x1E4FBC860];
          char v60 = &v133;
        }
        else
        {
          uint64_t v107 = v51;
          uint64_t v108 = 0;
          unint64_t v59 = 0xF000000000000000;
          char v60 = (char *)v135;
        }
        *((void *)v60 - 32) = v59;
        unint64_t v57 = v116;
LABEL_21:
        uint64_t v61 = v47;
        uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
        uint64_t v63 = v126;
        v62(v38, v125, v126);
        if ((*(unsigned int (**)(char *, uint64_t))(v61 + 88))(v38, v63) == *MEMORY[0x1E4FB0B80])
        {
          (*(void (**)(char *, uint64_t))(v61 + 96))(v38, v63);
          uint64_t v64 = v113;
          (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v31, v38, v26);
          (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v28, v31, v26);
          id v65 = objc_allocWithZone((Class)sub_186A1DAEC());
          uint64_t v66 = (void *)sub_186A1DADC();
          id v67 = v110;
          objc_msgSend(v110, sel__intelligenceCollectRemoteContentIn_remoteContextWrapper_, v66, a4, a5, a6, a7);

          (*(void (**)(char *, uint64_t))(v64 + 8))(v31, v26);
        }
        else
        {
          uint64_t v68 = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v38, v63);
          MEMORY[0x1F4188790](v68);
          id v67 = v110;
          *(&v107 - _Block_object_dispose(&STACK[0x478], 8) = (uint64_t)v110;
          *((CGFloat *)&v107 - 7) = a4;
          *((CGFloat *)&v107 - 6) = a5;
          *((CGFloat *)&v107 - 5) = a6;
          *((CGFloat *)&v107 - 4) = a7;
          *(&v107 - 3) = v127;
          *(&v107 - 2) = (uint64_t)sub_1858F36A0;
          *(&v107 - 1) = v42;
          uint64_t v69 = sub_186A1DA3C();
          sub_185AF6248(v69);
        }
        uint64_t v70 = v128;
        __n128 v71 = v117;
        uint64_t v72 = v107;
        if (sub_186A1E2CC())
        {
          objc_msgSend(v67, sel_bounds);
          *(CGRect *)v73.n128_u64 = CGRectOffset(v138, a8, a9);
        }
        ((void (*)(char *, char *, uint64_t, __n128, __n128, __n128, __n128))v62)(v71, v125, v126, v73, v74, v75, v76);
        sub_186A1DD2C();
        if (sub_186A1E31C())
        {
          uint64_t v134 = sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
          *(void *)&long long v132 = v67;
          id v77 = v67;
          objc_msgSend(v77, sel__intelligenceBaseClass);
          ObjCClassMetadatdouble a = swift_getObjCClassMetadata();
          sub_1858F301C(&v132, ObjCClassMetadata);
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v132);
          sub_186A1DDBC();
          double v79 = -[UIView __viewDelegate]((id *)v77);
          if (v79)
          {
            double v80 = v79;
            uint64_t v81 = sub_1853B985C(0, qword_1E8FAEAB0);
            uint64_t v134 = v81;
            *(void *)&long long v132 = v80;
            CGRect v82 = v80;
            sub_1858F301C(&v132, v81);
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v132);
            sub_186A1DE0C();
          }
        }
        if (sub_186A1E34C())
        {
          id v83 = _UIGetAccessibilityLabelSafe(v67);
          if (v83)
          {
            uint64_t v84 = v83;
            sub_186A1E95C();
          }
          sub_186A1DDDC();
        }
        if (v109 >> 60 != 15)
        {
          sub_1858F3718(v108, v109);
          sub_186A1DDCC();
        }
        if (*(void *)(v72 + 16)) {
          sub_186A1DE1C();
        }
        else {
          swift_bridgeObjectRelease();
        }
        if (sub_186A1E32C())
        {
          id v85 = objc_msgSend(v67, sel__appEntityIdentifier);
          if (v85)
          {
            uint64_t v86 = v85;
            sub_186A1E95C();
          }
          sub_186A1DDEC();
          id v87 = objc_msgSend(v67, sel__appIntentIdentifier);
          if (v87)
          {
            char v88 = v87;
            sub_186A1E95C();
          }
          sub_186A1DDFC();
        }
        id v89 = (id *)v67;
        id v90 = v118;
        sub_186A1E28C();
        uint64_t v91 = v120;
        uint64_t v92 = v119;
        uint64_t v93 = v121;
        (*(void (**)(char *, void, uint64_t))(v120 + 104))(v119, *MEMORY[0x1E4FB0BD8], v121);
        char v94 = sub_186A1E1AC();
        char v95 = *(void (**)(char *, uint64_t))(v91 + 8);
        v95(v92, v93);
        v95(v90, v93);
        if (v94)
        {
          uint64_t v96 = -[UIView __viewDelegate](v89);
          if (v96)
          {
            uint64_t v97 = v96;
            id v98 = objc_msgSend(v96, sel_userActivity);
            sub_186A1E07C();
            sub_186A1DDAC();
          }
          uint64_t v99 = (uint64_t)v114;
          sub_186A1DD9C();
          uint64_t v100 = sub_186A1E06C();
          int v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 48))(v99, 1, v100);
          sub_1853B93B8(v99, (uint64_t *)&unk_1E8FAF400);
          if (v101 == 1)
          {
            id v102 = objc_msgSend(v89, sel_userActivity);
            sub_186A1E07C();
            sub_186A1DDAC();
          }
        }
        if (sub_186A1E2EC())
        {
          sub_186A1DF7C();
          sub_1858F36AC(v108, v109);
          (*(void (**)(char *, uint64_t))(v129 + 8))(v57, v112);
          (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v126);
          (*(void (**)(char *, uint64_t))(v122 + 8))(v70, v123);
        }
        else
        {
          sub_1858F36AC(v108, v109);
          (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v126);
          (*(void (**)(char *, uint64_t))(v122 + 8))(v70, v123);
          uint64_t v103 = v129;
          uint64_t v104 = v111;
          uint64_t v105 = v112;
          (*(void (**)(uint64_t, char *, uint64_t))(v129 + 32))(v111, v57, v112);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56))(v104, 0, 1, v105);
        }
        return swift_release();
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(a3, 1, 1, v24);
  return swift_release();
}

uint64_t sub_1858F05C0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>, CGFloat a8@<D4>, CGFloat a9@<D5>)
{
  uint64_t v127 = a1;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1E8FAF400);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v114 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v115 = (char *)&v107 - v20;
  uint64_t v121 = sub_186A1E1BC();
  uint64_t v120 = *(void *)(v121 - 8);
  MEMORY[0x1F4188790](v121);
  uint64_t v119 = (char *)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v118 = (char *)&v107 - v23;
  uint64_t v24 = sub_186A1E03C();
  uint64_t v129 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v116 = (char *)&v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_186A1E04C();
  uint64_t v113 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v107 - v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF370);
  MEMORY[0x1F4188790](v32 - 8);
  uint64_t v34 = (char *)&v107 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_186A1DF8C();
  uint64_t v124 = *(void *)(v126 - 8);
  MEMORY[0x1F4188790](v126);
  uint64_t v117 = (char *)&v107 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v107 - v37;
  MEMORY[0x1F4188790](v39);
  uint64_t v125 = (char *)&v107 - v40;
  uint64_t v123 = sub_186A1E38C();
  uint64_t v122 = *(void *)(v123 - 8);
  MEMORY[0x1F4188790](v123);
  uint64_t v128 = (char *)&v107 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = swift_allocObject();
  *(CGFloat *)(v42 + 16) = a8;
  *(CGFloat *)(v42 + 24) = a9;
  if ((objc_msgSend(a2, sel_isHidden) & 1) == 0)
  {
    objc_msgSend(a2, sel_alpha);
    if (!_UIViewIsFullyTransparentGivenAlpha(v43))
    {
      id v44 = objc_msgSend(a2, sel_layer);
      uint64_t v112 = v24;
      id v45 = v44;
      unsigned __int8 v46 = objc_msgSend(v44, sel_disableUpdateMask);

      uint64_t v24 = v112;
      if ((v46 & 0x10) == 0)
      {
        id v110 = a2;
        uint64_t v111 = a3;
        sub_186A1DA9C();
        __swift_project_boxed_opaque_existential_0Tm(&v132, v134);
        sub_186A1E19C();
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v132);
        if (sub_186A1E33C())
        {
          v137.origin.double x = a4;
          v137.origin.double y = a5;
          v137.size.double width = a6;
          v137.size.CGFloat height = a7;
          if (CGRectIsEmpty(v137))
          {
            (*(void (**)(char *, uint64_t))(v122 + 8))(v128, v123);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(v111, 1, 1, v112);
            return swift_release();
          }
        }
        sub_1858F1A18(v127, (uint64_t)v34, a4, a5, a6, a7);
        uint64_t v47 = v124;
        uint64_t v48 = v126;
        int v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 48))(v34, 1, v126);
        uint64_t v50 = v111;
        if (v49 == 1)
        {
          (*(void (**)(char *, uint64_t))(v122 + 8))(v128, v123);
          sub_1853B93B8((uint64_t)v34, &qword_1E8FAF370);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(v50, 1, 1, v112);
          return swift_release();
        }
        (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v125, v34, v48);
        uint64_t v51 = MEMORY[0x1E4FBC860];
        v135[2] = MEMORY[0x1E4FBC860];
        if (sub_186A1E32C())
        {
          id v52 = v110;
          UIView._appIntentsIntelligenceProvider.getter(&v130);
          if (v131)
          {
            sub_1858F3770(&v130, &v132);
            __swift_project_boxed_opaque_existential_0Tm(&v132, v134);
            objc_msgSend(v52, sel_bounds);
            sub_186A1E40C();
            uint64_t KeyPath = swift_getKeyPath();
            MEMORY[0x1F4188790](KeyPath);
            *(&v107 - 4) = (uint64_t)sub_1858F36A0;
            *(&v107 - 3) = v42;
            *(&v107 - 2) = (uint64_t)v52;
            uint64_t v54 = sub_186A1EB9C();
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v47 = v124;
            sub_185AF6248(v54);
            __swift_project_boxed_opaque_existential_0Tm(&v132, v134);
            uint64_t v108 = sub_186A1E4CC();
            unint64_t v109 = v55;
            char v56 = sub_186A1E36C();
            unint64_t v57 = v116;
            if (v56)
            {
              __swift_project_boxed_opaque_existential_0Tm(&v132, v134);
              uint64_t v58 = sub_186A1E4DC();
            }
            else
            {
              uint64_t v58 = MEMORY[0x1E4FBC860];
            }
            uint64_t v107 = v58;
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v132);
            goto LABEL_21;
          }
          sub_1853B93B8((uint64_t)&v130, &qword_1E8FB0048);
          uint64_t v108 = 0;
          unint64_t v109 = 0xF000000000000000;
          unint64_t v59 = MEMORY[0x1E4FBC860];
          char v60 = &v133;
        }
        else
        {
          uint64_t v107 = v51;
          uint64_t v108 = 0;
          unint64_t v59 = 0xF000000000000000;
          char v60 = (char *)v135;
        }
        *((void *)v60 - 32) = v59;
        unint64_t v57 = v116;
LABEL_21:
        uint64_t v61 = v47;
        uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
        uint64_t v63 = v126;
        v62(v38, v125, v126);
        if ((*(unsigned int (**)(char *, uint64_t))(v61 + 88))(v38, v63) == *MEMORY[0x1E4FB0B80])
        {
          (*(void (**)(char *, uint64_t))(v61 + 96))(v38, v63);
          uint64_t v64 = v113;
          (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v31, v38, v26);
          (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v28, v31, v26);
          id v65 = objc_allocWithZone((Class)sub_186A1DAEC());
          uint64_t v66 = (void *)sub_186A1DADC();
          id v67 = v110;
          objc_msgSend(v110, sel__intelligenceCollectRemoteContentIn_remoteContextWrapper_, v66, a4, a5, a6, a7);

          (*(void (**)(char *, uint64_t))(v64 + 8))(v31, v26);
        }
        else
        {
          uint64_t v68 = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v38, v63);
          MEMORY[0x1F4188790](v68);
          id v67 = v110;
          *(&v107 - _Block_object_dispose(&STACK[0x478], 8) = (uint64_t)v110;
          *((CGFloat *)&v107 - 7) = a4;
          *((CGFloat *)&v107 - 6) = a5;
          *((CGFloat *)&v107 - 5) = a6;
          *((CGFloat *)&v107 - 4) = a7;
          *(&v107 - 3) = v127;
          *(&v107 - 2) = (uint64_t)sub_1858F36A0;
          *(&v107 - 1) = v42;
          uint64_t v69 = sub_186A1DA3C();
          sub_185AF6248(v69);
        }
        uint64_t v70 = v128;
        __n128 v71 = v117;
        uint64_t v72 = v107;
        if (sub_186A1E2CC())
        {
          objc_msgSend(v67, sel_bounds);
          *(CGRect *)v73.n128_u64 = CGRectOffset(v138, a8, a9);
        }
        ((void (*)(char *, char *, uint64_t, __n128, __n128, __n128, __n128))v62)(v71, v125, v126, v73, v74, v75, v76);
        sub_186A1DD2C();
        if (sub_186A1E31C())
        {
          uint64_t v134 = sub_1853B985C(0, (unint64_t *)&qword_1E8FAFDD0);
          *(void *)&long long v132 = v67;
          id v77 = v67;
          objc_msgSend(v77, sel__intelligenceBaseClass);
          ObjCClassMetadatdouble a = swift_getObjCClassMetadata();
          sub_1858F301C(&v132, ObjCClassMetadata);
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v132);
          sub_186A1DDBC();
          double v79 = -[UIView __viewDelegate]((id *)v77);
          if (v79)
          {
            double v80 = v79;
            uint64_t v81 = sub_1853B985C(0, qword_1E8FAEAB0);
            uint64_t v134 = v81;
            *(void *)&long long v132 = v80;
            CGRect v82 = v80;
            sub_1858F301C(&v132, v81);
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v132);
            sub_186A1DE0C();
          }
        }
        if (sub_186A1E34C())
        {
          id v83 = _UIGetAccessibilityLabelSafe(v67);
          if (v83)
          {
            uint64_t v84 = v83;
            sub_186A1E95C();
          }
          sub_186A1DDDC();
        }
        if (v109 >> 60 != 15)
        {
          sub_1858F3718(v108, v109);
          sub_186A1DDCC();
        }
        if (*(void *)(v72 + 16)) {
          sub_186A1DE1C();
        }
        else {
          swift_bridgeObjectRelease();
        }
        if (sub_186A1E32C())
        {
          id v85 = objc_msgSend(v67, sel__appEntityIdentifier);
          if (v85)
          {
            uint64_t v86 = v85;
            sub_186A1E95C();
          }
          sub_186A1DDEC();
          id v87 = objc_msgSend(v67, sel__appIntentIdentifier);
          if (v87)
          {
            char v88 = v87;
            sub_186A1E95C();
          }
          sub_186A1DDFC();
        }
        id v89 = (id *)v67;
        id v90 = v118;
        sub_186A1E28C();
        uint64_t v91 = v120;
        uint64_t v92 = v119;
        uint64_t v93 = v121;
        (*(void (**)(char *, void, uint64_t))(v120 + 104))(v119, *MEMORY[0x1E4FB0BD8], v121);
        char v94 = sub_186A1E1AC();
        char v95 = *(void (**)(char *, uint64_t))(v91 + 8);
        v95(v92, v93);
        v95(v90, v93);
        if (v94)
        {
          uint64_t v96 = -[UIView __viewDelegate](v89);
          if (v96)
          {
            uint64_t v97 = v96;
            id v98 = objc_msgSend(v96, sel_userActivity);
            sub_186A1E07C();
            sub_186A1DDAC();
          }
          uint64_t v99 = (uint64_t)v114;
          sub_186A1DD9C();
          uint64_t v100 = sub_186A1E06C();
          int v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 48))(v99, 1, v100);
          sub_1853B93B8(v99, (uint64_t *)&unk_1E8FAF400);
          if (v101 == 1)
          {
            id v102 = objc_msgSend(v89, sel_userActivity);
            sub_186A1E07C();
            sub_186A1DDAC();
          }
        }
        if (sub_186A1E2EC())
        {
          sub_186A1DF7C();
          sub_1858F36AC(v108, v109);
          (*(void (**)(char *, uint64_t))(v129 + 8))(v57, v112);
          (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v126);
          (*(void (**)(char *, uint64_t))(v122 + 8))(v70, v123);
        }
        else
        {
          sub_1858F36AC(v108, v109);
          (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v126);
          (*(void (**)(char *, uint64_t))(v122 + 8))(v70, v123);
          uint64_t v103 = v129;
          uint64_t v104 = v111;
          uint64_t v105 = v112;
          (*(void (**)(uint64_t, char *, uint64_t))(v129 + 32))(v111, v57, v112);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56))(v104, 0, 1, v105);
        }
        return swift_release();
      }
    }
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(a3, 1, 1, v24);
  return swift_release();
}

uint64_t UIView._intelligenceCollectRemoteContent(in:remoteContextWrapper:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF310);
  MEMORY[0x1F4188790](v9 - 8);
  id v11 = (char *)&v21[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_186A1E03C();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v21[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_186A1E44C();
  sub_186A1E43C();
  sub_186A1E42C();
  swift_release();
  v21[3] = sub_186A1E04C();
  v21[4] = MEMORY[0x1E4FB0BB8];
  __swift_allocate_boxed_opaque_existential_0(v21);
  sub_186A1DACC();
  id v16 = objc_allocWithZone((Class)sub_186A1DABC());
  uint64_t v17 = (void *)sub_186A1DAAC();
  id v18 = v4;
  sub_1858ED47C((uint64_t)v17, v18, v18, (uint64_t)v11, a1, a2, a3, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {

    sub_1853B93B8((uint64_t)v11, &qword_1E8FAF310);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    sub_186A1E39C();

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }

  sub_186A1E43C();
  sub_186A1E41C();
  swift_release();
  return swift_release();
}

uint64_t sub_1858F1A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double v7 = v6;
  uint64_t v87 = a2;
  uint64_t v13 = sub_186A1DF8C();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  double v79 = &v74[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF3F8);
  MEMORY[0x1F4188790](v16);
  id v85 = &v74[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = &v74[-v19];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF370);
  MEMORY[0x1F4188790](v21 - 8);
  id v77 = &v74[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v23);
  __n128 v76 = &v74[-v24];
  MEMORY[0x1F4188790](v25);
  double v78 = &v74[-v26];
  MEMORY[0x1F4188790](v27);
  char v88 = &v74[-v28];
  MEMORY[0x1F4188790](v29);
  id v89 = &v74[-v30];
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = &v74[-v32];
  MEMORY[0x1F4188790](v34);
  uint64_t v36 = &v74[-v35];
  MEMORY[0x1F4188790](v37);
  uint64_t v39 = &v74[-v38];
  uint64_t v40 = -[UIView __viewDelegate](v7);
  uint64_t v82 = a1;
  double v80 = v7;
  uint64_t v86 = v40;
  uint64_t v84 = v16;
  if (!v40)
  {
    uint64_t v48 = *MEMORY[0x1E4FB0B68];
    uint64_t v47 = (uint64_t)v88;
    goto LABEL_12;
  }
  uint64_t v81 = (void (*)(uint64_t, void, uint64_t))v33;
  MEMORY[0x1F4188790](v40);
  *(void *)&v74[-48] = v41;
  *(double *)&v74[-40] = a3;
  *(double *)&v74[-32] = a4;
  *(double *)&v74[-24] = a5;
  *(double *)&v74[-16] = a6;
  *(void *)&v74[-8] = a1;
  id v42 = v41;
  sub_186A1DA4C();
  double v43 = *(void (**)(unsigned char *))(v14 + 104);
  unsigned int v83 = *MEMORY[0x1E4FB0B68];
  v43(v36);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v14 + 56))(v36, 0, 1, v13);
  uint64_t v44 = (uint64_t)&v20[*(int *)(v16 + 48)];
  sub_1853B7020((uint64_t)v39, (uint64_t)v20, &qword_1E8FAF370);
  sub_1853B7020((uint64_t)v36, v44, &qword_1E8FAF370);
  id v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v45((uint64_t)v20, 1, v13) != 1)
  {
    sub_1853B7020((uint64_t)v20, (uint64_t)v81, &qword_1E8FAF370);
    int v49 = v45(v44, 1, v13);
    uint64_t v47 = (uint64_t)v88;
    if (v49 != 1)
    {
      uint64_t v51 = v79;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 32))(v79, v44, v13);
      sub_1858F3864();
      int v75 = sub_186A1E91C();

      id v52 = *(void (**)(void (*)(uint64_t, void, uint64_t), uint64_t))(v14 + 8);
      v52((void (*)(uint64_t, void, uint64_t))v51, v13);
      sub_1853B93B8((uint64_t)v36, &qword_1E8FAF370);
      v52(v81, v13);
      sub_1853B93B8((uint64_t)v20, &qword_1E8FAF370);
      if (v75) {
        goto LABEL_11;
      }
LABEL_9:

      uint64_t v50 = v39;
      goto LABEL_25;
    }
    sub_1853B93B8((uint64_t)v36, &qword_1E8FAF370);

    (*(void (**)(void (*)(uint64_t, void, uint64_t), uint64_t))(v14 + 8))(v81, v13);
LABEL_8:
    sub_1853B93B8((uint64_t)v20, &qword_1E8FAF3F8);
    goto LABEL_9;
  }
  sub_1853B93B8((uint64_t)v36, &qword_1E8FAF370);

  int v46 = v45(v44, 1, v13);
  uint64_t v47 = (uint64_t)v88;
  if (v46 != 1) {
    goto LABEL_8;
  }
  sub_1853B93B8((uint64_t)v20, &qword_1E8FAF370);
LABEL_11:
  uint64_t v40 = (id *)sub_1853B93B8((uint64_t)v39, &qword_1E8FAF370);
  a1 = v82;
  double v7 = v80;
  uint64_t v48 = v83;
LABEL_12:
  MEMORY[0x1F4188790](v40);
  *(void *)&v74[-48] = v7;
  *(double *)&v74[-40] = a3;
  *(double *)&v74[-32] = a4;
  *(double *)&v74[-24] = a5;
  *(double *)&v74[-16] = a6;
  *(void *)&v74[-8] = a1;
  uint64_t v53 = v89;
  sub_186A1DA4C();
  uint64_t v54 = *(void (**)(uint64_t, void, uint64_t))(v14 + 104);
  unsigned int v83 = v48;
  uint64_t v81 = v54;
  v54(v47, v48, v13);
  char v88 = *(unsigned char **)(v14 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v88)(v47, 0, 1, v13);
  unint64_t v55 = v85;
  uint64_t v56 = (uint64_t)&v85[*(int *)(v84 + 48)];
  sub_1853B7020((uint64_t)v53, (uint64_t)v85, &qword_1E8FAF370);
  sub_1853B7020(v47, v56, &qword_1E8FAF370);
  unint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v57((uint64_t)v55, 1, v13) != 1)
  {
    unint64_t v59 = v78;
    sub_1853B7020((uint64_t)v55, (uint64_t)v78, &qword_1E8FAF370);
    if (v57(v56, 1, v13) != 1)
    {
      char v60 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 32);
      uint64_t v84 = v14 + 56;
      uint64_t v61 = v79;
      v60(v79, v56, v13);
      sub_1858F3864();
      int v75 = sub_186A1E91C();
      uint64_t v62 = *(void (**)(unsigned char *, uint64_t))(v14 + 8);
      v62(v61, v13);
      sub_1853B93B8(v47, &qword_1E8FAF370);
      v62(v59, v13);
      uint64_t v58 = sub_1853B93B8((uint64_t)v55, &qword_1E8FAF370);
      if (v75) {
        goto LABEL_19;
      }
LABEL_24:

      uint64_t v50 = v89;
      goto LABEL_25;
    }
    sub_1853B93B8(v47, &qword_1E8FAF370);
    (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v59, v13);
LABEL_17:
    sub_1853B93B8((uint64_t)v55, &qword_1E8FAF3F8);
    goto LABEL_24;
  }
  sub_1853B93B8(v47, &qword_1E8FAF370);
  if (v57(v56, 1, v13) != 1) {
    goto LABEL_17;
  }
  uint64_t v58 = sub_1853B93B8((uint64_t)v55, &qword_1E8FAF370);
LABEL_19:
  if (v86)
  {
    MEMORY[0x1F4188790](v58);
    uint64_t v63 = v82;
    *(void *)&v74[-16] = v64;
    *(void *)&v74[-8] = v63;
    id v65 = v64;
    uint64_t v66 = (uint64_t)v76;
    sub_186A1DA4C();

    if (v57(v66, 1, v13) != 1)
    {
      sub_1853B93B8((uint64_t)v89, &qword_1E8FAF370);

      uint64_t v50 = (unsigned char *)v66;
      uint64_t v73 = v87;
      return sub_1853B8150((uint64_t)v50, v73, &qword_1E8FAF370);
    }
    uint64_t v58 = sub_1853B93B8(v66, &qword_1E8FAF370);
  }
  MEMORY[0x1F4188790](v58);
  uint64_t v67 = v82;
  *(void *)&v74[-16] = v80;
  *(void *)&v74[-8] = v67;
  uint64_t v69 = v68;
  uint64_t v70 = (uint64_t)v77;
  sub_186A1DA4C();

  sub_1853B93B8((uint64_t)v89, &qword_1E8FAF370);
  if (v57(v70, 1, v13) == 1)
  {
    sub_1853B93B8(v70, &qword_1E8FAF370);
    uint64_t v71 = v87;
    v81(v87, v83, v13);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v88)(v71, 0, 1, v13);
  }
  uint64_t v50 = (unsigned char *)v70;
LABEL_25:
  uint64_t v73 = v87;
  return sub_1853B8150((uint64_t)v50, v73, &qword_1E8FAF370);
}

uint64_t sub_1858F23BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  v19[4] = sub_1858F380C;
  float32x4_t v19[5] = v16;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 1107296256;
  _OWORD v19[2] = sub_1858EA970;
  v19[3] = &block_descriptor_4;
  uint64_t v17 = _Block_copy(v19);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel__intelligenceCollectSubelementsIn_using_transformToRoot_, a2, v17, a5, a6, a7, a8);
  _Block_release(v17);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a2) {
    __break(1u);
  }
  return result;
}

void (*UIView._appIntentsIntelligenceProvider.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0xC8uLL);
  *a1 = v3;
  v3[24] = v1;
  UIView._appIntentsIntelligenceProvider.getter(v3);
  return sub_1858F2578;
}

void sub_1858F2578(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    sub_1853B7020(*a1, v2 + 48, &qword_1E8FB0048);
    sub_1853B7020(v2 + 48, v2 + 96, &qword_1E8FB0048);
    uint64_t v3 = *(void *)(v2 + 120);
    if (v3)
    {
      double v4 = __swift_project_boxed_opaque_existential_0Tm((void *)(v2 + 96), *(void *)(v2 + 120));
      uint64_t v5 = *(void *)(v3 - 8);
      double v6 = MEMORY[0x1F4188790](v4);
      double v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v5 + 16))(v8, v6);
      uint64_t v9 = sub_186A1F83C();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
      __swift_destroy_boxed_opaque_existential_0Tm(v2 + 96);
    }
    else
    {
      uint64_t v9 = 0;
    }
    objc_msgSend(*(id *)(v2 + 192), sel__setInternalAppIntentsIntelligenceProvider_, v9);
    swift_unknownObjectRelease();
    sub_1853B93B8(v2 + 48, &qword_1E8FB0048);
  }
  else
  {
    sub_1853B7020(*a1, v2 + 144, &qword_1E8FB0048);
    uint64_t v10 = *(void *)(v2 + 168);
    if (v10)
    {
      id v11 = __swift_project_boxed_opaque_existential_0Tm((void *)(v2 + 144), *(void *)(v2 + 168));
      uint64_t v12 = *(void *)(v10 - 8);
      double v13 = MEMORY[0x1F4188790](v11);
      uint64_t v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v12 + 16))(v15, v13);
      uint64_t v16 = sub_186A1F83C();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
      __swift_destroy_boxed_opaque_existential_0Tm(v2 + 144);
    }
    else
    {
      uint64_t v16 = 0;
    }
    objc_msgSend(*(id *)(v2 + 192), sel__setInternalAppIntentsIntelligenceProvider_, v16);
    swift_unknownObjectRelease();
  }
  sub_1853B93B8(v2, &qword_1E8FB0048);
  free((void *)v2);
}

uint64_t sub_1858F28F8(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_185916FF0(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    unint64_t *v3 = v5;
  }
  uint64_t v14 = sub_186A1E03C();
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v17 = *(void *)(v15 + 72);
  unint64_t v18 = v16 + v17 * a1;
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)(v5 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_33;
  }
  if (v20 < 0)
  {
LABEL_35:
    uint64_t result = sub_186A1F6DC();
    __break(1u);
    return result;
  }
  unint64_t v21 = v18 + v17;
  unint64_t v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v24 = *(void *)(v5 + 16);
  BOOL v25 = __OFADD__(v24, v9);
  uint64_t v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(v5 + 16) = v26;
LABEL_25:
  if (v17 >= 1) {
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  }
  return sub_1853B93B8(a3, (uint64_t *)&unk_1E8FAF3E0);
}

double sub_1858F2B14@<D0>(_OWORD *a1@<X8>)
{
  return UIView._appIntentsIntelligenceProvider.getter(a1);
}

uint64_t sub_1858F2B38(uint64_t a1)
{
  sub_1853B7020(a1, (uint64_t)v2, &qword_1E8FB0048);
  return UIView._appIntentsIntelligenceProvider.setter((uint64_t)v2);
}

uint64_t sub_1858F2B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1858F2BA4(a1, a2, a3, (unint64_t *)&qword_1EB255AC0);
}

uint64_t sub_1858F2B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1858F2BA4(a1, a2, a3, (unint64_t *)&qword_1E8FAF3D8);
}

uint64_t sub_1858F2BA4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = a4;
    uint64_t v10 = a3;
    uint64_t v6 = a2;
    uint64_t v9 = a1;
    unint64_t v8 = *v5;
    if (!(*v5 >> 62))
    {
      if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_186A1F67C();
  swift_bridgeObjectRelease();
  if (v25 < v6) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v11 = v6 - v9;
  if (__OFSUB__(v6, v9))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v4 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_186A1F67C();
    swift_bridgeObjectRelease();
    uint64_t v13 = v12 + v4;
    if (!__OFADD__(v12, v4)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_186A1F67C();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v8 = *v5;
  uint64_t v29 = v7;
  if (*v5 >> 62) {
    goto LABEL_36;
  }
  uint64_t v12 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v13 = v12 + v4;
  if (__OFADD__(v12, v4)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v8 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v5 = v8;
  uint64_t v28 = v10;
  uint64_t v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    uint64_t v15 = v8 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v12 = 1;
  }
  if (v8 >> 62) {
    goto LABEL_39;
  }
  uint64_t v16 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v16 <= v13) {
    uint64_t v16 = v13;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = MEMORY[0x18C102250](v12, v16, 1, v8);
  swift_bridgeObjectRelease();
  *unint64_t v5 = v8;
  uint64_t v15 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  uint64_t v17 = (void *)(v15 + 32 + 8 * v9);
  sub_1853B985C(0, v29);
  swift_arrayDestroy();
  if (v4)
  {
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_186A1F67C();
      swift_bridgeObjectRelease();
      uint64_t v19 = v26 - v6;
      if (!__OFSUB__(v26, v6))
      {
LABEL_21:
        if (v19 < 0)
        {
LABEL_46:
          uint64_t result = sub_186A1F6DC();
          __break(1u);
          return result;
        }
        uint64_t v20 = (char *)(v17 + 1);
        unint64_t v21 = (char *)(v15 + 32 + 8 * v6);
        if (v17 + 1 != (void *)v21 || v20 >= &v21[8 * v19]) {
          memmove(v20, v21, 8 * v19);
        }
        if (!(v8 >> 62))
        {
          uint64_t v22 = *(void *)(v15 + 16);
          uint64_t v23 = v22 + v4;
          if (!__OFADD__(v22, v4))
          {
LABEL_27:
            *(void *)(v15 + 16) = v23;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v27 = sub_186A1F67C();
        swift_bridgeObjectRelease();
        uint64_t v23 = v27 + v4;
        if (!__OFADD__(v27, v4)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v18 = *(void *)(v15 + 16);
      uint64_t v19 = v18 - v6;
      if (!__OFSUB__(v18, v6)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  *uint64_t v17 = v28;
  return sub_186A1EB5C();
}

uint64_t sub_1858F2EAC(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_185916DA8(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (void *)&v16[32 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

void *sub_1858F301C(void *a1, uint64_t a2)
{
  __swift_project_boxed_opaque_existential_0Tm(a1, a1[3]);
  uint64_t v3 = (void *)sub_186A1F83C();
  Class Class = object_getClass(v3);
  swift_unknownObjectRelease();
  if (!Class) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  ObjCClassMetadatdouble a = swift_getObjCClassMetadata();
  uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
  if (ObjCClassMetadata != a2)
  {
    do
    {
      ObjCClassFromMetadatdouble a = (objc_class *)swift_getObjCClassFromMetadata();
      class_getName(ObjCClassFromMetadata);
      uint64_t v8 = sub_186A1EA0C();
      uint64_t v10 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = sub_185916EE0(0, v6[2] + 1, 1, v6);
      }
      unint64_t v12 = v6[2];
      unint64_t v11 = v6[3];
      if (v12 >= v11 >> 1) {
        uint64_t v6 = sub_185916EE0((void *)(v11 > 1), v12 + 1, 1, v6);
      }
      void v6[2] = v12 + 1;
      uint64_t v13 = &v6[2 * v12];
      uint64_t v13[4] = v8;
      void v13[5] = v10;
    }
    while (class_getSuperclass(ObjCClassFromMetadata) && swift_getObjCClassMetadata() != a2);
  }
  return v6;
}

uint64_t sub_1858F3140(void *a1, uint64_t a2, void *a3, void *a4, double a5, double a6, double a7, double a8)
{
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF310);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_186A1E03C();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a4);
  double v23 = -[UIView _convertRect:toViewInSameWindow:]((uint64_t)a3, a1, a5, a6, a7, a8);
  CGFloat v25 = v24;
  CGFloat v27 = v26;
  CGFloat v29 = v28;
  objc_msgSend(a1, sel__intelligenceVisibleBounds);
  v38.origin.double x = v30;
  v38.origin.double y = v31;
  v38.size.double width = v32;
  v38.size.CGFloat height = v33;
  v36.origin.double x = v23;
  v36.origin.double y = v25;
  v36.size.double width = v27;
  v36.size.CGFloat height = v29;
  CGRect v37 = CGRectIntersection(v36, v38);
  sub_1858EB2C4(a2, a1, a3, (void (**)(void, void, double))a4, (uint64_t)v18, v37.origin.x, v37.origin.y, v37.size.width, v37.size.height);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1) {
    return sub_1853B93B8((uint64_t)v18, &qword_1E8FAF310);
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
  sub_186A1DA7C();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
}

uint64_t sub_1858F3388(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    unint64_t v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_186A1F67C();
  swift_bridgeObjectRelease();
  if (v19 < v2) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_186A1F67C();
    swift_bridgeObjectRelease();
    uint64_t v9 = v8 + v6;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_186A1F67C();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v5 = *v3;
  if (*v3 >> 62) {
    goto LABEL_36;
  }
  uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v8 - v7;
  if (__OFADD__(v8, v6)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v5 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v3 = v5;
  uint64_t v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1;
  }
  if (v5 >> 62) {
    goto LABEL_39;
  }
  uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    uint64_t v12 = v9;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = MEMORY[0x18C102250](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  unint64_t *v3 = v5;
  uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  sub_1853B985C(0, &qword_1E8FB1ED8);
  swift_arrayDestroy();
  if (v6)
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_186A1F67C();
      swift_bridgeObjectRelease();
      uint64_t v14 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_21:
        if (v14 < 0)
        {
LABEL_46:
          uint64_t result = sub_186A1F6DC();
          __break(1u);
          return result;
        }
        uint64_t v15 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v15 + 8 * v14) {
          memmove((void *)(v11 + 32 + 8 * v4), v15, 8 * v14);
        }
        if (!(v5 >> 62))
        {
          uint64_t v16 = *(void *)(v11 + 16);
          uint64_t v17 = v16 + v6;
          if (!__OFADD__(v16, v6))
          {
LABEL_27:
            *(void *)(v11 + 16) = v17;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v21 = sub_186A1F67C();
        swift_bridgeObjectRelease();
        uint64_t v17 = v21 + v6;
        if (!__OFADD__(v21, v6)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v11 + 16);
      uint64_t v14 = v13 - v2;
      if (!__OFSUB__(v13, v2)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  return sub_186A1EB5C();
}

uint64_t sub_1858F3678(uint64_t a1, uint64_t a2)
{
  return sub_1854A216C(a1, a2, (void (*)(void))type metadata accessor for UIPromptSuggestionView);
}

uint64_t sub_1858F3690()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

double sub_1858F36A0(double a1, double a2, double a3, double a4)
{
  *(void *)&double result = (unint64_t)j_j__CGRectOffset(*(CGRect *)&a1, *(CGFloat *)(v4 + 16), *(CGFloat *)(v4 + 24));
  return result;
}

uint64_t sub_1858F36AC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1858F36C0(a1, a2);
  }
  return a1;
}

uint64_t sub_1858F36C0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1858F3718(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

_OWORD *sub_1858F3770(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_1858F3788@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_186A1DD3C();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t sub_1858F37B8()
{
  return sub_186A1DD4C();
}

void sub_1858F37E4(double *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1858F37FC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

BOOL sub_1858F3814()
{
  return sub_185ADAE64(*(void *)(v0 + 24));
}

BOOL sub_1858F383C()
{
  return sub_185ADAE30(*(void *)(v0 + 24));
}

unint64_t sub_1858F3864()
{
  unint64_t result = qword_1E8FAF418;
  if (!qword_1E8FAF418)
  {
    sub_186A1DF8C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FAF418);
  }
  return result;
}

id sub_1858F38BC()
{
  return objc_msgSend(*(id *)(v0 + 16), sel__intelligenceCollectContentIn_collector_, *(void *)(v0 + 56), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_1858F38D8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1858F38E8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1858F3920(uint64_t a1)
{
  return -[UIView _convertRect:toViewInSameWindow:](a1, *(void *)(v1 + 16));
}

uint64_t sub_1858F392C()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1858F3968()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

double sub_1858F397C(uint64_t a1, double a2, double a3, double a4, double a5)
{
  return -[UIView _convertRect:toViewInSameWindow:](a1, *(void **)(v5 + 16), a2, a3, a4, a5);
}

uint64_t sub_1858F3984(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v6 = *(uint64_t (**)(void *, double))(v5 + 16);
  uint64_t v7 = *(void **)(v5 + 32);
  double v8 = -[UIView _convertRect:toViewInSameWindow:](a1, v7, a2, a3, a4, a5);
  return v6(v7, v8);
}

uint64_t sub_1858F39C8()
{
  return sub_1858F23BC(*(void **)(v0 + 16), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

void sub_1858F39E0(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(double *)a2 = (*(double (**)(void, double, double, double, double))(v2 + 16))(*(void *)(v2 + 32), *a1, a1[1], a1[2], a1[3]);
  *(void *)(a2 + _Block_object_dispose(&STACK[0x478], 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
}

uint64_t sub_1858F3A38()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1858F3A48()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t *sub_1858F3A7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, v5);
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)(((unint64_t)a2 + v10) & v9), v5);
  }
  return v4;
}

uint64_t sub_1858F3B88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8) + 8;
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))v6;
  (*(void (**)(uint64_t, uint64_t))v6)(a1, v3);
  unint64_t v4 = (*(void *)(v6 + 56) + a1 + *(unsigned __int8 *)(v6 + 72)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 72);
  return v7(v4, v3);
}

unint64_t sub_1858F3C24(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = v6 + 16;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), (*(void *)(v8 + 48) + *(unsigned __int8 *)(v8 + 64) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64), v5);
  return a1;
}

unint64_t sub_1858F3CB8(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24);
  uint64_t v8 = v6 + 24;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), (*(void *)(v8 + 40) + *(unsigned __int8 *)(v8 + 56) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 56), v5);
  return a1;
}

unint64_t sub_1858F3D4C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32);
  uint64_t v8 = v6 + 32;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v8 + 48) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 48), v5);
  return a1;
}

unint64_t sub_1858F3DE0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40);
  uint64_t v8 = v6 + 40;
  v7(a1, a2, v5);
  v7((*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), (*(void *)(v8 + 24) + *(unsigned __int8 *)(v8 + 40) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 40), v5);
  return a1;
}

uint64_t sub_1858F3E74(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v6;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v_Block_object_dispose(&STACK[0x478], 8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v_Block_object_dispose(&STACK[0x478], 8) = *a1;
        break;
      case 3:
        LODWORD(v_Block_object_dispose(&STACK[0x478], 8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v_Block_object_dispose(&STACK[0x478], 8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v_Block_object_dispose(&STACK[0x478], 8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void sub_1858F3FE0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1858F4208);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_1858F4230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);
  v9(a3 - 8, a4, a1);
  uint64_t v7 = a4 + *(int *)(_s15InstantlyStableVMa() + 36);
  return v9(v7, a2, a3);
}

uint64_t sub_1858F42E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t UICollectionViewListCell.accessories.getter()
{
  id v1 = objc_msgSend(v0, sel_accessories);
  sub_1853B985C(0, (unint64_t *)&qword_1EB255968);
  unint64_t v2 = sub_186A1EB3C();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_186A1F67C();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_35;
  }
LABEL_3:
  uint64_t v14 = MEMORY[0x1E4FBC860];
  sub_1858F7958(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v14;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x18C102240](v4, v2);
      }
      else {
        id v6 = *(id *)(v2 + 8 * v4 + 32);
      }
      id v7 = v6;
      self;
      if (swift_dynamicCastObjCClass())
      {
        uint64_t v8 = 0;
      }
      else
      {
        self;
        if (swift_dynamicCastObjCClass())
        {
          uint64_t v8 = 8;
        }
        else
        {
          self;
          if (swift_dynamicCastObjCClass())
          {
            uint64_t v8 = 2;
          }
          else
          {
            self;
            if (swift_dynamicCastObjCClass())
            {
              uint64_t v8 = 3;
            }
            else
            {
              self;
              if (swift_dynamicCastObjCClass())
              {
                uint64_t v8 = 4;
              }
              else
              {
                self;
                if (swift_dynamicCastObjCClass())
                {
                  uint64_t v8 = 5;
                }
                else
                {
                  self;
                  if (swift_dynamicCastObjCClass())
                  {
                    uint64_t v8 = 6;
                  }
                  else
                  {
                    self;
                    if (swift_dynamicCastObjCClass())
                    {
                      uint64_t v8 = 7;
                    }
                    else
                    {
                      self;
                      BOOL v9 = (void *)swift_dynamicCastObjCClass();
                      if (v9)
                      {
                        uint64_t v8 = (uint64_t)objc_msgSend(v9, sel_customView);
                      }
                      else
                      {
                        self;
                        if (swift_dynamicCastObjCClass())
                        {
                          uint64_t v8 = 1;
                        }
                        else
                        {
                          self;
                          if (!swift_dynamicCastObjCClass()) {
                            goto LABEL_38;
                          }
                          uint64_t v8 = 9;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      unint64_t v11 = *(void *)(v14 + 16);
      unint64_t v10 = *(void *)(v14 + 24);
      if (v11 >= v10 >> 1) {
        sub_1858F7958(v10 > 1, v11 + 1, 1);
      }
      ++v4;
      *(void *)(v14 + 16) = v11 + 1;
      uint64_t v12 = v14 + 16 * v11;
      *(void *)(v12 + 32) = v8;
      *(void *)(v12 + 40) = v7;
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
    return v5;
  }
  __break(1u);
LABEL_38:
  uint64_t result = sub_186A1F60C();
  __break(1u);
  return result;
}

void (*UICollectionViewListCell.accessories.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = UICollectionViewListCell.accessories.getter();
  return sub_1858F46D8;
}

void sub_1858F46D8(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    UICollectionViewListCell.accessories.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    UICollectionViewListCell.accessories.setter(*a1);
  }
}

BOOL static UICellAccessory.DisplayedState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t UICellAccessory.DisplayedState.hash(into:)()
{
  return sub_186A1F9FC();
}

BOOL sub_1858F4774(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1858F478C()
{
  return sub_186A1F9FC();
}

uint64_t UICellAccessory.DisclosureIndicatorOptions.isHidden.getter()
{
  return *v0;
}

uint64_t (*UICellAccessory.DisclosureIndicatorOptions.isHidden.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.DisclosureIndicatorOptions.reservedLayoutWidth.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.DisclosureIndicatorOptions.tintColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t UICellAccessory.DetailOptions.isHidden.getter()
{
  return *v0;
}

uint64_t UICellAccessory.DetailOptions.isHidden.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*UICellAccessory.DetailOptions.isHidden.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void UICellAccessory.DetailOptions.reservedLayoutWidth.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v2;
}

uint64_t UICellAccessory.DetailOptions.reservedLayoutWidth.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)result;
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*UICellAccessory.DetailOptions.reservedLayoutWidth.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void *UICellAccessory.DetailOptions.tintColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

void UICellAccessory.DetailOptions.tintColor.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
}

uint64_t (*UICellAccessory.DetailOptions.tintColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

id UICellAccessory.DetailOptions.init(isHidden:reservedLayoutWidth:tintColor:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1858BB7F8(a1, a2, a3, &qword_1E8FB0A08, (id *)&qword_1E8FB1EE0, a4);
}

id sub_1858F4934()
{
  id result = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryDetail), sel_init);
  qword_1E8FB1EE0 = (uint64_t)result;
  return result;
}

id static UICellAccessory.detail(displayed:options:actionHandler:)@<X0>(unsigned __int8 *a1@<X0>, double *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *(unsigned __int8 *)a2;
  double v10 = a2[1];
  int v11 = *((unsigned __int8 *)a2 + 16);
  uint64_t v12 = *((void *)a2 + 3);
  id v13 = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryDetail), sel_init);
  if (a3)
  {
    uint64_t v17[4] = a3;
    long long v17[5] = a4;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 1107296256;
    v17[2] = sub_1856A95EC;
    v17[3] = &block_descriptor_5;
    a3 = _Block_copy(v17);
    swift_retain();
    swift_release();
  }
  objc_msgSend(v13, sel_setActionHandler_, a3);
  _Block_release(a3);
  objc_msgSend(v13, sel_setDisplayedState_, v8);
  objc_msgSend(v13, sel_setTintColor_, v12);
  objc_msgSend(v13, sel_setHidden_, v9);
  double v14 = v10;
  double v15 = -1.79769313e308;
  if (v10 == 0.0) {
    double v15 = 0.0;
  }
  if (v11) {
    double v14 = v15;
  }
  id result = objc_msgSend(v13, sel_setReservedLayoutWidth_, v14);
  *a5 = 8;
  a5[1] = v13;
  return result;
}

uint64_t UICellAccessory.CheckmarkOptions.isHidden.getter()
{
  return *v0;
}

uint64_t (*UICellAccessory.CheckmarkOptions.isHidden.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.CheckmarkOptions.reservedLayoutWidth.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.CheckmarkOptions.tintColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

id UICellAccessory.CheckmarkOptions.init(isHidden:reservedLayoutWidth:tintColor:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1858BB7F8(a1, a2, a3, qword_1E8FB0A10, (id *)&qword_1E8FB1EE8, a4);
}

id sub_1858F4B74()
{
  id result = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryCheckmark), sel_init);
  qword_1E8FB1EE8 = (uint64_t)result;
  return result;
}

id static UICellAccessory.checkmark(displayed:options:)@<X0>(unsigned __int8 *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  return sub_1856FB4D0(a1, a2, (Class *)off_1E52D35C8, 2, a3);
}

uint64_t UICellAccessory.DeleteOptions.isHidden.getter()
{
  return *v0;
}

uint64_t UICellAccessory.DeleteOptions.isHidden.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*UICellAccessory.DeleteOptions.isHidden.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void UICellAccessory.DeleteOptions.reservedLayoutWidth.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v2;
}

uint64_t UICellAccessory.DeleteOptions.reservedLayoutWidth.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)result;
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*UICellAccessory.DeleteOptions.reservedLayoutWidth.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void *UICellAccessory.DeleteOptions.tintColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

void UICellAccessory.DeleteOptions.tintColor.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
}

uint64_t (*UICellAccessory.DeleteOptions.tintColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void *UICellAccessory.DeleteOptions.backgroundColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 32);
  id v2 = v1;
  return v1;
}

void UICellAccessory.DeleteOptions.backgroundColor.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
}

uint64_t (*UICellAccessory.DeleteOptions.backgroundColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void UICellAccessory.DeleteOptions.init(isHidden:reservedLayoutWidth:tintColor:backgroundColor:)(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
}

id sub_1858F4D3C()
{
  id result = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryDelete), sel_init);
  qword_1E8FAF580 = (uint64_t)result;
  return result;
}

id static UICellAccessory.delete(displayed:options:actionHandler:)@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1858F4E80(a1, a2, a3, a4, (Class *)off_1E52D35D8, (uint64_t)&block_descriptor_4_0, 3, a5);
}

uint64_t UICellAccessory.InsertOptions.isHidden.getter()
{
  return *v0;
}

uint64_t (*UICellAccessory.InsertOptions.isHidden.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.InsertOptions.reservedLayoutWidth.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.InsertOptions.tintColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.InsertOptions.backgroundColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void UICellAccessory.InsertOptions.init(isHidden:reservedLayoutWidth:tintColor:backgroundColor:)(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
}

id sub_1858F4E34()
{
  id result = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryInsert), sel_init);
  qword_1E8FB1EF0 = (uint64_t)result;
  return result;
}

id static UICellAccessory.insert(displayed:options:actionHandler:)@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1858F4E80(a1, a2, a3, a4, (Class *)off_1E52D35F0, (uint64_t)&block_descriptor_8, 4, a5);
}

id sub_1858F4E80@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, Class *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  unsigned __int8 v20 = *a1;
  char v12 = *a2;
  uint64_t v13 = *((void *)a2 + 1);
  char v14 = a2[16];
  uint64_t v15 = *((void *)a2 + 3);
  uint64_t v16 = *((void *)a2 + 4);
  id v17 = objc_msgSend(objc_allocWithZone(*a5), sel_init);
  if (a3)
  {
    uint64_t v26 = a3;
    uint64_t v27 = a4;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v23 = 1107296256;
    double v24 = sub_1856A95EC;
    uint64_t v25 = a6;
    uint64_t v18 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v18 = 0;
  }
  objc_msgSend(v17, sel_setActionHandler_, v18);
  _Block_release(v18);
  LOBYTE(aBlock) = v12;
  uint64_t v23 = v13;
  LOBYTE(v24) = v14;
  uint64_t v25 = v15;
  uint64_t v26 = v16;
  unsigned __int8 v28 = v20;
  id result = sub_1858F5818((double *)&aBlock, &v28);
  *a8 = a7;
  a8[1] = v17;
  return result;
}

uint64_t UICellAccessory.ReorderOptions.isHidden.getter()
{
  return *v0;
}

uint64_t UICellAccessory.ReorderOptions.isHidden.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*UICellAccessory.ReorderOptions.isHidden.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void UICellAccessory.ReorderOptions.reservedLayoutWidth.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v2;
}

uint64_t UICellAccessory.ReorderOptions.reservedLayoutWidth.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)result;
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*UICellAccessory.ReorderOptions.reservedLayoutWidth.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void *UICellAccessory.ReorderOptions.tintColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

void UICellAccessory.ReorderOptions.tintColor.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
}

uint64_t (*UICellAccessory.ReorderOptions.tintColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t UICellAccessory.ReorderOptions.showsVerticalSeparator.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t UICellAccessory.ReorderOptions.showsVerticalSeparator.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

uint64_t (*UICellAccessory.ReorderOptions.showsVerticalSeparator.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void UICellAccessory.ReorderOptions.init(isHidden:reservedLayoutWidth:tintColor:showsVerticalSeparator:)(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *(void *)a2;
  char v9 = *(unsigned char *)(a2 + 8);
  char v10 = *(unsigned char *)(a2 + 9);
  if (a1 == 2)
  {
    if (qword_1E8FAF898 != -1) {
      swift_once();
    }
    unsigned __int8 v11 = objc_msgSend((id)qword_1E8FAF888, sel_isHidden);
    if ((v10 & 1) == 0)
    {
LABEL_5:
      char v12 = v9 & 1;
      int v13 = a4;
      if (!a3) {
        goto LABEL_18;
      }
      goto LABEL_15;
    }
  }
  else
  {
    unsigned __int8 v11 = a1 & 1;
    if ((*(unsigned char *)(a2 + 9) & 1) == 0) {
      goto LABEL_5;
    }
  }
  if (qword_1E8FAF898 != -1) {
    swift_once();
  }
  objc_msgSend((id)qword_1E8FAF888, sel_reservedLayoutWidth);
  if (v14 != 0.0)
  {
    uint64_t v8 = *(void *)&v14;
    if (v14 == -1.79769313e308)
    {
      char v12 = 1;
      uint64_t v8 = 1;
      int v13 = a4;
      if (a3) {
        goto LABEL_15;
      }
    }
    else
    {
      char v12 = 0;
      int v13 = a4;
      if (a3) {
        goto LABEL_15;
      }
    }
LABEL_18:
    if (qword_1E8FAF898 != -1) {
      swift_once();
    }
    id v17 = objc_msgSend((id)qword_1E8FAF888, sel_tintColor);
    uint64_t v15 = v17;
    if (v13 != 2)
    {
      unsigned __int8 v16 = v13 & 1;
      goto LABEL_26;
    }
    id v18 = v17;
    goto LABEL_22;
  }
  char v12 = 1;
  uint64_t v8 = 0;
  int v13 = a4;
  if (!a3) {
    goto LABEL_18;
  }
LABEL_15:
  uint64_t v15 = a3;
  if (v13 != 2)
  {
    unsigned __int8 v16 = v13 & 1;
    uint64_t v15 = a3;
    goto LABEL_26;
  }
LABEL_22:
  uint64_t v19 = qword_1E8FAF898;
  id v20 = a3;
  if (v19 != -1) {
    swift_once();
  }
  id v21 = (id)qword_1E8FAF888;
  unsigned __int8 v16 = objc_msgSend(v21, sel_showsVerticalSeparator);

LABEL_26:
  *(unsigned char *)a5 = v11;
  *(void *)(a5 + _Block_object_dispose(&STACK[0x478], 8) = v8;
  *(unsigned char *)(a5 + 16) = v12;
  *(void *)(a5 + 24) = v15;
  *(unsigned char *)(a5 + 32) = v16;
}

id sub_1858F5314()
{
  id result = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryReorder), sel_init);
  qword_1E8FAF888 = (uint64_t)result;
  return result;
}

id static UICellAccessory.reorder(displayed:options:)@<X0>(unsigned __int8 *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  unsigned __int8 v4 = *a1;
  char v5 = *(unsigned char *)a2;
  double v6 = a2[1];
  char v7 = *((unsigned char *)a2 + 16);
  uint64_t v8 = *((void *)a2 + 3);
  char v9 = *((unsigned char *)a2 + 32);
  id v10 = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryReorder), sel_init);
  LOBYTE(v13[0]) = v5;
  v13[1] = v6;
  char v14 = v7;
  uint64_t v15 = v8;
  char v16 = v9;
  unsigned __int8 v12 = v4;
  id result = sub_1858F53E8(v13, &v12);
  *a3 = 5;
  a3[1] = v10;
  return result;
}

id sub_1858F53E8(double *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(unsigned __int8 *)a1;
  double v4 = a1[1];
  int v5 = *((unsigned __int8 *)a1 + 16);
  uint64_t v6 = *((void *)a1 + 3);
  uint64_t v7 = *((unsigned __int8 *)a1 + 32);
  objc_msgSend(v2, sel_setDisplayedState_, *a2);
  objc_msgSend(v2, sel_setTintColor_, v6);
  objc_msgSend(v2, sel_setShowsVerticalSeparator_, v7);
  objc_msgSend(v2, sel_setHidden_, v3);
  double v8 = v4;
  double v9 = -1.79769313e308;
  if (v4 == 0.0) {
    double v9 = 0.0;
  }
  if (v5) {
    double v8 = v9;
  }
  return objc_msgSend(v2, sel_setReservedLayoutWidth_, v8);
}

uint64_t UICellAccessory.MultiselectOptions.isHidden.getter()
{
  return *v0;
}

uint64_t (*UICellAccessory.MultiselectOptions.isHidden.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.MultiselectOptions.reservedLayoutWidth.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.MultiselectOptions.tintColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.MultiselectOptions.backgroundColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void UICellAccessory.MultiselectOptions.init(isHidden:reservedLayoutWidth:tintColor:backgroundColor:)(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
}

void sub_1858F5564(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, id a4@<X3>, uint64_t *a5@<X4>, id *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12 = *(void *)a2;
  char v13 = *(unsigned char *)(a2 + 8);
  char v14 = *(unsigned char *)(a2 + 9);
  if (a1 == 2)
  {
    if (*a5 != -1) {
      swift_once();
    }
    unsigned __int8 v15 = objc_msgSend(*a6, sel_isHidden);
    if ((v14 & 1) == 0)
    {
LABEL_5:
      char v16 = v13 & 1;
      if (!a3) {
        goto LABEL_18;
      }
LABEL_15:
      id v18 = a3;
      if (a4)
      {
        id v18 = a3;
        goto LABEL_25;
      }
      goto LABEL_22;
    }
  }
  else
  {
    unsigned __int8 v15 = a1 & 1;
    if ((*(unsigned char *)(a2 + 9) & 1) == 0) {
      goto LABEL_5;
    }
  }
  if (*a5 != -1) {
    swift_once();
  }
  objc_msgSend(*a6, sel_reservedLayoutWidth);
  if (v17 != 0.0)
  {
    uint64_t v12 = *(void *)&v17;
    if (v17 == -1.79769313e308)
    {
      char v16 = 1;
      uint64_t v12 = 1;
      if (!a3) {
        goto LABEL_18;
      }
    }
    else
    {
      char v16 = 0;
      if (!a3) {
        goto LABEL_18;
      }
    }
    goto LABEL_15;
  }
  char v16 = 1;
  uint64_t v12 = 0;
  if (a3) {
    goto LABEL_15;
  }
LABEL_18:
  if (*a5 != -1) {
    swift_once();
  }
  id v19 = objc_msgSend(*a6, sel_tintColor);
  id v18 = v19;
  if (!a4)
  {
    id v20 = v19;
LABEL_22:
    uint64_t v21 = *a5;
    id v22 = a3;
    if (v21 != -1) {
      swift_once();
    }
    id v23 = *a6;
    a4 = objc_msgSend(v23, sel_backgroundColor);
  }
LABEL_25:
  *(unsigned char *)a7 = v15;
  *(void *)(a7 + _Block_object_dispose(&STACK[0x478], 8) = v12;
  *(unsigned char *)(a7 + 16) = v16;
  *(void *)(a7 + 24) = v18;
  *(void *)(a7 + 32) = a4;
}

id sub_1858F574C()
{
  id result = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryMultiselect), sel_init);
  qword_1E8FAEF98 = (uint64_t)result;
  return result;
}

id static UICellAccessory.multiselect(displayed:options:)@<X0>(unsigned __int8 *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  unsigned __int8 v4 = *a1;
  char v5 = *(unsigned char *)a2;
  double v6 = a2[1];
  char v7 = *((unsigned char *)a2 + 16);
  uint64_t v8 = *((void *)a2 + 3);
  uint64_t v9 = *((void *)a2 + 4);
  id v10 = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryMultiselect), sel_init);
  LOBYTE(v13[0]) = v5;
  v13[1] = v6;
  char v14 = v7;
  uint64_t v15 = v8;
  uint64_t v16 = v9;
  unsigned __int8 v12 = v4;
  id result = sub_1858F5818(v13, &v12);
  *a3 = 6;
  a3[1] = v10;
  return result;
}

id sub_1858F5818(double *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(unsigned __int8 *)a1;
  double v4 = a1[1];
  int v5 = *((unsigned __int8 *)a1 + 16);
  uint64_t v6 = *((void *)a1 + 3);
  uint64_t v7 = *((void *)a1 + 4);
  objc_msgSend(v2, sel_setDisplayedState_, *a2);
  objc_msgSend(v2, sel_setTintColor_, v6);
  objc_msgSend(v2, sel_setBackgroundColor_, v7);
  objc_msgSend(v2, sel_setHidden_, v3);
  double v8 = v4;
  double v9 = -1.79769313e308;
  if (v4 == 0.0) {
    double v9 = 0.0;
  }
  if (v5) {
    double v8 = v9;
  }
  return objc_msgSend(v2, sel_setReservedLayoutWidth_, v8);
}

uint64_t _s5UIKit15UICellAccessoryV14DisplayedStateO9hashValueSivg_0()
{
  return sub_186A1FA4C();
}

uint64_t sub_1858F5930()
{
  return sub_186A1FA4C();
}

void UICellAccessory.OutlineDisclosureOptions.style.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *UICellAccessory.OutlineDisclosureOptions.style.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*UICellAccessory.OutlineDisclosureOptions.style.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t UICellAccessory.OutlineDisclosureOptions.isHidden.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t UICellAccessory.OutlineDisclosureOptions.isHidden.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*UICellAccessory.OutlineDisclosureOptions.isHidden.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.OutlineDisclosureOptions.reservedLayoutWidth.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.OutlineDisclosureOptions.tintColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void (*UICellAccessory.OutlineDisclosureOptions._customImage.modify(void *a1))(uint64_t a1, char a2)
{
  id v2 = *(void **)(v1 + 32);
  *a1 = v2;
  a1[1] = v1;
  id v3 = v2;
  return sub_1858F5A68;
}

void sub_1858F5A68(uint64_t a1, char a2)
{
  id v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  double v4 = *(void **)(v2 + 32);
  if (a2)
  {
    id v5 = v3;

    *(void *)(v2 + 32) = v3;
  }
  else
  {

    *(void *)(v2 + 32) = v3;
  }
}

unsigned __int8 *UICellAccessory.OutlineDisclosureOptions.init(style:isHidden:reservedLayoutWidth:tintColor:)@<X0>(unsigned __int8 *result@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  int v7 = a2;
  int v8 = *result;
  uint64_t v9 = *(void *)a3;
  char v10 = *(unsigned char *)(a3 + 8);
  char v11 = *(unsigned char *)(a3 + 9);
  if (v8 == 3)
  {
    if (qword_1E8FAF598 != -1) {
      swift_once();
    }
    id result = (unsigned __int8 *)objc_msgSend((id)qword_1E8FAF588, sel_style);
    if (result == (unsigned __int8 *)2) {
      LOBYTE(v_Block_object_dispose(&STACK[0x478], 8) = 2;
    }
    else {
      LOBYTE(v_Block_object_dispose(&STACK[0x478], 8) = result == (unsigned __int8 *)1;
    }
  }
  if (v7 == 2)
  {
    if (qword_1E8FAF598 != -1) {
      swift_once();
    }
    id result = (unsigned __int8 *)objc_msgSend((id)qword_1E8FAF588, sel_isHidden);
    char v12 = (char)result;
    if ((v11 & 1) == 0)
    {
LABEL_11:
      char v13 = v10 & 1;
      if (a4) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
  }
  else
  {
    char v12 = v7 & 1;
    if ((v11 & 1) == 0) {
      goto LABEL_11;
    }
  }
  if (qword_1E8FAF598 != -1) {
    swift_once();
  }
  id result = (unsigned __int8 *)objc_msgSend((id)qword_1E8FAF588, sel_reservedLayoutWidth);
  if (v14 == 0.0)
  {
    char v13 = 1;
    uint64_t v9 = 0;
    if (a4) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v9 = *(void *)&v14;
    if (v14 == -1.79769313e308)
    {
      char v13 = 1;
      uint64_t v9 = 1;
      if (a4) {
        goto LABEL_26;
      }
    }
    else
    {
      char v13 = 0;
      if (a4) {
        goto LABEL_26;
      }
    }
  }
LABEL_23:
  if (qword_1E8FAF598 != -1) {
    swift_once();
  }
  id result = (unsigned __int8 *)objc_msgSend((id)qword_1E8FAF588, sel_tintColor);
  a4 = result;
LABEL_26:
  *(unsigned char *)a5 = v8;
  *(unsigned char *)(a5 + 1) = v12;
  *(void *)(a5 + _Block_object_dispose(&STACK[0x478], 8) = v9;
  *(unsigned char *)(a5 + 16) = v13;
  *(void *)(a5 + 24) = a4;
  *(void *)(a5 + 32) = 0;
  return result;
}

id sub_1858F5CEC()
{
  id result = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryOutlineDisclosure), sel_init);
  qword_1E8FAF588 = (uint64_t)result;
  return result;
}

id static UICellAccessory.outlineDisclosure(displayed:options:actionHandler:)@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unsigned __int8 v16 = *a1;
  char v7 = *a2;
  char v8 = a2[1];
  uint64_t v9 = *((void *)a2 + 1);
  char v10 = a2[16];
  char v12 = (void *)*((void *)a2 + 3);
  char v11 = (void *)*((void *)a2 + 4);
  id v13 = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryOutlineDisclosure), sel_init);
  if (a3)
  {
    uint64_t v21 = a3;
    uint64_t v22 = a4;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v18 = 1107296256;
    id v19 = sub_1856A95EC;
    id v20 = &block_descriptor_13_0;
    a3 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
  }
  objc_msgSend(v13, sel_setActionHandler_, a3);
  _Block_release(a3);
  LOBYTE(aBlock) = v7;
  BYTE1(aBlock) = v8;
  uint64_t v18 = v9;
  LOBYTE(v19) = v10;
  id v20 = v12;
  uint64_t v21 = v11;
  unsigned __int8 v23 = v16;
  id result = sub_1858F5E90((double *)&aBlock, &v23);
  *a5 = 1;
  a5[1] = v13;
  return result;
}

id sub_1858F5E90(double *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(unsigned __int8 *)a1;
  uint64_t v4 = *((unsigned __int8 *)a1 + 1);
  double v5 = a1[1];
  int v6 = *((unsigned __int8 *)a1 + 16);
  uint64_t v7 = *((void *)a1 + 3);
  uint64_t v8 = *((void *)a1 + 4);
  objc_msgSend(v2, sel_setDisplayedState_, *a2);
  objc_msgSend(v2, sel_setStyle_, v3);
  objc_msgSend(v2, sel_setTintColor_, v7);
  objc_msgSend(v2, sel_setHidden_, v4);
  double v9 = v5;
  double v10 = -1.79769313e308;
  if (v5 == 0.0) {
    double v10 = 0.0;
  }
  if (v6) {
    double v9 = v10;
  }
  objc_msgSend(v2, sel_setReservedLayoutWidth_, v9);
  return objc_msgSend(v2, sel__setCustomImage_, v8);
}

uint64_t UICellAccessory.PopUpMenuOptions.isHidden.getter()
{
  return *v0;
}

uint64_t (*UICellAccessory.PopUpMenuOptions.isHidden.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.PopUpMenuOptions.reservedLayoutWidth.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t (*UICellAccessory.PopUpMenuOptions.tintColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

id UICellAccessory.PopUpMenuOptions.init(isHidden:reservedLayoutWidth:tintColor:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1858BB7F8(a1, a2, a3, qword_1E8FB0A30, (id *)&qword_1E8FB1EF8, a4);
}

void sub_1858F6008()
{
  id v0 = objc_allocWithZone((Class)UIMenu);
  uint64_t v1 = (void *)sub_186A1E92C();
  sub_1853B985C(0, (unint64_t *)&qword_1EB255AC0);
  uint64_t v2 = (void *)sub_186A1EB1C();
  id v3 = objc_msgSend(v0, sel_initWithTitle_image_imageName_identifier_options_children_, v1, 0, 0, 0, 0, v2);

  id v4 = v3;
  objc_msgSend(v4, sel_setSubtitle_, 0);

  objc_msgSend(v4, sel_setPreferredElementSize_, -1);
  id v5 = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryPopUpMenu), sel_initWithMenu_, v4);

  qword_1E8FB1EF8 = (uint64_t)v5;
}

id static UICellAccessory.popUpMenu(_:displayed:options:selectedElementDidChangeHandler:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, double *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v9 = *a2;
  uint64_t v10 = *(unsigned __int8 *)a3;
  double v11 = a3[1];
  int v12 = *((unsigned __int8 *)a3 + 16);
  uint64_t v13 = *((void *)a3 + 3);
  id v14 = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryPopUpMenu), sel_initWithMenu_, a1);
  if (a4)
  {
    uint64_t v18[4] = a4;
    v18[5] = a5;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 1107296256;
    _OWORD v18[2] = sub_1858F6298;
    void v18[3] = &block_descriptor_16;
    a4 = _Block_copy(v18);
    swift_retain();
    swift_release();
  }
  objc_msgSend(v14, sel_setSelectedElementDidChangeHandler_, a4);
  _Block_release(a4);
  objc_msgSend(v14, sel_setDisplayedState_, v9);
  objc_msgSend(v14, sel_setTintColor_, v13);
  objc_msgSend(v14, sel_setHidden_, v10);
  double v15 = v11;
  double v16 = -1.79769313e308;
  if (v11 == 0.0) {
    double v16 = 0.0;
  }
  if (v12) {
    double v15 = v16;
  }
  id result = objc_msgSend(v14, sel_setReservedLayoutWidth_, v15);
  *a6 = 9;
  a6[1] = v14;
  return result;
}

void sub_1858F6298(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t UICellAccessory.LabelOptions.isHidden.getter()
{
  return *v0;
}

uint64_t UICellAccessory.LabelOptions.isHidden.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*UICellAccessory.LabelOptions.isHidden.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void UICellAccessory.LabelOptions.reservedLayoutWidth.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v2;
}

uint64_t UICellAccessory.LabelOptions.reservedLayoutWidth.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)result;
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*UICellAccessory.LabelOptions.reservedLayoutWidth.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void *UICellAccessory.LabelOptions.tintColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

void UICellAccessory.LabelOptions.tintColor.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
}

uint64_t (*UICellAccessory.LabelOptions.tintColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

id UICellAccessory.LabelOptions.font.getter()
{
  return *(id *)(v0 + 32);
}

void UICellAccessory.LabelOptions.font.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
}

uint64_t (*UICellAccessory.LabelOptions.font.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t UICellAccessory.LabelOptions.adjustsFontForContentSizeCategory.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t UICellAccessory.LabelOptions.adjustsFontForContentSizeCategory.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

uint64_t (*UICellAccessory.LabelOptions.adjustsFontForContentSizeCategory.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void UICellAccessory.LabelOptions.init(isHidden:reservedLayoutWidth:tintColor:font:adjustsFontForContentSizeCategory:)(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, unsigned __int8 a5@<W4>, uint64_t a6@<X8>)
{
  double v10 = *(double *)a2;
  char v11 = *(unsigned char *)(a2 + 8);
  char v12 = *(unsigned char *)(a2 + 9);
  if (a1 == 2)
  {
    if (qword_1E8FAE848 != -1) {
      swift_once();
    }
    unsigned __int8 v13 = objc_msgSend((id)qword_1E8FAE838, sel_isHidden);
    if ((v12 & 1) == 0)
    {
LABEL_5:
      char v14 = v11 & 1;
      int v15 = a5;
      if (!a3) {
        goto LABEL_21;
      }
LABEL_12:
      id v17 = a3;
      if (!a4) {
        goto LABEL_24;
      }
      goto LABEL_13;
    }
  }
  else
  {
    unsigned __int8 v13 = a1 & 1;
    if ((*(unsigned char *)(a2 + 9) & 1) == 0) {
      goto LABEL_5;
    }
  }
  if (qword_1E8FAE848 != -1) {
    swift_once();
  }
  objc_msgSend((id)qword_1E8FAE838, sel_reservedLayoutWidth);
  if (v16 == 0.0)
  {
    char v14 = 1;
    double v10 = 0.0;
    int v15 = a5;
    if (!a3) {
      goto LABEL_21;
    }
    goto LABEL_12;
  }
  if (v16 == -1.79769313e308) {
    double v10 = COERCE_DOUBLE(1);
  }
  else {
    double v10 = v16;
  }
  char v14 = v16 == -1.79769313e308;
  int v15 = a5;
  if (a3) {
    goto LABEL_12;
  }
LABEL_21:
  if (qword_1E8FAE848 != -1) {
    swift_once();
  }
  id v17 = objc_msgSend((id)qword_1E8FAE838, sel_tintColor);
  id v25 = v17;
  if (!a4)
  {
LABEL_24:
    uint64_t v26 = qword_1E8FAE848;
    id v27 = a3;
    if (v26 != -1) {
      swift_once();
    }
    id v19 = objc_msgSend((id)qword_1E8FAE838, sel_font);
    if (v15 != 2) {
      goto LABEL_27;
    }
    goto LABEL_14;
  }
LABEL_13:
  id v18 = a3;
  id v19 = a4;
  if (v15 != 2)
  {
LABEL_27:
    id v28 = v19;

    unsigned __int8 v24 = v15 & 1;
    goto LABEL_28;
  }
LABEL_14:
  uint64_t v20 = qword_1E8FAE848;
  id v21 = v19;
  id v22 = a4;
  if (v20 != -1) {
    swift_once();
  }
  id v23 = (id)qword_1E8FAE838;
  unsigned __int8 v24 = objc_msgSend(v23, sel_adjustsFontForContentSizeCategory);

LABEL_28:
  *(unsigned char *)a6 = v13;
  *(double *)(a6 + _Block_object_dispose(&STACK[0x478], 8) = v10;
  *(unsigned char *)(a6 + 16) = v14;
  *(void *)(a6 + 24) = v17;
  *(void *)(a6 + 32) = v19;
  *(unsigned char *)(a6 + 40) = v24;
}

void sub_1858F6710()
{
  id v0 = objc_allocWithZone((Class)UICellAccessoryLabel);
  uint64_t v1 = (void *)sub_186A1E92C();
  id v2 = objc_msgSend(v0, sel_initWithText_, v1);

  qword_1E8FAE838 = (uint64_t)v2;
}

id static UICellAccessory.label(text:displayed:options:)@<X0>(unsigned __int8 *a1@<X2>, double *a2@<X3>, void *a3@<X8>)
{
  unsigned __int8 v14 = *a1;
  char v4 = *(unsigned char *)a2;
  double v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v8 = *((void *)a2 + 4);
  char v9 = *((unsigned char *)a2 + 40);
  id v10 = objc_allocWithZone((Class)UICellAccessoryLabel);
  swift_bridgeObjectRetain();
  char v11 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v10, sel_initWithText_, v11);

  LOBYTE(v16[0]) = v4;
  v16[1] = v5;
  char v17 = v6;
  uint64_t v18 = v7;
  uint64_t v19 = v8;
  char v20 = v9;
  unsigned __int8 v15 = v14;
  id result = sub_1858F6858(v16, &v15);
  *a3 = 7;
  a3[1] = v12;
  return result;
}

id sub_1858F6858(double *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(unsigned __int8 *)a1;
  double v4 = a1[1];
  int v5 = *((unsigned __int8 *)a1 + 16);
  uint64_t v6 = *((void *)a1 + 3);
  uint64_t v7 = *((void *)a1 + 4);
  uint64_t v8 = *((unsigned __int8 *)a1 + 40);
  objc_msgSend(v2, sel_setDisplayedState_, *a2);
  objc_msgSend(v2, sel_setTintColor_, v6);
  objc_msgSend(v2, sel_setFont_, v7);
  objc_msgSend(v2, sel_setAdjustsFontForContentSizeCategory_, v8);
  objc_msgSend(v2, sel_setHidden_, v3);
  double v9 = v4;
  double v10 = -1.79769313e308;
  if (v4 == 0.0) {
    double v10 = 0.0;
  }
  if (v5) {
    double v9 = v10;
  }
  return objc_msgSend(v2, sel_setReservedLayoutWidth_, v9);
}

uint64_t (*static UICellAccessory.Placement.position(before:)(uint64_t a1))(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  id v2 = *(void **)(a1 + 8);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  sub_1858F7984(v1);
  id v4 = v2;
  return sub_1858F797C;
}

uint64_t sub_1858F69B0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = 0;
  int v5 = (void **)(a1 + 40);
  while (2)
  {
    uint64_t v6 = *(v5 - 1);
    switch((unint64_t)v6)
    {
      case 0uLL:
        if (a2) {
          goto LABEL_4;
        }
        break;
      case 1uLL:
        if (a2 != (void *)1) {
          goto LABEL_4;
        }
        break;
      case 2uLL:
        if (a2 != (void *)2) {
          goto LABEL_4;
        }
        break;
      case 3uLL:
        if (a2 != (void *)3) {
          goto LABEL_4;
        }
        break;
      case 4uLL:
        if (a2 != (void *)4) {
          goto LABEL_4;
        }
        break;
      case 5uLL:
        if (a2 != (void *)5) {
          goto LABEL_4;
        }
        break;
      case 6uLL:
        if (a2 != (void *)6) {
          goto LABEL_4;
        }
        break;
      case 7uLL:
        if (a2 != (void *)7) {
          goto LABEL_4;
        }
        break;
      case 8uLL:
        if (a2 != (void *)8) {
          goto LABEL_4;
        }
        break;
      case 9uLL:
        if (a2 != (void *)9) {
          goto LABEL_4;
        }
        break;
      default:
        if ((unint64_t)a2 < 0xA) {
          goto LABEL_4;
        }
        uint64_t v7 = *v5;
        sub_1853B985C(0, (unint64_t *)&qword_1E8FAFFC0);
        sub_1858F7984(v6);
        id v8 = v7;
        sub_1858F7984(a2);
        sub_1858F7984(v6);
        char v9 = sub_186A1F0AC();
        sub_1858F9144(a2);
        sub_1858F9144(v6);
        sub_1858F9144(v6);

        if ((v9 & 1) == 0)
        {
LABEL_4:
          ++v4;
          v5 += 2;
          if (v2 == v4) {
            return 0;
          }
          continue;
        }
        break;
    }
    return v4;
  }
}

uint64_t (*static UICellAccessory.Placement.position(after:)(uint64_t a1))(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  sub_1858F7984(v1);
  id v4 = v2;
  return sub_1858F912C;
}

uint64_t sub_1858F6BD8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  id v4 = (void **)(a1 + 16 * v2 + 24);
  uint64_t v5 = *(void *)(a1 + 16);
  while (2)
  {
    uint64_t v6 = *(v4 - 1);
    switch((unint64_t)v6)
    {
      case 0uLL:
        if (a2) {
          goto LABEL_4;
        }
        break;
      case 1uLL:
        if (a2 != (void *)1) {
          goto LABEL_4;
        }
        break;
      case 2uLL:
        if (a2 != (void *)2) {
          goto LABEL_4;
        }
        break;
      case 3uLL:
        if (a2 != (void *)3) {
          goto LABEL_4;
        }
        break;
      case 4uLL:
        if (a2 != (void *)4) {
          goto LABEL_4;
        }
        break;
      case 5uLL:
        if (a2 != (void *)5) {
          goto LABEL_4;
        }
        break;
      case 6uLL:
        if (a2 != (void *)6) {
          goto LABEL_4;
        }
        break;
      case 7uLL:
        if (a2 != (void *)7) {
          goto LABEL_4;
        }
        break;
      case 8uLL:
        if (a2 != (void *)8) {
          goto LABEL_4;
        }
        break;
      case 9uLL:
        if (a2 != (void *)9) {
          goto LABEL_4;
        }
        break;
      default:
        if ((unint64_t)a2 < 0xA) {
          goto LABEL_4;
        }
        uint64_t v7 = *v4;
        sub_1853B985C(0, (unint64_t *)&qword_1E8FAFFC0);
        sub_1858F7984(v6);
        id v8 = v7;
        sub_1858F7984(a2);
        sub_1858F7984(v6);
        char v9 = sub_186A1F0AC();
        sub_1858F9144(a2);
        sub_1858F9144(v6);
        sub_1858F9144(v6);

        if ((v9 & 1) == 0)
        {
LABEL_4:
          v4 -= 2;
          if (--v5) {
            continue;
          }
          uint64_t v5 = v2;
        }
        break;
    }
    return v5;
  }
}

id UICellAccessory.CustomViewConfiguration.customView.getter()
{
  return *v0;
}

uint64_t UICellAccessory.CustomViewConfiguration.placement.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  *a1 = v1[1];
  a1[1] = v2;
  a1[2] = v3;
  return sub_1858F9134();
}

uint64_t UICellAccessory.CustomViewConfiguration.isHidden.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t UICellAccessory.CustomViewConfiguration.isHidden.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

uint64_t (*UICellAccessory.CustomViewConfiguration.isHidden.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void UICellAccessory.CustomViewConfiguration.reservedLayoutWidth.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 48);
  *(void *)a1 = *(void *)(v1 + 40);
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v2;
}

uint64_t UICellAccessory.CustomViewConfiguration.reservedLayoutWidth.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 40) = *(void *)result;
  *(unsigned char *)(v1 + 4_Block_object_dispose(&STACK[0x478], 8) = v2;
  return result;
}

uint64_t (*UICellAccessory.CustomViewConfiguration.reservedLayoutWidth.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void *UICellAccessory.CustomViewConfiguration.tintColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 56);
  id v2 = v1;
  return v1;
}

void UICellAccessory.CustomViewConfiguration.tintColor.setter(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
}

uint64_t (*UICellAccessory.CustomViewConfiguration.tintColor.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

uint64_t UICellAccessory.CustomViewConfiguration.maintainsFixedSize.getter()
{
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t UICellAccessory.CustomViewConfiguration.maintainsFixedSize.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 64) = result;
  return result;
}

uint64_t (*UICellAccessory.CustomViewConfiguration.maintainsFixedSize.modify())()
{
  return signpost_c2_removePresentationModifier_end;
}

void UICellAccessory.CustomViewConfiguration.init(customView:placement:isHidden:reservedLayoutWidth:tintColor:maintainsFixedSize:)(void *a1@<X0>, unint64_t *a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  int v10 = a3;
  unint64_t v11 = *a2;
  unint64_t v12 = a2[1];
  unint64_t v13 = a2[2];
  double v14 = *(double *)a4;
  char v30 = *(unsigned char *)(a4 + 8);
  char v15 = *(unsigned char *)(a4 + 9);
  id v16 = objc_allocWithZone((Class)UICellAccessoryCustomView);
  id v17 = a1;
  sub_1858F9134();
  id v18 = objc_msgSend(v16, sel_initWithCustomView_placement_, v17, v11 >> 63);
  uint64_t v19 = v18;
  if (v10 == 2)
  {
    unsigned __int8 v20 = objc_msgSend(v18, sel_isHidden);
    if ((v15 & 1) == 0)
    {
LABEL_3:
      char v21 = v30 & 1;
      goto LABEL_11;
    }
  }
  else
  {
    unsigned __int8 v20 = v10 & 1;
    if ((v15 & 1) == 0) {
      goto LABEL_3;
    }
  }
  objc_msgSend(v19, sel_reservedLayoutWidth);
  if (v22 == 0.0)
  {
    char v21 = 1;
    double v14 = 0.0;
  }
  else
  {
    if (v22 == -1.79769313e308) {
      double v14 = COERCE_DOUBLE(1);
    }
    else {
      double v14 = v22;
    }
    char v21 = v22 == -1.79769313e308;
  }
LABEL_11:
  char v31 = v21;
  if (a5)
  {
    id v23 = a5;
    if (a6 != 2)
    {
      id v24 = a5;
      id v23 = a5;
LABEL_16:

      unsigned __int8 v27 = a6 & 1;
      goto LABEL_17;
    }
  }
  else
  {
    id v23 = objc_msgSend(v19, sel_tintColor);
    id v25 = v23;
    if (a6 != 2) {
      goto LABEL_16;
    }
  }
  id v26 = a5;
  unsigned __int8 v27 = objc_msgSend(v19, sel_maintainsFixedSize);

LABEL_17:
  id v28 = v17;
  sub_1858F9134();

  sub_1858F913C();
  sub_1858F913C();

  *(void *)a7 = v28;
  *(void *)(a7 + _Block_object_dispose(&STACK[0x478], 8) = v11;
  *(void *)(a7 + 16) = v12;
  *(void *)(a7 + 24) = v13;
  *(unsigned char *)(a7 + 32) = v20;
  *(double *)(a7 + 40) = v14;
  *(unsigned char *)(a7 + 4_Block_object_dispose(&STACK[0x478], 8) = v31;
  *(void *)(a7 + 56) = v23;
  *(unsigned char *)(a7 + 64) = v27;
}

id static UICellAccessory.customView(configuration:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 8);
  id v13 = *(id *)a1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  char v8 = *(unsigned char *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  char v10 = *(unsigned char *)(a1 + 64);
  id v11 = objc_msgSend(objc_allocWithZone((Class)UICellAccessoryCustomView), sel_initWithCustomView_placement_, *(void *)a1, v3 >> 63);
  v14[0] = v13;
  v14[1] = v3;
  long long v14[2] = v4;
  v14[3] = v5;
  char v15 = v6;
  uint64_t v16 = v7;
  char v17 = v8;
  uint64_t v18 = v9;
  char v19 = v10;
  sub_1858F71B4((uint64_t)v14);
  *a2 = v13;
  a2[1] = v11;
  return v13;
}

id sub_1858F71B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 32);
  double v5 = *(double *)(a1 + 40);
  int v13 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 64);
  objc_msgSend(v1, sel_setDisplayedState_, *(void *)(a1 + 8));
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v2;
  *(void *)(v8 + 24) = v3;
  void aBlock[4] = sub_1858FA71C;
  void aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1858F755C;
  uint64_t aBlock[3] = &block_descriptor_51;
  uint64_t v9 = _Block_copy(aBlock);
  sub_1858F9134();
  swift_release();
  objc_msgSend(v1, sel_setPosition_, v9);
  _Block_release(v9);
  objc_msgSend(v1, sel_setTintColor_, v6);
  objc_msgSend(v1, sel_setMaintainsFixedSize_, v7);
  objc_msgSend(v1, sel_setHidden_, v4);
  double v10 = v5;
  double v11 = -1.79769313e308;
  if (v5 == 0.0) {
    double v11 = 0.0;
  }
  if (v13) {
    double v10 = v11;
  }
  return objc_msgSend(v1, sel_setReservedLayoutWidth_, v10);
}

void UICellAccessory.AccessoryType.hash(into:)()
{
  uint64_t v1 = *v0;
  switch((unint64_t)*v0)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
      sub_186A1F9FC();
      break;
    default:
      sub_186A1F9FC();
      id v2 = v1;
      sub_186A1F0BC();
      sub_1858F9144(v1);
      break;
  }
}

uint64_t UICellAccessory.AccessoryType.hashValue.getter()
{
  return sub_186A1FA4C();
}

uint64_t sub_1858F74B4()
{
  return sub_186A1FA4C();
}

uint64_t sub_1858F7504()
{
  return sub_186A1FA4C();
}

id UICellAccessory.accessoryType.getter@<X0>(void **a1@<X8>)
{
  id v2 = *v1;
  *a1 = *v1;
  return sub_1858F7984(v2);
}

uint64_t sub_1858F755C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  sub_1853B985C(0, (unint64_t *)&qword_1EB255968);
  uint64_t v2 = sub_186A1EB3C();
  swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1858F75DC(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (a1 >> 62) {
    goto LABEL_38;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    if (!v4)
    {
LABEL_36:
      uint64_t v14 = a2(v5);
      swift_bridgeObjectRelease();
      return v14;
    }
    uint64_t v17 = MEMORY[0x1E4FBC860];
    sub_1858F7958(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      break;
    }
    uint64_t v16 = a2;
    uint64_t v6 = 0;
    a2 = (uint64_t (*)(uint64_t))(a1 & 0xC000000000000001);
    uint64_t v5 = v17;
    while (v4 != v6)
    {
      if (a2) {
        id v7 = (id)MEMORY[0x18C102240](v6, a1);
      }
      else {
        id v7 = *(id *)(a1 + 8 * v6 + 32);
      }
      id v8 = v7;
      self;
      if (swift_dynamicCastObjCClass())
      {
        uint64_t v9 = 0;
      }
      else
      {
        self;
        if (swift_dynamicCastObjCClass())
        {
          uint64_t v9 = 8;
        }
        else
        {
          self;
          if (swift_dynamicCastObjCClass())
          {
            uint64_t v9 = 2;
          }
          else
          {
            self;
            if (swift_dynamicCastObjCClass())
            {
              uint64_t v9 = 3;
            }
            else
            {
              self;
              if (swift_dynamicCastObjCClass())
              {
                uint64_t v9 = 4;
              }
              else
              {
                self;
                if (swift_dynamicCastObjCClass())
                {
                  uint64_t v9 = 5;
                }
                else
                {
                  self;
                  if (swift_dynamicCastObjCClass())
                  {
                    uint64_t v9 = 6;
                  }
                  else
                  {
                    self;
                    if (swift_dynamicCastObjCClass())
                    {
                      uint64_t v9 = 7;
                    }
                    else
                    {
                      self;
                      double v10 = (void *)swift_dynamicCastObjCClass();
                      if (v10)
                      {
                        uint64_t v9 = (uint64_t)objc_msgSend(v10, sel_customView);
                      }
                      else
                      {
                        self;
                        if (swift_dynamicCastObjCClass())
                        {
                          uint64_t v9 = 1;
                        }
                        else
                        {
                          self;
                          if (!swift_dynamicCastObjCClass()) {
                            goto LABEL_40;
                          }
                          uint64_t v9 = 9;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      unint64_t v12 = *(void *)(v17 + 16);
      unint64_t v11 = *(void *)(v17 + 24);
      if (v12 >= v11 >> 1) {
        sub_1858F7958(v11 > 1, v12 + 1, 1);
      }
      ++v6;
      *(void *)(v17 + 16) = v12 + 1;
      uint64_t v13 = v17 + 16 * v12;
      *(void *)(v13 + 32) = v9;
      *(void *)(v13 + 40) = v8;
      if (v4 == v6)
      {
        a2 = v16;
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_186A1F67C();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_40:
  uint64_t result = sub_186A1F60C();
  __break(1u);
  return result;
}

uint64_t sub_1858F7938(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F7C20(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_1858F7958(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F7D8C(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_1858F797C(uint64_t a1)
{
  return sub_1858F69B0(a1, *(void **)(v1 + 16));
}

id sub_1858F7984(id result)
{
  if ((unint64_t)result >= 0xA) {
    return result;
  }
  return result;
}

uint64_t sub_1858F7994(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F7EF8(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_1858F79B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F878C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1E8FB2830, &qword_1E8FB1F58);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1858F79E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F8068(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1858F7A04(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F81C8(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1858F7A24(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F8328(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1858F7A44(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F8494(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1858F7A64(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F8620(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1858F7A84(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F8AC8(a1, a2, a3, (void *)*v3, &qword_1E8FB1F50, MEMORY[0x1E4F27990]);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1858F7AC0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F8AC8(a1, a2, a3, (void *)*v3, &qword_1E8FB2820, type metadata accessor for UILayoutComponentResponse.UpdateOutputModelCallbackInfo);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1858F7AFC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F878C(a1, a2, a3, (void *)*v3, &qword_1E8FB1F30, &qword_1E8FB1F38);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1858F7B2C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F8934(a1, a2, a3, (void *)*v3, &qword_1E8FB1F48, type metadata accessor for MarkerFormat);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1858F7B68(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F8934(a1, a2, a3, (void *)*v3, &qword_1E8FB1F40, type metadata accessor for TextList);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1858F7BA4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F8AC8(a1, a2, a3, (void *)*v3, &qword_1E8FB1F18, MEMORY[0x1E4FB0C28]);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1858F7BE0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F8D10(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1858F7C00(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1858F8E70(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1858F7C20(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAFEE0);
    double v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    double v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t sub_1858F7D8C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF2C0);
    double v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    double v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t sub_1858F7EF8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAF360);
    double v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    double v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t sub_1858F8068(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB1F20);
    double v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    double v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t sub_1858F81C8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB2730);
    double v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    double v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t sub_1858F8328(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB2740);
    double v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    double v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t sub_1858F8494(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB1F68);
    double v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    double v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB1F70);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t sub_1858F8620(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB1F60);
    double v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    double v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t sub_1858F878C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v13 = (void *)swift_allocObject();
    size_t v14 = _swift_stdlib_malloc_size(v13);
    double v13[2] = v11;
    void v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    unint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t sub_1858F8934(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, void (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    double v13[2] = v11;
    void v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    unint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    a6(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t sub_1858F8AC8(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  double v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  char v21 = (char *)v16 + v20;
  double v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  id v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t sub_1858F8D10(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FAFE50);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t sub_1858F8E70(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB1F28);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_186A1F6DC();
  __break(1u);
  return result;
}

uint64_t _s5UIKit15UICellAccessoryV0C4TypeO2eeoiySbAE_AEtFZ_0(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  switch((unint64_t)*a1)
  {
    case 0uLL:
      uint64_t result = v3 == 0;
      break;
    case 1uLL:
      uint64_t result = v3 == (void *)1;
      break;
    case 2uLL:
      uint64_t result = v3 == (void *)2;
      break;
    case 3uLL:
      uint64_t result = v3 == (void *)3;
      break;
    case 4uLL:
      uint64_t result = v3 == (void *)4;
      break;
    case 5uLL:
      uint64_t result = v3 == (void *)5;
      break;
    case 6uLL:
      uint64_t result = v3 == (void *)6;
      break;
    case 7uLL:
      uint64_t result = v3 == (void *)7;
      break;
    case 8uLL:
      uint64_t result = v3 == (void *)8;
      break;
    case 9uLL:
      uint64_t result = v3 == (void *)9;
      break;
    default:
      if ((unint64_t)v3 >= 0xA)
      {
        sub_1853B985C(0, (unint64_t *)&qword_1E8FAFFC0);
        sub_1858F7984(v2);
        sub_1858F7984(v3);
        char v5 = sub_186A1F0AC();
        sub_1858F9144(v3);
        sub_1858F9144(v2);
        uint64_t result = v5 & 1;
      }
      else
      {
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_1858F912C(uint64_t a1)
{
  return sub_1858F6BD8(a1, *(void **)(v1 + 16));
}

uint64_t sub_1858F9134()
{
  return swift_retain();
}

uint64_t sub_1858F913C()
{
  return swift_release();
}

void sub_1858F9144(id a1)
{
  if ((unint64_t)a1 >= 0xA) {
}
  }

unint64_t sub_1858F9158()
{
  unint64_t result = qword_1E8FB1F00;
  if (!qword_1E8FB1F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FB1F00);
  }
  return result;
}

unint64_t sub_1858F91B0()
{
  unint64_t result = qword_1E8FB1F08;
  if (!qword_1E8FB1F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FB1F08);
  }
  return result;
}

unint64_t sub_1858F9208()
{
  unint64_t result = qword_1E8FB1F10;
  if (!qword_1E8FB1F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E8FB1F10);
  }
  return result;
}

uint64_t sub_1858F925C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = UICollectionViewListCell.accessories.getter();
  *a1 = result;
  return result;
}

void sub_1858F9288()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  UICollectionViewListCell.accessories.setter(v0);
}

id sub_1858F92B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *a2 = v2;
  return v2;
}

void sub_1858F92C0(id *a1, uint64_t a2)
{
  id v3 = *a1;
  uint64_t v4 = *(void **)(a2 + 32);
  id v5 = *a1;

  *(void *)(a2 + 32) = v3;
}

void *initializeBufferWithCopyOfBuffer for UICellAccessory(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2 >= 0xAuLL) {
    id v5 = v4;
  }
  unint64_t v6 = *(void **)(a2 + 8);
  *a1 = v4;
  a1[1] = v6;
  id v7 = v6;
  return a1;
}

void destroy for UICellAccessory(uint64_t a1)
{
  if (*(void *)a1 >= 0xAuLL) {

  }
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for UICellAccessory(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  if (*(void *)a1 >= 0xAuLL)
  {
    if ((unint64_t)v5 >= 0xA)
    {
      *(void *)a1 = v5;
      id v7 = v5;

      goto LABEL_8;
    }

    id v5 = *(void **)a2;
    goto LABEL_6;
  }
  if ((unint64_t)v5 < 0xA)
  {
LABEL_6:
    *(void *)a1 = v5;
    goto LABEL_8;
  }
  *(void *)a1 = v5;
  id v6 = v5;
LABEL_8:
  uint64_t v8 = *(void **)(a2 + 8);
  uint64_t v9 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v8;
  id v10 = v8;

  return a1;
}

uint64_t assignWithTake for UICellAccessory(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = *a2;
  if (*(void *)a1 >= 0xAuLL)
  {
    if (v5 >= 0xA)
    {
      *(void *)a1 = v5;

      goto LABEL_6;
    }
  }
  *(void *)a1 = v5;
LABEL_6:
  id v6 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = a2[1];

  return a1;
}

uint64_t getEnumTagSinglePayload for UICellAccessory(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UICellAccessory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x478], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + _Block_object_dispose(&STACK[0x478], 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for UICellAccessory.LayoutDimension(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1858F954C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t initializeWithCopy for UICellAccessory.DetailOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v3;
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for UICellAccessory.DetailOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v3;
  id v4 = *(void **)(a1 + 24);
  unint64_t v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  id v6 = v5;

  return a1;
}

uint64_t assignWithTake for UICellAccessory.DetailOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for UICellAccessory.DetailOptions()
{
  return &type metadata for UICellAccessory.DetailOptions;
}

ValueMetadata *type metadata accessor for UICellAccessory.CheckmarkOptions()
{
  return &type metadata for UICellAccessory.CheckmarkOptions;
}

ValueMetadata *type metadata accessor for UICellAccessory.DeleteOptions()
{
  return &type metadata for UICellAccessory.DeleteOptions;
}

ValueMetadata *type metadata accessor for UICellAccessory.InsertOptions()
{
  return &type metadata for UICellAccessory.InsertOptions;
}

uint64_t initializeWithCopy for UICellAccessory.ReorderOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for UICellAccessory.ReorderOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v4;
  unint64_t v5 = *(void **)(a1 + 24);
  id v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v6;
  id v7 = v6;

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for UICellAccessory.ReorderOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for UICellAccessory.ReorderOptions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UICellAccessory.ReorderOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UICellAccessory.ReorderOptions()
{
  return &type metadata for UICellAccessory.ReorderOptions;
}

uint64_t _s5UIKit15UICellAccessoryV13DeleteOptionsVwcp_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v3 = *(void **)(a2 + 24);
  int v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t _s5UIKit15UICellAccessoryV13DeleteOptionsVwca_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v4;
  id v5 = *(void **)(a1 + 24);
  id v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v6;
  id v7 = v6;

  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v9;
  id v10 = v9;

  return a1;
}

uint64_t _s5UIKit15UICellAccessoryV13DeleteOptionsVwta_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);

  uint64_t v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for UICellAccessory.MultiselectOptions()
{
  return &type metadata for UICellAccessory.MultiselectOptions;
}

uint64_t initializeWithCopy for UICellAccessory.OutlineDisclosureOptions(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v3 = *(void **)(a2 + 24);
  uint64_t v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for UICellAccessory.OutlineDisclosureOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v4;
  id v5 = *(void **)(a1 + 24);
  id v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v6;
  id v7 = v6;

  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v9;
  id v10 = v9;

  return a1;
}

uint64_t assignWithTake for UICellAccessory.OutlineDisclosureOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);

  uint64_t v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t _s5UIKit15UICellAccessoryV13DeleteOptionsVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s5UIKit15UICellAccessoryV13DeleteOptionsVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UICellAccessory.OutlineDisclosureOptions()
{
  return &type metadata for UICellAccessory.OutlineDisclosureOptions;
}

uint64_t _s13ConfigurationV9IndicatorOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s5UIKit15UICellAccessoryV14DisplayedStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1858F9CF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UICellAccessory.OutlineDisclosureOptions.Style()
{
  return &type metadata for UICellAccessory.OutlineDisclosureOptions.Style;
}

uint64_t _s5UIKit15UICellAccessoryV26DisclosureIndicatorOptionsVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s5UIKit15UICellAccessoryV26DisclosureIndicatorOptionsVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UICellAccessory.PopUpMenuOptions()
{
  return &type metadata for UICellAccessory.PopUpMenuOptions;
}

void destroy for UICellAccessory.LabelOptions(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
}

uint64_t initializeWithCopy for UICellAccessory.LabelOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v3 = *(void **)(a2 + 24);
  int v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for UICellAccessory.LabelOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v4;
  id v5 = *(void **)(a1 + 24);
  id v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v6;
  id v7 = v6;

  int v8 = *(void **)(a2 + 32);
  uint64_t v9 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v8;
  id v10 = v8;

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for UICellAccessory.LabelOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);

  uint64_t v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for UICellAccessory.LabelOptions(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UICellAccessory.LabelOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UICellAccessory.LabelOptions()
{
  return &type metadata for UICellAccessory.LabelOptions;
}

uint64_t destroy for UICellAccessory.Placement()
{
  return sub_1858F913C();
}

void *_s5UIKit15UICellAccessoryV9PlacementOwCP_0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_1858F9134();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

void *assignWithCopy for UICellAccessory.Placement(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_1858F9134();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_1858F913C();
  return a1;
}

uint64_t assignWithTake for UICellAccessory.Placement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  sub_1858F913C();
  return a1;
}

uint64_t getEnumTagSinglePayload for UICellAccessory.Placement(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)a1 >> 2;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for UICellAccessory.Placement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)__n128 result = 4 * -a2;
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1858FA1A4(void *a1)
{
  return *a1 >> 63;
}

void *sub_1858FA1B0(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_1858FA1C0(uint64_t *result, uint64_t a2)
{
  *__n128 result = *result & 3 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for UICellAccessory.Placement()
{
  return &type metadata for UICellAccessory.Placement;
}

void destroy for UICellAccessory.CustomViewConfiguration(uint64_t a1)
{
  sub_1858F913C();
  uint64_t v2 = *(void **)(a1 + 56);
}

uint64_t initializeWithCopy for UICellAccessory.CustomViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  id v8 = v4;
  sub_1858F9134();
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x478], 8) = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  id v10 = v9;
  return a1;
}

uint64_t assignWithCopy for UICellAccessory.CustomViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  sub_1858F9134();
  *(void *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_1858F913C();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x478], 8) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v10;
  int64_t v11 = *(void **)(a1 + 56);
  uint64_t v12 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v12;
  id v13 = v12;

  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x478], 8) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for UICellAccessory.CustomViewConfiguration(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x478], 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v5;
  sub_1858F913C();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x478], 8) = *(unsigned char *)(a2 + 48);
  id v6 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for UICellAccessory.CustomViewConfiguration(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UICellAccessory.CustomViewConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UICellAccessory.CustomViewConfiguration()
{
  return &type metadata for UICellAccessory.CustomViewConfiguration;
}

void *initializeBufferWithCopyOfBuffer for UICellAccessory.AccessoryType(void *a1, void **a2)
{
  long long v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for UICellAccessory.AccessoryType(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for UICellAccessory.AccessoryType(void **a1, void **a2)
{
  long long v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **assignWithTake for UICellAccessory.AccessoryType(void **a1, unint64_t *a2)
{
  long long v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for UICellAccessory.AccessoryType(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF5 && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483638);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 9;
  if (v4 >= 0xB) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UICellAccessory.AccessoryType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF6)
  {
    *(void *)__n128 result = 0;
    *(_DWORD *)__n128 result = a2 - 2147483638;
    if (a3 >= 0x7FFFFFF6) {
      *(unsigned char *)(result + _Block_object_dispose(&STACK[0x478], 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF6) {
      *(unsigned char *)(result + _Block_object_dispose(&STACK[0x478], 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2 + 9;
    }
  }
  return result;
}

uint64_t sub_1858FA69C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1858FA6B4(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for UICellAccessory.AccessoryType()
{
  return &type metadata for UICellAccessory.AccessoryType;
}

uint64_t sub_1858FA6E4()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1858FA71C(unint64_t a1)
{
  return sub_1858F75DC(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

void sub_1858FA97C()
{
}

id sub_1858FA98C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _UILightBoxView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for _UILightBoxView()
{
  return self;
}

char *sub_1858FA9F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, double a6, double a7, double a8, double a9)
{
  *(void *)(v9 + OBJC_IVAR____TtC5UIKit15_UILightBoxView_lightSourceView) = a1;
  sub_1858FAB7C(a2, (uint64_t)v27);
  sub_1858FAB7C(a3, (uint64_t)v26);
  id v19 = a1;
  unint64_t v20 = sub_185A9C774((uint64_t)v27, (uint64_t)v26, a4, a5, a6, a7, a8, a9);
  id v21 = objc_msgSend(v19, sel_layer);
  sub_186A1E95C();
  id v22 = objc_allocWithZone(MEMORY[0x1E4F39BC0]);
  uint64_t v23 = (void *)sub_186A1E92C();
  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(v22, sel_initWithType_, v23);

  objc_msgSend(v21, sel_setCompositingFilter_, v24);
  objc_msgSend(v20, sel_addSubview_, v19);

  sub_1858FABE4(a3);
  sub_1858FABE4(a2);
  return v20;
}

uint64_t sub_1858FAB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB2630);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1858FABE4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E8FB2630);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1858FAD6C()
{
  return sub_1858FB72C(type metadata accessor for _UITabCrossFadeTransitionDomain);
}

uint64_t type metadata accessor for _UITabCrossFadeTransitionDomain()
{
  return self;
}

uint64_t sub_1858FAEC0()
{
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for _UITabCrossFadeTransitionSpec();
  objc_msgSendSuper2(&v12, sel_setDefaultValues);
  uint64_t v1 = OBJC_IVAR____TtC5UIKit29_UITabCrossFadeTransitionSpec_compact;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC5UIKit29_UITabCrossFadeTransitionSpec_compact];
  *(void *)(v2 + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_fadedOutScale) = 0x3FEFC91D14E3BCD3;
  *(void *)(*(void *)(v2 + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_fadeOut)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_duration) = 0x3FC10FF972474539;
  *(void *)(*(void *)(*(void *)&v0[v1] + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_fadeOut)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_delay) = 0x3FC7765FD8ADAB9FLL;
  uint64_t v3 = *(void *)&v0[v1];
  uint64_t v4 = OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_scaleOut;
  uint64_t result = 0x3FC999999999999ALL;
  *(void *)(*(void *)(v3 + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_scaleOut)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_duration) = 0x3FC999999999999ALL;
  *(void *)(*(void *)(v3 + v4) + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_delay) = 0;
  uint64_t v6 = OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_fadeIn;
  *(void *)(*(void *)(v3 + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_fadeIn)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_duration) = 0x3FC10FF972474539;
  *(void *)(*(void *)(v3 + v6) + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_delay) = 0x3FA999999999999ALL;
  uint64_t v7 = OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_scaleIn;
  *(void *)(*(void *)(v3 + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_scaleIn)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_duration) = 0x3FD999999999999ALL;
  *(void *)(*(void *)(v3 + v7) + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_delay) = 0x3FB126E978D4FDF4;
  uint64_t v8 = OBJC_IVAR____TtC5UIKit29_UITabCrossFadeTransitionSpec_regular;
  *(void *)(*(void *)&v0[OBJC_IVAR____TtC5UIKit29_UITabCrossFadeTransitionSpec_regular]
            + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_fadedOutScale) = 0x3FEFAE147AE147AELL;
  *(void *)(*(void *)(*(void *)&v0[v8] + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_fadeOut)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_duration) = 0x3FC999999999999ALL;
  uint64_t v9 = *(void *)&v0[v8];
  *(void *)(*(void *)(v9 + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_fadeOut)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_delay) = 0x3FD199999999999ALL;
  *(void *)(*(void *)(v9 + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_scaleOut)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_duration) = 0x3FD3333333333333;
  uint64_t v10 = *(void *)&v0[v8];
  *(void *)(*(void *)(v10 + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_scaleOut)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_delay) = 0;
  *(void *)(*(void *)(v10 + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_fadeIn)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_duration) = 0x3FC999999999999ALL;
  uint64_t v11 = *(void *)&v0[v8];
  *(void *)(*(void *)(v11 + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_fadeIn)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_delay) = 0x3FB3333333333333;
  *(void *)(*(void *)(v11 + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_scaleIn)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_duration) = 0x3FE3333333333333;
  *(void *)(*(void *)(*(void *)&v0[v8] + OBJC_IVAR____TtC5UIKit38_UITabCrossFadeTransitionAnimationSpec_scaleIn)
            + OBJC_IVAR____TtC5UIKit30_UIDurationBounceAnimationSpec_delay) = 0x3FB999999999999ALL;
  return result;
}