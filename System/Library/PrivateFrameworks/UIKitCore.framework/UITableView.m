@interface UITableView
+ (BOOL)_isInternalTableView;
+ (BOOL)_supportsInvalidatingFocusCache;
+ (void)_ensureInitializeSystemAppearanceModifications;
+ (void)_initializeForIdiom:(int64_t)a3;
+ (void)_setupIdiom:(int64_t)a3 forTableViewStyle:(int64_t)a4 includingBackground:(BOOL)a5;
- (BOOL)_allowsEffectiveFocus;
- (BOOL)_allowsEffectiveMultipleSelection;
- (BOOL)_allowsEffectiveSelection;
- (BOOL)_allowsEffectiveSelectionOrCustomActionAtIndexPath:(id)a3;
- (BOOL)_allowsFocusToLeaveViaHeading:(unint64_t)a3;
- (BOOL)_allowsReorderingWhenNotEditing;
- (BOOL)_allowsSelectionOfPendingSelectionIndexPath:(id)a3;
- (BOOL)_beginReorderingForCell:(id)a3 touch:(id)a4;
- (BOOL)_beginTrackingWithEvent:(id)a3;
- (BOOL)_canBeginDragAtPoint:(CGPoint)a3 indexPath:(id)a4;
- (BOOL)_canBeginMenuInteractionAtLocation:(CGPoint)a3;
- (BOOL)_canEditRowAtIndexPath:(id)a3;
- (BOOL)_canFocusCell:(id)a3;
- (BOOL)_canHandleDropSession:(id)a3;
- (BOOL)_canMoveRowAtIndexPath:(id)a3;
- (BOOL)_canPerformAction:(SEL)a3 forCell:(id)a4 sender:(id)a5;
- (BOOL)_canPerformPrimaryActionForRowAtIndexPath:(id)a3;
- (BOOL)_canRowBeIncludedInMultipleSelection:(id)a3;
- (BOOL)_canSelectRowContainingHitView:(id)a3;
- (BOOL)_cellPrefetchingAllowed;
- (BOOL)_cellsSelfSize;
- (BOOL)_clearBlendingViewAllowed;
- (BOOL)_commitPlaceholderInsertionWithContext:(id)a3 dataSourceUpdates:(id)a4;
- (BOOL)_dataSourceHasSectionIndexTitlesForTableView;
- (BOOL)_dataSourceImplementsCanUpdateRowAtIndexPath;
- (BOOL)_dataSourceImplementsDetailTextForHeaderInSection;
- (BOOL)_dataSourceImplementsNumberOfSectionsInTableView;
- (BOOL)_dataSourceImplementsTitleForFooterInSection;
- (BOOL)_dataSourceImplementsTitleForHeaderInSection;
- (BOOL)_defaultAllowsFocus;
- (BOOL)_defaultAllowsFocusDuringEditing;
- (BOOL)_delegateAllowsHighlightingItemAtIndexPath:(id)a3;
- (BOOL)_delegateImplementsAlignmentForFooterInSection;
- (BOOL)_delegateImplementsAlignmentForHeaderInSection;
- (BOOL)_delegateImplementsEstimatedHeightForRowAtIndexPath;
- (BOOL)_delegateImplementsEstimatedHeightForSectionFooter;
- (BOOL)_delegateImplementsEstimatedHeightForSectionHeader;
- (BOOL)_delegateImplementsHeightForFooterInSection;
- (BOOL)_delegateImplementsHeightForHeaderInSection;
- (BOOL)_delegateImplementsHeightForRowAtIndexPath;
- (BOOL)_delegateImplementsMarginForTableView;
- (BOOL)_delegateImplementsTitleWidthForFooterInSection;
- (BOOL)_delegateImplementsTitleWidthForHeaderInSection;
- (BOOL)_delegateImplementsViewForFooterInSection;
- (BOOL)_delegateImplementsViewForHeaderInSection;
- (BOOL)_delegateSupportsPrimaryAction;
- (BOOL)_delegateWantsFooterForSection:(int64_t)a3;
- (BOOL)_delegateWantsFooterTitleForSection:(int64_t)a3;
- (BOOL)_delegateWantsHeaderForSection:(int64_t)a3;
- (BOOL)_delegateWantsHeaderTitleForSection:(int64_t)a3;
- (BOOL)_disableReuseQueuePurgeOnTextSizeChanges;
- (BOOL)_displaysCellContentStringsOnTapAndHold;
- (BOOL)_dragAndDropUsedForReordering;
- (BOOL)_dragSessionAllowsMoveOperation:(id)a3;
- (BOOL)_dragSessionIsRestrictedToDraggingApplication:(id)a3;
- (BOOL)_drawsSeparatorAtTopOfSections;
- (BOOL)_drawsTopShadowInGroupedSections;
- (BOOL)_effectiveDefaultAllowsFocus;
- (BOOL)_estimatesHeights;
- (BOOL)_estimatesRowHeights;
- (BOOL)_estimatesSectionFooterHeights;
- (BOOL)_estimatesSectionHeaderHeights;
- (BOOL)_hasContentForBarInteractions;
- (BOOL)_hasFocusedCellForIndexPath:(id)a3;
- (BOOL)_hasHeaderFooterBelowRowAtIndexPath:(id)a3;
- (BOOL)_hasSwipeToDeleteRow;
- (BOOL)_headerAndFooterViewsFloat;
- (BOOL)_highlightFirstVisibleRowIfAppropriate;
- (BOOL)_highlightRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 usingPresentationValues:(BOOL)a6;
- (BOOL)_highlightRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 usingPresentationValues:(BOOL)a6 playFeedback:(BOOL)a7;
- (BOOL)_ignoreCopyFilterForTableAnimations;
- (BOOL)_indexPathIsValid:(id)a3;
- (BOOL)_inferFocusabilityForCell:(id)a3 atIndexPath:(id)a4;
- (BOOL)_isCellReorderable:(id)a3;
- (BOOL)_isEditingForSwipeDeletion;
- (BOOL)_isEditingRowAtIndexPath:(id)a3;
- (BOOL)_isEditingWithNoSwipedCell;
- (BOOL)_isFirstResponderInDeletedSectionOrRow:(id)a3;
- (BOOL)_isFocusedViewInDeletedSectionOrRow:(id)a3;
- (BOOL)_isInModalViewController;
- (BOOL)_isLastRowForIndexPath:(id)a3;
- (BOOL)_isPerformingRevertingShadowUpdates;
- (BOOL)_isPerformingShadowUpdates;
- (BOOL)_isReorderControlActiveForCell:(id)a3;
- (BOOL)_isReordering;
- (BOOL)_isRowMultiSelect:(id)a3;
- (BOOL)_isRowMultiSelect:(id)a3 followingMacBehavior:(BOOL)a4;
- (BOOL)_isScrolledToTop;
- (BOOL)_isScrolledToTopAtContentOffsetY:(double)a3;
- (BOOL)_isShowingIndex;
- (BOOL)_isTableHeaderAutohiding;
- (BOOL)_isTableHeaderViewHidden;
- (BOOL)_isTopHeaderForSection:(int64_t)a3;
- (BOOL)_isUpdating;
- (BOOL)_isUsingPresentationValues;
- (BOOL)_keepsFirstResponderVisibleOnBoundsChange;
- (BOOL)_manuallyManagesSwipeUI;
- (BOOL)_pathIsHidden:(id)a3;
- (BOOL)_pinsTableHeaderView;
- (BOOL)_providesRowHeights;
- (BOOL)_recomputeHeightForCell:(id)a3 atIndexPath:(id)a4;
- (BOOL)_recomputeHeightForHeaderOrFooter:(BOOL)a3 view:(id)a4 inSection:(int64_t)a5;
- (BOOL)_retargetScrollAnimation;
- (BOOL)_scrollsToMakeFirstResponderVisible;
- (BOOL)_sectionContentInsetFollowsLayoutMargins;
- (BOOL)_selectionInteractionShouldBegin:(id)a3;
- (BOOL)_separatorInsetIsRelativeToCellEdges;
- (BOOL)_separatorsDrawAsOverlay;
- (BOOL)_shouldAllowInternalDrop;
- (BOOL)_shouldApplyReadableWidthInsets;
- (BOOL)_shouldBecomeFocusedOnSelection;
- (BOOL)_shouldChangeIndexBasedOnValueChanged;
- (BOOL)_shouldConfigureCellForDisplayDuringDequeueForIndexPath:(id)a3;
- (BOOL)_shouldConsumePressEvent:(id)a3;
- (BOOL)_shouldDeselectRowsOnTouchesBegan;
- (BOOL)_shouldDisplayExtraSeparatorsAtOffset:(double *)a3;
- (BOOL)_shouldDrawDarkSeparators;
- (BOOL)_shouldDrawSeparatorAtBottomOfSectionForCellAtIndexPath:(id)a3;
- (BOOL)_shouldDrawSeparatorAtTopOfSectionForCellAtIndexPath:(id)a3;
- (BOOL)_shouldDrawThickSeparators;
- (BOOL)_shouldDrawTopSeparatorDueToMergedBarForCellAtIndexPath:(id)a3;
- (BOOL)_shouldHaveIndexOverlaySelectionView;
- (BOOL)_shouldIncludeRowInMultipleSelectionGroupWithCell:(id)a3 atIndexPath:(id)a4;
- (BOOL)_shouldIndentWhileEditingForRowAtIndexPath:(id)a3;
- (BOOL)_shouldResignFirstResponderWithInteractionDisabled;
- (BOOL)_shouldRestorePreReloadScrollPositionWithFirstVisibleIndexPath:(id)a3 scrolledToTop:(BOOL)a4;
- (BOOL)_shouldReusePreviouslyFocusedTableViewSubview:(id)a3 viewType:(int)a4;
- (BOOL)_shouldSelectionFollowFocusForIndexPath:(id)a3 initiatedBySelection:(BOOL)a4;
- (BOOL)_shouldSetIndexBackgroundColorToTableBackgroundColor;
- (BOOL)_shouldShowHeadersAndFooters;
- (BOOL)_shouldShowIndexOverlays;
- (BOOL)_shouldShowMenuForCell:(id)a3;
- (BOOL)_shouldSpringLoadRowAtIndexPath:(id)a3 withContext:(id)a4;
- (BOOL)_shouldStripHeaderTopPaddingForSection:(int64_t)a3;
- (BOOL)_shouldUnionVisibleBounds;
- (BOOL)_shouldUpdateFocusInContext:(id)a3;
- (BOOL)_shouldUseNewHeaderFooterBehavior;
- (BOOL)_shouldUseSearchBarHeaderBehavior;
- (BOOL)_shouldWrapCells;
- (BOOL)_supplementariesFollowSectionContentInsets;
- (BOOL)_supplementarySectionHeadersHugContent;
- (BOOL)_supportsCellPrefetching;
- (BOOL)_swipeDeletionCommitted;
- (BOOL)_swipeDeletionStateHasBeenReset;
- (BOOL)_useLegacySectionHeaderFooterPinningBehavior;
- (BOOL)_useUnifiedSelectionBehavior;
- (BOOL)_usingCustomBackgroundView;
- (BOOL)_visibleFooterViewsContainsView:(id)a3;
- (BOOL)_visibleHeaderViewsContainsView:(id)a3;
- (BOOL)_wantsSwipes;
- (BOOL)_wasEditing;
- (BOOL)_wasEditingRowAtIndexPath:(id)a3;
- (BOOL)allowsFocus;
- (BOOL)allowsFocusDuringEditing;
- (BOOL)allowsMultipleSelection;
- (BOOL)allowsMultipleSelectionDuringEditing;
- (BOOL)allowsSelection;
- (BOOL)allowsSelectionDuringEditing;
- (BOOL)canBeEdited;
- (BOOL)canBecomeFocused;
- (BOOL)cellLayoutMarginsFollowReadableWidth;
- (BOOL)dragInteractionEnabled;
- (BOOL)hasActiveDrag;
- (BOOL)hasActiveDrop;
- (BOOL)hasUncommittedUpdates;
- (BOOL)highlightRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5;
- (BOOL)ignorePinnedTableHeaderUpdates;
- (BOOL)insetsContentViewsToSafeArea;
- (BOOL)isEditing;
- (BOOL)isElementAccessibilityExposedToInterfaceBuilder;
- (BOOL)isIndexHidden;
- (BOOL)isPrefetchingEnabled;
- (BOOL)overlapsSectionHeaderViews;
- (BOOL)remembersLastFocusedIndexPath;
- (BOOL)selectionFollowsFocus;
- (BOOL)shouldDisplayTopSeparatorForRowAtIndexPath:(id)a3;
- (BOOL)swipeActionController:(id)a3 insertActionsView:(id)a4 forItemAtIndexPath:(id)a5;
- (BOOL)swipeActionController:(id)a3 mayBeginSwipeForItemAtIndexPath:(id)a4;
- (BOOL)tableHeaderViewShouldAutoHide;
- (BOOL)touchesShouldCancelInContentView:(id)a3;
- (BOOL)usesVariableMargins;
- (CGFloat)estimatedRowHeight;
- (CGFloat)estimatedSectionFooterHeight;
- (CGFloat)estimatedSectionHeaderHeight;
- (CGFloat)fillerRowHeight;
- (CGFloat)rowHeight;
- (CGFloat)sectionFooterHeight;
- (CGFloat)sectionHeaderHeight;
- (CGFloat)sectionHeaderTopPadding;
- (CGPoint)_adjustFocusContentOffset:(CGPoint)a3 toShowFocusItemWithInfo:(id)a4;
- (CGPoint)_contentOffsetForLowFidelityScrollInDirection:(CGPoint)a3 duration:(double *)a4;
- (CGPoint)_contentOffsetForScrollingToRowAtIndexPath:(id)a3 atScrollPosition:(int64_t)a4;
- (CGPoint)_contentOffsetForScrollingToRowAtIndexPath:(id)a3 atScrollPosition:(int64_t)a4 usingPresentationValues:(BOOL)a5;
- (CGPoint)_validContentOffsetForProposedOffset:(CGPoint)a3;
- (CGPoint)indexBarAccessoryView:(id)a3 contentOffsetForEntry:(id)a4 atIndex:(int64_t)a5;
- (CGRect)_boundsForIndexOverlay;
- (CGRect)_calloutTargetRectForCell:(id)a3;
- (CGRect)_floatingRectForFooterInSection:(int64_t)a3 heightCanBeGuessed:(BOOL)a4;
- (CGRect)_floatingRectForHeaderInSection:(int64_t)a3 heightCanBeGuessed:(BOOL)a4;
- (CGRect)_frameForWrapper;
- (CGRect)_indexFrame;
- (CGRect)_rectForFooterInSection:(int64_t)a3 usingPresentationValues:(BOOL)a4;
- (CGRect)_rectForHeaderInSection:(int64_t)a3 usingPresentationValues:(BOOL)a4;
- (CGRect)_rectForRowAtIndexPath:(id)a3 canGuess:(BOOL)a4;
- (CGRect)_rectForRowAtIndexPath:(id)a3 usingPresentationValues:(BOOL)a4;
- (CGRect)_rectForSection:(int64_t)a3 usingPresentationValues:(BOOL)a4;
- (CGRect)_rectForTableFooterView;
- (CGRect)_rectForTableHeaderView;
- (CGRect)_tableViewRectForRowAtIndexPath:(id)a3 canGuess:(BOOL)a4;
- (CGRect)_visibleBounds;
- (CGRect)rectForFooterInSection:(NSInteger)section;
- (CGRect)rectForHeaderInSection:(NSInteger)section;
- (CGRect)rectForRowAtIndexPath:(NSIndexPath *)indexPath;
- (CGRect)rectForSection:(NSInteger)section;
- (CGSize)_contentSize;
- (CGSize)_sizeForHeaderInSection:(int64_t)a3;
- (CGSize)sizeThatFits:(CGSize)a3;
- (NSArray)indexPathsForRowsInRect:(CGRect)rect;
- (NSArray)indexPathsForSelectedRows;
- (NSArray)indexPathsForVisibleRows;
- (NSArray)visibleCells;
- (NSIndexPath)_focusedCellIndexPath;
- (NSIndexPath)_indexPathToFocus;
- (NSIndexPath)indexPathForCell:(UITableViewCell *)cell;
- (NSIndexPath)indexPathForRowAtPoint:(CGPoint)point;
- (NSIndexPath)indexPathForSelectedRow;
- (NSInteger)numberOfRowsInSection:(NSInteger)section;
- (NSInteger)numberOfSections;
- (NSInteger)sectionIndexMinimumDisplayRowCount;
- (NSMutableArray)_placeholderContexts;
- (NSString)description;
- (UIColor)_accessoryBaseColor;
- (UIColor)multiselectCheckmarkColor;
- (UIColor)sectionIndexBackgroundColor;
- (UIColor)sectionIndexColor;
- (UIColor)sectionIndexTrackingBackgroundColor;
- (UIColor)separatorColor;
- (UIContextMenuInteraction)contextMenuInteraction;
- (UIEdgeInsets)_backgroundContentInset;
- (UIEdgeInsets)_cachedSectionIndexBarInsets;
- (UIEdgeInsets)_cellSafeAreaInsets;
- (UIEdgeInsets)_effectiveSafeAreaInsets;
- (UIEdgeInsets)_insetsForIndexBar;
- (UIEdgeInsets)_rawSectionContentInset;
- (UIEdgeInsets)_rawSeparatorInset;
- (UIEdgeInsets)_sectionContentInset;
- (UIEdgeInsets)_sectionFooterContentInsets;
- (UIEdgeInsets)_sectionHeaderContentInsets;
- (UIEdgeInsets)_tableContentInset;
- (UIEdgeInsets)separatorInset;
- (UIEdgeInsets)swipeActionController:(id)a3 extraInsetsForItemAtIndexPath:(id)a4;
- (UIScrollView)_wrapperView;
- (UITableConstants)_constants;
- (UITableView)initWithCoder:(NSCoder *)coder;
- (UITableView)initWithFrame:(CGRect)a3;
- (UITableView)initWithFrame:(CGRect)frame style:(UITableViewStyle)style;
- (UITableViewCell)_swipeToDeleteCell;
- (UITableViewCell)cellForRowAtIndexPath:(NSIndexPath *)indexPath;
- (UITableViewCell)dequeueReusableCellWithIdentifier:(NSString *)identifier;
- (UITableViewCell)dequeueReusableCellWithIdentifier:(NSString *)identifier forIndexPath:(NSIndexPath *)indexPath;
- (UITableViewCellSeparatorStyle)separatorStyle;
- (UITableViewDragDestinationDelegate)dragDestinationDelegate;
- (UITableViewDragSourceDelegate)dragSourceDelegate;
- (UITableViewHeaderFooterView)dequeueReusableHeaderFooterViewWithIdentifier:(NSString *)identifier;
- (UITableViewHeaderFooterView)footerViewForSection:(NSInteger)section;
- (UITableViewHeaderFooterView)headerViewForSection:(NSInteger)section;
- (UITableViewSelfSizingInvalidation)selfSizingInvalidation;
- (UITableViewSeparatorInsetReference)separatorInsetReference;
- (UITableViewStyle)style;
- (UITouch)currentTouch;
- (UIView)_focusedCell;
- (UIView)backgroundView;
- (UIView)tableFooterView;
- (UIView)tableHeaderView;
- (UIVisualEffect)separatorEffect;
- (_NSRange)_sectionsInRect:(CGRect)a3;
- (_NSRange)_visibleGlobalRows;
- (_NSRange)_visibleGlobalRowsInRect:(CGRect)a3;
- (_NSRange)_visibleGlobalRowsInRect:(CGRect)a3 canGuess:(BOOL)a4;
- (_UITableViewDragController)_dragController;
- (_UITableViewDropController)_dropController;
- (_UITableViewVisibleCellsUpdateRanges)_calculateVisibleCellsUpdateRangesForGlobalRowRange:(SEL)a3 createIfNecessary:(_NSRange)a4;
- (double)_backgroundInset;
- (double)_bottomPadding;
- (double)_cellIndexBarExtentFromEdge;
- (double)_classicHeightForFooterInSection:(int64_t)a3;
- (double)_classicHeightForHeaderInSection:(int64_t)a3;
- (double)_classicHeightForRowAtIndexPath:(id)a3;
- (double)_clientRequestedFillerRowHeight;
- (double)_computeOffsetOfFirstVisibleCellWithIndexPath:(id)a3;
- (double)_contentBottomForScrollObservation;
- (double)_contentOffsetYForRestoringScrollPositionOfFirstVisibleRowWithContentInsetTop:(double)a3 canGuessHeights:(BOOL)a4;
- (double)_contentWidthForCell:(id)a3 forRowAtIndexPath:(id)a4;
- (double)_contentWidthForCell:(id)a3 forRowAtIndexPath:(id)a4 usingPresentationValues:(BOOL)a5;
- (double)_dataSourceHeightForFooterInSection:(int64_t)a3;
- (double)_dataSourceHeightForHeaderInSection:(int64_t)a3;
- (double)_dataSourceHeightForRowAtIndexPath:(id)a3;
- (double)_defaultFillerRowHeight;
- (double)_defaultLeadingCellMarginWidth;
- (double)_defaultMarginWidth;
- (double)_defaultSectionFooterHeight;
- (double)_defaultSectionHeaderHeight;
- (double)_defaultTrailingCellMarginWidth;
- (double)_estimatedHeightForFooterInSection:(int64_t)a3;
- (double)_estimatedHeightForHeaderInSection:(int64_t)a3;
- (double)_estimatedHeightForRowAtIndexPath:(id)a3;
- (double)_externalIndexWidth;
- (double)_fullWidthHeaderWidth;
- (double)_headerFooterLeadingMarginWidthIsHeader:(BOOL)a3 isFirstSection:(BOOL)a4;
- (double)_headerFooterTrailingMarginWidth;
- (double)_heightForCell:(id)a3 atIndexPath:(id)a4;
- (double)_heightForFooterInSection:(int64_t)a3;
- (double)_heightForFooterView:(id)a3 inSection:(int64_t)a4;
- (double)_heightForHeaderView:(id)a3 inSection:(int64_t)a4;
- (double)_heightForRowAtIndexPath:(id)a3;
- (double)_heightForSeparator;
- (double)_heightForShadowRowAtIndexPath:(id)a3;
- (double)_heightForTableFooter;
- (double)_heightForTableHeader;
- (double)_indexBarExtentFromEdge;
- (double)_marginWidth;
- (double)_maxTitleWidthForFooterInSection:(int64_t)a3;
- (double)_maxTitleWidthForHeaderInSection:(int64_t)a3;
- (double)_paddingAboveFirstSectionHeader;
- (double)_paddingAboveSectionHeaders;
- (double)_rowSpacing;
- (double)_sectionCornerRadius;
- (double)_sectionFooterToLastRowPadding;
- (double)_sectionHeaderFooterPadding;
- (double)_sectionHeaderToFirstRowPadding;
- (double)_shadowHeightOffset;
- (double)_sidePadding;
- (double)_spacingForExtraSeparators;
- (double)_timeToIgnoreWheelEventsOnIndexOverlayIndicator;
- (double)_topPadding;
- (double)_widthForContentInRect:(CGRect)a3;
- (double)heightForAutohidingTableHeaderView;
- (double)heightForTableHeaderViewHiding;
- (id)_activeSourceDragSession;
- (id)_addToShadowUpdatesControllerIfNeeded:(id)a3;
- (id)_adjustedIndexPath:(id)a3 forMoveOfIndexPath:(id)a4 toIndexPath:(id)a5;
- (id)_arrayForUpdateAction:(int)a3;
- (id)_backgroundColorForDeleteConfirmationButtonForRowAtIndexPath:(id)a3;
- (id)_backgroundColorForSwipeAccessoryButtonForRowAtIndexPath:(id)a3;
- (id)_backgroundEffects;
- (id)_beginAnimatingDropOfCell:(id)a3 isCanceling:(BOOL)a4;
- (id)_cellContainerView;
- (id)_cellForRowAtIndexPath:(id)a3 usingPresentationValues:(BOOL)a4;
- (id)_cellForShadowRowAtIndexPath:(id)a3;
- (id)_cellReuseMapForType:(int)a3;
- (id)_childFocusRegionsInRect:(CGRect)a3 inCoordinateSpace:(id)a4;
- (id)_classMapForType:(int)a3;
- (id)_contentFocusContainerGuide;
- (id)_contentSubviews;
- (id)_contextualActionForDeletingRowAtIndexPath:(id)a3 performsFirstActionWithFullSwipe:(BOOL *)a4;
- (id)_contextualActionForDeletingRowAtIndexPath:(id)a3 usingPresentationValues:(BOOL)a4;
- (id)_createPreparedCellForGlobalRow:(int64_t)a3 willDisplay:(BOOL)a4;
- (id)_createPreparedCellForGlobalRow:(int64_t)a3 withIndexPath:(id)a4 willDisplay:(BOOL)a5;
- (id)_createPreparedCellForRowAtIndexPath:(id)a3 willDisplay:(BOOL)a4;
- (id)_currentIndexPathForExistingShadowInsertUpdate:(id)a3;
- (id)_currentIndexPathForPlaceholder:(id)a3;
- (id)_dataSourceActual;
- (id)_dataSourceProxy;
- (id)_dataSourceSectionIndexTitles;
- (id)_defaultBackgroundView;
- (id)_defaultContextMenuTargetedPreviewForIdentifier:(id)a3;
- (id)_defaultSeparatorColor;
- (id)_delegateActual;
- (id)_delegatePreferredIndexPath;
- (id)_delegateProxy;
- (id)_delegateViewForFooterInSection:(int64_t)a3;
- (id)_delegateViewForHeaderInSection:(int64_t)a3;
- (id)_deletePlaceholderForContext:(id)a3;
- (id)_dequeueReusableCellWithIdentifier:(id)a3 forIndexPath:(id)a4 usingPresentationValues:(BOOL)a5;
- (id)_dequeueReusableViewOfType:(int)a3 withIdentifier:(id)a4;
- (id)_detailTextForHeaderInSection:(int64_t)a3;
- (id)_diffableDataSourceImpl;
- (id)_dragDelegateActual;
- (id)_dragDelegateProxy;
- (id)_dragDestinationDelegateActual;
- (id)_dragDestinationDelegateProxy;
- (id)_dragPreviewParametersForIndexPath:(id)a3;
- (id)_dragSessionPropertiesForSession:(id)a3;
- (id)_dragSourceDelegateActual;
- (id)_dragSourceDelegateProxy;
- (id)_draggedIndexPath;
- (id)_dropDelegateActual;
- (id)_dropDelegateProxy;
- (id)_dropPreviewParametersForIndexPath:(id)a3;
- (id)_existingCellForRowAtIndexPath:(id)a3;
- (id)_existingFooterViewForSection:(int64_t)a3;
- (id)_existingHeaderViewForSection:(int64_t)a3;
- (id)_existingOrTentativeHeaderViewCreatedIfNeededForSection:(int64_t)a3;
- (id)_expectedDiffableUpdateItem;
- (id)_focusFastScrollingIndexBarEntries;
- (id)_focusPromiseRegionsInRect:(CGRect)a3;
- (id)_focusScrollBoundaryMetricsForItem:(id)a3;
- (id)_footerViewForSection:(int64_t)a3 usingPresentationValues:(BOOL)a4;
- (id)_fulfillPromisedFocusRegionForCell:(id)a3;
- (id)_gapIndexPath;
- (id)_generateDeletedOrMovedRowsIndexSetFromUpdateItems:(id)a3 updateSupport:(id)a4 preReloadFirstVisibleRowIndexPath:(id)a5 outReloadedRowNewIndexPath:(id *)a6;
- (id)_headerViewForSection:(int64_t)a3 usingPresentationValues:(BOOL)a4;
- (id)_identityTracker:(BOOL)a3;
- (id)_indexBarEntries;
- (id)_indexPathForCell:(id)a3 usingPresentationValues:(BOOL)a4;
- (id)_indexPathForRowAtPoint:(CGPoint)a3 usingPresentationValues:(BOOL)a4;
- (id)_indexPathForSelectedRowUsingPresentationValues:(BOOL)a3;
- (id)_indexPathForSpringLoadingAtPoint:(CGPoint)a3;
- (id)_indexPathForTentativeCell:(id)a3;
- (id)_indexPathsForHighlightedRows;
- (id)_indexPathsForHighlightedRowsUsingPresentationValues:(BOOL)a3;
- (id)_indexPathsForRowsInRect:(CGRect)a3 usingPresentationValues:(BOOL)a4;
- (id)_indexPathsForSelectedRowsUsingPresentationValues:(BOOL)a3;
- (id)_indexPathsForVisibleRowsUsingPresentationValues:(BOOL)a3;
- (id)_indexRetargetFeedbackGenerator;
- (id)_insertPlaceholderAtIndexPath:(id)a3 withContext:(id)a4;
- (id)_itemsForAddingToDragSession:(id)a3 atIndexPath:(id)a4 point:(CGPoint)a5 withDataOwner:(int64_t)a6;
- (id)_itemsForBeginningDragSession:(id)a3 atIndexPath:(id)a4;
- (id)_managedSubviewForView:(id)a3 viewType:(int *)a4 indexPath:(id *)a5;
- (id)_moveRowAtIndexPath:(id)a3 toIndexPath:(id)a4 usingPresentationValues:(BOOL)a5;
- (id)_moveSection:(int64_t)a3 toSection:(int64_t)a4 usingPresentationValues:(BOOL)a5;
- (id)_nearestCellToPoint:(CGPoint)a3;
- (id)_nearestCellToPoint:(CGPoint)a3 expandingVisibleCells:(BOOL)a4;
- (id)_newSectionViewWithFrame:(CGRect)a3 forSection:(int64_t)a4 isHeader:(BOOL)a5;
- (id)_nibExternalObjectsTablesForType:(int)a3;
- (id)_nibMapForType:(int)a3;
- (id)_performShadowUpdates:(id)a3;
- (id)_placeholderContextForIndexPath:(id)a3;
- (id)_popReusableHeaderView:(BOOL)a3;
- (id)_prefetchDataSourceActual;
- (id)_prefetchDataSourceProxy;
- (id)_prefetchedCellForRowAtIndexPath:(id)a3 willDisplay:(BOOL)a4;
- (id)_preparedCells;
- (id)_reorderFeedbackGenerator;
- (id)_reorderingCell;
- (id)_reorderingIndexPath;
- (id)_reorderingSupport;
- (id)_resolvedDropProposalAfterAdditionalHitTestingForIndexPath:(id)a3 dropSession:(id)a4 dropOperation:(unint64_t)a5 dropIntent:(int64_t)a6 dropProposal:(id)a7;
- (id)_resolvedTableConstants;
- (id)_retargetedReorderIndexPathForInitialIndexPath:(id)a3 proposedIndexPath:(id)a4;
- (id)_revertExistingShadowInsertUpdate:(id)a3 withAlongsideUpdates:(id)a4;
- (id)_rowData;
- (id)_rowsToIncludeInDragSession:(id)a3 atIndexPath:(id)a4 withDataOwner:(int64_t)a5;
- (id)_scrollTestExtraResults;
- (id)_sectionFooterViewWithFrame:(CGRect)a3 forSection:(int64_t)a4 floating:(BOOL)a5 reuseViewIfPossible:(BOOL)a6 willDisplay:(BOOL)a7;
- (id)_sectionHeaderView:(BOOL)a3 withFrame:(CGRect)a4 forSection:(int64_t)a5 floating:(BOOL)a6 reuseViewIfPossible:(BOOL)a7 willDisplay:(BOOL)a8;
- (id)_sectionHeaderViewWithFrame:(CGRect)a3 forSection:(int64_t)a4 floating:(BOOL)a5 reuseViewIfPossible:(BOOL)a6 willDisplay:(BOOL)a7;
- (id)_sectionIndex;
- (id)_sectionsWithSectionOperationsInUpdateItems:(void *)a1;
- (id)_setupAnimationsForResizedViewsWithOldRowData:(id)a3 oldVisibleViews:(id)a4;
- (id)_shadowUpdateForPlaceholder:(id)a3;
- (id)_shadowUpdatesController;
- (id)_sortedDeduplicatedReloadItems;
- (id)_swipeActionController;
- (id)_systemDefaultFocusGroupIdentifier;
- (id)_tableFooterView;
- (id)_tableFooterView:(BOOL)a3;
- (id)_tableHeaderBackgroundView;
- (id)_tableHeaderView;
- (id)_tableHeaderView:(BOOL)a3;
- (id)_tableViewCellForContentView:(id)a3;
- (id)_targetIndexPathAtPoint:(CGPoint)a3 withLastTargetIndexPath:(id)a4 adjustedForGap:(BOOL)a5;
- (id)_targetIndexPathForDrop:(id)a3;
- (id)_titleForDeleteConfirmationButton:(id)a3;
- (id)_titleForDeleteConfirmationButtonForRowAtIndexPath:(id)a3;
- (id)_titleForFooterInSection:(int64_t)a3;
- (id)_titleForHeaderInSection:(int64_t)a3;
- (id)_titleForSwipeAccessoryButtonForRowAtIndexPath:(id)a3;
- (id)_trailingSwipeConfigurationAtIndexPath:(id)a3 fromRemoveButton:(BOOL)a4;
- (id)_updateIndexOverlayToShowTitleAtIndex:(int64_t)a3;
- (id)_updateRowsAtIndexPaths:(id)a3 withUpdateAction:(int)a4 rowAnimation:(int64_t)a5 usingPresentationValues:(BOOL)a6;
- (id)_updateSections:(id)a3 withUpdateAction:(int)a4 rowAnimation:(int64_t)a5 headerFooterOnly:(BOOL)a6 usingPresentationValues:(BOOL)a7;
- (id)_updatedDropProposalForIndexPath:(id)a3 dropSession:(id)a4 withDefaultProposal:(id)a5;
- (id)_visibleCellForGlobalRow:(int64_t)a3;
- (id)_visibleCellsUsingPresentationValues:(BOOL)a3;
- (id)_visibleFooterViewForSection:(int64_t)a3;
- (id)_visibleHeaderFooterViews;
- (id)_visibleHeaderViewForSection:(int64_t)a3;
- (id)_visibleViews;
- (id)contextMenuInteraction:(id)a3 configurationForMenuAtLocation:(CGPoint)a4;
- (id)contextMenuInteraction:(id)a3 previewForDismissingMenuWithConfiguration:(id)a4;
- (id)contextMenuInteraction:(id)a3 previewForHighlightingMenuWithConfiguration:(id)a4;
- (id)contextualActionForDeletingRowAtIndexPath:(id)a3;
- (id)dataSource;
- (id)dataSourceIndexPathForPresentationIndexPath:(id)a3;
- (id)delegate;
- (id)deleteConfirmationIndexPath;
- (id)dragDelegate;
- (id)dropDelegate;
- (id)focusItemsInRect:(CGRect)a3;
- (id)hitTest:(CGPoint)a3 forEvent:(__GSEvent *)a4;
- (id)hitTest:(CGPoint)a3 withEvent:(id)a4;
- (id)indexPathForRowAtGlobalRow:(int64_t)a3;
- (id)keyCommands;
- (id)preferredFocusedView;
- (id)prefetchDataSource;
- (id)presentationIndexPathForDataSourceIndexPath:(id)a3;
- (id)sectionBorderColor;
- (id)separatorBottomShadowColor;
- (id)separatorTopShadowColor;
- (id)swipeActionController:(id)a3 indexPathForTouchLocation:(CGPoint)a4;
- (id)swipeActionController:(id)a3 leadingSwipeConfigurationForItemAtIndexPath:(id)a4;
- (id)swipeActionController:(id)a3 trailingSwipeConfigurationForItemAtIndexPath:(id)a4;
- (id)swipeActionController:(id)a3 viewForItemAtIndexPath:(id)a4;
- (id)swipeActionForDeletingRowAtIndexPath:(id)a3;
- (id)tableHeaderBackgroundColor;
- (id)targetForAction:(SEL)a3 withSender:(id)a4;
- (int64_t)_accessoryTypeForCell:(id)a3 forRowAtIndexPath:(id)a4;
- (int64_t)_bottomSeparatorInsetBehaviorForCellAtIndexPath:(id)a3;
- (int64_t)_cellFocusItemDeferral:(id)a3;
- (int64_t)_currentSectionIndexTitleIndex;
- (int64_t)_dataOwnerForDragSession:(id)a3 atIndexPath:(id)a4;
- (int64_t)_dataOwnerForDropSession:(id)a3 atIndexPath:(id)a4;
- (int64_t)_dataSourceNumberOfItemsInSection:(int64_t)a3;
- (int64_t)_dataSourceNumberOfSections;
- (int64_t)_editingStyleForRowAtIndexPath:(id)a3;
- (int64_t)_globalReorderingRow;
- (int64_t)_headerFooterPinningBehavior;
- (int64_t)_lastGlobalRowIndex;
- (int64_t)_mappedStyle:(int64_t)a3;
- (int64_t)_numberOfRowsInSection:(int64_t)a3;
- (int64_t)_numberOfRowsInSection:(int64_t)a3 usingPresentationValues:(BOOL)a4;
- (int64_t)_numberOfSections;
- (int64_t)_numberOfSectionsUsingPresentationValues:(BOOL)a3;
- (int64_t)_popoverControllerStyle;
- (int64_t)_sectionForFooterView:(id)a3;
- (int64_t)_sectionForHeaderView:(id)a3;
- (int64_t)_sectionIndexChangedToIndex:(int64_t)a3 title:(id)a4;
- (int64_t)_separatorBackdropOverlayBlendMode;
- (int64_t)_titleAlignmentForFooterInSection:(int64_t)a3;
- (int64_t)_titleAlignmentForHeaderInSection:(int64_t)a3;
- (int64_t)_topSeparatorInsetBehaviorForCellAtIndexPath:(id)a3;
- (int64_t)_visibleGlobalRowForRowAtIndexPathAdjustedForCurrentUpdate:(id)a3;
- (int64_t)_visibleSectionForSectionAdjustedForCurrentUpdate:(int64_t)a3;
- (int64_t)contentHuggingElements;
- (int64_t)dataSourceSectionIndexForPresentationSectionIndex:(int64_t)a3;
- (int64_t)globalRowForRowAtIndexPath:(id)a3;
- (int64_t)highlightedGlobalRow;
- (int64_t)layoutDirectionForSwipeActionController:(id)a3;
- (int64_t)maximumGlobalRowIndex;
- (int64_t)presentationSectionIndexForDataSourceSectionIndex:(int64_t)a3;
- (uint64_t)_canRecomputePreferredAttributesForInvalidatedElements;
- (unint64_t)_countStringRowCount;
- (unint64_t)_edgesApplyingBaseInsetsToIndexBarInsets;
- (unint64_t)_focusPrimaryScrollableAxis;
- (unint64_t)maximumNumberOfSectionIndexTitlesWithoutTruncation;
- (void)_Bug_Detected_In_Client_Of_UITableView_Invalid_Batch_Updates:(id)a3;
- (void)_Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Rows_In_Section:(id)a3;
- (void)_Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Sections:(id)a3;
- (void)_accessibilitySetInterfaceStyleIntent:(unint64_t)a3;
- (void)_accessoryButtonAction:(id)a3;
- (void)_addContentSubview:(id)a3 atBack:(BOOL)a4;
- (void)_addIndexToAppropriateContainer;
- (void)_addSubview:(id)a3 positioned:(int64_t)a4 relativeTo:(id)a5;
- (void)_adjustCountLabel;
- (void)_adjustExtraSeparators;
- (void)_adjustForAutomaticKeyboardInfo:(id)a3 animated:(BOOL)a4 lastAdjustment:(double *)a5;
- (void)_adjustPreReloadStateForRestoringContentOffsetWithUpdateItems:(id)a3 updateSupport:(id)a4;
- (void)_adjustReusableTableCells;
- (void)_adjustTableHeaderAndFooterViews;
- (void)_animateDeletionOfRowAtIndexPath:(id)a3;
- (void)_animateDeletionOfRowWithCell:(id)a3;
- (void)_animateDragCancelForCell:(id)a3;
- (void)_animateLiftOfRowsAtIndexPaths:(id)a3;
- (void)_animateScanlineViewForCell:(id)a3 occurrence:(id)a4 actionsView:(id)a5;
- (void)_animateSwipeCancelation;
- (void)_animateSwipeOccurrenceAction:(id)a3 alongsideCell:(id)a4 animation:(id)a5;
- (void)_animateTableViewContentToNewLayout;
- (void)_animateTableViewContentToNewLayoutWithDuration:(double)a3 reorderingCell:(id)a4 additionalAnimations:(id)a5;
- (void)_applyAppearanceDefaultsForStyle:(int64_t)a3;
- (void)_applyCoalescedContentSizeUpdates;
- (void)_applyContentSizeDeltaImmediately:(double)a3;
- (void)_autoscrollForReordering:(id)a3;
- (void)_beginAnimatingCells;
- (void)_beginAnimatingDropIntoCell:(id)a3;
- (void)_beginDragAndDropReorderingOfIndexPath:(id)a3 cell:(id)a4;
- (void)_beginSuspendingUpdates;
- (void)_boundingPathMayHaveChangedForView:(id)a3 relativeToBoundsOriginOnly:(BOOL)a4;
- (void)_cancelCellReorder:(BOOL)a3;
- (void)_cellDidBecomeFocused:(id)a3;
- (void)_cellDidBecomeUnfocused:(id)a3;
- (void)_cellDidHideSelectedBackground:(id)a3;
- (void)_cellDidInvalidateIntrinsicContentSize:(id)a3;
- (void)_cellDidShowSelectedBackground:(id)a3;
- (void)_cleanupStateFromDeleteConfirmation;
- (void)_clearNeedsRecomputeHeightsForInvalidatedElements;
- (void)_coalesceContentSizeUpdateWithDelta:(double)a3;
- (void)_configureBackgroundView;
- (void)_configureCachedCellForDisplay:(id)a3 forIndexPath:(id)a4;
- (void)_configureCellForDisplay:(id)a3 forIndexPath:(id)a4;
- (void)_configureCellPrefetchingHandlers;
- (void)_configureContextMenuInteractionIfNeeded;
- (void)_configureDataSourcePrefetchingHandlers;
- (void)_configureIndexOverlayIndicatorViewIfNecessary;
- (void)_configureIndexOverlaySelectionViewIfNecessary;
- (void)_configureTableHeaderFooterView:(id)a3 forHeader:(BOOL)a4 section:(int64_t)a5 floating:(BOOL)a6 withTitle:(id)a7 detailText:(id)a8 textAlignment:(int64_t)a9 fromClient:(BOOL)a10;
- (void)_createOrUninstallDragAndDropControllersIfNeeded;
- (void)_darkenedSystemColorsChanged;
- (void)_deleteAllPlaceholderCells;
- (void)_deselectAllNonMultiSelectRowsAnimated:(BOOL)a3;
- (void)_deselectAllNonMultiSelectRowsAnimated:(BOOL)a3 notifyDelegate:(BOOL)a4;
- (void)_deselectAllRowsAnimated:(BOOL)a3 notifyDelegate:(BOOL)a4 excludingMultiSelectRows:(BOOL)a5;
- (void)_deselectRowAtIndexPath:(id)a3 animated:(BOOL)a4 notifyDelegate:(BOOL)a5;
- (void)_deselectRowsAtIndexPaths:(id)a3 animated:(BOOL)a4 notifyDelegate:(BOOL)a5;
- (void)_deselectRowsAtIndexPaths:(id)a3 animated:(BOOL)a4 transitionCoordinator:(id)a5;
- (void)_didChangeFromIdiom:(int64_t)a3 onScreen:(id)a4 traverseHierarchy:(BOOL)a5;
- (void)_didInsertRowForTableCell:(id)a3;
- (void)_didUpdateFocusInContext:(id)a3;
- (void)_distributeSeparatorColor:(id)a3;
- (void)_downArrowLongPress:(id)a3;
- (void)_downArrowTap:(id)a3;
- (void)_dragSessionDidEnd:(id)a3;
- (void)_dragSessionWillBegin:(id)a3;
- (void)_draggingReorderingCell:(id)a3 yDelta:(double)a4 touch:(id)a5;
- (void)_drawExtraSeparator:(CGRect)a3;
- (void)_dropEnded:(id)a3;
- (void)_dropEntered:(id)a3;
- (void)_dropExited:(id)a3;
- (void)_endAnimatingCells;
- (void)_endAnimatingDropIntoCell:(id)a3;
- (void)_endAnimatingDropOfCell:(id)a3;
- (void)_endCellAnimationsWithContext:(id)a3;
- (void)_endCellReorderAnimation:(BOOL)a3 wasCancelled:(BOOL)a4;
- (void)_endDragAndDropReordering;
- (void)_endReorderingForCell:(id)a3 wasCancelled:(BOOL)a4 animated:(BOOL)a5;
- (void)_endSuspendingUpdates;
- (void)_endSwipeToDeleteRowDidDelete:(BOOL)a3;
- (void)_endUpdatingVisibleCells:(BOOL)a3 originalContentOffset:(CGPoint)a4 originalContentHeight:(double)a5 focusedView:(id)a6 focusedViewType:(int)a7;
- (void)_ensurePreReloadVisibleRowRangeIsValidWithPostReloadRowCount:(int64_t)a3;
- (void)_ensureReturnedView:(id)a3 isNotContainedInReusePoolForViewType:(int)a4;
- (void)_ensureRowDataIsLoaded;
- (void)_ensureViewsAreLoadedInRect:(CGRect)a3;
- (void)_forciblyCancelPendingSelection;
- (void)_getGradientMaskBounds:(CGRect *)a3 startInsets:(UIEdgeInsets *)a4 endInsets:(UIEdgeInsets *)a5 intensities:(UIEdgeInsets *)a6;
- (void)_handleNudgeInDirection:(int64_t)a3;
- (void)_handleUserInterfaceIdiomChange;
- (void)_headerFooterDidInvalidateIntrinsicContentSize:(id)a3;
- (void)_hideIndexOverlay;
- (void)_hideIndexOverlay:(id)a3;
- (void)_hideSeparatorForRowAtIndexPath:(id)a3;
- (void)_highlightCell:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 highlight:(BOOL)a6;
- (void)_highlightDidEndForCell:(id)a3 withInteraction:(id)a4;
- (void)_highlightSpringLoadedRowAtIndexPath:(id)a3;
- (void)_initializeTentativeViewContainers;
- (void)_invalidateForTopOrBottomPaddingChange:(BOOL)a3;
- (void)_invalidateLayoutForVisibleBounds:(CGRect)a3 oldVisibleBounds:(CGRect)a4;
- (void)_languageChanged;
- (void)_layoutAdjustmentsDidChange;
- (void)_layoutMarginsDidChangeFromOldMargins:(UIEdgeInsets)a3;
- (void)_longPressNudgeScrollToRow:(int64_t)a3 position:(int64_t)a4;
- (void)_moveSectionIndexTitleIndexToIndex:(int64_t)a3 highlight:(BOOL)a4;
- (void)_moveWithEvent:(id)a3;
- (void)_notifyDataSourceForMoveOfRowFromIndexPath:(id)a3 toIndexPath:(id)a4;
- (void)_notifyDidEndDisplayingCell:(id)a3 forIndexPath:(id)a4;
- (void)_notifyDidEndDisplayingHeaderFooterView:(id)a3 forSection:(int64_t)a4 isHeader:(BOOL)a5;
- (void)_notifyDidScroll;
- (void)_notifyWillDisplayCell:(id)a3 forIndexPath:(id)a4;
- (void)_notifyWillDisplayHeaderFooterView:(id)a3 forSection:(int64_t)a4 isHeader:(BOOL)a5;
- (void)_nudgeScroll:(int64_t)a3;
- (void)_performAction:(SEL)a3 forCell:(id)a4 sender:(id)a5;
- (void)_performBatchUpdates:(id)a3 completion:(id)a4;
- (void)_performBatchUpdates:(id)a3 withContext:(id)a4 completion:(id)a5;
- (void)_performDiffableUpdate:(id)a3;
- (void)_performDrop:(id)a3 withDropCoordinator:(id)a4 forceHandleAsReorder:(BOOL)a5;
- (void)_performInternalBatchUpdates:(id)a3;
- (void)_performInternalReloadData;
- (void)_performRevertingShadowUpdates:(id)a3;
- (void)_populateArchivedSubviews:(id)a3;
- (void)_prefetchCellAtGlobalRow:(int64_t)a3 aboveVisibleRange:(BOOL)a4;
- (void)_prepareHighlightForCell:(id)a3 withInteraction:(id)a4;
- (void)_preparePrefetchContext;
- (void)_prepareToLiftRowsAtIndexPaths:(id)a3;
- (void)_prepareToSizeView:(id)a3;
- (void)_prolongIndexOverlayTimer;
- (void)_purgeReuseQueues;
- (void)_reapTentativeViews;
- (void)_rebaseExistingShadowUpdatesIfNecessaryWithSortedInsertItems:(id)a3 sortedDeleteItems:(id)a4 sortedMoveItems:(id)a5;
- (void)_rebuildGeometry;
- (void)_rebuildGeometryForcingRowDataUpdate:(BOOL)a3 skipContentOffsetAdjustment:(BOOL)a4 updateImmediatelyIfPossible:(BOOL)a5;
- (void)_rebuildGeometryWithCompatibility;
- (void)_recomputeHeightsForInvalidatedElementsIfNeeded;
- (void)_recomputeSectionIndexTitleIndex;
- (void)_reconfigureCell:(id)a3 forRowAtIndexPath:(id)a4;
- (void)_reconfigureRowAtIndexPath:(id)a3 usingPresentationValues:(BOOL)a4;
- (void)_rectChangedWithNewSize:(CGSize)a3 oldSize:(CGSize)a4;
- (void)_registerThing:(id)a3 asNib:(BOOL)a4 forViewType:(int)a5 withReuseIdentifer:(id)a6;
- (void)_reloadDataIfNeeded;
- (void)_reloadSectionHeaderFooters:(id)a3 withRowAnimation:(int64_t)a4;
- (void)_removeAllVisibleCells;
- (void)_removeAndResetAllVisibleCells;
- (void)_removeDropTargetAndResetAppearance;
- (void)_removeIndex;
- (void)_removeOrphanedViews:(id)a3;
- (void)_removeTableViewGestureRecognizers;
- (void)_reorderPositionChangedForCell:(id)a3;
- (void)_reorderPositionChangedForCell:(id)a3 withScrollFactorPercentage:(float)a4;
- (void)_requestAppropriateFocusUpdate;
- (void)_resetAllShadowUpdates;
- (void)_resetDarkenedSeparatorColor;
- (void)_resetDragSwipeAndTouchSelectFlags;
- (void)_resetOrRebaseFocusedViewWithUpdateSupport:(id)a3 indexPathMapping:(id)a4;
- (void)_resetSwipeActionController;
- (void)_resetUpdateItemArrays;
- (void)_resignOrRebaseFirstResponderViewWithUpdateSupport:(id)a3 indexPathMapping:(id)a4;
- (void)_restoreOrAdjustContentOffsetWithRowCount:(int64_t)a3 initialContentInsetTop:(double)a4;
- (void)_resumeReloads;
- (void)_reuseHeaderFooterView:(id)a3 isHeader:(BOOL)a4 forSection:(int64_t)a5;
- (void)_reusePrefetchedCell:(id)a3 withIndexPath:(id)a4;
- (void)_reusePreviouslyFocusedTableViewSubviewIfNeeded:(id)a3 viewType:(int)a4 indexPath:(id)a5;
- (void)_reuseTableViewCell:(id)a3 withIndexPath:(id)a4 didEndDisplaying:(BOOL)a5;
- (void)_reuseTableViewSubview:(id)a3 viewType:(int)a4;
- (void)_safeAreaInsetsDidChangeFromOldInsets:(UIEdgeInsets)a3;
- (void)_scheduleAdjustExtraSeparators;
- (void)_scrollFirstResponderCellToVisible:(BOOL)a3;
- (void)_scrollToRowAtIndexPath:(id)a3 atScrollPosition:(int64_t)a4 animated:(BOOL)a5 usingPresentationValues:(BOOL)a6;
- (void)_scrollToTopHidingTableHeader:(BOOL)a3;
- (void)_scrollViewAnimationEnded:(id)a3 finished:(BOOL)a4;
- (void)_scrollViewDidEndDraggingWithDeceleration:(BOOL)a3;
- (void)_scrollViewWillEndDraggingWithVelocity:(CGPoint)a3 targetContentOffset:(CGPoint *)a4;
- (void)_sectionIndexChanged:(id)a3;
- (void)_sectionIndexTouchesBegan:(id)a3;
- (void)_sectionIndexTouchesEnded:(id)a3;
- (void)_selectAllSelectedRows;
- (void)_selectRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 notifyDelegate:(BOOL)a6;
- (void)_selectRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 notifyDelegate:(BOOL)a6 isCellMultiSelect:(BOOL)a7 deselectPrevious:(BOOL)a8 performCustomSelectionAction:(BOOL)a9;
- (void)_selectRowsAtIndexPaths:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 notifyDelegate:(BOOL)a6;
- (void)_selectedIndexPathsDidChange;
- (void)_selectionInteractionDidBeginHinting:(id)a3;
- (void)_selectionInteractionDidCancelHinting:(id)a3;
- (void)_selectionInteractionDidSelect:(id)a3;
- (void)_sendDidEndEditingForIndexPath:(id)a3;
- (void)_sendGeometryAffectingContentBottomChangedToScrollObservers;
- (void)_sendWillBeginEditingForIndexPath:(id)a3;
- (void)_setAccessoryBaseColor:(id)a3;
- (void)_setAllowsReorderingWhenNotEditing:(BOOL)a3;
- (void)_setBackgroundColor:(id)a3 animated:(BOOL)a4;
- (void)_setBackgroundEffects:(id)a3;
- (void)_setBottomPadding:(double)a3;
- (void)_setCachedSectionIndexBarInsets:(UIEdgeInsets)a3;
- (void)_setCellsSelfSize:(BOOL)a3;
- (void)_setClearBlendingViewCompositingFilter;
- (void)_setDefaultGradientMaskInsets;
- (void)_setDefaultLayoutMargins:(UIEdgeInsets)a3;
- (void)_setDisableReuseQueuePurgeOnTextSizeChanges:(BOOL)a3;
- (void)_setDragController:(id)a3;
- (void)_setDrawsSeparatorAtTopOfSections:(BOOL)a3;
- (void)_setDropController:(id)a3;
- (void)_setEditing:(BOOL)a3 animated:(BOOL)a4 forced:(BOOL)a5;
- (void)_setExternalObjectTable:(id)a3 forNibLoadingOfCellWithReuseIdentifier:(id)a4;
- (void)_setExternalObjectTable:(id)a3 forNibLoadingOfHeaderFooterWithReuseIdentifier:(id)a4;
- (void)_setFocusedCell:(id)a3;
- (void)_setFocusedCellIndexPath:(id)a3;
- (void)_setGestureRecognizerRequiresTableGestureRecognizersToFail:(id)a3;
- (void)_setHeaderAndFooterViewsFloat:(BOOL)a3;
- (void)_setHeight:(double)a3 forRowAtIndexPath:(id)a4;
- (void)_setHeight:(double)a3 forRowAtIndexPath:(id)a4 usingPresentationValues:(BOOL)a5;
- (void)_setHeightForTableHeaderViewHiding:(double)a3;
- (void)_setIgnoreCopyFilterForTableAnimations:(BOOL)a3;
- (void)_setIgnorePinnedTableHeaderUpdates:(BOOL)a3;
- (void)_setIndexPathToFocus:(id)a3;
- (void)_setIndexRetargetFeedbackGenerator:(id)a3;
- (void)_setIsAncestorOfFirstResponder:(BOOL)a3;
- (void)_setKeepsFirstResponderVisibleOnBoundsChange:(BOOL)a3;
- (void)_setManuallyManagesSwipeUI:(BOOL)a3;
- (void)_setMarginWidth:(double)a3;
- (void)_setNeedsIndexBarInsetsUpdate;
- (void)_setNeedsRebuildGeometry;
- (void)_setNeedsRecomputeHeightsForInvalidatedElements;
- (void)_setNeedsVisibleCellsUpdate:(BOOL)a3 withFrames:(BOOL)a4;
- (void)_setNeedsVisibleCellsUpdate:(BOOL)a3 withFrames:(BOOL)a4 updateImmediatelyIfPossible:(BOOL)a5;
- (void)_setPinsTableHeaderView:(BOOL)a3;
- (void)_setPlaceholderContexts:(id)a3;
- (void)_setReorderFeedbackGenerator:(id)a3;
- (void)_setRowCount:(unint64_t)a3;
- (void)_setSectionContentInset:(UIEdgeInsets)a3;
- (void)_setSectionContentInsetFollowsLayoutMargins:(BOOL)a3;
- (void)_setSectionCornerRadius:(double)a3;
- (void)_setSectionHeaderFooterPadding:(double)a3;
- (void)_setSeparatorBackdropOverlayBlendMode:(int64_t)a3;
- (void)_setSeparatorInsetIsRelativeToCellEdges:(BOOL)a3;
- (void)_setSeparatorsDrawAsOverlay:(BOOL)a3;
- (void)_setSeparatorsDrawInVibrantLightModeUIAppearance:(id)a3;
- (void)_setShouldBecomeFocusedOnSelection:(BOOL)a3;
- (void)_setSupplementarySectionHeadersHugContent:(BOOL)a3;
- (void)_setSwipeToDeleteCell:(id)a3;
- (void)_setTopPadding:(double)a3;
- (void)_setUpContentFocusContainerGuide;
- (void)_setUseLegacySectionHeaderFooterPinningBehavior:(BOOL)a3;
- (void)_setUseUnifiedSelectionBehavior:(BOOL)a3;
- (void)_setUsesStaticScrollBar:(BOOL)a3;
- (void)_setupCell:(id)a3 forEditing:(BOOL)a4 atIndexPath:(id)a5 animated:(BOOL)a6 updateSeparators:(BOOL)a7;
- (void)_setupCell:(id)a3 forEditing:(BOOL)a4 atIndexPath:(id)a5 canEdit:(BOOL)a6 editingStyle:(int64_t)a7 shouldIndentWhileEditing:(BOOL)a8 showsReorderControl:(BOOL)a9 accessoryType:(int64_t)a10 animated:(BOOL)a11 updateSeparators:(BOOL)a12;
- (void)_setupCellAnimations;
- (void)_setupDefaultHeights;
- (void)_setupSectionView:(id)a3 isHeader:(BOOL)a4 forSection:(int64_t)a5;
- (void)_setupTableViewCommon;
- (void)_shiftSectionIndexTitleIndexByAmount:(int64_t)a3;
- (void)_showSeparatorForRowAtIndexPath:(id)a3;
- (void)_showSeparatorForRowBeforeIndexPath:(id)a3;
- (void)_startIndexOverlayIndicatorIgnoreTimer;
- (void)_startIndexOverlayTimerWithDelay:(double)a3;
- (void)_startViewAnimationsForUpdate:(id)a3 withContext:(id)a4 swipeOccurrenceAnimatingDelete:(id)a5 oldVisibleViews:(id)a6 useCopyBlendingForAnimations:(BOOL)a7;
- (void)_stopAutoscrollTimer;
- (void)_stopIgnoringWheelEventsOnIndexOverlayIndicator:(id)a3;
- (void)_stopIndexOverlayTimer;
- (void)_stopScrollingNotify:(BOOL)a3 pin:(BOOL)a4;
- (void)_storePreReloadStateForRestoringContentOffsetWithFirstVisibleIndexPath:(id)a3;
- (void)_storeStateForRestoringContentOffsetIfNeeded;
- (void)_suspendReloads;
- (void)_swipeToDeleteCell:(id)a3;
- (void)_systemTextSizeChanged;
- (void)_tableFooterHeightDidChangeToHeight:(double)a3;
- (void)_tableHeaderHeightDidChangeToHeight:(double)a3;
- (void)_tearDownIndexOverlayViews;
- (void)_transitionIndexOverlaySelectionViewToVisible:(BOOL)a3;
- (void)_transitionIndexOverlayToVisible:(BOOL)a3 shouldFadeBackToInvisible:(BOOL)a4;
- (void)_unhighlightAllRowsAndHighlightGlobalRow:(int64_t)a3;
- (void)_unhighlightSpringLoadedRow;
- (void)_upArrowLongPress:(id)a3;
- (void)_upArrowTap:(id)a3;
- (void)_updateAnimationDidStopWithOldVisibleViews:(id)a3 finished:(BOOL)a4 context:(id)a5;
- (void)_updateAppearanceOfVisibleRowsForDragState;
- (void)_updateBackgroundView;
- (void)_updateBackgroundViewFrame;
- (void)_updateCell:(id)a3 withValue:(id)a4;
- (void)_updateConstants;
- (void)_updateConstantsForVisibleCellsAndHeaderFooterViews;
- (void)_updateContentSize;
- (void)_updateContentSizeSkippingContentOffsetAdjustment:(BOOL)a3;
- (void)_updateContextMenuStateForVisibleCells:(id)a3;
- (void)_updateCycleIdleUntil:(unint64_t)a3;
- (void)_updateDragControllerEnabledState;
- (void)_updateDragStateForCell:(id)a3 atIndexPath:(id)a4;
- (void)_updateDropStateForVisibleCellsForActiveDrop:(BOOL)a3 dropTargetIndexPath:(id)a4;
- (void)_updateDropTargetAppearanceWithTargetIndexPath:(id)a3 dropProposal:(id)a4 dropSession:(id)a5;
- (void)_updateFocusAfterLoadingCellsWithFocusedView:(id)a3 viewType:(int)a4;
- (void)_updateFocusedCellIndexPathIfNecessaryWithLastFocusedRect:(CGRect)a3;
- (void)_updateFocusedItemToIndexPath:(id)a3;
- (void)_updateForChangeInEffectiveContentInset;
- (void)_updateForChangedEdgesConvertingSafeAreaToContentInsetWithOldSystemContentInset:(UIEdgeInsets)a3 oldEdgesPropagatingSafeAreaInsets:(unint64_t)a4 adjustContentOffsetIfNecessary:(BOOL)a5;
- (void)_updateIdentityTrackerWithUpdateSupport:(id)a3;
- (void)_updateIndex;
- (void)_updateIndexDisplayedTitles;
- (void)_updateIndexFrame;
- (void)_updateIndexTitles:(id)a3;
- (void)_updateIndexTitlesFromDataSource;
- (void)_updateListEnvironmentTraitOverrideWithSectionContentInsets:(UIEdgeInsets)a3;
- (void)_updateMarginWidthForVisibleViewsForceLayout:(BOOL)a3;
- (void)_updateMultiSelectControllerIfNeeded;
- (void)_updatePinnedTableHeader;
- (void)_updateRowData;
- (void)_updateRowDataIfNeeded;
- (void)_updateSectionIndex;
- (void)_updateSelectedAndHighlightedStateForCell:(id)a3 atIndexPath:(id)a4;
- (void)_updateSelectionGroupingForCell:(id)a3 atIndexPath:(id)a4;
- (void)_updateSelectionGroupingForVisibleCells;
- (void)_updateSelectionIsKey;
- (void)_updateSeparatorStateForCell:(id)a3 atIndexPath:(id)a4;
- (void)_updateSeparatorStateForVisibleCells;
- (void)_updateSeparatorStyleForCell:(id)a3 atIndexPath:(id)a4;
- (void)_updateShowScrollIndicatorsFlag;
- (void)_updateTableHeaderFooterViewInsetsContentViewsToSafeArea;
- (void)_updateTableHeaderViewForAutoHideWithVelocity:(double)a3 targetOffset:(CGPoint *)a4;
- (void)_updateTableHeadersAndFootersNow:(BOOL)a3;
- (void)_updateTopSeparatorForCell:(id)a3 atIndexPath:(id)a4;
- (void)_updateTopSeparatorForVisibleCells;
- (void)_updateVerticalScrollIndicatorVisibility;
- (void)_updateVisibleCellsForRanges:(_UITableViewVisibleCellsUpdateRanges *)a3 createIfNecessary:(BOOL)a4;
- (void)_updateVisibleCellsImmediatelyIfNecessary;
- (void)_updateVisibleCellsNow:(BOOL)a3;
- (void)_updateVisibleHeadersAndFootersNow:(BOOL)a3;
- (void)_updateWithItems:(id)a3 updateSupport:(id)a4;
- (void)_updateWrapperClipping;
- (void)_updateWrapperContentInset;
- (void)_updateWrapperFrame;
- (void)_updateWrapperView;
- (void)_userSelectCell:(id)a3;
- (void)_userSelectRowAtPendingSelectionIndexPath:(id)a3;
- (void)_userSelectRowAtPendingSelectionIndexPath:(id)a3 animatedSelection:(BOOL)a4;
- (void)_wheelChangedWithEvent:(id)a3;
- (void)_willChangeToIdiom:(int64_t)a3 onScreen:(id)a4;
- (void)_willUpdateFocusInContext:(id)a3;
- (void)accessoryInsetsDidChange:(UIEdgeInsets)a3;
- (void)adjustIndexPaths:(id)a3 forMoveOfIndexPath:(id)a4 toIndexPath:(id)a5;
- (void)awakeFromNib;
- (void)beginUpdates;
- (void)bringSubviewToFront:(id)a3;
- (void)contextMenuInteraction:(id)a3 willDisplayMenuForConfiguration:(id)a4 animator:(id)a5;
- (void)contextMenuInteraction:(id)a3 willEndForConfiguration:(id)a4 animator:(id)a5;
- (void)contextMenuInteraction:(id)a3 willPerformPreviewActionForMenuWithConfiguration:(id)a4 animator:(id)a5;
- (void)dealloc;
- (void)decodeRestorableStateWithCoder:(id)a3;
- (void)deleteRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation;
- (void)deleteSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation;
- (void)deselectRowAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated;
- (void)didMoveToWindow;
- (void)encodeRestorableStateWithCoder:(id)a3;
- (void)encodeWithCoder:(id)a3;
- (void)endUpdates;
- (void)endUpdatesWithContext:(id)a3;
- (void)flashScrollIndicators;
- (void)insertRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation;
- (void)insertSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation;
- (void)layoutSubviews;
- (void)moveRowAtIndexPath:(NSIndexPath *)indexPath toIndexPath:(NSIndexPath *)newIndexPath;
- (void)moveSection:(NSInteger)section toSection:(NSInteger)newSection;
- (void)noteNumberOfRowsChanged;
- (void)performBatchUpdates:(void *)updates completion:(void *)completion;
- (void)performUsingPresentationValues:(id)a3;
- (void)pressesBegan:(id)a3 withEvent:(id)a4;
- (void)pressesCancelled:(id)a3 withEvent:(id)a4;
- (void)pressesChanged:(id)a3 withEvent:(id)a4;
- (void)pressesEnded:(id)a3 withEvent:(id)a4;
- (void)reconfigureRowsAtIndexPaths:(NSArray *)indexPaths;
- (void)registerClass:(Class)aClass forHeaderFooterViewReuseIdentifier:(NSString *)identifier;
- (void)registerClass:(Class)cellClass forCellReuseIdentifier:(NSString *)identifier;
- (void)registerNib:(UINib *)nib forCellReuseIdentifier:(NSString *)identifier;
- (void)registerNib:(UINib *)nib forHeaderFooterViewReuseIdentifier:(NSString *)identifier;
- (void)reloadData;
- (void)reloadRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation;
- (void)reloadSectionIndexTitles;
- (void)reloadSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation;
- (void)resizeSubviewsWithOldSize:(CGSize)a3;
- (void)scrollToNearestSelectedRowAtScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated;
- (void)scrollToRowAtIndexPath:(NSIndexPath *)indexPath atScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated;
- (void)selectRowAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated scrollPosition:(UITableViewScrollPosition)scrollPosition;
- (void)sendSubviewToBack:(id)a3;
- (void)setAllowsFocus:(BOOL)allowsFocus;
- (void)setAllowsFocusDuringEditing:(BOOL)allowsFocusDuringEditing;
- (void)setAllowsMultipleSelection:(BOOL)allowsMultipleSelection;
- (void)setAllowsMultipleSelectionDuringEditing:(BOOL)allowsMultipleSelectionDuringEditing;
- (void)setAllowsSelection:(BOOL)allowsSelection;
- (void)setAllowsSelectionDuringEditing:(BOOL)allowsSelectionDuringEditing;
- (void)setBackgroundColor:(id)a3;
- (void)setBackgroundView:(UIView *)backgroundView;
- (void)setBounds:(CGRect)a3;
- (void)setCellLayoutMarginsFollowReadableWidth:(BOOL)cellLayoutMarginsFollowReadableWidth;
- (void)setContentHuggingElements:(int64_t)a3;
- (void)setContentInset:(UIEdgeInsets)a3;
- (void)setContentOffset:(CGPoint)a3;
- (void)setContentSize:(CGSize)a3;
- (void)setContentSize:(CGSize)a3 skipContentOffsetAdjustment:(BOOL)a4;
- (void)setCountString:(id)a3;
- (void)setCountStringInsignificantRowCount:(unint64_t)a3;
- (void)setCurrentTouch:(id)a3;
- (void)setDataSource:(id)dataSource;
- (void)setDelaysContentTouches:(BOOL)a3;
- (void)setDelegate:(id)delegate;
- (void)setDeleteConfirmationIndexPath:(id)a3 animated:(BOOL)a4;
- (void)setDirectionalLayoutMargins:(NSDirectionalEdgeInsets)a3;
- (void)setDragDelegate:(id)dragDelegate;
- (void)setDragDestinationDelegate:(id)a3;
- (void)setDragInteractionEnabled:(BOOL)dragInteractionEnabled;
- (void)setDragSourceDelegate:(id)a3;
- (void)setDropDelegate:(id)dropDelegate;
- (void)setEditing:(BOOL)editing;
- (void)setEditing:(BOOL)editing animated:(BOOL)animated;
- (void)setEstimatedRowHeight:(CGFloat)estimatedRowHeight;
- (void)setEstimatedSectionFooterHeight:(CGFloat)estimatedSectionFooterHeight;
- (void)setEstimatedSectionHeaderHeight:(CGFloat)estimatedSectionHeaderHeight;
- (void)setFillerRowHeight:(CGFloat)fillerRowHeight;
- (void)setFrame:(CGRect)a3;
- (void)setIndexHidden:(BOOL)a3 animated:(BOOL)a4;
- (void)setIndexHiddenForSearch:(BOOL)a3;
- (void)setInsetsContentViewsToSafeArea:(BOOL)insetsContentViewsToSafeArea;
- (void)setInsetsLayoutMarginsFromSafeArea:(BOOL)a3;
- (void)setLayoutMargins:(UIEdgeInsets)a3;
- (void)setMultiselectCheckmarkColor:(id)a3;
- (void)setOverlapsSectionHeaderViews:(BOOL)a3;
- (void)setPrefetchDataSource:(id)prefetchDataSource;
- (void)setPrefetchingEnabled:(BOOL)prefetchingEnabled;
- (void)setRefreshControl:(id)a3;
- (void)setRemembersLastFocusedIndexPath:(BOOL)remembersLastFocusedIndexPath;
- (void)setRowHeight:(CGFloat)rowHeight;
- (void)setSectionBorderColor:(id)a3;
- (void)setSectionFooterHeight:(CGFloat)sectionFooterHeight;
- (void)setSectionHeaderHeight:(CGFloat)sectionHeaderHeight;
- (void)setSectionHeaderTopPadding:(CGFloat)sectionHeaderTopPadding;
- (void)setSectionIndexBackgroundColor:(UIColor *)sectionIndexBackgroundColor;
- (void)setSectionIndexColor:(UIColor *)sectionIndexColor;
- (void)setSectionIndexMinimumDisplayRowCount:(NSInteger)sectionIndexMinimumDisplayRowCount;
- (void)setSectionIndexTrackingBackgroundColor:(UIColor *)sectionIndexTrackingBackgroundColor;
- (void)setSelectionFollowsFocus:(BOOL)selectionFollowsFocus;
- (void)setSelfSizingInvalidation:(UITableViewSelfSizingInvalidation)selfSizingInvalidation;
- (void)setSemanticContentAttribute:(int64_t)a3;
- (void)setSeparatorColor:(UIColor *)separatorColor;
- (void)setSeparatorEffect:(UIVisualEffect *)separatorEffect;
- (void)setSeparatorInset:(UIEdgeInsets)separatorInset;
- (void)setSeparatorInsetReference:(UITableViewSeparatorInsetReference)separatorInsetReference;
- (void)setSeparatorStyle:(UITableViewCellSeparatorStyle)separatorStyle;
- (void)setShowsHorizontalScrollIndicator:(BOOL)a3;
- (void)setSpringLoaded:(BOOL)a3;
- (void)setTableFooterView:(UIView *)tableFooterView;
- (void)setTableHeaderBackgroundColor:(id)a3;
- (void)setTableHeaderView:(UIView *)tableHeaderView;
- (void)setTableHeaderViewShouldAutoHide:(BOOL)a3;
- (void)swipeActionController:(id)a3 cleanupActionsView:(id)a4 forItemAtIndexPath:(id)a5;
- (void)swipeActionController:(id)a3 didCompleteAction:(id)a4 cancelled:(BOOL)a5 atIndexPath:(id)a6;
- (void)swipeActionController:(id)a3 didCompleteAnimationOfAction:(id)a4 canceled:(BOOL)a5 atIndexPath:(id)a6;
- (void)swipeActionController:(id)a3 didEndSwipeForItemAtIndexPath:(id)a4;
- (void)swipeActionController:(id)a3 swipeOccurrence:(id)a4 didChangeStateFrom:(int64_t)a5 to:(int64_t)a6;
- (void)swipeActionController:(id)a3 willBeginSwipeForItemAtIndexPath:(id)a4;
- (void)swipeActionController:(id)a3 willPerformAction:(id)a4 atIndexPath:(id)a5;
- (void)tintColorDidChange;
- (void)touchesBegan:(id)a3 withEvent:(id)a4;
- (void)touchesCancelled:(id)a3 withEvent:(id)a4;
- (void)touchesEnded:(id)a3 withEvent:(id)a4;
- (void)touchesMoved:(id)a3 withEvent:(id)a4;
- (void)unhighlightRowAtIndexPath:(id)a3 animated:(BOOL)a4;
- (void)willMoveToSuperview:(id)a3;
@end

@implementation UITableView

uint64_t __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    ++*(void *)(v1 + 16);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t __46__UITableView__updateWithItems_updateSupport___block_invoke_3(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  if (*(unsigned char *)(a1 + 72)) {
    uint64_t v3 = *(void *)(a1 + 56);
  }
  else {
    uint64_t v3 = 0;
  }
  return [v2 _startViewAnimationsForUpdate:*(void *)(a1 + 40) withContext:*(void *)(a1 + 48) swipeOccurrenceAnimatingDelete:v3 oldVisibleViews:*(void *)(a1 + 64) useCopyBlendingForAnimations:*(unsigned __int8 *)(a1 + 73)];
}

- (void)_layoutMarginsDidChangeFromOldMargins:(UIEdgeInsets)a3
{
  double right = a3.right;
  double bottom = a3.bottom;
  double left = a3.left;
  double top = a3.top;
  [(UIView *)self layoutMargins];
  if (left != v9 || right != v8) {
    [(UITableView *)self _setNeedsRebuildGeometry];
  }
  v11.receiver = self;
  v11.super_class = (Class)UITableView;
  -[UIView _layoutMarginsDidChangeFromOldMargins:](&v11, sel__layoutMarginsDidChangeFromOldMargins_, top, left, bottom, right);
}

+ (BOOL)_supportsInvalidatingFocusCache
{
  return 1;
}

uint64_t __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutBelowIfNeeded];
}

uint64_t __73__UITableView__createPreparedCellForGlobalRow_withIndexPath_willDisplay___block_invoke_1188(uint64_t a1)
{
  return [*(id *)(a1 + 32) layoutIfNeeded];
}

uint64_t __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_6(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setBounds:", *(double *)(*(void *)(a1 + 40) + 128), *(double *)(*(void *)(a1 + 40) + 136), *(double *)(*(void *)(a1 + 40) + 144), *(double *)(*(void *)(a1 + 40) + 152));
}

- (void)_setSectionContentInset:(UIEdgeInsets)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a3.left != self->_sectionContentInset.left
    || a3.top != self->_sectionContentInset.top
    || a3.right != self->_sectionContentInset.right
    || a3.bottom != self->_sectionContentInset.bottom)
  {
    self->_sectionContentInset = a3;
    [(UITableView *)self _sectionContentInset];
    double v8 = v7;
    double v10 = v9;
    double v12 = v11;
    double v14 = v13;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    v15 = [(UITableView *)self _preparedCells];
    uint64_t v16 = [v15 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v21 != v18) {
            objc_enumerationMutation(v15);
          }
          objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * i), "_setBackgroundInset:", v8, v10, v12, v14);
        }
        uint64_t v17 = [v15 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v17);
    }

    [(UITableView *)self _rebuildGeometryWithCompatibility];
  }
}

- (BOOL)_shouldDrawThickSeparators
{
  int v3 = dyld_program_sdk_at_least();
  if (v3)
  {
    v4 = [(UIView *)self traitCollection];
    v5 = [v4 preferredContentSizeCategory];
    BOOL IsAccessibilityCategory = UIContentSizeCategoryIsAccessibilityCategory(v5);

    LOBYTE(v3) = IsAccessibilityCategory;
  }
  return v3;
}

- (UIEdgeInsets)_sectionContentInset
{
  double top = self->_sectionContentInset.top;
  double left = self->_sectionContentInset.left;
  double bottom = self->_sectionContentInset.bottom;
  double right = self->_sectionContentInset.right;
  [(UITableView *)self _effectiveSafeAreaInsets];
  double v8 = v7;
  double v10 = v9;
  [(UITableConstants *)self->_constants defaultSectionContentInsetsForTableStyle:(*((void *)&self->_tableFlags + 1) >> 45) & 3];
  double v35 = v14;
  double v36 = v13;
  double v15 = v11;
  double v16 = v12;
  if (v11 > 0.0 || v12 > 0.0)
  {
    double v15 = v8 + v11;
    double v16 = v10 + v12;
  }
  if (left == -1.0
    && ([(UIView *)self traitCollection],
        uint64_t v17 = objc_claimAutoreleasedReturnValue(),
        uint64_t v18 = [v17 userInterfaceIdiom],
        v17,
        double left = 0.0,
        v18 != 3))
  {
    if ((*((unsigned char *)&self->_tableFlags + 25) & 0x40) != 0)
    {
      [(UIView *)self layoutMargins];
      double v15 = v31;
      if ((*((_DWORD *)&self->super.super._viewFlags + 4) & 0x80000) != 0)
      {
        [(UITableView *)self _indexBarExtentFromEdge];
        double v15 = fmax(v15, v32);
      }
    }
  }
  else
  {
    double v15 = v8 + left;
  }
  if (right == -1.0
    && ([(UIView *)self traitCollection],
        v19 = objc_claimAutoreleasedReturnValue(),
        uint64_t v20 = [v19 userInterfaceIdiom],
        v19,
        double right = 0.0,
        v20 != 3))
  {
    if ((*((unsigned char *)&self->_tableFlags + 25) & 0x40) != 0)
    {
      [(UIView *)self layoutMargins];
      double v16 = v33;
      if ((*((_DWORD *)&self->super.super._viewFlags + 4) & 0x80000) == 0)
      {
        [(UITableView *)self _indexBarExtentFromEdge];
        double v16 = fmax(v16, v34);
      }
    }
  }
  else
  {
    double v16 = v10 + right;
  }
  if (bottom == -1.0) {
    double v21 = v35;
  }
  else {
    double v21 = bottom;
  }
  if (top == -1.0) {
    double v22 = v36;
  }
  else {
    double v22 = top;
  }
  [(UITableView *)self _tableContentInset];
  double v24 = v22 + v23;
  double v26 = v15 + v25;
  double v28 = v21 + v27;
  double v30 = v16 + v29;
  result.double right = v30;
  result.double bottom = v28;
  result.double left = v26;
  result.double top = v24;
  return result;
}

- (UIEdgeInsets)_tableContentInset
{
  [(UIScrollView *)self accessoryInsets];
  double v4 = v3 + 0.0;
  double v6 = v5 + 0.0;
  double v7 = [(UIView *)self traitCollection];
  uint64_t v8 = [v7 userInterfaceIdiom];

  if (v8 == 3)
  {
    [(UITableView *)self _effectiveSafeAreaInsets];
    double v10 = v9;
    double v12 = v11;
    [(UIView *)self bounds];
    CGFloat v13 = CGRectGetWidth(v20) - v4 - v6 - v10 - v12;
    double v14 = round((v13 + -520.0) * 0.25);
    BOOL v15 = v13 <= 520.0 || v14 <= 12.0;
    if (!v15 || (double v14 = 12.0, v6 == 0.0)) {
      double v6 = v6 + v14;
    }
    double v4 = v4 + v14;
  }
  double v16 = 0.0;
  double v17 = 0.0;
  double v18 = v4;
  double v19 = v6;
  result.double right = v19;
  result.double bottom = v17;
  result.double left = v18;
  result.double top = v16;
  return result;
}

- (double)_indexBarExtentFromEdge
{
  double v3 = [(UIView *)self traitCollection];
  if ([v3 userInterfaceIdiom] == 3)
  {
    double v4 = [(UIView *)self window];
    double v5 = [v4 _screen];
    double v6 = [v5 _capabilityForKey:@"UIScreenCapabilityTouchLevelsKey"];
    uint64_t v7 = [v6 integerValue];

    double result = 0.0;
    if (v7 != 2) {
      return result;
    }
  }
  else
  {
  }
  BOOL v9 = [(UITableView *)self _isShowingIndex];
  double result = 0.0;
  if (v9)
  {
    if ((*((_DWORD *)&self->super.super._viewFlags + 4) & 0x80000) != 0)
    {
      [(UIView *)self->_index frame];
      return CGRectGetMaxX(*(CGRect *)&v11);
    }
    else
    {
      [(UIView *)self bounds];
      double Width = CGRectGetWidth(v16);
      [(UIView *)self->_index frame];
      return Width - CGRectGetMinX(v17);
    }
  }
  return result;
}

- (BOOL)_isShowingIndex
{
  return self->_index && (*((unsigned char *)&self->_tableFlags + 18) & 0x80) == 0;
}

- (UIEdgeInsets)_effectiveSafeAreaInsets
{
  BOOL v3 = [(UITableView *)self insetsContentViewsToSafeArea];
  double v4 = 0.0;
  double v5 = 0.0;
  double v6 = 0.0;
  double v7 = 0.0;
  if (v3) {
    [(UIView *)self safeAreaInsets];
  }
  result.double right = v7;
  result.double bottom = v6;
  result.double left = v4;
  result.double top = v5;
  return result;
}

- (BOOL)insetsContentViewsToSafeArea
{
  return (*((unsigned __int8 *)&self->_tableFlags + 27) >> 1) & 1;
}

- (CGFloat)estimatedRowHeight
{
  return self->_estimatedRowHeight;
}

- (void)_updateVisibleHeadersAndFootersNow:(BOOL)a3
{
  BOOL v84 = a3;
  if (![(UITableView *)self _shouldShowHeadersAndFooters]) {
    return;
  }
  [(UITableView *)self _visibleBounds];
  CGFloat v87 = v5;
  CGFloat v88 = v4;
  CGFloat v85 = v7;
  CGFloat v86 = v6;
  uint64_t v8 = -[UITableViewRowData sectionsInRect:]((uint64_t)self->_rowData, v4, v5, v6, v7);
  uint64_t v10 = v9;
  uint64_t v103 = 0;
  v104 = &v103;
  uint64_t v105 = 0x3032000000;
  v106 = __Block_byref_object_copy__193;
  v107 = __Block_byref_object_dispose__193;
  id v108 = 0;
  v102[0] = MEMORY[0x1E4F143A8];
  v102[1] = 3221225472;
  v102[2] = __50__UITableView__updateVisibleHeadersAndFootersNow___block_invoke;
  v102[3] = &unk_1E5308D10;
  v102[6] = v9;
  v102[4] = &v103;
  v102[5] = v8;
  uint64_t v11 = 2192;
  [(NSMutableDictionary *)self->_visibleHeaderViews enumerateKeysAndObjectsUsingBlock:v102];
  double v12 = (void *)v104[5];
  v101[0] = MEMORY[0x1E4F143A8];
  v101[1] = 3221225472;
  v101[2] = __50__UITableView__updateVisibleHeadersAndFootersNow___block_invoke_2;
  v101[3] = &unk_1E52E50C0;
  v101[4] = self;
  [v12 enumerateKeysAndObjectsUsingBlock:v101];
  [(id)v104[5] removeAllObjects];
  [(NSMutableDictionary *)self->_visibleFooterViews enumerateKeysAndObjectsUsingBlock:v102];
  CGFloat v13 = (void *)v104[5];
  v100[0] = MEMORY[0x1E4F143A8];
  v100[1] = 3221225472;
  v100[2] = __50__UITableView__updateVisibleHeadersAndFootersNow___block_invoke_3;
  v100[3] = &unk_1E52E50C0;
  v100[4] = self;
  [v13 enumerateKeysAndObjectsUsingBlock:v100];
  if (v8 >= v8 + v10) {
    goto LABEL_62;
  }
  int v83 = 0;
  do
  {
    double v14 = *(Class *)((char *)&self->super.super.super.super.isa + v11);
    BOOL v15 = [NSNumber numberWithInteger:v8];
    CGRect v16 = [v14 objectForKey:v15];

    visibleFooterViews = self->_visibleFooterViews;
    double v18 = [NSNumber numberWithInteger:v8];
    double v19 = [(NSMutableDictionary *)visibleFooterViews objectForKey:v18];

    double rect2_8 = -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, v8, 0);
    double v94 = v21;
    double v95 = v20;
    double rect = v22;
    double rect2 = -[UITableViewRowData rectForFooterInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, v8, 0);
    double rect2_16 = v24;
    double rect2_24 = v23;
    double v93 = v25;
    v109.origin.x = rect2_8;
    v109.size.width = v94;
    v109.origin.y = v95;
    v109.size.height = rect;
    BOOL IsEmpty = CGRectIsEmpty(v109);
    v110.origin.x = rect2;
    v110.size.width = rect2_16;
    v110.origin.y = rect2_24;
    v110.size.height = v93;
    BOOL v27 = CGRectIsEmpty(v110);
    unint64_t v28 = [(UITableView *)self _headerFooterPinningBehavior] - 1;
    if (IsEmpty) {
      goto LABEL_16;
    }
    BOOL v99 = 0;
    [(UIView *)self bounds];
    double v30 = v29;
    double v32 = v31;
    double v34 = v33;
    double v36 = v35;
    [(UITableView *)self _contentInset];
    double v38 = v37;
    double v40 = v39;
    double v42 = v41;
    double v44 = v43;
    if ([(UITableView *)self allowsHeaderViewsToFloat])
    {
      double v45 = -[UITableViewRowData floatingRectForHeaderInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)self->_rowData, v8, 0, &v99, v30 + v40, v32 + v38, v34 - (v40 + v44), v36 - (v38 + v42));
      if (v99)
      {
        double rect2_8 = v45;
        double v94 = v47;
        double v95 = v46;
        double rect = v48;
      }
    }
    v111.origin.x = rect2_8;
    v111.size.width = v94;
    v111.origin.y = v95;
    v111.size.height = rect;
    if (CGRectIsEmpty(v111)) {
      goto LABEL_16;
    }
    v112.origin.y = v87;
    v112.origin.x = v88;
    v112.size.height = v85;
    v112.size.width = v86;
    v115.origin.x = rect2_8;
    v115.size.width = v94;
    v115.origin.y = v95;
    v115.size.height = rect;
    if (!CGRectIntersectsRect(v112, v115))
    {
LABEL_16:
      char v49 = 0;
    }
    else
    {
      if (v16)
      {
        if (v99 && v28 <= 1) {
          [(UITableView *)self _addContentSubview:v16 atBack:0];
        }
        if (_IsKindOfUITableViewHeaderFooterView(v16))
        {
          objc_msgSend(v16, "setFrame:", rect2_8, v95, v94, rect);
          objc_msgSend(v16, "setMaxTitleWidth:", -[UITableViewRowData maxHeaderTitleWidthForSection:]((uint64_t)self->_rowData, v8));
          [v16 setFloating:v99];
        }
        else
        {
          [(UITableView *)self _sectionContentInset];
          objc_msgSend(v16, "setFrame:", v79, v95, v94 - (v79 + v78), rect);
        }
LABEL_56:
        char v49 = 1;
        goto LABEL_17;
      }
      if (!v84) {
        goto LABEL_56;
      }
      uint64_t v82 = v11;
      v70 = -[UITableView _sectionHeaderViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:](self, "_sectionHeaderViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:", v8, v99, 1, 1, rect2_8, v95, v94, rect);
      if (v70)
      {
        [(UITableView *)self _addContentSubview:v70 atBack:0];
        BOOL v72 = !v99 && v28 < 2;
        BOOL v96 = v72;
        recta = *(Class *)((char *)&self->super.super.super.super.isa + v11);
        v73 = [NSNumber numberWithInteger:v8];
        [recta setObject:v70 forKey:v73];
        v83 |= v96;
      }
      char v49 = 1;
      uint64_t v11 = v82;
    }
LABEL_17:
    if (v16 && (v49 & 1) == 0) {
      [(UITableView *)self _reuseHeaderFooterView:v16 isHeader:1 forSection:v8];
    }
    if (v27) {
      goto LABEL_32;
    }
    BOOL v99 = 0;
    [(UIView *)self bounds];
    double v51 = v50;
    double v53 = v52;
    double v55 = v54;
    double v57 = v56;
    [(UITableView *)self _contentInset];
    double v59 = v58;
    double v61 = v60;
    double v63 = v62;
    double v65 = v64;
    if ([(UITableView *)self allowsFooterViewsToFloat])
    {
      double v66 = -[UITableViewRowData floatingRectForFooterInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)self->_rowData, v8, 0, &v99, v51 + v61, v53 + v59, v55 - (v61 + v65), v57 - (v59 + v63));
      if (v99)
      {
        double rect2 = v66;
        double rect2_16 = v68;
        double rect2_24 = v67;
        double v93 = v69;
      }
    }
    v113.origin.x = rect2;
    v113.size.width = rect2_16;
    v113.origin.y = rect2_24;
    v113.size.height = v93;
    if (CGRectIsEmpty(v113)) {
      goto LABEL_32;
    }
    v114.origin.y = v87;
    v114.origin.x = v88;
    v114.size.height = v85;
    v114.size.width = v86;
    v116.origin.x = rect2;
    v116.size.width = rect2_16;
    v116.origin.y = rect2_24;
    v116.size.height = v93;
    if (!CGRectIntersectsRect(v114, v116))
    {
LABEL_32:
      if (v19) {
        [(UITableView *)self _reuseHeaderFooterView:v19 isHeader:0 forSection:v8];
      }
    }
    else if (v19)
    {
      if (v99 && v28 <= 1) {
        [(UITableView *)self _addContentSubview:v19 atBack:0];
      }
      if (_IsKindOfUITableViewHeaderFooterView(v19))
      {
        objc_msgSend(v19, "setFrame:", rect2, rect2_24, rect2_16, v93);
        objc_msgSend(v19, "setMaxTitleWidth:", -[UITableViewRowData maxFooterTitleWidthForSection:]((uint64_t)self->_rowData, v8));
        [v19 setFloating:v99];
      }
      else
      {
        [(UITableView *)self _sectionContentInset];
        objc_msgSend(v19, "setFrame:", v81, rect2_24, rect2_16 - (v81 + v80), v93);
      }
    }
    else if (v84)
    {
      double v19 = -[UITableView _sectionFooterViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:](self, "_sectionFooterViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:", v8, v99, 1, 1, rect2, rect2_24, rect2_16, v93);
      if (v19)
      {
        [(UITableView *)self _addContentSubview:v19 atBack:0];
        BOOL v75 = !v99 && v28 < 2;
        v76 = self->_visibleFooterViews;
        v77 = [NSNumber numberWithInteger:v8];
        [(NSMutableDictionary *)v76 setObject:v19 forKey:v77];
        v83 |= v75;
      }
    }
    else
    {
      double v19 = 0;
    }

    ++v8;
    --v10;
  }
  while (v10);
  if (v83) {
    [(UITableView *)self _updateVisibleHeadersAndFootersNow:0];
  }
LABEL_62:
  [(UITableView *)self _updatePinnedTableHeader];
  _Block_object_dispose(&v103, 8);
}

- (BOOL)_headerAndFooterViewsFloat
{
  return (*((unsigned char *)&self->_tableFlags + 13) & 0x60) == 0 && (*((unsigned char *)&self->_tableFlags + 20) & 0x10) == 0;
}

- (int64_t)_headerFooterPinningBehavior
{
  if ((*((unsigned char *)&self->_tableFlags + 29) & 0x20) != 0 || self->_sectionHeaderTopPadding == 0.0) {
    return 0;
  }
  else {
    return [(UITableConstants *)self->_constants defaultHeaderFooterPinningBehaviorForTableStyle:(*((void *)&self->_tableFlags + 1) >> 45) & 3];
  }
}

- (id)_sectionHeaderView:(BOOL)a3 withFrame:(CGRect)a4 forSection:(int64_t)a5 floating:(BOOL)a6 reuseViewIfPossible:(BOOL)a7 willDisplay:(BOOL)a8
{
  BOOL v8 = a8;
  CGFloat height = a4.size.height;
  CGFloat width = a4.size.width;
  CGFloat y = a4.origin.y;
  CGFloat x = a4.origin.x;
  BOOL v16 = a3;
  context = (void *)MEMORY[0x18C108260](self, a2);
  v46[0] = MEMORY[0x1E4F143A8];
  v46[1] = 3221225472;
  double v47 = __96__UITableView__sectionHeaderView_withFrame_forSection_floating_reuseViewIfPossible_willDisplay___block_invoke;
  double v48 = &unk_1E5309090;
  CGFloat v50 = x;
  CGFloat v51 = y;
  CGFloat v52 = width;
  CGFloat v53 = height;
  BOOL v54 = a6;
  char v49 = self;
  uint64_t v40 = 0;
  double v41 = &v40;
  uint64_t v42 = 0x3032000000;
  double v43 = __Block_byref_object_copy__193;
  double v44 = __Block_byref_object_dispose__193;
  id v45 = 0;
  if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0)
  {
    if (v16)
    {
      tentativeHeaderViews = self->_tentativeHeaderViews;
      double v22 = [NSNumber numberWithInteger:a5];
      uint64_t v23 = [(NSMutableDictionary *)tentativeHeaderViews objectForKey:v22];
      double v24 = (void *)v41[5];
      v41[5] = v23;

      double v25 = (void *)v41[5];
      if (v25)
      {
        uint64_t IsKindOfUITableViewHeaderFooterView = _IsKindOfUITableViewHeaderFooterView((void *)v41[5]);
        v47((uint64_t)v46, v25, IsKindOfUITableViewHeaderFooterView);
        if (v8) {
          [(UITableView *)self _notifyWillDisplayHeaderFooterView:v41[5] forSection:a5 isHeader:1];
        }
        goto LABEL_14;
      }
    }
    else
    {
      tentativeFooterViews = self->_tentativeFooterViews;
      unint64_t v28 = [NSNumber numberWithInteger:a5];
      uint64_t v29 = [(NSMutableDictionary *)tentativeFooterViews objectForKey:v28];
      double v30 = (void *)v41[5];
      v41[5] = v29;

      double v31 = (void *)v41[5];
      if (v31)
      {
        uint64_t v32 = _IsKindOfUITableViewHeaderFooterView((void *)v41[5]);
        v47((uint64_t)v46, v31, v32);
        if (v8) {
          [(UITableView *)self _notifyWillDisplayHeaderFooterView:v41[5] forSection:a5 isHeader:0];
        }
        goto LABEL_14;
      }
    }
  }
  if ((*((unsigned char *)&self->_tableFlags + 29) & 0x40) == 0) {
    _UIQOSExpectComplexCommit("UITVHFV");
  }
  double v18 = (void *)_UISetCurrentFallbackEnvironment(self);
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  v36[2] = __96__UITableView__sectionHeaderView_withFrame_forSection_floating_reuseViewIfPossible_willDisplay___block_invoke_2;
  v36[3] = &unk_1E53090B8;
  BOOL v37 = v16;
  v36[4] = self;
  v36[5] = &v40;
  v36[6] = a5;
  v36[7] = v46;
  BOOL v38 = a7;
  *(CGFloat *)&v36[8] = x;
  *(CGFloat *)&v36[9] = y;
  *(CGFloat *)&v36[10] = width;
  *(CGFloat *)&v36[11] = height;
  BOOL v39 = a6;
  +[UIView performWithoutAnimation:v36];
  _UIRestorePreviousFallbackEnvironment(v18);
  double v19 = v41;
  if (v8)
  {
    uint64_t v20 = v41[5];
    if (v20)
    {
      [(UITableView *)self _notifyWillDisplayHeaderFooterView:v20 forSection:a5 isHeader:v16];
LABEL_14:
      double v19 = v41;
    }
  }
  id v33 = (id)v19[5];
  _Block_object_dispose(&v40, 8);

  return v33;
}

- (BOOL)_shouldUnionVisibleBounds
{
  BOOL v3 = +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:self];
  CGFloat v4 = [v3 scrollManager];
  int v5 = [v4 isScrollingScrollableContainer:self];

  if ((*((unsigned char *)&self->_tableFlags + 23) & 4) != 0
    || +[UIView _isInAnimationBlock])
  {
    int v6 = 0;
    goto LABEL_4;
  }
  CGFloat v4 = [(UIView *)self window];
  if (([v4 isRotating] | v5) == 1)
  {
    int v6 = 1;
LABEL_4:
    [(UIView *)self bounds];
    v13.origin.CGFloat x = v7;
    v13.origin.CGFloat y = v8;
    v13.size.CGFloat width = v9;
    v13.size.CGFloat height = v10;
    BOOL v11 = CGRectIntersectsRect(self->_visibleBounds, v13);
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  BOOL v11 = 0;
LABEL_9:

LABEL_10:
  return v11;
}

- (id)_sectionHeaderViewWithFrame:(CGRect)a3 forSection:(int64_t)a4 floating:(BOOL)a5 reuseViewIfPossible:(BOOL)a6 willDisplay:(BOOL)a7
{
  return -[UITableView _sectionHeaderView:withFrame:forSection:floating:reuseViewIfPossible:willDisplay:](self, "_sectionHeaderView:withFrame:forSection:floating:reuseViewIfPossible:willDisplay:", 1, a4, a5, a6, a7, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (void)_layoutAdjustmentsDidChange
{
  v4.receiver = self;
  v4.super_class = (Class)UITableView;
  [(UIScrollView *)&v4 _layoutAdjustmentsDidChange];
  if (((*((void *)&self->_tableFlags + 1) >> 45) & 3uLL) - 1 > 1)
  {
    [(UITableView *)self _updateSeparatorStateForVisibleCells];
  }
  else
  {
    [(UITableView *)self _topPadding];
    if (v3 == -1.0) {
      [(UITableView *)self _invalidateForTopOrBottomPaddingChange:1];
    }
  }
}

- (void)_invalidateForTopOrBottomPaddingChange:(BOOL)a3
{
  rowData = self->_rowData;
  if (rowData)
  {
    BOOL v5 = a3;
    -[UITableViewRowData invalidateAllSectionOffsetsAndUpdatePadding](rowData);
    [(UITableView *)self _updateContentSize];
    if (v5)
    {
      [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1];
    }
  }
}

uint64_t __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_5(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updateAnimationDidStopWithOldVisibleViews:*(void *)(a1 + 40) finished:a2 context:*(void *)(a1 + 48)];
}

- (void)setRowHeight:(CGFloat)rowHeight
{
  self->_rowHeight = rowHeight;
  if ((*((unsigned char *)&self->_tableFlags + 14) & 7) != 0) {
    [(UITableView *)self _scheduleAdjustExtraSeparators];
  }
}

uint64_t __46__UITableView__updateWithItems_updateSupport___block_invoke_4(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) _updateAnimationDidStopWithOldVisibleViews:*(void *)(a1 + 40) finished:a2 context:*(void *)(a1 + 48)];
  if (*(unsigned char *)(a1 + 64))
  {
    double v3 = [*(id *)(a1 + 32) _swipeActionController];
    objc_super v4 = [v3 currentSwipeOccurrence];
    [v4 resetAnimated:0 completion:0];
  }
  BOOL v5 = *(void **)(a1 + 56);
  return [v5 endIgnoringDrags];
}

uint64_t __64__UITableView__setSeparatorsDrawInVibrantLightModeUIAppearance___block_invoke(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 40) BOOLValue];
  uint64_t v3 = 0x20000000000000;
  if (!v2) {
    uint64_t v3 = 0;
  }
  *(void *)(*(void *)(a1 + 32) + 3088) = *(void *)(*(void *)(a1 + 32) + 3088) & 0xFFDFFFFFFFFFFFFFLL | v3;
  objc_super v4 = *(void **)(a1 + 32);
  return [v4 _setSeparatorBackdropOverlayBlendMode:0];
}

- (void)_setSeparatorsDrawAsOverlay:(BOOL)a3
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  p_tableFlags = &self->_tableFlags;
  unint64_t v6 = *((void *)&self->_tableFlags + 2);
  uint64_t v5 = *((void *)&self->_tableFlags + 3);
  uint64_t v7 = 0x400000000000;
  unint64_t v8 = v6 & 0xFFE3FFFFFFFFFFFFLL | 0x4000000000000;
  if ((v6 & 0x1C000000000000) != 0) {
    unint64_t v8 = *((void *)&self->_tableFlags + 2);
  }
  else {
    uint64_t v7 = 0x400000000000;
  }
  if (a3)
  {
    unint64_t v6 = v8;
    uint64_t v5 = *((void *)&self->_tableFlags + 3);
  }
  else
  {
    uint64_t v7 = 0;
  }
  *((void *)&self->_tableFlags + 2) = v6 & 0xFFFFBFFFFFFFFFFFLL | v7;
  *((void *)&self->_tableFlags + 3) = v5;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  CGFloat v9 = self->_visibleCells;
  uint64_t v10 = [(NSMutableArray *)v9 countByEnumeratingWithState:&v36 objects:v42 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v37;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v37 != v12) {
          objc_enumerationMutation(v9);
        }
        double v14 = *(void **)(*((void *)&v36 + 1) + 8 * i);
        if ((*((unsigned char *)p_tableFlags + 22) & 0x20) != 0)
        {
          [*(id *)(*((void *)&v36 + 1) + 8 * i) _setSeparatorDrawsInVibrantLightMode:1];
          uint64_t v15 = 0;
        }
        else
        {
          [*(id *)(*((void *)&v36 + 1) + 8 * i) _setSeparatorDrawsInVibrantLightMode:0];
          uint64_t v15 = (*((void *)p_tableFlags + 2) >> 50) & 7;
        }
        [v14 _setSeparatorBackdropOverlayBlendMode:v15];
      }
      uint64_t v11 = [(NSMutableArray *)v9 countByEnumeratingWithState:&v36 objects:v42 count:16];
    }
    while (v11);
  }

  if ((*((unsigned char *)p_tableFlags + 22) & 0x20) != 0)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    BOOL v16 = self->_extraSeparators;
    uint64_t v23 = [(NSMutableArray *)v16 countByEnumeratingWithState:&v32 objects:v41 count:16];
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = *(void *)v33;
      do
      {
        for (uint64_t j = 0; j != v24; ++j)
        {
          if (*(void *)v33 != v25) {
            objc_enumerationMutation(v16);
          }
          BOOL v27 = *(void **)(*((void *)&v32 + 1) + 8 * j);
          [v27 _setDrawsAsBackdropOverlayWithBlendMode:0];
          [v27 setDrawsWithVibrantLightMode:1];
          [v27 setBackgroundColor:0];
        }
        uint64_t v24 = [(NSMutableArray *)v16 countByEnumeratingWithState:&v32 objects:v41 count:16];
      }
      while (v24);
    }
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    BOOL v16 = self->_extraSeparators;
    uint64_t v17 = [(NSMutableArray *)v16 countByEnumeratingWithState:&v28 objects:v40 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)v29;
      do
      {
        for (uint64_t k = 0; k != v18; ++k)
        {
          if (*(void *)v29 != v19) {
            objc_enumerationMutation(v16);
          }
          double v21 = *(void **)(*((void *)&v28 + 1) + 8 * k);
          objc_msgSend(v21, "setDrawsWithVibrantLightMode:", 0, (void)v28);
          [v21 _setDrawsAsBackdropOverlayWithBlendMode:(*((void *)p_tableFlags + 2) >> 50) & 7];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            double v22 = [(UITableView *)self separatorColor];
            [v21 setBackgroundColor:v22];
          }
        }
        uint64_t v18 = [(NSMutableArray *)v16 countByEnumeratingWithState:&v28 objects:v40 count:16];
      }
      while (v18);
    }
  }
}

- (void)_setSeparatorBackdropOverlayBlendMode:(int64_t)a3
{
  *((void *)&self->_tableFlags + 2) = ((unint64_t)(a3 & 7) << 50) | ((unint64_t)(a3 != 0) << 46) | *((void *)&self->_tableFlags + 2) & 0xFFE3BFFFFFFFFFFFLL;
  -[UITableView _setSeparatorsDrawAsOverlay:](self, "_setSeparatorsDrawAsOverlay:");
}

- (BOOL)_hasContentForBarInteractions
{
  if (-[UITableViewRowData hasRows]((uint64_t)self->_rowData)) {
    return 1;
  }
  v4.receiver = self;
  v4.super_class = (Class)UITableView;
  return [(UIScrollView *)&v4 _hasContentForBarInteractions];
}

- (UIColor)_accessoryBaseColor
{
  return self->_accessoryBaseColor;
}

- (UIEdgeInsets)_cellSafeAreaInsets
{
  if (self->_wrapperView) {
    self = (UITableView *)self->_wrapperView;
  }
  [(UIView *)self safeAreaInsets];
  result.double right = v5;
  result.double bottom = v4;
  result.double left = v3;
  result.double top = v2;
  return result;
}

- (int64_t)_numberOfRowsInSection:(int64_t)a3
{
  double v5 = [(UITableView *)self _dataSourceProxy];
  uint64_t v6 = [v5 tableView:self numberOfRowsInSection:a3];

  return v6 & ~(v6 >> 63);
}

- (void)_setupCell:(id)a3 forEditing:(BOOL)a4 atIndexPath:(id)a5 animated:(BOOL)a6 updateSeparators:(BOOL)a7
{
  BOOL v10 = a4;
  id v25 = a3;
  id v13 = a5;
  if (!v13)
  {
    double v21 = [MEMORY[0x1E4F28B00] currentHandler];
    double v22 = NSStringFromSelector(a2);
    [v21 handleFailureInMethod:a2, self, @"UITableView.m", 16724, @"UITableView internal inconsistency: indexPath cannot be nil in %@", v22 object file lineNumber description];
  }
  if ((*((unsigned char *)&self->_tableFlags + 5) & 0x10) != 0) {
    int64_t v14 = [(UITableView *)self _accessoryTypeForCell:v25 forRowAtIndexPath:v13];
  }
  else {
    int64_t v14 = 0;
  }
  BOOL v15 = [(UITableView *)self _canEditRowAtIndexPath:v13];
  BOOL v16 = v15;
  uint64_t v17 = *((void *)&self->_tableFlags + 3);
  if (v10)
  {
    if (v15)
    {
      int64_t v18 = [(UITableView *)self _editingStyleForRowAtIndexPath:v13];
      BOOL v19 = [(UITableView *)self _shouldIndentWhileEditingForRowAtIndexPath:v13];
LABEL_10:
      BOOL v20 = [(UITableView *)self _canReorderRowAtIndexPath:v13];
      goto LABEL_13;
    }
    int64_t v18 = 0;
    BOOL v19 = 0;
  }
  else
  {
    BOOL v19 = 0;
    int64_t v18 = 0;
    if (v17) {
      goto LABEL_10;
    }
  }
  BOOL v20 = v17 & 1;
LABEL_13:
  BYTE1(v24) = a7;
  LOBYTE(v24) = a6;
  LOBYTE(v23) = v20;
  -[UITableView _setupCell:forEditing:atIndexPath:canEdit:editingStyle:shouldIndentWhileEditing:showsReorderControl:accessoryType:animated:updateSeparators:](self, "_setupCell:forEditing:atIndexPath:canEdit:editingStyle:shouldIndentWhileEditing:showsReorderControl:accessoryType:animated:updateSeparators:", v25, v10, v13, v16, v18, v19, v23, v14, v24);
}

- (BOOL)_canEditRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    if ((*((unsigned char *)&self->_tableFlags + 1) & 4) != 0)
    {
      uint64_t v6 = [(UITableView *)self _dataSourceProxy];
      char v5 = [v6 tableView:self canEditRowAtIndexPath:v4];
    }
    else
    {
      char v5 = 1;
    }
  }
  else
  {
    char v5 = 0;
  }

  return v5;
}

uint64_t __96__UITableView__sectionHeaderView_withFrame_forSection_floating_reuseViewIfPossible_willDisplay___block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 3072);
  if (*(unsigned char *)(a1 + 96))
  {
    if ((v2 & 0x10000000000) == 0)
    {
LABEL_3:
      char v3 = 0;
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x20000000000) == 0)
  {
    goto LABEL_3;
  }
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableView", &qword_1E8FDF438);
  char v5 = *(id *)(CategoryCachedImpl + 8);
  if (os_signpost_id_make_with_pointer(*(os_log_t *)(CategoryCachedImpl + 8), *(const void **)(a1 + 32)) - 1 <= 0xFFFFFFFFFFFFFFFDLL
    && os_signpost_enabled(v5))
  {
    _os_signpost_emit_unreliably_with_name_impl();
  }

  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  if (*(unsigned char *)(a1 + 96)) {
    [v6 _delegateViewForHeaderInSection:v7];
  }
  else {
  unint64_t v8 = [v6 _delegateViewForFooterInSection:v7];
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v8);

  unint64_t v9 = __UILogGetCategoryCachedImpl("TableView", &qword_1E8FDF440);
  BOOL v10 = *(id *)(v9 + 8);
  if (os_signpost_id_make_with_pointer(*(os_log_t *)(v9 + 8), *(const void **)(a1 + 32)) - 1 <= 0xFFFFFFFFFFFFFFFDLL
    && os_signpost_enabled(v10))
  {
    LOWORD(v45) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
  }

  uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v11)
  {
    int IsKindOfUITableViewHeaderFooterView = _IsKindOfUITableViewHeaderFooterView(v11);
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    if (IsKindOfUITableViewHeaderFooterView)
    {
      id v13 = *(void **)(a1 + 32);
      if (*(unsigned char *)(a1 + 96)) {
        uint64_t v14 = 2;
      }
      else {
        uint64_t v14 = 3;
      }
      id v15 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      [v13 _ensureReturnedView:v15 isNotContainedInReusePoolForViewType:v14];
      [*(id *)(a1 + 32) _setupSectionView:v15 isHeader:*(unsigned __int8 *)(a1 + 96) forSection:*(void *)(a1 + 48)];
    }
    char v3 = 1;
  }
  else
  {
    char v3 = 0;
    *(void *)(*(void *)(a1 + 32) + 3096) |= 0x400000000000uLL;
  }
LABEL_22:
  BOOL v16 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (!v16 || _IsKindOfUITableViewHeaderFooterView(v16))
  {
    uint64_t v17 = *(void **)(a1 + 32);
    uint64_t v18 = v17[384];
    uint64_t v19 = v17[385] >> 45;
    if (*(unsigned char *)(a1 + 96))
    {
      if ((v18 & 8) == 0) {
        goto LABEL_32;
      }
      BOOL v20 = [v17 _dataSourceProxy];
      uint64_t v21 = [v20 tableView:*(void *)(a1 + 32) titleForHeaderInSection:*(void *)(a1 + 48)];
    }
    else
    {
      if ((v18 & 0x10) == 0) {
        goto LABEL_32;
      }
      BOOL v20 = [v17 _dataSourceProxy];
      uint64_t v21 = [v20 tableView:*(void *)(a1 + 32) titleForFooterInSection:*(void *)(a1 + 48)];
    }
    double v22 = (void *)v21;

    if (v22)
    {
      uint64_t v23 = *(void *)(a1 + 40);
      goto LABEL_36;
    }
    *(void *)(*(void *)(a1 + 32) + 3096) |= 0x400000000000uLL;
    uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 3080) >> 45;
LABEL_32:
    unint64_t v24 = (v19 & 3) - 1;
    uint64_t v23 = *(void *)(a1 + 40);
    if (v24 > 1)
    {
      double v22 = 0;
    }
    else
    {
      double v22 = 0;
      id v25 = 0;
      if (!*(void *)(*(void *)(v23 + 8) + 40))
      {
LABEL_51:
        [v25 setAlpha:1.0];

        goto LABEL_52;
      }
    }
LABEL_36:
    id v26 = *(id *)(*(void *)(v23 + 8) + 40);
    if (v26
      || *(unsigned char *)(a1 + 97)
      && ([*(id *)(a1 + 32) _popReusableHeaderView:*(unsigned __int8 *)(a1 + 96)],
          (id v26 = (id)objc_claimAutoreleasedReturnValue()) != 0))
    {
      objc_msgSend(v26, "setFrame:", *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88));
      uint64_t v27 = *(void *)(*(void *)(a1 + 32) + 2072);
      uint64_t v28 = *(void *)(a1 + 48);
      if (*(unsigned char *)(a1 + 96)) {
        double v29 = -[UITableViewRowData maxHeaderTitleWidthForSection:](v27, v28);
      }
      else {
        double v29 = -[UITableViewRowData maxFooterTitleWidthForSection:](v27, v28);
      }
      [v26 setMaxTitleWidth:v29];
    }
    else
    {
      id v26 = (id)objc_msgSend(*(id *)(a1 + 32), "_newSectionViewWithFrame:forSection:isHeader:", *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 96), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88));
    }
    uint64_t v30 = *(void *)(a1 + 32);
    if ((*(unsigned char *)(v30 + 3072) & 0x20) != 0)
    {
      long long v32 = [(id)v30 _dataSourceProxy];
      long long v31 = [v32 tableView:*(void *)(a1 + 32) detailTextForHeaderInSection:*(void *)(a1 + 48)];

      uint64_t v30 = *(void *)(a1 + 32);
    }
    else
    {
      long long v31 = 0;
    }
    uint64_t v33 = *(void *)(v30 + 2072);
    uint64_t v34 = *(void *)(a1 + 48);
    if (*(unsigned char *)(a1 + 96)) {
      uint64_t v35 = -[UITableViewRowData headerAlignmentForSection:](v33, v34);
    }
    else {
      uint64_t v35 = -[UITableViewRowData footerAlignmentForSection:](v33, v34);
    }
    LOBYTE(v44) = v3;
    objc_msgSend(*(id *)(a1 + 32), "_configureTableHeaderFooterView:forHeader:section:floating:withTitle:detailText:textAlignment:fromClient:", v26, *(unsigned __int8 *)(a1 + 96), *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 98), v22, v31, v35, v44, v45);
    uint64_t v36 = *(void *)(*(void *)(a1 + 40) + 8);
    long long v37 = *(void **)(v36 + 40);
    *(void *)(v36 + 40) = v26;

    id v25 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    goto LABEL_51;
  }
LABEL_52:
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setAutoresizingMask:2];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setNeedsDisplayOnBoundsChange:1];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) _setHiddenForReuse:0];
  uint64_t v38 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (v38)
  {
    uint64_t v39 = *(void *)(a1 + 32);
    if ((*(unsigned char *)(v39 + 3096) & 0x10) != 0)
    {
      if (*(unsigned char *)(a1 + 96)) {
        uint64_t v40 = 2904;
      }
      else {
        uint64_t v40 = 2912;
      }
      double v41 = *(void **)(v39 + v40);
      uint64_t v42 = [NSNumber numberWithInteger:*(void *)(a1 + 48)];
      [v41 setObject:v38 forKey:v42];
    }
  }
  uint64_t result = objc_opt_respondsToSelector();
  if (result) {
    return objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "setEditing:animated:", objc_msgSend(*(id *)(a1 + 32), "isEditing"), 0);
  }
  return result;
}

- (id)_dataSourceProxy
{
  if ([(_UITableViewShadowUpdatesController *)self->_shadowUpdatesController hasShadowUpdates]) {
    WeakRetained = self->_shadowUpdatesController;
  }
  else {
    WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained((id *)&self->_dataSource);
  }
  return WeakRetained;
}

- (id)_delegateViewForFooterInSection:(int64_t)a3
{
  p_tableFlags = &self->_tableFlags;
  unint64_t v6 = *((void *)&self->_tableFlags + 2);
  *((void *)&self->_tableFlags + 2) = v6 | 0x200;
  uint64_t v7 = [(UITableView *)self _delegateProxy];
  unint64_t v8 = [v7 tableView:self viewForFooterInSection:a3];

  *((void *)p_tableFlags + 2) = *((void *)p_tableFlags + 2) & 0xFFFFFFFFFFFFFDFFLL | (((v6 >> 9) & 1) << 9);
  if (v8
    && dyld_program_sdk_at_least()
    && [v8 translatesAutoresizingMaskIntoConstraints])
  {
    [v8 _setHostsLayoutEngine:1];
  }
  return v8;
}

- (id)_delegateViewForHeaderInSection:(int64_t)a3
{
  p_tableFlags = &self->_tableFlags;
  unint64_t v6 = *((void *)&self->_tableFlags + 2);
  *((void *)&self->_tableFlags + 2) = v6 & 0xFFFFFFFFFFFFFDFFLL;
  uint64_t v7 = [(UITableView *)self _delegateProxy];
  unint64_t v8 = [v7 tableView:self viewForHeaderInSection:a3];

  *((void *)p_tableFlags + 2) = *((void *)p_tableFlags + 2) & 0xFFFFFFFFFFFFFDFFLL | (((v6 >> 9) & 1) << 9);
  if (v8
    && dyld_program_sdk_at_least()
    && [v8 translatesAutoresizingMaskIntoConstraints])
  {
    [v8 _setHostsLayoutEngine:1];
  }
  return v8;
}

- (double)_classicHeightForRowAtIndexPath:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (*((unsigned char *)&self->_tableFlags + 4))
  {
    uint64_t v7 = [(UITableView *)self _delegateProxy];
    [v7 tableView:self heightForRowAtIndexPath:v5];
    double rowHeight = v8;

    int v9 = dyld_program_sdk_at_least();
    BOOL v10 = rowHeight < 0.0;
    if (rowHeight == -1.0) {
      BOOL v10 = 0;
    }
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
        [v11 handleFailureInMethod:a2, self, @"UITableView.m", 18552, @"Invalid row height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", *(void *)&rowHeight object file lineNumber description];
      }
    }
    else if (v10)
    {
      id v13 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_classicHeightForRowAtIndexPath____s_category) + 8);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        double v15 = rowHeight;
        _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "Invalid row height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
      }
    }
  }
  else
  {
    double rowHeight = self->_rowHeight;
    if (rowHeight == -1.0 && (*((unsigned char *)&self->_tableFlags + 24) & 0x10) == 0) {
      double rowHeight = 44.0;
    }
  }

  return rowHeight;
}

- (double)_estimatedHeightForRowAtIndexPath:(id)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if ((*((unsigned char *)&self->_tableFlags + 4) & 0x20) != 0)
  {
    double v8 = [(UITableView *)self _delegateProxy];
    [v8 tableView:self estimatedHeightForRowAtIndexPath:v5];
    double estimatedRowHeight = v9;

    int v10 = dyld_program_sdk_at_least();
    BOOL v11 = estimatedRowHeight < 0.0;
    if (estimatedRowHeight == -1.0) {
      BOOL v11 = 0;
    }
    if (v10)
    {
      if (v11)
      {
        uint64_t v12 = [MEMORY[0x1E4F28B00] currentHandler];
        [v12 handleFailureInMethod:a2, self, @"UITableView.m", 19681, @"Invalid estimated row height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", *(void *)&estimatedRowHeight object file lineNumber description];
      }
    }
    else if (v11)
    {
      double v15 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_estimatedHeightForRowAtIndexPath____s_category_0) + 8);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        double v17 = estimatedRowHeight;
        _os_log_impl(&dword_1853B0000, v15, OS_LOG_TYPE_ERROR, "Invalid estimated row height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
      }
    }
  }
  else
  {
    double estimatedRowHeight = self->_estimatedRowHeight;
    if (estimatedRowHeight == -1.0)
    {
      double estimatedRowHeight = -1.0;
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
        [(UITableConstants *)self->_constants defaultRowHeightForTableView:self];
        double estimatedRowHeight = v7;
      }
    }
  }
  if (estimatedRowHeight <= 1.0 && estimatedRowHeight > 0.0) {
    double estimatedRowHeight = 2.0;
  }

  return estimatedRowHeight;
}

- (id)_delegateProxy
{
  if ([(_UITableViewShadowUpdatesController *)self->_shadowUpdatesController hasShadowUpdates]) {
    WeakRetained = self->_shadowUpdatesController;
  }
  else {
    WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained(&self->super._delegate);
  }
  return WeakRetained;
}

- (BOOL)allowsMultipleSelectionDuringEditing
{
  return (*((unsigned __int8 *)&self->_tableFlags + 17) >> 5) & 1;
}

- (double)_sectionCornerRadius
{
  return self->_sectionCornerRadius;
}

- (void)tintColorDidChange
{
  v3.receiver = self;
  v3.super_class = (Class)UITableView;
  [(UIView *)&v3 tintColorDidChange];
  [(UITableView *)self _resetDarkenedSeparatorColor];
}

- (BOOL)allowsMultipleSelection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 17) >> 4) & 1;
}

- (UIEdgeInsets)_rawSeparatorInset
{
  double top = self->_separatorInset.top;
  double left = self->_separatorInset.left;
  double bottom = self->_separatorInset.bottom;
  double right = self->_separatorInset.right;
  result.double right = right;
  result.double bottom = bottom;
  result.double left = left;
  result.double top = top;
  return result;
}

- (void)setEstimatedRowHeight:(CGFloat)estimatedRowHeight
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v6 = dyld_program_sdk_at_least();
  BOOL v7 = estimatedRowHeight != -1.0 && estimatedRowHeight < 0.0;
  if (v6)
  {
    if (v7)
    {
      double v8 = [MEMORY[0x1E4F28B00] currentHandler];
      [v8 handleFailureInMethod:a2, self, @"UITableView.m", 6762, @"Invalid estimated row height set (%g). Value must be at least 0.0, or UITableViewAutomaticDimension.", *(void *)&estimatedRowHeight object file lineNumber description];
    }
  }
  else if (v7)
  {
    uint64_t v12 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &setEstimatedRowHeight____s_category) + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      CGFloat v14 = estimatedRowHeight;
      _os_log_impl(&dword_1853B0000, v12, OS_LOG_TYPE_ERROR, "Invalid estimated row height set (%g). Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
    }
  }
  BOOL v9 = [(UITableView *)self _estimatesRowHeights];
  BOOL v10 = estimatedRowHeight > 1.0 || estimatedRowHeight <= 0.0;
  CGFloat v11 = 2.0;
  if (v10) {
    CGFloat v11 = estimatedRowHeight;
  }
  self->_double estimatedRowHeight = v11;
  if (v9 != [(UITableView *)self _estimatesRowHeights]) {
    [(UITableView *)self _updateRowDataIfNeeded];
  }
}

uint64_t __48__UITableView__configureCellPrefetchingHandlers__block_invoke_3(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if ([a3 _isAnimating])
  {
    uint64_t v6 = 1;
  }
  else
  {
    unint64_t v7 = -[UITableViewRowData globalRowForRowAtIndexPath:](*(void *)(a1[4] + 2072), v5);
    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v6 = 0;
    }
    else
    {
      unint64_t v8 = a1[5];
      BOOL v10 = v7 >= v8;
      unint64_t v9 = v7 - v8;
      BOOL v10 = !v10 || v9 >= a1[6];
      uint64_t v6 = !v10;
    }
  }

  return v6;
}

- (id)_updateRowsAtIndexPaths:(id)a3 withUpdateAction:(int)a4 rowAnimation:(int64_t)a5 usingPresentationValues:(BOOL)a6
{
  uint64_t v8 = *(void *)&a4;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  if (!a6)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v12 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathsAfterShadowUpdates:v10 allowAppendingInsert:v8 == 0];

      id v10 = (id)v12;
    }
  }
  if ([(UITableView *)self _isPerformingShadowUpdates])
  {
    objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v10, "count"));
    id v23 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v23 = 0;
  }
  BOOL v21 = [(UITableView *)self _isUpdating];
  if (!v21) {
    [(UITableView *)self _setupCellAnimations];
  }
  id v13 = [(UITableView *)self _arrayForUpdateAction:v8];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  obuint64_t j = v10;
  uint64_t v14 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v25 != v16) {
          objc_enumerationMutation(obj);
        }
        uint64_t v18 = -[UIUpdateItem initWithAction:forIndexPath:animation:]((id *)[UIUpdateItem alloc], v8, *(void **)(*((void *)&v24 + 1) + 8 * i), (void *)a5);
        uint64_t v19 = [(UITableView *)self _addToShadowUpdatesControllerIfNeeded:v18];
        if (v19) {
          [v23 addObject:v19];
        }
        [v13 addObject:v18];
      }
      uint64_t v15 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
    }
    while (v15);
  }

  if (!v21) {
    [(UITableView *)self _endCellAnimationsWithContext:0];
  }

  return v23;
}

- (id)_addToShadowUpdatesControllerIfNeeded:(id)a3
{
  id v4 = a3;
  if ([(UITableView *)self _isPerformingShadowUpdates])
  {
    id v5 = [(UITableView *)self _shadowUpdatesController];
    uint64_t v6 = [v4 collectionViewUpdateItem];
    [v5 appendShadowUpdate:v6];
    if (v6) {
      unint64_t v7 = (void *)v6[11];
    }
    else {
      unint64_t v7 = 0;
    }
    id v8 = v7;
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

- (BOOL)_isPerformingShadowUpdates
{
  return (*((unsigned __int8 *)&self->_tableFlags + 27) >> 3) & 1;
}

- (id)_tableFooterView
{
  return self->_tableFooterView;
}

- (_NSRange)_visibleGlobalRows
{
  p_visibleRows = &self->_visibleRows;
  NSUInteger location = self->_visibleRows.location;
  NSUInteger length = p_visibleRows->length;
  result.NSUInteger length = length;
  result.NSUInteger location = location;
  return result;
}

id __46__UITableView__updateWithItems_updateSupport___block_invoke(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v4 = -[UITableViewRowData globalRowForRowAtIndexPath:](*(void *)(*(void *)(a1 + 32) + 72), a2);
    uint64_t v5 = -[_UITableViewUpdateSupport finalGlobalIndexForInitialGlobalIndex:](*(void *)(a1 + 32), v4);
    uint64_t v6 = -[UITableViewRowData indexPathForRowAtGlobalRow:](*(void **)(*(void *)(a1 + 40) + 2072), v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6;
}

- (double)_heightForRowAtIndexPath:(id)a3
{
  id v4 = a3;
  [(UITableView *)self _classicHeightForRowAtIndexPath:v4];
  double v6 = v5;
  if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0 && v5 == -1.0)
  {
    id v7 = [(UITableView *)self _existingCellForRowAtIndexPath:v4];
    if (!v7) {
      id v7 = [(UITableView *)self _createPreparedCellForRowAtIndexPath:v4 willDisplay:0];
    }
    [(UITableView *)self _heightForCell:v7 atIndexPath:v4];
    double v6 = v8;
  }
  else if (v5 == -1.0)
  {
    [(UITableConstants *)self->_constants defaultRowHeightForTableView:self];
    double v6 = v9;
  }

  return v6;
}

- (double)_heightForCell:(id)a3 atIndexPath:(id)a4
{
  if (([a3 _needsSetup] & 1) != 0
    || ([a3 _needsHeightCalculation] & 1) != 0
    || ([a3 needsUpdateConstraints] & 1) != 0
    || a3 && ([*((id *)a3 + 20) needsLayout] & 1) != 0)
  {
    [(UITableView *)self _classicHeightForRowAtIndexPath:a4];
    double rowHeight = v7;
    if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0 && v7 == -1.0)
    {
      if (!dyld_program_sdk_at_least()
        || (double rowHeight = -1.0, [(UITableView *)self _estimatesRowHeights]))
      {
        double v9 = -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:]((uint64_t)self->_rowData, [a4 row], objc_msgSend(a4, "section"), 1);
        CGFloat v11 = v10;
        CGFloat v13 = v12;
        CGFloat v15 = v14;
        [(UITableView *)self _prepareToSizeView:a3];
        v32.origin.CGFloat x = v9;
        v32.origin.CGFloat y = v11;
        v32.size.CGFloat width = v13;
        v32.size.CGFloat height = v15;
        CGFloat Width = CGRectGetWidth(v32);
        LODWORD(v17) = 1148846080;
        LODWORD(v18) = 1112014848;
        objc_msgSend(a3, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", Width, 0.0, v17, v18);
        double rowHeight = v19;
        if (v19 <= 0.0) {
          double rowHeight = self->_rowHeight;
        }
        intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
        if (intrinsicContentSizeInvalidationContext) {
          [(UICollectionViewLayoutInvalidationContext *)intrinsicContentSizeInvalidationContext _removeInvalidatedItemIndexPath:a4];
        }
      }
    }
    BOOL v21 = [a3 _detailTextLabel:0];
    double v22 = [v21 text];
    uint64_t v23 = [v22 length];

    if (rowHeight == -1.0)
    {
      constants = self->_constants;
      uint64_t v25 = [a3 style];
      [(UITableConstants *)constants defaultRowHeightForTableView:self cellStyle:v25 hasDetailText:v23 != 0];
    }
    else
    {
      return rowHeight;
    }
  }
  else
  {
    [a3 frame];
    return CGRectGetHeight(*(CGRect *)&v27);
  }
  return result;
}

- (BOOL)_estimatesRowHeights
{
  uint64_t v2 = self;
  double estimatedRowHeight = self->_estimatedRowHeight;
  LOBYTE(self) = 1;
  if (estimatedRowHeight != -1.0 && estimatedRowHeight <= 0.0) {
    LODWORD(self) = (*((unsigned __int8 *)&v2->_tableFlags + 4) >> 5) & 1;
  }
  return (char)self;
}

- (id)_existingCellForRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    if ([(UITableView *)self _hasFocusedCellForIndexPath:v4])
    {
      double v5 = [(UITableView *)self _focusedCell];
LABEL_4:
      double v6 = v5;
      goto LABEL_17;
    }
    if (self->_firstResponderIndexPath
      && self->_firstResponderViewType == 1
      && objc_msgSend(v4, "isEqual:"))
    {
      double v5 = self->_firstResponderView;
      goto LABEL_4;
    }
    unint64_t v7 = [(UITableView *)self _visibleGlobalRowForRowAtIndexPathAdjustedForCurrentUpdate:v4];
    NSUInteger location = self->_visibleRows.location;
    NSUInteger v9 = v7 - location;
    BOOL v10 = v7 < location || v9 >= self->_visibleRows.length;
    if (!v10 && v9 < [(NSMutableArray *)self->_visibleCells count])
    {
      double v5 = [(NSMutableArray *)self->_visibleCells objectAtIndex:v9];
      goto LABEL_4;
    }
    double v6 = -[_UITableViewSubviewManager prefetchedCellAtIndexPath:]((id *)&self->_subviewManager->super.isa, (uint64_t)v4);
    if (!v6)
    {
      double v5 = [(NSMutableDictionary *)self->_tentativeCells objectForKeyedSubscript:v4];
      goto LABEL_4;
    }
  }
  else
  {
    double v6 = 0;
  }
LABEL_17:

  return v6;
}

- (BOOL)_hasFocusedCellForIndexPath:(id)a3
{
  id v4 = a3;
  double v5 = v4;
  if (self->_focusedCell && self->_focusedCellIndexPath && self->_focusedViewType == 1) {
    char v6 = objc_msgSend(v4, "isEqual:");
  }
  else {
    char v6 = 0;
  }

  return v6;
}

- (int64_t)_visibleGlobalRowForRowAtIndexPathAdjustedForCurrentUpdate:(id)a3
{
  int64_t v4 = [(UITableView *)self globalRowForRowAtIndexPath:a3];
  currentUpdate = self->_currentUpdate;
  if (!currentUpdate) {
    return v4;
  }
  return -[_UITableViewUpdateSupport initialGlobalIndexForFinalGlobalIndex:]((uint64_t)currentUpdate, v4);
}

- (int64_t)globalRowForRowAtIndexPath:(id)a3
{
  return -[UITableViewRowData globalRowForRowAtIndexPath:]((uint64_t)self->_rowData, a3);
}

- (BOOL)_isEditingRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) != 0)
  {
    uint64_t v6 = *((void *)&self->_tableFlags + 2);
    if ((v6 & 0x100000000000) == 0)
    {
      BOOL v5 = 1;
      goto LABEL_10;
    }
    swipedIndexPath = self->_swipedIndexPath;
    if (!swipedIndexPath
      || [(NSIndexPath *)swipedIndexPath isEqual:v4]
      && (*((unsigned char *)&self->_tableFlags + 14) & 0x80) == 0
      && (uint64_t v6 = *((void *)&self->_tableFlags + 2), (v6 & 0x40000000000) == 0))
    {
      BOOL v5 = (v6 & 0x800000000000) == 0;
      goto LABEL_10;
    }
  }
  BOOL v5 = 0;
LABEL_10:

  return v5;
}

- (id)_visibleCellForGlobalRow:(int64_t)a3
{
  int64_t v3 = a3 - self->_visibleRows.location;
  if (v3 < 0 || v3 >= (unint64_t)[(NSMutableArray *)self->_visibleCells count])
  {
    BOOL v5 = 0;
  }
  else
  {
    BOOL v5 = [(NSMutableArray *)self->_visibleCells objectAtIndex:v3];
  }
  return v5;
}

- (UITableViewCell)_swipeToDeleteCell
{
  return self->_swipeToDeleteCell;
}

- (BOOL)_shouldUseNewHeaderFooterBehavior
{
  return (*((unsigned char *)&self->_tableFlags + 7) & 0xC0) != 0;
}

- (id)_tableHeaderView
{
  return self->_tableHeaderView;
}

- (void)_coalesceContentSizeUpdateWithDelta:(double)a3
{
  self->_coalescedContentSizeDelta = self->_coalescedContentSizeDelta + a3;
  if (a3 != 0.0) {
    [(UIScrollView *)self setNeedsLayout];
  }
}

- (double)_sectionHeaderToFirstRowPadding
{
  double result = self->_sectionHeaderFooterPadding;
  if (result <= 0.0) {
    [(UITableConstants *)self->_constants defaultPaddingBetweenHeaderAndRows];
  }
  return result;
}

- (id)_createPreparedCellForRowAtIndexPath:(id)a3 willDisplay:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  id v7 = [(UITableView *)self _createPreparedCellForGlobalRow:[(UITableView *)self globalRowForRowAtIndexPath:v6] withIndexPath:v6 willDisplay:v4];

  return v7;
}

- (void)_reusePrefetchedCell:(id)a3 withIndexPath:(id)a4
{
  if ((-[NSMutableArray containsObject:](self->_visibleCells, "containsObject:") & 1) == 0)
  {
    [(UITableView *)self _reuseTableViewCell:a3 withIndexPath:a4 didEndDisplaying:0];
  }
}

- (BOOL)_isTableHeaderViewHidden
{
  return (~*((_DWORD *)&self->_tableFlags + 4) & 0x30000000) == 0;
}

- (void)_updateForChangedEdgesConvertingSafeAreaToContentInsetWithOldSystemContentInset:(UIEdgeInsets)a3 oldEdgesPropagatingSafeAreaInsets:(unint64_t)a4 adjustContentOffsetIfNecessary:(BOOL)a5
{
  unsigned __int8 v5 = a4;
  v7.receiver = self;
  v7.super_class = (Class)UITableView;
  -[UIScrollView _updateForChangedEdgesConvertingSafeAreaToContentInsetWithOldSystemContentInset:oldEdgesPropagatingSafeAreaInsets:adjustContentOffsetIfNecessary:](&v7, sel__updateForChangedEdgesConvertingSafeAreaToContentInsetWithOldSystemContentInset_oldEdgesPropagatingSafeAreaInsets_adjustContentOffsetIfNecessary_, a4, a5, a3.top, a3.left, a3.bottom, a3.right);
  if ((([(UIScrollView *)self _edgesPropagatingSafeAreaInsetsToSubviews] ^ v5) & 5) != 0)
  {
    if (dyld_program_sdk_at_least()) {
      [(UITableView *)self _setNeedsRebuildGeometry];
    }
  }
}

- (void)_sendGeometryAffectingContentBottomChangedToScrollObservers
{
  if ((*((unsigned char *)&self->_tableFlags + 28) & 1) == 0)
  {
    v2.receiver = self;
    v2.super_class = (Class)UITableView;
    [(UIScrollView *)&v2 _sendGeometryAffectingContentBottomChangedToScrollObservers];
  }
}

- (BOOL)_highlightFirstVisibleRowIfAppropriate
{
  return 0;
}

- (void)flashScrollIndicators
{
  [(UITableView *)self _updateShowScrollIndicatorsFlag];
  v3.receiver = self;
  v3.super_class = (Class)UITableView;
  [(UIScrollView *)&v3 flashScrollIndicators];
}

uint64_t __29__UITableView__preparedCells__block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

- (void)_prepareToSizeView:(id)a3
{
  id v4 = a3;
  [v4 updateTraitsIfNeeded];
  -[UIView _eagerlyUpdateSafeAreaInsetsToDescendant:](self, v4);
}

- (void)endUpdates
{
}

- (void)setEstimatedSectionHeaderHeight:(CGFloat)estimatedSectionHeaderHeight
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v6 = dyld_program_sdk_at_least();
  BOOL v7 = estimatedSectionHeaderHeight != -1.0 && estimatedSectionHeaderHeight < 0.0;
  if (v6)
  {
    if (v7)
    {
      double v8 = [MEMORY[0x1E4F28B00] currentHandler];
      [v8 handleFailureInMethod:a2, self, @"UITableView.m", 6772, @"Invalid estimated section header height set (%g). Value must be at least 0.0, or UITableViewAutomaticDimension.", *(void *)&estimatedSectionHeaderHeight object file lineNumber description];
    }
  }
  else if (v7)
  {
    double v12 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &setEstimatedSectionHeaderHeight____s_category) + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      CGFloat v14 = estimatedSectionHeaderHeight;
      _os_log_impl(&dword_1853B0000, v12, OS_LOG_TYPE_ERROR, "Invalid estimated section header height set (%g). Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
    }
  }
  BOOL v9 = [(UITableView *)self _estimatesSectionHeaderHeights];
  BOOL v10 = estimatedSectionHeaderHeight > 1.0 || estimatedSectionHeaderHeight <= 0.0;
  CGFloat v11 = 2.0;
  if (v10) {
    CGFloat v11 = estimatedSectionHeaderHeight;
  }
  self->_estimatedSectionHeaderHeight = v11;
  if (v9 != [(UITableView *)self _estimatesSectionHeaderHeights]) {
    [(UITableView *)self _updateRowDataIfNeeded];
  }
}

uint64_t __29__UITableView__updateRowData__block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) rowHeight];
  objc_super v2 = *(void **)(a1 + 32);
  return objc_msgSend(v2, "setRowHeight:");
}

- (void)_addContentSubview:(id)a3 atBack:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v7 = (UITableViewWrapperView *)a3;
  double v8 = v7;
  if (v7)
  {
    int IsKindOfUITableViewCell = _IsKindOfUITableViewCell(v7);
    char v10 = IsKindOfUITableViewCell;
    if (!IsKindOfUITableViewCell
      || ([(UITableViewWrapperView *)v8 _containerView],
          CGFloat v11 = objc_claimAutoreleasedReturnValue(),
          v11,
          !v11))
    {
      p_viewBeingPreparedToDisplaCGFloat y = &self->_viewBeingPreparedToDisplay;
      CGFloat v13 = self->_viewBeingPreparedToDisplay;
      objc_storeStrong((id *)&self->_viewBeingPreparedToDisplay, a3);
      reorderingSupport = self->_reorderingSupport;
      if (reorderingSupport) {
        reorderingSupport = (_UITableViewReorderingSupport *)reorderingSupport->_reorderedCell;
      }
      uint64_t v15 = reorderingSupport;
      if ((*((unsigned char *)&self->_tableFlags + 22) & 0x40) != 0
        && ((v10 & 1) != 0
         || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
         || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)))
      {
        if (v4)
        {
          wrapperView = self->_wrapperView;
          double v17 = [(UITableViewWrapperView *)wrapperView stuckToBackViews];
          -[UIView insertSubview:atIndex:](wrapperView, "insertSubview:atIndex:", v8, [v17 count]);
        }
        else
        {
          double v18 = self->_wrapperView;
          if (v15) {
            [(UIView *)v18 insertSubview:v8 below:v15];
          }
          else {
            [(UIView *)v18 addSubview:v8];
          }
        }
      }
      else
      {
        v22.receiver = self;
        v22.super_class = (Class)UITableView;
        [(UIScrollView *)&v22 _addContentSubview:v8 atBack:v4];
        if (v15)
        {
          if ((*((unsigned char *)&self->_tableFlags + 22) & 0x40) != 0)
          {
            [(UITableViewWrapperView *)self->_wrapperView bringSubviewToFront:v15];
          }
          else
          {
            v21.receiver = self;
            v21.super_class = (Class)UITableView;
            [(UIScrollView *)&v21 _addContentSubview:v15 atBack:0];
          }
        }
      }
      if (self->_wrapperView != v8) {
        *((void *)&self->_tableFlags + 2) |= 0x80000000000000uLL;
      }
      double v19 = *p_viewBeingPreparedToDisplay;
      *p_viewBeingPreparedToDisplaCGFloat y = v13;
      BOOL v20 = v13;
    }
  }
}

- (UITableConstants)_constants
{
  return self->_constants;
}

- (UIEdgeInsets)_sectionFooterContentInsets
{
  if ([(UITableView *)self _supplementariesFollowSectionContentInsets])
  {
    [(UITableView *)self _sectionContentInset];
  }
  else
  {
    [(UITableView *)self _tableContentInset];
  }
  result.double right = v6;
  result.double bottom = v5;
  result.double left = v4;
  result.double top = v3;
  return result;
}

- (UIEdgeInsets)_sectionHeaderContentInsets
{
  if ([(UITableView *)self _supplementarySectionHeadersHugContent]
    || [(UITableView *)self _supplementariesFollowSectionContentInsets])
  {
    [(UITableView *)self _sectionContentInset];
  }
  else
  {
    [(UITableView *)self _tableContentInset];
  }
  result.double right = v6;
  result.double bottom = v5;
  result.double left = v4;
  result.double top = v3;
  return result;
}

- (BOOL)_supplementarySectionHeadersHugContent
{
  return self->_contentHuggingElements & 1;
}

- (BOOL)_supplementariesFollowSectionContentInsets
{
  double v3 = [(UIView *)self traitCollection];
  BOOL v4 = [v3 userInterfaceIdiom] == 6 && -[UITableView style](self, "style") == UITableViewStylePlain;

  return v4;
}

- (BOOL)_delegateWantsHeaderForSection:(int64_t)a3
{
  double sectionHeaderHeight = self->_sectionHeaderHeight;
  BOOL v6 = [(UITableView *)self _shouldShowHeadersAndFooters];
  if (!v6) {
    return v6;
  }
  if (*((unsigned char *)&self->_tableFlags + 7))
  {
    uint64_t v15 = [(UITableView *)self _delegateProxy];
    char v16 = [v15 tableView:self wantsHeaderForSection:a3];

    LOBYTE(v6) = v16;
    return v6;
  }
  BOOL v7 = [(UITableView *)self _estimatesSectionHeaderHeights];
  if (sectionHeaderHeight != -1.0 || !v7)
  {
    if ((*((unsigned char *)&self->_tableFlags + 4) & 2) == 0) {
      goto LABEL_22;
    }
    BOOL v9 = v7;
    char v10 = [(UITableView *)self _delegateProxy];
    [v10 tableView:self heightForHeaderInSection:a3];
    double sectionHeaderHeight = v11;

    if (sectionHeaderHeight != -1.0 || !v9) {
      goto LABEL_18;
    }
  }
  [(UITableView *)self _estimatedHeightForHeaderInSection:a3];
  double v14 = v13;
  if (v13 != -1.0
    || (double sectionHeaderHeight = 2.0, (*((unsigned char *)&self->_tableFlags + 4) & 0x40) != 0)
    && (dyld_program_sdk_at_least() & 1) == 0)
  {
    double sectionHeaderHeight = v14;
  }
  if (self->_estimatedSectionHeaderHeight != -1.0)
  {
LABEL_18:
    if (sectionHeaderHeight != -1.0)
    {
      LOBYTE(v6) = sectionHeaderHeight > 0.0;
      return v6;
    }
    goto LABEL_24;
  }
LABEL_22:
  if (sectionHeaderHeight > 0.0 && (*((unsigned char *)&self->_tableFlags + 5) & 1) != 0)
  {
    LOBYTE(v6) = 1;
    return v6;
  }
LABEL_24:
  LOBYTE(v6) = [(UITableView *)self _delegateWantsHeaderTitleForSection:a3];
  return v6;
}

- (BOOL)_estimatesSectionHeaderHeights
{
  objc_super v2 = self;
  double estimatedSectionHeaderHeight = self->_estimatedSectionHeaderHeight;
  LOBYTE(self) = 1;
  if (estimatedSectionHeaderHeight != -1.0 && estimatedSectionHeaderHeight <= 0.0) {
    LODWORD(self) = (*((unsigned __int8 *)&v2->_tableFlags + 4) >> 6) & 1;
  }
  return (char)self;
}

- (double)_estimatedHeightForHeaderInSection:(int64_t)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)&self->_tableFlags + 4) & 0x40) != 0)
  {
    double v8 = [(UITableView *)self _delegateProxy];
    [v8 tableView:self estimatedHeightForHeaderInSection:a3];
    double estimatedSectionHeaderHeight = v9;

    int v10 = dyld_program_sdk_at_least();
    BOOL v11 = estimatedSectionHeaderHeight < 0.0;
    if (estimatedSectionHeaderHeight == -1.0) {
      BOOL v11 = 0;
    }
    if (v10)
    {
      if (v11)
      {
        double v12 = [MEMORY[0x1E4F28B00] currentHandler];
        [v12 handleFailureInMethod:a2, self, @"UITableView.m", 19698, @"Invalid estimated section header height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", *(void *)&estimatedSectionHeaderHeight object file lineNumber description];
      }
    }
    else if (v11)
    {
      uint64_t v15 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_estimatedHeightForHeaderInSection____s_category_0)
                         + 8);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        double v17 = estimatedSectionHeaderHeight;
        _os_log_impl(&dword_1853B0000, v15, OS_LOG_TYPE_ERROR, "Invalid estimated section header height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
      }
    }
  }
  else
  {
    double estimatedSectionHeaderHeight = self->_estimatedSectionHeaderHeight;
    if (estimatedSectionHeaderHeight == -1.0)
    {
      double estimatedSectionHeaderHeight = -1.0;
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
        [(UITableConstants *)self->_constants defaultSectionHeaderHeightForTableView:self];
        double estimatedSectionHeaderHeight = v5;
      }
    }
  }
  BOOL v13 = estimatedSectionHeaderHeight > 1.0 || estimatedSectionHeaderHeight <= 0.0;
  double result = 2.0;
  if (v13) {
    return estimatedSectionHeaderHeight;
  }
  return result;
}

- (BOOL)_shouldShowHeadersAndFooters
{
  objc_super v2 = [(UIView *)self traitCollection];
  BOOL v3 = [v2 userInterfaceIdiom] != 3;

  return v3;
}

- (BOOL)_estimatesHeights
{
  if ([(UITableView *)self _estimatesRowHeights]
    || [(UITableView *)self _estimatesSectionHeaderHeights])
  {
    return 1;
  }
  return [(UITableView *)self _estimatesSectionFooterHeights];
}

- (double)_defaultSectionFooterHeight
{
  [(UITableConstants *)self->_constants defaultSectionFooterHeightForTableView:self];
  double v4 = v3;
  [(UIView *)self _currentScreenScale];
  return UIPixelBoundaryOffset(0, v4, v5);
}

- (BOOL)_delegateWantsFooterForSection:(int64_t)a3
{
  double sectionFooterHeight = self->_sectionFooterHeight;
  BOOL v6 = [(UITableView *)self _estimatesSectionFooterHeights];
  if (sectionFooterHeight != -1.0 || !v6)
  {
    if ((*((unsigned char *)&self->_tableFlags + 4) & 8) == 0) {
      goto LABEL_21;
    }
    BOOL v8 = v6;
    double v9 = [(UITableView *)self _delegateProxy];
    [v9 tableView:self heightForFooterInSection:a3];
    double sectionFooterHeight = v10;

    if (sectionFooterHeight != -1.0 || !v8)
    {
LABEL_19:
      if (sectionFooterHeight != -1.0) {
        return sectionFooterHeight > 0.0;
      }
      goto LABEL_23;
    }
    [(UITableView *)self _estimatedHeightForFooterInSection:a3];
    double v13 = v12;
    if (v12 != -1.0) {
      goto LABEL_17;
    }
    p_tableFlags = &self->_tableFlags;
  }
  else
  {
    [(UITableView *)self _estimatedHeightForFooterInSection:a3];
    double v13 = v15;
    if (v15 != -1.0) {
      goto LABEL_17;
    }
    p_tableFlags = &self->_tableFlags;
  }
  double sectionFooterHeight = 2.0;
  if ((*((unsigned char *)p_tableFlags + 4) & 0x80) != 0 && (dyld_program_sdk_at_least() & 1) == 0) {
LABEL_17:
  }
    double sectionFooterHeight = v13;
  if (self->_estimatedSectionFooterHeight != -1.0) {
    goto LABEL_19;
  }
LABEL_21:
  if (sectionFooterHeight > 0.0 && (*((unsigned char *)&self->_tableFlags + 5) & 2) != 0) {
    return 1;
  }
LABEL_23:
  return [(UITableView *)self _delegateWantsFooterTitleForSection:a3];
}

- (BOOL)_estimatesSectionFooterHeights
{
  objc_super v2 = self;
  double estimatedSectionFooterHeight = self->_estimatedSectionFooterHeight;
  LOBYTE(self) = 1;
  if (estimatedSectionFooterHeight != -1.0 && estimatedSectionFooterHeight <= 0.0) {
    LODWORD(self) = *((unsigned __int8 *)&v2->_tableFlags + 4) >> 7;
  }
  return (char)self;
}

- (double)_estimatedHeightForFooterInSection:(int64_t)a3
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)&self->_tableFlags + 4) & 0x80) != 0)
  {
    BOOL v8 = [(UITableView *)self _delegateProxy];
    [v8 tableView:self estimatedHeightForFooterInSection:a3];
    double estimatedSectionFooterHeight = v9;

    int v10 = dyld_program_sdk_at_least();
    BOOL v11 = estimatedSectionFooterHeight < 0.0;
    if (estimatedSectionFooterHeight == -1.0) {
      BOOL v11 = 0;
    }
    if (v10)
    {
      if (v11)
      {
        double v12 = [MEMORY[0x1E4F28B00] currentHandler];
        [v12 handleFailureInMethod:a2, self, @"UITableView.m", 19715, @"Invalid estimated section footer height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", *(void *)&estimatedSectionFooterHeight object file lineNumber description];
      }
    }
    else if (v11)
    {
      double v15 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_estimatedHeightForFooterInSection____s_category_0)
                         + 8);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        double v17 = estimatedSectionFooterHeight;
        _os_log_impl(&dword_1853B0000, v15, OS_LOG_TYPE_ERROR, "Invalid estimated section footer height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
      }
    }
  }
  else
  {
    double estimatedSectionFooterHeight = self->_estimatedSectionFooterHeight;
    if (estimatedSectionFooterHeight == -1.0)
    {
      double estimatedSectionFooterHeight = -1.0;
      if ((dyld_program_sdk_at_least() & 1) == 0)
      {
        [(UITableConstants *)self->_constants defaultSectionFooterHeightForTableView:self];
        double estimatedSectionFooterHeight = v5;
      }
    }
  }
  BOOL v13 = estimatedSectionFooterHeight > 1.0 || estimatedSectionFooterHeight <= 0.0;
  double result = 2.0;
  if (v13) {
    return estimatedSectionFooterHeight;
  }
  return result;
}

- (double)_defaultSectionHeaderHeight
{
  [(UITableConstants *)self->_constants defaultSectionHeaderHeightForTableView:self];
  double v4 = v3;
  [(UIView *)self _currentScreenScale];
  return UIPixelBoundaryOffset(1, v4, v5);
}

- (CGFloat)rowHeight
{
  return self->_rowHeight;
}

- (BOOL)overlapsSectionHeaderViews
{
  return (*((unsigned __int8 *)&self->_tableFlags + 16) >> 5) & 1;
}

- (int64_t)_titleAlignmentForHeaderInSection:(int64_t)a3
{
  if ((*((unsigned char *)&self->_tableFlags + 7) & 4) == 0) {
    return 4;
  }
  BOOL v6 = [(UITableView *)self _delegateProxy];
  int64_t v7 = [v6 tableView:self titleAlignmentForHeaderInSection:a3];

  return v7;
}

- (double)_maxTitleWidthForHeaderInSection:(int64_t)a3
{
  double v3 = -1.0;
  if ((*((unsigned char *)&self->_tableFlags + 4) & 4) != 0)
  {
    BOOL v6 = [(UITableView *)self _delegateProxy];
    [v6 tableView:self maxTitleWidthForHeaderInSection:a3];
    double v3 = floor(v7);
  }
  double result = 1.79769313e308;
  if (v3 != -1.0) {
    return v3;
  }
  return result;
}

- (int64_t)_titleAlignmentForFooterInSection:(int64_t)a3
{
  if ((*((unsigned char *)&self->_tableFlags + 7) & 8) == 0) {
    return 4;
  }
  BOOL v6 = [(UITableView *)self _delegateProxy];
  int64_t v7 = [v6 tableView:self titleAlignmentForFooterInSection:a3];

  return v7;
}

- (double)_sectionFooterToLastRowPadding
{
  return self->_sectionHeaderFooterPadding;
}

- (double)_maxTitleWidthForFooterInSection:(int64_t)a3
{
  double v3 = -1.0;
  if ((*((unsigned char *)&self->_tableFlags + 4) & 0x10) != 0)
  {
    BOOL v6 = [(UITableView *)self _delegateProxy];
    [v6 tableView:self maxTitleWidthForFooterInSection:a3];
    double v3 = floor(v7);
  }
  double result = 1.79769313e308;
  if (v3 != -1.0) {
    return v3;
  }
  return result;
}

- (id)_visibleHeaderViewForSection:(int64_t)a3
{
  visibleHeaderViews = self->_visibleHeaderViews;
  double v4 = [NSNumber numberWithInteger:a3];
  double v5 = [(NSMutableDictionary *)visibleHeaderViews objectForKey:v4];

  return v5;
}

- (id)_visibleFooterViewForSection:(int64_t)a3
{
  visibleFooterViews = self->_visibleFooterViews;
  double v4 = [NSNumber numberWithInteger:a3];
  double v5 = [(NSMutableDictionary *)visibleFooterViews objectForKey:v4];

  return v5;
}

- (double)_heightForFooterInSection:(int64_t)a3
{
  -[UITableView _classicHeightForFooterInSection:](self, "_classicHeightForFooterInSection:");
  if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0 && result == -1.0)
  {
    BOOL v6 = [(UITableView *)self _existingFooterViewForSection:a3];
    if (!v6)
    {
      tentativeFooterViews = self->_tentativeFooterViews;
      BOOL v8 = [NSNumber numberWithInteger:a3];
      BOOL v6 = [(NSMutableDictionary *)tentativeFooterViews objectForKey:v8];

      if (!v6)
      {
        BOOL v6 = -[UITableView _sectionFooterViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:](self, "_sectionFooterViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:", a3, 0, 1, 0, -[UITableViewRowData rectForFooterInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, a3, 1));
      }
    }
    [(UITableView *)self _heightForFooterView:v6 inSection:a3];
    double v10 = v9;

    return v10;
  }
  else if (result == -1.0)
  {
    [(UITableView *)self _defaultSectionFooterHeight];
  }
  return result;
}

- (id)_sectionFooterViewWithFrame:(CGRect)a3 forSection:(int64_t)a4 floating:(BOOL)a5 reuseViewIfPossible:(BOOL)a6 willDisplay:(BOOL)a7
{
  return -[UITableView _sectionHeaderView:withFrame:forSection:floating:reuseViewIfPossible:willDisplay:](self, "_sectionHeaderView:withFrame:forSection:floating:reuseViewIfPossible:willDisplay:", 0, a4, a5, a6, a7, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

- (double)_classicHeightForFooterInSection:(int64_t)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)&self->_tableFlags + 4) & 8) != 0)
  {
    BOOL v8 = [(UITableView *)self _delegateProxy];
    [v8 tableView:self heightForFooterInSection:a3];
    double sectionFooterHeight = v9;

    int v10 = dyld_program_sdk_at_least();
    BOOL v11 = sectionFooterHeight < 0.0;
    if (sectionFooterHeight == -1.0) {
      BOOL v11 = 0;
    }
    if (v10)
    {
      if (v11)
      {
        double v12 = [MEMORY[0x1E4F28B00] currentHandler];
        [v12 handleFailureInMethod:a2, self, @"UITableView.m", 18625, @"Invalid section footer height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", *(void *)&sectionFooterHeight object file lineNumber description];
      }
    }
    else if (v11)
    {
      BOOL v13 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_classicHeightForFooterInSection____s_category) + 8);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        double v15 = sectionFooterHeight;
        _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "Invalid section footer height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
      }
    }
    return sectionFooterHeight;
  }
  double sectionFooterHeight = self->_sectionFooterHeight;
  if (sectionFooterHeight != -1.0) {
    return sectionFooterHeight;
  }
  double sectionFooterHeight = -1.0;
  if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0) {
    return sectionFooterHeight;
  }
  [(UITableView *)self _defaultSectionFooterHeight];
  return result;
}

- (double)_paddingAboveSectionHeaders
{
  double result = self->_sectionHeaderTopPadding;
  if (result == -1.0) {
    [(UITableConstants *)self->_constants defaultPaddingAboveSectionHeadersForTableStyle:(*((void *)&self->_tableFlags + 1) >> 45) & 3];
  }
  return result;
}

- (void)_addSubview:(id)a3 positioned:(int64_t)a4 relativeTo:(id)a5
{
  id v8 = a5;
  double v9 = _UITableViewSubviewToMoveForView(a3);
  v10.receiver = self;
  v10.super_class = (Class)UITableView;
  [(UIView *)&v10 _addSubview:v9 positioned:a4 relativeTo:v8];
}

- (double)_paddingAboveFirstSectionHeader
{
  double result = self->_sectionHeaderTopPadding;
  if (result == -1.0) {
    [(UITableConstants *)self->_constants defaultPaddingAboveFirstSectionHeaderForTableStyle:(*((void *)&self->_tableFlags + 1) >> 45) & 3];
  }
  return result;
}

- (BOOL)_delegateWantsHeaderTitleForSection:(int64_t)a3
{
  if ((*(unsigned char *)&self->_tableFlags & 8) == 0)
  {
    double v3 = 0;
LABEL_6:
    BOOL v7 = 0;
    goto LABEL_7;
  }
  BOOL v6 = [(UITableView *)self _dataSourceProxy];
  double v3 = [v6 tableView:self titleForHeaderInSection:a3];

  if (!v3 || ![v3 length]) {
    goto LABEL_6;
  }
  BOOL v7 = 1;
LABEL_7:

  return v7;
}

- (BOOL)_delegateWantsFooterTitleForSection:(int64_t)a3
{
  if ((*(unsigned char *)&self->_tableFlags & 0x10) == 0)
  {
    double v3 = 0;
LABEL_6:
    BOOL v7 = 0;
    goto LABEL_7;
  }
  BOOL v6 = [(UITableView *)self _dataSourceProxy];
  double v3 = [v6 tableView:self titleForFooterInSection:a3];

  if (!v3 || ![v3 length]) {
    goto LABEL_6;
  }
  BOOL v7 = 1;
LABEL_7:

  return v7;
}

- (BOOL)_isEditingWithNoSwipedCell
{
  return (*((unsigned char *)&self->_tableFlags + 14) & 0x10) != 0
      && (*((unsigned char *)&self->_tableFlags + 21) & 0x10) == 0
      && self->_swipedIndexPath == 0;
}

- (id)_dequeueReusableCellWithIdentifier:(id)a3 forIndexPath:(id)a4 usingPresentationValues:(BOOL)a5
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a4;
  if (dyld_program_sdk_at_least())
  {
    if (!v10)
    {
      BOOL v11 = [MEMORY[0x1E4F28B00] currentHandler];
      [v11 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:10104 description:@"Attempted to dequeue a cell for a nil index path"];
    }
  }
  else if (!v10)
  {
    uint64_t v25 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1E8FDF428) + 8);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1853B0000, v25, OS_LOG_TYPE_ERROR, "Attempted to dequeue a cell for a nil index path", buf, 2u);
    }
  }
  if (!a5)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v13 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathAfterShadowUpdates:v10];

      id v10 = (id)v13;
    }
  }
  double v14 = [(UITableView *)self dequeueReusableCellWithIdentifier:v9];
  if (!v14)
  {
    long long v24 = [MEMORY[0x1E4F28B00] currentHandler];
    [v24 handleFailureInMethod:a2, self, @"UITableView.m", 10110, @"unable to dequeue a cell with identifier %@ - must register a nib or a class for the identifier or connect a prototype cell in a storyboard", v9 object file lineNumber description];
  }
  indexPathBeingReconfigured = self->_indexPathBeingReconfigured;
  if (indexPathBeingReconfigured)
  {
    if (([(NSIndexPath *)indexPathBeingReconfigured isEqual:v10] & 1) == 0)
    {
      uint64_t v16 = [MEMORY[0x1E4F28B00] currentHandler];
      double v17 = [(UITableView *)self dataSourceIndexPathForPresentationIndexPath:v10];
      uint64_t v18 = [(UITableView *)self dataSourceIndexPathForPresentationIndexPath:self->_indexPathBeingReconfigured];
      objc_msgSend(v16, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UITableView.m", 10112, @"Attempted to dequeue a cell for a different index path than the index path being reconfigured, which is not allowed. You must dequeue a cell for the same index path that is being reconfigured to obtain the existing cell. Dequeued index path: %@; Reconfigured index path: %@; Existing cell: %@",
        v17,
        v18,
        self->_cellBeingReconfigured);
    }
  }
  else if ([(UITableView *)self _shouldConfigureCellForDisplayDuringDequeueForIndexPath:v10])
  {
    int v19 = dyld_program_sdk_at_least();
    BOOL v20 = [(NSMutableDictionary *)self->_tentativeCells objectForKeyedSubscript:v10];

    if (v19)
    {
      if (v20)
      {
        objc_super v21 = [MEMORY[0x1E4F28B00] currentHandler];
        [v21 handleFailureInMethod:a2, self, @"UITableView.m", 10118, @"Attempted to dequeue multiple cells for the same index path, which is not allowed. If you really need to dequeue more cells than the table view is requesting, use the -dequeueReusableCellWithIdentifier: method (without an index path). Cell identifier: %@, index path: %@", v9, v10 object file lineNumber description];
      }
    }
    else if (v20)
    {
      long long v26 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1E8FDF430) + 8);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        id v28 = v9;
        __int16 v29 = 2112;
        id v30 = v10;
        _os_log_impl(&dword_1853B0000, v26, OS_LOG_TYPE_ERROR, "Attempted to dequeue multiple cells for the same index path, which is not allowed. If you really need to dequeue more cells than the table view is requesting, use the -dequeueReusableCellWithIdentifier: method (without an index path). Cell identifier: %@, index path: %@", buf, 0x16u);
      }
    }
    [(NSMutableDictionary *)self->_tentativeCells setObject:v14 forKeyedSubscript:v10];
    [(UITableView *)self _configureCellForDisplay:v14 forIndexPath:v10];
  }
  else
  {
    [v14 _setTableView:self];
    objc_super v22 = [(UITableView *)self _constants];
    [v14 _setConstants:v22];

    objc_msgSend(v14, "setTableViewStyle:", -[UITableView _tableStyle](self, "_tableStyle"));
  }

  return v14;
}

void __53__UITableView__configureCellForDisplay_forIndexPath___block_invoke(id *a1)
{
  [a1[5] _setTableView:a1[4]];
  objc_super v2 = [a1[4] _constants];
  [a1[5] _setConstants:v2];

  id v3 = a1[4];
  uint64_t v4 = *((void *)v3 + 385);
  if ((v4 & 0x10000000000000) != 0)
  {
    uint64_t v6 = *((void *)v3 + 386);
    uint64_t v7 = v4 & 0x80000000000000 | *((void *)v3 + 292) | v6 & 0x40000000000;
    uint64_t v8 = v6 & 0x100000000000;
    if (v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v5 = [*((id *)v3 + 292) isEqual:a1[6]];
      id v3 = a1[4];
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v10 = [v3 _tableStyle];
  [a1[5] setTableViewStyle:v10];
  [a1[5] setAutoresizingMask:2];
  [a1[5] _setNeedsSetup:1];
  [a1[4] _sectionContentInset];
  double v14 = v13;
  double v15 = v11;
  double v17 = v16;
  double v18 = v12;
  BOOL v20 = v10 == 16 || (unint64_t)(v10 - 1) < 2;
  if (v11 <= 0.0) {
    BOOL v20 = 0;
  }
  BOOL v21 = v12 > 0.0 && v20;
  [a1[5] _setOverrideUserInterfaceRenderingMode:v21];
  objc_msgSend(a1[5], "setSemanticContentAttribute:", objc_msgSend(a1[4], "semanticContentAttribute"));
  objc_super v22 = a1[4];
  if ((v22[3077] & 0x10) != 0)
  {
    uint64_t v23 = [a1[5] _target];

    objc_super v22 = a1[4];
    if (!v23)
    {
      [a1[5] _setTarget:a1[4]];
      [a1[5] _setAccessoryAction:sel__accessoryButtonAction_];
      objc_super v22 = a1[4];
    }
  }
  [v22 _updateDragStateForCell:a1[5] atIndexPath:a1[6]];
  [a1[4] _updateSeparatorStyleForCell:a1[5] atIndexPath:a1[6]];
  [a1[4] _updateTopSeparatorForCell:a1[5] atIndexPath:a1[6]];
  uint64_t v82 = 0;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v24 = a1[4];
  uint64_t v25 = (void *)v24[374];
  uint64_t v26 = [v24 _tableStyle];
  uint64_t v27 = +[UICellConfigurationState _readonlyCellState:]((uint64_t)UICellConfigurationState, 0);
  id v28 = [a1[5] traitCollection];
  if (v25)
  {
    [v25 defaultCellBackgroundPropertiesForTableViewStyle:v26 state:v27 traitCollection:v28];
  }
  else
  {
    uint64_t v82 = 0;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
  }

  [a1[5] _setDefaultBackgroundColor:*((void *)&v74 + 1)];
  __int16 v29 = [a1[4] separatorColor];
  [a1[5] setSeparatorColor:v29];

  id v30 = [a1[4] sectionBorderColor];
  [a1[5] setSectionBorderColor:v30];

  [a1[4] _cellIndexBarExtentFromEdge];
  objc_msgSend(a1[5], "_setIndexBarExtentFromEdge:");
  [a1[4] _defaultLeadingCellMarginWidth];
  objc_msgSend(a1[5], "_setDefaultLeadingMarginWidth:");
  [a1[4] _defaultTrailingCellMarginWidth];
  objc_msgSend(a1[5], "_setDefaultTrailingCellMarginWidth:");
  uint64_t v31 = [a1[5] _separatorBackdropOverlayBlendMode];
  CGRect v32 = a1[4];
  if (v31 != ((v32[386] >> 50) & 7))
  {
    v73[0] = MEMORY[0x1E4F143A8];
    v73[1] = 3221225472;
    v73[2] = __53__UITableView__configureCellForDisplay_forIndexPath___block_invoke_2;
    v73[3] = &unk_1E53048F8;
    id v33 = a1[5];
    v73[4] = v32;
    v73[5] = v33;
    +[UIView _performSystemAppearanceModifications:v73];
    CGRect v32 = a1[4];
  }
  [a1[5] _setSeparatorEffect:v32[323]];
  objc_msgSend(a1[5], "_setBackgroundInset:", v14, v15, v17, v18);
  [a1[5] _setAllowsReorderingWhenNotEditing:*((_DWORD *)a1[4] + 774) & 1];
  id v34 = a1[4];
  id v35 = a1[5];
  uint64_t v36 = *((void *)v34 + 316);
  long long v37 = [*((id *)v34 + 300) superview];
  uint64_t v38 = (void **)a1[4];
  if (v37 == v38[301]) {
    uint64_t v39 = (*((unsigned __int8 *)v38 + 3094) >> 6) & 1;
  }
  else {
    uint64_t v39 = 0;
  }
  [v35 _setAnimating:v36 > 0 clippingAdjacentCells:v39];

  [a1[5] _setHiddenForReuse:0];
  uint64_t v40 = (uint64_t *)a1[4];
  if ((*((unsigned char *)v40 + 3078) & 0x80) != 0)
  {
    double v41 = [v40 _delegateProxy];
    objc_msgSend(a1[5], "setIndentationLevel:", objc_msgSend(v41, "tableView:indentationLevelForRowAtIndexPath:", a1[4], a1[6]));

    uint64_t v40 = (uint64_t *)a1[4];
  }
  objc_msgSend(a1[5], "setSectionLocation:animated:", -[UITableViewRowData sectionLocationForRow:inSection:](v40[259], objc_msgSend(a1[6], "row"), objc_msgSend(a1[6], "section")), 0);
  int v42 = dyld_program_sdk_at_least();
  if (v42)
  {
    [a1[5] _prepareToSetDefaultLayoutMargins];
    objc_msgSend(*((id *)a1[4] + 374), "defaultLayoutMarginsForCell:inTableView:", a1[5]);
    objc_msgSend(a1[5], "setLayoutMargins:");
    objc_msgSend(a1[5], "setLayoutMarginsFollowReadableWidth:", objc_msgSend(a1[4], "cellLayoutMarginsFollowReadableWidth"));
  }
  objc_msgSend(a1[5], "_setInsetsContentViewsToSafeArea:", objc_msgSend(a1[4], "insetsContentViewsToSafeArea"));
  objc_msgSend(a1[5], "_setSeparatorInsetIsRelativeToCellEdges:", objc_msgSend(a1[4], "_separatorInsetIsRelativeToCellEdges"));
  [a1[5] _setAutomaticIntrinsicContentSizeInvalidationEnabled:(*((void *)a1[4] + 387) & 0x18000000000) == 0x10000000000];
  if (v42)
  {
    uint64_t v43 = (id *)(id)[a1[5] superview];
    uint64_t v44 = (id *)a1[4];
    if (v43 != v44 || v43 != v43[301]) {
      [v44 _addContentSubview:a1[5] atBack:1];
    }
  }
  int v45 = dyld_program_sdk_at_least();
  char v46 = v45;
  if (v45 && (*((unsigned char *)a1[4] + 3086) & 0x80) == 0)
  {
    [a1[5] setNeedsLayout];
    [a1[4] _setupCell:a1[5] forEditing:v5 atIndexPath:a1[6] animated:0 updateSeparators:1];
  }
  int v47 = dyld_program_sdk_at_least();
  char v48 = v47;
  if (v47)
  {
    [a1[4] _updateSelectedAndHighlightedStateForCell:a1[5] atIndexPath:a1[6]];
    [a1[4] _updateSelectionGroupingForCell:a1[5] atIndexPath:a1[6]];
  }
  [a1[4] _rectForRowAtIndexPath:a1[6] canGuess:(*((void *)a1[4] + 387) >> 4) & 1];
  double v53 = v49;
  double v54 = v50;
  double v55 = v51;
  double v56 = v52;
  if ((*((unsigned char *)a1[4] + 3096) & 0x10) != 0)
  {
    if (v42)
    {
      double Width = CGRectGetWidth(*(CGRect *)&v49);
      [a1[5] frame];
      if (Width != CGRectGetWidth(v83)) {
        objc_msgSend(a1[5], "_setFrame:skipLayout:", 1, v53, v54, v55, v56);
      }
    }
    [a1[4] _heightForCell:a1[5] atIndexPath:a1[6]];
    double v56 = v58;
    uint64_t v59 = *((void *)a1[4] + 259);
    v84.origin.CGFloat x = v53;
    v84.origin.CGFloat y = v54;
    v84.size.CGFloat width = v55;
    v84.size.CGFloat height = v56;
    double Height = CGRectGetHeight(v84);
    -[UITableViewRowData setHeight:forRowAtIndexPath:](v59, a1[6], Height);
  }
  objc_msgSend(a1[5], "setFrame:", v53, v54, v55, v56);
  [a1[5] _setNeedsHeightCalculation:0];
  double v61 = [a1[5] layoutManager];
  objc_msgSend(v61, "contentRectForCell:forState:", a1[5], objc_msgSend(a1[5], "currentStateMask"));
  double v63 = v62;
  double v65 = v64;
  double v67 = v66;
  double v69 = v68;
  v70 = [a1[5] contentView];
  objc_msgSend(v70, "setFrame:", v63, v65, v67, v69);

  [a1[5] _setTableView:0];
  if ((*((unsigned char *)a1[4] + 3086) & 0x80) == 0)
  {
    if ((v42 & 1) == 0)
    {
      v71 = (id *)(id)[a1[5] superview];
      BOOL v72 = (id *)a1[4];
      if (v71 != v72 || v71 != v71[301]) {
        [v72 _addContentSubview:a1[5] atBack:1];
      }
    }
    if ((v46 & 1) == 0)
    {
      [a1[5] setNeedsLayout];
      [a1[4] _setupCell:a1[5] forEditing:v5 atIndexPath:a1[6] animated:0 updateSeparators:1];
    }
  }
  if ((v48 & 1) == 0) {
    [a1[4] _updateSelectedAndHighlightedStateForCell:a1[5] atIndexPath:a1[6]];
  }
  __destructor_8_s8_s16_s24_s80((uint64_t)&v74);
}

- (UITableViewStyle)style
{
  return (*((void *)&self->_tableFlags + 1) >> 45) & 3;
}

- (void)_updateIndex
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if ([(UITableView *)self _dataSourceHasSectionIndexTitlesForTableView])
  {
    uint64_t v3 = *((void *)&self->_tableFlags + 2);
    if ((v3 & 0x8000000) == 0)
    {
      uint64_t v4 = *((void *)&self->_tableFlags + 3);
      *((void *)&self->_tableFlags + 2) = v3 | 0x8000000;
      *((void *)&self->_tableFlags + 3) = v4;
      [(UITableView *)self _updateIndexTitlesFromDataSource];
      uint64_t v5 = [(UITableView *)self _dataSourceSectionIndexTitles];
      uint64_t v6 = v5;
      if (v5
        && [v5 count]
        && (uint64_t)-[UITableViewRowData numberOfRows]((uint64_t)self->_rowData) >= self->_sectionIndexMinimumDisplayRowCount)
      {
        p_indeCGFloat x = &self->_index;
        if (!self->_index)
        {
          id v30 = 0;
          id v31 = 0;
          double v15 = [(UIView *)self traitCollection];
          +[UITableViewIndex makeTableViewIndex:&v31 containerView:&v30 forTraits:v15];
          id v16 = v31;
          id v17 = v31;
          id v18 = v30;
          id v19 = v30;

          [v17 setTableView:self];
          objc_storeStrong((id *)&self->_index, v16);
          [(UIControl *)*p_index addTarget:self action:sel__sectionIndexTouchesBegan_ forControlEvents:1];
          [(UIControl *)*p_index addTarget:self action:sel__sectionIndexChanged_ forControlEvents:4096];
          [(UIControl *)*p_index addTarget:self action:sel__sectionIndexTouchesEnded_ forControlEvents:448];
          objc_storeStrong((id *)&self->_indexContainerView, v18);
          if (!self->_indexRetargetFeedbackGenerator)
          {
            BOOL v20 = +[_UISelectionFeedbackGeneratorConfiguration strongConfiguration];
            BOOL v21 = [v20 tweakedConfigurationForClass:objc_opt_class() usage:@"indexRetarget"];

            objc_super v22 = [(UIFeedbackGenerator *)[UISelectionFeedbackGenerator alloc] initWithConfiguration:v21 view:*p_index];
            indexRetargetFeedbackGenerator = self->_indexRetargetFeedbackGenerator;
            self->_indexRetargetFeedbackGenerator = v22;
          }
          if ([(UITableView *)self _shouldSetIndexBackgroundColorToTableBackgroundColor])
          {
            long long v24 = *p_index;
            uint64_t v25 = [(UIView *)self backgroundColor];
            [(UIView *)v24 setBackgroundColor:v25];
          }
          [(UITableViewIndex *)*p_index setIndexColor:self->_indexColor];
          [(UITableViewIndex *)*p_index setIndexBackgroundColor:self->_indexBackgroundColor];
          [(UITableViewIndex *)*p_index setIndexTrackingBackgroundColor:self->_indexTrackingBackgroundColor];
          [(UITableView *)self _addIndexToAppropriateContainer];
        }
        [(UITableView *)self _updateIndexDisplayedTitles];
      }
      else
      {
        [(UITableView *)self _removeIndex];
      }
    }
    if (self->_index)
    {
      [(UITableView *)self _updateIndexFrame];
      [(UITableView *)self _addIndexToAppropriateContainer];
    }
  }
  else if (self->_index)
  {
    [(UITableView *)self _removeIndex];
  }
  [(UITableView *)self _cellIndexBarExtentFromEdge];
  double v8 = v7;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  BOOL v9 = self->_visibleCells;
  uint64_t v10 = [(NSMutableArray *)v9 countByEnumeratingWithState:&v26 objects:v32 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v27;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v27 != v12) {
          objc_enumerationMutation(v9);
        }
        objc_msgSend(*(id *)(*((void *)&v26 + 1) + 8 * i), "_setIndexBarExtentFromEdge:", v8, (void)v26);
      }
      uint64_t v11 = [(NSMutableArray *)v9 countByEnumeratingWithState:&v26 objects:v32 count:16];
    }
    while (v11);
  }
}

- (double)_cellIndexBarExtentFromEdge
{
  [(UITableView *)self _indexBarExtentFromEdge];
  double v4 = v3;
  [(UITableView *)self _sectionContentInset];
  if ((*((_DWORD *)&self->super.super._viewFlags + 4) & 0x80000) != 0) {
    double v7 = v5;
  }
  else {
    double v7 = v6;
  }
  return fmax(v4 - v7, 0.0);
}

- (BOOL)_dataSourceHasSectionIndexTitlesForTableView
{
  return (*(_WORD *)&self->_tableFlags & 0x180) != 0;
}

- (BOOL)_separatorInsetIsRelativeToCellEdges
{
  return *((unsigned __int8 *)&self->_tableFlags + 25) >> 7;
}

- (double)_defaultTrailingCellMarginWidth
{
  [(UITableConstants *)self->_constants defaultTrailingCellMarginWidthForTableView:self];
  return result;
}

- (double)_heightForFooterView:(id)a3 inSection:(int64_t)a4
{
  id v6 = a3;
  [(UITableView *)self _classicHeightForFooterInSection:a4];
  double sectionFooterHeight = v7;
  if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0 && v7 == -1.0)
  {
    if (dyld_program_sdk_at_least()
      && ![(UITableView *)self _estimatesSectionFooterHeights])
    {
      goto LABEL_12;
    }
    double v9 = -[UITableViewRowData rectForFooterInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, a4, 1);
    CGFloat v11 = v10;
    CGFloat v13 = v12;
    CGFloat v15 = v14;
    if (dyld_program_sdk_at_least())
    {
      objc_msgSend(v6, "setLayoutMarginsFollowReadableWidth:", -[UITableView cellLayoutMarginsFollowReadableWidth](self, "cellLayoutMarginsFollowReadableWidth"));
      [v6 _updateInferredLayoutMarginsFromSuperview:self];
    }
    [(UITableView *)self _prepareToSizeView:v6];
    v24.origin.CGFloat x = v9;
    v24.origin.CGFloat y = v11;
    v24.size.CGFloat width = v13;
    v24.size.CGFloat height = v15;
    CGFloat Width = CGRectGetWidth(v24);
    LODWORD(v17) = 1148846080;
    LODWORD(v18) = 1112014848;
    objc_msgSend(v6, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", Width, 0.0, v17, v18);
    double sectionFooterHeight = v19;
    if (v19 <= 0.0) {
      double sectionFooterHeight = self->_sectionFooterHeight;
    }
    intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
    if (intrinsicContentSizeInvalidationContext)
    {
      BOOL v21 = [MEMORY[0x1E4F28D58] indexPathWithIndex:a4];
      [(UICollectionViewLayoutInvalidationContext *)intrinsicContentSizeInvalidationContext _removeInvalidatedSupplementaryOfKind:@"UICollectionElementKindSectionFooter" indexPath:v21];
    }
  }
  if (sectionFooterHeight == -1.0)
  {
LABEL_12:
    [(UITableView *)self _defaultSectionFooterHeight];
    double sectionFooterHeight = v22;
  }

  return sectionFooterHeight;
}

- (double)_heightForHeaderView:(id)a3 inSection:(int64_t)a4
{
  id v6 = a3;
  [(UITableView *)self _classicHeightForHeaderInSection:a4];
  double sectionHeaderHeight = v7;
  if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0 && v7 == -1.0)
  {
    if (dyld_program_sdk_at_least()
      && ![(UITableView *)self _estimatesSectionHeaderHeights])
    {
      goto LABEL_12;
    }
    double v9 = -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, a4, 1);
    CGFloat v11 = v10;
    CGFloat v13 = v12;
    CGFloat v15 = v14;
    if (dyld_program_sdk_at_least())
    {
      objc_msgSend(v6, "setLayoutMarginsFollowReadableWidth:", -[UITableView cellLayoutMarginsFollowReadableWidth](self, "cellLayoutMarginsFollowReadableWidth"));
      [v6 _updateInferredLayoutMarginsFromSuperview:self];
    }
    [(UITableView *)self _prepareToSizeView:v6];
    v24.origin.CGFloat x = v9;
    v24.origin.CGFloat y = v11;
    v24.size.CGFloat width = v13;
    v24.size.CGFloat height = v15;
    CGFloat Width = CGRectGetWidth(v24);
    LODWORD(v17) = 1148846080;
    LODWORD(v18) = 1112014848;
    objc_msgSend(v6, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", Width, 0.0, v17, v18);
    double sectionHeaderHeight = v19;
    if (v19 <= 0.0) {
      double sectionHeaderHeight = self->_sectionHeaderHeight;
    }
    intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
    if (intrinsicContentSizeInvalidationContext)
    {
      BOOL v21 = [MEMORY[0x1E4F28D58] indexPathWithIndex:a4];
      [(UICollectionViewLayoutInvalidationContext *)intrinsicContentSizeInvalidationContext _removeInvalidatedSupplementaryOfKind:@"UICollectionElementKindSectionHeader" indexPath:v21];
    }
  }
  if (sectionHeaderHeight == -1.0)
  {
LABEL_12:
    [(UITableView *)self _defaultSectionHeaderHeight];
    double sectionHeaderHeight = v22;
  }

  return sectionHeaderHeight;
}

- (BOOL)cellLayoutMarginsFollowReadableWidth
{
  return (*((unsigned __int8 *)&self->_tableFlags + 25) >> 5) & 1;
}

- (CGSize)_sizeForHeaderInSection:(int64_t)a3
{
  -[UITableView _classicHeightForHeaderInSection:](self, "_classicHeightForHeaderInSection:");
  double v6 = v5;
  [(UITableView *)self _fullWidthHeaderWidth];
  double v8 = v7;
  if ([(UITableView *)self _supplementarySectionHeadersHugContent])
  {
    double v9 = [(UITableView *)self _existingOrTentativeHeaderViewCreatedIfNeededForSection:a3];
    double v12 = v9;
    if (v6 == -1.0) {
      double v13 = 0.0;
    }
    else {
      double v13 = v6;
    }
    LODWORD(v10) = 1112014848;
    if (v6 == -1.0) {
      *(float *)&double v11 = 50.0;
    }
    else {
      *(float *)&double v11 = 1000.0;
    }
    objc_msgSend(v9, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", v8, v13, v10, v11);
    if (v6 == -1.0)
    {
      if (v14 > v8 || v14 <= 0.0)
      {
        LODWORD(v16) = 1148846080;
        LODWORD(v17) = 1112014848;
        objc_msgSend(v12, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", v8, 0.0, v16, v17);
      }
      double v8 = v14;
      double v6 = v15;
    }
    else
    {
      double v8 = fmin(v14, v8);
    }
  }
  else if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0 && v6 == -1.0)
  {
    double v18 = [(UITableView *)self _existingOrTentativeHeaderViewCreatedIfNeededForSection:a3];
    [(UITableView *)self _heightForHeaderView:v18 inSection:a3];
    double v6 = v19;
  }
  else if (v6 == -1.0)
  {
    [(UITableView *)self _defaultSectionHeaderHeight];
    double v6 = v20;
  }
  double v21 = v8;
  double v22 = v6;
  result.CGFloat height = v22;
  result.CGFloat width = v21;
  return result;
}

- (double)_classicHeightForHeaderInSection:(int64_t)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)&self->_tableFlags + 4) & 2) != 0)
  {
    double v8 = [(UITableView *)self _delegateProxy];
    [v8 tableView:self heightForHeaderInSection:a3];
    double sectionHeaderHeight = v9;

    int v10 = dyld_program_sdk_at_least();
    BOOL v11 = sectionHeaderHeight < 0.0;
    if (sectionHeaderHeight == -1.0) {
      BOOL v11 = 0;
    }
    if (v10)
    {
      if (v11)
      {
        double v12 = [MEMORY[0x1E4F28B00] currentHandler];
        [v12 handleFailureInMethod:a2, self, @"UITableView.m", 18590, @"Invalid section header height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", *(void *)&sectionHeaderHeight object file lineNumber description];
      }
    }
    else if (v11)
    {
      double v13 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_classicHeightForHeaderInSection____s_category) + 8);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        double v15 = sectionHeaderHeight;
        _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "Invalid section header height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
      }
    }
    return sectionHeaderHeight;
  }
  double sectionHeaderHeight = self->_sectionHeaderHeight;
  if (sectionHeaderHeight != -1.0) {
    return sectionHeaderHeight;
  }
  double sectionHeaderHeight = -1.0;
  if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0) {
    return sectionHeaderHeight;
  }
  [(UITableView *)self _defaultSectionHeaderHeight];
  return result;
}

- (double)_fullWidthHeaderWidth
{
  [(UITableView *)self _sectionHeaderContentInsets];
  double v4 = v3;
  double v6 = v5;
  double v7 = [(UITableView *)self _scrollView];
  [v7 bounds];
  double v9 = v8 - (v6 + v4);

  return fmax(v9, 0.0);
}

- (id)_existingOrTentativeHeaderViewCreatedIfNeededForSection:(int64_t)a3
{
  double v5 = -[UITableView _existingHeaderViewForSection:](self, "_existingHeaderViewForSection:");
  if (!v5)
  {
    tentativeHeaderViews = self->_tentativeHeaderViews;
    double v7 = [NSNumber numberWithInteger:a3];
    double v5 = [(NSMutableDictionary *)tentativeHeaderViews objectForKey:v7];

    if (!v5)
    {
      double v5 = -[UITableView _sectionHeaderViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:](self, "_sectionHeaderViewWithFrame:forSection:floating:reuseViewIfPossible:willDisplay:", a3, 0, 1, 0, -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, a3, 1));
    }
  }
  return v5;
}

- (id)_existingFooterViewForSection:(int64_t)a3
{
  int64_t v5 = -[UITableView _visibleSectionForSectionAdjustedForCurrentUpdate:](self, "_visibleSectionForSectionAdjustedForCurrentUpdate:");
  visibleFooterViews = self->_visibleFooterViews;
  double v7 = [NSNumber numberWithInteger:v5];
  double v8 = [(NSMutableDictionary *)visibleFooterViews objectForKey:v7];

  if (!v8 && (*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0)
  {
    tentativeFooterViews = self->_tentativeFooterViews;
    BOOL v11 = [NSNumber numberWithInteger:a3];
    id v9 = [(NSMutableDictionary *)tentativeFooterViews objectForKey:v11];
  }
  else
  {
    id v9 = v8;
  }

  return v9;
}

- (id)_existingHeaderViewForSection:(int64_t)a3
{
  int64_t v5 = -[UITableView _visibleSectionForSectionAdjustedForCurrentUpdate:](self, "_visibleSectionForSectionAdjustedForCurrentUpdate:");
  visibleHeaderViews = self->_visibleHeaderViews;
  double v7 = [NSNumber numberWithInteger:v5];
  double v8 = [(NSMutableDictionary *)visibleHeaderViews objectForKey:v7];

  if (!v8 && (*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0)
  {
    tentativeHeaderViews = self->_tentativeHeaderViews;
    BOOL v11 = [NSNumber numberWithInteger:a3];
    id v9 = [(NSMutableDictionary *)tentativeHeaderViews objectForKey:v11];
  }
  else
  {
    id v9 = v8;
  }

  return v9;
}

- (int64_t)_visibleSectionForSectionAdjustedForCurrentUpdate:(int64_t)a3
{
  currentUpdate = self->_currentUpdate;
  if (currentUpdate) {
    return -[_UITableViewUpdateSupport initialSectionIndexForFinalSectionIndex:]((uint64_t)currentUpdate, a3);
  }
  else {
    return a3;
  }
}

- (id)sectionBorderColor
{
  sectionBorderColor = self->_sectionBorderColor;
  if (sectionBorderColor)
  {
    double v3 = sectionBorderColor;
  }
  else
  {
    double v3 = [(UITableView *)self separatorColor];
  }
  return v3;
}

- (UIColor)separatorColor
{
  BOOL v3 = [(UITableView *)self _shouldDrawDarkSeparators];
  uint64_t v4 = 96;
  if (v3) {
    uint64_t v4 = 110;
  }
  int64_t v5 = *(Class *)((char *)&self->super.super.super.super.isa + OBJC_IVAR___UITableView__rowData[v4]);
  return (UIColor *)v5;
}

- (BOOL)_shouldDrawDarkSeparators
{
  int v2 = dyld_program_sdk_at_least();
  if (v2) {
    LOBYTE(v2) = _AXDarkenSystemColors() != 0;
  }
  return v2;
}

- (void)_updateSelectedAndHighlightedStateForCell:(id)a3 atIndexPath:(id)a4
{
  id v7 = a3;
  id v6 = a4;
  if (![(UITableView *)self _shouldDeselectRowsOnTouchesBegan]
    || ([(NSMutableArray *)self->_pendingDeselectionIndexPaths containsObject:v6] & 1) == 0)
  {
    objc_msgSend(v7, "setSelected:", -[NSMutableArray containsObject:](self->_selectedIndexPaths, "containsObject:", v6));
    objc_msgSend(v7, "setHighlighted:", -[NSMutableArray containsObject:](self->_highlightedIndexPaths, "containsObject:", v6));
  }
}

- (void)_updateDragStateForCell:(id)a3 atIndexPath:(id)a4
{
  id v12 = a3;
  id v6 = a4;
  id v7 = [(_UITableViewDragController *)self->_dragController indexPaths];
  double v8 = v7;
  if (!v7 || ![v7 containsObject:v6])
  {
    [v12 _setDragState:0];
    [v12 setAlpha:1.0];
    goto LABEL_11;
  }
  rowData = self->_rowData;
  if (!rowData)
  {
    BOOL v11 = 0;
LABEL_9:
    [v12 _setDragState:2];
    goto LABEL_10;
  }
  int v10 = rowData->_draggedIndexPath;
  BOOL v11 = v10;
  if (!v10 || ![(NSIndexPath *)v10 isEqual:v6]) {
    goto LABEL_9;
  }
  [v12 _setDragState:0];
  [v12 setAlpha:0.0];
LABEL_10:

LABEL_11:
}

- (BOOL)_shouldDeselectRowsOnTouchesBegan
{
  if ((*((unsigned char *)&self->_tableFlags + 28) & 0x20) != 0) {
    return 0;
  }
  int v2 = +[UIDevice currentDevice];
  uint64_t v3 = [v2 userInterfaceIdiom];

  return (v3 & 0xFFFFFFFFFFFFFFFBLL) == 1;
}

- (CGRect)_rectForRowAtIndexPath:(id)a3 canGuess:(BOOL)a4
{
  id v6 = a3;
  [(UITableView *)self _ensureRowDataIsLoaded];
  rowData = self->_rowData;
  uint64_t v8 = [v6 row];
  uint64_t v9 = [v6 section];

  double v10 = -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:]((uint64_t)rowData, v8, v9, a4);
  result.size.CGFloat height = v13;
  result.size.CGFloat width = v12;
  result.origin.CGFloat y = v11;
  result.origin.CGFloat x = v10;
  return result;
}

- (double)_defaultLeadingCellMarginWidth
{
  [(UITableConstants *)self->_constants defaultLeadingCellMarginWidthForTableView:self];
  return result;
}

- (UITableViewCell)dequeueReusableCellWithIdentifier:(NSString *)identifier
{
  int64_t v5 = identifier;
  cellBeingReconfigured = self->_cellBeingReconfigured;
  if (!cellBeingReconfigured)
  {
    double v11 = [(UITableView *)self _dequeueReusableViewOfType:1 withIdentifier:v5];
    goto LABEL_11;
  }
  id v7 = [(UITableViewCell *)cellBeingReconfigured reuseIdentifier];
  uint64_t v8 = v5;
  uint64_t v9 = v8;
  if (v7 == v8)
  {

    double v12 = v9;
LABEL_9:

    goto LABEL_10;
  }
  if (!v8 || !v7)
  {

LABEL_15:
    double v12 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v15 = [(UITableViewCell *)self->_cellBeingReconfigured reuseIdentifier];
    objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UITableView.m", 10090, @"Attempted to dequeue a cell for a different reuse identifier than the existing cell when reconfiguring a row, which is not allowed. You must dequeue a cell using the same reuse identifier that was used to dequeue the cell originally to obtain the existing cell. Dequeued reuse identifier: %@; Original reuse identifier: %@; Existing cell: %@",
      v9,
      v15,
      self->_cellBeingReconfigured);
    uint64_t v9 = (void *)v15;
    goto LABEL_9;
  }
  char v10 = [(NSString *)v7 isEqual:v8];

  if ((v10 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_10:
  double v11 = self->_cellBeingReconfigured;
LABEL_11:
  double v13 = v11;

  return v13;
}

- (BOOL)_shouldConfigureCellForDisplayDuringDequeueForIndexPath:(id)a3
{
  id v4 = a3;
  if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0
    && [(UITableView *)self _estimatesRowHeights])
  {
    if (*((unsigned char *)&self->_tableFlags + 4))
    {
      id v7 = [(UITableView *)self _delegateProxy];
      [v7 tableView:self heightForRowAtIndexPath:v4];
      BOOL v5 = v8 != -1.0;
    }
    else
    {
      BOOL v5 = 0;
    }
  }
  else
  {
    BOOL v5 = 1;
  }

  return v5;
}

- (void)_startViewAnimationsForUpdate:(id)a3 withContext:(id)a4 swipeOccurrenceAnimatingDelete:(id)a5 oldVisibleViews:(id)a6 useCopyBlendingForAnimations:(BOOL)a7
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  id v95 = a3;
  double v12 = a4;
  id v13 = a5;
  id v97 = a6;
  v102 = v13;
  BOOL v99 = v13 != 0;
  if (v12) {
    ++v12[2];
  }
  BOOL v96 = v12;
  [(NSMutableArray *)self->_visibleCells removeAllObjects];
  uint64_t v103 = self;
  NSUInteger location = self->_visibleRows.location;
  if (location < self->_visibleRows.length + location)
  {
    do
    {
      id v15 = *(id *)(*((void *)v95 + 33) + 8 * location);
      if (os_variant_has_internal_diagnostics())
      {
        if (!v15)
        {
          uint64_t v16 = __UIFaultDebugAssertLog();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
          {
            LODWORD(buf) = 134217984;
            *(void *)((char *)&buf + 4) = location;
            _os_log_fault_impl(&dword_1853B0000, v16, OS_LOG_TYPE_FAULT, "Missing animatedCell for newly visible row %ld", (uint8_t *)&buf, 0xCu);
          }

          goto LABEL_14;
        }
      }
      else if (!v15)
      {
        double v17 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations____s_category)+ 8);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 134217984;
          *(void *)((char *)&buf + 4) = location;
          _os_log_impl(&dword_1853B0000, v17, OS_LOG_TYPE_ERROR, "Missing animatedCell for newly visible row %ld", (uint8_t *)&buf, 0xCu);
        }
LABEL_14:
        id v15 = [(UITableView *)self _createPreparedCellForGlobalRow:location willDisplay:1];
        if (!v15)
        {
          double v18 = [MEMORY[0x1E4F28B00] currentHandler];
          [v18 handleFailureInMethod:a2, self, @"UITableView.m", 4532, @"Missing animatedCell for newly visible row %ld, and failed to create a new cell", location object file lineNumber description];

          id v15 = 0;
        }
      }
      [(NSMutableArray *)self->_visibleCells addObject:v15];

      ++location;
    }
    while (location < self->_visibleRows.length + self->_visibleRows.location);
  }
  [(NSMutableDictionary *)self->_visibleHeaderViews removeAllObjects];
  [(NSMutableDictionary *)self->_visibleFooterViews removeAllObjects];
  double v19 = self;
  firstResponderView = self->_firstResponderView;
  if (firstResponderView)
  {
    int firstResponderViewType = self->_firstResponderViewType;
    if (firstResponderViewType == 3)
    {
      visibleFooterViews = self->_visibleFooterViews;
      uint64_t v23 = objc_msgSend(NSNumber, "numberWithInteger:", -[NSIndexPath section](self->_firstResponderIndexPath, "section"));
      [(NSMutableDictionary *)visibleFooterViews setObject:firstResponderView forKey:v23];
    }
    else
    {
      if (firstResponderViewType != 2) {
        goto LABEL_22;
      }
      visibleHeaderViews = self->_visibleHeaderViews;
      uint64_t v23 = objc_msgSend(NSNumber, "numberWithInteger:", -[NSIndexPath section](self->_firstResponderIndexPath, "section"));
      [(NSMutableDictionary *)visibleHeaderViews setObject:firstResponderView forKey:v23];
    }

    double v19 = self;
  }
LABEL_22:
  if (*((uint64_t *)v95 + 30) >= 1)
  {
    uint64_t v25 = 0;
    do
    {
      [(UITableView *)v19 _contentInset];
      double v27 = *((double *)v95 + 20) + v26;
      double v29 = v28 + *((double *)v95 + 21);
      double v31 = *((double *)v95 + 22) - (v26 + v30);
      double v33 = *((double *)v95 + 23) - (v28 + v32);
      id v34 = *(void **)(*((void *)v95 + 34) + 8 * v25);
      if (v34)
      {
        id v35 = [MEMORY[0x1E4F1CA98] null];
        BOOL v36 = v34 == v35;

        if (!v36)
        {
          v137.origin.CGFloat x = -[UITableViewRowData floatingRectForHeaderInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)self->_rowData, v25, 0, 0, v27, v29, v31, v33);
          if (CGRectIntersectsRect(v137, *((CGRect *)v95 + 5)))
          {
            long long v37 = self->_visibleHeaderViews;
            uint64_t v38 = *(void *)(*((void *)v95 + 34) + 8 * v25);
            uint64_t v39 = [NSNumber numberWithInteger:v25];
            [(NSMutableDictionary *)v37 setObject:v38 forKey:v39];
          }
        }
      }
      uint64_t v40 = *(void **)(*((void *)v95 + 35) + 8 * v25);
      if (v40)
      {
        double v41 = [MEMORY[0x1E4F1CA98] null];
        BOOL v42 = v40 == v41;

        if (!v42)
        {
          v138.origin.CGFloat x = -[UITableViewRowData floatingRectForFooterInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)self->_rowData, v25, 0, 0, v27, v29, v31, v33);
          if (CGRectIntersectsRect(v138, *((CGRect *)v95 + 5)))
          {
            uint64_t v43 = self->_visibleFooterViews;
            uint64_t v44 = *(void *)(*((void *)v95 + 35) + 8 * v25);
            int v45 = [NSNumber numberWithInteger:v25];
            [(NSMutableDictionary *)v43 setObject:v44 forKey:v45];
          }
        }
      }
      ++v25;
      double v19 = self;
    }
    while (v25 < *((void *)v95 + 30));
  }
  if ([(UITableView *)v19 _shouldUseNewHeaderFooterBehavior])
  {
    v140.origin.CGFloat x = -[UITableViewRowData rectForTableHeaderView]((uint64_t)self->_rowData);
    v140.origin.CGFloat y = v46;
    v140.size.CGFloat width = v47;
    v140.size.CGFloat height = v48;
    if (!CGRectIntersectsRect(*((CGRect *)v95 + 5), v140))
    {
      tableHeaderView = self->_tableHeaderView;
      self->_tableHeaderView = 0;
    }
    v141.origin.CGFloat x = -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData);
    v141.origin.CGFloat y = v50;
    v141.size.CGFloat width = v51;
    v141.size.CGFloat height = v52;
    if (!CGRectIntersectsRect(*((CGRect *)v95 + 5), v141))
    {
      tableFooterView = self->_tableFooterView;
      self->_tableFooterView = 0;
    }
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v134 = 0x2020000000;
  char v135 = 1;
  double v54 = [(UIView *)self->_wrapperView layer];
  v101 = [v54 animationForKey:@"bounds"];

  long long v129 = 0u;
  long long v130 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  obuint64_t j = *((id *)v95 + 40);
  uint64_t v55 = [obj countByEnumeratingWithState:&v127 objects:v132 count:16];
  if (v55)
  {
    uint64_t v56 = *(void *)v128;
    do
    {
      for (uint64_t i = 0; i != v55; ++i)
      {
        if (*(void *)v128 != v56) {
          objc_enumerationMutation(obj);
        }
        uint64_t v58 = *(void *)(*((void *)&v127 + 1) + 8 * i);
        if (v58)
        {
          id v59 = *(id *)(v58 + 24);
          double v60 = *(double *)(v58 + 48);
          double v61 = *(double *)(v58 + 56);
        }
        else
        {
          id v59 = 0;
          double v60 = 0.0;
          double v61 = 0.0;
        }
        BOOL v62 = v61 < 1.0 || v60 > 0.0;
        v125[0] = MEMORY[0x1E4F143A8];
        v125[1] = 3221225472;
        v125[2] = __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke;
        v125[3] = &unk_1E52D9F70;
        id v63 = v59;
        id v126 = v63;
        +[UIView performWithoutAnimation:v125];
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_2;
        aBlock[3] = &unk_1E5308E28;
        id v64 = v63;
        id v117 = v64;
        uint64_t v118 = v58;
        v119 = v103;
        p_long long buf = &buf;
        BOOL v123 = a7;
        id v120 = v101;
        BOOL v124 = v99;
        id v121 = v102;
        double v65 = _Block_copy(aBlock);
        double v66 = v65;
        if (v102)
        {
          (*((void (**)(void *))v65 + 2))(v65);
        }
        else
        {
          double v67 = +[UIView _currentAnimationAttributes];
          [v67 _duration];
          double v69 = v68;

          if (v58)
          {
            double v70 = v61 - v60;
            if (!v62) {
              double v70 = 1.0;
            }
            if (*(unsigned char *)(v58 + 8)) {
              uint64_t v71 = 68;
            }
            else {
              uint64_t v71 = 64;
            }
            BOOL v72 = v103;
            switch(*(_DWORD *)(v58 + 20))
            {
              case 1:
                v71 |= 0x10000uLL;
                break;
              case 2:
                v71 |= 0x20000uLL;
                break;
              case 3:
                v71 |= 0x30000uLL;
                break;
              case 4:
                v71 |= 0x40000uLL;
                break;
              case 5:
                v71 |= 0x50000uLL;
                break;
              case 6:
                break;
              case 7:
                v71 |= 0x70000uLL;
                break;
              default:
                goto LABEL_67;
            }
          }
          else
          {
            double v70 = v61 - v60;
            if (!v62) {
              double v70 = 1.0;
            }
            uint64_t v71 = 64;
LABEL_67:
            BOOL v72 = v103;
          }
          double v73 = v69 * v70;
          v113[0] = MEMORY[0x1E4F143A8];
          v113[1] = 3221225472;
          v113[2] = __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_4;
          v113[3] = &unk_1E52DA160;
          id v74 = v96;
          id v114 = v74;
          id v115 = v66;
          v110[0] = MEMORY[0x1E4F143A8];
          v110[1] = 3221225472;
          v110[2] = __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_5;
          v110[3] = &unk_1E52DAF68;
          v110[4] = v72;
          id v111 = v97;
          id v112 = v74;
          +[UIView animateWithDuration:v71 delay:v113 options:v110 animations:v73 completion:0.0];
        }
      }
      uint64_t v55 = [obj countByEnumeratingWithState:&v127 objects:v132 count:16];
    }
    while (v55);
  }

  long long v75 = v103;
  if ([(UIScrollView *)v103 _showsBackgroundShadow])
  {
    BOOL v76 = +[UIView areAnimationsEnabled];
    if (!*(unsigned char *)(*((void *)&buf + 1) + 24)) {
      +[UIView setAnimationsEnabled:0];
    }
    double v77 = -[UITableViewRowData heightForTable]((uint64_t)v103->_rowData);
    if (v77 - -[UITableViewRowData heightForTable](*((void *)v95 + 9)) != 0.0) {
      -[UIScrollView _adjustShadowsIfNecessaryForOffset:](v103, "_adjustShadowsIfNecessaryForOffset:");
    }
    if (!*(unsigned char *)(*((void *)&buf + 1) + 24)) {
      +[UIView setAnimationsEnabled:v76];
    }
  }
  v108[0] = MEMORY[0x1E4F143A8];
  v108[1] = 3221225472;
  v108[2] = __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_6;
  v108[3] = &unk_1E52D9F98;
  v108[4] = v103;
  long long v78 = (double *)v95;
  CGRect v109 = v78;
  +[UIView performWithoutAnimation:v108];
  [(UIScrollView *)v103 _skipNextStartOffsetAdjustment];
  -[UITableView setBounds:](v103, "setBounds:", v78[20], v78[21], v78[22], v78[23]);
  if ([(UIScrollView *)v103 isScrollAnimating])
  {
    [(UIScrollView *)v103 _animatedTargetOffset];
    double v80 = v79;
    double v82 = v81;
    [(UIView *)v103 bounds];
    double Height = CGRectGetHeight(v139);
    [(UIScrollView *)v103 contentSize];
    double v85 = v84;
    [(UIScrollView *)v103 _effectiveContentInset];
    double v87 = v82 + Height - (v85 + v86);
    if (v87 > 0.0)
    {
      [(UITableView *)v103 _contentInset];
      double v89 = -v88;
      double v90 = v82 - v87;
      if (v82 - v87 <= v89) {
        double v90 = v89;
      }
      -[UIScrollView setContentOffset:animated:](v103, "setContentOffset:animated:", 0, v80, v90);
    }
  }
  [(UITableView *)v103 _updateBackgroundView];
  [(UIScrollView *)v103 _updateAccessories];
  if ((*((unsigned char *)&v103->_tableFlags + 16) & 0x10) != 0)
  {
    [(UITableView *)v103 _adjustExtraSeparators];
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    v91 = v103->_visibleCells;
    uint64_t v92 = [(NSMutableArray *)v91 countByEnumeratingWithState:&v104 objects:v131 count:16];
    if (v92)
    {
      uint64_t v93 = *(void *)v105;
      do
      {
        for (uint64_t j = 0; j != v92; ++j)
        {
          if (*(void *)v105 != v93) {
            objc_enumerationMutation(v91);
          }
          [*(id *)(*((void *)&v104 + 1) + 8 * j) layoutBelowIfNeeded];
        }
        uint64_t v92 = [(NSMutableArray *)v91 countByEnumeratingWithState:&v104 objects:v131 count:16];
      }
      while (v92);
    }

    long long v75 = v103;
  }
  [(UISwipeActionController *)v75->_swipeActionController updateLayout];

  _Block_object_dispose(&buf, 8);
}

- (void)_adjustExtraSeparators
{
  p_tableFlags = &self->_tableFlags;
  *((void *)&self->_tableFlags + 2) &= ~0x10uLL;
  double v58 = 0.0;
  if (![(UITableView *)self _shouldDisplayExtraSeparatorsAtOffset:&v58]) {
    goto LABEL_37;
  }
  double v4 = 1.0;
  if (![(UITableView *)self _shouldDrawThickSeparators])
  {
    [(UIView *)self _currentScreenScale];
    double v4 = 1.0 / v5;
  }
  double left = self->_separatorInset.left;
  double right = self->_separatorInset.right;
  [(UITableView *)self _defaultMarginWidth];
  double v9 = v8;
  [(UIView *)self directionalLayoutMargins];
  double v52 = v10;
  double v50 = v11;
  [(UITableView *)self _indexBarExtentFromEdge];
  double v13 = v12;
  BOOL v14 = [(UITableView *)self _shouldApplyReadableWidthInsets];
  int v15 = *((_DWORD *)&self->super.super._viewFlags + 4);
  BOOL v16 = [(UITableView *)self _separatorInsetIsRelativeToCellEdges];
  [(UITableView *)self _spacingForExtraSeparators];
  double v18 = v17;
  [(UIView *)self bounds];
  CGFloat v56 = v20;
  CGFloat v57 = v19;
  CGFloat v54 = v22;
  CGFloat v55 = v21;
  double v23 = floor(v22 * 1.5);
  double v24 = v58;
  if (v58 < v23)
  {
    unint64_t v25 = 0;
    char v26 = left == -1.0 || v16;
    double v51 = left;
    if (left == -1.0) {
      double v27 = v9;
    }
    else {
      double v27 = left;
    }
    double v53 = v27;
    double v28 = fmax(v50, v13);
    if (!v14) {
      double v28 = v13;
    }
    double v29 = -0.0;
    if (!v16) {
      double v29 = v28;
    }
    double v30 = right + v29;
    double v31 = &OBJC_IVAR____UICursorAccessoryView__accessoryIdentifiers;
    if (right == -1.0) {
      double v32 = v28;
    }
    else {
      double v32 = v30;
    }
    do
    {
      double v33 = v53;
      if ((v26 & 1) == 0)
      {
        unsigned int v34 = dyld_program_sdk_at_least();
        double v35 = -0.0;
        if (v14 | v34) {
          double v35 = v52;
        }
        double v33 = v51 + v35;
        double v24 = v58;
      }
      v59.origin.CGFloat y = v56;
      v59.origin.CGFloat x = v57;
      v59.size.CGFloat height = v54;
      v59.size.CGFloat width = v55;
      double v36 = v18 + v24 - v4;
      double v37 = CGRectGetWidth(v59) - (v33 + v32);
      if ((*(void *)&v15 & 0x80000) != 0) {
        double v38 = v32;
      }
      else {
        double v38 = v33;
      }
      uint64_t v39 = v31[546];
      if (v25 >= [*(id *)((char *)&self->super.super.super.super.isa + v39) count])
      {
        uint64_t v40 = -[_UITableViewCellSeparatorView initWithFrame:]([_UITableViewCellSeparatorView alloc], "initWithFrame:", v38, v36, v37, v4);
        [(UIView *)v40 setAutoresizingMask:2];
        unint64_t v41 = *((void *)p_tableFlags + 2);
        if ((v41 & 0x1C000000000000) == 0xC000000000000)
        {
          [(_UITableViewCellSeparatorView *)v40 setDrawsWithVibrantLightMode:1];
        }
        else
        {
          BOOL v42 = v14;
          [(UIView *)v40 _setDrawsAsBackdropOverlayWithBlendMode:(v41 >> 46) & 1];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            uint64_t v43 = [(UITableView *)self separatorColor];
            [(UIView *)v40 setBackgroundColor:v43];
          }
          BOOL v14 = v42;
        }
        [(_UITableViewCellSeparatorView *)v40 setSeparatorEffect:self->_separatorEffect];
        [(UITableView *)self _addContentSubview:v40 atBack:0];
        uint64_t v44 = *(Class *)((char *)&self->super.super.super.super.isa + v39);
        if (!v44)
        {
          int v45 = (objc_class *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
          CGFloat v46 = *(Class *)((char *)&self->super.super.super.super.isa + v39);
          *(Class *)((char *)&self->super.super.super.super.isa + v39) = v45;

          uint64_t v44 = *(Class *)((char *)&self->super.super.super.super.isa + v39);
        }
        [v44 addObject:v40];
        double v31 = &OBJC_IVAR____UICursorAccessoryView__accessoryIdentifiers;
      }
      else
      {
        uint64_t v40 = [*(id *)((char *)&self->super.super.super.super.isa + v39) objectAtIndex:v25];
        -[UIView setFrame:](v40, "setFrame:", v38, v36, v37, v4);
      }

      double v24 = v18 + v58;
      double v58 = v24;
      ++v25;
    }
    while (v24 < v23);
    while (1)
    {
      extraSeparators = *(NSMutableArray **)((char *)&self->super.super.super.super.isa + v39);
LABEL_42:
      if ([(NSMutableArray *)extraSeparators count] <= v25) {
        break;
      }
      double v49 = [*(id *)((char *)&self->super.super.super.super.isa + v39) lastObject];
      [v49 removeFromSuperview];

      [*(id *)((char *)&self->super.super.super.super.isa + v39) removeLastObject];
    }
  }
  else
  {
LABEL_37:
    uint64_t v39 = 2304;
    extraSeparators = self->_extraSeparators;
    if (!extraSeparators)
    {
      unint64_t v25 = 0;
      goto LABEL_42;
    }
    [(NSMutableArray *)extraSeparators makeObjectsPerformSelector:sel_removeFromSuperview];
    CGFloat v48 = self->_extraSeparators;
    self->_extraSeparators = 0;
  }
}

- (double)_contentBottomForScrollObservation
{
  v8.receiver = self;
  v8.super_class = (Class)UITableView;
  [(UIScrollView *)&v8 _contentBottomForScrollObservation];
  double v4 = v3;
  if ([(UITableView *)self _shouldDisplayExtraSeparatorsAtOffset:0])
  {
    [(UIView *)self bounds];
    double v6 = floor(v5 * 1.5);
    if (v4 < v6) {
      return v6;
    }
  }
  return v4;
}

- (BOOL)_shouldDisplayExtraSeparatorsAtOffset:(double *)a3
{
  uint64_t v3 = *((void *)&self->_tableFlags + 1);
  uint64_t v4 = v3 & 0x7000000000000;
  uint64_t v5 = v3 & 0x600000000000;
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return 0;
  }
  double v9 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
  [(UIView *)self bounds];
  if (v9 >= v10 || self->_tableFooterView) {
    return 0;
  }
  uint64_t v12 = (uint64_t)-[UITableViewRowData numberOfRows]((uint64_t)self->_rowData);
  if (v12 < 1)
  {
    uint64_t v14 = 0;
  }
  else
  {
    double v13 = -[UITableViewRowData indexPathForRowAtGlobalRow:](&self->_rowData->super.isa, v12 - 1);
    uint64_t v14 = [v13 section];
  }
  rowData = self->_rowData;
  if (rowData) {
    int64_t numSections = rowData->_numSections;
  }
  else {
    int64_t numSections = 0;
  }
  if (v14 < numSections)
  {
    do
    {
      v18.origin.CGFloat x = -[UITableViewRowData rectForFooterInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, v14, 1);
      if (CGRectGetHeight(v18) > 0.0) {
        return 0;
      }
    }
    while (numSections != ++v14);
  }
  [(UITableView *)self _clientRequestedFillerRowHeight];
  BOOL result = v17 != 0.0;
  if (a3)
  {
    if (v17 != 0.0)
    {
      v19.origin.CGFloat x = -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData);
      *a3 = CGRectGetMaxY(v19);
      return 1;
    }
  }
  return result;
}

- (void)setBounds:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  [(UIView *)self bounds];
  v18.origin.double x = v8;
  v18.origin.double y = v9;
  double v11 = v10;
  double v13 = v12;
  v17.origin.double x = x;
  v17.origin.double y = y;
  v17.size.double width = width;
  v17.size.double height = height;
  v18.size.double width = v11;
  v18.size.double height = v13;
  if (!CGRectEqualToRect(v17, v18))
  {
    if (width != v11)
    {
      rowData = self->_rowData;
      -[UITableView _widthForContentInRect:](self, "_widthForContentInRect:", x, y, width, height);
      if (rowData) {
        rowData->_tableViewCGFloat Width = v15;
      }
    }
    v16.receiver = self;
    v16.super_class = (Class)UITableView;
    -[UIScrollView setBounds:](&v16, sel_setBounds_, x, y, width, height);
    -[UITableView _rectChangedWithNewSize:oldSize:](self, "_rectChangedWithNewSize:oldSize:", width, height, v11, v13);
    [(UITableView *)self _updatePinnedTableHeader];
  }
}

- (void)_updatePinnedTableHeader
{
  rowData = self->_rowData;
  if (rowData && (*((unsigned char *)&self->_tableFlags + 21) & 0x20) == 0)
  {
    double v4 = -[UITableViewRowData rectForTableHeaderView]((uint64_t)rowData);
    double v6 = v5;
    double v8 = v7;
    double v10 = v9;
    [(UIView *)self->_tableHeaderView frame];
    v14.origin.double x = v4;
    v14.origin.double y = v6;
    v14.size.double width = v8;
    v14.size.double height = v10;
    if (!CGRectEqualToRect(v13, v14)) {
      -[UIView setFrame:](self->_tableHeaderView, "setFrame:", v4, v6, v8, v10);
    }
    if ((*((unsigned char *)&self->_tableFlags + 19) & 0x80) != 0)
    {
      tableHeaderView = self->_tableHeaderView;
      [(UITableView *)self _addContentSubview:tableHeaderView atBack:0];
    }
  }
}

uint64_t __49__UITableView__applyContentSizeDeltaImmediately___block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setContentSize:skipContentOffsetAdjustment:", 0, *(double *)(a1 + 40), *(double *)(a1 + 48));
}

- (void)_updateWithItems:(id)a3 updateSupport:(id)a4
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  *((void *)&self->_tableFlags + 2) |= 0x400000000uLL;
  if (!dyld_program_sdk_at_least()
    || +[UIView areAnimationsEnabled])
  {
    [(UITableView *)self _adjustPreReloadStateForRestoringContentOffsetWithUpdateItems:v6 updateSupport:v7];
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke;
  aBlock[3] = &unk_1E5308DB0;
  id v8 = v7;
  id v160 = v8;
  v161 = self;
  double v9 = (void (**)(void *, NSIndexPath *))_Block_copy(aBlock);
  -[_UITableViewSubviewManager rebasePrefetchedCellIndexPathsWithMapping:]((id *)&self->_subviewManager->super.isa, (uint64_t)v9);
  [(UITableView *)self _resignOrRebaseFirstResponderViewWithUpdateSupport:v8 indexPathMapping:v9];
  [(UITableView *)self _resetOrRebaseFocusedViewWithUpdateSupport:v8 indexPathMapping:v9];
  [(UITableView *)self _updateIdentityTrackerWithUpdateSupport:v8];
  v9[2](v9, self->_pendingSelectionIndexPath);
  double v10 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
  pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
  self->_pendingSelectionIndexPath = v10;

  v157[0] = MEMORY[0x1E4F143A8];
  v157[1] = 3221225472;
  v157[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke_2;
  v157[3] = &unk_1E5308DD8;
  CGRect v116 = v9;
  v158 = v116;
  double v12 = (void (**)(void *, NSMutableArray *))_Block_copy(v157);
  CGRect v13 = self->_selectedIndexPaths;
  v12[2](v12, self->_selectedIndexPaths);
  CGRect v14 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
  selectedIndexPaths = self->_selectedIndexPaths;
  self->_selectedIndexPaths = v14;

  v12[2](v12, self->_highlightedIndexPaths);
  objc_super v16 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
  highlightedIndexPaths = self->_highlightedIndexPaths;
  self->_highlightedIndexPaths = v16;

  id v114 = v13;
  if (([(NSMutableArray *)v13 isEqualToArray:self->_selectedIndexPaths] & 1) == 0) {
    [(_UITableViewMultiSelectController *)self->_multiSelectController clearSelectionState];
  }
  if (self->_deselectionTransitionIndexPaths)
  {
    ((void (*)(void (**)(void *, NSMutableArray *)))v12[2])(v12);
    CGRect v18 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    deselectionTransitionIndexPaths = self->_deselectionTransitionIndexPaths;
    self->_deselectionTransitionIndexPaths = v18;
  }
  if (self->_pendingDeselectionIndexPaths)
  {
    ((void (*)(void (**)(void *, NSMutableArray *)))v12[2])(v12);
    double v20 = (NSMutableArray *)objc_claimAutoreleasedReturnValue();
    pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
    self->_pendingDeselectionIndexPaths = v20;
  }
  id v115 = v12;
  [(NSMutableSet *)self->_hiddenSeparatorIndexPaths removeAllObjects];
  long long v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  double v22 = self->_visibleCells;
  uint64_t v23 = [(NSMutableArray *)v22 countByEnumeratingWithState:&v153 objects:v163 count:16];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)v154;
    do
    {
      for (uint64_t i = 0; i != v24; ++i)
      {
        if (*(void *)v154 != v25) {
          objc_enumerationMutation(v22);
        }
        double v27 = *(void **)(*((void *)&v153 + 1) + 8 * i);
        [v27 _setSeparatorHidden:0];
        [v27 _setNeedsSetup:1];
      }
      uint64_t v24 = [(NSMutableArray *)v22 countByEnumeratingWithState:&v153 objects:v163 count:16];
    }
    while (v24);
  }

  [(UITableView *)self _clearNeedsRecomputeHeightsForInvalidatedElements];
  [(UITableView *)self _updateContentSize];
  -[_UITableViewUpdateSupport _setupAnimations]((uint64_t)v8);
  double v28 = -[UIViewAnimationContext initWithCompletionHandler:]([UIViewAnimationContext alloc], self->_updateCompletionHandler);
  id updateCompletionHandler = self->_updateCompletionHandler;
  self->_id updateCompletionHandler = 0;

  -[UIViewAnimationContext setViewAnimations:]((uint64_t)v28, *((void **)v8 + 40));
  self->_visibleRows.NSUInteger location = -[UITableViewRowData globalRowsInRect:canGuess:](&self->_rowData->super.isa, 0, *((CGFloat *)v8 + 20), *((CGFloat *)v8 + 21), *((CGFloat *)v8 + 22), *((CGFloat *)v8 + 23));
  self->_visibleRows.NSUInteger length = v30;
  [(UITableView *)self _visibleBounds];
  self->_visibleBounds.origin.double x = v31;
  self->_visibleBounds.origin.double y = v32;
  self->_visibleBounds.size.double width = v33;
  self->_visibleBounds.size.double height = v34;
  ++self->_updateAnimationCount;
  BOOL v35 = 0;
  id v117 = v6;
  if (+[UIView areAnimationsEnabled])
  {
    if ([(UITableView *)self _clearBlendingViewAllowed]
      && (*((unsigned char *)&self->_tableFlags + 22) & 0x40) != 0)
    {
      double v36 = [(UIView *)self->_clearBlendingView superview];
      wrapperView = self->_wrapperView;

      if (v36 == wrapperView)
      {
        LODWORD(v38) = 1;
        goto LABEL_23;
      }
      if ((*((unsigned char *)&self->_tableFlags + 22) & 0x40) != 0)
      {
        long long v151 = 0u;
        long long v152 = 0u;
        long long v149 = 0u;
        long long v150 = 0u;
        id v102 = *((id *)v8 + 40);
        uint64_t v38 = [v102 countByEnumeratingWithState:&v149 objects:v162 count:16];
        if (v38)
        {
          uint64_t v103 = *(void *)v150;
          while (2)
          {
            for (uint64_t j = 0; j != v38; ++j)
            {
              if (*(void *)v150 != v103) {
                objc_enumerationMutation(v102);
              }
              long long v105 = *(void **)(*((void *)&v149 + 1) + 8 * j);
              if (v105) {
                long long v105 = (void *)v105[3];
              }
              long long v106 = v105;
              if (_IsKindOfUITableViewCell(v106))
              {
                long long v107 = [v106 backgroundColor];
                [v107 alphaComponent];
                double v109 = v108;

                if (v109 < 1.0)
                {
                  [(UITableView *)self _beginAnimatingCells];

                  LODWORD(v38) = 1;
                  goto LABEL_42;
                }
              }
            }
            uint64_t v38 = [v102 countByEnumeratingWithState:&v149 objects:v162 count:16];
            if (v38) {
              continue;
            }
            break;
          }
LABEL_42:
          id v6 = v117;
        }

        goto LABEL_23;
      }
    }
    LODWORD(v38) = 0;
LABEL_23:
    BOOL v35 = v38 != 0;
  }
  uint64_t v39 = [(UITableView *)self _visibleViews];
  uint64_t v40 = [(UITableView *)self _swipeActionController];
  unint64_t v41 = [v40 _existingSwipeOccurrenceForIndexPath:self->_swipedIndexPath];

  LODWORD(v40) = _tableViewIsAnimatingSwipeToDelete(v41, v6);
  v142[0] = MEMORY[0x1E4F143A8];
  v142[1] = 3221225472;
  v142[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke_3;
  v142[3] = &unk_1E52E7BD0;
  v142[4] = self;
  BOOL v42 = (id *)v8;
  v143 = v42;
  uint64_t v43 = v28;
  id v144 = v43;
  char v147 = (char)v40;
  id v44 = v41;
  id v145 = v44;
  id v45 = v39;
  id v146 = v45;
  BOOL v148 = v35;
  CGFloat v46 = _Block_copy(v142);
  unint64_t v47 = *((void *)&self->_tableFlags + 2);
  uint64_t v48 = HIWORD(v47) & 1;
  *((void *)&self->_tableFlags + 2) = v47 & 0xFFFEFFFFFFFFFFFFLL;
  CGRect v113 = v42;
  id v49 = v42[38];
  v137[0] = MEMORY[0x1E4F143A8];
  v137[1] = 3221225472;
  v137[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke_4;
  v137[3] = &unk_1E52E7A38;
  v137[4] = self;
  id v50 = v45;
  id v138 = v50;
  id v112 = v43;
  id v139 = v112;
  char v141 = v48;
  id v51 = v49;
  id v140 = v51;
  double v52 = _Block_copy(v137);
  if (v40)
  {
    *((void *)&self->_tableFlags + 2) |= 0x4000000000000000uLL;
    double v53 = v52;
    id v54 = v51;
    id v55 = v44;
    CGRect v110 = +[_UISwipeAnimationFactory animatorForTentativeWithOccurrence:v44];
    CGFloat v56 = +[_UISwipeAnimationFactory animatorForCollapse];
    id v111 = v46;
    [v56 addAnimations:v46];
    CGFloat v57 = self->_swipeToDeleteCell;
    [(UITableViewCell *)v57 _setSkipsLayout:1];
    double v58 = [(UIView *)v57 layer];
    CGRect v59 = [v58 presentationLayer];
    [v59 frame];
    double v61 = v60;
    double v63 = v62;
    double v65 = v64;
    double v67 = v66;

    double v68 = [(UIView *)v57 layer];
    [v68 removeAllAnimations];

    double v69 = [(UIView *)v57 layer];
    objc_msgSend(v69, "setFrame:", v61, v63, v65, v67);

    double v70 = v55;
    id v51 = v54;
    double v52 = v53;
    uint64_t v71 = [v70 lockActionViewForAnimation];
    [(UITableViewCell *)v57 frame];
    double v73 = v72;
    double v75 = v74;
    double v77 = v76;
    long long v78 = [(UIView *)v57 superview];
    [v71 superview];
    double v79 = v118 = v50;
    objc_msgSend(v78, "convertRect:toView:", v79, 0.0, v73, v75, v77);
    CGFloat v81 = v80;
    CGFloat v83 = v82;
    CGFloat v85 = v84;
    CGFloat v87 = v86;

    [v71 frame];
    uint64_t v89 = v88;
    uint64_t v91 = v90;
    v165.origin.double x = v81;
    v165.origin.double y = v83;
    v165.size.double width = v85;
    v165.size.double height = v87;
    CGFloat Width = CGRectGetWidth(v165);
    v166.origin.double x = v81;
    v166.origin.double y = v83;
    v166.size.double width = v85;
    v166.size.double height = v87;
    CGFloat MinX = CGRectGetMinX(v166);
    v131[0] = MEMORY[0x1E4F143A8];
    v131[1] = 3221225472;
    v131[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke_5;
    v131[3] = &unk_1E52DA520;
    id v94 = v71;
    id v132 = v94;
    CGFloat v133 = MinX;
    uint64_t v134 = v89;
    CGFloat v135 = Width;
    uint64_t v136 = v91;
    [v110 addAnimations:v131];
    v125[0] = MEMORY[0x1E4F143A8];
    v125[1] = 3221225472;
    v125[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke_6;
    v125[3] = &unk_1E52DA520;
    id v95 = v94;
    id v126 = v95;
    CGFloat v127 = MinX;
    uint64_t v128 = v89;
    CGFloat v129 = Width;
    uint64_t v130 = 0;
    [v56 addAnimations:v125];
    v119[0] = MEMORY[0x1E4F143A8];
    v119[1] = 3221225472;
    v119[2] = __46__UITableView__updateWithItems_updateSupport___block_invoke_7;
    v119[3] = &unk_1E5308E00;
    id v124 = v53;
    id v96 = v70;
    id v120 = v96;
    id v121 = v95;
    v122 = v57;
    BOOL v123 = self;
    id v97 = v57;
    id v98 = v95;
    id v50 = v118;
    id v99 = v98;
    [v56 addCompletion:v119];
    [v110 startAnimation];
    [v56 startAnimation];
    v100 = self;
    v101 = v117;
    [(UITableView *)v100 _animateScanlineViewForCell:v97 occurrence:v96 actionsView:v99];

    id v44 = v70;
    CGFloat v46 = v111;
  }
  else
  {
    [(UITableConstants *)self->_constants defaultEditAndUpdateAnimationDuration];
    +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 1028, v46, v52);
    v101 = v117;
  }
}

- (void)_updateSeparatorStyleForCell:(id)a3 atIndexPath:(id)a4
{
  if (a4)
  {
    uint64_t v6 = *((_WORD *)&self->_tableFlags + 7) & 7;
    id v7 = a4;
    id v9 = a3;
    [v9 setSeparatorStyle:v6];
    uint64_t v8 = [(NSMutableSet *)self->_hiddenSeparatorIndexPaths containsObject:v7];

    [v9 _setSeparatorHidden:v8];
  }
}

- (void)_setupCell:(id)a3 forEditing:(BOOL)a4 atIndexPath:(id)a5 canEdit:(BOOL)a6 editingStyle:(int64_t)a7 shouldIndentWhileEditing:(BOOL)a8 showsReorderControl:(BOOL)a9 accessoryType:(int64_t)a10 animated:(BOOL)a11 updateSeparators:(BOOL)a12
{
  BOOL v12 = a8;
  BOOL v14 = a6;
  BOOL v16 = a4;
  id v24 = a3;
  id v18 = a5;
  if ((*((unsigned char *)&self->_tableFlags + 5) & 0x10) != 0
    && ([v24 setAccessoryType:a10],
        [v24 _target],
        CGRect v19 = objc_claimAutoreleasedReturnValue(),
        v19,
        !v19))
  {
    [v24 _setTarget:self];
    [v24 _setAccessoryAction:sel__accessoryButtonAction_];
    if (!v14) {
      goto LABEL_10;
    }
  }
  else if (!v14)
  {
LABEL_10:
    [v24 _setShowsReorderControl:a9];
    [v24 setEditing:0 animated:a11];
    [v24 _setEditingStyle:0];
    [v24 _setShouldIndentWhileEditing:0];
    [v24 setWasSwiped:0];
    [v24 _setShowingDeleteConfirmation:0];
    double v22 = v24;
    double v21 = (void *)&self->_tableFlags + 2;
    uint64_t v23 = 4096;
    goto LABEL_11;
  }
  if (!v16) {
    goto LABEL_10;
  }
  uint64_t v20 = 0;
  double v21 = (void *)&self->_tableFlags + 2;
  if (v18 && (*((void *)&self->_tableFlags + 2) & 0x100000000000) != 0) {
    uint64_t v20 = [(NSIndexPath *)self->_swipedIndexPath isEqual:v18];
  }
  [v24 _setShowsReorderControl:a9];
  [v24 _setEditingStyle:a7];
  [v24 _setShouldIndentWhileEditing:v12];
  [v24 setWasSwiped:v20];
  [v24 _setShowingDeleteConfirmation:v20];
  [v24 setEditing:1 animated:a11];
  double v22 = v24;
  uint64_t v23 = 0x2000;
LABEL_11:
  [v22 _setMultiselecting:(*v21 & v23) != 0];
  if (v18 && a12)
  {
    [(UITableView *)self _updateSeparatorStateForCell:v24 atIndexPath:v18];
    [v24 _setNeedsSetup:0];
  }
}

void __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) alpha];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    if (v2 == *(double *)(v3 + 40)) {
      goto LABEL_17;
    }
  }
  else if (v2 == 0.0)
  {
    goto LABEL_18;
  }
  objc_msgSend(*(id *)(a1 + 32), "setAlpha:");
  double v4 = [*(id *)(a1 + 32) layer];
  char v5 = [v4 allowsGroupOpacity];
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(unsigned char *)(v6 + 13) = v5;
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      *(unsigned char *)(v7 + 12) = 1;
    }
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 3096);
  id v9 = [*(id *)(a1 + 32) traitCollection];
  uint64_t v10 = [v9 _userInterfaceRenderingMode];
  BOOL v12 = (v8 & 0x400000000) == 0 && v10 != 2;

  [v4 setAllowsGroupOpacity:v12];
  if ((_IsKindOfUITableViewCell(*(void **)(a1 + 32)) & 1) == 0)
  {
    char v13 = [v4 masksToBounds];
    uint64_t v14 = *(void *)(a1 + 40);
    if (v14) {
      *(unsigned char *)(v14 + 14) = v13;
    }
    [v4 setMasksToBounds:1];
  }

  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
LABEL_17:
    if (*(unsigned char *)(v3 + 11)) {
      goto LABEL_19;
    }
  }
LABEL_18:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;
LABEL_19:
  if (_IsKindOfUITableViewCell(*(void **)(a1 + 32)))
  {
    [*(id *)(a1 + 32) _setAnimating:1 clippingAdjacentCells:*(unsigned __int8 *)(a1 + 80)];
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15 && *(unsigned char *)(v15 + 9)) {
      [*(id *)(a1 + 48) _addContentSubview:*(void *)(a1 + 32) atBack:1];
    }
    BOOL v16 = *(void **)(a1 + 56);
    if (!v16
      || ([v16 fromValue],
          CGRect v17 = objc_claimAutoreleasedReturnValue(),
          [v17 CGRectValue],
          double MinX = CGRectGetMinX(v82),
          [*(id *)(*(void *)(a1 + 48) + 2408) bounds],
          double v19 = CGRectGetMinX(v83),
          v17,
          MinX == v19))
    {
      uint64_t v43 = *(double **)(a1 + 40);
      if (v43)
      {
        double v44 = v43[8];
        double v45 = v43[9];
        double v46 = v43[10];
        double v47 = v43[11];
      }
      else
      {
        double v45 = 0.0;
        double v46 = 0.0;
        double v47 = 0.0;
        double v44 = 0.0;
      }
      objc_msgSend(*(id *)(a1 + 32), "setFrame:", v44, v45, v46, v47);
    }
    else
    {
      uint64_t v20 = [*(id *)(a1 + 32) layer];
      double v21 = +[UIView _defaultUIViewAnimationForLayer:v20 forKey:@"position"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        v78[0] = MEMORY[0x1E4F143A8];
        v78[1] = 3221225472;
        v78[2] = __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_3;
        v78[3] = &unk_1E52D9F98;
        id v22 = *(id *)(a1 + 32);
        uint64_t v23 = *(void *)(a1 + 40);
        id v79 = v22;
        uint64_t v80 = v23;
        +[UIView performWithoutAnimation:v78];
        id v24 = (void *)[v21 copy];
        [v24 setKeyPath:@"position.y"];
        uint64_t v25 = NSNumber;
        char v26 = [v21 fromValue];
        [v26 CGPointValue];
        double v28 = [v25 numberWithDouble:v27];
        [v24 setFromValue:v28];

        [v20 removeAnimationForKey:@"position"];
        double v29 = [v21 delegate];
        [v24 setDelegate:v29];

        [v20 addAnimation:v24 forKey:@"position.y"];
        NSUInteger v30 = (void *)[*(id *)(a1 + 56) copy];
        [v30 setKeyPath:@"position.x"];
        CGFloat v31 = NSNumber;
        [*(id *)(a1 + 32) frame];
        double MidX = CGRectGetMidX(v84);
        CGFloat v33 = [*(id *)(a1 + 56) fromValue];
        [v33 CGRectValue];
        CGFloat v34 = [v31 numberWithDouble:MidX + CGRectGetMinX(v85)];
        [v30 setFromValue:v34];

        [v30 setDelegate:0];
        [v20 addAnimation:v30 forKey:@"position.x"];
      }
      else
      {
        id v55 = *(double **)(a1 + 40);
        if (v55)
        {
          double v56 = v55[8];
          double v57 = v55[9];
          double v58 = v55[10];
          double v59 = v55[11];
        }
        else
        {
          double v57 = 0.0;
          double v58 = 0.0;
          double v59 = 0.0;
          double v56 = 0.0;
        }
        objc_msgSend(*(id *)(a1 + 32), "setFrame:", v56, v57, v58, v59);
      }
    }
    double v60 = *(void **)(a1 + 32);
    double v61 = *(void **)(a1 + 48);
    if (v60 == (void *)v61[332] && !*(unsigned char *)(a1 + 81))
    {
      objc_msgSend(v61, "_animateSwipeOccurrenceAction:alongsideCell:animation:", *(void *)(a1 + 64));
      double v60 = *(void **)(a1 + 32);
    }
    [v60 layoutIfNeeded];
    id v62 = *(id *)(a1 + 32);
    uint64_t v63 = *(void *)(a1 + 40);
    if (!v63 || (id v64 = *(id *)(v63 + 32)) == 0)
    {
      uint64_t v71 = *(void *)(a1 + 48);
      unint64_t v72 = *(void *)(v71 + 3080);
      if ((v72 & 0x10000000000000) != 0)
      {
        uint64_t v73 = [*(id *)(a1 + 48) _editingStyleForRowAtIndexPath:0];
        uint64_t v74 = [*(id *)(a1 + 48) _shouldIndentWhileEditingForRowAtIndexPath:0];
        char v75 = [*(id *)(a1 + 48) _canReorderRowAtIndexPath:0];
        uint64_t v71 = *(void *)(a1 + 48);
      }
      else
      {
        uint64_t v74 = 0;
        uint64_t v73 = 0;
        char v75 = *(unsigned char *)(v71 + 3096) & 1;
      }
      LOWORD(v77) = 257;
      LOBYTE(v76) = v75;
      objc_msgSend((id)v71, "_setupCell:forEditing:atIndexPath:canEdit:editingStyle:shouldIndentWhileEditing:showsReorderControl:accessoryType:animated:updateSeparators:", v62, (v72 >> 52) & 1, 0, objc_msgSend(v62, "isEditing"), v73, v74, v76, objc_msgSend(v62, "accessoryType"), v77);
      double v65 = 0;
      goto LABEL_70;
    }
    double v65 = v64;
    uint64_t v66 = *(void *)(a1 + 40);
    if (!v66 || !*(unsigned char *)(v66 + 9))
    {
      if ([v62 _needsSetup])
      {
LABEL_61:
        uint64_t v69 = *(void *)(a1 + 40);
        if (v69) {
          BOOL v70 = *(unsigned __int8 *)(v69 + 10) != 0;
        }
        else {
          BOOL v70 = 0;
        }
        [*(id *)(a1 + 48) _setupCell:v62 forEditing:v70 atIndexPath:v65 animated:1 updateSeparators:1];
        goto LABEL_70;
      }
      uint64_t v67 = *(void *)(a1 + 40);
      if (v67)
      {
        int v68 = *(unsigned __int8 *)(v67 + 10) != 0;
        if (v68 != [v62 isEditing]) {
          goto LABEL_61;
        }
      }
      else if ([v62 isEditing])
      {
        goto LABEL_61;
      }
    }
LABEL_70:
    [v62 _setNeedsHeightCalculation:0];

    return;
  }
  [*(id *)(a1 + 48) _sectionContentInset];
  double v37 = v36;
  double v38 = v35;
  if (v36 <= 0.0 && v35 <= 0.0
    || ((uint64_t v48 = *(void *)(a1 + 40)) == 0 ? (v49 = 0) : (v49 = (*(_DWORD *)(v48 + 16) & 0xFFFFFFFE) == 4),
        (_IsKindOfUITableViewHeaderFooterView(*(void **)(a1 + 32)) & 1) != 0 || v49))
  {
    uint64_t v39 = *(double **)(a1 + 40);
    if (v39)
    {
      double v37 = v39[8];
      double v40 = v39[9];
      double v41 = v39[10];
      double v42 = v39[11];
    }
    else
    {
      double v37 = 0.0;
      double v40 = 0.0;
      double v41 = 0.0;
      double v42 = 0.0;
    }
  }
  else
  {
    id v50 = *(double **)(a1 + 40);
    if (v50)
    {
      double v40 = v50[9];
      double v51 = v50[10];
      double v42 = v50[11];
    }
    else
    {
      double v40 = 0.0;
      double v51 = 0.0;
      double v42 = 0.0;
    }
    double v41 = v51 - (v37 + v38);
  }
  objc_msgSend(*(id *)(a1 + 32), "setFrame:", v37, v40, v41, v42);
  [*(id *)(a1 + 32) layoutIfNeeded];
  if (objc_opt_respondsToSelector())
  {
    double v52 = *(void **)(a1 + 32);
    uint64_t v53 = *(void *)(a1 + 40);
    if (v53) {
      BOOL v54 = *(unsigned __int8 *)(v53 + 10) != 0;
    }
    else {
      BOOL v54 = 0;
    }
    [v52 setEditing:v54 animated:1];
  }
}

- (void)_updateAnimationDidStopWithOldVisibleViews:(id)a3 finished:(BOOL)a4 context:(id)a5
{
  BOOL v7 = a4;
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  uint64_t v10 = (id *)a5;
  double v11 = v10;
  if (v10)
  {
    uint64_t v12 = (uint64_t)v10[2] - 1;
    v10[2] = (id)v12;
    if (v12) {
      goto LABEL_89;
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  if (WeakRetained)
  {
    swipeToDeleteCell = (UITableViewCell *)*((void *)&self->_tableFlags + 1);

    if (((unint64_t)swipeToDeleteCell & 0x200000000000000) == 0)
    {
      [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:0 updateImmediatelyIfPossible:0];
      [(UITableView *)self _updateVisibleCellsNow:1];
    }
  }
  id v14 = v9;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  id v70 = v9;
  uint64_t v71 = v11;
  BOOL v69 = v7;
  if (v11) {
    id v15 = v11[1];
  }
  else {
    id v15 = 0;
  }
  id v16 = v15;
  uint64_t v17 = [v16 countByEnumeratingWithState:&v76 objects:v81 count:16];
  if (v17)
  {
    id v18 = (UITableViewCell *)v17;
    uint64_t v19 = *(void *)v77;
    do
    {
      swipeToDeleteCell = 0;
      do
      {
        if (*(void *)v77 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v20 = *(void *)(*((void *)&v76 + 1) + 8 * (void)swipeToDeleteCell);
        if (v20)
        {
          double v21 = (UIView *)*(id *)(v20 + 24);
          id v22 = v21;
          if (*(unsigned char *)(v20 + 12))
          {
            uint64_t v23 = [(UIView *)v21 layer];
            [v23 setAllowsGroupOpacity:*(unsigned __int8 *)(v20 + 13)];
            if ((_IsKindOfUITableViewCell(v22) & 1) == 0) {
              [v23 setMasksToBounds:*(unsigned __int8 *)(v20 + 14)];
            }
          }
          if (v22)
          {
            if (_IsKindOfUITableViewCell(v22))
            {
              id v24 = v22;
              if (([(NSMutableArray *)self->_visibleCells containsObject:v24] & 1) == 0)
              {
                [(UITableView *)v24 _setAnimating:0];
                id v25 = *(id *)(v20 + 32);
                [(UITableView *)self _reuseTableViewCell:v24 withIndexPath:v25 didEndDisplaying:1];
              }
              [(UITableView *)v24 _removeFloatingSeparator];
              [(UITableView *)v24 _removeInnerShadow];
LABEL_37:

              goto LABEL_41;
            }
            if (![(UITableView *)self _visibleHeaderViewsContainsView:v22]
              && ![(UITableView *)self _visibleFooterViewsContainsView:v22])
            {
              if (v22 != self->_tableHeaderView && v22 != self->_tableFooterView) {
                goto LABEL_29;
              }
              [(UITableView *)self _visibleBounds];
              CGFloat v27 = v26;
              CGFloat v29 = v28;
              CGFloat v31 = v30;
              CGFloat v33 = v32;
              if ([(UITableView *)self _shouldUseNewHeaderFooterBehavior])
              {
                [(UIView *)v22 frame];
                v84.origin.double x = v34;
                v84.origin.double y = v35;
                v84.size.double width = v36;
                v84.size.double height = v37;
                v83.origin.double x = v27;
                v83.origin.double y = v29;
                v83.size.double width = v31;
                v83.size.double height = v33;
                if (!CGRectIntersectsRect(v83, v84))
                {
LABEL_29:
                  double v38 = [(UIView *)v22 superview];
                  if (v38 == self)
                  {
                  }
                  else
                  {
                    uint64_t v39 = v38;
                    objc_opt_class();
                    char isKindOfClass = objc_opt_isKindOfClass();

                    if (isKindOfClass) {
                      goto LABEL_34;
                    }
                  }
                  [(UIView *)v22 removeFromSuperview];
                }
              }
            }
LABEL_34:
            double v41 = [(UIView *)v22 superview];
            if (v41 == self)
            {
            }
            else
            {
              id v24 = v41;
              double v42 = [(UIView *)v22 superview];
              if (v42 != self->_wrapperView)
              {

                goto LABEL_37;
              }
              uint64_t v43 = *((void *)&self->_tableFlags + 2);

              if ((v43 & 0x40000000000000) == 0)
              {
LABEL_41:
                [v14 removeObject:v22];
                goto LABEL_42;
              }
            }
            [(UITableView *)self _addContentSubview:v22 atBack:0];
            goto LABEL_41;
          }
        }
        else
        {
          id v22 = 0;
        }
LABEL_42:

        swipeToDeleteCell = (UITableViewCell *)((char *)swipeToDeleteCell + 1);
      }
      while (v18 != swipeToDeleteCell);
      uint64_t v44 = [v16 countByEnumeratingWithState:&v76 objects:v81 count:16];
      id v18 = (UITableViewCell *)v44;
    }
    while (v44);
  }

  swipedIndexPath = self->_swipedIndexPath;
  if (swipedIndexPath)
  {
    swipeToDeleteCell = self->_swipeToDeleteCell;
    BOOL v46 = swipeToDeleteCell != 0;
    if (!swipeToDeleteCell) {
      goto LABEL_51;
    }
    if (!v71)
    {
      swipeToDeleteCell = 0;
      LODWORD(swipedIndexPath) = 0;
      BOOL v46 = 1;
      goto LABEL_53;
    }
    double v47 = (UITableViewCell *)v71[4];
    if (swipeToDeleteCell == v47)
    {
LABEL_51:
      LODWORD(swipedIndexPath) = (*((unsigned char *)&self->_tableFlags + 23) & 0x20) == 0;
    }
    else
    {
      LODWORD(swipedIndexPath) = 0;
      BOOL v46 = 1;
      swipeToDeleteCell = v47;
    }
  }
  else
  {
    BOOL v46 = 0;
  }
LABEL_53:
  *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFFFFDLL | (2 * (((*((void *)&self->_tableFlags + 3) >> 1) & 1 | swipedIndexPath) & 1));
  if (v46) {

  }
  int64_t v48 = self->_updateAnimationCount - 1;
  self->_updateAnimationCount = v48;
  if (!v48)
  {
    [(UITableView *)self _endAnimatingCells];
    [(UITableView *)self _updateSeparatorStateForVisibleCells];
    if ((*((unsigned char *)&self->_tableFlags + 24) & 2) != 0) {
      [(UITableView *)self _cleanupStateFromDeleteConfirmation];
    }
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    if (v71) {
      id v49 = v71[1];
    }
    else {
      id v49 = 0;
    }
    id v50 = v49;
    uint64_t v51 = [v50 countByEnumeratingWithState:&v72 objects:v80 count:16];
    if (v51)
    {
      uint64_t v52 = v51;
      uint64_t v53 = *(void *)v73;
      do
      {
        uint64_t v54 = 0;
        do
        {
          if (*(void *)v73 != v53) {
            objc_enumerationMutation(v50);
          }
          uint64_t v55 = *(void *)(*((void *)&v72 + 1) + 8 * v54);
          if (v55)
          {
            id v56 = *(id *)(v55 + 24);
            double v57 = v56;
            if (v56)
            {
              if (_IsKindOfUITableViewCell(v56)
                && ([(NSMutableArray *)self->_visibleCells containsObject:v57] & 1) == 0)
              {
                id v58 = *(id *)(v55 + 32);
                [(UITableView *)self _reuseTableViewCell:v57 withIndexPath:v58 didEndDisplaying:1];
              }
              [v14 removeObject:v57];
            }
          }
          else
          {
            double v57 = 0;
          }

          ++v54;
        }
        while (v52 != v54);
        uint64_t v59 = [v50 countByEnumeratingWithState:&v72 objects:v80 count:16];
        uint64_t v52 = v59;
      }
      while (v59);
    }

    [(UITableView *)self _removeOrphanedViews:v14];
  }
  double v60 = [(UIView *)self traitCollection];
  uint64_t v61 = [v60 userInterfaceIdiom];

  double v11 = v71;
  if (v61 == 3) {
    [(UITableView *)self _highlightFirstVisibleRowIfAppropriate];
  }
  if (self->_focusedCell)
  {
    if (self->_focusedCellIndexPath
      && self->_focusedViewType == 1
      && (-[NSMutableArray containsObject:](self->_visibleCells, "containsObject:") & 1) == 0)
    {
      [(UITableView *)self _configureCellForDisplay:self->_focusedCell forIndexPath:self->_focusedCellIndexPath];
    }
    id v62 = [(UIView *)self traitCollection];
    uint64_t v63 = [v62 userInterfaceIdiom];

    double v11 = v71;
    if (v63 == 3)
    {
      id v64 = +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:self];
      double v65 = [v64 scrollManager];
      uint64_t v66 = [(UIScrollView *)self _focusTuple];
      [v65 animateOffsetOfEnvironmentScrollableContainer:v66 toShowFocusItem:self->_focusedCell];
    }
  }
  if (v11)
  {
    id v67 = v11[3];
    int v68 = v67;
    id v9 = v70;
    if (v67) {
      (*((void (**)(id, BOOL))v67 + 2))(v67, v69);
    }
  }
  else
  {
    int v68 = 0;
    id v9 = v70;
  }
  *((void *)&self->_tableFlags + 2) &= ~0x400000000uLL;
  [(UITableView *)self _updateContentSize];

LABEL_89:
}

- (BOOL)_hasHeaderFooterBelowRowAtIndexPath:(id)a3
{
  uint64_t v5 = [a3 section];
  int64_t v6 = [(UITableView *)self _numberOfSectionsUsingPresentationValues:1];
  if (v5 >= v6) {
    return 0;
  }
  int64_t v7 = v6;
  uint64_t v8 = [a3 row];
  if (v8 != [(UITableView *)self _numberOfRowsInSection:v5 usingPresentationValues:1]- 1)return 0; {
  BOOL v9 = 1;
  }
  if (((*((void *)&self->_tableFlags + 1) >> 45) & 3uLL) - 1 >= 2)
  {
    [(UITableView *)self _rectForFooterInSection:v5 usingPresentationValues:1];
    if (CGRectGetHeight(v14) <= 0.0)
    {
      if (v5 != v7 - 1 || ([(UIView *)self->_tableFooterView frame], CGRectGetHeight(v15) <= 0.0))
      {
        for (uint64_t i = v5 + 1; i < v7; ++i)
        {
          [(UITableView *)self _rectForHeaderInSection:i usingPresentationValues:1];
          if (CGRectGetHeight(v16) > 0.0)
          {
            [(UITableView *)self _paddingAboveSectionHeaders];
            return v13 == 0.0;
          }
          uint64_t v11 = [(UITableView *)self _numberOfRowsInSection:i usingPresentationValues:1];
          BOOL v9 = 0;
          if (v11 >= 1) {
            return v9;
          }
        }
        return 0;
      }
    }
  }
  return v9;
}

- (void)_updateSeparatorStateForCell:(id)a3 atIndexPath:(id)a4
{
  if (a4)
  {
    id v6 = a4;
    id v8 = a3;
    [(UITableView *)self _updateSeparatorStyleForCell:v8 atIndexPath:v6];
    objc_msgSend(v8, "_setDrawsSeparatorAtTopOfSection:", -[UITableView _shouldDrawSeparatorAtTopOfSectionForCellAtIndexPath:](self, "_shouldDrawSeparatorAtTopOfSectionForCellAtIndexPath:", v6));
    objc_msgSend(v8, "_setDrawsSeparatorAtBottomOfSection:", -[UITableView _shouldDrawSeparatorAtBottomOfSectionForCellAtIndexPath:](self, "_shouldDrawSeparatorAtBottomOfSectionForCellAtIndexPath:", v6));
    objc_msgSend(v8, "_setShouldHaveFullLengthBottomSeparator:", -[UITableView _bottomSeparatorInsetBehaviorForCellAtIndexPath:](self, "_bottomSeparatorInsetBehaviorForCellAtIndexPath:", v6) == 2);
    int64_t v7 = [(UITableView *)self _topSeparatorInsetBehaviorForCellAtIndexPath:v6];

    [v8 _setShouldHaveFullLengthTopSeparator:v7 == 2];
    [v8 _setTopSeparatorFollowsLayoutMargins:v7 == 1];
  }
}

- (int64_t)_topSeparatorInsetBehaviorForCellAtIndexPath:(id)a3
{
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4
    && (uint64_t v6 = [v4 section],
        v6 < -[UITableView _numberOfSectionsUsingPresentationValues:](self, "_numberOfSectionsUsingPresentationValues:", 1))&& ![v5 row])
  {
    unint64_t v9 = *((void *)&self->_tableFlags + 1);
    if ((v9 & 0x400000) != 0)
    {
      uint64_t v10 = [(UITableView *)self _delegateProxy];
      int v11 = objc_msgSend(v10, "tableView:shouldHaveFullLengthTopSeparatorForSection:", self, objc_msgSend(v5, "section"));

      if (v11) {
        int64_t v7 = 2;
      }
      else {
        int64_t v7 = 0;
      }
    }
    else if (((v9 >> 45) & 3) - 1 >= 2)
    {
      int64_t v7 = [(UITableView *)self _shouldDrawTopSeparatorDueToMergedBarForCellAtIndexPath:v5] ^ 1;
    }
    else
    {
      int64_t v7 = 2;
    }
  }
  else
  {
    int64_t v7 = 0;
  }

  return v7;
}

- (BOOL)_shouldDrawSeparatorAtTopOfSectionForCellAtIndexPath:(id)a3
{
  id v4 = a3;
  if ((*((unsigned char *)&self->_tableFlags + 10) & 0x10) != 0)
  {
    uint64_t v6 = [(UITableView *)self _delegateProxy];
    char v5 = objc_msgSend(v6, "tableView:shouldDrawTopSeparatorForSection:", self, objc_msgSend(v4, "section"));

    goto LABEL_7;
  }
  if ([(UITableView *)self _shouldDrawTopSeparatorDueToMergedBarForCellAtIndexPath:v4])
  {
    goto LABEL_3;
  }
  if ((*((unsigned char *)&self->_tableFlags + 22) & 2) == 0) {
    goto LABEL_6;
  }
  if (((*((void *)&self->_tableFlags + 1) >> 45) & 3uLL) - 1 < 2)
  {
LABEL_3:
    char v5 = 1;
    goto LABEL_7;
  }
  if ([(UITableView *)self _headerFooterPinningBehavior] != 1
    || (char v5 = 1,
        -[UITableView _rectForHeaderInSection:usingPresentationValues:](self, "_rectForHeaderInSection:usingPresentationValues:", [v4 section], 1), CGRectGetHeight(v8) <= 0.0))
  {
LABEL_6:
    char v5 = 0;
  }
LABEL_7:

  return v5;
}

- (BOOL)_shouldDrawSeparatorAtBottomOfSectionForCellAtIndexPath:(id)a3
{
  id v4 = a3;
  char v5 = v4;
  unint64_t v6 = *((void *)&self->_tableFlags + 1);
  if ((v6 & 0x200000) != 0)
  {
    CGRect v8 = [(UITableView *)self _delegateProxy];
    char v7 = objc_msgSend(v8, "tableView:shouldDrawBottomSeparatorForSection:", self, objc_msgSend(v5, "section"));
LABEL_11:

    goto LABEL_12;
  }
  if (((v6 >> 45) & 3) - 1 >= 2)
  {
    CGRect v8 = objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", -[UITableView _numberOfRowsInSection:usingPresentationValues:](self, "_numberOfRowsInSection:usingPresentationValues:", objc_msgSend(v4, "section"), 1)- 1, objc_msgSend(v4, "section"));
    BOOL v9 = [(UITableView *)self _hasHeaderFooterBelowRowAtIndexPath:v8];
    if (v9 && [(UITableView *)self _headerFooterPinningBehavior] == 1) {
      char v7 = 1;
    }
    else {
      char v7 = [(UITableView *)self _headerFooterPinningBehavior] != 2 && !v9;
    }
    goto LABEL_11;
  }
  char v7 = 1;
LABEL_12:

  return v7;
}

- (int64_t)_bottomSeparatorInsetBehaviorForCellAtIndexPath:(id)a3
{
  id v4 = a3;
  char v5 = v4;
  if (!v4
    || (uint64_t v6 = [v4 section],
        v6 >= -[UITableView _numberOfSectionsUsingPresentationValues:](self, "_numberOfSectionsUsingPresentationValues:", 1))|| (uint64_t v7 = [v5 row], v7 != -[UITableView _numberOfRowsInSection:usingPresentationValues:](self, "_numberOfRowsInSection:usingPresentationValues:", objc_msgSend(v5, "section"), 1)- 1))
  {
LABEL_7:
    int64_t v8 = 0;
    goto LABEL_8;
  }
  if ((*((unsigned char *)&self->_tableFlags + 10) & 0x80) == 0)
  {
    if ([(UITableView *)self _hasHeaderFooterBelowRowAtIndexPath:v5]
      && (unint64_t)([(UITableView *)self _headerFooterPinningBehavior] - 1) >= 2)
    {
      int64_t v8 = 2;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v10 = [(UITableView *)self _delegateProxy];
  int v11 = objc_msgSend(v10, "tableView:shouldHaveFullLengthBottomSeparatorForSection:", self, objc_msgSend(v5, "section"));

  if (v11) {
    int64_t v8 = 2;
  }
  else {
    int64_t v8 = 0;
  }
LABEL_8:

  return v8;
}

- (int64_t)_numberOfRowsInSection:(int64_t)a3 usingPresentationValues:(BOOL)a4
{
  if (!a4
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && ([(_UITableViewShadowUpdatesController *)shadowUpdatesController dataSourceBeforeShadowUpdates], (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    int64_t v8 = v7;
    int64_t v9 = [v7 numberOfItemsInSection:a3];

    return v9;
  }
  else
  {
    [(UITableView *)self _ensureRowDataIsLoaded];
    rowData = self->_rowData;
    return -[UITableViewRowData numberOfRowsInSection:]((uint64_t)rowData, a3);
  }
}

- (int64_t)_numberOfSectionsUsingPresentationValues:(BOOL)a3
{
  if (!a3
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && ([(_UITableViewShadowUpdatesController *)shadowUpdatesController dataSourceBeforeShadowUpdates], (char v5 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    uint64_t v6 = v5;
    int64_t v7 = [v5 numberOfSections];

    return v7;
  }
  else
  {
    [(UITableView *)self _ensureRowDataIsLoaded];
    rowData = self->_rowData;
    if (rowData) {
      return rowData->_numSections;
    }
    else {
      return 0;
    }
  }
}

- (void)_ensureRowDataIsLoaded
{
  if (!self->_rowData) {
    [(UITableView *)self _updateRowData];
  }
}

- (BOOL)_shouldDrawTopSeparatorDueToMergedBarForCellAtIndexPath:(id)a3
{
  id v4 = a3;
  if ((*((unsigned char *)&self->_tableFlags + 13) & 0x60) != 0
    || ![(UIScrollView *)self _shouldAdjustLayoutToDrawTopSeparator]
    || self->_tableHeaderView
    || self->_tableHeaderBackgroundView
    || !-[UITableViewRowData numberOfRows]((uint64_t)self->_rowData))
  {
    char v5 = 0;
  }
  else
  {
    int64_t v7 = -[UITableViewRowData indexPathForRowAtGlobalRow:](&self->_rowData->super.isa, 0);
    int64_t v8 = v7;
    if (v7
      && (uint64_t v9 = [v7 section], v9 == objc_msgSend(v4, "section"))
      && (uint64_t v10 = [v8 row], v10 == objc_msgSend(v4, "row")))
    {
      if ([v4 section] < 0)
      {
        char v5 = 1;
      }
      else
      {
        uint64_t v11 = 0;
        do
        {
          BOOL v12 = [(UITableView *)self _delegateWantsHeaderForSection:v11];
          if (v12) {
            break;
          }
        }
        while (v11++ < [v4 section]);
        char v5 = !v12;
      }
    }
    else
    {
      char v5 = 0;
    }
  }
  return v5;
}

- (void)_updateIndexFrame
{
  if (self->_indexContainerView)
  {
    [(UIView *)self bounds];
    double v4 = v3;
    double v6 = v5;
    double v8 = v7;
    double v10 = v9;
    [(UITableView *)self _insetsForIndexBar];
    double v12 = v11;
    double v14 = v13;
    double v16 = v15;
    double v18 = v17;
    uint64_t v19 = [(UIView *)self traitCollection];
    uint64_t v20 = [v19 userInterfaceIdiom];

    if (v20 == 3)
    {
      double v21 = [(UIView *)self window];
      id v22 = [v21 _screen];
      uint64_t v23 = [v22 _capabilityForKey:@"UIScreenCapabilityTouchLevelsKey"];
      if ([v23 integerValue] == 2)
      {
      }
      else
      {
        id v24 = [(UIScrollView *)self _staticScrollBar];
        id v25 = [v24 superview];

        if (v25)
        {
          double v26 = (v10 - (v12 + v16) + -64.0) * 0.5;
          double v12 = v12 + v26;
          double v16 = v16 + v26;
        }
      }
    }
    CGFloat v76 = v4;
    CGFloat v77 = v10;
    double v27 = v4 + v14;
    double v78 = v8;
    double v28 = v8 - (v18 + v14);
    double v29 = v6;
    double v30 = v6 + v12;
    double v31 = v10 - (v16 + v12);
    int v32 = *((_DWORD *)&self->super.super._viewFlags + 4);
    -[UITableViewIndex sizeThatFits:](self->_index, "sizeThatFits:", v28, v31);
    double v34 = v33;
    double v36 = v35;
    double v37 = v27;
    double v38 = v30;
    double v39 = v28;
    double v40 = v31;
    if ((v32 & 0x80000) != 0) {
      double MinX = CGRectGetMinX(*(CGRect *)&v37);
    }
    else {
      double MinX = CGRectGetMaxX(*(CGRect *)&v37) - v34;
    }
    v81.origin.double x = v27;
    v81.origin.double y = v30;
    v81.size.double width = v28;
    v81.size.double height = v31;
    double MinY = CGRectGetMinY(v81);
    uint64_t v43 = *((void *)&self->_tableFlags + 2);
    if ((v43 & 0x800000) != 0)
    {
      if ((v43 & 0x1000000) == 0)
      {
        if ((v32 & 0x80000) != 0)
        {
          double MinX = -v34;
        }
        else
        {
          [(UIView *)self bounds];
          double MinX = CGRectGetMaxX(v82);
        }
      }
      [(UIView *)self->_index bounds];
      CGFloat v44 = v29;
      if (v36 != v45)
      {
        [(UIView *)self->_index bounds];
        double MinY = MinY + v36 - v46;
        [(UIView *)self->_index bounds];
        double v36 = v47;
      }
    }
    else
    {
      CGFloat v44 = v29;
    }
    if (v20 == 3)
    {
      [(UITableView *)self _externalIndexWidth];
      double v34 = v48;
      id v49 = [(UIView *)self window];
      id v50 = [v49 _screen];
      uint64_t v51 = [v50 _capabilityForKey:@"UIScreenCapabilityTouchLevelsKey"];
      uint64_t v52 = [v51 integerValue];

      if (v52 != 2)
      {
        uint64_t v53 = [(UIScrollView *)self _staticScrollBar];
        if (!v53) {
          goto LABEL_23;
        }
        uint64_t v54 = (void *)v53;
        uint64_t v55 = [(UIScrollView *)self _staticScrollBar];
        id v56 = [v55 superview];

        if (v56)
        {
          double v57 = [(UIScrollView *)self _staticScrollBar];
          [v57 centeringBounds];
          double MinX = round(v59 + (v58 - v34) * 0.5);

          double v60 = [(UIScrollView *)self _staticScrollBar];
          [v60 centeringBounds];
          double MinY = round(v62 + (v61 - v36) * 0.5);
        }
        else
        {
LABEL_23:
          double MinX = v78 - v34;
        }
      }
    }
    if ((*((unsigned char *)&self->_tableFlags + 7) & 0x10) != 0)
    {
      uint64_t v63 = [(UITableView *)self _delegateProxy];
      objc_msgSend(v63, "tableView:frameForSectionIndexGivenProposedFrame:", self, MinX, MinY, v34, v36);
      double MinX = v64;
      double MinY = v65;
      double v34 = v66;
      double v36 = v67;
    }
    double v68 = 0.0;
    if (v20 == 3)
    {
      double v69 = 0.0;
    }
    else if ((v32 & 0x80000) != 0)
    {
      v85.origin.double x = MinX;
      v85.origin.double y = MinY;
      v85.size.double width = v34;
      v85.size.double height = v36;
      double v72 = CGRectGetMinX(v85);
      v86.origin.double x = v76;
      v86.size.double height = v77;
      v86.origin.double y = v44;
      v86.size.double width = v78;
      CGFloat v73 = CGRectGetMinX(v86);
      double v69 = 0.0;
      double v68 = fmax(v72 - v73, 0.0);
      double MinX = MinX - v68;
      double v34 = v34 + v68;
    }
    else
    {
      v83.origin.double x = v76;
      v83.size.double height = v77;
      v83.origin.double y = v44;
      v83.size.double width = v78;
      double MaxX = CGRectGetMaxX(v83);
      v84.origin.double x = MinX;
      v84.origin.double y = MinY;
      v84.size.double width = v34;
      v84.size.double height = v36;
      CGFloat v71 = CGRectGetMaxX(v84);
      double v68 = 0.0;
      double v69 = fmax(MaxX - v71, 0.0);
      double v34 = v34 + v69;
    }
    -[UITableViewIndex setDrawingInsets:](self->_index, "setDrawingInsets:", 0.0, v68, 0.0, v69);
    -[UIView setFrame:](self->_indexContainerView, "setFrame:", MinX, MinY, v34, v36);
    if ([(UITableView *)self _isShowingIndex])
    {
      long long v74 = [(UITableView *)self tableHeaderView];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if (isKindOfClass)
      {
        id v79 = [(UITableView *)self tableHeaderView];
        [v79 _updateInsetsForTableView:self];
      }
    }
  }
}

- (void)_updateContentSize
{
  uint64_t v3 = dyld_program_sdk_at_least();
  [(UITableView *)self _updateContentSizeSkippingContentOffsetAdjustment:v3];
}

- (CGRect)_rectForFooterInSection:(int64_t)a3 usingPresentationValues:(BOOL)a4
{
  int64_t v4 = a3;
  if (!a4
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && (int64_t v4 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController sectionAfterShadowUpdates:a3], v4 == 0x7FFFFFFFFFFFFFFFLL))
  {
    double v7 = *MEMORY[0x1E4F1DB28];
    double v8 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
    double v9 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
    double v10 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  }
  else
  {
    [(UITableView *)self _ensureRowDataIsLoaded];
    double v7 = -[UITableViewRowData rectForFooterInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, v4, 0);
  }
  result.size.double height = v10;
  result.size.double width = v9;
  result.origin.double y = v8;
  result.origin.double x = v7;
  return result;
}

- (void)_reuseTableViewCell:(id)a3 withIndexPath:(id)a4 didEndDisplaying:(BOOL)a5
{
  if (self->_firstResponderView != a3 && self->_focusedCell != a3)
  {
    BOOL v6 = a5;
    id v8 = a3;
    id v11 = v8;
    if (a4)
    {
      id v9 = [(NSMutableDictionary *)self->_tentativeCells objectForKey:a4];

      id v8 = v11;
      if (v9 == v11)
      {
        [(NSMutableDictionary *)self->_tentativeCells removeObjectForKey:a4];
        id v8 = v11;
      }
    }
    if (-[_UITableViewSubviewManager shouldDeferReuseOfCell:]((uint64_t)self->_subviewManager, (uint64_t)v8))
    {
      -[_UITableViewSubviewManager cellReadyForReuse:withIndexPath:didEndDisplaying:]((uint64_t)self->_subviewManager, (uint64_t)v11, a4, v6);
    }
    else
    {
      [(UITableView *)self _reuseTableViewSubview:v11 viewType:1];
      double v10 = v11;
      if (a4 && v11 && v6)
      {
        [(UITableView *)self _notifyDidEndDisplayingCell:v11 forIndexPath:a4];
        double v10 = v11;
      }
      [v10 _setNeedsSetup:1];
    }
  }
}

- (void)_reuseTableViewSubview:(id)a3 viewType:(int)a4
{
  uint64_t v4 = *(void *)&a4;
  BOOL v6 = (UIView *)a3;
  double v7 = v6;
  if (self->_firstResponderView != v6 && self->_focusedCell != v6)
  {
    uint64_t v19 = v6;
    if (v4 == 1
      && (-[_UITableViewSubviewManager indexPathForPrefetchedCell:]((id *)&self->_subviewManager->super.isa, (uint64_t)v6), id v8 = objc_claimAutoreleasedReturnValue(), v8, v7 = v19, v8))
    {
      [(UIView *)v19 _setHiddenForReuse:1];
    }
    else
    {
      id v9 = [(UIView *)v7 reuseIdentifier];
      if (v9)
      {
        double v10 = [(UITableView *)self _cellReuseMapForType:v4];
        id v11 = [v10 objectForKey:v9];
        double v12 = v11;
        if (!v11 || ([v11 containsObject:v19] & 1) == 0)
        {
          [(UIView *)self bounds];
          rowData = self->_rowData;
          if (rowData) {
            minimumRowdouble Height = rowData->_minimumRowHeight;
          }
          else {
            minimumRowdouble Height = 0.0;
          }
          unint64_t v16 = (unint64_t)(ceil(v13 / fmax(fmin(minimumRowHeight, v13), 10.0)) + 1.0);
          if (!v12)
          {
            double v12 = (void *)[objc_alloc(MEMORY[0x1E4F1CA70]) initWithCapacity:v16];
            [v10 setObject:v12 forKey:v9];
          }
          if ([v12 count] < v16) {
            [v12 addObject:v19];
          }
        }
        int v17 = [v12 containsObject:v19];
      }
      else
      {
        int v17 = 0;
      }
      if (v4 == 1)
      {
        double v18 = v19;
        [(UIView *)v18 _setIndexPath:0];
        [(UIView *)v18 _willEnterReusePool];
      }
      if (v17) {
        [(UIView *)v19 _setHiddenForReuse:1];
      }
      else {
        [(UIView *)v19 removeFromSuperview];
      }
      [(UITableViewWrapperView *)self->_wrapperView _unstickView:v19];
    }
    double v7 = v19;
  }
}

- (void)_clearNeedsRecomputeHeightsForInvalidatedElements
{
  intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
  self->_intrinsicContentSizeInvalidationContext = 0;

  *((void *)&self->_tableFlags + 3) &= 0xFFFFF9FFFFFFFFFFLL;
}

id __46__UITableView__updateWithItems_updateSupport___block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        double v10 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
        if (v10) {
          objc_msgSend(v4, "addObject:", v10, (void)v12);
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }

  return v4;
}

- (void)_notifyDidEndDisplayingCell:(id)a3 forIndexPath:(id)a4
{
  id v8 = a3;
  id v6 = a4;
  [v8 _notifyIsDisplaying:0];
  if ((*((unsigned char *)&self->_tableFlags + 3) & 0x20) != 0)
  {
    uint64_t v7 = [(UITableView *)self _delegateProxy];
    [v7 tableView:self didEndDisplayingCell:v8 forRowAtIndexPath:v6];
  }
}

- (void)_resetOrRebaseFocusedViewWithUpdateSupport:(id)a3 indexPathMapping:(id)a4
{
  id v16 = a3;
  id v6 = (void (**)(id, NSIndexPath *))a4;
  *((void *)&self->_tableFlags + 3) &= ~0x200uLL;
  if (!self->_focusedCellIndexPath) {
    goto LABEL_16;
  }
  uint64_t v7 = self->_focusedCell;
  uint64_t focusedViewType = self->_focusedViewType;
  id v9 = self->_focusedCellIndexPath;
  if ([(UITableView *)self _isFocusedViewInDeletedSectionOrRow:v16])
  {
    *((void *)&self->_tableFlags + 3) |= 0x200uLL;
    focusedCell = self->_focusedCell;
    self->_focusedCell = 0;

    self->_uint64_t focusedViewType = 0;
    focusedCellIndexPath = self->_focusedCellIndexPath;
    self->_focusedCellIndexPath = 0;
  }
  if (v7 && !self->_focusedCell) {
    [(UITableView *)self _reusePreviouslyFocusedTableViewSubviewIfNeeded:v7 viewType:focusedViewType indexPath:v9];
  }
  if ((*((unsigned char *)&self->_tableFlags + 25) & 2) == 0)
  {
    int v12 = self->_focusedViewType;
    if ((v12 - 2) < 2)
    {
      uint64_t v13 = objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, -[_UITableViewUpdateSupport finalSectionIndexForInitialSectionIndex:]((uint64_t)v16, -[NSIndexPath section](self->_focusedCellIndexPath, "section")));
LABEL_12:
      long long v14 = (void *)v13;
      [(UITableView *)self _setFocusedCellIndexPath:v13];

      goto LABEL_13;
    }
    if (v12 == 1)
    {
      uint64_t v13 = v6[2](v6, self->_focusedCellIndexPath);
      goto LABEL_12;
    }
  }
LABEL_13:
  if (![(UITableView *)self _indexPathIsValid:self->_focusedCellIndexPath])
  {
    long long v15 = self->_focusedCellIndexPath;
    self->_focusedCellIndexPath = 0;

    self->_uint64_t focusedViewType = 0;
  }

LABEL_16:
}

- (BOOL)_visibleHeaderViewsContainsView:(id)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v5 = [(NSMutableDictionary *)self->_visibleHeaderViews objectEnumerator];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v11;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v5);
          }
          if ([*(id *)(*((void *)&v10 + 1) + 8 * i) isEqual:v4])
          {
            LOBYTE(v6) = 1;
            goto LABEL_12;
          }
        }
        uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

- (CGRect)_rectForHeaderInSection:(int64_t)a3 usingPresentationValues:(BOOL)a4
{
  int64_t v4 = a3;
  if (!a4
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && (int64_t v4 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController sectionAfterShadowUpdates:a3], v4 == 0x7FFFFFFFFFFFFFFFLL))
  {
    double v7 = *MEMORY[0x1E4F1DB28];
    double v8 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
    double v9 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
    double v10 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  }
  else
  {
    [(UITableView *)self _ensureRowDataIsLoaded];
    double v7 = -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, v4, 0);
  }
  result.size.double height = v10;
  result.size.double width = v9;
  result.origin.double y = v8;
  result.origin.double x = v7;
  return result;
}

- (BOOL)_clearBlendingViewAllowed
{
  return 1;
}

uint64_t __59__UITableView__performBatchUpdates_withContext_completion___block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v3, a2);
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

- (void)_removeOrphanedViews:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 count])
  {
    id v5 = [(UITableView *)self _visibleViews];
    [v4 minusHashTable:v5];
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v6 = v4;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * v10++), "removeFromSuperview", (void)v11);
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
}

- (void)_applyContentSizeDeltaImmediately:(double)a3
{
  [(UIScrollView *)self contentSize];
  double v6 = v5;
  double v8 = v7 + a3;
  if ([(UIScrollView *)self isScrollAnimating]
    || [(UIScrollView *)self isDecelerating]
    || [(UIScrollView *)self isDragging])
  {
    -[UITableView setContentSize:skipContentOffsetAdjustment:](self, "setContentSize:skipContentOffsetAdjustment:", 1, v6, v8);
  }
  else
  {
    [(UIScrollView *)self contentOffset];
    double v10 = v9;
    -[UITableView _validContentOffsetForProposedOffset:](self, "_validContentOffsetForProposedOffset:");
    double v12 = v11;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __49__UITableView__applyContentSizeDeltaImmediately___block_invoke;
    aBlock[3] = &unk_1E52DD178;
    void aBlock[4] = self;
    *(double *)&aBlock[5] = v6;
    *(double *)&aBlock[6] = v8;
    long long v13 = (void (**)(void))_Block_copy(aBlock);
    if (v10 == v12 && +[UIView areAnimationsEnabled]) {
      [(UIScrollView *)self performWhileAnimatingAutomaticContentOffsetAdjustments:v13];
    }
    else {
      v13[2](v13);
    }
  }
  [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1];
  [(UITableView *)self _adjustTableHeaderAndFooterViews];
}

- (void)_updateVisibleCellsNow:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  p_tableFlags = &self->_tableFlags;
  unint64_t v7 = *((void *)&self->_tableFlags + 3);
  if ((v7 & 0x100000000) != 0)
  {
    uint64_t v8 = *((void *)&self->_tableFlags + 2);
    uint64_t v9 = *((void *)&self->_tableFlags + 3);
  }
  else
  {
    if ([(UITableView *)self _isUpdating] || self->_tableReloadingSuspendedCount > 0 || !self->_rowData) {
      return;
    }
    uint64_t v8 = *((void *)p_tableFlags + 2);
    uint64_t v9 = *((void *)p_tableFlags + 3);
  }
  SEL v80 = a2;
  *((void *)p_tableFlags + 2) = v8;
  *((void *)p_tableFlags + 3) = v9 | 0x100000000;
  [(UIScrollView *)self contentOffset];
  double v85 = v11;
  double v86 = v10;
  [(UIScrollView *)self contentSize];
  double v13 = v12;
  if ((v7 & 0x100000000) == 0)
  {
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &_updateVisibleCellsNow____s_category);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      CGFloat v73 = *(NSObject **)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
      {
        long long v74 = v73;
        LODWORD(slice.origin.x) = 138412802;
        *(void *)((char *)&slice.origin.x + 4) = objc_opt_class();
        WORD2(slice.origin.y) = 2048;
        *(void *)((char *)&slice.origin.y + 6) = self;
        HIWORD(slice.size.width) = 2048;
        *(void *)&slice.size.double height = v3;
        id v75 = *(id *)((char *)&slice.origin.x + 4);
        _os_log_impl(&dword_1853B0000, v74, OS_LOG_TYPE_ERROR, "<%@ %p> _updateVisibleCellsNow:%ld starting", (uint8_t *)&slice, 0x20u);
      }
    }
    uint64_t v15 = [(UIView *)self window];

    if (!v15) {
      UITableViewAlertForLayoutOutsideViewHierarchy(self);
    }
    [(UITableView *)self _updateShowScrollIndicatorsFlag];
    [(UITableView *)self _reapTentativeViews];
  }
  CGRect v84 = [(UIView *)self _focusSystem];
  [v84 _lockEnvironment:self];
  [(UITableView *)self _suspendReloads];
  BOOL v16 = (*((unsigned char *)p_tableFlags + 14) & 0x80) == 0 && v3;
  BOOL v83 = v16;
  if (v16) {
    [(UITableView *)self _setNeedsVisibleCellsUpdate:0 withFrames:0];
  }
  [(UITableView *)self _applyCoalescedContentSizeUpdates];
  uint64_t v17 = -[UITableViewRowData numberOfRows]((uint64_t)self->_rowData);
  [(UITableView *)self _contentInset];
  double v19 = v18;
  [(UITableView *)self _visibleBounds];
  double MinY = CGRectGetMinY(v101);
  p_visibleBounds = &self->_visibleBounds;
  double v22 = CGRectGetMinY(self->_visibleBounds);
  if ((v7 & 0x100000000) != 0)
  {
    [(UITableView *)self _visibleBounds];
    double v24 = v23;
    double v26 = v25;
    double v28 = v27;
    double v30 = v29;
LABEL_28:
    NSUInteger location = -[UITableView _visibleGlobalRowsInRect:](self, "_visibleGlobalRowsInRect:", v24, v26, v28, v30);
    goto LABEL_29;
  }
  double v31 = v22;
  if ((*((unsigned char *)p_tableFlags + 24) & 4) != 0)
  {
    [(UITableView *)self _ensurePreReloadVisibleRowRangeIsValidWithPostReloadRowCount:v17];
    [(UIScrollView *)self contentOffset];
    double v33 = v32;
    [(UITableView *)self _contentOffsetYForRestoringScrollPositionOfFirstVisibleRowWithContentInsetTop:0 canGuessHeights:v19];
    -[UITableView setContentOffset:](self, "setContentOffset:", v33, v34);
  }
  [(UITableView *)self _visibleBounds];
  double v24 = v35;
  double v26 = v36;
  double v28 = v37;
  double v30 = v38;
  if (MinY >= v31 || ![(UITableView *)self _estimatesHeights]) {
    goto LABEL_28;
  }
  memset(&slice, 0, sizeof(slice));
  memset(&remainder, 0, sizeof(remainder));
  v102.origin.CGFloat x = p_visibleBounds->origin.x;
  v102.origin.CGFloat y = self->_visibleBounds.origin.y;
  v102.size.double width = self->_visibleBounds.size.width;
  v102.size.double height = self->_visibleBounds.size.height;
  double v39 = CGRectGetMinY(v102);
  v103.origin.CGFloat x = v24;
  v103.origin.CGFloat y = v26;
  v103.size.double width = v28;
  v103.size.double height = v30;
  CGFloat v40 = v39 - CGRectGetMinY(v103);
  v104.origin.CGFloat x = v24;
  v104.origin.CGFloat y = v26;
  v104.size.double width = v28;
  v104.size.double height = v30;
  CGRectDivide(v104, &slice, &remainder, v40, CGRectMinYEdge);
  [(UIScrollView *)self contentSize];
  double v42 = v41;
  NSUInteger v43 = -[UITableView _visibleGlobalRowsInRect:canGuess:](self, "_visibleGlobalRowsInRect:canGuess:", 0, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
  NSUInteger v45 = v44;
  [(UITableView *)self _applyCoalescedContentSizeUpdates];
  [(UIScrollView *)self contentSize];
  if (v46 - v42 != 0.0)
  {
    [(UIScrollView *)self contentOffset];
    -[UITableView setContentOffset:](self, "setContentOffset:");
  }
  NSUInteger v48 = -[UITableView _visibleGlobalRowsInRect:](self, "_visibleGlobalRowsInRect:", remainder.origin.x, remainder.origin.y, remainder.size.width, remainder.size.height);
  NSUInteger v49 = v47;
  if (!v45) {
    goto LABEL_30;
  }
  if (!v47)
  {
    NSUInteger v49 = v45;
    NSUInteger v48 = v43;
    goto LABEL_30;
  }
  v98.NSUInteger location = v43;
  v98.NSUInteger length = v45;
  v100.NSUInteger location = v48;
  v100.NSUInteger length = v49;
  NSRange v52 = NSUnionRange(v98, v100);
  NSUInteger length = v52.length;
  NSUInteger location = v52.location;
LABEL_29:
  NSUInteger v48 = location;
  NSUInteger v49 = length;
LABEL_30:
  unsigned int focusedViewType = self->_focusedViewType;
  if ((*((unsigned char *)p_tableFlags + 25) & 4) != 0)
  {
    CGRect v81 = self->_focusedCell;
    focusedCell = self->_focusedCell;
    self->_focusedCell = 0;

    if (![(UITableView *)self remembersLastFocusedIndexPath]
      || !self->_focusedCellIndexPath
      || self->_focusedViewType != 1)
    {
      self->_unsigned int focusedViewType = 0;
    }
  }
  else
  {
    CGRect v81 = 0;
  }
  do
  {
    -[UITableView _calculateVisibleCellsUpdateRangesForGlobalRowRange:createIfNecessary:](self, "_calculateVisibleCellsUpdateRangesForGlobalRowRange:createIfNecessary:", v48, v49, v3);
    CGFloat x = slice.origin.x;
    CGFloat y = slice.origin.y;
    remainder.origin = (CGPoint)slice.size;
    remainder.CGSize size = size;
    long long v89 = v93;
    long long v90 = v94;
    *(_DWORD *)CGFloat v87 = v96[0];
    *(_DWORD *)&v87[3] = *(_DWORD *)((char *)v96 + 3);
    char v56 = v95;
    if (*(void *)&slice.origin.y + *(void *)&slice.origin.x > (unint64_t)v17)
    {
      id v79 = [MEMORY[0x1E4F28B00] currentHandler];
      *(CGFloat *)&v99.NSUInteger location = x;
      *(CGFloat *)&v99.NSUInteger length = y;
      double v78 = NSStringFromRange(v99);
      [v79 handleFailureInMethod:v80, self, @"UITableView.m", 3255, @"UITableView is trying to layout cells with a global row range of %@ when there are only %ld rows - this is a UIKit bug", v78, v17 object file lineNumber description];
    }
    slice.origin.CGFloat x = x;
    slice.origin.CGFloat y = y;
    slice.CGSize size = (CGSize)remainder.origin;
    CGSize size = remainder.size;
    long long v93 = v89;
    long long v94 = v90;
    char v95 = v56;
    v96[0] = *(_DWORD *)v87;
    *(_DWORD *)((char *)v96 + 3) = *(_DWORD *)&v87[3];
    [(UITableView *)self _updateVisibleCellsForRanges:&slice createIfNecessary:v3];
    if ((*((unsigned char *)p_tableFlags + 14) & 0x80) != 0) {
      break;
    }
    *(CGFloat *)&self->_visibleRows.NSUInteger location = x;
    *(CGFloat *)&self->_visibleRows.NSUInteger length = y;
    [(UITableView *)self _visibleBounds];
    p_visibleBounds->origin.CGFloat x = v57;
    self->_visibleBounds.origin.CGFloat y = v58;
    self->_visibleBounds.size.double width = v59;
    self->_visibleBounds.size.double height = v60;
    if ((v56 & 1) == 0) {
      break;
    }
    [(UITableView *)self _visibleBounds];
    double v30 = v61;
    NSUInteger v48 = -[UITableView _visibleGlobalRowsInRect:](self, "_visibleGlobalRowsInRect:");
    NSUInteger v49 = v62;
  }
  while ((*((unsigned char *)p_tableFlags + 14) & 0x80) == 0);
  [(UITableView *)self _updateTableHeadersAndFootersNow:v3];
  [(UITableView *)self _updateVisibleHeadersAndFootersNow:v3];
  [(UITableView *)self _updateIndex];
  uint64_t v63 = *((void *)p_tableFlags + 1);
  if ((v63 & 0x80000000000000) != 0)
  {
    [(UITableView *)self performSelector:sel__resumeReloads withObject:0 afterDelay:0.0];
    self->_visibleRows.NSUInteger location = 0;
    self->_visibleRows.NSUInteger length = 0;
  }
  else
  {
    if ((v63 & 0x2000000000000000) != 0)
    {
      *(void *)p_tableFlags = *(void *)p_tableFlags;
      *((void *)p_tableFlags + 1) = v63 & 0xDFFFFFFFFFFFFFFFLL;
      if (dyld_program_sdk_at_least())
      {
        NSUInteger v64 = self->_visibleRows.length;
        if (v64 != [(NSMutableArray *)self->_visibleCells count])
        {
          CGFloat v76 = [MEMORY[0x1E4F28B00] currentHandler];
          CGFloat v77 = NSStringFromRange(self->_visibleRows);
          objc_msgSend(v76, "handleFailureInMethod:object:file:lineNumber:description:", v80, self, @"UITableView.m", 3284, @"UITableView internal inconsistency: _visibleRows and _visibleCells must be of same length. _visibleRows: %@; _visibleCells.count: %ld, _visibleCells: %@",
            v77,
            [(NSMutableArray *)self->_visibleCells count],
            self->_visibleCells);
        }
        [(UITableView *)self _beginSuspendingUpdates];
      }
      if (self->_visibleRows.length)
      {
        unint64_t v65 = 0;
        do
        {
          double v66 = (UITableViewCell *)(id)[(NSMutableArray *)self->_visibleCells objectAtIndexedSubscript:v65];
          double v67 = v66;
          reorderingSupport = self->_reorderingSupport;
          if (!reorderingSupport || v66 != reorderingSupport->_reorderedCell)
          {
            -[UITableViewCell setFrame:](v66, "setFrame:", -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, v65 + self->_visibleRows.location, 0));
            [(UITableViewCell *)v67 _setNeedsHeightCalculation:0];
          }
          if ((*((unsigned char *)p_tableFlags + 14) & 0x80) != 0) {
            break;
          }
          ++v65;
        }
        while (v65 < self->_visibleRows.length);
      }
      if (dyld_program_sdk_at_least()) {
        [(UITableView *)self _endSuspendingUpdates];
      }
      [(UISwipeActionController *)self->_swipeActionController updateLayout];
      uint64_t v63 = *((void *)p_tableFlags + 1);
    }
    if ((v63 & 0x7000000000000) != 0)
    {
      [(UIScrollView *)self contentSize];
      if (v17)
      {
        if (v69 < v30)
        {
          NSUInteger v70 = self->_visibleRows.length;
          if (v70)
          {
            if ((void *)(self->_visibleRows.location + v70) == v17)
            {
              CGFloat v71 = [(NSMutableArray *)self->_visibleCells objectAtIndexedSubscript:v70 - 1];
              [v71 setSeparatorStyle:*((_WORD *)p_tableFlags + 7) & 7];
            }
          }
        }
      }
    }
    [(UITableView *)self _resumeReloads];
  }
  [(UITableView *)self _applyCoalescedContentSizeUpdates];
  [(UITableView *)self _restoreOrAdjustContentOffsetWithRowCount:v17 initialContentInsetTop:v19];
  char v72 = !v83;
  if ((*((unsigned char *)p_tableFlags + 15) & 8) == 0) {
    char v72 = 1;
  }
  if ((v72 & 1) == 0) {
    [(UITableView *)self _updateVisibleCellsNow:1];
  }
  [v84 _unlockEnvironment:self];
  -[UITableView _endUpdatingVisibleCells:originalContentOffset:originalContentHeight:focusedView:focusedViewType:](self, "_endUpdatingVisibleCells:originalContentOffset:originalContentHeight:focusedView:focusedViewType:", HIDWORD(v7) & 1, v81, focusedViewType, v86, v85, v13);
}

- (id)_indexPathsForVisibleRowsUsingPresentationValues:(BOOL)a3
{
  BOOL v3 = a3;
  [(UITableView *)self _visibleBounds];
  return -[UITableView _indexPathsForRowsInRect:usingPresentationValues:](self, "_indexPathsForRowsInRect:usingPresentationValues:", v3);
}

- (CGRect)_visibleBounds
{
  v15.receiver = self;
  v15.super_class = (Class)UITableView;
  [(UIScrollView *)&v15 visibleBounds];
  CGFloat x = v3;
  CGFloat y = v5;
  CGFloat width = v7;
  CGFloat height = v9;
  if ([(UITableView *)self _shouldUnionVisibleBounds])
  {
    v16.origin.CGFloat x = x;
    v16.origin.CGFloat y = y;
    v16.size.CGFloat width = width;
    v16.size.CGFloat height = height;
    CGRect v17 = CGRectUnion(v16, self->_visibleBounds);
    CGFloat x = v17.origin.x;
    CGFloat y = v17.origin.y;
    CGFloat width = v17.size.width;
    CGFloat height = v17.size.height;
  }
  double v11 = x;
  double v12 = y;
  double v13 = width;
  double v14 = height;
  result.size.CGFloat height = v14;
  result.size.CGFloat width = v13;
  result.origin.CGFloat y = v12;
  result.origin.CGFloat x = v11;
  return result;
}

- (void)_applyCoalescedContentSizeUpdates
{
  if (self->_coalescedContentSizeDelta != 0.0)
  {
    self->_coalescedContentSizeDelta = 0.0;
    -[UITableView _applyContentSizeDeltaImmediately:](self, "_applyContentSizeDeltaImmediately:");
  }
}

- (void)_setNeedsVisibleCellsUpdate:(BOOL)a3 withFrames:(BOOL)a4 updateImmediatelyIfPossible:(BOOL)a5
{
  BOOL v5 = a5;
  p_uint64_t tableFlags = &self->_tableFlags;
  uint64_t tableFlags = (uint64_t)self->_tableFlags;
  uint64_t v9 = *((void *)&self->_tableFlags + 1);
  if (a4)
  {
    v9 |= 0x2000000000000000uLL;
    *(void *)p_uint64_t tableFlags = tableFlags;
    *((void *)&self->_tableFlags + 1) = v9;
  }
  if (v9 & 0x1000000000000000) == 0 && ((((v9 & 0x800000000000000) == 0) ^ a3))
  {
    if (!a3) {
      return;
    }
    goto LABEL_15;
  }
  uint64_t v10 = 0x800000000000000;
  if (!a3) {
    uint64_t v10 = 0;
  }
  *(void *)p_uint64_t tableFlags = tableFlags;
  *((void *)&self->_tableFlags + 1) = v9 & 0xE7FFFFFFFFFFFFFFLL | v10;
  if (a3)
  {
    [(UIScrollView *)self setNeedsLayout];
    if (v5)
    {
      if ([(UITableView *)self _shouldUnionVisibleBounds])
      {
        if (!self->_tableReloadingSuspendedCount)
        {
          double v11 = [(UIView *)self window];

          if (v11) {
            [(UITableView *)self _updateVisibleCellsNow:1];
          }
        }
      }
    }
LABEL_15:
    uint64_t v12 = *((void *)p_tableFlags + 2);
    if ((v12 & 0x100) != 0)
    {
      uint64_t v13 = *((void *)p_tableFlags + 3);
      *((void *)p_tableFlags + 2) = v12 | 0x200000000;
      *((void *)p_tableFlags + 3) = v13;
    }
  }
}

- (void)_reapTentativeViews
{
  if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0)
  {
    double v3 = (void *)[(NSMutableDictionary *)self->_tentativeCells copy];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __34__UITableView__reapTentativeViews__block_invoke;
    v8[3] = &unk_1E5309150;
    v8[4] = self;
    [v3 enumerateKeysAndObjectsUsingBlock:v8];
    [(NSMutableDictionary *)self->_tentativeCells removeAllObjects];
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    BOOL v5 = __34__UITableView__reapTentativeViews__block_invoke_2;
    double v6 = &unk_1E5308D60;
    double v7 = self;
    __34__UITableView__reapTentativeViews__block_invoke_2((uint64_t)v4, self->_tentativeHeaderViews, self->_visibleHeaderViews, 1);
    v5((uint64_t)v4, self->_tentativeFooterViews, self->_visibleFooterViews, 0);
  }
}

void __34__UITableView__reapTentativeViews__block_invoke_2(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  if ([v7 count])
  {
    uint64_t v9 = [v8 allValues];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = __34__UITableView__reapTentativeViews__block_invoke_3;
    v12[3] = &unk_1E5308D38;
    uint64_t v10 = *(void *)(a1 + 32);
    id v13 = v9;
    uint64_t v14 = v10;
    char v15 = a4;
    id v11 = v9;
    [v7 enumerateKeysAndObjectsUsingBlock:v12];
    [v7 removeAllObjects];
  }
}

- (_NSRange)_visibleGlobalRowsInRect:(CGRect)a3 canGuess:(BOOL)a4
{
  CGFloat height = a3.size.height;
  CGFloat width = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  [(UITableView *)self _visibleBounds];
  v20.origin.CGFloat x = v10;
  v20.origin.CGFloat y = v11;
  v20.size.CGFloat width = v12;
  v20.size.CGFloat height = v13;
  v18.origin.CGFloat x = x;
  v18.origin.CGFloat y = y;
  v18.size.CGFloat width = width;
  v18.size.CGFloat height = height;
  CGRect v19 = CGRectIntersection(v18, v20);
  p_isa = &self->_rowData->super.isa;
  if (p_isa)
  {
    p_isa = (void *)-[UITableViewRowData globalRowsInRect:canGuess:](p_isa, a4, v19.origin.x, v19.origin.y, v19.size.width, v19.size.height);
  }
  else
  {
    NSUInteger v15 = 0;
  }
  result.NSUInteger length = v15;
  result.NSUInteger location = (NSUInteger)p_isa;
  return result;
}

- (_NSRange)_visibleGlobalRowsInRect:(CGRect)a3
{
  NSUInteger v3 = -[UITableView _visibleGlobalRowsInRect:canGuess:](self, "_visibleGlobalRowsInRect:canGuess:", 1, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  result.NSUInteger length = v4;
  result.NSUInteger location = v3;
  return result;
}

- (void)_updateVisibleCellsForRanges:(_UITableViewVisibleCellsUpdateRanges *)a3 createIfNecessary:(BOOL)a4
{
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x80) == 0)
  {
    BOOL v4 = a4;
    if ((a3->var2.length || a3->var1.length) && [(NSMutableArray *)self->_visibleCells count])
    {
      id v7 = [(UITableView *)self _reorderingSupport];
      id v8 = v7;
      if (v7) {
        id v7 = (id *)v7[1];
      }
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      double v23 = __62__UITableView__updateVisibleCellsForRanges_createIfNecessary___block_invoke;
      double v24 = &unk_1E5308D88;
      double v25 = self;
      uint64_t v9 = v7;
      double v26 = v9;
      NSUInteger length = a3->var2.length;
      if (length) {
        __62__UITableView__updateVisibleCellsForRanges_createIfNecessary___block_invoke((uint64_t)v22, self->_visibleRows.length - length, length);
      }
      if (a3->var1.length) {
        ((void (*)(void *, void))v23)(v22, 0);
      }
    }
    if (a3->var4.length)
    {
      if (!v4) {
        return;
      }
    }
    else if (!a3->var3.length || !v4)
    {
      return;
    }
    if (dyld_program_sdk_at_least()) {
      [(UITableView *)self _beginSuspendingUpdates];
    }
    NSUInteger v11 = a3->var3.length;
    if (v11 && (*((unsigned char *)&self->_tableFlags + 14) & 0x80) == 0)
    {
      NSUInteger v12 = v11 + a3->var3.location - 1;
      while (v12 >= a3->var3.location)
      {
        CGFloat v13 = [(UITableView *)self indexPathForRowAtGlobalRow:v12];
        id v14 = [(UITableView *)self _createPreparedCellForGlobalRow:v12 withIndexPath:v13 willDisplay:1];
        NSUInteger v15 = v14;
        if ((*((unsigned char *)&self->_tableFlags + 14) & 0x80) != 0)
        {

          break;
        }
        [v14 _setIndexPath:v13];
        [(NSMutableArray *)self->_visibleCells insertObject:v15 atIndex:0];

        if (--v12 == -1) {
          break;
        }
      }
    }
    NSUInteger v16 = a3->var4.length;
    if (v16 && (*((unsigned char *)&self->_tableFlags + 14) & 0x80) == 0)
    {
      NSUInteger location = a3->var4.location;
      for (NSUInteger i = location + v16; location < i; NSUInteger i = a3->var4.length + a3->var4.location)
      {
        CGRect v19 = [(UITableView *)self indexPathForRowAtGlobalRow:location];
        id v20 = [(UITableView *)self _createPreparedCellForGlobalRow:location withIndexPath:v19 willDisplay:1];
        double v21 = v20;
        if ((*((unsigned char *)&self->_tableFlags + 14) & 0x80) != 0)
        {

          break;
        }
        [v20 _setIndexPath:v19];
        [(NSMutableArray *)self->_visibleCells addObject:v21];

        ++location;
      }
    }
    if (dyld_program_sdk_at_least()) {
      [(UITableView *)self _endSuspendingUpdates];
    }
  }
}

- (_UITableViewVisibleCellsUpdateRanges)_calculateVisibleCellsUpdateRangesForGlobalRowRange:(SEL)a3 createIfNecessary:(_NSRange)a4
{
  NSUInteger length = a4.length;
  NSUInteger location = a4.location;
  *(void *)&retstr->var5 = 0;
  retstr->var3 = 0u;
  retstr->var4 = 0u;
  retstr->var1 = 0u;
  retstr->var2 = 0u;
  retstr->var0 = a4;
  p_NSUInteger length = (_NSRange *)&self[24].var3.length;
  NSUInteger v9 = self[24].var4.location;
  if (!v9)
  {
    if (a5)
    {
      NSUInteger v16 = 0;
      NSUInteger v13 = 0;
      retstr->var4 = retstr->var0;
      NSUInteger v17 = retstr->var4.length;
    }
    else
    {
      NSUInteger length = 0;
      NSUInteger v16 = 0;
      NSUInteger v17 = 0;
      NSUInteger v13 = 0;
      retstr->var0.NSUInteger length = 0;
    }
    goto LABEL_39;
  }
  if (!a4.length)
  {
    NSUInteger v16 = 0;
    NSUInteger v17 = 0;
    NSUInteger v13 = 0;
    retstr->var2 = *p_length;
    goto LABEL_39;
  }
  NSUInteger v10 = p_length->location;
  BOOL v11 = a4.location >= p_length->location;
  NSUInteger v12 = a4.location - p_length->location;
  if (v11)
  {
    if (v12 != 0 && v11)
    {
      if (v9 < v12) {
        NSUInteger v12 = self[24].var4.location;
      }
      retstr->var1.NSUInteger location = v10;
      retstr->var1.NSUInteger length = v12;
    }
    NSUInteger v14 = a4.length + a4.location;
    NSUInteger v15 = v10 + v9;
    if (a4.length + a4.location > v10 + v9)
    {
      if (a5)
      {
        NSUInteger v16 = 0;
        NSUInteger v13 = 0;
        goto LABEL_21;
      }
LABEL_31:
      NSUInteger v16 = 0;
      NSUInteger v17 = 0;
      NSUInteger v13 = 0;
      NSUInteger length = (v15 - location) & ~((uint64_t)(v15 - location) >> 63);
      retstr->var0.NSUInteger length = length;
      goto LABEL_39;
    }
    NSUInteger v13 = 0;
    NSUInteger v16 = 0;
  }
  else
  {
    if (a5)
    {
      if (a4.length >= v10 - a4.location) {
        NSUInteger v13 = v10 - a4.location;
      }
      else {
        NSUInteger v13 = a4.length;
      }
      retstr->var3.NSUInteger location = a4.location;
      retstr->var3.NSUInteger length = v13;
      NSUInteger v14 = a4.length + a4.location;
      NSUInteger v15 = v10 + v9;
      NSUInteger v16 = a4.location;
      if (a4.length + a4.location <= v10 + v9)
      {
        NSUInteger v16 = a4.location;
        goto LABEL_34;
      }
LABEL_21:
      if (a4.location <= v15) {
        NSUInteger v18 = v15;
      }
      else {
        NSUInteger v18 = a4.location;
      }
      NSUInteger v19 = v14 - v15;
      if (a4.length >= v19) {
        NSUInteger v17 = v19;
      }
      else {
        NSUInteger v17 = a4.length;
      }
      retstr->var4.NSUInteger location = v18;
      retstr->var4.NSUInteger length = v17;
      goto LABEL_39;
    }
    retstr->var0.NSUInteger location = v10;
    NSUInteger v14 = v10 + a4.length;
    NSUInteger v15 = v10 + v9;
    if (v10 + a4.length > v10 + v9)
    {
      NSUInteger location = v10;
      goto LABEL_31;
    }
    NSUInteger v13 = 0;
    NSUInteger v16 = 0;
    NSUInteger location = v10;
  }
LABEL_34:
  NSUInteger v17 = 0;
  BOOL v20 = v15 > v14;
  NSUInteger v21 = v15 - v14;
  if (v20)
  {
    if (v21 < v9) {
      NSUInteger v9 = v21;
    }
    retstr->var2.NSUInteger location = v14;
    retstr->var2.NSUInteger length = v9;
  }
LABEL_39:
  NSUInteger v22 = v13 - 1;
  if (v13 > 1 || v17 >= 2)
  {
    self = (_UITableViewVisibleCellsUpdateRanges *)[(_UITableViewVisibleCellsUpdateRanges *)self _estimatesRowHeights];
    if (self)
    {
      self = (_UITableViewVisibleCellsUpdateRanges *)dyld_program_sdk_at_least();
      if (self)
      {
        if (v13 >= 2)
        {
          retstr->var3.NSUInteger location = v22 + v16;
          retstr->var3.NSUInteger length = 1;
          length -= v22;
          retstr->var0.NSUInteger location = v22 + location;
          retstr->var0.NSUInteger length = length;
        }
        if (v17 >= 2)
        {
          retstr->var4.NSUInteger length = 1;
          retstr->var0.NSUInteger length = length - v17 + 1;
        }
        retstr->var5 = 1;
      }
    }
  }
  return self;
}

- (void)_endSuspendingUpdates
{
}

- (void)_beginSuspendingUpdates
{
}

- (void)_setNeedsVisibleCellsUpdate:(BOOL)a3 withFrames:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  uint64_t v7 = dyld_program_sdk_at_least() ^ 1;
  [(UITableView *)self _setNeedsVisibleCellsUpdate:v5 withFrames:v4 updateImmediatelyIfPossible:v7];
}

- (void)_suspendReloads
{
}

- (void)_resumeReloads
{
  int64_t v2 = self->_tableReloadingSuspendedCount - 1;
  self->_tableReloadingSuspendedCount = v2;
  if (!v2)
  {
    uint64_t v3 = *((void *)&self->_tableFlags + 1);
    if ((v3 & 0x80000000000000) != 0)
    {
      *(void *)&self->_uint64_t tableFlags = self->_tableFlags;
      *((void *)&self->_tableFlags + 1) = v3 & 0xFF7FFFFFFFFFFFFFLL;
      [(UITableView *)self reloadData];
    }
    else if ((v3 & 0x800000000000000) != 0)
    {
      [(UIScrollView *)self setNeedsLayout];
    }
  }
}

- (id)indexPathForRowAtGlobalRow:(int64_t)a3
{
  return -[UITableViewRowData indexPathForRowAtGlobalRow:](&self->_rowData->super.isa, a3);
}

- (id)_createPreparedCellForGlobalRow:(int64_t)a3 withIndexPath:(id)a4 willDisplay:(BOOL)a5
{
  BOOL v5 = a5;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v10 = a4;
  BOOL v11 = (void *)MEMORY[0x18C108260]();
  if (!v10)
  {
    double v36 = [MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v36, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UITableView.m", 16809, @"UITableView internal inconsistency: cannot create a cell with a nil index path for global row %ld.", a3);
  }
  NSUInteger v12 = [(NSMutableDictionary *)self->_tentativeCells objectForKeyedSubscript:v10];
  if (!v12)
  {
    NSUInteger v12 = [(UITableView *)self _prefetchedCellForRowAtIndexPath:v10 willDisplay:v5];
    if (!v12)
    {
      uint64_t v16 = [(UITableView *)self _reorderingSupport];
      NSUInteger v17 = (id *)v16;
      if (v16 && *(void *)(v16 + 8) && [*(id *)(v16 + 16) isEqual:v10])
      {
        id v14 = v17[1];
LABEL_20:
        id v13 = 0;
LABEL_56:

        goto LABEL_8;
      }
      if (self->_firstResponderIndexPath
        && self->_firstResponderViewType == 1
        && objc_msgSend(v10, "isEqual:"))
      {
        uint64_t v18 = 2232;
LABEL_19:
        id v14 = *(id *)((char *)&self->super.super.super.super.isa + v18);
        [(UITableView *)self _configureCachedCellForDisplay:v14 forIndexPath:v10];
        goto LABEL_20;
      }
      if ([(UITableView *)self _hasFocusedCellForIndexPath:v10])
      {
        uint64_t v18 = 3152;
        goto LABEL_19;
      }
      _UIQOSExpectComplexCommit("UITVCell");
      if (self->_cellBeingReconfigured)
      {
        double v37 = [MEMORY[0x1E4F28B00] currentHandler];
        [v37 handleFailureInMethod:a2, self, @"UITableView.m", 16845, @"Performing side effects on UITableView that cause a new cell to be requested while an existing row is being reconfigured is not allowed. Check the backtrace to see what's causing this. Table view: %@", self object file lineNumber description];
      }
      CGFloat v40 = (void *)_UISetCurrentFallbackEnvironment(self);
      p_indexPathBeingCreated = &self->_indexPathBeingCreated;
      objc_storeStrong((id *)&self->_indexPathBeingCreated, a4);
      id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);

      if (!WeakRetained)
      {
        double v38 = [MEMORY[0x1E4F28B00] currentHandler];
        [v38 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:16851 description:@"UITableView dataSource is not set"];
      }
      uint64_t tableFlags = (uint64_t)self->_tableFlags;
      if ((tableFlags & 2) == 0)
      {
        if ((tableFlags & 0x8000000) == 0)
        {
LABEL_27:
          NSUInteger v21 = [MEMORY[0x1E4F28B00] currentHandler];
          id v22 = objc_loadWeakRetained((id *)&self->_dataSource);
          [v21 handleFailureInMethod:a2, self, @"UITableView.m", 16872, @"UITableView dataSource returned a nil cell for row at index path: %@. Table view: %@, dataSource: %@", v10, self, v22 object file lineNumber description];

          double v23 = 0;
LABEL_45:
          [(UITableView *)self _ensureReturnedView:v23 isNotContainedInReusePoolForViewType:1];
          [(NSMutableDictionary *)self->_tentativeCells setObject:v23 forKeyedSubscript:v10];
          [(UITableView *)self _configureCellForDisplay:v23 forIndexPath:v10];
          double v33 = *p_indexPathBeingCreated;
          *p_indexPathBeingCreated = 0;

          _UIRestorePreviousFallbackEnvironment(v40);
          if ((*((unsigned char *)&self->_tableFlags + 14) & 0x80) != 0) {
            [v23 removeFromSuperview];
          }
          if (v5) {
            [(UITableView *)self _notifyWillDisplayCell:v23 forIndexPath:v10];
          }
          if (dyld_program_sdk_at_least())
          {
            if ((*((unsigned char *)&self->_tableFlags + 14) & 0x80) == 0)
            {
              double v34 = [(UIView *)self window];

              if (v34)
              {
                double v35 = (void *)_UISetCurrentFallbackEnvironment(self);
                v41[0] = MEMORY[0x1E4F143A8];
                v41[1] = 3221225472;
                v41[2] = __73__UITableView__createPreparedCellForGlobalRow_withIndexPath_willDisplay___block_invoke_1188;
                v41[3] = &unk_1E52D9F70;
                id v42 = v23;
                +[UIView performWithoutAnimation:v41];
                _UIRestorePreviousFallbackEnvironment(v35);
              }
            }
          }
          if ([(UITableView *)self _cellPrefetchingAllowed]) {
            -[_UITableViewSubviewManager storePrefetchedCell:forIndexPath:]((uint64_t)self->_subviewManager, (uint64_t)v23, v10);
          }
          id v13 = v23;
          id v14 = v13;
          goto LABEL_56;
        }
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __73__UITableView__createPreparedCellForGlobalRow_withIndexPath_willDisplay___block_invoke;
        block[3] = &unk_1E52D9F70;
        block[4] = self;
        if (qword_1E8FDF468 != -1) {
          dispatch_once(&qword_1E8FDF468, block);
        }
        double v28 = objc_loadWeakRetained(&self->super._delegate);
        double v23 = [v28 tableView:self cellForRowAtIndexPath:v10];
LABEL_44:

        if (v23) {
          goto LABEL_45;
        }
        goto LABEL_27;
      }
      if (_isNotifyingIdleObservers == 1)
      {
        unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableView", &qword_1E8FDF448);
        double v25 = *(id *)(CategoryCachedImpl + 8);
        if (os_signpost_id_make_with_pointer(*(os_log_t *)(CategoryCachedImpl + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
          && os_signpost_enabled(v25))
        {
          int v44 = 134218240;
          uint64_t v45 = [v10 section];
          __int16 v46 = 2048;
          uint64_t v47 = [v10 row];
          _os_signpost_emit_unreliably_with_name_impl();
        }

        double v26 = [(UITableView *)self _dataSourceProxy];
        double v23 = [v26 tableView:self cellForRowAtIndexPath:v10];

        unint64_t v27 = __UILogGetCategoryCachedImpl("TableView", &qword_1E8FDF450);
        double v28 = *(id *)(v27 + 8);
        if (os_signpost_id_make_with_pointer(*(os_log_t *)(v27 + 8), self) - 1 > 0xFFFFFFFFFFFFFFFDLL
          || !os_signpost_enabled(v28))
        {
          goto LABEL_44;
        }
      }
      else
      {
        unint64_t v29 = __UILogGetCategoryCachedImpl("TableView", &qword_1E8FDF458);
        double v30 = *(id *)(v29 + 8);
        if (os_signpost_id_make_with_pointer(*(os_log_t *)(v29 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
          && os_signpost_enabled(v30))
        {
          int v44 = 134218240;
          uint64_t v45 = [v10 section];
          __int16 v46 = 2048;
          uint64_t v47 = [v10 row];
          _os_signpost_emit_unreliably_with_name_impl();
        }

        double v31 = [(UITableView *)self _dataSourceProxy];
        double v23 = [v31 tableView:self cellForRowAtIndexPath:v10];

        unint64_t v32 = __UILogGetCategoryCachedImpl("TableView", &qword_1E8FDF460);
        double v28 = *(id *)(v32 + 8);
        if (os_signpost_id_make_with_pointer(*(os_log_t *)(v32 + 8), self) - 1 > 0xFFFFFFFFFFFFFFFDLL
          || !os_signpost_enabled(v28))
        {
          goto LABEL_44;
        }
      }
      int v44 = 67109120;
      LODWORD(v45) = [v23 _hasBeenReused];
      _os_signpost_emit_unreliably_with_name_impl();
      goto LABEL_44;
    }
  }
  if (v5) {
    [(UITableView *)self _notifyWillDisplayCell:v12 forIndexPath:v10];
  }
  id v13 = v12;
  id v14 = v13;
LABEL_8:

  return v14;
}

- (void)_updateContentSizeSkippingContentOffsetAdjustment:(BOOL)a3
{
  if (self->_rowData)
  {
    BOOL v3 = a3;
    if (objc_opt_respondsToSelector())
    {
      if ([(UIView *)self->_tableHeaderView _isSpecialInternalHeaderView])
      {
        [(UIView *)self->_tableHeaderView frame];
        double v6 = v5;
        [(UIView *)self frame];
        [(UIView *)self->_tableHeaderView sizeToFit];
        [(UIView *)self->_tableHeaderView frame];
        if (v7 != v6) {
          -[UITableViewRowData tableHeaderHeightDidChangeToHeight:]((uint64_t)self->_rowData, v7);
        }
      }
    }
    double v8 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
    countLabel = self->_countLabel;
    if (countLabel && [(UITableViewCountView *)countLabel count] >= 20)
    {
      [(UITableConstants *)self->_constants defaultRowHeightForTableView:self];
      double v8 = v8 + v10;
    }
    [(UIView *)self bounds];
    CGFloat v12 = v11;
    CGFloat v14 = v13;
    double v16 = v15;
    CGFloat v18 = v17;
    *((void *)&self->_tableFlags + 2) &= ~0x100000000uLL;
    [(UITableView *)self heightForTableHeaderViewHiding];
    if (v19 > 0.0)
    {
      double v20 = v19;
      [(UITableView *)self _contentInset];
      double v22 = v21;
      double v24 = v23;
      v28.origin.CGFloat x = v12;
      v28.origin.CGFloat y = v14;
      v28.size.CGFloat width = v16;
      v28.size.CGFloat height = v18;
      double v25 = v20 + CGRectGetHeight(v28) - v22 - v24;
      if (v8 < v25)
      {
        *((void *)&self->_tableFlags + 2) |= 0x100000000uLL;
        double v8 = v25;
      }
    }
    [(UITableView *)self _updateShowScrollIndicatorsFlag];
    self->_coalescedContentSizeDelta = 0.0;
    -[UITableView setContentSize:skipContentOffsetAdjustment:](self, "setContentSize:skipContentOffsetAdjustment:", v3, v16, v8);
    [(UITableView *)self _adjustTableHeaderAndFooterViews];
    [(UITableView *)self _scheduleAdjustExtraSeparators];
    [(UITableView *)self _adjustCountLabel];
    [(UITableView *)self _updateIndexFrame];
  }
}

- (void)_scheduleAdjustExtraSeparators
{
  *((void *)&self->_tableFlags + 2) |= 0x10uLL;
  if ((*((unsigned char *)&self->_tableFlags + 15) & 8) == 0) {
    [(UIScrollView *)self setNeedsLayout];
  }
}

- (void)_updateShowScrollIndicatorsFlag
{
  if (self->_index)
  {
    BOOL v3 = [(UIView *)self window];
    BOOL v4 = [v3 _screen];
    double v5 = [v4 _capabilityForKey:@"UIScreenCapabilityTouchLevelsKey"];
    if ([v5 integerValue] == 2)
    {
      uint64_t v6 = *((void *)&self->_tableFlags + 2);

      if ((v6 & 0x100000000) == 0)
      {
        unint64_t v7 = *((void *)&self->_tableFlags + 2);
LABEL_6:
        v9.receiver = self;
        v9.super_class = (Class)UITableView;
        [(UIScrollView *)&v9 setShowsHorizontalScrollIndicator:(v7 >> 25) & 1];
        -[UIScrollView _setDefaultShowsVerticalScrollIndicator:](&v8, sel__setDefaultShowsVerticalScrollIndicator_, (*((void *)&self->_tableFlags + 2) >> 26) & 1, self, UITableView);
        return;
      }
    }
    else
    {
    }
  }
  else
  {
    unint64_t v7 = *((void *)&self->_tableFlags + 2);
    if ((v7 & 0x100000000) == 0) {
      goto LABEL_6;
    }
  }
  v11.receiver = self;
  v11.super_class = (Class)UITableView;
  [(UIScrollView *)&v11 setShowsHorizontalScrollIndicator:0];
  v10.receiver = self;
  v10.super_class = (Class)UITableView;
  -[UIScrollView setShowsVerticalScrollIndicator:](&v10, sel_setShowsVerticalScrollIndicator_, 0, v8.receiver, v8.super_class);
}

- (void)_adjustTableHeaderAndFooterViews
{
  if (self->_tableHeaderView)
  {
    if ((*((unsigned char *)&self->_tableFlags + 21) & 0x20) == 0)
    {
      double v3 = -[UITableViewRowData rectForTableHeaderView]((uint64_t)self->_rowData);
      double v5 = v4;
      double v7 = v6;
      double v9 = v8;
      [(UIView *)self->_tableHeaderView frame];
      v14.origin.CGFloat x = v3;
      v14.origin.CGFloat y = v5;
      v14.size.CGFloat width = v7;
      v14.size.CGFloat height = v9;
      if (!CGRectEqualToRect(v13, v14)) {
        -[UIView setFrame:](self->_tableHeaderView, "setFrame:", v3, v5, v7, v9);
      }
    }
  }
  if (self->_tableFooterView)
  {
    double v10 = -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData);
    tableFooterView = self->_tableFooterView;
    [(UIView *)tableFooterView setFrame:v10];
  }
}

- (void)setContentSize:(CGSize)a3 skipContentOffsetAdjustment:(BOOL)a4
{
  BOOL v4 = a4;
  double height = a3.height;
  double width = a3.width;
  BOOL v8 = [(UIScrollView *)self _isAutomaticContentOffsetAdjustmentEnabled];
  BOOL v9 = !v4;
  [(UIScrollView *)self _setAutomaticContentOffsetAdjustmentEnabled:v9];
  -[UIScrollView _hideScrollIndicatorsIfNeededForNewContentSize:animated:](self, "_hideScrollIndicatorsIfNeededForNewContentSize:animated:", 0, width, height);
  -[UITableView setContentSize:](self, "setContentSize:", width, height);
  [(UIScrollView *)self _setAutomaticContentOffsetAdjustmentEnabled:v8];
  if (!v9) {
    *((void *)&self->_tableFlags + 3) |= 8uLL;
  }
}

- (void)setContentSize:(CGSize)a3
{
  v4.receiver = self;
  v4.super_class = (Class)UITableView;
  -[UIScrollView setContentSize:](&v4, sel_setContentSize_, a3.width, a3.height);
  [(UITableView *)self _updateWrapperFrame];
}

- (void)_updateWrapperFrame
{
  if ((*((unsigned char *)&self->_tableFlags + 22) & 0x40) != 0)
  {
    [(UITableView *)self _frameForWrapper];
    -[UIScrollView setFrame:](self->_wrapperView, "setFrame:");
    [(UITableView *)self _updateWrapperContentInset];
  }
}

- (CGRect)_frameForWrapper
{
  [(UIView *)self bounds];
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  [(UITableView *)self _sectionContentInset];
  double v12 = v11;
  double v14 = v13;
  v24.origin.CGFloat x = v4;
  v24.origin.CGFloat y = v6;
  v24.size.double width = v8;
  v24.size.double height = v10;
  double v15 = CGRectGetWidth(v24) - (v12 + v14);
  if (v15 <= 0.0) {
    CGFloat v16 = v8;
  }
  else {
    CGFloat v16 = v15;
  }
  if (v15 > 0.0) {
    CGFloat v4 = v12;
  }
  v25.origin.CGFloat y = 0.0;
  v25.origin.CGFloat x = v4;
  v25.size.double width = v16;
  v25.size.double height = v10;
  double Height = CGRectGetHeight(v25);
  [(UIScrollView *)self contentSize];
  if (Height >= v18) {
    double v19 = Height;
  }
  else {
    double v19 = v18;
  }
  if (v19 >= 1.0) {
    double v20 = v19;
  }
  else {
    double v20 = 1.0;
  }
  double v21 = 0.0;
  double v22 = v4;
  double v23 = v16;
  result.size.double height = v20;
  result.size.double width = v23;
  result.origin.CGFloat y = v21;
  result.origin.CGFloat x = v22;
  return result;
}

- (void)_updateWrapperContentInset
{
  [(UIView *)self->_wrapperView bounds];
  wrapperView = self->_wrapperView;
  -[UIScrollView setContentSize:](wrapperView, "setContentSize:", v3, v4);
}

- (double)heightForTableHeaderViewHiding
{
  return -[UITableViewRowData heightForTableHeaderViewHiding]((uint64_t)self->_rowData);
}

- (BOOL)_isTableHeaderAutohiding
{
  int64_t v2 = [(UITableView *)self tableHeaderView];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

- (UIView)tableHeaderView
{
  return self->_tableHeaderView;
}

- (void)_adjustCountLabel
{
  countLabel = self->_countLabel;
  if (countLabel)
  {
    [(UIView *)countLabel frame];
    double v5 = v4;
    CGFloat v7 = v6;
    double v9 = v8;
    [(UIScrollView *)self contentSize];
    double v11 = v10;
    double v13 = v12;
    v17.origin.CGFloat x = v5;
    v17.origin.CGFloat y = v7;
    v17.size.double width = v11;
    v17.size.double height = v9;
    double Height = CGRectGetHeight(v17);
    double v15 = self->_countLabel;
    -[UILabel setFrame:](v15, "setFrame:", v5, v13 - Height, v11, v9);
  }
}

- (double)_heightForTableFooter
{
  if ([(UITableView *)self _shouldUseNewHeaderFooterBehavior])
  {
    double v3 = 0.0;
    if ((*((unsigned char *)&self->_tableFlags + 7) & 0x80) != 0)
    {
      double v4 = [(UITableView *)self _delegateProxy];
      [v4 heightForFooterInTableView:self];
      double v3 = v5;
    }
    if (v3 == -1.0) {
      return 0.0;
    }
    else {
      return v3;
    }
  }
  else
  {
    [(UIView *)self->_tableFooterView frame];
    return CGRectGetHeight(*(CGRect *)&v7);
  }
}

- (BOOL)_isUpdating
{
  return self->_updateCount > 0;
}

- (id)_reorderingSupport
{
  reorderingSupport = self->_reorderingSupport;
  if (!reorderingSupport)
  {
    double v4 = objc_alloc_init(_UITableViewReorderingSupport);
    double v5 = self->_reorderingSupport;
    self->_reorderingSupport = v4;

    reorderingSupport = self->_reorderingSupport;
  }
  return reorderingSupport;
}

- (id)_prefetchedCellForRowAtIndexPath:(id)a3 willDisplay:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v7 = -[_UITableViewSubviewManager prefetchedCellAtIndexPath:]((id *)&self->_subviewManager->super.isa, (uint64_t)a3);
  if (v7) {
    BOOL v8 = !v4;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableView", &_prefetchedCellForRowAtIndexPath_willDisplay____s_category);
    double v10 = *(id *)(CategoryCachedImpl + 8);
    if (os_signpost_id_make_with_pointer(*(os_log_t *)(CategoryCachedImpl + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
      && os_signpost_enabled(v10))
    {
      [a3 section];
      [a3 row];
      _os_signpost_emit_unreliably_with_name_impl();
    }

    [(UITableView *)self _configureCachedCellForDisplay:v7 forIndexPath:a3];
  }
  return v7;
}

- (void)_configureCellForDisplay:(id)a3 forIndexPath:(id)a4
{
  if (([a3 _needsSetup] & 1) != 0
    || ([a3 needsUpdateConstraints] & 1) != 0
    || a3 && [*((id *)a3 + 20) needsLayout])
  {
    p_viewBeingPreparedToDisplaCGFloat y = &self->_viewBeingPreparedToDisplay;
    BOOL v8 = self->_viewBeingPreparedToDisplay;
    objc_storeStrong((id *)&self->_viewBeingPreparedToDisplay, a3);
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __53__UITableView__configureCellForDisplay_forIndexPath___block_invoke;
    v11[3] = &unk_1E5308FF0;
    v11[4] = self;
    v11[5] = a3;
    v11[6] = a4;
    +[UIView performWithoutAnimation:v11];
    viewBeingPreparedToDisplaCGFloat y = self->_viewBeingPreparedToDisplay;
    *p_viewBeingPreparedToDisplaCGFloat y = v8;
    double v10 = v8;
  }
}

- (BOOL)_cellPrefetchingAllowed
{
  if (![(UITableView *)self _supportsCellPrefetching]
    || (*((unsigned char *)&self->_tableFlags + 26) & 2) == 0)
  {
    return 0;
  }
  BOOL v4 = [(UITableView *)self _reorderingIndexPath];
  BOOL v3 = v4 == 0;

  return v3;
}

- (BOOL)_supportsCellPrefetching
{
  int v2 = _UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_TableViewCellPrefetchingMode, @"TableViewCellPrefetchingMode", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger);
  uint64_t v3 = qword_1EB257908;
  if (v2) {
    uint64_t v3 = 0;
  }
  if (v3 == -1) {
    return 0;
  }
  if (v3 == 1) {
    return 1;
  }
  return dyld_program_sdk_at_least();
}

- (id)_reorderingIndexPath
{
  reorderingSupport = self->_reorderingSupport;
  if (reorderingSupport) {
    return reorderingSupport->_initialIndexPath;
  }
  else {
    return 0;
  }
}

- (void)_notifyWillDisplayCell:(id)a3 forIndexPath:(id)a4
{
  id v8 = a3;
  if ((*((unsigned char *)&self->_tableFlags + 3) & 0x10) != 0)
  {
    id v6 = a4;
    uint64_t v7 = [(UITableView *)self _delegateProxy];
    [v7 tableView:self willDisplayCell:v8 forRowAtIndexPath:v6];
  }
  [v8 _notifyIsDisplaying:1];
}

- (void)_updateTableHeadersAndFootersNow:(BOOL)a3
{
  BOOL v3 = a3;
  if ([(UITableView *)self _shouldUseNewHeaderFooterBehavior])
  {
    [(UITableView *)self _visibleBounds];
    CGFloat v6 = v5;
    CGFloat v8 = v7;
    CGFloat v10 = v9;
    CGFloat v12 = v11;
    double v13 = -[UITableViewRowData rectForTableHeaderView]((uint64_t)self->_rowData);
    CGFloat v15 = v14;
    CGFloat v17 = v16;
    CGFloat v19 = v18;
    double v20 = -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData);
    CGFloat v32 = v21;
    CGFloat v33 = v20;
    CGFloat v30 = v23;
    CGFloat v31 = v22;
    v35.origin.CGFloat x = v6;
    v35.origin.CGFloat y = v8;
    v35.size.double width = v10;
    v35.size.double height = v12;
    v37.origin.CGFloat x = v13;
    v37.origin.CGFloat y = v15;
    v37.size.double width = v17;
    v37.size.double height = v19;
    if (CGRectIntersectsRect(v35, v37))
    {
      id v24 = [(UITableView *)self _tableHeaderView:v3];
    }
    else
    {
      tableHeaderView = self->_tableHeaderView;
      if (tableHeaderView && tableHeaderView != self->_firstResponderView)
      {
        [(UIView *)tableHeaderView removeFromSuperview];
        double v26 = self->_tableHeaderView;
        self->_tableHeaderView = 0;
      }
    }
    v36.origin.CGFloat x = v6;
    v36.origin.CGFloat y = v8;
    v36.size.double width = v10;
    v36.size.double height = v12;
    v38.origin.CGFloat y = v32;
    v38.origin.CGFloat x = v33;
    v38.size.double height = v30;
    v38.size.double width = v31;
    if (CGRectIntersectsRect(v36, v38))
    {
      id v27 = [(UITableView *)self _tableFooterView:v3];
    }
    else
    {
      tableFooterView = self->_tableFooterView;
      if (tableFooterView && tableFooterView != self->_firstResponderView)
      {
        [(UIView *)tableFooterView removeFromSuperview];
        unint64_t v29 = self->_tableFooterView;
        self->_tableFooterView = 0;
      }
    }
  }
}

- (void)_restoreOrAdjustContentOffsetWithRowCount:(int64_t)a3 initialContentInsetTop:(double)a4
{
  uint64_t v5 = *((void *)&self->_tableFlags + 3);
  if ((v5 & 4) == 0)
  {
    if ((v5 & 8) == 0 || [(UIScrollView *)self isDragging])
    {
      [(UITableView *)self _retargetScrollAnimation];
      return;
    }
    if ([(UIScrollView *)self isDecelerating])
    {
      [(UIScrollView *)self contentOffset];
      double v11 = self;
      goto LABEL_9;
    }
    [(UIScrollView *)self _adjustContentOffsetIfNecessary];
    if ([(UITableView *)self _retargetScrollAnimation]
      || ![(UIScrollView *)self isScrollAnimating]
      || [(UIScrollView *)self _isScrollingToTop])
    {
      return;
    }
    [(UIScrollView *)self _animatedTargetOffset];
    double v18 = self;
    goto LABEL_29;
  }
  [(UITableView *)self _ensurePreReloadVisibleRowRangeIsValidWithPostReloadRowCount:a3];
  [(UIScrollView *)self contentOffset];
  double v8 = v7;
  [(UITableView *)self _contentOffsetYForRestoringScrollPositionOfFirstVisibleRowWithContentInsetTop:1 canGuessHeights:a4];
  double v10 = v9;
  if ([(UIScrollView *)self isDecelerating])
  {
    -[UITableView setContentOffset:](self, "setContentOffset:", v8, v10);
    double v11 = self;
    double v12 = v8;
    double v13 = v10;
LABEL_9:
    -[UIScrollView _updateDecelerationLastOffset:](v11, "_updateDecelerationLastOffset:", v12, v13);
    return;
  }
  if ([(UIScrollView *)self isDragging])
  {
    double v14 = self;
    double v15 = v8;
    double v16 = v10;
  }
  else
  {
    if ([(UIScrollView *)self isScrollAnimating])
    {
      -[UITableView setContentOffset:](self, "setContentOffset:", v8, v10);
      if ([(UITableView *)self _retargetScrollAnimation]
        || [(UIScrollView *)self _isScrollingToTop])
      {
        return;
      }
      double v17 = v10 + self->_preReloadAnimationTargetOffsetDelta;
      double v18 = self;
      double v19 = v8;
LABEL_29:
      -[UITableView _validContentOffsetForProposedOffset:](v18, "_validContentOffsetForProposedOffset:", v19, v17);
      -[UIScrollView _updateScrollAnimationForChangedTargetOffset:](self, "_updateScrollAnimationForChangedTargetOffset:");
      return;
    }
    -[UITableView _validContentOffsetForProposedOffset:](self, "_validContentOffsetForProposedOffset:", v8, v10);
    double v14 = self;
  }
  -[UITableView setContentOffset:](v14, "setContentOffset:", v15, v16);
}

- (BOOL)_retargetScrollAnimation
{
  BOOL v3 = [(UIScrollView *)self isScrollAnimating];
  if (v3)
  {
    if (!self->_targetIndexPathForScrolling) {
      goto LABEL_7;
    }
    BOOL v3 = [(UITableView *)self _estimatesHeights];
    if (v3)
    {
      uint64_t v4 = [(NSIndexPath *)self->_targetIndexPathForScrolling section];
      uint64_t v5 = [(NSIndexPath *)self->_targetIndexPathForScrolling row];
      if (v4 < [(UITableView *)self _numberOfSectionsUsingPresentationValues:1]&& v5 < [(UITableView *)self _numberOfRowsInSection:v4 usingPresentationValues:1])
      {
        -[UIScrollView contentOffset](self, "contentOffset", -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:]((uint64_t)self->_rowData, v5, v4, 0));
        -[UITableView _validContentOffsetForProposedOffset:](self, "_validContentOffsetForProposedOffset:");
        -[UIScrollView _updateScrollAnimationForChangedTargetOffset:](self, "_updateScrollAnimationForChangedTargetOffset:");
        LOBYTE(v3) = 1;
        return v3;
      }
LABEL_7:
      LOBYTE(v3) = 0;
    }
  }
  return v3;
}

- (void)_endUpdatingVisibleCells:(BOOL)a3 originalContentOffset:(CGPoint)a4 originalContentHeight:(double)a5 focusedView:(id)a6 focusedViewType:(int)a7
{
  uint64_t v7 = *(void *)&a7;
  double y = a4.y;
  double x = a4.x;
  BOOL v11 = a3;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v13 = a6;
  p_uint64_t tableFlags = &self->_tableFlags;
  uint64_t v15 = *((void *)&self->_tableFlags + 2);
  uint64_t v16 = 0x100000000;
  if (!v11) {
    uint64_t v16 = 0;
  }
  unint64_t v17 = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFEFFFFFFFFLL | v16;
  *((void *)&self->_tableFlags + 3) = v17;
  if (!v11)
  {
    *((void *)&self->_tableFlags + 2) = v15;
    *((void *)&self->_tableFlags + 3) = v17 & 0xFFFFFFFFFFFFFFF3;
    [(UITableView *)self _updateFocusAfterLoadingCellsWithFocusedView:v13 viewType:v7];
    [(UITableView *)self _reapTentativeViews];
    if ((*((unsigned char *)&self->_tableFlags + 21) & 2) == 0)
    {
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      double v18 = self->_visibleCells;
      uint64_t v19 = [(NSMutableArray *)v18 countByEnumeratingWithState:&v42 objects:v52 count:16];
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)v43;
        do
        {
          uint64_t v22 = 0;
          do
          {
            if (*(void *)v43 != v21) {
              objc_enumerationMutation(v18);
            }
            objc_msgSend(*(id *)(*((void *)&v42 + 1) + 8 * v22++), "_setIndexPath:", 0, (void)v42);
          }
          while (v20 != v22);
          uint64_t v20 = [(NSMutableArray *)v18 countByEnumeratingWithState:&v42 objects:v52 count:16];
        }
        while (v20);
      }

      *((void *)&self->_tableFlags + 2) |= 0x20000000000uLL;
    }
    int has_internal_diagnostics = os_variant_has_internal_diagnostics();
    uint64_t v24 = *((void *)&self->_tableFlags + 1);
    if (has_internal_diagnostics)
    {
      if ((v24 & 0x80000000000000) != 0) {
        goto LABEL_16;
      }
      NSUInteger length = self->_visibleRows.length;
      if (length == [(NSMutableArray *)self->_visibleCells count]) {
        goto LABEL_16;
      }
      CGFloat v33 = __UIFaultDebugAssertLog();
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_FAULT)) {
        goto LABEL_34;
      }
      double v34 = NSStringFromRange(self->_visibleRows);
      uint64_t v35 = [(NSMutableArray *)self->_visibleCells count];
      visibleCells = self->_visibleCells;
      *(_DWORD *)long long buf = 138412802;
      uint64_t v47 = v34;
      __int16 v48 = 2048;
      uint64_t v49 = v35;
      __int16 v50 = 2112;
      uint64_t v51 = visibleCells;
      _os_log_fault_impl(&dword_1853B0000, v33, OS_LOG_TYPE_FAULT, "UITableView internal inconsistency: _visibleRows and _visibleCells must be of same length. _visibleRows: %@; _vi"
        "sibleCells.count: %ld, _visibleCells: %@",
        buf,
        0x20u);
    }
    else
    {
      if ((v24 & 0x80000000000000) != 0) {
        goto LABEL_16;
      }
      NSUInteger v25 = self->_visibleRows.length;
      if (v25 == [(NSMutableArray *)self->_visibleCells count]) {
        goto LABEL_16;
      }
      CGRect v37 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_endUpdatingVisibleCells_originalContentOffset_originalContentHeight_focusedView_focusedViewType____s_category)+ 8);
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      NSUInteger location = self->_visibleRows.location;
      NSUInteger v39 = self->_visibleRows.length;
      CGFloat v33 = v37;
      v54.NSUInteger location = location;
      v54.NSUInteger length = v39;
      p_uint64_t tableFlags = &self->_tableFlags;
      double v34 = NSStringFromRange(v54);
      uint64_t v40 = [(NSMutableArray *)self->_visibleCells count];
      double v41 = self->_visibleCells;
      *(_DWORD *)long long buf = 138412802;
      uint64_t v47 = v34;
      __int16 v48 = 2048;
      uint64_t v49 = v40;
      __int16 v50 = 2112;
      uint64_t v51 = v41;
      _os_log_impl(&dword_1853B0000, v33, OS_LOG_TYPE_ERROR, "UITableView internal inconsistency: _visibleRows and _visibleCells must be of same length. _visibleRows: %@; _vi"
        "sibleCells.count: %ld, _visibleCells: %@",
        buf,
        0x20u);
    }

LABEL_34:
LABEL_16:
    [(UIScrollView *)self contentOffset];
    if (x == v27 && y == v26)
    {
      [(UIScrollView *)self contentSize];
      if (v28 != a5) {
        [(UITableView *)self _sendGeometryAffectingContentBottomChangedToScrollObservers];
      }
    }
    else
    {
      [(UITableView *)self _notifyDidScroll];
    }
    uint64_t v29 = *((void *)p_tableFlags + 2);
    uint64_t v30 = *((void *)p_tableFlags + 3);
    if ((v30 & 0x200000000) != 0)
    {
      *((void *)p_tableFlags + 2) = v29;
      *((void *)p_tableFlags + 3) = v30 & 0xFFFFFFFDFFFFFFFFLL;
      [(UITableView *)self _scrollFirstResponderCellToVisible:1];
      uint64_t v29 = *((void *)p_tableFlags + 2);
    }
    if ((v29 & 0x200000000) != 0 && (*((unsigned char *)p_tableFlags + 7) & 0x20) != 0)
    {
      CGFloat v31 = [(UITableView *)self _delegateProxy];
      [v31 tableViewDidFinishReload:self];

      *((void *)p_tableFlags + 2) &= ~0x200000000uLL;
    }
  }
}

- (void)_updateFocusAfterLoadingCellsWithFocusedView:(id)a3 viewType:(int)a4
{
  id v6 = a3;
  uint64_t v7 = v6;
  uint64_t v8 = *((void *)&self->_tableFlags + 3);
  if ((v8 & 0x400) != 0)
  {
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2);
    *((void *)&self->_tableFlags + 3) = v8 & 0xFFFFFFFFFFFFFBFFLL;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = __69__UITableView__updateFocusAfterLoadingCellsWithFocusedView_viewType___block_invoke;
    v9[3] = &unk_1E52DDF08;
    v9[4] = self;
    id v10 = v6;
    int v11 = a4;
    +[UIView performWithoutAnimation:v9];
  }
}

- (CGPoint)_validContentOffsetForProposedOffset:(CGPoint)a3
{
  double y = a3.y;
  [(UIScrollView *)self _effectiveContentInset];
  double v6 = v5;
  double v8 = v7;
  [(UIScrollView *)self contentSize];
  double v10 = v8 + v9;
  [(UIView *)self bounds];
  double v11 = fmax(fmin(y, v10 - CGRectGetHeight(v14)), -v6);
  double v12 = 0.0;
  result.double y = v11;
  result.double x = v12;
  return result;
}

- (id)delegate
{
  v4.receiver = self;
  v4.super_class = (Class)UITableView;
  int v2 = [(UIScrollView *)&v4 delegate];
  return v2;
}

- (void)setDelegate:(id)delegate
{
  id v4 = delegate;
  id v5 = [(UITableView *)self delegate];
  if (v4)
  {
    if (dyld_program_sdk_at_least() & 1) != 0 || (objc_msgSend(v4, sel_allowsWeakReference))
    {
      if (v5 == v4 && (*((unsigned char *)&self->_tableFlags + 13) & 0x10) == 0) {
        goto LABEL_208;
      }
      goto LABEL_11;
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __27__UITableView_setDelegate___block_invoke;
    block[3] = &unk_1E52D9F98;
    id v181 = v4;
    v182 = self;
    uint64_t v6 = setDelegate__once_2;
    id v7 = v4;
    if (v6 != -1) {
      dispatch_once(&setDelegate__once_2, block);
    }

    id v4 = 0;
  }
  if (!v5) {
    goto LABEL_208;
  }
LABEL_11:
  p_uint64_t tableFlags = &self->_tableFlags;
  if ((*((unsigned char *)&self->_tableFlags + 25) & 1) == 0)
  {
    BOOL v178 = [(UITableView *)self _estimatesHeights];
    v179.receiver = self;
    v179.super_class = (Class)UITableView;
    [(UIScrollView *)&v179 setDelegate:v4];
    double v9 = [(UITableView *)self delegate];
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFEFFFFFFFFFFFLL | ((unint64_t)(v9 != 0) << 44);
    char v10 = objc_opt_respondsToSelector();
    uint64_t v11 = 0x8000000;
    if ((v10 & 1) == 0) {
      uint64_t v11 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFF7FFFFFFLL | v11;
    char v12 = objc_opt_respondsToSelector();
    uint64_t v13 = 0x10000000;
    if ((v12 & 1) == 0) {
      uint64_t v13 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFEFFFFFFFLL | v13;
    char v14 = objc_opt_respondsToSelector();
    uint64_t v15 = 0x20000000;
    if ((v14 & 1) == 0) {
      uint64_t v15 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFDFFFFFFFLL | v15;
    char v16 = objc_opt_respondsToSelector();
    uint64_t v17 = 0x40000000;
    if ((v16 & 1) == 0) {
      uint64_t v17 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFBFFFFFFFLL | v17;
    char v18 = objc_opt_respondsToSelector();
    uint64_t v19 = 0x80000000;
    if ((v18 & 1) == 0) {
      uint64_t v19 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFF7FFFFFFFLL | v19;
    char v20 = objc_opt_respondsToSelector();
    uint64_t v21 = 0x100000000;
    if ((v20 & 1) == 0) {
      uint64_t v21 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFEFFFFFFFFLL | v21;
    char v22 = objc_opt_respondsToSelector();
    uint64_t v23 = 0x200000000;
    if ((v22 & 1) == 0) {
      uint64_t v23 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFDFFFFFFFFLL | v23;
    char v24 = objc_opt_respondsToSelector();
    uint64_t v25 = 0x400000000;
    if ((v24 & 1) == 0) {
      uint64_t v25 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFBFFFFFFFFLL | v25;
    char v26 = objc_opt_respondsToSelector();
    uint64_t v27 = 0x800000000;
    if ((v26 & 1) == 0) {
      uint64_t v27 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFF7FFFFFFFFLL | v27;
    char v28 = objc_opt_respondsToSelector();
    uint64_t v29 = 0x1000000000;
    if ((v28 & 1) == 0) {
      uint64_t v29 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFEFFFFFFFFFLL | v29;
    char v30 = objc_opt_respondsToSelector();
    uint64_t v31 = 0x2000000000;
    if ((v30 & 1) == 0) {
      uint64_t v31 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFDFFFFFFFFFLL | v31;
    char v32 = objc_opt_respondsToSelector();
    uint64_t v33 = 0x4000000000;
    if ((v32 & 1) == 0) {
      uint64_t v33 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFBFFFFFFFFFLL | v33;
    char v34 = objc_opt_respondsToSelector();
    uint64_t v35 = 0x8000000000;
    if ((v34 & 1) == 0) {
      uint64_t v35 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFF7FFFFFFFFFLL | v35;
    char v36 = objc_opt_respondsToSelector();
    uint64_t v37 = 0x10000000000;
    if ((v36 & 1) == 0) {
      uint64_t v37 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFEFFFFFFFFFFLL | v37;
    char v38 = objc_opt_respondsToSelector();
    uint64_t v39 = 0x20000000000;
    if ((v38 & 1) == 0) {
      uint64_t v39 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFDFFFFFFFFFFLL | v39;
    char v40 = objc_opt_respondsToSelector();
    uint64_t v41 = 0x40000000000;
    if ((v40 & 1) == 0) {
      uint64_t v41 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFBFFFFFFFFFFLL | v41;
    char v42 = objc_opt_respondsToSelector();
    uint64_t v43 = 0x80000000000;
    if ((v42 & 1) == 0) {
      uint64_t v43 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFF7FFFFFFFFFFLL | v43;
    char v44 = objc_opt_respondsToSelector();
    uint64_t v45 = 0x100000000000;
    if ((v44 & 1) == 0) {
      uint64_t v45 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFEFFFFFFFFFFFLL | v45;
    if (v44) {
      NSLog(&cfstr_WarningUsingLe.isa, v9);
    }
    char v46 = objc_opt_respondsToSelector();
    uint64_t v47 = 0x200000000000;
    if ((v46 & 1) == 0) {
      uint64_t v47 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFDFFFFFFFFFFFLL | v47;
    char v48 = objc_opt_respondsToSelector();
    uint64_t v49 = 0x400000000000;
    if ((v48 & 1) == 0) {
      uint64_t v49 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFBFFFFFFFFFFFLL | v49;
    char v50 = objc_opt_respondsToSelector();
    uint64_t v51 = 0x800000000000;
    if ((v50 & 1) == 0) {
      uint64_t v51 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFF7FFFFFFFFFFFLL | v51;
    char v52 = objc_opt_respondsToSelector();
    uint64_t v53 = 0x1000000000000;
    if ((v52 & 1) == 0) {
      uint64_t v53 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFEFFFFFFFFFFFFLL | v53;
    char v54 = objc_opt_respondsToSelector();
    uint64_t v55 = 0x2000000000000;
    if ((v54 & 1) == 0) {
      uint64_t v55 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFDFFFFFFFFFFFFLL | v55;
    char v56 = objc_opt_respondsToSelector();
    uint64_t v57 = 0x4000000000000;
    if ((v56 & 1) == 0) {
      uint64_t v57 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFBFFFFFFFFFFFFLL | v57;
    char v58 = objc_opt_respondsToSelector();
    uint64_t v59 = 0x8000000000000;
    if ((v58 & 1) == 0) {
      uint64_t v59 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFF7FFFFFFFFFFFFLL | v59;
    char v60 = objc_opt_respondsToSelector();
    uint64_t v61 = 0x10000000000000;
    if ((v60 & 1) == 0) {
      uint64_t v61 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFEFFFFFFFFFFFFFLL | v61;
    char v62 = objc_opt_respondsToSelector();
    uint64_t v63 = 0x20000000000000;
    if ((v62 & 1) == 0) {
      uint64_t v63 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFDFFFFFFFFFFFFFLL | v63;
    char v64 = objc_opt_respondsToSelector();
    uint64_t v65 = 0x40000000000000;
    if ((v64 & 1) == 0) {
      uint64_t v65 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFBFFFFFFFFFFFFFLL | v65;
    char v66 = objc_opt_respondsToSelector();
    uint64_t v67 = 0x40000;
    if ((v66 & 1) == 0) {
      uint64_t v67 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFBFFFFLL | v67;
    char v68 = objc_opt_respondsToSelector();
    uint64_t v69 = 0x80000;
    if ((v68 & 1) == 0) {
      uint64_t v69 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFF7FFFFLL | v69;
    char v70 = objc_opt_respondsToSelector();
    uint64_t v71 = 0x100000;
    if ((v70 & 1) == 0) {
      uint64_t v71 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFEFFFFFLL | v71;
    if (objc_opt_respondsToSelector()) {
      uint64_t v72 = 0x200000;
    }
    else {
      uint64_t v72 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFDFFFFFLL | v72;
    if (objc_opt_respondsToSelector()) {
      uint64_t v73 = 0x400000;
    }
    else {
      uint64_t v73 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFBFFFFFLL | v73;
    if (objc_opt_respondsToSelector()) {
      uint64_t v74 = 0x800000;
    }
    else {
      uint64_t v74 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFF7FFFFFLL | v74;
    if (objc_opt_respondsToSelector()) {
      uint64_t v75 = 0x1000000;
    }
    else {
      uint64_t v75 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFEFFFFFFLL | v75;
    if (objc_opt_respondsToSelector()) {
      uint64_t v76 = 0x2000000;
    }
    else {
      uint64_t v76 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFDFFFFFFLL | v76;
    char v77 = objc_opt_respondsToSelector();
    uint64_t v78 = 0x80000000000000;
    if ((v77 & 1) == 0) {
      uint64_t v78 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFF7FFFFFFFFFFFFFLL | v78;
    char v79 = objc_opt_respondsToSelector();
    uint64_t v80 = 0x100000000000000;
    if ((v79 & 1) == 0) {
      uint64_t v80 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFEFFFFFFFFFFFFFFLL | v80;
    char v81 = objc_opt_respondsToSelector();
    uint64_t v82 = 0x200000000000000;
    if ((v81 & 1) == 0) {
      uint64_t v82 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFDFFFFFFFFFFFFFFLL | v82;
    char v83 = objc_opt_respondsToSelector();
    uint64_t v84 = 0x400000000000000;
    if ((v83 & 1) == 0) {
      uint64_t v84 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFBFFFFFFFFFFFFFFLL | v84;
    char v85 = objc_opt_respondsToSelector();
    uint64_t v86 = 0x800000000000000;
    if ((v85 & 1) == 0) {
      uint64_t v86 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xF7FFFFFFFFFFFFFFLL | v86;
    char v87 = objc_opt_respondsToSelector();
    uint64_t v88 = 0x1000000000000000;
    if ((v87 & 1) == 0) {
      uint64_t v88 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xEFFFFFFFFFFFFFFFLL | v88;
    char v89 = objc_opt_respondsToSelector();
    uint64_t v90 = 0x2000000000000000;
    if ((v89 & 1) == 0) {
      uint64_t v90 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xDFFFFFFFFFFFFFFFLL | v90;
    char v91 = objc_opt_respondsToSelector();
    uint64_t v92 = 0x4000000000000000;
    if ((v91 & 1) == 0) {
      uint64_t v92 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xBFFFFFFFFFFFFFFFLL | v92;
    char v93 = objc_opt_respondsToSelector();
    unint64_t v94 = 0x8000000000000000;
    if ((v93 & 1) == 0) {
      unint64_t v94 = 0;
    }
    *(void *)p_uint64_t tableFlags = v94 & 0x8000000000000000 | *(void *)p_tableFlags & 0x7FFFFFFFFFFFFFFFLL;
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFFELL | ((objc_opt_respondsToSelector() & 1) != 0);
    char v95 = objc_opt_respondsToSelector();
    uint64_t v96 = 2;
    if ((v95 & 1) == 0) {
      uint64_t v96 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFFDLL | v96;
    char v97 = objc_opt_respondsToSelector();
    uint64_t v98 = 4;
    if ((v97 & 1) == 0) {
      uint64_t v98 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFFBLL | v98;
    char v99 = objc_opt_respondsToSelector();
    uint64_t v100 = 8;
    if ((v99 & 1) == 0) {
      uint64_t v100 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFF7 | v100;
    char v101 = objc_opt_respondsToSelector();
    uint64_t v102 = 16;
    if ((v101 & 1) == 0) {
      uint64_t v102 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFEFLL | v102;
    char v103 = objc_opt_respondsToSelector();
    uint64_t v104 = 32;
    if ((v103 & 1) == 0) {
      uint64_t v104 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFDFLL | v104;
    char v105 = objc_opt_respondsToSelector();
    uint64_t v106 = 64;
    if ((v105 & 1) == 0) {
      uint64_t v106 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFFBFLL | v106;
    char v107 = objc_opt_respondsToSelector();
    uint64_t v108 = 128;
    if ((v107 & 1) == 0) {
      uint64_t v108 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFF7FLL | v108;
    char v109 = objc_opt_respondsToSelector();
    uint64_t v110 = 256;
    if ((v109 & 1) == 0) {
      uint64_t v110 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFEFFLL | v110;
    char v111 = objc_opt_respondsToSelector();
    uint64_t v112 = 512;
    if ((v111 & 1) == 0) {
      uint64_t v112 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFDFFLL | v112;
    char v113 = objc_opt_respondsToSelector();
    uint64_t v114 = 1024;
    if ((v113 & 1) == 0) {
      uint64_t v114 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFFBFFLL | v114;
    char v115 = objc_opt_respondsToSelector();
    uint64_t v116 = 2048;
    if ((v115 & 1) == 0) {
      uint64_t v116 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFF7FFLL | v116;
    char v117 = objc_opt_respondsToSelector();
    uint64_t v118 = 4096;
    if ((v117 & 1) == 0) {
      uint64_t v118 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFEFFFLL | v118;
    char v119 = objc_opt_respondsToSelector();
    uint64_t v120 = 0x2000;
    if ((v119 & 1) == 0) {
      uint64_t v120 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFDFFFLL | v120;
    char v121 = objc_opt_respondsToSelector();
    uint64_t v122 = 0x4000;
    if ((v121 & 1) == 0) {
      uint64_t v122 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFFBFFFLL | v122;
    char v123 = objc_opt_respondsToSelector();
    uint64_t v124 = 0x8000;
    if ((v123 & 1) == 0) {
      uint64_t v124 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFF7FFFLL | v124;
    char v125 = objc_opt_respondsToSelector();
    uint64_t v126 = 0x10000;
    if ((v125 & 1) == 0) {
      uint64_t v126 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFEFFFFLL | v126;
    char v127 = objc_opt_respondsToSelector();
    uint64_t v128 = 0x20000;
    if ((v127 & 1) == 0) {
      uint64_t v128 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFDFFFFLL | v128;
    char v129 = objc_opt_respondsToSelector();
    uint64_t v130 = 0x40000;
    if ((v129 & 1) == 0) {
      uint64_t v130 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFFBFFFFLL | v130;
    char v131 = objc_opt_respondsToSelector();
    uint64_t v132 = 0x80000;
    if ((v131 & 1) == 0) {
      uint64_t v132 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFF7FFFFLL | v132;
    char v133 = objc_opt_respondsToSelector();
    uint64_t v134 = 0x100000;
    if ((v133 & 1) == 0) {
      uint64_t v134 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFEFFFFFLL | v134;
    if (objc_opt_respondsToSelector()) {
      uint64_t v135 = 0x200000;
    }
    else {
      uint64_t v135 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFDFFFFFLL | v135;
    if (objc_opt_respondsToSelector()) {
      uint64_t v136 = 0x400000;
    }
    else {
      uint64_t v136 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFFBFFFFFLL | v136;
    if (objc_opt_respondsToSelector()) {
      uint64_t v137 = 0x800000;
    }
    else {
      uint64_t v137 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFF7FFFFFLL | v137;
    if (objc_opt_respondsToSelector()) {
      uint64_t v138 = 0x1000000;
    }
    else {
      uint64_t v138 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFEFFFFFFLL | v138;
    if (objc_opt_respondsToSelector()) {
      uint64_t v139 = 0x2000000;
    }
    else {
      uint64_t v139 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFDFFFFFFLL | v139;
    char v140 = objc_opt_respondsToSelector();
    uint64_t v141 = 0x4000000;
    if ((v140 & 1) == 0) {
      uint64_t v141 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFFBFFFFFFLL | v141;
    char v142 = objc_opt_respondsToSelector();
    uint64_t v143 = 0x8000000;
    if ((v142 & 1) == 0) {
      uint64_t v143 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFF7FFFFFFLL | v143;
    char v144 = objc_opt_respondsToSelector();
    uint64_t v145 = 0x10000000;
    if ((v144 & 1) == 0) {
      uint64_t v145 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFEFFFFFFFLL | v145;
    char v146 = objc_opt_respondsToSelector();
    uint64_t v147 = 0x20000000;
    if ((v146 & 1) == 0) {
      uint64_t v147 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFDFFFFFFFLL | v147;
    char v148 = objc_opt_respondsToSelector();
    uint64_t v149 = 0x40000000;
    if ((v148 & 1) == 0) {
      uint64_t v149 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFFBFFFFFFFLL | v149;
    char v150 = objc_opt_respondsToSelector();
    uint64_t v151 = 0x80000000;
    if ((v150 & 1) == 0) {
      uint64_t v151 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFF7FFFFFFFLL | v151;
    char v152 = objc_opt_respondsToSelector();
    uint64_t v153 = 0x100000000;
    if ((v152 & 1) == 0) {
      uint64_t v153 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFEFFFFFFFFLL | v153;
    char v154 = objc_opt_respondsToSelector();
    uint64_t v155 = 0x200000000;
    if ((v154 & 1) == 0) {
      uint64_t v155 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFDFFFFFFFFLL | v155;
    char v156 = objc_opt_respondsToSelector();
    uint64_t v157 = 0x400000000;
    if ((v156 & 1) == 0) {
      uint64_t v157 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFFBFFFFFFFFLL | v157;
    char v158 = objc_opt_respondsToSelector();
    uint64_t v159 = 0x800000000;
    if ((v158 & 1) == 0) {
      uint64_t v159 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFF7FFFFFFFFLL | v159;
    char v160 = objc_opt_respondsToSelector();
    uint64_t v161 = 0x1000000000;
    if ((v160 & 1) == 0) {
      uint64_t v161 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFEFFFFFFFFFLL | v161;
    char v162 = objc_opt_respondsToSelector();
    uint64_t v163 = 0x2000000000;
    if ((v162 & 1) == 0) {
      uint64_t v163 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFDFFFFFFFFFLL | v163;
    char v164 = objc_opt_respondsToSelector();
    uint64_t v165 = 0x4000000000;
    if ((v164 & 1) == 0) {
      uint64_t v165 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFFBFFFFFFFFFLL | v165;
    char v166 = objc_opt_respondsToSelector();
    uint64_t v167 = 0x80000000000;
    if ((v166 & 1) == 0) {
      uint64_t v167 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFF7FFFFFFFFFFLL | v167;
    if (_UIIsPrivateMainBundle())
    {
      char v168 = objc_opt_respondsToSelector();
      uint64_t v169 = 0x8000000000;
      if ((v168 & 1) == 0) {
        uint64_t v169 = 0;
      }
      *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFF7FFFFFFFFFLL | v169;
    }
    char v170 = objc_opt_respondsToSelector();
    uint64_t v171 = 0x10000000000;
    if ((v170 & 1) == 0) {
      uint64_t v171 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFEFFFFFFFFFFLL | v171;
    char v172 = objc_opt_respondsToSelector();
    uint64_t v173 = 0x20000000000;
    if ((v172 & 1) == 0) {
      uint64_t v173 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFDFFFFFFFFFFLL | v173;
    char v174 = objc_opt_respondsToSelector();
    uint64_t v175 = 0x40000000000;
    if ((v174 & 1) == 0) {
      uint64_t v175 = 0;
    }
    *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFFFFBFFFFFFFFFFLL | v175;
    if ((*((unsigned char *)&self->_tableFlags + 19) & 0x80) == 0)
    {
      v176 = [(UITableView *)self _tableHeaderView:1];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if (isKindOfClass) {
        [(UITableView *)self setTableHeaderViewShouldAutoHide:1];
      }
    }
    if (v178 != [(UITableView *)self _estimatesHeights]) {
      [(UITableView *)self _updateRowDataIfNeeded];
    }
    [(UITableView *)self _configureContextMenuInteractionIfNeeded];
  }
LABEL_208:
}

- (id)_tableHeaderView:(BOOL)a3
{
  if (self->_tableHeaderView) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = !a3;
  }
  if (!v4 && (*((unsigned char *)&self->_tableFlags + 8) & 1) != 0)
  {
    v15.origin.double x = -[UITableViewRowData rectForTableHeaderView]((uint64_t)self->_rowData);
    double x = v15.origin.x;
    double y = v15.origin.y;
    double width = v15.size.width;
    double height = v15.size.height;
    if (!CGRectIsEmpty(v15))
    {
      double v9 = [(UITableView *)self _delegateProxy];
      char v10 = [v9 viewForHeaderInTableView:self];
      tableHeaderView = self->_tableHeaderView;
      self->_tableHeaderView = v10;

      -[UIView setFrame:](self->_tableHeaderView, "setFrame:", x, y, width, height);
      [(UITableView *)self _addContentSubview:self->_tableHeaderView atBack:0];
    }
  }
  char v12 = self->_tableHeaderView;
  return v12;
}

- (void)_configureContextMenuInteractionIfNeeded
{
  contextMenuInteraction = self->_contextMenuInteraction;
  if ((*((unsigned char *)&self->_tableFlags + 12) & 0x10) != 0)
  {
    if (!contextMenuInteraction)
    {
      id v5 = [[UIContextMenuInteraction alloc] initWithDelegate:self];
      uint64_t v6 = self->_contextMenuInteraction;
      self->_contextMenuInteraction = v5;

      id v7 = self->_contextMenuInteraction;
      [(UIView *)self addInteraction:v7];
    }
  }
  else if (contextMenuInteraction)
  {
    -[UIView removeInteraction:](self, "removeInteraction:");
    BOOL v4 = self->_contextMenuInteraction;
    self->_contextMenuInteraction = 0;
  }
}

void __29__UITableView_setDataSource___block_invoke_581(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    int v2 = [WeakRetained dataSource];
    if (!v2) {
      [v3 setDataSource:0];
    }

    id WeakRetained = v3;
  }
}

- (void)_accessibilitySetInterfaceStyleIntent:(unint64_t)a3
{
  v4.receiver = self;
  v4.super_class = (Class)UITableView;
  [(UIView *)&v4 _accessibilitySetInterfaceStyleIntent:a3];
  [(UITableView *)self _resetDarkenedSeparatorColor];
}

- (void)setSeparatorColor:(UIColor *)separatorColor
{
  id v5 = separatorColor;
  p_separatorColor = &self->_separatorColor;
  if (self->_separatorColor != v5)
  {
    char v16 = v5;
    objc_storeStrong((id *)&self->_separatorColor, separatorColor);
    if (!*p_separatorColor)
    {
      uint64_t v7 = [(UITableView *)self _defaultSeparatorColor];
      double v8 = *p_separatorColor;
      *p_separatorColor = (UIColor *)v7;
    }
    [(UITableView *)self _resetDarkenedSeparatorColor];
    BOOL v9 = [(UITableView *)self _shouldDrawDarkSeparators];
    p_darkenedSeparatorColor = &self->_separatorColor;
    if (v9) {
      p_darkenedSeparatorColor = &self->_darkenedSeparatorColor;
    }
    uint64_t v11 = *p_darkenedSeparatorColor;
    [(UITableView *)self _distributeSeparatorColor:v11];
    char v12 = *p_separatorColor;
    uint64_t v13 = +[UIColor tableSeparatorDarkColor];
    if ([(UIColor *)v12 isEqual:v13])
    {
    }
    else
    {
      char v14 = *p_separatorColor;
      CGRect v15 = +[UIColor tableSeparatorLightColor];
      LOBYTE(v14) = [(UIColor *)v14 isEqual:v15];

      if ((v14 & 1) == 0) {
        [(UITableView *)self _setSeparatorsDrawInVibrantLightModeUIAppearance:MEMORY[0x1E4F1CC28]];
      }
    }

    id v5 = v16;
  }
}

- (void)_resetDarkenedSeparatorColor
{
  id v3 = [(UIView *)self _accessibilityHigherContrastTintColorForColor:self->_separatorColor];
  darkenedSeparatorColor = self->_darkenedSeparatorColor;
  self->_darkenedSeparatorColor = v3;
}

void __48__UITableView__applyAppearanceDefaultsForStyle___block_invoke(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) _constants];
  id v3 = [v2 defaultBackgroundColorForTableViewStyle:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setBackgroundColor:v3];

  objc_super v4 = [*(id *)(a1 + 32) _constants];
  id v5 = [v4 defaultBackgroundEffectsForTableViewStyle:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _setBackgroundEffects:v5];

  uint64_t v6 = [*(id *)(a1 + 32) _constants];
  uint64_t v7 = [v6 defaultSeparatorColorForTableViewStyle:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setSeparatorColor:v7];

  double v8 = [*(id *)(a1 + 32) _constants];
  objc_msgSend(*(id *)(a1 + 32), "setSeparatorStyle:", objc_msgSend(v8, "defaultSeparatorStyleForTableViewStyle:", *(void *)(a1 + 40)));

  id v10 = [*(id *)(a1 + 32) _constants];
  BOOL v9 = [v10 defaultSeparatorVisualEffectForTableViewStyle:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setSeparatorEffect:v9];
}

uint64_t __65__UITableView__setupIdiom_forTableViewStyle_includingBackground___block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    int v2 = *(void **)(a1 + 32);
    id v3 = [*(id *)(a1 + 40) defaultBackgroundColorForTableViewStyle:*(void *)(a1 + 48)];
    [v2 setBackgroundColor:v3];

    objc_super v4 = *(void **)(a1 + 32);
    id v5 = [*(id *)(a1 + 40) defaultBackgroundEffectsForTableViewStyle:*(void *)(a1 + 48)];
    [v4 _setBackgroundEffects:v5];
  }
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = [*(id *)(a1 + 40) defaultSeparatorColorForTableViewStyle:*(void *)(a1 + 48)];
  [v6 setSeparatorColor:v7];

  double v8 = *(void **)(a1 + 32);
  uint64_t v9 = [*(id *)(a1 + 40) defaultSeparatorStyleForTableViewStyle:*(void *)(a1 + 48)];
  return [v8 setSeparatorStyle:v9];
}

- (void)setSeparatorStyle:(UITableViewCellSeparatorStyle)separatorStyle
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *((void *)&self->_tableFlags + 1);
  if ((HIWORD(v3) & 7) != separatorStyle)
  {
    *(void *)&self->_uint64_t tableFlags = self->_tableFlags;
    *((void *)&self->_tableFlags + 1) = v3 & 0xFFF8FFFFFFFFFFFFLL | ((unint64_t)(separatorStyle & 7) << 48);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v5 = (void *)[(NSMutableArray *)self->_visibleCells copy];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          uint64_t v11 = [(UITableView *)self _indexPathForCell:v10 usingPresentationValues:1];
          [(UITableView *)self _updateSeparatorStyleForCell:v10 atIndexPath:v11];
          [(UITableView *)self _backgroundContentInset];
          objc_msgSend(v10, "_setBackgroundInset:");
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v7);
    }

    [(UITableView *)self _scheduleAdjustExtraSeparators];
  }
}

- (void)setSeparatorEffect:(UIVisualEffect *)separatorEffect
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  objc_super v4 = separatorEffect;
  id v5 = v4;
  if (self->_separatorEffect != v4)
  {
    uint64_t v6 = (UIVisualEffect *)[(UIVisualEffect *)v4 copy];
    uint64_t v7 = self->_separatorEffect;
    self->_separatorEffect = v6;

    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v8 = self->_visibleCells;
    uint64_t v9 = [(NSMutableArray *)v8 countByEnumeratingWithState:&v25 objects:v30 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v26 != v11) {
            objc_enumerationMutation(v8);
          }
          [*(id *)(*((void *)&v25 + 1) + 8 * i) _setSeparatorEffect:self->_separatorEffect];
        }
        uint64_t v10 = [(NSMutableArray *)v8 countByEnumeratingWithState:&v25 objects:v30 count:16];
      }
      while (v10);
    }

    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v14 = self->_extraSeparators;
    uint64_t v15 = [(NSMutableArray *)v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v22;
      do
      {
        for (uint64_t j = 0; j != v16; ++j)
        {
          if (*(void *)v22 != v17) {
            objc_enumerationMutation(v14);
          }
          uint64_t v19 = *(void **)(*((void *)&v21 + 1) + 8 * j);
          objc_msgSend(v19, "setSeparatorEffect:", self->_separatorEffect, (void)v21);
          if (isKindOfClass)
          {
            [v19 setBackgroundColor:0];
          }
          else
          {
            char v20 = [(UITableView *)self separatorColor];
            [v19 setBackgroundColor:v20];
          }
        }
        uint64_t v16 = [(NSMutableArray *)v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
      }
      while (v16);
    }
  }
}

- (void)_setSeparatorsDrawInVibrantLightModeUIAppearance:(id)a3
{
  id v4 = a3;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __64__UITableView__setSeparatorsDrawInVibrantLightModeUIAppearance___block_invoke;
  v6[3] = &unk_1E52D9F98;
  v6[4] = self;
  id v7 = v4;
  id v5 = v4;
  +[UIView _performSystemAppearanceModifications:v6];
}

- (void)_distributeSeparatorColor:(id)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v5 = self->_visibleCells;
  uint64_t v6 = [(NSMutableArray *)v5 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v20;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v5);
        }
        [*(id *)(*((void *)&v19 + 1) + 8 * v9++) setSeparatorColor:v4];
      }
      while (v7 != v9);
      uint64_t v7 = [(NSMutableArray *)v5 countByEnumeratingWithState:&v19 objects:v24 count:16];
    }
    while (v7);
  }

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    uint64_t v10 = self->_extraSeparators;
    uint64_t v11 = [(NSMutableArray *)v10 countByEnumeratingWithState:&v15 objects:v23 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v16;
      do
      {
        uint64_t v14 = 0;
        do
        {
          if (*(void *)v16 != v13) {
            objc_enumerationMutation(v10);
          }
          objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * v14++), "setBackgroundColor:", v4, (void)v15);
        }
        while (v12 != v14);
        uint64_t v12 = [(NSMutableArray *)v10 countByEnumeratingWithState:&v15 objects:v23 count:16];
      }
      while (v12);
    }
  }
  [(UIView *)self->_topSeparator setNeedsDisplay];
}

- (void)layoutSubviews
{
  [(UITableView *)self _applyCoalescedContentSizeUpdates];
  [(UITableView *)self _reloadDataIfNeeded];
  if ((*((unsigned char *)&self->_tableFlags + 15) & 4) != 0) {
    [(UITableView *)self _rebuildGeometry];
  }
  [(UITableView *)self _recomputeHeightsForInvalidatedElementsIfNeeded];
  if ((*((unsigned char *)&self->_tableFlags + 15) & 8) != 0 && !self->_tableReloadingSuspendedCount)
  {
    [(UITableView *)self _visibleBounds];
    if (CGRectIsEmpty(v10))
    {
      *((void *)&self->_tableFlags + 1) |= 0x1000000000000000uLL;
    }
    else
    {
      unint64_t v3 = (void *)MEMORY[0x18C108260]();
      [(UITableView *)self _updateVisibleCellsNow:1];
    }
  }
  if ((*((unsigned char *)&self->_tableFlags + 16) & 0x10) != 0) {
    [(UITableView *)self _adjustExtraSeparators];
  }
  [(UITableView *)self _updateBackgroundView];
  [(UITableView *)self _updateIndex];
  [(UIScrollView *)self _scrollViewDidLayoutSubviews];
  contentFocusContainerGuide = self->_contentFocusContainerGuide;
  [(UIView *)self bounds];
  [(UILayoutGuide *)contentFocusContainerGuide _setManualLayoutFrame:"_setManualLayoutFrame:"];
  [(UITableView *)self _preparePrefetchContext];
  [(_UITableViewPrefetchContext *)(uint64_t)self->_prefetchContext pruneCellsForVisibleIndexRange:self->_visibleRows.length];
  if ((*((void *)&self->_tableFlags + 3) & 0x20080) == 0x20000)
  {
    prefetchContext = self->_prefetchContext;
    [(UIScrollView *)self contentOffset];
    NSUInteger location = self->_visibleRows.location;
    NSUInteger length = self->_visibleRows.length;
    [(_UITableViewPrefetchContext *)(uint64_t)prefetchContext updateVisibleIndexRange:length withContentOffset:v6];
  }
}

- (void)setContentOffset:(CGPoint)a3
{
  double y = a3.y;
  double x = a3.x;
  [(UIScrollView *)self contentOffset];
  double v7 = v6;
  double v9 = v8;
  [(UITableView *)self _contentInset];
  double v11 = v10;
  [(UITableView *)self heightForAutohidingTableHeaderView];
  double v13 = v11 + v12;
  if ([(UIScrollView *)self isTracking])
  {
    [(UIScrollView *)self contentOffset];
    if (v14 >= v13 && y < v13)
    {
      uint64_t v18 = 0x40000000;
      goto LABEL_12;
    }
  }
  [(UIScrollView *)self contentOffset];
  if (v16 < v13 && y >= v13)
  {
    uint64_t v18 = 0x20000000;
LABEL_12:
    uint64_t v19 = *((void *)&self->_tableFlags + 3);
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFF9FFFFFFFLL | v18;
    *((void *)&self->_tableFlags + 3) = v19;
  }
  v24.receiver = self;
  v24.super_class = (Class)UITableView;
  -[UIScrollView setContentOffset:](&v24, sel_setContentOffset_, x, y);
  long long v20 = [(UIView *)self traitCollection];
  if ([v20 userInterfaceIdiom] != 3)
  {
LABEL_19:

    goto LABEL_20;
  }
  long long v21 = [(UIView *)self window];
  long long v22 = [v21 _screen];
  long long v23 = [v22 _capabilityForKey:@"UIScreenCapabilityTouchLevelsKey"];
  if ([v23 integerValue] != 2)
  {

    goto LABEL_19;
  }

  if (x != v7 || y != v9) {
    [(UIScrollView *)self _flashScrollIndicatorsPersistingPreviousFlashes];
  }
LABEL_20:
  [(UITableView *)self _updateBackgroundView];
}

- (void)_updateBackgroundView
{
  [(UITableView *)self _updateBackgroundViewFrame];
  if (self->_backgroundView)
  {
    -[UIScrollView _moveContentSubview:toBack:](self, "_moveContentSubview:toBack:");
  }
}

- (void)_updateBackgroundViewFrame
{
  [(UIView *)self bounds];
  backgroundView = self->_backgroundView;
  -[UIView setFrame:](backgroundView, "setFrame:");
}

- (double)heightForAutohidingTableHeaderView
{
  rowData = self->_rowData;
  if (!rowData) {
    return 0.0;
  }
  double heightForTableHeaderViewHiding = rowData->_heightForTableHeaderViewHiding;
  if (heightForTableHeaderViewHiding < 0.0) {
    double heightForTableHeaderViewHiding = -[UITableViewRowData heightForTableHeaderView]((uint64_t)rowData);
  }
  return fmax(heightForTableHeaderViewHiding, 0.0);
}

- (double)_heightForTableHeader
{
  if ([(UITableView *)self _shouldUseNewHeaderFooterBehavior])
  {
    double v3 = 0.0;
    if ((*((unsigned char *)&self->_tableFlags + 7) & 0x40) != 0)
    {
      id v4 = [(UITableView *)self _delegateProxy];
      [v4 heightForHeaderInTableView:self];
      double v3 = v5;
    }
    if (v3 == -1.0) {
      return 0.0;
    }
    else {
      return v3;
    }
  }
  else
  {
    [(UIView *)self->_tableHeaderView frame];
    return CGRectGetHeight(*(CGRect *)&v7);
  }
}

void __48__UITableView__configureCellPrefetchingHandlers__block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = (id **)objc_loadWeakRetained((id *)(a1 + 32));
  double v6 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v7 = WeakRetained[270];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __48__UITableView__configureCellPrefetchingHandlers__block_invoke_3;
    v8[3] = &unk_1E5308F80;
    v8[4] = v6;
    void v8[5] = a2;
    v8[6] = a3;
    -[_UITableViewSubviewManager filterPrefetchedCells:](v7, (uint64_t)v8);
  }
}

- (void)_recomputeHeightsForInvalidatedElementsIfNeeded
{
  if (!self->_intrinsicContentSizeInvalidationContext) {
    return;
  }
  p_uint64_t tableFlags = &self->_tableFlags;
  if ((*((unsigned char *)&self->_tableFlags + 29) & 2) != 0
    && ([(UIView *)self window], id v4 = objc_claimAutoreleasedReturnValue(), v4, v4))
  {
    uint64_t v5 = *((void *)p_tableFlags + 3);
    if ((v5 & 0x40000000000) == 0)
    {
      *((void *)p_tableFlags + 2) = *((void *)p_tableFlags + 2);
      *((void *)p_tableFlags + 3) = v5 | 0x40000000000;
      [(UIScrollView *)self setNeedsLayout];
      return;
    }
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = [(UICollectionViewLayoutInvalidationContext *)self->_intrinsicContentSizeInvalidationContext invalidatedItemIndexPaths];
  double v8 = [(UICollectionViewLayoutInvalidationContext *)self->_intrinsicContentSizeInvalidationContext invalidatedSupplementaryIndexPaths];
  v29[0] = (id)MEMORY[0x1E4F143A8];
  v29[1] = (id)3221225472;
  v29[2] = __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke;
  v29[3] = &unk_1E52DCB30;
  id v9 = v7;
  id v30 = v9;
  uint64_t v31 = self;
  id v10 = v8;
  id v32 = v10;
  if (v6)
  {
    double v11 = (void *)[(UITableViewRowData *)self->_rowData copy];
    double v12 = [(UITableView *)self _visibleViews];
    v27[0] = 0;
    v27[1] = v27;
    v27[2] = 0x3032000000;
    v27[3] = __Block_byref_object_copy__193;
    v27[4] = __Block_byref_object_dispose__193;
    id v28 = 0;
    [(UITableConstants *)self->_constants defaultEditAndUpdateAnimationDuration];
    double v14 = v13;
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    void v22[2] = __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke_2;
    v22[3] = &unk_1E53090E0;
    uint64_t v25 = v27;
    long long v26 = v29;
    v22[4] = self;
    id v15 = v11;
    id v23 = v15;
    id v24 = v12;
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke_3;
    v19[3] = &unk_1E52EA3D8;
    long long v21 = v27;
    v19[4] = self;
    id v16 = v24;
    id v20 = v16;
    +[UIView animateWithDuration:1028 delay:v22 options:v19 animations:v14 completion:0.0];

    _Block_object_dispose(v27, 8);
  }
  else
  {
    __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke(v29);
  }
  [(UITableView *)self _clearNeedsRecomputeHeightsForInvalidatedElements];
  unint64_t v17 = *((void *)p_tableFlags + 3);
  *((void *)p_tableFlags + 3) = v17 & 0xFFFFE7FFFFFFFFFFLL | ((unint64_t)(((v17 >> 43) + 1) & 3) << 43);
  if ((v17 & 0x180000000000) == 0)
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke_4;
    v18[3] = &unk_1E52D9F70;
    v18[4] = self;
    [(id)UIApp _performBlockAfterCATransactionCommits:v18];
  }
}

- (void)_configureCellPrefetchingHandlers
{
  prefetchContext = self->_prefetchContext;
  if (prefetchContext && (id v4 = prefetchContext->_cellHandler) != 0)
  {
    BOOL v5 = 1;
  }
  else
  {
    int v6 = self->_prefetchContext;
    if (v6) {
      int v6 = (_UITableViewPrefetchContext *)v6->_cellPruningHandler;
    }
    uint64_t v7 = v6;
    BOOL v5 = v7 != 0;

    id v4 = 0;
  }

  if ((*((unsigned char *)&self->_tableFlags + 26) & 2) == 0)
  {
    LOBYTE(v9) = 0;
LABEL_10:
    if (v5 && !v9)
    {
      id v10 = self->_prefetchContext;
      if (v10)
      {
        objc_setProperty_nonatomic_copy(v10, v8, 0, 32);
        double v12 = self->_prefetchContext;
        if (v12) {
          objc_setProperty_nonatomic_copy(v12, v11, 0, 40);
        }
      }
      subviewManager = self->_subviewManager;
      -[_UITableViewSubviewManager removeAllPrefetchedCells]((id *)&subviewManager->super.isa);
    }
    return;
  }
  BOOL v9 = [(UITableView *)self _supportsCellPrefetching];
  if (v5 || !v9) {
    goto LABEL_10;
  }
  objc_initWeak(&location, self);
  newValue[0] = MEMORY[0x1E4F143A8];
  newValue[1] = 3221225472;
  newValue[2] = __48__UITableView__configureCellPrefetchingHandlers__block_invoke;
  newValue[3] = &unk_1E5308F58;
  objc_copyWeak(&v21, &location);
  id v15 = self->_prefetchContext;
  if (v15) {
    objc_setProperty_nonatomic_copy(v15, v14, newValue, 32);
  }
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __48__UITableView__configureCellPrefetchingHandlers__block_invoke_2;
  v18[3] = &unk_1E5308FA8;
  objc_copyWeak(&v19, &location);
  unint64_t v17 = self->_prefetchContext;
  if (v17) {
    objc_setProperty_nonatomic_copy(v17, v16, v18, 40);
  }
  objc_destroyWeak(&v19);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&location);
}

- (void)setDragDelegate:(id)dragDelegate
{
  obuint64_t j = dragDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_dragDelegate, obj);
    _UIValidateAccountBasedDelegateRespondsToSelector(obj, (uint64_t)sel__tableView_dataOwnerForDragSession_atIndexPath_);
    [(UITableView *)self _createOrUninstallDragAndDropControllersIfNeeded];
  }
}

- (void)setDropDelegate:(id)dropDelegate
{
  obuint64_t j = dropDelegate;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_dropDelegate, obj);
    _UIValidateAccountBasedDelegateRespondsToSelector(obj, (uint64_t)sel__tableView_dataOwnerForDropSession_withDestinationIndexPath_);
    [(UITableView *)self _createOrUninstallDragAndDropControllersIfNeeded];
  }
}

- (void)_updateDragControllerEnabledState
{
  [(_UITableViewDragController *)self->_dragController setForceEnabledForReordering:[(UITableView *)self _dragAndDropUsedForReordering]];
  uint64_t v3 = *((void *)&self->_tableFlags + 3) << 40;
  uint64_t v4 = 1;
  if ((*((void *)&self->_tableFlags + 3) & 0x1000000) == 0) {
    uint64_t v4 = 2;
  }
  dragController = self->_dragController;
  [(_UITableViewDragController *)dragController setClientEnabledState:v4 & (v3 >> 63)];
}

- (void)reconfigureRowsAtIndexPaths:(NSArray *)indexPaths
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  BOOL v5 = indexPaths;
  if ((*((void *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    double v14 = [MEMORY[0x1E4F28B00] currentHandler];
    [v14 handleFailureInMethod:a2, self, @"UITableView.m", 8676, @"UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@", self object file lineNumber description];
  }
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &reconfigureRowsAtIndexPaths____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    double v11 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      double v12 = v11;
      *(_DWORD *)long long buf = 138412802;
      id v20 = (id)objc_opt_class();
      __int16 v21 = 2048;
      long long v22 = self;
      __int16 v23 = 2112;
      id v24 = v5;
      id v13 = v20;
      _os_log_impl(&dword_1853B0000, v12, OS_LOG_TYPE_ERROR, "<%@ %p> reconfigureRowsAtIndexPaths:%@", buf, 0x20u);
    }
  }
  [(UITableView *)self _reloadDataIfNeeded];
  BOOL v7 = [(UITableView *)self _isUpdating];
  if (!v7) {
    [(UITableView *)self _setupCellAnimations];
  }
  BOOL v8 = [(UITableView *)self _isUsingPresentationValues];
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __43__UITableView_reconfigureRowsAtIndexPaths___block_invoke;
  aBlock[3] = &unk_1E52DC3D0;
  BOOL v9 = v5;
  id v16 = v9;
  unint64_t v17 = self;
  BOOL v18 = v8;
  id v10 = (void (**)(void))_Block_copy(aBlock);
  if (+[UIView areAnimationsEnabled])
  {
    [(UITableConstants *)self->_constants defaultEditAndUpdateAnimationDuration];
    +[UIView animateWithDuration:delay:options:animations:completion:](UIView, "animateWithDuration:delay:options:animations:completion:", 1028, v10, 0);
    if (v7) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v10[2](v10);
  if (!v7) {
LABEL_10:
  }
    [(UITableView *)self _endCellAnimationsWithContext:0];
LABEL_11:
}

- (void)_reloadDataIfNeeded
{
  if ((*((unsigned char *)&self->_tableFlags + 15) & 2) != 0
    && (*((unsigned char *)&self->_tableFlags + 17) & 1) == 0
    && !self->_tableReloadingSuspendedCount)
  {
    [(UITableView *)self reloadData];
  }
}

- (void)_adjustForAutomaticKeyboardInfo:(id)a3 animated:(BOOL)a4 lastAdjustment:(double *)a5
{
  BOOL v6 = a4;
  id v8 = a3;
  if ([(UIScrollView *)self _isFirstResponderKeyboardAvoidanceEnabled])
  {
    [(UITableView *)self _contentInset];
    double v10 = v9;
    double v12 = v11;
    double v14 = v13;
    double v16 = v15;
    v21.receiver = self;
    v21.super_class = (Class)UITableView;
    [(UIScrollView *)&v21 _adjustForAutomaticKeyboardInfo:v8 animated:v6 lastAdjustment:a5];
    [(UITableView *)self _contentInset];
    if (v12 != v20 || v10 != v17 || v16 != v19 || v14 != v18) {
      [(UITableView *)self _setNeedsIndexBarInsetsUpdate];
    }
    if (*a5 != 0.0) {
      -[UITableView _scrollFirstResponderCellToVisible:](self, "_scrollFirstResponderCellToVisible:", 1, *a5);
    }
  }
}

- (id)_indexPathsForSelectedRowsUsingPresentationValues:(BOOL)a3
{
  if ([(NSMutableArray *)self->_selectedIndexPaths count])
  {
    BOOL v5 = (void *)[(NSMutableArray *)self->_selectedIndexPaths copy];
    if (a3) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v5 = 0;
    if (a3) {
      goto LABEL_7;
    }
  }
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
  {
    uint64_t v7 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathsBeforeShadowUpdates:v5];

    BOOL v5 = (void *)v7;
  }
LABEL_7:
  return v5;
}

- (void)reloadRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = indexPaths;
  if ((*((void *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    double v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"UITableView.m", 8670, @"UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@", self object file lineNumber description];
  }
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &reloadRowsAtIndexPaths_withRowAnimation____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    double v10 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      double v11 = v10;
      *(_DWORD *)long long buf = 138413058;
      id v15 = (id)objc_opt_class();
      __int16 v16 = 2048;
      double v17 = self;
      __int16 v18 = 2112;
      double v19 = v7;
      __int16 v20 = 2048;
      UITableViewRowAnimation v21 = animation;
      id v12 = v15;
      _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> reloadRowsAtIndexPaths:%@ withRowAnimation:%ld", buf, 0x2Au);
    }
  }
  if (animation == UITableViewRowAnimationAutomatic) {
    animation = UITableViewRowAnimationFade;
  }
  id v9 = [(UITableView *)self _updateRowsAtIndexPaths:v7 withUpdateAction:2 rowAnimation:animation usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
}

- (NSIndexPath)indexPathForSelectedRow
{
  BOOL v3 = [(UITableView *)self _isUsingPresentationValues];
  return (NSIndexPath *)[(UITableView *)self _indexPathForSelectedRowUsingPresentationValues:v3];
}

- (UITableViewCell)cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
  uint64_t v4 = indexPath;
  BOOL v5 = [(UITableView *)self _cellForRowAtIndexPath:v4 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];

  return (UITableViewCell *)v5;
}

- (NSArray)indexPathsForSelectedRows
{
  BOOL v3 = [(UITableView *)self _isUsingPresentationValues];
  return (NSArray *)[(UITableView *)self _indexPathsForSelectedRowsUsingPresentationValues:v3];
}

- (void)insertRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = indexPaths;
  if ((*((void *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    double v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"UITableView.m", 8656, @"UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@", self object file lineNumber description];
  }
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &insertRowsAtIndexPaths_withRowAnimation____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    double v10 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      double v11 = v10;
      *(_DWORD *)long long buf = 138413058;
      id v15 = (id)objc_opt_class();
      __int16 v16 = 2048;
      double v17 = self;
      __int16 v18 = 2112;
      double v19 = v7;
      __int16 v20 = 2048;
      UITableViewRowAnimation v21 = animation;
      id v12 = v15;
      _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> insertRowsAtIndexPaths:%@ withRowAnimation:%ld", buf, 0x2Au);
    }
  }
  id v9 = [(UITableView *)self _updateRowsAtIndexPaths:v7 withUpdateAction:0 rowAnimation:animation usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
}

- (UITableViewCell)dequeueReusableCellWithIdentifier:(NSString *)identifier forIndexPath:(NSIndexPath *)indexPath
{
  BOOL v6 = indexPath;
  uint64_t v7 = identifier;
  id v8 = [(UITableView *)self _dequeueReusableCellWithIdentifier:v7 forIndexPath:v6 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];

  return (UITableViewCell *)v8;
}

- (NSArray)indexPathsForVisibleRows
{
  BOOL v3 = [(UITableView *)self _isUsingPresentationValues];
  return (NSArray *)[(UITableView *)self _indexPathsForVisibleRowsUsingPresentationValues:v3];
}

- (BOOL)_isUsingPresentationValues
{
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController
    && [(_UITableViewShadowUpdatesController *)shadowUpdatesController hasShadowUpdates])
  {
    return *((unsigned __int8 *)&self->_tableFlags + 27) >> 7;
  }
  else
  {
    LOBYTE(v4) = 1;
  }
  return v4;
}

void __43__UITableView_reconfigureRowsAtIndexPaths___block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(a1 + 40), "_reconfigureRowAtIndexPath:usingPresentationValues:", *(void *)(*((void *)&v7 + 1) + 8 * v6++), *(unsigned __int8 *)(a1 + 48), (void)v7);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

- (void)_reconfigureRowAtIndexPath:(id)a3 usingPresentationValues:(BOOL)a4
{
  id v7 = a3;
  if (v7)
  {
    if (a4) {
      goto LABEL_5;
    }
  }
  else
  {
    double v11 = [MEMORY[0x1E4F28B00] currentHandler];
    [v11 handleFailureInMethod:a2, self, @"UITableView.m", 8706, @"Invalid parameter not satisfying: %@", @"indexPath != nil" object file lineNumber description];

    id v7 = 0;
    if (a4) {
      goto LABEL_5;
    }
  }
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
  {
    id v12 = v7;
    uint64_t v9 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathAfterShadowUpdates:v7];

    id v7 = (id)v9;
  }
LABEL_5:
  id v13 = v7;
  long long v10 = [(UITableView *)self _cellForRowAtIndexPath:v7 usingPresentationValues:1];
  if (v10) {
    [(UITableView *)self _reconfigureCell:v10 forRowAtIndexPath:v13];
  }
}

- (id)_cellForRowAtIndexPath:(id)a3 usingPresentationValues:(BOOL)a4
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (!a4)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v9 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathAfterShadowUpdates:v7];

      id v7 = (id)v9;
    }
  }
  if (!v7) {
    goto LABEL_38;
  }
  if ((*((unsigned char *)&self->_tableFlags + 28) & 1) == 0)
  {
    [(UITableView *)self _visibleBounds];
    unint64_t v10 = -[UITableView _visibleGlobalRowsInRect:](self, "_visibleGlobalRowsInRect:");
    unint64_t v12 = v11;
    unint64_t v13 = [(UITableView *)self globalRowForRowAtIndexPath:v7];
    if (v13 >= v10 && v13 - v10 < v12) {
      [(UITableView *)self _updateVisibleCellsImmediatelyIfNecessary];
    }
    if ([(UITableView *)self _hasFocusedCellForIndexPath:v7])
    {
      double v14 = [(UITableView *)self _focusedCell];
LABEL_37:
      __int16 v23 = v14;
      goto LABEL_39;
    }
    if (self->_firstResponderIndexPath
      && self->_firstResponderViewType == 1
      && objc_msgSend(v7, "isEqual:")
      && dyld_program_sdk_at_least())
    {
      double v14 = self->_firstResponderView;
      goto LABEL_37;
    }
    p_visibleRows = &self->_visibleRows;
    NSUInteger location = self->_visibleRows.location;
    BOOL v18 = v13 >= location;
    NSUInteger v21 = v13 - location;
    if (!v18 || v21 >= self->_visibleRows.length) {
      goto LABEL_35;
    }
    if (v21 < [(NSMutableArray *)self->_visibleCells count])
    {
      __int16 v23 = [(NSMutableArray *)self->_visibleCells objectAtIndex:v21];
      if (v23) {
        goto LABEL_39;
      }
LABEL_35:
      if (dyld_program_sdk_at_least())
      {
        -[_UITableViewSubviewManager prefetchedCellAtIndexPath:]((id *)&self->_subviewManager->super.isa, (uint64_t)v7);
        double v14 = (UIView *)objc_claimAutoreleasedReturnValue();
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    if (os_variant_has_internal_diagnostics())
    {
      uint64_t v25 = __UIFaultDebugAssertLog();
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_FAULT)) {
        goto LABEL_34;
      }
      long long v26 = NSStringFromSelector(a2);
      v44.NSUInteger location = p_visibleRows->location;
      v44.NSUInteger length = self->_visibleRows.length;
      long long v27 = NSStringFromRange(v44);
      visibleCells = self->_visibleCells;
      int v31 = 138413314;
      id v32 = v26;
      __int16 v33 = 2112;
      id v34 = v7;
      __int16 v35 = 2048;
      NSUInteger v36 = v21;
      __int16 v37 = 2112;
      char v38 = v27;
      __int16 v39 = 2112;
      char v40 = visibleCells;
      _os_log_fault_impl(&dword_1853B0000, v25, OS_LOG_TYPE_FAULT, "UITableView internal inconsistency: out-of-bounds index into _visibleCells array in call to %@. indexPath: %@; i"
        "ndex into _visibleCells: %ld; _visibleRows: %@; _visibleCells: %@",
        (uint8_t *)&v31,
        0x34u);
    }
    else
    {
      id v24 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_cellForRowAtIndexPath_usingPresentationValues____s_category)+ 8);
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        goto LABEL_35;
      }
      uint64_t v25 = v24;
      long long v26 = NSStringFromSelector(a2);
      v43.NSUInteger location = p_visibleRows->location;
      v43.NSUInteger length = self->_visibleRows.length;
      long long v27 = NSStringFromRange(v43);
      id v28 = self->_visibleCells;
      int v31 = 138413314;
      id v32 = v26;
      __int16 v33 = 2112;
      id v34 = v7;
      __int16 v35 = 2048;
      NSUInteger v36 = v21;
      __int16 v37 = 2112;
      char v38 = v27;
      __int16 v39 = 2112;
      char v40 = v28;
      _os_log_impl(&dword_1853B0000, v25, OS_LOG_TYPE_ERROR, "UITableView internal inconsistency: out-of-bounds index into _visibleCells array in call to %@. indexPath: %@; i"
        "ndex into _visibleCells: %ld; _visibleRows: %@; _visibleCells: %@",
        (uint8_t *)&v31,
        0x34u);
    }

LABEL_34:
    goto LABEL_35;
  }
  UITableViewAlertForCellForRowAtIndexPathAccessDuringUpdate(self);
  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    unint64_t v15 = [(UITableView *)self globalRowForRowAtIndexPath:v7];
    NSUInteger v16 = self->_visibleRows.location;
    NSUInteger v17 = v15 - v16;
    BOOL v18 = v15 < v16 || v17 >= self->_visibleRows.length;
    if (!v18 && v17 < [(NSMutableArray *)self->_visibleCells count])
    {
      double v14 = [(NSMutableArray *)self->_visibleCells objectAtIndex:v17];
      goto LABEL_37;
    }
  }
LABEL_38:
  __int16 v23 = 0;
LABEL_39:

  return v23;
}

- (void)_updateVisibleCellsImmediatelyIfNecessary
{
  if ((*((unsigned char *)&self->_tableFlags + 15) & 8) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);

    if (WeakRetained)
    {
      UITableViewAlertForForcedLayout(self);
      [(UITableView *)self _updateVisibleCellsNow:1];
    }
  }
}

- (void)_reconfigureCell:(id)a3 forRowAtIndexPath:(id)a4
{
  id v8 = a3;
  id v9 = a4;
  unint64_t v10 = v9;
  if (v8)
  {
    if (v9) {
      goto LABEL_3;
    }
  }
  else
  {
    __int16 v23 = [MEMORY[0x1E4F28B00] currentHandler];
    [v23 handleFailureInMethod:a2, self, @"UITableView.m", 8720, @"Invalid parameter not satisfying: %@", @"cell != nil" object file lineNumber description];

    if (v10) {
      goto LABEL_3;
    }
  }
  id v24 = [MEMORY[0x1E4F28B00] currentHandler];
  [v24 handleFailureInMethod:a2, self, @"UITableView.m", 8721, @"Invalid parameter not satisfying: %@", @"indexPath != nil" object file lineNumber description];

LABEL_3:
  p_cellBeingReconfigured = &self->_cellBeingReconfigured;
  if (self->_cellBeingReconfigured)
  {
    __int16 v33 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v25 = [(UITableView *)self dataSourceIndexPathForPresentationIndexPath:v10];
    id v32 = *p_cellBeingReconfigured;
    long long v26 = [(UITableView *)self dataSourceIndexPathForPresentationIndexPath:self->_indexPathBeingReconfigured];
    [v33 handleFailureInMethod:a2, self, @"UITableView.m", 8724, @"Attempted to reconfigure a cell while already in the process of reconfiguring a cell. Check the backtrace to see what's causing this. (Attempted to reconfigure cell %@ for index path %@ while already reconfiguring cell %@ for index path %@)", v8, v25, v32, v26 object file lineNumber description];
  }
  objc_storeStrong((id *)&self->_cellBeingReconfigured, a3);
  p_indexPathBeingReconfigured = &self->_indexPathBeingReconfigured;
  objc_storeStrong((id *)&self->_indexPathBeingReconfigured, a4);
  unint64_t v13 = (void *)_UISetCurrentFallbackEnvironment(self);
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableView", &qword_1E8FDF418);
  unint64_t v15 = *(id *)(CategoryCachedImpl + 8);
  if (os_signpost_id_make_with_pointer(*(os_log_t *)(CategoryCachedImpl + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
    && os_signpost_enabled(v15))
  {
    [v10 section];
    [v10 row];
    _os_signpost_emit_unreliably_with_name_impl();
  }

  id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  if (!WeakRetained)
  {
    long long v27 = [MEMORY[0x1E4F28B00] currentHandler];
    [v27 handleFailureInMethod:a2, self, @"UITableView.m", 8731, @"UITableView dataSource is not set: %@", self object file lineNumber description];
  }
  if ((*(unsigned char *)&self->_tableFlags & 2) == 0)
  {
    id v28 = [MEMORY[0x1E4F28B00] currentHandler];
    id v29 = objc_loadWeakRetained((id *)&self->_dataSource);
    [v28 handleFailureInMethod:a2, self, @"UITableView.m", 8732, @"UITableView dataSource does not implement required method -tableView:cellForRowAtIndexPath: %@", v29 object file lineNumber description];
  }
  NSUInteger v17 = [(UITableView *)self _dataSourceProxy];
  id v18 = [v17 tableView:self cellForRowAtIndexPath:v10];

  if (v18 != v8)
  {
    id v30 = [MEMORY[0x1E4F28B00] currentHandler];
    int v31 = [(UITableView *)self dataSourceIndexPathForPresentationIndexPath:v10];
    objc_msgSend(v30, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UITableView.m", 8734, @"UITableView dataSource returned a different cell from -tableView:cellForRowAtIndexPath: than the cell being reconfigured, which is not allowed. When reconfiguring a row, you must obtain the existing cell by dequeuing a cell for the index path specified, using the same reuse identifier that was used to dequeue the cell originally, and return the same cell. Index path: %@; Existing cell: %@; Returned cell: %@",
      v31,
      v8,
      v18);
  }
  unint64_t v19 = __UILogGetCategoryCachedImpl("TableView", &qword_1E8FDF420);
  __int16 v20 = *(id *)(v19 + 8);
  if (os_signpost_id_make_with_pointer(*(os_log_t *)(v19 + 8), self) - 1 <= 0xFFFFFFFFFFFFFFFDLL
    && os_signpost_enabled(v20))
  {
    _os_signpost_emit_unreliably_with_name_impl();
  }

  _UIRestorePreviousFallbackEnvironment(v13);
  NSUInteger v21 = *p_cellBeingReconfigured;
  *p_cellBeingReconfigured = 0;

  uint64_t v22 = *p_indexPathBeingReconfigured;
  *p_indexPathBeingReconfigured = 0;
}

- (NSInteger)numberOfSections
{
  BOOL v3 = [(UITableView *)self _isUsingPresentationValues];
  return [(UITableView *)self _numberOfSectionsUsingPresentationValues:v3];
}

- (void)_deselectRowsAtIndexPaths:(id)a3 animated:(BOOL)a4 transitionCoordinator:(id)a5
{
  BOOL v6 = a4;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a5;
  if ([v8 count])
  {
    BOOL v20 = v6;
    unint64_t v10 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v8, "count"));
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v11 = v8;
    uint64_t v12 = [v11 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v25;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v25 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void *)(*((void *)&v24 + 1) + 8 * i);
          if ([(NSMutableArray *)self->_selectedIndexPaths containsObject:v16]) {
            [v10 addObject:v16];
          }
        }
        uint64_t v13 = [v11 countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v13);
    }

    if (v9)
    {
      deselectionTransitionIndexPaths = self->_deselectionTransitionIndexPaths;
      if (deselectionTransitionIndexPaths)
      {
        [(NSMutableArray *)deselectionTransitionIndexPaths addObjectsFromArray:v10];
      }
      else
      {
        id v18 = (NSMutableArray *)[v10 mutableCopy];
        unint64_t v19 = self->_deselectionTransitionIndexPaths;
        self->_deselectionTransitionIndexPaths = v18;
      }
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      void v22[2] = __72__UITableView__deselectRowsAtIndexPaths_animated_transitionCoordinator___block_invoke;
      v22[3] = &unk_1E52E7B28;
      v22[4] = self;
      BOOL v23 = v20;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __72__UITableView__deselectRowsAtIndexPaths_animated_transitionCoordinator___block_invoke_2;
      v21[3] = &unk_1E52DA598;
      v21[4] = self;
      [v9 animateAlongsideTransition:v22 completion:v21];
    }
    else
    {
      [(UITableView *)self _deselectRowsAtIndexPaths:v10 animated:v20 notifyDelegate:0];
    }
  }
}

- (void)_stopScrollingNotify:(BOOL)a3 pin:(BOOL)a4
{
  v6.receiver = self;
  v6.super_class = (Class)UITableView;
  [(UIScrollView *)&v6 _stopScrollingNotify:a3 pin:a4];
  targetIndexPathForScrolling = self->_targetIndexPathForScrolling;
  self->_targetIndexPathForScrolling = 0;
}

- (void)_updateTopSeparatorForCell:(id)a3 atIndexPath:(id)a4
{
  id v7 = a3;
  if ([(UITableView *)self shouldDisplayTopSeparatorForRowAtIndexPath:a4])
  {
    uint64_t v6 = [v7 _drawsTopSeparatorDuringReordering];
  }
  else
  {
    uint64_t v6 = 0;
  }
  [v7 _setDrawsTopSeparator:v6];
}

- (BOOL)shouldDisplayTopSeparatorForRowAtIndexPath:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = [v4 section];
    uint64_t v7 = [v5 row];
    rowData = self->_rowData;
    if (rowData)
    {
      id v9 = rowData->_reorderedIndexPath;
      unint64_t v10 = v9;
      if (v9 && v6 == [(NSIndexPath *)v9 section] && v7 <= [(NSIndexPath *)v10 row]) {
        ++v7;
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 3221225472;
    BOOL v23 = __58__UITableView_shouldDisplayTopSeparatorForRowAtIndexPath___block_invoke;
    long long v24 = &unk_1E5309068;
    uint64_t v26 = v6;
    uint64_t v27 = v7;
    long long v25 = self;
    id v11 = self->_rowData;
    if (v11) {
      id v11 = (UITableViewRowData *)v11->_gapIndexPath;
    }
    uint64_t v12 = v11;
    if (v23(v22, v12))
    {
      LOBYTE(v13) = 1;
    }
    else
    {
      [(_UITableViewDragController *)self->_dragController indexPaths];
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v14 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v13 = [v14 countByEnumeratingWithState:&v18 objects:v28 count:16];
      if (v13)
      {
        uint64_t v15 = *(void *)v19;
        while (2)
        {
          for (uint64_t i = 0; i != v13; ++i)
          {
            if (*(void *)v19 != v15) {
              objc_enumerationMutation(v14);
            }
            if (v23(v22, *(void **)(*((void *)&v18 + 1) + 8 * i)))
            {
              LOBYTE(v13) = 1;
              goto LABEL_22;
            }
          }
          uint64_t v13 = [v14 countByEnumeratingWithState:&v18 objects:v28 count:16];
          if (v13) {
            continue;
          }
          break;
        }
      }
LABEL_22:
    }
  }
  else
  {
    LOBYTE(v13) = 0;
  }

  return v13;
}

uint64_t __58__UITableView_shouldDisplayTopSeparatorForRowAtIndexPath___block_invoke(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3)
  {
LABEL_7:
    uint64_t v8 = 0;
    goto LABEL_8;
  }
  uint64_t v5 = [v3 section];
  uint64_t v6 = [v4 row];
  uint64_t v7 = a1[5];
  if (v7 != v5 || a1[6] != v6 + 1)
  {
    if (v7 == v5 + 1 && !a1[6])
    {
      uint64_t v8 = -[UITableViewRowData hasHeaderForSection:](*(void *)(a1[4] + 2072), v7) ^ 1;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v8 = 1;
LABEL_8:

  return v8;
}

- (void)setDataSource:(id)dataSource
{
  id v4 = dataSource;
  if (!v4)
  {
LABEL_7:
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  char v5 = dyld_program_sdk_at_least();
  uint64_t v6 = v4;
  if ((v5 & 1) == 0)
  {
    unsigned __int8 v7 = objc_msgSend(v4, sel_allowsWeakReference);
    uint64_t v6 = v4;
    if ((v7 & 1) == 0)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __29__UITableView_setDataSource___block_invoke;
      block[3] = &unk_1E52D9F98;
      id v70 = v4;
      uint64_t v71 = self;
      if (setDataSource__once_1 != -1) {
        dispatch_once(&setDataSource__once_1, block);
      }

      goto LABEL_7;
    }
  }
LABEL_8:
  id v8 = v6;

  id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  unint64_t v10 = WeakRetained;
  if (WeakRetained != v8 || !v8 && (*((unsigned char *)&self->_tableFlags + 2) & 2) != 0)
  {
    if (WeakRetained) {
      objc_setAssociatedObject(WeakRetained, (char *)&self->super.super.super.super.isa + 2, 0, (void *)1);
    }
    objc_storeWeak((id *)&self->_dataSource, v8);
    id v11 = v8;
    id v12 = [(UITableView *)self dataSource];
    if (v11 == v12)
    {
      unsigned int v14 = [(UITableView *)self allowsWeakReference];

      unint64_t v13 = (unint64_t)(v11 != 0) << 17;
      if (v11 && v14)
      {
        objc_initWeak(&location, self);
        uint64_t v15 = [_UIWeakHelper alloc];
        v66[0] = MEMORY[0x1E4F143A8];
        v66[1] = 3221225472;
        v66[2] = __29__UITableView_setDataSource___block_invoke_581;
        v66[3] = &unk_1E52DC308;
        objc_copyWeak(&v67, &location);
        uint64_t v16 = [(_UIWeakHelper *)v15 initWithDeallocationBlock:v66];
        objc_setAssociatedObject(v11, (char *)&self->super.super.super.super.isa + 2, v16, (void *)1);

        objc_destroyWeak(&v67);
        objc_destroyWeak(&location);
        unint64_t v13 = 0x20000;
      }
    }
    else
    {

      unint64_t v13 = (unint64_t)(v11 != 0) << 17;
    }

    p_uint64_t tableFlags = &self->_tableFlags;
    uint64_t v18 = *((void *)&self->_tableFlags + 1);
    *(void *)&self->_uint64_t tableFlags = *(void *)&self->_tableFlags & 0xFFFFFFFFFFFDFFFFLL | v13;
    *((void *)&self->_tableFlags + 1) = v18;
    *(void *)&self->_uint64_t tableFlags = *(void *)&self->_tableFlags & 0xFFFFFFFFFFFFFFFELL | objc_opt_respondsToSelector() & 1;
    char v19 = objc_opt_respondsToSelector();
    uint64_t v20 = 2;
    if ((v19 & 1) == 0) {
      uint64_t v20 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFFFDLL | v20;
    char v21 = objc_opt_respondsToSelector();
    uint64_t v22 = 4;
    if ((v21 & 1) == 0) {
      uint64_t v22 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFFFBLL | v22;
    char v23 = objc_opt_respondsToSelector();
    uint64_t v24 = 8;
    if ((v23 & 1) == 0) {
      uint64_t v24 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFFF7 | v24;
    char v25 = objc_opt_respondsToSelector();
    uint64_t v26 = 16;
    if ((v25 & 1) == 0) {
      uint64_t v26 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFFEFLL | v26;
    char v27 = objc_opt_respondsToSelector();
    uint64_t v28 = 64;
    if ((v27 & 1) == 0) {
      uint64_t v28 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFFBFLL | v28;
    char v29 = objc_opt_respondsToSelector();
    uint64_t v30 = 128;
    if ((v29 & 1) == 0) {
      uint64_t v30 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFF7FLL | v30;
    char v31 = objc_opt_respondsToSelector();
    uint64_t v32 = 256;
    if ((v31 & 1) == 0) {
      uint64_t v32 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFEFFLL | v32;
    char v33 = objc_opt_respondsToSelector();
    uint64_t v34 = 512;
    if ((v33 & 1) == 0) {
      uint64_t v34 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFDFFLL | v34;
    char v35 = objc_opt_respondsToSelector();
    uint64_t v36 = 0x4000000;
    if ((v35 & 1) == 0) {
      uint64_t v36 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFBFFFFFFLL | v36;
    char v37 = objc_opt_respondsToSelector();
    uint64_t v38 = 1024;
    if ((v37 & 1) == 0) {
      uint64_t v38 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFBFFLL | v38;
    char v39 = objc_opt_respondsToSelector();
    uint64_t v40 = 2048;
    if ((v39 & 1) == 0) {
      uint64_t v40 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFF7FFLL | v40;
    char v41 = objc_opt_respondsToSelector();
    uint64_t v42 = 4096;
    if ((v41 & 1) == 0) {
      uint64_t v42 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFEFFFLL | v42;
    char v43 = objc_opt_respondsToSelector();
    uint64_t v44 = 0x2000;
    if ((v43 & 1) == 0) {
      uint64_t v44 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFDFFFLL | v44;
    char v45 = objc_opt_respondsToSelector();
    uint64_t v46 = 0x4000;
    if ((v45 & 1) == 0) {
      uint64_t v46 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFBFFFLL | v46;
    char v47 = objc_opt_respondsToSelector();
    uint64_t v48 = 0x8000;
    if ((v47 & 1) == 0) {
      uint64_t v48 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFF7FFFLL | v48;
    char v49 = objc_opt_respondsToSelector();
    uint64_t v50 = 0x10000;
    if ((v49 & 1) == 0) {
      uint64_t v50 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFEFFFFLL | v50;
    char v51 = objc_opt_respondsToSelector();
    uint64_t v52 = 32;
    if ((v51 & 1) == 0) {
      uint64_t v52 = 0;
    }
    *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFFDFLL | v52;
    char v53 = objc_opt_respondsToSelector();
    uint64_t v54 = 0x20000000;
    if ((v53 & 1) == 0) {
      uint64_t v54 = 0;
    }
    *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFFDFFFFFFFLL | v54;
    if (dyld_program_sdk_at_least()
      && (*((unsigned char *)&self->_tableFlags + 27) & 0x20) != 0
      && (objc_opt_respondsToSelector() & 1) != 0)
    {
      id v55 = v11;
      if ([v55 _subclassOverridesMethodWithSelector:sel_tableView_titleForHeaderInSection_])int v56 = 8; {
      else
      }
        int v56 = 0;
      *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFFF7 | v56 & *(void *)p_tableFlags;
      if ([v55 _subclassOverridesMethodWithSelector:sel_tableView_titleForFooterInSection_])int v57 = 16; {
      else
      }
        int v57 = 0;
      *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFFEFLL | v57 & *(void *)p_tableFlags;
      if ([v55 _subclassOverridesMethodWithSelector:sel_tableView_moveRowAtIndexPath_toIndexPath_])int v58 = 0x4000000; {
      else
      }
        int v58 = 0;
      *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFBFFFFFFLL | v58 & *(void *)p_tableFlags;
      if ([v55 _subclassOverridesMethodWithSelector:sel_tableView_canMoveRowAtIndexPath_])int v59 = 2048; {
      else
      }
        int v59 = 0;
      *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFF7FFLL | v59 & *(void *)p_tableFlags;
      if ([v55 _subclassOverridesMethodWithSelector:sel_tableView_canEditRowAtIndexPath_])int v60 = 1024; {
      else
      }
        int v60 = 0;
      *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFBFFLL | v60 & *(void *)p_tableFlags;
      if ([v55 _subclassOverridesMethodWithSelector:sel_tableView_commitEditingStyle_forRowAtIndexPath_])int v61 = 64; {
      else
      }
        int v61 = 0;
      *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFFBFLL | v61 & *(void *)p_tableFlags;
      if ([v55 _subclassOverridesMethodWithSelector:sel_sectionIndexTitlesForTableView_]) {
        int v62 = 128;
      }
      else {
        int v62 = 0;
      }
      *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFF7FLL | v62 & *(void *)p_tableFlags;
      int v63 = [v55 _subclassOverridesMethodWithSelector:sel_tableView_sectionForSectionIndexTitle_atIndex_];

      if (v63) {
        int v64 = 512;
      }
      else {
        int v64 = 0;
      }
      *(void *)p_uint64_t tableFlags = *(void *)p_tableFlags & 0xFFFFFFFFFFFFFDFFLL | v64 & *(void *)p_tableFlags;
    }
    *((void *)&self->_tableFlags + 1) |= 0x200000000000000uLL;
    [(UITableView *)self _setRowCount:0x7FFFFFFFFFFFFFFFLL];
    [(UITableView *)self _createOrUninstallDragAndDropControllersIfNeeded];
    uint64_t v65 = [(UITableView *)self _identityTracker:0];
    -[_UIIndexPathIdentityTracker reset]((uint64_t)v65);

    [(UIContextMenuInteraction *)self->_contextMenuInteraction _retargetDismissingMenuWithInternalIdentifier:0 toPreview:0 force:1];
  }
}

- (void)noteNumberOfRowsChanged
{
  if (self->_tableReloadingSuspendedCount < 2)
  {
    [(UITableView *)self _setRowCount:0x7FFFFFFFFFFFFFFFLL];
    [(UITableView *)self _updateRowData];
    -[UITableView _setRowCount:](self, "_setRowCount:", -[UITableViewRowData numberOfRows]((uint64_t)self->_rowData));
    [(UITableView *)self _updateContentSize];
    [(UITableView *)self _updateIndex];
    [(UITableView *)self _numberOfRowsDidChange];
  }
  else
  {
    *((void *)&self->_tableFlags + 1) |= 0x80000000000000uLL;
  }
}

- (void)_setRowCount:(unint64_t)a3
{
  if (a3 != 0x7FFFFFFFFFFFFFFFLL)
  {
    countLabel = self->_countLabel;
    unint64_t v5 = [(UITableView *)self _countStringRowCount];
    [(UITableViewCountView *)countLabel setCount:v5];
  }
}

- (void)_updateRowData
{
  if (!self->_rowData)
  {
    uint64_t v3 = (UITableViewRowData *)-[UITableViewRowData initWithTableView:]([UITableViewRowData alloc], self);
    rowData = self->_rowData;
    self->_rowData = v3;
  }
  visibleCells = self->_visibleCells;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __29__UITableView__updateRowData__block_invoke;
  v7[3] = &unk_1E5308CA0;
  v7[4] = self;
  [(NSMutableArray *)visibleCells enumerateObjectsUsingBlock:v7];
  *((void *)&self->_tableFlags + 2) &= ~0x20000000000uLL;
  -[UITableViewRowData invalidateAllSections]((uint64_t)self->_rowData);
  if ((*(void *)&self->_tableFlags & 0x100000000) != 0)
  {
    if ((*((void *)&self->_tableFlags + 1) & 0x7000000000000) != 0) {
      [(UITableView *)self _scheduleAdjustExtraSeparators];
    }
  }
  else
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __29__UITableView__updateRowData__block_invoke_2;
    v6[3] = &unk_1E52D9F70;
    v6[4] = self;
    +[UIView _performSystemAppearanceModifications:v6];
  }
  [(UITableView *)self _adjustReusableTableCells];
}

- (void)_adjustReusableTableCells
{
  reusableTableCells = self->_reusableTableCells;
  if (self->_rowData)
  {
    if (reusableTableCells) {
      return;
    }
    id v4 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    reusableTableCells = self->_reusableTableCells;
  }
  else
  {
    if (!reusableTableCells) {
      return;
    }
    id v4 = 0;
  }
  self->_reusableTableCells = v4;
}

- (double)_rowSpacing
{
  constants = self->_constants;
  UITableViewStyle v3 = [(UITableView *)self style];
  [(UITableConstants *)constants defaultPaddingBetweenRowsForTableStyle:v3];
  return result;
}

- (int64_t)_numberOfSections
{
  if ((*(unsigned char *)&self->_tableFlags & 4) == 0) {
    return 1;
  }
  id v4 = [(UITableView *)self _dataSourceProxy];
  uint64_t v5 = [v4 numberOfSectionsInTableView:self];

  return v5 & ~(v5 >> 63);
}

- (double)_bottomPadding
{
  return self->_bottomPadding;
}

- (double)_topPadding
{
  return self->_topPadding;
}

- (unint64_t)_countStringRowCount
{
  unint64_t v2 = *((void *)&self->_tableFlags + 2) & 0xFLL;
  UITableViewStyle v3 = -[UITableViewRowData numberOfRows]((uint64_t)self->_rowData);
  if ((unint64_t)v3 >= v2) {
    return (unint64_t)v3 - v2;
  }
  else {
    return 0;
  }
}

- (void)reloadData
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (self->_tableReloadingSuspendedCount < 1)
  {
    unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &qword_1E8FDF408);
    if (*(unsigned char *)CategoryCachedImpl)
    {
      char v49 = *(NSObject **)(CategoryCachedImpl + 8);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        uint64_t v50 = v49;
        *(_DWORD *)uint64_t v52 = 138412546;
        *(void *)&v52[4] = objc_opt_class();
        *(_WORD *)&v52[12] = 2048;
        *(void *)&v52[14] = self;
        id v51 = *(id *)&v52[4];
        _os_log_impl(&dword_1853B0000, v50, OS_LOG_TYPE_ERROR, "<%@ %p> reloadData performing", v52, 0x16u);
      }
    }
    unint64_t v8 = __UILogGetCategoryCachedImpl("TableView", &qword_1E8FDF410);
    id v9 = *(id *)(v8 + 8);
    os_signpost_id_t v10 = os_signpost_id_make_with_pointer(*(os_log_t *)(v8 + 8), self);
    if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v11 = v10;
      if (os_signpost_enabled(v9))
      {
        *(_WORD *)uint64_t v52 = 0;
        _os_signpost_emit_with_name_impl(&dword_1853B0000, v9, OS_SIGNPOST_EVENT, v11, "ReloadData", "", v52, 2u);
      }
    }

    [(UITableView *)self _suspendReloads];
    if (self->_firstResponderViewType == 1
      || [(UITableView *)self _shouldUseNewHeaderFooterBehavior])
    {
      if (self->_firstResponderView)
      {
        *((void *)&self->_tableFlags + 3) |= 0x800000000000uLL;
        id v12 = [(UIView *)self window];
        unint64_t v13 = [v12 firstResponder];
        [v13 resignFirstResponder];

        *((void *)&self->_tableFlags + 3) &= ~0x800000000000uLL;
        if (self->_firstResponderView)
        {
          [(UITableView *)self _resumeReloads];
          return;
        }
      }
    }
    unint64_t v15 = *((void *)&self->_tableFlags + 2);
    uint64_t v14 = *((void *)&self->_tableFlags + 3);
    *((void *)&self->_tableFlags + 2) = v15 | 0x100;
    if (self->_focusedCell)
    {
      *((void *)&self->_tableFlags + 2) = v15 | 0x100;
      *((void *)&self->_tableFlags + 3) = v14 | 0x400;
      [(UIView *)self->_focusedCell frame];
      CGFloat v17 = v16;
      CGFloat v19 = v18;
      CGFloat v21 = v20;
      CGFloat v23 = v22;
      [(UIScrollView *)self visibleBounds];
      v55.origin.double x = v24;
      v55.origin.double y = v25;
      v55.size.double width = v26;
      v55.size.double height = v27;
      v54.origin.double x = v17;
      v54.origin.double y = v19;
      v54.size.double width = v21;
      v54.size.double height = v23;
      BOOL v28 = CGRectIntersectsRect(v54, v55);
      uint64_t v29 = 2048;
      if (!v28) {
        uint64_t v29 = 0;
      }
      *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFF7FFLL | v29;
    }
    [(UIView *)self setNeedsFocusUpdate];
    [(_UITableViewDragController *)self->_dragController forceReset];
    uint64_t v5 = [(_UITableViewDropController *)self->_dropController beginIgnoringDrags];
    [(UITableView *)self _resetAllShadowUpdates];
    uint64_t v30 = [(UITableView *)self _identityTracker:0];
    -[_UIIndexPathIdentityTracker reset]((uint64_t)v30);

    [(UIContextMenuInteraction *)self->_contextMenuInteraction _retargetDismissingMenuWithInternalIdentifier:0 toPreview:0 force:1];
    [(UITableView *)self _resetSwipeActionController];
    BOOL v31 = [(UITableView *)self _isScrolledToTop];
    uint64_t v32 = [(UITableView *)self _indexPathsForVisibleRowsUsingPresentationValues:1];
    char v33 = [v32 firstObject];

    uint64_t v34 = *((void *)&self->_tableFlags + 3);
    if ((v34 & 4) == 0)
    {
      [(UITableView *)self _storePreReloadStateForRestoringContentOffsetWithFirstVisibleIndexPath:v33];
      uint64_t v34 = *((void *)&self->_tableFlags + 3);
    }
    uint64_t v35 = *((void *)&self->_tableFlags + 2);
    if ((v35 & 0x40000000000) != 0)
    {
      *((void *)&self->_tableFlags + 2) = v35 | 0x80000000000;
      *((void *)&self->_tableFlags + 3) = v34;
    }
    [(UITableView *)self _cleanupStateFromDeleteConfirmation];
    uint64_t v36 = [(UIView *)self->_wrapperView layer];
    [v36 removeAllAnimations];

    reorderingSupport = self->_reorderingSupport;
    if (reorderingSupport && (*((unsigned char *)reorderingSupport + 32) & 4) == 0)
    {
      *((unsigned char *)reorderingSupport + 32) |= 4u;
      rowData = self->_rowData;
      char v39 = reorderingSupport;
      -[UITableViewRowData setReorderedIndexPath:]((uint64_t)rowData, 0);
      [(UITableView *)self _cancelCellReorder:0];
    }
    [(UITableView *)self _removeAllVisibleCells];
    *((void *)&self->_tableFlags + 2) &= ~0x8000000uLL;
    [(UITableView *)self noteNumberOfRowsChanged];
    if ((*((unsigned char *)&self->_tableFlags + 28) & 0x40) == 0)
    {
      [(NSMutableArray *)self->_highlightedIndexPaths removeAllObjects];
      [(NSMutableArray *)self->_selectedIndexPaths removeAllObjects];
      [(_UITableViewMultiSelectController *)self->_multiSelectController clearSelectionState];
      deselectionTransitionIndexPaths = self->_deselectionTransitionIndexPaths;
      self->_deselectionTransitionIndexPaths = 0;

      [(NSMutableSet *)self->_hiddenSeparatorIndexPaths removeAllObjects];
    }
    pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
    if (pendingSelectionIndexPath)
    {
      self->_pendingSelectionIndexPath = 0;
    }
    [(UITableView *)self _updateIndex];
    BOOL v42 = [(UITableView *)self _shouldRestorePreReloadScrollPositionWithFirstVisibleIndexPath:v33 scrolledToTop:v31];
    uint64_t v43 = *((void *)&self->_tableFlags + 3);
    if (v42) {
      v43 |= 4uLL;
    }
    unint64_t v44 = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFFEFFLL | (((v15 >> 8) & 1) << 8);
    *((void *)&self->_tableFlags + 1) &= ~0x200000000000000uLL;
    *((void *)&self->_tableFlags + 2) = v44;
    *((void *)&self->_tableFlags + 3) = v43;
    [(UITableView *)self _clearNeedsRecomputeHeightsForInvalidatedElements];
    if (self->_focusedCellIndexPath && !-[UITableView _indexPathIsValid:](self, "_indexPathIsValid:"))
    {
      focusedCellIndexPath = self->_focusedCellIndexPath;
      self->_focusedCellIndexPath = 0;
    }
    [v5 endIgnoringDrags];
    [(UITableView *)self _resumeReloads];
    prefetchContext = self->_prefetchContext;
    if (prefetchContext) {
      -[_UITableViewPrefetchContext cancelWithNewMaxIndex:]((uint64_t)prefetchContext, [(UITableView *)self _lastGlobalRowIndex]);
    }
    uint64_t v47 = *((void *)&self->_tableFlags + 3);
    if ((v47 & 0x800000000) != 0 && !self->_tableReloadingSuspendedCount)
    {
      *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2);
      *((void *)&self->_tableFlags + 3) = v47 & 0xFFFFFFF7FFFFFFFFLL;
      [(UITableView *)self _purgeReuseQueues];
      uint64_t v47 = *((void *)&self->_tableFlags + 3);
    }
    if ((v47 & 0x4020000000) == 0x20000000)
    {
      uint64_t v48 = [(UIView *)self window];

      if (v48) {
        [(UIView *)self layoutIfNeeded];
      }
    }

    goto LABEL_43;
  }
  *((void *)&self->_tableFlags + 1) |= 0x80000000000000uLL;
  unint64_t v3 = __UILogGetCategoryCachedImpl("TableViewOperations", &qword_1E8FDF400);
  if (*(unsigned char *)v3)
  {
    id v4 = *(NSObject **)(v3 + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = v4;
      *(_DWORD *)uint64_t v52 = 138412546;
      *(void *)&v52[4] = objc_opt_class();
      *(_WORD *)&v52[12] = 2048;
      *(void *)&v52[14] = self;
      id v6 = *(id *)&v52[4];
      _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "<%@ %p> reloadData called but reloads are suspended", v52, 0x16u);

LABEL_43:
    }
  }
}

- (void)_updateIdentityTrackerWithUpdateSupport:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v4 = (id *)a3;
  uint64_t v5 = [(UITableView *)self _identityTracker:0];
  if (v5)
  {
    CGFloat v23 = v4;
    id v6 = [(UITableView *)self contextMenuInteraction];
    unsigned __int8 v7 = [v6 _internalIdentifiersForDismissingMenu];

    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    obuint64_t j = v7;
    uint64_t v8 = [obj countByEnumeratingWithState:&v29 objects:v34 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v30;
      while (2)
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v30 != v10) {
            objc_enumerationMutation(obj);
          }
          uint64_t v12 = *(void *)(*((void *)&v29 + 1) + 8 * i);
          unint64_t v13 = -[_UIIndexPathIdentityTracker currentIndexPathForIdentifier:]((uint64_t)v5, v12);
          if (v13)
          {
            unint64_t v14 = -[UITableViewRowData globalRowForRowAtIndexPath:]((uint64_t)self->_currentUpdate->oldRowData, v13);
            if (v14 != 0x7FFFFFFFFFFFFFFFLL
              && -[_UITableViewUpdateSupport finalGlobalIndexForInitialGlobalIndex:]((uint64_t)self->_currentUpdate, v14) != 0x7FFFFFFFFFFFFFFFLL)
            {
              unint64_t v15 = [(UITableView *)self contextMenuInteraction];
              [v15 _retargetDismissingMenuWithInternalIdentifier:v12 toPreview:0 force:0];

              goto LABEL_14;
            }
          }
        }
        uint64_t v9 = [obj countByEnumeratingWithState:&v29 objects:v34 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }
LABEL_14:

    id v4 = v23;
    double v16 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v23[8], "count"));
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v17 = v23[8];
    uint64_t v18 = [v17 countByEnumeratingWithState:&v25 objects:v33 count:16];
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = *(void *)v26;
      do
      {
        for (uint64_t j = 0; j != v19; ++j)
        {
          if (*(void *)v26 != v20) {
            objc_enumerationMutation(v17);
          }
          double v22 = [*(id *)(*((void *)&v25 + 1) + 8 * j) collectionViewUpdateItem];
          [v16 addObject:v22];
        }
        uint64_t v19 = [v17 countByEnumeratingWithState:&v25 objects:v33 count:16];
      }
      while (v19);
    }

    -[_UIIndexPathIdentityTracker updateWithUpdateItems:]((uint64_t)v5, v16);
  }
}

- (id)_identityTracker:(BOOL)a3
{
  identityTracker = self->_identityTracker;
  if (identityTracker) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = !a3;
  }
  if (!v5)
  {
    id v6 = (_UIIndexPathIdentityTracker *)-[_UIIndexPathIdentityTracker initWithTableView:]((id *)[_UIIndexPathIdentityTracker alloc], self);
    unsigned __int8 v7 = self->_identityTracker;
    self->_identityTracker = v6;

    identityTracker = self->_identityTracker;
  }
  return identityTracker;
}

- (void)beginUpdates
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &beginUpdates___s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    BOOL v5 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = v5;
      int v8 = 138412546;
      id v9 = (id)objc_opt_class();
      __int16 v10 = 2048;
      os_signpost_id_t v11 = self;
      id v7 = v9;
      _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "<%@ %p> beginUpdates", (uint8_t *)&v8, 0x16u);
    }
  }
  int64_t updateCount = self->_updateCount;
  if (!updateCount)
  {
    [(UITableView *)self _setupCellAnimations];
    int64_t updateCount = self->_updateCount;
  }
  self->_int64_t updateCount = updateCount + 1;
}

- (void)_setupCellAnimations
{
  p_uint64_t tableFlags = &self->_tableFlags;
  if ((*((unsigned char *)&self->_tableFlags + 28) & 1) == 0) {
    [(UITableView *)self _updateVisibleCellsNow:0];
  }
  *((void *)p_tableFlags + 1) = *((void *)p_tableFlags + 1) & 0xFFF7FFFFFFFFFFFFLL | (((*((void *)p_tableFlags + 1) >> 52) & 1) << 51);
  [(UITableView *)self _suspendReloads];
  prefetchContext = self->_prefetchContext;
  if (prefetchContext)
  {
    maxIndedouble x = prefetchContext->_maxIndex;
    -[_UITableViewPrefetchContext cancelWithNewMaxIndex:]((uint64_t)prefetchContext, maxIndex);
  }
}

- (void)_resetSwipeActionController
{
  [(UISwipeActionController *)self->_swipeActionController reloadData];
  if ((*((unsigned char *)&self->_tableFlags + 21) & 0x10) != 0) {
    [(UITableView *)self _setEditing:0 animated:0 forced:1];
  }
  swipeToDeleteCell = self->_swipeToDeleteCell;
  self->_swipeToDeleteCell = 0;

  swipedIndexPath = self->_swipedIndexPath;
  self->_swipedIndexPath = 0;
}

- (void)_resetAllShadowUpdates
{
  [(NSMutableArray *)self->_placeholderContexts removeAllObjects];
  shadowUpdatesController = self->_shadowUpdatesController;
  [(_UITableViewShadowUpdatesController *)shadowUpdatesController reset];
}

- (void)_removeAllVisibleCells
{
  visibleCells = self->_visibleCells;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __37__UITableView__removeAllVisibleCells__block_invoke;
  v8[3] = &unk_1E5308CA0;
  v8[4] = self;
  [(NSMutableArray *)visibleCells enumerateObjectsWithOptions:2 usingBlock:v8];
  [(NSMutableArray *)self->_visibleCells removeAllObjects];
  self->_visibleRows.id location = 0;
  self->_visibleRows.NSUInteger length = 0;
  *((void *)&self->_tableFlags + 2) &= ~0x80000000000000uLL;
  id v4 = (void *)[(NSMutableDictionary *)self->_visibleHeaderViews copy];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __37__UITableView__removeAllVisibleCells__block_invoke_2;
  v7[3] = &unk_1E52E50C0;
  v7[4] = self;
  [v4 enumerateKeysAndObjectsUsingBlock:v7];

  BOOL v5 = (void *)[(NSMutableDictionary *)self->_visibleFooterViews copy];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __37__UITableView__removeAllVisibleCells__block_invoke_3;
  v6[3] = &unk_1E52E50C0;
  v6[4] = self;
  [v5 enumerateKeysAndObjectsUsingBlock:v6];

  -[_UITableViewSubviewManager removeAllPrefetchedCells]((id *)&self->_subviewManager->super.isa);
  [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1];
}

- (void)_cleanupStateFromDeleteConfirmation
{
  swipedIndexPath = self->_swipedIndexPath;
  self->_swipedIndexPath = 0;

  *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFDFFFFFFFFFFFFFLL | (((*((void *)&self->_tableFlags + 1) >> 52) & 1) << 53);
  swipeToDeleteCell = self->_swipeToDeleteCell;
  self->_swipeToDeleteCell = 0;

  if ((*((unsigned char *)&self->_tableFlags + 22) & 0x40) != 0 && [(UIView *)self->_wrapperView clipsToBounds]) {
    [(UITableView *)self _updateWrapperClipping];
  }
  *((void *)&self->_tableFlags + 3) &= ~2uLL;
}

- (void)_createOrUninstallDragAndDropControllersIfNeeded
{
  BOOL v3 = [(UITableView *)self _dragAndDropUsedForReordering];
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (WeakRetained)
  {
  }
  else
  {
    id v5 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    if (v5) {
      char v6 = 1;
    }
    else {
      char v6 = v3;
    }

    if ((v6 & 1) == 0)
    {
      [(_UITableViewDragController *)self->_dragController uninstallFromTableView];
      dragController = self->_dragController;
      self->_dragController = 0;

      goto LABEL_11;
    }
  }
  if (!self->_dragController)
  {
    id v7 = [[_UITableViewDragController alloc] initWithTableView:self];
    int v8 = self->_dragController;
    self->_dragController = v7;
  }
  [(UITableView *)self _updateDragControllerEnabledState];
LABEL_11:
  id v10 = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (v10)
  {
  }
  else
  {
    id v11 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    if (v11) {
      BOOL v3 = 1;
    }

    if (!v3)
    {
      [(_UITableViewDropController *)self->_dropController uninstallFromTableView];
      dropController = self->_dropController;
      self->_dropController = 0;
      goto LABEL_19;
    }
  }
  if (self->_dropController) {
    return;
  }
  uint64_t v12 = [[_UITableViewDropController alloc] initWithTableView:self];
  dropController = self->_dropController;
  self->_dropController = v12;
LABEL_19:
}

- (BOOL)_dragAndDropUsedForReordering
{
  int v3 = dyld_program_sdk_at_least();
  if (v3)
  {
    p_uint64_t tableFlags = &self->_tableFlags;
    BOOL v5 = (~*((_DWORD *)&self->_tableFlags + 6) & 0x1800000) == 0;
    if ((*((void *)&self->_tableFlags + 3) & 0x800000) == 0) {
      BOOL v5 = +[_UITableViewDragController isEnabledByDefault];
    }
    id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
    if (WeakRetained)
    {
      BOOL v7 = 1;
    }
    else
    {
      id v8 = objc_loadWeakRetained((id *)&self->_dropDelegate);
      if (v8)
      {
        BOOL v7 = 1;
      }
      else
      {
        id v9 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
        if (v9)
        {
          BOOL v7 = 1;
        }
        else
        {
          id v10 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
          BOOL v7 = v10 != 0;
        }
      }
    }
    LOBYTE(v3) = (*((unsigned char *)p_tableFlags + 3) & 4) != 0
              && (v5 && v7
               || (_UIInternalPreferenceUsesDefault(&_UIInternalPreference_TableViewReorderingUsesDragAndDrop, @"TableViewReorderingUsesDragAndDrop", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1E8FD54C4);
  }
  return v3;
}

- (id)dataSource
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  return WeakRetained;
}

- (void)setFrame:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  [(UIView *)self frame];
  v18.origin.double x = v8;
  v18.origin.double y = v9;
  double v11 = v10;
  double v13 = v12;
  v17.origin.double x = x;
  v17.origin.double y = y;
  v17.size.double width = width;
  v17.size.double height = height;
  v18.size.double width = v11;
  v18.size.double height = v13;
  if (!CGRectEqualToRect(v17, v18))
  {
    if (width != v11)
    {
      rowData = self->_rowData;
      -[UITableView _widthForContentInRect:](self, "_widthForContentInRect:", x, y, width, height);
      if (rowData) {
        rowData->_tableViewCGFloat Width = v15;
      }
    }
    v16.receiver = self;
    v16.super_class = (Class)UITableView;
    -[UIScrollView setFrame:](&v16, sel_setFrame_, x, y, width, height);
    -[UITableView _rectChangedWithNewSize:oldSize:](self, "_rectChangedWithNewSize:oldSize:", width, height, v11, v13);
  }
}

- (void)_setNeedsRebuildGeometry
{
  *((void *)&self->_tableFlags + 1) |= 0x400000000000000uLL;
  [(UIScrollView *)self setNeedsLayout];
}

- (void)setSemanticContentAttribute:(int64_t)a3
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  v23.receiver = self;
  v23.super_class = (Class)UITableView;
  -[UIView setSemanticContentAttribute:](&v23, sel_setSemanticContentAttribute_);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  BOOL v5 = self->_visibleCells;
  uint64_t v6 = [(NSMutableArray *)v5 countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v20;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v5);
        }
        [*(id *)(*((void *)&v19 + 1) + 8 * v9++) setSemanticContentAttribute:a3];
      }
      while (v7 != v9);
      uint64_t v7 = [(NSMutableArray *)v5 countByEnumeratingWithState:&v19 objects:v25 count:16];
    }
    while (v7);
  }

  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  double v10 = [(UITableView *)self _visibleHeaderFooterViews];
  uint64_t v11 = [v10 countByEnumeratingWithState:&v15 objects:v24 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v16;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v16 != v13) {
          objc_enumerationMutation(v10);
        }
        [*(id *)(*((void *)&v15 + 1) + 8 * v14++) setSemanticContentAttribute:a3];
      }
      while (v12 != v14);
      uint64_t v12 = [v10 countByEnumeratingWithState:&v15 objects:v24 count:16];
    }
    while (v12);
  }
}

- (UITableView)initWithFrame:(CGRect)frame style:(UITableViewStyle)style
{
  *((void *)&self->_tableFlags + 2) |= 0x2000000000uLL;
  v11.receiver = self;
  v11.super_class = (Class)UITableView;
  BOOL v5 = -[UIScrollView initWithFrame:](&v11, sel_initWithFrame_, frame.origin.x, frame.origin.y, frame.size.width, frame.size.height);
  if (v5)
  {
    [(id)objc_opt_class() _ensureInitializeSystemAppearanceModifications];
    uint64_t v6 = [(UITableView *)v5 _mappedStyle:style];
    *((void *)&v5->_tableFlags + 1) = *((void *)&v5->_tableFlags + 1) & 0xFFFF9FFFFFFFFFFFLL | ((unint64_t)(v6 & 3) << 45);
    [(UITableView *)v5 _setupTableViewCommon];
    if (((*((void *)&v5->_tableFlags + 1) >> 45) & 3uLL) - 1 <= 1)
    {
      uint64_t v7 = [(UITableView *)v5 _defaultBackgroundView];
      backgroundView = v5->_backgroundView;
      v5->_backgroundView = (UIView *)v7;
    }
    [(UITableView *)v5 _applyAppearanceDefaultsForStyle:v6];
    [(UITableView *)v5 setAllowsSelection:1];
    [(UIView *)v5 setMultipleTouchEnabled:0];
    [(UIScrollView *)v5 _setAlwaysBounceVertical:1];
    [(UITableView *)v5 _setupDefaultHeights];
    [(UITableView *)v5 _scheduleAdjustExtraSeparators];
    *((void *)&v5->_tableFlags + 2) &= ~0x2000000000uLL;
    uint64_t v9 = v5;
  }

  return v5;
}

- (void)setAllowsSelection:(BOOL)allowsSelection
{
  uint64_t v3 = 1024;
  if (!allowsSelection) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFFBFFLL | v3;
  if (!allowsSelection) {
    [(UITableView *)self setAllowsMultipleSelection:0];
  }
}

- (void)_setupDefaultHeights
{
  if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0)
  {
    self->_double rowHeight = -1.0;
    self->_double sectionHeaderHeight = -1.0;
    self->_double sectionFooterHeight = -1.0;
    char v7 = dyld_program_sdk_at_least();
    double v6 = -1.0;
    if ((v7 & 1) == 0) {
      return;
    }
  }
  else
  {
    [(UITableConstants *)self->_constants defaultRowHeightForTableView:self];
    self->_double rowHeight = v3;
    [(UITableConstants *)self->_constants defaultSectionHeaderHeightForTableView:self];
    self->_double sectionHeaderHeight = v4;
    [(UITableConstants *)self->_constants defaultSectionFooterHeightForTableView:self];
    self->_double sectionFooterHeight = v5;
    double v6 = 0.0;
  }
  self->_double estimatedRowHeight = v6;
  self->_double estimatedSectionHeaderHeight = v6;
  self->_double estimatedSectionFooterHeight = v6;
}

- (int64_t)_mappedStyle:(int64_t)a3
{
  return a3;
}

- (void)_applyAppearanceDefaultsForStyle:(int64_t)a3
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __48__UITableView__applyAppearanceDefaultsForStyle___block_invoke;
  v3[3] = &unk_1E52D9CD0;
  v3[4] = self;
  v3[5] = a3;
  +[UIView _performSystemAppearanceModifications:v3];
}

+ (void)_ensureInitializeSystemAppearanceModifications
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __61__UITableView__ensureInitializeSystemAppearanceModifications__block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = a1;
  if (_ensureInitializeSystemAppearanceModifications_onceToken_0 != -1) {
    dispatch_once(&_ensureInitializeSystemAppearanceModifications_onceToken_0, block);
  }
}

- (void)setEditing:(BOOL)editing animated:(BOOL)animated
{
  if ((*((unsigned char *)&self->_tableFlags + 21) & 0x84) != 0)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __35__UITableView_setEditing_animated___block_invoke;
    v8[3] = &unk_1E52DF220;
    v8[4] = self;
    BOOL v9 = editing;
    BOOL v10 = animated;
    double v5 = _Block_copy(v8);
    double v6 = (void *)[v5 copy];
    id deferredEditingHandler = self->_deferredEditingHandler;
    self->_id deferredEditingHandler = v6;
  }
  else
  {
    [(UITableView *)self _setEditing:editing animated:animated forced:0];
  }
}

- (void)_setEditing:(BOOL)a3 animated:(BOOL)a4 forced:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v34 = a4;
  BOOL v6 = a3;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &_setEditing_animated_forced____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    long long v31 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      long long v32 = v31;
      *(_DWORD *)long long buf = 138413314;
      id v41 = (id)objc_opt_class();
      __int16 v42 = 2048;
      uint64_t v43 = self;
      __int16 v44 = 2048;
      BOOL v45 = v6;
      __int16 v46 = 2048;
      BOOL v47 = v34;
      __int16 v48 = 2048;
      BOOL v49 = v5;
      id v33 = v41;
      _os_log_impl(&dword_1853B0000, v32, OS_LOG_TYPE_ERROR, "<%@ %p> setEditing:%ld animated:%ld forced:%ld", buf, 0x34u);
    }
  }
  if (((*((unsigned char *)&self->_tableFlags + 14) & 0x10) == 0) == v6)
  {
    BOOL v9 = (*((void *)&self->_tableFlags + 2) & 0x40000000000) == 0 || v5;
    if ((*((void *)&self->_tableFlags + 3) & 0x200000) == 0 && v9)
    {
      if (!dyld_program_sdk_at_least()
        || !v6
        || (~*((_DWORD *)&self->_tableFlags + 4) & 0x3000) != 0
        || ([(UITableView *)self indexPathsForSelectedRows],
            BOOL v10 = objc_claimAutoreleasedReturnValue(),
            unint64_t v11 = [v10 count],
            v10,
            v11 <= 1))
      {
        uint64_t v12 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:0x7FFFFFFFFFFFFFFFLL];
        [(UITableView *)self selectRowAtIndexPath:v12 animated:0 scrollPosition:0];
      }
      if (v6)
      {
        *((void *)&self->_tableFlags + 1) |= 0x10000000000000uLL;
      }
      else
      {
        [(_UITableViewMultiSelectController *)self->_multiSelectController clearSelectionState];
        *((void *)&self->_tableFlags + 1) &= ~0x10000000000000uLL;
        if (![(UITableView *)self _allowsReorderingWhenNotEditing]) {
          [(UITableView *)self _cancelCellReorder:v34];
        }
      }
      uint64_t v14 = *((void *)&self->_tableFlags + 2);
      uint64_t v13 = *((void *)&self->_tableFlags + 3);
      if ((v14 & 0x100000000000) != 0
        && (v14 & 0x8000000000000000) == 0
        && (swipedIndexPath = self->_swipedIndexPath) != 0)
      {
        uint64_t v16 = [(NSIndexPath *)swipedIndexPath section];
        int64_t v17 = [(NSIndexPath *)self->_swipedIndexPath row];
        if (!v6)
        {
          [(UITableView *)self _endSwipeToDeleteRowDidDelete:0];
          *((void *)&self->_tableFlags + 2) &= ~0x100000000000uLL;
          if (![(UITableView *)self _isUpdating] || (*((unsigned char *)&self->_tableFlags + 21) & 0x80) != 0) {
            [(UITableView *)self _cleanupStateFromDeleteConfirmation];
          }
        }
        long long v18 = [MEMORY[0x1E4F28D58] indexPathForRow:v17 inSection:v16];
        unint64_t v19 = [(UITableView *)self globalRowForRowAtIndexPath:v18];
        if (![(UITableView *)self _isUpdating] && (*((unsigned char *)&self->_tableFlags + 17) & 1) == 0)
        {
          NSUInteger location = self->_visibleRows.location;
          if (v19 >= location && v19 - location < self->_visibleRows.length)
          {
            long long v21 = -[NSMutableArray objectAtIndex:](self->_visibleCells, "objectAtIndex:");
            [(UITableView *)self _setupCell:v21 forEditing:v6 atIndexPath:v18 animated:v34 updateSeparators:1];
          }
        }
      }
      else
      {
        if (!v6)
        {
          [(UITableView *)self _endSwipeToDeleteRowDidDelete:0];
          uint64_t v14 = *((void *)&self->_tableFlags + 2);
          uint64_t v13 = *((void *)&self->_tableFlags + 3);
        }
        if ((v14 & 0x100000000000) != 0)
        {
          *((void *)&self->_tableFlags + 2) = v14 & 0xFFFFEFFFFFFFFFFFLL;
          *((void *)&self->_tableFlags + 3) = v13;
          [(UITableView *)self _cleanupStateFromDeleteConfirmation];
        }
        uint64_t v22 = 0x20000000000000;
        if (!v6) {
          uint64_t v22 = 0;
        }
        *((void *)&self->_tableFlags + 1) = *((void *)&self->_tableFlags + 1) & 0xFFDFFFFFFFFFFFFFLL | v22;
        if (![(UITableView *)self _isUpdating])
        {
          [(UITableView *)self _suspendReloads];
          uint64_t v23 = [(NSMutableArray *)self->_visibleCells count];
          uint64_t v24 = v23 - 1;
          if (v23 >= 1)
          {
            uint64_t v25 = 0;
            do
            {
              NSUInteger v26 = v25 + self->_visibleRows.location;
              long long v27 = [(NSMutableArray *)self->_visibleCells objectAtIndexedSubscript:v25];
              long long v28 = [(UITableView *)self indexPathForRowAtGlobalRow:v26];
              [(UITableView *)self _setupCell:v27 forEditing:v6 atIndexPath:v28 animated:v34 updateSeparators:1];
              uint64_t v29 = *((void *)&self->_tableFlags + 1);

              if ((v29 & 0x80000000000000) != 0) {
                break;
              }
            }
            while (v24 != v25++);
          }
          [(UITableView *)self _resumeReloads];
          v35[0] = MEMORY[0x1E4F143A8];
          v35[1] = 3221225472;
          uint64_t v36 = __43__UITableView__setEditing_animated_forced___block_invoke;
          char v37 = &__block_descriptor_34_e29_v16__0__NSMutableDictionary_8l;
          BOOL v38 = v6;
          BOOL v39 = v34;
          __43__UITableView__setEditing_animated_forced___block_invoke((uint64_t)v35, self->_visibleFooterViews);
          v36((uint64_t)v35, self->_visibleHeaderViews);
        }
        if (self->_tableHeaderView && (objc_opt_respondsToSelector() & 1) != 0) {
          [(UIView *)self->_tableHeaderView setEditing:v6 animated:v34];
        }
        if (self->_tableFooterView)
        {
          if (objc_opt_respondsToSelector()) {
            [(UIView *)self->_tableFooterView setEditing:v6 animated:v34];
          }
        }
      }
      [(UIView *)self setNeedsFocusUpdate];
      [(UITableView *)self _updateSelectionIsKey];
    }
  }
}

- (void)setEditing:(BOOL)editing
{
}

- (id)_defaultBackgroundView
{
  return 0;
}

- (UITableView)initWithFrame:(CGRect)a3
{
  return -[UITableView initWithFrame:style:](self, "initWithFrame:style:", 0, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
}

void __34__UITableView__reapTentativeViews__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (([*(id *)(*(void *)(a1 + 32) + 2184) containsObject:v5] & 1) == 0)
  {
    BOOL v6 = [v5 _tableView];
    char v7 = v6;
    if (v6 == *(void **)(a1 + 32))
    {
    }
    else
    {
      uint64_t v8 = [v5 superview];

      if (v8) {
        goto LABEL_7;
      }
    }
    [*(id *)(a1 + 32) _reuseTableViewCell:v5 withIndexPath:v9 didEndDisplaying:0];
  }
LABEL_7:
}

- (void)_notifyDidScroll
{
  if ((*((unsigned char *)&self->_tableFlags + 28) & 1) == 0)
  {
    v2.receiver = self;
    v2.super_class = (Class)UITableView;
    [(UIScrollView *)&v2 _notifyDidScroll];
  }
}

void __50__UITableView__updateVisibleHeadersAndFootersNow___block_invoke(void *a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  unint64_t v6 = [v14 integerValue];
  unint64_t v7 = a1[5];
  BOOL v9 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  BOOL v9 = !v9 || v8 >= a1[6];
  if (v9)
  {
    BOOL v10 = *(void **)(*(void *)(a1[4] + 8) + 40);
    if (v10)
    {
      [v10 setObject:v5 forKey:v14];
    }
    else
    {
      uint64_t v11 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithObjectsAndKeys:", v5, v14, 0);
      uint64_t v12 = *(void *)(a1[4] + 8);
      uint64_t v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }
  }
}

- (CGFloat)sectionHeaderHeight
{
  return self->_sectionHeaderHeight;
}

- (void)_headerFooterDidInvalidateIntrinsicContentSize:(id)a3
{
  v13[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (-[UITableView _canRecomputePreferredAttributesForInvalidatedElements]((uint64_t)self)
    && ([v4 _isHiddenForReuse] & 1) == 0)
  {
    if (v4) {
      [v4 transform3D];
    }
    else {
      memset(&v12, 0, sizeof(v12));
    }
    if (CATransform3DIsIdentity(&v12))
    {
      id v5 = @"UICollectionElementKindSectionHeader";
      int64_t v6 = [(UITableView *)self _sectionForHeaderView:v4];
      if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      {
        unint64_t v7 = @"UICollectionElementKindSectionFooter";

        int64_t v8 = [(UITableView *)self _sectionForFooterView:v4];
        id v5 = v7;
        if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_12;
        }
      }
      else
      {
        int64_t v8 = v6;
        unint64_t v7 = v5;
      }
      [(UITableView *)self _setNeedsRecomputeHeightsForInvalidatedElements];
      intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
      BOOL v10 = [MEMORY[0x1E4F28D58] indexPathWithIndex:v8];
      v13[0] = v10;
      uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:1];
      [(UICollectionViewLayoutInvalidationContext *)intrinsicContentSizeInvalidationContext invalidateSupplementaryElementsOfKind:v5 atIndexPaths:v11];

LABEL_12:
    }
  }
}

- (int64_t)_sectionForHeaderView:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
  visibleHeaderViews = self->_visibleHeaderViews;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __37__UITableView__sectionForHeaderView___block_invoke;
  v9[3] = &unk_1E5308E50;
  id v6 = v4;
  id v10 = v6;
  uint64_t v11 = &v12;
  [(NSMutableDictionary *)visibleHeaderViews enumerateKeysAndObjectsUsingBlock:v9];
  int64_t v7 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v7;
}

- (int64_t)_sectionForFooterView:(id)a3
{
  id v4 = a3;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
  visibleFooterViews = self->_visibleFooterViews;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = __37__UITableView__sectionForFooterView___block_invoke;
  v9[3] = &unk_1E5308E50;
  id v6 = v4;
  id v10 = v6;
  uint64_t v11 = &v12;
  [(NSMutableDictionary *)visibleFooterViews enumerateKeysAndObjectsUsingBlock:v9];
  int64_t v7 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v7;
}

- (void)_cellDidInvalidateIntrinsicContentSize:(id)a3
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (-[UITableView _canRecomputePreferredAttributesForInvalidatedElements]((uint64_t)self)
    && ([v4 _isHiddenForReuse] & 1) == 0)
  {
    if (v4) {
      [v4 transform3D];
    }
    else {
      memset(&v8, 0, sizeof(v8));
    }
    if (CATransform3DIsIdentity(&v8))
    {
      id v5 = [(UITableView *)self _indexPathForCell:v4 usingPresentationValues:1];
      if (v5)
      {
        [(UITableView *)self _setNeedsRecomputeHeightsForInvalidatedElements];
        intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
        v9[0] = v5;
        int64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:1];
        [(UICollectionViewLayoutInvalidationContext *)intrinsicContentSizeInvalidationContext invalidateItemsAtIndexPaths:v7];
      }
    }
  }
}

- (uint64_t)_canRecomputePreferredAttributesForInvalidatedElements
{
  if (result)
  {
    uint64_t v1 = result;
    double result = _UISupportsIntrinsicContentSizeInvalidation();
    if (result)
    {
      unint64_t v2 = *(void *)(v1 + 3096);
      return (v2 & 0x18000000000) != 0
          && ((v2 >> 43) & 3) < _UIMaximumIntrinsicContentSizeInvalidationUpdatesPerCommit()
          && (*(unsigned char *)(v1 + 3087) & 6) == 0
          && !*(void *)(v1 + 2208)
          && *(void *)(v1 + 2872) == 0;
    }
  }
  return result;
}

- (double)_widthForContentInRect:(CGRect)a3
{
  return a3.size.width;
}

- (void)_endCellAnimationsWithContext:(id)a3
{
  uint64_t v445 = *MEMORY[0x1E4F143B8];
  id v355 = a3;
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableView", (unint64_t *)&_MergedGlobals_327);
  id v5 = *(id *)(CategoryCachedImpl + 8);
  os_signpost_id_t v6 = os_signpost_id_make_with_pointer(*(os_log_t *)(CategoryCachedImpl + 8), self);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v7 = v6;
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1853B0000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v7, "BatchUpdates", "", buf, 2u);
    }
  }

  v354 = (void *)_UISetCurrentFallbackEnvironment(self);
  [(_UITableViewDragController *)self->_dragController forceReset];
  id v356 = [(_UITableViewDropController *)self->_dropController beginIgnoringDrags];
  uint64_t v8 = [(UITableView *)self _isScrolledToTop];
  BOOL v9 = [(UITableView *)self _indexPathsForVisibleRowsUsingPresentationValues:1];
  id v10 = [v9 firstObject];

  p_uint64_t tableFlags = &self->_tableFlags;
  if ((*((unsigned char *)&self->_tableFlags + 24) & 4) == 0) {
    [(UITableView *)self _storePreReloadStateForRestoringContentOffsetWithFirstVisibleIndexPath:v10];
  }
  [(UITableView *)self _beginSuspendingUpdates];
  double v12 = *MEMORY[0x1E4F1DB20];
  double v13 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  double v14 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double v15 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  v357 = &self->_tableFlags;
  if (!self->_rowData) {
    goto LABEL_492;
  }
  if ((*((unsigned char *)&self->_tableFlags + 15) & 2) != 0
    && (*((unsigned char *)&self->_tableFlags + 27) & 0x20) != 0
    && dyld_program_sdk_at_least())
  {
    [(UITableView *)self _resetUpdateItemArrays];
    char v359 = 1;
    char v360 = 0;
  }
  else
  {
    char v359 = 0;
    char v360 = 1;
  }
  unsigned int v350 = v8;
  v353 = v10;
  uint64_t v16 = [(UIView *)self _focusSystem];
  int64_t v17 = [v16 focusedItem];

  v352 = v17;
  long long v18 = _UIFocusEnvironmentContainingView(v17);
  if ([v18 isDescendantOfView:self])
  {
    [v18 bounds];
    objc_msgSend(v18, "convertRect:toView:", self);
    double v12 = v19;
    double v13 = v20;
    double v14 = v21;
    double v15 = v22;
  }
  v351 = v18;
  v358 = (void *)[(UITableViewRowData *)self->_rowData copy];
  uint64_t v23 = [(UITableView *)self _arrayForUpdateAction:1];
  v365 = objc_msgSend(v23, "sortedArrayUsingSelector:");

  uint64_t v24 = [(UITableView *)self _arrayForUpdateAction:0];
  v363 = objc_msgSend(v24, "sortedArrayUsingSelector:");

  uint64_t v25 = [(UITableView *)self _sortedDeduplicatedReloadItems];
  NSUInteger v26 = [(NSMutableArray *)self->_moveItems sortedArrayUsingSelector:sel_compareIndexPathsForMoves_];
  long long v27 = (void *)[v26 mutableCopy];

  v387 = -[UITableView _sectionsWithSectionOperationsInUpdateItems:](self, self->_deleteItems);
  v388 = -[UITableView _sectionsWithSectionOperationsInUpdateItems:](self, self->_insertItems);
  int v28 = dyld_program_sdk_at_least();
  long long v429 = 0u;
  long long v430 = 0u;
  long long v431 = 0u;
  long long v432 = 0u;
  obint j = v25;
  v376 = self;
  v378 = v27;
  uint64_t v374 = [obj countByEnumeratingWithState:&v429 objects:v444 count:16];
  if (v374)
  {
    int v370 = v28 ^ 1;
    v367 = *(void **)v430;
    do
    {
      uint64_t v29 = 0;
      do
      {
        if (*(void **)v430 != v367) {
          objc_enumerationMutation(obj);
        }
        uint64_t v30 = *(void *)(*((void *)&v429 + 1) + 8 * (void)v29);
        if (v30) {
          long long v31 = *(void **)(v30 + 24);
        }
        else {
          long long v31 = 0;
        }
        id v32 = v31;
        uint64_t v33 = [v32 section];
        uint64_t v385 = [v32 row];
        if (v30) {
          int v34 = *(unsigned char *)(v30 + 16) & 1;
        }
        else {
          int v34 = 0;
        }
        if (((v34 | v370) & 1) == 0)
        {
          uint64_t v35 = [(UITableView *)self _existingCellForRowAtIndexPath:v32];

          if (!v35) {
            goto LABEL_106;
          }
        }
        v379 = v29;
        long long v427 = 0u;
        long long v428 = 0u;
        long long v425 = 0u;
        long long v426 = 0u;
        id v36 = v365;
        uint64_t v37 = [v36 countByEnumeratingWithState:&v425 objects:v443 count:16];
        uint64_t v389 = v385;
        uint64_t v382 = v33;
        if (!v37) {
          goto LABEL_57;
        }
        uint64_t v38 = v37;
        uint64_t v39 = *(void *)v426;
        uint64_t v389 = v385;
        do
        {
          uint64_t v40 = 0;
          do
          {
            if (*(void *)v426 != v39) {
              objc_enumerationMutation(v36);
            }
            uint64_t v41 = *(void *)(*((void *)&v425 + 1) + 8 * v40);
            if (v41) {
              __int16 v42 = *(void **)(v41 + 24);
            }
            else {
              __int16 v42 = 0;
            }
            id v43 = v42;
            if ([v43 isEqual:v32])
            {
              BOOL v47 = [MEMORY[0x1E4F28B00] currentHandler];
              [v47 handleFailureInMethod:a2, v376, @"UITableView.m", 2039, @"attempt to delete and reload the same index path (%@)", v43 object file lineNumber description];
            }
            uint64_t v44 = [v43 section];
            if (v41)
            {
              if (*(unsigned char *)(v41 + 16))
              {
                if (v44 == [v32 section]) {
                  goto LABEL_51;
                }
                int v45 = *(unsigned char *)(v41 + 16) & 1;
              }
              else
              {
                int v45 = 0;
              }
              LODWORD(v46) = v45 != 0;
            }
            else
            {
              LODWORD(v46) = 0;
            }
            if (v44 <= v33) {
              uint64_t v46 = v46;
            }
            else {
              uint64_t v46 = 0;
            }
            v33 -= v46;
            if ((!v30 || (*(unsigned char *)(v30 + 16) & 1) == 0) && (!v41 || (*(unsigned char *)(v41 + 16) & 1) == 0) && v44 == v33)
            {
              if (([v387 containsIndex:v44] & 1) == 0) {
                v389 -= [v43 row] <= v389;
              }
              uint64_t v33 = v44;
            }
LABEL_51:

            ++v40;
          }
          while (v38 != v40);
          uint64_t v48 = [v36 countByEnumeratingWithState:&v425 objects:v443 count:16];
          uint64_t v38 = v48;
        }
        while (v48);
LABEL_57:

        long long v423 = 0u;
        long long v424 = 0u;
        long long v421 = 0u;
        long long v422 = 0u;
        id v49 = v363;
        uint64_t v50 = [v49 countByEnumeratingWithState:&v421 objects:v442 count:16];
        if (v50)
        {
          uint64_t v51 = v50;
          uint64_t v52 = *(void *)v422;
          do
          {
            uint64_t v53 = 0;
            do
            {
              if (*(void *)v422 != v52) {
                objc_enumerationMutation(v49);
              }
              uint64_t v54 = *(void *)(*((void *)&v421 + 1) + 8 * v53);
              if (v54) {
                CGRect v55 = *(void **)(v54 + 24);
              }
              else {
                CGRect v55 = 0;
              }
              id v56 = v55;
              uint64_t v57 = [v56 section];
              if (v54) {
                LODWORD(v58) = *(unsigned char *)(v54 + 16) & 1;
              }
              else {
                LODWORD(v58) = 0;
              }
              if (v57 <= v33) {
                uint64_t v58 = v58;
              }
              else {
                uint64_t v58 = 0;
              }
              v33 += v58;
              if ((!v30 || (*(unsigned char *)(v30 + 16) & 1) == 0)
                && (!v54 || (*(unsigned char *)(v54 + 16) & 1) == 0)
                && v57 == v33
                && ([v388 containsIndex:v57] & 1) == 0)
              {
                uint64_t v59 = [v56 row];
                uint64_t v60 = v389;
                if (v59 <= v389) {
                  uint64_t v60 = v389 + 1;
                }
                uint64_t v389 = v60;
              }

              ++v53;
            }
            while (v51 != v53);
            uint64_t v61 = [v49 countByEnumeratingWithState:&v421 objects:v442 count:16];
            uint64_t v51 = v61;
          }
          while (v61);
        }

        self = v376;
        if (v30)
        {
          int v62 = *(void **)(v30 + 32);
          long long v27 = v378;
          if ((unint64_t)v62 > 6) {
            int v63 = *(void **)(v30 + 32);
          }
          else {
            int v63 = (void *)*((void *)&unk_186B9D5B0 + (void)v62);
          }
        }
        else
        {
          int v62 = 0;
          int v63 = 0;
          long long v27 = v378;
        }
        int v64 = [UIDecomposedReloadUpdateItem alloc];
        uint64_t v65 = [MEMORY[0x1E4F28D58] indexPathForRow:v385 inSection:v382];
        char v66 = -[UIUpdateItem initWithAction:forIndexPath:animation:]((id *)&v64->super.super.isa, 1, v65, v62);

        if (v30)
        {
          int v67 = (*(unsigned __int8 *)(v30 + 16) >> 1) & 1;
          if (v66) {
            goto LABEL_90;
          }
        }
        else
        {
          int v67 = 0;
          if (v66)
          {
LABEL_90:
            if (v67) {
              char v68 = 2;
            }
            else {
              char v68 = 0;
            }
            *((unsigned char *)v66 + 16) = (_BYTE)v66[2] & 0xFD | v68;
          }
        }
        uint64_t v69 = [UIDecomposedReloadUpdateItem alloc];
        id v70 = [MEMORY[0x1E4F28D58] indexPathForRow:v389 inSection:v33];
        uint64_t v71 = -[UIUpdateItem initWithAction:forIndexPath:animation:]((id *)&v69->super.super.isa, 0, v70, v63);

        if (v30) {
          int v72 = (*(unsigned __int8 *)(v30 + 16) >> 1) & 1;
        }
        else {
          int v72 = 0;
        }
        uint64_t v29 = v379;
        if (v71)
        {
          if (v72) {
            char v73 = 2;
          }
          else {
            char v73 = 0;
          }
          *((unsigned char *)v71 + 16) = (_BYTE)v71[2] & 0xFD | v73;
        }
        if (v66) {
          objc_storeWeak(v66 + 5, v71);
        }
        if (v71) {
          objc_storeWeak(v71 + 5, v66);
        }
        [(NSMutableArray *)v376->_deleteItems addObject:v66];
        [(NSMutableArray *)v376->_insertItems addObject:v71];

LABEL_106:
        uint64_t v29 = (char *)v29 + 1;
      }
      while (v29 != (void *)v374);
      uint64_t v74 = [obj countByEnumeratingWithState:&v429 objects:v444 count:16];
      uint64_t v374 = v74;
    }
    while (v74);
  }

  uint64_t v75 = [(NSMutableArray *)self->_deleteItems sortedArrayUsingSelector:sel_inverseCompareIndexPaths_];
  uint64_t v76 = [v75 mutableCopy];

  char v77 = [(NSMutableArray *)self->_insertItems sortedArrayUsingSelector:sel_compareIndexPaths_];
  uint64_t v78 = [v77 mutableCopy];

  v386 = (void *)v78;
  v390 = (void *)v76;
  [(UITableView *)self _rebaseExistingShadowUpdatesIfNecessaryWithSortedInsertItems:v78 sortedDeleteItems:v76 sortedMoveItems:v27];
  -[UITableViewRowData invalidateAllSections]((uint64_t)self->_rowData);
  -[UITableViewRowData ensureAllSectionsAreValid](self->_rowData);
  if ([v27 count])
  {
    char v79 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28BD0]), "initWithCapacity:", objc_msgSend(v27, "count"));
    uint64_t v80 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28BD0]), "initWithCapacity:", objc_msgSend(v27, "count"));
    long long v417 = 0u;
    long long v418 = 0u;
    long long v419 = 0u;
    long long v420 = 0u;
    id v81 = v27;
    uint64_t v82 = [v81 countByEnumeratingWithState:&v417 objects:v441 count:16];
    if (v82)
    {
      uint64_t v83 = v82;
      uint64_t v84 = *(void *)v418;
      do
      {
        uint64_t v85 = 0;
        do
        {
          if (*(void *)v418 != v84) {
            objc_enumerationMutation(v81);
          }
          uint64_t v86 = *(void *)(*((void *)&v417 + 1) + 8 * v85);
          if (v86) {
            char v87 = *(void **)(v86 + 24);
          }
          else {
            char v87 = 0;
          }
          id v88 = v87;
          [v79 addObject:v88];

          char v89 = -[UIRowMoveUpdateItem newIndexPath]((id *)v86);
          [v80 addObject:v89];

          ++v85;
        }
        while (v83 != v85);
        uint64_t v90 = [v81 countByEnumeratingWithState:&v417 objects:v441 count:16];
        uint64_t v83 = v90;
      }
      while (v90);
    }
  }
  else
  {
    uint64_t v80 = 0;
    char v79 = 0;
  }
  v366 = v80;
  v375 = v79;
  if ([v390 count])
  {
    uint64_t v91 = 0;
    int v92 = 0;
    char v93 = v378;
    unint64_t v94 = v390;
    while (1)
    {
      uint64_t v95 = [v94 objectAtIndexedSubscript:v91];
      uint64_t v96 = (unsigned char *)v95;
      if (v95) {
        char v97 = *(void **)(v95 + 24);
      }
      else {
        char v97 = 0;
      }
      id v98 = v97;
      uint64_t v99 = [v98 section];
      if (v375 && (v96 && (v96[16] & 1) != 0 || ([v375 containsObject:v98] & 1) != 0)) {
        LODWORD(i) = 0;
      }
      else {
        LODWORD(i) = [v93 count];
      }
      if ([v93 count] > (unint64_t)(int)i)
      {
        for (unint64_t i = (int)i; [v93 count] > i; ++i)
        {
          uint64_t v101 = [v93 objectAtIndexedSubscript:i];
          uint64_t v102 = v101;
          if (v101) {
            char v103 = *(void **)(v101 + 24);
          }
          else {
            char v103 = 0;
          }
          id v104 = v103;
          int v105 = [v104 isEqual:v98];

          if (v105)
          {
            if (v102) {
              int v106 = *(unsigned char *)(v102 + 16) & 1;
            }
            else {
              int v106 = 0;
            }
            char v107 = [MEMORY[0x1E4F28B00] currentHandler];
            uint64_t v108 = v107;
            if (v106) {
              objc_msgSend(v107, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UITableView.m", 2137, @"attempt to perform a delete and a move from the same section (%ld)", v99);
            }
            else {
              [v107 handleFailureInMethod:a2, self, @"UITableView.m", 2140, @"attempt to perform a delete and a move from the same index path (%@)", v98 object file lineNumber description];
            }
          }
          else
          {
            if (!v96 || (v96[16] & 1) == 0) {
              goto LABEL_156;
            }
            if (v102) {
              char v109 = *(void **)(v102 + 24);
            }
            else {
              char v109 = 0;
            }
            id v110 = v109;
            BOOL v111 = v99 == [v110 section];

            v359 |= v111;
            v360 &= !v111;
          }
          char v93 = v378;
LABEL_156:
        }
      }
      if (!v96 || (v96[16] & 1) == 0)
      {
        uint64_t v112 = [v98 row];
        uint64_t v113 = [v98 section];
        uint64_t v114 = v113;
        char v115 = v358;
        if (v358) {
          char v115 = (void *)v358[8];
        }
        if (v113 >= (uint64_t)v115)
        {
          char v146 = [MEMORY[0x1E4F28B00] currentHandler];
          uint64_t v147 = v146;
          char v148 = v358;
          if (v358) {
            char v148 = (void *)v358[8];
          }
          [v146 handleFailureInMethod:a2, self, @"UITableView.m", 2184, @"attempt to delete row %ld from section %ld, but there are only %ld sections before the update", v112, v114, v148 object file lineNumber description];
        }
        if (v112 >= -[UITableViewRowData numberOfRowsInSection:]((uint64_t)v358, [v98 section]))
        {
          uint64_t v149 = [MEMORY[0x1E4F28B00] currentHandler];
          objc_msgSend(v149, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UITableView.m", 2185, @"attempt to delete row %ld from section %ld which only contains %ld rows before the update", v112, v114, -[UITableViewRowData numberOfRowsInSection:]((uint64_t)v358, objc_msgSend(v98, "section")));
        }
        for (int j = v92 + 1; [v390 count] > (unint64_t)j; objc_msgSend(v390, "removeObjectAtIndex:", j))
        {
          uint64_t v117 = [v390 objectAtIndex:j];
          uint64_t v118 = (void *)v117;
          if (v117) {
            char v119 = *(void **)(v117 + 24);
          }
          else {
            char v119 = 0;
          }
          id v120 = v119;
          int v121 = [v120 isEqual:v98];

          if (!v121) {
            break;
          }
        }
        long long v415 = 0u;
        long long v416 = 0u;
        long long v413 = 0u;
        long long v414 = 0u;
        id v122 = v386;
        uint64_t v123 = [v122 countByEnumeratingWithState:&v413 objects:v440 count:16];
        if (v123)
        {
          uint64_t v124 = v123;
          uint64_t v125 = *(void *)v414;
          while (2)
          {
            for (uint64_t k = 0; k != v124; ++k)
            {
              if (*(void *)v414 != v125) {
                objc_enumerationMutation(v122);
              }
              char v127 = *(void **)(*((void *)&v413 + 1) + 8 * k);
              if (v127) {
                char v127 = (void *)v127[3];
              }
              uint64_t v128 = v127;
              char v129 = [v128 isEqual:v98];

              if (v129)
              {

                self = v376;
                goto LABEL_215;
              }
            }
            uint64_t v124 = [v122 countByEnumeratingWithState:&v413 objects:v440 count:16];
            if (v124) {
              continue;
            }
            break;
          }
        }

        self = v376;
        uint64_t v130 = [(UITableView *)v376 _swipeActionController];
        [v130 deleteRowAtIndexPath:v98];

        swipedIndexPath = v376->_swipedIndexPath;
        if (!swipedIndexPath)
        {
LABEL_215:
          char v93 = v378;
          goto LABEL_216;
        }
        char v93 = v378;
        if (![(NSIndexPath *)swipedIndexPath isEqual:v98]) {
          goto LABEL_216;
        }
LABEL_214:
        *((void *)v357 + 2) |= 0x1000000000000uLL;
        goto LABEL_216;
      }
      if ((v96[16] & 2) == 0)
      {
        uint64_t v132 = v358;
        if (v358) {
          uint64_t v132 = (void *)v358[8];
        }
        if (v99 >= (uint64_t)v132)
        {
          char v150 = [MEMORY[0x1E4F28B00] currentHandler];
          uint64_t v151 = v150;
          char v152 = v358;
          if (v358) {
            char v152 = (void *)v358[8];
          }
          [v150 handleFailureInMethod:a2, self, @"UITableView.m", 2154, @"attempt to delete section %ld, but there are only %ld sections before the update", v99, v152 object file lineNumber description];
        }
        if ([v390 count])
        {
          uint64_t v133 = 0;
          int v134 = 0;
          uint64_t v135 = v390;
          do
          {
            uint64_t v136 = [v135 objectAtIndexedSubscript:v133];
            uint64_t v137 = (void *)v136;
            if (v136)
            {
              if (*(unsigned char *)(v136 + 16))
              {
                if (v134 > v92) {
                  goto LABEL_203;
                }
                goto LABEL_206;
              }
              uint64_t v138 = *(void **)(v136 + 24);
            }
            else
            {
              uint64_t v138 = 0;
            }
            id v139 = v138;
            uint64_t v140 = [v139 section];

            if (v140 != v99)
            {
              if (v134 > v92)
              {
                if (v137) {
LABEL_203:
                }
                  uint64_t v141 = (void *)v137[3];
                else {
                  uint64_t v141 = 0;
                }
                id v142 = v141;
                int v143 = [v142 isEqual:v98];

                if (v143) {
                  [v390 removeObjectAtIndex:v133];
                }
              }
LABEL_206:
              ++v134;
              goto LABEL_207;
            }
            [v390 removeObjectAtIndex:v133];
            v92 -= v134 < v92;
LABEL_207:

            uint64_t v133 = v134;
            uint64_t v135 = v390;
          }
          while ([v390 count] > (unint64_t)v134);
        }
        char v144 = [(UITableView *)self _swipeActionController];
        [v144 deleteSectionAtIndex:v99];

        uint64_t v145 = self->_swipedIndexPath;
        if (!v145) {
          goto LABEL_215;
        }
        char v93 = v378;
        if ([(NSIndexPath *)v145 section] == v99) {
          goto LABEL_214;
        }
      }
LABEL_216:
      ++v92;

      uint64_t v91 = v92;
      unint64_t v94 = v390;
      if ([v390 count] <= (unint64_t)v92) {
        goto LABEL_226;
      }
    }
  }
  char v93 = v378;
LABEL_226:
  if ([v386 count])
  {
    uint64_t v153 = 0;
    int v154 = 0;
    uint64_t v155 = v386;
    while (1)
    {
      uint64_t v156 = [v155 objectAtIndexedSubscript:v153];
      uint64_t v157 = (unsigned char *)v156;
      if (v156) {
        char v158 = *(void **)(v156 + 24);
      }
      else {
        char v158 = 0;
      }
      id v159 = v158;
      uint64_t v160 = [v159 section];
      if (v366 && (v157 && (v157[16] & 1) != 0 || ([v366 containsObject:v159] & 1) != 0)) {
        LODWORD(v161) = 0;
      }
      else {
        LODWORD(v161) = [v93 count];
      }
      if ([v93 count] > (unint64_t)(int)v161)
      {
        unint64_t v161 = (int)v161;
        do
        {
          uint64_t v162 = [v93 objectAtIndexedSubscript:v161];
          uint64_t v163 = -[UIRowMoveUpdateItem newIndexPath]((id *)v162);
          int v164 = [v163 isEqual:v159];

          if (v164)
          {
            if (v162) {
              int v165 = *(unsigned char *)(v162 + 16) & 1;
            }
            else {
              int v165 = 0;
            }
            char v166 = [MEMORY[0x1E4F28B00] currentHandler];
            uint64_t v167 = v166;
            if (v165) {
              objc_msgSend(v166, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UITableView.m", 2233, @"attempt to perform an insert and a move to the same section (%ld)", v160);
            }
            else {
              [v166 handleFailureInMethod:a2, self, @"UITableView.m", 2236, @"attempt to perform an insert and a move to the same index path (%@)", v159 object file lineNumber description];
            }

            char v93 = v378;
          }
          else if (v157 && (v157[16] & 1) != 0)
          {
            char v168 = -[UIRowMoveUpdateItem newIndexPath]((id *)v162);
            BOOL v169 = v160 == [v168 section];

            v359 |= v169;
            BOOL v170 = !v169;
            char v93 = v378;
            v360 &= v170;
          }
          ++v161;
        }
        while ([v93 count] > v161);
      }
      if (!v157 || (v157[16] & 1) == 0)
      {
        uint64_t v171 = [v159 section];
        uint64_t v172 = [v159 row];
        rowData = self->_rowData;
        if (rowData) {
          int64_t numSections = rowData->_numSections;
        }
        else {
          int64_t numSections = 0;
        }
        if (v171 >= numSections)
        {
          v201 = [MEMORY[0x1E4F28B00] currentHandler];
          v202 = v201;
          v203 = self->_rowData;
          if (v203) {
            v203 = (UITableViewRowData *)v203->_numSections;
          }
          [v201 handleFailureInMethod:a2, self, @"UITableView.m", 2277, @"attempt to insert row %ld into section %ld, but there are only %ld sections after the update", v172, v171, v203 object file lineNumber description];

          rowData = self->_rowData;
        }
        if (v172 >= -[UITableViewRowData numberOfRowsInSection:]((uint64_t)rowData, [v159 section]))
        {
          v204 = [MEMORY[0x1E4F28B00] currentHandler];
          [v204 handleFailureInMethod:a2, self, @"UITableView.m", 2278, @"attempt to insert row %ld into section %ld, but there are only %ld rows in section %ld after the update", v172, v171, -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, objc_msgSend(v159, "section")), v171 object file lineNumber description];
        }
        for (int m = v154 + 1; [v386 count] > (unint64_t)m; objc_msgSend(v386, "removeObjectAtIndex:", m))
        {
          uint64_t v176 = [v386 objectAtIndex:m];
          v177 = (void *)v176;
          if (v176) {
            BOOL v178 = *(void **)(v176 + 24);
          }
          else {
            BOOL v178 = 0;
          }
          id v179 = v178;
          int v180 = [v179 isEqual:v159];

          if (!v180) {
            break;
          }
        }
        long long v411 = 0u;
        long long v412 = 0u;
        long long v409 = 0u;
        long long v410 = 0u;
        id v181 = v390;
        uint64_t v182 = [v181 countByEnumeratingWithState:&v409 objects:v439 count:16];
        if (v182)
        {
          uint64_t v183 = v182;
          uint64_t v184 = *(void *)v410;
          while (2)
          {
            for (uint64_t n = 0; n != v183; ++n)
            {
              if (*(void *)v410 != v184) {
                objc_enumerationMutation(v181);
              }
              v186 = *(void **)(*((void *)&v409 + 1) + 8 * n);
              if (v186) {
                v186 = (void *)v186[3];
              }
              v187 = v186;
              char v188 = [v187 isEqual:v159];

              if (v188)
              {
                self = v376;
                goto LABEL_301;
              }
            }
            uint64_t v183 = [v181 countByEnumeratingWithState:&v409 objects:v439 count:16];
            if (v183) {
              continue;
            }
            break;
          }
        }

        self = v376;
        id v181 = [(UITableView *)v376 _swipeActionController];
        [v181 insertRowAtIndexPath:v159];
        goto LABEL_301;
      }
      if ((v157[16] & 2) == 0) {
        break;
      }
LABEL_302:
      ++v154;

      uint64_t v153 = v154;
      uint64_t v155 = v386;
      if ([v386 count] <= (unint64_t)v154) {
        goto LABEL_312;
      }
    }
    v189 = self->_rowData;
    if (v189) {
      v189 = (UITableViewRowData *)v189->_numSections;
    }
    if (v160 >= (uint64_t)v189)
    {
      v205 = [MEMORY[0x1E4F28B00] currentHandler];
      v206 = v205;
      v207 = self->_rowData;
      if (v207) {
        v207 = (UITableViewRowData *)v207->_numSections;
      }
      objc_msgSend(v205, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UITableView.m", 2250, @"attempt to insert section %ld but there are only %ld sections after the update", v160, v207);
    }
    if (![v386 count])
    {
LABEL_300:
      id v181 = [(UITableView *)self _swipeActionController];
      [v181 insertSectionAtIndex:v160];
LABEL_301:

      char v93 = v378;
      goto LABEL_302;
    }
    uint64_t v190 = 0;
    int v191 = 0;
    v192 = v386;
    while (1)
    {
      uint64_t v193 = [v192 objectAtIndexedSubscript:v190];
      v194 = (void *)v193;
      if (v193)
      {
        if (*(unsigned char *)(v193 + 16))
        {
          if (v191 > v154) {
            goto LABEL_291;
          }
          goto LABEL_294;
        }
        v195 = *(void **)(v193 + 24);
      }
      else
      {
        v195 = 0;
      }
      id v196 = v195;
      uint64_t v197 = [v196 section];

      if (v197 != v160)
      {
        if (v191 > v154)
        {
          if (v194) {
LABEL_291:
          }
            v198 = (void *)v194[3];
          else {
            v198 = 0;
          }
          id v199 = v198;
          int v200 = [v199 isEqual:v159];

          if (v200) {
            [v386 removeObjectAtIndex:v190];
          }
        }
LABEL_294:
        ++v191;
        goto LABEL_295;
      }
      [v386 removeObjectAtIndex:v190];
      v154 -= v191 < v154;
LABEL_295:

      uint64_t v190 = v191;
      v192 = v386;
      if ([v386 count] <= (unint64_t)v191) {
        goto LABEL_300;
      }
    }
  }
LABEL_312:
  if ([v93 count])
  {
    v208 = 0;
    do
    {
      uint64_t v209 = [v93 objectAtIndexedSubscript:v208];
      uint64_t v210 = v209;
      v211 = v208;
      if (v209) {
        v212 = *(void **)(v209 + 24);
      }
      else {
        v212 = 0;
      }
      id v213 = v212;
      v214 = -[UIRowMoveUpdateItem newIndexPath]((id *)v210);
      v380 = (void *)[v213 section];
      uint64_t v215 = [v213 row];
      uint64_t v383 = [v214 section];
      uint64_t v216 = [v214 row];
      v368 = (void *)v210;
      if (v210) {
        int v217 = *(unsigned char *)(v210 + 16) & 1;
      }
      else {
        int v217 = 0;
      }
      uint64_t v218 = (uint64_t)v358;
      if (v358)
      {
        uint64_t v219 = v358[8];
        if (v217) {
          goto LABEL_320;
        }
      }
      else
      {
        uint64_t v219 = 0;
        if (v217)
        {
LABEL_320:
          if ((uint64_t)v380 >= v219)
          {
            v225 = [MEMORY[0x1E4F28B00] currentHandler];
            v226 = v225;
            v227 = v358;
            if (v358) {
              v227 = (void *)v358[8];
            }
            [v225 handleFailureInMethod:a2, self, @"UITableView.m", 2322, @"attempt to move section %ld, but there are only %ld sections before the update", v380, v227 object file lineNumber description];
          }
          v220 = self->_rowData;
          if (v220) {
            v220 = (UITableViewRowData *)v220->_numSections;
          }
          v221 = v211;
          if (v383 >= (uint64_t)v220)
          {
            v222 = [MEMORY[0x1E4F28B00] currentHandler];
            v223 = v222;
            v224 = self->_rowData;
            if (v224) {
              v224 = (UITableViewRowData *)v224->_numSections;
            }
            [v222 handleFailureInMethod:a2, self, @"UITableView.m", 2323, @"attempt to to move section %ld to section %ld, but there are only %ld sections after the update", v380, v383, v224, v349 object file lineNumber description];
            goto LABEL_374;
          }
          goto LABEL_340;
        }
      }
      uint64_t v228 = (uint64_t)v380;
      if ((uint64_t)v380 >= v219)
      {
        v248 = [MEMORY[0x1E4F28B00] currentHandler];
        v249 = v248;
        v250 = v358;
        if (v358) {
          v250 = (void *)v358[8];
        }
        [v248 handleFailureInMethod:a2, self, @"UITableView.m", 2326, @"attempt to move index path (%@) from a section that does not exist - there are only %ld sections before the update", v213, v250 object file lineNumber description];

        uint64_t v218 = (uint64_t)v358;
        uint64_t v228 = (uint64_t)v380;
      }
      if (v215 >= -[UITableViewRowData numberOfRowsInSection:](v218, v228))
      {
        v251 = [MEMORY[0x1E4F28B00] currentHandler];
        [v251 handleFailureInMethod:a2, self, @"UITableView.m", 2327, @"attempt to move index path (%@) that does not exist - there are only %ld rows in section %ld before the update", v213, -[UITableViewRowData numberOfRowsInSection:]((uint64_t)v358, (uint64_t)v380), v380 object file lineNumber description];
      }
      v229 = self->_rowData;
      if (v229) {
        int64_t v230 = v229->_numSections;
      }
      else {
        int64_t v230 = 0;
      }
      v221 = v211;
      uint64_t v231 = v383;
      if (v383 >= v230)
      {
        v252 = [MEMORY[0x1E4F28B00] currentHandler];
        v253 = v252;
        v254 = self->_rowData;
        if (v254) {
          v254 = (UITableViewRowData *)v254->_numSections;
        }
        [v252 handleFailureInMethod:a2, self, @"UITableView.m", 2328, @"attempt to move index path (%@) to index path (%@) in section that does not exist - there are only %ld sections after the update", v213, v214, v254 object file lineNumber description];

        v229 = self->_rowData;
        v221 = v211;
        uint64_t v231 = v383;
      }
      if (v216 >= -[UITableViewRowData numberOfRowsInSection:]((uint64_t)v229, v231))
      {
        v223 = [MEMORY[0x1E4F28B00] currentHandler];
        [v223 handleFailureInMethod:a2, self, @"UITableView.m", 2329, @"attempt to move index path (%@) to index path (%@) that does not exist - there are only %ld rows in section %ld after the update", v213, v214, -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, v383), v383 object file lineNumber description];
LABEL_374:

        v221 = v211;
      }
LABEL_340:
      v232 = v221 + 1;
      int v233 = (int)v232;
      if ([v375 countForObject:v213] == 1)
      {
        int v233 = (int)v232;
        if ([v366 countForObject:v214] == 1) {
          int v233 = [v93 count];
        }
      }
      v371 = v232;
      if ([v93 count] > (unint64_t)v233)
      {
        uint64_t v234 = v233;
        int v235 = v233;
        while (1)
        {
          uint64_t v236 = [v93 objectAtIndex:v234];
          v237 = (id *)v236;
          v238 = v236 ? *(void **)(v236 + 24) : 0;
          id v239 = v238;
          v240 = -[UIRowMoveUpdateItem newIndexPath](v237);
          int v241 = [v213 isEqual:v239];
          int v242 = [v214 isEqual:v240];
          if (!v241) {
            break;
          }
          if (!v242)
          {
            v245 = [MEMORY[0x1E4F28B00] currentHandler];
            v244 = v245;
            if (v217) {
              objc_msgSend(v245, "handleFailureInMethod:object:file:lineNumber:description:", a2, v376, @"UITableView.m", 2347, @"attempt to move section %ld to both section %ld and section %ld", v380, v383, objc_msgSend(v240, "section"));
            }
            else {
              [v245 handleFailureInMethod:a2, v376, @"UITableView.m", 2350, @"attempt to move row at index path %@ to both %@ and %@", v213, v214, v240 object file lineNumber description];
            }
            goto LABEL_357;
          }
          [v93 removeObjectAtIndex:v234];
LABEL_359:

          uint64_t v234 = v235;
          if ([v93 count] <= (unint64_t)v235) {
            goto LABEL_362;
          }
        }
        if (v242)
        {
          v243 = [MEMORY[0x1E4F28B00] currentHandler];
          v244 = v243;
          if (v217) {
            objc_msgSend(v243, "handleFailureInMethod:object:file:lineNumber:description:", a2, v376, @"UITableView.m", 2356, @"attempt to move both section %ld and section %ld to section %ld", objc_msgSend(v213, "section"), objc_msgSend(v239, "section"), v383);
          }
          else {
            [v243 handleFailureInMethod:a2, v376, @"UITableView.m", 2359, @"attempt to move both row at index path %@ and %@ to %@", v213, v239, v214 object file lineNumber description];
          }
LABEL_357:
        }
        ++v235;
        goto LABEL_359;
      }
LABEL_362:
      self = v376;
      v246 = [(UITableView *)v376 _swipeActionController];
      v247 = v246;
      if (v217) {
        [v246 moveSectionAtIndex:v380 toIndex:v383];
      }
      else {
        [v246 moveRowAtIndexPath:v213 toIndexPath:v214];
      }

      v208 = v371;
    }
    while ([v93 count] > (unint64_t)v371);
  }
  if (self->_swipedIndexPath)
  {
    v255 = [(UITableView *)self _swipeActionController];
    v256 = [v255 swipedIndexPath];

    if (v256) {
      objc_storeStrong((id *)&self->_swipedIndexPath, v256);
    }
  }
  if (v358)
  {
    int64_t v257 = v358[8];
    v258 = malloc_type_malloc(8 * v257, 0x100004000313F17uLL);
    if (v257 >= 1)
    {
      for (iunint64_t i = 0; ii != v257; ++ii)
        v258[ii] = -[UITableViewRowData numberOfRowsInSection:]((uint64_t)v358, ii);
    }
  }
  else
  {
    v258 = malloc_type_malloc(0, 0x100004000313F17uLL);
    int64_t v257 = 0;
  }
  v260 = self->_rowData;
  if (v260) {
    size_t v261 = v260->_numSections;
  }
  else {
    size_t v261 = 0;
  }
  uint64_t v384 = v261;
  v364 = v258;
  if (v360)
  {
    long long v407 = 0u;
    long long v408 = 0u;
    long long v405 = 0u;
    long long v406 = 0u;
    id v262 = v390;
    uint64_t v263 = [v262 countByEnumeratingWithState:&v405 objects:v438 count:16];
    if (v263)
    {
      uint64_t v264 = v263;
      uint64_t v265 = 0;
      uint64_t v266 = *(void *)v406;
      int64_t v267 = v257;
      v268 = v386;
      do
      {
        for (jint j = 0; jj != v264; ++jj)
        {
          if (*(void *)v406 != v266) {
            objc_enumerationMutation(v262);
          }
          uint64_t v270 = *(void *)(*((void *)&v405 + 1) + 8 * jj);
          if (v270 && (*(unsigned char *)(v270 + 16) & 3) == 1)
          {
            ++v265;
            --v267;
          }
        }
        uint64_t v264 = [v262 countByEnumeratingWithState:&v405 objects:v438 count:16];
      }
      while (v264);
    }
    else
    {
      uint64_t v265 = 0;
      int64_t v267 = v257;
      v268 = v386;
    }

    long long v403 = 0u;
    long long v404 = 0u;
    long long v401 = 0u;
    long long v402 = 0u;
    id v272 = v268;
    uint64_t v273 = [v272 countByEnumeratingWithState:&v401 objects:v437 count:16];
    if (v273)
    {
      uint64_t v274 = v273;
      uint64_t v275 = 0;
      uint64_t v276 = *(void *)v402;
      do
      {
        for (kuint64_t k = 0; kk != v274; ++kk)
        {
          if (*(void *)v402 != v276) {
            objc_enumerationMutation(v272);
          }
          uint64_t v278 = *(void *)(*((void *)&v401 + 1) + 8 * kk);
          if (v278 && (*(unsigned char *)(v278 + 16) & 3) == 1)
          {
            ++v275;
            ++v267;
          }
        }
        uint64_t v274 = [v272 countByEnumeratingWithState:&v401 objects:v437 count:16];
      }
      while (v274);
    }
    else
    {
      uint64_t v275 = 0;
    }

    if (v267 == v384)
    {
      v279 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v378, "count") + objc_msgSend(v262, "count") + objc_msgSend(v272, "count"));
      [v279 addObjectsFromArray:v262];
      [v279 addObjectsFromArray:v378];
      [v279 addObjectsFromArray:v272];
      id v280 = v279;
      v281 = [_UITableViewUpdateSupport alloc];
      self = v376;
      v282 = v376->_rowData;
      v283 = -[UITableViewRowData numberOfRows]((uint64_t)v358);
      v284 = -[UITableViewRowData numberOfRows]((uint64_t)v376->_rowData);
      v286 = -[_UITableViewUpdateSupport initWithTableView:updateItems:oldRowData:newRowData:oldRowRange:newRowRange:context:](v281, v376, v280, v358, v282, 0, v283, v285, 0, v284, v355);
      currentUpdate = v376->_currentUpdate;
      v376->_currentUpdate = (_UITableViewUpdateSupport *)v286;

      v288 = v376->_currentUpdate;
      if (v288 && v288->_updateMaps.updatesAreInvalid)
      {
        v289 = NSString;
        v290 = v288->_invalidUpdatesErrorMessage;
        v291 = [v289 stringWithFormat:@"%@\nTable view: %@", v290, v376];

        if ((*((unsigned char *)v357 + 27) & 0x20) != 0)
        {
          if (os_variant_has_internal_diagnostics())
          {
            v348 = __UIFaultDebugAssertLog();
            if (os_log_type_enabled(v348, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              id v436 = v291;
              _os_log_fault_impl(&dword_1853B0000, v348, OS_LOG_TYPE_FAULT, "Performing reloadData as a fallback — %@", buf, 0xCu);
            }

            char v359 = 1;
            self = v376;
            char v93 = v378;
            size_t v261 = v384;
          }
          else
          {
            v296 = *(id *)(__UILogGetCategoryCachedImpl("Assert", (unint64_t *)&unk_1E8FDF3D0)+ 8);
            char v93 = v378;
            size_t v261 = v384;
            if (os_log_type_enabled(v296, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              id v436 = v291;
              _os_log_impl(&dword_1853B0000, v296, OS_LOG_TYPE_ERROR, "Performing reloadData as a fallback — %@", buf, 0xCu);
            }

            char v359 = 1;
          }
        }
        else
        {
          [(UITableView *)v376 _Bug_Detected_In_Client_Of_UITableView_Invalid_Batch_Updates:v291];
          char v93 = v378;
          size_t v261 = v384;
        }

        int v362 = 0;
        v271 = v280;
      }
      else
      {
        int v362 = 1;
        v271 = v280;
        char v93 = v378;
        size_t v261 = v384;
      }
    }
    else
    {
      size_t v261 = v384;
      self = v376;
      id v280 = [NSString stringWithFormat:@"Invalid update: invalid number of sections. The number of sections contained in the table view after the update (%lu) must be equal to the number of sections contained in the table view before the update (%lu), plus or minus the number of sections inserted or deleted (%lu inserted, %lu deleted). Table view: %@", v384, v257, v275, v265, v376];
      if ((*((unsigned char *)v357 + 27) & 0x20) != 0)
      {
        v292 = [(UITableView *)v376 _diffableDataSourceImpl];
        uint64_t v293 = [v292 currentTransaction];
        v294 = (void *)v293;
        if (v292)
        {
          char v93 = v378;
          if (v293)
          {
            uint64_t v295 = [v280 stringByAppendingFormat:@"; Diffable transaction: %@", v293];

            id v280 = (id)v295;
          }
        }
        else
        {
          char v93 = v378;
        }
        v297 = *(id *)(__UILogGetCategoryCachedImpl("TableView", (unint64_t *)&unk_1E8FDF3C8)+ 8);
        if (os_log_type_enabled(v297, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v436 = v280;
          _os_log_impl(&dword_1853B0000, v297, OS_LOG_TYPE_ERROR, "Performing reloadData as a fallback — %@", buf, 0xCu);
        }

        v271 = 0;
        int v362 = 0;
        char v359 = 1;
      }
      else
      {
        [(UITableView *)v376 _Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Sections:v280];
        v271 = 0;
        int v362 = 0;
        char v93 = v378;
      }
    }
  }
  else
  {
    v271 = 0;
    int v362 = 0;
  }
  v381 = malloc_type_calloc(8uLL, v261, 0xAA00287AuLL);
  v377 = malloc_type_calloc(8uLL, v257, 0x57F839F2uLL);
  v372 = malloc_type_calloc(8uLL, v261, 0x111DE163uLL);
  int64_t v298 = v257;
  v369 = malloc_type_calloc(8uLL, v257, 0xB0F7CB44uLL);
  long long v397 = 0u;
  long long v398 = 0u;
  long long v399 = 0u;
  long long v400 = 0u;
  id v299 = v271;
  uint64_t v300 = [v299 countByEnumeratingWithState:&v397 objects:v434 count:16];
  if (v300)
  {
    uint64_t v301 = v300;
    uint64_t v302 = *(void *)v398;
    do
    {
      uint64_t v303 = 0;
      do
      {
        if (*(void *)v398 != v302) {
          objc_enumerationMutation(v299);
        }
        uint64_t v304 = *(void *)(*((void *)&v397 + 1) + 8 * v303);
        if (v304)
        {
          if (*(unsigned char *)(v304 + 16)) {
            goto LABEL_453;
          }
          v305 = *(void **)(v304 + 24);
        }
        else
        {
          v305 = 0;
        }
        id v306 = v305;
        int64_t v307 = [v306 section];

        if (!v304) {
          goto LABEL_445;
        }
        int v308 = *(_DWORD *)(v304 + 20);
        if (v308 != 3)
        {
          if (v308 == 1)
          {
            if (v307 >= v298)
            {
              v314 = [MEMORY[0x1E4F28B00] currentHandler];
              [v314 handleFailureInMethod:a2, self, @"UITableView.m", 2475, @"UITableView internal inconsistency: encountered out of bounds section index while validating delete updates (section=%ld, oldSectionCount=%ld)", v307, v298 object file lineNumber description];
            }
            v309 = v377;
          }
          else
          {
            if (v308) {
              goto LABEL_453;
            }
LABEL_445:
            if (v307 >= v384)
            {
              v313 = [MEMORY[0x1E4F28B00] currentHandler];
              [v313 handleFailureInMethod:a2, self, @"UITableView.m", 2471, @"UITableView internal inconsistency: encountered out of bounds section index while validating insert updates (section=%ld, newSectionCount=%ld)", v307, v384 object file lineNumber description];
            }
            v309 = v381;
          }
          v310 = &v309[v307];
LABEL_452:
          ++*v310;
          goto LABEL_453;
        }
        v311 = -[UIRowMoveUpdateItem newIndexPath]((id *)v304);
        uint64_t v312 = [v311 section];

        if (-[_UITableViewUpdateSupport finalSectionIndexForInitialSectionIndex:]((uint64_t)self->_currentUpdate, v307) != v312)
        {
          if (v307 >= v298)
          {
            v315 = [MEMORY[0x1E4F28B00] currentHandler];
            [v315 handleFailureInMethod:a2, self, @"UITableView.m", 2481, @"UITableView internal inconsistency: encountered out of bounds section index while validating move updates (section=%ld, oldSectionCount=%ld)", v307, v298 object file lineNumber description];
          }
          if (v312 >= v384)
          {
            v316 = [MEMORY[0x1E4F28B00] currentHandler];
            [v316 handleFailureInMethod:a2, self, @"UITableView.m", 2482, @"UITableView internal inconsistency: encountered out of bounds section index while validating move updates (newSection=%ld, newSectionCount=%ld)", v312, v384 object file lineNumber description];
          }
          ++v369[v307];
          v310 = &v372[v312];
          goto LABEL_452;
        }
LABEL_453:
        ++v303;
      }
      while (v301 != v303);
      uint64_t v317 = [v299 countByEnumeratingWithState:&v397 objects:v434 count:16];
      uint64_t v301 = v317;
    }
    while (v317);
  }

  char v318 = v362;
  if (v384 > 0) {
    int v319 = v362;
  }
  else {
    int v319 = 0;
  }
  if (v319 != 1)
  {
    id v10 = v353;
    p_uint64_t tableFlags = v357;
    uint64_t v8 = v350;
    v321 = v364;
    goto LABEL_485;
  }
  unint64_t v320 = 0;
  id v10 = v353;
  v321 = v364;
  while (1)
  {
    uint64_t v322 = -[_UITableViewUpdateSupport initialSectionIndexForFinalSectionIndex:]((uint64_t)self->_currentUpdate, v320);
    if (v322 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_471;
    }
    uint64_t v323 = v322;
    uint64_t v324 = *((void *)v364 + v322);
    uint64_t v325 = -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, v320);
    if (v325 < 0) {
      break;
    }
    uint64_t v326 = v372[v320];
    uint64_t v327 = v377[v323];
    uint64_t v328 = v381[v320];
    if (v325 != v324 + v326 - (v369[v323] + v327) + v328)
    {
      v329 = [NSString stringWithFormat:@"Invalid update: invalid number of rows in section %lu. The number of rows contained in an existing section after the update (%lu) must be equal to the number of rows contained in that section before the update (%lu), plus or minus the number of rows inserted or deleted from that section (%lu inserted, %lu deleted) and plus or minus the number of rows moved into or out of that section (%lu moved in, %lu moved out). Table view: %@", v320, v325, v324, v328, v327, v326, v369[v323], self];
      p_uint64_t tableFlags = v357;
      if ((*((unsigned char *)v357 + 27) & 0x20) == 0)
      {
        [(UITableView *)self _Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Rows_In_Section:v329];
        uint64_t v8 = v350;
        char v93 = v378;
        goto LABEL_484;
      }
      v330 = *(id *)(__UILogGetCategoryCachedImpl("TableView", (unint64_t *)&unk_1E8FDF3E0)+ 8);
      uint64_t v8 = v350;
      char v93 = v378;
      if (os_log_type_enabled(v330, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v436 = v329;
        goto LABEL_482;
      }
      goto LABEL_483;
    }
LABEL_471:
    if (v384 == ++v320)
    {
      char v318 = 1;
      p_uint64_t tableFlags = v357;
      uint64_t v8 = v350;
      char v93 = v378;
      goto LABEL_485;
    }
  }
  v329 = [NSString stringWithFormat:@"Invalid update: invalid number of rows in section %lu. Attempt to delete more rows than exist in section. Table view: %@", v323, self];
  p_uint64_t tableFlags = v357;
  char v93 = v378;
  if ((*((unsigned char *)v357 + 27) & 0x20) == 0)
  {
    [(UITableView *)self _Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Rows_In_Section:v329];
    uint64_t v8 = v350;
    goto LABEL_484;
  }
  v330 = objc_retain(*(id *)(__UILogGetCategoryCachedImpl("TableView", (unint64_t *)&unk_1E8FDF3D8)
                                       + 8));
  uint64_t v8 = v350;
  if (os_log_type_enabled(v330, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    id v436 = v329;
LABEL_482:
    _os_log_impl(&dword_1853B0000, v330, OS_LOG_TYPE_ERROR, "Performing reloadData as a fallback — %@", buf, 0xCu);
  }
LABEL_483:

  char v359 = 1;
LABEL_484:

  char v318 = 0;
LABEL_485:
  free(v321);
  free(v381);
  free(v377);
  free(v372);
  free(v369);
  if (v318)
  {
    objc_storeStrong((id *)&self->_currentUpdate->_ignoringDragsToken, v356);
    p_uint64_t tableFlags = v357;
    [(UITableView *)self _updateWithItems:v299 updateSupport:self->_currentUpdate];
  }
  else if (v359)
  {
    v331 = _Block_copy(self->_updateCompletionHandler);
    id updateCompletionHandler = self->_updateCompletionHandler;
    self->_id updateCompletionHandler = 0;

    [(UITableView *)self reloadData];
    if (v331)
    {
      v333 = MEMORY[0x1E4F14428];
      id v334 = MEMORY[0x1E4F14428];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __45__UITableView__endCellAnimationsWithContext___block_invoke;
      block[3] = &unk_1E52DA040;
      id v396 = v331;
      dispatch_async(v333, block);
    }
    p_uint64_t tableFlags = v357;
  }
  v335 = self->_currentUpdate;
  self->_currentUpdate = 0;

  [(UITableView *)self _numberOfRowsDidChange];
LABEL_492:
  [(UITableView *)self _endSuspendingUpdates];
  [(UITableView *)self _resetUpdateItemArrays];
  BOOL v336 = [(UITableView *)self _shouldRestorePreReloadScrollPositionWithFirstVisibleIndexPath:v10 scrolledToTop:v8];
  uint64_t v337 = *((void *)p_tableFlags + 3);
  if (v336)
  {
    v337 |= 4uLL;
    *((void *)p_tableFlags + 2) = *((void *)p_tableFlags + 2);
    *((void *)p_tableFlags + 3) = v337;
  }
  if ((v337 & 0x100000000) == 0) {
    [(UITableView *)self _reapTentativeViews];
  }
  [(UITableView *)self _adjustExtraSeparators];
  [(UITableView *)self _resumeReloads];
  -[_UITableViewPrefetchContext cancelWithNewMaxIndex:]((uint64_t)self->_prefetchContext, [(UITableView *)self _lastGlobalRowIndex]);
  if ((*((unsigned char *)v357 + 25) & 2) != 0)
  {
    -[UITableView _updateFocusedCellIndexPathIfNecessaryWithLastFocusedRect:](self, "_updateFocusedCellIndexPathIfNecessaryWithLastFocusedRect:", v12, v13, v14, v15);
    [(UITableView *)self _updateVisibleCellsImmediatelyIfNecessary];
    [(UITableView *)self _updateContentSize];
    [(UIView *)self setNeedsFocusUpdate];
    [(UIView *)self updateFocusIfNeeded];
    *((void *)v357 + 3) &= ~0x200uLL;
  }
  long long v393 = 0u;
  long long v394 = 0u;
  long long v391 = 0u;
  long long v392 = 0u;
  v338 = (void *)[(NSMutableArray *)self->_selectedIndexPaths copy];
  uint64_t v339 = [v338 countByEnumeratingWithState:&v391 objects:v433 count:16];
  if (v339)
  {
    uint64_t v340 = v339;
    uint64_t v341 = *(void *)v392;
    do
    {
      for (mint m = 0; mm != v340; ++mm)
      {
        if (*(void *)v392 != v341) {
          objc_enumerationMutation(v338);
        }
        v343 = [(UITableView *)self _existingCellForRowAtIndexPath:*(void *)(*((void *)&v391 + 1) + 8 * mm)];
        [v343 _updateShowingSelectedBackground];
      }
      uint64_t v340 = [v338 countByEnumeratingWithState:&v391 objects:v433 count:16];
    }
    while (v340);
  }

  _UIRestorePreviousFallbackEnvironment(v354);
  unint64_t v344 = __UILogGetCategoryCachedImpl("TableView", (unint64_t *)&unk_1E8FDF3E8);
  v345 = *(id *)(v344 + 8);
  os_signpost_id_t v346 = os_signpost_id_make_with_pointer(*(os_log_t *)(v344 + 8), self);
  if (v346 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v347 = v346;
    if (os_signpost_enabled(v345))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1853B0000, v345, OS_SIGNPOST_INTERVAL_END, v347, "BatchUpdates", "", buf, 2u);
    }
  }
}

- (id)_indexPathsForRowsInRect:(CGRect)a3 usingPresentationValues:(BOOL)a4
{
  os_signpost_id_t v6 = -[UITableViewRowData indexPathsForRowsInRect:]((double *)self->_rowData, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  if (!a4)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v8 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathsBeforeShadowUpdates:v6];

      os_signpost_id_t v6 = (void *)v8;
    }
  }
  return v6;
}

- (id)_swipeActionController
{
  return self->_swipeActionController;
}

- (id)_arrayForUpdateAction:(int)a3
{
  switch(a3)
  {
    case 0:
      uint64_t v4 = 2536;
      goto LABEL_9;
    case 1:
      uint64_t v4 = 2544;
      goto LABEL_9;
    case 2:
      uint64_t v4 = 2552;
      goto LABEL_9;
    case 3:
      uint64_t v4 = 2560;
LABEL_9:
      os_signpost_id_t v7 = (void **)((char *)&self->super.super.super.super.isa + v4);
      uint64_t v8 = *(Class *)((char *)&self->super.super.super.super.isa + v4);
      if (!v8)
      {
        id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        id v10 = *v7;
        *os_signpost_id_t v7 = v9;

        uint64_t v8 = *v7;
      }
      id v5 = v8;
      break;
    default:
      id v5 = 0;
      break;
  }
  return v5;
}

- (id)_sectionsWithSectionOperationsInUpdateItems:(void *)a1
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      a1 = 0;
      uint64_t v7 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * i);
          if (v9 && (*(unsigned char *)(v9 + 16) & 1) != 0)
          {
            id v10 = *(id *)(v9 + 24);
            uint64_t v11 = [v10 section];

            if (a1)
            {
              [a1 addIndex:v11];
            }
            else
            {
              a1 = [MEMORY[0x1E4F28E60] indexSetWithIndex:v11];
            }
          }
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v6);
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

- (void)_storePreReloadStateForRestoringContentOffsetWithFirstVisibleIndexPath:(id)a3
{
  [(UITableView *)self _computeOffsetOfFirstVisibleCellWithIndexPath:a3];
  self->_preReloadFirstCellOffset = v4;
  self->_preReloadVisibleRowRange = self->_visibleRows;
  BOOL v5 = [(UIScrollView *)self isScrollAnimating];
  double v6 = 0.0;
  if (v5)
  {
    [(UIScrollView *)self contentOffset];
    double v8 = v7;
    [(UIScrollView *)self _animatedTargetOffset];
    double v6 = v9 - v8;
  }
  self->_preReloadAnimationTargetOffsetDelta = v6;
}

- (double)_computeOffsetOfFirstVisibleCellWithIndexPath:(id)a3
{
  if (!a3) {
    return 0.0;
  }
  uint64_t v4 = -[UITableViewRowData globalRowForRowAtIndexPath:]((uint64_t)self->_rowData, a3);
  double v5 = -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, v4, 1);
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  [(UITableView *)self _contentInset];
  double v13 = v12;
  [(UIScrollView *)self contentOffset];
  double v15 = v14;
  v17.origin.double x = v5;
  v17.origin.double y = v7;
  v17.size.double width = v9;
  v17.size.double height = v11;
  return v13 + v15 - CGRectGetMinY(v17);
}

- (BOOL)_shouldRestorePreReloadScrollPositionWithFirstVisibleIndexPath:(id)a3 scrolledToTop:(BOOL)a4
{
  BOOL v7 = [(UITableView *)self _estimatesHeights];
  BOOL result = 0;
  if (a3 && v7 && !a4) {
    return self->_preReloadVisibleRowRange.length != 0;
  }
  return result;
}

- (BOOL)_isScrolledToTop
{
  [(UIScrollView *)self contentOffset];
  return [(UITableView *)self _isScrolledToTopAtContentOffsetY:v3];
}

- (BOOL)_isScrolledToTopAtContentOffsetY:(double)a3
{
  [(UITableView *)self _contentInset];
  return v4 + a3 <= 0.001;
}

- (int64_t)_lastGlobalRowIndex
{
  return [(UITableView *)self maximumGlobalRowIndex] - 1;
}

- (int64_t)maximumGlobalRowIndex
{
  return (int64_t)-[UITableViewRowData numberOfRows]((uint64_t)self->_rowData);
}

- (id)_sortedDeduplicatedReloadItems
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = self->_reloadItems;
  double v3 = v2;
  if (v2)
  {
    if ((unint64_t)[(NSMutableArray *)v2 count] > 1)
    {
      double v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", -[NSMutableArray count](v3, "count"));
      double v5 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", -[NSMutableArray count](v3, "count"));
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      double v6 = v3;
      uint64_t v7 = [(NSMutableArray *)v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)v17;
        do
        {
          uint64_t v10 = 0;
          do
          {
            if (*(void *)v17 != v9) {
              objc_enumerationMutation(v6);
            }
            uint64_t v11 = *(void *)(*((void *)&v16 + 1) + 8 * v10);
            if (v11) {
              double v12 = *(void **)(v11 + 24);
            }
            else {
              double v12 = 0;
            }
            id v13 = v12;
            if ((objc_msgSend(v5, "containsObject:", v13, (void)v16) & 1) == 0)
            {
              [v5 addObject:v13];
              objc_msgSend(v4, "insertObject:atIndex:", v11, objc_msgSend(v4, "indexOfObject:inSortedRange:options:usingComparator:", v11, 0, objc_msgSend(v4, "count"), 1024, &__block_literal_global_838));
            }

            ++v10;
          }
          while (v8 != v10);
          uint64_t v14 = [(NSMutableArray *)v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
          uint64_t v8 = v14;
        }
        while (v14);
      }
    }
    else
    {
      double v4 = (void *)[(NSMutableArray *)v3 mutableCopy];
    }
  }
  else
  {
    double v4 = 0;
  }

  return v4;
}

- (void)_resetUpdateItemArrays
{
  insertItems = self->_insertItems;
  self->_insertItems = 0;

  deleteItems = self->_deleteItems;
  self->_deleteItems = 0;

  reloadItems = self->_reloadItems;
  self->_reloadItems = 0;

  moveItems = self->_moveItems;
  self->_moveItems = 0;
}

- (void)_rebaseExistingShadowUpdatesIfNecessaryWithSortedInsertItems:(id)a3 sortedDeleteItems:(id)a4 sortedMoveItems:(id)a5
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if ([(_UITableViewShadowUpdatesController *)self->_shadowUpdatesController hasShadowUpdates]
    && ![(UITableView *)self _isPerformingShadowUpdates]
    && ![(UITableView *)self _isPerformingRevertingShadowUpdates])
  {
    id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    [v11 addObjectsFromArray:v9];
    [v11 addObjectsFromArray:v10];
    id v19 = v8;
    [v11 addObjectsFromArray:v8];
    double v12 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v11, "count"));
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v13 = v11;
    uint64_t v14 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v21;
      do
      {
        uint64_t v17 = 0;
        do
        {
          if (*(void *)v21 != v16) {
            objc_enumerationMutation(v13);
          }
          long long v18 = [*(id *)(*((void *)&v20 + 1) + 8 * v17) collectionViewUpdateItem];
          [v12 addObject:v18];

          ++v17;
        }
        while (v15 != v17);
        uint64_t v15 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v15);
    }

    [(_UITableViewShadowUpdatesController *)self->_shadowUpdatesController rebaseExistingShadowUpdatesForUpdates:v12];
    id v8 = v19;
  }
}

- (void)setDirectionalLayoutMargins:(NSDirectionalEdgeInsets)a3
{
  double trailing = a3.trailing;
  double bottom = a3.bottom;
  double leading = a3.leading;
  double top = a3.top;
  [(UIView *)self _rawLayoutMargins];
  int v12 = *((_DWORD *)&self->super.super._viewFlags + 4);
  if ((v12 & 0x80000) != 0) {
    double v13 = v11;
  }
  else {
    double v13 = v9;
  }
  if ((*(void *)&v12 & 0x80000) == 0) {
    double v9 = v11;
  }
  if (leading != v13 || top != v8 || trailing != v9 || bottom != v10)
  {
    [(UIView *)self layoutMargins];
    double v18 = v17;
    double v20 = v19;
    *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFFFDFLL | (32 * ((*((void *)&self->_tableFlags + 3) & 0x60) != 64));
    v23.receiver = self;
    v23.super_class = (Class)UITableView;
    -[UIView setDirectionalLayoutMargins:](&v23, sel_setDirectionalLayoutMargins_, top, leading, bottom, trailing);
    [(UIView *)self layoutMargins];
    if (v18 != v22 || v20 != v21) {
      [(UITableView *)self _rebuildGeometryWithCompatibility];
    }
  }
}

- (void)setContentInset:(UIEdgeInsets)a3
{
  double right = a3.right;
  double bottom = a3.bottom;
  double left = a3.left;
  double top = a3.top;
  [(UIScrollView *)self contentInset];
  if (left == v11 && top == v8 && right == v10)
  {
    double v14 = v9;
    v15.receiver = self;
    v15.super_class = (Class)UITableView;
    -[UIScrollView setContentInset:](&v15, sel_setContentInset_, top, left, bottom, right);
    if (bottom == v14) {
      return;
    }
  }
  else
  {
    v15.receiver = self;
    v15.super_class = (Class)UITableView;
    -[UIScrollView setContentInset:](&v15, sel_setContentInset_, top, left, bottom, right);
  }
  [(UITableView *)self _updateForChangeInEffectiveContentInset];
}

- (void)_updateForChangeInEffectiveContentInset
{
  if ((*((unsigned char *)&self->_tableFlags + 19) & 1) == 0) {
    [(UITableView *)self _setNeedsIndexBarInsetsUpdate];
  }
  [(UITableView *)self _updateContentSize];
  [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:0];
}

- (void)_endAnimatingCells
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  double v3 = [(UITableView *)self _preparedCells];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v8 + 1) + 8 * v7++) _setAnimating:0];
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }

  [(UIView *)self->_clearBlendingView removeFromSuperview];
}

+ (void)_initializeForIdiom:(int64_t)a3
{
  if ((id)objc_opt_class() == a1)
  {
    uint64_t v5 = (void *)__initializedIdioms;
    if (!__initializedIdioms)
    {
      id v6 = objc_alloc_init(MEMORY[0x1E4F28E60]);
      uint64_t v7 = (void *)__initializedIdioms;
      __initializedIdioms = (uint64_t)v6;

      uint64_t v5 = (void *)__initializedIdioms;
    }
    if (([v5 containsIndex:a3] & 1) == 0)
    {
      [a1 _setupIdiom:a3 forTableViewStyle:0 includingBackground:1];
      [a1 _setupIdiom:a3 forTableViewStyle:1 includingBackground:1];
      [a1 _setupIdiom:a3 forTableViewStyle:2 includingBackground:1];
      long long v8 = (void *)__initializedIdioms;
      [v8 addIndex:a3];
    }
  }
}

+ (void)_setupIdiom:(int64_t)a3 forTableViewStyle:(int64_t)a4 includingBackground:(BOOL)a5
{
  v22[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = +[UITraitCollection traitCollectionWithUserInterfaceIdiom:](UITraitCollection, "traitCollectionWithUserInterfaceIdiom:");
  v22[0] = _UIAppearanceContainerForUserInterfaceIdiom();
  long long v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v22 count:1];
  double v20 = @"_styleForAppearance";
  long long v9 = [NSNumber numberWithInteger:a4];
  double v21 = v9;
  long long v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v21 forKeys:&v20 count:1];
  long long v11 = +[UIView appearanceMatchingProperties:v10 whenContainedInInstancesOfClasses:v8];

  int v12 = _UITableConstantsForTraitCollection(v7);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = __65__UITableView__setupIdiom_forTableViewStyle_includingBackground___block_invoke;
  v15[3] = &unk_1E52E89B8;
  BOOL v19 = a5;
  id v16 = v11;
  id v17 = v12;
  int64_t v18 = a4;
  id v13 = v12;
  id v14 = v11;
  +[UIView _performSystemAppearanceModifications:v15];
}

- (void)_safeAreaInsetsDidChangeFromOldInsets:(UIEdgeInsets)a3
{
  double right = a3.right;
  double bottom = a3.bottom;
  double left = a3.left;
  double top = a3.top;
  [(UIView *)self safeAreaInsets];
  if (left != v9 || right != v8)
  {
    [(UITableView *)self _rebuildGeometry];
    [(UISwipeActionController *)self->_swipeActionController updateLayout];
  }
  [(UITableView *)self _setNeedsIndexBarInsetsUpdate];
  v11.receiver = self;
  v11.super_class = (Class)UITableView;
  -[UIView _safeAreaInsetsDidChangeFromOldInsets:](&v11, sel__safeAreaInsetsDidChangeFromOldInsets_, top, left, bottom, right);
}

- (void)_setupTableViewCommon
{
  v63[2] = *MEMORY[0x1E4F143B8];
  p_uint64_t tableFlags = &self->_tableFlags;
  if ((*((void *)&self->_tableFlags + 1) & 0x600000000000) == 0x400000000000)
  {
    uint64_t v4 = (char *)&self->_tableFlags + 16;
    *((void *)&self->_tableFlags + 3) |= 0x4000uLL;
  }
  else
  {
    uint64_t v5 = [(UIView *)self traitCollection];
    uint64_t v4 = (char *)p_tableFlags + 16;
    *((void *)p_tableFlags + 3) = *((void *)p_tableFlags + 3) & 0xFFFFFFFFFFFFBFFFLL | ((unint64_t)([v5 userInterfaceIdiom] == 6) << 14);
  }
  [(UITableView *)self _setUpContentFocusContainerGuide];
  [(UITableView *)self _removeTableViewGestureRecognizers];
  id v6 = (_UITableViewSubviewManager *)-[_UITableViewSubviewManager initWithTableView:]([_UITableViewSubviewManager alloc], self);
  subviewManager = self->_subviewManager;
  self->_subviewManager = v6;

  double v8 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  visibleCells = self->_visibleCells;
  self->_visibleCells = v8;

  long long v10 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  visibleHeaderViews = self->_visibleHeaderViews;
  self->_visibleHeaderViews = v10;

  int v12 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
  visibleFooterViews = self->_visibleFooterViews;
  self->_visibleFooterViews = v12;

  id v14 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  highlightedIndexPaths = self->_highlightedIndexPaths;
  self->_highlightedIndexPaths = v14;

  id v16 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  selectedIndexPaths = self->_selectedIndexPaths;
  self->_selectedIndexPaths = v16;

  *((void *)p_tableFlags + 1) |= 0x200000000000000uLL;
  *((void *)p_tableFlags + 3) |= 0x20000uLL;
  BOOL v18 = [(UIScrollView *)self showsHorizontalScrollIndicator];
  uint64_t v19 = 0x2000000;
  if (!v18) {
    uint64_t v19 = 0;
  }
  *((void *)p_tableFlags + 2) = *((void *)p_tableFlags + 2) & 0xFFFFFFFFFDFFFFFFLL | v19;
  BOOL v20 = [(UIScrollView *)self showsVerticalScrollIndicator];
  uint64_t v21 = 0x4000000;
  if (!v20) {
    uint64_t v21 = 0;
  }
  *((void *)p_tableFlags + 2) = *((void *)p_tableFlags + 2) & 0xFFFFFFFFFBFFFFFFLL | v21;
  self->_sectionIndexMinimumDisplayRowCount = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&self->_sectionContentInset.double top = _Q0;
  *(_OWORD *)&self->_sectionContentInset.double bottom = _Q0;
  self->_sectionCornerRadius = -1.0;
  self->_topPadding = -1.0;
  self->_bottomPadding = -1.0;
  self->_sectionHeaderTopPadding = -1.0;
  *((void *)p_tableFlags + 2) |= 0x2000000000000uLL;
  *(_OWORD *)&self->_separatorInset.double top = _Q0;
  *(_OWORD *)&self->_separatorInset.double bottom = _Q0;
  long long v27 = [(UIView *)self traitCollection];
  if ([v27 userInterfaceIdiom] == 6 && (*((unsigned char *)p_tableFlags + 13) & 0x60) == 0) {
    uint64_t v28 = _UISupportsVisionDefaultContentHuggingSectionHeaders();
  }
  else {
    uint64_t v28 = 0;
  }

  [(UITableView *)self _setSupplementarySectionHeadersHugContent:v28];
  if (dyld_program_sdk_at_least()) {
    uint64_t v29 = dyld_program_sdk_at_least() ^ 1;
  }
  else {
    uint64_t v29 = 0;
  }
  [(UITableView *)self setCellLayoutMarginsFollowReadableWidth:v29];
  *((void *)v4 + 1) |= 0x2000000uLL;
  [(UITableView *)self _setSeparatorInsetIsRelativeToCellEdges:dyld_program_sdk_at_least()];
  int v30 = dyld_program_sdk_at_least();
  uint64_t v31 = 0x2000000000;
  if (!v30) {
    uint64_t v31 = 0;
  }
  *((void *)v4 + 1) = *((void *)v4 + 1) & 0xFFFFFFDFFFFFFFFFLL | v31;
  int v32 = _UISupportsIntrinsicContentSizeInvalidation();
  uint64_t v33 = 0x8000000000;
  if (!v32) {
    uint64_t v33 = 0;
  }
  *((void *)v4 + 1) = *((void *)v4 + 1) & 0xFFFFFE7FFFFFFFFFLL | v33;
  [(UITableView *)self _updateWrapperView];
  int v34 = [(UIView *)self traitCollection];
  uint64_t v35 = +[UISwipeActionVisualStyleProvider visualStyleForIdiom:](UISwipeActionVisualStyleProvider, "visualStyleForIdiom:", [v34 userInterfaceIdiom]);

  id v36 = -[UISwipeActionController initWithSwipeActionHost:style:]([UISwipeActionController alloc], "initWithSwipeActionHost:style:", self, objc_msgSend(v35, "defaultSwipeActionUIStyleForUITableViewStyle:", -[UITableView style](self, "style")));
  swipeActionController = self->_swipeActionController;
  self->_swipeActionController = v36;

  uint64_t v38 = [(UITableView *)self _resolvedTableConstants];
  constants = self->_constants;
  self->_constants = v38;

  [(UITableView *)self _defaultFillerRowHeight];
  -[UITableView setFillerRowHeight:](self, "setFillerRowHeight:");
  uint64_t v40 = +[_UIDragSnappingFeedbackGeneratorConfiguration defaultConfiguration];
  uint64_t v41 = [v40 tweakedConfigurationForClass:objc_opt_class() usage:@"reorder"];

  __int16 v42 = [(UIFeedbackGenerator *)[_UIDragSnappingFeedbackGenerator alloc] initWithConfiguration:v41 view:self];
  reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
  self->_reorderFeedbackGenerator = v42;

  uint64_t v44 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v44 addObserver:self selector:sel__languageChanged name:0x1ED15CFE0 object:UIApp];
  [v44 addObserver:self selector:sel__darkenedSystemColorsChanged name:@"UIAccessibilityDarkerSystemColorsStatusDidChangeNotification" object:0];
  if (dyld_program_sdk_at_least())
  {
    v63[0] = 0x1ED3F5AD8;
    v63[1] = 0x1ED3F5B38;
    int v45 = [MEMORY[0x1E4F1C978] arrayWithObjects:v63 count:2];
    id v46 = [(UIView *)self _registerForTraitTokenChanges:v45 withTarget:self action:sel__systemTextSizeChanged];
  }
  else
  {
    [v44 addObserver:self selector:sel__systemTextSizeChanged name:@"UIContentSizeCategoryDidChangeNotification" object:0];
  }
  uint64_t v62 = 0x1ED3F5A30;
  BOOL v47 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v62 count:1];
  id v48 = [(UIView *)self _registerForTraitTokenChanges:v47 withTarget:self action:sel__handleUserInterfaceIdiomChange];

  uint64_t v61 = 0x1ED3F5C28;
  id v49 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v61 count:1];
  id v50 = [(UIView *)self _registerForTraitTokenChanges:v49 withTarget:self action:sel__updateVerticalScrollIndicatorVisibility];

  [(UITableView *)self _updateVerticalScrollIndicatorVisibility];
  uint64_t v51 = _UITableTraitsAffectingSelectionIsKey();
  if ([v51 count]) {
    id v52 = [(UIView *)self _registerForTraitTokenChanges:v51 withTarget:self action:sel__updateSelectionIsKey];
  }
  uint64_t v53 = (NSArray *)objc_opt_new();
  sectionIndexTitlesForTableView = self->_sectionIndexTitlesForTableView;
  self->_sectionIndexTitlesForTableView = v53;

  int v55 = dyld_program_sdk_at_least();
  uint64_t v56 = 16;
  if (!v55) {
    uint64_t v56 = 0;
  }
  *((void *)v4 + 1) = *((void *)v4 + 1) & 0xFFFFFFFFFFFFFFEFLL | v56;
  [(UITableView *)self _initializeTentativeViewContainers];
  uint64_t v57 = +[UIView appearance];
  [v57 _beginListeningForAppearanceEventsForSetter:sel_setBackgroundColor_];
  [v57 _beginListeningForAppearanceEventsForSetter:sel_setSeparatorColor_];
  [v57 _beginListeningForAppearanceEventsForSetter:sel_setSeparatorStyle_];
  [(UIScrollView *)self _setContentScrollsAlongXAxis:0];
  [(UIScrollView *)self _setContentScrollsAlongYAxis:1];
  -[UITableView _setCachedSectionIndexBarInsets:](self, "_setCachedSectionIndexBarInsets:", 1.79769313e308, 1.79769313e308, 1.79769313e308, 1.79769313e308);
  if (dyld_program_sdk_at_least())
  {
    uint64_t v58 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v58 addObserver:self selector:sel__purgeReuseQueues name:@"UIApplicationDidReceiveMemoryWarningNotification" object:0];
  }
  -[UITableView _updateListEnvironmentTraitOverrideWithSectionContentInsets:](self, "_updateListEnvironmentTraitOverrideWithSectionContentInsets:", 0.0, 0.0, 0.0, 0.0);
  [(UITableView *)self _updateSelectionIsKey];
  uint64_t v59 = (_UISelectionInteraction *)objc_opt_new();
  [(_UISelectionInteraction *)v59 setDelegate:self];
  [(_UISelectionInteraction *)v59 setEnabled:0];
  [(_UISelectionInteraction *)v59 setSimulatePressesCallbacksForLegacyBehavior:1];
  [(UIView *)self addInteraction:v59];
  selectionInteractiouint64_t n = self->_selectionInteraction;
  self->_selectionInteractiouint64_t n = v59;
}

- (void)_boundingPathMayHaveChangedForView:(id)a3 relativeToBoundsOriginOnly:(BOOL)a4
{
  v6.receiver = self;
  v6.super_class = (Class)UITableView;
  -[UIScrollView _boundingPathMayHaveChangedForView:relativeToBoundsOriginOnly:](&v6, sel__boundingPathMayHaveChangedForView_relativeToBoundsOriginOnly_, a3);
  if (!a4)
  {
    [(UITableView *)self _setNeedsIndexBarInsetsUpdate];
    [(UIScrollView *)self setNeedsLayout];
  }
}

- (void)_setCachedSectionIndexBarInsets:(UIEdgeInsets)a3
{
  self->_cachedSectionIndexBarInsets = a3;
}

- (void)_setNeedsIndexBarInsetsUpdate
{
  [(UITableView *)self _cachedSectionIndexBarInsets];
  if (v6 != 1.79769313e308 || v3 != 1.79769313e308 || v5 != 1.79769313e308 || v4 != 1.79769313e308) {
    [(UIScrollView *)self setNeedsLayout];
  }
  -[UITableView _setCachedSectionIndexBarInsets:](self, "_setCachedSectionIndexBarInsets:", 1.79769313e308, 1.79769313e308, 1.79769313e308, 1.79769313e308);
}

- (UIEdgeInsets)_cachedSectionIndexBarInsets
{
  double top = self->_cachedSectionIndexBarInsets.top;
  double left = self->_cachedSectionIndexBarInsets.left;
  double bottom = self->_cachedSectionIndexBarInsets.bottom;
  double right = self->_cachedSectionIndexBarInsets.right;
  result.double right = right;
  result.double bottom = bottom;
  result.double left = left;
  result.double top = top;
  return result;
}

- (void)setCellLayoutMarginsFollowReadableWidth:(BOOL)cellLayoutMarginsFollowReadableWidth
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)&self->_tableFlags + 3);
  if (((((v3 & 0x2000) == 0) ^ cellLayoutMarginsFollowReadableWidth) & 1) == 0)
  {
    BOOL v4 = cellLayoutMarginsFollowReadableWidth;
    uint64_t v6 = 0x2000;
    if (!cellLayoutMarginsFollowReadableWidth) {
      uint64_t v6 = 0;
    }
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2);
    *((void *)&self->_tableFlags + 3) = v3 & 0xFFFFFFFFFFFFDFFFLL | v6;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v7 = self->_visibleCells;
    uint64_t v8 = [(NSMutableArray *)v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v7);
          }
          objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "setLayoutMarginsFollowReadableWidth:", v4, (void)v12);
        }
        uint64_t v9 = [(NSMutableArray *)v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v9);
    }

    [(UITableView *)self _scheduleAdjustExtraSeparators];
    if (self) {
      [(UIView *)self _updateInferredLayoutMargins];
    }
  }
}

- (id)_resolvedTableConstants
{
  unint64_t v2 = [(UIView *)self traitCollection];
  uint64_t v3 = _UITableConstantsForTraitCollection(v2);

  return v3;
}

- (void)_setSeparatorInsetIsRelativeToCellEdges:(BOOL)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)&self->_tableFlags + 3);
  if (((((v3 & 0x8000) == 0) ^ a3) & 1) == 0)
  {
    BOOL v4 = a3;
    uint64_t v6 = 0x8000;
    if (!a3) {
      uint64_t v6 = 0;
    }
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2);
    *((void *)&self->_tableFlags + 3) = v3 & 0xFFFFFFFFFFFF7FFFLL | v6;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v7 = self->_visibleCells;
    uint64_t v8 = [(NSMutableArray *)v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v7);
          }
          objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "_setSeparatorInsetIsRelativeToCellEdges:", v4, (void)v12);
        }
        uint64_t v9 = [(NSMutableArray *)v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v9);
    }

    [(UITableView *)self _scheduleAdjustExtraSeparators];
  }
}

- (void)_updateSelectionIsKey
{
  uint64_t v3 = (*((void *)&self->_tableFlags + 2) >> 22) & 1;
  int v4 = [(UITableView *)self selectionFollowsFocus];
  _UITableUpdateSelectionIsKeyTraitOverride(self, v3, v4);
}

- (BOOL)selectionFollowsFocus
{
  uint64_t v2 = (unsigned __int16)*((void *)&self->_tableFlags + 2) >> 14;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __36__UITableView_selectionFollowsFocus__block_invoke;
  v4[3] = &unk_1E52DA6B0;
  v4[4] = self;
  return _UITriStateToBool_0(v2, v4);
}

uint64_t __36__UITableView_selectionFollowsFocus__block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _focusBehavior];
  uint64_t v3 = [v2 defaultValueForSelectionFollowsFocusInTableView:*(void *)(a1 + 32)];

  return v3;
}

- (void)setFillerRowHeight:(CGFloat)fillerRowHeight
{
  if (fillerRowHeight < 0.0) {
    fillerRowdouble Height = -1.0;
  }
  if ((*((unsigned char *)&self->_tableFlags + 13) & 0x60) != 0) {
    fillerRowdouble Height = 0.0;
  }
  if (self->_fillerRowHeight != fillerRowHeight)
  {
    self->_fillerRowdouble Height = fillerRowHeight;
    if ((*((unsigned char *)&self->_tableFlags + 14) & 7) != 0) {
      [(UITableView *)self _scheduleAdjustExtraSeparators];
    }
  }
}

- (void)_updateVerticalScrollIndicatorVisibility
{
  uint64_t v3 = [(UIView *)self traitCollection];
  uint64_t v4 = [v3 userInterfaceIdiom];

  if (v4 == 6)
  {
    double v5 = [(UIView *)self traitCollection];
    int v6 = [v5 _hasSplitViewControllerContextPrimaryColumn];
    uint64_t v7 = 0x4000000;
    if (v6) {
      uint64_t v7 = 0;
    }
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFBFFFFFFLL | v7;

    [(UITableView *)self _updateShowScrollIndicatorsFlag];
  }
}

- (void)_setUpContentFocusContainerGuide
{
  if (!self->_contentFocusContainerGuide)
  {
    uint64_t v3 = objc_alloc_init(UIFocusContainerGuide);
    contentFocusContainerGuide = self->_contentFocusContainerGuide;
    self->_contentFocusContainerGuide = v3;

    [(UIView *)self addLayoutGuide:self->_contentFocusContainerGuide];
    [(UILayoutGuide *)self->_contentFocusContainerGuide _setLockedToOwningView:1];
    [(UILayoutGuide *)self->_contentFocusContainerGuide setIdentifier:@"UITableViewContentFocusContainerGuide"];
    double v5 = self->_contentFocusContainerGuide;
    [(UIView *)self bounds];
    [(UILayoutGuide *)v5 _setManualLayoutFrame:"_setManualLayoutFrame:"];
  }
}

- (void)_setSupplementarySectionHeadersHugContent:(BOOL)a3
{
  self->_contentHuggingElements = self->_contentHuggingElements & 0xFFFFFFFFFFFFFFFELL | a3;
}

- (void)_removeTableViewGestureRecognizers
{
  [(UIView *)self removeGestureRecognizer:self->_upArrowLongPressGestureRecognizer];
  upArrowLongPressGestureRecognizer = self->_upArrowLongPressGestureRecognizer;
  self->_upArrowLongPressGestureRecognizer = 0;

  [(UIView *)self removeGestureRecognizer:self->_downArrowLongPressGestureRecognizer];
  downArrowLongPressGestureRecognizer = self->_downArrowLongPressGestureRecognizer;
  self->_downArrowLongPressGestureRecognizer = 0;

  [(UIView *)self removeGestureRecognizer:self->_upArrowTapGestureRecognizer];
  upArrowTapGestureRecognizer = self->_upArrowTapGestureRecognizer;
  self->_upArrowTapGestureRecognizer = 0;

  [(UIView *)self removeGestureRecognizer:self->_downArrowTapGestureRecognizer];
  downArrowTapGestureRecognizer = self->_downArrowTapGestureRecognizer;
  self->_downArrowTapGestureRecognizer = 0;
}

- (void)_initializeTentativeViewContainers
{
  if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0)
  {
    if (!self->_tentativeCells)
    {
      uint64_t v3 = [MEMORY[0x1E4F1CA60] dictionary];
      tentativeCells = self->_tentativeCells;
      self->_tentativeCells = v3;
    }
    if (!self->_tentativeHeaderViews)
    {
      double v5 = [MEMORY[0x1E4F1CA60] dictionary];
      tentativeHeaderViews = self->_tentativeHeaderViews;
      self->_tentativeHeaderViews = v5;
    }
    if (!self->_tentativeFooterViews)
    {
      uint64_t v7 = [MEMORY[0x1E4F1CA60] dictionary];
      tentativeFooterViews = self->_tentativeFooterViews;
      self->_tentativeFooterViews = v7;
    }
  }
}

- (double)_defaultFillerRowHeight
{
  double result = 0.0;
  if ((*((unsigned char *)&self->_tableFlags + 13) & 0x60) == 0)
  {
    int v3 = -[UITableConstants useChromelessSectionHeadersAndFootersForTableStyle:](self->_constants, "useChromelessSectionHeadersAndFootersForTableStyle:", 0, 0.0);
    double result = -1.0;
    if (v3) {
      return 0.0;
    }
  }
  return result;
}

- (void)_rebuildGeometryForcingRowDataUpdate:(BOOL)a3 skipContentOffsetAdjustment:(BOOL)a4 updateImmediatelyIfPossible:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  BOOL v7 = a3;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *((void *)&self->_tableFlags + 1) &= ~0x400000000000000uLL;
  [(UITableView *)self _clearNeedsRecomputeHeightsForInvalidatedElements];
  [(UITableView *)self _updateWrapperView];
  [(UITableView *)self _updateWrapperFrame];
  if (v7) {
    [(UITableView *)self _updateRowData];
  }
  else {
    [(UITableView *)self _updateRowDataIfNeeded];
  }
  [(UITableView *)self _updateContentSizeSkippingContentOffsetAdjustment:v6];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v9 = [(UITableView *)self _preparedCells];
  uint64_t v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v16 != v12) {
          objc_enumerationMutation(v9);
        }
        long long v14 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        [v14 _setNeedsHeightCalculation:1];
        [(UITableView *)self _sectionContentInset];
        objc_msgSend(v14, "_setBackgroundInset:");
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v11);
  }

  [(UITableView *)self _updateMarginWidthForVisibleViewsForceLayout:0];
  [(UITableView *)self _sectionContentInset];
  -[UITableView _updateListEnvironmentTraitOverrideWithSectionContentInsets:](self, "_updateListEnvironmentTraitOverrideWithSectionContentInsets:");
  [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1 updateImmediatelyIfPossible:v5];
}

- (void)_updateWrapperView
{
  BOOL v3 = [(UITableView *)self _shouldWrapCells];
  uint64_t v4 = *((void *)&self->_tableFlags + 2);
  uint64_t v5 = 0x40000000000000;
  if (!v3) {
    uint64_t v5 = 0;
  }
  *((void *)&self->_tableFlags + 2) = v4 & 0xFFBFFFFFFFFFFFFFLL | v5;
  wrapperView = self->_wrapperView;
  if (!v3)
  {
    if (!wrapperView) {
      return;
    }
    [(UIScrollView *)wrapperView removeFromSuperview];
    long long v15 = self->_wrapperView;
    self->_wrapperView = 0;

    if ((v4 & 0x80000000000000) == 0) {
      return;
    }
    goto LABEL_11;
  }
  if (!wrapperView)
  {
    [(UITableView *)self _frameForWrapper];
    uint64_t v11 = -[UITableViewWrapperView initWithFrame:]([UITableViewWrapperView alloc], "initWithFrame:", v7, v8, v9, v10);
    uint64_t v12 = self->_wrapperView;
    self->_wrapperView = v11;

    [(UIScrollView *)self->_wrapperView _setAutomaticContentOffsetAdjustmentEnabled:0];
    [(UIView *)self->_wrapperView setEdgesPreservingSuperviewLayoutMargins:10];
    [(UIView *)self->_wrapperView setEdgesInsettingLayoutMarginsFromSafeArea:[(UIView *)self->_wrapperView edgesInsettingLayoutMarginsFromSafeArea] & 0xA];
    -[UIView setLayoutMargins:](self->_wrapperView, "setLayoutMargins:", 0.0, 0.0, 0.0, 0.0);
    [(UIScrollView *)self->_wrapperView setShowsHorizontalScrollIndicator:0];
    [(UIScrollView *)self->_wrapperView setShowsVerticalScrollIndicator:0];
    [(UIScrollView *)self->_wrapperView setScrollsToTop:0];
    [(UIView *)self->_wrapperView setInsetsLayoutMarginsFromSafeArea:[(UIView *)self insetsLayoutMarginsFromSafeArea]];
    [(UIScrollView *)self->_wrapperView setScrollEnabled:0];
    if ((dyld_program_sdk_at_least() & 1) == 0)
    {
      long long v13 = [(UIScrollView *)self->_wrapperView _touchesDelayedGestureRecognizer];
      [v13 setEnabled:1];
    }
    [(UITableView *)self _updateWrapperContentInset];
    uint64_t v14 = *((void *)&self->_tableFlags + 2);
    [(UITableView *)self _addContentSubview:self->_wrapperView atBack:1];
    [(UITableView *)self _updateWrapperClipping];
    if ((v14 & 0x80000000000000) != 0)
    {
LABEL_11:
      if ((*((unsigned char *)&self->_tableFlags + 15) & 2) == 0)
      {
        [(UITableView *)self _removeAndResetAllVisibleCells];
      }
    }
  }
}

- (BOOL)_shouldWrapCells
{
  if (!dyld_program_sdk_at_least()
    || [(UITableView *)self _manuallyManagesSwipeUI]
    || [(UITableView *)self _sectionContentInsetFollowsLayoutMargins])
  {
    return 1;
  }
  [(UITableView *)self _sectionContentInset];
  BOOL v3 = 1;
  if (v8 == 0.0 && v5 == 0.0 && v7 == 0.0 && v6 == 0.0)
  {
    double v9 = [(UIView *)self traitCollection];
    if ([v9 userInterfaceIdiom] != 3)
    {
      double v10 = [(UIScrollView *)self _staticScrollBar];
      BOOL v3 = v10 != 0;
    }
  }
  return v3;
}

- (BOOL)_sectionContentInsetFollowsLayoutMargins
{
  return (*((unsigned __int8 *)&self->_tableFlags + 25) >> 6) & 1;
}

- (BOOL)_manuallyManagesSwipeUI
{
  return *((unsigned __int8 *)&self->_tableFlags + 23) >> 7;
}

- (void)_updateListEnvironmentTraitOverrideWithSectionContentInsets:(UIEdgeInsets)a3
{
  if (a3.right <= 0.0 && a3.left <= 0.0 || ((*((void *)&self->_tableFlags + 1) >> 45) & 3uLL) - 1 >= 2) {
    unint64_t v6 = (*((void *)&self->_tableFlags + 1) >> 45) & 3;
  }
  else {
    unint64_t v6 = 2;
  }
  uint64_t v7 = _UIListEnvironmentFromTableViewStyle(v6);
  -[UIView _internalTraitOverrides](self);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  [v8 setListEnvironment:v7];
}

- (void)_updateMarginWidthForVisibleViewsForceLayout:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  double v5 = (void *)[(NSMutableArray *)self->_visibleCells copy];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v6 = v5;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v42 objects:v49 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v43 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v42 + 1) + 8 * i);
        [(UITableView *)self _defaultLeadingCellMarginWidth];
        objc_msgSend(v11, "_setDefaultLeadingMarginWidth:");
        [(UITableView *)self _defaultTrailingCellMarginWidth];
        objc_msgSend(v11, "_setDefaultTrailingCellMarginWidth:");
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v42 objects:v49 count:16];
    }
    while (v8);
  }

  uint64_t v12 = [(UITableView *)self _visibleHeaderFooterViews];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v38 objects:v48 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v39;
    do
    {
      for (uint64_t j = 0; j != v14; ++j)
      {
        if (*(void *)v39 != v15) {
          objc_enumerationMutation(v12);
        }
        long long v17 = *(void **)(*((void *)&v38 + 1) + 8 * j);
        if (_IsKindOfUITableViewHeaderFooterView(v17))
        {
          id v18 = v17;
          -[UITableView _headerFooterLeadingMarginWidthIsHeader:isFirstSection:](self, "_headerFooterLeadingMarginWidthIsHeader:isFirstSection:", [v18 sectionHeader], objc_msgSend(v18, "_isTopHeader"));
          objc_msgSend(v18, "_setMarginWidth:");
          [(UITableView *)self _headerFooterTrailingMarginWidth];
          objc_msgSend(v18, "_setRightMarginWidth:");
        }
      }
      uint64_t v14 = [v12 countByEnumeratingWithState:&v38 objects:v48 count:16];
    }
    while (v14);
  }
  if (v3)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v19 = v6;
    uint64_t v20 = [v19 countByEnumeratingWithState:&v34 objects:v47 count:16];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = *(void *)v35;
      do
      {
        for (uint64_t k = 0; k != v21; ++k)
        {
          if (*(void *)v35 != v22) {
            objc_enumerationMutation(v19);
          }
          [*(id *)(*((void *)&v34 + 1) + 8 * k) _tableViewDidUpdateMarginWidth];
        }
        uint64_t v21 = [v19 countByEnumeratingWithState:&v34 objects:v47 count:16];
      }
      while (v21);
    }

    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v24 = v12;
    uint64_t v25 = [v24 countByEnumeratingWithState:&v30 objects:v46 count:16];
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v27 = *(void *)v31;
      do
      {
        for (uint64_t m = 0; m != v26; ++m)
        {
          if (*(void *)v31 != v27) {
            objc_enumerationMutation(v24);
          }
          uint64_t v29 = *(void **)(*((void *)&v30 + 1) + 8 * m);
          if (_IsKindOfUITableViewHeaderFooterView(v29)) {
            objc_msgSend(v29, "_tableViewDidUpdateMarginWidth", (void)v30);
          }
        }
        uint64_t v26 = [v24 countByEnumeratingWithState:&v30 objects:v46 count:16];
      }
      while (v26);
    }
  }
}

- (id)_visibleHeaderFooterViews
{
  uint64_t v3 = [(NSMutableDictionary *)self->_visibleHeaderViews count];
  uint64_t v4 = [(NSMutableDictionary *)self->_visibleFooterViews count] + v3;
  double v5 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:v4];
  if (v4)
  {
    rowData = self->_rowData;
    [(UITableView *)self _visibleBounds];
    uint64_t v11 = -[UITableViewRowData sectionsInRect:]((uint64_t)rowData, v7, v8, v9, v10);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    uint64_t v15 = __40__UITableView__visibleHeaderFooterViews__block_invoke;
    long long v16 = &unk_1E5308F30;
    uint64_t v18 = v11;
    uint64_t v19 = v12;
    id v17 = v5;
    __40__UITableView__visibleHeaderFooterViews__block_invoke((uint64_t)v14, self->_visibleHeaderViews);
    v15((uint64_t)v14, self->_visibleFooterViews);
  }
  return v5;
}

- (id)_preparedCells
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28D30]), "initWithOptions:capacity:", 512, -[NSMutableArray count](self->_visibleCells, "count"));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v4 = self->_visibleCells;
  uint64_t v5 = [(NSMutableArray *)v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        [v3 addObject:*(void *)(*((void *)&v14 + 1) + 8 * i)];
      }
      uint64_t v6 = [(NSMutableArray *)v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v6);
  }

  subviewManager = self->_subviewManager;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __29__UITableView__preparedCells__block_invoke;
  v12[3] = &unk_1E5309150;
  id v10 = v3;
  id v13 = v10;
  if (subviewManager) {
    [(NSMutableDictionary *)subviewManager->_prefetchedCells enumerateKeysAndObjectsUsingBlock:v12];
  }
  if (self->_focusedCell && self->_focusedViewType == 1) {
    objc_msgSend(v10, "addObject:");
  }
  if (self->_firstResponderView && self->_firstResponderViewType == 1) {
    objc_msgSend(v10, "addObject:");
  }

  return v10;
}

- (id)_visibleViews
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = objc_msgSend(objc_alloc(MEMORY[0x1E4F28D30]), "initWithOptions:capacity:", 512, -[NSMutableArray count](self->_visibleCells, "count"));
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v4 = self->_visibleCells;
  uint64_t v5 = [(NSMutableArray *)v4 countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(v4);
        }
        [v3 addObject:*(void *)(*((void *)&v28 + 1) + 8 * i)];
      }
      uint64_t v6 = [(NSMutableArray *)v4 countByEnumeratingWithState:&v28 objects:v34 count:16];
    }
    while (v6);
  }

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  CGFloat v9 = [(NSMutableDictionary *)self->_visibleHeaderViews objectEnumerator];
  uint64_t v10 = [v9 countByEnumeratingWithState:&v24 objects:v33 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v25;
    do
    {
      for (uint64_t j = 0; j != v11; ++j)
      {
        if (*(void *)v25 != v12) {
          objc_enumerationMutation(v9);
        }
        [v3 addObject:*(void *)(*((void *)&v24 + 1) + 8 * j)];
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v24 objects:v33 count:16];
    }
    while (v11);
  }

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v14 = [(NSMutableDictionary *)self->_visibleFooterViews objectEnumerator];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v20 objects:v32 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v21;
    do
    {
      for (uint64_t k = 0; k != v16; ++k)
      {
        if (*(void *)v21 != v17) {
          objc_enumerationMutation(v14);
        }
        [v3 addObject:*(void *)(*((void *)&v20 + 1) + 8 * k)];
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v20 objects:v32 count:16];
    }
    while (v16);
  }

  return v3;
}

- (void)_updateRowDataIfNeeded
{
  if (self->_rowData) {
    [(UITableView *)self _updateRowData];
  }
}

- (void)_updateWrapperClipping
{
  unint64_t v2 = *((void *)&self->_tableFlags + 2);
  if ((v2 & 0x40000000000000) != 0)
  {
    uint64_t v3 = 1;
    if ((v2 & 0x2000000000000000) == 0 && self->_updateAnimationCount <= 0)
    {
      uint64_t v4 = (v2 >> 62) & 1;
      if (self->_swipeToDeleteCell) {
        uint64_t v3 = 1;
      }
      else {
        uint64_t v3 = v4;
      }
    }
    [(UIView *)self->_wrapperView setClipsToBounds:v3];
  }
}

- (void)_adjustPreReloadStateForRestoringContentOffsetWithUpdateItems:(id)a3 updateSupport:(id)a4
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = (uint64_t *)a4;
  CGFloat v8 = v7;
  p_preReloadVisibleRowRange = &self->_preReloadVisibleRowRange;
  if (self->_preReloadVisibleRowRange.length)
  {
    int64_t location = p_preReloadVisibleRowRange->location;
    if ((int64_t)p_preReloadVisibleRowRange->location < v7[31])
    {
      uint64_t v11 = -[UITableViewRowData indexPathForRowAtGlobalRow:]((void *)v7[9], p_preReloadVisibleRowRange->location);
      id v18 = 0;
      uint64_t v12 = [(UITableView *)self _generateDeletedOrMovedRowsIndexSetFromUpdateItems:v6 updateSupport:v8 preReloadFirstVisibleRowIndexPath:v11 outReloadedRowNewIndexPath:&v18];
      id v13 = v18;
      if ((location & 0x8000000000000000) == 0)
      {
        if ([v12 containsIndex:location])
        {
          do
          {

            if (location <= 0)
            {
              id v13 = 0;
              goto LABEL_17;
            }
            --location;
            id v13 = 0;
          }
          while ([v12 containsIndex:location]);
          uint64_t v14 = -[_UITableViewUpdateSupport finalGlobalIndexForInitialGlobalIndex:]((uint64_t)v8, location);
          if (v14 == 0x7FFFFFFFFFFFFFFFLL)
          {
            id v13 = 0;
            goto LABEL_14;
          }
          id v13 = 0;
          uint64_t v15 = v14 + 1;
          goto LABEL_18;
        }
        if (v13) {
          uint64_t v15 = -[UITableViewRowData globalRowForRowAtIndexPath:](v8[10], v13);
        }
        else {
          uint64_t v15 = -[_UITableViewUpdateSupport finalGlobalIndexForInitialGlobalIndex:]((uint64_t)v8, location);
        }
        if (v15 != 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_19;
        }
LABEL_14:
        if (os_variant_has_internal_diagnostics())
        {
          uint64_t v17 = __UIFaultDebugAssertLog();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = 134217984;
            int64_t v20 = location;
            _os_log_fault_impl(&dword_1853B0000, v17, OS_LOG_TYPE_FAULT, "Unable to determine new global row index for preReloadFirstVisibleRow (%ld)", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v16 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_adjustPreReloadStateForRestoringContentOffsetWithUpdateItems_updateSupport____s_category)+ 8);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 134217984;
            int64_t v20 = location;
            _os_log_impl(&dword_1853B0000, v16, OS_LOG_TYPE_ERROR, "Unable to determine new global row index for preReloadFirstVisibleRow (%ld)", buf, 0xCu);
          }
        }
      }
LABEL_17:
      uint64_t v15 = 0;
LABEL_18:
      self->_preReloadFirstCellOffset = 0.0;
LABEL_19:
      p_preReloadVisibleRowRange->int64_t location = v15;
    }
  }
}

- (id)_generateDeletedOrMovedRowsIndexSetFromUpdateItems:(id)a3 updateSupport:(id)a4 preReloadFirstVisibleRowIndexPath:(id)a5 outReloadedRowNewIndexPath:(id *)a6
{
  uint64_t v58 = a6;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  CGFloat v9 = (uint64_t *)a4;
  id v61 = a5;
  id v59 = [MEMORY[0x1E4F28E60] indexSet];
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id v10 = v8;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v62 objects:v66 count:16];
  if (!v11)
  {
    id v60 = 0;
    goto LABEL_41;
  }
  uint64_t v12 = v11;
  id v60 = 0;
  uint64_t v13 = *(void *)v63;
  do
  {
    uint64_t v14 = 0;
    do
    {
      if (*(void *)v63 != v13) {
        objc_enumerationMutation(v10);
      }
      uint64_t v15 = *(void *)(*((void *)&v62 + 1) + 8 * v14);
      if (v15)
      {
        int v16 = *(_DWORD *)(v15 + 20);
        if ([*(id *)(*((void *)&v62 + 1) + 8 * v14) isDecomposedFromReload])
        {
          if (v16 != 1) {
            goto LABEL_33;
          }
          char v17 = *(unsigned char *)(v15 + 16);
          id v18 = *(id *)(v15 + 24);
          uint64_t v19 = v18;
          if ((v17 & 1) == 0)
          {
            int v20 = [v18 isEqual:v61];

            if (!v20) {
              goto LABEL_33;
            }
            uint64_t v21 = -[UIDecomposedReloadUpdateItem pairedItem]((id *)v15);
            long long v22 = (void *)v21;
            if (v21) {
              long long v23 = *(void **)(v21 + 24);
            }
            else {
              long long v23 = 0;
            }
            id v24 = v23;

            goto LABEL_26;
          }
          uint64_t v28 = [v18 section];
          uint64_t v29 = [v61 section];

          if (v28 != v29) {
            goto LABEL_33;
          }
          uint64_t v30 = -[UIDecomposedReloadUpdateItem pairedItem]((id *)v15);
          long long v31 = (void *)v30;
          if (v30) {
            long long v32 = *(void **)(v30 + 24);
          }
          else {
            long long v32 = 0;
          }
          id v33 = v32;
          uint64_t v34 = [v33 section];

          uint64_t v35 = [v61 row];
          uint64_t v36 = -[UITableViewRowData numberOfRowsInSection:](v9[10], v34);
          if (v35 >= v36 - 1) {
            uint64_t v37 = v36 - 1;
          }
          else {
            uint64_t v37 = v35;
          }
          if ((v37 & 0x8000000000000000) == 0)
          {
            objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:");
            id v24 = (id)objc_claimAutoreleasedReturnValue();

LABEL_26:
            id v60 = v24;
            goto LABEL_33;
          }
          uint64_t v48 = v9[9];
          id v49 = *(id *)(v15 + 24);
          uint64_t v50 = -[UITableViewRowData numberOfRowsInSection:](v48, [v49 section]);

          uint64_t v51 = v9[9];
          id v52 = (void *)MEMORY[0x1E4F28D58];
          id v53 = *(id *)(v15 + 24);
          uint64_t v54 = objc_msgSend(v52, "indexPathForRow:inSection:", 0, objc_msgSend(v53, "section"));
          uint64_t v55 = -[UITableViewRowData globalRowForRowAtIndexPath:](v51, v54);

          if (v55 != 0x7FFFFFFFFFFFFFFFLL)
          {
            long long v45 = v59;
            uint64_t v46 = v55;
            uint64_t v47 = v50;
            goto LABEL_32;
          }
        }
        else
        {
          if ((v16 & 0xFFFFFFFD) != 1) {
            goto LABEL_33;
          }
          if (*(unsigned char *)(v15 + 16))
          {
            id v38 = *(id *)(v15 + 24);
            uint64_t v39 = [v38 section];

            uint64_t v40 = -[UITableViewRowData numberOfRowsInSection:](v9[9], v39);
            if (v40 >= 1)
            {
              uint64_t v41 = v40;
              uint64_t v42 = v9[9];
              long long v43 = [MEMORY[0x1E4F28D58] indexPathForRow:0 inSection:v39];
              uint64_t v44 = -[UITableViewRowData globalRowForRowAtIndexPath:](v42, v43);

              if (v44 != 0x7FFFFFFFFFFFFFFFLL)
              {
                long long v45 = v59;
                uint64_t v46 = v44;
                uint64_t v47 = v41;
LABEL_32:
                objc_msgSend(v45, "addIndexesInRange:", v46, v47, v58);
              }
            }
          }
          else
          {
            uint64_t v25 = v9[9];
            id v26 = *(id *)(v15 + 24);
            uint64_t v27 = -[UITableViewRowData globalRowForRowAtIndexPath:](v25, v26);

            if (v27 != 0x7FFFFFFFFFFFFFFFLL) {
              [v59 addIndex:v27];
            }
          }
        }
      }
      else
      {
        [0 isDecomposedFromReload];
      }
LABEL_33:
      ++v14;
    }
    while (v12 != v14);
    uint64_t v56 = [v10 countByEnumeratingWithState:&v62 objects:v66 count:16];
    uint64_t v12 = v56;
  }
  while (v56);
LABEL_41:

  if (v58) {
    *uint64_t v58 = v60;
  }

  return v59;
}

- (id)_createPreparedCellForGlobalRow:(int64_t)a3 willDisplay:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v7 = -[UITableView indexPathForRowAtGlobalRow:](self, "indexPathForRowAtGlobalRow:");
  id v8 = [(UITableView *)self _createPreparedCellForGlobalRow:a3 withIndexPath:v7 willDisplay:v4];

  return v8;
}

- (BOOL)isEditing
{
  return (*((unsigned __int8 *)&self->_tableFlags + 14) >> 4) & 1;
}

- (id)_reorderingCell
{
  reorderingSupport = self->_reorderingSupport;
  if (reorderingSupport) {
    return reorderingSupport->_reorderedCell;
  }
  else {
    return 0;
  }
}

- (void)performBatchUpdates:(void *)updates completion:(void *)completion
{
}

- (void)_rectChangedWithNewSize:(CGSize)a3 oldSize:(CGSize)a4
{
  double height = a4.height;
  double width = a4.width;
  double v6 = a3.height;
  double v7 = a3.width;
  if (a3.width != a4.width)
  {
    [(UIView *)self setNeedsDisplay];
    [(UIView *)self->_tableHeaderView setNeedsDisplay];
    [(UIView *)self->_tableFooterView setNeedsDisplay];
    CGFloat v9 = [(UIView *)self window];
    id v10 = [v9 screen];
    int v11 = [v10 _wantsWideContentMargins];

    if (v11)
    {
      [(UIView *)self _rawLayoutMargins];
      [(UITableView *)self _setDefaultLayoutMargins:"_setDefaultLayoutMargins:"];
    }
    if (dyld_program_sdk_at_least()) {
      [(UITableView *)self _storeStateForRestoringContentOffsetIfNeeded];
    }
    [(UITableView *)self _rebuildGeometry];
  }
  if (v7 != width || v6 != height)
  {
    [(UITableView *)self _updateContentSize];
    [(UITableView *)self _updateWrapperFrame];
    [(UITableView *)self _scheduleAdjustExtraSeparators];
  }
  if (v6 != height)
  {
    [(UIScrollView *)self contentOffset];
    double v14 = v13;
    [(UITableView *)self heightForTableHeaderViewHiding];
    if (v14 > 0.0 && v14 <= v15) {
      [(UITableView *)self _scrollToTopHidingTableHeader:0];
    }
    if ((*((unsigned char *)&self->_tableFlags + 20) & 8) != 0) {
      [(UITableView *)self _scrollFirstResponderCellToVisible:+[UIView _isInAnimationBlock] ^ 1];
    }
  }
  [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:v7 != width];
  [(UITableView *)self _updateIndexFrame];
}

- (void)_rebuildGeometry
{
}

- (void)_storeStateForRestoringContentOffsetIfNeeded
{
  uint64_t v3 = [(UITableView *)self _indexPathsForVisibleRowsUsingPresentationValues:1];
  id v4 = [v3 firstObject];

  if ((*((unsigned char *)&self->_tableFlags + 24) & 4) == 0)
  {
    [(UITableView *)self _storePreReloadStateForRestoringContentOffsetWithFirstVisibleIndexPath:v4];
    if ([(UITableView *)self _shouldRestorePreReloadScrollPositionWithFirstVisibleIndexPath:v4 scrolledToTop:[(UITableView *)self _isScrolledToTop]])
    {
      *((void *)&self->_tableFlags + 3) |= 4uLL;
    }
  }
}

- (void)didMoveToWindow
{
  v14.receiver = self;
  v14.super_class = (Class)UITableView;
  [(UIView *)&v14 didMoveToWindow];
  uint64_t v3 = [(UIView *)self window];
  if (v3)
  {
    [(UIView *)self _rawLayoutMargins];
    double v5 = v4;
    double v7 = v6;
    id v8 = [v3 screen];
    int v9 = [v8 _wantsWideContentMargins];

    if (v9)
    {
      [(UIView *)self frame];
      if (CGRectGetWidth(v15) <= 320.0) {
        double v10 = 16.0;
      }
      else {
        double v10 = 20.0;
      }
      double v11 = v10;
    }
    else
    {
      if (dyld_program_sdk_at_least()) {
        double v11 = 16.0;
      }
      else {
        double v11 = 15.0;
      }
      dyld_program_sdk_at_least();
    }
    -[UITableView _setDefaultLayoutMargins:](self, "_setDefaultLayoutMargins:", v5, v11, v7);
    [(UIScrollView *)self setNeedsLayout];
    if ([(UITableView *)self _supportsCellPrefetching])
    {
      p_uint64_t tableFlags = &self->_tableFlags;
      if ((*((unsigned char *)&self->_tableFlags + 24) & 0x80) == 0)
      {
        _UIUpdateCycleRegisterIdleObserver(self);
        unint64_t v13 = *((void *)&self->_tableFlags + 3) | 0x80;
        goto LABEL_16;
      }
    }
  }
  else
  {
    p_uint64_t tableFlags = &self->_tableFlags;
    if ((*((unsigned char *)&self->_tableFlags + 24) & 0x80) != 0)
    {
      _UIUpdateCycleUnregisterIdleObserver(self);
      unint64_t v13 = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFFF7FLL;
LABEL_16:
      *((void *)p_tableFlags + 3) = v13;
    }
  }
}

- (void)_setDefaultLayoutMargins:(UIEdgeInsets)a3
{
  p_uint64_t tableFlags = &self->_tableFlags;
  unint64_t v4 = *((void *)&self->_tableFlags + 3);
  if ((v4 & 0x20) == 0)
  {
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2);
    *((void *)&self->_tableFlags + 3) = v4 | 0x40;
    -[UITableView setLayoutMargins:](self, "setLayoutMargins:", a3.top, a3.left, a3.bottom, a3.right);
    *((void *)p_tableFlags + 3) = *((void *)p_tableFlags + 3) & 0xFFFFFFFFFFFFFFBFLL | (((v4 >> 6) & 1) << 6);
  }
}

- (void)setLayoutMargins:(UIEdgeInsets)a3
{
  double right = a3.right;
  double bottom = a3.bottom;
  double left = a3.left;
  double top = a3.top;
  [(UIView *)self _rawLayoutMargins];
  if (left != v11 || top != v8 || right != v10 || bottom != v9)
  {
    [(UIView *)self layoutMargins];
    double v16 = v15;
    double v18 = v17;
    *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFFFDFLL | (32 * ((*((void *)&self->_tableFlags + 3) & 0x60) != 64));
    v21.receiver = self;
    v21.super_class = (Class)UITableView;
    -[UIView setLayoutMargins:](&v21, sel_setLayoutMargins_, top, left, bottom, right);
    [(UIView *)self layoutMargins];
    if (v16 != v20 || v18 != v19) {
      [(UITableView *)self _rebuildGeometryWithCompatibility];
    }
  }
}

- (void)_rebuildGeometryWithCompatibility
{
  uint64_t v3 = dyld_program_sdk_at_least();
  [(UITableView *)self _rebuildGeometryForcingRowDataUpdate:1 skipContentOffsetAdjustment:v3 updateImmediatelyIfPossible:v3 ^ 1];
}

- (void)_configureTableHeaderFooterView:(id)a3 forHeader:(BOOL)a4 section:(int64_t)a5 floating:(BOOL)a6 withTitle:(id)a7 detailText:(id)a8 textAlignment:(int64_t)a9 fromClient:(BOOL)a10
{
  BOOL v12 = a6;
  BOOL v14 = a4;
  id v29 = a3;
  id v16 = a7;
  id v17 = a8;
  [v29 setFloating:v12];
  [v29 setSectionHeader:v14];
  if (v14)
  {
    objc_msgSend(v29, "_setTopHeader:", -[UITableView _isTopHeaderForSection:](self, "_isTopHeaderForSection:", a5));
    -[UITableView _headerFooterLeadingMarginWidthIsHeader:isFirstSection:](self, "_headerFooterLeadingMarginWidthIsHeader:isFirstSection:", 1, [v29 _isTopHeader]);
    objc_msgSend(v29, "_setMarginWidth:");
    [(UITableView *)self _headerFooterTrailingMarginWidth];
    objc_msgSend(v29, "_setRightMarginWidth:");
    objc_msgSend(v29, "_setInsetsContentViewsToSafeArea:", -[UITableView insetsContentViewsToSafeArea](self, "insetsContentViewsToSafeArea"));
    BOOL v18 = [(UITableView *)self _shouldStripHeaderTopPaddingForSection:a5];
  }
  else
  {
    [v29 _setTopHeader:0];
    -[UITableView _headerFooterLeadingMarginWidthIsHeader:isFirstSection:](self, "_headerFooterLeadingMarginWidthIsHeader:isFirstSection:", 0, [v29 _isTopHeader]);
    objc_msgSend(v29, "_setMarginWidth:");
    [(UITableView *)self _headerFooterTrailingMarginWidth];
    objc_msgSend(v29, "_setRightMarginWidth:");
    objc_msgSend(v29, "_setInsetsContentViewsToSafeArea:", -[UITableView insetsContentViewsToSafeArea](self, "insetsContentViewsToSafeArea"));
    BOOL v18 = 0;
  }
  [v29 _setStripPadding:v18];
  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration, @"TableViewHeadersFootersUseModernConfiguration", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) != 0|| !byte_1E8FD54CC|| a10)
  {
    if (v16)
    {
      long long v23 = [(UITableView *)self _constants];
      int v24 = [v23 shouldUppercaseHeaderFooterTextForTableStyle:(*((void *)&self->_tableFlags + 1) >> 45) & 3 isHeader:v14];

      if (v24)
      {
        uint64_t v25 = [v16 localizedUppercaseString];

        id v16 = (id)v25;
      }
      id v26 = [v29 textLabel];
      [v26 setText:v16];
    }
    uint64_t v27 = v29;
    if (v17)
    {
      uint64_t v28 = [v29 detailTextLabel];
      [v28 setText:v17];

      uint64_t v27 = v29;
    }
    [v27 setTextAlignment:a9];
  }
  else
  {
    double v19 = [v29 defaultContentConfiguration];
    [v19 setText:v16];
    [v19 setSecondaryText:v17];
    if (a9 == 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = 2 * (a9 == 3);
    }
    objc_super v21 = [v19 textProperties];
    [v21 setAlignment:v20];

    long long v22 = [v19 secondaryTextProperties];
    [v22 setAlignment:v20];

    [v29 setContentConfiguration:v19];
  }
  [v29 setNeedsLayout];
}

void __96__UITableView__sectionHeaderView_withFrame_forSection_floating_reuseViewIfPossible_willDisplay___block_invoke(uint64_t a1, void *a2, int a3)
{
  if (a3)
  {
    double v4 = *(double *)(a1 + 40);
    double v5 = *(double *)(a1 + 48);
    double v6 = *(double *)(a1 + 56);
    double v7 = *(double *)(a1 + 64);
    id v8 = a2;
    objc_msgSend(v8, "setFrame:", v4, v5, v6, v7);
    [v8 setFloating:*(unsigned __int8 *)(a1 + 72)];
  }
  else
  {
    double v9 = *(double *)(a1 + 48);
    double v10 = *(double *)(a1 + 56);
    double v11 = *(double *)(a1 + 64);
    BOOL v12 = *(void **)(a1 + 32);
    id v13 = a2;
    [v12 _sectionContentInset];
    objc_msgSend(v13, "setFrame:", v15, v9, v10 - (v15 + v14), v11);
  }
}

- (void)_setupSectionView:(id)a3 isHeader:(BOOL)a4 forSection:(int64_t)a5
{
  BOOL v6 = a4;
  id v11 = a3;
  objc_msgSend(v11, "setTableViewStyle:", -[UITableView _tableStyle](self, "_tableStyle"));
  id v8 = [(UITableView *)self _constants];
  [v11 _setConstants:v8];

  [v11 setTableView:self];
  [v11 setSectionHeader:v6];
  [(UITableView *)self _headerFooterLeadingMarginWidthIsHeader:v6 isFirstSection:a5 == 0];
  objc_msgSend(v11, "_setMarginWidth:");
  [(UITableView *)self _headerFooterTrailingMarginWidth];
  objc_msgSend(v11, "_setRightMarginWidth:");
  objc_msgSend(v11, "_setInsetsContentViewsToSafeArea:", -[UITableView insetsContentViewsToSafeArea](self, "insetsContentViewsToSafeArea"));
  [v11 _setAutomaticIntrinsicContentSizeInvalidationEnabled:(*((void *)&self->_tableFlags + 3) & 0x18000000000) == 0x10000000000];
  if (a5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    rowData = self->_rowData;
    if (v6)
    {
      objc_msgSend(v11, "setMaxTitleWidth:", -[UITableViewRowData maxHeaderTitleWidthForSection:]((uint64_t)rowData, a5));
      uint64_t v10 = -[UITableViewRowData headerAlignmentForSection:]((uint64_t)self->_rowData, a5);
    }
    else
    {
      objc_msgSend(v11, "setMaxTitleWidth:", -[UITableViewRowData maxFooterTitleWidthForSection:]((uint64_t)rowData, a5));
      uint64_t v10 = -[UITableViewRowData footerAlignmentForSection:]((uint64_t)self->_rowData, a5);
    }
    [v11 setTextAlignment:v10];
  }
  [v11 _setupLabelAppearance];
}

- (double)_headerFooterLeadingMarginWidthIsHeader:(BOOL)a3 isFirstSection:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  if (dyld_program_sdk_at_least())
  {
    int v7 = *((_DWORD *)&self->super.super._viewFlags + 4);
    [(UITableView *)self _sectionContentInset];
    double v9 = v8;
    double v11 = v10;
    [(UITableView *)self _tableContentInset];
    double v13 = fmax(v9 - v12, 0.0);
    double v15 = fmax(v11 - v14, 0.0);
    if ((*(void *)&v7 & 0x80000) != 0) {
      double v16 = v15;
    }
    else {
      double v16 = v13;
    }
    CGFloat left = self->_separatorInset.left;
    BOOL v18 = [(UITableView *)self _separatorInsetIsRelativeToCellEdges];
    if (v16 == 0.0)
    {
      [(UITableView *)self _defaultMarginWidth];
      double v20 = v19;
    }
    else
    {
      long long v23 = [(UIView *)self traitCollection];
      uint64_t v24 = [v23 userInterfaceIdiom];

      constants = self->_constants;
      if (v24 == 6)
      {
        [(UITableConstants *)constants defaultHeaderFooterLayoutMarginsForTableViewStyle:[(UITableView *)self style] isHeader:v5 isFirstSection:v4];
        double v27 = v26;
        double v20 = v28;
      }
      else
      {
        uint64_t v30 = [(UIView *)self window];
        long long v31 = [v30 screen];
        [(UIView *)self->_wrapperView frame];
        -[UITableConstants defaultTableLayoutMarginsForScreen:size:tableStyle:](constants, "defaultTableLayoutMarginsForScreen:size:tableStyle:", v31, [(UITableView *)self style], v32, v33);
        double v27 = v34;
        double v20 = v35;
      }
      if ((*(void *)&v7 & 0x80000) == 0) {
        double v20 = v27;
      }
    }
    [(UIView *)self directionalLayoutMargins];
    double v37 = v36;
    BOOL v38 = [(UITableView *)self _shouldApplyReadableWidthInsets];
    if (v16 <= 0.0)
    {
      char v39 = left == -1.0 || v18;
      if (left == -1.0) {
        double result = v20;
      }
      else {
        double result = left;
      }
      if ((v39 & 1) == 0)
      {
        BOOL v40 = v38;
        int v41 = dyld_program_sdk_at_least();
        double v42 = -0.0;
        if (v40 | v41) {
          double v42 = v37;
        }
        return left + v42;
      }
    }
    else
    {
      return v16 + v20;
    }
  }
  else
  {
    double v21 = self->_sectionContentInset.left;
    if (v21 == -1.0)
    {
      [(UITableView *)self _defaultMarginWidth];
    }
    else
    {
      [(UITableView *)self separatorInset];
      return v21 + v29;
    }
  }
  return result;
}

- (double)_headerFooterTrailingMarginWidth
{
  if ((dyld_program_sdk_at_least() & 1) == 0) {
    return self->_sectionContentInset.right;
  }
  int v3 = *((_DWORD *)&self->super.super._viewFlags + 4);
  [(UITableView *)self _sectionContentInset];
  double v5 = v4;
  double v7 = v6;
  [(UITableView *)self _tableContentInset];
  double v9 = fmax(v5 - v8, 0.0);
  double v11 = fmax(v7 - v10, 0.0);
  if ((*(void *)&v3 & 0x80000) != 0) {
    double v12 = v9;
  }
  else {
    double v12 = v11;
  }
  double right = self->_separatorInset.right;
  BOOL v14 = [(UITableView *)self _separatorInsetIsRelativeToCellEdges];
  if (v12 == 0.0)
  {
    [(UITableView *)self _defaultTrailingCellMarginWidth];
    double v22 = v23;
  }
  else
  {
    constants = self->_constants;
    double v16 = [(UIView *)self window];
    id v17 = [v16 screen];
    [(UIView *)self->_wrapperView frame];
    -[UITableConstants defaultTableLayoutMarginsForScreen:size:tableStyle:](constants, "defaultTableLayoutMarginsForScreen:size:tableStyle:", v17, [(UITableView *)self style], v18, v19);
    if ((*(void *)&v3 & 0x80000) != 0) {
      double v22 = v20;
    }
    else {
      double v22 = v21;
    }
  }
  [(UITableView *)self _indexBarExtentFromEdge];
  double v25 = v24;
  [(UIView *)self directionalLayoutMargins];
  double v27 = v26;
  BOOL v28 = [(UITableView *)self _shouldApplyReadableWidthInsets];
  if (v12 <= 0.0)
  {
    if (right == -1.0)
    {
      double v29 = fmax(v25, v27);
      if (v28) {
        double right = v29;
      }
      else {
        double right = v25;
      }
    }
    else if (!v14)
    {
      double v30 = right + fmax(v27, v25);
      if (v28) {
        double right = v30;
      }
      else {
        double right = right + v25;
      }
    }
    double v31 = -0.0;
    if (!v28) {
      double v31 = v22;
    }
    return v31 + right;
  }
  return v22;
}

- (BOOL)_shouldApplyReadableWidthInsets
{
  BOOL v3 = [(UITableView *)self cellLayoutMarginsFollowReadableWidth];
  if (v3)
  {
    LOBYTE(v3) = [(UIView *)self _safeAreaWidthExceedsReadableWidth];
  }
  return v3;
}

- (double)_defaultMarginWidth
{
  [(UITableConstants *)self->_constants defaultMarginWidthForTableView:self];
  return result;
}

- (BOOL)_shouldStripHeaderTopPaddingForSection:(int64_t)a3
{
  BOOL v3 = 0;
  int64_t v4 = a3 - 1;
  if (a3 >= 1 && ((*((void *)&self->_tableFlags + 1) >> 45) & 3uLL) - 3 >= 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t tableFlags = (uint64_t)self->_tableFlags;
    if ((tableFlags & 0x800000000) != 0)
    {
      double v8 = [(UITableView *)self _delegateProxy];
      [v8 tableView:self heightForFooterInSection:v4];
      double v10 = v9;

      if (v10 != -1.0) {
        return 0;
      }
      uint64_t tableFlags = (uint64_t)self->_tableFlags;
    }
    if ((tableFlags & 0x10) != 0)
    {
      double v11 = [(UITableView *)self _dataSourceProxy];
      double v12 = [v11 tableView:self titleForFooterInSection:a3];
      BOOL v3 = v12 != 0;

      return v3;
    }
    return 0;
  }
  return v3;
}

- (CGFloat)sectionFooterHeight
{
  return self->_sectionFooterHeight;
}

- (BOOL)_isTopHeaderForSection:(int64_t)a3
{
  if (a3) {
    return 0;
  }
  return !dyld_program_sdk_at_least()
      || ![(UIScrollView *)self _shouldAdjustLayoutToCollapseTopSpacing];
}

- (UITableViewHeaderFooterView)dequeueReusableHeaderFooterViewWithIdentifier:(NSString *)identifier
{
  int64_t v4 = [(UITableView *)self _dequeueReusableViewOfType:2 withIdentifier:identifier];
  if (_IsKindOfUITableViewHeaderFooterView(v4)) {
    [(UITableView *)self _setupSectionView:v4 isHeader:(*((void *)&self->_tableFlags + 2) & 0x200) == 0 forSection:0x7FFFFFFFFFFFFFFFLL];
  }
  return (UITableViewHeaderFooterView *)v4;
}

- (void)registerClass:(Class)aClass forHeaderFooterViewReuseIdentifier:(NSString *)identifier
{
  double v10 = identifier;
  if ([(NSString *)v10 length])
  {
    if (!aClass) {
      goto LABEL_6;
    }
  }
  else
  {
    double v7 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v8 = *MEMORY[0x1E4F1C3C8];
    double v9 = NSStringFromSelector(a2);
    [v7 raise:v8, @"must pass a valid reuse identifier to -[UITableView %@]", v9 format];

    if (!aClass) {
      goto LABEL_6;
    }
  }
  if (([(objc_class *)aClass isSubclassOfClass:objc_opt_class()] & 1) == 0
    && (Class)objc_opt_class() != aClass)
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"must pass a class of kind %@", objc_opt_class() format];
  }
LABEL_6:
  [(UITableView *)self _registerThing:aClass asNib:0 forViewType:2 withReuseIdentifer:v10];
}

- (void)registerClass:(Class)cellClass forCellReuseIdentifier:(NSString *)identifier
{
  double v10 = identifier;
  if ([(NSString *)v10 length])
  {
    if (!cellClass) {
      goto LABEL_6;
    }
  }
  else
  {
    double v7 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v8 = *MEMORY[0x1E4F1C3C8];
    double v9 = NSStringFromSelector(a2);
    [v7 raise:v8, @"must pass a valid reuse identifier to -[UITableView %@]", v9 format];

    if (!cellClass) {
      goto LABEL_6;
    }
  }
  if (([(objc_class *)cellClass isSubclassOfClass:objc_opt_class()] & 1) == 0
    && (Class)objc_opt_class() != cellClass)
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8], @"must pass a class of kind %@", objc_opt_class() format];
  }
LABEL_6:
  [(UITableView *)self _registerThing:cellClass asNib:0 forViewType:1 withReuseIdentifer:v10];
}

- (void)_registerThing:(id)a3 asNib:(BOOL)a4 forViewType:(int)a5 withReuseIdentifer:(id)a6
{
  uint64_t v7 = *(void *)&a5;
  BOOL v8 = a4;
  id v15 = a3;
  id v10 = a6;
  double v11 = [(UITableView *)self _classMapForType:v7];
  double v12 = [(UITableView *)self _nibMapForType:v7];
  if (v8)
  {
    uint64_t v13 = [(UITableView *)self _nibMapForType:v7];

    uint64_t v14 = [(UITableView *)self _classMapForType:v7];

    double v11 = (void *)v13;
    double v12 = (void *)v14;
  }
  [v12 removeObjectForKey:v10];
  if (v15) {
    [v11 setObject:v15 forKey:v10];
  }
  else {
    [v11 removeObjectForKey:v10];
  }
}

- (id)_dequeueReusableViewOfType:(int)a3 withIdentifier:(id)a4
{
  uint64_t v4 = *(void *)&a3;
  id v7 = a4;
  BOOL v8 = [(UITableView *)self _cellReuseMapForType:v4];
  double v9 = [v8 objectForKey:v7];

  id v10 = [v9 lastObject];
  if (v10)
  {
    [v9 removeObject:v10];
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = __57__UITableView__dequeueReusableViewOfType_withIdentifier___block_invoke;
    v29[3] = &unk_1E52D9F70;
    id v11 = v10;
    id v30 = v11;
    +[UIView performWithoutAnimation:v29];
    id v12 = v11;
  }
  else
  {
    uint64_t v13 = [(UITableView *)self _nibMapForType:v4];
    uint64_t v14 = [v13 valueForKey:v7];

    if (v14)
    {
      id v15 = [(UITableView *)self _nibExternalObjectsTablesForType:v4];
      double v16 = [v15 objectForKey:v7];

      if (v16)
      {
        uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v16 forKey:@"UINibExternalObjects"];
      }
      else
      {
        uint64_t v17 = 0;
      }
      BOOL v28 = (void *)v17;
      double v21 = [v14 instantiateWithOwner:0 options:v17];
      id v12 = 0;
      if ([v21 count] == 1)
      {
        id v12 = [v21 objectAtIndexedSubscript:0];
      }
      uint64_t v22 = objc_opt_class();
      if (!v12 || (objc_opt_isKindOfClass() & 1) == 0)
      {
        [MEMORY[0x1E4F28B00] currentHandler];
        double v25 = v26 = v22;
        [v25 handleFailureInMethod:a2, self, @"UITableView.m", 10068, @"invalid nib registered for identifier (%@) - nib must contain exactly one top level object which must be a %@ instance", v7, v26 object file lineNumber description];
      }
      double v23 = [v12 reuseIdentifier];
      if ([v23 length] && (objc_msgSend(v23, "isEqualToString:", v7) & 1) == 0)
      {
        double v27 = [MEMORY[0x1E4F28B00] currentHandler];
        [v27 handleFailureInMethod:a2, self, @"UITableView.m", 10070, @"cell reuse indentifier in nib (%@) does not match the identifier used to register the nib (%@)", v23, v7 object file lineNumber description];
      }
      [v12 setReuseIdentifier:v7];
    }
    else
    {
      double v18 = [(UITableView *)self _classMapForType:v4];
      double v19 = (objc_class *)(id)[v18 valueForKey:v7];

      id v20 = [v19 alloc];
      if (v4 == 1)
      {
        id v12 = (id)[v20 initWithStyle:0 reuseIdentifier:v7];
        [v12 setReuseIdentifier:v7];
      }
      else
      {
        id v12 = (id)[v20 initWithReuseIdentifier:v7];
      }
    }
  }
  return v12;
}

- (void)_ensureReturnedView:(id)a3 isNotContainedInReusePoolForViewType:(int)a4
{
  uint64_t v4 = *(void *)&a4;
  id v9 = a3;
  double v6 = [v9 reuseIdentifier];
  if (v6)
  {
    id v7 = [(UITableView *)self _cellReuseMapForType:v4];
    BOOL v8 = [v7 objectForKey:v6];

    if (v8 && [v8 containsObject:v9]) {
      [v8 removeObject:v9];
    }
  }
}

- (id)_cellReuseMapForType:(int)a3
{
  if ((a3 - 2) < 2)
  {
    reusableHeaderFooterViews = self->_reusableHeaderFooterViews;
    if (!reusableHeaderFooterViews)
    {
      double v5 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
      double v6 = self->_reusableHeaderFooterViews;
      self->_reusableHeaderFooterViews = v5;

      reusableHeaderFooterViews = self->_reusableHeaderFooterViews;
    }
    goto LABEL_6;
  }
  if (a3 == 1)
  {
    reusableHeaderFooterViews = self->_reusableTableCells;
LABEL_6:
    BOOL v8 = reusableHeaderFooterViews;
    goto LABEL_8;
  }
  id v10 = [MEMORY[0x1E4F28B00] currentHandler];
  objc_msgSend(v10, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UITableView.m", 5474, @"attempt to access view reuse map for unknown view type %ld", a3);

  BOOL v8 = 0;
LABEL_8:
  return v8;
}

- (id)_nibMapForType:(int)a3
{
  if ((a3 & 0xFFFFFFFE) == 2)
  {
    uint64_t v4 = 2280;
  }
  else
  {
    if (a3 != 1)
    {
      id v12 = [MEMORY[0x1E4F28B00] currentHandler];
      objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UITableView.m", 5488, @"attempt to access nib map for unknown view type %ld", a3);
    }
    uint64_t v4 = 2264;
  }
  double v6 = (void **)((char *)&self->super.super.super.super.isa + v4);
  id v7 = *v6;
  if (!*v6)
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v9 = *v6;
    *double v6 = v8;

    id v7 = *v6;
  }
  return v7;
}

- (id)_classMapForType:(int)a3
{
  if ((a3 & 0xFFFFFFFE) == 2)
  {
    uint64_t v4 = 2792;
  }
  else
  {
    if (a3 != 1)
    {
      id v12 = [MEMORY[0x1E4F28B00] currentHandler];
      objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UITableView.m", 5518, @"attempt to access cell class map for unknown view type %ld", a3);
    }
    uint64_t v4 = 2784;
  }
  double v6 = (void **)((char *)&self->super.super.super.super.isa + v4);
  id v7 = *v6;
  if (!*v6)
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v9 = *v6;
    *double v6 = v8;

    id v7 = *v6;
  }
  return v7;
}

- (void)setBackgroundColor:(id)a3
{
  p_uint64_t tableFlags = &self->_tableFlags;
  uint64_t v4 = *((void *)&self->_tableFlags + 2);
  if ((v4 & 0x4000000000) == 0)
  {
    uint64_t v5 = *((void *)&self->_tableFlags + 3);
    *((void *)&self->_tableFlags + 2) = v4 | 0x4000000000;
    *((void *)&self->_tableFlags + 3) = v5;
    [(UITableView *)self _setBackgroundColor:a3 animated:0];
    *((void *)p_tableFlags + 2) &= ~0x4000000000uLL;
  }
}

- (void)_setBackgroundColor:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  uint64_t v8 = MEMORY[0x1E4F143A8];
  uint64_t v9 = 3221225472;
  id v10 = __44__UITableView__setBackgroundColor_animated___block_invoke_2;
  id v11 = &unk_1E52D9F98;
  id v7 = v6;
  id v12 = v7;
  uint64_t v13 = self;
  +[UIView conditionallyAnimate:v4 withAnimation:&__block_literal_global_883 layout:&v8 completion:0];
  if ([(UITableView *)self _shouldSetIndexBackgroundColorToTableBackgroundColor]&& !self->_indexBackgroundColor)
  {
    [(UIView *)self->_index setBackgroundColor:v7];
  }
}

id __44__UITableView__setBackgroundColor_animated___block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3.receiver = *(id *)(a1 + 40);
  v3.super_class = (Class)UITableView;
  return objc_msgSendSuper2(&v3, sel_setBackgroundColor_, v1);
}

- (BOOL)_shouldSetIndexBackgroundColorToTableBackgroundColor
{
  objc_super v3 = [(UIScrollView *)self _staticScrollBar];
  if (v3)
  {
    BOOL v4 = 0;
  }
  else
  {
    uint64_t v5 = [(UIView *)self traitCollection];
    BOOL v4 = [v5 userInterfaceIdiom] == 3;
  }
  return v4;
}

- (void)_performBatchUpdates:(id)a3 withContext:(id)a4 completion:(id)a5
{
  uint64_t v8 = (void (**)(void))a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = self->_updateCompletionHandler;
  uint64_t v16 = MEMORY[0x1E4F143A8];
  uint64_t v17 = 3221225472;
  double v18 = __59__UITableView__performBatchUpdates_withContext_completion___block_invoke;
  double v19 = &unk_1E52E45A0;
  id v12 = v11;
  id v20 = v12;
  id v13 = v10;
  id v21 = v13;
  uint64_t v14 = (void *)[&v16 copy];
  id updateCompletionHandler = self->_updateCompletionHandler;
  self->_id updateCompletionHandler = v14;

  if ((*((unsigned char *)&self->_tableFlags + 27) & 0x20) == 0 || (dyld_program_sdk_at_least() & 1) == 0) {
    [(UIView *)self layoutBelowIfNeeded];
  }
  [(UITableView *)self beginUpdates];
  if (v8) {
    v8[2](v8);
  }
  [(UITableView *)self endUpdatesWithContext:v9];
}

- (void)endUpdatesWithContext:(id)a3
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &endUpdatesWithContext____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    id v7 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = v7;
      int v10 = 138412546;
      id v11 = (id)objc_opt_class();
      __int16 v12 = 2048;
      id v13 = self;
      id v9 = v11;
      _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "<%@ %p> endUpdatesWithContext", (uint8_t *)&v10, 0x16u);
    }
  }
  int64_t v6 = self->_updateCount - 1;
  self->_int64_t updateCount = v6;
  if (!v6) {
    [(UITableView *)self _endCellAnimationsWithContext:v4];
  }
}

- (void)_didChangeFromIdiom:(int64_t)a3 onScreen:(id)a4 traverseHierarchy:(BOOL)a5
{
  v23.receiver = self;
  v23.super_class = (Class)UITableView;
  [(UIScrollView *)&v23 _didChangeFromIdiom:a3 onScreen:a4 traverseHierarchy:a5];
  [(UITableView *)self _updateConstants];
  int64_t v6 = [(UIView *)self _screen];
  uint64_t v7 = [v6 _userInterfaceIdiom];

  if (v7 == 3)
  {
    uint64_t v8 = [(UIView *)self window];
    id v9 = [v8 _screen];
    int v10 = [v9 _capabilityForKey:@"UIScreenCapabilityTouchLevelsKey"];
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xF7FFFFFFFFFFFFFFLL | ((unint64_t)([v10 integerValue] != 2) << 59);

    self->_currentIndexTitleIndedouble x = [(UITableView *)self _currentSectionIndexTitleIndex];
    [(UITableView *)self _configureIndexOverlayIndicatorViewIfNecessary];
    [(UITableView *)self _configureIndexOverlaySelectionViewIfNecessary];
    id v11 = [(UIView *)self window];
    __int16 v12 = [v11 _screen];
    id v13 = [v12 _capabilityForKey:@"UIScreenCapabilityInteractionModelsKey"];
    char v14 = [v13 integerValue];

    if ((v14 & 2) != 0)
    {
      if (!self->_upArrowLongPressGestureRecognizer)
      {
        id v15 = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:sel__upArrowLongPress_];
        upArrowLongPressGestureRecognizer = self->_upArrowLongPressGestureRecognizer;
        self->_upArrowLongPressGestureRecognizer = v15;

        [(UIGestureRecognizer *)self->_upArrowLongPressGestureRecognizer setAllowedPressTypes:&unk_1ED3F1360];
        [(UIView *)self addGestureRecognizer:self->_upArrowLongPressGestureRecognizer];
      }
      if (!self->_downArrowLongPressGestureRecognizer)
      {
        uint64_t v17 = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:sel__downArrowLongPress_];
        downArrowLongPressGestureRecognizer = self->_downArrowLongPressGestureRecognizer;
        self->_downArrowLongPressGestureRecognizer = v17;

        [(UIGestureRecognizer *)self->_downArrowLongPressGestureRecognizer setAllowedPressTypes:&unk_1ED3F1378];
        [(UIView *)self addGestureRecognizer:self->_downArrowLongPressGestureRecognizer];
      }
      if (!self->_upArrowTapGestureRecognizer)
      {
        double v19 = [[UITapGestureRecognizer alloc] initWithTarget:self action:sel__upArrowTap_];
        upArrowTapGestureRecognizer = self->_upArrowTapGestureRecognizer;
        self->_upArrowTapGestureRecognizer = v19;

        [(UITapGestureRecognizer *)self->_upArrowTapGestureRecognizer setAllowedPressTypes:&unk_1ED3F1390];
        [(UIView *)self addGestureRecognizer:self->_upArrowTapGestureRecognizer];
      }
      if (!self->_downArrowTapGestureRecognizer)
      {
        id v21 = [[UITapGestureRecognizer alloc] initWithTarget:self action:sel__downArrowTap_];
        downArrowTapGestureRecognizer = self->_downArrowTapGestureRecognizer;
        self->_downArrowTapGestureRecognizer = v21;

        [(UITapGestureRecognizer *)self->_downArrowTapGestureRecognizer setAllowedPressTypes:&unk_1ED3F13A8];
        [(UIView *)self addGestureRecognizer:self->_downArrowTapGestureRecognizer];
      }
    }
  }
  else
  {
    [(UITableView *)self _tearDownIndexOverlayViews];
  }
}

- (void)_updateConstants
{
  objc_super v3 = self->_constants;
  id v4 = [(UITableView *)self _resolvedTableConstants];
  constants = self->_constants;
  self->_constants = v4;

  int64_t v6 = self->_constants;
  if (v3 != v6)
  {
    [(UITableView *)self _updateConstantsForVisibleCellsAndHeaderFooterViews];
    [(UITableView *)self _rebuildGeometry];
  }
}

- (void)_tearDownIndexOverlayViews
{
  [(UIView *)self->_indexOverlayIndicatorView removeFromSuperview];
  indexOverlayIndicatorView = self->_indexOverlayIndicatorView;
  self->_indexOverlayIndicatorView = 0;

  [(UIView *)self->_indexOverlaySelectionView removeFromSuperview];
  indexOverlaySelectionView = self->_indexOverlaySelectionView;
  self->_indexOverlaySelectionView = 0;
}

- (void)_setUsesStaticScrollBar:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v5 = [(UIScrollView *)self _staticScrollBar];
  int64_t v6 = v5;
  if (!v5 || v3)
  {
    uint64_t v7 = [(UIScrollView *)self _staticScrollBar];

    v10.receiver = self;
    v10.super_class = (Class)UITableView;
    [(UIScrollView *)&v10 _setUsesStaticScrollBar:v3];
    if (v7 || !v3)
    {
      [(UITableView *)self _addIndexToAppropriateContainer];
      return;
    }
  }
  else
  {

    v10.receiver = self;
    v10.super_class = (Class)UITableView;
    [(UIScrollView *)&v10 _setUsesStaticScrollBar:0];
  }
  [(UITableView *)self _updateWrapperView];
  [(UITableView *)self _addIndexToAppropriateContainer];
  [(UITableView *)self _updateWrapperFrame];
  rowData = self->_rowData;
  [(UIView *)self bounds];
  -[UITableView _widthForContentInRect:](self, "_widthForContentInRect:");
  if (rowData) {
    rowData->_tableViewCGFloat Width = v9;
  }
  [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1];
}

- (void)_addIndexToAppropriateContainer
{
  BOOL v3 = [(UIView *)self traitCollection];
  uint64_t v4 = [v3 userInterfaceIdiom];

  if (v4 == 3)
  {
    uint64_t v5 = [(UIView *)self window];
    int64_t v6 = [v5 _screen];
    uint64_t v7 = [v6 _capabilityForKey:@"UIScreenCapabilityTouchLevelsKey"];
    uint64_t v8 = [v7 integerValue];

    if (v8 == 2)
    {
      [(UITableView *)self _removeIndex];
      return;
    }
    indexContainerView = self->_indexContainerView;
    double v9 = [(UIScrollView *)self _staticScrollBar];
    id v12 = v9;
    if (indexContainerView)
    {
      [v9 addSubview:self->_indexContainerView];

      double v9 = [(UIScrollView *)self _staticScrollBar];
      id v12 = v9;
      uint64_t v10 = 1;
      goto LABEL_10;
    }
  }
  else
  {
    [(UITableView *)self _addContentSubview:self->_indexContainerView atBack:0];
    double v9 = [(UIScrollView *)self _staticScrollBar];
    id v12 = v9;
  }
  uint64_t v10 = 0;
LABEL_10:
  [v9 setShouldInsetButtonsForIndex:v10];
}

- (void)_updateSelectionGroupingForCell:(id)a3 atIndexPath:(id)a4
{
  id v45 = a3;
  id v6 = a4;
  if ([(UITableView *)self _allowsEffectiveMultipleSelection]
    && [(UITableView *)self _shouldIncludeRowInMultipleSelectionGroupWithCell:v45 atIndexPath:v6])
  {
    int64_t v7 = [(UITableView *)self globalRowForRowAtIndexPath:v6];
    int64_t v8 = v7;
    BOOL v9 = (*((unsigned char *)&self->_tableFlags + 28) & 1) == 0 && self->_indexPathBeingCreated == 0;
    uint64_t v10 = [(UITableView *)self indexPathForRowAtGlobalRow:v7 + 1];
    id v11 = (void *)v10;
    id v12 = 0;
    if (v9 && v10)
    {
      id v12 = [(UITableView *)self _cellForRowAtIndexPath:v10 usingPresentationValues:1];
    }
    BOOL v13 = [(UITableView *)self _shouldIncludeRowInMultipleSelectionGroupWithCell:v12 atIndexPath:v11];
    char v14 = [(UITableView *)self indexPathForRowAtGlobalRow:v8 - 1];
    if (v14) {
      BOOL v15 = v9;
    }
    else {
      BOOL v15 = 0;
    }
    if (v15)
    {
      uint64_t v16 = [(UITableView *)self _cellForRowAtIndexPath:v14 usingPresentationValues:1];
    }
    else
    {
      uint64_t v16 = 0;
    }
    BOOL v17 = [(UITableView *)self _shouldIncludeRowInMultipleSelectionGroupWithCell:v16 atIndexPath:v14];
    if (v13 || v17)
    {
      BOOL v18 = v17;
      [(UITableView *)self _rectForRowAtIndexPath:v6 canGuess:1];
      CGFloat v20 = v19;
      CGFloat v22 = v21;
      CGFloat v24 = v23;
      CGFloat v26 = v25;
      [(UIView *)self _currentScreenScale];
      double v28 = 1.0 / v27;
      if (v13)
      {
        [(UITableView *)self _rectForRowAtIndexPath:v11 canGuess:1];
        double MinY = CGRectGetMinY(v47);
        v48.origin.double x = v20;
        v48.origin.double y = v22;
        v48.size.double width = v24;
        v48.size.double height = v26;
        LOBYTE(v13) = MinY - CGRectGetMaxY(v48) < v28;
      }
      if (v18)
      {
        [(UITableView *)self _rectForRowAtIndexPath:v14 canGuess:1];
        CGFloat v31 = v30;
        CGFloat v32 = v22;
        double v33 = v28;
        CGFloat v35 = v34;
        CGFloat v37 = v36;
        CGFloat v39 = v38;
        v49.origin.double x = v20;
        v49.origin.double y = v32;
        v49.size.double width = v24;
        v49.size.double height = v26;
        double v40 = CGRectGetMinY(v49);
        v50.origin.double x = v31;
        v50.origin.double y = v35;
        v50.size.double width = v37;
        v50.size.double height = v39;
        BOOL v41 = v40 - CGRectGetMaxY(v50) < v33;
        if (v13) {
          unsigned int v42 = 2;
        }
        else {
          unsigned int v42 = 4;
        }
        if (v13 && v41) {
          unsigned int v43 = 1;
        }
        else {
          unsigned int v43 = 3;
        }
        if (v41) {
          uint64_t v44 = v43;
        }
        else {
          uint64_t v44 = v42;
        }
      }
      else if (v13)
      {
        uint64_t v44 = 2;
      }
      else
      {
        uint64_t v44 = 4;
      }
    }
    else
    {
      uint64_t v44 = 4;
    }
    [v45 _setSelectionGrouping:v44];
  }
  else
  {
    [v45 _setSelectionGrouping:4];
  }
}

- (BOOL)_allowsEffectiveMultipleSelection
{
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) != 0) {
    int v2 = 0x2000;
  }
  else {
    int v2 = 4096;
  }
  return (v2 & *((_DWORD *)&self->_tableFlags + 4)) != 0;
}

- (void)setBackgroundView:(UIView *)backgroundView
{
  uint64_t v5 = backgroundView;
  id v6 = self->_backgroundView;
  if (v6 != v5)
  {
    int64_t v7 = v5;
    [(UIView *)v6 removeFromSuperview];
    objc_storeStrong((id *)&self->_backgroundView, backgroundView);
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFE7FFFFFFFFFLL | 0x8000000000;
    [(UITableView *)self _configureBackgroundView];
    uint64_t v5 = v7;
  }
}

- (void)_setBackgroundEffects:(id)a3
{
  id v7 = a3;
  if (v7)
  {
    backgroundView = self->_backgroundView;
    if (backgroundView)
    {
      if (*((unsigned char *)&self->_tableFlags + 21))
      {
        uint64_t v5 = backgroundView;
        goto LABEL_9;
      }
      [(UIView *)backgroundView removeFromSuperview];
    }
    uint64_t v5 = objc_alloc_init(UIVisualEffectView);
    objc_storeStrong((id *)&self->_backgroundView, v5);
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFE7FFFFFFFFFLL | 0x10000000000;
LABEL_9:
    [(UIVisualEffectView *)v5 setBackgroundEffects:v7];

    goto LABEL_10;
  }
  if (*((unsigned char *)&self->_tableFlags + 21))
  {
    [(UIView *)self->_backgroundView removeFromSuperview];
    id v6 = self->_backgroundView;
    self->_backgroundView = 0;

    *((void *)&self->_tableFlags + 2) &= ~0x10000000000uLL;
  }
LABEL_10:
  [(UITableView *)self _configureBackgroundView];
}

- (void)_configureBackgroundView
{
  backgroundView = self->_backgroundView;
  if (backgroundView)
  {
    [(UIView *)backgroundView setAutoresizingMask:18];
    uint64_t v4 = self->_backgroundView;
    [(UIView *)self bounds];
    -[UIView setFrame:](v4, "setFrame:");
    uint64_t v5 = self->_backgroundView;
    [(UITableView *)self _addContentSubview:v5 atBack:1];
  }
}

- (void)_preparePrefetchContext
{
  if (!self->_prefetchContext && (*((unsigned char *)&self->_tableFlags + 26) & 2) != 0)
  {
    BOOL v3 = (_UITableViewPrefetchContext *)-[_UITableViewPrefetchContext initWithMaxIndex:prefetchItemCount:refreshPrefetchThresholdCount:cancelThresholdCount:]([_UITableViewPrefetchContext alloc], [(UITableView *)self _lastGlobalRowIndex], 10, 9, 15);
    prefetchContext = self->_prefetchContext;
    self->_prefetchContext = v3;
  }
  [(UITableView *)self _configureDataSourcePrefetchingHandlers];
  [(UITableView *)self _configureCellPrefetchingHandlers];
}

- (void)_configureDataSourcePrefetchingHandlers
{
  prefetchContext = self->_prefetchContext;
  if (prefetchContext && (id v4 = prefetchContext->_requestHandler) != 0)
  {
    BOOL v5 = 1;
  }
  else
  {
    id v6 = self->_prefetchContext;
    if (v6) {
      id v6 = (_UITableViewPrefetchContext *)v6->_cancelHandler;
    }
    id v7 = v6;
    BOOL v5 = v7 != 0;

    id v4 = 0;
  }

  uint64_t v9 = *((void *)&self->_tableFlags + 3) & 0x60000;
  if (v5 || v9 != 393216)
  {
    if (v9 != 393216 && v5)
    {
      BOOL v15 = self->_prefetchContext;
      if (v15)
      {
        objc_setProperty_nonatomic_copy(v15, v8, 0, 16);
        BOOL v17 = self->_prefetchContext;
        if (v17)
        {
          objc_setProperty_nonatomic_copy(v17, v16, 0, 24);
        }
      }
    }
  }
  else
  {
    objc_initWeak(&location, self);
    newValue[0] = MEMORY[0x1E4F143A8];
    newValue[1] = 3221225472;
    newValue[2] = __54__UITableView__configureDataSourcePrefetchingHandlers__block_invoke;
    newValue[3] = &unk_1E52FED78;
    objc_copyWeak(&v21, &location);
    id v11 = self->_prefetchContext;
    if (v11) {
      objc_setProperty_nonatomic_copy(v11, v10, newValue, 16);
    }
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = __54__UITableView__configureDataSourcePrefetchingHandlers__block_invoke_2;
    v18[3] = &unk_1E52FED78;
    objc_copyWeak(&v19, &location);
    BOOL v13 = self->_prefetchContext;
    if (v13) {
      objc_setProperty_nonatomic_copy(v13, v12, v18, 24);
    }
    objc_destroyWeak(&v19);
    objc_destroyWeak(&v21);
    objc_destroyWeak(&location);
  }
}

- (void)_resignOrRebaseFirstResponderViewWithUpdateSupport:(id)a3 indexPathMapping:(id)a4
{
  id v25 = a3;
  CGFloat v24 = (void (**)(id, NSIndexPath *))a4;
  if ([(UITableView *)self _isFirstResponderInDeletedSectionOrRow:v25])
  {
    unint64_t v7 = 0;
    do
    {
      int64_t v8 = [(UIView *)self window];
      uint64_t v9 = [v8 firstResponder];

      uint64_t v10 = self->_firstResponderView;
      id v11 = self->_firstResponderIndexPath;
      int v12 = [v9 resignFirstResponder];
      BOOL v13 = [(UIView *)self window];
      char v14 = [v13 firstResponder];

      if (!v12 || v9 == v14)
      {
        BOOL v15 = [MEMORY[0x1E4F28B00] currentHandler];
        uint64_t v16 = v15;
        BOOL v17 = @"NO";
        if (v12) {
          BOOL v17 = @"YES";
        }
        [v15 handleFailureInMethod:a2, self, @"UITableView.m", 4868, @"The first responder contained inside of a deleted section or row refused to resign.\nFirst responder that was asked to resign (returned %@ from -resignFirstResponder): %@ inside containing view: %@ at index path: %@\nCurrent first responder: %@ inside containing view: %@ at index path: %@", v17, v9, v10, v11, v14, self->_firstResponderView, self->_firstResponderIndexPath object file lineNumber description];
      }
      if (v7 >= 0x64)
      {
        BOOL v18 = [MEMORY[0x1E4F28B00] currentHandler];
        id v19 = v18;
        CGFloat v20 = @"NO";
        if (v12) {
          CGFloat v20 = @"YES";
        }
        [v18 handleFailureInMethod:a2, self, @"UITableView.m", 4869, @"Attempted to delete a section or row containing the first responder, but after repeatedly telling the first responder to resign, the first responder remained inside a deleted section or row. This may be caused by a cycle where the first responder is moving back and forth between the same views.\nFirst responder that was asked to resign (returned %@ from -resignFirstResponder): %@ inside containing view: %@ at index path: %@\nCurrent first responder: %@ inside containing view: %@ at index path: %@", v20, v9, v10, v11, v14, self->_firstResponderView, self->_firstResponderIndexPath object file lineNumber description];
      }
      ++v7;
    }
    while ([(UITableView *)self _isFirstResponderInDeletedSectionOrRow:v25]);
  }
  if (self->_firstResponderView)
  {
    int firstResponderViewType = self->_firstResponderViewType;
    if ((firstResponderViewType - 2) >= 2)
    {
      if (firstResponderViewType != 1)
      {
        firstResponderIndexPath = self->_firstResponderIndexPath;
        self->_firstResponderIndexPath = 0;
        goto LABEL_21;
      }
      v24[2](v24, self->_firstResponderIndexPath);
      CGFloat v22 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, -[_UITableViewUpdateSupport finalSectionIndexForInitialSectionIndex:]((uint64_t)v25, -[NSIndexPath section](self->_firstResponderIndexPath, "section")));
      CGFloat v22 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
    }
    firstResponderIndexPath = self->_firstResponderIndexPath;
    self->_firstResponderIndexPath = v22;
LABEL_21:
  }
}

- (BOOL)_isFirstResponderInDeletedSectionOrRow:(id)a3
{
  id v4 = (uint64_t *)a3;
  BOOL v5 = v4;
  if (!self->_firstResponderView) {
    goto LABEL_9;
  }
  BOOL v6 = 0;
  if (v4)
  {
    firstResponderIndexPath = self->_firstResponderIndexPath;
    if (firstResponderIndexPath)
    {
      int firstResponderViewType = self->_firstResponderViewType;
      if ((firstResponderViewType - 2) < 2)
      {
        uint64_t v9 = -[_UITableViewUpdateSupport finalSectionIndexForInitialSectionIndex:]((uint64_t)v4, [(NSIndexPath *)self->_firstResponderIndexPath section]);
LABEL_8:
        BOOL v6 = v9 == 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_10;
      }
      if (firstResponderViewType == 1)
      {
        unint64_t v10 = -[UITableViewRowData globalRowForRowAtIndexPath:](v4[9], firstResponderIndexPath);
        uint64_t v9 = -[_UITableViewUpdateSupport finalGlobalIndexForInitialGlobalIndex:]((uint64_t)v5, v10);
        goto LABEL_8;
      }
LABEL_9:
      BOOL v6 = 0;
    }
  }
LABEL_10:

  return v6;
}

- (void)_willChangeToIdiom:(int64_t)a3 onScreen:(id)a4
{
  v6.receiver = self;
  v6.super_class = (Class)UITableView;
  [(UIView *)&v6 _willChangeToIdiom:a3 onScreen:a4];
  if (a3 == 3) {
    [(UIScrollView *)self->_wrapperView setScrollEnabled:0];
  }
}

- (void)_setTopPadding:(double)a3
{
  if (self->_topPadding != a3)
  {
    self->_topPadding = a3;
    [(UITableView *)self _invalidateForTopOrBottomPaddingChange:1];
  }
}

- (void)_setBottomPadding:(double)a3
{
  if (self->_bottomPadding != a3)
  {
    self->_bottomPadding = a3;
    [(UITableView *)self _invalidateForTopOrBottomPaddingChange:0];
  }
}

- (double)_marginWidth
{
  double result = self->_separatorInset.left;
  if (result == -1.0) {
    [(UITableView *)self _defaultMarginWidth];
  }
  return result;
}

- (void)willMoveToSuperview:(id)a3
{
  v4.receiver = self;
  v4.super_class = (Class)UITableView;
  [(UIView *)&v4 willMoveToSuperview:a3];
  if ([(UITableView *)self _hasSwipeToDeleteRow])
  {
    if ((*((void *)&self->_tableFlags + 2) & 0x8000100000000000) == 0x100000000000) {
      [(UITableView *)self _setEditing:0 animated:0 forced:0];
    }
  }
}

- (BOOL)_hasSwipeToDeleteRow
{
  return self->_swipedIndexPath != 0;
}

- (void)_updateSeparatorStateForVisibleCells
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  BOOL v3 = (void *)[(NSMutableArray *)self->_visibleCells copy];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        uint64_t v9 = [(UITableView *)self _indexPathForCell:v8 usingPresentationValues:1];
        [(UITableView *)self _updateSeparatorStateForCell:v8 atIndexPath:v9];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
}

- (id)_indexPathForCell:(id)a3 usingPresentationValues:(BOOL)a4
{
  uint64_t v6 = (UIView *)a3;
  uint64_t v7 = [(NSMutableArray *)self->_visibleCells indexOfObject:v6];
  if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_24;
  }
  if ((*((unsigned char *)&self->_tableFlags + 21) & 2) != 0) {
    [(UITableView *)self indexPathForRowAtGlobalRow:self->_visibleRows.location + v7];
  }
  else {
  uint64_t v8 = [(UIView *)v6 _indexPath];
  }
  if (!v8)
  {
LABEL_24:
    -[_UITableViewSubviewManager indexPathForPrefetchedCell:]((id *)&self->_subviewManager->super.isa, (uint64_t)v6);
    uint64_t v8 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
    if (!v8)
    {
      uint64_t v8 = [(UITableView *)self _indexPathForTentativeCell:v6];
      if (!v8)
      {
        if (self->_focusedViewType != 1
          || ([(UITableView *)self _focusedCell],
              uint64_t v9 = (UIView *)objc_claimAutoreleasedReturnValue(),
              v9,
              v9 != v6)
          || ([(UITableView *)self _focusedCellIndexPath],
              (uint64_t v8 = (NSIndexPath *)objc_claimAutoreleasedReturnValue()) == 0))
        {
          if (self->_firstResponderViewType == 1 && self->_firstResponderView == v6) {
            uint64_t v8 = self->_firstResponderIndexPath;
          }
          else {
            uint64_t v8 = 0;
          }
        }
      }
    }
  }
  if (!a4)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v11 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathBeforeShadowUpdates:v8];

      uint64_t v8 = (NSIndexPath *)v11;
    }
  }

  return v8;
}

- (void)bringSubviewToFront:(id)a3
{
  uint64_t v4 = _UITableViewSubviewToMoveForView(a3);
  v5.receiver = self;
  v5.super_class = (Class)UITableView;
  [(UIView *)&v5 bringSubviewToFront:v4];
}

uint64_t __37__UITableView__sectionForHeaderView___block_invoke(uint64_t result, void *a2, uint64_t a3, unsigned char *a4)
{
  if (*(void *)(result + 32) == a3)
  {
    uint64_t v5 = result;
    double result = [a2 integerValue];
    *(void *)(*(void *)(*(void *)(v5 + 40) + 8) + 24) = result;
    *a4 = 1;
  }
  return result;
}

- (void)setSeparatorInsetReference:(UITableViewSeparatorInsetReference)separatorInsetReference
{
  [(UITableView *)self _setSeparatorInsetIsRelativeToCellEdges:separatorInsetReference == UITableViewSeparatorInsetFromCellEdges];
}

- (void)setSeparatorInset:(UIEdgeInsets)separatorInset
{
  if (separatorInset.left != self->_separatorInset.left
    || separatorInset.top != self->_separatorInset.top
    || separatorInset.right != self->_separatorInset.right
    || separatorInset.bottom != self->_separatorInset.bottom)
  {
    self->_separatorInset = separatorInset;
    [(UITableView *)self _adjustExtraSeparators];
    uint64_t v7 = dyld_program_sdk_at_least() ^ 1;
    [(UITableView *)self _updateMarginWidthForVisibleViewsForceLayout:v7];
  }
}

- (void)setInsetsContentViewsToSafeArea:(BOOL)insetsContentViewsToSafeArea
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)&self->_tableFlags + 3);
  if (((((v3 & 0x2000000) == 0) ^ insetsContentViewsToSafeArea) & 1) == 0)
  {
    BOOL v4 = insetsContentViewsToSafeArea;
    uint64_t v6 = 0x2000000;
    if (!insetsContentViewsToSafeArea) {
      uint64_t v6 = 0;
    }
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2);
    *((void *)&self->_tableFlags + 3) = v3 & 0xFFFFFFFFFDFFFFFFLL | v6;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v7 = self->_visibleCells;
    uint64_t v8 = [(NSMutableArray *)v7 countByEnumeratingWithState:&v22 objects:v27 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v23;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v23 != v10) {
            objc_enumerationMutation(v7);
          }
          [*(id *)(*((void *)&v22 + 1) + 8 * i) _setInsetsContentViewsToSafeArea:v4];
        }
        uint64_t v9 = [(NSMutableArray *)v7 countByEnumeratingWithState:&v22 objects:v27 count:16];
      }
      while (v9);
    }

    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v12 = [(UITableView *)self _visibleHeaderFooterViews];
    uint64_t v13 = [v12 countByEnumeratingWithState:&v18 objects:v26 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v19;
      do
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if (*(void *)v19 != v15) {
            objc_enumerationMutation(v12);
          }
          BOOL v17 = *(void **)(*((void *)&v18 + 1) + 8 * j);
          if (_IsKindOfUITableViewHeaderFooterView(v17)) {
            [v17 _setInsetsContentViewsToSafeArea:v4];
          }
        }
        uint64_t v14 = [v12 countByEnumeratingWithState:&v18 objects:v26 count:16];
      }
      while (v14);
    }

    [(UITableView *)self _updateTableHeaderFooterViewInsetsContentViewsToSafeArea];
    [(UITableView *)self _rebuildGeometryWithCompatibility];
  }
}

- (void)setTableFooterView:(UIView *)tableFooterView
{
  uint64_t v11 = tableFooterView;
  if ([(UITableView *)self _shouldUseNewHeaderFooterBehavior])
  {
    uint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    [v10 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:9995 description:@"Cannot explicitliy set footer when using new heightForHeaderInTableView: or heightForFooterInTableView: methods.  Use viewForFooterInTableView: instead."];
  }
  p_tableFooterView = &self->_tableFooterView;
  uint64_t v7 = self->_tableFooterView;
  if (v7 != v11)
  {
    [(UIView *)v7 removeFromSuperview];
    objc_storeStrong((id *)&self->_tableFooterView, tableFooterView);
    if (*p_tableFooterView
      && [(UIView *)*p_tableFooterView translatesAutoresizingMaskIntoConstraints]&& dyld_program_sdk_at_least())
    {
      [(UIView *)*p_tableFooterView _setHostsLayoutEngine:1];
    }
    [(UITableView *)self _addContentSubview:*p_tableFooterView atBack:0];
  }
  [(UITableView *)self _updateTableHeaderFooterViewInsetsContentViewsToSafeArea];
  [(UITableView *)self _ensureRowDataIsLoaded];
  rowData = self->_rowData;
  if (*p_tableFooterView)
  {
    [(UIView *)*p_tableFooterView frame];
    if (!rowData) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  double v9 = 0.0;
  if (rowData) {
LABEL_11:
  }
    rowData->_tableFooterdouble Height = v9;
LABEL_12:
  -[UIView setFrame:](*p_tableFooterView, "setFrame:", -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData));
  [(UITableView *)self _updateContentSize];
}

- (void)_updateTableHeaderFooterViewInsetsContentViewsToSafeArea
{
  if (_IsKindOfUITableViewHeaderFooterView(self->_tableHeaderView)) {
    [(UIView *)self->_tableHeaderView _setInsetsContentViewsToSafeArea:[(UITableView *)self insetsContentViewsToSafeArea]];
  }
  if (_IsKindOfUITableViewHeaderFooterView(self->_tableFooterView))
  {
    tableFooterView = self->_tableFooterView;
    BOOL v4 = [(UITableView *)self insetsContentViewsToSafeArea];
    [(UIView *)tableFooterView _setInsetsContentViewsToSafeArea:v4];
  }
}

- (void)setAllowsSelectionDuringEditing:(BOOL)allowsSelectionDuringEditing
{
  uint64_t v3 = 2048;
  if (!allowsSelectionDuringEditing) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFF7FFLL | v3;
  if (!allowsSelectionDuringEditing) {
    [(UITableView *)self setAllowsMultipleSelectionDuringEditing:0];
  }
}

- (void)setSectionIndexBackgroundColor:(UIColor *)sectionIndexBackgroundColor
{
  uint64_t v5 = sectionIndexBackgroundColor;
  if (self->_indexBackgroundColor != v5)
  {
    uint64_t v6 = v5;
    objc_storeStrong((id *)&self->_indexBackgroundColor, sectionIndexBackgroundColor);
    [(UITableViewIndex *)self->_index setIndexBackgroundColor:self->_indexBackgroundColor];
    uint64_t v5 = v6;
  }
}

- (void)resizeSubviewsWithOldSize:(CGSize)a3
{
  double height = a3.height;
  double width = a3.width;
  [(UITableView *)self _updateIndexFrame];
  v6.receiver = self;
  v6.super_class = (Class)UITableView;
  -[UIView resizeSubviewsWithOldSize:](&v6, sel_resizeSubviewsWithOldSize_, width, height);
}

void __34__UITableView__reapTentativeViews__block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (([*(id *)(a1 + 32) containsObject:v5] & 1) == 0) {
    objc_msgSend(*(id *)(a1 + 40), "_reuseHeaderFooterView:isHeader:forSection:", v5, *(unsigned __int8 *)(a1 + 48), objc_msgSend(v6, "integerValue"));
  }
}

- (void)setSectionIndexColor:(UIColor *)sectionIndexColor
{
  p_indexColor = &self->_indexColor;
  uint64_t v7 = sectionIndexColor;
  if (*p_indexColor != v7)
  {
    objc_storeStrong((id *)&self->_indexColor, sectionIndexColor);
    indedouble x = self->_index;
    if (index) {
      [(UITableViewIndex *)index setIndexColor:*p_indexColor];
    }
  }
}

- (void)_notifyWillDisplayHeaderFooterView:(id)a3 forSection:(int64_t)a4 isHeader:(BOOL)a5
{
  BOOL v5 = a5;
  id v8 = a3;
  uint64_t v9 = *((void *)&self->_tableFlags + 1);
  id v11 = v8;
  if (v5)
  {
    if ((v9 & 0x200) == 0) {
      goto LABEL_7;
    }
    uint64_t v10 = [(UITableView *)self _delegateProxy];
    [v10 tableView:self willDisplayHeaderView:v11 forSection:a4];
  }
  else
  {
    if ((v9 & 0x400) == 0) {
      goto LABEL_7;
    }
    uint64_t v10 = [(UITableView *)self _delegateProxy];
    [v10 tableView:self willDisplayFooterView:v11 forSection:a4];
  }

  id v8 = v11;
LABEL_7:
  if (_IsKindOfUITableViewHeaderFooterView(v8)) {
    [v11 _notifyIsDisplaying:1];
  }
}

- (void)_setHeaderAndFooterViewsFloat:(BOOL)a3
{
  uint64_t v3 = 0x1000000000;
  if (a3) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFEFFFFFFFFFLL | v3;
  [(UITableView *)self _updateVisibleHeadersAndFootersNow:1];
}

void __61__UITableView__ensureInitializeSystemAppearanceModifications__block_invoke(uint64_t a1)
{
  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    int v2 = +[UIDevice currentDevice];
    uint64_t v3 = [v2 userInterfaceIdiom];

    if (((v3 - 1) & 0xFFFFFFFFFFFFFFFBLL) == 0)
    {
      v4[0] = MEMORY[0x1E4F143A8];
      v4[1] = 3221225472;
      void v4[2] = __61__UITableView__ensureInitializeSystemAppearanceModifications__block_invoke_2;
      v4[3] = &__block_descriptor_40_e5_v8__0l;
      v4[4] = *(void *)(a1 + 32);
      +[UIView _performSystemAppearanceModifications:v4];
    }
  }
}

- (void)_setMarginWidth:(double)a3
{
}

- (void)setSectionHeaderTopPadding:(CGFloat)sectionHeaderTopPadding
{
  if (sectionHeaderTopPadding < 0.0) {
    sectionHeaderTopPadding = -1.0;
  }
  if (self->_sectionHeaderTopPadding != sectionHeaderTopPadding)
  {
    self->_sectionHeaderTopPadding = sectionHeaderTopPadding;
    [(UITableView *)self _setNeedsRebuildGeometry];
  }
}

- (void)setSectionHeaderHeight:(CGFloat)sectionHeaderHeight
{
  self->_double sectionHeaderHeight = sectionHeaderHeight;
  if ((*((unsigned char *)&self->_tableFlags + 14) & 7) != 0) {
    [(UITableView *)self _scheduleAdjustExtraSeparators];
  }
}

- (void)setSelectionFollowsFocus:(BOOL)selectionFollowsFocus
{
  uint64_t v3 = 0x4000;
  if (selectionFollowsFocus) {
    uint64_t v3 = 0x8000;
  }
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFF3FFFLL | v3;
  [(UITableView *)self _updateSelectionIsKey];
}

- (void)setDragInteractionEnabled:(BOOL)dragInteractionEnabled
{
  uint64_t v3 = 0x800000;
  if (dragInteractionEnabled) {
    uint64_t v3 = 25165824;
  }
  *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFFFE7FFFFFLL | v3;
  [(UITableView *)self _updateDragControllerEnabledState];
}

- (id)_indexPathForSelectedRowUsingPresentationValues:(BOOL)a3
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  BOOL v5 = self->_selectedIndexPaths;
  uint64_t v6 = [(NSMutableArray *)v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = 0;
    uint64_t v9 = *(void *)v21;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v5);
        }
        id v11 = *(void **)(*((void *)&v20 + 1) + 8 * v10);
        if (!v8
          || (uint64_t v12 = objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * v10), "section", (void)v20),
              v12 < [v8 section])
          || (uint64_t v14 = [v11 section], v14 == objc_msgSend(v8, "section"))
          && (uint64_t v15 = [v11 row], v15 < objc_msgSend(v8, "row")))
        {
          id v13 = v11;

          id v8 = v13;
        }
        ++v10;
      }
      while (v7 != v10);
      uint64_t v16 = [(NSMutableArray *)v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
      uint64_t v7 = v16;
    }
    while (v16);
  }
  else
  {
    id v8 = 0;
  }

  if (!a3)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v18 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathBeforeShadowUpdates:v8];

      id v8 = (void *)v18;
    }
  }
  return v8;
}

- (void)setPrefetchDataSource:(id)prefetchDataSource
{
  id v4 = prefetchDataSource;
  if (!v4)
  {
LABEL_7:
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  char v5 = dyld_program_sdk_at_least();
  uint64_t v6 = v4;
  if ((v5 & 1) == 0)
  {
    unsigned __int8 v7 = objc_msgSend(v4, sel_allowsWeakReference);
    uint64_t v6 = v4;
    if ((v7 & 1) == 0)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __37__UITableView_setPrefetchDataSource___block_invoke;
      block[3] = &unk_1E52D9F98;
      id v27 = v4;
      uint64_t v28 = self;
      if (setPrefetchDataSource__once_0 != -1) {
        dispatch_once(&setPrefetchDataSource__once_0, block);
      }

      goto LABEL_7;
    }
  }
LABEL_8:
  id v8 = v6;

  id WeakRetained = objc_loadWeakRetained((id *)&self->_prefetchDataSource);
  uint64_t v10 = WeakRetained;
  if (WeakRetained != v8 || !v8 && (*((unsigned char *)&self->_tableFlags + 26) & 4) != 0)
  {
    if (WeakRetained) {
      objc_setAssociatedObject(WeakRetained, (char *)&self->super.super.super.super.isa + 3, 0, (void *)1);
    }
    objc_storeWeak((id *)&self->_prefetchDataSource, v8);
    id v11 = v8;
    id v12 = [(UITableView *)self prefetchDataSource];
    if (v11 == v12)
    {
      unsigned int v14 = [(UITableView *)self allowsWeakReference];

      unint64_t v13 = (unint64_t)(v11 != 0) << 18;
      if (v11 && v14)
      {
        objc_initWeak(&location, self);
        uint64_t v15 = [_UIWeakHelper alloc];
        v23[0] = MEMORY[0x1E4F143A8];
        v23[1] = 3221225472;
        v23[2] = __37__UITableView_setPrefetchDataSource___block_invoke_622;
        v23[3] = &unk_1E52DC308;
        objc_copyWeak(&v24, &location);
        uint64_t v16 = [(_UIWeakHelper *)v15 initWithDeallocationBlock:v23];
        objc_setAssociatedObject(v11, (char *)&self->super.super.super.super.isa + 3, v16, (void *)1);

        objc_destroyWeak(&v24);
        objc_destroyWeak(&location);
        unint64_t v13 = 0x40000;
      }
    }
    else
    {

      unint64_t v13 = (unint64_t)(v11 != 0) << 18;
    }

    p_uint64_t tableFlags = &self->_tableFlags;
    unint64_t v18 = *((void *)p_tableFlags + 3) & 0xFFFFFFFFFFFBFFFFLL | v13;
    *((void *)p_tableFlags + 2) = *((void *)p_tableFlags + 2);
    *((void *)p_tableFlags + 3) = v18;
    char v19 = objc_opt_respondsToSelector();
    uint64_t v20 = 0x80000;
    if ((v19 & 1) == 0) {
      uint64_t v20 = 0;
    }
    *((void *)p_tableFlags + 3) = *((void *)p_tableFlags + 3) & 0xFFFFFFFFFFF7FFFFLL | v20;
    char v21 = objc_opt_respondsToSelector();
    uint64_t v22 = 0x100000;
    if ((v21 & 1) == 0) {
      uint64_t v22 = 0;
    }
    *((void *)p_tableFlags + 3) = *((void *)p_tableFlags + 3) & 0xFFFFFFFFFFEFFFFFLL | v22;
  }
}

- (id)prefetchDataSource
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_prefetchDataSource);
  return WeakRetained;
}

uint64_t __62__UITableView__updateVisibleCellsForRanges_createIfNecessary___block_invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a2 < a2 + a3)
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2;
    do
    {
      id v8 = (id)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 2184), "objectAtIndexedSubscript:", v7, v3);
      if (v8 != *(id *)(a1 + 40))
      {
        id v9 = v8;
        uint64_t v10 = *(void *)(a1 + 32);
        if ((*(unsigned char *)(v10 + 3093) & 2) != 0) {
          -[UITableViewRowData indexPathForRowAtGlobalRow:](*(void **)(v10 + 2072), v7 + *(void *)(v10 + 2168));
        }
        else {
        id v11 = [v8 _indexPath];
        }
        [(id)v10 _reuseTableViewCell:v9 withIndexPath:v11 didEndDisplaying:1];
      }
      ++v7;
      --v6;
    }
    while (v6);
    uint64_t v3 = a3;
  }
  id v12 = *(void **)(*(void *)(a1 + 32) + 2184);
  return objc_msgSend(v12, "removeObjectsInRange:", a2, v3);
}

- (void)_performDiffableUpdate:(id)a3
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if ((*((unsigned char *)&self->_tableFlags + 27) & 0x20) == 0)
  {
    _UIIsPrivateMainBundle();
    if (dyld_program_sdk_at_least())
    {
      uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
      [v6 handleFailureInMethod:a2, self, @"UITableView.m", 19931, @"Attempted to apply updates to a table view from a UITableViewDiffableDataSource, but the table view's dataSource is not the UITableViewDiffableDataSource. Table view: %@", self object file lineNumber description];
    }
    else if (os_variant_has_internal_diagnostics())
    {
      id v8 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v10 = self;
        _os_log_fault_impl(&dword_1853B0000, v8, OS_LOG_TYPE_FAULT, "Attempted to apply updates to a table view from a UITableViewDiffableDataSource, but the table view's dataSource is not the UITableViewDiffableDataSource. Table view: %@  This will become an assert in a future version.", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_performDiffableUpdate____s_category_0) + 8);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v10 = self;
        _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "Attempted to apply updates to a table view from a UITableViewDiffableDataSource, but the table view's dataSource is not the UITableViewDiffableDataSource. Table view: %@  This will become an assert in a future version.", buf, 0xCu);
      }
    }
  }
  [(UITableView *)self _performInternalBatchUpdates:v5];
}

- (void)_performInternalBatchUpdates:(id)a3
{
  p_uint64_t tableFlags = &self->_tableFlags;
  unint64_t v4 = *((void *)&self->_tableFlags + 3);
  *((void *)&self->_tableFlags + 3) = v4 | 0x40000000;
  (*((void (**)(id, SEL))a3 + 2))(a3, a2);
  *((void *)p_tableFlags + 3) = *((void *)p_tableFlags + 3) & 0xFFFFFFFFBFFFFFFFLL | (((v4 >> 30) & 1) << 30);
}

- (void)setEstimatedSectionFooterHeight:(CGFloat)estimatedSectionFooterHeight
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v6 = dyld_program_sdk_at_least();
  BOOL v7 = estimatedSectionFooterHeight != -1.0 && estimatedSectionFooterHeight < 0.0;
  if (v6)
  {
    if (v7)
    {
      id v8 = [MEMORY[0x1E4F28B00] currentHandler];
      [v8 handleFailureInMethod:a2, self, @"UITableView.m", 6782, @"Invalid estimated section footer height set (%g). Value must be at least 0.0, or UITableViewAutomaticDimension.", *(void *)&estimatedSectionFooterHeight object file lineNumber description];
    }
  }
  else if (v7)
  {
    id v12 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &setEstimatedSectionFooterHeight____s_category) + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      CGFloat v14 = estimatedSectionFooterHeight;
      _os_log_impl(&dword_1853B0000, v12, OS_LOG_TYPE_ERROR, "Invalid estimated section footer height set (%g). Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
    }
  }
  BOOL v9 = [(UITableView *)self _estimatesSectionFooterHeights];
  BOOL v10 = estimatedSectionFooterHeight > 1.0 || estimatedSectionFooterHeight <= 0.0;
  CGFloat v11 = 2.0;
  if (v10) {
    CGFloat v11 = estimatedSectionFooterHeight;
  }
  self->_double estimatedSectionFooterHeight = v11;
  if (v9 != [(UITableView *)self _estimatesSectionFooterHeights]) {
    [(UITableView *)self _updateRowDataIfNeeded];
  }
}

- (BOOL)isElementAccessibilityExposedToInterfaceBuilder
{
  return 0;
}

+ (BOOL)_isInternalTableView
{
  return 0;
}

- (id)_scrollTestExtraResults
{
  uint64_t v3 = (void *)MEMORY[0x1E4F1C978];
  unint64_t v4 = objc_msgSend(NSNumber, "numberWithInt:", -[UITableView _numberOfSectionsUsingPresentationValues:](self, "_numberOfSectionsUsingPresentationValues:", 1));
  id v5 = [NSNumber numberWithInt:-[UITableViewRowData numberOfRows]((uint64_t)self->_rowData)];
  int v6 = objc_msgSend(v3, "arrayWithObjects:", v4, @"sections", v5, @"rows", 0);

  BOOL v7 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", @"sections", @"sectionsUnits", @"rows", @"rowsUnits", 0);
  id v8 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithObjects:v6 forKeys:v7];
  v11.receiver = self;
  v11.super_class = (Class)UITableView;
  BOOL v9 = [(UIScrollView *)&v11 _scrollTestExtraResults];
  [v8 addEntriesFromDictionary:v9];

  return v8;
}

- (BOOL)_displaysCellContentStringsOnTapAndHold
{
  return 0;
}

void __29__UITableView__updateRowData__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void **)(v3 + 2072);
  uint64_t v5 = *(void *)(v3 + 2168) + a3;
  id v6 = a2;
  -[UITableViewRowData indexPathForRowAtGlobalRow:](v4, v5);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  [v6 _setIndexPath:v7];
}

- (void)setCountStringInsignificantRowCount:(unint64_t)a3
{
  if (a3 <= 0xF && (*((void *)&self->_tableFlags + 2) & 0xFLL) != a3)
  {
    uint64_t v3 = *((void *)&self->_tableFlags + 3);
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFFFF0 | a3;
    *((void *)&self->_tableFlags + 3) = v3;
    countLabel = self->_countLabel;
    if (countLabel)
    {
      unint64_t v5 = [(UITableView *)self _countStringRowCount];
      [(UITableViewCountView *)countLabel setCount:v5];
    }
  }
}

- (void)setCountString:(id)a3
{
  id v14 = a3;
  uint64_t v4 = [v14 length];
  countLabel = self->_countLabel;
  if (v4)
  {
    if (countLabel)
    {
      [(UITableViewCountView *)countLabel setCountString:v14 withCount:[(UITableView *)self _countStringRowCount]];
      goto LABEL_8;
    }
    [(UIView *)self bounds];
    double v8 = v7;
    [(UITableConstants *)self->_constants defaultRowHeightForTableView:self];
    BOOL v10 = -[UITableViewCountView initWithFrame:withCountString:withCount:]([UITableViewCountView alloc], "initWithFrame:withCountString:withCount:", v14, [(UITableView *)self _countStringRowCount], 0.0, 0.0, v8, v9);
    objc_super v11 = self->_countLabel;
    self->_countLabel = v10;

    id v12 = self->_countLabel;
    unint64_t v13 = [(UIView *)self backgroundColor];
    [(UIView *)v12 setBackgroundColor:v13];

    [(UIView *)self addSubview:self->_countLabel];
    [(UITableView *)self sendSubviewToBack:self->_countLabel];
  }
  else
  {
    if (!countLabel) {
      goto LABEL_8;
    }
    [(UIView *)self->_countLabel removeFromSuperview];
    id v6 = self->_countLabel;
    self->_countLabel = 0;
  }
  [(UITableView *)self _updateContentSize];
LABEL_8:
}

- (void)setTableHeaderBackgroundColor:(id)a3
{
  id v4 = a3;
  tableHeaderBackgroundView = self->_tableHeaderBackgroundView;
  id v11 = v4;
  if (!v4 || tableHeaderBackgroundView)
  {
    if (v4) {
      goto LABEL_7;
    }
    [(UIView *)tableHeaderBackgroundView removeFromSuperview];
    BOOL v10 = self->_tableHeaderBackgroundView;
    self->_tableHeaderBackgroundView = 0;
  }
  else
  {
    [(UIView *)self bounds];
    double v8 = -[UIView initWithFrame:]([UIView alloc], "initWithFrame:", 0.0, 0.0 - v6, v7, v6);
    double v9 = self->_tableHeaderBackgroundView;
    self->_tableHeaderBackgroundView = v8;

    [(UIView *)self->_tableHeaderBackgroundView setAutoresizingMask:2];
    [(UIView *)self insertSubview:self->_tableHeaderBackgroundView atIndex:0];
  }
  id v4 = v11;
LABEL_7:
  [(UIView *)self->_tableHeaderBackgroundView setBackgroundColor:v4];
}

- (id)tableHeaderBackgroundColor
{
  return [(UIView *)self->_tableHeaderBackgroundView backgroundColor];
}

- (id)_tableHeaderBackgroundView
{
  return self->_tableHeaderBackgroundView;
}

- (void)_setAccessoryBaseColor:(id)a3
{
}

- (void)setMultiselectCheckmarkColor:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  objc_storeStrong((id *)&self->_checkmarkColor, a3);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  double v6 = self->_visibleCells;
  uint64_t v7 = [(NSMutableArray *)v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * v10++), "_multiselectColorChanged", (void)v11);
      }
      while (v8 != v10);
      uint64_t v8 = [(NSMutableArray *)v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v8);
  }
}

- (UIColor)multiselectCheckmarkColor
{
  return self->_checkmarkColor;
}

- (void)setSectionBorderColor:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = (UIColor *)a3;
  p_sectionBorderColor = &self->_sectionBorderColor;
  if (self->_sectionBorderColor != v5)
  {
    objc_storeStrong((id *)&self->_sectionBorderColor, a3);
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v7 = self->_visibleCells;
    uint64_t v8 = [(NSMutableArray *)v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v13;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v7);
          }
          objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * v11++), "setSectionBorderColor:", *p_sectionBorderColor, (void)v12);
        }
        while (v9 != v11);
        uint64_t v9 = [(NSMutableArray *)v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v9);
    }
  }
}

- (void)_setHeightForTableHeaderViewHiding:(double)a3
{
  [(UITableView *)self _ensureRowDataIsLoaded];
  rowData = self->_rowData;
  if (rowData) {
    rowData->_double heightForTableHeaderViewHiding = a3;
  }
}

- (BOOL)_drawsTopShadowInGroupedSections
{
  return 0;
}

- (unint64_t)_edgesApplyingBaseInsetsToIndexBarInsets
{
  unint64_t v3 = [(UIScrollView *)self _edgesApplyingSafeAreaInsetsToScrollAccessoryInsets];
  BOOL v4 = [(UIView *)self _shouldReverseLayoutDirection];
  uint64_t v5 = -3;
  if (v4) {
    uint64_t v5 = -9;
  }
  return v5 & v3;
}

- (UIEdgeInsets)_insetsForIndexBar
{
  [(UITableView *)self _cachedSectionIndexBarInsets];
  if (v6 == 1.79769313e308 && v3 == 1.79769313e308 && v5 == 1.79769313e308 && v4 == 1.79769313e308)
  {
    unint64_t v18 = [(UITableView *)self _edgesApplyingBaseInsetsToIndexBarInsets];
    [(UITableView *)self _contentInset];
    double v23 = v19;
    if (v18) {
      double v11 = 0.0;
    }
    else {
      double v11 = v19;
    }
    if ((~v18 & 2) != 0) {
      double v13 = v20;
    }
    else {
      double v13 = 0.0;
    }
    if ((~v18 & 4) != 0) {
      double v15 = v21;
    }
    else {
      double v15 = 0.0;
    }
    if ((~v18 & 8) != 0) {
      double v17 = v22;
    }
    else {
      double v17 = 0.0;
    }
    if (v18)
    {
      double v24 = v21;
      [(UIView *)self->_index frame];
      double Width = CGRectGetWidth(v36);
      if (Width == 0.0) {
        double Width = 1.0;
      }
      [(UIScrollView *)self _baseInsetsForAccessoryOnEdge:1 hasCustomClientInsets:0 accessorySize:Width additionalInsetFromEdge:0.0];
      double v29 = fmax(v28, v23);
      double v31 = fmax(v30, v24);
      if (v18) {
        double v11 = v29;
      }
      if ((v18 & 2) != 0) {
        double v13 = v26;
      }
      if ((v18 & 4) != 0) {
        double v15 = v31;
      }
      if ((v18 & 8) != 0) {
        double v17 = v27;
      }
    }
    -[UITableView _setCachedSectionIndexBarInsets:](self, "_setCachedSectionIndexBarInsets:", v11, v13, v15, v17);
  }
  else
  {
    [(UITableView *)self _cachedSectionIndexBarInsets];
    double v11 = v10;
    double v13 = v12;
    double v15 = v14;
    double v17 = v16;
  }
  double v32 = v11;
  double v33 = v13;
  double v34 = v15;
  double v35 = v17;
  result.double right = v35;
  result.double bottom = v34;
  result.CGFloat left = v33;
  result.double top = v32;
  return result;
}

- (void)_updateIndexTitles:(id)a3
{
  objc_storeStrong((id *)&self->_sectionIndexTitlesForTableView, a3);
  id v5 = a3;
  [(_UICollectionTableIndexOverlaySelectionView *)self->_indexOverlaySelectionView reloadData];
  [(UIView *)self->_indexOverlaySelectionView setNeedsLayout];
}

- (void)_updateIndexDisplayedTitles
{
  id v3 = [(UITableView *)self _dataSourceSectionIndexTitles];
  [(UITableViewIndex *)self->_index setTitles:v3];
}

- (id)_dataSourceSectionIndexTitles
{
  return self->_sectionIndexTitlesForTableView;
}

- (void)_removeIndex
{
  [(UIView *)self->_indexContainerView removeFromSuperview];
  indexContainerView = self->_indexContainerView;
  self->_indexContainerView = 0;

  indedouble x = self->_index;
  self->_indedouble x = 0;

  id v5 = [(UIScrollView *)self _staticScrollBar];
  [v5 setShouldInsetButtonsForIndex:0];
}

- (id)_sectionIndex
{
  return self->_index;
}

- (void)_updateIndexTitlesFromDataSource
{
  uint64_t tableFlags = (uint64_t)self->_tableFlags;
  if ((tableFlags & 0x100) != 0)
  {
    double v4 = [(UITableView *)self _dataSourceProxy];
    uint64_t v5 = [v4 _tableView:self sectionIndexTitlesTrimmedToCount:0x7FFFFFFFFFFFFFFFLL];
  }
  else
  {
    if ((tableFlags & 0x80) == 0)
    {
      id v6 = (id)MEMORY[0x1E4F1CBF0];
      [(UITableView *)self _updateIndexTitles:MEMORY[0x1E4F1CBF0]];
      goto LABEL_7;
    }
    double v4 = [(UITableView *)self _dataSourceProxy];
    uint64_t v5 = [v4 sectionIndexTitlesForTableView:self];
  }
  id v6 = (id)v5;

  [(UITableView *)self _updateIndexTitles:v6];
LABEL_7:
}

- (id)_indexBarEntries
{
  if ((*(unsigned char *)&self->_tableFlags & 0x80) != 0)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    sectionIndexTitlesForTableView = self->_sectionIndexTitlesForTableView;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __31__UITableView__indexBarEntries__block_invoke;
    v10[3] = &unk_1E52E57D8;
    v10[4] = self;
    id v11 = v4;
    id v6 = v4;
    [(NSArray *)sectionIndexTitlesForTableView enumerateObjectsUsingBlock:v10];
    uint64_t v7 = [v6 sortedArrayUsingComparator:&__block_literal_global_537];
    id v3 = [v7 valueForKey:@"entry"];
  }
  else
  {
    v9.receiver = self;
    v9.super_class = (Class)UITableView;
    id v3 = [(UIScrollView *)&v9 _indexBarEntries];
  }
  return v3;
}

void __31__UITableView__indexBarEntries__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  v20[3] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = v6[384];
  if ((v7 & 0x10000) == 0)
  {
LABEL_8:
    if ((v7 & 0x200) == 0) {
      goto LABEL_13;
    }
    double v16 = [v6 _dataSourceProxy];
    uint64_t v17 = [v16 tableView:*(void *)(a1 + 32) sectionForSectionIndexTitle:v5 atIndex:a3];

    if (v17 < 0) {
      goto LABEL_13;
    }
    uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 2072);
    if (!v18) {
      goto LABEL_13;
    }
    if (v17 >= *(void *)(v18 + 64)) {
      goto LABEL_13;
    }
    objc_super v9 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:v17];
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_3;
  }
  uint64_t v8 = [v6 _dataSourceProxy];
  objc_super v9 = [v8 tableView:*(void *)(a1 + 32) indexPathForSectionIndexTitle:v5 atIndex:a3];

  if (!v9)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = v6[384];
    goto LABEL_8;
  }
LABEL_3:
  if ([v9 row] == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", 0, objc_msgSend(v9, "section"));
    id v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v10 = v9;
  }
  id v11 = v10;
  double v12 = +[UIIndexBarEntry entryWithTitle:v5];
  [v12 setIndexPath:v11];
  double v13 = *(void **)(a1 + 40);
  v20[0] = v12;
  v19[0] = @"entry";
  v19[1] = @"index";
  double v14 = [NSNumber numberWithUnsignedInteger:a3];
  v19[2] = @"indexPath";
  v20[1] = v14;
  v20[2] = v9;
  double v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v20 forKeys:v19 count:3];
  [v13 addObject:v15];

LABEL_13:
}

uint64_t __31__UITableView__indexBarEntries__block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = [v4 objectForKey:@"indexPath"];
  uint64_t v7 = [v5 objectForKey:@"indexPath"];
  uint64_t v8 = [v6 compare:v7];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = [v6 section];
    if (v10 == [v7 section])
    {
      if ([v6 row] == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v9 = -1;
      }
      else if ([v7 row] == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v9 = 1;
      }
    }
  }
  else
  {
    id v11 = [v4 objectForKey:@"index"];
    double v12 = [v5 objectForKey:@"index"];
    uint64_t v9 = [v11 compare:v12];
  }
  return v9;
}

- (id)_focusFastScrollingIndexBarEntries
{
  if ([(UITableView *)self _dataSourceHasSectionIndexTitlesForTableView])
  {
    id v3 = +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:self];
    id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    sectionIndexTitlesForTableView = self->_sectionIndexTitlesForTableView;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __49__UITableView__focusFastScrollingIndexBarEntries__block_invoke;
    v11[3] = &unk_1E52FA560;
    v11[4] = self;
    id v12 = v3;
    id v13 = v4;
    id v6 = v4;
    id v7 = v3;
    [(NSArray *)sectionIndexTitlesForTableView enumerateObjectsUsingBlock:v11];
    uint64_t v8 = [v6 sortedArrayUsingComparator:&__block_literal_global_168_2];
    uint64_t v9 = [v8 valueForKey:@"entry"];
  }
  else
  {
    v14.receiver = self;
    v14.super_class = (Class)UITableView;
    uint64_t v9 = [(UIScrollView *)&v14 _focusFastScrollingIndexBarEntries];
  }
  return v9;
}

void __49__UITableView__focusFastScrollingIndexBarEntries__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  v31[3] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = v6[384];
  if ((v7 & 0x10000) == 0)
  {
LABEL_8:
    if ((v7 & 0x200) == 0) {
      goto LABEL_13;
    }
    uint64_t v18 = [v6 _dataSourceProxy];
    uint64_t v19 = [v18 tableView:*(void *)(a1 + 32) sectionForSectionIndexTitle:v5 atIndex:a3];

    if (v19 < 0) {
      goto LABEL_13;
    }
    uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 2072);
    if (!v20) {
      goto LABEL_13;
    }
    if (v19 >= *(void *)(v20 + 64)) {
      goto LABEL_13;
    }
    uint64_t v9 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:v19];
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_3;
  }
  uint64_t v8 = [v6 _dataSourceProxy];
  uint64_t v9 = [v8 tableView:*(void *)(a1 + 32) indexPathForSectionIndexTitle:v5 atIndex:a3];

  if (!v9)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = v6[384];
    goto LABEL_8;
  }
LABEL_3:
  if ([v9 row] == 0x7FFFFFFFFFFFFFFFLL)
  {
    objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", 0, objc_msgSend(v9, "section"));
    id v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v10 = v9;
  }
  id v11 = v10;
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v21 = MEMORY[0x1E4F143A8];
  uint64_t v22 = 3221225472;
  double v23 = __49__UITableView__focusFastScrollingIndexBarEntries__block_invoke_2;
  double v24 = &unk_1E5308CE8;
  objc_copyWeak(&v28, &location);
  id v12 = v11;
  id v25 = v12;
  id v13 = v9;
  id v26 = v13;
  id v27 = *(id *)(a1 + 40);
  objc_super v14 = +[_UIFocusFastScrollingIndexBarEntry entryWithTitle:v5 generator:&v21];
  objc_msgSend(v14, "setTargetFocusedIndexPath:", v12, v21, v22, v23, v24);
  double v15 = *(void **)(a1 + 48);
  v31[0] = v14;
  v30[0] = @"entry";
  v30[1] = @"index";
  double v16 = [NSNumber numberWithUnsignedInteger:a3];
  v30[2] = @"indexPath";
  v31[1] = v16;
  v31[2] = v13;
  uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v31 forKeys:v30 count:3];
  [v15 addObject:v17];

  objc_destroyWeak(&v28);
  objc_destroyWeak(&location);

LABEL_13:
}

double __49__UITableView__focusFastScrollingIndexBarEntries__block_invoke_2(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = WeakRetained;
  if (!WeakRetained
    || ([WeakRetained contentSize], v4 == 0.0)
    || ([v3 contentSize], v5 == 0.0))
  {
    double v21 = INFINITY;
  }
  else
  {
    [v3 _rectForRowAtIndexPath:*(void *)(a1 + 32) usingPresentationValues:1];
    double v7 = v6;
    double v9 = v8;
    double v11 = v10;
    double v13 = v12;
    [v3 _contentOffsetForScrollingToRowAtIndexPath:*(void *)(a1 + 40) atScrollPosition:1];
    double v15 = v14;
    double v17 = v16;
    uint64_t v18 = [*(id *)(a1 + 48) scrollManager];
    uint64_t v19 = [v3 _focusTuple];
    objc_msgSend(v18, "contentOffsetForEnvironmentScrollableContainer:toShowRect:targetOffset:", v19, v7, v9, v11, v13, v15, v17);
    double v21 = v20;
  }
  return v21;
}

uint64_t __49__UITableView__focusFastScrollingIndexBarEntries__block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  double v6 = [v4 objectForKey:@"indexPath"];
  double v7 = [v5 objectForKey:@"indexPath"];
  uint64_t v8 = [v6 compare:v7];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = [v6 section];
    if (v10 == [v7 section])
    {
      if ([v6 row] == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v9 = -1;
      }
      else if ([v7 row] == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v9 = 1;
      }
    }
  }
  else
  {
    double v11 = [v4 objectForKey:@"index"];
    double v12 = [v5 objectForKey:@"index"];
    uint64_t v9 = [v11 compare:v12];
  }
  return v9;
}

- (CGPoint)indexBarAccessoryView:(id)a3 contentOffsetForEntry:(id)a4 atIndex:(int64_t)a5
{
  id v8 = a3;
  id v9 = a4;
  if (![(UITableView *)self _dataSourceHasSectionIndexTitlesForTableView])
  {
    v39.receiver = self;
    v39.super_class = (Class)UITableView;
    [(UIScrollView *)&v39 indexBarAccessoryView:v8 contentOffsetForEntry:v9 atIndex:a5];
    double v18 = v35;
    double v20 = v36;
    goto LABEL_18;
  }
  uint64_t v10 = [v9 indexPath];
  double v11 = [v9 title];
  if (!v10)
  {
    uint64_t tableFlags = (uint64_t)self->_tableFlags;
    if ((tableFlags & 0x10000) == 0)
    {
LABEL_6:
      if ((tableFlags & 0x200) == 0
        || ([(UITableView *)self _dataSourceProxy],
            double v14 = objc_claimAutoreleasedReturnValue(),
            uint64_t v15 = [v14 tableView:self sectionForSectionIndexTitle:v11 atIndex:a5],
            v14,
            v15 < 0)
        || (rowData = self->_rowData) == 0
        || v15 >= rowData->_numSections
        || ([MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:v15],
            (uint64_t v10 = objc_claimAutoreleasedReturnValue()) == 0))
      {
        uint64_t v10 = [MEMORY[0x1E4F28D58] indexPathForRow:0 inSection:a5];
      }
      goto LABEL_12;
    }
    double v13 = [(UITableView *)self _dataSourceProxy];
    uint64_t v10 = [v13 tableView:self indexPathForSectionIndexTitle:v11 atIndex:a5];

    if (!v10)
    {
      uint64_t tableFlags = (uint64_t)self->_tableFlags;
      goto LABEL_6;
    }
  }
LABEL_12:
  [(UITableView *)self _contentOffsetForScrollingToRowAtIndexPath:v10 atScrollPosition:1 usingPresentationValues:1];
  double v18 = v17;
  double v20 = v19;
  double v21 = [(UIView *)self _focusBehavior];
  if ([v21 refinesIndexBarTargetContentOffset])
  {
    uint64_t v22 = +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:self];
    double v23 = [v22 scrollManager];
    if (v23)
    {
      [(UITableView *)self _rectForRowAtIndexPath:v10 usingPresentationValues:1];
      double v25 = v24;
      double v27 = v26;
      double v29 = v28;
      double v31 = v30;
      double v32 = [(UIScrollView *)self _focusTuple];
      objc_msgSend(v23, "contentOffsetForEnvironmentScrollableContainer:toShowRect:targetOffset:", v32, v25, v27, v29, v31, v18, v20);
      double v18 = v33;
      double v20 = v34;
    }
  }

LABEL_18:
  double v37 = v18;
  double v38 = v20;
  result.double y = v38;
  result.double x = v37;
  return result;
}

uint64_t __45__UITableView__endCellAnimationsWithContext___block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

- (void)_Bug_Detected_In_Client_Of_UITableView_Invalid_Batch_Updates:(id)a3
{
  id v5 = (void *)MEMORY[0x1E4F28B00];
  id v6 = a3;
  id v7 = [v5 currentHandler];
  [v7 handleFailureInMethod:a2, self, @"UITableView.m", 2608, @"%@", v6 object file lineNumber description];
}

- (void)_Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Sections:(id)a3
{
  id v5 = (void *)MEMORY[0x1E4F28B00];
  id v6 = a3;
  id v7 = [v5 currentHandler];
  [v7 handleFailureInMethod:a2, self, @"UITableView.m", 2613, @"%@", v6 object file lineNumber description];
}

- (void)_Bug_Detected_In_Client_Of_UITableView_Invalid_Number_Of_Rows_In_Section:(id)a3
{
  id v5 = (void *)MEMORY[0x1E4F28B00];
  id v6 = a3;
  id v7 = [v5 currentHandler];
  [v7 handleFailureInMethod:a2, self, @"UITableView.m", 2618, @"%@", v6 object file lineNumber description];
}

- (void)_updateFocusedCellIndexPathIfNecessaryWithLastFocusedRect:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  focusedCellIndexPath = self->_focusedCellIndexPath;
  if (!focusedCellIndexPath) {
    goto LABEL_19;
  }
  uint64_t v9 = [(NSIndexPath *)focusedCellIndexPath row];
  int64_t v10 = [(NSIndexPath *)self->_focusedCellIndexPath section];
  int64_t v11 = [(UITableView *)self _numberOfSectionsUsingPresentationValues:1];
  unint64_t v12 = v10 < v11
      ? [(UITableView *)self _numberOfRowsInSection:[(NSIndexPath *)self->_focusedCellIndexPath section] usingPresentationValues:1]: 0;
  BOOL v13 = v9 == 0x7FFFFFFFFFFFFFFFLL || [(NSIndexPath *)self->_focusedCellIndexPath row] < v12;
  if (v10 >= v11 || !v13)
  {
    if (v10 >= v11) {
      LOBYTE(v13) = 1;
    }
    if (!v13 && v12)
    {
      uint64_t v15 = objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", v12 - 1, -[NSIndexPath section](self->_focusedCellIndexPath, "section"));
      [(UITableView *)self _setFocusedCellIndexPath:v15];

      self->_unsigned int focusedViewType = 1;
    }
    if (!self->_focusedCellIndexPath)
    {
LABEL_19:
      v20.origin.double x = x;
      v20.origin.double y = y;
      v20.size.double width = width;
      v20.size.double height = height;
      if (!CGRectIsNull(v20))
      {
        double v16 = _UIFocusClosestFocusableViewToRectInView(self, x, y, width, height);
        if (v16)
        {
          int v19 = 0;
          uint64_t v18 = 0;
          double v17 = [(UITableView *)self _managedSubviewForView:v16 viewType:&v19 indexPath:&v18];
          [(UITableView *)self _setFocusedCellIndexPath:v18];
          self->_unsigned int focusedViewType = v19;
        }
      }
    }
  }
}

void __50__UITableView__updateVisibleHeadersAndFootersNow___block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  objc_msgSend(v4, "_reuseHeaderFooterView:isHeader:forSection:", v5, 1, objc_msgSend(a2, "integerValue"));
}

void __50__UITableView__updateVisibleHeadersAndFootersNow___block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  objc_msgSend(v4, "_reuseHeaderFooterView:isHeader:forSection:", v5, 0, objc_msgSend(a2, "integerValue"));
}

void __69__UITableView__updateFocusAfterLoadingCellsWithFocusedView_viewType___block_invoke(uint64_t a1)
{
  id v7 = [[_UIFocusUpdateRequest alloc] initWithEnvironment:*(void *)(a1 + 32)];
  [(_UIFocusUpdateRequest *)v7 setAllowsFocusingCurrentItem:1];
  [(_UIFocusUpdateRequest *)v7 setScrollIfNecessary:(*(void *)(*(void *)(a1 + 32) + 3096) >> 11) & 1];
  int v2 = [*(id *)(a1 + 32) _focusSystem];
  [v2 _requestFocusUpdate:v7];
  [v2 updateFocusIfNeeded];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3
    && [*(id *)(a1 + 32) _shouldReusePreviouslyFocusedTableViewSubview:v3 viewType:*(unsigned int *)(a1 + 48)])
  {
    int v4 = *(_DWORD *)(a1 + 48);
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    if (v4 == 1) {
      [v5 _reuseTableViewCell:v6 withIndexPath:0 didEndDisplaying:0];
    }
    else {
      [v5 _reuseHeaderFooterView:v6 isHeader:v4 == 2 forSection:0x7FFFFFFFFFFFFFFFLL];
    }
  }
}

- (_NSRange)_sectionsInRect:(CGRect)a3
{
  NSUInteger v3 = -[UITableViewRowData sectionsInRect:]((uint64_t)self->_rowData, a3.origin.x, a3.origin.y, a3.size.width, a3.size.height);
  result.NSUInteger length = v4;
  result.id location = v3;
  return result;
}

- (void)sendSubviewToBack:(id)a3
{
  NSUInteger v4 = _UITableViewSubviewToMoveForView(a3);
  v5.receiver = self;
  v5.super_class = (Class)UITableView;
  [(UIView *)&v5 sendSubviewToBack:v4];
}

- (id)_cellContainerView
{
  if ((*((unsigned char *)&self->_tableFlags + 22) & 0x40) != 0) {
    self = (UITableView *)self->_wrapperView;
  }
  return self;
}

- (BOOL)_shouldIncludeRowInMultipleSelectionGroupWithCell:(id)a3 atIndexPath:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = v7
    && (([(NSMutableArray *)self->_selectedIndexPaths containsObject:v7] & 1) != 0
     || [(NSMutableArray *)self->_highlightedIndexPaths containsObject:v7])
    && (!v6
     || [v6 _usingBackgroundViewConfiguration]
     && ([v6 _backgroundIsVerticallyInset] & 1) == 0
     && [v6 _backgroundFillIsCustomized]);

  return v8;
}

- (void)_updateSelectionGroupingForVisibleCells
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  NSUInteger v3 = (void *)[(NSMutableArray *)self->_visibleCells copy];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        uint64_t v9 = [(UITableView *)self _indexPathForCell:v8 usingPresentationValues:1];
        [(UITableView *)self _updateSelectionGroupingForCell:v8 atIndexPath:v9];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
}

- (void)_cellDidShowSelectedBackground:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [(UITableView *)self _cellContainerView];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v6 = objc_msgSend(v5, "subviews", 0);
  uint64_t v7 = [v6 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = 0;
    uint64_t v10 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v25 != v10) {
          objc_enumerationMutation(v6);
        }
        long long v12 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        if ([(NSMutableArray *)self->_visibleCells containsObject:v12])
        {
          id v13 = v12;

          id v9 = v13;
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v24 objects:v28 count:16];
    }
    while (v8);

    if (v9 && v9 != v4) {
      [v5 insertSubview:v4 aboveSubview:v9];
    }
  }
  else
  {

    id v9 = 0;
  }
  if (([v4 _isMultiselecting] & 1) == 0 && objc_msgSend(v4, "selectionStyle"))
  {
    double v14 = [(UITableView *)self _indexPathForCell:v4 usingPresentationValues:1];
    if (v14)
    {
      uint64_t v15 = -[UITableViewRowData globalRowForRowAtIndexPath:]((uint64_t)self->_rowData, v14);
      uint64_t v16 = v15 - 1;
      if (v15 >= 1)
      {
        v30.origin.double x = -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, v16, 1);
        CGRectGetMaxY(v30);
        double v17 = [(UIView *)self _screen];
        UIRoundToScreenScale(v17);
        double v19 = v18;
        [v4 frame];
        CGRectGetMinY(v31);
        CGRect v20 = [(UIView *)self _screen];
        UIRoundToScreenScale(v20);
        double v22 = v21;

        if (v19 == v22)
        {
          double v23 = -[UITableViewRowData indexPathForRowAtGlobalRow:](&self->_rowData->super.isa, v16);
          [(UITableView *)self _hideSeparatorForRowAtIndexPath:v23];
        }
      }
    }
  }
  [(UITableView *)self _updateSelectionGroupingForVisibleCells];
}

- (void)_cellDidHideSelectedBackground:(id)a3
{
  id v4 = [(UITableView *)self _indexPathForCell:a3 usingPresentationValues:1];
  [(UITableView *)self _showSeparatorForRowBeforeIndexPath:v4];

  [(UITableView *)self _updateSelectionGroupingForVisibleCells];
}

- (void)_hideSeparatorForRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    hiddenSeparatorIndexPaths = self->_hiddenSeparatorIndexPaths;
    id v9 = v4;
    if (!hiddenSeparatorIndexPaths)
    {
      uint64_t v6 = (NSMutableSet *)objc_alloc_init(MEMORY[0x1E4F1CA80]);
      uint64_t v7 = self->_hiddenSeparatorIndexPaths;
      self->_hiddenSeparatorIndexPaths = v6;

      id v4 = v9;
      hiddenSeparatorIndexPaths = self->_hiddenSeparatorIndexPaths;
    }
    if (([(NSMutableSet *)hiddenSeparatorIndexPaths containsObject:v4] & 1) == 0) {
      [(NSMutableSet *)self->_hiddenSeparatorIndexPaths addObject:v9];
    }
    uint64_t v8 = [(UITableView *)self _existingCellForRowAtIndexPath:v9];
    [v8 _setSeparatorHidden:1];

    id v4 = v9;
  }
}

- (void)_showSeparatorForRowBeforeIndexPath:(id)a3
{
  uint64_t v4 = -[UITableViewRowData globalRowForRowAtIndexPath:]((uint64_t)self->_rowData, a3);
  uint64_t v5 = v4 - 1;
  if (v4 >= 1)
  {
    uint64_t v6 = v4;
    v15.origin.double x = -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, v5, 1);
    CGRectGetMaxY(v15);
    uint64_t v7 = [(UIView *)self _screen];
    UIRoundToScreenScale(v7);
    double v9 = v8;
    v16.origin.double x = -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, v6, 1);
    CGRectGetMinY(v16);
    uint64_t v10 = [(UIView *)self _screen];
    UIRoundToScreenScale(v10);
    double v12 = v11;

    if (v9 == v12)
    {
      -[UITableViewRowData indexPathForRowAtGlobalRow:](&self->_rowData->super.isa, v5);
      id v13 = (id)objc_claimAutoreleasedReturnValue();
      [(UITableView *)self _showSeparatorForRowAtIndexPath:v13];
    }
  }
}

- (void)_showSeparatorForRowAtIndexPath:(id)a3
{
  if (a3)
  {
    hiddenSeparatorIndexPaths = self->_hiddenSeparatorIndexPaths;
    id v5 = a3;
    [(NSMutableSet *)hiddenSeparatorIndexPaths removeObject:v5];
    id v6 = [(UITableView *)self _existingCellForRowAtIndexPath:v5];

    [v6 _setSeparatorHidden:0];
  }
}

- (id)_tableViewCellForContentView:(id)a3
{
  id v3 = a3;
  if (v3)
  {
    do
    {
      if (_IsKindOfUITableViewCell(v3)) {
        break;
      }
      uint64_t v4 = [v3 superview];

      id v3 = (id)v4;
    }
    while (v4);
  }
  return v3;
}

- (int64_t)_editingStyleForRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if (v4
    && ((uint64_t v5 = *((void *)&self->_tableFlags + 2), (v5 & 0x2000) == 0)
     || (v5 & 0x100000000000) != 0
     || (*((void *)&self->_tableFlags + 1) & 0x10000000000000) == 0))
  {
    if ((*(void *)&self->_tableFlags & 0x40000) != 0)
    {
      uint64_t v7 = [(UITableView *)self _delegateProxy];
      int64_t v6 = [v7 tableView:self editingStyleForRowAtIndexPath:v4];
    }
    else
    {
      int64_t v6 = 1;
    }
  }
  else
  {
    int64_t v6 = 0;
  }

  return v6;
}

- (id)_titleForDeleteConfirmationButtonForRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    if ((*((unsigned char *)&self->_tableFlags + 2) & 8) != 0)
    {
      int64_t v6 = [(UITableView *)self _delegateProxy];
      uint64_t v5 = [v6 tableView:self titleForDeleteConfirmationButtonForRowAtIndexPath:v4];
    }
    else
    {
      uint64_t v5 = _UINSLocalizedStringWithDefaultValue(@"Delete", @"Delete");
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

- (id)_titleForSwipeAccessoryButtonForRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if (v4 && (*((unsigned char *)&self->_tableFlags + 9) & 0x40) != 0)
  {
    int64_t v6 = [(UITableView *)self _delegateProxy];
    uint64_t v5 = [v6 tableView:self titleForSwipeAccessoryButtonForRowAtIndexPath:v4];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

- (id)_backgroundColorForDeleteConfirmationButtonForRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    if ((*((unsigned char *)&self->_tableFlags + 9) & 0x80) == 0
      || ([(UITableView *)self _delegateProxy],
          uint64_t v5 = objc_claimAutoreleasedReturnValue(),
          [v5 tableView:self backgroundColorForDeleteConfirmationButtonForRowAtIndexPath:v4],
          int64_t v6 = objc_claimAutoreleasedReturnValue(),
          v5,
          !v6))
    {
      int64_t v6 = +[UIColor systemRedColor];
    }
  }
  else
  {
    int64_t v6 = 0;
  }

  return v6;
}

- (id)_backgroundColorForSwipeAccessoryButtonForRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    if ((*((unsigned char *)&self->_tableFlags + 10) & 1) == 0
      || ([(UITableView *)self _delegateProxy],
          uint64_t v5 = objc_claimAutoreleasedReturnValue(),
          [v5 tableView:self backgroundColorForSwipeAccessoryButtonForRowAtIndexPath:v4],
          int64_t v6 = objc_claimAutoreleasedReturnValue(),
          v5,
          !v6))
    {
      int64_t v6 = +[UIColor colorWithRed:0.780392157 green:0.780392157 blue:0.8 alpha:1.0];
    }
  }
  else
  {
    int64_t v6 = 0;
  }

  return v6;
}

- (BOOL)_shouldIndentWhileEditingForRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    if ((*((unsigned char *)&self->_tableFlags + 3) & 2) != 0)
    {
      int64_t v6 = [(UITableView *)self _delegateProxy];
      char v5 = [v6 tableView:self shouldIndentWhileEditingRowAtIndexPath:v4];
    }
    else
    {
      char v5 = 1;
    }
  }
  else
  {
    char v5 = 0;
  }

  return v5;
}

- (int64_t)_accessoryTypeForCell:(id)a3 forRowAtIndexPath:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (v7)
  {
    if ((*((unsigned char *)&self->_tableFlags + 5) & 0x10) != 0)
    {
      double v9 = [(UITableView *)self _delegateProxy];
      int64_t v8 = [v9 tableView:self accessoryTypeForRowWithIndexPath:v7];
    }
    else
    {
      int64_t v8 = [v6 accessoryType];
    }
  }
  else
  {
    int64_t v8 = 0;
  }

  return v8;
}

- (BOOL)_canMoveRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if (v4 && (uint64_t tableFlags = (uint64_t)self->_tableFlags, (tableFlags & 0x4000000) != 0))
  {
    if ((tableFlags & 0x800) != 0)
    {
      int64_t v8 = [(UITableView *)self _dataSourceProxy];
      char v6 = [v8 tableView:self canMoveRowAtIndexPath:v4];
    }
    else
    {
      char v6 = 1;
    }
  }
  else
  {
    char v6 = 0;
  }

  return v6;
}

- (id)_newSectionViewWithFrame:(CGRect)a3 forSection:(int64_t)a4 isHeader:(BOOL)a5
{
  BOOL v5 = a5;
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  double v12 = @"__UITableViewFooterDefaultReuseIdentifier";
  if (a5) {
    double v12 = @"__UITableViewHeaderDefaultReuseIdentifier";
  }
  id v13 = v12;
  double v14 = [[UITableViewHeaderFooterView alloc] initWithReuseIdentifier:v13];

  -[UITableViewHeaderFooterView setFrame:](v14, "setFrame:", x, y, width, height);
  [(UIView *)v14 setSemanticContentAttribute:[(UIView *)self semanticContentAttribute]];
  [(UITableView *)self _setupSectionView:v14 isHeader:v5 forSection:a4];
  return v14;
}

- (void)_reuseHeaderFooterView:(id)a3 isHeader:(BOOL)a4 forSection:(int64_t)a5
{
  BOOL v6 = a4;
  int64_t v8 = (UIView *)a3;
  if (v8 && self->_firstResponderView != v8 && self->_focusedCell != v8)
  {
    CGRect v15 = v8;
    double v9 = v8;
    if (_IsKindOfUITableViewHeaderFooterView(v9)
      && ([(UIView *)v9 reuseIdentifier],
          uint64_t v10 = objc_claimAutoreleasedReturnValue(),
          v10,
          v10))
    {
      if (v6) {
        uint64_t v11 = 2;
      }
      else {
        uint64_t v11 = 3;
      }
      [(UITableView *)self _reuseTableViewSubview:v9 viewType:v11];
    }
    else
    {
      [(UIView *)v9 removeFromSuperview];
    }
    if (a5 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v6) {
        uint64_t v12 = 2192;
      }
      else {
        uint64_t v12 = 2200;
      }
      id v13 = *(Class *)((char *)&self->super.super.super.super.isa + v12);
      double v14 = [NSNumber numberWithInteger:a5];
      [v13 removeObjectForKey:v14];

      [(UITableView *)self _notifyDidEndDisplayingHeaderFooterView:v9 forSection:a5 isHeader:v6];
    }

    int64_t v8 = v15;
  }
}

- (void)_purgeReuseQueues
{
  -[_UITableViewSubviewManager removeAllPrefetchedCells]((id *)&self->_subviewManager->super.isa);
  __32__UITableView__purgeReuseQueues__block_invoke(self->_reusableTableCells);
  __32__UITableView__purgeReuseQueues__block_invoke(self->_reusableHeaderFooterViews);
  prefetchContext = self->_prefetchContext;
  if (prefetchContext)
  {
    maxIndedouble x = prefetchContext->_maxIndex;
    -[_UITableViewPrefetchContext cancelWithNewMaxIndex:]((uint64_t)prefetchContext, maxIndex);
  }
}

void __32__UITableView__purgeReuseQueues__block_invoke(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  int v2 = [v1 objectEnumerator];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v17 objects:v22 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v17 + 1) + 8 * v6);
        long long v13 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        id v8 = v7;
        uint64_t v9 = [v8 countByEnumeratingWithState:&v13 objects:v21 count:16];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = *(void *)v14;
          do
          {
            uint64_t v12 = 0;
            do
            {
              if (*(void *)v14 != v11) {
                objc_enumerationMutation(v8);
              }
              [*(id *)(*((void *)&v13 + 1) + 8 * v12++) removeFromSuperview];
            }
            while (v10 != v12);
            uint64_t v10 = [v8 countByEnumeratingWithState:&v13 objects:v21 count:16];
          }
          while (v10);
        }

        ++v6;
      }
      while (v6 != v4);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v17 objects:v22 count:16];
    }
    while (v4);
  }

  [v1 removeAllObjects];
}

- (void)_setGestureRecognizerRequiresTableGestureRecognizersToFail:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  clientGesturesRequiringTableGesturesToFail = self->_clientGesturesRequiringTableGesturesToFail;
  if (!clientGesturesRequiringTableGesturesToFail)
  {
    uint64_t v6 = (NSMutableSet *)objc_alloc_init(MEMORY[0x1E4F1CA80]);
    id v7 = self->_clientGesturesRequiringTableGesturesToFail;
    self->_clientGesturesRequiringTableGesturesToFail = v6;

    clientGesturesRequiringTableGesturesToFail = self->_clientGesturesRequiringTableGesturesToFail;
  }
  [(NSMutableSet *)clientGesturesRequiringTableGesturesToFail addObject:v4];
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  wrapperView = self->_wrapperView;
  if (wrapperView)
  {
    uint64_t v10 = [(UIScrollView *)wrapperView panGestureRecognizer];
    [v8 addObject:v10];
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v11 = v8;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v17 != v14) {
          objc_enumerationMutation(v11);
        }
        objc_msgSend(v4, "requireGestureRecognizerToFail:", *(void *)(*((void *)&v16 + 1) + 8 * i), (void)v16);
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v13);
  }
}

- (BOOL)_ignoreCopyFilterForTableAnimations
{
  return (*((unsigned __int8 *)&self->_tableFlags + 28) >> 2) & 1;
}

- (void)_setIgnoreCopyFilterForTableAnimations:(BOOL)a3
{
  uint64_t v3 = 0x400000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFBFFFFFFFFLL | v3;
  [(UITableView *)self _setClearBlendingViewCompositingFilter];
}

- (void)_setClearBlendingViewCompositingFilter
{
  if ((*((void *)&self->_tableFlags + 3) & 0x400000000) != 0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *MEMORY[0x1E4F3A060];
  }
  id v3 = [(UIView *)self->_clearBlendingView layer];
  [v3 setCompositingFilter:v2];
}

- (void)_beginAnimatingCells
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)&self->_tableFlags + 22) & 0x40) != 0
    && [(UITableView *)self _clearBlendingViewAllowed])
  {
    clearBlendingView = self->_clearBlendingView;
    if (!clearBlendingView)
    {
      id v4 = [UIView alloc];
      [(UIView *)self bounds];
      uint64_t v5 = -[UIView initWithFrame:](v4, "initWithFrame:");
      uint64_t v6 = self->_clearBlendingView;
      self->_clearBlendingView = v5;

      [(UIView *)self->_clearBlendingView setAutoresizingMask:18];
      [(UITableView *)self _setClearBlendingViewCompositingFilter];
      clearBlendingView = self->_clearBlendingView;
    }
    id v7 = [(UIView *)clearBlendingView superview];
    wrapperView = self->_wrapperView;

    if (v7 != wrapperView) {
      [(UITableViewWrapperView *)self->_wrapperView _stickViewToBack:self->_clearBlendingView];
    }
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v9 = self->_visibleCells;
    uint64_t v10 = [(NSMutableArray *)v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v15;
      do
      {
        uint64_t v13 = 0;
        do
        {
          if (*(void *)v15 != v12) {
            objc_enumerationMutation(v9);
          }
          objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * v13++), "_setAnimating:clippingAdjacentCells:", 1, 1, (void)v14);
        }
        while (v11 != v13);
        uint64_t v11 = [(NSMutableArray *)v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v11);
    }
  }
}

uint64_t __46__UITableView__updateWithItems_updateSupport___block_invoke_5(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

uint64_t __46__UITableView__updateWithItems_updateSupport___block_invoke_6(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

uint64_t __46__UITableView__updateWithItems_updateSupport___block_invoke_7(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void, BOOL))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), a2 == 0);
  [*(id *)(a1 + 32) unlockActionViewForAnimation:*(void *)(a1 + 40)];
  uint64_t result = [*(id *)(a1 + 48) _setSkipsLayout:0];
  *(void *)(*(void *)(a1 + 56) + 3088) &= ~0x4000000000000000uLL;
  return result;
}

uint64_t __133__UITableView__startViewAnimationsForUpdate_withContext_swipeOccurrenceAnimatingDelete_oldVisibleViews_useCopyBlendingForAnimations___block_invoke_3(uint64_t a1)
{
  id v1 = *(double **)(a1 + 40);
  if (v1)
  {
    double v2 = v1[8];
    double v3 = v1[9];
    double v4 = v1[10];
    double v5 = v1[11];
  }
  else
  {
    double v3 = 0.0;
    double v4 = 0.0;
    double v5 = 0.0;
    double v2 = 0.0;
  }
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:", v2, v3, v4, v5);
}

- (BOOL)_isFocusedViewInDeletedSectionOrRow:(id)a3
{
  double v4 = (uint64_t *)a3;
  double v5 = v4;
  if (!self->_focusedCell) {
    goto LABEL_9;
  }
  BOOL v6 = 0;
  if (v4)
  {
    focusedCellIndexPath = self->_focusedCellIndexPath;
    if (focusedCellIndexPath)
    {
      int focusedViewType = self->_focusedViewType;
      if ((focusedViewType - 2) < 2)
      {
        uint64_t v9 = -[_UITableViewUpdateSupport finalSectionIndexForInitialSectionIndex:]((uint64_t)v4, [(NSIndexPath *)self->_focusedCellIndexPath section]);
LABEL_8:
        BOOL v6 = v9 == 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_10;
      }
      if (focusedViewType == 1)
      {
        unint64_t v10 = -[UITableViewRowData globalRowForRowAtIndexPath:](v4[9], focusedCellIndexPath);
        uint64_t v9 = -[_UITableViewUpdateSupport finalGlobalIndexForInitialGlobalIndex:]((uint64_t)v5, v10);
        goto LABEL_8;
      }
LABEL_9:
      BOOL v6 = 0;
    }
  }
LABEL_10:

  return v6;
}

- (void)_animateSwipeOccurrenceAction:(id)a3 alongsideCell:(id)a4 animation:(id)a5
{
  id v43 = a3;
  id v7 = (CGRect *)a5;
  id v8 = [v43 actionView];
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 frame];
    double v11 = v10;
    CGFloat v13 = v12;
    double v15 = v14;
    CGFloat v17 = v16;
    long long v18 = [(UITableView *)self _cellContainerView];
    if (v7)
    {
      double x = v7[2].origin.x;
      double y = v7[2].origin.y;
      double width = v7[2].size.width;
      double height = v7[2].size.height;
    }
    else
    {
      double y = 0.0;
      double width = 0.0;
      double height = 0.0;
      double x = 0.0;
    }
    uint64_t v23 = [v9 superview];
    objc_msgSend(v18, "convertRect:toView:", v23, x, y, width, height);
    CGFloat v25 = v24;
    CGFloat v27 = v26;
    CGFloat v29 = v28;
    CGFloat v31 = v30;

    uint64_t v32 = [v43 direction];
    CGFloat v33 = v25;
    CGFloat v34 = v27;
    CGFloat v35 = v29;
    CGFloat v36 = v31;
    if (v32 == 1)
    {
      CGFloat MinX = CGRectGetMinX(*(CGRect *)&v33);
      CGFloat v38 = v11;
      double v39 = MinX;
      v45.origin.double x = v38;
      v45.origin.double y = v13;
      v45.size.double width = v15;
      v45.size.double height = v17;
      double MaxX = v39 - CGRectGetWidth(v45);
    }
    else
    {
      double MaxX = CGRectGetMaxX(*(CGRect *)&v33);
    }
    v46.origin.double x = v25;
    v46.origin.double y = v27;
    v46.size.double width = v29;
    v46.size.double height = v31;
    double MinY = CGRectGetMinY(v46);
    if (v7)
    {
      objc_msgSend(v9, "setFrame:", MaxX, MinY, v15, CGRectGetHeight(v7[2]));
      double v42 = v7[1].origin.y;
    }
    else
    {
      double v42 = 0.0;
      v47.origin.double x = 0.0;
      v47.origin.double y = 0.0;
      v47.size.double width = 0.0;
      v47.size.double height = 0.0;
      objc_msgSend(v9, "setFrame:", MaxX, MinY, v15, CGRectGetHeight(v47));
    }
    [v9 setAlpha:v42];
  }
}

- (void)_animateScanlineViewForCell:(id)a3 occurrence:(id)a4 actionsView:(id)a5
{
  id v7 = a4;
  id v8 = a3;
  uint64_t v9 = [(UITableView *)self _cellContainerView];
  [v8 bounds];
  objc_msgSend(v8, "convertRect:toView:", v9);
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  +[UISwipeActionDeleteScanlineView lineHeight];
  double v19 = v18;
  v41.origin.double x = v11;
  v41.origin.double y = v13;
  v41.size.double width = v15;
  v41.size.double height = v17;
  CGFloat v20 = CGRectGetMinY(v41) - v19;
  v42.origin.double x = v11;
  v42.origin.double y = v13;
  v42.size.double width = v15;
  v42.size.double height = v17;
  double Width = CGRectGetWidth(v42);
  [v8 separatorInset];
  double v23 = v22;

  double v24 = -[UISwipeActionDeleteScanlineView initWithFrame:]([UISwipeActionDeleteScanlineView alloc], "initWithFrame:", v23 + 0.0, v20 + 0.0, Width - (v23 + 0.0), v19);
  CGFloat v25 = [v7 currentAction];

  double v26 = [v25 backgroundColor];
  [(UISwipeActionDeleteScanlineView *)v24 setDeleteLineColor:v26];

  [(UIView *)v24 setAlpha:0.0];
  _UITableInsertSubviewInContainerAboveAllCells(v9, v24);
  CGFloat v27 = +[_UISwipeAnimationFactory animatorForScanlineCollapse];
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  void v35[2] = __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke;
  v35[3] = &unk_1E52DA520;
  double v28 = v24;
  CGFloat v36 = v28;
  uint64_t v37 = 0;
  CGFloat v38 = v20;
  double v39 = Width;
  double v40 = v19;
  [v27 addAnimations:v35];
  uint64_t v30 = MEMORY[0x1E4F143A8];
  uint64_t v31 = 3221225472;
  uint64_t v32 = __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke_2;
  CGFloat v33 = &unk_1E52DC698;
  CGFloat v34 = v28;
  CGFloat v29 = v28;
  [v27 addCompletion:&v30];
  objc_msgSend(v27, "startAnimation", v30, v31, v32, v33);
}

uint64_t __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke(uint64_t a1)
{
  [*(id *)(a1 + 32) setAlpha:1.0];
  double v2 = *(double *)(a1 + 40);
  double v3 = *(double *)(a1 + 48);
  double v4 = *(double *)(a1 + 56);
  double v5 = *(double *)(a1 + 64);
  BOOL v6 = *(void **)(a1 + 32);
  return objc_msgSend(v6, "setFrame:", v2, v3, v4, v5);
}

void __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke_2(uint64_t a1, uint64_t a2)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke_3;
  aBlock[3] = &unk_1E52DC3A0;
  id v9 = *(id *)(a1 + 32);
  double v4 = _Block_copy(aBlock);
  double v5 = v4;
  if (a2)
  {
    (*((void (**)(void *, void))v4 + 2))(v4, 0);
  }
  else
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke_4;
    v6[3] = &unk_1E52D9F70;
    id v7 = *(id *)(a1 + 32);
    +[UIView animateWithDuration:2 delay:v6 usingSpringWithDamping:v5 initialSpringVelocity:0.5 options:0.0 animations:1.0 completion:0.0];
  }
}

uint64_t __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke_3(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeFromSuperview];
}

uint64_t __66__UITableView__animateScanlineViewForCell_occurrence_actionsView___block_invoke_4(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAlpha:0.0];
}

- (void)_accessoryButtonAction:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v5 = [(UITableView *)self _tableViewCellForContentView:v4];
  if (v5)
  {
    BOOL v6 = [(UITableView *)self _indexPathForCell:v5 usingPresentationValues:1];
    if (v6)
    {
      id v7 = [v5 accessoryActionSegueTemplate];
      id v8 = (id)[v7 perform:v5];

      [v5 _toggleExpansionButton];
      if ((*((unsigned char *)&self->_tableFlags + 5) & 0x20) != 0)
      {
        id v9 = [(UITableView *)self _delegateProxy];
        [v9 tableView:self accessoryButtonTappedForRowWithIndexPath:v6];
      }
    }
    else if (os_variant_has_internal_diagnostics())
    {
      double v12 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      {
        int v13 = 138412546;
        id v14 = v4;
        __int16 v15 = 2112;
        double v16 = v5;
        _os_log_fault_impl(&dword_1853B0000, v12, OS_LOG_TYPE_FAULT, "Unable to obtain index path for accessory: %@ in cell: %@", (uint8_t *)&v13, 0x16u);
      }
    }
    else
    {
      CGFloat v11 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1E8FDF3F8) + 8);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v13 = 138412546;
        id v14 = v4;
        __int16 v15 = 2112;
        double v16 = v5;
        _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "Unable to obtain index path for accessory: %@ in cell: %@", (uint8_t *)&v13, 0x16u);
      }
    }
LABEL_11:

    goto LABEL_12;
  }
  if (os_variant_has_internal_diagnostics())
  {
    BOOL v6 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      int v13 = 138412290;
      id v14 = v4;
      _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Unable to find containing cell for accessory: %@", (uint8_t *)&v13, 0xCu);
    }
    goto LABEL_11;
  }
  double v10 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1E8FDF3F0) + 8);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v13 = 138412290;
    id v14 = v4;
    _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_ERROR, "Unable to find containing cell for accessory: %@", (uint8_t *)&v13, 0xCu);
  }
LABEL_12:
}

- (BOOL)_shouldChangeIndexBasedOnValueChanged
{
  double v3 = [(UIView *)self traitCollection];
  if ([v3 userInterfaceIdiom] == 3)
  {
    id v4 = [(UIView *)self window];
    double v5 = [v4 _screen];
    BOOL v6 = [v5 _capabilityForKey:@"UIScreenCapabilityTouchLevelsKey"];
    BOOL v7 = [v6 integerValue] == 2;
  }
  else
  {
    BOOL v7 = 1;
  }

  return v7;
}

- (void)_sectionIndexChanged:(id)a3
{
  if ([(UITableView *)self _shouldChangeIndexBasedOnValueChanged])
  {
    [(UITableView *)self _updateSectionIndex];
  }
}

- (void)_updateSectionIndex
{
  int64_t v3 = [(UITableViewIndex *)self->_index selectedSection];
  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if ([(UITableViewIndex *)self->_index pastTop])
    {
      double v4 = *MEMORY[0x1E4F1DB28];
      double v5 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
      double v6 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
      double v7 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
    }
    else
    {
      if (![(UITableViewIndex *)self->_index pastBottom]) {
        goto LABEL_12;
      }
      -[UITableViewRowData rectForTable]((uint64_t)self->_rowData);
      double v5 = v17 + -1.0;
      double v4 = 0.0;
      double v6 = 0.0;
      double v7 = 0.0;
    }
    -[UIScrollView scrollRectToVisible:animated:](self, "scrollRectToVisible:animated:", 0, v4, v5, v6, v7);
  }
  else
  {
    [(UIScrollView *)self contentOffset];
    double v9 = v8;
    double v10 = [(UITableViewIndex *)self->_index selectedSectionTitle];
    [(UITableView *)self _sectionIndexChangedToIndex:v3 title:v10];

    [(UIScrollView *)self contentOffset];
    double v12 = v9 - v11;
    double v13 = -(v9 - v11);
    if (v12 >= 0.0) {
      double v14 = v12;
    }
    else {
      double v14 = v13;
    }
    [(UITableView *)self _defaultSectionHeaderHeight];
    if (v14 > v15)
    {
      indexRetargetFeedbackGenerator = self->_indexRetargetFeedbackGenerator;
      [(UIView *)self->_index center];
      -[UISelectionFeedbackGenerator selectionChangedAtLocation:](indexRetargetFeedbackGenerator, "selectionChangedAtLocation:");
    }
  }
LABEL_12:
  if ([(UITableView *)self _shouldShowIndexOverlays])
  {
    [(UITableView *)self _transitionIndexOverlayToVisible:1 shouldFadeBackToInvisible:0];
    [(UITableView *)self _moveSectionIndexTitleIndexToIndex:v3 highlight:0];
  }
}

- (int64_t)_sectionIndexChangedToIndex:(int64_t)a3 title:(id)a4
{
  id v6 = a4;
  uint64_t tableFlags = (uint64_t)self->_tableFlags;
  uint64_t v8 = a3;
  if ((tableFlags & 0x10000) != 0)
  {
    double v9 = [(UITableView *)self _dataSourceProxy];
    double v10 = [v9 tableView:self indexPathForSectionIndexTitle:v6 atIndex:a3];

    uint64_t v8 = [v10 section];
    if (v10)
    {
      [(UITableView *)self _scrollToRowAtIndexPath:v10 atScrollPosition:1 animated:0 usingPresentationValues:1];
LABEL_12:
      double v13 = [(UIView *)self traitCollection];
      char v14 = [v13 interactionModel];

      if ((v14 & 2) != 0) {
        [(UITableView *)self _updateFocusedItemToIndexPath:v10];
      }
      goto LABEL_15;
    }
    uint64_t tableFlags = (uint64_t)self->_tableFlags;
  }
  if ((tableFlags & 0x200) != 0)
  {
    double v11 = [(UITableView *)self _dataSourceProxy];
    uint64_t v8 = [v11 tableView:self sectionForSectionIndexTitle:v6 atIndex:a3];
  }
  if (v8 < 0) {
    goto LABEL_14;
  }
  rowData = self->_rowData;
  if (rowData) {
    rowData = (UITableViewRowData *)rowData->_numSections;
  }
  if (v8 >= (uint64_t)rowData)
  {
LABEL_14:
    double v10 = 0;
    goto LABEL_15;
  }
  double v10 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:v8];
  [(UITableView *)self _scrollToRowAtIndexPath:v10 atScrollPosition:1 animated:0 usingPresentationValues:1];
  if (v10) {
    goto LABEL_12;
  }
LABEL_15:

  return v8;
}

- (void)_sectionIndexTouchesBegan:(id)a3
{
  indexRetargetFeedbackGenerator = self->_indexRetargetFeedbackGenerator;
  [(UIView *)self->_index center];
  -[UISelectionFeedbackGenerator userInteractionStartedAtLocation:](indexRetargetFeedbackGenerator, "userInteractionStartedAtLocation:");
  if ([(UITableView *)self _shouldChangeIndexBasedOnValueChanged])
  {
    [(UITableView *)self _updateSectionIndex];
  }
}

- (void)_sectionIndexTouchesEnded:(id)a3
{
  if (*((unsigned char *)&self->_tableFlags + 23))
  {
    -[UITableView _startIndexOverlayTimerWithDelay:](self, "_startIndexOverlayTimerWithDelay:", a3, 0.75);
  }
  else if (![(UITableView *)self _shouldChangeIndexBasedOnValueChanged] {
         && [(UITableView *)self _shouldShowIndexOverlays])
  }
  {
    [(UITableView *)self _transitionIndexOverlaySelectionViewToVisible:1];
  }
  indexRetargetFeedbackGenerator = self->_indexRetargetFeedbackGenerator;
  [(UIView *)self->_index center];
  -[UISelectionFeedbackGenerator userInteractionEndedAtLocation:](indexRetargetFeedbackGenerator, "userInteractionEndedAtLocation:");
}

- (void)_languageChanged
{
  defaultSectionIndexTitles = self->_defaultSectionIndexTitles;
  self->_defaultSectionIndexTitles = 0;

  *((void *)&self->_tableFlags + 2) &= ~0x8000000uLL;
}

- (void)_sendWillBeginEditingForIndexPath:(id)a3
{
  id v4 = a3;
  if (v4 && (*((unsigned char *)&self->_tableFlags + 6) & 0x10) != 0)
  {
    id v6 = v4;
    double v5 = [(UITableView *)self _delegateProxy];
    [v5 tableView:self willBeginEditingRowAtIndexPath:v6];

    id v4 = v6;
  }
}

- (void)_sendDidEndEditingForIndexPath:(id)a3
{
  if ((*((unsigned char *)&self->_tableFlags + 6) & 0x20) != 0)
  {
    id v4 = a3;
    id v5 = [(UITableView *)self _delegateProxy];
    [v5 tableView:self didEndEditingRowAtIndexPath:v4];
  }
}

- (id)deleteConfirmationIndexPath
{
  int64_t v3 = self->_swipedIndexPath;
  if (![(UITableView *)self _isUsingPresentationValues])
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v5 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathBeforeShadowUpdates:v3];

      int64_t v3 = (NSIndexPath *)v5;
    }
  }
  return v3;
}

- (void)setDeleteConfirmationIndexPath:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  id v8 = a3;
  if (![(UITableView *)self _isUsingPresentationValues])
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v7 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathAfterShadowUpdates:v8];

      id v8 = (id)v7;
    }
  }
  [(UISwipeActionController *)self->_swipeActionController swipeItemAtIndexPath:v8 configuration:0 direction:0 animated:v4 completion:0];
}

- (void)_scrollToTopHidingTableHeader:(BOOL)a3
{
  BOOL v3 = a3;
  [(UITableView *)self _contentInset];
  double v6 = v5;
  double v8 = v7;
  [(UITableView *)self heightForAutohidingTableHeaderView];
  -[UIScrollView setContentOffset:animated:](self, "setContentOffset:animated:", v3, v8, v9 - v6);
}

uint64_t __37__UITableView__sectionForFooterView___block_invoke(uint64_t result, void *a2, uint64_t a3, unsigned char *a4)
{
  if (*(void *)(result + 32) == a3)
  {
    uint64_t v5 = result;
    uint64_t result = [a2 integerValue];
    *(void *)(*(void *)(*(void *)(v5 + 40) + 8) + 24) = result;
    *a4 = 1;
  }
  return result;
}

- (id)_nibExternalObjectsTablesForType:(int)a3
{
  if ((a3 & 0xFFFFFFFE) == 2)
  {
    uint64_t v4 = 2288;
  }
  else
  {
    if (a3 != 1)
    {
      double v12 = [MEMORY[0x1E4F28B00] currentHandler];
      objc_msgSend(v12, "handleFailureInMethod:object:file:lineNumber:description:", a2, self, @"UITableView.m", 5503, @"attempt to access nib external objects tables for unknown view type %ld", a3);
    }
    uint64_t v4 = 2272;
  }
  double v6 = (void **)((char *)&self->super.super.super.super.isa + v4);
  double v7 = *v6;
  if (!*v6)
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    double v9 = *v6;
    *double v6 = v8;

    double v7 = *v6;
  }
  return v7;
}

- (UIScrollView)_wrapperView
{
  return (UIScrollView *)self->_wrapperView;
}

- (void)_handleUserInterfaceIdiomChange
{
  [(UITableView *)self _updateConstants];
  [(UITableView *)self _updateWrapperView];
  [(UITableView *)self _updateVerticalScrollIndicatorVisibility];
}

- (void)_updateConstantsForVisibleCellsAndHeaderFooterViews
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  BOOL v3 = [(UITableView *)self _preparedCells];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v29 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v28 + 1) + 8 * i) _setConstants:self->_constants];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v28 objects:v34 count:16];
    }
    while (v5);
  }

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v8 = [(NSMutableDictionary *)self->_visibleHeaderViews objectEnumerator];
  uint64_t v9 = [v8 countByEnumeratingWithState:&v24 objects:v33 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v25;
    do
    {
      for (uint64_t j = 0; j != v10; ++j)
      {
        if (*(void *)v25 != v11) {
          objc_enumerationMutation(v8);
        }
        double v13 = *(void **)(*((void *)&v24 + 1) + 8 * j);
        if (_IsKindOfUITableViewHeaderFooterView(v13)) {
          [v13 _setConstants:self->_constants];
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v24 objects:v33 count:16];
    }
    while (v10);
  }

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  char v14 = [(NSMutableDictionary *)self->_visibleFooterViews objectEnumerator];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v20 objects:v32 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v21;
    do
    {
      for (uint64_t k = 0; k != v16; ++k)
      {
        if (*(void *)v21 != v17) {
          objc_enumerationMutation(v14);
        }
        double v19 = *(void **)(*((void *)&v20 + 1) + 8 * k);
        if (_IsKindOfUITableViewHeaderFooterView(v19)) {
          [v19 _setConstants:self->_constants];
        }
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v20 objects:v32 count:16];
    }
    while (v16);
  }
}

void __61__UITableView__ensureInitializeSystemAppearanceModifications__block_invoke_2(uint64_t a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  double v2 = [*(id *)(a1 + 32) appearance];
  [v2 _setSeparatorsDrawInVibrantLightModeUIAppearance:MEMORY[0x1E4F1CC28]];

  BOOL v3 = *(void **)(a1 + 32);
  v7[0] = objc_opt_class();
  uint64_t v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];
  uint64_t v5 = [v3 appearanceMatchingProperties:&unk_1ED3F7AC8 whenContainedInInstancesOfClasses:v4];

  uint64_t v6 = +[UIColor clearColor];
  [v5 setBackgroundColor:v6];

  [v5 _setSeparatorsDrawInVibrantLightModeUIAppearance:MEMORY[0x1E4F1CC38]];
}

- (void)_populateArchivedSubviews:(id)a3
{
  v44[5] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  v39.receiver = self;
  v39.super_class = (Class)UITableView;
  [(UIScrollView *)&v39 _populateArchivedSubviews:v4];
  v44[0] = self->_topSeparator;
  v44[1] = self->_index;
  v44[2] = self->_countLabel;
  v44[3] = self->_backgroundView;
  uint64_t v5 = 0;
  v44[4] = self->_wrapperView;
  do
  {
    if (v44[v5]) {
      objc_msgSend(v4, "removeObject:");
    }
    ++v5;
  }
  while (v5 != 5);
  v43[0] = self->_visibleCells;
  uint64_t v6 = self->_extraSeparators;
  uint64_t v7 = 0;
  v43[1] = v6;
  char v8 = 1;
  do
  {
    char v9 = v8;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v10 = (id)v43[v7];
    uint64_t v11 = [v10 countByEnumeratingWithState:&v35 objects:v42 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v36;
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v36 != v13) {
            objc_enumerationMutation(v10);
          }
          [v4 removeObject:*(void *)(*((void *)&v35 + 1) + 8 * i)];
        }
        uint64_t v12 = [v10 countByEnumeratingWithState:&v35 objects:v42 count:16];
      }
      while (v12);
    }

    char v8 = 0;
    uint64_t v7 = 1;
  }
  while ((v9 & 1) != 0);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v15 = [(NSMutableDictionary *)self->_visibleHeaderViews objectEnumerator];
  uint64_t v16 = [v15 countByEnumeratingWithState:&v31 objects:v41 count:16];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = *(void *)v32;
    do
    {
      for (uint64_t j = 0; j != v17; ++j)
      {
        if (*(void *)v32 != v18) {
          objc_enumerationMutation(v15);
        }
        [v4 removeObject:*(void *)(*((void *)&v31 + 1) + 8 * j)];
      }
      uint64_t v17 = [v15 countByEnumeratingWithState:&v31 objects:v41 count:16];
    }
    while (v17);
  }

  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v20 = [(NSMutableDictionary *)self->_visibleFooterViews objectEnumerator];
  uint64_t v21 = [v20 countByEnumeratingWithState:&v27 objects:v40 count:16];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = *(void *)v28;
    do
    {
      for (uint64_t k = 0; k != v22; ++k)
      {
        if (*(void *)v28 != v23) {
          objc_enumerationMutation(v20);
        }
        [v4 removeObject:*(void *)(*((void *)&v27 + 1) + 8 * k)];
      }
      uint64_t v22 = [v20 countByEnumeratingWithState:&v27 objects:v40 count:16];
    }
    while (v22);
  }

  for (uint64_t m = 1; m != -1; --m)
  for (uint64_t n = 4; n != -1; --n)
}

- (UITableView)initWithCoder:(NSCoder *)coder
{
  id v4 = coder;
  *((void *)&self->_tableFlags + 2) |= 0x2000000000uLL;
  v73.receiver = self;
  v73.super_class = (Class)UITableView;
  id v5 = [(UIScrollView *)&v73 initWithCoder:v4];
  if (!v5) {
    goto LABEL_85;
  }
  [(id)objc_opt_class() _ensureInitializeSystemAppearanceModifications];
  uint64_t v6 = @"UITableViewStyle";
  if ([(NSCoder *)v4 containsValueForKey:@"UITableViewStyle"]
    || (uint64_t v6 = @"UIStyle", [(NSCoder *)v4 containsValueForKey:@"UIStyle"]))
  {
    uint64_t v7 = [(NSCoder *)v4 decodeIntegerForKey:v6];
  }
  else
  {
    uint64_t v7 = 0;
  }
  *((void *)v5 + 385) = *((void *)v5 + 385) & 0xFFFF9FFFFFFFFFFFLL | (([v5 _mappedStyle:v7] & 3) << 45);
  [v5 _setupTableViewCommon];
  if ([(NSCoder *)v4 decodeBoolForKey:@"UIUseCustomBackgroundView"])
  {
    uint64_t v8 = [(NSCoder *)v4 decodeObjectForKey:@"UIBackgroundView"];
    char v9 = (void *)*((void *)v5 + 299);
    *((void *)v5 + 299) = v8;

    *((void *)v5 + 386) |= 0x8000000000uLL;
  }
  else if (((*((void *)v5 + 385) >> 45) & 3uLL) - 1 <= 1)
  {
    uint64_t v10 = [v5 _defaultBackgroundView];
    uint64_t v11 = (void *)*((void *)v5 + 299);
    *((void *)v5 + 299) = v10;
  }
  [v5 _configureBackgroundView];
  if (!dyld_program_sdk_at_least())
  {
    *((void *)v5 + 385) &= 0xFFF8FFFFFFFFFFFFLL;
    if ([(NSCoder *)v4 containsValueForKey:@"UISeparatorStyleIOS5AndLater"])
    {
      uint64_t v12 = @"UISeparatorStyleIOS5AndLater";
    }
    else
    {
      if (![(NSCoder *)v4 containsValueForKey:@"UISeparatorStyle"]) {
        goto LABEL_20;
      }
      uint64_t v12 = @"UISeparatorStyle";
    }
    goto LABEL_18;
  }
  if ([(NSCoder *)v4 containsValueForKey:@"UISeparatorStyleIOS9AndLater"])
  {
    uint64_t v12 = @"UISeparatorStyleIOS9AndLater";
LABEL_18:
    char v13 = [(NSCoder *)v4 decodeIntegerForKey:v12];
    goto LABEL_19;
  }
  char v13 = [*((id *)v5 + 374) defaultSeparatorStyleForTableViewStyle:(*((void *)v5 + 385) >> 45) & 3];
LABEL_19:
  *((void *)v5 + 385) = *((void *)v5 + 385) & 0xFFF8FFFFFFFFFFFFLL | ((unint64_t)(v13 & 7) << 48);
LABEL_20:
  _tagObjectForSelector(v5, (uint64_t)sel_setSeparatorStyle_);
  uint64_t v14 = *((void *)v5 + 385);
  if (__CFSUB__(v14 & 0x7000000000000, 0x2000000000000, 0))
  {
    *((void *)v5 + 384) = *((void *)v5 + 384);
    *((void *)v5 + 385) = v14 & 0xFFF8FFFFFFFFFFFFLL | 0x1000000000000;
  }
  if ([(NSCoder *)v4 containsValueForKey:@"UIPrefetchingEnabled"])
  {
    BOOL v15 = [(NSCoder *)v4 decodeBoolForKey:@"UIPrefetchingEnabled"];
    uint64_t v16 = 0x20000;
    if (!v15) {
      uint64_t v16 = 0;
    }
    *((void *)v5 + 387) = *((void *)v5 + 387) & 0xFFFFFFFFFFFDFFFFLL | v16;
  }
  [v5 _setupDefaultHeights];
  if ([(NSCoder *)v4 containsValueForKey:@"UIRowHeight"])
  {
    [(NSCoder *)v4 decodeFloatForKey:@"UIRowHeight"];
    *((double *)v5 + 260) = v17;
  }
  if ([(NSCoder *)v4 containsValueForKey:@"UISectionHeaderHeight"])
  {
    [(NSCoder *)v4 decodeFloatForKey:@"UISectionHeaderHeight"];
    *((double *)v5 + 261) = v18;
  }
  if ([(NSCoder *)v4 containsValueForKey:@"UISectionFooterHeight"])
  {
    [(NSCoder *)v4 decodeFloatForKey:@"UISectionFooterHeight"];
    *((double *)v5 + 262) = v19;
  }
  if ([(NSCoder *)v4 containsValueForKey:@"UIEstimatedRowHeight"])
  {
    [(NSCoder *)v4 decodeFloatForKey:@"UIEstimatedRowHeight"];
    *((double *)v5 + 263) = v20;
  }
  if ([(NSCoder *)v4 containsValueForKey:@"UIEstimatedSectionHeaderHeight"])
  {
    [(NSCoder *)v4 decodeFloatForKey:@"UIEstimatedSectionHeaderHeight"];
    *((double *)v5 + 264) = v21;
  }
  if ([(NSCoder *)v4 containsValueForKey:@"UIEstimatedSectionFooterHeight"])
  {
    [(NSCoder *)v4 decodeFloatForKey:@"UIEstimatedSectionFooterHeight"];
    *((double *)v5 + 265) = v22;
  }
  if ([(NSCoder *)v4 containsValueForKey:@"UIFillerRowHeight"])
  {
    [(NSCoder *)v4 decodeDoubleForKey:@"UIFillerRowHeight"];
    *((void *)v5 + 390) = v23;
  }
  if ([(NSCoder *)v4 containsValueForKey:@"UISectionHeaderTopPadding"])
  {
    [(NSCoder *)v4 decodeDoubleForKey:@"UISectionHeaderTopPadding"];
    *((void *)v5 + 391) = v24;
  }
  *((void *)v5 + 386) |= 0x400uLL;
  if ([(NSCoder *)v4 containsValueForKey:@"UIAllowsSelection"])
  {
    BOOL v25 = [(NSCoder *)v4 decodeBoolForKey:@"UIAllowsSelection"];
    uint64_t v26 = *((void *)v5 + 387);
    uint64_t v27 = 1024;
    if (!v25) {
      uint64_t v27 = 0;
    }
    unint64_t v28 = *((void *)v5 + 386) & 0xFFFFFFFFFFFFFBFFLL | v27;
    *((void *)v5 + 386) = v28;
    if ((v28 & 0x400) != 0) {
      goto LABEL_47;
    }
  }
  else
  {
    unint64_t v28 = *((void *)v5 + 386);
    uint64_t v26 = *((void *)v5 + 387);
    if ((v28 & 0x400) != 0)
    {
LABEL_47:
      if ([(NSCoder *)v4 decodeBoolForKey:@"UIAllowsMultipleSelection"]) {
        unsigned int v29 = 4096;
      }
      else {
        unsigned int v29 = 0;
      }
      unint64_t v28 = *((void *)v5 + 386);
      uint64_t v26 = *((void *)v5 + 387);
      goto LABEL_53;
    }
  }
  unsigned int v29 = 0;
LABEL_53:
  *((void *)v5 + 386) = v28 & 0xFFFFFFFFFFFFEFFFLL | v29;
  *((void *)v5 + 387) = v26;
  BOOL v30 = [(NSCoder *)v4 decodeBoolForKey:@"UIAllowsSelectionDuringEditing"];
  uint64_t v31 = *((void *)v5 + 387);
  uint64_t v32 = 2048;
  if (!v30) {
    uint64_t v32 = 0;
  }
  unint64_t v33 = *((void *)v5 + 386) & 0xFFFFFFFFFFFFF7FFLL | v32;
  *((void *)v5 + 386) = v33;
  if (v30)
  {
    if ([(NSCoder *)v4 decodeBoolForKey:@"UIAllowsMultipleSelectionDuringEditing"]) {
      unsigned int v34 = 0x2000;
    }
    else {
      unsigned int v34 = 0;
    }
    unint64_t v33 = *((void *)v5 + 386);
    uint64_t v31 = *((void *)v5 + 387);
  }
  else
  {
    unsigned int v34 = 0;
  }
  *((void *)v5 + 386) = v33 & 0xFFFFFFFFFFFFDFFFLL | v34;
  *((void *)v5 + 387) = v31;
  [v5 _updateMultiSelectControllerIfNeeded];
  BOOL v35 = [(NSCoder *)v4 decodeBoolForKey:@"UICellLayoutMarginsFollowReadableWidth"];
  uint64_t v36 = 0x2000;
  if (!v35) {
    uint64_t v36 = 0;
  }
  *((void *)v5 + 387) = *((void *)v5 + 387) & 0xFFFFFFFFFFFFDFFFLL | v36;
  if ([(NSCoder *)v4 containsValueForKey:@"UIInsetsContentViewsToSafeArea"])
  {
    BOOL v37 = [(NSCoder *)v4 decodeBoolForKey:@"UIInsetsContentViewsToSafeArea"];
    uint64_t v38 = 0x2000000;
    if (!v37) {
      uint64_t v38 = 0;
    }
    *((void *)v5 + 387) = *((void *)v5 + 387) & 0xFFFFFFFFFDFFFFFFLL | v38;
  }
  uint64_t v39 = [(NSCoder *)v4 decodeObjectForKey:@"UITableHeaderView"];
  double v40 = (void *)*((void *)v5 + 305);
  *((void *)v5 + 305) = v39;

  uint64_t v41 = [(NSCoder *)v4 decodeObjectForKey:@"UITableFooterView"];
  CGRect v42 = (void *)*((void *)v5 + 306);
  *((void *)v5 + 306) = v41;

  uint64_t v43 = [(NSCoder *)v4 decodeObjectForKey:@"UISeparatorColor"];
  uint64_t v44 = (void *)*((void *)v5 + 321);
  *((void *)v5 + 321) = v43;

  CGRect v45 = (void *)*((void *)v5 + 321);
  if (v45)
  {
    CGRect v46 = [*((id *)v5 + 374) defaultSeparatorColorForTableViewStyle:(*((void *)v5 + 385) >> 45) & 3];
    char v47 = [v45 isEqual:v46];

    if ((v47 & 1) == 0) {
      _tagObjectForSelector(v5, (uint64_t)sel_setSeparatorColor_);
    }
  }
  else
  {
    if ((*((unsigned char *)v5 + 3085) & 0x60) != 0) {
      +[UIColor tableSeparatorDarkColor];
    }
    else {
    uint64_t v48 = +[UIColor tableSeparatorLightColor];
    }
    CGRect v49 = (void *)*((void *)v5 + 321);
    *((void *)v5 + 321) = v48;
  }
  [v5 _resetDarkenedSeparatorColor];
  uint64_t v50 = [(NSCoder *)v4 decodeObjectForKey:@"UITableViewCellPrototypeNibs"];
  uint64_t v51 = (void *)*((void *)v5 + 283);
  *((void *)v5 + 283) = v50;

  id v52 = [(NSCoder *)v4 decodeObjectForKey:@"UITableViewCellPrototypeNibExternalObjects"];
  uint64_t v53 = mutableDictionaryByTransformingLeafDictionariesToWeakValued(v52);
  uint64_t v54 = (void *)*((void *)v5 + 284);
  *((void *)v5 + 284) = v53;

  uint64_t v55 = [(NSCoder *)v4 decodeObjectForKey:@"UITableViewHeaderFooterPrototypeNibs"];
  uint64_t v56 = (void *)*((void *)v5 + 285);
  *((void *)v5 + 285) = v55;

  uint64_t v57 = [(NSCoder *)v4 decodeObjectForKey:@"UITableViewHeaderFooterPrototypeNibExternalObjects"];
  uint64_t v58 = mutableDictionaryByTransformingLeafDictionariesToWeakValued(v57);
  id v59 = (void *)*((void *)v5 + 286);
  *((void *)v5 + 286) = v58;

  uint64_t v60 = [(NSCoder *)v4 decodeObjectForKey:@"UISectionIndexColor"];
  id v61 = (void *)*((void *)v5 + 327);
  *((void *)v5 + 327) = v60;

  uint64_t v62 = [(NSCoder *)v4 decodeObjectForKey:@"UISectionIndexBackgroundColor"];
  long long v63 = (void *)*((void *)v5 + 328);
  *((void *)v5 + 328) = v62;

  uint64_t v64 = [(NSCoder *)v4 decodeObjectForKey:@"UISectionIndexTrackingBackgroundColor"];
  long long v65 = (void *)*((void *)v5 + 329);
  *((void *)v5 + 329) = v64;

  if ([(NSCoder *)v4 containsValueForKey:@"UISectionIndexMinimumDisplayRowCount"]) {
    *((void *)v5 + 315) = [(NSCoder *)v4 decodeIntegerForKey:@"UISectionIndexMinimumDisplayRowCount"];
  }
  if ([(NSCoder *)v4 containsValueForKey:@"UISeparatorInset"])
  {
    [(NSCoder *)v4 decodeUIEdgeInsetsForKey:@"UISeparatorInset"];
    *((void *)v5 + 352) = v66;
    *((void *)v5 + 353) = v67;
    *((void *)v5 + 354) = v68;
    *((void *)v5 + 355) = v69;
  }
  if ([(NSCoder *)v4 containsValueForKey:@"UISeparatorInsetReference"]) {
    objc_msgSend(v5, "setSeparatorInsetReference:", -[NSCoder decodeIntegerForKey:](v4, "decodeIntegerForKey:", @"UISeparatorInsetReference"));
  }
  if ([(NSCoder *)v4 containsValueForKey:@"UISpringLoaded"]) {
    objc_msgSend(v5, "setSpringLoaded:", -[NSCoder decodeBoolForKey:](v4, "decodeBoolForKey:", @"UISpringLoaded"));
  }
  BOOL v70 = [(NSCoder *)v4 decodeBoolForKey:@"UIUsingCustomLayoutMargins"];
  uint64_t v71 = *((void *)v5 + 387);
  if (v70) {
    v71 |= 0x20uLL;
  }
  *((void *)v5 + 386) &= ~0x2000000000uLL;
  *((void *)v5 + 387) = v71;
  _tagObjectForBackgroundColorIfNecessary(v5);
LABEL_85:

  return (UITableView *)v5;
}

- (void)awakeFromNib
{
  v3.receiver = self;
  v3.super_class = (Class)UITableView;
  [&v3 awakeFromNib];
  _tagObjectForBackgroundColorIfNecessary(self);
}

- (void)encodeWithCoder:(id)a3
{
  id v4 = a3;
  [(UIScrollView *)self _setShowsVerticalScrollIndicatorFlag:(*((void *)&self->_tableFlags + 2) >> 26) & 1];
  [(UIScrollView *)self _setShowsHorizontalScrollIndicatorFlag:(*((void *)&self->_tableFlags + 2) >> 25) & 1];
  v29.receiver = self;
  v29.super_class = (Class)UITableView;
  [(UIScrollView *)&v29 encodeWithCoder:v4];
  [(UITableView *)self _updateShowScrollIndicatorsFlag];
  [v4 encodeInteger:(*((void *)&self->_tableFlags + 1) >> 45) & 3 forKey:@"UITableViewStyle"];
  [v4 encodeInteger:(*((void *)&self->_tableFlags + 1) & 0x600000000000) != 0 forKey:@"UIStyle"];
  unint64_t v5 = *((void *)&self->_tableFlags + 1);
  uint64_t v6 = HIWORD(v5) & 7;
  if (v6)
  {
    uint64_t v7 = +[UIDevice currentDevice];
    uint64_t v8 = [v7 userInterfaceIdiom];

    if ((v8 & 0xFFFFFFFFFFFFFFFBLL) != 1 && v6 == 2) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v6;
    }
    [v4 encodeInteger:v10 forKey:@"UISeparatorStyle"];
    [v4 encodeInteger:*((_WORD *)&self->_tableFlags + 7) & 7 forKey:@"UISeparatorStyleIOS5AndLater"];
    unint64_t v5 = *((void *)&self->_tableFlags + 1);
    uint64_t v11 = HIWORD(v5) & 7;
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v11 != -[UITableConstants defaultSeparatorStyleForTableViewStyle:](self->_constants, "defaultSeparatorStyleForTableViewStyle:", (v5 >> 45) & 3))[v4 encodeInteger:*((_WORD *)&self->_tableFlags + 7) & 7 forKey:@"UISeparatorStyleIOS9AndLater"]; {
  [v4 encodeBool:(*((void *)&self->_tableFlags + 3) >> 17) & 1 forKey:@"UIPrefetchingEnabled"];
  }
  double rowHeight = self->_rowHeight;
  *(float *)&double rowHeight = rowHeight;
  [v4 encodeFloat:@"UIRowHeight" forKey:rowHeight];
  double sectionHeaderHeight = self->_sectionHeaderHeight;
  *(float *)&double sectionHeaderHeight = sectionHeaderHeight;
  [v4 encodeFloat:@"UISectionHeaderHeight" forKey:sectionHeaderHeight];
  double sectionFooterHeight = self->_sectionFooterHeight;
  *(float *)&double sectionFooterHeight = sectionFooterHeight;
  [v4 encodeFloat:@"UISectionFooterHeight" forKey:sectionFooterHeight];
  double estimatedRowHeight = self->_estimatedRowHeight;
  *(float *)&double estimatedRowHeight = estimatedRowHeight;
  [v4 encodeFloat:@"UIEstimatedRowHeight" forKey:estimatedRowHeight];
  double estimatedSectionHeaderHeight = self->_estimatedSectionHeaderHeight;
  *(float *)&double estimatedSectionHeaderHeight = estimatedSectionHeaderHeight;
  [v4 encodeFloat:@"UIEstimatedSectionHeaderHeight" forKey:estimatedSectionHeaderHeight];
  double estimatedSectionFooterHeight = self->_estimatedSectionFooterHeight;
  *(float *)&double estimatedSectionFooterHeight = estimatedSectionFooterHeight;
  [v4 encodeFloat:@"UIEstimatedSectionFooterHeight" forKey:estimatedSectionFooterHeight];
  [v4 encodeDouble:@"UIFillerRowHeight" forKey:self->_fillerRowHeight];
  [v4 encodeDouble:@"UISectionHeaderTopPadding" forKey:self->_sectionHeaderTopPadding];
  uint64_t v18 = *((void *)&self->_tableFlags + 2);
  if ((v18 & 0x400) != 0)
  {
    unint64_t v19 = *((void *)&self->_tableFlags + 3);
    if ((v18 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  [v4 encodeBool:0 forKey:@"UIAllowsSelection"];
  uint64_t v18 = *((void *)&self->_tableFlags + 2);
  unint64_t v19 = *((void *)&self->_tableFlags + 3);
  if ((v18 & 0x800) != 0)
  {
LABEL_16:
    [v4 encodeBool:1 forKey:@"UIAllowsSelectionDuringEditing"];
    uint64_t v18 = *((void *)&self->_tableFlags + 2);
    unint64_t v19 = *((void *)&self->_tableFlags + 3);
  }
LABEL_17:
  if ((v18 & 0x1000) != 0)
  {
    [v4 encodeBool:1 forKey:@"UIAllowsMultipleSelection"];
    unint64_t v19 = *((void *)&self->_tableFlags + 3);
    if ((*((void *)&self->_tableFlags + 2) & 0x2000) == 0)
    {
LABEL_19:
      if ((v19 & 0x2000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
  else if ((v18 & 0x2000) == 0)
  {
    goto LABEL_19;
  }
  [v4 encodeBool:1 forKey:@"UIAllowsMultipleSelectionDuringEditing"];
  unint64_t v19 = *((void *)&self->_tableFlags + 3);
  if ((v19 & 0x2000) != 0)
  {
LABEL_20:
    [v4 encodeBool:1 forKey:@"UICellLayoutMarginsFollowReadableWidth"];
    unint64_t v19 = *((void *)&self->_tableFlags + 3);
  }
LABEL_21:
  [v4 encodeBool:(v19 >> 25) & 1 forKey:@"UIInsetsContentViewsToSafeArea"];
  tableHeaderView = self->_tableHeaderView;
  if (tableHeaderView) {
    [v4 encodeObject:tableHeaderView forKey:@"UITableHeaderView"];
  }
  tableFooterView = self->_tableFooterView;
  if (tableFooterView) {
    [v4 encodeObject:tableFooterView forKey:@"UITableFooterView"];
  }
  if ((*((unsigned char *)&self->_tableFlags + 13) & 0x60) != 0) {
    +[UIColor tableSeparatorDarkColor];
  }
  else {
  float v22 = +[UIColor tableSeparatorLightColor];
  }
  separatorColor = self->_separatorColor;
  if (separatorColor != v22) {
    [v4 encodeObject:separatorColor forKey:@"UISeparatorColor"];
  }
  if ([(NSMutableDictionary *)self->_nibMap count]) {
    [v4 encodeObject:self->_nibMap forKey:@"UITableViewCellPrototypeNibs"];
  }
  if ([(NSMutableDictionary *)self->_nibExternalObjectsTables count]) {
    [v4 encodeObject:self->_nibExternalObjectsTables forKey:@"UITableViewCellPrototypeNibExternalObjects"];
  }
  if ([(NSMutableDictionary *)self->_headerFooterNibMap count]) {
    [v4 encodeObject:self->_headerFooterNibMap forKey:@"UITableViewHeaderFooterPrototypeNibs"];
  }
  if ([(NSMutableDictionary *)self->_headerFooterNibExternalObjectsTables count]) {
    [v4 encodeObject:self->_headerFooterNibExternalObjectsTables forKey:@"UITableViewHeaderFooterPrototypeNibExternalObjects"];
  }
  if ((*((unsigned char *)&self->_tableFlags + 20) & 0x80) != 0)
  {
    [v4 encodeBool:1 forKey:@"UIUseCustomBackgroundView"];
    backgroundView = self->_backgroundView;
    if (backgroundView) {
      [v4 encodeObject:backgroundView forKey:@"UIBackgroundView"];
    }
  }
  indexColor = self->_indexColor;
  if (indexColor) {
    [v4 encodeObject:indexColor forKey:@"UISectionIndexColor"];
  }
  indexBackgroundColor = self->_indexBackgroundColor;
  if (indexBackgroundColor) {
    [v4 encodeObject:indexBackgroundColor forKey:@"UISectionIndexBackgroundColor"];
  }
  indexTrackingBackgroundColor = self->_indexTrackingBackgroundColor;
  if (indexTrackingBackgroundColor) {
    [v4 encodeObject:indexTrackingBackgroundColor forKey:@"UISectionIndexTrackingBackgroundColor"];
  }
  int64_t sectionIndexMinimumDisplayRowCount = self->_sectionIndexMinimumDisplayRowCount;
  if (sectionIndexMinimumDisplayRowCount) {
    [v4 encodeInteger:sectionIndexMinimumDisplayRowCount forKey:@"UISectionIndexMinimumDisplayRowCount"];
  }
  if (self->_separatorInset.left != -1.0 || self->_separatorInset.right != -1.0) {
    [v4 encodeUIEdgeInsets:@"UISeparatorInset" forKey:self->_separatorInset.top];
  }
  objc_msgSend(v4, "encodeInteger:forKey:", -[UITableView separatorInsetReference](self, "separatorInsetReference"), @"UISeparatorInsetReference");
  if ([(UITableView *)self isSpringLoaded]) {
    [v4 encodeBool:1 forKey:@"UISpringLoaded"];
  }
  if ((*((unsigned char *)&self->_tableFlags + 24) & 0x20) != 0) {
    [v4 encodeBool:1 forKey:@"UIUsingCustomLayoutMargins"];
  }
}

- (void)dealloc
{
  v10[4] = *MEMORY[0x1E4F143B8];
  swipeActionController = self->_swipeActionController;
  self->_swipeActionController = 0;

  *((void *)&self->_tableFlags + 3) |= 0x100uLL;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  unint64_t v5 = WeakRetained;
  if (WeakRetained) {
    objc_setAssociatedObject(WeakRetained, (char *)&self->super.super.super.super.isa + 2, 0, (void *)1);
  }

  uint64_t v6 = [MEMORY[0x1E4F28EB8] defaultCenter];
  v10[0] = @"UIContentSizeCategoryDidChangeNotification";
  v10[1] = 0x1ED15CFE0;
  v10[2] = @"UIAccessibilityDarkerSystemColorsStatusDidChangeNotification";
  v10[3] = @"UIApplicationDidReceiveMemoryWarningNotification";
  uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:4];
  -[NSNotificationCenter _uiRemoveObserver:names:](v6, self, v7);

  if (self->_reorderingSupport) {
    [(UITableView *)self _stopAutoscrollTimer];
  }
  tableHeaderBackgroundView = self->_tableHeaderBackgroundView;
  self->_tableHeaderBackgroundView = 0;

  if (self->_indexOverlayTimer) {
    [(UITableView *)self _stopIndexOverlayTimer];
  }
  if (self->_indexOverlayIndicatorEventIgnoreTimer) {
    [(UITableView *)self _stopIgnoringWheelEventsOnIndexOverlayIndicator:0];
  }
  [(UITableView *)self _tearDownIndexOverlayViews];
  v9.receiver = self;
  v9.super_class = (Class)UITableView;
  [(UIScrollView *)&v9 dealloc];
}

- (void)setDelaysContentTouches:(BOOL)a3
{
  BOOL v3 = a3;
  v5.receiver = self;
  v5.super_class = (Class)UITableView;
  -[UIScrollView setDelaysContentTouches:](&v5, sel_setDelaysContentTouches_);
  if (dyld_program_sdk_at_least()) {
    [(UIScrollView *)self->_wrapperView setDelaysContentTouches:v3];
  }
}

- (int64_t)_popoverControllerStyle
{
  double v2 = [(UIView *)self _viewControllerForAncestor];
  BOOL v3 = [v2 _popoverController];
  int64_t v4 = [v3 _popoverControllerStyle];

  return v4;
}

- (BOOL)_isInModalViewController
{
  uint64_t v2 = [(UIView *)self _viewControllerForAncestor];
  if (!v2) {
    return 0;
  }
  BOOL v3 = (void *)v2;
  do
  {
    uint64_t v4 = v3[15];
    BOOL v5 = v4 != 0;
    if (v4) {
      break;
    }
    uint64_t v6 = [v3 parentViewController];

    BOOL v3 = (void *)v6;
  }
  while (v6);

  return v5;
}

void __29__UITableView_setDataSource___block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Warning", &_UITableViewCodingKey_style_Yukon_block_invoke___s_category)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "You are trying to set a deallocating object as dataSource. This will be a hard crash in the future. Offending object: %@ hosting object: %@", (uint8_t *)&v5, 0x16u);
  }
}

- (id)_dataSourceActual
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  return WeakRetained;
}

void __37__UITableView_setPrefetchDataSource___block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Warning", &_UITableViewCodingKey_style_Yukon_block_invoke_2___s_category)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "You are trying to set a deallocating object as prefetchDataSource. This will be a hard crash in the future. Offending object: %@ hosting object: %@", (uint8_t *)&v5, 0x16u);
  }
}

void __37__UITableView_setPrefetchDataSource___block_invoke_622(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    uint64_t v2 = [WeakRetained prefetchDataSource];
    if (!v2) {
      [v3 setPrefetchDataSource:0];
    }

    id WeakRetained = v3;
  }
}

- (id)_prefetchDataSourceActual
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_prefetchDataSource);
  return WeakRetained;
}

- (id)_prefetchDataSourceProxy
{
  if ([(_UITableViewShadowUpdatesController *)self->_shadowUpdatesController hasShadowUpdates]) {
    id WeakRetained = self->_shadowUpdatesController;
  }
  else {
    id WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained((id *)&self->_prefetchDataSource);
  }
  return WeakRetained;
}

void __27__UITableView_setDelegate___block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Warning", &_UITableViewCodingKey_style_Yukon_block_invoke_3___s_category)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "You are trying to set a deallocating object as a delegate. This will be a hard crash in the future. Offending object: %@ hostObject: %@", (uint8_t *)&v5, 0x16u);
  }
}

- (id)_delegateActual
{
  id WeakRetained = objc_loadWeakRetained(&self->super._delegate);
  return WeakRetained;
}

- (UIColor)sectionIndexColor
{
  return self->_indexColor;
}

- (UIColor)sectionIndexBackgroundColor
{
  return self->_indexBackgroundColor;
}

- (UIColor)sectionIndexTrackingBackgroundColor
{
  return self->_indexTrackingBackgroundColor;
}

- (void)setSectionIndexTrackingBackgroundColor:(UIColor *)sectionIndexTrackingBackgroundColor
{
  int v5 = sectionIndexTrackingBackgroundColor;
  if (self->_indexTrackingBackgroundColor != v5)
  {
    uint64_t v6 = v5;
    objc_storeStrong((id *)&self->_indexTrackingBackgroundColor, sectionIndexTrackingBackgroundColor);
    [(UITableViewIndex *)self->_index setIndexTrackingBackgroundColor:self->_indexTrackingBackgroundColor];
    int v5 = v6;
  }
}

- (void)setSectionFooterHeight:(CGFloat)sectionFooterHeight
{
  self->_double sectionFooterHeight = sectionFooterHeight;
  if ((*((unsigned char *)&self->_tableFlags + 14) & 7) != 0) {
    [(UITableView *)self _scheduleAdjustExtraSeparators];
  }
}

- (void)_performInternalReloadData
{
  p_uint64_t tableFlags = &self->_tableFlags;
  unint64_t v3 = *((void *)&self->_tableFlags + 3);
  *((void *)&self->_tableFlags + 3) = v3 | 0x4000000000;
  [(UITableView *)self reloadData];
  *((void *)p_tableFlags + 3) = *((void *)p_tableFlags + 3) & 0xFFFFFFBFFFFFFFFFLL | (((v3 >> 38) & 1) << 38);
}

void __37__UITableView__removeAllVisibleCells__block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v5 + 3093) & 2) != 0)
  {
    uint64_t v6 = *(void **)(v5 + 2072);
    uint64_t v7 = *(void *)(v5 + 2168) + a3;
    id v8 = a2;
    -[UITableViewRowData indexPathForRowAtGlobalRow:](v6, v7);
  }
  else
  {
    [a2 _indexPath];
  }
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) _reuseTableViewCell:a2 withIndexPath:v9 didEndDisplaying:1];
}

void __37__UITableView__removeAllVisibleCells__block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  objc_msgSend(v4, "_reuseHeaderFooterView:isHeader:forSection:", v5, 1, objc_msgSend(a2, "integerValue"));
}

void __37__UITableView__removeAllVisibleCells__block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  objc_msgSend(v4, "_reuseHeaderFooterView:isHeader:forSection:", v5, 0, objc_msgSend(a2, "integerValue"));
}

- (void)_removeAndResetAllVisibleCells
{
  [(UITableView *)self _resetSwipeActionController];
  [(UITableView *)self _removeAllVisibleCells];
}

- (void)_ensurePreReloadVisibleRowRangeIsValidWithPostReloadRowCount:(int64_t)a3
{
  NSUInteger location = self->_preReloadVisibleRowRange.location;
  NSUInteger length = self->_preReloadVisibleRowRange.length;
  if (length + location > a3)
  {
    NSUInteger length = a3 - location;
    self->_preReloadVisibleRowRange.NSUInteger length = a3 - location;
  }
  if (a3 >= 1 && !length)
  {
    self->_preReloadVisibleRowRange.NSUInteger location = a3 - 1;
    self->_preReloadVisibleRowRange.NSUInteger length = 1;
    self->_preReloadFirstCellOffset = 0.0;
  }
}

- (double)_contentOffsetYForRestoringScrollPositionOfFirstVisibleRowWithContentInsetTop:(double)a3 canGuessHeights:(BOOL)a4
{
  if (!self->_preReloadVisibleRowRange.length) {
    return -a3;
  }
  v7.origin.double x = -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, self->_preReloadVisibleRowRange.location, a4);
  return CGRectGetMinY(v7) + self->_preReloadFirstCellOffset - a3;
}

- (void)reloadSectionIndexTitles
{
  *((void *)&self->_tableFlags + 2) &= ~0x8000000uLL;
  [(UITableView *)self _updateIndex];
}

- (void)setIndexHiddenForSearch:(BOOL)a3
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)&self->_tableFlags + 2);
  if (((((v3 & 0x800000) == 0) ^ a3) & 1) == 0)
  {
    BOOL v4 = a3;
    uint64_t v6 = *((void *)&self->_tableFlags + 3);
    unint64_t v7 = v3 & 0xFFFFFFFFFE7FFFFFLL;
    uint64_t v8 = 25165824;
    if (!a3) {
      uint64_t v8 = 0;
    }
    *((void *)&self->_tableFlags + 2) = v7 | v8;
    *((void *)&self->_tableFlags + 3) = v6;
    if (self->_index)
    {
      [(UIScrollView *)self setNeedsLayout];
      double v9 = 1.0;
      if (v4) {
        double v9 = 0.0;
      }
      [(UIView *)self->_index setAlpha:v9];
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      uint64_t v10 = self->_visibleCells;
      uint64_t v11 = [(NSMutableArray *)v10 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)v18;
        do
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v18 != v13) {
              objc_enumerationMutation(v10);
            }
            BOOL v15 = *(void **)(*((void *)&v17 + 1) + 8 * i);
            if (objc_msgSend(v15, "drawingEnabled", (void)v17)) {
              [v15 setNeedsDisplay];
            }
          }
          uint64_t v12 = [(NSMutableArray *)v10 countByEnumeratingWithState:&v17 objects:v21 count:16];
        }
        while (v12);
      }

      indedouble x = self->_index;
    }
    else
    {
      indedouble x = 0;
    }
    -[UIView setUserInteractionEnabled:](index, "setUserInteractionEnabled:", !v4, (void)v17);
  }
}

- (void)setIndexHidden:(BOOL)a3 animated:(BOOL)a4
{
  uint64_t v4 = *((void *)&self->_tableFlags + 2);
  if (((((v4 & 0x800000) == 0) ^ a3) & 1) == 0)
  {
    BOOL v5 = a3;
    uint64_t v7 = *((void *)&self->_tableFlags + 3);
    uint64_t v8 = 0x800000;
    if (!a3) {
      uint64_t v8 = 0;
    }
    *((void *)&self->_tableFlags + 2) = v4 & 0xFFFFFFFFFE7FFFFFLL | v8;
    *((void *)&self->_tableFlags + 3) = v7;
    indedouble x = self->_index;
    if (index)
    {
      BOOL v10 = a4;
      [(UIView *)index setAlpha:1.0];
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = __39__UITableView_setIndexHidden_animated___block_invoke_2;
      v11[3] = &unk_1E52D9F70;
      v11[4] = self;
      +[UIView conditionallyAnimate:v10 withAnimation:&__block_literal_global_817 layout:v11 completion:0];
      indedouble x = self->_index;
    }
    -[UIView setUserInteractionEnabled:](index, "setUserInteractionEnabled:", !v5, a4);
  }
}

uint64_t __39__UITableView_setIndexHidden_animated___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[UIView animateWithDuration:4 delay:a2 options:a3 animations:0.2 completion:0.0];
}

void __39__UITableView_setIndexHidden_animated___block_invoke_2(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) _updateIndexFrame];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 2184);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        objc_msgSend(v7, "setNeedsLayout", (void)v8);
        [v7 layoutSubviews];
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

- (CGRect)_indexFrame
{
  indedouble x = self->_index;
  if (index)
  {
    [(UIView *)index frame];
  }
  else
  {
    double v3 = *MEMORY[0x1E4F1DB28];
    double v4 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
    double v5 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
    double v6 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  }
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.double x = v3;
  return result;
}

- (BOOL)isIndexHidden
{
  return *((unsigned __int8 *)&self->_tableFlags + 18) >> 7;
}

- (void)setTableHeaderViewShouldAutoHide:(BOOL)a3
{
  p_uint64_t tableFlags = &self->_tableFlags;
  uint64_t v4 = *((void *)&self->_tableFlags + 2);
  if (((((v4 & 0x10000000) == 0) ^ a3) & 1) == 0)
  {
    uint64_t v6 = *((void *)&self->_tableFlags + 3);
    if (a3)
    {
      *((void *)&self->_tableFlags + 2) = v4 & 0xFFFFFFFF7FFFFFFFLL;
      *((void *)&self->_tableFlags + 3) = v6;
      [(UITableView *)self _updatePinnedTableHeader];
      uint64_t v4 = *((void *)p_tableFlags + 2);
      uint64_t v6 = *((void *)p_tableFlags + 3);
      uint64_t v7 = 0x10000000;
      uint64_t v8 = 0x20000000;
      uint64_t v9 = 0x40000000;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    *((void *)p_tableFlags + 2) = v4 & 0xFFFFFFFF8FFFFFFFLL | v9 | v8 | v7;
    *((void *)p_tableFlags + 3) = v6;
    [(UIScrollView *)self contentOffset];
    -[UITableView setContentOffset:](self, "setContentOffset:");
  }
}

- (BOOL)tableHeaderViewShouldAutoHide
{
  return (*((unsigned __int8 *)&self->_tableFlags + 19) >> 4) & 1;
}

- (void)setOverlapsSectionHeaderViews:(BOOL)a3
{
  uint64_t v3 = 32;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFFFDFLL | v3;
  if ((*((unsigned char *)&self->_tableFlags + 14) & 7) != 0) {
    [(UITableView *)self _scheduleAdjustExtraSeparators];
  }
}

- (NSString)description
{
  p_uint64_t tableFlags = &self->_tableFlags;
  uint64_t v4 = *((void *)&self->_tableFlags + 3);
  *((void *)&self->_tableFlags + 3) = v4 | 0x4000000;
  v14.receiver = self;
  v14.super_class = (Class)UITableView;
  double v5 = [(UIScrollView *)&v14 description];
  uint64_t v6 = (void *)[v5 mutableCopy];

  objc_msgSend(v6, "deleteCharactersInRange:", objc_msgSend(v6, "length") - 1, 1);
  p_dataSource = &self->_dataSource;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  uint64_t v9 = WeakRetained;
  if ((v4 & 0x4000000) != 0)
  {
    long long v10 = (objc_class *)objc_opt_class();
    long long v11 = NSStringFromClass(v10);
    id v12 = objc_loadWeakRetained((id *)p_dataSource);
    [v6 appendFormat:@"; dataSource: <%@: %p>>", v11, v12];
  }
  else
  {
    [v6 appendFormat:@"; dataSource: %@>", WeakRetained];
  }

  *((void *)p_tableFlags + 3) = *((void *)p_tableFlags + 3) & 0xFFFFFFFFFBFFFFFFLL | v4 & 0x4000000;
  return (NSString *)v6;
}

- (NSInteger)numberOfRowsInSection:(NSInteger)section
{
  BOOL v5 = [(UITableView *)self _isUsingPresentationValues];
  return [(UITableView *)self _numberOfRowsInSection:section usingPresentationValues:v5];
}

- (CGRect)rectForSection:(NSInteger)section
{
  BOOL v5 = [(UITableView *)self _isUsingPresentationValues];
  [(UITableView *)self _rectForSection:section usingPresentationValues:v5];
  result.size.double height = v9;
  result.size.double width = v8;
  result.origin.double y = v7;
  result.origin.double x = v6;
  return result;
}

- (CGRect)_rectForSection:(int64_t)a3 usingPresentationValues:(BOOL)a4
{
  int64_t v4 = a3;
  if (!a4
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && (int64_t v4 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController sectionAfterShadowUpdates:a3], v4 == 0x7FFFFFFFFFFFFFFFLL))
  {
    double v7 = *MEMORY[0x1E4F1DB28];
    double v8 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
    double v9 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
    double v10 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  }
  else
  {
    [(UITableView *)self _ensureRowDataIsLoaded];
    double v7 = -[UITableViewRowData rectForSection:]((uint64_t)self->_rowData, v4);
  }
  result.size.double height = v10;
  result.size.double width = v9;
  result.origin.double y = v8;
  result.origin.double x = v7;
  return result;
}

- (CGRect)rectForHeaderInSection:(NSInteger)section
{
  BOOL v5 = [(UITableView *)self _isUsingPresentationValues];
  [(UITableView *)self _rectForHeaderInSection:section usingPresentationValues:v5];
  result.size.double height = v9;
  result.size.double width = v8;
  result.origin.double y = v7;
  result.origin.double x = v6;
  return result;
}

- (CGRect)_floatingRectForHeaderInSection:(int64_t)a3 heightCanBeGuessed:(BOOL)a4
{
  [(UIView *)self bounds];
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  [(UITableView *)self _contentInset];
  rowData = self->_rowData;
  double v20 = -[UITableViewRowData floatingRectForHeaderInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)rowData, a3, a4, 0, v8 + v16, v10 + v15, v12 - (v16 + v18), v14 - (v15 + v17));
  result.size.double height = v23;
  result.size.double width = v22;
  result.origin.double y = v21;
  result.origin.double x = v20;
  return result;
}

- (CGRect)rectForFooterInSection:(NSInteger)section
{
  BOOL v5 = [(UITableView *)self _isUsingPresentationValues];
  [(UITableView *)self _rectForFooterInSection:section usingPresentationValues:v5];
  result.size.double height = v9;
  result.size.double width = v8;
  result.origin.double y = v7;
  result.origin.double x = v6;
  return result;
}

- (CGRect)_floatingRectForFooterInSection:(int64_t)a3 heightCanBeGuessed:(BOOL)a4
{
  [(UIView *)self bounds];
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  [(UITableView *)self _contentInset];
  rowData = self->_rowData;
  double v20 = -[UITableViewRowData floatingRectForFooterInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)rowData, a3, a4, 0, v8 + v16, v10 + v15, v12 - (v16 + v18), v14 - (v15 + v17));
  result.size.double height = v23;
  result.size.double width = v22;
  result.origin.double y = v21;
  result.origin.double x = v20;
  return result;
}

- (CGRect)rectForRowAtIndexPath:(NSIndexPath *)indexPath
{
  int64_t v4 = indexPath;
  [(UITableView *)self _rectForRowAtIndexPath:v4 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;

  double v13 = v6;
  double v14 = v8;
  double v15 = v10;
  double v16 = v12;
  result.size.double height = v16;
  result.size.double width = v15;
  result.origin.double y = v14;
  result.origin.double x = v13;
  return result;
}

- (CGRect)_rectForRowAtIndexPath:(id)a3 usingPresentationValues:(BOOL)a4
{
  id v6 = a3;
  if (a4
    || (shadowUpdatesController = self->_shadowUpdatesController) == 0
    || ([(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathAfterShadowUpdates:v6], uint64_t v8 = objc_claimAutoreleasedReturnValue(), v6, (v6 = (id)v8) != 0))
  {
    [(UITableView *)self _tableViewRectForRowAtIndexPath:v6 canGuess:0];
    double v10 = v9;
    double v12 = v11;
    double v14 = v13;
    double v16 = v15;
  }
  else
  {
    double v10 = *MEMORY[0x1E4F1DB28];
    double v12 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
    double v14 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
    double v16 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  }
  double v17 = v10;
  double v18 = v12;
  double v19 = v14;
  double v20 = v16;
  result.size.double height = v20;
  result.size.double width = v19;
  result.origin.double y = v18;
  result.origin.double x = v17;
  return result;
}

- (CGRect)_tableViewRectForRowAtIndexPath:(id)a3 canGuess:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  uint64_t v7 = [v6 section];
  uint64_t v8 = v7;
  rowData = self->_rowData;
  if (rowData) {
    rowData = (UITableViewRowData *)rowData->_numSections;
  }
  if (v7 >= (uint64_t)rowData
    || (uint64_t v10 = [v6 row], v10 >= -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, v8)))
  {
    double v12 = *MEMORY[0x1E4F1DB28];
    double v14 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
    double v16 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
    double v18 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  }
  else
  {
    [(UITableView *)self _rectForRowAtIndexPath:v6 canGuess:v4];
    double v12 = v11;
    double v14 = v13;
    double v16 = v15;
    double v18 = v17;
    if ((*((unsigned char *)&self->_tableFlags + 22) & 0x40) != 0
      && self->_wrapperView
      && dyld_program_sdk_at_least())
    {
      -[UIView convertRect:toView:](self->_wrapperView, "convertRect:toView:", self, v12, v14, v16, v18);
      double v12 = v19;
      double v14 = v20;
      double v16 = v21;
      double v18 = v22;
    }
  }

  double v23 = v12;
  double v24 = v14;
  double v25 = v16;
  double v26 = v18;
  result.size.double height = v26;
  result.size.double width = v25;
  result.origin.double y = v24;
  result.origin.double x = v23;
  return result;
}

- (CGRect)_rectForTableHeaderView
{
  double v2 = -[UITableViewRowData rectForTableHeaderView]((uint64_t)self->_rowData);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

- (CGRect)_rectForTableFooterView
{
  double v2 = -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.double x = v2;
  return result;
}

- (NSIndexPath)indexPathForRowAtPoint:(CGPoint)point
{
  double y = point.y;
  double x = point.x;
  BOOL v6 = [(UITableView *)self _isUsingPresentationValues];
  return (NSIndexPath *)-[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", v6, x, y);
}

- (id)_indexPathForRowAtPoint:(CGPoint)a3 usingPresentationValues:(BOOL)a4
{
  CGFloat y = a3.y;
  CGFloat x = a3.x;
  rowData = self->_rowData;
  if (rowData && (double v9 = rowData->_draggedIndexPath) != 0)
  {
  }
  else
  {
    uint64_t v10 = self->_rowData;
    if (v10) {
      uint64_t v10 = (UITableViewRowData *)v10->_gapIndexPath;
    }
    double v11 = v10;

    if (!v11)
    {
      double v12 = -[UITableViewRowData indexPathsForRowsInRect:extraHitSpaceBetweenRows:]((uint64_t)self->_rowData, x, y, 0.0, 0.0, 0.0);
      uint64_t v15 = [v12 firstObject];
      goto LABEL_14;
    }
  }
  double v12 = [(UITableViewRowData *)(uint64_t)self->_rowData targetIndexPathForPoint:x adjustedForGap:y];
  if (v12)
  {
    double v13 = self->_rowData;
    if (v13) {
      double v13 = (UITableViewRowData *)v13->_gapIndexPath;
    }
    double v14 = v13;

    if (v14)
    {
      if (-[UITableViewRowData dropLocationForPoint:atIndexPath:withInsets:]((uint64_t)self->_rowData, v12, x, y, 0.0, 0.0, 0.0, 0.0))
      {
        uint64_t v15 = 0;
LABEL_14:

        double v12 = (void *)v15;
      }
    }
  }
  if (!a4)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v17 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathBeforeShadowUpdates:v12];

      double v12 = (void *)v17;
    }
  }
  return v12;
}

- (NSIndexPath)indexPathForCell:(UITableViewCell *)cell
{
  double v4 = cell;
  double v5 = [(UITableView *)self _indexPathForCell:v4 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];

  return (NSIndexPath *)v5;
}

- (id)_indexPathForTentativeCell:(id)a3
{
  id v4 = a3;
  tentativeCells = self->_tentativeCells;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __42__UITableView__indexPathForTentativeCell___block_invoke;
  v10[3] = &unk_1E5308E78;
  id v11 = v4;
  id v6 = v4;
  uint64_t v7 = [(NSMutableDictionary *)tentativeCells keysOfEntriesPassingTest:v10];
  uint64_t v8 = [v7 anyObject];

  return v8;
}

BOOL __42__UITableView__indexPathForTentativeCell___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 == a3) {
    *a4 = 1;
  }
  return v4 == a3;
}

- (NSArray)indexPathsForRowsInRect:(CGRect)rect
{
  double height = rect.size.height;
  double width = rect.size.width;
  double y = rect.origin.y;
  double x = rect.origin.x;
  BOOL v8 = [(UITableView *)self _isUsingPresentationValues];
  return (NSArray *)-[UITableView _indexPathsForRowsInRect:usingPresentationValues:](self, "_indexPathsForRowsInRect:usingPresentationValues:", v8, x, y, width, height);
}

- (UITableViewHeaderFooterView)headerViewForSection:(NSInteger)section
{
  BOOL v5 = [(UITableView *)self _isUsingPresentationValues];
  return (UITableViewHeaderFooterView *)[(UITableView *)self _headerViewForSection:section usingPresentationValues:v5];
}

- (id)_headerViewForSection:(int64_t)a3 usingPresentationValues:(BOOL)a4
{
  if (!a4
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && (a3 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController sectionAfterShadowUpdates:a3], a3 == 0x7FFFFFFFFFFFFFFFLL))
  {
    id v6 = 0;
  }
  else
  {
    uint64_t v7 = [(UITableView *)self _visibleHeaderViewForSection:a3];
    if (_IsKindOfUITableViewHeaderFooterView(v7)) {
      id v6 = v7;
    }
    else {
      id v6 = 0;
    }
  }
  return v6;
}

- (UITableViewHeaderFooterView)footerViewForSection:(NSInteger)section
{
  BOOL v5 = [(UITableView *)self _isUsingPresentationValues];
  return (UITableViewHeaderFooterView *)[(UITableView *)self _footerViewForSection:section usingPresentationValues:v5];
}

- (id)_footerViewForSection:(int64_t)a3 usingPresentationValues:(BOOL)a4
{
  if (!a4
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && (a3 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController sectionAfterShadowUpdates:a3], a3 == 0x7FFFFFFFFFFFFFFFLL))
  {
    id v6 = 0;
  }
  else
  {
    uint64_t v7 = [(UITableView *)self _visibleFooterViewForSection:a3];
    if (_IsKindOfUITableViewHeaderFooterView(v7)) {
      id v6 = v7;
    }
    else {
      id v6 = 0;
    }
  }
  return v6;
}

- (NSArray)visibleCells
{
  BOOL v3 = [(UITableView *)self _isUsingPresentationValues];
  return (NSArray *)[(UITableView *)self _visibleCellsUsingPresentationValues:v3];
}

- (id)_visibleCellsUsingPresentationValues:(BOOL)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a3
    && (shadowUpdatesController = self->_shadowUpdatesController) != 0
    && [(_UITableViewShadowUpdatesController *)shadowUpdatesController hasShadowUpdates])
  {
    BOOL v5 = [(UITableView *)self _indexPathsForVisibleRowsUsingPresentationValues:0];
    id v6 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v5, "count"));
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v7 = v5;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v7);
          }
          double v12 = -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:", *(void *)(*((void *)&v14 + 1) + 8 * i), 0, (void)v14);
          if (v12) {
            [v6 addObject:v12];
          }
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v9);
    }
  }
  else
  {
    if (*((unsigned char *)&self->_tableFlags + 28))
    {
      UITableViewAlertForVisibleCellsAccessDuringUpdate(self);
      if (dyld_program_sdk_at_least())
      {
        id v6 = (void *)MEMORY[0x1E4F1CBF0];
        goto LABEL_19;
      }
    }
    else
    {
      [(UITableView *)self _updateVisibleCellsImmediatelyIfNecessary];
    }
    id v6 = (void *)[(NSMutableArray *)self->_visibleCells copy];
  }
LABEL_19:
  return v6;
}

- (CGPoint)_contentOffsetForScrollingToRowAtIndexPath:(id)a3 atScrollPosition:(int64_t)a4
{
  id v6 = a3;
  [(UITableView *)self _contentOffsetForScrollingToRowAtIndexPath:v6 atScrollPosition:a4 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
  double v8 = v7;
  double v10 = v9;

  double v11 = v8;
  double v12 = v10;
  result.double y = v12;
  result.double x = v11;
  return result;
}

- (CGPoint)_contentOffsetForScrollingToRowAtIndexPath:(id)a3 atScrollPosition:(int64_t)a4 usingPresentationValues:(BOOL)a5
{
  id v8 = a3;
  if (!a5)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v10 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathAfterShadowUpdates:v8];

      id v8 = (id)v10;
    }
  }
  [(UITableView *)self _ensureRowDataIsLoaded];
  if (!v8) {
    goto LABEL_15;
  }
  uint64_t v11 = [v8 section];
  rowData = self->_rowData;
  if (rowData) {
    rowData = (UITableViewRowData *)rowData->_numSections;
  }
  if (v11 >= (uint64_t)rowData)
  {
    double v20 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v21 = *MEMORY[0x1E4F1C4A8];
    uint64_t v22 = [v8 section];
    double v23 = self->_rowData;
    if (v23) {
      double v23 = (UITableViewRowData *)v23->_numSections;
    }
    [v20 raise:v21, @"Attempted to scroll the table view to an out-of-bounds section (%ld) when there are only %ld sections. Table view: %@", v22, v23, self, v135 format];
    goto LABEL_15;
  }
  if ([v8 row] != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v13 = [v8 row];
    if (v13 >= -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, [v8 section]))
    {
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C4A8], @"Attempted to scroll the table view to an out-of-bounds row (%ld) when there are only %ld rows in section %ld. Table view: %@", objc_msgSend(v8, "row"), -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, objc_msgSend(v8, "section")), objc_msgSend(v8, "section"), self format];
      goto LABEL_15;
    }
  }
  double v14 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
  uint64_t v15 = [v8 row];
  double v149 = v14;
  if (v15 == 0x7FFFFFFFFFFFFFFFLL) {
    double v16 = -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, [v8 section], 0);
  }
  else {
    [(UITableView *)self _rectForRowAtIndexPath:v8 usingPresentationValues:1];
  }
  CGFloat v151 = v16;
  CGFloat v152 = v18;
  double v30 = v17;
  CGFloat v153 = v19;
  [(UIView *)self bounds];
  double v32 = v31;
  double v34 = v33;
  double v36 = v35;
  double v38 = v37;
  [(UITableView *)self _contentInset];
  double v40 = v39;
  double v42 = v39 + v41;
  double v148 = v43;
  double v154 = v44;
  double v45 = v44 + v43;
  uint64_t v46 = [v8 row];
  uint64_t v47 = [v8 section];
  [(UIView *)self bounds];
  double Height = CGRectGetHeight(v163);
  if (-[UITableViewRowData ensureHeightsFaultedInForScrollToIndexPath:boundsHeight:]((uint64_t)self->_rowData, v8, Height))
  {
    double v149 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
    if (v15 == 0x7FFFFFFFFFFFFFFFLL) {
      double v49 = -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)self->_rowData, [v8 section], 0);
    }
    else {
      [(UITableView *)self _rectForRowAtIndexPath:v8 usingPresentationValues:1];
    }
    CGFloat v151 = v49;
    CGFloat v152 = v51;
    double v30 = v50;
    CGFloat v153 = v52;
  }
  double v53 = v32 + v40;
  double rect = v34 + v154;
  double v54 = v36 - v42;
  double v55 = v38 - v45;
  if (a4)
  {
    int v56 = 1;
    CGFloat v57 = v53;
    CGFloat v58 = v153;
  }
  else
  {
    CGFloat v58 = v153;
    if ([(UITableView *)self allowsHeaderViewsToFloat]
      || (double v59 = 0.0, ![v8 row]))
    {
      double v59 = -[UITableViewRowData heightForHeaderInSection:canGuess:]((uint64_t)self->_rowData, [v8 section], 0);
    }
    CGFloat v57 = v53;
    if ([(UITableView *)self allowsFooterViewsToFloat]
      || (uint64_t v60 = -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, v47) - 1, v61 = 0.0, v46 == v60))
    {
      double v61 = -[UITableViewRowData heightForFooterInSection:canGuess:]((uint64_t)self->_rowData, [v8 section], 0);
    }
    *(void *)&v155.origin.double x = MEMORY[0x1E4F143A8];
    *(void *)&v155.origin.double y = 3221225472;
    *(void *)&v155.size.double width = __99__UITableView__contentOffsetForScrollingToRowAtIndexPath_atScrollPosition_usingPresentationValues___block_invoke;
    *(void *)&v155.size.double height = &__block_descriptor_80_e39_q40__0_CGRect__CGPoint_dd__CGSize_dd__8l;
    double v156 = v53;
    double v157 = rect;
    double v158 = v54;
    double v159 = v55;
    double v160 = v59;
    double v161 = v61;
    int64_t v62 = __99__UITableView__contentOffsetForScrollingToRowAtIndexPath_atScrollPosition_usingPresentationValues___block_invoke(&v155, v151, v30, v152, v153);
    if (!v62) {
      goto LABEL_15;
    }
    a4 = v62;
    if (v153 > v55 && dyld_program_sdk_at_least())
    {
      long long v63 = [(UIView *)self window];
      uint64_t v64 = [v63 _firstResponder];
      long long v65 = (void *)v64;
      if (v64)
      {
        char v146 = (void *)v64;
        uint64_t v147 = v63;
        uint64_t v66 = [(UITableView *)self _existingCellForRowAtIndexPath:v8];
        int v67 = [v66 _isAncestorOfFirstResponder];

        if (v67)
        {
          long long v65 = v146;
          long long v63 = v147;
          [v146 _rectToScrollToVisibleInCellInWindow:v147];
          double x = v164.origin.x;
          double y = v164.origin.y;
          double width = v164.size.width;
          double v71 = v164.size.height;
          if (CGRectIsNull(v164))
          {
            int v56 = 1;
            CGFloat v57 = v53;
            CGFloat v58 = v153;
          }
          else
          {
            objc_msgSend(v147, "convertRect:toView:", self, x, y, width, v71);
            v183.origin.double x = v113;
            v183.origin.double y = v114;
            v183.size.double width = v115;
            v183.size.double height = v116;
            v173.origin.double x = v151;
            v173.size.double width = v152;
            v173.origin.double y = v30;
            CGFloat v58 = v153;
            v173.size.double height = v153;
            CGRect v174 = CGRectIntersection(v173, v183);
            double v117 = v174.origin.x;
            double v118 = v174.size.height;
            CGFloat v144 = v174.size.width;
            CGFloat v145 = v174.origin.y;
            if (CGRectIsNull(v174))
            {
              int v56 = 1;
              CGFloat v57 = v53;
            }
            else
            {
              double v121 = v55 - v118;
              CGFloat v57 = v53;
              if (v55 - v118 <= 0.0)
              {
                CGFloat v58 = v118;
                v120.n128_f64[0] = v144;
                v119.n128_f64[0] = v145;
                CGFloat v151 = v117;
                CGFloat v152 = v144;
                double v30 = v145;
              }
              else
              {
                v175.origin.double x = v117;
                v175.size.double width = v144;
                v175.origin.double y = v145;
                v175.size.double height = v118;
                double MinY = CGRectGetMinY(v175);
                CGFloat v143 = v118;
                v176.origin.double x = v151;
                v176.origin.double y = v30;
                CGFloat v122 = v117;
                CGFloat v139 = v117;
                v176.size.double height = v153;
                v176.size.double width = v152;
                CGFloat v123 = CGRectGetMinY(v176);
                v177.origin.double y = v30;
                CGFloat v138 = v30;
                double v124 = MinY - v123;
                v177.origin.double x = v151;
                v177.size.double width = v152;
                v177.size.double height = v153;
                double MaxY = CGRectGetMaxY(v177);
                v178.origin.double x = v122;
                v178.origin.double y = v145;
                v178.size.double width = v144;
                v178.size.double height = v143;
                double v126 = MaxY - CGRectGetMaxY(v178);
                if (v121 >= v126) {
                  double v127 = v126;
                }
                else {
                  double v127 = v121;
                }
                double v128 = fmax(v121 - v127, 0.0);
                if (v121 >= v124) {
                  double v129 = v124;
                }
                else {
                  double v129 = v121;
                }
                double v130 = fmax(v121 - v129, 0.0);
                BOOL v131 = v124 <= v126;
                if (v124 > v126) {
                  double v132 = v129;
                }
                else {
                  double v132 = v128;
                }
                double v136 = v132;
                if (v131) {
                  double v133 = v127;
                }
                else {
                  double v133 = v130;
                }
                double v142 = v133;
                v179.size.double width = v152;
                v179.origin.double x = v151;
                v179.origin.double y = v138;
                v179.size.double height = v153;
                CGFloat MinX = CGRectGetMinX(v179);
                v180.origin.double x = v139;
                v180.origin.double y = v145;
                v180.size.double width = v144;
                v180.size.double height = v143;
                CGFloat v137 = CGRectGetMinY(v180) - v136;
                v181.origin.double x = v151;
                v181.origin.double y = v138;
                v181.size.double width = v152;
                v181.size.double height = v153;
                CGFloat v134 = CGRectGetWidth(v181);
                v182.origin.double x = v139;
                v182.origin.double y = v145;
                v182.size.double width = v144;
                v182.size.double height = v143;
                double v118 = v142 + CGRectGetHeight(v182);
                double v30 = v137;
                v119.n128_f64[0] = v137;
                CGFloat v151 = MinX;
                CGFloat v152 = v134;
                v120.n128_f64[0] = v134;
                double v117 = MinX;
                CGFloat v58 = v118;
              }
              a4 = (*(uint64_t (**)(CGRect *, double, __n128, __n128, double))&v155.size.width)(&v155, v117, v119, v120, v118);
              int v56 = 0;
            }
          }
        }
        else
        {
          int v56 = 1;
          long long v65 = v146;
          long long v63 = v147;
        }
      }
      else
      {
        int v56 = 1;
      }
    }
    else
    {
      int v56 = 1;
    }
  }
  if (a4 == 3)
  {
    [(UIView *)self bounds];
    double v83 = CGRectGetHeight(v165);
    v166.origin.double x = v151;
    v166.origin.double y = v30;
    v166.size.double width = v152;
    v166.size.double height = v58;
    CGFloat v84 = CGRectGetMinY(v166) - v83;
    v167.origin.double x = v151;
    v167.origin.double y = v30;
    v167.size.double width = v152;
    v167.size.double height = v58;
    double v85 = v84 + CGRectGetHeight(v167);
    if (v56)
    {
      if ([(UITableView *)self allowsHeaderViewsToFloat])
      {
        [(UITableView *)self _visibleBounds];
        double v87 = v86;
        double v89 = v88;
        double v91 = v90;
        [(UITableView *)self _contentInset];
        -[UITableViewRowData floatingRectForFooterInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)self->_rowData, [v8 section], 0, 0, v87 + v92, v85, v89 - (v92 + v93), v91 - (v94 + v95));
        double v97 = v96;
        double v99 = v98;
        v168.origin.double x = v57;
        v168.origin.double y = rect;
        v168.size.double width = v54;
        v168.size.double height = v55;
        if (v85 + CGRectGetHeight(v168) > v97) {
          double v85 = v85 + v99;
        }
      }
      else if (v46 == -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, v47) - 1)
      {
        double v85 = v85 + -[UITableViewRowData heightForFooterInSection:canGuess:]((uint64_t)self->_rowData, v47, 0);
      }
    }
    double v103 = v148 + v85;
    goto LABEL_64;
  }
  if (a4 != 2)
  {
    if (a4 == 1)
    {
      if (v56)
      {
        if ([(UITableView *)self allowsHeaderViewsToFloat])
        {
          double v72 = v30;
          [(UITableView *)self _visibleBounds];
          double v74 = v73;
          double v76 = v75;
          double v78 = v77;
          [(UITableView *)self _contentInset];
          if (v15 == 0x7FFFFFFFFFFFFFFFLL)
          {
            double v30 = v72;
          }
          else
          {
            CGFloat v104 = v74 + v80;
            CGFloat v105 = v76 - (v80 + v82);
            double v106 = v78 - (v79 + v81);
            char v107 = self->_rowData;
            uint64_t v108 = [v8 section];
            CGFloat v109 = v104;
            double v30 = v72;
            -[UITableViewRowData floatingRectForHeaderInSection:visibleRect:heightCanBeGuessed:outIsFloating:]((uint64_t)v107, v108, 0, 0, v109, v72, v105, v106);
            if (v72 < v111 + v110) {
              double v30 = v72 - v110;
            }
          }
        }
        else if (!v46)
        {
          double v30 = v30
              - -[UITableViewRowData heightForHeaderInSection:canGuess:]((uint64_t)self->_rowData, [v8 section], 0);
        }
      }
      double v103 = v30 - v154;
      if ((*((unsigned char *)&self->_tableFlags + 19) & 0x80) != 0) {
        double v103 = v103 - -[UITableViewRowData heightForTableHeaderView]((uint64_t)self->_rowData);
      }
      goto LABEL_64;
    }
LABEL_15:
    [(UIScrollView *)self contentOffset];
    double v25 = v24;
    double v27 = v26;
    goto LABEL_16;
  }
  v169.origin.double x = v151;
  v169.origin.double y = v30;
  v169.size.double width = v152;
  v169.size.double height = v58;
  double v100 = CGRectGetMinY(v169);
  v170.origin.double x = v57;
  v170.origin.double y = rect;
  v170.size.double width = v54;
  v170.size.double height = v55;
  CGFloat v101 = CGRectGetHeight(v170);
  v171.size.double height = v58;
  double v102 = v100 - v101 * 0.5;
  v171.origin.double x = v151;
  v171.origin.double y = v30;
  v171.size.double width = v152;
  double v103 = v102 + CGRectGetHeight(v171) * 0.5 - v154;
LABEL_64:
  v172.origin.double x = v57;
  v172.origin.double y = rect;
  v172.size.double width = v54;
  v172.size.double height = v55;
  if (v154 + v103 + CGRectGetHeight(v172) <= v149) {
    double v112 = v103;
  }
  else {
    double v112 = v149 - (v154 + v55);
  }
  if (v112 >= -v154) {
    double v27 = v112;
  }
  else {
    double v27 = -v154;
  }
  double v25 = 0.0;
LABEL_16:

  double v28 = v25;
  double v29 = v27;
  result.double y = v29;
  result.double x = v28;
  return result;
}

uint64_t __99__UITableView__contentOffsetForScrollingToRowAtIndexPath_atScrollPosition_usingPresentationValues___block_invoke(CGRect *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGFloat v10 = CGRectGetMinY(a1[1]) + a1[2].origin.x;
  v14.origin.double x = a2;
  v14.origin.double y = a3;
  v14.size.double width = a4;
  v14.size.double height = a5;
  BOOL v11 = v10 > CGRectGetMinY(v14);
  CGFloat v12 = CGRectGetMaxY(a1[1]) - a1[2].origin.y;
  v15.origin.double x = a2;
  v15.origin.double y = a3;
  v15.size.double width = a4;
  v15.size.double height = a5;
  if (v12 >= CGRectGetMaxY(v15)) {
    return v11;
  }
  else {
    return 3;
  }
}

- (void)scrollToRowAtIndexPath:(NSIndexPath *)indexPath atScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated
{
  BOOL v5 = animated;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v8 = indexPath;
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", scrollToRowAtIndexPath_atScrollPosition_animated____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    CGFloat v10 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      BOOL v11 = v10;
      *(_DWORD *)uint64_t v13 = 138413314;
      *(void *)&v13[4] = objc_opt_class();
      *(_WORD *)&v13[12] = 2048;
      *(void *)&v13[14] = self;
      *(_WORD *)&v13[22] = 2112;
      CGRect v14 = v8;
      *(_WORD *)CGRect v15 = 2048;
      *(void *)&v15[2] = scrollPosition;
      *(_WORD *)&v15[10] = 2048;
      *(void *)&v15[12] = v5;
      id v12 = *(id *)&v13[4];
      _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> scrollToRowAtIndexPath:%@ atScrollPosition:%ld animated:%ld", v13, 0x34u);
    }
  }
  [(UITableView *)self _scrollToRowAtIndexPath:v8 atScrollPosition:scrollPosition animated:v5 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
}

- (void)_scrollToRowAtIndexPath:(id)a3 atScrollPosition:(int64_t)a4 animated:(BOOL)a5 usingPresentationValues:(BOOL)a6
{
  BOOL v7 = a5;
  id v10 = a3;
  if (!a6)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      id v29 = v10;
      uint64_t v12 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathAfterShadowUpdates:v10];

      id v10 = (id)v12;
      if (!v12) {
        return;
      }
    }
  }
  id v30 = v10;
  [(UITableView *)self _contentOffsetForScrollingToRowAtIndexPath:v10 atScrollPosition:a4 usingPresentationValues:1];
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = *MEMORY[0x1E4F1DAD8];
  double v17 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  if ([(UITableView *)self _estimatesHeights])
  {
    if (!v7)
    {
      double v23 = 0;
      int v27 = 1;
      goto LABEL_12;
    }
    [(UIView *)self bounds];
    uint64_t v21 = -[UITableViewRowData indexPathsForRowsInRect:]((double *)self->_rowData, v14, v16, v19, v20);
    uint64_t v22 = [v21 firstObject];
    double v23 = v22;
    if (v22)
    {
      -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:]((uint64_t)self->_rowData, [(NSIndexPath *)v22 row], [(NSIndexPath *)v22 section], 0);
      double v25 = v24;
      double v26 = v23;
      double v17 = v16 - v25;
      CGFloat v18 = 0.0;
    }
  }
  else
  {
    double v23 = 0;
  }
  int v27 = 0;
LABEL_12:
  -[UIScrollView setContentOffset:animated:](self, "setContentOffset:animated:", v7, v14, v16);
  targetIndexPathForScrolling = self->_targetIndexPathForScrolling;
  self->_targetIndexPathForScrolling = v23;

  self->_targetOffsetToIndexPathForScrolling.double x = v18;
  self->_targetOffsetToIndexPathForScrolling.double y = v17;
  if (v27) {
    *((void *)&self->_tableFlags + 3) &= ~4uLL;
  }
}

- (void)scrollToNearestSelectedRowAtScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated
{
  BOOL v4 = animated;
  id v7 = [(UITableView *)self _indexPathForSelectedRowUsingPresentationValues:1];
  [(UITableView *)self _scrollToRowAtIndexPath:v7 atScrollPosition:scrollPosition animated:v4 usingPresentationValues:1];
}

- (void)_performBatchUpdates:(id)a3 completion:(id)a4
{
}

uint64_t __45__UITableView__sortedDeduplicatedReloadItems__block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compareIndexPaths:");
}

- (id)_updateSections:(id)a3 withUpdateAction:(int)a4 rowAnimation:(int64_t)a5 headerFooterOnly:(BOOL)a6 usingPresentationValues:(BOOL)a7
{
  uint64_t v10 = *(void *)&a4;
  id v13 = a3;
  if (!a7)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v15 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController sectionsAfterShadowUpdates:v13 allowAppendingInsert:v10 == 0];

      id v13 = (id)v15;
    }
  }
  if ((*((unsigned char *)&self->_tableFlags + 21) & 0x80) != 0)
  {
    swipedIndexPath = self->_swipedIndexPath;
    if (!swipedIndexPath)
    {
      double v26 = [MEMORY[0x1E4F28B00] currentHandler];
      int v27 = NSStringFromSelector(a2);
      [v26 handleFailureInMethod:a2, self, @"UITableView.m", 8540, @"UITableView internal inconsistency: the _swipedIndexPath cannot be nil if the swipe to delete row is being deleted in %@", v27 object file lineNumber description];

      swipedIndexPath = self->_swipedIndexPath;
    }
    int v17 = objc_msgSend(v13, "containsIndex:", -[NSIndexPath section](swipedIndexPath, "section"));
    if (v10 == 2 && v17) {
      [(UISwipeActionController *)self->_swipeActionController resetSwipedItemAnimated:0 completion:0];
    }
  }
  if ([(UITableView *)self _isPerformingShadowUpdates])
  {
    CGFloat v18 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v13, "count"));
  }
  else
  {
    CGFloat v18 = 0;
  }
  BOOL v19 = [(UITableView *)self _isUpdating];
  if (!v19) {
    [(UITableView *)self _setupCellAnimations];
  }
  CGFloat v20 = [(UITableView *)self _arrayForUpdateAction:v10];
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = __102__UITableView__updateSections_withUpdateAction_rowAnimation_headerFooterOnly_usingPresentationValues___block_invoke;
  v28[3] = &unk_1E5308EE0;
  int v32 = v10;
  BOOL v33 = a6;
  int64_t v31 = a5;
  v28[4] = self;
  id v21 = v18;
  id v29 = v21;
  id v30 = v20;
  id v22 = v20;
  [v13 enumerateIndexesUsingBlock:v28];
  if (!v19) {
    [(UITableView *)self _endCellAnimationsWithContext:0];
  }
  double v23 = v30;
  id v24 = v21;

  return v24;
}

void __102__UITableView__updateSections_withUpdateAction_rowAnimation_headerFooterOnly_usingPresentationValues___block_invoke(uint64_t a1, uint64_t a2)
{
  BOOL v4 = [UIUpdateItem alloc];
  int v5 = *(_DWORD *)(a1 + 64);
  id v6 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:a2];
  id v8 = -[UIUpdateItem initWithAction:forIndexPath:animation:]((id *)&v4->super.isa, v5, v6, *(void **)(a1 + 56));

  if (v8) {
    *((unsigned char *)v8 + 16) = (_BYTE)v8[2] & 0xFD | (2 * *(unsigned char *)(a1 + 68));
  }
  id v7 = objc_msgSend(*(id *)(a1 + 32), "_addToShadowUpdatesControllerIfNeeded:");
  if (v7) {
    [*(id *)(a1 + 40) addObject:v7];
  }
  [*(id *)(a1 + 48) addObject:v8];
  *(void *)(*(void *)(a1 + 32) + 3088) &= ~0x8000000uLL;
}

- (void)insertSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = sections;
  if ((*((void *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    id v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"UITableView.m", 8575, @"UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@", self object file lineNumber description];
  }
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &insertSections_withRowAnimation____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    uint64_t v10 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      BOOL v11 = v10;
      *(_DWORD *)long long buf = 138413058;
      id v15 = (id)objc_opt_class();
      __int16 v16 = 2048;
      int v17 = self;
      __int16 v18 = 2112;
      BOOL v19 = v7;
      __int16 v20 = 2048;
      UITableViewRowAnimation v21 = animation;
      id v12 = v15;
      _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> insertSections:%@ withRowAnimation:%ld", buf, 0x2Au);
    }
  }
  id v9 = [(UITableView *)self _updateSections:v7 withUpdateAction:0 rowAnimation:animation headerFooterOnly:0 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
}

- (void)deleteSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = sections;
  if ((*((void *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    id v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"UITableView.m", 8582, @"UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@", self object file lineNumber description];
  }
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &deleteSections_withRowAnimation____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    uint64_t v10 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      BOOL v11 = v10;
      *(_DWORD *)long long buf = 138413058;
      id v15 = (id)objc_opt_class();
      __int16 v16 = 2048;
      int v17 = self;
      __int16 v18 = 2112;
      BOOL v19 = v7;
      __int16 v20 = 2048;
      UITableViewRowAnimation v21 = animation;
      id v12 = v15;
      _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> deleteSections:%@ withRowAnimation:%ld", buf, 0x2Au);
    }
  }
  id v9 = [(UITableView *)self _updateSections:v7 withUpdateAction:1 rowAnimation:animation headerFooterOnly:0 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
}

- (void)reloadSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = sections;
  if ((*((void *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    id v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"UITableView.m", 8589, @"UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@", self object file lineNumber description];
  }
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &reloadSections_withRowAnimation____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    uint64_t v10 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      BOOL v11 = v10;
      *(_DWORD *)long long buf = 138413058;
      id v15 = (id)objc_opt_class();
      __int16 v16 = 2048;
      int v17 = self;
      __int16 v18 = 2112;
      BOOL v19 = v7;
      __int16 v20 = 2048;
      UITableViewRowAnimation v21 = animation;
      id v12 = v15;
      _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> reloadSections:%@ withRowAnimation:%ld", buf, 0x2Au);
    }
  }
  if (animation == UITableViewRowAnimationAutomatic) {
    animatiouint64_t n = UITableViewRowAnimationFade;
  }
  id v9 = [(UITableView *)self _updateSections:v7 withUpdateAction:2 rowAnimation:animation headerFooterOnly:0 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
}

- (void)_reloadSectionHeaderFooters:(id)a3 withRowAnimation:(int64_t)a4
{
  id v7 = a3;
  if (a4 == 100) {
    a4 = 0;
  }
  id v6 = [(UITableView *)self _updateSections:v7 withUpdateAction:2 rowAnimation:a4 headerFooterOnly:1 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
}

- (id)_moveSection:(int64_t)a3 toSection:(int64_t)a4 usingPresentationValues:(BOOL)a5
{
  int64_t v6 = a3;
  if (!a5)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      int64_t v6 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController sectionAfterShadowUpdates:a3];
      a4 = [(_UITableViewShadowUpdatesController *)self->_shadowUpdatesController sectionAfterShadowUpdates:a4];
    }
  }
  id v9 = [(UITableView *)self _arrayForUpdateAction:3];
  uint64_t v10 = [UIRowMoveUpdateItem alloc];
  BOOL v11 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:v6];
  id v12 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:a4];
  id v13 = -[UIRowMoveUpdateItem initWithOldIndexPath:newIndexPath:]((id *)&v10->super.super.isa, v11, v12);

  CGFloat v14 = [(UITableView *)self _addToShadowUpdatesControllerIfNeeded:v13];
  [v9 addObject:v13];
  if (![(UITableView *)self _isUpdating])
  {
    [(UITableView *)self _setupCellAnimations];
    [(UITableView *)self _endCellAnimationsWithContext:0];
  }

  return v14;
}

- (void)moveSection:(NSInteger)section toSection:(NSInteger)newSection
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (dyld_program_sdk_at_least() && (*((void *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    id v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"UITableView.m", 8622, @"UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@", self object file lineNumber description];
  }
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &moveSection_toSection____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    uint64_t v10 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      BOOL v11 = v10;
      *(_DWORD *)long long buf = 138413058;
      id v15 = (id)objc_opt_class();
      __int16 v16 = 2048;
      int v17 = self;
      __int16 v18 = 2048;
      NSInteger v19 = section;
      __int16 v20 = 2048;
      NSInteger v21 = newSection;
      id v12 = v15;
      _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> moveSection:%ld toSection:%ld", buf, 0x2Au);
    }
  }
  id v9 = [(UITableView *)self _moveSection:section toSection:newSection usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
}

- (void)deleteRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = indexPaths;
  if ((*((void *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    id v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"UITableView.m", 8663, @"UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@", self object file lineNumber description];
  }
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &deleteRowsAtIndexPaths_withRowAnimation____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    uint64_t v10 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      BOOL v11 = v10;
      *(_DWORD *)long long buf = 138413058;
      id v15 = (id)objc_opt_class();
      __int16 v16 = 2048;
      int v17 = self;
      __int16 v18 = 2112;
      NSInteger v19 = v7;
      __int16 v20 = 2048;
      UITableViewRowAnimation v21 = animation;
      id v12 = v15;
      _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "<%@ %p> deleteRowsAtIndexPaths:%@ withRowAnimation:%ld", buf, 0x2Au);
    }
  }
  id v9 = [(UITableView *)self _updateRowsAtIndexPaths:v7 withUpdateAction:1 rowAnimation:animation usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
}

- (id)_moveRowAtIndexPath:(id)a3 toIndexPath:(id)a4 usingPresentationValues:(BOOL)a5
{
  id v8 = a3;
  id v9 = a4;
  if (a5 || (shadowUpdatesController = self->_shadowUpdatesController) == 0)
  {
    BOOL v11 = v8;
  }
  else
  {
    BOOL v11 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathAfterShadowUpdates:v8];

    BOOL v12 = 0;
    if (v9 && v11)
    {
      uint64_t v13 = [v9 section];
      BOOL v12 = v13 != [v11 section];
    }
    uint64_t v14 = [(_UITableViewShadowUpdatesController *)self->_shadowUpdatesController indexPathAfterShadowUpdates:v9 allowAppendingInsert:v12];

    id v9 = (id)v14;
  }
  id v15 = [(UITableView *)self _arrayForUpdateAction:3];
  __int16 v16 = -[UIRowMoveUpdateItem initWithOldIndexPath:newIndexPath:]((id *)[UIRowMoveUpdateItem alloc], v11, v9);
  int v17 = [(UITableView *)self _addToShadowUpdatesControllerIfNeeded:v16];
  [v15 addObject:v16];
  if (![(UITableView *)self _isUpdating])
  {
    [(UITableView *)self _setupCellAnimations];
    [(UITableView *)self _endCellAnimationsWithContext:0];
  }

  return v17;
}

- (void)moveRowAtIndexPath:(NSIndexPath *)indexPath toIndexPath:(NSIndexPath *)newIndexPath
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v7 = indexPath;
  id v8 = newIndexPath;
  if ((*((void *)&self->_tableFlags + 3) & 0x60000000) == 0x20000000)
  {
    uint64_t v14 = [MEMORY[0x1E4F28B00] currentHandler];
    [v14 handleFailureInMethod:a2, self, @"UITableView.m", 8765, @"UITableView must be updated via the UITableViewDiffableDataSource APIs when acting as the UITableView's dataSource: please do not call mutation APIs directly on UITableView. %@", self object file lineNumber description];
  }
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &moveRowAtIndexPath_toIndexPath____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    BOOL v11 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      BOOL v12 = v11;
      *(_DWORD *)long long buf = 138413058;
      id v16 = (id)objc_opt_class();
      __int16 v17 = 2048;
      __int16 v18 = self;
      __int16 v19 = 2112;
      __int16 v20 = v7;
      __int16 v21 = 2112;
      uint64_t v22 = v8;
      id v13 = v16;
      _os_log_impl(&dword_1853B0000, v12, OS_LOG_TYPE_ERROR, "<%@ %p> moveRowAtIndexPath:%@ toIndexPath:%@", buf, 0x2Au);
    }
  }
  id v10 = [(UITableView *)self _moveRowAtIndexPath:v7 toIndexPath:v8 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
}

- (BOOL)allowsSelection
{
  return (*((unsigned char *)&self->_tableFlags + 17) & 0x14) != 0;
}

- (BOOL)allowsSelectionDuringEditing
{
  return (*((unsigned char *)&self->_tableFlags + 17) & 0x28) != 0;
}

- (BOOL)_allowsEffectiveSelectionOrCustomActionAtIndexPath:(id)a3
{
  id v4 = a3;
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) != 0)
  {
    if ([(UITableView *)self allowsSelectionDuringEditing]
      || [(UITableView *)self _isRowMultiSelect:v4]
      || [v4 row] == 0x7FFFFFFFFFFFFFFFLL
      || [v4 section] == 0x7FFFFFFFFFFFFFFFLL)
    {
      goto LABEL_10;
    }
  }
  else if ([(UITableView *)self allowsSelection])
  {
LABEL_10:
    BOOL v8 = 1;
    goto LABEL_11;
  }
  int v5 = [(UITableView *)self _cellForRowAtIndexPath:v4 usingPresentationValues:1];
  if (v5)
  {
    int64_t v6 = v5;
    char v7 = [v5 _hasCustomSelectionAction];

    if (v7) {
      goto LABEL_10;
    }
  }
  BOOL v8 = [(UITableView *)self _canPerformPrimaryActionForRowAtIndexPath:v4];
LABEL_11:

  return v8;
}

- (BOOL)_allowsEffectiveSelection
{
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) != 0) {
    int v2 = 2048;
  }
  else {
    int v2 = 1024;
  }
  return (v2 & *((_DWORD *)&self->_tableFlags + 4)) != 0;
}

- (void)_setShouldBecomeFocusedOnSelection:(BOOL)a3
{
  uint64_t v3 = 0x10000;
  if (a3) {
    uint64_t v3 = 0x20000;
  }
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFCFFFFLL | v3;
}

- (BOOL)_shouldBecomeFocusedOnSelection
{
  uint64_t v2 = (*((void *)&self->_tableFlags + 2) >> 16) & 3;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __46__UITableView__shouldBecomeFocusedOnSelection__block_invoke;
  v4[3] = &unk_1E52DA6B0;
  v4[4] = self;
  return _UITriStateToBool_0(v2, v4);
}

uint64_t __46__UITableView__shouldBecomeFocusedOnSelection__block_invoke(uint64_t a1)
{
  if (dyld_program_sdk_at_least()) {
    return 1;
  }
  uint64_t v3 = [*(id *)(a1 + 32) traitCollection];
  BOOL v2 = [v3 _splitViewControllerContext] == 3;

  return v2;
}

- (void)setAllowsFocus:(BOOL)allowsFocus
{
  uint64_t v3 = 0x40000;
  if (allowsFocus) {
    uint64_t v3 = 0x80000;
  }
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFF3FFFFLL | v3;
}

- (BOOL)_defaultAllowsFocus
{
  uint64_t v3 = [(UIView *)self _focusBehavior];
  uint64_t v4 = [v3 cellFocusability];

  BOOL v5 = [(UITableView *)self allowsSelection];
  BOOL result = 0;
  if (v5 && v4 != 3)
  {
    if (v4 == 2)
    {
      char v7 = [(UIView *)self traitCollection];
      char v8 = [v7 _hasSplitViewControllerContextSidebarColumn];

      return v8;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

- (BOOL)allowsFocus
{
  uint64_t v2 = (*((void *)&self->_tableFlags + 2) >> 18) & 3;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __26__UITableView_allowsFocus__block_invoke;
  v4[3] = &unk_1E52DA6B0;
  v4[4] = self;
  return _UITriStateToBool_0(v2, v4);
}

uint64_t __26__UITableView_allowsFocus__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _defaultAllowsFocus];
}

- (void)setAllowsFocusDuringEditing:(BOOL)allowsFocusDuringEditing
{
  uint64_t v3 = 0x100000;
  if (allowsFocusDuringEditing) {
    uint64_t v3 = 0x200000;
  }
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFCFFFFFLL | v3;
}

- (BOOL)_defaultAllowsFocusDuringEditing
{
  if (dyld_program_sdk_at_least())
  {
    if (![(UITableView *)self allowsSelectionDuringEditing]) {
      return 0;
    }
  }
  else if (![(UITableView *)self allowsSelection])
  {
    return 0;
  }
  uint64_t v4 = [(UIView *)self _focusBehavior];
  if ([v4 cellFocusability] == 2)
  {
    BOOL v5 = [(UIView *)self traitCollection];
    char v3 = [v5 _hasSplitViewControllerContextSidebarColumn];
  }
  else
  {
    char v3 = 1;
  }

  return v3;
}

- (BOOL)allowsFocusDuringEditing
{
  uint64_t v2 = (*((void *)&self->_tableFlags + 2) >> 20) & 3;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = __39__UITableView_allowsFocusDuringEditing__block_invoke;
  v4[3] = &unk_1E52DA6B0;
  v4[4] = self;
  return _UITriStateToBool_0(v2, v4);
}

uint64_t __39__UITableView_allowsFocusDuringEditing__block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _defaultAllowsFocusDuringEditing];
}

- (BOOL)_allowsEffectiveFocus
{
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) != 0) {
    goto LABEL_6;
  }
  if ([(UITableView *)self allowsFocus]) {
    return 1;
  }
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) == 0) {
    return 0;
  }
LABEL_6:
  return [(UITableView *)self allowsFocusDuringEditing];
}

- (BOOL)_effectiveDefaultAllowsFocus
{
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) != 0) {
    goto LABEL_6;
  }
  if ([(UITableView *)self _defaultAllowsFocus]) {
    return 1;
  }
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) == 0) {
    return 0;
  }
LABEL_6:
  return [(UITableView *)self _defaultAllowsFocusDuringEditing];
}

- (id)_indexPathsForHighlightedRows
{
  BOOL v3 = [(UITableView *)self _isUsingPresentationValues];
  return [(UITableView *)self _indexPathsForHighlightedRowsUsingPresentationValues:v3];
}

- (id)_indexPathsForHighlightedRowsUsingPresentationValues:(BOOL)a3
{
  if ([(NSMutableArray *)self->_highlightedIndexPaths count])
  {
    BOOL v5 = (void *)[(NSMutableArray *)self->_highlightedIndexPaths copy];
    if (a3) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v5 = 0;
    if (a3) {
      goto LABEL_7;
    }
  }
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
  {
    uint64_t v7 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathsBeforeShadowUpdates:v5];

    BOOL v5 = (void *)v7;
  }
LABEL_7:
  return v5;
}

- (BOOL)_canRowBeIncludedInMultipleSelection:(id)a3
{
  id v4 = a3;
  if ([v4 row] == 0x7FFFFFFFFFFFFFFFLL || objc_msgSend(v4, "section") == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_3;
  }
  if ([(UITableView *)self _allowsEffectiveMultipleSelection])
  {
    BOOL v5 = 1;
    goto LABEL_4;
  }
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) == 0)
  {
LABEL_3:
    BOOL v5 = 0;
  }
  else
  {
    uint64_t v7 = [(UITableView *)self _existingCellForRowAtIndexPath:v4];
    char v8 = v7;
    if (v7) {
      uint64_t v9 = [v7 editingStyle];
    }
    else {
      uint64_t v9 = [(UITableView *)self _editingStyleForRowAtIndexPath:v4];
    }
    BOOL v5 = v9 == 3;
  }
LABEL_4:

  return v5;
}

- (BOOL)_isRowMultiSelect:(id)a3
{
  return [(UITableView *)self _isRowMultiSelect:a3 followingMacBehavior:0];
}

- (BOOL)_isRowMultiSelect:(id)a3 followingMacBehavior:(BOOL)a4
{
  return !a4 && [(UITableView *)self _canRowBeIncludedInMultipleSelection:a3];
}

- (void)_forciblyCancelPendingSelection
{
  pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
  self->_pendingSelectionIndexPath = 0;

  *((void *)&self->_tableFlags + 2) |= 0x40uLL;
  [(UITableView *)self setCurrentTouch:0];
}

- (id)_indexPathForSpringLoadingAtPoint:(CGPoint)a3
{
  return -[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", 1, a3.x, a3.y);
}

- (BOOL)_shouldSpringLoadRowAtIndexPath:(id)a3 withContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  char v8 = [(_UITableViewDragController *)self->_dragController indexPaths];
  uint64_t v9 = v8;
  if (v8) {
    int v10 = [v8 containsObject:v6] ^ 1;
  }
  else {
    LOBYTE(v10) = 1;
  }
  id WeakRetained = objc_loadWeakRetained(&self->super._delegate);
  char v12 = objc_opt_respondsToSelector();

  if (v12)
  {
    id v13 = [(UITableView *)self _delegateProxy];
    char v14 = [v13 tableView:self shouldSpringLoadRowAtIndexPath:v6 withContext:v7];
LABEL_8:
    LOBYTE(v10) = v14;

    goto LABEL_9;
  }
  id v15 = objc_loadWeakRetained(&self->super._delegate);
  char v16 = objc_opt_respondsToSelector();

  if (v16)
  {
    id v13 = [(UITableView *)self _delegateProxy];
    char v14 = [v13 _tableView:self shouldSpringLoadRowAtIndexPath:v6 withContext:v7];
    goto LABEL_8;
  }
LABEL_9:

  return v10;
}

- (void)_unhighlightSpringLoadedRow
{
  [(UITableView *)self unhighlightRowAtIndexPath:self->_highlightedSpringLoadedIndexPath animated:0];
  highlightedSpringLoadedIndexPath = self->_highlightedSpringLoadedIndexPath;
  self->_highlightedSpringLoadedIndexPath = 0;
}

- (void)_highlightSpringLoadedRowAtIndexPath:(id)a3
{
  objc_storeStrong((id *)&self->_highlightedSpringLoadedIndexPath, a3);
  id v5 = a3;
  [(UITableView *)self _highlightRowAtIndexPath:v5 animated:0 scrollPosition:0 usingPresentationValues:1];
}

- (BOOL)highlightRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5
{
  BOOL v6 = a4;
  id v8 = a3;
  LOBYTE(a5) = [(UITableView *)self _highlightRowAtIndexPath:v8 animated:v6 scrollPosition:a5 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];

  return a5;
}

- (BOOL)_highlightRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 usingPresentationValues:(BOOL)a6
{
  return [(UITableView *)self _highlightRowAtIndexPath:a3 animated:a4 scrollPosition:a5 usingPresentationValues:a6 playFeedback:0];
}

- (BOOL)_highlightRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 usingPresentationValues:(BOOL)a6 playFeedback:(BOOL)a7
{
  BOOL v9 = a4;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v11 = a3;
  if (!a6)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v13 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathAfterShadowUpdates:v11];

      id v11 = (id)v13;
    }
  }
  if (!v11) {
    goto LABEL_20;
  }
  if ([(NSMutableArray *)self->_highlightedIndexPaths containsObject:v11])
  {
LABEL_6:
    char v14 = 1;
    goto LABEL_21;
  }
  if (![(UITableView *)self _allowsEffectiveSelectionOrCustomActionAtIndexPath:v11])
  {
LABEL_20:
    char v14 = 0;
    goto LABEL_21;
  }
  if ([v11 row] == 0x7FFFFFFFFFFFFFFFLL || objc_msgSend(v11, "section") == 0x7FFFFFFFFFFFFFFFLL)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v15 = self->_highlightedIndexPaths;
    uint64_t v16 = [(NSMutableArray *)v15 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v31 != v18) {
            objc_enumerationMutation(v15);
          }
          uint64_t v20 = *(void *)(*((void *)&v30 + 1) + 8 * i);
          __int16 v21 = [(UITableView *)self _existingCellForRowAtIndexPath:v20];
          [v21 setHighlighted:0 animated:v9];

          if ((*((unsigned char *)&self->_tableFlags + 9) & 0x20) != 0)
          {
            uint64_t v22 = [(UITableView *)self _delegateProxy];
            [v22 tableView:self didUnhighlightRowAtIndexPath:v20];
          }
        }
        uint64_t v17 = [(NSMutableArray *)v15 countByEnumeratingWithState:&v30 objects:v34 count:16];
      }
      while (v17);
    }

    [(NSMutableArray *)self->_highlightedIndexPaths removeAllObjects];
    goto LABEL_20;
  }
  if ((*((unsigned char *)&self->_tableFlags + 9) & 8) == 0
    || [(_UISelectionInteraction *)self->_selectionInteraction isHinting]
    || ([(UITableView *)self _delegateProxy],
        id v24 = objc_claimAutoreleasedReturnValue(),
        int v25 = [v24 tableView:self shouldHighlightRowAtIndexPath:v11],
        v24,
        v25))
  {
    [(NSMutableArray *)self->_highlightedIndexPaths addObject:v11];
    double v26 = [(UITableView *)self _existingCellForRowAtIndexPath:v11];
    [v26 setHighlighted:1 animated:v9];
    if ((*((unsigned char *)&self->_tableFlags + 9) & 0x10) != 0)
    {
      int v27 = [(UITableView *)self _delegateProxy];
      [v27 tableView:self didHighlightRowAtIndexPath:v11];
    }
    if (a5) {
      [(UITableView *)self _scrollToRowAtIndexPath:v11 atScrollPosition:a5 animated:v9 usingPresentationValues:1];
    }

    goto LABEL_6;
  }
  double v28 = [(UITableView *)self _existingCellForRowAtIndexPath:v11];
  id v29 = v28;
  if (v28) {
    char v14 = [v28 _hasCustomSelectionAction];
  }
  else {
    char v14 = 0;
  }

LABEL_21:
  return v14;
}

- (void)unhighlightRowAtIndexPath:(id)a3 animated:(BOOL)a4
{
  BOOL v4 = a4;
  id v8 = a3;
  if (-[NSMutableArray containsObject:](self->_highlightedIndexPaths, "containsObject:"))
  {
    [(NSMutableArray *)self->_highlightedIndexPaths removeObject:v8];
    BOOL v6 = [(UITableView *)self _existingCellForRowAtIndexPath:v8];
    [v6 setHighlighted:0 animated:v4];

    if ((*((unsigned char *)&self->_tableFlags + 9) & 0x20) != 0)
    {
      id v7 = [(UITableView *)self _delegateProxy];
      [v7 tableView:self didUnhighlightRowAtIndexPath:v8];
    }
  }
}

- (void)_highlightCell:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 highlight:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v8 = a4;
  uint64_t v10 = [(UITableView *)self _indexPathForCell:a3 usingPresentationValues:1];
  id v11 = (void *)v10;
  if (v10)
  {
    char v12 = (void *)v10;
    if (v6) {
      [(UITableView *)self _highlightRowAtIndexPath:v10 animated:v8 scrollPosition:a5 usingPresentationValues:1];
    }
    else {
      [(UITableView *)self unhighlightRowAtIndexPath:v10 animated:v8];
    }
    id v11 = v12;
  }
}

- (void)_selectedIndexPathsDidChange
{
  id v4 = [MEMORY[0x1E4F28EA0] notificationWithName:@"UITableViewSelectionDidChangeNotification" object:self userInfo:0];
  BOOL v3 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v3 postNotification:v4];

  [(_UITableViewMultiSelectController *)self->_multiSelectController selectedIndexPathsChanged:self->_selectedIndexPaths];
}

- (BOOL)_inferFocusabilityForCell:(id)a3 atIndexPath:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (([(NSMutableArray *)self->_selectedIndexPaths containsObject:v7] & 1) == 0)
  {
    BOOL v9 = [v6 _existingContentView];
    if (!v9 || !dyld_program_sdk_at_least() || (_UIViewContainsFocusableSubviews(v9) & 1) == 0)
    {
      if ([v6 _hasCustomSelectionAction])
      {
        BOOL v8 = 1;
LABEL_15:

        goto LABEL_16;
      }
      if ([(UITableView *)self _allowsEffectiveSelectionOrCustomActionAtIndexPath:v7])
      {
        uint64_t v10 = [(UITableView *)self _delegateProxy];
        id v11 = v10;
        BOOL v8 = !v10
          || (*((unsigned char *)&self->_tableFlags + 9) & 8) == 0
          || [v10 tableView:self shouldHighlightRowAtIndexPath:v7];

        goto LABEL_15;
      }
    }
    BOOL v8 = 0;
    goto LABEL_15;
  }
  BOOL v8 = 1;
LABEL_16:

  return v8;
}

- (void)_selectRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 notifyDelegate:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v8 = a4;
  id v11 = a3;
  LOBYTE(v10) = 0;
  [(UITableView *)self _selectRowAtIndexPath:v11 animated:v8 scrollPosition:a5 notifyDelegate:v6 isCellMultiSelect:[(UITableView *)self _isRowMultiSelect:v11] deselectPrevious:0 performCustomSelectionAction:v10];
}

- (void)_selectRowAtIndexPath:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 notifyDelegate:(BOOL)a6 isCellMultiSelect:(BOOL)a7 deselectPrevious:(BOOL)a8 performCustomSelectionAction:(BOOL)a9
{
  BOOL v9 = a8;
  int v59 = a7;
  BOOL v60 = a6;
  BOOL v11 = a4;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  id v13 = a3;
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("TableViewOperations", &_selectRowAtIndexPath_animated_scrollPosition_notifyDelegate_isCellMultiSelect_deselectPrevious_performCustomSelectionAction____s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    double v52 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      double v53 = v52;
      *(_DWORD *)long long buf = 138413570;
      id v67 = (id)objc_opt_class();
      __int16 v68 = 2048;
      uint64_t v69 = self;
      __int16 v70 = 2112;
      id v71 = v13;
      __int16 v72 = 2048;
      BOOL v73 = v11;
      __int16 v74 = 2048;
      int64_t v75 = a5;
      __int16 v76 = 2048;
      BOOL v77 = v60;
      id v54 = v67;
      _os_log_impl(&dword_1853B0000, v53, OS_LOG_TYPE_ERROR, "<%@ %p> _selectRowAtIndexPath:%@ animated:%ld scrollPosition:%ld notifyDelegate:%ld", buf, 0x3Eu);
    }
  }
  int64_t v58 = a5;
  [(UITableView *)self _reloadDataIfNeeded];
  uint64_t v15 = [v13 row];
  uint64_t v16 = [v13 section];
  if (v13)
  {
    uint64_t v17 = v16;
    uint64_t v18 = 0;
    BOOL v19 = v16 != 0x7FFFFFFFFFFFFFFFLL;
    BOOL v20 = v15 != 0x7FFFFFFFFFFFFFFFLL;
    if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v57 = 0;
    }
    else
    {
      __int16 v21 = [(UITableView *)self _existingCellForRowAtIndexPath:v13];
      uint64_t v18 = v21;
      BOOL v22 = v21 != 0;
      BOOL v20 = 1;
      if (a9 && v21)
      {
        if ([v21 _hasCustomSelectionAction])
        {
          [v18 _performCustomSelectionAction];
          goto LABEL_69;
        }
        BOOL v22 = 1;
      }
      BOOL v57 = v22;
      BOOL v19 = 1;
    }
  }
  else
  {
    uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    id v13 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:0x7FFFFFFFFFFFFFFFLL];
    BOOL v57 = 0;
    uint64_t v18 = 0;
    BOOL v20 = 0;
    BOOL v19 = 0;
    uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) != 0) {
    goto LABEL_17;
  }
  if (![(UITableView *)self allowsSelection])
  {
LABEL_18:
    int v23 = 0;
LABEL_22:
    BOOL v24 = 0;
    if (v60 && a9) {
      BOOL v24 = [(UITableView *)self _canPerformPrimaryActionForRowAtIndexPath:v13];
    }
    if (v23)
    {
      if (!v60 || (*((unsigned char *)&self->_tableFlags + 5) & 0x40) == 0)
      {
        int v25 = v13;
        goto LABEL_29;
      }
      BOOL v48 = v24;
      double v49 = [(UITableView *)self _delegateProxy];
      int v25 = [v49 tableView:self willSelectRowAtIndexPath:v13];

      uint64_t v15 = [v25 row];
      uint64_t v50 = [v25 section];
      if (v25)
      {
        uint64_t v17 = v50;
        BOOL v24 = v48;
        if (v15 != 0x7FFFFFFFFFFFFFFFLL && v17 != 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_29:
          unint64_t v26 = *((void *)&self->_tableFlags + 3);
          *((void *)&self->_tableFlags + 3) = v26 | 0x1000000000000;
          BOOL v56 = v24;
          unint64_t v55 = v26;
          if (v9)
          {
            [(UITableView *)self _deselectAllRowsAnimated:v11 notifyDelegate:v60 excludingMultiSelectRows:0];
          }
          else if ((v59 & 1) == 0)
          {
            double v34 = [(UITableView *)self _indexPathForSelectedRowUsingPresentationValues:1];
            char v35 = [v34 isEqual:v25];

            if ((v35 & 1) == 0) {
              [(UITableView *)self _deselectAllNonMultiSelectRowsAnimated:v11 notifyDelegate:v60];
            }
          }
          double v36 = [MEMORY[0x1E4F28D58] indexPathForRow:v15 inSection:v17];
          if (([(NSMutableArray *)self->_selectedIndexPaths containsObject:v36] & 1) == 0) {
            [(NSMutableArray *)self->_selectedIndexPaths addObject:v36];
          }
          [v18 setSelected:1 animated:v11];
          if (v58) {
            [(UITableView *)self _scrollToRowAtIndexPath:v25 atScrollPosition:v58 animated:v11 usingPresentationValues:1];
          }
          double v37 = [(UIView *)self _focusSystem];
          id v38 = [v37 focusedItem];
          id v39 = v18;
          BOOL v40 = [(UITableView *)self _shouldSelectionFollowFocusForIndexPath:v25 initiatedBySelection:1];
          BOOL v41 = v38 != v39 && v57;
          if (v41 && dyld_program_sdk_at_least())
          {
            if (v40)
            {
              if ((!v60 | [v37 _focusedItemIsContainedInEnvironment:self includeSelf:1]))
              {
                if (!v38)
                {
LABEL_57:
                  if (([v37 _focusedItemIsContainedInEnvironment:self includeSelf:1] & 1) == 0) {
                    [(UIView *)self setNeedsFocusUpdate];
                  }
                  goto LABEL_59;
                }
              }
              else
              {
                BOOL v51 = [(UITableView *)self _shouldBecomeFocusedOnSelection];
                if (v51 || !v38)
                {
                  if (!v51) {
                    goto LABEL_57;
                  }
                  goto LABEL_80;
                }
              }
              if (([v37 _focusedItemIsContainedInEnvironment:self includeSelf:1] & 1) == 0) {
                goto LABEL_57;
              }
LABEL_80:
              [v37 _updateFocusImmediatelyToEnvironment:v39];
            }
          }
          else if (v40)
          {
            goto LABEL_57;
          }
LABEL_59:
          if (v60)
          {
            double v42 = [v39 selectionSegueTemplate];
            id v43 = (id)[v42 perform:v39];

            if (*((unsigned char *)&self->_tableFlags + 6))
            {
              +[UIViewController _sendPrepareForTapGesture:]((uint64_t)UIViewController, v39);
              double v44 = [(UITableView *)self _delegateProxy];
              [v44 tableView:self didSelectRowAtIndexPath:v25];
            }
            [(UITableView *)self _selectedIndexPathsDidChange];
          }
          *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFEFFFFFFFFFFFFLL | ((HIWORD(v55) & 1) << 48);

          BOOL v24 = v56;
        }
      }
      else
      {
        BOOL v24 = v48;
      }
    }
    else
    {
      int v25 = v13;
    }
    if (v24)
    {
      double v45 = [(UITableView *)self _delegateProxy];
      [v45 tableView:self performPrimaryActionForRowAtIndexPath:v25];
    }
    uint64_t v46 = [(UITableView *)self _focusedCellIndexPath];
    int v47 = [v46 isEqual:v25];

    if (v47) {
      [(UITableView *)self _updateSelectionIsKey];
    }
    id v13 = v25;
    goto LABEL_69;
  }
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) != 0)
  {
LABEL_17:
    if (![(UITableView *)self allowsSelectionDuringEditing]
      && (v20 & ~v59 & v19 & 1) != 0)
    {
      goto LABEL_18;
    }
  }
  if (v15 != 0x7FFFFFFFFFFFFFFFLL && v17 != 0x7FFFFFFFFFFFFFFFLL)
  {
    int v23 = 1;
    goto LABEL_22;
  }
  int v27 = (void *)[(NSMutableArray *)self->_selectedIndexPaths copy];
  [(NSMutableArray *)self->_selectedIndexPaths removeAllObjects];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id v28 = v27;
  uint64_t v29 = [v28 countByEnumeratingWithState:&v61 objects:v65 count:16];
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)v62;
    do
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if (*(void *)v62 != v31) {
          objc_enumerationMutation(v28);
        }
        long long v33 = [(UITableView *)self _existingCellForRowAtIndexPath:*(void *)(*((void *)&v61 + 1) + 8 * i)];
        [v33 setSelected:0 animated:v11];
      }
      uint64_t v30 = [v28 countByEnumeratingWithState:&v61 objects:v65 count:16];
    }
    while (v30);
  }

LABEL_69:
}

- (void)_userSelectRowAtPendingSelectionIndexPath:(id)a3 animatedSelection:(BOOL)a4
{
  BOOL v4 = a4;
  id v15 = a3;
  BOOL v6 = self;
  id v7 = v6;
  if (v6)
  {
    BOOL v8 = v6;
    while ([v8 isUserInteractionEnabled])
    {
      uint64_t v9 = [v8 superview];

      BOOL v8 = (void *)v9;
      if (!v9)
      {

        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    [(UITableView *)v7 unhighlightRowAtIndexPath:v15 animated:0];
    uint64_t v10 = [(UITableView *)v7 _existingCellForRowAtIndexPath:v15];
    int v11 = [v10 isSelected];

    uint64_t v12 = [(UITableView *)v7 _canPerformPrimaryActionForRowAtIndexPath:v15];
    uint64_t v13 = [(UITableView *)v7 _isRowMultiSelect:v15];
    if ((v12 & 1) == 0 && v13 && v11)
    {
      [(UITableView *)v7 _deselectRowAtIndexPath:v15 animated:v4 notifyDelegate:1];
    }
    else
    {
      LOBYTE(v14) = 1;
      [(UITableView *)v7 _selectRowAtIndexPath:v15 animated:v4 scrollPosition:0 notifyDelegate:1 isCellMultiSelect:v13 deselectPrevious:v12 performCustomSelectionAction:v14];
    }
  }
}

- (void)_userSelectRowAtPendingSelectionIndexPath:(id)a3
{
  id v4 = a3;
  id v5 = [(UIView *)self traitCollection];
  int v6 = _UIShouldAnimateDefaultCellHighlightAndSelection(v5);

  if (v6)
  {
    id v7 = [(UITableView *)self _cellForRowAtIndexPath:v4 usingPresentationValues:1];
    if (v7)
    {
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      v8[2] = __57__UITableView__userSelectRowAtPendingSelectionIndexPath___block_invoke;
      v8[3] = &unk_1E52D9F98;
      v8[4] = self;
      id v9 = v4;
      [v7 _performConfigurationStateModifications:v8];
    }
    else
    {
      [(UITableView *)self _userSelectRowAtPendingSelectionIndexPath:v4 animatedSelection:0];
    }
  }
  else
  {
    [(UITableView *)self _userSelectRowAtPendingSelectionIndexPath:v4 animatedSelection:0];
  }
}

uint64_t __57__UITableView__userSelectRowAtPendingSelectionIndexPath___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _userSelectRowAtPendingSelectionIndexPath:*(void *)(a1 + 40) animatedSelection:1];
}

- (void)_userSelectCell:(id)a3
{
  id v4 = [(UITableView *)self _indexPathForCell:a3 usingPresentationValues:1];
  [(UITableView *)self _userSelectRowAtPendingSelectionIndexPath:v4];
}

- (void)selectRowAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated scrollPosition:(UITableViewScrollPosition)scrollPosition
{
  BOOL v6 = animated;
  if ((~*((_DWORD *)&self->_tableFlags + 6) & 0xC00) == 0)
  {
    unint64_t v8 = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFF7FFLL;
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2);
    *((void *)&self->_tableFlags + 3) = v8;
  }
  uint64_t v10 = indexPath;
  LOBYTE(v9) = 0;
  [(UITableView *)self _selectRowAtIndexPath:v10 animated:v6 scrollPosition:scrollPosition notifyDelegate:0 isCellMultiSelect:[(UITableView *)self _isRowMultiSelect:v10 followingMacBehavior:0] deselectPrevious:0 performCustomSelectionAction:v9];
}

- (void)deselectRowAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated
{
}

- (void)_selectAllSelectedRows
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  BOOL v3 = (void *)[(NSMutableArray *)self->_selectedIndexPaths copy];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        if (![(UITableView *)self _isRowMultiSelect:v8])
        {
          uint64_t v9 = [(UITableView *)self _existingCellForRowAtIndexPath:v8];
          [v9 setSelected:1 animated:0];
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
}

- (BOOL)_delegateSupportsPrimaryAction
{
  return (*((unsigned __int8 *)&self->_tableFlags + 6) >> 3) & 1;
}

- (BOOL)_canPerformPrimaryActionForRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if (v4 && [(UITableView *)self _delegateSupportsPrimaryAction])
  {
    if ((*(void *)&self->_tableFlags & 0x4000000000000) != 0)
    {
      id v7 = [(UITableView *)self _delegateProxy];
      char v5 = [v7 tableView:self canPerformPrimaryActionForRowAtIndexPath:v4];
    }
    else
    {
      char v5 = (*((void *)&self->_tableFlags + 1) & 0x10000000000000) == 0;
    }
  }
  else
  {
    char v5 = 0;
  }

  return v5;
}

- (unint64_t)maximumNumberOfSectionIndexTitlesWithoutTruncation
{
  [(UITableView *)self _contentInset];
  double v4 = v3;
  double v6 = v5;
  [(UIView *)self bounds];
  indedouble x = self->_index;
  return [(UITableViewIndex *)index maximumNumberOfTitlesWithoutTruncationForHeight:v7 - v4 - v6];
}

- (UITableViewCellSeparatorStyle)separatorStyle
{
  return *((_WORD *)&self->_tableFlags + 7) & 7;
}

- (void)_darkenedSystemColorsChanged
{
  id v3 = [(UITableView *)self separatorColor];
  [(UITableView *)self _distributeSeparatorColor:v3];
}

- (id)_defaultSeparatorColor
{
  if ((*((unsigned char *)&self->_tableFlags + 13) & 0x60) != 0) {
    +[UIColor tableSeparatorDarkColor];
  }
  else {
  uint64_t v2 = +[UIColor tableSeparatorLightColor];
  }
  return v2;
}

- (id)separatorTopShadowColor
{
  return 0;
}

- (id)separatorBottomShadowColor
{
  return 0;
}

- (void)_setDrawsSeparatorAtTopOfSections:(BOOL)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 0x2000000000000;
  if (!a3) {
    uint64_t v4 = 0;
  }
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFDFFFFFFFFFFFFLL | v4;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  double v5 = [(UITableView *)self visibleCells];
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        long long v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        long long v11 = [(UITableView *)self _indexPathForCell:v10 usingPresentationValues:1];
        objc_msgSend(v10, "_setDrawsSeparatorAtTopOfSection:", -[UITableView _shouldDrawSeparatorAtTopOfSectionForCellAtIndexPath:](self, "_shouldDrawSeparatorAtTopOfSectionForCellAtIndexPath:", v11));
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v7);
  }
}

- (BOOL)_drawsSeparatorAtTopOfSections
{
  return (*((unsigned __int8 *)&self->_tableFlags + 22) >> 1) & 1;
}

- (BOOL)usesVariableMargins
{
  rowData = self->_rowData;
  if (!rowData) {
    return 0;
  }
  char rowDataFlags = (char)rowData->_rowDataFlags;
  if ((rowDataFlags & 4) != 0) {
    return rowData->_tableSidePadding > 9.0;
  }
  BOOL result = 0;
  rowData->_tableSidePadding = 0.0;
  *(unsigned char *)&rowData->_char rowDataFlags = rowDataFlags | 4;
  return result;
}

- (UIView)backgroundView
{
  return self->_backgroundView;
}

- (BOOL)_usingCustomBackgroundView
{
  return *((unsigned __int8 *)&self->_tableFlags + 20) >> 7;
}

- (id)_backgroundEffects
{
  if (*((unsigned char *)&self->_tableFlags + 21))
  {
    uint64_t v2 = [(UIView *)self->_backgroundView backgroundEffects];
  }
  else
  {
    uint64_t v2 = 0;
  }
  return v2;
}

uint64_t __44__UITableView__setBackgroundColor_animated___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[UIView animateWithDuration:4 delay:a2 options:a3 animations:0.35 completion:0.0];
}

- (void)setTableHeaderView:(UIView *)tableHeaderView
{
  long long v12 = tableHeaderView;
  if ([(UITableView *)self _shouldUseNewHeaderFooterBehavior])
  {
    long long v11 = [MEMORY[0x1E4F28B00] currentHandler];
    [v11 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:9963 description:@"Cannot explicitliy set header when using new heightForHeaderInTableView: or heightForFooterInTableView: methods.  Use viewForHeaderInTableView: instead."];
  }
  p_tableHeaderView = &self->_tableHeaderView;
  uint64_t v7 = self->_tableHeaderView;
  if (v7 != v12)
  {
    [(UIView *)v7 removeFromSuperview];
    objc_storeStrong((id *)&self->_tableHeaderView, tableHeaderView);
    if (*p_tableHeaderView
      && [(UIView *)*p_tableHeaderView translatesAutoresizingMaskIntoConstraints]&& dyld_program_sdk_at_least())
    {
      [(UIView *)*p_tableHeaderView _setHostsLayoutEngine:1];
    }
    [(UITableView *)self _addContentSubview:*p_tableHeaderView atBack:0];
  }
  [(UITableView *)self _updateTableHeaderFooterViewInsetsContentViewsToSafeArea];
  [(UITableView *)self _ensureRowDataIsLoaded];
  if ((objc_opt_respondsToSelector() & 1) != 0
    && [(UIView *)*p_tableHeaderView _isSpecialInternalHeaderView])
  {
    [(UIView *)*p_tableHeaderView sizeToFit];
  }
  rowData = self->_rowData;
  if (*p_tableHeaderView)
  {
    [(UIView *)*p_tableHeaderView frame];
    double v10 = v9;
  }
  else
  {
    double v10 = 0.0;
  }
  -[UITableViewRowData tableHeaderHeightDidChangeToHeight:]((uint64_t)rowData, v10);
  -[UIView setFrame:](*p_tableHeaderView, "setFrame:", -[UITableViewRowData rectForTableHeaderView]((uint64_t)self->_rowData));
  [(UITableView *)self _updateContentSize];
  [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1];
  [(UITableView *)self _updateSeparatorStateForVisibleCells];
  if (![(UITableView *)self _pinsTableHeaderView])
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [(UITableView *)self setTableHeaderViewShouldAutoHide:1];
    }
  }
}

- (UIView)tableFooterView
{
  return self->_tableFooterView;
}

uint64_t __57__UITableView__dequeueReusableViewOfType_withIdentifier___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) prepareForReuse];
}

- (BOOL)_canSelectRowContainingHitView:(id)a3
{
  id v3 = a3;
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  while (1)
  {
    if (_IsKindOfUITableViewCell(v4) & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
    {
LABEL_8:
      char IsKindOfUITableViewCell = _IsKindOfUITableViewCell(v4);
      goto LABEL_9;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 && ([v4 isTracking]) {
      break;
    }
    uint64_t v5 = [v4 superview];

    uint64_t v4 = (void *)v5;
    if (!v5) {
      goto LABEL_8;
    }
  }
  char IsKindOfUITableViewCell = 0;
LABEL_9:

  return IsKindOfUITableViewCell;
}

- (void)_resetDragSwipeAndTouchSelectFlags
{
  p_uint64_t tableFlags = &self->_tableFlags;
  *((void *)&self->_tableFlags + 2) &= ~0x40uLL;
  if ([(UIScrollView *)self isDragging]) {
    *((void *)p_tableFlags + 2) |= 0x40uLL;
  }
}

- (BOOL)_beginTrackingWithEvent:(id)a3
{
  id v4 = a3;
  [(UITableView *)self _resetDragSwipeAndTouchSelectFlags];
  v6.receiver = self;
  v6.super_class = (Class)UITableView;
  LOBYTE(self) = [(UIScrollView *)&v6 _beginTrackingWithEvent:v4];

  return (char)self;
}

- (void)_setUseUnifiedSelectionBehavior:(BOOL)a3
{
  uint64_t v3 = 0x2000000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFDFFFFFFFFFLL | v3;
}

- (BOOL)_useUnifiedSelectionBehavior
{
  return (*((unsigned __int8 *)&self->_tableFlags + 28) >> 5) & 1;
}

- (BOOL)_allowsSelectionOfPendingSelectionIndexPath:(id)a3
{
  id v4 = a3;
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) != 0)
  {
    if (![(UITableView *)self allowsSelectionDuringEditing]
      && ![(UITableView *)self allowsMultipleSelectionDuringEditing]
      && ![(UITableView *)self _isRowMultiSelect:v4])
    {
      goto LABEL_8;
    }
  }
  else if (![(UITableView *)self allowsSelection])
  {
LABEL_8:
    BOOL v5 = 0;
    goto LABEL_9;
  }
  BOOL v5 = 1;
LABEL_9:

  return v5;
}

- (void)touchesBegan:(id)a3 withEvent:(id)a4
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  if (_UITouchesContainsTouchFromExternalTouchpad(v6)) {
    goto LABEL_4;
  }
  id v8 = v7;
  if (![v8 _buttonMask])
  {

LABEL_7:
    uint64_t v10 = [(UITableView *)self currentTouch];
    if (v10)
    {
      long long v11 = (void *)v10;
      long long v12 = [(UITableView *)self currentTouch];
      if ([v12 phase] == 3)
      {
        swipeToDeleteCell = self->_swipeToDeleteCell;

        if (swipeToDeleteCell) {
          goto LABEL_5;
        }
      }
      else
      {
        long long v14 = [(UITableView *)self currentTouch];
        if ([v14 phase] != 4)
        {

LABEL_58:
          goto LABEL_5;
        }
        long long v15 = self->_swipeToDeleteCell;

        if (v15) {
          goto LABEL_5;
        }
      }
    }
    else if (self->_swipeToDeleteCell)
    {
      goto LABEL_5;
    }
    long long v11 = [v6 anyObject];
    [(UITableView *)self setCurrentTouch:v11];
    if ([v11 _isPointerTouch]) {
      [(UITableView *)self _resetDragSwipeAndTouchSelectFlags];
    }
    if (v11)
    {
      p_pendingSelectionIndexPath = &self->_pendingSelectionIndexPath;
      if (!self->_pendingSelectionIndexPath)
      {
        [v11 locationInView:self];
        double v18 = v17;
        double v20 = v19;
        v62.receiver = self;
        v62.super_class = (Class)UITableView;
        -[UIScrollView hitTest:withEvent:](&v62, sel_hitTest_withEvent_, v8);
        __int16 v21 = (UITableView *)objc_claimAutoreleasedReturnValue();
        BOOL v22 = [(UIView *)self traitCollection];
        unsigned int v50 = _UIShouldAnimateDefaultCellHighlightAndSelection(v22);

        if (v21 == self)
        {
          int v23 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:0x7FFFFFFFFFFFFFFFLL];
          [(UITableView *)self _highlightRowAtIndexPath:v23 animated:v50 scrollPosition:0 usingPresentationValues:1];
        }
        if ([(UITableView *)self _canSelectRowContainingHitView:v21])
        {
          BOOL v24 = -[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", 1, v18, v20);
          if (v24
            && [(UITableView *)self _allowsSelectionOfPendingSelectionIndexPath:v24])
          {
            objc_storeStrong((id *)&self->_pendingSelectionIndexPath, v24);
            if ([(UIScrollView *)self isDragging]
              || ![(UITableView *)self _highlightRowAtIndexPath:*p_pendingSelectionIndexPath animated:v50 scrollPosition:0 usingPresentationValues:1 playFeedback:1])
            {
              int v27 = *p_pendingSelectionIndexPath;
              *p_pendingSelectionIndexPath = 0;

              *((void *)&self->_tableFlags + 2) |= 0x40uLL;
            }
            else
            {
              id v46 = v8;
              int v47 = v24;
              BOOL v48 = v21;
              double v49 = v11;
              aBlock[0] = MEMORY[0x1E4F143A8];
              aBlock[1] = 3221225472;
              aBlock[2] = __38__UITableView_touchesBegan_withEvent___block_invoke;
              aBlock[3] = &unk_1E5300E78;
              void aBlock[4] = self;
              int v25 = (char *)_Block_copy(aBlock);
              if ([(UITableView *)self _shouldDeselectRowsOnTouchesBegan])
              {
                pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
                if (pendingDeselectionIndexPaths)
                {
                  [(NSMutableArray *)pendingDeselectionIndexPaths removeAllObjects];
                }
                else
                {
                  id v28 = (NSMutableArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
                  uint64_t v29 = self->_pendingDeselectionIndexPaths;
                  self->_pendingDeselectionIndexPaths = v28;
                }
                long long v59 = 0u;
                long long v60 = 0u;
                long long v57 = 0u;
                long long v58 = 0u;
                obuint64_t j = (id)[(NSMutableArray *)self->_selectedIndexPaths copy];
                uint64_t v30 = [obj countByEnumeratingWithState:&v57 objects:v65 count:16];
                if (v30)
                {
                  uint64_t v31 = v30;
                  uint64_t v32 = *(void *)v58;
                  long long v33 = v25 + 16;
                  do
                  {
                    for (uint64_t i = 0; i != v31; ++i)
                    {
                      if (*(void *)v58 != v32) {
                        objc_enumerationMutation(obj);
                      }
                      uint64_t v35 = *(void *)(*((void *)&v57 + 1) + 8 * i);
                      if ((*((unsigned int (**)(char *, uint64_t))v25 + 2))(v25, v35))
                      {
                        double v36 = v33;
                        uint64_t v37 = v32;
                        id v38 = [(UITableView *)self _existingCellForRowAtIndexPath:v35];
                        id v39 = v38;
                        if (v38) {
                          [v38 setSelected:0 animated:v50];
                        }
                        else {
                          [(UITableView *)self _showSeparatorForRowBeforeIndexPath:v35];
                        }
                        [(NSMutableArray *)self->_pendingDeselectionIndexPaths addObject:v35];

                        uint64_t v32 = v37;
                        long long v33 = v36;
                      }
                    }
                    uint64_t v31 = [obj countByEnumeratingWithState:&v57 objects:v65 count:16];
                  }
                  while (v31);
                }
              }
              long long v55 = 0u;
              long long v56 = 0u;
              long long v53 = 0u;
              long long v54 = 0u;
              BOOL v40 = (void *)[(NSMutableArray *)self->_highlightedIndexPaths copy];
              uint64_t v41 = [v40 countByEnumeratingWithState:&v53 objects:v64 count:16];
              if (v41)
              {
                uint64_t v42 = v41;
                uint64_t v43 = *(void *)v54;
                do
                {
                  for (uint64_t j = 0; j != v42; ++j)
                  {
                    if (*(void *)v54 != v43) {
                      objc_enumerationMutation(v40);
                    }
                    uint64_t v45 = *(void *)(*((void *)&v53 + 1) + 8 * j);
                    if ((*((unsigned int (**)(char *, uint64_t))v25 + 2))(v25, v45)) {
                      [(UITableView *)self unhighlightRowAtIndexPath:v45 animated:0];
                    }
                  }
                  uint64_t v42 = [v40 countByEnumeratingWithState:&v53 objects:v64 count:16];
                }
                while (v42);
              }

              __int16 v21 = v48;
              long long v11 = v49;
              id v8 = v46;
              BOOL v24 = v47;
            }
          }
        }
      }
    }
    v52.receiver = self;
    v52.super_class = (Class)UITableView;
    [(UIScrollView *)&v52 touchesBegan:v6 withEvent:v8];
    goto LABEL_58;
  }
  char v9 = [v8 _buttonMask];

  if (v9) {
    goto LABEL_7;
  }
LABEL_4:
  v63.receiver = self;
  v63.super_class = (Class)UITableView;
  [(UIScrollView *)&v63 touchesBegan:v6 withEvent:v7];
LABEL_5:
}

uint64_t __38__UITableView_touchesBegan_withEvent___block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) _isRowMultiSelect:v3]) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = [v3 isEqual:*(void *)(*(void *)(a1 + 32) + 2352)] ^ 1;
  }

  return v4;
}

- (void)touchesMoved:(id)a3 withEvent:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = [(UITableView *)self currentTouch];
  if ([v6 containsObject:v8])
  {
    if (!v8)
    {
LABEL_12:
      v26.receiver = self;
      v26.super_class = (Class)UITableView;
      [(UIScrollView *)&v26 touchesMoved:v6 withEvent:v7];
      goto LABEL_13;
    }
    char v9 = self->_pendingSelectionIndexPath;
    uint64_t v10 = [(UITableView *)self _existingCellForRowAtIndexPath:v9];
    if (v10)
    {
      long long v11 = [(UIView *)self traitCollection];
      uint64_t v12 = _UIShouldAnimateDefaultCellHighlightAndSelection(v11);

      [v10 bounds];
      CGFloat v14 = v13;
      CGFloat v16 = v15;
      CGFloat v18 = v17;
      CGFloat v20 = v19;
      [v8 locationInView:v10];
      v27.double x = v21;
      v27.double y = v22;
      v28.origin.double x = v14;
      v28.origin.double y = v16;
      v28.size.double width = v18;
      v28.size.double height = v20;
      if (CGRectContainsPoint(v28, v27) && !self->_swipeToDeleteCell)
      {
        if (([v10 isHighlighted] & 1) == 0)
        {
          [(UITableView *)self _highlightRowAtIndexPath:self->_pendingSelectionIndexPath animated:v12 scrollPosition:0 usingPresentationValues:1];
          p_uint64_t tableFlags = &self->_tableFlags;
          unint64_t v25 = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFFFBFLL;
          goto LABEL_10;
        }
      }
      else if ([v10 isHighlighted])
      {
        int v23 = [MEMORY[0x1E4F28D58] indexPathForItem:0x7FFFFFFFFFFFFFFFLL inSection:0x7FFFFFFFFFFFFFFFLL];
        [(UITableView *)self _highlightRowAtIndexPath:v23 animated:v12 scrollPosition:0 usingPresentationValues:1];

        p_uint64_t tableFlags = &self->_tableFlags;
        unint64_t v25 = *((void *)&self->_tableFlags + 2) | 0x40;
LABEL_10:
        *((void *)p_tableFlags + 2) = v25;
      }
    }

    goto LABEL_12;
  }
LABEL_13:
}

- (void)_updateTableHeaderViewForAutoHideWithVelocity:(double)a3 targetOffset:(CGPoint *)a4
{
  [(UIScrollView *)self contentOffset];
  CGFloat v8 = v7;
  double v10 = v9;
  [(UIScrollView *)self _effectiveContentInset];
  if (a4)
  {
    double v12 = v11;
    if (self->_tableHeaderView) {
      goto LABEL_3;
    }
    if ([(UITableView *)self _shouldUseNewHeaderFooterBehavior])
    {
      rowData = self->_rowData;
      if (rowData)
      {
        double heightForTableHeaderViewHiding = rowData->_heightForTableHeaderViewHiding;
        if (heightForTableHeaderViewHiding < 0.0) {
          double heightForTableHeaderViewHiding = -[UITableViewRowData heightForTableHeaderView]((uint64_t)rowData);
        }
        if (heightForTableHeaderViewHiding > 0.0)
        {
LABEL_3:
          if ((*((unsigned char *)&self->_tableFlags + 19) & 0x10) != 0)
          {
            double v13 = -v12;
            if (a4->y > -v12)
            {
              [(UITableView *)self heightForAutohidingTableHeaderView];
              if (v10 > v13)
              {
                double v15 = v10 + v12;
                if (v10 + v12 < v14)
                {
                  if (a3 <= 0.0)
                  {
                    if (a3 < 0.0)
                    {
                      uint64_t v16 = *((void *)&self->_tableFlags + 3);
                      unint64_t v17 = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFDFFFFFFFLL;
                      goto LABEL_21;
                    }
                    if (v15 <= v14 * 0.8)
                    {
                      uint64_t v22 = *((void *)&self->_tableFlags + 2);
                      uint64_t v16 = *((void *)&self->_tableFlags + 3);
                      double v23 = v14 - v12;
                      unint64_t v24 = v22 & 0xFFFFFFFFDFFFFFFFLL;
                      BOOL v25 = (v22 & 0x40000000) == 0;
                      if ((v22 & 0x40000000) != 0) {
                        unint64_t v17 = v22 & 0xFFFFFFFFDFFFFFFFLL;
                      }
                      else {
                        unint64_t v17 = v22 | 0x20000000;
                      }
                      if (!v25) {
                        double v23 = -v12;
                      }
                      if (v15 >= v14 * 0.2) {
                        double v13 = v23;
                      }
                      else {
                        unint64_t v17 = v24;
                      }
                      goto LABEL_21;
                    }
                  }
                  double v13 = v14 - v12;
                  uint64_t v16 = *((void *)&self->_tableFlags + 3);
                  unint64_t v17 = *((void *)&self->_tableFlags + 2) | 0x20000000;
LABEL_21:
                  *((void *)&self->_tableFlags + 2) = v17;
                  *((void *)&self->_tableFlags + 3) = v16;
                  if (a4->y <= v14 - v12)
                  {
                    a4->double x = v8;
                    a4->double y = v13;
                  }
                  goto LABEL_25;
                }
              }
              double y = a4->y;
              if (y < v14 - v12)
              {
                if (v12 + y <= v14 * 0.5)
                {
                  a4->double y = v13;
                  unint64_t v21 = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFDFFFFFFFLL;
                }
                else
                {
                  a4->double y = v14 - v12;
                  unint64_t v21 = *((void *)&self->_tableFlags + 2) | 0x20000000;
                }
                *((void *)&self->_tableFlags + 2) = v21;
              }
            }
          }
        }
      }
    }
  }
LABEL_25:
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFBFFFFFFFLL | (2 * *((void *)&self->_tableFlags + 2)) & 0x40000000;
}

- (void)_scrollViewWillEndDraggingWithVelocity:(CGPoint)a3 targetContentOffset:(CGPoint *)a4
{
}

- (void)_scrollViewDidEndDraggingWithDeceleration:(BOOL)a3
{
  v5.receiver = self;
  v5.super_class = (Class)UITableView;
  [(UIScrollView *)&v5 _scrollViewDidEndDraggingWithDeceleration:a3];
  if ([(UITableView *)self _shouldDeselectRowsOnTouchesBegan])
  {
    [(UITableView *)self _selectAllSelectedRows];
    pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
    self->_pendingDeselectionIndexPaths = 0;
  }
}

- (BOOL)_visibleFooterViewsContainsView:(id)a3
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    objc_super v5 = [(NSMutableDictionary *)self->_visibleFooterViews objectEnumerator];
    uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v11;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v5);
          }
          if ([*(id *)(*((void *)&v10 + 1) + 8 * i) isEqual:v4])
          {
            LOBYTE(v6) = 1;
            goto LABEL_12;
          }
        }
        uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

void __40__UITableView__visibleHeaderFooterViews__block_invoke(uint64_t a1, void *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __40__UITableView__visibleHeaderFooterViews__block_invoke_2;
  v3[3] = &unk_1E5308F08;
  long long v5 = *(_OWORD *)(a1 + 40);
  id v4 = *(id *)(a1 + 32);
  [a2 enumerateKeysAndObjectsUsingBlock:v3];
}

void __40__UITableView__visibleHeaderFooterViews__block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  unint64_t v5 = [a2 integerValue];
  unint64_t v6 = *(void *)(a1 + 40);
  BOOL v8 = v5 >= v6;
  unint64_t v7 = v5 - v6;
  BOOL v8 = !v8 || v7 >= *(void *)(a1 + 48);
  if (!v8) {
    [*(id *)(a1 + 32) addObject:v9];
  }
}

- (id)_contentSubviews
{
  id v3 = [MEMORY[0x1E4F1CA48] array];
  [v3 addObjectsFromArray:self->_visibleCells];
  id v4 = [(UITableView *)self _visibleHeaderFooterViews];
  [v3 addObjectsFromArray:v4];

  return v3;
}

- (id)_nearestCellToPoint:(CGPoint)a3
{
  return -[UITableView _nearestCellToPoint:expandingVisibleCells:](self, "_nearestCellToPoint:expandingVisibleCells:", 0, a3.x, a3.y);
}

- (id)_nearestCellToPoint:(CGPoint)a3 expandingVisibleCells:(BOOL)a4
{
  BOOL v4 = a4;
  double y = a3.y;
  double x = a3.x;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    [(UITableView *)self _visibleBounds];
    double v10 = (v9 - y) * -0.75;
    if (v9 - y <= 0.0) {
      double v10 = 0.0;
    }
    -[UITableView _ensureViewsAreLoadedInRect:](self, "_ensureViewsAreLoadedInRect:", v8 + 0.0, v9 + v10);
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v11 = self->_visibleCells;
  uint64_t v12 = [(NSMutableArray *)v11 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    double v14 = 0;
    uint64_t v15 = *(void *)v30;
    double v16 = 1.79769313e308;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v30 != v15) {
          objc_enumerationMutation(v11);
        }
        CGFloat v18 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        if (v4)
        {
          [v18 frame];
          double v21 = sqrt((v19 - x) * (v19 - x) + (v20 - y) * (v20 - y));
        }
        else
        {
          objc_msgSend(v18, "bounds", (void)v29);
          -[UIView convertRect:fromView:](self, "convertRect:fromView:", v18);
          UIDistanceBetweenPointAndRect(x, y, v22, v23, v24, v25);
          double v21 = v26;
        }
        if (v21 < v16)
        {
          id v27 = v18;

          double v16 = v21;
          double v14 = v27;
        }
      }
      uint64_t v13 = [(NSMutableArray *)v11 countByEnumeratingWithState:&v29 objects:v33 count:16];
    }
    while (v13);
  }
  else
  {
    double v14 = 0;
  }

  return v14;
}

- (CGPoint)_contentOffsetForLowFidelityScrollInDirection:(CGPoint)a3 duration:(double *)a4
{
  double y = a3.y;
  v82.receiver = self;
  v82.super_class = (Class)UITableView;
  [(UIScrollView *)&v82 _contentOffsetForLowFidelityScrollInDirection:a4 duration:a3.x];
  double v7 = v6;
  double v9 = v8;
  [(UIScrollView *)self contentSize];
  double v11 = v10;
  [(UIView *)self bounds];
  if (v11 <= v12) {
    goto LABEL_37;
  }
  if ([(UIScrollView *)self isScrollAnimating]) {
    [(UIScrollView *)self _animatedTargetOffset];
  }
  else {
    [(UIScrollView *)self contentOffset];
  }
  double v15 = v13;
  double v16 = v14;
  [(UIView *)self bounds];
  double v18 = v16 + y * v17;
  if (y >= 0.0)
  {
    if (y <= 0.0) {
      goto LABEL_15;
    }
    uint64_t v34 = [(UITableView *)self _visibleCellsUsingPresentationValues:1];
    double v20 = [v34 lastObject];

    if (v20)
    {
      [(UIView *)self bounds];
      CGFloat v36 = v35;
      double v81 = v15;
      CGFloat v38 = v37;
      CGFloat v40 = v39;
      CGFloat v42 = v41;
      [v20 frame];
      v91.origin.double x = v43;
      v91.origin.double y = v44;
      v91.size.double width = v45;
      v91.size.double height = v46;
      v87.origin.double x = v36;
      v87.origin.double y = v38;
      double v15 = v81;
      v87.size.double width = v40;
      v87.size.double height = v42;
      if (!CGRectContainsRect(v87, v91))
      {
        [(UIView *)self bounds];
        double MaxY = CGRectGetMaxY(v88);
        [v20 frame];
        double v18 = v18 + MaxY - CGRectGetMaxY(v89);
      }
    }
  }
  else
  {
    double v19 = [(UITableView *)self _visibleCellsUsingPresentationValues:1];
    double v20 = [v19 firstObject];

    if (v20)
    {
      double v80 = v15;
      [(UIView *)self bounds];
      CGFloat v22 = v21;
      CGFloat v24 = v23;
      CGFloat v26 = v25;
      CGFloat v28 = v27;
      [v20 frame];
      v90.origin.double x = v29;
      v90.origin.double y = v30;
      v90.size.double width = v31;
      v90.size.double height = v32;
      v84.origin.double x = v22;
      v84.origin.double y = v24;
      v84.size.double width = v26;
      v84.size.double height = v28;
      if (!CGRectContainsRect(v84, v90))
      {
        [(UIView *)self bounds];
        double MinY = CGRectGetMinY(v85);
        [v20 frame];
        double v18 = v18 + MinY - CGRectGetMinY(v86);
      }
      double v15 = v80;
    }
  }

LABEL_15:
  tableHeaderView = self->_tableHeaderView;
  if (tableHeaderView && ([(UIView *)tableHeaderView frame], v49 > v18))
  {
    [(UIView *)self->_tableHeaderView frame];
    double v7 = v50;
    double v52 = v51;
    [(UITableView *)self _contentInset];
    double v9 = v52 - v53;
  }
  else
  {
    long long v54 = -[UITableView _nearestCellToPoint:expandingVisibleCells:](self, "_nearestCellToPoint:expandingVisibleCells:", 1, v15, v18);
    long long v55 = v54;
    if (v54)
    {
      [v54 frame];
      double v7 = v56;
      double v58 = v57;
      [(UITableView *)self _contentInset];
      double v9 = v58 - v59;
      long long v60 = [(UITableView *)self _indexPathForCell:v55 usingPresentationValues:1];
      long long v61 = -[UITableView _headerViewForSection:usingPresentationValues:](self, "_headerViewForSection:usingPresentationValues:", [v60 section], 1);

      if (v61)
      {
        [v61 size];
        double v63 = v9 - v62;
        [(UIView *)self bounds];
        double v65 = v63 + v64;
        [(UIScrollView *)self contentSize];
        if (v65 < v66) {
          double v9 = v63;
        }
      }
    }
  }
  if ([(UITableView *)self _isScrolledToTop]
    && ([(UITableView *)self _isScrolledToTopAtContentOffsetY:v9]
      ? (BOOL v67 = y == -1.0)
      : (BOOL v67 = 0),
        v67))
  {
    double v9 = v9 + -20.0;
  }
  else if (y == 1.0)
  {
    __int16 v68 = [(UIScrollView *)self accessoryViewAtEdge:4];
    uint64_t v69 = v68;
    if (v68)
    {
      [v68 frame];
      double v71 = v70 + 20.0;
    }
    else
    {
      double v71 = 20.0;
    }
    [(UIView *)self bounds];
    double v73 = v9 + v72;
    [(UIScrollView *)self contentSize];
    if (v73 > v71 + v74)
    {
      [(UIScrollView *)self contentSize];
      double v76 = v75;
      [(UIView *)self bounds];
      double v9 = v71 + v76 - v77;
    }
  }
LABEL_37:
  double v78 = v7;
  double v79 = v9;
  result.double y = v79;
  result.double x = v78;
  return result;
}

- (void)touchesEnded:(id)a3 withEvent:(id)a4
{
  id v5 = a3;
  double v6 = [(UITableView *)self currentTouch];
  int v7 = [v5 containsObject:v6];

  if (v7)
  {
    [(UITableView *)self setCurrentTouch:0];
    BOOL v8 = 0;
    if (![(UIScrollView *)self isDragging] && v6 && (*((void *)&self->_tableFlags + 2) & 0x40) == 0)
    {
      double v9 = self->_pendingSelectionIndexPath;
      if (v9 && !self->_swipeToDeleteCell)
      {
        BOOL v10 = [(UITableView *)self _allowsSelectionOfPendingSelectionIndexPath:v9];
        BOOL v8 = v10;
        if (v10)
        {
          double v11 = (void *)UIApp;
          v22[0] = MEMORY[0x1E4F143A8];
          v22[1] = 3221225472;
          void v22[2] = __38__UITableView_touchesEnded_withEvent___block_invoke;
          v22[3] = &unk_1E52D9F98;
          v22[4] = self;
          double v23 = v9;
          [v11 _performBlockAfterCATransactionCommits:v22];
          pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
          self->_pendingSelectionIndexPath = 0;
        }
        double v13 = [(UITableView *)self _existingCellForRowAtIndexPath:v9];
        double v14 = v13;
        if ((*((unsigned char *)&self->_tableFlags + 1) & 0x10) != 0)
        {
          double v15 = [v13 layoutManager];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          if (isKindOfClass) {
            [v14 _startToEditTextField];
          }
        }
      }
      else
      {
        BOOL v8 = 0;
      }
    }
    if (!v8 && self->_pendingSelectionIndexPath)
    {
      double v17 = [(UIView *)self traitCollection];
      uint64_t v18 = _UIShouldAnimateDefaultCellHighlightAndSelection(v17);

      [(UITableView *)self unhighlightRowAtIndexPath:self->_pendingSelectionIndexPath animated:v18];
      double v19 = self->_pendingSelectionIndexPath;
      self->_pendingSelectionIndexPath = 0;
    }
    if ([(UITableView *)self _shouldDeselectRowsOnTouchesBegan])
    {
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = __38__UITableView_touchesEnded_withEvent___block_invoke_2;
      v21[3] = &unk_1E52D9F70;
      v21[4] = self;
      [(id)UIApp _performBlockAfterCATransactionCommits:v21];
      pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
      self->_pendingDeselectionIndexPaths = 0;
    }
    [(UITableView *)self _resetDragSwipeAndTouchSelectFlags];
  }
}

uint64_t __38__UITableView_touchesEnded_withEvent___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _userSelectRowAtPendingSelectionIndexPath:*(void *)(a1 + 40)];
}

uint64_t __38__UITableView_touchesEnded_withEvent___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 32) _selectAllSelectedRows];
}

- (void)touchesCancelled:(id)a3 withEvent:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = [(UITableView *)self currentTouch];
  int v9 = [v6 containsObject:v8];

  if (v9)
  {
    [(UITableView *)self setCurrentTouch:0];
    pendingSelectionIndexPath = self->_pendingSelectionIndexPath;
    self->_pendingSelectionIndexPath = 0;

    double v11 = [(UIView *)self traitCollection];
    uint64_t v12 = _UIShouldAnimateDefaultCellHighlightAndSelection(v11);

    double v13 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:0x7FFFFFFFFFFFFFFFLL];
    [(UITableView *)self _highlightRowAtIndexPath:v13 animated:v12 scrollPosition:0 usingPresentationValues:1];

    if ([(UIScrollView *)self isScrollEnabled]) {
      *((void *)&self->_tableFlags + 2) |= 0x40uLL;
    }
    v15.receiver = self;
    v15.super_class = (Class)UITableView;
    [(UIScrollView *)&v15 touchesCancelled:v6 withEvent:v7];
    if ([(UITableView *)self _shouldDeselectRowsOnTouchesBegan]
      && ![(UIScrollView *)self isTracking])
    {
      [(UITableView *)self _selectAllSelectedRows];
      pendingDeselectionIndexPaths = self->_pendingDeselectionIndexPaths;
      self->_pendingDeselectionIndexPaths = 0;
    }
  }
}

- (id)hitTest:(CGPoint)a3 forEvent:(__GSEvent *)a4
{
  double y = a3.y;
  double x = a3.x;
  indexContainerView = self->_indexContainerView;
  -[UIView convertPoint:fromView:](indexContainerView, "convertPoint:fromView:", self);
  -[UIView hitTest:forEvent:](indexContainerView, "hitTest:forEvent:", a4);
  int v9 = (UITableViewIndex *)objc_claimAutoreleasedReturnValue();
  BOOL v10 = v9;
  if (v9 && (v9 == self->_index || v9 == (UITableViewIndex *)self->_indexContainerView))
  {
    double v11 = v9;
  }
  else
  {
    v14.receiver = self;
    v14.super_class = (Class)UITableView;
    -[UIView hitTest:forEvent:](&v14, sel_hitTest_forEvent_, a4, x, y);
    double v11 = (UITableViewIndex *)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v12 = v11;

  return v12;
}

- (id)hitTest:(CGPoint)a3 withEvent:(id)a4
{
  double y = a3.y;
  double x = a3.x;
  id v7 = a4;
  indexContainerView = self->_indexContainerView;
  -[UIView convertPoint:fromView:](indexContainerView, "convertPoint:fromView:", self, x, y);
  -[UIView hitTest:withEvent:](indexContainerView, "hitTest:withEvent:", v7);
  int v9 = (UITableViewIndex *)objc_claimAutoreleasedReturnValue();
  BOOL v10 = v9;
  if (v9 && (v9 == self->_index || v9 == (UITableViewIndex *)self->_indexContainerView))
  {
    double v11 = v9;
  }
  else
  {
    v14.receiver = self;
    v14.super_class = (Class)UITableView;
    -[UIScrollView hitTest:withEvent:](&v14, sel_hitTest_withEvent_, v7, x, y);
    double v11 = (UITableViewIndex *)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v12 = v11;

  return v12;
}

- (BOOL)touchesShouldCancelInContentView:(id)a3
{
  id v4 = a3;
  v9.receiver = self;
  v9.super_class = (Class)UITableView;
  BOOL v5 = [(UIScrollView *)&v9 touchesShouldCancelInContentView:v4];
  if (v5)
  {
    id v6 = [(UITableView *)self _tableViewCellForContentView:v4];
    if (v6)
    {
      id v7 = [(UITableView *)self _indexPathForCell:v6 usingPresentationValues:1];
      [(UITableView *)self unhighlightRowAtIndexPath:v7 animated:0];
    }
  }

  return v5;
}

- (BOOL)_scrollsToMakeFirstResponderVisible
{
  return 0;
}

void __54__UITableView__configureDataSourcePrefetchingHandlers__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v5 = WeakRetained;
  if (WeakRetained && (*((unsigned char *)WeakRetained + 3098) & 8) != 0)
  {
    id v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v3, "count"));
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v7 = v3;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v15;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = objc_msgSend(v5, "indexPathForRowAtGlobalRow:", objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * v11), "integerValue", (void)v14));
          if (v12) {
            [v6 addObject:v12];
          }

          ++v11;
        }
        while (v9 != v11);
        uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v9);
    }

    if ([v6 count])
    {
      double v13 = [v5 _prefetchDataSourceProxy];
      [v13 tableView:v5 prefetchRowsAtIndexPaths:v6];
    }
  }
}

void __54__UITableView__configureDataSourcePrefetchingHandlers__block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v5 = WeakRetained;
  if (WeakRetained && (*((unsigned char *)WeakRetained + 3098) & 0x10) != 0)
  {
    id v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v3, "count"));
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v7 = v3;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v15;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = objc_msgSend(v5, "indexPathForRowAtGlobalRow:", objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * v11), "integerValue", (void)v14));
          if (v12) {
            [v6 addObject:v12];
          }

          ++v11;
        }
        while (v9 != v11);
        uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v9);
    }

    if ([v6 count])
    {
      double v13 = [v5 _prefetchDataSourceProxy];
      [v13 tableView:v5 cancelPrefetchingForRowsAtIndexPaths:v6];
    }
  }
}

void __48__UITableView__configureCellPrefetchingHandlers__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _prefetchCellAtGlobalRow:a2 aboveVisibleRange:a3];
}

- (void)_prefetchCellAtGlobalRow:(int64_t)a3 aboveVisibleRange:(BOOL)a4
{
  BOOL v4 = a4;
  if ([(UITableView *)self _cellPrefetchingAllowed])
  {
    id v7 = -[UITableViewRowData indexPathForRowAtGlobalRow:](&self->_rowData->super.isa, a3);
    uint64_t v8 = v7;
    if (v7)
    {
      long long v15 = v7;
      if (!self->_focusedCell
        || self->_focusedViewType != 1
        || (v9 = [v7 isEqual:self->_focusedCellIndexPath], uint64_t v8 = v15, (v9 & 1) == 0))
      {
        if (!self->_firstResponderView
          || self->_firstResponderViewType != 1
          || (v10 = [v8 isEqual:self->_firstResponderIndexPath], uint64_t v8 = v15, (v10 & 1) == 0))
        {
          [(UIScrollView *)self contentSize];
          double v12 = v11;
          id v13 = -[UITableView _createPreparedCellForGlobalRow:withIndexPath:willDisplay:](self, "_createPreparedCellForGlobalRow:withIndexPath:willDisplay:", a3, v15, 0, -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](&self->_rowData->super.isa, a3, 0));
          [v13 _setHiddenForReuse:1];
          [(NSMutableDictionary *)self->_tentativeCells removeObjectForKey:v15];
          if (v4)
          {
            if ([(UITableView *)self _estimatesHeights])
            {
              [(UITableView *)self _applyCoalescedContentSizeUpdates];
              [(UIScrollView *)self contentSize];
              if (v14 - v12 != 0.0)
              {
                [(UIScrollView *)self contentOffset];
                -[UITableView setContentOffset:](self, "setContentOffset:");
              }
            }
          }

          uint64_t v8 = v15;
        }
      }
    }
  }
}

- (BOOL)isPrefetchingEnabled
{
  return (*((unsigned __int8 *)&self->_tableFlags + 26) >> 1) & 1;
}

- (void)setPrefetchingEnabled:(BOOL)prefetchingEnabled
{
  uint64_t v3 = *((void *)&self->_tableFlags + 3);
  if (((((v3 & 0x20000) == 0) ^ prefetchingEnabled) & 1) == 0)
  {
    uint64_t v4 = 0x20000;
    if (!prefetchingEnabled) {
      uint64_t v4 = 0;
    }
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2);
    *((void *)&self->_tableFlags + 3) = v3 & 0xFFFFFFFFFFFDFFFFLL | v4;
    [(UITableView *)self _preparePrefetchContext];
  }
}

- (void)_updateCycleIdleUntil:(unint64_t)a3
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  if (WeakRetained)
  {
    rowData = self->_rowData;

    if (rowData)
    {
      if ((*((unsigned char *)&self->_tableFlags + 26) & 2) != 0)
      {
        id v6 = (void *)_UISetCurrentFallbackEnvironment(self);
        [(UITableView *)self _preparePrefetchContext];
        prefetchContext = self->_prefetchContext;
        [(UIScrollView *)self contentOffset];
        [(_UITableViewPrefetchContext *)(uint64_t)prefetchContext updateVisibleIndexRange:self->_visibleRows.length withContentOffset:v8];
        _UIRestorePreviousFallbackEnvironment(v6);
      }
    }
  }
}

- (void)accessoryInsetsDidChange:(UIEdgeInsets)a3
{
  double right = a3.right;
  double bottom = a3.bottom;
  double left = a3.left;
  double top = a3.top;
  v15.receiver = self;
  v15.super_class = (Class)UITableView;
  -[UIScrollView accessoryInsetsDidChange:](&v15, sel_accessoryInsetsDidChange_);
  [(UIScrollView *)self accessoryInsets];
  if (v9 != left || v8 != top || v11 != right || v10 != bottom)
  {
    if (v9 == left && v11 == right) {
      [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1];
    }
    else {
      [(UITableView *)self _setNeedsRebuildGeometry];
    }
    [(UIView *)self layoutIfNeeded];
  }
}

- (void)_getGradientMaskBounds:(CGRect *)a3 startInsets:(UIEdgeInsets *)a4 endInsets:(UIEdgeInsets *)a5 intensities:(UIEdgeInsets *)a6
{
  v17.receiver = self;
  v17.super_class = (Class)UITableView;
  [(UIScrollView *)&v17 _getGradientMaskBounds:a3 startInsets:a4 endInsets:a5 intensities:a6];
  [(UITableConstants *)self->_constants defaultFocusedShadowRadiusForTableView:self];
  double v11 = v10;
  char v12 = dyld_program_sdk_at_least();
  double v13 = 0.0;
  double v14 = 0.0;
  if ((v12 & 1) == 0) {
    [(UITableView *)self _contentInset];
  }
  double v15 = v11 + v11;
  double v16 = v11 * 4.0;
  if (a3)
  {
    a3->origin.double y = a3->origin.y - v15;
    a3->size.double height = v15 + v16 + a3->size.height;
  }
  if (a4)
  {
    a4->double top = v14 + v15 + a4->top;
    a4->double bottom = v16 + v13 + a4->bottom;
  }
  if (a5)
  {
    a5->double top = v14 + v15 + a5->top;
    a5->double bottom = v16 + v13 + a5->bottom;
  }
}

- (CGSize)_contentSize
{
  if (self->_rowData)
  {
    if (objc_opt_respondsToSelector())
    {
      if ([(UIView *)self->_tableHeaderView _isSpecialInternalHeaderView])
      {
        [(UIView *)self->_tableHeaderView frame];
        double v4 = v3;
        [(UIView *)self frame];
        [(UIView *)self->_tableHeaderView sizeToFit];
        [(UIView *)self->_tableHeaderView frame];
        if (v5 != v4) {
          -[UITableViewRowData tableHeaderHeightDidChangeToHeight:]((uint64_t)self->_rowData, v5);
        }
      }
    }
    double v6 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
    countLabel = self->_countLabel;
    if (countLabel && [(UITableViewCountView *)countLabel count] >= 20)
    {
      [(UITableConstants *)self->_constants defaultRowHeightForTableView:self];
      double v6 = v6 + v8;
    }
    [(UIView *)self bounds];
    double v10 = v9;
    [(UITableView *)self heightForTableHeaderViewHiding];
    if (v11 > 0.0)
    {
      double v12 = v11;
      [(UITableView *)self _contentInset];
      double v14 = v13;
      double v16 = v15;
      [(UIView *)self bounds];
      if (v6 < v12 + v17 - v14 - v16) {
        double v6 = v12 + v17 - v14 - v16;
      }
    }
  }
  else
  {
    double v10 = *MEMORY[0x1E4F1DB30];
    double v6 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  }
  double v18 = v10;
  double v19 = v6;
  result.double height = v19;
  result.double width = v18;
  return result;
}

- (CGSize)sizeThatFits:(CGSize)a3
{
  double height = a3.height;
  CGFloat width = a3.width;
  [(UITableView *)self _ensureRowDataIsLoaded];
  double v6 = -[UITableViewRowData heightForTable]((uint64_t)self->_rowData);
  if (v6 >= height) {
    double v7 = height;
  }
  else {
    double v7 = v6;
  }
  double v8 = width;
  result.double height = v7;
  result.CGFloat width = v8;
  return result;
}

- (BOOL)canBeEdited
{
  return 1;
}

void __43__UITableView__setEditing_animated_forced___block_invoke(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  double v3 = objc_msgSend(a2, "objectEnumerator", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        double v8 = *(void **)(*((void *)&v9 + 1) + 8 * v7);
        if (objc_opt_respondsToSelector()) {
          [v8 setEditing:*(unsigned __int8 *)(a1 + 32) animated:*(unsigned __int8 *)(a1 + 33)];
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
}

uint64_t __35__UITableView_setEditing_animated___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setEditing:*(unsigned __int8 *)(a1 + 40) animated:*(unsigned __int8 *)(a1 + 41) forced:0];
}

- (void)_updateCell:(id)a3 withValue:(id)a4
{
  id v13 = a3;
  id v6 = a4;
  if ([(UITableView *)self _dataSourceImplementsCanUpdateRowAtIndexPath])
  {
    uint64_t v7 = [(UITableView *)self _indexPathForCell:v13 usingPresentationValues:1];
    if (v7)
    {
      double v8 = [(UITableView *)self _delegateProxy];
      [v8 tableView:self didUpdateTextFieldForRowAtIndexPath:v7 withValue:v6];

      if ([v13 returnAction])
      {
        long long v9 = [v13 _target];

        if (v9)
        {
          long long v10 = (void *)UIApp;
          uint64_t v11 = [v13 returnAction];
          long long v12 = [v13 _target];
          [v10 sendAction:v11 toTarget:v12 fromSender:v13 forEvent:0];
        }
      }
    }
  }
}

- (void)setShowsHorizontalScrollIndicator:(BOOL)a3
{
  uint64_t v3 = 0x2000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFDFFFFFFLL | v3;
  [(UITableView *)self _updateShowScrollIndicatorsFlag];
}

- (void)_scrollFirstResponderCellToVisible:(BOOL)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  p_uint64_t tableFlags = &self->_tableFlags;
  uint64_t v4 = *((void *)&self->_tableFlags + 3);
  if ((v4 & 0x100000000) != 0) {
    goto LABEL_4;
  }
  BOOL v5 = a3;
  if ([(UITableView *)self _isUpdating])
  {
    uint64_t v4 = *((void *)p_tableFlags + 3);
LABEL_4:
    *((void *)p_tableFlags + 2) = *((void *)p_tableFlags + 2);
    *((void *)p_tableFlags + 3) = v4 | 0x200000000;
    return;
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v7 = self->_visibleCells;
  uint64_t v8 = [(NSMutableArray *)v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v16;
LABEL_7:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v16 != v10) {
        objc_enumerationMutation(v7);
      }
      long long v12 = *(void **)(*((void *)&v15 + 1) + 8 * v11);
      if (objc_msgSend(v12, "_isAncestorOfFirstResponder", (void)v15)) {
        break;
      }
      if (v9 == ++v11)
      {
        uint64_t v9 = [(NSMutableArray *)v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v9) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
    id v13 = v12;

    if (!v13) {
      return;
    }
    uint64_t v14 = [(UITableView *)self _indexPathForCell:v13 usingPresentationValues:1];
    if (v14)
    {
      if ([(UITableView *)self _indexPathIsValid:v14]) {
        [(UITableView *)self _scrollToRowAtIndexPath:v14 atScrollPosition:0 animated:v5 usingPresentationValues:1];
      }
    }
  }
  else
  {
LABEL_13:
    id v13 = v7;
  }
}

- (void)registerNib:(UINib *)nib forCellReuseIdentifier:(NSString *)identifier
{
  uint64_t v11 = nib;
  uint64_t v7 = identifier;
  if (![(NSString *)v7 length])
  {
    uint64_t v8 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v9 = *MEMORY[0x1E4F1C3C8];
    uint64_t v10 = NSStringFromSelector(a2);
    [v8 raise:v9, @"must pass a valid reuse identifier to -[UITableView %@]", v10 format];
  }
  [(UITableView *)self _registerThing:v11 asNib:1 forViewType:1 withReuseIdentifer:v7];
}

- (void)registerNib:(UINib *)nib forHeaderFooterViewReuseIdentifier:(NSString *)identifier
{
  uint64_t v11 = nib;
  uint64_t v7 = identifier;
  if (![(NSString *)v7 length])
  {
    uint64_t v8 = (void *)MEMORY[0x1E4F1CA00];
    uint64_t v9 = *MEMORY[0x1E4F1C3C8];
    uint64_t v10 = NSStringFromSelector(a2);
    [v8 raise:v9, @"must pass a valid reuse identifier to -[UITableView %@]", v10 format];
  }
  [(UITableView *)self _registerThing:v11 asNib:1 forViewType:2 withReuseIdentifer:v7];
}

- (void)_setExternalObjectTable:(id)a3 forNibLoadingOfCellWithReuseIdentifier:(id)a4
{
  id v10 = a3;
  id v6 = a4;
  nibExternalObjectsTables = self->_nibExternalObjectsTables;
  if (!nibExternalObjectsTables)
  {
    uint64_t v8 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v9 = self->_nibExternalObjectsTables;
    self->_nibExternalObjectsTables = v8;

    nibExternalObjectsTables = self->_nibExternalObjectsTables;
  }
  [(NSMutableDictionary *)nibExternalObjectsTables setObject:v10 forKey:v6];
}

- (void)_setExternalObjectTable:(id)a3 forNibLoadingOfHeaderFooterWithReuseIdentifier:(id)a4
{
  id v10 = a3;
  id v6 = a4;
  headerFooterNibExternalObjectsTables = self->_headerFooterNibExternalObjectsTables;
  if (!headerFooterNibExternalObjectsTables)
  {
    uint64_t v8 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v9 = self->_headerFooterNibExternalObjectsTables;
    self->_headerFooterNibExternalObjectsTables = v8;

    headerFooterNibExternalObjectsTables = self->_headerFooterNibExternalObjectsTables;
  }
  [(NSMutableDictionary *)headerFooterNibExternalObjectsTables setObject:v10 forKey:v6];
}

- (double)_contentWidthForCell:(id)a3 forRowAtIndexPath:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  [(UITableView *)self _contentWidthForCell:v7 forRowAtIndexPath:v6 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];
  double v9 = v8;

  return v9;
}

- (double)_contentWidthForCell:(id)a3 forRowAtIndexPath:(id)a4 usingPresentationValues:(BOOL)a5
{
  id v8 = a3;
  id v9 = a4;
  if (!a5)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v11 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathAfterShadowUpdates:v9];

      id v9 = (id)v11;
    }
  }
  [v8 _setTableView:self];
  objc_msgSend(v8, "setTableViewStyle:", -[UITableView _tableStyle](self, "_tableStyle"));
  [v8 setAutoresizingMask:2];
  [v8 _setNeedsSetup:1];
  [v8 frame];
  double v13 = v12;
  double v15 = v14;
  [(UIView *)self bounds];
  objc_msgSend(v8, "setFrame:", v13, v15);
  [v8 setSeparatorStyle:*((_WORD *)&self->_tableFlags + 7) & 7];
  if ((*((unsigned char *)&self->_tableFlags + 6) & 0x80) != 0)
  {
    long long v16 = [(UITableView *)self _delegateProxy];
    objc_msgSend(v8, "setIndentationLevel:", objc_msgSend(v16, "tableView:indentationLevelForRowAtIndexPath:", self, v9));
  }
  [(UITableView *)self _setupCell:v8 forEditing:[(UITableView *)self isEditing] atIndexPath:v9 animated:0 updateSeparators:0];
  long long v17 = [v8 layoutManager];
  objc_msgSend(v17, "contentRectForCell:forState:", v8, objc_msgSend(v8, "currentStateMask"));
  double v19 = v18;

  [v8 _setTableView:0];
  return v19;
}

- (void)setAllowsMultipleSelection:(BOOL)allowsMultipleSelection
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  p_uint64_t tableFlags = &self->_tableFlags;
  if (((((*((void *)&self->_tableFlags + 2) & 0x1000) == 0) ^ allowsMultipleSelection) & 1) == 0)
  {
    uint64_t v5 = *((void *)&self->_tableFlags + 3);
    uint64_t v6 = 4096;
    if (!allowsMultipleSelection) {
      uint64_t v6 = 0;
    }
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFEFFFLL | v6;
    *((void *)&self->_tableFlags + 3) = v5;
    if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) == 0)
    {
      if (!allowsMultipleSelection)
      {
        id v7 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:0x7FFFFFFFFFFFFFFFLL];
        [(UITableView *)self _selectRowAtIndexPath:v7 animated:0 scrollPosition:0 notifyDelegate:0];
      }
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      id v8 = self->_visibleCells;
      uint64_t v9 = [(NSMutableArray *)v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v14;
        do
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v14 != v11) {
              objc_enumerationMutation(v8);
            }
            objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * i), "_setMultiselecting:", (*((void *)p_tableFlags + 2) >> 12) & 1, (void)v13);
          }
          uint64_t v10 = [(NSMutableArray *)v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
        }
        while (v10);
      }
    }
    [(UITableView *)self _updateMultiSelectControllerIfNeeded];
  }
}

- (void)setAllowsMultipleSelectionDuringEditing:(BOOL)allowsMultipleSelectionDuringEditing
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  p_uint64_t tableFlags = &self->_tableFlags;
  if (((((*((void *)&self->_tableFlags + 2) & 0x2000) == 0) ^ allowsMultipleSelectionDuringEditing) & 1) == 0)
  {
    uint64_t v5 = *((void *)&self->_tableFlags + 3);
    uint64_t v6 = 0x2000;
    if (!allowsMultipleSelectionDuringEditing) {
      uint64_t v6 = 0;
    }
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFFFDFFFLL | v6;
    *((void *)&self->_tableFlags + 3) = v5;
    if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) != 0)
    {
      if (!allowsMultipleSelectionDuringEditing)
      {
        id v7 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:0x7FFFFFFFFFFFFFFFLL];
        [(UITableView *)self _selectRowAtIndexPath:v7 animated:0 scrollPosition:0 notifyDelegate:0];
      }
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      id v8 = self->_visibleCells;
      uint64_t v9 = [(NSMutableArray *)v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v9)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)v14;
        do
        {
          for (uint64_t i = 0; i != v10; ++i)
          {
            if (*(void *)v14 != v11) {
              objc_enumerationMutation(v8);
            }
            objc_msgSend(*(id *)(*((void *)&v13 + 1) + 8 * i), "_setMultiselecting:", (*((void *)p_tableFlags + 2) >> 13) & 1, (void)v13);
          }
          uint64_t v10 = [(NSMutableArray *)v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
        }
        while (v10);
      }
    }
    [(UITableView *)self _updateMultiSelectControllerIfNeeded];
  }
}

- (void)_updateMultiSelectControllerIfNeeded
{
  p_uint64_t tableFlags = &self->_tableFlags;
  unint64_t v4 = *((void *)&self->_tableFlags + 2) & 0x2000;
  if (!dyld_program_sdk_at_least())
  {
    if (v4) {
      goto LABEL_3;
    }
LABEL_6:
    [(_UITableViewMultiSelectController *)self->_multiSelectController uninstallFromTableView];
    multiSelectController = self->_multiSelectController;
    self->_multiSelectController = 0;
    goto LABEL_8;
  }
  if (!((*((_DWORD *)p_tableFlags + 4) >> 12) & 1 | (v4 >> 13))) {
    goto LABEL_6;
  }
LABEL_3:
  if (self->_multiSelectController) {
    return;
  }
  uint64_t v6 = [[_UITableViewMultiSelectController alloc] initWithTableView:self];
  multiSelectController = self->_multiSelectController;
  self->_multiSelectController = v6;
LABEL_8:
}

- (void)_setSectionContentInsetFollowsLayoutMargins:(BOOL)a3
{
  uint64_t v3 = *((void *)&self->_tableFlags + 3);
  if (((((v3 & 0x4000) == 0) ^ a3) & 1) == 0)
  {
    uint64_t v4 = 0x4000;
    if (!a3) {
      uint64_t v4 = 0;
    }
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2);
    *((void *)&self->_tableFlags + 3) = v3 & 0xFFFFFFFFFFFFBFFFLL | v4;
    [(UITableView *)self _rebuildGeometryWithCompatibility];
  }
}

- (void)_setSectionCornerRadius:(double)a3
{
  self->_sectionCornerRadius = a3;
}

- (void)_setSectionHeaderFooterPadding:(double)a3
{
  if (self->_sectionHeaderFooterPadding != a3)
  {
    self->_sectionHeaderFooterPadding = a3;
    [(UITableView *)self _setNeedsRebuildGeometry];
  }
}

- (double)_sectionHeaderFooterPadding
{
  return self->_sectionHeaderFooterPadding;
}

- (void)_setUseLegacySectionHeaderFooterPinningBehavior:(BOOL)a3
{
  uint64_t v3 = *((void *)&self->_tableFlags + 3);
  if (((((v3 & 0x200000000000) == 0) ^ a3) & 1) == 0)
  {
    uint64_t v4 = 0x200000000000;
    if (!a3) {
      uint64_t v4 = 0;
    }
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2);
    *((void *)&self->_tableFlags + 3) = v3 & 0xFFFFDFFFFFFFFFFFLL | v4;
    [(UITableView *)self _setNeedsRebuildGeometry];
  }
}

- (BOOL)_useLegacySectionHeaderFooterPinningBehavior
{
  return (*((unsigned __int8 *)&self->_tableFlags + 29) >> 5) & 1;
}

uint64_t __53__UITableView__configureCellForDisplay_forIndexPath___block_invoke_2(uint64_t a1)
{
  return [*(id *)(a1 + 40) _setSeparatorBackdropOverlayBlendMode:(*(void *)(*(void *)(a1 + 32) + 3088) >> 50) & 7];
}

- (void)_updateDropStateForVisibleCellsForActiveDrop:(BOOL)a3 dropTargetIndexPath:(id)a4
{
  BOOL v4 = a3;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  id v7 = (void *)[(NSMutableArray *)self->_highlightedIndexPaths copy];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        if (*(void *)v28 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v27 + 1) + 8 * i);
        if (!self->_highlightedSpringLoadedIndexPath
          || (objc_msgSend(*(id *)(*((void *)&v27 + 1) + 8 * i), "isEqual:") & 1) == 0)
        {
          [(UITableView *)self unhighlightRowAtIndexPath:v13 animated:0];
        }
      }
      uint64_t v10 = [v8 countByEnumeratingWithState:&v27 objects:v32 count:16];
    }
    while (v10);
  }

  if (dyld_program_sdk_at_least())
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v14 = self->_visibleCells;
    uint64_t v15 = [(NSMutableArray *)v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v24;
      do
      {
        for (uint64_t j = 0; j != v16; ++j)
        {
          if (*(void *)v24 != v17) {
            objc_enumerationMutation(v14);
          }
          double v19 = *(void **)(*((void *)&v23 + 1) + 8 * j);
          if (v4)
          {
            uint64_t v20 = [(UITableView *)self _indexPathForCell:*(void *)(*((void *)&v23 + 1) + 8 * j) usingPresentationValues:1];
            CGRect v21 = v20;
            if (v6 && ([v20 isEqual:v6] & 1) != 0) {
              uint64_t v22 = 2;
            }
            else {
              uint64_t v22 = 1;
            }
            objc_msgSend(v19, "_setDropState:", v22, (void)v23);
          }
          else
          {
            objc_msgSend(*(id *)(*((void *)&v23 + 1) + 8 * j), "_setDropState:", 0, (void)v23);
          }
        }
        uint64_t v16 = [(NSMutableArray *)v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
      }
      while (v16);
    }
  }
  else if (v6 && v4)
  {
    [(UITableView *)self _highlightRowAtIndexPath:v6 animated:0 scrollPosition:0 usingPresentationValues:1];
  }
}

- (void)_setPinsTableHeaderView:(BOOL)a3
{
  uint64_t v3 = *((void *)&self->_tableFlags + 2);
  unint64_t v4 = v3 & 0xFFFFFFFF7FFFFFFFLL;
  unint64_t v5 = v3 & 0xFFFFFFFF0FFFFFFFLL | 0x80000000;
  if (!a3) {
    unint64_t v5 = v4;
  }
  *((void *)&self->_tableFlags + 2) = v5;
  [(UITableView *)self _updatePinnedTableHeader];
}

- (BOOL)_pinsTableHeaderView
{
  return *((unsigned __int8 *)&self->_tableFlags + 19) >> 7;
}

- (BOOL)_delegateImplementsEstimatedHeightForRowAtIndexPath
{
  return (*((unsigned __int8 *)&self->_tableFlags + 4) >> 5) & 1;
}

- (BOOL)_delegateImplementsEstimatedHeightForSectionHeader
{
  return (*((unsigned __int8 *)&self->_tableFlags + 4) >> 6) & 1;
}

- (BOOL)_delegateImplementsEstimatedHeightForSectionFooter
{
  return *((unsigned __int8 *)&self->_tableFlags + 4) >> 7;
}

- (void)_selectRowsAtIndexPaths:(id)a3 animated:(BOOL)a4 scrollPosition:(int64_t)a5 notifyDelegate:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v8 = a4;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v10 = a3;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v16;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v16 != v13) {
          objc_enumerationMutation(v10);
        }
        [(UITableView *)self _selectRowAtIndexPath:*(void *)(*((void *)&v15 + 1) + 8 * v14++) animated:v8 scrollPosition:a5 notifyDelegate:v6];
      }
      while (v12 != v14);
      uint64_t v12 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v12);
  }
}

- (void)_deselectRowsAtIndexPaths:(id)a3 animated:(BOOL)a4 notifyDelegate:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v14;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v14 != v11) {
          objc_enumerationMutation(v8);
        }
        [(UITableView *)self _deselectRowAtIndexPath:*(void *)(*((void *)&v13 + 1) + 8 * v12++) animated:v6 notifyDelegate:v5];
      }
      while (v10 != v12);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v10);
  }
}

void __72__UITableView__deselectRowsAtIndexPaths_animated_transitionCoordinator___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 32);
  id v3 = (id)[v2[291] copy];
  [v2 _deselectRowsAtIndexPaths:v3 animated:*(unsigned __int8 *)(a1 + 40) notifyDelegate:0];
}

void __72__UITableView__deselectRowsAtIndexPaths_animated_transitionCoordinator___block_invoke_2(uint64_t a1, void *a2)
{
  if ([a2 isCancelled])
  {
    id v3 = *(id **)(a1 + 32);
    unint64_t v4 = (void *)[v3[291] copy];
    [v3 _selectRowsAtIndexPaths:v4 animated:0 scrollPosition:0 notifyDelegate:0];
  }
  uint64_t v5 = *(void *)(a1 + 32);
  BOOL v6 = *(void **)(v5 + 2328);
  *(void *)(v5 + 2328) = 0;
}

- (void)_wheelChangedWithEvent:(id)a3
{
  id v4 = a3;
  [v4 _wheelVelocity];
  double v6 = v5;
  if ([(UITableView *)self _shouldShowIndexOverlays]
    && [(UIView *)self _isFocusedOrAncestorOfFocusedView]
    && fabs(v6) >= 20.0
    && (*((unsigned char *)&self->_tableFlags + 23) & 1) == 0)
  {
    [(UITableView *)self _recomputeSectionIndexTitleIndex];
    [(UITableView *)self _transitionIndexOverlayToVisible:1 shouldFadeBackToInvisible:1];
    [(UITableView *)self _startIndexOverlayIndicatorIgnoreTimer];
  }
  else
  {
    if (*((unsigned char *)&self->_tableFlags + 23))
    {
      if ([(UITableView *)self _shouldShowIndexOverlays]) {
        [(UITableView *)self _prolongIndexOverlayTimer];
      }
      else {
        [(UITableView *)self _hideIndexOverlay];
      }
    }
    v7.receiver = self;
    v7.super_class = (Class)UITableView;
    [(UIResponder *)&v7 _wheelChangedWithEvent:v4];
  }
}

- (void)_moveWithEvent:(id)a3
{
  id v4 = a3;
  if ([(UITableView *)self maximumGlobalRowIndex] >= 1
    && (uint64_t v5 = *((void *)&self->_tableFlags + 2), (v5 & 0x100000000000000) != 0))
  {
    if ((v5 & 0x1000000000000000) == 0)
    {
      if ([v4 _moveDirection] == 1) {
        uint64_t v6 = 1;
      }
      else {
        uint64_t v6 = -1;
      }
      if ([v4 _focusHeading] == 32 || objc_msgSend(v4, "_focusHeading") == 16) {
        *((void *)&self->_tableFlags + 3) |= 0x10000uLL;
      }
      [(UITableView *)self _shiftSectionIndexTitleIndexByAmount:v6];
    }
  }
  else
  {
    v7.receiver = self;
    v7.super_class = (Class)UITableView;
    [(UIResponder *)&v7 _moveWithEvent:v4];
  }
}

- (void)_unhighlightAllRowsAndHighlightGlobalRow:(int64_t)a3
{
  uint64_t v5 = [MEMORY[0x1E4F28D58] indexPathForRow:0x7FFFFFFFFFFFFFFFLL inSection:0x7FFFFFFFFFFFFFFFLL];
  [(UITableView *)self _highlightRowAtIndexPath:v5 animated:0 scrollPosition:0 usingPresentationValues:1];

  id v6 = [(UITableView *)self indexPathForRowAtGlobalRow:a3];
  [(UITableView *)self _highlightRowAtIndexPath:v6 animated:0 scrollPosition:0 usingPresentationValues:1];
  [(UITableView *)self _updateFocusedItemToIndexPath:v6];
}

- (void)_requestAppropriateFocusUpdate
{
  p_uint64_t tableFlags = &self->_tableFlags;
  if (*((unsigned char *)&self->_tableFlags + 26))
  {
    [(UIView *)self _setNeedsNonDeferredFocusUpdate];
    *((void *)p_tableFlags + 3) &= ~0x10000uLL;
  }
  else
  {
    [(UIView *)self setNeedsFocusUpdate];
  }
}

- (void)_updateFocusedItemToIndexPath:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    id v19 = v4;
    uint64_t v5 = [(UIView *)self traitCollection];
    uint64_t v6 = [v5 userInterfaceIdiom];

    id v4 = v19;
    if (v6 == 3)
    {
      id v7 = v19;
      if ([v7 row] == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v8 = objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", 0, objc_msgSend(v7, "section"));

        id v7 = (id)v8;
      }
      uint64_t v9 = [(UITableView *)self _focusedCellIndexPath];
      int v10 = [v9 isEqual:v7];

      if (v10)
      {
        uint64_t v11 = +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:self];
        uint64_t v12 = [v11 scrollManager];
        long long v13 = [(UIScrollView *)self _focusTuple];
        long long v14 = [(UITableView *)self _focusedCell];
        [(UIScrollView *)self contentOffset];
        objc_msgSend(v12, "contentOffsetForEnvironmentScrollableContainer:toShowFocusItem:targetOffset:", v13, v14);
        double v16 = v15;
        double v18 = v17;

        -[UIScrollView setContentOffset:animated:](self, "setContentOffset:animated:", 0, v16, v18);
      }
      else
      {
        [(UITableView *)self _setIndexPathToFocus:v7];
        [(UITableView *)self _requestAppropriateFocusUpdate];
      }

      id v4 = v19;
    }
  }
}

- (id)_updateIndexOverlayToShowTitleAtIndex:(int64_t)a3
{
  uint64_t v5 = [(UITableView *)self _dataSourceSectionIndexTitles];
  uint64_t v6 = v5;
  if (a3 < 0 || [v5 count] <= (unint64_t)a3)
  {
    id v7 = 0;
  }
  else
  {
    id v7 = [v6 objectAtIndex:a3];
    [(_UICollectionTableIndexOverlayIndicatorView *)self->_indexOverlayIndicatorView setCurrentText:v7];
  }

  return v7;
}

- (void)_moveSectionIndexTitleIndexToIndex:(int64_t)a3 highlight:(BOOL)a4
{
  if ((a3 & 0x8000000000000000) == 0)
  {
    BOOL v4 = a4;
    id v7 = -[UITableView _updateIndexOverlayToShowTitleAtIndex:](self, "_updateIndexOverlayToShowTitleAtIndex:");
    if (v7)
    {
      uint64_t v11 = v7;
      int64_t v8 = [(UITableView *)self _sectionIndexChangedToIndex:a3 title:v7];
      uint64_t v9 = [MEMORY[0x1E4F28D58] indexPathForRow:0 inSection:v8];
      self->_currentIndexTitleIndedouble x = a3;
      if (v4)
      {
        int64_t v10 = [(UITableView *)self globalRowForRowAtIndexPath:v9];
        if (v10 != 0x7FFFFFFFFFFFFFFFLL) {
          [(UITableView *)self _unhighlightAllRowsAndHighlightGlobalRow:v10];
        }
      }

      id v7 = v11;
    }
  }
}

- (void)_shiftSectionIndexTitleIndexByAmount:(int64_t)a3
{
  [(UITableView *)self _moveSectionIndexTitleIndexToIndex:[(UITableView *)self _currentSectionIndexTitleIndex] + a3 highlight:1];
  [(UITableView *)self _prolongIndexOverlayTimer];
}

- (BOOL)_shouldConsumePressEvent:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(UIView *)self traitCollection];
  if ([v5 userInterfaceIdiom] != 3)
  {

    goto LABEL_6;
  }
  upArrowLongPressGestureRecognizer = self->_upArrowLongPressGestureRecognizer;

  if (!upArrowLongPressGestureRecognizer)
  {
LABEL_6:
    char v11 = 0;
    goto LABEL_12;
  }
  if (_UIPressesContainsPressType(v4, 0))
  {
    id v7 = [(UITableView *)self _visibleCellsUsingPresentationValues:1];
    int64_t v8 = [(UITableView *)self indexPathForRowAtGlobalRow:0];
    uint64_t v9 = [(UITableView *)self _cellForRowAtIndexPath:v8 usingPresentationValues:1];
    int v10 = [v7 containsObject:v9] ^ 1;
  }
  else
  {
    LOBYTE(v10) = 0;
  }
  if (_UIPressesContainsPressType(v4, 1))
  {
    uint64_t v12 = [(UITableView *)self _visibleCellsUsingPresentationValues:1];
    long long v13 = [(UITableView *)self indexPathForRowAtGlobalRow:[(UITableView *)self _lastGlobalRowIndex]];
    long long v14 = [(UITableView *)self _cellForRowAtIndexPath:v13 usingPresentationValues:1];
    int v15 = [v12 containsObject:v14] ^ 1;
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  char v11 = v10 | v15;
LABEL_12:

  return v11;
}

- (void)pressesBegan:(id)a3 withEvent:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (![(UITableView *)self _shouldConsumePressEvent:v6])
  {
    v8.receiver = self;
    v8.super_class = (Class)UITableView;
    [(UIScrollView *)&v8 pressesBegan:v6 withEvent:v7];
  }
}

- (void)pressesChanged:(id)a3 withEvent:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (![(UITableView *)self _shouldConsumePressEvent:v6])
  {
    v8.receiver = self;
    v8.super_class = (Class)UITableView;
    [(UIScrollView *)&v8 pressesChanged:v6 withEvent:v7];
  }
}

- (void)pressesEnded:(id)a3 withEvent:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (![(UITableView *)self _shouldConsumePressEvent:v6])
  {
    v8.receiver = self;
    v8.super_class = (Class)UITableView;
    [(UIScrollView *)&v8 pressesEnded:v6 withEvent:v7];
  }
}

- (void)pressesCancelled:(id)a3 withEvent:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (![(UITableView *)self _shouldConsumePressEvent:v6])
  {
    v8.receiver = self;
    v8.super_class = (Class)UITableView;
    [(UIScrollView *)&v8 pressesCancelled:v6 withEvent:v7];
  }
}

- (BOOL)_selectionInteractionShouldBegin:(id)a3
{
  id v4 = _focusedCellForSelectionInteraction(self);
  if (v4)
  {
    uint64_t v5 = [(UITableView *)self _indexPathForCell:v4 usingPresentationValues:1];
    if ([(UITableView *)self _allowsEffectiveSelectionOrCustomActionAtIndexPath:v5])
    {
      BOOL v6 = [(UITableView *)self _delegateAllowsHighlightingItemAtIndexPath:v5];
    }
    else
    {
      BOOL v6 = 0;
    }
  }
  else
  {
    BOOL v6 = 0;
  }

  return v6;
}

- (void)_selectionInteractionDidBeginHinting:(id)a3
{
  id v4 = _focusedCellForSelectionInteraction(self);
  if (v4)
  {
    uint64_t v5 = v4;
    [(UITableView *)self _highlightCell:v4 animated:0 scrollPosition:0 highlight:1];
    id v4 = v5;
  }
}

- (void)_selectionInteractionDidCancelHinting:(id)a3
{
  id v4 = _focusedCellForSelectionInteraction(self);
  if (v4)
  {
    uint64_t v5 = v4;
    [(UITableView *)self _highlightCell:v4 animated:0 scrollPosition:0 highlight:0];
    id v4 = v5;
  }
}

- (void)_selectionInteractionDidSelect:(id)a3
{
  int64_t v4 = [(UITableView *)self highlightedGlobalRow];
  if (v4 < 0)
  {
    uint64_t v5 = _focusedCellForSelectionInteraction(self);
    if (v5)
    {
      id v7 = v5;
      [(UITableView *)self _userSelectCell:v5];
      uint64_t v5 = v7;
    }
  }
  else if (*((unsigned char *)&self->_tableFlags + 23))
  {
    [(UITableView *)self _transitionIndexOverlayToVisible:0 shouldFadeBackToInvisible:1];
  }
  else
  {
    id v6 = [(UITableView *)self indexPathForRowAtGlobalRow:v4];
    [(UITableView *)self _userSelectRowAtPendingSelectionIndexPath:v6];
  }
}

- (int64_t)highlightedGlobalRow
{
  if (![(NSMutableArray *)self->_highlightedIndexPaths count]) {
    return -1;
  }
  id v3 = [(NSMutableArray *)self->_highlightedIndexPaths objectAtIndex:0];
  int64_t v4 = [(UITableView *)self globalRowForRowAtIndexPath:v3];

  return v4;
}

- (CGRect)_boundsForIndexOverlay
{
  uint64_t v2 = [(UIView *)self window];
  [v2 bounds];
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;

  double v11 = v4;
  double v12 = v6;
  double v13 = v8;
  double v14 = v10;
  result.size.double height = v14;
  result.size.CGFloat width = v13;
  result.origin.double y = v12;
  result.origin.double x = v11;
  return result;
}

- (BOOL)_shouldShowIndexOverlays
{
  if ([(UITableView *)self _dataSourceHasSectionIndexTitlesForTableView])
  {
    double v3 = [(UITableView *)self _dataSourceSectionIndexTitles];
    BOOL v4 = [v3 count] == 0;
  }
  else
  {
    BOOL v4 = 1;
  }
  uint64_t tableFlags = (uint64_t)self->_tableFlags;
  double v6 = [(UIView *)self traitCollection];
  BOOL v7 = 0;
  if ([v6 userInterfaceIdiom] == 3 && (tableFlags & 0x10200) != 0 && !v4)
  {
    if ([(UIView *)self isUserInteractionEnabled]) {
      BOOL v7 = (uint64_t)-[UITableViewRowData numberOfRows]((uint64_t)self->_rowData) >= self->_sectionIndexMinimumDisplayRowCount;
    }
    else {
      BOOL v7 = 0;
    }
  }

  return v7;
}

- (int64_t)_currentSectionIndexTitleIndex
{
  currentIndexTitleIndedouble x = self->_currentIndexTitleIndex;
  if (currentIndexTitleIndex != -1)
  {
    BOOL v4 = [(UITableView *)self _dataSourceSectionIndexTitles];
    unint64_t v5 = [v4 count];

    if (currentIndexTitleIndex < v5) {
      return self->_currentIndexTitleIndex;
    }
  }
  [(UITableView *)self _visibleBounds];
  uint64_t v7 = -[UITableView _visibleGlobalRowsInRect:](self, "_visibleGlobalRowsInRect:");
  if (!v8) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  double v9 = [(UITableView *)self indexPathForRowAtGlobalRow:v7];
  uint64_t v10 = [v9 section];

  double v11 = [(UITableView *)self _dataSourceSectionIndexTitles];
  if (![v11 count]) {
    goto LABEL_14;
  }
  int64_t v6 = 0;
  while (1)
  {
    double v12 = [v11 objectAtIndex:v6];
    uint64_t v13 = v6;
    if ((*((unsigned char *)&self->_tableFlags + 1) & 2) != 0)
    {
      double v14 = [(UITableView *)self _dataSourceProxy];
      uint64_t v13 = [v14 tableView:self sectionForSectionIndexTitle:v12 atIndex:v6];
    }
    if (v13 == v10) {
      break;
    }
    if (++v6 >= (unint64_t)[v11 count]) {
      goto LABEL_14;
    }
  }
  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_14:
    if ([v11 count]) {
      int64_t v6 = 0;
    }
    else {
      int64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
  }

  return v6;
}

- (void)_recomputeSectionIndexTitleIndex
{
  self->_currentIndexTitleIndedouble x = -1;
  int64_t v3 = [(UITableView *)self _currentSectionIndexTitleIndex];
  self->_currentIndexTitleIndedouble x = v3;
  id v4 = [(UITableView *)self _updateIndexOverlayToShowTitleAtIndex:v3];
}

- (void)_configureIndexOverlayIndicatorViewIfNecessary
{
  indexOverlayIndicatorView = self->_indexOverlayIndicatorView;
  if (!indexOverlayIndicatorView)
  {
    id v4 = [[_UICollectionTableIndexOverlayIndicatorView alloc] initWithHost:self];
    unint64_t v5 = self->_indexOverlayIndicatorView;
    self->_indexOverlayIndicatorView = v4;

    indexOverlayIndicatorView = self->_indexOverlayIndicatorView;
  }
  [(UITableView *)self _boundsForIndexOverlay];
  -[UIView setFrame:](indexOverlayIndicatorView, "setFrame:");
  [(UIView *)self->_indexOverlayIndicatorView setAlpha:0.0];
  [(UIView *)self->_indexOverlayIndicatorView setAutoresizingMask:18];
  id v6 = [(UIView *)self window];
  [v6 addSubview:self->_indexOverlayIndicatorView];
}

- (void)_transitionIndexOverlayToVisible:(BOOL)a3 shouldFadeBackToInvisible:(BOOL)a4
{
  BOOL v4 = a4;
  BOOL v5 = a3;
  p_uint64_t tableFlags = &self->_tableFlags;
  if (((((*((unsigned char *)&self->_tableFlags + 23) & 1) == 0) ^ a3) & 1) == 0)
  {
    double v8 = 0.15;
    if (!a3) {
      double v8 = 0.25;
    }
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __74__UITableView__transitionIndexOverlayToVisible_shouldFadeBackToInvisible___block_invoke;
    v11[3] = &unk_1E52D9FC0;
    v11[4] = self;
    BOOL v12 = a3;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = __74__UITableView__transitionIndexOverlayToVisible_shouldFadeBackToInvisible___block_invoke_2;
    v9[3] = &unk_1E52E0478;
    BOOL v10 = a3;
    void v9[4] = self;
    +[UIView animateWithDuration:2 delay:v11 options:v9 animations:v8 completion:0.0];
    if (v5) {
      *((void *)p_tableFlags + 2) |= 0x100000000000000uLL;
    }
  }
  [(UITableView *)self _stopIndexOverlayTimer];
  if (v5 && v4) {
    [(UITableView *)self _startIndexOverlayTimerWithDelay:2.0];
  }
}

uint64_t __74__UITableView__transitionIndexOverlayToVisible_shouldFadeBackToInvisible___block_invoke(uint64_t a1)
{
  double v1 = 1.0;
  if (!*(unsigned char *)(a1 + 40)) {
    double v1 = 0.0;
  }
  return [*(id *)(*(void *)(a1 + 32) + 2472) setAlpha:v1];
}

uint64_t __74__UITableView__transitionIndexOverlayToVisible_shouldFadeBackToInvisible___block_invoke_2(uint64_t result)
{
  if (!*(unsigned char *)(result + 40)) {
    *(void *)(*(void *)(result + 32) + 3088) &= ~0x100000000000000uLL;
  }
  return result;
}

- (void)_hideIndexOverlay:(id)a3
{
  [(UITableView *)self _stopIndexOverlayTimer];
  [(UITableView *)self _transitionIndexOverlayToVisible:0 shouldFadeBackToInvisible:1];
}

- (void)_hideIndexOverlay
{
}

- (void)_startIndexOverlayTimerWithDelay:(double)a3
{
  BOOL v4 = [MEMORY[0x1E4F1CB00] scheduledTimerWithTimeInterval:self target:sel__hideIndexOverlay_ selector:0 userInfo:0 repeats:a3];
  indexOverlayTimer = self->_indexOverlayTimer;
  self->_indexOverlayTimer = v4;
}

- (void)_stopIndexOverlayTimer
{
  [(NSTimer *)self->_indexOverlayTimer invalidate];
  indexOverlayTimer = self->_indexOverlayTimer;
  self->_indexOverlayTimer = 0;
}

- (void)_prolongIndexOverlayTimer
{
  if (self->_indexOverlayTimer)
  {
    [(UITableView *)self _stopIndexOverlayTimer];
    [(UITableView *)self _startIndexOverlayTimerWithDelay:2.0];
  }
}

- (void)_startIndexOverlayIndicatorIgnoreTimer
{
  [(UITableView *)self _stopIgnoringWheelEventsOnIndexOverlayIndicator:0];
  *((void *)&self->_tableFlags + 2) |= 0x1000000000000000uLL;
  int64_t v3 = (void *)MEMORY[0x1E4F1CB00];
  [(UITableView *)self _timeToIgnoreWheelEventsOnIndexOverlayIndicator];
  objc_msgSend(v3, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", self, sel__stopIgnoringWheelEventsOnIndexOverlayIndicator_, 0, 0);
  BOOL v4 = (NSTimer *)objc_claimAutoreleasedReturnValue();
  indexOverlayIndicatorEventIgnoreTimer = self->_indexOverlayIndicatorEventIgnoreTimer;
  self->_indexOverlayIndicatorEventIgnoreTimer = v4;
}

- (void)_stopIgnoringWheelEventsOnIndexOverlayIndicator:(id)a3
{
  *((void *)&self->_tableFlags + 2) &= ~0x1000000000000000uLL;
  [(NSTimer *)self->_indexOverlayIndicatorEventIgnoreTimer invalidate];
  indexOverlayIndicatorEventIgnoreTimer = self->_indexOverlayIndicatorEventIgnoreTimer;
  self->_indexOverlayIndicatorEventIgnoreTimer = 0;
}

- (BOOL)_shouldHaveIndexOverlaySelectionView
{
  int64_t v3 = [(UIView *)self traitCollection];
  if ([v3 userInterfaceIdiom] == 3)
  {
    BOOL v4 = [(UIView *)self window];
    BOOL v5 = [v4 _screen];
    id v6 = [v5 _capabilityForKey:@"UIScreenCapabilityTouchLevelsKey"];
    BOOL v7 = [v6 integerValue] != 2;
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

- (void)_configureIndexOverlaySelectionViewIfNecessary
{
  if ([(UITableView *)self _shouldHaveIndexOverlaySelectionView])
  {
    indexOverlaySelectionView = self->_indexOverlaySelectionView;
    if (!indexOverlaySelectionView)
    {
      BOOL v4 = [[_UICollectionTableIndexOverlaySelectionView alloc] initWithHost:self];
      BOOL v5 = self->_indexOverlaySelectionView;
      self->_indexOverlaySelectionView = v4;

      indexOverlaySelectionView = self->_indexOverlaySelectionView;
    }
    [(UITableView *)self _boundsForIndexOverlay];
    -[UIView setFrame:](indexOverlaySelectionView, "setFrame:");
    [(UIView *)self->_indexOverlaySelectionView setAutoresizingMask:18];
    [(UIView *)self->_indexOverlaySelectionView setAlpha:0.0];
    id v6 = [(UIView *)self window];
    [v6 addSubview:self->_indexOverlaySelectionView];
  }
}

- (void)_transitionIndexOverlaySelectionViewToVisible:(BOOL)a3
{
  p_uint64_t tableFlags = &self->_tableFlags;
  if (((((*((unsigned char *)&self->_tableFlags + 23) & 2) == 0) ^ a3) & 1) == 0)
  {
    BOOL v4 = a3;
    double v6 = 0.15;
    if (!a3) {
      double v6 = 0.25;
    }
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __61__UITableView__transitionIndexOverlaySelectionViewToVisible___block_invoke;
    v10[3] = &unk_1E52D9FC0;
    void v10[4] = self;
    BOOL v11 = a3;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = __61__UITableView__transitionIndexOverlaySelectionViewToVisible___block_invoke_2;
    v8[3] = &unk_1E52E0478;
    BOOL v9 = a3;
    v8[4] = self;
    +[UIView animateWithDuration:2 delay:v10 options:v8 animations:v6 completion:0.0];
    if (v4)
    {
      *((void *)p_tableFlags + 2) |= 0x200000000000000uLL;
      indexOverlaySelectionView = self->_indexOverlaySelectionView;
    }
    else
    {
      indexOverlaySelectionView = 0;
    }
    if (__UIAccessibilityBroadcastCallback) {
      __UIAccessibilityBroadcastCallback(1000, indexOverlaySelectionView);
    }
  }
}

uint64_t __61__UITableView__transitionIndexOverlaySelectionViewToVisible___block_invoke(uint64_t a1)
{
  double v1 = 1.0;
  if (!*(unsigned char *)(a1 + 40)) {
    double v1 = 0.0;
  }
  return [*(id *)(*(void *)(a1 + 32) + 2504) setAlpha:v1];
}

uint64_t __61__UITableView__transitionIndexOverlaySelectionViewToVisible___block_invoke_2(uint64_t result)
{
  if (!*(unsigned char *)(result + 40)) {
    *(void *)(*(void *)(result + 32) + 3088) &= ~0x200000000000000uLL;
  }
  return result;
}

- (double)_externalIndexWidth
{
  return 32.0;
}

- (double)_timeToIgnoreWheelEventsOnIndexOverlayIndicator
{
  return 0.5;
}

- (void)_upArrowLongPress:(id)a3
{
  if ([a3 state] == 1)
  {
    [(UITableView *)self _longPressNudgeScrollToRow:0 position:1];
  }
}

- (void)_downArrowLongPress:(id)a3
{
  if ([a3 state] == 1)
  {
    int64_t v4 = [(UITableView *)self _lastGlobalRowIndex];
    [(UITableView *)self _longPressNudgeScrollToRow:v4 position:3];
  }
}

- (void)_longPressNudgeScrollToRow:(int64_t)a3 position:(int64_t)a4
{
  BOOL v7 = [(UITableView *)self _focusedCell];

  if (v7)
  {
    double v8 = [(UITableView *)self indexPathForRowAtGlobalRow:a3];
    [(UITableView *)self _scrollToRowAtIndexPath:v8 atScrollPosition:a4 animated:0 usingPresentationValues:1];
    [(UITableView *)self _setIndexPathToFocus:v8];
  }
  [(UIView *)self _setNeedsNonDeferredFocusUpdate];
}

- (void)_upArrowTap:(id)a3
{
  [(UITableView *)self _updateVisibleCellsImmediatelyIfNecessary];
  if (self->_visibleRows.location) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = self->_visibleRows.length == 0;
  }
  if (v4)
  {
    [(UITableView *)self _handleNudgeInDirection:1];
  }
}

- (void)_downArrowTap:(id)a3
{
  [(UITableView *)self _updateVisibleCellsImmediatelyIfNecessary];
  unint64_t v4 = [(UITableView *)self _lastGlobalRowIndex];
  NSUInteger location = self->_visibleRows.location;
  BOOL v7 = v4 >= location;
  NSUInteger v6 = v4 - location;
  BOOL v7 = !v7 || v6 >= self->_visibleRows.length;
  if (v7)
  {
    [(UITableView *)self _handleNudgeInDirection:2];
  }
}

- (void)_handleNudgeInDirection:(int64_t)a3
{
  BOOL v5 = [(UITableView *)self _focusedCell];

  if (v5)
  {
    [(UITableView *)self _nudgeScroll:a3];
  }
  else
  {
    [(UIView *)self _setNeedsNonDeferredFocusUpdate];
  }
}

- (void)_nudgeScroll:(int64_t)a3
{
  BOOL v5 = [(UITableView *)self _indexPathToFocus];

  if (!v5)
  {
    if (a3 == 2) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = -1;
    }
    BOOL v7 = [(UITableView *)self _focusedCell];
    int focusedViewType = self->_focusedViewType;
    id v29 = v7;
    [v7 frameOrigin];
    double v10 = v9;
    double v12 = v11;
    [(UIView *)self bounds];
    double v14 = -[UITableView _nearestCellToPoint:expandingVisibleCells:](self, "_nearestCellToPoint:expandingVisibleCells:", 1, v10, v12 + v13 * (double)v6);
    [v14 frameOrigin];
    double v16 = v15;
    [v14 frameOrigin];
    double v18 = v17;
    [(UIScrollView *)self contentOffset];
    double v20 = v18 - (v12 - v19);
    CGRect v21 = +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:self];
    uint64_t v22 = [v21 scrollManager];
    long long v23 = [(UIScrollView *)self _focusTuple];
    objc_msgSend(v22, "contentOffsetForEnvironmentScrollableContainer:toShowFocusItem:targetOffset:", v23, v14, v16, v20);
    double v25 = v24;
    double v27 = v26;

    long long v28 = [(UITableView *)self _indexPathForCell:v14 usingPresentationValues:1];
    [(UITableView *)self _setIndexPathToFocus:v28];

    if (focusedViewType == 1) {
      [v29 setHighlighted:0 animated:1];
    }
    -[UIScrollView setContentOffset:animated:](self, "setContentOffset:animated:", 1, v25, v27);
  }
}

- (void)_scrollViewAnimationEnded:(id)a3 finished:(BOOL)a4
{
  BOOL v4 = a4;
  v11.receiver = self;
  v11.super_class = (Class)UITableView;
  -[UIScrollView _scrollViewAnimationEnded:finished:](&v11, sel__scrollViewAnimationEnded_finished_, a3);
  targetIndexPathForScrolling = self->_targetIndexPathForScrolling;
  self->_targetIndexPathForScrolling = 0;

  if (v4)
  {
    BOOL v7 = [(UITableView *)self _indexPathToFocus];

    if (v7)
    {
      double v8 = [(UIView *)self _focusSystem];
      double v9 = [v8 focusedItem];
      double v10 = _UIFocusEnvironmentContainingView(v9);

      if ([v10 isDescendantOfView:self]) {
        [(UIView *)self _setNeedsNonDeferredFocusUpdate];
      }
    }
  }
}

- (id)_contentFocusContainerGuide
{
  return self->_contentFocusContainerGuide;
}

- (void)setRemembersLastFocusedIndexPath:(BOOL)remembersLastFocusedIndexPath
{
  uint64_t v3 = 4096;
  if (!remembersLastFocusedIndexPath) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFEFFFLL | v3;
}

- (BOOL)remembersLastFocusedIndexPath
{
  return (*((unsigned __int8 *)&self->_tableFlags + 25) >> 4) & 1;
}

- (void)_setDefaultGradientMaskInsets
{
  [(UITableConstants *)self->_constants defaultMaskGradientHeightForTableView:self];
  double v4 = v3;
  [(UITableConstants *)self->_constants defaultFocusedShadowRadiusForTableView:self];
  [(UIScrollView *)self _setGradientMaskLengths:v4];
}

- (BOOL)canBecomeFocused
{
  double v3 = [(UIView *)self traitCollection];
  if ([v3 userInterfaceIdiom] != 3
    && [(UITableView *)self remembersLastFocusedIndexPath]
    && (rowData = self->_rowData) != 0
    && rowData->_numSections >= 1)
  {
    uint64_t v5 = (uint64_t)-[UITableViewRowData numberOfRows]((uint64_t)rowData);

    if (v5 < 1)
    {
      LOBYTE(v8) = 0;
      return v8;
    }
    uint64_t v6 = [(UIView *)self _focusSystem];
    double v3 = [v6 focusedItem];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      BOOL v7 = v3;
    }
    else {
      BOOL v7 = 0;
    }
    BOOL v8 = ![(UIView *)self containsView:v7];
  }
  else
  {
    LOBYTE(v8) = 0;
  }

  return v8;
}

- (id)keyCommands
{
  return [(_UITableViewMultiSelectController *)self->_multiSelectController keyCommandsForSelectionExtension];
}

- (id)targetForAction:(SEL)a3 withSender:(id)a4
{
  id v6 = a4;
  BOOL v7 = [(_UITableViewMultiSelectController *)self->_multiSelectController targetForKeyCommands];
  char v8 = objc_opt_respondsToSelector();

  if (v8)
  {
    uint64_t v9 = [(_UITableViewMultiSelectController *)self->_multiSelectController targetForKeyCommands];
  }
  else
  {
    v12.receiver = self;
    v12.super_class = (Class)UITableView;
    uint64_t v9 = [(UIResponder *)&v12 targetForAction:a3 withSender:v6];
  }
  double v10 = (void *)v9;

  return v10;
}

- (BOOL)_canFocusCell:(id)a3
{
  id v4 = a3;
  uint64_t v5 = [(UITableView *)self _indexPathForCell:v4 usingPresentationValues:1];
  id v6 = v5;
  if (v5
    && [v5 length] == 2
    && [v6 row] != 0x7FFFFFFFFFFFFFFFLL
    && [v6 section] != 0x7FFFFFFFFFFFFFFFLL
    && (*((unsigned char *)&self->_tableFlags + 29) & 0x80) == 0)
  {
    BOOL v7 = [(UITableView *)self _allowsEffectiveFocus];
    id WeakRetained = objc_loadWeakRetained(&self->super._delegate);
    if (!WeakRetained) {
      goto LABEL_9;
    }
    uint64_t v9 = *((void *)&self->_tableFlags + 1);
    if ((v9 & 0x8000000) != 0)
    {
      double v14 = [(UITableView *)self _delegateProxy];
      char v15 = [v14 _tableView:self canFocusRowAtIndexPath:v6];
    }
    else
    {
      if ((v9 & 0x10000000) == 0)
      {
LABEL_9:
        if (v7)
        {
          double v10 = [(UIView *)self _focusBehavior];
          uint64_t v11 = [v10 cellFocusability];

          BOOL v12 = v11 != 1
             || [(UITableView *)self _inferFocusabilityForCell:v4 atIndexPath:v6];
        }
        else
        {
          BOOL v12 = 0;
        }
        goto LABEL_19;
      }
      double v14 = [(UITableView *)self _delegateProxy];
      char v15 = [v14 tableView:self canFocusRowAtIndexPath:v6];
    }
    BOOL v12 = v15;

LABEL_19:
    goto LABEL_13;
  }
  BOOL v12 = 0;
LABEL_13:

  return v12;
}

- (void)_cellDidBecomeFocused:(id)a3
{
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained(&self->super._delegate);
  if (WeakRetained)
  {
    uint64_t v5 = *((void *)&self->_tableFlags + 1);

    if ((v5 & 0x20000000) != 0)
    {
      id v6 = [(UITableView *)self _indexPathForCell:v8 usingPresentationValues:1];
      BOOL v7 = [(UITableView *)self _delegateProxy];
      [v7 tableView:self didFocusRowAtIndexPath:v6];
    }
  }
}

- (void)_cellDidBecomeUnfocused:(id)a3
{
  id v8 = a3;
  id WeakRetained = objc_loadWeakRetained(&self->super._delegate);
  if (WeakRetained)
  {
    uint64_t v5 = *((void *)&self->_tableFlags + 1);

    if ((v5 & 0x40000000) != 0)
    {
      id v6 = [(UITableView *)self _indexPathForCell:v8 usingPresentationValues:1];
      BOOL v7 = [(UITableView *)self _delegateProxy];
      [v7 tableView:self didUnfocusRowAtIndexPath:v6];
    }
  }
}

- (int64_t)_cellFocusItemDeferral:(id)a3
{
  id v4 = a3;
  if (![(UITableView *)self _shouldBecomeFocusedOnSelection]) {
    goto LABEL_6;
  }
  if (![(UITableView *)self selectionFollowsFocus]) {
    goto LABEL_6;
  }
  uint64_t v5 = [(UITableView *)self _indexPathForCell:v4 usingPresentationValues:1];
  if (!v5) {
    goto LABEL_6;
  }
  id v6 = (void *)v5;
  BOOL v7 = [(UITableView *)self indexPathsForSelectedRows];
  char v8 = [v7 containsObject:v6];

  if (v8) {
    int64_t v9 = 2;
  }
  else {
LABEL_6:
  }
    int64_t v9 = 0;

  return v9;
}

- (BOOL)_shouldUpdateFocusInContext:(id)a3
{
  id v4 = a3;
  v14.receiver = self;
  v14.super_class = (Class)UITableView;
  unsigned __int8 v5 = [(UIScrollView *)&v14 _shouldUpdateFocusInContext:v4];
  id WeakRetained = objc_loadWeakRetained(&self->super._delegate);
  BOOL v7 = [(UITableView *)self _reorderingIndexPath];

  if (v7)
  {
    unsigned __int8 v5 = 0;
  }
  else if (WeakRetained)
  {
    uint64_t v8 = *((void *)&self->_tableFlags + 1);
    if ((v8 & 0x400000000) != 0)
    {
      int64_t v9 = +[UITableViewFocusUpdateContext _contextWithContext:v4 tableView:self];
      double v10 = [(UITableView *)self _delegateProxy];
      unsigned __int8 v5 = [v10 tableView:self shouldUpdateFocusInContext:v9];
    }
    else
    {
      if ((v8 & 0x100000000) == 0) {
        goto LABEL_9;
      }
      int64_t v9 = +[UITableViewFocusUpdateContext _contextWithContext:v4 tableView:self];
      double v10 = [(UITableView *)self _delegateProxy];
      uint64_t v11 = [v9 previouslyFocusedIndexPath];
      BOOL v12 = [v9 nextFocusedView];
      unsigned __int8 v5 = objc_msgSend(v10, "tableView:shouldUpdateFocusFromRowAtIndexPath:toView:heading:", self, v11, v12, objc_msgSend(v9, "focusHeading"));
    }
  }
LABEL_9:

  return v5;
}

- (id)_managedSubviewForView:(id)a3 viewType:(int *)a4 indexPath:(id *)a5
{
  uint64_t v8 = (UITableView *)a3;
  int64_t v9 = v8;
  if (self == v8 || ![(UIView *)v8 isDescendantOfView:self])
  {
    double v10 = 0;
  }
  else
  {
    double v10 = v9;
    if (v10)
    {
      while (1)
      {
        uint64_t v11 = [(UIView *)v10 superview];
        if (v11 == self) {
          break;
        }
        BOOL v12 = v11;
        double v13 = [(UIView *)v10 superview];
        wrapperView = self->_wrapperView;

        if (v13 == wrapperView) {
          goto LABEL_16;
        }
        char v15 = [(UIView *)v10 superview];

        double v10 = v15;
        if (!v15) {
          goto LABEL_10;
        }
      }

LABEL_16:
      if (v10 == self->_tableHeaderView)
      {
        double v17 = 0;
        int v16 = 4;
        goto LABEL_28;
      }
      if (v10 == self->_tableFooterView)
      {
        double v17 = 0;
        int v16 = 5;
        goto LABEL_28;
      }
      if ((*((unsigned char *)&self->_tableFlags + 28) & 1) == 0) {
        [(UITableView *)self _updateVisibleCellsImmediatelyIfNecessary];
      }
      if ([(UITableView *)self _visibleHeaderViewsContainsView:v10])
      {
        double v17 = objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, -[UITableView _sectionForHeaderView:](self, "_sectionForHeaderView:", v10));
        int v16 = 2;
        goto LABEL_28;
      }
      if ([(UITableView *)self _visibleFooterViewsContainsView:v10])
      {
        double v17 = objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, -[UITableView _sectionForFooterView:](self, "_sectionForFooterView:", v10));
        int v16 = 3;
        goto LABEL_28;
      }
      if (_IsKindOfUITableViewCell(v10))
      {
        int v16 = 1;
        double v17 = [(UITableView *)self _indexPathForCell:v10 usingPresentationValues:1];
LABEL_28:
        char v15 = v10;
        if (!a4) {
          goto LABEL_12;
        }
LABEL_11:
        *a4 = v16;
        goto LABEL_12;
      }
    }
  }
  char v15 = 0;
LABEL_10:
  int v16 = 0;
  double v17 = 0;
  if (a4) {
    goto LABEL_11;
  }
LABEL_12:
  if (a5) {
    *a5 = (id)[v17 copy];
  }
  double v18 = v15;

  return v18;
}

- (BOOL)_shouldSelectionFollowFocusForIndexPath:(id)a3 initiatedBySelection:(BOOL)a4
{
  BOOL v4 = a4;
  id v7 = a3;
  if (!v7)
  {
    double v18 = [MEMORY[0x1E4F28B00] currentHandler];
    [v18 handleFailureInMethod:a2, self, @"UITableView.m", 13392, @"Invalid parameter not satisfying: %@", @"indexPath != nil" object file lineNumber description];
  }
  if (_AXSFullKeyboardAccessEnabled()) {
    goto LABEL_4;
  }
  if (dyld_program_sdk_at_least())
  {
    if (v4)
    {
      if ([(_UITableViewMultiSelectController *)self->_multiSelectController isInMultiselectInteraction])
      {
        uint64_t v10 = [(UITableView *)self _focusedCellIndexPath];
        if (v10)
        {
          uint64_t v11 = (void *)v10;
          BOOL v12 = [(UITableView *)self indexPathsForSelectedRows];
          char v13 = [v12 containsObject:v11];

          if (v13) {
            goto LABEL_4;
          }
        }
      }
    }
  }
  if (v4)
  {
    char v8 = [(UITableView *)self selectionFollowsFocus];
    goto LABEL_5;
  }
  objc_super v14 = [(UITableView *)self _cellForRowAtIndexPath:v7 usingPresentationValues:1];
  char v15 = v14;
  if (v14 && [v14 _hasCustomSelectionAction])
  {

LABEL_4:
    char v8 = 0;
    goto LABEL_5;
  }

  BOOL v16 = [(UITableView *)self selectionFollowsFocus];
  char v8 = v16;
  if (v7 && v16)
  {
    if ((*((unsigned char *)&self->_tableFlags + 13) & 8) != 0)
    {
      double v17 = [(UITableView *)self _delegateProxy];
      char v8 = [v17 tableView:self selectionFollowsFocusForRowAtIndexPath:v7];
    }
    else
    {
      char v8 = 1;
    }
  }
LABEL_5:

  return v8;
}

- (void)_willUpdateFocusInContext:(id)a3
{
  BOOL v4 = [a3 nextFocusedItem];
  _UIFocusEnvironmentFirstCommonAncestor(v4, self);
  unsigned __int8 v5 = (UITableView *)objc_claimAutoreleasedReturnValue();
  BOOL v6 = v5 == self;

  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFFFFFBFFFFFLL | ((unint64_t)v6 << 22);
  [(UITableView *)self _updateSelectionIsKey];
}

- (void)_didUpdateFocusInContext:(id)a3
{
  id v4 = a3;
  v45.receiver = self;
  v45.super_class = (Class)UITableView;
  [(UIScrollView *)&v45 _didUpdateFocusInContext:v4];
  unsigned __int8 v5 = [(UITableView *)self _focusedCell];
  BOOL v6 = [(UITableView *)self _focusedCellIndexPath];
  id v7 = (void *)[v6 copy];

  p_uint64_t focusedViewType = &self->_focusedViewType;
  uint64_t focusedViewType = self->_focusedViewType;
  unsigned int v44 = 0;
  uint64_t v10 = [v4 previouslyFocusedView];
  id v43 = 0;
  uint64_t v11 = [(UITableView *)self _managedSubviewForView:v10 viewType:&v44 indexPath:&v43];
  id v41 = v43;

  if (v5 && focusedViewType == 1) {
    [(UITableView *)self _highlightCell:v5 animated:0 scrollPosition:0 highlight:0];
  }
  BOOL v12 = [v4 nextFocusedView];
  if (v12 == self)
  {
  }
  else
  {
    char v13 = v12;
    objc_super v14 = [v4 nextFocusedView];
    int v15 = [v14 isDescendantOfView:self];

    if (v15)
    {
      BOOL v16 = [v4 nextFocusedView];
      id v42 = 0;
      double v17 = [(UITableView *)self _managedSubviewForView:v16 viewType:&self->_focusedViewType indexPath:&v42];
      id v18 = v42;
      [(UITableView *)self _setFocusedCell:v17];

      if (!*p_focusedViewType) {
        [(UITableView *)self _setFocusedCellIndexPath:0];
      }
      if (v18) {
        [(UITableView *)self _setFocusedCellIndexPath:v18];
      }

      goto LABEL_15;
    }
  }
  [(UITableView *)self _setFocusedCell:0];
  if (![(UITableView *)self remembersLastFocusedIndexPath])
  {
    *p_uint64_t focusedViewType = 0;
    [(UITableView *)self _setFocusedCellIndexPath:0];
  }
  [(UITableView *)self _hideIndexOverlay];
LABEL_15:
  double v19 = [(UITableView *)self _focusedCellIndexPath];
  [(_UISelectionInteraction *)self->_selectionInteraction setEnabled:v19 != 0];

  [(UITableView *)self _reusePreviouslyFocusedTableViewSubviewIfNeeded:v5 viewType:focusedViewType indexPath:v7];
  if (v11 && v11 != v5) {
    [(UITableView *)self _reusePreviouslyFocusedTableViewSubviewIfNeeded:v11 viewType:v44 indexPath:v41];
  }
  if ((*((unsigned char *)&self->_tableFlags + 12) & 8) != 0)
  {
    double v20 = +[_UIFocusAnimationCoordinatorManager animationCoordinatorForContext:v4];
    if (!v20)
    {
      CGFloat v38 = [MEMORY[0x1E4F28B00] currentHandler];
      [v38 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:13527 description:@"Received call to _didUpdateFocusInContext: outside of a focus update."];
    }
    CGRect v21 = +[UITableViewFocusUpdateContext _contextWithContext:v4 tableView:self];
    uint64_t v22 = [(UITableView *)self _delegateProxy];
    [v22 tableView:self didUpdateFocusInContext:v21 withAnimationCoordinator:v20];
  }
  if (*p_focusedViewType == 1)
  {
    uint64_t v23 = [(UITableView *)self _focusedCell];
    if (v23)
    {
      double v24 = (void *)v23;
      double v25 = [(UITableView *)self _focusedCell];
      double v26 = [v4 nextFocusedItem];
      if (v25 != v26)
      {

LABEL_26:
        goto LABEL_27;
      }
      double v27 = [(UITableView *)self _focusedCellIndexPath];

      if (v27)
      {
        if (dyld_program_sdk_at_least())
        {
          if ((*((unsigned char *)&self->_tableFlags + 30) & 1) == 0)
          {
            uint64_t v28 = [v4 _focusMovement];
            if (v28)
            {
              id v29 = (void *)v28;
              BOOL v30 = [(UITableView *)self _delegateSupportsPrimaryAction];

              if (v30) {
                goto LABEL_34;
              }
            }
          }
        }
        CGFloat v31 = [(UITableView *)self indexPathsForSelectedRows];
        CGFloat v32 = [(UITableView *)self _focusedCellIndexPath];
        char v33 = [v31 containsObject:v32];

        if ((v33 & 1) == 0)
        {
LABEL_34:
          uint64_t v34 = [(UITableView *)self _focusedCellIndexPath];
          BOOL v35 = [(UITableView *)self _shouldSelectionFollowFocusForIndexPath:v34 initiatedBySelection:0];

          if (v35)
          {
            CGFloat v36 = [(UITableView *)self _focusedCellIndexPath];
            BOOL v37 = [(UITableView *)self _isRowMultiSelect:v36];

            double v24 = [(UITableView *)self _focusedCellIndexPath];
            LOBYTE(v39) = 0;
            [(UITableView *)self _selectRowAtIndexPath:v24 animated:0 scrollPosition:0 notifyDelegate:1 isCellMultiSelect:v37 deselectPrevious:1 performCustomSelectionAction:v39];
            goto LABEL_26;
          }
        }
      }
    }
  }
LABEL_27:
}

- (id)_systemDefaultFocusGroupIdentifier
{
  double v3 = [(UIView *)self _focusBehavior];
  char v4 = [v3 focusGroupContainmentBehavior];

  if ((v4 & 0x40) != 0)
  {
    BOOL v6 = _UIFocusGroupIdentifierOfAssociatedSearchTextFieldForView(self);
    id v7 = v6;
    if (v6)
    {
      id v8 = v6;
    }
    else
    {
      v11.receiver = self;
      v11.super_class = (Class)UITableView;
      id v8 = [(UIView *)&v11 _systemDefaultFocusGroupIdentifier];
    }
    unsigned __int8 v5 = v8;
  }
  else
  {
    v10.receiver = self;
    v10.super_class = (Class)UITableView;
    unsigned __int8 v5 = [(UIView *)&v10 _systemDefaultFocusGroupIdentifier];
  }
  return v5;
}

- (void)_reusePreviouslyFocusedTableViewSubviewIfNeeded:(id)a3 viewType:(int)a4 indexPath:(id)a5
{
  uint64_t v6 = *(void *)&a4;
  id v11 = a3;
  id v8 = a5;
  if (v11)
  {
    id v9 = [(UITableView *)self _focusedCell];
    if (v9 == v11)
    {
    }
    else
    {
      char v10 = [v11 _isHiddenForReuse];

      if ((v10 & 1) == 0
        && [(UITableView *)self _shouldReusePreviouslyFocusedTableViewSubview:v11 viewType:v6])
      {
        if (v6 == 1) {
          [(UITableView *)self _reuseTableViewCell:v11 withIndexPath:v8 didEndDisplaying:v8 != 0];
        }
        else {
          [(UITableView *)self _reuseHeaderFooterView:v11 isHeader:v6 == 2 forSection:0x7FFFFFFFFFFFFFFFLL];
        }
      }
    }
  }
}

- (BOOL)_shouldReusePreviouslyFocusedTableViewSubview:(id)a3 viewType:(int)a4
{
  id v6 = a3;
  switch(a4)
  {
    case 3:
      char v7 = [(UITableView *)self _visibleFooterViewsContainsView:v6];
      break;
    case 2:
      char v7 = [(UITableView *)self _visibleHeaderViewsContainsView:v6];
      break;
    case 1:
      char v7 = [(NSMutableArray *)self->_visibleCells containsObject:v6];
      break;
    default:
      char v8 = 0;
      goto LABEL_9;
  }
  char v8 = v7 ^ 1;
LABEL_9:

  return v8;
}

- (id)preferredFocusedView
{
  if (*((void *)&self->_tableFlags + 2) & 0x100 | *((void *)&self->_tableFlags + 3) & 0x100000000
    || (*((unsigned char *)&self->_tableFlags + 15) & 2) != 0
    || ![(NSMutableArray *)self->_visibleCells count])
  {
    goto LABEL_41;
  }
  double v3 = [(UITableView *)self indexPathsForSelectedRows];
  uint64_t v4 = [v3 count];

  if (!v4) {
    goto LABEL_6;
  }
  unsigned __int8 v5 = [(UITableView *)self indexPathsForSelectedRows];
  id v6 = [v5 firstObject];

  char v7 = [(UITableView *)self indexPathsForSelectedRows];
  char v8 = [v7 firstObject];
  id v9 = [(UITableView *)self cellForRowAtIndexPath:v8];

  if (!v9)
  {
LABEL_6:
    char v10 = [(UITableView *)self _indexPathToFocus];

    if (v10)
    {
      id v11 = [(UITableView *)self _indexPathToFocus];
      [(UITableView *)self _setIndexPathToFocus:0];
      unsigned int focusedViewType = 1;
      goto LABEL_8;
    }
    if (dyld_program_sdk_at_least())
    {
      if ([(UITableView *)self remembersLastFocusedIndexPath])
      {
        id v11 = [(UITableView *)self _focusedCellIndexPath];
        unsigned int focusedViewType = self->_focusedViewType;
      }
      else
      {
        unsigned int focusedViewType = 0;
        id v11 = 0;
      }
      objc_super v14 = [(UITableView *)self indexPathsForSelectedRows];
      char v13 = [v14 firstObject];

      if (v13)
      {
        if (!v11
          || [(UITableView *)self _shouldSelectionFollowFocusForIndexPath:v13 initiatedBySelection:1])
        {
          goto LABEL_21;
        }
      }
      else if (v11)
      {
        char v13 = 0;
      }
      else
      {
        uint64_t v27 = [(UITableView *)self _delegatePreferredIndexPath];
        if (v27)
        {
          id v11 = (void *)v27;
          id v15 = 0;
LABEL_22:

          if ([v11 row] != 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_27;
          }
          goto LABEL_23;
        }
        id v11 = [(UITableView *)self _focusedCellIndexPath];
        char v13 = 0;
        unsigned int focusedViewType = self->_focusedViewType;
      }
    }
    else
    {
      id v11 = [(UITableView *)self _focusedCellIndexPath];
      unsigned int focusedViewType = self->_focusedViewType;
      char v13 = [(UITableView *)self _delegatePreferredIndexPath];
      if (v13)
      {
LABEL_21:
        id v15 = v13;

        id v11 = v15;
        goto LABEL_22;
      }
    }

    if (focusedViewType > 1)
    {
LABEL_40:

LABEL_41:
      v28.receiver = self;
      v28.super_class = (Class)UITableView;
      id v9 = [(UIView *)&v28 preferredFocusedView];
      goto LABEL_42;
    }
LABEL_8:
    if (v11 && [v11 row] != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (!focusedViewType) {
        goto LABEL_40;
      }
LABEL_27:
      CGRect v21 = [(UITableView *)self _cellForRowAtIndexPath:v11 usingPresentationValues:1];
      id v9 = v21;
      if (v21)
      {
        char v22 = [v21 _isHiddenForReuse];
        if (!v11 || (v22 & 1) == 0) {
          goto LABEL_36;
        }
      }
      else if (!v11)
      {
LABEL_35:
        v29.receiver = self;
        v29.super_class = (Class)UITableView;
        id v9 = [(UIView *)&v29 preferredFocusedView];
LABEL_36:

        goto LABEL_42;
      }
      focusedCell = self->_focusedCell;
      if (focusedCell)
      {
        double v24 = focusedCell;
        [(UITableView *)self _setFocusedCell:0];
        [(UITableView *)self _reusePreviouslyFocusedTableViewSubviewIfNeeded:v24 viewType:self->_focusedViewType indexPath:self->_focusedCellIndexPath];
      }
      id v25 = [(UITableView *)self _createPreparedCellForRowAtIndexPath:v11 willDisplay:1];

      [(UITableView *)self _setFocusedCell:v25];
      [(UITableView *)self _setFocusedCellIndexPath:v11];
      self->_unsigned int focusedViewType = 1;
      id v9 = v25;
      if (v25) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
LABEL_23:
    BOOL v16 = [(UITableView *)self _indexPathsForVisibleRowsUsingPresentationValues:1];
    double v17 = [v16 firstObject];
    id v18 = v17;
    if (v17)
    {
      id v19 = v17;
    }
    else
    {
      id v19 = [(UITableView *)self indexPathForRowAtGlobalRow:0];
    }
    id v20 = v19;

    id v11 = v20;
    goto LABEL_27;
  }
LABEL_42:
  return v9;
}

- (id)_delegatePreferredIndexPath
{
  id WeakRetained = objc_loadWeakRetained(&self->super._delegate);
  if (!WeakRetained) {
    goto LABEL_4;
  }
  uint64_t v5 = *((void *)&self->_tableFlags + 1);
  if ((v5 & 0x200000000) != 0)
  {
    char v7 = [(UITableView *)self _delegateProxy];
    uint64_t v8 = [v7 indexPathForPreferredFocusedViewInTableView:self];
  }
  else
  {
    if ((v5 & 0x80000000) == 0)
    {
LABEL_4:
      id v6 = 0;
      goto LABEL_10;
    }
    char v7 = [(UITableView *)self _delegateProxy];
    uint64_t v8 = [v7 indexPathForPreferredFocusedItemForTableView:self];
  }
  id v6 = (void *)v8;

  if (v6 && ![(UITableView *)self _indexPathIsValid:v6])
  {
    id v9 = [MEMORY[0x1E4F28B00] currentHandler];
    [v9 handleFailureInMethod:a2, self, @"UITableView.m", 13715, @"no cell for index path (%@) - the table view's delegate must return an index path for a valid UITableViewCell from -indexPathForPreferredFocusedViewInTableView:", v6 object file lineNumber description];
  }
LABEL_10:

  return v6;
}

- (id)focusItemsInRect:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  if (_UIViewShouldReturnSubviewsInFocusItemsInRect())
  {
    v13.receiver = self;
    v13.super_class = (Class)UITableView;
    uint64_t v8 = -[UIView focusItemsInRect:](&v13, sel_focusItemsInRect_, x, y, width, height);
    id v9 = -[UITableView _focusPromiseRegionsInRect:](self, "_focusPromiseRegionsInRect:", x, y, width, height);
    char v10 = [v8 arrayByAddingObjectsFromArray:v9];
  }
  else
  {
    v12.receiver = self;
    v12.super_class = (Class)UITableView;
    char v10 = -[UIView focusItemsInRect:](&v12, sel_focusItemsInRect_, x, y, width, height);
  }
  return v10;
}

- (id)_focusPromiseRegionsInRect:(CGRect)a3
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = [MEMORY[0x1E4F1CA48] array];
  id v9 = -[UITableView _indexPathsForRowsInRect:usingPresentationValues:](self, "_indexPathsForRowsInRect:usingPresentationValues:", 1, x, y, width, height);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void *)(*((void *)&v19 + 1) + 8 * i);
        id v15 = [(UITableView *)self _cellForRowAtIndexPath:v14 usingPresentationValues:1];
        BOOL v16 = v15;
        if (!v15 || [v15 _isHiddenForReuse])
        {
          double v17 = objc_alloc_init(_UITableViewCellPromiseRegion);
          [(_UITableViewCellPromiseRegion *)v17 setTableView:self];
          [(_UITableViewCellPromiseRegion *)v17 setIndexPath:v14];
          [v8 addObject:v17];
        }
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v11);
  }

  return v8;
}

- (id)_childFocusRegionsInRect:(CGRect)a3 inCoordinateSpace:(id)a4
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  id v9 = a4;
  if (_UIViewShouldReturnSubviewsInFocusItemsInRect())
  {
    v35.receiver = self;
    v35.super_class = (Class)UITableView;
    uint64_t v10 = -[UIView _childFocusRegionsInRect:inCoordinateSpace:](&v35, sel__childFocusRegionsInRect_inCoordinateSpace_, v9, x, y, width, height);
  }
  else
  {
    uint64_t v11 = [(UITableView *)self _contentSubviews];
    uint64_t v12 = (void *)[v11 mutableCopy];

    -[UIView convertRect:fromCoordinateSpace:](self, "convertRect:fromCoordinateSpace:", v9, x, y, width, height);
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    CGFloat v20 = v19;
    long long v21 = -[UITableView _focusPromiseRegionsInRect:](self, "_focusPromiseRegionsInRect:");
    [v12 addObjectsFromArray:v21];

    tableHeaderView = self->_tableHeaderView;
    if (tableHeaderView)
    {
      [(UIView *)tableHeaderView frame];
      v39.origin.double x = v14;
      v39.origin.double y = v16;
      v39.size.double width = v18;
      v39.size.double height = v20;
      if (CGRectIntersectsRect(v37, v39)) {
        [v12 addObject:self->_tableHeaderView];
      }
    }
    tableFooterView = self->_tableFooterView;
    if (tableFooterView)
    {
      [(UIView *)tableFooterView frame];
      v40.origin.double x = v14;
      v40.origin.double y = v16;
      v40.size.double width = v18;
      v40.size.double height = v20;
      if (CGRectIntersectsRect(v38, v40)) {
        [v12 addObject:self->_tableFooterView];
      }
    }
    uint64_t v24 = [(UIView *)self traitCollection];
    uint64_t v25 = [v24 userInterfaceIdiom];

    if (v25 == 3 && ![(UIView *)self _isFocusedOrAncestorOfFocusedView])
    {
      id v26 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v29 = MEMORY[0x1E4F143A8];
      uint64_t v30 = 3221225472;
      CGFloat v31 = __58__UITableView__childFocusRegionsInRect_inCoordinateSpace___block_invoke;
      CGFloat v32 = &unk_1E52E7F78;
      char v33 = self;
      id v34 = v26;
      id v27 = v26;
      [v12 enumerateObjectsUsingBlock:&v29];
      objc_msgSend(v12, "removeObjectsInArray:", v27, v29, v30, v31, v32, v33);
    }
    uint64_t v10 = objc_msgSend(v12, "bs_map:", &__block_literal_global_1035_1);
  }
  return v10;
}

void __58__UITableView__childFocusRegionsInRect_inCoordinateSpace___block_invoke(uint64_t a1, void *a2)
{
  id v39 = a2;
  [*(id *)(a1 + 32) bounds];
  double v4 = v3;
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  [*(id *)(a1 + 32) _contentInset];
  double v12 = v4 + v11;
  double v14 = v6 + v13;
  double v16 = v8 - (v11 + v15);
  double v18 = v10 - (v13 + v17);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    double v19 = *(void **)(a1 + 32);
    id v20 = v39;
    [v20 frame];
    double v22 = v21;
    double v24 = v23;
    double v26 = v25;
    double v28 = v27;
    uint64_t v29 = [v20 superview];

    objc_msgSend(v19, "convertRect:fromView:", v29, v22, v24, v26, v28);
LABEL_5:
    CGFloat v35 = v30;
    CGFloat v36 = v31;
    CGFloat v37 = v32;
    CGFloat v38 = v33;

    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v34 = *(void **)(a1 + 32);
    uint64_t v29 = [v39 indexPath];
    [v34 _rectForRowAtIndexPath:v29 usingPresentationValues:1];
    goto LABEL_5;
  }
  CGFloat v35 = *MEMORY[0x1E4F1DB28];
  CGFloat v36 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
  CGFloat v37 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
  CGFloat v38 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
LABEL_7:
  v41.origin.double x = v12;
  v41.origin.double y = v14;
  v41.size.double width = v16;
  v41.size.double height = v18;
  CGRect v42 = CGRectInset(v41, -0.001, -0.001);
  v43.origin.double x = v35;
  v43.origin.double y = v36;
  v43.size.double width = v37;
  v43.size.double height = v38;
  if (!CGRectContainsRect(v42, v43)) {
    [*(id *)(a1 + 40) addObject:v39];
  }
}

id __58__UITableView__childFocusRegionsInRect_inCoordinateSpace___block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  double v3 = [v2 focusItemContainer];
  double v4 = _UIFocusRegionContainerFromEnvironmentAndContainer((uint64_t)v2, (uint64_t)v3);

  return v4;
}

- (id)_fulfillPromisedFocusRegionForCell:(id)a3
{
  id v4 = a3;
  [(UIView *)self bounds];
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  double v13 = [v4 indexPath];
  [(UITableView *)self _rectForRowAtIndexPath:v13 usingPresentationValues:1];
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  CGFloat v19 = v18;
  CGFloat v21 = v20;

  v26.origin.double x = v6;
  v26.origin.double y = v8;
  v26.size.double width = v10;
  v26.size.double height = v12;
  v28.origin.double x = v15;
  v28.origin.double y = v17;
  v28.size.double width = v19;
  v28.size.double height = v21;
  CGRect v27 = CGRectUnion(v26, v28);
  -[UITableView _ensureViewsAreLoadedInRect:](self, "_ensureViewsAreLoadedInRect:", v27.origin.x, v27.origin.y, v27.size.width, v27.size.height);
  double v22 = [v4 indexPath];

  double v23 = [(UITableView *)self _cellForRowAtIndexPath:v22 usingPresentationValues:1];

  return v23;
}

- (BOOL)_allowsFocusToLeaveViaHeading:(unint64_t)a3
{
  return (a3 & 0x300) == 0;
}

- (id)_focusScrollBoundaryMetricsForItem:(id)a3
{
  id v4 = a3;
  double v5 = [[_UIFocusScrollBoundaryMetrics alloc] initWithFocusItem:v4 scrollView:self];
  if ([(_UIFocusScrollBoundaryMetrics *)v5 hasDisprovedAllRelevantAssumptions])
  {
    CGFloat v6 = v5;
  }
  else
  {
    _UIFocusEnvironmentContainingView(v4);
    double v7 = (UITableView *)objc_claimAutoreleasedReturnValue();
    CGFloat v8 = v7;
    double v9 = 0;
    if (!v7 || v7 == self)
    {
      CGFloat v10 = v7;
LABEL_11:
      double v11 = 0;
    }
    else
    {
      while ((_IsKindOfUITableViewCell(v8) & 1) == 0)
      {
        if (_IsKindOfUITableViewHeaderFooterView(v8))
        {
          CGFloat v10 = v8;
          uint64_t v15 = [(UITableView *)self _sectionForHeaderView:v10];
          if (v15 != 0x7FFFFFFFFFFFFFFFLL
            || (uint64_t v15 = [(UITableView *)self _sectionForFooterView:v10],
                v15 != 0x7FFFFFFFFFFFFFFFLL))
          {
            NSInteger v16 = [(UITableView *)self numberOfSections] - 1;
            if (v15 >= 1) {
              [(_UIFocusScrollBoundaryMetrics *)v5 setIsMinY:0];
            }
            if (v15 < v16) {
              [(_UIFocusScrollBoundaryMetrics *)v5 setIsMaxY:0];
            }
          }
          double v11 = 0;
          double v9 = v10;
          goto LABEL_25;
        }
        CGFloat v10 = [(UIView *)v8 superview];

        double v9 = 0;
        if (!v10) {
          goto LABEL_11;
        }
        CGFloat v8 = v10;
        double v11 = 0;
        if (v10 == self) {
          goto LABEL_25;
        }
      }
      CGFloat v10 = v8;
      CGFloat v12 = [(UITableView *)self _indexPathForCell:v10 usingPresentationValues:1];
      if (v12)
      {
        uint64_t v13 = [(UITableView *)self globalRowForRowAtIndexPath:v12];
        int64_t v14 = [(UITableView *)self maximumGlobalRowIndex];
        if (v13 >= 1) {
          [(_UIFocusScrollBoundaryMetrics *)v5 setIsMinY:0];
        }
        if (v13 < v14) {
          [(_UIFocusScrollBoundaryMetrics *)v5 setIsMaxY:0];
        }
      }

      double v9 = 0;
      double v11 = v10;
    }
LABEL_25:
    if ([(_UIFocusScrollBoundaryMetrics *)v5 hasDisprovedAllRelevantAssumptions])
    {
      CGFloat v17 = v5;
    }
    else
    {
      v21.receiver = self;
      v21.super_class = (Class)UITableView;
      double v18 = [(UIScrollView *)&v21 _focusScrollBoundaryMetricsForItem:v4];
      [(_UIFocusScrollBoundaryMetrics *)v5 consumeOtherMetrics:v18];
      CGFloat v19 = v5;
    }
  }

  return v5;
}

- (CGPoint)_adjustFocusContentOffset:(CGPoint)a3 toShowFocusItemWithInfo:(id)a4
{
  double y = a3.y;
  CGFloat x = a3.x;
  double v7 = [a4 containingView];
  CGFloat v8 = v7;
  if (v7 && v7 != self)
  {
    while ((_IsKindOfUITableViewCell(v8) & 1) == 0)
    {
      double v9 = [(UIView *)v8 superview];

      if (v9)
      {
        CGFloat v8 = v9;
        if (v9 != self) {
          continue;
        }
      }
      CGFloat v8 = v9;
      goto LABEL_21;
    }
    CGFloat v8 = v8;
    CGFloat v10 = [(UITableView *)self _indexPathForCell:v8 usingPresentationValues:1];
    if (v10)
    {
      if ([(UITableView *)self allowsHeaderViewsToFloat]
        || (double v11 = 0.0, ![v10 row]))
      {
        double v11 = -[UITableViewRowData heightForHeaderInSection:canGuess:]((uint64_t)self->_rowData, [v10 section], 0);
      }
      [(UIView *)v8 frame];
      double v12 = CGRectGetMinY(v21) - v11;
      if (y >= v12) {
        double v13 = v12;
      }
      else {
        double v13 = y;
      }
      if ([(UITableView *)self allowsFooterViewsToFloat]
        || (uint64_t v14 = [v10 row],
            double v15 = 0.0,
            v14 == -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, [v10 section])
                 - 1))
      {
        double v15 = -[UITableViewRowData heightForFooterInSection:canGuess:]((uint64_t)self->_rowData, [v10 section], 0);
      }
      [(UIView *)v8 frame];
      double v16 = v15 + CGRectGetMaxY(v22);
      [(UIView *)self bounds];
      if (v13 >= v16 - v17) {
        double y = v13;
      }
      else {
        double y = v16 - v17;
      }
    }
  }
LABEL_21:

  double v18 = x;
  double v19 = y;
  result.double y = v19;
  result.CGFloat x = v18;
  return result;
}

- (unint64_t)_focusPrimaryScrollableAxis
{
  return 2;
}

- (void)setRefreshControl:(id)a3
{
  v6.receiver = self;
  v6.super_class = (Class)UITableView;
  [(UIScrollView *)&v6 setRefreshControl:a3];
  tableHeaderBackgroundView = self->_tableHeaderBackgroundView;
  if (tableHeaderBackgroundView)
  {
    double v5 = [(UIScrollView *)self _refreshControl];
    [(UIView *)self insertSubview:tableHeaderBackgroundView belowSubview:v5];
  }
}

- (BOOL)_dataSourceImplementsNumberOfSectionsInTableView
{
  return (*(unsigned char *)&self->_tableFlags >> 2) & 1;
}

- (BOOL)_delegateImplementsHeightForRowAtIndexPath
{
  return *((unsigned char *)&self->_tableFlags + 4) & 1;
}

- (BOOL)_dataSourceImplementsCanUpdateRowAtIndexPath
{
  return (*((unsigned __int8 *)&self->_tableFlags + 1) >> 4) & 1;
}

- (BOOL)_delegateImplementsMarginForTableView
{
  return (*((unsigned __int8 *)&self->_tableFlags + 7) >> 1) & 1;
}

- (BOOL)_delegateImplementsHeightForHeaderInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 4) >> 1) & 1;
}

- (BOOL)_delegateImplementsTitleWidthForHeaderInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 4) >> 2) & 1;
}

- (BOOL)_delegateImplementsAlignmentForHeaderInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 7) >> 2) & 1;
}

- (BOOL)_delegateImplementsHeightForFooterInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 4) >> 3) & 1;
}

- (BOOL)_delegateImplementsTitleWidthForFooterInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 4) >> 4) & 1;
}

- (BOOL)_delegateImplementsAlignmentForFooterInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 7) >> 3) & 1;
}

- (BOOL)_dataSourceImplementsTitleForHeaderInSection
{
  return (*(unsigned char *)&self->_tableFlags >> 3) & 1;
}

- (BOOL)_dataSourceImplementsTitleForFooterInSection
{
  return (*(unsigned char *)&self->_tableFlags >> 4) & 1;
}

- (BOOL)_dataSourceImplementsDetailTextForHeaderInSection
{
  return (*(unsigned char *)&self->_tableFlags >> 5) & 1;
}

- (BOOL)_delegateImplementsViewForHeaderInSection
{
  return *((unsigned char *)&self->_tableFlags + 5) & 1;
}

- (BOOL)_delegateImplementsViewForFooterInSection
{
  return (*((unsigned __int8 *)&self->_tableFlags + 5) >> 1) & 1;
}

- (void)_deselectAllNonMultiSelectRowsAnimated:(BOOL)a3
{
}

- (void)_deselectAllNonMultiSelectRowsAnimated:(BOOL)a3 notifyDelegate:(BOOL)a4
{
}

- (void)_deselectAllRowsAnimated:(BOOL)a3 notifyDelegate:(BOOL)a4 excludingMultiSelectRows:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  BOOL v7 = a3;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  double v9 = (void *)[(NSMutableArray *)self->_selectedIndexPaths copy];
  uint64_t v10 = [v9 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (!v10)
  {

    return;
  }
  uint64_t v11 = v10;
  BOOL v20 = v5;
  int v21 = 0;
  uint64_t v12 = *(void *)v23;
  do
  {
    uint64_t v13 = 0;
    do
    {
      if (*(void *)v23 != v12) {
        objc_enumerationMutation(v9);
      }
      id v14 = *(id *)(*((void *)&v22 + 1) + 8 * v13);
      if (v5 && [(UITableView *)self _isRowMultiSelect:v14])
      {
        double v15 = v14;
        goto LABEL_13;
      }
      if (!v6 || (*((unsigned char *)&self->_tableFlags + 5) & 0x80) == 0)
      {
        double v15 = v14;
LABEL_12:
        [(UITableView *)self _deselectRowAtIndexPath:v15 animated:v7 notifyDelegate:v6];
        int v21 = 1;
        goto LABEL_13;
      }
      double v16 = v9;
      BOOL v17 = v7;
      double v18 = [(UITableView *)self _delegateProxy];
      double v15 = [v18 tableView:self willDeselectRowAtIndexPath:v14];

      if (!v15)
      {
        BOOL v7 = v17;
LABEL_20:
        double v9 = v16;
        BOOL v5 = v20;
        goto LABEL_13;
      }
      BOOL v7 = v17;
      if ([v15 row] == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_20;
      }
      double v9 = v16;
      BOOL v5 = v20;
      if ([v15 section] != 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_12;
      }
LABEL_13:

      ++v13;
    }
    while (v11 != v13);
    uint64_t v19 = [v9 countByEnumeratingWithState:&v22 objects:v26 count:16];
    uint64_t v11 = v19;
  }
  while (v19);

  if (v6 & v21) {
    [(UITableView *)self _selectedIndexPathsDidChange];
  }
}

- (void)_deselectRowAtIndexPath:(id)a3 animated:(BOOL)a4 notifyDelegate:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  id v8 = a3;
  if (![(NSMutableArray *)self->_selectedIndexPaths containsObject:v8])
  {
    id v17 = v8;
    goto LABEL_14;
  }
  if (!v5 || (*((unsigned char *)&self->_tableFlags + 5) & 0x80) == 0)
  {
    id v17 = v8;
LABEL_5:
    double v9 = [(UITableView *)self _existingCellForRowAtIndexPath:v17];
    uint64_t v10 = v9;
    if (v9) {
      [v9 setSelected:0 animated:v6];
    }
    else {
      [(UITableView *)self _showSeparatorForRowBeforeIndexPath:v17];
    }
    [(NSMutableArray *)self->_selectedIndexPaths removeObject:v17];
    if (v5)
    {
      if ((*((unsigned char *)&self->_tableFlags + 6) & 2) != 0)
      {
        uint64_t v11 = [(UITableView *)self _delegateProxy];
        [v11 tableView:self didDeselectRowAtIndexPath:v17];
      }
      [(UITableView *)self _selectedIndexPathsDidChange];
    }

    goto LABEL_14;
  }
  double v16 = [(UITableView *)self _delegateProxy];
  id v17 = [v16 tableView:self willDeselectRowAtIndexPath:v8];

  if (!v17)
  {
    id v17 = 0;
    goto LABEL_14;
  }
  if ([v17 row] != 0x7FFFFFFFFFFFFFFFLL && objc_msgSend(v17, "section") != 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_5;
  }
LABEL_14:
  uint64_t v12 = [(UIView *)self traitCollection];
  uint64_t v13 = [v12 userInterfaceIdiom];

  if (v13 == 3) {
    [(UIView *)self setNeedsFocusUpdate];
  }
  id v14 = [(UITableView *)self _focusedCellIndexPath];
  int v15 = [v14 isEqual:v17];

  if (v15) {
    [(UITableView *)self _updateSelectionIsKey];
  }
}

- (void)_stopAutoscrollTimer
{
  reorderingSupport = self->_reorderingSupport;
  if (reorderingSupport)
  {
    [(NSTimer *)reorderingSupport->_autoscrollTimer invalidate];
    id v4 = self->_reorderingSupport;
    autoscrollTimer = v4->_autoscrollTimer;
    v4->_autoscrollTimer = 0;
  }
}

- (void)_animateTableViewContentToNewLayoutWithDuration:(double)a3 reorderingCell:(id)a4 additionalAnimations:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  [(UITableView *)self _applyCoalescedContentSizeUpdates];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __99__UITableView__animateTableViewContentToNewLayoutWithDuration_reorderingCell_additionalAnimations___block_invoke;
  v12[3] = &unk_1E52E3298;
  void v12[4] = self;
  id v13 = v8;
  id v14 = v9;
  id v10 = v9;
  id v11 = v8;
  +[UIView animateWithDuration:4 delay:v12 options:0 animations:a3 completion:0.0];
}

uint64_t __99__UITableView__animateTableViewContentToNewLayoutWithDuration_reorderingCell_additionalAnimations___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(v2 + 2168);
  if (v3 < *(void *)(v2 + 2176) + v3)
  {
    unint64_t v4 = 0;
    do
    {
      BOOL v5 = -[UITableViewRowData indexPathForRowAtGlobalRow:](*(void **)(v2 + 2072), v3);
      uint64_t v6 = [*(id *)(a1 + 32) _existingCellForRowAtIndexPath:v5];
      if (v6) {
        unint64_t v7 = v4 + 1;
      }
      else {
        unint64_t v7 = v4;
      }
      if (v6)
      {
        id v8 = (void *)v6;
        if (v6 != *(void *)(a1 + 40))
        {
          double v9 = -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:](*(void *)(*(void *)(a1 + 32) + 2072), [v5 row], objc_msgSend(v5, "section"), 0);
          double v11 = v10;
          double v13 = v12;
          double v15 = v14;
          [v8 frame];
          v26.origin.CGFloat x = v16;
          v26.origin.double y = v17;
          v26.size.double width = v18;
          v26.size.double height = v19;
          v25.origin.CGFloat x = v9;
          v25.origin.double y = v11;
          v25.size.double width = v13;
          v25.size.double height = v15;
          if (!CGRectEqualToRect(v25, v26) && v8 != *(void **)(a1 + 40))
          {
            objc_msgSend(v8, "setFrame:", v9, v11, v13, v15);
            [v8 _setNeedsHeightCalculation:0];
          }
          objc_msgSend(v8, "setSectionLocation:animated:", -[UITableViewRowData sectionLocationForRow:inSection:](*(void *)(*(void *)(a1 + 32) + 2072), objc_msgSend(v5, "row"), objc_msgSend(v5, "section")), 1);
          [*(id *)(a1 + 32) _updateDragStateForCell:v8 atIndexPath:v5];
        }
      }
      else
      {
        id v8 = (void *)[*(id *)(a1 + 32) _createPreparedCellForGlobalRow:v3 willDisplay:1];
        unint64_t v20 = [*(id *)(*(void *)(a1 + 32) + 2184) count];
        int v21 = *(void **)(*(void *)(a1 + 32) + 2184);
        if (v4 >= v20) {
          [v21 addObject:v8];
        }
        else {
          [v21 insertObject:v8 atIndex:v4];
        }
      }

      ++v3;
      uint64_t v2 = *(void *)(a1 + 32);
      unint64_t v4 = v7;
    }
    while (v3 < *(void *)(v2 + 2176) + *(void *)(v2 + 2168));
  }
  [(id)v2 _updateTableHeadersAndFootersNow:1];
  [*(id *)(a1 + 32) _updateVisibleHeadersAndFootersNow:1];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    long long v23 = *(uint64_t (**)(void))(result + 16);
    return v23();
  }
  return result;
}

- (void)_animateTableViewContentToNewLayout
{
}

- (id)_gapIndexPath
{
  rowData = self->_rowData;
  if (rowData) {
    return rowData->_gapIndexPath;
  }
  else {
    return 0;
  }
}

- (id)_draggedIndexPath
{
  rowData = self->_rowData;
  if (rowData) {
    return rowData->_draggedIndexPath;
  }
  else {
    return 0;
  }
}

- (BOOL)hasUncommittedUpdates
{
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController) {
    BOOL v4 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController hasShadowUpdates];
  }
  else {
    BOOL v4 = 0;
  }
  rowData = self->_rowData;
  if (rowData && (uint64_t v6 = rowData->_draggedIndexPath) != 0)
  {
    BOOL v7 = 1;
  }
  else
  {
    id v8 = self->_rowData;
    if (v8) {
      id v8 = (UITableViewRowData *)v8->_reorderedIndexPath;
    }
    double v9 = v8;
    BOOL v7 = v9 != 0;

    uint64_t v6 = 0;
  }

  double v10 = self->_rowData;
  if (v10) {
    double v10 = (UITableViewRowData *)v10->_gapIndexPath;
  }
  double v11 = v10;

  if (v11) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v7;
  }
  return v4 || v12;
}

- (BOOL)dragInteractionEnabled
{
  unint64_t v2 = *((void *)&self->_tableFlags + 3);
  if ((v2 & 0x800000) != 0) {
    return (v2 >> 24) & 1;
  }
  else {
    LOBYTE(v3) = +[_UITableViewDragController isEnabledByDefault];
  }
  return v3;
}

- (BOOL)hasActiveDrag
{
  dragController = self->_dragController;
  if (dragController) {
    LOBYTE(dragController) = [(_UITableViewDragController *)dragController isActive];
  }
  return (char)dragController;
}

- (BOOL)hasActiveDrop
{
  dropController = self->_dropController;
  if (dropController) {
    LOBYTE(dropController) = [(_UITableViewDropController *)dropController isActive];
  }
  return (char)dropController;
}

- (BOOL)_isReordering
{
  if ([(UITableView *)self hasActiveDrag]) {
    BOOL v3 = [(UITableView *)self hasActiveDrop];
  }
  else {
    BOOL v3 = 0;
  }
  BOOL v4 = [(UITableView *)self _reorderingIndexPath];

  return v4 || v3;
}

- (id)_dragDelegateActual
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  return WeakRetained;
}

- (id)_dragDelegateProxy
{
  if ([(_UITableViewShadowUpdatesController *)self->_shadowUpdatesController hasShadowUpdates]) {
    id WeakRetained = self->_shadowUpdatesController;
  }
  else {
    id WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained((id *)&self->_dragDelegate);
  }
  return WeakRetained;
}

- (void)setDragSourceDelegate:(id)a3
{
  obuint64_t j = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_dragSourceDelegate, obj);
    _UIValidateAccountBasedDelegateRespondsToSelector(obj, (uint64_t)sel___tableView_dataOwnerForDragSession_atIndexPath_);
    [(UITableView *)self _createOrUninstallDragAndDropControllersIfNeeded];
  }
}

- (id)_dragSourceDelegateActual
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
  return WeakRetained;
}

- (id)_dragSourceDelegateProxy
{
  if ([(_UITableViewShadowUpdatesController *)self->_shadowUpdatesController hasShadowUpdates]) {
    id WeakRetained = self->_shadowUpdatesController;
  }
  else {
    id WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
  }
  return WeakRetained;
}

- (BOOL)_canBeginDragAtPoint:(CGPoint)a3 indexPath:(id)a4
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (WeakRetained)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    id v7 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    if (v7) {
      LOBYTE(v6) = 0;
    }
    else {
      int v6 = ![(UITableView *)self _dragAndDropUsedForReordering];
    }
  }
  return v6 ^ 1;
}

- (int64_t)_dataOwnerForDragSession:(id)a3 atIndexPath:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (!_UIShouldEnforceOpenInRulesInAccountBasedApp()) {
    goto LABEL_9;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (!WeakRetained
    || (double v9 = WeakRetained,
        id v10 = objc_loadWeakRetained((id *)&self->_dragDelegate),
        char v11 = objc_opt_respondsToSelector(),
        v10,
        v9,
        (v11 & 1) == 0))
  {
    id v14 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    if (v14)
    {
      double v15 = v14;
      id v16 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
      char v17 = objc_opt_respondsToSelector();

      if (v17)
      {
        BOOL v12 = [(UITableView *)self _dragSourceDelegateProxy];
        uint64_t v13 = objc_msgSend(v12, "__tableView:dataOwnerForDragSession:atIndexPath:", self, v6, v7);
        goto LABEL_8;
      }
    }
LABEL_9:
    int64_t v18 = 0;
    goto LABEL_10;
  }
  BOOL v12 = [(UITableView *)self _dragDelegateProxy];
  uint64_t v13 = [v12 _tableView:self dataOwnerForDragSession:v6 atIndexPath:v7];
LABEL_8:
  int64_t v18 = v13;

LABEL_10:
  return v18;
}

- (id)_rowsToIncludeInDragSession:(id)a3 atIndexPath:(id)a4 withDataOwner:(int64_t)a5
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = [MEMORY[0x1E4F1CA70] orderedSet];
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (WeakRetained)
  {
    BOOL v12 = WeakRetained;
    int v13 = [(NSMutableArray *)self->_selectedIndexPaths containsObject:v9];

    if (!v13)
    {
LABEL_17:
      [v10 addObject:v9];
      goto LABEL_20;
    }
  }
  else
  {
    id v14 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    if (!v14) {
      goto LABEL_17;
    }
    double v15 = v14;
    char v16 = [(NSMutableArray *)self->_selectedIndexPaths containsObject:v9];

    if ((v16 & 1) == 0) {
      goto LABEL_17;
    }
  }
  char v17 = [(NSMutableArray *)self->_selectedIndexPaths sortedArrayUsingSelector:sel_compare_];
  if (_UIShouldEnforceOpenInRulesInAccountBasedApp())
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    CGRect v25 = v17;
    id v18 = v17;
    uint64_t v19 = [v18 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v27;
      do
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          if (*(void *)v27 != v21) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          if (-[UITableView _dataOwnerForDragSession:atIndexPath:](self, "_dataOwnerForDragSession:atIndexPath:", v8, v23) == a5)[v10 addObject:v23]; {
        }
          }
        uint64_t v20 = [v18 countByEnumeratingWithState:&v26 objects:v30 count:16];
      }
      while (v20);
    }

    char v17 = v25;
  }
  else
  {
    [v10 addObjectsFromArray:v17];
  }

LABEL_20:
  return v10;
}

- (id)_dragPreviewParametersForIndexPath:(id)a3
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  char v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) == 0
    || ([(UITableView *)self _dragDelegateProxy],
        id v7 = objc_claimAutoreleasedReturnValue(),
        [v7 tableView:self dragPreviewParametersForRowAtIndexPath:v4],
        id v8 = (UIDragPreviewParameters *)objc_claimAutoreleasedReturnValue(),
        v7,
        !v8))
  {
    id v9 = [(UITableView *)self _cellForRowAtIndexPath:v4 usingPresentationValues:1];
    id v10 = [v9 _visiblePathForBackgroundConfiguration];
    if (v10)
    {
      id v8 = objc_alloc_init(UIDragPreviewParameters);
      [(UIPreviewParameters *)v8 setVisiblePath:v10];
    }
    else
    {
      id v8 = 0;
    }
  }
  return v8;
}

- (void)_prepareToLiftRowsAtIndexPaths:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8 * i);
        [(UITableView *)self unhighlightRowAtIndexPath:v9 animated:0];
        id v10 = [(UITableView *)self _existingCellForRowAtIndexPath:v9];
        [v10 layoutIfNeeded];
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

- (void)_animateLiftOfRowsAtIndexPaths:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = [(UITableView *)self _cellForRowAtIndexPath:*(void *)(*((void *)&v11 + 1) + 8 * v8) usingPresentationValues:1];
        id v10 = v9;
        if (v9)
        {
          [v9 _setSeparatorHidden:1];
          [v10 _setDragState:1];
          [v10 layoutIfNeeded];
        }

        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }
}

- (void)_animateDragCancelForCell:(id)a3
{
  id v3 = a3;
  [v3 _setDragState:0];
  [v3 setAlpha:1.0];
}

- (id)_itemsForBeginningDragSession:(id)a3 atIndexPath:(id)a4
{
  v20[1] = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);

  if (WeakRetained)
  {
    uint64_t v9 = [(UITableView *)self _dragDelegateProxy];
    uint64_t v10 = [v9 tableView:self itemsForBeginningDragSession:v6 atIndexPath:v7];
  }
  else
  {
    id v12 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    if (!v12
      || (long long v13 = v12,
          id v14 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate),
          char v15 = objc_opt_respondsToSelector(),
          v14,
          v13,
          (v15 & 1) == 0))
    {
      long long v11 = (void *)MEMORY[0x1E4F1CBF0];
      goto LABEL_8;
    }
    uint64_t v9 = [(UITableView *)self _dragSourceDelegateProxy];
    uint64_t v10 = [v9 _tableView:self itemsForBeginningDragSession:v6 atIndexPath:v7];
  }
  long long v11 = (void *)v10;

LABEL_8:
  if (![v11 count] && -[UITableView _canMoveRowAtIndexPath:](self, "_canMoveRowAtIndexPath:", v7))
  {
    id v16 = objc_alloc_init(MEMORY[0x1E4F28D78]);
    char v17 = [[UIDragItem alloc] initWithItemProvider:v16];
    v20[0] = v17;
    uint64_t v18 = [MEMORY[0x1E4F1C978] arrayWithObjects:v20 count:1];

    long long v11 = (void *)v18;
  }

  return v11;
}

- (id)_itemsForAddingToDragSession:(id)a3 atIndexPath:(id)a4 point:(CGPoint)a5 withDataOwner:(int64_t)a6
{
  double y = a5.y;
  double x = a5.x;
  id v11 = a3;
  id v12 = a4;
  if (+[_UITableViewDragController isEnabledByDefault]
    || [(_UITableViewDragController *)self->_dragController clientEnabledState] == 1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
    if (WeakRetained
      && (id v14 = WeakRetained,
          id v15 = objc_loadWeakRetained((id *)&self->_dragDelegate),
          char v16 = objc_opt_respondsToSelector(),
          v15,
          v14,
          (v16 & 1) != 0))
    {
      if (!_UIShouldEnforceOpenInRulesInAccountBasedApp()
        || (id v17 = objc_loadWeakRetained((id *)&self->_dragDelegate),
            char v18 = objc_opt_respondsToSelector(),
            v17,
            (v18 & 1) == 0)
        || ([(UITableView *)self _dragDelegateProxy],
            uint64_t v19 = objc_claimAutoreleasedReturnValue(),
            uint64_t v20 = [v19 _tableView:self dataOwnerForDragSession:v11 atIndexPath:v12],
            v19,
            v20 == a6))
      {
        uint64_t v21 = [(UITableView *)self _dragDelegateProxy];
        uint64_t v22 = objc_msgSend(v21, "tableView:itemsForAddingToDragSession:atIndexPath:point:", self, v11, v12, x, y);
LABEL_15:
        uint64_t v31 = (void *)v22;

        goto LABEL_17;
      }
    }
    else
    {
      id v23 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
      if (v23)
      {
        long long v24 = v23;
        id v25 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
        char v26 = objc_opt_respondsToSelector();

        if (v26)
        {
          if (!_UIShouldEnforceOpenInRulesInAccountBasedApp()
            || (id v27 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate),
                char v28 = objc_opt_respondsToSelector(),
                v27,
                (v28 & 1) == 0)
            || ([(UITableView *)self _dragSourceDelegateProxy],
                long long v29 = objc_claimAutoreleasedReturnValue(),
                uint64_t v30 = objc_msgSend(v29, "__tableView:dataOwnerForDragSession:atIndexPath:", self, v11, v12),
                v29,
                v30 == a6))
          {
            uint64_t v21 = [(UITableView *)self _dragSourceDelegateProxy];
            uint64_t v22 = objc_msgSend(v21, "_tableView:itemsForAddingToDragSession:atIndexPath:point:", self, v11, v12, x, y);
            goto LABEL_15;
          }
        }
      }
    }
  }
  uint64_t v31 = (void *)MEMORY[0x1E4F1CBF0];
LABEL_17:

  return v31;
}

- (void)_dragSessionWillBegin:(id)a3
{
  id v13 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (WeakRetained)
  {
    uint64_t v5 = WeakRetained;
    id v6 = objc_loadWeakRetained((id *)&self->_dragDelegate);
    char v7 = objc_opt_respondsToSelector();

    if (v7)
    {
      uint64_t v8 = [(UITableView *)self _dragDelegateProxy];
      [v8 tableView:self dragSessionWillBegin:v13];
LABEL_7:

      goto LABEL_8;
    }
  }
  id v9 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    char v12 = objc_opt_respondsToSelector();

    if (v12)
    {
      uint64_t v8 = [(UITableView *)self _dragSourceDelegateProxy];
      [v8 _tableView:self dragSessionWillBegin:v13];
      goto LABEL_7;
    }
  }
LABEL_8:
}

- (void)_updateAppearanceOfVisibleRowsForDragState
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  [(UITableView *)self _updateTopSeparatorForVisibleCells];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = -[UITableView _visibleCellsUsingPresentationValues:](self, "_visibleCellsUsingPresentationValues:", 1, 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        id v9 = [(UITableView *)self _indexPathForCell:v8 usingPresentationValues:1];
        [(UITableView *)self _updateDragStateForCell:v8 atIndexPath:v9];
        [(UITableView *)self _updateSeparatorStateForCell:v8 atIndexPath:v9];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
}

- (void)_dragSessionDidEnd:(id)a3
{
  id v13 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  if (WeakRetained)
  {
    uint64_t v5 = WeakRetained;
    id v6 = objc_loadWeakRetained((id *)&self->_dragDelegate);
    char v7 = objc_opt_respondsToSelector();

    if (v7)
    {
      uint64_t v8 = [(UITableView *)self _dragDelegateProxy];
      [v8 tableView:self dragSessionDidEnd:v13];
LABEL_7:

      goto LABEL_8;
    }
  }
  id v9 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
  if (v9)
  {
    long long v10 = v9;
    id v11 = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
    char v12 = objc_opt_respondsToSelector();

    if (v12)
    {
      uint64_t v8 = [(UITableView *)self _dragSourceDelegateProxy];
      [v8 _tableView:self dragSessionDidEnd:v13];
      goto LABEL_7;
    }
  }
LABEL_8:
}

- (BOOL)_dragSessionAllowsMoveOperation:(id)a3
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  char v6 = objc_opt_respondsToSelector();

  if (v6)
  {
    char v7 = [(UITableView *)self _dragDelegateProxy];
    char v8 = [v7 tableView:self dragSessionAllowsMoveOperation:v4];
  }
  else
  {
    char v8 = 1;
  }

  return v8;
}

- (BOOL)_dragSessionIsRestrictedToDraggingApplication:(id)a3
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  char v6 = objc_opt_respondsToSelector();

  if (v6)
  {
    char v7 = [(UITableView *)self _dragDelegateProxy];
    char v8 = [v7 tableView:self dragSessionIsRestrictedToDraggingApplication:v4];
  }
  else
  {
    char v8 = 0;
  }

  return v8;
}

- (id)_dragSessionPropertiesForSession:(id)a3
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  char v6 = objc_opt_respondsToSelector();

  if ((v6 & 1) == 0
    || ([(UITableView *)self _dragDelegateProxy],
        char v7 = objc_claimAutoreleasedReturnValue(),
        [v7 _tableView:self dragSessionPropertiesForSession:v4],
        char v8 = objc_claimAutoreleasedReturnValue(),
        v7,
        !v8))
  {
    id v9 = objc_loadWeakRetained((id *)&self->_dragDelegate);
    char v10 = objc_opt_respondsToSelector();

    if (v10)
    {
      char v8 = objc_opt_new();
      id v11 = [(UITableView *)self _dragDelegateProxy];
      objc_msgSend(v8, "set_supportsSystemDrag:", objc_msgSend(v11, "_tableView:dragSessionSupportsSystemDrag:", self, v4));
    }
    else
    {
      char v8 = 0;
    }
  }

  return v8;
}

- (id)_dropDelegateActual
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  return WeakRetained;
}

- (id)_dropDelegateProxy
{
  if ([(_UITableViewShadowUpdatesController *)self->_shadowUpdatesController hasShadowUpdates]) {
    id WeakRetained = self->_shadowUpdatesController;
  }
  else {
    id WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained((id *)&self->_dropDelegate);
  }
  return WeakRetained;
}

- (void)setDragDestinationDelegate:(id)a3
{
  obuint64_t j = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);

  if (WeakRetained != obj)
  {
    objc_storeWeak((id *)&self->_dragDestinationDelegate, obj);
    _UIValidateAccountBasedDelegateRespondsToSelector(obj, (uint64_t)sel___tableView_dataOwnerForDropSession_withDestinationIndexPath_);
    [(UITableView *)self _createOrUninstallDragAndDropControllersIfNeeded];
  }
}

- (id)_dragDestinationDelegateActual
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  return WeakRetained;
}

- (id)_dragDestinationDelegateProxy
{
  if ([(_UITableViewShadowUpdatesController *)self->_shadowUpdatesController hasShadowUpdates]) {
    id WeakRetained = self->_shadowUpdatesController;
  }
  else {
    id WeakRetained = (_UITableViewShadowUpdatesController *)objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  }
  return WeakRetained;
}

- (id)_activeSourceDragSession
{
  return [(_UITableViewDragController *)self->_dragController dragSession];
}

- (BOOL)_shouldAllowInternalDrop
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);

  if (WeakRetained) {
    return 1;
  }
  id v5 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  if (v5)
  {
    char v6 = v5;
    id v7 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    char v8 = objc_opt_respondsToSelector();

    if (v8) {
      return 1;
    }
  }
  id v9 = [(_UITableViewDragController *)self->_dragController draggedIndexPath];
  if (v9) {
    BOOL v4 = [(UITableView *)self _canMoveRowAtIndexPath:v9];
  }
  else {
    BOOL v4 = 0;
  }

  return v4;
}

- (BOOL)_canHandleDropSession:(id)a3
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (WeakRetained)
  {
    char v6 = 1;
  }
  else
  {
    id v7 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    if (v7)
    {
      id v8 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
      char v6 = objc_opt_respondsToSelector();
    }
    else
    {
      char v6 = 0;
    }
  }
  [(_UITableViewDropController *)self->_dropController setCanOnlyHandleReordering:0];
  if (v6)
  {
    id v9 = objc_loadWeakRetained((id *)&self->_dropDelegate);
    if (v9
      && (char v10 = v9,
          id v11 = objc_loadWeakRetained((id *)&self->_dropDelegate),
          char v12 = objc_opt_respondsToSelector(),
          v11,
          v10,
          (v12 & 1) != 0))
    {
      id v13 = [(UITableView *)self _dropDelegateProxy];
      char v14 = [v13 tableView:self canHandleDropSession:v4];
    }
    else
    {
      id v15 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
      if (!v15) {
        goto LABEL_15;
      }
      char v16 = v15;
      id v17 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
      char v18 = objc_opt_respondsToSelector();

      if ((v18 & 1) == 0) {
        goto LABEL_15;
      }
      id v13 = [(UITableView *)self _dragDestinationDelegateProxy];
      char v14 = [v13 _tableView:self canHandleDropSession:v4];
    }
    char v19 = v14;

    if (v19)
    {
LABEL_15:
      LOBYTE(v20) = 1;
      goto LABEL_19;
    }
  }
  uint64_t v21 = [(_UITableViewDragController *)self->_dragController draggedIndexPath];
  BOOL v20 = [(UITableView *)self _canMoveRowAtIndexPath:v21];
  if (v20) {
    [(_UITableViewDropController *)self->_dropController setCanOnlyHandleReordering:1];
  }

LABEL_19:
  return v20;
}

- (void)_dropEntered:(id)a3
{
  id v13 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    id v6 = objc_loadWeakRetained((id *)&self->_dropDelegate);
    char v7 = objc_opt_respondsToSelector();

    if (v7)
    {
      id v8 = [(UITableView *)self _dropDelegateProxy];
      [v8 tableView:self dropSessionDidEnter:v13];
LABEL_7:

      goto LABEL_8;
    }
  }
  id v9 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  if (v9)
  {
    char v10 = v9;
    id v11 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    char v12 = objc_opt_respondsToSelector();

    if (v12)
    {
      id v8 = [(UITableView *)self _dragDestinationDelegateProxy];
      [v8 _tableView:self dropSessionDidEnter:v13];
      goto LABEL_7;
    }
  }
LABEL_8:
}

- (id)_targetIndexPathForDrop:(id)a3
{
  [a3 locationInView:self];
  rowData = self->_rowData;
  return [(UITableViewRowData *)(uint64_t)rowData targetIndexPathForPoint:v4 adjustedForGap:v5];
}

- (int64_t)_dataOwnerForDropSession:(id)a3 atIndexPath:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (!_UIShouldEnforceOpenInRulesInAccountBasedApp()) {
    goto LABEL_9;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (!WeakRetained
    || (id v9 = WeakRetained,
        id v10 = objc_loadWeakRetained((id *)&self->_dropDelegate),
        char v11 = objc_opt_respondsToSelector(),
        v10,
        v9,
        (v11 & 1) == 0))
  {
    id v14 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    if (v14)
    {
      id v15 = v14;
      id v16 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
      char v17 = objc_opt_respondsToSelector();

      if (v17)
      {
        char v12 = [(UITableView *)self _dragDestinationDelegateProxy];
        uint64_t v13 = objc_msgSend(v12, "__tableView:dataOwnerForDropSession:withDestinationIndexPath:", self, v6, v7);
        goto LABEL_8;
      }
    }
LABEL_9:
    int64_t v18 = 0;
    goto LABEL_10;
  }
  char v12 = [(UITableView *)self _dropDelegateProxy];
  uint64_t v13 = [v12 _tableView:self dataOwnerForDropSession:v6 withDestinationIndexPath:v7];
LABEL_8:
  int64_t v18 = v13;

LABEL_10:
  return v18;
}

- (id)_updatedDropProposalForIndexPath:(id)a3 dropSession:(id)a4 withDefaultProposal:(id)a5
{
  id v9 = a3;
  id v67 = a4;
  id v10 = a5;
  unint64_t v11 = [v10 operation];
  uint64_t v12 = [v10 intent];
  uint64_t v13 = [(_UITableViewDragController *)self->_dragController indexPaths];
  id v14 = v13;
  SEL v64 = a2;
  if (v9 && [v13 count]) {
    int v15 = [v14 containsObject:v9];
  }
  else {
    int v15 = 0;
  }
  if ([v14 count] == 1)
  {
    unsigned int v16 = *((unsigned __int8 *)&self->_tableFlags + 3);
    if ((v15 & ((v16 & 4) >> 2)) == 1 && v11 == 3)
    {
      rowData = self->_rowData;
      if (rowData) {
        rowData = (UITableViewRowData *)rowData->_draggedIndexPath;
      }
      uint64_t v21 = rowData;
      BOOL v18 = v21 == 0;

      int v19 = 1;
    }
    else
    {
      BOOL v18 = 0;
      int v19 = (v16 >> 2) & 1;
    }
  }
  else
  {
    BOOL v18 = 0;
    int v19 = 0;
  }
  BOOL v65 = v18;
  if (v15 && !v18)
  {
    uint64_t v22 = self->_rowData;
    if (v22) {
      uint64_t v22 = (UITableViewRowData *)v22->_draggedIndexPath;
    }
    id v23 = v22;

    if (v23) {
      uint64_t v12 = 1;
    }
    else {
      unint64_t v11 = 1;
    }
LABEL_34:
    id v27 = v10;
    if (!v11) {
      goto LABEL_69;
    }
    goto LABEL_66;
  }
  int v63 = v19;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (WeakRetained)
  {
    char v25 = 1;
  }
  else
  {
    id v26 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    if (v26)
    {
      id v62 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
      if (objc_opt_respondsToSelector())
      {
        char v25 = 1;
      }
      else
      {
        id v61 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
        char v25 = objc_opt_respondsToSelector();
      }
    }
    else
    {
      char v25 = 0;
    }
  }
  if ((unint64_t)[v14 count] >= 2 && (v25 & 1) == 0)
  {
    unint64_t v11 = 1;
    goto LABEL_34;
  }
  id v28 = v9;
  if (v9) {
    BOOL v29 = v11 == 0;
  }
  else {
    BOOL v29 = 1;
  }
  BOOL v30 = v29 || v11 == 1;
  int v31 = v63 ^ 1;
  if (v30) {
    int v31 = 1;
  }
  if (((v31 | v18) & 1) == 0)
  {
    double v32 = [(UITableView *)self _resolvedDropProposalAfterAdditionalHitTestingForIndexPath:v28 dropSession:v67 dropOperation:v11 dropIntent:1 dropProposal:v10];
    uint64_t v33 = [v32 _adjustedTargetIndexPath];

    id v28 = (id)v33;
  }
  id v34 = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (v34)
  {
    CGFloat v35 = v34;
    id v36 = objc_loadWeakRetained((id *)&self->_dropDelegate);
    char v37 = objc_opt_respondsToSelector();

    if (v37)
    {
      CGFloat v38 = [(UITableView *)self _dropDelegateProxy];
      uint64_t v39 = [v38 tableView:self dropSessionDidUpdate:v67 withDestinationIndexPath:v28];
LABEL_53:
      unsigned int v44 = (void *)v39;

      id v27 = v10;
      if (v44)
      {
        id v27 = v44;

        unint64_t v11 = [v27 operation];
        uint64_t v12 = [v27 intent];
      }

      goto LABEL_65;
    }
  }
  id v40 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  if (v40)
  {
    CGRect v41 = v40;
    id v42 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    char v43 = objc_opt_respondsToSelector();

    if (v43)
    {
      CGFloat v38 = [(UITableView *)self _dragDestinationDelegateProxy];
      uint64_t v39 = [v38 _tableView:self dropSessionDidUpdate:v67 withDestinationIndexPath:v28];
      goto LABEL_53;
    }
  }
  uint64_t v45 = [v14 count];
  if (v63) {
    uint64_t v46 = 1;
  }
  else {
    uint64_t v46 = v12;
  }
  if (v63) {
    unint64_t v47 = v11;
  }
  else {
    unint64_t v47 = 0;
  }
  if (v45)
  {
    uint64_t v12 = v46;
    unint64_t v11 = v47;
  }
  id v27 = v10;
LABEL_65:

  if (!v11) {
    goto LABEL_69;
  }
LABEL_66:
  if (v12 == 1 && (unint64_t)[v14 count] > 1) {
    unint64_t v11 = 1;
  }
LABEL_69:
  id v48 = v9;
  double v49 = v48;
  if (v9) {
    BOOL v50 = v11 == 3;
  }
  else {
    BOOL v50 = 0;
  }
  BOOL v51 = v50 && v65;
  if (v51 && v12 == 1)
  {
    unint64_t v11 = 3;
    uint64_t v52 = 1;
LABEL_78:
    id v53 = v48;
    goto LABEL_82;
  }
  uint64_t v52 = 0;
  if (!v9 || v11 < 2) {
    goto LABEL_78;
  }
  long long v54 = [(UITableView *)self _resolvedDropProposalAfterAdditionalHitTestingForIndexPath:v48 dropSession:v67 dropOperation:v11 dropIntent:v12 dropProposal:v27];
  unint64_t v11 = [v54 operation];
  uint64_t v52 = [v54 intent];
  id v53 = [v54 _adjustedTargetIndexPath];

LABEL_82:
  long long v55 = [(_UITableViewDragController *)self->_dragController draggedIndexPath];
  double v56 = v55;
  if (v55)
  {
    if (!v53)
    {
      id v53 = v55;
      uint64_t v52 = 1;
      goto LABEL_88;
    }
    uint64_t v57 = [(UITableView *)self _retargetedReorderIndexPathForInitialIndexPath:v55 proposedIndexPath:v53];

    id v53 = (id)v57;
  }
  if (v52 == 3)
  {
    double v58 = [MEMORY[0x1E4F28B00] currentHandler];
    double v66 = _UITableViewStringFromDropIntent(3uLL);
    [v58 handleFailureInMethod:v64, self, @"UITableView.m", 14997, @"UITableView internal inconsistency: %@ must be resolved to a concrete value", v66 object file lineNumber description];
  }
LABEL_88:
  double v59 = [v27 _updatedDropProposalWithDropOperation:v11 dropIntent:v52 adjustedTargetIndexPath:v53];

  return v59;
}

- (id)_resolvedDropProposalAfterAdditionalHitTestingForIndexPath:(id)a3 dropSession:(id)a4 dropOperation:(unint64_t)a5 dropIntent:(int64_t)a6 dropProposal:(id)a7
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a7;
  id v16 = v13;
  uint64_t v17 = [v16 row];
  if (v17 < -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, [v16 section]))
  {
    double v18 = 0.2;
    if (a6 != 3) {
      double v18 = 0.0;
    }
    if (a6 == 1) {
      double v19 = 0.5;
    }
    else {
      double v19 = v18;
    }
    if (v19 <= 0.0)
    {
      id v23 = v16;
      goto LABEL_32;
    }
    uint64_t v20 = [(_UITableViewDragController *)self->_dragController draggedIndexPath];
    CGRect v41 = (void *)v20;
    id v42 = a2;
    if (v20)
    {
      uint64_t v21 = [v16 section];
      if (v21 == [(id)v20 section])
      {
        uint64_t v22 = [v16 row];
        LODWORD(v20) = v22 > [(id)v20 row];
      }
      else
      {
        LODWORD(v20) = 0;
      }
    }
    rowData = self->_rowData;
    uint64_t v25 = [v16 row];
    uint64_t v26 = [v16 section];
    if (rowData) {
      double v27 = -[UITableViewRowData heightForRow:inSection:canGuess:adjustForReorderedRow:]((uint64_t)rowData, v25, v26, 1, 1);
    }
    else {
      double v27 = 0.0;
    }
    double v28 = v19 * v27;
    [v14 locationInView:self];
    uint64_t v31 = -[UITableViewRowData dropLocationForPoint:atIndexPath:withInsets:]((uint64_t)self->_rowData, v16, v29, v30, v28, 0.0, v28, 0.0);
    a2 = v42;
    if (v31 == 1)
    {
      double v32 = v41;
      if ((v20 & 1) == 0)
      {
        uint64_t v33 = (void *)MEMORY[0x1E4F28D58];
        uint64_t v34 = [v16 row] + 1;
        goto LABEL_30;
      }
    }
    else
    {
      double v32 = v41;
      if (!v31)
      {
        if (a6 == 3) {
          a6 = 2;
        }
        goto LABEL_28;
      }
      id v23 = v16;
      if (v31 != -1)
      {
LABEL_31:

LABEL_32:
        if (a6 == 3)
        {
          char v37 = objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler", v18);
          uint64_t v38 = _UITableViewStringFromDropIntent(3uLL);
          SEL v39 = a2;
          id v40 = (void *)v38;
          [v37 handleFailureInMethod:v39, self, @"UITableView.m", 15063, @"UITableView internal inconsistency: %@ must be resolved to a concrete value", v38 object file lineNumber description];
        }
        goto LABEL_34;
      }
      if (v20)
      {
        uint64_t v33 = (void *)MEMORY[0x1E4F28D58];
        uint64_t v34 = [v16 row] - 1;
LABEL_30:
        id v23 = objc_msgSend(v33, "indexPathForRow:inSection:", v34, objc_msgSend(v16, "section"));

        a6 = 1;
        goto LABEL_31;
      }
    }
    a6 = 1;
LABEL_28:
    id v23 = v16;
    goto LABEL_31;
  }
  if (a6 == 3) {
    a6 = 1;
  }
  id v23 = v16;
LABEL_34:
  CGFloat v35 = [v15 _updatedDropProposalWithDropOperation:a5 dropIntent:a6 adjustedTargetIndexPath:v23];

  return v35;
}

- (void)_updateDropTargetAppearanceWithTargetIndexPath:(id)a3 dropProposal:(id)a4 dropSession:(id)a5
{
  id v22 = a3;
  uint64_t v7 = [a4 _dropAction];
  id v8 = [(_UITableViewDragController *)self->_dragController draggedCell];
  rowData = self->_rowData;
  if (rowData) {
    rowData = (UITableViewRowData *)rowData->_gapIndexPath;
  }
  id v10 = rowData;
  BOOL v11 = v10 != 0;

  uint64_t v12 = [(_UITableViewDragController *)self->_dragController indexPaths];
  unint64_t v13 = [v12 count];

  if (v13 > 1)
  {
    id v14 = self->_rowData;
    if (v14)
    {
      -[UITableViewRowData removeGap]((uint64_t)self->_rowData);
      v14->_gapRowdouble Height = 0.0;
    }
    [(UITableView *)self _endDragAndDropReordering];
    if (v7 == 3) {
      goto LABEL_7;
    }
    BOOL v11 = 0;
    int v15 = 0;
    goto LABEL_21;
  }
  if (v22 && !v7)
  {
    int v15 = 1;
LABEL_21:
    uint64_t v17 = [(_UITableViewDragController *)self->_dragController draggedIndexPath];
    if (v17) {
      BOOL v18 = v15 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18) {
      [(UITableView *)self _beginDragAndDropReorderingOfIndexPath:v17 cell:v8];
    }
    if ((v11 | v15 ^ 1))
    {
      if ((!v11 | v15))
      {
        if ((v11 & v15) == 1 && v7 != 1) {
          -[UITableViewRowData moveDropTargetGapToIndexPath:]((uint64_t)self->_rowData, v22);
        }
      }
      else
      {
        double v19 = self->_rowData;
        if (v19)
        {
          -[UITableViewRowData removeGap]((uint64_t)self->_rowData);
          v19->_gapRowdouble Height = 0.0;
        }
      }
    }
    else
    {
      -[UITableViewRowData addDropTargetGapAtIndexPath:]((uint64_t)self->_rowData, v22);
    }

    goto LABEL_35;
  }
  if (v10) {
    BOOL v16 = v7 == 1;
  }
  else {
    BOOL v16 = 0;
  }
  int v15 = v16;
  if (v7 != 3) {
    goto LABEL_21;
  }
  if (!v10) {
LABEL_7:
  }
    [(UITableView *)self _endDragAndDropReordering];
LABEL_35:
  [(UITableView *)self _updateTopSeparatorForVisibleCells];
  if (v7 != 1 || v22 == 0) {
    id v21 = 0;
  }
  else {
    id v21 = v22;
  }
  [(UITableView *)self _updateDropStateForVisibleCellsForActiveDrop:v7 != 3 dropTargetIndexPath:v21];
  [(UITableView *)self _animateTableViewContentToNewLayoutWithDuration:v8 reorderingCell:0 additionalAnimations:0.3];
}

- (void)_removeDropTargetAndResetAppearance
{
  rowData = self->_rowData;
  if (rowData)
  {
    -[UITableViewRowData removeGap]((uint64_t)self->_rowData);
    rowData->_gapRowdouble Height = 0.0;
  }
  [(UITableView *)self _endDragAndDropReordering];
  [(UITableView *)self _updateTopSeparatorForVisibleCells];
  [(UITableView *)self _updateDropStateForVisibleCellsForActiveDrop:0 dropTargetIndexPath:0];
  [(UITableView *)self _animateTableViewContentToNewLayout];
}

- (void)_beginDragAndDropReorderingOfIndexPath:(id)a3 cell:(id)a4
{
  rowData = self->_rowData;
  id v8 = a4;
  id v7 = a3;
  -[UITableViewRowData setDraggedIndexPath:]((uint64_t)rowData, v7);
  [(UITableView *)self _updateDragStateForCell:v8 atIndexPath:v7];

  -[_UITableViewSubviewManager setReorderingCell:]((id *)&self->_subviewManager->super.isa, v8);
}

- (void)_endDragAndDropReordering
{
  -[UITableViewRowData setDraggedIndexPath:]((uint64_t)self->_rowData, 0);
  subviewManager = self->_subviewManager;
  -[_UITableViewSubviewManager setReorderingCell:]((id *)&subviewManager->super.isa, 0);
}

- (void)_dropExited:(id)a3
{
  id v13 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (WeakRetained)
  {
    CGFloat v5 = WeakRetained;
    id v6 = objc_loadWeakRetained((id *)&self->_dropDelegate);
    char v7 = objc_opt_respondsToSelector();

    if (v7)
    {
      id v8 = [(UITableView *)self _dropDelegateProxy];
      [v8 tableView:self dropSessionDidExit:v13];
LABEL_7:

      goto LABEL_8;
    }
  }
  id v9 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  if (v9)
  {
    id v10 = v9;
    id v11 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    char v12 = objc_opt_respondsToSelector();

    if (v12)
    {
      id v8 = [(UITableView *)self _dragDestinationDelegateProxy];
      [v8 _tableView:self dropSessionDidExit:v13];
      goto LABEL_7;
    }
  }
LABEL_8:
}

- (void)_dropEnded:(id)a3
{
  id v13 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  if (WeakRetained)
  {
    CGFloat v5 = WeakRetained;
    id v6 = objc_loadWeakRetained((id *)&self->_dropDelegate);
    char v7 = objc_opt_respondsToSelector();

    if (v7)
    {
      id v8 = [(UITableView *)self _dropDelegateProxy];
      [v8 tableView:self dropSessionDidEnd:v13];
LABEL_7:

      goto LABEL_8;
    }
  }
  id v9 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  if (v9)
  {
    id v10 = v9;
    id v11 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    char v12 = objc_opt_respondsToSelector();

    if (v12)
    {
      id v8 = [(UITableView *)self _dragDestinationDelegateProxy];
      [v8 _tableView:self dropSessionDidEnd:v13];
      goto LABEL_7;
    }
  }
LABEL_8:
}

- (void)_performDrop:(id)a3 withDropCoordinator:(id)a4 forceHandleAsReorder:(BOOL)a5
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v8 = a4;
  id v9 = [v8 proposal];
  unint64_t v10 = [v9 operation];

  if (v10 <= 1)
  {
    id v40 = [MEMORY[0x1E4F28B00] currentHandler];
    CGRect v41 = NSStringFromSelector(a2);
    [v40 handleFailureInMethod:a2, self, @"UITableView.m", 15208, @"UITableView internal inconsistency: the drop action should never be Cancel or Forbidden in %@", v41 object file lineNumber description];
  }
  id v11 = [v8 proposal];
  uint64_t v12 = [v11 intent];

  if (v12 == 3)
  {
    id v42 = [MEMORY[0x1E4F28B00] currentHandler];
    char v43 = _UITableViewStringFromDropIntent(3uLL);
    unsigned int v44 = NSStringFromSelector(a2);
    [v42 handleFailureInMethod:a2, self, @"UITableView.m", 15210, @"UITableView internal inconsistency: the drop action should never be %@ in %@", v43, v44 object file lineNumber description];
  }
  id v13 = [(_UITableViewDragController *)self->_dragController draggedIndexPath];
  if (v13) {
    BOOL v14 = v10 == 3;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14 && v12 == 1)
  {
    BOOL v16 = [v8 items];
    uint64_t v17 = [v16 count];

    if (v17 == 1)
    {
      if (dyld_program_sdk_at_least())
      {
        if (![(UITableView *)self _canMoveRowAtIndexPath:v13]) {
          goto LABEL_16;
        }
LABEL_24:
        long long v24 = [v8 destinationIndexPath];
        v53[0] = MEMORY[0x1E4F143A8];
        v53[1] = 3221225472;
        v53[2] = __69__UITableView__performDrop_withDropCoordinator_forceHandleAsReorder___block_invoke;
        v53[3] = &unk_1E52DCB30;
        v53[4] = self;
        id v25 = v13;
        id v54 = v25;
        id v26 = v24;
        id v55 = v26;
        [(UITableView *)self _performInternalBatchUpdates:v53];
        id v48 = v26;
        unint64_t v47 = [(UITableView *)self _cellForRowAtIndexPath:v26 usingPresentationValues:1];
        if (v47)
        {
          uint64_t v45 = v13;
          uint64_t v46 = self;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          double v27 = v8;
          double v28 = [v8 items];
          uint64_t v29 = [v28 countByEnumeratingWithState:&v49 objects:v56 count:16];
          if (v29)
          {
            uint64_t v30 = v29;
            uint64_t v31 = *(void *)v50;
            do
            {
              for (uint64_t i = 0; i != v30; ++i)
              {
                if (*(void *)v50 != v31) {
                  objc_enumerationMutation(v28);
                }
                uint64_t v33 = *(void **)(*((void *)&v49 + 1) + 8 * i);
                uint64_t v34 = [v33 sourceIndexPath];
                if (v34)
                {
                  CGFloat v35 = (void *)v34;
                  id v36 = [v33 sourceIndexPath];
                  int v37 = [v25 isEqual:v36];

                  if (v37)
                  {
                    uint64_t v38 = [(UITableView *)v46 _dropPreviewParametersForIndexPath:v48];
                    SEL v39 = [v33 dragItem];
                    [v27 _dropItem:v39 toCell:v47 withPreviewParameters:v38];
                  }
                }
              }
              uint64_t v30 = [v28 countByEnumeratingWithState:&v49 objects:v56 count:16];
            }
            while (v30);
          }

          id v8 = v27;
          id v13 = v45;
        }

        goto LABEL_37;
      }
      if ((*((unsigned char *)&self->_tableFlags + 3) & 4) != 0) {
        goto LABEL_24;
      }
    }
  }
LABEL_16:
  if (!a5)
  {
    id WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);

    if (WeakRetained)
    {
      double v19 = [(UITableView *)self _dropDelegateProxy];
      [v19 tableView:self performDropWithCoordinator:v8];
LABEL_19:

      goto LABEL_37;
    }
    id v20 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
    if (v20)
    {
      id v21 = v20;
      id v22 = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
      char v23 = objc_opt_respondsToSelector();

      if (v23)
      {
        double v19 = [(UITableView *)self _dragDestinationDelegateProxy];
        [v19 _tableView:self performDropWithCoordinator:v8];
        goto LABEL_19;
      }
    }
  }
LABEL_37:
}

void __69__UITableView__performDrop_withDropCoordinator_forceHandleAsReorder___block_invoke(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __69__UITableView__performDrop_withDropCoordinator_forceHandleAsReorder___block_invoke_2;
  v3[3] = &unk_1E52DCB30;
  void v3[4] = v2;
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 performBatchUpdates:v3 completion:0];
}

id __69__UITableView__performDrop_withDropCoordinator_forceHandleAsReorder___block_invoke_2(uint64_t a1)
{
  return (id)[*(id *)(a1 + 32) _moveRowAtIndexPath:*(void *)(a1 + 40) toIndexPath:*(void *)(a1 + 48) usingPresentationValues:1];
}

- (id)_dropPreviewParametersForIndexPath:(id)a3
{
  id v4 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  char v6 = objc_opt_respondsToSelector();

  if (v6)
  {
    char v7 = [(UITableView *)self _dropDelegateProxy];
    id v8 = [v7 tableView:self dropPreviewParametersForRowAtIndexPath:v4];
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

- (id)_beginAnimatingDropOfCell:(id)a3 isCanceling:(BOOL)a4
{
  BOOL v4 = a4;
  id v6 = a3;
  -[_UITableViewSubviewManager preventReuseOfCell:]((uint64_t)self->_subviewManager, (uint64_t)v6);
  char v7 = [v6 _dropAnimationContainerView];
  if (!v7)
  {
    char v7 = objc_alloc_init(_UITableViewDropAnimationContainerView);
    [v6 _setDropAnimationContainerView:v7];
    double v8 = 0.0;
    if (v4) {
      double v8 = 1.0;
    }
    [(UIView *)v7 setAlpha:v8];
  }
  [(_UITableViewDropAnimationContainerView *)v7 beginDropAnimation];

  return v7;
}

- (void)_endAnimatingDropOfCell:(id)a3
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = [v5 _dropAnimationContainerView];
  if (!v6)
  {
    uint64_t v17 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v18 = NSStringFromSelector(a2);
    [v17 handleFailureInMethod:a2, self, @"UITableView.m", 15296, @"UITableView internal inconsistency: there should always be a drop animation container view for the cell in %@. Cell: %@", v18, v5 object file lineNumber description];
  }
  [v6 endDropAnimation];
  if ([v6 hasCompletedAllDropAnimations])
  {
    char v7 = [v6 cells];
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v23 objects:v28 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v24;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v24 != v10) {
            objc_enumerationMutation(v7);
          }
          [*(id *)(*((void *)&v23 + 1) + 8 * i) _setDropAnimationContainerView:0];
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v23 objects:v28 count:16];
      }
      while (v9);
    }
    [v6 removeFromSuperview];
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v12 = v7;
    uint64_t v13 = [v12 countByEnumeratingWithState:&v19 objects:v27 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v20;
      do
      {
        for (uint64_t j = 0; j != v14; ++j)
        {
          if (*(void *)v20 != v15) {
            objc_enumerationMutation(v12);
          }
          -[_UITableViewSubviewManager resumeReuseOfCell:]((id *)&self->_subviewManager->super.isa, *(void *)(*((void *)&v19 + 1) + 8 * j));
        }
        uint64_t v14 = [v12 countByEnumeratingWithState:&v19 objects:v27 count:16];
      }
      while (v14);
    }
  }
}

- (void)_beginAnimatingDropIntoCell:(id)a3
{
}

- (void)_endAnimatingDropIntoCell:(id)a3
{
}

- (NSMutableArray)_placeholderContexts
{
  placeholderContexts = self->_placeholderContexts;
  if (!placeholderContexts)
  {
    BOOL v4 = [MEMORY[0x1E4F1CA48] array];
    id v5 = self->_placeholderContexts;
    self->_placeholderContexts = v4;

    placeholderContexts = self->_placeholderContexts;
  }
  return placeholderContexts;
}

- (id)_placeholderContextForIndexPath:(id)a3
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (!v5)
  {
    uint64_t v15 = [MEMORY[0x1E4F28B00] currentHandler];
    [v15 handleFailureInMethod:a2, self, @"UITableView.m", 15375, @"Invalid parameter not satisfying: %@", @"indexPath != nil" object file lineNumber description];
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v6 = [(UITableView *)self _placeholderContexts];
  uint64_t v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        id v12 = [(UITableView *)self _currentIndexPathForPlaceholder:v11];
        if ([v12 isEqual:v5])
        {
          id v13 = v11;

          goto LABEL_13;
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
  id v13 = 0;
LABEL_13:

  return v13;
}

- (id)_shadowUpdateForPlaceholder:(id)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  uint64_t v7 = [(UITableView *)self _placeholderContexts];
  char v8 = [v7 containsObject:v5];

  if (has_internal_diagnostics)
  {
    if (v8) {
      goto LABEL_3;
    }
    id v13 = __UIFaultDebugAssertLog();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
      goto LABEL_16;
    }
    uint64_t v14 = NSStringFromSelector(a2);
    int v18 = 138412290;
    long long v19 = v14;
    _os_log_fault_impl(&dword_1853B0000, v13, OS_LOG_TYPE_FAULT, "%@ should never be called with a placeholder context that isn't contained in the placeholderContexts array", (uint8_t *)&v18, 0xCu);
LABEL_15:

LABEL_16:
    goto LABEL_3;
  }
  if ((v8 & 1) == 0)
  {
    long long v17 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_shadowUpdateForPlaceholder____s_category) + 8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v13 = v17;
      uint64_t v14 = NSStringFromSelector(a2);
      int v18 = 138412290;
      long long v19 = v14;
      _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "%@ should never be called with a placeholder context that isn't contained in the placeholderContexts array", (uint8_t *)&v18, 0xCu);
      goto LABEL_15;
    }
  }
LABEL_3:
  uint64_t v9 = [v5 _shadowUpdateIdentifier];
  if (!v9)
  {
    uint64_t v15 = [MEMORY[0x1E4F28B00] currentHandler];
    [v15 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:15392 description:@"UITableView internal inconsistency: cannot get the shadow update for a placeholder that was not inserted (missing shadow update identifier)"];
  }
  uint64_t v10 = [(UITableView *)self _shadowUpdatesController];
  id v11 = [v10 shadowUpdateWithIdentifier:v9];
  if (!v11)
  {
    long long v16 = [MEMORY[0x1E4F28B00] currentHandler];
    [v16 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:15396 description:@"UITableView internal inconsistency: cannot get the shadow update for a placeholder that was not inserted (missing shadow update)"];
  }
  return v11;
}

- (id)_currentIndexPathForPlaceholder:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  uint64_t v7 = [(UITableView *)self _placeholderContexts];
  char v8 = [v7 containsObject:v5];

  if (has_internal_diagnostics)
  {
    if (v8) {
      goto LABEL_3;
    }
    id v12 = __UIFaultDebugAssertLog();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
      goto LABEL_12;
    }
    id v13 = NSStringFromSelector(a2);
    int v15 = 138412290;
    long long v16 = v13;
    _os_log_fault_impl(&dword_1853B0000, v12, OS_LOG_TYPE_FAULT, "%@ should never be called with a placeholder context that isn't contained in the placeholderContexts array", (uint8_t *)&v15, 0xCu);
LABEL_11:

LABEL_12:
    goto LABEL_3;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v14 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_currentIndexPathForPlaceholder____s_category) + 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v12 = v14;
      id v13 = NSStringFromSelector(a2);
      int v15 = 138412290;
      long long v16 = v13;
      _os_log_impl(&dword_1853B0000, v12, OS_LOG_TYPE_ERROR, "%@ should never be called with a placeholder context that isn't contained in the placeholderContexts array", (uint8_t *)&v15, 0xCu);
      goto LABEL_11;
    }
  }
LABEL_3:
  uint64_t v9 = [(UITableView *)self _shadowUpdateForPlaceholder:v5];
  uint64_t v10 = [(UITableView *)self _currentIndexPathForExistingShadowInsertUpdate:v9];

  return v10;
}

- (id)_insertPlaceholderAtIndexPath:(id)a3 withContext:(id)a4
{
  id v7 = a4;
  id v8 = a3;
  uint64_t v9 = [(UITableView *)self _shadowUpdatesController];
  uint64_t v10 = [v9 indexPathAfterShadowUpdates:v8 allowAppendingInsert:1];

  if (!v10)
  {
    int v18 = [MEMORY[0x1E4F28B00] currentHandler];
    [v18 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:15417 description:@"UITableView internal inconsistency: the insertion index path for a placeholder cannot be nil"];
  }
  id v11 = [(UITableView *)self _placeholderContexts];
  [v11 addObject:v7];

  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = __57__UITableView__insertPlaceholderAtIndexPath_withContext___block_invoke;
  void v19[3] = &unk_1E52ED900;
  v19[4] = self;
  id v12 = v10;
  id v21 = v7;
  SEL v22 = a2;
  id v20 = v12;
  id v13 = v7;
  id v14 = [(UITableView *)self _performShadowUpdates:v19];
  int v15 = v21;
  id v16 = v12;

  return v16;
}

void __57__UITableView__insertPlaceholderAtIndexPath_withContext___block_invoke(uint64_t a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void **)(a1 + 32);
  v7[0] = *(void *)(a1 + 40);
  id v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v7 count:1];
  BOOL v4 = [v2 _updateRowsAtIndexPaths:v3 withUpdateAction:0 rowAnimation:0 usingPresentationValues:1];

  id v5 = [v4 firstObject];
  if (!v5)
  {
    id v6 = [MEMORY[0x1E4F28B00] currentHandler];
    [v6 handleFailureInMethod:*(void *)(a1 + 56) object:*(void *)(a1 + 32) file:@"UITableView.m" lineNumber:15424 description:@"UITableView internal inconsistency: missing identifier for placeholder insertion update"];
  }
  [*(id *)(a1 + 48) _setShadowUpdateIdentifier:v5];
}

- (id)_deletePlaceholderForContext:(id)a3
{
  id v4 = a3;
  id v5 = [(UITableView *)self _placeholderContexts];
  int v6 = [v5 containsObject:v4];

  if (v6)
  {
    id v7 = [(UITableView *)self _shadowUpdateForPlaceholder:v4];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __44__UITableView__deletePlaceholderForContext___block_invoke;
    v10[3] = &unk_1E52D9F98;
    void v10[4] = self;
    id v11 = v4;
    id v8 = [(UITableView *)self _revertExistingShadowInsertUpdate:v7 withAlongsideUpdates:v10];
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void __44__UITableView__deletePlaceholderForContext___block_invoke(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _placeholderContexts];
  [v2 removeObject:*(void *)(a1 + 40)];
}

- (void)_deleteAllPlaceholderCells
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = [(UITableView *)self _placeholderContexts];
  id v4 = (void *)[v3 copy];

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = -[UITableView _deletePlaceholderForContext:](self, "_deletePlaceholderForContext:", *(void *)(*((void *)&v11 + 1) + 8 * v9++), (void)v11);
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v7);
  }
}

- (BOOL)_commitPlaceholderInsertionWithContext:(id)a3 dataSourceUpdates:(id)a4
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = [(UITableView *)self _placeholderContexts];
  LODWORD(v10) = [v9 containsObject:v7];

  if (v10)
  {
    long long v11 = [(UITableView *)self _shadowUpdateForPlaceholder:v7];
    long long v12 = [(UITableView *)self _shadowUpdatesController];
    long long v13 = -[UICollectionViewUpdateItem _indexPath](v11);
    long long v14 = [v12 indexPathBeforeShadowUpdates:v13 startingBeforeUpdate:v11];

    if (!v14)
    {
      double v27 = [MEMORY[0x1E4F28B00] currentHandler];
      [v27 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:15469 description:@"UITableView internal inconsistency: the data source index path of a placeholder that exists should never be nil"];
    }
    SEL v33 = a2;
    int v15 = [(UITableView *)self _currentIndexPathForExistingShadowInsertUpdate:v11];
    uint64_t v16 = [(UITableView *)self _cellForRowAtIndexPath:v15 usingPresentationValues:1];
    uint64_t v17 = v16;
    if (v16)
    {
      id v36 = [v16 _dropAnimationContainerView];
    }
    else
    {
      id v36 = 0;
    }
    int v18 = [(UITableView *)self _deletePlaceholderForContext:v7];
    if (!v18)
    {
      [MEMORY[0x1E4F28B00] currentHandler];
      char v35 = (char)v10;
      id v10 = v17;
      double v28 = v15;
      uint64_t v29 = v11;
      id v30 = v8;
      v32 = uint64_t v31 = v12;
      [v32 handleFailureInMethod:v33 object:self file:@"UITableView.m" lineNumber:15480 description:@"UITableView internal inconsistency: the presentation index path of a placeholder that exists should never be nil"];

      long long v12 = v31;
      id v8 = v30;
      long long v11 = v29;
      int v15 = v28;
      uint64_t v17 = v10;
      LOBYTE(v10) = v35;
    }
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    v37[2] = __72__UITableView__commitPlaceholderInsertionWithContext_dataSourceUpdates___block_invoke;
    v37[3] = &unk_1E52E65E0;
    v37[4] = self;
    id v19 = v14;
    id v38 = v19;
    id v40 = v8;
    id v20 = v18;
    id v39 = v20;
    [(UITableView *)self _performInternalBatchUpdates:v37];
    if (v36)
    {
      char v34 = (char)v10;
      id v10 = v17;
      id v21 = v15;
      SEL v22 = v11;
      id v23 = v8;
      long long v24 = v12;
      long long v25 = [(UITableView *)self _cellForRowAtIndexPath:v20 usingPresentationValues:1];
      if (v25)
      {
        -[_UITableViewSubviewManager preventReuseOfCell:]((uint64_t)self->_subviewManager, (uint64_t)v25);
        [v25 _setDropAnimationContainerView:v36];
      }

      long long v12 = v24;
      id v8 = v23;
      long long v11 = v22;
      int v15 = v21;
      uint64_t v17 = v10;
      LOBYTE(v10) = v34;
    }
  }
  return (char)v10;
}

void __72__UITableView__commitPlaceholderInsertionWithContext_dataSourceUpdates___block_invoke(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __72__UITableView__commitPlaceholderInsertionWithContext_dataSourceUpdates___block_invoke_2;
  v3[3] = &unk_1E52E65E0;
  void v3[4] = v2;
  id v4 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  [v2 performBatchUpdates:v3 completion:0];
}

void __72__UITableView__commitPlaceholderInsertionWithContext_dataSourceUpdates___block_invoke_2(void *a1)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1[4] + 3099) & 0x20) != 0)
  {
    id v2 = [[UICollectionViewUpdateItem alloc] initWithAction:0 forIndexPath:a1[5]];
    uint64_t v3 = a1[4];
    id v4 = *(void **)(v3 + 2384);
    *(void *)(v3 + 2384) = v2;

    (*(void (**)(void))(a1[7] + 16))();
    uint64_t v5 = a1[4];
    id v6 = *(void **)(v5 + 2384);
    *(void *)(v5 + 2384) = 0;
  }
  else
  {
    (*(void (**)(void))(a1[7] + 16))();
  }
  id v7 = (void *)a1[4];
  v10[0] = a1[6];
  id v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v10 count:1];
  id v9 = (id)[v7 _updateRowsAtIndexPaths:v8 withUpdateAction:0 rowAnimation:0 usingPresentationValues:1];
}

- (double)_heightForShadowRowAtIndexPath:(id)a3
{
  id v5 = a3;
  double rowHeight = -1.0;
  if ((*((unsigned char *)&self->_tableFlags + 26) & 0x40) == 0)
  {
    id v7 = [(UITableView *)self _placeholderContextForIndexPath:v5];
    if (!v7)
    {
      long long v11 = [MEMORY[0x1E4F28B00] currentHandler];
      [v11 handleFailureInMethod:a2, self, @"UITableView.m", 15538, @"UITableView internal inconsistency: missing placeholder context for this index path: %@", v5 object file lineNumber description];
    }
    [v7 rowHeight];
    double rowHeight = v8;
    if (v8 == -1.0)
    {
      if ((*((unsigned char *)&self->_tableFlags + 24) & 0x10) != 0
        && [(UITableView *)self _estimatesRowHeights])
      {
        *((void *)&self->_tableFlags + 3) |= 0x400000uLL;
        [(UITableView *)self _heightForRowAtIndexPath:v5];
        double rowHeight = v9;
        *((void *)&self->_tableFlags + 3) &= ~0x400000uLL;
      }
      else if (self->_rowHeight == -1.0)
      {
        double rowHeight = 44.0;
      }
      else
      {
        double rowHeight = self->_rowHeight;
      }
    }
  }
  return rowHeight;
}

- (id)_cellForShadowRowAtIndexPath:(id)a3
{
  id v5 = a3;
  id v6 = [(UITableView *)self _placeholderContextForIndexPath:v5];
  if (!v6)
  {
    long long v12 = [MEMORY[0x1E4F28B00] currentHandler];
    [v12 handleFailureInMethod:a2, self, @"UITableView.m", 15571, @"UITableView internal inconsistency: missing placeholder context for this index path: %@", v5 object file lineNumber description];
  }
  id v7 = [v6 reuseIdentifier];
  double v8 = [(UITableView *)self dequeueReusableCellWithIdentifier:v7];
  if (!v8)
  {
    long long v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"UITableView.m", 15575, @"Unable to dequeue a placeholder cell with identifier %@ - must register a nib or a class for the identifier or connect a prototype cell in a storyboard", v7 object file lineNumber description];
  }
  uint64_t v9 = [v6 cellUpdateHandler];
  id v10 = (void *)v9;
  if (v9) {
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v8);
  }

  return v8;
}

- (id)_shadowUpdatesController
{
  shadowUpdatesController = self->_shadowUpdatesController;
  if (!shadowUpdatesController)
  {
    id v4 = [[_UITableViewShadowUpdatesController alloc] initWithTableView:self];
    id v5 = self->_shadowUpdatesController;
    self->_shadowUpdatesController = v4;

    shadowUpdatesController = self->_shadowUpdatesController;
  }
  return shadowUpdatesController;
}

- (id)_performShadowUpdates:(id)a3
{
  id v5 = a3;
  if (!v5)
  {
    id v19 = [MEMORY[0x1E4F28B00] currentHandler];
    [v19 handleFailureInMethod:a2, self, @"UITableView.m", 15604, @"Invalid parameter not satisfying: %@", @"shadowUpdates != nil" object file lineNumber description];
  }
  id v6 = [(UITableView *)self _shadowUpdatesController];
  id v7 = [v6 shadowUpdates];
  uint64_t v8 = [v7 count];

  unint64_t v9 = *((void *)&self->_tableFlags + 3);
  *((void *)&self->_tableFlags + 3) = v9 | 0x8000000;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __37__UITableView__performShadowUpdates___block_invoke;
  v20[3] = &unk_1E52DA160;
  void v20[4] = self;
  id v10 = v5;
  id v21 = v10;
  [(UITableView *)self _performInternalBatchUpdates:v20];
  *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFFF7FFFFFFLL | (((v9 >> 27) & 1) << 27);
  long long v11 = [v6 shadowUpdates];
  uint64_t v12 = [v11 count];

  long long v13 = objc_msgSend(MEMORY[0x1E4F28E60], "indexSetWithIndexesInRange:", 0, v12);
  objc_msgSend(v13, "removeIndexesInRange:", 0, v8);
  if ([v13 firstIndex] == 0x7FFFFFFFFFFFFFFFLL)
  {
    long long v14 = (void *)MEMORY[0x1E4F1CBF0];
  }
  else
  {
    uint64_t v15 = [v13 firstIndex];
    uint64_t v16 = [v13 count];
    uint64_t v17 = [v6 shadowUpdates];
    long long v14 = objc_msgSend(v17, "subarrayWithRange:", v15, v16);
  }
  return v14;
}

uint64_t __37__UITableView__performShadowUpdates___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) performBatchUpdates:*(void *)(a1 + 40) completion:0];
}

- (BOOL)_isPerformingRevertingShadowUpdates
{
  return (*((unsigned __int8 *)&self->_tableFlags + 27) >> 4) & 1;
}

- (void)_performRevertingShadowUpdates:(id)a3
{
  id v5 = a3;
  if (!v5)
  {
    uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
    [v8 handleFailureInMethod:a2, self, @"UITableView.m", 15635, @"Invalid parameter not satisfying: %@", @"revertingShadowUpdates != nil" object file lineNumber description];
  }
  unint64_t v6 = *((void *)&self->_tableFlags + 3);
  *((void *)&self->_tableFlags + 3) = v6 | 0x10000000;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __46__UITableView__performRevertingShadowUpdates___block_invoke;
  v9[3] = &unk_1E52DA160;
  void v9[4] = self;
  id v10 = v5;
  id v7 = v5;
  [(UITableView *)self _performInternalBatchUpdates:v9];
  *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFFEFFFFFFFLL | (((v6 >> 28) & 1) << 28);
}

uint64_t __46__UITableView__performRevertingShadowUpdates___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) performBatchUpdates:*(void *)(a1 + 40) completion:0];
}

- (id)_currentIndexPathForExistingShadowInsertUpdate:(id)a3
{
  id v5 = a3;
  if (!v5)
  {
    long long v13 = [MEMORY[0x1E4F28B00] currentHandler];
    [v13 handleFailureInMethod:a2, self, @"UITableView.m", 15648, @"Invalid parameter not satisfying: %@", @"shadowInsertUpdate != nil" object file lineNumber description];
  }
  unint64_t v6 = [(UITableView *)self _shadowUpdatesController];
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  uint64_t v8 = [v6 shadowUpdates];
  char v9 = [v8 containsObject:v5];

  if (has_internal_diagnostics)
  {
    if ((v9 & 1) == 0)
    {
      long long v14 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int v18 = 0;
        _os_log_fault_impl(&dword_1853B0000, v14, OS_LOG_TYPE_FAULT, "Attempted to request the index path of an update that isn't actually an existing shadow update", v18, 2u);
      }
    }
  }
  else if ((v9 & 1) == 0)
  {
    uint64_t v16 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_currentIndexPathForExistingShadowInsertUpdate____s_category)+ 8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1853B0000, v16, OS_LOG_TYPE_ERROR, "Attempted to request the index path of an update that isn't actually an existing shadow update", buf, 2u);
    }
  }
  id v10 = -[UICollectionViewUpdateItem _indexPath](v5);
  long long v11 = [v6 indexPathAfterShadowUpdates:v10 startingAtUpdate:v5];

  if (!v11)
  {
    uint64_t v15 = [MEMORY[0x1E4F28B00] currentHandler];
    [v15 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:15655 description:@"UITableView internal inconsistency: the current index path of an inserted shadow update should never be nil"];
  }
  return v11;
}

- (id)_revertExistingShadowInsertUpdate:(id)a3 withAlongsideUpdates:(id)a4
{
  id v7 = a3;
  id v8 = a4;
  if (!v7)
  {
    int v18 = [MEMORY[0x1E4F28B00] currentHandler];
    [v18 handleFailureInMethod:a2, self, @"UITableView.m", 15664, @"Invalid parameter not satisfying: %@", @"shadowInsertUpdate != nil" object file lineNumber description];
  }
  if ([v7 updateAction])
  {
    id v19 = [MEMORY[0x1E4F28B00] currentHandler];
    [v19 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:15665 description:@"This method only supports reverting insertion shadow updates"];
  }
  char v9 = [(UITableView *)self _currentIndexPathForExistingShadowInsertUpdate:v7];
  id v10 = [(UITableView *)self _shadowUpdatesController];
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  void v20[2] = __70__UITableView__revertExistingShadowInsertUpdate_withAlongsideUpdates___block_invoke;
  v20[3] = &unk_1E5309018;
  id v21 = v10;
  id v22 = v7;
  id v25 = v8;
  id v23 = self;
  id v11 = v9;
  id v24 = v11;
  id v12 = v7;
  id v13 = v10;
  id v14 = v8;
  [(UITableView *)self _performRevertingShadowUpdates:v20];
  uint64_t v15 = v24;
  id v16 = v11;

  return v16;
}

void __70__UITableView__revertExistingShadowInsertUpdate_withAlongsideUpdates___block_invoke(uint64_t a1)
{
  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  [*(id *)(a1 + 32) removeShadowUpdate:*(void *)(a1 + 40)];
  uint64_t v3 = *(void **)(a1 + 48);
  v6[0] = *(void *)(a1 + 56);
  id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v6 count:1];
  id v5 = (id)[v3 _updateRowsAtIndexPaths:v4 withUpdateAction:1 rowAnimation:0 usingPresentationValues:1];
}

- (BOOL)_isReorderControlActiveForCell:(id)a3
{
  return ![(UITableView *)self hasActiveDrag];
}

- (BOOL)_beginReorderingForCell:(id)a3 touch:(id)a4
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  BOOL v11 = [(UITableView *)self _isReorderControlActiveForCell:v8];
  if (has_internal_diagnostics)
  {
    if (v11) {
      goto LABEL_3;
    }
    id v38 = __UIFaultDebugAssertLog();
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_FAULT)) {
      goto LABEL_39;
    }
    id v39 = NSStringFromSelector(a2);
    *(_DWORD *)long long buf = 138412546;
    long long v51 = v39;
    __int16 v52 = 2112;
    id v53 = v8;
    _os_log_fault_impl(&dword_1853B0000, v38, OS_LOG_TYPE_FAULT, "It should not be possible for %@ to be called if the reorder control is not active for the cell: %@", buf, 0x16u);
LABEL_38:

LABEL_39:
    goto LABEL_3;
  }
  if (!v11)
  {
    id v40 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_beginReorderingForCell_touch____s_category) + 8);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      id v38 = v40;
      id v39 = NSStringFromSelector(a2);
      *(_DWORD *)long long buf = 138412546;
      long long v51 = v39;
      __int16 v52 = 2112;
      id v53 = v8;
      _os_log_impl(&dword_1853B0000, v38, OS_LOG_TYPE_ERROR, "It should not be possible for %@ to be called if the reorder control is not active for the cell: %@", buf, 0x16u);
      goto LABEL_38;
    }
  }
LABEL_3:
  if ([(UITableView *)self _dragAndDropUsedForReordering])
  {
    [(_UITableViewDragController *)self->_dragController immediatelyBeginDragWithTouch:v9];
    BOOL v12 = 0;
  }
  else
  {
    obuint64_t j = a3;
    id v42 = v9;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id v13 = [v9 gestureRecognizers];
    uint64_t v14 = [v13 countByEnumeratingWithState:&v44 objects:v49 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v45;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v45 != v16) {
            objc_enumerationMutation(v13);
          }
          int v18 = *(void **)(*((void *)&v44 + 1) + 8 * i);
          if (_UISheetInteractionGestureIsForInteractiveDismiss(v18))
          {
            id v19 = (void *)UIApp;
            id v48 = v18;
            id v20 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v48 count:1];
            [v19 _cancelGestureRecognizers:v20];
          }
        }
        uint64_t v15 = [v13 countByEnumeratingWithState:&v44 objects:v49 count:16];
      }
      while (v15);
    }

    -[_UITableViewSubviewManager removeAllPrefetchedCells]((id *)&self->_subviewManager->super.isa);
    [(UITableView *)self _beginAnimatingCells];
    if ([v8 _usingBackgroundViewConfiguration]) {
      [v8 _setAnimating:0];
    }
    else {
      [v8 _setAnimating:1 clippingAdjacentCells:(*((void *)&self->_tableFlags + 2) >> 54) & 1];
    }
    uint64_t v21 = [(UITableView *)self _reorderingSupport];
    id v22 = *(void **)(v21 + 8);
    *(void *)(v21 + 8) = 0;

    id v23 = *(void **)(v21 + 16);
    *(void *)(v21 + 16) = 0;

    uint64_t v24 = [(NSMutableArray *)self->_visibleCells indexOfObject:v8];
    BOOL v12 = v24 != 0x7FFFFFFFFFFFFFFFLL;
    id v9 = v42;
    if (v24 != 0x7FFFFFFFFFFFFFFFLL)
    {
      NSUInteger v25 = self->_visibleRows.location + v24;
      objc_storeStrong((id *)(v21 + 8), obj);
      uint64_t v26 = [(UITableView *)self indexPathForRowAtGlobalRow:v25];
      double v27 = *(void **)(v21 + 16);
      *(void *)(v21 + 16) = v26;

      *(unsigned char *)(v21 + 32) &= 0xF3u;
      if ((*((unsigned char *)&self->_tableFlags + 8) & 0x40) != 0)
      {
        double v28 = [(UITableView *)self _delegateProxy];
        [v28 tableView:self willBeginReorderingRowAtIndexPath:*(void *)(v21 + 16)];
      }
      objc_storeStrong((id *)(v21 + 24), *(id *)(v21 + 16));
      -[UITableViewRowData setReorderedIndexPath:]((uint64_t)self->_rowData, *(void **)(v21 + 16));
      -[UITableViewRowData addGapAtIndexPath:]((uint64_t)self->_rowData, *(void **)(v21 + 16));
      [(UITableView *)self _updateTopSeparatorForVisibleCells];
      uint64_t v29 = [(UITableView *)self _cellContainerView];
      [v29 bringSubviewToFront:v8];

      if (([v8 isSelected] & 1) == 0 && (objc_msgSend(v8, "isHighlighted") & 1) == 0)
      {
        [v8 _saveOpaqueViewState:v8];
        [v8 _setOpaque:0 forSubview:v8];
      }
      if (([v8 _usingBackgroundViewConfiguration] & 1) == 0)
      {
        [(UITableConstants *)self->_constants defaultAlphaForReorderingCell];
        objc_msgSend(v8, "setAlpha:");
      }
      [v8 setSeparatorStyle:0];
      [v8 _setReordering:1];
      BOOL v30 = [(UIScrollView *)self isScrollEnabled];
      *(unsigned char *)(v21 + 64) = v30;
      if (v30)
      {
        *(unsigned char *)(v21 + 65) = [(UIScrollView *)self _adjustsContentInsetWhenScrollDisabled];
        [(UIScrollView *)self _setAdjustsContentInsetWhenScrollDisabled:1];
        [(UIScrollView *)self setScrollEnabled:0];
      }
      uint64_t v31 = [(UIView *)self window];
      [v31 beginDisablingInterfaceAutorotation];

      *(unsigned char *)(v21 + 32) = *(unsigned char *)(v21 + 32) & 0xFE | [(UIScrollView *)self showsHorizontalScrollIndicator];
      if ([(UIScrollView *)self showsVerticalScrollIndicator]) {
        char v32 = 2;
      }
      else {
        char v32 = 0;
      }
      *(unsigned char *)(v21 + 32) = *(unsigned char *)(v21 + 32) & 0xFD | v32;
      [(UITableView *)self setShowsHorizontalScrollIndicator:0];
      [(UIScrollView *)self setShowsVerticalScrollIndicator:0];
      [v42 locationInView:self];
      uint64_t v34 = v33;
      uint64_t v36 = v35;
      -[_UIDragFeedbackGenerator userInteractionStartedAtLocation:](self->_reorderFeedbackGenerator, "userInteractionStartedAtLocation:");
      v43[0] = MEMORY[0x1E4F143A8];
      v43[1] = 3221225472;
      void v43[2] = __45__UITableView__beginReorderingForCell_touch___block_invoke;
      v43[3] = &unk_1E52DD178;
      v43[4] = self;
      v43[5] = v34;
      v43[6] = v36;
      [(id)UIApp _performBlockAfterCATransactionCommits:v43];
      [(UITableView *)self _reorderPositionChangedForCell:v8];
    }
  }
  return v12;
}

uint64_t __45__UITableView__beginReorderingForCell_touch___block_invoke(double *a1)
{
  uint64_t result = [*(id *)(*((void *)a1 + 4) + 3032) isActive];
  if (result)
  {
    uint64_t v3 = *(void **)(*((void *)a1 + 4) + 3032);
    double v4 = a1[5];
    double v5 = a1[6];
    return objc_msgSend(v3, "draggedObjectLiftedAtLocation:", v4, v5);
  }
  return result;
}

- (void)_draggingReorderingCell:(id)a3 yDelta:(double)a4 touch:(id)a5
{
  id v7 = a5;
  id v8 = a3;
  [v8 frame];
  double v39 = v10;
  double v40 = v9;
  double v38 = v11;
  double v13 = v12;
  uint64_t v14 = [(UITableView *)self _scrollView];
  [v14 contentSize];
  double v16 = v15;

  uint64_t v17 = [(UITableView *)self _scrollView];
  [v17 bounds];
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  CGFloat v23 = v22;
  CGFloat v25 = v24;

  double v26 = round(v13 * 0.5);
  v43.origin.double x = v19;
  v43.origin.double y = v21;
  v43.size.double width = v23;
  v43.size.double height = v25;
  double v27 = CGRectGetMinY(v43) - v26;
  if (0.0 - v26 >= v27) {
    double v27 = 0.0 - v26;
  }
  double v28 = round(v27);
  double v29 = v16 - v26;
  v44.origin.double x = v19;
  v44.origin.double y = v21;
  v44.size.double width = v23;
  v44.size.double height = v25;
  double v30 = CGRectGetMaxY(v44) - v26;
  if (v29 < v30) {
    double v30 = v29;
  }
  double v31 = round(v30);
  double v32 = v38 + a4;
  if (v28 >= v38 + a4) {
    double v32 = v28;
  }
  if (v32 >= v31) {
    double v32 = v31;
  }
  objc_msgSend(v8, "setFrame:", v40, v32, v39, v13);
  [(UITableView *)self _reorderPositionChangedForCell:v8];

  reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
  [v7 locationInView:self];
  double v35 = v34;
  double v37 = v36;

  -[_UIDragFeedbackGenerator positionUpdatedAtLocation:](reorderFeedbackGenerator, "positionUpdatedAtLocation:", v35, v37);
}

- (id)_adjustedIndexPath:(id)a3 forMoveOfIndexPath:(id)a4 toIndexPath:(id)a5
{
  id v7 = a3;
  id v8 = a4;
  id v9 = a5;
  if ([v7 isEqual:v8])
  {
    id v10 = v9;
  }
  else
  {
    id v10 = v7;
    uint64_t v11 = [v10 section];
    if (v11 == [v8 section])
    {
      uint64_t v12 = [v10 row];
      if (v12 > [v8 row])
      {
        uint64_t v13 = objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", objc_msgSend(v10, "row") - 1, objc_msgSend(v10, "section"));

        id v10 = (id)v13;
      }
    }
    uint64_t v14 = [v10 section];
    if (v14 == [v9 section])
    {
      uint64_t v15 = [v10 row];
      if (v15 >= [v9 row])
      {
        uint64_t v16 = objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", objc_msgSend(v10, "row") + 1, objc_msgSend(v10, "section"));

        id v10 = (id)v16;
      }
    }
  }

  return v10;
}

- (void)adjustIndexPaths:(id)a3 forMoveOfIndexPath:(id)a4 toIndexPath:(id)a5
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (void *)[v8 copy];
  [v8 removeAllObjects];
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v12 = v11;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)v19;
    do
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v19 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = -[UITableView _adjustedIndexPath:forMoveOfIndexPath:toIndexPath:](self, "_adjustedIndexPath:forMoveOfIndexPath:toIndexPath:", *(void *)(*((void *)&v18 + 1) + 8 * v16), v9, v10, (void)v18);
        [v8 addObject:v17];

        ++v16;
      }
      while (v14 != v16);
      uint64_t v14 = [v12 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v14);
  }
}

- (void)_endReorderingForCell:(id)a3 wasCancelled:(BOOL)a4 animated:(BOOL)a5
{
  BOOL v5 = a5;
  BOOL v6 = a4;
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  id v8 = a3;
  uint64_t v9 = [(UITableView *)self _reorderingSupport];
  id v10 = *(void **)(v9 + 16);
  if (!v10) {
    goto LABEL_61;
  }
  id v11 = v10;
  uint64_t v72 = -[UITableViewRowData globalRowForRowAtIndexPath:]((uint64_t)self->_rowData, v11);
  id v12 = *(void **)(v9 + 16);
  *(void *)(v9 + 16) = 0;

  [(UITableView *)self _stopAutoscrollTimer];
  reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
  [v8 frame];
  double v16 = v15 + v14 * 0.5;
  double v19 = v18 + v17 * 0.5;
  if (v6) {
    -[_UIDragFeedbackGenerator userInteractionCancelledAtLocation:](reorderFeedbackGenerator, "userInteractionCancelledAtLocation:", v16, v19);
  }
  else {
    -[_UIDragFeedbackGenerator userInteractionEndedAtLocation:](reorderFeedbackGenerator, "userInteractionEndedAtLocation:", v16, v19);
  }
  objc_msgSend(v8, "frame", v72);
  CGFloat v21 = v20;
  double v23 = v22;
  CGFloat v25 = v24;
  CGFloat v27 = v26;
  if ((*(unsigned char *)(v9 + 32) & 4) == 0)
  {
    -[UITableViewRowData removeGap]((uint64_t)self->_rowData);
    -[UITableViewRowData setReorderedIndexPath:]((uint64_t)self->_rowData, 0);
    if (v6) {
      objc_storeStrong((id *)(v9 + 24), v10);
    }
    -[UITableViewRowData moveRowAtIndexPathFrom:toIndexPath:]((uint64_t)self->_rowData, v11, *(void **)(v9 + 24));
    [(UITableView *)self adjustIndexPaths:self->_selectedIndexPaths forMoveOfIndexPath:v11 toIndexPath:*(void *)(v9 + 24)];
    [(UITableView *)self adjustIndexPaths:self->_highlightedIndexPaths forMoveOfIndexPath:v11 toIndexPath:*(void *)(v9 + 24)];
    deselectionTransitionIndexPaths = self->_deselectionTransitionIndexPaths;
    if (deselectionTransitionIndexPaths) {
      [(UITableView *)self adjustIndexPaths:deselectionTransitionIndexPaths forMoveOfIndexPath:v11 toIndexPath:*(void *)(v9 + 24)];
    }
    focusedCellIndexPath = self->_focusedCellIndexPath;
    if (focusedCellIndexPath)
    {
      double v30 = [(UITableView *)self _adjustedIndexPath:focusedCellIndexPath forMoveOfIndexPath:v11 toIndexPath:*(void *)(v9 + 24)];
      double v31 = self->_focusedCellIndexPath;
      self->_focusedCellIndexPath = v30;
    }
  }
  BOOL v74 = v5;
  char v32 = *(unsigned char *)(v9 + 32);
  if (!v6 && (*(unsigned char *)(v9 + 32) & 4) == 0)
  {
    [(UITableView *)self _notifyDataSourceForMoveOfRowFromIndexPath:v11 toIndexPath:*(void *)(v9 + 24)];
    char v32 = *(unsigned char *)(v9 + 32);
  }
  if ((v32 & 4) == 0)
  {
    p_visibleRows = &self->_visibleRows;
    rowData = self->_rowData;
    [(UIView *)self bounds];
    self->_visibleRows.NSUInteger location = -[UITableViewRowData globalRowsInRect:canGuess:](rowData, 0, v35, v36, v37, v38);
    self->_visibleRows.NSUInteger length = v39;
    [(UITableView *)self _visibleBounds];
    self->_visibleBounds.origin.double x = v40;
    self->_visibleBounds.origin.double y = v41;
    self->_visibleBounds.size.double width = v42;
    self->_visibleBounds.size.double height = v43;
    uint64_t v44 = [(NSMutableArray *)self->_visibleCells indexOfObject:v8];
    if (v44 != 0x7FFFFFFFFFFFFFFFLL) {
      [(NSMutableArray *)self->_visibleCells removeObjectAtIndex:v44];
    }
    unint64_t v45 = [(UITableView *)self globalRowForRowAtIndexPath:*(void *)(v9 + 24)];
    NSUInteger location = p_visibleRows->location;
    NSUInteger length = self->_visibleRows.length;
    unint64_t v48 = v45 - p_visibleRows->location;
    if (v45 < p_visibleRows->location || v48 >= length)
    {
      if (v44 != 0x7FFFFFFFFFFFFFFFLL)
      {
        self->_visibleRows.NSUInteger length = --length;
        if (v73 == location && v45 > v73 + length - 1) {
          p_visibleRows->NSUInteger location = v73 + 1;
        }
      }
    }
    else
    {
      unint64_t v49 = [(NSMutableArray *)self->_visibleCells count];
      if (v48 <= v49) {
        [(NSMutableArray *)self->_visibleCells insertObject:v8 atIndex:v48];
      }
      if (v44 == 0x7FFFFFFFFFFFFFFFLL)
      {
        NSUInteger v50 = self->_visibleRows.length;
        if (v50 < [(NSMutableArray *)self->_visibleCells count]) {
          ++self->_visibleRows.length;
        }
      }
      if (v48 > v49)
      {
LABEL_32:
        if (os_variant_has_internal_diagnostics())
        {
          uint64_t v54 = __UIFaultDebugAssertLog();
          if (!os_log_type_enabled(v54, OS_LOG_TYPE_FAULT)) {
            goto LABEL_36;
          }
          v99.NSUInteger location = p_visibleRows->location;
          v99.NSUInteger length = self->_visibleRows.length;
          id v55 = NSStringFromRange(v99);
          uint64_t v70 = [(NSMutableArray *)self->_visibleCells count];
          visibleCells = self->_visibleCells;
          *(_DWORD *)long long buf = 138412802;
          double v92 = v55;
          __int16 v93 = 2048;
          uint64_t v94 = v70;
          __int16 v95 = 2112;
          double v96 = visibleCells;
          _os_log_fault_impl(&dword_1853B0000, v54, OS_LOG_TYPE_FAULT, "UITableView internal inconsistency: _visibleRows and _visibleCells mismatch when ending reordering, sacrificing the animation and performing reloadData as a fallback. _visibleRows: %@; _visibleCells.count: %ld, _visibleCells: %@",
            buf,
            0x20u);
        }
        else
        {
          long long v51 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_endReorderingForCell_wasCancelled_animated____s_category)+ 8);
          if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
LABEL_37:
            [(UITableView *)self _performInternalReloadData];
            goto LABEL_38;
          }
          NSUInteger v52 = p_visibleRows->location;
          NSUInteger v53 = self->_visibleRows.length;
          uint64_t v54 = v51;
          v98.NSUInteger location = v52;
          v98.NSUInteger length = v53;
          id v55 = NSStringFromRange(v98);
          uint64_t v56 = [(NSMutableArray *)self->_visibleCells count];
          uint64_t v57 = self->_visibleCells;
          *(_DWORD *)long long buf = 138412802;
          double v92 = v55;
          __int16 v93 = 2048;
          uint64_t v94 = v56;
          __int16 v95 = 2112;
          double v96 = v57;
          _os_log_impl(&dword_1853B0000, v54, OS_LOG_TYPE_ERROR, "UITableView internal inconsistency: _visibleRows and _visibleCells mismatch when ending reordering, sacrificing the animation and performing reloadData as a fallback. _visibleRows: %@; _visibleCells.count: %ld, _visibleCells: %@",
            buf,
            0x20u);
        }

LABEL_36:
        goto LABEL_37;
      }
      NSUInteger length = self->_visibleRows.length;
    }
    if (length != [(NSMutableArray *)self->_visibleCells count]) {
      goto LABEL_32;
    }
  }
LABEL_38:
  if ((*(unsigned char *)(v9 + 32) & 4) != 0)
  {
    [v8 removeFromSuperview];
    [(UITableView *)self _endCellReorderAnimation:0 wasCancelled:v6];
    [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1];
    [(UIView *)self layoutIfNeeded];
  }
  else
  {
    [(UITableView *)self _updateVisibleCellsNow:1];
    [(UITableView *)self _rectForRowAtIndexPath:*(void *)(v9 + 24) usingPresentationValues:1];
    double v59 = v58;
    if (v74) {
      [(id)UIApp setIgnoresInteractionEvents:1];
    }
    if (v59 == v23)
    {
      [(UITableView *)self _endCellReorderAnimation:v74 wasCancelled:v6];
    }
    else
    {
      v100.origin.double x = v21;
      v100.origin.double y = v23;
      v100.size.double width = v25;
      v100.size.double height = v27;
      if (CGRectGetHeight(v100) <= 0.0)
      {
        double v62 = 0.3;
      }
      else
      {
        if (v59 - v23 >= 0.0) {
          double v60 = v59 - v23;
        }
        else {
          double v60 = -(v59 - v23);
        }
        v101.origin.double x = v21;
        v101.origin.double y = v23;
        v101.size.double width = v25;
        v101.size.double height = v27;
        double v61 = v60 / (CGRectGetHeight(v101) * 0.5);
        if (v61 <= 1.0) {
          double v62 = v61 * 0.3;
        }
        else {
          double v62 = 0.3;
        }
      }
      v89[0] = MEMORY[0x1E4F143A8];
      v89[1] = 3221225472;
      v89[2] = __59__UITableView__endReorderingForCell_wasCancelled_animated___block_invoke;
      v89[3] = &__block_descriptor_40_e24_v24__0___v___8___v__B_16l;
      *(double *)&v89[4] = v62;
      v82[0] = MEMORY[0x1E4F143A8];
      v82[1] = 3221225472;
      v82[2] = __59__UITableView__endReorderingForCell_wasCancelled_animated___block_invoke_2;
      v82[3] = &unk_1E52E69B8;
      id v83 = v8;
      CGFloat v85 = v21;
      double v86 = v59;
      CGFloat v87 = v25;
      CGFloat v88 = v27;
      id v84 = (id)v9;
      v79[0] = MEMORY[0x1E4F143A8];
      v79[1] = 3221225472;
      v79[2] = __59__UITableView__endReorderingForCell_wasCancelled_animated___block_invoke_3;
      v79[3] = &unk_1E5309040;
      v79[4] = self;
      BOOL v80 = v74;
      BOOL v81 = v6;
      +[UIView conditionallyAnimate:v74 withAnimation:v89 layout:v82 completion:v79];
    }
  }
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  int v63 = [(UITableView *)self _visibleCellsUsingPresentationValues:1];
  uint64_t v64 = [v63 countByEnumeratingWithState:&v75 objects:v90 count:16];
  if (v64)
  {
    uint64_t v65 = v64;
    uint64_t v66 = *(void *)v76;
    do
    {
      for (uint64_t i = 0; i != v65; ++i)
      {
        if (*(void *)v76 != v66) {
          objc_enumerationMutation(v63);
        }
        uint64_t v68 = *(void *)(*((void *)&v75 + 1) + 8 * i);
        uint64_t v69 = [(UITableView *)self _indexPathForCell:v68 usingPresentationValues:1];
        [(UITableView *)self _updateSeparatorStateForCell:v68 atIndexPath:v69];
      }
      uint64_t v65 = [v63 countByEnumeratingWithState:&v75 objects:v90 count:16];
    }
    while (v65);
  }

LABEL_61:
}

uint64_t __59__UITableView__endReorderingForCell_wasCancelled_animated___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[UIView animateWithDuration:4 delay:a2 options:a3 animations:*(double *)(a1 + 32) completion:0.0];
}

uint64_t __59__UITableView__endReorderingForCell_wasCancelled_animated___block_invoke_2(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setFrame:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
  [*(id *)(a1 + 32) _setReordering:0];
  [*(id *)(*(void *)(a1 + 40) + 48) frame];
  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 48), "setFrame:");
  [*(id *)(*(void *)(a1 + 40) + 48) setAlpha:0.0];
  [*(id *)(*(void *)(a1 + 40) + 56) frame];
  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 56), "setFrame:");
  uint64_t v2 = *(void **)(*(void *)(a1 + 40) + 56);
  return [v2 setAlpha:0.0];
}

uint64_t __59__UITableView__endReorderingForCell_wasCancelled_animated___block_invoke_3(uint64_t a1, int a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v4 = a2 ^ 1u;
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 41) != 0;
  }
  return [v3 _endCellReorderAnimation:*(unsigned __int8 *)(a1 + 40) != 0 wasCancelled:v4];
}

- (void)_cancelCellReorder:(BOOL)a3
{
  uint64_t v4 = [(UITableView *)self _reorderingIndexPath];

  if (v4)
  {
    id v7 = self->_reorderingSupport;
    -[UITableViewRowData removeGap]((uint64_t)self->_rowData);
    -[UITableViewRowData addGapAtIndexPath:]((uint64_t)self->_rowData, v7->_initialIndexPath);
    *((unsigned char *)v7 + 32) |= 8u;
    BOOL v5 = v7->_initialIndexPath;
    [(UITableView *)self _endReorderingForCell:v7->_reorderedCell wasCancelled:1 animated:0];
    if (*((unsigned char *)&self->_tableFlags + 9))
    {
      BOOL v6 = [(UITableView *)self _delegateProxy];
      [v6 tableView:self didCancelReorderingRowAtIndexPath:v5];
    }
  }
}

- (void)_endCellReorderAnimation:(BOOL)a3 wasCancelled:(BOOL)a4
{
  BOOL v5 = a3;
  double v22 = [(UITableView *)self _reorderingSupport];
  id v7 = v22[1];
  id v8 = v7;
  if (!a4)
  {
    reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
    [v7 frame];
    -[_UIDragSnappingFeedbackGenerator draggedObjectLandedAtLocation:](reorderFeedbackGenerator, "draggedObjectLandedAtLocation:", v11 + v10 * 0.5, v13 + v12 * 0.5);
  }
  [v8 setOpaque:1];
  [v8 setSeparatorStyle:*((_WORD *)&self->_tableFlags + 7) & 7];
  [v8 setAlpha:1.0];
  if (([v8 isSelected] & 1) == 0 && (objc_msgSend(v8, "isHighlighted") & 1) == 0) {
    [v8 _updateHighlightColors];
  }
  [v8 _setReordering:0];
  if (*((unsigned char *)v22 + 64))
  {
    [(UIScrollView *)self setScrollEnabled:1];
    [(UIScrollView *)self _setAdjustsContentInsetWhenScrollDisabled:*((unsigned __int8 *)v22 + 65)];
  }
  double v14 = [(UIView *)self window];
  [v14 endDisablingInterfaceAutorotation];

  [(UITableView *)self setShowsHorizontalScrollIndicator:(_BYTE)v22[4] & 1];
  [(UIScrollView *)self setShowsVerticalScrollIndicator:(*((unsigned __int8 *)v22 + 32) >> 1) & 1];
  [(UITableView *)self _updateTopSeparatorForVisibleCells];
  if (v5) {
    [(id)UIApp setIgnoresInteractionEvents:0];
  }
  if (((_BYTE)v22[4] & 8) != 0)
  {
    id v15 = v22[2];
  }
  else
  {
    id v15 = v22[3];
    if ((*((unsigned char *)&self->_tableFlags + 8) & 0x80) != 0)
    {
      double v16 = [(UITableView *)self _delegateProxy];
      [v16 tableView:self didEndReorderingRowAtIndexPath:v15];
    }
  }
  [(UIScrollView *)self _adjustShadowsIfNecessary];
  id v17 = v22[1];
  v22[1] = 0;

  if ([(NSMutableArray *)self->_visibleCells containsObject:v8])
  {
    [(UIScrollView *)self _moveContentSubview:v8 toBack:1];
  }
  else if (_IsKindOfUITableViewCell(v8))
  {
    [(UITableView *)self _reuseTableViewCell:v8 withIndexPath:v15 didEndDisplaying:1];
  }
  id v18 = v22[2];
  void v22[2] = 0;

  id v19 = v22[3];
  v22[3] = 0;

  [v22[7] removeFromSuperview];
  id v20 = v22[7];
  v22[7] = 0;

  [v22[6] removeFromSuperview];
  id v21 = v22[6];
  v22[6] = 0;

  *((unsigned char *)v22 + 32) &= ~4u;
  [(UITableView *)self _endAnimatingCells];
  [v8 _setAnimating:0];
}

- (void)_autoscrollForReordering:(id)a3
{
  id v4 = a3;
  [(UIView *)self bounds];
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  [(UITableView *)self _contentInset];
  double v14 = v6 + v13;
  double v16 = v8 + v15;
  double v63 = v10 - (v13 + v17);
  double v19 = v12 - (v15 + v18);
  id v65 = [v4 userInfo];

  [v65 frame];
  CGFloat x = v67.origin.x;
  CGFloat y = v67.origin.y;
  CGFloat width = v67.size.width;
  CGFloat height = v67.size.height;
  double MaxY = CGRectGetMaxY(v67);
  v68.origin.CGFloat x = v14;
  v68.origin.CGFloat y = v16;
  v68.size.CGFloat width = v63;
  v68.size.CGFloat height = v19;
  double v61 = y;
  double v62 = x;
  if (MaxY > CGRectGetMaxY(v68) + -5.0)
  {
    v69.origin.CGFloat x = v14;
    v69.origin.CGFloat y = v16;
    v69.size.CGFloat width = v63;
    v69.size.CGFloat height = v19;
    double v25 = CGRectGetMaxY(v69);
    [(UIScrollView *)self contentSize];
    if (v25 < v26)
    {
      v70.origin.CGFloat x = x;
      v70.origin.CGFloat y = y;
      v70.size.CGFloat width = width;
      v70.size.CGFloat height = height;
      double v27 = CGRectGetMaxY(v70);
      v71.origin.CGFloat x = v14;
      v71.origin.CGFloat y = v16;
      v71.size.CGFloat width = v63;
      v71.size.CGFloat height = v19;
      float v28 = v27 - CGRectGetMaxY(v71);
      float v29 = 2.0;
      double v30 = width;
      double v31 = height;
      if (v28 <= 0.0) {
        goto LABEL_11;
      }
      double v32 = v28;
      v72.origin.CGFloat y = v61;
      v72.origin.CGFloat x = v62;
      v72.size.CGFloat width = width;
      v72.size.CGFloat height = height;
      float v33 = v32 / (CGRectGetHeight(v72) * 0.5);
      float v29 = floorf((float)((float)(v33 * 8.0) * v33) + 2.0);
      goto LABEL_9;
    }
  }
  v73.origin.CGFloat x = x;
  v73.origin.CGFloat y = y;
  v73.size.CGFloat width = width;
  v73.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v73);
  v74.origin.CGFloat x = v14;
  v74.origin.CGFloat y = v16;
  v74.size.CGFloat width = v63;
  v74.size.CGFloat height = v19;
  if (MinY >= CGRectGetMinY(v74) + 5.0) {
    goto LABEL_10;
  }
  double v30 = width;
  double v31 = height;
  v75.origin.CGFloat x = v14;
  v75.origin.CGFloat y = v16;
  v75.size.CGFloat width = v63;
  v75.size.CGFloat height = v19;
  if (CGRectGetMinY(v75) <= 0.0) {
    goto LABEL_10;
  }
  v76.origin.CGFloat y = v61;
  v76.origin.CGFloat x = v62;
  v76.size.CGFloat width = width;
  v76.size.CGFloat height = height;
  double v35 = CGRectGetMinY(v76);
  v77.origin.CGFloat x = v14;
  v77.origin.CGFloat y = v16;
  v77.size.CGFloat width = v63;
  v77.size.CGFloat height = v19;
  float v36 = v35 - CGRectGetMinY(v77);
  float v29 = -2.0;
  if (v36 < 0.0)
  {
    double v37 = v36;
    v78.origin.CGFloat y = v61;
    v78.origin.CGFloat x = v62;
    v78.size.CGFloat width = width;
    v78.size.CGFloat height = height;
    float v38 = v37 / (CGRectGetHeight(v78) * 0.5);
    float v29 = -floorf((float)((float)(v38 * 8.0) * v38) + 2.0);
LABEL_9:
    if (v29 == 0.0)
    {
LABEL_10:
      [(UITableView *)self _stopAutoscrollTimer];
      goto LABEL_23;
    }
  }
LABEL_11:
  [(UIScrollView *)self contentOffset];
  double rect = v39;
  double v41 = v40;
  [(UITableView *)self _contentInset];
  double v43 = v42;
  double v45 = v44;
  float v46 = v29;
  double v47 = v29;
  double v48 = v41 + v47;
  double v49 = -v42;
  [(UIScrollView *)self contentSize];
  double v51 = v43 + v45 + v50;
  [(UIView *)self bounds];
  double v53 = v51 - v52;
  if (v48 <= v51 - v52) {
    double v53 = v48;
  }
  if (v48 >= v49) {
    double v54 = v53;
  }
  else {
    double v54 = v49;
  }
  -[UITableView setContentOffset:](self, "setContentOffset:", rect, v54);
  float v55 = round(v31 * 0.5);
  double v56 = (float)(0.0 - v55);
  if (v61 + v47 > v56) {
    double v56 = v61 + v47;
  }
  double v57 = round(v56);
  [(UIScrollView *)self contentSize];
  double v59 = v58 - v55;
  if (v57 < v59) {
    double v59 = v57;
  }
  objc_msgSend(v65, "setFrame:", v62, round(v59), v30, v31);
  *(float *)&double v60 = v46 / 10.0;
  if ((float)(v46 / 10.0) < 0.0) {
    *(float *)&double v60 = -(float)(v46 / 10.0);
  }
  *(float *)&double v60 = 1.0 - *(float *)&v60;
  [(UITableView *)self _reorderPositionChangedForCell:v65 withScrollFactorPercentage:v60];
LABEL_23:
}

- (void)_notifyDataSourceForMoveOfRowFromIndexPath:(id)a3 toIndexPath:(id)a4
{
  if ((*((unsigned char *)&self->_tableFlags + 27) & 0x20) != 0)
  {
    id v9 = a4;
    id v10 = a3;
    double v11 = [[UICollectionViewUpdateItem alloc] initWithInitialIndexPath:v10 finalIndexPath:v9 updateAction:3];
    expectedDiffableUpdateIteuint64_t m = self->_expectedDiffableUpdateItem;
    self->_expectedDiffableUpdateIteuint64_t m = v11;

    double v13 = [(UITableView *)self _dataSourceProxy];
    [v13 tableView:self moveRowAtIndexPath:v10 toIndexPath:v9];

    double v8 = self->_expectedDiffableUpdateItem;
    self->_expectedDiffableUpdateIteuint64_t m = 0;
  }
  else
  {
    id v6 = a4;
    id v7 = a3;
    double v14 = [(UITableView *)self _dataSourceProxy];
    [(UICollectionViewUpdateItem *)v14 tableView:self moveRowAtIndexPath:v7 toIndexPath:v6];

    double v8 = v14;
  }
}

- (id)_targetIndexPathAtPoint:(CGPoint)a3 withLastTargetIndexPath:(id)a4 adjustedForGap:(BOOL)a5
{
  CGFloat y = a3.y;
  CGFloat x = a3.x;
  id v9 = a4;
  id v10 = [(UITableViewRowData *)(uint64_t)self->_rowData targetIndexPathForPoint:x adjustedForGap:y];
  if (!v10) {
    id v10 = v9;
  }

  return v10;
}

- (void)_updateTopSeparatorForVisibleCells
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v3 = self->_visibleCells;
  uint64_t v4 = [(NSMutableArray *)v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        id v9 = -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v8, 1, (void)v10);
        [(UITableView *)self _updateTopSeparatorForCell:v8 atIndexPath:v9];
      }
      uint64_t v5 = [(NSMutableArray *)v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
}

- (void)_invalidateLayoutForVisibleBounds:(CGRect)a3 oldVisibleBounds:(CGRect)a4
{
}

- (void)_ensureViewsAreLoadedInRect:(CGRect)a3
{
  p_uint64_t tableFlags = &self->_tableFlags;
  *((void *)&self->_tableFlags + 2) |= 0x400000000000000uLL;
  self->_visibleBounds = a3;
  [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:0];
  [(UIView *)self layoutBelowIfNeeded];
  *((void *)p_tableFlags + 2) &= ~0x400000000000000uLL;
}

- (BOOL)_wasEditing
{
  return (*((unsigned __int8 *)&self->_tableFlags + 14) >> 3) & 1;
}

- (BOOL)_wasEditingRowAtIndexPath:(id)a3
{
  id v4 = a3;
  if ((*((unsigned char *)&self->_tableFlags + 14) & 8) == 0) {
    goto LABEL_7;
  }
  swipedIndexPath = self->_swipedIndexPath;
  if ((*((unsigned char *)&self->_tableFlags + 21) & 0x10) != 0 || swipedIndexPath)
  {
    if ([(NSIndexPath *)swipedIndexPath isEqual:v4])
    {
      BOOL v6 = (*((unsigned char *)&self->_tableFlags + 21) & 0x80) == 0;
      goto LABEL_8;
    }
LABEL_7:
    BOOL v6 = 0;
    goto LABEL_8;
  }
  BOOL v6 = 1;
LABEL_8:

  return v6;
}

- (int64_t)_globalReorderingRow
{
  reorderingSupport = self->_reorderingSupport;
  if (reorderingSupport && reorderingSupport->_initialIndexPath) {
    return -[UITableView globalRowForRowAtIndexPath:](self, "globalRowForRowAtIndexPath:");
  }
  else {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

- (id)_popReusableHeaderView:(BOOL)a3
{
  BOOL v3 = !a3;
  if (a3) {
    id v4 = @"__UITableViewHeaderDefaultReuseIdentifier";
  }
  else {
    id v4 = @"__UITableViewFooterDefaultReuseIdentifier";
  }
  p_uint64_t tableFlags = &self->_tableFlags;
  unint64_t v6 = *((void *)&self->_tableFlags + 2);
  uint64_t v7 = 512;
  if (!v3) {
    uint64_t v7 = 0;
  }
  *((void *)&self->_tableFlags + 2) = v6 & 0xFFFFFFFFFFFFFDFFLL | v7;
  id result = [(UITableView *)self dequeueReusableHeaderFooterViewWithIdentifier:v4];
  *((void *)p_tableFlags + 2) = *((void *)p_tableFlags + 2) & 0xFFFFFFFFFFFFFDFFLL | (((v6 >> 9) & 1) << 9);
  return result;
}

- (void)_configureCachedCellForDisplay:(id)a3 forIndexPath:(id)a4
{
  if ((dyld_program_sdk_at_least() & 1) != 0
    || [(UITableView *)self _supportsCellPrefetching])
  {
    [a3 _setNeedsSetup:1];
    [(UITableView *)self _configureCellForDisplay:a3 forIndexPath:a4];
  }
  else
  {
    [(UITableView *)self _rectForRowAtIndexPath:a4 canGuess:(*((void *)&self->_tableFlags + 3) >> 4) & 1];
    objc_msgSend(a3, "setFrame:");
  }
}

void __73__UITableView__createPreparedCellForGlobalRow_withIndexPath_willDisplay___block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("TableView", &_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_5___s_category)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    BOOL v3 = (id *)(*(void *)(a1 + 32) + 408);
    id v4 = v2;
    id WeakRetained = objc_loadWeakRetained(v3);
    int v6 = 138412290;
    id v7 = WeakRetained;
    _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "The -tableView:cellForRowAtIndexPath: method must be implemented by the UITableViewDataSource, not the UITableViewDelegate. This error will cause undefined behavior. Please move the implementation of this method to the data source of this table view, instead of the delegate: %@", (uint8_t *)&v6, 0xCu);
  }
}

- (void)_notifyDidEndDisplayingHeaderFooterView:(id)a3 forSection:(int64_t)a4 isHeader:(BOOL)a5
{
  BOOL v5 = a5;
  id v10 = a3;
  if (_IsKindOfUITableViewHeaderFooterView(v10)) {
    [v10 _notifyIsDisplaying:0];
  }
  uint64_t tableFlags = (uint64_t)self->_tableFlags;
  if (v5)
  {
    if ((tableFlags & 0x40000000) == 0) {
      goto LABEL_9;
    }
    id v9 = [(UITableView *)self _delegateProxy];
    [v9 tableView:self didEndDisplayingHeaderView:v10 forSection:a4];
  }
  else
  {
    if ((tableFlags & 0x80000000) == 0) {
      goto LABEL_9;
    }
    id v9 = [(UITableView *)self _delegateProxy];
    [v9 tableView:self didEndDisplayingFooterView:v10 forSection:a4];
  }

LABEL_9:
}

- (void)_tableHeaderHeightDidChangeToHeight:(double)a3
{
  [(UITableView *)self _ensureRowDataIsLoaded];
  -[UITableViewRowData tableHeaderHeightDidChangeToHeight:]((uint64_t)self->_rowData, a3);
  [(UITableView *)self _updateContentSize];
  [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1];
}

- (void)_tableFooterHeightDidChangeToHeight:(double)a3
{
  [(UITableView *)self _ensureRowDataIsLoaded];
  rowData = self->_rowData;
  if (rowData) {
    rowData->_tableFooterdouble Height = a3;
  }
  [(UITableView *)self _updateContentSize];
  [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1];
}

- (void)_drawExtraSeparator:(CGRect)a3
{
  CGFloat height = a3.size.height;
  CGFloat width = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  uint64_t v7 = *((_WORD *)&self->_tableFlags + 7) & 7;
  uint64_t v8 = [(UITableView *)self separatorColor];
  if ((unint64_t)(v7 - 1) <= 1)
  {
    id v9 = v8;
    [v8 set];
    UIRectFillUsingOperation(1, x, y, width, height);
    uint64_t v8 = v9;
  }
}

- (BOOL)_isCellReorderable:(id)a3
{
  BOOL v3 = self;
  id v4 = [(UITableView *)self _indexPathForCell:a3 usingPresentationValues:1];
  LOBYTE(v3) = [(UITableView *)v3 _canReorderRowAtIndexPath:v4];

  return (char)v3;
}

- (id)_titleForDeleteConfirmationButton:(id)a3
{
  id v4 = [(UITableView *)self _indexPathForCell:a3 usingPresentationValues:1];
  BOOL v5 = [(UITableView *)self _titleForDeleteConfirmationButtonForRowAtIndexPath:v4];

  return v5;
}

- (BOOL)_isLastRowForIndexPath:(id)a3
{
  id v4 = a3;
  BOOL v5 = v4;
  if (v4
    && (uint64_t v6 = [v4 section],
        v6 == [(UITableView *)self _numberOfSectionsUsingPresentationValues:1]- 1))
  {
    uint64_t v7 = [v5 row];
    BOOL v8 = v7 == -[UITableView _numberOfRowsInSection:usingPresentationValues:](self, "_numberOfRowsInSection:usingPresentationValues:", [v5 section], 1)- 1;
  }
  else
  {
    BOOL v8 = 0;
  }

  return v8;
}

- (double)_shadowHeightOffset
{
  uint64_t v3 = [(UITableView *)self _reorderingSupport];
  id v4 = (id *)v3;
  double v5 = 0.0;
  if (v3 && [(UITableView *)self _isLastRowForIndexPath:*(void *)(v3 + 24)])
  {
    [v4[1] frame];
    double v5 = -v6;
  }

  return v5;
}

- (id)_retargetedReorderIndexPathForInitialIndexPath:(id)a3 proposedIndexPath:(id)a4
{
  id v7 = a4;
  BOOL v8 = v7;
  if ((*((unsigned char *)&self->_tableFlags + 6) & 0x40) != 0)
  {
    id v10 = a3;
    if (os_variant_has_internal_diagnostics())
    {
      if (!v10)
      {
        double v17 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)double v30 = 0;
          _os_log_fault_impl(&dword_1853B0000, v17, OS_LOG_TYPE_FAULT, "Cannot pass a nil initialTargetIndexPath to the delegate callback per API contract!", v30, 2u);
        }
      }
    }
    else if (!v10)
    {
      double v25 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1E8FDF470) + 8);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1853B0000, v25, OS_LOG_TYPE_ERROR, "Cannot pass a nil initialTargetIndexPath to the delegate callback per API contract!", buf, 2u);
      }
    }
    if (os_variant_has_internal_diagnostics())
    {
      if (!v8)
      {
        double v18 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)float v28 = 0;
          _os_log_fault_impl(&dword_1853B0000, v18, OS_LOG_TYPE_FAULT, "Cannot pass a nil newTargetIndexPath to the delegate callback per API contract!", v28, 2u);
        }
      }
    }
    else if (!v8)
    {
      double v26 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1E8FDF478) + 8);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)double v27 = 0;
        _os_log_impl(&dword_1853B0000, v26, OS_LOG_TYPE_ERROR, "Cannot pass a nil newTargetIndexPath to the delegate callback per API contract!", v27, 2u);
      }
    }
    long long v11 = [(UITableView *)self _delegateProxy];
    id v9 = [v11 tableView:self targetIndexPathForMoveFromRowAtIndexPath:v10 toProposedIndexPath:v8];

    long long v12 = NSStringFromSelector(sel_tableView_targetIndexPathForMoveFromRowAtIndexPath_toProposedIndexPath_);
    if (!v9)
    {
      double v19 = [MEMORY[0x1E4F28B00] currentHandler];
      [v19 handleFailureInMethod:a2, self, @"UITableView.m", 17082, @"UITableView delegate method %@ needs to return a non-nil value", v12 object file lineNumber description];
    }
    uint64_t v13 = [v9 section];
    rowData = self->_rowData;
    if (rowData) {
      rowData = (UITableViewRowData *)rowData->_numSections;
    }
    if (v13 >= (uint64_t)rowData)
    {
      id v20 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v21 = [v9 section];
      uint64_t v22 = [v9 row];
      double v23 = self->_rowData;
      if (v23) {
        double v23 = (UITableViewRowData *)v23->_numSections;
      }
      [v20 handleFailureInMethod:a2, self, @"UITableView.m", 17083, @"UITableView delegate method %@ returned an invalid target index path (section: %ld, row: %ld) because there are only %ld sections in the table view.", v12, v21, v22, v23 object file lineNumber description];
    }
    uint64_t v15 = [v9 row];
    if (v15 > -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, [v9 section]))
    {
      double v24 = [MEMORY[0x1E4F28B00] currentHandler];
      [v24 handleFailureInMethod:a2, self, @"UITableView.m", 17084, @"UITableView delegate method %@ returned an invalid target index path (section: %ld, row: %ld) because there are only %ld rows in this section of the table view.", v12, objc_msgSend(v9, "section"), objc_msgSend(v9, "row"), -[UITableViewRowData numberOfRowsInSection:]((uint64_t)self->_rowData, objc_msgSend(v9, "section")) object file lineNumber description];
    }
  }
  else
  {
    id v9 = v7;
  }
  return v9;
}

- (void)_reorderPositionChangedForCell:(id)a3
{
  LODWORD(v3) = 1.0;
  [(UITableView *)self _reorderPositionChangedForCell:a3 withScrollFactorPercentage:v3];
}

- (void)_reorderPositionChangedForCell:(id)a3 withScrollFactorPercentage:(float)a4
{
  id v5 = a3;
  uint64_t v6 = [(UITableView *)self _reorderingSupport];
  [v5 frame];
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat rect = v11;
  CGFloat v13 = v12;
  [(UIView *)self bounds];
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  double v21 = v20;
  [(UITableView *)self _contentInset];
  double v62 = v17 + v22;
  double v63 = v15 + v23;
  double v25 = v19 - (v23 + v24);
  double v27 = v21 - (v22 + v26);
  id v28 = *(id *)(v6 + 16);
  if ([(UITableConstants *)self->_constants reorderingCellWantsShadows]
    && ([v5 _usingBackgroundViewConfiguration] & 1) == 0)
  {
    float v29 = *(void **)(v6 + 48);
    if (!v29)
    {
      double v30 = [(UITableView *)self _cellContainerView];
      double v60 = v10;
      double v31 = v27;
      double v32 = -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:]((uint64_t)self->_rowData, [v28 row], objc_msgSend(v28, "section"), 0);
      double v34 = v33;
      double v36 = v35;
      double v38 = v37;
      double v39 = -[UIShadowView initWithFrame:]([UIShadowView alloc], "initWithFrame:", v32, v33, v35, v37);
      double v40 = *(void **)(v6 + 48);
      *(void *)(v6 + 48) = v39;

      double v41 = *(void **)(v6 + 48);
      double v42 = +[UIShadowView topShadowImage];
      [v41 setShadowImage:v42 forEdge:1 inside:0];

      [v30 insertSubview:*(void *)(v6 + 48) aboveSubview:v5];
      double v43 = [UIShadowView alloc];
      double v44 = v32;
      double v27 = v31;
      CGFloat v10 = v60;
      uint64_t v45 = -[UIShadowView initWithFrame:](v43, "initWithFrame:", v44, v34, v36, v38);
      float v46 = *(void **)(v6 + 56);
      *(void *)(v6 + 56) = v45;

      double v47 = *(void **)(v6 + 56);
      double v48 = +[UIShadowView bottomShadowImage];
      [v47 setShadowImage:v48 forEdge:4 inside:0];

      [v30 insertSubview:*(void *)(v6 + 56) belowSubview:v5];
      float v29 = *(void **)(v6 + 48);
    }
    objc_msgSend(v29, "frame", *(void *)&v60);
    objc_msgSend(*(id *)(v6 + 48), "setFrame:");
    [*(id *)(v6 + 56) frame];
    objc_msgSend(*(id *)(v6 + 56), "setFrame:");
  }
  v70.origin.CGFloat x = v63;
  v70.origin.CGFloat y = v62;
  v70.size.CGFloat width = v25;
  v70.size.CGFloat height = v27;
  CGFloat MinY = CGRectGetMinY(v70);
  v71.origin.CGFloat y = v10;
  CGFloat v50 = v27;
  CGFloat v51 = MinY + 5.0;
  v71.origin.CGFloat x = v8;
  CGFloat y = v71.origin.y;
  v71.size.CGFloat width = rect;
  v71.size.CGFloat height = v13;
  if (v51 > CGRectGetMinY(v71)) {
    goto LABEL_19;
  }
  v72.origin.CGFloat x = v63;
  v72.origin.CGFloat y = v62;
  v72.size.CGFloat width = v25;
  v72.size.CGFloat height = v50;
  CGFloat v53 = CGRectGetMaxY(v72) + -5.0;
  v73.origin.CGFloat x = v8;
  v73.origin.CGFloat y = y;
  v73.size.CGFloat width = rect;
  v73.size.CGFloat height = v13;
  if (v53 >= CGRectGetMaxY(v73))
  {
    if (*(void *)(v6 + 40)) {
      [(UITableView *)self _stopAutoscrollTimer];
    }
  }
  else
  {
LABEL_19:
    if (!*(void *)(v6 + 40))
    {
      uint64_t v54 = [MEMORY[0x1E4F1CB00] scheduledTimerWithTimeInterval:self target:sel__autoscrollForReordering_ selector:v5 userInfo:1 repeats:0.02];
      float v55 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v54;
    }
  }
  v74.origin.CGFloat x = v8;
  v74.origin.CGFloat y = y;
  v74.size.CGFloat width = rect;
  v74.size.CGFloat height = v13;
  double MidY = CGRectGetMidY(v74);
  -[UITableView _targetIndexPathAtPoint:withLastTargetIndexPath:adjustedForGap:](self, "_targetIndexPathAtPoint:withLastTargetIndexPath:adjustedForGap:", *(void *)(v6 + 24), 0, 0.0, MidY);
  id v57 = (id)objc_claimAutoreleasedReturnValue();
  if (([*(id *)(v6 + 24) isEqual:v57] & 1) == 0)
  {
    double v58 = [(UITableView *)self _retargetedReorderIndexPathForInitialIndexPath:v28 proposedIndexPath:v57];

    if ([*(id *)(v6 + 24) isEqual:v58])
    {
      id v57 = v58;
    }
    else
    {
      -[UITableViewRowData removeGap]((uint64_t)self->_rowData);
      -[UITableViewRowData addGapAtIndexPath:]((uint64_t)self->_rowData, v58);
      [(UITableView *)self _updateTopSeparatorForVisibleCells];
      reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
      v69[0] = MEMORY[0x1E4F143A8];
      v69[1] = 3221225472;
      v69[2] = __73__UITableView__reorderPositionChangedForCell_withScrollFactorPercentage___block_invoke;
      v69[3] = &unk_1E53058A0;
      v69[4] = self;
      *(CGFloat *)&v69[5] = v8;
      *(CGFloat *)&v69[6] = y;
      *(CGFloat *)&v69[7] = rect;
      *(CGFloat *)&v69[8] = v13;
      *(double *)&v69[9] = MidY;
      [(UIFeedbackGenerator *)reorderFeedbackGenerator performFeedbackWithDelay:v69 insideBlock:0.05];
      v65[0] = MEMORY[0x1E4F143A8];
      v65[1] = 3221225472;
      v65[2] = __73__UITableView__reorderPositionChangedForCell_withScrollFactorPercentage___block_invoke_2;
      v65[3] = &unk_1E52DCB30;
      id v66 = (id)v6;
      id v57 = v58;
      id v67 = v57;
      CGRect v68 = self;
      [(UITableView *)self _animateTableViewContentToNewLayoutWithDuration:v5 reorderingCell:v65 additionalAnimations:a4 * 0.3];
      objc_msgSend(v5, "setSectionLocation:animated:", -[UITableViewRowData sectionLocationForReorderedRow:inSection:]((uint64_t)self->_rowData, objc_msgSend(*(id *)(v6 + 24), "row"), objc_msgSend(*(id *)(v6 + 24), "section")), 1);
    }
  }
}

uint64_t __73__UITableView__reorderPositionChangedForCell_withScrollFactorPercentage___block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 3032);
  double MidX = CGRectGetMidX(*(CGRect *)(a1 + 40));
  double v4 = *(double *)(a1 + 72);
  return objc_msgSend(v2, "objectSnappedAtLocation:", MidX, v4);
}

uint64_t __73__UITableView__reorderPositionChangedForCell_withScrollFactorPercentage___block_invoke_2(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), *(id *)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 48);
  return [v2 _adjustShadowsIfNecessary];
}

- (void)_endSwipeToDeleteRowDidDelete:(BOOL)a3
{
  BOOL v3 = a3;
  if ([(UITableView *)self _hasSwipeToDeleteRow]
    && (*((unsigned char *)&self->_tableFlags + 23) & 0x80) == 0)
  {
    uint64_t v6 = self->_swipedIndexPath;
    if (!v3
      || (*((unsigned char *)&self->_tableFlags + 21) & 0x10) != 0
      && ![(UITableViewCell *)self->_swipeToDeleteCell _isAnimating])
    {
      [(UITableView *)self _animateSwipeCancelation];
    }
    if ((*((void *)&self->_tableFlags + 2) & 0x100000000000) != 0)
    {
      [(UITableView *)self _setEditing:0 animated:(*((void *)&self->_tableFlags + 2) & 0x100) == 0 forced:0];
      if (v3) {
        id v5 = 0;
      }
      else {
        id v5 = v6;
      }
      [(UITableView *)self _sendDidEndEditingForIndexPath:v5];
    }
  }
}

- (void)_animateSwipeCancelation
{
  uint64_t v2 = *((void *)&self->_tableFlags + 2);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = *((void *)&self->_tableFlags + 3);
    *((void *)&self->_tableFlags + 2) = v2 | 0x2000000000000000;
    *((void *)&self->_tableFlags + 3) = v3;
    swipeActionController = self->_swipeActionController;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = __39__UITableView__animateSwipeCancelation__block_invoke;
    v5[3] = &unk_1E52DC3A0;
    v5[4] = self;
    [(UISwipeActionController *)swipeActionController resetSwipedItemAnimated:1 completion:v5];
  }
}

uint64_t __39__UITableView__animateSwipeCancelation__block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 3088) &= ~0x2000000000000000uLL;
  return [*(id *)(a1 + 32) _updateWrapperClipping];
}

- (void)_didInsertRowForTableCell:(id)a3
{
  if ((*(unsigned char *)&self->_tableFlags & 0x40) != 0)
  {
    id v5 = [(UITableView *)self _indexPathForCell:a3 usingPresentationValues:1];
    double v4 = [(UITableView *)self _dataSourceProxy];
    [v4 tableView:self commitEditingStyle:2 forRowAtIndexPath:v5];
  }
}

- (void)_animateDeletionOfRowAtIndexPath:(id)a3
{
  id v5 = a3;
  p_uint64_t tableFlags = &self->_tableFlags;
  uint64_t v7 = *((void *)&self->_tableFlags + 2);
  if ((v7 & 0x8000000000000000) == 0 && (*(unsigned char *)p_tableFlags & 0x40) != 0)
  {
    uint64_t v8 = *((void *)&self->_tableFlags + 3);
    *((void *)&self->_tableFlags + 2) = v7 & 0xFFFFF3FFFFFFFFFFLL | 0x40000000000;
    *((void *)&self->_tableFlags + 3) = v8;
    id v13 = v5;
    if (!v5)
    {
      double v12 = [MEMORY[0x1E4F28B00] currentHandler];
      [v12 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:17235 description:@"UITableView internal inconsistency: no index path for deletion."];

      p_uint64_t tableFlags = &self->_tableFlags;
    }
    double v9 = [(UITableView *)self _dataSourceProxy];
    [v9 tableView:self commitEditingStyle:1 forRowAtIndexPath:v13];

    uint64_t v11 = *((void *)p_tableFlags + 2);
    uint64_t v10 = *((void *)p_tableFlags + 3);
    *((void *)p_tableFlags + 2) = v11 & 0xFFFFFBFFFFFFFFFFLL;
    id v5 = v13;
    if ((v11 & 0x800000000000) == 0)
    {
      *((void *)p_tableFlags + 2) = v11 & 0xFFFFF3FFFFFFFFFFLL;
      *((void *)p_tableFlags + 3) = v10;
    }
  }
}

- (void)_animateDeletionOfRowWithCell:(id)a3
{
  id v5 = a3;
  id v8 = v5;
  if (!v5)
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    [v7 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:17248 description:@"UITableView internal inconsistency: no cell for deletion."];

    id v5 = 0;
  }
  uint64_t v6 = [(UITableView *)self _indexPathForCell:v5 usingPresentationValues:1];
  [(UITableView *)self _animateDeletionOfRowAtIndexPath:v6];
}

- (BOOL)_shouldResignFirstResponderWithInteractionDisabled
{
  return (*((unsigned char *)&self->_tableFlags + 20) & 4) == 0;
}

- (void)_setIsAncestorOfFirstResponder:(BOOL)a3
{
  BOOL v3 = a3;
  v25.receiver = self;
  v25.super_class = (Class)UITableView;
  -[UIView _setIsAncestorOfFirstResponder:](&v25, sel__setIsAncestorOfFirstResponder_);
  id v5 = [(UIView *)self window];
  uint64_t v6 = [v5 firstResponder];

  if (v6)
  {
    while (1)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        break;
      }
      p_super = [(UIView *)v6 nextResponder];

      uint64_t v6 = p_super;
      if (!p_super) {
        goto LABEL_13;
      }
    }
    uint64_t v6 = v6;
    p_super = v6;
    while (1)
    {
      id v8 = [(UIView *)p_super superview];
      if (v8 == self) {
        break;
      }
      double v9 = v8;
      if (v8 == (UITableView *)self->_wrapperView) {
        goto LABEL_12;
      }

      p_super = &v9->super.super;
      if (!v9) {
        goto LABEL_13;
      }
    }
    double v9 = self;
LABEL_12:
  }
  else
  {
    p_super = 0;
  }
LABEL_13:
  int IsKindOfUITableViewCell = _IsKindOfUITableViewCell(p_super);
  p_firstResponderView = &self->_firstResponderView;
  if (v3)
  {
    int v12 = IsKindOfUITableViewCell;
    objc_storeStrong((id *)&self->_firstResponderView, p_super);
    if (v12)
    {
      self->_int firstResponderViewType = 1;
      id v13 = [(UITableView *)self _indexPathForCell:p_super usingPresentationValues:1];
      firstResponderIndexPath = self->_firstResponderIndexPath;
      self->_firstResponderIndexPath = v13;
LABEL_35:

      goto LABEL_36;
    }
    if (p_super == self->_tableHeaderView)
    {
      int v22 = 4;
    }
    else
    {
      if (p_super != self->_tableFooterView)
      {
        if ([(UITableView *)self _visibleHeaderViewsContainsView:p_super])
        {
          objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, -[UITableView _sectionForHeaderView:](self, "_sectionForHeaderView:", p_super));
          double v19 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
          double v20 = self->_firstResponderIndexPath;
          self->_firstResponderIndexPath = v19;

          int v21 = 2;
LABEL_39:
          self->_int firstResponderViewType = v21;
          goto LABEL_36;
        }
        if ([(UITableView *)self _visibleFooterViewsContainsView:p_super])
        {
          objc_msgSend(MEMORY[0x1E4F28D58], "indexPathForRow:inSection:", 0x7FFFFFFFFFFFFFFFLL, -[UITableView _sectionForFooterView:](self, "_sectionForFooterView:", p_super));
          double v23 = (NSIndexPath *)objc_claimAutoreleasedReturnValue();
          double v24 = self->_firstResponderIndexPath;
          self->_firstResponderIndexPath = v23;

          int v21 = 3;
          goto LABEL_39;
        }
        objc_opt_class();
        objc_opt_isKindOfClass();
        self->_int firstResponderViewType = 0;
LABEL_34:
        firstResponderIndexPath = self->_firstResponderIndexPath;
        self->_firstResponderIndexPath = 0;
        goto LABEL_35;
      }
      int v22 = 5;
    }
    self->_int firstResponderViewType = v22;
    goto LABEL_34;
  }
  double v15 = *p_firstResponderView;
  double v16 = *p_firstResponderView;
  *p_firstResponderView = 0;

  self;
  if ((__addingResponderToTree & 1) == 0 && v15)
  {
    int firstResponderViewType = self->_firstResponderViewType;
    if ((firstResponderViewType - 2) >= 2)
    {
      if ((firstResponderViewType - 4) >= 2)
      {
        if (firstResponderViewType == 1
          && ([(NSMutableArray *)self->_visibleCells containsObject:v15] & 1) == 0
          && v15 != self->_viewBeingPreparedToDisplay)
        {
          [(UITableView *)self _reuseTableViewCell:v15 withIndexPath:self->_firstResponderIndexPath didEndDisplaying:1];
        }
        goto LABEL_22;
      }
      [(UITableView *)self _updateTableHeadersAndFootersNow:0];
    }
    [(UITableView *)self _updateVisibleHeadersAndFootersNow:0];
  }
LABEL_22:
  double v18 = self->_firstResponderIndexPath;
  self->_firstResponderIndexPath = 0;

  self->_int firstResponderViewType = 0;
LABEL_36:
}

- (id)_rowData
{
  return self->_rowData;
}

- (BOOL)_wantsSwipes
{
  if ((*((unsigned char *)&self->_tableFlags + 14) & 0x10) != 0 && (*((unsigned char *)&self->_tableFlags + 21) & 0x10) == 0) {
    return 0;
  }
  [(UIScrollView *)self contentSize];
  double v5 = v4;
  [(UIView *)self bounds];
  return v5 == v6;
}

- (BOOL)_swipeDeletionStateHasBeenReset
{
  return (*((unsigned char *)&self->_tableFlags + 21) & 0x88) == 0;
}

- (id)_tableFooterView:(BOOL)a3
{
  if (self->_tableFooterView) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = !a3;
  }
  if (!v4 && (*((unsigned char *)&self->_tableFlags + 8) & 2) != 0)
  {
    v15.origin.double x = -[UITableViewRowData rectForTableFooterView]((uint64_t)self->_rowData);
    double x = v15.origin.x;
    double y = v15.origin.y;
    double width = v15.size.width;
    double height = v15.size.height;
    if (!CGRectIsEmpty(v15))
    {
      double v9 = [(UITableView *)self _delegateProxy];
      uint64_t v10 = [v9 viewForFooterInTableView:self];
      tableFooterView = self->_tableFooterView;
      self->_tableFooterView = v10;

      -[UIView setFrame:](self->_tableFooterView, "setFrame:", x, y, width, height);
      [(UITableView *)self _addContentSubview:self->_tableFooterView atBack:0];
    }
  }
  int v12 = self->_tableFooterView;
  return v12;
}

- (double)_clientRequestedFillerRowHeight
{
  if (*((unsigned char *)&self->_tableFlags + 11))
  {
    BOOL v4 = [(UITableView *)self _delegateProxy];
    [v4 tableViewSpacingForExtraSeparators:self];
    fillerRowdouble Height = v5;
  }
  else
  {
    fillerRowdouble Height = self->_fillerRowHeight;
  }
  double result = -1.0;
  if (fillerRowHeight >= 0.0) {
    return fillerRowHeight;
  }
  return result;
}

- (double)_spacingForExtraSeparators
{
  [(UITableView *)self _clientRequestedFillerRowHeight];
  rowData = self->_rowData;
  return _UITableRowHeightForExtraSeparators(self, rowData, v3);
}

- (BOOL)_shouldShowMenuForCell:(id)a3
{
  BOOL v4 = [(UITableView *)self _indexPathForCell:a3 usingPresentationValues:1];
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *((void *)&self->_tableFlags + 1);
  if ((v5 & 0x1000000000) != 0) {
    goto LABEL_10;
  }
  if ((~(_BYTE)v5 & 0x38) != 0)
  {
    if ((~*(_DWORD *)&self->_tableFlags & 0xE000) == 0)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __38__UITableView__shouldShowMenuForCell___block_invoke;
      block[3] = &unk_1E52D9F70;
      void block[4] = self;
      if (_shouldShowMenuForCell__once != -1) {
        dispatch_once(&_shouldShowMenuForCell__once, block);
      }
      id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
      goto LABEL_9;
    }
LABEL_10:
    char v8 = 0;
    goto LABEL_11;
  }
  id WeakRetained = [(UITableView *)self _delegateProxy];
LABEL_9:
  uint64_t v7 = WeakRetained;
  char v8 = [WeakRetained tableView:self shouldShowMenuForRowAtIndexPath:v4];

LABEL_11:
  return v8;
}

void __38__UITableView__shouldShowMenuForCell___block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("TableView", &_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_6___s_category)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    CGFloat v3 = (id *)(*(void *)(a1 + 32) + 2064);
    BOOL v4 = v2;
    id WeakRetained = objc_loadWeakRetained(v3);
    int v6 = 138412290;
    id v7 = WeakRetained;
    _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "The -tableView:shouldShowMenuForRowAtIndexPath: method must be implemented by the UITableViewDelegate, not the UITableViewDataSource. This error will cause undefined behavior. Please move the implementation of this method to the delegate of this table view, instead of the data source: %@", (uint8_t *)&v6, 0xCu);
  }
}

- (BOOL)_canPerformAction:(SEL)a3 forCell:(id)a4 sender:(id)a5
{
  id v8 = a5;
  double v9 = [(UITableView *)self _indexPathForCell:a4 usingPresentationValues:1];
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v10 = *((void *)&self->_tableFlags + 1);
  if ((v10 & 0x1000000000) != 0) {
    goto LABEL_10;
  }
  if ((~(_BYTE)v10 & 0x30) != 0)
  {
    if ((~*(_DWORD *)&self->_tableFlags & 0xC000) == 0)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __48__UITableView__canPerformAction_forCell_sender___block_invoke;
      block[3] = &unk_1E52D9F70;
      void block[4] = self;
      if (_canPerformAction_forCell_sender__once != -1) {
        dispatch_once(&_canPerformAction_forCell_sender__once, block);
      }
      id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
      goto LABEL_9;
    }
LABEL_10:
    char v13 = 0;
    goto LABEL_11;
  }
  id WeakRetained = [(UITableView *)self _delegateProxy];
LABEL_9:
  int v12 = WeakRetained;
  char v13 = [WeakRetained tableView:self canPerformAction:a3 forRowAtIndexPath:v9 withSender:v8];

LABEL_11:
  return v13;
}

void __48__UITableView__canPerformAction_forCell_sender___block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("TableView", &_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_7___s_category)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    CGFloat v3 = (id *)(*(void *)(a1 + 32) + 2064);
    BOOL v4 = v2;
    id WeakRetained = objc_loadWeakRetained(v3);
    int v6 = 138412290;
    id v7 = WeakRetained;
    _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "The -tableView:canPerformAction:forRowAtIndexPath:withSender: method must be implemented by the UITableViewDelegate, not the UITableViewDataSource. This error will cause undefined behavior. Please move the implementation of this method to the delegate of this table view, instead of the data source: %@", (uint8_t *)&v6, 0xCu);
  }
}

- (void)_performAction:(SEL)a3 forCell:(id)a4 sender:(id)a5
{
  id v8 = a5;
  double v9 = [(UITableView *)self _indexPathForCell:a4 usingPresentationValues:1];
  if (v9)
  {
    uint64_t v10 = *((void *)&self->_tableFlags + 1);
    if ((v10 & 0x1000000000) == 0)
    {
      if ((~(_BYTE)v10 & 0x30) == 0)
      {
        id WeakRetained = [(UITableView *)self _delegateProxy];
LABEL_9:
        int v12 = WeakRetained;
        [WeakRetained tableView:self performAction:a3 forRowAtIndexPath:v9 withSender:v8];

        goto LABEL_10;
      }
      if ((~*(_DWORD *)&self->_tableFlags & 0xC000) == 0)
      {
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = __45__UITableView__performAction_forCell_sender___block_invoke;
        block[3] = &unk_1E52D9F70;
        void block[4] = self;
        if (_performAction_forCell_sender__once != -1) {
          dispatch_once(&_performAction_forCell_sender__once, block);
        }
        id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
        goto LABEL_9;
      }
    }
  }
LABEL_10:
}

void __45__UITableView__performAction_forCell_sender___block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("TableView", &_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_8___s_category)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    CGFloat v3 = (id *)(*(void *)(a1 + 32) + 2064);
    BOOL v4 = v2;
    id WeakRetained = objc_loadWeakRetained(v3);
    int v6 = 138412290;
    id v7 = WeakRetained;
    _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "The -tableView:performAction:forRowAtIndexPath:withSender: method must be implemented by the UITableViewDelegate, not the UITableViewDataSource. This error will cause undefined behavior. Please move the implementation of this method to the delegate of this table view, instead of the data source: %@", (uint8_t *)&v6, 0xCu);
  }
}

- (BOOL)_canBeginMenuInteractionAtLocation:(CGPoint)a3
{
  if (self->_swipedIndexPath) {
    return 0;
  }
  BOOL v4 = -[UITableView hitTest:withEvent:](self, "hitTest:withEvent:", 0, a3.x, a3.y);
  BOOL v3 = 1;
  if ([v4 isUserInteractionEnabled])
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      BOOL v3 = 0;
    }
  }

  return v3;
}

- (id)contextMenuInteraction:(id)a3 configurationForMenuAtLocation:(CGPoint)a4
{
  double y = a4.y;
  double x = a4.x;
  id v7 = a3;
  if ((*((unsigned char *)&self->_tableFlags + 12) & 0x10) != 0
    && -[UITableView _canBeginMenuInteractionAtLocation:](self, "_canBeginMenuInteractionAtLocation:", x, y))
  {
    uint64_t v8 = -[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", 1, x, y);
    if (v8)
    {
      double v9 = [(UITableView *)self _delegateProxy];
      uint64_t v10 = objc_msgSend(v9, "tableView:contextMenuConfigurationForRowAtIndexPath:point:", self, v8, x, y);

      if (v10)
      {
        uint64_t v11 = [(UITableView *)self _identityTracker:1];
        int v12 = -[_UIIndexPathIdentityTracker identifierForIndexPath:]((uint64_t)v11, v8);

        objc_setAssociatedObject(v10, &ContextMenuConfigurationAssociatedIdentifierKey, v12, (void *)1);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

- (id)_defaultContextMenuTargetedPreviewForIdentifier:(id)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (!v4)
  {
    uint64_t v10 = 0;
    goto LABEL_14;
  }
  uint64_t v5 = [(UITableView *)self _identityTracker:0];
  int v6 = -[_UIIndexPathIdentityTracker currentIndexPathForIdentifier:]((uint64_t)v5, (uint64_t)v4);

  if (v6)
  {
    id v7 = [(UITableView *)self _cellForRowAtIndexPath:v6 usingPresentationValues:1];
    uint64_t v8 = v7;
    if (v7)
    {
      double v9 = [v7 window];

      if (v9)
      {
        uint64_t v10 = _UITargetedPreviewForContextMenuFromCell(v8);
LABEL_12:

        goto LABEL_13;
      }
      if (os_variant_has_internal_diagnostics())
      {
        char v13 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
        {
          int v14 = 138412802;
          CGRect v15 = v8;
          __int16 v16 = 2112;
          double v17 = v6;
          __int16 v18 = 2112;
          id v19 = v4;
          _os_log_fault_impl(&dword_1853B0000, v13, OS_LOG_TYPE_FAULT, "Cell (%@) at indexPath (%@) with identifier (%@) is not in a window. Was the table view removed from its window?", (uint8_t *)&v14, 0x20u);
        }
      }
      else
      {
        uint64_t v11 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_defaultContextMenuTargetedPreviewForIdentifier____s_category)+ 8);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          int v14 = 138412802;
          CGRect v15 = v8;
          __int16 v16 = 2112;
          double v17 = v6;
          __int16 v18 = 2112;
          id v19 = v4;
          _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "Cell (%@) at indexPath (%@) with identifier (%@) is not in a window. Was the table view removed from its window?", (uint8_t *)&v14, 0x20u);
        }
      }
    }
    uint64_t v10 = 0;
    goto LABEL_12;
  }
  uint64_t v10 = 0;
LABEL_13:

LABEL_14:
  return v10;
}

- (id)contextMenuInteraction:(id)a3 previewForHighlightingMenuWithConfiguration:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ((*((unsigned char *)&self->_tableFlags + 12) & 0x20) == 0
    || ([(UITableView *)self _delegateProxy],
        uint64_t v8 = objc_claimAutoreleasedReturnValue(),
        [v8 tableView:self previewForHighlightingContextMenuWithConfiguration:v7],
        double v9 = objc_claimAutoreleasedReturnValue(),
        v8,
        !v9))
  {
    uint64_t v10 = objc_getAssociatedObject(v7, &ContextMenuConfigurationAssociatedIdentifierKey);
    double v9 = [(UITableView *)self _defaultContextMenuTargetedPreviewForIdentifier:v10];
  }
  return v9;
}

- (id)contextMenuInteraction:(id)a3 previewForDismissingMenuWithConfiguration:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if ((*((unsigned char *)&self->_tableFlags + 12) & 0x40) == 0
    || ([(UITableView *)self _delegateProxy],
        uint64_t v8 = objc_claimAutoreleasedReturnValue(),
        [v8 tableView:self previewForDismissingContextMenuWithConfiguration:v7],
        double v9 = objc_claimAutoreleasedReturnValue(),
        v8,
        !v9))
  {
    uint64_t v10 = objc_getAssociatedObject(v7, &ContextMenuConfigurationAssociatedIdentifierKey);
    double v9 = [(UITableView *)self _defaultContextMenuTargetedPreviewForIdentifier:v10];
  }
  return v9;
}

- (void)contextMenuInteraction:(id)a3 willPerformPreviewActionForMenuWithConfiguration:(id)a4 animator:(id)a5
{
  id v12 = a3;
  id v8 = a4;
  id v9 = a5;
  uint64_t v10 = *((void *)&self->_tableFlags + 1);
  if ((v10 & 0x10000000000) != 0)
  {
    uint64_t v11 = [(UITableView *)self delegate];
    [v11 tableView:self willPerformPreviewActionForMenuWithConfiguration:v8 animator:v9];
  }
  else
  {
    if ((v10 & 0x8000000000) == 0) {
      goto LABEL_6;
    }
    uint64_t v11 = [(UITableView *)self delegate];
    [v11 tableView:self willCommitMenuWithAnimator:v9];
  }

LABEL_6:
}

- (void)contextMenuInteraction:(id)a3 willDisplayMenuForConfiguration:(id)a4 animator:(id)a5
{
  id v16 = a3;
  id v8 = a4;
  id v9 = a5;
  if ((*((unsigned char *)&self->_tableFlags + 13) & 2) != 0)
  {
    uint64_t v10 = [(UITableView *)self _delegateProxy];
    [v10 tableView:self willDisplayContextMenuWithConfiguration:v8 animator:v9];
  }
  uint64_t v11 = [v8 _effectiveSecondaryItemIdentifiers];
  unint64_t v12 = [v11 count];

  if (v12 >= 2)
  {
    char v13 = objc_getAssociatedObject(v8, &ContextMenuConfigurationAssociatedIdentifierKey);
    int v14 = [(UITableView *)self _identityTracker:0];
    CGRect v15 = -[_UIIndexPathIdentityTracker currentIndexPathForIdentifier:]((uint64_t)v14, (uint64_t)v13);

    [(UITableView *)self _updateContextMenuStateForVisibleCells:v15];
  }
}

- (void)contextMenuInteraction:(id)a3 willEndForConfiguration:(id)a4 animator:(id)a5
{
  id v9 = a4;
  id v7 = a5;
  [(UITableView *)self _updateContextMenuStateForVisibleCells:0];
  if ((*((unsigned char *)&self->_tableFlags + 13) & 4) != 0)
  {
    id v8 = [(UITableView *)self _delegateProxy];
    [v8 tableView:self willEndContextMenuInteractionWithConfiguration:v9 animator:v7];
  }
}

- (void)_updateContextMenuStateForVisibleCells:(id)a3
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4
    && (unint64_t)[(NSMutableArray *)self->_selectedIndexPaths count] >= 2
    && [(NSMutableArray *)self->_selectedIndexPaths containsObject:v4])
  {

    id v4 = 0;
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v5 = self->_visibleCells;
  uint64_t v6 = [(NSMutableArray *)v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v11 = 1;
        -[UITableView _indexPathForCell:usingPresentationValues:](self, "_indexPathForCell:usingPresentationValues:", v10, 1, (void)v14);
        id v12 = (id)objc_claimAutoreleasedReturnValue();
        id v13 = v4;
        if (v12 != v13)
        {
          uint64_t v11 = 0;
          if (v4)
          {
            if (v12) {
              uint64_t v11 = [v12 isEqual:v13];
            }
          }
        }

        [v10 _setShowingCompactContextMenu:v11];
      }
      uint64_t v7 = [(NSMutableArray *)v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v7);
  }
}

- (double)_heightForSeparator
{
  unint64_t v3 = [(UITableView *)self separatorStyle] - 1;
  double result = 0.0;
  if (v3 <= 1)
  {
    [(UIView *)self _currentScreenScale];
    return 1.0 / v5;
  }
  return result;
}

- (double)_backgroundInset
{
  rowData = self->_rowData;
  double result = 0.0;
  if (rowData)
  {
    char rowDataFlags = (char)rowData->_rowDataFlags;
    if ((rowDataFlags & 4) != 0)
    {
      return rowData->_tableSidePadding;
    }
    else
    {
      rowData->_tableSidePadding = 0.0;
      *(unsigned char *)&rowData->_char rowDataFlags = rowDataFlags | 4;
    }
  }
  return result;
}

- (UIEdgeInsets)_backgroundContentInset
{
  [(UITableView *)self _backgroundInset];
  double v3 = v2;
  double v4 = 0.0;
  double v5 = 0.0;
  double v6 = v3;
  result.double right = v6;
  result.double bottom = v5;
  result.double left = v3;
  result.double top = v4;
  return result;
}

- (CGRect)_calloutTargetRectForCell:(id)a3
{
  id v4 = a3;
  double v5 = v4;
  if (v4)
  {
    if ((*((unsigned char *)&self->_tableFlags + 8) & 4) != 0)
    {
      long long v14 = [(UITableView *)self _indexPathForCell:v4 usingPresentationValues:1];
      long long v15 = [(UITableView *)self _delegateProxy];
      [v15 tableView:self calloutTargetRectForCell:v5 forRowAtIndexPath:v14];
      double v7 = v16;
      double v9 = v17;
      double v11 = v18;
      double v13 = v19;
    }
    else
    {
      [v4 bounds];
      double v7 = v6;
      double v9 = v8;
      double v11 = v10;
      double v13 = v12;
    }
  }
  else
  {
    double v7 = *MEMORY[0x1E4F1DB28];
    double v9 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
    double v11 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
    double v13 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  }

  double v20 = v7;
  double v21 = v9;
  double v22 = v11;
  double v23 = v13;
  result.size.double height = v23;
  result.size.double width = v22;
  result.origin.double y = v21;
  result.origin.double x = v20;
  return result;
}

- (BOOL)_keepsFirstResponderVisibleOnBoundsChange
{
  return (*((unsigned __int8 *)&self->_tableFlags + 20) >> 3) & 1;
}

- (void)_setKeepsFirstResponderVisibleOnBoundsChange:(BOOL)a3
{
  uint64_t v3 = 0x800000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFFFF7FFFFFFFFLL | v3;
}

- (void)_setIgnorePinnedTableHeaderUpdates:(BOOL)a3
{
  uint64_t v3 = 0x200000000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2) & 0xFFFFDFFFFFFFFFFFLL | v3;
}

- (BOOL)ignorePinnedTableHeaderUpdates
{
  return (*((unsigned __int8 *)&self->_tableFlags + 21) >> 5) & 1;
}

- (void)encodeRestorableStateWithCoder:(id)a3
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  double v5 = [(UITableView *)self dataSource];
  int v6 = [(id)objc_opt_class() conformsToProtocol:&unk_1ED65E2E0];

  v33.receiver = self;
  v33.super_class = (Class)UITableView;
  [(UIScrollView *)&v33 encodeRestorableStateWithCoder:v4];
  double v7 = [(UIView *)self window];
  double v8 = [v7 firstResponder];

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v8 isDescendantOfView:self]) {
    [v4 encodeBool:1 forKey:@"UIViewNeedsLayoutKey"];
  }
  if (v6)
  {
    [(UIScrollView *)self contentOffset];
    double v10 = v9;
    double v12 = v11;
    [(UITableView *)self _contentInset];
    long long v14 = -[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", 1, v10, v12 + v13);
    if (v14)
    {
      long long v15 = [(UITableView *)self _dataSourceProxy];
      double v16 = [v15 modelIdentifierForElementAtIndexPath:v14 inView:self];

      if (v16) {
        [v4 encodeObject:v16 forKey:@"kTopApplicationTopVisibleModelIdentifier"];
      }
    }
  }
  if ([(UITableView *)self isEditing])
  {
    double v17 = [NSNumber numberWithBool:1];
    [v4 encodeObject:v17 forKey:@"kApplicationIsEditingKey"];
  }
  double v18 = [(UITableView *)self _indexPathsForSelectedRowsUsingPresentationValues:1];
  if ([v18 count])
  {
    [v4 encodeObject:v18 forKey:@"kApplicationSelectedCellIndexPathsKey"];
    if (v6)
    {
      id v28 = v8;
      double v19 = [MEMORY[0x1E4F1CA48] array];
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id v20 = v18;
      uint64_t v21 = [v20 countByEnumeratingWithState:&v29 objects:v34 count:16];
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v23 = *(void *)v30;
        do
        {
          uint64_t v24 = 0;
          do
          {
            if (*(void *)v30 != v23) {
              objc_enumerationMutation(v20);
            }
            uint64_t v25 = *(void *)(*((void *)&v29 + 1) + 8 * v24);
            double v26 = [(UITableView *)self _dataSourceProxy];
            double v27 = [v26 modelIdentifierForElementAtIndexPath:v25 inView:self];

            if (v27) {
              [v19 addObject:v27];
            }

            ++v24;
          }
          while (v22 != v24);
          uint64_t v22 = [v20 countByEnumeratingWithState:&v29 objects:v34 count:16];
        }
        while (v22);
      }

      if ([v19 count]) {
        [v4 encodeObject:v19 forKey:@"kApplicationSelectedCells"];
      }

      double v8 = v28;
    }
  }
}

- (BOOL)_indexPathIsValid:(id)a3
{
  if (!a3) {
    return 0;
  }
  uint64_t v5 = [a3 section];
  uint64_t v6 = [a3 row];
  return [(UITableView *)self _numberOfSectionsUsingPresentationValues:1] > v5&& [(UITableView *)self _numberOfRowsInSection:v5 usingPresentationValues:1] > v6;
}

- (BOOL)_pathIsHidden:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  BOOL v5 = 1;
  [(UITableView *)self _indexPathsForVisibleRowsUsingPresentationValues:1];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v6);
        }
        if (objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * i), "isEqual:", v4, (void)v12))
        {
          BOOL v5 = 0;
          goto LABEL_11;
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v8) {
        continue;
      }
      break;
    }
    BOOL v5 = 1;
  }
LABEL_11:

  return v5;
}

- (void)decodeRestorableStateWithCoder:(id)a3
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([v4 decodeBoolForKey:@"UIViewNeedsLayoutKey"]) {
    [(UIView *)self layoutIfNeeded];
  }
  BOOL v5 = [(UITableView *)self dataSource];
  int v6 = [(id)objc_opt_class() conformsToProtocol:&unk_1ED65E2E0];

  [(UITableView *)self _reloadDataIfNeeded];
  v57.receiver = self;
  v57.super_class = (Class)UITableView;
  [(UIScrollView *)&v57 decodeRestorableStateWithCoder:v4];
  if (v6)
  {
    uint64_t v7 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"kTopApplicationTopVisibleModelIdentifier"];
    [(UIScrollView *)self contentOffset];
    double v9 = v8;
    double v11 = v10;
    [(UITableView *)self _contentInset];
    char v13 = 1;
    -[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", 1, v9, v11 + v12);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    long long v15 = [(UITableView *)self _dataSourceProxy];
    double v16 = [v15 modelIdentifierForElementAtIndexPath:v14 inView:self];

    double v47 = v16;
    double v48 = (void *)v7;
    if (v7)
    {
      if ([v16 isEqualToString:v7])
      {
        char v13 = 0;
      }
      else
      {
        double v26 = [(UITableView *)self _dataSourceProxy];
        uint64_t v27 = [v26 indexPathForElementWithModelIdentifier:v7 inView:self];

        if (v27)
        {
          if ([(UITableView *)self _indexPathIsValid:v27])
          {
            [(UITableView *)self _scrollToRowAtIndexPath:v27 atScrollPosition:1 animated:0 usingPresentationValues:1];
            char v13 = 0;
          }
          id v14 = (id)v27;
        }
        else
        {
          id v14 = 0;
        }
      }
    }
    id v28 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"kApplicationIsEditingKey"];
    long long v29 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v30 = objc_opt_class();
    long long v31 = objc_msgSend(v29, "setWithObjects:", v30, objc_opt_class(), 0);
    long long v32 = [v4 decodeObjectOfClasses:v31 forKey:@"kApplicationSelectedCells"];

    if (v28)
    {
      objc_super v33 = [(UITableView *)self delegate];
      double v34 = [(UITableView *)self dataSource];
      char v35 = objc_opt_respondsToSelector();
      double v36 = v33;
      if ((v35 & 1) == 0)
      {
        if (objc_opt_respondsToSelector()) {
          double v36 = v34;
        }
        else {
          double v36 = self;
        }
      }
      [(UITableView *)v36 setEditing:1 animated:0];
    }
    if (v32)
    {
      uint64_t v45 = v32;
      float v46 = v28;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      id v37 = v32;
      uint64_t v38 = [v37 countByEnumeratingWithState:&v53 objects:v59 count:16];
      if (v38)
      {
        uint64_t v39 = v38;
        uint64_t v40 = *(void *)v54;
        do
        {
          for (uint64_t i = 0; i != v39; ++i)
          {
            double v42 = v14;
            if (*(void *)v54 != v40) {
              objc_enumerationMutation(v37);
            }
            uint64_t v43 = *(void *)(*((void *)&v53 + 1) + 8 * i);
            double v44 = [(UITableView *)self _dataSourceProxy];
            id v14 = [v44 indexPathForElementWithModelIdentifier:v43 inView:self];

            if (v14 && [(UITableView *)self _indexPathIsValid:v14])
            {
              if ((v13 & 1) != 0 && [(UITableView *)self _pathIsHidden:v14]) {
                [(UITableView *)self _scrollToRowAtIndexPath:v14 atScrollPosition:0 animated:0 usingPresentationValues:1];
              }
              [(UITableView *)self selectRowAtIndexPath:v14 animated:0 scrollPosition:0];
              char v13 = 0;
            }
          }
          uint64_t v39 = [v37 countByEnumeratingWithState:&v53 objects:v59 count:16];
        }
        while (v39);
      }

      long long v32 = v45;
      id v28 = v46;
    }

    id v20 = v48;
LABEL_45:

    goto LABEL_46;
  }
  uint64_t v17 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v18 = objc_opt_class();
  double v19 = objc_msgSend(v17, "setWithObjects:", v18, objc_opt_class(), 0);
  id v20 = [v4 decodeObjectOfClasses:v19 forKey:@"kApplicationSelectedCellIndexPathsKey"];

  if ([v20 count])
  {
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    id v14 = v20;
    uint64_t v21 = [v14 countByEnumeratingWithState:&v49 objects:v58 count:16];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v50;
      do
      {
        for (uint64_t j = 0; j != v22; ++j)
        {
          if (*(void *)v50 != v23) {
            objc_enumerationMutation(v14);
          }
          uint64_t v25 = *(void *)(*((void *)&v49 + 1) + 8 * j);
          if ([(UITableView *)self _indexPathIsValid:v25]) {
            [(UITableView *)self selectRowAtIndexPath:v25 animated:0 scrollPosition:0];
          }
        }
        uint64_t v22 = [v14 countByEnumeratingWithState:&v49 objects:v58 count:16];
      }
      while (v22);
    }
    id v20 = v14;
    goto LABEL_45;
  }
LABEL_46:
}

- (BOOL)_separatorsDrawAsOverlay
{
  return (*((unsigned __int8 *)&self->_tableFlags + 21) >> 6) & 1;
}

- (int64_t)_separatorBackdropOverlayBlendMode
{
  return (*((void *)&self->_tableFlags + 2) >> 50) & 7;
}

- (UIVisualEffect)separatorEffect
{
  return self->_separatorEffect;
}

- (void)setInsetsLayoutMarginsFromSafeArea:(BOOL)a3
{
  BOOL v3 = a3;
  v5.receiver = self;
  v5.super_class = (Class)UITableView;
  [(UIView *)&v5 setInsetsLayoutMarginsFromSafeArea:sel_setInsetsLayoutMarginsFromSafeArea_];
  [(UIView *)self->_wrapperView setInsetsLayoutMarginsFromSafeArea:v3];
}

- (UITableViewSeparatorInsetReference)separatorInsetReference
{
  return (unint64_t)((*((unsigned char *)&self->_tableFlags + 25) & 0x80) == 0);
}

- (UIEdgeInsets)separatorInset
{
  double top = self->_separatorInset.top;
  double left = self->_separatorInset.left;
  double bottom = self->_separatorInset.bottom;
  double right = self->_separatorInset.right;
  if (left == -1.0)
  {
    [(UITableView *)self _defaultMarginWidth];
    double left = v7;
  }
  if (right == -1.0)
  {
    [(UITableView *)self _indexBarExtentFromEdge];
    double right = v8;
  }
  if (bottom == -1.0) {
    double v9 = 0.0;
  }
  else {
    double v9 = bottom;
  }
  if (top == -1.0) {
    double v10 = 0.0;
  }
  else {
    double v10 = top;
  }
  double v11 = left;
  double v12 = right;
  result.double right = v12;
  result.double bottom = v9;
  result.double left = v11;
  result.double top = v10;
  return result;
}

- (BOOL)_isEditingForSwipeDeletion
{
  return (*((unsigned __int8 *)&self->_tableFlags + 21) >> 4) & 1;
}

- (void)setSelfSizingInvalidation:(UITableViewSelfSizingInvalidation)selfSizingInvalidation
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  p_uint64_t tableFlags = &self->_tableFlags;
  unint64_t v4 = *((void *)&self->_tableFlags + 3);
  uint64_t v5 = (v4 >> 39) & 3;
  unint64_t v6 = v4 & 0xFFFFFE7FFFFFFFFFLL | ((unint64_t)(selfSizingInvalidation & 3) << 39);
  *((void *)&self->_tableFlags + 3) = v6;
  if (v5 != selfSizingInvalidation)
  {
    if ((selfSizingInvalidation & 3) == 0)
    {
      [(UITableView *)self _clearNeedsRecomputeHeightsForInvalidatedElements];
      unint64_t v6 = *((void *)p_tableFlags + 3);
    }
    uint64_t v8 = v6 & 0x18000000000;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    double v9 = [(UITableView *)self _preparedCells];
    uint64_t v10 = [v9 countByEnumeratingWithState:&v34 objects:v40 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v35;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v35 != v12) {
            objc_enumerationMutation(v9);
          }
          [*(id *)(*((void *)&v34 + 1) + 8 * i) _setAutomaticIntrinsicContentSizeInvalidationEnabled:v8 == 0x10000000000];
        }
        uint64_t v11 = [v9 countByEnumeratingWithState:&v34 objects:v40 count:16];
      }
      while (v11);
    }

    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v14 = [(NSMutableDictionary *)self->_visibleHeaderViews objectEnumerator];
    uint64_t v15 = [v14 countByEnumeratingWithState:&v30 objects:v39 count:16];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)v31;
      do
      {
        for (uint64_t j = 0; j != v16; ++j)
        {
          if (*(void *)v31 != v17) {
            objc_enumerationMutation(v14);
          }
          double v19 = *(void **)(*((void *)&v30 + 1) + 8 * j);
          if (_IsKindOfUITableViewHeaderFooterView(v19)) {
            [v19 _setAutomaticIntrinsicContentSizeInvalidationEnabled:v8 == 0x10000000000];
          }
        }
        uint64_t v16 = [v14 countByEnumeratingWithState:&v30 objects:v39 count:16];
      }
      while (v16);
    }

    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v20 = [(NSMutableDictionary *)self->_visibleFooterViews objectEnumerator];
    uint64_t v21 = [v20 countByEnumeratingWithState:&v26 objects:v38 count:16];
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v27;
      do
      {
        for (uint64_t k = 0; k != v22; ++k)
        {
          if (*(void *)v27 != v23) {
            objc_enumerationMutation(v20);
          }
          uint64_t v25 = *(void **)(*((void *)&v26 + 1) + 8 * k);
          if (_IsKindOfUITableViewHeaderFooterView(v25)) {
            [v25 _setAutomaticIntrinsicContentSizeInvalidationEnabled:v8 == 0x10000000000];
          }
        }
        uint64_t v22 = [v20 countByEnumeratingWithState:&v26 objects:v38 count:16];
      }
      while (v22);
    }
  }
}

- (UITableViewSelfSizingInvalidation)selfSizingInvalidation
{
  return (*((void *)&self->_tableFlags + 3) >> 39) & 3;
}

- (void)_setNeedsRecomputeHeightsForInvalidatedElements
{
  if (!self->_intrinsicContentSizeInvalidationContext)
  {
    BOOL v3 = objc_alloc_init(UICollectionViewLayoutInvalidationContext);
    intrinsicContentSizeInvalidationContext = self->_intrinsicContentSizeInvalidationContext;
    self->_intrinsicContentSizeInvalidationContext = v3;

    [(UIScrollView *)self setNeedsLayout];
  }
  BOOL v5 = +[UIView areAnimationsEnabled];
  unint64_t v6 = *((void *)&self->_tableFlags + 3);
  uint64_t v7 = 0x20000000000;
  if (!(v5 | (v6 >> 41) & 1)) {
    uint64_t v7 = 0;
  }
  *((void *)&self->_tableFlags + 3) = v7 | v6 & 0xFFFFFDFFFFFFFFFFLL;
}

void __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke(id *a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v2 = a1[4];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v31 objects:v37 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v32;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v32 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v31 + 1) + 8 * i);
        if ([a1[5] _indexPathIsValid:v7])
        {
          uint64_t v8 = [a1[5] _cellForRowAtIndexPath:v7 usingPresentationValues:1];
          [a1[5] _recomputeHeightForCell:v8 atIndexPath:v7];
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v31 objects:v37 count:16];
    }
    while (v4);
  }

  double v9 = [a1[6] objectForKey:@"UICollectionElementKindSectionHeader"];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v27 objects:v36 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v28;
    do
    {
      for (uint64_t j = 0; j != v11; ++j)
      {
        if (*(void *)v28 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = [*(id *)(*((void *)&v27 + 1) + 8 * j) section];
        if (v14 < [a1[5] _numberOfSectionsUsingPresentationValues:1])
        {
          uint64_t v15 = [a1[5] _headerViewForSection:v14 usingPresentationValues:1];
          [a1[5] _recomputeHeightForHeaderOrFooter:1 view:v15 inSection:v14];
        }
      }
      uint64_t v11 = [v9 countByEnumeratingWithState:&v27 objects:v36 count:16];
    }
    while (v11);
  }
  uint64_t v16 = [a1[6] objectForKey:@"UICollectionElementKindSectionFooter"];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v17 = [v16 countByEnumeratingWithState:&v23 objects:v35 count:16];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)v24;
    do
    {
      for (uint64_t k = 0; k != v18; ++k)
      {
        if (*(void *)v24 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v21 = [*(id *)(*((void *)&v23 + 1) + 8 * k) section];
        if (v21 < [a1[5] _numberOfSectionsUsingPresentationValues:1])
        {
          uint64_t v22 = [a1[5] _footerViewForSection:v21 usingPresentationValues:1];
          [a1[5] _recomputeHeightForHeaderOrFooter:0 view:v22 inSection:v21];
        }
      }
      uint64_t v18 = [v16 countByEnumeratingWithState:&v23 objects:v35 count:16];
    }
    while (v18);
  }
}

void __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke_2(void *a1)
{
  (*(void (**)(void))(a1[8] + 16))();
  id v2 = (unsigned char *)a1[4];
  if ((v2[3087] & 0x20) != 0)
  {
    uint64_t v3 = [v2 _setupAnimationsForResizedViewsWithOldRowData:a1[5] oldVisibleViews:a1[6]];
    uint64_t v4 = *(void *)(a1[7] + 8);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

uint64_t __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke_3(uint64_t result, uint64_t a2)
{
  if (*(void *)(*(void *)(*(void *)(result + 48) + 8) + 40)) {
    return objc_msgSend(*(id *)(result + 32), "_updateAnimationDidStopWithOldVisibleViews:finished:context:", *(void *)(result + 40), a2);
  }
  return result;
}

uint64_t __62__UITableView__recomputeHeightsForInvalidatedElementsIfNeeded__block_invoke_4(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 3096) &= 0xFFFFE7FFFFFFFFFFLL;
  return result;
}

- (id)_setupAnimationsForResizedViewsWithOldRowData:(id)a3 oldVisibleViews:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = [_UITableViewUpdateSupport alloc];
  rowData = self->_rowData;
  uint64_t v10 = -[UITableViewRowData numberOfRows]((uint64_t)v7);
  uint64_t v11 = -[UITableViewRowData numberOfRows]((uint64_t)self->_rowData);
  char v13 = (_UITableViewUpdateSupport *)-[_UITableViewUpdateSupport initWithTableView:updateItems:oldRowData:newRowData:oldRowRange:newRowRange:context:](v8, self, MEMORY[0x1E4F1CBF0], v7, rowData, 0, v10, v12, 0, v11, 0);

  currentUpdate = self->_currentUpdate;
  self->_currentUpdate = v13;

  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __77__UITableView__setupAnimationsForResizedViewsWithOldRowData_oldVisibleViews___block_invoke;
  v23[3] = &unk_1E52D9F70;
  void v23[4] = self;
  +[UIView performWithoutAnimation:v23];
  uint64_t v15 = -[UIViewAnimationContext initWithCompletionHandler:]([UIViewAnimationContext alloc], 0);
  -[UIViewAnimationContext setViewAnimations:]((uint64_t)v15, self->_currentUpdate->viewAnimations);
  ++self->_updateAnimationCount;
  self->_visibleRows.NSUInteger location = -[UITableViewRowData globalRowsInRect:canGuess:](&self->_rowData->super.isa, 0, self->_currentUpdate->newTableViewVisibleBounds.origin.x, self->_currentUpdate->newTableViewVisibleBounds.origin.y, self->_currentUpdate->newTableViewVisibleBounds.size.width, self->_currentUpdate->newTableViewVisibleBounds.size.height);
  self->_visibleRows.NSUInteger length = v16;
  [(UITableView *)self _visibleBounds];
  self->_visibleBounds.origin.double x = v17;
  self->_visibleBounds.origin.double y = v18;
  self->_visibleBounds.size.double width = v19;
  self->_visibleBounds.size.double height = v20;
  [(UITableView *)self _startViewAnimationsForUpdate:self->_currentUpdate withContext:v15 swipeOccurrenceAnimatingDelete:0 oldVisibleViews:v6 useCopyBlendingForAnimations:0];

  uint64_t v21 = self->_currentUpdate;
  self->_currentUpdate = 0;

  return v15;
}

void __77__UITableView__setupAnimationsForResizedViewsWithOldRowData_oldVisibleViews___block_invoke(uint64_t a1)
{
}

- (BOOL)_recomputeHeightForCell:(id)a3 atIndexPath:(id)a4
{
  id v4 = a3;
  if (a3)
  {
    if ([a3 _isHiddenForReuse])
    {
      LOBYTE(v4) = 0;
    }
    else
    {
      double v7 = -[UITableViewRowData rectForRow:inSection:heightCanBeGuessed:]((uint64_t)self->_rowData, [a4 row], objc_msgSend(a4, "section"), 1);
      CGFloat v9 = v8;
      CGFloat v11 = v10;
      CGFloat v13 = v12;
      [v4 _setNeedsHeightCalculation:1];
      [(UITableView *)self _heightForCell:v4 atIndexPath:a4];
      double v15 = v14;
      [v4 _setNeedsHeightCalculation:0];
      v17.origin.double x = v7;
      v17.origin.double y = v9;
      v17.size.double width = v11;
      v17.size.double height = v13;
      LOBYTE(v4) = 0;
      if (vabdd_f64(CGRectGetHeight(v17), v15) > 0.0001)
      {
        -[UITableViewRowData setHeight:forRowAtIndexPath:]((uint64_t)self->_rowData, a4, v15);
        LOBYTE(v4) = 1;
        [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1 updateImmediatelyIfPossible:0];
      }
    }
  }
  return (char)v4;
}

- (BOOL)_recomputeHeightForHeaderOrFooter:(BOOL)a3 view:(id)a4 inSection:(int64_t)a5
{
  BOOL v6 = a3;
  id v8 = a4;
  CGFloat v9 = v8;
  if (!v8 || ([v8 _isHiddenForReuse] & 1) != 0) {
    goto LABEL_9;
  }
  rowData = self->_rowData;
  if (v6)
  {
    double v11 = -[UITableViewRowData rectForHeaderInSection:heightCanBeGuessed:]((uint64_t)rowData, a5, 1);
    CGFloat v13 = v12;
    CGFloat v15 = v14;
    CGFloat v17 = v16;
    [(UITableView *)self _heightForHeaderView:v9 inSection:a5];
  }
  else
  {
    double v11 = -[UITableViewRowData rectForFooterInSection:heightCanBeGuessed:]((uint64_t)rowData, a5, 1);
    CGFloat v13 = v19;
    CGFloat v15 = v20;
    CGFloat v17 = v21;
    [(UITableView *)self _heightForFooterView:v9 inSection:a5];
  }
  double v22 = v18;
  v26.origin.double x = v11;
  v26.origin.double y = v13;
  v26.size.double width = v15;
  v26.size.double height = v17;
  if (vabdd_f64(CGRectGetHeight(v26), v22) <= 0.0001)
  {
LABEL_9:
    BOOL v24 = 0;
  }
  else
  {
    long long v23 = self->_rowData;
    if (v6) {
      -[UITableViewRowData setHeight:forHeaderInSection:]((uint64_t)v23, a5, v22);
    }
    else {
      -[UITableViewRowData setHeight:forFooterInSection:]((uint64_t)v23, a5, v22);
    }
    BOOL v24 = 1;
    [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1 updateImmediatelyIfPossible:0];
  }

  return v24;
}

- (BOOL)_disableReuseQueuePurgeOnTextSizeChanges
{
  return (*((unsigned __int8 *)&self->_tableFlags + 28) >> 4) & 1;
}

- (void)_setDisableReuseQueuePurgeOnTextSizeChanges:(BOOL)a3
{
  uint64_t v3 = 0x1000000000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFEFFFFFFFFFLL | v3;
}

- (void)_systemTextSizeChanged
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  BOOL v3 = [(UITableView *)self cellLayoutMarginsFollowReadableWidth];
  if (self && v3) {
    [(UIView *)self _updateInferredLayoutMargins];
  }
  [(UITableView *)self _reapTentativeViews];
  -[_UITableViewSubviewManager removeAllPrefetchedCells]((id *)&self->_subviewManager->super.isa);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v4 = self->_visibleCells;
  uint64_t v5 = [(NSMutableArray *)v4 countByEnumeratingWithState:&v29 objects:v35 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v30;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v30 != v7) {
          objc_enumerationMutation(v4);
        }
        __37__UITableView__systemTextSizeChanged__block_invoke(*(void **)(*((void *)&v29 + 1) + 8 * v8++));
      }
      while (v6 != v8);
      uint64_t v6 = [(NSMutableArray *)v4 countByEnumeratingWithState:&v29 objects:v35 count:16];
    }
    while (v6);
  }

  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  CGFloat v9 = [(NSMutableDictionary *)self->_reusableTableCells objectEnumerator];
  uint64_t v10 = [v9 countByEnumeratingWithState:&v25 objects:v34 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)v26;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v26 != v12) {
          objc_enumerationMutation(v9);
        }
        double v14 = *(void **)(*((void *)&v25 + 1) + 8 * v13);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        id v15 = v14;
        uint64_t v16 = [v15 countByEnumeratingWithState:&v21 objects:v33 count:16];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = *(void *)v22;
          do
          {
            uint64_t v19 = 0;
            do
            {
              if (*(void *)v22 != v18) {
                objc_enumerationMutation(v15);
              }
              __37__UITableView__systemTextSizeChanged__block_invoke(*(void **)(*((void *)&v21 + 1) + 8 * v19++));
            }
            while (v17 != v19);
            uint64_t v17 = [v15 countByEnumeratingWithState:&v21 objects:v33 count:16];
          }
          while (v17);
        }

        ++v13;
      }
      while (v13 != v11);
      uint64_t v11 = [v9 countByEnumeratingWithState:&v25 objects:v34 count:16];
    }
    while (v11);
  }

  uint64_t v20 = *((void *)&self->_tableFlags + 3);
  if ((v20 & 0x1000000000) == 0)
  {
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2);
    *((void *)&self->_tableFlags + 3) = v20 | 0x800000000;
  }
  [(UITableView *)self _performInternalReloadData];
}

void __37__UITableView__systemTextSizeChanged__block_invoke(void *a1)
{
  id v3 = a1;
  id v1 = [MEMORY[0x1E4F1CA98] null];

  id v2 = v3;
  if (v1 != v3)
  {
    [v3 _systemTextSizeChanged];
    id v2 = v3;
  }
}

- (void)_setManuallyManagesSwipeUI:(BOOL)a3
{
  unint64_t v3 = 0x8000000000000000;
  if (!a3) {
    unint64_t v3 = 0;
  }
  *((void *)&self->_tableFlags + 2) = v3 & 0x8000000000000000 | *((void *)&self->_tableFlags + 2) & 0x7FFFFFFFFFFFFFFFLL;
  [(UITableView *)self _updateWrapperView];
}

- (void)_setHeight:(double)a3 forRowAtIndexPath:(id)a4
{
  id v6 = a4;
  [(UITableView *)self _setHeight:v6 forRowAtIndexPath:[(UITableView *)self _isUsingPresentationValues] usingPresentationValues:a3];
}

- (void)_setHeight:(double)a3 forRowAtIndexPath:(id)a4 usingPresentationValues:(BOOL)a5
{
  id v8 = a4;
  if (!a5)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      id v12 = v8;
      uint64_t v10 = -[_UITableViewShadowUpdatesController indexPathAfterShadowUpdates:](shadowUpdatesController, "indexPathAfterShadowUpdates:");

      id v8 = (id)v10;
    }
  }
  double v11 = 0.00000011920929;
  if (a3 > 0.0) {
    double v11 = a3;
  }
  id v13 = v8;
  -[UITableViewRowData setHeight:forRowAtIndexPath:]((uint64_t)self->_rowData, v8, v11);
  [(UITableView *)self _setNeedsVisibleCellsUpdate:1 withFrames:1];
}

- (BOOL)_allowsReorderingWhenNotEditing
{
  return *((unsigned char *)&self->_tableFlags + 24) & 1;
}

- (void)_setAllowsReorderingWhenNotEditing:(BOOL)a3
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  p_uint64_t tableFlags = &self->_tableFlags;
  uint64_t v4 = *((void *)&self->_tableFlags + 3);
  if (((((v4 & 1) == 0) ^ a3) & 1) == 0)
  {
    *((void *)&self->_tableFlags + 2) = *((void *)&self->_tableFlags + 2);
    *((void *)&self->_tableFlags + 3) = v4 & 0xFFFFFFFFFFFFFFFELL | a3;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v6 = self->_visibleCells;
    uint64_t v7 = [(NSMutableArray *)v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (!v7) {
      goto LABEL_16;
    }
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v16;
    while (1)
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v16 != v9) {
          objc_enumerationMutation(v6);
        }
        double v11 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        objc_msgSend(v11, "_setAllowsReorderingWhenNotEditing:", *((_DWORD *)p_tableFlags + 6) & 1, (void)v15);
        id v12 = [(UITableView *)self _indexPathForCell:v11 usingPresentationValues:1];
        uint64_t v13 = *((void *)p_tableFlags + 1);
        if ((v13 & 0x10000000000000) != 0)
        {
          if ([(UITableView *)self _canEditRowAtIndexPath:v12]) {
            goto LABEL_13;
          }
          uint64_t v13 = *((void *)p_tableFlags + 1);
        }
        if ((v13 & 0x10000000000000) != 0 || (*((unsigned char *)p_tableFlags + 24) & 1) == 0)
        {
          BOOL v14 = 0;
          goto LABEL_14;
        }
LABEL_13:
        BOOL v14 = [(UITableView *)self _canReorderRowAtIndexPath:v12];
LABEL_14:
        [v11 _setShowsReorderControl:v14];
      }
      uint64_t v8 = [(NSMutableArray *)v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (!v8)
      {
LABEL_16:

        return;
      }
    }
  }
}

- (void)_setIndexRetargetFeedbackGenerator:(id)a3
{
  uint64_t v5 = (UISelectionFeedbackGenerator *)a3;
  if ([(UIFeedbackGenerator *)self->_indexRetargetFeedbackGenerator isActive])
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    [v7 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:18780 description:@"Index retarget feedback behavior should not be changed while active."];
  }
  indexRetargetFeedbackGenerator = self->_indexRetargetFeedbackGenerator;
  self->_indexRetargetFeedbackGenerator = v5;
}

- (id)_indexRetargetFeedbackGenerator
{
  return self->_indexRetargetFeedbackGenerator;
}

- (void)_setReorderFeedbackGenerator:(id)a3
{
  uint64_t v5 = (_UIDragSnappingFeedbackGenerator *)a3;
  if ([(UIFeedbackGenerator *)self->_reorderFeedbackGenerator isActive])
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    [v7 handleFailureInMethod:a2 object:self file:@"UITableView.m" lineNumber:18791 description:@"Reorder feedback behavior should not be changed while active."];
  }
  reorderFeedbackGenerator = self->_reorderFeedbackGenerator;
  self->_reorderFeedbackGenerator = v5;
}

- (id)_reorderFeedbackGenerator
{
  return self->_reorderFeedbackGenerator;
}

- (void)_setCellsSelfSize:(BOOL)a3
{
  uint64_t v4 = 16;
  if (!a3) {
    uint64_t v4 = 0;
  }
  *((void *)&self->_tableFlags + 3) = *((void *)&self->_tableFlags + 3) & 0xFFFFFFFFFFFFFFEFLL | v4;
  [(UITableView *)self _initializeTentativeViewContainers];
  [(UITableView *)self _setupDefaultHeights];
}

- (BOOL)_cellsSelfSize
{
  return (*((unsigned __int8 *)&self->_tableFlags + 24) >> 4) & 1;
}

- (void)swipeActionController:(id)a3 swipeOccurrence:(id)a4 didChangeStateFrom:(int64_t)a5 to:(int64_t)a6
{
  id v12 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (a6 == 5
    || a6 == 4
    && ([v8 currentAction],
        uint64_t v10 = objc_claimAutoreleasedReturnValue(),
        uint64_t v11 = [v10 style],
        v10,
        v11 != 1))
  {
    [v12 resetSwipedItemAnimated:1 completion:0];
  }
}

- (id)swipeActionController:(id)a3 indexPathForTouchLocation:(CGPoint)a4
{
  return -[UITableView _indexPathForRowAtPoint:usingPresentationValues:](self, "_indexPathForRowAtPoint:usingPresentationValues:", 1, a4.x, a4.y);
}

- (id)swipeActionController:(id)a3 viewForItemAtIndexPath:(id)a4
{
  return [(UITableView *)self _cellForRowAtIndexPath:a4 usingPresentationValues:1];
}

- (id)swipeActionController:(id)a3 leadingSwipeConfigurationForItemAtIndexPath:(id)a4
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  uint64_t tableFlags = (uint64_t)self->_tableFlags;
  if ((tableFlags & 0x200000) != 0)
  {
    long long v21 = [(UITableView *)self _delegateProxy];
    uint64_t v19 = [v21 tableView:self leadingSwipeActionsConfigurationForRowAtIndexPath:v8];

    if (!v19)
    {
LABEL_18:
      long long v26 = [(UITableView *)self _cellForRowAtIndexPath:v8 usingPresentationValues:1];
      long long v27 = v26;
      if (v26
        && ([v26 contentView],
            long long v28 = objc_claimAutoreleasedReturnValue(),
            char v29 = objc_opt_respondsToSelector(),
            v28,
            (v29 & 1) != 0))
      {
        long long v30 = [v27 contentView];
        uint64_t v19 = [v30 _leadingSwipeActionsConfiguration];
      }
      else
      {
        uint64_t v19 = 0;
      }

      goto LABEL_23;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      long long v22 = [MEMORY[0x1E4F28B00] currentHandler];
      long long v23 = [(UITableView *)self _delegateActual];
      long long v24 = (objc_class *)objc_opt_class();
      long long v25 = NSStringFromClass(v24);
      [v22 handleFailureInMethod:a2, self, @"UITableView.m", 18875, @"%@ is expected to return an instance of %@ from -tableView:leadingSwipeActionsConfigurationForRowAtIndexPath: but returned %@.", v23, v25, v19 object file lineNumber description];
    }
  }
  else
  {
    if ((tableFlags & 0x800000) == 0) {
      goto LABEL_18;
    }
    uint64_t v10 = [(UITableView *)self _delegateProxy];
    uint64_t v11 = [v10 tableView:self leadingSwipeActionsForRowAtIndexPath:v8];

    if (!v11) {
      goto LABEL_18;
    }
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v12 = v11;
    uint64_t v13 = [v12 countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)v35;
      do
      {
        uint64_t v16 = 0;
        do
        {
          if (*(void *)v35 != v15) {
            objc_enumerationMutation(v12);
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            long long v33 = [MEMORY[0x1E4F28B00] currentHandler];
            long long v32 = [(UITableView *)self _delegateActual];
            long long v17 = (objc_class *)objc_opt_class();
            long long v18 = NSStringFromClass(v17);
            [v33 handleFailureInMethod:a2, self, @"UITableView.m", 18883, @"%@ is expected to return an array of %@ from -tableView:leadingSwipeActionsForRowAtIndexPath: but returned %@.", v32, v18, v12 object file lineNumber description];
          }
          ++v16;
        }
        while (v14 != v16);
        uint64_t v14 = [v12 countByEnumeratingWithState:&v34 objects:v38 count:16];
      }
      while (v14);
    }

    uint64_t v19 = +[UISwipeActionsConfiguration configurationWithActions:v12];
    uint64_t v20 = [v12 firstObject];
    objc_msgSend(v19, "setPerformsFirstActionWithFullSwipe:", objc_msgSend(v20, "canBeTriggeredBySwipe"));

    if (!v19) {
      goto LABEL_18;
    }
  }
LABEL_23:

  return v19;
}

- (id)swipeActionController:(id)a3 trailingSwipeConfigurationForItemAtIndexPath:(id)a4
{
  return [(UITableView *)self _trailingSwipeConfigurationAtIndexPath:a4 fromRemoveButton:0];
}

- (int64_t)layoutDirectionForSwipeActionController:(id)a3
{
  if (dyld_program_sdk_at_least())
  {
    return [(UIView *)self effectiveUserInterfaceLayoutDirection];
  }
  else
  {
    uint64_t v5 = [(UIView *)self traitCollection];
    int64_t v6 = [v5 layoutDirection];

    return v6;
  }
}

- (void)swipeActionController:(id)a3 willPerformAction:(id)a4 atIndexPath:(id)a5
{
  if (objc_msgSend(a4, "style", a3) == 1) {
    *((void *)&self->_tableFlags + 2) |= 0x800000000000uLL;
  }
}

- (void)swipeActionController:(id)a3 didCompleteAction:(id)a4 cancelled:(BOOL)a5 atIndexPath:(id)a6
{
  *((void *)&self->_tableFlags + 2) &= ~0x800000000000uLL;
}

- (void)swipeActionController:(id)a3 didCompleteAnimationOfAction:(id)a4 canceled:(BOOL)a5 atIndexPath:(id)a6
{
  id deferredEditingHandler = self->_deferredEditingHandler;
  if (deferredEditingHandler)
  {
    id v8 = (void (**)(void))_Block_copy(deferredEditingHandler);
    v8[2]();
    id v9 = self->_deferredEditingHandler;
    self->_id deferredEditingHandler = 0;
  }
  *((void *)&self->_tableFlags + 2) &= ~0x80000000000uLL;
}

- (UIEdgeInsets)swipeActionController:(id)a3 extraInsetsForItemAtIndexPath:(id)a4
{
  [(UITableView *)self _effectiveSafeAreaInsets];
  if ((*((unsigned char *)&self->_tableFlags + 22) & 0x40) != 0)
  {
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    if (![(UITableView *)self insetsContentViewsToSafeArea]) {
      goto LABEL_5;
    }
    [(UIView *)self->_wrapperView safeAreaInsets];
  }
  double v12 = v5;
  double v11 = v6;
  double v10 = v7;
  double v9 = v8;
LABEL_5:
  int v13 = *((_DWORD *)&self->super.super._viewFlags + 4);
  [(UIView *)self->_index frame];
  double Width = CGRectGetWidth(v20);
  if ((*(void *)&v13 & 0x80000) != 0) {
    double v15 = -0.0;
  }
  else {
    double v15 = Width;
  }
  double v16 = v9 + v15;
  if ((*(void *)&v13 & 0x80000) == 0) {
    double Width = -0.0;
  }
  double v17 = v11 + Width;
  double v18 = v12;
  double v19 = v10;
  result.double right = v16;
  result.double bottom = v19;
  result.double left = v17;
  result.double top = v18;
  return result;
}

- (BOOL)swipeActionController:(id)a3 insertActionsView:(id)a4 forItemAtIndexPath:(id)a5
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  id v8 = a5;
  double v9 = [(UITableView *)self _cellForRowAtIndexPath:v8 usingPresentationValues:1];
  if (v9)
  {
    double v10 = objc_opt_new();
    [v9 _setSwipeContainerView:v10];
    [v10 insertSubview:v7 atIndex:0];
LABEL_3:

    goto LABEL_7;
  }
  if (os_variant_has_internal_diagnostics())
  {
    double v10 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      int v13 = 138412290;
      id v14 = v8;
      _os_log_fault_impl(&dword_1853B0000, v10, OS_LOG_TYPE_FAULT, "Swipe actions view was not created for index path: %@", (uint8_t *)&v13, 0xCu);
    }
    goto LABEL_3;
  }
  double v11 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &swipeActionController_insertActionsView_forItemAtIndexPath____s_category_0)+ 8);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    int v13 = 138412290;
    id v14 = v8;
    _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "Swipe actions view was not created for index path: %@", (uint8_t *)&v13, 0xCu);
  }
LABEL_7:

  return v9 != 0;
}

- (void)swipeActionController:(id)a3 cleanupActionsView:(id)a4 forItemAtIndexPath:(id)a5
{
  id v7 = a5;
  [a4 removeFromSuperview];
  id v8 = [(UITableView *)self _cellForRowAtIndexPath:v7 usingPresentationValues:1];

  [v8 _setSwipeContainerView:0];
}

- (BOOL)swipeActionController:(id)a3 mayBeginSwipeForItemAtIndexPath:(id)a4
{
  id v5 = a4;
  if (![(UITableView *)self _wantsSwipes]) {
    goto LABEL_8;
  }
  if ([v5 isEqual:self->_swipedIndexPath])
  {
    BOOL v6 = 1;
    goto LABEL_9;
  }
  if (![(UITableView *)self _canEditRowAtIndexPath:v5]
    || (p_uint64_t tableFlags = &self->_tableFlags, (*((void *)&self->_tableFlags + 3) & 0x100000000) != 0)
    || (*((unsigned char *)&self->_tableFlags + 15) & 8) != 0
    || self->_tableReloadingSuspendedCount > 0)
  {
LABEL_8:
    BOOL v6 = 0;
    goto LABEL_9;
  }
  uint64_t v9 = *((void *)&self->_tableFlags + 2);
  reorderingSupport = self->_reorderingSupport;
  if (!reorderingSupport)
  {
    if (v9 < 0) {
      goto LABEL_8;
    }
LABEL_15:
    double v11 = [(UITableView *)self _cellForRowAtIndexPath:v5 usingPresentationValues:1];
    double v12 = [(_UITableViewDragController *)self->_dragController indexPaths];
    int v13 = v12;
    if (!v12 || ([v12 containsObject:v5] & 1) == 0)
    {
      id v14 = [v11 _dropAnimationContainerView];

      if (!v14)
      {
        if ((*(_DWORD *)p_tableFlags & 0x1F00040) != 0)
        {
          BOOL v6 = 1;
          goto LABEL_19;
        }
        if (dyld_program_sdk_at_least())
        {
          uint64_t v15 = [v11 contentView];
          BOOL v6 = (objc_opt_respondsToSelector() & 1) != 0 || (objc_opt_respondsToSelector() & 1) != 0;

          goto LABEL_19;
        }
      }
    }
    BOOL v6 = 0;
LABEL_19:

    goto LABEL_9;
  }
  BOOL v6 = 0;
  if ((v9 & 0x8000000000000000) == 0 && !reorderingSupport->_initialIndexPath) {
    goto LABEL_15;
  }
LABEL_9:

  return v6;
}

- (void)swipeActionController:(id)a3 willBeginSwipeForItemAtIndexPath:(id)a4
{
  id v19 = a3;
  id v6 = a4;
  p_swipedIndexPath = &self->_swipedIndexPath;
  swipedIndexPath = self->_swipedIndexPath;
  if (swipedIndexPath)
  {
    if (([(NSIndexPath *)swipedIndexPath isEqual:v6] & 1) == 0)
    {
      uint64_t v9 = *((void *)&self->_tableFlags + 2);
      if ((v9 & 0x100000000000) != 0)
      {
        uint64_t v10 = *((void *)&self->_tableFlags + 3) | 0x200000;
        *((void *)&self->_tableFlags + 2) = v9;
        *((void *)&self->_tableFlags + 3) = v10;
        [(UITableView *)self _sendDidEndEditingForIndexPath:*p_swipedIndexPath];
        *((void *)&self->_tableFlags + 3) &= ~0x200000uLL;
      }
    }
  }
  [(UITableView *)self _suspendReloads];
  if ((*((unsigned char *)&self->_tableFlags + 11) & 2) != 0)
  {
    double v11 = [(UITableView *)self _delegateProxy];
    [v11 tableView:self willBeginSwipingRowAtIndexPath:v6];
  }
  double v12 = *p_swipedIndexPath;
  objc_storeStrong((id *)&self->_swipedIndexPath, a4);
  int v13 = [(UITableView *)self _cellForRowAtIndexPath:v6 usingPresentationValues:1];
  swipeToDeleteCell = self->_swipeToDeleteCell;
  self->_swipeToDeleteCell = v13;

  uint64_t v15 = *((void *)&self->_tableFlags + 2);
  *((void *)&self->_tableFlags + 2) = v15 & 0xFFFEFFFFFFFFFFFFLL;
  if ((v15 & 0x40000000000000) != 0)
  {
    [(UITableView *)self _updateWrapperClipping];
    [(UITableView *)self _updateWrapperFrame];
  }
  BOOL v16 = [(UITableView *)self isEditing];
  uint64_t v17 = *((void *)&self->_tableFlags + 2);
  if (v16)
  {
    if ((v17 & 0x100000000000) != 0 && ([(NSIndexPath *)v12 isEqual:v6] & 1) == 0) {
      [(UITableView *)self _sendWillBeginEditingForIndexPath:v6];
    }
  }
  else
  {
    uint64_t v18 = *((void *)&self->_tableFlags + 3);
    *((void *)&self->_tableFlags + 2) = v17 | 0x100000000000;
    *((void *)&self->_tableFlags + 3) = v18;
    [(UITableView *)self _sendWillBeginEditingForIndexPath:v6];
    [(UITableView *)self _setEditing:1 animated:1 forced:0];
  }
  [(UITableView *)self _resumeReloads];
}

- (void)swipeActionController:(id)a3 didEndSwipeForItemAtIndexPath:(id)a4
{
  id v5 = a4;
  *((void *)&self->_tableFlags + 2) &= ~0x800000000000uLL;
  id v14 = v5;
  -[UITableView _cellForRowAtIndexPath:usingPresentationValues:](self, "_cellForRowAtIndexPath:usingPresentationValues:");
  id v6 = (UITableViewCell *)objc_claimAutoreleasedReturnValue();
  if (![(UITableView *)self _swipeDeletionCommitted]) {
    [(UITableViewCell *)v6 _resetEditControlRotation];
  }
  int v7 = [v14 isEqual:self->_swipedIndexPath];
  swipeToDeleteCell = v6;
  if (v7) {
    swipeToDeleteCell = self->_swipeToDeleteCell;
  }
  uint64_t v9 = swipeToDeleteCell;
  uint64_t v10 = v9;
  if ((*((unsigned char *)&self->_tableFlags + 17) & 1) == 0) {
    [(UITableViewCell *)v9 _setSwipeContainerView:0];
  }
  if (v7)
  {
    if ((*((void *)&self->_tableFlags + 2) & 0x100000000000) != 0) {
      [(UITableView *)self _setEditing:0 animated:(*((void *)&self->_tableFlags + 2) & 0x100) == 0 forced:1];
    }
    double v11 = self->_swipeToDeleteCell;
    self->_swipeToDeleteCell = 0;

    swipedIndexPath = self->_swipedIndexPath;
    self->_swipedIndexPath = 0;

    if ((*((unsigned char *)&self->_tableFlags + 22) & 0x40) != 0)
    {
      [(UITableView *)self _updateWrapperClipping];
      [(UITableView *)self _updateWrapperFrame];
    }
  }
  if ((*((unsigned char *)&self->_tableFlags + 11) & 4) != 0)
  {
    int v13 = [(UITableView *)self _delegateProxy];
    [v13 tableView:self didEndSwipingRowAtIndexPath:v14];
  }
}

- (id)swipeActionForDeletingRowAtIndexPath:(id)a3
{
  id v4 = a3;
  id v5 = [(UITableView *)self _titleForDeleteConfirmationButtonForRowAtIndexPath:v4];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __52__UITableView_swipeActionForDeletingRowAtIndexPath___block_invoke;
  v9[3] = &unk_1E52E4D18;
  void v9[4] = self;
  id v10 = v4;
  id v6 = v4;
  int v7 = +[UISwipeAction swipeActionWithStyle:1 title:v5 handler:v9];

  return v7;
}

uint64_t __52__UITableView_swipeActionForDeletingRowAtIndexPath___block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _animateDeletionOfRowAtIndexPath:*(void *)(a1 + 40)];
}

- (id)contextualActionForDeletingRowAtIndexPath:(id)a3
{
  id v4 = a3;
  id v5 = [(UITableView *)self _contextualActionForDeletingRowAtIndexPath:v4 usingPresentationValues:[(UITableView *)self _isUsingPresentationValues]];

  return v5;
}

- (id)_contextualActionForDeletingRowAtIndexPath:(id)a3 usingPresentationValues:(BOOL)a4
{
  id v7 = a3;
  if (!a4)
  {
    shadowUpdatesController = self->_shadowUpdatesController;
    if (shadowUpdatesController)
    {
      uint64_t v9 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathAfterShadowUpdates:v7];

      id v7 = (id)v9;
    }
  }
  if (!v7)
  {
    id v14 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v15 = NSStringFromSelector(a2);
    [v14 handleFailureInMethod:a2, self, @"UITableView.m", 19134, @"UITableView internal inconsistency: indexPath cannot be nil in %@", v15 object file lineNumber description];
  }
  id v10 = [(UITableView *)self _titleForDeleteConfirmationButtonForRowAtIndexPath:v7];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __82__UITableView__contextualActionForDeletingRowAtIndexPath_usingPresentationValues___block_invoke;
  v16[3] = &unk_1E52E4D40;
  v16[4] = self;
  id v17 = v7;
  id v11 = v7;
  double v12 = +[UIContextualAction contextualActionWithStyle:1 title:v10 handler:v16];

  return v12;
}

void __82__UITableView__contextualActionForDeletingRowAtIndexPath_usingPresentationValues___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = a4;
  [v5 _animateDeletionOfRowAtIndexPath:v6];
  v7[2](v7, [*(id *)(a1 + 32) _swipeDeletionCommitted]);
}

- (id)_contextualActionForDeletingRowAtIndexPath:(id)a3 performsFirstActionWithFullSwipe:(BOOL *)a4
{
  id v6 = a3;
  uint64_t v7 = [(UITableView *)self methodForSelector:sel_swipeActionForDeletingRowAtIndexPath_];
  if (v7 == +[UITableView instanceMethodForSelector:sel_swipeActionForDeletingRowAtIndexPath_])
  {
    *a4 = 1;
  }
  else
  {
    id v8 = [(UITableView *)self swipeActionForDeletingRowAtIndexPath:v6];
    *a4 = [v8 canBeTriggeredBySwipe];
  }
  uint64_t v9 = [(UITableView *)self contextualActionForDeletingRowAtIndexPath:v6];

  return v9;
}

- (id)_trailingSwipeConfigurationAtIndexPath:(id)a3 fromRemoveButton:(BOOL)a4
{
  BOOL v4 = a4;
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  int v8 = dyld_program_sdk_at_least();
  uint64_t tableFlags = (uint64_t)self->_tableFlags;
  if ((v4 & ~v8 & 1) != 0 || (tableFlags & 0x400000) == 0)
  {
    if (v4 || (tableFlags & 0x1000000) == 0)
    {
      if ((tableFlags & 0x100000) == 0) {
        goto LABEL_38;
      }
      long long v31 = [(UITableView *)self _delegateProxy];
      long long v32 = [v31 tableView:self editActionsForRowAtIndexPath:v7];

      if (!v32) {
        goto LABEL_38;
      }
      long long v33 = self;
      long long v30 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v32, "count"));
      char v66 = dyld_program_sdk_at_least();
      long long v77 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      id v18 = v32;
      uint64_t v34 = [v18 countByEnumeratingWithState:&v77 objects:v86 count:16];
      if (v34)
      {
        uint64_t v35 = v34;
        SEL v65 = a2;
        uint64_t v68 = *(void *)v78;
        CGRect v69 = v30;
        obuint64_t j = v18;
        do
        {
          uint64_t v36 = 0;
          do
          {
            if (*(void *)v78 != v68) {
              objc_enumerationMutation(obj);
            }
            long long v37 = *(void **)(*((void *)&v77 + 1) + 8 * v36);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              double v47 = [MEMORY[0x1E4F28B00] currentHandler];
              [(UITableView *)v33 _delegateActual];
              v49 = id v48 = v7;
              long long v50 = (objc_class *)objc_opt_class();
              long long v51 = NSStringFromClass(v50);
              [v47 handleFailureInMethod:v65, v33, @"UITableView.m", 19189, @"%@ is expected to return an array of %@ from -tableView:editActionsForRowAtIndexPath: but returned %@.", v49, v51, obj object file lineNumber description];

              id v7 = v48;
            }
            id v38 = v7;
            id v39 = v7;
            shadowUpdatesController = v33->_shadowUpdatesController;
            if (shadowUpdatesController)
            {
              uint64_t v41 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathBeforeShadowUpdates:v39];

              id v39 = (id)v41;
            }
            BOOL v42 = [v37 style] == 0;
            uint64_t v43 = [v37 title];
            v73[0] = MEMORY[0x1E4F143A8];
            v73[1] = 3221225472;
            v73[2] = __71__UITableView__trailingSwipeConfigurationAtIndexPath_fromRemoveButton___block_invoke;
            v73[3] = &unk_1E5309108;
            id v44 = v39;
            id v74 = v44;
            CGRect v75 = v37;
            CGRect v76 = v33;
            uint64_t v45 = +[UIContextualAction contextualActionWithStyle:v42 title:v43 handler:v73];

            float v46 = [v37 backgroundColor];
            long long v30 = v69;
            if ([v46 isPatternColor])
            {
              if (_trailingSwipeConfigurationAtIndexPath_fromRemoveButton__once != -1) {
                dispatch_once(&_trailingSwipeConfigurationAtIndexPath_fromRemoveButton__once, &__block_literal_global_1294_0);
              }
              [v45 setForcesFallbackBackgroundColor:1];
              char v66 = 0;
            }
            [v45 setBackgroundColor:v46];
            [v69 addObject:v45];

            ++v36;
            id v7 = v38;
          }
          while (v35 != v36);
          id v18 = obj;
          uint64_t v35 = [obj countByEnumeratingWithState:&v77 objects:v86 count:16];
        }
        while (v35);
      }

      id v11 = +[UISwipeActionsConfiguration configurationWithActions:v30];
      [v11 setPerformsFirstActionWithFullSwipe:v66 & 1];
      self = v33;
    }
    else
    {
      BOOL v16 = [(UITableView *)self _delegateProxy];
      id v17 = [v16 tableView:self trailingSwipeActionsForRowAtIndexPath:v7];

      if (!v17) {
        goto LABEL_38;
      }
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      id v18 = v17;
      uint64_t v19 = [v18 countByEnumeratingWithState:&v81 objects:v87 count:16];
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)v82;
        unint64_t v22 = 0x1E4F28000uLL;
        do
        {
          for (uint64_t i = 0; i != v20; ++i)
          {
            if (*(void *)v82 != v21) {
              objc_enumerationMutation(v18);
            }
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              long long v24 = [*(id *)(v22 + 2816) currentHandler];
              [(UITableView *)self _delegateActual];
              v26 = long long v25 = self;
              long long v27 = (objc_class *)objc_opt_class();
              NSStringFromClass(v27);
              v29 = id v28 = v7;
              [v24 handleFailureInMethod:a2, v25, @"UITableView.m", 19170, @"%@ is expected to return an array of %@ from -tableView:trailingSwipeActionsForRowAtIndexPath: but returned %@.", v26, v29, v18 object file lineNumber description];

              id v7 = v28;
              self = v25;
              unint64_t v22 = 0x1E4F28000;
            }
          }
          uint64_t v20 = [v18 countByEnumeratingWithState:&v81 objects:v87 count:16];
        }
        while (v20);
      }

      id v11 = +[UISwipeActionsConfiguration configurationWithActions:v18];
      long long v30 = [v18 firstObject];
      objc_msgSend(v11, "setPerformsFirstActionWithFullSwipe:", objc_msgSend(v30, "canBeTriggeredBySwipe"));
    }

    if (v11) {
      goto LABEL_57;
    }
    goto LABEL_38;
  }
  id v10 = [(UITableView *)self _delegateProxy];
  id v11 = [v10 tableView:self trailingSwipeActionsConfigurationForRowAtIndexPath:v7];

  if (v11)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      double v12 = [MEMORY[0x1E4F28B00] currentHandler];
      int v13 = [(UITableView *)self _delegateActual];
      id v14 = (objc_class *)objc_opt_class();
      uint64_t v15 = NSStringFromClass(v14);
      [v12 handleFailureInMethod:a2, self, @"UITableView.m", 19162, @"%@ is expected to return an instance of %@ from -tableView:trailingSwipeActionsConfigurationForRowAtIndexPath: but returned %@.", v13, v15, v11 object file lineNumber description];
    }
    goto LABEL_57;
  }
LABEL_38:
  char v72 = 1;
  if ((*(unsigned char *)&self->_tableFlags & 0x40) != 0
    && [(UITableView *)self _canEditRowAtIndexPath:v7]
    && [(UITableView *)self _editingStyleForRowAtIndexPath:v7] == 1)
  {
    long long v52 = [(UITableView *)self _contextualActionForDeletingRowAtIndexPath:v7 performsFirstActionWithFullSwipe:&v72];
    CGFloat v85 = v52;
    long long v53 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v85 count:1];
  }
  else
  {
    long long v53 = (void *)MEMORY[0x1E4F1CBF0];
  }
  long long v54 = [(UITableView *)self _titleForSwipeAccessoryButtonForRowAtIndexPath:v7];
  if (v54)
  {
    v70[0] = MEMORY[0x1E4F143A8];
    v70[1] = 3221225472;
    v70[2] = __71__UITableView__trailingSwipeConfigurationAtIndexPath_fromRemoveButton___block_invoke_1295;
    v70[3] = &unk_1E52E4D40;
    v70[4] = self;
    id v71 = v7;
    long long v55 = +[UIContextualAction contextualActionWithStyle:0 title:v54 handler:v70];
    uint64_t v56 = [v53 arrayByAddingObject:v55];

    long long v53 = (void *)v56;
  }
  if ([v53 count])
  {
    id v11 = +[UISwipeActionsConfiguration configurationWithActions:v53];
    unsigned int v57 = dyld_program_sdk_at_least();
    if (v72) {
      uint64_t v58 = v57;
    }
    else {
      uint64_t v58 = 0;
    }
    [v11 setPerformsFirstActionWithFullSwipe:v58];

    if (v11) {
      goto LABEL_57;
    }
  }
  else
  {
  }
  double v59 = [(UITableView *)self _cellForRowAtIndexPath:v7 usingPresentationValues:1];
  uint64_t v60 = v59;
  if (v59
    && ([v59 contentView],
        double v61 = objc_claimAutoreleasedReturnValue(),
        char v62 = objc_opt_respondsToSelector(),
        v61,
        (v62 & 1) != 0))
  {
    double v63 = [v60 contentView];
    id v11 = [v63 _trailingSwipeActionsConfiguration];
  }
  else
  {
    id v11 = 0;
  }

LABEL_57:
  return v11;
}

void __71__UITableView__trailingSwipeConfigurationAtIndexPath_fromRemoveButton___block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (*(void *)(a1 + 32))
  {
    id v5 = [*(id *)(a1 + 40) _handler];
    v5[2](v5, *(void *)(a1 + 40), *(void *)(a1 + 32));

    if ([*(id *)(a1 + 40) style]) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = [*(id *)(a1 + 48) _swipeDeletionCommitted];
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  v7[2](v7, v6);
}

void __71__UITableView__trailingSwipeConfigurationAtIndexPath_fromRemoveButton___block_invoke_2()
{
  v0 = *(NSObject **)(__UILogGetCategoryCachedImpl("TableView", &_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_9___s_category)+ 8);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v1 = 0;
    _os_log_impl(&dword_1853B0000, v0, OS_LOG_TYPE_ERROR, "Setting a pattern color as backgroundColor of UITableViewRowAction is no longer supported.", v1, 2u);
  }
}

void __71__UITableView__trailingSwipeConfigurationAtIndexPath_fromRemoveButton___block_invoke_1295(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  BOOL v4 = *(unsigned char **)(a1 + 32);
  if ((v4[3082] & 8) != 0)
  {
    id v6 = a4;
    id v7 = [v4 _delegateProxy];
    [v7 tableView:*(void *)(a1 + 32) swipeAccessoryButtonPushedForRowAtIndexPath:*(void *)(a1 + 40)];

    (*((void (**)(id, uint64_t))v6 + 2))(v6, 1);
  }
  else
  {
    a4[2](a4, 0);
  }
}

- (void)_swipeToDeleteCell:(id)a3
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = [(UITableView *)self _reorderingIndexPath];

  uint64_t v7 = [v5 _dropAnimationContainerView];
  uint64_t v8 = v6 | v7;

  if (v8)
  {
    [v5 _resetEditControlRotation];
    goto LABEL_11;
  }
  uint64_t v9 = [(UITableView *)self _indexPathForCell:v5 usingPresentationValues:1];

  if (!v9)
  {
    if (os_variant_has_internal_diagnostics())
    {
      int v13 = __UIFaultDebugAssertLog();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
        goto LABEL_9;
      }
      id v14 = NSStringFromSelector(a2);
      int v15 = 138412290;
      BOOL v16 = v14;
      _os_log_fault_impl(&dword_1853B0000, v13, OS_LOG_TYPE_FAULT, "The index path should never be nil in %@", (uint8_t *)&v15, 0xCu);
    }
    else
    {
      double v12 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_swipeToDeleteCell____s_category) + 8);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
LABEL_10:
        id v5 = 0;
        goto LABEL_11;
      }
      int v13 = v12;
      id v14 = NSStringFromSelector(a2);
      int v15 = 138412290;
      BOOL v16 = v14;
      _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "The index path should never be nil in %@", (uint8_t *)&v15, 0xCu);
    }

LABEL_9:
    goto LABEL_10;
  }
  swipeActionController = self->_swipeActionController;
  id v11 = [(UITableView *)self _trailingSwipeConfigurationAtIndexPath:v9 fromRemoveButton:1];
  [(UISwipeActionController *)swipeActionController swipeItemAtIndexPath:v9 configuration:v11 direction:[(UISwipeActionController *)self->_swipeActionController _swipeDirectionForLeadingEdge:0] animated:1 completion:0];

  id v5 = (id)v9;
LABEL_11:
}

- (BOOL)_swipeDeletionCommitted
{
  id v2 = [(UISwipeActionController *)self->_swipeActionController currentSwipeOccurrence];
  unint64_t v3 = [v2 currentAction];
  BOOL v4 = [v3 style] == 1 && objc_msgSend(v2, "state") == 4;

  return v4;
}

- (int64_t)_dataSourceNumberOfSections
{
  if ((*(unsigned char *)&self->_tableFlags & 4) == 0) {
    return 1;
  }
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  uint64_t v5 = [WeakRetained numberOfSectionsInTableView:self];

  return v5 & ~(v5 >> 63);
}

- (int64_t)_dataSourceNumberOfItemsInSection:(int64_t)a3
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dataSource);
  uint64_t v6 = [WeakRetained tableView:self numberOfRowsInSection:a3];

  return v6 & ~(v6 >> 63);
}

- (double)_sidePadding
{
  if ((*((unsigned char *)&self->_tableFlags + 7) & 2) == 0) {
    return 9.0;
  }
  BOOL v4 = [(UITableView *)self _delegateProxy];
  [v4 marginForTableView:self];
  double v6 = v5;

  return v6;
}

- (UIEdgeInsets)_rawSectionContentInset
{
  double top = self->_sectionContentInset.top;
  double left = self->_sectionContentInset.left;
  double bottom = self->_sectionContentInset.bottom;
  double right = self->_sectionContentInset.right;
  result.double right = right;
  result.double bottom = bottom;
  result.double left = left;
  result.double top = top;
  return result;
}

- (BOOL)_providesRowHeights
{
  return *((unsigned char *)&self->_tableFlags + 4) & 1;
}

- (double)_dataSourceHeightForRowAtIndexPath:(id)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  double v6 = -1.0;
  if (*((unsigned char *)&self->_tableFlags + 4))
  {
    uint64_t v7 = [(UITableView *)self _delegateProxy];
    [v7 tableView:self heightForRowAtIndexPath:v5];
    double v6 = v8;
  }
  int v9 = dyld_program_sdk_at_least();
  BOOL v10 = v6 < 0.0;
  if (v6 == -1.0) {
    BOOL v10 = 0;
  }
  if (v9)
  {
    if (v10)
    {
      id v11 = [MEMORY[0x1E4F28B00] currentHandler];
      [v11 handleFailureInMethod:a2, self, @"UITableView.m", 19729, @"Invalid row height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", *(void *)&v6 object file lineNumber description];
    }
  }
  else if (v10)
  {
    int v13 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_dataSourceHeightForRowAtIndexPath____s_category) + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      double v15 = v6;
      _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "Invalid row height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
    }
  }

  return v6;
}

- (double)_dataSourceHeightForHeaderInSection:(int64_t)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  double v5 = -1.0;
  if ((*((unsigned char *)&self->_tableFlags + 4) & 2) != 0)
  {
    uint64_t v7 = [(UITableView *)self _delegateProxy];
    [v7 tableView:self heightForHeaderInSection:a3];
    double v5 = v8;
  }
  int v9 = dyld_program_sdk_at_least();
  BOOL v10 = v5 < 0.0;
  if (v5 == -1.0) {
    BOOL v10 = 0;
  }
  if (v9)
  {
    if (v10)
    {
      id v11 = [MEMORY[0x1E4F28B00] currentHandler];
      [v11 handleFailureInMethod:a2, self, @"UITableView.m", 19736, @"Invalid section header height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", *(void *)&v5 object file lineNumber description];
    }
  }
  else if (v10)
  {
    int v13 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_dataSourceHeightForHeaderInSection____s_category) + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      double v15 = v5;
      _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "Invalid section header height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
    }
  }
  return v5;
}

- (double)_dataSourceHeightForFooterInSection:(int64_t)a3
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  double v5 = -1.0;
  if ((*((unsigned char *)&self->_tableFlags + 4) & 8) != 0)
  {
    uint64_t v7 = [(UITableView *)self _delegateProxy];
    [v7 tableView:self heightForFooterInSection:a3];
    double v5 = v8;
  }
  int v9 = dyld_program_sdk_at_least();
  BOOL v10 = v5 < 0.0;
  if (v5 == -1.0) {
    BOOL v10 = 0;
  }
  if (v9)
  {
    if (v10)
    {
      id v11 = [MEMORY[0x1E4F28B00] currentHandler];
      [v11 handleFailureInMethod:a2, self, @"UITableView.m", 19743, @"Invalid section footer height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", *(void *)&v5 object file lineNumber description];
    }
  }
  else if (v10)
  {
    int v13 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_dataSourceHeightForFooterInSection____s_category) + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      double v15 = v5;
      _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "Invalid section footer height (%g) provided by table delegate. Value must be at least 0.0, or UITableViewAutomaticDimension.", buf, 0xCu);
    }
  }
  return v5;
}

- (id)_titleForHeaderInSection:(int64_t)a3
{
  if ((*(unsigned char *)&self->_tableFlags & 8) != 0)
  {
    double v6 = [(UITableView *)self _dataSourceProxy];
    unint64_t v3 = [v6 tableView:self titleForHeaderInSection:a3];
  }
  else
  {
    unint64_t v3 = 0;
  }
  return v3;
}

- (id)_titleForFooterInSection:(int64_t)a3
{
  if ((*(unsigned char *)&self->_tableFlags & 0x10) != 0)
  {
    double v6 = [(UITableView *)self _dataSourceProxy];
    unint64_t v3 = [v6 tableView:self titleForFooterInSection:a3];
  }
  else
  {
    unint64_t v3 = 0;
  }
  return v3;
}

- (id)_detailTextForHeaderInSection:(int64_t)a3
{
  if ((*(unsigned char *)&self->_tableFlags & 0x20) != 0)
  {
    double v6 = [(UITableView *)self _dataSourceProxy];
    unint64_t v3 = [v6 tableView:self detailTextForHeaderInSection:a3];
  }
  else
  {
    unint64_t v3 = 0;
  }
  return v3;
}

- (BOOL)_shouldUseSearchBarHeaderBehavior
{
  return objc_opt_isKindOfClass() & 1;
}

- (id)_diffableDataSourceImpl
{
  unint64_t v3 = [(UITableView *)self _dataSourceActual];
  BOOL v4 = 0;
  if ((objc_opt_respondsToSelector() & 1) != 0 && v3 != self)
  {
    BOOL v4 = [(UITableView *)v3 _diffableDataSourceImpl];
  }

  return v4;
}

- (id)_expectedDiffableUpdateItem
{
  if (dyld_program_sdk_at_least()) {
    expectedDiffableUpdateIteuint64_t m = self->_expectedDiffableUpdateItem;
  }
  else {
    expectedDiffableUpdateIteuint64_t m = 0;
  }
  return expectedDiffableUpdateItem;
}

- (int64_t)presentationSectionIndexForDataSourceSectionIndex:(int64_t)a3
{
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController) {
    return [(_UITableViewShadowUpdatesController *)shadowUpdatesController sectionAfterShadowUpdates:a3];
  }
  else {
    return a3;
  }
}

- (int64_t)dataSourceSectionIndexForPresentationSectionIndex:(int64_t)a3
{
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController) {
    return [(_UITableViewShadowUpdatesController *)shadowUpdatesController sectionBeforeShadowUpdates:a3];
  }
  else {
    return a3;
  }
}

- (id)presentationIndexPathForDataSourceIndexPath:(id)a3
{
  id v4 = a3;
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
  {
    id v6 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathAfterShadowUpdates:v4];
  }
  else
  {
    id v6 = v4;
  }
  uint64_t v7 = v6;

  return v7;
}

- (id)dataSourceIndexPathForPresentationIndexPath:(id)a3
{
  id v4 = a3;
  shadowUpdatesController = self->_shadowUpdatesController;
  if (shadowUpdatesController)
  {
    id v6 = [(_UITableViewShadowUpdatesController *)shadowUpdatesController indexPathBeforeShadowUpdates:v4];
  }
  else
  {
    id v6 = v4;
  }
  uint64_t v7 = v6;

  return v7;
}

- (void)performUsingPresentationValues:(id)a3
{
  p_uint64_t tableFlags = &self->_tableFlags;
  uint64_t v4 = *((void *)&self->_tableFlags + 2);
  unint64_t v5 = *((void *)&self->_tableFlags + 3);
  uint64_t v6 = v5 | 0x80000000;
  *((void *)&self->_tableFlags + 3) = v5 | 0x80000000;
  if (a3)
  {
    (*((void (**)(id, SEL))a3 + 2))(a3, a2);
    uint64_t v4 = *((void *)p_tableFlags + 2);
    uint64_t v6 = *((void *)p_tableFlags + 3);
  }
  *((void *)p_tableFlags + 2) = v4;
  *((void *)p_tableFlags + 3) = v6 & 0xFFFFFFFF7FFFFFFFLL | (((v5 >> 31) & 1) << 31);
}

- (void)setSpringLoaded:(BOOL)a3
{
}

id __31__UITableView_setSpringLoaded___block_invoke()
{
  return +[_UITableViewSpringLoadedInteraction tableViewSpringLoadedInteraction];
}

- (void)_prepareHighlightForCell:(id)a3 withInteraction:(id)a4
{
}

- (void)_highlightDidEndForCell:(id)a3 withInteraction:(id)a4
{
}

- (BOOL)_delegateAllowsHighlightingItemAtIndexPath:(id)a3
{
  if ((*((unsigned char *)&self->_tableFlags + 9) & 8) == 0) {
    return 1;
  }
  uint64_t v4 = self;
  id v5 = a3;
  uint64_t v6 = [(UITableView *)v4 _delegateProxy];
  LOBYTE(v4) = [v6 tableView:v4 shouldHighlightRowAtIndexPath:v5];

  return (char)v4;
}

- (UITouch)currentTouch
{
  return self->_currentTouch;
}

- (void)setCurrentTouch:(id)a3
{
}

- (CGFloat)estimatedSectionHeaderHeight
{
  return self->_estimatedSectionHeaderHeight;
}

- (CGFloat)estimatedSectionFooterHeight
{
  return self->_estimatedSectionFooterHeight;
}

- (NSInteger)sectionIndexMinimumDisplayRowCount
{
  return self->_sectionIndexMinimumDisplayRowCount;
}

- (void)setSectionIndexMinimumDisplayRowCount:(NSInteger)sectionIndexMinimumDisplayRowCount
{
  self->_int64_t sectionIndexMinimumDisplayRowCount = sectionIndexMinimumDisplayRowCount;
}

- (void)_setSwipeToDeleteCell:(id)a3
{
}

- (id)dragDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDelegate);
  return WeakRetained;
}

- (id)dropDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dropDelegate);
  return WeakRetained;
}

- (CGFloat)fillerRowHeight
{
  return self->_fillerRowHeight;
}

- (CGFloat)sectionHeaderTopPadding
{
  return self->_sectionHeaderTopPadding;
}

- (UIContextMenuInteraction)contextMenuInteraction
{
  return self->_contextMenuInteraction;
}

- (int64_t)contentHuggingElements
{
  return self->_contentHuggingElements;
}

- (void)setContentHuggingElements:(int64_t)a3
{
  self->_contentHuggingElements = a3;
}

- (NSIndexPath)_focusedCellIndexPath
{
  return self->_focusedCellIndexPath;
}

- (void)_setFocusedCellIndexPath:(id)a3
{
}

- (UIView)_focusedCell
{
  return self->_focusedCell;
}

- (void)_setFocusedCell:(id)a3
{
}

- (NSIndexPath)_indexPathToFocus
{
  return self->_indexPathToFocus;
}

- (void)_setIndexPathToFocus:(id)a3
{
}

- (_UITableViewDragController)_dragController
{
  return self->_dragController;
}

- (void)_setDragController:(id)a3
{
}

- (_UITableViewDropController)_dropController
{
  return self->_dropController;
}

- (void)_setDropController:(id)a3
{
}

- (void)_setPlaceholderContexts:(id)a3
{
}

- (UITableViewDragSourceDelegate)dragSourceDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragSourceDelegate);
  return (UITableViewDragSourceDelegate *)WeakRetained;
}

- (UITableViewDragDestinationDelegate)dragDestinationDelegate
{
  id WeakRetained = objc_loadWeakRetained((id *)&self->_dragDestinationDelegate);
  return (UITableViewDragDestinationDelegate *)WeakRetained;
}

- (void).cxx_destruct
{
  objc_destroyWeak((id *)&self->_dragDestinationDelegate);
  objc_destroyWeak((id *)&self->_dragSourceDelegate);
  objc_storeStrong((id *)&self->_placeholderContexts, 0);
  objc_storeStrong((id *)&self->_dropController, 0);
  objc_storeStrong((id *)&self->_dragController, 0);
  objc_storeStrong((id *)&self->_indexPathToFocus, 0);
  objc_storeStrong((id *)&self->_focusedCell, 0);
  objc_storeStrong((id *)&self->_focusedCellIndexPath, 0);
  objc_destroyWeak((id *)&self->_dropDelegate);
  objc_destroyWeak((id *)&self->_dragDelegate);
  objc_storeStrong((id *)&self->_multiSelectController, 0);
  objc_storeStrong((id *)&self->_prefetchContext, 0);
  objc_destroyWeak((id *)&self->_prefetchDataSource);
  objc_storeStrong((id *)&self->_reorderFeedbackGenerator, 0);
  objc_storeStrong((id *)&self->_indexRetargetFeedbackGenerator, 0);
  objc_storeStrong((id *)&self->_targetIndexPathForScrolling, 0);
  objc_storeStrong((id *)&self->_constants, 0);
  objc_storeStrong((id *)&self->_contentFocusContainerGuide, 0);
  objc_storeStrong((id *)&self->_shadowUpdatesController, 0);
  objc_storeStrong((id *)&self->_currentUpdate, 0);
  objc_storeStrong((id *)&self->_clientGesturesRequiringTableGesturesToFail, 0);
  objc_storeStrong((id *)&self->_tentativeFooterViews, 0);
  objc_storeStrong((id *)&self->_tentativeHeaderViews, 0);
  objc_storeStrong((id *)&self->_tentativeCells, 0);
  objc_storeStrong((id *)&self->_intrinsicContentSizeInvalidationContext, 0);
  objc_storeStrong((id *)&self->_indexPathBeingReconfigured, 0);
  objc_storeStrong((id *)&self->_cellBeingReconfigured, 0);
  objc_storeStrong((id *)&self->_hiddenSeparatorIndexPaths, 0);
  objc_storeStrong(&self->_deferredEditingHandler, 0);
  objc_storeStrong(&self->_updateCompletionHandler, 0);
  objc_storeStrong((id *)&self->_headerFooterClassDict, 0);
  objc_storeStrong((id *)&self->_cellClassDict, 0);
  objc_storeStrong((id *)&self->_currentTouch, 0);
  objc_storeStrong((id *)&self->_downArrowTapGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_upArrowTapGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_downArrowLongPressGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_upArrowLongPressGestureRecognizer, 0);
  objc_storeStrong((id *)&self->_identityTracker, 0);
  objc_storeStrong((id *)&self->_selectionInteraction, 0);
  objc_storeStrong((id *)&self->_contextMenuInteraction, 0);
  objc_storeStrong((id *)&self->_swipeToDeleteCell, 0);
  objc_storeStrong((id *)&self->_swipeActionController, 0);
  objc_storeStrong((id *)&self->_defaultSectionIndexTitles, 0);
  objc_storeStrong((id *)&self->_indexTrackingBackgroundColor, 0);
  objc_storeStrong((id *)&self->_indexBackgroundColor, 0);
  objc_storeStrong((id *)&self->_indexColor, 0);
  objc_storeStrong((id *)&self->_sectionBorderColor, 0);
  objc_storeStrong((id *)&self->_checkmarkColor, 0);
  objc_storeStrong((id *)&self->_accessoryBaseColor, 0);
  objc_storeStrong((id *)&self->_separatorEffect, 0);
  objc_storeStrong((id *)&self->_darkenedSeparatorColor, 0);
  objc_storeStrong((id *)&self->_separatorColor, 0);
  objc_storeStrong((id *)&self->_moveItems, 0);
  objc_storeStrong((id *)&self->_reloadItems, 0);
  objc_storeStrong((id *)&self->_deleteItems, 0);
  objc_storeStrong((id *)&self->_insertItems, 0);
  objc_storeStrong((id *)&self->_indexOverlaySelectionView, 0);
  objc_storeStrong((id *)&self->_indexOverlayIndicatorEventIgnoreTimer, 0);
  objc_storeStrong((id *)&self->_indexOverlayTimer, 0);
  objc_storeStrong((id *)&self->_indexOverlayIndicatorView, 0);
  objc_storeStrong((id *)&self->_sectionIndexTitlesForTableView, 0);
  objc_storeStrong((id *)&self->_countLabel, 0);
  objc_storeStrong((id *)&self->_tableFooterView, 0);
  objc_storeStrong((id *)&self->_tableHeaderView, 0);
  objc_storeStrong((id *)&self->_tableHeaderBackgroundView, 0);
  objc_storeStrong((id *)&self->_indexContainerView, 0);
  objc_storeStrong((id *)&self->_index, 0);
  objc_storeStrong((id *)&self->_wrapperView, 0);
  objc_storeStrong((id *)&self->_clearBlendingView, 0);
  objc_storeStrong((id *)&self->_backgroundView, 0);
  objc_storeStrong((id *)&self->_expectedDiffableUpdateItem, 0);
  objc_storeStrong((id *)&self->_reorderingSupport, 0);
  objc_storeStrong((id *)&self->_deleteAnimationSupport, 0);
  objc_storeStrong((id *)&self->_pendingDeselectionIndexPaths, 0);
  objc_storeStrong((id *)&self->_pendingSelectionIndexPath, 0);
  objc_storeStrong((id *)&self->_highlightedSpringLoadedIndexPath, 0);
  objc_storeStrong((id *)&self->_swipedIndexPath, 0);
  objc_storeStrong((id *)&self->_deselectionTransitionIndexPaths, 0);
  objc_storeStrong((id *)&self->_selectedIndexPaths, 0);
  objc_storeStrong((id *)&self->_highlightedIndexPaths, 0);
  objc_storeStrong((id *)&self->_extraSeparators, 0);
  objc_storeStrong((id *)&self->_topSeparator, 0);
  objc_storeStrong((id *)&self->_headerFooterNibExternalObjectsTables, 0);
  objc_storeStrong((id *)&self->_headerFooterNibMap, 0);
  objc_storeStrong((id *)&self->_nibExternalObjectsTables, 0);
  objc_storeStrong((id *)&self->_nibMap, 0);
  objc_storeStrong((id *)&self->_reusableHeaderFooterViews, 0);
  objc_storeStrong((id *)&self->_reusableTableCells, 0);
  objc_storeStrong((id *)&self->_firstResponderView, 0);
  objc_storeStrong((id *)&self->_firstResponderIndexPath, 0);
  objc_storeStrong((id *)&self->_viewBeingPreparedToDisplay, 0);
  objc_storeStrong((id *)&self->_indexPathBeingCreated, 0);
  objc_storeStrong((id *)&self->_visibleFooterViews, 0);
  objc_storeStrong((id *)&self->_visibleHeaderViews, 0);
  objc_storeStrong((id *)&self->_visibleCells, 0);
  objc_storeStrong((id *)&self->_subviewManager, 0);
  objc_storeStrong((id *)&self->_rowData, 0);
  objc_destroyWeak((id *)&self->_dataSource);
}

@end