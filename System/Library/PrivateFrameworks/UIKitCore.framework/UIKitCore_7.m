void sub_18645395C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _pasteboardCacheQueue_countOffsetForName(void *a1)
{
  id v1 = a1;
  v2 = _pasteboardCacheQueue_PasteboardNameToCountOffsetMap();
  v3 = [v2 objectForKeyedSubscript:v1];

  if (v3) {
    uint64_t v4 = [v3 integerValue];
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

id _existingItemCollectionWithName(void *a1)
{
  id v1 = a1;
  uint64_t v12 = 0;
  v13 = &v12;
  uint64_t v14 = 0x3032000000;
  v15 = __Block_byref_object_copy__151;
  v16 = __Block_byref_object_dispose__151;
  id v17 = 0;
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x3032000000;
  v10[3] = __Block_byref_object_copy__151;
  v10[4] = __Block_byref_object_dispose__151;
  id v11 = 0;
  v2 = _pasteboardCacheQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___existingItemCollectionWithName_block_invoke;
  block[3] = &unk_1E52EB218;
  id v7 = v1;
  v8 = &v12;
  v9 = v10;
  id v3 = v1;
  dispatch_sync(v2, block);

  id v4 = (id)v13[5];
  _Block_object_dispose(v10, 8);

  _Block_object_dispose(&v12, 8);
  return v4;
}

void sub_1864550F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UISecurelyDecodePasteboardDataToObject(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = (void *)[objc_alloc(MEMORY[0x1E4F28DC0]) initForReadingFromData:v3 error:0];
  v5 = [v4 decodeObjectOfClass:a2 forKey:*MEMORY[0x1E4F284E8]];
  [v4 finishDecoding];

  return v5;
}

void sub_18645575C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186456070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 192), 8);
  _Block_object_dispose((const void *)(v26 - 144), 8);
  _Block_object_dispose(&a20, 8);
  _Unwind_Resume(a1);
}

void _recordHangAssertionIfNecessaryForResponseMetadata(void *a1)
{
  id v1 = a1;
  if (pthread_main_np() == 1
    && [v1 authorizationMachAbsoluteStartTime]
    && [v1 authorizationMachAbsoluteEndTime])
  {
    [v1 authorizationMachAbsoluteStartTime];
    HTBeginNonResponsiveTaskWithNameAndExpirationAtTime();
    [v1 authorizationMachAbsoluteEndTime];
    HTEndNonResponsiveTaskAtTime();
  }
}

void sub_1864564A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864568D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 160), 8);
  _Block_object_dispose((const void *)(v28 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_186456F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

UIImage *ConvertValueToData(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    v5 = v3;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      v5 = [(UIImage *)v3 dataUsingEncoding:4];
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        goto LABEL_8;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          _convertURLToDataRepresentation(v3);
        }
        else {
        v5 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v3 format:200 options:0 error:0];
        }
        goto LABEL_9;
      }
      if ([v4 isEqual:0x1ED154EA0])
      {
LABEL_8:
        _UIEncodeObjectToPasteboardData(v3);
        v5 = (UIImage *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        UIImagePNGRepresentation(v3);
        v5 = (UIImage *)objc_claimAutoreleasedReturnValue();
      }
    }
  }
LABEL_9:
  v6 = v5;

  return v6;
}

void sub_186457F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

id _convertURLToDataRepresentation(void *a1)
{
  id v1 = a1;
  v2 = [v1 baseURL];
  id v3 = (void *)MEMORY[0x1E4F1C978];
  if (v2)
  {
    id v4 = [v1 relativeString];

    v5 = [v2 absoluteString];
    v6 = objc_msgSend(v3, "arrayWithObjects:", v4, v5, 0);
  }
  else
  {
    id v4 = [v1 absoluteString];

    v6 = objc_msgSend(v3, "arrayWithObjects:", v4, &stru_1ED0E84C0, 0);
  }

  id v7 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v6 format:200 options:0 error:0];

  return v7;
}

id _UIEncodeObjectToPasteboardData(void *a1)
{
  id v1 = a1;
  id v2 = [(NSKeyedArchiver *)[_UIInterprocessKeyedArchiver alloc] initRequiringSecureCoding:0];
  [v2 encodeObject:v1 forKey:*MEMORY[0x1E4F284E8]];
  id v3 = [v2 encodedData];

  return v3;
}

id _coerceItemToClass(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v20 = 0;
  v21 = &v20;
  uint64_t v22 = 0x3032000000;
  v23 = __Block_byref_object_copy__151;
  v24 = __Block_byref_object_dispose__151;
  id v25 = 0;
  if (objc_msgSend(v3, "uikit_canInstantiateObjectOfClass:", a2))
  {
    uint64_t v14 = 0;
    v15 = &v14;
    uint64_t v16 = 0x3032000000;
    id v17 = __Block_byref_object_copy__151;
    v18 = __Block_byref_object_dispose__151;
    id v19 = 0;
    dispatch_semaphore_t v4 = dispatch_semaphore_create(0);
    v5 = +[_UIConcretePasteboard _loadRequestContextForBlockingUIKitCall];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = ___coerceItemToClass_block_invoke;
    v10[3] = &unk_1E52FFA30;
    uint64_t v12 = &v20;
    v13 = &v14;
    v6 = v4;
    id v11 = v6;
    id v7 = (id)objc_msgSend(v3, "uikit_loadObjectOfClass:context:completionBlock:", a2, v5, v10);

    dispatch_semaphore_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
    _recordHangAssertionIfNecessaryForResponseMetadata((void *)v15[5]);
    _Block_object_dispose(&v14, 8);
  }
  id v8 = (id)v21[5];
  _Block_object_dispose(&v20, 8);

  return v8;
}

void sub_186459760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_186459B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _pasteboardCompletionQueue()
{
  if (qword_1EB25CA58 != -1) {
    dispatch_once(&qword_1EB25CA58, &__block_literal_global_368);
  }
  v0 = (void *)qword_1EB25CA50;
  return v0;
}

void sub_18645C610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PBUTIForNSAttributedStringDocumentType(void *a1)
{
  uint64_t v1 = qword_1EB25CA68;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1EB25CA68, &__block_literal_global_371_1);
  }
  id v3 = [(id)qword_1EB25CA60 objectForKeyedSubscript:v2];

  return v3;
}

void ___serverConnection_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = _notificationStateQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___serverConnection_block_invoke_3;
  block[3] = &unk_1E52D9F70;
  id v6 = v2;
  id v4 = v2;
  dispatch_sync(v3, block);
}

void ___serverConnection_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) userInfo];
  id v2 = [v1 objectForKeyedSubscript:*MEMORY[0x1E4F88250]];
  uint64_t v3 = [v2 unsignedLongLongValue];

  if (v3 == _notificationStateQueue_notificationState)
  {
    id v4 = MEMORY[0x1E4F14428];
    dispatch_async(v4, &__block_literal_global_339_1);
  }
  else
  {
    _notificationStateQueue_notificationState = v3;
    v5 = _pasteboardCacheQueue();
    dispatch_async(v5, &__block_literal_global_327_2);
  }
}

void ___serverConnection_block_invoke_4()
{
  _pasteboardCacheQueue_removePersistentPasteboardsFromNameToItemCollectionMap();
  v0 = MEMORY[0x1E4F14428];
  dispatch_async(v0, &__block_literal_global_339_1);
}

void _pasteboardCacheQueue_removePersistentPasteboardsFromNameToItemCollectionMap()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  v0 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v1 = _pasteboardCacheQueue_PasteboardNametoItemCollectionMap();
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void *)(*((void *)&v8 + 1) + 8 * i);
        id v7 = [v1 objectForKeyedSubscript:v6];
        if ([v7 isPersistent]) {
          [v0 addObject:v6];
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }
  [v1 removeObjectsForKeys:v0];
}

void ___serverConnection_block_invoke_6()
{
  v0 = _pasteboardCacheQueue();
  dispatch_async(v0, &__block_literal_global_333_2);
}

void ___serverConnection_block_invoke_8()
{
  v0 = _pasteboardCacheQueue();
  dispatch_async(v0, &__block_literal_global_337_2);
}

void ___dispatchPasteboardChangedSyncNotification_block_invoke()
{
  id v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:0x1ED154F80 object:0];
}

void _pasteboardCacheQueue_incrementCountOffsetForName(void *a1)
{
  id v1 = a1;
  id v3 = [NSNumber numberWithInteger:_pasteboardCacheQueue_countOffsetForName(v1) + 1];
  uint64_t v2 = _pasteboardCacheQueue_PasteboardNameToCountOffsetMap();
  [v2 setObject:v3 forKeyedSubscript:v1];
}

id _pasteboardCacheQueue_PasteboardNameToCountOffsetMap()
{
  if (qword_1EB25CA28 != -1) {
    dispatch_once(&qword_1EB25CA28, &__block_literal_global_346_0);
  }
  id v0 = (void *)qword_1EB25CA20;
  return v0;
}

id ___pasteboardCacheQueue_existingItemCollectionWithName_block_invoke()
{
  uint64_t v4 = 0;
  v5 = &v4;
  uint64_t v6 = 0x3032000000;
  id v7 = __Block_byref_object_copy__151;
  long long v8 = __Block_byref_object_dispose__151;
  id v9 = 0;
  id v0 = _pasteboardAuthenticatedMessageQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___pasteboardCacheQueue_existingItemCollectionWithName_block_invoke_2;
  block[3] = &unk_1E52D9900;
  void block[4] = &v4;
  dispatch_sync(v0, block);

  id v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void ___pasteboardCacheQueue_existingItemCollectionWithName_block_invoke_2(uint64_t a1)
{
}

void ___setPinnedItemCollectionForName_block_invoke(uint64_t a1)
{
}

void ___removePinnedItemCollectionForName_block_invoke(uint64_t a1)
{
}

void ___pasteboardAuthenticatedMessageQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit.pasteboard.authenticated-message-queue", 0);
  id v1 = (void *)qword_1EB25CA40;
  qword_1EB25CA40 = (uint64_t)v0;
}

void ___existingItemCollectionWithName_block_invoke(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v3 + 40);
  uint64_t v4 = _pasteboardCacheQueue_existingItemCollectionWithName(v2, &obj);
  objc_storeStrong((id *)(v3 + 40), obj);
  uint64_t v5 = *(void *)(a1[5] + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void ___coerceItemToType_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___coerceItemToType_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___coerceItemToType_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___coerceItemToType_block_invoke_4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___coerceItemToType_block_invoke_5(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___coerceItemToClass_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v12 = a2;
  id v8 = a3;
  if (!a4) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  long long v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
  id v11 = v8;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void ___pasteboardCompletionQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit.pasteboard.completion-queue", 0);
  id v1 = (void *)qword_1EB25CA50;
  qword_1EB25CA50 = (uint64_t)v0;
}

void __PBUTIForNSAttributedStringDocumentType_block_invoke()
{
  v8[5] = *MEMORY[0x1E4F143B8];
  v7[0] = *(void *)off_1E52D21C0;
  dispatch_queue_t v0 = [(id)*MEMORY[0x1E4F44470] identifier];
  v8[0] = v0;
  v7[1] = *(void *)off_1E52D2210;
  id v1 = [(id)*MEMORY[0x1E4F444A0] identifier];
  v8[1] = v1;
  v7[2] = *(void *)off_1E52D2208;
  uint64_t v2 = [(id)*MEMORY[0x1E4F444A8] identifier];
  v8[2] = v2;
  v7[3] = *(void *)off_1E52D2078;
  uint64_t v3 = [(id)*MEMORY[0x1E4F443F0] identifier];
  v8[3] = v3;
  v7[4] = *(void *)off_1E52D2448;
  uint64_t v4 = [(id)*MEMORY[0x1E4F44538] identifier];
  v8[4] = v4;
  uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:5];
  id v6 = (void *)qword_1EB25CA60;
  qword_1EB25CA60 = v5;
}

void sub_18646023C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

_UIViewControllerPreviewingContext *_UIPreviewingContextForViewController(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v4
    && ([v4 _screen],
        id v6 = objc_claimAutoreleasedReturnValue(),
        char v7 = [v6 _isForceTouchCapable],
        v6,
        (v7 & 1) != 0))
  {
    id v8 = [[_UIViewControllerPreviewingContext alloc] initWithSourceView:v5 viewController:v3];
  }
  else
  {
    id v8 = [[_UIInertPreviewingContext alloc] initWithSourceView:v5];
  }
  uint64_t v9 = v8;

  return v9;
}

void sub_18646209C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186462F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18646559C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UITextInputSourceIsKeyboard(unint64_t a1)
{
  return (a1 < 9) & (0x1F2u >> a1);
}

void UIContentConfigurationAlertForReplacedContentView(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  uint64_t v14 = *(NSObject **)(__UILogGetCategoryCachedImpl("ContentConfiguration", &UIContentConfigurationAlertForReplacedContentView___s_category)+ 8);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    uint64_t v15 = v14;
    uint64_t v16 = [v9 capitalizedString];
    int v17 = 138413570;
    id v18 = v9;
    __int16 v19 = 2112;
    id v20 = v13;
    __int16 v21 = 2112;
    uint64_t v22 = v16;
    __int16 v23 = 2112;
    id v24 = v10;
    __int16 v25 = 2112;
    id v26 = v11;
    __int16 v27 = 2112;
    id v28 = v12;
    _os_log_impl(&dword_1853B0000, v15, OS_LOG_TYPE_ERROR, "Warning: You are setting a new content configuration to a %@ that has an existing content configuration, but the existing content view does not support the new configuration. This means the existing content view must be replaced with a new content view created from the new configuration, instead of updating the existing content view directly, which is expensive. %@ Make a symbolic breakpoint at UIContentConfigurationAlertForReplacedContentView to catch this in the debugger.\n%@: %@;\n"
      "Existing content configuration: %@;\n"
      "New content configuration: %@",
      (uint8_t *)&v17,
      0x3Eu);
  }
}

void sub_186468868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18646A8DC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_18646B568(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1864708EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
}

void _updateAffordanceFrameOrigin(void *a1, void *a2)
{
  id v13 = a2;
  id v3 = a1;
  [v3 frameOrigin];
  double v5 = v4;
  [v3 size];
  double v7 = v5 + v6 * 0.5;
  [v13 size];
  double v9 = v7 - v8 * 0.5;
  [v3 frameOrigin];
  double v11 = v10;

  [v13 size];
  objc_msgSend(v13, "setFrameOrigin:", v9, v11 + -12.0 - v12);
}

void sub_1864717B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186472ECC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 152));
  _Unwind_Resume(a1);
}

void _UIPreviewQuickActionViewCommonInit(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [UIImageView alloc];
  double v3 = *MEMORY[0x1E4F1DB28];
  double v4 = *(double *)(MEMORY[0x1E4F1DB28] + 8);
  double v5 = *(double *)(MEMORY[0x1E4F1DB28] + 16);
  double v6 = *(double *)(MEMORY[0x1E4F1DB28] + 24);
  v38 = -[UIImageView initWithFrame:](v2, "initWithFrame:", *MEMORY[0x1E4F1DB28], v4, v5, v6);
  [(UIImageView *)v38 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v1 addSubview:v38];
  [v1 setBackgroundViewImage:v38];
  double v7 = -[UIImageView initWithFrame:]([UIImageView alloc], "initWithFrame:", v3, v4, v5, v6);
  [(UIImageView *)v7 setTranslatesAutoresizingMaskIntoConstraints:0];
  [(UIImageView *)v7 setContentMode:1];
  LODWORD(v8) = 1148829696;
  [(UIView *)v7 setContentHuggingPriority:0 forAxis:v8];
  LODWORD(v9) = 1148829696;
  [(UIView *)v7 setContentHuggingPriority:1 forAxis:v9];
  [(UIView *)v38 addSubview:v7];
  [v1 setImageView:v7];
  double v10 = -[UILabel initWithFrame:]([UILabel alloc], "initWithFrame:", v3, v4, v5, v6);
  [(UIView *)v10 setTranslatesAutoresizingMaskIntoConstraints:0];
  double v11 = +[UIColor clearColor];
  [(UIView *)v10 setBackgroundColor:v11];

  double v12 = [off_1E52D39B8 systemFontOfSize:16.0];
  [(UILabel *)v10 setFont:v12];

  [(UILabel *)v10 setTextAlignment:1];
  [(UILabel *)v10 setNumberOfLines:0];
  [v1 addSubview:v10];
  [v1 setLabel:v10];

  id v13 = _NSDictionaryOfVariableBindings(&cfstr_ImageviewLabel.isa, v7, v10, v38, 0);
  uint64_t v14 = objc_opt_new();
  uint64_t v15 = MEMORY[0x1E4F1CC08];
  uint64_t v16 = [MEMORY[0x1E4F5B268] constraintsWithVisualFormat:@"H:|-5-[backgroundViewImage]-5-|" options:0 metrics:MEMORY[0x1E4F1CC08] views:v13];
  [v14 addObjectsFromArray:v16];

  int v17 = [MEMORY[0x1E4F5B268] constraintsWithVisualFormat:@"H:[imageView(<=44)]" options:0 metrics:v15 views:v13];
  [v14 addObjectsFromArray:v17];

  id v18 = [MEMORY[0x1E4F5B268] constraintsWithVisualFormat:@"V:|[backgroundViewImage]-[label]|" options:0 metrics:v15 views:v13];
  [v14 addObjectsFromArray:v18];

  __int16 v19 = [MEMORY[0x1E4F5B268] constraintsWithVisualFormat:@"H:|[label]|" options:0 metrics:v15 views:v13];
  [v14 addObjectsFromArray:v19];

  id v20 = [(UIView *)v7 centerXAnchor];
  __int16 v21 = [(UIView *)v38 centerXAnchor];
  uint64_t v22 = [v20 constraintEqualToAnchor:v21];
  [v14 addObject:v22];

  __int16 v23 = [(UIView *)v7 centerYAnchor];
  id v24 = [(UIView *)v38 centerYAnchor];
  __int16 v25 = [v23 constraintEqualToAnchor:v24];
  [v14 addObject:v25];

  id v26 = [(UIView *)v7 heightAnchor];
  __int16 v27 = [(UIView *)v7 widthAnchor];
  id v28 = [v26 constraintEqualToAnchor:v27];
  [v14 addObject:v28];

  uint64_t v29 = [(UIView *)v38 heightAnchor];
  v30 = [(UIView *)v7 heightAnchor];
  v31 = [v29 constraintEqualToAnchor:v30 multiplier:1.57079633];
  [v14 addObject:v31];

  v32 = [(UIView *)v38 widthAnchor];
  v33 = [(UIView *)v7 widthAnchor];
  v34 = [v32 constraintEqualToAnchor:v33 multiplier:1.57079633];
  [v14 addObject:v34];

  [MEMORY[0x1E4F5B268] activateConstraints:v14];
  v35 = [(UIView *)v7 widthAnchor];
  v36 = [(UIView *)v7 heightAnchor];
  v37 = [v35 constraintEqualToAnchor:v36];
  [v37 setActive:1];
}

id ___sendAnalyticsEvent_block_invoke(uint64_t a1)
{
  v16[3] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  double v12 = &v11;
  uint64_t v13 = 0x2050000000;
  uint64_t v2 = (void *)qword_1EB25BEA8;
  uint64_t v14 = qword_1EB25BEA8;
  if (!qword_1EB25BEA8)
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __getIAUtilityClass_block_invoke;
    v10[3] = &unk_1E52D9900;
    void v10[4] = &v11;
    __getIAUtilityClass_block_invoke((uint64_t)v10);
    uint64_t v2 = (void *)v12[3];
  }
  id v3 = v2;
  _Block_object_dispose(&v11, 8);
  double v4 = _UIMainBundleIdentifier();
  double v5 = [v3 lookupAppBundle:v4];

  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    v16[0] = *(void *)(a1 + 32);
    v15[0] = @"hapticTrigger";
    v15[1] = @"deviceType";
    double v7 = [NSNumber numberWithInteger:v6];
    v16[1] = v7;
    v15[2] = @"bundleId_category";
    v16[2] = v5;
    double v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:v15 count:3];
  }
  else
  {
    double v8 = 0;
  }

  return v8;
}

void sub_186475860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getIAUtilityClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25BEB0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __InputAnalyticsLibraryCore_block_invoke_2;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E5300260;
    uint64_t v8 = 0;
    qword_1EB25BEB0 = _sl_dlopen();
  }
  if (!qword_1EB25BEB0)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v4 = [NSString stringWithUTF8String:"void *InputAnalyticsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIFeedbackBackBoardEngine.m", 22, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("IAUtility");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"Class getIAUtilityClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFeedbackBackBoardEngine.m", 24, @"Unable to find class %s", "IAUtility");

LABEL_10:
    __break(1u);
  }
  qword_1EB25BEA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __InputAnalyticsLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25BEB0 = result;
  return result;
}

id _eventMessageQueue()
{
  if (qword_1EB262180 != -1) {
    dispatch_once(&qword_1EB262180, &__block_literal_global_33_3);
  }
  dispatch_queue_t v0 = (void *)_MergedGlobals_1182;
  return v0;
}

void ___slotContent_block_invoke()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1) {
    goto LABEL_4;
  }
  int v13 = _UIInternalPreference_UIEventAttributionViewDebugMode;
  if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_UIEventAttributionViewDebugMode) {
    goto LABEL_4;
  }
  while (v0 >= v13)
  {
    _UIInternalPreferenceSync(v0, &_UIInternalPreference_UIEventAttributionViewDebugMode, @"UIEventAttributionViewDebugMode", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
    int v13 = _UIInternalPreference_UIEventAttributionViewDebugMode;
    if (v0 == _UIInternalPreference_UIEventAttributionViewDebugMode) {
      goto LABEL_4;
    }
  }
  if (!byte_1E8FD53B4) {
LABEL_4:
  }
    id v1 = @"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=";
  else {
    id v1 = @"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==";
  }
  CFDataRef v14 = (const __CFData *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBase64EncodedString:v1 options:0];
  uint64_t v2 = CGDataProviderCreateWithCFData(v14);
  id v3 = CGImageCreateWithPNGDataProvider(v2, 0, 0, kCGRenderingIntentDefault);
  uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4FB3488]), "initWithContentSize:contentScale:localImage:toLayerContext:", 1, v3, &_slotContent___layerContext, 1.0, 1.0);
  double v5 = (void *)__slotContent;
  __slotContent = v4;

  uint64_t v6 = [MEMORY[0x1E4F4F3F0] sharedInstance];
  long long v7 = (void *)MEMORY[0x1E4F1CAD0];
  LODWORD(v8) = 2143289344;
  LODWORD(v9) = 2143289344;
  LODWORD(v10) = 2143289344;
  uint64_t v11 = (void *)[(id)__slotContent newTouchAuthenticationSpecificationWithAuthenticationMessageContext:1589136771 backgroundStatisticsRegion:0 backgroundStatisticsForeground:0 backgroundStatisticsPassingContrast:1 backgroundStatisticsFailingContrast:0 hitTestInformationMask:v8 initialSampleEvent:v9 secureName:v10];
  double v12 = [v7 setWithObject:v11];
  [v6 addTouchAuthenticationSpecifications:v12 forReason:@"event attribution"];

  CGImageRelease(v3);
  CGDataProviderRelease(v2);
}

void ___eventMessageQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit.event_attribution.event-message-queue", 0);
  id v1 = (void *)_MergedGlobals_1182;
  _MergedGlobals_1182 = (uint64_t)v0;
}

BOOL std::deque<_UIVelocityIntegratorDataSample>::__maybe_remove_back_spare[abi:nn180100](void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 51 * ((v1 - v2) >> 3) - 1;
  }
  unint64_t v4 = v3 - (a1[5] + a1[4]);
  if (v4 >= 0x66)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
  return v4 > 0x65;
}

void *std::__deque_iterator<_UIVelocityIntegratorDataSample,_UIVelocityIntegratorDataSample*,_UIVelocityIntegratorDataSample&,_UIVelocityIntegratorDataSample**,long,51l>::operator+=[abi:nn180100](void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x3333333333333333 * ((uint64_t)(result[1] - *(void *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 50 - v3;
      uint64_t v6 = &v2[-(v5 / 0x33)];
      *uint64_t result = v6;
      unint64_t v4 = *v6 + 80 * (51 * (v5 / 0x33) - v5) + 4000;
    }
    else
    {
      *uint64_t result = &v2[v3 / 0x33];
      unint64_t v4 = v2[v3 / 0x33] + 80 * (v3 % 0x33);
    }
    result[1] = v4;
  }
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<_UIVelocityIntegratorDataSample *,std::__deque_iterator<_UIVelocityIntegratorDataSample,_UIVelocityIntegratorDataSample *,_UIVelocityIntegratorDataSample&,_UIVelocityIntegratorDataSample **,long,51l>,0>(void *result, char *a2, char *a3, void *a4, char *a5)
{
  uint64_t v6 = a4;
  double v8 = result;
  if (a2 == a3)
  {
    double v9 = a2;
  }
  else
  {
    double v9 = a3;
    uint64_t v10 = *a4;
    uint64_t v11 = a3;
    while (1)
    {
      int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a5[-v10] >> 4);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a2) >> 4)) < v12) {
        int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a2) >> 4);
      }
      v11 -= 80 * v12;
      a5 -= 80 * v12;
      if (v12) {
        uint64_t result = memmove(a5, v11, 80 * v12);
      }
      if (v11 == a2) {
        break;
      }
      uint64_t v13 = *--v6;
      uint64_t v10 = v13;
      a5 = (char *)(v13 + 4080);
    }
    if ((char *)(*v6 + 4080) == a5)
    {
      CFDataRef v14 = (char *)v6[1];
      ++v6;
      a5 = v14;
    }
  }
  void *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

void *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<_UIVelocityIntegratorDataSample *,std::__deque_iterator<_UIVelocityIntegratorDataSample,_UIVelocityIntegratorDataSample *,_UIVelocityIntegratorDataSample&,_UIVelocityIntegratorDataSample **,long,51l>,0>(void *result, unsigned char *__src, unsigned char *a3, void **a4, char *__dst)
{
  uint64_t v6 = a4;
  long long v7 = __src;
  double v8 = result;
  if (__src == a3)
  {
    double v9 = __src;
  }
  else
  {
    double v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4080) >> 4);
      unint64_t v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 4)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 4);
      if (v12) {
        uint64_t result = memmove(__dst, v7, 80 * v12);
      }
      v7 += 80 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 80 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  void *v8 = v9;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

uint64_t _UIPreviewInteractionIsTextGestureRecognizer(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 delegate];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    char v4 = 1;
  }
  else
  {
    objc_opt_class();
    char v4 = objc_opt_isKindOfClass();
  }

  return v4 & 1;
}

uint64_t _UIStatusBarPartStyleFromStyle(uint64_t a1)
{
  if (a1 == 1) {
    return 1;
  }
  else {
    return 2 * (a1 == 3);
  }
}

uint64_t _UIStatusBarStyleFromPartStyle(uint64_t result)
{
  if (result != 1)
  {
    if (result == 4)
    {
      id v1 = [MEMORY[0x1E4F28B00] currentHandler];
      uint64_t v2 = [NSString stringWithUTF8String:"UIStatusBarStyle _UIStatusBarStyleFromPartStyle(_UIStatusBarPartStyle)"];
      [v1 handleFailureInFunction:v2 file:@"_UIStatusBarStyle.m" lineNumber:44 description:@"_UIStatusBarPartStyleInherited cannot be converted to a UIStatusBarStyle"];

      return 0;
    }
    else if (result == 2)
    {
      return 3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1864795BC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 136));
  _Unwind_Resume(a1);
}

id _UIInteractiveHighlightingEnvironmentFromView(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_getAssociatedObject(v1, &_UIInteractiveHighlightingEnvironmentProperty);
  uint64_t v3 = v2;
  if (v2)
  {
    id v4 = v2;
  }
  else
  {
    uint64_t v5 = [v1 superview];
    uint64_t v6 = (void *)v5;
    if (v5)
    {
      _UIInteractiveHighlightingEnvironmentFromView(v5);
      id v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v4 = 0;
    }
  }
  return v4;
}

void _UIPreviewInteractionPlatterInsetsForRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRectGetHeight(*(CGRect *)&a1);
  v8.origin.x = a1;
  v8.origin.y = a2;
  v8.size.width = a3;
  v8.size.height = a4;
  CGRectGetWidth(v8);
  v9.origin.x = a1;
  v9.origin.y = a2;
  v9.size.width = a3;
  v9.size.height = a4;
  CGRectGetHeight(v9);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetWidth(v10);
  v11.origin.x = a1;
  v11.origin.y = a2;
  v11.size.width = a3;
  v11.size.height = a4;
  CGRectGetHeight(v11);
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.width = a3;
  v12.size.height = a4;
  CGRectGetWidth(v12);
}

double _UIUpdateModelMediaTime()
{
  return *(double *)&_currentModelMediaTime;
}

uint64_t _UIUpdateModelMachTime()
{
  return qword_1EB2621A8;
}

char *_UIUpdateGetTiming(int a1)
{
  if (dword_1EB26218C <= a1) {
    return 0;
  }
  else {
    return &_MergedGlobals_1183[24
  }
                              * ((~(_BYTE)a1
                                - (dword_1EB26218C & (a1 >> 31))
                                + (_BYTE)dword_1EB262190) & 3)
                              + 112];
}

char *_UIMachTimeDebugDescriptionCopyCStr(unint64_t a1, unint64_t a2, char *a3, size_t a4)
{
  if (qword_1EB2621B8 != -1) {
    dispatch_once(&qword_1EB2621B8, &__block_literal_global_46_4);
  }
  double v8 = (double)a1 / *(double *)&qword_1EB2621C0;
  double v9 = (double)a2 / *(double *)&qword_1EB2621C0;
  return _UIMediaTimeDebugDescriptionCopyCStr(a3, a4, v8, v9);
}

char *_UIMediaTimeDebugDescriptionCopyCStr(char *a1, size_t a2, double a3, double a4)
{
  if (a4 == 0.0)
  {
    uint64_t v7 = mach_absolute_time();
    if (qword_1EB2621B8 != -1) {
      dispatch_once(&qword_1EB2621B8, &__block_literal_global_46_4);
    }
    a4 = (double)v7 / *(double *)&qword_1EB2621C0;
  }
  if (a1) {
    size_t v8 = a2;
  }
  else {
    size_t v8 = 48;
  }
  if (!a1) {
    a1 = (char *)&unk_1EB2621C8;
  }
  snprintf(a1, v8, "%.06f(%+.06f)s", a3, a3 - a4);
  return a1;
}

char *_UIMachDurationDebugDescriptionCopyCStr(uint64_t a1, char *a2, size_t a3)
{
  if (qword_1EB2621B8 != -1) {
    dispatch_once(&qword_1EB2621B8, &__block_literal_global_46_4);
  }
  if (a2)
  {
    size_t v6 = a3;
  }
  else
  {
    a2 = (char *)&unk_1EB2621C8;
    size_t v6 = 48;
  }
  snprintf(a2, v6, "%+.06fs", (double)a1 / *(double *)&qword_1EB2621C0);
  return a2;
}

char *_UIMediaDurationDebugDescriptionCopyCStr(char *a1, size_t a2, double a3)
{
  if (a1) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = (char *)&unk_1EB2621C8;
  }
  if (!a1) {
    a2 = 48;
  }
  snprintf(v3, a2, "%+.06fs", a3);
  return v3;
}

id _UIUpdateDebugDescriptionIndented(void *a1, __CFString *a2, __CFString *a3)
{
  uint64_t v5 = @"    ";
  if (a2) {
    uint64_t v5 = a2;
  }
  if (a3) {
    uint64_t v5 = a3;
  }
  size_t v6 = v5;
  uint64_t v7 = v6;
  if (a2) {
    size_t v8 = a2;
  }
  else {
    size_t v8 = v6;
  }
  double v9 = v8;
  CGRect v10 = [MEMORY[0x1E4F28B88] newlineCharacterSet];
  CGRect v11 = [a1 componentsSeparatedByCharactersInSet:v10];
  CGRect v12 = (void *)[v11 mutableCopy];

  uint64_t v13 = [v12 count];
  if (v13)
  {
    unsigned int v14 = v13 - 1;
    do
    {
      uint64_t v15 = v14;
      uint64_t v16 = [v12 objectAtIndexedSubscript:v14];
      int v17 = [(__CFString *)v9 stringByAppendingString:v16];
      [v12 setObject:v17 atIndexedSubscript:v14];

      id v18 = v7;
      --v14;
      double v9 = v18;
    }
    while (v15);
  }
  else
  {
    id v18 = v9;
  }
  __int16 v19 = [v12 componentsJoinedByString:@"\n"];

  return v19;
}

void __builtinUpdateCycleEnabled_block_invoke()
{
  dispatch_queue_t v0 = NSString;
  _UIUpdateInputTimingProfilePath("Default");
  id v1 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringWithFormat:", @"Default Event Timing Profile is missing (%s). Create empty file for a quick temporary workaround. File radar on UIKit for a permanent fix.", objc_msgSend(v1, "UTF8String"));
  alertMessage = (__CFString *)objc_claimAutoreleasedReturnValue();

  CFUserNotificationDisplayAlert(30.0, 0, 0, 0, 0, @"Misconfigured Device", alertMessage, @"Okay", 0, 0, 0);
}

uint64_t debugTracingTracepoints()
{
  return 1;
}

uint64_t debugTracingTracepointsWithCallstacks()
{
  return 2;
}

void sub_1864800CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIViewControllerIsChildOfTwoColumnSplitViewController(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t IsChildOfTwoColumnSplitViewController = [v1 _isCollapsed] ^ 1;
    }
    else
    {
      uint64_t v3 = [v1 parentViewController];
      if (!v3)
      {
        id v4 = [v1 presentationController];
        uint64_t v5 = v4;
        if (v4 && ([v4 shouldPresentInFullscreen] & 1) == 0)
        {
          uint64_t v3 = [v1 presentingViewController];
        }
        else
        {
          uint64_t v3 = 0;
        }
      }
      uint64_t IsChildOfTwoColumnSplitViewController = _UIViewControllerIsChildOfTwoColumnSplitViewController(v3);
    }
  }
  else
  {
    uint64_t IsChildOfTwoColumnSplitViewController = 0;
  }

  return IsChildOfTwoColumnSplitViewController;
}

void sub_186487D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864880C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864885F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186488B00(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_186488EC0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_1864911C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_186492790(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_186492BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_186492E64(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id _UIGetPreviewPresentationController(void *a1)
{
  id v1 = [a1 _existingPresentationControllerImmediate:1 effective:1];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v2 = v1;
  }
  else {
    id v2 = 0;
  }

  return v2;
}

void sub_186497D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_186498C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _enumerateMapTableKeysAndObjectsUsingBlock(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  unsigned __int8 v16 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v5 = objc_msgSend(v3, "keyEnumerator", 0);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v13;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v13 != v8) {
        objc_enumerationMutation(v5);
      }
      uint64_t v10 = *(void *)(*((void *)&v12 + 1) + 8 * v9);
      CGRect v11 = [v3 objectForKey:v10];
      v4[2](v4, v10, v11, &v16);
      LODWORD(v10) = v16;

      if (v10) {
        break;
      }
      if (v7 == ++v9)
      {
        uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v17 count:16];
        if (v7) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

char *_sanitizedIndexPath(void *a1)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = (char *)([v1 length] + 1);
  do
  {
    uint64_t v3 = [v1 indexAtPosition:v2 - 2];
    --v2;
  }
  while (v3 == 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v4 = [v1 length];
  if ((char *)v4 == v2)
  {
    id v2 = (char *)v1;
  }
  else if (v2)
  {
    double v5 = MEMORY[0x1F4188790](v4);
    uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    objc_msgSend(v1, "getIndexes:range:", v7, 0, v2, v5);
    id v2 = [MEMORY[0x1E4F28D58] indexPathWithIndexes:v7 length:v2];
  }

  return v2;
}

id _manuallyUpdateSanitizedIndexPath(void *a1, void *a2, uint64_t a3)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  unint64_t v7 = [v5 length];
  if (v7 >= [v6 length] && objc_msgSend(v6, "length"))
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = [v5 indexAtPosition:v8];
      uint64_t v10 = [v6 indexAtPosition:v8];
      if (v9 < v10) {
        break;
      }
      uint64_t v11 = v10;
      if (v8 == [v6 length] - 1)
      {
        if (a3 == 1 && v9 == v11)
        {
          id v12 = 0;
        }
        else
        {
          uint64_t v14 = [v5 length];
          double v15 = MEMORY[0x1F4188790](v14);
          int v17 = (char *)v19 - v16;
          objc_msgSend(v5, "getIndexes:", (char *)v19 - v16, v15);
          uint64_t v18 = v9 - 1;
          if (!a3) {
            uint64_t v18 = v9 + 1;
          }
          *(void *)&v17[8 * v8] = v18;
          objc_msgSend(MEMORY[0x1E4F28D58], "indexPathWithIndexes:length:", v17, objc_msgSend(v5, "length"));
          id v12 = (id)objc_claimAutoreleasedReturnValue();
        }
        goto LABEL_9;
      }
      if (v9 == v11 && ++v8 < (unint64_t)[v6 length]) {
        continue;
      }
      break;
    }
  }
  id v12 = v5;
LABEL_9:

  return v12;
}

void sub_18649BB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18649E58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18649E7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getMLULookupItemClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  dispatch_queue_t v0 = (void *)_MergedGlobals_1187;
  uint64_t v7 = _MergedGlobals_1187;
  if (!_MergedGlobals_1187)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getMLULookupItemClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getMLULookupItemClass_block_invoke((uint64_t)v3);
    dispatch_queue_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1864A0C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMLULookupItemClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB2622C0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __MobileLookupLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E5300710;
    uint64_t v8 = 0;
    qword_1EB2622C0 = _sl_dlopen();
  }
  if (!qword_1EB2622C0)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *MobileLookupLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIPreviewItemController.m", 39, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("MLULookupItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getMLULookupItemClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIPreviewItemController.m", 40, @"Unable to find class %s", "MLULookupItem");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1187 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __MobileLookupLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2622C0 = result;
  return result;
}

void _accessibilityMaximumWidthWhenUsingAccessibilitySizes()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  dispatch_queue_t v0 = +[UIScreen mainScreen];
  [v0 bounds];
  if (v1 >= v2) {
    double v3 = v2;
  }
  else {
    double v3 = v1;
  }
  double v4 = v3 + -64.0;

  id v5 = +[UIDevice currentDevice];
  uint64_t v6 = [v5 userInterfaceIdiom];

  if ((v6 & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    long long v7 = +[UIWindow _applicationKeyWindow];
    uint64_t v8 = v7;
    if (v7)
    {
      [v7 bounds];
    }
    else
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      uint64_t v9 = +[UIWindow allWindowsIncludingInternalWindows:onlyVisibleWindows:](UIWindow, "allWindowsIncludingInternalWindows:onlyVisibleWindows:", 0, 1, 0);
      uint64_t v10 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)v19;
        do
        {
          for (uint64_t i = 0; i != v11; ++i)
          {
            if (*(void *)v19 != v12) {
              objc_enumerationMutation(v9);
            }
            [*(id *)(*((void *)&v18 + 1) + 8 * i) bounds];
            if (v14 >= v15) {
              double v16 = v15;
            }
            else {
              double v16 = v14;
            }
            double v17 = v16 + -64.0;
            if (v4 >= v17) {
              double v4 = v17;
            }
          }
          uint64_t v11 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v11);
      }
    }
  }
}

id _UIGetLookupBackgroundEffect(void *a1)
{
  v13[3] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (_AXSEnhanceBackgroundContrastEnabled())
  {
    double v2 = +[UIColor colorWithWhite:0.0 alpha:0.4];
    double v3 = +[UIVisualEffect effectCompositingColor:v2];
  }
  else
  {
    double v4 = __UIStatusBarManagerForWindow(0);
    uint64_t v5 = [v4 statusBarStyle];

    if (v5 || [v1 userInterfaceStyle] == 2)
    {
      double v6 = 0.0;
      double v7 = 0.1;
    }
    else
    {
      double v6 = 0.35;
      double v7 = 0.35;
    }
    uint64_t v8 = +[UIBlurEffect _effectWithBlurRadius:8.0 scale:0.5];
    uint64_t v9 = +[UIColorEffect _colorEffectSourceOver:](UIColorEffect, "_colorEffectSourceOver:", v6, v6, v6, v7, v8);
    v13[1] = v9;
    uint64_t v10 = +[UIColorEffect _colorEffectSourceOver:](UIColorEffect, "_colorEffectSourceOver:", 0.0, 0.0, 0.0, 0.1);
    v13[2] = v10;
    uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:3];
    double v3 = +[UIVisualEffect effectCombiningEffects:v11];
  }
  return v3;
}

void sub_1864A3E0C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1864A40E4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1864A4370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, id a19)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a19);
  objc_destroyWeak((id *)(v22 - 72));
  _Unwind_Resume(a1);
}

void sub_1864A4BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  _Unwind_Resume(a1);
}

void sub_1864A7D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIPreviewInteractionAllowedToBeginForView(id a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2622D0 != -1) {
    dispatch_once(&qword_1EB2622D0, &__block_literal_global_434);
  }
  if (!_MergedGlobals_1188) {
    return 0;
  }
  uint64_t result = _AXSForceTouchEnabled();
  if (result)
  {
    NSClassFromString(&cfstr_Uicontextmenui_1.isa);
    if (a1)
    {
      long long v3 = 0uLL;
      do
      {
        long long v11 = v3;
        long long v12 = v3;
        long long v10 = v3;
        double v4 = objc_msgSend(a1, "interactions", v3);
        uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
        if (v5)
        {
          uint64_t v6 = v5;
          uint64_t v7 = *(void *)v10;
          while (2)
          {
            for (uint64_t i = 0; i != v6; ++i)
            {
              if (*(void *)v10 != v7) {
                objc_enumerationMutation(v4);
              }
              if (objc_opt_isKindOfClass())
              {

                return 0;
              }
            }
            uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
            if (v6) {
              continue;
            }
            break;
          }
        }

        a1 = (id)[a1 superview];
        long long v3 = 0uLL;
      }
      while (a1);
    }
    return 1;
  }
  return result;
}

void sub_1864A9000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864AA178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864AA5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864AA794(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1864AC680(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_1864AC774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void __destructor_8_s24_sb32_sb40(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
}

void sub_1864ADC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t previewTransition_block_invoke(uint64_t a1, id *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t v3 = v2[1];
  if (!*((unsigned char *)v2 + 51))
  {
    if (v3 == 4 || !*((unsigned char *)v2 + 32))
    {
      if (*((unsigned char *)v2 + 18))
      {
        uint64_t v8 = [*a2 delegate];
        int v9 = [v8 clickPresentationInteractionShouldPresent:v2];

        if (!v9) {
          return 4;
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
      long long v12 = &v11;
      uint64_t v13 = 0x3032000000;
      uint64_t v14 = __Block_byref_object_copy__159;
      uint64_t v15 = __Block_byref_object_dispose__159;
      id v16 = 0;
      v10[0] = MEMORY[0x1E4F143A8];
      v10[1] = 3221225472;
      v10[2] = __61___UIClickPresentationInteraction__handleTransitionToPreview__block_invoke;
      v10[3] = &unk_1E52DF468;
      void v10[4] = v2;
      void v10[5] = &v11;
      uint64_t v5 = _Block_copy(v10);
      uint64_t v3 = [v2 delegate];
      [(id)v3 _clickPresentationInteraction:v2 shouldPresentWithCompletion:v5];

      uint64_t v6 = (void *)v12[5];
      if (v6)
      {
        if ([v6 BOOLValue])
        {
          char v7 = 1;
        }
        else
        {
          char v7 = 0;
          uint64_t v3 = v2[1];
        }
      }
      else
      {
        char v7 = 0;
        uint64_t v3 = 4;
      }

      _Block_object_dispose(&v11, 8);
      if ((v7 & 1) == 0) {
        return v3;
      }
    }
    if ([v2 _canPerformPresentation]) {
      return 5;
    }
    else {
      return v2[1];
    }
  }
  return v3;
}

void sub_1864AE180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void postPreviewTransition_block_invoke_2(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  if (!v5 || v5[1] != 4)
  {
    int v9 = v5;
    uint64_t v6 = [v5 _clickDragDriver];
    char v7 = [v6 isPreparingToDrag];

    if (a4 == 5)
    {
      uint64_t v5 = v9;
      if (!v9) {
        goto LABEL_12;
      }
      [v9 _performPresentation];
    }
    else
    {
      uint64_t v5 = v9;
      if (v9[51]) {
        char v8 = 1;
      }
      else {
        char v8 = v7;
      }
      if (v8) {
        goto LABEL_12;
      }
      -[_UIClickPresentationInteraction _endInteractionDidComplete:completion:](v9, 0);
    }
    uint64_t v5 = v9;
  }
LABEL_12:
}

void stateMachineSpec_block_invoke_4_4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a4 != 1) {
    return;
  }
  uint64_t v53 = v7;
  uint64_t v54 = v6;
  uint64_t v55 = v4;
  uint64_t v56 = v5;
  int v9 = *(id **)a2;
  if (!*(void *)a2) {
    return;
  }
  uint64_t v11 = [*(id *)a2 _clickDragDriver];
  uint64_t v12 = [v9 _clickDriverTouch];
  uint64_t v13 = (void *)v12;
  if (v11) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
LABEL_24:
    if ([v11 isPreparingToDrag]) {
      [v11 cancel];
    }
    if (a3 > 3) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (a3 == 3)
  {
    __int16 v25 = [v9 activeDriver];
    int v26 = [v25 hasExceededAllowableMovement];

    goto LABEL_17;
  }
  if (a3 != 2) {
    goto LABEL_24;
  }
  uint64_t v15 = [v9 activeDriver];
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {

    goto LABEL_15;
  }
  id v16 = [v9 activeDriver];
  uint64_t v17 = [v16 behavior];

  if (v17 != 2)
  {
LABEL_15:
    __int16 v27 = [v9 associatedDragInteraction];
    [v27 _liftDelay];
    double v29 = v28;

    if (v29 == _UIDragInteractionDefaultLiftDelay()) {
      goto LABEL_24;
    }
    v30 = [v9 activeDriver];
    [v30 touchDuration];
    double v32 = v31;

    int v26 = v32 > v29;
LABEL_17:
    int v33 = 1;
    if (!v26) {
      goto LABEL_24;
    }
    goto LABEL_18;
  }
  long long v18 = [v9 associatedDragInteraction];
  [v18 _pointerLiftDelay];
  double v20 = v19;

  if (v20 == _UIDragInteractionDefaultPointerLiftDelay())
  {
    BOOL v24 = 1;
  }
  else
  {
    long long v21 = [v9 activeDriver];
    [v21 touchDuration];
    double v23 = v22;

    BOOL v24 = v23 > v20;
  }
  v34 = [v9 associatedDragInteraction];
  int v33 = [v34 _allowsPointerDragBeforeLiftDelay] ^ 1;

  if (!v24) {
    goto LABEL_24;
  }
LABEL_18:
  if ((!v33 || [v11 isLifted])
    && [v9 beginDragIfPossibleWithTouch:v13])
  {
    *(void *)(a2 + 16) = 2;
  }
LABEL_27:
  v35 = [v9 exclusionRelationshipGestureRecognizer];
  [v35 _fail];

  v36 = [v9 failureRelationshipGestureRecognizer];
  [v36 _fail];

  [v9[7] _fail];
LABEL_28:
  if (*(void *)(a2 + 16) == 2)
  {
    v37 = [v9 associatedDragInteraction];
    [v9 setLatentAssociatedDragInteraction:v37];
  }
  else
  {
    -[_UIClickPresentationInteraction _endInteractionEffectIfNeeded](v9);
  }
  [v9 setAssociatedDragInteraction:0];
  v38 = [v9 presentationAssistant];
  [v9 setPresentationAssistant:0];
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __83___UIClickPresentationInteraction__handleDidTransitionToPossibleFromState_context___block_invoke;
  aBlock[3] = &unk_1E52DA070;
  uint64_t v52 = a2;
  id v39 = v38;
  id v50 = v39;
  v51 = v9;
  v40 = (void (**)(void))_Block_copy(aBlock);
  v41 = (void (**)(void))_Block_copy(*(const void **)(a2 + 40));
  if (v39)
  {
    [v39 dismissWithReason:*(void *)(a2 + 16) alongsideActions:v40 completion:v41];
  }
  else
  {
    if (v40) {
      v40[2](v40);
    }
    if (v41) {
      v41[2](v41);
    }
  }
  [v9 _cancelAllDrivers];
  v42 = [v9 activeDriver];
  double v43 = _UIClickPresentationAllowableMovementForDriver(v42, 0);
  v44 = [v9 activeDriver];
  [v44 setAllowableMovement:v43];

  [v9 setActiveDriver:0];
  _UIClickPresentationStatisticsReportEvent();
  v45 = +[UIEventSessionActionAnalytics sharedInstance];
  [v9 initialLocation];
  objc_msgSend(v45, "didShowContextualMenuFromLocation:withSource:", +[_UIEventSessionAction getUIEventSourceForUITouchType:](_UIEventSessionAction, "getUIEventSourceForUITouchType:", objc_msgSend(v13, "type")), v46, v47);

  v9[5] = 0;
  objc_msgSend(v9, "setInitialLocation:", 1.79769313e308, 1.79769313e308, 1.79769313e308);
  *((unsigned char *)v9 + 51) = 0;
  if (*((unsigned char *)v9 + 48))
  {
    v48 = [v9 feedbackGenerator];
    [v48 userInteractionEnded];

    *((unsigned char *)v9 + 48) = 0;
  }
  *((unsigned char *)v9 + 49) = 0;
}

uint64_t stateMachineSpec_block_invoke_5_3(uint64_t a1, void *a2)
{
  if (!*a2) {
    return 0;
  }
  if (*(void *)(*a2 + 8) != 4) {
    return 1;
  }
  uint64_t v2 = a2[2];
  if (v2 == 1 || v2 == 11) {
    return 1;
  }
  else {
    return 4;
  }
}

void stateMachineSpec_block_invoke_6_2(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  if (a4 == 2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      if (v4[23])
      {
        uint64_t v5 = [*a2 delegate];
        int v6 = [v5 _clickPresentationInteractionShouldAssociateWithDrag:v4];

        if (v6) {
          [v4 _associateWithActiveDragInteraction];
        }
      }
      uint64_t v7 = [v4 presentationAssistant];

      if (v7)
      {
        char v8 = [v4 presentationAssistant];
        [v8 setLifecycleCompletion:0];

        [v4 setPresentationAssistant:0];
      }
    }
  }
}

uint64_t stateMachineSpec_block_invoke_7_1(uint64_t a1, void *a2)
{
  return 2 * (*a2 != 0);
}

void stateMachineSpec_block_invoke_8_0(uint64_t a1, id *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    if ([*a2 _supportsRapidRestart])
    {
      [v2 locationInView:0];
      objc_msgSend(v2, "_attemptDragLiftAtLocation:useDefaultLiftAnimation:", v2[51]);
    }
    if (v2[51])
    {
      uint64_t v3 = [v2 _clickDragDriver];
      char v4 = [v3 isPreparingToDrag];

      if ((v4 & 1) == 0)
      {
        -[_UIClickPresentationInteraction _endInteractionDidComplete:completion:](v2, 0);
      }
    }
    else
    {
      uint64_t v5 = [v2 exclusionRelationshipGestureRecognizer];
      [v5 _succeed];

      int v6 = [v2 failureRelationshipGestureRecognizer];
      [v6 _succeed];

      uint64_t v7 = [v2 activeDriver];
      double v8 = _UIClickPresentationAllowableMovementForDriver(v7, 1);
      int v9 = [v2 activeDriver];
      [v9 setAllowableMovement:v8];

      if (v2[49])
      {
        id v11 = [v2 feedbackGenerator];
        long long v10 = [v2 view];
        [v2 locationInView:v10];
        objc_msgSend(v11, "previewedAtLocation:");
      }
    }
  }
}

uint64_t stateMachineSpec_block_invoke_9_0(uint64_t a1, void *a2)
{
  if (*a2) {
    return 3;
  }
  else {
    return 0;
  }
}

void sub_1864AEF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UIWillResetDatePicker()
{
  id v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:0x1ED1582C0 object:0];
}

void _UIResetDatePicker()
{
  id v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:0x1ED1585A0 object:0];
}

id _UIDatePickerClassForStyleAndMode(uint64_t a1, int64_t a2)
{
  char v4 = objc_opt_class();
  BOOL v5 = (unint64_t)(a2 - 3) >= 2 && a2 <= 4268;
  uint64_t v6 = 1;
  if (v5) {
    uint64_t v6 = 2;
  }
  if (!a1) {
    a1 = v6;
  }
  if ((a1 & 0xFFFFFFFFFFFFFFFELL) == 2
    && ((unint64_t)(a2 - 5) > 0xFFFFFFFFFFFFFFFDLL || a2 >= 4269 && a2 != 4272))
  {
    long long v10 = [MEMORY[0x1E4F28B00] currentHandler];
    id v11 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIDatePickerAssertUnsupportedStyleAndMode(UIDatePickerStyle, UIDatePickerMode)");
    uint64_t v12 = _UIDatePickerStringFromMode(a2);
    uint64_t v13 = _UIDatePickerStringFromStyle(a1);
    [v10 handleFailureInFunction:v11, @"UIDatePicker.m", 133, @"UIDatePickerMode %@ is unsupported when using style %@.", v12, v13 file lineNumber description];
  }
  if (dyld_program_sdk_at_least())
  {
    if (a1 == 1 || a1 == 3 || a1 == 2)
    {
      char v4 = objc_opt_class();
    }
    else
    {
      uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
      double v8 = objc_msgSend(NSString, "stringWithUTF8String:", "Class _UIDatePickerClassForStyleAndMode(UIDatePickerStyle, UIDatePickerMode)");
      objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, @"UIDatePicker.m", 173, @"Unknown UIDatePickerStyle %li", a1);
    }
  }
  return v4;
}

__CFString *_UIDatePickerStringFromMode(unint64_t a1)
{
  if (a1 >= 5)
  {
    uint64_t v2 = [NSNumber numberWithInteger:a1];
    id v1 = [v2 stringValue];
  }
  else
  {
    id v1 = off_1E5300C50[a1];
  }
  return v1;
}

__CFString *_UIDatePickerStringFromStyle(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3)
  {
    uint64_t v2 = [NSNumber numberWithInteger:a1];
    id v1 = [v2 stringValue];
  }
  else
  {
    id v1 = off_1E5300C78[a1 - 1];
  }
  return v1;
}

void sub_1864B31FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864B4018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  objc_destroyWeak(v10);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 112));
  _Unwind_Resume(a1);
}

id getSTKImageGlyphClass()
{
  uint64_t v3 = 0;
  char v4 = &v3;
  uint64_t v5 = 0x2050000000;
  id v0 = (void *)getSTKImageGlyphClass_softClass;
  uint64_t v6 = getSTKImageGlyphClass_softClass;
  if (!getSTKImageGlyphClass_softClass)
  {
    StickerKitLibraryCore_1();
    v4[3] = (uint64_t)objc_getClass("STKImageGlyph");
    getSTKImageGlyphClass_softClass = v4[3];
    id v0 = (void *)v4[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_1864B4488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFStringUtilitiesClass_0()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getEMFStringUtilitiesClass_softClass_0;
  uint64_t v7 = getEMFStringUtilitiesClass_softClass_0;
  if (!getEMFStringUtilitiesClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getEMFStringUtilitiesClass_block_invoke_0;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getEMFStringUtilitiesClass_block_invoke_0((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1864B5374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getEMFEmojiCategoryClass_2()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getEMFEmojiCategoryClass_softClass_2;
  uint64_t v7 = getEMFEmojiCategoryClass_softClass_2;
  if (!getEMFEmojiCategoryClass_softClass_2)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getEMFEmojiCategoryClass_block_invoke_2;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getEMFEmojiCategoryClass_block_invoke_2((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1864B5534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1864B6D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1864B9818(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1864BD16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSTKImageGlyphDataSourceClass_block_invoke_0(uint64_t a1)
{
  StickerKitLibraryCore_1();
  Class result = objc_getClass("STKImageGlyphDataSource");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSTKImageGlyphDataSourceClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void StickerKitLibraryCore_1()
{
  if (!StickerKitLibraryCore_frameworkLibrary_1) {
    StickerKitLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
}

uint64_t __StickerKitLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  StickerKitLibraryCore_frameworkLibrary_1 = result;
  return result;
}

Class __getSTKImageGlyphClass_block_invoke(uint64_t a1)
{
  StickerKitLibraryCore_1();
  Class result = objc_getClass("STKImageGlyph");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSTKImageGlyphClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void __getEMFStringUtilitiesClass_block_invoke_0(uint64_t a1)
{
  EmojiFoundationLibrary_4();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFStringUtilities");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFStringUtilitiesClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getEMFStringUtilitiesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiAndStickerCollectionInputView.m", 67, @"Unable to find class %s", "EMFStringUtilities");

    __break(1u);
  }
}

void EmojiFoundationLibrary_4()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!EmojiFoundationLibraryCore_frameworkLibrary_4)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __EmojiFoundationLibraryCore_block_invoke_6;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5300EF8;
    uint64_t v5 = 0;
    EmojiFoundationLibraryCore_frameworkLibrary_4 = _sl_dlopen();
  }
  if (!EmojiFoundationLibraryCore_frameworkLibrary_4)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *EmojiFoundationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIKeyboardEmojiAndStickerCollectionInputView.m", 65, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __EmojiFoundationLibraryCore_block_invoke_6()
{
  uint64_t result = _sl_dlopen();
  EmojiFoundationLibraryCore_frameworkLibrary_4 = result;
  return result;
}

void __getEMFEmojiCategoryClass_block_invoke_2(uint64_t a1)
{
  EmojiFoundationLibrary_4();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiCategory");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiCategoryClass_softClass_2 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getEMFEmojiCategoryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiAndStickerCollectionInputView.m", 66, @"Unable to find class %s", "EMFEmojiCategory");

    __break(1u);
  }
}

void __getEMFEmojiTokenClass_block_invoke_4(uint64_t a1)
{
  EmojiFoundationLibrary_4();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFEmojiToken");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFEmojiTokenClass_softClass_2 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getEMFEmojiTokenClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiAndStickerCollectionInputView.m", 68, @"Unable to find class %s", "EMFEmojiToken");

    __break(1u);
  }
}

__CFString *_NSStringFromUITouchSenstiveButtonPositionHint(unint64_t a1)
{
  if (a1)
  {
    v12[0] = 0;
    v12[1] = v12;
    v12[2] = 0x2020000000;
    v12[3] = 0;
    uint64_t v2 = objc_opt_new();
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = ___NSStringFromUITouchSenstiveButtonPositionHint_block_invoke;
    v7[3] = &unk_1E5300F38;
    id v3 = v2;
    id v8 = v3;
    int v9 = &stru_1ED0E84C0;
    long long v10 = @", ";
    uint64_t v11 = v12;
    _UIEnumerateOptions(a1, v7);
    long long v4 = v10;
    uint64_t v5 = (__CFString *)v3;

    _Block_object_dispose(v12, 8);
  }
  else
  {
    uint64_t v5 = @"none";
  }
  return v5;
}

void sub_1864BF604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UITouchSensitiveButtonRadiusInPointsFromMM(void *a1, double a2)
{
  long long v4 = [a1 _eventRoutingScene];
  uint64_t v5 = [v4 _screen];

  if ([v5 _isEmbeddedScreen] & 1) != 0 || v5 && (v5[202])
  {
    uint64_t v7 = (void *)MGCopyAnswer();
    id v8 = (void *)MGCopyAnswer();
    if (v8 && v7)
    {
      int v9 = [v5 displayConfiguration];
      [v8 doubleValue];
      double v11 = v10 / 25.4;
      [v9 bounds];
      double v13 = v12;
      [v9 pointScale];
      double v15 = v14 * v13;
      [v7 doubleValue];
      double v17 = v11 * (v15 / v16);
      [v5 scale];
      double v6 = v17 / v18 * a2;
    }
    else
    {
      int v9 = [MEMORY[0x1E4F28B00] currentHandler];
      double v19 = objc_msgSend(NSString, "stringWithUTF8String:", "CGFloat _UITouchSensitiveButtonRadiusInPointsFromMM(CGFloat, UIWindow * _Nonnull const __strong)");
      objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v19, @"_UITouchSensitiveButton.m", 106, @"%s: Unexpected nil screen information from query", "CGFloat _UITouchSensitiveButtonRadiusInPointsFromMM(CGFloat, UIWindow * _Nonnull const __strong)");

      double v6 = 0.0;
    }
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___UITouchSensitiveButtonRadiusInPointsFromMM_block_invoke;
    block[3] = &unk_1E52D9F70;
    void block[4] = a1;
    if (_UITouchSensitiveButtonRadiusInPointsFromMM_once != -1) {
      dispatch_once(&_UITouchSensitiveButtonRadiusInPointsFromMM_once, block);
    }
    double v6 = 0.0;
  }

  return v6;
}

void sub_1864C0224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t _UIUpdateRequestRecordSortedSetRemoveRequest(char **a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3 = (unint64_t)a1[1];
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *a1;
  double v6 = &v5[24 * v3];
  do
  {
    unint64_t v7 = v3 >> 1;
    id v8 = (unint64_t *)&v5[24 * (v3 >> 1)];
    unint64_t v10 = *v8;
    int v9 = (char *)(v8 + 3);
    v3 += ~(v3 >> 1);
    if (v10 < a2) {
      uint64_t v5 = v9;
    }
    else {
      unint64_t v3 = v7;
    }
  }
  while (v3);
  if (v6 == v5 || *(void *)v5 != a2) {
    return 0;
  }
  *a3 = *(_OWORD *)(v5 + 8);
  double v12 = *a1;
  uint64_t v13 = (uint64_t)(a1[1] - 1);
  a1[1] = (char *)v13;
  memmove(v5, v5 + 24, v12 - v5 + 24 * v13);
  return 1;
}

id _UIDateFormatStripOtherFormatCharacters(void *a1, int a2)
{
  id v3 = a1;
  size_t v4 = [v3 length];
  uint64_t v5 = malloc_type_calloc(v4, 2uLL, 0x1000040BDFB0063uLL);
  if (v4)
  {
    uint64_t v6 = 0;
    char v7 = 0;
    uint64_t v8 = 0;
    while (1)
    {
      int v9 = [v3 characterAtIndex:v6];
      unsigned int v10 = v9;
      if (v9 == 39) {
        break;
      }
      if (!(v7 & 1 | (v9 == a2)))
      {
        if (_UICalendarUnitForFormatCharacter(v9) != 0x7FFFFFFFFFFFFFFFLL)
        {
          char v7 = 0;
          goto LABEL_8;
        }
        char v7 = 0;
        if (v10 <= 0x29 && ((1 << v10) & 0x30000000001) != 0) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
      if (v9) {
        goto LABEL_7;
      }
LABEL_8:
      if (v4 == ++v6) {
        goto LABEL_16;
      }
    }
    v7 ^= 1u;
LABEL_7:
    v5[v8++] = v10;
    goto LABEL_8;
  }
  uint64_t v8 = 0;
LABEL_16:
  double v11 = [NSString stringWithCharacters:v5 length:v8];
  free(v5);
  double v12 = [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
  uint64_t v13 = [v11 stringByTrimmingCharactersInSet:v12];

  return v13;
}

void sub_1864C3FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t _UIViewControllerCompareToViewController(id *a1, id *a2)
{
  id v3 = a1;
  size_t v4 = [a1 _existingView];
  uint64_t v5 = [v4 window];

  uint64_t v6 = [a2 _existingView];
  char v7 = [v6 window];

  if (v3 == a2) {
    goto LABEL_29;
  }
  if (v5 && v7 && v5 != v7)
  {
    if [v5 isHidden] && (objc_msgSend(v7, "isHidden")) {
      goto LABEL_29;
    }
    if ([v7 isHidden])
    {
      uint64_t v8 = 1;
      goto LABEL_40;
    }
    if ([v5 isHidden])
    {
      uint64_t v8 = -1;
      goto LABEL_40;
    }
    [v7 windowLevel];
    double v23 = v22;
    [v5 windowLevel];
    if (v23 == v24)
    {
LABEL_29:
      uint64_t v8 = 0;
      goto LABEL_40;
    }
    [v7 windowLevel];
    double v33 = v32;
    [v5 windowLevel];
    if (v33 <= v34) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = -1;
    }
  }
  else
  {
    int v9 = [MEMORY[0x1E4F1CA48] arrayWithObject:v3];
    -[UIViewController _parentViewController](v3);
    unsigned int v10 = (id *)objc_claimAutoreleasedReturnValue();
    if (v10
      || ([v3 _parentModalViewController], (unsigned int v10 = (id *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      do
      {
        [v9 addObject:v10];
        id v11 = v10[13];
        double v12 = v11;
        if (v11)
        {
          uint64_t v13 = (id *)v11;
        }
        else
        {
          uint64_t v13 = [v10 _parentModalViewController];
        }
        double v14 = v13;

        unsigned int v10 = v14;
      }
      while (v14);
    }
    if ([v9 containsObject:a2])
    {
      uint64_t v8 = 1;
    }
    else
    {
      double v15 = a2;
      uint64_t v8 = -[UIViewController _parentViewController](v15);
      if (v8 || ([v15 _parentModalViewController], (uint64_t v8 = objc_claimAutoreleasedReturnValue()) != 0))
      {
        while (1)
        {
          if ((id *)v8 == v3)
          {
            double v18 = 0;
            uint64_t v8 = -1;
            goto LABEL_38;
          }
          char v16 = [v9 containsObject:v8];
          double v17 = (id *)(id)v8;
          double v18 = v17;
          if (v16) {
            break;
          }

          id v19 = v18[13];
          double v20 = v19;
          if (v19)
          {
            id v21 = v19;
          }
          else
          {
            id v21 = [v18 _parentModalViewController];
          }
          uint64_t v8 = (uint64_t)v21;

          double v15 = v18;
          if (!v8)
          {
            id v3 = 0;
            double v15 = v18;
            goto LABEL_37;
          }
        }
        __int16 v25 = [v17 childModalViewController];

        uint64_t v8 = -1;
        if (v25 != v15)
        {
          int v26 = objc_msgSend(v9, "objectAtIndex:", objc_msgSend(v9, "indexOfObjectIdenticalTo:", v18) - 1);
          __int16 v27 = [v18 childViewControllers];
          unint64_t v28 = [v27 indexOfObjectIdenticalTo:v26];

          double v29 = [v18 childViewControllers];
          unint64_t v30 = [v29 indexOfObjectIdenticalTo:v15];

          if (v30 <= v28) {
            uint64_t v8 = 1;
          }
        }
        id v3 = v18;
      }
      else
      {
        id v3 = 0;
LABEL_37:
        double v18 = 0;
      }
LABEL_38:
    }
  }
LABEL_40:

  return v8;
}

uint64_t _UIEventDeferringBehaviorCompareRuleOwningElementToElement(void *a1, void *a2)
{
  if (!a1 || !a2)
  {
    double v29 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v30 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
    objc_msgSend(v29, "handleFailureInFunction:file:lineNumber:description:", v30, @"_UIEventDeferringBehavior.m", 397, @"%s: Invalid state, an object is missing: r1: %@; r2: %@",
      "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _No"
      "nnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)",
      a1,
      a2);
  }
  if (!_NSIsNSObject() || (_NSIsNSObject() & 1) == 0)
  {
    __int16 v27 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v28 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
    objc_msgSend(v27, "handleFailureInFunction:file:lineNumber:description:", v28, @"_UIEventDeferringBehavior.m", 398, @"%s: Invalid state, an object is not a subclass of NSObject: r1: %@; r2: %@",
      "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _No"
      "nnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)",
      a1,
      a2);
  }
  id v4 = a1;
  id v5 = a2;
  unint64_t v6 = [v4 interfaceElementCategory];
  uint64_t v7 = [v5 interfaceElementCategory];
  if (!(v6 | v7)) {
    goto LABEL_14;
  }
  if (v6 && !v7) {
    goto LABEL_8;
  }
  if (!v6 && v7)
  {
LABEL_11:
    uint64_t v8 = -1;
    goto LABEL_15;
  }
  if (v6 == 1 && v7 == 1)
  {
LABEL_14:
    uint64_t v8 = 0;
    goto LABEL_15;
  }
  if (v6 != 1 || v7 == 1)
  {
    if (v7 == 1 && v6 != 1) {
      goto LABEL_11;
    }
    if (v6 == 2 && v7 == 3)
    {
      if (objc_msgSend(v4, "__isKindOfUIWindow")) {
        unsigned int v10 = v4;
      }
      else {
        unsigned int v10 = 0;
      }
      id v11 = v10;
      if (objc_msgSend(v5, "__isKindOfUIViewController")) {
        double v12 = v5;
      }
      else {
        double v12 = 0;
      }
      uint64_t v13 = v12;
      double v14 = v13;
      if (!v11 || !v13)
      {
        double v31 = [MEMORY[0x1E4F28B00] currentHandler];
        double v32 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
        objc_msgSend(v31, "handleFailureInFunction:file:lineNumber:description:", v32, @"_UIEventDeferringBehavior.m", 454, @"%s: Invalid state. Should be comparing a window and a vc: window1: %p; vc2: %p",
          "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning> "
          " _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)",
          v4,
          v5);
      }
      double v15 = v11;
      char v16 = v14;
      int v17 = 1;
    }
    else
    {
      if (v7 != 2 || v6 != 3)
      {
        if (v6 != 2 || v7 != 2)
        {
          if (v6 != 3 || v7 != 3)
          {
            unint64_t v35 = v7;
            v36 = [MEMORY[0x1E4F28B00] currentHandler];
            v37 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
            v38 = _NSStringFromUIEventDeferringInterfaceElementCategory(v6);
            id v39 = _NSStringFromUIEventDeferringInterfaceElementCategory(v35);
            objc_msgSend(v36, "handleFailureInFunction:file:lineNumber:description:", v37, @"_UIEventDeferringBehavior.m", 477, @"%s: Invalid state. Should be comparing two view controllers: r1: %@; r2: %@",
              "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwni"
              "ng>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)",
              v38,
              v39);
          }
          if (objc_msgSend(v4, "__isKindOfUIViewController")) {
            double v22 = v4;
          }
          else {
            double v22 = 0;
          }
          id v11 = v22;
          if (objc_msgSend(v5, "__isKindOfUIViewController")) {
            double v23 = (id *)v5;
          }
          else {
            double v23 = 0;
          }
          uint64_t v8 = _UIViewControllerCompareToViewController(v11, v23);
          goto LABEL_44;
        }
        if (objc_msgSend(v4, "__isKindOfUIWindow")) {
          double v24 = v4;
        }
        else {
          double v24 = 0;
        }
        id v11 = v24;
        if (objc_msgSend(v5, "__isKindOfUIWindow")) {
          __int16 v25 = v5;
        }
        else {
          __int16 v25 = 0;
        }
        int v26 = v25;
        double v14 = v26;
        if (!v11 || !v26)
        {
          v40 = [MEMORY[0x1E4F28B00] currentHandler];
          v41 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
          objc_msgSend(v40, "handleFailureInFunction:file:lineNumber:description:", v41, @"_UIEventDeferringBehavior.m", 472, @"%s: Invalid state. Should be comparing two valid windows: window1: %p; window2: %p",
            "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning"
            ">  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)",
            v4,
            v5);
        }
        uint64_t v21 = _UIWindowCompareToWindow(v11, v14);
LABEL_43:
        uint64_t v8 = v21;

LABEL_44:
        goto LABEL_15;
      }
      if (objc_msgSend(v4, "__isKindOfUIViewController")) {
        double v18 = v4;
      }
      else {
        double v18 = 0;
      }
      id v11 = v18;
      if (objc_msgSend(v5, "__isKindOfUIWindow")) {
        id v19 = v5;
      }
      else {
        id v19 = 0;
      }
      double v20 = v19;
      double v14 = v20;
      if (!v11 || !v20)
      {
        double v33 = [MEMORY[0x1E4F28B00] currentHandler];
        double v34 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)");
        objc_msgSend(v33, "handleFailureInFunction:file:lineNumber:description:", v34, @"_UIEventDeferringBehavior.m", 464, @"%s: Invalid state. Should be comparing a window and a vc: vc1: %p; window2: %p",
          "NSComparisonResult _UIEventDeferringBehaviorCompareRuleOwningElementToElement(id<_UIEventDeferringRuleOwning> "
          " _Nonnull const __strong, id<_UIEventDeferringRuleOwning>  _Nonnull const __strong)",
          v4,
          v5);
      }
      double v15 = v14;
      char v16 = v11;
      int v17 = 0;
    }
    uint64_t v21 = _UIEventDeferringWindowCompareToViewController(v15, v16, v17, 0);
    goto LABEL_43;
  }
LABEL_8:
  uint64_t v8 = 1;
LABEL_15:

  return v8;
}

uint64_t _UIEventDeferringWindowCompareToViewController(void *a1, void *a2, int a3, int a4)
{
  if (!a1 || !a2)
  {
    double v20 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v21 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringWindowCompareToViewController(UIWindow * _Nonnull const __strong, UIViewController * _Nonnull const __strong, BOOL, BOOL)");
    objc_msgSend(v20, "handleFailureInFunction:file:lineNumber:description:", v21, @"_UIEventDeferringBehavior.m", 259, @"%s: Invalid state. Should be comparing two valid objects: window: %@; vc: %@",
      "NSComparisonResult _UIEventDeferringWindowCompareToViewController(UIWindow * _Nonnull const __strong, UIViewContro"
      "ller * _Nonnull const __strong, BOOL, BOOL)",
      a1,
      a2);
  }
  uint64_t v8 = [a2 _existingView];
  int v9 = [v8 window];

  if (!v9 && ([a1 isHidden] & 1) != 0
    || [v9 isHidden] && (objc_msgSend(a1, "isHidden") & 1) != 0)
  {
    goto LABEL_7;
  }
  if (!v9 && ![a1 isHidden]
    || !a4 && v9 == a1
    || [v9 isHidden])
  {
    BOOL v11 = a3 == 0;
LABEL_14:
    uint64_t v12 = 1;
    goto LABEL_15;
  }
  if (![a1 isHidden])
  {
    if (a4 && v9 == a1 || ([v9 windowLevel], double v15 = v14, objc_msgSend(a1, "windowLevel"), v15 == v16))
    {
LABEL_7:
      uint64_t v10 = 0;
      goto LABEL_18;
    }
    [v9 windowLevel];
    double v18 = v17;
    [a1 windowLevel];
    BOOL v11 = v18 > v19 == a3;
    goto LABEL_14;
  }
  BOOL v11 = a3 == 0;
  uint64_t v12 = -1;
LABEL_15:
  if (v11) {
    uint64_t v10 = -v12;
  }
  else {
    uint64_t v10 = v12;
  }
LABEL_18:

  return v10;
}

uint64_t _UIEventDeferringBehaviorIsElementOccludedByWindow(void *a1, void *a2)
{
  if (!a1 || !a2)
  {
    double v15 = [MEMORY[0x1E4F28B00] currentHandler];
    double v16 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, UIWindow * _Nonnull const __strong)");
    objc_msgSend(v15, "handleFailureInFunction:file:lineNumber:description:", v16, @"_UIEventDeferringBehavior.m", 484, @"%s: Invalid state, an object is missing: ruleOwner: %@; window: %@",
      "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull co"
      "nst __strong, UIWindow * _Nonnull const __strong)",
      a1,
      a2);
  }
  if ((_NSIsNSObject() & 1) == 0)
  {
    double v17 = [MEMORY[0x1E4F28B00] currentHandler];
    double v18 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, UIWindow * _Nonnull const __strong)");
    [v17 handleFailureInFunction:v18, @"_UIEventDeferringBehavior.m", 485, @"%s: Invalid state, ruleOwner is not a subclass of NSObject: ruleOwner: %@", "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, UIWindow * _Nonnull const __strong)", a1 file lineNumber description];
  }
  id v4 = a1;
  unint64_t v5 = [v4 interfaceElementCategory];
  if (v5 >= 2)
  {
    unint64_t v7 = v5;
    if (v5 == 3)
    {
      if (objc_msgSend(v4, "__isKindOfUIViewController")) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = 0;
      }
      id v9 = v8;
      id v10 = a2;
      if (!a2 || !v9)
      {
        double v19 = [MEMORY[0x1E4F28B00] currentHandler];
        double v20 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, UIWindow * _Nonnull const __strong)");
        objc_msgSend(v19, "handleFailureInFunction:file:lineNumber:description:", v20, @"_UIEventDeferringBehavior.m", 508, @"%s: Invalid state. Should be comparing a vc and a window: ruleOwner: %p; window: %p",
          "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnul"
          "l const __strong, UIWindow * _Nonnull const __strong)",
          v4,
          v10);
      }
      uint64_t v11 = _UIEventDeferringWindowCompareToViewController(v10, v9, 0, 1);
    }
    else
    {
      if (v5 != 2)
      {
        uint64_t v21 = [MEMORY[0x1E4F28B00] currentHandler];
        double v22 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, UIWindow * _Nonnull const __strong)");
        double v23 = _NSStringFromUIEventDeferringInterfaceElementCategory(v7);
        [v21 handleFailureInFunction:v22, @"_UIEventDeferringBehavior.m", 514, @"%s: Invalid state. Should be comparing two windows: ruleOwner: %@", "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, UIWindow * _Nonnull const __strong)", v23 file lineNumber description];
      }
      if (objc_msgSend(v4, "__isKindOfUIWindow")) {
        uint64_t v12 = v4;
      }
      else {
        uint64_t v12 = 0;
      }
      id v9 = v12;
      id v13 = a2;
      if (!a2 || !v9)
      {
        double v24 = [MEMORY[0x1E4F28B00] currentHandler];
        __int16 v25 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnull const __strong, UIWindow * _Nonnull const __strong)");
        objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, @"_UIEventDeferringBehavior.m", 517, @"%s: Invalid state. Should be comparing two valid windows: ruleOwner: %p; window: %p",
          "NSComparisonResult _UIEventDeferringBehaviorIsElementOccludedByWindow(id<_UIEventDeferringRuleOwning>  _Nonnul"
          "l const __strong, UIWindow * _Nonnull const __strong)",
          v4,
          v13);
      }
      uint64_t v11 = _UIWindowCompareToWindow(v9, v13);
    }
    uint64_t v6 = v11;
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t _UIEventDeferringBehaviorCarPlayShouldAllowFallbackWindowForEnvironment(void *a1, void *a2)
{
  id v4 = [MEMORY[0x1E4F4F280] keyboardFocusEnvironment];
  uint64_t v5 = [a2 isEqual:v4];

  if (v5)
  {
    uint64_t v6 = [a1 eventDeferringManager];
    unint64_t v7 = [v6 windowHostingScene];

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    id v9 = -[UIWindowScene _keyWindow](v8);

    if (_UIInternalPreferencesRevisionOnce != -1) {
      dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
    }
    int v10 = _UIInternalPreferencesRevisionVar;
    if (_UIInternalPreferencesRevisionVar < 1
      || (int v14 = _UIInternalPreference_AllowCarPlayScenesToCallMakeKeyWindow,
          _UIInternalPreferencesRevisionVar == _UIInternalPreference_AllowCarPlayScenesToCallMakeKeyWindow))
    {
      BOOL v11 = 1;
    }
    else
    {
      do
      {
        BOOL v11 = v10 >= v14;
        if (v10 < v14) {
          break;
        }
        _UIInternalPreferenceSync(v10, &_UIInternalPreference_AllowCarPlayScenesToCallMakeKeyWindow, @"AllowCarPlayScenesToCallMakeKeyWindow", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
        int v14 = _UIInternalPreference_AllowCarPlayScenesToCallMakeKeyWindow;
      }
      while (v10 != _UIInternalPreference_AllowCarPlayScenesToCallMakeKeyWindow);
    }
    if (byte_1E8FD4EE4) {
      unsigned int v12 = v11;
    }
    else {
      unsigned int v12 = 1;
    }
    if (v9) {
      uint64_t v5 = v12;
    }
    else {
      uint64_t v5 = 1;
    }
  }
  return v5;
}

uint64_t _UIDateComponentsEquivalentUnit(uint64_t result)
{
  if (result < 0x2000)
  {
    if (result == 512 || result == 1024)
    {
      return 16;
    }
    else if (result == 4096)
    {
      return 0x2000;
    }
  }
  else if (result >= 0x100000)
  {
    if (result == 0x100000 || result == 0x200000) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  else
  {
    uint64_t v1 = 4;
    if (result != 0x4000) {
      uint64_t v1 = result;
    }
    if (result == 0x2000) {
      return 0x2000;
    }
    else {
      return v1;
    }
  }
  return result;
}

void _UIDateComponentsSetValue(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v8 = v5;
  if (a2 <= 511)
  {
    if (a2 <= 15)
    {
      switch(a2)
      {
        case 2:
          [v5 setEra:a3];
          break;
        case 4:
          [v5 setYear:a3];
          break;
        case 8:
          [v5 setMonth:a3];
          break;
        default:
          goto LABEL_43;
      }
      goto LABEL_42;
    }
    if (a2 > 63)
    {
      if (a2 == 64)
      {
        [v5 setMinute:a3];
      }
      else
      {
        if (a2 != 128) {
          goto LABEL_43;
        }
        [v5 setSecond:a3];
      }
      goto LABEL_42;
    }
    if (a2 != 16)
    {
      if (a2 != 32) {
        goto LABEL_43;
      }
      uint64_t v6 = a3;
      goto LABEL_41;
    }
    [v5 setDay:a3];
LABEL_42:
    id v5 = v8;
    goto LABEL_43;
  }
  if (a2 <= 4095)
  {
    switch(a2)
    {
      case 512:
        [v5 setWeekday:a3];
        break;
      case 1024:
        [v5 setWeekdayOrdinal:a3];
        break;
      case 2048:
        [v5 setQuarter:a3];
        break;
      default:
        goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (a2 < 0x4000)
  {
    if (a2 == 4096)
    {
      [v5 setWeekOfMonth:a3];
    }
    else
    {
      if (a2 != 0x2000) {
        goto LABEL_43;
      }
      [v5 setWeekOfYear:a3];
    }
    goto LABEL_42;
  }
  if (a2 == 0x4000)
  {
    [v5 setYearForWeekOfYear:a3];
    goto LABEL_42;
  }
  if (a2 != 0x10000) {
    goto LABEL_43;
  }
  if (!a3)
  {
    BOOL v7 = [v5 hour] < 12;
    id v5 = v8;
    if (v7) {
      goto LABEL_43;
    }
    uint64_t v6 = [v8 hour] - 12;
    goto LABEL_40;
  }
  if (a3 == 1)
  {
    BOOL v7 = [v5 hour] <= 11;
    id v5 = v8;
    if (v7)
    {
      uint64_t v6 = [v8 hour] + 12;
LABEL_40:
      id v5 = v8;
LABEL_41:
      [v5 setHour:v6];
      goto LABEL_42;
    }
  }
LABEL_43:
}

uint64_t _UIDateComponentsGetValue(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = v3;
  uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  if (a2 > 511)
  {
    if (a2 <= 4095)
    {
      switch(a2)
      {
        case 512:
          uint64_t v6 = [v3 weekday];
          goto LABEL_35;
        case 1024:
          uint64_t v6 = [v3 weekdayOrdinal];
          goto LABEL_35;
        case 2048:
          uint64_t v6 = [v3 quarter];
          goto LABEL_35;
      }
    }
    else if (a2 >= 0x4000)
    {
      if (a2 == 0x4000)
      {
        uint64_t v6 = [v3 yearForWeekOfYear];
        goto LABEL_35;
      }
      if (a2 == 0x10000 && [v3 hour] != 0x7FFFFFFFFFFFFFFFLL) {
        uint64_t v5 = [v4 hour] > 11;
      }
    }
    else
    {
      if (a2 == 4096)
      {
        uint64_t v6 = [v3 weekOfMonth];
        goto LABEL_35;
      }
      if (a2 == 0x2000)
      {
        uint64_t v6 = [v3 weekOfYear];
        goto LABEL_35;
      }
    }
  }
  else if (a2 <= 15)
  {
    switch(a2)
    {
      case 2:
        uint64_t v6 = [v3 era];
        goto LABEL_35;
      case 4:
        uint64_t v6 = [v3 year];
        goto LABEL_35;
      case 8:
        uint64_t v6 = [v3 month];
        goto LABEL_35;
    }
  }
  else if (a2 > 63)
  {
    if (a2 == 64)
    {
      uint64_t v6 = [v3 minute];
      goto LABEL_35;
    }
    if (a2 == 128)
    {
      uint64_t v6 = [v3 second];
      goto LABEL_35;
    }
  }
  else
  {
    if (a2 == 16)
    {
      uint64_t v6 = [v3 day];
      goto LABEL_35;
    }
    if (a2 == 32)
    {
      uint64_t v6 = [v3 hour];
LABEL_35:
      uint64_t v5 = v6;
    }
  }

  return v5;
}

uint64_t _UIDatePickerCompareDateComponents(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  if ((a3 & 2) != 0
    && [v5 era] != 0x7FFFFFFFFFFFFFFFLL
    && [v6 era] != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v7 = [v5 era];
    if (v7 < [v6 era]) {
      goto LABEL_43;
    }
    uint64_t v8 = [v5 era];
    if (v8 > [v6 era]) {
      goto LABEL_45;
    }
  }
  if ((a3 & 4) != 0
    && [v5 year] != 0x7FFFFFFFFFFFFFFFLL
    && [v6 year] != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v18 = [v5 year];
    if (v18 < [v6 year]) {
      goto LABEL_43;
    }
    uint64_t v19 = [v5 year];
    if (v19 > [v6 year]) {
      goto LABEL_45;
    }
  }
  if ((a3 & 8) != 0
    && [v5 month] != 0x7FFFFFFFFFFFFFFFLL
    && [v6 month] != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v20 = [v5 month];
    if (v20 < [v6 month]) {
      goto LABEL_43;
    }
    uint64_t v21 = [v5 month];
    if (v21 > [v6 month]) {
      goto LABEL_45;
    }
  }
  if ((a3 & 0x10) != 0
    && [v5 day] != 0x7FFFFFFFFFFFFFFFLL
    && [v6 day] != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v22 = [v5 day];
    if (v22 < [v6 day]) {
      goto LABEL_43;
    }
    uint64_t v23 = [v5 day];
    if (v23 > [v6 day]) {
      goto LABEL_45;
    }
  }
  if ((a3 & 0x20) != 0
    && [v5 hour] != 0x7FFFFFFFFFFFFFFFLL
    && [v6 hour] != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v9 = [v5 hour];
    if (v9 < [v6 hour]) {
      goto LABEL_43;
    }
    uint64_t v10 = [v5 hour];
    if (v10 > [v6 hour]) {
      goto LABEL_45;
    }
  }
  if ((a3 & 0x40) != 0
    && [v5 minute] != 0x7FFFFFFFFFFFFFFFLL
    && [v6 minute] != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v11 = [v5 minute];
    if (v11 < [v6 minute]) {
      goto LABEL_43;
    }
    uint64_t v12 = [v5 minute];
    if (v12 > [v6 minute]) {
      goto LABEL_45;
    }
  }
  if ((a3 & 0x80) != 0
    && [v5 second] != 0x7FFFFFFFFFFFFFFFLL
    && [v6 second] != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v13 = [v5 second];
    if (v13 < [v6 second]) {
      goto LABEL_43;
    }
    uint64_t v14 = [v5 second];
    if (v14 > [v6 second])
    {
LABEL_45:
      uint64_t v17 = 1;
      goto LABEL_46;
    }
  }
  uint64_t Value = _UIDateComponentsGetValue(v5, 0x10000);
  uint64_t v16 = _UIDateComponentsGetValue(v6, 0x10000);
  if ((a3 & 0x10000) == 0 || Value == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_35;
  }
  if (Value < v16)
  {
LABEL_43:
    uint64_t v17 = -1;
    goto LABEL_46;
  }
  if (Value > v16) {
    goto LABEL_45;
  }
LABEL_35:
  uint64_t v17 = 0;
LABEL_46:

  return v17;
}

uint64_t _UICalendarUnitForFormatCharacter(int a1)
{
  if ((a1 - 69) > 0x35) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    return qword_186B9B738[(__int16)(a1 - 69)];
  }
}

uint64_t _UICalendarUnitIsSupported(uint64_t a1)
{
  uint64_t result = 1;
  if (a1 <= 127)
  {
    unint64_t v3 = a1 - 2;
    if (v3 <= 0x3E && ((1 << v3) & 0x4000000040004045) != 0) {
      return result;
    }
    return 0;
  }
  if (a1 <= 4095)
  {
    if (a1 != 128 && a1 != 512) {
      return 0;
    }
  }
  else if (a1 != 4096 && a1 != 0x2000 && a1 != 0x4000)
  {
    return 0;
  }
  return result;
}

void *_UICopyCalendarUnitsFromFormatString(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = v5;
  if (a3)
  {
    size_t v7 = [v5 length];
    uint64_t v8 = malloc_type_calloc(v7, 8uLL, 0x100004000313F17uLL);
    *a3 = 0;
    if (v7)
    {
      uint64_t v9 = 0;
      char v10 = 0;
      uint64_t v11 = 0;
      do
      {
        int v12 = [v6 characterAtIndex:v9];
        if (v12 == 39)
        {
          v10 ^= 1u;
        }
        else if (v10)
        {
          char v10 = 1;
        }
        else
        {
          uint64_t v13 = _UICalendarUnitForFormatCharacter(v12);
          char v10 = 0;
          if (v13 != 0x7FFFFFFFFFFFFFFFLL && (v13 & a2) != 0 && (v13 & v11) == 0)
          {
            char v10 = 0;
            v8[(*a3)++] = v13;
            v11 |= v13;
          }
        }
        ++v9;
      }
      while (v7 != v9);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

id _UIDatePickerDateFormatFromTemplate(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  if (a3)
  {
    if ([MEMORY[0x1E4F1CA20] _usesTwelveHourClock]) {
      uint64_t v7 = 2;
    }
    else {
      uint64_t v7 = 1;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = [MEMORY[0x1E4F28C10] dateFormatFromTemplate:v5 options:v7 locale:v6];

  return v8;
}

void sub_1864DA284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *_UITraitDataTypeToString(unint64_t a1)
{
  if (a1 >= 5) {
    return (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"Invalid _UITraitDataType (%ld)", a1);
  }
  else {
    return off_1E5301838[a1];
  }
}

void _UIPickerViewCommonInit(void *a1)
{
  v30[3] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  *((unsigned char *)v1 + 512) = 1;
  *((void *)v1 + 65) = dyld_program_sdk_at_least();
  uint64_t v2 = +[UIColor clearColor];
  unint64_t v3 = (void *)*((void *)v1 + 61);
  *((void *)v1 + 61) = v2;

  *((unsigned char *)v1 + 513) = 1;
  [v1 setClipsToBounds:1];
  id v4 = [UIView alloc];
  [v1 bounds];
  uint64_t v5 = -[UIView initWithFrame:](v4, "initWithFrame:");
  id v6 = (void *)*((void *)v1 + 55);
  *((void *)v1 + 55) = v5;

  uint64_t v7 = [MEMORY[0x1E4F39BD0] layer];
  uint64_t v8 = (void *)*((void *)v1 + 56);
  *((void *)v1 + 56) = v7;

  uint64_t v9 = (void *)*((void *)v1 + 56);
  v29[0] = *MEMORY[0x1E4F3A4A8];
  char v10 = [MEMORY[0x1E4F1CA98] null];
  v30[0] = v10;
  v29[1] = @"bounds";
  uint64_t v11 = [MEMORY[0x1E4F1CA98] null];
  v30[1] = v11;
  v29[2] = @"position";
  int v12 = [MEMORY[0x1E4F1CA98] null];
  v30[2] = v12;
  uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v30 forKeys:v29 count:3];
  [v9 setActions:v13];

  uint64_t v14 = (void *)*((void *)v1 + 56);
  double v15 = [MEMORY[0x1E4F39BC0] filterWithType:*MEMORY[0x1E4F3A090]];
  [v14 setCompositingFilter:v15];

  uint64_t v16 = [v1 _style];
  [v16 configureMaskGradientLayer:*((void *)v1 + 56)];

  uint64_t v17 = [UISelectionFeedbackGenerator alloc];
  uint64_t v18 = [*((id *)v1 + 62) selectionFeedbackGeneratorConfiguration];
  uint64_t v19 = [(UIFeedbackGenerator *)v17 initWithConfiguration:v18 view:v1];
  uint64_t v20 = (void *)*((void *)v1 + 66);
  *((void *)v1 + 66) = v19;

  if (dyld_program_sdk_at_least())
  {
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = ___UIPickerViewCommonInit_block_invoke;
    v26[3] = &unk_1E52D9F70;
    id v27 = v1;
    +[UIView _performSystemAppearanceModifications:v26];
  }
  uint64_t v21 = [v1 backgroundColor];

  if (!v21)
  {
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = ___UIPickerViewCommonInit_block_invoke_2;
    v24[3] = &unk_1E52D9F70;
    id v25 = v1;
    +[UIView _performSystemAppearanceModifications:v24];
  }
  if (dyld_program_sdk_at_least())
  {
    v28[0] = 0x1ED3F5A30;
    v28[1] = 0x1ED3F5A90;
    v28[2] = 0x1ED3F5AA8;
    uint64_t v22 = [MEMORY[0x1E4F1C978] arrayWithObjects:v28 count:3];
    id v23 = (id)[v1 _registerForTraitTokenChanges:v22 withTarget:v1 action:sel_invalidateIntrinsicContentSize];
  }
}

void sub_1864E2A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIUpdateInputSetDebugDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a2) {
    uint64_t v2 = mach_absolute_time();
  }
  id v4 = [MEMORY[0x1E4F28E78] stringWithFormat:@"Input Set, alignment=%i, inputListChanged=%i, inputs=%u:", *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(unsigned int *)(a1 + 68)];
  for (uint64_t i = *(void *)(a1 + 72); i; uint64_t i = *(void *)(i + 56))
  {
    id v6 = _UIUpdateInputDebugDescription((unsigned int *)i, v2);
    uint64_t v7 = _UIUpdateDebugDescriptionIndented(v6, @"\n  - ", @"    ");
    [v4 appendString:v7];
  }
  uint64_t v8 = _UIUpdateInputAggregateCacheDebugDescription((unsigned int *)(a1 + 8), v2);
  uint64_t v9 = _UIUpdateDebugDescriptionIndented(v8, @"\n  ", @"  ");
  [v4 appendString:v9];

  return v4;
}

void BUG_IN_CLIENT_OF_DIFFABLE_DATA_SOURCE__DUPLICATE_ITEM_IDENTIFIERS_IN_SECTION_SNAPSHOT(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [a1 set];
  uint64_t v5 = (void *)[v4 mutableCopy];

  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA70]);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = v3;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        if ([v5 containsObject:v12]) {
          uint64_t v13 = v6;
        }
        else {
          uint64_t v13 = v5;
        }
        [v13 addObject:v12];
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v9);
  }

  uint64_t v14 = [MEMORY[0x1E4F28B00] currentHandler];
  double v15 = objc_msgSend(NSString, "stringWithUTF8String:", "void BUG_IN_CLIENT_OF_DIFFABLE_DATA_SOURCE__DUPLICATE_ITEM_IDENTIFIERS_IN_SECTION_SNAPSHOT(NSOrderedSet *__strong, NSArray *__strong)");
  [v14 handleFailureInFunction:v15, @"NSDiffableDataSourceSectionSnapshot.m", 24, @"Identifiers in a section snapshot must be unique. Duplicate item identifiers: %@", v6 file lineNumber description];
}

void sub_1864EC394(_Unwind_Exception *a1)
{
}

Class __getTUIPredictionViewClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25CF18)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __TextInputUILibraryCore_block_invoke_16;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E5301AA0;
    uint64_t v8 = 0;
    qword_1EB25CF18 = _sl_dlopen();
  }
  if (!qword_1EB25CF18)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIKBMultilingualKeyboardIntroductionView.m", 40, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUIPredictionView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getTUIPredictionViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKBMultilingualKeyboardIntroductionView.m", 41, @"Unable to find class %s", "TUIPredictionView");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_3_19 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_16()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25CF18 = result;
  return result;
}

id _UIStatusBarGetLowestPrioritizedItem(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = 0;
    uint64_t v5 = *(void *)v14;
    uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v1);
        }
        uint64_t v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v9 = [v8 priority];
        if (v9 < v6)
        {
          uint64_t v10 = v9;
          id v11 = v8;

          id v4 = v11;
          uint64_t v6 = v10;
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v3);
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id _UIStatusBarGetPriorityComparator()
{
  if (_UIStatusBarGetPriorityComparator_onceToken != -1) {
    dispatch_once(&_UIStatusBarGetPriorityComparator_onceToken, &__block_literal_global_444);
  }
  id v0 = _Block_copy((const void *)_UIStatusBarGetPriorityComparator_priorityComparator);
  return v0;
}

uint64_t _UIFocusEffectIsSystemDefaultVisible(void *a1)
{
  id v1 = _UIFocusEnvironmentContainingView(a1);
  uint64_t v2 = [v1 _window];

  if (!v2)
  {
    if (os_variant_has_internal_diagnostics())
    {
      uint64_t v9 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v9, OS_LOG_TYPE_FAULT, "Trying to apply an effect to an item that is no longer associated with a window.", buf, 2u);
      }
    }
    else
    {
      uint64_t v8 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UIFocusEffectIsSystemDefaultVisible___s_category) + 8);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "Trying to apply an effect to an item that is no longer associated with a window.", v10, 2u);
      }
    }
  }
  uint64_t v3 = [v1 _window];

  if (v3)
  {
    id v4 = [v1 _focusBehavior];
    uint64_t v5 = [v4 focusRingVisibility];

    if (v5) {
      BOOL v6 = v5 == 3;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v3 = !v6;
  }

  return v3;
}

id _prefixForItem(int a1, int a2, void *a3)
{
  id v5 = a3;
  if (!v5)
  {
    uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "NSString * _Nonnull _prefixForItem(BOOL, BOOL, _UIDebugLogNodeTreeStyle * _Nonnull __strong)");
    [v9 handleFailureInFunction:v10, @"_UIDebugLogTree.m", 203, @"Invalid parameter not satisfying: %@", @"treeStyle != nil" file lineNumber description];
  }
  if (a1)
  {
    if (a2) {
      [v5 node];
    }
    else {
      [v5 lastNode];
    }
  }
  else if (a2)
  {
    [v5 intermediate];
  }
  else
  {
    [v5 trailing];
  uint64_t v6 = };
  long long v7 = (void *)v6;

  return v7;
}

uint64_t stateMachineSpec_block_invoke_4_5(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_didTransitionToDismissingFromState:");
}

uint64_t stateMachineSpec_block_invoke_5_4(uint64_t a1, uint64_t a2)
{
  return [*(id *)a2 _didTransitionToPossibleEndingTransition:*(unsigned __int8 *)(a2 + 8)];
}

void sub_1864F2EB0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 112));
  objc_destroyWeak((id *)(v6 - 104));
  _Unwind_Resume(a1);
}

void sub_1864F3238(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1864F6B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864F6CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1864F6FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t numberOfItemsForWidth(void *a1, double a2, double a3)
{
  id v5 = a1;
  if ([v5 count])
  {
    uint64_t v6 = 0;
    double v7 = a3 * 0.9;
    while (1)
    {
      uint64_t v8 = [v5 objectAtIndexedSubscript:v6];
      uint64_t v9 = v8;
      if (v8) {
        [v8 doubleValue];
      }
      else {
        double v10 = 0.0;
      }
      double v11 = v7 * v10;

      if (v11 >= a2) {
        break;
      }
      if (++v6 >= (unint64_t)[v5 count]) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v6 = [v5 count];
  }

  return v6;
}

void scaleForWidth(void *a1)
{
  id v1 = [a1 lastObject];
  uint64_t v2 = v1;
  if (v1) {
    [v1 doubleValue];
  }
}

void _UIStatusBarDynamicSplitPerformBaseAnimation(void *a1, int a2, char a3, int a4, void *a5, double a6, double a7, double a8)
{
  id v15 = a1;
  long long v16 = (void *)MEMORY[0x1E4F39B48];
  id v17 = a5;
  uint64_t v18 = [v16 animationWithKeyPath:@"filters.gaussianBlur.inputRadius"];
  long long v19 = v18;
  if (a2)
  {
    uint64_t v20 = [v15 view];
    uint64_t v21 = [v20 layer];
    uint64_t v22 = [v21 presentationLayer];
    id v23 = [v22 valueForKeyPath:@"filters.gaussianBlur.inputRadius"];

    if (v23) {
      double v24 = v23;
    }
    else {
      double v24 = &unk_1ED3F22C8;
    }
    [v19 setFromValue:v24];
    [v19 setToValue:&unk_1ED3F22D8];
  }
  else
  {
    [v18 setFromValue:&unk_1ED3F22D8];
    [v19 setToValue:&unk_1ED3F22C8];
  }
  [v19 setDuration:a7];
  id v25 = [MEMORY[0x1E4F39C10] functionWithName:*MEMORY[0x1E4F3A490]];
  [v19 setTimingFunction:v25];

  [v19 setBeginTimeMode:@"relative"];
  [v19 setBeginTime:a8];
  int v26 = [v15 view];
  id v27 = [v26 layer];
  [v27 addAnimation:v19 forKey:@"blur"];

  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___UIStatusBarDynamicSplitPerformBaseAnimation_block_invoke;
  v30[3] = &unk_1E52E8A30;
  if (a4) {
    uint64_t v28 = 4;
  }
  else {
    uint64_t v28 = 0;
  }
  char v33 = a2;
  char v34 = a3;
  id v31 = v15;
  double v32 = a6;
  id v29 = v15;
  +[UIView animateWithDuration:v28 delay:v30 options:v17 animations:a7 completion:a8];
}

void sub_1864FAB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id location)
{
  objc_destroyWeak(v44);
  objc_destroyWeak(v45);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _avoidanceFrameInLocalCoordinateSpace(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 statusBar];
  uint64_t v3 = [v1 statusBar];

  [v3 avoidanceFrame];
  double v5 = v4;
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  CGFloat v11 = v10;

  memset(&v15, 0, sizeof(v15));
  if (v2) {
    [v2 _effectiveScaleTransform];
  }
  CGAffineTransform v14 = v15;
  if (!CGAffineTransformIsIdentity(&v14))
  {
    CGAffineTransform v13 = v15;
    CGAffineTransformInvert(&v14, &v13);
    CGAffineTransform v15 = v14;
    v16.origin.x = v5;
    v16.origin.y = v7;
    v16.size.width = v9;
    v16.size.height = v11;
    *(void *)&double v5 = (unint64_t)CGRectApplyAffineTransform(v16, &v14);
  }

  return v5;
}

id _UIStatusBarDynamicSplitDefaultAnimation(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3032000000;
  v17[3] = __Block_byref_object_copy__163;
  v17[4] = __Block_byref_object_dispose__163;
  id v18 = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x4010000000;
  v14[3] = &unk_186D7DBA7;
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  long long v15 = *MEMORY[0x1E4F1DB28];
  long long v16 = v5;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = ___UIStatusBarDynamicSplitDefaultAnimation_block_invoke;
  v13[3] = &unk_1E5301EA0;
  void v13[4] = v17;
  v13[5] = v14;
  double v6 = +[_UIStatusBarAnimation animationWithBlock:v13];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = ___UIStatusBarDynamicSplitDefaultAnimation_block_invoke_2;
  v12[3] = &unk_1E5301EC8;
  void v12[4] = v14;
  [v6 setPrepareBlock:v12];
  [v6 setDelaysAnimatingItems:1];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = ___UIStatusBarDynamicSplitDefaultAnimation_block_invoke_3;
  v11[3] = &unk_1E5301EF0;
  v11[4] = v17;
  _UIStatusBarAddDefaultAnimationReposition(v3, v6, v4, v11);
  CGFloat v7 = (void *)MEMORY[0x1E4F1CAD0];
  double v8 = [v3 orderedDisplayItemPlacementsInRegionWithIdentifier:0x1ED168B00];
  CGFloat v9 = [v7 setWithArray:v8];
  [v6 setDelayedDisplayItemPlacements:v9];

  [v6 setPriority:-100];
  _Block_object_dispose(v14, 8);
  _Block_object_dispose(v17, 8);

  return v6;
}

void sub_1864FB418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1864FDDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __ASSERT_UNTRACKED_SESSION__(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1 trackedSessions];
  char v5 = [v4 containsObject:v3];

  if ((v5 & 1) == 0)
  {
    id v7 = [MEMORY[0x1E4F28B00] currentHandler];
    double v6 = objc_msgSend(NSString, "stringWithUTF8String:", "void __ASSERT_UNTRACKED_SESSION__(_UINavigationBarTitleRenamer * _Nonnull __strong, _UINavigationBarTitleRenamerSession * _Nonnull __strong)");
    [v7 handleFailureInFunction:v6 file:@"_UINavigationBarTitleRenamer.m" lineNumber:79 description:@"Renamer received a callback from a session not attached to this renamer."];
  }
}

unsigned char *_UIUpdateLinkMakeTrackingScene(void *a1)
{
  if (!a1)
  {
    id v7 = [MEMORY[0x1E4F28B00] currentHandler];
    double v8 = [NSString stringWithUTF8String:"UIUpdateLink * _Nonnull _UIUpdateLinkMakeTrackingScene(UIScene *const  _Nonnull const __strong)"];
    [v7 handleFailureInFunction:v8 file:@"_UIUpdateLinkTracking.m" lineNumber:391 description:@"UIUpdateLink requires a non-null scene."];
  }
  self;
  uint64_t v2 = -[_UIUpdateLinkTrackingScene _initWithScene:]([_UIUpdateLinkTrackingScene alloc], a1);
  id v3 = v2;
  if (v2)
  {
    int v4 = [v2 _canEngage];
    if (v3[48] != v4)
    {
      v3[48] = v4;
      if (v3[50]) {
        int v5 = v4;
      }
      else {
        int v5 = 0;
      }
      -[UIUpdateLink _setActive:]((uint64_t)v3, v5);
    }
  }
  return v3;
}

_UIUpdateLinkTrackingWindow *_UIUpdateLinkMakeTrackingView(void *a1)
{
  if (!a1)
  {
    double v10 = [MEMORY[0x1E4F28B00] currentHandler];
    CGFloat v11 = [NSString stringWithUTF8String:"UIUpdateLink * _Nonnull _UIUpdateLinkMakeTrackingView(UIView *const  _Nonnull const __strong)"];
    [v10 handleFailureInFunction:v11 file:@"_UIUpdateLinkTracking.m" lineNumber:397 description:@"UIUpdateLink requires a non-null view."];
  }
  if (!objc_msgSend(a1, "__isKindOfUIWindow"))
  {
    self;
    uint64_t v2 = (_UIUpdateLinkTrackingWindow *)-[UIUpdateLink _init]([_UIUpdateLinkTrackingView alloc]);
    id v7 = [_UIUpdateLinkViewInteraction alloc];
    if (v7)
    {
      v12.receiver = v7;
      v12.super_class = (Class)_UIUpdateLinkViewInteraction;
      id v8 = objc_msgSendSuper2(&v12, sel_init);
      id v3 = v8;
      if (v8) {
        *((void *)v8 + 2) = v2;
      }
    }
    else
    {
      id v3 = 0;
    }
    *(void *)&v2->super._sceneForeground = v3;
    [a1 addInteraction:v3];
LABEL_15:

    goto LABEL_16;
  }
  self;
  uint64_t v2 = [_UIUpdateLinkTrackingWindow alloc];
  if (!v2) {
    goto LABEL_16;
  }
  id v3 = [a1 _windowHostingScene];
  int v4 = (_UIUpdateLinkTrackingWindow *)-[_UIUpdateLinkTrackingScene _initWithScene:](v2, v3);
  uint64_t v2 = v4;
  if (!v4) {
    goto LABEL_15;
  }
  -[_UIUpdateLinkTrackingWindow _switchWindowFrom:to:]((uint64_t)v4, 0, a1);
  uint64_t v2 = v2;

  BOOL v5 = [(_UIUpdateLinkTrackingWindow *)v2 _canEngage];
  if (v2->super.super.super._engaged != v5)
  {
    v2->super.super.super._engaged = v5;
    int v6 = v2->super.super.super._enabled && v5;
    -[UIUpdateLink _setActive:]((uint64_t)v2, v6);
  }
LABEL_16:
  return v2;
}

void sub_186502258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *_UIApplicationDeactivationReasonDescription(int a1)
{
  if ((a1 + 1) > 0x1F) {
    return @"unknown";
  }
  else {
    return off_1E5303090[a1 + 1];
  }
}

uint64_t _UIAppStatusBarOrientation()
{
  uint64_t result = __SplashBoardOverrideStatusBarOrientation;
  if (!__SplashBoardOverrideStatusBarOrientation) {
    return [(id)UIApp _safeInterfaceOrientationForNoWindow];
  }
  return result;
}

void _UIAppStatusBarHeightForWindow(void *a1)
{
  if (*(double *)&__SplashBoardOverrideStatusBarHeight == 1.79769313e308)
  {
    id v1 = __UIStatusBarManagerForWindow(a1);
    [v1 statusBarHeight];
  }
}

void _UIAppStatusBarDefaultHeight()
{
  if (UIApp)
  {
    id v0 = [(id)UIApp _findUISceneForLegacyInterfaceOrientation];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v1 = [v0 statusBarManager];
      [v1 defaultStatusBarHeightInOrientation:1];

      return;
    }
  }
  +[UIStatusBar_Base heightForStyle:0 orientation:1 inWindow:0];
}

double _UIAppStatusBarDefaultDoubleHeight()
{
  return 0.0;
}

uint64_t _UIAppSetStatusBarOrientation(uint64_t result)
{
  __SplashBoardOverrideStatusBarOrientation = result;
  return result;
}

void _UIAppSetStatusBarHeight(double a1)
{
  __SplashBoardOverrideStatusBarHeight = *(void *)&a1;
}

double UIInterfaceGetContentDisabledAlpha()
{
  return 0.4;
}

void _UIApplicationPerformWithViewServiceFallbackOrientationResolver(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = (id)_viewServiceFallbackOrientationMapResolver;
  BOOL v5 = (void *)_viewServiceFallbackOrientationMapResolver;
  _viewServiceFallbackOrientationMapResolver = (uint64_t)v3;
  id v8 = v3;
  int v6 = a2;

  v6[2](v6);
  id v7 = (void *)_viewServiceFallbackOrientationMapResolver;
  _viewServiceFallbackOrientationMapResolver = (uint64_t)v4;
}

void getPGPictureInPictureProxyPictureInPictureActiveChangedNotification()
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  id v0 = (void **)getPGPictureInPictureProxyPictureInPictureActiveChangedNotificationSymbolLoc_ptr;
  uint64_t v9 = getPGPictureInPictureProxyPictureInPictureActiveChangedNotificationSymbolLoc_ptr;
  if (!getPGPictureInPictureProxyPictureInPictureActiveChangedNotificationSymbolLoc_ptr)
  {
    id v1 = PegasusLibrary();
    v7[3] = (uint64_t)dlsym(v1, "PGPictureInPictureProxyPictureInPictureActiveChangedNotification");
    getPGPictureInPictureProxyPictureInPictureActiveChangedNotificationSymbolLoc_ptr = v7[3];
    id v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    id v4 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v5 = [NSString stringWithUTF8String:"NSString *getPGPictureInPictureProxyPictureInPictureActiveChangedNotification(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIApplication.m", 7626, @"%s", dlerror());

    __break(1u);
  }
}

void sub_186503D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1865047F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
}

BOOL _UIApplicationFlushRunLoopCATransactionIfTooLate(void *a1)
{
  double v2 = CFAbsoluteTimeGetCurrent() - *(double *)&__UIApplicationLastCAFlushTime;
  if (v2 > 0.0666666667)
  {
    id v3 = (void *)MEMORY[0x18C108260]();
    [MEMORY[0x1E4F39CF8] flush];
    _cleanUpAfterCAFlushAndRunDeferredBlocks(a1, 0);
  }
  return v2 > 0.0666666667;
}

void _UIApplicationAssertForExtensionType(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (qword_1EB25B5B8 != -1) {
    dispatch_once(&qword_1EB25B5B8, &__block_literal_global_1234);
  }
  if (byte_1EB25B4E3)
  {
    if (qword_1EB25B5D8 != -1) {
      dispatch_once(&qword_1EB25B5D8, &__block_literal_global_1249_1);
    }
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v2 = v1;
    uint64_t v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v15;
      unint64_t v6 = 0x1E4F28000uLL;
      unint64_t v7 = 0x1E4F29000uLL;
      uint64_t v8 = "void _UIApplicationAssertForExtensionType(NSArray *__strong)";
      do
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v15 != v5) {
            objc_enumerationMutation(v2);
          }
          if ([(id)qword_1EB25B5D0 isEqualToString:*(void *)(*((void *)&v14 + 1) + 8 * i)])
          {
            double v10 = [*(id *)(v6 + 2816) currentHandler];
            [*(id *)(v7 + 24) stringWithUTF8String:v8];
            CGFloat v11 = v8;
            v13 = unint64_t v12 = v7;
            [v10 handleFailureInFunction:v13, @"UIApplication.m", 3497, @"Feature not available in extensions of type %@", qword_1EB25B5D0 file lineNumber description];

            unint64_t v7 = v12;
            uint64_t v8 = v11;

            unint64_t v6 = 0x1E4F28000;
          }
        }
        uint64_t v4 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v4);
    }
  }
}

uint64_t _UIApplicationIsKeyboardMediaService()
{
  if (qword_1EB25B5E8 != -1) {
    dispatch_once(&qword_1EB25B5E8, &__block_literal_global_1257);
  }
  return byte_1EB25B4E6;
}

uint64_t _UIApplicationIsPasswordManagerExtension()
{
  if (qword_1EB25B608 != -1) {
    dispatch_once(&qword_1EB25B608, &__block_literal_global_1268);
  }
  return byte_1EB25B4EA;
}

uint64_t _UIApplicationProcessIsPointerUI()
{
  if (qword_1EB25B648 != -1) {
    dispatch_once(&qword_1EB25B648, &__block_literal_global_1305_0);
  }
  return byte_1EB25B4F2;
}

uint64_t _UIApplicationProcessIsDruid()
{
  if (qword_1EB25B650 != -1) {
    dispatch_once(&qword_1EB25B650, &__block_literal_global_1310);
  }
  return byte_1EB25B4F3;
}

uint64_t _UIApplicationProcessIsUIKitester()
{
  if (qword_1EB25B658 != -1) {
    dispatch_once(&qword_1EB25B658, &__block_literal_global_1315_0);
  }
  return byte_1EB25B4F4;
}

uint64_t _UIApplicationProcessIsControlCenterHostApp()
{
  if (qword_1EB25B668 != -1) {
    dispatch_once(&qword_1EB25B668, &__block_literal_global_1325_0);
  }
  return byte_1EB25B4F6;
}

void _alertItemStateChanged()
{
  if (pthread_main_np() == 1)
  {
    id v0 = (void *)UIApp;
    [v0 _alertItemStateChanged];
  }
  else
  {
    id v1 = MEMORY[0x1E4F14428];
    dispatch_async(v1, &__block_literal_global_3808);
  }
}

void _significantTimeChange()
{
  if (pthread_main_np() == 1)
  {
    ___significantTimeChange_block_invoke();
  }
  else
  {
    id v0 = MEMORY[0x1E4F14428];
    dispatch_async(v0, &__block_literal_global_3810);
  }
}

void _languageChanged()
{
  if (pthread_main_np() == 1)
  {
    ___languageChanged_block_invoke();
  }
  else
  {
    id v0 = MEMORY[0x1E4F14428];
    dispatch_async(v0, &__block_literal_global_3813);
  }
}

void _localeWillChange()
{
  if (pthread_main_np() == 1)
  {
    ___localeWillChange_block_invoke();
  }
  else
  {
    id v0 = MEMORY[0x1E4F14428];
    dispatch_async(v0, &__block_literal_global_3815);
  }
}

void _localeChanged()
{
  if (pthread_main_np() == 1)
  {
    ___localeChanged_block_invoke();
  }
  else
  {
    id v0 = MEMORY[0x1E4F14428];
    dispatch_async(v0, &__block_literal_global_3817);
  }
}

void _keybagLockStatusChanged(uint64_t a1, uint64_t a2)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___keybagLockStatusChanged_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  void aBlock[4] = a2;
  id v2 = (void (**)(void))_Block_copy(aBlock);
  if (pthread_main_np() == 1) {
    v2[2](v2);
  }
  else {
    dispatch_async(MEMORY[0x1E4F14428], v2);
  }
}

void _UIApplicationLoadWebKit()
{
  if (_UIApplicationLoadWebKit_onceToken != -1) {
    dispatch_once(&_UIApplicationLoadWebKit_onceToken, &__block_literal_global_1496_0);
  }
}

BOOL _UIApplicationIsWebKitLoaded()
{
  return WebKitFramework != 0;
}

uint64_t _UIAppEffectiveUserInterfaceStyle()
{
  return [(id)UIApp _systemUserInterfaceStyle];
}

uint64_t _UIAppSetEffectiveUserInterfaceStyle(uint64_t a1)
{
  return [(id)UIApp _setSystemUserInterfaceStyle:a1];
}

void sub_18650A2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _FBSSceneForPressesEvent(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [a1 anyObject];
  uint64_t v5 = [v4 window];
  unint64_t v6 = [v5 windowScene];
  unint64_t v7 = [v6 _FBSScene];

  if (!v7)
  {
    uint64_t v8 = [v3 _screen];
    uint64_t v9 = [v8 displayIdentity];
    unint64_t v7 = __UIApplicationFirstSceneMatchingDisplayIdentityAssertingUISceneLifecycle(v9, 0);
  }
  return v7;
}

void _logApplicationLifecycleMemoryMetricApplicationWillBeSuspended()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  id v0 = _applicationLifecycleMemoryMetricLogHandle();
  if (os_signpost_enabled(v0))
  {
    int v1 = 138543362;
    id v2 = _MXSignpostMetricsSnapshot();
    _os_signpost_emit_with_name_impl(&dword_1853B0000, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ApplicationWillBeSuspended", "\n%{public, signpost:metrics}@", (uint8_t *)&v1, 0xCu);
  }
}

id getPGPictureInPictureProxyClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getPGPictureInPictureProxyClass_softClass;
  uint64_t v7 = getPGPictureInPictureProxyClass_softClass;
  if (!getPGPictureInPictureProxyClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getPGPictureInPictureProxyClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getPGPictureInPictureProxyClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18650B388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _annotationValueToReportToDelegateForPayload(void *a1)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  id v1 = [a1 valueForKey:@"UIApplicationLaunchOptionsAnnotationKey"];
  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    if (v1)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v2 = v1;
        uint64_t v3 = [v2 valueForKey:@"UIApplicationOpenURLOptionsAnnotationKey"];

        id v1 = v2;
        if (!v3)
        {
          uint64_t v6 = @"UIApplicationOpenURLOptionsAnnotationKey";
          v7[0] = v2;
          id v1 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:&v6 count:1];
        }
      }
    }
  }
  id v4 = v1;

  return v4;
}

void _UIApplicationResolveURLUsingModalProgressControllerForNonOpenInPlaceBookmarkableString(void *a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (!v6)
  {
    if (os_variant_has_internal_diagnostics())
    {
      id v23 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v23, OS_LOG_TYPE_FAULT, "Attempted to resolve a URL with a nil scene", buf, 2u);
      }
    }
    else
    {
      uint64_t v20 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25B780) + 8);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1853B0000, v20, OS_LOG_TYPE_ERROR, "Attempted to resolve a URL with a nil scene", buf, 2u);
      }
    }
  }
  uint64_t v8 = +[_UIApplicationModalProgressController sharedInstance];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = v6;
    uint64_t v10 = +[_UIApplicationModalProgressController instanceForScene:v9];

    CGFloat v11 = [v9 traitCollection];
    uint64_t v12 = [v11 userInterfaceIdiom];

    if (v12 == 6)
    {
      CGAffineTransform v13 = [v9 keyWindow];
      long long v14 = [v13 rootViewController];
    }
    else
    {
      long long v14 = 0;
    }

    uint64_t v8 = (void *)v10;
  }
  else
  {
    long long v14 = 0;
  }
  long long v15 = objc_msgSend(MEMORY[0x1E4F1CB10], "ui_URLFromExportBookmark:", v5);
  if (os_variant_has_internal_diagnostics())
  {
    if (v15) {
      goto LABEL_10;
    }
    uint64_t v21 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v29 = v5;
      _os_log_fault_impl(&dword_1853B0000, v21, OS_LOG_TYPE_FAULT, "Could not resolve URL for import bookmark %@", buf, 0xCu);
    }
  }
  else
  {
    if (v15)
    {
LABEL_10:
      [v15 startAccessingSecurityScopedResource];
      long long v16 = objc_msgSend(MEMORY[0x1E4F1CB10], "ui_incomingDirectory:", 1);
      long long v17 = [v15 lastPathComponent];
      id v18 = [v16 URLByAppendingPathComponent:v17];

      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 3221225472;
      v24[2] = ___UIApplicationResolveURLUsingModalProgressControllerForNonOpenInPlaceBookmarkableString_block_invoke;
      v24[3] = &unk_1E52EBD50;
      id v25 = v15;
      id v26 = v18;
      id v27 = v7;
      id v19 = v18;
      [v8 displayForCopyingFileAtURL:v25 toURL:v19 sourceViewController:v14 completionHandler:v24];

      goto LABEL_11;
    }
    uint64_t v22 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25B788) + 8);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v29 = v5;
      _os_log_impl(&dword_1853B0000, v22, OS_LOG_TYPE_ERROR, "Could not resolve URL for import bookmark %@", buf, 0xCu);
    }
  }
LABEL_11:
}

void sub_18650D00C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_18650D848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18650DAE4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18650DC9C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18650DF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void softlink_SBSSpringBoardServerPort()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  id v0 = (void (*)(void))getSBSSpringBoardServerPortSymbolLoc_ptr;
  id v7 = getSBSSpringBoardServerPortSymbolLoc_ptr;
  if (!getSBSSpringBoardServerPortSymbolLoc_ptr)
  {
    uint64_t v1 = SpringBoardServicesLibrary_1();
    v5[3] = (uint64_t)dlsym(v1, "SBSSpringBoardServerPort");
    getSBSSpringBoardServerPortSymbolLoc_ptr = (_UNKNOWN *)v5[3];
    id v0 = (void (*)(void))v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
  {
    v0();
  }
  else
  {
    id v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"mach_port_t softlink_SBSSpringBoardServerPort(void)"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIApplication.m", 481, @"%s", dlerror());

    __break(1u);
  }
}

void sub_18650E0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18650F2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_18650FE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1865101E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1865105D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __UIApplicationFirstSceneMatchingDisplayIdentityAssertingUISceneLifecycle(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (os_variant_has_internal_diagnostics()) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && [(id)UIApp _appAdoptsUISceneLifecycle])
  {
    if (os_variant_has_internal_diagnostics())
    {
      uint64_t v10 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "FBSScene *__UIApplicationFirstSceneMatchingDisplayIdentityAssertingUISceneLifecy"
                                        "cle(FBSDisplayIdentity *__strong, BOOL)";
        _os_log_fault_impl(&dword_1853B0000, v10, OS_LOG_TYPE_FAULT, "Error in UIKit client: %s should not be called if the client adopts UIScene lifecycle as it will return unexpected results.", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      id v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25B980) + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "FBSScene *__UIApplicationFirstSceneMatchingDisplayIdentityAssertingUISceneLifecy"
                                        "cle(FBSDisplayIdentity *__strong, BOOL)";
        _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, "Error in UIKit client: %s should not be called if the client adopts UIScene lifecycle as it will return unexpected results.", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v15 = 0x3032000000;
  long long v16 = __Block_byref_object_copy__164;
  long long v17 = __Block_byref_object_dispose__164;
  id v18 = 0;
  id v5 = (void *)qword_1EB25B580;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = ____UIApplicationFirstSceneMatchingDisplayIdentityAssertingUISceneLifecycle_block_invoke;
  v11[3] = &unk_1E5302BA0;
  id v6 = v3;
  id v12 = v6;
  p_long long buf = &buf;
  [v5 enumerateObjectsUsingBlock:v11];
  id v7 = *(id *)(*((void *)&buf + 1) + 40);

  _Block_object_dispose(&buf, 8);
  return v7;
}

void sub_186513584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _UIApplicationPressEventConformsToType(uint64_t a1, uint64_t a2)
{
  int Type = IOHIDEventGetType();
  if (Type == 3)
  {
    if (_UIEventHIDPressTypeForKeyboardHIDEvent() == -1) {
      return 0;
    }
    return _UIEventHIDPressTypeForKeyboardHIDEvent() == a2;
  }
  if (Type != 29)
  {
    if (Type != 17) {
      return 0;
    }
    id v5 = _UIEventHIDUIScreenForHIDEvent(a1);
    uint64_t v6 = [v5 _userInterfaceIdiom];

    if (v6 != 3) {
      return 0;
    }
    return _UIEventHIDPressTypeForKeyboardHIDEvent() == a2;
  }
  Integeruint64_t Value = IOHIDEventGetIntegerValue();
  BOOL result = 0;
  if (IntegerValue && IntegerValue != 3) {
    return _UIEventHIDPressTypeForKeyboardHIDEvent() == a2;
  }
  return result;
}

id getSDRDiagnosticReporterClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1EB25B988;
  uint64_t v7 = qword_1EB25B988;
  if (!qword_1EB25B988)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSDRDiagnosticReporterClass_block_invoke_1;
    v3[3] = &unk_1E52D9900;
    v3[4] = &v4;
    __getSDRDiagnosticReporterClass_block_invoke_1((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186515F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _SetUIAnimationDragCoefficient(float a1)
{
}

void _UISetUIAnimationDragCoefficient(double a1)
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    qword_1EB257828 = *(void *)&a1;
    dword_1EB257820 = 0x7FFFFFFF;
    if (&_UIInternalPreferencesListener___COUNTER__ != &__PhotoLibraryFrameworkHandle)
    {
      id v2 = &_UIInternalPreferencesListener___COUNTER__;
      do
      {
        uint64_t v3 = *v2++;
        (*(void (**)(void))(v3 + 16))();
      }
      while (v2 != &__PhotoLibraryFrameworkHandle);
    }
  }
}

void _ResetUIAnimationDragCoefficient()
{
}

void _setNextWakeDate()
{
  if (*(double *)&qword_1EB25B830 == -1.0)
  {
    double v0 = *MEMORY[0x1E4FB34C8];
  }
  else
  {
    if (*(double *)&qword_1EB25B830 <= 0.0) {
      objc_msgSend(MEMORY[0x1E4F1C9C8], "distantPast", *(double *)&qword_1EB25B830);
    }
    else {
    id v1 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceNow:*(double *)&qword_1EB25B830];
    }
    [v1 timeIntervalSinceReferenceDate];
    double v0 = v2;
  }
  uint64_t v3 = *(void **)(UIApp + 392);
  id v4 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v0];
  [v3 _setNextWakeDate:v4];
}

void _appleKeyboardsPreferencesChanged()
{
  if (pthread_main_np() != 1)
  {
    double v0 = MEMORY[0x1E4F14428];
    dispatch_async(v0, &__block_literal_global_3832);
  }
}

void _backgroundRefreshStatusDidChange(uint64_t a1, uint64_t a2)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___backgroundRefreshStatusDidChange_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  void aBlock[4] = a2;
  double v2 = (void (**)(void))_Block_copy(aBlock);
  if (pthread_main_np() == 1) {
    v2[2](v2);
  }
  else {
    dispatch_async(MEMORY[0x1E4F14428], v2);
  }
}

void __MRMediaRemoteSetCanBeNowPlayingApplication(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  double v2 = (void (*)(uint64_t))getMRMediaRemoteSetCanBeNowPlayingApplicationSymbolLoc_ptr;
  id v9 = getMRMediaRemoteSetCanBeNowPlayingApplicationSymbolLoc_ptr;
  if (!getMRMediaRemoteSetCanBeNowPlayingApplicationSymbolLoc_ptr)
  {
    uint64_t v3 = MediaRemoteLibrary();
    v7[3] = (uint64_t)dlsym(v3, "MRMediaRemoteSetCanBeNowPlayingApplication");
    getMRMediaRemoteSetCanBeNowPlayingApplicationSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    double v2 = (void (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(a1);
  }
  else
  {
    id v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Boolean __MRMediaRemoteSetCanBeNowPlayingApplication(Boolean)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIApplication.m", 15448, @"%s", dlerror());

    __break(1u);
  }
}

void sub_18651C784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __MRMediaRemoteSetCommandHandlerBlock(void *a1)
{
  id v1 = a1;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  double v2 = (void (*)(id))getMRMediaRemoteSetCommandHandlerBlockSymbolLoc_ptr;
  id v9 = getMRMediaRemoteSetCommandHandlerBlockSymbolLoc_ptr;
  if (!getMRMediaRemoteSetCommandHandlerBlockSymbolLoc_ptr)
  {
    uint64_t v3 = MediaRemoteLibrary();
    v7[3] = (uint64_t)dlsym(v3, "MRMediaRemoteSetCommandHandlerBlock");
    getMRMediaRemoteSetCommandHandlerBlockSymbolLoc_ptr = (_UNKNOWN *)v7[3];
    double v2 = (void (*)(id))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v2)
  {
    v2(v1);
  }
  else
  {
    id v4 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"void __MRMediaRemoteSetCommandHandlerBlock(__strong MRMediaRemoteCommandHandlerBlock)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIApplication.m", 15449, @"%s", dlerror());

    __break(1u);
  }
}

void sub_18651C8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18651D1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18651D464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UISystemShellAllowsSceneRequests()
{
  if (qword_1EB25B840 != -1) {
    dispatch_once(&qword_1EB25B840, &__block_literal_global_2277);
  }
  return byte_1EB25B503;
}

id LSApplicationProxyForSettingCurrentApplicationIcon()
{
  double v0 = [MEMORY[0x1E4F223E0] defaultWorkspace];
  int v1 = [v0 allowsAlternateIcons];

  if (v1)
  {
    double v2 = [MEMORY[0x1E4F223F0] bundleProxyForCurrentProcess];
    if (v2 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      id v3 = v2;
      if ([v3 supportsAlternateIconNames]) {
        id v4 = v3;
      }
      else {
        id v4 = 0;
      }
    }
    else
    {
      id v4 = 0;
    }
  }
  else
  {
    id v4 = 0;
  }
  return v4;
}

uint64_t _UIApplicationUsesAlternateUI()
{
  return 0;
}

id _UIAdaptLocalizedStringForView(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (qword_1EB25B878 != -1) {
    dispatch_once(&qword_1EB25B878, &__block_literal_global_3404);
  }
  id v5 = [v4 _window];
  if (v5) {
    [v4 _window];
  }
  else {
  uint64_t v6 = +[UIWindow _applicationKeyWindow];
  }
  [v6 bounds];
  double v8 = v7;

  id v9 = [v3 variantFittingPresentationWidth:(unint64_t)(v8 / *(double *)&qword_1EB25B870)];

  return v9;
}

id _UILocalizedStringInSystemLanguage(void *a1, void *a2)
{
  uint64_t v3 = qword_1EB25B888;
  id v4 = a2;
  id v5 = a1;
  if (v3 != -1) {
    dispatch_once(&qword_1EB25B888, &__block_literal_global_3411);
  }
  uint64_t v6 = [(id)qword_1EB25B880 localizedStringForKey:v5 value:v4 table:0];

  return v6;
}

id _UILocalizedStringWithDefaultValueInLanguage(void *a1, void *a2, void *a3)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v6)
  {
    double v8 = (void *)MEMORY[0x1E4F28B50];
    id v9 = _UIKitBundle();
    uint64_t v10 = [v9 localizations];
    v18[0] = v6;
    CGFloat v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:1];
    id v12 = [v8 preferredLocalizationsFromArray:v10 forPreferences:v11];
    CGAffineTransform v13 = [v12 firstObject];

    if (v13)
    {
      id v14 = v13;

      id v6 = v14;
    }
  }
  uint64_t v15 = _UIKitBundle();
  long long v16 = [v15 localizedStringForKey:v5 value:v7 table:0 localization:v6];

  return v16;
}

void _deleteRestorationArchive(void *a1)
{
  id v1 = a1;
  double v2 = _restorationPath(v1);
  _deleteRestorationInProgressFile(v1);

  uint64_t v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v6 = 0;
  char v4 = [v3 removeItemAtURL:v2 error:&v6];
  id v5 = v6;

  if ((v4 & 1) == 0 && _UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SWarningUnable_3.isa, "BOOL _deleteRestorationArchive(NSString *__strong)", v5);
  }
}

void sub_186520BF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  id v14 = v12;
  objc_sync_exit(v14);
  if (a2 == 2)
  {
    id v16 = objc_begin_catch(a1);
    NSLog(&cfstr_ExceptionOccur.isa);

    objc_end_catch();
    JUMPOUT(0x186520B74);
  }
  objc_begin_catch(a1);
  JUMPOUT(0x186520B78);
}

void sub_186521F00(_Unwind_Exception *a1)
{
}

void sub_186521F18(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x186521F24);
}

void _encodeStateRestorationClassForObject(void *a1, void *a2)
{
  id v7 = a1;
  id v3 = a2;
  char v4 = (objc_class *)objc_opt_class();
  if (v4 && (NSStringFromClass(v4), (uint64_t v5 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v6 = (void *)v5;
    [v3 encodeObject:v5 forKey:@"kUIStateRestorationClassNameKey"];
  }
  else
  {
    NSLog(&cfstr_WarningCanTGet.isa, v7);
  }
}

void _encodeRestorationStateForViewAndSubviews(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  uint64_t v10 = +[UIViewController viewControllerForView:v7];
  CGFloat v11 = (void *)v10;
  if (v10) {
    BOOL v12 = v10 == (void)v8;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    CGAffineTransform v13 = [v7 _restorationIdentifierPath];
    if (v13)
    {
      if (_UIStateRestorationDebugLogEnabled()) {
        NSLog(&cfstr_SEncodingState.isa, "void _encodeRestorationStateForViewAndSubviews(UIView *__strong, UIViewController *__strong, NSMutableDictionary *__strong, BOOL)", v13, v7);
      }
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
      id v15 = [(NSKeyedArchiver *)[UIStateRestorationKeyedArchiver alloc] initRequiringSecureCoding:a4];
      id v16 = +[_UIStateRestorationKeyedArchiverDelegate sharedDelegate];
      [v15 setDelegate:v16];

      _encodeStateRestorationClassForObject(v7, v15);
      [v7 encodeRestorableStateWithCoder:v15];
      [v15 finishEncoding];
      long long v17 = [v15 encodedData];
      [v9 setObject:v17 forKey:v13];
    }
    id v18 = [v7 subviews];
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = ___encodeRestorationStateForViewAndSubviews_block_invoke;
    v20[3] = &unk_1E5302FE0;
    id v21 = v8;
    id v22 = v9;
    char v23 = a4;
    [v18 enumerateObjectsUsingBlock:v20];
  }
  else if (_UIStateRestorationDebugLogEnabled())
  {
    NSLog(&cfstr_SSkippingState.isa, "void _encodeRestorationStateForViewAndSubviews(UIView *__strong, UIViewController *__strong, NSMutableDictionary *__strong, BOOL)", v7, v11, v8);
  }
}

void _UIApplicationHandleEvent(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  double v2 = (void *)MEMORY[0x18C108260]();
  double v3 = CACurrentMediaTime();
  uint64_t v4 = [MEMORY[0x1E4F39CF8] startFrameWithReason:32 beginTime:v3 commitDeadline:v3 + _UIQOSMaxFrameDurationSeconds()];
  uint64_t v5 = (void *)MEMORY[0x1E4F39CF8];
  unint64_t HIDTimestamp = GSEventGetHIDTimestamp();
  [v5 setFrameInputTime:v4 withToken:_UIMediaTimeForMachTime(HIDTimestamp)];
  if (GSEventShouldRouteToFrontMost())
  {
    GSEventRemoveShouldRouteToFrontMost();
    unsigned int v7 = GSEventGetType() - 1000;
    if (v7 < 0x14 && ((0xC3FC3u >> v7) & 1) != 0) {
      int v8 = 0;
    }
    else {
      int v8 = [(id)UIApp _frontmostApplicationPort];
    }
    if ([(id)UIApp _accessibilityCaptureSimulatorEvent:a1]) {
      goto LABEL_15;
    }
    if ((v8 - 1) <= 0xFFFFFFFD)
    {
      _GSEventGetGSEventRecord();
      GSSendEvent();
      goto LABEL_15;
    }
  }
  id v9 = [(id)UIApp _event];
  [v9 _setGSEvent:a1];
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("Touch", &qword_1EB25B9E8);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    BOOL v12 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      CGAffineTransform v13 = v12;
      int v15 = 67109120;
      LODWORD(v16) = GSEventGetType();
      _os_log_impl(&dword_1853B0000, v13, OS_LOG_TYPE_ERROR, "Received event of type: %d", (uint8_t *)&v15, 8u);
    }
  }
  if (![(id)UIApp isIgnoringInteractionEvents]
    || ([(id)UIApp _isInteractionEvent:a1] & 1) == 0)
  {
    unint64_t v11 = __UILogGetCategoryCachedImpl("Touch", &qword_1EB25B9F0);
    if (*(unsigned char *)v11)
    {
      id v14 = *(NSObject **)(v11 + 8);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v15 = 138412290;
        id v16 = v9;
        _os_log_impl(&dword_1853B0000, v14, OS_LOG_TYPE_ERROR, "Delivering event %@", (uint8_t *)&v15, 0xCu);
      }
    }
    [(id)UIApp sendEvent:v9];
  }

LABEL_15:
  [MEMORY[0x1E4F39CF8] finishFrameWithToken:v4];
}

uint64_t _UIUpdatedVisualStyleEnabled()
{
  return 1;
}

uint64_t _UIUpdatedVisualStyleAllowed()
{
  return 1;
}

uint64_t _UIHidesUpdatedVisualStyle()
{
  return 0;
}

uint64_t _UIDynamicUserInterfaceStyleEnabled()
{
  return 1;
}

void *__getSBSDisplayLayoutElementAppSwitcherIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = SpringBoardServicesLibrary_1();
  BOOL result = dlsym(v2, "SBSDisplayLayoutElementAppSwitcherIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25B8F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_6()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrary_2 = result;
  return result;
}

void *__getSBSDisplayLayoutElementFloatingDockIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = SpringBoardServicesLibrary_1();
  uint64_t result = dlsym(v2, "SBSDisplayLayoutElementFloatingDockIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25B8F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __DuetActivitySchedulerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25B918 = result;
  return result;
}

uint64_t __WebKitLegacyLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25B920 = result;
  return result;
}

void *__getSBSUIAppSetWantsVolumeButtonEventsSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = SpringBoardServicesLibrary_1();
  uint64_t result = dlsym(v2, "SBSUIAppSetWantsVolumeButtonEvents");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSUIAppSetWantsVolumeButtonEventsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSBSUIAppSetWantsLockButtonEventsSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = SpringBoardServicesLibrary_1();
  uint64_t result = dlsym(v2, "SBSUIAppSetWantsLockButtonEvents");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSUIAppSetWantsLockButtonEventsSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id _applicationLifecycleMemoryMetricLogHandle()
{
  if (qword_1EB25B948 != -1) {
    dispatch_once(&qword_1EB25B948, &__block_literal_global_3789);
  }
  double v0 = (void *)qword_1EB25B940;
  return v0;
}

void ___applicationLifecycleMemoryMetricLogHandle_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "UIApplicationLifecycle");
  id v1 = (void *)qword_1EB25B940;
  qword_1EB25B940 = (uint64_t)v0;
}

void *__getPGPictureInPictureProxyPictureInPictureActiveChangedNotificationSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = PegasusLibrary();
  uint64_t result = dlsym(v2, "PGPictureInPictureProxyPictureInPictureActiveChangedNotification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getPGPictureInPictureProxyPictureInPictureActiveChangedNotificationSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                               + 24);
  return result;
}

void *PegasusLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!PegasusLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __PegasusLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E5302F48;
    uint64_t v6 = 0;
    PegasusLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  os_log_t v0 = (void *)PegasusLibraryCore_frameworkLibrary;
  if (!PegasusLibraryCore_frameworkLibrary)
  {
    os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    double v3 = [NSString stringWithUTF8String:"void *PegasusLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIApplication.m", 7624, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __PegasusLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PegasusLibraryCore_frameworkLibrary = result;
  return result;
}

void __getPGPictureInPictureProxyClass_block_invoke(uint64_t a1)
{
  PegasusLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("PGPictureInPictureProxy");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getPGPictureInPictureProxyClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    double v2 = [MEMORY[0x1E4F28B00] currentHandler];
    double v3 = [NSString stringWithUTF8String:"Class getPGPictureInPictureProxyClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIApplication.m", 7625, @"Unable to find class %s", "PGPictureInPictureProxy");

    __break(1u);
  }
}

void *__getFPDocumentURLFromBookmarkableStringSymbolLoc_block_invoke_0(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB25B958)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    v5[2] = (void *)3221225472;
    v5[3] = __FileProviderLibraryCore_block_invoke_2;
    v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E5302F60;
    uint64_t v7 = 0;
    qword_1EB25B958 = _sl_dlopen();
  }
  double v2 = (void *)qword_1EB25B958;
  if (!qword_1EB25B958)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    double v2 = [NSString stringWithUTF8String:"void *FileProviderLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIApplication.m", 8007, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  double v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "FPDocumentURLFromBookmarkableString");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  off_1EB25B950 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __FileProviderLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25B958 = result;
  return result;
}

Class __getINUIAppIntentForwardingActionExecutorClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25B968)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __IntentsUILibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E5302F78;
    uint64_t v8 = 0;
    qword_1EB25B968 = _sl_dlopen();
  }
  if (!qword_1EB25B968)
  {
    double v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *IntentsUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIApplication.m", 8242, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("INUIAppIntentForwardingActionExecutor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    double v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getINUIAppIntentForwardingActionExecutorClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIApplication.m", 8243, @"Unable to find class %s", "INUIAppIntentForwardingActionExecutor");

LABEL_10:
    __break(1u);
  }
  qword_1EB25B960 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __IntentsUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25B968 = result;
  return result;
}

Class __getLNAppConnectionListenerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25B978)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __AppIntentsLibraryCore_block_invoke;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E5302F90;
    uint64_t v8 = 0;
    qword_1EB25B978 = _sl_dlopen();
  }
  if (!qword_1EB25B978)
  {
    double v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *AppIntentsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIApplication.m", 584, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("LNAppConnectionListener");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    double v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getLNAppConnectionListenerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIApplication.m", 585, @"Unable to find class %s", "LNAppConnectionListener");

LABEL_10:
    __break(1u);
  }
  qword_1EB25B970 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AppIntentsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25B978 = result;
  return result;
}

void *__getSBShowNetworkPromptsIfNecessarySymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = SpringBoardServicesLibrary_1();
  uint64_t result = dlsym(v2, "SBShowNetworkPromptsIfNecessary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBShowNetworkPromptsIfNecessarySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSBSSpringBoardServerPortSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = SpringBoardServicesLibrary_1();
  uint64_t result = dlsym(v2, "SBSSpringBoardServerPort");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSSpringBoardServerPortSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void ___keybagLockStatusChanged_block_invoke(uint64_t a1)
{
  id v11 = *(id *)(a1 + 32);
  int v1 = MKBGetDeviceLockState();
  if (v1)
  {
    if (v1 != 2) {
      goto LABEL_10;
    }
    double v2 = [v11 delegate];
    char v3 = objc_opt_respondsToSelector();

    if (v3)
    {
      uint64_t v4 = [v11 delegate];
      [v4 applicationProtectedDataWillBecomeUnavailable:v11];
    }
    long long v5 = [MEMORY[0x1E4F28EB8] defaultCenter];
    long long v6 = v5;
    long long v7 = @"UIApplicationProtectedDataWillBecomeUnavailable";
  }
  else
  {
    uint64_t v8 = [v11 delegate];
    char v9 = objc_opt_respondsToSelector();

    if (v9)
    {
      uint64_t v10 = [v11 delegate];
      [v10 applicationProtectedDataDidBecomeAvailable:v11];
    }
    long long v5 = [MEMORY[0x1E4F28EB8] defaultCenter];
    long long v6 = v5;
    long long v7 = @"UIApplicationProtectedDataDidBecomeAvailable";
  }
  [v5 postNotificationName:v7 object:v11 userInfo:0];

LABEL_10:
}

void *__getSBAddWebClipToHomeScreenSymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = SpringBoardServicesLibrary_1();
  uint64_t result = dlsym(v2, "SBAddWebClipToHomeScreen");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBAddWebClipToHomeScreenSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___alertItemStateChanged_block_invoke()
{
  return [(id)UIApp _alertItemStateChanged];
}

uint64_t ___significantTimeChange_block_invoke()
{
  [MEMORY[0x1E4F1CAF0] resetSystemTimeZone];
  os_log_t v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:@"_UIApplicationSignificantTimeChangeNotification" object:UIApp userInfo:0];

  int v1 = (void *)UIApp;
  return [v1 significantTimeChange];
}

void ___languageChanged_block_invoke()
{
  UIResetDateFormats();
  _UIResetDatePicker();
  id v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:@"_UIApplicationLanguageChangedNotification" object:UIApp userInfo:0];
}

void ___localeWillChange_block_invoke()
{
  _UIWillResetDatePicker();
  id v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:@"_UIApplicationLocaleWillChange" object:UIApp userInfo:0];
}

void ___localeChanged_block_invoke()
{
  _UIResetDatePicker();
  id v0 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v0 postNotificationName:@"_UIApplicationLocaleDidChange" object:UIApp userInfo:0];
}

Class __getSDRDiagnosticReporterClass_block_invoke_1(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25B990)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    v6[2] = (void *)3221225472;
    v6[3] = __SymptomDiagnosticReporterLibraryCore_block_invoke_1;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E5302FA8;
    uint64_t v8 = 0;
    qword_1EB25B990 = _sl_dlopen();
  }
  if (!qword_1EB25B990)
  {
    char v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *SymptomDiagnosticReporterLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIApplication.m", 544, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SDRDiagnosticReporter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    char v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getSDRDiagnosticReporterClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIApplication.m", 545, @"Unable to find class %s", "SDRDiagnosticReporter");

LABEL_10:
    __break(1u);
  }
  qword_1EB25B988 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SymptomDiagnosticReporterLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25B990 = result;
  return result;
}

void *__getSBSUIAppDeactivateReachabilitySymbolLoc_block_invoke(uint64_t a1)
{
  double v2 = SpringBoardServicesLibrary_1();
  uint64_t result = dlsym(v2, "SBSUIAppDeactivateReachability");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getSBSUIAppDeactivateReachabilitySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void ___backgroundRefreshStatusDidChange_block_invoke(uint64_t a1)
{
  _cachedBackgroundRefreshStatus = -1;
  id v2 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v2 postNotificationName:@"UIApplicationBackgroundRefreshStatusDidChangeNotification" object:*(void *)(a1 + 32)];
}

void *__getMRMediaRemoteSetCanBeNowPlayingApplicationSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "MRMediaRemoteSetCanBeNowPlayingApplication");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMRMediaRemoteSetCanBeNowPlayingApplicationSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *MediaRemoteLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!MediaRemoteLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __MediaRemoteLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E5302FC0;
    uint64_t v6 = 0;
    MediaRemoteLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  id v0 = (void *)MediaRemoteLibraryCore_frameworkLibrary;
  if (!MediaRemoteLibraryCore_frameworkLibrary)
  {
    id v0 = [MEMORY[0x1E4F28B00] currentHandler];
    char v3 = [NSString stringWithUTF8String:"void *MediaRemoteLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIApplication.m", 15435, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  int v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaRemoteLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaRemoteLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getMRMediaRemoteSetCommandHandlerBlockSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "MRMediaRemoteSetCommandHandlerBlock");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMRMediaRemoteSetCommandHandlerBlockSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkMRMediaRemoteOptionIsExternalPlayerCommandSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "kMRMediaRemoteOptionIsExternalPlayerCommand");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25B998 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkMRMediaRemoteOptionMediaTypeSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "kMRMediaRemoteOptionMediaType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25B9A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkMRMediaRemoteMediaTypeAudioSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "kMRMediaRemoteMediaTypeAudio");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25B9A8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkMRMediaRemoteMediaTypeVideoSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "kMRMediaRemoteMediaTypeVideo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25B9B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkMRMediaRemoteMediaTypeImageSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "kMRMediaRemoteMediaTypeImage");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25B9B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkMRMediaRemoteOptionTrackIDSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "kMRMediaRemoteOptionTrackID");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25B9C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMRMediaRemoteSendCommandSymbolLoc_block_invoke(uint64_t a1)
{
  id v2 = MediaRemoteLibrary();
  uint64_t result = dlsym(v2, "MRMediaRemoteSendCommand");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getMRMediaRemoteSendCommandSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _updateRestorationInProgressFile(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = _restorationInProgressFilePath(a1);
  uint64_t v5 = [v3 writeToURL:v4 atomically:1];

  return v5;
}

uint64_t ___encodeRestorationStateForViewAndSubviews_block_invoke(uint64_t a1, uint64_t a2)
{
  return _encodeRestorationStateForViewAndSubviews(a2, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

void ___restoreState_block_invoke()
{
  id v0 = *(NSObject **)(__UILogGetCategoryCachedImpl("ApplicationStateRestoration", &_ignoreSnapshotOnNextLaunch_block_invoke_12___s_category)+ 8);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v1 = 0;
    _os_log_impl(&dword_1853B0000, v0, OS_LOG_TYPE_ERROR, "Warning: The UIApplicationDelegate method application:shouldRestoreApplicationState: is deprecated. Please replace the use of application:shouldRestoreApplicationState: with application:shouldRestoreSecureApplicationState:", v1, 2u);
  }
}

void ___restoreState_block_invoke_3966(uint64_t a1)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F1CA48] array];
  id v3 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v95 = a1;
  int v94 = *(unsigned __int8 *)(a1 + 88);
  id v5 = *(id *)(a1 + 32);
  id v96 = v4;
  id v100 = v2;
  id obj = v3;
  if ([v5 count])
  {
    unint64_t v6 = 0;
    v104 = v5;
    do
    {
      uint64_t v7 = [v5 objectAtIndex:v6];
      uint64_t v8 = [v7 objectAtIndex:0];
      uint64_t v9 = [v7 objectAtIndex:1];
      uint64_t v10 = [v7 objectAtIndex:2];
      id v11 = v8;
      id v12 = v9;
      id v13 = v10;
      id v14 = v100;
      id v15 = obj;
      char v16 = objc_opt_respondsToSelector();
      char v17 = objc_opt_respondsToSelector();
      char v18 = v17;
      if (v16 & 1) != 0 || (v17)
      {
        int IsSuitableForDecoding = _stateRestorationClassForObjectIsSuitableForDecoding(v12, v13);
        int v20 = _UIStateRestorationDebugLogEnabled();
        if (IsSuitableForDecoding)
        {
          if (v20) {
            NSLog(&cfstr_SRestoringObje.isa, "void _decodeRestorableStateForObject(NSString *__strong, NSObject *__strong, NSCoder *__strong, NSMutableArray *__strong, NSMutableArray *__strong)", v11);
          }
          if (v18)
          {
            id v21 = [v12 _decodeRestorableStateAndReturnContinuationWithCoder:v13];
            if (_UIStateRestorationDebugLogEnabled())
            {
              id v22 = @"returned continuation";
              if (!v21) {
                id v22 = @"no continuation returned";
              }
              NSLog(&cfstr_SCalledDecoder.isa, "void _decodeRestorableStateForObject(NSString *__strong, NSObject *__strong, NSCoder *__strong, NSMutableArray *__strong, NSMutableArray *__strong)", v22);
            }
            if (v21)
            {
              char v23 = (void *)[v21 copy];
              [v15 addObject:v23];
            }
          }
          else if (v16)
          {
            [v12 decodeRestorableStateWithCoder:v13];
            if (_UIStateRestorationDebugLogEnabled()) {
              NSLog(&cfstr_SCalledDecoder_0.isa, "void _decodeRestorableStateForObject(NSString *__strong, NSObject *__strong, NSCoder *__strong, NSMutableArray *__strong, NSMutableArray *__strong)", v93);
            }
          }
        }
        else if (v20)
        {
          NSLog(&cfstr_SClassNameForO.isa, "void _decodeRestorableStateForObject(NSString *__strong, NSObject *__strong, NSCoder *__strong, NSMutableArray *__strong, NSMutableArray *__strong)", v11);
        }
      }
      else if (_UIStateRestorationDebugLogEnabled())
      {
        NSLog(&cfstr_SRestoredObjec.isa, "void _decodeRestorableStateForObject(NSString *__strong, NSObject *__strong, NSCoder *__strong, NSMutableArray *__strong, NSMutableArray *__strong)", v11);
      }
      [v14 addObject:v12];

      if ([v13 decodeBoolForKey:@"kObjectIsViewControllerKey"])
      {
        double v24 = (void *)MEMORY[0x1E4F1CAD0];
        uint64_t v25 = objc_opt_class();
        uint64_t v93 = 0;
        id v26 = objc_msgSend(v24, "setWithObjects:", v25, objc_opt_class());
        id v27 = [v13 decodeObjectOfClasses:v26 forKey:@"kViewRestorationDataKey"];

        if ([v13 decodeBoolForKey:@"kViewControllerViewWasLoadedKey"])
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v28 = v12;
            if ([v28 _shouldLoadViewDuringRestoration:v13])
            {
              id v29 = [v28 view];
              if (v29)
              {
                uint64_t v30 = v29;
                _restoreStateForViewAndSubviews(v29, v28, v27, v96, v14, v94 != 0);
              }
            }
            else if (_UIStateRestorationDebugLogEnabled())
            {
              NSLog(&cfstr_SSpecialCasePa_0.isa, "void _performSecondPassStateRestoration(NSArray *__strong, NSDictionary *__strong, NSMutableArray *__strong, NSMutableArray *__strong, BOOL)", v11);
            }
          }
          else
          {
            NSLog(&cfstr_WarningArchive.isa, v11, v12);
          }
        }
      }
      [v13 finishDecoding];

      ++v6;
      id v5 = v104;
    }
    while ([v104 count] > v6);
  }

  uint64_t v31 = v95;
  if (!*(void *)(v95 + 48) && (objc_opt_respondsToSelector() & 1) != 0) {
    [*(id *)(v95 + 56) application:*(void *)(v95 + 64) didDecodeRestorableStateWithCoder:*(void *)(v95 + 72)];
  }
  double v32 = *(void **)(v95 + 72);
  char v33 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v34 = objc_opt_class();
  unint64_t v35 = objc_msgSend(v33, "setWithObjects:", v34, objc_opt_class(), 0);
  v36 = [v32 decodeObjectOfClasses:v35 forKey:@"kFirstRespondersKey"];

  v99 = v36;
  if (v36)
  {
    id v37 = v36;
    if (_UIStateRestorationDebugLogEnabled())
    {
      uint64_t v38 = [v37 count];
      uint64_t v39 = [v37 count];
      v40 = "s";
      if (v39 == 1) {
        v40 = "";
      }
      NSLog(&cfstr_SLdFirstRespon.isa, "void _restoreFirstResponders(NSArray *__strong)", v38, v40, v37);
    }
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    id v41 = v37;
    uint64_t v42 = [v41 countByEnumeratingWithState:&v119 objects:v126 count:16];
    if (v42)
    {
      uint64_t v43 = v42;
      uint64_t v44 = *(void *)v120;
      v45 = off_1E52D4000;
      double v46 = off_1E52D4000;
      do
      {
        uint64_t v47 = 0;
        uint64_t v105 = v43;
        do
        {
          if (*(void *)v120 != v44) {
            objc_enumerationMutation(v41);
          }
          uint64_t v48 = *(void *)(*((void *)&v119 + 1) + 8 * v47);
          v49 = [(__objc2_class *)v45[158] objectWithRestorationIdentifierPath:v48];
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            id v50 = v49;
          }
          else {
            id v50 = 0;
          }
          id v51 = v50;
          if (v51)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0 || [v49 isEditable])
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0 && [v51 isProgrammaticScrollEnabled])
              {
                [v51 setProgrammaticScrollEnabled:0];
                int v52 = 1;
              }
              else
              {
                int v52 = 0;
              }
              uint64_t v53 = [v51 window];
              uint64_t v54 = v53;
              if (v53 && ![v53 _isApplicationKeyWindow])
              {
                [v51 window];
                uint64_t v55 = v44;
                uint64_t v56 = v46;
                v57 = v45;
                v59 = id v58 = v41;
                [v59 _setFirstResponder:v51];

                id v41 = v58;
                v45 = v57;
                double v46 = v56;
                uint64_t v44 = v55;
                uint64_t v43 = v105;
                if (v52) {
LABEL_63:
                }
                  [v51 setProgrammaticScrollEnabled:1];
              }
              else
              {
                [v51 becomeFirstResponder];
                if (v52) {
                  goto LABEL_63;
                }
              }
            }
          }
          else if (_UIStateRestorationDebugLogEnabled())
          {
            NSLog(&cfstr_SRestoredFirst.isa, "void _restoreFirstResponders(NSArray *__strong)", v49, v48);
          }

          ++v47;
        }
        while (v43 != v47);
        uint64_t v60 = [v41 countByEnumeratingWithState:&v119 objects:v126 count:16];
        uint64_t v43 = v60;
      }
      while (v60);
    }

    uint64_t v31 = v95;
  }
  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  id v61 = v100;
  uint64_t v62 = [v61 countByEnumeratingWithState:&v115 objects:v125 count:16];
  if (v62)
  {
    uint64_t v63 = v62;
    uint64_t v64 = *(void *)v116;
    do
    {
      for (uint64_t i = 0; i != v63; ++i)
      {
        if (*(void *)v116 != v64) {
          objc_enumerationMutation(v61);
        }
        v66 = *(void **)(*((void *)&v115 + 1) + 8 * i);
        if (objc_opt_respondsToSelector()) {
          [v66 applicationFinishedRestoringState];
        }
      }
      uint64_t v63 = [v61 countByEnumeratingWithState:&v115 objects:v125 count:16];
    }
    while (v63);
  }

  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  id v67 = obj;
  uint64_t v68 = [v67 countByEnumeratingWithState:&v111 objects:v124 count:16];
  if (v68)
  {
    uint64_t v69 = v68;
    uint64_t v70 = *(void *)v112;
    do
    {
      for (uint64_t j = 0; j != v69; ++j)
      {
        if (*(void *)v112 != v70) {
          objc_enumerationMutation(v67);
        }
        v72 = *(void (***)(void))(*((void *)&v111 + 1) + 8 * j);
        if (_UIStateRestorationDebugLogEnabled())
        {
          v73 = _Block_copy(v72);
          NSLog(&cfstr_SCallingContin.isa, "void _restoreState(UIApplication *__strong, NSData *__strong, NSObject<UIApplicationDelegate> *__strong, NSURL *__strong, NSString *__strong, __strong UIStateRestorationRestoreStateBeginHandler)_block_invoke", v73);
        }
        v72[2](v72);
      }
      uint64_t v69 = [v67 countByEnumeratingWithState:&v111 objects:v124 count:16];
    }
    while (v69);
  }
  v97 = v67;
  v98 = v61;

  if (_UIStateRestorationDebugLogEnabled()) {
    NSLog(&cfstr_SWindowsWithOv.isa, "void _restoreState(UIApplication *__strong, NSData *__strong, NSObject<UIApplicationDelegate> *__strong, NSURL *__strong, NSString *__strong, __strong UIStateRestorationRestoreStateBeginHandler)_block_invoke", *(void *)(v31 + 80));
  }
  long long v109 = 0u;
  long long v110 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  id obja = *(id *)(v31 + 80);
  uint64_t v74 = [obja countByEnumeratingWithState:&v107 objects:v123 count:16];
  if (v74)
  {
    uint64_t v75 = v74;
    uint64_t v106 = *(void *)v108;
    do
    {
      uint64_t v76 = 0;
      uint64_t v101 = v75;
      do
      {
        if (*(void *)v108 != v106) {
          objc_enumerationMutation(obja);
        }
        v77 = *(void **)(*((void *)&v107 + 1) + 8 * v76);
        if (_UIStateRestorationDebugLogEnabled()) {
          NSLog(&cfstr_SClearingSizeC.isa, "void _restoreState(UIApplication *__strong, NSData *__strong, NSObject<UIApplicationDelegate> *__strong, NSURL *__strong, NSString *__strong, __strong UIStateRestorationRestoreStateBeginHandler)_block_invoke", v77);
        }
        v78 = [v77 traitCollection];
        uint64_t v79 = [v78 verticalSizeClass];
        uint64_t v80 = [v78 horizontalSizeClass];
        [v77 _clearSizeClassesForStateRestoration];
        if (_UIStateRestorationDebugLogEnabled())
        {
          if (v80 == 2) {
            v81 = @"UIUserInterfaceSizeClassRegular";
          }
          else {
            v81 = @"UIUserInterfaceSizeClassUnspecified";
          }
          if (v80 == 1) {
            v82 = @"UIUserInterfaceSizeClassCompact";
          }
          else {
            v82 = v81;
          }
          if (v79 == 2) {
            v83 = @"UIUserInterfaceSizeClassRegular";
          }
          else {
            v83 = @"UIUserInterfaceSizeClassUnspecified";
          }
          if (v79 == 1) {
            v83 = @"UIUserInterfaceSizeClassCompact";
          }
          v84 = v83;
          v85 = v82;
          v86 = [v77 traitCollection];
          uint64_t v87 = [v86 horizontalSizeClass];
          if (v87 == 2) {
            v88 = @"UIUserInterfaceSizeClassRegular";
          }
          else {
            v88 = @"UIUserInterfaceSizeClassUnspecified";
          }
          if (v87 == 1) {
            v88 = @"UIUserInterfaceSizeClassCompact";
          }
          v89 = v88;
          v90 = [v77 traitCollection];
          uint64_t v91 = [v90 verticalSizeClass];
          v92 = @"UIUserInterfaceSizeClassUnspecified";
          if (v91 == 2) {
            v92 = @"UIUserInterfaceSizeClassRegular";
          }
          if (v91 == 1) {
            v92 = @"UIUserInterfaceSizeClassCompact";
          }
          NSLog(&cfstr_SResetWindowSi.isa, "void _restoreState(UIApplication *__strong, NSData *__strong, NSObject<UIApplicationDelegate> *__strong, NSURL *__strong, NSString *__strong, __strong UIStateRestorationRestoreStateBeginHandler)_block_invoke", v77, v85, v84, v89, v92);

          uint64_t v75 = v101;
        }

        ++v76;
      }
      while (v75 != v76);
      uint64_t v75 = [obja countByEnumeratingWithState:&v107 objects:v123 count:16];
    }
    while (v75);
  }
}

uint64_t _sizeClassFromString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"UIUserInterfaceSizeClassCompact"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"UIUserInterfaceSizeClassRegular"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void _restoreStateForViewAndSubviews(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  uint64_t v16 = +[UIViewController viewControllerForView:v11];
  char v17 = (void *)v16;
  if (v16) {
    BOOL v18 = v16 == (void)v12;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    uint64_t v19 = [v11 _restorationIdentifierPath];
    if (v19)
    {
      int v20 = [v13 objectForKey:v19];
      if (v20)
      {
        char v25 = a6;
        id v21 = [[UIStateRestorationKeyedUnarchiver alloc] initForReadingWithData:v20 defaultValues:v14 requiresSecureCoding:a6];
        int IsSuitableForDecoding = _stateRestorationClassForObjectIsSuitableForDecoding(v11, v21);
        int v23 = _UIStateRestorationDebugLogEnabled();
        if (IsSuitableForDecoding)
        {
          if (v23) {
            NSLog(&cfstr_SRestoringView.isa, "void _restoreStateForViewAndSubviews(UIView *__strong, UIViewController *__strong, NSDictionary *__strong, NSDictionary *__strong, NSMutableArray *__strong, BOOL)", v19);
          }
          [v11 decodeRestorableStateWithCoder:v21];
          LOBYTE(a6) = v25;
        }
        else
        {
          LOBYTE(a6) = v25;
          if (v23) {
            NSLog(&cfstr_SClassNameForV.isa, "void _restoreStateForViewAndSubviews(UIView *__strong, UIViewController *__strong, NSDictionary *__strong, NSDictionary *__strong, NSMutableArray *__strong, BOOL)", v19);
          }
        }
        [v21 finishDecoding];
        [v15 addObject:v11];
      }
      else if (_UIStateRestorationDebugLogEnabled())
      {
        NSLog(&cfstr_SNoRestoration_1.isa, "void _restoreStateForViewAndSubviews(UIView *__strong, UIViewController *__strong, NSDictionary *__strong, NSDictionary *__strong, NSMutableArray *__strong, BOOL)", v19);
      }
    }
    double v24 = [v11 subviews];
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = ___restoreStateForViewAndSubviews_block_invoke;
    v26[3] = &unk_1E5303030;
    id v27 = v12;
    id v28 = v13;
    id v29 = v14;
    id v30 = v15;
    char v31 = a6;
    [v24 enumerateObjectsUsingBlock:v26];
  }
}

uint64_t _stateRestorationClassForObjectIsSuitableForDecoding(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v4 decodeObjectOfClass:objc_opt_class() forKey:@"kUIStateRestorationClassNameKey"];

  if (!v5)
  {
    NSLog(&cfstr_WarningCanTGet_0.isa, v3);
LABEL_8:
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  uint64_t v6 = (uint64_t)NSClassFromString(v5);
  if (!v6)
  {
    NSLog(&cfstr_WarningDecoded_0.isa, v5, v3);
    goto LABEL_9;
  }
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v8 = objc_opt_class();
    NSLog(&cfstr_WarningDecoded.isa, v8, v6, v3);
    goto LABEL_8;
  }
  uint64_t v6 = 1;
LABEL_9:

  return v6;
}

uint64_t ___restoreStateForViewAndSubviews_block_invoke(uint64_t a1, uint64_t a2)
{
  return _restoreStateForViewAndSubviews(a2, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
}

void forwardMethod1(void *a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id v5 = a1;
  id v6 = [v5 nextResponder];

  if (v6 && v6 != v5) {
    ((void (*)(id, uint64_t, id))[v6 methodForSelector:a2])(v6, a2, v7);
  }
}

void forwardMethodIntId(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v9 = a4;
  id v7 = a1;
  id v8 = [v7 nextResponder];

  if (v8 && v8 != v7) {
    ((void (*)(id, uint64_t, uint64_t, id))[v8 methodForSelector:a2])(v8, a2, a3, v9);
  }
}

uint64_t _UICanPasteItemProviders(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v4, "count"));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v6 = v4;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v17;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = objc_msgSend(*(id *)(*((void *)&v16 + 1) + 8 * v10), "registeredTypeIdentifiers", (void)v16);
        [v5 addObjectsFromArray:v11];

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v8);
  }

  id v12 = [v5 allObjects];
  id v13 = [v3 acceptableTypeIdentifiers];
  uint64_t v14 = _UIOneOfTypesConformsToAcceptableTypes(v12, v13);

  return v14;
}

void forwardMethod2(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v10 = a3;
  id v7 = a4;
  id v8 = a1;
  id v9 = [v8 nextResponder];

  if (v9 && v9 != v8) {
    ((void (*)(id, uint64_t, id, id))[v9 methodForSelector:a2])(v9, a2, v10, v7);
  }
}

void sub_186526C80(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_186528174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIResponderChainDescription(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = [MEMORY[0x1E4F28E78] string];
  id v5 = [MEMORY[0x1E4F28E10] mapTableWithKeyOptions:517 valueOptions:0];
  id v6 = v3;
  [v4 appendString:@"Responder traversal BEGINS:\n"];
  if (v6)
  {
    uint64_t v7 = 0;
    id v8 = v6;
    while (1)
    {
      id v9 = NSString;
      id v10 = v8;
      id v11 = (objc_class *)objc_opt_class();
      id v12 = NSStringFromClass(v11);
      id v13 = [v9 stringWithFormat:@"<%@: %p>", v12, v10];

      [v4 appendFormat:@"%3lu: %@\n", v7, v13];
      uint64_t v14 = [v5 objectForKey:v10];
      if (v14) {
        break;
      }
      id v15 = [NSNumber numberWithUnsignedInteger:v7];
      [v5 setObject:v15 forKey:v10];

      id v8 = [v10 _nextResponderUsingTraversalStrategy:a2];

      ++v7;
      if (!v8) {
        goto LABEL_7;
      }
    }
    long long v16 = v14;
    [v4 appendFormat:@"ERROR: Responder loop! Found responder again: %@ originally at index: %lu\n", v13, objc_msgSend(v14, "unsignedIntegerValue")];
  }
LABEL_7:
  [v4 appendString:@"Responder traversal ENDS"];

  return v4;
}

id _UIResponderFindInputAssistantItem(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1;
    while (1)
    {
      uint64_t v4 = [v3 inputAssistantItem];
      if (v4) {
        break;
      }
      uint64_t v5 = [v3 nextResponder];

      id v3 = (void *)v5;
      if (!v5) {
        goto LABEL_5;
      }
    }
    id v6 = (id)v4;
  }
  else
  {
LABEL_5:
    if (qword_1EB2624D0 != -1) {
      dispatch_once(&qword_1EB2624D0, &__block_literal_global_1035_0);
    }
    id v6 = (id)qword_1EB2624D8;
  }

  return v6;
}

uint64_t _UISpecialKeyInputFromHIDUsage(uint64_t a1)
{
  if ((unint64_t)(a1 - 41) > 0x29) {
    return 0;
  }
  else {
    return (uint64_t)*(&off_1E53033C8 + a1 - 41);
  }
}

void _UIAdditionalScaleFactorForClassicPresentationWithHomeAffordance(void *a1)
{
  if ([a1 _isMainScreen])
  {
    id v1 = +[UIDevice currentDevice];
    uint64_t v2 = [v1 userInterfaceIdiom];

    if ((v2 & 0xFFFFFFFFFFFFFFFBLL) != 1) {
      +[UIDevice _hasHomeButton];
    }
    id v3 = +[UIDevice currentDevice];
    uint64_t v4 = [v3 userInterfaceIdiom];

    if ((v4 & 0xFFFFFFFFFFFFFFFBLL) != 1) {
      +[UIDevice _hasHomeButton];
    }
  }
}

double _UIScaleFactorForClassicPresentationWithHomeAffordance(void *a1, double a2, double a3, double a4, double a5)
{
  if (a2 / a4 <= a3 / a5) {
    double v5 = a2 / a4;
  }
  else {
    double v5 = a3 / a5;
  }
  _UIAdditionalScaleFactorForClassicPresentationWithHomeAffordance(a1);
  return v5 * v6;
}

void _UIInsetAndTranslateLayerForClassicPresentationWithHomeAffordance(void *a1, void *a2, int a3, uint64_t a4, int a5, double a6, double a7, double a8, double a9, double a10)
{
  id v15 = a1;
  id v16 = a2;
  if ([v16 _isMainScreen])
  {
    _UIAdditionalScaleFactorForClassicPresentationWithHomeAffordance(v16);
    double v18 = v17;
    if (a5) {
      double v19 = 1.0 / a10;
    }
    else {
      double v19 = 1.0;
    }
    int v20 = +[UIDevice currentDevice];
    uint64_t v21 = [v20 userInterfaceIdiom];

    int v22 = 20;
    if ((v21 & 0xFFFFFFFFFFFFFFFBLL) != 1)
    {
      if (+[UIDevice _hasHomeButton]) {
        int v22 = 0;
      }
      else {
        int v22 = 20;
      }
    }
    int v23 = +[UIDevice currentDevice];
    uint64_t v24 = [v23 userInterfaceIdiom];

    if ((v24 & 0xFFFFFFFFFFFFFFFBLL) == 1)
    {
      int v25 = -24;
    }
    else if (+[UIDevice _hasHomeButton])
    {
      int v25 = 0;
    }
    else
    {
      int v25 = -6;
    }
    double v26 = 0.0;
    if (v18 != 1.0) {
      double v26 = -((double)((v25 + v22) >> 1) * v19);
    }
    double v27 = v19 * 5.0;
    double v28 = -0.0;
    double v29 = -v26;
    double v30 = -0.0;
    if (a4 == 2) {
      double v31 = -v26;
    }
    else {
      double v31 = v26;
    }
    if (a4 != 2) {
      double v30 = 0.0;
    }
    if (a4 == 3) {
      double v31 = 0.0;
    }
    else {
      double v29 = v30;
    }
    if (a4 == 4) {
      double v29 = v26;
    }
    else {
      double v28 = v31;
    }
    if (a3) {
      CGFloat v32 = v28;
    }
    else {
      CGFloat v32 = v26;
    }
    memset(&v39.c, 0, 32);
    if (a3) {
      double v33 = v29;
    }
    else {
      double v33 = 0.0;
    }
    *(_OWORD *)&v39.a = 0uLL;
    CGAffineTransformMakeScale(&t1, v18, v18);
    CGAffineTransformMakeTranslation(&t2, v33, v32);
    CGAffineTransformConcat(&v39, &t1, &t2);
    if (v15) {
      [v15 affineTransform];
    }
    else {
      memset(&v35, 0, sizeof(v35));
    }
    CGAffineTransform v34 = v39;
    CGAffineTransformConcat(&v36, &v35, &v34);
    [v15 setAffineTransform:&v36];
    [v15 setCornerRadius:v27];
  }
}

void ClearSpecialViews(void *a1, CFMutableDictionaryRef *a2)
{
  id v3 = a1;
  if (*a2)
  {
    id v5 = v3;
    CFDictionaryRemoveValue(*a2, v3);
    CFIndex Count = CFDictionaryGetCount(*a2);
    id v3 = v5;
    if (!Count)
    {
      CFRelease(*a2);
      id v3 = v5;
      *a2 = 0;
    }
  }
}

void sub_18652C3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a24, 8);
  objc_destroyWeak(v30);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__369(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__370(uint64_t a1)
{
}

void sub_18652E65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _UIWindowConvertRectFromSceneSpaceToSceneReferenceSpace(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  if (+[UIWindow _transformLayerRotationsAreEnabled])
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = ___UIWindowConvertRectFromSceneSpaceToSceneReferenceSpace_block_invoke;
    void v15[3] = &__block_descriptor_56_e30__CGPoint_dd_24__0_CGPoint_dd_8l;
    *(double *)&v15[4] = a6;
    *(double *)&v15[5] = a7;
    v15[6] = a1;
    return _UIRectTransformByTransformingCorners((uint64_t)v15, a2, a3, a4, a5);
  }
  return a2;
}

uint64_t _UIWindowCompareToWindow(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3 || !v4)
  {
    uint64_t v14 = [MEMORY[0x1E4F28B00] currentHandler];
    id v15 = objc_msgSend(NSString, "stringWithUTF8String:", "NSComparisonResult _UIWindowCompareToWindow(UIWindow *__strong, UIWindow *__strong)");
    objc_msgSend(v14, "handleFailureInFunction:file:lineNumber:description:", v15, @"UIWindow.m", 8044, @"%s: Invalid state. Should be comparing two valid objects: window1: %@; window2: %@",
      "NSComparisonResult _UIWindowCompareToWindow(UIWindow *__strong, UIWindow *__strong)",
      v3,
      v5);
  }
  if (v3 == v5 || [v3 isHidden] && (objc_msgSend(v5, "isHidden") & 1) != 0) {
    goto LABEL_11;
  }
  if ([v5 isHidden])
  {
    uint64_t v6 = 1;
    goto LABEL_12;
  }
  if ([v3 isHidden])
  {
    uint64_t v6 = -1;
    goto LABEL_12;
  }
  [v5 windowLevel];
  double v8 = v7;
  [v3 windowLevel];
  if (v8 == v9)
  {
LABEL_11:
    uint64_t v6 = 0;
    goto LABEL_12;
  }
  [v5 windowLevel];
  double v12 = v11;
  [v3 windowLevel];
  if (v12 <= v13) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = -1;
  }
LABEL_12:

  return v6;
}

id _UIWindowVisible()
{
  return +[UIWindow allWindowsIncludingInternalWindows:1 onlyVisibleWindows:1];
}

CGImage *UICreateScreenImage()
{
  if ([(id)UIApp applicationState] == 2) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3A8] format:@"Cannot call UICreateScreenImage() while app is in the background."];
  }
  id v0 = +[UIWindow createScreenIOSurface];
  id v1 = v0;
  if (!v0) {
    return v1;
  }
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 == CGImageGetTypeID()) {
    return v1;
  }
  id v4 = _UICreateCGImageFromIOSurfaceWithOptions(v1, 0);
  CFRelease(v1);
  return v4;
}

CGImage *UICreateCGImageFromIOSurface(CGImage *a1)
{
  return _UICreateCGImageFromIOSurfaceWithOptions(a1, 0);
}

CGImage *_UICreateCGImageFromIOSurfaceWithOptions(CGImage *cf, uint64_t a2)
{
  CGImage = cf;
  v9[1] = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CGImageGetTypeID())
    {
      CGImageRetain(CGImage);
    }
    else
    {
      double v8 = @"dst-opaque";
      id v5 = [NSNumber numberWithBool:a2];
      v9[0] = v5;
      uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
      CGImage = (CGImage *)_UIRenderingBufferCreateCGImage(CGImage, v6);
    }
  }
  return CGImage;
}

uint64_t _UICreateScreenUIImageFromRectUncheckedWithRotation(int a1, double a2, double a3, double a4, double a5)
{
  return _UICreateScreenUIImageFromRectUncheckedWithRotationEnforceSecureMode(a1, 0, a2, a3, a4, a5);
}

uint64_t _UICreateScreenUIImageFromRectUncheckedWithRotationEnforceSecureMode(int a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  v37[7] = *MEMORY[0x1E4F143B8];
  if (qword_1EB259EC0 == -1)
  {
    if (a1) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v12 = 1;
    goto LABEL_7;
  }
  dispatch_once(&qword_1EB259EC0, &__block_literal_global_1480_0);
  if (!a1) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v12 = [(id)UIApp activeInterfaceOrientation];
  if (!v12)
  {
    id v13 = objc_alloc_init(MEMORY[0x1E4F629F8]);
    uint64_t v12 = [v13 activeInterfaceOrientation];
  }
LABEL_7:
  uint64_t v14 = +[UIScreen mainScreen];
  [v14 _scale];
  double v16 = v15;
  if (byte_1EB259DB8) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = [v14 gamut];
  }
  v36[0] = @"enforce-secure-mode";
  double v18 = [NSNumber numberWithBool:a2];
  v37[0] = v18;
  v37[1] = v14;
  v36[1] = @"src-screen";
  v36[2] = @"src-rect";
  *(double *)double v33 = a3;
  *(double *)&v33[1] = a4;
  *(double *)&v33[2] = a5;
  *(double *)&v33[3] = a6;
  double v19 = [MEMORY[0x1E4F29238] valueWithBytes:v33 objCType:"{CGRect={CGPoint=dd}{CGSize=dd}}"];
  v37[2] = v19;
  v36[3] = @"src-orientation";
  int v20 = [NSNumber numberWithInteger:v12];
  v37[3] = v20;
  v36[4] = @"dst-scale";
  uint64_t v21 = [NSNumber numberWithDouble:v16];
  v37[4] = v21;
  v36[5] = @"dst-gamut";
  int v22 = [NSNumber numberWithInteger:v17];
  v36[6] = @"dst-opaque";
  uint64_t v23 = MEMORY[0x1E4F1CC38];
  v37[5] = v22;
  v37[6] = MEMORY[0x1E4F1CC38];
  uint64_t v24 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v37 forKeys:v36 count:7];

  int v25 = (__IOSurface *)_UIRenderDisplay(v24, &__block_literal_global_1490_0);
  if (v25)
  {
    double v26 = v25;
    CGAffineTransform v34 = @"dst-opaque";
    uint64_t v35 = v23;
    double v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v35 forKeys:&v34 count:1];
    CGImage = (CGImage *)_UIRenderingBufferCreateCGImage(v26, v27);

    if (CGImage)
    {
      double v29 = [UIImage alloc];
      if (a1) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = [v14 _imageOrientation];
      }
      uint64_t v31 = [(UIImage *)v29 initWithCGImage:CGImage scale:v30 orientation:v16];
      CGImageRelease(CGImage);
    }
    else
    {
      uint64_t v31 = 0;
    }
    CFRelease(v26);
  }
  else
  {
    uint64_t v31 = 0;
  }

  return v31;
}

uint64_t _UICreateScreenUIImageFromRectUnchecked(double a1, double a2, double a3, double a4)
{
  return _UICreateScreenUIImageFromRectUncheckedWithRotationEnforceSecureMode(0, 0, a1, a2, a3, a4);
}

uint64_t _UICreateScreenUIImageFromRectWithRotation(int a1, double a2, double a3, double a4, double a5)
{
  if ([(id)UIApp applicationState] == 2) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3A8] format:@"Cannot call _UICreateScreenUIImage() while app is in the background."];
  }
  return _UICreateScreenUIImageFromRectUncheckedWithRotationEnforceSecureMode(a1, 0, a2, a3, a4, a5);
}

uint64_t _UICreateScreenUIImageFromRect(double a1, double a2, double a3, double a4)
{
  return _UICreateScreenUIImageFromRectWithRotation(0, a1, a2, a3, a4);
}

uint64_t _UICreateScreenUIImageWithRotation(int a1)
{
  CFTypeID v2 = +[UIScreen mainScreen];
  [v2 _referenceBounds];
  uint64_t v7 = _UICreateScreenUIImageFromRectWithRotation(a1, v3, v4, v5, v6);

  return v7;
}

uint64_t _UICreateScreenUIImage()
{
  return _UICreateScreenUIImageWithRotation(0);
}

void ____updateTouchVisualisation_block_invoke()
{
  _UIMainBundleIdentifier();
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  if ([v1 isEqualToString:@"com.apple.PointerUI.pointeruid"]) {
    char v0 = 1;
  }
  else {
    char v0 = [v1 isEqualToString:@"com.apple.DragUI.druid"];
  }
  byte_1EB259DB9 = v0;
}

uint64_t ____updateTouchVisualisation_block_invoke_1523(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 56);
  v4[0] = *(_OWORD *)(a1 + 40);
  v4[1] = v2;
  v4[2] = *(_OWORD *)(a1 + 72);
  [*(id *)(a1 + 32) setTransform:v4];
  return [*(id *)(a1 + 32) setAlpha:1.0];
}

uint64_t ____updateTouchVisualisation_block_invoke_2(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  CGAffineTransformMakeScale(&v4, 0.001, 0.001);
  CGAffineTransform v3 = v4;
  [v1 setTransform:&v3];
  return [v1 setAlpha:0.0];
}

uint64_t ____updateTouchVisualisation_block_invoke_3(uint64_t a1)
{
  [*(id *)(a1 + 32) removeFromSuperview];
  long long v2 = (void *)qword_1EB259ED0;
  uint64_t v3 = *(void *)(a1 + 32);
  return [v2 addObject:v3];
}

id NSStringFrom_UI_UIResponder_Override_Type(int a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  long long v2 = objc_msgSend(MEMORY[0x1E4F28E78], "string", 0x1ED160B20, 0x1ED160B40);
  char v3 = 0;
  uint64_t v4 = 0;
  do
  {
    char v5 = v3;
    if (((1 << v4) & a1) != 0)
    {
      uint64_t v6 = *((void *)&v9 + v4);
      if (v6)
      {
        if ([v2 length]) {
          [v2 appendString:@"|"];
        }
        [v2 appendString:v6];
      }
    }
    char v3 = 1;
    uint64_t v4 = 1;
  }
  while ((v5 & 1) == 0);
  for (uint64_t i = 8; i != -8; i -= 8)

  return v2;
}

BOOL _UIGetFocusCastingVisualization()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_FocusCastingVisualization,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_FocusCastingVisualization))
  {
    BOOL v1 = 0;
  }
  else
  {
    do
    {
      BOOL v1 = v0 < v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_FocusCastingVisualization, @"FocusCastingVisualization", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_FocusCastingVisualization;
    }
    while (v0 != _UIInternalPreference_FocusCastingVisualization);
  }
  return byte_1E8FD53EC && v1;
}

id _UIDatePickerFontWithMonospacedNumbers(uint64_t a1, uint64_t a2)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  long long v2 = [off_1E52D39C0 preferredFontDescriptorWithTextStyle:a1 compatibleWithTraitCollection:a2];
  uint64_t v3 = *(void *)off_1E52D6BA0;
  v14[0] = *(void *)off_1E52D6BA8;
  v14[1] = v3;
  v15[0] = &unk_1ED3F6360;
  v15[1] = &unk_1ED3F6378;
  uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:v14 count:2];
  uint64_t v5 = *(void *)off_1E52D6B70;
  double v11 = v4;
  uint64_t v12 = v5;
  uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v11 count:1];
  id v13 = v6;
  uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v13 forKeys:&v12 count:1];
  double v8 = [v2 fontDescriptorByAddingAttributes:v7];

  long long v9 = [off_1E52D39B8 fontWithDescriptor:v8 size:0.0];

  return v9;
}

void sub_186540064(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Unwind_Resume(a1);
}

void sub_186541838(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

id _UIFocusGroupIdentifierOfAssociatedSearchTextFieldForView(void *a1)
{
  uint64_t v1 = [a1 _viewControllerForAncestor];
  if (!v1)
  {
LABEL_8:
    uint64_t v3 = 0;
    goto LABEL_12;
  }
  long long v2 = (void *)v1;
  while (1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v3 = v2;
      goto LABEL_12;
    }
    uint64_t v3 = [v2 presentedViewController];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_7;
    }
    uint64_t v4 = [v3 searchResultsController];
    if ((void *)v4 == v2) {
      break;
    }
    uint64_t v5 = (void *)v4;
    uint64_t v6 = [v3 searchResultsController];

    if (!v6) {
      goto LABEL_11;
    }
LABEL_7:
    uint64_t v7 = [v2 parentViewController];

    long long v2 = (void *)v7;
    if (!v7) {
      goto LABEL_8;
    }
  }

LABEL_11:
LABEL_12:
  double v8 = [v3 searchBar];
  long long v9 = [v8 _searchBarTextField];
  uint64_t v10 = [v9 focusGroupIdentifier];

  return v10;
}

id _UIFirstResponderCandidateForEnvironment(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    long long v9 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v10 = [NSString stringWithUTF8String:"UIResponder * _Nullable _UIFirstResponderCandidateForEnvironment(id<UIFocusEnvironment>  _Nonnull __strong)"];
    [v9 handleFailureInFunction:v10, @"_UIFocusPlatformHelper.m", 62, @"Invalid parameter not satisfying: %@", @"environment" file lineNumber description];
  }
  id v2 = v1;
  if ((objc_opt_respondsToSelector() & 1) != 0
    && ([v2 _focusResponderForwardingTarget], (uint64_t v3 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v4 = (id)v3;
  }
  else
  {
    uint64_t v14 = 0;
    double v15 = &v14;
    uint64_t v16 = 0x3032000000;
    uint64_t v17 = __Block_byref_object_copy__168;
    double v18 = __Block_byref_object_dispose__168;
    id v19 = 0;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = ___UIFocusEnvironmentContainingResponder_block_invoke;
    v13[3] = &unk_1E52EDC68;
    void v13[4] = &v14;
    _UIFocusEnvironmentEnumerateAncestorEnvironments(v2, v13);
    id v4 = (id)v15[5];
    _Block_object_dispose(&v14, 8);

    if (!v4)
    {
      _UIFocusEnvironmentContainingView(v2);
      id v4 = (id)objc_claimAutoreleasedReturnValue();
      if (!v4)
      {
        id v5 = v2;
        if (!v1)
        {
          double v11 = [MEMORY[0x1E4F28B00] currentHandler];
          uint64_t v12 = [NSString stringWithUTF8String:"UIWindowScene * _Nullable _UIWindowSceneForEnvironment(id<UIFocusEnvironment>  _Nonnull __strong)"];
          [v11 handleFailureInFunction:v12, @"_UIFocusPlatformHelper.m", 124, @"Invalid parameter not satisfying: %@", @"environment" file lineNumber description];
        }
        uint64_t v6 = +[_UIFocusSystemSceneComponent sceneComponentForEnvironment:v5];
        uint64_t v7 = [v6 _windowScene];

        id v4 = [v7 keyWindow];
      }
    }
  }

  return v4;
}

void sub_1865496FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIFocusClosestFocusableViewToRectInView(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  if (!v9)
  {
    double v28 = [MEMORY[0x1E4F28B00] currentHandler];
    double v29 = objc_msgSend(NSString, "stringWithUTF8String:", "UIView * _Nullable _UIFocusClosestFocusableViewToRectInView(UIView * _Nonnull __strong, CGRect)");
    [v28 handleFailureInFunction:v29, @"_UIFocusPlatformHelper.m", 83, @"Invalid parameter not satisfying: %@", @"containingView" file lineNumber description];
  }
  [v9 bounds];
  double v11 = v10;
  double v13 = v12;
  double v15 = v14;
  double v17 = v16;
  if (objc_msgSend(v9, "__isKindOfUIScrollView"))
  {
    [v9 visibleBounds];
    double v11 = v18;
    double v13 = v19;
    double v15 = v20;
    double v17 = v21;
  }
  int v22 = [_UIFocusMap alloc];
  uint64_t v23 = [v9 _focusSystem];
  uint64_t v24 = [(_UIFocusMap *)v22 initWithFocusSystem:v23 rootEnvironment:v9 coordinateSpace:v9 searchInfo:0 ignoresRootContainerClippingRect:1];

  int v25 = -[_UIFocusMap _closestFocusableItemToPoint:inRect:excludingItems:distanceMeasuringUnitPoint:](v24, "_closestFocusableItemToPoint:inRect:excludingItems:distanceMeasuringUnitPoint:", 0, a2 + a4 * 0.5, a3 + a5 * 0.5, v11, v13, v15, v17, 0.5, 0.5);
  double v26 = _UIFocusEnvironmentContainingView(v25);

  return v26;
}

uint64_t _UIFocusedSoundForItem(void *a1)
{
  id v1 = a1;
  if (_UIFocusItemIsViewOrRespondsToSelector(v1)) {
    uint64_t v2 = [v1 _focusedSound];
  }
  else {
    uint64_t v2 = _UIFocusedDefaultSoundForItem(v1);
  }
  uint64_t v3 = v2;

  return v3;
}

uint64_t _UIFocusedDefaultSoundForItem(void *a1)
{
  id v1 = a1;
  [v1 frame];
  double Width = CGRectGetWidth(v13);
  [v1 frame];
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  CGFloat v10 = v9;

  v14.origin.x = v4;
  v14.origin.y = v6;
  v14.size.width = v8;
  v14.size.height = v10;
  double Height = CGRectGetHeight(v14);
  if (Width < Height) {
    double Height = Width;
  }
  if (Height < 100.0) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t _UIViewContainsFocusableSubviews(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    CGFloat v8 = [MEMORY[0x1E4F28B00] currentHandler];
    double v9 = [NSString stringWithUTF8String:"BOOL _UIViewContainsFocusableSubviews(UIView * _Nonnull __strong)"];
    [v8 handleFailureInFunction:v9, @"_UIFocusPlatformHelper.m", 130, @"Invalid parameter not satisfying: %@", @"view" file lineNumber description];
  }
  uint64_t v2 = objc_opt_new();
  [v2 addObject:v1];
  if ([v2 count])
  {
    unint64_t v3 = 0;
    do
    {
      id v4 = (id)[v2 objectAtIndex:v3];
      uint64_t IsFocusedOrFocusable = _UIFocusItemIsFocusedOrFocusable(v4);
      if (IsFocusedOrFocusable) {
        break;
      }
      CGFloat v6 = [v4 subviews];
      [v2 addObjectsFromArray:v6];

      ++v3;
    }
    while (v3 < [v2 count]);
  }
  else
  {
    uint64_t IsFocusedOrFocusable = 0;
  }

  return IsFocusedOrFocusable;
}

BOOL _UIGetShowSceneIdentifiers()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_ShowSceneIdentifiers,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_ShowSceneIdentifiers))
  {
    BOOL v1 = 0;
  }
  else
  {
    do
    {
      BOOL v1 = v0 < v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_ShowSceneIdentifiers, @"ShowSceneIdentifiers", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_ShowSceneIdentifiers;
    }
    while (v0 != _UIInternalPreference_ShowSceneIdentifiers);
  }
  return byte_1EB25785C && v1;
}

void _UIRecursivelyCacheCommandsInMenu(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id obj = [a1 children];
  uint64_t v4 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(obj);
        }
        CGFloat v8 = *(void **)(*((void *)&v14 + 1) + 8 * v7);
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 3221225472;
        v12[2] = ___UIRecursivelyCacheCommandsInMenu_block_invoke;
        v12[3] = &unk_1E52E4B40;
        id v13 = v3;
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 3221225472;
        v10[2] = ___UIRecursivelyCacheCommandsInMenu_block_invoke_2;
        v10[3] = &unk_1E5303DB0;
        id v11 = v13;
        [v8 _acceptMenuVisit:v12 commandVisit:v10 actionVisit:0 deferredElementVisit:0];

        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }
}

void sub_18654C4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18654CED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void _UILogSetDuplicatesExisting(void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = (void *)[v3 mutableCopy];
  [v5 intersectSet:v4];
  uint64_t v6 = (void *)[v4 mutableCopy];

  [v6 intersectSet:v3];
  uint64_t v7 = *(NSObject **)(__UILogGetCategoryCachedImpl("MenuBuilder", &_UILogSetDuplicatesExisting___s_category) + 8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    int v8 = 138412546;
    double v9 = v6;
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "Duplicates existing --\n%@\n%@\nMake a symbolic breakpoint at _UIMenuBuilderError to catch this in the debugger.", (uint8_t *)&v8, 0x16u);
  }
}

void sub_18654D5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18654E370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ThrowRangeException(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)MEMORY[0x1E4F1CA00];
  uint64_t v3 = *MEMORY[0x1E4F1C4A8];
  id v4 = [NSString stringWithFormat:@"Token index %ld out of range: [0, %ld"], a1, a2);
  id v5 = [v2 exceptionWithName:v3 reason:v4 userInfo:0];

  objc_exception_throw(v5);
}

void sub_18654E9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18654F108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1865512F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _firstChildViewControllerDefiningPresentationContext(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if ([v1 definesPresentationContext]
    && ([v1 _isPresentationContextByDefault] & 1) == 0)
  {
    id v8 = v1;
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    uint64_t v2 = objc_msgSend(v1, "childViewControllers", 0);
    uint64_t v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)v11;
      while (2)
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          if (*(void *)v11 != v5) {
            objc_enumerationMutation(v2);
          }
          uint64_t v7 = _firstChildViewControllerDefiningPresentationContext(*(void *)(*((void *)&v10 + 1) + 8 * i));
          if (v7)
          {
            id v8 = (id)v7;
            goto LABEL_13;
          }
        }
        uint64_t v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }
    id v8 = 0;
LABEL_13:
  }
  return v8;
}

void sub_186554820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1865551D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v10 - 152));
  _Unwind_Resume(a1);
}

void sub_1865591A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 88));
  _Unwind_Resume(a1);
}

CGFloat _UIRenderingSurfaceTransform@<D0>(double *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CATransform3DMakeTranslation(&v12, -*a1, -a1[1], 0.0);
  CATransform3DMakeScale(&v13, a1[4], a1[4], 1.0);
  CATransform3D a = v12;
  CATransform3D v9 = v13;
  CATransform3DConcat(&v11, &a, &v9);
  long long v4 = *(_OWORD *)&v11.m33;
  a2[4] = *(_OWORD *)&v11.m31;
  a2[5] = v4;
  long long v5 = *(_OWORD *)&v11.m43;
  a2[6] = *(_OWORD *)&v11.m41;
  a2[7] = v5;
  long long v6 = *(_OWORD *)&v11.m13;
  *a2 = *(_OWORD *)&v11.m11;
  a2[1] = v6;
  CGFloat result = v11.m21;
  long long v8 = *(_OWORD *)&v11.m23;
  a2[2] = *(_OWORD *)&v11.m21;
  a2[3] = v8;
  return result;
}

__IOSurface *_UIRenderingBufferCreate(void *a1, double a2, double a3)
{
  v56[2] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  long long v6 = [v5 objectForKeyedSubscript:@"dst-gamut"];
  uint64_t v7 = v6;
  if (!v6 || [v6 intValue] == -1) {
    uint64_t v8 = _UIRenderingDefaultGamut(0);
  }
  else {
    uint64_t v8 = (int)[v7 intValue];
  }
  CATransform3D v9 = [v5 objectForKeyedSubscript:@"dst-opaque"];
  uint64_t v10 = v9;
  if (v9) {
    LODWORD(v9) = [v9 BOOLValue];
  }
  if (v8 == 1)
  {
    float v16 = a2;
    if (v9)
    {
      unint64_t v17 = llroundf(v16);
      float v18 = a3;
      unint64_t v19 = llroundf(v18);
      uint64_t AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
      uint64_t v21 = (AlignedBytesPerRow * v19);
      uint64_t v44 = *MEMORY[0x1E4F2F2C0];
      int v22 = [NSNumber numberWithInt:v17];
      id v50 = v22;
      uint64_t v45 = *MEMORY[0x1E4F2F0E8];
      uint64_t v23 = [NSNumber numberWithInt:v19];
      id v51 = v23;
      int v52 = &unk_1ED3F63F0;
      uint64_t v24 = *MEMORY[0x1E4F2EFD8];
      uint64_t v46 = *MEMORY[0x1E4F2F150];
      uint64_t v47 = v24;
      uint64_t v53 = &unk_1ED3F6408;
      uint64_t v48 = *MEMORY[0x1E4F2EFE0];
      int v25 = [NSNumber numberWithUnsignedLong:AlignedBytesPerRow];
      uint64_t v54 = v25;
      uint64_t v49 = *MEMORY[0x1E4F2EFB8];
      double v26 = [NSNumber numberWithInt:v21];
      uint64_t v55 = v26;
      CFDictionaryRef v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v50 forKeys:&v44 count:6];
    }
    else
    {
      uint64_t v27 = llroundf(v16);
      float v28 = a3;
      uint64_t v29 = llroundf(v28);
      uint64_t v30 = *MEMORY[0x1E4F2EFE0];
      uint64_t v31 = MEMORY[0x18C106260](*MEMORY[0x1E4F2EFE0], 4 * v27);
      uint64_t v32 = v31 * v29;
      uint64_t v43 = _makeIOSurfacePlaneProperties(v27, v29, v31, 0, v31 * v29);
      uint64_t v33 = MEMORY[0x18C106260](v30, v27);
      uint64_t v34 = v33 * v29;
      uint64_t v35 = _makeIOSurfacePlaneProperties(v27, v29, v33, v32, v33 * v29);
      uint64_t v36 = v34 + v32;
      uint64_t v44 = *MEMORY[0x1E4F2F2C0];
      id v37 = [NSNumber numberWithLong:v27];
      id v50 = v37;
      uint64_t v45 = *MEMORY[0x1E4F2F0E8];
      uint64_t v38 = [NSNumber numberWithLong:v29];
      uint64_t v39 = *MEMORY[0x1E4F2F150];
      id v51 = v38;
      int v52 = &unk_1ED3F6420;
      uint64_t v40 = *MEMORY[0x1E4F2F238];
      uint64_t v46 = v39;
      uint64_t v47 = v40;
      v56[0] = v43;
      v56[1] = v35;
      id v41 = [MEMORY[0x1E4F1C978] arrayWithObjects:v56 count:2];
      uint64_t v53 = v41;
      uint64_t v48 = *MEMORY[0x1E4F2EFB8];
      uint64_t v42 = [NSNumber numberWithUnsignedLong:v36];
      uint64_t v54 = v42;
      CFDictionaryRef v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v50 forKeys:&v44 count:5];
    }
  }
  else
  {
    _makeIOSurfacePropertiesBGRA(a2, a3);
    CFDictionaryRef v11 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  }
  CATransform3D v12 = IOSurfaceCreate(v11);
  CATransform3D v13 = [v5 objectForKeyedSubscript:@"dst-scale"];
  uint64_t v14 = v13;
  if (v12 && v13) {
    IOSurfaceSetValue(v12, @"scale", v13);
  }

  return v12;
}

uint64_t _UIRenderingDefaultGamut(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1 || [v1 gamut] == -1)
  {
    long long v4 = +[UIDevice currentDevice];
    uint64_t v3 = [v4 _supportsDeepColor];
  }
  else
  {
    uint64_t v3 = [v2 gamut];
  }

  return v3;
}

uint64_t _UIRenderingBufferCreateCGImage(__IOSurface *a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v4 = [v3 objectForKeyedSubscript:@"dst-opaque"];
  id v5 = v4;
  if (v4) {
    int v6 = [v4 BOOLValue];
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = [v3 objectForKeyedSubscript:@"dst-gamut"];
  uint64_t v8 = v7;
  if (v7) {
    uint64_t v9 = [v7 integerValue];
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = [v3 objectForKeyedSubscript:@"dst-component-type"];
  CFDictionaryRef v11 = v10;
  if (v10) {
    uint64_t v12 = [v10 integerValue];
  }
  else {
    uint64_t v12 = 2 * (v9 == 1);
  }
  OSType PixelFormat = IOSurfaceGetPixelFormat(a1);
  if (PixelFormat == 1380411457 || PixelFormat == 1999843442 || PixelFormat == 1647534392)
  {
    if (v12)
    {
      uint64_t v32 = *MEMORY[0x1E4F2F400];
      uint64_t v14 = [NSNumber numberWithInt:v12];
      *(void *)&v33[0] = v14;
      uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v33 forKeys:&v32 count:1];
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = CGImageCreateFromIOSurface();

    goto LABEL_17;
  }
  uint64_t v16 = 0;
  if (IOSurfaceLock(a1, 1u, 0)) {
    goto LABEL_17;
  }
  CFRetain(a1);
  IOSurfaceIncrementUseCount(a1);
  BaseAddress = IOSurfaceGetBaseAddress(a1);
  size_t BytesPerRow = IOSurfaceGetBytesPerRow(a1);
  size_t v20 = IOSurfaceGetWidth(a1);
  size_t height = IOSurfaceGetHeight(a1);
  size_t AllocSize = IOSurfaceGetAllocSize(a1);
  CGDataProviderRef v22 = CGDataProviderCreateWithData(a1, BaseAddress, AllocSize, (CGDataProviderReleaseDataCallback)_releaseIOService);
  if (!v22)
  {
    IOSurfaceUnlock(a1, 1u, 0);
    IOSurfaceDecrementUseCount(a1);
    CFRelease(a1);
    uint64_t v16 = 0;
    goto LABEL_17;
  }
  uint64_t v23 = v22;
  size_t width = v20;
  size_t v24 = BytesPerRow;
  CFTypeRef v25 = IOSurfaceCopyValue(a1, (CFStringRef)*MEMORY[0x1E4F2F068]);
  if (v25)
  {
    double v26 = v25;
    DeviceRGB = CGColorSpaceCreateWithPropertyList(v25);
    CFRelease(v26);
  }
  else
  {
    int v38 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    memset(v33, 0, sizeof(v33));
    uint64_t v32 = 116;
    DeviceRGB = 0;
    if (!IOSurfaceGetBulkAttachments())
    {
      size_t v28 = width;
      if (BYTE11(v34) == 12) {
        DeviceRGB = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DB90]);
      }
      goto LABEL_27;
    }
  }
  size_t BytesPerRow = v24;
  size_t v28 = width;
LABEL_27:
  if (!DeviceRGB) {
    DeviceRGB = CGColorSpaceCreateDeviceRGB();
  }
  if (v6) {
    CGBitmapInfo v29 = 8198;
  }
  else {
    CGBitmapInfo v29 = 8194;
  }
  uint64_t v16 = (uint64_t)CGImageCreate(v28, height, 8uLL, 0x20uLL, BytesPerRow, DeviceRGB, v29, v23, 0, 1, kCGRenderingIntentDefault);
  CGImageSetProperty();
  CGColorSpaceRelease(DeviceRGB);
  CGDataProviderRelease(v23);
LABEL_17:

  return v16;
}

double _UIRenderingBufferGetScale(__IOSurface *a1)
{
  id v1 = (void *)IOSurfaceCopyValue(a1, @"scale");
  uint64_t v2 = v1;
  if (v1)
  {
    [v1 doubleValue];
    double v4 = v3;
  }
  else
  {
    double v4 = 0.0;
  }

  return v4;
}

uint64_t _UIRenderingSlotGetTypeID()
{
  if (qword_1EB262528 != -1) {
    dispatch_once(&qword_1EB262528, &__block_literal_global_5_5);
  }
  return _MergedGlobals_1202;
}

void _renderingSlotFinalize(uint64_t a1)
{
  [*(id *)(a1 + 16) deleteSlot:*(unsigned int *)(a1 + 24)];
  uint64_t v2 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
}

uint64_t _UIRenderingSlotCreate(void *a1, double a2, double a3)
{
  id v5 = a1;
  int v6 = [v5 objectForKeyedSubscript:@"context"];
  uint64_t v7 = v6;
  if (!v6)
  {
    if (qword_1EB262538 != -1) {
      dispatch_once(&qword_1EB262538, &__block_literal_global_35_2);
    }
    uint64_t v7 = (void *)qword_1EB262530;
  }
  id v8 = v7;

  uint64_t v9 = [v5 objectForKeyedSubscript:@"dst-scale"];
  uint64_t v10 = [v5 objectForKeyedSubscript:@"dst-gamut"];
  CFDictionaryRef v11 = [v5 objectForKeyedSubscript:@"dst-opaque"];

  if (v10)
  {
    uint64_t v12 = (int)[v10 intValue];
    if (v11)
    {
LABEL_7:
      uint64_t v13 = [v11 BOOLValue] ^ 1;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v12 = -1;
    if (v11) {
      goto LABEL_7;
    }
  }
  uint64_t v13 = 1;
LABEL_10:
  if (v12 == -1) {
    int v14 = objc_msgSend(v8, "createImageSlot:hasAlpha:", v13, a2, a3);
  }
  else {
    int v14 = objc_msgSend(v8, "createImageSlot:hasAlpha:extendedColors:", v13, v12 != 0, a2, a3);
  }
  int v15 = v14;
  if (v14)
  {
    if (qword_1EB262528 != -1) {
      dispatch_once(&qword_1EB262528, &__block_literal_global_5_5);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    objc_storeStrong((id *)(Instance + 16), v8);
    *(_DWORD *)(Instance + 24) = v15;
    if (v9) {
      [v9 doubleValue];
    }
    else {
      uint64_t v17 = 0;
    }
    *(void *)(Instance + 32) = v17;
  }
  else
  {
    uint64_t Instance = 0;
  }

  return Instance;
}

uint64_t _UIRenderingSlotGetName(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

id _UIRenderingSlotGetObject(uint64_t a1)
{
  id v1 = [MEMORY[0x1E4F39B58] objectForSlot:*(unsigned int *)(a1 + 24)];
  if (!v1)
  {
    double v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v4 = [NSString stringWithUTF8String:"id  _Nonnull _UIRenderingSlotGetObject(const _UIRenderingSlotRef _Nonnull)"];
    [v3 handleFailureInFunction:v4 file:@"UIRendering.m" lineNumber:357 description:@"Failed to get proxy object for rendering slot."];
  }
  return v1;
}

double _UIRenderingSlotGetScale(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double _UIRenderingDestinationGetScale(double *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (IOSurfaceGetTypeID() == v2)
  {
    return _UIRenderingBufferGetScale((__IOSurface *)a1);
  }
  else
  {
    if (qword_1EB262528 != -1) {
      dispatch_once(&qword_1EB262528, &__block_literal_global_5_5);
    }
    if (_MergedGlobals_1202 != v2) {
      _unsupportedDestinationType(v2);
    }
    return a1[4];
  }
}

id _UIRenderingDestinationGetContentsObject(void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (IOSurfaceGetTypeID() == v2)
  {
    id v3 = a1;
  }
  else
  {
    if (qword_1EB262528 != -1) {
      dispatch_once(&qword_1EB262528, &__block_literal_global_5_5);
    }
    if (_MergedGlobals_1202 != v2) {
      _unsupportedDestinationType(v2);
    }
    _UIRenderingSlotGetObject((uint64_t)a1);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

unsigned int *_UIRenderingDestinationGetSnapshotDestinationObject(unsigned int *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (IOSurfaceGetTypeID() == v2)
  {
    id v3 = a1;
  }
  else
  {
    if (qword_1EB262528 != -1) {
      dispatch_once(&qword_1EB262528, &__block_literal_global_5_5);
    }
    if (_MergedGlobals_1202 != v2) {
      _unsupportedDestinationType(v2);
    }
    id v3 = [NSNumber numberWithUnsignedInt:a1[6]];
  }
  return v3;
}

id _makeIOSurfacePropertiesBGRA(double a1, double a2)
{
  v16[6] = *MEMORY[0x1E4F143B8];
  float v2 = a1;
  unint64_t v3 = llroundf(v2);
  float v4 = a2;
  unint64_t v5 = llroundf(v4);
  uint64_t AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
  uint64_t v7 = (AlignedBytesPerRow * v5);
  v15[0] = *MEMORY[0x1E4F2F2C0];
  id v8 = [NSNumber numberWithLong:v3];
  v16[0] = v8;
  v15[1] = *MEMORY[0x1E4F2F0E8];
  uint64_t v9 = [NSNumber numberWithLong:v5];
  v16[1] = v9;
  v16[2] = &unk_1ED3F63C0;
  uint64_t v10 = *MEMORY[0x1E4F2EFD8];
  v15[2] = *MEMORY[0x1E4F2F150];
  void v15[3] = v10;
  v16[3] = &unk_1ED3F63D8;
  v15[4] = *MEMORY[0x1E4F2EFE0];
  CFDictionaryRef v11 = [NSNumber numberWithUnsignedLong:AlignedBytesPerRow];
  void v16[4] = v11;
  v15[5] = *MEMORY[0x1E4F2EFB8];
  uint64_t v12 = [NSNumber numberWithInt:v7];
  v16[5] = v12;
  uint64_t v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:v15 count:6];

  return v13;
}

id _makeIOSurfacePlaneProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v17[5] = *MEMORY[0x1E4F143B8];
  v16[0] = *MEMORY[0x1E4F2F258];
  uint64_t v9 = [NSNumber numberWithUnsignedLong:a1];
  v17[0] = v9;
  v16[1] = *MEMORY[0x1E4F2F220];
  uint64_t v10 = [NSNumber numberWithUnsignedLong:a2];
  v17[1] = v10;
  v16[2] = *MEMORY[0x1E4F2F178];
  CFDictionaryRef v11 = [NSNumber numberWithUnsignedLong:a3];
  v17[2] = v11;
  v16[3] = *MEMORY[0x1E4F2F240];
  uint64_t v12 = [NSNumber numberWithUnsignedLong:a4];
  v17[3] = v12;
  void v16[4] = *MEMORY[0x1E4F2F248];
  uint64_t v13 = [NSNumber numberWithUnsignedLong:a5];
  v17[4] = v13;
  int v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:5];

  return v14;
}

void _releaseIOService(__IOSurface *a1)
{
  IOSurfaceUnlock(a1, 1u, 0);
  IOSurfaceDecrementUseCount(a1);
  CFRelease(a1);
}

void ___renderingSlotDefaultContext_block_invoke()
{
  void v7[2] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F39E80];
  v6[0] = *MEMORY[0x1E4F39E60];
  v6[1] = v0;
  v7[0] = @"RenderingSlotDefaultContext";
  v7[1] = MEMORY[0x1E4F1CC38];
  id v1 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:v6 count:2];
  uint64_t v2 = [MEMORY[0x1E4F39B58] remoteContextWithOptions:v1];
  unint64_t v3 = (void *)qword_1EB262530;
  qword_1EB262530 = v2;

  if (!qword_1EB262530)
  {
    float v4 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v5 = [NSString stringWithUTF8String:"CAContext * _Nonnull _renderingSlotDefaultContext(void)_block_invoke"];
    [v4 handleFailureInFunction:v5 file:@"UIRendering.m" lineNumber:284 description:@"Failed to create rendering slot default CAContext."];
  }
}

double _UIPlatterLiftScaleForEdgeDimensions(double a1)
{
  int v2 = _UIInternalPreferenceUsesDefault_1((int *)&_MergedGlobals_918, @"UIDragPlatterLiftDimension");
  double v3 = *(double *)&qword_1EB257868 + *(double *)&qword_1EB257868;
  if (v2) {
    double v3 = 12.0;
  }
  double v4 = (v3 + a1) / a1;
  if (_UIInternalPreferenceUsesDefault_1((int *)&unk_1EB257870, @"UIDragPlatterLiftedMinScale"))double v5 = 1.01; {
  else
  }
    double v5 = *(double *)&qword_1EB257878;
  int v6 = _UIInternalPreferenceUsesDefault_1((int *)&unk_1EB257880, @"UIDragPlatterLiftedMaxScale");
  double v7 = *(double *)&qword_1EB257888;
  if (v6) {
    double v7 = 1.1;
  }
  return fmax(v5, fmin(v4, v7));
}

CATransform3D *_UISnapshotContainerTransform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>, double a5@<D0>, double a6@<D1>, __n128 a7@<Q2>, __n128 a8@<Q3>)
{
  double v9 = a8.n128_f64[0];
  double v10 = a7.n128_f64[0];
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  double v14 = 0.0;
  double v15 = 0.0;
  if (a2 != 1)
  {
    if (a2 == 3)
    {
      double v15 = 1.57079633;
    }
    else if (a2 == 4)
    {
      double v15 = -1.57079633;
    }
    else
    {
      double v15 = 3.14159265;
      if (a2 != 2) {
        double v15 = 0.0;
      }
    }
  }
  double v33 = v15;
  if (a3 != 1)
  {
    switch(a3)
    {
      case 3:
        double v14 = 1.57079633;
        break;
      case 4:
        double v14 = -1.57079633;
        break;
      case 2:
        double v14 = 3.14159265;
        break;
      default:
        double v14 = 0.0;
        break;
    }
  }
  int v16 = _orientationDistance_angles[a1];
  int v17 = _orientationDistance_angles[a2];
  BOOL v18 = __OFSUB__(v17, v16);
  int v19 = v17 - v16;
  if (v19 < 0 != v18) {
    v19 += 4;
  }
  size_t v20 = (double (**)(double, double, double, double))((char *)&_UISnapshotRectOriginForOrientation_origins
                                                               + 16 * v19);
  double v21 = ((double (*)(double, double, __n128, __n128))*v20)(a5, a6, a7, a8);
  double v22 = v20[1](a5, a6, v10, v9);
  int v23 = _orientationDistance_angles[a3];
  BOOL v18 = __OFSUB__(v23, v16);
  int v24 = v23 - v16;
  if (v24 < 0 != v18) {
    v24 += 4;
  }
  CFTypeRef v25 = (double (**)(double, double, double, double))((char *)&_UISnapshotRectOriginForOrientation_origins
                                                               + 16 * v24);
  double v26 = (*v25)(a5, a6, v10, v9);
  CGFloat v27 = v25[1](a5, a6, v10, v9) - a6;
  CATransform3DMakeTranslation(&v38, -v21, -v22, 0.0);
  CATransform3DMakeRotation(&v39, v14 - v33, 0.0, 0.0, 1.0);
  CATransform3DMakeTranslation(&v40, v26 - a5, v27, 0.0);
  CATransform3D a = v38;
  CATransform3D b = v39;
  CATransform3DConcat(&v37, &a, &b);
  CATransform3D b = v37;
  CATransform3D v34 = v40;
  CGFloat result = CATransform3DConcat(&a, &b, &v34);
  *(_OWORD *)&v37.m41 = *(_OWORD *)&a.m41;
  *(_OWORD *)&v37.m43 = *(_OWORD *)&a.m43;
  *(_OWORD *)&v37.m11 = *(_OWORD *)&a.m11;
  *(_OWORD *)&v37.m13 = *(_OWORD *)&a.m13;
  *(_OWORD *)&v37.m21 = *(_OWORD *)&a.m21;
  *(_OWORD *)&v37.m23 = *(_OWORD *)&a.m23;
  long long v29 = *(_OWORD *)&a.m33;
  a4[4] = *(_OWORD *)&a.m31;
  a4[5] = v29;
  long long v30 = *(_OWORD *)&v37.m43;
  a4[6] = *(_OWORD *)&v37.m41;
  a4[7] = v30;
  long long v31 = *(_OWORD *)&v37.m13;
  *a4 = *(_OWORD *)&v37.m11;
  a4[1] = v31;
  long long v32 = *(_OWORD *)&v37.m23;
  a4[2] = *(_OWORD *)&v37.m21;
  a4[3] = v32;
  return result;
}

id _makeUISceneViewForLiveResize(void *a1)
{
  id v1 = a1;
  [v1 bounds];
  int v6 = _UISnapshotScreenAtViewRectAfterCommit(v1, 0, v2, v3, v4, v5);

  [v6 setAutoresizingMask:18];
  [v6 setUserInteractionEnabled:0];
  double v7 = [v6 layer];
  [v7 setDisableUpdateMask:2];

  return v6;
}

id _UISnapshotScreenAtViewRectAfterCommit(void *a1, int a2, double a3, double a4, double a5, double a6)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  uint64_t v12 = [v11 _window];
  uint64_t v13 = v12;
  if (v12)
  {
    double v14 = [v12 windowScene];
    double v15 = v14;
    if (v14)
    {
      int v16 = [v14 _effectiveUISettings];
      int v17 = [v16 hostContextIdentifierForSnapshotting];
      uint64_t v18 = [v16 scenePresenterRenderIdentifierForSnapshotting];
      if (v17 && (uint64_t v19 = v18) != 0)
      {
        size_t v20 = [v11 layer];
        long long v21 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
        long long v45 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
        long long v46 = v21;
        long long v22 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
        long long v47 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
        long long v48 = v22;
        long long v23 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
        *(_OWORD *)long long buf = *MEMORY[0x1E4F39B10];
        *(_OWORD *)&uint8_t buf[16] = v23;
        long long v24 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
        long long v43 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
        long long v44 = v24;
        CALayerMapGeometry();

        CFTypeRef v25 = [v11 _screen];
        long long v38 = v45;
        long long v39 = v46;
        long long v40 = v47;
        long long v41 = v48;
        long long v34 = *(_OWORD *)buf;
        long long v35 = *(_OWORD *)&buf[16];
        long long v36 = v43;
        long long v37 = v44;
        double v26 = _UISnapshotLayerIdRectAfterCommit(v17, v19, v25, &v34, a2, a3, a4, a5, a6);
      }
      else
      {
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        memset(buf, 0, sizeof(buf));
        long long v31 = objc_msgSend(v11, "_screen", _makeViewSnapshotTransform(buf, v11));
        long long v32 = [v15 _visibleWindows];
        long long v38 = v45;
        long long v39 = v46;
        long long v40 = v47;
        long long v41 = v48;
        long long v34 = *(_OWORD *)buf;
        long long v35 = *(_OWORD *)&buf[16];
        long long v36 = v43;
        long long v37 = v44;
        double v26 = _UISnapshotScreenWindowsRectAfterCommit(v31, v32, &v34, a2, a3, a4, a5, a6);
      }
    }
    else
    {
      long long v29 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB2625B0) + 8);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        long long v30 = v29;
        *(_DWORD *)long long buf = 134218754;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = objc_opt_class();
        *(_WORD *)&buf[22] = 2048;
        *(void *)&buf[24] = v13;
        LOWORD(v43) = 2112;
        *(void *)((char *)&v43 + 2) = objc_opt_class();
        _os_log_impl(&dword_1853B0000, v30, OS_LOG_TYPE_ERROR, "Application screen snapshot requires view (%p, %@) window (%p, %@) to have a scene.", buf, 0x2Au);
      }
      double v26 = 0;
    }
  }
  else
  {
    CGFloat v27 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB2625A8) + 8);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      size_t v28 = v27;
      *(_DWORD *)long long buf = 134218242;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = objc_opt_class();
      _os_log_impl(&dword_1853B0000, v28, OS_LOG_TYPE_ERROR, "Snapshot at view rect requires view (%p, %@) to be in a window.", buf, 0x16u);
    }
    double v26 = 0;
  }

  return v26;
}

BOOL _UIViewCanBeRenderedAfterCommit(void *a1, int a2)
{
  if (a2) {
    return ([MEMORY[0x1E4F39CF8] currentState] & 8) == 0;
  }
  double v3 = [a1 layer];
  double v4 = [v3 context];
  BOOL v2 = v4 != 0;

  return v2;
}

id _UIRenderViewImageAfterCommit(void *a1, void *a2, int a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  if (v5)
  {
    double v7 = [v5 layer];
    id v8 = v7;
    if (a3)
    {
      double v9 = [v7 context];

      id v10 = &__block_literal_global_75_0;
      if (v9)
      {
        id v11 = 0;
      }
      else
      {
        id v32 = &__block_literal_global_75_0;
        id v11 = _moveViewToTemporaryWindow(v5, (uint64_t)&v32);
        id v10 = v32;
        if (!v11)
        {
          double v26 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB262578) + 8);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            CGFloat v27 = v26;
            uint64_t v28 = objc_opt_class();
            *(_DWORD *)long long buf = 134218242;
            *(void *)&uint8_t buf[4] = v5;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v28;
            _os_log_impl(&dword_1853B0000, v27, OS_LOG_TYPE_ERROR, "Rendering a window (%p, %@) requires it to be in a foreground scene.", buf, 0x16u);
          }
          id v13 = 0;
          goto LABEL_28;
        }
      }
LABEL_14:
      *(void *)long long buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000;
      long long v38 = __Block_byref_object_copy__170;
      long long v39 = __Block_byref_object_dispose__170;
      id v40 = 0;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 3221225472;
      aBlock[2] = ___UIRenderViewImageAfterCommit_block_invoke_77;
      aBlock[3] = &unk_1E5303FA0;
      void aBlock[4] = v5;
      void aBlock[5] = v6;
      long long v31 = buf;
      id v10 = v10;
      id v30 = v10;
      int v17 = _Block_copy(aBlock);
      uint64_t v18 = v17;
      if (a3)
      {
        if (!v11) {
          goto LABEL_21;
        }
        if (qword_1EB262618 != -1) {
          dispatch_once(&qword_1EB262618, &__block_literal_global_150_1);
        }
        if (_MergedGlobals_1203)
        {
          uint64_t v19 = [v8 context];
          BOOL v20 = v19 == 0;
        }
        else
        {
LABEL_21:
          uint64_t v19 = 0;
          BOOL v20 = 1;
        }
        if ((_performAfterContextCommitUnderCoverAllowDefer(v19, v20, 0, v18) & 1) == 0)
        {
          long long v21 = *(id *)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB262580) + 8);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            uint64_t v22 = objc_opt_class();
            *(_DWORD *)double v33 = 134218242;
            id v34 = v5;
            __int16 v35 = 2112;
            uint64_t v36 = v22;
            _os_log_impl(&dword_1853B0000, v21, OS_LOG_TYPE_ERROR, "View (%p, %@) drawing with afterScreenUpdates:YES inside CoreAnimation commit is not supported.", v33, 0x16u);
          }
        }
      }
      else
      {
        (*((void (**)(void *))v17 + 2))(v17);
      }
      id v13 = *(id *)(*(void *)&buf[8] + 40);

      _Block_object_dispose(buf, 8);
LABEL_28:

LABEL_32:
      goto LABEL_33;
    }
    if ([v7 hasBeenCommitted])
    {
      double v14 = [v8 context];

      if (v14)
      {
        id v11 = 0;
        id v10 = &__block_literal_global_75_0;
        goto LABEL_14;
      }
      long long v23 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB262570) + 8);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        long long v24 = v23;
        *(_DWORD *)long long buf = 134218242;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = objc_opt_class();
        _os_log_impl(&dword_1853B0000, v24, OS_LOG_TYPE_ERROR, "Rendering a view (%p, %@) that is not in a visible window requires afterScreenUpdates:YES.", buf, 0x16u);
      }
    }
    else
    {
      double v15 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB262568) + 8);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = v15;
        *(_DWORD *)long long buf = 134218242;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = objc_opt_class();
        _os_log_impl(&dword_1853B0000, v16, OS_LOG_TYPE_ERROR, "Rendering a view (%p, %@) that has not been rendered at least once requires afterScreenUpdates:YES.", buf, 0x16u);
      }
    }
    id v13 = 0;
    goto LABEL_32;
  }
  uint64_t v12 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB262560) + 8);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1853B0000, v12, OS_LOG_TYPE_ERROR, "View rendering requires non-nil view.", buf, 2u);
  }
  id v13 = 0;
LABEL_33:

  return v13;
}

void sub_18655D658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _moveViewToTemporaryWindow(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (qword_1EB262610 != -1) {
    dispatch_once(&qword_1EB262610, &__block_literal_global_147);
  }
  if (objc_opt_isKindOfClass())
  {
    id v4 = v3;
    [v4 alpha];
    uint64_t v6 = v5;
    char v7 = [v4 isHidden];
    [v4 setAlpha:0.0];
    [v4 setHidden:0];
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___moveViewToTemporaryWindow_block_invoke;
    aBlock[3] = &unk_1E52E8040;
    void aBlock[4] = v4;
    char v26 = v7;
    void aBlock[5] = v6;
    *(void *)a2 = _Block_copy(aBlock);
    id v8 = [v4 layer];
    double v9 = [v8 context];

    if (v9)
    {
      id v10 = v4;
    }
    else
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      id v10 = 0;
      *(void *)a2 = 0;
    }
  }
  else
  {
    +[UIWindowScene _keyWindowScene]();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    if (!v4)
    {
      id v11 = +[UIScreen mainScreen];
      id v4 = +[UIWindowScene _unassociatedWindowSceneForScreen:v11 create:1];
    }
    uint64_t v12 = _makeWindowMatchingUIScene(v4, 1);
    [v12 setWindowLevel:0.0];
    [v12 setAlpha:0.0];
    [v12 setHidden:0];
    id v13 = [v3 superview];
    double v14 = [v13 subviews];
    uint64_t v15 = [v14 indexOfObjectIdenticalTo:v3];

    int v16 = _UIViewPotentiallyDisrubtibleConstraintsForView(v3, v13, v12);
    [v12 addSubview:v3];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = ___moveViewToTemporaryWindow_block_invoke_2;
    v21[3] = &unk_1E52DAD48;
    v21[4] = v12;
    v21[5] = v3;
    long long v23 = v16;
    uint64_t v24 = v15;
    id v22 = v13;
    id v17 = v16;
    id v18 = v13;
    *(void *)a2 = _Block_copy(v21);
    uint64_t v19 = v23;
    id v10 = v12;
  }
  return v10;
}

__IOSurface *_UIRenderView(void *a1, void *a2, void *a3)
{
  v146[4] = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = [v5 layer];
  if ([v8 hasBeenCommitted])
  {
    double v9 = [v5 _screen];
    id v10 = [v8 context];

    if (!v10 || !v9)
    {
      id v34 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB2625D8) + 8);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        __int16 v35 = v34;
        uint64_t v36 = objc_opt_class();
        [v8 context];
        v38 = id v37 = v7;
        long long v39 = "has";
        LODWORD(buf.m11) = 134218498;
        *(void *)((char *)&buf.m11 + 4) = v5;
        if (!v38) {
          long long v39 = "no";
        }
        WORD2(buf.m12) = 2112;
        *(void *)((char *)&buf.m12 + 6) = v36;
        HIWORD(buf.m13) = 2080;
        *(void *)&buf.m14 = v39;
        _os_log_impl(&dword_1853B0000, v35, OS_LOG_TYPE_ERROR, "Rendering a view (%p, %@) that is not in a visible window is not supported (%s context).", (uint8_t *)&buf, 0x20u);

        id v7 = v37;
      }
      double v33 = 0;
      goto LABEL_72;
    }
    [v8 bounds];
    double v12 = v11;
    double v14 = v13;
    double v16 = v15;
    double v18 = v17;
    [v8 frame];
    double v20 = v19;
    double v22 = v21;
    double v24 = v23;
    double v26 = v25;
    CGFloat v27 = [v6 objectForKeyedSubscript:@"src-transform"];
    uint64_t v28 = v27;
    memset(&v137, 0, sizeof(v137));
    if (v27)
    {
      if (v27 == @"src-bounds-transform")
      {
        CATransform3DMakeTranslation(&v137, -v12, -v14, 0.0);
        goto LABEL_20;
      }
      if (v27 == @"src-frame-transform")
      {
        CALayerFrameAffineTransform();
        CATransform3DMakeAffineTransform(&buf, &m);
        CATransform3DMakeTranslation(&v141, -v20, -v22, 0.0);
        CATransform3D a = buf;
        CATransform3D b = v141;
        CATransform3DConcat(&v135, &a, &b);
        *(_OWORD *)&v137.m31 = *(_OWORD *)&v135.m31;
        *(_OWORD *)&v137.m33 = *(_OWORD *)&v135.m33;
        *(_OWORD *)&v137.m41 = *(_OWORD *)&v135.m41;
        *(_OWORD *)&v137.m43 = *(_OWORD *)&v135.m43;
        *(_OWORD *)&v137.m11 = *(_OWORD *)&v135.m11;
        *(_OWORD *)&v137.m13 = *(_OWORD *)&v135.m13;
        long long v29 = *(_OWORD *)&v135.m21;
        long long v30 = *(_OWORD *)&v135.m23;
      }
      else
      {
        [(__CFString *)v27 CATransform3DValue];
        *(_OWORD *)&v137.m31 = *(_OWORD *)&buf.m31;
        *(_OWORD *)&v137.m33 = *(_OWORD *)&buf.m33;
        *(_OWORD *)&v137.m41 = *(_OWORD *)&buf.m41;
        *(_OWORD *)&v137.m43 = *(_OWORD *)&buf.m43;
        *(_OWORD *)&v137.m11 = *(_OWORD *)&buf.m11;
        *(_OWORD *)&v137.m13 = *(_OWORD *)&buf.m13;
        long long v29 = *(_OWORD *)&buf.m21;
        long long v30 = *(_OWORD *)&buf.m23;
      }
    }
    else
    {
      long long v40 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
      *(_OWORD *)&v137.m31 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
      *(_OWORD *)&v137.m33 = v40;
      long long v41 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
      *(_OWORD *)&v137.m41 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
      *(_OWORD *)&v137.m43 = v41;
      long long v42 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
      *(_OWORD *)&v137.m11 = *MEMORY[0x1E4F39B10];
      *(_OWORD *)&v137.m13 = v42;
      long long v29 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
      long long v30 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
    }
    *(_OWORD *)&v137.m21 = v29;
    *(_OWORD *)&v137.m23 = v30;
LABEL_20:
    long long v43 = [v6 objectForKeyedSubscript:@"src-rect"];
    v128 = v43;
    if (v43)
    {
      [v43 CGRectValue];
LABEL_22:
      double v117 = v44;
      double v14 = v45;
      double v16 = v46;
      double v18 = v47;
      goto LABEL_23;
    }
    if (v28)
    {
      if (v28 == @"src-bounds-transform")
      {
        double v14 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
        double v117 = *MEMORY[0x1E4F1DAD8];
      }
      else
      {
        if (v28 != @"src-frame-transform")
        {
          CATransform3D buf = v137;
          CATransform3DGetAffineTransform(&v132, &buf);
          v147.origin.x = v12;
          v147.origin.y = v14;
          v147.size.size_t width = v16;
          v147.size.size_t height = v18;
          *(CGRect *)&double v44 = CGRectApplyAffineTransform(v147, &v132);
          goto LABEL_22;
        }
        double v14 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
        double v117 = *MEMORY[0x1E4F1DAD8];
        double v16 = v24;
        double v18 = v26;
      }
    }
    else
    {
      double v117 = v12;
    }
LABEL_23:
    long long v48 = [v6 objectForKeyedSubscript:@"dst-size"];
    uint64_t v49 = v48;
    double v50 = v16;
    double v51 = v18;
    if (v48)
    {
      [v48 CGSizeValue];
      double v50 = v52;
      double v51 = v53;
    }
    uint64_t v54 = [v6 objectForKeyedSubscript:@"dst-rect"];
    v126 = v54;
    uint64_t v55 = (uint64_t (**)(void, void *, double, double))v7;
    if (v54)
    {
      [v54 CGRectValue];
      CGFloat v119 = v57;
      CGFloat v121 = v56;
      double v50 = v58;
      double v51 = v59;
    }
    else
    {
      CGFloat v119 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
      CGFloat v121 = *MEMORY[0x1E4F1DAD8];
    }
    double v60 = v14;
    id v61 = [v6 objectForKeyedSubscript:@"dst-scale"];
    uint64_t v127 = v49;
    v125 = v61;
    if (v61) {
      [v61 doubleValue];
    }
    else {
      [v9 scale];
    }
    double v63 = v62;
    v123 = v28;
    uint64_t v64 = [v6 objectForKeyedSubscript:@"dst-gamut"];
    v124 = v64;
    if (!v64 || (v65 = v64, [v64 integerValue] == -1))
    {
      id v67 = v9;
      uint64_t v68 = _UIRenderingDefaultGamut(v9);
    }
    else
    {
      v66 = v65;
      id v67 = v9;
      uint64_t v68 = [v66 integerValue];
    }
    uint64_t v69 = v68;
    v145[0] = @"dst-size";
    *(double *)v131 = v50;
    *(double *)&v131[1] = v51;
    uint64_t v70 = [MEMORY[0x1E4F29238] valueWithBytes:v131 objCType:"{CGSize=dd}"];
    v146[0] = v70;
    v145[1] = @"dst-scale";
    v71 = [NSNumber numberWithDouble:v63];
    v146[1] = v71;
    v145[2] = @"dst-gamut";
    v72 = [NSNumber numberWithInteger:v69];
    v146[2] = v72;
    v145[3] = @"dst-opaque";
    uint64_t v73 = objc_msgSend(v6, "objectForKeyedSubscript:");
    uint64_t v74 = (void *)v73;
    uint64_t v75 = MEMORY[0x1E4F1CC28];
    if (v73) {
      uint64_t v75 = v73;
    }
    v146[3] = v75;
    uint64_t v76 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v146 forKeys:v145 count:4];

    id v7 = v55;
    if (v55) {
      v77 = (__IOSurface *)v55[2](v55, v76, v50 * v63, v51 * v63);
    }
    else {
      v77 = _UIRenderingBufferCreate(v76, v50 * v63, v51 * v63);
    }
    double v33 = v77;
    v78 = v76;
    if (v77)
    {
      CFTypeID v79 = CFGetTypeID(v77);
      if (IOSurfaceGetTypeID() == v79)
      {
        double v80 = 1.0;
        double v81 = 1.0;
        if (v50 != v16)
        {
          double v81 = 0.0;
          if (v16 != 0.0) {
            double v81 = v50 / v16;
          }
        }
        if (v51 != v18)
        {
          double v80 = 0.0;
          if (v18 != 0.0) {
            double v80 = v51 / v18;
          }
        }
        long long v112 = v76;
        id v114 = v7;
        memset(&v135, 0, sizeof(v135));
        CATransform3D buf = v137;
        CATransform3DMakeTranslation(&v141, -v117, -v60, 0.0);
        CATransform3DMakeScale(&v142, v81, v80, 1.0);
        CATransform3DMakeTranslation(&v143, v121, v119, 0.0);
        CATransform3DMakeScale(&v144, v63, v63, 1.0);
        CATransform3D b = buf;
        CATransform3D v130 = v141;
        CATransform3DConcat(&a, &b, &v130);
        for (uint64_t i = 256; i != 640; i += 128)
        {
          CATransform3D v130 = a;
          long long v83 = *(_OWORD *)((char *)&buf.m33 + i);
          *(_OWORD *)&v129.m31 = *(_OWORD *)((char *)&buf.m31 + i);
          *(_OWORD *)&v129.m33 = v83;
          long long v84 = *(_OWORD *)((char *)&buf.m43 + i);
          *(_OWORD *)&v129.m41 = *(_OWORD *)((char *)&buf.m41 + i);
          *(_OWORD *)&v129.m43 = v84;
          long long v85 = *(_OWORD *)((char *)&buf.m13 + i);
          *(_OWORD *)&v129.m11 = *(_OWORD *)((char *)&buf.m11 + i);
          *(_OWORD *)&v129.m13 = v85;
          long long v86 = *(_OWORD *)((char *)&buf.m23 + i);
          *(_OWORD *)&v129.m21 = *(_OWORD *)((char *)&buf.m21 + i);
          *(_OWORD *)&v129.m23 = v86;
          CATransform3DConcat(&b, &v130, &v129);
          CATransform3D a = b;
        }
        CATransform3D v135 = a;
        uint64_t v87 = *MEMORY[0x1E4F3A538];
        v139[0] = *MEMORY[0x1E4F3A558];
        uint64_t v88 = *MEMORY[0x1E4F3A4F8];
        v138[0] = v87;
        v138[1] = v88;
        long long v122 = [v67 _name];
        v139[1] = v122;
        v138[2] = *MEMORY[0x1E4F3A4E0];
        v89 = NSNumber;
        long long v120 = [v8 context];
        long long v118 = objc_msgSend(v89, "numberWithUnsignedInt:", objc_msgSend(v120, "contextId"));
        v139[2] = v118;
        v138[3] = *MEMORY[0x1E4F3A530];
        v90 = [NSNumber numberWithUnsignedLongLong:v8];
        uint64_t v91 = *MEMORY[0x1E4F3A4F0];
        v139[3] = v90;
        v139[4] = v33;
        uint64_t v92 = *MEMORY[0x1E4F3A588];
        v138[4] = v91;
        v138[5] = v92;
        CATransform3D buf = v135;
        uint64_t v93 = [MEMORY[0x1E4F29238] valueWithCATransform3D:&buf];
        v139[5] = v93;
        v138[6] = *MEMORY[0x1E4F3A578];
        uint64_t v94 = objc_msgSend(v6, "objectForKeyedSubscript:");
        uint64_t v95 = (void *)v94;
        uint64_t v96 = MEMORY[0x1E4F1CC38];
        if (v94) {
          uint64_t v97 = v94;
        }
        else {
          uint64_t v97 = MEMORY[0x1E4F1CC38];
        }
        v139[6] = v97;
        v138[7] = *MEMORY[0x1E4F3A528];
        uint64_t v98 = objc_msgSend(v6, "objectForKeyedSubscript:", v112, v114);
        v99 = (void *)v98;
        if (v98) {
          uint64_t v100 = v98;
        }
        else {
          uint64_t v100 = v96;
        }
        v139[7] = v100;
        uint64_t v101 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v139 forKeys:v138 count:8];
        long long v116 = v67;
        uint64_t v102 = -[UIScreen _appendSnapshotDisplaySystemIdentifierToOptionsIfNeeded:](v67, v101);

        v103 = (void *)v102;
        if (CARenderServerSnapshot())
        {
          id v7 = v115;
          double v9 = v116;
          v104 = v123;
          v78 = v113;
        }
        else
        {
          long long v108 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB2625E8) + 8);
          v78 = v113;
          id v7 = v115;
          v104 = v123;
          if (os_log_type_enabled(v108, OS_LOG_TYPE_FAULT))
          {
            long long v109 = v108;
            uint64_t v110 = objc_opt_class();
            LODWORD(buf.m11) = 134218242;
            *(void *)((char *)&buf.m11 + 4) = v5;
            WORD2(buf.m12) = 2112;
            *(void *)((char *)&buf.m12 + 6) = v110;
            _os_log_impl(&dword_1853B0000, v109, OS_LOG_TYPE_FAULT, "Render server returned error for view (%p, %@).", (uint8_t *)&buf, 0x16u);
          }
          CFRelease(v33);
          double v33 = 0;
          double v9 = v116;
        }

        goto LABEL_71;
      }
      uint64_t v105 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB2625E0) + 8);
      double v9 = v67;
      if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
      {
        uint64_t v106 = v105;
        long long v107 = (__CFString *)CFCopyTypeIDDescription(v79);
        LODWORD(buf.m11) = 138412290;
        *(void *)((char *)&buf.m11 + 4) = v107;
        _os_log_impl(&dword_1853B0000, v106, OS_LOG_TYPE_ERROR, "Rendering into destination of type %@ not supported.", (uint8_t *)&buf, 0xCu);
      }
      CFRelease(v33);
      double v33 = 0;
    }
    else
    {
      double v9 = v67;
    }
    v104 = v123;
LABEL_71:

LABEL_72:
    goto LABEL_73;
  }
  long long v31 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB2625D0) + 8);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    id v32 = v31;
    LODWORD(buf.m11) = 134218242;
    *(void *)((char *)&buf.m11 + 4) = v5;
    WORD2(buf.m12) = 2112;
    *(void *)((char *)&buf.m12 + 6) = objc_opt_class();
    _os_log_impl(&dword_1853B0000, v32, OS_LOG_TYPE_ERROR, "Rendering a view (%p, %@) that has not been committed to render server is not supported.", (uint8_t *)&buf, 0x16u);
  }
  double v33 = 0;
LABEL_73:

  return v33;
}

uint64_t _performAfterContextCommitUnderCoverAllowDefer(void *a1, int a2, int a3, void *a4)
{
  LODWORD(v5) = a3;
  id v7 = a1;
  id v8 = a4;
  char v9 = [MEMORY[0x1E4F39CF8] currentState];
  if ((v9 & 8) != 0) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 1;
  }
  if (v5 == 1)
  {
    char v10 = v9;
    if (v7) {
      int v11 = a2;
    }
    else {
      int v11 = 1;
    }
    if (v11)
    {
      if (!dword_1EB262544++)
      {
        uint64_t v13 = objc_opt_new();
        double v14 = (void *)qword_1EB2625F0;
        qword_1EB2625F0 = v13;
      }
      _enumScenes(&__block_literal_global_162);
      if (a2)
      {
        if (!dword_1EB262548++)
        {
          uint64_t v16 = objc_opt_new();
          double v17 = (void *)qword_1EB2625F8;
          qword_1EB2625F8 = v16;

          uint64_t v18 = objc_opt_new();
          double v19 = (void *)qword_1EB262600;
          qword_1EB262600 = v18;
        }
        _enumScenes(&__block_literal_global_171_0);
      }
      double v20 = v27;
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 3221225472;
      v27[2] = ___performAfterContextCommitUnderCoverAllowDefer_block_invoke;
      v27[3] = &__block_descriptor_34_e5_v8__0l;
      char v28 = a2;
      char v29 = v11;
    }
    else
    {
      double v20 = 0;
    }
    double v21 = _Block_copy(v20);
    if ((v10 & 8) != 0)
    {
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 3221225472;
      v26[2] = ___performAfterContextCommitUnderCoverAllowDefer_block_invoke_2;
      v26[3] = &unk_1E52DE9A0;
      void v26[4] = v8;
      v26[5] = v21;
      [MEMORY[0x1E4F39CF8] addCommitHandler:v26 forPhase:5];
    }
    else
    {
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 3221225472;
      v25[2] = ___performAfterContextCommitUnderCoverAllowDefer_block_invoke_4;
      v25[3] = &unk_1E52D9F70;
      v25[4] = v7;
      [(id)UIApp _performWithUICACommitStateSnapshotting:v25];
      v8[2](v8);
      if (v21)
      {
        Current = CFRunLoopGetCurrent();
        CFRunLoopPerformBlock(Current, (CFTypeRef)*MEMORY[0x1E4F1D410], v21);
        double v23 = CFRunLoopGetCurrent();
        CFRunLoopWakeUp(v23);
      }
    }
  }
  return v5;
}

_UIReplicantView *_UISnapshotViewRectAfterCommit(void *a1, int a2, double a3, double a4, double a5, double a6)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v11 = a1;
  double v12 = v11;
  if (v11)
  {
    uint64_t v13 = [v11 layer];
    double v14 = v13;
    if (a2)
    {
      double v15 = [v13 context];

      id v16 = &__block_literal_global_84_1;
      if (v15)
      {
        double v17 = 0;
      }
      else
      {
        id v50 = &__block_literal_global_84_1;
        double v17 = _moveViewToTemporaryWindow(v12, (uint64_t)&v50);
        id v16 = v50;
        if (!v17)
        {
          long long v40 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB2625A0) + 8);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            long long v41 = v40;
            uint64_t v42 = objc_opt_class();
            *(_DWORD *)CATransform3D buf = 134218242;
            *(void *)&uint8_t buf[4] = v12;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v42;
            _os_log_impl(&dword_1853B0000, v41, OS_LOG_TYPE_ERROR, "Snapshotting a window (%p, %@) requires it to be in a foreground scene.", buf, 0x16u);
          }
          double v19 = 0;
          goto LABEL_26;
        }
      }
LABEL_16:
      id v24 = v12;
      double v25 = [v24 _screen];
      [v25 _scale];
      v52[4] = v26;

      v52[0] = a3;
      v52[1] = a4;
      v52[2] = a5;
      v52[3] = a6;
      _UIRenderingSurfaceTransform(v52, v51);
      CGFloat v27 = [[_UIReplicantView alloc] initWithSurface:v52];
      *(void *)CATransform3D buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = ___UISnapshotViewRectBlock_block_invoke;
      uint64_t v54 = &unk_1E5304010;
      id v55 = v24;
      char v28 = v27;
      double v56 = v28;
      long long v61 = v51[4];
      long long v62 = v51[5];
      long long v63 = v51[6];
      long long v64 = v51[7];
      long long v57 = v51[0];
      long long v58 = v51[1];
      long long v59 = v51[2];
      long long v60 = v51[3];
      char v29 = _Block_copy(buf);
      long long v30 = v56;
      long long v31 = v28;

      id v32 = v29;
      uint64_t v44 = MEMORY[0x1E4F143A8];
      uint64_t v45 = 3221225472;
      double v46 = ___UISnapshotViewRectAfterCommit_block_invoke_86;
      double v47 = &unk_1E52DE9A0;
      id v48 = v32;
      id v16 = v16;
      id v49 = v16;
      double v33 = _Block_copy(&v44);
      id v34 = v33;
      if (a2)
      {
        if (!v17) {
          goto LABEL_23;
        }
        if (qword_1EB262618 != -1) {
          dispatch_once(&qword_1EB262618, &__block_literal_global_150_1);
        }
        if (_MergedGlobals_1203)
        {
          __int16 v35 = objc_msgSend(v14, "context", v44, v45, v46, v47, v48);
          BOOL v36 = v35 == 0;
        }
        else
        {
LABEL_23:
          __int16 v35 = 0;
          BOOL v36 = 1;
        }
        _performAfterContextCommitUnderCoverAllowDefer(v35, v36, 1, v34);
      }
      else
      {
        (*((void (**)(void *))v33 + 2))(v33);
      }
      id v37 = v49;
      double v19 = v31;

LABEL_26:
LABEL_36:

      goto LABEL_37;
    }
    if ([v13 hasBeenCommitted])
    {
      double v20 = [v14 context];

      if (v20)
      {
        double v17 = 0;
        id v16 = &__block_literal_global_84_1;
        goto LABEL_16;
      }
      long long v38 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB262598) + 8);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        long long v39 = v38;
        *(_DWORD *)CATransform3D buf = 134218242;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = objc_opt_class();
        _os_log_impl(&dword_1853B0000, v39, OS_LOG_TYPE_ERROR, "Snapshotting a view (%p, %@) that is not in a visible window requires afterScreenUpdates:YES.", buf, 0x16u);
      }
      if (dyld_program_sdk_at_least())
      {
LABEL_30:
        double v19 = 0;
        goto LABEL_36;
      }
      double v23 = -[_UIReplicantView initWithFrame:]([_UIReplicantView alloc], "initWithFrame:", a3, a4, a5, a6);
    }
    else
    {
      double v21 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB262590) + 8);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        double v22 = v21;
        *(_DWORD *)CATransform3D buf = 134218242;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = objc_opt_class();
        _os_log_impl(&dword_1853B0000, v22, OS_LOG_TYPE_ERROR, "Snapshotting a view (%p, %@) that has not been rendered at least once requires afterScreenUpdates:YES.", buf, 0x16u);
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_30;
      }
      double v23 = [[_UIReplicantView alloc] initAsCopyOf:v12];
    }
    double v19 = v23;
    goto LABEL_36;
  }
  uint64_t v18 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB262588) + 8);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)CATransform3D buf = 0;
    _os_log_impl(&dword_1853B0000, v18, OS_LOG_TYPE_ERROR, "View snapshot requires non-nil view.", buf, 2u);
  }
  double v19 = 0;
LABEL_37:

  return v19;
}

_UIReplicantView *_UISnapshotLayerIdRectAfterCommit(int a1, uint64_t a2, void *a3, long long *a4, int a5, double a6, double a7, double a8, double a9)
{
  long long v16 = a4[5];
  *(_OWORD *)&v33[16] = a4[4];
  *(_OWORD *)&v33[32] = v16;
  long long v17 = a4[7];
  *(_OWORD *)&v33[48] = a4[6];
  *(_OWORD *)&v33[64] = v17;
  long long v18 = a4[1];
  long long v30 = *a4;
  long long v31 = v18;
  long long v19 = a4[3];
  long long v32 = a4[2];
  *(_OWORD *)double v33 = v19;
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v20 = a3;
  _UISnapshotCaptureScreen(v20, &v30, (uint64_t)v46, &v38, a6, a7, a8, a9);
  double v21 = [_UIReplicantView alloc];
  double v22 = -[_UIReplicantView initWithSurface:](v21, "initWithSurface:", v46, v30, v31, v32, *(_OWORD *)v33, *(_OWORD *)&v33[16], *(_OWORD *)&v33[32], *(_OWORD *)&v33[48], *(_OWORD *)&v33[64]);
  *(void *)&long long v30 = MEMORY[0x1E4F143A8];
  *((void *)&v30 + 1) = 3221225472;
  *(void *)&long long v31 = ___UISnapshotLayerIdRectBlock_block_invoke;
  *((void *)&v31 + 1) = &unk_1E5304038;
  int v37 = a1;
  *(void *)&long long v32 = v20;
  *(void *)double v33 = a2;
  double v23 = v22;
  *(_OWORD *)&v33[72] = v42;
  long long v34 = v43;
  long long v35 = v44;
  long long v36 = v45;
  *(_OWORD *)&v33[8] = v38;
  *(_OWORD *)&v33[24] = v39;
  *(_OWORD *)&v33[40] = v40;
  *((void *)&v32 + 1) = v23;
  *(_OWORD *)&v33[56] = v41;
  id v24 = _Block_copy(&v30);
  double v25 = (void *)*((void *)&v32 + 1);
  double v26 = v23;

  CGFloat v27 = v24;
  char v28 = v27;
  if (a5) {
    _performAfterContextCommitUnderCoverAllowDefer(0, 1, 1, v27);
  }
  else {
    v27[2](v27);
  }

  return v26;
}

CGFloat _makeViewSnapshotTransform(_OWORD *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v20 = 0;
  id v3 = a2;
  id v4 = [v3 _window];
  _windowSceneSettings(v4, &v21, &v20);

  v6.n128_u64[0] = *((void *)&v22 + 1);
  v5.n128_u64[0] = v22;
  _UISnapshotContainerTransform(1, v20, 1, &v23, *(double *)&v21, *((double *)&v21 + 1), v5, v6);
  id v7 = [v3 layer];

  long long v8 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
  *(_OWORD *)&v24.m31 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
  *(_OWORD *)&v24.m33 = v8;
  long long v9 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
  *(_OWORD *)&v24.m41 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
  *(_OWORD *)&v24.m43 = v9;
  long long v10 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
  *(_OWORD *)&v24.m11 = *MEMORY[0x1E4F39B10];
  *(_OWORD *)&v24.m13 = v10;
  long long v11 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
  *(_OWORD *)&v24.m21 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
  *(_OWORD *)&v24.m23 = v11;
  CALayerMapGeometry();

  CATransform3D a = v23;
  CATransform3D v17 = v24;
  CATransform3DConcat(&v19, &a, &v17);
  long long v12 = *(_OWORD *)&v19.m33;
  a1[4] = *(_OWORD *)&v19.m31;
  a1[5] = v12;
  long long v13 = *(_OWORD *)&v19.m43;
  a1[6] = *(_OWORD *)&v19.m41;
  a1[7] = v13;
  long long v14 = *(_OWORD *)&v19.m13;
  *a1 = *(_OWORD *)&v19.m11;
  a1[1] = v14;
  CGFloat result = v19.m21;
  long long v16 = *(_OWORD *)&v19.m23;
  a1[2] = *(_OWORD *)&v19.m21;
  a1[3] = v16;
  return result;
}

_UIReplicantView *_UISnapshotScreenWindowsRectAfterCommit(void *a1, void *a2, long long *a3, int a4, double a5, double a6, double a7, double a8)
{
  long long v14 = a3[5];
  *(_OWORD *)&v32[16] = a3[4];
  *(_OWORD *)&v32[32] = v14;
  long long v15 = a3[7];
  *(_OWORD *)&v32[48] = a3[6];
  *(_OWORD *)&v32[64] = v15;
  long long v16 = a3[1];
  long long v29 = *a3;
  long long v30 = v16;
  long long v17 = a3[3];
  long long v31 = a3[2];
  *(_OWORD *)long long v32 = v17;
  uint64_t v45 = 0;
  memset(v44, 0, sizeof(v44));
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v18 = a2;
  id v19 = a1;
  _UISnapshotCaptureScreen(v19, &v29, (uint64_t)v44, &v36, a5, a6, a7, a8);
  uint64_t v20 = _makeContextList(v18, 0);

  long long v21 = [_UIReplicantView alloc];
  long long v22 = -[_UIReplicantView initWithSurface:](v21, "initWithSurface:", v44, v29, v30, v31, *(_OWORD *)v32, *(_OWORD *)&v32[16], *(_OWORD *)&v32[32], *(_OWORD *)&v32[48], *(_OWORD *)&v32[64]);
  *(void *)&long long v29 = MEMORY[0x1E4F143A8];
  *((void *)&v29 + 1) = 3221225472;
  *(void *)&long long v30 = ___UISnapshotScreenWindowsRectBlock_block_invoke;
  *((void *)&v30 + 1) = &unk_1E5304060;
  *(void *)&long long v31 = v19;
  CATransform3D v23 = v22;
  *(_OWORD *)&v32[72] = v40;
  long long v33 = v41;
  long long v34 = v42;
  long long v35 = v43;
  *(_OWORD *)&v32[8] = v36;
  *(_OWORD *)&v32[24] = v37;
  *(_OWORD *)&v32[40] = v38;
  *(_OWORD *)&v32[56] = v39;
  *((void *)&v31 + 1) = v23;
  *(void *)long long v32 = v20;
  CATransform3D v24 = _Block_copy(&v29);
  uint64_t v25 = v23;

  double v26 = v24;
  CGFloat v27 = v26;
  if (a4) {
    _performAfterContextCommitUnderCoverAllowDefer(0, 1, 1, v26);
  }
  else {
    v26[2](v26);
  }

  return v25;
}

id _UISnapshotScreenCompatibilityRectAfterCommit(void *a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v11 = a1;
  if (v11)
  {
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    *(_OWORD *)CATransform3D buf = 0u;
    long long v42 = 0u;
    _guessScreenSnapshotTransform(buf, v11, (uint64_t)&v49);
    v52.origin.x = a3;
    v52.origin.y = a4;
    v52.size.size_t width = a5;
    v52.size.size_t height = a6;
    if (CGRectIsNull(v52))
    {
      a4 = *((double *)&v49 + 1);
      a3 = *(double *)&v49;
      a6 = *((double *)&v50 + 1);
      a5 = *(double *)&v50;
    }
    int v12 = [v11 _isMainLikeScreen];
    long long v13 = _externalKeyWindow;
    if (v12) {
      long long v13 = _keyWindow;
    }
    long long v14 = v13();
    long long v15 = [v14 windowScene];
    long long v16 = [v15 _effectiveUISettings];
    int v17 = [v16 hostContextIdentifierForSnapshotting];
    uint64_t v18 = [v16 scenePresenterRenderIdentifierForSnapshotting];
    if (v17) {
      BOOL v19 = v18 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      if (v15) {
        [v15 _visibleWindows];
      }
      else {
      long long v31 = +[UIWindow allWindowsIncludingInternalWindows:1 onlyVisibleWindows:1 forScreen:v11];
      }
      long long v37 = v45;
      long long v38 = v46;
      long long v39 = v47;
      long long v40 = v48;
      long long v33 = *(_OWORD *)buf;
      long long v34 = v42;
      long long v35 = v43;
      long long v36 = v44;
      long long v30 = _UISnapshotScreenWindowsRectAfterCommit(v11, v31, &v33, a2, a3, a4, a5, a6);
    }
    else
    {
      uint64_t v21 = v18;
      [v11 bounds];
      long long v22 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 80);
      long long v37 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 64);
      long long v38 = v22;
      long long v23 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 112);
      long long v39 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 96);
      long long v40 = v23;
      long long v24 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 16);
      long long v33 = *MEMORY[0x1E4F39B10];
      long long v34 = v24;
      long long v25 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 48);
      long long v35 = *(_OWORD *)(MEMORY[0x1E4F39B10] + 32);
      long long v36 = v25;
      long long v30 = _UISnapshotLayerIdRectAfterCommit(v17, v21, v11, &v33, a2, v26, v27, v28, v29);
    }
  }
  else
  {
    uint64_t v20 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &_UISnapshotScreenCompatibilityRectAfterCommit___s_category)+ 8);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CATransform3D buf = 0;
      _os_log_impl(&dword_1853B0000, v20, OS_LOG_TYPE_ERROR, "Screen snapshot requires non-nil screen.", buf, 2u);
    }
    long long v30 = 0;
  }

  return v30;
}

void _guessScreenSnapshotTransform(_OWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  int v6 = [v5 _isMainLikeScreen];
  id v7 = _externalKeyWindow;
  if (v6) {
    id v7 = _keyWindow;
  }
  long long v8 = v7();
  long long v9 = v8;
  if (v8)
  {
    [v8 bounds];
    double v11 = v10;
    double v13 = v12;
    uint64_t v14 = [v9 interfaceOrientation];
    int v15 = _orientationDistance_angles[[v5 _interfaceOrientation]] - _orientationDistance_angles[v14];
    if (v15) {
      double v16 = v13;
    }
    else {
      double v16 = v11;
    }
    if (v15) {
      double v17 = v11;
    }
    else {
      double v17 = v13;
    }
    double v18 = *MEMORY[0x1E4F1DAD8];
    double v19 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    *(void *)a3 = *MEMORY[0x1E4F1DAD8];
    *(double *)(a3 + _Block_object_dispose(&STACK[0x228], 8) = v19;
    *(double *)(a3 + 16) = v16;
    *(double *)(a3 + 24) = v17;
    objc_msgSend(v9, "bounds", _makeViewSnapshotTransform(&v50, v9));
    unint64_t v21 = v20;
    unint64_t v23 = v22;
    uint64_t v24 = [v9 interfaceOrientation];
    uint64_t v25 = [v5 _interfaceOrientation];
    uint64_t v26 = [v9 interfaceOrientation];
    v27.n128_u64[0] = v21;
    v28.n128_u64[0] = v23;
    _UISnapshotContainerTransform(v24, v25, v26, &v51, v18, v19, v27, v28);
    CATransform3D a = v50;
    CATransform3D v47 = v51;
    CATransform3DConcat(&v49, &a, &v47);
    long long v29 = *(_OWORD *)&v49.m33;
    a1[4] = *(_OWORD *)&v49.m31;
    a1[5] = v29;
    long long v30 = *(_OWORD *)&v49.m43;
    a1[6] = *(_OWORD *)&v49.m41;
    a1[7] = v30;
    long long v31 = *(_OWORD *)&v49.m13;
    *a1 = *(_OWORD *)&v49.m11;
    a1[1] = v31;
    long long v32 = *(_OWORD *)&v49.m23;
    a1[2] = *(_OWORD *)&v49.m21;
    a1[3] = v32;
  }
  else
  {
    [v5 _unjailedReferenceBounds];
    double v34 = v33;
    double v36 = v35;
    unint64_t v38 = v37;
    unint64_t v40 = v39;
    uint64_t v41 = [v5 _interfaceOrientation];
    if ((unint64_t)(v41 - 5) >= 0xFFFFFFFFFFFFFFFELL) {
      double v42 = *(double *)&v40;
    }
    else {
      double v42 = *(double *)&v38;
    }
    *(_OWORD *)a3 = *MEMORY[0x1E4F1DAD8];
    if ((unint64_t)(v41 - 5) >= 0xFFFFFFFFFFFFFFFELL) {
      double v43 = *(double *)&v38;
    }
    else {
      double v43 = *(double *)&v40;
    }
    *(double *)(a3 + 16) = v42;
    *(double *)(a3 + 24) = v43;
    uint64_t v44 = [v5 _interfaceOrientation];
    v45.n128_u64[0] = v38;
    v46.n128_u64[0] = v40;
    _UISnapshotContainerTransform(1, v44, 1, a1, v34, v36, v45, v46);
  }
}

id _UISnapshotWindowsAtViewRect(void *a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  double v16 = [v14 _window];

  if (v16)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    memset(buf, 0, sizeof(buf));
    double v17 = objc_msgSend(v14, "_screen", _makeViewSnapshotTransform(buf, v14));
    v22[4] = v26;
    v22[5] = v27;
    v22[6] = v28;
    v22[7] = v29;
    v22[0] = *(_OWORD *)buf;
    v22[1] = *(_OWORD *)&buf[16];
    v22[2] = v24;
    v22[3] = v25;
    double v18 = _UISnapshotWindowsRectAfterCommit(v13, v17, v22, v15, a4, a5, a6, a7);
  }
  else
  {
    double v19 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &_UISnapshotWindowsAtViewRect___s_category) + 8);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      unint64_t v20 = v19;
      *(_DWORD *)CATransform3D buf = 134218242;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = objc_opt_class();
      _os_log_impl(&dword_1853B0000, v20, OS_LOG_TYPE_ERROR, "Snapshot at view rect requires view (%p, %@) to be in a window.", buf, 0x16u);
    }
    double v18 = 0;
  }

  return v18;
}

_UIReplicantView *_UISnapshotWindowsRectAfterCommit(void *a1, void *a2, long long *a3, void *a4, double a5, double a6, double a7, double a8)
{
  id v15 = a4;
  long long v16 = a3[5];
  long long v38 = a3[4];
  long long v39 = v16;
  long long v17 = a3[7];
  long long v40 = a3[6];
  long long v41 = v17;
  long long v18 = a3[1];
  long long v34 = *a3;
  long long v35 = v18;
  long long v19 = a3[3];
  long long v36 = a3[2];
  long long v37 = v19;
  id v20 = v15;
  uint64_t v51 = 0;
  memset(v50, 0, sizeof(v50));
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v21 = a2;
  id v22 = a1;
  _UISnapshotCaptureScreen(v21, &v34, (uint64_t)v50, &v42, a5, a6, a7, a8);
  unint64_t v23 = _makeContextList(v22, &v42);

  long long v24 = [_UIReplicantView alloc];
  long long v25 = -[_UIReplicantView initWithSurface:](v24, "initWithSurface:", v50, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49);
  *(void *)&long long v34 = MEMORY[0x1E4F143A8];
  *((void *)&v34 + 1) = 3221225472;
  *(void *)&long long v35 = ___UISnapshotWindowsRectBlock_block_invoke;
  *((void *)&v35 + 1) = &unk_1E52DD450;
  *(void *)&long long v36 = v21;
  long long v26 = v25;
  *((void *)&v36 + 1) = v26;
  *(void *)&long long v37 = v23;
  *((void *)&v37 + 1) = v20;
  id v27 = v20;
  id v28 = v23;
  long long v29 = _Block_copy(&v34);
  uint64_t v30 = (void *)*((void *)&v37 + 1);
  long long v31 = v26;

  long long v32 = v29;
  v32[2]();

  return v31;
}

id _UISnapshotWindowsCompatibilityRect(void *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v11 = a1;
  id v12 = a2;
  if (v12)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)CATransform3D buf = 0u;
    long long v18 = 0u;
    _guessScreenSnapshotTransform(buf, v12, (uint64_t)&v25);
    v28.origin.x = a3;
    v28.origin.y = a4;
    v28.size.size_t width = a5;
    v28.size.size_t height = a6;
    if (CGRectIsNull(v28))
    {
      a4 = *((double *)&v25 + 1);
      a3 = *(double *)&v25;
      a6 = *((double *)&v26 + 1);
      a5 = *(double *)&v26;
    }
    void v16[4] = v21;
    void v16[5] = v22;
    v16[6] = v23;
    void v16[7] = v24;
    v16[0] = *(_OWORD *)buf;
    v16[1] = v18;
    v16[2] = v19;
    v16[3] = v20;
    id v13 = _UISnapshotWindowsRectAfterCommit(v11, v12, v16, 0, a3, a4, a5, a6);
  }
  else
  {
    id v14 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &_UISnapshotWindowsCompatibilityRect___s_category)
                       + 8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CATransform3D buf = 0;
      _os_log_impl(&dword_1853B0000, v14, OS_LOG_TYPE_ERROR, "Windows snapshot requires non-nil screen.", buf, 2u);
    }
    id v13 = 0;
  }

  return v13;
}

const void *_UIRenderDisplay(void *a1, void *a2)
{
  v81[4] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 objectForKeyedSubscript:@"enforce-secure-mode"];
  unsigned int v6 = [v5 BOOLValue];

  id v7 = [v3 objectForKeyedSubscript:@"src-screen"];
  long long v8 = v7;
  if (v7)
  {
    id v9 = v7;
  }
  else
  {
    id v9 = +[UIScreen mainScreen];
  }
  double v10 = v9;

  id v11 = [v3 objectForKeyedSubscript:@"src-orientation"];
  id v12 = [v3 objectForKeyedSubscript:@"src-rect"];
  id v13 = [v3 objectForKeyedSubscript:@"dst-scale"];
  id v14 = [v10 displayConfiguration];
  id v15 = v14;
  if (v14)
  {
    unsigned int v67 = v6;
    [v14 bounds];
    double v17 = v16;
    double v19 = v18;
    double v21 = v20;
    double v23 = v22;
    [v15 scale];
    double v25 = v24;
    if (v11)
    {
      uint64_t v26 = (int)[v11 intValue];
      if (!v12) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v26 = 1;
      if (!v12)
      {
LABEL_8:
        v71 = v4;
        uint64_t v68 = v12;
        uint64_t v69 = v11;
        if (v13)
        {
          [v13 doubleValue];
          double v25 = v31;
        }
        if ((unint64_t)(v26 - 5) >= 0xFFFFFFFFFFFFFFFELL) {
          double v32 = v23;
        }
        else {
          double v32 = v21;
        }
        v80[0] = @"dst-size";
        if ((unint64_t)(v26 - 5) >= 0xFFFFFFFFFFFFFFFELL) {
          double v33 = v21;
        }
        else {
          double v33 = v23;
        }
        *(double *)uint64_t v76 = v32;
        *(double *)&v76[1] = v33;
        long long v34 = [MEMORY[0x1E4F29238] valueWithBytes:v76 objCType:"{CGSize=dd}"];
        v81[0] = v34;
        v80[1] = @"dst-scale";
        long long v35 = [NSNumber numberWithDouble:v25];
        v81[1] = v35;
        v80[2] = @"dst-gamut";
        long long v36 = objc_msgSend(v3, "objectForKeyedSubscript:");
        long long v37 = v36;
        if (!v36)
        {
          long long v38 = NSNumber;
          unint64_t v39 = [v15 colorGamut];
          if (v39 >= 2) {
            abort();
          }
          long long v37 = [v38 numberWithInteger:v39];
        }
        uint64_t v70 = v10;
        double v40 = v32 * v25;
        double v41 = v33 * v25;
        v81[2] = v37;
        v80[3] = @"dst-opaque";
        uint64_t v42 = objc_msgSend(v3, "objectForKeyedSubscript:");
        long long v43 = (void *)v42;
        uint64_t v44 = MEMORY[0x1E4F1CC38];
        if (v42) {
          uint64_t v44 = v42;
        }
        v81[3] = v44;
        long long v45 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v81 forKeys:v80 count:4];

        if (!v36) {
        id v4 = v71;
        }
        long long v46 = (const void *)v71[2](v71, v45, v40, v41);
        long long v47 = v46;
        if (v46)
        {
          CFTypeID v48 = CFGetTypeID(v46);
          if (IOSurfaceGetTypeID() == v48)
          {
            memset(&v79, 0, sizeof(v79));
            v49.n128_f64[0] = v21;
            v50.n128_f64[0] = v23;
            _UISnapshotContainerTransform(1, v26, 1, &a, v17, v19, v49, v50);
            CATransform3DMakeScale(&b, v25, v25, 1.0);
            CATransform3DConcat(&v79, &a, &b);
            uint64_t v51 = *MEMORY[0x1E4F3A538];
            v78[0] = *MEMORY[0x1E4F3A540];
            uint64_t v52 = *MEMORY[0x1E4F3A4F8];
            v77[0] = v51;
            v77[1] = v52;
            double v53 = [v15 name];
            uint64_t v54 = *MEMORY[0x1E4F3A4F0];
            v78[1] = v53;
            v78[2] = v47;
            uint64_t v55 = *MEMORY[0x1E4F3A588];
            v77[2] = v54;
            v77[3] = v55;
            CATransform3D v73 = v79;
            double v56 = [MEMORY[0x1E4F29238] valueWithBytes:&v73 objCType:"{CATransform3D=dddddddddddddddd}"];
            v78[3] = v56;
            v77[4] = *MEMORY[0x1E4F3A508];
            long long v57 = [NSNumber numberWithBool:v67];
            v78[4] = v57;
            long long v58 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v78 forKeys:v77 count:5];
            long long v59 = -[UIScreen _appendSnapshotDisplaySystemIdentifierToOptionsIfNeeded:](v70, v58);

            if (CARenderServerSnapshot())
            {
              double v10 = v70;
              id v4 = v71;
              id v11 = v69;
            }
            else
            {
              uint64_t v65 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB2625C8) + 8);
              id v11 = v69;
              if (os_log_type_enabled(v65, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)CATransform3D buf = 0;
                _os_log_impl(&dword_1853B0000, v65, OS_LOG_TYPE_FAULT, "Render server returned error.", buf, 2u);
              }
              CFRelease(v47);
              long long v47 = 0;
              double v10 = v70;
              id v4 = v71;
            }

            goto LABEL_40;
          }
          long long v62 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB2625C0) + 8);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            long long v63 = v62;
            long long v64 = (__CFString *)CFCopyTypeIDDescription(v48);
            LODWORD(v79.m11) = 138412290;
            *(void *)((char *)&v79.m11 + 4) = v64;
            _os_log_impl(&dword_1853B0000, v63, OS_LOG_TYPE_ERROR, "Rendering into destination of type %@ not supported.", (uint8_t *)&v79, 0xCu);
          }
          CFRelease(v47);
          long long v47 = 0;
        }
        id v11 = v69;
        double v10 = v70;
LABEL_40:
        long long v60 = v68;

        goto LABEL_41;
      }
    }
    [v12 CGRectValue];
    double v17 = v27;
    double v19 = v28;
    double v21 = v29;
    double v23 = v30;
    goto LABEL_8;
  }
  long long v60 = v12;
  long long v61 = *(NSObject **)(__UILogGetCategoryCachedImpl("Snapshotting", &qword_1EB2625B8) + 8);
  if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v79.m11) = 0;
    _os_log_impl(&dword_1853B0000, v61, OS_LOG_TYPE_ERROR, "Rendering of display with missing configuration not supported.", (uint8_t *)&v79, 2u);
  }
  long long v47 = 0;
LABEL_41:

  return v47;
}

uint64_t _UISnapshotViewGetSlotId(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    BOOL v2 = [v1 _layer];
    id v3 = [v2 _slotId];
    uint64_t v4 = [v3 value];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id _keyWindow()
{
  return +[UIWindow _applicationKeyWindow];
}

id _externalKeyWindow()
{
  return +[UIWindow _externalKeyWindow];
}

uint64_t ___moveViewToTemporaryWindow_block_invoke(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isHidden] & 1) == 0) {
    [*(id *)(a1 + 32) setHidden:*(unsigned __int8 *)(a1 + 48)];
  }
  uint64_t result = [*(id *)(a1 + 32) alpha];
  if (v3 == 0.0)
  {
    double v4 = *(double *)(a1 + 40);
    id v5 = *(void **)(a1 + 32);
    return [v5 setAlpha:v4];
  }
  return result;
}

_UISnapshotWindow *_makeWindowMatchingUIScene(void *a1, uint64_t a2)
{
  id v3 = a1;
  double v4 = objc_alloc_init(_UISnapshotWindow);
  id v5 = [(UIWindow *)v4 _bindingLayer];
  [v5 setAllowsHitTesting:0];

  [(UIWindow *)v4 _setWindowHostingScene:v3];
  [(_UISnapshotWindow *)v4 set_extendsScreenSceneLifetime:a2];
  return v4;
}

void ___moveViewToTemporaryWindow_block_invoke_2(uint64_t a1)
{
  [*(id *)(a1 + 32) setHidden:1];
  BOOL v2 = [*(id *)(a1 + 40) _window];
  id v3 = *(void **)(a1 + 32);

  if (v2 == v3)
  {
    [*(id *)(a1 + 40) removeFromSuperview];
    double v4 = *(void **)(a1 + 48);
    if (v4)
    {
      [v4 insertSubview:*(void *)(a1 + 40) atIndex:*(void *)(a1 + 64)];
      id v5 = *(void **)(a1 + 56);
      _UIViewReactivatePotentiallyDisruptedConstraintsForView(v5);
    }
  }
}

void ___allowPerContextCommits_block_invoke()
{
  _UIMainBundleIdentifier();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  _MergedGlobals_1203 = [&unk_1ED3F0E20 containsObject:v0];
}

void ___performAfterContextCommitUnderCoverAllowDefer_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 32))
  {
    int v2 = dword_1EB262548;
    if (dword_1EB262548)
    {
      --dword_1EB262548;
      if (v2 == 1)
      {
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        id v3 = (id)qword_1EB262600;
        uint64_t v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v4)
        {
          uint64_t v5 = v4;
          uint64_t v6 = *(void *)v18;
          do
          {
            for (uint64_t i = 0; i != v5; ++i)
            {
              if (*(void *)v18 != v6) {
                objc_enumerationMutation(v3);
              }
              objc_msgSend(*(id *)(*((void *)&v17 + 1) + 8 * i), "setHidden:", 1, (void)v17);
            }
            uint64_t v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
          }
          while (v5);
        }

        long long v8 = (void *)qword_1EB2625F8;
        qword_1EB2625F8 = 0;

        id v9 = (void *)qword_1EB262600;
        qword_1EB262600 = 0;
      }
    }
  }
  if (*(unsigned char *)(a1 + 33))
  {
    int v10 = dword_1EB262544;
    if (dword_1EB262544)
    {
      --dword_1EB262544;
      if (v10 == 1)
      {
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        id v11 = (id)qword_1EB2625F0;
        uint64_t v12 = [v11 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v12)
        {
          uint64_t v13 = v12;
          uint64_t v14 = *(void *)v18;
          do
          {
            for (uint64_t j = 0; j != v13; ++j)
            {
              if (*(void *)v18 != v14) {
                objc_enumerationMutation(v11);
              }
              _stopWindowTime(*(void **)(*((void *)&v17 + 1) + 8 * j), 0);
            }
            uint64_t v13 = [v11 countByEnumeratingWithState:&v17 objects:v21 count:16];
          }
          while (v13);
        }

        double v16 = (void *)qword_1EB2625F0;
        qword_1EB2625F0 = 0;
      }
    }
  }
}

void ___performAfterContextCommitUnderCoverAllowDefer_block_invoke_2(uint64_t a1)
{
  v1[0] = MEMORY[0x1E4F143A8];
  v1[1] = 3221225472;
  v1[2] = ___performAfterContextCommitUnderCoverAllowDefer_block_invoke_3;
  v1[3] = &unk_1E52DE9A0;
  long long v2 = *(_OWORD *)(a1 + 32);
  dispatch_async(MEMORY[0x1E4F14428], v1);
}

uint64_t ___performAfterContextCommitUnderCoverAllowDefer_block_invoke_3(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t ___performAfterContextCommitUnderCoverAllowDefer_block_invoke_4(uint64_t a1)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 32))
  {
    id v1 = (void *)MEMORY[0x1E4F39CF8];
    v4[0] = *(void *)(a1 + 32);
    long long v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:1];
    [v1 setCommittingContexts:v2];
  }
  [MEMORY[0x1E4F39CF8] flush];
  return [MEMORY[0x1E4F39CF8] synchronize];
}

void _enumScenes(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v2 = +[UIScene _scenesIncludingInternal:](UIScene, "_scenesIncludingInternal:", 1, 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([v7 activationState] != -1 && objc_msgSend(v7, "_hostsWindows")) {
          v1[2](v1, v7);
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void ___pauseWindows_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v2 = objc_msgSend(a2, "_allWindows", 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v8 + 1) + 8 * v6);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0
          && ([v7 _isHostedInAnotherProcess] & 1) == 0
          && ([(id)qword_1EB2625F0 containsObject:v7] & 1) == 0)
        {
          _stopWindowTime(v7, 1);
          [(id)qword_1EB2625F0 addObject:v7];
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void _stopWindowTime(void *a1, int a2)
{
  id v10 = [a1 _layerForTimeOffsetModification];
  [v10 timeOffset];
  double v4 = v3;
  double v5 = CACurrentMediaTime();
  objc_msgSend(v10, "convertTime:fromLayer:", 0);
  double v6 = v7;
  LODWORD(v7) = 1.0;
  if (a2) {
    *(float *)&double v7 = 0.0;
  }
  [v10 setSpeed:v7];
  if (qword_1EB262620 != -1) {
    dispatch_once(&qword_1EB262620, &__block_literal_global_165_0);
  }
  long long v8 = v10;
  if (byte_1EB262541)
  {
    [v10 setDisableDeferredAnimationCallbacks:1];
    long long v8 = v10;
  }
  [v8 convertTime:0 fromLayer:v5];
  [v10 setTimeOffset:v4 + v6 - v9];
}

uint64_t ___stopWindowTime_block_invoke()
{
  uint64_t result = [MEMORY[0x1E4F39BE8] instancesRespondToSelector:sel_setDisableDeferredAnimationCallbacks_];
  byte_1EB262541 = result;
  return result;
}

void ___coverCanvases_block_invoke(uint64_t a1, void *a2)
{
  id v9 = a2;
  if ((objc_msgSend((id)qword_1EB2625F8, "containsObject:") & 1) == 0)
  {
    [(id)qword_1EB2625F8 addObject:v9];
    long long v2 = (void *)qword_1EB262600;
    double v3 = _makeWindowMatchingUIScene(v9, 0);
    [v3 bounds];
    long long v8 = _UISnapshotScreenAtViewRectAfterCommit(v3, 0, v4, v5, v6, v7);
    [v3 addSubview:v8];
    [v3 setWindowLevel:15000002.0];
    [v3 _orderFrontWithoutMakingKey];

    [v2 addObject:v3];
  }
}

CGFloat _transformApplyUnapply(_OWORD *a1, _OWORD *a2)
{
  long long v3 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v3;
  long long v4 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v4;
  long long v5 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v5;
  long long v6 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v6;
  long long v7 = a2[5];
  *(_OWORD *)&v16.m31 = a2[4];
  *(_OWORD *)&v16.m33 = v7;
  long long v8 = a2[7];
  *(_OWORD *)&v16.m41 = a2[6];
  *(_OWORD *)&v16.m43 = v8;
  long long v9 = a2[1];
  *(_OWORD *)&v16.m11 = *a2;
  *(_OWORD *)&v16.m13 = v9;
  long long v10 = a2[3];
  *(_OWORD *)&v16.m21 = a2[2];
  *(_OWORD *)&v16.m23 = v10;
  CATransform3DConcat(&v18, &a, &v16);
  long long v11 = *(_OWORD *)&v18.m33;
  a1[4] = *(_OWORD *)&v18.m31;
  a1[5] = v11;
  long long v12 = *(_OWORD *)&v18.m43;
  a1[6] = *(_OWORD *)&v18.m41;
  a1[7] = v12;
  long long v13 = *(_OWORD *)&v18.m13;
  *a1 = *(_OWORD *)&v18.m11;
  a1[1] = v13;
  CGFloat result = v18.m21;
  long long v15 = *(_OWORD *)&v18.m23;
  a1[2] = *(_OWORD *)&v18.m21;
  a1[3] = v15;
  return result;
}

CATransform3D *_UISnapshotCaptureScreen(void *a1, _OWORD *a2, uint64_t a3, _OWORD *a4, double a5, double a6, double a7, double a8)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  [a1 _scale];
  *(double *)(a3 + 24) = a8;
  *(void *)(a3 + 32) = v15;
  *(double *)a3 = a5;
  *(double *)(a3 + _Block_object_dispose(&STACK[0x228], 8) = a6;
  *(double *)(a3 + 16) = a7;
  long long v16 = a2[5];
  *(_OWORD *)&v28.m31 = a2[4];
  *(_OWORD *)&v28.m33 = v16;
  long long v17 = a2[7];
  *(_OWORD *)&v28.m41 = a2[6];
  *(_OWORD *)&v28.m43 = v17;
  long long v18 = a2[1];
  *(_OWORD *)&v28.m11 = *a2;
  *(_OWORD *)&v28.m13 = v18;
  long long v19 = a2[3];
  *(_OWORD *)&v28.m21 = a2[2];
  *(_OWORD *)&v28.m23 = v19;
  _UIRenderingSurfaceTransform((double *)a3, &v29);
  CATransform3D a = v28;
  CATransform3D v25 = v29;
  CGFloat result = CATransform3DConcat(&v27, &a, &v25);
  long long v21 = *(_OWORD *)&v27.m33;
  a4[4] = *(_OWORD *)&v27.m31;
  a4[5] = v21;
  long long v22 = *(_OWORD *)&v27.m43;
  a4[6] = *(_OWORD *)&v27.m41;
  a4[7] = v22;
  long long v23 = *(_OWORD *)&v27.m13;
  *a4 = *(_OWORD *)&v27.m11;
  a4[1] = v23;
  long long v24 = *(_OWORD *)&v27.m23;
  a4[2] = *(_OWORD *)&v27.m21;
  a4[3] = v24;
  return result;
}

void _windowSceneSettings(void *a1, void *a2, void *a3)
{
  id v17 = a1;
  long long v5 = [v17 windowScene];
  long long v6 = [v5 _FBSScene];

  if (v6)
  {
    long long v7 = [v6 settings];
    [v7 frame];
    *a2 = v8;
    a2[1] = v9;
    a2[2] = v10;
    a2[3] = v11;
    *a3 = [v7 interfaceOrientation];
  }
  else
  {
    long long v12 = [v17 screen];
    [v12 _unjailedReferenceBounds];
    *a2 = v13;
    a2[1] = v14;
    a2[2] = v15;
    a2[3] = v16;

    *a3 = 1;
  }
}

id _makeContextList(void *a1, long long *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v29 = (id)objc_opt_new();
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v37 objects:v50 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v38;
    uint64_t v28 = *MEMORY[0x1E4F3A4E0];
    uint64_t v27 = *MEMORY[0x1E4F3A588];
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v38 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v10 = [v9 _contextId];
          if (v10)
          {
            uint64_t v11 = v10;
            long long v12 = objc_opt_new();
            uint64_t v13 = [NSNumber numberWithUnsignedInt:v11];
            [v12 setObject:v13 forKeyedSubscript:v28];

            if (a2)
            {
              long long v35 = 0u;
              long long v36 = 0u;
              uint64_t v34 = 0;
              _windowSceneSettings(v9, &v35, &v34);
              memset(&v33, 0, sizeof(v33));
              v15.n128_u64[0] = *((void *)&v36 + 1);
              v14.n128_u64[0] = v36;
              _UISnapshotContainerTransform(1, v34, 1, &v33, *(double *)&v35, *((double *)&v35 + 1), v14, v15);
              CATransform3D v32 = v33;
              CATransform3DInvert(&v41, &v32);
              long long v16 = a2[5];
              long long v17 = a2[3];
              long long v46 = a2[4];
              long long v47 = v16;
              long long v18 = a2[5];
              long long v19 = a2[7];
              long long v48 = a2[6];
              long long v49 = v19;
              long long v20 = a2[1];
              long long v42 = *a2;
              long long v43 = v20;
              long long v21 = a2[3];
              long long v23 = *a2;
              long long v22 = a2[1];
              long long v44 = a2[2];
              long long v45 = v21;
              CATransform3D a = v41;
              *(_OWORD *)&b.m31 = v46;
              *(_OWORD *)&b.m33 = v18;
              long long v24 = a2[7];
              *(_OWORD *)&b.m41 = v48;
              *(_OWORD *)&b.m43 = v24;
              *(_OWORD *)&b.m11 = v23;
              *(_OWORD *)&b.m13 = v22;
              *(_OWORD *)&b.m21 = v44;
              *(_OWORD *)&b.m23 = v17;
              CATransform3DConcat(&v32, &a, &b);
              CATransform3D v41 = v32;
              CATransform3D v25 = [MEMORY[0x1E4F29238] valueWithCATransform3D:&v41];
              [v12 setObject:v25 forKeyedSubscript:v27];
            }
            [v29 addObject:v12];
          }
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v37 objects:v50 count:16];
    }
    while (v6);
  }

  return v29;
}

void sub_186565284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,id a25,id a26)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

BOOL isModifierFlag(uint64_t a1)
{
  return (unint64_t)(a1 - 224) < 8 || a1 == 57;
}

void sub_186568B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18656A0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 120), 8);
  _Unwind_Resume(a1);
}

__CFString *UIStringFromScrollPhase(unint64_t a1)
{
  if (a1 > 5) {
    return @"<Unknown>";
  }
  else {
    return off_1E5304250[a1];
  }
}

void _UIScrollEventCommonInit(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F28E10];
  long long v2 = a1;
  uint64_t v3 = [v1 strongToStrongObjectsMapTable];
  id v4 = (id)v2[15];
  v2[15] = v3;
}

void sub_18656F504(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void _UIAppGameControllerProcessDPad(double *a1, double *a2, void *a3, unsigned char *a4, unsigned char *a5, double a6)
{
  id v33 = a3;
  [v33 _hidEvent];
  uint64_t v11 = BKSHIDEventGetBaseAttributes();
  uint64_t v12 = [v11 contextID];

  uint64_t v13 = _UIAppGameControllerPressInfoForState(0, 1, v12, a1[1], a2[1], a6);
  uint64_t v14 = _UIAppGameControllerPressInfoForState(1, 1, v12, a1[2], a2[2], a6);
  __n128 v15 = _UIAppGameControllerPressInfoForState(2, 1, v12, a1[3], a2[3], a6);
  long long v16 = _UIAppGameControllerPressInfoForState(3, 1, v12, a1[4], a2[4], a6);
  if (v13) {
    [(id)UIApp _prepareButtonEvent:v33 withPressInfo:v13];
  }
  if (v14) {
    [(id)UIApp _prepareButtonEvent:v33 withPressInfo:v14];
  }
  if (v15) {
    [(id)UIApp _prepareButtonEvent:v33 withPressInfo:v15];
  }
  if (v16) {
    [(id)UIApp _prepareButtonEvent:v33 withPressInfo:v16];
  }
  if (a4 && (v13 || v14 || v15 || v16)) {
    *a4 = 1;
  }
  id v17 = v13;
  double v18 = _UIGetGameControllerMinimumForce();
  if (([v17 phase] || (objc_msgSend(v17, "force"), v19 > v18)) && objc_msgSend(v17, "phase") != 3)
  {
    uint64_t v20 = [v17 phase];

    if (v20 != 4) {
      goto LABEL_38;
    }
  }
  else
  {
  }
  id v21 = v14;
  double v22 = _UIGetGameControllerMinimumForce();
  if (([v21 phase] || (objc_msgSend(v21, "force"), v23 > v22)) && objc_msgSend(v21, "phase") != 3)
  {
    uint64_t v24 = [v21 phase];

    if (v24 != 4) {
      goto LABEL_38;
    }
  }
  else
  {
  }
  id v25 = v15;
  double v26 = _UIGetGameControllerMinimumForce();
  if (([v25 phase] || (objc_msgSend(v25, "force"), v27 > v26)) && objc_msgSend(v25, "phase") != 3)
  {
    uint64_t v28 = [v25 phase];

    if (v28 != 4) {
      goto LABEL_38;
    }
  }
  else
  {
  }
  id v29 = v16;
  double v30 = _UIGetGameControllerMinimumForce();
  BOOL v32 = ![v29 phase] && (objc_msgSend(v29, "force"), v31 <= v30)
     || [v29 phase] == 3
     || [v29 phase] == 4;

  if (a5 && v32) {
    *a5 = 1;
  }
LABEL_38:
}

void _UIAppGameControllerProcessShoulders(double *a1, double *a2, void *a3, unsigned char *a4, unsigned char *a5, double a6)
{
  id v11 = a3;
  if (a1[25] >= a1[26]) {
    double v12 = a1[25];
  }
  else {
    double v12 = a1[26];
  }
  if (a2[25] >= a2[26]) {
    double v13 = a2[25];
  }
  else {
    double v13 = a2[26];
  }
  if (a1[27] >= a1[28]) {
    double v14 = a1[27];
  }
  else {
    double v14 = a1[28];
  }
  if (a2[27] >= a2[28]) {
    double v15 = a2[27];
  }
  else {
    double v15 = a2[28];
  }
  id v28 = v11;
  [v11 _hidEvent];
  long long v16 = BKSHIDEventGetBaseAttributes();
  uint64_t v17 = [v16 contextID];

  uint64_t v18 = _UIAppGameControllerPressInfoForState(2, 5, v17, v12, v13, a6);
  uint64_t v19 = _UIAppGameControllerPressInfoForState(3, 5, v17, v14, v15, a6);
  if (v18) {
    [(id)UIApp _prepareButtonEvent:v28 withPressInfo:v18];
  }
  if (v19) {
    [(id)UIApp _prepareButtonEvent:v28 withPressInfo:v19];
  }
  if (a4 && v18 | v19) {
    *a4 = 1;
  }
  id v20 = (id)v18;
  double v21 = _UIGetGameControllerMinimumForce();
  if (([v20 phase] || (objc_msgSend(v20, "force"), v22 > v21)) && objc_msgSend(v20, "phase") != 3)
  {
    uint64_t v23 = [v20 phase];

    if (v23 != 4) {
      goto LABEL_33;
    }
  }
  else
  {
  }
  id v24 = (id)v19;
  double v25 = _UIGetGameControllerMinimumForce();
  BOOL v27 = ![v24 phase] && (objc_msgSend(v24, "force"), v26 <= v25)
     || [v24 phase] == 3
     || [v24 phase] == 4;

  if (a5 && v27) {
    *a5 = 1;
  }
LABEL_33:
}

UIPressInfo *_UIAppGameControllerPressInfoForState(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  double v12 = _UIGetGameControllerMinimumForce();
  double v13 = objc_alloc_init(UIPressInfo);
  [(UIPressInfo *)v13 setType:a1];
  [(UIPressInfo *)v13 setSource:2];
  [(UIPressInfo *)v13 setGameControllerComponent:a2];
  [(UIPressInfo *)v13 setForce:a5];
  [(UIPressInfo *)v13 setTimestamp:a6];
  [(UIPressInfo *)v13 setContextID:a3];
  uint64_t v14 = 3;
  uint64_t v15 = 2;
  if (a5 != a4) {
    uint64_t v15 = 1;
  }
  if (v12 >= a5)
  {
    long long v16 = 0;
  }
  else
  {
    uint64_t v14 = v15;
    long long v16 = v13;
  }
  if (v12 >= a4) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v14;
  }
  if (v12 >= a4) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = v13;
  }
  [(UIPressInfo *)v13 setPhase:v17];
  uint64_t v19 = v18;

  return v19;
}

double _UIGetGameControllerMinimumForce()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1) {
    return 0.001953125;
  }
  int v2 = _UIInternalPreference_GameControllerMinimumForce;
  if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_GameControllerMinimumForce) {
    return 0.001953125;
  }
  while (v0 >= v2)
  {
    _UIInternalPreferenceSync(v0, &_UIInternalPreference_GameControllerMinimumForce, @"GameControllerMinimumForce", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
    int v2 = _UIInternalPreference_GameControllerMinimumForce;
    double result = 0.001953125;
    if (v0 == _UIInternalPreference_GameControllerMinimumForce) {
      return result;
    }
  }
  return *(double *)&qword_1E8FD5410;
}

void _UIAppGameControllerProcessGenericStick(uint64_t a1, double *a2, double *a3, void *a4, unsigned char *a5, unsigned char *a6, double a7)
{
  id v35 = a4;
  [v35 _hidEvent];
  double v13 = BKSHIDEventGetBaseAttributes();
  uint64_t v14 = [v13 contextID];

  uint64_t v15 = _UIAppGameControllerPressInfoForState(0, a1, v14, *a2, *a3, a7);
  long long v16 = _UIAppGameControllerPressInfoForState(1, a1, v14, a2[1], a3[1], a7);
  uint64_t v17 = _UIAppGameControllerPressInfoForState(2, a1, v14, a2[2], a3[2], a7);
  uint64_t v18 = _UIAppGameControllerPressInfoForState(3, a1, v14, a2[3], a3[3], a7);
  if (v15) {
    [(id)UIApp _prepareButtonEvent:v35 withPressInfo:v15];
  }
  if (v16) {
    [(id)UIApp _prepareButtonEvent:v35 withPressInfo:v16];
  }
  if (v17) {
    [(id)UIApp _prepareButtonEvent:v35 withPressInfo:v17];
  }
  if (v18) {
    [(id)UIApp _prepareButtonEvent:v35 withPressInfo:v18];
  }
  if (a5 && (v15 || v16 || v17 || v18)) {
    *a5 = 1;
  }
  id v19 = v15;
  double v20 = _UIGetGameControllerMinimumForce();
  if (([v19 phase] || (objc_msgSend(v19, "force"), v21 > v20)) && objc_msgSend(v19, "phase") != 3)
  {
    uint64_t v22 = [v19 phase];

    if (v22 != 4) {
      goto LABEL_38;
    }
  }
  else
  {
  }
  id v23 = v16;
  double v24 = _UIGetGameControllerMinimumForce();
  if (([v23 phase] || (objc_msgSend(v23, "force"), v25 > v24)) && objc_msgSend(v23, "phase") != 3)
  {
    uint64_t v26 = [v23 phase];

    if (v26 != 4) {
      goto LABEL_38;
    }
  }
  else
  {
  }
  id v27 = v17;
  double v28 = _UIGetGameControllerMinimumForce();
  if (([v27 phase] || (objc_msgSend(v27, "force"), v29 > v28)) && objc_msgSend(v27, "phase") != 3)
  {
    uint64_t v30 = [v27 phase];

    if (v30 != 4) {
      goto LABEL_38;
    }
  }
  else
  {
  }
  id v31 = v18;
  double v32 = _UIGetGameControllerMinimumForce();
  BOOL v34 = ![v31 phase] && (objc_msgSend(v31, "force"), v33 <= v32)
     || [v31 phase] == 3
     || [v31 phase] == 4;

  if (a6 && v34) {
    *a6 = 1;
  }
LABEL_38:
}

void sub_186572040(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_186572380(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __screenBlanked(uint64_t a1, uint64_t a2)
{
  qos_class_t v3 = qos_class_main();
  id v4 = dispatch_get_global_queue(v3, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ____screenBlanked_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = a2;
  dispatch_async(v4, block);
}

uint64_t ____screenBlanked_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) _enablePeakDetectionIfNecessary];
}

uint64_t _UIPressesContainsPressType(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = a1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    while (2)
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        if (objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * v7), "type", (void)v10) == a2)
        {
          uint64_t v8 = 1;
          goto LABEL_11;
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  uint64_t v8 = 0;
LABEL_11:

  return v8;
}

uint64_t _UIPressesContainsExternalKeyboardSource(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v7;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v7 != v3) {
          objc_enumerationMutation(v1);
        }
        if (objc_msgSend(*(id *)(*((void *)&v6 + 1) + 8 * i), "_source", (void)v6) == 1)
        {
          uint64_t v2 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v2;
}

uint64_t _UIPressesContainsPressTypes(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v5 = v3;
  uint64_t v20 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v20)
  {
    uint64_t v6 = *(void *)v26;
    uint64_t v19 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v20; ++i)
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(v5);
        }
        long long v8 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        id v9 = v4;
        id v10 = v4;
        uint64_t v11 = [v10 countByEnumeratingWithState:&v21 objects:v29 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v22;
          while (2)
          {
            for (uint64_t j = 0; j != v12; ++j)
            {
              if (*(void *)v22 != v13) {
                objc_enumerationMutation(v10);
              }
              uint64_t v15 = *(void **)(*((void *)&v21 + 1) + 8 * j);
              uint64_t v16 = objc_msgSend(v8, "type", v19);
              if (v16 == [v15 integerValue])
              {

                uint64_t v17 = 1;
                id v4 = v9;
                goto LABEL_19;
              }
            }
            uint64_t v12 = [v10 countByEnumeratingWithState:&v21 objects:v29 count:16];
            if (v12) {
              continue;
            }
            break;
          }
        }

        id v4 = v9;
        uint64_t v6 = v19;
      }
      uint64_t v17 = 0;
      uint64_t v20 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }
    while (v20);
  }
  else
  {
    uint64_t v17 = 0;
  }
LABEL_19:

  return v17;
}

uint64_t _UIPressesOnlyContainsPressTypes(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if ([v3 count]) {
    uint64_t v5 = [v4 count] != 0;
  }
  else {
    uint64_t v5 = 0;
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obj = v3;
  uint64_t v6 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    unsigned int v19 = v5;
    uint64_t v21 = *(void *)v27;
    while (1)
    {
      uint64_t v8 = 0;
LABEL_7:
      if (*(void *)v27 != v21) {
        objc_enumerationMutation(obj);
      }
      id v9 = *(void **)(*((void *)&v26 + 1) + 8 * v8);
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      id v10 = v4;
      id v11 = v4;
      uint64_t v12 = [v11 countByEnumeratingWithState:&v22 objects:v30 count:16];
      if (!v12) {
        break;
      }
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v23;
LABEL_11:
      uint64_t v15 = 0;
      while (1)
      {
        if (*(void *)v23 != v14) {
          objc_enumerationMutation(v11);
        }
        uint64_t v16 = *(void **)(*((void *)&v22 + 1) + 8 * v15);
        uint64_t v17 = [v9 type];
        if (v17 == [v16 integerValue]) {
          break;
        }
        if (v13 == ++v15)
        {
          uint64_t v13 = [v11 countByEnumeratingWithState:&v22 objects:v30 count:16];
          if (v13) {
            goto LABEL_11;
          }
          goto LABEL_21;
        }
      }

      ++v8;
      id v4 = v10;
      if (v8 != v7) {
        goto LABEL_7;
      }
      uint64_t v7 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
      if (!v7)
      {
        uint64_t v5 = v19;
        goto LABEL_22;
      }
    }
LABEL_21:

    uint64_t v5 = 0;
    id v4 = v10;
  }
LABEL_22:

  return v5;
}

uint64_t _UIPressesContainsDirectionalPress(void *a1)
{
  return _UIPressesContainsPressTypes(a1, &unk_1ED3F0E38);
}

__CFString *_NSStringFromUIPressPhase(unint64_t a1)
{
  if (a1 > 4) {
    return @"Unknown";
  }
  else {
    return off_1E5304370[a1];
  }
}

double _UITouchStandardForceAmountForTouchType(uint64_t a1)
{
  double result = 60.0;
  if (a1 == 2) {
    double result = 120.0;
  }
  if (a1 == 3) {
    return 115.0;
  }
  return result;
}

BOOL _UITouchCanParticipateInExclusiveTouchForWindow(_WORD *a1, void *a2, int a3)
{
  id v5 = a2;
  int v6 = _UIApplicationSupportsGlobalEdgeSwipeTouches();
  BOOL v7 = 1;
  BOOL v8 = 1;
  if (a1 && v6)
  {
    __int16 v9 = a1[118];
    BOOL v8 = (v9 & 0x2000) == 0;
    BOOL v7 = (v9 & 0x4000) == 0;
  }
  BOOL v10 = 0;
  if (v8 && a3 | v7)
  {
    [v5 bounds];
    double v12 = v11;
    double v14 = v13;
    double v16 = v15;
    double v18 = v17;
    [v5 safeAreaInsets];
    double v20 = v12 + v19;
    double v22 = v14 + v21;
    double v24 = v16 - (v19 + v23);
    double v26 = v18 - (v21 + v25);
    v31.origin.x = v12;
    v31.origin.y = v14;
    v31.size.size_t width = v16;
    v31.size.size_t height = v18;
    v33.origin.x = v20;
    v33.origin.y = v22;
    v33.size.size_t width = v24;
    v33.size.size_t height = v26;
    if (CGRectEqualToRect(v31, v33))
    {
      [a1 locationInView:v5];
      v30.x = v27;
      v30.y = v28;
      v32.origin.x = v20;
      v32.origin.y = v22;
      v32.size.size_t width = v24;
      v32.size.size_t height = v26;
      BOOL v10 = CGRectContainsPoint(v32, v30);
    }
    else
    {
      BOOL v10 = 1;
    }
  }

  return v10;
}

BOOL _UITouchViewIsMatchForExclusiveTouchParticipantView(void *a1, _WORD *a2, void *a3, int a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = a1;
    id v9 = [a2 view];

    BOOL v10 = v9 == v8 && _UITouchCanParticipateInExclusiveTouchForWindow(a2, v7, a4);
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

BOOL _UITouchWindowIsMatchForExclusiveTouchParticipantWindow(_WORD *a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = [a1 window];
  if (v6 == v5)
  {
    id v8 = [a1 view];
    if (v8)
    {
      BOOL CanParticipateInExclusiveTouchForWindow = _UITouchCanParticipateInExclusiveTouchForWindow(a1, v5, a3);
    }
    else
    {
      id v9 = [a1 gestureRecognizers];
      if ([v9 count]) {
        BOOL CanParticipateInExclusiveTouchForWindow = _UITouchCanParticipateInExclusiveTouchForWindow(a1, v5, a3);
      }
      else {
        BOOL CanParticipateInExclusiveTouchForWindow = 0;
      }
    }
  }
  else
  {
    BOOL CanParticipateInExclusiveTouchForWindow = 0;
  }

  return CanParticipateInExclusiveTouchForWindow;
}

BOOL _UIDelayedTouchCanBeConsideredForSentTouchesEnded(void *a1)
{
  id v1 = a1;
  if (_UITouchCancellationOfDelayingGesturesFromPreviousSequenceIsEnabled_onceToken != -1) {
    dispatch_once(&_UITouchCancellationOfDelayingGesturesFromPreviousSequenceIsEnabled_onceToken, &__block_literal_global_463);
  }
  if ([v1 _isPointerTouch]) {
    BOOL v2 = [v1 phase] != 0;
  }
  else {
    BOOL v2 = 1;
  }

  return v2;
}

double _UITouchConvertCADisplayAzimuthAngleToWindow(void *a1, double a2)
{
  id v3 = a1;
  double v4 = -a2;
  if (!v3 || !_UIAppUseModernRotationAndPresentationBehaviors()) {
    goto LABEL_15;
  }
  uint64_t v5 = [v3 _windowInterfaceOrientation];
  switch(v5)
  {
    case 2:
      double v6 = 3.14159265;
      goto LABEL_9;
    case 3:
      double v6 = -1.57079633;
      goto LABEL_9;
    case 4:
      double v6 = 1.57079633;
LABEL_9:
      double v4 = v6 - a2;
      break;
  }
  for (; v4 > 6.28318531; double v4 = v4 + -6.28318531)
    ;
  while (v4 < 0.0)
    double v4 = v4 + 6.28318531;
LABEL_15:

  return v4;
}

double _UITouchAzimuthUnitVectorInView(void *a1, void *a2, CGFloat a3)
{
  id v5 = a1;
  id v6 = a2;
  objc_msgSend(v5, "convertPoint:fromView:", v6, 0.0, 0.0);
  double v8 = v7;
  double v10 = v9;
  CGAffineTransformMakeRotation(&v17, a3);
  double v11 = v17.tx + v17.a + v17.c * 0.0;
  if (v5 && v6)
  {
    double v11 = v8 + v11;
    objc_msgSend(v6, "convertPoint:fromView:", v5, v11, v10 + v17.ty + v17.b + v17.d * 0.0);
    if (v12 != *MEMORY[0x1E4F1DAD8] || v13 != *(double *)(MEMORY[0x1E4F1DAD8] + 8))
    {
      double v15 = v12 * v12 + v13 * v13;
      double v11 = v12;
      if (fabs(v15 + -1.0) >= 2.22044605e-16) {
        double v11 = v12 / sqrt(v15);
      }
    }
  }

  return v11;
}

uint64_t _UITouchesContainsTouchFromCarTouchpad(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v11 != v3) {
          objc_enumerationMutation(v1);
        }
        id v5 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v5, "type", (void)v10) == 1)
        {
          id v6 = [v5 view];
          double v7 = [v6 traitCollection];
          uint64_t v8 = [v7 userInterfaceIdiom];

          if (v8 == 3)
          {
            uint64_t v2 = 1;
            goto LABEL_12;
          }
        }
      }
      uint64_t v2 = [v1 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return v2;
}

uint64_t _UITouchesContainsTouchFromExternalTouchpad(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v1 = a1;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v13 != v3) {
          objc_enumerationMutation(v1);
        }
        id v5 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v5, "type", (void)v12) == 1)
        {
          id v6 = [v5 view];
          double v7 = [v6 traitCollection];
          if ([v7 userInterfaceIdiom] == 3)
          {

LABEL_13:
            uint64_t v2 = 1;
            goto LABEL_14;
          }
          uint64_t v8 = [v5 view];
          double v9 = [v8 traitCollection];
          uint64_t v10 = [v9 userInterfaceIdiom];

          if (v10 == 2) {
            goto LABEL_13;
          }
        }
      }
      uint64_t v2 = [v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v2;
}

void ___getStateMachineSpec_block_invoke()
{
  xmmword_1EB262690 = xmmword_186B9BE80;
  qword_1EB2626A0 = 9;
  unk_1EB2626A8 = &_UIHIDInputEventString_block_invoke_debugging;
  int v0 = (void *)qword_1EB2626C0;
  qword_1EB2626C0 = (uint64_t)&__block_literal_global_168_1;

  id v1 = (void *)qword_1EB2627B8;
  qword_1EB2627B8 = (uint64_t)&__block_literal_global_170_2;

  uint64_t v2 = (void *)qword_1EB2627E8;
  qword_1EB2627E8 = (uint64_t)&__block_literal_global_177_1;

  uint64_t v3 = (void *)qword_1EB2628C8;
  qword_1EB2628C8 = (uint64_t)&__block_literal_global_180_1;

  double v4 = (void *)qword_1EB2629A8;
  qword_1EB2629A8 = (uint64_t)&__block_literal_global_182;

  id v5 = (void *)qword_1EB262978;
  qword_1EB262978 = (uint64_t)&__block_literal_global_184_0;

  id v6 = (void *)qword_1EB262990;
  qword_1EB262990 = (uint64_t)&__block_literal_global_186;

  double v7 = (void *)qword_1EB262898;
  qword_1EB262898 = (uint64_t)&__block_literal_global_188_0;

  uint64_t v8 = (void *)qword_1EB2628B0;
  qword_1EB2628B0 = (uint64_t)&__block_literal_global_190_0;

  double v9 = (void *)qword_1EB2628E0;
  qword_1EB2628E0 = (uint64_t)&__block_literal_global_192_3;

  uint64_t v10 = (void *)qword_1EB262800;
  qword_1EB262800 = (uint64_t)&__block_literal_global_200_3;

  long long v11 = (void *)qword_1EB2629C0;
  qword_1EB2629C0 = (uint64_t)&__block_literal_global_203_2;

  long long v12 = (void *)qword_1EB262910;
  qword_1EB262910 = (uint64_t)&__block_literal_global_206;

  long long v13 = (void *)qword_1EB262830;
  qword_1EB262830 = (uint64_t)&__block_literal_global_209_0;

  long long v14 = (void *)qword_1EB262928;
  qword_1EB262928 = (uint64_t)&__block_literal_global_212_2;

  long long v15 = (void *)qword_1EB262848;
  qword_1EB262848 = (uint64_t)&__block_literal_global_215_1;

  if ([(id)UIApp _supportsIndirectInputEvents])
  {
    if (_UIInternalPreferencesRevisionOnce != -1) {
      dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
    }
    int v16 = _UIInternalPreferencesRevisionVar;
    if (_UIInternalPreferencesRevisionVar >= 1)
    {
      int v27 = _UIInternalPreference_ShouldIncludeTranslationHIDEvent;
      if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_ShouldIncludeTranslationHIDEvent)
      {
        do
        {
          if (v16 < v27) {
            break;
          }
          _UIInternalPreferenceSync(v16, &_UIInternalPreference_ShouldIncludeTranslationHIDEvent, @"ShouldIncludeTranslationHIDEvent", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
          int v27 = _UIInternalPreference_ShouldIncludeTranslationHIDEvent;
        }
        while (v16 != _UIInternalPreference_ShouldIncludeTranslationHIDEvent);
      }
    }
    uint64_t v17 = (void *)qword_1EB2628F8;
    qword_1EB2628F8 = (uint64_t)&__block_literal_global_218_0;

    double v18 = (void *)qword_1EB262818;
    qword_1EB262818 = (uint64_t)&__block_literal_global_221_1;

    double v19 = (void *)qword_1EB2629D8;
    qword_1EB2629D8 = (uint64_t)&__block_literal_global_223;
  }
  else
  {
    qword_1EB262678 = 0x4041AD7BC01366B8;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___getStateMachineSpec_block_invoke_10;
    aBlock[3] = &__block_descriptor_33_e42_____IOHIDEvent__16__0___UIHIDTransformer_8l;
    char v33 = 0;
    double v20 = _Block_copy(aBlock);
    v30[0] = MEMORY[0x1E4F143A8];
    v30[1] = 3221225472;
    v30[2] = ___getStateMachineSpec_block_invoke_2_240;
    v30[3] = &unk_1E5304530;
    id v21 = v20;
    id v31 = v21;
    double v22 = _Block_copy(v30);
    double v23 = (void *)qword_1EB262940;
    qword_1EB262940 = (uint64_t)v22;

    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = ___getStateMachineSpec_block_invoke_243;
    void v28[3] = &unk_1E5304530;
    id v29 = v21;
    id v24 = v21;
    double v25 = _Block_copy(v28);
    double v26 = (void *)qword_1EB262B00;
    qword_1EB262B00 = (uint64_t)v25;
  }
}

uint64_t ___getStateMachineSpec_block_invoke_165(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2) {
    uint64_t v4 = a2[5];
  }
  else {
    uint64_t v4 = 0;
  }
  [a2 addOutputHIDEvent:v4];
  return a3;
}

uint64_t ___getStateMachineSpec_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v4 = v3;
  if (v2) {
    uint64_t v5 = v2[5];
  }
  else {
    uint64_t v5 = 0;
  }
  [v3 updateWithHIDEvent:v5];

  id v6 = objc_opt_new();
  [v6 setOverridePathId:&unk_1ED3F65B8];
  if (v2) {
    uint64_t v7 = v2[5];
  }
  else {
    uint64_t v7 = 0;
  }
  [v6 updateWithHIDEvent:v7];
  [v6 setDeliveryPhase:1];
  uint64_t v8 = -[_UIHIDTransformer pathCollection](v2);
  [v8 addPath:v6];

  double v9 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v10 = [v9 hidEventFromCurrentState];
  [v2 addOutputHIDEvent:v10];

  return 2;
}

uint64_t ___getStateMachineSpec_block_invoke_175(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v4 = v3;
  if (v2) {
    uint64_t v5 = v2[5];
  }
  else {
    uint64_t v5 = 0;
  }
  [v3 updateWithHIDEvent:v5];

  id v6 = objc_opt_new();
  [v6 setOverridePathId:&unk_1ED3F65B8];
  if (v2) {
    uint64_t v7 = v2[5];
  }
  else {
    uint64_t v7 = 0;
  }
  [v6 updateWithHIDEvent:v7];
  uint64_t v8 = -[_UIHIDTransformer pathCollection](v2);
  [v8 addPath:v6];

  [v6 setDeliveryPhase:4];
  double v9 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v10 = [v9 hidEventFromCurrentState];
  [v2 addOutputHIDEvent:v10];

  return 3;
}

uint64_t ___getStateMachineSpec_block_invoke_2_178(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v4 = v3;
  if (v2) {
    uint64_t v5 = v2[5];
  }
  else {
    uint64_t v5 = 0;
  }
  [v3 updateWithHIDEvent:v5];

  id v6 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v7 = [v6 pathWithId:&unk_1ED3F65B8];

  if (v2) {
    uint64_t v8 = v2[5];
  }
  else {
    uint64_t v8 = 0;
  }
  [v7 updateWithHIDEvent:v8];
  [v7 setDeliveryPhase:4];
  double v9 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v10 = [v9 hidEventFromCurrentState];
  [v2 addOutputHIDEvent:v10];

  return 3;
}

uint64_t ___getStateMachineSpec_block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v4 = v3;
  if (v2) {
    uint64_t v5 = v2[5];
  }
  else {
    uint64_t v5 = 0;
  }
  [v3 updateWithHIDEvent:v5];

  id v6 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v7 = [v6 pathWithId:&unk_1ED3F65B8];

  if (v2) {
    uint64_t v8 = v2[5];
  }
  else {
    uint64_t v8 = 0;
  }
  [v7 updateWithHIDEvent:v8];
  [v7 setDeliveryPhase:5];
  double v9 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v10 = [v9 hidEventFromCurrentState];
  [v2 addOutputHIDEvent:v10];

  return 3;
}

uint64_t ___getStateMachineSpec_block_invoke_4(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v4 = v3;
  if (v2) {
    uint64_t v5 = v2[5];
  }
  else {
    uint64_t v5 = 0;
  }
  [v3 updateWithHIDEvent:v5];

  id v6 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v7 = [v6 pathWithId:&unk_1ED3F65B8];

  if (v2) {
    [v7 updateWithHIDEvent:v2[5]];
  }
  else {
    [v7 updateWithHIDEvent:0];
  }
  if ((IOHIDEventGetPhase() & 8) != 0) {
    uint64_t v8 = 7;
  }
  else {
    uint64_t v8 = 6;
  }
  [v7 setDeliveryPhase:v8];
  double v9 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v10 = [v9 hidEventFromCurrentState];
  [v2 addOutputHIDEvent:v10];

  return 2;
}

uint64_t ___getStateMachineSpec_block_invoke_5(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v4 = v3;
  if (v2) {
    uint64_t v5 = v2[5];
  }
  else {
    uint64_t v5 = 0;
  }
  [v3 updateWithHIDEvent:v5];

  id v6 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v7 = [v6 pathWithId:&unk_1ED3F65B8];

  if (v2) {
    [v7 updateWithHIDEvent:v2[5]];
  }
  else {
    [v7 updateWithHIDEvent:0];
  }
  if ((IOHIDEventGetPhase() & 8) != 0) {
    uint64_t v8 = 7;
  }
  else {
    uint64_t v8 = 6;
  }
  [v7 setDeliveryPhase:v8];
  double v9 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v10 = [v9 hidEventFromCurrentState];
  [v2 addOutputHIDEvent:v10];

  [v7 setDeliveryPhase:3];
  long long v11 = -[_UIHIDTransformer pathCollection](v2);
  long long v12 = [v11 hidEventFromCurrentState];
  [v2 addOutputHIDEvent:v12];

  long long v13 = -[_UIHIDTransformer pathCollection](v2);
  [v13 removePath:v7];

  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_6(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v4 = v3;
  if (v2) {
    uint64_t v5 = v2[5];
  }
  else {
    uint64_t v5 = 0;
  }
  [v3 updateWithHIDEvent:v5];

  id v6 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v7 = [v6 pathWithId:&unk_1ED3F65B8];

  if (v2) {
    uint64_t v8 = v2[5];
  }
  else {
    uint64_t v8 = 0;
  }
  [v7 updateWithHIDEvent:v8];
  [v7 setDeliveryPhase:2];
  double v9 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v10 = [v9 hidEventFromCurrentState];
  [v2 addOutputHIDEvent:v10];

  return 2;
}

uint64_t ___getStateMachineSpec_block_invoke_7(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v4 = v3;
  if (v2) {
    uint64_t v5 = v2[5];
  }
  else {
    uint64_t v5 = 0;
  }
  [v3 updateWithHIDEvent:v5];

  id v6 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v7 = [v6 pathWithId:&unk_1ED3F65B8];

  if (v2) {
    uint64_t v8 = v2[5];
  }
  else {
    uint64_t v8 = 0;
  }
  [v7 updateWithHIDEvent:v8];
  [v7 setDeliveryPhase:3];
  double v9 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v10 = [v9 hidEventFromCurrentState];
  [v2 addOutputHIDEvent:v10];

  long long v11 = -[_UIHIDTransformer pathCollection](v2);
  [v11 removePath:v7];

  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_8(uint64_t a1, void *a2)
{
  return 2;
}

void addOutputEventOfType(void *a1, int a2, void *a3)
{
  uint64_t v10 = a1;
  id v5 = a3;
  if (a2 == 17)
  {
    if (v10) {
      uint64_t v6 = v10[5];
    }
    else {
      uint64_t v6 = 0;
    }
    [v10 addOutputHIDEvent:v6];
  }
  else
  {
    if (v10) {
      uint64_t v7 = v10[5];
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = _UIHIDCopyEventPromotingChildOfType(a2, v7, v5);
    if (v8)
    {
      double v9 = (const void *)v8;
      [v10 addOutputHIDEvent:v8];
      CFRelease(v9);
    }
  }
}

uint64_t ___getStateMachineSpec_block_invoke_198(uint64_t a1, void *a2)
{
  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_2_201(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  addOutputEventOfType(v2, 6, MEMORY[0x1E4F1CBF0]);
  uint64_t v3 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v4 = [v3 pathWithId:&unk_1ED3F65B8];

  if ([v4 deliveryPhase] == 5)
  {
    id v5 = -[_UIHIDTransformer pathCollection](v2);
    uint64_t v6 = [v5 hidEventFromCurrentState];
    [v2 addOutputHIDEvent:v6];
  }
  return 3;
}

uint64_t ___getStateMachineSpec_block_invoke_3_204(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v4 = [v3 pathWithId:&unk_1ED3F65B8];

  [v4 setDeliveryPhase:7];
  id v5 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v6 = [v5 hidEventFromCurrentState];
  [v2 addOutputHIDEvent:v6];

  uint64_t v7 = -[_UIHIDTransformer pathCollection](v2);
  [v7 removePath:v4];

  if (v2) {
    uint64_t v8 = v2[5];
  }
  else {
    uint64_t v8 = 0;
  }
  [v2 addOutputHIDEvent:v8];

  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_4_207(uint64_t a1, void *a2)
{
  if (a2) {
    uint64_t v2 = a2[5];
  }
  else {
    uint64_t v2 = 0;
  }
  [a2 addOutputHIDEvent:v2];
  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_5_210(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v4 = [v3 pathWithId:&unk_1ED3F65B8];

  [v4 setDeliveryPhase:7];
  id v5 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v6 = [v5 hidEventFromCurrentState];
  [v2 addOutputHIDEvent:v6];

  uint64_t v7 = -[_UIHIDTransformer pathCollection](v2);
  [v7 removePath:v4];

  if (v2) {
    uint64_t v8 = v2[5];
  }
  else {
    uint64_t v8 = 0;
  }
  [v2 addOutputHIDEvent:v8];

  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_6_213(uint64_t a1, void *a2)
{
  if (a2) {
    uint64_t v2 = a2[5];
  }
  else {
    uint64_t v2 = 0;
  }
  [a2 addOutputHIDEvent:v2];
  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_7_216(uint64_t a1, void *a2)
{
  return 2;
}

uint64_t ___getStateMachineSpec_block_invoke_8_219(uint64_t a1, void *a2)
{
  return 1;
}

uint64_t ___getStateMachineSpec_block_invoke_9(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  addOutputEventOfType(v2, 17, MEMORY[0x1E4F1CBF0]);
  uint64_t v3 = -[_UIHIDTransformer pathCollection](v2);
  uint64_t v4 = [v3 pathWithId:&unk_1ED3F65B8];

  if ([v4 deliveryPhase] == 5)
  {
    id v5 = -[_UIHIDTransformer pathCollection](v2);
    uint64_t v6 = [v5 hidEventFromCurrentState];
    [v2 addOutputHIDEvent:v6];
  }
  return 3;
}

CFTypeRef ___getStateMachineSpec_block_invoke_10(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = v3;
  if (*(unsigned char *)(a1 + 32)) {
    id v5 = &unk_1ED3F0EB0;
  }
  else {
    id v5 = &unk_1ED3F0EC8;
  }
  if (v3) {
    CFTypeRef v6 = (CFTypeRef)v3[5];
  }
  else {
    CFTypeRef v6 = 0;
  }
  -[_UIHIDTransformer scaleEventTracker](v3);
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2020000000;
  uint64_t v19 = 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = ___UIHIDCreateScaleEventAndAppendIfNeeded_block_invoke;
  void v15[3] = &unk_1E52DA1D8;
  v15[4] = &v16;
  _UIEventHIDEnumerateChildren((uint64_t)v6, 7, v15);
  if (!v17[3])
  {
    Copy = (const void *)IOHIDEventCreateCopy();
    IOHIDEventGetTimeStamp();
    IOHIDEventGetSenderID();
    [v7 scaleZ];
    [v7 compositePhase];
    ScaleEvent = (const void *)IOHIDEventCreateScaleEvent();
    IOHIDEventSetSenderID();
    IOHIDEventSetPhase();
    IOHIDEventAppendEvent();
    CFRelease(ScaleEvent);
    CFTypeRef v6 = CFAutorelease(Copy);
  }
  _Block_object_dispose(&v16, 8);

  uint64_t v10 = (const void *)_UIHIDCopyEventPromotingChildOfType(7, (uint64_t)v6, v5);
  if (!v10)
  {
    long long v13 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v14 = [NSString stringWithUTF8String:"_UIStateMachineSpecPtr _getStateMachineSpec(void)_block_invoke"];
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, @"_UIHIDTransformer.m", 729, @"Unexpected nil outputEvent attempting to create event of type: %lu", 7);
  }
  CFTypeRef v11 = CFAutorelease(v10);

  return v11;
}

void sub_186579654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIHIDCopyEventPromotingChildOfType(int a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    IOHIDEventGetType();
    uint64_t v17 = 0;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x2020000000;
    uint64_t v20 = 0;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = ___UIHIDCopyEventPromotingChildOfType_block_invoke;
    v16[3] = &unk_1E52DA1D8;
    void v16[4] = &v17;
    _UIEventHIDEnumerateChildren(a2, a1, v16);
    if (v18[3])
    {
      uint64_t Copy = IOHIDEventCreateCopy();
      if (IOHIDEventGetAttributeDataLength() >= 1)
      {
        IOHIDEventGetAttributeDataPtr();
        IOHIDEventSetAttributeData();
      }
      id v7 = (const void *)IOHIDEventCreateCopy();
      CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
      CFArrayRef v9 = Children;
      if (Children) {
        unsigned __int8 Count = CFArrayGetCount(Children);
      }
      else {
        unsigned __int8 Count = 0;
      }
      uint64_t v11 = Count;
      while (v11 > 0)
      {
        CFArrayGetValueAtIndex(v9, --v11);
        long long v12 = [NSNumber numberWithUnsignedInt:IOHIDEventGetType()];
        int v13 = [v5 containsObject:v12];

        if (v13)
        {
          long long v14 = (const void *)IOHIDEventCreateCopy();
          IOHIDEventAppendEvent();
          CFRelease(v14);
        }
        IOHIDEventRemoveEvent();
      }
      IOHIDEventAppendEvent();
      CFRelease(v7);
    }
    else
    {
      uint64_t Copy = 0;
    }
    _Block_object_dispose(&v17, 8);
  }
  else
  {
    uint64_t Copy = 0;
  }

  return Copy;
}

void sub_186579890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___getStateMachineSpec_block_invoke_2_240(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = -[_UIHIDTransformer scaleEventTracker](v3);
  id v5 = v4;
  if (v3) {
    uint64_t v6 = v3[5];
  }
  else {
    uint64_t v6 = 0;
  }
  [v4 updateWithHIDEvent:v6];

  id v7 = -[_UIHIDTransformer scaleEventTracker](v3);
  uint64_t v8 = [v7 compositePhase];

  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
    uint64_t v10 = -[_UIHIDTransformer pathCollection](v3);
    [v10 updateWithHIDEvent:v9];

    uint64_t v11 = -[_UIHIDTransformer pathCollection](v3);
    long long v12 = [v11 pathWithId:&unk_1ED3F65B8];

    [v12 setOverridePathId:&unk_1ED3F65B8];
    [v12 updateWithHIDEvent:v9];
    CGAffineTransformMakeTranslation(&v24, -*(double *)&qword_1EB262678, *(CGFloat *)&qword_1EB262678);
    [v12 applyTransform:&v24];
    int v13 = objc_opt_new();
    [v13 setOverridePathId:&unk_1ED3F6618];
    [v13 updateWithHIDEvent:v9];
    CGAffineTransformMakeTranslation(&v23, *(CGFloat *)&qword_1EB262678, -*(double *)&qword_1EB262678);
    [v13 applyTransform:&v23];
    [v12 setDeliveryPhase:4];
    [v13 setDeliveryPhase:4];
    long long v14 = -[_UIHIDTransformer pathCollection](v3);
    [v14 addPath:v13];

    long long v15 = -[_UIHIDTransformer pathCollection](v3);
    uint64_t v16 = [v15 hidEventFromCurrentState];
    [v3 addOutputHIDEvent:v16];

    if (v3)
    {
      uint64_t v17 = MEMORY[0x1E4F1DAB8];
      long long v18 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
      *((_OWORD *)v3 + 4) = *MEMORY[0x1E4F1DAB8];
      *((_OWORD *)v3 + 5) = v18;
      *((_OWORD *)v3 + 6) = *(_OWORD *)(v17 + 32);
    }

    uint64_t v19 = 4;
  }
  else
  {
    uint64_t v20 = *(NSObject **)(__UILogGetCategoryCachedImpl("HIDTransformer", &qword_1EB262688) + 8);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      if (v3) {
        uint64_t v21 = v3[5];
      }
      else {
        uint64_t v21 = 0;
      }
      *(_DWORD *)CATransform3D buf = 138412290;
      uint64_t v26 = v21;
      _os_log_impl(&dword_1853B0000, v20, OS_LOG_TYPE_DEFAULT, "HIDTransformer is attempting to process a transform event (scale, rotate, translate) with an improper phase transition, this is likely a FW issue. %@", buf, 0xCu);
    }
    uint64_t v19 = 2;
  }

  return v19;
}

uint64_t ___getStateMachineSpec_block_invoke_243(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = -[_UIHIDTransformer scaleEventTracker](v3);
  id v5 = v4;
  if (v3) {
    uint64_t v6 = *((void *)v3 + 5);
  }
  else {
    uint64_t v6 = 0;
  }
  [v4 updateWithHIDEvent:v6];

  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v8 = -[_UIHIDTransformer pathCollection](v3);
  [v8 updateWithHIDEvent:v7];

  if (v3)
  {
    long long v9 = *((_OWORD *)v3 + 5);
    long long v45 = *((_OWORD *)v3 + 4);
    long long v46 = v9;
    CGFloat v11 = v3[12];
    CGFloat v10 = v3[13];
  }
  else
  {
    long long v45 = 0u;
    long long v46 = 0u;
    CGFloat v10 = 0.0;
    CGFloat v11 = 0.0;
  }
  memset(&v44, 0, sizeof(v44));
  CGAffineTransformMakeTranslation(&v44, v11, v10);
  memset(&v43, 0, sizeof(v43));
  CGAffineTransform t1 = v44;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.CATransform3D a = v45;
  *(_OWORD *)&t1.c = v46;
  t1.tx = v11;
  t1.ty = v10;
  CGAffineTransformConcat(&v43, &t1, &t2);
  memset(&t1, 0, sizeof(t1));
  _UIEventGetAffineTransformForScaleEvent(v7, (uint64_t)&t1);
  memset(&v40, 0, sizeof(v40));
  CGAffineTransformMakeTranslation(&v40, t1.tx, t1.ty);
  memset(&v39, 0, sizeof(v39));
  CGAffineTransform v37 = v40;
  CGAffineTransformInvert(&v38, &v37);
  CGAffineTransform v37 = t1;
  CGAffineTransformConcat(&v39, &v37, &v38);
  CGAffineTransform v36 = v43;
  memset(&v37, 0, sizeof(v37));
  CGAffineTransform v35 = v39;
  CGAffineTransformConcat(&v37, &v36, &v35);
  CGAffineTransform v35 = v44;
  memset(&v36, 0, sizeof(v36));
  CGAffineTransform v34 = v40;
  CGAffineTransformConcat(&v36, &v35, &v34);
  CGAffineTransform v35 = v37;
  CGAffineTransform v34 = v36;
  CGAffineTransformConcat(&v33, &v35, &v34);
  if (v3)
  {
    long long v12 = *(_OWORD *)&v33.a;
    long long v13 = *(_OWORD *)&v33.c;
    *((_OWORD *)v3 + 4) = *(_OWORD *)&v33.a;
    *((_OWORD *)v3 + 5) = v13;
    long long v14 = *(_OWORD *)&v33.tx;
    *((_OWORD *)v3 + 6) = *(_OWORD *)&v33.tx;
    memset(&v35, 0, sizeof(v35));
    *(_OWORD *)&v32.CATransform3D a = v12;
    *(_OWORD *)&v32.c = v13;
    *(_OWORD *)&v32.tx = v14;
  }
  else
  {
    memset(&v35, 0, sizeof(v35));
    memset(&v32, 0, sizeof(v32));
  }
  CGAffineTransform v34 = v36;
  CGAffineTransformInvert(&v31, &v34);
  CGAffineTransformConcat(&v35, &v32, &v31);
  mach_absolute_time();
  CGAffineTransform v34 = v44;
  uint64_t VendorDefinedEvent = IOHIDEventCreateVendorDefinedEvent();
  if (VendorDefinedEvent)
  {
    uint64_t v16 = (const void *)VendorDefinedEvent;
    IOHIDEventAppendEvent();
    CFRelease(v16);
  }
  uint64_t v17 = -[_UIHIDTransformer pathCollection](v3);
  long long v18 = [v17 pathWithId:&unk_1ED3F65B8];

  [v18 updateWithHIDEvent:v7];
  CGAffineTransformMakeTranslation(&v30, v35.tx + *(double *)&qword_1EB262678 * v35.c - *(double *)&qword_1EB262678 * v35.a, v35.ty + *(double *)&qword_1EB262678 * v35.d - *(double *)&qword_1EB262678 * v35.b);
  [v18 applyTransform:&v30];
  uint64_t v19 = -[_UIHIDTransformer pathCollection](v3);
  uint64_t v20 = [v19 pathWithId:&unk_1ED3F6618];

  [v20 updateWithHIDEvent:v7];
  CGAffineTransformMakeTranslation(&v29, v35.tx + *(double *)&qword_1EB262678 * v35.a - *(double *)&qword_1EB262678 * v35.c, v35.ty + *(double *)&qword_1EB262678 * v35.b - *(double *)&qword_1EB262678 * v35.d);
  [v20 applyTransform:&v29];
  int v21 = IOHIDEventGetPhase() & 0xC;
  if (v21) {
    uint64_t v22 = 6;
  }
  else {
    uint64_t v22 = 5;
  }
  [v18 setDeliveryPhase:v22];
  [v20 setDeliveryPhase:v22];
  CGAffineTransform v23 = -[_UIHIDTransformer pathCollection](v3);
  CGAffineTransform v24 = [v23 hidEventFromCurrentState];
  [(CGFloat *)v3 addOutputHIDEvent:v24];

  if (v21)
  {
    double v25 = -[_UIHIDTransformer pathCollection](v3);
    [v25 removePath:v20];

    uint64_t v26 = -[_UIHIDTransformer scaleEventTracker](v3);
    [v26 reset];

    uint64_t v27 = 2;
  }
  else
  {
    uint64_t v27 = 4;
  }

  return v27;
}

void sub_18657A148(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_18657AB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPKTextInputSettingsClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB262B18)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __PencilKitLibraryCore_block_invoke_0;
    v6[4] = &__block_descriptor_40_e5_v8__0l;
    v6[5] = v6;
    long long v7 = xmmword_1E5304578;
    uint64_t v8 = 0;
    qword_1EB262B18 = _sl_dlopen();
  }
  if (!qword_1EB262B18)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *PencilKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIScribbleInteraction.m", 19, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PKTextInputSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getPKTextInputSettingsClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIScribbleInteraction.m", 20, @"Unable to find class %s", "PKTextInputSettings");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1207 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PencilKitLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB262B18 = result;
  return result;
}

id _UIDragEventPasteConfigurationForOwner(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector()) {
    [v1 _effectivePasteConfiguration];
  }
  else {
  uint64_t v2 = [v1 pasteConfiguration];
  }

  if (v2)
  {
    id v3 = v1;
  }
  else if (objc_msgSend(v1, "__isKindOfUIView"))
  {
    uint64_t v4 = (id *)v1;
    id v5 = -[UIView __viewDelegate](v4);
    if (objc_opt_respondsToSelector()) {
      [v5 _effectivePasteConfiguration];
    }
    else {
    id v3 = [v5 pasteConfiguration];
    }

    if (v3)
    {
      -[UIView __viewDelegate](v4);
      id v3 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v3 = 0;
  }

  uint64_t v6 = [v3 pasteConfiguration];

  return v6;
}

uint64_t _UIDragEventCanPasteItemProvidersForOwner(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  if (objc_opt_respondsToSelector()) {
    [v3 _effectivePasteConfiguration];
  }
  else {
  id v5 = [v3 pasteConfiguration];
  }

  if (v5)
  {
    id v6 = v3;
  }
  else if (objc_msgSend(v3, "__isKindOfUIView"))
  {
    long long v7 = (id *)v3;
    uint64_t v8 = -[UIView __viewDelegate](v7);
    if (objc_opt_respondsToSelector()) {
      [v8 _effectivePasteConfiguration];
    }
    else {
    id v6 = [v8 pasteConfiguration];
    }

    if (v6)
    {
      -[UIView __viewDelegate](v7);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v6 = 0;
  }

  uint64_t v9 = [v6 canPasteItemProviders:v4];
  return v9;
}

void _UIDragEventPasteItemProvidersForOwner(void *a1, void *a2)
{
  id v8 = a2;
  id v3 = a1;
  if (objc_opt_respondsToSelector()) {
    [v8 _effectivePasteConfiguration];
  }
  else {
  id v4 = [v8 pasteConfiguration];
  }

  if (v4)
  {
    id v5 = v8;
  }
  else if (objc_msgSend(v8, "__isKindOfUIView"))
  {
    id v6 = (id *)v8;
    long long v7 = -[UIView __viewDelegate](v6);
    if (objc_opt_respondsToSelector()) {
      [v7 _effectivePasteConfiguration];
    }
    else {
    id v5 = [v7 pasteConfiguration];
    }

    if (v5)
    {
      -[UIView __viewDelegate](v6);
      id v5 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v5 = 0;
  }

  [v5 pasteItemProviders:v3];
}

void sub_18657B654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL _UIEventHIDIsDragEventLocusType(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
  if (!Children) {
    return 0;
  }
  CFArrayRef v4 = Children;
  if (CFArrayGetCount(Children) < 1) {
    return 0;
  }
  CFArrayGetValueAtIndex(v4, 0);
  id v5 = BKSHIDEventGetDigitizerAttributes();
  Integeruint64_t Value = IOHIDEventGetIntegerValue();
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v7 = objc_msgSend(v5, "pathAttributes", 0);
  uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v7);
        }
        long long v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        if ([v12 pathIndex] == IntegerValue)
        {
          id v13 = v12;
          goto LABEL_14;
        }
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
  id v13 = 0;
LABEL_14:

  BOOL v14 = [v13 locus] == a2;
  return v14;
}

void sub_18657C738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _StatusBar_UITimeSizeForLabel(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v4 bounds];
  double v7 = _UIComputedSizeForLabel(v4, v3, 0, 1uLL, 0, 0, 0, v5, v6);

  return v7;
}

void _StatusBar_UIGetDurationOfSpringAnimation(double a1, double a2, double a3, double a4)
{
  self;
  _durationOfSpringAnimation(a1, a2, a3, a4);
}

UIEventButtonMask UIEventButtonMaskForButtonNumber(NSInteger buttonNumber)
{
  if (buttonNumber <= 1) {
    char v1 = 1;
  }
  else {
    char v1 = buttonNumber;
  }
  UIEventButtonMask v2 = 1 << (v1 - 1);
  if ((unint64_t)buttonNumber >= 0x3F) {
    return 0;
  }
  else {
    return v2;
  }
}

id _UINonComponentEventHitTestGestureRecognizers(void *a1, void *a2, uint64_t a3, double a4, double a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = ___UINonComponentEventHitTestGestureRecognizers_block_invoke;
  v24[3] = &__block_descriptor_48_e32__CAPoint3D_ddd_16__0__UIWindow_8l;
  *(double *)&void v24[4] = a4;
  *(double *)&v24[5] = a5;
  uint64_t v10 = _UIHitTestGestureContainer((uint64_t)v9, a2, a3, 1, (uint64_t)v24, 1.0);
  CGFloat v11 = objc_opt_new();
  if (v10)
  {
    do
    {
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v12 = objc_msgSend(v10, "gestureRecognizers", 0);
      uint64_t v13 = [v12 countByEnumeratingWithState:&v20 objects:v25 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = *(void *)v21;
        do
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (*(void *)v21 != v15) {
              objc_enumerationMutation(v12);
            }
            long long v17 = *(void **)(*((void *)&v20 + 1) + 8 * i);
            if ([v17 isEnabled]
              && [v17 state] <= 2
              && [v17 _shouldReceiveEvent:v9]
              && -[UIGestureRecognizer _delegateShouldReceiveEvent:]((uint64_t)v17, (uint64_t)v9))
            {
              [v11 addObject:v17];
            }
          }
          uint64_t v14 = [v12 countByEnumeratingWithState:&v20 objects:v25 count:16];
        }
        while (v14);
      }

      uint64_t v18 = [v10 _parentGestureRecognizerContainer];

      uint64_t v10 = (void *)v18;
    }
    while (v18);
  }

  return v11;
}

id perfLog()
{
  if (perfLog_onceToken != -1) {
    dispatch_once(&perfLog_onceToken, &__block_literal_global_468);
  }
  int v0 = (void *)perfLog_log;
  return v0;
}

void __perfLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.avatar.AvatarUI", "perf");
  char v1 = (void *)perfLog_log;
  perfLog_log = (uint64_t)v0;
}

void __eventQueueSourceCallback(uint64_t a1)
{
  _UIApplicationDrainManagedAutoreleasePool();
  uint64_t v2 = _UIMachTimeForMediaTime(*(double *)(a1 + 72));
  uint64_t v3 = _UIMachTimeForMediaTime(*(double *)(a1 + 80));
  _UIQOSProcessingBegin("HIDQueue", 0, v2, v3);
  __processEventQueue(a1, 4);
  _UIQOSProcessingEnd();
}

void sub_18658266C(_Unwind_Exception *a1)
{
}

void *__dispatchDragEvent(void *a1, void *a2, uint64_t a3)
{
  uint64_t result = (void *)[a1 _isReadyForReset];
  if (result)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = ____dispatchDragEvent_block_invoke;
    void v7[3] = &__block_descriptor_48_e5_v8__0lu32l8u40l8;
    void v7[4] = a3;
    void v7[5] = a1;
    uint64_t result = _Block_copy(v7);
    *a2 = result;
  }
  return result;
}

void ____dispatchDragEvent_block_invoke(uint64_t a1)
{
}

uint64_t ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_33(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeHoverTouchForContextId:*(unsigned int *)(a1 + 48) pathIndex:*(void *)(a1 + 40)];
}

void ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_2(uint64_t a1, unsigned char *a2)
{
  if (a2) {
    int v4 = a2[270] != 0;
  }
  else {
    int v4 = 0;
  }
  if (*(unsigned __int8 *)(a1 + 48) != v4)
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), (const void *)[a2 _pathIndex], a2);
    double v5 = *(__CFDictionary **)(a1 + 40);
    double v6 = (const void *)[a2 _pathIndex];
    CFDictionaryRemoveValue(v5, v6);
  }
}

uint64_t ____updateTouchesWithDigitizerEventAndDetermineIfShouldSend_block_invoke_43(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (!v4)
  {
    uint64_t v5 = [MEMORY[0x1E4F1CA80] set];
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    double v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    int v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  return [v4 addObject:a2];
}

unint64_t ____dispatchPreprocessedEventFromEventQueue_block_invoke(uint64_t a1)
{
  unint64_t result = [*(id *)(a1 + 32) phase];
  if (result <= 5 && ((1 << result) & 0x31) != 0)
  {
    int v4 = *(void **)(a1 + 32);
    return [v4 _removeGestureRecognizersFromWindows];
  }
  return result;
}

unint64_t ____dispatchPreprocessedEventFromEventQueue_block_invoke_2(uint64_t a1)
{
  unint64_t result = [*(id *)(a1 + 32) phase];
  if (result <= 4 && ((1 << result) & 0x19) != 0)
  {
    int v4 = *(void **)(a1 + 32);
    return [v4 _removeGestureRecognizersFromWindows];
  }
  return result;
}

double ____baseTouchLocationsForChild_block_invoke(double a1, double a2)
{
  return 1.0 - a2;
}

double ____baseTouchLocationsForChild_block_invoke_2(double a1)
{
  return 1.0 - a1;
}

double ____baseTouchLocationsForChild_block_invoke_3(double a1, double a2)
{
  return a2;
}

uint64_t ____applySynthesizedTouchTranslationAndModifyIfNeeded_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = IOHIDEventGetIntegerValue();
  if (result == 65280)
  {
    uint64_t result = IOHIDEventGetIntegerValue();
    if (result == 43)
    {
      uint64_t result = IOHIDEventGetDataValue();
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
      *a4 = 1;
    }
  }
  return result;
}

void ____dispatchEstimationUpdateEvents_block_invoke(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v15 = [NSNumber numberWithLong:a4];
  uint64_t v5 = -[UIEventEnvironment _estimatedTouchRecordForContextID:estimationIndex:](a1[6], a1[4], (uint64_t)v15);
  Integeruint64_t Value = IOHIDEventGetIntegerValue();
  BOOL v7 = (IntegerValue & 0x400) == 0 || v5 == 0;
  char v8 = v7;
  if (!v7)
  {
    IOHIDEventGetFloatValue();
    *(float *)&double v9 = v9;
    [v5 dispatchUpdateWithPressure:0 stillEstimated:*(float *)&v9];
  }
  if (v5) {
    BOOL v10 = (IntegerValue & 0x800000) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    IOHIDEventGetFloatValue();
    *(float *)&double v11 = v11;
    [v5 dispatchUpdateWithRollAngle:0 stillEstimated:*(float *)&v11];
    char v8 = 0;
  }
  if (v5 && (v8 & 1) == 0)
  {
    uint64_t v12 = a1[5];
    uint64_t v13 = *(void **)(*(void *)(v12 + 8) + 40);
    if (v13)
    {
      char v14 = [v13 hasRemainingUpdates];
      uint64_t v12 = a1[5];
      if ((v14 & 1) == 0)
      {
        -[UIEventEnvironment _removeEstimatedTouchRecord:](a1[6], *(void **)(*(void *)(v12 + 8) + 40));
        uint64_t v12 = a1[5];
      }
    }
    objc_storeStrong((id *)(*(void *)(v12 + 8) + 40), v5);
  }
}

CGFloat __lockWarpedPointToViewEdge(void *a1, CGFloat a2, CGFloat a3, double a4, double a5)
{
  BOOL v10 = [a1 superview];
  [a1 frame];
  objc_msgSend(v10, "convertRect:toView:", 0);
  UIDistanceBetweenPointAndRect(a2, a3, v11, v12, v13, v14);
  double v16 = v15;

  double v17 = sqrt((a2 - a4) * (a2 - a4) + (a3 - a5) * (a3 - a5));
  if (fabs(v17) >= 2.22044605e-16 && v17 >= v16) {
    return a2 + (a4 - a2) * (v16 / v17);
  }
  return a4;
}

void ____startNewUITouch_block_invoke_2(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {
    uint64_t v6 = [a3 _responder];
    if (v5 == v6)
    {
      int v7 = (*(uint64_t (**)(void))(a1[8] + 16))();

      if (v7) {
        *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
      }
    }
    else
    {
    }
  }
  id v14 = (id)a1[5];
  id v8 = [a3 window];
  if (v14 != v8) {
    goto LABEL_7;
  }
  uint64_t v9 = [a3 _responder];
  if (v9)
  {
    BOOL v10 = (void *)v9;
    char v11 = (*(uint64_t (**)(void))(a1[8] + 16))();

    if ((v11 & 1) == 0) {
      return;
    }
    goto LABEL_12;
  }
  CGFloat v12 = [a3 gestureRecognizers];
  if ([v12 count])
  {
    int v13 = (*(uint64_t (**)(void))(a1[8] + 16))();

    if (!v13) {
      return;
    }
LABEL_12:
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
    return;
  }

  id v8 = v14;
LABEL_7:
}

void ____startNewUITouch_block_invoke_3(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {
    uint64_t v6 = [a3 _responder];
    if (v5 == v6)
    {
      int v7 = (*(uint64_t (**)(void))(a1[8] + 16))();

      if (v7) {
        *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
      }
    }
    else
    {
    }
  }
  id v14 = (id)a1[5];
  id v8 = [a3 window];
  if (v14 != v8) {
    goto LABEL_7;
  }
  uint64_t v9 = [a3 _responder];
  if (v9)
  {
    BOOL v10 = (void *)v9;
    char v11 = (*(uint64_t (**)(void))(a1[8] + 16))();

    if ((v11 & 1) == 0) {
      return;
    }
    goto LABEL_12;
  }
  CGFloat v12 = [a3 gestureRecognizers];
  if ([v12 count])
  {
    int v13 = (*(uint64_t (**)(void))(a1[8] + 16))();

    if (!v13) {
      return;
    }
LABEL_12:
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
    return;
  }

  id v8 = v14;
LABEL_7:
}

void __setTouchViewNilWithGestureCheck(void *a1, void *a2, void *a3, void *a4)
{
  id v8 = [a2 view];
  if ([v8 _shouldApplyExclusiveTouch])
  {
    uint64_t v12 = 0;
    int v13 = &v12;
    uint64_t v14 = 0x2020000000;
    char v15 = 0;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = ____existingTouchOutsideViewInTouchMap_block_invoke;
    v11[3] = &unk_1E5304888;
    void v11[4] = v8;
    void v11[5] = &v12;
    uint64_t v9 = _Block_copy(v11);
    [a3 enumerateKeysAndObjectsUsingBlock:v9];
    if (*((unsigned char *)v13 + 24))
    {

      _Block_object_dispose(&v12, 8);
      goto LABEL_7;
    }
    [a4 enumerateKeysAndObjectsUsingBlock:v9];
    int v10 = *((unsigned __int8 *)v13 + 24);

    _Block_object_dispose(&v12, 8);
    if (v10) {
      goto LABEL_7;
    }
  }
  if ([a1 _anyInterestedGestureRecognizersForTouchInView:v8]) {
    [a1 _addTouch:a2 forDelayedDelivery:0];
  }
LABEL_7:
  [a1 _clearViewForTouch:a2];
}

void sub_186583090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ____existingTouchOutsideViewInTouchMap_block_invoke(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  uint64_t v6 = [a3 view];
  if (v6)
  {
    uint64_t v9 = v6;
    char v7 = [*(id *)(a1 + 32) isDescendantOfView:v6];
    uint64_t v6 = v9;
    char v8 = v7 ^ 1;
  }
  else
  {
    char v8 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v8;
  *a4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
}

uint64_t ____dispatchPressesEvent_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 40) _finishButtonEvent:*(void *)(a1 + 32)];
}

void sub_1865856B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __deviceEventDrainPolicy(uint64_t a1)
{
  if (qword_1E8FDF6B8 != -1) {
    dispatch_once(&qword_1E8FDF6B8, &__block_literal_global_122_1);
  }
  if (!byte_1E8FDF63A || (_UIEventHIDEventWantsImmediateDelivery() & 1) != 0) {
    return 0;
  }
  uint64_t v3 = _UIEventHIDGetChildStylusEvent(a1);
  uint64_t v4 = 1;
  if (!byte_1E8FDF63B) {
    uint64_t v4 = 2;
  }
  if (v3) {
    return 0;
  }
  else {
    return v4;
  }
}

id ___logFilter_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___logFilter_block_invoke_2;
  aBlock[3] = &unk_1E5304AE8;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  id v9 = v4;
  id v10 = v3;
  id v5 = v3;
  uint64_t v6 = _Block_copy(aBlock);

  return v6;
}

uint64_t ___logFilter_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t CategoryImpl = __UILogGetCategoryImpl(*(unsigned char **)(a1 + 48));
  if (*(unsigned char *)CategoryImpl)
  {
    uint64_t v6 = *(NSObject **)(CategoryImpl + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138412546;
      uint64_t v9 = v7;
      __int16 v10 = 2112;
      uint64_t v11 = a2;
      _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "%@:\n%@", (uint8_t *)&v8, 0x16u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t ___hoverEventMemoryFilter_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = IOHIDEventGetIntegerValue();
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
LABEL_3:
    *a4 = 1;
    return result;
  }
  uint64_t result = IOHIDEventGetIntegerValue();
  if (!result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    goto LABEL_3;
  }
  return result;
}

void ___dragEventExtractionFilter_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
  CFArrayGetValueAtIndex(Children, 0);
  int v8 = BKSHIDEventGetDigitizerAttributes();
  uint64_t v9 = _UIEventHIDPathAttributesForChild(v8);
  int v10 = [v9 locus];

  uint64_t v14 = 0;
  char v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 0;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = ___UIEventHIDAnyChildIsTouching_block_invoke_0;
  v13[3] = &unk_1E52DA1D8;
  void v13[4] = &v14;
  _UIEventHIDEnumerateChildren((uint64_t)v6, 11, v13);
  int v11 = *((unsigned __int8 *)v15 + 24);
  _Block_object_dispose(&v14, 8);
  uint64_t v12 = *(void **)(a1 + 32);
  if (v10 == 1 && v11) {
    [v12 setObject:v6 forKeyedSubscript:v5];
  }
  else {
    [v12 removeObjectForKey:v5];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_186587BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___dragEventExtractionFilter_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) resendDragMoveEventsOnTimer:a2 withInterval:0.0333333333];
}

uint64_t ___globalEdgeSwipeEventDiscardFilterGenerator_block_invoke_100(uint64_t a1, uint64_t a2)
{
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) removeIndex:a2];
  uint64_t v4 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  return [v4 removeIndex:a2];
}

uint64_t ___shouldFilterGESEvents_block_invoke()
{
  uint64_t result = _UIApplicationSupportsGlobalEdgeSwipeTouches();
  _MergedGlobals_46 = result;
  return result;
}

uint64_t ___wakeOnTouchSynchronizationFilter_block_invoke_104(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  if (v2)
  {
    if (*(unsigned char *)__UILogGetCategoryCachedImpl("HIDEventSynchronization", &_receiveSynchronizedHIDEvent____s_category))
    {
      uint64_t v4 = MEMORY[0x1E4F143A8];
      uint64_t v5 = 3221225472;
      id v6 = (void (*)(uint64_t *))__40__UIEventFetcher__logSynchronizedEvent___block_invoke;
      uint64_t v7 = &__block_descriptor_40_e30_v32__0____IOHIDEvent__8Q16_B24l;
      uint64_t v8 = a2;
      _UIEventHIDEnumerateChildren(a2, 11, &v4);
    }
    uint64_t v4 = MEMORY[0x1E4F143A8];
    uint64_t v5 = 3221225472;
    id v6 = (void (*)(uint64_t *))__47__UIEventFetcher__receiveSynchronizedHIDEvent___block_invoke;
    uint64_t v7 = &unk_1E52D9CD0;
    uint64_t v8 = v2;
    uint64_t v9 = a2;
    os_unfair_lock_lock(&__UIEventFetcherEventArrayAccessLock);
    v6(&v4);
    os_unfair_lock_unlock(&__UIEventFetcherEventArrayAccessLock);
    if ((_UIUpdateCycleEnabled() & 1) == 0)
    {
      [*(id *)(v2 + 8) count];
      -[UIEventFetcher signalEventsAvailableWithReason:filteredEventCount:](v2, 4);
    }
    uint64_t result = _UIUpdateCycleEnabled();
    if (result) {
      return [*(id *)(v2 + 256) eventFetcherDidReceiveEvents:v2];
    }
  }
  return result;
}

void ___wakeOnTouchSynchronizationFilter_block_invoke_2_105(uint64_t a1)
{
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("HIDEventSynchronization", &_UIInternalPreference_HIDEventsDeliverImmediatly_block_invoke_7___s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    id v3 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1853B0000, v3, OS_LOG_TYPE_ERROR, "[UIEventFetcher] synchronization completed. Resuming normal event routing.", v4, 2u);
    }
  }
  -[UIEventFetcher setSynchronizer:](*(void *)(a1 + 32), 0);
}

uint64_t ___pencilRangeAndTouchingSeparationFilter_block_invoke_3(uint64_t a1)
{
  char v2 = ~IOHIDEventGetIntegerValue();
  Integeruint64_t Value = IOHIDEventGetIntegerValue();
  uint64_t result = IOHIDEventGetIntegerValue();
  BOOL v5 = (v2 & 3) == 0;
  if (!IntegerValue) {
    BOOL v5 = 0;
  }
  if (!result) {
    BOOL v5 = 0;
  }
  BOOL v6 = (v2 & 3 | result | IntegerValue) == 0;
  if (v5 || !(v2 & 3 | result | IntegerValue))
  {
    if (v5)
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = ___pencilRangeAndTouchingSeparationFilter_block_invoke_4();
      }
      IOHIDEventSetIntegerValue();
      IOHIDEventGetIntegerValue();
      IOHIDEventSetIntegerValue();
      uint64_t Copy = (const void *)IOHIDEventCreateCopy();
      IOHIDEventSetIntegerValue();
      IOHIDEventGetIntegerValue();
      IOHIDEventSetIntegerValue();
      IOHIDEventAppendEvent();
      CFRelease(Copy);
      uint64_t result = IOHIDEventSetIntegerValue();
    }
    if (v6)
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = ___pencilRangeAndTouchingSeparationFilter_block_invoke_4();
      }
      IOHIDEventGetIntegerValue();
      IOHIDEventSetIntegerValue();
      uint64_t v8 = (const void *)IOHIDEventCreateCopy();
      IOHIDEventGetIntegerValue();
      IOHIDEventSetIntegerValue();
      IOHIDEventAppendEvent();
      CFRelease(v8);
      IOHIDEventSetIntegerValue();
      return IOHIDEventSetIntegerValue();
    }
  }
  return result;
}

uint64_t ___pencilRangeAndTouchingSeparationFilter_block_invoke_4()
{
  uint64_t Copy = IOHIDEventCreateCopy();
  CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
  if (Children)
  {
    CFArrayRef v2 = Children;
    CFIndex Count = CFArrayGetCount(Children);
    CFIndex v4 = Count - 1;
    if (Count >= 1)
    {
      do
      {
        CFArrayGetValueAtIndex(v2, v4);
        IOHIDEventRemoveEvent();
        --v4;
      }
      while (v4 != -1);
    }
  }
  return Copy;
}

void ___pencilRangeAndTouchingSeparationFilter_block_invoke_5()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_log_t v0 = BKSHIDEventGetDigitizerAttributes();
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  char v1 = objc_msgSend(v0, "pathAttributes", 0);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v8;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v1);
        }
        BOOL v6 = *(void **)(*((void *)&v7 + 1) + 8 * i);
        if (([v6 locus] & 0xFE) == 2) {
          [v6 setLocus:0];
        }
      }
      uint64_t v3 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v3);
  }

  BKSHIDEventSetDigitizerAttributes();
}

uint64_t ____deviceHasHighFrequencyDigitizer_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  byte_1E8FDF639 = result;
  return result;
}

uint64_t ____deviceEventDrainPolicy_block_invoke()
{
  if (qword_1E8FDF6D8 != -1) {
    dispatch_once(&qword_1E8FDF6D8, &__block_literal_global_180_2);
  }
  byte_1E8FDF63A |= byte_1E8FDF63E;
  byte_1E8FDF63B |= byte_1E8FDF63E;
  char v0 = MGIsDeviceOneOfType();
  byte_1E8FDF63A |= v0;
  byte_1E8FDF63B |= v0;
  char v1 = MGIsDeviceOneOfType();
  char v2 = MGIsDeviceOneOfType();
  byte_1E8FDF63A |= v1 | v2;
  byte_1E8FDF63B |= v1 | v2;
  byte_1E8FDF63A |= MGIsDeviceOneOfType();
  uint64_t result = MGIsDeviceOneOfType();
  byte_1E8FDF63A |= result;
  return result;
}

void ____signal_queue_threshold_count_block_invoke()
{
  char v0 = _UIKitPreferencesOnce();
  id v2 = [v0 valueForKey:@"SignalEventCountThreshold"];

  char v1 = v2;
  if (v2)
  {
    _MergedGlobals_900 = [v2 integerValue];
    char v1 = v2;
  }
}

void ____deviceCanMatchHighFrequencyDigitizer_block_invoke()
{
  char v0 = +[UIScreen mainScreen];
  [v0 _refreshRate];
  double v2 = v1;

  BOOL v3 = v2 > 0.0 && round(1.0 / v2) > 60.0;
  byte_1E8FDF63C = v3;
}

uint64_t ____deviceShouldUsuallyActivateDelay_block_invoke()
{
  byte_1E8FDF63D |= MGIsDeviceOneOfType();
  byte_1E8FDF63D |= MGIsDeviceOneOfType();
  uint64_t result = MGIsDeviceOneOfType();
  byte_1E8FDF63D |= result;
  return result;
}

uint64_t ____deviceShouldSignalOnDisplayLinkForNonImportantEvents_block_invoke()
{
  byte_1E8FDF63E |= MGIsDeviceOneOfType();
  uint64_t result = MGIsDeviceOneOfType();
  byte_1E8FDF63E |= result;
  return result;
}

uint64_t ____deviceNeedsToConsiderNearVsyncTouches_block_invoke()
{
  if (qword_1E8FDF6D8 != -1) {
    dispatch_once(&qword_1E8FDF6D8, &__block_literal_global_180_2);
  }
  int v0 = byte_1E8FDF63E;
  if (qword_1E8FDF6B0 != -1) {
    dispatch_once(&qword_1E8FDF6B0, &__block_literal_global_117_2);
  }
  char v1 = byte_1E8FDF639;
  if (byte_1E8FDF639)
  {
    double v2 = +[UIDevice currentDevice];
    uint64_t v3 = [v2 userInterfaceIdiom];

    if (v0) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = (v3 & 0xFFFFFFFFFFFFFFFBLL) == 1;
    }
    char v1 = !v4;
  }
  byte_1E8FDF63F = v1;
  byte_1E8FDF63F = v1 | MGIsDeviceOneOfType();
  uint64_t result = MGIsDeviceOneOfType();
  byte_1E8FDF63F |= result;
  return result;
}

uint64_t _UIEventHIDEventWantsImmediateDelivery()
{
  int v0 = BKSHIDEventGetBaseAttributes();
  if (([v0 options] & 8) != 0) {
    goto LABEL_7;
  }
  if (IOHIDEventGetType() != 11)
  {
    uint64_t v2 = 0;
    goto LABEL_15;
  }
  if ((uint64_t v1 = IOHIDEventGetIntegerValue(), (IOHIDEventGetIntegerValue() & 2) != 0) && !v1
    || (IOHIDEventGetIntegerValue() & 2) != 0 && !v1)
  {
LABEL_7:
    uint64_t v2 = 1;
  }
  else
  {
    Integeruint64_t Value = IOHIDEventGetIntegerValue();
    unint64_t v4 = IOHIDEventGetSenderID() & 0xFFFFFFFFFFFFFFFDLL;
    if (IntegerValue) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = v4 == 0x8000000800A15171;
    }
    uint64_t v2 = !v5;
  }
LABEL_15:

  return v2;
}

uint64_t _UIEventHIDEventRemoteTimestamp(uint64_t a1)
{
  uint64_t v4 = 0;
  BOOL v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___UIEventHIDEventRemoteTimestamp_block_invoke;
  v3[3] = &unk_1E5304C50;
  v3[4] = &v4;
  void v3[5] = a1;
  _UIEventHIDEnumerateChildren(a1, 0, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186588FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIEventHIDPressTypeForKeyboardHIDEvent()
{
  Integeruint64_t Value = IOHIDEventGetIntegerValue();
  uint64_t v1 = IOHIDEventGetIntegerValue();
  if (IntegerValue == 12)
  {
    BOOL v2 = 0;
    if (v1 > 547)
    {
      if (v1 == 548) {
        return 7;
      }
      if (v1 == 562) {
        return 416;
      }
    }
    else
    {
      uint64_t v3 = 4;
      if (v1 == 65 || v1 == 128) {
        return v3;
      }
    }
  }
  else
  {
    BOOL v2 = IntegerValue == 1;
    if (IntegerValue == 1 && v1 == 137) {
      return 4;
    }
  }
  BOOL v5 = (v1 == 134 || v1 == 136) && v2;
  BOOL v7 = IntegerValue == 12 && v1 == 70;
  uint64_t v3 = 5;
  if (!v5 && !v7)
  {
    BOOL v9 = v1 == 205 || v1 == 102;
    if (IntegerValue == 12 && v9)
    {
      return 6;
    }
    else
    {
      uint64_t v3 = 0;
      BOOL v11 = v1 == 140 && v2;
      BOOL v13 = IntegerValue == 12 && v1 == 66;
      if (!v11 && !v13)
      {
        BOOL v14 = v1 == 141 && v2;
        BOOL v15 = IntegerValue == 12 && v1 == 67;
        BOOL v16 = v15;
        uint64_t v3 = 1;
        if (!v14 && !v16)
        {
          BOOL v17 = v1 == 139 && v2;
          BOOL v18 = IntegerValue == 12 && v1 == 68;
          BOOL v19 = v18;
          uint64_t v3 = 2;
          if (!v17 && !v19)
          {
            BOOL v20 = v1 == 138 && v2;
            BOOL v21 = IntegerValue == 12 && v1 == 69;
            BOOL v22 = v21;
            uint64_t v3 = 3;
            if (!v20 && !v22)
            {
              BOOL v24 = v1 == 64 || v1 == 547;
              if (IntegerValue == 12 && v24)
              {
                return 101;
              }
              else if (IntegerValue == 12 && v1 == 233)
              {
                return 102;
              }
              else if (IntegerValue == 12 && v1 == 234)
              {
                return 103;
              }
              else if (IntegerValue == 12 && v1 == 48)
              {
                return 104;
              }
              else if (IntegerValue == 12 && v1 == 149)
              {
                return 300;
              }
              else if (IntegerValue == 11 && v1 == 33)
              {
                return 400;
              }
              else if (IntegerValue == 11 && v1 == 32)
              {
                return 401;
              }
              else if (IntegerValue == 11 && v1 == 38)
              {
                return 402;
              }
              else if (IntegerValue == 11 && v1 == 176)
              {
                return 403;
              }
              else if (IntegerValue == 11 && v1 == 177)
              {
                return 404;
              }
              else if (IntegerValue == 11 && v1 == 178)
              {
                return 405;
              }
              else if (IntegerValue == 11 && v1 == 179)
              {
                return 406;
              }
              else if (IntegerValue == 11 && v1 == 180)
              {
                return 407;
              }
              else if (IntegerValue == 11 && v1 == 181)
              {
                return 408;
              }
              else if (IntegerValue == 11 && v1 == 182)
              {
                return 409;
              }
              else if (IntegerValue == 11 && v1 == 183)
              {
                return 410;
              }
              else if (IntegerValue == 11 && v1 == 184)
              {
                return 411;
              }
              else if (IntegerValue == 11 && v1 == 185)
              {
                return 412;
              }
              else if (IntegerValue == 11 && v1 == 186)
              {
                return 413;
              }
              else if (IntegerValue == 11 && v1 == 187)
              {
                return 414;
              }
              else if (IntegerValue == 11 && v1 == 47)
              {
                return 415;
              }
              else
              {
                BOOL v26 = IntegerValue == 12 && v1 == 448;
                BOOL v27 = v1 == 4 && IntegerValue == 65281;
                uint64_t v3 = 500;
                if (!v27 && !v26)
                {
                  if (IntegerValue == 65281 && v1 == 16)
                  {
                    return 501;
                  }
                  else if (IntegerValue == 144 && v1 == 33)
                  {
                    return 601;
                  }
                  else if (v1 == 155 && v2)
                  {
                    return 503;
                  }
                  else if (IntegerValue == 12 && v1 == 414)
                  {
                    return 502;
                  }
                  else
                  {
                    BOOL v29 = v1 == 207 && IntegerValue == 12;
                    uint64_t v3 = 504;
                    if (!v29) {
                      return -1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v3;
}

id _UIEventHIDUIScreenForHIDEvent(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = BKSHIDEventGetBaseAttributes();
    uint64_t v2 = [v1 contextID];
    if (!v2
      || (+[UIWindow _windowWithContextId:v2],
          uint64_t v3 = objc_claimAutoreleasedReturnValue(),
          [v3 screen],
          uint64_t v4 = objc_claimAutoreleasedReturnValue(),
          v3,
          !v4))
    {
      BOOL v5 = [v1 display];
      uint64_t v4 = +[UIScreen _screenWithEventDisplay:v5];
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4;
}

BOOL _UIEventHIDIsPencilBarrelEvent()
{
  if (IOHIDEventGetType() != 39) {
    return 0;
  }
  Integeruint64_t Value = IOHIDEventGetIntegerValue();
  BOOL result = 1;
  if (IntegerValue != 5 && IntegerValue != 1)
  {
    if (!IntegerValue) {
      return IOHIDEventGetIntegerValue() == 2;
    }
    return 0;
  }
  return result;
}

BOOL _UIEventHIDIsDynamicButtonEvent(uint64_t a1)
{
  return IOHIDEventGetType() == 42 && _UIEventHIDGetChildForceStageEvent(a1) != 0;
}

uint64_t _UIEventHIDGetChildForceStageEvent(uint64_t a1)
{
  uint64_t v4 = 0;
  BOOL v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___UIEventHIDGetChildForceStageEvent_block_invoke;
  v3[3] = &unk_1E52DA1D8;
  v3[4] = &v4;
  _UIEventHIDEnumerateChildren(a1, 41, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186589738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIEventGetChildScrollVector(uint64_t a1)
{
  if (IOHIDEventGetType() != 6)
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v5 = [NSString stringWithUTF8String:"CGVector _UIEventGetChildScrollVector(IOHIDEventRef)"];
    [v4 handleFailureInFunction:v5 file:@"UIEventHIDHelpers.m" lineNumber:751 description:0];
  }
  uint64_t v7 = 0;
  long long v8 = (double *)&v7;
  uint64_t v9 = 0x3010000000;
  long long v10 = &unk_186D7DBA7;
  int64x2_t v11 = vdupq_n_s64(0x7FF8000000000000uLL);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = ___UIEventGetChildScrollVector_block_invoke;
  v6[3] = &unk_1E52DA1D8;
  v6[4] = &v7;
  _UIEventHIDEnumerateChildren(a1, 6, v6);
  double v2 = v8[4];
  _Block_object_dispose(&v7, 8);
  return v2;
}

void sub_18658988C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const void *_UIEventHIDGetChildScrollEvent(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
  if (!Children) {
    return 0;
  }
  CFArrayRef v2 = Children;
  CFIndex Count = CFArrayGetCount(Children);
  if (Count < 1) {
    return 0;
  }
  CFIndex v4 = Count;
  CFIndex v5 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
    if (IOHIDEventGetType() == 6) {
      break;
    }
    if (v4 == ++v5) {
      return 0;
    }
  }
  return ValueAtIndex;
}

uint64_t _UIEventHIDIsScrollEvent(uint64_t a1)
{
  if (IOHIDEventGetType() != 6) {
    return 0;
  }
  uint64_t result = _UIEventHIDShouldTransformEvent();
  if (result) {
    return _UIEventHIDGetDescendantPointerEvent(a1) != 0;
  }
  return result;
}

void _UIEventHIDGetTransformEventComponents(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v17 = 0;
  BOOL v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  uint64_t v13 = 0;
  BOOL v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  uint64_t v9 = 0;
  long long v10 = &v9;
  uint64_t v11 = 0x2020000000;
  uint64_t v12 = 0;
  if (IOHIDEventGetType() == 17)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = ___UIEventHIDGetTransformEventComponents_block_invoke;
    v8[3] = &unk_1E5304968;
    v8[4] = &v17;
    v8[5] = &v13;
    void v8[6] = &v9;
    _UIEventHIDEnumerateChildren(a1, 0, v8);
  }
  if (a2) {
    *a2 = v18[3];
  }
  if (a3) {
    *a3 = v14[3];
  }
  if (a4) {
    *a4 = v10[3];
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_186589B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t _UIEventHIDTransformPhaseForComponentEvent(uint64_t a1)
{
  if (os_variant_has_internal_diagnostics())
  {
    if (!a1)
    {
      CFIndex v4 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)CATransform3D buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "unable to determine transform phase because the hidEvent is nil", buf, 2u);
      }

      return 0;
    }
  }
  else if (!a1)
  {
    CFIndex v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UIEventHIDTransformPhaseForComponentEvent___s_category)
                      + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "unable to determine transform phase because the hidEvent is nil", v6, 2u);
    }
    return 0;
  }
  unsigned __int16 v2 = IOHIDEventGetPhase() - 1;
  if (v2 <= 7u) {
    return qword_186B9C1B0[(__int16)v2];
  }
  return 0;
}

uint64_t _UIEventHIDTransformPhaseForComponentPhases(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = a2 | a1 | a3;
  if (v3)
  {
    if (a1 == 4 && a2 == 4 && a3 == 4)
    {
      return 4;
    }
    else if (a1 <= 4 {
           && ((1 << a1) & 0x19) != 0
    }
           && a2 <= 4
           && ((1 << a2) & 0x19) != 0
           && a3 <= 4
           && ((1 << a3) & 0x19) != 0)
    {
      return 3;
    }
    else
    {
      uint64_t v3 = 2;
      if (a1 != 2)
      {
        uint64_t v6 = a1 == 1 || a2 == 1 || a3 == 1;
        if (a3 == 2) {
          uint64_t v6 = 2;
        }
        if (a2 != 2) {
          return v6;
        }
      }
    }
  }
  return v3;
}

BOOL _UIEventHIDIsTransformEvent(uint64_t a1)
{
  if (IOHIDEventGetType() != 17) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v3 = 0;
  _UIEventHIDGetTransformEventComponents(a1, &v5, &v4, &v3);
  return (v5 | v4 | v3) != 0;
}

const void *_UIEventHIDGetChildPointerEvent(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef Children = (const __CFArray *)IOHIDEventGetChildren();
  if (!Children) {
    return 0;
  }
  CFArrayRef v2 = Children;
  CFIndex Count = CFArrayGetCount(Children);
  if (Count < 1) {
    return 0;
  }
  CFIndex v4 = Count;
  CFIndex v5 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v2, v5);
    if (IOHIDEventGetType() == 17) {
      break;
    }
    if (v4 == ++v5) {
      return 0;
    }
  }
  return ValueAtIndex;
}

uint64_t _UIEventHIDGetInterfaceOrientationForEvent(uint64_t a1)
{
  CFArrayRef v2 = _UIEventHIDUIWindowForHIDEvent();
  uint64_t v3 = v2;
  if (!v2)
  {
LABEL_8:
    uint64_t v4 = 1;
    goto LABEL_9;
  }
  uint64_t v4 = [v2 _windowInterfaceOrientation];
  if ([(id)UIApp isFrontBoard]) {
    uint64_t v4 = [v3 _overriddenInterfaceOrientation];
  }
  if (!v4)
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    void v6[2] = ___UIEventHIDGetInterfaceOrientationForEvent_block_invoke;
    v6[3] = &unk_1E52D9CD0;
    id v7 = v3;
    uint64_t v8 = a1;
    if (_UIEventHIDGetInterfaceOrientationForEvent_once != -1) {
      dispatch_once(&_UIEventHIDGetInterfaceOrientationForEvent_once, v6);
    }

    goto LABEL_8;
  }
LABEL_9:

  return v4;
}

uint64_t _UIEventHIDButtonMaskFromPointerEventAndChildren(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v8 = 0;
  if (IOHIDEventGetType() == 17)
  {
    v6[3] = IOHIDEventGetIntegerValue();
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 3221225472;
    void v4[2] = ___UIEventHIDButtonMaskFromPointerEventAndChildren_block_invoke;
    _OWORD v4[3] = &unk_1E52DA1D8;
    v4[4] = &v5;
    _UIEventHIDEnumerateChildren(a1, 0, v4);
  }
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_18658A214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIEventHIDConvertPointerLocation3DToWindow(uint64_t a1, void *a2)
{
  if (!a1) {
    return *MEMORY[0x1E4F39B00];
  }
  uint64_t v2 = a2;
  IOHIDEventGetFloatValue();
  double v4 = v3;
  IOHIDEventGetFloatValue();
  double v6 = v5;
  IOHIDEventGetFloatValue();
  uint64_t v7 = -[UIWindow _fbsScene](v2);
  double v8 = _UIConvertScenePoint3DToWindow(v7, v2, v4, v6);

  return v8;
}

uint64_t _UIEventGetForceEvent(uint64_t a1)
{
  uint64_t v4 = 0;
  double v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___UIEventGetForceEvent_block_invoke;
  v3[3] = &unk_1E52DA1D8;
  v3[4] = &v4;
  _UIEventHIDEnumerateChildren(a1, 32, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18658A414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIEventGetAffineTransformForScaleEvent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IOHIDEventGetType();
  if (result != 7)
  {
    uint64_t v18 = MEMORY[0x1E4F1DAB8];
    long long v19 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
    *(_OWORD *)a2 = *MEMORY[0x1E4F1DAB8];
    *(_OWORD *)(a2 + 16) = v19;
    long long v20 = *(_OWORD *)(v18 + 32);
LABEL_23:
    *(_OWORD *)(a2 + 32) = v20;
    return result;
  }
  uint64_t result = IOHIDEventGetDoubleValue();
  double v6 = v5;
  double v7 = *MEMORY[0x1E4F1DAD8];
  double v8 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  double v9 = 0.0;
  if (a1 && (uint64_t result = IOHIDEventGetChildren()) != 0)
  {
    CFArrayRef v10 = (const __CFArray *)result;
    uint64_t result = CFArrayGetCount((CFArrayRef)result);
    CGFloat v11 = v7;
    CGFloat v12 = v8;
    if (result >= 1)
    {
      uint64_t v13 = result;
      CFIndex v14 = 0;
      CGFloat v12 = v8;
      CGFloat v11 = v7;
      do
      {
        CFArrayGetValueAtIndex(v10, v14);
        uint64_t result = IOHIDEventGetType();
        if (result == 4)
        {
          IOHIDEventGetDoubleValue();
          CGFloat v11 = v16;
          uint64_t result = IOHIDEventGetDoubleValue();
          CGFloat v12 = v17;
        }
        else if (result == 5)
        {
          uint64_t result = IOHIDEventGetDoubleValue();
          double v9 = v15;
        }
        ++v14;
      }
      while (v13 != v14);
    }
  }
  else
  {
    CGFloat v11 = v7;
    CGFloat v12 = v8;
  }
  uint64_t v21 = MEMORY[0x1E4F1DAB8];
  long long v22 = *MEMORY[0x1E4F1DAB8];
  long long v23 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)a2 = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)(a2 + 16) = v23;
  long long v24 = *(_OWORD *)(v21 + 32);
  *(_OWORD *)(a2 + 32) = v24;
  if (v6 != 0.0)
  {
    *(_OWORD *)&v31.CATransform3D a = v22;
    *(_OWORD *)&v31.c = v23;
    *(_OWORD *)&v31.tx = v24;
    uint64_t result = (uint64_t)CGAffineTransformScale((CGAffineTransform *)a2, &v31, v6 + 1.0, v6 + 1.0);
  }
  if (v9 != 0.0)
  {
    long long v25 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v30.CATransform3D a = *(_OWORD *)a2;
    *(_OWORD *)&v30.c = v25;
    *(_OWORD *)&v30.tx = *(_OWORD *)(a2 + 32);
    uint64_t result = (uint64_t)CGAffineTransformRotate(&v31, &v30, -v9);
    long long v26 = *(_OWORD *)&v31.c;
    *(_OWORD *)a2 = *(_OWORD *)&v31.a;
    *(_OWORD *)(a2 + 16) = v26;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v31.tx;
  }
  if (v11 != v7 || v12 != v8)
  {
    long long v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v30.CATransform3D a = *(_OWORD *)a2;
    *(_OWORD *)&v30.c = v28;
    *(_OWORD *)&v30.tx = *(_OWORD *)(a2 + 32);
    uint64_t result = (uint64_t)CGAffineTransformTranslate(&v31, &v30, v11, v12);
    long long v29 = *(_OWORD *)&v31.c;
    *(_OWORD *)a2 = *(_OWORD *)&v31.a;
    *(_OWORD *)(a2 + 16) = v29;
    long long v20 = *(_OWORD *)&v31.tx;
    goto LABEL_23;
  }
  return result;
}

uint64_t _UIEventHIDGetChildVendorDefinedForceStageEvent(uint64_t a1)
{
  uint64_t v4 = 0;
  double v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___UIEventHIDGetChildVendorDefinedForceStageEvent_block_invoke;
  v3[3] = &unk_1E52DA1D8;
  v3[4] = &v4;
  _UIEventHIDEnumerateChildren(a1, 1, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18658A6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *_NSStringFromUIPencilInteractionPhase(unint64_t a1)
{
  if (a1 > 3) {
    return &stru_1ED0E84C0;
  }
  else {
    return off_1E5304CB8[a1];
  }
}

void _accessibilityOpaqueTouchGestureValueChangedCallback(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("PencilPreferences", &_accessibilityOpaqueTouchGestureValueChangedCallback___s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    uint64_t v4 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *MEMORY[0x1E4FB9068];
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "Accessibility callback received for notification: %@", (uint8_t *)&v6, 0xCu);
    }
  }
  -[_UIPencilPreferences _preferredTapActionDidChange](v2);
  -[_UIPencilPreferences _preferredSqueezeActionDidChange](v2);
}

void sub_18658E924(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18658EB0C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18658ECEC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18658F1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIInitializeStateRestorationCollections(void *a1, void *a2, void *a3)
{
  _UIViewControllerRootSet = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA80]);
  *a1 = _UIViewControllerRootSet;
  _UICurrentViewControllerRoots = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  *a2 = _UICurrentViewControllerRoots;
  id result = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  _UIViewControllerRestorationClassMap = (uint64_t)result;
  *a3 = result;
  return result;
}

void _UIReleaseStateRestorationCollections()
{
  _UIViewControllerRootSet = 0;
  _UICurrentViewControllerRoots = 0;

  _UIViewControllerRestorationClassMap = 0;
}

uint64_t _restorationIdentifierPathArrayForResponder(void *a1)
{
  uint64_t v1 = a1;
  uint64_t result = [a1 restorationIdentifier];
  if (!result) {
    return result;
  }
  id v3 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithObjects:", result, 0);
  if (!v1) {
    return (uint64_t)v3;
  }
  uint64_t v4 = v1;
  while (1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      break;
    }
    id v5 = +[UIViewController viewControllerForView:v4];
    if (v5)
    {
      uint64_t v1 = 0;
LABEL_12:
      uint64_t v4 = v5;
      goto LABEL_13;
    }
    uint64_t v4 = (void *)[v4 superview];
    if (!v4) {
      return (uint64_t)v3;
    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SWarningAskedT.isa, "NSArray *_restorationIdentifierPathArrayForResponder(UIResponder *)", v4);
    }
    return (uint64_t)v3;
  }
  if (v4 != v1)
  {
    uint64_t v1 = 0;
    goto LABEL_13;
  }
  uint64_t result = [(id)qword_1EB262DA0 objectForKey:objc_msgSend(NSString, "stringWithFormat:", @"%p", v1)];
  if (!result)
  {
    id v5 = (id)[v1 parentViewController];
    if (v5) {
      goto LABEL_12;
    }
    id v5 = (id)[v1 presentingViewController];
    if (v5) {
      goto LABEL_12;
    }
    uint64_t v4 = (void *)[v1 splitViewController];
    if (!v4) {
      return (uint64_t)v3;
    }
    while (1)
    {
LABEL_13:
      int v6 = v1;
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v7 = [v4 _stateRestorationParentForChildViewController:v1 index:&v12];
        if (v7) {
          uint64_t v1 = (void *)v7;
        }
        else {
          uint64_t v1 = v4;
        }
      }
      else
      {
        uint64_t v1 = v4;
      }
      uint64_t v8 = v12;
      if (v12 != 0x7FFFFFFFFFFFFFFFLL
        || v6
        && ((double v9 = (void *)[v1 childViewControllers]) == 0
          ? (uint64_t v8 = v12)
          : (v8 = [v9 indexOfObject:v6], uint64_t v12 = v8),
            v8 != 0x7FFFFFFFFFFFFFFFLL))
      {
        [v3 insertObject:objc_msgSend(NSString, "stringWithFormat:", @":[%lu]:", v8), 0 atIndex];
      }
      CFArrayRef v10 = (void *)[(id)qword_1EB262DA0 objectForKey:objc_msgSend(NSString, "stringWithFormat:", @"%p", v1)];
      if (v10) {
        break;
      }
      uint64_t v11 = [v1 restorationIdentifier];
      if (v11) {
        [v3 insertObject:v11 atIndex:0];
      }
      uint64_t v4 = (void *)[v1 parentViewController];
      if (!v4)
      {
        uint64_t v4 = (void *)[v1 presentingViewController];
        if (!v4)
        {
          uint64_t v4 = (void *)[v1 splitViewController];
          if (!v4) {
            return (uint64_t)v3;
          }
        }
      }
    }
    return [v10 arrayByAddingObjectsFromArray:v3];
  }
  return result;
}

uint64_t _restorationIdentifierPathStringForObject(void *a1)
{
  uint64_t v1 = (void *)_restorationIdentifierPathArrayForObject(a1);
  return [v1 componentsJoinedByString:@"/"];
}

uint64_t _restorationIdentifierPathArrayForObject(void *a1)
{
  if (objc_msgSend(a1, "__isKindOfUIResponder"))
  {
    return _restorationIdentifierPathArrayForResponder(a1);
  }
  if (![a1 conformsToProtocol:&unk_1ED7013C0])
  {
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SAskedToGetRes.isa, "NSArray *_restorationIdentifierPathArrayForObject", a1);
    }
    return 0;
  }
  if (!objc_getAssociatedObject(a1, &_MergedGlobals_1213))
  {
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SWarningAskedF.isa, "NSArray *_restorationIdentifierPathForRestorableObject(id<UIStateRestoring>)", a1);
    }
    return 0;
  }
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  objc_opt_class();
  uint64_t v4 = (void *)[MEMORY[0x1E4F1CA80] set];
  if (!a1) {
    return (uint64_t)v3;
  }
  id v5 = v4;
  if ([v4 containsObject:a1])
  {
    int v6 = 0;
    uint64_t v7 = a1;
LABEL_10:
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SWarningRestor.isa, "NSArray *_restorationIdentifierPathForRestorableObject(id<UIStateRestoring>)", a1, v7, v6);
    }
    return (uint64_t)v3;
  }
  uint64_t v8 = a1;
  while (1)
  {
    [v5 addObject:v8];
    double v9 = (void *)[(id)qword_1EB262DA0 objectForKey:objc_msgSend(NSString, "stringWithFormat:", @"%p", v8)];
    if (v9) {
      break;
    }
    if (objc_opt_isKindOfClass())
    {
      double v9 = (void *)_restorationIdentifierPathArrayForResponder(v8);
      break;
    }
    id AssociatedObject = objc_getAssociatedObject(v8, &_MergedGlobals_1213);
    if (AssociatedObject) {
      [v3 insertObject:AssociatedObject atIndex:0];
    }
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      return (uint64_t)v3;
    }
    uint64_t v11 = [v8 restorationParent];
    if (!v11) {
      return (uint64_t)v3;
    }
    uint64_t v7 = (void *)v11;
    int v6 = v8;
    uint64_t v8 = (void *)v11;
    if ([v5 containsObject:v11]) {
      goto LABEL_10;
    }
  }
  return [v9 arrayByAddingObjectsFromArray:v3];
}

void _UIAddViewControllerToRoots(void *a1)
{
  if (([(id)_UIViewControllerRootSet containsObject:a1] & 1) == 0)
  {
    [(id)_UIViewControllerRootSet addObject:a1];
    [(id)_UICurrentViewControllerRoots addObject:a1];
    uint64_t v2 = [a1 _restorationClassName];
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = [a1 _restorationIdentifierPath];
      if (v4)
      {
        uint64_t v5 = v4;
        int v6 = (void *)_UIViewControllerRestorationClassMap;
        [v6 setObject:v3 forKey:v5];
      }
      else if (_UIStateRestorationDebugLogEnabled())
      {
        NSLog(&cfstr_SWarningViewCo.isa, "void _UIAddViewControllerToRoots(UIViewController *)", a1);
      }
    }
  }
}

void _UIAddObjectToStateRestorationRoots(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    _UIAddViewControllerToRoots(a1);
  }
  else if ([a1 conformsToProtocol:&unk_1ED7013C0])
  {
    if (([(id)_UIViewControllerRootSet containsObject:a1] & 1) == 0)
    {
      [(id)_UIViewControllerRootSet addObject:a1];
      [(id)_UICurrentViewControllerRoots addObject:a1];
      if (objc_opt_respondsToSelector())
      {
        uint64_t v2 = (objc_class *)[a1 objectRestorationClass];
        if (v2)
        {
          uint64_t v3 = NSStringFromClass(v2);
          if (v3)
          {
            uint64_t v4 = v3;
            uint64_t v5 = [(id)_restorationIdentifierPathArrayForObject(a1) componentsJoinedByString:@"/"];
            if (v5)
            {
              uint64_t v6 = v5;
              uint64_t v7 = (void *)_UIViewControllerRestorationClassMap;
              [v7 setObject:v4 forKey:v6];
            }
            else if (_UIStateRestorationDebugLogEnabled())
            {
              NSLog(&cfstr_SWarningRestor_0.isa, "void _UIAddRestorableObjectToRoots(NSObject<UIStateRestoring> *)", a1);
            }
          }
        }
      }
    }
  }
  else if (_UIStateRestorationDebugLogEnabled())
  {
    NSLog(&cfstr_SWarningCalled.isa, "void _UIAddObjectToStateRestorationRoots", a1);
  }
}

uint64_t decodeSomeKindOfObject(void *a1, uint64_t a2, const char *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v5 = [a1 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)v22;
    uint64_t v18 = a1;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(a1);
        }
        CFArrayRef v10 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        uint64_t v11 = objc_opt_class();
        uint64_t v12 = objc_opt_class();
        if ((void *)v11 == v10
          || ([v10 isSubclassOfClass:v11] & 1) != 0
          || (uint64_t v13 = (uint64_t)v10, [v10 conformsToProtocol:&unk_1ED7013C0]))
        {
          uint64_t v13 = objc_opt_class();
        }
        if ((void *)v12 == v10 || [v10 isSubclassOfClass:v12]) {
          uint64_t v13 = objc_opt_class();
        }
        if (v10 != (void *)v13)
        {
          if (_UIStateRestorationDebugLogEnabled()) {
            NSLog(&cfstr_SUnarchivingBu.isa, "id decodeSomeKindOfObject(NSSet<Class> *, NSString *, SEL, UIStateRestorationKeyedUnarchiver *)", a2, v10, v13);
          }
          if (!v7)
          {
            uint64_t v7 = (void *)[a1 mutableCopy];
            uint64_t v18 = v7;
          }
          [v7 addObject:v13];
        }
      }
      uint64_t v6 = [a1 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v6);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v18 = a1;
  }
  v20.receiver = a4;
  v20.super_class = (Class)[a4 superclass];
  uint64_t v14 = (uint64_t)objc_msgSendSuper(&v20, a3, v18, a2);
  if (v14 && v7) {
    uint64_t v14 = verifyDecodedObject(v14, a2, a1, [a4 decodingFailurePolicy]);
  }

  return v14;
}

uint64_t verifyDecodedObject(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v8 = [a3 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
    while (2)
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(a3);
        }
        uint64_t v12 = *(void *)(*((void *)&v16 + 1) + 8 * v11);
        if (objc_opt_isKindOfClass())
        {
          if (_UIStateRestorationDebugLogEnabled())
          {
            uint64_t v14 = objc_opt_class();
            NSLog(&cfstr_SUnarchivingVe.isa, "id verifyDecodedObject(id, NSString *, NSSet<Class> *, NSDecodingFailurePolicy)", a2, v12, v14);
          }
          return a1;
        }
        ++v11;
      }
      while (v9 != v11);
      uint64_t v9 = [a3 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }
  uint64_t v13 = objc_opt_class();
  NSLog(&cfstr_SUnarchivingEr.isa, "id verifyDecodedObject(id, NSString *, NSSet<Class> *, NSDecodingFailurePolicy)", a2, v13, a3);
  if (a4) {
    return 0;
  }
  [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F28498], @"value for key %@ was of unexpected class %@. Allowed classes are %@", a2, objc_opt_class(), a3 format];
  return a1;
}

void _UISaveReferencedChildViewControllers(void *a1, uint64_t a2)
{
  if ([a1 count])
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = (void *)[a1 objectAtIndex:v4];
      uint64_t v6 = [v5 _restorationIdentifierPath];
      if (v6)
      {
        _UIAddViewControllerToRoots(v5);
      }
      else if (_UIStateRestorationDebugLogEnabled())
      {
        NSLog(&cfstr_SChildViewCont_1.isa, "void _UISaveReferencedChildViewControllers(NSArray *, BOOL (^)(UIViewController *, NSString *))", v4, v5);
      }
      if (a2 && ((*(uint64_t (**)(uint64_t, void *, uint64_t))(a2 + 16))(a2, v5, v6) & 1) == 0) {
        break;
      }
      if ([a1 count] <= (unint64_t)++v4) {
        return;
      }
    }
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SCallbackRetur.isa, "void _UISaveReferencedChildViewControllers(NSArray *, BOOL (^)(UIViewController *, NSString *))", v4, v5);
    }
  }
}

uint64_t _rebuildStateRestorationIdentifierPath(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t result = [a2 containsObject:a1];
  if ((result & 1) == 0)
  {
    [a2 addObject:a1];
    uint64_t result = [a1 restorationIdentifier];
    if (result)
    {
      [a1 setRestorationIdentifier:result];
      uint64_t v5 = [a1 childModalViewController];
      if (v5) {
        _rebuildStateRestorationIdentifierPath(v5, a2);
      }
      uint64_t v6 = (void *)[a1 _allContainedViewControllers];
      long long v11 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      uint64_t v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)v12;
        do
        {
          uint64_t v10 = 0;
          do
          {
            if (*(void *)v12 != v9) {
              objc_enumerationMutation(v6);
            }
            _rebuildStateRestorationIdentifierPath(*(void *)(*((void *)&v11 + 1) + 8 * v10++), a2);
          }
          while (v8 != v10);
          uint64_t v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
        }
        while (v8);
      }
      uint64_t result = [a1 isViewLoaded];
      if (result)
      {
        uint64_t result = [a1 view];
        if (result) {
          return (uint64_t)_rebuildStateRestorationIdentifierPathForViews((void *)result, a1);
        }
      }
    }
  }
  return result;
}

void UIAddObjectToStateRestorationRoots(void *a1)
{
  id v2 = _restorationIdentifierForObject(a1);
  if (v2)
  {
    uint64_t v3 = (uint64_t)v2;
    id v4 = (id)qword_1EB262DC8;
    if (!qword_1EB262DC8)
    {
      id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      qword_1EB262DC8 = (uint64_t)v4;
    }
    _putObjectIdentifierIntoRestorationIdentifierMap(a1, v3, v4);
  }
  else if (_UIStateRestorationDebugLogEnabled())
  {
    NSLog(&cfstr_SObjectDoesNot.isa, "void UIAddObjectToStateRestorationRoots(id<UIStateRestoring>)", a1);
  }
}

id _restorationIdentifierForObject(void *a1)
{
  if (objc_msgSend(a1, "__isKindOfUIResponder"))
  {
    return (id)[a1 restorationIdentifier];
  }
  else if ([a1 conformsToProtocol:&unk_1ED7013C0])
  {
    return objc_getAssociatedObject(a1, &_MergedGlobals_1213);
  }
  else
  {
    if (_UIStateRestorationDebugLogEnabled()) {
      NSLog(&cfstr_SAskedToGetRes_0.isa, "NSString *_restorationIdentifierForObject", a1);
    }
    return 0;
  }
}

void _putObjectIdentifierIntoRestorationIdentifierMap(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)_restorationIdentifierPathArrayForObject(a1);
  if (v6 && (uint64_t v7 = v6, [v6 count]))
  {
    uint64_t v8 = [v7 componentsJoinedByString:@"/"];
    [a3 setObject:a1 forKey:v8];
  }
  else
  {
    NSLog(&cfstr_SWarningCouldn_0.isa, "void _putObjectIdentifierIntoRestorationIdentifierMap(NSObject *, NSString *, NSMutableDictionary *, NSString *)", a2, a1);
  }
}

void UIRemoveObjectFromStateRestorationRoots(void *a1)
{
  uint64_t v2 = [(id)_restorationIdentifierPathArrayForObject(a1) componentsJoinedByString:@"/"];
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = (void *)qword_1EB262DC8;
    [v4 removeObjectForKey:v3];
  }
  else if (_UIStateRestorationDebugLogEnabled())
  {
    NSLog(&cfstr_SObjectDoesNot_0.isa, "void UIRemoveObjectFromStateRestorationRoots(id<UIStateRestoring>)", a1);
  }
}

uint64_t _deleteStateRestorationArchiveForApplication(uint64_t a1, void *a2)
{
  uint64_t result = CFPreferencesGetAppBooleanValue(@"UIStateRestorationDeveloperMode", (CFStringRef)*MEMORY[0x1E4F1D3D8], 0);
  if (!result)
  {
    uint64_t result = _stateRestorationPathForBundleIdentifier(a1, a2);
    if (result) {
      return objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "removeItemAtURL:error:", result, 0);
    }
  }
  return result;
}

void sub_18659563C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  id v14 = objc_begin_catch(exception_object);
  NSLog(&cfstr_SExceptionOccu_6.isa, "void _deleteStateRestorationArchiveForApplication(NSString *, NSString *)", v14);
  objc_end_catch();
}

uint64_t _applicationCanBeRestored(uint64_t a1, void *a2)
{
  char v7 = 1;
  unsigned int v2 = _checkApplicationRestorationState(a1, a2, &v7);
  if (_UIStateRestorationDebugLogEnabled())
  {
    uint64_t v3 = "No";
    if (v2) {
      id v4 = "Yes";
    }
    else {
      id v4 = "No";
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = "No";
    }
    if (v7) {
      uint64_t v3 = "Yes";
    }
    NSLog(&cfstr_SReturningSUse.isa, "BOOL _applicationCanBeRestored(NSString *, NSString *)", v5, v3, v4);
  }
  if (v7) {
    return v2;
  }
  else {
    return 0;
  }
}

id _rebuildStateRestorationIdentifierPathForViews(void *a1, id a2)
{
  id result = +[UIViewController viewControllerForView:a1];
  if (result) {
    BOOL v5 = result == a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = [a1 restorationIdentifier];
    if (v6) {
      [a1 setRestorationIdentifier:v6];
    }
    char v7 = (void *)[a1 subviews];
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = ___rebuildStateRestorationIdentifierPathForViews_block_invoke;
    v8[3] = &unk_1E5304D58;
    v8[4] = a2;
    return (id)[v7 enumerateObjectsUsingBlock:v8];
  }
  return result;
}

uint64_t ___rebuildStateRestorationIdentifierPathForViews_block_invoke(uint64_t a1, uint64_t a2)
{
  return _rebuildStateRestorationIdentifierPathForViews(a2, *(void *)(a1 + 32));
}

void sub_186596714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186596A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _cacheAccessQueue()
{
  if (qword_1EB262DD8 != -1) {
    dispatch_once(&qword_1EB262DD8, &__block_literal_global_475);
  }
  int v0 = (void *)_MergedGlobals_1214;
  return v0;
}

void ___cacheAccessQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit UIstatusBarForegroundStyleAttributes cache access queue", 0);
  uint64_t v1 = (void *)_MergedGlobals_1214;
  _MergedGlobals_1214 = (uint64_t)v0;
}

void sub_1865A075C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1865A1434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UICollectionViewSetupExpandCollapseAnimations(void *a1, void *a2, void *a3)
{
  uint64_t v302 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  uint64_t v6 = a2;
  id v7 = a3;
  v238 = v5;
  v222 = v6;
  if (v5)
  {
    if (v6) {
      goto LABEL_3;
    }
LABEL_213:
    id v209 = v7;
    v210 = [MEMORY[0x1E4F28B00] currentHandler];
    v211 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UICollectionViewSetupExpandCollapseAnimations(UICollectionView *__strong _Nonnull, _UICollectionViewAnimationContext *__strong _Nonnull, __strong id<_UICollectionViewUpdateExpandCollapseAnimationContext> _Nonnull)");
    [v210 handleFailureInFunction:v211, @"UICollectionViewExpandCollapseAnimationGeneration.m", 15, @"Invalid parameter not satisfying: %@", @"context != nil" file lineNumber description];

    uint64_t v6 = v222;
    id v7 = v209;
    if (v209) {
      goto LABEL_4;
    }
    goto LABEL_214;
  }
  id v206 = v7;
  v207 = [MEMORY[0x1E4F28B00] currentHandler];
  v208 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UICollectionViewSetupExpandCollapseAnimations(UICollectionView *__strong _Nonnull, _UICollectionViewAnimationContext *__strong _Nonnull, __strong id<_UICollectionViewUpdateExpandCollapseAnimationContext> _Nonnull)");
  [v207 handleFailureInFunction:v208, @"UICollectionViewExpandCollapseAnimationGeneration.m", 14, @"Invalid parameter not satisfying: %@", @"collectionView != nil" file lineNumber description];

  uint64_t v6 = v222;
  id v7 = v206;
  if (!v222) {
    goto LABEL_213;
  }
LABEL_3:
  if (v7) {
    goto LABEL_4;
  }
LABEL_214:
  id v212 = v7;
  v213 = [MEMORY[0x1E4F28B00] currentHandler];
  v214 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UICollectionViewSetupExpandCollapseAnimations(UICollectionView *__strong _Nonnull, _UICollectionViewAnimationContext *__strong _Nonnull, __strong id<_UICollectionViewUpdateExpandCollapseAnimationContext> _Nonnull)");
  [v213 handleFailureInFunction:v214, @"UICollectionViewExpandCollapseAnimationGeneration.m", 16, @"Invalid parameter not satisfying: %@", @"expandCollapseAnimationContext != nil" file lineNumber description];

  uint64_t v6 = v222;
  id v7 = v212;
LABEL_4:
  BOOL v8 = v6 == 0;
  v235 = v7;
  uint64_t v9 = [v7 indexPathsForExpandedParentItems];
  uint64_t v10 = [v238 _indexPathsAfterShadowUpdatesForIndexPaths:v9];

  id v11 = v10;
  long long v12 = [v235 indexPathsForCollapsedParentItems];
  long long v13 = [v238 _indexPathsAfterShadowUpdatesForIndexPaths:v12];

  id v217 = v13;
  if (v8)
  {
    id v14 = 0;
    id v15 = 0;
  }
  else
  {
    id v14 = v222[6];
    id v15 = v222[7];
  }
  id v245 = v15;
  [v238 _visibleBounds];
  uint64_t v223 = v17;
  uint64_t v224 = v16;
  double v225 = v19;
  double v226 = v18;
  long long v290 = 0u;
  long long v291 = 0u;
  long long v292 = 0u;
  long long v293 = 0u;
  id obj = v11;
  uint64_t v233 = [obj countByEnumeratingWithState:&v290 objects:v301 count:16];
  if (v233)
  {
    uint64_t v227 = *(void *)v291;
    double v229 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    double v231 = *MEMORY[0x1E4F1DAD8];
    do
    {
      uint64_t v20 = 0;
      do
      {
        if (*(void *)v291 != v227)
        {
          uint64_t v21 = v20;
          objc_enumerationMutation(obj);
          uint64_t v20 = v21;
        }
        uint64_t v236 = v20;
        id v239 = *(id *)(*((void *)&v290 + 1) + 8 * v20);
        long long v22 = objc_msgSend(v238, "_indexPathBeforeShadowUpdatesForIndexPath:");
        long long v23 = [v235 indexPathsForChildItemsInExpandingParent:v22];
        long long v24 = [v238 _indexPathsAfterShadowUpdatesForIndexPaths:v23];

        id v241 = v24;
        long long v25 = [v238 cellForItemAtIndexPath:v239];
        uint64_t v26 = [v25 _layoutAttributes];

        if (v26)
        {
          BOOL v27 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v241, "count"));
          long long v288 = 0u;
          long long v289 = 0u;
          long long v286 = 0u;
          long long v287 = 0u;
          id v28 = v241;
          uint64_t v29 = [v28 countByEnumeratingWithState:&v286 objects:v300 count:16];
          if (v29)
          {
            uint64_t v30 = *(void *)v287;
            do
            {
              for (uint64_t i = 0; i != v29; ++i)
              {
                if (*(void *)v287 != v30) {
                  objc_enumerationMutation(v28);
                }
                CGAffineTransform v32 = *(void **)(*((void *)&v286 + 1) + 8 * i);
                CGAffineTransform v33 = +[_UICollectionViewItemKey collectionItemKeyForCellWithIndexPath:]((uint64_t)_UICollectionViewItemKey, v32);
                CGAffineTransform v34 = [v14 objectForKeyedSubscript:v33];
                BOOL v35 = v34 == 0;

                if (!v35) {
                  [v27 addObject:v32];
                }
              }
              uint64_t v29 = [v28 countByEnumeratingWithState:&v286 objects:v300 count:16];
            }
            while (v29);
          }

          id v36 = v27;
          long long v284 = 0u;
          long long v285 = 0u;
          long long v282 = 0u;
          long long v283 = 0u;
          id v243 = v36;
          uint64_t v37 = [v243 countByEnumeratingWithState:&v282 objects:v299 count:16];
          double v39 = v229;
          double v38 = v231;
          double v246 = v229;
          double v40 = v231;
          if (v37)
          {
            uint64_t v41 = *(void *)v283;
            double v39 = v229;
            double v38 = v231;
            double v246 = v229;
            double v40 = v231;
            do
            {
              for (uint64_t j = 0; j != v37; ++j)
              {
                if (*(void *)v283 != v41) {
                  objc_enumerationMutation(v243);
                }
                CGAffineTransform v43 = *(void **)(*((void *)&v282 + 1) + 8 * j);
                CGAffineTransform v44 = +[_UICollectionViewItemKey collectionItemKeyForCellWithIndexPath:]((uint64_t)_UICollectionViewItemKey, v43);
                long long v45 = [v14 objectForKey:v44];
                long long v46 = [v45 view];
                long long v47 = [v46 _layoutAttributes];

                if (!v47)
                {
                  v77 = [MEMORY[0x1E4F28B00] currentHandler];
                  v78 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UICollectionViewSetupExpandCollapseAnimations(UICollectionView *__strong _Nonnull, _UICollectionViewAnimationContext *__strong _Nonnull, __strong id<_UICollectionViewUpdateExpandCollapseAnimationContext> _Nonnull)");
                  [v77 handleFailureInFunction:v78, @"UICollectionViewExpandCollapseAnimationGeneration.m", 67, @"Unable to get initial attributes for expanding item at index path %@", v43 file lineNumber description];
                }
                long long v48 = [v14 objectForKey:v44];
                long long v49 = [v48 finalLayoutAttributes];

                if (!v49)
                {
                  v219 = [MEMORY[0x1E4F28B00] currentHandler];
                  CATransform3D v79 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UICollectionViewSetupExpandCollapseAnimations(UICollectionView *__strong _Nonnull, _UICollectionViewAnimationContext *__strong _Nonnull, __strong id<_UICollectionViewUpdateExpandCollapseAnimationContext> _Nonnull)");
                  [v219 handleFailureInFunction:v79, @"UICollectionViewExpandCollapseAnimationGeneration.m", 70, @"Unable to get final attributes for expanding item at index path %@", v43 file lineNumber description];
                }
                [v47 center];
                double v51 = v50;
                [v26 center];
                double v53 = v52;
                [v47 center];
                double v55 = v54;
                [v26 center];
                double v56 = v51 - v53;
                double v58 = v55 - v57;
                if (v38 >= v51 - v53) {
                  double v59 = v38;
                }
                else {
                  double v59 = v51 - v53;
                }
                if (v38 >= v51 - v53) {
                  double v60 = v51 - v53;
                }
                else {
                  double v60 = v38;
                }
                BOOL v61 = v56 >= 0.0;
                if (v56 < 0.0) {
                  double v38 = v60;
                }
                else {
                  double v38 = v59;
                }
                if (v39 >= v58) {
                  double v62 = v39;
                }
                else {
                  double v62 = v58;
                }
                if (v39 >= v58) {
                  double v63 = v58;
                }
                else {
                  double v63 = v39;
                }
                if (v58 < 0.0) {
                  double v39 = v63;
                }
                else {
                  double v39 = v62;
                }
                [v49 frame];
                CGFloat v68 = v64;
                CGFloat v69 = v65;
                CGFloat v70 = v66;
                CGFloat v71 = v67;
                if (v61)
                {
                  double MaxX = CGRectGetMaxX(*(CGRect *)&v64);
                  if (MaxX >= v40) {
                    double v40 = MaxX;
                  }
                }
                else
                {
                  double MinX = CGRectGetMinX(*(CGRect *)&v64);
                  if (MinX < v40) {
                    double v40 = MinX;
                  }
                }
                if (v58 < 0.0)
                {
                  v304.origin.x = v68;
                  v304.origin.y = v69;
                  v304.size.size_t width = v70;
                  v304.size.size_t height = v71;
                  double MinY = CGRectGetMinY(v304);
                  double v75 = v246;
                  if (MinY < v246) {
                    double v75 = MinY;
                  }
                }
                else
                {
                  v303.origin.x = v68;
                  v303.origin.y = v69;
                  v303.size.size_t width = v70;
                  v303.size.size_t height = v71;
                  double MaxY = CGRectGetMaxY(v303);
                  double v75 = v246;
                  if (MaxY >= v246) {
                    double v75 = MaxY;
                  }
                }
                double v246 = v75;
              }
              uint64_t v37 = [v243 countByEnumeratingWithState:&v282 objects:v299 count:16];
            }
            while (v37);
          }

          [v26 frame];
          double v84 = v83;
          double v85 = v80;
          double v86 = v81;
          double v87 = v82;
          double v88 = -v39;
          if (v39 >= 0.0) {
            double v88 = v39;
          }
          if (v88 <= 0.0)
          {
            if (v38 < 0.0)
            {
              double v93 = v84;
              double v94 = CGRectGetMinX(*(CGRect *)(&v80 - 1));
              if (v40 - v94 >= 0.0) {
                double v86 = v40 - v94;
              }
              else {
                double v86 = -(v40 - v94);
              }
              double v84 = v94 - v86;
              double v92 = 0.0;
              double v91 = v87;
              double v90 = v85;
              goto LABEL_85;
            }
            double v96 = v84;
            double v84 = CGRectGetMaxX(*(CGRect *)(&v80 - 1));
            if (v40 - v84 >= 0.0) {
              double v86 = v40 - v84;
            }
            else {
              double v86 = -(v40 - v84);
            }
            double v92 = 0.0;
            double v91 = v87;
          }
          else
          {
            if (v39 < 0.0)
            {
              double v89 = v84;
              double v90 = CGRectGetMinY(*(CGRect *)(&v80 - 1));
              if (v246 - v90 >= 0.0) {
                double v87 = v246 - v90;
              }
              else {
                double v87 = -(v246 - v90);
              }
              double v85 = v90 - v87;
              double v91 = 0.0;
              double v92 = v86;
LABEL_84:
              double v94 = v84;
LABEL_85:
              v281[0] = MEMORY[0x1E4F143A8];
              v281[1] = 3221225472;
              v281[2] = ___UICollectionViewSetupExpandCollapseAnimations_block_invoke;
              v281[3] = &unk_1E5304ED0;
              v281[4] = v239;
              v281[5] = v224;
              v281[6] = v223;
              *(double *)&v281[7] = v226;
              *(double *)&v281[8] = v225;
              *(double *)&v281[9] = v38;
              *(double *)&v281[10] = v39;
              *(double *)&v281[11] = v94;
              *(double *)&v281[12] = v90;
              *(double *)&v281[13] = v92;
              *(double *)&v281[14] = v91;
              *(double *)&v281[15] = v84;
              *(double *)&v281[16] = v85;
              *(double *)&v281[17] = v86;
              *(double *)&v281[18] = v87;
              [v14 enumerateKeysAndObjectsUsingBlock:v281];

              goto LABEL_86;
            }
            double v95 = v84;
            double v85 = CGRectGetMaxY(*(CGRect *)(&v80 - 1));
            if (v246 - v85 >= 0.0) {
              double v87 = v246 - v85;
            }
            else {
              double v87 = -(v246 - v85);
            }
            double v91 = 0.0;
            double v92 = v86;
          }
          double v90 = v85;
          goto LABEL_84;
        }
LABEL_86:

        uint64_t v20 = v236 + 1;
      }
      while (v236 + 1 != v233);
      uint64_t v233 = [obj countByEnumeratingWithState:&v290 objects:v301 count:16];
    }
    while (v233);
  }

  uint64_t v276 = 0;
  v277 = (double *)&v276;
  uint64_t v278 = 0x3010000000;
  v279 = &unk_186D7DBA7;
  long long v280 = xmmword_186B93620;
  long long v272 = 0u;
  long long v273 = 0u;
  long long v274 = 0u;
  long long v275 = 0u;
  id v216 = v217;
  uint64_t v221 = [v216 countByEnumeratingWithState:&v272 objects:v298 count:16];
  if (v221)
  {
    uint64_t v220 = *(void *)v273;
    v215 = v249;
    double v228 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
    double v230 = *MEMORY[0x1E4F1DAD8];
    do
    {
      uint64_t v234 = 0;
      do
      {
        if (*(void *)v273 != v220) {
          objc_enumerationMutation(v216);
        }
        uint64_t v97 = *(void **)(*((void *)&v272 + 1) + 8 * v234);
        uint64_t v242 = [v97 section];
        v232 = v97;
        uint64_t v98 = [v238 _indexPathBeforeShadowUpdatesForIndexPath:v97];
        v99 = [v235 indexPathsForChildItemsInCollapsingParent:v98];
        uint64_t v100 = [v238 _indexPathsAfterShadowUpdatesForIndexPaths:v99];

        id v237 = v100;
        uint64_t v101 = [v238 cellForItemAtIndexPath:v232];
        uint64_t v102 = [v101 _layoutAttributes];

        if (v102)
        {
          v103 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v237, "count"));
          long long v270 = 0u;
          long long v271 = 0u;
          long long v268 = 0u;
          long long v269 = 0u;
          id v104 = v237;
          uint64_t v105 = [v104 countByEnumeratingWithState:&v268 objects:v297 count:16];
          if (v105)
          {
            uint64_t v106 = *(void *)v269;
            do
            {
              for (uint64_t k = 0; k != v105; ++k)
              {
                if (*(void *)v269 != v106) {
                  objc_enumerationMutation(v104);
                }
                long long v108 = *(void **)(*((void *)&v268 + 1) + 8 * k);
                long long v109 = +[_UICollectionViewItemKey collectionItemKeyForCellWithIndexPath:]((uint64_t)_UICollectionViewItemKey, v108);
                uint64_t v110 = [v245 objectForKeyedSubscript:v109];
                BOOL v111 = v110 == 0;

                if (!v111) {
                  [v103 addObject:v108];
                }
              }
              uint64_t v105 = [v104 countByEnumeratingWithState:&v268 objects:v297 count:16];
            }
            while (v105);
          }

          id v112 = v103;
          long long v266 = 0u;
          long long v267 = 0u;
          long long v264 = 0u;
          long long v265 = 0u;
          id v240 = v112;
          uint64_t v113 = [v240 countByEnumeratingWithState:&v264 objects:v296 count:16];
          double v114 = v228;
          double v244 = v230;
          double v115 = v228;
          double v247 = v230;
          if (v113)
          {
            uint64_t v116 = *(void *)v265;
            double v114 = v228;
            double v244 = v230;
            double v115 = v228;
            double v247 = v230;
            do
            {
              for (uint64_t m = 0; m != v113; ++m)
              {
                if (*(void *)v265 != v116) {
                  objc_enumerationMutation(v240);
                }
                long long v118 = *(void **)(*((void *)&v264 + 1) + 8 * m);
                CGFloat v119 = +[_UICollectionViewItemKey collectionItemKeyForCellWithIndexPath:]((uint64_t)_UICollectionViewItemKey, v118);
                long long v120 = [v245 objectForKeyedSubscript:v119];
                CGFloat v121 = [v120 view];
                long long v122 = [v121 _layoutAttributes];

                if (!v122)
                {
                  v152 = [MEMORY[0x1E4F28B00] currentHandler];
                  v153 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UICollectionViewSetupExpandCollapseAnimations(UICollectionView *__strong _Nonnull, _UICollectionViewAnimationContext *__strong _Nonnull, __strong id<_UICollectionViewUpdateExpandCollapseAnimationContext> _Nonnull)");
                  [v152 handleFailureInFunction:v153, @"UICollectionViewExpandCollapseAnimationGeneration.m", 186, @"Could not find layout attributes for collapsing item at index path %@", v118, v215 file lineNumber description];
                }
                [v122 center];
                double v124 = v123;
                [v102 center];
                double v126 = v125;
                [v122 center];
                double v128 = v127;
                [v102 center];
                double v129 = v114;
                double v130 = v124 - v126;
                double v131 = v115;
                double v133 = v128 - v132;
                double v134 = v247;
                if (v247 >= v124 - v126) {
                  double v135 = v247;
                }
                else {
                  double v135 = v124 - v126;
                }
                if (v247 >= v124 - v126) {
                  double v134 = v124 - v126;
                }
                if (v130 < 0.0) {
                  double v135 = v134;
                }
                double v247 = v135;
                if (v131 >= v133) {
                  double v136 = v131;
                }
                else {
                  double v136 = v133;
                }
                if (v131 >= v133) {
                  double v137 = v133;
                }
                else {
                  double v137 = v131;
                }
                if (v133 < 0.0) {
                  double v138 = v137;
                }
                else {
                  double v138 = v136;
                }
                [v122 frame];
                CGFloat v143 = v139;
                CGFloat v144 = v140;
                CGFloat v145 = v141;
                CGFloat v146 = v142;
                if (v130 < 0.0)
                {
                  double v149 = CGRectGetMinX(*(CGRect *)&v139);
                  double v148 = v244;
                  if (v149 < v244) {
                    double v148 = v149;
                  }
                }
                else
                {
                  double v147 = CGRectGetMaxX(*(CGRect *)&v139);
                  double v148 = v244;
                  if (v147 >= v244) {
                    double v148 = v147;
                  }
                }
                double v244 = v148;
                if (v133 < 0.0)
                {
                  v306.origin.x = v143;
                  v306.origin.y = v144;
                  v306.size.size_t width = v145;
                  v306.size.size_t height = v146;
                  double v151 = CGRectGetMinY(v306);
                  double v115 = v138;
                  if (v151 >= v129) {
                    double v114 = v129;
                  }
                  else {
                    double v114 = v151;
                  }
                }
                else
                {
                  v305.origin.x = v143;
                  v305.origin.y = v144;
                  v305.size.size_t width = v145;
                  v305.size.size_t height = v146;
                  double v150 = CGRectGetMaxY(v305);
                  double v115 = v138;
                  if (v150 >= v129) {
                    double v114 = v150;
                  }
                  else {
                    double v114 = v129;
                  }
                }
              }
              uint64_t v113 = [v240 countByEnumeratingWithState:&v264 objects:v296 count:16];
            }
            while (v113);
          }

          if (v277[4] == 1.79769313e308 && v277[5] == 1.79769313e308)
          {
            [v102 center];
            *((void *)v277 + 4) = v203;
            [v102 center];
            *((void *)v277 + 5) = v204;
          }
          else
          {
            [v102 center];
            if (v154 < v277[4]) {
              double v154 = v277[4];
            }
            v277[4] = v154;
            [v102 center];
            double v156 = v277[5];
            if (v155 >= v156) {
              double v156 = v155;
            }
            v277[5] = v156;
          }
          [v102 frame];
          double v161 = v160;
          double v162 = v157;
          double v163 = v158;
          double v164 = v159;
          double v165 = -v115;
          if (v115 >= 0.0) {
            double v165 = v115;
          }
          if (v165 <= 0.0)
          {
            if (v247 >= 0.0)
            {
              double v172 = v161;
              double v161 = CGRectGetMaxX(*(CGRect *)(&v157 - 1));
              if (v244 - v161 >= 0.0) {
                double v163 = v244 - v161;
              }
              else {
                double v163 = -(v244 - v161);
              }
              double v170 = 0.0;
              double v168 = v161;
            }
            else
            {
              double v169 = v161;
              double v168 = CGRectGetMinX(*(CGRect *)(&v157 - 1));
              if (v244 - v168 >= 0.0) {
                double v163 = v244 - v168;
              }
              else {
                double v163 = -(v244 - v168);
              }
              double v161 = v168 - v163;
              double v170 = 0.0;
            }
            double v166 = v162;
            double v167 = v164;
          }
          else
          {
            if (v115 >= 0.0)
            {
              double v171 = v161;
              double v162 = CGRectGetMaxY(*(CGRect *)(&v157 - 1));
              if (v114 - v162 >= 0.0) {
                double v164 = v114 - v162;
              }
              else {
                double v164 = -(v114 - v162);
              }
              double v167 = 0.0;
              double v168 = v161;
              double v166 = v162;
            }
            else
            {
              [v102 frame];
              double v166 = CGRectGetMinY(v307);
              if (v114 - v166 >= 0.0) {
                double v164 = v114 - v166;
              }
              else {
                double v164 = -(v114 - v166);
              }
              double v162 = v166 - v164;
              double v167 = 0.0;
              double v168 = v161;
            }
            double v170 = v163;
          }
          v263[0] = MEMORY[0x1E4F143A8];
          v263[1] = 3221225472;
          v263[2] = ___UICollectionViewSetupExpandCollapseAnimations_block_invoke_3;
          v263[3] = &unk_1E5304ED0;
          v263[4] = v232;
          v263[5] = v224;
          v263[6] = v223;
          *(double *)&v263[7] = v226;
          *(double *)&v263[8] = v225;
          *(double *)&v263[9] = v161;
          *(double *)&v263[10] = v162;
          *(double *)&v263[11] = v163;
          *(double *)&v263[12] = v164;
          *(double *)&v263[13] = v168;
          *(double *)&v263[14] = v166;
          *(double *)&v263[15] = v170;
          *(double *)&v263[16] = v167;
          *(double *)&v263[17] = v247;
          *(double *)&v263[18] = v115;
          [v245 enumerateKeysAndObjectsUsingBlock:v263];
          id v173 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
          long long v261 = 0u;
          long long v262 = 0u;
          long long v259 = 0u;
          long long v260 = 0u;
          v174 = v222;
          if (v222) {
            v174 = (id *)v222[9];
          }
          v175 = v174;
          uint64_t v176 = [v175 countByEnumeratingWithState:&v259 objects:v295 count:16];
          if (v176)
          {
            uint64_t v177 = *(void *)v260;
            do
            {
              for (uint64_t n = 0; n != v176; ++n)
              {
                if (*(void *)v260 != v177) {
                  objc_enumerationMutation(v175);
                }
                v179 = *(void **)(*((void *)&v259 + 1) + 8 * n);
                if ((unint64_t)[v179 length] >= 2 && objc_msgSend(v179, "section") == v242) {
                  [v173 addObject:v179];
                }
              }
              uint64_t v176 = [v175 countByEnumeratingWithState:&v259 objects:v295 count:16];
            }
            while (v176);
          }

          id v180 = v173;
          id v181 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
          long long v257 = 0u;
          long long v258 = 0u;
          long long v255 = 0u;
          long long v256 = 0u;
          v182 = v222;
          if (v222) {
            v182 = (id *)v222[10];
          }
          v183 = v182;
          uint64_t v184 = [v183 countByEnumeratingWithState:&v255 objects:v294 count:16];
          if (v184)
          {
            uint64_t v185 = *(void *)v256;
            do
            {
              for (iuint64_t i = 0; ii != v184; ++ii)
              {
                if (*(void *)v256 != v185) {
                  objc_enumerationMutation(v183);
                }
                v187 = *(void **)(*((void *)&v255 + 1) + 8 * ii);
                if ((unint64_t)[v187 length] >= 2 && objc_msgSend(v187, "section") == v242) {
                  [v181 addObject:v187];
                }
              }
              uint64_t v184 = [v183 countByEnumeratingWithState:&v255 objects:v294 count:16];
            }
            while (v184);
          }

          id v188 = v181;
          v189 = (void *)[v188 mutableCopy];
          [v189 minusSet:v180];
          if ([v189 count])
          {
            v190 = [v238 collectionViewLayout];
            uint64_t v191 = [v190 _layoutAxis];
            if ((unint64_t)(v191 - 1) <= 1)
            {
              v192 = [v190 _orthogonalScrollingSections];
              int v193 = [v192 containsIndex:v242];
              uint64_t v194 = v191 == 2;
              if (v191 == 1) {
                uint64_t v194 = 2;
              }
              if (v193) {
                uint64_t v195 = v194;
              }
              else {
                uint64_t v195 = v191;
              }

              double v196 = _UISizeValueForAxis(v195, v226, v225);
              double v197 = _UISetPointValueForAxis(v195, v230, v228, v196);
              uint64_t v199 = v198;
              v200 = v222;
              if (v222) {
                v200 = (id *)v222[8];
              }
              v201 = v200;
              v248[0] = MEMORY[0x1E4F143A8];
              v248[1] = 3221225472;
              v249[0] = ___UICollectionViewSetupExpandCollapseAnimations_block_invoke_5;
              v249[1] = &unk_1E5304EF8;
              id v202 = v189;
              double v252 = v197;
              uint64_t v253 = v199;
              uint64_t v254 = v195;
              id v250 = v202;
              v251 = &v276;
              [v201 enumerateKeysAndObjectsUsingBlock:v248];
            }
          }
        }
        ++v234;
      }
      while (v234 != v221);
      uint64_t v205 = [v216 countByEnumeratingWithState:&v272 objects:v298 count:16];
      uint64_t v221 = v205;
    }
    while (v205);
  }

  _Block_object_dispose(&v276, 8);
}

void sub_1865A329C(_Unwind_Exception *a1)
{
}

void sub_1865AA184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void _UIBackgroundViewConfigurationApplyProperties(void *a1, uint64_t a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v7 = a3;
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *(void **)(a2 + 16);
  if (v5)
  {
    objc_setProperty_nonatomic_copy(v5, v6, v9, 56);
    uint64_t v9 = *(void **)(a2 + 16);
  }
  if (!v9)
  {
    if (v8 == 1)
    {
      if (v5) {
        id v10 = v5[6];
      }
      else {
        id v10 = 0;
      }
      uint64_t v11 = *(void *)(a2 + 48);
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  if (*(unsigned char *)(a2 + 32) && v8 != 1) {
LABEL_11:
  }
    -[_UIBackgroundViewConfiguration _setBackgroundColor:]((uint64_t)v5, *(void **)(a2 + 8));
  if (!v5)
  {
    uint64_t v11 = *(void *)(a2 + 48);
    if (v8 != 1) {
      goto LABEL_48;
    }
    id v10 = 0;
LABEL_14:
    char v13 = 0;
    uint64_t v14 = 3;
    switch(v11)
    {
      case 0:
        goto LABEL_29;
      case 1:
      case 10:
      case 11:
        goto LABEL_26;
      case 2:
        break;
      case 3:
        char v13 = 0;
        uint64_t v14 = 6;
        break;
      case 4:
        char v13 = 0;
        uint64_t v14 = 2;
        break;
      case 5:
        char v13 = 0;
        uint64_t v14 = 4;
        break;
      case 6:
        char v13 = 0;
        uint64_t v14 = 5;
        break;
      case 7:
      case 8:
      case 9:
        char v13 = 0;
        uint64_t v14 = v11;
        break;
      case 12:
        char v13 = 0;
        uint64_t v14 = 10;
        break;
      default:
        if (v11 == 28)
        {
          char v13 = 0;
          uint64_t v14 = 11;
        }
        else
        {
LABEL_26:
          if (os_variant_has_internal_diagnostics())
          {
            long long v22 = __UIFaultDebugAssertLog();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
            {
              int v30 = 67109120;
              int v31 = v11;
              _os_log_fault_impl(&dword_1853B0000, v22, OS_LOG_TYPE_FAULT, "Found a color transformer identifier (%d) that is unsupported when using tintColor in the _UIBackgroundViewConfiguration SPI. The color transformer is being ignored, but this will produce an incorrect appearance; switch to the UIBackgroundConfiguration API to resolve this.",
                (uint8_t *)&v30,
                8u);
            }
          }
          else
          {
            uint64_t v20 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_MergedGlobals_1216) + 8);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              int v30 = 67109120;
              int v31 = v11;
              _os_log_impl(&dword_1853B0000, v20, OS_LOG_TYPE_ERROR, "Found a color transformer identifier (%d) that is unsupported when using tintColor in the _UIBackgroundViewConfiguration SPI. The color transformer is being ignored, but this will produce an incorrect appearance; switch to the UIBackgroundConfiguration API to resolve this.",
                (uint8_t *)&v30,
                8u);
            }
          }
LABEL_29:
          char v13 = 0;
          uint64_t v14 = 1;
        }
        break;
    }
LABEL_50:
    if (v5)
    {
      v5[5] = (id)v14;
      if ((v13 & 1) == 0)
      {
        id v24 = v5[6];
        v5[6] = 0;
      }
    }
    goto LABEL_53;
  }
  id v12 = v5[6];
  id v10 = v12;
  uint64_t v11 = *(void *)(a2 + 48);
  if (v8 == 1) {
    goto LABEL_14;
  }
  if (!v12)
  {
LABEL_48:
    if (v11)
    {
      if (os_variant_has_internal_diagnostics())
      {
        uint64_t v29 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
        {
          int v30 = 67109120;
          int v31 = v11;
          _os_log_fault_impl(&dword_1853B0000, v29, OS_LOG_TYPE_FAULT, "Found a color transformer identifier (%d) that is unsupported when used without tintColor and without backgroundColor in the _UIBackgroundViewConfiguration SPI. The color transformer is being ignored, but this will produce an incorrect appearance; switch to the UIBackgroundConfiguration API to resolve this.",
            (uint8_t *)&v30,
            8u);
        }
      }
      else
      {
        BOOL v27 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB262E08) + 8);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          int v30 = 67109120;
          int v31 = v11;
          _os_log_impl(&dword_1853B0000, v27, OS_LOG_TYPE_ERROR, "Found a color transformer identifier (%d) that is unsupported when used without tintColor and without backgroundColor in the _UIBackgroundViewConfiguration SPI. The color transformer is being ignored, but this will produce an incorrect appearance; switch to the UIBackgroundConfiguration API to resolve this.",
            (uint8_t *)&v30,
            8u);
        }
      }
    }
    id v10 = 0;
    uint64_t v14 = 0;
    char v13 = 1;
    goto LABEL_50;
  }
  id v15 = v12;
  uint64_t v16 = v15;
  switch(v11)
  {
    case 3:
      uint64_t v17 = [v15 colorWithAlphaComponent:0.5];
      goto LABEL_38;
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
      goto LABEL_22;
    case 7:
      uint64_t v17 = [v15 colorWithAlphaComponent:0.3];
      goto LABEL_38;
    case 8:
      uint64_t v17 = [v15 colorWithAlphaComponent:0.1];
      goto LABEL_38;
    case 12:
      uint64_t v17 = [v15 colorWithAlphaComponent:0.8];
LABEL_38:
      double v18 = (void *)v17;

      goto LABEL_39;
    default:
      double v18 = v15;
      if (!v11) {
        goto LABEL_39;
      }
LABEL_22:
      if (os_variant_has_internal_diagnostics())
      {
        long long v23 = __UIFaultDebugAssertLog();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
        {
          int v30 = 67109120;
          int v31 = v11;
          _os_log_fault_impl(&dword_1853B0000, v23, OS_LOG_TYPE_FAULT, "Found a color transformer identifier (%d) that is unsupported when using backgroundColor in the _UIBackgroundViewConfiguration SPI. The color transformer is being ignored, but this will produce an incorrect appearance; switch to the UIBackgroundConfiguration API to resolve this.",
            (uint8_t *)&v30,
            8u);
        }
      }
      else
      {
        double v19 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB262E00) + 8);
        double v18 = v16;
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
          goto LABEL_39;
        }
        int v30 = 67109120;
        int v31 = v11;
        _os_log_impl(&dword_1853B0000, v19, OS_LOG_TYPE_ERROR, "Found a color transformer identifier (%d) that is unsupported when using backgroundColor in the _UIBackgroundViewConfiguration SPI. The color transformer is being ignored, but this will produce an incorrect appearance; s"
          "witch to the UIBackgroundConfiguration API to resolve this.",
          (uint8_t *)&v30,
          8u);
      }
      double v18 = v16;
LABEL_39:
      id v21 = v18;

      id v10 = v21;
      v5[5] = 0;
      break;
  }
LABEL_53:
  -[_UIBackgroundViewConfiguration _setBackgroundColor:]((uint64_t)v5, v10);
  long long v25 = _UIShadowPropertiesFromShadowType(*(void *)(a2 + 40), v7);
  [v5 _setShadowProperties:v25];

  double v26 = *(double *)(a2 + 56);
  if (v26 <= 0.0) {
    goto LABEL_63;
  }
  if (!v5)
  {
    if (*(unsigned char *)(a2 + 72)) {
      goto LABEL_62;
    }
LABEL_61:
    -[UIBackgroundConfiguration _setImage:]((uint64_t)v5, *(void **)(a2 + 80));
    goto LABEL_62;
  }
  *((double *)v5 + 10) = v26;
  v5[11] = *(id *)(a2 + 64);
  if (!*(unsigned char *)(a2 + 72)) {
    goto LABEL_61;
  }
  v5[8] = (id)1;
LABEL_62:
  [v5 _setStrokeLocation:*(void *)(a2 + 88)];
LABEL_63:
  [v5 _setCornerRadius:*(double *)(a2 + 96)];
  if (v5)
  {
    long long v28 = *(_OWORD *)(a2 + 120);
    *((_OWORD *)v5 + 9) = *(_OWORD *)(a2 + 104);
    *((_OWORD *)v5 + 10) = v28;
  }

  __destructor_8_s8_s16_s24_s80(a2);
}

void sub_1865AA744(_Unwind_Exception *a1)
{
  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

void sub_1865AA948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1865AAAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1865AAEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1865AB0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

__CFString *_stringForColorMode(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 0xB)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Unknown color mode: %ld", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E5304FD0[a1 - 1];
  }
  return v1;
}

void setDefaultLockAnimationParameters(void *a1)
{
  id v1 = a1;
  [v1 setMass:2.0];
  [v1 setStiffness:300.0];
  [v1 setDamping:400.0];
  [v1 setDuration:0.91];
  id v2 = objc_alloc(MEMORY[0x1E4F39C10]);
  LODWORD(v3) = 1046809695;
  LODWORD(v4) = 990250344;
  LODWORD(v5) = 1057860847;
  LODWORD(v6) = 1064564184;
  id v7 = (id)[v2 initWithControlPoints:v3 :v4 :v5 :v6];
  [v1 setTimingFunction:v7];
}

double centerOfRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MinX = CGRectGetMinX(*(CGRect *)&a1);
  v11.origin.x = a1;
  v11.origin.y = a2;
  v11.size.size_t width = a3;
  v11.size.size_t height = a4;
  double v9 = MinX + CGRectGetWidth(v11) * 0.5;
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.size_t width = a3;
  v12.size.size_t height = a4;
  CGRectGetMinY(v12);
  v13.origin.x = a1;
  v13.origin.y = a2;
  v13.size.size_t width = a3;
  v13.size.size_t height = a4;
  CGRectGetHeight(v13);
  return v9;
}

void sub_1865AF458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v10 - 208));
  _Unwind_Resume(a1);
}

void sub_1865B1F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1865B4884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1865B9658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1865B99E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1865C15DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1865C6DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

BOOL UIPDFQuadrilateralIsNull(double *a1)
{
  double v2 = *MEMORY[0x1E4F1DAD8];
  double v1 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  if (*a1 != *MEMORY[0x1E4F1DAD8] || a1[1] != v1) {
    return 0;
  }
  if (a1[2] != v2 || a1[3] != v1) {
    return 0;
  }
  if (a1[6] != v2 || a1[7] != v1) {
    return 0;
  }
  if (a1[5] == v1) {
    return a1[4] == v2;
  }
  return 0;
}

void CPRotationDegreesFromTransform(double *a1)
{
  double v1 = *a1;
  double v2 = a1[1];
  double v3 = a1[2];
  double v4 = a1[3];
  if (v2 != 0.0)
  {
LABEL_11:
    double v6 = fabs(v1);
    double v7 = fabs(v2);
    if (v6 >= v7) {
      double v8 = v2;
    }
    else {
      double v8 = v1;
    }
    if (v6 >= v7) {
      double v9 = v1;
    }
    else {
      double v9 = v2;
    }
    atan(v8 / v9);
    return;
  }
  if (v1 <= 0.0 || *a1 * v4 < v2 * v3)
  {
    if (v1 == 0.0)
    {
      if (v3 == 0.0 && v4 == 0.0) {
        return;
      }
      double v2 = -v3;
      double v1 = a1[3];
    }
    goto LABEL_11;
  }
}

double CGPDFPageGetBoxRectWithRotation(CGPDFPage *a1, CGPDFBox a2)
{
  *(void *)&double v3 = (unint64_t)CGPDFPageGetBoxRect(a1, a2);
  CGPDFPageGetRotationAngle(a1);
  return v3;
}

void CPSetCGPathPoints4(CGPath *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  CGPathMoveToPoint(a1, 0, a2, a3);
  CGPathAddLineToPoint(a1, 0, a4, a5);
  CGPathAddLineToPoint(a1, 0, a6, a7);
  CGPathAddLineToPoint(a1, 0, a8, a9);
}

double boundsForRotatedSelection(float64x2_t *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double MidX = CGRectGetMidX(*(CGRect *)&a2);
  v18.origin.x = a2;
  v18.origin.y = a3;
  v18.size.size_t width = a4;
  v18.size.size_t height = a5;
  double MidY = CGRectGetMidY(v18);
  __asm { FMOV            V1.2D, #-10.0 }
  *(void *)&double result = *(_OWORD *)&vaddq_f64(vaddq_f64(a1[2], vaddq_f64(vmulq_n_f64(*a1, MidX), vmulq_n_f64(a1[1], MidY))), _Q1);
  return result;
}

uint64_t sortByYAscendingThenX(void *a1, void *a2)
{
  double v3 = (void *)[a1 parent];
  double v4 = (void *)[a2 parent];
  double v5 = (void *)[v3 selection];
  double v6 = (void *)[v4 selection];
  uint64_t v7 = [v5 numberOfRectangles];
  uint64_t v8 = [v6 numberOfRectangles];
  uint64_t result = 0;
  if (v7 && v8)
  {
    memset(&v24, 0, sizeof(v24));
    memset(&v23, 0, sizeof(v23));
    memset(&v22, 0, sizeof(v22));
    memset(&v21, 0, sizeof(v21));
    [v5 getBounds:&v24 transform:&v22 index:0];
    [v6 getBounds:&v23 transform:&v21 index:0];
    CGAffineTransform v20 = v22;
    if (!CGAffineTransformIsIdentity(&v20))
    {
      CGAffineTransform v20 = v22;
      v24.origin.x = boundsForRotatedSelection((float64x2_t *)&v20, v24.origin.x, v24.origin.y, v24.size.width, v24.size.height);
      v24.origin.y = v10;
      v24.size.size_t width = v11;
      v24.size.size_t height = v12;
    }
    CGAffineTransform v20 = v21;
    if (!CGAffineTransformIsIdentity(&v20))
    {
      CGAffineTransform v20 = v21;
      v23.origin.x = boundsForRotatedSelection((float64x2_t *)&v20, v23.origin.x, v23.origin.y, v23.size.width, v23.size.height);
      v23.origin.y = v13;
      v23.size.size_t width = v14;
      v23.size.size_t height = v15;
    }
    double MaxY = CGRectGetMaxY(v24);
    double v17 = CGRectGetMaxY(v23);
    double MinX = CGRectGetMinX(v24);
    double v19 = CGRectGetMinX(v23);
    if (MaxY >= v17)
    {
      uint64_t result = -1;
      if (MaxY <= v17 && MinX >= v19) {
        return MinX > v19;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL CPIsRetina(_DWORD *a1)
{
  double v2 = +[UIScreen mainScreen];
  BOOL result = 0;
  if (objc_opt_respondsToSelector())
  {
    [(UIScreen *)v2 scale];
    *(float *)&double v3 = v3;
    *a1 = LODWORD(v3);
    if (*(float *)&v3 > 1.0) {
      return 1;
    }
  }
  return result;
}

void *makeGrabber(int a1, double a2, double a3, double a4, double a5, float a6)
{
  CGFloat v12 = (void *)[MEMORY[0x1E4F39BE8] layer];
  objc_msgSend(v12, "setBounds:", a2, a3, a4, a5);
  [v12 setContentsGravity:*MEMORY[0x1E4F3A3C0]];
  if (a1) {
    [v12 setContentsScale:a6];
  }
  [v12 setOpacity:0.0];
  return v12;
}

void CPCGInsetFillEllipseInRect(CGContext *a1, CGColor *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGContextSaveGState(a1);
  v17.origin.CGFloat x = a3;
  v17.origin.CGFloat y = a4;
  v17.size.CGFloat width = a5;
  v17.size.CGFloat height = a6;
  CGRect v18 = CGRectInset(v17, 2.0, 2.0);
  CGFloat x = v18.origin.x;
  CGFloat y = v18.origin.y;
  CGFloat width = v18.size.width;
  CGFloat height = v18.size.height;
  CGContextSetFillColorWithColor(a1, a2);
  v19.origin.CGFloat x = x;
  v19.origin.CGFloat y = y;
  v19.size.CGFloat width = width;
  v19.size.CGFloat height = height;
  CGContextFillEllipseInRect(a1, v19);
  CGContextRestoreGState(a1);
}

uint64_t renderContentCallback(void *a1)
{
  return [a1 isCancelled] ^ 1;
}

CGFloat CGPDFComputeTransform(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v51.origin.CGFloat x = a7;
  v51.origin.CGFloat y = a8;
  v51.size.CGFloat width = a9;
  v51.size.CGFloat height = a10;
  txCATransform3D a = CGRectGetMinX(v51);
  CGFloat v44 = a7;
  v52.origin.CGFloat x = a7;
  v52.origin.CGFloat y = a8;
  v52.size.CGFloat width = a9;
  v52.size.CGFloat height = a10;
  CGFloat MinY = CGRectGetMinY(v52);
  CGAffineTransformMakeTranslation((CGAffineTransform *)a1, txa, MinY);
  v53.origin.CGFloat x = a3;
  v53.origin.CGFloat y = a4;
  v53.size.CGFloat width = a5;
  v53.size.CGFloat height = a6;
  CGFloat Width = CGRectGetWidth(v53);
  CGFloat v45 = a4;
  v54.origin.CGFloat x = a3;
  v54.origin.CGFloat y = a4;
  double v22 = Width;
  CGFloat v46 = a5;
  tCGFloat x = a6;
  v54.size.CGFloat width = a5;
  v54.size.CGFloat height = a6;
  double Height = CGRectGetHeight(v54);
  double v24 = 1.0;
  double v25 = 1.0;
  if (v22 > 0.0)
  {
    v55.origin.CGFloat x = v44;
    v55.origin.CGFloat y = a8;
    v55.size.CGFloat width = a9;
    v55.size.CGFloat height = a10;
    double v25 = CGRectGetWidth(v55) / v22;
  }
  if (Height > 0.0)
  {
    v56.origin.CGFloat x = v44;
    v56.origin.CGFloat y = a8;
    v56.size.CGFloat width = a9;
    v56.size.CGFloat height = a10;
    double v24 = CGRectGetHeight(v56) / Height;
  }
  long long v26 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v49.CATransform3D a = *(_OWORD *)a1;
  *(_OWORD *)&v49.c = v26;
  *(_OWORD *)&v49.tCGFloat x = *(_OWORD *)(a1 + 32);
  CGAffineTransformScale(&v50, &v49, v25, v24);
  long long v27 = *(_OWORD *)&v50.c;
  *(_OWORD *)a1 = *(_OWORD *)&v50.a;
  *(_OWORD *)(a1 + 16) = v27;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v50.tx;
  switch(a2)
  {
    case 270:
      long long v32 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v49.CATransform3D a = *(_OWORD *)a1;
      *(_OWORD *)&v49.c = v32;
      *(_OWORD *)&v49.tCGFloat x = *(_OWORD *)(a1 + 32);
      CGAffineTransformTranslate(&v50, &v49, v22, 0.0);
      long long v33 = *(_OWORD *)&v50.c;
      *(_OWORD *)a1 = *(_OWORD *)&v50.a;
      *(_OWORD *)(a1 + 16) = v33;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)&v50.tx;
      long long v34 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v49.CATransform3D a = *(_OWORD *)a1;
      *(_OWORD *)&v49.c = v34;
      *(_OWORD *)&v49.tCGFloat x = *(_OWORD *)(a1 + 32);
      CGFloat v31 = 1.57079633;
      goto LABEL_11;
    case 180:
      long long v35 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v49.CATransform3D a = *(_OWORD *)a1;
      *(_OWORD *)&v49.c = v35;
      *(_OWORD *)&v49.tCGFloat x = *(_OWORD *)(a1 + 32);
      CGAffineTransformTranslate(&v50, &v49, v22, Height);
      long long v36 = *(_OWORD *)&v50.c;
      *(_OWORD *)a1 = *(_OWORD *)&v50.a;
      *(_OWORD *)(a1 + 16) = v36;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)&v50.tx;
      long long v37 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v49.CATransform3D a = *(_OWORD *)a1;
      *(_OWORD *)&v49.c = v37;
      *(_OWORD *)&v49.tCGFloat x = *(_OWORD *)(a1 + 32);
      CGFloat v31 = 3.14159265;
      goto LABEL_11;
    case 90:
      long long v28 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v49.CATransform3D a = *(_OWORD *)a1;
      *(_OWORD *)&v49.c = v28;
      *(_OWORD *)&v49.tCGFloat x = *(_OWORD *)(a1 + 32);
      CGAffineTransformTranslate(&v50, &v49, 0.0, Height);
      long long v29 = *(_OWORD *)&v50.c;
      *(_OWORD *)a1 = *(_OWORD *)&v50.a;
      *(_OWORD *)(a1 + 16) = v29;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)&v50.tx;
      long long v30 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)&v49.CATransform3D a = *(_OWORD *)a1;
      *(_OWORD *)&v49.c = v30;
      *(_OWORD *)&v49.tCGFloat x = *(_OWORD *)(a1 + 32);
      CGFloat v31 = -1.57079633;
LABEL_11:
      CGAffineTransformRotate(&v50, &v49, v31);
      long long v38 = *(_OWORD *)&v50.c;
      *(_OWORD *)a1 = *(_OWORD *)&v50.a;
      *(_OWORD *)(a1 + 16) = v38;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)&v50.tx;
      break;
  }
  v57.origin.CGFloat x = a3;
  v57.origin.CGFloat y = v45;
  v57.size.CGFloat width = v46;
  v57.size.CGFloat height = tx;
  CGFloat v39 = -CGRectGetMinX(v57);
  v58.origin.CGFloat x = a3;
  v58.origin.CGFloat y = v45;
  v58.size.CGFloat width = v46;
  v58.size.CGFloat height = tx;
  CGFloat v40 = CGRectGetMinY(v58);
  long long v41 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v49.CATransform3D a = *(_OWORD *)a1;
  *(_OWORD *)&v49.c = v41;
  *(_OWORD *)&v49.tCGFloat x = *(_OWORD *)(a1 + 32);
  CGAffineTransformTranslate(&v50, &v49, v39, -v40);
  long long v42 = *(_OWORD *)&v50.c;
  *(_OWORD *)a1 = *(_OWORD *)&v50.a;
  *(_OWORD *)(a1 + 16) = v42;
  CGFloat result = v50.tx;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v50.tx;
  return result;
}

void sub_1865E1A2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t UIActivityIndicatorViewStyleForBackingColor(void *a1)
{
  if (!a1) {
    return 2;
  }
  double v4 = 0.0;
  double v2 = 0.0;
  double v3 = 0.0;
  [a1 getRed:&v4 green:&v3 blue:&v2 alpha:0];
  if (v4 * 0.212599993 + v3 * 0.715200007 + v2 * 0.0722000003 < 0.5) {
    return 1;
  }
  else {
    return 2;
  }
}

size_t indexOfDictionary(CGPDFDictionary *a1, void *a2, CGPDFDictionary *a3)
{
  CGPDFArrayRef value = 0;
  ArraCGFloat y = CGPDFDictionaryGetArray(a1, "Kids", &value);
  size_t result = 0;
  if (Array)
  {
    size_t result = CGPDFArrayGetCount(value);
    if (result)
    {
      size_t v7 = result;
      size_t v8 = 0;
      while (1)
      {
        CGPDFDictionaryRef dict = 0;
        if (!CGPDFArrayGetDictionary(value, v8, &dict)) {
          return 0;
        }
        if (dict == a3) {
          break;
        }
        __s1 = 0;
        if (CGPDFDictionaryGetName(dict, "Type", (const char **)&__s1))
        {
          double v9 = __s1;
          if (!strcmp(__s1, "Page"))
          {
            ++*a2;
          }
          else if (!strcmp(v9, "Pages"))
          {
            size_t result = indexOfDictionary(dict, a2, a3);
            if (result) {
              return result;
            }
          }
          if (v7 != ++v8) {
            continue;
          }
        }
        return 0;
      }
      return *a2 + 1;
    }
  }
  return result;
}

void sub_1865E7F9C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1865E81D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getCARSessionStatusClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB262EA8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __CarKitLibraryCore_block_invoke_0;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E53056A0;
    uint64_t v8 = 0;
    qword_1EB262EA8 = _sl_dlopen();
  }
  if (!qword_1EB262EA8)
  {
    double v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v4 = [NSString stringWithUTF8String:"void *CarKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UICarPlaySession.m", 16, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CARSessionStatus");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    double v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"Class getCARSessionStatusClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UICarPlaySession.m", 17, @"Unable to find class %s", "CARSessionStatus");

LABEL_10:
    __break(1u);
  }
  qword_1EB262EA0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CarKitLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB262EA8 = result;
  return result;
}

void sub_1865EA538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1865EE970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void _UIDebugShowLayoutItem(void *a1, void *a2)
{
  void v30[4] = *MEMORY[0x1E4F143B8];
  double v3 = a1;
  id v4 = a2;
  uint64_t v5 = [(UIView *)v3 _ui_view];
  double v6 = v3;
  if ((UIView *)v5 == v3
    || (long long v7 = (void *)v5,
        objc_getAssociatedObject(v3, &_UIDebugView),
        double v6 = (UIView *)objc_claimAutoreleasedReturnValue(),
        v7,
        v6))
  {
    if (v4)
    {
LABEL_4:
      [v4 alphaComponent];
      uint64_t v9 = [v4 colorWithAlphaComponent:v8 * 0.25];
      [(UIView *)v6 setBackgroundColor:v9];

      [(UIView *)v6 _currentScreenScale];
      double v11 = 1.0 / v10;
      CGFloat v12 = [(UIView *)v6 layer];
      [v12 setBorderWidth:v11];

      uint64_t v13 = [v4 CGColor];
      CGFloat v14 = [(UIView *)v6 layer];
      [v14 setBorderColor:v13];

      goto LABEL_9;
    }
  }
  else
  {
    double v6 = objc_alloc_init(UIView);
    [(UIView *)v6 setTranslatesAutoresizingMaskIntoConstraints:0];
    [(UIView *)v6 setUserInteractionEnabled:0];
    objc_setAssociatedObject(v3, &_UIDebugView, v6, 0);
    long long v29 = [(UIView *)v6 topAnchor];
    long long v28 = [(UIView *)v3 topAnchor];
    long long v27 = [v29 constraintEqualToAnchor:v28];
    v30[0] = v27;
    long long v26 = [(UIView *)v6 leftAnchor];
    double v25 = [(UIView *)v3 leftAnchor];
    double v24 = [v26 constraintEqualToAnchor:v25];
    v30[1] = v24;
    CGFloat v15 = [(UIView *)v6 rightAnchor];
    uint64_t v16 = [(UIView *)v3 rightAnchor];
    CGRect v17 = [v15 constraintEqualToAnchor:v16];
    v30[2] = v17;
    CGRect v18 = [(UIView *)v6 bottomAnchor];
    CGRect v19 = [(UIView *)v3 bottomAnchor];
    CGAffineTransform v20 = [v18 constraintEqualToAnchor:v19];
    v30[3] = v20;
    CGAffineTransform v21 = [MEMORY[0x1E4F1C978] arrayWithObjects:v30 count:4];

    double v22 = [(UIView *)v3 _ui_superview];
    [v22 addSubview:v6];

    [MEMORY[0x1E4F5B268] activateConstraints:v21];
    if (v4) {
      goto LABEL_4;
    }
  }
  if (v6 == v3)
  {
    [(UIView *)v3 setBackgroundColor:0];
    CGRect v23 = [(UIView *)v3 layer];
    [v23 setBorderColor:0];
  }
  else
  {
    [(UIView *)v6 removeFromSuperview];
    objc_setAssociatedObject(v3, &_UIDebugView, 0, 0);
  }
LABEL_9:
}

BOOL _UIGetSecondarySIMUnderBaseline()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_SecondarySIMUnderBaseline,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_SecondarySIMUnderBaseline))
  {
    BOOL v1 = 0;
  }
  else
  {
    do
    {
      BOOL v1 = v0 < v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_SecondarySIMUnderBaseline, @"SecondarySIMUnderBaseline", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_SecondarySIMUnderBaseline;
    }
    while (v0 != _UIInternalPreference_SecondarySIMUnderBaseline);
  }
  return byte_1E8FD5454 && v1;
}

id UIStatusBarCreateHUDDualSignalView(void *a1, void *a2, double a3, double a4)
{
  id v7 = a2;
  id v8 = a1;
  [v8 size];
  double v10 = v9;
  [v7 size];
  if (v10 >= v11) {
    double v11 = v10;
  }
  CGFloat v12 = v11 * 3.0;
  [v8 size];
  double v14 = v13;
  [v7 size];
  _UIGraphicsBeginImageContextWithOptions(0, 0, v12, (v14 + v15 + 3.0) * 3.0, a4);
  [v8 size];
  CGFloat v17 = (v12 - v16 * 3.0) * 0.5;
  [v8 size];
  double v19 = v18 * 3.0;
  [v8 size];
  objc_msgSend(v8, "drawInRect:blendMode:alpha:", 0, v17, 0.0, v19, v20 * 3.0, a3);
  [v7 size];
  CGFloat v22 = (v12 - v21 * 3.0) * 0.5;
  [v8 size];
  double v24 = v23;

  [v7 size];
  double v26 = v25 * 3.0;
  [v7 size];
  objc_msgSend(v7, "drawInRect:blendMode:alpha:", 0, v22, (v24 + 3.0) * 3.0, v26, v27 * 3.0, 1.0);

  long long v28 = _UIGraphicsGetImageFromCurrentImageContext(0);
  UIGraphicsEndImageContext();
  return v28;
}

void _UIViewSetAnchorPointToTouchPoint(void *a1, double a2, double a3)
{
  id v5 = a1;
  double v6 = [v5 layer];
  [v6 size];
  double v8 = v7;
  double v10 = v9;

  if (v8 != 0.0 || v10 != 0.0)
  {
    double v11 = [v5 layer];
    objc_msgSend(v11, "convertPoint:fromLayer:", 0, a2, a3);
    double v13 = v12;
    double v15 = v14;

    id v16 = v5;
    [v16 bounds];
    double v53 = v13 / v8;
    double v18 = v13 / v8 * v17;
    [v16 bounds];
    double v52 = v15 / v10;
    double v20 = v15 / v10 * v19;
    [v16 bounds];
    double v22 = v21;
    double v23 = [v16 layer];
    [v23 anchorPoint];
    double v25 = v24;
    [v16 bounds];
    double v27 = v26;
    long long v28 = [v16 layer];
    [v28 anchorPoint];
    double v30 = v29;

    if (v16)
    {
      [v16 transform];
      double v31 = v66;
      double v32 = v68;
      double v55 = v67;
      double v56 = v69;
      double v33 = v70;
      double v57 = v71;
    }
    else
    {
      double v33 = 0.0;
      double v56 = 0.0;
      double v57 = 0.0;
      double v55 = 0.0;
      double v32 = 0.0;
      double v31 = 0.0;
    }
    double v34 = v22 * v25;
    double v35 = v27 * v30;
    double v58 = v20;
    double v59 = v18;
    double v36 = v33 + v20 * v32 + v18 * v31;
    if (v16)
    {
      [v16 transform];
      double v38 = v61;
      double v37 = v60;
      double v40 = v63;
      double v39 = v62;
      double v41 = v64;
      double v54 = v65;
    }
    else
    {
      double v41 = 0.0;
      double v54 = 0.0;
      double v40 = 0.0;
      double v38 = 0.0;
      double v39 = 0.0;
      double v37 = 0.0;
    }
    double v42 = v41 + v35 * v39 + v34 * v37;
    CGAffineTransform v43 = [v16 layer];
    [v43 position];
    double v45 = v44;
    double v47 = v46;

    double v48 = v36 + v45 - v42;
    if (fabs(v48) != INFINITY)
    {
      double v49 = v57 + v58 * v56 + v59 * v55 + v47 - (v54 + v35 * v40 + v34 * v38);
      if (fabs(v49) != INFINITY && fabs(v53) != INFINITY && fabs(v52) != INFINITY)
      {
        CGAffineTransform v50 = [v16 layer];
        objc_msgSend(v50, "setPosition:", v48, v49);

        CGRect v51 = [v16 layer];
        objc_msgSend(v51, "setAnchorPoint:", v53, v52);
      }
    }
  }
}

void sub_186602DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1866061E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186609A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  objc_destroyWeak(v16);
  objc_destroyWeak((id *)(v17 - 88));
  _Unwind_Resume(a1);
}

void sub_18660B4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18660BB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
}

id _UIStatusBarGetVisualProviderClassForScreen(void *a1, void *a2)
{
  v38[1] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  int v5 = [v3 _isEmbeddedScreen];
  int v6 = v5;
  if (v5)
  {
    id v7 = (id)_MergedGlobals_1225;
    if (_MergedGlobals_1225) {
      goto LABEL_17;
    }
  }
  if (!v5)
  {
LABEL_11:
    id v12 = v3;
    id v13 = v4;
    uint64_t v28 = 0;
    double v29 = &v28;
    uint64_t v30 = 0x2050000000;
    uint64_t v31 = 0;
    v38[0] = objc_opt_class();
    double v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v38 count:1];
    *(void *)&long long buf = MEMORY[0x1E4F143A8];
    *((void *)&buf + 1) = 3221225472;
    double v33 = ___UIStatusBarGetNativeVisualProviderClassForScreenWithVisualProviderInfo_block_invoke;
    double v34 = &unk_1E5305B90;
    double v37 = &v28;
    id v15 = v12;
    id v35 = v15;
    id v16 = v13;
    id v36 = v16;
    [v14 enumerateObjectsUsingBlock:&buf];
    id v17 = (id)v29[3];

    _Block_object_dispose(&v28, 8);
    id v7 = v17;
    if (!v7)
    {
      [v15 _unjailedReferenceBounds];
      CGFloat Width = CGRectGetWidth(v40);
      [v15 _nativeScale];
      uint64_t v20 = v19;
      double v21 = [v15 traitCollection];
      uint64_t v22 = [v21 userInterfaceIdiom];

      [v15 _displayCornerRadius];
      double v24 = [NSString stringWithFormat:@"No status bar visual provider for screen %@ (width: %.2f, scale: %.2f, idiom: %ld, cornerRadius: %.2f). Please see rdar://45025538.", v15, *(void *)&Width, v20, v22, v23];
      double v25 = *(NSObject **)(__UILogGetCategoryCachedImpl("StatusBar", &qword_1EB262F20) + 8);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v24;
        _os_log_impl(&dword_1853B0000, v25, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
      }
      id v7 = (id)objc_opt_class();
    }
    if (!v6) {
      goto LABEL_17;
    }
LABEL_16:
    _MergedGlobals_1225 = (uint64_t)v7;
    goto LABEL_17;
  }
  double v8 = _UIKitUserDefaults();
  double v9 = [v8 objectForKey:@"UIStatusBarVisualProviderClassName"];

  if (!v9
    || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
    || (Class v10 = NSClassFromString((NSString *)v9)) == 0)
  {
LABEL_10:

    goto LABEL_11;
  }
  id v7 = v10;
  Superclass = v10;
  while (!class_conformsToProtocol(Superclass, (Protocol *)&unk_1ED6157C0))
  {
    Superclass = class_getSuperclass(Superclass);
    if (!Superclass) {
      goto LABEL_10;
    }
  }
  NSLog(&cfstr_WarningUsingOv.isa, v7);

  if (v6) {
    goto LABEL_16;
  }
LABEL_17:
  id v26 = v7;

  return v26;
}

void sub_18660DEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIStatusBarGetVisualProviderSubclassForScreenWithVisualProviderInfo(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (Class Superclass = class_getSuperclass((Class)a1)) != 0
    && (double v8 = Superclass,
        ClassMethod = class_getClassMethod((Class)a1, sel_visualProviderSubclassForScreen_visualProviderInfo_),
        ClassMethod == class_getClassMethod(v8, sel_visualProviderSubclassForScreen_visualProviderInfo_)))
  {
    id v10 = a1;
  }
  else
  {
    id v10 = [a1 visualProviderSubclassForScreen:v5 visualProviderInfo:v6];
  }
  double v11 = v10;

  return v11;
}

void _UIStatusBarAddDefaultAnimationReposition(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v33 = a2;
  id v35 = a3;
  id v34 = a4;
  double v32 = [MEMORY[0x1E4F1CA80] set];
  double v8 = [v7 statusBar];
  double v9 = [v8 stateForDisplayItemWithIdentifier:v35];
  id v10 = [v9 potentialPlacementRegionIdentifiers];

  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id obj = v10;
  uint64_t v36 = [obj countByEnumeratingWithState:&v42 objects:v60 count:16];
  if (v36)
  {
    uint64_t v31 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v36; ++i)
      {
        if (*(void *)v43 != v31) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void *)(*((void *)&v42 + 1) + 8 * i);
        id v13 = [v7 statusBar];
        double v14 = [v13 regions];
        id v15 = [v14 objectForKeyedSubscript:v12];

        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = ___UIStatusBarDefaultRepositionAnimation_block_invoke;
        aBlock[3] = &__block_descriptor_48_e24_v24__0___v___8___v__B_16l;
        long long v47 = xmmword_186B9CED0;
        id v16 = v34;
        id v17 = v15;
        double v18 = _Block_copy(aBlock);
        id v19 = v17;
        id v20 = v18;
        id v21 = v16;
        v57[0] = 0;
        v57[1] = v57;
        v57[2] = 0x3032000000;
        v57[3] = __Block_byref_object_copy__179;
        v57[4] = __Block_byref_object_dispose__179;
        id v58 = 0;
        v53[0] = MEMORY[0x1E4F143A8];
        v53[1] = 3221225472;
        v53[2] = ___UIStatusBarInternalRepositionAnimation_block_invoke;
        v53[3] = &unk_1E5305C08;
        id v22 = v21;
        id v54 = v22;
        double v56 = v57;
        id v23 = v20;
        id v55 = v23;
        double v24 = +[_UIStatusBarAnimation animationWithBlock:v53];
        v48[0] = MEMORY[0x1E4F143A8];
        v48[1] = 3221225472;
        v48[2] = ___UIStatusBarInternalRepositionAnimation_block_invoke_5;
        v48[3] = &unk_1E5305C30;
        id v25 = v19;
        id v49 = v25;
        id v50 = 0;
        CGRect v51 = v57;
        char v52 = 0;
        [v24 setPrepareBlock:v48];

        _Block_object_dispose(v57, 8);
        [v24 setIdentifier:@"defaultAnimationReposition"];
        [v24 setPriority:-200];
        id v26 = [v7 statusBar];
        uint64_t v59 = v12;
        double v27 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v59 count:1];
        uint64_t v28 = [v26 displayItemIdentifiersInRegionsWithIdentifiers:v27];
        v37[0] = MEMORY[0x1E4F143A8];
        v37[1] = 3221225472;
        v37[2] = ___UIStatusBarAddDefaultAnimationReposition_block_invoke;
        v37[3] = &unk_1E5305BB8;
        id v38 = v35;
        id v39 = v32;
        id v40 = v33;
        id v41 = v24;
        id v29 = v24;
        [v28 enumerateObjectsUsingBlock:v37];
      }
      uint64_t v36 = [obj countByEnumeratingWithState:&v42 objects:v60 count:16];
    }
    while (v36);
  }
}

void sub_18660E508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

id _UIStatusBarDefaultAnimation(void *a1, void *a2, long long *a3, double a4, double a5, double a6)
{
  id v11 = a1;
  id v12 = a2;
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x3032000000;
  v30[3] = __Block_byref_object_copy__179;
  void v30[4] = __Block_byref_object_dispose__179;
  id v31 = 0;
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x4010000000;
  v27[3] = &unk_186D7DBA7;
  long long v13 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  long long v28 = *MEMORY[0x1E4F1DB28];
  long long v29 = v13;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = ___UIStatusBarDefaultAnimation_block_invoke;
  v20[3] = &unk_1E5305BE0;
  void v20[4] = v30;
  v20[5] = v27;
  long long v14 = *a3;
  long long v15 = a3[1];
  long long v23 = a3[2];
  long long v22 = v15;
  long long v21 = v14;
  double v24 = a4;
  double v25 = a5;
  double v26 = a6;
  id v16 = +[_UIStatusBarAnimation animationWithBlock:v20];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  void v19[2] = ___UIStatusBarDefaultAnimation_block_invoke_3;
  v19[3] = &unk_1E5301EC8;
  v19[4] = v27;
  [v16 setPrepareBlock:v19];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = ___UIStatusBarDefaultAnimation_block_invoke_4;
  v18[3] = &unk_1E5301EF0;
  v18[4] = v30;
  _UIStatusBarAddDefaultAnimationReposition(v11, v16, v12, v18);
  [v16 setDelaysAnimatingItems:1];
  [v16 setPriority:-100];
  _Block_object_dispose(v27, 8);
  _Block_object_dispose(v30, 8);

  return v16;
}

void sub_18660E7E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

id _UIStatusBarDefaultScaleAnimation(void *a1, void *a2, CGFloat a3)
{
  id v5 = a2;
  id v6 = a1;
  CGAffineTransformMakeScale(&v9, a3, a3);
  id v7 = _UIStatusBarDefaultAnimation(v6, v5, (long long *)&v9, 0.15, 0.1, 0.0);

  return v7;
}

uint64_t stateMachineSpec_block_invoke_4_6(uint64_t a1, void *a2)
{
  return [a2 didTransitionToInflightState];
}

uint64_t stateMachineSpec_block_invoke_5_5(uint64_t a1, void *a2)
{
  return [a2 didTransitionToBeginState];
}

uint64_t stateMachineSpec_block_invoke_6_3(uint64_t a1, void *a2)
{
  return [a2 didTransitionToCancelState];
}

uint64_t *_UIDragInteractionDriverStateMachineHandleEvent(uint64_t *result, uint64_t a2, uint64_t a3)
{
  id v3 = result;
  *(void *)&long long v11 = *MEMORY[0x1E4F143B8];
  id v4 = (uint64_t *)result[1];
  if (v4)
  {
    result[1] = (uint64_t)(v4 + 1);
    *id v4 = a3;
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    result[1] = (uint64_t)v10;
    uint64_t result = (uint64_t *)handleEvent(stateMachineSpec_5, *result, a3, a2, result);
    for (uint64_t i = (long long *)v3[1]; v10 != i; uint64_t i = (long long *)v3[1])
    {
      if (i > &v11)
      {
        CGAffineTransform v9 = [MEMORY[0x1E4F28B00] currentHandler];
        double v8 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIDragInteractionDriverStateMachineHandleEvent(_UIDragInteractionDriverStateMachine *const _Nonnull, _UIDragInteractionDriver *const __strong _Nonnull, _UIDragLiftEvent)");
        [v9 handleFailureInFunction:v8 file:@"_UIDragInteractionDriverStateMachine.m" lineNumber:128 description:@"Events queue shouldn't overflow"];

        uint64_t i = (long long *)v3[1];
      }
      uint64_t v7 = *(void *)&v10[0];
      v3[1] = (uint64_t)i - 8;
      __memmove_chk();
      uint64_t result = (uint64_t *)handleEvent(stateMachineSpec_5, *v3, v7, a2, v3);
    }
    v3[1] = 0;
  }
  return result;
}

void _UIIntelligencePrewarmCollection()
{
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000;
  char v18 = 0;
  uint64_t v11 = 0;
  id v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 0;
  uint64_t v7 = 0;
  double v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = ___UIIntelligencePrewarmCollection_block_invoke;
  v6[3] = &unk_1E5306258;
  void v6[4] = &v15;
  void v6[5] = &v11;
  v6[6] = &v7;
  +[UIScreen _enumerateScreensWithBlock:v6];
  char v0 = *((unsigned char *)v8 + 24);
  if (*((unsigned char *)v16 + 24))
  {
    BOOL v1 = *((unsigned char *)v12 + 24) == 0;
    if (*((unsigned char *)v8 + 24)) {
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v1 = 0;
    if (*((unsigned char *)v8 + 24))
    {
LABEL_6:
      double v2 = dispatch_get_global_queue(25, 0);
      v3[0] = MEMORY[0x1E4F143A8];
      v3[1] = 3221225472;
      v3[2] = ___UIIntelligencePrewarmCollection_block_invoke_2;
      v3[3] = &__block_descriptor_34_e5_v8__0l;
      char v4 = v0;
      BOOL v5 = v1;
      dispatch_async(v2, v3);

      goto LABEL_7;
    }
  }
  if (v1) {
    goto LABEL_6;
  }
LABEL_7:
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
}

void sub_186610354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t _UIIntelligenceSceneShouldBeInactive(void *a1)
{
  BOOL v1 = [a1 _screen];
  if ([v1 _isEmbeddedScreen])
  {
    double v2 = [MEMORY[0x1E4F4F4D0] sharedBacklight];
    unint64_t v3 = [v2 backlightState];

    if (v3 < 2) {
      goto LABEL_7;
    }
  }
  if ([v1 _userInterfaceIdiom]) {
    goto LABEL_4;
  }
  +[_UICarPlaySession sharedInstance]();
  BOOL v5 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue();
  id v6 = -[_UICarPlaySession currentSession](v5);

  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v7 = [v6 limitUserInterfaces];
  char v8 = [v7 BOOLValue];

  if (v8) {
LABEL_7:
  }
    uint64_t v4 = 1;
  else {
LABEL_4:
  }
    uint64_t v4 = 0;

  return v4;
}

void _UIIntelligenceScreenshotServiceGeneratePDF(void *a1, void *a2, void *a3)
{
  id v15 = a1;
  BOOL v5 = a2;
  id v6 = a3;
  uint64_t v7 = v15;
  if (v15)
  {
    if (v5) {
      goto LABEL_3;
    }
LABEL_14:
    uint64_t v11 = [MEMORY[0x1E4F28B00] currentHandler];
    id v12 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIIntelligenceScreenshotServiceGeneratePDF(UIScreenshotService *__strong _Nonnull, void (^__strong _Nonnull)(void), void (^__strong _Nonnull)(NSData * _Nullable __strong, NSInteger, CGRect))");
    [v11 handleFailureInFunction:v12, @"_UIApplicationIntelligenceSupport.m", 116, @"Invalid parameter not satisfying: %@", @"willGeneratePDF != NULL" file lineNumber description];

    uint64_t v7 = v15;
    if (v6) {
      goto LABEL_4;
    }
LABEL_15:
    uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
    char v14 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIIntelligenceScreenshotServiceGeneratePDF(UIScreenshotService *__strong _Nonnull, void (^__strong _Nonnull)(void), void (^__strong _Nonnull)(NSData * _Nullable __strong, NSInteger, CGRect))");
    [v13 handleFailureInFunction:v14, @"_UIApplicationIntelligenceSupport.m", 117, @"Invalid parameter not satisfying: %@", @"completionHandler != NULL" file lineNumber description];

    uint64_t v7 = v15;
    goto LABEL_4;
  }
  uint64_t v9 = [MEMORY[0x1E4F28B00] currentHandler];
  char v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void _UIIntelligenceScreenshotServiceGeneratePDF(UIScreenshotService *__strong _Nonnull, void (^__strong _Nonnull)(void), void (^__strong _Nonnull)(NSData * _Nullable __strong, NSInteger, CGRect))");
  [v9 handleFailureInFunction:v10, @"_UIApplicationIntelligenceSupport.m", 115, @"Invalid parameter not satisfying: %@", @"screenshotService != nil" file lineNumber description];

  uint64_t v7 = 0;
  if (!v5) {
    goto LABEL_14;
  }
LABEL_3:
  if (!v6) {
    goto LABEL_15;
  }
LABEL_4:
  char v8 = [v7 privateDelegate];
  if (v8 || ([v15 delegate], (char v8 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    if (objc_opt_respondsToSelector())
    {
      v5[2](v5);
      [v8 screenshotService:v15 generatePDFRepresentationWithCompletion:v6];
    }
    else if (objc_opt_respondsToSelector())
    {
      v5[2](v5);
      [v8 fetchPDFRepresentationWithCompletion:v6];
    }
  }
}

id _UIGetAccessibilityLabelSafe(void *a1)
{
  id v1 = a1;
  double v2 = [v1 accessibilityLabel];
  if (v2)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v3 = v2;
LABEL_4:
      uint64_t v4 = v3;
      goto LABEL_11;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v3 = [v2 string];
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v5 = [MEMORY[0x1E4FBA8A8] instanceMethodForSelector:sel_accessibilityAttributedLabel];
    if (v5 != [v1 methodForSelector:sel_accessibilityAttributedLabel])
    {
      id v6 = [v1 accessibilityAttributedLabel];
      if (v6)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v4 = [v6 string];

          goto LABEL_11;
        }
      }
    }
  }
  uint64_t v4 = 0;
LABEL_11:

  return v4;
}

__IOSurface *_UIIntelligenceCreateIOSurfaceForView(void *a1, double a2, double a3, double a4)
{
  v21[4] = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  if (!v7)
  {
    uint64_t v13 = [MEMORY[0x1E4F28B00] currentHandler];
    char v14 = objc_msgSend(NSString, "stringWithUTF8String:", "IOSurfaceRef  _Nullable _UIIntelligenceCreateIOSurfaceForView(UIView *__strong _Nonnull, CGSize, CGFloat)");
    [v13 handleFailureInFunction:v14, @"_UIApplicationIntelligenceSupport.m", 160, @"Invalid parameter not satisfying: %@", @"view != nil" file lineNumber description];
  }
  if (a2 < 0.0 || a3 < 0.0)
  {
    id v15 = [MEMORY[0x1E4F28B00] currentHandler];
    id v16 = objc_msgSend(NSString, "stringWithUTF8String:", "IOSurfaceRef  _Nullable _UIIntelligenceCreateIOSurfaceForView(UIView *__strong _Nonnull, CGSize, CGFloat)");
    [v15 handleFailureInFunction:v16, @"_UIApplicationIntelligenceSupport.m", 161, @"Invalid parameter not satisfying: %@", @"size.width >= 0 && size.height >= 0" file lineNumber description];
  }
  if (a4 <= 0.0)
  {
    uint64_t v17 = [MEMORY[0x1E4F28B00] currentHandler];
    char v18 = objc_msgSend(NSString, "stringWithUTF8String:", "IOSurfaceRef  _Nullable _UIIntelligenceCreateIOSurfaceForView(UIView *__strong _Nonnull, CGSize, CGFloat)");
    [v17 handleFailureInFunction:v18, @"_UIApplicationIntelligenceSupport.m", 162, @"Invalid parameter not satisfying: %@", @"scale > 0" file lineNumber description];
  }
  v20[0] = @"dst-size";
  *(double *)id v19 = a2;
  *(double *)&v19[1] = a3;
  char v8 = [MEMORY[0x1E4F29238] valueWithBytes:v19 objCType:"{CGSize=dd}"];
  v21[0] = v8;
  v20[1] = @"dst-scale";
  uint64_t v9 = [NSNumber numberWithDouble:a4];
  v21[1] = v9;
  v21[2] = &unk_1ED3F6780;
  v20[2] = @"dst-gamut";
  v20[3] = @"dst-opaque";
  v21[3] = MEMORY[0x1E4F1CC38];
  char v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v21 forKeys:v20 count:4];

  uint64_t v11 = _UIRenderView(v7, v10, &__block_literal_global_460);
  return v11;
}

id _reorderedPlacementsFromGroupForLegacyLayout(void *a1, char a2, void *a3)
{
  id v5 = a3;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___reorderedPlacementsFromGroupForLegacyLayout_block_invoke;
  v9[3] = &unk_1E5306360;
  id v10 = v5;
  char v11 = a2;
  id v6 = v5;
  id v7 = [a1 sortedArrayUsingComparator:v9];

  return v7;
}

uint64_t _UIGetFullWidthBackgroundActivity()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_FullWidthBackgroundActivity,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_FullWidthBackgroundActivity))
  {
    BOOL v1 = 1;
  }
  else
  {
    do
    {
      BOOL v1 = v0 >= v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_FullWidthBackgroundActivity, @"FullWidthBackgroundActivity", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_FullWidthBackgroundActivity;
    }
    while (v0 != _UIInternalPreference_FullWidthBackgroundActivity);
  }
  return byte_1E8FD545C || v1;
}

void sub_186615CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186616724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose((const void *)(v55 - 224), 8);
  _Block_object_dispose((const void *)(v55 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t ___reorderedPlacementsFromGroupForLegacyLayout_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = [a2 identifier];
  unint64_t v8 = [v5 indexOfObject:v7];

  uint64_t v9 = *(void **)(a1 + 32);
  id v10 = [v6 identifier];

  unint64_t v11 = [v9 indexOfObject:v10];
  if (v8 == 0x7FFFFFFFFFFFFFFFLL && v11 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t v13 = 1;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v13 = -1;
  }
  uint64_t v14 = -1;
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v14 = 1;
  }
  if (v8 < v11) {
    return v14;
  }
  else {
    return v13;
  }
}

void sub_1866176B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186618BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18661A3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id *location)
{
  __destructor_8_s64_s72_s144((uint64_t)&STACK[0x738]);
  __destructor_8_s64_s72_s144((uint64_t)&STACK[0x7D0]);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v40 - 192));
  _Unwind_Resume(a1);
}

id __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(uint64_t a1, id *a2)
{
  long long v4 = *(_OWORD *)a2;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x2F8], 8) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  long long v7 = *((_OWORD *)a2 + 8);
  long long v9 = *((_OWORD *)a2 + 5);
  long long v8 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x2F8], 8) = v7;
  *(_OWORD *)(a1 + 80) = v9;
  *(_OWORD *)(a1 + 96) = v8;
  id result = a2[18];
  *(void *)(a1 + 144) = result;
  return result;
}

void sub_18661AA30(_Unwind_Exception *a1)
{
  __destructor_8_s64_s72_s144(v1);
  _Unwind_Resume(a1);
}

id __copy_helper_block_e8_64n29_8_8_t0w64_s64_s72_t80w64_s144(uint64_t a1, uint64_t a2)
{
  return __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(a1 + 64, (id *)(a2 + 64));
}

void __destroy_helper_block_e8_64n14_8_s64_s72_s144(uint64_t a1)
{
}

void __destructor_8_s64_s72_s144(uint64_t a1)
{
  double v2 = *(void **)(a1 + 144);
}

id __copy_helper_block_e8_88n29_8_8_t0w64_s64_s72_t80w64_s144(uint64_t a1, uint64_t a2)
{
  return __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(a1 + 88, (id *)(a2 + 88));
}

void __destroy_helper_block_e8_88n14_8_s64_s72_s144(uint64_t a1)
{
}

void sub_18661B24C(_Unwind_Exception *a1)
{
  __destructor_8_s64_s72_s144(v2);
  __destructor_8_s64_s72_s144(v1);
  _Unwind_Resume(a1);
}

id __copy_helper_block_e8_240n29_8_8_t0w64_s64_s72_t80w64_s144(uint64_t a1, uint64_t a2)
{
  return __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(a1 + 240, (id *)(a2 + 240));
}

void __destroy_helper_block_e8_240n14_8_s64_s72_s144(uint64_t a1)
{
}

id __copy_helper_block_e8_48n29_8_8_t0w64_s64_s72_t80w64_s144(uint64_t a1, uint64_t a2)
{
  return __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(a1 + 48, (id *)(a2 + 48));
}

void __destroy_helper_block_e8_48n14_8_s64_s72_s144(uint64_t a1)
{
}

id __copy_helper_block_e8_136n29_8_8_t0w64_s64_s72_t80w64_s144288n29_8_8_t0w64_s64_s72_t80w64_s144(uint64_t a1, uint64_t a2)
{
  __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(a1 + 136, (id *)(a2 + 136));
  return __copy_constructor_8_8_t0w64_s64_s72_t80w64_s144(a1 + 288, (id *)(a2 + 288));
}

void __destroy_helper_block_e8_136n14_8_s64_s72_s144288n14_8_s64_s72_s144(uint64_t a1)
{
  uint64_t v1 = a1 + 136;
  __destructor_8_s64_s72_s144(a1 + 288);
  __destructor_8_s64_s72_s144(v1);
}

void sub_18661BAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18661C350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  objc_destroyWeak(v65);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186623034(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_186623D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location,id a22)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a22);
  _Unwind_Resume(a1);
}

void sub_18662591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1866293B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186629C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_186629FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18662A8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void sub_18662C1E4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18662C8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1866329CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a70, 8);
  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose(&STACK[0x238], 8);
  _Unwind_Resume(a1);
}

void sub_186633A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void stateMachineDebugger_block_invoke(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("OOPRename", &stateMachineDebugger_block_invoke___s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    id v10 = *(id *)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = [*a2 sessionIdentifier];
      if ((unint64_t)(a3 - 1) > 7) {
        id v12 = @"unknown";
      }
      else {
        id v12 = off_1E53071D0[a3 - 1];
      }
      if (a5 > 7) {
        uint64_t v13 = @"unknown";
      }
      else {
        uint64_t v13 = off_1E5307210[a5];
      }
      if ((unint64_t)(a4 - 1) > 7) {
        uint64_t v14 = @"unknown";
      }
      else {
        uint64_t v14 = off_1E53071D0[a4 - 1];
      }
      int v16 = 138413058;
      uint64_t v17 = v11;
      __int16 v18 = 2112;
      id v19 = v12;
      __int16 v20 = 2112;
      long long v21 = v13;
      __int16 v22 = 2112;
      long long v23 = v14;
      id v15 = (void *)v11;
      _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_ERROR, "[%@] Transitioning state: %@ -(%@)-> %@", (uint8_t *)&v16, 0x2Au);
    }
  }
}

void stateMachineDebugger_block_invoke_2(uint64_t a1, id *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("OOPRename", &stateMachineDebugger_block_invoke_2___s_category);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    long long v8 = *(id *)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = [*a2 sessionIdentifier];
      if ((unint64_t)(a3 - 1) > 7) {
        id v10 = @"unknown";
      }
      else {
        id v10 = off_1E53071D0[a3 - 1];
      }
      if (a4 > 7) {
        uint64_t v11 = @"unknown";
      }
      else {
        uint64_t v11 = off_1E5307210[a4];
      }
      int v13 = 138412802;
      uint64_t v14 = v9;
      __int16 v15 = 2112;
      int v16 = v10;
      __int16 v17 = 2112;
      __int16 v18 = v11;
      id v12 = (void *)v9;
      _os_log_impl(&dword_1853B0000, v8, OS_LOG_TYPE_ERROR, "[%@] Failed to transition from state %@ with event %@.", (uint8_t *)&v13, 0x20u);
    }
  }
}

void sessionDidStartInRenamerHandler_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  id v3 = *(id *)a2;
  id v4 = v2;
  if ([v3 _isServerSide]) {
    objc_msgSend(v3, "_server_sessionDidStartInRenamer:", v4);
  }
  else {
    objc_msgSend(v3, "_client_sessionDidStartInRenamer:", v4);
  }
}

void sessionDidEndHandler_block_invoke_4(uint64_t a1, id *a2)
{
  id v2 = *a2;
  if ([v2 _isServerSide]) {
    objc_msgSend(v2, "_server_sessionDidEnd");
  }
  else {
    objc_msgSend(v2, "_client_sessionDidEnd");
  }
}

void willBeginRenamingHandler_block_invoke_5(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  id v5 = *(id *)(a2 + 16);
  id v7 = v3;
  if ([v7 _isServerSide]) {
    objc_msgSend(v7, "_server_willBeginRenamingWithText:selectedRange:", v5, v4);
  }
  else {
  long long v6 = objc_msgSend(v7, "_client_willBeginRenamingWithText:selectedRange:", v5, v4);
  }

  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v4;
}

uint64_t shouldEndEditingHandler_block_invoke_6(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  id v4 = *(id *)(a2 + 16);
  id v5 = v3;
  if ([v5 _isServerSide]) {
    int v6 = objc_msgSend(v5, "_server_textFieldShouldEndEditingWithText:", v4);
  }
  else {
    int v6 = objc_msgSend(v5, "_client_textFieldShouldEndEditingWithText:", v4);
  }
  int v7 = v6;

  *(unsigned char *)(a2 + 33) = v7;
  if (v7) {
    uint64_t v8 = 5;
  }
  else {
    uint64_t v8 = 3;
  }

  return v8;
}

void didEndEditingHandler_block_invoke_7(uint64_t a1, void **a2)
{
  id v2 = *a2;
  id v3 = a2[2];
  id v4 = v2;
  if ([v4 _isServerSide]) {
    objc_msgSend(v4, "_server_textFieldDidEndEditingWithText:", v3);
  }
  else {
    objc_msgSend(v4, "_client_textFieldDidEndEditingWithText:", v3);
  }
}

void cancellationHandler_block_invoke_8(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 32);
  id v5 = *(id *)a2;
  int v3 = [v5 _isServerSide];
  BOOL v4 = v2 != 0;
  if (v3) {
    objc_msgSend(v5, "_server_cancelSessionAndNotify:", v4);
  }
  else {
    objc_msgSend(v5, "_client_cancelSessionAndNotify:", v4);
  }
}

void fileRenameDidFailHandler_block_invoke_9(uint64_t a1, uint64_t a2)
{
  id v6 = *(id *)a2;
  int v3 = *(void **)(a2 + 40);
  id v4 = *(id *)(a2 + 16);
  id v5 = v3;
  if ([v6 _isServerSide]) {
    objc_msgSend(v6, "_server_fileRenameDidFail:proposedName:", v5, v4);
  }
  else {
    objc_msgSend(v6, "_client_fileRenameDidFail:proposedName:", v5, v4);
  }
}

void fileRenameDidEndHandler_block_invoke_10(uint64_t a1, void **a2)
{
  int v2 = *a2;
  id v3 = a2[6];
  id v4 = v2;
  if ([v4 _isServerSide]) {
    objc_msgSend(v4, "_server_fileRenameDidEnd:", v3);
  }
  else {
    objc_msgSend(v4, "_client_fileRenameDidEnd:", v3);
  }
}

uint64_t fileRenameDynamicTransition_block_invoke_11(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (_UIApplicationProcessIsOverlayUI())
  {
    if (a3 == 6) {
      return 6;
    }
  }
  else if (a3 == 2)
  {
    return 6;
  }
  return 0;
}

id getFPSandboxingURLWrapperClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)_MergedGlobals_6;
  uint64_t v7 = _MergedGlobals_6;
  if (!_MergedGlobals_6)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getFPSandboxingURLWrapperClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getFPSandboxingURLWrapperClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1866349F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186634E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_186634F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1866350D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1866351B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_186635264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_186635308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_186635498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_18663554C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_186635AA8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_186636098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1866362A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186636530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  _Block_object_dispose((const void *)(v17 - 80), 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getFPSandboxingURLWrapperClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB258640)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __FileProviderLibraryCore_block_invoke_3;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E5307188;
    uint64_t v8 = 0;
    qword_1EB258640 = _sl_dlopen();
  }
  if (!qword_1EB258640)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *FileProviderLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UINavigationBarTitleRenamerRemoteSession.m", 47, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("FPSandboxingURLWrapper");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getFPSandboxingURLWrapperClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UINavigationBarTitleRenamerRemoteSession.m", 48, @"Unable to find class %s", "FPSandboxingURLWrapper");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __FileProviderLibraryCore_block_invoke_3()
{
  uint64_t result = _sl_dlopen();
  qword_1EB258640 = result;
  return result;
}

Class __getDOCFileRenamingSupportClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB258650)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __DocumentManagerLibraryCore_block_invoke_1;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E53071A0;
    uint64_t v8 = 0;
    qword_1EB258650 = _sl_dlopen();
  }
  if (!qword_1EB258650)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *DocumentManagerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UINavigationBarTitleRenamerRemoteSession.m", 43, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("DOCFileRenamingSupport");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getDOCFileRenamingSupportClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UINavigationBarTitleRenamerRemoteSession.m", 44, @"Unable to find class %s", "DOCFileRenamingSupport");

LABEL_10:
    __break(1u);
  }
  qword_1EB258648 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __DocumentManagerLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  qword_1EB258650 = result;
  return result;
}

Class __getDOCRenameSupportClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB258660)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __DocumentManagerCoreLibraryCore_block_invoke_0;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E53071B8;
    uint64_t v8 = 0;
    qword_1EB258660 = _sl_dlopen();
  }
  if (!qword_1EB258660)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *DocumentManagerCoreLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UINavigationBarTitleRenamerRemoteSession.m", 40, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("DOCRenameSupport");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getDOCRenameSupportClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UINavigationBarTitleRenamerRemoteSession.m", 41, @"Unable to find class %s", "DOCRenameSupport");

LABEL_10:
    __break(1u);
  }
  qword_1EB258658 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __DocumentManagerCoreLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB258660 = result;
  return result;
}

__CFString *sensorActivityScreenIdentifier(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  if (!v1 || ([v1 _isEmbeddedScreen] & 1) != 0 || (objc_msgSend(v2, "_isCarScreen") & 1) != 0)
  {
    id v3 = &stru_1ED0E84C0;
  }
  else
  {
    id v3 = [v2 _displayID];
  }

  return v3;
}

void sub_18663786C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIGetUIStatusBarForcedMode()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1) {
    return -1;
  }
  int v2 = _UIInternalPreference_UIStatusBarForcedMode;
  if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_UIStatusBarForcedMode) {
    return -1;
  }
  while (v0 >= v2)
  {
    _UIInternalPreferenceSync(v0, &_UIInternalPreference_UIStatusBarForcedMode, @"UIStatusBarForcedMode", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger);
    int v2 = _UIInternalPreference_UIStatusBarForcedMode;
    uint64_t result = -1;
    if (v0 == _UIInternalPreference_UIStatusBarForcedMode) {
      return result;
    }
  }
  return qword_1E8FD54A0;
}

void sub_18663ACBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18663B1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18663D1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

void _UITextLayoutDrawRangeInContext(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  long long v7 = [v6 location];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = ___UITextLayoutDrawRangeInContext_block_invoke;
  v11[3] = &unk_1E5307540;
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = a3;
  id v8 = v5;
  id v9 = v6;
  id v10 = (id)[v8 enumerateTextLayoutFragmentsFromLocation:v7 options:4 usingBlock:v11];
}

void sub_1866403B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIStatusBarRunningAnimations()
{
  return (id)_statusBarRunningAnimations;
}

void sub_186642584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

void sub_18664366C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_186644690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

id _UIStatusBarDelayedDataEntryKeys()
{
  return (id)_statusBarDelayedDataEntryKeys;
}

void sub_18664CCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIFocusBehaviorForScene(void *a1)
{
  if (a1)
  {
    uint64_t v1 = [a1 _focusSystemSceneComponent];
    int v2 = [v1 focusSystem];
    id v3 = [v2 behavior];
  }
  else
  {
    uint64_t v1 = +[UITraitCollection _fallbackTraitCollection]();
    id v3 = _UIFocusBaseBehaviorForTraitCollection(v1);
  }

  return v3;
}

id _UIFocusBehaviorForEnvironment(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = +[UIFocusSystem focusSystemForEnvironment:a1];
    [v1 behavior];
  }
  else
  {
    uint64_t v1 = +[UITraitCollection _fallbackTraitCollection]();
    _UIFocusBaseBehaviorForTraitCollection(v1);
  int v2 = };

  return v2;
}

void _UIFocusBehaviorSetOverrideFocusSystemEnabled(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 _focusSystemSceneComponent];
  [v6 setOverrideFocusSystemEnabled:a1 withIdentifier:v5];
}

uint64_t _UIFocusBehaviorGetOverrideFocusSystemEnabled(void *a1)
{
  uint64_t v1 = [a1 _focusSystemSceneComponent];
  uint64_t v2 = [v1 isOverrideFocusSystemEnabled];

  return v2;
}

void sub_186651070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186651754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t stateMachineSpec_block_invoke_4_7(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 delegate];
  [v3 clickDriver:v2 didPerformEvent:2];

  return 2;
}

id UIStatusBarLocalizedNotChargingString()
{
  int v0 = _UIKitBundle();
  uint64_t v1 = [v0 localizedStringForKey:@"Not Charging" value:@"Not Charging" table:@"Localizable"];

  return v1;
}

id UIStatusBarLocalizedRecordingStringForAppName(void *a1)
{
  id v1 = a1;
  id v2 = _UIKitBundle();
  id v3 = [v2 localizedStringForKey:@"Recording" value:@"Recording" table:@"Localizable"];

  uint64_t v4 = [NSString stringWithFormat:@"%@ (%@)", v1, v3];

  return v4;
}

id _UIStatusBar_Log()
{
  if (qword_1EB25D1C0 != -1) {
    dispatch_once(&qword_1EB25D1C0, &__block_literal_global_505);
  }
  int v0 = (void *)_MergedGlobals_9_4;
  return v0;
}

BOOL _indirectTouchTest_block_invoke(uint64_t a1, void *a2)
{
  return [a2 type] == 1;
}

void _UIStatusBarDisableAutomaticCenterItemAnimationDetection()
{
  _shouldAutomaticallyDetectCenterItemAnimatiouint64_t n = 1;
}

id UIStatusBarCreateHUDBatteryImage(void *a1, void *a2, int a3, int a4, int a5, double a6, double a7)
{
  v83[2] = *MEMORY[0x1E4F143B8];
  id v13 = a1;
  id v14 = a2;
  uint64_t v15 = +[UIImage kitImageNamed:@"Black_BatteryDrainingBG"];
  uint64_t v16 = +[UIImage kitImageNamed:@"Black_BatteryChargingAccessory"];
  uint64_t v17 = +[UIColor blackColor];
  char v18 = [v14 isEqual:v17];

  if ((v18 & 1) == 0)
  {
    uint64_t v19 = [v15 _flatImageWithColor:v14];

    uint64_t v20 = [v16 _flatImageWithColor:v14];

    uint64_t v16 = (void *)v20;
    uint64_t v15 = (void *)v19;
  }
  [v15 size];
  double v22 = 75.0 / v21;
  [v15 size];
  double v24 = v23;
  double v26 = v25;
  if (a3)
  {
    [v16 size];
    double v24 = v24 + v27 + 3.0;
  }
  CGFloat v28 = v26 * v22;
  double v29 = v22 * v24;
  double v81 = v28;
  _UIGraphicsBeginImageContextWithOptions(0, 0, v22 * v24, v28, a7);
  [v15 size];
  double v31 = v22 * v30;
  [v15 size];
  objc_msgSend(v15, "drawInRect:", 0.0, 0.0, v31, v22 * v32);
  if (a3)
  {
    double v33 = a7;
    if (a4)
    {
      uint64_t v34 = [v16 imageWithHorizontallyFlippedOrientation];

      uint64_t v16 = (void *)v34;
    }
    [v15 size];
    double v36 = v35 + 3.0;
    [v15 size];
    double v38 = v37;
    [v16 size];
    double v40 = v22 * ((v38 - v39) * 0.5);
    [v16 size];
    double v42 = v22 * v41;
    [v16 size];
    objc_msgSend(v16, "drawInRect:", v22 * v36, v40, v42, v22 * v43);
    a7 = v33;
  }
  ContextStacuint64_t k = GetContextStack(0);
  if (*(int *)ContextStack < 1) {
    long long v45 = 0;
  }
  else {
    long long v45 = (CGContext *)ContextStack[3 * (*(_DWORD *)ContextStack - 1) + 1];
  }
  CGContextScaleCTM(v45, v22, v22);
  [v15 size];
  double v47 = v46;
  double v49 = v48;
  if (a7 <= 2.5) {
    double v50 = 1.0;
  }
  else {
    double v50 = 1.33333333;
  }
  if (a7 <= 2.5) {
    double v51 = 4.5;
  }
  else {
    double v51 = 4.33333333;
  }
  id v52 = v13;
  double v53 = GetContextStack(0);
  if (*(int *)v53 < 1) {
    id v54 = 0;
  }
  else {
    id v54 = (CGContext *)v53[3 * (*(_DWORD *)v53 - 1) + 1];
  }
  CGContextSaveGState(v54);
  [v52 setFill];

  double v55 = v47 - (v51 + 2.0);
  double v56 = v49 + -4.0;
  v85.origin.CGFloat x = 2.0;
  v85.origin.CGFloat y = 2.0;
  v85.size.CGFloat width = v55;
  v85.size.CGFloat height = v56;
  double v57 = CGPathCreateWithRoundedRect(v85, v50, v50, 0);
  if (v57)
  {
    id v58 = v57;
    CGContextAddPath(v54, v57);
    CGContextClip(v54);
    CGPathRelease(v58);
  }
  double v59 = v55 * a6;
  if (v55 * a6 < 1.0) {
    double v59 = 1.0;
  }
  UIRoundToScale(v59, a7);
  v86.size.CGFloat width = v60;
  v86.origin.CGFloat x = 2.0;
  v86.origin.CGFloat y = 2.0;
  v86.size.CGFloat height = v56;
  UIRectFillUsingBlendMode(v86, kCGBlendModeNormal);
  CGContextRestoreGState(v54);
  uint64_t v61 = _UIGraphicsGetImageFromCurrentImageContext(0);
  UIGraphicsEndImageContext();
  if (a4)
  {
    uint64_t v62 = [v61 imageWithHorizontallyFlippedOrientation];

    uint64_t v61 = (void *)v62;
  }
  if (a5)
  {
    double v63 = (void *)MEMORY[0x1E4F28EE0];
    double v64 = [NSNumber numberWithDouble:a6];
    double v65 = [v63 localizedStringFromNumber:v64 numberStyle:3];

    id v66 = objc_alloc(MEMORY[0x1E4F28B18]);
    v82[0] = *(void *)off_1E52D2040;
    double v67 = [off_1E52D39B8 preferredFontForTextStyle:@"UICTFontTextStyleFootnote"];
    v82[1] = *(void *)off_1E52D2048;
    v83[0] = v67;
    v83[1] = v14;
    double v68 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v83 forKeys:v82 count:2];
    double v69 = (void *)[v66 initWithString:v65 attributes:v68];

    objc_msgSend(v69, "boundingRectWithSize:options:context:", 1, 0, 1.79769313e308, 1.79769313e308);
    double v71 = v70;
    double v73 = v72;
    CGFloat v74 = fmax(v29, v70);
    CGFloat v79 = v81 + 8.0 + v72;
    double v75 = a7;
    CGFloat v76 = round((v74 - v29) * 0.5 + 0.0);
    v87.origin.CGFloat y = 0.0;
    v87.origin.CGFloat x = v76;
    v87.size.CGFloat width = v29;
    v87.size.CGFloat height = v81;
    CGFloat v80 = CGRectGetMaxY(v87) + 8.0;
    _UIGraphicsBeginImageContextWithOptions(0, 0, v74, v79, v75);
    objc_msgSend(v61, "drawInRect:", v76, 0.0, v29, v81);
    objc_msgSend(v69, "drawWithRect:options:context:", 1, 0, round((v74 - v71) * 0.5 + 0.0), v80, v71, v73);
    uint64_t v77 = _UIGraphicsGetImageFromCurrentImageContext(0);

    UIGraphicsEndImageContext();
    uint64_t v61 = (void *)v77;
  }

  return v61;
}

id _UIUpdateInputTimingProfilePath(const char *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  id v1 = NSString;
  makeProfilePath(a1, v4);
  id v2 = [v1 stringWithCString:v4 encoding:4];
  return v2;
}

uint64_t _combineParallel(uint64_t result, uint64_t a2)
{
  if (result != a2 && result != 3)
  {
    uint64_t v2 = 2;
    uint64_t v4 = result == 1 || a2 == 1;
    if (a2 == 2) {
      uint64_t v4 = 2;
    }
    if (result != 2) {
      uint64_t v2 = v4;
    }
    if (a2 == 3) {
      return 3;
    }
    else {
      return v2;
    }
  }
  return result;
}

id _cachePath()
{
  if (qword_1EB263068 != -1) {
    dispatch_once(&qword_1EB263068, &__block_literal_global_507);
  }
  int v0 = (void *)qword_1EB263060;
  return v0;
}

void ___cachePath_block_invoke()
{
  _cacheBasePath();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  int v0 = _cacheVersionPathComponent();
  uint64_t v1 = [v3 stringByAppendingPathComponent:v0];
  uint64_t v2 = (void *)qword_1EB263060;
  qword_1EB263060 = v1;
}

id _cacheBasePath()
{
  if (qword_1EB263078 != -1) {
    dispatch_once(&qword_1EB263078, &__block_literal_global_31_4);
  }
  int v0 = (void *)qword_1EB263070;
  return v0;
}

id _cacheVersionPathComponent()
{
  if (qword_1EB263088 != -1) {
    dispatch_once(&qword_1EB263088, &__block_literal_global_42_0);
  }
  int v0 = (void *)qword_1EB263080;
  return v0;
}

void ___cacheBasePath_block_invoke()
{
  v4[4] = *MEMORY[0x1E4F143B8];
  int v0 = NSString;
  v4[0] = CPSharedResourcesDirectory();
  v4[1] = @"Library";
  void v4[2] = @"Caches";
  _OWORD v4[3] = @"com.apple.UIStatusBar";
  uint64_t v1 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:4];
  uint64_t v2 = [v0 pathWithComponents:v1];
  id v3 = (void *)qword_1EB263070;
  qword_1EB263070 = v2;
}

void ___cacheVersionPathComponent_block_invoke()
{
  int v4 = 0;
  uint64_t v0 = MGCopyAnswerWithError();
  uint64_t v1 = (void *)qword_1EB263080;
  qword_1EB263080 = v0;

  if (!qword_1EB263080)
  {
    uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("StatusBar", &qword_1EB263090) + 8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Could not retrieve build version number.", v3, 2u);
    }
  }
}

void ___cacheVersion_block_invoke()
{
  _cacheVersionPathComponent();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  qword_1EB263098 = [v0 hash];
}

void ___cleanOutOldCacheFilesIfNeeded_block_invoke()
{
  if ([(id)UIApp _isSpringBoard])
  {
    id v0 = dispatch_get_global_queue(-32768, 0);
    dispatch_async(v0, &__block_literal_global_51_0);
  }
}

void ___cleanOutOldCacheFilesIfNeeded_block_invoke_2()
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t CategoryCachedImpl = __UILogGetCategoryCachedImpl("StatusBar", &qword_1EB2630B0);
  if (*(unsigned char *)CategoryCachedImpl)
  {
    double v25 = *(NSObject **)(CategoryCachedImpl + 8);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1853B0000, v25, OS_LOG_TYPE_ERROR, "Checking for obsolete status bar cache items to delete.", buf, 2u);
    }
  }
  uint64_t v1 = _cacheBasePath();
  uint64_t v2 = _cacheVersionPathComponent();
  id v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  CGFloat v28 = (void *)v1;
  int v4 = [v3 enumeratorAtPath:v1];

  uint64_t v5 = [v4 nextObject];
  if (v5)
  {
    long long v7 = (void *)v5;
    int v8 = 0;
    int v9 = 0;
    *(void *)&long long v6 = 138412290;
    long long v27 = v6;
    do
    {
      objc_msgSend(v4, "skipDescendants", v27);
      if (([v7 isEqualToString:v2] & 1) == 0)
      {
        unint64_t v10 = __UILogGetCategoryCachedImpl("StatusBar", &qword_1EB2630B8);
        if (*(unsigned char *)v10)
        {
          char v18 = *(NSObject **)(v10 + 8);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = v27;
            *(void *)double v31 = v7;
            _os_log_impl(&dword_1853B0000, v18, OS_LOG_TYPE_ERROR, "Deleting obsolete status bar cache item: %@", buf, 0xCu);
          }
        }
        uint64_t v11 = _cacheBasePath();
        id v12 = [v11 stringByAppendingPathComponent:v7];

        id v13 = [MEMORY[0x1E4F28CB8] defaultManager];
        id v29 = 0;
        int v14 = [v13 removeItemAtPath:v12 error:&v29];
        id v15 = v29;

        if (v14)
        {
          ++v8;
        }
        else
        {
          ++v9;
          uint64_t v16 = *(NSObject **)(__UILogGetCategoryCachedImpl("StatusBar", &qword_1EB2630C0) + 8);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412546;
            *(void *)double v31 = v12;
            *(_WORD *)&v31[8] = 2112;
            id v32 = v15;
            _os_log_impl(&dword_1853B0000, v16, OS_LOG_TYPE_ERROR, "Could not remove obsolete status bar cache item at “%@”, error: %@", buf, 0x16u);
          }
        }
      }
      uint64_t v17 = [v4 nextObject];

      long long v7 = (void *)v17;
    }
    while (v17);
  }
  else
  {
    int v9 = 0;
    int v8 = 0;
  }
  if (v8 | v9)
  {
    unint64_t v19 = __UILogGetCategoryCachedImpl("StatusBar", &qword_1EB2630C8);
    if (*(unsigned char *)v19)
    {
      uint64_t v20 = *(NSObject **)(v19 + 8);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)double v31 = v8;
        *(_WORD *)&v31[4] = 1024;
        *(_DWORD *)&v31[6] = v9;
        double v21 = "Finished deleting obsolete cache items. %d items deleted; %d items could not be deleted.";
        double v22 = v20;
        uint32_t v23 = 14;
LABEL_26:
        _os_log_impl(&dword_1853B0000, v22, OS_LOG_TYPE_ERROR, v21, buf, v23);
      }
    }
  }
  else
  {
    unint64_t v24 = __UILogGetCategoryCachedImpl("StatusBar", &qword_1EB2630D0);
    if (*(unsigned char *)v24)
    {
      double v26 = *(NSObject **)(v24 + 8);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        double v21 = "Finished deleting obsolete cache items. No obsolete items found.";
        double v22 = v26;
        uint32_t v23 = 2;
        goto LABEL_26;
      }
    }
  }
}

id _UIUserInterfaceStyleArbiterLogger()
{
  if (qword_1EB2630E0 != -1) {
    dispatch_once(&qword_1EB2630E0, &__block_literal_global_508);
  }
  id v0 = (void *)_MergedGlobals_1233;
  return v0;
}

void sub_1866619D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186662D00(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1866634F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __BiomeStreamsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2630F8 = result;
  return result;
}

void __getBMDisplayAppearanceClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("BMDisplayAppearance");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB263100 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getBMDisplayAppearanceClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIUserInterfaceStyleArbiter.m", 34, @"Unable to find class %s", "BMDisplayAppearance");

    __break(1u);
  }
}

void *BiomeLibraryLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!BiomeLibraryLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    _OWORD v4[3] = __BiomeLibraryLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E5307DB8;
    uint64_t v6 = 0;
    BiomeLibraryLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  id v0 = (void *)BiomeLibraryLibraryCore_frameworkLibrary;
  if (!BiomeLibraryLibraryCore_frameworkLibrary)
  {
    id v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *BiomeLibraryLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIUserInterfaceStyleArbiter.m", 33, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __BiomeLibraryLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BiomeLibraryLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getBiomeLibrarySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BiomeLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB263108 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_186664318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _stickersLog()
{
  if (qword_1EB25BF30 != -1) {
    dispatch_once(&qword_1EB25BF30, &__block_literal_global_238_2);
  }
  id v0 = (void *)_MergedGlobals_1_25;
  return v0;
}

id getCKBrowserViewControllerClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1EB25BF38;
  uint64_t v7 = qword_1EB25BF38;
  if (!qword_1EB25BF38)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getCKBrowserViewControllerClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getCKBrowserViewControllerClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1866649EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18666600C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void ___stickersLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.UIKit", "Stickers");
  id v1 = (void *)_MergedGlobals_1_25;
  _MergedGlobals_1_25 = (uint64_t)v0;
}

Class __getCKBrowserViewControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25BF40)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __ChatKitLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E5307EE8;
    uint64_t v8 = 0;
    qword_1EB25BF40 = _sl_dlopen();
  }
  if (!qword_1EB25BF40)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *ChatKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIStickerPickerViewController.m", 28, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("CKBrowserViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getCKBrowserViewControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIStickerPickerViewController.m", 29, @"Unable to find class %s", "CKBrowserViewController");

LABEL_10:
    __break(1u);
  }
  qword_1EB25BF38 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ChatKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25BF40 = result;
  return result;
}

void sub_186668F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186669130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18666BA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
}

BOOL UIStatusBarDateItemCanBeEnabledOnPad(void *a1)
{
  uint64_t v1 = [a1 rawData];
  uint64_t v2 = _UIKitUserDefaults();
  BOOL v3 = ([v2 BOOLForKey:@"StatusBarHidesDate"] & 1) == 0 && *(unsigned char *)(v1 + 1) != 0;

  return v3;
}

BOOL UIStatusBarBluetoothItemCanBeEnabled(void *a1)
{
  uint64_t v1 = [a1 rawData];
  return *(unsigned char *)(v1 + 16) && *(unsigned char *)(v1 + 15) != 0;
}

uint64_t UIStatusBarDoubleHeightItemCanBeEnabled(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  long long v5 = +[UIDevice currentDevice];
  if ([v5 userInterfaceIdiom] == 1)
  {
    uint64_t v6 = [v3 doubleHeightStatus];
    if ([v6 length]) {
      uint64_t v7 = [v4 isDoubleHeight];
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

uint64_t UIStatusBarActivityItemCanBeEnabled(void *a1)
{
  uint64_t v1 = [a1 rawData];
  if (!*(unsigned char *)(v1 + 32)) {
    return 0;
  }
  if (!*(unsigned char *)(v1 + 2273)) {
    return 1;
  }
  uint64_t v2 = v1 + 2273;
  id v3 = +[UIApplication displayIdentifier];
  id v4 = (void *)[[NSString alloc] initWithCString:v2 encoding:4];
  long long v5 = v4;
  if (v3) {
    uint64_t v6 = [v4 hasPrefix:v3];
  }
  else {
    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t _UILegibilityStyleFromStatusBarStyle(uint64_t a1)
{
  if (a1 == 3) {
    return 2;
  }
  else {
    return a1 == 1;
  }
}

uint64_t _UIStatusBarStyleFromLegibilityStyle(uint64_t a1)
{
  if (a1 == 1) {
    uint64_t v1 = 1;
  }
  else {
    uint64_t v1 = -1;
  }
  if (a1 == 2) {
    return 3;
  }
  else {
    return v1;
  }
}

void sub_18666F7F8(_Unwind_Exception *a1)
{
  id v3 = v1;
  objc_destroyWeak(v3);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t __SystemStatusUILibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D590 = result;
  return result;
}

void sub_18667250C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1866745E0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

CGFloat _UIAdjustedLocationForScreenTouchLocation(void *a1, CGFloat a2)
{
  id v3 = a1;
  uint64_t v4 = [v3 windowScene];
  long long v5 = [v4 statusBarManager];
  [v5 statusBarFrame];
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;

  if (_UIAppUseModernRotationAndPresentationBehaviors())
  {
LABEL_2:
    v20.origin.CGFloat x = v7;
    v20.origin.CGFloat y = v9;
    v20.size.CGFloat width = v11;
    v20.size.CGFloat height = v13;
    CGRectGetHeight(v20);
  }
  else
  {
    id v15 = +[UIScreen mainScreen];
    [v15 bounds];
    double v17 = v16;

    char v18 = [v3 windowScene];
    uint64_t v19 = [v18 interfaceOrientation];

    switch(v19)
    {
      case 1:
      case 2:
        goto LABEL_2;
      case 3:
        v21.origin.CGFloat x = v7;
        v21.origin.CGFloat y = v9;
        v21.size.CGFloat width = v11;
        v21.size.CGFloat height = v13;
        a2 = v17 - (CGRectGetWidth(v21) + 1.0);
        break;
      case 4:
        v22.origin.CGFloat x = v7;
        v22.origin.CGFloat y = v9;
        v22.size.CGFloat width = v11;
        v22.size.CGFloat height = v13;
        a2 = CGRectGetWidth(v22) + 1.0;
        break;
      default:
        break;
    }
  }

  return a2;
}

void sub_186676FF8(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_18667A87C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 184));
  _Unwind_Resume(a1);
}

void sub_18667EF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

Class __getSTKRemoteStickerEffectEditorViewControllerClass_block_invoke(uint64_t a1)
{
  if (!qword_1EB25CF70) {
    qword_1EB25CF70 = _sl_dlopen();
  }
  Class result = objc_getClass("STKRemoteStickerEffectEditorViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_3_24 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __StickerKitLibraryCore_block_invoke_3()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25CF70 = result;
  return result;
}

id _UIDictationGlowEffectLog()
{
  if (qword_1EB263468 != -1) {
    dispatch_once(&qword_1EB263468, &__block_literal_global_514);
  }
  os_log_t v0 = (void *)_MergedGlobals_1236;
  return v0;
}

id getTUIGlowEffectClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  os_log_t v0 = (void *)qword_1EB263470;
  uint64_t v7 = qword_1EB263470;
  if (!qword_1EB263470)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getTUIGlowEffectClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getTUIGlowEffectClass_block_invoke((uint64_t)v3);
    os_log_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18667F880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTUIGlowEffectClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB263478)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __TextInputUILibraryCore_block_invoke_17;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E53081B8;
    uint64_t v8 = 0;
    qword_1EB263478 = _sl_dlopen();
  }
  if (!qword_1EB263478)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIDictationGlowEffect.m", 11, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUIGlowEffect");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getTUIGlowEffectClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDictationGlowEffect.m", 12, @"Unable to find class %s", "TUIGlowEffect");

LABEL_10:
    __break(1u);
  }
  qword_1EB263470 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_17()
{
  uint64_t result = _sl_dlopen();
  qword_1EB263478 = result;
  return result;
}

void sub_186681478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1866817F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

id _UIFirstPopoverSeguePresentedControllerInUnwindingResponderChain(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v3;
  uint64_t v6 = v5;
  id v7 = 0;
  id v8 = v5;
  if (v5 && v5 != v4)
  {
    uint64_t v9 = v5;
    while (1)
    {
      uint64_t v10 = [v9 _popoverController];
      if (v10)
      {
        CGFloat v11 = (void *)v10;
        double v12 = [v9 _sourceViewControllerIfPresentedViaPopoverSegue];

        if (v12) {
          break;
        }
      }
      id v8 = [v9 _nextViewControllerForUnwindSegueSearch];

      id v7 = 0;
      if (v8)
      {
        uint64_t v9 = v8;
        if (v8 != v4) {
          continue;
        }
      }
      goto LABEL_10;
    }
    id v7 = v9;
    id v8 = v7;
  }
LABEL_10:

  return v7;
}

uint64_t __ShouldUseLegacyUnwindSegueFactory_block_invoke()
{
  _MergedGlobals_1237 = (uint64_t)sel_segueForUnwindingToViewController_fromViewController_identifier_;
  qword_1EB263488 = objc_opt_class();
  uint64_t result = objc_opt_class();
  qword_1EB263490 = result;
  return result;
}

void sub_186683718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_186683AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL _canReuseExistingSwipeOccurrenceForSwipeDirection(void *a1, uint64_t a2)
{
  id v3 = a1;
  BOOL v4 = [v3 direction] == (a2 == 2) && (objc_msgSend(v3, "state") & 0xFFFFFFFFFFFFFFFELL) != 4;

  return v4;
}

__CFString *NSStringFromUISwipeState(unint64_t a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E53083A0[a1];
  }
}

__CFString *NSStringFromUISwipeDirection(unint64_t a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return off_1E53083B8[a1];
  }
}

id NSStringFromUISwipeConfig(void *a1)
{
  uint64_t v2 = NSString;
  if (*a1 > 2uLL) {
    id v3 = 0;
  }
  else {
    id v3 = off_1E53083B8[*a1];
  }
  BOOL v4 = NSStringFromBOOL();
  id v5 = [v2 stringWithFormat:@"{ %@, destructive: %@, open: %f, confirm: %f}", v3, v4, a1[2], a1[3]];

  return v5;
}

id NSStringFromUISwipeInfo(void *a1)
{
  uint64_t v2 = NSString;
  if (*a1 > 2uLL) {
    id v3 = 0;
  }
  else {
    id v3 = off_1E53083B8[*a1];
  }
  BOOL v4 = NSStringFromBOOL();
  id v5 = [v2 stringWithFormat:@"{ %@, animated: %@, x: %f, velocity: %f, stiffness: %f}", v3, v4, a1[3], a1[4], a1[5]];

  return v5;
}

double _UIDirectionalMultiplierForSwipeDirection(uint64_t a1)
{
  double result = 1.0;
  if (a1 == 1) {
    return -1.0;
  }
  return result;
}

id _UIEffectiveActivityItemsConfiguration(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector()) {
    [v1 _effectiveActivityItemsConfiguration];
  }
  else {
  uint64_t v2 = [v1 activityItemsConfiguration];
  }

  return v2;
}

BOOL _UISwipeOccurrenceStateIsEndState(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 4;
}

BOOL _UISwipeOccurrenceStateDisallowsUserInteraction(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 4;
}

__CFString *_NSStringFromSwipeOccurrenceState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4) {
    return @".closed";
  }
  else {
    return off_1E5308480[a1 - 1];
  }
}

void UIContextualActionAlertForOutdatedCompletionHandlerExecution(void *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("UIContextualAction", &UIContextualActionAlertForOutdatedCompletionHandlerExecution___s_category)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v3 = 138412290;
    id v4 = v1;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "The completion handler of an outdated contextual action was called after another action was performed. This will be ignored. Set a symbolic breakpoint on UIContextualActionAlertForOutdatedCompletionHandlerExecution to catch this in the debugger.\nOutdated action: %@", (uint8_t *)&v3, 0xCu);
  }
}

void sub_18668A5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 120), 8);
  _Unwind_Resume(a1);
}

double _UISwipeActionGestureRecognizerEffectiveVelocity(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 view];
  [v1 velocityInView:v2];
  double v4 = v3;

  uint64_t v5 = [v2 layer];
  if ([v5 flipsHorizontalAxis]) {
    double v4 = -v4;
  }

  return v4;
}

double _UISwipeActionGestureRecognizerEffectiveTranslation(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 view];
  [v1 translationInView:v2];
  double v4 = v3;

  uint64_t v5 = [v2 layer];
  if ([v5 flipsHorizontalAxis]) {
    double v4 = -v4;
  }

  return v4;
}

void sub_186692A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186692DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _isRenderingText(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 currentImage];

  if (v2)
  {
    [v1 bounds];
    uint64_t v3 = [v1 _defaultLayoutForHeight:CGRectGetHeight(v10)];
    double v4 = [v1 titleLabel];
    if ([v4 isHidden])
    {
      BOOL v5 = 0;
    }
    else
    {
      id v7 = [v1 titleLabel];
      id v8 = [v7 text];
      BOOL v5 = [v8 length] != 0;
    }
    if (v3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

double _UITableViewCellLayoutIntrinsicSizeForCellStackingLabels(void *a1, void *a2, double a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = [v6 _textLabel:0];
  id v8 = [v7 font];
  [v8 pointSize];
  double v10 = v9;

  if (v10 == 0.0)
  {
    CGFloat v11 = [v5 defaultTextLabelFontForCell:v6];
    [v7 setFont:v11];
  }
  [v6 frame];
  double v13 = v12;
  int v14 = [v6 textLabel];
  uint64_t v15 = [v14 numberOfLines];

  if (v7) {
    [v7 font];
  }
  else {
  uint64_t v16 = [v5 defaultTextLabelFontForCell:v6];
  }
  double v17 = [v6 imageView];
  char v18 = [v17 image];
  [v18 size];
  double v20 = v19;

  if (v20 > 0.0) {
    [v7 numberOfLines];
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    char v21 = [v5 shouldIncreaseMarginForImageViewInCell:v6];
    double v22 = 0.0;
    if ((v21 & 1) == 0) {
      [v5 requiredIndentationForFirstLineOfCell:v6 rowWidth:1 forSizing:a3];
    }
    [v7 _setFirstParagraphFirstLineHeadIndent:v22];
  }
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  [v5 getTextLabelRect:&v39 detailTextLabelRect:&v37 forCell:v6 rowWidth:1 forSizing:a3];
  double v23 = *(double *)&v40;
  double v24 = *MEMORY[0x1E4F1DAD8];
  double v25 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  double v26 = [v6 textLabel];
  objc_msgSend(v26, "textRectForBounds:limitedToNumberOfLines:", v15, v24, v25, v23, 1.79769313e308);

  double v27 = *(double *)&v38;
  CGFloat v28 = [v6 detailTextLabel];
  id v29 = [v6 detailTextLabel];
  objc_msgSend(v28, "textRectForBounds:limitedToNumberOfLines:", objc_msgSend(v29, "numberOfLines"), v24, v25, v27, 1.79769313e308);

  [v16 _bodyLeading];
  if ([v6 separatorStyle])
  {
    [v6 _separatorFrame];
    CGRectGetHeight(v41);
  }
  if (objc_msgSend(v5, "shouldStackAccessoryViewVerticallyForCell:editing:", v6, objc_msgSend(v6, "isEditing")))
  {
    double v30 = objc_msgSend(v5, "customAccessoryViewForCell:editing:", v6, objc_msgSend(v6, "isEditing"));
    [v30 frame];
  }
  double v31 = [v6 _detailTextLabel:0];
  id v32 = [v31 text];
  BOOL v33 = [v32 length] != 0;

  uint64_t v34 = [v6 _constants];
  double v35 = [v6 _tableView];
  objc_msgSend(v34, "defaultRowHeightForTableView:cellStyle:hasDetailText:", v35, objc_msgSend(v6, "style"), v33);

  return v13;
}

__CFString *_logResponderChain(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = objc_opt_new();
    do
    {
      double v4 = (objc_class *)objc_opt_class();
      id v5 = NSStringFromClass(v4);
      [v3 addObject:v5];

      uint64_t v6 = [v2 nextResponder];

      uint64_t v2 = (void *)v6;
    }
    while (v6);
    id v7 = [v3 componentsJoinedByString:@" > "];
  }
  else
  {
    id v7 = &stru_1ED0E84C0;
  }
  return v7;
}

void sub_1866A28D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1866AFE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1866B0198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSYDocumentAttributesClass_block_invoke(uint64_t a1)
{
  SynapseLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SYDocumentAttributes");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSYDocumentAttributesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getSYDocumentAttributesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIReturnToDocumentAction.m", 25, @"Unable to find class %s", "SYDocumentAttributes");

    __break(1u);
  }
}

void SynapseLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SynapseLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __SynapseLibraryCore_block_invoke;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5308800;
    uint64_t v5 = 0;
    SynapseLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!SynapseLibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *SynapseLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"_UIReturnToDocumentAction.m", 19, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  os_log_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __SynapseLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SynapseLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getSYDocumentWorkflowsClientClass_block_invoke(uint64_t a1)
{
  SynapseLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SYDocumentWorkflowsClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB2634D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getSYDocumentWorkflowsClientClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIReturnToDocumentAction.m", 27, @"Unable to find class %s", "SYDocumentWorkflowsClient");

    __break(1u);
  }
}

void __getSYReturnToDocumentRequestClass_block_invoke(uint64_t a1)
{
  SynapseLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SYReturnToDocumentRequest");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB2634E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getSYReturnToDocumentRequestClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIReturnToDocumentAction.m", 28, @"Unable to find class %s", "SYReturnToDocumentRequest");

    __break(1u);
  }
}

BOOL UIWebCurrentUserInterfaceIdiomIsSmallScreen()
{
  os_log_t v0 = +[UIDevice currentDevice];
  uint64_t v1 = [v0 userInterfaceIdiom];

  return (v1 & 0xFFFFFFFFFFFFFFFBLL) == 0;
}

void sub_1866B167C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1866B753C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1866B7ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _UIRecursiveDescription(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = [MEMORY[0x1E4F28E78] string];
  id v7 = (void *)MEMORY[0x18C108260]();
  visit(a1, a2, a3, v6, 0);
  return v6;
}

{
  void *v3;
  void v5[6];
  uint64_t vars8;

  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___Z23_UIRecursiveDescriptionP11objc_objectP13objc_selectorU13block_pointerFP8NSStringS0_iPU15__autoreleasingS4_E_block_invoke;
  v5[3] = &__block_descriptor_48_e8__16__0_8l;
  v5[4] = MEMORY[0x1E4FBA8E8];
  v5[5] = a2;
  uint64_t v3 = _UIRecursiveDescription(a1, (uint64_t)v5, a3);
  return v3;
}

void visit(void *a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  appendDescription(a1, a3, a4, @"   | ", a5);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v10 = (*(void (**)(uint64_t, void *))(a2 + 16))(a2, a1);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v17;
    unint64_t v14 = a5 + 1;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v17 != v13) {
          objc_enumerationMutation(v10);
        }
        visit(*(void *)(*((void *)&v16 + 1) + 8 * v15++), a2, a3, a4, v14);
      }
      while (v12 != v15);
      uint64_t v12 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v12);
  }
}

uint64_t ___Z23_UIRecursiveDescriptionP11objc_objectP13objc_selectorU13block_pointerFP8NSStringS0_iPU15__autoreleasingS4_E_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 32))(a2, *(void *)(a1 + 40));
}

void appendDescription(void *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  if (a2)
  {
    id v11 = 0;
    id v8 = (*(void (**)(uint64_t, void *, unint64_t, id *))(a2 + 16))(a2, a1, a5, &v11);
    id v9 = v11;
    if (!v8) {
      goto LABEL_13;
    }
  }
  else
  {
    id v8 = [a1 description];
    id v9 = 0;
    if (!v8) {
      goto LABEL_13;
    }
  }
  if ([a3 length]) {
    [a3 appendString:@"\n"];
  }
  if (v9)
  {
    [a3 appendString:v9];
  }
  else if (a5)
  {
    unint64_t v10 = 1;
    do
    {
      [a3 appendString:a4];
      ++v10;
    }
    while (v10 <= a5);
  }
  [a3 appendString:v8];
LABEL_13:
}

id _UIAncestralDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = MEMORY[0x1E4F143A8];
  uint64_t v15 = ___Z23_UIAncestralDescriptionP11objc_objectP13objc_selectorU13block_pointerFP8NSStringS0_iPU15__autoreleasingS4_E_block_invoke;
  long long v16 = &__block_descriptor_48_e8__16__0_8l;
  uint64_t v17 = MEMORY[0x1E4FBA8E8];
  uint64_t v18 = a2;
  uint64_t v5 = objc_opt_new();
  id v7 = (void *)MEMORY[0x18C108260](v5, v6);
  id v8 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithObject:", a1, v14, 3221225472);
  id v9 = (id)___Z23_UIAncestralDescriptionP11objc_objectP13objc_selectorU13block_pointerFP8NSStringS0_iPU15__autoreleasingS4_E_block_invoke((uint64_t)&v14, a1);
  if (v9)
  {
    id v10 = v9;
    do
    {
      [v8 insertObject:v10 atIndex:0];
      id v10 = (id)v15((uint64_t)&v14, (uint64_t)v10);
    }
    while (v10);
  }
  if ([v8 count])
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = [v8 objectAtIndexedSubscript:v11];
      appendDescription(v12, a3, v5, @"    ", v11);

      ++v11;
    }
    while (v11 < [v8 count]);
  }

  return v5;
}

uint64_t ___Z23_UIAncestralDescriptionP11objc_objectP13objc_selectorU13block_pointerFP8NSStringS0_iPU15__autoreleasingS4_E_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 32))(a2, *(void *)(a1 + 40));
}

uint64_t UIKeyboardIsModularKeyboardPlatformEnabled()
{
  if (qword_1EB263500 != -1) {
    dispatch_once(&qword_1EB263500, &__block_literal_global_526);
  }
  return _MergedGlobals_1242;
}

uint64_t __UIKeyboardIsModularKeyboardPlatformEnabled_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    _MergedGlobals_1242 = 1;
  }
  return result;
}

uint64_t _UITableConstantsBackgroundColorTransformerHasMinimalImpact(unint64_t a1)
{
  return (a1 < 0xD) & (0x1081u >> a1);
}

uint64_t _UITableConstantsEffectiveBackgroundFillStyleFromProperties(uint64_t *a1)
{
  unint64_t v1 = a1[6];
  BOOL v2 = v1 > 0xC;
  uint64_t v3 = (1 << v1) & 0x1081;
  if (v2 || v3 == 0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *a1;
  }
  __destructor_8_s8_s16_s24_s80((uint64_t)a1);
  return v5;
}

void sub_1866BB87C(_Unwind_Exception *a1)
{
  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

void sub_1866BC208(_Unwind_Exception *a1)
{
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(v1);
  _Unwind_Resume(a1);
}

void sub_1866BD270(_Unwind_Exception *a1)
{
  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

void sub_1866BDA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __destructor_8_s8_s16_s24_s80((uint64_t)&a9);
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(v9);
  _Unwind_Resume(a1);
}

void _UITableConstantsApplyBoldSidebarStylingToContentProperties(uint64_t a1, void *a2)
{
  long long v4 = [off_1E52D39B8 _preferredFontForTextStyle:@"UICTFontTextStyleBody" weight:*(double *)off_1E52D6BF0];
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  id v10 = v4;

  uint64_t v6 = [a2 preferredContentSizeCategory];
  if (UIContentSizeCategoryIsAccessibilityCategory(v6))
  {
    if (UIContentSizeCategoryCompareToCategory(v6, &cfstr_Uictcontentsiz_11.isa) == NSOrderedAscending)
    {
      if (UIContentSizeCategoryCompareToCategory(v6, &cfstr_Uictcontentsiz_9.isa) == NSOrderedAscending) {
        uint64_t v7 = 3;
      }
      else {
        uint64_t v7 = 2;
      }
    }
    else
    {
      uint64_t v7 = 1;
    }
  }
  else
  {
    uint64_t v7 = 3;
  }

  uint64_t v8 = +[UIImageSymbolConfiguration configurationWithFont:v10 scale:v7];
  uint64_t v9 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v8;
}

void sub_1866BDD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1866BDEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

CGColor *DKUCGColorCreateConvertedToSRGB(uint64_t a1)
{
  v8[1] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v1 = +[UIColor colorWithCGColor:a1];
  [v1 getRed:&v5 green:&v6 blue:&v7 alpha:v8];

  id v2 = +[UIColor colorWithRed:v5 green:v6 blue:v7 alpha:v8[0]];
  uint64_t v3 = (CGColor *)[v2 CGColor];

  CGColorRetain(v3);
  return v3;
}

void DKUColorGetRGBAComponents(CGColor *a1, _OWORD *a2)
{
  if (a1)
  {
    ConvertedToSRGB = a1;
    ColorSpace = CGColorGetColorSpace(a1);
    if (ColorSpace)
    {
      if (CGColorSpaceGetModel(ColorSpace) == kCGColorSpaceModelRGB)
      {
        double v5 = 0;
      }
      else
      {
        ConvertedToSRGB = DKUCGColorCreateConvertedToSRGB((uint64_t)ConvertedToSRGB);
        double v5 = ConvertedToSRGB;
      }
      if (CGColorGetNumberOfComponents(ConvertedToSRGB) == 4)
      {
        Components = CGColorGetComponents(ConvertedToSRGB);
        long long v7 = *((_OWORD *)Components + 1);
        *a2 = *(_OWORD *)Components;
        a2[1] = v7;
      }
      if (v5)
      {
        CGColorRelease(v5);
      }
    }
  }
}

double DKUCalculateHue(double a1, double a2, double a3)
{
  double v3 = a3 + -6.0;
  if (a3 < 6.0) {
    double v3 = a3;
  }
  if (a3 < 0.0) {
    double v4 = a3 + 6.0;
  }
  else {
    double v4 = v3;
  }
  if (v4 < 1.0)
  {
    double v5 = a2 - a1;
    return v5 * v4 + a1;
  }
  if (v4 >= 3.0)
  {
    if (v4 >= 4.0) {
      return a1;
    }
    double v5 = a2 - a1;
    double v4 = 4.0 - v4;
    return v5 * v4 + a1;
  }
  return a2;
}

void DKUConvertHSLToSRGB(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 8);
  double v5 = *(double *)(a1 + 16);
  if (fabs(v4) >= 0.00999999978)
  {
    double v8 = *(double *)a1;
    double v9 = v4 + v5 - v4 * v5;
    double v10 = v5 * (v4 + 1.0);
    if (v5 <= 0.5) {
      double v11 = v10;
    }
    else {
      double v11 = v9;
    }
    double v12 = v5 + v5 - v11;
    double v13 = v8 * 6.0;
    double v5 = DKUCalculateHue(v12, v11, v8 * 6.0 + 2.0);
    double v6 = DKUCalculateHue(v12, v11, v13);
    double v7 = DKUCalculateHue(v12, v11, v13 + -2.0);
  }
  else
  {
    double v6 = *(double *)(a1 + 16);
    double v7 = v6;
  }
  uint64_t v14 = *(void *)(a1 + 24);
  *(double *)a2 = v5;
  *(double *)(a2 + _Block_object_dispose(&STACK[0x2F8], 8) = v6;
  *(double *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v14;
}

uint64_t DKUConvertsRGBToHSL(uint64_t result, uint64_t a2)
{
  double v2 = *(double *)result;
  double v3 = *(double *)(result + 8);
  double v4 = *(double *)(result + 16);
  double v5 = fmax(fmax(*(double *)result, v3), v4);
  double v6 = fmin(fmin(*(double *)result, v3), v4);
  double v7 = v5 - v6;
  double v8 = 0.0;
  double v9 = 0.0;
  if (vabdd_f64(v5, v6) >= 0.00999999978)
  {
    if (v5 == v2)
    {
      double v10 = (v3 - v4) / v7 * 60.0;
      double v11 = 360.0;
    }
    else
    {
      if (v5 == v3)
      {
        double v10 = (v4 - v2) / v7 * 60.0;
        uint64_t v12 = 0x405E000000000000;
      }
      else
      {
        double v10 = (v2 - v3) / v7 * 60.0;
        uint64_t v12 = 0x406E000000000000;
      }
      double v11 = *(double *)&v12;
    }
    double v9 = v10 + v11;
  }
  double v13 = v5 + v6;
  double v14 = v13 * 0.5;
  if (v7 != 0.0)
  {
    if (v14 <= 0.5) {
      double v8 = v7 / v13;
    }
    else {
      double v8 = v7 / (2.0 - v13);
    }
  }
  double v15 = v9 + -360.0;
  if (v9 < 360.0) {
    double v15 = v9;
  }
  uint64_t v16 = *(void *)(result + 24);
  *(double *)a2 = v15 / 360.0;
  *(double *)(a2 + _Block_object_dispose(&STACK[0x2F8], 8) = v8;
  *(double *)(a2 + 16) = v14;
  *(void *)(a2 + 24) = v16;
  return result;
}

id _UITextFormattingViewControllerFormattingStyleClasses()
{
  if (qword_1EB263560 != -1) {
    dispatch_once(&qword_1EB263560, &__block_literal_global_528);
  }
  os_log_t v0 = (void *)_MergedGlobals_1245;
  return v0;
}

void sub_1866BF6D0(_Unwind_Exception *a1)
{
}

id KeyboardUIServiceLog()
{
  if (qword_1EB263570 != -1) {
    dispatch_once(&qword_1EB263570, &__block_literal_global_529);
  }
  os_log_t v0 = (void *)_MergedGlobals_1246;
  return v0;
}

void __KeyboardUIServiceLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.keyboard", "KeyboardUIService");
  uint64_t v1 = (void *)_MergedGlobals_1246;
  _MergedGlobals_1246 = (uint64_t)v0;
}

uint64_t TableShouldUseExtraPaddingForCells(void *a1)
{
  uint64_t v1 = [a1 _scrollView];
  double v2 = [v1 _screen];
  double v3 = v2;
  if (!v2) {
    goto LABEL_5;
  }
  [v2 bounds];
  CGFloat v5 = v4;
  CGFloat v7 = v6;
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  [v1 frame];
  if (CGRectGetHeight(v14) < 916.0) {
    goto LABEL_5;
  }
  v15.origin.CGFloat x = v5;
  v15.origin.CGFloat y = v7;
  v15.size.CGFloat width = v9;
  v15.size.CGFloat height = v11;
  if (CGRectGetWidth(v15) >= 1366.0
    || (v16.origin.x = v5, v16.origin.y = v7, v16.size.CGFloat width = v9, v16.size.height = v11, CGRectGetHeight(v16) >= 1366.0))
  {
    uint64_t v12 = 1;
  }
  else
  {
LABEL_5:
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_1866C13B8(_Unwind_Exception *a1)
{
  __destructor_8_s8_s16_s24_s80(v1);
  _Unwind_Resume(a1);
}

void sub_1866C214C(_Unwind_Exception *a1)
{
  __destructor_8_sb0_sb8_sb16_sb24_sb32_sb40(v1);
  _Unwind_Resume(a1);
}

void sub_1866C498C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1866C57EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1866C5FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1866C6208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _UIScrollViewVFDTableLookup(unsigned int a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t *a5, float a6)
{
  if (a1 >= 2)
  {
    uint64_t v6 = a2 + 16 * (a1 - 2) + 16;
    unsigned int v7 = a1 - 1;
    uint64_t v8 = a2;
    while (1)
    {
      unsigned int v9 = *(_DWORD *)(v8 + 16);
      v8 += 16;
      if (v9 >= a3) {
        break;
      }
      a2 = v8;
      if (!--v7)
      {
        a2 = v6;
        break;
      }
    }
  }
  uint64_t v10 = *(void *)(a2 + 8);
  unsigned int v11 = *(_DWORD *)(a2 + 4);
  if (v11 >= 2)
  {
    uint64_t v12 = v10 + 16 * (v11 - 2) + 16;
    unsigned int v13 = v11 - 1;
    uint64_t v14 = *(void *)(a2 + 8);
    while (1)
    {
      float v15 = *(float *)(v14 + 16);
      v14 += 16;
      if (v15 >= a6) {
        break;
      }
      uint64_t v10 = v14;
      if (!--v13)
      {
        uint64_t v10 = v12;
        break;
      }
    }
  }
  *a4 = a2;
  *a5 = v10;
  return v10 + 4;
}

void *_UIScrollViewVFDTableFromString(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ([a1 length])
    {
      id v54 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@":"];
      double v63 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@"@"];
      double v53 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@","];
      uint64_t v62 = [MEMORY[0x1E4F28B88] characterSetWithCharactersInString:@"/"];
      double v2 = [MEMORY[0x1E4F28B88] newlineCharacterSet];
      double v50 = v1;
      double v3 = [v1 componentsSeparatedByCharactersInSet:v2];

      if (![v3 count])
      {
        double v48 = [MEMORY[0x1E4F28B00] currentHandler];
        double v49 = [NSString stringWithUTF8String:"_UIScrollViewVFDTable * _Nullable _UIScrollViewVFDTableFromString(NSString *const  _Nonnull const __strong)"];
        [v48 handleFailureInFunction:v49, @"_UIScrollViewVFD.m", 181, @"Expecting at least 1 element in lines array, string=\"%@\"", v50 file lineNumber description];
      }
      double v4 = malloc_type_malloc(16 * [v3 count], 0x10200405730B0C9uLL);
      long long v69 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      id v5 = v3;
      uint64_t v56 = [v5 countByEnumeratingWithState:&v69 objects:v74 count:16];
      if (v56)
      {
        unsigned int v6 = 0;
        uint64_t v55 = *(void *)v70;
        id v51 = v5;
        id v52 = v4;
        do
        {
          for (uint64_t i = 0; i != v56; ++i)
          {
            if (*(void *)v70 != v55) {
              objc_enumerationMutation(v5);
            }
            uint64_t v8 = *(void **)(*((void *)&v69 + 1) + 8 * i);
            unsigned int v9 = [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
            uint64_t v10 = [v8 stringByTrimmingCharactersInSet:v9];

            if ([v10 length])
            {
              unsigned int v11 = [v10 componentsSeparatedByCharactersInSet:v54];
              if ([v11 count] != 2)
              {
                long long v40 = [MEMORY[0x1E4F28B00] currentHandler];
                CGRect v41 = [NSString stringWithUTF8String:"_UIScrollViewVFDTable * _Nullable _UIScrollViewVFDTableFromString(NSString *const  _Nonnull const __strong)"];
                [v40 handleFailureInFunction:v41, @"_UIScrollViewVFD.m", 190, @"Expecting 2 elements in parts array, line=\"%@\"", v10 file lineNumber description];
              }
              id v58 = v10;
              uint64_t v59 = i;
              uint64_t v12 = [v11 objectAtIndexedSubscript:0];
              v4[4 * v6] = [v12 integerValue];

              unsigned int v13 = [v11 objectAtIndexedSubscript:1];
              uint64_t v14 = [v13 componentsSeparatedByCharactersInSet:v53];

              if (![v14 count])
              {
                double v42 = [MEMORY[0x1E4F28B00] currentHandler];
                double v43 = [NSString stringWithUTF8String:"_UIScrollViewVFDTable * _Nullable _UIScrollViewVFDTableFromString(NSString *const  _Nonnull const __strong)"];
                long long v44 = [v11 objectAtIndexedSubscript:1];
                [v42 handleFailureInFunction:v43, @"_UIScrollViewVFD.m", 193, @"Expecting at least 1 element in items array, part=\"%@\"", v44 file lineNumber description];
              }
              double v57 = v11;
              unsigned int v60 = v6;
              float v15 = (char *)&v4[4 * v6];
              *((_DWORD *)v15 + 1) = [v14 count];
              *((void *)v15 + 1) = malloc_type_malloc(16 * [v14 count], 0x1000040451B5BE8uLL);
              CGRect v16 = v15 + 8;
              long long v65 = 0u;
              long long v66 = 0u;
              long long v67 = 0u;
              long long v68 = 0u;
              id obj = v14;
              uint64_t v17 = [obj countByEnumeratingWithState:&v65 objects:v73 count:16];
              if (v17)
              {
                uint64_t v18 = v17;
                int v19 = 0;
                uint64_t v64 = *(void *)v66;
                do
                {
                  for (uint64_t j = 0; j != v18; ++j)
                  {
                    if (*(void *)v66 != v64) {
                      objc_enumerationMutation(obj);
                    }
                    uint64_t v21 = *(void **)(*((void *)&v65 + 1) + 8 * j);
                    double v22 = [v21 componentsSeparatedByCharactersInSet:v63];
                    if ([v22 count] != 2)
                    {
                      double v35 = [MEMORY[0x1E4F28B00] currentHandler];
                      double v36 = [NSString stringWithUTF8String:"_UIScrollViewVFDTable * _Nullable _UIScrollViewVFDTableFromString(NSString *const  _Nonnull const __strong)"];
                      [v35 handleFailureInFunction:v36, @"_UIScrollViewVFD.m", 199, @"Expecting 2 elements in item parts array, item=\"%@\"", v21 file lineNumber description];
                    }
                    double v23 = [v22 objectAtIndexedSubscript:0];
                    [v23 floatValue];
                    uint64_t v24 = (v19 + j);
                    *(_DWORD *)(*v16 + 16 * v24) = v25;

                    double v26 = [v22 objectAtIndexedSubscript:1];
                    double v27 = [v26 componentsSeparatedByCharactersInSet:v62];

                    if ([v27 count] != 3)
                    {
                      long long v37 = [MEMORY[0x1E4F28B00] currentHandler];
                      long long v38 = [NSString stringWithUTF8String:"_UIScrollViewVFDTable * _Nullable _UIScrollViewVFDTableFromString(NSString *const  _Nonnull const __strong)"];
                      long long v39 = [v22 objectAtIndexedSubscript:1];
                      [v37 handleFailureInFunction:v38, @"_UIScrollViewVFD.m", 202, @"Expecting 3 elements in rates array, part=\"%@\"", v39 file lineNumber description];
                    }
                    CGFloat v28 = (float *)(*v16 + 16 * v24);
                    id v29 = [v27 objectAtIndexedSubscript:0];
                    float v30 = (float)[v29 integerValue];
                    double v31 = [v27 objectAtIndexedSubscript:2];
                    float v32 = (float)[v31 integerValue];
                    BOOL v33 = [v27 objectAtIndexedSubscript:1];
                    uint64_t v34 = [v33 integerValue];
                    v28[1] = v30;
                    v28[2] = v32;
                    void v28[3] = (float)v34;
                  }
                  uint64_t v18 = [obj countByEnumeratingWithState:&v65 objects:v73 count:16];
                  v19 += j;
                }
                while (v18);
              }

              unsigned int v6 = v60 + 1;
              id v5 = v51;
              double v4 = v52;
              uint64_t v10 = v58;
              uint64_t i = v59;
            }
          }
          uint64_t v56 = [v5 countByEnumeratingWithState:&v69 objects:v74 count:16];
        }
        while (v56);

        if (v6) {
          goto LABEL_34;
        }
      }
      else
      {
      }
      long long v45 = [MEMORY[0x1E4F28B00] currentHandler];
      double v46 = [NSString stringWithUTF8String:"_UIScrollViewVFDTable * _Nullable _UIScrollViewVFDTableFromString(NSString *const  _Nonnull const __strong)"];
      [v45 handleFailureInFunction:v46, @"_UIScrollViewVFD.m", 208, @"Expecting at least 1 row, string=\"%@\"", v50 file lineNumber description];

      unsigned int v6 = 0;
LABEL_34:
      uint64_t v1 = malloc_type_malloc(0x10uLL, 0x1020040D5A9D86FuLL);
      *(_DWORD *)uint64_t v1 = v6;
      v1[1] = malloc_type_realloc(v4, 16 * v6, 0x10200405730B0C9uLL);

      return v1;
    }
    return 0;
  }
  return v1;
}

uint64_t _UIHomeAffordanceSingleTapGatingEnabled()
{
  uint64_t result = _UIDeviceSupportsGlobalEdgeSwipeTouches();
  if (result)
  {
    return _UIApplicationSupportsHomeAffordanceObservation();
  }
  return result;
}

void sub_1866CF20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *_UIEventDeferringEnvironmentsContainerSetDescription(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [a1 count];
  double v3 = @"(empty)";
  if (a1)
  {
    uint64_t v4 = v2;
    if (v2)
    {
      id v5 = objc_opt_new();
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id obj = a1;
      uint64_t v6 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)v19;
        do
        {
          uint64_t v10 = 0;
          uint64_t v16 = v8;
          uint64_t v11 = 1 - v4 + v8;
          do
          {
            if (*(void *)v19 != v9) {
              objc_enumerationMutation(obj);
            }
            uint64_t v12 = [*(id *)(*((void *)&v18 + 1) + 8 * v10) description];
            unsigned int v13 = (void *)v12;
            if (v11 + v10) {
              uint64_t v14 = @", ";
            }
            else {
              uint64_t v14 = &stru_1ED0E84C0;
            }
            [v5 appendFormat:@"%@%@", v12, v14];

            ++v10;
          }
          while (v7 != v10);
          uint64_t v7 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
          uint64_t v8 = v16 + v10;
        }
        while (v7);
      }

      double v3 = (__CFString *)[v5 copy];
    }
  }
  return v3;
}

uint64_t shouldAllowDrop(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 _activeSourceDragSession];
  if (v5)
  {
    uint64_t v6 = [v4 localDragSession];

    if (v6)
    {
      uint64_t v7 = [v4 localDragSession];

      if (v5 == v7) {
        uint64_t v6 = [v3 _shouldAllowInternalDrop];
      }
      else {
        uint64_t v6 = 0;
      }
    }
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

void sub_1866D0EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1866D17B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *_UITableViewStringFromDropIntent(unint64_t a1)
{
  if (a1 > 3) {
    return @"Unknown Drop Intent";
  }
  else {
    return off_1E5308BE8[a1];
  }
}

void sub_1866D6BAC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

id realCellForRowAtIndexPath(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x3032000000;
  uint64_t v16 = __Block_byref_object_copy__192;
  uint64_t v17 = __Block_byref_object_dispose__192;
  id v18 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = __realCellForRowAtIndexPath_block_invoke;
  v9[3] = &unk_1E52E1B98;
  uint64_t v12 = &v13;
  id v5 = v3;
  id v10 = v5;
  id v6 = v4;
  id v11 = v6;
  [v5 _performUsingPresentationValues:v9];
  id v7 = (id)v14[5];

  _Block_object_dispose(&v13, 8);
  return v7;
}

void sub_1866D9234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1866D9644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __realCellForRowAtIndexPath_block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cellForRowAtIndexPath:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id _UICalendarFontWithWeight(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  uint64_t v8 = [off_1E52D39C0 preferredFontDescriptorWithTextStyle:a1 compatibleWithTraitCollection:a2];
  if (a4 > 0.0)
  {
    uint64_t v18 = *(void *)off_1E52D6B98;
    uint64_t v16 = *(void *)off_1E52D6C08;
    uint64_t v9 = [NSNumber numberWithDouble:a4];
    uint64_t v17 = v9;
    id v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    v19[0] = v10;
    id v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
    uint64_t v12 = [v8 fontDescriptorByAddingAttributes:v11];

    uint64_t v8 = (void *)v12;
  }
  if (v7 && ([v7 isEqual:*(void *)off_1E52D6B80] & 1) == 0)
  {
    uint64_t v13 = [v8 fontDescriptorWithDesign:v7];

    uint64_t v8 = (void *)v13;
  }
  uint64_t v14 = [off_1E52D39B8 fontWithDescriptor:v8 size:0.0];

  return v14;
}

void sub_1866DAC14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

double _UIAXAdjustContentOffsetForDifferentialScrollingIfNecessary(void *a1, void *a2, double a3, double a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = [v8 item];
  id v10 = _UIFocusBehaviorForEnvironment((uint64_t)v9);

  if [v10 shouldCallAccessibilityOverrides] && (objc_opt_respondsToSelector())
  {
    objc_msgSend(v7, "_ax_adjustedContentOffsetForDifferentialScrollingToShowFocusItemWithInfo:proposedContentOffset:", v8, a3, a4);
    a3 = v11;
  }

  return a3;
}

uint64_t localizedObjectSort(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a3[1];
  id v7 = (void (*)(void *, uint64_t))[a1 methodForSelector:v6];
  id v8 = (void (*)(void *, uint64_t))[a2 methodForSelector:v6];
  uint64_t v9 = (void *)*a3;
  id v10 = v7(a1, v6);
  double v11 = [v9 transformedCollationStringForString:v10];

  uint64_t v12 = (void *)*a3;
  uint64_t v13 = v8(a2, v6);
  uint64_t v14 = [v12 transformedCollationStringForString:v13];

  if (v11) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15) {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"A nil string was passed for sorting."];
  }
  uint64_t v16 = objc_msgSend(v11, "compare:options:range:locale:", v14, 64, 0, objc_msgSend(v11, "length"), *(void *)(*a3 + 8));

  return v16;
}

_UIDisplayInfoProvider *_UIDisplayInfoNullProvider()
{
  os_log_t v0 = objc_alloc_init(_UIDisplayInfoProvider);
  return v0;
}

double _UITableViewDefaultSectionCornerRadiusForTraitCollection(void *a1)
{
  return 10.0;
}

void sub_1866DEA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void UITableViewAlertForForcedLayout(void *a1)
{
  id v1 = a1;
  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UITableViewEnableAlertForForcedLayout, @"UITableViewEnableAlertForForcedLayout", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1EB2578FC&& dyld_program_sdk_at_least()&& ([(id)objc_opt_class() _isInternalTableView] & 1) == 0)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __UITableViewAlertForForcedLayout_block_invoke;
    block[3] = &unk_1E52D9F70;
    id v3 = v1;
    if (UITableViewAlertForForcedLayout_once != -1) {
      dispatch_once(&UITableViewAlertForForcedLayout_once, block);
    }
  }
}

void UITableViewAlertForLayoutOutsideViewHierarchy(void *a1)
{
  id v1 = a1;
  if (((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_UITableViewEnableAlertForLayoutOutsideViewHierarchy, @"UITableViewEnableAlertForLayoutOutsideViewHierarchy", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) != 0|| byte_1E8FD54BC)&& dyld_program_sdk_at_least()&& ([(id)objc_opt_class() _isInternalTableView] & 1) == 0)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __UITableViewAlertForLayoutOutsideViewHierarchy_block_invoke;
    block[3] = &unk_1E52D9F70;
    id v3 = v1;
    if (UITableViewAlertForLayoutOutsideViewHierarchy_once != -1) {
      dispatch_once(&UITableViewAlertForLayoutOutsideViewHierarchy_once, block);
    }
  }
}

void _tagObjectForSelector(void *a1, uint64_t a2)
{
  id v3 = a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___tagObjectForSelector_block_invoke;
  v5[3] = &unk_1E52D9CD0;
  id v6 = v3;
  uint64_t v7 = a2;
  id v4 = v3;
  +[UIView _performForcedAppearanceModifications:v5];
}

void _tagObjectForBackgroundColorIfNecessary(void *a1)
{
  id v5 = a1;
  id v1 = [v5 backgroundColor];
  if (v1)
  {
    uint64_t v2 = [v5 _constants];
    id v3 = objc_msgSend(v2, "defaultBackgroundColorForTableViewStyle:", objc_msgSend(v5, "style"));
    char v4 = [v1 isEqual:v3];

    if ((v4 & 1) == 0) {
      _tagObjectForSelector(v5, (uint64_t)sel_setBackgroundColor_);
    }
  }
}

void UITableViewAlertForCellForRowAtIndexPathAccessDuringUpdate(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (os_variant_has_internal_diagnostics())
  {
    id v3 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      int v4 = 138412290;
      id v5 = v1;
      _os_log_fault_impl(&dword_1853B0000, v3, OS_LOG_TYPE_FAULT, "Attempted to call -cellForRowAtIndexPath: on the table view while it was in the process of updating its visible cells, which is not allowed. Make a symbolic breakpoint at UITableViewAlertForCellForRowAtIndexPathAccessDuringUpdate to catch this in the debugger and see what caused this to occur. Perhaps you are trying to ask the table view for a cell from inside a table view callback about a specific row? Table view: %@", (uint8_t *)&v4, 0xCu);
    }
  }
  else
  {
    uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &UITableViewAlertForCellForRowAtIndexPathAccessDuringUpdate___s_category)+ 8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v1;
      _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Attempted to call -cellForRowAtIndexPath: on the table view while it was in the process of updating its visible cells, which is not allowed. Make a symbolic breakpoint at UITableViewAlertForCellForRowAtIndexPathAccessDuringUpdate to catch this in the debugger and see what caused this to occur. Perhaps you are trying to ask the table view for a cell from inside a table view callback about a specific row? Table view: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void UITableViewAlertForVisibleCellsAccessDuringUpdate(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (os_variant_has_internal_diagnostics())
  {
    id v3 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      int v4 = 138412290;
      id v5 = v1;
      _os_log_fault_impl(&dword_1853B0000, v3, OS_LOG_TYPE_FAULT, "Attempted to access the table view's visibleCells while they were in the process of being updated, which is not allowed. Make a symbolic breakpoint at UITableViewAlertForVisibleCellsAccessDuringUpdate to catch this in the debugger and see what caused this to occur. Perhaps you are trying to ask the table view for the visible cells from inside a table view callback about a specific row? Table view: %@", (uint8_t *)&v4, 0xCu);
    }
  }
  else
  {
    uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &UITableViewAlertForVisibleCellsAccessDuringUpdate___s_category)+ 8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v1;
      _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Attempted to access the table view's visibleCells while they were in the process of being updated, which is not allowed. Make a symbolic breakpoint at UITableViewAlertForVisibleCellsAccessDuringUpdate to catch this in the debugger and see what caused this to occur. Perhaps you are trying to ask the table view for the visible cells from inside a table view callback about a specific row? Table view: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

id _focusedCellForSelectionInteraction(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 _focusSystem];
  id v3 = [v2 focusedItem];
  if (_IsKindOfUIView((uint64_t)v3)) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  id v5 = v4;
  if (v5
    && ([v1 _visibleCellsUsingPresentationValues:1],
        uint64_t v6 = objc_claimAutoreleasedReturnValue(),
        int v7 = [v6 containsObject:v5],
        v6,
        v7))
  {
    id v8 = v5;
    uint64_t v9 = v3;
  }
  else
  {
    uint64_t v9 = 0;
  }

  return v9;
}

uint64_t _UITableViewHeadersFootersUseModernConfiguration()
{
  return (byte_1E8FD54CC != 0) & ~_UIInternalPreferenceUsesDefault(&_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration, @"TableViewHeadersFootersUseModernConfiguration", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
}

void __UITableViewAlertForForcedLayout_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("TableView", &_UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_10___s_category)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138543362;
    uint64_t v5 = v3;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Warning once only: UITableView was forced to perform an immediate layout of its visible cells and other contents, due to an API method being called on the table view while it was waiting for the next layout pass. This will cause unnecessary performance overhead, and may also cause bugs by forcing views inside the table view to load and perform layout too early. For best results, if the UITableView API must be called, you should defer it until after the table view receives -layoutSubviews during a regular layout pass. Make a symbolic breakpoint at UITableViewAlertForForcedLayout to catch this in the debugger and see which API method caused this to occur. Table view: %{public}@", (uint8_t *)&v4, 0xCu);
  }
}

void __UITableViewAlertForLayoutOutsideViewHierarchy_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("TableView", _UIInternalPreference_TableViewHeadersFootersUseModernConfiguration_block_invoke_11___s_category)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138543362;
    uint64_t v5 = v3;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Warning once only: UITableView was told to layout its visible cells and other contents without being in the view hierarchy (the table view or one of its superviews has not been added to a window). This may cause bugs by forcing views inside the table view to load and perform layout without accurate information (e.g. table view bounds, trait collection, layout margins, safe area insets, etc), and will also cause unnecessary performance overhead due to extra layout passes. Make a symbolic breakpoint at UITableViewAlertForLayoutOutsideViewHierarchy to catch this in the debugger and see what caused this to occur, so you can avoid this action altogether if possible, or defer it until the table view has been added to a window. Table view: %{public}@", (uint8_t *)&v4, 0xCu);
  }
}

void *___tagObjectForSelector_block_invoke(uint64_t a1)
{
  return _UIAppearanceTagObjectForSelector(*(void **)(a1 + 32), *(const char **)(a1 + 40), 0);
}

void sub_186706988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186707DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186708048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id supplementalItemQueue()
{
  if (qword_1EB2645B8 != -1) {
    dispatch_once(&qword_1EB2645B8, &__block_literal_global_540);
  }
  os_log_t v0 = (void *)_MergedGlobals_1253;
  return v0;
}

void __supplementalItemQueue_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UIKit.supplementalItemQueue", v2);
  id v1 = (void *)_MergedGlobals_1253;
  _MergedGlobals_1253 = (uint64_t)v0;
}

id supplementalItemMap()
{
  if (qword_1EB2645C8 != -1) {
    dispatch_once(&qword_1EB2645C8, &__block_literal_global_4_18);
  }
  dispatch_queue_t v0 = (void *)qword_1EB2645C0;
  return v0;
}

void __supplementalItemMap_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28E10] strongToWeakObjectsMapTable];
  id v1 = (void *)qword_1EB2645C0;
  qword_1EB2645C0 = v0;
}

id supplementalItem(uint64_t a1)
{
  if (!a1)
  {
    if (os_variant_has_internal_diagnostics())
    {
      uint64_t v6 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl(&dword_1853B0000, v6, OS_LOG_TYPE_FAULT, "Invalid supplemental item identifier", buf, 2u);
      }
    }
    else
    {
      uint64_t v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &supplementalItem___s_category) + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "Invalid supplemental item identifier", buf, 2u);
      }
    }
  }
  *(void *)long long buf = 0;
  uint64_t v9 = buf;
  uint64_t v10 = 0x3032000000;
  double v11 = __Block_byref_object_copy__195;
  uint64_t v12 = __Block_byref_object_dispose__195;
  id v13 = 0;
  uint64_t v2 = supplementalItemQueue();
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __supplementalItem_block_invoke;
  void v7[3] = &unk_1E52E7A10;
  void v7[4] = buf;
  void v7[5] = a1;
  dispatch_sync(v2, v7);

  id v3 = *((id *)v9 + 5);
  _Block_object_dispose(buf, 8);

  return v3;
}

void __supplementalItem_block_invoke(uint64_t a1)
{
  supplementalItemMap();
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 40)];
  uint64_t v3 = [v6 objectForKey:v2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id _UIMenuLeafPresentationSourceItemFromSender(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    if (objc_opt_respondsToSelector())
    {
      uint64_t v2 = [v1 _preferredPresentationSourceItem];
    }
    else
    {
      uint64_t v3 = _UIMenuLeafAPISenderFromSender(v1);
      uint64_t v2 = _UIPopoverPresentationControllerSourceItemUpCast(v3);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id _UIMenuLeafAPISenderFromSender(void *a1)
{
  id v1 = a1;
  if (v1 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    id v2 = [v1 _preferredSender];
  }
  else
  {
    id v2 = v1;
  }
  uint64_t v3 = v2;

  return v3;
}

void _UIMenuStateObserverableLeafRemoveObserver(void *a1, void *a2)
{
  id v7 = a1;
  id v3 = a2;
  uint64_t v4 = [v7 _getStateObservers];
  uint64_t v5 = v4;
  if (v4 && [v4 count])
  {
    uint64_t v6 = 0;
    while ((id)[v5 pointerAtIndex:v6] != v3)
    {
      if (++v6 >= (unint64_t)[v5 count]) {
        goto LABEL_10;
      }
    }
    if (v6 != 0x7FFFFFFFFFFFFFFFLL)
    {
      [v5 removePointerAtIndex:v6];
      if (![v5 count]) {
        [v7 _setStateObservers:0];
      }
    }
  }
LABEL_10:
}

void _UIMenuStateObserverableLeafWillPerformAction(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = [v1 _getStateObservers];
  id v3 = v2;
  if (v2)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    uint64_t v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          [*(id *)(*((void *)&v8 + 1) + 8 * v7++) _elementWillPerformAction:v1];
        }
        while (v5 != v7);
        uint64_t v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v5);
    }
  }
}

void sub_186714088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getFontPickerClientFontContextClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)_MergedGlobals_1254;
  uint64_t v7 = _MergedGlobals_1254;
  if (!_MergedGlobals_1254)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getFontPickerClientFontContextClass_block_invoke_0;
    v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getFontPickerClientFontContextClass_block_invoke_0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18671416C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getFontPickerClientFontContextClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB2645D8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __FontServicesLibraryCore_block_invoke_1;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E5309390;
    uint64_t v8 = 0;
    qword_1EB2645D8 = _sl_dlopen();
  }
  if (!qword_1EB2645D8)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *FontServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIFontPickerFontInfo.m", 33, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("FontPickerClientFontContext");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getFontPickerClientFontContextClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIFontPickerFontInfo.m", 34, @"Unable to find class %s", "FontPickerClientFontContext");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1254 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __FontServicesLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2645D8 = result;
  return result;
}

void sub_186716158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

CGFloat _UITableRowHeightForExtraSeparators(void *a1, void *a2, CGFloat Height)
{
  id v5 = a1;
  uint64_t v6 = a2;
  long long v7 = v6;
  if (Height <= 2.0)
  {
    uint64_t v8 = (uint64_t)-[UITableViewRowData numberOfRows]((uint64_t)v6);
    if (v8 >= 1)
    {
      v13.origin.CGFloat x = -[UITableViewRowData rectForGlobalRow:heightCanBeGuessed:](v7, v8 - 1, 1);
      double Height = CGRectGetHeight(v13);
    }
    if (Height <= 2.0)
    {
      [v5 rowHeight];
      double Height = v9;
      if (v9 <= 2.0)
      {
        long long v10 = [v5 _constants];
        [v10 defaultRowHeightForTableView:v5];
        double Height = v11;
      }
    }
  }

  return Height;
}

void _UITableInsertSubviewInContainerAboveAllCells(void *a1, void *a2)
{
  id v8 = a1;
  id v3 = a2;
  uint64_t v4 = [v8 subviews];
  uint64_t v5 = [v4 indexOfObjectWithOptions:2 passingTest:&__block_literal_global_542];

  if (v5 == 0x7FFFFFFFFFFFFFFFLL)
  {
    [v8 insertSubview:v3 atIndex:0];
  }
  else
  {
    uint64_t v6 = [v8 subviews];
    long long v7 = [v6 objectAtIndexedSubscript:v5];
    [v8 insertSubview:v3 above:v7];
  }
}

id _UITableAnimateSwipeDeletion(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  id v15 = a1;
  id v91 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a6;
  id v20 = a7;
  id v89 = a8;
  long long v21 = [v15 _scrollView];
  double v22 = [v17 superview];
  [v16 frame];
  double v24 = v23;
  double v26 = v25;
  double v28 = v27;
  double v30 = v29;
  double v31 = [v16 superview];
  objc_msgSend(v22, "convertRect:fromView:", v31, v24, v26, v28, v30);
  double v92 = v32;
  double v34 = v33;
  double v36 = v35;
  double v38 = v37;

  [v18 offset];
  double v40 = v39;
  +[UISwipeActionDeleteScanlineView lineHeight];
  double v42 = v41;
  [v16 separatorInset];
  double v44 = v43;
  double v90 = v42;
  long long v45 = [UISwipeActionDeleteScanlineView alloc];
  double v46 = -[UISwipeActionDeleteScanlineView initWithFrame:](v45, "initWithFrame:", *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
  double v88 = v19;
  [(UISwipeActionDeleteScanlineView *)v46 setDeleteLineColor:v19];
  [(UIView *)v46 setAlpha:0.0];
  -[UIView setFrame:](v46, "setFrame:", v44, v34 - v42, v36, v38 - v42);
  CGRect v87 = v22;
  _UITableInsertSubviewInContainerAboveAllCells(v22, v46);
  [v21 setUserInteractionEnabled:0];
  [v16 setAutoresizesSubviews:0];
  [v16 _setSkipsLayout:1];
  [v16 _setDeleteAnimationInProgress:1];
  [v18 velocity];
  if (v47 < 0.0) {
    double v47 = -v47;
  }
  BOOL v48 = v47 <= 0.00000011920929;
  double v49 = 0.08;
  if (!v48) {
    double v49 = 0.0;
  }
  double v95 = v49;
  double v94 = v18;
  double v50 = +[_UISwipeAnimationFactory animatorForTentativeWithOccurrence:v18];
  id v51 = +[_UISwipeAnimationFactory animatorForCollapse];
  id v52 = +[_UISwipeAnimationFactory animatorForScanlineCollapse];
  v137[0] = 0;
  v137[1] = v137;
  v137[2] = 0x2020000000;
  v137[3] = 2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___UITableAnimateSwipeDeletion_block_invoke;
  aBlock[3] = &unk_1E53093E8;
  double v136 = v137;
  id v53 = v16;
  id v132 = v53;
  id v54 = v46;
  double v133 = v54;
  id v55 = v21;
  id v134 = v55;
  id v56 = v20;
  id v135 = v56;
  double v57 = _Block_copy(aBlock);
  [v50 addCompletion:v57];
  [v51 addCompletion:v57];
  [v17 frame];
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  double v62 = v92 - v40;
  v139.origin.CGFloat x = v62;
  v139.origin.CGFloat y = v34;
  v139.size.CGFloat width = v36;
  v139.size.CGFloat height = v38;
  double Width = CGRectGetWidth(v139);
  CGRect v85 = v57;
  CGRect v86 = v56;
  double v93 = v62;
  if ([v94 direction])
  {
    v140.origin.CGFloat x = v62;
    v140.origin.CGFloat y = v34;
    v140.size.CGFloat width = v36;
    v140.size.CGFloat height = v38;
    double v64 = CGRectGetWidth(v140);
    double v65 = v36;
    double v66 = v34;
    uint64_t v67 = v59;
    double v68 = 0.0;
  }
  else
  {
    v141.origin.CGFloat x = v62;
    v141.origin.CGFloat y = v34;
    v141.size.CGFloat width = v36;
    v141.size.CGFloat height = v38;
    double v69 = CGRectGetWidth(v141);
    v142.origin.CGFloat x = v62;
    v142.origin.CGFloat y = v34;
    v142.size.CGFloat width = v36;
    v142.size.CGFloat height = v38;
    CGFloat v70 = CGRectGetWidth(v142);
    double v71 = v62;
    double v65 = v36;
    double v66 = v34;
    uint64_t v67 = v59;
    double v68 = v69 * -0.5;
    double v64 = v71 - v70;
  }
  double v72 = Width * 1.5;
  v120[0] = MEMORY[0x1E4F143A8];
  v120[1] = 3221225472;
  v120[2] = ___UITableAnimateSwipeDeletion_block_invoke_2;
  v120[3] = &unk_1E52DF190;
  id v73 = v17;
  id v121 = v73;
  double v123 = v68;
  uint64_t v124 = v67;
  double v125 = v72;
  uint64_t v126 = v61;
  id v74 = v53;
  id v122 = v74;
  double v127 = v64;
  double v128 = v66;
  double v129 = v65;
  double v130 = v38;
  [v50 addAnimations:v120];
  v106[0] = MEMORY[0x1E4F143A8];
  v106[1] = 3221225472;
  v106[2] = ___UITableAnimateSwipeDeletion_block_invoke_3;
  v106[3] = &unk_1E53003B0;
  id v84 = v15;
  id v107 = v84;
  id v75 = v91;
  id v108 = v75;
  id v76 = v55;
  id v109 = v76;
  id v77 = v73;
  id v110 = v77;
  double v112 = v68;
  uint64_t v113 = v67;
  double v114 = v72;
  uint64_t v115 = 0;
  id v78 = v74;
  id v111 = v78;
  double v116 = v64;
  double v117 = v66;
  double v118 = v65;
  uint64_t v119 = 0;
  [v51 addAnimations:v106];
  v99[0] = MEMORY[0x1E4F143A8];
  v99[1] = 3221225472;
  v99[2] = ___UITableAnimateSwipeDeletion_block_invoke_4;
  v99[3] = &unk_1E53058A0;
  CGFloat v79 = v54;
  uint64_t v100 = v79;
  double v101 = v93;
  double v102 = v66;
  double v103 = v65;
  double v104 = v38;
  double v105 = v90;
  [v52 addAnimations:v99];
  v96[0] = MEMORY[0x1E4F143A8];
  v96[1] = 3221225472;
  v96[2] = ___UITableAnimateSwipeDeletion_block_invoke_5;
  v96[3] = &unk_1E52EA988;
  CGFloat v80 = v79;
  uint64_t v97 = v80;
  id v81 = v89;
  id v98 = v81;
  [v52 addCompletion:v96];
  [v50 startAnimationAfterDelay:v95];
  [v51 startAnimationAfterDelay:v95];
  [v52 startAnimationAfterDelay:v95];
  double v82 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", v50, v51, v52, 0);

  _Block_object_dispose(v137, 8);
  return v82;
}

void sub_186716D14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_186717F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18671F214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *_getCHUDSymbol(char *__symbol)
{
  uint64_t result = (void *)_getCHUDSymbol_CHUDHandle;
  if (_getCHUDSymbol_CHUDHandle
    || (uint64_t result = dlopen("/Developer/Library/PrivateFrameworks/CHUD.framework/CHUD", 1),
        (_getCHUDSymbol_CHUDHandle = (uint64_t)result) != 0)
    || (id v3 = dlerror(), NSLog(&cfstr_CouldnTLoadChu.isa, v3), (result = (void *)_getCHUDSymbol_CHUDHandle) != 0))
  {
    uint64_t result = dlsym(result, __symbol);
    if (!result)
    {
      uint64_t v4 = dlerror();
      NSLog(&cfstr_CouldnTLoadChu_0.isa, __symbol, v4);
      return 0;
    }
  }
  return result;
}

void sub_186722194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __GetProcStatistics_block_invoke(uint64_t a1)
{
  uint64_t result = MEMORY[0x18C107F90]();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_186723900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a56, 8);
  _Block_object_dispose((const void *)(v56 - 232), 8);
  _Block_object_dispose((const void *)(v56 - 200), 8);
  _Block_object_dispose((const void *)(v56 - 168), 8);
  _Block_object_dispose((const void *)(v56 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_186723F28(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1867242B0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186724478(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186724B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *_UISceneStringFromActivationBias(unint64_t a1)
{
  if (a1 > 2) {
    return @"***undefined***";
  }
  else {
    return off_1E5309930[a1];
  }
}

id _UISceneErrorWithCode(uint64_t a1)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  if (a1 == 100)
  {
    uint64_t v3 = _UILocalizedString(@"UIWindowScene.invalidGeometryPreferencesRequest", @"Error for invalid UIWindowSceneGeometryPreferences object", @"Invalid UIWindowSceneGeometryPreferences object. Make sure you are using the correct subclass for your target system.");
  }
  else
  {
    if (a1)
    {
      uint64_t v4 = 0;
      goto LABEL_11;
    }
    if (_UISystemShellAllowsSceneRequests()) {
      id v2 = @"The application does not support multiple scenes.";
    }
    else {
      id v2 = @"The current device does not support multiple scenes.";
    }
    uint64_t v3 = _UINSLocalizedStringWithDefaultValue(v2, v2);
  }
  uint64_t v4 = (void *)v3;
  if (v3)
  {
    uint64_t v8 = *MEMORY[0x1E4F28568];
    v9[0] = v3;
    uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v5 = 0;
LABEL_12:
  uint64_t v6 = [MEMORY[0x1E4F28C58] errorWithDomain:@"UISceneErrorDomain" code:a1 userInfo:v5];

  return v6;
}

id _UISceneErrorWithCodeAndDescription(uint64_t a1, void *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v8 = *MEMORY[0x1E4F28568];
    v9[0] = v3;
    uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = [MEMORY[0x1E4F28C58] errorWithDomain:@"UISceneErrorDomain" code:a1 userInfo:v5];

  return v6;
}

id _UISceneErrorForActivationRequestOfInvalidRole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = _UILocalizedFormat(@"UISceneSessionActivation.InvalidRole", @"An error message for developers that is produced when they try to activate a scene session using an invalid role.", @"Scene session activation failed because the requested role \"%@\" is not supported.", a4, a5, a6, a7, a8, a1);
  double v9 = _UISceneErrorWithCodeAndDescription(1, v8);

  return v9;
}

uint64_t _UIContentSizeCategoryIsAccessibilityContentSizeCategory(void *a1, const char *a2)
{
  return [a1 hasPrefix:@"UICTContentSizeCategoryAccessibility"];
}

uint64_t _UIContentSizeCategoryFromString(void *a1)
{
  char v2 = 0;
  return _UIContentSizeCategoryFromStringInternal(a1, &v2);
}

NSString *_UIContentSizeCategoryMax(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1;
  if (UIContentSizeCategoryCompareToCategory(v4, v3) == NSOrderedAscending) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = v5;

  return v6;
}

NSString *_UIContentSizeCategoryClamp(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = a2;
  long long v7 = a3;
  if (v5)
  {
    NSComparisonResult v8 = UIContentSizeCategoryCompareToCategory(v6, v5);
    double v9 = v6;
    if (v8 == NSOrderedAscending)
    {
      if (UIContentSizeCategoryCompareToCategory(v5, v7) == NSOrderedAscending) {
        double v9 = v5;
      }
      else {
        double v9 = v7;
      }
    }
    long long v10 = v9;
  }
  else
  {
    long long v10 = 0;
  }

  return v10;
}

BOOL _UIContentSizeCategoryGreaterThanOrEqualTo(NSString *a1, NSString *a2)
{
  return UIContentSizeCategoryCompareToCategory(a1, a2) != NSOrderedAscending;
}

uint64_t _UISSlotContentSizeCategoryFromContentSizeCategory(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  char v2 = [&unk_1ED3F7AF0 objectForKeyedSubscript:v1];
  if (os_variant_has_internal_diagnostics())
  {
    if (v2) {
      goto LABEL_3;
    }
    uint64_t v5 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      int v7 = 138412290;
      id v8 = v1;
      _os_log_fault_impl(&dword_1853B0000, v5, OS_LOG_TYPE_FAULT, "Unexpected content size category for slot: %@", (uint8_t *)&v7, 0xCu);
    }

LABEL_11:
    uint64_t v3 = 2;
    goto LABEL_4;
  }
  if (!v2)
  {
    uint64_t v6 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UISSlotContentSizeCategoryFromContentSizeCategory___s_category)+ 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      id v8 = v1;
      _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "Unexpected content size category for slot: %@", (uint8_t *)&v7, 0xCu);
    }
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v3 = [v2 integerValue];
LABEL_4:

  return v3;
}

void sub_1867261F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1867281B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__304(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__305(uint64_t a1)
{
}

void _preferredContentSizeChangedCallback(uint64_t a1, uint64_t a2)
{
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___preferredContentSizeChangedCallback_block_invoke;
  aBlock[3] = &__block_descriptor_40_e5_v8__0l;
  void aBlock[4] = a2;
  char v2 = (void (**)(void))_Block_copy(aBlock);
  if (pthread_main_np() == 1) {
    v2[2](v2);
  }
  else {
    dispatch_async(MEMORY[0x1E4F14428], v2);
  }
}

uint64_t ___preferredContentSizeChangedCallback_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkForChanges];
}

double _labelFrame(void *a1, uint64_t a2, double a3, double a4, double a5, CGFloat a6, double a7)
{
  id v10 = a1;
  double v11 = *(double *)a2;
  double v12 = *(double *)(a2 + 8);
  [v10 setTextAlignment:*(void *)(a2 + 16)];
  objc_msgSend(v10, "textRectForBounds:limitedToNumberOfLines:", 1, v11, 0.0, v12, a6);
  double v14 = v13;
  double v16 = v15;
  v25.origin.CGFloat y = 0.0;
  v25.origin.CGFloat x = v11;
  v25.size.CGFloat width = v12;
  v25.size.CGFloat height = a6;
  double MidY = CGRectGetMidY(v25);
  id v18 = [v10 font];
  [v18 capHeight];
  double v20 = v19;

  if (*(void *)(a2 + 16) == 1)
  {
    UIRoundToScale(v11 + (v12 - v14) * 0.5, 1.0);
    double v11 = v21;
  }
  [v10 _baselineOffsetFromBottom];
  double v23 = UIRectIntegralWithScale(v11, MidY + v20 * 0.5 + v22 - v16, v14, v16, a7);

  return v23;
}

void sub_18672DF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18672EBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18672F19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186736834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867381D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _CentroidOfTouchesInView(void *a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  double v5 = *MEMORY[0x1E4F39B00];
  double v6 = *(double *)(MEMORY[0x1E4F39B00] + 8);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v7 = [v3 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    int v9 = 0;
    uint64_t v10 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v24 != v10) {
          objc_enumerationMutation(v3);
        }
        double v12 = *(double **)(*((void *)&v23 + 1) + 8 * i);
        double v13 = [v4 _window];
        double v14 = -[UITouch _locationInWindow:](v12, v13);
        double v16 = v15;
        id v17 = [v4 _window];
        objc_msgSend(v4, "convertPoint:fromView:", v17, v14, v16);
        double v19 = v18;
        double v21 = v20;

        double v5 = v5 + v19;
        double v6 = v6 + v21;
      }
      v9 += v8;
      uint64_t v8 = [v3 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v8);
    double v5 = v5 / (double)v9;
  }

  return v5;
}

uint64_t __URLFormattingLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  URLFormattingLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

uint64_t _usesiPadStyle()
{
  uint64_t v0 = +[UIDevice currentDevice];
  uint64_t v1 = [v0 userInterfaceIdiom];

  if ((v1 & 0xFFFFFFFFFFFFFFFBLL) == 1) {
    return +[UIKeyboardImpl isFloating] ^ 1;
  }
  else {
    return 0;
  }
}

void sub_18673E7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void __IsMailCompositionService_block_invoke()
{
  _UIMainBundleIdentifier();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1EB25AEB9 = [v0 isEqualToString:@"com.apple.MailCompositionService"];
}

void sub_186750A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v22 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t _canTransitionBetweenEffects(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  double v5 = [v3 compatibleDescriptors];
  if ([v5 containsObject:objc_opt_class()])
  {
    double v6 = [v4 compatibleDescriptors];
    if ([v6 containsObject:objc_opt_class()]
      && [v3 canTransitionInPlaceToEffectWithDescriptor:v4])
    {
      uint64_t v7 = [v4 canTransitionInPlaceToEffectWithDescriptor:v3];
    }
    else
    {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_18675128C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_186752234(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18675449C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  _Block_object_dispose((const void *)(v21 - 192), 8);
  _Block_object_dispose((const void *)(v21 - 160), 8);
  _Block_object_dispose((const void *)(v21 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1867555D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186755C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186756260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _UIContextMenuActionsViewWidth(void *a1, int a2, int a3, int a4, uint64_t a5)
{
  id v9 = a1;
  uint64_t v10 = _UIContextMenuGetPlatformMetrics(a5);
  [v10 defaultMenuWidth];
  double v12 = v11;
  double v13 = 0.0;
  double v14 = 0.0;
  if ([v10 leadingIndentationContributesToWidth] && a2)
  {
    double v15 = _UIContextMenuGetPlatformMetrics(a5);
    [v15 leadingIndentationWidth];
    double v14 = v16;
  }
  double v17 = v12 + v14;
  if (a3)
  {
    double v18 = _UIContextMenuGetPlatformMetrics(a5);
    [v18 menuGutterWidth];
    double v13 = v19;
  }
  double v20 = v17 + v13;
  if (a4)
  {
    [v10 largePaletteWidthExtension];
    double v20 = v20 + v21;
  }
  if (v9)
  {
    uint64_t v22 = [v9 traitCollection];
    long long v23 = [v22 preferredContentSizeCategory];
    IsAccessibilityContentSizeCategorCGFloat y = _UIContentSizeCategoryIsAccessibilityContentSizeCategory(v23, v24);

    if (IsAccessibilityContentSizeCategory)
    {
      [v9 bounds];
      double Width = CGRectGetWidth(v35);
      double v27 = _UIContextMenuDefaultContentSpacing(v9);
      double v28 = Width - (v27 + v27);
      double v29 = [v9 traitCollection];
      uint64_t v30 = [v29 userInterfaceIdiom];

      if (v30)
      {
        double v20 = 343.0;
      }
      else
      {
        double v31 = [v9 _screen];
        [v31 _referenceBounds];
        double v32 = CGRectGetWidth(v36);
        double v33 = _UIContextMenuDefaultContentSpacing(v9);
        double v20 = v32 - (v33 + v33);
      }
      if (v28 < v20) {
        double v20 = v28;
      }
    }
  }

  return v20;
}

void sub_186758BF0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_186758D30(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_186758E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_186758F18(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_186758FC0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18675A1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose((const void *)(v44 - 216), 8);
  _Block_object_dispose((const void *)(v44 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_18675A660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UIContextMenuGetFromPreview(void *a1, void *a2, double *a3, _OWORD *a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  [v10 size];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = v11;
  a2[3] = v12;
  double v13 = [v10 target];
  [v13 center];
  double v15 = v14;
  double v17 = v16;
  double v18 = [v10 target];
  double v19 = [v18 container];
  double v20 = _UIContextMenuConvertPointBetweenViews(v19, v9, v15, v17);
  uint64_t v22 = v21;

  *a3 = v20;
  *((void *)a3 + 1) = v22;
  a3[2] = 0.0;
  long long v23 = [v10 target];

  if (v23)
  {
    [v23 transform];
  }
  else
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
  }
  *a4 = v24;
  a4[1] = v25;
  a4[2] = v26;
}

void sub_18675E858(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18675F184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

_UIPortalView *_UIDocumentUnavailablePortalViewForAnimationInfo(void *a1)
{
  uint64_t v2 = [_UIPortalView alloc];
  [a1 sourceFrame];
  uint64_t v3 = -[_UIPortalView initWithFrame:](v2, "initWithFrame:");
  uint64_t v4 = [a1 sourceContextId];
  double v5 = [(_UIPortalView *)v3 portalLayer];
  [v5 setSourceContextId:v4];

  uint64_t v6 = [a1 sourceLayerRenderId];
  uint64_t v7 = [(_UIPortalView *)v3 portalLayer];
  [v7 setSourceLayerRenderId:v6];

  uint64_t v8 = [(_UIPortalView *)v3 portalLayer];
  [v8 setHidesSourceLayer:1];

  [(_UIPortalView *)v3 setName:@"Document"];
  [(_UIPortalView *)v3 setAllowsBackdropGroups:1];
  [(_UIPortalView *)v3 setAllowsHitTesting:1];
  [(_UIPortalView *)v3 setForwardsClientHitTestingToSourceView:1];
  id v9 = [a1 sourcePath];
  LODWORD(v7) = [v9 _isRoundedRect];

  if (v7)
  {
    id v10 = [a1 sourcePath];
    [v10 _cornerRadius];
    double v12 = v11;
    double v13 = [(UIView *)v3 layer];
    [v13 setCornerRadius:v12];

    double v14 = [a1 sourcePath];
    int v15 = [v14 _hasContinuousCorners];
    double v16 = (uint64_t *)MEMORY[0x1E4F39EA8];
    if (!v15) {
      double v16 = (uint64_t *)MEMORY[0x1E4F39EA0];
    }
    uint64_t v17 = *v16;
    double v18 = [(UIView *)v3 layer];
    [v18 setCornerCurve:v17];

    double v19 = [a1 sourcePath];
    uint64_t v20 = [v19 _cornerMask];
    uint64_t v21 = [(UIView *)v3 layer];
    [v21 setMaskedCorners:v20];
  }
  else
  {
    double v19 = [MEMORY[0x1E4F39C88] layer];
    id v22 = [a1 sourcePath];
    objc_msgSend(v19, "setPath:", objc_msgSend(v22, "CGPath"));

    uint64_t v21 = [(UIView *)v3 layer];
    [v21 setMask:v19];
  }

  return v3;
}

id _UIDocumentUnavailableBrowserViewController(uint64_t a1)
{
  if (a1) {
    uint64_t v2 = *(void **)(a1 + 48);
  }
  else {
    uint64_t v2 = 0;
  }
  id v3 = v2;
  uint64_t v11 = 0;
  double v12 = &v11;
  uint64_t v13 = 0x2050000000;
  uint64_t v4 = (void *)_MergedGlobals_71;
  uint64_t v14 = _MergedGlobals_71;
  if (!_MergedGlobals_71)
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = __getUIDocumentBrowserViewControllerClass_block_invoke_1;
    v10[3] = &unk_1E52D9900;
    void v10[4] = &v11;
    __getUIDocumentBrowserViewControllerClass_block_invoke_1((uint64_t)v10);
    uint64_t v4 = (void *)v12[3];
  }
  id v5 = v4;
  _Block_object_dispose(&v11, 8);
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    if (a1) {
      uint64_t v7 = *(void **)(a1 + 48);
    }
    else {
      uint64_t v7 = 0;
    }
    id v8 = v7;
  }
  else
  {
    id v8 = 0;
  }
  return v8;
}

void sub_18675FD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id ___uip_documentBrowser_sendAnalyticsEvent_block_invoke(uint64_t a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = @"eventType";
  uint64_t v1 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 32)];
  v5[0] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:&v4 count:1];

  return v2;
}

Class __getUIDocumentBrowserViewControllerClass_block_invoke_1(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25BA10)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __DocumentManagerLibraryCore_block_invoke_2;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530A590;
    uint64_t v8 = 0;
    qword_1EB25BA10 = _sl_dlopen();
  }
  if (!qword_1EB25BA10)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *DocumentManagerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIDocumentLaunchViewController.m", 36, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("UIDocumentBrowserViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getUIDocumentBrowserViewControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIDocumentLaunchViewController.m", 38, @"Unable to find class %s", "UIDocumentBrowserViewController");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_71 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __DocumentManagerLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25BA10 = result;
  return result;
}

void sub_186762098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getRVItemClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB2647B8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __RevealCoreLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530A5A8;
    uint64_t v8 = 0;
    qword_1EB2647B8 = _sl_dlopen();
  }
  if (!qword_1EB2647B8)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *RevealCoreLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIRevealInteraction.m", 41, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("RVItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getRVItemClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIRevealInteraction.m", 42, @"Unable to find class %s", "RVItem");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1264 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __RevealCoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2647B8 = result;
  return result;
}

id createRVItem(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  if (a2 == 0x7FFFFFFFFFFFFFFFLL || a2 + a3 > (unint64_t)[v5 length]) {
    long long v7 = 0;
  }
  else {
    long long v7 = objc_msgSend(objc_alloc((Class)getRVItemClass()), "initWithText:selectedRange:", v6, a2, a3);
  }

  return v7;
}

void sub_18676326C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186763D44(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id getRVItemClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1EB25CFA0;
  uint64_t v7 = qword_1EB25CFA0;
  if (!qword_1EB25CFA0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getRVItemClass_block_invoke_0;
    v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getRVItemClass_block_invoke_0((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186764294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getDDRevealBridgeClass_block_invoke(uint64_t a1)
{
  DataDetectorsUILibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("DDRevealBridge");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    _MergedGlobals_3_25 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getDDRevealBridgeClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UITextContextMenuInteraction.m", 54, @"Unable to find class %s", "DDRevealBridge");

    __break(1u);
  }
}

void *DataDetectorsUILibrary_0()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!DataDetectorsUILibraryCore_frameworkLibrary_0)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    _OWORD v4[3] = __DataDetectorsUILibraryCore_block_invoke_1;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E530A780;
    uint64_t v6 = 0;
    DataDetectorsUILibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  id v0 = (void *)DataDetectorsUILibraryCore_frameworkLibrary_0;
  if (!DataDetectorsUILibraryCore_frameworkLibrary_0)
  {
    id v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *DataDetectorsUILibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UITextContextMenuInteraction.m", 52, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __DataDetectorsUILibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  DataDetectorsUILibraryCore_frameworkLibrary_0 = result;
  return result;
}

void *__getkDataDetectorsSourceRectKeySymbolLoc_block_invoke_0(uint64_t a1)
{
  uint64_t v2 = DataDetectorsUILibrary_0();
  uint64_t result = dlsym(v2, "kDataDetectorsSourceRectKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CF80 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getkDDContextNoRoomForSubtitlesKeySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = DataDetectorsUILibrary_0();
  uint64_t result = dlsym(v2, "kDDContextNoRoomForSubtitlesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25CF88 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBETextDocumentRequestClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25CF98)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __BrowserEngineKitLibraryCore_block_invoke_1;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530A798;
    uint64_t v8 = 0;
    qword_1EB25CF98 = _sl_dlopen();
  }
  if (!qword_1EB25CF98)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *BrowserEngineKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UITextContextMenuInteraction.m", 43, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("BETextDocumentRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getBETextDocumentRequestClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UITextContextMenuInteraction.m", 44, @"Unable to find class %s", "BETextDocumentRequest");

LABEL_10:
    __break(1u);
  }
  qword_1EB25CF90 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __BrowserEngineKitLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25CF98 = result;
  return result;
}

Class __getRVItemClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25CFA8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __RevealCoreLibraryCore_block_invoke_0;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530A7B0;
    uint64_t v8 = 0;
    qword_1EB25CFA8 = _sl_dlopen();
  }
  if (!qword_1EB25CFA8)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *RevealCoreLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UITextContextMenuInteraction.m", 58, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("RVItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getRVItemClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UITextContextMenuInteraction.m", 59, @"Unable to find class %s", "RVItem");

LABEL_10:
    __break(1u);
  }
  qword_1EB25CFA0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __RevealCoreLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25CFA8 = result;
  return result;
}

void sub_1867685C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void *__getPKScribbleInteractionInViewSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB2647D8)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    void v5[2] = (void *)3221225472;
    v5[3] = __PencilKitLibraryCore_block_invoke_1;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E530A838;
    uint64_t v7 = 0;
    qword_1EB2647D8 = _sl_dlopen();
  }
  uint64_t v2 = (void *)qword_1EB2647D8;
  if (!qword_1EB2647D8)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *PencilKitLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UITextInteraction.m", 58, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "PKScribbleInteractionInView");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  off_1EB2647D0 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __PencilKitLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2647D8 = result;
  return result;
}

id getDDContextMenuConfigurationClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)_MergedGlobals_11_13;
  uint64_t v7 = _MergedGlobals_11_13;
  if (!_MergedGlobals_11_13)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getDDContextMenuConfigurationClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getDDContextMenuConfigurationClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18676AB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getDDContextMenuConfigurationClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25D448)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __DataDetectorsUILibraryCore_block_invoke_2;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530A850;
    uint64_t v8 = 0;
    qword_1EB25D448 = _sl_dlopen();
  }
  if (!qword_1EB25D448)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *DataDetectorsUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UITextLinkInteraction.m", 38, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("DDContextMenuConfiguration");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getDDContextMenuConfigurationClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UITextLinkInteraction.m", 39, @"Unable to find class %s", "DDContextMenuConfiguration");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_11_13 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __DataDetectorsUILibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D448 = result;
  return result;
}

double _UIGetTextRefinement_AllowableMovement()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  double result = 8.0;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    int v2 = _UIInternalPreference_TextRefinement_AllowableMovement;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_TextRefinement_AllowableMovement)
    {
      while (v0 >= v2)
      {
        _UIInternalPreferenceSync(v0, &_UIInternalPreference_TextRefinement_AllowableMovement, @"TextRefinement_AllowableMovement", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
        int v2 = _UIInternalPreference_TextRefinement_AllowableMovement;
        if (v0 == _UIInternalPreference_TextRefinement_AllowableMovement) {
          return 8.0;
        }
      }
      return *(double *)&qword_1EB256E78;
    }
  }
  return result;
}

void sub_1867723D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_186772688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867737B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186777F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1867782D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

id _UIKeyboardLayoutGuideLogger()
{
  if (qword_1EB25CFC8 != -1) {
    dispatch_once(&qword_1EB25CFC8, &__block_literal_global_280);
  }
  int v0 = (void *)_MergedGlobals_3_27;
  return v0;
}

BOOL UIAssistantBarStyleIsCompact(uint64_t a1)
{
  return (unint64_t)(a1 - 2) < 3;
}

id _getResponderForEditing()
{
  int v0 = +[UIKeyboardImpl activeInstance];
  uint64_t v1 = [v0 delegateAsResponder];
  int v2 = [v1 _responderForEditing];

  return v2;
}

id _getStylingDictionaryForResponder(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector())
  {
    int v2 = [v1 selectedTextRange];
    id v3 = [v2 start];

    if (v3)
    {
      uint64_t v4 = objc_msgSend(v1, "textStylingAtPosition:inDirection:", v3, objc_msgSend(v1, "selectionAffinity"));
    }
    else
    {
      uint64_t v4 = (void *)MEMORY[0x1E4F1CC08];
    }
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CC08];
  }

  return v4;
}

id getPKTextInputInteractionClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)qword_1EB25D118;
  uint64_t v7 = qword_1EB25D118;
  if (!qword_1EB25D118)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getPKTextInputInteractionClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getPKTextInputInteractionClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18678398C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id TIGetTypoTrackerButtonValue_0()
{
  if (TIGetTypoTrackerButtonValue_onceToken_0 != -1) {
    dispatch_once(&TIGetTypoTrackerButtonValue_onceToken_0, &__block_literal_global_504_0);
  }
  int v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  id v1 = [v0 valueForPreferenceKey:@"TypoTrackerButton"];

  return v1;
}

uint64_t _areBarButtonGroupsBasicallyEqualToSystemDefaults(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3 == v4) {
    goto LABEL_12;
  }
  uint64_t v5 = [v3 count];
  if (v5 != [v4 count])
  {
    uint64_t v17 = 0;
    goto LABEL_15;
  }
  if (![v3 count])
  {
LABEL_12:
    uint64_t v17 = 1;
  }
  else
  {
    unint64_t v6 = 0;
    id v19 = v4;
    while (1)
    {
      uint64_t v7 = objc_msgSend(v3, "objectAtIndexedSubscript:", v6, v19);
      uint64_t v8 = [v4 objectAtIndexedSubscript:v6];
      uint64_t v20 = v7;
      uint64_t v9 = [v7 barButtonItems];
      id v10 = [v8 barButtonItems];
      uint64_t v11 = [v9 count];
      if (v11 != [v10 count]) {
        break;
      }
      if ([v9 count])
      {
        uint64_t v12 = 0;
        do
        {
          uint64_t v13 = [v9 objectAtIndexedSubscript:v12];
          uint64_t v14 = [v10 objectAtIndexedSubscript:v12];
          uint64_t v15 = [v13 action];
          uint64_t v16 = [v14 action];

          if (v15 != v16) {
            goto LABEL_14;
          }
        }
        while (++v12 < (unint64_t)[v9 count]);
      }

      ++v6;
      uint64_t v17 = 1;
      id v4 = v19;
      if (v6 >= [v3 count]) {
        goto LABEL_15;
      }
    }
LABEL_14:

    uint64_t v17 = 0;
    id v4 = v19;
  }
LABEL_15:

  return v17;
}

Class __getPKTextInputInteractionClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25D120)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __PencilKitLibraryCore_block_invoke_2;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530AB08;
    uint64_t v8 = 0;
    qword_1EB25D120 = _sl_dlopen();
  }
  if (!qword_1EB25D120)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *PencilKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIAssistantBarButtonItemProvider.m", 63, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PKTextInputInteraction");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getPKTextInputInteractionClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIAssistantBarButtonItemProvider.m", 64, @"Unable to find class %s", "PKTextInputInteraction");

LABEL_10:
    __break(1u);
  }
  qword_1EB25D118 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PencilKitLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D120 = result;
  return result;
}

void __TIGetTypoTrackerButtonValue_block_invoke_0()
{
  id v0 = [MEMORY[0x1E4FAE3D8] sharedPreferencesController];
  [v0 _configureKey:@"TypoTrackerButton" domain:@"com.apple.keyboard" defaultValue:MEMORY[0x1E4F1CC38]];
}

void sub_18678CA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPKTextInputInteractionClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25D5A0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __PencilKitLibraryCore_block_invoke_3;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530AB90;
    uint64_t v8 = 0;
    qword_1EB25D5A0 = _sl_dlopen();
  }
  if (!qword_1EB25D5A0)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *PencilKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIEditingOverlayViewController.m", 31, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PKTextInputInteraction");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getPKTextInputInteractionClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIEditingOverlayViewController.m", 32, @"Unable to find class %s", "PKTextInputInteraction");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_7_7 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PencilKitLibraryCore_block_invoke_3()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D5A0 = result;
  return result;
}

double pixelAlignedRectForRect(void *a1)
{
  id v1 = a1;
  UIRoundToViewScale(v1);
  double v3 = v2;
  UIRoundToViewScale(v1);
  UIRoundToViewScale(v1);
  UIRoundToViewScale(v1);

  return v3;
}

void sub_1867915D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_186799DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t TISmartSelectionOptionFromUISmartSelectionOption(uint64_t a1)
{
  if (a1 > 31)
  {
    if (a1 == 511) {
      uint64_t v1 = 511;
    }
    else {
      uint64_t v1 = 0;
    }
    if (a1 == 256) {
      uint64_t v1 = 256;
    }
    if (a1 == 128) {
      uint64_t v1 = 128;
    }
    if (a1 == 64) {
      uint64_t v2 = 64;
    }
    else {
      uint64_t v2 = 0;
    }
    if (a1 == 32) {
      uint64_t v2 = 32;
    }
    if (a1 <= 127) {
      return v2;
    }
  }
  else
  {
    uint64_t v1 = 0;
    switch(a1)
    {
      case 1:
      case 2:
      case 4:
      case 8:
        uint64_t v1 = a1;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        return v1;
      default:
        if (a1 == 16) {
          uint64_t v1 = 16;
        }
        else {
          uint64_t v1 = 0;
        }
        break;
    }
  }
  return v1;
}

uint64_t TISmartSelectionOptionsFromUISmartSelectionOptions(unint64_t a1)
{
  int v2 = 0;
  uint64_t v3 = 0;
  do
    v3 |= TISmartSelectionOptionFromUISmartSelectionOption((1 << v2++) & a1);
  while (v2 != 64);
  return v3;
}

void sub_1867A588C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t gestureTypeForGestureRecognizer(void *a1, char a2)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if ((unint64_t)[a1 numberOfTouchesRequired] <= 1)
    {
      if ((unint64_t)[a1 numberOfTapsRequired] <= 1) {
        return 1;
      }
      else {
        return 3;
      }
    }
    else
    {
      return 10;
    }
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v5 = [a1 tapCount];
      if (v5 == 3)
      {
        return 9;
      }
      else if (v5 == 2 || v5 == 1 && (a2 & 1) == 0)
      {
        return 8;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        return 2;
      }
      else {
        return 0;
      }
    }
  }
}

double _UIGetTextRefinement_NearCaretDistance()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1) {
    return 40.0;
  }
  int v2 = _UIInternalPreference_TextRefinement_NearCaretDistance;
  if (_UIInternalPreferencesRevisionVar == _UIInternalPreference_TextRefinement_NearCaretDistance) {
    return 40.0;
  }
  while (v0 >= v2)
  {
    _UIInternalPreferenceSync(v0, &_UIInternalPreference_TextRefinement_NearCaretDistance, @"TextRefinement_NearCaretDistance", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
    int v2 = _UIInternalPreference_TextRefinement_NearCaretDistance;
    double result = 40.0;
    if (v0 == _UIInternalPreference_TextRefinement_NearCaretDistance) {
      return result;
    }
  }
  return *(double *)&qword_1E8FD4F60;
}

BOOL _UITraitTokenSetIsNULL(uint64_t a1)
{
  if (*(void *)a1) {
    return 0;
  }
  int8x16_t v2 = vorrq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 24));
  return vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) == 0;
}

id _UITraitTokenSetRetain(id *a1)
{
  id result = *a1;
  if (result) {
    return result;
  }
  return result;
}

void _UITraitTokenSetRelease(void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
}
  }

uint64_t _UITraitTokenSetHash(uint64_t a1)
{
  if (*(void *)a1) {
    return [*(id *)a1 hash];
  }
  else {
    return vaddvq_s64((int64x2_t)vpadalq_u32(vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(a1 + 8))))), vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(a1 + 24))))));
  }
}

__n128 _UITraitTokenSetCopy(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = [*(id *)a1 mutableCopy];
  __n128 result = *(__n128 *)(a1 + 24);
  *(_OWORD *)(a2 + _Block_object_dispose(&STACK[0x2F8], 8) = *(_OWORD *)(a1 + 8);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void _UICollectionViewListHeaderFooterCommonInit(void *a1)
{
  uint64_t v1 = a1;
  [v1 _updateConstants];
  [v1 setEdgesPreservingSuperviewLayoutMargins:10];
  objc_msgSend(v1, "setEdgesInsettingLayoutMarginsFromSafeArea:", objc_msgSend(v1, "edgesInsettingLayoutMarginsFromSafeArea") & 0xA);
  [v1[66] setEdgesPreservingSuperviewLayoutMargins:15];
  *((_WORD *)v1 + 246) |= 8u;
  *((_WORD *)v1 + 246) |= 0x80u;
  *((_WORD *)v1 + 246) |= 0x100u;
}

void sub_1867B8F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _UITextFieldCanvasViewCommonInit(void *a1)
{
  id v2 = a1;
  [v2 setTilingEnabled:0];
  [v2 setUserInteractionEnabled:0];
  uint64_t v1 = +[UIColor clearColor];
  [v2 setBackgroundColor:v1];

  [v2 setContentMode:3];
  [v2 setOpaque:0];
}

id _UITextAttributesAtIndexWithDirection(void *a1, unint64_t a2, uint64_t a3)
{
  id v5 = a1;
  unint64_t v6 = v5;
  if (a3 != 1)
  {
    if (a3 || [v5 length] <= a2) {
      goto LABEL_10;
    }
LABEL_9:
    long long v7 = [v6 attributesAtIndex:a2 effectiveRange:0];
    goto LABEL_11;
  }
  if ([v5 length])
  {
    if (a2) {
      --a2;
    }
    else {
      a2 = 0;
    }
    goto LABEL_9;
  }
LABEL_10:
  long long v7 = 0;
LABEL_11:

  return v7;
}

void sub_1867C00BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  objc_sync_exit(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1867C03B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867C15F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1867C2B94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1867C2C9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1867C2EE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1867C3090(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double _UIHIDPathSynchronizationFilterConfigurationDefault()
{
  if (_UIInternalPreferenceUsesDefault_1((int *)&_MergedGlobals_920, @"HIDPathSynchronizationMinTimeScale"))double v0 = 1.02; {
  else
  }
    double v0 = *(double *)&qword_1EB257950;
  _UIInternalPreferenceUsesDefault_1((int *)algn_1EB257958, @"HIDPathSynchronizationMaxTimeScale");
  _UIInternalPreferenceUsesDefault_1((int *)algn_1EB257968, @"HIDPathSynchronizationPeakThreshold");
  return v0;
}

void sub_1867C4EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getUIDocumentBrowserViewControllerClass_block_invoke_2(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB264850)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __DocumentManagerLibraryCore_block_invoke_3;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530B150;
    uint64_t v8 = 0;
    qword_1EB264850 = _sl_dlopen();
  }
  if (!qword_1EB264850)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v4 = [NSString stringWithUTF8String:"void *DocumentManagerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIDocumentViewControllerLaunchOptions.m", 30, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("UIDocumentBrowserViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getUIDocumentBrowserViewControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIDocumentViewControllerLaunchOptions.m", 32, @"Unable to find class %s", "UIDocumentBrowserViewController");

LABEL_10:
    __break(1u);
  }
  qword_1EB264848 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __DocumentManagerLibraryCore_block_invoke_3()
{
  uint64_t result = _sl_dlopen();
  qword_1EB264850 = result;
  return result;
}

void sub_1867CD324(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1867CD48C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1867CFF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867D5E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _GetTextFieldClearButtonWithCustomColor(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return _GetTextFieldClearButtonWithCustomColorContrastSettings(a1, a2, a3, a4, a5, 1, 0);
}

id _GetTextFieldClearButton(void *a1, uint64_t a2)
{
  id v4 = +[UITraitCollection _currentTraitCollectionWithUnmarkedFallback]();
  id v5 = _GetTextFieldClearButtonWithCustomColorContrastSettings(a1, a2, 0, 0, v4, 1, 0);

  return v5;
}

void _recursivelyLayoutUIButtons(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v1 = objc_msgSend(a1, "subviews", 0);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v8;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v1);
        }
        unint64_t v6 = *(void **)(*((void *)&v7 + 1) + 8 * v5);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [v6 setNeedsLayout];
        }
        else {
          _recursivelyLayoutUIButtons(v6);
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v3);
  }
}

id getUndoActionNameTyping()
{
  if (qword_1EB264860 != -1) {
    dispatch_once(&qword_1EB264860, &__block_literal_global_578);
  }
  double v0 = (void *)_MergedGlobals_1271;
  return v0;
}

void __getUndoActionNameTyping_block_invoke()
{
  _UIKitBundle();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v0 = [v2 localizedStringForKey:@"Typing" value:@"Typing" table:@"Localizable"];
  uint64_t v1 = (void *)_MergedGlobals_1271;
  _MergedGlobals_1271 = v0;
}

void sub_1867E45A0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1867E50EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1867E5B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867E6050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867E8A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867E8E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867E96C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1867EA364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1867EA864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867EB4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_1867EB73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867EB8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867ED868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v16 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1867EE5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867EEA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1867EF480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1867EF6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1867EF958(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1867EFC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1867F0258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1867F095C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867F19F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867F218C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1867F40D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1867F4A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1867F4C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1867F4F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t UITextGranularityFromNSTextSelectionGranularity(unint64_t a1)
{
  if (a1 > 4) {
    return -1;
  }
  else {
    return qword_186B9D928[a1];
  }
}

uint64_t UITextGranularityToNSTextSelectionGranularity(unint64_t a1)
{
  if (a1 > 5) {
    return -1;
  }
  else {
    return qword_186B9D950[a1];
  }
}

uint64_t UITextDirectionToNSTextSelectionAffinity(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 3) {
    return -1;
  }
  else {
    return qword_186B9D980[a1 - 2];
  }
}

BOOL UITextStorageDirectionToNSTextSelectionAffinity(uint64_t a1)
{
  return a1 == 0;
}

BOOL UITextStorageDirectionFromNSTextSelectionAffinity(uint64_t a1)
{
  return a1 == 0;
}

__CFString *UITextStorageDirectionToString(uint64_t a1)
{
  uint64_t v1 = @"?";
  if (a1 == 1) {
    uint64_t v1 = @"backward";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"forward";
  }
}

void sub_1867F984C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1867FA0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UISceneOpenURLContextsFromActionsSessionAndTransitionContext(void *a1, void *a2, void *a3, void **a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v38 = a1;
  id v35 = a2;
  id v37 = a3;
  *a4 = (id)objc_opt_new();
  unint64_t v6 = v37;
  if ([v37 isUISubclass])
  {
    double v39 = [v37 payload];
    unint64_t v6 = v37;
  }
  else
  {
    double v39 = 0;
  }
  long long v7 = [v6 originatingProcess];
  double v40 = +[UISceneOpenURLOptions _optionsFromPayload:v39 sourceProcessHandle:v7];

  CGRect v36 = [v38 objectsPassingTest:&__block_literal_global_580];
  if (![v36 count])
  {
    id v14 = 0;
    goto LABEL_45;
  }
  double v41 = [v39 objectForKey:*MEMORY[0x1E4F22340]];
  if (v41)
  {
    if ([v40 openInPlace])
    {
      id v8 = v41;
      id v9 = v40;
      id v10 = v8;
      double v49 = 0;
      uint64_t v50 = 0;
      id v51 = &v50;
      uint64_t v52 = 0x2020000000;
      uint64_t v11 = (void (*)(id, void **))off_1EB2648B8;
      id v53 = off_1EB2648B8;
      if (!off_1EB2648B8)
      {
        *(void *)aBlocuint64_t k = MEMORY[0x1E4F143A8];
        *(void *)&aBlock[8] = 3221225472;
        *(void *)&aBlock[16] = __getFPCreateDocumentURLFromBookmarkableStringSymbolLoc_block_invoke_0;
        uint64_t v56 = &unk_1E52D9900;
        double v57 = &v50;
        __getFPCreateDocumentURLFromBookmarkableStringSymbolLoc_block_invoke_0(aBlock);
        uint64_t v11 = (void (*)(id, void **))v51[3];
      }
      _Block_object_dispose(&v50, 8);
      if (!v11)
      {
        double v33 = [MEMORY[0x1E4F28B00] currentHandler];
        double v34 = objc_msgSend(NSString, "stringWithUTF8String:", "CFURLRef _FPCreateDocumentURLFromBookmarkableString(CFStringRef, CFErrorRef *)");
        objc_msgSend(v33, "handleFailureInFunction:file:lineNumber:description:", v34, @"_UISceneOpenURLBSActionsHandler.m", 33, @"%s", dlerror());

        __break(1u);
      }
      uint64_t v12 = v11(v10, &v49);
      if (v12)
      {

        uint64_t v13 = [[UIOpenURLContext alloc] initWithURL:v12 options:v9];
      }
      else
      {
        uint64_t v21 = v49;
        id v22 = *(NSObject **)(__UILogGetCategoryCachedImpl("Application", &_MergedGlobals_1273) + 8);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)aBlocuint64_t k = 138412546;
          *(void *)&void aBlock[4] = v10;
          *(_WORD *)&aBlock[12] = 2112;
          *(void *)&aBlock[14] = v21;
          _os_log_impl(&dword_1853B0000, v22, OS_LOG_TYPE_ERROR, "Error resolving bookmark; bookmark: %@; error: %@",
            aBlock,
            0x16u);
        }

        uint64_t v13 = 0;
      }

      if (v13)
      {
        BOOL v48 = 0;
        __119___UISceneCloudKitShareMetadataBSActionHandler__launchOptionsFromActions_forFBSScene_uiSceneSession_transitionContext___block_invoke(&v48, (uint64_t)v13);
        uint64_t v20 = v48;
      }
      else
      {
        uint64_t v20 = 0;
      }

      goto LABEL_25;
    }
    id v15 = v41;
    uint64_t v16 = (uint64_t *)v35;
    id v17 = v40;
    *(void *)aBlocuint64_t k = MEMORY[0x1E4F143A8];
    *(void *)&aBlock[8] = 3221225472;
    *(void *)&aBlock[16] = ___UISceneScheduleNonOpenInPlaceURLResolution_block_invoke;
    uint64_t v56 = &unk_1E52DCB30;
    double v57 = v16;
    id v58 = v15;
    id v59 = v17;
    uint64_t v18 = (void (**)(void))_Block_copy(aBlock);
    uint64_t v19 = [v16 scene];

    if (v19) {
      v18[2](v18);
    }
    else {
      dispatch_async(MEMORY[0x1E4F14428], v18);
    }
  }
  uint64_t v20 = 0;
LABEL_25:
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v23 = v38;
  uint64_t v24 = [v23 countByEnumeratingWithState:&v44 objects:v54 count:16];
  if (!v24) {
    goto LABEL_44;
  }
  uint64_t v25 = *(void *)v45;
  do
  {
    for (uint64_t i = 0; i != v24; ++i)
    {
      if (*(void *)v45 != v25) {
        objc_enumerationMutation(v23);
      }
      uint64_t v27 = *(void **)(*((void *)&v44 + 1) + 8 * i);
      if ([v27 UIActionType] == 1)
      {
        double v28 = [v27 url];
        if (([(id)UIApp _shouldHandleTestURL:v28] & 1) == 0
          && ([v28 isInternalUIKitURL] & 1) == 0)
        {
          __119___UISceneCloudKitShareMetadataBSActionHandler__launchOptionsFromActions_forFBSScene_uiSceneSession_transitionContext___block_invoke(a4, (uint64_t)v27);
          if (v41)
          {
            if ((unint64_t)[*a4 count] >= 2)
            {
              id v29 = [MEMORY[0x1E4F28B00] currentHandler];
              objc_msgSend(NSString, "stringWithUTF8String:", "NSSet<UIOpenURLContext *> *_UISceneOpenURLContextsFromActionsSessionAndTransitionContext(NSSet<BSAction *> *__strong, UISceneSession *__strong, FBSSceneTransitionContext *__strong, NSMutableSet<BSAction *> *__autoreleasing *)");
              uint64_t v30 = (UIOpenURLContext *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "handleFailureInFunction:file:lineNumber:description:", v30, @"_UISceneOpenURLBSActionsHandler.m", 197, @"bookmarkString = %@; handledActions = %@",
                v41,
                *a4);
              goto LABEL_40;
            }
          }
          else
          {
            if ((objc_opt_respondsToSelector() & 1) == 0
              || ([v27 localOpenURLOptions], (id v29 = (id)objc_claimAutoreleasedReturnValue()) == 0))
            {
              id v29 = v40;
            }
            uint64_t v30 = [[UIOpenURLContext alloc] initWithURL:v28 options:v29];
            double v43 = v20;
            __119___UISceneCloudKitShareMetadataBSActionHandler__launchOptionsFromActions_forFBSScene_uiSceneSession_transitionContext___block_invoke(&v43, (uint64_t)v30);
            double v31 = v43;

            uint64_t v20 = v31;
LABEL_40:
          }
        }

        continue;
      }
    }
    uint64_t v24 = [v23 countByEnumeratingWithState:&v44 objects:v54 count:16];
  }
  while (v24);
LABEL_44:

  id v14 = v20;
LABEL_45:

  return v14;
}

void sub_1867FB9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void _UISceneSendOpenURLActionCallbackForScene(void *a1, void *a2)
{
  id v9 = a1;
  id v3 = a2;
  uint64_t v4 = [v3 delegate];
  char v5 = objc_opt_respondsToSelector();

  unint64_t v6 = [v3 delegate];
  long long v7 = v6;
  if (v5)
  {
    [v6 scene:v3 openURLContexts:v9];
  }
  else
  {
    char v8 = objc_opt_respondsToSelector();

    if ((v8 & 1) == 0) {
      goto LABEL_6;
    }
    long long v7 = [v3 delegate];
    [v7 _canvas:v3 openURLContexts:v9];
  }

LABEL_6:
}

void sub_1867FBE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void *__getFPCreateDocumentURLFromBookmarkableStringSymbolLoc_block_invoke_0(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB2648C0)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    void v5[2] = (void *)3221225472;
    v5[3] = __FileProviderLibraryCore_block_invoke_4;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E530BC60;
    uint64_t v7 = 0;
    qword_1EB2648C0 = _sl_dlopen();
  }
  id v2 = (void *)qword_1EB2648C0;
  if (!qword_1EB2648C0)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    id v2 = [NSString stringWithUTF8String:"void *FileProviderLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"_UISceneOpenURLBSActionsHandler.m", 32, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "FPCreateDocumentURLFromBookmarkableString");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  off_1EB2648B8 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __FileProviderLibraryCore_block_invoke_4()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2648C0 = result;
  return result;
}

void __addChildFocusGroupsRecursively(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  [v4 addObject:v3];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  char v5 = objc_msgSend(v3, "childGroups", 0);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        __addChildFocusGroupsRecursively(*(void *)(*((void *)&v10 + 1) + 8 * v9++), v4);
      }
      while (v7 != v9);
      uint64_t v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
}

uint64_t selectorDescription_0(const char *a1)
{
  uint64_t v1 = NSString;
  Name = sel_getName(a1);
  return [v1 stringWithUTF8String:Name];
}

void _UIWindowSceneActivationPrepareConfiguration(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v36 = a1;
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  long long v12 = a5;
  long long v13 = [v36 _sceneActivator];

  if (v10 && !v13) {
    [v36 _setSceneActivator:v10];
  }
  id v14 = [v36 _sceneActivator];
  if (([v14 conformsToProtocol:&unk_1ED59BD38] & 1) == 0)
  {

    goto LABEL_8;
  }
  uint64_t v15 = [v36 _sceneActivator];
  char v16 = objc_opt_respondsToSelector();

  id v17 = v36;
  if (v16)
  {
    [v10 _prepareSceneActivationConfiguration:v36];
LABEL_8:
    id v17 = v36;
  }
  uint64_t v18 = [v17 preview];

  if (v9 && !v18)
  {
    uint64_t v19 = [[UITargetedPreview alloc] initWithView:v9];
    [v36 setPreview:v19];
  }
  uint64_t v20 = [v36 options];
  uint64_t v21 = v20;
  if (v20) {
    id v22 = v20;
  }
  else {
    id v22 = objc_alloc_init(UIWindowSceneActivationRequestOptions);
  }
  id v23 = v22;

  uint64_t v24 = [(UIWindowSceneActivationRequestOptions *)v23 placement];

  if (!v24)
  {
    if (v12)
    {
      uint64_t v25 = v12[2](v12);
    }
    else
    {
      uint64_t v25 = 0;
    }
    if (_UIWindowSceneActivationRequestOptionsHaveModifiedStyleOrSize(v23))
    {
      uint64_t v26 = _UIWindowScenePresentationStyleFromPlacement(v25);
      uint64_t v27 = _UIWindowScenePlacementForStyleAndSizeCategory([(UIWindowSceneActivationRequestOptions *)v23 preferredPresentationStyle], [(UIWindowSceneActivationRequestOptions *)v23 _preferredSizeCategory], v26);
      [(UIWindowSceneActivationRequestOptions *)v23 setPlacement:v27];
    }
    double v28 = [(UIWindowSceneActivationRequestOptions *)v23 placement];

    if (!v28) {
      [(UIWindowSceneActivationRequestOptions *)v23 setPlacement:v25];
    }
  }
  id v29 = [(UISceneActivationRequestOptions *)v23 requestingScene];

  uint64_t v30 = v36;
  if (!v29)
  {
    if (v11)
    {
      [(UISceneActivationRequestOptions *)v23 setRequestingScene:v11];
    }
    else
    {
      double v31 = [v36 preview];
      double v32 = [v31 target];
      double v33 = [v32 container];

      if (v33)
      {
        double v34 = [v33 _window];
        id v35 = [v34 windowScene];
        [(UISceneActivationRequestOptions *)v23 setRequestingScene:v35];
      }
    }
    uint64_t v30 = v36;
  }
  [v30 setOptions:v23];
}

uint64_t _UIWindowSceneActivationIsAnimatable(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 _sceneActivator];
  id v3 = (void *)v2;
  id v4 = (void *)UIApp;
  if (v2) {
    id v4 = (void *)v2;
  }
  id v5 = v4;

  if ([v5 conformsToProtocol:&unk_1ED59BD38])
  {
    uint64_t v6 = [v1 options];
    uint64_t v7 = [v6 requestingScene];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v8 = [v7 _transitionCoordinator];
      char v9 = [v8 allowedAsMorphTransitionSource];

      char v10 = v9 ^ 1;
    }
    else
    {
      char v10 = 1;
    }

    long long v12 = [v1 preview];

    int v13 = [v6 _effectivelyWantsProminence];
    if (objc_opt_respondsToSelector()) {
      int v14 = [v5 _canAnimateSceneActivationWithConfiguration:v1];
    }
    else {
      int v14 = 1;
    }
    if (v12) {
      char v15 = v10;
    }
    else {
      char v15 = 1;
    }
    if (v15) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v13 & v14;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void _UIWindowSceneActivateConfiguration(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = a1;
  uint64_t v8 = [v7 _sceneActivator];
  char v9 = (void *)v8;
  char v10 = (void *)UIApp;
  if (v8) {
    char v10 = (void *)v8;
  }
  id v11 = v10;

  [v11 _requestSceneActivationWithConfiguration:v7 animated:_UIWindowSceneActivationIsAnimatable(v7) sender:v6 errorHandler:v5];
}

void _UITextViewEnablingCompatibilityMode(void *a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  if (a2)
  {
    id v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Text", &qword_1EB25AFA8) + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 134349314;
      id v7 = v3;
      __int16 v8 = 2082;
      char v9 = "void _UITextViewEnablingCompatibilityMode(UITextView *__strong, BOOL)";
      id v5 = "UITextView %{public}p is switching to TextKit 1 compatibility mode because its layoutManager was accessed. Br"
           "eak on %{public}s to debug.";
LABEL_6:
      _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v6, 0x16u);
    }
  }
  else
  {
    id v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Text", &qword_1EB25AFB0) + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 134349314;
      id v7 = v3;
      __int16 v8 = 2082;
      char v9 = "void _UITextViewEnablingCompatibilityMode(UITextView *__strong, BOOL)";
      id v5 = "UITextView %{public}p is switching to TextKit 1 compatibility mode because its textStorage contains attribute"
           "s which are not compatible with TextKit 2. Break on %{public}s to debug.";
      goto LABEL_6;
    }
  }
}

void sub_1868008FC(void *a1)
{
  objc_begin_catch(a1);
  *(void *)(*(void *)(v1 + 32) + 2144) &= ~0x1000uLL;
  objc_exception_rethrow();
}

void sub_18680092C(_Unwind_Exception *a1)
{
}

void sub_18680237C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_186803558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186803EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27)
{
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _UIEmitSignpostEvent(&a27);
  _Unwind_Resume(a1);
}

_DWORD *_UIEmitSignpostEvent(_DWORD *result)
{
  if (*result) {
    return (_DWORD *)kdebug_trace();
  }
  return result;
}

void sub_186805F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_186806B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18680B258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18680BC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18680F2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_18680F9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 168), 8);
  _Unwind_Resume(a1);
}

void sub_18680FEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_186810C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void ___customTextViewSubclassRequiresTextKit1_block_invoke_2()
{
  uint64_t v0 = _UIMainBundleIdentifier();
  uint64_t v1 = (void *)qword_1EB25AFF0;
  qword_1EB25AFF0 = v0;

  uint64_t v2 = [(id)qword_1EB25AFE0 objectForKeyedSubscript:qword_1EB25AFF0];
  byte_1EB25AFA1 = v2 != 0;
}

void ___customTextViewSubclassUsesIllegalDoubleInit_block_invoke()
{
  uint64_t v0 = _UIMainBundleIdentifier();
  uint64_t v1 = (void *)qword_1EB25B000;
  qword_1EB25B000 = v0;

  uint64_t v2 = [&unk_1ED3F7B40 objectForKeyedSubscript:qword_1EB25B000];
  byte_1EB25AFA2 = v2 != 0;

  if (byte_1EB25AFA2)
  {
    id v3 = [&unk_1ED3F7B40 objectForKeyedSubscript:qword_1EB25B000];
    qword_1EB25B008 = (uint64_t)NSClassFromString(v3);
  }
}

void ___downgradeToTextKit1IfNecessary_block_invoke()
{
  uint64_t v0 = (void *)qword_1EB25B018;
  qword_1EB25B018 = (uint64_t)&unk_1ED3F7B68;
}

void ___downgradeToTextKit1IfNecessary_block_invoke_2()
{
  uint64_t v0 = _UIMainBundleIdentifier();
  uint64_t v1 = (void *)qword_1EB25B028;
  qword_1EB25B028 = v0;

  uint64_t v2 = [(id)qword_1EB25B018 objectForKeyedSubscript:qword_1EB25B028];
  byte_1EB25AFA3 = v2 != 0;
}

uint64_t ___downgradeToTextKit1IfNecessary_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t result = objc_opt_isKindOfClass();
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

void sub_186813FD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

__CFString *_UIFontDescriptorDescriptionForSymbolicTraits(unsigned int a1)
{
  uint64_t v2 = objc_opt_new();
  id v3 = v2;
  if (a1)
  {
    [v2 appendString:@"UIFontDescriptorTraitItalic "];
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  [v3 appendString:@"UIFontDescriptorTraitBold "];
  if ((a1 & 0x20) == 0)
  {
LABEL_4:
    if ((a1 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  [v3 appendString:@"UIFontDescriptorTraitExpanded "];
  if ((a1 & 0x40) == 0)
  {
LABEL_5:
    if ((a1 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  [v3 appendString:@"UIFontDescriptorTraitCondensed "];
  if ((a1 & 0x400) == 0)
  {
LABEL_6:
    if ((a1 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  [v3 appendString:@"UIFontDescriptorTraitMonoSpace "];
  if ((a1 & 0x800) == 0)
  {
LABEL_7:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  [v3 appendString:@"UIFontDescriptorTraitVertical "];
  if ((a1 & 0x1000) == 0)
  {
LABEL_8:
    if ((a1 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  [v3 appendString:@"UIFontDescriptorTraitUIOptimized "];
  if ((a1 & 0x8000) == 0)
  {
LABEL_9:
    if ((a1 & 0x10000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  [v3 appendString:@"UIFontDescriptorTraitTightLeading "];
  if ((a1 & 0x10000) == 0)
  {
LABEL_10:
    if ((a1 & 0x10000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  [v3 appendString:@"UIFontDescriptorTraitLooseLeading "];
  if ((a1 & 0x10000000) == 0)
  {
LABEL_11:
    if ((a1 & 0x20000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_40:
  [v3 appendString:@"UIFontDescriptorClassOldStyleSerifs "];
  if ((a1 & 0x20000000) != 0) {
LABEL_12:
  }
    [v3 appendString:@"UIFontDescriptorClassTransitionalSerifs "];
LABEL_13:
  if ((a1 & 0x30000000) != 0) {
    [v3 appendString:@"UIFontDescriptorClassModernSerifs "];
  }
  if ((a1 & 0x40000000) != 0) {
    [v3 appendString:@"UIFontDescriptorClassClarendonSerifs "];
  }
  if ((a1 & 0x50000000) != 0) {
    [v3 appendString:@"UIFontDescriptorClassSlabSerifs "];
  }
  if ((a1 & 0x70000000) != 0) {
    [v3 appendString:@"UIFontDescriptorClassFreeformSerifs "];
  }
  if ((a1 & 0x80000000) != 0) {
    [v3 appendString:@"UIFontDescriptorClassSansSerif "];
  }
  if ((a1 & 0x90000000) != 0) {
    [v3 appendString:@"UIFontDescriptorClassOrnamentals "];
  }
  if ((a1 & 0xA0000000) != 0) {
    [v3 appendString:@"UIFontDescriptorClassScripts "];
  }
  if (a1 >> 30) {
    [v3 appendString:@"UIFontDescriptorClassSymbolic "];
  }
  if ([v3 length])
  {
    objc_msgSend(v3, "substringToIndex:", objc_msgSend(v3, "length") - 1);
    id v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v4 = @"(none)";
  }

  return v4;
}

id _UIUpdateInputAggregateCacheDebugDescription(unsigned int *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    id v4 = NSString;
    uint64_t v5 = a1[8];
    int v6 = NSString;
  }
  else
  {
    uint64_t v7 = mach_absolute_time();
    int v6 = NSString;
    uint64_t v5 = a1[8];
    if (v7) {
      uint64_t v3 = v7;
    }
    else {
      uint64_t v3 = mach_absolute_time();
    }
    id v4 = NSString;
  }
  _UIUpdateInputExtentDebugDescription(a1, v3);
  id v8 = objc_claimAutoreleasedReturnValue();
  uint64_t v9 = [v8 UTF8String];
  _UIUpdateInputExtentDebugDescription(a1 + 4, v3);
  id v10 = objc_claimAutoreleasedReturnValue();
  id v11 = [v4 stringWithFormat:@"Input Aggregate, extents:\n - complete: %s\n\n - lowLatency: %s", v9, objc_msgSend(v10, "UTF8String")];

  id v12 = v11;
  int v13 = [v6 stringWithFormat:@"Input Aggregate Cache, alignment=%u (valid=%u), %s", v5, v5 != 2, objc_msgSend(v12, "UTF8String")];

  return v13;
}

void sub_186815AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose((const void *)(v8 - 80), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186815FD4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void *__getAnalyticsSendEventLazySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreAnalyticsLibrary();
  uint64_t result = dlsym(v2, "AnalyticsSendEventLazy");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAnalyticsSendEventLazySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *CoreAnalyticsLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!CoreAnalyticsLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    _OWORD v4[3] = __CoreAnalyticsLibraryCore_block_invoke;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E530C2E0;
    uint64_t v6 = 0;
    CoreAnalyticsLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  uint64_t v0 = (void *)CoreAnalyticsLibraryCore_frameworkLibrary;
  if (!CoreAnalyticsLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *CoreAnalyticsLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"_UIGestureStudyInteraction.m", 21, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CoreAnalyticsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreAnalyticsLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void *__getAnalyticsIsEventUsedSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CoreAnalyticsLibrary();
  uint64_t result = dlsym(v2, "AnalyticsIsEventUsed");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getAnalyticsIsEventUsedSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id _UIStickerUtilLog()
{
  if (qword_1EB2648F8 != -1) {
    dispatch_once(&qword_1EB2648F8, &__block_literal_global_585);
  }
  uint64_t v0 = (void *)_MergedGlobals_1275;
  return v0;
}

CGImageRef _UIStickerCreateImageFromData(const __CFData *a1)
{
  uint64_t v1 = CGImageSourceCreateWithData(a1, 0);
  CGImageSourceGetCount(v1);
  ImageAtIndeCGFloat x = CGImageSourceCreateImageAtIndex(v1, 0, 0);
  CFRelease(v1);
  return ImageAtIndex;
}

CGImageRef _UIStickerCreateResizedImage(CGImage *a1, size_t a2, size_t a3)
{
  return _UIStickerCreateFramedSizedSticker(a1, a2, a3, a2, a3);
}

CGImageRef _UIStickerCreateFramedSizedSticker(CGImage *a1, size_t a2, size_t a3, unint64_t a4, unint64_t a5)
{
  size_t AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  id v12 = CGBitmapContextCreate(0, a2, a3, 8uLL, AlignedBytesPerRow, DeviceRGB, 0x2002u);
  CGColorSpaceRelease(DeviceRGB);
  CGContextSetInterpolationQuality(v12, kCGInterpolationHigh);
  v15.origin.CGFloat x = (double)(unint64_t)((double)(a2 - a4) * 0.5);
  v15.origin.CGFloat y = (double)(unint64_t)((double)(a3 - a5) * 0.5);
  v15.size.CGFloat width = (double)a4;
  v15.size.CGFloat height = (double)a5;
  CGContextDrawImage(v12, v15, a1);
  CGImageRef Image = CGBitmapContextCreateImage(v12);
  CGContextRelease(v12);
  return Image;
}

CGImageRef _UIStickerCreateSquareSticker(CGImage *a1, size_t a2)
{
  size_t Width = CGImageGetWidth(a1);
  size_t Height = CGImageGetHeight(a1);
  if (Width <= Height) {
    unint64_t v6 = Height;
  }
  else {
    unint64_t v6 = Width;
  }
  double v7 = 1.0;
  if (v6 >= a2 && v6 != 0) {
    double v7 = (double)a2 / (double)v6;
  }
  return _UIStickerCreateFramedSizedSticker(a1, a2, a2, (unint64_t)(v7 * (double)Width), (unint64_t)(v7 * (double)Height));
}

double _UIStickerImageScaleForMaxLength(unint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a1 <= a2) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = a1;
  }
  double result = 1.0;
  if (v3 >= a3 && v3 != 0) {
    return (double)a3 / (double)v3;
  }
  return result;
}

id _UIStickerCreateDownsampledHEICS(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFTypeRef arg = 0;
  id v1 = a1;
  *(void *)long long buf = 0;
  int Container = CMPhotoDecompressionSessionCreate();
  if (Container
    || (CFAutorelease(*(CFTypeRef *)buf), v17[0] = 0, (int Container = CMPhotoDecompressionSessionCreateContainer()) != 0)
    || (CFAutorelease(v17[0]), (int Container = CMPhotoDecompressionContainerCreateSequenceContainer()) != 0))
  {

LABEL_5:
    unint64_t v3 = 0;
    goto LABEL_6;
  }
  CFAutorelease(arg);

  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v15[0] = 0;
  int Container = CMPhotoCompressionSessionCreate();
  if (Container) {
    goto LABEL_5;
  }
  CFAutorelease(v15[0]);
  uint64_t v8 = (const void *)*MEMORY[0x1E4F56048];
  v17[0] = *(CFTypeRef *)MEMORY[0x1E4F56058];
  v17[1] = v8;
  *(void *)long long buf = &unk_1ED3F6ED0;
  *(void *)&uint8_t buf[8] = &unk_1ED3F6EE8;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:buf forKeys:v17 count:2];
  int Container = CMPhotoCompressionSessionOpenEmptyContainer();
  if (Container
    || (int Container = CMPhotoCompressionSessionStartImageSequence()) != 0
    || (int Container = CMPhotoDecompressionContainerGetImageCount()) != 0
    || (CFTypeRef v16 = 0, (Container = CMPhotoDecompressionContainerCreateDictionaryDescription()) != 0))
  {

    goto LABEL_5;
  }
  CFAutorelease(v16);
  uint64_t Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v16, (const void *)*MEMORY[0x1E4F56258]);

  id v11 = Value;
  if (CMPhotoCompressionSessionEndImageSequence()
    || (v15[0] = 0, CMPhotoCompressionSessionCloseContainerAndCopyBacking()))
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = (id)v15[0];
  }

  int Container = 0;
LABEL_6:

  id v4 = v3;
  long long v5 = v4;
  if (Container || !v4)
  {
    unint64_t v6 = _UIStickerUtilLog();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "NSData * _Nullable _UIStickerCreateDownsampledHEICS(NSData *__strong _Nonnull, size_t)";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = Container;
      _os_log_error_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "%s could not resize animated sticker: %d", buf, 0x12u);
    }
  }
  return v5;
}

void sub_186819798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

CGImageRef _UIStickerCreateDownsampledImage(CGImage *a1, unint64_t a2)
{
  size_t Width = CGImageGetWidth(a1);
  size_t Height = CGImageGetHeight(a1);
  if (Width <= Height) {
    unint64_t v6 = Height;
  }
  else {
    unint64_t v6 = Width;
  }
  double v7 = 1.0;
  if (v6 >= a2 && v6 != 0) {
    double v7 = (double)a2 / (double)v6;
  }
  return _UIStickerCreateFramedSizedSticker(a1, (unint64_t)(v7 * (double)Width), (unint64_t)(v7 * (double)Height), (unint64_t)(v7 * (double)Width), (unint64_t)(v7 * (double)Height));
}

__CFData *_UIStickerDataFromImage(CGImage *a1, void *a2)
{
  return _UIStickerDataFromImageWithMetadata(a1, a2, 0);
}

__CFData *_UIStickerDataFromImageWithMetadata(CGImage *a1, void *a2, void *a3)
{
  long long v5 = (objc_class *)MEMORY[0x1E4F1CA58];
  id v6 = a3;
  double v7 = a2;
  uint64_t v8 = (__CFData *)objc_alloc_init(v5);
  uint64_t v9 = CGImageDestinationCreateWithData(v8, v7, 1uLL, 0);

  CFDictionaryRef v10 = [getSTKEmojiMetadataHelperClass() metadataDictionaryFromData:v6];

  CGImageDestinationAddImage(v9, a1, v10);
  CGImageDestinationFinalize(v9);
  CFRelease(v9);

  return v8;
}

id getSTKEmojiMetadataHelperClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1EB264910;
  uint64_t v7 = qword_1EB264910;
  if (!qword_1EB264910)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getSTKEmojiMetadataHelperClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getSTKEmojiMetadataHelperClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1868199E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _UIStickerItemProviderWithMetadata(void *a1, void *a2, void *a3, int a4, void *a5, double a6)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  id v10 = a1;
  id v11 = a2;
  id v65 = a3;
  id v61 = a5;
  int v12 = [v10 hasPrefix:@"sticker:///emoji"];
  char v13 = [v10 hasPrefix:@"sticker:///memoji"];
  id v63 = objc_alloc_init(MEMORY[0x1E4F28D78]);
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  id v14 = v11;
  uint64_t v15 = [v14 countByEnumeratingWithState:&v74 objects:v78 count:16];
  if (!v15)
  {

    goto LABEL_38;
  }
  uint64_t v16 = v15;
  id v59 = v10;
  char v68 = 0;
  unsigned __int8 v64 = v12 | v13;
  uint64_t v17 = *(void *)v75;
  uint64_t v67 = (void *)*MEMORY[0x1E4F44460];
  double v66 = (void *)*MEMORY[0x1E4F443E0];
  double v18 = 160.0;
  if (v12) {
    double v18 = 96.0;
  }
  double v19 = v18 * a6;
  if (v19 < 300.0) {
    double v19 = 300.0;
  }
  size_t v60 = (unint64_t)v19;
  do
  {
    for (uint64_t i = 0; i != v16; ++i)
    {
      if (*(void *)v75 != v17) {
        objc_enumerationMutation(v14);
      }
      uint64_t v21 = *(void **)(*((void *)&v74 + 1) + 8 * i);
      id v22 = objc_msgSend(v21, "role", v59);
      char v23 = [v22 isEqualToString:@"com.apple.stickers.role.keyboard"];

      if ((v23 & 1) == 0)
      {
        uint64_t v24 = [v21 role];
        char v25 = [v24 containsString:@"com.apple.stickers.role.stillVariant_"];

        if ((v25 & 1) == 0)
        {
          id v26 = v14;
          uint64_t v27 = [v21 type];
          char v28 = [v27 isEqualToString:@"com.apple.sticker"];

          v68 |= v28;
          id v29 = [v21 type];
          uint64_t v30 = [v67 identifier];
          int v31 = [v29 isEqualToString:v30];

          double v32 = [v21 type];
          double v33 = [v66 identifier];
          int v34 = [v32 isEqualToString:v33];

          id v35 = [v21 role];
          if ([v35 isEqualToString:@"com.apple.stickers.role.still"])
          {

LABEL_15:
            id v36 = [v21 data];
            if (v65)
            {
              uint64_t v37 = [v65 data];

              id v36 = (void *)v37;
            }
            if ((v34 | v31) == 1)
            {
              ImageFromDatCATransform3D a = _UIStickerCreateImageFromData((const __CFData *)v36);
              if (ImageFromData)
              {
                double v39 = ImageFromData;
                if (a4)
                {
                  SquareSticker = _UIStickerCreateSquareSticker(ImageFromData, v60);
                  double v41 = [v21 type];
                  uint64_t v42 = _UIStickerDataFromImageWithMetadata(SquareSticker, v41, v61);

                  CGImageRelease(SquareSticker);
                  id v36 = (void *)v42;
                }
                else
                {
                  id v54 = [v21 type];
                  uint64_t v55 = _UIStickerDataFromImageWithMetadata(v39, v54, v61);

                  id v36 = (void *)v55;
                }
                CGImageRelease(v39);
                uint64_t v56 = [[UIImage alloc] initWithData:v36 scale:a6];
                [v63 registerObject:v56 visibility:3];
                v72[0] = MEMORY[0x1E4F143A8];
                v72[1] = 3221225472;
                v72[2] = ___UIStickerItemProviderWithMetadata_block_invoke;
                v72[3] = &unk_1E52DD3E0;
                id v73 = v56;
                double v57 = v56;
                [v63 registerDataRepresentationForTypeIdentifier:@"com.apple.png-sticker" visibility:0 loadHandler:v72];
              }
            }

            id v14 = v26;
            continue;
          }

          if (v64 & v31) {
            goto LABEL_15;
          }
          double v43 = [v21 role];
          if (([v43 isEqualToString:@"com.apple.stickers.role.animated"] & 1) == 0)
          {

            id v14 = v26;
LABEL_29:
            id v53 = [v21 type];
            v69[0] = MEMORY[0x1E4F143A8];
            v69[1] = 3221225472;
            v69[2] = ___UIStickerItemProviderWithMetadata_block_invoke_3;
            v69[3] = &unk_1E52DD3E0;
            v69[4] = v21;
            [v63 registerDataRepresentationForTypeIdentifier:v53 visibility:0 loadHandler:v69];

            continue;
          }
          long long v44 = [v21 type];
          int v45 = [v44 isEqualToString:@"public.heics"];

          id v14 = v26;
          if (!v45) {
            goto LABEL_29;
          }
          long long v46 = [v21 data];
          long long v47 = v46;
          if (a4)
          {
            BOOL v48 = _UIStickerCreateDownsampledHEICS(v46);
            double v49 = v48;
            if (v48)
            {
              id v50 = v48;

              long long v47 = v50;
            }
          }
          id v51 = [v21 type];
          v70[0] = MEMORY[0x1E4F143A8];
          v70[1] = 3221225472;
          v70[2] = ___UIStickerItemProviderWithMetadata_block_invoke_2;
          v70[3] = &unk_1E52DD3E0;
          id v71 = v47;
          id v52 = v47;
          [v63 registerDataRepresentationForTypeIdentifier:v51 visibility:0 loadHandler:v70];
        }
      }
    }
    uint64_t v16 = [v14 countByEnumeratingWithState:&v74 objects:v78 count:16];
  }
  while (v16);

  id v10 = v59;
  if ((v68 & 1) == 0) {
LABEL_38:
  }
    [v63 registerDataRepresentationForTypeIdentifier:@"com.apple.sticker" visibility:0 loadHandler:&__block_literal_global_33_5];

  return v63;
}

id _UIStickerCreateEmojiTextAttachmentFromSticker(void *a1)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  getSTKEmojiMetadataHelperClass();
  if (objc_opt_respondsToSelector())
  {
    id v52 = 0;
    uint64_t v2 = objc_msgSend(v1, "stk_asEmojiTextAttachmentWithError:", &v52);
    id v3 = v52;
    if (v3)
    {
      uint64_t v4 = _UIStickerUtilLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v45 = [v1 identifier];
        long long v46 = [v3 localizedDescription];
        *(_DWORD *)long long buf = 136315650;
        double v66 = "NSEmojiImageTextAttachment * _Nullable _UIStickerCreateEmojiTextAttachmentFromSticker(_UISticker *__strong _Nonnull)";
        __int16 v67 = 2114;
        char v68 = v45;
        __int16 v69 = 2114;
        CGFloat v70 = v46;
        _os_log_error_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "[%s] Representations could not be loaded as emoji text attachments directly from sticker %{public}@. %{public}@", buf, 0x20u);
      }
    }

    if (v2) {
      goto LABEL_42;
    }
  }
  else
  {
    long long v5 = _UIStickerUtilLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      long long v44 = [v1 identifier];
      *(_DWORD *)long long buf = 136315394;
      double v66 = "NSEmojiImageTextAttachment * _Nullable _UIStickerCreateEmojiTextAttachmentFromSticker(_UISticker *__strong _Nonnull)";
      __int16 v67 = 2114;
      char v68 = v44;
      _os_log_error_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, "[%s] Could not find method to load representations as emoji text attachments directly from sticker %{public}@", buf, 0x16u);
    }
  }
  id v48 = v1;
  id v6 = v1;
  uint64_t v7 = [v6 bakedInRep];
  id v50 = v6;
  if (v7)
  {
LABEL_12:
    CFDataRef v8 = [v7 data];
    ImageFromDatCATransform3D a = _UIStickerCreateImageFromData(v8);

    id v10 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(&unk_1ED3F16D8, "count"));
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    uint64_t v11 = [&unk_1ED3F16D8 countByEnumeratingWithState:&v53 objects:v61 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v54;
      double v14 = *MEMORY[0x1E4F1DB30];
      double v15 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
      do
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v54 != v13) {
            objc_enumerationMutation(&unk_1ED3F16D8);
          }
          SquareSticker = _UIStickerCreateSquareSticker(ImageFromData, [*(id *)(*((void *)&v53 + 1) + 8 * i) unsignedIntValue]);
          double v18 = objc_msgSend(objc_alloc(MEMORY[0x1E4F24380]), "initWithImage:alignmentInset:", SquareSticker, v14, v15);
          CGImageRelease(SquareSticker);
          [v10 addObject:v18];
        }
        uint64_t v12 = [&unk_1ED3F16D8 countByEnumeratingWithState:&v53 objects:v61 count:16];
      }
      while (v12);
    }
    CGImageRelease(ImageFromData);
    double v19 = v50;
    uint64_t v20 = [v50 name];
    if (v20)
    {
      uint64_t v21 = [v50 name];
      if ([v21 length])
      {
        id v22 = [v50 name];
      }
      else
      {
        id v22 = @"missing description";
      }
    }
    else
    {
      id v22 = @"missing description";
    }
    id v1 = v49;

    id v38 = objc_alloc(MEMORY[0x1E4F24378]);
    double v39 = [v50 identifier];
    double v40 = (void *)[v38 initWithContentIdentifier:v39 shortDescription:v22 strikeImages:v10];

    id v41 = objc_alloc((Class)off_1E52D2BC8);
    uint64_t v42 = [v40 imageData];
    uint64_t v2 = (void *)[v41 initWithData:v42];
  }
  else
  {
    char v23 = [v6 externalURI];
    char v24 = [v23 hasPrefix:@"sticker:///emoji"];

    char v25 = [v6 externalURI];
    char v26 = [v25 hasPrefix:@"sticker:///memoji"];

    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    id obj = [v6 representations];
    uint64_t v27 = [obj countByEnumeratingWithState:&v57 objects:buf count:16];
    if (v27)
    {
      uint64_t v28 = v27;
      unsigned __int8 v29 = v24 | v26;
      uint64_t v30 = *(void *)v58;
      int v31 = (void *)*MEMORY[0x1E4F44460];
LABEL_24:
      uint64_t v32 = 0;
      while (1)
      {
        if (*(void *)v58 != v30) {
          objc_enumerationMutation(obj);
        }
        double v33 = *(void **)(*((void *)&v57 + 1) + 8 * v32);
        int v34 = objc_msgSend(v33, "type", v48);
        id v35 = [v31 identifier];
        unsigned __int8 v36 = [v34 isEqualToString:v35];

        uint64_t v37 = [v33 role];
        if ([v37 isEqualToString:@"com.apple.stickers.role.still"]) {
          break;
        }

        if (v29 & v36) {
          goto LABEL_37;
        }
        if (v28 == ++v32)
        {
          uint64_t v28 = [obj countByEnumeratingWithState:&v57 objects:buf count:16];
          if (v28) {
            goto LABEL_24;
          }
          goto LABEL_31;
        }
      }

LABEL_37:
      uint64_t v7 = v33;

      double v19 = v50;
      if (v7) {
        goto LABEL_12;
      }
    }
    else
    {
LABEL_31:

      double v19 = v50;
    }
    uint64_t v7 = _UIStickerUtilLog();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      long long v47 = [v19 identifier];
      *(_DWORD *)id v61 = 136315394;
      double v62 = "NSEmojiImageTextAttachment *_UIStickerGenerateEmojiTextAttachmentRepsNonEmojiSticker(_UISticker *__strong)";
      __int16 v63 = 2114;
      unsigned __int8 v64 = v47;
      _os_log_error_impl(&dword_1853B0000, v7, OS_LOG_TYPE_ERROR, "[%s] Could not find still representation in sticker collection for sticker %{public}@", v61, 0x16u);
    }
    uint64_t v2 = 0;
    id v1 = v48;
  }

LABEL_42:
  return v2;
}

id _UIStickerCreateAdaptiveImageGlyphFromSticker(void *a1)
{
  id v1 = _UIStickerCreateEmojiTextAttachmentFromSticker(a1);
  uint64_t v2 = [v1 adaptiveImageGlyph];

  return v2;
}

id _UIStickerCreateTextInputPayloadFromSticker(void *a1)
{
  v23[3] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 identifier];
  if (v2)
  {
    id v3 = [v1 representations];
    uint64_t v4 = [v3 count];

    if (v4)
    {
      long long v5 = (void *)MEMORY[0x1E4F1CA60];
      v22[0] = @"identifier";
      id v6 = [v1 identifier];
      v23[0] = v6;
      v22[1] = @"representations";
      uint64_t v7 = [v1 representations];
      v23[1] = v7;
      v22[2] = @"attributionInfo";
      uint64_t v8 = [v1 attributionInfo];
      uint64_t v9 = (void *)v8;
      uint64_t v10 = MEMORY[0x1E4F1CC08];
      if (v8) {
        uint64_t v10 = v8;
      }
      v23[2] = v10;
      uint64_t v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:v22 count:3];
      uint64_t v2 = [v5 dictionaryWithDictionary:v11];

      uint64_t v12 = [v1 bakedInRep];
      [v2 setObject:v12 forKeyedSubscript:@"bakedInRep"];

      uint64_t v13 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v1, "effectType"));
      [v2 setObject:v13 forKeyedSubscript:@"effectType"];

      double v14 = [v1 name];
      [v2 setObject:v14 forKeyedSubscript:@"name"];

      double v15 = [v1 externalURI];
      [v2 setObject:v15 forKeyedSubscript:@"externalURI"];

      uint64_t v16 = [v1 searchText];
      [v2 setObject:v16 forKeyedSubscript:@"searchText"];

      uint64_t v17 = [v1 sanitizedPrompt];
      [v2 setObject:v17 forKeyedSubscript:@"sanitizedPrompt"];

      double v18 = [v1 accessibilityName];
      [v2 setObject:v18 forKeyedSubscript:@"accessibilityName"];

      double v19 = [v1 accessibilityLabel];
      [v2 setObject:v19 forKeyedSubscript:@"accessibilityLabel"];

      uint64_t v20 = [v1 metadata];
      [v2 setObject:v20 forKeyedSubscript:@"metadata"];
    }
    else
    {
      uint64_t v2 = 0;
    }
  }

  return v2;
}

id _UIStickerCreateStickerFromTextInputPayload(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_new();
  id v3 = [v1 objectForKeyedSubscript:@"identifier"];
  [v2 setIdentifier:v3];

  uint64_t v4 = [v1 objectForKeyedSubscript:@"representations"];
  [v2 setRepresentations:v4];

  long long v5 = [v1 objectForKeyedSubscript:@"bakedInRep"];
  [v2 setBakedInRep:v5];

  id v6 = [v1 objectForKeyedSubscript:@"attributionInfo"];
  [v2 setAttributionInfo:v6];

  uint64_t v7 = [v1 objectForKeyedSubscript:@"effectType"];
  uint64_t v8 = v7;
  if (!v7) {
    uint64_t v7 = &unk_1ED3F6F48;
  }
  objc_msgSend(v2, "setEffectType:", objc_msgSend(v7, "integerValue"));

  uint64_t v9 = [v1 objectForKeyedSubscript:@"name"];
  [v2 setName:v9];

  uint64_t v10 = [v1 objectForKeyedSubscript:@"externalURI"];
  [v2 setExternalURI:v10];

  uint64_t v11 = [v1 objectForKeyedSubscript:@"searchText"];
  [v2 setSearchText:v11];

  uint64_t v12 = [v1 objectForKeyedSubscript:@"sanitizedPrompt"];
  [v2 setSanitizedPrompt:v12];

  uint64_t v13 = [v1 objectForKeyedSubscript:@"accessibilityName"];
  [v2 setAccessibilityName:v13];

  double v14 = [v1 objectForKeyedSubscript:@"accessibilityLabel"];
  [v2 setAccessibilityLabel:v14];

  double v15 = [v1 objectForKeyedSubscript:@"metadata"];

  [v2 setMetadata:v15];
  return v2;
}

void *__getCMTimeMakeFromDictionarySymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB264908)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    void v5[2] = (void *)3221225472;
    v5[3] = __CoreMediaLibraryCore_block_invoke_0;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E530C2F8;
    uint64_t v7 = 0;
    qword_1EB264908 = _sl_dlopen();
  }
  uint64_t v2 = (void *)qword_1EB264908;
  if (!qword_1EB264908)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *CoreMediaLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"_UIStickerUtil.m", 32, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  double result = dlsym(v2, "CMTimeMakeFromDictionary");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  off_1EB264900 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __CoreMediaLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB264908 = result;
  return result;
}

Class __getSTKEmojiMetadataHelperClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB264918)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __StickerKitLibraryCore_block_invoke_4;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530C310;
    uint64_t v8 = 0;
    qword_1EB264918 = _sl_dlopen();
  }
  if (!qword_1EB264918)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *StickerKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIStickerUtil.m", 36, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("STKEmojiMetadataHelper");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getSTKEmojiMetadataHelperClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIStickerUtil.m", 37, @"Unable to find class %s", "STKEmojiMetadataHelper");

LABEL_10:
    __break(1u);
  }
  qword_1EB264910 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __StickerKitLibraryCore_block_invoke_4()
{
  uint64_t result = _sl_dlopen();
  qword_1EB264918 = result;
  return result;
}

id getAppleSpellClass()
{
  uint64_t v4 = 0;
  long long v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1EB25D678;
  uint64_t v7 = qword_1EB25D678;
  if (!qword_1EB25D678)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getAppleSpellClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getAppleSpellClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18681BE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18681BFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _detailByApplyingSmartQuotes(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x1E4F1CA60] dictionaryWithDictionary:a1];
  long long v5 = [v4 objectForKey:@"NSGrammarCorrections"];
  if (v5)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v6 = [MEMORY[0x1E4F1CA48] arrayWithArray:v5];
      if ([v6 count])
      {
        char v7 = 0;
        unint64_t v8 = 0;
        do
        {
          uint64_t v9 = [v6 objectAtIndex:v8];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [v9 rangeOfString:@"'"];
            if (v10)
            {
              uint64_t v11 = _stringByApplyingSmartQuotes(v9, v3);
              [v6 replaceObjectAtIndex:v8 withObject:v11];

              char v7 = 1;
            }
          }

          ++v8;
        }
        while (v8 < [v6 count]);
        if (v7) {
          [v4 setObject:v6 forKey:@"NSGrammarCorrections"];
        }
      }
    }
  }

  return v4;
}

id _stringByApplyingSmartQuotes(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = v3;
  if (a2)
  {
    long long v5 = [a2 smartPunctuationedStringForString:v3];
    uint64_t v6 = v5;
    id v4 = v3;
    if (v5)
    {
      id v4 = v5;
    }
  }

  return v4;
}

id _resultByApplyingSmartQuotesToResult(void *a1, void *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v3 resultType];
  uint64_t v6 = [v3 replacementString];
  char v7 = v6;
  if (v5 == 512 && v6)
  {
    [v6 rangeOfString:@"'"];
    if (v8)
    {
      id v9 = objc_alloc(MEMORY[0x1E4F28BC8]);
      uint64_t v10 = [v3 range];
      uint64_t v12 = v11;
      uint64_t v13 = _stringByApplyingSmartQuotes(v7, v4);
      uint64_t v14 = objc_msgSend(v9, "initWithRange:replacementString:", v10, v12, v13);

      id v3 = (id)v14;
    }
  }
  else if (v5 == 4)
  {
    [v3 grammarDetails];
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v39 = [v15 countByEnumeratingWithState:&v44 objects:v49 count:16];
    if (v39)
    {
      unsigned __int8 v36 = v7;
      uint64_t v37 = v4;
      uint64_t v16 = *(void *)v45;
      id v38 = v15;
      uint64_t v35 = *(void *)v45;
      do
      {
        for (uint64_t i = 0; i != v39; ++i)
        {
          if (*(void *)v45 != v16) {
            objc_enumerationMutation(v15);
          }
          double v18 = *(void **)(*((void *)&v44 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            double v19 = [v18 objectForKey:@"NSGrammarCorrections"];
            if (v19)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                long long v42 = 0u;
                long long v43 = 0u;
                long long v40 = 0u;
                long long v41 = 0u;
                id v20 = v19;
                uint64_t v21 = [v20 countByEnumeratingWithState:&v40 objects:v48 count:16];
                if (v21)
                {
                  uint64_t v22 = v21;
                  uint64_t v23 = *(void *)v41;
                  while (2)
                  {
                    for (uint64_t j = 0; j != v22; ++j)
                    {
                      if (*(void *)v41 != v23) {
                        objc_enumerationMutation(v20);
                      }
                      char v25 = *(void **)(*((void *)&v40 + 1) + 8 * j);
                      objc_opt_class();
                      if (objc_opt_isKindOfClass())
                      {
                        [v25 rangeOfString:@"'"];
                        if (v26)
                        {

                          id v27 = objc_alloc(MEMORY[0x1E4F28D08]);
                          uint64_t v28 = [v3 range];
                          uint64_t v30 = v29;
                          int v31 = [v3 grammarDetails];
                          id v4 = v37;
                          uint64_t v32 = _detailsByApplyingSmartQuotes((uint64_t)v31, v37);
                          uint64_t v33 = objc_msgSend(v27, "initWithRange:details:", v28, v30, v32);

                          id v3 = (id)v33;
                          goto LABEL_29;
                        }
                      }
                    }
                    uint64_t v22 = [v20 countByEnumeratingWithState:&v40 objects:v48 count:16];
                    if (v22) {
                      continue;
                    }
                    break;
                  }
                }

                id v15 = v38;
                uint64_t v16 = v35;
              }
            }
          }
        }
        uint64_t v39 = [v15 countByEnumeratingWithState:&v44 objects:v49 count:16];
      }
      while (v39);

      id v4 = v37;
LABEL_29:
      char v7 = v36;
    }
    else
    {
    }
  }

  return v3;
}

void sub_186820D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

id alternativesMatchingLanguage(void *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [MEMORY[0x1E4F1CA48] array];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v6 = v3;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(id *)(*((void *)&v17 + 1) + 8 * i);
        id v12 = v4;
        uint64_t v13 = objc_msgSend(v12, "length", (void)v17);
        if (!v4 || !v11 || (unint64_t v14 = v13, ![v11 hasPrefix:v12]))
        {

          continue;
        }
        if ([v11 length] <= v14)
        {

LABEL_15:
          [v5 addObject:v11];
          continue;
        }
        int v15 = [v11 characterAtIndex:v14];

        if (v15 == 95 || v15 == 45) {
          goto LABEL_15;
        }
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v8);
  }

  return v5;
}

char *strHashNoCase(char *result)
{
  if (result)
  {
    id v1 = result;
    uint64_t v2 = strchr(result, 10);
    if (v2) {
      size_t v3 = v2 - v1;
    }
    else {
      size_t v3 = strlen(v1);
    }
    CFStringRef v4 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)v1, v3, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    Mutableuint64_t Copy = CFStringCreateMutableCopy(0, 0, v4);
    CFStringNormalize(MutableCopy, kCFStringNormalizationFormC);
    CFStringFold(MutableCopy, 1uLL, 0);
    CFHashCode v6 = CFHash(MutableCopy);
    CFRelease(MutableCopy);
    CFRelease(v4);
    return (char *)v6;
  }
  return result;
}

BOOL strIsEqualNoCase(char *__s, char *a2)
{
  if (!((unint64_t)__s | (unint64_t)a2)) {
    return 1;
  }
  BOOL v3 = 0;
  if (__s && a2)
  {
    uint64_t v5 = strchr(__s, 10);
    CFHashCode v6 = strchr(a2, 10);
    uint64_t v7 = v6;
    if (v5)
    {
      size_t v8 = v5 - __s;
      if (v6)
      {
LABEL_6:
        size_t v9 = v7 - a2;
LABEL_10:
        CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
        CFStringRef v11 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)__s, v8, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
        CFStringRef v12 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)a2, v9, 0x8000100u, 0, v10);
        BOOL v3 = CFStringCompare(v11, v12, 0x11uLL) == kCFCompareEqualTo;
        CFRelease(v11);
        CFRelease(v12);
        return v3;
      }
    }
    else
    {
      size_t v8 = strlen(__s);
      if (v7) {
        goto LABEL_6;
      }
    }
    size_t v9 = strlen(a2);
    goto LABEL_10;
  }
  return v3;
}

void ReallyFree(int a1, void *a2)
{
}

void sub_186821788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void appendWordToDictionary(void *a1, void *a2)
{
  id v7 = a1;
  id v3 = a2;
  CFStringRef v4 = v3;
  if (!v3 || [v3 isEqualToString:*MEMORY[0x1E4F283E0]])
  {
    uint64_t v5 = connectionToRemoteDataServer();
    CFHashCode v6 = [v5 remoteObjectProxy];

    [v6 appendWordToTextCheckerLocalDictionary:v7];
  }
}

void sub_1868224D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void setCachedExemptionForString(void *a1, uint64_t a2)
{
  id v6 = a1;
  id v3 = (id)qword_1EB25D620;
  objc_sync_enter(v3);
  CFStringRef v4 = (void *)qword_1EB25D620;
  uint64_t v5 = [NSNumber numberWithBool:a2];
  [v4 setObject:v5 forKey:v6];

  objc_sync_exit(v3);
}

void sub_18682259C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _detailsByApplyingSmartQuotes(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFStringRef v4 = [MEMORY[0x1E4F1CA48] arrayWithArray:a1];
  if ([v4 count])
  {
    unint64_t v5 = 0;
    do
    {
      id v6 = [v4 objectAtIndex:v5];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v7 = _detailByApplyingSmartQuotes((uint64_t)v6, v3);
        [v4 replaceObjectAtIndex:v5 withObject:v7];
      }
      ++v5;
    }
    while (v5 < [v4 count]);
  }

  return v4;
}

Class __getAppleSpellClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25D680)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __ProofReaderLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530C3B0;
    uint64_t v8 = 0;
    qword_1EB25D680 = _sl_dlopen();
  }
  if (!qword_1EB25D680)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    CFStringRef v4 = [NSString stringWithUTF8String:"void *ProofReaderLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UITextChecker.m", 68, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("AppleSpell");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v5 = [NSString stringWithUTF8String:"Class getAppleSpellClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UITextChecker.m", 69, @"Unable to find class %s", "AppleSpell");

LABEL_10:
    __break(1u);
  }
  qword_1EB25D678 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ProofReaderLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D680 = result;
  return result;
}

Class __getTCPostEditorClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25D690)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __TextComposerLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530C3C8;
    uint64_t v8 = 0;
    qword_1EB25D690 = _sl_dlopen();
  }
  if (!qword_1EB25D690)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    CFStringRef v4 = [NSString stringWithUTF8String:"void *TextComposerLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UITextChecker.m", 63, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TCPostEditor");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v5 = [NSString stringWithUTF8String:"Class getTCPostEditorClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UITextChecker.m", 64, @"Unable to find class %s", "TCPostEditor");

LABEL_10:
    __break(1u);
  }
  qword_1EB25D688 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextComposerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D690 = result;
  return result;
}

void __UITextCheckerUsePostEditingUnderlines_block_invoke()
{
  id v2 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v0 = [v2 objectForKey:@"UITextCheckerUsePostEditingUnderlines"];

  if (v0)
  {
    char v1 = [v2 BOOLForKey:@"UITextCheckerUsePostEditingUnderlines"];
  }
  else
  {
    if (_os_feature_enabled_impl()) {
      goto LABEL_6;
    }
    char v1 = 1;
  }
  byte_1EB25D5EB = v1;
LABEL_6:
}

void __UITextCheckerPerformPostEditingOnSend_block_invoke()
{
  if (qword_1EB25D6B8 != -1) {
    dispatch_once(&qword_1EB25D6B8, &__block_literal_global_540_0);
  }
  if (byte_1EB25D5ED == 1)
  {
    if (_os_feature_enabled_impl()) {
      byte_1EB25D5EC = 1;
    }
  }
}

void __UITextCheckerInMessages_block_invoke()
{
  id v1 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v0 = _UIMainBundleIdentifier();
  if (([v0 isEqualToString:@"com.apple.MobileSMS"] & 1) != 0
    || [v0 isEqualToString:@"com.apple.mobilesms.compose"])
  {
    byte_1EB25D5ED = 1;
  }
}

id connectionToRemoteDataServer()
{
  if (qword_1EB25D6C8 != -1) {
    dispatch_once(&qword_1EB25D6C8, &__block_literal_global_555_1);
  }
  uint64_t v3 = 0;
  CFStringRef v4 = &v3;
  uint64_t v5 = 0x3032000000;
  id v6 = __Block_byref_object_copy__216;
  long long v7 = __Block_byref_object_dispose__216;
  id v8 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __connectionToRemoteDataServer_block_invoke_2;
  block[3] = &unk_1E52D9900;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)qword_1EB25D6C0, block);
  id v0 = (id)v4[5];
  _Block_object_dispose(&v3, 8);

  return v0;
}

intptr_t __dataWithContentsOfUserDictionary_block_invoke(uint64_t a1, uint64_t a2)
{
  NSLog(&cfstr_SRequestedData.isa, "dataWithContentsOfUserDictionary_block_invoke", a2);
  uint64_t v3 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v3);
}

void __dataWithContentsOfUserDictionary_block_invoke_2(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void __connectionToRemoteDataServer_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.UITextChecker.xpc", 0);
  id v1 = (void *)qword_1EB25D6C0;
  qword_1EB25D6C0 = (uint64_t)v0;
}

void __connectionToRemoteDataServer_block_invoke_2(uint64_t a1)
{
  id v2 = (void *)qword_1EB25D6D0;
  if (!qword_1EB25D6D0)
  {
    uint64_t v3 = [objc_alloc(MEMORY[0x1E4F29268]) initWithMachServiceName:@"com.apple.TextInput.rdt" options:4096];
    id v4 = (void *)qword_1EB25D6D0;
    qword_1EB25D6D0 = v3;

    uint64_t v5 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1ED701720];
    [(id)qword_1EB25D6D0 setRemoteObjectInterface:v5];

    [(id)qword_1EB25D6D0 _setQueue:qword_1EB25D6C0];
    [(id)qword_1EB25D6D0 resume];
    uint64_t v10 = 0;
    CFStringRef v11 = &v10;
    uint64_t v12 = 0x3032000000;
    uint64_t v13 = __Block_byref_object_copy__216;
    unint64_t v14 = __Block_byref_object_dispose__216;
    id v15 = 0;
    id v6 = [MEMORY[0x1E4F28EB8] defaultCenter];
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = __connectionToRemoteDataServer_block_invoke_3;
    v9[3] = &unk_1E530C410;
    void v9[4] = &v10;
    uint64_t v7 = [v6 addObserverForName:@"UIApplicationSuspendedNotification" object:UIApp queue:0 usingBlock:v9];
    id v8 = (void *)v11[5];
    void v11[5] = v7;

    _Block_object_dispose(&v10, 8);
    id v2 = (void *)qword_1EB25D6D0;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v2);
}

void __connectionToRemoteDataServer_block_invoke_3(uint64_t a1)
{
  id v2 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v2 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];

  uint64_t v3 = qword_1EB25D6C0;
  dispatch_async(v3, &__block_literal_global_613);
}

void __connectionToRemoteDataServer_block_invoke_4()
{
  [(id)qword_1EB25D6D0 invalidate];
  dispatch_queue_t v0 = (void *)qword_1EB25D6D0;
  qword_1EB25D6D0 = 0;
}

intptr_t __stringIsExemptFromChecker_block_invoke(uint64_t a1, uint64_t a2)
{
  NSLog(&cfstr_UitextcheckerS.isa, a2);
  uint64_t v3 = *(NSObject **)(a1 + 32);
  return dispatch_semaphore_signal(v3);
}

intptr_t __stringIsExemptFromChecker_block_invoke_2(uint64_t a1, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void __UITextCheckerPerformPostEditingOnPause_block_invoke()
{
  if (qword_1EB25D6B8 != -1) {
    dispatch_once(&qword_1EB25D6B8, &__block_literal_global_540_0);
  }
  if (byte_1EB25D5ED == 1)
  {
    if (_os_feature_enabled_impl()) {
      byte_1EB25D5EE = 1;
    }
  }
}

__CFString *UITextAlignmentGetStylePropertyString(unint64_t a1)
{
  if (a1 > 3) {
    return &stru_1ED0E84C0;
  }
  else {
    return off_1E530C5F0[a1];
  }
}

uint64_t _UICorrespondingUserInterfaceStyleForKeyboardAppearanceOfView(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 keyboardAppearance];
  switch(v2)
  {
    case 1:
      uint64_t v3 = 2;
      break;
    case 2:
      uint64_t v3 = 1;
      break;
    case 9:
      uint64_t v3 = 1000;
      break;
    default:
      id v4 = [v1 traitCollection];
      uint64_t v3 = [v4 userInterfaceStyle];

      break;
  }

  return v3;
}

void sub_18682A83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18682A9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18682AF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id getLTUITranslationViewControllerClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  dispatch_queue_t v0 = (void *)getLTUITranslationViewControllerClass_softClass;
  uint64_t v7 = getLTUITranslationViewControllerClass_softClass;
  if (!getLTUITranslationViewControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getLTUITranslationViewControllerClass_block_invoke;
    v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getLTUITranslationViewControllerClass_block_invoke((uint64_t)v3);
    dispatch_queue_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18682C950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18682D72C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 224));
  _Unwind_Resume(a1);
}

void __getLTUITranslationViewControllerClass_block_invoke(uint64_t a1)
{
  TranslationUIServicesLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("LTUITranslationViewController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getLTUITranslationViewControllerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getLTUITranslationViewControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UITextServiceSession.m", 55, @"Unable to find class %s", "LTUITranslationViewController");

    __break(1u);
  }
}

void TranslationUIServicesLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!TranslationUIServicesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __TranslationUIServicesLibraryCore_block_invoke;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E530C7A0;
    uint64_t v5 = 0;
    TranslationUIServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!TranslationUIServicesLibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *TranslationUIServicesLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UITextServiceSession.m", 54, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  dispatch_queue_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __TranslationUIServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TranslationUIServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getLTUISourceMetaClass_block_invoke(uint64_t a1)
{
  TranslationUIServicesLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("LTUISourceMeta");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB264938 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getLTUISourceMetaClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UITextServiceSession.m", 56, @"Unable to find class %s", "LTUISourceMeta");

    __break(1u);
  }
}

id UIOLog()
{
  if (UIOLog_onceToken != -1) {
    dispatch_once(&UIOLog_onceToken, &__block_literal_global_588);
  }
  dispatch_queue_t v0 = (void *)UIOLog_log;
  return v0;
}

void __UIOLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.uikit.uioverlayd", "General");
  id v1 = (void *)UIOLog_log;
  UIOLog_log = (uint64_t)v0;
}

void UIResetDateFormats()
{
  if (__LocaleDateFormats)
  {
    CFRelease((CFTypeRef)__LocaleDateFormats);
    __LocaleDateFormats = 0;
  }
  if (todayFormatter)
  {
    CFRelease((CFTypeRef)todayFormatter);
    todayFormatter = 0;
  }
  if (relativeFormatter)
  {
    CFRelease((CFTypeRef)relativeFormatter);
    relativeFormatter = 0;
  }
  if (dayFormatter)
  {
    CFRelease((CFTypeRef)dayFormatter);
    dayFormatter = 0;
  }
  if (longFormatter)
  {
    CFRelease((CFTypeRef)longFormatter);
    longFormatter = 0;
  }
}

CFStringRef UIFormatDateWithLongFormat(const __CFDate *a1, const __CFString *a2)
{
  CFTimeZoneRef v4 = CFTimeZoneCopySystem();
  if (!v4) {
    return 0;
  }
  CFTimeZoneRef v5 = v4;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v7 = *(_OWORD *)&CFAbsoluteTimeGetGregorianDate(Current, v5);
  *(void *)&v27.year = v7 & 0xFFFFFFFFFFFFLL;
  v27.second = 0.0;
  double AbsoluteTime = CFGregorianDateGetAbsoluteTime(v27, v5);
  *(void *)&v28.year = (v7 + 0x10000000000) & 0xFF0000000000 | v7 & 0xFFFFFFFFFFLL;
  v28.second = 0.0;
  double v9 = CFGregorianDateGetAbsoluteTime(v28, v5);
  CFRelease(v5);
  double v10 = MEMORY[0x18C103530](a1);
  if (v10 >= v9) {
    goto LABEL_13;
  }
  if (AbsoluteTime - v10 < 0.0)
  {
    CFLocaleRef v11 = CFLocaleCopyCurrent();
    unsigned int v12 = _UITimeFormatIs24HourMode();
    if (todayFormatter && v12 != __use24HourFormat) {
      __use24HourFormat = v12;
    }
    CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(0, (CFDateFormatterRef)todayFormatter, a1);
    if (StringWithDate)
    {
      CFStringRef v14 = StringWithDate;
      Mutableuint64_t Copy = CFStringCreateMutableCopy(0, 20, StringWithDate);
      if (MutableCopy)
      {
        uint64_t v16 = MutableCopy;
        CFRelease(v14);
        CFStringLowercase(v16, v11);
        if (v11) {
          CFRelease(v11);
        }
        return v16;
      }
      if (v11) {
        CFRelease(v11);
      }
      CFLocaleRef v23 = (const __CFLocale *)v14;
      goto LABEL_38;
    }
    if (v11)
    {
      CFLocaleRef v23 = v11;
LABEL_38:
      CFRelease(v23);
    }
    return 0;
  }
  if (AbsoluteTime - v10 <= 86400.0)
  {
    long long v17 = (__CFDateFormatter *)relativeFormatter;
    if (!relativeFormatter)
    {
      CFLocaleRef v21 = CFLocaleCopyCurrent();
      uint64_t v22 = CFDateFormatterCreate(0, v21, kCFDateFormatterShortStyle, kCFDateFormatterNoStyle);
      relativeFormatter = (uint64_t)v22;
      if (v21)
      {
        CFRelease(v21);
        uint64_t v22 = (__CFDateFormatter *)relativeFormatter;
      }
      if (!v22) {
        return 0;
      }
      CFDateFormatterSetProperty(v22, (CFStringRef)*MEMORY[0x1E4F1D070], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      long long v17 = (__CFDateFormatter *)relativeFormatter;
    }
    goto LABEL_14;
  }
  if (v9 - v10 <= 604800.0)
  {
    long long v17 = (__CFDateFormatter *)dayFormatter;
    if (!dayFormatter)
    {
      CFLocaleRef v24 = CFLocaleCopyCurrent();
      char v25 = CFDateFormatterCreate(0, v24, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
      dayFormatter = (uint64_t)v25;
      if (v24)
      {
        CFRelease(v24);
        char v25 = (__CFDateFormatter *)dayFormatter;
      }
      if (!v25) {
        return 0;
      }
      CFDateFormatterSetFormat(v25, @"cccc");
      long long v17 = (__CFDateFormatter *)dayFormatter;
    }
  }
  else
  {
LABEL_13:
    long long v17 = (__CFDateFormatter *)longFormatter;
    if (!longFormatter)
    {
      CFLocaleRef v19 = CFLocaleCopyCurrent();
      CFDateFormatterRef v20 = CFDateFormatterCreate(0, v19, (CFDateFormatterStyle)(2 * (a2 == 0)), kCFDateFormatterNoStyle);
      longFormatter = (uint64_t)v20;
      if (v19)
      {
        CFRelease(v19);
        long long v17 = (__CFDateFormatter *)longFormatter;
        if (!longFormatter) {
          return 0;
        }
      }
      else
      {
        long long v17 = v20;
        if (!v20) {
          return 0;
        }
      }
      if (a2)
      {
        CFDateFormatterSetFormat(v17, a2);
        long long v17 = (__CFDateFormatter *)longFormatter;
      }
    }
  }
LABEL_14:
  return CFDateFormatterCreateStringWithDate(0, v17, a1);
}

CFStringRef _UITimeFormatIs24HourMode()
{
  _RegisterForLocaleChangeNotificationIfNecessary();
  os_log_t v0 = (__CFDateFormatter *)todayFormatter;
  if (!todayFormatter)
  {
    CFLocaleRef v1 = CFLocaleCopyCurrent();
    todayFormatter = (uint64_t)CFDateFormatterCreate(0, v1, kCFDateFormatterNoStyle, kCFDateFormatterShortStyle);
    CFRelease(v1);
    os_log_t v0 = (__CFDateFormatter *)todayFormatter;
  }
  CFStringRef result = CFDateFormatterGetFormat(v0);
  if (result)
  {
    CFStringRef v3 = result;
    if (CFStringFind(result, @"H", 0).location == -1) {
      return (const __CFString *)(CFStringFind(v3, @"k", 0).location != -1);
    }
    else {
      return (const __CFString *)1;
    }
  }
  return result;
}

const void *UIDateFormatStringForFormatTypeForLocale(const __CFLocale *a1, void *key)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v4 = (const __CFDictionary *)__LocaleDateFormats;
  if (!__LocaleDateFormats)
  {
    _RegisterForLocaleChangeNotificationIfNecessary();
    __LocaleDateFormats = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithContentsOfFile:", objc_msgSend((id)CPSharedResourcesDirectory(), "stringByAppendingPathComponent:", @"Library/Caches/DateFormats.plist"));
    CFTimeZoneRef v5 = (CFStringRef *)MEMORY[0x1E4F1D3B8];
    if (!__LocaleDateFormats) {
      goto LABEL_15;
    }
    CFStringRef VersionString = _CreateVersionString();
    CFStringRef v7 = *v5;
    CFPropertyListRef v8 = CFPreferencesCopyAppValue(@"AppleICUForce12HourTime", *v5);
    CFPropertyListRef v9 = CFPreferencesCopyAppValue(@"AppleICUForce24HourTime", v7);
    CFDictionaryRef v10 = (const __CFDictionary *)__LocaleDateFormats;
    unint64_t v11 = MEMORY[0x18C103670](a1);
    if (!_CachedValueIsEqualToExpectedValue(v10, @"Locale", v11)
      || !_CachedValueIsEqualToExpectedValue((const __CFDictionary *)__LocaleDateFormats, @"Version", (unint64_t)VersionString)|| !_CachedValueIsEqualToExpectedValue((const __CFDictionary *)__LocaleDateFormats, @"AppleICUForce12HourTime", (unint64_t)v8)|| !_CachedValueIsEqualToExpectedValue((const __CFDictionary *)__LocaleDateFormats, @"AppleICUForce24HourTime", (unint64_t)v9))
    {
      CFRelease((CFTypeRef)__LocaleDateFormats);
      __LocaleDateFormats = 0;
    }
    if (VersionString) {
      CFRelease(VersionString);
    }
    if (v8) {
      CFRelease(v8);
    }
    if (v9) {
      CFRelease(v9);
    }
    CFDictionaryRef v4 = (const __CFDictionary *)__LocaleDateFormats;
    if (!__LocaleDateFormats)
    {
LABEL_15:
      long long v75 = xmmword_1E530C9B8;
      long long v76 = *(_OWORD *)&off_1E530C9C8;
      long long v77 = xmmword_1E530C9D8;
      id v78 = @"y";
      *(_OWORD *)values = xmmword_1E530C978;
      long long v72 = *(_OWORD *)&off_1E530C988;
      long long v73 = xmmword_1E530C998;
      long long v74 = *(_OWORD *)&off_1E530C9A8;
      __LocaleDateFormats = (uint64_t)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unsigned int v12 = CFDateFormatterCreate(0, a1, kCFDateFormatterNoStyle, kCFDateFormatterShortStyle);
      CFTypeRef v13 = CFDateFormatterCopyProperty(v12, (CFDateFormatterKey)*MEMORY[0x1E4F1D058]);
      __int16 v69 = key;
      if (v13 || (CFTypeRef v13 = CFDateFormatterCopyProperty(v12, (CFDateFormatterKey)*MEMORY[0x1E4F1D0A0])) != 0)
      {
        CFRelease(v13);
        int v14 = 0;
      }
      else
      {
        int v14 = 1;
      }
      CFStringRef Format = CFDateFormatterGetFormat(v12);
      CFStringRef v70 = (const __CFString *)CFRetain(Format);
      CFRelease(v12);
      uint64_t v16 = CFDateFormatterCreate(0, a1, kCFDateFormatterMediumStyle, kCFDateFormatterNoStyle);
      CFStringRef v17 = CFDateFormatterGetFormat(v16);
      CFStringRef v18 = (const __CFString *)CFRetain(v17);
      CFRelease(v16);
      CFArrayRef v19 = CFArrayCreate(0, (const void **)values, 15, MEMORY[0x1E4F1D510]);
      CFArrayRef v20 = (const __CFArray *)MEMORY[0x18C1034C0](0, v19, 0, a1);
      CFRelease(v19);
      CFIndex Count = CFArrayGetCount(v20);
      if (Count >= 1)
      {
        CFIndex v22 = Count;
        for (CFIndex i = 0; i != v22; ++i)
        {
          CFLocaleRef v24 = (__CFDictionary *)__LocaleDateFormats;
          char v25 = *(&off_1E530C900 + i);
          ValueAtIndeCGFloat x = CFArrayGetValueAtIndex(v20, i);
          CFDictionarySetValue(v24, v25, ValueAtIndex);
        }
      }
      CFRelease(v20);
      CFIndex Length = CFStringGetLength(v18);
      MutableCFStringRef Copy = CFStringCreateMutableCopy(0, Length, v18);
      v80.locatiouint64_t n = 0;
      v80.length = Length;
      CFIndex v29 = CFStringFindAndReplace(MutableCopy, @",", @" ", v80, 0);
      v81.locatiouint64_t n = 0;
      v81.length = Length;
      CFIndex v30 = CFStringFindAndReplace(MutableCopy, @"/", @" ", v81, 0) + v29;
      v82.locatiouint64_t n = 0;
      v82.length = Length;
      CFIndex v31 = CFStringFindAndReplace(MutableCopy, @"-", @" ", v82, 0);
      v83.locatiouint64_t n = 0;
      v83.length = Length;
      if (v30 + v31 + CFStringFindAndReplace(MutableCopy, @"  ", @" ", v83, 0) < 1)
      {
        CFRetain(v18);
        CFStringRef Copy = v18;
      }
      else
      {
        CFStringRef Copy = CFStringCreateCopy(0, MutableCopy);
      }
      CFRelease(MutableCopy);
      CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, @"UIAbbreviatedDateFormatWithoutCommas", Copy);
      CFRelease(Copy);
      keCGFloat y = v69;
      CFStringRef v33 = v70;
      if (v14)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, @"UINoAMPMTimeFormat", v70);
        uint64_t Value = CFDictionaryGetValue((CFDictionaryRef)__LocaleDateFormats, @"UIMinutelessTimeFormat");
        CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, @"UIHourFormat", Value);
      }
      else
      {
        CFStringRef v35 = _StripAMPMAndCopy(v70);
        CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, @"UINoAMPMTimeFormat", v35);
        CFRelease(v35);
        CFStringRef v36 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)__LocaleDateFormats, @"UIMinutelessTimeFormat");
        CFStringRef v37 = _StripAMPMAndCopy(v36);
        CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, @"UIHourFormat", v37);
        CFRelease(v37);
      }
      CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, @"UINotesFormatWithYear", v18);
      uint64_t v38 = MEMORY[0x18C103670](a1);
      id v39 = _UIKitBundle();
      long long v40 = (void *)[v39 pathForResource:v38 ofType:@"plist" inDirectory:@"DateFormats"];
      if (!v40)
      {
        unsigned __int8 v64 = (void *)[MEMORY[0x1E4F1CA60] dictionaryWithCapacity:4];
        objc_msgSend(v64, "setObject:forKey:", CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D218]), *MEMORY[0x1E4F1C438]);
        CFTypeRef v65 = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D220]);
        if (v65) {
          [v64 setObject:v65 forKey:*MEMORY[0x1E4F1C470]];
        }
        CFTypeRef v66 = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
        __int16 v67 = (void *)MEMORY[0x1E4F1C400];
        if (v66) {
          [v64 setObject:v66 forKey:*MEMORY[0x1E4F1C400]];
        }
        CFTypeRef v68 = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D1E0]);
        if (v68) {
          [v64 setObject:v68 forKey:@"calendar"];
        }
        long long v40 = objc_msgSend(v39, "pathForResource:ofType:inDirectory:", objc_msgSend(MEMORY[0x1E4F1CA20], "localeIdentifierFromComponents:", v64, v69), @"plist", @"DateFormats");
        if (v66 && !v40)
        {
          [v64 removeObjectForKey:*v67];
          long long v40 = objc_msgSend(v39, "pathForResource:ofType:inDirectory:", objc_msgSend(MEMORY[0x1E4F1CA20], "localeIdentifierFromComponents:", v64), @"plist", @"DateFormats");
        }
        if (v68)
        {
          CFStringRef v33 = v70;
          if (!v40)
          {
            [v64 removeObjectForKey:@"calendar"];
            if (v66) {
              [v64 setObject:v66 forKey:*v67];
            }
            long long v40 = objc_msgSend(v39, "pathForResource:ofType:inDirectory:", objc_msgSend(MEMORY[0x1E4F1CA20], "localeIdentifierFromComponents:", v64), @"plist", @"DateFormats");
            if (v66 && !v40)
            {
              [v64 removeObjectForKey:*v67];
              long long v40 = objc_msgSend(v39, "pathForResource:ofType:inDirectory:", objc_msgSend(MEMORY[0x1E4F1CA20], "localeIdentifierFromComponents:", v64), @"plist", @"DateFormats");
            }
          }
        }
        else
        {
          CFStringRef v33 = v70;
        }
      }
      id v41 = v40;
      long long v42 = (CFStringRef *)MEMORY[0x1E4F1D3B8];
      if (v41)
      {
        long long v43 = v41;
        CFDictionaryRef v44 = (const __CFDictionary *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithContentsOfFile:v41];
        if (v44)
        {
          CFDictionaryRef v45 = v44;
          CFDictionaryApplyFunction(v44, (CFDictionaryApplierFunction)_AddOverrideToFormatsDictionary, (void *)__LocaleDateFormats);
          CFRelease(v45);
        }
        CFRelease(v43);
      }
      CFStringRef v46 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)__LocaleDateFormats, @"UIAbbreviatedMonthDayFormat");
      if (v46)
      {
        CFStringRef v47 = v46;
        CFIndex v48 = CFStringGetLength(v46);
        double v49 = CFStringCreateMutableCopy(0, v48, v47);
        CFStringAppend(v49, @"   ");
        CFStringAppend(v49, v33);
        CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, @"UINotesDisplayFormat", v49);
        CFRelease(v49);
      }
      CFStringRef v50 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)__LocaleDateFormats, @"UINotesFormatWithYear");
      if (v50)
      {
        CFStringRef v51 = v50;
        CFIndex v52 = CFStringGetLength(v50);
        long long v53 = CFStringCreateMutableCopy(0, v52, v51);
        CFStringAppend(v53, @"   ");
        CFStringAppend(v53, v33);
        CFDictionarySetValue((CFMutableDictionaryRef)__LocaleDateFormats, @"UINotesDisplayFormatWithYear", v53);
        CFRelease(v53);
      }
      CFRelease(v18);
      CFRelease(v33);
      CFStringRef v54 = _CreateVersionString();
      if (v54)
      {
        CFStringRef v55 = v54;
        CFStringRef v56 = *v42;
        CFPropertyListRef v57 = CFPreferencesCopyAppValue(@"AppleICUForce24HourTime", *v42);
        if (v57)
        {
          long long v58 = v57;
          CFDictionaryAddValue((CFMutableDictionaryRef)__LocaleDateFormats, @"AppleICUForce24HourTime", v57);
          CFRelease(v58);
        }
        CFPropertyListRef v59 = CFPreferencesCopyAppValue(@"AppleICUForce12HourTime", v56);
        if (v59)
        {
          long long v60 = v59;
          CFDictionaryAddValue((CFMutableDictionaryRef)__LocaleDateFormats, @"AppleICUForce12HourTime", v59);
          CFRelease(v60);
        }
        id v61 = (__CFDictionary *)__LocaleDateFormats;
        double v62 = (const void *)MEMORY[0x18C103670](a1);
        CFDictionaryAddValue(v61, @"Locale", v62);
        CFDictionaryAddValue((CFMutableDictionaryRef)__LocaleDateFormats, @"Version", v55);
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28F98], "dataWithPropertyList:format:options:error:", __LocaleDateFormats, 200, 0, 0), "writeToFile:options:error:", objc_msgSend((id)CPSharedResourcesDirectory(), "stringByAppendingPathComponent:", @"Library/Caches/DateFormats.plist"), 1, 0);
        CFRelease(v55);
      }
      CFDictionaryRef v4 = (const __CFDictionary *)__LocaleDateFormats;
    }
  }
  return CFDictionaryGetValue(v4, key);
}

void _RegisterForLocaleChangeNotificationIfNecessary()
{
  if ((_RegisterForLocaleChangeNotificationIfNecessary___registeredForLocaleWillChange & 1) == 0)
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)_LocaleWillChangeCallback, @"kCFLocaleCurrentLocaleDidChangeNotification-2", 0, CFNotificationSuspensionBehaviorDrop);
    _RegisterForLocaleChangeNotificationIfNecessary___registeredForLocaleWillChange = 1;
  }
}

CFStringRef _CreateVersionString()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)versionArraCGFloat y = 0;
  ulocdata_getCLDRVersion();
  u_versionToString(versionArray, versionString);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d-%s", 6, versionString);
}

BOOL _CachedValueIsEqualToExpectedValue(const __CFDictionary *a1, const void *a2, unint64_t a3)
{
  uint64_t Value = CFDictionaryGetValue(a1, a2);
  unint64_t v5 = (unint64_t)Value;
  return a3 && Value && CFEqual(Value, (CFTypeRef)a3) || (a3 | v5) == 0;
}

CFStringRef _StripAMPMAndCopy(CFStringRef theString)
{
  CFStringRef Copy = theString;
  MutableCFStringRef Copy = CFStringCreateMutableCopy(0, 0, theString);
  v6.length = CFStringGetLength(MutableCopy);
  v6.locatiouint64_t n = 0;
  CFIndex v3 = CFStringFindAndReplace(MutableCopy, @"a ", &stru_1ED0E84C0, v6, 0);
  v7.length = CFStringGetLength(MutableCopy);
  v7.locatiouint64_t n = 0;
  CFIndex v4 = CFStringFindAndReplace(MutableCopy, @" a", &stru_1ED0E84C0, v7, 0) + v3;
  v8.length = CFStringGetLength(MutableCopy);
  v8.locatiouint64_t n = 0;
  if (v4 + CFStringFindAndReplace(MutableCopy, @"a", &stru_1ED0E84C0, v8, 0) < 1) {
    CFRetain(Copy);
  }
  else {
    CFStringRef Copy = CFStringCreateCopy(0, MutableCopy);
  }
  CFRelease(MutableCopy);
  return Copy;
}

void _AddOverrideToFormatsDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

const void *UIDateFormatStringForFormatType(void *a1)
{
  CFLocaleRef v2 = CFLocaleCopyCurrent();
  CFIndex v3 = UIDateFormatStringForFormatTypeForLocale(v2, a1);
  CFRelease(v2);
  return v3;
}

void sub_186835D48(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

Class __getLNUserActivityHelperClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB264948)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __AppIntentsLibraryCore_block_invoke_0;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530CA20;
    uint64_t v8 = 0;
    qword_1EB264948 = _sl_dlopen();
  }
  if (!qword_1EB264948)
  {
    CFIndex v3 = [MEMORY[0x1E4F28B00] currentHandler];
    CFIndex v4 = [NSString stringWithUTF8String:"void *AppIntentsLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIActivityContinuationManager.m", 34, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("LNUserActivityHelper");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    CFIndex v3 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v5 = [NSString stringWithUTF8String:"Class getLNUserActivityHelperClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIActivityContinuationManager.m", 35, @"Unable to find class %s", "LNUserActivityHelper");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1277 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AppIntentsLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB264948 = result;
  return result;
}

void sub_186838F08(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 64));
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void ___isDraggingSystemConnection_block_invoke()
{
  if ([(id)UIApp isFrontBoard])
  {
    _MergedGlobals_1278 = 1;
  }
  else
  {
    id v0 = (id)[(id)_UIDraggingSystemConnectionEntitlement copy];
    _MergedGlobals_1278 = UISelfTaskHasEntitlement(v0);
  }
}

id UIDebuggingViewControllerAtTopLevel(void *a1, objc_class *a2)
{
  id v3 = a1;
  CFIndex v4 = +[UIDebuggingInformationOverlay overlay];
  unint64_t v5 = [v4 rootTableViewController];
  id v6 = [v5 topLevelViewControllerForName:v3];
  if (!v6)
  {
    id v6 = objc_alloc_init(a2);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v5 addTopLevelViewController:v6 forName:v3];
      [v6 setTitle:v3];
    }
    else
    {

      id v6 = 0;
    }
  }

  return v6;
}

BOOL _UIGetDebuggingOverlayEnabled()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  if (_UIInternalPreferencesRevisionVar < 1
    || (int v3 = _UIInternalPreference_DebuggingOverlayEnabled,
        _UIInternalPreferencesRevisionVar == _UIInternalPreference_DebuggingOverlayEnabled))
  {
    BOOL v1 = 0;
  }
  else
  {
    do
    {
      BOOL v1 = v0 < v3;
      if (v0 < v3) {
        break;
      }
      _UIInternalPreferenceSync(v0, &_UIInternalPreference_DebuggingOverlayEnabled, @"DebuggingOverlayEnabled", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool);
      int v3 = _UIInternalPreference_DebuggingOverlayEnabled;
    }
    while (v0 != _UIInternalPreference_DebuggingOverlayEnabled);
  }
  return byte_1EB2579C4 && v1;
}

void registerTouchObserver(void *a1)
{
  id v1 = a1;
  id v3 = +[UIDebuggingInformationOverlay overlay];
  CFLocaleRef v2 = [v3 touchObservers];
  [v2 addObject:v1];
}

void sub_18683E008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_186840C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186840EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _shortCandidateDescr(void *a1)
{
  id v1 = NSString;
  CFLocaleRef v2 = NSNumber;
  id v3 = a1;
  CFIndex v4 = [v3 candidate];
  unint64_t v5 = objc_msgSend(v2, "numberWithUnsignedInteger:", objc_msgSend(v4, "length"));
  id v6 = NSNumber;
  long long v7 = [v3 input];

  uint64_t v8 = objc_msgSend(v6, "numberWithUnsignedInteger:", objc_msgSend(v7, "length"));
  uint64_t v9 = [v1 stringWithFormat:@"Predicted %@ characters based on %@ characters", v5, v8];

  return v9;
}

id _shortCompletionDescr(void *a1)
{
  id v1 = [a1 completion];
  CFLocaleRef v2 = _shortCandidateDescr(v1);

  return v2;
}

BOOL _outputIsSimpleDeletion(void *a1)
{
  id v1 = a1;
  CFLocaleRef v2 = [v1 insertionText];
  uint64_t v3 = [v2 length];

  BOOL v5 = !v3
    && ![v1 forwardDeletionCount]
    && ([v1 acceptedCandidate], CFIndex v4 = objc_claimAutoreleasedReturnValue(), v4, !v4)
    && [v1 deletionCount] != 0;

  return v5;
}

void sub_18684885C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18684C9EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18684D088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _UIPFloat(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  CFDictionaryRef v10 = +[_UIPrototypingSettingsManager sharedManager];
  unint64_t v11 = [v10 settingOfType:1 withName:v9];

  unsigned int v12 = [NSNumber numberWithDouble:a2];
  [v11 setMinimumValue:v12];

  CFTypeRef v13 = [NSNumber numberWithDouble:a3];
  [v11 setMaximumValue:v13];

  int v14 = [NSNumber numberWithDouble:a4];
  [v11 setDefaultValue:v14];

  double v15 = -a5;
  if (a5 >= 0.0) {
    double v15 = a5;
  }
  [v11 setStepSize:v15];
  uint64_t v16 = [v11 currentValue];
  [v16 floatValue];
  double v18 = v17;

  return v18;
}

uint64_t _UIPBool(void *a1, uint64_t a2)
{
  id v3 = a1;
  CFIndex v4 = +[_UIPrototypingSettingsManager sharedManager];
  BOOL v5 = [v4 settingOfType:2 withName:v3];

  id v6 = [NSNumber numberWithBool:a2];
  [v5 setDefaultValue:v6];

  long long v7 = [v5 currentValue];
  uint64_t v8 = [v7 BOOLValue];

  return v8;
}

uint64_t _UIPInt(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  id v9 = a1;
  CFDictionaryRef v10 = +[_UIPrototypingSettingsManager sharedManager];
  unint64_t v11 = [v10 settingOfType:0 withName:v9];

  unsigned int v12 = [NSNumber numberWithInteger:a2];
  [v11 setMinimumValue:v12];

  CFTypeRef v13 = [NSNumber numberWithInteger:a3];
  [v11 setMaximumValue:v13];

  int v14 = [NSNumber numberWithInteger:a4];
  [v11 setDefaultValue:v14];

  [v11 setStepSize:(double)a5];
  double v15 = [v11 currentValue];
  uint64_t v16 = [v15 integerValue];

  return v16;
}

void sub_186859510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18685E75C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18685EA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18685EDD0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_186860BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186863254(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

id _UICatalystFaultLog()
{
  if (qword_1EB264A18 != -1) {
    dispatch_once(&qword_1EB264A18, &__block_literal_global_597);
  }
  int v0 = (void *)_MergedGlobals_1283;
  return v0;
}

void __UILogSyncCategories()
{
  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_1284);
  for (uint64_t i = qword_1EB264A28; i; uint64_t i = *(void *)(i + 32))
  {
    uint64_t v1 = *(void *)i;
    int v2 = *(_DWORD *)(i + 8);
    id v3 = [*(id *)(i + 16) objectForKey:*(void *)(i + 24)];
    __updateCategoryFlagValueLocked(v1, v2, v3);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_1284);
}

NSObject *__UILogRegulatoryLog(unsigned char *__s2)
{
  if (qword_1EB264A38 != -1) {
    dispatch_once(&qword_1EB264A38, &__block_literal_global_598);
  }
  if (!qword_1EB264A30) {
    return 0;
  }
  int v2 = *(NSObject **)(__UILogCategoryGetNode(__s2, qword_1EB264A30, (uint64_t (*)(unsigned char *))__UILogRegulatoryCategoryNewNode)- 8);
  if (!os_log_type_enabled(v2, OS_LOG_TYPE_INFO)) {
    return 0;
  }
  return v2;
}

char *__UILogRegulatoryCategoryNewNode(const char *a1)
{
  unint64_t v2 = (g_UILogCategoriesAllocator_1 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v2 < g_UILogCategoriesAllocator_1 || v2 > 0x26E0)
  {
    CFIndex v4 = (char *)malloc_type_malloc(0x2800uLL, 0x67DDC7D9uLL);
    unint64_t v2 = 0;
    qword_1EB264A40 = (uint64_t)v4;
  }
  else
  {
    CFIndex v4 = (char *)qword_1EB264A40;
  }
  g_UILogCategoriesAllocator_1 = v2 + 288;
  BOOL v5 = &v4[v2];
  *((void *)v5 + 1) = os_log_create("com.apple.greentea", a1);
  *((_DWORD *)v5 + 1) = 0;
  char *v5 = 0;
  return v5 + 16;
}

__CFString *_UIEventDeferringShorterRecreationReasonStringForReason(void *a1)
{
  if ([a1 isEqualToString:@"_UIEventDeferringRecreationReasonDetachedContext"]) {
    return @"detachedContext";
  }
  if ([a1 isEqualToString:@"_UIEventDeferringRecreationReasonChangingScreenIdentifier"]) {
    return @"changingScreenIdentifier";
  }
  if ([a1 isEqualToString:@"_UIEventDeferringRecreationReasonNoLongerTopRemoteRecord"]) {
    return @"noLongerTopRemoteRecord";
  }
  if ([a1 isEqualToString:@"_UIEventDeferringRecreationReasonBehaviorDelegateSuppressed"]) {
    return @"behaviorDelegateSuppressed";
  }
  if ([a1 isEqualToString:@"_UIEventDeferringRecreationReasonTopRemoteElementNotVisible"])return @"topRemoteElementNotVisible"; {
  return &stru_1ED0E84C0;
  }
}

uint64_t _UIApplicationHasAppLinkEntitlements()
{
  if (qword_1EB264A58 != -1) {
    dispatch_once(&qword_1EB264A58, &__block_literal_global_599);
  }
  return _MergedGlobals_1285;
}

id _UIAppLinkForURL(void *a1)
{
  id v1 = a1;
  uint64_t v10 = 0;
  unint64_t v11 = &v10;
  uint64_t v12 = 0x3032000000;
  CFTypeRef v13 = __Block_byref_object_copy__223;
  int v14 = __Block_byref_object_dispose__223;
  id v15 = 0;
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  id v3 = (void *)MEMORY[0x1E4F22398];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = ___UIAppLinkForURL_block_invoke;
  void v7[3] = &unk_1E530CEB0;
  id v9 = &v10;
  CFIndex v4 = v2;
  uint64_t v8 = v4;
  [v3 getAppLinkWithURL:v1 completionHandler:v7];
  dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  id v5 = (id)v11[5];

  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_186864DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double *currentUpdateInfo()
{
  if (off_1EB256BF8 && *((_DWORD *)off_1EB256BF8 + 160) == 1) {
    int v0 = -[UIUpdateInfo initWithUpdateParameters:]([UIUpdateInfo alloc], (uint64_t)off_1EB256BF8 + 648);
  }
  else {
    int v0 = 0;
  }
  return v0;
}

double _UIClassicControllerScaleFactorForZoomedIn(double a1, double a2)
{
  CFIndex v4 = +[UIScreen mainScreen];
  [v4 _unjailedReferenceBounds];
  double v6 = v5;
  double v8 = v7;

  id v9 = +[UIScreen mainScreen];
  uint64_t v10 = v9;
  if (v6 / a1 <= v8 / a2) {
    double v11 = v6 / a1;
  }
  else {
    double v11 = v8 / a2;
  }
  _UIAdditionalScaleFactorForClassicPresentationWithHomeAffordance(v9);
  double v13 = v11 * v12;

  v15.origin.CGFloat y = v8 + -72.0;
  v16.size.CGFloat width = a1 * v13;
  v16.size.CGFloat height = a2 * v13;
  v16.origin.CGFloat y = round(v8 * 0.5 - a2 * v13 * 0.5);
  v16.origin.CGFloat x = round(v6 * 0.5 - a1 * v13 * 0.5);
  v15.size.CGFloat width = 72.0;
  v15.origin.CGFloat x = 0.0;
  v15.size.CGFloat height = 72.0;
  if (CGRectIntersectsRect(v15, v16))
  {
    if ((v6 + -144.0) / a1 <= (v8 + -144.0) / a2) {
      return (v6 + -144.0) / a1;
    }
    else {
      return (v8 + -144.0) / a2;
    }
  }
  return v13;
}

double _UIClassicControllerStatusBarInsetsForPadOnRoundedPad(void *a1, uint64_t a2)
{
  id v3 = a1;
  CFIndex v4 = +[UIDevice currentDevice];
  uint64_t v5 = [v4 userInterfaceIdiom];

  if ((v5 & 0xFFFFFFFFFFFFFFFBLL) == 1
    && !UIApplicationSceneClassicModeExpectsRoundedCorners(a2)
    && UIApplicationSceneClassicModeRepresentsPad(a2))
  {
    [v3 _displayCornerRadius];
    double v6 = 0.0;
    if (v7 > 0.0)
    {
      +[UIStatusBar _roundedPadEdgeInsets];
      +[UIStatusBar _regularPadEdgeInsets];
      +[UIStatusBar _regularPadBaselineOffset];
      double v9 = v8;
      +[UIStatusBar _roundedPadBaselineOffset];
      double v6 = v9 - v10;
    }
  }
  else
  {
    double v6 = 0.0;
  }

  return v6;
}

id UIArrayByKeepingObjectsInSet(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if ([a1 count])
  {
    CFIndex v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(a2, "count"));
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v3);
          }
          uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8 * i);
          if ([a2 containsObject:v9]) {
            [v4 addObject:v9];
          }
        }
        uint64_t v6 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v6);
    }
    return v4;
  }
  return v3;
}

void sub_1868662AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___configureDefaultStatisticHandling_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28E10] strongToStrongObjectsMapTable];
  id v1 = (void *)_configureDefaultStatisticHandling_statisticInfo;
  _configureDefaultStatisticHandling_statisticInfo = v0;

  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = ___configureDefaultStatisticHandling_block_invoke_19;
  aBlock[3] = &unk_1E530CF20;
  id v10 = &__block_literal_global_16_7;
  dispatch_semaphore_t v2 = (void (**)(void *, __CFString *, id (*)()))_Block_copy(aBlock);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = ___configureDefaultStatisticHandling_block_invoke_2_21;
  void v7[3] = &unk_1E530CF20;
  id v8 = &__block_literal_global_16_7;
  id v3 = (void (**)(void *, __CFString *, id (*)()))_Block_copy(v7);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = ___configureDefaultStatisticHandling_block_invoke_3;
  v5[3] = &unk_1E530CF20;
  id v6 = &__block_literal_global_16_7;
  CFIndex v4 = (void (**)(void *, __CFString *, id (*)()))_Block_copy(v5);
  v2[2](v2, @"UIButton", _buttonTapStatisticWithSuffix_UIButton);
  v2[2](v2, @"_UIButtonBarButton", _buttonTapStatisticWithSuffix_SubclassName);
  v2[2](v2, @"UITabBarButton", _buttonTapStatisticWithSuffix_SubclassName);
  v2[2](v2, @"UIToolbarButton", _buttonTapStatisticWithSuffix_SubclassName);
  v2[2](v2, @"UITableViewCellDetailDisclosureView", _buttonTapStatisticWithSuffix_SubclassName);
  v2[2](v2, @"UITableViewCellEditControl", _buttonTapStatisticWithSuffix_SubclassName);
  v2[2](v2, @"UITableViewCellReorderControl", _controlTapStatisticWithSuffix_SubclassName);
  v2[2](v2, @"UITableViewCellReorderControl", _controlTapStatisticWithSuffix_SubclassName);
  v2[2](v2, @"_UIActionSlider", _controlTapStatisticWithSuffix_SubclassName);
  v3[2](v3, @"UIStepper", _controlValueChangeStatisticWithSuffix_SubclassName);
  v3[2](v3, @"UIPageControl", _controlValueChangeStatisticWithSuffix_SubclassName);
  v3[2](v3, @"UITableViewIndex", _controlValueChangeStatisticWithSuffix_SubclassName);
  v3[2](v3, @"UIPickerView", _controlValueChangeStatisticWithSuffix_SubclassName);
  v3[2](v3, @"UISwitch", _controlValueChangeStatisticWithSuffix_SubclassName);
  v3[2](v3, @"UISegmentedControl", _controlValueChangeStatisticWithSuffix_SubclassName);
  v4[2](v4, @"UISlider", _sliderInteractionDurationStatisticWithSuffix_SubclassName);
  v4[2](v4, @"UIMovieScrubber", _sliderInteractionDurationStatisticWithSuffix_SubclassName);
}

void ___configureDefaultStatisticHandling_block_invoke_2(uint64_t a1, void *a2, const char *a3, void (*a4)(void))
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  uint64_t v7 = NSClassFromString(v6);
  if (v7)
  {
    id v8 = v7;
    InstanceMethod = class_getInstanceMethod(v7, a3);
    TypeEncoding = method_getTypeEncoding(InstanceMethod);
    class_addMethod(v8, a3, a4, TypeEncoding);
  }
  else if (os_variant_has_internal_diagnostics())
  {
    long long v12 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      int v13 = 138412290;
      long long v14 = v6;
      _os_log_fault_impl(&dword_1853B0000, v12, OS_LOG_TYPE_FAULT, "unable to lookup class named '%@' to use for statistics", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    long long v11 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_block_invoke___s_category_12) + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138412290;
      long long v14 = v6;
      _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, "unable to lookup class named '%@' to use for statistics", (uint8_t *)&v13, 0xCu);
    }
  }
}

uint64_t ___configureDefaultStatisticHandling_block_invoke_19(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t ___configureDefaultStatisticHandling_block_invoke_2_21(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t ___configureDefaultStatisticHandling_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id _buttonTapStatisticWithSuffix_UIButton()
{
  return +[_UIStatistics controlTapCountWithCategory:@"button" suffix:@"UIButton"];
}

id _buttonTapStatisticWithSuffix_SubclassName()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  id v1 = NSStringFromClass(v0);
  dispatch_semaphore_t v2 = +[_UIStatistics controlTapCountWithCategory:@"button" suffix:v1];

  return v2;
}

id _controlTapStatisticWithSuffix_SubclassName()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  id v1 = NSStringFromClass(v0);
  dispatch_semaphore_t v2 = +[_UIStatistics controlTapCountWithCategory:@"control" suffix:v1];

  return v2;
}

id _controlValueChangeStatisticWithSuffix_SubclassName()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  id v1 = NSStringFromClass(v0);
  dispatch_semaphore_t v2 = +[_UIStatistics controlValueChangeEmittedCountWithCategory:@"control" suffix:v1];

  return v2;
}

id _sliderInteractionDurationStatisticWithSuffix_SubclassName()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  id v1 = NSStringFromClass(v0);
  dispatch_semaphore_t v2 = +[_UIStatistics controlInteractionDurationDistributionWithCategory:@"slider" suffix:v1];

  return v2;
}

void _UIFocusSystemAssertIfNotSafari()
{
  if (qword_1EB264A78 != -1) {
    dispatch_once(&qword_1EB264A78, &__block_literal_global_600);
  }
  if (!_MergedGlobals_1287)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v0 = [NSString stringWithUTF8String:"void _UIFocusSystemAssertIfNotSafari(void)"];
    [v1 handleFailureInFunction:v0 file:@"UIFocusSystem_SafariOnly.m" lineNumber:30 description:@"You are calling out to a method prefixed with '_safari_' but it looks like you are not Safari. I mean... what did you expect to happen?"];
  }
}

void UIKVCAccessProhibited(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (dyld_program_sdk_at_least())
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3A8], @"Access to %@'s %@ ivar is prohibited. This is an application bug", a2, a1 format];
  }
  else if (os_variant_has_internal_diagnostics())
  {
    if (qword_1EB264A90 != -1) {
      dispatch_once(&qword_1EB264A90, &__block_literal_global_601);
    }
    uint64_t v5 = qword_1EB264A88;
    if (os_log_type_enabled((os_log_t)qword_1EB264A88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v7 = a2;
      __int16 v8 = 2112;
      uint64_t v9 = a1;
      _os_log_fault_impl(&dword_1853B0000, v5, OS_LOG_TYPE_FAULT, "Access to %@'s %@ ivar is prohibited. This is an application bug and will become a hard crash in a future release", buf, 0x16u);
    }
  }
  else
  {
    CFIndex v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_MergedGlobals_1288) + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      uint64_t v7 = a2;
      __int16 v8 = 2112;
      uint64_t v9 = a1;
      _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "Access to %@'s %@ ivar is prohibited. This is an application bug and will become a hard crash in a future release", buf, 0x16u);
    }
  }
}

uint64_t __UIFaultDebugAssertLog()
{
  if (qword_1EB264A90 != -1) {
    dispatch_once(&qword_1EB264A90, &__block_literal_global_601);
  }
  return qword_1EB264A88;
}

__CFString *_UIDebugFocusRelationshipBetween(uint64_t a1, uint64_t a2)
{
  return _UIDebugRelationshipBetween(a1, a2, (uint64_t (*)(uint64_t))RELATIONSHIP_FOCUS);
}

__CFString *_UIDebugRelationshipBetween(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v3 = @"One of the objects is nil.";
  if (!a1) {
    return v3;
  }
  uint64_t v4 = a2;
  if (!a2) {
    return v3;
  }
  uint64_t v5 = a1;
  if (a1 == a2) {
    return @"Both specified objects are the same";
  }
  uint64_t v7 = objc_opt_new();
  __int16 v8 = objc_opt_new();
  long long v42 = objc_opt_new();
  BOOL v9 = 1;
  BOOL v10 = 1;
  id v3 = @"No relationship found between the objects.";
  while (!v10)
  {
    uint64_t v5 = 0;
    if (v9) {
      goto LABEL_10;
    }
LABEL_8:
    uint64_t v4 = 0;
LABEL_12:
    BOOL v10 = v5 != 0;
    BOOL v9 = v4 != 0;
    if (!(v5 | v4)) {
      return v3;
    }
  }
  [v8 addObject:v5];
  if ([v7 containsObject:v5])
  {
    long long v42 = objc_msgSend(v42, "subarrayWithRange:", 0, objc_msgSend(v42, "indexOfObject:", v5) + 1);
    goto LABEL_17;
  }
  [v7 addObject:v5];
  uint64_t v5 = a3(v5);
  if (!v9) {
    goto LABEL_8;
  }
LABEL_10:
  [v42 addObject:v4];
  if (![v7 containsObject:v4])
  {
    [v7 addObject:v4];
    uint64_t v4 = a3(v4);
    goto LABEL_12;
  }
  __int16 v8 = objc_msgSend(v8, "subarrayWithRange:", 0, objc_msgSend(v8, "indexOfObject:", v4) + 1);
LABEL_17:
  long long v11 = (void *)MEMORY[0x1E4F28E78];
  uint64_t v12 = [v8 firstObject];
  if (v12)
  {
    uint64_t v13 = v12;
    long long v14 = NSString;
    uint64_t v15 = (objc_class *)objc_opt_class();
    uint64_t v16 = (__CFString *)[v14 stringWithFormat:@"<%@: %p>", NSStringFromClass(v15), v13];
  }
  else
  {
    uint64_t v16 = @"(nil)";
  }
  uint64_t v17 = [v42 firstObject];
  if (v17)
  {
    uint64_t v18 = v17;
    CFArrayRef v19 = NSString;
    CFArrayRef v20 = (objc_class *)objc_opt_class();
    CFLocaleRef v21 = (__CFString *)[v19 stringWithFormat:@"<%@: %p>", NSStringFromClass(v20), v18];
  }
  else
  {
    CFLocaleRef v21 = @"(nil)";
  }
  id v3 = (__CFString *)[v11 stringWithFormat:@"To get from %@ to %@", v16, v21];
  if ((unint64_t)[v8 count] >= 2)
  {
    [(__CFString *)v3 appendString:@" follow the parent hierarchy up\n"];
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    uint64_t v22 = [v8 countByEnumeratingWithState:&v47 objects:v52 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v48;
      do
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          if (*(void *)v48 != v24) {
            objc_enumerationMutation(v8);
          }
          uint64_t v26 = *(void *)(*((void *)&v47 + 1) + 8 * i);
          if (v26 == [v8 firstObject]) {
            CFGregorianDate v27 = @"from ";
          }
          else {
            CFGregorianDate v27 = @"  -> ";
          }
          if (v26)
          {
            CFGregorianDate v28 = NSString;
            CFIndex v29 = (objc_class *)objc_opt_class();
            CFIndex v30 = (__CFString *)[v28 stringWithFormat:@"<%@: %p>", NSStringFromClass(v29), v26];
          }
          else
          {
            CFIndex v30 = @"(nil)";
          }
          [(__CFString *)v3 appendFormat:@"%@%@\n", v27, v30];
        }
        uint64_t v23 = [v8 countByEnumeratingWithState:&v47 objects:v52 count:16];
      }
      while (v23);
    }
  }
  if ((unint64_t)[v8 count] >= 2 && (unint64_t)objc_msgSend(v42, "count") >= 2) {
    [(__CFString *)v3 appendString:@"and then"];
  }
  if ((unint64_t)[v42 count] >= 2)
  {
    [(__CFString *)v3 appendString:@" follow the child hierarchy down\n"];
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id obj = (id)[v42 reverseObjectEnumerator];
    uint64_t v31 = [obj countByEnumeratingWithState:&v43 objects:v51 count:16];
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = *(void *)v44;
      do
      {
        for (uint64_t j = 0; j != v32; ++j)
        {
          if (*(void *)v44 != v33) {
            objc_enumerationMutation(obj);
          }
          uint64_t v35 = *(void *)(*((void *)&v43 + 1) + 8 * j);
          if (v35 == [v42 lastObject]) {
            CFStringRef v36 = @"from ";
          }
          else {
            CFStringRef v36 = @"  -> ";
          }
          if (v35)
          {
            CFStringRef v37 = NSString;
            uint64_t v38 = (objc_class *)objc_opt_class();
            id v39 = (__CFString *)[v37 stringWithFormat:@"<%@: %p>", NSStringFromClass(v38), v35];
          }
          else
          {
            id v39 = @"(nil)";
          }
          [(__CFString *)v3 appendFormat:@"%@%@\n", v36, v39];
        }
        uint64_t v32 = [obj countByEnumeratingWithState:&v43 objects:v51 count:16];
      }
      while (v32);
    }
  }
  return v3;
}

uint64_t RELATIONSHIP_FOCUS(void *a1)
{
  if (![a1 conformsToProtocol:&unk_1ED401940]) {
    return 0;
  }
  return [a1 parentFocusEnvironment];
}

__CFString *_UIDebugViewAndViewControllerRelationshipBetween(uint64_t a1, uint64_t a2)
{
  return _UIDebugRelationshipBetween(a1, a2, (uint64_t (*)(uint64_t))RELATIONSHIP_VIEW_AND_VIEWCONTROLLER);
}

id RELATIONSHIP_VIEW_AND_VIEWCONTROLLER(void *a1)
{
  if (_IsKindOfUIView((uint64_t)a1))
  {
    id result = +[UIViewController viewControllerForView:a1];
    if (!result)
    {
      return (id)[a1 superview];
    }
  }
  else if (objc_msgSend(a1, "__isKindOfUIViewController"))
  {
    id result = (id)[a1 parentViewController];
    if (!result)
    {
      return (id)[a1 presentingViewController];
    }
  }
  else
  {
    return 0;
  }
  return result;
}

__CFString *_UIDebugObjectTypeDescription(const char *a1)
{
  if (!strcmp(a1, "@")) {
    return @"id";
  }
  if (!strcmp(a1, "v")) {
    return @"void";
  }
  if (!strcmp(a1, "^v")) {
    return @"void*";
  }
  if (!strcmp(a1, ":")) {
    return @"SEL";
  }
  if (!strcmp(a1, "B")) {
    return @"BOOL";
  }
  if (!strcmp(a1, "c")) {
    return @"char";
  }
  if (!strcmp(a1, "i")) {
    return @"int";
  }
  if (!strcmp(a1, "s")) {
    return @"short";
  }
  if (!strcmp(a1, "q")) {
    return @"long";
  }
  if (!strcmp(a1, "C")) {
    return @"unsigned char";
  }
  if (!strcmp(a1, "I")) {
    return @"unsigned int";
  }
  if (!strcmp(a1, "S")) {
    return @"unsigned short";
  }
  if (!strcmp(a1, "Q")) {
    return @"unsigned long";
  }
  if (!strcmp(a1, "f")) {
    return @"float";
  }
  if (!strcmp(a1, "d")) {
    return @"double";
  }
  if (!strcmp(a1, "*")) {
    return @"char*";
  }
  if (!strcmp(a1, "#")) {
    return @"Class";
  }
  if (!strcmp(a1, "@?")) {
    return @"^block";
  }
  unsigned int v2 = *(unsigned __int8 *)a1;
  if (v2 <= 0x5A)
  {
    if (v2 != 40)
    {
      if (v2 == 64 && strlen(a1) >= 4) {
        return (__CFString *)[NSString stringWithFormat:@"%@*", (id)objc_msgSend([NSString alloc], "initWithBytes:length:encoding:", a1 + 2, strlen(a1) - 3, 1), v18];
      }
      goto LABEL_59;
    }
    goto LABEL_46;
  }
  if (v2 != 91)
  {
    if (v2 == 94)
    {
      if (strlen(a1) > 1) {
        return (__CFString *)[NSString stringWithFormat:@"%@*", _UIDebugObjectTypeDescription(a1 + 1), v18];
      }
      goto LABEL_59;
    }
    if (v2 != 123) {
      goto LABEL_59;
    }
LABEL_46:
    if (strlen(a1) >= 4)
    {
      uint64_t v4 = (__CFString *)(id)[[NSString alloc] initWithBytes:a1 + 1 length:strlen(a1) - 2 encoding:1];
      uint64_t v5 = (void *)[(__CFString *)v4 componentsSeparatedByString:@"="];
      unint64_t v6 = [v5 count];
      id result = v4;
      if (v6 >= 2)
      {
        uint64_t v7 = [v5 objectAtIndex:0];
        if (*a1 == 123) {
          __int16 v8 = @"struct";
        }
        else {
          __int16 v8 = @"union";
        }
        return (__CFString *)[NSString stringWithFormat:@"%@ %@", v8, v7];
      }
      return result;
    }
LABEL_59:
    if (strlen(a1) >= 2)
    {
      if (*(unsigned __int8 *)a1 <= 0x6Du)
      {
        switch(*a1)
        {
          case 'N':
            uint64_t v17 = @"inout";
            return (__CFString *)[NSString stringWithFormat:@"%@ %@", v17, _UIDebugObjectTypeDescription(a1 + 1)];
          case 'O':
            uint64_t v17 = @"bycopy";
            return (__CFString *)[NSString stringWithFormat:@"%@ %@", v17, _UIDebugObjectTypeDescription(a1 + 1)];
          case 'R':
            uint64_t v17 = @"byref";
            return (__CFString *)[NSString stringWithFormat:@"%@ %@", v17, _UIDebugObjectTypeDescription(a1 + 1)];
          case 'V':
            uint64_t v17 = @"oneway";
            return (__CFString *)[NSString stringWithFormat:@"%@ %@", v17, _UIDebugObjectTypeDescription(a1 + 1)];
          default:
            return (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%s", a1, v18);
        }
      }
      switch(v2)
      {
        case 'r':
          uint64_t v17 = @"const";
          return (__CFString *)[NSString stringWithFormat:@"%@ %@", v17, _UIDebugObjectTypeDescription(a1 + 1)];
        case 'o':
          uint64_t v17 = @"out";
          return (__CFString *)[NSString stringWithFormat:@"%@ %@", v17, _UIDebugObjectTypeDescription(a1 + 1)];
        case 'n':
          uint64_t v17 = @"in";
          return (__CFString *)[NSString stringWithFormat:@"%@ %@", v17, _UIDebugObjectTypeDescription(a1 + 1)];
      }
    }
    return (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%s", a1, v18);
  }
  size_t v9 = strlen(a1);
  if (v9 < 4) {
    goto LABEL_59;
  }
  uint64_t v10 = 1;
  long long v11 = (char *)malloc_type_calloc(1uLL, v9 + 1, 0x882DBFAFuLL);
  do
    unsigned int v12 = a1[v10++] - 48;
  while (v12 < 0xA);
  id v13 = (id)[[NSString alloc] initWithBytes:a1 + 1 length:v10 - 2 encoding:1];
  size_t v14 = strlen(a1);
  uint64_t v15 = strncpy(v11, &a1[v10 - 1], v14 - v10);
  uint64_t v16 = _UIDebugObjectTypeDescription(v15);
  free(v11);
  return (__CFString *)[NSString stringWithFormat:@"%@[%@]", v16, v13];
}

__CFString *_UIDebugIvarValue(__CFString *a1, char *__s, int a3)
{
  size_t v6 = strlen(__s);
  uint64_t v7 = (const char *)malloc_type_calloc(v6 + 1, 1uLL, 0xA9C2E514uLL);
  __int16 v8 = (char *)v7;
  char v9 = 0;
  uint64_t v10 = __s;
  long long v11 = (char *)v7;
  while (1)
  {
    int v12 = *v10;
    if (v12 == 34)
    {
      v9 ^= 1u;
      goto LABEL_8;
    }
    if (!*v10) {
      break;
    }
    if (v9)
    {
      char v9 = 1;
    }
    else
    {
      char v9 = 0;
      *v11++ = v12;
    }
LABEL_8:
    ++v10;
  }
  int v13 = *__s;
  if (v13 != 64)
  {
    if (!strcmp(v7, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29238], "valueWithBytes:objCType:", a1, __s), "CGRectValue");
      uint64_t v17 = (__CFString *)NSStringFromRect(v35);
      goto LABEL_48;
    }
    if (!strcmp(v8, "{CGPoint=dd}"))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29238], "valueWithBytes:objCType:", a1, __s), "CGPointValue");
      uint64_t v17 = (__CFString *)NSStringFromPoint(v33);
      goto LABEL_48;
    }
    if (!strcmp(v8, "{CGSize=dd}"))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29238], "valueWithBytes:objCType:", a1, __s), "CGSizeValue");
      uint64_t v17 = (__CFString *)NSStringFromSize(v34);
      goto LABEL_48;
    }
    if (!strcmp(v8, "{_NSRange=QQ}"))
    {
      v32.locatiouint64_t n = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29238], "valueWithBytes:objCType:", a1, __s), "rangeValue");
      uint64_t v17 = (__CFString *)NSStringFromRange(v32);
      goto LABEL_48;
    }
    if (!strcmp(v8, "{UIEdgeInsets=dddd}"))
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F29238], "valueWithBytes:objCType:", a1, __s), "UIEdgeInsetsValue");
      uint64_t v17 = (__CFString *)NSStringFromUIEdgeInsets(v36);
      goto LABEL_48;
    }
    if (!strcmp(v8, "^v"))
    {
      size_t v14 = NSString;
      isCATransform3D a = a1->isa;
LABEL_12:
      uint64_t v15 = @"%p";
LABEL_47:
      uint64_t v17 = (__CFString *)objc_msgSend(v14, "stringWithFormat:", v15, isa, v29, v30, v31);
      goto LABEL_48;
    }
    if (v13 > 80)
    {
      switch(v13)
      {
        case '^':
          size_t v14 = NSString;
          if (a3) {
            goto LABEL_11;
          }
          uint64_t v17 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%p -> %p", a1, a1->isa, v30, v31);
          goto LABEL_48;
        case '_':
        case 'a':
        case 'e':
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
          goto LABEL_74;
        case 'b':
          a1 = (__CFString *)objc_msgSend(NSString, "stringWithFormat:", @"%i (?)", (uint64_t)a1->isa & ~(-1 << atoi(__s + 1)));
          if (!a1) {
            goto LABEL_74;
          }
          goto LABEL_49;
        case 'c':
          uint64_t v17 = (__CFString *)[NSNumber numberWithChar:SLOBYTE(a1->isa)];
          goto LABEL_48;
        case 'd':
          uint64_t v17 = (__CFString *)[NSNumber numberWithDouble:*(double *)&a1->isa];
          goto LABEL_48;
        case 'f':
          LODWORD(v16) = a1->isa;
          uint64_t v17 = (__CFString *)[NSNumber numberWithFloat:v16];
          goto LABEL_48;
        case 'i':
          uint64_t v17 = (__CFString *)[NSNumber numberWithInt:LODWORD(a1->isa)];
          goto LABEL_48;
        case 'l':
          uint64_t v17 = (__CFString *)[NSNumber numberWithLong:a1->isa];
          goto LABEL_48;
        case 'q':
          uint64_t v17 = (__CFString *)[NSNumber numberWithLongLong:a1->isa];
          goto LABEL_48;
        default:
          if (v13 == 81)
          {
            uint64_t v17 = (__CFString *)[NSNumber numberWithUnsignedLongLong:a1->isa];
            goto LABEL_48;
          }
          if (v13 != 123) {
            goto LABEL_74;
          }
          break;
      }
      goto LABEL_64;
    }
    if (v13 > 65)
    {
      switch(v13)
      {
        case 'B':
          if (LOBYTE(a1->isa)) {
            a1 = @"YES";
          }
          else {
            a1 = @"NO";
          }
          goto LABEL_49;
        case 'I':
          uint64_t v17 = (__CFString *)[NSNumber numberWithUnsignedInt:LODWORD(a1->isa)];
          goto LABEL_48;
        case 'L':
          uint64_t v17 = (__CFString *)[NSNumber numberWithUnsignedLong:a1->isa];
          goto LABEL_48;
      }
    }
    else
    {
      switch(v13)
      {
        case '#':
          if (!a3) {
            goto LABEL_49;
          }
          goto LABEL_67;
        case '(':
LABEL_64:
          if ((a3 & 1) == 0)
          {
            uint64_t v17 = (__CFString *)_UIKitStructDescription(a1, __s);
            goto LABEL_48;
          }
          a1 = @"unknown";
          goto LABEL_49;
        case ':':
          if (!a3)
          {
            uint64_t v17 = (__CFString *)NSStringFromSelector((SEL)a1->isa);
            goto LABEL_48;
          }
LABEL_67:
          size_t v14 = NSString;
LABEL_11:
          isCATransform3D a = a1;
          goto LABEL_12;
      }
    }
LABEL_74:
    uint64_t v17 = (__CFString *)[NSString stringWithFormat:@"Value not representable, %s", v8, v29, v30, v31];
    goto LABEL_48;
  }
  a1 = (__CFString *)a1->isa;
  size_t v14 = NSString;
  if (a3) {
    goto LABEL_11;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v17 = (__CFString *)[NSString stringWithFormat:@"@\"%@\"", a1, v29, v30, v31];
    goto LABEL_48;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v17 = (__CFString *)[NSString stringWithFormat:@"@%@", a1, v29, v30, v31];
      goto LABEL_48;
    }
    if (a1)
    {
      uint64_t v17 = (__CFString *)((uint64_t (*)(__CFString *, char *))[MEMORY[0x1E4FBA8A8] instanceMethodForSelector:sel_description])(a1, sel_description);
      goto LABEL_48;
    }
    a1 = @"nil";
    goto LABEL_49;
  }
  id v18 = (id)MEMORY[0x18C107190](a1);
  id v19 = (id)_CFURLPromiseCopyPhysicalURL();
  id v20 = (id)MEMORY[0x18C107190]();
  if (v19)
  {
    id v21 = v20;
    if (([v19 isEqual:a1] & 1) == 0)
    {
      uint64_t v23 = NSString;
      if (v18) {
        uint64_t v24 = @"s";
      }
      else {
        uint64_t v24 = @"n";
      }
      uint64_t v25 = [v19 lastPathComponent];
      if (v21) {
        uint64_t v26 = @"s";
      }
      else {
        uint64_t v26 = @"n";
      }
      uint64_t v30 = v25;
      uint64_t v31 = v26;
      isCATransform3D a = a1;
      CFIndex v29 = v24;
      uint64_t v15 = @"%@, %@ -> %@, %@";
      size_t v14 = v23;
      goto LABEL_47;
    }
  }
  uint64_t v22 = @"s";
  if (!v18) {
    uint64_t v22 = @"n";
  }
  uint64_t v17 = (__CFString *)[NSString stringWithFormat:@"%@, %@", a1, v22, v30, v31];
LABEL_48:
  a1 = v17;
LABEL_49:
  free(v8);
  return a1;
}

void *_UIKitStructDescription(_DWORD *a1, char *__s1)
{
  uint64_t v4 = strdup(__s1);
  int v5 = *__s1;
  size_t v6 = @"{";
  if (v5 == 40) {
    size_t v6 = CFSTR("(values are interpreted) (");
  }
  NSPoint v33 = v4;
  uint64_t v7 = (void *)[MEMORY[0x1E4F28E78] stringWithFormat:@"%@\n", v6];
  v4[strlen(v4) - 1] = 0;
  do
    int v8 = *v4++;
  while (v8 != 61);
  [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v9 = 0;
  do
  {
    while (1)
    {
      uint64_t v10 = (uint64_t)(*v4 == 34 ? v4 + 1 : v4);
      uint64_t v11 = v10 + 3;
      int v12 = (char *)v10;
      do
      {
        int v13 = (char *)v11;
        int v14 = *v12++;
        ++v11;
      }
      while (v14 != 34);
      int v15 = 0;
      *(v12 - 1) = 0;
      double v16 = v12;
      do
      {
        uint64_t v4 = v13;
        int v17 = *v16;
        if (v17 == 40 || v17 == 123 || v17 == 91) {
          ++v15;
        }
        if (v17 == 41 || v17 == 125 || v17 == 93) {
          --v15;
        }
        ++v16;
        int v13 = v4 + 1;
      }
      while (v15 > 0);
      while (*(v4 - 1))
      {
        if (*(v4 - 1) == 34)
        {
          *(v4 - 1) = 0;
          goto LABEL_27;
        }
        ++v4;
      }
      uint64_t v4 = 0;
LABEL_27:
      if (*v12 != 98) {
        break;
      }
      int v18 = atoi(v12 + 1);
      int v19 = v18;
      if ((unint64_t)(v9 + v18) <= 0x20)
      {
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v20 = 4 * (v5 != 40);
      }
      a1 = (_DWORD *)((char *)a1 + v20);
      uint64_t v21 = (*a1 >> v9) & ~(-1 << v18);
      if (v18 == 1)
      {
        BOOL v23 = v21 == 0;
        uint64_t v22 = @"YES";
        if (v23) {
          uint64_t v22 = @"NO";
        }
        [v7 appendFormat:@"\t\t%s (%s): %@\n", v10, v12, v22];
      }
      else
      {
        objc_msgSend(v7, "appendFormat:", @"\t\t%s (%s): %u\n", v10, v12, v21);
      }
      uint64_t v30 = v19;
      if (v5 == 40) {
        uint64_t v30 = 0;
      }
      v9 += v30;
      if (!v4) {
        goto LABEL_49;
      }
    }
    NSUInteger alignp = 0;
    NSUInteger sizep = 0;
    NSGetSizeAndAlignment(v12, &sizep, &alignp);
    if (v9) {
      BOOL v23 = v5 == 40;
    }
    else {
      BOOL v23 = 1;
    }
    uint64_t v24 = !v23;
    NSUInteger v25 = alignp;
    uint64_t v26 = _UIDebugObjectTypeDescription(v12);
    uint64_t v27 = (uint64_t)&a1[v24 - 1] + v25 + 3;
    uint64_t v28 = v27 & -(uint64_t)v25;
    [v7 appendFormat:@"\t\t%s (%@): %@\n", v10, v26, _UIDebugIvarValue(v27 & -(int)v25, v12)];
    uint64_t v9 = 0;
    NSUInteger v29 = sizep;
    if (v5 == 40) {
      NSUInteger v29 = 0;
    }
    a1 = (_DWORD *)(v28 + v29);
  }
  while (v4);
LABEL_49:
  uint64_t v31 = @"}";
  if (v5 == 40) {
    uint64_t v31 = @"");
  }
  [v7 appendFormat:@"\t%@", v31];
  free(v33);
  return v7;
}

void sub_1868695D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a2 == 2)
  {
    objc_end_catch();
    JUMPOUT(0x1868695A4);
  }
  free(a12);
  objc_exception_rethrow();
}

void sub_186869610(_Unwind_Exception *a1)
{
}

void *_UIKitPropertyDescription(objc_property *a1)
{
  unsigned int v2 = (void *)[MEMORY[0x1E4F28E78] stringWithString:@"@property "];
  id v3 = (void *)[MEMORY[0x1E4F1CA48] array];
  outCFIndex Count = 0;
  uint64_t v4 = property_copyAttributeList(a1, &outCount);
  int v15 = v4;
  propertCGFloat y = a1;
  if (outCount)
  {
    unint64_t v5 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    char v14 = 0;
    p_CGPDFArrayRef value = &v4->value;
    while (1)
    {
      int v8 = *(p_value - 1);
      uint64_t v7 = *p_value;
      if (!strcmp(v8, "R"))
      {
        uint64_t v9 = v3;
        uint64_t v10 = @"readonly";
      }
      else if (!strcmp(v8, "C"))
      {
        uint64_t v9 = v3;
        uint64_t v10 = @"copy";
      }
      else if (!strcmp(v8, "&"))
      {
        uint64_t v9 = v3;
        uint64_t v10 = @"retain";
      }
      else if (!strcmp(v8, "N"))
      {
        uint64_t v9 = v3;
        uint64_t v10 = @"nonatomic";
      }
      else
      {
        if (!strcmp(v8, "G"))
        {
          uint64_t v11 = objc_msgSend(NSString, "stringWithFormat:", @"getter=%s", v7);
LABEL_20:
          uint64_t v10 = (__CFString *)v11;
          uint64_t v9 = v3;
          goto LABEL_21;
        }
        if (!strcmp(v8, "S"))
        {
          uint64_t v11 = objc_msgSend(NSString, "stringWithFormat:", @"setter=%s", v7);
          goto LABEL_20;
        }
        if (!strcmp(v8, "D"))
        {
          char v14 = 1;
          goto LABEL_22;
        }
        if (strcmp(v8, "W"))
        {
          if (!strcmp(v8, "T"))
          {
            int v18 = _UIDebugObjectTypeDescription(v7);
          }
          else if (!strcmp(v8, "V"))
          {
            uint64_t v17 = [NSString stringWithUTF8String:v7];
          }
          goto LABEL_22;
        }
        uint64_t v9 = v3;
        uint64_t v10 = @"weak";
      }
LABEL_21:
      [v9 addObject:v10];
LABEL_22:
      ++v5;
      p_value += 2;
      if (v5 >= outCount) {
        goto LABEL_28;
      }
    }
  }
  char v14 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
LABEL_28:
  free(v15);
  if ([v3 count]) {
    [v2 appendFormat:@"(%@) ", objc_msgSend(v3, "componentsJoinedByString:", @", ")];
  }
  [v2 appendFormat:@"%@ %s;", v18, property_getName(property)];
  if (v17)
  {
    [v2 appendFormat:@"  (@synthesize %s = %@;)", property_getName(property), v17];
  }
  else if (v14)
  {
    objc_msgSend(v2, "appendFormat:", @"  (@dynamic %s;)", property_getName(property), v13);
  }
  return v2;
}

void *_UIKitMethodDescription(objc_method *a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a2) {
    id v3 = @"-";
  }
  else {
    id v3 = @"+";
  }
  uint64_t v4 = (void *)[MEMORY[0x1E4F28E78] stringWithString:v3];
  unint64_t v5 = method_copyReturnType(a1);
  [v4 appendFormat:@" (%@)", _UIDebugObjectTypeDescription(v5)];
  free(v5);
  Name = method_getName(a1);
  uint64_t v7 = [NSStringFromSelector(Name) componentsSeparatedByString:@":"];
  int v8 = (void *)[MEMORY[0x1E4F1CA48] array];
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  char v22 = 0;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = ___UIKitMethodComponents_block_invoke;
  v20[3] = &unk_1E530CF48;
  v20[5] = @":";
  void v20[6] = v21;
  void v20[4] = v8;
  [(NSArray *)v7 enumerateObjectsUsingBlock:v20];
  _Block_object_dispose(v21, 8);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v23 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v17;
    uint64_t v11 = 2;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        [v4 appendFormat:@" %@", v13];
        if ([v13 hasSuffix:@":"])
        {
          char v14 = method_copyArgumentType(a1, (int)v11 + (int)i);
          [v4 appendFormat:@"(%@)arg%ld", _UIDebugObjectTypeDescription(v14), v11 + i - 1];
          free(v14);
        }
      }
      uint64_t v9 = [v8 countByEnumeratingWithState:&v16 objects:v23 count:16];
      v11 += i;
    }
    while (v9);
  }
  objc_msgSend(v4, "appendFormat:", @"; (%p)", method_getImplementation(a1));
  return v4;
}

void sub_18686A134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void _UIViewRecursivelyRemoveDebugColorBoundsViews(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v1 = objc_msgSend(a1, "subviews", 0);
  uint64_t v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)v8;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v1);
        }
        size_t v6 = *(void **)(*((void *)&v7 + 1) + 8 * v5);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [v6 removeFromSuperview];
        }
        else
        {
          _UIViewRecursivelyRemoveDebugColorBoundsViews(v6);
          v6[13] &= ~0x8000000000000uLL;
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v3);
  }
}

void _UIViewRecursivelySetNeedsLayout(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  [v1 setNeedsLayout];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v2 = objc_msgSend(v1, "subviews", 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        _UIViewRecursivelySetNeedsLayout(*(void *)(*((void *)&v7 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_18686C8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2 == 1)
  {
    id v9 = objc_begin_catch(exception_object);
    if (os_variant_has_internal_diagnostics())
    {
      uint64_t v11 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        LODWORD(a9) = 138412290;
        *(void *)((char *)&a9 + 4) = v9;
        _os_log_fault_impl(&dword_1853B0000, v11, OS_LOG_TYPE_FAULT, "Exception: %@", (uint8_t *)&a9, 0xCu);
      }
    }
    else
    {
      long long v10 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &appendKey____s_category) + 8);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 138412290;
        *(void *)((char *)&a9 + 4) = v9;
        _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_ERROR, "Exception: %@", (uint8_t *)&a9, 0xCu);
      }
    }

    objc_end_catch();
    JUMPOUT(0x18686C88CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_18686CAD4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf)
{
  if (a2 == 1)
  {
    id v17 = objc_begin_catch(a1);
    if (os_variant_has_internal_diagnostics())
    {
      long long v19 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v17;
        _os_log_fault_impl(&dword_1853B0000, v19, OS_LOG_TYPE_FAULT, "Exception: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      long long v18 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &appendKeys____s_category) + 8);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1853B0000, v18, OS_LOG_TYPE_ERROR, "Exception: %@", (uint8_t *)&buf, 0xCu);
      }
    }

    objc_end_catch();
    JUMPOUT(0x18686CA98);
  }
  _Unwind_Resume(a1);
}

void sub_18686E500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t UIAuditTokenTaskHasEntitlement(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = __UIAuditTokenTaskHasEntitlement_block_invoke;
  void v7[3] = &unk_1E530D080;
  id v8 = v3;
  uint64_t v9 = a1;
  id v4 = v3;
  uint64_t HasEntitlement = _UITaskHasEntitlement((uint64_t)v4, (uint64_t)v7);

  return HasEntitlement;
}

id __UIAuditTokenTaskHasEntitlement_block_invoke(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(v3 + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = __UICopyValueForEntitlementFromAuditTokenTask_block_invoke;
  v6[3] = &__block_descriptor_40_e17_____SecTask__8__0l;
  void v6[4] = v2;
  id v4 = _UICopyValueForEntitlementUsingTaskCreationBlock(v1, (uint64_t)v6);
  return v4;
}

SecTaskRef __UICopyValueForEntitlementFromAuditTokenTask_block_invoke(uint64_t a1)
{
  id v1 = *(_OWORD **)(a1 + 32);
  long long v2 = v1[1];
  *(_OWORD *)v4.val = *v1;
  *(_OWORD *)&v4.val[4] = v2;
  return SecTaskCreateWithAuditToken(0, &v4);
}

id UIMediaFilesDirectory()
{
  uint64_t v0 = (void *)UIMediaFilesDirectory___mediaFilesDirectory;
  if (!UIMediaFilesDirectory___mediaFilesDirectory)
  {
    uint64_t v1 = [(id)CPSharedResourcesDirectory() stringByAppendingPathComponent:@"Media"];
    long long v2 = (void *)UIMediaFilesDirectory___mediaFilesDirectory;
    UIMediaFilesDirectory___mediaFilesDirectorCGFloat y = v1;

    uint64_t v0 = (void *)UIMediaFilesDirectory___mediaFilesDirectory;
  }
  return v0;
}

uint64_t UISystemRootDirectory()
{
  return MEMORY[0x1F411CA28]();
}

id _UITemporaryFileURL(void *a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  audit_token_t v4 = (objc_class *)MEMORY[0x1E4F28E78];
  id v5 = a1;
  uint64_t v6 = (void *)[[v4 alloc] initWithFormat:@".%@.XXXXXX", v5];

  long long v7 = NSTemporaryDirectory();
  id v8 = [v7 stringByAppendingPathComponent:v6];

  id v9 = v8;
  [v9 fileSystemRepresentation];
  __strlcpy_chk();
  if (mktemp(v16))
  {
    long long v10 = [NSString stringWithUTF8String:v16];
    uint64_t v11 = (void *)[v10 mutableCopy];

    if (v3)
    {
      uint64_t v12 = [MEMORY[0x1E4F442D8] typeWithIdentifier:v3];
      uint64_t v13 = [v12 preferredFilenameExtension];
    }
    else
    {
      uint64_t v13 = 0;
    }
    if (![(__CFString *)v13 length])
    {

      uint64_t v13 = @"tmp";
    }
    [v11 appendFormat:@".%@", v13];
    char v14 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v11];
  }
  else
  {
    char v14 = 0;
  }

  return v14;
}

id _UITemporaryFolderURL(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = [NSString stringWithFormat:@".%@.XXXXXX", a1];
  long long v2 = NSTemporaryDirectory();
  id v3 = [v2 stringByAppendingPathComponent:v1];

  [v3 getFileSystemRepresentation:v7 maxLength:1024];
  if (mkdtemp(v7))
  {
    audit_token_t v4 = [NSString stringWithUTF8String:v7];
    id v5 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v4 isDirectory:1];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id _UITemporaryFileWithUniqueName(void *a1, void *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  if (v6)
  {
    long long v7 = [MEMORY[0x1E4F442D8] typeWithIdentifier:v6];
    uint64_t v8 = [v7 preferredFilenameExtension];
  }
  else
  {
    uint64_t v8 = 0;
  }
  id v9 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithFormat:@".%@.XXXXXX", v5];
  if (![(__CFString *)v8 length])
  {

    uint64_t v8 = @"tmp";
  }
  [v9 appendFormat:@".%@", v8];
  long long v10 = NSTemporaryDirectory();
  uint64_t v11 = [v10 stringByAppendingPathComponent:v9];

  id v12 = v11;
  [v12 fileSystemRepresentation];
  __strlcpy_chk();
  int v13 = mkstemps(v19, [(__CFString *)v8 length] + 1);
  if (v13 == -1)
  {
    long long v16 = __error();
    uint64_t v17 = strerror(*v16);
    NSLog(&cfstr_CouldNotCreate_1.isa, v17);
    int v15 = 0;
  }
  else
  {
    int v14 = v13;
    int v15 = [MEMORY[0x1E4F1CB10] fileURLWithFileSystemRepresentation:v19 isDirectory:0 relativeToURL:0];
    if (a3) {
      *a3 = v14;
    }
    else {
      close(v14);
    }
  }

  return v15;
}

uint64_t _UICloneFile(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1 path];
  id v5 = (const char *)[v4 fileSystemRepresentation];
  id v6 = [v3 path];

  id v7 = v6;
  uint64_t v8 = copyfile(v5, (const char *)[v7 fileSystemRepresentation], 0, 0x10C800Fu);

  return v8;
}

id _UIFirstTypeIdentifierEligibleForMassStorage(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (qword_1EB264AB8 != -1) {
    dispatch_once(&qword_1EB264AB8, &__block_literal_global_605);
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v2 = v1;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v25;
    unint64_t v6 = 0x1E4F44000uLL;
    id v7 = (id *)&unk_1EB264000;
    uint64_t v19 = *(void *)v25;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v25 != v5) {
          objc_enumerationMutation(v2);
        }
        id v9 = *(void **)(*((void *)&v24 + 1) + 8 * v8);
        long long v10 = [*(id *)(v6 + 728) _typeWithIdentifier:v9 allowUndeclared:1];
        long long v20 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        uint64_t v11 = v7;
        id v12 = v7[342];
        uint64_t v13 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)v21;
          while (2)
          {
            for (uint64_t i = 0; i != v14; ++i)
            {
              if (*(void *)v21 != v15) {
                objc_enumerationMutation(v12);
              }
              if ([v10 conformsToType:*(void *)(*((void *)&v20 + 1) + 8 * i)])
              {
                id v17 = v9;

                goto LABEL_21;
              }
            }
            uint64_t v14 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
            if (v14) {
              continue;
            }
            break;
          }
        }

        ++v8;
        unint64_t v6 = 0x1E4F44000;
        uint64_t v5 = v19;
        id v7 = v11;
      }
      while (v8 != v4);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v24 objects:v29 count:16];
      id v17 = 0;
    }
    while (v4);
  }
  else
  {
    id v17 = 0;
  }
LABEL_21:

  return v17;
}

void notificationHandler()
{
  if (_UIInternalPreferencesRevisionVar <= 2147483645) {
    _UIInternalPreferencesRevisionVar += 2;
  }
  _UIKitUserDefaults();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v0 = [v4 dictionaryRepresentation];
  id v1 = (void *)_revisionDefaults;
  _revisionDefaults = v0;

  if (&_UIInternalPreferencesListener___COUNTER__ != &__PhotoLibraryFrameworkHandle)
  {
    id v2 = &_UIInternalPreferencesListener___COUNTER__;
    do
    {
      uint64_t v3 = *v2++;
      (*(void (**)(void))(v3 + 16))();
    }
    while (v2 != &__PhotoLibraryFrameworkHandle);
  }
}

uint64_t _UIInternalPreferenceUpdateBool(uint64_t a1, void *a2)
{
  *(unsigned char *)(a1 + 4) = [a2 BOOLValue];
  return 1;
}

uint64_t _UIInternalPreferenceUpdateInteger(uint64_t a1, void *a2)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x2F8], 8) = [a2 integerValue];
  return 1;
}

uint64_t _UIInternalPreferenceUpdateDouble(uint64_t a1, void *a2)
{
  [a2 doubleValue];
  *(void *)(a1 + _Block_object_dispose(&STACK[0x2F8], 8) = v3;
  return 1;
}

uint64_t _UIInternalPreferenceUpdateId(uint64_t a1, void *a2)
{
  return 1;
}

void _UIInternalPreferenceSync(int a1, _DWORD *a2, uint64_t a3, uint64_t (*a4)(_DWORD *))
{
  id v7 = objc_msgSend((id)_revisionDefaults, "objectForKey:");
  if (v7)
  {
    id v9 = v7;
    int v8 = a4(a2);
    id v7 = v9;
    a1 += v8;
  }
  *a2 = a1;
}

uint64_t _UIOneOfTypesConformsToAcceptableTypes(void *a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v26 objects:v31 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v27;
    uint64_t v20 = *(void *)v27;
    id v21 = v4;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v27 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = objc_msgSend(MEMORY[0x1E4F442D8], "_typeWithIdentifier:allowUndeclared:", *(void *)(*((void *)&v26 + 1) + 8 * i), 1, v20);
        if (v10)
        {
          uint64_t v11 = (void *)v10;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          id v12 = v4;
          uint64_t v13 = [v12 countByEnumeratingWithState:&v22 objects:v30 count:16];
          if (v13)
          {
            uint64_t v14 = v13;
            uint64_t v15 = *(void *)v23;
            while (2)
            {
              for (uint64_t j = 0; j != v14; ++j)
              {
                if (*(void *)v23 != v15) {
                  objc_enumerationMutation(v12);
                }
                id v17 = [MEMORY[0x1E4F442D8] _typeWithIdentifier:*(void *)(*((void *)&v22 + 1) + 8 * j) allowUndeclared:1];
                if (v17 && ([v11 conformsToType:v17] & 1) != 0)
                {

                  uint64_t v18 = 1;
                  id v4 = v21;
                  goto LABEL_22;
                }
              }
              uint64_t v14 = [v12 countByEnumeratingWithState:&v22 objects:v30 count:16];
              if (v14) {
                continue;
              }
              break;
            }
          }

          uint64_t v8 = v20;
          id v4 = v21;
        }
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v26 objects:v31 count:16];
      uint64_t v18 = 0;
    }
    while (v7);
  }
  else
  {
    uint64_t v18 = 0;
  }
LABEL_22:

  return v18;
}

uint64_t getWKInterfaceDeviceClass()
{
  uint64_t v3 = 0;
  id v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__225;
  uint64_t v7 = __Block_byref_object_dispose__225;
  uint64_t v0 = qword_1EB264B60;
  uint64_t v8 = qword_1EB264B60;
  if (!qword_1EB264B60)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getWKInterfaceDeviceClass_block_invoke;
    v2[3] = &unk_1E52D9900;
    v2[4] = &v3;
    __getWKInterfaceDeviceClass_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1868713EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1868716B8(void *a1)
{
}

void sub_1868716D0(_Unwind_Exception *a1)
{
}

Class __getWKInterfaceDeviceClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB264B68)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __WatchKitLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530D268;
    uint64_t v8 = 0;
    qword_1EB264B68 = _sl_dlopen();
  }
  if (!qword_1EB264B68)
  {
    uint64_t v3 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *WatchKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIAssetManager.m", 56, @"%s", v6[0]);
    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("WKInterfaceDevice");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    uint64_t v5 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "Class getWKInterfaceDeviceClass(void)_block_invoke"), @"_UIAssetManager.m", 57, @"Unable to find class %s", "WKInterfaceDevice");
LABEL_10:
    __break(1u);
  }
  qword_1EB264B60 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __WatchKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB264B68 = result;
  return result;
}

void ____preferredIdiomSubtypeForIdiom_block_invoke()
{
  unint64_t v0 = [+[UIScreen mainScreen] _artworkSubtype];
  if (v0)
  {
    qword_1EB264B78 = v0;
    return;
  }
  id v1 = (void *)MGCopyAnswer();
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = (void *)[v1 objectForKeyedSubscript:@"ArtworkDeviceSubType"];
    if (v3)
    {
      qword_1EB264B78 = [v3 integerValue];
LABEL_9:
      CFRelease(v2);
      return;
    }
  }
  uint64_t v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assets", &qword_1EB264B80) + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "Could not determine device type", v5, 2u);
  }
  qword_1EB264B78 = 320;
  if (v2) {
    goto LABEL_9;
  }
}

id _UIAutologgingVoidBlock(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = objc_alloc_init(_UIAutologgingDeallocSentinel);
  [(_UIAutologgingDeallocSentinel *)v5 setMessage:v4];

  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___UIAutologgingVoidBlock_block_invoke;
  v10[3] = &unk_1E52DA160;
  uint64_t v11 = v5;
  id v12 = v3;
  id v6 = v3;
  long long v7 = v5;
  uint64_t v8 = (void *)[v10 copy];

  return v8;
}

id _UIAutologgingBackgroundFetchBlock(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = objc_alloc_init(_UIAutologgingDeallocSentinel);
  [(_UIAutologgingDeallocSentinel *)v5 setMessage:v4];

  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___UIAutologgingBackgroundFetchBlock_block_invoke;
  v10[3] = &unk_1E5300860;
  uint64_t v11 = v5;
  id v12 = v3;
  id v6 = v3;
  long long v7 = v5;
  uint64_t v8 = (void *)[v10 copy];

  return v8;
}

id _UIBundleIDFromAuditToken()
{
  if (CPCopyBundleIdentifierAndTeamFromAuditToken()) {
    unint64_t v0 = 0;
  }
  else {
    unint64_t v0 = (void *)CPCopyBundleIdentifierFromAuditToken();
  }
  if (!v0) {
    NSLog(&cfstr_CannotGetBundl.isa);
  }
  return v0;
}

id _UIPreferredSystemLanguageForBundle(void *a1)
{
  id v1 = a1;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___UIPreferredSystemLanguageForBundle_block_invoke;
  block[3] = &unk_1E52D9F70;
  id v7 = v1;
  uint64_t v2 = _UIPreferredSystemLanguageForBundle_onceToken;
  id v3 = v1;
  if (v2 != -1) {
    dispatch_once(&_UIPreferredSystemLanguageForBundle_onceToken, block);
  }
  id v4 = (id)_UIPreferredSystemLanguageForBundle_primaryLanguage;

  return v4;
}

id _UIPrivateMainBundleIdentifier()
{
  if (qword_1EB264BA0 != -1) {
    dispatch_once(&qword_1EB264BA0, &__block_literal_global_10_13);
  }
  if (_MergedGlobals_1293)
  {
    unint64_t v0 = _UIMainBundleIdentifier();
  }
  else
  {
    unint64_t v0 = 0;
  }
  return v0;
}

uint64_t _UIIsOpenInRestrictionInEffect()
{
  unint64_t v0 = [MEMORY[0x1E4F74230] sharedConnection];
  uint64_t v1 = [v0 isOpenInRestrictionInEffect];

  return v1;
}

uint64_t _UIShouldEnforceOpenInRulesInAccountBasedApp()
{
  if (qword_1EB264BC0 != -1) {
    dispatch_once(&qword_1EB264BC0, &__block_literal_global_610);
  }
  if (!_MergedGlobals_1295) {
    return 0;
  }
  return _UIIsOpenInRestrictionInEffect();
}

uint64_t _UIDropAllowedBetweenApps(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  uint64_t v8 = 1;
  if (v5 && v6)
  {
    uint64_t v9 = [MEMORY[0x1E4F74230] sharedConnection];
    if (![v9 isOpenInRestrictionInEffect]) {
      goto LABEL_19;
    }
    if (!a1) {
      goto LABEL_19;
    }
    if (a1 == 3) {
      goto LABEL_19;
    }
    uint64_t v10 = [v9 dragDropTargetManagementStateForBundleID:v7];
    if ((unint64_t)(v10 - 4) > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_19;
    }
    if (a1 == 1)
    {
      if (v10 != 1 || ([v9 mayOpenFromUnmanagedToManaged] & 1) != 0) {
        goto LABEL_19;
      }
      uint64_t v11 = *(NSObject **)(__UILogGetCategoryCachedImpl("Dragging", &qword_1EB264BD8) + 8);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
LABEL_18:
        uint64_t v8 = 0;
LABEL_19:

        goto LABEL_20;
      }
      int v14 = 138543618;
      id v15 = v5;
      __int16 v16 = 2114;
      id v17 = v7;
      id v12 = "Disallowing drag of unmanaged data from app %{public}@ to managed app %{public}@";
    }
    else
    {
      if (a1 != 2 || v10 || ([v9 mayOpenFromManagedToUnmanaged] & 1) != 0) {
        goto LABEL_19;
      }
      uint64_t v11 = *(NSObject **)(__UILogGetCategoryCachedImpl("Dragging", &qword_1EB264BE0) + 8);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        goto LABEL_18;
      }
      int v14 = 138543618;
      id v15 = v5;
      __int16 v16 = 2114;
      id v17 = v7;
      id v12 = "Disallowing drag of managed data from app %{public}@ to unmanaged app %{public}@";
    }
    _os_log_impl(&dword_1853B0000, v11, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v14, 0x16u);
    goto LABEL_18;
  }
LABEL_20:

  return v8;
}

uint64_t _UIDropAllowedWithinAccountBasedApp(uint64_t a1, uint64_t a2)
{
  id v4 = [MEMORY[0x1E4F74230] sharedConnection];
  if ([v4 isOpenInRestrictionInEffect])
  {
    if (a1 == 2)
    {
      if (a2 == 1 && ([v4 mayOpenFromManagedToUnmanaged] & 1) == 0)
      {
        id v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Dragging", &qword_1EB264BF0) + 8);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          __int16 v10 = 0;
          id v6 = "Disallowing drag of managed data to unmanaged account.";
          id v7 = (uint8_t *)&v10;
          goto LABEL_14;
        }
LABEL_15:
        uint64_t v8 = 0;
        goto LABEL_11;
      }
    }
    else if (a1 == 1 && a2 == 2 && ([v4 mayOpenFromUnmanagedToManaged] & 1) == 0)
    {
      id v5 = *(NSObject **)(__UILogGetCategoryCachedImpl("Dragging", &qword_1EB264BE8) + 8);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        __int16 v11 = 0;
        id v6 = "Disallowing drag of unmanaged data to managed account.";
        id v7 = (uint8_t *)&v11;
LABEL_14:
        _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_ERROR, v6, v7, 2u);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
  }
  uint64_t v8 = 1;
LABEL_11:

  return v8;
}

uint64_t _UIEffectiveSourceDataOwnerForReportedDataOwner(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((_UIBundleIDIsAccountBased(v3) & 1) == 0)
  {
    id v4 = [MEMORY[0x1E4F74230] sharedConnection];
    int v5 = [v4 isAppManaged:v3];

    if (v5) {
      a1 = 2;
    }
    else {
      a1 = 1;
    }
  }

  return a1;
}

__CFString *_UIDataOwnerDescription(unint64_t a1)
{
  if (a1 > 3) {
    return @"Unknown";
  }
  else {
    return off_1E530D280[a1];
  }
}

void ___shouldValidateAccountBasedDelegates_block_invoke()
{
  v3[1] = *MEMORY[0x1E4F143B8];
  unint64_t v0 = _UIKitUserDefaults();
  uint64_t v2 = @"shouldValidateAccountBasedDelegates";
  v3[0] = &unk_1ED3F6FA8;
  uint64_t v1 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:&v2 count:1];
  [v0 registerDefaults:v1];
}

id _UIStepperDividerKey(uint64_t a1, uint64_t a2)
{
  v4[0] = a1;
  v4[1] = a2;
  uint64_t v2 = [MEMORY[0x1E4F29238] valueWithBytes:v4 objCType:"{?=QQ}"];
  return v2;
}

void sub_186878050(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1868781D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18687826C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_186878408(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_186878590(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_186878624(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id NSStringFromPopoverArrowDirection(uint64_t a1)
{
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithCapacity:30];
  id v3 = v2;
  if (a1 == 15)
  {
    id v4 = @"Any";
    goto LABEL_5;
  }
  if (!a1)
  {
    id v4 = @"Unknown";
LABEL_5:
    [v2 appendString:v4];
    goto LABEL_12;
  }
  if ((a1 & 2) != 0)
  {
    [v2 appendString:@"Below "];
    if ((a1 & 1) == 0)
    {
LABEL_8:
      if ((a1 & 4) == 0) {
        goto LABEL_9;
      }
LABEL_17:
      [v3 appendString:@"Left "];
      if ((a1 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((a1 & 1) == 0)
  {
    goto LABEL_8;
  }
  [v3 appendString:@"Above "];
  if ((a1 & 4) != 0) {
    goto LABEL_17;
  }
LABEL_9:
  if ((a1 & 8) != 0) {
LABEL_10:
  }
    [v3 appendString:@"Right "];
LABEL_11:
  objc_msgSend(v3, "deleteCharactersInRange:", objc_msgSend(v3, "length") - 1, 1);
LABEL_12:
  return v3;
}

__CFString *_UITextInputActionsSourceString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xB) {
    return @"Unspecified";
  }
  else {
    return off_1E530D2E0[a1 - 1];
  }
}

__CFString *_UITextInputActionsTypeString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xF) {
    return @"Unspecified";
  }
  else {
    return off_1E530D340[a1 - 1];
  }
}

uint64_t _UITextInputActionsSessionActionsEnumValueFromSourceAndType(unint64_t a1, uint64_t a2)
{
  uint64_t result = _UITextInputActionsSessionActionsEnumValueFromSource(a1);
  if (result == 1)
  {
    switch(a1)
    {
      case 0xCuLL:
        if (a2 != 15) {
          return 0;
        }
        break;
      case 4uLL:
        if (a2 <= 14)
        {
          if (a2 == 1) {
            return 6;
          }
          if (a2 == 2) {
            return 7;
          }
          return 0;
        }
        if (a2 != 15)
        {
          if (a2 == 16) {
            return 11;
          }
          return 0;
        }
        break;
      case 3uLL:
        if (a2 == 15) {
          return 10;
        }
        else {
          return 5;
        }
      default:
        return 0;
    }
    return 10;
  }
  return result;
}

uint64_t _UITextInputActionsSessionActionsEnumValueFromSource(unint64_t a1)
{
  if (a1 > 0xC) {
    return 0;
  }
  else {
    return qword_186B9DB50[a1];
  }
}

__CFString *_UITextInputActionsSessionActionsStringFromEnumValue(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 9) {
    return &stru_1ED0E84C0;
  }
  else {
    return off_1E530D3C0[a1 - 2];
  }
}

__CFString *_UITextInputActionsValidateLanguage(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1 || ![v1 length])
  {
    id v6 = 0;
    goto LABEL_24;
  }
  if (qword_1EB264C48 != -1) {
    dispatch_once(&qword_1EB264C48, &__block_literal_global_139_3);
  }
  id v3 = [(id)qword_1EB264C40 objectForKey:v2];
  if (!v3)
  {
    id v7 = v2;
    uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", @"emoji", @"dictation", 0);
    uint64_t v9 = 0;
    if (([v8 containsObject:v7] & 1) == 0)
    {
      if ([v7 length] == 2
        || [v7 length] == 3
        || [v7 length] == 7
        || [v7 length] == 8)
      {
        if (qword_1EB264C38 != -1) {
          dispatch_once(&qword_1EB264C38, &__block_literal_global_612);
        }
        if (objc_msgSend((id)_MergedGlobals_1297, "numberOfMatchesInString:options:range:", v7, 0, 0, objc_msgSend(v7, "length")) == 1)uint64_t v9 = 0; {
        else
        }
          uint64_t v9 = @"L";
      }
      else
      {
        uint64_t v9 = @"L";
      }
    }

    __int16 v10 = v9;
    __int16 v11 = (void *)qword_1EB264C40;
    if (v10)
    {
      id v6 = v10;
      [(id)qword_1EB264C40 setObject:v10 forKey:v7];
      goto LABEL_23;
    }
    id v12 = [MEMORY[0x1E4F1CA98] null];
    [v11 setObject:v12 forKey:v7];

LABEL_22:
    id v6 = 0;
    goto LABEL_23;
  }
  id v4 = [MEMORY[0x1E4F1CA98] null];
  char v5 = [v3 isEqual:v4];

  if (v5) {
    goto LABEL_22;
  }
  id v6 = v3;
LABEL_23:

LABEL_24:
  return v6;
}

__CFString *_UITextInputActionsValidateRegion(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1 || ![v1 length])
  {
    id v6 = 0;
    goto LABEL_21;
  }
  if (qword_1EB264C68 != -1) {
    dispatch_once(&qword_1EB264C68, &__block_literal_global_148);
  }
  id v3 = [(id)qword_1EB264C60 objectForKey:v2];
  if (!v3)
  {
    id v7 = v2;
    if ((unint64_t)[v7 length] >= 2)
    {
      uint64_t v8 = @"R";
      if ((unint64_t)[v7 length] <= 4)
      {
        if (qword_1EB264C58 != -1) {
          dispatch_once(&qword_1EB264C58, &__block_literal_global_143_1);
        }
        if (objc_msgSend((id)qword_1EB264C50, "numberOfMatchesInString:options:range:", v7, 0, 0, objc_msgSend(v7, "length")) == 1)uint64_t v8 = 0; {
      }
        }
    }
    else
    {
      uint64_t v8 = @"R";
    }

    uint64_t v9 = v8;
    __int16 v10 = (void *)qword_1EB264C60;
    if (v9)
    {
      id v6 = v9;
      [(id)qword_1EB264C60 setObject:v9 forKey:v7];
      goto LABEL_20;
    }
    __int16 v11 = [MEMORY[0x1E4F1CA98] null];
    [v10 setObject:v11 forKey:v7];

LABEL_19:
    id v6 = 0;
    goto LABEL_20;
  }
  id v4 = [MEMORY[0x1E4F1CA98] null];
  char v5 = [v3 isEqual:v4];

  if (v5) {
    goto LABEL_19;
  }
  id v6 = v3;
LABEL_20:

LABEL_21:
  return v6;
}

uint64_t _UITextInputActionsNSIntegerToLog10Integer(uint64_t a1)
{
  if (a1 < -9999) {
    return 0;
  }
  if (a1 < -999) {
    return 1;
  }
  if (a1 < -99) {
    return 2;
  }
  if (a1 < -9) {
    return 3;
  }
  if (a1 < 0) {
    return 4;
  }
  if (!a1) {
    return 5;
  }
  if ((unint64_t)a1 < 0xA) {
    return 6;
  }
  if ((unint64_t)a1 < 0x64) {
    return 7;
  }
  if ((unint64_t)a1 < 0x3E8) {
    return 8;
  }
  if ((unint64_t)a1 >> 4 < 0x271) {
    return 9;
  }
  return 10;
}

void sub_186879F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _ArchivePath(void *a1)
{
  id v1 = a1;
  if (qword_1EB264C78 != -1) {
    dispatch_once(&qword_1EB264C78, &__block_literal_global_613);
  }
  uint64_t v2 = [v1 pathExtension];
  char v3 = [v2 isEqualToString:@"plist"];

  if ((v3 & 1) == 0)
  {
    uint64_t v4 = [v1 stringByAppendingPathExtension:@"plist"];

    id v1 = (id)v4;
  }
  char v5 = [(id)_MergedGlobals_1298 stringByAppendingPathComponent:v1];

  return v5;
}

id _NumberForKey(void *a1, uint64_t a2)
{
  uint64_t v2 = [a1 objectForKey:a2];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  id v4 = v3;

  return v4;
}

void _UIDragStatisticLogItemsInDragByType(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  char v5 = dispatch_get_global_queue(17, 0);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  double v8[2] = ___UIDragStatisticLogItemsInDragByType_block_invoke;
  v8[3] = &unk_1E52D9F98;
  id v9 = v3;
  id v10 = v4;
  id v6 = v4;
  id v7 = v3;
  dispatch_async(v5, v8);
}

void _UIDragStatisticsLogTextDelegateItems(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  char v5 = dispatch_get_global_queue(17, 0);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  double v8[2] = ___UIDragStatisticsLogTextDelegateItems_block_invoke;
  v8[3] = &unk_1E52D9F98;
  id v9 = v3;
  id v10 = v4;
  id v6 = v4;
  id v7 = v3;
  dispatch_async(v5, v8);
}

void _UIPowerLogPeekBegan()
{
  v5[3] = *MEMORY[0x1E4F143B8];
  unint64_t v0 = +[_UIStatistics previewInteractionPeekForce];
  [v0 recordDistributionValue:_currentMaxRawForce()];

  v4[0] = @"Process-ID";
  id v1 = [NSNumber numberWithInt:getpid()];
  v5[0] = v1;
  v5[1] = &unk_1ED3F6FC0;
  v4[1] = @"Status";
  void v4[2] = @"Timestamp";
  uint64_t v2 = [MEMORY[0x1E4F1C9C8] date];
  void v5[2] = v2;
  id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:3];

  PLLogRegisteredEvent();
}

double _currentMaxRawForce()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v0 = (void *)UIApp;
  id v1 = [(id)UIApp keyWindow];
  id v2 = (id)[v0 _touchesEventForWindow:v1];

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = objc_msgSend(v2, "allTouches", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    double v7 = 0.0;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*((void *)&v11 + 1) + 8 * i) _pressure];
        if (v7 < v9) {
          double v7 = v9;
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }
  else
  {
    double v7 = 0.0;
  }

  return v7;
}

void _UIPowerLogPeekEnded()
{
  void v4[3] = *MEMORY[0x1E4F143B8];
  v3[0] = @"Process-ID";
  unint64_t v0 = [NSNumber numberWithInt:getpid()];
  v4[0] = v0;
  v4[1] = &unk_1ED3F6FD8;
  v3[1] = @"Status";
  void v3[2] = @"Timestamp";
  id v1 = [MEMORY[0x1E4F1C9C8] date];
  void v4[2] = v1;
  id v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v4 forKeys:v3 count:3];

  PLLogRegisteredEvent();
}

void _UIPowerLogPopOccured()
{
  void v5[2] = *MEMORY[0x1E4F143B8];
  unint64_t v0 = +[_UIStatistics previewInteractionPopForce];
  [v0 recordDistributionValue:_currentMaxRawForce()];

  v4[0] = @"Process-ID";
  id v1 = [NSNumber numberWithInt:getpid()];
  v4[1] = @"Timestamp";
  v5[0] = v1;
  id v2 = [MEMORY[0x1E4F1C9C8] date];
  v5[1] = v2;
  id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:2];

  PLLogRegisteredEvent();
}

void sub_18687E28C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _UIGetHSBValuesForColor(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  if (a2) {
    *a2 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  id v8 = v7;
  if (CGColorGetNumberOfComponents((CGColorRef)[v8 CGColor]) == 2) {
    [v8 getWhite:a4 alpha:0];
  }
  else {
    [v8 getHue:a2 saturation:a3 brightness:a4 alpha:0];
  }
}

id _UIVisualEffectSubviewFilterIdentityValueForKeypath(void *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = [a2 componentsSeparatedByString:@"."];
  if ([v4 count] == 3)
  {
    uint64_t v5 = [v4 objectAtIndexedSubscript:1];
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v6 = v3;
    id v7 = (void *)[v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v8) {
            objc_enumerationMutation(v6);
          }
          id v10 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          long long v11 = objc_msgSend(v10, "filterName", (void)v16);
          int v12 = [v11 isEqualToString:v5];

          if (v12)
          {
            long long v13 = [v10 identityValues];
            long long v14 = [v4 objectAtIndexedSubscript:2];
            id v7 = [v13 objectForKeyedSubscript:v14];

            goto LABEL_13;
          }
        }
        id v7 = (void *)[v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
LABEL_13:
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

uint64_t _UIVisualEffectSubviewShouldAnimateKey(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [a1 viewEffects];
  uint64_t ShouldAnimateKeyInternal = _UIVisualEffectSubviewShouldAnimateKeyInternal(v4, v3);

  return ShouldAnimateKeyInternal;
}

BOOL _UIVisualEffectSubviewAddInternalOverrides(objc_class *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void _UIVisualEffectSubviewAddInternalOverrides(__unsafe_unretained Class _Nonnull)"];
    uint64_t v5 = NSStringFromClass(a1);
    [v3 handleFailureInFunction:v4, @"_UIVisualEffectSubview.m", 325, @"Class %@ does not subclass UIView", v5 file lineNumber description];
  }
  if (([(objc_class *)a1 conformsToProtocol:&unk_1ED47DC78] & 1) == 0)
  {
    id v6 = [MEMORY[0x1E4F28B00] currentHandler];
    id v7 = [NSString stringWithUTF8String:"void _UIVisualEffectSubviewAddInternalOverrides(__unsafe_unretained Class _Nonnull)"];
    uint64_t v8 = NSStringFromClass(a1);
    [v6 handleFailureInFunction:v7, @"_UIVisualEffectSubview.m", 326, @"Class %@ does not conform to protocol _UIVisualEffectViewParticipating", v8 file lineNumber description];
  }
  strcpy(types, "@@:@@B");
  return class_addMethod(a1, sel__initialValueForLayer_keyPath_usePresentationValue_, (IMP)_UIVisualEffectSubviewInitialValueForLayer, types);
}

id _UIVisualEffectSubviewInitialValueForLayer(void *a1, const char *a2, uint64_t a3, void *a4, uint64_t a5)
{
  double v9 = a1;
  id v10 = a4;
  long long v11 = objc_msgSendSuper(v9, a2, a3, v10, a5);
  if (!v11)
  {
    if ([v10 hasPrefix:@"filters."])
    {
      int v12 = [(objc_super *)v9 filters];
      long long v11 = _UIVisualEffectSubviewFilterIdentityValueForKeypath(v12, v10);
    }
    else
    {
      long long v11 = 0;
    }
  }

  return v11;
}

void sub_186881CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *formatAbsoluteTime(CFAbsoluteTime a1)
{
  if (qword_1EB264D70 != -1) {
    dispatch_once(&qword_1EB264D70, &__block_literal_global_615);
  }
  StringWithdouble AbsoluteTime = (__CFString *)CFDateFormatterCreateStringWithAbsoluteTime((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFDateFormatterRef)qword_1EB264D68, a1);
  return StringWithAbsoluteTime;
}

void sub_1868826E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getGEOAlmanacClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB264D60)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __GeoServicesLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530D438;
    uint64_t v8 = 0;
    qword_1EB264D60 = _sl_dlopen();
  }
  if (!qword_1EB264D60)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *GeoServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UISunScheduleController.m", 39, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("GEOAlmanac");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getGEOAlmanacClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UISunScheduleController.m", 40, @"Unable to find class %s", "GEOAlmanac");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1300 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __GeoServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB264D60 = result;
  return result;
}

CFDateFormatterRef __formatAbsoluteTime_block_invoke()
{
  CFDateFormatterRef result = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0xFF3uLL);
  qword_1EB264D68 = (uint64_t)result;
  return result;
}

uint64_t _beginInterval()
{
  v8[1] = *MEMORY[0x1E4F143B8];
  if (!qword_1EB264DC8)
  {
    if (work_interval_create())
    {
      uint64_t v1 = *__error();
      id v2 = (void *)MEMORY[0x1E4F1CA00];
      uint64_t v3 = *MEMORY[0x1E4F1C3B8];
      long long v7 = @"errno";
      uint64_t v4 = [NSNumber numberWithInt:v1];
      v8[0] = v4;
      uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:&v7 count:1];
      id v6 = [v2 exceptionWithName:v3 reason:@"Failed to create work interval" userInfo:v5];

      objc_exception_throw(v6);
    }
    qword_1EB264DD0 = work_interval_instance_alloc();
  }
  if (!_MergedGlobals_1301) {
    _MergedGlobals_1301 = mach_absolute_time();
  }
  _tracepointArg4((uint64_t)&qword_1EB264DA0);
  kdebug_trace();
  work_interval_instance_clear();
  work_interval_instance_set_start();
  work_interval_instance_set_deadline();
  work_interval_instance_set_complexity();
  uint64_t result = work_interval_instance_start();
  LOBYTE(word_1EB264DD_Block_object_dispose(&STACK[0x2F8], 8) = 1;
  return result;
}

uint64_t _waitCommitEnd()
{
  if (!byte_1EB264DAC)
  {
    v1[0] = MEMORY[0x1E4F143A8];
    v1[1] = 3221225472;
    v1[2] = ___waitCommitEnd_block_invoke;
    v1[3] = &__block_descriptor_40_e5_v8__0l;
    void v1[4] = &qword_1EB264DA0;
    uint64_t result = [MEMORY[0x1E4F39CF8] addCommitHandler:v1 forPhase:2];
    byte_1EB264DAC = 1;
  }
  return result;
}

void _endInterval(uint64_t a1)
{
  if (!_MergedGlobals_1301) {
    _MergedGlobals_1301 = mach_absolute_time();
  }
  _tracepointArg4(a1);
  kdebug_trace();
  if (*(unsigned char *)(a1 + 57)) {
    work_interval_instance_set_finish();
  }
  else {
    work_interval_instance_set_complexity();
  }
  work_interval_instance_finish();
  *(_WORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  unint64_t v3 = *(void *)(a1 + 24);
  unint64_t v2 = *(void *)(a1 + 32);
  unint64_t v4 = v2 - v3;
  if (v2 > v3)
  {
    unint64_t v5 = _UIUpdateCycleComputeIdleDeadline(v2, v2 - v3);
    _UIUpdateCycleNotifyIdle(v3, v4, v5);
  }
}

void _UIQOSManagedCommitsBegin(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  _MergedGlobals_1301 = 0;
  if (qword_1EB264D98 != -1) {
    dispatch_once(&qword_1EB264D98, &__block_literal_global_7_3);
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_1EB264DA0);
  uint64_t Value = (void *)CFDictionaryGetValue((CFDictionaryRef)qword_1EB264DA0, v3);
  if (!Value)
  {
    uint64_t Value = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
    CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EB264DA0, v3, Value);
    CFRelease(Value);
  }
  CFSetAddValue((CFMutableSetRef)Value, v4);
  if (!Count)
  {
    Class = object_getClass(v3);
    Name = class_getName(Class);
    strncpy(__dst, Name, 8uLL);
    strncpy(__dst, (const char *)[v4 UTF8String], 8uLL);
    _tracepointArg4((uint64_t)&qword_1EB264DA0);
    kdebug_trace();
    if (dword_1EB264DA8)
    {
      if (!(_BYTE)word_1EB264DD8) {
        _beginInterval();
      }
    }
  }
}

double _UIQOSMaxFrameDurationSeconds()
{
  if (qword_1EB264D98 != -1) {
    dispatch_once(&qword_1EB264D98, &__block_literal_global_7_3);
  }
  unint64_t v0 = qword_1EB264DB0;
  return _UIMediaTimeForMachTime(v0);
}

id _UIQOSDescription()
{
  _MergedGlobals_1301 = 0;
  if (qword_1EB264D98 != -1) {
    dispatch_once(&qword_1EB264D98, &__block_literal_global_7_3);
  }
  unint64_t v0 = NSString;
  uint64_t v1 = _MergedGlobals_1301;
  if (!_MergedGlobals_1301)
  {
    uint64_t v1 = mach_absolute_time();
    _MergedGlobals_1301 = v1;
  }
  double v2 = _UIMediaTimeForMachTime(v1);
  double v3 = _UIMediaTimeForMachTime(qword_1EB264DB8);
  double v4 = _UIMediaTimeForMachTime(qword_1EB264DC0);
  unint64_t v5 = NSString;
  id v6 = (void *)qword_1EB264DA0;
  uint64_t v7 = dword_1EB264DA8;
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  CFTypeRef v15[2] = ___managedCommitsDescription_block_invoke;
  void v15[3] = &unk_1E52DDE90;
  v15[4] = v8;
  [v6 enumerateKeysAndObjectsUsingBlock:v15];
  uint64_t v9 = NSString;
  id v10 = [v8 componentsJoinedByString:@"; "];
  long long v11 = [v9 stringWithFormat:@"{%@}", v10];

  int v12 = [v5 stringWithFormat:@"processing=%u, managedCommits=%@, waitingCommitEnd=%u, now=%.06f, begin=%+.06f, deadline=%+.06f, length=%.06f, intervalActive=%u, intervalOptions=0x%llx, intervalRelevant=%u", v7, v11, byte_1EB264DAC, *(void *)&v2, v3 - v2, v4 - v2, v4 - v3, word_1EB264DD8, qword_1EB264DE0, HIBYTE(word_1EB264DD8)];

  long long v13 = [v0 stringWithFormat:@"%@, maxCommitDuration=%.06f, processingToken=%llu, transactionCurrentState=%u", v12, _UIMediaTimeForMachTime(qword_1EB264DB0), qword_1EB264D80, objc_msgSend(MEMORY[0x1E4F39CF8], "currentState")];

  return v13;
}

void ___waitCommitEnd_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  _MergedGlobals_1301 = 0;
  *(unsigned char *)(v1 + 12) = 0;
  if (!*(_DWORD *)(v1 + 8) || !CFDictionaryGetCount(*(CFDictionaryRef *)v1))
  {
    _endInterval(v1);
  }
}

void ___managedCommitsDescription_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [a3 allObjects];
  id v11 = [v6 componentsJoinedByString:@", "];

  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = NSString;
  Class = object_getClass(v5);
  id v10 = [v8 stringWithFormat:@"%s@%p: %@", class_getName(Class), v5, v11];

  [v7 addObject:v10];
}

void sub_186884668(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void _UIViewServiceInterfaceLogAssertionInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v6 = *(NSObject **)(__UILogGetCategoryCachedImpl("ViewServiceAssertion", _UIViewServiceInterfaceLogAssertionInfo___s_category)+ 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412802;
    uint64_t v8 = a1;
    __int16 v9 = 2112;
    uint64_t v10 = a2;
    __int16 v11 = 2048;
    uint64_t v12 = a3;
    _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_DEFAULT, "%@: identifier: %@; assertion: %p", (uint8_t *)&v7, 0x20u);
  }
}

uint64_t _UIViewServiceMachServiceName(uint64_t a1)
{
  uint64_t v1 = (void *)[@"com.apple.uikit.viewservice." stringByAppendingString:a1];
  unint64_t v2 = [v1 length];
  if (v2 >= 0x3F) {
    uint64_t v3 = 63;
  }
  else {
    uint64_t v3 = v2;
  }
  return [v1 substringToIndex:v3];
}

void sub_186885770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186886744(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Unwind_Resume(a1);
}

void sub_186888C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1868891DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18688AED8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 168));
  _Block_object_dispose((const void *)(v2 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18688B71C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18688B9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18688BE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_18688C188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_18688C40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _obscuredTraitCollectionFromTraitCollection(void *a1)
{
  id v1 = a1;
  if (!_UIDeviceNativeUserInterfaceIdiom())
  {
    if (os_variant_has_internal_diagnostics())
    {
      if (!dyld_program_sdk_at_least()) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v2 = [MEMORY[0x1E4F4F7D0] sharedInstance];
      if ([v2 isCarrierInstall])
      {
        char v3 = dyld_program_sdk_at_least();

        if ((v3 & 1) == 0) {
          goto LABEL_25;
        }
      }
      else
      {
      }
    }
  }
  if (![v1 userInterfaceIdiom])
  {
    [v1 displayCornerRadius];
    if (fabs(v4 + -39.0) >= 0.1)
    {
      [v1 displayCornerRadius];
      if (fabs(v5 + -33.3333) >= 0.1)
      {
        [v1 displayCornerRadius];
        if (fabs(v6 + -35.3333) >= 0.1)
        {
          [v1 displayCornerRadius];
          if (fabs(v7 + -41.5) >= 0.1)
          {
            [v1 displayCornerRadius];
            if (fabs(v8 + -37.5) >= 0.1)
            {
              [v1 displayCornerRadius];
              if (fabs(v9 + -44.0) >= 0.1)
              {
                [v1 displayCornerRadius];
                if (fabs(v10 + -37.3333) >= 0.1)
                {
                  [v1 displayCornerRadius];
                  if (fabs(v11 + -47.3333) >= 0.1)
                  {
                    [v1 displayCornerRadius];
                    if (fabs(v12 + -38.6667) >= 0.1)
                    {
                      [v1 displayCornerRadius];
                      if (fabs(v13 + -53.3333) >= 0.1)
                      {
                        [v1 displayCornerRadius];
                        if (fabs(v14 + -46.6667) >= 0.1)
                        {
                          [v1 displayCornerRadius];
                          if (fabs(v15 + -55.0) >= 0.1)
                          {
                            [v1 displayCornerRadius];
                            if (fabs(v16 + -44.6667) >= 0.1)
                            {
                              [v1 displayCornerRadius];
                              if (fabs(v17 + -48.0) >= 0.1)
                              {
                                [v1 displayCornerRadius];
                                if (fabs(v18) >= 0.1)
                                {
                                  uint64_t v19 = [v1 _traitCollectionByReplacingCGFloatValue:0x1ED3F5BE0 forTraitToken:39.0];

                                  id v1 = (id)v19;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_25:
  id v20 = v1;

  return v20;
}

void sub_18688CD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18688D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18688E800(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

id _UIRemoteViewControllerHalfDisconnectionInvocationForProxy(void *a1)
{
  id v1 = a1;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = ___UIRemoteViewControllerHalfDisconnectionInvocationForProxy_block_invoke;
  void v5[3] = &unk_1E52E97E0;
  id v6 = v1;
  id v2 = v1;
  char v3 = +[_UIAsyncInvocation invocationWithBlock:v5];

  return v3;
}

void sub_1868943FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

uint64_t _isPerformingSystemSnapshot(void *a1)
{
  id v1 = [a1 viewIfLoaded];
  id v2 = [v1 window];
  uint64_t v3 = [v2 windowScene];
  uint64_t v4 = [v3 _isPerformingSystemSnapshot];

  return v4;
}

double _UIGetRemoteViewControllerSnapshotDelay()
{
  if (_UIInternalPreferencesRevisionOnce != -1) {
    dispatch_once(&_UIInternalPreferencesRevisionOnce, &__block_literal_global_5_8);
  }
  int v0 = _UIInternalPreferencesRevisionVar;
  double result = 0.08;
  if (_UIInternalPreferencesRevisionVar >= 1)
  {
    int v2 = _UIInternalPreference_RemoteViewControllerSnapshotDelay;
    if (_UIInternalPreferencesRevisionVar != _UIInternalPreference_RemoteViewControllerSnapshotDelay)
    {
      while (v0 >= v2)
      {
        _UIInternalPreferenceSync(v0, &_UIInternalPreference_RemoteViewControllerSnapshotDelay, @"RemoteViewControllerSnapshotDelay", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
        int v2 = _UIInternalPreference_RemoteViewControllerSnapshotDelay;
        if (v0 == _UIInternalPreference_RemoteViewControllerSnapshotDelay) {
          return 0.08;
        }
      }
      return *(double *)&qword_1E8FD5520;
    }
  }
  return result;
}

uint64_t _shouldDeferSendingTraitCollectionChangeToService(void *a1)
{
  id v1 = a1;
  int v2 = [v1 _existingView];
  uint64_t v3 = [v2 window];
  char v4 = [v3 _isHostedInAnotherProcess];

  if ((v4 & 1) != 0 || ![v1 _isUpdatingSize])
  {
    uint64_t v5 = 0;
  }
  else if (_isPerformingSystemSnapshot(v1))
  {
    uint64_t v5 = [v1 _isUpdatingSizeInHost];
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

void sub_186899CB4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_186899FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18689A36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18689A6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18689C2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getAPExtensionClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getAPExtensionClass_softClass;
  uint64_t v7 = getAPExtensionClass_softClass;
  if (!getAPExtensionClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getAPExtensionClass_block_invoke;
    void v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getAPExtensionClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18689C3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18689C7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18689CED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  _Block_object_dispose((const void *)(v14 - 80), 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18689DC58(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __getAPExtensionClass_block_invoke(uint64_t a1)
{
  AppProtectionLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("APExtension");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAPExtensionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    int v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAPExtensionClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIRemoteViewController.m", 178, @"Unable to find class %s", "APExtension");

    __break(1u);
  }
}

void AppProtectionLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!AppProtectionLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    void v3[3] = __AppProtectionLibraryCore_block_invoke;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E530D9F8;
    uint64_t v5 = 0;
    AppProtectionLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!AppProtectionLibraryCore_frameworkLibrary)
  {
    uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
    int v2 = [NSString stringWithUTF8String:"void *AppProtectionLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIRemoteViewController.m", 177, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  int v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __AppProtectionLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AppProtectionLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getAPExtensionSubjectMonitorRegistryClass_block_invoke(uint64_t a1)
{
  AppProtectionLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("APExtensionSubjectMonitorRegistry");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AD48 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    int v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAPExtensionSubjectMonitorRegistryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIRemoteViewController.m", 180, @"Unable to find class %s", "APExtensionSubjectMonitorRegistry");

    __break(1u);
  }
}

Class __getAPBaseExtensionShieldViewClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25AD58)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __AppProtectionUILibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530DA10;
    uint64_t v8 = 0;
    qword_1EB25AD58 = _sl_dlopen();
  }
  if (!qword_1EB25AD58)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *AppProtectionUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIRemoteViewController.m", 182, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("APBaseExtensionShieldView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getAPBaseExtensionShieldViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIRemoteViewController.m", 183, @"Unable to find class %s", "APBaseExtensionShieldView");

LABEL_10:
    __break(1u);
  }
  qword_1EB25AD50 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AppProtectionUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25AD58 = result;
  return result;
}

void __getAPGuardClass_block_invoke(uint64_t a1)
{
  AppProtectionLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("APGuard");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25AD60 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    int v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getAPGuardClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIRemoteViewController.m", 179, @"Unable to find class %s", "APGuard");

    __break(1u);
  }
}

uint64_t _UIVisibilityEnvironmentForRootWindow(uint64_t a1)
{
  return objc_msgSend(NSString, "stringWithFormat:", @"UIRootWindow:%p", a1);
}

id _UIVisibilityEnvironmentForSceneIdentityToken(void *a1)
{
  uint64_t v1 = [a1 stringRepresentation];
  int v2 = _UISVisibilityEnvironmentForSceneIdentityTokenString();

  return v2;
}

void sub_18689FB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1868A1038(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1868A1438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __userNotificationCallback_0(__CFUserNotification *a1, uint64_t a2)
{
  id v15 = [(id)_MergedGlobals_1_29 objectForKey:a1];
  long long v4 = CFUserNotificationGetResponseDictionary(a1);
  uint64_t v5 = [v4 objectForKey:*MEMORY[0x1E4F1DA28]];
  uint64_t v6 = [v15 alertViewStyle];
  if ((unint64_t)(v6 - 1) < 2)
  {
    uint64_t v9 = [v15 textFieldAtIndex:0];
    [v9 setText:v5];
LABEL_6:

    goto LABEL_7;
  }
  if (v6)
  {
    if (v6 != 3) {
LABEL_18:
    }
      abort();
    long long v7 = [v15 textFieldAtIndex:0];
    uint64_t v8 = [v5 objectAtIndex:0];
    [v7 setText:v8];

    uint64_t v9 = [v15 textFieldAtIndex:1];
    double v10 = [v5 objectAtIndex:1];
    [v9 setText:v10];

    goto LABEL_6;
  }
LABEL_7:
  uint64_t v11 = 0;
  double v12 = v15;
  switch(a2)
  {
    case 0:
      uint64_t v13 = [v15 numberOfButtons];
      if (!v13) {
        goto LABEL_15;
      }
      uint64_t v11 = v13 - 1;
      double v12 = v15;
LABEL_11:
      uint64_t v14 = [v12 delegate];
      if (objc_opt_respondsToSelector()) {
        [v14 alertView:v15 clickedButtonAtIndex:v11];
      }
      [v15 dismissWithClickedButtonIndex:v11 animated:0];

LABEL_15:

      return;
    case 1:
      goto LABEL_11;
    case 2:
      uint64_t v11 = 1;
      goto LABEL_11;
    case 3:
      [v15 cancelAlertView];
      goto LABEL_15;
    default:
      goto LABEL_18;
  }
}

BOOL isAlertViewDelegateMethod(SEL aSel)
{
  uint64_t v2 = 1;
  if (!(unint64_t)protocol_getMethodDescription((Protocol *)&unk_1ED535228, aSel, 0, 1).name) {
    return (unint64_t)protocol_getMethodDescription((Protocol *)&unk_1ED535228, aSel, 1, 1).name != 0;
  }
  return v2;
}

void *__getSBUserNotificationAllowMenuButtonDismissalSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = SpringBoardServicesLibrary_2();
  uint64_t result = dlsym(v2, "SBUserNotificationAllowMenuButtonDismissal");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25BF98 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_7()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrary_3 = result;
  return result;
}

void *__getSBUserNotificationDismissOnLockSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = SpringBoardServicesLibrary_2();
  uint64_t result = dlsym(v2, "SBUserNotificationDismissOnLock");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25BFA0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSBUserNotificationTextAutocorrectionTypeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = SpringBoardServicesLibrary_2();
  uint64_t result = dlsym(v2, "SBUserNotificationTextAutocorrectionType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25BFA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getSBUserNotificationTextAutocapitalizationTypeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = SpringBoardServicesLibrary_2();
  uint64_t result = dlsym(v2, "SBUserNotificationTextAutocapitalizationType");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB25BFB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1868A61CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1868A664C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1868A8D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void beginInheritingCoreMediaApplicationState(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x18C108260]();
  uint64_t v3 = [getAVSystemControllerClass() sharedAVSystemController];
  long long v4 = [NSNumber numberWithInteger:(int)a1];
  uint64_t v5 = getAVSystemController_PIDToInheritApplicationStateFrom();
  id v12 = 0;
  char v6 = [v3 setAttribute:v4 forKey:v5 error:&v12];
  id v7 = v12;

  if ((v6 & 1) == 0) {
    NSLog(&cfstr_FailedToInheri.isa, a1, v7);
  }
  if ((_UIApplicationIsExtension() & 1) == 0)
  {
    if (qword_1EB25B0F0 != -1) {
      dispatch_once(&qword_1EB25B0F0, &__block_literal_global_1023);
    }
    [(id)qword_1EB25B0E8 lock];
    if (!qword_1EB25B0E0)
    {
      uint64_t v8 = [MEMORY[0x1E4F28EB8] defaultCenter];
      uint64_t v9 = [MEMORY[0x1E4F28F08] mainQueue];
      uint64_t v10 = [v8 addObserverForName:@"UIApplicationWillEnterForegroundNotification" object:0 queue:v9 usingBlock:&__block_literal_global_1028_1];
      uint64_t v11 = (void *)qword_1EB25B0E0;
      qword_1EB25B0E0 = v10;
    }
    [(id)qword_1EB25B0E8 unlock];
  }
}

void sub_1868AB970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void stopStealingStatusBar(void *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 windowScene];
  if (!v2)
  {
    if (os_variant_has_internal_diagnostics())
    {
      long long v4 = __UIFaultDebugAssertLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        int v5 = 138412290;
        id v6 = v1;
        _os_log_fault_impl(&dword_1853B0000, v4, OS_LOG_TYPE_FAULT, "Attempting to end update of view service orientation for hosted window not in window scene: %@", (uint8_t *)&v5, 0xCu);
      }
    }
    else
    {
      uint64_t v3 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &stopStealingStatusBar___s_category) + 8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        int v5 = 138412290;
        id v6 = v1;
        _os_log_impl(&dword_1853B0000, v3, OS_LOG_TYPE_ERROR, "Attempting to end update of view service orientation for hosted window not in window scene: %@", (uint8_t *)&v5, 0xCu);
      }
    }
  }
}

id _supportedInterfaceOrientationsForMask(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CA48] array];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = ___supportedInterfaceOrientationsForMask_block_invoke;
  void v7[3] = &unk_1E530DF70;
  uint64_t v9 = a1;
  id v3 = v2;
  id v8 = v3;
  long long v4 = (void (**)(void *, uint64_t))_Block_copy(v7);
  v4[2](v4, 1);
  v4[2](v4, 2);
  v4[2](v4, 4);
  v4[2](v4, 3);
  id v5 = v3;

  return v5;
}

void sub_1868ACD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _unobscuredTraitCollectionFromTraitCollection(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[UIScreen mainScreen];
  [v2 _displayCornerRadius];
  double v4 = v3;

  [v1 displayCornerRadius];
  if (vabdd_f64(v5, v4) >= 0.1)
  {
    uint64_t v6 = [v1 _traitCollectionByReplacingCGFloatValue:0x1ED3F5BE0 forTraitToken:v4];

    id v1 = (id)v6;
  }
  return v1;
}

void sub_1868AD560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1868AD7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1868AE074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1868AEDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void stealStatusBar(uint64_t a1, void *a2, void *a3, int a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = [v8 windowScene];
  uint64_t v10 = v9;
  if (v9) {
    char v11 = a4;
  }
  else {
    char v11 = 0;
  }
  if ((v11 & 1) == 0 && a4)
  {
    if (!os_variant_has_internal_diagnostics())
    {
      id v12 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25B0F8) + 8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v24 = 138412290;
        id v25 = v8;
        uint64_t v13 = "Attempting to update view service orientation for hosted window not in window scene: %@";
        uint64_t v14 = v12;
        uint32_t v15 = 12;
LABEL_15:
        _os_log_impl(&dword_1853B0000, v14, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v24, v15);
        goto LABEL_20;
      }
      goto LABEL_20;
    }
    id v20 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
    {
      int v24 = 138412290;
      id v25 = v8;
      uint64_t v21 = "Attempting to update view service orientation for hosted window not in window scene: %@";
      long long v22 = v20;
      uint32_t v23 = 12;
LABEL_26:
      _os_log_fault_impl(&dword_1853B0000, v22, OS_LOG_TYPE_FAULT, v21, (uint8_t *)&v24, v23);
      goto LABEL_24;
    }
    goto LABEL_24;
  }
  if (a1)
  {
    if (v9)
    {
      uint64_t v16 = [v9 interfaceOrientation];
      id v17 = v10;
    }
    else
    {
      uint64_t v16 = [(id)UIApp statusBarOrientation];
      id v17 = [(id)UIApp _findUISceneForLegacyInterfaceOrientation];
    }
    uint64_t v19 = v17;
    if (v16 != a1)
    {
      +[UIKeyboardSceneDelegate setInterfaceOrientation:a1];
      objc_msgSend((id)UIApp, "setStatusBarOrientation:fromOrientation:windowScene:animationParameters:updateBlock:", a1, objc_msgSend(v10, "interfaceOrientation"), v19, 0, 0);
    }

    goto LABEL_20;
  }
  if (os_variant_has_internal_diagnostics())
  {
    id v20 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v24) = 0;
      uint64_t v21 = "Attempting to update view service orientation with an unknown interface orientation";
      long long v22 = v20;
      uint32_t v23 = 2;
      goto LABEL_26;
    }
LABEL_24:

    goto LABEL_20;
  }
  double v18 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25B100) + 8);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v24) = 0;
    uint64_t v13 = "Attempting to update view service orientation with an unknown interface orientation";
    uint64_t v14 = v18;
    uint32_t v15 = 2;
    goto LABEL_15;
  }
LABEL_20:
}

void sub_1868B178C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

id getAVSystemControllerClass()
{
  uint64_t v4 = 0;
  double v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getAVSystemControllerClass_softClass;
  uint64_t v7 = getAVSystemControllerClass_softClass;
  if (!getAVSystemControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getAVSystemControllerClass_block_invoke_0;
    void v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getAVSystemControllerClass_block_invoke_0((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1868B7A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getAVSystemController_PIDToInheritApplicationStateFrom()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  int v0 = (void **)getAVSystemController_PIDToInheritApplicationStateFromSymbolLoc_ptr;
  uint64_t v9 = getAVSystemController_PIDToInheritApplicationStateFromSymbolLoc_ptr;
  if (!getAVSystemController_PIDToInheritApplicationStateFromSymbolLoc_ptr)
  {
    id v1 = MediaExperienceLibrary_0();
    void v7[3] = (uint64_t)dlsym(v1, "AVSystemController_PIDToInheritApplicationStateFrom");
    getAVSystemController_PIDToInheritApplicationStateFromSymbolLoc_ptr = v7[3];
    int v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    uint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"NSString *getAVSystemController_PIDToInheritApplicationStateFrom(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIViewServiceViewControllerOperator.m", 326, @"%s", dlerror());

    __break(1u);
  }
}

void sub_1868B7B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __beginInheritingCoreMediaApplicationState_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F28E08]);
  id v1 = (void *)qword_1EB25B0E8;
  qword_1EB25B0E8 = (uint64_t)v0;
}

uint64_t __beginInheritingCoreMediaApplicationState_block_invoke_2()
{
  id v0 = [getAVSystemControllerClass() sharedAVSystemController];
  id v1 = getAVSystemController_PIDToInheritApplicationStateFrom();
  [v0 setAttribute:0 forKey:v1 error:0];

  [(id)qword_1EB25B0E8 lock];
  uint64_t v2 = [MEMORY[0x1E4F28EB8] defaultCenter];
  [v2 removeObserver:qword_1EB25B0E0];

  id v3 = (void *)qword_1EB25B0E0;
  qword_1EB25B0E0 = 0;

  uint64_t v4 = (void *)qword_1EB25B0E8;
  return [v4 unlock];
}

void __getAVSystemControllerClass_block_invoke_0(uint64_t a1)
{
  MediaExperienceLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("AVSystemController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getAVSystemControllerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getAVSystemControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIViewServiceViewControllerOperator.m", 325, @"Unable to find class %s", "AVSystemController");

    __break(1u);
  }
}

void *MediaExperienceLibrary_0()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!MediaExperienceLibraryCore_frameworkLibrary_0)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    void v4[3] = __MediaExperienceLibraryCore_block_invoke_0;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E530DF50;
    uint64_t v6 = 0;
    MediaExperienceLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  id v0 = (void *)MediaExperienceLibraryCore_frameworkLibrary_0;
  if (!MediaExperienceLibraryCore_frameworkLibrary_0)
  {
    id v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *MediaExperienceLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIViewServiceViewControllerOperator.m", 324, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __MediaExperienceLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  MediaExperienceLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void ___supportedInterfaceOrientationsForMask_block_invoke(uint64_t a1, unint64_t a2)
{
  if (a2 > 4 || (*(void *)(a1 + 40) & qword_186B9DD10[a2]) != 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    id v3 = [NSNumber numberWithInteger:a2];
    [v2 addObject:v3];
  }
}

void sub_1868B9628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1868B97F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSTUIStatusBarCellularSignalViewClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB264E20)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __SystemStatusUILibraryCore_block_invoke_1;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530E0A8;
    uint64_t v8 = 0;
    qword_1EB264E20 = _sl_dlopen();
  }
  if (!qword_1EB264E20)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *SystemStatusUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UICellularSignalView.m", 19, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("STUIStatusBarCellularSignalView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getSTUIStatusBarCellularSignalViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UICellularSignalView.m", 20, @"Unable to find class %s", "STUIStatusBarCellularSignalView");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1304 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SystemStatusUILibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  qword_1EB264E20 = result;
  return result;
}

id _UIHostedWindowModifiedHostTraitCollection(uint64_t a1, uint64_t a2)
{
  return +[_UISceneHostingTraitCollectionPropagationClientComponent modifiedTraitCollectionForHostTraitCollection:a2];
}

uint64_t _UITabIsRepresentedInListItems(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = ___UITabIsRepresentedInListItems_block_invoke;
    v9[3] = &unk_1E52DF0A0;
    id v5 = v3;
    id v10 = v5;
    if ([v4 indexOfObjectPassingTest:v9] == 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v6 = [v5 _parentGroup];
      uint64_t IsRepresentedInListItems = _UITabIsRepresentedInListItems(v6, v4);
    }
    else
    {
      uint64_t IsRepresentedInListItems = 1;
    }
  }
  else
  {
    uint64_t IsRepresentedInListItems = 0;
  }

  return IsRepresentedInListItems;
}

BOOL _UITabIsAncestorOfTabsInListItems(void *a1, void *a2)
{
  id v3 = a1;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = ___UITabIsAncestorOfTabsInListItems_block_invoke;
  void v7[3] = &unk_1E52DF0A0;
  id v8 = v3;
  id v4 = v3;
  BOOL v5 = [a2 indexOfObjectPassingTest:v7] != 0x7FFFFFFFFFFFFFFFLL;

  return v5;
}

id _UIProtocolConformingToProtocols(void *a1)
{
  id v1 = a1;
  uint64_t v9 = 0;
  id v10 = &v9;
  uint64_t v11 = 0x3032000000;
  id v12 = __Block_byref_object_copy__230;
  uint64_t v13 = __Block_byref_object_dispose__230;
  id v14 = 0;
  if (qword_1EB264E58 != -1) {
    dispatch_once(&qword_1EB264E58, &__block_literal_global_624);
  }
  uint64_t v2 = _MergedGlobals_1306;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = ___UIProtocolConformingToProtocols_block_invoke;
  v6[3] = &unk_1E52E4728;
  id v7 = v1;
  id v8 = &v9;
  id v3 = v1;
  dispatch_sync(v2, v6);
  id v4 = (id)v10[5];

  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1868C0FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  _Block_object_dispose((const void *)(v20 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1868C1AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1868C2758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
}

id getLPLinkViewClass()
{
  uint64_t v4 = 0;
  BOOL v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getLPLinkViewClass_softClass;
  uint64_t v7 = getLPLinkViewClass_softClass;
  if (!getLPLinkViewClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getLPLinkViewClass_block_invoke;
    void v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getLPLinkViewClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1868C2848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1868C38DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getLPMetadataProviderClass_block_invoke(uint64_t a1)
{
  LinkPresentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("LPMetadataProvider");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getLPMetadataProviderClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getLPMetadataProviderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDocumentProperties.m", 32, @"Unable to find class %s", "LPMetadataProvider");

    __break(1u);
  }
}

void LinkPresentationLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!LinkPresentationLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    void v3[3] = __LinkPresentationLibraryCore_block_invoke_0;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E530E150;
    uint64_t v5 = 0;
    LinkPresentationLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!LinkPresentationLibraryCore_frameworkLibrary)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *LinkPresentationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIDocumentProperties.m", 31, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __LinkPresentationLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  LinkPresentationLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getLPLinkMetadataClass_block_invoke_0(uint64_t a1)
{
  LinkPresentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("LPLinkMetadata");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getLPLinkMetadataClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getLPLinkMetadataClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDocumentProperties.m", 33, @"Unable to find class %s", "LPLinkMetadata");

    __break(1u);
  }
}

void __getLPLinkViewClass_block_invoke(uint64_t a1)
{
  LinkPresentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("LPLinkView");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getLPLinkViewClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getLPLinkViewClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDocumentProperties.m", 34, @"Unable to find class %s", "LPLinkView");

    __break(1u);
  }
}

void __getLPLinkRendererSizeClassParametersClass_block_invoke(uint64_t a1)
{
  LinkPresentationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("LPLinkRendererSizeClassParameters");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getLPLinkRendererSizeClassParametersClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getLPLinkRendererSizeClassParametersClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDocumentProperties.m", 36, @"Unable to find class %s", "LPLinkRendererSizeClassParameters");

    __break(1u);
  }
}

void sub_1868C7234(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1868C8264(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1868CA20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

void sub_1868CBD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UIOrderedLayoutArrangementShouldUseImprovedMultilineTextDisambiguation()
{
  return dyld_program_sdk_at_least();
}

uint64_t B519BehaviorEnabled()
{
  if (!_os_feature_enabled_impl()) {
    return 0;
  }
  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_B519_SimulateRemoteConnected, @"B519_SimulateRemoteConnected", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1E8FD553C)
  {
    return 1;
  }
  uint64_t v1 = +[UIDevice currentDevice];
  BOOL v0 = [v1 _remoteTouchSurfaceType] == 2;

  return v0;
}

void sub_1868D0EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1868D262C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSBSKeyboardFocusServiceClass_block_invoke_1(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB264EC8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __SpringBoardServicesLibraryCore_block_invoke_8;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530E608;
    uint64_t v8 = 0;
    qword_1EB264EC8 = _sl_dlopen();
  }
  if (!qword_1EB264EC8)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *SpringBoardServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"_UIONavigationBarTitleRenamerConnectionAction.m", 34, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SBSKeyboardFocusService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getSBSKeyboardFocusServiceClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"_UIONavigationBarTitleRenamerConnectionAction.m", 36, @"Unable to find class %s", "SBSKeyboardFocusService");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1310 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_8()
{
  uint64_t result = _sl_dlopen();
  qword_1EB264EC8 = result;
  return result;
}

void sub_1868D593C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _UILayoutEngineSolutionIsInRationalEdgesConsultingDelegate(void *a1)
{
  if (dyld_program_sdk_at_least()) {
    return 1;
  }
  if (!a1) {
    return 0;
  }
  return [a1 _forceLayoutEngineSolutionInRationalEdges];
}

uint64_t _UIAutoresizingMaskConstraintsUseImplementationFromFoundation()
{
  return dyld_program_sdk_at_least();
}

uint64_t _UILayoutAttributeHasImplicitBoundsOriginConstraint(unsigned int a1)
{
  return (a1 < 0xB) & (0x67Eu >> a1);
}

uint64_t _UIViewEnumerateLayoutConstraintsAndAdjustForSelectedLayoutVariables(void *a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = ___UIViewEnumerateLayoutConstraintsAndAdjustForSelectedLayoutVariables_block_invoke;
  void v4[3] = &unk_1E530E670;
  void v4[4] = a1;
  void v4[5] = a2;
  v4[6] = a3;
  return [a1 _withUnsatisfiableConstraintsLoggingSuspendedIfEngineDelegateExists:v4];
}

double _UIBaselineLayoutBoundsConsultingContentSizeConstraints(void *a1)
{
  if ([a1 _wantsAutolayout])
  {
    objc_msgSend(a1, "_nsis_bounds");
    double v3 = v2;
    long long v4 = (void *)-[UIView _currentContentSizeHeightConstraint]((uint64_t)a1);
    if (v4) {
      [v4 constant];
    }
  }
  else if (a1)
  {
    [a1 bounds];
    return v5;
  }
  else
  {
    return *MEMORY[0x1E4F1DB28];
  }
  return v3;
}

uint64_t _UIViewSortedConstraintsForDebugging(void *a1)
{
  uint64_t v1 = (void *)[a1 sortedArrayUsingFunction:compareConstraintsAlphabetically context:&__block_literal_global_378_0];
  return [v1 sortedArrayUsingFunction:compareConstraintsAlphabetically context:&__block_literal_global_380];
}

uint64_t _UILayoutConstraintsShouldUseDawnStrategyForPerSizeClassSupport()
{
  return dyld_program_sdk_at_least();
}

BOOL _UISubclassOverridesSelector(objc_class *a1, objc_class *a2, SEL name)
{
  MethodImplementatiouint64_t n = class_getMethodImplementation(a1, name);
  IMP v6 = class_getMethodImplementation(a2, name);
  if (MethodImplementation) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  return !v7 && MethodImplementation != v6;
}

uint64_t _UIViewRecursivelyRemoveDebugAlignmentViews(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v1 = objc_msgSend(a1, "_allSubviews", 0);
  uint64_t result = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)v8;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v1);
        }
        IMP v6 = *(void **)(*((void *)&v7 + 1) + 8 * v5);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [v6 removeFromSuperview];
        }
        else
        {
          _UIViewRecursivelyRemoveDebugAlignmentViews(v6);
          v6[13] &= ~0x10000000000000uLL;
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t result = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v3 = result;
    }
    while (result);
  }
  return result;
}

uint64_t _debuggableDescriptionForConstraints(void *a1)
{
  return _debuggableDescriptionForConstraintsWithHeader(a1, 0);
}

uint64_t _debuggableDescriptionForConstraintsWithHeader(void *a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = (__CFString *)[NSString stringWithFormat:@"%@\n", a2];
  }
  else {
    uint64_t v3 = &stru_1ED0E84C0;
  }
  uint64_t v4 = (void *)[a1 valueForKey:@"_debuggableEquationLegendDescription"];
  uint64_t v5 = (void *)[a1 valueForKey:@"_debuggableEquationDescriptionWithoutLegend"];
  return [NSString stringWithFormat:@"\n%@legends\n%@%@\n\nconstraints\n%@%@\n\n", v3, @"-------------------------------\n", objc_msgSend(v4, "componentsJoinedByString:", @"\n", @"-------------------------------\n", objc_msgSend(v5, "componentsJoinedByString:", @",\n"];
}

uint64_t _layoutVariablesWithAmbiguousValueForLayoutItem(void *a1)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  double v2 = objc_msgSend(a1, "nsli_layoutEngine");
  v9[0] = objc_msgSend(a1, "nsli_minXVariable");
  v9[1] = objc_msgSend(a1, "nsli_minYVariable");
  void v9[2] = objc_msgSend(a1, "nsli_boundsWidthVariable");
  uint64_t v3 = objc_msgSend(a1, "nsli_boundsHeightVariable");
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  v9[3] = v3;
  do
  {
    uint64_t v6 = v9[v4];
    if ([v2 valueOfVariableIsAmbiguous:v6]) {
      v8[v5++] = v6;
    }
    ++v4;
  }
  while (v4 != 4);
  return [MEMORY[0x1E4F1C978] arrayWithObjects:v8 count:v5];
}

id _UIViewPotentiallyDisrubtibleConstraintsForView(void *a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)[a1 _layoutEngine];
  if (!v6 || (void *)[v6 delegate] == a1) {
    goto LABEL_42;
  }
  for (uint64_t i = 0; a2; a2 = (void *)[a2 superview])
  {
    if (!a3 || ([a3 isDescendantOfView:a2] & 1) == 0)
    {
      long long v8 = (void *)[a2 _constraintsExceptingSubviewAutoresizingConstraints];
      uint64_t v9 = [v8 count];
      if (v9)
      {
        uint64_t v10 = v9 - 1;
        do
        {
          uint64_t v11 = (void *)[v8 objectAtIndex:v10];
          if ((NSLayoutConstraintIsPotentiallyDanglyInContainer() & 1) != 0
            || a2 == (void *)[v11 container]
            && (!v11
              ? (uint64_t v12 = 0, v13 = 0)
              : (uint64_t v12 = objc_msgSend((id)objc_msgSend(v11, "firstItem"), "_referenceView"),
                 uint64_t v13 = objc_msgSend((id)objc_msgSend(v11, "secondItem"), "_referenceView")),
                ([v12 isDescendantOfView:a1] & 1) != 0
             || [v13 isDescendantOfView:a1]))
          {
            if (!i) {
              uint64_t i = (void *)[MEMORY[0x1E4F1CA48] array];
            }
            [i addObject:v11];
          }
          --v10;
        }
        while (v10 != -1);
      }
    }
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v14 = [i countByEnumeratingWithState:&v29 objects:v35 count:16];
  if (v14)
  {
    uint64_t v16 = v14;
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)v30;
    *(void *)&long long v15 = 138412290;
    long long v28 = v15;
    do
    {
      uint64_t v19 = 0;
      do
      {
        if (*(void *)v30 != v18) {
          objc_enumerationMutation(i);
        }
        uint64_t v20 = *(void **)(*((void *)&v29 + 1) + 8 * v19);
        if (!v17) {
          uint64_t v17 = (void *)[objc_alloc(MEMORY[0x1E4F28E10]) initWithKeyOptions:0 valueOptions:0 capacity:0];
        }
        uint64_t v21 = objc_msgSend(v20, "container", v28);
        if (v21)
        {
          uint64_t v22 = v21;
          uint32_t v23 = (void *)[v17 objectForKey:v21];
          if (!v23)
          {
            uint32_t v23 = (void *)[MEMORY[0x1E4F1CA48] array];
            [v17 setObject:v23 forKey:v22];
          }
          [v23 addObject:v20];
        }
        else if (os_variant_has_internal_diagnostics())
        {
          id v25 = __UIFaultDebugAssertLog();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = v28;
            NSSize v34 = v20;
            _os_log_fault_impl(&dword_1853B0000, v25, OS_LOG_TYPE_FAULT, "UIKit Debug Assert: We should have a non-nil container for this constraint that we're trying to protect: %@", buf, 0xCu);
          }
        }
        else
        {
          int v24 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &_UIViewPotentiallyDisrubtibleConstraintsForView___s_category)+ 8);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = v28;
            NSSize v34 = v20;
            _os_log_impl(&dword_1853B0000, v24, OS_LOG_TYPE_ERROR, "UIKit Debug Assert: We should have a non-nil container for this constraint that we're trying to protect: %@", buf, 0xCu);
          }
        }
        ++v19;
      }
      while (v16 != v19);
      uint64_t v26 = [i countByEnumeratingWithState:&v29 objects:v35 count:16];
      uint64_t v16 = v26;
    }
    while (v26);
  }
  else
  {
LABEL_42:
    uint64_t v17 = 0;
  }
  return v17;
}

uint64_t _UIViewReactivatePotentiallyDisruptedConstraintsForView(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  double v2 = objc_msgSend(a1, "keyEnumerator", 0);
  uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * v6), "addConstraints:", objc_msgSend(a1, "objectForKey:", *(void *)(*((void *)&v7 + 1) + 8 * v6)));
        ++v6;
      }
      while (v4 != v6);
      uint64_t result = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

double _UIViewDefaultNeighborSpacing()
{
  return 8.0;
}

void NSLayoutConstraintFailedToFindDefaultResolvedValueForSymbolicConstant(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(NSObject **)(__UILogGetCategoryCachedImpl("LayoutConstraints", &NSLayoutConstraintFailedToFindDefaultResolvedValueForSymbolicConstant___s_category)+ 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v4 = 138412290;
    uint64_t v5 = a2;
    _os_log_impl(&dword_1853B0000, v3, OS_LOG_TYPE_ERROR, "Could not resolve symbolic constant for constraint, because: %@\nUse a symbolic breakpoint at NSLayoutConstraintFailedToFindDefaultResolvedValueForSymbolicConstant to debug.", (uint8_t *)&v4, 0xCu);
  }
}

double _UIViewATVButtonVertPaddingForBaselineSpacing(int a1, int a2)
{
  double result = 72.0;
  if (((a2 - 5) | (a1 - 5)) >= 2) {
    return 24.0;
  }
  return result;
}

double _UIViewBaselineToBaselineSpacing(void *a1, void *a2)
{
  [a2 lineHeight];
  double v5 = v4;
  [a2 leading];
  double v7 = v5 + v6;
  [a1 lineHeight];
  double v9 = v8;
  [a1 leading];
  if (vabdd_f64(v9 + v10, v7) > 2.22044605e-16)
  {
    [a2 lineHeight];
    double v12 = v11;
    [a2 descender];
    double v14 = v12 + v13;
    [a1 descender];
    return v14 - v15;
  }
  return v7;
}

uint64_t ___workaroundUpdateShouldTagLayoutItemsIfNecessary_block_invoke()
{
  uint64_t result = [_UIMainBundleIdentifier() isEqualToString:@"com.apple.CarPlayApp"];
  byte_1EB25A5B5 = result;
  return result;
}

void sub_1868E6A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1868E84A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 112));
  objc_destroyWeak((id *)(v5 - 104));
  _Unwind_Resume(a1);
}

void sub_1868E8B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

UIResponseFactorViewSpringAnimationBehavior *UIViewSpringAnimationBehaviorDescribingWithResponseFactor(void *a1, double a2)
{
  id v3 = a1;
  double v4 = v3;
  if (a2 == 1.0) {
    uint64_t v5 = (UIResponseFactorViewSpringAnimationBehavior *)v3;
  }
  else {
    uint64_t v5 = [[UIResponseFactorViewSpringAnimationBehavior alloc] initWithWrapedBehavior:v3 responseFactor:a2];
  }
  double v6 = v5;

  return v6;
}

void sub_1868EA46C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

uint64_t _UIContentViewShouldUseAccessibilityTextWrappingLayout(void *a1, void *a2, float64x2_t *a3)
{
  id v5 = a1;
  id v6 = a2;
  double v7 = v6;
  if (v6 && ([v6 isHidden] & 1) == 0)
  {
    double v9 = [v7 _currentImage];
    if (!v9)
    {
      uint64_t v8 = 0;
LABEL_32:

      goto LABEL_33;
    }
    uint64_t v10 = [v5 _effectiveTextAlignment];
    double v11 = [v7 traitCollection];
    uint64_t v12 = [v11 layoutDirection];

    BOOL v14 = v12 == 1 && v10 == 2;
    BOOL v16 = v12 == 1 || v10 != 0;
    BOOL v17 = !v14 && v16;
    BOOL v18 = v10 != 4 && v17;
    uint64_t v8 = 0;
    if (![v5 _hasNonEmptyPlainTextOnly] || v18) {
      goto LABEL_32;
    }
    uint64_t v19 = [v5 font];
    [v19 lineHeight];
    double v21 = v20;
    [v19 leading];
    double v26 = v21 + v22;
    [v9 size];
    if (v23 > v26)
    {
      if (!a3)
      {
        uint64_t v8 = 0;
        goto LABEL_31;
      }
      *(void *)&v24.f64[0] = vdupq_lane_s64(0x7FEFFFFFFFFFFFFFLL, 0).u64[0];
      v24.f64[1] = v26;
      *(int8x16_t *)a3 = vbslq_s8((int8x16_t)vcgtzq_f64(*a3), vbslq_s8((int8x16_t)vcgtq_f64(*a3, v24), (int8x16_t)v24, *(int8x16_t *)a3), (int8x16_t)v24);
    }
    uint64_t v8 = 1;
LABEL_31:

    goto LABEL_32;
  }
  uint64_t v8 = 0;
LABEL_33:

  return v8;
}

double _UIContentViewRectForVerticalCenteringWithFirstLineOfLabel(void *a1)
{
  id v1 = a1;
  [v1 frame];
  CGRectGetMinY(v4);
  [v1 _capOffsetFromBoundsTop];
  uint64_t v2 = [v1 font];

  [v2 capHeight];
  return 0.0;
}

__CFString *_UIContentViewStringForAxis(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    if (a1 == 3)
    {
      uint64_t v2 = @"Both";
    }
    else
    {
      id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      CGRect v4 = v3;
      if (v1) {
        [v3 addObject:@"Horizontal"];
      }
      if ((v1 & 2) != 0) {
        [v4 addObject:@"Vertical"];
      }
      id v5 = NSString;
      id v6 = [v4 componentsJoinedByString:@", "];
      uint64_t v2 = [v5 stringWithFormat:@"[%@]", v6];
    }
  }
  else
  {
    uint64_t v2 = @"Neither";
  }
  return v2;
}

void sub_1868EAC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1868EE5CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1868EFB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSTKCategoryViewControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25BFC0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __StickerKitLibraryCore_block_invoke_5;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530EC40;
    uint64_t v8 = 0;
    qword_1EB25BFC0 = _sl_dlopen();
  }
  if (!qword_1EB25BFC0)
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    CGRect v4 = [NSString stringWithUTF8String:"void *StickerKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIRemoteCategoryKeyView.m", 21, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("STKCategoryViewController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = [MEMORY[0x1E4F28B00] currentHandler];
    id v5 = [NSString stringWithUTF8String:"Class getSTKCategoryViewControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIRemoteCategoryKeyView.m", 22, @"Unable to find class %s", "STKCategoryViewController");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1_30 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __StickerKitLibraryCore_block_invoke_5()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25BFC0 = result;
  return result;
}

void sub_1868F2604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
}

id _UILabelReverseNaturalAlignment(void *a1)
{
  id v1 = a1;
  uint64_t v2 = *(void *)off_1E52D21B8;
  uint64_t v3 = [v1 objectForKeyedSubscript:*(void *)off_1E52D21B8];
  uint64_t v4 = objc_msgSend(v3, "_ui_resolvedTextAlignment");
  if ((v4 | 2) == 2)
  {
    uint64_t v5 = v4;
    id v6 = (void *)[v3 mutableCopy];
    long long v7 = v6;
    if (v5)
    {
      if (v5 != 2)
      {
LABEL_7:
        [v1 setObject:v7 forKeyedSubscript:v2];

        goto LABEL_8;
      }
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v8 = 2;
    }
    [v6 setAlignment:v8];
    goto LABEL_7;
  }
LABEL_8:

  return v1;
}

uint64_t _UIKitDrawsDebugTextGlyphPathBoundsClipping()
{
  if (qword_1EB25ADE0 != -1) {
    dispatch_once(&qword_1EB25ADE0, &__block_literal_global_165_1);
  }
  return _MergedGlobals_54;
}

void _UIMorphLayerPaths(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 frame];
  double v6 = v5;
  [v4 frame];
  double v8 = v6 / v7;
  [v3 frame];
  double v10 = v9;
  [v4 frame];
  double v12 = v10 / v11;
  double v13 = v8 + -1.0;
  if (v8 + -1.0 < 0.0) {
    double v13 = -(v8 + -1.0);
  }
  double v14 = v12 + -1.0;
  if (v12 + -1.0 < 0.0) {
    double v14 = -v14;
  }
  if (v13 >= v14) {
    double v15 = v10 / v11;
  }
  else {
    double v15 = v8;
  }
  [v4 frame];
  double v17 = v16;
  [v4 anchorPoint];
  double v19 = v17 * v18;
  [v3 frame];
  double v21 = v20;
  [v3 anchorPoint];
  double v23 = v22;

  double v24 = v19 - v21 * v23 / v15;
  if (v24 >= 0.0) {
    double v25 = v19 - v21 * v23 / v15;
  }
  else {
    double v25 = -v24;
  }
  long long v26 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
  *(_OWORD *)&m.CATransform3D a = *MEMORY[0x1E4F1DAB8];
  *(_OWORD *)&m.c = v26;
  *(_OWORD *)&m.tCGFloat x = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
  *(_OWORD *)&v29.CATransform3D a = *(_OWORD *)&m.a;
  *(_OWORD *)&v29.c = v26;
  *(_OWORD *)&v29.tCGFloat x = *(_OWORD *)&m.tx;
  CGAffineTransformScale(&m, &v29, v15, v15);
  CGAffineTransform v28 = m;
  CGAffineTransformTranslate(&v29, &v28, 0.0, v25);
  CGAffineTransform m = v29;
  Mutable = CGPathCreateMutable();
  CGPathAddPath(Mutable, &m, (CGPathRef)[v4 path]);
  [v4 setPath:Mutable];

  CFRelease(Mutable);
}

void sub_1868FA604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v6 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t _UILabelVisualStyleAttributedStringContainsForegroundColorAttribute(void *a1)
{
  id v1 = a1;
  uint64_t v7 = 0;
  double v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  uint64_t v2 = [v1 length];
  uint64_t v3 = *(void *)off_1E52D2048;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  void v6[2] = ___UILabelVisualStyleAttributedStringContainsForegroundColorAttribute_block_invoke;
  v6[3] = &unk_1E52DE5D8;
  void v6[4] = &v7;
  objc_msgSend(v1, "enumerateAttribute:inRange:options:usingBlock:", v3, 0, v2, 0x100000, v6);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_1868FC54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ForPropertiesMatchingType(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  double v5 = a3;
  for (uint64_t i = 0; i != 18; i += 3)
  {
    uint64_t v7 = &(&PropertyMapping)[i];
    if (((unint64_t)(&PropertyMapping)[i + 2] & a1) != 0)
    {
      double v8 = [NSString stringWithUTF8String:*v7];
      ((void (**)(id, id, void *, char *))v5)[2](v5, v9, v8, v7[1]);
    }
  }
}

uint64_t FindType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 conformsToProtocol:&unk_1ED701C00];
  int v3 = [v1 conformsToProtocol:&unk_1ED701C60];

  if (v3) {
    return v2 | 2;
  }
  else {
    return v2;
  }
}

void FindRectanglesAroundRectangles(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11 = a1;
  id v12 = a2;
  double v13 = v12;
  if (a5 > 0.0 && a6 > 0.0)
  {
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = __FindRectanglesAroundRectangles_block_invoke;
    v27[3] = &__block_descriptor_64_e32_B24__0___UIAvoidanceShape__8_B16l;
    *(double *)&void v27[4] = a3;
    *(double *)&v27[5] = a4;
    *(double *)&v27[6] = a5;
    *(double *)&v27[7] = a6;
    double v14 = [v12 objectsPassingTest:v27];
    if ([v14 count])
    {
      double v15 = [v14 anyObject];
      [v13 removeObject:v15];
      double v16 = [v15 shape];
      [v16 CGRectValue];
      double v18 = v17;
      double v20 = v19;
      double v22 = v21;
      double v24 = v23;

      FindRectanglesAroundRectangles(v11, v13, a3, a4, v18 - a3, a6);
      FindRectanglesAroundRectangles(v11, v13, a3, a4, a5, v20 - a4);
      FindRectanglesAroundRectangles(v11, v13, v18 + v22, a4, a3 + a5 - (v18 + v22), a6);
      *(void *)&double v25 = FindRectanglesAroundRectangles(v11, v13, a3, v20 + v24, a5, a4 + a6 - (v20 + v24)).n128_u64[0];
      long long v26 = v13;
    }
    else
    {
      double v15 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithCGRect:", a3, a4, a5, a6);
      long long v26 = v11;
    }
    objc_msgSend(v26, "addObject:", v15, v25);
  }
}

BOOL __FindRectanglesAroundRectangles_block_invoke(CGRect *a1, void *a2)
{
  int v3 = [a2 shape];
  [v3 CGRectValue];
  BOOL v4 = CGRectIntersectsRect(v6, a1[1]);

  return v4;
}

void sub_1868FF4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTUIEmojiSearchTextFieldClass_block_invoke_1(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25BFE0)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __TextInputUILibraryCore_block_invoke_18;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E530F138;
    uint64_t v8 = 0;
    qword_1EB25BFE0 = _sl_dlopen();
  }
  if (!qword_1EB25BFE0)
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIEmojiAndStickerCollectionViewController.m", 31, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUIEmojiSearchTextField");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v5 = [NSString stringWithUTF8String:"Class getTUIEmojiSearchTextFieldClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIEmojiAndStickerCollectionViewController.m", 32, @"Unable to find class %s", "TUIEmojiSearchTextField");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1_32 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_18()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25BFE0 = result;
  return result;
}

void sub_186901140(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 + 208), 8);
  _Unwind_Resume(a1);
}

void sub_186903608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  objc_destroyWeak(v31);
  objc_destroyWeak(location);
  objc_destroyWeak(&a31);
  _Unwind_Resume(a1);
}

void sub_1869038A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186903EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186909210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186909C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_186909EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18690A310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18690AB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18690B9E8(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_18690D0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL UIInputViewSetAreConstraintsEqualEnough(void *a1, void *a2)
{
  uint64_t v4 = [a1 firstItem];
  if (v4 != [a2 firstItem]) {
    return 0;
  }
  uint64_t v5 = [a1 firstAttribute];
  if (v5 != [a2 firstAttribute]) {
    return 0;
  }
  uint64_t v6 = [a1 relation];
  if (v6 != [a2 relation]) {
    return 0;
  }
  uint64_t v7 = [a1 secondItem];
  if (v7 != [a2 secondItem]) {
    return 0;
  }
  uint64_t v9 = [a1 secondAttribute];
  return v9 == [a2 secondAttribute];
}

uint64_t _ViewHasDescendant(void *a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3 == v4)
  {
    uint64_t v6 = 1;
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    uint64_t v5 = objc_msgSend(v3, "subviews", 0);
    uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v11;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v5);
          }
          if (_ViewHasDescendant(*(void *)(*((void *)&v10 + 1) + 8 * i), v4))
          {
            uint64_t v6 = 1;
            goto LABEL_12;
          }
        }
        uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  return v6;
}

void sub_1869164D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18691C410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_18691CDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18691DA0C(_Unwind_Exception *a1)
{
}

void __SpringBoardBlankedScreen()
{
  int v0 = __SpringBoardBlankedScreen_notifyToken;
  if (!__SpringBoardBlankedScreen_notifyToken)
  {
    notify_register_check("com.apple.springboard.hasBlankedScreen", &__SpringBoardBlankedScreen_notifyToken);
    int v0 = __SpringBoardBlankedScreen_notifyToken;
  }
  uint64_t state64 = 0;
  if (notify_get_state(v0, &state64)) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = state64 == 1;
  }
  if (v1)
  {
    uint64_t v2 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v2 postNotificationName:@"_UIScrollViewSpringBoardBlankedScreenNotification" object:0];
  }
}

void sub_18691EE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void AdjustShadowWithOffset(void *a1, uint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8)
{
  id v15 = a1;
  double v16 = 0.0;
  id v21 = v15;
  if (a3)
  {
    objc_msgSend(v15, "frame", 0.0);
    if (a2 == 8 || a2 == 2)
    {
      double v18 = a5;
      double v20 = a7;
    }
    if (a2 == 1 || a2 == 4)
    {
      double v17 = a4;
      double v19 = a6;
    }
    if ((a2 & 2) != 0) {
      double v17 = a4;
    }
    if ((a2 & 8) != 0) {
      double v17 = a6 + a4 - v19;
    }
    if (a2) {
      double v18 = a5;
    }
    if ((a2 & 4) != 0) {
      double v18 = a5 + a7 - v20 + a8;
    }
    objc_msgSend(v21, "setFrame:", v17, v18);
    id v15 = v21;
    double v16 = 1.0;
  }
  [v15 setAlpha:v16];
}

void sub_1869283A0(_Unwind_Exception *a1)
{
}

void sub_186928B1C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose((const void *)(v2 - 256), 8);
  _Block_object_dispose((const void *)(v2 - 208), 8);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_18692971C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Block_object_dispose((const void *)(v2 - 240), 8);
  _Block_object_dispose((const void *)(v2 - 192), 8);
  objc_destroyWeak((id *)(v2 - 144));
  _Unwind_Resume(a1);
}

void sub_186929E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ____deviceHasHighFrequencyDigitizer_block_invoke_0()
{
  uint64_t result = MGGetBoolAnswer();
  _MergedGlobals_1320 = result;
  return result;
}

Class __getRPTScrollViewTestParametersClass_block_invoke(uint64_t a1)
{
  RecapPerformanceTestingLibraryCore();
  Class result = objc_getClass("RPTScrollViewTestParameters");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB264FB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void RecapPerformanceTestingLibraryCore()
{
  if (!RecapPerformanceTestingLibraryCore_frameworkLibrary) {
    RecapPerformanceTestingLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
}

uint64_t __RecapPerformanceTestingLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  RecapPerformanceTestingLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getRPTTestRunnerClass_block_invoke(uint64_t a1)
{
  RecapPerformanceTestingLibraryCore();
  Class result = objc_getClass("RPTTestRunner");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB264FB8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

unint64_t _UIApplicationPackedDeploymentVersionFromString(void *a1)
{
  if (a1)
  {
    BOOL v1 = [a1 componentsSeparatedByString:@"."];
    unint64_t v2 = [v1 count];
    if (v2)
    {
      id v3 = [v1 objectAtIndexedSubscript:0];
      int v4 = [v3 integerValue];

      if (v2 == 1)
      {
        unsigned __int8 v5 = 0;
LABEL_9:
        LOBYTE(v2) = 0;
        goto LABEL_10;
      }
      uint64_t v6 = [v1 objectAtIndexedSubscript:1];
      unsigned __int8 v5 = [v6 integerValue];

      if (v2 < 3) {
        goto LABEL_9;
      }
      uint64_t v7 = [v1 objectAtIndexedSubscript:2];
      LOBYTE(v2) = [v7 integerValue];
    }
    else
    {
      unsigned __int8 v5 = 0;
      int v4 = 0;
    }
LABEL_10:

    return v2 | ((unint64_t)v5 << 8) | (v4 << 16);
  }
  unsigned __int8 v5 = 0;
  LOBYTE(v2) = 0;
  int v4 = 0;
  return v2 | ((unint64_t)v5 << 8) | (v4 << 16);
}

uint64_t _UIApplicationPackedMinimumDeploymentVersion()
{
  if (qword_1EB264FC8 != -1) {
    dispatch_once(&qword_1EB264FC8, &__block_literal_global_650);
  }
  return _MergedGlobals_1321;
}

uint64_t __UIApplicationLinkedOnOrAfter()
{
  return dyld_program_sdk_at_least();
}

void _catesCalculateCachedProperties(void *a1)
{
  double v16 = a1;
  [v16 initialContentOffset];
  v2.f64[1] = v1;
  *((float64x2_t *)v16 + 10) = vabdq_f64(v2, *(float64x2_t *)(v16 + 184));
  v2.f64[0] = sqrt(*((double *)v16 + 20) * *((double *)v16 + 20) + *((double *)v16 + 21) * *((double *)v16 + 21));
  *((void *)v16 + 22) = *(void *)&v2.f64[0];
  double v3 = pow(v2.f64[0] / *((double *)v16 + 31), 0.25);
  int v4 = (double *)v16;
  *((double *)v16 + 19) = v3;
  double v5 = *((double *)v16 + 25);
  if (v5 >= 0.0)
  {
    float64x2_t v6 = vminnmq_f64(*((float64x2_t *)v16 + 14), (float64x2_t)vdupq_n_s64(0x40D3880000000000uLL));
    float64x2_t v7 = (float64x2_t)vdupq_n_s64(0xC0D3880000000000);
    float64x2_t v9 = vnegq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v6), (int8x16_t)v7, (int8x16_t)v6));
    float64x2_t v19 = v9;
    float64x2_t v20 = *((float64x2_t *)v16 + 13);
    double v8 = 0.0;
    v9.f64[0] = 1.5;
    __asm { FMOV            V1.2D, #0.5 }
    float64x2_t v17 = _Q1;
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0x3FD3D70A3D70A3D7uLL);
    double v15 = 1.5;
    do
    {
      v9.f64[0] = v9.f64[0] * 0.5 + v8;
      float64x2_t v21 = v9;
      *(int32x2_t *)&v9.f64[0] = vmovn_s64(vcgtq_f64(v17, vabsq_f64(vmulq_n_f64(vaddq_f64(v20, vmulq_f64(vmulq_n_f64(v19, v9.f64[0]), v18)), exp(v9.f64[0] * -20.0 / 1.6)))));
      v9.f64[1] = v21.f64[1];
      if (LOBYTE(v9.f64[0]) & BYTE4(v9.f64[0])) {
        double v15 = v21.f64[0];
      }
      else {
        double v8 = v21.f64[0];
      }
      v9.f64[0] = v15 - v8;
    }
    while (v15 - v8 > 0.01);
    double v3 = v5 + v8;
    int v4 = (double *)v16;
  }
  v4[18] = v3;
}

double _NSStretchOfClipBoundsForDocumentFrame(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8, double a9, double a10)
{
  if (a7 <= a3 + 0.0001) {
    a5 = a9;
  }
  if (a7 <= a3 + 0.0001) {
    double v21 = a3;
  }
  else {
    double v21 = a7;
  }
  if (a8 <= a4 + 0.0001) {
    a6 = a10;
  }
  if (a8 <= a4 + 0.0001) {
    double v23 = a4;
  }
  else {
    double v23 = a8;
  }
  v76.origin.CGFloat x = a5;
  v76.origin.CGFloat y = a6;
  v76.size.CGFloat width = v21;
  v76.size.double height = v23;
  CGRect v49 = CGRectIntersection(*(CGRect *)&a1, v76);
  double height = v49.size.height;
  CGFloat x = v49.origin.x;
  CGFloat y = v49.origin.y;
  CGFloat width = v49.size.width;
  double v41 = a6;
  double v40 = a5;
  if (CGRectIsNull(v49))
  {
    v50.origin.CGFloat x = a1;
    v50.origin.CGFloat y = a2;
    v50.size.CGFloat width = a3;
    v50.size.double height = a4;
    CGFloat MinX = CGRectGetMinX(v50);
    v51.origin.CGFloat x = a5;
    v51.origin.CGFloat y = a6;
    v51.size.CGFloat width = v21;
    v51.size.double height = v23;
    rect2CATransform3D a = CGRectGetMinY(v51);
    v52.origin.CGFloat x = a1;
    v52.origin.CGFloat y = a2;
    v52.size.CGFloat width = a3;
    v52.size.double height = a4;
    CGFloat v26 = CGRectGetWidth(v52);
    v53.origin.CGFloat x = a5;
    v53.origin.CGFloat y = a6;
    v53.size.CGFloat width = v21;
    v53.size.double height = v23;
    v54.size.double height = CGRectGetHeight(v53);
    v54.origin.CGFloat y = rect2a;
    v54.origin.CGFloat x = MinX;
    v54.size.CGFloat width = v26;
    v77.origin.CGFloat x = a5;
    v77.origin.CGFloat y = a6;
    v77.size.CGFloat width = v21;
    v77.size.double height = v23;
    CGRect v55 = CGRectIntersection(v54, v77);
    recCGAffineTransform t2 = v55.size.width;
    CGFloat v46 = v55.origin.x;
    v55.origin.CGFloat x = a5;
    v55.origin.CGFloat y = a6;
    v55.size.CGFloat width = v21;
    v55.size.double height = v23;
    CGFloat v39 = CGRectGetMinX(v55);
    v56.origin.CGFloat x = a1;
    v56.origin.CGFloat y = a2;
    v56.size.CGFloat width = a3;
    v56.size.double height = a4;
    CGFloat MinY = CGRectGetMinY(v56);
    v57.origin.CGFloat x = a5;
    v57.origin.CGFloat y = a6;
    v57.size.CGFloat width = v21;
    v57.size.double height = v23;
    CGFloat r1 = CGRectGetWidth(v57);
    v58.origin.CGFloat x = a1;
    v58.origin.CGFloat y = a2;
    v58.size.CGFloat width = a3;
    v58.size.double height = a4;
    v59.size.double height = CGRectGetHeight(v58);
    v59.origin.CGFloat y = MinY;
    v59.origin.CGFloat x = v39;
    v59.size.CGFloat width = r1;
    v78.origin.CGFloat x = a5;
    CGFloat v27 = v46;
    v78.origin.CGFloat y = a6;
    v78.size.CGFloat width = v21;
    v78.size.double height = v23;
    CGRect v60 = CGRectIntersection(v59, v78);
    double v28 = v60.origin.y;
    double height = v60.size.height;
  }
  else
  {
    CGFloat v27 = x;
    recCGAffineTransform t2 = width;
    double v28 = y;
  }
  v61.origin.CGFloat x = a1;
  v61.origin.CGFloat y = a2;
  v61.size.CGFloat width = a3;
  v61.size.double height = a4;
  v79.origin.CGFloat x = v27;
  v79.origin.CGFloat y = v28;
  v79.size.CGFloat width = rect2;
  v79.size.double height = height;
  if (CGRectEqualToRect(v61, v79)) {
    return *MEMORY[0x1E4F1DB30];
  }
  CGFloat v30 = a3;
  v62.origin.CGFloat x = v27;
  v62.origin.CGFloat y = v28;
  v62.size.CGFloat width = rect2;
  v62.size.double height = height;
  if (CGRectGetWidth(v62) == 0.0) {
    CGFloat v27 = v40;
  }
  else {
    double v21 = rect2;
  }
  v63.origin.CGFloat x = a1;
  v63.origin.CGFloat y = a2;
  v63.size.CGFloat width = a3;
  v63.size.double height = a4;
  double v31 = CGRectGetMinX(v63);
  v64.origin.CGFloat x = v27;
  v64.origin.CGFloat y = v28;
  v64.size.CGFloat width = v21;
  v64.size.double height = height;
  if (v31 >= CGRectGetMinX(v64))
  {
    v67.origin.CGFloat x = a1;
    v67.origin.CGFloat y = a2;
    v67.size.CGFloat width = v30;
    v67.size.double height = a4;
    double MaxX = CGRectGetMaxX(v67);
    v68.origin.CGFloat x = v27;
    v68.origin.CGFloat y = v28;
    v68.size.CGFloat width = v21;
    v68.size.double height = height;
    double v33 = CGRectGetMaxX(v68);
  }
  else
  {
    v65.origin.CGFloat x = a1;
    v65.origin.CGFloat y = a2;
    v65.size.CGFloat width = v30;
    v65.size.double height = a4;
    double MaxX = CGRectGetMinX(v65);
    v66.origin.CGFloat x = v27;
    v66.origin.CGFloat y = v28;
    v66.size.CGFloat width = v21;
    v66.size.double height = height;
    double v33 = CGRectGetMinX(v66);
  }
  double v29 = MaxX - v33;
  v69.origin.CGFloat x = v27;
  v69.origin.CGFloat y = v28;
  v69.size.CGFloat width = v21;
  v69.size.double height = height;
  if (CGRectGetHeight(v69) == 0.0)
  {
    double height = v23;
    double v28 = v41;
  }
  v70.origin.CGFloat x = a1;
  v70.origin.CGFloat y = a2;
  v70.size.CGFloat width = v30;
  v70.size.double height = a4;
  double v34 = CGRectGetMinY(v70);
  v71.origin.CGFloat x = v27;
  v71.origin.CGFloat y = v28;
  v71.size.CGFloat width = v21;
  v71.size.double height = height;
  if (v34 >= CGRectGetMinY(v71))
  {
    v74.origin.CGFloat x = v27;
    v74.origin.CGFloat y = v28;
    v74.size.CGFloat width = v21;
    v74.size.double height = height;
    CGRectGetMaxY(v74);
    v75.origin.CGFloat y = a2;
    v75.origin.CGFloat x = a1;
    v75.size.CGFloat width = v30;
    v75.size.double height = a4;
    CGRectGetMaxY(v75);
  }
  else
  {
    v72.origin.CGFloat x = v27;
    v72.origin.CGFloat y = v28;
    v72.size.CGFloat width = v21;
    v72.size.double height = height;
    CGRectGetMinY(v72);
    v73.origin.CGFloat y = a2;
    v73.origin.CGFloat x = a1;
    v73.size.CGFloat width = v30;
    v73.size.double height = a4;
    CGRectGetMinY(v73);
  }
  return v29;
}

id _UIMenuForUIMenuControllerMenuItems()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v0 = +[UIMenuController sharedMenuController];
  float64_t v1 = [v0 menuItems];

  if ([v1 count])
  {
    float64x2_t v2 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(v1, "count"));
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v3);
          }
          double v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          float64x2_t v9 = objc_msgSend(v8, "title", (void)v13);
          long long v10 = +[UICommand commandWithTitle:image:action:propertyList:](UICommand, "commandWithTitle:image:action:propertyList:", v9, 0, [v8 action], 0);

          if ([v8 dontDismiss]) {
            objc_msgSend(v10, "setAttributes:", objc_msgSend(v10, "attributes") | 8);
          }
          [v2 addObject:v10];
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v5);
    }

    long long v11 = +[UIMenu menuWithTitle:&stru_1ED0E84C0 image:0 identifier:0 options:1 children:v2];
  }
  else
  {
    long long v11 = 0;
  }

  return v11;
}

void sub_18692F40C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

BOOL isDeferredElementVisibleInMenu(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = [a2 children];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __isDeferredElementVisibleInMenu_block_invoke;
  v8[3] = &unk_1E5303CC8;
  id v9 = v3;
  id v5 = v3;
  BOOL v6 = [v4 indexOfObjectPassingTest:v8] != 0x7FFFFFFFFFFFFFFFLL;

  return v6;
}

id _menuElementsPreparedForDisplay(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v34 = a2;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a3;
  id v37 = [MEMORY[0x1E4F1CA48] array];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id obj = v6;
  uint64_t v8 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)v39;
    uint64_t v35 = *(void *)v39;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v39 != v11) {
          objc_enumerationMutation(obj);
        }
        id v13 = *(id *)(*((void *)&v38 + 1) + 8 * v12);
        id v14 = v13;
        if (([v7 supportsCustomViewMenuElements] & 1) == 0)
        {
          objc_opt_class();
          id v14 = v13;
          if (objc_opt_isKindOfClass())
          {
            id v14 = v13;
            if (([v13 _forceCustomViewSupport] & 1) == 0)
            {
              id v14 = v13;
              long long v15 = [v14 menuElementRepresentation];

              if (!v15) {
                goto LABEL_24;
              }
              uint64_t v16 = [v14 menuElementRepresentation];

              id v14 = (id)v16;
            }
          }
        }
        float64x2_t v17 = objc_msgSend(v7, "preparer", v34);
        [v14 _willBePreparedForInitialDisplay:v17];

        if ([v14 _isLoadingPlaceholder])
        {
          id v14 = v14;
          uint64_t v18 = [v7 deferredElementDelegate];
          [v14 setDelegate:v18];

          [v14 _fulfillIfNecessary];
          if ([v14 fulfilled]
            && ([v14 fulfilledElements],
                float64x2_t v19 = objc_claimAutoreleasedReturnValue(),
                v19,
                v19))
          {
            float64x2_t v20 = [v14 fulfilledElements];
            double v21 = +[UIMenu menuWithChildren:v20];
            double v22 = +[_UIActionBridge validatedCommandMenuForMenu:v21 context:v7];

            uint64_t v23 = [v22 _resolvedElementSize];
            double v24 = [v22 children];
            double v25 = _menuElementsPreparedForDisplay(v24, v23, v7, a4);
            [v37 addObjectsFromArray:v25];

            uint64_t v11 = v35;
          }
          else
          {
            [v37 addObject:v14];
            *(unsigned char *)(a4 + 3) = 1;
          }
LABEL_24:

          goto LABEL_25;
        }
        if ([v14 _isInlineGroup])
        {
          id v14 = v14;
          id v26 = v7;
          CGFloat v27 = v26;
          if ([v26 tracksSelection])
          {
            CGFloat v27 = v26;
            if (([v14 options] & 0x80) != 0)
            {
              CGFloat v27 = (void *)[v26 copy];

              [v27 setTracksSelection:0];
            }
          }

          [v14 _resolveElementSizeWithContext:v27];
          uint64_t v28 = [v14 _resolvedElementSize];
          if (([v14 options] & 0x80) != 0 && v28 == 2) {
            *(unsigned char *)(a4 + 4) = 1;
          }
          double v29 = [v14 children];
          CGFloat v30 = _menuElementsPreparedForDisplay(v29, v28, v27, a4);
          double v31 = [v14 menuByReplacingChildren:v30];

          [v37 addObject:v31];
          uint64_t v10 = 0;
          uint64_t v11 = v35;
        }
        else
        {
          [v37 addObject:v14];
          if (a4)
          {
            if ([v14 _isLeaf])
            {
              id v14 = v14;
              if (([v14 attributes] & 4) != 0) {
                goto LABEL_24;
              }
              *(unsigned char *)(a4 + 3) = 1;
              if ([v7 shouldTrackSelectionForVisibleIndex:v10 elementSize:v34]) {
                *(unsigned char *)(a4 + 1) |= [v14 state] != 0;
              }
            }
            else
            {
              *(_WORD *)(a4 + 2) = 257;
            }
            ++v10;
          }
        }
LABEL_25:

        ++v12;
      }
      while (v9 != v12);
      uint64_t v32 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
      uint64_t v9 = v32;
    }
    while (v32);
  }

  return v37;
}

uint64_t __isDeferredElementVisibleInMenu_block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  if (([v6 isEqual:*(void *)(a1 + 32)] & 1) != 0
    || [v6 _isInlineGroup]
    && isDeferredElementVisibleInMenu(*(void *)(a1 + 32), v6))
  {
    uint64_t v7 = 1;
    *a4 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void stateMachineSpec_block_invoke_4_8(uint64_t a1, void *a2)
{
  float64x2_t v2 = a2;
  if ([v2 clicksUpAutomaticallyAfterTimeout]) {
    handleEvent(stateMachineSpec_8, v2[1], 2, (uint64_t)v2, v2 + 1);
  }
}

uint64_t stateMachineSpec_block_invoke_5_6(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [v2 delegate];
  [v3 clickDriver:v2 didPerformEvent:2];

  LODWORD(v3) = [v2 allowsRepeatedClicks];
  if (v3) {
    return 2;
  }
  else {
    return 1;
  }
}

void sub_1869370F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186937D74(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1869393C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186939888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186939BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
}

void sub_18693B448(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id decodeQueue()
{
  if (qword_1EB25E6B8 != -1) {
    dispatch_once(&qword_1EB25E6B8, &__block_literal_global_671);
  }
  int v0 = (void *)qword_1EB25E6B0;
  return v0;
}

void __loaderKickoffQueue_block_invoke()
{
  dispatch_workloop_t v0 = dispatch_workloop_create("UIImageView loading");
  uint64_t v1 = (void *)qword_1EB25E6A0;
  qword_1EB25E6A0 = (uint64_t)v0;
}

void __decodeQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("UIImageView decode queue", 0);
  uint64_t v1 = (void *)qword_1EB25E6B0;
  qword_1EB25E6B0 = (uint64_t)v0;
}

double pretiledSizeForImage(void *a1, double a2)
{
  id v3 = a1;
  [v3 size];
  double v5 = v4;
  [v3 capInsets];
  double v7 = v6;
  double v9 = v8;

  double v10 = a2 - (v7 + v9);
  if (v10 > 64.0) {
    double v10 = 64.0;
  }
  return v7 + v9 + (v5 - v7 - v9) * floor(v10 / (v5 - v7 - v9));
}

uint64_t __pretiledImageForImage_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "drawInRect:", *MEMORY[0x1E4F1DAD8], *(double *)(MEMORY[0x1E4F1DAD8] + 8), *(double *)(a1 + 40), *(double *)(a1 + 48));
}

void _UIPopoverBackgroundViewThrowForSelector(const char *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1CA00];
  uint64_t v2 = *MEMORY[0x1E4F1C3B8];
  id v3 = NSString;
  NSStringFromSelector(a1);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  double v4 = [v3 stringWithFormat:@"-[UIPopoverBackgroundView %@] must be implemented by subclassers.", v5];
  [v1 raise:v2, @"%@", v4 format];
}

void sub_18693DA14(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_18693DE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  dispatch_queue_t v0 = (void *)getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_softClass;
  uint64_t v7 = getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_softClass;
  if (!getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_block_invoke;
    void v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_block_invoke((uint64_t)v3);
    dispatch_queue_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18693DF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSISchemaUUIDClass_0()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  dispatch_queue_t v0 = (void *)getSISchemaUUIDClass_softClass_0;
  uint64_t v7 = getSISchemaUUIDClass_softClass_0;
  if (!getSISchemaUUIDClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getSISchemaUUIDClass_block_invoke_0;
    void v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getSISchemaUUIDClass_block_invoke_0((uint64_t)v3);
    dispatch_queue_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18693E00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18693E1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationDiscoveryToolTipDisplayContext");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32)
                                                                                                 + 8)
                                                                                     + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationDiscoveryToolTipDisplayContextClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationTipController.m", 32, @"Unable to find class %s", "SISchemaUEIDictationDiscoveryToolTipDisplayContext");

    __break(1u);
  }
}

void SiriInstrumentationLibrary_0()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SiriInstrumentationLibraryCore_frameworkLibrary_0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    void v3[3] = __SiriInstrumentationLibraryCore_block_invoke_0;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E530FA60;
    uint64_t v5 = 0;
    SiriInstrumentationLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!SiriInstrumentationLibraryCore_frameworkLibrary_0)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *SiriInstrumentationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIDictationTipController.m", 30, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  dispatch_queue_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __SiriInstrumentationLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  SiriInstrumentationLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void __getSISchemaUUIDClass_block_invoke_0(uint64_t a1)
{
  SiriInstrumentationLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUUID");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUUIDClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUUIDClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationTipController.m", 31, @"Unable to find class %s", "SISchemaUUID");

    __break(1u);
  }
}

void __getSISchemaUEIDictationDiscoveryToolTipDismissedClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationDiscoveryToolTipDismissed");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationDiscoveryToolTipDismissedClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationDiscoveryToolTipDismissedClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationTipController.m", 34, @"Unable to find class %s", "SISchemaUEIDictationDiscoveryToolTipDismissed");

    __break(1u);
  }
}

void __getSISchemaUEIDictationDiscoveryToolTipShownClass_block_invoke(uint64_t a1)
{
  SiriInstrumentationLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("SISchemaUEIDictationDiscoveryToolTipShown");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getSISchemaUEIDictationDiscoveryToolTipShownClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getSISchemaUEIDictationDiscoveryToolTipShownClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDictationTipController.m", 33, @"Unable to find class %s", "SISchemaUEIDictationDiscoveryToolTipShown");

    __break(1u);
  }
}

void sub_186940CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

double __UIViewReadableWidthForBodyFont()
{
  return __UIViewReadableWidthForFont(0);
}

void UIViewReportBrokenSuperviewChain(void *a1, void *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  id v6 = a2;
  if (_MergedGlobals_322) {
    goto LABEL_20;
  }
  _MergedGlobals_322 = 1;
  if (v5)
  {
    BOOL v7 = (v5[12] & 0x8000000) == 0;
    if (!a3) {
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v7 = 0;
    if (!a3)
    {
LABEL_11:
      if (v7)
      {
        double v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("View", &qword_1EB25C0D0) + 8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          goto LABEL_10;
        }
        goto LABEL_20;
      }
      double v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("View", &qword_1EB25C0D8) + 8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
LABEL_18:
      int v13 = 138412546;
      id v14 = v5;
      __int16 v15 = 2112;
      id v16 = v6;
      double v10 = "view.superview is nil during traversal after it has appeared in superview's subviews. \n"
            "\tview: %@\n"
            "\texpected superview: %@\n"
            "Break on UIViewReportBrokenSuperviewChain to debug.";
      goto LABEL_19;
    }
  }
  if (!dyld_program_sdk_at_least()) {
    goto LABEL_11;
  }
  int has_internal_diagnostics = os_variant_has_internal_diagnostics();
  if (!v7)
  {
    if (!has_internal_diagnostics)
    {
      double v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C0C8) + 8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }
    uint64_t v11 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      int v13 = 138412546;
      id v14 = v5;
      __int16 v15 = 2112;
      id v16 = v6;
      uint64_t v12 = "view.superview is nil during traversal after it has appeared in superview's subviews. \n"
            "\tview: %@\n"
            "\texpected superview: %@\n"
            "Break on UIViewReportBrokenSuperviewChain to debug.";
      goto LABEL_26;
    }
LABEL_24:

    goto LABEL_20;
  }
  if (has_internal_diagnostics)
  {
    uint64_t v11 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      int v13 = 138412546;
      id v14 = v5;
      __int16 v15 = 2112;
      id v16 = v6;
      uint64_t v12 = "View doesn't recognize its superview as a UIView. This can happen through use of CALayer API on the view lay"
            "ers instead of UIView API on the views. \n"
            "\tview: %@\n"
            "\tsuperview: %@\n"
            "Break on UIViewReportBrokenSuperviewChain to debug.";
LABEL_26:
      _os_log_fault_impl(&dword_1853B0000, v11, OS_LOG_TYPE_FAULT, v12, (uint8_t *)&v13, 0x16u);
      goto LABEL_24;
    }
    goto LABEL_24;
  }
  double v9 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &qword_1EB25C0C0) + 8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
LABEL_10:
    int v13 = 138412546;
    id v14 = v5;
    __int16 v15 = 2112;
    id v16 = v6;
    double v10 = "View doesn't recognize its superview as a UIView. This can happen through use of CALayer API on the view layer"
          "s instead of UIView API on the views. \n"
          "\tview: %@\n"
          "\tsuperview: %@\n"
          "Break on UIViewReportBrokenSuperviewChain to debug.";
LABEL_19:
    _os_log_impl(&dword_1853B0000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v13, 0x16u);
  }
LABEL_20:
}

BOOL _UIViewIsFullyTransparentGivenAlpha(double a1)
{
  return a1 < 0.01;
}

double _UIGetDefaultSpringParameters(void *a1, void *a2, void *a3, void *a4)
{
  _UILoadDefaultSpringParameters();
  if (a1)
  {
    double result = *(double *)&_UIViewDefaultSpringMass;
    *a1 = _UIViewDefaultSpringMass;
  }
  if (a2)
  {
    double result = *(double *)&_UIViewDefaultSpringStiffness;
    *a2 = _UIViewDefaultSpringStiffness;
  }
  if (a3)
  {
    double result = *(double *)&_UIViewDefaultSpringDamping;
    *a3 = _UIViewDefaultSpringDamping;
  }
  if (a4)
  {
    double result = *(double *)&_UIViewDefaultSpringDuration;
    *a4 = _UIViewDefaultSpringDuration;
  }
  return result;
}

void _UISetDefaultSpringParameters(double a1, double a2, double a3, double a4)
{
  _UIViewDefaultSpringIgnoreUserDefaults = 1;
  _UIViewDefaultSpringMass = *(void *)&a1;
  _UIViewDefaultSpringStiffness = *(void *)&a2;
  _UIViewDefaultSpringDamping = *(void *)&a3;
  _UIViewDefaultSpringDuratiouint64_t n = *(void *)&a4;
}

void _UISaveDefaultSpringParameters()
{
  void v7[4] = *MEMORY[0x1E4F143B8];
  dispatch_queue_t v0 = _UIKitUserDefaults();
  v6[0] = @"mass";
  id v1 = [NSNumber numberWithDouble:*(double *)&_UIViewDefaultSpringMass];
  v7[0] = v1;
  v6[1] = @"stiffness";
  uint64_t v2 = [NSNumber numberWithDouble:*(double *)&_UIViewDefaultSpringStiffness];
  v7[1] = v2;
  void v6[2] = @"damping";
  id v3 = [NSNumber numberWithDouble:*(double *)&_UIViewDefaultSpringDamping];
  void v7[2] = v3;
  v6[3] = @"duration";
  long long v4 = [NSNumber numberWithDouble:*(double *)&_UIViewDefaultSpringDuration];
  void v7[3] = v4;
  uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:v6 count:4];
  [v0 setValue:v5 forKey:@"DefaultSpringParameters"];
}

double *_UIViewCurlUpTransitionToTime(double *result, double a2, double a3)
{
  double v3 = a2 * 0.174;
  double v4 = a2 * 0.174 + a3 * 0.985 + 200.0;
  float v5 = (a2 * 0.174 + *result * 0.985 + 200.0) / v4;
  float v6 = fminf(fmaxf(v5, 0.65), 0.9);
  if (v6 != v5) {
    *double result = (v4 * v6 + -200.0 - v3) / 0.985;
  }
  return result;
}

uint64_t _layerAndPropertyForTrackedAnimation(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  float v6 = objc_getAssociatedObject(v5, &unk_1EB25C09C);
  BOOL v7 = objc_getAssociatedObject(v5, &unk_1EB25C09B);

  if (a3) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  uint64_t v9 = !v8;
  if (!v8)
  {
    id v10 = v7;
LABEL_11:
    *a3 = v10;
    goto LABEL_12;
  }
  if (a3)
  {
    id v10 = 0;
    goto LABEL_11;
  }
LABEL_12:
  if (a2 && v6)
  {
    id v11 = v6;
    uint64_t v9 = 1;
LABEL_17:
    *a2 = v11;
    goto LABEL_18;
  }
  if (a2)
  {
    id v11 = 0;
    goto LABEL_17;
  }
LABEL_18:

  return v9;
}

double _calculatedSystemSpacing(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 _autolayoutSpacingAtEdge:5 forAttribute:12 nextToNeighbor:v4 edge:6 attribute:11 multiplier:1.0];
  double v6 = v5;
  [v4 _internalLastBaselineOffsetFromBottom];
  double v8 = v7;

  [v3 _internalFirstBaselineOffsetFromTop];
  double v10 = v9;

  return v6 - (v8 + v10);
}

id UIViewMissingInitialTraitCollection(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  _UIIsPrivateMainBundle();
  if (dyld_program_sdk_at_least())
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"UITraitCollection *UIViewMissingInitialTraitCollection(UIView *__strong)"];
    [v2 handleFailureInFunction:v3, @"UIView.m", 6743, @"UIView is missing its initial trait collection populated during initialization. This is a serious bug, likely caused by accessing properties or methods on the view before calling a UIView initializer. View: %@", v1 file lineNumber description];

LABEL_3:
    goto LABEL_7;
  }
  if (os_variant_has_internal_diagnostics())
  {
    uint64_t v2 = __UIFaultDebugAssertLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v9 = v1;
      _os_log_fault_impl(&dword_1853B0000, v2, OS_LOG_TYPE_FAULT, "UIView is missing its initial trait collection populated during initialization. This is a serious bug, likely caused by accessing properties or methods on the view before calling a UIView initializer. View: %@ Set a symbolic breakpoint on UIViewMissingInitialTraitCollection and check the backtrace to see what's causing this. This will become an assert in a future version.", buf, 0xCu);
    }
    goto LABEL_3;
  }
  id v4 = *(NSObject **)(__UILogGetCategoryCachedImpl("Assert", &UIViewMissingInitialTraitCollection___s_category) + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    id v9 = v1;
    _os_log_impl(&dword_1853B0000, v4, OS_LOG_TYPE_ERROR, "UIView is missing its initial trait collection populated during initialization. This is a serious bug, likely caused by accessing properties or methods on the view before calling a UIView initializer. View: %@ Set a symbolic breakpoint on UIViewMissingInitialTraitCollection and check the backtrace to see what's causing this. This will become an assert in a future version.", buf, 0xCu);
  }
LABEL_7:
  double v5 = +[UIScreen mainScreen];
  double v6 = [v5 traitCollection];

  return v6;
}

void UIViewReturningStaleTraitCollection(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  double v6 = +[UITraitCollection _descriptionForChangeFromTraitCollection:a2 toTraitCollection:a3];
  double v7 = &stru_1ED0E84C0;
  if ((_UIInternalPreferenceUsesDefault(&_UIInternalPreference_LogStaleViewTraitCollectionBacktrace, @"LogStaleViewTraitCollectionBacktrace", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateBool) & 1) == 0&& byte_1E8FD560C)
  {
    double v8 = NSString;
    id v9 = [MEMORY[0x1E4F29060] callStackSymbols];
    double v7 = [v8 stringWithFormat:@" Backtrace: \n%@", v9];
  }
  uint64_t v10 = *(NSObject **)(__UILogGetCategoryCachedImpl("StaleTraitCollection", &UIViewReturningStaleTraitCollection___s_category)+ 8);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412802;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v6;
    __int16 v15 = 2112;
    id v16 = v7;
    _os_log_impl(&dword_1853B0000, v10, OS_LOG_TYPE_ERROR, "Returning stale traitCollection for view: %@ \nPending trait updates: %@%@", buf, 0x20u);
  }
}

double _convertVisualAltitudeFromViewToView(void *a1, void *a2, double a3)
{
  id v5 = a1;
  id v6 = a2;
  double v7 = [v5 layer];
  double v8 = [v6 layer];
  id v9 = [v7 ancestorSharedWithLayer:v8];

  uint64_t v10 = [v5 layer];

  if (v10 != v9)
  {
    uint64_t v11 = [v5 layer];
    if ((void *)v11 != v9)
    {
      id v12 = (void *)v11;
      do
      {
        id v13 = (id)[v12 unsafeUnretainedDelegate];
        if (v13)
        {
          id v14 = v13;
          if (_IsKindOfUIView((uint64_t)v13)) {
            id v13 = v14;
          }
          else {
            id v13 = 0;
          }
        }
        [v13 _visualAltitude];
        a3 = a3 + v15;
        uint64_t v16 = [v12 superlayer];

        id v12 = (void *)v16;
      }
      while ((void *)v16 != v9);
    }
  }
  uint64_t v17 = [v6 layer];

  if (v17 != v9)
  {
    uint64_t v18 = [v6 layer];
    if ((void *)v18 != v9)
    {
      float64x2_t v19 = (void *)v18;
      do
      {
        id v20 = (id)[v19 unsafeUnretainedDelegate];
        if (v20)
        {
          id v21 = v20;
          if (_IsKindOfUIView((uint64_t)v20)) {
            id v20 = v21;
          }
          else {
            id v20 = 0;
          }
        }
        [v20 _visualAltitude];
        a3 = a3 - v22;
        uint64_t v23 = [v19 superlayer];

        float64x2_t v19 = (void *)v23;
      }
      while ((void *)v23 != v9);
    }
  }
  return a3;
}

uint64_t _UIViewShouldReturnSubviewsInFocusItemsInRect()
{
  if ((_UIInternalPreferenceUsesDefault((int *)&_UIInternalPreference_ViewReturnsSubviewsInFocusItemsInRect, @"ViewReturnsSubviewsInFocusItemsInRect", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateInteger) & 1) == 0&& qword_1E8FD5620)
  {
    return qword_1E8FD5620 >= 0;
  }
  return dyld_program_sdk_at_least();
}

uint64_t _UIViewIsTransparentFocusItem(void *a1)
{
  id v1 = a1;
  if (([v1 isHidden] & 1) != 0 || (objc_msgSend(v1, "alpha"), v2 < 0.01))
  {
    uint64_t v7 = 1;
  }
  else
  {
    id v3 = [v1 backgroundColor];
    if (v3)
    {
      id v4 = [v1 backgroundColor];
      [v4 alphaComponent];
      BOOL v6 = fabs(v5) < 2.22044605e-16;
    }
    else
    {
      BOOL v6 = 1;
    }

    double v8 = [v1 layer];
    id v9 = [v8 contents];

    if (v9) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
  }

  return v7;
}

id _UIViewTextRedactedIfNecessaryForDescription(void *a1)
{
  id v1 = a1;
  BOOL v2 = +[UIView _shouldRedactTextInDescription];
  unint64_t v3 = [v1 length];
  if (v2)
  {
    id v4 = NSString;
    if (v3 < 3)
    {
      uint64_t v11 = [NSString stringWithFormat:@"'%@'", v1];
      uint64_t v7 = v1;
    }
    else
    {
      uint64_t v5 = [v1 rangeOfComposedCharacterSequenceAtIndex:0];
      uint64_t v7 = objc_msgSend(v1, "substringWithRange:", v5, v6);
      uint64_t v8 = objc_msgSend(v1, "rangeOfComposedCharacterSequenceAtIndex:", objc_msgSend(v1, "length") - 1);
      uint64_t v10 = objc_msgSend(v1, "substringWithRange:", v8, v9);
      uint64_t v11 = [v4 stringWithFormat:@"'%@...%@' (length = %ld)", v7, v10, objc_msgSend(v1, "length")];
    }
  }
  else
  {
    id v12 = v1;
    if (v3 >= 0x1A)
    {
      uint64_t v13 = objc_msgSend(v1, "rangeOfComposedCharacterSequencesForRange:", 0, 25);
      double v15 = objc_msgSend(v1, "substringWithRange:", v13, v14);
      id v12 = [v15 stringByAppendingString:@"..."];
    }
    uint64_t v16 = NSString;
    uint64_t v7 = [v12 stringByReplacingOccurrencesOfString:@"\n" withString:@" "];
    uint64_t v11 = [v16 stringWithFormat:@"'%@'", v7];
  }
  return v11;
}

uint64_t UIViewIgnoresTouchEvents(void *a1)
{
  id v1 = a1;
  int v2 = _UIViewAnimationDelegateAllowsUserInteraction(v1);
  char v3 = _UIViewEatsTouchesAndAnimationDelegateAllowsInteraction(v1, v2);
  uint64_t v4 = _UIViewIgnoresTouchEvents(v1, v3);

  return v4;
}

void *_traitCollectionIfValid(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    char v3 = v1;
    while (([v3 _cachedTraitCollectionIsValid] & 1) == 0 && !v3[11])
    {
      char v3 = (id)[v3 superview];
      if (!v3) {
        goto LABEL_9;
      }
    }
    char v3 = [v2 traitCollection];
  }
  else
  {
    char v3 = 0;
  }
LABEL_9:

  return v3;
}

void sub_18694D87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18694DC08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _UIFromValueForAnimation(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v12 = 0;
      goto LABEL_18;
    }
    id v11 = v7;
    uint64_t v13 = [v11 keyPath];
    uint64_t v14 = +[UIViewPropertyAnimator _originalFromValueForKey:v13 inLayer:v9 forAnimatorWithTrackingIdentifier:v10];

    if (v14)
    {
      id v12 = v14;
LABEL_16:

      goto LABEL_17;
    }
    if ([v11 isAdditive])
    {
      double v15 = +[UIViewAnimationState originalAnimationForKeyPath:v8 inLayer:v9];
      uint64_t v16 = v15;
      if (!v15)
      {
        uint64_t v23 = [v11 keyPath];
        float64x2_t v19 = [v9 valueForKeyPath:v23];
        id v20 = [v11 fromValue];
        objc_msgSend(v19, "CA_addValue:multipliedBy:", v20, 1);
        id v12 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_15;
      }
      id v17 = [v15 fromValue];
    }
    else
    {
      uint64_t v18 = [v11 fromValue];
      uint64_t v16 = v18;
      if (!v18)
      {
        id v21 = [v11 keyPath];
        id v12 = [v9 valueForKeyPath:v21];

        goto LABEL_15;
      }
      id v17 = v18;
    }
    id v12 = v17;
LABEL_15:

    goto LABEL_16;
  }
  id v11 = [v7 values];
  id v12 = [v11 objectAtIndex:0];
LABEL_17:

LABEL_18:
  return v12;
}

id _UIToValueForAnimation(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v8 = [v5 values];
    uint64_t v9 = [v8 lastObject];
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v10 = 0;
      goto LABEL_14;
    }
    id v8 = v5;
    if (([v8 isAdditive] & 1) != 0
      || ([v8 toValue], id v11 = objc_claimAutoreleasedReturnValue(), v11, !v11))
    {
      id v12 = objc_getAssociatedObject(v7, &unk_1EB25C099);
      uint64_t v13 = [v12 objectForKey:v6];
      uint64_t v14 = v13;
      if (v13)
      {
        id v10 = [v13 toValue];
      }
      else
      {
        double v15 = [v8 keyPath];
        id v10 = [v7 valueForKeyPath:v15];
      }
      goto LABEL_13;
    }
    uint64_t v9 = [v8 toValue];
  }
  id v10 = (void *)v9;
LABEL_13:

LABEL_14:
  return v10;
}

void _enumerateViewForest(void *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = v5;
  if (v5 && [v5 count])
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v7 = v6;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v15;
LABEL_5:
      uint64_t v11 = 0;
      while (1)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v14 + 1) + 8 * v11);
        (*(void (**)(uint64_t, void *, unsigned char *))(a2 + 16))(a2, v12, a3);
        if (*a3) {
          break;
        }
        uint64_t v13 = objc_msgSend(v12, "subviews", (void)v14);
        _enumerateViewForest(v13, a2, a3);

        if (v9 == ++v11)
        {
          uint64_t v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
          if (v9) {
            goto LABEL_5;
          }
          break;
        }
      }
    }
  }
}

void sub_186952B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void RecursivelyNameLayerTree(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = [v1 valueForKey:@"name"];

  if (!v2)
  {
    char v3 = [v1 delegate];
    uint64_t v4 = (objc_class *)objc_opt_class();
    if (v3) {
      id v5 = v3;
    }
    else {
      id v5 = v1;
    }
    id v6 = NSStringFromClass(v4);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v7 = NSString;
      uint64_t v8 = (objc_class *)objc_opt_class();
      uint64_t v9 = NSStringFromClass(v8);
      uint64_t v10 = [v7 stringWithFormat:@"%@(%@)", v9, v6];

      id v5 = v1;
      id v6 = (void *)v10;
    }
    uint64_t v11 = [NSString stringWithFormat:@"%@ (%p)", v6, v5];
    [v1 setValue:v11 forKey:@"name"];
  }
  id v12 = [v1 valueForKey:@"UICALayerRenderID"];

  if (!v12)
  {
    uint64_t v13 = [NSNumber numberWithUnsignedLongLong:CALayerGetRenderId()];
    [v1 setValue:v13 forKey:@"UICALayerRenderID"];
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v14 = [v1 sublayers];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v16; ++i)
      {
        if (*(void *)v20 != v17) {
          objc_enumerationMutation(v14);
        }
        RecursivelyNameLayerTree(*(void *)(*((void *)&v19 + 1) + 8 * i));
      }
      uint64_t v16 = [v14 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v16);
  }
}

id _UIClippingFaultLog()
{
  if (qword_1EB25C2A8 != -1) {
    dispatch_once(&qword_1EB25C2A8, &__block_literal_global_3103);
  }
  dispatch_queue_t v0 = (void *)qword_1EB25C2A0;
  return v0;
}

__CFString *_UIViewContentModeToString(unint64_t a1)
{
  if (a1 >= 0xD)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"(Unknown UIViewContentMode: %ld)", a1);
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v1 = off_1E5310260[a1];
  }
  return v1;
}

void ___shouldEnableUIKitParallaxEffects_block_invoke()
{
  _UIKitPreferencesOnce();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  dispatch_queue_t v0 = [v3 objectForKey:@"UIEnableParallaxEffects"];
  id v1 = v0;
  if (v0) {
    char v2 = [v0 BOOLValue];
  }
  else {
    char v2 = 1;
  }
  byte_1EB25C0AA = v2;
}

uint64_t __modifyTrackedAnimationsWithFactory_block_invoke(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = [v11 animationForKey:v12];
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 32);
    if (v14)
    {
      (*(void (**)(uint64_t, id, id, id))(v14 + 16))(v14, v13, v12, v11);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v15 = v13;
    }
    uint64_t v17 = v15;
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
    id v18 = v17;

    if ((v16 & 1) == 0 && v18 != v13)
    {
      [v18 setRemovedOnCompletion:*(unsigned __int8 *)(a1 + 48)];
      [v9 _incrementDidEndCount];
      [v11 addAnimation:v18 forKey:v12];
    }
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

void sub_186958300(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1869584E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186958650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869587B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t _submitAppForegroundStatus()
{
  uint64_t result = _shouldGatherAnalytics();
  if (result) {
    return AnalyticsSendEventLazy();
  }
  return result;
}

void ___timebaseInfo_block_invoke()
{
  kern_return_t v0;
  kern_return_t v1;
  NSObject *v2;
  _DWORD v3[2];
  uint64_t v4;

  uint64_t v4 = *MEMORY[0x1E4F143B8];
  dispatch_queue_t v0 = mach_timebase_info((mach_timebase_info_t)&dword_1EB265058);
  if (v0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = _uiMultitouchAnalyticsLog();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3[0] = 67109120;
      v3[1] = v1;
      _os_log_error_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Analytics: Unable to get mach timebase info. Error: %d", (uint8_t *)v3, 8u);
    }
  }
}

id _windowToTouchesMap()
{
  if (qword_1EB265078[0] != -1) {
    dispatch_once(qword_1EB265078, &__block_literal_global_43_5);
  }
  dispatch_queue_t v0 = (void *)qword_1EB265070;
  return v0;
}

void ___windowToTouchesMap_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28E10] weakToStrongObjectsMapTable];
  uint64_t v1 = (void *)qword_1EB265070;
  qword_1EB265070 = v0;
}

uint64_t ___beginAppForegroundAnalyticsTimer_block_invoke()
{
  return _submitAppForegroundStatus();
}

id ___submitAppForegroundStatus_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 32))
  {
    if (qword_1EB265060 != -1) {
      dispatch_once(&qword_1EB265060, &__block_literal_global_38);
    }
    uint64_t v1 = mach_absolute_time();
    LODWORD(v2) = dword_1EB265058;
    LODWORD(v3) = unk_1EB26505C;
    double v4 = (double)(v1 - qword_1EB265038) * (double)v2 / (double)v3 / 1000000000.0;
    id v5 = _uiMultitouchAnalyticsLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134217984;
      double v13 = v4;
      _os_log_impl(&dword_1853B0000, v5, OS_LOG_TYPE_INFO, "Analytics: Reporting foreground time: %.3f sec", buf, 0xCu);
    }

    id v6 = _UIMainBundleIdentifier();
    id v7 = objc_msgSend(NSNumber, "numberWithDouble:", v4, @"bundleID", @"appForegroundActiveDuration", v6);
    v11[1] = v7;
    uint64_t v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:2];

    qword_1EB265038 = v1;
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x1E4F1CC08];
  }
  return v8;
}

uint64_t _UIDatePickerNumberOfDaysBetweenDates(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  id v7 = [v6 components:30 fromDate:a2];
  uint64_t v8 = [v6 components:30 fromDate:v5];

  [v7 setHour:12];
  [v8 setHour:12];
  id v9 = [v6 dateFromComponents:v7];
  uint64_t v10 = [v6 dateFromComponents:v8];
  id v11 = [v6 components:16 fromDate:v9 toDate:v10 options:0];

  uint64_t v12 = [v11 day];
  return v12;
}

id _daysAssignedToMonth(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_opt_new();
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v6 = v3;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * i), "copyWithAssignedMonth:", v4, (void)v14);
        [v5 addObject:v11];
      }
      uint64_t v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v8);
  }

  uint64_t v12 = (void *)[v5 copy];
  return v12;
}

id _joinedArrayFromArrays(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = objc_opt_new();
  long long v14 = &a9;
  int v10 = 3;
  do
  {
    id v11 = v14++;
    [v9 addObjectsFromArray:*v11];
    --v10;
  }
  while (v10);
  uint64_t v12 = (void *)[v9 copy];

  return v12;
}

void _collectTransitions(void *a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    objc_msgSend(v5, "animations", 0);
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          _collectTransitions(*(void *)(*((void *)&v15 + 1) + 8 * i), v6, v7);
        }
        uint64_t v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v10);
    }
LABEL_15:

    goto LABEL_16;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v8 = v5;
    if ([v8 isAdditive])
    {
      double v13 = [v8 keyPath];
      long long v14 = [v6 objectForKeyedSubscript:v13];
      if (!v14)
      {
        long long v14 = objc_alloc_init(_UIViewKeyValueAnimationFactoryTransition);
        [v6 setObject:v14 forKeyedSubscript:v13];
      }
      v7[2](v7, v8, v14);
    }
    goto LABEL_15;
  }
LABEL_16:
}

void ___animationForValueAndKeyPath_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Warning", _UIInternalPreference_UIViewDebugSignposts_block_invoke___s_category_15)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl(&dword_1853B0000, v2, OS_LOG_TYPE_ERROR, "Animating the frame via absolute animations is not supported. Animation key path '%@' value '%@'", (uint8_t *)&v5, 0x16u);
  }
}

void ___animationForValueAndKeyPath_block_invoke_32(double *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(NSObject **)(__UILogGetCategoryCachedImpl("Warning", &_UIInternalPreference_UIViewDebugSignposts_block_invoke_2___s_category_2)+ 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *((void *)a1 + 4);
    CGFloat v4 = a1[7];
    CGFloat v5 = a1[8];
    uint64_t v6 = v2;
    v13.CGFloat width = v4;
    v13.double height = v5;
    __int16 v7 = NSStringFromCGSize(v13);
    int v8 = 138412546;
    uint64_t v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "The size component of frame is not animatable. The change in size will be ignored. Animation key path '%@' delta size '%@'", (uint8_t *)&v8, 0x16u);
  }
}

uint64_t _UIViewLayerGetNearestAncestorView(void *a1)
{
  uint64_t v1 = a1;
  for (uint64_t result = [a1 unsafeUnretainedDelegate];
        v1 && !result;
        uint64_t result = [v1 unsafeUnretainedDelegate])
  {
    uint64_t v1 = (void *)[v1 superlayer];
  }
  return result;
}

id getEMFStringUtilitiesClass_1()
{
  uint64_t v4 = 0;
  CGFloat v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getEMFStringUtilitiesClass_softClass_1;
  uint64_t v7 = getEMFStringUtilitiesClass_softClass_1;
  if (!getEMFStringUtilitiesClass_softClass_1)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getEMFStringUtilitiesClass_block_invoke_1;
    void v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getEMFStringUtilitiesClass_block_invoke_1((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_18695BADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void getEMFSkinToneSpecifierTypeFitzpatrickSilhouette_0()
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v0 = (void **)getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr_0;
  uint64_t v9 = getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr_0;
  if (!getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr_0)
  {
    id v1 = EmojiFoundationLibrary_5();
    void v7[3] = (uint64_t)dlsym(v1, "EMFSkinToneSpecifierTypeFitzpatrickSilhouette");
    getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr_0 = v7[3];
    uint64_t v0 = (void **)v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (v0)
  {
    unint64_t v2 = *v0;
    id v3 = v2;
  }
  else
  {
    uint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    CGFloat v5 = [NSString stringWithUTF8String:"NSString *getEMFSkinToneSpecifierTypeFitzpatrickSilhouette(void)"];
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIKeyboardEmojiFamilyConfigurationView.m", 24, @"%s", dlerror());

    __break(1u);
  }
}

void sub_18695C140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18695C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18695C770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18695CBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18695D8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getEMFStringUtilitiesClass_block_invoke_1(uint64_t a1)
{
  EmojiFoundationLibrary_5();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("EMFStringUtilities");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getEMFStringUtilitiesClass_softClass_1 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    unint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getEMFStringUtilitiesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiFamilyConfigurationView.m", 23, @"Unable to find class %s", "EMFStringUtilities");

    __break(1u);
  }
}

void *EmojiFoundationLibrary_5()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!EmojiFoundationLibraryCore_frameworkLibrary_5)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    void v4[3] = __EmojiFoundationLibraryCore_block_invoke_7;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E5310598;
    uint64_t v6 = 0;
    EmojiFoundationLibraryCore_frameworkLibrary_5 = _sl_dlopen();
  }
  uint64_t v0 = (void *)EmojiFoundationLibraryCore_frameworkLibrary_5;
  if (!EmojiFoundationLibraryCore_frameworkLibrary_5)
  {
    uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *EmojiFoundationLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIKeyboardEmojiFamilyConfigurationView.m", 22, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __EmojiFoundationLibraryCore_block_invoke_7()
{
  uint64_t result = _sl_dlopen();
  EmojiFoundationLibraryCore_frameworkLibrary_5 = result;
  return result;
}

void *__getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_block_invoke_0(uint64_t a1)
{
  unint64_t v2 = EmojiFoundationLibrary_5();
  uint64_t result = dlsym(v2, "EMFSkinToneSpecifierTypeFitzpatrickSilhouette");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getEMFSkinToneSpecifierTypeFitzpatrickSilhouetteSymbolLoc_ptr_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                              + 24);
  return result;
}

void __setCustomizationDataForIdentifier(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v5 = [@"com.apple.UIKit.UINavigationBarCustomizations." stringByAppendingString:a2];
  uint64_t v4 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  [v4 setObject:v3 forKey:v5];
}

void sub_18696136C(_Unwind_Exception *a1)
{
}

id _CreateViewForLayer(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 name];
  uint64_t v6 = [v4 objectForKey:v5];
  uint64_t v7 = v6;
  if (!v6) {
    uint64_t v7 = (objc_class *)objc_opt_class();
  }

  uint64_t v8 = (void *)[[v7 alloc] _initWithLayer:v3];
  uint64_t v9 = [v3 sublayers];
  __int16 v10 = (void *)[v9 copy];

  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v11 = v10;
  uint64_t v12 = [v11 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v19 != v14) {
          objc_enumerationMutation(v11);
        }
        long long v16 = _CreateViewForLayer(*(void *)(*((void *)&v18 + 1) + 8 * i), v4);
        objc_msgSend(v8, "addSubview:", v16, (void)v18);
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v13);
  }

  return v8;
}

uint64_t _UIInterfaceOrientationRotationDirectionForRotationFromAngleToAngle(int a1, double a2, double a3)
{
  _UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection(1, a2, a3);
  double v7 = fabs(v6);
  _UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection(2, a2, a3);
  double v9 = fabs(v8);
  double v10 = vabdd_f64(v7, v9);
  if (a1) {
    uint64_t v11 = 2;
  }
  else {
    uint64_t v11 = 1;
  }
  if (v7 < v9) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = 2;
  }
  if (v10 >= 2.22044605e-16) {
    return v12;
  }
  else {
    return v11;
  }
}

uint64_t _UIInterfaceOrientationFromCATransform3D(_OWORD *a1)
{
  if (_MergedGlobals_1330 != -1) {
    dispatch_once(&_MergedGlobals_1330, &__block_literal_global_664);
  }
  long long v2 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v2;
  long long v3 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v3;
  long long v4 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v4;
  long long v5 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v5;
  if (!MEMORY[0x18C1031B0](&a)) {
    return 0;
  }
  long long v6 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v6;
  long long v7 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v7;
  long long v8 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v8;
  long long v9 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v9;
  CATransform3D v23 = *(CATransform3D *)byte_1EB265178;
  if (CATransform3DEqualToTransform(&a, &v23)) {
    return 1;
  }
  long long v11 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v11;
  long long v12 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v12;
  long long v13 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v13;
  long long v14 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v14;
  CATransform3D v23 = *(CATransform3D *)byte_1EB265278;
  if (CATransform3DEqualToTransform(&a, &v23)) {
    return 4;
  }
  long long v15 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v15;
  long long v16 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v16;
  long long v17 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v17;
  long long v18 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v18;
  CATransform3D v23 = *(CATransform3D *)byte_1EB2652F8;
  if (CATransform3DEqualToTransform(&a, &v23)) {
    return 3;
  }
  long long v19 = a1[5];
  *(_OWORD *)&a.m31 = a1[4];
  *(_OWORD *)&a.m33 = v19;
  long long v20 = a1[7];
  *(_OWORD *)&a.m41 = a1[6];
  *(_OWORD *)&a.m43 = v20;
  long long v21 = a1[1];
  *(_OWORD *)&a.m11 = *a1;
  *(_OWORD *)&a.m13 = v21;
  long long v22 = a1[3];
  *(_OWORD *)&a.m21 = a1[2];
  *(_OWORD *)&a.m23 = v22;
  CATransform3D v23 = *(CATransform3D *)byte_1EB2651F8;
  if (CATransform3DEqualToTransform(&a, &v23)) {
    return 2;
  }
  else {
    return 0;
  }
}

void _UIMakeBasicTransformAnimationUnambiguousWithOrientations(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  if (a2 && a3)
  {
    double v5 = 0.0;
    double v6 = 0.0;
    if (a2 != 1)
    {
      if (a2 == 3)
      {
        double v6 = 1.57079633;
      }
      else if (a2 == 4)
      {
        double v6 = -1.57079633;
      }
      else
      {
        double v6 = 3.14159265;
        if (a2 != 2) {
          double v6 = 0.0;
        }
      }
    }
    if (a3 != 1)
    {
      if (a3 == 3)
      {
        double v5 = 1.57079633;
      }
      else if (a3 == 4)
      {
        double v5 = -1.57079633;
      }
      else
      {
        double v5 = 3.14159265;
        if (a3 != 2) {
          double v5 = 0.0;
        }
      }
    }
    _UIMakeBasicTransformAnimationUnambiguousWithAngles(a1, a4, a5, v6, v5);
  }
}

void _UIMakeBasicTransformAnimationUnambiguousWithAngles(void *a1, int a2, int a3, double a4, double a5)
{
  int v8 = a2 | a3;
  id v9 = a1;
  uint64_t v10 = _UIInterfaceOrientationRotationDirectionForRotationFromAngleToAngle(v8, a4, a5);
  _UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection(v10, a4, a5);
  if (a3) {
    double v12 = -v11;
  }
  else {
    double v12 = v11;
  }
  [v9 setFromValue:0];
  long long v13 = [NSNumber numberWithDouble:v12];
  [v9 setByValue:v13];

  long long v14 = NSNumber;
  int v15 = [v9 isAdditive];
  double v16 = 0.0;
  if (!v15) {
    double v16 = a5;
  }
  long long v17 = [v14 numberWithDouble:v16];
  [v9 setToValue:v17];

  id v18 = [MEMORY[0x1E4F39D20] functionWithName:*MEMORY[0x1E4F3A5F8]];
  [v9 setValueFunction:v18];
}

void sub_18696DB38(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

double _targetFrameForTargetedPreviewInContainerView(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!v3) {
    goto LABEL_6;
  }
  double v5 = [v3 target];
  double v6 = [v3 view];
  long long v7 = [v5 container];
  int v8 = v7;
  if (!v6 || !v7)
  {

LABEL_6:
    double v23 = *MEMORY[0x1E4F1DB20];
    goto LABEL_7;
  }
  [v6 frame];
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  [v5 center];
  double v18 = v17;
  double v20 = v19;
  [v8 _currentScreenScale];
  UIRectCenteredAboutPointScale(v10, v12, v14, v16, v18, v20, v21);
  objc_msgSend(v8, "convertRect:toCoordinateSpace:", v4);
  double v23 = v22;

LABEL_7:
  return v23;
}

void sub_18696FE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186970EEC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void _setCornerCurveOnLayer(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v3 = (void *)MEMORY[0x1E4F39EA8];
    if (!a1) {
      id v3 = (void *)MEMORY[0x1E4F39EA0];
    }
    [v4 setCornerCurve:*v3];
  }
  else
  {
    [v4 setContinuousCorners:a1];
  }
}

void sub_186979304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

CGImage *CachedShadowContents(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (qword_1EB25E8A8 != -1) {
    dispatch_once(&qword_1EB25E8A8, &__block_literal_global_515_4);
  }
  double v11 = +[_UIStackedImageShadowImageKey keyWithShadowRadius:a1 cornerRadius:a2 isContinuousCorner:a3 white:a4 alpha:a5];
  uint64_t v12 = [(id)qword_1EB25E8B0 objectForKey:v11];
  double v13 = (CGImage *)v12;
  if (a2 != 0.0 && !v12)
  {
    double v14 = a2 + a2;
    double v15 = 1.0;
    if (a1) {
      objc_msgSend(MEMORY[0x1E4F39BE8], "cornerCurveExpansionFactor:", *MEMORY[0x1E4F39EA8], 1.0);
    }
    double v16 = v14 + v15 * a3 + v14 + v15 * a3;
    double v17 = v14 + v14 + v16;
    id v18 = +[UIColor blackColor];
    double v19 = (CGColor *)[v18 CGColor];

    id v20 = +[UIColor colorWithWhite:a4 alpha:a5];
    double v21 = (CGColor *)[v20 CGColor];

    LODWORD(v5) = vcvtpd_s64_f64(v17);
    uint64_t AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
    if ((int)v5 < 1)
    {
      double v25 = 0;
    }
    else
    {
      size_t v23 = AlignedBytesPerRow;
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      double v25 = CGBitmapContextCreate(0, v5, v5, 8uLL, v23, DeviceRGB, 0x2002u);
      CGColorSpaceRelease(DeviceRGB);
      if (v25)
      {
        v34.origin.CGFloat x = 0.0;
        v34.origin.CGFloat y = 0.0;
        v34.size.CGFloat width = (double)(int)v5;
        v34.size.double height = (double)(int)v5;
        CGContextClearRect(v25, v34);
        CGContextTranslateCTM(v25, 0.0, (double)(int)v5);
        CGContextScaleCTM(v25, 1.0, -1.0);
        CGContextGetCTM(&v31, v25);
        CGContextSetBaseCTM();
      }
    }
    v33.CGFloat width = 0.0;
    v33.double height = v14 + v16;
    CGContextSetShadowWithColor(v25, v33, v14, v21);
    CGContextSetFillColorWithColor(v25, v19);
    if (a3 <= 0.0)
    {
      v35.origin.CGFloat x = (v17 - v16) * 0.5;
      v35.origin.CGFloat y = -v16;
      v35.size.CGFloat width = v16;
      v35.size.double height = v16;
      CGContextFillRect(v25, v35);
    }
    else
    {
      double v26 = (v17 - v16) * 0.5;
      double v27 = -v16;
      if (a1) {
        +[UIBezierPath _continuousRoundedRectBezierPath:withRoundedCorners:cornerRadius:segments:](UIBezierPath, "_continuousRoundedRectBezierPath:withRoundedCorners:cornerRadius:segments:", -1, 16, v26, v27, v16, v16, a3, a3);
      }
      else {
        +[UIBezierPath bezierPathWithRoundedRect:cornerRadius:](UIBezierPath, "bezierPathWithRoundedRect:cornerRadius:", v26, v27, v16, v16, a3);
      }
      id v28 = objc_claimAutoreleasedReturnValue();
      CGContextAddPath(v25, (CGPathRef)[v28 CGPath]);
      CGContextFillPath(v25);
    }
    CGImageRef Image = CGBitmapContextCreateImage(v25);
    CGContextRelease(v25);
    if (Image)
    {
      double v13 = Image;
      [(id)qword_1EB25E8B0 setObject:v13 forKey:v11];
      CGImageRelease(v13);
    }
    else
    {
      double v13 = 0;
    }
  }

  return v13;
}

void __placeholderBackgroundColor_block_invoke()
{
  id v0 = +[UIColor colorWithWhite:0.7 alpha:1.0];
  qword_1EB25E898 = (uint64_t)CGColorRetain((CGColorRef)[v0 CGColor]);
}

void __CachedShadowContents_block_invoke()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1C998]);
  uint64_t v1 = (void *)qword_1EB25E8B0;
  qword_1EB25E8B0 = (uint64_t)v0;
}

__CFString *_UIImageSymbolConfigurationTextualSummary(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1 || ([v1 _isUnspecified] & 1) != 0)
  {
    id v3 = @"Unspecified";
    goto LABEL_41;
  }
  id v4 = [MEMORY[0x1E4F1CA48] array];
  if (v2[10])
  {
    [v2 customFontPointSizeMultiplier];
    if (fabs(v5 + -1.0) <= 2.22044605e-16)
    {
      long long v7 = [v2 textStyle];
      int v8 = _NSStringFromUIFontTextStyle(v7);
      [v4 addObject:v8];
    }
    else
    {
      double v6 = NSString;
      long long v7 = [v2 textStyle];
      int v8 = _NSStringFromUIFontTextStyle(v7);
      [v2 customFontPointSizeMultiplier];
      double v10 = [v6 stringWithFormat:@"%@ (%gx)", v8, v9];
      [v4 addObject:v10];
    }
    [v2 pointSizeForScalingWithTextStyle];
    if (v11 > 0.0)
    {
      uint64_t v12 = objc_msgSend(NSString, "stringWithFormat:", @"scaled from %gpt", *(void *)&v11);
      [v4 addObject:v12];
    }
  }
  if (v2[5])
  {
    [v2 customFontPointSizeMultiplier];
    double v14 = NSString;
    if (fabs(v13 + -1.0) <= 2.22044605e-16)
    {
      uint64_t v17 = 0;
      if (v2[5]) {
        uint64_t v17 = v2[4];
      }
      objc_msgSend(NSString, "stringWithFormat:", @"%gpt", v17, v40);
    }
    else
    {
      uint64_t v15 = 0;
      if (v2[5]) {
        uint64_t v15 = v2[4];
      }
      [v2 customFontPointSizeMultiplier];
      objc_msgSend(v14, "stringWithFormat:", @"%gpt (%gx)", v15, v16);
    id v18 = };
    [v4 addObject:v18];
  }
  if (v2[9])
  {
    unint64_t v19 = [v2 weight];
    if (v19 > 9) {
      id v20 = 0;
    }
    else {
      id v20 = off_1E5310868[v19];
    }
    [v4 addObject:v20];
  }
  if ([v2 _hasSpecifiedScale])
  {
    unint64_t v21 = [v2 scale] + 1;
    if (v21 > 4) {
      double v22 = @"Unknown";
    }
    else {
      double v22 = off_1E53108B8[v21];
    }
    [v4 addObject:v22];
  }
  if ([v2 _prefersMulticolor])
  {
    size_t v23 = @"Prefers Multicolor";
LABEL_33:
    [v4 addObject:v23];
    goto LABEL_34;
  }
  if ([v2 _prefersMonochrome])
  {
    size_t v23 = @"Prefers Monochrome";
    goto LABEL_33;
  }
LABEL_34:
  if (v2[6])
  {
    uint64_t v24 = NSString;
    double v25 = [v2 _namedColorStyles];
    double v26 = [v25 allKeys];
    double v27 = [v26 componentsJoinedByString:@","];
    id v28 = [v24 stringWithFormat:@"Named Color Styles: %@", v27];
    [v4 addObject:v28];
  }
  if ([v2 _hasSpecifiedHierarchicalColors])
  {
    double v29 = NSString;
    CGFloat v30 = [v2 _colors];
    CGAffineTransform v31 = [v30 valueForKeyPath:@"systemColorName"];
    uint64_t v32 = [v31 componentsJoinedByString:@","];
    CGSize v33 = [v29 stringWithFormat:@"Hierarchical Color: %@", v32];
    [v4 addObject:v33];
  }
  if ([v2 _hasSpecifiedPaletteColors])
  {
    CGRect v34 = NSString;
    CGRect v35 = [v2 _colors];
    uint64_t v36 = [v35 valueForKeyPath:@"systemColorName"];
    id v37 = [v36 componentsJoinedByString:@","];
    long long v38 = [v34 stringWithFormat:@"Palette Colors: %@", v37];
    [v4 addObject:v38];
  }
  id v3 = [v4 componentsJoinedByString:@", "];

LABEL_41:
  return v3;
}

__CFString *_NSStringFromUIFontTextStyle(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"UICTFontTextStyleTitle0"])
  {
    uint64_t v2 = @"Large Title";
  }
  else if ([v1 isEqualToString:@"UICTFontTextStyleTitle1"])
  {
    uint64_t v2 = @"Title 1";
  }
  else if ([v1 isEqualToString:@"UICTFontTextStyleTitle2"])
  {
    uint64_t v2 = @"Title 2";
  }
  else if ([v1 isEqualToString:@"UICTFontTextStyleTitle3"])
  {
    uint64_t v2 = @"Title 3";
  }
  else if ([v1 isEqualToString:@"UICTFontTextStyleHeadline"])
  {
    uint64_t v2 = @"Headline";
  }
  else if ([v1 isEqualToString:@"UICTFontTextStyleSubhead"])
  {
    uint64_t v2 = @"Subheadline";
  }
  else if ([v1 isEqualToString:@"UICTFontTextStyleBody"])
  {
    uint64_t v2 = @"Body";
  }
  else if ([v1 isEqualToString:@"UICTFontTextStyleCallout"])
  {
    uint64_t v2 = @"Callout";
  }
  else if ([v1 isEqualToString:@"UICTFontTextStyleFootnote"])
  {
    uint64_t v2 = @"Footnote";
  }
  else if ([v1 isEqualToString:@"UICTFontTextStyleCaption1"])
  {
    uint64_t v2 = @"Caption 1";
  }
  else if ([v1 isEqualToString:@"UICTFontTextStyleCaption2"])
  {
    uint64_t v2 = @"Caption 2";
  }
  else
  {
    uint64_t v2 = (__CFString *)v1;
  }

  return v2;
}

id _UIPopoverPresentationControllerSourceItemNearestViewController(void *a1)
{
  id v1 = _UIPopoverPresentationControllerSourceItemUpCast(a1);
  uint64_t v2 = [v1 _nearestViewController];

  return v2;
}

id _UIPopoverPresentationControllerSourceItemObscuredSource(void *a1)
{
  id v1 = _UIPopoverPresentationControllerSourceItemUpCast(a1);
  if (v1)
  {
    uint64_t v2 = +[_UIObscuredPopoverPresentationControllerSourceItem obscuredSourceItemForItem:v1];
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void _UIDispatchDeallocToMainThread(void *context)
{
}

id _UIViewLFLDDescriptionForArray(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(@"(\n"), "mutableCopy";
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "_lfld_description");
        [v2 appendFormat:@"\t%@\n", v8];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  [v2 appendString:@""]);
  return v2;
}

void sub_186984D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __WritingToolsUILibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB265398 = result;
  return result;
}

void sub_18698AC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTUIPredictionViewClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25D248)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __TextInputUILibraryCore_block_invoke_19;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E5310978;
    uint64_t v8 = 0;
    qword_1EB25D248 = _sl_dlopen();
  }
  if (!qword_1EB25D248)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIPredictionViewController.m", 50, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUIPredictionView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getTUIPredictionViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIPredictionViewController.m", 51, @"Unable to find class %s", "TUIPredictionView");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_9_9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_19()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D248 = result;
  return result;
}

double quadBoundingBox(double *a1)
{
  float v3 = a1[4];
  float v4 = a1[6];
  if (v3 >= v4) {
    float v5 = a1[6];
  }
  else {
    float v5 = a1[4];
  }
  float v1 = *a1;
  float v2 = a1[2];
  if (v1 >= v2) {
    float v6 = a1[2];
  }
  else {
    float v6 = *a1;
  }
  if (v6 >= v5) {
    return v5;
  }
  else {
    return v6;
  }
}

void updateSubviewsOfScrollContentViews(void *a1, void *a2, id a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    goto LABEL_8;
  }
  uint64_t v8 = (void *)[a1 delegate];
  if (!v8)
  {
LABEL_9:
    char v9 = 1;
    goto LABEL_10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  if ([a4 containsObject:v8]) {
    return;
  }
  [a3 addObject:v8];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      return;
    }
  }
  a3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  char v9 = 0;
  a2 = v8;
LABEL_10:
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v10 = objc_msgSend(a1, "sublayers", 0);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v16;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v16 != v13) {
          objc_enumerationMutation(v10);
        }
        updateSubviewsOfScrollContentViews(*(void *)(*((void *)&v15 + 1) + 8 * v14++), a2, a3, a4);
      }
      while (v12 != v14);
      uint64_t v12 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v12);
  }
  if ((v9 & 1) == 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [v8 _setCachedSubviews:a3];
    }
  }
}

uint64_t UIStatusBarStyleFromUIWebClipStatusBarStyle()
{
  return 0;
}

uint64_t UIWebClipStatusBarStyleForMetaTagContent(void *a1)
{
  id v1 = a1;
  if ([v1 caseInsensitiveCompare:@"black"])
  {
    if ([v1 caseInsensitiveCompare:@"black-translucent"])
    {
      if ([v1 caseInsensitiveCompare:@"hidden"])
      {
        if ([v1 caseInsensitiveCompare:@"light-content"])
        {
          if ([v1 caseInsensitiveCompare:@"dark-content"]) {
            uint64_t v2 = 0;
          }
          else {
            uint64_t v2 = 5;
          }
        }
        else
        {
          uint64_t v2 = 4;
        }
      }
      else
      {
        uint64_t v2 = 3;
      }
    }
    else
    {
      uint64_t v2 = 2;
    }
  }
  else
  {
    uint64_t v2 = 1;
  }

  return v2;
}

void sub_1869956EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186996A60(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

id getIXApplicationIdentityClass()
{
  uint64_t v4 = 0;
  float v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getIXApplicationIdentityClass_softClass;
  uint64_t v7 = getIXApplicationIdentityClass_softClass;
  if (!getIXApplicationIdentityClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getIXApplicationIdentityClass_block_invoke;
    void v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getIXApplicationIdentityClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186996B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getIXAppInstallCoordinatorClass()
{
  uint64_t v4 = 0;
  float v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getIXAppInstallCoordinatorClass_softClass;
  uint64_t v7 = getIXAppInstallCoordinatorClass_softClass;
  if (!getIXAppInstallCoordinatorClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getIXAppInstallCoordinatorClass_block_invoke;
    void v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getIXAppInstallCoordinatorClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186996C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getIXPromisedInMemoryDataClass()
{
  uint64_t v4 = 0;
  float v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getIXPromisedInMemoryDataClass_softClass;
  uint64_t v7 = getIXPromisedInMemoryDataClass_softClass;
  if (!getIXPromisedInMemoryDataClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getIXPromisedInMemoryDataClass_block_invoke;
    void v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getIXPromisedInMemoryDataClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186996D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getIXPromisedOutOfBandTransferClass()
{
  uint64_t v4 = 0;
  float v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getIXPromisedOutOfBandTransferClass_softClass;
  uint64_t v7 = getIXPromisedOutOfBandTransferClass_softClass;
  if (!getIXPromisedOutOfBandTransferClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getIXPromisedOutOfBandTransferClass_block_invoke;
    void v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getIXPromisedOutOfBandTransferClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_186996E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186997494(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1869976C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869991A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id baseURLForWebDocumentView(void *a1)
{
  uint64_t v1 = [a1 webView];
  uint64_t v2 = [v1 mainFrame];
  float v3 = [v2 dataSource];

  uint64_t v4 = [v3 response];
  float v5 = [v4 URL];

  if (!v5)
  {
    uint64_t v6 = [v3 request];
    float v5 = [v6 URL];
  }
  return v5;
}

Class __getAPActivationPayloadClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB2653B8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __AppClipLibraryCore_block_invoke;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E5310A58;
    uint64_t v8 = 0;
    qword_1EB2653B8 = _sl_dlopen();
  }
  if (!qword_1EB2653B8)
  {
    float v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *AppClipLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIWebClip.m", 56, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("APActivationPayload");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    float v3 = [MEMORY[0x1E4F28B00] currentHandler];
    float v5 = [NSString stringWithUTF8String:"Class getAPActivationPayloadClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIWebClip.m", 57, @"Unable to find class %s", "APActivationPayload");

LABEL_10:
    __break(1u);
  }
  qword_1EB2653B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AppClipLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2653B8 = result;
  return result;
}

void __getIXApplicationIdentityClass_block_invoke(uint64_t a1)
{
  InstallCoordinationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("IXApplicationIdentity");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getIXApplicationIdentityClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    float v3 = [NSString stringWithUTF8String:"Class getIXApplicationIdentityClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebClip.m", 74, @"Unable to find class %s", "IXApplicationIdentity");

    __break(1u);
  }
}

void InstallCoordinationLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!InstallCoordinationLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    void v3[3] = __InstallCoordinationLibraryCore_block_invoke;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5310A70;
    uint64_t v5 = 0;
    InstallCoordinationLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!InstallCoordinationLibraryCore_frameworkLibrary)
  {
    uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *InstallCoordinationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIWebClip.m", 72, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __InstallCoordinationLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  InstallCoordinationLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getIXAppInstallCoordinatorClass_block_invoke(uint64_t a1)
{
  InstallCoordinationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("IXAppInstallCoordinator");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getIXAppInstallCoordinatorClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    float v3 = [NSString stringWithUTF8String:"Class getIXAppInstallCoordinatorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebClip.m", 73, @"Unable to find class %s", "IXAppInstallCoordinator");

    __break(1u);
  }
}

void __getIXRestoringDemotedAppInstallCoordinatorClass_block_invoke(uint64_t a1)
{
  InstallCoordinationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("IXRestoringDemotedAppInstallCoordinator");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB2653C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    float v3 = [NSString stringWithUTF8String:"Class getIXRestoringDemotedAppInstallCoordinatorClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebClip.m", 80, @"Unable to find class %s", "IXRestoringDemotedAppInstallCoordinator");

    __break(1u);
  }
}

void __getIXPlaceholderClass_block_invoke(uint64_t a1)
{
  InstallCoordinationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("IXPlaceholder");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB2653C8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    float v3 = [NSString stringWithUTF8String:"Class getIXPlaceholderClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebClip.m", 75, @"Unable to find class %s", "IXPlaceholder");

    __break(1u);
  }
}

void __getIXPlaceholderAttributesClass_block_invoke(uint64_t a1)
{
  InstallCoordinationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("IXPlaceholderAttributes");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB2653D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    float v3 = [NSString stringWithUTF8String:"Class getIXPlaceholderAttributesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebClip.m", 76, @"Unable to find class %s", "IXPlaceholderAttributes");

    __break(1u);
  }
}

void __getIXPromisedInMemoryDictionaryClass_block_invoke(uint64_t a1)
{
  InstallCoordinationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("IXPromisedInMemoryDictionary");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB2653D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    float v3 = [NSString stringWithUTF8String:"Class getIXPromisedInMemoryDictionaryClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebClip.m", 78, @"Unable to find class %s", "IXPromisedInMemoryDictionary");

    __break(1u);
  }
}

void __getIXPromisedInMemoryDataClass_block_invoke(uint64_t a1)
{
  InstallCoordinationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("IXPromisedInMemoryData");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getIXPromisedInMemoryDataClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    float v3 = [NSString stringWithUTF8String:"Class getIXPromisedInMemoryDataClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebClip.m", 77, @"Unable to find class %s", "IXPromisedInMemoryData");

    __break(1u);
  }
}

void __getIXPromisedOutOfBandTransferClass_block_invoke(uint64_t a1)
{
  InstallCoordinationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("IXPromisedOutOfBandTransfer");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getIXPromisedOutOfBandTransferClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    float v3 = [NSString stringWithUTF8String:"Class getIXPromisedOutOfBandTransferClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebClip.m", 79, @"Unable to find class %s", "IXPromisedOutOfBandTransfer");

    __break(1u);
  }
}

Class __getSFWebAppDataControllerClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB2653E8)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __SafariServicesLibraryCore_block_invoke_4;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E5310A88;
    uint64_t v8 = 0;
    qword_1EB2653E8 = _sl_dlopen();
  }
  if (!qword_1EB2653E8)
  {
    float v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v4 = [NSString stringWithUTF8String:"void *SafariServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIWebClip.m", 65, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SFWebAppDataController");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    float v3 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"Class getSFWebAppDataControllerClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIWebClip.m", 66, @"Unable to find class %s", "SFWebAppDataController");

LABEL_10:
    __break(1u);
  }
  qword_1EB2653E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SafariServicesLibraryCore_block_invoke_4()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2653E8 = result;
  return result;
}

void __getIXUninstallOptionsClass_block_invoke(uint64_t a1)
{
  InstallCoordinationLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("IXUninstallOptions");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getIXUninstallOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    float v3 = [NSString stringWithUTF8String:"Class getIXUninstallOptionsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebClip.m", 81, @"Unable to find class %s", "IXUninstallOptions");

    __break(1u);
  }
}

void *__getSBReloadIconForIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = SpringBoardServicesLibrary_3();
  uint64_t result = dlsym(v2, "SBReloadIconForIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB2653F0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SpringBoardServicesLibraryCore_block_invoke_9()
{
  uint64_t result = _sl_dlopen();
  SpringBoardServicesLibraryCore_frameworkLibrary_4 = result;
  return result;
}

void *__getSBSSpringBoardServerPortSymbolLoc_block_invoke_0(uint64_t a1)
{
  uint64_t v2 = SpringBoardServicesLibrary_3();
  uint64_t result = dlsym(v2, "SBSSpringBoardServerPort");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB2653F8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18699D4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *a14, id *location, id *a16, id *a17, id *a18, id *a19, id *a20)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v21);
  objc_destroyWeak(location);
  objc_destroyWeak(a14);
  objc_destroyWeak(a16);
  objc_destroyWeak(a19);
  objc_destroyWeak(a17);
  objc_destroyWeak(a18);
  objc_destroyWeak(a20);
  objc_destroyWeak((id *)(v22 - 128));
  _Unwind_Resume(a1);
}

void sub_18699D964(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18699DB8C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1869A0A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869A1178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869A1774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869A22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869A6ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t DynamicCastUIScrollView(uint64_t a1)
{
  if (!DynamicCastUIScrollView_cls) {
    DynamicCastUIScrollView_cls = objc_opt_class();
  }
  if (objc_opt_isKindOfClass()) {
    return a1;
  }
  else {
    return 0;
  }
}

Class __getPKScribbleInteractionClass_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25C078)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __PencilKitLibraryCore_block_invoke_4;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E5310D60;
    uint64_t v8 = 0;
    qword_1EB25C078 = _sl_dlopen();
  }
  if (!qword_1EB25C078)
  {
    float v3 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *PencilKitLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIWebDocumentView.m", 107, @"%s", v6[0]);
    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("PKScribbleInteraction");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    uint64_t v5 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "Class getPKScribbleInteractionClass(void)_block_invoke"), @"UIWebDocumentView.m", 108, @"Unable to find class %s", "PKScribbleInteraction");
LABEL_10:
    __break(1u);
  }
  qword_1EB25C070 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __PencilKitLibraryCore_block_invoke_4()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25C078 = result;
  return result;
}

uint64_t __richTextTypeIdentifiers_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1C978]);
  uint64_t v1 = [(id)*MEMORY[0x1E4F444A8] identifier];
  uint64_t result = objc_msgSend(v0, "initWithObjects:", @"Apple Web Archive pasteboard type", v1, objc_msgSend((id)*MEMORY[0x1E4F443F0], "identifier"), 0);
  qword_1EB25C080 = result;
  return result;
}

void sub_1869BC93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getSSReadingListClass_0()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = __Block_byref_object_copy__244;
  long long v7 = __Block_byref_object_dispose__244;
  uint64_t v0 = _MergedGlobals_1334;
  uint64_t v8 = _MergedGlobals_1334;
  if (!_MergedGlobals_1334)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = __getSSReadingListClass_block_invoke_0;
    v2[3] = &unk_1E52D9900;
    v2[4] = &v3;
    __getSSReadingListClass_block_invoke_0((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1869BCA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *extractItemProvidersFromDropSession(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v3 = objc_msgSend(a1, "items", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = [*(id *)(*((void *)&v10 + 1) + 8 * v7) itemProvider];
        if (v8) {
          [v2 addObject:v8];
        }
        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
  return v2;
}

uint64_t __TelephonyUtilitiesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TelephonyUtilitiesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getSSReadingListClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB265408)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __SafariServicesLibraryCore_block_invoke_5;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E5310F68;
    uint64_t v8 = 0;
    qword_1EB265408 = _sl_dlopen();
  }
  if (!qword_1EB265408)
  {
    uint64_t v3 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *SafariServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIWebDocumentViewInteraction.m", 128, @"%s", v6[0]);
    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SSReadingList");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    uint64_t v5 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "Class getSSReadingListClass(void)_block_invoke"), @"UIWebDocumentViewInteraction.m", 129, @"Unable to find class %s", "SSReadingList");
LABEL_10:
    __break(1u);
  }
  _MergedGlobals_1334 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __SafariServicesLibraryCore_block_invoke_5()
{
  uint64_t result = _sl_dlopen();
  qword_1EB265408 = result;
  return result;
}

void *__getTCCAccessPreflightSymbolLoc_block_invoke_0(uint64_t a1)
{
  uint64_t v2 = TCCLibrary_0();
  uint64_t result = dlsym(v2, "TCCAccessPreflight");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1EB265410 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *TCCLibrary_0()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!TCCLibraryCore_frameworkLibrary_0)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    void v4[3] = __TCCLibraryCore_block_invoke_0;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E5310F80;
    uint64_t v6 = 0;
    TCCLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  uint64_t v0 = (void *)TCCLibraryCore_frameworkLibrary_0;
  if (!TCCLibraryCore_frameworkLibrary_0)
  {
    uint64_t v0 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"void *TCCLibrary(void)"];
    uint64_t v1 = objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebDocumentViewInteraction.m", 122, @"%s", v4[0]);
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __TCCLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  TCCLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void *__getkTCCServicePhotosSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = TCCLibrary_0();
  uint64_t result = dlsym(v2, "kTCCServicePhotos");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EB265418 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL _UICollectionViewLayoutSelectionGroupingIsMultiItemGroup(unint64_t a1)
{
  return a1 > 1;
}

void ____whiteListedClassesForDelayedCompetingGestureRecognizers_block_invoke()
{
  uint64_t v0 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_msgSend(v0, "setWithObjects:", v1, v2, v3, v4, v5, v6, objc_opt_class(), 0);
  uint64_t v8 = (void *)qword_1EB25D260;
  qword_1EB25D260 = v7;
}

void AddShadowPathToView(void *a1)
{
  CGMutablePathRef Mutable = CGPathCreateMutable();
  if (Mutable)
  {
    uint64_t v3 = Mutable;
    [a1 bounds];
    CGPathAddRect(v3, 0, v7);
    objc_msgSend((id)objc_msgSend(a1, "layer"), "setShadowPath:", v3);
    objc_msgSend((id)objc_msgSend(a1, "layer"), "setShadowOffset:", 0.0, 3.0);
    uint64_t v4 = (void *)[a1 layer];
    LODWORD(v5) = 1058642330;
    [v4 setShadowOpacity:v5];
    CGPathRelease(v3);
  }
}

uint64_t findPreviousPageIndexGivenYOffset(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v8 = a3 - a2;
  uint64_t v9 = a2 + ((unint64_t)(a3 - a2) >> 1);
  objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", v9), "floatValue");
  if (v10 >= a4)
  {
    if (v8 >= 2 && (int PreviousPageIndexGivenYOffset = findPreviousPageIndexGivenYOffset(a1, a2, v9 - 1, a4)) != 0) {
      return PreviousPageIndexGivenYOffset;
    }
    else {
      return 0;
    }
  }
  else if (v9 != a3)
  {
    int v11 = findPreviousPageIndexGivenYOffset(a1, v9 + 1, a3, a4);
    if (v11) {
      return v11;
    }
  }
  return v9;
}

uint64_t findNextPageIndexGivenYOffset(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v8 = a3 - a2;
  uint64_t v9 = a2 + ((unint64_t)(a3 - a2) >> 1);
  objc_msgSend((id)objc_msgSend(a1, "objectAtIndex:", v9), "floatValue");
  if (v10 <= a4)
  {
    if (v9 == a3) {
      return 0;
    }
    int NextPageIndexGivenYOffset = findNextPageIndexGivenYOffset(a1, v9 + 1, a3, a4);
    if (!NextPageIndexGivenYOffset) {
      return 0;
    }
    return NextPageIndexGivenYOffset;
  }
  if (v8 >= 2)
  {
    int NextPageIndexGivenYOffset = findNextPageIndexGivenYOffset(a1, a2, v9 - 1, a4);
    if (NextPageIndexGivenYOffset) {
      return NextPageIndexGivenYOffset;
    }
  }
  return v9;
}

CGPDFDocument *CGPDFDocumentCopy(uint64_t a1, void *a2)
{
  DataProvider = (CGDataProvider *)CGPDFDocumentGetDataProvider();
  if (!DataProvider) {
    return 0;
  }
  uint64_t v4 = CGPDFDocumentCreateWithProvider(DataProvider);
  if (!CGPDFDocumentIsUnlocked(v4))
  {
    uint64_t v5 = [a2 UTF8String];
    if (v5) {
      uint64_t v6 = (const char *)v5;
    }
    else {
      uint64_t v6 = "";
    }
    CGPDFDocumentUnlockWithPassword(v4, v6);
  }
  return v4;
}

void sub_1869C6DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869C7080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSSReadingListClass_block_invoke_1(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25B498)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __SafariServicesLibraryCore_block_invoke_6;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E5311008;
    uint64_t v8 = 0;
    qword_1EB25B498 = _sl_dlopen();
  }
  if (!qword_1EB25B498)
  {
    uint64_t v3 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v4 = [NSString stringWithUTF8String:"void *SafariServicesLibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIWebPDFView.m", 64, @"%s", v6[0]);
    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("SSReadingList");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    uint64_t v5 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "Class getSSReadingListClass(void)_block_invoke"), @"UIWebPDFView.m", 65, @"Unable to find class %s", "SSReadingList");
LABEL_10:
    __break(1u);
  }
  _MergedGlobals_13_5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t __SafariServicesLibraryCore_block_invoke_6()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25B498 = result;
  return result;
}

void sub_1869CBB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869CBD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869CBED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getMPAudioVideoRoutingPopoverControllerClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPAudioVideoRoutingPopoverController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPAudioVideoRoutingPopoverControllerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getMPAudioVideoRoutingPopoverControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebPlaybackTargetPicker.m", 46, @"Unable to find class %s", "MPAudioVideoRoutingPopoverController");

    __break(1u);
  }
}

void MediaPlayerLibrary()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!MediaPlayerLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    void v3[3] = __MediaPlayerLibraryCore_block_invoke;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5311020;
    uint64_t v5 = 0;
    MediaPlayerLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!MediaPlayerLibraryCore_frameworkLibrary)
  {
    uint64_t v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *MediaPlayerLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIWebPlaybackTargetPicker.m", 44, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __MediaPlayerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  MediaPlayerLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getMPAVRoutingSheetClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPAVRoutingSheet");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPAVRoutingSheetClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getMPAVRoutingSheetClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebPlaybackTargetPicker.m", 48, @"Unable to find class %s", "MPAVRoutingSheet");

    __break(1u);
  }
}

void __getMPAVRoutingControllerClass_block_invoke(uint64_t a1)
{
  MediaPlayerLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("MPAVRoutingController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getMPAVRoutingControllerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getMPAVRoutingControllerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebPlaybackTargetPicker.m", 45, @"Unable to find class %s", "MPAVRoutingController");

    __break(1u);
  }
}

void sub_1869CD3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869CDAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869CDDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869CE550(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1869CE630(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1869D0868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869D095C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1869D117C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1869D37D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1869D40E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MainRunLoopDidDraw(__CFRunLoopObserver *a1, uint64_t a2, void *a3)
{
  Maiuint64_t n = CFRunLoopGetMain();
  CFRunLoopRemoveObserver(Main, a1, (CFRunLoopMode)*MEMORY[0x1E4F1D410]);
  id v6 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  [a3 webPlugInDidDraw];
  return [v6 drain];
}

uint64_t _UIWebDoubleTapAtLocation(void *a1, double a2, double a3)
{
  uint64_t result = [a1 enclosingScrollView];
  if (!result) {
    return result;
  }
  long long v7 = (void *)result;
  uint64_t v8 = (void *)[a1 contentView];
  [a1 currentDocumentScale];
  double v10 = v9;
  objc_msgSend(a1, "rectOfInterestForPoint:", a2, a3);
  double x = v86.origin.x;
  double y = v86.origin.y;
  double width = v86.size.width;
  double height = v86.size.height;
  if (CGRectIsEmpty(v86)) {
    goto LABEL_3;
  }
  doubleTapScaleForSize(1, a1);
  double v16 = v15;
  if ([a1 considerHeightForDoubleTap]) {
    doubleTapScaleForSize(0, a1);
  }
  else {
    double v17 = 1.79769313e308;
  }
  if (v16 >= v17) {
    double v16 = v17;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (uint64_t result = objc_msgSend(a1, "shouldSelectionAssistantReceiveDoubleTapAtPoint:forScale:", a2, a3, v16),
        (result & 1) == 0))
  {
    if (v16 == 0.0)
    {
      [v7 bounds];
      double v19 = v18;
      double v21 = v20;
      [v7 contentSize];
      double v83 = v22;
      double v79 = v23;
      [v7 contentOffset];
      double v77 = v24;
      double v81 = v25;
      double v73 = a3;
      double v74 = a2;
      objc_msgSend(v7, "convertPoint:fromView:", v8, a2, a3);
      double v27 = v26;
      double v29 = v28;
      objc_msgSend(v7, "convertRect:fromView:", v8, x, y, width, height);
      double v34 = v32;
      double v35 = v33;
      BOOL v36 = v32 > v19;
      if (v32 > v19) {
        double v32 = 0.0;
      }
      double v37 = v19 - v32;
      if (v36) {
        double v30 = v27;
      }
      double v38 = v30 - v37 * 0.5;
      if (v33 <= v21) {
        double v39 = v33;
      }
      else {
        double v39 = 0.0;
      }
      double v72 = v21;
      double v40 = v21 - v39;
      if (v33 > v21) {
        double v31 = v29;
      }
      double v41 = v31 - v40 * 0.5;
      objc_msgSend((id)objc_msgSend(v8, "_scroller", *(void *)&v27), "bounds");
      double v44 = v83 - v43;
      if (v38 < v83 - v43) {
        double v44 = v38;
      }
      double v45 = v79 - v42;
      if (v41 < v79 - v42) {
        double v45 = v41;
      }
      if (v44 < 0.0) {
        double v44 = 0.0;
      }
      if (v45 < 0.0) {
        double v45 = 0.0;
      }
      double v46 = round(v44);
      double v47 = round(v45);
      double v48 = v81;
      if (v77 == v46 && v81 == v47)
      {
        double v51 = v19;
        if (v34 <= v19) {
          double v63 = v46;
        }
        else {
          double v63 = v71 - v19 * 0.5;
        }
        if (v35 > v72) {
          double v47 = v29 - v72 * 0.5;
        }
        objc_msgSend((id)objc_msgSend(v8, "_scroller"), "bounds");
        double v48 = v83 - v65;
        if (v63 < v83 - v65) {
          double v48 = v63;
        }
        double v66 = v79 - v64;
        if (v47 < v79 - v64) {
          double v66 = v47;
        }
        if (v48 < 0.0) {
          double v48 = 0.0;
        }
        if (v66 < 0.0) {
          double v66 = 0.0;
        }
        double v50 = round(v48);
        double v47 = round(v66);
        double v52 = v83;
      }
      else
      {
        double v50 = v46;
        double v51 = v19;
        double v52 = v83;
      }
      objc_msgSend(v7, "contentInset", v48);
      a3 = v73;
      a2 = v74;
      if (v68 + v52 + v67 <= v51)
      {
        double v69 = vabdd_f64(v81, v47);
        double v70 = 60.0;
      }
      else if (UIWebCurrentUserInterfaceIdiomIsSmallScreen())
      {
        if ([v7 window]
          && (unint64_t)(objc_msgSend((id)UIApp, "_sceneInterfaceOrientationFromWindow:", objc_msgSend(v7, "window"))- 1) > 1)
        {
          double v69 = sqrt((v50 - v77) * (v50 - v77) + (v47 - v81) * (v47 - v81));
        }
        else
        {
          double v69 = vabdd_f64(v81, v47);
        }
        double v70 = 90.0;
      }
      else
      {
        double v69 = sqrt((v50 - v77) * (v50 - v77) + (v47 - v81) * (v47 - v81));
        double v70 = 150.0;
      }
      if (v69 >= v70 && [v7 isScrollEnabled])
      {
        return objc_msgSend(v7, "setContentOffset:animated:", 1, v50, v47);
      }
    }
    else if (v16 != v10)
    {
      [v7 bounds];
      double v82 = v54;
      double v84 = v53;
      [v7 minimumZoomScale];
      double v80 = v55;
      [v7 maximumZoomScale];
      double v78 = v56;
      objc_msgSend(v7, "convertRect:fromView:", v8, x, y, width, height);
      double v75 = v58;
      double v76 = v57;
      if ([v7 isZoomEnabled])
      {
        double v59 = v16 / v10;
        if (v80 > v16 / v10) {
          double v59 = v80;
        }
        if (v59 >= v78) {
          double v60 = v78;
        }
        else {
          double v60 = v59;
        }
        double v61 = y + height * 0.5;
        if (v75 * v60 > v82) {
          double v61 = a3;
        }
        if (v76 * v60 <= v84) {
          double v62 = x + width * 0.5;
        }
        else {
          double v62 = a2;
        }
        return (uint64_t)zoomToCenterWithScale(a1, v62, v61, v60);
      }
    }
LABEL_3:
    uint64_t result = zoomToMinimumScaleCenteringOnLocation(a1, a2, a3);
    if ((result & 1) == 0)
    {
      uint64_t result = objc_opt_respondsToSelector();
      if (result)
      {
        return objc_msgSend(a1, "shouldSelectionAssistantReceiveDoubleTapAtPoint:forScale:", a2, a3, 1.0);
      }
    }
  }
  return result;
}

uint64_t doubleTapScaleForSize(uint64_t a1, void *a2)
{
  uint64_t result = [a2 enclosingScrollView];
  if (result)
  {
    [a2 visibleContentRect];
    double v5 = v4;
    double v7 = v6;
    [a2 zoomedDocumentScale];
    return objc_msgSend(a2, "doubleTapScalesForSize:", v5, v7);
  }
  return result;
}

void *zoomToCenterWithScale(void *a1, double a2, double a3, double a4)
{
  uint64_t result = (void *)[a1 enclosingScrollView];
  if (result)
  {
    double v9 = result;
    uint64_t result = (void *)[result isZoomEnabled];
    if (result)
    {
      [v9 _zoomAnimationDurationForScale:a4];
      double v11 = v10;
      if (objc_opt_respondsToSelector()) {
        objc_msgSend(a1, "willZoomToLocation:atScale:forDuration:", a2, a3, a4, v11);
      }
      return objc_msgSend(v9, "_zoomToCenter:scale:duration:", a2, a3, a4, v11);
    }
  }
  return result;
}

uint64_t zoomToMinimumScaleCenteringOnLocation(void *a1, double a2, double a3)
{
  uint64_t result = [a1 enclosingScrollView];
  if (result)
  {
    double v7 = (void *)result;
    uint64_t result = [(id)result isZoomEnabled];
    if (result)
    {
      if (objc_opt_respondsToSelector()) {
        [a1 willZoomToMinimumScale];
      }
      [a1 currentDocumentScale];
      double v9 = v8;
      [v7 bounds];
      objc_msgSend(a1, "minimumScaleForSize:", v10, v11);
      if (v9 == v12)
      {
        return 0;
      }
      else
      {
        double v13 = v12 / v9;
        [v7 minimumZoomScale];
        double v15 = v14;
        [v7 maximumZoomScale];
        if (v15 <= v13) {
          double v17 = v13;
        }
        else {
          double v17 = v15;
        }
        if (v17 >= v16) {
          double v18 = v16;
        }
        else {
          double v18 = v17;
        }
        zoomToCenterWithScale(a1, a2, a3, v18);
        return 1;
      }
    }
  }
  return result;
}

uint64_t _UIWebSingleTapZoomAtLocationPreClick(void *a1, double a2, double a3)
{
  uint64_t result = [a1 enclosingScrollView];
  if (result)
  {
    double v7 = (void *)result;
    uint64_t v8 = [a1 contentView];
    [a1 currentDocumentScale];
    double v10 = v9;
    objc_msgSend(a1, "rectOfInterestForPoint:", a2, a3);
    double v15 = v14;
    uint64_t result = 0;
    if (v12 < 100.0)
    {
      double v16 = v12;
      if (v12 > 0.0)
      {
        double v17 = v13;
        if (v13 > 0.0 && v13 < 50.0)
        {
          double v18 = v11;
          doubleTapScaleForSize(1, a1);
          double v20 = v19;
          if ([a1 considerHeightForDoubleTap]) {
            doubleTapScaleForSize(0, a1);
          }
          else {
            double v21 = 1.79769313e308;
          }
          if (v20 >= v21) {
            double v20 = v21;
          }
          if ((objc_opt_respondsToSelector() & 1) != 0
            && (objc_msgSend(a1, "shouldSelectionAssistantReceiveDoubleTapAtPoint:forScale:", a2, a3, v20) & 1) != 0)
          {
            return 0;
          }
          else
          {
            uint64_t result = 0;
            if (v20 != 0.0 && v20 - v10 > 0.05)
            {
              objc_msgSend(v7, "bounds", v20 - v10);
              double v36 = v23;
              double v37 = v22;
              [v7 minimumZoomScale];
              double v35 = v24;
              [v7 maximumZoomScale];
              double v34 = v25;
              objc_msgSend(v7, "convertRect:fromView:", v8, v15, v18, v16, v17);
              double v32 = v27;
              double v33 = v26;
              uint64_t result = [v7 isZoomEnabled];
              if (result)
              {
                double v28 = v20 / v10;
                if (v35 > v20 / v10) {
                  double v28 = v35;
                }
                if (v28 >= v34) {
                  double v29 = v34;
                }
                else {
                  double v29 = v28;
                }
                double v30 = v18 + v17 * 0.5;
                if (v32 * v29 > v36) {
                  double v30 = a3;
                }
                if (v33 * v29 <= v37) {
                  double v31 = v15 + v16 * 0.5;
                }
                else {
                  double v31 = a2;
                }
                zoomToCenterWithScale(a1, v31, v30, v29);
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t _UIWebSingleTapZoomAtLocationPostClick(void *a1, double a2, double a3)
{
  uint64_t result = [a1 enclosingScrollView];
  if (!result) {
    return result;
  }
  double v7 = (void *)result;
  uint64_t v8 = (void *)[a1 contentView];
  [a1 currentDocumentScale];
  double v10 = v9;
  objc_msgSend(a1, "rectOfInterestForPoint:", a2, a3);
  double x = v79.origin.x;
  double y = v79.origin.y;
  double width = v79.size.width;
  double height = v79.size.height;
  if (CGRectIsEmpty(v79)) {
    goto LABEL_3;
  }
  doubleTapScaleForSize(1, a1);
  double v16 = v15;
  if ([a1 considerHeightForDoubleTap]) {
    doubleTapScaleForSize(0, a1);
  }
  else {
    double v17 = 1.79769313e308;
  }
  if (v16 >= v17) {
    double v16 = v17;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0
    || (uint64_t result = objc_msgSend(a1, "shouldSelectionAssistantReceiveDoubleTapAtPoint:forScale:", a2, a3, v16),
        (result & 1) == 0))
  {
    if (v16 == 0.0)
    {
      if (!UIWebCurrentUserInterfaceIdiomIsSmallScreen())
      {
        [v7 bounds];
        double v19 = v18;
        double v21 = v20;
        [v7 contentSize];
        double v72 = v22;
        double v74 = v23;
        [v7 contentOffset];
        double v76 = v24;
        double v70 = v25;
        objc_msgSend(v7, "convertPoint:fromView:", v8, a2, a3);
        double v66 = v26;
        double v68 = v27;
        objc_msgSend(v7, "convertRect:fromView:", v8, x, y, width, height);
        double v32 = v30;
        double v33 = v31;
        BOOL v34 = v30 > v19;
        if (v30 > v19) {
          double v30 = 0.0;
        }
        double v35 = v19 - v30;
        if (v34) {
          double v28 = v66;
        }
        double v36 = v28 - v35 * 0.5;
        if (v31 <= v21) {
          double v37 = v31;
        }
        else {
          double v37 = 0.0;
        }
        double v38 = v21 - v37;
        if (v31 > v21) {
          double v29 = v68;
        }
        double v39 = v29 - v38 * 0.5;
        objc_msgSend((id)objc_msgSend(v8, "_scroller", *(void *)&v19), "bounds");
        double v42 = v72 - v41;
        if (v36 < v72 - v41) {
          double v42 = v36;
        }
        double v43 = v74 - v40;
        if (v39 < v74 - v40) {
          double v43 = v39;
        }
        if (v42 < 0.0) {
          double v42 = 0.0;
        }
        if (v43 < 0.0) {
          double v43 = 0.0;
        }
        double v44 = round(v42);
        double v45 = v76;
        double v46 = round(v43);
        double v47 = v70;
        if (v76 == v44 && v70 == v46)
        {
          if (v32 <= v65) {
            double v49 = v44;
          }
          else {
            double v49 = v66 - v65 * 0.5;
          }
          if (v33 <= v21) {
            double v50 = v46;
          }
          else {
            double v50 = v68 - v21 * 0.5;
          }
          objc_msgSend((id)objc_msgSend(v8, "_scroller"), "bounds");
          double v53 = v72 - v52;
          if (v49 < v72 - v52) {
            double v53 = v49;
          }
          double v54 = v74 - v51;
          if (v50 < v74 - v51) {
            double v54 = v50;
          }
          if (v53 < 0.0) {
            double v53 = 0.0;
          }
          if (v54 < 0.0) {
            double v54 = 0.0;
          }
          double v44 = round(v53);
          double v45 = v76;
          double v46 = round(v54);
          double v47 = v70;
        }
        if (sqrt((v44 - v45) * (v44 - v45) + (v46 - v47) * (v46 - v47)) >= 300.0
          && [v7 isScrollEnabled])
        {
          return objc_msgSend(v7, "setContentOffset:animated:", 1, v44, v46);
        }
      }
    }
    else if (vabdd_f64(v16, v10) > 0.1)
    {
      [v7 bounds];
      double v75 = v56;
      double v77 = v55;
      [v7 minimumZoomScale];
      double v73 = v57;
      [v7 maximumZoomScale];
      double v71 = v58;
      objc_msgSend(v7, "convertRect:fromView:", v8, x, y, width, height);
      double v67 = v60;
      double v69 = v59;
      if ([v7 isZoomEnabled])
      {
        double v61 = v16 / v10;
        if (v73 > v16 / v10) {
          double v61 = v73;
        }
        if (v61 >= v71) {
          double v62 = v71;
        }
        else {
          double v62 = v61;
        }
        double v63 = y + height * 0.5;
        if (v67 * v62 > v75) {
          double v63 = a3;
        }
        if (v69 * v62 <= v77) {
          double v64 = x + width * 0.5;
        }
        else {
          double v64 = a2;
        }
        return (uint64_t)zoomToCenterWithScale(a1, v64, v63, v62);
      }
    }
LABEL_3:
    uint64_t result = zoomToMinimumScaleCenteringOnLocation(a1, a2, a3);
    if ((result & 1) == 0)
    {
      uint64_t result = objc_opt_respondsToSelector();
      if (result)
      {
        return objc_msgSend(a1, "shouldSelectionAssistantReceiveDoubleTapAtPoint:forScale:", a2, a3, 1.0);
      }
    }
  }
  return result;
}

double _UIWebRotateToFrame(void *a1, double a2, double a3, double a4, double a5)
{
  double v10 = (void *)[a1 enclosingScrollView];
  if (!v10) {
    return *MEMORY[0x1E4F1DB28];
  }
  double v11 = v10;
  double v110 = a3;
  double v111 = a2;
  [v10 bounds];
  double v13 = v12;
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  [a1 zoomedDocumentScale];
  double v21 = v20;
  objc_msgSend(a1, "minimumScaleForSize:", v17, v19);
  double v23 = v22;
  double v113 = a5;
  objc_msgSend(a1, "scalesForContainerSize:", a4, a5);
  double v26 = v25;
  double v112 = v23;
  if (v21 >= v23) {
    double v27 = v21;
  }
  else {
    double v27 = v23;
  }
  double v117 = v27;
  double v108 = v26;
  double v109 = v24;
  [a1 updateBoundariesOfScrollView:v11 withScales:v26];
  double v106 = v17;
  double v107 = v19;
  objc_msgSend((id)objc_msgSend(a1, "contentView"), "convertRect:fromView:", v11, v13, v15, v17, v19);
  double v29 = v28;
  double v116 = v30;
  double v32 = v31;
  double v119 = v33;
  [a1 rectOfInterestForRotation];
  double v34 = a4;
  CGFloat x = v121.origin.x;
  double y = v121.origin.y;
  double width = v121.size.width;
  double height = v121.size.height;
  if (CGRectIsEmpty(v121))
  {
    double v105 = v21;
    double v39 = v34 / (v32 / v21);
    [v11 contentOffset];
    double v41 = v40;
    [a1 minimumVerticalContentOffset];
    double v42 = v34;
    if (v41 <= v43)
    {
      uint64_t v45 = 1;
    }
    else
    {
      [v11 contentSize];
      if (v41 == v44 - v107) {
        uint64_t v45 = 2;
      }
      else {
        uint64_t v45 = 0;
      }
    }
    double v114 = v29;
    double v115 = v32;
    double height = v119;
    double y = v116;
    double v48 = v109;
    double v49 = v110;
    double v47 = v105;
  }
  else
  {
    double v114 = x;
    double v115 = width;
    double v39 = v34 / (width / v21) + v34 / (width / v21) * -0.05;
    double v42 = v34;
    double v47 = v21;
    uint64_t v45 = 0;
    if ([a1 considerHeightOfRectOfInterestForRotation])
    {
      if (v39 >= v113 / (height / v21) + v113 / (height / v21) * -0.05) {
        double v39 = v113 / (height / v21) + v113 / (height / v21) * -0.05;
      }
    }
    else
    {
      double height = v119;
      double y = v116;
    }
    double v48 = v109;
    double v49 = v110;
  }
  double v50 = v108;
  if (objc_opt_respondsToSelector())
  {
    [a1 scaleForProposedNewScale:v39 andOldScale:v117];
    double v39 = v51;
  }
  if (v39 >= v48) {
    double v52 = v48;
  }
  else {
    double v52 = v39;
  }
  if (v52 >= v108) {
    double v53 = v52;
  }
  else {
    double v53 = v108;
  }
  objc_msgSend(v11, "setFrame:", v111, v49, v42, v113);
  if (objc_opt_respondsToSelector())
  {
    [a1 contentSizeForScrollView:v11];
    objc_msgSend(v11, "setContentSize:");
  }
  double v54 = v42;
  if (v47 == v112 || (double v50 = v53, v53 != v117)) {
    [v11 setZoomScale:v50 / v117];
  }
  double v46 = v114;
  v122.origin.CGFloat x = v114;
  v122.origin.double y = y;
  v122.size.double width = v115;
  v122.size.double height = height;
  if (!CGRectIsEmpty(v122))
  {
    uint64_t v55 = [a1 contentView];
    double v56 = (void *)[a1 enclosingScrollView];
    [v56 bounds];
    double v58 = v57;
    double v118 = v59;
    double v120 = height;
    objc_msgSend(v56, "convertRect:fromView:", v55, v114, y, v115, height);
    double v62 = v61;
    double v65 = v64 + (v58 - v63) * -0.5;
    if (v54 == v106 && v113 == v107)
    {
      double v66 = v60;
      double v67 = *MEMORY[0x1E4F1DB20];
      double v68 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
      double v69 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
      double v70 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    }
    else
    {
      double v66 = v60;
      objc_msgSend(a1, "activeRectForRectOfInterest:", v114, y, v115, v120);
      double v67 = v71;
      double v68 = v72;
      double v69 = v73;
      double v70 = v74;
    }
    double v75 = round(v65);
    v123.origin.CGFloat x = v67;
    v123.origin.double y = v68;
    v123.size.double width = v69;
    v123.size.double height = v70;
    IsEmptdouble y = CGRectIsEmpty(v123);
    if (IsEmpty)
    {
      double v77 = v118;
      double v78 = round(v66 + (v118 - v62) * -0.5);
    }
    else
    {
      objc_msgSend(v56, "convertRect:fromView:", v55, v67, v68, v69, v70);
      CGFloat v79 = v124.origin.x;
      CGFloat v80 = v124.origin.y;
      CGFloat v81 = v124.size.width;
      CGFloat v82 = v124.size.height;
      double MidY = CGRectGetMidY(v124);
      [a1 heightToKeepVisible];
      double v85 = round(MidY + v84 * -0.5);
      v125.origin.CGFloat x = v79;
      v125.origin.double y = v80;
      v125.size.double width = v81;
      v125.size.double height = v82;
      double v86 = CGRectGetMinX(v125) + -20.0;
      if (v75 >= v86) {
        double v75 = v86;
      }
      v126.origin.CGFloat x = v79;
      v126.origin.double y = v80;
      v126.size.double width = v81;
      v126.size.double height = v82;
      double v87 = CGRectGetMinY(v126) + -20.0;
      if (v85 >= v87) {
        double v85 = v87;
      }
      v127.origin.CGFloat x = v79;
      v127.origin.double y = v80;
      v127.size.double width = v81;
      v127.size.double height = v82;
      double v88 = CGRectGetMaxX(v127) + 20.0 - v58;
      if (v75 < v88) {
        double v75 = v88;
      }
      v128.origin.CGFloat x = v79;
      v128.origin.double y = v80;
      v128.size.double width = v81;
      v128.size.double height = v82;
      double v77 = v118;
      double v89 = CGRectGetMaxY(v128) + 20.0 - v118;
      if (v85 >= v89) {
        double v78 = v85;
      }
      else {
        double v78 = v89;
      }
    }
    double v46 = v114;
    [v56 contentSize];
    double v91 = v90;
    double v93 = v92;
    [v56 contentInset];
    double v98 = v91 + v96 + v97 - v58;
    if (v75 < v98) {
      double v98 = v75;
    }
    double v99 = v93 + v94 + v95 - v77;
    if (v78 < v99) {
      double v99 = v78;
    }
    if (v98 < 0.0) {
      double v98 = 0.0;
    }
    if (v99 < 0.0) {
      double v99 = 0.0;
    }
    double v100 = round(v98);
    double v101 = round(v99);
    if (IsEmpty)
    {
      if (v45 == 2)
      {
        objc_msgSend(v56, "contentSize", v99, v101);
        double v101 = v103 - v77;
      }
      else if (v45 == 1)
      {
        objc_msgSend(a1, "minimumVerticalContentOffset", v99, v101);
        double v101 = v102;
      }
    }
    objc_msgSend(v56, "setContentOffset:", v100, v101);
  }
  return v46;
}

BOOL isDeferredElementVisibleInMenu_0(void *a1, void *a2)
{
  id v3 = a1;
  double v4 = [a2 children];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __isDeferredElementVisibleInMenu_block_invoke_0;
  v8[3] = &unk_1E5303CC8;
  id v9 = v3;
  id v5 = v3;
  BOOL v6 = [v4 indexOfObjectPassingTest:v8] != 0x7FFFFFFFFFFFFFFFLL;

  return v6;
}

void sub_1869DAC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869DB4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869DC030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869DD54C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

uint64_t __isDeferredElementVisibleInMenu_block_invoke_0(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  if (([v6 isEqual:*(void *)(a1 + 32)] & 1) != 0
    || [v6 _isInlineGroup]
    && isDeferredElementVisibleInMenu_0(*(void *)(a1 + 32), v6))
  {
    uint64_t v7 = 1;
    *a4 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void *TelephonyUtilitiesLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary_0)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    void v4[3] = __TelephonyUtilitiesLibraryCore_block_invoke_0;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E5311320;
    uint64_t v6 = 0;
    TelephonyUtilitiesLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  uint64_t v0 = (void *)TelephonyUtilitiesLibraryCore_frameworkLibrary_0;
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary_0)
  {
    uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *TelephonyUtilitiesLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIWebURLAction.m", 37, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __TelephonyUtilitiesLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  TelephonyUtilitiesLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void sub_1869E2A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTUISystemInputAssistantViewClass_block_invoke_0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v6[0] = 0;
  if (!qword_1EB25D008)
  {
    v6[1] = (void *)MEMORY[0x1E4F143A8];
    void v6[2] = (void *)3221225472;
    v6[3] = __TextInputUILibraryCore_block_invoke_20;
    void v6[4] = &__block_descriptor_40_e5_v8__0l;
    void v6[5] = v6;
    long long v7 = xmmword_1E5311338;
    uint64_t v8 = 0;
    qword_1EB25D008 = _sl_dlopen();
  }
  if (!qword_1EB25D008)
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    double v4 = [NSString stringWithUTF8String:"void *TextInputUILibrary(void)"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, @"UIHandwritingAssistantView.m", 23, @"%s", v6[0]);

    goto LABEL_10;
  }
  if (v6[0]) {
    free(v6[0]);
  }
  Class result = objc_getClass("TUISystemInputAssistantView");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    id v3 = [MEMORY[0x1E4F28B00] currentHandler];
    long long v5 = [NSString stringWithUTF8String:"Class getTUISystemInputAssistantViewClass(void)_block_invoke"];
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v5, @"UIHandwritingAssistantView.m", 24, @"Unable to find class %s", "TUISystemInputAssistantView");

LABEL_10:
    __break(1u);
  }
  _MergedGlobals_3_31 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __TextInputUILibraryCore_block_invoke_20()
{
  uint64_t result = _sl_dlopen();
  qword_1EB25D008 = result;
  return result;
}

void sub_1869E8248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id javaScriptDialogTitle(void *a1)
{
  uint64_t v1 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "dataSource"), "request"), "URL");
  if ([v1 isFileURL])
  {
    uint64_t v2 = (void *)[v1 path];
    id v3 = (id)[v2 lastPathComponent];
    if (![v3 length]) {
      return v2;
    }
  }
  else
  {
    id v3 = (id)objc_msgSend((id)objc_msgSend(v1, "scheme"), "mutableCopy");
    [v3 appendFormat:@"://%@", objc_msgSend(v1, "host")];
  }
  return v3;
}

void sub_1869E8544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1869E8818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __TelephonyUtilitiesLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  TelephonyUtilitiesLibraryCore_frameworkLibrary_1 = result;
  return result;
}

void sub_1869EBA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
}

void sub_1869EBB2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t clearGeolocationCache(uint64_t a1, void *a2)
{
  return [a2 clearCache];
}

void sub_1869EDA78(_Unwind_Exception *a1)
{
}

uint64_t getToken(void *a1, void *a2)
{
  if ([a2 isFileURL])
  {
    return [a2 path];
  }
  else
  {
    unsigned int v5 = [a1 port];
    if (v5) {
      return [NSString stringWithFormat:@"%@://%@:%d", objc_msgSend(a1, "protocol"), objc_msgSend((id)objc_msgSend(a1, "host"), "_web_decodeHostName"), v5];
    }
    else {
      return [NSString stringWithFormat:@"%@://%@", objc_msgSend(a1, "protocol"), objc_msgSend((id)objc_msgSend(a1, "host"), "_web_decodeHostName"), v6];
    }
  }
}

void sub_1869F32F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869F362C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  _Block_object_dispose((const void *)(v19 - 112), 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869F3C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869F4A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869F555C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869F58AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_1869F5948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_1869F59D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

id getCKAllowedSharingOptionsClass()
{
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCKAllowedSharingOptionsClass_softClass;
  uint64_t v7 = getCKAllowedSharingOptionsClass_softClass;
  if (!getCKAllowedSharingOptionsClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getCKAllowedSharingOptionsClass_block_invoke;
    void v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getCKAllowedSharingOptionsClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1869F5B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869F6100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869F62B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_1869F6378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_1869F6424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

id getCKPreSharingContextClass()
{
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getCKPreSharingContextClass_softClass;
  uint64_t v7 = getCKPreSharingContextClass_softClass;
  if (!getCKPreSharingContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    void v3[2] = __getCKPreSharingContextClass_block_invoke;
    void v3[3] = &unk_1E52D9900;
    void v3[4] = &v4;
    __getCKPreSharingContextClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1869F6C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869F6FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getCKSystemSharingUIObserverClass_block_invoke(uint64_t a1)
{
  CloudKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CKSystemSharingUIObserver");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCKSystemSharingUIObserverClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCKSystemSharingUIObserverClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UICloudSharingController.m", 65, @"Unable to find class %s", "CKSystemSharingUIObserver");

    __break(1u);
  }
}

void *CloudKitLibrary()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!CloudKitLibraryCore_frameworkLibrary)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    void v4[2] = (void *)3221225472;
    void v4[3] = __CloudKitLibraryCore_block_invoke;
    void v4[4] = &__block_descriptor_40_e5_v8__0l;
    void v4[5] = v4;
    long long v5 = xmmword_1E5311698;
    uint64_t v6 = 0;
    CloudKitLibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
  uint64_t v0 = (void *)CloudKitLibraryCore_frameworkLibrary;
  if (!CloudKitLibraryCore_frameworkLibrary)
  {
    uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"void *CloudKitLibrary(void)"];
    objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v3, @"UICloudSharingController.m", 60, @"%s", v4[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v1 = v4[0];
  if (v4[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t __CloudKitLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CloudKitLibraryCore_frameworkLibrardouble y = result;
  return result;
}

void __getLPLinkMetadataClass_block_invoke_1(uint64_t a1)
{
  LinkPresentationLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("LPLinkMetadata");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25CAB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getLPLinkMetadataClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UICloudSharingController.m", 70, @"Unable to find class %s", "LPLinkMetadata");

    __break(1u);
  }
}

void LinkPresentationLibrary_0()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!LinkPresentationLibraryCore_frameworkLibrary_0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    void v3[3] = __LinkPresentationLibraryCore_block_invoke_1;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E53116B0;
    uint64_t v5 = 0;
    LinkPresentationLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!LinkPresentationLibraryCore_frameworkLibrary_0)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *LinkPresentationLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UICloudSharingController.m", 69, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __LinkPresentationLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  LinkPresentationLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void __getLPImagePropertiesClass_block_invoke(uint64_t a1)
{
  LinkPresentationLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("LPImageProperties");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25CAB8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getLPImagePropertiesClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UICloudSharingController.m", 72, @"Unable to find class %s", "LPImageProperties");

    __break(1u);
  }
}

void __getLPImageClass_block_invoke(uint64_t a1)
{
  LinkPresentationLibrary_0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("LPImage");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25CAC0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getLPImageClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UICloudSharingController.m", 71, @"Unable to find class %s", "LPImage");

    __break(1u);
  }
}

void __getCKModifyRecordsOperationClass_block_invoke(uint64_t a1)
{
  CloudKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CKModifyRecordsOperation");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCKModifyRecordsOperationClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCKModifyRecordsOperationClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UICloudSharingController.m", 62, @"Unable to find class %s", "CKModifyRecordsOperation");

    __break(1u);
  }
}

void __getCKAllowedSharingOptionsClass_block_invoke(uint64_t a1)
{
  CloudKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CKAllowedSharingOptions");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCKAllowedSharingOptionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCKAllowedSharingOptionsClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UICloudSharingController.m", 61, @"Unable to find class %s", "CKAllowedSharingOptions");

    __break(1u);
  }
}

void __getCKPreSharingContextClass_block_invoke(uint64_t a1)
{
  CloudKitLibrary();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("CKPreSharingContext");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    getCKPreSharingContextClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"Class getCKPreSharingContextClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UICloudSharingController.m", 63, @"Unable to find class %s", "CKPreSharingContext");

    __break(1u);
  }
}

void *__getCKXPCSuitableErrorSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = CloudKitLibrary();
  uint64_t result = dlsym(v2, "CKXPCSuitableError");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCKXPCSuitableErrorSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1869F915C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 192));
  _Unwind_Resume(a1);
}

void sub_1869FA72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1869FA980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __getFPItemManagerClass_block_invoke(uint64_t a1)
{
  FileProviderLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FPItemManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    _MergedGlobals_7_16 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getFPItemManagerClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDocumentSharingController.m", 50, @"Unable to find class %s", "FPItemManager");

    __break(1u);
  }
}

void FileProviderLibrary_1()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!FileProviderLibraryCore_frameworkLibrary_1)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    void v3[2] = (void *)3221225472;
    void v3[3] = __FileProviderLibraryCore_block_invoke_5;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E5311758;
    uint64_t v5 = 0;
    FileProviderLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!FileProviderLibraryCore_frameworkLibrary_1)
  {
    id v1 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v2 = [NSString stringWithUTF8String:"void *FileProviderLibrary(void)"];
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, @"UIDocumentSharingController.m", 47, @"%s", v3[0]);

    __break(1u);
    goto LABEL_7;
  }
  uint64_t v0 = v3[0];
  if (v3[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t __FileProviderLibraryCore_block_invoke_5()
{
  uint64_t result = _sl_dlopen();
  FileProviderLibraryCore_frameworkLibrary_1 = result;
  return result;
}

void __getFPSandboxingURLWrapperClass_block_invoke_0(uint64_t a1)
{
  FileProviderLibrary_1();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("FPSandboxingURLWrapper");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB25D758 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v3 = [NSString stringWithUTF8String:"Class getFPSandboxingURLWrapperClass(void)_block_invoke"];
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"UIDocumentSharingController.m", 48, @"Unable to find class %s", "FPSandboxingURLWrapper");

    __break(1u);
  }
}

void _UIFocusRotaryRingConfigureShadowForLayer(void *a1)
{
  id v10 = a1;
  int v1 = _UIInternalPreferenceUsesDefault((int *)&unk_1EB257BF8, @"RotaryFocusRingShadowColor", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  double v2 = *(double *)&qword_1EB257C00;
  if (v1) {
    double v2 = 0.0;
  }
  id v3 = +[UIColor colorWithWhite:v2 alpha:1.0];
  objc_msgSend(v10, "setShadowColor:", objc_msgSend(v3, "CGColor"));

  int v4 = _UIInternalPreferenceUsesDefault((int *)algn_1EB257C08, @"RotaryFocusRingShadowOpacity", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  HIDWORD(v5) = HIDWORD(qword_1EB257C10);
  *(float *)&double v5 = *(double *)&qword_1EB257C10;
  if (v4) {
    *(float *)&double v5 = 0.8;
  }
  [v10 setShadowOpacity:v5];
  int v6 = _UIInternalPreferenceUsesDefault((int *)algn_1EB257C18, @"RotaryFocusRingShadowRadius", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble);
  double v7 = *(double *)&qword_1EB257C20;
  if (v6) {
    double v7 = 4.0;
  }
  [v10 setShadowRadius:v7];
  if (_UIInternalPreferenceUsesDefault((int *)algn_1EB257C28, @"RotaryFocusRingShadowOffset", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble))double v8 = 0.0; {
  else
  }
    double v8 = *(double *)&qword_1EB257C30;
  if (_UIInternalPreferenceUsesDefault((int *)algn_1EB257C28, @"RotaryFocusRingShadowOffset", (uint64_t (*)(_DWORD *))_UIInternalPreferenceUpdateDouble))double v9 = 0.0; {
  else
  }
    double v9 = *(double *)&qword_1EB257C30;
  objc_msgSend(v10, "setShadowOffset:", v8, v9);
}

void sub_1869FDE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getCKOperationProgressCallbackClassesSymbolLoc_block_invoke(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EB2654F8)
  {
    v5[1] = (void *)MEMORY[0x1E4F143A8];
    void v5[2] = (void *)3221225472;
    void v5[3] = __CloudKitLibraryCore_block_invoke_0;
    void v5[4] = &__block_descriptor_40_e5_v8__0l;
    v5[5] = v5;
    long long v6 = xmmword_1E5311778;
    uint64_t v7 = 0;
    qword_1EB2654F8 = _sl_dlopen();
  }
  double v2 = (void *)qword_1EB2654F8;
  if (!qword_1EB2654F8)
  {
    a1 = [MEMORY[0x1E4F28B00] currentHandler];
    double v2 = [NSString stringWithUTF8String:"void *CloudKitLibrary(void)"];
    objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:", v2, @"_UIShareInvitationRemoteViewController.m", 32, @"%s", v5[0]);

    __break(1u);
    goto LABEL_7;
  }
  id v3 = v5[0];
  if (v5[0]) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "CKOperationProgressCallbackClasses");
  *(void *)(*(void *)(a1[4] + 8) + 24) = result;
  _MergedGlobals_1337 = *(_UNKNOWN **)(*(void *)(a1[4] + 8) + 24);
  return result;
}

uint64_t __CloudKitLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2654F8 = result;
  return result;
}

id MakeConversionHandler(void *a1)
{
  id v1 = a1;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __MakeConversionHandler_block_invoke;
  aBlock[3] = &unk_1E5309EF0;
  id v6 = v1;
  id v2 = v1;
  id v3 = _Block_copy(aBlock);

  return v3;
}

id __MakeConversionHandler_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = (void *)[a2 mutableCopy];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = *(id *)(a1 + 32);
  uint64_t v4 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v24;
    uint64_t v7 = *(void *)off_1E52D2040;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(obj);
        }
        double v9 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        int v10 = [v9 isEqualToString:@"_UITextFormattingSizeAttributeName"];
        double v11 = *(void **)(a1 + 32);
        if (v10)
        {
          double v12 = [v11 valueForKey:@"_UITextFormattingSizeAttributeName"];
          [v12 floatValue];
          float v14 = v13;

          double v15 = [v3 valueForKey:v7];
          double v16 = v15;
          if (v15)
          {
            double v17 = [v15 fontWithSize:v14];
            [v3 setValue:v17 forKey:v7];
          }
        }
        else
        {
          double v18 = [v11 valueForKey:v9];
          uint64_t v19 = [MEMORY[0x1E4F1CA98] null];

          if (v18 == v19)
          {
            [v3 removeObjectForKey:v9];
          }
          else
          {
            double v20 = [*(id *)(a1 + 32) valueForKey:v9];
            [v3 setValue:v20 forKey:v9];
          }
        }
      }
      uint64_t v5 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v5);
  }

  return v3;
}

void SendUpdatesToEditResponder(void *a1, void *a2)
{
  id v3 = a2;
  MakeConversionHandler(a1);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  [v3 updateTextAttributesWithConversionHandler:v4];
}

void sub_1869FF234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1869FFFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_186A012BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186A01460(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186A01808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186A01A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_186A04FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void TextFormattingUILibraryCore()
{
  if (!TextFormattingUILibraryCore_frameworkLibrary) {
    TextFormattingUILibraryCore_frameworkLibrardouble y = _sl_dlopen();
  }
}

uint64_t __TextFormattingUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  TextFormattingUILibraryCore_frameworkLibrardouble y = result;
  return result;
}

id _UIClickPresentationBackgroundEffects(int a1)
{
  if (a1
    && (+[UIDevice currentDevice],
        id v1 = objc_claimAutoreleasedReturnValue(),
        uint64_t v2 = [v1 userInterfaceIdiom],
        v1,
        !v2))
  {
    id v3 = [MEMORY[0x1E4F1CA48] array];
    if (!_AXSReduceMotionEnabled() && !_AXSEnhanceBackgroundContrastEnabled())
    {
      uint64_t v5 = +[_UIZoomEffect zoomEffectWithMagnitude:0.024];
      [v3 addObject:v5];
    }
    uint64_t v6 = +[UIBlurEffect effectWithBlurRadius:10.0];
    [v3 addObject:v6];
  }
  else
  {
    id v3 = 0;
  }
  return v3;
}

id _UIClickPresentationBackgroundColor(int a1)
{
  if (a1)
  {
    id v1 = +[UIDevice currentDevice];
    uint64_t v2 = [v1 userInterfaceIdiom];

    switch(v2)
    {
      case 1:
        uint64_t v6 = +[UIColor _alertControllerDimmingViewColor];
        break;
      case 2:
      case 8:
        if (_UIInternalPreferenceUsesDefault_1((int *)&_MergedGlobals_921, @"TVContextMenu_BackgroundDimWhite"))double v3 = 0.0; {
        else
        }
          double v3 = *(double *)&qword_1EB257C40;
        int v4 = _UIInternalPreferenceUsesDefault_1((int *)algn_1EB257C48, @"TVContextMenu_BackgroundDimAlpha");
        double v5 = 0.45;
        if (!v4) {
          double v5 = *(double *)&qword_1EB257C50;
        }
        uint64_t v6 = +[UIColor colorWithWhite:v3 alpha:v5];
        break;
      case 6:
        uint64_t v6 = +[UIColor clearColor];
        break;
      default:
        double v7 = 0.0862745098;
        double v8 = 0.0823529412;
        double v9 = 0.164705882;
        double v10 = 0.21;
        goto LABEL_10;
    }
  }
  else
  {
    double v7 = 0.0;
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
LABEL_10:
    uint64_t v6 = +[UIColor colorWithRed:v7 green:v8 blue:v9 alpha:v10];
  }
  return v6;
}

uint64_t IsGelatoEnabled()
{
  int v0 = _os_feature_enabled_impl();
  id v1 = _UIKitUserDefaults();
  uint64_t v2 = [v1 objectForKey:@"_NSSharingServiceGelatoEnabled"];
  if (v2)
  {
    double v3 = _UIKitUserDefaults();
    int v4 = [v3 BOOLForKey:@"_NSSharingServiceGelatoEnabled"];
  }
  else
  {
    int v4 = 1;
  }

  return v0 & v4;
}

__CFString *CloudSharingUIExtensionBundleID()
{
  return @"com.apple.CloudSharingUI.CloudSharing";
}

id _UITextFormattingViewControllerEmphasisStyleClasses()
{
  if (qword_1EB265508 != -1) {
    dispatch_once(&qword_1EB265508, &__block_literal_global_685);
  }
  int v0 = (void *)_MergedGlobals_1338;
  return v0;
}

void sub_186A06CEC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_186A08BC4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_186A0B47C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_186A0B5D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_186A0B820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_186A0F1E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A0F4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_186A0F564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_186A0F61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A0F734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A0F808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_186A0FCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (v17) {
    operator delete(v17);
  }

  _Unwind_Resume(a1);
}

void sub_186A0FE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_186A0FFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A10084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A10210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A102D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A104EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A10558()
{
}

void sub_186A10564()
{
}

void sub_186A10684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A1073C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A10AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_186A10CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A10E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A11198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A112E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_186A11604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void sub_186A116B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A1178C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_186A11BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_UIWindowScenePreservedPlacement *_UIWindowScenePlacementForLegacyFlags(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v6 = a1 | a2 | a3;
  if (v6 & 1) != 0 || (a4)
  {
    if (!a1 || (a2 & 1) != 0 || (a3 & 1) != 0 || (a4 & 1) != 0)
    {
      if ((v6 | a4 ^ 1))
      {
        if (!a2 || (a3 & 1) != 0 || (a4 & 1) != 0)
        {
          if ((a1 | a2 | a3 ^ 1))
          {
            double v9 = 0;
          }
          else
          {
            double v9 = objc_alloc_init(_UIWindowScenePreservedPlacement);
            [(_UIWindowScenePreservedPlacement *)v9 setKeepInBackground:a4];
          }
        }
        else
        {
          double v9 = +[UIWindowSceneProminentPlacement prominentPlacement];
          [(_UIWindowScenePreservedPlacement *)v9 _setPrefersLargeSize:a1];
        }
        goto LABEL_17;
      }
      double v8 = _UIWindowSceneBackgroundPlacement;
    }
    else
    {
      double v8 = _UIWindowSceneFullscreenPlacement;
    }
    double v7 = (_UIWindowScenePreservedPlacement *)objc_alloc_init(v8);
  }
  else
  {
    double v7 = +[UIWindowSceneStandardPlacement standardPlacement];
  }
  double v9 = v7;
LABEL_17:
  return v9;
}

id _UIWindowScenePlacementForStyleAndSizeCategory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    a3 = a1;
  }
  if (a3)
  {
    double v5 = _UIWindowScenePlacementForLegacyFlags(a2 == 1, a3 == 2, 0, 0);
  }
  else
  {
    double v5 = 0;
  }
  return v5;
}

uint64_t _UIWindowScenePresentationStyleFromPlacement(void *a1)
{
  id v1 = a1;
  if (v1 && [(id)objc_opt_class() _placementType] == 2) {
    uint64_t v2 = 2;
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

BOOL _UIWindowSceneActivationRequestOptionsHaveModifiedStyleOrSize(void *a1)
{
  id v1 = a1;
  if ([v1 preferredPresentationStyle]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = [v1 _preferredSizeCategory] != 0;
  }

  return v2;
}

id _UIDatePickerStoredLocaleForLocale(void *a1)
{
  id v1 = a1;
  if (v1
    && ([MEMORY[0x1E4F1CA20] currentLocale],
        BOOL v2 = objc_claimAutoreleasedReturnValue(),
        char v3 = [v1 isEqual:v2],
        v2,
        (v3 & 1) == 0))
  {
    id v4 = v1;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id _UIDatePickerUserLocaleForLocale(void *a1)
{
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = v1;
  }
  else
  {
    id v3 = [MEMORY[0x1E4F1CA20] currentLocale];
  }
  id v4 = v3;

  return v4;
}

id _UIDatePickerStoredCalendarForCalendar(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v3 = 0;
    goto LABEL_15;
  }
  BOOL v2 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  if ([v1 isEqual:v2]) {
    goto LABEL_3;
  }
  uint64_t v4 = [v1 firstWeekday];
  if (v4 != [v2 firstWeekday]
    || (uint64_t v5 = [v1 minimumDaysInFirstWeek], v5 != objc_msgSend(v2, "minimumDaysInFirstWeek")))
  {
LABEL_13:
    id v3 = v1;
    goto LABEL_14;
  }
  int v6 = [v1 locale];
  double v7 = [v2 locale];
  if (![v6 isEqual:v7])
  {
LABEL_12:

    goto LABEL_13;
  }
  double v8 = [v1 timeZone];
  double v9 = [v2 timeZone];
  if (![v8 isEqual:v9])
  {

    goto LABEL_12;
  }
  double v10 = [v1 calendarIdentifier];
  double v11 = [v2 calendarIdentifier];
  char v12 = [v10 isEqual:v11];

  if ((v12 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_3:
  id v3 = 0;
LABEL_14:

LABEL_15:
  return v3;
}

id _UIDatePickerUserCalendarForCalendar(void *a1)
{
  id v1 = a1;
  BOOL v2 = v1;
  if (v1)
  {
    id v3 = v1;
  }
  else
  {
    id v3 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  }
  uint64_t v4 = v3;

  return v4;
}

__CFString *StringFromCGRect(double a1, double a2, double a3, double a4)
{
  uint64_t v4 = (__CFString *)CFStringCreateWithFormat(0, 0, @"{{%.*g, %.*g}, {%.*g, %.*g}}", 17, *(void *)&a1, 17, *(void *)&a2, 17, *(void *)&a3, 17, *(void *)&a4);
  return v4;
}

void sub_186A19230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _UIKitRegisterTextEffectsCatalog(void *a1, void *a2)
{
  id v3 = (objc_class *)MEMORY[0x1E4F5E048];
  id v4 = a2;
  id v5 = a1;
  uint64_t v6 = [[v3 alloc] initWithName:v5 fromBundle:v4 error:0];

  double v7 = (void *)_MergedGlobals_1340;
  _MergedGlobals_1340 = v6;
}

id _UIKitGetTextEffectsCatalog()
{
  int v0 = (void *)_MergedGlobals_1340;
  if (!_MergedGlobals_1340)
  {
    if (qword_1EB265530 != -1) {
      dispatch_once(&qword_1EB265530, &__block_literal_global_691);
    }
    int v0 = (void *)qword_1EB265528;
  }
  id v1 = v0;
  return v1;
}

void _UISharedImageSetPreferredImageScale(double a1)
{
  BOOL v2 = __UIKitSharedArtworkManager();
  [v2 setPreferredScale:a1];

  __preferredDeviceScale = (unint64_t)a1;
}

double _UISharedImageSetPreferredTraitCollection(void *a1)
{
  id v1 = a1;
  BOOL v2 = __UIKitSharedArtworkManager();
  [v2 setPreferredTraitCollection:v1];

  [v1 displayScale];
  double v4 = v3;

  double result = rint(v4);
  __preferredDeviceScale = (uint64_t)result;
  return result;
}

id _UIPathForImageWithCacheName(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    BOOL v2 = [v1 componentsSeparatedByString:@"_"];
    double v3 = objc_msgSend(v2, "subarrayWithRange:", 1, objc_msgSend(v2, "count") - 1);
    double v4 = [v3 componentsJoinedByString:@"_"];
  }
  else
  {
    double v4 = 0;
  }

  return v4;
}

id _UIImageAtPath(void *a1, void *a2, char a3, int a4)
{
  id v7 = a1;
  id v8 = a2;
  if ([v7 length])
  {
    id v9 = v7;
    id v10 = v8;
    if ([v9 length])
    {
      double v11 = [v10 bundleIdentifier];
      char v12 = &stru_1ED0E84C0;
      if (v11) {
        char v12 = v11;
      }
      float v13 = [NSString stringWithFormat:@"%@_%@", v12, v9];
    }
    else
    {
      float v13 = 0;
    }

    os_unfair_lock_lock((os_unfair_lock_t)&__tableLock);
    uint64_t Value = (void *)__nameTable;
    if (__nameTable) {
      uint64_t Value = (void *)CFDictionaryGetValue((CFDictionaryRef)__nameTable, v13);
    }
    id ImageAtPath = Value;
    if (([ImageAtPath _isCached] & 1) == 0) {
      [ImageAtPath _setCached:1];
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&__tableLock);
    if (!ImageAtPath)
    {
      double v16 = _UIImageCollectImagePathsForPath(v9, v10, a3, 0);
      if ([v16 count])
      {
        double v17 = +[UIScreen _mainScreenThreadSafeTraitCollection];
        double v18 = BestPathForTraits(v16, v17);

        unint64_t v19 = +[UIImage _scaleDefinedByPath:v18];
        double v20 = (double)v19;
        if (v19 == 0x7FFFFFFFFFFFFFFFLL) {
          double v20 = 1.0;
        }
        id ImageAtPath = (id)GetImageAtPath(v18, a4, v20);
        if (ImageAtPath)
        {
          os_unfair_lock_lock((os_unfair_lock_t)&__tableLock);
          CFDictionaryRef v21 = (const __CFDictionary *)__nameTable;
          if (!__nameTable)
          {
            __nameTable = (uint64_t)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], 0);
            __imageTable = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
            CFDictionaryRef v21 = (const __CFDictionary *)__nameTable;
          }
          if (CFDictionaryContainsKey(v21, v13))
          {
            uint64_t v22 = CFDictionaryGetValue((CFDictionaryRef)__nameTable, v13);

            id ImageAtPath = (id)v22;
          }
          else
          {
            [ImageAtPath _setNamed:1];
            [ImageAtPath _setCached:1];
            CFDictionarySetValue((CFMutableDictionaryRef)__nameTable, v13, ImageAtPath);
            CFDictionarySetValue((CFMutableDictionaryRef)__imageTable, ImageAtPath, v13);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)&__tableLock);
        }
      }
      else
      {
        id ImageAtPath = 0;
      }
    }
  }
  else
  {
    id ImageAtPath = 0;
  }

  return ImageAtPath;
}

uint64_t _UIIsKitImage(void *a1)
{
  id v1 = a1;
  BOOL v2 = [v1 _primitiveImageAsset];
  if (v2)
  {
    double v3 = __UIKitSharedArtworkManager();
    uint64_t v4 = [v3 _imageBelongsToUIKit:v1];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void _UISharedImageFlushAll()
{
  if (__nameTable)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&__tableLock);
    CFDictionaryRef v0 = (const __CFDictionary *)__nameTable;
    CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)__nameTable);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, Count, MEMORY[0x1E4F1D510]);
    CFDictionaryApplyFunction(v0, (CFDictionaryApplierFunction)CopyImageValue, Mutable);
    v4.locatiouint64_t n = 0;
    v4.length = Count;
    CFArrayApplyFunction(Mutable, v4, (CFArrayApplierFunction)FlushCachedImage, 0);
    CFDictionaryRemoveAllValues((CFMutableDictionaryRef)__nameTable);
    CFDictionaryRemoveAllValues((CFMutableDictionaryRef)__imageTable);
    os_unfair_lock_unlock((os_unfair_lock_t)&__tableLock);
    CFRelease(Mutable);
  }
}

uint64_t __BestPathForTraits_block_invoke(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  int64_t v8 = +[UIImage _idiomDefinedByPath:v7];
  unint64_t v9 = +[UIImage _scaleDefinedByPath:v7];

  double v10 = (double)v9;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == 0x7FFFFFFFFFFFFFFFLL
    && (v8 == 0x7FFFFFFFFFFFFFFFLL || v8 == [*(id *)(a1 + 32) userInterfaceIdiom]))
  {
    if (v10 == 9.22337204e18 || ([*(id *)(a1 + 32) displayScale], v11 >= v10)) {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
    }
  }
  uint64_t result = [*(id *)(a1 + 32) userInterfaceIdiom];
  if (v8 == result)
  {
    uint64_t result = [*(id *)(a1 + 32) displayScale];
    if (v13 == v10)
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3;
      *a4 = 1;
    }
  }
  return result;
}

void CopyImageValue(int a1, const void *a2, CFMutableArrayRef theArray)
{
}

void FlushCachedImage(void *a1)
{
  id v1 = a1;
  if ([v1 _isCached]) {
    [v1 _setCached:0];
  }
}

void UIKBLADarwinUIPresented_0(uint64_t a1, void *a2)
{
  id v2 = a2;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __UIKBLADarwinUIPresented_block_invoke_0;
  block[3] = &unk_1E52D9F70;
  id v5 = v2;
  id v3 = v2;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

void UIKBLADarwinUIDismissed_0(uint64_t a1, void *a2)
{
  id v2 = a2;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __UIKBLADarwinUIDismissed_block_invoke_0;
  block[3] = &unk_1E52D9F70;
  id v5 = v2;
  id v3 = v2;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

uint64_t __UIKBLADarwinUIPresented_block_invoke_0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _localAuthenticationPresented];
}

uint64_t __UIKBLADarwinUIDismissed_block_invoke_0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _localAuthenticationDismissed];
}

id _extendStateRestorationQueue()
{
  if (_MergedGlobals_1341 != -1) {
    dispatch_once(&_MergedGlobals_1341, &__block_literal_global_20_8);
  }
  CFDictionaryRef v0 = (void *)qword_1EB265550;
  return v0;
}

void ___extendStateRestorationQueue_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("_holdSceneEventResponsesQueue", 0);
  id v1 = (void *)qword_1EB265550;
  qword_1EB265550 = (uint64_t)v0;
}

void _unsupportedDestinationType(CFTypeID a1)
{
  os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  id v2 = (__CFString *)CFCopyTypeIDDescription(a1);
  _os_log_send_and_compose_impl();

  _os_crash_msg();
  __break(1u);
}

void _UIViewLogForNotInHierarchyViewHitTestResult(void *a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(id *)(__UILogGetCategoryCachedImpl("View", &_UIViewLogForNotInHierarchyViewHitTestResult___s_category)+ 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    if (a1)
    {
      id v7 = NSString;
      id v8 = a1;
      unint64_t v9 = (objc_class *)objc_opt_class();
      double v10 = NSStringFromClass(v9);
      double v11 = [v7 stringWithFormat:@"<%@: %p>", v10, v8];
    }
    else
    {
      double v11 = @"(nil)";
    }
    char v12 = v11;
    if (a2)
    {
      double v13 = NSString;
      id v14 = a2;
      double v15 = (objc_class *)objc_opt_class();
      double v16 = NSStringFromClass(v15);
      double v17 = [v13 stringWithFormat:@"<%@: %p>", v16, v14];
    }
    else
    {
      double v17 = @"(nil)";
    }
    double v18 = v17;
    unint64_t v19 = NSString;
    id v20 = a3;
    CFDictionaryRef v21 = (objc_class *)objc_opt_class();
    uint64_t v22 = NSStringFromClass(v21);
    long long v23 = [v19 stringWithFormat:@"<%@: %p>", v22, v20];

    *(_DWORD *)long long buf = 138543874;
    long long v25 = v12;
    __int16 v26 = 2114;
    double v27 = v18;
    __int16 v28 = 2114;
    double v29 = v23;
    _os_log_impl(&dword_1853B0000, v6, OS_LOG_TYPE_ERROR, "Invalid returned hit test result for view in hierarchy: The returned hit test result is invalid and may cause issues as it is not in a window hierarchy: self: %{public}@; hit-tested subview: %{public}@; invalid returned view: %{public}@",
      buf,
      0x20u);
  }
}

uint64_t sub_186A1D1CC()
{
  return MEMORY[0x1F40E2E10]();
}

uint64_t sub_186A1D1DC()
{
  return MEMORY[0x1F40E3368]();
}

uint64_t sub_186A1D1EC()
{
  return MEMORY[0x1F40E3420]();
}

uint64_t sub_186A1D1FC()
{
  return MEMORY[0x1F40E3550]();
}

uint64_t sub_186A1D20C()
{
  return MEMORY[0x1F40E3578]();
}

uint64_t sub_186A1D21C()
{
  return MEMORY[0x1F40E3590]();
}

uint64_t sub_186A1D22C()
{
  return MEMORY[0x1F40E35A8]();
}

uint64_t sub_186A1D23C()
{
  return MEMORY[0x1F40E3838]();
}

uint64_t sub_186A1D24C()
{
  return MEMORY[0x1F40E3848]();
}

uint64_t sub_186A1D25C()
{
  return MEMORY[0x1F40E3A90]();
}

uint64_t sub_186A1D26C()
{
  return MEMORY[0x1F40E3A98]();
}

uint64_t sub_186A1D27C()
{
  return MEMORY[0x1F40E3AC0]();
}

uint64_t sub_186A1D28C()
{
  return MEMORY[0x1F40E3B60]();
}

uint64_t sub_186A1D29C()
{
  return MEMORY[0x1F40D3120]();
}

uint64_t sub_186A1D2AC()
{
  return MEMORY[0x1F41650A0]();
}

uint64_t sub_186A1D2BC()
{
  return MEMORY[0x1F40E3BC0]();
}

uint64_t sub_186A1D2CC()
{
  return MEMORY[0x1F40E3BF0]();
}

uint64_t sub_186A1D2DC()
{
  return MEMORY[0x1F40E3C10]();
}

uint64_t sub_186A1D2EC()
{
  return MEMORY[0x1F40E3CC8]();
}

uint64_t sub_186A1D2FC()
{
  return MEMORY[0x1F40E3D88]();
}

uint64_t sub_186A1D30C()
{
  return MEMORY[0x1F40E3DA8]();
}

uint64_t sub_186A1D31C()
{
  return MEMORY[0x1F40E3DC0]();
}

uint64_t sub_186A1D32C()
{
  return MEMORY[0x1F40E3DC8]();
}

uint64_t sub_186A1D33C()
{
  return MEMORY[0x1F40DF250]();
}

uint64_t sub_186A1D34C()
{
  return MEMORY[0x1F40DF258]();
}

uint64_t sub_186A1D35C()
{
  return MEMORY[0x1F40E3E98]();
}

uint64_t sub_186A1D36C()
{
  return MEMORY[0x1F40E3EA0]();
}

uint64_t sub_186A1D37C()
{
  return MEMORY[0x1F40E3EB0]();
}

uint64_t sub_186A1D38C()
{
  return MEMORY[0x1F40E3EC0]();
}

uint64_t sub_186A1D39C()
{
  return MEMORY[0x1F40E3ED0]();
}

uint64_t sub_186A1D3AC()
{
  return MEMORY[0x1F40E3ED8]();
}

uint64_t sub_186A1D3BC()
{
  return MEMORY[0x1F40E3EF8]();
}

uint64_t sub_186A1D3CC()
{
  return MEMORY[0x1F40E3F58]();
}

uint64_t sub_186A1D3DC()
{
  return MEMORY[0x1F40E3F60]();
}

uint64_t sub_186A1D3EC()
{
  return MEMORY[0x1F40E4038]();
}

uint64_t sub_186A1D3FC()
{
  return MEMORY[0x1F40E4040]();
}

uint64_t sub_186A1D41C()
{
  return MEMORY[0x1F40E4070]();
}

uint64_t sub_186A1D42C()
{
  return MEMORY[0x1F40E4090]();
}

uint64_t sub_186A1D43C()
{
  return MEMORY[0x1F40E40A0]();
}

uint64_t sub_186A1D44C()
{
  return MEMORY[0x1F40E40A8]();
}

uint64_t sub_186A1D45C()
{
  return MEMORY[0x1F40E40B0]();
}

uint64_t sub_186A1D46C()
{
  return MEMORY[0x1F40E40C0]();
}

uint64_t sub_186A1D47C()
{
  return MEMORY[0x1F40E4140]();
}

uint64_t sub_186A1D48C()
{
  return MEMORY[0x1F40E4150]();
}

uint64_t sub_186A1D49C()
{
  return MEMORY[0x1F40E4160]();
}

uint64_t sub_186A1D4AC()
{
  return MEMORY[0x1F40E4178]();
}

uint64_t sub_186A1D4BC()
{
  return MEMORY[0x1F40E41E0]();
}

uint64_t sub_186A1D4CC()
{
  return MEMORY[0x1F40E4210]();
}

uint64_t sub_186A1D4DC()
{
  return MEMORY[0x1F40E4220]();
}

uint64_t sub_186A1D4EC()
{
  return MEMORY[0x1F40E4228]();
}

uint64_t sub_186A1D4FC()
{
  return MEMORY[0x1F40E4240]();
}

uint64_t sub_186A1D50C()
{
  return MEMORY[0x1F40E4260]();
}

uint64_t sub_186A1D51C()
{
  return MEMORY[0x1F40E4270]();
}

uint64_t sub_186A1D53C()
{
  return MEMORY[0x1F40E4530]();
}

uint64_t sub_186A1D54C()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_186A1D55C()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t sub_186A1D56C()
{
  return MEMORY[0x1F40E4570]();
}

uint64_t sub_186A1D57C()
{
  return MEMORY[0x1F40E45A0]();
}

uint64_t sub_186A1D58C()
{
  return MEMORY[0x1F40E45B8]();
}

uint64_t sub_186A1D59C()
{
  return MEMORY[0x1F40E45D8]();
}

uint64_t sub_186A1D5AC()
{
  return MEMORY[0x1F40E45E0]();
}

uint64_t sub_186A1D5BC()
{
  return MEMORY[0x1F40E4698]();
}

uint64_t sub_186A1D5CC()
{
  return MEMORY[0x1F40E4758]();
}

uint64_t sub_186A1D5DC()
{
  return MEMORY[0x1F40E4768]();
}

uint64_t sub_186A1D5EC()
{
  return MEMORY[0x1F40E4770]();
}

uint64_t sub_186A1D5FC()
{
  return MEMORY[0x1F40E4780]();
}

uint64_t sub_186A1D60C()
{
  return MEMORY[0x1F40E4788]();
}

uint64_t sub_186A1D61C()
{
  return MEMORY[0x1F40E49A0]();
}

uint64_t sub_186A1D62C()
{
  return MEMORY[0x1F40E4A70]();
}

uint64_t sub_186A1D63C()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t sub_186A1D64C()
{
  return MEMORY[0x1F40E4B98]();
}

uint64_t sub_186A1D65C()
{
  return MEMORY[0x1F40E4BA0]();
}

uint64_t sub_186A1D66C()
{
  return MEMORY[0x1F40E4D48]();
}

uint64_t sub_186A1D67C()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t sub_186A1D68C()
{
  return MEMORY[0x1F40E5188]();
}

uint64_t sub_186A1D69C()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t sub_186A1D6AC()
{
  return MEMORY[0x1F40E53A0]();
}

uint64_t sub_186A1D6BC()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t sub_186A1D6CC()
{
  return MEMORY[0x1F40E53C8]();
}

uint64_t _s5UIKit16UITextEffectViewC0C2IDV2eeoiySbAE_AEtFZ_0()
{
  return MEMORY[0x1F40E53E8]();
}

uint64_t sub_186A1D6EC()
{
  return MEMORY[0x1F40E53F8]();
}

uint64_t sub_186A1D6FC()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t sub_186A1D70C()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t sub_186A1D71C()
{
  return MEMORY[0x1F40E5540]();
}

uint64_t sub_186A1D72C()
{
  return MEMORY[0x1F40E5578]();
}

uint64_t sub_186A1D73C()
{
  return MEMORY[0x1F40E57D8]();
}

uint64_t sub_186A1D74C()
{
  return MEMORY[0x1F40E57F8]();
}

uint64_t sub_186A1D75C()
{
  return MEMORY[0x1F40E5840]();
}

uint64_t sub_186A1D76C()
{
  return MEMORY[0x1F40E5BA0]();
}

uint64_t sub_186A1D77C()
{
  return MEMORY[0x1F40E5CA8]();
}

uint64_t sub_186A1D78C()
{
  return MEMORY[0x1F40E5E68]();
}

uint64_t sub_186A1D79C()
{
  return MEMORY[0x1F40E5EA0]();
}

uint64_t sub_186A1D7AC()
{
  return MEMORY[0x1F40E5EA8]();
}

uint64_t sub_186A1D7BC()
{
  return MEMORY[0x1F40E5EC0]();
}

uint64_t sub_186A1D7CC()
{
  return MEMORY[0x1F40E5EF0]();
}

uint64_t sub_186A1D7DC()
{
  return MEMORY[0x1F40E5F00]();
}

uint64_t sub_186A1D7EC()
{
  return MEMORY[0x1F40E5F08]();
}

uint64_t sub_186A1D7FC()
{
  return MEMORY[0x1F40E5F20]();
}

uint64_t sub_186A1D80C()
{
  return MEMORY[0x1F4187500]();
}

uint64_t sub_186A1D81C()
{
  return MEMORY[0x1F4187508]();
}

uint64_t sub_186A1D82C()
{
  return MEMORY[0x1F4187510]();
}

uint64_t sub_186A1D83C()
{
  return MEMORY[0x1F4187518]();
}

uint64_t sub_186A1D84C()
{
  return MEMORY[0x1F4187520]();
}

uint64_t sub_186A1D85C()
{
  return MEMORY[0x1F4187528]();
}

uint64_t sub_186A1D86C()
{
  return MEMORY[0x1F40D9648]();
}

uint64_t sub_186A1D87C()
{
  return MEMORY[0x1F40E5F50]();
}

uint64_t sub_186A1D88C()
{
  return MEMORY[0x1F40E5F60]();
}

uint64_t sub_186A1D89C()
{
  return MEMORY[0x1F40E5F70]();
}

uint64_t sub_186A1D8AC()
{
  return MEMORY[0x1F40E5F80]();
}

uint64_t sub_186A1D8BC()
{
  return MEMORY[0x1F4186958]();
}

uint64_t sub_186A1D8CC()
{
  return MEMORY[0x1F4186968]();
}

uint64_t sub_186A1D8DC()
{
  return MEMORY[0x1F4186978]();
}

uint64_t sub_186A1D8EC()
{
  return MEMORY[0x1F4188358]();
}

uint64_t sub_186A1D8FC()
{
  return MEMORY[0x1F41883C8]();
}

uint64_t sub_186A1D90C()
{
  return MEMORY[0x1F40E05F0]();
}

uint64_t sub_186A1D91C()
{
  return MEMORY[0x1F40E05F8]();
}

uint64_t sub_186A1D92C()
{
  return MEMORY[0x1F40E0600]();
}

uint64_t sub_186A1D93C()
{
  return MEMORY[0x1F40E0608]();
}

uint64_t sub_186A1D94C()
{
  return MEMORY[0x1F40E0610]();
}

uint64_t sub_186A1D95C()
{
  return MEMORY[0x1F40E0620]();
}

uint64_t sub_186A1D96C()
{
  return MEMORY[0x1F40E0628]();
}

uint64_t sub_186A1D97C()
{
  return MEMORY[0x1F40E0630]();
}

uint64_t sub_186A1D98C()
{
  return MEMORY[0x1F40E0638]();
}

uint64_t sub_186A1D99C()
{
  return MEMORY[0x1F40E0648]();
}

uint64_t sub_186A1D9AC()
{
  return MEMORY[0x1F40E0650]();
}

uint64_t sub_186A1D9BC()
{
  return MEMORY[0x1F40E0658]();
}

uint64_t sub_186A1D9CC()
{
  return MEMORY[0x1F40E0660]();
}

uint64_t sub_186A1D9DC()
{
  return MEMORY[0x1F40E0668]();
}

uint64_t sub_186A1D9EC()
{
  return MEMORY[0x1F40E0670]();
}

uint64_t sub_186A1D9FC()
{
  return MEMORY[0x1F40E0678]();
}

uint64_t sub_186A1DA0C()
{
  return MEMORY[0x1F40E0680]();
}

uint64_t sub_186A1DA1C()
{
  return MEMORY[0x1F40E0688]();
}

uint64_t sub_186A1DA2C()
{
  return MEMORY[0x1F41650B0]();
}

uint64_t sub_186A1DA3C()
{
  return MEMORY[0x1F41650B8]();
}

uint64_t sub_186A1DA4C()
{
  return MEMORY[0x1F41650C0]();
}

uint64_t sub_186A1DA5C()
{
  return MEMORY[0x1F41650C8]();
}

uint64_t sub_186A1DA6C()
{
  return MEMORY[0x1F41650D8]();
}

uint64_t sub_186A1DA7C()
{
  return MEMORY[0x1F41650E0]();
}

uint64_t sub_186A1DA8C()
{
  return MEMORY[0x1F41650E8]();
}

uint64_t sub_186A1DA9C()
{
  return MEMORY[0x1F41650F0]();
}

uint64_t sub_186A1DAAC()
{
  return MEMORY[0x1F41650F8]();
}

uint64_t sub_186A1DABC()
{
  return MEMORY[0x1F4165100]();
}

uint64_t sub_186A1DACC()
{
  return MEMORY[0x1F4165108]();
}

uint64_t sub_186A1DADC()
{
  return MEMORY[0x1F4165110]();
}

uint64_t sub_186A1DAEC()
{
  return MEMORY[0x1F4165118]();
}

uint64_t sub_186A1DAFC()
{
  return MEMORY[0x1F4165120]();
}

uint64_t sub_186A1DB0C()
{
  return MEMORY[0x1F4165128]();
}

uint64_t sub_186A1DB1C()
{
  return MEMORY[0x1F4165130]();
}

uint64_t sub_186A1DB2C()
{
  return MEMORY[0x1F4165138]();
}

uint64_t sub_186A1DB3C()
{
  return MEMORY[0x1F4165140]();
}

uint64_t sub_186A1DB4C()
{
  return MEMORY[0x1F4165148]();
}

uint64_t sub_186A1DB5C()
{
  return MEMORY[0x1F4165150]();
}

uint64_t sub_186A1DB6C()
{
  return MEMORY[0x1F4165158]();
}

uint64_t sub_186A1DB7C()
{
  return MEMORY[0x1F4165160]();
}

uint64_t sub_186A1DB8C()
{
  return MEMORY[0x1F4165168]();
}

uint64_t sub_186A1DB9C()
{
  return MEMORY[0x1F4165170]();
}

uint64_t sub_186A1DBAC()
{
  return MEMORY[0x1F4165178]();
}

uint64_t sub_186A1DBBC()
{
  return MEMORY[0x1F4165180]();
}

uint64_t sub_186A1DBCC()
{
  return MEMORY[0x1F4165188]();
}

uint64_t sub_186A1DBDC()
{
  return MEMORY[0x1F4165190]();
}

uint64_t sub_186A1DBEC()
{
  return MEMORY[0x1F4165198]();
}

uint64_t sub_186A1DBFC()
{
  return MEMORY[0x1F41651A0]();
}

uint64_t sub_186A1DC0C()
{
  return MEMORY[0x1F41651A8]();
}

uint64_t sub_186A1DC1C()
{
  return MEMORY[0x1F41651B0]();
}

uint64_t sub_186A1DC2C()
{
  return MEMORY[0x1F41651B8]();
}

uint64_t sub_186A1DC3C()
{
  return MEMORY[0x1F41651C0]();
}

uint64_t sub_186A1DC4C()
{
  return MEMORY[0x1F41651C8]();
}

uint64_t sub_186A1DC5C()
{
  return MEMORY[0x1F41651D0]();
}

uint64_t sub_186A1DC6C()
{
  return MEMORY[0x1F41651D8]();
}

uint64_t sub_186A1DC7C()
{
  return MEMORY[0x1F41651E0]();
}

uint64_t sub_186A1DC8C()
{
  return MEMORY[0x1F41651E8]();
}

uint64_t sub_186A1DC9C()
{
  return MEMORY[0x1F41651F0]();
}

uint64_t sub_186A1DCAC()
{
  return MEMORY[0x1F41651F8]();
}

uint64_t sub_186A1DCBC()
{
  return MEMORY[0x1F4165200]();
}

uint64_t sub_186A1DCCC()
{
  return MEMORY[0x1F4165208]();
}

uint64_t sub_186A1DCDC()
{
  return MEMORY[0x1F4165210]();
}

uint64_t sub_186A1DCEC()
{
  return MEMORY[0x1F4165218]();
}

uint64_t sub_186A1DCFC()
{
  return MEMORY[0x1F4165220]();
}

uint64_t sub_186A1DD0C()
{
  return MEMORY[0x1F4165228]();
}

uint64_t sub_186A1DD1C()
{
  return MEMORY[0x1F4165230]();
}

uint64_t sub_186A1DD2C()
{
  return MEMORY[0x1F4165238]();
}

uint64_t sub_186A1DD3C()
{
  return MEMORY[0x1F4165240]();
}

uint64_t sub_186A1DD4C()
{
  return MEMORY[0x1F4165248]();
}

uint64_t sub_186A1DD5C()
{
  return MEMORY[0x1F4165250]();
}

uint64_t sub_186A1DD6C()
{
  return MEMORY[0x1F4165258]();
}

uint64_t sub_186A1DD7C()
{
  return MEMORY[0x1F4165260]();
}

uint64_t sub_186A1DD8C()
{
  return MEMORY[0x1F4165268]();
}

uint64_t sub_186A1DD9C()
{
  return MEMORY[0x1F4165270]();
}

uint64_t sub_186A1DDAC()
{
  return MEMORY[0x1F4165278]();
}

uint64_t sub_186A1DDBC()
{
  return MEMORY[0x1F4165280]();
}

uint64_t sub_186A1DDCC()
{
  return MEMORY[0x1F4165290]();
}

uint64_t sub_186A1DDDC()
{
  return MEMORY[0x1F41652A0]();
}

uint64_t sub_186A1DDEC()
{
  return MEMORY[0x1F41652B0]();
}

uint64_t sub_186A1DDFC()
{
  return MEMORY[0x1F41652C0]();
}

uint64_t sub_186A1DE0C()
{
  return MEMORY[0x1F41652C8]();
}

uint64_t sub_186A1DE1C()
{
  return MEMORY[0x1F41652D8]();
}

uint64_t sub_186A1DE2C()
{
  return MEMORY[0x1F41652E0]();
}

uint64_t sub_186A1DE3C()
{
  return MEMORY[0x1F41652F0]();
}

uint64_t sub_186A1DE4C()
{
  return MEMORY[0x1F41652F8]();
}

uint64_t sub_186A1DE5C()
{
  return MEMORY[0x1F4165300]();
}

uint64_t sub_186A1DE6C()
{
  return MEMORY[0x1F4165308]();
}

uint64_t sub_186A1DE7C()
{
  return MEMORY[0x1F4165310]();
}

uint64_t sub_186A1DE8C()
{
  return MEMORY[0x1F4165318]();
}

uint64_t sub_186A1DE9C()
{
  return MEMORY[0x1F4165320]();
}

uint64_t sub_186A1DEAC()
{
  return MEMORY[0x1F4165328]();
}

uint64_t sub_186A1DEBC()
{
  return MEMORY[0x1F4165330]();
}

uint64_t sub_186A1DECC()
{
  return MEMORY[0x1F4165338]();
}

uint64_t sub_186A1DEDC()
{
  return MEMORY[0x1F4165340]();
}

uint64_t sub_186A1DEEC()
{
  return MEMORY[0x1F4165348]();
}

uint64_t sub_186A1DEFC()
{
  return MEMORY[0x1F4165350]();
}

uint64_t sub_186A1DF0C()
{
  return MEMORY[0x1F4165358]();
}

uint64_t sub_186A1DF1C()
{
  return MEMORY[0x1F4165360]();
}

uint64_t sub_186A1DF2C()
{
  return MEMORY[0x1F4165368]();
}

uint64_t sub_186A1DF3C()
{
  return MEMORY[0x1F4165370]();
}

uint64_t sub_186A1DF4C()
{
  return MEMORY[0x1F4165378]();
}

uint64_t sub_186A1DF5C()
{
  return MEMORY[0x1F4165380]();
}

uint64_t sub_186A1DF6C()
{
  return MEMORY[0x1F4165388]();
}

uint64_t sub_186A1DF7C()
{
  return MEMORY[0x1F4165390]();
}

uint64_t sub_186A1DF8C()
{
  return MEMORY[0x1F4165398]();
}

uint64_t sub_186A1DF9C()
{
  return MEMORY[0x1F41653A0]();
}

uint64_t sub_186A1DFAC()
{
  return MEMORY[0x1F41653A8]();
}

uint64_t sub_186A1DFBC()
{
  return MEMORY[0x1F41653B0]();
}

uint64_t sub_186A1DFCC()
{
  return MEMORY[0x1F41653B8]();
}

uint64_t sub_186A1DFDC()
{
  return MEMORY[0x1F41653C0]();
}

uint64_t sub_186A1DFEC()
{
  return MEMORY[0x1F41653C8]();
}

uint64_t sub_186A1DFFC()
{
  return MEMORY[0x1F41653D0]();
}

uint64_t sub_186A1E00C()
{
  return MEMORY[0x1F41653D8]();
}

uint64_t sub_186A1E01C()
{
  return MEMORY[0x1F41653E0]();
}

uint64_t sub_186A1E02C()
{
  return MEMORY[0x1F41653E8]();
}

uint64_t sub_186A1E03C()
{
  return MEMORY[0x1F41653F0]();
}

uint64_t sub_186A1E04C()
{
  return MEMORY[0x1F41653F8]();
}

uint64_t sub_186A1E05C()
{
  return MEMORY[0x1F4165400]();
}

uint64_t sub_186A1E06C()
{
  return MEMORY[0x1F4165410]();
}

uint64_t sub_186A1E07C()
{
  return MEMORY[0x1F4165418]();
}

uint64_t sub_186A1E08C()
{
  return MEMORY[0x1F4165420]();
}

uint64_t sub_186A1E09C()
{
  return MEMORY[0x1F4165428]();
}

uint64_t sub_186A1E0AC()
{
  return MEMORY[0x1F4165430]();
}

uint64_t sub_186A1E0BC()
{
  return MEMORY[0x1F4165438]();
}

uint64_t sub_186A1E0CC()
{
  return MEMORY[0x1F4165440]();
}

uint64_t sub_186A1E0DC()
{
  return MEMORY[0x1F4165448]();
}

uint64_t sub_186A1E0EC()
{
  return MEMORY[0x1F4165450]();
}

uint64_t sub_186A1E0FC()
{
  return MEMORY[0x1F4165458]();
}

uint64_t sub_186A1E10C()
{
  return MEMORY[0x1F4165460]();
}

uint64_t sub_186A1E11C()
{
  return MEMORY[0x1F4165468]();
}

uint64_t sub_186A1E12C()
{
  return MEMORY[0x1F4165470]();
}

uint64_t sub_186A1E13C()
{
  return MEMORY[0x1F4165478]();
}

uint64_t sub_186A1E14C()
{
  return MEMORY[0x1F4165480]();
}

uint64_t sub_186A1E15C()
{
  return MEMORY[0x1F4165488]();
}

uint64_t sub_186A1E16C()
{
  return MEMORY[0x1F4165490]();
}

uint64_t sub_186A1E17C()
{
  return MEMORY[0x1F4165498]();
}

uint64_t sub_186A1E18C()
{
  return MEMORY[0x1F41654A0]();
}

uint64_t sub_186A1E19C()
{
  return MEMORY[0x1F41654A8]();
}

uint64_t sub_186A1E1AC()
{
  return MEMORY[0x1F41654B0]();
}

uint64_t sub_186A1E1BC()
{
  return MEMORY[0x1F41654B8]();
}

uint64_t sub_186A1E1CC()
{
  return MEMORY[0x1F41654C0]();
}

uint64_t sub_186A1E1DC()
{
  return MEMORY[0x1F41654C8]();
}

uint64_t sub_186A1E1EC()
{
  return MEMORY[0x1F41654D0]();
}

uint64_t sub_186A1E1FC()
{
  return MEMORY[0x1F41654D8]();
}

uint64_t sub_186A1E20C()
{
  return MEMORY[0x1F41654E0]();
}

uint64_t sub_186A1E21C()
{
  return MEMORY[0x1F41654E8]();
}

uint64_t sub_186A1E22C()
{
  return MEMORY[0x1F41654F0]();
}

uint64_t sub_186A1E23C()
{
  return MEMORY[0x1F41654F8]();
}

uint64_t sub_186A1E24C()
{
  return MEMORY[0x1F4165500]();
}

uint64_t sub_186A1E25C()
{
  return MEMORY[0x1F4165508]();
}

uint64_t sub_186A1E26C()
{
  return MEMORY[0x1F4165510]();
}

uint64_t sub_186A1E27C()
{
  return MEMORY[0x1F4165518]();
}

uint64_t sub_186A1E28C()
{
  return MEMORY[0x1F4165520]();
}

uint64_t sub_186A1E29C()
{
  return MEMORY[0x1F4165528]();
}

uint64_t sub_186A1E2AC()
{
  return MEMORY[0x1F4165530]();
}

uint64_t sub_186A1E2BC()
{
  return MEMORY[0x1F4165538]();
}

uint64_t sub_186A1E2CC()
{
  return MEMORY[0x1F4165540]();
}

uint64_t sub_186A1E2DC()
{
  return MEMORY[0x1F4165548]();
}

uint64_t sub_186A1E2EC()
{
  return MEMORY[0x1F4165560]();
}

uint64_t sub_186A1E2FC()
{
  return MEMORY[0x1F4165568]();
}

uint64_t sub_186A1E30C()
{
  return MEMORY[0x1F4165570]();
}

uint64_t sub_186A1E31C()
{
  return MEMORY[0x1F4165578]();
}

uint64_t sub_186A1E32C()
{
  return MEMORY[0x1F4165580]();
}

uint64_t sub_186A1E33C()
{
  return MEMORY[0x1F4165588]();
}

uint64_t sub_186A1E34C()
{
  return MEMORY[0x1F4165590]();
}

uint64_t sub_186A1E35C()
{
  return MEMORY[0x1F4165598]();
}

uint64_t sub_186A1E36C()
{
  return MEMORY[0x1F41655A0]();
}

uint64_t sub_186A1E37C()
{
  return MEMORY[0x1F41655A8]();
}

uint64_t sub_186A1E38C()
{
  return MEMORY[0x1F41655B0]();
}

uint64_t sub_186A1E39C()
{
  return MEMORY[0x1F41655B8]();
}

uint64_t sub_186A1E3AC()
{
  return MEMORY[0x1F41655C0]();
}

uint64_t sub_186A1E3BC()
{
  return MEMORY[0x1F41655C8]();
}

uint64_t sub_186A1E3CC()
{
  return MEMORY[0x1F41655D0]();
}

uint64_t sub_186A1E3DC()
{
  return MEMORY[0x1F41655D8]();
}

uint64_t sub_186A1E3EC()
{
  return MEMORY[0x1F41655E0]();
}

uint64_t sub_186A1E3FC()
{
  return MEMORY[0x1F41655E8]();
}

uint64_t sub_186A1E40C()
{
  return MEMORY[0x1F41655F0]();
}

uint64_t sub_186A1E41C()
{
  return MEMORY[0x1F41655F8]();
}

uint64_t sub_186A1E42C()
{
  return MEMORY[0x1F4165600]();
}

uint64_t sub_186A1E43C()
{
  return MEMORY[0x1F4165608]();
}

uint64_t sub_186A1E44C()
{
  return MEMORY[0x1F4165610]();
}

uint64_t sub_186A1E45C()
{
  return MEMORY[0x1F4165618]();
}

uint64_t sub_186A1E46C()
{
  return MEMORY[0x1F4165620]();
}

uint64_t sub_186A1E47C()
{
  return MEMORY[0x1F4165628]();
}

uint64_t sub_186A1E48C()
{
  return MEMORY[0x1F4165630]();
}

uint64_t sub_186A1E49C()
{
  return MEMORY[0x1F4165638]();
}

uint64_t sub_186A1E4AC()
{
  return MEMORY[0x1F4165640]();
}

uint64_t sub_186A1E4BC()
{
  return MEMORY[0x1F4165648]();
}

uint64_t sub_186A1E4CC()
{
  return MEMORY[0x1F4165650]();
}

uint64_t sub_186A1E4DC()
{
  return MEMORY[0x1F4165658]();
}

uint64_t sub_186A1E4EC()
{
  return MEMORY[0x1F4187910]();
}

uint64_t sub_186A1E4FC()
{
  return MEMORY[0x1F41879A0]();
}

uint64_t sub_186A1E50C()
{
  return MEMORY[0x1F41879E0]();
}

uint64_t sub_186A1E51C()
{
  return MEMORY[0x1F4187A18]();
}

uint64_t sub_186A1E52C()
{
  return MEMORY[0x1F4187A20]();
}

uint64_t sub_186A1E53C()
{
  return MEMORY[0x1F4188560]();
}

uint64_t sub_186A1E54C()
{
  return MEMORY[0x1F4188570]();
}

uint64_t sub_186A1E55C()
{
  return MEMORY[0x1F4188580]();
}

uint64_t sub_186A1E56C()
{
  return MEMORY[0x1F4188590]();
}

uint64_t sub_186A1E57C()
{
  return MEMORY[0x1F41885B0]();
}

uint64_t sub_186A1E58C()
{
  return MEMORY[0x1F41885D0]();
}

uint64_t sub_186A1E59C()
{
  return MEMORY[0x1F4188648]();
}

uint64_t sub_186A1E5AC()
{
  return MEMORY[0x1F4188670]();
}

uint64_t sub_186A1E5BC()
{
  return MEMORY[0x1F4188680]();
}

uint64_t sub_186A1E5CC()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t sub_186A1E5DC()
{
  return MEMORY[0x1F41886B0]();
}

uint64_t sub_186A1E5FC()
{
  return MEMORY[0x1F40FEAE0]();
}

uint64_t sub_186A1E60C()
{
  return MEMORY[0x1F4101B90]();
}

uint64_t sub_186A1E61C()
{
  return MEMORY[0x1F4101B98]();
}

uint64_t sub_186A1E62C()
{
  return MEMORY[0x1F4101BA0]();
}

uint64_t sub_186A1E63C()
{
  return MEMORY[0x1F4101C00]();
}

uint64_t sub_186A1E64C()
{
  return MEMORY[0x1F4101C08]();
}

uint64_t sub_186A1E65C()
{
  return MEMORY[0x1F4101CB0]();
}

uint64_t sub_186A1E66C()
{
  return MEMORY[0x1F4101CC8]();
}

uint64_t sub_186A1E67C()
{
  return MEMORY[0x1F4101CD0]();
}

uint64_t sub_186A1E68C()
{
  return MEMORY[0x1F4101D18]();
}

uint64_t sub_186A1E69C()
{
  return MEMORY[0x1F4101D20]();
}

uint64_t sub_186A1E6AC()
{
  return MEMORY[0x1F4101D28]();
}

uint64_t sub_186A1E6BC()
{
  return MEMORY[0x1F4186C60]();
}

uint64_t sub_186A1E6CC()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t sub_186A1E6DC()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t sub_186A1E6EC()
{
  return MEMORY[0x1F4186D08]();
}

uint64_t sub_186A1E6FC()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t sub_186A1E70C()
{
  return MEMORY[0x1F4186E28]();
}

uint64_t sub_186A1E71C()
{
  return MEMORY[0x1F4186E38]();
}

uint64_t sub_186A1E72C()
{
  return MEMORY[0x1F4186E60]();
}

uint64_t sub_186A1E73C()
{
  return MEMORY[0x1F4186EF8]();
}

uint64_t sub_186A1E74C()
{
  return MEMORY[0x1F4186F08]();
}

uint64_t sub_186A1E75C()
{
  return MEMORY[0x1F4186F18]();
}

uint64_t sub_186A1E76C()
{
  return MEMORY[0x1F4186F40]();
}

uint64_t sub_186A1E77C()
{
  return MEMORY[0x1F4183280]();
}

uint64_t sub_186A1E78C()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_186A1E79C()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t sub_186A1E7AC()
{
  return MEMORY[0x1F40E6038]();
}

uint64_t sub_186A1E7BC()
{
  return MEMORY[0x1F40E6040]();
}

uint64_t sub_186A1E7CC()
{
  return MEMORY[0x1F40E6048]();
}

uint64_t sub_186A1E7DC()
{
  return MEMORY[0x1F4183318]();
}

uint64_t sub_186A1E7EC()
{
  return MEMORY[0x1F4183320]();
}

uint64_t sub_186A1E7FC()
{
  return MEMORY[0x1F4183358]();
}

uint64_t sub_186A1E80C()
{
  return MEMORY[0x1F4183390]();
}

uint64_t sub_186A1E81C()
{
  return MEMORY[0x1F4183408]();
}

uint64_t sub_186A1E82C()
{
  return MEMORY[0x1F4183440]();
}

uint64_t sub_186A1E83C()
{
  return MEMORY[0x1F41834A8]();
}

uint64_t sub_186A1E84C()
{
  return MEMORY[0x1F41834F8]();
}

uint64_t sub_186A1E85C()
{
  return MEMORY[0x1F4183500]();
}

uint64_t sub_186A1E86C()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t sub_186A1E87C()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t sub_186A1E88C()
{
  return MEMORY[0x1F41835D0]();
}

uint64_t sub_186A1E89C()
{
  return MEMORY[0x1F4183638]();
}

uint64_t sub_186A1E8AC()
{
  return MEMORY[0x1F4183640]();
}

uint64_t sub_186A1E8BC()
{
  return MEMORY[0x1F4183658]();
}

uint64_t sub_186A1E8CC()
{
  return MEMORY[0x1F4188400]();
}

uint64_t sub_186A1E8DC()
{
  return MEMORY[0x1F4183730]();
}

uint64_t sub_186A1E8EC()
{
  return MEMORY[0x1F4183738]();
}

uint64_t sub_186A1E8FC()
{
  return MEMORY[0x1F4183740]();
}

uint64_t sub_186A1E90C()
{
  return MEMORY[0x1F4183818]();
}

uint64_t sub_186A1E91C()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_186A1E92C()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_186A1E93C()
{
  return MEMORY[0x1F40E61B8]();
}

uint64_t sub_186A1E94C()
{
  return MEMORY[0x1F40E61C8]();
}

uint64_t sub_186A1E95C()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_186A1E96C()
{
  return MEMORY[0x1F40E6238]();
}

uint64_t sub_186A1E97C()
{
  return MEMORY[0x1F40E62E0]();
}

uint64_t sub_186A1E98C()
{
  return MEMORY[0x1F4183880]();
}

uint64_t sub_186A1E99C()
{
  return MEMORY[0x1F41838A0]();
}

uint64_t sub_186A1E9AC()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t sub_186A1E9BC()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_186A1E9CC()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t sub_186A1E9DC()
{
  return MEMORY[0x1F4183A08]();
}

uint64_t sub_186A1E9EC()
{
  return MEMORY[0x1F4183A10]();
}

uint64_t sub_186A1E9FC()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_186A1EA0C()
{
  return MEMORY[0x1F4183A60]();
}

uint64_t sub_186A1EA1C()
{
  return MEMORY[0x1F4183A78]();
}

uint64_t sub_186A1EA2C()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_186A1EA3C()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t sub_186A1EA4C()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t sub_186A1EA5C()
{
  return MEMORY[0x1F4183B30]();
}

uint64_t sub_186A1EA6C()
{
  return MEMORY[0x1F4183B48]();
}

uint64_t sub_186A1EA7C()
{
  return MEMORY[0x1F4183B88]();
}

uint64_t sub_186A1EA8C()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t sub_186A1EA9C()
{
  return MEMORY[0x1F4183BE8]();
}

uint64_t sub_186A1EAAC()
{
  return MEMORY[0x1F4183BF8]();
}

uint64_t sub_186A1EABC()
{
  return MEMORY[0x1F4183C18]();
}

uint64_t sub_186A1EACC()
{
  return MEMORY[0x1F4183C80]();
}

uint64_t sub_186A1EADC()
{
  return MEMORY[0x1F4183D60]();
}

uint64_t sub_186A1EAEC()
{
  return MEMORY[0x1F4183D70]();
}

uint64_t sub_186A1EAFC()
{
  return MEMORY[0x1F4183D78]();
}

uint64_t sub_186A1EB0C()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_186A1EB1C()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_186A1EB2C()
{
  return MEMORY[0x1F40E6360]();
}

uint64_t sub_186A1EB3C()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_186A1EB4C()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t sub_186A1EB5C()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_186A1EB6C()
{
  return MEMORY[0x1F4183EA0]();
}

uint64_t sub_186A1EB7C()
{
  return MEMORY[0x1F4183EA8]();
}

uint64_t sub_186A1EB8C()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_186A1EB9C()
{
  return MEMORY[0x1F4165660]();
}

uint64_t sub_186A1EBAC()
{
  return MEMORY[0x1F4183EE8]();
}

uint64_t sub_186A1EBBC()
{
  return MEMORY[0x1F4183EF0]();
}

uint64_t sub_186A1EBCC()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_186A1EBDC()
{
  return MEMORY[0x1F4183F18]();
}

uint64_t sub_186A1EBEC()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_186A1EBFC()
{
  return MEMORY[0x1F4183F40]();
}

uint64_t sub_186A1EC0C()
{
  return MEMORY[0x1F4183F60]();
}

uint64_t sub_186A1EC1C()
{
  return MEMORY[0x1F4183F78]();
}

uint64_t sub_186A1EC2C()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t sub_186A1EC3C()
{
  return MEMORY[0x1F4183FD8]();
}

uint64_t sub_186A1EC4C()
{
  return MEMORY[0x1F4183FF0]();
}

uint64_t sub_186A1EC5C()
{
  return MEMORY[0x1F40E6388]();
}

uint64_t sub_186A1EC6C()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t sub_186A1EC7C()
{
  return MEMORY[0x1F4187C08]();
}

uint64_t sub_186A1EC8C()
{
  return MEMORY[0x1F4187C98]();
}

uint64_t sub_186A1EC9C()
{
  return MEMORY[0x1F4187CA0]();
}

uint64_t sub_186A1ECAC()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t sub_186A1ECBC()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t sub_186A1ECCC()
{
  return MEMORY[0x1F40E63C8]();
}

uint64_t sub_186A1ECDC()
{
  return MEMORY[0x1F4184008]();
}

uint64_t sub_186A1ECEC()
{
  return MEMORY[0x1F4184048]();
}

uint64_t sub_186A1ED1C()
{
  return MEMORY[0x1F40E6408]();
}

uint64_t sub_186A1ED2C()
{
  return MEMORY[0x1F40E6410]();
}

uint64_t sub_186A1ED3C()
{
  return MEMORY[0x1F40E6428]();
}

uint64_t sub_186A1ED4C()
{
  return MEMORY[0x1F41840C0]();
}

uint64_t sub_186A1ED6C()
{
  return MEMORY[0x1F40E6430]();
}

uint64_t sub_186A1ED7C()
{
  return MEMORY[0x1F40E6458]();
}

uint64_t sub_186A1ED8C()
{
  return MEMORY[0x1F4184138]();
}

uint64_t sub_186A1ED9C()
{
  return MEMORY[0x1F41841D0]();
}

uint64_t sub_186A1EDAC()
{
  return MEMORY[0x1F40E6478]();
}

uint64_t sub_186A1EDBC()
{
  return MEMORY[0x1F41842C0]();
}

uint64_t sub_186A1EDCC()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t sub_186A1EDDC()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t sub_186A1EDEC()
{
  return MEMORY[0x1F4184300]();
}

uint64_t sub_186A1EDFC()
{
  return MEMORY[0x1F4184330]();
}

uint64_t sub_186A1EE0C()
{
  return MEMORY[0x1F4184338]();
}

uint64_t sub_186A1EE1C()
{
  return MEMORY[0x1F4184398]();
}

uint64_t sub_186A1EE2C()
{
  return MEMORY[0x1F4184418]();
}

uint64_t sub_186A1EE3C()
{
  return MEMORY[0x1F4184440]();
}

uint64_t sub_186A1EE4C()
{
  return MEMORY[0x1F41844A8]();
}

uint64_t sub_186A1EE5C()
{
  return MEMORY[0x1F4184580]();
}

uint64_t sub_186A1EE6C()
{
  return MEMORY[0x1F40E64C0]();
}

uint64_t sub_186A1EE7C()
{
  return MEMORY[0x1F40E64D8]();
}

uint64_t sub_186A1EE8C()
{
  return MEMORY[0x1F4187590]();
}

uint64_t sub_186A1EE9C()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t sub_186A1EEAC()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t sub_186A1EEBC()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_186A1EECC()
{
  return MEMORY[0x1F4188700]();
}

uint64_t sub_186A1EEDC()
{
  return MEMORY[0x1F4187A28]();
}

uint64_t sub_186A1EEEC()
{
  return MEMORY[0x1F40E6660]();
}

uint64_t sub_186A1EEFC()
{
  return MEMORY[0x1F4187598]();
}

uint64_t sub_186A1EF0C()
{
  return MEMORY[0x1F41875A0]();
}

uint64_t sub_186A1EF1C()
{
  return MEMORY[0x1F41875A8]();
}

uint64_t sub_186A1EF2C()
{
  return MEMORY[0x1F41875B0]();
}

uint64_t sub_186A1EF3C()
{
  return MEMORY[0x1F40D9720]();
}

uint64_t sub_186A1EF4C()
{
  return MEMORY[0x1F40E66F0]();
}

uint64_t sub_186A1EF5C()
{
  return MEMORY[0x1F4186FC0]();
}

uint64_t sub_186A1EF6C()
{
  return MEMORY[0x1F4186FD8]();
}

uint64_t sub_186A1EF7C()
{
  return MEMORY[0x1F4186FF0]();
}

uint64_t sub_186A1EF8C()
{
  return MEMORY[0x1F41870A0]();
}

uint64_t sub_186A1EF9C()
{
  return MEMORY[0x1F41870B8]();
}

uint64_t sub_186A1EFAC()
{
  return MEMORY[0x1F41870D8]();
}

uint64_t sub_186A1EFBC()
{
  return MEMORY[0x1F41870E0]();
}

uint64_t sub_186A1EFCC()
{
  return MEMORY[0x1F4187100]();
}

uint64_t sub_186A1EFDC()
{
  return MEMORY[0x1F40E6728]();
}

uint64_t sub_186A1EFEC()
{
  return MEMORY[0x1F40E6740]();
}

uint64_t sub_186A1EFFC()
{
  return MEMORY[0x1F4188718]();
}

uint64_t sub_186A1F00C()
{
  return MEMORY[0x1F40DF260]();
}

uint64_t sub_186A1F01C()
{
  return MEMORY[0x1F4187268]();
}

uint64_t sub_186A1F02C()
{
  return MEMORY[0x1F4187278]();
}

uint64_t sub_186A1F03C()
{
  return MEMORY[0x1F4187288]();
}

uint64_t sub_186A1F04C()
{
  return MEMORY[0x1F40E67F8]();
}

uint64_t sub_186A1F05C()
{
  return MEMORY[0x1F40E6818]();
}

uint64_t sub_186A1F06C()
{
  return MEMORY[0x1F40E6858]();
}

uint64_t sub_186A1F07C()
{
  return MEMORY[0x1F40E6890]();
}

uint64_t sub_186A1F08C()
{
  return MEMORY[0x1F40E68E8]();
}

uint64_t sub_186A1F09C()
{
  return MEMORY[0x1F41874A8]();
}

uint64_t sub_186A1F0AC()
{
  return MEMORY[0x1F41874C0]();
}

uint64_t sub_186A1F0BC()
{
  return MEMORY[0x1F41874D0]();
}

uint64_t sub_186A1F0CC()
{
  return MEMORY[0x1F40E6928]();
}

uint64_t sub_186A1F0DC()
{
  return MEMORY[0x1F40E6978]();
}

uint64_t sub_186A1F0EC()
{
  return MEMORY[0x1F40D9748]();
}

uint64_t sub_186A1F0FC()
{
  return MEMORY[0x1F40D9750]();
}

uint64_t sub_186A1F10C()
{
  return MEMORY[0x1F4188720]();
}

uint64_t sub_186A1F11C()
{
  return MEMORY[0x1F4184638]();
}

uint64_t sub_186A1F12C()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_186A1F13C()
{
  return MEMORY[0x1F4184650]();
}

uint64_t sub_186A1F14C()
{
  return MEMORY[0x1F4184658]();
}

uint64_t sub_186A1F15C()
{
  return MEMORY[0x1F4184788]();
}

uint64_t sub_186A1F16C()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_186A1F17C()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_186A1F18C()
{
  return MEMORY[0x1F40E6BF0]();
}

uint64_t sub_186A1F19C()
{
  return MEMORY[0x1F40E6C68]();
}

uint64_t sub_186A1F1AC()
{
  return MEMORY[0x1F40E6C80]();
}

uint64_t sub_186A1F1BC()
{
  return MEMORY[0x1F40E6D88]();
}

uint64_t sub_186A1F1CC()
{
  return MEMORY[0x1F4184978]();
}

uint64_t sub_186A1F1DC()
{
  return MEMORY[0x1F4184990]();
}

uint64_t sub_186A1F1EC()
{
  return MEMORY[0x1F4184A80]();
}

uint64_t sub_186A1F1FC()
{
  return MEMORY[0x1F4184AC8]();
}

uint64_t sub_186A1F21C()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t sub_186A1F22C()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t sub_186A1F23C()
{
  return MEMORY[0x1F4184B30]();
}

uint64_t sub_186A1F24C()
{
  return MEMORY[0x1F4184B48]();
}

uint64_t sub_186A1F25C()
{
  return MEMORY[0x1F4184B60]();
}

uint64_t sub_186A1F26C()
{
  return MEMORY[0x1F4184B90]();
}

uint64_t sub_186A1F27C()
{
  return MEMORY[0x1F4184BA8]();
}

uint64_t sub_186A1F29C()
{
  return MEMORY[0x1F4184BC0]();
}

uint64_t sub_186A1F2AC()
{
  return MEMORY[0x1F4184BC8]();
}

uint64_t sub_186A1F2BC()
{
  return MEMORY[0x1F40E6DB8]();
}

uint64_t sub_186A1F2CC()
{
  return MEMORY[0x1F4184C10]();
}

uint64_t sub_186A1F2DC()
{
  return MEMORY[0x1F4184C18]();
}

uint64_t sub_186A1F2EC()
{
  return MEMORY[0x1F4184C20]();
}

uint64_t sub_186A1F2FC()
{
  return MEMORY[0x1F4184C30]();
}

uint64_t sub_186A1F30C()
{
  return MEMORY[0x1F4184C38]();
}

uint64_t sub_186A1F31C()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t sub_186A1F32C()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t sub_186A1F33C()
{
  return MEMORY[0x1F4184CA0]();
}

uint64_t sub_186A1F34C()
{
  return MEMORY[0x1F4184CA8]();
}

uint64_t sub_186A1F35C()
{
  return MEMORY[0x1F4184CC0]();
}

uint64_t sub_186A1F37C()
{
  return MEMORY[0x1F4184CE0]();
}

uint64_t sub_186A1F38C()
{
  return MEMORY[0x1F4184CE8]();
}

uint64_t sub_186A1F39C()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_186A1F3AC()
{
  return MEMORY[0x1F4184CF8]();
}

uint64_t sub_186A1F3BC()
{
  return MEMORY[0x1F4184D00]();
}

uint64_t sub_186A1F3CC()
{
  return MEMORY[0x1F4184D08]();
}

uint64_t sub_186A1F3DC()
{
  return MEMORY[0x1F4184D10]();
}

uint64_t sub_186A1F3EC()
{
  return MEMORY[0x1F4184D70]();
}

uint64_t sub_186A1F3FC()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t sub_186A1F40C()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_186A1F41C()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t sub_186A1F42C()
{
  return MEMORY[0x1F4184E28]();
}

uint64_t sub_186A1F43C()
{
  return MEMORY[0x1F4184E38]();
}

uint64_t sub_186A1F44C()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_186A1F45C()
{
  return MEMORY[0x1F4184E70]();
}

uint64_t sub_186A1F46C()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t sub_186A1F47C()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t sub_186A1F48C()
{
  return MEMORY[0x1F4184EE8]();
}

uint64_t sub_186A1F49C()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t sub_186A1F4AC()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t sub_186A1F4BC()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t sub_186A1F4CC()
{
  return MEMORY[0x1F4184F48]();
}

uint64_t sub_186A1F4DC()
{
  return MEMORY[0x1F4184F68]();
}

uint64_t sub_186A1F4EC()
{
  return MEMORY[0x1F4184F70]();
}

uint64_t sub_186A1F4FC()
{
  return MEMORY[0x1F4187F80]();
}

uint64_t sub_186A1F50C()
{
  return MEMORY[0x1F4184F98]();
}

uint64_t sub_186A1F51C()
{
  return MEMORY[0x1F4187FB8]();
}

uint64_t sub_186A1F52C()
{
  return MEMORY[0x1F4185048]();
}

uint64_t sub_186A1F53C()
{
  return MEMORY[0x1F4185050]();
}

uint64_t sub_186A1F54C()
{
  return MEMORY[0x1F4185068]();
}

uint64_t sub_186A1F55C()
{
  return MEMORY[0x1F41850A0]();
}

uint64_t sub_186A1F56C()
{
  return MEMORY[0x1F41851A0]();
}

uint64_t sub_186A1F57C()
{
  return MEMORY[0x1F41851A8]();
}

uint64_t sub_186A1F58C()
{
  return MEMORY[0x1F41851C8]();
}

uint64_t sub_186A1F59C()
{
  return MEMORY[0x1F41851D8]();
}

uint64_t sub_186A1F5AC()
{
  return MEMORY[0x1F41851E0]();
}

uint64_t sub_186A1F5BC()
{
  return MEMORY[0x1F41851F8]();
}

uint64_t sub_186A1F5CC()
{
  return MEMORY[0x1F4185238]();
}

uint64_t sub_186A1F5DC()
{
  return MEMORY[0x1F4185260]();
}

uint64_t sub_186A1F5EC()
{
  return MEMORY[0x1F4185270]();
}

uint64_t sub_186A1F5FC()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_186A1F60C()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_186A1F61C()
{
  return MEMORY[0x1F41852B0]();
}

uint64_t sub_186A1F62C()
{
  return MEMORY[0x1F41852C0]();
}

uint64_t sub_186A1F63C()
{
  return MEMORY[0x1F41852C8]();
}

uint64_t sub_186A1F64C()
{
  return MEMORY[0x1F41852D0]();
}

uint64_t sub_186A1F65C()
{
  return MEMORY[0x1F41852D8]();
}

uint64_t sub_186A1F66C()
{
  return MEMORY[0x1F41852E0]();
}

uint64_t sub_186A1F67C()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_186A1F68C()
{
  return MEMORY[0x1F4185358]();
}

uint64_t sub_186A1F69C()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_186A1F6AC()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_186A1F6BC()
{
  return MEMORY[0x1F4185378]();
}

uint64_t sub_186A1F6CC()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_186A1F6DC()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_186A1F6EC()
{
  return MEMORY[0x1F40E6DE0]();
}

uint64_t sub_186A1F6FC()
{
  return MEMORY[0x1F41853D0]();
}

uint64_t sub_186A1F70C()
{
  return MEMORY[0x1F41853E0]();
}

uint64_t sub_186A1F71C()
{
  return MEMORY[0x1F41853F8]();
}

uint64_t sub_186A1F72C()
{
  return MEMORY[0x1F4185450]();
}

uint64_t sub_186A1F73C()
{
  return MEMORY[0x1F41854B0]();
}

uint64_t sub_186A1F74C()
{
  return MEMORY[0x1F4185568]();
}

uint64_t sub_186A1F75C()
{
  return MEMORY[0x1F4185570]();
}

uint64_t sub_186A1F76C()
{
  return MEMORY[0x1F4185690]();
}

uint64_t sub_186A1F77C()
{
  return MEMORY[0x1F4185698]();
}

uint64_t sub_186A1F78C()
{
  return MEMORY[0x1F4185730]();
}

uint64_t sub_186A1F79C()
{
  return MEMORY[0x1F4185740]();
}

uint64_t sub_186A1F7AC()
{
  return MEMORY[0x1F4185748]();
}

uint64_t sub_186A1F7BC()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_186A1F7CC()
{
  return MEMORY[0x1F4185768]();
}

uint64_t sub_186A1F7EC()
{
  return MEMORY[0x1F41857F0]();
}

uint64_t sub_186A1F7FC()
{
  return MEMORY[0x1F41858D8]();
}

uint64_t sub_186A1F80C()
{
  return MEMORY[0x1F41859E0]();
}

uint64_t sub_186A1F81C()
{
  return MEMORY[0x1F41859E8]();
}

uint64_t sub_186A1F82C()
{
  return MEMORY[0x1F41859F0]();
}

uint64_t sub_186A1F83C()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t sub_186A1F84C()
{
  return MEMORY[0x1F4185A38]();
}

uint64_t sub_186A1F85C()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_186A1F86C()
{
  return MEMORY[0x1F4185A58]();
}

uint64_t sub_186A1F87C()
{
  return MEMORY[0x1F4185A78]();
}

uint64_t sub_186A1F88C()
{
  return MEMORY[0x1F4185A88]();
}

uint64_t sub_186A1F89C()
{
  return MEMORY[0x1F4185AF0]();
}

uint64_t sub_186A1F8AC()
{
  return MEMORY[0x1F4185B10]();
}

uint64_t sub_186A1F8BC()
{
  return MEMORY[0x1F4185B20]();
}

uint64_t sub_186A1F8CC()
{
  return MEMORY[0x1F4185B90]();
}

uint64_t sub_186A1F8DC()
{
  return MEMORY[0x1F4185CF8]();
}

uint64_t sub_186A1F8EC()
{
  return MEMORY[0x1F4185D20]();
}

uint64_t sub_186A1F8FC()
{
  return MEMORY[0x1F4185D40]();
}

uint64_t sub_186A1F90C()
{
  return MEMORY[0x1F4185D68]();
}

uint64_t sub_186A1F91C()
{
  return MEMORY[0x1F4185DC0]();
}

uint64_t sub_186A1F92C()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t sub_186A1F93C()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_186A1F94C()
{
  return MEMORY[0x1F4188170]();
}

uint64_t sub_186A1F95C()
{
  return MEMORY[0x1F4188188]();
}

uint64_t sub_186A1F96C()
{
  return MEMORY[0x1F4188190]();
}

uint64_t sub_186A1F97C()
{
  return MEMORY[0x1F40E6E30]();
}

uint64_t sub_186A1F98C()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_186A1F99C()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_186A1F9AC()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_186A1F9BC()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_186A1F9CC()
{
  return MEMORY[0x1F4185E98]();
}

uint64_t sub_186A1F9DC()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t sub_186A1F9EC()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_186A1F9FC()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_186A1FA0C()
{
  return MEMORY[0x1F4185ED0]();
}

uint64_t sub_186A1FA1C()
{
  return MEMORY[0x1F4185EE0]();
}

uint64_t sub_186A1FA2C()
{
  return MEMORY[0x1F4185EE8]();
}

uint64_t sub_186A1FA3C()
{
  return MEMORY[0x1F4185EF0]();
}

uint64_t sub_186A1FA4C()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_186A1FA5C()
{
  return MEMORY[0x1F4185F00]();
}

uint64_t sub_186A1FA6C()
{
  return MEMORY[0x1F4185F28]();
}

uint64_t sub_186A1FA7C()
{
  return MEMORY[0x1F4185F38]();
}

uint64_t sub_186A1FA8C()
{
  return MEMORY[0x1F4185F58]();
}

uint64_t sub_186A1FA9C()
{
  return MEMORY[0x1F4185F68]();
}

uint64_t sub_186A1FABC()
{
  return MEMORY[0x1F40E6EE0]();
}

uint64_t sub_186A1FACC()
{
  return MEMORY[0x1F40E6EF0]();
}

uint64_t sub_186A1FAEC()
{
  return MEMORY[0x1F4185FB0]();
}

uint64_t sub_186A1FAFC()
{
  return MEMORY[0x1F4185FB8]();
}

uint64_t sub_186A1FB0C()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t sub_186A1FB1C()
{
  return MEMORY[0x1F4185FD8]();
}

uint64_t sub_186A1FB2C()
{
  return MEMORY[0x1F4185FE0]();
}

uint64_t sub_186A1FB3C()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t sub_186A1FB4C()
{
  return MEMORY[0x1F4186078]();
}

uint64_t sub_186A1FB5C()
{
  return MEMORY[0x1F41860D8]();
}

uint64_t sub_186A1FB6C()
{
  return MEMORY[0x1F41860E8]();
}

uint64_t sub_186A1FB7C()
{
  return MEMORY[0x1F41860F0]();
}

uint64_t sub_186A1FB8C()
{
  return MEMORY[0x1F4186160]();
}

uint64_t sub_186A1FB9C()
{
  return MEMORY[0x1F41861A0]();
}

uint64_t sub_186A1FBAC()
{
  return MEMORY[0x1F41861A8]();
}

uint64_t sub_186A1FBDC()
{
  return MEMORY[0x1F4186318]();
}

uint64_t ADClientAddValueForScalarKey()
{
  return MEMORY[0x1F41071E0]();
}

uint64_t ADClientPushValueForDistributionKey()
{
  return MEMORY[0x1F4107208]();
}

uint64_t AXAccessibilityBundlesDirectory()
{
  return MEMORY[0x1F4105E28]();
}

uint64_t AXDisallowsUIBasedAccessibilityFeatures()
{
  return MEMORY[0x1F41787E0]();
}

NSString *__cdecl AXNameFromColor(CGColorRef color)
{
  return (NSString *)MEMORY[0x1F40D31A0](color);
}

uint64_t AXPrefersNonBlinkingTextInsertionIndicator()
{
  return MEMORY[0x1F40D31A8]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1F41138A0]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

uint64_t BKSDisplayServicesStart()
{
  return MEMORY[0x1F410BE40]();
}

uint64_t BKSHIDEventContainsUpdates()
{
  return MEMORY[0x1F410BE68]();
}

uint64_t BKSHIDEventDigitizerGetTouchLocus()
{
  return MEMORY[0x1F410BE70]();
}

uint64_t BKSHIDEventEnumerateUpdatesWithBlock()
{
  return MEMORY[0x1F410BE78]();
}

uint64_t BKSHIDEventGetBaseAttributes()
{
  return MEMORY[0x1F410BE80]();
}

uint64_t BKSHIDEventGetDigitizerAttributes()
{
  return MEMORY[0x1F410BE90]();
}

uint64_t BKSHIDEventGetKeyboardAttributes()
{
  return MEMORY[0x1F410BE98]();
}

uint64_t BKSHIDEventGetPointerAttributes()
{
  return MEMORY[0x1F410BEA0]();
}

uint64_t BKSHIDEventGetRemoteTimestamp()
{
  return MEMORY[0x1F410BEB0]();
}

uint64_t BKSHIDEventRegisterEventCallbackOnRunLoop()
{
  return MEMORY[0x1F410BED0]();
}

uint64_t BKSHIDEventSetAttributes()
{
  return MEMORY[0x1F410BEE8]();
}

uint64_t BKSHIDEventSetDigitizerAttributes()
{
  return MEMORY[0x1F410BEF0]();
}

uint64_t BKSHIDEventSetDigitizerInfo()
{
  return MEMORY[0x1F410BEF8]();
}

uint64_t BKSHIDEventSetDigitizerInfoWithSubEventInfos()
{
  return MEMORY[0x1F410BF00]();
}

uint64_t BKSHIDEventSetRemoteTimestamp()
{
  return MEMORY[0x1F410BF08]();
}

uint64_t BKSHIDKeyboardGetDeviceProperties()
{
  return MEMORY[0x1F410BF28]();
}

uint64_t BKSHIDKeyboardIsCapsLockLightOn()
{
  return MEMORY[0x1F410BF30]();
}

uint64_t BKSHIDKeyboardSetCapsLockActive()
{
  return MEMORY[0x1F410BF38]();
}

uint64_t BKSHIDKeyboardSetLayout()
{
  return MEMORY[0x1F410BF40]();
}

uint64_t BKSHIDServicesCapsLockKeyHasLanguageSwitchLabel()
{
  return MEMORY[0x1F410BF68]();
}

uint64_t BKSHIDServicesClaimGenericGestureFocus()
{
  return MEMORY[0x1F410BF70]();
}

uint64_t BKSHIDServicesGetCALayerTransform()
{
  return MEMORY[0x1F410BF80]();
}

uint64_t BKSHIDServicesGetHardwareKeyboardLanguage()
{
  return MEMORY[0x1F410BF88]();
}

uint64_t BKSHIDServicesGetHumanPresenceStatus()
{
  return MEMORY[0x1F410BF90]();
}

uint64_t BKSHIDServicesIsCapsLockLightOn()
{
  return MEMORY[0x1F410BFA0]();
}

uint64_t BKSHIDServicesRequestHapticFeedback()
{
  return MEMORY[0x1F410BFE0]();
}

uint64_t BKSHIDServicesSetCapsLockRomanSwitchMode()
{
  return MEMORY[0x1F410C008]();
}

uint64_t BKSProcessAssertionBackgroundTimeRemaining()
{
  return MEMORY[0x1F410ABC8]();
}

uint64_t BKSTouchDeliveryPolicyServerGetProxyWithErrorHandler()
{
  return MEMORY[0x1F410C050]();
}

uint64_t BLSBacklightStateForVisuaState()
{
  return MEMORY[0x1F410C0C0]();
}

uint64_t BSAbsoluteMachTimeNow()
{
  return MEMORY[0x1F410C138]();
}

uint64_t BSCreateDeserializedBSXPCEncodableObjectFromXPCDictionary()
{
  return MEMORY[0x1F410C1C0]();
}

uint64_t BSCreateDeserializedBSXPCEncodableObjectFromXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C1C8]();
}

uint64_t BSCreateDeserializedStringFromXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C1D8]();
}

uint64_t BSCreateSerializedBSXPCEncodableObject()
{
  return MEMORY[0x1F410C1E0]();
}

uint64_t BSDegreesToRadians()
{
  return MEMORY[0x1F410C1F8]();
}

uint64_t BSDeserializeBSXPCEncodableObjectFromXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C208]();
}

uint64_t BSDeserializeCGRectFromXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C228]();
}

uint64_t BSDeserializeDataFromXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C238]();
}

uint64_t BSDeserializeNSSecureEncodableObjectOfClassFromXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C248]();
}

uint64_t BSDeserializeSetOfBSXPCEncodableObjectsFromXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C250]();
}

uint64_t BSDeserializeStringFromXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C258]();
}

uint64_t BSDeviceOrientationDescription()
{
  return MEMORY[0x1F410C260]();
}

uint64_t BSDispatchMain()
{
  return MEMORY[0x1F410C270]();
}

uint64_t BSDispatchQueueAssertMain()
{
  return MEMORY[0x1F410C288]();
}

uint64_t BSDispatchQueueCreateWithQualityOfService()
{
  return MEMORY[0x1F410C2B8]();
}

uint64_t BSEqualBools()
{
  return MEMORY[0x1F410C2D0]();
}

uint64_t BSEqualDictionaries()
{
  return MEMORY[0x1F410C2D8]();
}

uint64_t BSEqualObjects()
{
  return MEMORY[0x1F410C2E8]();
}

uint64_t BSEqualSets()
{
  return MEMORY[0x1F410C2F0]();
}

uint64_t BSEqualStrings()
{
  return MEMORY[0x1F410C2F8]();
}

uint64_t BSFloatEqualToFloat()
{
  return MEMORY[0x1F410C328]();
}

uint64_t BSFloatGreaterThanOrEqualToFloat()
{
  return MEMORY[0x1F410C340]();
}

uint64_t BSFloatIsOne()
{
  return MEMORY[0x1F410C348]();
}

uint64_t BSFloatLessThanOrEqualToFloat()
{
  return MEMORY[0x1F410C360]();
}

uint64_t BSInterfaceOrientationDescription()
{
  return MEMORY[0x1F410C398]();
}

uint64_t BSInterfaceOrientationIsValid()
{
  return MEMORY[0x1F410C3B0]();
}

uint64_t BSInterfaceOrientationMaskDescription()
{
  return MEMORY[0x1F410C3C0]();
}

uint64_t BSLogAddStateCaptureBlockForUserRequestsOnlyWithTitle()
{
  return MEMORY[0x1F410C418]();
}

uint64_t BSLogAddStateCaptureBlockWithTitle()
{
  return MEMORY[0x1F410C420]();
}

uint64_t BSLogCommon()
{
  return MEMORY[0x1F410C428]();
}

uint64_t BSMachSendRightRetain()
{
  return MEMORY[0x1F410C460]();
}

uint64_t BSNSStringFromCGAffineTransform()
{
  return MEMORY[0x1F410C478]();
}

uint64_t BSRunLoopPerformAfterCACommit()
{
  return MEMORY[0x1F410C550]();
}

uint64_t BSRunLoopPerformRelativeToCACommit()
{
  return MEMORY[0x1F410C558]();
}

uint64_t BSSerializeBSXPCEncodableObjectToXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C578]();
}

uint64_t BSSerializeCGRectToXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C598]();
}

uint64_t BSSerializeDataToXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C5A8]();
}

uint64_t BSSerializeNSSecureEncodableObjectToXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C5B8]();
}

uint64_t BSSerializeStringToXPCDictionaryWithKey()
{
  return MEMORY[0x1F410C5C8]();
}

uint64_t BSSetMainThreadPriorityFixedForUI()
{
  return MEMORY[0x1F410C5D0]();
}

uint64_t BSSettingFlagForBool()
{
  return MEMORY[0x1F410C5E0]();
}

uint64_t BSSettingFlagIsYes()
{
  return MEMORY[0x1F410C5F8]();
}

uint64_t BSSettingForKey()
{
  return MEMORY[0x1F410C600]();
}

uint64_t BSStringFromBOOL()
{
  return MEMORY[0x1F410C650]();
}

uint64_t CABackingStoreCollectWithCompletionHandler()
{
  return MEMORY[0x1F40F4A40]();
}

uint64_t CAColorMatrixConcat()
{
  return MEMORY[0x1F40F4A48]();
}

uint64_t CAColorMatrixMakeBrightness()
{
  return MEMORY[0x1F40F4A50]();
}

uint64_t CAColorMatrixMakeColorSourceOver()
{
  return MEMORY[0x1F40F4A58]();
}

uint64_t CAColorMatrixMakeMultiplyColor()
{
  return MEMORY[0x1F40F4A68]();
}

uint64_t CACornerRadiiEqualToRadii()
{
  return MEMORY[0x1F40F4A88]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  MEMORY[0x1F40F4A90]();
  return result;
}

uint64_t CADisplayGetCurrentHeadroom()
{
  return MEMORY[0x1F40F4AA0]();
}

uint64_t CADisplayGetPotentialHeadroom()
{
  return MEMORY[0x1F40F4AA8]();
}

uint64_t CAEncodeLayerTree()
{
  return MEMORY[0x1F40F4AB0]();
}

uint64_t CAEncodeLayerTreeToFile()
{
  return MEMORY[0x1F40F4AB8]();
}

BOOL CAFrameRateRangeIsEqualToRange(CAFrameRateRange range, CAFrameRateRange other)
{
  return MEMORY[0x1F40F4AC0](*(__n128 *)&range.minimum, *(__n128 *)&range.maximum, *(__n128 *)&range.preferred, *(__n128 *)&other.minimum, *(__n128 *)&other.maximum, *(__n128 *)&other.preferred);
}

CAFrameRateRange CAFrameRateRangeMake(float minimum, float maximum, float preferred)
{
  MEMORY[0x1F40F4AC8](minimum, maximum, preferred);
  result.preferred = v5;
  result.maximuCGAffineTransform m = v4;
  result.minimuCGAffineTransform m = v3;
  return result;
}

uint64_t CAGetCurrentImageBytes()
{
  return MEMORY[0x1F40F4AD0]();
}

uint64_t CAGetMaximumImageBytes()
{
  return MEMORY[0x1F40F4AD8]();
}

uint64_t CALayerFrameAffineTransform()
{
  return MEMORY[0x1F40F4BD0]();
}

uint64_t CALayerGetContext()
{
  return MEMORY[0x1F40F4BD8]();
}

uint64_t CALayerGetDelegate()
{
  return MEMORY[0x1F40F4BE0]();
}

uint64_t CALayerGetRenderId()
{
  return MEMORY[0x1F40F4BE8]();
}

uint64_t CALayerGetSuperlayer()
{
  return MEMORY[0x1F40F4BF0]();
}

uint64_t CALayerMapGeometry()
{
  return MEMORY[0x1F40F4BF8]();
}

uint64_t CAPoint3DEqualToPoint()
{
  return MEMORY[0x1F40F4C20]();
}

uint64_t CARenderRelease()
{
  return MEMORY[0x1F40F4C38]();
}

uint64_t CARenderRetain()
{
  return MEMORY[0x1F40F4C40]();
}

uint64_t CARenderServerGetDirtyFrameCount()
{
  return MEMORY[0x1F40F4C58]();
}

uint64_t CARenderServerGetDirtyFrameCountByIndex()
{
  return MEMORY[0x1F40F4C60]();
}

uint64_t CARenderServerRenderLayerWithTransform()
{
  return MEMORY[0x1F40F4CA0]();
}

uint64_t CARenderServerSnapshot()
{
  return MEMORY[0x1F40F4CC0]();
}

CATransform3D *__cdecl CATransform3DConcat(CATransform3D *__return_ptr retstr, CATransform3D *a, CATransform3D *b)
{
  return (CATransform3D *)MEMORY[0x1F40F4CD8](retstr, a, b);
}

BOOL CATransform3DEqualToTransform(CATransform3D *a, CATransform3D *b)
{
  return MEMORY[0x1F40F4CE0](a, b);
}

CGAffineTransform *__cdecl CATransform3DGetAffineTransform(CGAffineTransform *__return_ptr retstr, CATransform3D *t)
{
  return (CGAffineTransform *)MEMORY[0x1F40F4CE8](retstr, t);
}

uint64_t CATransform3DGetDecomposition_()
{
  return MEMORY[0x1F40F4CF0]();
}

CATransform3D *__cdecl CATransform3DInvert(CATransform3D *__return_ptr retstr, CATransform3D *t)
{
  return (CATransform3D *)MEMORY[0x1F40F4CF8](retstr, t);
}

BOOL CATransform3DIsAffine(CATransform3D *t)
{
  return MEMORY[0x1F40F4D00](t);
}

BOOL CATransform3DIsIdentity(CATransform3D *t)
{
  return MEMORY[0x1F40F4D08](t);
}

CATransform3D *__cdecl CATransform3DMakeAffineTransform(CATransform3D *__return_ptr retstr, CGAffineTransform *m)
{
  return (CATransform3D *)MEMORY[0x1F40F4D10](retstr, m);
}

CATransform3D *__cdecl CATransform3DMakeRotation(CATransform3D *__return_ptr retstr, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return (CATransform3D *)MEMORY[0x1F40F4D18](retstr, angle, x, y, z);
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return (CATransform3D *)MEMORY[0x1F40F4D20](retstr, sx, sy, sz);
}

CATransform3D *__cdecl CATransform3DMakeTranslation(CATransform3D *__return_ptr retstr, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return (CATransform3D *)MEMORY[0x1F40F4D30](retstr, tx, ty, tz);
}

CATransform3D *__cdecl CATransform3DRotate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return (CATransform3D *)MEMORY[0x1F40F4D48](retstr, t, angle, x, y, z);
}

CATransform3D *__cdecl CATransform3DScale(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return (CATransform3D *)MEMORY[0x1F40F4D58](retstr, t, sx, sy, sz);
}

uint64_t CATransform3DSetDecomposition_()
{
  return MEMORY[0x1F40F4D60]();
}

CATransform3D *__cdecl CATransform3DTranslate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return (CATransform3D *)MEMORY[0x1F40F4D68](retstr, t, tx, ty, tz);
}

uint64_t CA_CGPointApplyTransform()
{
  return MEMORY[0x1F40F4DE0]();
}

uint64_t CA_CGRectApplyTransform()
{
  return MEMORY[0x1F40F4DE8]();
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return MEMORY[0x1F40C96C8](bytes, count);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9738](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9740](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9748](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  uint64_t v2 = MEMORY[0x1F40D70D8](tz, at);
  result.second = v3;
  result.year = v2;
  result.month = BYTE4(v2);
  result.dadouble y = BYTE5(v2);
  result.hour = BYTE6(v2);
  result.minute = HIBYTE(v2);
  return result;
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7110]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

CFIndex CFArrayGetLastIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71D0](theArray, range.location, range.length, value);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFDictionaryRef CFBundleCopyInfoDictionaryForURL(CFURLRef url)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7478](url);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7490](locArray, prefArray);
}

Boolean CFCalendarAddComponents(CFCalendarRef calendar, CFAbsoluteTime *at, CFOptionFlags options, const char *componentDesc, ...)
{
  return MEMORY[0x1F40D7670](calendar, at, options, componentDesc);
}

Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...)
{
  return MEMORY[0x1F40D7678](calendar, at, componentDesc);
}

CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier)
{
  return (CFCalendarRef)MEMORY[0x1F40D7690](allocator, identifier);
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  va_start(va, componentDesc);
  uint64_t v3 = va_arg(va, void);
  return MEMORY[0x1F40D7698](calendar, v3, at);
}

void CFCalendarSetTimeZone(CFCalendarRef calendar, CFTimeZoneRef tz)
{
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7720](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7738](alloc, theString);
}

Boolean CFCharacterSetIsSupersetOfSet(CFCharacterSetRef theSet, CFCharacterSetRef theOtherset)
{
  return MEMORY[0x1F40D7780](theSet, theOtherset);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x1F40D77D0](type_id);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

CFTypeRef CFDateFormatterCopyProperty(CFDateFormatterRef formatter, CFDateFormatterKey key)
{
  return (CFTypeRef)MEMORY[0x1F40D78A8](formatter, key);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1F40D78B0](allocator, locale, dateStyle, timeStyle);
}

uint64_t CFDateFormatterCreateDateFormatsFromTemplates()
{
  return MEMORY[0x1F40D78C0]();
}

CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(CFAllocatorRef allocator, CFISO8601DateFormatOptions formatOptions)
{
  return (CFDateFormatterRef)MEMORY[0x1F40D78D0](allocator, formatOptions);
}

CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at)
{
  return (CFStringRef)MEMORY[0x1F40D78D8](allocator, formatter, at);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x1F40D78E0](allocator, formatter, date);
}

CFStringRef CFDateFormatterGetFormat(CFDateFormatterRef formatter)
{
  return (CFStringRef)MEMORY[0x1F40D78F8](formatter);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

void CFDateFormatterSetProperty(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value)
{
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  MEMORY[0x1F40D7928](theDate);
  return result;
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFAbsoluteTime CFGregorianDateGetAbsoluteTime(CFGregorianDate gdate, CFTimeZoneRef tz)
{
  MEMORY[0x1F40D7B90](*(void *)&gdate.year, *(void *)&gdate.second, tz);
  return result;
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1F40D7BA0](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

CFStringRef CFLocaleCopyDisplayNameForPropertyValue(CFLocaleRef displayLocale, CFLocaleKey key, CFStringRef value)
{
  return (CFStringRef)MEMORY[0x1F40D7BC0](displayLocale, key, value);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7BE8](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7C20](locale);
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x1F40D7C48](locale, key);
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D7C60](allocator, port, order);
}

CFMachPortRef CFMachPortCreateWithPort(CFAllocatorRef allocator, mach_port_t portNum, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return (CFMachPortRef)MEMORY[0x1F40D7C68](allocator, *(void *)&portNum, callout, context, shouldFreeInfo);
}

void CFMachPortInvalidate(CFMachPortRef port)
{
}

CFMessagePortRef CFMessagePortCreateRemote(CFAllocatorRef allocator, CFStringRef name)
{
  return (CFMessagePortRef)MEMORY[0x1F40D7CB8](allocator, name);
}

Boolean CFMessagePortIsValid(CFMessagePortRef ms)
{
  return MEMORY[0x1F40D7CD8](ms);
}

SInt32 CFMessagePortSendRequest(CFMessagePortRef remote, SInt32 msgid, CFDataRef data, CFTimeInterval sendTimeout, CFTimeInterval rcvTimeout, CFStringRef replyMode, CFDataRef *returnData)
{
  return MEMORY[0x1F40D7CE0](remote, *(void *)&msgid, data, replyMode, returnData, sendTimeout, rcvTimeout);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E98](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F28](allocator, propertyList, mutabilityOption);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddCommonMode(CFRunLoopRef rl, CFRunLoopMode mode)
{
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

Boolean CFRunLoopContainsObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
  return MEMORY[0x1F40D8080](rl, observer, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

CFRunLoopObserverRef CFRunLoopObserverCreate(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, CFRunLoopObserverCallBack callout, CFRunLoopObserverContext *context)
{
  return (CFRunLoopObserverRef)MEMORY[0x1F40D80D8](allocator, activities, repeats, order, callout, context);
}

CFRunLoopObserverRef CFRunLoopObserverCreateWithHandler(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, void *block)
{
  return (CFRunLoopObserverRef)MEMORY[0x1F40D80E0](allocator, activities, repeats, order, block);
}

void CFRunLoopObserverGetContext(CFRunLoopObserverRef observer, CFRunLoopObserverContext *context)
{
}

void CFRunLoopObserverInvalidate(CFRunLoopObserverRef observer)
{
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRemoveObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1F40D8128](mode, returnAfterSourceHandled, seconds);
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D8140](allocator, order, context);
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x1F40D8180](allocator, flags, order, callout, context, fireDate, interval);
}

CFRunLoopTimerRef CFRunLoopTimerCreateWithHandler(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, void *block)
{
  return (CFRunLoopTimerRef)MEMORY[0x1F40D8188](allocator, flags, order, block, fireDate, interval);
}

CFAbsoluteTime CFRunLoopTimerGetNextFireDate(CFRunLoopTimerRef timer)
{
  MEMORY[0x1F40D81A8](timer);
  return result;
}

void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer)
{
}

void CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer, CFAbsoluteTime fireDate)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1F40D8238](theSet, value);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.locatiouint64_t n = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D84D0](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84D8](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84E0](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

void CFStringFold(CFMutableStringRef theString, CFStringCompareFlags theFlags, CFLocaleRef theLocale)
{
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  MEMORY[0x1F40D8548](str);
  return result;
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex)
{
  CFIndex v2 = MEMORY[0x1F40D85D8](theString, theIndex);
  result.length = v3;
  result.locatiouint64_t n = v2;
  return result;
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1F40D8680](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1F40D8698](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1 = MEMORY[0x1F40D86A8](tokenizer);
  result.length = v2;
  result.locatiouint64_t n = v1;
  return result;
}

CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer, CFIndex index)
{
  return MEMORY[0x1F40D86B0](tokenizer, index);
}

void CFStringTokenizerSetString(CFStringTokenizerRef tokenizer, CFStringRef string, CFRange range)
{
}

Boolean CFStringTransform(CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse)
{
  return MEMORY[0x1F40D86C0](string, range, transform, reverse);
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D86F8]();
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

uint64_t CFUniCharIsMemberOf()
{
  return MEMORY[0x1F40D8A10]();
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return MEMORY[0x1F40D8A20](userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1F40D8A28](allocator, flags, error, dictionary, timeout);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D8A40](allocator, userNotification, callout, order);
}

SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1F40D8A48](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, alternateButtonTitle, timeout);
}

CFDictionaryRef CFUserNotificationGetResponseDictionary(CFUserNotificationRef userNotification)
{
  return (CFDictionaryRef)MEMORY[0x1F40D8A58](userNotification);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1F40D9790](retstr, t1, t2);
}

CGAffineTransformComponents *__cdecl CGAffineTransformDecompose(CGAffineTransformComponents *__return_ptr retstr, CGAffineTransform *transform)
{
  return (CGAffineTransformComponents *)MEMORY[0x1F40D9798](retstr, transform);
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return MEMORY[0x1F40D97A0](t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97A8](retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x1F40D97B0](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97C8](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D0](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D8](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformMakeWithComponents(CGAffineTransform *__return_ptr retstr, CGAffineTransformComponents *components)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97E0](retstr, components);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97E8](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F0](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

uint64_t CGBitmapContextCreateWithCallbacks()
{
  return MEMORY[0x1F40D9828]();
}

size_t CGBitmapContextGetBytesPerRow(CGContextRef context)
{
  return MEMORY[0x1F40D9858](context);
}

CGColorSpaceRef CGBitmapContextGetColorSpace(CGContextRef context)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9860](context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return (void *)MEMORY[0x1F40D9868](context);
}

size_t CGBitmapContextGetHeight(CGContextRef context)
{
  return MEMORY[0x1F40D9870](context);
}

size_t CGBitmapContextGetWidth(CGContextRef context)
{
  return MEMORY[0x1F40D9878](context);
}

uint64_t CGBitmapGetAlignedBytesPerRow()
{
  return MEMORY[0x1F40D9890]();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1F40D9970](space, components);
}

CGColorRef CGColorCreateCopyWithAlpha(CGColorRef color, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1F40D9988](color, alpha);
}

CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1F40D9998](gray, alpha);
}

CGColorRef CGColorCreateSRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1F40D99B0](red, green, blue, alpha);
}

CGColorRef CGColorCreateWithPattern(CGColorSpaceRef space, CGPatternRef pattern, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1F40D99B8](space, pattern, components);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return MEMORY[0x1F40D99D0](color1, color2);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  MEMORY[0x1F40D99F0](color);
  return result;
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D99F8](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x1F40D9A00](color);
}

CGColorRef CGColorGetConstantColor(CFStringRef colorName)
{
  return (CGColorRef)MEMORY[0x1F40D9A08](colorName);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x1F40D9A18](color);
}

CGPatternRef CGColorGetPattern(CGColorRef color)
{
  return (CGPatternRef)MEMORY[0x1F40D9A20](color);
}

CFTypeID CGColorGetTypeID(void)
{
  return MEMORY[0x1F40D9A30]();
}

void CGColorRelease(CGColorRef color)
{
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x1F40D9A60](color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceCMYK(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AE8]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF0]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF8]();
}

CGColorSpaceRef CGColorSpaceCreatePattern(CGColorSpaceRef baseSpace)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B38](baseSpace);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B60](name);
}

CGColorSpaceRef CGColorSpaceCreateWithPropertyList(CFPropertyListRef plist)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B70](plist);
}

uint64_t CGColorSpaceEqualToColorSpace()
{
  return MEMORY[0x1F40D9B78]();
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9BE0](space);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1F40D9BE8](space);
}

size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9BF0](space);
}

BOOL CGColorSpaceIsHLGBased(CGColorSpaceRef s)
{
  return MEMORY[0x1F40D9C20](s);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9C50](space);
}

BOOL CGColorSpaceSupportsOutput(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9C58](space);
}

BOOL CGColorSpaceUsesExtendedRange(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9C60](space);
}

BOOL CGColorSpaceUsesITUR_2100TF(CGColorSpaceRef a1)
{
  return MEMORY[0x1F40D9C68](a1);
}

uint64_t CGColorTransformConvertColor()
{
  return MEMORY[0x1F40D9C90]();
}

uint64_t CGColorTransformConvertColorComponents()
{
  return MEMORY[0x1F40D9C98]();
}

uint64_t CGColorTransformRelease()
{
  return MEMORY[0x1F40D9CB8]();
}

void CGContextAddArc(CGContextRef c, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, int clockwise)
{
}

void CGContextAddEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextAddQuadCurveToPoint(CGContextRef c, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
}

void CGContextAddRect(CGContextRef c, CGRect rect)
{
}

void CGContextBeginPath(CGContextRef c)
{
}

void CGContextBeginTransparencyLayer(CGContextRef c, CFDictionaryRef auxiliaryInfo)
{
}

void CGContextBeginTransparencyLayerWithRect(CGContextRef c, CGRect rect, CFDictionaryRef auxInfo)
{
}

uint64_t CGContextClear()
{
  return MEMORY[0x1F40D9D30]();
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
}

void CGContextClip(CGContextRef c)
{
}

void CGContextClipToMask(CGContextRef c, CGRect rect, CGImageRef mask)
{
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
}

void CGContextClosePath(CGContextRef c)
{
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextDrawLinearGradient(CGContextRef c, CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options)
{
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
}

uint64_t CGContextDrawPDFPageWithProgressCallback()
{
  return MEMORY[0x1F40D9EC8]();
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
}

void CGContextDrawRadialGradient(CGContextRef c, CGGradientRef gradient, CGPoint startCenter, CGFloat startRadius, CGPoint endCenter, CGFloat endRadius, CGGradientDrawingOptions options)
{
}

uint64_t CGContextDrawSVGDocument()
{
  return MEMORY[0x1F4114E48]();
}

void CGContextDrawShading(CGContextRef c, CGShadingRef shading)
{
}

void CGContextDrawTiledImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextEOClip(CGContextRef c)
{
}

void CGContextEOFillPath(CGContextRef c)
{
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextFillPath(CGContextRef c)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextFlush(CGContextRef c)
{
}

uint64_t CGContextGetAlpha()
{
  return MEMORY[0x1F40D9F50]();
}

uint64_t CGContextGetBlendMode()
{
  return MEMORY[0x1F40D9F60]();
}

CGAffineTransform *__cdecl CGContextGetCTM(CGAffineTransform *__return_ptr retstr, CGContextRef c)
{
  return (CGAffineTransform *)MEMORY[0x1F40D9F68](retstr, c);
}

CGRect CGContextGetClipBoundingBox(CGContextRef c)
{
  MEMORY[0x1F40D9F78](c);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

uint64_t CGContextGetCompositeOperation()
{
  return MEMORY[0x1F40D9F80]();
}

uint64_t CGContextGetFillColorAsColor()
{
  return MEMORY[0x1F40D9F98]();
}

uint64_t CGContextGetLineWidth()
{
  return MEMORY[0x1F40D9FD8]();
}

uint64_t CGContextGetType()
{
  return MEMORY[0x1F40DA030]();
}

BOOL CGContextIsPathEmpty(CGContextRef c)
{
  return MEMORY[0x1F40DA040](c);
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextResetClip(CGContextRef c)
{
}

uint64_t CGContextResetState()
{
  return MEMORY[0x1F40DA080]();
}

void CGContextRestoreGState(CGContextRef c)
{
}

CGContextRef CGContextRetain(CGContextRef c)
{
  return (CGContextRef)MEMORY[0x1F40DA090](c);
}

void CGContextRotateCTM(CGContextRef c, CGFloat angle)
{
}

void CGContextSaveGState(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
}

uint64_t CGContextSetBaseCTM()
{
  return MEMORY[0x1F40DA0D8]();
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
}

uint64_t CGContextSetCTM()
{
  return MEMORY[0x1F40DA0F0]();
}

uint64_t CGContextSetCompositeOperation()
{
  return MEMORY[0x1F40DA100]();
}

void CGContextSetFillColor(CGContextRef c, const CGFloat *components)
{
}

void CGContextSetFillColorSpace(CGContextRef c, CGColorSpaceRef space)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetFillPattern(CGContextRef c, CGPatternRef pattern, const CGFloat *components)
{
}

void CGContextSetFlatness(CGContextRef c, CGFloat flatness)
{
}

void CGContextSetFont(CGContextRef c, CGFontRef font)
{
}

void CGContextSetFontSize(CGContextRef c, CGFloat size)
{
}

void CGContextSetGrayFillColor(CGContextRef c, CGFloat gray, CGFloat alpha)
{
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
}

void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
{
}

void CGContextSetLineDash(CGContextRef c, CGFloat phase, const CGFloat *lengths, size_t count)
{
}

void CGContextSetLineJoin(CGContextRef c, CGLineJoin join)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetMiterLimit(CGContextRef c, CGFloat limit)
{
}

void CGContextSetPatternPhase(CGContextRef c, CGSize phase)
{
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetShadowWithColor(CGContextRef c, CGSize offset, CGFloat blur, CGColorRef color)
{
}

void CGContextSetStrokeColorSpace(CGContextRef c, CGColorSpaceRef space)
{
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetTextMatrix(CGContextRef c, CGAffineTransform *t)
{
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextShowGlyphsAtPoint(CGContextRef c, CGFloat x, CGFloat y, const CGGlyph *glyphs, size_t count)
{
}

void CGContextStrokeEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
}

void CGContextStrokeRectWithWidth(CGContextRef c, CGRect rect, CGFloat width)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CGDataConsumerRef CGDataConsumerCreateWithCFData(CFMutableDataRef data)
{
  return (CGDataConsumerRef)MEMORY[0x1F40DA2C0](data);
}

void CGDataConsumerRelease(CGDataConsumerRef consumer)
{
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1F40DA2E8](provider);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA300](data);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA310](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

uint64_t CGFloatIsValid()
{
  return MEMORY[0x1F40DA3A0]();
}

CFStringRef CGFontCopyPostScriptName(CGFontRef font)
{
  return (CFStringRef)MEMORY[0x1F40DA3E8](font);
}

CGFunctionRef CGFunctionCreate(void *info, size_t domainDimension, const CGFloat *domain, size_t rangeDimension, const CGFloat *range, const CGFunctionCallbacks *callbacks)
{
  return (CGFunctionRef)MEMORY[0x1F40DA5E0](info, domainDimension, domain, rangeDimension, range, callbacks);
}

void CGFunctionRelease(CGFunctionRef function)
{
}

CGGradientRef CGGradientCreateWithColorComponents(CGColorSpaceRef space, const CGFloat *components, const CGFloat *locations, size_t count)
{
  return (CGGradientRef)MEMORY[0x1F40DA768](space, components, locations, count);
}

CGGradientRef CGGradientCreateWithColors(CGColorSpaceRef space, CFArrayRef colors, const CGFloat *locations)
{
  return (CGGradientRef)MEMORY[0x1F40DA778](space, colors, locations);
}

void CGGradientRelease(CGGradientRef gradient)
{
}

CGGradientRef CGGradientRetain(CGGradientRef gradient)
{
  return (CGGradientRef)MEMORY[0x1F40DA7B0](gradient);
}

uint64_t CGIOSurfaceContextCreate()
{
  return MEMORY[0x1F40DA7C0]();
}

uint64_t CGIOSurfaceContextGetColorSpace()
{
  return MEMORY[0x1F40DA7D8]();
}

uint64_t CGImageCopySourceData()
{
  return MEMORY[0x1F40E9698]();
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA868](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(void *)&bitmapInfo, provider);
}

uint64_t CGImageCreateFromIOSurface()
{
  return MEMORY[0x1F40E96E0]();
}

uint64_t CGImageCreateThumb()
{
  return MEMORY[0x1F40E96F8]();
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1F40DA890](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA8B8](source, decode, shouldInterpolate, *(void *)&intent);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1F40E9738](data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1F40E9758](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1F40E9760](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA8D0](image);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA8D8](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1F40DA8E0](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x1F40DA8E8](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1F40DA8F0](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1F40DA908](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA920](image);
}

const CGFloat *__cdecl CGImageGetDecode(CGImageRef image)
{
  return (const CGFloat *)MEMORY[0x1F40DA928](image);
}

uint64_t CGImageGetHeadroom()
{
  return MEMORY[0x1F40DA938]();
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

uint64_t CGImageGetImageSource()
{
  return MEMORY[0x1F40E9780]();
}

uint64_t CGImageGetProperty()
{
  return MEMORY[0x1F40DA980]();
}

CGColorRenderingIntent CGImageGetRenderingIntent(CGImageRef image)
{
  return MEMORY[0x1F40DA988](image);
}

CFTypeID CGImageGetTypeID(void)
{
  return MEMORY[0x1F40DA9A8]();
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

uint64_t CGImageHasAlpha()
{
  return MEMORY[0x1F40DA9C0]();
}

BOOL CGImageIsMask(CGImageRef image)
{
  return MEMORY[0x1F40DA9D0](image);
}

CGImageRef CGImageMaskCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate)
{
  return (CGImageRef)MEMORY[0x1F40DA9E8](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, provider, decode, shouldInterpolate);
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1F40DAA98](image);
}

uint64_t CGImageSetProperty()
{
  return MEMORY[0x1F40DAAB0]();
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9938](isrc, index, options);
}

CFArrayRef CGImageSourceCopyTypeIdentifiers(void)
{
  return (CFArrayRef)MEMORY[0x1F40E9958]();
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9968](isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9988](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E9998](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E99C8](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x1F40E99F8](isrc);
}

uint64_t CGImageSourceGetTypeWithData()
{
  return MEMORY[0x1F40E9A30]();
}

uint64_t CGInitializeImageIO()
{
  return MEMORY[0x1F40E9A80]();
}

uint64_t CGMetalContextGetColorSpace()
{
  return MEMORY[0x1F40DAB38]();
}

uint64_t CGPDFArchiveAddSelection()
{
  return MEMORY[0x1F40DAB48]();
}

uint64_t CGPDFArchiveCreate()
{
  return MEMORY[0x1F40DAB50]();
}

uint64_t CGPDFArchiveGetHTML()
{
  return MEMORY[0x1F40DAB58]();
}

uint64_t CGPDFArchiveGetPlainText()
{
  return MEMORY[0x1F40DAB60]();
}

uint64_t CGPDFArchiveGetWebArchiveData()
{
  return MEMORY[0x1F40DAB68]();
}

uint64_t CGPDFArchiveRelease()
{
  return MEMORY[0x1F40DAB70]();
}

size_t CGPDFArrayGetCount(CGPDFArrayRef array)
{
  return MEMORY[0x1F40DAB78](array);
}

BOOL CGPDFArrayGetDictionary(CGPDFArrayRef array, size_t index, CGPDFDictionaryRef *value)
{
  return MEMORY[0x1F40DAB80](array, index, value);
}

BOOL CGPDFArrayGetInteger(CGPDFArrayRef array, size_t index, CGPDFInteger *value)
{
  return MEMORY[0x1F40DAB88](array, index, value);
}

BOOL CGPDFArrayGetNumber(CGPDFArrayRef array, size_t index, CGPDFReal *value)
{
  return MEMORY[0x1F40DAB90](array, index, value);
}

BOOL CGPDFArrayGetString(CGPDFArrayRef array, size_t index, CGPDFStringRef *value)
{
  return MEMORY[0x1F40DABA0](array, index, value);
}

void CGPDFContextAddDestinationAtPoint(CGContextRef context, CFStringRef name, CGPoint point)
{
}

void CGPDFContextBeginPage(CGContextRef context, CFDictionaryRef pageInfo)
{
}

void CGPDFContextClose(CGContextRef context)
{
}

CGContextRef CGPDFContextCreate(CGDataConsumerRef consumer, const CGRect *mediaBox, CFDictionaryRef auxiliaryInfo)
{
  return (CGContextRef)MEMORY[0x1F40DABC0](consumer, mediaBox, auxiliaryInfo);
}

CGContextRef CGPDFContextCreateWithURL(CFURLRef url, const CGRect *mediaBox, CFDictionaryRef auxiliaryInfo)
{
  return (CGContextRef)MEMORY[0x1F40DABC8](url, mediaBox, auxiliaryInfo);
}

void CGPDFContextEndPage(CGContextRef context)
{
}

void CGPDFContextSetDestinationForRect(CGContextRef context, CFStringRef name, CGRect rect)
{
}

void CGPDFContextSetURLForRect(CGContextRef context, CFURLRef url, CGRect rect)
{
}

BOOL CGPDFDictionaryGetArray(CGPDFDictionaryRef dict, const char *key, CGPDFArrayRef *value)
{
  return MEMORY[0x1F40DABE8](dict, key, value);
}

BOOL CGPDFDictionaryGetDictionary(CGPDFDictionaryRef dict, const char *key, CGPDFDictionaryRef *value)
{
  return MEMORY[0x1F40DABF0](dict, key, value);
}

BOOL CGPDFDictionaryGetName(CGPDFDictionaryRef dict, const char *key, const char **value)
{
  return MEMORY[0x1F40DABF8](dict, key, value);
}

BOOL CGPDFDictionaryGetNumber(CGPDFDictionaryRef dict, const char *key, CGPDFReal *value)
{
  return MEMORY[0x1F40DAC00](dict, key, value);
}

BOOL CGPDFDictionaryGetObject(CGPDFDictionaryRef dict, const char *key, CGPDFObjectRef *value)
{
  return MEMORY[0x1F40DAC08](dict, key, value);
}

BOOL CGPDFDictionaryGetString(CGPDFDictionaryRef dict, const char *key, CGPDFStringRef *value)
{
  return MEMORY[0x1F40DAC18](dict, key, value);
}

BOOL CGPDFDocumentAllowsCopying(CGPDFDocumentRef document)
{
  return MEMORY[0x1F40DAC20](document);
}

BOOL CGPDFDocumentAllowsPrinting(CGPDFDocumentRef document)
{
  return MEMORY[0x1F40DAC28](document);
}

uint64_t CGPDFDocumentCopyPage()
{
  return MEMORY[0x1F40DAC40]();
}

CGPDFDocumentRef CGPDFDocumentCreateWithProvider(CGDataProviderRef provider)
{
  return (CGPDFDocumentRef)MEMORY[0x1F40DAC48](provider);
}

CGPDFDocumentRef CGPDFDocumentCreateWithURL(CFURLRef url)
{
  return (CGPDFDocumentRef)MEMORY[0x1F40DAC50](url);
}

CGPDFDictionaryRef CGPDFDocumentGetCatalog(CGPDFDocumentRef document)
{
  return (CGPDFDictionaryRef)MEMORY[0x1F40DAC60](document);
}

uint64_t CGPDFDocumentGetDataProvider()
{
  return MEMORY[0x1F40DAC68]();
}

uint64_t CGPDFDocumentGetDestination()
{
  return MEMORY[0x1F40DAC70]();
}

CGPDFArrayRef CGPDFDocumentGetID(CGPDFDocumentRef document)
{
  return (CGPDFArrayRef)MEMORY[0x1F40DAC78](document);
}

CGPDFDictionaryRef CGPDFDocumentGetInfo(CGPDFDocumentRef document)
{
  return (CGPDFDictionaryRef)MEMORY[0x1F40DAC80](document);
}

size_t CGPDFDocumentGetNumberOfPages(CGPDFDocumentRef document)
{
  return MEMORY[0x1F40DAC88](document);
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document, size_t pageNumber)
{
  return (CGPDFPageRef)MEMORY[0x1F40DAC90](document, pageNumber);
}

BOOL CGPDFDocumentIsEncrypted(CGPDFDocumentRef document)
{
  return MEMORY[0x1F40DACA0](document);
}

BOOL CGPDFDocumentIsUnlocked(CGPDFDocumentRef document)
{
  return MEMORY[0x1F40DACB0](document);
}

void CGPDFDocumentRelease(CGPDFDocumentRef document)
{
}

CGPDFDocumentRef CGPDFDocumentRetain(CGPDFDocumentRef document)
{
  return (CGPDFDocumentRef)MEMORY[0x1F40DACC0](document);
}

BOOL CGPDFDocumentUnlockWithPassword(CGPDFDocumentRef document, const char *password)
{
  return MEMORY[0x1F40DACC8](document, password);
}

uint64_t CGPDFDrawingContextCreateWithStream()
{
  return MEMORY[0x1F40DACD0]();
}

uint64_t CGPDFDrawingContextDraw()
{
  return MEMORY[0x1F40DACD8]();
}

uint64_t CGPDFDrawingContextRelease()
{
  return MEMORY[0x1F40DACE0]();
}

uint64_t CGPDFFontDescriptorGetFlags()
{
  return MEMORY[0x1F40DACE8]();
}

uint64_t CGPDFFontGetFont()
{
  return MEMORY[0x1F40DACF0]();
}

uint64_t CGPDFFontGetFontDescriptor()
{
  return MEMORY[0x1F40DACF8]();
}

uint64_t CGPDFFormCreate()
{
  return MEMORY[0x1F40DAD00]();
}

uint64_t CGPDFFormGetBBox()
{
  return MEMORY[0x1F40DAD08]();
}

uint64_t CGPDFFormGetMatrix()
{
  return MEMORY[0x1F40DAD10]();
}

uint64_t CGPDFFormGetResources()
{
  return MEMORY[0x1F40DAD18]();
}

uint64_t CGPDFFormGetStream()
{
  return MEMORY[0x1F40DAD20]();
}

uint64_t CGPDFFormRelease()
{
  return MEMORY[0x1F40DAD28]();
}

uint64_t CGPDFLayoutCreateString()
{
  return MEMORY[0x1F40DAD30]();
}

uint64_t CGPDFLayoutGetCharacterBounds()
{
  return MEMORY[0x1F40DAD38]();
}

uint64_t CGPDFLayoutGetRootNode()
{
  return MEMORY[0x1F40DAD40]();
}

uint64_t CGPDFNodeGetNodeContainingTextRange()
{
  return MEMORY[0x1F40DAD50]();
}

CGPDFObjectType CGPDFObjectGetType(CGPDFObjectRef object)
{
  return MEMORY[0x1F40DAD58](object);
}

BOOL CGPDFObjectGetValue(CGPDFObjectRef object, CGPDFObjectType type, void *value)
{
  return MEMORY[0x1F40DAD60](object, *(void *)&type, value);
}

CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
{
  MEMORY[0x1F40DAD80](page, *(void *)&box);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

CGPDFDictionaryRef CGPDFPageGetDictionary(CGPDFPageRef page)
{
  return (CGPDFDictionaryRef)MEMORY[0x1F40DAD88](page);
}

CGPDFDocumentRef CGPDFPageGetDocument(CGPDFPageRef page)
{
  return (CGPDFDocumentRef)MEMORY[0x1F40DAD90](page);
}

CGAffineTransform *__cdecl CGPDFPageGetDrawingTransform(CGAffineTransform *__return_ptr retstr, CGPDFPageRef page, CGPDFBox box, CGRect rect, int rotate, BOOL preserveAspectRatio)
{
  return (CGAffineTransform *)MEMORY[0x1F40DAD98](retstr, page, *(void *)&box, *(void *)&rotate, preserveAspectRatio, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t CGPDFPageGetLayout()
{
  return MEMORY[0x1F40DADA0]();
}

size_t CGPDFPageGetPageNumber(CGPDFPageRef page)
{
  return MEMORY[0x1F40DADA8](page);
}

uint64_t CGPDFPageGetProperty()
{
  return MEMORY[0x1F40DADB0]();
}

int CGPDFPageGetRotationAngle(CGPDFPageRef page)
{
  return MEMORY[0x1F40DADB8](page);
}

CFTypeID CGPDFPageGetTypeID(void)
{
  return MEMORY[0x1F40DADC0]();
}

void CGPDFPageRelease(CGPDFPageRef page)
{
}

uint64_t CGPDFPageRemoveLayout()
{
  return MEMORY[0x1F40DADD8]();
}

uint64_t CGPDFPageRemoveProperty()
{
  return MEMORY[0x1F40DADE0]();
}

CGPDFPageRef CGPDFPageRetain(CGPDFPageRef page)
{
  return (CGPDFPageRef)MEMORY[0x1F40DADE8](page);
}

uint64_t CGPDFPageSetProperty()
{
  return MEMORY[0x1F40DADF0]();
}

uint64_t CGPDFSelectionCreateAtPoint()
{
  return MEMORY[0x1F40DADF8]();
}

uint64_t CGPDFSelectionCreateAtPointWithOptions()
{
  return MEMORY[0x1F40DAE00]();
}

uint64_t CGPDFSelectionCreateAttributedString()
{
  return MEMORY[0x1F40DAE08]();
}

uint64_t CGPDFSelectionCreateBetweenPoints()
{
  return MEMORY[0x1F40DAE10]();
}

uint64_t CGPDFSelectionCreateBetweenRangeAndPoint()
{
  return MEMORY[0x1F40DAE18]();
}

uint64_t CGPDFSelectionCreateContainingSelection()
{
  return MEMORY[0x1F40DAE20]();
}

uint64_t CGPDFSelectionCreateForRange()
{
  return MEMORY[0x1F40DAE28]();
}

uint64_t CGPDFSelectionCreateForStringRange()
{
  return MEMORY[0x1F40DAE30]();
}

uint64_t CGPDFSelectionCreateFromIndexToPoint()
{
  return MEMORY[0x1F40DAE38]();
}

uint64_t CGPDFSelectionCreateFromPointToIndex()
{
  return MEMORY[0x1F40DAE40]();
}

uint64_t CGPDFSelectionCreateFromSelection()
{
  return MEMORY[0x1F40DAE48]();
}

uint64_t CGPDFSelectionCreateInPath()
{
  return MEMORY[0x1F40DAE50]();
}

uint64_t CGPDFSelectionCreateIntersectingRect()
{
  return MEMORY[0x1F40DAE58]();
}

uint64_t CGPDFSelectionCreateSelectionsByLine()
{
  return MEMORY[0x1F40DAE60]();
}

uint64_t CGPDFSelectionCreateString()
{
  return MEMORY[0x1F40DAE68]();
}

uint64_t CGPDFSelectionGetBounds()
{
  return MEMORY[0x1F40DAE80]();
}

uint64_t CGPDFSelectionGetCGFontAtIndex()
{
  return MEMORY[0x1F40DAE88]();
}

uint64_t CGPDFSelectionGetContentRect()
{
  return MEMORY[0x1F40DAE90]();
}

uint64_t CGPDFSelectionGetEndCursorXPosition()
{
  return MEMORY[0x1F40DAE98]();
}

uint64_t CGPDFSelectionGetEndIndex()
{
  return MEMORY[0x1F40DAEA0]();
}

uint64_t CGPDFSelectionGetFirstIndex()
{
  return MEMORY[0x1F40DAEA8]();
}

uint64_t CGPDFSelectionGetGlyphAtIndex()
{
  return MEMORY[0x1F40DAEB0]();
}

uint64_t CGPDFSelectionGetLastIndex()
{
  return MEMORY[0x1F40DAEB8]();
}

uint64_t CGPDFSelectionGetLength()
{
  return MEMORY[0x1F40DAEC0]();
}

uint64_t CGPDFSelectionGetNumberOfRectsAndTransforms()
{
  return MEMORY[0x1F40DAEC8]();
}

uint64_t CGPDFSelectionGetNumberOfTextRanges()
{
  return MEMORY[0x1F40DAED0]();
}

uint64_t CGPDFSelectionGetPage()
{
  return MEMORY[0x1F40DAED8]();
}

uint64_t CGPDFSelectionGetRangeForRectIndex()
{
  return MEMORY[0x1F40DAEE0]();
}

uint64_t CGPDFSelectionGetRectAndTransform()
{
  return MEMORY[0x1F40DAEE8]();
}

uint64_t CGPDFSelectionGetStartCursorXPosition()
{
  return MEMORY[0x1F40DAEF0]();
}

uint64_t CGPDFSelectionGetStartIndex()
{
  return MEMORY[0x1F40DAEF8]();
}

uint64_t CGPDFSelectionGetTextMatrixAtIndex()
{
  return MEMORY[0x1F40DAF00]();
}

uint64_t CGPDFSelectionGetTextRange()
{
  return MEMORY[0x1F40DAF08]();
}

uint64_t CGPDFSelectionIsEmpty()
{
  return MEMORY[0x1F40DAF10]();
}

uint64_t CGPDFSelectionIsStandaloneGraphic()
{
  return MEMORY[0x1F40DAF18]();
}

uint64_t CGPDFSelectionIsWithinLayout()
{
  return MEMORY[0x1F40DAF20]();
}

uint64_t CGPDFSelectionRelease()
{
  return MEMORY[0x1F40DAF30]();
}

uint64_t CGPDFSelectionRetain()
{
  return MEMORY[0x1F40DAF38]();
}

CFStringRef CGPDFStringCopyTextString(CGPDFStringRef string)
{
  return (CFStringRef)MEMORY[0x1F40DAF58](string);
}

const unsigned __int8 *__cdecl CGPDFStringGetBytePtr(CGPDFStringRef string)
{
  return (const unsigned __int8 *)MEMORY[0x1F40DAF60](string);
}

size_t CGPDFStringGetLength(CGPDFStringRef string)
{
  return MEMORY[0x1F40DAF68](string);
}

void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, BOOL clockwise)
{
}

uint64_t CGPathAddContinuousRoundedRect()
{
  return MEMORY[0x1F40DAF80]();
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
}

void CGPathAddEllipseInRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathAddLines(CGMutablePathRef path, const CGAffineTransform *m, const CGPoint *points, size_t count)
{
}

void CGPathAddPath(CGMutablePathRef path1, const CGAffineTransform *m, CGPathRef path2)
{
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
}

void CGPathAddRoundedRect(CGMutablePathRef path, const CGAffineTransform *transform, CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight)
{
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
}

void CGPathApplyWithBlock(CGPathRef path, CGPathApplyBlock block)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x1F40DB008](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

CGPathRef CGPathCreateCopy(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1F40DB010](path);
}

CGPathRef CGPathCreateCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1F40DB048](path, transform);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1F40DB068]();
}

CGMutablePathRef CGPathCreateMutableCopy(CGPathRef path)
{
  return (CGMutablePathRef)MEMORY[0x1F40DB070](path);
}

CGMutablePathRef CGPathCreateMutableCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGMutablePathRef)MEMORY[0x1F40DB078](path, transform);
}

CFArrayRef CGPathCreateSeparateComponents(CGPathRef path, BOOL evenOddFillRule)
{
  return (CFArrayRef)MEMORY[0x1F40DB080](path, evenOddFillRule);
}

uint64_t CGPathCreateWithContinuousRoundedRect()
{
  return MEMORY[0x1F40DB090]();
}

CGPathRef CGPathCreateWithEllipseInRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1F40DB0A0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1F40DB0A8](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1F40DB0B0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, cornerWidth, cornerHeight);
}

uint64_t CGPathCreateWithThresholdedImage()
{
  return MEMORY[0x1F40DB0B8]();
}

BOOL CGPathEqualToPath(CGPathRef path1, CGPathRef path2)
{
  return MEMORY[0x1F40DB0C8](path1, path2);
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  MEMORY[0x1F40DB0D0](path);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

CGPoint CGPathGetCurrentPoint(CGPathRef path)
{
  MEMORY[0x1F40DB0D8](path);
  result.double y = v2;
  result.CGFloat x = v1;
  return result;
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  MEMORY[0x1F40DB0F0](path);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x1F40DB120](path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1F40DB178](path);
}

CGPatternRef CGPatternCreate(void *info, CGRect bounds, CGAffineTransform *matrix, CGFloat xStep, CGFloat yStep, CGPatternTiling tiling, BOOL isColored, const CGPatternCallbacks *callbacks)
{
  return (CGPatternRef)MEMORY[0x1F40DB180](info, matrix, *(void *)&tiling, isColored, callbacks, (__n128)bounds.origin, *(__n128 *)&bounds.origin.y, (__n128)bounds.size, *(__n128 *)&bounds.size.height, xStep, yStep);
}

uint64_t CGPatternCreateWithImage2()
{
  return MEMORY[0x1F40DB188]();
}

uint64_t CGPatternGetImage()
{
  return MEMORY[0x1F40DB198]();
}

uint64_t CGPatternGetMatrix()
{
  return MEMORY[0x1F40DB1A0]();
}

uint64_t CGPatternGetStep()
{
  return MEMORY[0x1F40DB1B0]();
}

uint64_t CGPatternGetTiling()
{
  return MEMORY[0x1F40DB1B8]();
}

void CGPatternRelease(CGPatternRef pattern)
{
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  MEMORY[0x1F40DB1F8](t, (__n128)point, *(__n128 *)&point.y);
  result.double y = v3;
  result.CGFloat x = v2;
  return result;
}

CFDictionaryRef CGPointCreateDictionaryRepresentation(CGPoint point)
{
  return (CFDictionaryRef)MEMORY[0x1F40DB200]((__n128)point, *(__n128 *)&point.y);
}

BOOL CGPointMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGPoint *point)
{
  return MEMORY[0x1F40DB210](dict, point);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x1F40DB220](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1F40DB228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB230]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1F40DB238]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

void CGRectDivide(CGRect rect, CGRect *slice, CGRect *remainder, CGFloat amount, CGRectEdge edge)
{
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x1F40DB250]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2B8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x1F40DB2C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB2C8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB2D0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x1F40DB2E0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x1F40DB2F0](dict, rect);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

CGRect CGRectStandardize(CGRect rect)
{
  MEMORY[0x1F40DB300]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB310]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

uint64_t CGRegionContainsRect()
{
  return MEMORY[0x1F40DB320]();
}

uint64_t CGRegionCreateEmptyRegion()
{
  return MEMORY[0x1F40DB330]();
}

uint64_t CGRegionCreateUnionWithRect()
{
  return MEMORY[0x1F40DB340]();
}

uint64_t CGRegionCreateWithRect()
{
  return MEMORY[0x1F40DB350]();
}

uint64_t CGSNewEmptyRegion()
{
  return MEMORY[0x1F40DB3F8]();
}

uint64_t CGSNewRegionWithRect()
{
  return MEMORY[0x1F40DB408]();
}

uint64_t CGSNextPoint()
{
  return MEMORY[0x1F40DB410]();
}

uint64_t CGSRegionPathEnumerator()
{
  return MEMORY[0x1F40DB438]();
}

uint64_t CGSReleaseRegion()
{
  return MEMORY[0x1F40DB440]();
}

uint64_t CGSReleaseRegionEnumerator()
{
  return MEMORY[0x1F40DB448]();
}

uint64_t CGSUnionRegion()
{
  return MEMORY[0x1F40DB458]();
}

uint64_t CGSVGDocumentGetCanvasSize()
{
  return MEMORY[0x1F4114E58]();
}

uint64_t CGSVGDocumentGetTypeID()
{
  return MEMORY[0x1F4114E68]();
}

uint64_t CGSVGDocumentRelease()
{
  return MEMORY[0x1F4114E70]();
}

uint64_t CGSVGDocumentRetain()
{
  return MEMORY[0x1F4114E78]();
}

CGShadingRef CGShadingCreateAxial(CGColorSpaceRef space, CGPoint start, CGPoint end, CGFunctionRef function, BOOL extendStart, BOOL extendEnd)
{
  return (CGShadingRef)MEMORY[0x1F40DB460](space, function, extendStart, extendEnd, (__n128)start, *(__n128 *)&start.y, (__n128)end, *(__n128 *)&end.y);
}

void CGShadingRelease(CGShadingRef shading)
{
}

CGSize CGSizeApplyAffineTransform(CGSize size, CGAffineTransform *t)
{
  MEMORY[0x1F40DB4C0](t, (__n128)size, *(__n128 *)&size.height);
  result.double height = v3;
  result.double width = v2;
  return result;
}

CFDictionaryRef CGSizeCreateDictionaryRepresentation(CGSize size)
{
  return (CFDictionaryRef)MEMORY[0x1F40DB4C8]((__n128)size, *(__n128 *)&size.height);
}

BOOL CGSizeEqualToSize(CGSize size1, CGSize size2)
{
  return MEMORY[0x1F40DB4D8]((__n128)size1, *(__n128 *)&size1.height, (__n128)size2, *(__n128 *)&size2.height);
}

BOOL CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGSize *size)
{
  return MEMORY[0x1F40DB4E0](dict, size);
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImage()
{
  return MEMORY[0x1F410D510]();
}

uint64_t CMPhotoCompressionSessionAddImageToSequence()
{
  return MEMORY[0x1F410D580]();
}

uint64_t CMPhotoCompressionSessionCloseContainerAndCopyBacking()
{
  return MEMORY[0x1F410D5B0]();
}

uint64_t CMPhotoCompressionSessionCreate()
{
  return MEMORY[0x1F410D5B8]();
}

uint64_t CMPhotoCompressionSessionEndImageSequence()
{
  return MEMORY[0x1F410D5C8]();
}

uint64_t CMPhotoCompressionSessionOpenEmptyContainer()
{
  return MEMORY[0x1F410D5F0]();
}

uint64_t CMPhotoCompressionSessionStartImageSequence()
{
  return MEMORY[0x1F410D618]();
}

uint64_t CMPhotoDecompressionContainerCreateDictionaryDescription()
{
  return MEMORY[0x1F410D7C8]();
}

uint64_t CMPhotoDecompressionContainerCreateImageForIndex()
{
  return MEMORY[0x1F410D7D0]();
}

uint64_t CMPhotoDecompressionContainerCreateSequenceContainer()
{
  return MEMORY[0x1F410D7F0]();
}

uint64_t CMPhotoDecompressionContainerDecodeImageForIndexAsync()
{
  return MEMORY[0x1F410D828]();
}

uint64_t CMPhotoDecompressionContainerGetImageCount()
{
  return MEMORY[0x1F410D8A0]();
}

uint64_t CMPhotoDecompressionSessionCreate()
{
  return MEMORY[0x1F410D960]();
}

uint64_t CMPhotoDecompressionSessionCreateContainer()
{
  return MEMORY[0x1F410D968]();
}

uint64_t CMPhotoJPEGDecodeSessionCreate()
{
  return MEMORY[0x1F410DAB0]();
}

uint64_t CMPhotoJPEGDecodeSessionDecodeDataToCGImageAsynchronously()
{
  return MEMORY[0x1F410DAC8]();
}

uint64_t CPBitmapCreateImagesFromData()
{
  return MEMORY[0x1F4109250]();
}

uint64_t CPBitmapCreateMappedDataFromPath()
{
  return MEMORY[0x1F4109260]();
}

uint64_t CPBitmapWriteImagesToPath()
{
  return MEMORY[0x1F4109268]();
}

uint64_t CPCopyBundleIdentifierAndTeamFromApplicationIdentifier()
{
  return MEMORY[0x1F41092B0]();
}

uint64_t CPCopyBundleIdentifierAndTeamFromAuditToken()
{
  return MEMORY[0x1F41092C0]();
}

uint64_t CPCopyBundleIdentifierFromAuditToken()
{
  return MEMORY[0x1F41092D0]();
}

uint64_t CPGetMachPortForMIGServerSource()
{
  return MEMORY[0x1F4109318]();
}

uint64_t CPPhoneNumberCopyHomeCountryCode()
{
  return MEMORY[0x1F4109368]();
}

uint64_t CPPhoneNumberCopyNetworkCountryCode()
{
  return MEMORY[0x1F4109378]();
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x1F41096C8]();
}

CFArrayRef CTFontCopyDefaultCascadeListForLanguages(CTFontRef font, CFArrayRef languagePrefList)
{
  return (CFArrayRef)MEMORY[0x1F40DF288](font, languagePrefList);
}

CFStringRef CTFontCopyLocalizedName(CTFontRef font, CFStringRef nameKey, CFStringRef *actualLanguage)
{
  return (CFStringRef)MEMORY[0x1F40DF2D8](font, nameKey, actualLanguage);
}

uint64_t CTFontCopySampleStringWithLanguages()
{
  return MEMORY[0x1F40DF2F0]();
}

uint64_t CTFontCopySystemUIFontExcessiveLineHeightCharacterSet()
{
  return MEMORY[0x1F40DF300]();
}

uint64_t CTFontCopyTallestTextStyleLanguageForString()
{
  return MEMORY[0x1F40DF310]();
}

CFDictionaryRef CTFontCopyVariation(CTFontRef font)
{
  return (CFDictionaryRef)MEMORY[0x1F40DF318](font);
}

CFArrayRef CTFontCopyVariationAxes(CTFontRef font)
{
  return (CFArrayRef)MEMORY[0x1F40DF320](font);
}

uint64_t CTFontCreateCopyOfSystemUIFontWithGrade()
{
  return MEMORY[0x1F40DF330]();
}

CTFontRef CTFontCreateCopyWithAttributes(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return (CTFontRef)MEMORY[0x1F40DF338](font, matrix, attributes, size);
}

CTFontRef CTFontCreateCopyWithSymbolicTraits(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontSymbolicTraits symTraitValue, CTFontSymbolicTraits symTraitMask)
{
  return (CTFontRef)MEMORY[0x1F40DF340](font, matrix, *(void *)&symTraitValue, *(void *)&symTraitMask, size);
}

CGPathRef CTFontCreatePathForGlyph(CTFontRef font, CGGlyph glyph, const CGAffineTransform *matrix)
{
  return (CGPathRef)MEMORY[0x1F40DF368](font, glyph, matrix);
}

CTFontRef CTFontCreateUIFontForLanguage(CTFontUIFontType uiType, CGFloat size, CFStringRef language)
{
  return (CTFontRef)MEMORY[0x1F40DF370](*(void *)&uiType, language, size);
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1F40DF378](descriptor, matrix, size);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1F40DF390](name, matrix, size);
}

CFTypeRef CTFontDescriptorCopyAttribute(CTFontDescriptorRef descriptor, CFStringRef attribute)
{
  return (CFTypeRef)MEMORY[0x1F40DF3A8](descriptor, attribute);
}

CFTypeRef CTFontDescriptorCopyLocalizedAttribute(CTFontDescriptorRef descriptor, CFStringRef attribute, CFStringRef *language)
{
  return (CFTypeRef)MEMORY[0x1F40DF3B8](descriptor, attribute, language);
}

uint64_t CTFontDescriptorCreateMatchingFontDescriptorsWithOptions()
{
  return MEMORY[0x1F40DF400]();
}

uint64_t CTFontDescriptorCreateWithAttributesAndOptions()
{
  return MEMORY[0x1F40DF410]();
}

CTFontDescriptorRef CTFontDescriptorCreateWithNameAndSize(CFStringRef name, CGFloat size)
{
  return (CTFontDescriptorRef)MEMORY[0x1F40DF418](name, size);
}

uint64_t CTFontDescriptorGetSymbolicTraits()
{
  return MEMORY[0x1F40DF440]();
}

uint64_t CTFontDescriptorGetTextStyleSize()
{
  return MEMORY[0x1F40DF448]();
}

void CTFontDrawGlyphs(CTFontRef font, const CGGlyph *glyphs, const CGPoint *positions, size_t count, CGContextRef context)
{
}

uint64_t CTFontGetAccessibilityBoldWeightOfWeight()
{
  return MEMORY[0x1F40DF498]();
}

double CTFontGetAdvancesForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGSize *advances, CFIndex count)
{
  MEMORY[0x1F40DF4A0](font, *(void *)&orientation, glyphs, advances, count);
  return result;
}

CGFloat CTFontGetAscent(CTFontRef font)
{
  MEMORY[0x1F40DF4A8](font);
  return result;
}

uint64_t CTFontGetAscentForSystemFontOfSize()
{
  return MEMORY[0x1F40DF4B0]();
}

CGRect CTFontGetBoundingRectsForGlyphs(CTFontRef font, CTFontOrientation orientation, const CGGlyph *glyphs, CGRect *boundingRects, CFIndex count)
{
  MEMORY[0x1F40DF4C0](font, *(void *)&orientation, glyphs, boundingRects, count);
  result.size.double height = v8;
  result.size.double width = v7;
  result.origin.double y = v6;
  result.origin.CGFloat x = v5;
  return result;
}

uint64_t CTFontGetCapHeightForSystemFontOfSize()
{
  return MEMORY[0x1F40DF4D0]();
}

CGFloat CTFontGetDescent(CTFontRef font)
{
  MEMORY[0x1F40DF4E0](font);
  return result;
}

uint64_t CTFontGetDescentForSystemFontOfSize()
{
  return MEMORY[0x1F40DF4E8]();
}

BOOL CTFontGetGlyphsForCharacters(CTFontRef font, const UniChar *characters, CGGlyph *glyphs, CFIndex count)
{
  return MEMORY[0x1F40DF510](font, characters, glyphs, count);
}

uint64_t CTFontGetLanguageAwareOutsets()
{
  return MEMORY[0x1F40DF518]();
}

CGRect CTFontGetOpticalBoundsForGlyphs(CTFontRef font, const CGGlyph *glyphs, CGRect *boundingRects, CFIndex count, CFOptionFlags options)
{
  MEMORY[0x1F40DF540](font, glyphs, boundingRects, count, options);
  result.size.double height = v8;
  result.size.double width = v7;
  result.origin.double y = v6;
  result.origin.CGFloat x = v5;
  return result;
}

CTFontSymbolicTraits CTFontGetSymbolicTraits(CTFontRef font)
{
  return MEMORY[0x1F40DF568](font);
}

uint64_t CTFontGetUIFontDesign()
{
  return MEMORY[0x1F40DF590]();
}

uint64_t CTFontGetWeight()
{
  return MEMORY[0x1F40DF5D0]();
}

CGFloat CTFontGetXHeight(CTFontRef font)
{
  MEMORY[0x1F40DF5D8](font);
  return result;
}

uint64_t CTFontSetAltTextStyleSpec()
{
  return MEMORY[0x1F40DF668]();
}

uint64_t CTFontTransformGlyphs()
{
  return MEMORY[0x1F40DF690]();
}

void CTFrameGetLineOrigins(CTFrameRef frame, CFRange range, CGPoint *origins)
{
}

CFArrayRef CTFrameGetLines(CTFrameRef frame)
{
  return (CFArrayRef)MEMORY[0x1F40DF6B8](frame);
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x1F40DF6E0](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x1F40DF6E8](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  MEMORY[0x1F40DF700](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.double height = v6;
  result.double width = v5;
  return result;
}

uint64_t CTGetDefaultLanguageAwareLineHeightRatio()
{
  return MEMORY[0x1F40DF708]();
}

CTLineRef CTLineCreateTruncatedLine(CTLineRef line, double width, CTLineTruncationType truncationType, CTLineRef truncationToken)
{
  return (CTLineRef)MEMORY[0x1F40DF778](line, *(void *)&truncationType, truncationToken, width);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x1F40DF790](attrString);
}

uint64_t CTLineCreateWithString()
{
  return MEMORY[0x1F40DF7A0]();
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  MEMORY[0x1F40DF7C8](line, options);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

CFIndex CTLineGetGlyphCount(CTLineRef line)
{
  return MEMORY[0x1F40DF7D8](line);
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return (CFArrayRef)MEMORY[0x1F40DF7E0](line);
}

CGRect CTLineGetImageBounds(CTLineRef line, CGContextRef context)
{
  MEMORY[0x1F40DF7E8](line, context);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

double CTLineGetPenOffsetForFlush(CTLineRef line, CGFloat flushFactor, double flushWidth)
{
  MEMORY[0x1F40DF7F8](line, flushFactor, flushWidth);
  return result;
}

double CTLineGetTrailingWhitespaceWidth(CTLineRef line)
{
  MEMORY[0x1F40DF818](line);
  return result;
}

double CTLineGetTypographicBounds(CTLineRef line, CGFloat *ascent, CGFloat *descent, CGFloat *leading)
{
  MEMORY[0x1F40DF820](line, ascent, descent, leading);
  return result;
}

CTParagraphStyleRef CTParagraphStyleCreate(const CTParagraphStyleSetting *settings, size_t settingCount)
{
  return (CTParagraphStyleRef)MEMORY[0x1F40DF868](settings, settingCount);
}

uint64_t CTParagraphStyleSetCompositionLanguage()
{
  return MEMORY[0x1F40DF880]();
}

void CTRunDraw(CTRunRef run, CGContextRef context, CFRange range)
{
}

uint64_t CTRunGetFont()
{
  return MEMORY[0x1F40DF8D0]();
}

CFIndex CTRunGetGlyphCount(CTRunRef run)
{
  return MEMORY[0x1F40DF8D8](run);
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
}

CGRect CTRunGetImageBounds(CTRunRef run, CGContextRef context, CFRange range)
{
  MEMORY[0x1F40DF8F8](run, context, range.location, range.length);
  result.size.double height = v6;
  result.size.double width = v5;
  result.origin.double y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

void CTRunGetPositions(CTRunRef run, CFRange range, CGPoint *buffer)
{
}

CFRange CTRunGetStringRange(CTRunRef run)
{
  CFIndex v1 = MEMORY[0x1F40DF940](run);
  result.length = v2;
  result.locatiouint64_t n = v1;
  return result;
}

CGAffineTransform *__cdecl CTRunGetTextMatrix(CGAffineTransform *__return_ptr retstr, CTRunRef run)
{
  return (CGAffineTransform *)MEMORY[0x1F40DF948](retstr, run);
}

uint64_t CUIGetDeviceArtworkDisplayGamut()
{
  return MEMORY[0x1F4115CA0]();
}

uint64_t DRTailspinRequest()
{
  return MEMORY[0x1F4117578]();
}

uint64_t FBSWorkspaceInitialize()
{
  return MEMORY[0x1F411A228]();
}

uint64_t FBSceneLayerTypeMaskContainsType()
{
  return MEMORY[0x1F4119F68]();
}

uint64_t GSCurrentEventTimestamp()
{
  return MEMORY[0x1F411C878]();
}

uint64_t GSEventAccelerometerAxisX()
{
  return MEMORY[0x1F411C880]();
}

uint64_t GSEventAccelerometerAxisY()
{
  return MEMORY[0x1F411C888]();
}

uint64_t GSEventAccelerometerAxisZ()
{
  return MEMORY[0x1F411C890]();
}

uint64_t GSEventCreateWithEventRecord()
{
  return MEMORY[0x1F411C898]();
}

uint64_t GSEventDeviceOrientation()
{
  return MEMORY[0x1F411C8A0]();
}

uint64_t GSEventGetHIDTimestamp()
{
  return MEMORY[0x1F411C8A8]();
}

uint64_t GSEventGetHardwareKeyboardCountry()
{
  return MEMORY[0x1F411C8B0]();
}

uint64_t GSEventGetLocationInWindow()
{
  return MEMORY[0x1F411C8C0]();
}

uint64_t GSEventGetSubType()
{
  return MEMORY[0x1F411C8C8]();
}

uint64_t GSEventGetTimestamp()
{
  return MEMORY[0x1F411C8D0]();
}

uint64_t GSEventGetType()
{
  return MEMORY[0x1F411C8D8]();
}

uint64_t GSEventGetWindow()
{
  return MEMORY[0x1F411C8E0]();
}

uint64_t GSEventInitialize()
{
  return MEMORY[0x1F411C8E8]();
}

uint64_t GSEventInitializeAsExtension()
{
  return MEMORY[0x1F411C8F0]();
}

uint64_t GSEventIsHardwareKeyboardAttached()
{
  return MEMORY[0x1F411C8F8]();
}

uint64_t GSEventIsHardwareKeyboardEvent()
{
  return MEMORY[0x1F411C900]();
}

uint64_t GSEventPopRunLoopMode()
{
  return MEMORY[0x1F411C908]();
}

uint64_t GSEventPushRunLoopMode()
{
  return MEMORY[0x1F411C910]();
}

uint64_t GSEventQueueContainsMouseEvent()
{
  return MEMORY[0x1F411C918]();
}

uint64_t GSEventRegisterEventCallBack()
{
  return MEMORY[0x1F411C920]();
}

uint64_t GSEventRemoveShouldRouteToFrontMost()
{
  return MEMORY[0x1F411C928]();
}

uint64_t GSEventRun()
{
  return MEMORY[0x1F411C930]();
}

uint64_t GSEventShouldRouteToFrontMost()
{
  return MEMORY[0x1F411C948]();
}

uint64_t GSInitialize()
{
  return MEMORY[0x1F411C960]();
}

uint64_t GSKeyboardCreate()
{
  return MEMORY[0x1F411C968]();
}

uint64_t GSKeyboardGetHWKeyboardType()
{
  return MEMORY[0x1F411C970]();
}

uint64_t GSKeyboardGetKeyCodeForChar()
{
  return MEMORY[0x1F411C978]();
}

uint64_t GSKeyboardGetLayout()
{
  return MEMORY[0x1F411C980]();
}

uint64_t GSKeyboardGetLiveModifierState()
{
  return MEMORY[0x1F411C990]();
}

uint64_t GSKeyboardGetLocale()
{
  return MEMORY[0x1F411C998]();
}

uint64_t GSKeyboardGetModifierState()
{
  return MEMORY[0x1F411C9A0]();
}

uint64_t GSKeyboardIsGlobeKeyUsagePair()
{
  return MEMORY[0x1F411C9B0]();
}

uint64_t GSKeyboardRelease()
{
  return MEMORY[0x1F411C9C0]();
}

uint64_t GSKeyboardTranslateKeyExtendedCommandWithUsagePage()
{
  return MEMORY[0x1F411C9D0]();
}

uint64_t GSKeyboardTranslateKeyWithModifiers()
{
  return MEMORY[0x1F411C9E0]();
}

uint64_t GSSendEvent()
{
  return MEMORY[0x1F411CA10]();
}

uint64_t HTBeginNonResponsiveTaskWithNameAndExpirationAtTime()
{
  return MEMORY[0x1F411CC48]();
}

uint64_t HTEndNonResponsiveTaskAtTime()
{
  return MEMORY[0x1F411CC50]();
}

uint64_t HTHangEventAddUserActionCaptureCallback()
{
  return MEMORY[0x1F411CC58]();
}

uint64_t HTHangEventCreate()
{
  return MEMORY[0x1F411CC60]();
}

uint64_t HTResumeHangTracing()
{
  return MEMORY[0x1F411CC68]();
}

uint64_t HTSuspendHangTracing()
{
  return MEMORY[0x1F411CC70]();
}

uint64_t IOHIDEventAppendEvent()
{
  return MEMORY[0x1F40E88D8]();
}

uint64_t IOHIDEventConformsTo()
{
  return MEMORY[0x1F40E88E0]();
}

uint64_t IOHIDEventCreateCopy()
{
  return MEMORY[0x1F40E8900]();
}

uint64_t IOHIDEventCreateData()
{
  return MEMORY[0x1F40E8908]();
}

uint64_t IOHIDEventCreateDigitizerEvent()
{
  return MEMORY[0x1F40E8910]();
}

uint64_t IOHIDEventCreateDigitizerFingerEvent()
{
  return MEMORY[0x1F40E8918]();
}

uint64_t IOHIDEventCreateDigitizerFingerEventWithQuality()
{
  return MEMORY[0x1F40E8920]();
}

uint64_t IOHIDEventCreateDigitizerStylusEventWithPolarOrientation()
{
  return MEMORY[0x1F40E8928]();
}

uint64_t IOHIDEventCreateKeyboardEvent()
{
  return MEMORY[0x1F40E8948]();
}

uint64_t IOHIDEventCreateScaleEvent()
{
  return MEMORY[0x1F40E8970]();
}

uint64_t IOHIDEventCreateVendorDefinedEvent()
{
  return MEMORY[0x1F40E89A0]();
}

uint64_t IOHIDEventCreateWithData()
{
  return MEMORY[0x1F40E89B0]();
}

uint64_t IOHIDEventGetAttributeDataLength()
{
  return MEMORY[0x1F40E89B8]();
}

uint64_t IOHIDEventGetAttributeDataPtr()
{
  return MEMORY[0x1F40E89C0]();
}

uint64_t IOHIDEventGetChildren()
{
  return MEMORY[0x1F40E89C8]();
}

uint64_t IOHIDEventGetDataValue()
{
  return MEMORY[0x1F40E89D0]();
}

uint64_t IOHIDEventGetDoubleValue()
{
  return MEMORY[0x1F40E89D8]();
}

uint64_t IOHIDEventGetEvent()
{
  return MEMORY[0x1F40E89E0]();
}

uint64_t IOHIDEventGetEventFlags()
{
  return MEMORY[0x1F40E89E8]();
}

uint64_t IOHIDEventGetFloatMultiple()
{
  return MEMORY[0x1F40E89F0]();
}

uint64_t IOHIDEventGetFloatValue()
{
  return MEMORY[0x1F40E89F8]();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1F40E8A00]();
}

uint64_t IOHIDEventGetLatency()
{
  return MEMORY[0x1F40E8A08]();
}

uint64_t IOHIDEventGetPhase()
{
  return MEMORY[0x1F40E8A18]();
}

uint64_t IOHIDEventGetSenderID()
{
  return MEMORY[0x1F40E8A20]();
}

uint64_t IOHIDEventGetTimeStamp()
{
  return MEMORY[0x1F40E8A28]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1F40E8A38]();
}

uint64_t IOHIDEventGetVendorDefinedData()
{
  return MEMORY[0x1F40E8A48]();
}

uint64_t IOHIDEventIsRepeat()
{
  return MEMORY[0x1F40E8A50]();
}

uint64_t IOHIDEventRemoveEvent()
{
  return MEMORY[0x1F40E8A58]();
}

uint64_t IOHIDEventSetAttributeData()
{
  return MEMORY[0x1F40E8A60]();
}

uint64_t IOHIDEventSetDoubleValue()
{
  return MEMORY[0x1F40E8A68]();
}

uint64_t IOHIDEventSetFloatValue()
{
  return MEMORY[0x1F40E8A78]();
}

uint64_t IOHIDEventSetIntegerValue()
{
  return MEMORY[0x1F40E8A80]();
}

uint64_t IOHIDEventSetPhase()
{
  return MEMORY[0x1F40E8A88]();
}

uint64_t IOHIDEventSetSenderID()
{
  return MEMORY[0x1F40E8A90]();
}

uint64_t IOHIDEventSetTimeStamp()
{
  return MEMORY[0x1F40E8A98]();
}

CFArrayRef IOHIDEventSystemClientCopyServices(IOHIDEventSystemClientRef client)
{
  return (CFArrayRef)MEMORY[0x1F40E8AB8](client);
}

uint64_t IOHIDEventSystemClientCreateWithType()
{
  return MEMORY[0x1F40E8AC8]();
}

IOReturn IOHIDManagerClose(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x1F40E8C50](manager, *(void *)&options);
}

CFSetRef IOHIDManagerCopyDevices(IOHIDManagerRef manager)
{
  return (CFSetRef)MEMORY[0x1F40E8C58](manager);
}

IOHIDManagerRef IOHIDManagerCreate(CFAllocatorRef allocator, IOOptionBits options)
{
  return (IOHIDManagerRef)MEMORY[0x1F40E8C68](allocator, *(void *)&options);
}

IOReturn IOHIDManagerOpen(IOHIDManagerRef manager, IOOptionBits options)
{
  return MEMORY[0x1F40E8C80](manager, *(void *)&options);
}

void IOHIDManagerRegisterDeviceMatchingCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
}

void IOHIDManagerRegisterDeviceRemovalCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
}

void IOHIDManagerScheduleWithRunLoop(IOHIDManagerRef manager, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

void IOHIDManagerSetDeviceMatchingMultiple(IOHIDManagerRef manager, CFArrayRef multiple)
{
}

CFTypeRef IOHIDServiceClientCopyProperty(IOHIDServiceClientRef service, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40E8D20](service, key);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1F40E8ED8](*(void *)&iterator);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x1F40E8F08](*(void *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40E8F20](notify);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1F40E8F60](*(void *)&object);
}

uint64_t IOPSCopyPowerSourcesByType()
{
  return MEMORY[0x1F40E90D8]();
}

uint64_t IOPSCopyPowerSourcesByTypePrecise()
{
  return MEMORY[0x1F40E90E0]();
}

CFArrayRef IOPSCopyPowerSourcesList(CFTypeRef blob)
{
  return (CFArrayRef)MEMORY[0x1F40E90F0](blob);
}

CFDictionaryRef IOPSGetPowerSourceDescription(CFTypeRef blob, CFTypeRef ps)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9118](blob, ps);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9168](*(void *)&entry, key, allocator, *(void *)&options);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x1F40E9230](notifyPort, *(void *)&service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return MEMORY[0x1F40E9238](notifyPort, notificationType, matching, callback, refCon, notification);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9268](name);
}

size_t IOSurfaceAlignProperty(CFStringRef property, size_t value)
{
  return MEMORY[0x1F40E92D8](property, value);
}

CFTypeRef IOSurfaceCopyValue(IOSurfaceRef buffer, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40E9300](buffer, key);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1F40E9308](properties);
}

void IOSurfaceDecrementUseCount(IOSurfaceRef buffer)
{
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9350](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1F40E9358](buffer);
}

uint64_t IOSurfaceGetBulkAttachments()
{
  return MEMORY[0x1F40E9388]();
}

size_t IOSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9398](buffer);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E93A8](buffer);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9440](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9480](buffer);
}

CFTypeID IOSurfaceGetTypeID(void)
{
  return MEMORY[0x1F40E94E0]();
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E94F8](buffer);
}

void IOSurfaceIncrementUseCount(IOSurfaceRef buffer)
{
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9540](buffer, *(void *)&options, seed);
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9630](buffer, *(void *)&options, seed);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGCopyAnswerWithError()
{
  return MEMORY[0x1F417CDE8]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1F417CE28]();
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x1F417CE30]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x1F417CE48]();
}

uint64_t MGIsQuestionValid()
{
  return MEMORY[0x1F417CE50]();
}

uint64_t MGRegisterForUpdates()
{
  return MEMORY[0x1F417CE60]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1F412F980]();
}

uint64_t MTMaterialCreateDictionaryRepresentation()
{
  return MEMORY[0x1F4113E78]();
}

uint64_t MTVisualStylingCreateDictionaryRepresentation()
{
  return MEMORY[0x1F4113E80]();
}

NSArray *__cdecl NSAllMapTableKeys(NSMapTable *table)
{
  return (NSArray *)MEMORY[0x1F40E6FD8](table);
}

NSArray *__cdecl NSAllMapTableValues(NSMapTable *table)
{
  return (NSArray *)MEMORY[0x1F40E6FE0](table);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

BOOL NSCompareHashTables(NSHashTable *table1, NSHashTable *table2)
{
  return MEMORY[0x1F40E7018](table1, table2);
}

BOOL NSCompareMapTables(NSMapTable *table1, NSMapTable *table2)
{
  return MEMORY[0x1F40E7020](table1, table2);
}

NSUInteger NSCountMapTable(NSMapTable *table)
{
  return MEMORY[0x1F40E7040](table);
}

NSMapTable *__cdecl NSCreateMapTable(NSMapTableKeyCallBacks *keyCallBacks, NSMapTableValueCallBacks *valueCallBacks, NSUInteger capacity)
{
  return (NSMapTable *)MEMORY[0x1F40E7050](keyCallBacks, valueCallBacks, capacity);
}

void NSEndHashTableEnumeration(NSHashEnumerator *enumerator)
{
}

void NSEndMapTableEnumeration(NSMapEnumerator *enumerator)
{
}

NSHashEnumerator *__cdecl NSEnumerateHashTable(NSHashEnumerator *__return_ptr retstr, NSHashTable *table)
{
  return (NSHashEnumerator *)MEMORY[0x1F40E70A8](retstr, table);
}

NSMapEnumerator *__cdecl NSEnumerateMapTable(NSMapEnumerator *__return_ptr retstr, NSMapTable *table)
{
  return (NSMapEnumerator *)MEMORY[0x1F40E70B0](retstr, table);
}

BOOL NSEqualRects(NSRect aRect, NSRect bRect)
{
  return MEMORY[0x1F40E70C0]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height, (__n128)bRect.origin, *(__n128 *)&bRect.origin.y, (__n128)bRect.size, *(__n128 *)&bRect.size.height);
}

BOOL NSEqualSizes(NSSize aSize, NSSize bSize)
{
  return MEMORY[0x1F40E70C8]((__n128)aSize, *(__n128 *)&aSize.height, (__n128)bSize, *(__n128 *)&bSize.height);
}

const char *__cdecl NSGetSizeAndAlignment(const char *typePtr, NSUInteger *sizep, NSUInteger *alignp)
{
  return (const char *)MEMORY[0x1F40D8B10](typePtr, sizep, alignp);
}

void *__cdecl NSHashGet(NSHashTable *table, const void *pointer)
{
  return (void *)MEMORY[0x1F40E70E8](table, pointer);
}

void NSHashInsert(NSHashTable *table, const void *pointer)
{
}

void NSHashRemove(NSHashTable *table, const void *pointer)
{
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E7110]();
}

NSRect NSIntegralRectWithOptions(NSRect aRect, NSAlignmentOptions opts)
{
  MEMORY[0x1F40E7138](opts, (__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E7140](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.locatiouint64_t n = v2;
  return result;
}

BOOL NSIntersectsRect(NSRect aRect, NSRect bRect)
{
  return MEMORY[0x1F40E7158]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height, (__n128)bRect.origin, *(__n128 *)&bRect.origin.y, (__n128)bRect.size, *(__n128 *)&bRect.size.height);
}

BOOL NSIsEmptyRect(NSRect aRect)
{
  return MEMORY[0x1F40E7160]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
}

uint64_t NSLayoutConstraintIsDanglyInContainer()
{
  return MEMORY[0x1F4113AE8]();
}

uint64_t NSLayoutConstraintIsPotentiallyDanglyInContainer()
{
  return MEMORY[0x1F4113AF0]();
}

void NSLog(NSString *format, ...)
{
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  return (void *)MEMORY[0x1F40E7180](table, key);
}

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
}

void NSMapRemove(NSMapTable *table, const void *key)
{
}

void *__cdecl NSNextHashEnumeratorItem(NSHashEnumerator *enumerator)
{
  return (void *)MEMORY[0x1F40E71A8](enumerator);
}

BOOL NSNextMapEnumeratorPair(NSMapEnumerator *enumerator, void **key, void **value)
{
  return MEMORY[0x1F40E71B0](enumerator, key, value);
}

NSUInteger NSPageSize(void)
{
  return MEMORY[0x1F40E71C8]();
}

uint64_t NSPopAutoreleasePool()
{
  return MEMORY[0x1F40E71E0]();
}

Protocol *__cdecl NSProtocolFromString(NSString *namestr)
{
  return (Protocol *)MEMORY[0x1F40E71E8](namestr);
}

uint64_t NSPushAutoreleasePool()
{
  return MEMORY[0x1F40E71F0]();
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x1F40E7228]();
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1F40E7248](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

uint64_t NSStringFromBOOL()
{
  return MEMORY[0x1F40E7278]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

uint64_t NSStringFromFBSceneLayerTypeMask()
{
  return MEMORY[0x1F4119F98]();
}

NSString *__cdecl NSStringFromPoint(NSPoint aPoint)
{
  return (NSString *)MEMORY[0x1F40E7290]((__n128)aPoint, *(__n128 *)&aPoint.y);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1F40E72A0](range.location, range.length);
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return (NSString *)MEMORY[0x1F40E72A8]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSString *__cdecl NSStringFromSize(NSSize aSize)
{
  return (NSString *)MEMORY[0x1F40E72C0]((__n128)aSize, *(__n128 *)&aSize.height);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E72E0](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.locatiouint64_t n = v2;
  return result;
}

NSRect NSUnionRect(NSRect aRect, NSRect bRect)
{
  MEMORY[0x1F40E72E8]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height, (__n128)bRect.origin, *(__n128 *)&bRect.origin.y, (__n128)bRect.size, *(__n128 *)&bRect.size.height);
  result.size.double height = v5;
  result.size.double width = v4;
  result.origin.double y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

int32_t NSVersionOfLinkTimeLibrary(const char *libraryName)
{
  return MEMORY[0x1F40C99B0](libraryName);
}

void NSZoneFree(NSZone *zone, void *ptr)
{
}

void *__cdecl NSZoneMalloc(NSZone *zone, NSUInteger size)
{
  return (void *)MEMORY[0x1F40E7310](zone, size);
}

uint64_t PBCannotCoerceRepresentationOfTypeToRepresentationOfTypeError()
{
  return MEMORY[0x1F413C0E0]();
}

uint64_t PBCannotInstantiateObjectOfClassError()
{
  return MEMORY[0x1F413C0E8]();
}

uint64_t PBCannotLoadRepresentationError()
{
  return MEMORY[0x1F413C0F0]();
}

uint64_t PBIndexOutOfRangeError()
{
  return MEMORY[0x1F413C0F8]();
}

uint64_t PBNSPreferredRepresentationFromPB()
{
  return MEMORY[0x1F413C100]();
}

uint64_t PKGet_INV_PTM_RATIO()
{
  return MEMORY[0x1F4144620]();
}

uint64_t PKGet_PTM_RATIO()
{
  return MEMORY[0x1F4144628]();
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x1F4145D90]();
}

uint64_t PSContentOverlayIntensityForLuminanceAndUsage()
{
  return MEMORY[0x1F4145AE0]();
}

uint64_t PSContentOverlayVibrantColorMatrixForLuminance()
{
  return MEMORY[0x1F4145AE8]();
}

uint64_t PSIntensityForLuminanceAndUsage()
{
  return MEMORY[0x1F4145AF0]();
}

uint64_t RBColorFromCGColor2()
{
  return MEMORY[0x1F41498A8]();
}

uint64_t RBColorModeWorkingColorSpace()
{
  return MEMORY[0x1F41498B0]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

uint32_t SecTaskGetCodeSignStatus(SecTaskRef task)
{
  return MEMORY[0x1F40F7180](task);
}

uint64_t TIBundleForInputMode()
{
  return MEMORY[0x1F4163BB8]();
}

uint64_t TICanonicalInputModeName()
{
  return MEMORY[0x1F4163BC8]();
}

uint64_t TICharEstablishesContextForDoubleSpacePeriod()
{
  return MEMORY[0x1F4163BD0]();
}

uint64_t TICharIsAlphaNumeric()
{
  return MEMORY[0x1F4163BD8]();
}

uint64_t TICharIsComposableAccent()
{
  return MEMORY[0x1F4163BE0]();
}

uint64_t TICharIsDevanagariPUA()
{
  return MEMORY[0x1F4163BE8]();
}

uint64_t TIEnabledInputModesAllowOneToManyShortcuts()
{
  return MEMORY[0x1F4163C00]();
}

uint64_t TIGetDefaultInputModesForLanguage()
{
  return MEMORY[0x1F4163C18]();
}

uint64_t TIGetHardwareLayoutsForInputMode()
{
  return MEMORY[0x1F4163C20]();
}

uint64_t TIGetInputModeProperties()
{
  return MEMORY[0x1F4163C28]();
}

uint64_t TIGetLanguageSupportForHardwareKeyboard()
{
  return MEMORY[0x1F4163C30]();
}

uint64_t TIGetSuggestedDefaultInputModesByLocaleForLanguage()
{
  return MEMORY[0x1F4163C48]();
}

uint64_t TIGetSuggestedDefaultInputModesForFudgeByLocaleForLanguage()
{
  return MEMORY[0x1F4163C50]();
}

uint64_t TIGetSuggestedDefaultInputModesForPadByLocaleForLanguage()
{
  return MEMORY[0x1F4163C58]();
}

uint64_t TIGetSuggestedInputModesByLocaleForLanguage()
{
  return MEMORY[0x1F4163C60]();
}

uint64_t TIInputModeGetBaseLanguage()
{
  return MEMORY[0x1F4163C78]();
}

uint64_t TIInputModeGetComponentsFromIdentifier()
{
  return MEMORY[0x1F4163C80]();
}

uint64_t TIInputModeGetLanguage()
{
  return MEMORY[0x1F4163C90]();
}

uint64_t TIInputModeGetLanguageWithRegion()
{
  return MEMORY[0x1F4163C98]();
}

uint64_t TIInputModeGetMultilingualID()
{
  return MEMORY[0x1F4163CA0]();
}

uint64_t TIInputModeGetMultilingualSet()
{
  return MEMORY[0x1F4163CA8]();
}

uint64_t TIInputModeGetMultilingualSetFromInputModes()
{
  return MEMORY[0x1F4163CB0]();
}

uint64_t TIInputModeGetMultilingualSetFromInputModesWithPreferredLanguages()
{
  return MEMORY[0x1F4163CB8]();
}

uint64_t TIInputModeGetNormalizedIdentifier()
{
  return MEMORY[0x1F4163CC0]();
}

uint64_t TIInputModeGetNormalizedIdentifierFromComponents()
{
  return MEMORY[0x1F4163CC8]();
}

uint64_t TIInputModeGetNormalizedLevelsFromComponents()
{
  return MEMORY[0x1F4163CD0]();
}

uint64_t TIInputModeGetRegion()
{
  return MEMORY[0x1F4163CE0]();
}

uint64_t TIInputModeGetSWLayout()
{
  return MEMORY[0x1F4163CE8]();
}

uint64_t TIInputModeGetVariant()
{
  return MEMORY[0x1F4163CF0]();
}

uint64_t TIInputModeIsMultilingualOnly()
{
  return MEMORY[0x1F4163CF8]();
}

uint64_t TIInputModeIsTransliteration()
{
  return MEMORY[0x1F4163D00]();
}

uint64_t TILoadMergedKeyboardPlistForLocale()
{
  return MEMORY[0x1F4163D38]();
}

uint64_t TIStatisticDistributionPushValue()
{
  return MEMORY[0x1F4163D60]();
}

uint64_t TIStatisticGetKey()
{
  return MEMORY[0x1F4163D68]();
}

uint64_t TIStatisticGetKeyForCandidateAccepted()
{
  return MEMORY[0x1F4163D70]();
}

uint64_t TIStatisticGetKeyForCandidateAcceptedSelectedSortingMethod()
{
  return MEMORY[0x1F4163D78]();
}

uint64_t TIStatisticGetKeyForInputMode()
{
  return MEMORY[0x1F4163D80]();
}

uint64_t TIStatisticGetKeyForTenKeyFlick()
{
  return MEMORY[0x1F4163D90]();
}

uint64_t TIStatisticGetKeyForTenKeyFlickPunctuation()
{
  return MEMORY[0x1F4163D98]();
}

uint64_t TIStatisticGetKeyForTenKeyKeyTappedInKeyplane()
{
  return MEMORY[0x1F4163DA0]();
}

uint64_t TIStatisticScalarDecrement()
{
  return MEMORY[0x1F4163DB0]();
}

uint64_t TIStatisticScalarIncrement()
{
  return MEMORY[0x1F4163DB8]();
}

uint64_t TIStatisticScalarIncrement3PKSummoned()
{
  return MEMORY[0x1F4163DC0]();
}

uint64_t TIStatisticScalarIncrementAutocorrectionKey()
{
  return MEMORY[0x1F4163DC8]();
}

uint64_t TIStatisticScalarIncrementInputStringCount()
{
  return MEMORY[0x1F4163DD0]();
}

uint64_t TIStatisticScalarIncrementSystemKeyboardSummoned()
{
  return MEMORY[0x1F4163DD8]();
}

uint64_t TIStatisticScalarSetBoolean()
{
  return MEMORY[0x1F4163DE0]();
}

uint64_t TIStatisticScalarSetValue()
{
  return MEMORY[0x1F4163DE8]();
}

uint64_t TIStatisticShouldSample()
{
  return MEMORY[0x1F4163DF0]();
}

uint64_t TIStatisticsGetKeyForGesture()
{
  return MEMORY[0x1F4163DF8]();
}

void UIDataLooksLikeNibArchive()
{
  while (1)
    ;
}

uint64_t UISCalloutBarFontSize()
{
  return MEMORY[0x1F4167140]();
}

uint64_t UISCreateCachedColorTransform()
{
  return MEMORY[0x1F4167150]();
}

uint64_t UISFontWeightForIndex()
{
  return MEMORY[0x1F4167158]();
}

uint64_t UISGetFontContentSizeCategory()
{
  return MEMORY[0x1F4167160]();
}

uint64_t UISIndexForFontWeight()
{
  return MEMORY[0x1F4167168]();
}

uint64_t UISUserInterfaceStyleModeOverridesEqual()
{
  return MEMORY[0x1F4167178]();
}

uint64_t UISUserInterfaceStyleModeSchedulesEqual()
{
  return MEMORY[0x1F4167180]();
}

uint64_t UISUserInterfaceStyleModeValueIsAutomatic()
{
  return MEMORY[0x1F4167188]();
}

void UISystemFontBoldForSize()
{
  while (1)
    ;
}

Boolean UTTypeEqual(CFStringRef inUTI1, CFStringRef inUTI2)
{
  return MEMORY[0x1F40DEE68](inUTI1, inUTI2);
}

uint64_t WKGetCurrentGraphicsContext()
{
  return MEMORY[0x1F4176B68]();
}

uint64_t WKSetCurrentGraphicsContext()
{
  return MEMORY[0x1F4176B70]();
}

uint64_t WebKitCreatePathWithShrinkWrappedRects()
{
  return MEMORY[0x1F4176B78]();
}

uint64_t WebKitGetMinimumZoomFontSize()
{
  return MEMORY[0x1F4176B80]();
}

uint64_t WebThreadCallDelegate()
{
  return MEMORY[0x1F4176B88]();
}

uint64_t WebThreadCallDelegateAsync()
{
  return MEMORY[0x1F4176B90]();
}

uint64_t WebThreadIsCurrent()
{
  return MEMORY[0x1F4176B98]();
}

uint64_t WebThreadIsEnabled()
{
  return MEMORY[0x1F4176BA0]();
}

uint64_t WebThreadIsLocked()
{
  return MEMORY[0x1F4176BA8]();
}

uint64_t WebThreadLock()
{
  return MEMORY[0x1F4176BB0]();
}

uint64_t WebThreadLockFromAnyThread()
{
  return MEMORY[0x1F4176BB8]();
}

uint64_t WebThreadMakeNSInvocation()
{
  return MEMORY[0x1F4176BC0]();
}

uint64_t WebThreadNotCurrent()
{
  return MEMORY[0x1F4176BC8]();
}

uint64_t WebThreadRun()
{
  return MEMORY[0x1F4176BD0]();
}

uint64_t WebThreadRunOnMainThread()
{
  return MEMORY[0x1F4176BD8]();
}

uint64_t WebThreadUnlockFromAnyThread()
{
  return MEMORY[0x1F4176BE0]();
}

uint64_t XCTTargetBootstrap()
{
  return MEMORY[0x1F4176DF0]();
}

uint64_t _AXDarkenSystemColors()
{
  return MEMORY[0x1F4178810]();
}

uint64_t _AXSAccessibilityBundlesPath()
{
  return MEMORY[0x1F4178838]();
}

uint64_t _AXSAccessibilityEnabled()
{
  return MEMORY[0x1F4178840]();
}

uint64_t _AXSAllowOpaqueTouchGestures()
{
  return MEMORY[0x1F41788A8]();
}

uint64_t _AXSAppleTVRemoteClickpadTapsForDirectionalNavigationEnabled()
{
  return MEMORY[0x1F41788C0]();
}

uint64_t _AXSApplicationAccessibilityEnabled()
{
  return MEMORY[0x1F41788D0]();
}

uint64_t _AXSApplicationAccessibilitySetEnabled()
{
  return MEMORY[0x1F41788D8]();
}

uint64_t _AXSAssistiveTouchEnabled()
{
  return MEMORY[0x1F41788E8]();
}

uint64_t _AXSAssistiveTouchScannerEnabled()
{
  return MEMORY[0x1F4178908]();
}

uint64_t _AXSButtonShapesEnabled()
{
  return MEMORY[0x1F41789C8]();
}

uint64_t _AXSCarPlayEnhanceTextLegibilityEnabled()
{
  return MEMORY[0x1F41789E0]();
}

uint64_t _AXSClosedCaptionsEnabled()
{
  return MEMORY[0x1F4178A10]();
}

uint64_t _AXSCopyPreferredContentSizeCategoryName()
{
  return MEMORY[0x1F4178A28]();
}

uint64_t _AXSDifferentiateWithoutColorEnabled()
{
  return MEMORY[0x1F4178A50]();
}

uint64_t _AXSEnhanceBackgroundContrastEnabled()
{
  return MEMORY[0x1F4178A70]();
}

uint64_t _AXSEnhanceTextLegibilityEnabled()
{
  return MEMORY[0x1F4178A88]();
}

uint64_t _AXSExtendedKeyboardPredictionsEnabled()
{
  return MEMORY[0x1F4178AA8]();
}

uint64_t _AXSForceTouchEnabled()
{
  return MEMORY[0x1F4178AC0]();
}

uint64_t _AXSForceTouchSensitivity()
{
  return MEMORY[0x1F4178AC8]();
}

uint64_t _AXSForceTouchTimeDuration()
{
  return MEMORY[0x1F4178AD0]();
}

uint64_t _AXSFullKeyboardAccessEnabled()
{
  return MEMORY[0x1F4178AD8]();
}

uint64_t _AXSFullKeyboardAccessPassthroughModeEnabled()
{
  return MEMORY[0x1F4178AE0]();
}

uint64_t _AXSFullKeyboardAccessUsesSimulatedKeyboardForAutomation()
{
  return MEMORY[0x1F4178AF0]();
}

uint64_t _AXSGrayscaleEnabled()
{
  return MEMORY[0x1F4178B00]();
}

uint64_t _AXSHearingDevicePairedEars()
{
  return MEMORY[0x1F4178B50]();
}

uint64_t _AXSHighContrastFocusIndicatorsEnabled()
{
  return MEMORY[0x1F4178B58]();
}

uint64_t _AXSIncreaseButtonLegibility()
{
  return MEMORY[0x1F4178CD8]();
}

uint64_t _AXSInvertColorsEnabled()
{
  return MEMORY[0x1F4178CF0]();
}

uint64_t _AXSKeyRepeatDelay()
{
  return MEMORY[0x1F4178D20]();
}

uint64_t _AXSKeyRepeatEnabled()
{
  return MEMORY[0x1F4178D28]();
}

uint64_t _AXSKeyRepeatInterval()
{
  return MEMORY[0x1F4178D30]();
}

uint64_t _AXSLowercaseKeyboardDisplayEnabled()
{
  return MEMORY[0x1F4178D88]();
}

uint64_t _AXSMonoAudioEnabled()
{
  return MEMORY[0x1F4178D90]();
}

uint64_t _AXSNamedSingleSystemColor()
{
  return MEMORY[0x1F4178DB8]();
}

uint64_t _AXSPointerAllowAppCustomizationEnabled()
{
  return MEMORY[0x1F4178DF0]();
}

uint64_t _AXSPointerEffectScalingEnabled()
{
  return MEMORY[0x1F4178DF8]();
}

uint64_t _AXSPreferredFontSize()
{
  return MEMORY[0x1F4178E08]();
}

uint64_t _AXSProcessDrawsAssistiveUI()
{
  return MEMORY[0x1F4178E20]();
}

uint64_t _AXSQuickSpeakEnabled()
{
  return MEMORY[0x1F4178E30]();
}

uint64_t _AXSReduceMotionAutoplayVideoPreviewsEnabled()
{
  return MEMORY[0x1F4178E58]();
}

uint64_t _AXSReduceMotionEnabled()
{
  return MEMORY[0x1F4178E60]();
}

uint64_t _AXSReduceMotionReduceSlideTransitionsEnabled()
{
  return MEMORY[0x1F4178E78]();
}

uint64_t _AXSReduceWhitePointEnabled()
{
  return MEMORY[0x1F4178E88]();
}

uint64_t _AXSShakeToUndoDisabled()
{
  return MEMORY[0x1F4179008]();
}

uint64_t _AXSSingleSystemColorValues()
{
  return MEMORY[0x1F4179020]();
}

uint64_t _AXSSpeakThisEnabled()
{
  return MEMORY[0x1F4179048]();
}

uint64_t _AXSUseDarkerKeyboard()
{
  return MEMORY[0x1F41790B8]();
}

uint64_t _AXSUseSingleSystemColor()
{
  return MEMORY[0x1F41790C0]();
}

uint64_t _AXSVisualAlertEnabled()
{
  return MEMORY[0x1F41790C8]();
}

uint64_t _AXSVoiceOverTouchEnabled()
{
  return MEMORY[0x1F4179120]();
}

uint64_t _AXSWatchControlEnabled()
{
  return MEMORY[0x1F4179200]();
}

uint64_t _AXSZoomTouchEnabled()
{
  return MEMORY[0x1F4179210]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFAppVersionCheck()
{
  return MEMORY[0x1F40D8B18]();
}

uint64_t _CFGetProductName()
{
  return MEMORY[0x1F40D8DF8]();
}

uint64_t _CFRunLoopSetPerCalloutAutoreleasepoolEnabled()
{
  return MEMORY[0x1F40D90C0]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _CFURLAttachSecurityScopeToFileURL()
{
  return MEMORY[0x1F40D91E8]();
}

uint64_t _CFURLCopyLogicalURLOfPromiseAtURL()
{
  return MEMORY[0x1F40D9260]();
}

uint64_t _CFURLCopySecurityScopeFromFileURL()
{
  return MEMORY[0x1F40D92B0]();
}

uint64_t _CFURLIsItemPromiseAtURL()
{
  return MEMORY[0x1F40D9350]();
}

uint64_t _CFURLPromiseCopyPhysicalURL()
{
  return MEMORY[0x1F40D9368]();
}

uint64_t _CFURLPromiseSetPhysicalURL()
{
  return MEMORY[0x1F40D9380]();
}

void _CVCDiffableDataSourceInitializeWithUpdateItemClass()
{
  while (1)
    ;
}

uint64_t _GSEventGetGSEventRecord()
{
  return MEMORY[0x1F411CA30]();
}

void *_MXSignpostMetricsSnapshot(void)
{
  return (void *)MEMORY[0x1F4150340]();
}

NSDictionary *_NSDictionaryOfVariableBindings(NSString *commaSeparatedKeysString, id firstValue, ...)
{
  return (NSDictionary *)MEMORY[0x1F4113AF8](commaSeparatedKeysString, firstValue);
}

uint64_t _NSFullMethodName()
{
  return MEMORY[0x1F40E7358]();
}

uint64_t _NSIsNSDictionary()
{
  return MEMORY[0x1F40D94B8]();
}

uint64_t _NSIsNSNumber()
{
  return MEMORY[0x1F40D94C0]();
}

uint64_t _NSIsNSObject()
{
  return MEMORY[0x1F40D94C8]();
}

uint64_t _NSIsNSString()
{
  return MEMORY[0x1F40D94E0]();
}

void _UIDiffableDataSourceApplyDeleteUpdate()
{
  while (1)
    ;
}

void _UIDiffableDataSourceApplyInsertUpdate()
{
  while (1)
    ;
}

void _UIDiffableDataSourceApplyMoveUpdate()
{
  while (1)
    ;
}

void _UIDiffableDataSourceValidateIdentifiers()
{
  while (1)
    ;
}

void _UIDiffableDataSourceValidateIdentifiersForDiff()
{
  while (1)
    ;
}

uint64_t _UISSetSystemReferenceAngleDataSource()
{
  return MEMORY[0x1F4167190]();
}

uint64_t _UISStringForSystemReferenceAngleMode()
{
  return MEMORY[0x1F4167198]();
}

uint64_t _UISTouchAuthenticationTelemetryReportRecord()
{
  return MEMORY[0x1F41671A0]();
}

uint64_t _UISVisibilityEnvironmentForSceneIdentityTokenString()
{
  return MEMORY[0x1F41671A8]();
}

uint64_t _UISVisibilityEnvironmentForUIHostedWindowContextID()
{
  return MEMORY[0x1F41671B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __CVCForceCastToSnapshotImpl()
{
  while (1)
    ;
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

uint64_t __memmove_chk()
{
  return MEMORY[0x1F40C9C30]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x1F40C9C88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

uint64_t _bs_set_crash_log_message()
{
  return MEMORY[0x1F410C6F0]();
}

uint64_t _class_setCustomDeallocInitiation()
{
  return MEMORY[0x1F41813B0]();
}

const char *__cdecl _dyld_get_image_name(uint32_t image_index)
{
  return (const char *)MEMORY[0x1F40C9E10](*(void *)&image_index);
}

void _exit(int a1)
{
}

{
  return MEMORY[0x1F41813F0]();
}

uint64_t _objc_rootIsDeallocating()
{
  return MEMORY[0x1F4181470]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1F40C9F70](dso, description, activity, *(void *)&flags);
}

uint64_t _os_crash()
{
  return MEMORY[0x1F40C9FA0]();
}

uint64_t _os_crash_msg()
{
  return MEMORY[0x1F40C9FA8]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1F40C9FF8]();
}

uint64_t _os_signpost_emit_unreliably_with_name_impl()
{
  return MEMORY[0x1F40CA058]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sandbox_in_a_container()
{
  return MEMORY[0x1F40CA128]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x1F4186340]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1F4186370]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1F40CA210](a1, *(void *)&a2);
}

long double acos(long double __x)
{
  MEMORY[0x1F40CA330](__x);
  return result;
}

float acosf(float a1)
{
  MEMORY[0x1F40CA340](a1);
  return result;
}

uint64_t alm_app_did_activate()
{
  return MEMORY[0x1F417DDB8]();
}

uint64_t alm_app_did_present_with_metrics_payload()
{
  return MEMORY[0x1F417DDC0]();
}

uint64_t alm_app_extended_launch_end_with_details()
{
  return MEMORY[0x1F417DDC8]();
}

uint64_t alm_execute_when_measurement_complete()
{
  return MEMORY[0x1F417DDF0]();
}

uint64_t alm_legacy_app_regular_or_extended_launch_end()
{
  return MEMORY[0x1F417DDF8]();
}

uint64_t alm_stop_tracking_responsive_launch()
{
  return MEMORY[0x1F417DE00]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

long double asin(long double __x)
{
  MEMORY[0x1F40CA3D0](__x);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x1F40CA468](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x1F40CA470](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

uint64_t bls_scenes_log()
{
  return MEMORY[0x1F410C100]();
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1F40CA548](*(void *)&bp, service_name, sp);
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1F40CA578](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t catlas_dset_NEWLAPACK()
{
  return MEMORY[0x1F40D14F8]();
}

uint64_t cblas_dcopy_NEWLAPACK()
{
  return MEMORY[0x1F40D1558]();
}

uint64_t cblas_dgemm_NEWLAPACK()
{
  return MEMORY[0x1F40D1578]();
}

uint64_t cblas_dgemv_NEWLAPACK()
{
  return MEMORY[0x1F40D1588]();
}

uint64_t cblas_dnrm2_NEWLAPACK()
{
  return MEMORY[0x1F40D1590]();
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1F41814C8](cls, name, imp, types);
}

BOOL class_conformsToProtocol(Class cls, Protocol *protocol)
{
  return MEMORY[0x1F41814E0](cls, protocol);
}

Ivar *__cdecl class_copyIvarList(Class cls, unsigned int *outCount)
{
  return (Ivar *)MEMORY[0x1F41814E8](cls, outCount);
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return (Method *)MEMORY[0x1F41814F8](cls, outCount);
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return (objc_property_t *)MEMORY[0x1F4181500](cls, outCount);
}

Method class_getClassMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181518](cls, name);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181528](cls, name);
}

IMP class_getMethodImplementation(Class cls, SEL name)
{
  return (IMP)MEMORY[0x1F4181540](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1F4181548](cls);
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1F4181558](cls);
}

BOOL class_isMetaClass(Class cls)
{
  return MEMORY[0x1F4181568](cls);
}

IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return (IMP)MEMORY[0x1F4181578](cls, name, imp, types);
}

BOOL class_respondsToSelector(Class cls, SEL sel)
{
  return MEMORY[0x1F4181580](cls, sel);
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1F40CB3D0](*(void *)&__clock_id, __tp);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1F40CB880](from, to, state, *(void *)&flags);
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x1F40CB8B0](a1);
  return result;
}

long double cosh(long double __x)
{
  MEMORY[0x1F40CB8B8](__x);
  return result;
}

uint64_t dgetrf_NEWLAPACK()
{
  return MEMORY[0x1F40D1738]();
}

uint64_t dgetri_NEWLAPACK()
{
  return MEMORY[0x1F40D1748]();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_block_cancel(dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBA58]();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCF8](source);
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD50](label);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1F40CBDA0](a1, a2);
}

uint64_t dlaswp_NEWLAPACK()
{
  return MEMORY[0x1F40D1760]();
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

uint64_t dtrtrs_NEWLAPACK()
{
  return MEMORY[0x1F40D17A0]();
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1F40CBE28]();
}

uint64_t dyld_image_header_containing_address()
{
  return MEMORY[0x1F40CBE68]();
}

uint64_t dyld_image_path_containing_address()
{
  return MEMORY[0x1F40CBE70]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1F40CBEC8]();
}

uint64_t entr_act_begin()
{
  return MEMORY[0x1F417F600]();
}

uint64_t entr_act_end()
{
  return MEMORY[0x1F417F608]();
}

uint64_t entr_act_modify()
{
  return MEMORY[0x1F417F610]();
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

int faccessat(int a1, const char *a2, int a3, int a4)
{
  return MEMORY[0x1F40CC018](*(void *)&a1, a2, *(void *)&a3, *(void *)&a4);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

pid_t fork(void)
{
  return MEMORY[0x1F40CC1C8]();
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1F40CC3B8]();
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

pid_t getppid(void)
{
  return MEMORY[0x1F40CC4B0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

void glBindBuffer(GLenum target, GLuint buffer)
{
}

void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
}

void glBlendFunc(GLenum sfactor, GLenum dfactor)
{
}

void glBufferData(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)
{
}

void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)
{
}

void glClear(GLbitfield mask)
{
}

void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
}

void glDeleteBuffers(GLsizei n, const GLuint *buffers)
{
}

void glDrawArrays(GLenum mode, GLint first, GLsizei count)
{
}

void glEnableVertexAttribArray(GLuint index)
{
}

void glGenBuffers(GLsizei n, GLuint *buffers)
{
}

void glLineWidth(GLfloat width)
{
}

void glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLBOOLean normalized, GLsizei stride, const GLvoid *ptr)
{
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x1F40CC630](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  MEMORY[0x1F40CC640](a1, a2);
  return result;
}

uint64_t ilaenv_NEWLAPACK()
{
  return MEMORY[0x1F40D17B0]();
}

IMP imp_implementationWithBlock(id block)
{
  return (IMP)MEMORY[0x1F4181598](block);
}

const char *__cdecl ivar_getName(Ivar v)
{
  return (const char *)MEMORY[0x1F41815B8](v);
}

ptrdiff_t ivar_getOffset(Ivar v)
{
  return MEMORY[0x1F41815C0](v);
}

const char *__cdecl ivar_getTypeEncoding(Ivar v)
{
  return (const char *)MEMORY[0x1F41815C8](v);
}

uint64_t kac_get_log()
{
  return MEMORY[0x1F4163E38]();
}

uint64_t kace_get_log()
{
  return MEMORY[0x1F4163E40]();
}

uint64_t kdebug_is_enabled()
{
  return MEMORY[0x1F40CC6F0]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

uint64_t kdebug_trace_string()
{
  return MEMORY[0x1F40CC708]();
}

long double ldexp(long double __x, int __e)
{
  MEMORY[0x1F40CC800](*(void *)&__e, __x);
  return result;
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC870](a1, a2);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1F40CC930]();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1F40CC970](msg, *(void *)&option, *(void *)&send_size, *(void *)&rcv_size, *(void *)&rcv_name, *(void *)&timeout, *(void *)&notify);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1F40CCA08](*(void *)&task, *(void *)&name, *(void *)&poly, *(void *)&polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1F40CCA10](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

mach_port_t mach_thread_self(void)
{
  return MEMORY[0x1F40CCA58]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void malloc_zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats)
{
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

uint64_t memorystatus_control()
{
  return MEMORY[0x1F40CCD18]();
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
}

char *__cdecl method_copyArgumentType(Method m, unsigned int index)
{
  return (char *)MEMORY[0x1F41815D0](m, *(void *)&index);
}

char *__cdecl method_copyReturnType(Method m)
{
  return (char *)MEMORY[0x1F41815D8](m);
}

void method_exchangeImplementations(Method m1, Method m2)
{
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1F41815F8](m);
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x1F4181600](m);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1F4181618](m);
}

IMP method_setImplementation(Method m, IMP imp)
{
  return (IMP)MEMORY[0x1F4181628](m, imp);
}

uint64_t mk_timer_arm_leeway()
{
  return MEMORY[0x1F40CCDB0]();
}

uint64_t mk_timer_cancel()
{
  return MEMORY[0x1F40CCDB8]();
}

uint64_t mk_timer_create()
{
  return MEMORY[0x1F40CCDC0]();
}

uint64_t mk_timer_destroy()
{
  return MEMORY[0x1F40CCDC8]();
}

char *__cdecl mkdtemp(char *a1)
{
  return (char *)MEMORY[0x1F40CCDE0](a1);
}

int mkstemps(char *a1, int a2)
{
  return MEMORY[0x1F40CCE18](a1, *(void *)&a2);
}

char *__cdecl mktemp(char *a1)
{
  return (char *)MEMORY[0x1F40CCE28](a1);
}

float modff(float a1, float *a2)
{
  MEMORY[0x1F40CCE50](a2, a1);
  return result;
}

long double nextafter(long double __x, long double __y)
{
  MEMORY[0x1F40CCFF8](__x, __y);
  return result;
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_check(int token, int *check)
{
  return MEMORY[0x1F40CD038](*(void *)&token, check);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1F40CD088](*(void *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

Protocol *__cdecl objc_allocateProtocol(const char *name)
{
  return (Protocol *)MEMORY[0x1F4181658](name);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

int objc_getClassList(Class *buffer, int bufferCount)
{
  return MEMORY[0x1F4181730](buffer, *(void *)&bufferCount);
}

Class objc_getMetaClass(const char *name)
{
  return (Class)MEMORY[0x1F4181740](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

Protocol *__cdecl objc_getProtocol(const char *name)
{
  return (Protocol *)MEMORY[0x1F4181750](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1F4181778](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_registerProtocol(Protocol *proto)
{
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

id objc_storeWeakOrNil(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A20](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1F4181A60](a1);
}

id object_getIvar(id a1, Ivar a2)
{
  return (id)MEMORY[0x1F4181A78](a1, a2);
}

uint64_t object_getMethodImplementation()
{
  return MEMORY[0x1F4181A80]();
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1F40CD120](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

uint64_t os_eligibility_get_domain_answer()
{
  return MEMORY[0x1F40CD2B0]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1F40CD560](log, ptr);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1F40CD570]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1F40CD578]();
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x1F40CD5F0](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1F40CD610]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1F40CD628]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

int pclose(FILE *a1)
{
  return MEMORY[0x1F40CD740](a1);
}

int pipe(int a1[2])
{
  return MEMORY[0x1F40CD760](a1);
}

FILE *__cdecl popen(const char *a1, const char *a2)
{
  return (FILE *)MEMORY[0x1F40CD780](a1, a2);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A8](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

uint64_t proc_setthread_cpupercent()
{
  return MEMORY[0x1F40CD8F0]();
}

objc_property_attribute_t *__cdecl property_copyAttributeList(objc_property_t property, unsigned int *outCount)
{
  return (objc_property_attribute_t *)MEMORY[0x1F4181AB8](property, outCount);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return (const char *)MEMORY[0x1F4181AD0](property);
}

void protocol_addProtocol(Protocol *proto, Protocol *addition)
{
}

objc_method_description protocol_getMethodDescription(Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod)
{
  double v4 = (const char *)MEMORY[0x1F4181B08](p, aSel, isRequiredMethod, isInstanceMethod);
  result.types = v5;
  result.name = v4;
  return result;
}

const char *__cdecl protocol_getName(Protocol *p)
{
  return (const char *)MEMORY[0x1F4181B10](p);
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x1F40CDA18](a1, a2, a3);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x1F40CDA60](a1);
}

int pthread_main_np(void)
{
  return MEMORY[0x1F40CDA68]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1F40CDAC8](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setschedparam(pthread_t a1, int a2, const sched_param *a3)
{
  return MEMORY[0x1F40CDB68](a1, *(void *)&a2, a3);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

qos_class_t qos_class_main(void)
{
  return MEMORY[0x1F40CDBD0]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1F40CDC60](a1);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1F40CDC88](__ptr, __size);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1F40CDC98](a1, a2);
}

long double remainder(long double __x, long double __y)
{
  MEMORY[0x1F40CDD00](__x, __y);
  return result;
}

long double remquo(long double __x, long double __y, int *__z)
{
  MEMORY[0x1F40CDD50](__z, __x, __y);
  return result;
}

int rmdir(const char *a1)
{
  return MEMORY[0x1F40CDD90](a1);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1F40CDDD0]();
}

uint64_t sandbox_check_by_audit_token()
{
  return MEMORY[0x1F40CDDD8]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1F40CDE00]();
}

int sched_yield(void)
{
  return MEMORY[0x1F40CDEC8]();
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1F4181B28](sel);
}

BOOL sel_isEqual(SEL lhs, SEL rhs)
{
  return MEMORY[0x1F4181B38](lhs, rhs);
}

int sem_close(sem_t *a1)
{
  return MEMORY[0x1F40CDEE8](a1);
}

sem_t *sem_open(const char *a1, int a2, ...)
{
  return (sem_t *)MEMORY[0x1F40CDEF0](a1, *(void *)&a2);
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  return MEMORY[0x1F40CDF60](__name, __value, *(void *)&__overwrite);
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x1F40CE060](a1);
  return result;
}

long double sinh(long double __x)
{
  MEMORY[0x1F40CE068](__x);
  return result;
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sscanf_l(const char *a1, locale_t a2, const char *a3, ...)
{
  return MEMORY[0x1F40CE0D8](a1, a2, a3);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2F0](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1F4186478]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1F41881F0]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1F41881F8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x1F41864C8]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1F41864D0]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1F41864E0]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1F41864E8]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x1F41864F0]();
}

uint64_t swift_dynamicCastObjCProtocolUnconditional()
{
  return MEMORY[0x1F41864F8]();
}

uint64_t swift_dynamicCastTypeToObjCProtocolConditional()
{
  return MEMORY[0x1F4186500]();
}

uint64_t swift_dynamicCastUnknownClass()
{
  return MEMORY[0x1F4186508]();
}

uint64_t swift_dynamicCastUnknownClassUnconditional()
{
  return MEMORY[0x1F4186510]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1F4186550]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1F4186568]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1F4186580]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x1F41865C8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1F41865E8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1F41865F0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassFromObject()
{
  return MEMORY[0x1F4186600]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x1F4186618]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x1F4186640]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x1F4186658]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1F41866F8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_modifyAtReferenceWritableKeyPath()
{
  return MEMORY[0x1F4186718]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1F4186730]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x1F4186738]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setAtReferenceWritableKeyPath()
{
  return MEMORY[0x1F4186780]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x1F4186788]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1F41867B0]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1F41867E8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_unknownObjectUnownedDestroy()
{
  return MEMORY[0x1F4186818]();
}

uint64_t swift_unknownObjectUnownedInit()
{
  return MEMORY[0x1F4186820]();
}

uint64_t swift_unknownObjectUnownedLoadStrong()
{
  return MEMORY[0x1F4186828]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1F4186840]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x1F4186848]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x1F4186850]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x1F4186870]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x1F4186878]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x1F4186880]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x1F4186888]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x1F4186890]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1F41868A0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  MEMORY[0x1F40CE420](__x);
  return result;
}

float tanf(float a1)
{
  MEMORY[0x1F40CE428](a1);
  return result;
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

mach_port_name_t task_self_trap(void)
{
  return MEMORY[0x1F40CE4C0]();
}

kern_return_t task_threads(task_inspect_t target_task, thread_act_array_t *act_list, mach_msg_type_number_t *act_listCnt)
{
  return MEMORY[0x1F40CE4D8](*(void *)&target_task, act_list, act_listCnt);
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x1F40CE530](*(void *)&target_act, *(void *)&flavor, thread_info_out, thread_info_outCnt);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x1F40CE540](*(void *)&thread, *(void *)&flavor, policy_info, *(void *)&policy_infoCnt);
}

int32_t u_charDigitValue(UChar32 c)
{
  return MEMORY[0x1F417F6F8](*(void *)&c);
}

UCharDirection u_charDirection(UChar32 c)
{
  return MEMORY[0x1F417F700](*(void *)&c);
}

void u_versionToString(const UVersionInfo versionArray, char *versionString)
{
}

uint64_t ucal_getCanonicalTimeZoneID()
{
  return MEMORY[0x1F417FAE0]();
}

uint64_t uldn_localeDisplayName()
{
  return MEMORY[0x1F41800A0]();
}

uint64_t uldn_openForContext()
{
  return MEMORY[0x1F41800B0]();
}

uint64_t uloc_addLikelySubtags()
{
  return MEMORY[0x1F4180108]();
}

uint64_t uloc_getCharacterOrientation()
{
  return MEMORY[0x1F4180138]();
}

uint64_t ulocdata_getCLDRVersion()
{
  return MEMORY[0x1F41801F0]();
}

uint64_t uscript_getCode()
{
  return MEMORY[0x1F41805C8]();
}

uint64_t uscript_hasScript()
{
  return MEMORY[0x1F41805F8]();
}

uint64_t uset_contains()
{
  return MEMORY[0x1F41806E0]();
}

uint64_t uset_openPattern()
{
  return MEMORY[0x1F4180720]();
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

void vDSP_distancesqD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Length __N)
{
}

void vDSP_dotprD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Length __N)
{
}

void vDSP_maxvD(const double *__A, vDSP_Stride __I, double *__C, vDSP_Length __N)
{
}

void vDSP_minvD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Length __N)
{
}

void vDSP_vaddD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vdivD(const double *__B, vDSP_Stride __IB, const double *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vmaxD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vminD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vmulD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsdivD(const double *__A, vDSP_Stride __IA, const double *__B, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsmaD(const double *__A, vDSP_Stride __IA, const double *__B, const double *__C, vDSP_Stride __IC, double *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsmsbD(const double *__A, vDSP_Stride __IA, const double *__B, const double *__C, vDSP_Stride __IC, double *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsmulD(const double *__A, vDSP_Stride __IA, const double *__B, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsubD(const double *__B, vDSP_Stride __IB, const double *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

vImage_Error vImageBoxConvolve_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, uint32_t kernel_height, uint32_t kernel_width, const Pixel_8888 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1F40D2258](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, *(void *)&kernel_height, *(void *)&kernel_width, backgroundColor);
}

vImage_Error vImageBuffer_Init(vImage_Buffer *buf, vImagePixelCount height, vImagePixelCount width, uint32_t pixelBits, vImage_Flags flags)
{
  return MEMORY[0x1F40D22A0](buf, height, width, *(void *)&pixelBits, *(void *)&flags);
}

vImage_Error vImageBuffer_InitWithCGImage(vImage_Buffer *buf, vImage_CGImageFormat *format, const CGFloat *backgroundColor, CGImageRef image, vImage_Flags flags)
{
  return MEMORY[0x1F40D22B8](buf, format, backgroundColor, image, *(void *)&flags);
}

vImage_Error vImageConvert_ARGB8888toPlanar8(const vImage_Buffer *srcARGB, const vImage_Buffer *destA, const vImage_Buffer *destR, const vImage_Buffer *destG, const vImage_Buffer *destB, vImage_Flags flags)
{
  return MEMORY[0x1F40D2528](srcARGB, destA, destR, destG, destB, *(void *)&flags);
}

vImage_Error vImageConvert_ARGBFFFFtoPlanarF(const vImage_Buffer *srcARGB, const vImage_Buffer *destA, const vImage_Buffer *destR, const vImage_Buffer *destG, const vImage_Buffer *destB, vImage_Flags flags)
{
  return MEMORY[0x1F40D2560](srcARGB, destA, destR, destG, destB, *(void *)&flags);
}

vImage_Error vImageHistogramCalculation_Planar8(const vImage_Buffer *src, vImagePixelCount *histogram, vImage_Flags flags)
{
  return MEMORY[0x1F40D2960](src, histogram, *(void *)&flags);
}

vImage_Error vImageHistogramCalculation_PlanarF(const vImage_Buffer *src, vImagePixelCount *histogram, unsigned int histogram_entries, Pixel_F minVal, Pixel_F maxVal, vImage_Flags flags)
{
  return MEMORY[0x1F40D2968](src, histogram, *(void *)&histogram_entries, *(void *)&flags, minVal, maxVal);
}

vImage_Error vImageMatrixMultiply_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const int16_t matrix[16], int32_t divisor, const int16_t *pre_bias, const int32_t *post_bias, vImage_Flags flags)
{
  return MEMORY[0x1F40D2A58](src, dest, matrix, *(void *)&divisor, pre_bias, post_bias, *(void *)&flags);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1F40D2CD8](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageTentConvolve_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, uint32_t kernel_height, uint32_t kernel_width, const Pixel_8888 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1F40D2D48](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, *(void *)&kernel_height, *(void *)&kernel_width, backgroundColor);
}

vImage_Error vImageTentConvolve_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, uint32_t kernel_height, uint32_t kernel_width, Pixel_8 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1F40D2D50](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, *(void *)&kernel_height, *(void *)&kernel_width, backgroundColor);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1F40CE6C0](*(void *)&target_task, address, size);
}

void vvceil(double *a1, const double *a2, const int *a3)
{
}

void vvfloor(double *a1, const double *a2, const int *a3)
{
}

void vvremainder(double *a1, const double *a2, const double *a3, const int *a4)
{
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  return MEMORY[0x1F40CE7C8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t work_interval_create()
{
  return MEMORY[0x1F40CE8C8]();
}

uint64_t work_interval_instance_alloc()
{
  return MEMORY[0x1F40CE8D8]();
}

uint64_t work_interval_instance_clear()
{
  return MEMORY[0x1F40CE8E0]();
}

uint64_t work_interval_instance_finish()
{
  return MEMORY[0x1F40CE8E8]();
}

uint64_t work_interval_instance_set_complexity()
{
  return MEMORY[0x1F40CE8F8]();
}

uint64_t work_interval_instance_set_deadline()
{
  return MEMORY[0x1F40CE900]();
}

uint64_t work_interval_instance_set_finish()
{
  return MEMORY[0x1F40CE908]();
}

uint64_t work_interval_instance_set_start()
{
  return MEMORY[0x1F40CE910]();
}

uint64_t work_interval_instance_start()
{
  return MEMORY[0x1F40CE918]();
}

uint64_t work_interval_instance_update()
{
  return MEMORY[0x1F40CE920]();
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

uint64_t xpc_connection_copy_bundle_id()
{
  return MEMORY[0x1F40CEB88]();
}

uint64_t xpc_connection_set_oneshot_instance()
{
  return MEMORY[0x1F40CECC0]();
}

uint64_t xpc_copy_bootstrap()
{
  return MEMORY[0x1F40CED08]();
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1F40CEE08](xdict, applier);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

double xpc_dictionary_get_double(xpc_object_t xdict, const char *key)
{
  MEMORY[0x1F40CEEB8](xdict, key);
  return result;
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEF8](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1F40CF2C8](xstring);
}